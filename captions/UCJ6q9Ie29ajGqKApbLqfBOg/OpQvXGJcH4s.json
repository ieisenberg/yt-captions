[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "now it's my pleasure to Welcome to the stage Ned Williamson",
    "start": "7639",
    "end": "13099"
  },
  {
    "text": "[Applause] all right hello cool it's working",
    "start": "13190",
    "end": "21000"
  },
  {
    "text": "uh without further Ado let's just get into it uh this talk is called catch me if",
    "start": "21000",
    "end": "26340"
  },
  {
    "text": "you can uh kind of cliche someone else had the same phrase on one of their talks so sorry but uh we'll be talking",
    "start": "26340",
    "end": "34079"
  },
  {
    "text": "about race condition fuzzing today so just a quick intro on me I've been a",
    "start": "34079",
    "end": "39480"
  },
  {
    "text": "researcher at Google project zero for a couple years now I like",
    "start": "39480",
    "end": "44579"
  },
  {
    "text": "uh fuzzing as my research interest and then low level",
    "start": "44579",
    "end": "49680"
  },
  {
    "text": "security embedded systems browser IPC kernels as my I guess Target of my",
    "start": "49680",
    "end": "55500"
  },
  {
    "text": "research so this talk I'll be uh on theme with that I'll be talking about",
    "start": "55500",
    "end": "61680"
  },
  {
    "text": "research related to fuzzing and then how we can apply it to Kernel fuzzing on iOS",
    "start": "61680",
    "end": "69020"
  },
  {
    "text": "so the thing I want to start with is uh you know this talk is mostly about addressing the problem of fuzzing for",
    "start": "69240",
    "end": "76500"
  },
  {
    "text": "race conditions and more generally it's just about how to even deal with race conditions and someone who uses fuzzing a lot I'm",
    "start": "76500",
    "end": "83880"
  },
  {
    "text": "pretty biased but just to introduce the problem here's just a small snippet I took",
    "start": "83880",
    "end": "89880"
  },
  {
    "text": "of some bugs that were reported by my team in the past couple years and",
    "start": "89880",
    "end": "95460"
  },
  {
    "text": "then a couple of these I think one of the the Android binder bug and dirty cow I just put there so uh just so you're",
    "start": "95460",
    "end": "103799"
  },
  {
    "text": "familiar with maybe there's some more famous bugs as well but essentially these bugs have been",
    "start": "103799",
    "end": "111000"
  },
  {
    "text": "um you know of high security criticality and really you know it's something we just",
    "start": "111000",
    "end": "117360"
  },
  {
    "text": "continue to turn into and something that we need to address but we don't have any good tooling for it so",
    "start": "117360",
    "end": "123240"
  },
  {
    "text": "I know I was frustrated by this and that's kind of over time I thought how can I address this and bring some",
    "start": "123240",
    "end": "129060"
  },
  {
    "text": "automation to discovering these issues uh without relying on luck or pure human",
    "start": "129060",
    "end": "134580"
  },
  {
    "text": "ingenuity so yeah this is the problem they're they're hard to find so we don't really have any",
    "start": "134580",
    "end": "141540"
  },
  {
    "text": "better way to find them than static analysis or auditing which I would",
    "start": "141540",
    "end": "146640"
  },
  {
    "text": "consider pretty similar and related so human other has to today",
    "start": "146640",
    "end": "152540"
  },
  {
    "text": "realize that there's the potential for a race condition somewhere or at least to",
    "start": "152540",
    "end": "158040"
  },
  {
    "text": "be aware of some specific pattern and then maybe write a static analysis",
    "start": "158040",
    "end": "163440"
  },
  {
    "text": "maybe like a matcher on the syntax tree to find this specific case where a known",
    "start": "163440",
    "end": "170459"
  },
  {
    "text": "buggy pattern occurs but we don't really have a nice way to find",
    "start": "170459",
    "end": "175940"
  },
  {
    "text": "race condition bugs in general and maybe I shouldn't say in general but we just",
    "start": "175940",
    "end": "181800"
  },
  {
    "text": "don't have an automated way to do this for bugs that we can describe the",
    "start": "181800",
    "end": "188340"
  },
  {
    "text": "problem when we see it like we know when it crashes that there's a problem we don't have a way to actually search for",
    "start": "188340",
    "end": "194159"
  },
  {
    "text": "those bugs without essentially knowing what we're looking for already so that's the the fundamental issue",
    "start": "194159",
    "end": "200400"
  },
  {
    "text": "and fuzzing actually is generally pretty good at addressing this category of problem uh you don't necessarily need to",
    "start": "200400",
    "end": "207360"
  },
  {
    "text": "know the form of the bug you're looking for you just need to know the property that",
    "start": "207360",
    "end": "213480"
  },
  {
    "text": "you're trying to violate and so for security reasons you know mostly we look at memory safety as that property",
    "start": "213480",
    "end": "220519"
  },
  {
    "text": "but earlier teammate Yvonne gave a talk on this xmpp stanza fuzzing and there he",
    "start": "220519",
    "end": "227519"
  },
  {
    "text": "was trying to violate this property of consistency between parsers so it's not just memory corruption but generally",
    "start": "227519",
    "end": "234060"
  },
  {
    "text": "fuzzing is pretty good at saying you know give me a property give me a way to interact with this program and I will try to find test cases that violate that",
    "start": "234060",
    "end": "241140"
  },
  {
    "text": "property and that's actually a very nice thing for race conditions or timing",
    "start": "241140",
    "end": "246239"
  },
  {
    "text": "issues because we might say if we see a use after free you know that's caused by a race condition we don't need to",
    "start": "246239",
    "end": "251640"
  },
  {
    "text": "understand how that happened we just we know that fuzzing could observe it if it managed to trigger it but then the",
    "start": "251640",
    "end": "257699"
  },
  {
    "text": "question is how do you actually fuzz so to actually address this problem we'll",
    "start": "257699",
    "end": "263639"
  },
  {
    "text": "have to first cover how scheduling works and um don't worry I'm giving me an",
    "start": "263639",
    "end": "269400"
  },
  {
    "text": "overview because I didn't remember how any of this worked when I started this project so this is a kind of a quick",
    "start": "269400",
    "end": "275759"
  },
  {
    "text": "overview so I think that there's two there's a kind of an important partition over types of scheduling that you can do",
    "start": "275759",
    "end": "283020"
  },
  {
    "text": "to kind of consider what we can test well and what we can't test well so what we can test well is cooperative",
    "start": "283020",
    "end": "289740"
  },
  {
    "text": "scheduling and this is uh where I'll start with this little demonstration so how Cooperative",
    "start": "289740",
    "end": "296960"
  },
  {
    "text": "scheduling looks is that all the threads are cooperating with each other they yield explicitly so say in this case we",
    "start": "296960",
    "end": "304800"
  },
  {
    "text": "start execution in thread one this will continue along and at some point this thread says uh",
    "start": "304800",
    "end": "312000"
  },
  {
    "text": "I'm ready to yield that goes to the scheduler and at this point the scheduler can decide",
    "start": "312000",
    "end": "318000"
  },
  {
    "text": "okay I'm either going to switch back into thread one and continue or go to thread two in this case we'll go to thread two",
    "start": "318000",
    "end": "324300"
  },
  {
    "text": "and execute all the way to the bottom there's no yield statement so then this",
    "start": "324300",
    "end": "329340"
  },
  {
    "text": "thread terminates and we go back to the scheduler and then the scheduler says okay we'll only thread one is runnable in this",
    "start": "329340",
    "end": "335039"
  },
  {
    "text": "little example and so we just go there and continue so now if we look at how primitive",
    "start": "335039",
    "end": "341280"
  },
  {
    "text": "scheduling works it's actually very similar so we have the same example continue along there's some explicit",
    "start": "341280",
    "end": "348000"
  },
  {
    "text": "yield maybe we're blocked on a lock maybe we just literally yield you know this is a",
    "start": "348000",
    "end": "353460"
  },
  {
    "text": "assist call on some platforms go to the scheduler same thing happens but in this case at some point during",
    "start": "353460",
    "end": "360660"
  },
  {
    "text": "the execution of thread 2 we get a timer interrupt or some other condition happens that preempts this thread",
    "start": "360660",
    "end": "367860"
  },
  {
    "text": "and so this causes us to go back to the scheduler and the scheduler is faced with the decision again out of these two",
    "start": "367860",
    "end": "373500"
  },
  {
    "text": "runnable threads which one do I run and here it might decide to actually continue with thread one",
    "start": "373500",
    "end": "379139"
  },
  {
    "text": "and then resume this ends and then we come over to thread two so",
    "start": "379139",
    "end": "384840"
  },
  {
    "text": "the important bit is that uh if there are assumptions about or if",
    "start": "384840",
    "end": "391620"
  },
  {
    "text": "there's any safety issues or assumptions between the two threads that don't respect the fact that these preemptions",
    "start": "391620",
    "end": "397800"
  },
  {
    "text": "could occur anywhere then we may have a bug and so we want to be able to address this problem with fuzzing",
    "start": "397800",
    "end": "404819"
  },
  {
    "text": "now the the interesting bit and I guess my philosophy is I always try to start with",
    "start": "404819",
    "end": "410160"
  },
  {
    "text": "something that I know works well and slowly add to it to strengthen or broaden what I can do so this is why I",
    "start": "410160",
    "end": "418919"
  },
  {
    "text": "started with Cooperative scheduling you'll probably notice that these are essentially really similar they both",
    "start": "418919",
    "end": "425460"
  },
  {
    "text": "have an execution context which is just a generic way of saying a thread they both",
    "start": "425460",
    "end": "431940"
  },
  {
    "text": "can block our yield to a scheduler and the only difference release preemption just again has this additional",
    "start": "431940",
    "end": "437840"
  },
  {
    "text": "property where at any point you have these yields that just kind of appear",
    "start": "437840",
    "end": "443340"
  },
  {
    "text": "caused by interrupts or again other other conditions can could relate to it but this is a problem for fuzzing",
    "start": "443340",
    "end": "450060"
  },
  {
    "text": "because this is hard to control and it also can lead to",
    "start": "450060",
    "end": "455460"
  },
  {
    "text": "exponential blow up so the good news about Cooperative scheduling is that it is easy it",
    "start": "455460",
    "end": "461599"
  },
  {
    "text": "Cooperative scheduling because it runs in order um if you think about that first example",
    "start": "461599",
    "end": "467400"
  },
  {
    "text": "there's no random yields popping up it just it's all explicit so as long as you're",
    "start": "467400",
    "end": "473460"
  },
  {
    "text": "running the program if you have a deterministic scheduler um there's no Randomness at all you can",
    "start": "473460",
    "end": "479160"
  },
  {
    "text": "run the same test case over and over and it turns out that um this is something I leveraged back in 2018 when I did a",
    "start": "479160",
    "end": "485759"
  },
  {
    "text": "chrome sandbox Escape exploit and I think at that point I was realizing",
    "start": "485759",
    "end": "491220"
  },
  {
    "text": "like oh there's something kind of interesting here but you know maybe multi-threading will never be doable but at least",
    "start": "491220",
    "end": "497280"
  },
  {
    "text": "when you have different tasks that are running asynchronously this kind of Cooperative thing uh",
    "start": "497280",
    "end": "503220"
  },
  {
    "text": "there's really no issue for fuzzing needs so again when we get into preemptive",
    "start": "503220",
    "end": "508259"
  },
  {
    "text": "scheduling where most programs live or a lot of programs live that we would like",
    "start": "508259",
    "end": "514080"
  },
  {
    "text": "to fuzz uh this is something that's super hard to model like say you have multiple cores",
    "start": "514080",
    "end": "520200"
  },
  {
    "text": "um you know threads running simultaneously or even a single core and these random preemptions and switching",
    "start": "520200",
    "end": "526560"
  },
  {
    "text": "we really have no control here and even if we did uh we still have to search this exponential",
    "start": "526560",
    "end": "534899"
  },
  {
    "text": "search space at every single instruction and again with the tools we have today",
    "start": "534899",
    "end": "540420"
  },
  {
    "text": "if we even hit a bug by luck there's no guarantee it will reproduce so we just",
    "start": "540420",
    "end": "545820"
  },
  {
    "text": "have to cross our fingers and hope maybe we hit something um and this has happened to me I have just",
    "start": "545820",
    "end": "552360"
  },
  {
    "text": "stumbled into race condition bugs but it always bothered me that they weren't predictable so",
    "start": "552360",
    "end": "559140"
  },
  {
    "text": "just to make a little more clear my initial work from 2018 and and on to",
    "start": "559140",
    "end": "564480"
  },
  {
    "text": "about 2020 was that I would deal with this problem by converting preemptive targets to Cooperative targets by hand",
    "start": "564480",
    "end": "571279"
  },
  {
    "text": "and so what that means is whenever I was fuzzing something that say had a garbage",
    "start": "571279",
    "end": "578279"
  },
  {
    "text": "collecting thread in the background I just simply wouldn't spawn that thread I would just run the main thread and at",
    "start": "578279",
    "end": "583320"
  },
  {
    "text": "the end I would say well let's randomly run garbage collection and just call that function but",
    "start": "583320",
    "end": "589260"
  },
  {
    "text": "there would always be just one thread running and so the nice thing is this is super easy to implement in like a hacky way",
    "start": "589260",
    "end": "595920"
  },
  {
    "text": "for different fuzzing projects um I used this on Android NFC because",
    "start": "595920",
    "end": "600959"
  },
  {
    "text": "the threading model was simple enough I could just replace with with a Cooperative scheduler",
    "start": "600959",
    "end": "606540"
  },
  {
    "text": "but the problem is on larger targets there are more complex real world well Android's real world but you know",
    "start": "606540",
    "end": "613920"
  },
  {
    "text": "the rest of the world uh it gets really hard because we",
    "start": "613920",
    "end": "619500"
  },
  {
    "text": "can't support blocking if you simply just don't spawn a thread and you don't do the work that Fred would have done at",
    "start": "619500",
    "end": "626399"
  },
  {
    "text": "this very coarse Grant High Level we just have no way to handle say you you",
    "start": "626399",
    "end": "632220"
  },
  {
    "text": "call some syscall that you're fuzzing and it blocks uh well there's no notion",
    "start": "632220",
    "end": "637680"
  },
  {
    "text": "of background work like now you are the background work and something else has to happen so uh I had this idea that",
    "start": "637680",
    "end": "644339"
  },
  {
    "text": "well why don't I at least try to create a deterministic Threading Library so at least",
    "start": "644339",
    "end": "652380"
  },
  {
    "text": "I can spawn multiple threads they're really not going to be running actually in parallel they're all be on one CPU",
    "start": "652380",
    "end": "658560"
  },
  {
    "text": "but at least I can switch between them and kind of get around the blocking problem um",
    "start": "658560",
    "end": "664560"
  },
  {
    "text": "so to implement this I thought well okay let's do what already works we use only one",
    "start": "664560",
    "end": "671160"
  },
  {
    "text": "thread you know we already have multi-thread programs running on one CPU this is a",
    "start": "671160",
    "end": "677640"
  },
  {
    "text": "reasonable thing to assume for testing and we're going to need to interrupt",
    "start": "677640",
    "end": "684360"
  },
  {
    "text": "anything related to scheduling and multiple contexts so in this case this is basically anything related to threads",
    "start": "684360",
    "end": "690600"
  },
  {
    "text": "or sync Primitives like mutexes reader writer locks condition variables",
    "start": "690600",
    "end": "697980"
  },
  {
    "text": "um and then we just create our own scheduler that kind of owns all this context so it will own the threads that",
    "start": "697980",
    "end": "703500"
  },
  {
    "text": "exist which ones are runnable the mutexes and synchromatives will interact with the scheduler and let it know my",
    "start": "703500",
    "end": "710040"
  },
  {
    "text": "thread's blocked waiting for this other thread to finish and so if we have these components",
    "start": "710040",
    "end": "715200"
  },
  {
    "text": "um we can at least encapsulate all the uh",
    "start": "715200",
    "end": "721200"
  },
  {
    "text": "things related to multi-threading and then we can just make this deterministic just for testing so far nothing new here uh",
    "start": "721200",
    "end": "729360"
  },
  {
    "text": "but uh so uh I guess the project I began working on uh called concurrence but",
    "start": "729360",
    "end": "736260"
  },
  {
    "text": "still kind of TBD how to name this I don't know but uh it's sticking uh so",
    "start": "736260",
    "end": "741839"
  },
  {
    "text": "essentially what I did is I created these few components to help me with this problem uh the first is an Executor",
    "start": "741839",
    "end": "747660"
  },
  {
    "text": "which essentially provides the sub primitive of creating deleting and switching between threads",
    "start": "747660",
    "end": "754680"
  },
  {
    "text": "or contexts and then a scheduler that will look at these",
    "start": "754680",
    "end": "759899"
  },
  {
    "text": "you know contexts that are runnable and say uh you know you spawn a bunch of threads in",
    "start": "759899",
    "end": "765839"
  },
  {
    "text": "the background and then you own the scheduler object and you just say run a bunch of work for me until no threads",
    "start": "765839",
    "end": "771300"
  },
  {
    "text": "are runnable and then this way we can spawn a bunch of threads in the background for a",
    "start": "771300",
    "end": "776339"
  },
  {
    "text": "fuzzing job and then just run until they complete then do some more operations get some more work cubed and kind of",
    "start": "776339",
    "end": "783300"
  },
  {
    "text": "keep looping so it's not highlighted well in the slide but the the second line under the",
    "start": "783300",
    "end": "789779"
  },
  {
    "text": "scheduler bullet um randomizing the order of runnable tasks using fuzzer data this is really",
    "start": "789779",
    "end": "795180"
  },
  {
    "text": "one of the big insights here so it's not just that we are uh or I guess back in my Chrome days uh",
    "start": "795180",
    "end": "804240"
  },
  {
    "text": "when I was doing cooperative fuzzing one of the things I would do is whenever the scheduler has a choice to",
    "start": "804240",
    "end": "810720"
  },
  {
    "text": "pick a some runnable task to run um I realized oh why don't we just kind",
    "start": "810720",
    "end": "817200"
  },
  {
    "text": "of if we're allowed by the model of that executor why don't we just try randomly",
    "start": "817200",
    "end": "823560"
  },
  {
    "text": "switching between them as opposed to just doing them in order and so I included that idea here so the",
    "start": "823560",
    "end": "830700"
  },
  {
    "text": "scheduler not only just keeps track of what's runnable and switches between them but rather than doing them purely in order",
    "start": "830700",
    "end": "837180"
  },
  {
    "text": "um whenever we have a choice we'll just pick a random task to make it runnable and or not make runnable but to switch",
    "start": "837180",
    "end": "843060"
  },
  {
    "text": "to it um and again this is kind of little details we don't really need to go into",
    "start": "843060",
    "end": "848459"
  },
  {
    "text": "annotations semantics and all this but essentially uh we need to support yield and block as fundamental ways to tell",
    "start": "848459",
    "end": "855180"
  },
  {
    "text": "the scheduler which threads are runnable and so",
    "start": "855180",
    "end": "860579"
  },
  {
    "text": "this still hasn't really addressed this problem of preemption and initially I really had no hopes of dealing with this",
    "start": "860579",
    "end": "866579"
  },
  {
    "text": "problem I thought well if I can at least make some kind of deterministic scheduler then my fuzzing will be",
    "start": "866579",
    "end": "871920"
  },
  {
    "text": "reproducible maybe I can mess around with the schedule here and there and find some stuff",
    "start": "871920",
    "end": "877320"
  },
  {
    "text": "um but then I realized that uh preemption really is yields and so I",
    "start": "877320",
    "end": "884820"
  },
  {
    "text": "didn't initially realize this in the way that I showed it in the beginning but if we already have to support blocking and",
    "start": "884820",
    "end": "891000"
  },
  {
    "text": "yielding um a motivated researcher might be able to insert their own yields to a couple",
    "start": "891000",
    "end": "897120"
  },
  {
    "text": "places so even though preemption's off and everything is",
    "start": "897120",
    "end": "902699"
  },
  {
    "text": "running into a box or running one at a time if we yield in a couple interesting",
    "start": "902699",
    "end": "908820"
  },
  {
    "text": "places maybe we can let the pleasure switch contacts around those areas and see if there's any race condition bugs",
    "start": "908820",
    "end": "915420"
  },
  {
    "text": "so that is a I guess that's posed the question of like is this an idea that even makes",
    "start": "915420",
    "end": "922320"
  },
  {
    "text": "sense can you turn off all random preemption and pick a couple places to do it and actually find a useful bug",
    "start": "922320",
    "end": "929760"
  },
  {
    "text": "and so I looked at a bug that I really was hoping I could find I didn't try to find",
    "start": "929760",
    "end": "936240"
  },
  {
    "text": "this bug but I was thinking about this problem back in 2020 and I saw this bug",
    "start": "936240",
    "end": "941399"
  },
  {
    "text": "report come into the Android bug Bounty I believe and this was a user mode to",
    "start": "941399",
    "end": "947820"
  },
  {
    "text": "Kernel um I guess rce privilege escalation vulnerability that I think was exploited",
    "start": "947820",
    "end": "954720"
  },
  {
    "text": "and this relied on a race condition so I",
    "start": "954720",
    "end": "960300"
  },
  {
    "text": "looked at the description of the patch this is straight from the Linux change log and I don't know about you but when I",
    "start": "960300",
    "end": "966839"
  },
  {
    "text": "looked at this I thought oh yeah no definitely this is uh this is too complex like how can a fuzzer replicate",
    "start": "966839",
    "end": "974279"
  },
  {
    "text": "this you know uh but then I saw the diff and I realized",
    "start": "974279",
    "end": "979620"
  },
  {
    "text": "this actually looks pretty simple uh I I guess what I was thinking is if I",
    "start": "979620",
    "end": "985380"
  },
  {
    "text": "didn't know about a bug already being here in in binder uh",
    "start": "985380",
    "end": "990660"
  },
  {
    "text": "what annotation what yield statement might have I've been able to add and so if you look at this diff uh all",
    "start": "990660",
    "end": "996839"
  },
  {
    "text": "that's happened is you had this function at the top where they took a lock dequeued some work and then unlocked and",
    "start": "996839",
    "end": "1002839"
  },
  {
    "text": "returned the work and in the patch they kind of show that the problem is this W type field that",
    "start": "1002839",
    "end": "1010699"
  },
  {
    "text": "was a part of the work became invalid like that it seems like w",
    "start": "1010699",
    "end": "1015740"
  },
  {
    "text": "the W variable became freed after the lock was released and so",
    "start": "1015740",
    "end": "1021320"
  },
  {
    "text": "it seems like oh you only really need to um preempt in one place to find this bug",
    "start": "1021320",
    "end": "1027380"
  },
  {
    "text": "or search around one preemption point and that's right after the unlock of proc uh in the first function",
    "start": "1027380",
    "end": "1036558"
  },
  {
    "text": "so then I looked back at this description and realized that despite",
    "start": "1036559",
    "end": "1042438"
  },
  {
    "text": "all the complexity where they're explaining how this bug came about all that the fuzzer would need to do to",
    "start": "1042439",
    "end": "1048980"
  },
  {
    "text": "find this issue is to preempt at those two places that I had hypothesized where this interlock you",
    "start": "1048980",
    "end": "1057740"
  },
  {
    "text": "can see the first bold statement when we release it on the next line we acquire in thread two so we were doing",
    "start": "1057740",
    "end": "1064400"
  },
  {
    "text": "something and then in thread one we dequeued that work and then we switched to thread two",
    "start": "1064400",
    "end": "1070220"
  },
  {
    "text": "thread to Freed the node that we're looking at and then release the lock and then",
    "start": "1070220",
    "end": "1075919"
  },
  {
    "text": "third one didn't need to require it but it just continued running and so",
    "start": "1075919",
    "end": "1081679"
  },
  {
    "text": "I realized that the the critical path is immediately after these two release releases of the inner proc lock",
    "start": "1081679",
    "end": "1089960"
  },
  {
    "text": "so you know this is where I had a real insight that like you know this is a bug that",
    "start": "1089960",
    "end": "1095780"
  },
  {
    "text": "is critical you know we have no tools to find things like this but it only takes",
    "start": "1095780",
    "end": "1101179"
  },
  {
    "text": "one preemption and it's a preemption in a place that seems obvious you know you have a whole subsystem that's really",
    "start": "1101179",
    "end": "1106280"
  },
  {
    "text": "important that uses a lock in like two places I don't think it's unreasonable",
    "start": "1106280",
    "end": "1111559"
  },
  {
    "text": "to Guess that a security researcher could say well given a fuzzer that can handle this situation I'm going to guess",
    "start": "1111559",
    "end": "1118580"
  },
  {
    "text": "let's preempt before and after every lock let's preempt maybe in a few places and then it really is uh quite a small",
    "start": "1118580",
    "end": "1125780"
  },
  {
    "text": "search space to cover and so this is the Insight we really need fewer",
    "start": "1125780",
    "end": "1131240"
  },
  {
    "text": "preemptions than we think and it took me a long time to understand what was going on here because so much",
    "start": "1131240",
    "end": "1138140"
  },
  {
    "text": "of it was just like intuition and experimentation but when I talk to people who know more about uh",
    "start": "1138140",
    "end": "1143240"
  },
  {
    "text": "concurrency um I got this really great line from the author of a leak sanitizer or he said",
    "start": "1143240",
    "end": "1151340"
  },
  {
    "text": "something like Race Free programs have no observable Behavior differences when preemption occurs between sync points",
    "start": "1151340",
    "end": "1157820"
  },
  {
    "text": "it's like what is that it just means that uh if the programmer got it right",
    "start": "1157820",
    "end": "1164059"
  },
  {
    "text": "um if you only have preemptions around locking that's enough to kind of see everything that can go wrong and so",
    "start": "1164059",
    "end": "1170480"
  },
  {
    "text": "you know don't worry too much about understanding this but essentially there is some kind of core intuition about",
    "start": "1170480",
    "end": "1176240"
  },
  {
    "text": "like where locks are placed are around the areas where bugs are going to manifest or it's very likely so I",
    "start": "1176240",
    "end": "1182660"
  },
  {
    "text": "thought okay that's that's probably good and then if a researcher is skeptical of that",
    "start": "1182660",
    "end": "1188960"
  },
  {
    "text": "well they can sprinkle a few yields themselves elsewhere and uh no problem",
    "start": "1188960",
    "end": "1194419"
  },
  {
    "text": "so this is where I began to actually implement this by extending my existing",
    "start": "1194419",
    "end": "1200000"
  },
  {
    "text": "iOS kernel fuzzer with this new project so the initial sacrificer project which",
    "start": "1200000",
    "end": "1207620"
  },
  {
    "text": "is how I call this iOS kernel pleasure looks like this basically I use lib",
    "start": "1207620",
    "end": "1214220"
  },
  {
    "text": "fuzzer as the fuzzing engine you could really use anything but what lib puzzer does is it collects",
    "start": "1214220",
    "end": "1219980"
  },
  {
    "text": "coverage and mutates test cases for you similar to AFL and the type of input that it generates",
    "start": "1219980",
    "end": "1227419"
  },
  {
    "text": "our protobuf messages that describe sequences of syscalls and you know other related things to one one test case",
    "start": "1227419",
    "end": "1234980"
  },
  {
    "text": "and then it feeds these inputs to this fuzz Target function and then we call into the kernel uh in",
    "start": "1234980",
    "end": "1243860"
  },
  {
    "text": "red with these syscalls in order and then this project is actually a completely",
    "start": "1243860",
    "end": "1249919"
  },
  {
    "text": "user-based buzzer so um if you've used something if you're not",
    "start": "1249919",
    "end": "1255679"
  },
  {
    "text": "familiar with something like gvisor or a similar uh like user space based like",
    "start": "1255679",
    "end": "1262160"
  },
  {
    "text": "containerization of of a kernel that's essentially what we're doing here so rather than using a full hypervisor we",
    "start": "1262160",
    "end": "1270440"
  },
  {
    "text": "just kind of uh run everything in user space and then when so in gvisor what",
    "start": "1270440",
    "end": "1276440"
  },
  {
    "text": "happens is when your program tries to make a syscall it goes into some go code that handles the syscall for you and you",
    "start": "1276440",
    "end": "1282440"
  },
  {
    "text": "don't have to actually go to the kernel so this is pretty similar but for a hypervisor so in the iOS kernel tries to",
    "start": "1282440",
    "end": "1288740"
  },
  {
    "text": "access Hardware it just gets redirected to this hyper call interface that's handled all in user space so the result",
    "start": "1288740",
    "end": "1294740"
  },
  {
    "text": "of this is I just have this whole user space buzzer I wish I could talk more about it I'm guessing like not everyone here knows about this but unfortunately",
    "start": "1294740",
    "end": "1302179"
  },
  {
    "text": "I just don't have time to go into details so this is the existing project and so to add deterministic threading support to",
    "start": "1302179",
    "end": "1309860"
  },
  {
    "text": "allow me to do blocking syscalls I added this concurrent code base so what this",
    "start": "1309860",
    "end": "1316159"
  },
  {
    "text": "does is I have this extra scheduler and executor and so if I want to or if the kernel",
    "start": "1316159",
    "end": "1322580"
  },
  {
    "text": "wants to create threads internally those are actually captured and sent to",
    "start": "1322580",
    "end": "1328039"
  },
  {
    "text": "this hyper call interface this is handled through the scheduler",
    "start": "1328039",
    "end": "1334299"
  },
  {
    "text": "component that I talked about and then ultimately these kernel threads",
    "start": "1334299",
    "end": "1339500"
  },
  {
    "text": "are just handled in user Space by my my new project this this deterministic",
    "start": "1339500",
    "end": "1344780"
  },
  {
    "text": "scheduling uh but the important bit is that the scheduler also has access to",
    "start": "1344780",
    "end": "1350299"
  },
  {
    "text": "the fuzzer data so on the right side you'll see that Arrow go up get random numbers so what that's uh",
    "start": "1350299",
    "end": "1356720"
  },
  {
    "text": "demonstrating is that whenever the scheduler has an option between switching between a number of",
    "start": "1356720",
    "end": "1362240"
  },
  {
    "text": "runnable threads it will fetch a number right now I mean maybe in the future",
    "start": "1362240",
    "end": "1367340"
  },
  {
    "text": "will be smarter but now it just fetches like the nth give me the uh I I it'll say like I have 10 runnable threads give",
    "start": "1367340",
    "end": "1374240"
  },
  {
    "text": "me a number between 1 and 10. and it will draw that number from the test case so the fuzzer can mutate that",
    "start": "1374240",
    "end": "1380419"
  },
  {
    "text": "and then thus mutate the schedule so now we're fuzzing along kind of two",
    "start": "1380419",
    "end": "1385880"
  },
  {
    "text": "axes you have the syscalls themselves and the data related to those sys calls and just the",
    "start": "1385880",
    "end": "1393140"
  },
  {
    "text": "normal operation of a single thread in the kernel but now you have this additional axis where the",
    "start": "1393140",
    "end": "1399380"
  },
  {
    "text": "fuzzer can mutate the schedule of a given test case and so",
    "start": "1399380",
    "end": "1405620"
  },
  {
    "text": "just so you have a little more concrete idea of what this looks like this is the data model for the fuzzer this is just a",
    "start": "1405620",
    "end": "1411679"
  },
  {
    "text": "Proto buff message so in the current instantiation or",
    "start": "1411679",
    "end": "1416960"
  },
  {
    "text": "whatever the current version of the fuzzer I have three threads that each",
    "start": "1416960",
    "end": "1422179"
  },
  {
    "text": "execute different sys calls and then there's simply this bytes field that provides the scheduler data so in each",
    "start": "1422179",
    "end": "1428600"
  },
  {
    "text": "of these three threads um they are they get a pointer to these protobuf for",
    "start": "1428600",
    "end": "1434000"
  },
  {
    "text": "the different commands that they handle from these different threads we start running and then the scheduler",
    "start": "1434000",
    "end": "1440240"
  },
  {
    "text": "just says okay thread one two and three start out as runnable let's just run them they'll do some execute some sys",
    "start": "1440240",
    "end": "1445940"
  },
  {
    "text": "calls at some point they uh my block yields or maybe terminate and So eventually if we let the",
    "start": "1445940",
    "end": "1453020"
  },
  {
    "text": "scheduler run until it's empty uh we'll have run everything and the interesting bit is that you know if any of these",
    "start": "1453020",
    "end": "1459679"
  },
  {
    "text": "things cause some background thread to be created or to run all that will all",
    "start": "1459679",
    "end": "1465080"
  },
  {
    "text": "be interleaved and fuzzed along with the three sets of syscall threads and then",
    "start": "1465080",
    "end": "1471440"
  },
  {
    "text": "Y3 originally it was two but I had two threads in one process and",
    "start": "1471440",
    "end": "1477740"
  },
  {
    "text": "then I decided to add an additional process with another thread to catch like cross process race conditions",
    "start": "1477740",
    "end": "1484580"
  },
  {
    "text": "um and you know this all sounds smart but uh this is what it looks like it's really just you know I have my little",
    "start": "1484580",
    "end": "1490580"
  },
  {
    "text": "scheduler thing it's kind of a pretty simple project and then to intercept the",
    "start": "1490580",
    "end": "1497419"
  },
  {
    "text": "mutexes in xmu in the iOS kernel uh we just have something that looks like this",
    "start": "1497419",
    "end": "1502820"
  },
  {
    "text": "so I just forward these calls to my virtual mutex which is the one that",
    "start": "1502820",
    "end": "1508400"
  },
  {
    "text": "works with my scheduler and handles the yield and block calls but then I also",
    "start": "1508400",
    "end": "1514400"
  },
  {
    "text": "have these additional yields before and after like taking a lock and after releasing it to kind of catch these type",
    "start": "1514400",
    "end": "1521960"
  },
  {
    "text": "of issues that I was referring to earlier around locking um so we can kind of skip over this but",
    "start": "1521960",
    "end": "1528080"
  },
  {
    "text": "essentially yeah for each test case I fork a process and then create threads in there run and then kill the process",
    "start": "1528080",
    "end": "1534320"
  },
  {
    "text": "and so um if things go completely awry it's all contained to a single process",
    "start": "1534320",
    "end": "1541159"
  },
  {
    "text": "um so when I started running this I quickly ran into uh I use after freebug",
    "start": "1541159",
    "end": "1546559"
  },
  {
    "text": "and it's interesting because it's in IPC which is an area that's pretty interesting lately",
    "start": "1546559",
    "end": "1553460"
  },
  {
    "text": "and so I looked at this is the test case that the fuzzer produced and I I had no",
    "start": "1553460",
    "end": "1560059"
  },
  {
    "text": "influence over this it's completely straight out of the buzzer so I don't know if he's zoomed in or something yeah",
    "start": "1560059",
    "end": "1566900"
  },
  {
    "text": "so here's I have a better format of it but as you can see it's fairly structured but again all I did was say",
    "start": "1566900",
    "end": "1573919"
  },
  {
    "text": "um hear the syscalls here's what the structure of the data looks like for",
    "start": "1573919",
    "end": "1579020"
  },
  {
    "text": "mock messages those contain this header with these enums in it it has these fields that",
    "start": "1579020",
    "end": "1586039"
  },
  {
    "text": "represent ports and so I just kind of made a little description and uh this was enough to run into this use",
    "start": "1586039",
    "end": "1593000"
  },
  {
    "text": "after free so if we look at um an easier to read representation what",
    "start": "1593000",
    "end": "1598279"
  },
  {
    "text": "happened was we had a in the first thread thread zero we created two reply ports which are kind",
    "start": "1598279",
    "end": "1604880"
  },
  {
    "text": "of like file descriptors then mock message override and mock",
    "start": "1604880",
    "end": "1610520"
  },
  {
    "text": "message are the same thing they just both send a message and so this first message",
    "start": "1610520",
    "end": "1616840"
  },
  {
    "text": "it sends to the remote Port one a message from Port 2. and also receives",
    "start": "1616840",
    "end": "1623900"
  },
  {
    "text": "so if you see under options it says send and receive and we are making a send rate uh for the",
    "start": "1623900",
    "end": "1630860"
  },
  {
    "text": "port so if you don't know about mock which I don't think I even knew when I found this test case uh all this means",
    "start": "1630860",
    "end": "1637760"
  },
  {
    "text": "is like uh when we have these reply ports we're allowed to receive messages on them but we're not allowed to send messages from",
    "start": "1637760",
    "end": "1643880"
  },
  {
    "text": "them because um there are special reports that someone can reply to us with",
    "start": "1643880",
    "end": "1649659"
  },
  {
    "text": "so what this is doing is this is actually in a roundabout way the fuzzer realized oh if I create reply ports and",
    "start": "1649659",
    "end": "1656179"
  },
  {
    "text": "I send this message to myself I can give myself this additional right so a human would never do this they would just call",
    "start": "1656179",
    "end": "1661640"
  },
  {
    "text": "like create a mock port and it comes with both rights but just to show that this was random the fuzzer",
    "start": "1661640",
    "end": "1667760"
  },
  {
    "text": "just stumbled into this pattern and it was enough to find a bug so the real bug comes in these next two messages",
    "start": "1667760",
    "end": "1673700"
  },
  {
    "text": "so in the first thread we are sending a message to Port 2 from",
    "start": "1673700",
    "end": "1678919"
  },
  {
    "text": "Port 2. and we're copying and moving our right to send messages on this port and the",
    "start": "1678919",
    "end": "1685640"
  },
  {
    "text": "message it's bizarre and then from the other thread we",
    "start": "1685640",
    "end": "1691820"
  },
  {
    "text": "send now that we have a right to send from Port one we send a message from Port one to Port two right I don't know",
    "start": "1691820",
    "end": "1697820"
  },
  {
    "text": "if this even makes sense but because we sent it here but in any case we create a",
    "start": "1697820",
    "end": "1706539"
  },
  {
    "text": "let's see so we do a move receive so in this message we're sending to part two from Port one and we're moving our right",
    "start": "1706760",
    "end": "1712940"
  },
  {
    "text": "to receive messages on Port two um I think I don't know it's confusing but",
    "start": "1712940",
    "end": "1719059"
  },
  {
    "text": "that's that's the point right so it found a way to erase these uh two last mock messages",
    "start": "1719059",
    "end": "1724520"
  },
  {
    "text": "and so I added a special print function to my project that indents based on",
    "start": "1724520",
    "end": "1730940"
  },
  {
    "text": "which thread you're in so I just put some prints around all over where the bug was happening and as you can see this actually turns",
    "start": "1730940",
    "end": "1737900"
  },
  {
    "text": "into an interleaving table like you would see a human ridden one and so we",
    "start": "1737900",
    "end": "1743059"
  },
  {
    "text": "can see that mock message was called from thread zero and thread one and",
    "start": "1743059",
    "end": "1749240"
  },
  {
    "text": "over here somehow we end up copying in two rights so I think that's where we",
    "start": "1749240",
    "end": "1754400"
  },
  {
    "text": "send a message to a port from the same port and then over here where we did this",
    "start": "1754400",
    "end": "1761539"
  },
  {
    "text": "move receive operation it drops two references so references go three two two one",
    "start": "1761539",
    "end": "1767120"
  },
  {
    "text": "and over here we end up dropping a reference and freeing and then we end up freeing again",
    "start": "1767120",
    "end": "1773480"
  },
  {
    "text": "so well this this is a real race condition bug it's interesting what was really",
    "start": "1773480",
    "end": "1779419"
  },
  {
    "text": "interesting is that it reminded me of a bug that my teammate Ian had found about a month earlier and so when I looked at",
    "start": "1779419",
    "end": "1787159"
  },
  {
    "text": "his report he uh explained pretty clearly what the actual",
    "start": "1787159",
    "end": "1793220"
  },
  {
    "text": "issue was and he's he says that you know basically when you send a message to a port from a port uh",
    "start": "1793220",
    "end": "1801679"
  },
  {
    "text": "xnu thinks well both of these are the same port so we can",
    "start": "1801679",
    "end": "1807039"
  },
  {
    "text": "do some operation the first time and then if it fails we return if it succeeds we continue and it thinks well",
    "start": "1807039",
    "end": "1814279"
  },
  {
    "text": "we already just succeeded on the same port there's no way that it won't just succeed again so they ignore the return",
    "start": "1814279",
    "end": "1819500"
  },
  {
    "text": "value here and it turns out that from another thread you actually can do this weird move receive thing I think to",
    "start": "1819500",
    "end": "1827779"
  },
  {
    "text": "break this assumption and so you can race between these two calls and",
    "start": "1827779",
    "end": "1834140"
  },
  {
    "text": "um this makes this fail but then they don't realize it and then things just kind of go haywire and so uh this is",
    "start": "1834140",
    "end": "1840740"
  },
  {
    "text": "Ian's handwritten message um that he sent to Apple and this is the",
    "start": "1840740",
    "end": "1845899"
  },
  {
    "text": "way that they fixed it based on this report and um as you can see it's pretty similar I",
    "start": "1845899",
    "end": "1851960"
  },
  {
    "text": "think he's got sending a message to itself or from from a port to the same port and then we also have this received",
    "start": "1851960",
    "end": "1859820"
  },
  {
    "text": "right destruction with a move receive and he has a different way of doing it uh but it actually is the same bug and",
    "start": "1859820",
    "end": "1867080"
  },
  {
    "text": "uh it's interesting because I I heard someone say that",
    "start": "1867080",
    "end": "1872240"
  },
  {
    "text": "this bug was an example of a bug that you couldn't find with fuzzing and I would have agreed with that if",
    "start": "1872240",
    "end": "1878299"
  },
  {
    "text": "um it hadn't just happened like that day that I heard someone say it so so uh not naming names but uh the interesting bit",
    "start": "1878299",
    "end": "1886279"
  },
  {
    "text": "I guess is uh if you keep running it then on the new xnu code uh it doesn't",
    "start": "1886279",
    "end": "1893120"
  },
  {
    "text": "stop working and so now over on the out of the mark message IPC world let's",
    "start": "1893120",
    "end": "1898760"
  },
  {
    "text": "go to BSD networking same setup no special you know awareness",
    "start": "1898760",
    "end": "1904720"
  },
  {
    "text": "just this trick with yielding near unlocks we end up seeing this uh other simple",
    "start": "1904720",
    "end": "1912440"
  },
  {
    "text": "bug so in thread one we call Saka and set sock opt and thread two we call",
    "start": "1912440",
    "end": "1917899"
  },
  {
    "text": "disconnect X and what's interesting is uh this actually is the same as the sock puppet",
    "start": "1917899",
    "end": "1923720"
  },
  {
    "text": "bug I had reported a few years back same three sys calls it just happens that before this was there was a",
    "start": "1923720",
    "end": "1930679"
  },
  {
    "text": "deterministic bug where if you um set some option and disconnect there's some use after free condition",
    "start": "1930679",
    "end": "1937220"
  },
  {
    "text": "now there's a race between setting a different option called the flow divert token and disconnecting from another",
    "start": "1937220",
    "end": "1943940"
  },
  {
    "text": "thread and so um here I transcribed it to C plus plus",
    "start": "1943940",
    "end": "1949760"
  },
  {
    "text": "you know it's a little hard to read but essentially I created a socket and then",
    "start": "1949760",
    "end": "1956059"
  },
  {
    "text": "spawn a new thread where I just disconnect on that socket and then from the first thread",
    "start": "1956059",
    "end": "1961940"
  },
  {
    "text": "send this packet and then it's you know there's a news after free",
    "start": "1961940",
    "end": "1967760"
  },
  {
    "text": "condition and the interesting thing is that um I had no knowledge of this packet format I didn't know what",
    "start": "1967760",
    "end": "1973460"
  },
  {
    "text": "floativert was all I did was just call set sock opt with random data and coverage guide fuzzing as powerful as it",
    "start": "1973460",
    "end": "1979159"
  },
  {
    "text": "is found that uh you could uh create this structure with this contents",
    "start": "1979159",
    "end": "1985880"
  },
  {
    "text": "and it would get to this code path and then it realized that disconnecting is",
    "start": "1985880",
    "end": "1991580"
  },
  {
    "text": "interesting and then it realized um just maybe by chance that oh this",
    "start": "1991580",
    "end": "1997519"
  },
  {
    "text": "specific ordering uh uses it for free just starts to pop up everywhere and so",
    "start": "1997519",
    "end": "2003779"
  },
  {
    "text": "this is the panic I got and as you can see this is a kernel built in February",
    "start": "2003779",
    "end": "2009700"
  },
  {
    "text": "of 2022 so just a few months ago this is a real app sandbox to Kernel use after",
    "start": "2009700",
    "end": "2017260"
  },
  {
    "text": "free and uh it was found totally deterministically",
    "start": "2017260",
    "end": "2022419"
  },
  {
    "text": "you know I could run this test case 5000 times it would crash in the same way every time it was straightforward to",
    "start": "2022419",
    "end": "2027519"
  },
  {
    "text": "transcribe to uh by hand and so that's actually this bug",
    "start": "2027519",
    "end": "2033279"
  },
  {
    "text": "on the top from my initial list is um you know we started out with you know",
    "start": "2033279",
    "end": "2038980"
  },
  {
    "text": "thinking at least for me thinking this was impossible by the middle of it I'm colliding with people and then by the end I'm starting to find new things that",
    "start": "2038980",
    "end": "2046000"
  },
  {
    "text": "are until now undiscovered and it's possible that other people were",
    "start": "2046000",
    "end": "2052240"
  },
  {
    "text": "aware of this bug but at least as far as public source code and at least the latest iOS version at the time it was",
    "start": "2052240",
    "end": "2058000"
  },
  {
    "text": "there um so then my question was",
    "start": "2058000",
    "end": "2063540"
  },
  {
    "text": "what exactly did I even do what like I just started from what made sense to me",
    "start": "2063540",
    "end": "2069460"
  },
  {
    "text": "and just proceeded forward and forward like how is it that no one has done this what what is is there anything interesting",
    "start": "2069460",
    "end": "2075820"
  },
  {
    "text": "here am I what what am I observing so I talked to a lot of people I did a lot of",
    "start": "2075820",
    "end": "2081099"
  },
  {
    "text": "research to try to understand how this fits into existing work and it turns out that it's a real small",
    "start": "2081099",
    "end": "2087158"
  },
  {
    "text": "tweak on deterministic record and replay which is a type of research that people you know",
    "start": "2087159",
    "end": "2094658"
  },
  {
    "text": "write papers on it's like a very broad space and",
    "start": "2094659",
    "end": "2099820"
  },
  {
    "text": "uh yeah it turns out I just have a little twist on it that's related to security and fuzzing so I think a couple",
    "start": "2099820",
    "end": "2104980"
  },
  {
    "text": "really good examples that are representative are the RR project which is a reversible debugger from Mozilla",
    "start": "2104980",
    "end": "2113800"
  },
  {
    "text": "and you know a lot of companies have a reversible debugger so if you think about what reversible debugging is it",
    "start": "2113800",
    "end": "2119020"
  },
  {
    "text": "means you run a test case and you capture all non-determinism to some file",
    "start": "2119020",
    "end": "2124119"
  },
  {
    "text": "then when you rerun the test case you need to be able to replay everything that you observed and so",
    "start": "2124119",
    "end": "2131140"
  },
  {
    "text": "um Sorry by being able to replay it this is how you can reverse so you're not really",
    "start": "2131140",
    "end": "2136660"
  },
  {
    "text": "reversing you're kind of going back to where you were earlier and so if you think about it if we run a",
    "start": "2136660",
    "end": "2144579"
  },
  {
    "text": "program to try to capture a race condition and then we output some file well who said that we have to",
    "start": "2144579",
    "end": "2151300"
  },
  {
    "text": "specifically run and get that file to happen to be created for us why not just",
    "start": "2151300",
    "end": "2156540"
  },
  {
    "text": "randomize this file and why not just create this file ourselves that's really the the thing that I've done here so the",
    "start": "2156540",
    "end": "2164800"
  },
  {
    "text": "other thing that's interesting is Microsoft chess this is another project that I think",
    "start": "2164800",
    "end": "2170260"
  },
  {
    "text": "maybe even a decade old by this point um and there they do actually the same",
    "start": "2170260",
    "end": "2177040"
  },
  {
    "text": "thing I I really couldn't believe how similar it was you have one thread you replace the scheduler so you control it",
    "start": "2177040",
    "end": "2182920"
  },
  {
    "text": "you turn off preemption and you um have a few sync points which are",
    "start": "2182920",
    "end": "2188280"
  },
  {
    "text": "yields next to mutexes but the difference here is that they try to",
    "start": "2188280",
    "end": "2193500"
  },
  {
    "text": "systematically enumerate all interleavings of a given thing so in that first example uh",
    "start": "2193500",
    "end": "2200859"
  },
  {
    "text": "where I showed the binder thing they might say let's add a yield after this",
    "start": "2200859",
    "end": "2206079"
  },
  {
    "text": "unlock and then we'll test every possible interleaving um of all the threads and all of these",
    "start": "2206079",
    "end": "2212800"
  },
  {
    "text": "points and see if there's a bug and so that actually would have worked probably",
    "start": "2212800",
    "end": "2218079"
  },
  {
    "text": "does work on a program like this but the problem is when you want to scale this to an entire kernel uh you have BSD mock",
    "start": "2218079",
    "end": "2226300"
  },
  {
    "text": "you know you have millions of lines of code it's really kind of intractable to guess where to run things and I guess",
    "start": "2226300",
    "end": "2234820"
  },
  {
    "text": "that's not the right way to say it like I'm also guessing where to preempt but rather than systematically testing every",
    "start": "2234820",
    "end": "2241780"
  },
  {
    "text": "possible exponential number of interleavings in one specific place I'm just saying just here's a way to",
    "start": "2241780",
    "end": "2250240"
  },
  {
    "text": "explore everything and the fuzzer can go ahead and try to",
    "start": "2250240",
    "end": "2255460"
  },
  {
    "text": "just do it for me and so you know in in summary I guess the the",
    "start": "2255460",
    "end": "2260740"
  },
  {
    "text": "two contributions I think that are really novel here are that we now have this uh we now let a fuzzer control",
    "start": "2260740",
    "end": "2268260"
  },
  {
    "text": "interleavings and we also it's this this part isn't bit really new",
    "start": "2268260",
    "end": "2274000"
  },
  {
    "text": "but we scoped down annotations and uh sorry we scoped down where we do the",
    "start": "2274000",
    "end": "2279160"
  },
  {
    "text": "yields so annotations are like yielding and blocking and stuff so that only happens in a few places where we think",
    "start": "2279160",
    "end": "2284920"
  },
  {
    "text": "bugs are likely to happen and again my model is sort of like Ida",
    "start": "2284920",
    "end": "2290740"
  },
  {
    "text": "Pro it's if the researcher is competent just allow them",
    "start": "2290740",
    "end": "2295839"
  },
  {
    "text": "to express what they want to express so as long as we can give a security researcher this",
    "start": "2295839",
    "end": "2302440"
  },
  {
    "text": "tool and they have good hypotheses good intuition about race condition bugs they",
    "start": "2302440",
    "end": "2308260"
  },
  {
    "text": "should be able to use it to explore on their behalf to do experiments and so future work in this area",
    "start": "2308260",
    "end": "2316740"
  },
  {
    "text": "are thus far I have not done anything to inform the fuzzer about",
    "start": "2316740",
    "end": "2321760"
  },
  {
    "text": "these different threads so it doesn't understand like maybe in that binder case like oh it's",
    "start": "2321760",
    "end": "2328780"
  },
  {
    "text": "kind of interesting that these two threads are near each other using the same data and we should interleave",
    "start": "2328780",
    "end": "2333820"
  },
  {
    "text": "around here there's no I I honestly couldn't believe that this worked at all but it somehow I think what's happening",
    "start": "2333820",
    "end": "2340599"
  },
  {
    "text": "is uh coverage guided fuzzing just works so well that random schedules are enough",
    "start": "2340599",
    "end": "2346900"
  },
  {
    "text": "to uh find bugs and importantly um",
    "start": "2346900",
    "end": "2352480"
  },
  {
    "text": "you know if you're randomly building a test case and growing it using coverage guided fuzzing it's actually pretty",
    "start": "2352480",
    "end": "2358660"
  },
  {
    "text": "likely you'll end up with two threads doing work related to each other so the fuzzer might notice like oh if I'm doing",
    "start": "2358660",
    "end": "2364660"
  },
  {
    "text": "stuff in this thread but in the other thread I mutate and that affects This Thread it maybe it deletes something",
    "start": "2364660",
    "end": "2370780"
  },
  {
    "text": "that I was trying to use that's sort of interesting so the fuzzer's kind of building this thing and along the way it",
    "start": "2370780",
    "end": "2376599"
  },
  {
    "text": "gets close to a state where a random schedule might just trigger a specific interleaving that's that's buggy",
    "start": "2376599",
    "end": "2383020"
  },
  {
    "text": "um and then obviously improving performance productionizing this but essentially I think I I have the",
    "start": "2383020",
    "end": "2390760"
  },
  {
    "text": "um you know I had the idea I did an implementation was able to replicate",
    "start": "2390760",
    "end": "2395920"
  },
  {
    "text": "existing work and find new bugs and so um essentially ready to say that I think",
    "start": "2395920",
    "end": "2401920"
  },
  {
    "text": "this project succeeded as a resource project and it's just a question of uh shipping it so in I guess uh",
    "start": "2401920",
    "end": "2410619"
  },
  {
    "text": "the way that these things normally go it is not ready to be shipped so uh the there will be a first draft available on",
    "start": "2410619",
    "end": "2416800"
  },
  {
    "text": "the project serial GitHub um the stock price project is already open source and we'll be adding this",
    "start": "2416800",
    "end": "2422640"
  },
  {
    "text": "multi-threaded fuzzing component to it shortly probably the next week or so once we merge a few",
    "start": "2422640",
    "end": "2429339"
  },
  {
    "text": "final improvements and I think I'm out of time so let's",
    "start": "2429339",
    "end": "2434800"
  },
  {
    "text": "just leave it at that but yeah basically coverage guide fuzzing is amazing we need to work more on concurrency and",
    "start": "2434800",
    "end": "2439960"
  },
  {
    "text": "not just for security we need much better concurrency tooling and it's not that hard I think so this",
    "start": "2439960",
    "end": "2446440"
  },
  {
    "text": "is kind of my takeaways So yeah thank you everyone I think we're out of time so probably have to do",
    "start": "2446440",
    "end": "2451660"
  },
  {
    "text": "questions outside but uh I appreciate you coming",
    "start": "2451660",
    "end": "2457060"
  },
  {
    "text": "foreign",
    "start": "2457060",
    "end": "2459240"
  },
  {
    "text": "[Music]",
    "start": "2463770",
    "end": "2466869"
  }
]