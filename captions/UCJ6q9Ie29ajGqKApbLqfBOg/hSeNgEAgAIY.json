[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14690"
  },
  {
    "text": "hello everyone welcome i'm going to talk about mac os security today i will",
    "start": "16160",
    "end": "21760"
  },
  {
    "text": "reveal two vulnerabilities i have found and show how to defeat mac os use either",
    "start": "21760",
    "end": "27920"
  },
  {
    "text": "of the two roundness my name is dorju fan a security researcher from ad",
    "start": "27920",
    "end": "34320"
  },
  {
    "start": "30000",
    "end": "70000"
  },
  {
    "text": "security lab i started learning mac os security from about",
    "start": "34320",
    "end": "39840"
  },
  {
    "text": "the second half of the year 2019 to be honest i'm almost a newcomer in this",
    "start": "39840",
    "end": "46000"
  },
  {
    "text": "field on october 10th and 2019 i submitted my first",
    "start": "46000",
    "end": "51920"
  },
  {
    "text": "vulnerability to ample it was fixed on december 10th then",
    "start": "51920",
    "end": "57520"
  },
  {
    "text": "i especially poster posted a twitter market and this is the first time i",
    "start": "57520",
    "end": "63840"
  },
  {
    "text": "participated in a security conference as a speaker thank you for attending my",
    "start": "63840",
    "end": "69600"
  },
  {
    "text": "talk there are three keywords in my talk extended file attribute compatibility",
    "start": "69600",
    "end": "77119"
  },
  {
    "start": "70000",
    "end": "116000"
  },
  {
    "text": "and defeating mac os that's the agenda of my talk today and",
    "start": "77119",
    "end": "82479"
  },
  {
    "text": "what is extended file attribute this is a concept in file system falsies term is",
    "start": "82479",
    "end": "89360"
  },
  {
    "text": "a huge subject i will not discuss the details of file system today i will",
    "start": "89360",
    "end": "95280"
  },
  {
    "text": "focus on the one level part the implementation of extended file attribute for bravity i",
    "start": "95280",
    "end": "103360"
  },
  {
    "text": "will use x attr extended attribute or just attribute",
    "start": "103360",
    "end": "109040"
  },
  {
    "text": "instead of extended file attribute in the remainder of the talk they are both",
    "start": "109040",
    "end": "114159"
  },
  {
    "text": "the same thing about extended attribute",
    "start": "114159",
    "end": "120719"
  },
  {
    "start": "116000",
    "end": "155000"
  },
  {
    "text": "let's see an example we usually use finder to manage our files there are many interesting features in finer for",
    "start": "120719",
    "end": "127840"
  },
  {
    "text": "example for text in finder you can mark a file with a color tag you can assign",
    "start": "127840",
    "end": "133520"
  },
  {
    "text": "right tag to a file and a green tag to another file you can also customize some",
    "start": "133520",
    "end": "138879"
  },
  {
    "text": "text tags by yourself shown in the figure then if you try to sort a group",
    "start": "138879",
    "end": "144560"
  },
  {
    "text": "files by tags files with the theme tags were grouped together this is more in",
    "start": "144560",
    "end": "150080"
  },
  {
    "text": "line with your personal preferences than sorting by file name",
    "start": "150080",
    "end": "155120"
  },
  {
    "start": "155000",
    "end": "205000"
  },
  {
    "text": "this feature seems to be powerful how to implement it for normal users file consists of file",
    "start": "155120",
    "end": "162560"
  },
  {
    "text": "name and its contents but from the perspective of file system files have a",
    "start": "162560",
    "end": "168720"
  },
  {
    "text": "rich meaning beside file name and data it also contains other attributes such",
    "start": "168720",
    "end": "174879"
  },
  {
    "text": "as file size success time and owner and also there are some advanced attributes",
    "start": "174879",
    "end": "180800"
  },
  {
    "text": "for example failed text obviously they can't be stored in file content file",
    "start": "180800",
    "end": "186959"
  },
  {
    "text": "system allocates new storage speeds for them called extended file and views but",
    "start": "186959",
    "end": "193200"
  },
  {
    "text": "how to view and operate extended attributes well mac os provides several commands to",
    "start": "193200",
    "end": "200400"
  },
  {
    "text": "do this for example mdrs and xatr",
    "start": "200400",
    "end": "206159"
  },
  {
    "start": "205000",
    "end": "246000"
  },
  {
    "text": "let's use the xatr command to check the file and",
    "start": "206159",
    "end": "211360"
  },
  {
    "text": "marked with a red tag before we can find that there is an attribute named item",
    "start": "211360",
    "end": "217599"
  },
  {
    "text": "user text and notice that the attribute content has a bp list header which looks",
    "start": "217599",
    "end": "224560"
  },
  {
    "text": "much like a plister file we can dump the content into a humanly readable xml file",
    "start": "224560",
    "end": "231599"
  },
  {
    "text": "through following clause you can find a screen with the content red6 in xml okay",
    "start": "231599",
    "end": "237840"
  },
  {
    "text": "that's the reason and the finder will display a red marker next to the file based on this information",
    "start": "237840",
    "end": "244879"
  },
  {
    "text": "so how exactly is attr implemented after all every feature in the system should",
    "start": "244879",
    "end": "252080"
  },
  {
    "text": "be implemented by code the answer is mac os provides a series",
    "start": "252080",
    "end": "257680"
  },
  {
    "text": "of xetr system cores such as get and set x attr",
    "start": "257680",
    "end": "264400"
  },
  {
    "text": "we can use the following code to test whether it is the same as the result",
    "start": "264400",
    "end": "270479"
  },
  {
    "text": "set an attribute name the item user tag to the file to make finder things then",
    "start": "270479",
    "end": "276320"
  },
  {
    "text": "the file is marked with a red tag i just reuse the x attr content dumpster from",
    "start": "276320",
    "end": "283120"
  },
  {
    "text": "the previous thread tagged file and then assign this piece of binary data to the",
    "start": "283120",
    "end": "289120"
  },
  {
    "text": "file through the set x80 car cisco it turns out that yes we can indeed get",
    "start": "289120",
    "end": "297360"
  },
  {
    "text": "a file with a red mark so the set x attr cisco works",
    "start": "297360",
    "end": "303680"
  },
  {
    "start": "303000",
    "end": "335000"
  },
  {
    "text": "okay i noticed that mac os supports many falsies term for mass",
    "start": "303680",
    "end": "309680"
  },
  {
    "text": "refer to the disk utility application you can see hfs plus and apfs",
    "start": "309680",
    "end": "317280"
  },
  {
    "text": "these two are apple's private file system there is no doubt that the support x",
    "start": "317280",
    "end": "324000"
  },
  {
    "text": "attr but i noticed that there are other fellow systems",
    "start": "324000",
    "end": "329759"
  },
  {
    "text": "fat and ex fat to these support xetr2",
    "start": "329759",
    "end": "335919"
  },
  {
    "start": "335000",
    "end": "372000"
  },
  {
    "text": "i created a disk image formatted with fan32 then mounted the image and create",
    "start": "335919",
    "end": "344560"
  },
  {
    "text": "create tagged files in it and successful color tag has had appeared the answer is",
    "start": "344560",
    "end": "352800"
  },
  {
    "text": "yes however fat is a very old file system which only provides basic file",
    "start": "352800",
    "end": "359759"
  },
  {
    "text": "management functions intuition tells me that xatr is a",
    "start": "359759",
    "end": "365360"
  },
  {
    "text": "different natalie not supported there must be some black magic behind it",
    "start": "365360",
    "end": "373440"
  },
  {
    "text": "fortunately xnew the macos kernel is open source so we can analyze how the",
    "start": "373520",
    "end": "380720"
  },
  {
    "text": "fan file system supports x attr and the code level x attr 6 chords are",
    "start": "380720",
    "end": "387840"
  },
  {
    "text": "implemented in the following c source file 3 fsx attr dot c",
    "start": "387840",
    "end": "394880"
  },
  {
    "text": "when we call set x attr all the arguments will be passed to v n o p set",
    "start": "394880",
    "end": "400880"
  },
  {
    "text": "x attr each file system driver will register a callback function in reload",
    "start": "400880",
    "end": "407120"
  },
  {
    "text": "operation that is the vmop for epfs the corresponding vlp will do the red set",
    "start": "407120",
    "end": "415440"
  },
  {
    "text": "xctr operation but for fat fast term the callback function just returns an error",
    "start": "415440",
    "end": "422880"
  },
  {
    "text": "which is error not support indicating that the xatr feature is not supported",
    "start": "422880",
    "end": "429599"
  },
  {
    "text": "and then the following code path will be executed a function name the default set",
    "start": "429599",
    "end": "436080"
  },
  {
    "text": "xctr is called by reading the code i found that",
    "start": "436080",
    "end": "442319"
  },
  {
    "start": "438000",
    "end": "459000"
  },
  {
    "text": "for filesy terms that don't support xctr natively like that apple uses",
    "start": "442319",
    "end": "448800"
  },
  {
    "text": "extra hidden file prefixed with dot underscore to simulate xctr",
    "start": "448800",
    "end": "454880"
  },
  {
    "text": "that's where attributes data store in fact their system anyway we can now conclude that the",
    "start": "454880",
    "end": "462960"
  },
  {
    "start": "459000",
    "end": "489000"
  },
  {
    "text": "fanfares term itself doesn't support xctr but apple introduces ample double",
    "start": "462960",
    "end": "469199"
  },
  {
    "text": "file which implements a compatible layer why should i put these a containable",
    "start": "469199",
    "end": "475599"
  },
  {
    "text": "layer i guess that this may be due to user experience considerations",
    "start": "475599",
    "end": "481360"
  },
  {
    "text": "users may be confused if some features are as unsupported on other file system",
    "start": "481360",
    "end": "490000"
  },
  {
    "start": "489000",
    "end": "565000"
  },
  {
    "text": "well use a regular fail in user speeds to simulate xctr that means fail passing",
    "start": "490000",
    "end": "496639"
  },
  {
    "text": "in kernel fell passing is actual uh actually a difficult thing there are",
    "start": "496639",
    "end": "503120"
  },
  {
    "text": "thousands of cvs all about file parsing for example doc pdf image audio there",
    "start": "503120",
    "end": "511599"
  },
  {
    "text": "have been many cvs in history the input double file also",
    "start": "511599",
    "end": "516800"
  },
  {
    "text": "follows a certain valve format and requires file parsing their vulnerabilities in it",
    "start": "516800",
    "end": "523760"
  },
  {
    "text": "and the format of the ample double file is very simple it mainly stores key",
    "start": "523760",
    "end": "528880"
  },
  {
    "text": "value pairs through the fail format is simple there is still a chance to find some flaws in",
    "start": "528880",
    "end": "535920"
  },
  {
    "text": "its implementation fast testing is an effective way to find",
    "start": "535920",
    "end": "541120"
  },
  {
    "text": "the failed passing vulnerabilities but ample double file parsing is processed in",
    "start": "541120",
    "end": "547600"
  },
  {
    "text": "kernel we must customize unique fuzzing tool to do this which will take a lot of time",
    "start": "547600",
    "end": "554480"
  },
  {
    "text": "and because the file format is relatively simple it's pausing code that",
    "start": "554480",
    "end": "559600"
  },
  {
    "text": "is a few hundred lines of code so i chose code audit which is sufficient",
    "start": "559600",
    "end": "566399"
  },
  {
    "start": "565000",
    "end": "643000"
  },
  {
    "text": "and the layout of amp.double file is shown in right several types of data are stored in",
    "start": "566399",
    "end": "573200"
  },
  {
    "text": "sequence first is apple double header then extended attribute header then the",
    "start": "573200",
    "end": "580160"
  },
  {
    "text": "attribute keys and finally attribute values when i did the code audit i saw this",
    "start": "580160",
    "end": "585440"
  },
  {
    "text": "function check and swap attribute header it is responsible for verifying the apple",
    "start": "585440",
    "end": "592320"
  },
  {
    "text": "double file confirm whether the file structure is legal and this for loop is",
    "start": "592320",
    "end": "598160"
  },
  {
    "text": "used to check if the stoichi value pair is in the wallet detail area",
    "start": "598160",
    "end": "603680"
  },
  {
    "text": "but look at this line marked in red it does two things add offset and length to",
    "start": "603680",
    "end": "610240"
  },
  {
    "text": "see if there is an integer overflow and check the end of attribute data and see",
    "start": "610240",
    "end": "616480"
  },
  {
    "text": "if it exceeds the end of the data area however this code doesn't check the",
    "start": "616480",
    "end": "622720"
  },
  {
    "text": "offset itself it must be located in the valid only the",
    "start": "622720",
    "end": "627760"
  },
  {
    "text": "data area too then it is between data start and the data end specified by the",
    "start": "627760",
    "end": "633680"
  },
  {
    "text": "header when offset is less than data start attribute data will overlap with",
    "start": "633680",
    "end": "641040"
  },
  {
    "text": "the previous data structure such as structural double header or",
    "start": "641040",
    "end": "646640"
  },
  {
    "start": "643000",
    "end": "709000"
  },
  {
    "text": "structure attr header this is not a big problem when getting",
    "start": "646640",
    "end": "652880"
  },
  {
    "text": "x8 ttr with x80 car at most there is some unexpected detail from the fair",
    "start": "652880",
    "end": "660160"
  },
  {
    "text": "header however when colleen said xctr to cell attribute here comes the problem",
    "start": "660160",
    "end": "666880"
  },
  {
    "text": "it is equivalent to a red operation and all these overlapping data structures",
    "start": "666880",
    "end": "673040"
  },
  {
    "text": "can be modified this is the vulnerability i want to talk about the vulnerability in",
    "start": "673040",
    "end": "680399"
  },
  {
    "text": "extended attributes a master taker advantage of this corruption to do some useful things",
    "start": "680399",
    "end": "687680"
  },
  {
    "text": "such as arbitrary memory read and write controlling pc registers and so on",
    "start": "687680",
    "end": "694480"
  },
  {
    "text": "and then i started to read code search all the code related to these two",
    "start": "694480",
    "end": "699920"
  },
  {
    "text": "headers to see if there are any useful side effects of course i'm lucky enough",
    "start": "699920",
    "end": "706160"
  },
  {
    "text": "i found something very useful first i found",
    "start": "706160",
    "end": "711760"
  },
  {
    "text": "this piece of code when set x80 car operation is completed the corresponding",
    "start": "711760",
    "end": "718639"
  },
  {
    "text": "trend date will be sealed to the xctr file the same operation is completed by red",
    "start": "718639",
    "end": "726079"
  },
  {
    "text": "x8 ttr input before writing the file back to disk the file size will be recalculated",
    "start": "726079",
    "end": "733839"
  },
  {
    "text": "because the new xct cr is ended or longer xctr is said the file size may",
    "start": "733839",
    "end": "740639"
  },
  {
    "text": "change the new file says is calculated by data start plus data length",
    "start": "740639",
    "end": "747519"
  },
  {
    "text": "referring to the previous speech these two fields are within the coverage of the illegal entry of site",
    "start": "747519",
    "end": "755360"
  },
  {
    "text": "i can't change any of them to increase the stat of file increase the size for",
    "start": "755360",
    "end": "761440"
  },
  {
    "text": "example to 64 megabytes or 64 mb",
    "start": "761440",
    "end": "766720"
  },
  {
    "text": "red x80 info will follow our instructions and related the same amount",
    "start": "766720",
    "end": "772959"
  },
  {
    "text": "of memory to the file the problem is in fact sample double",
    "start": "772959",
    "end": "778160"
  },
  {
    "text": "file in the memory generally only analogies 64 kilobytes of memory",
    "start": "778160",
    "end": "785040"
  },
  {
    "text": "the red file operation is actually equivalent to a memory copy",
    "start": "785040",
    "end": "790160"
  },
  {
    "text": "if we asked if we asked her to seal 64 mb and then",
    "start": "790160",
    "end": "796399"
  },
  {
    "text": "the wanted length is greater than the real length outbound read occurs the contents of the",
    "start": "796399",
    "end": "804079"
  },
  {
    "text": "memory after x80 car info page will be faithfully sealed to the ample double",
    "start": "804079",
    "end": "809920"
  },
  {
    "text": "file and this file of course is readable and readable by the user",
    "start": "809920",
    "end": "815519"
  },
  {
    "text": "space so we can use this to to disclose kernel memory information",
    "start": "815519",
    "end": "823040"
  },
  {
    "start": "822000",
    "end": "881000"
  },
  {
    "text": "here at downplay 64 mb of kernel memory to xctr file",
    "start": "823040",
    "end": "830639"
  },
  {
    "text": "and display them in hexadecimal the green mark is an illegal offset at first",
    "start": "830639",
    "end": "837360"
  },
  {
    "text": "pointing to the data start field effect header which can be achieved by tampering with",
    "start": "837360",
    "end": "844240"
  },
  {
    "text": "the dot underscore prefixed fctr file in user space data bias starting from",
    "start": "844240",
    "end": "851560"
  },
  {
    "text": "564 kb or hex one zero zero zero zero is the kernel memory we read out of bounds",
    "start": "851560",
    "end": "860079"
  },
  {
    "text": "so what can we do with the ob raid everybody knows that modern kernels aslr",
    "start": "860079",
    "end": "867120"
  },
  {
    "text": "protection is enabled that is a great space layer randomized",
    "start": "867120",
    "end": "872639"
  },
  {
    "text": "we can use the memory disclosure to inspect chronometer layout useful to",
    "start": "872639",
    "end": "878399"
  },
  {
    "text": "bypass aslr actually i put a ipc key message after",
    "start": "878399",
    "end": "886720"
  },
  {
    "start": "881000",
    "end": "922000"
  },
  {
    "text": "xhtr info page in advance referring to the definition of a key",
    "start": "886720",
    "end": "892160"
  },
  {
    "text": "message when there is only one key message both preview and the next pointer point to",
    "start": "892160",
    "end": "899199"
  },
  {
    "text": "itself which is the first address of this key message through this trick we can calculate our",
    "start": "899199",
    "end": "906720"
  },
  {
    "text": "location kernel so now aslr is not a problem just have to",
    "start": "906720",
    "end": "912880"
  },
  {
    "text": "mention self-location by ipc key message comment exploit teaching technique is dead in",
    "start": "912880",
    "end": "919839"
  },
  {
    "text": "the latest version of kernel okay now we have all be read but this is",
    "start": "919839",
    "end": "926639"
  },
  {
    "start": "922000",
    "end": "1041000"
  },
  {
    "text": "not enough for kernel privileged exclusion usually we",
    "start": "926639",
    "end": "932320"
  },
  {
    "text": "need an arbitrary kernel memory right to achieve this goal this is the most",
    "start": "932320",
    "end": "938560"
  },
  {
    "text": "challenging point of this vulnerability i will explain in detail",
    "start": "938560",
    "end": "943759"
  },
  {
    "text": "since i can now control the data in the two headers i continue to look at the",
    "start": "943759",
    "end": "949199"
  },
  {
    "text": "code and check if there are other useful side effects and noticed the fully",
    "start": "949199",
    "end": "955360"
  },
  {
    "text": "encode before and after write xatari input file there is a slab 80 header operation",
    "start": "955360",
    "end": "962399"
  },
  {
    "text": "respectively this function does something relatively simple to perform a civil region or some integers",
    "start": "962399",
    "end": "969839"
  },
  {
    "text": "in the header that is the converting battle order of some interiors",
    "start": "969839",
    "end": "975040"
  },
  {
    "text": "and what is there a sample reason there and this is because apple double files",
    "start": "975040",
    "end": "981360"
  },
  {
    "text": "are stored in big endian order and x86 is a little ending cpu so the data in",
    "start": "981360",
    "end": "988399"
  },
  {
    "text": "the memory here is inconsistent with the bad order in the file",
    "start": "988399",
    "end": "993920"
  },
  {
    "text": "data or integers cannot be written directly to the file back order conv",
    "start": "993920",
    "end": "1000320"
  },
  {
    "text": "conversion is required so before writing the file there is a swap ad",
    "start": "1000320",
    "end": "1006560"
  },
  {
    "text": "header operation to do this back to this function there is a for loop the loop",
    "start": "1006560",
    "end": "1012720"
  },
  {
    "text": "count comes from the header and we can modify the data in the header arbitrarily so we can control the loop",
    "start": "1012720",
    "end": "1020480"
  },
  {
    "text": "count of the for loop next we can turn the loop count into a very large number",
    "start": "1020480",
    "end": "1026319"
  },
  {
    "text": "such as 1 million and the for loop will be continuously",
    "start": "1026319",
    "end": "1031438"
  },
  {
    "text": "and then we get an outer bounds however this is not and it will be right",
    "start": "1031439",
    "end": "1037600"
  },
  {
    "text": "it is just an ob slam what can ob slam do",
    "start": "1037600",
    "end": "1045360"
  },
  {
    "start": "1041000",
    "end": "1107000"
  },
  {
    "text": "fair i must introduce the ob temp stamp vulnerability by brandon",
    "start": "1045360",
    "end": "1051760"
  },
  {
    "text": "brandon proves that even an ob red that cannot control memory content",
    "start": "1051760",
    "end": "1058480"
  },
  {
    "text": "precisely can also finish as a successful attack similarly the ob slab cannot precisely",
    "start": "1058480",
    "end": "1066960"
  },
  {
    "text": "control the memory content too but i will use brandon's technique to complete the",
    "start": "1066960",
    "end": "1074720"
  },
  {
    "text": "exploit if you select an integer as the slab a d header did",
    "start": "1074720",
    "end": "1081520"
  },
  {
    "text": "but still interpret the integer in little ending the value of the integer",
    "start": "1081520",
    "end": "1086799"
  },
  {
    "text": "will change so if you can make a number bigger",
    "start": "1086799",
    "end": "1092799"
  },
  {
    "text": "or smaller for example x123 to hex the 4321 becomes a bigger value and that's",
    "start": "1092799",
    "end": "1099520"
  },
  {
    "text": "enough i will make a rpc key message bigger than its original size",
    "start": "1099520",
    "end": "1108120"
  },
  {
    "text": "first i place a key message after the x8 ttr info memory page this key message is",
    "start": "1109360",
    "end": "1116880"
  },
  {
    "text": "the target of our ob slab and the field in the first of the",
    "start": "1116880",
    "end": "1122880"
  },
  {
    "text": "key message header is rkm says which is an unsigned inter 32 because key message",
    "start": "1122880",
    "end": "1130320"
  },
  {
    "text": "has a variable length this field is used to record the length of a key message",
    "start": "1130320",
    "end": "1137280"
  },
  {
    "text": "then it is going to be released the the allocated memory is free according to",
    "start": "1137280",
    "end": "1142559"
  },
  {
    "text": "the to this ikm site if we use ob slab operation to make this",
    "start": "1142559",
    "end": "1149120"
  },
  {
    "text": "field bigger and such as hex one two three four to hex four three",
    "start": "1149120",
    "end": "1154480"
  },
  {
    "text": "two one then if we release this key message we will",
    "start": "1154480",
    "end": "1160160"
  },
  {
    "text": "actually release more memory than expected and the other key object following this",
    "start": "1160160",
    "end": "1166400"
  },
  {
    "text": "key message i put an ol post here will be released",
    "start": "1166400",
    "end": "1171440"
  },
  {
    "text": "together but the reference to the following key object is still here we can still use",
    "start": "1171440",
    "end": "1179039"
  },
  {
    "text": "the release the object that is we get use outer free",
    "start": "1179039",
    "end": "1184320"
  },
  {
    "text": "finally we can convert the ob swap vulnerability to a very useful type of",
    "start": "1184320",
    "end": "1190400"
  },
  {
    "text": "vulnerability however in the process of my research",
    "start": "1190400",
    "end": "1196000"
  },
  {
    "start": "1192000",
    "end": "1377000"
  },
  {
    "text": "when the peer was overlooked the ob slam operation continuously slammed",
    "start": "1196000",
    "end": "1203039"
  },
  {
    "text": "12 bytes or three unions enter time and the starting position is not aligned",
    "start": "1203039",
    "end": "1209600"
  },
  {
    "text": "to four bytes therefore we cannot swap only the ikm cell field",
    "start": "1209600",
    "end": "1216080"
  },
  {
    "text": "in fact what we get is a 10 byte 10-bit out-of-bound slab",
    "start": "1216080",
    "end": "1221200"
  },
  {
    "text": "marked in green i got more side effects than i originally expected and the worst",
    "start": "1221200",
    "end": "1229280"
  },
  {
    "text": "thing is that this study effects harmful to my exploit",
    "start": "1229280",
    "end": "1235679"
  },
  {
    "text": "let's see this figure the first three fields of ipc key message",
    "start": "1235679",
    "end": "1241200"
  },
  {
    "text": "and akim says i can't friends and i can't next a craft",
    "start": "1241200",
    "end": "1247520"
  },
  {
    "text": "especially the lower two bytes of rtm next come from rkm flats i can next a very",
    "start": "1247520",
    "end": "1256159"
  },
  {
    "text": "important pointer which is crafted and",
    "start": "1256159",
    "end": "1261440"
  },
  {
    "text": "everything is messed up of course we can still control the size of all",
    "start": "1261440",
    "end": "1267440"
  },
  {
    "text": "rpm sets and trigger the over free operation successfully but the kernel",
    "start": "1267440",
    "end": "1272880"
  },
  {
    "text": "panic immediately according to the panic information i",
    "start": "1272880",
    "end": "1278480"
  },
  {
    "text": "found the following code the kernel will do some text before reading key message",
    "start": "1278480",
    "end": "1284559"
  },
  {
    "text": "we must ensure that i can next is worried trouble comes then after another and let",
    "start": "1284559",
    "end": "1292000"
  },
  {
    "text": "us observe the result of ob slam again the higher",
    "start": "1292000",
    "end": "1297440"
  },
  {
    "text": "16 bit of ikm flags cover the lower 16 bit of",
    "start": "1297440",
    "end": "1302960"
  },
  {
    "text": "the rtm next pointer in most cases the higher bits of rkm flags are zeros so it",
    "start": "1302960",
    "end": "1311200"
  },
  {
    "text": "can be approximated that the lower 16 bits of rpm next are cleared to zero",
    "start": "1311200",
    "end": "1319440"
  },
  {
    "text": "so how do we avoid this panic consider such a situation if key message is allocated",
    "start": "1319440",
    "end": "1327120"
  },
  {
    "text": "at address line to 64 kb for example address",
    "start": "1327120",
    "end": "1332400"
  },
  {
    "text": "hex one two three four zero zero zero zero thanks to rpm next point",
    "start": "1332400",
    "end": "1339919"
  },
  {
    "text": "to key message itself a key and next pointer equals hex one two three four",
    "start": "1339919",
    "end": "1347440"
  },
  {
    "text": "zero zero zero zero two that is the lower 16 bits of the rpm next pointer are",
    "start": "1347440",
    "end": "1355360"
  },
  {
    "text": "zeros and this time even if ob slam clears its lower base to zero it is",
    "start": "1355360",
    "end": "1362320"
  },
  {
    "text": "still a volley the pointer because its lower bits are originally",
    "start": "1362320",
    "end": "1367440"
  },
  {
    "text": "zero so that harmful cell effects can be eliminated",
    "start": "1367440",
    "end": "1373120"
  },
  {
    "text": "and we can get a perfect uaf",
    "start": "1373120",
    "end": "1377840"
  },
  {
    "start": "1377000",
    "end": "1554000"
  },
  {
    "text": "to achieve this allocate rpc key message a 64 kb line address",
    "start": "1378960",
    "end": "1385679"
  },
  {
    "text": "which ends with four zeros i must control the layout of the kernel heap precisely i do the following work note",
    "start": "1385679",
    "end": "1393440"
  },
  {
    "text": "that all these operations are performed in kernel map no zoom memory and because",
    "start": "1393440",
    "end": "1398480"
  },
  {
    "text": "ob slam occurs in a kernel map and it's on a x86 cpu memory range",
    "start": "1398480",
    "end": "1405280"
  },
  {
    "text": "the memory page is 4kb i allocate many key messages with 17",
    "start": "1405280",
    "end": "1413039"
  },
  {
    "text": "pd styles continuously which means that besides our key message is hex eleven",
    "start": "1413039",
    "end": "1419520"
  },
  {
    "text": "zero zero zero uh what's the advantage of doing this is",
    "start": "1419520",
    "end": "1424640"
  },
  {
    "text": "that the address of these key messages will increase sequentially well we only",
    "start": "1424640",
    "end": "1431440"
  },
  {
    "text": "care about the changes in the lower 16 bits their addresses are hex",
    "start": "1431440",
    "end": "1438000"
  },
  {
    "text": "one zero zero zero two zero zero zero three zero zero zero and so on okay i",
    "start": "1438000",
    "end": "1444720"
  },
  {
    "text": "can get a 64 lined key message marked in red",
    "start": "1444720",
    "end": "1450240"
  },
  {
    "text": "remember what we mentioned in the ob read part i can read a large amount of memory",
    "start": "1450240",
    "end": "1456720"
  },
  {
    "text": "after x80 info is written to user speeds so i can clearly know which key message",
    "start": "1456720",
    "end": "1464480"
  },
  {
    "text": "is i want and then i will split up the key messages and show",
    "start": "1464480",
    "end": "1470559"
  },
  {
    "text": "in the figure below to the field pd that i want i need to release three continuously",
    "start": "1470559",
    "end": "1478159"
  },
  {
    "text": "key message starting from four zeros and then we allocate four memory blocks",
    "start": "1478159",
    "end": "1485200"
  },
  {
    "text": "one 16 page block of the two eight page blocks the rest of the memory is merged into",
    "start": "1485200",
    "end": "1492880"
  },
  {
    "text": "the next turkey message a 19 page block which is no specific effect just fills",
    "start": "1492880",
    "end": "1500480"
  },
  {
    "text": "up the memory hole this 16 piece memory block is reserved",
    "start": "1500480",
    "end": "1505520"
  },
  {
    "text": "for xctr info it is lined up to 64 kb now",
    "start": "1505520",
    "end": "1510960"
  },
  {
    "text": "next 8 page memory block will also be aligned to 64 kb",
    "start": "1510960",
    "end": "1517200"
  },
  {
    "text": "put a key message as this location which is the candidate object and will be",
    "start": "1517200",
    "end": "1523200"
  },
  {
    "text": "corrupted by ob slam and then in the next eight page memory",
    "start": "1523200",
    "end": "1528320"
  },
  {
    "text": "block i put a ol post piece which is our over free target",
    "start": "1528320",
    "end": "1534240"
  },
  {
    "text": "after these operations i will make the i can set from 32 kb to",
    "start": "1534240",
    "end": "1541760"
  },
  {
    "text": "46 kb through ob swap and then release the crafty the key message now we get a",
    "start": "1541760",
    "end": "1550320"
  },
  {
    "text": "perfect uaf on ol post page in fact we still have another problem",
    "start": "1550320",
    "end": "1557919"
  },
  {
    "start": "1554000",
    "end": "1694000"
  },
  {
    "text": "and here again another new problem uh look at this code again and i find that",
    "start": "1557919",
    "end": "1564559"
  },
  {
    "text": "after the xctr file received there is a slapback operation immediately the",
    "start": "1564559",
    "end": "1570799"
  },
  {
    "text": "memory will be restored to its previous little indian state in other words our free operation must",
    "start": "1570799",
    "end": "1577919"
  },
  {
    "text": "occur during the reference leave maybe we can do this with the risk condition",
    "start": "1577919",
    "end": "1585200"
  },
  {
    "text": "let's create the two threads the first thread performs set x etc and ob slab",
    "start": "1585200",
    "end": "1591520"
  },
  {
    "text": "things and the second thread reads for the right moment and destroys the key",
    "start": "1591520",
    "end": "1597120"
  },
  {
    "text": "message ie trigger for free it must be done during the red file",
    "start": "1597120",
    "end": "1604320"
  },
  {
    "text": "steve there is a problem here we have no way to detect when ob slam has occurred",
    "start": "1604320",
    "end": "1610880"
  },
  {
    "text": "and then does it end and so it is not easy to determine when to destroy the",
    "start": "1610880",
    "end": "1617520"
  },
  {
    "text": "key message as this currently costs only a few microseconds so the suitable",
    "start": "1617520",
    "end": "1624400"
  },
  {
    "text": "time window is very small then what should we do fortunately red file is an io operation",
    "start": "1624400",
    "end": "1632320"
  },
  {
    "text": "which is very very time consuming moreover we can control the size of the",
    "start": "1632320",
    "end": "1638480"
  },
  {
    "text": "xetr file so i choose to seal 64 megabytes of",
    "start": "1638480",
    "end": "1644240"
  },
  {
    "text": "memory to the xctr file then the set x8 tdrs is called it will expand",
    "start": "1644240",
    "end": "1651600"
  },
  {
    "text": "to tens of milliseconds in this way our time window is relatively sufficient",
    "start": "1651600",
    "end": "1658240"
  },
  {
    "text": "the strategy is as follows first calculated the time",
    "start": "1658240",
    "end": "1663440"
  },
  {
    "text": "required to dump to downpour 64 mb of memory in ob read state second",
    "start": "1663440",
    "end": "1671600"
  },
  {
    "text": "launch a second 64 mb dump and do the ob slam event",
    "start": "1671600",
    "end": "1677600"
  },
  {
    "text": "third of the time destroy the key message in other thread then all three",
    "start": "1677600",
    "end": "1683279"
  },
  {
    "text": "is made and this time we said it x80 thread is still busy writing xctr fail",
    "start": "1683279",
    "end": "1691520"
  },
  {
    "text": "and everything happens to sunny okay now that all the problems have been",
    "start": "1691520",
    "end": "1698559"
  },
  {
    "start": "1694000",
    "end": "1752000"
  },
  {
    "text": "solved we can put these steps together and to perform a complete exploit i",
    "start": "1698559",
    "end": "1706799"
  },
  {
    "text": "split the exploit strategy to is the main exploit",
    "start": "1706799",
    "end": "1713760"
  },
  {
    "text": "and part 2 is post exploit i will not discuss the details of the exploit",
    "start": "1713760",
    "end": "1719840"
  },
  {
    "text": "process you can find the exploit code you might have the link is given in the",
    "start": "1719840",
    "end": "1725360"
  },
  {
    "text": "bottom left corner of the piece and now we have the arbitrary",
    "start": "1725360",
    "end": "1730799"
  },
  {
    "text": "kernel redress ability or however in the latest os trp0 is no",
    "start": "1730799",
    "end": "1737919"
  },
  {
    "text": "longer accessible but anyway we have many ways to achieve",
    "start": "1737919",
    "end": "1743279"
  },
  {
    "text": "arbitrary kernel right that is not a problem what we need most is a",
    "start": "1743279",
    "end": "1748799"
  },
  {
    "text": "vulnerability as a starting point now let's talk about key er qc since",
    "start": "1748799",
    "end": "1756640"
  },
  {
    "start": "1752000",
    "end": "1798000"
  },
  {
    "text": "this is a x86 cpu there is no protection such as",
    "start": "1756640",
    "end": "1762000"
  },
  {
    "text": "back so find a suitable kernel object and the forge vertical function then",
    "start": "1762000",
    "end": "1767840"
  },
  {
    "text": "trigger the vertical function from user mode you can choose kernel code execution i will not expand",
    "start": "1767840",
    "end": "1776320"
  },
  {
    "text": "it here and in most cases you can already escalate to root by arbitrary",
    "start": "1776320",
    "end": "1783360"
  },
  {
    "text": "rewrite usually this is enough only some special scenarios we need to",
    "start": "1783360",
    "end": "1789679"
  },
  {
    "text": "call the kernel functions so k yeah pc is not that important as brandon",
    "start": "1789679",
    "end": "1796320"
  },
  {
    "text": "mentioned before compared to mac os many people are more",
    "start": "1796320",
    "end": "1801679"
  },
  {
    "start": "1798000",
    "end": "1907000"
  },
  {
    "text": "concerned about ios after all ios has larger number of users and the usage of",
    "start": "1801679",
    "end": "1807840"
  },
  {
    "text": "the device is always limited unlike mac you can't get root permissions through",
    "start": "1807840",
    "end": "1813760"
  },
  {
    "text": "normal operations people need to exploit to take full control of their",
    "start": "1813760",
    "end": "1819520"
  },
  {
    "text": "iphones and then let's talk about the impact of this vulnerability on ios",
    "start": "1819520",
    "end": "1826159"
  },
  {
    "text": "the conclusion is that ios is not affected although ios and macos share the same",
    "start": "1826159",
    "end": "1834480"
  },
  {
    "text": "kernel code there are still differences in implementation ios",
    "start": "1834480",
    "end": "1840320"
  },
  {
    "text": "has commented out the xetr compatible code",
    "start": "1840320",
    "end": "1847039"
  },
  {
    "text": "ios has introduced a new mechanism to support the files app",
    "start": "1847039",
    "end": "1854960"
  },
  {
    "text": "finder on iphone that is user fs user fs implements the support of external file",
    "start": "1854960",
    "end": "1863120"
  },
  {
    "text": "term user speech when you plug in a flash drive to iphone",
    "start": "1863120",
    "end": "1868399"
  },
  {
    "text": "the corresponding fs plugin will be loaded but the code of fantasy term has",
    "start": "1868399",
    "end": "1875200"
  },
  {
    "text": "been refactored anyway i can't trigger a crash of fat or ex-fan plug-in so ios is",
    "start": "1875200",
    "end": "1883440"
  },
  {
    "text": "not affected by this issue moreover this is also a good exploit mitigation you can't attack",
    "start": "1883440",
    "end": "1891360"
  },
  {
    "text": "the kernel directly from pharisee term anymore in ios",
    "start": "1891360",
    "end": "1896559"
  },
  {
    "text": "suppose you can successfully launch an attack you only obtain the permissions of a normal process but you still can't",
    "start": "1896559",
    "end": "1904480"
  },
  {
    "text": "obtain the kernel permissions now remember that the vulnerability i",
    "start": "1904480",
    "end": "1910000"
  },
  {
    "start": "1907000",
    "end": "1944000"
  },
  {
    "text": "posted on twitter this vulnerability has been fixed in 2019 in macos canada 10 15 2 and",
    "start": "1910000",
    "end": "1920720"
  },
  {
    "text": "it's already a bit old it's probably it provides the ability to read and write",
    "start": "1920720",
    "end": "1926240"
  },
  {
    "text": "32 bytes in arbitrary aggressive but the grass can only be located after the xctr",
    "start": "1926240",
    "end": "1934399"
  },
  {
    "text": "info page so it is a perfect vulnerability and i",
    "start": "1934399",
    "end": "1940159"
  },
  {
    "text": "will explain the vulnerability briefly function default set x80 again let's",
    "start": "1940159",
    "end": "1948960"
  },
  {
    "text": "take a look at this piece of code there is a special attribute in x80 ttr",
    "start": "1948960",
    "end": "1954640"
  },
  {
    "text": "file named finder info then replacing this attribute it jumps",
    "start": "1954640",
    "end": "1960399"
  },
  {
    "text": "to the following code which allowed the users to sell 32 bytes",
    "start": "1960399",
    "end": "1966399"
  },
  {
    "text": "of data for this attribute the issue is that address offset final",
    "start": "1966399",
    "end": "1972320"
  },
  {
    "text": "info also comes from the x attr file and there is no check if",
    "start": "1972320",
    "end": "1979679"
  },
  {
    "text": "it is uh only the range when this value is greater than 64 kb",
    "start": "1979679",
    "end": "1986240"
  },
  {
    "text": "outer bonds occurs and we can control all the ob red bytes written to kernel",
    "start": "1986240",
    "end": "1993679"
  },
  {
    "start": "1993000",
    "end": "2058000"
  },
  {
    "text": "in fact if you read this attribute by get xe ttr04 you can get an out of",
    "start": "1993679",
    "end": "2000080"
  },
  {
    "text": "bounds read but it doesn't matter the ob right is enough for the exploitation",
    "start": "2000080",
    "end": "2007039"
  },
  {
    "text": "unlike the previous vulnerability this one doesn't have as many limitations and",
    "start": "2007039",
    "end": "2013440"
  },
  {
    "text": "it is a perfect vulnerability and is teaching process is simple you just need",
    "start": "2013440",
    "end": "2020320"
  },
  {
    "text": "to lay out the memory correctly and then craft the key message and afford a lot a",
    "start": "2020320",
    "end": "2026640"
  },
  {
    "text": "larger lens then destroy this key message maker over free the over free target is o airport",
    "start": "2026640",
    "end": "2034480"
  },
  {
    "text": "and os data the os data object serves to disclose",
    "start": "2034480",
    "end": "2039679"
  },
  {
    "text": "kernel memory and then as before you can build a tlp 0",
    "start": "2039679",
    "end": "2045120"
  },
  {
    "text": "done i will not discuss the details of the exploit process you can find the",
    "start": "2045120",
    "end": "2052079"
  },
  {
    "text": "exploit code in my github the link is given in the bottom left corner",
    "start": "2052079",
    "end": "2059040"
  },
  {
    "start": "2058000",
    "end": "2106000"
  },
  {
    "text": "about this vulnerability there is a very interesting thing you can put a malicious xctr file",
    "start": "2059119",
    "end": "2068000"
  },
  {
    "text": "on a flash drive then plug in this flash drive in to a mac macos computer",
    "start": "2068000",
    "end": "2074960"
  },
  {
    "text": "i will panic immediately displaying a multi-language screen of",
    "start": "2074960",
    "end": "2080800"
  },
  {
    "text": "death analyzing the crash logs i found it was caused by get xctr or ob read",
    "start": "2080800",
    "end": "2089599"
  },
  {
    "text": "which is probably because the finder automatically passed the xctr file",
    "start": "2089599",
    "end": "2096158"
  },
  {
    "text": "and this could be not lead to arbitrary code execution but it's funny it's a zero",
    "start": "2096159",
    "end": "2104160"
  },
  {
    "text": "click panic although few people noticed that the",
    "start": "2104160",
    "end": "2110079"
  },
  {
    "start": "2106000",
    "end": "2168000"
  },
  {
    "text": "file c term is also an effective attack surface to the kernel this type of",
    "start": "2110079",
    "end": "2116000"
  },
  {
    "text": "vulnerability does exist and is powerful such as the demands i should today",
    "start": "2116000",
    "end": "2122720"
  },
  {
    "text": "therefore when designing and implementing a file system need to be very careful any flaws in it may cause",
    "start": "2122720",
    "end": "2130640"
  },
  {
    "text": "serious impacts what's more the meaning of xc ttr is",
    "start": "2130640",
    "end": "2136480"
  },
  {
    "text": "interpreted by different programs for example finder uses tense",
    "start": "2136480",
    "end": "2142079"
  },
  {
    "text": "a child tools near the process xa ttr and the gamekeeper also relies on x80tr",
    "start": "2142079",
    "end": "2148720"
  },
  {
    "text": "to decide something this all involves the path in xctr which is a new attack",
    "start": "2148720",
    "end": "2155760"
  },
  {
    "text": "surface it is possible to attack these softwares through xctr",
    "start": "2155760",
    "end": "2161280"
  },
  {
    "text": "finally ios user fs is a good exploit in indication",
    "start": "2161280",
    "end": "2168880"
  },
  {
    "start": "2168000",
    "end": "2182000"
  },
  {
    "text": "thank you for watching that's all of my talk today you can find all the beauty code on my github and you can contact me",
    "start": "2169040",
    "end": "2176640"
  },
  {
    "text": "by this email thank you",
    "start": "2176640",
    "end": "2181319"
  }
]