[
  {
    "start": "0",
    "end": "221000"
  },
  {
    "text": "the conference and produced by the sound of knowledge incorporated",
    "start": "160",
    "end": "5878"
  },
  {
    "text": "i know him as the author of the asmodius scanner for nt which in its day was one of the fastest port scanners or the",
    "start": "22720",
    "end": "28960"
  },
  {
    "text": "fastest port scanner on nt since then he's started a company",
    "start": "28960",
    "end": "34640"
  },
  {
    "text": "clicktosecure.com and he's going to be talking on advanced",
    "start": "34640",
    "end": "40000"
  },
  {
    "text": "buffer overrun techniques if you've i don't know if the singapore",
    "start": "40000",
    "end": "45120"
  },
  {
    "text": "materials online uh he presented this in singapore and it went over really well and since then he's refined it a bit and",
    "start": "45120",
    "end": "51360"
  },
  {
    "text": "gotten a little bit more advanced so the goal here is to hopefully alienate a coup a good percentage of you with",
    "start": "51360",
    "end": "58000"
  },
  {
    "text": "technical knowledge to the point that it forces you to go out and learn some of this we also have eli here who's going to be",
    "start": "58000",
    "end": "64960"
  },
  {
    "text": "taking questions from the audience most of the questions will be at the end but if you have a pertinent question",
    "start": "64960",
    "end": "70880"
  },
  {
    "text": "please feel free to raise your hand and and we'll get the question answered um",
    "start": "70880",
    "end": "76080"
  },
  {
    "text": "let me see any other good stuff i don't know that's good that's good okay oh uh yeah also check out rootkit.com uh",
    "start": "76080",
    "end": "83439"
  },
  {
    "text": "there's a lot of cool work being done there on how do you install rootkits and defend against rootkits and",
    "start": "83439",
    "end": "90080"
  },
  {
    "text": "hide stuff in memory and find stuff in memory so it's sort of both sides of the battle rootkit.com it's uh what opencvs is",
    "start": "90080",
    "end": "97600"
  },
  {
    "text": "there too yeah cbs so there's cvs stuff there you can download uh different projects contribute to different",
    "start": "97600",
    "end": "102960"
  },
  {
    "text": "projects okay here is uh craig coughlin yeah i'm just",
    "start": "102960",
    "end": "108079"
  },
  {
    "text": "doing a mic check here okay thank you jeff um first of all i'd like to thank eli",
    "start": "108079",
    "end": "115360"
  },
  {
    "text": "for saving my butt with this laptop right here um i have windows 2000 installed on a sony vaio and it does not",
    "start": "115360",
    "end": "120560"
  },
  {
    "text": "have external video support unfortunately so in the last 10 minutes we've been scrambling to get this thing over onto his laptop so thanks eli a",
    "start": "120560",
    "end": "127040"
  },
  {
    "text": "whole lot for that um i'd also like to thank everybody else uh who's here especially all my hacker",
    "start": "127040",
    "end": "132239"
  },
  {
    "text": "friends who've you know been around for a couple years now uh you guys have been really supportive and you know i really appreciate all the help you've given me",
    "start": "132239",
    "end": "138560"
  },
  {
    "text": "and last like to thank jeff moss black hat is the coolest show",
    "start": "138560",
    "end": "144400"
  },
  {
    "text": "the technical eliteness here just oozes and uh i don't think you're gonna find that at any other show",
    "start": "144720",
    "end": "150560"
  },
  {
    "text": "you know if you're an admin and you don't want to learn anything new go to sans but if you're really hardcore come to black hat",
    "start": "150560",
    "end": "157840"
  },
  {
    "text": "okay so my talk is advanced buffer overflow technique there are some techniques i'm not going to actually cover in the talk",
    "start": "161200",
    "end": "167280"
  },
  {
    "text": "that are covered in a chapter that i just recently wrote oh yes thank you ryan russell ryan",
    "start": "167280",
    "end": "173680"
  },
  {
    "text": "russell got this book out in an incredible amount of time uh and i wrote one one chapter i had the",
    "start": "173680",
    "end": "179599"
  },
  {
    "text": "uh the opportunity thanks to ryan there's a couple other really cool people you recognize rainforest puppy mudge",
    "start": "179599",
    "end": "187120"
  },
  {
    "text": "oliver caesar this is a really good book so anyways security focus at their booth i think",
    "start": "187120",
    "end": "193920"
  },
  {
    "text": "they have some and i brought three copies so i'll ask like some really insane question somewhere during the talk and if you can answer it i'll give",
    "start": "193920",
    "end": "199680"
  },
  {
    "text": "you a copy it'll be cool what's that the title oh i'm sorry yeah i'm going",
    "start": "199680",
    "end": "205360"
  },
  {
    "text": "too fast here hack-proofing your network the title changed like 10 times in the time it was being written so i kind of",
    "start": "205360",
    "end": "210799"
  },
  {
    "text": "stopped paying attention to that okay let me get started",
    "start": "210799",
    "end": "216239"
  },
  {
    "text": "uh there's kind of three parts to this talk the first one i'm just going to kind of go over some some ideas about",
    "start": "216239",
    "end": "222000"
  },
  {
    "start": "221000",
    "end": "221000"
  },
  {
    "text": "buffer overflows i'm mainly going to try to make the point that buffer overflows are kind of like",
    "start": "222000",
    "end": "227680"
  },
  {
    "text": "weapons and they have a certain amount of um abstraction to them you can you can have",
    "start": "227680",
    "end": "233200"
  },
  {
    "text": "an injection part of an attack that's separated from the payload part of an attack so it's kind of like a missile",
    "start": "233200",
    "end": "238879"
  },
  {
    "text": "and a warhead so i'll talk a little bit about that then we're going to get a little more technical and talk about",
    "start": "238879",
    "end": "245200"
  },
  {
    "text": "injecting code and then we're going to start talking about payloads and some of the tricks you're",
    "start": "245200",
    "end": "250319"
  },
  {
    "text": "going to have to pull to make a payload work this is this is geared towards people who program so hopefully you're not scared of seeing some assembly",
    "start": "250319",
    "end": "256160"
  },
  {
    "text": "language um so one of the things definitely important here is size restrictions so",
    "start": "256160",
    "end": "262320"
  },
  {
    "text": "we're going to focus on that too as you get smaller and smaller payloads you obviously you're going to have to start writing tighter and tighter simply",
    "start": "262320",
    "end": "268240"
  },
  {
    "text": "language and pull in some really insane tricks um and there's been some material published on this uh dildog was one person who",
    "start": "268240",
    "end": "274560"
  },
  {
    "text": "wrote some really cool stuff showing how to exploit when inet dll which is loaded into memory for an",
    "start": "274560",
    "end": "280000"
  },
  {
    "text": "internet information server and i think there's like one call and it will download a file from anywhere on the internet so that's pretty cool and it",
    "start": "280000",
    "end": "286479"
  },
  {
    "text": "doesn't take very much room to code that so anyways there it is",
    "start": "286479",
    "end": "292080"
  },
  {
    "text": "let's talk about exploits what is an exploit it's obviously a bug",
    "start": "292080",
    "end": "297440"
  },
  {
    "text": "in software um obviously you all understand that there's a lot of bugs every single day",
    "start": "297440",
    "end": "303600"
  },
  {
    "text": "being posted just look at uh ussr labs for instance i don't think the guy ever sleeps",
    "start": "303600",
    "end": "309280"
  },
  {
    "text": "it's like two or three a day almost right not quite that bad but yeah so basically there are people out there who",
    "start": "309280",
    "end": "315600"
  },
  {
    "text": "just download software all day long and run automated scripts against them to find things like buffer overflows and if",
    "start": "315600",
    "end": "322240"
  },
  {
    "text": "you've ever done this yourself you will suddenly be successful you'll find a buffer overflow i've downloaded stuff off of the net and",
    "start": "322240",
    "end": "328240"
  },
  {
    "text": "found it within 10 minutes so it's ridiculous the code quality out there is terrible so this is going to be a problem for a",
    "start": "328240",
    "end": "334720"
  },
  {
    "text": "long time the simplest form of buffer overflow is a stack based overflow but i'm also going to talk about heap based overflows",
    "start": "334720",
    "end": "343280"
  },
  {
    "text": "stack based overflows there's almost no excuse for them if you have them in your software it's because you're a bad coder",
    "start": "343280",
    "end": "349600"
  },
  {
    "text": "you need to learn how to not do that anymore store copy needs to go away and it's not actually the programmer's fault",
    "start": "349600",
    "end": "355199"
  },
  {
    "text": "you know it's more i think libsy's fault for giving me that that function in the first place it makes me lazy and i just want to use it",
    "start": "355199",
    "end": "362240"
  },
  {
    "text": "so okay let's say i have an exploit and i run it against a box what can happen i can crash the machine if i'm",
    "start": "364400",
    "end": "371280"
  },
  {
    "text": "you know i've never written a buffer overflow before and i'm going into a system that's probably the first thing that's going to happen i'm going to crash the machine",
    "start": "371280",
    "end": "377280"
  },
  {
    "text": "or the application windows and t has exception handling and separated processes so the the best you",
    "start": "377280",
    "end": "383680"
  },
  {
    "text": "can hope for is usually just to crash the process um so that's the most common type of well you know result of an attack",
    "start": "383680",
    "end": "391199"
  },
  {
    "text": "some programs have what's called exception handling does anybody here know what exception handling is",
    "start": "391199",
    "end": "397360"
  },
  {
    "text": "okay basically if i screw up something really bad i can kill my thread or i can crawl back on my stack and find some place",
    "start": "397360",
    "end": "403600"
  },
  {
    "text": "that's not corrupted and just start there so exception handling is really cool some people suffer from the illusion",
    "start": "403600",
    "end": "409360"
  },
  {
    "text": "that exception handling somehow prevents stack based overflows from working that's simply not true",
    "start": "409360",
    "end": "414560"
  },
  {
    "text": "where is the exception handler stored when you have exception handling on the stack so if i",
    "start": "414560",
    "end": "420000"
  },
  {
    "text": "overflow my stack far enough what's going to happen i'm going to overwrite the exception handler so that's actually making it easier for me to exploit it",
    "start": "420000",
    "end": "426720"
  },
  {
    "text": "actually because i don't have to guess the return address i just have to know that i overwrote the exception handler and then i cause it eip to jump anywhere",
    "start": "426720",
    "end": "433039"
  },
  {
    "text": "i want you know way over there and it's going to cause and throw an exception and then boom my code's going to run so exception handling is not a way to",
    "start": "433039",
    "end": "439599"
  },
  {
    "text": "prevent buffer overflows um mobile code assuming it's a successful",
    "start": "439599",
    "end": "444960"
  },
  {
    "text": "attack mobile code can get into your system mobile code is a reality um",
    "start": "444960",
    "end": "450639"
  },
  {
    "text": "network worms are reality viruses obviously been around for a long time but you don't seem to see a lot of",
    "start": "450639",
    "end": "456560"
  },
  {
    "text": "worm stuff happening but it's going on file access you know denial service attack these are all things that you are",
    "start": "456560",
    "end": "462800"
  },
  {
    "text": "all familiar with i'm sure if you study bugs if you go back through",
    "start": "462800",
    "end": "468000"
  },
  {
    "text": "bug track or say 8 lgm or anything that's a really old list and you just go back in time",
    "start": "468000",
    "end": "473919"
  },
  {
    "text": "and look at all the bugs you'll see that they keep repeating themselves over and over and over again there's these classes of attacks that just keep",
    "start": "473919",
    "end": "480319"
  },
  {
    "text": "working and it seems like nobody's ever learning about how to fix it my advice to you is if especially if",
    "start": "480319",
    "end": "486080"
  },
  {
    "text": "you're an organization that does consider security consulting or architecture stuff is make sure you do code review and if you don't have the",
    "start": "486080",
    "end": "492879"
  },
  {
    "text": "skills in house to do that farm it out to somebody else code is the key",
    "start": "492879",
    "end": "498639"
  },
  {
    "text": "i believe that things like firewalls will eventually go away because some at some point in the",
    "start": "498639",
    "end": "504000"
  },
  {
    "text": "future these people are going to figure out how to write their applications so we don't need to have firewalls in front of them they're going to be secure natively",
    "start": "504000",
    "end": "511919"
  },
  {
    "text": "but so anyway some of these classes are improper filtering if you've ever looked at anything rainforest puppies ever done you can see",
    "start": "511919",
    "end": "518159"
  },
  {
    "text": "him playing some pretty serious games with just content going in over an http session balance checking is what we're going to",
    "start": "518159",
    "end": "524080"
  },
  {
    "text": "look at today bad authentication if you watch the firewall one talk",
    "start": "524080",
    "end": "529120"
  },
  {
    "text": "earlier today i don't need i say more and impersonation",
    "start": "529120",
    "end": "534760"
  },
  {
    "start": "535000",
    "end": "535000"
  },
  {
    "text": "okay so one of the main points i want to make in this first part is that the how to get into a system is different",
    "start": "535519",
    "end": "540720"
  },
  {
    "text": "than what you want to do once you're there so there's actually two parts to a buffer overflow the first part is what i call an",
    "start": "540720",
    "end": "546399"
  },
  {
    "text": "injection vector and it will depend on the machine you're attacking there the",
    "start": "546399",
    "end": "551920"
  },
  {
    "text": "software version whether it's exchange you know whether it's you know some sort of rpc service whatever it is",
    "start": "551920",
    "end": "558800"
  },
  {
    "text": "how i get my code in there is going to kind of differ for each one of those situations but the payload is not i can",
    "start": "558800",
    "end": "564560"
  },
  {
    "text": "have the same exact payload plug in like a little module to any of these injection vectors so if i was a military",
    "start": "564560",
    "end": "570320"
  },
  {
    "text": "organization i would have a little group of goons over here programming all day for all the different uh versions of",
    "start": "570320",
    "end": "576240"
  },
  {
    "text": "software that are out there that i want to attack then i have a separate separate group of goons over here making different payloads payloads to perform",
    "start": "576240",
    "end": "583120"
  },
  {
    "text": "denali service attacks payloads to shut down entire subnets payloads to install root kits on boxes payloads to make the",
    "start": "583120",
    "end": "590080"
  },
  {
    "text": "arp tables change on this box over here so that i can route icmp redirect messages over there and cause that",
    "start": "590080",
    "end": "595440"
  },
  {
    "text": "switch to stop working all these things are possible with a payload",
    "start": "595440",
    "end": "601200"
  },
  {
    "text": "the cool part about this is that i can choose my payload depending on the effect that i want",
    "start": "601200",
    "end": "606640"
  },
  {
    "text": "i mean it really is like a weapon",
    "start": "606640",
    "end": "610080"
  },
  {
    "text": "that payload is limited only by your imagination i'm sure you guys can think of all kinds of cool stuff to do with",
    "start": "612560",
    "end": "617600"
  },
  {
    "text": "one so i think the next part of the talk is going to be about injection vectors some of the things you'll deal with when",
    "start": "617600",
    "end": "623040"
  },
  {
    "text": "you're trying to find those and exploit them",
    "start": "623040",
    "end": "629160"
  },
  {
    "start": "624000",
    "end": "624000"
  },
  {
    "text": "injection vectors are very very specific if i change service packs on nt",
    "start": "637519",
    "end": "642640"
  },
  {
    "text": "an injection vector that worked yesterday might not work today different versions of servers like if",
    "start": "642640",
    "end": "648240"
  },
  {
    "text": "exchange you know x.1 versus x.2 it's going to change perhaps",
    "start": "648240",
    "end": "653440"
  },
  {
    "text": "so it's dependent on your target depending on your operating system depending on your application version",
    "start": "653440",
    "end": "659519"
  },
  {
    "text": "it's dependent on things like whether or not there's a content filter between me and the target if there's a content",
    "start": "659519",
    "end": "664880"
  },
  {
    "text": "filter in there that's stripping out certain characters well those are certain assembly language instructions i can no longer run",
    "start": "664880",
    "end": "671040"
  },
  {
    "text": "i mean all i care about is that it's a hex decimal value and it's going to be interpreted as something once against the other side",
    "start": "671040",
    "end": "677200"
  },
  {
    "text": "the man is caesar when it comes to figuring out ways to sneak through that kind of stuff",
    "start": "677200",
    "end": "683040"
  },
  {
    "text": "so it's protocol dependent and encoding dependent",
    "start": "683040",
    "end": "688040"
  },
  {
    "text": "the payload as i just pointed out is separate but it still will depend on the architecture obviously an x86 payload is",
    "start": "689120",
    "end": "696160"
  },
  {
    "text": "not going to work on a solaris box well excuse me a spark box but there actually are ways to make a",
    "start": "696160",
    "end": "704079"
  },
  {
    "text": "payload that will do both but i'm not going to talk about that today so a payload can be like a virus it's",
    "start": "704079",
    "end": "709760"
  },
  {
    "text": "just mobile code that gets in the system does whatever it wants so if you've ever seen a virus do anything just know that a payload could",
    "start": "709760",
    "end": "715519"
  },
  {
    "text": "probably do exactly the same thing and once it's established on the machine it can start spreading by any means",
    "start": "715519",
    "end": "721839"
  },
  {
    "text": "it could spread like a virus and just go on the files on your network over your file shares or on your local machine",
    "start": "721839",
    "end": "727279"
  },
  {
    "text": "or it could be a little smarter and sniff passwords maybe it has a built-in version of a smb sniff and it starts cracking hashes",
    "start": "727279",
    "end": "734560"
  },
  {
    "text": "that's obviously quite easy to do as you've seen loftrack do it quite a lot",
    "start": "734560",
    "end": "739600"
  },
  {
    "text": "i could obviously just shut the machine down denial service create a remote shell this is the most common thing you've probably ever seen with buffer",
    "start": "739680",
    "end": "745279"
  },
  {
    "text": "overflow and it's probably because it's one of the most useful barnaby jack wrote a great article in frac55 for basically writing one of",
    "start": "745279",
    "end": "752720"
  },
  {
    "text": "these types of payloads for nt that would spawn a remote shell and give you access to it now i'm not using anything",
    "start": "752720",
    "end": "759519"
  },
  {
    "text": "weird not using netcat it just actually loaded up windsock bound all the right ports and spawned cmd.exe and latched on",
    "start": "759519",
    "end": "768079"
  },
  {
    "text": "to standard in standard out it's really an elite piece of work that he did there",
    "start": "768079",
    "end": "773440"
  },
  {
    "text": "so if you haven't seen that you should definitely download frag55 worm or a root kit",
    "start": "773440",
    "end": "780000"
  },
  {
    "start": "780000",
    "end": "780000"
  },
  {
    "text": "if you want to get a root kit go to rootkit.com and download it if i was a military organization or",
    "start": "780000",
    "end": "786399"
  },
  {
    "text": "somebody who was really serious about taking down a site or a network i would first do a scan and i would find out all",
    "start": "786399",
    "end": "791839"
  },
  {
    "text": "the qualified hosts for every particular injection vector in my in my collection so if all my goons over",
    "start": "791839",
    "end": "797440"
  },
  {
    "text": "there have built about uh let's say 135 different injection vectors for 135",
    "start": "797440",
    "end": "802720"
  },
  {
    "text": "different qualified hosts i could scan a network and maybe you know 10 of those injection vectors i could find work then",
    "start": "802720",
    "end": "808320"
  },
  {
    "text": "i could match those up with the payloads that i want for the desired effect and boom we're off and running i can hit one button and just spread",
    "start": "808320",
    "end": "815839"
  },
  {
    "start": "817000",
    "end": "817000"
  },
  {
    "text": "injecting into a system there's basically two types content based and buffer overflow",
    "start": "818240",
    "end": "824320"
  },
  {
    "text": "the key difference is that when you do a buffer overflow the application loses control",
    "start": "824320",
    "end": "830399"
  },
  {
    "text": "content-based attacks not neces do not leave the process out of control so that's the key process is in control",
    "start": "830399",
    "end": "837519"
  },
  {
    "text": "if i'm using content-based attacks i'm telling the remote system to do things that it shouldn't do i'm kind of bending",
    "start": "837519",
    "end": "843120"
  },
  {
    "text": "its arm but i'm not pulling its arms off i'm telling it maybe to write to a file and the only reason i can write to it is",
    "start": "843120",
    "end": "848320"
  },
  {
    "text": "because some idiot microsoft forgot to change the access control list on the file during install",
    "start": "848320",
    "end": "853600"
  },
  {
    "text": "buffer overflow is a completely different situation the process loses complete control it's now running code that i put there",
    "start": "853600",
    "end": "861600"
  },
  {
    "text": "and i'll show you exactly how that works",
    "start": "861600",
    "end": "865880"
  },
  {
    "text": "i'll skip this one actually i'm gonna go through these",
    "start": "872720",
    "end": "877760"
  },
  {
    "start": "874000",
    "end": "874000"
  },
  {
    "text": "slides um there's some reports that were released recently well actually not recently but they talk about",
    "start": "877760",
    "end": "886000"
  },
  {
    "text": "who has been writing code i'm trying to get to my slides here okay",
    "start": "886000",
    "end": "892320"
  },
  {
    "text": "if you don't believe that there are military organizations already doing this then you're mistaken there's actual",
    "start": "892320",
    "end": "897600"
  },
  {
    "text": "reports released by the united states military that state that they are the cuban military the russian kgb",
    "start": "897600",
    "end": "904639"
  },
  {
    "text": "as as early as 91 they have a report of them doing this and then a couple of e and y reports",
    "start": "904639",
    "end": "910000"
  },
  {
    "start": "907000",
    "end": "907000"
  },
  {
    "text": "just you know reviewing companies asking them uh what's been going on and they've all",
    "start": "910000",
    "end": "915199"
  },
  {
    "text": "said so about at least 50 percent of them have reported incidents of this occurring viruses or other types of",
    "start": "915199",
    "end": "920800"
  },
  {
    "text": "exploits being run against them the one report by ncsa reports that it",
    "start": "920800",
    "end": "927600"
  },
  {
    "text": "costs about eight grand to recover from a single incident that's an average cost so obviously this is a pretty big deal",
    "start": "927600",
    "end": "932800"
  },
  {
    "text": "and it's costing corporations a lot of money does everybody here heard of the morris",
    "start": "932800",
    "end": "938839"
  },
  {
    "text": "worm yeah so it's probably the most famous worm ever it shut down most of the internet but the internet was pretty",
    "start": "938839",
    "end": "945120"
  },
  {
    "text": "small back then so actually wasn't that many hosts but it was really effective because there was the same software",
    "start": "945120",
    "end": "950560"
  },
  {
    "text": "installed everywhere it exploited a buffer overflow and in finger d i believe and then something",
    "start": "950560",
    "end": "956480"
  },
  {
    "text": "else in sun mail and spread by both of those means well today we also still have this",
    "start": "956480",
    "end": "961759"
  },
  {
    "text": "situation it's just a much larger scale we have wintel architecture with iis or take your you know take your pick",
    "start": "961759",
    "end": "968959"
  },
  {
    "text": "uh apache so if you take both of those together you've probably covered most of the web server market and it's all the same software running",
    "start": "968959",
    "end": "975440"
  },
  {
    "text": "everywhere so what happens when somebody you know like remember when ei found that iis hack",
    "start": "975440",
    "end": "981040"
  },
  {
    "text": "that was pretty big deal i mean there was a huge portion in the internet that was vulnerable to that if somebody had been on the ball not released that to",
    "start": "981040",
    "end": "986880"
  },
  {
    "text": "the public and just done it on their own they probably could have shut down most of the e-commerce sites on the net",
    "start": "986880",
    "end": "992160"
  },
  {
    "text": "they could have done a lot of damage so we're putting our trust into some pretty crazy stuff in my opinion right",
    "start": "992160",
    "end": "998160"
  },
  {
    "text": "now i think people are suffering from illusions about how vulnerable they really are",
    "start": "998160",
    "end": "1003440"
  },
  {
    "text": "um in 89 there was another worm called wank that hit nasa it took two weeks to clean it up and before it got out of",
    "start": "1003440",
    "end": "1009519"
  },
  {
    "text": "there it managed to spread to hep net which is the high energy physics net doe so it got out of the gateway",
    "start": "1009519",
    "end": "1016959"
  },
  {
    "start": "1015000",
    "end": "1015000"
  },
  {
    "text": "okay so how do we get our payload into the",
    "start": "1018000",
    "end": "1023839"
  },
  {
    "text": "system there are a couple ways stack based overflow is the most common",
    "start": "1023839",
    "end": "1029280"
  },
  {
    "text": "heat based overflow is much more difficult but we've seen examples of it",
    "start": "1029280",
    "end": "1035600"
  },
  {
    "text": "we must control the value of the instruction pointer that is the goal so does everybody here",
    "start": "1035600",
    "end": "1041438"
  },
  {
    "text": "know what an instruction pointer is okay there's a processor obviously in your",
    "start": "1041439",
    "end": "1047120"
  },
  {
    "text": "computer and and it keeps track of certain things using registers and one of these registers points to the",
    "start": "1047120",
    "end": "1052320"
  },
  {
    "text": "location and code memory that's currently being executed and every time it executes an instruction it increments",
    "start": "1052320",
    "end": "1057520"
  },
  {
    "text": "by one or however many it takes to execute that instruction and continues just walking along in the code memory we",
    "start": "1057520",
    "end": "1063919"
  },
  {
    "text": "want to change that to point something that we controlled we want to get some code into the system somewhere and make eip which is",
    "start": "1063919",
    "end": "1070400"
  },
  {
    "text": "an instruction pointer under intel point to it",
    "start": "1070400",
    "end": "1076840"
  },
  {
    "start": "1078000",
    "end": "1078000"
  },
  {
    "text": "the challenges um most importantly is size if we have a very very small size",
    "start": "1080720",
    "end": "1087440"
  },
  {
    "text": "we can't really do a whole lot there's been plenty of buffer overflows which have been posted",
    "start": "1087440",
    "end": "1093280"
  },
  {
    "text": "to bug track that had no actual corresponding exploit with them because they didn't have enough room to write",
    "start": "1093280",
    "end": "1098480"
  },
  {
    "text": "one however you'd be amazed at what you can get away with with just 100 bytes of",
    "start": "1098480",
    "end": "1103679"
  },
  {
    "text": "memory most assembly instructions only take a couple bites two",
    "start": "1103679",
    "end": "1109039"
  },
  {
    "text": "if they have an address associated with them maybe up to five or six but that's about it so you can fit a lot of instructions in a hundred bytes",
    "start": "1109039",
    "end": "1117120"
  },
  {
    "text": "um if we're inject like i said injection and payload is two different things right but if they're living in the same",
    "start": "1117120",
    "end": "1122480"
  },
  {
    "text": "buffer like i'm injecting them all within the same string let's say then they can't step on each other that's another issue that we have to get",
    "start": "1122480",
    "end": "1128559"
  },
  {
    "text": "around and there's some ideas there another one is guessing offsets has",
    "start": "1128559",
    "end": "1134160"
  },
  {
    "text": "anybody here heard of this guessing the offset it's because under certain conditions you're not going to know",
    "start": "1134160",
    "end": "1139840"
  },
  {
    "text": "where your code is in memory so you have to guess where it is that's really really hard to do if you",
    "start": "1139840",
    "end": "1146720"
  },
  {
    "text": "can't disassemble it if you're sitting on a linux box and running gdb then guessing where it's",
    "start": "1146720",
    "end": "1152160"
  },
  {
    "text": "going to go is pretty easy but if you're from remote it's very very hard unless you know you",
    "start": "1152160",
    "end": "1157679"
  },
  {
    "text": "run it and duplicate it in your laboratory so there are some tricks to make this an easier process and i'm going to talk",
    "start": "1157679",
    "end": "1163679"
  },
  {
    "text": "about one of those and then obviously null characters has everybody here heard of the problem with null characters in a buffer overflow um",
    "start": "1163679",
    "end": "1170799"
  },
  {
    "text": "most of the time buffer overflow is going to happen because somebody didn't do a you know balance checking on something like a stir copy or an s printf or",
    "start": "1170799",
    "end": "1177039"
  },
  {
    "text": "something like that well unfortunately or fortunately these uh these um these",
    "start": "1177039",
    "end": "1182080"
  },
  {
    "text": "functions use a null character as a terminator so if i have a null in my attack string it's going to stop copying",
    "start": "1182080",
    "end": "1187200"
  },
  {
    "text": "it i'm going to end up with three quarters of a payload in there and that's not going to work very well so we have to get around the null",
    "start": "1187200",
    "end": "1192400"
  },
  {
    "text": "character problem incidentally that's not the only character that you can have problems",
    "start": "1192400",
    "end": "1198080"
  },
  {
    "text": "with i should actually mention this i'm going to talk about null only but there are plenty of other characters",
    "start": "1198080",
    "end": "1203360"
  },
  {
    "text": "that can have problems especially if you're going through a content filter if you're sending a url there's certain characters which are invalid",
    "start": "1203360",
    "end": "1209679"
  },
  {
    "text": "um if you're mime encoding your attack there's only certain characters you can use",
    "start": "1209679",
    "end": "1215360"
  },
  {
    "text": "so actually some friends of mine this morning were telling me about some new ways to get around that it's pretty cool",
    "start": "1215360",
    "end": "1220400"
  },
  {
    "start": "1220000",
    "end": "1220000"
  },
  {
    "text": "actually hey where's barnaby didn't you tell me something this",
    "start": "1220400",
    "end": "1225840"
  },
  {
    "text": "morning about where you inserted something and you needed a null but it wasn't a null when you inserted it but the program inserted and replaced nulls",
    "start": "1225840",
    "end": "1232000"
  },
  {
    "text": "for you at each location for something like that",
    "start": "1232000",
    "end": "1236640"
  },
  {
    "text": "and i needed the offset um in the middle of my payload and it actually replaced that character with a",
    "start": "1237840",
    "end": "1243919"
  },
  {
    "text": "null so i could jump to my code so it's kind of doing some of the work for you yeah",
    "start": "1243919",
    "end": "1249840"
  },
  {
    "text": "okay so does everybody here does anybody here know how a stack overflow actually works how by",
    "start": "1250320",
    "end": "1256240"
  },
  {
    "text": "overflowing the stack i'm able to get to the instruction pointer to point something that it shouldn't",
    "start": "1256240",
    "end": "1262400"
  },
  {
    "text": "nope all right the stack is doing a lot of stuff okay",
    "start": "1262400",
    "end": "1270559"
  },
  {
    "text": "it's basically three areas of memory which are important in a process the code memory the heap memory and the",
    "start": "1270559",
    "end": "1276640"
  },
  {
    "text": "stack and the stack is used for housekeeping every time a function is called the",
    "start": "1276640",
    "end": "1282559"
  },
  {
    "text": "stack is quote unquote grown in size to support all the local automatic variables for this function",
    "start": "1282559",
    "end": "1288960"
  },
  {
    "text": "and things like where it was in memory the last function that was called all this weird housekeeping data is stored",
    "start": "1288960",
    "end": "1294480"
  },
  {
    "text": "on the stack so as i'm running around i'm saying my process now i'm a process i'm running",
    "start": "1294480",
    "end": "1300080"
  },
  {
    "text": "and i'm doing this now i'm going to do this now i'm going to go over here and do this now i'm doing this well i'm done with this now so i got to get to back to",
    "start": "1300080",
    "end": "1306000"
  },
  {
    "text": "where i was how do i remember that that was where i was it's because the stack tells me that and i can go",
    "start": "1306000",
    "end": "1311360"
  },
  {
    "text": "back all the way and do something else now well we're going to cause that to not work anymore",
    "start": "1311360",
    "end": "1318799"
  },
  {
    "text": "the other thing is that if i have housekeeping on the data or excuse me on the stack any data that i'm inserting in",
    "start": "1318799",
    "end": "1324159"
  },
  {
    "text": "a buffer has to be able to override it so if my housekeeping data is over there and my buffers are growing that way",
    "start": "1324159",
    "end": "1331679"
  },
  {
    "text": "i'm not going to be able to override it it's going to go the wrong direction fortunately for us under windows and t",
    "start": "1331679",
    "end": "1337200"
  },
  {
    "text": "intel x86 and the way the stack works buffers grow towards the housekeeping data",
    "start": "1337200",
    "end": "1344360"
  },
  {
    "start": "1346000",
    "end": "1346000"
  },
  {
    "text": "all right so this is my cool little animated slide my instruction pointer is pulling off to stat or extrude me to code memory",
    "start": "1346320",
    "end": "1353919"
  },
  {
    "text": "over here so this means it's running some code over here it's actually there's a subroutine okay and we're running and",
    "start": "1353919",
    "end": "1360000"
  },
  {
    "text": "stepping through it and i'm going to call another subroutine so i take the current instruction",
    "start": "1360000",
    "end": "1365520"
  },
  {
    "text": "pointer out of the register and put it on the stack see how that works right there under the",
    "start": "1365520",
    "end": "1370880"
  },
  {
    "text": "stack now",
    "start": "1370880",
    "end": "1375000"
  },
  {
    "text": "now i'm going to do something in a new subroutine so i'm actually making a call and i'm moving to somewhere else in code",
    "start": "1376799",
    "end": "1381840"
  },
  {
    "text": "memory so now i'm pointing to a new function well that function needs room okay it has variables that are local to this",
    "start": "1381840",
    "end": "1390240"
  },
  {
    "text": "subroutine that need to be handled so those are allocated on the stack so here's how it looks",
    "start": "1390240",
    "end": "1396559"
  },
  {
    "text": "we grow the stack okay now we're going to play around our subroutines running and it's going to be",
    "start": "1396559",
    "end": "1402000"
  },
  {
    "text": "doing stuff up here in the stack memory and when it's done that's going to go away",
    "start": "1402000",
    "end": "1409280"
  },
  {
    "text": "like that and the ip is going to go back into there and we'll be back at our previous subroutine that's how it's",
    "start": "1409280",
    "end": "1414799"
  },
  {
    "text": "supposed to work okay so i make the call ip goes on the stack i jump to a new code location",
    "start": "1414799",
    "end": "1421919"
  },
  {
    "text": "allocate some more memory it's not really allocating memory we're just altering the value in the stack",
    "start": "1421919",
    "end": "1427840"
  },
  {
    "text": "pointer this is why actually it's very fast so the stack pointer gets updated and now points to the top of the stack",
    "start": "1427840",
    "end": "1435120"
  },
  {
    "text": "that's it so everybody kind of understand this i can go on to the next slide okay great",
    "start": "1435120",
    "end": "1441840"
  },
  {
    "text": "stack overflow okay so obviously the ip was pushed onto the stack so i'm going to show that here's our stack and i",
    "start": "1441840",
    "end": "1448720"
  },
  {
    "text": "wrote some memory addresses here this is what it would look like on nt if you're on linux you would not see zero zero",
    "start": "1448720",
    "end": "1454080"
  },
  {
    "text": "four zero two zero one four you'd see something more like i don't know bb something or seven seven",
    "start": "1454080",
    "end": "1459679"
  },
  {
    "text": "something i don't play a whole lot on linux so but i do know that it's a higher address",
    "start": "1459679",
    "end": "1464720"
  },
  {
    "text": "okay so i store my ip and my stack grows up now i have things that are going to happen up here the",
    "start": "1464720",
    "end": "1470640"
  },
  {
    "text": "subroutine is going to use this memory well what happens if i'm filling a buffer let's say i'm storing 10",
    "start": "1470640",
    "end": "1476799"
  },
  {
    "text": "characters but it doesn't do bounce checking well the stack grows down my buffers excuse me grow down when they're filled",
    "start": "1476799",
    "end": "1483039"
  },
  {
    "text": "so i'm filling a buffer if it doesn't get stopped guess what it just did overwrote the housekeeping data",
    "start": "1483039",
    "end": "1491120"
  },
  {
    "text": "on that page a what why is there an execute production bit on the stack table",
    "start": "1491120",
    "end": "1499760"
  },
  {
    "text": "that's a very good question in fact i believe there's some oh the question was why is there an",
    "start": "1499840",
    "end": "1505120"
  },
  {
    "text": "execute bit on the stack page um let me explain how this works a little",
    "start": "1505120",
    "end": "1510480"
  },
  {
    "text": "bit remember i was talking about stack heap and code well the computer keeps track of all these",
    "start": "1510480",
    "end": "1517200"
  },
  {
    "text": "quote unquote pages of memory and it keeps you know how files have read write and execute permissions well",
    "start": "1517200",
    "end": "1523200"
  },
  {
    "text": "so do pages of memory and uh this fellow over here is pointing out that if the execute bit wasn't set on the stack page",
    "start": "1523200",
    "end": "1530640"
  },
  {
    "text": "would i be able to execute code does anybody know the answer to this question no you would not be able to execute code",
    "start": "1530640",
    "end": "1538799"
  },
  {
    "text": "yeah that's actually",
    "start": "1539600",
    "end": "1543039"
  },
  {
    "text": "your code which is elsewhere you you don't have to execute the code",
    "start": "1555039",
    "end": "1560480"
  },
  {
    "text": "in the stack well that's true you do not have to execute the code in the stack",
    "start": "1560480",
    "end": "1566400"
  },
  {
    "text": "that was in the executable or a library because your heap doesn't need execute",
    "start": "1566640",
    "end": "1571840"
  },
  {
    "text": "permission either well if you're storing your your code on the heap that wants to be executed then",
    "start": "1571840",
    "end": "1577120"
  },
  {
    "text": "you do have to have execute permission i don't understand that then if you could get the microphone so he can",
    "start": "1577120",
    "end": "1582799"
  },
  {
    "start": "1578000",
    "end": "1578000"
  },
  {
    "text": "explain this the operating system loads the",
    "start": "1582799",
    "end": "1588960"
  },
  {
    "text": "executable it can load code and then set the clear the right bits on",
    "start": "1588960",
    "end": "1595200"
  },
  {
    "text": "the code give you heat pages which are only for data",
    "start": "1595200",
    "end": "1600320"
  },
  {
    "text": "code won't be loaded in there and those will not have execute permission bits set",
    "start": "1600320",
    "end": "1606000"
  },
  {
    "text": "same for the stack so you end up with all code loaded by a",
    "start": "1606000",
    "end": "1611600"
  },
  {
    "text": "privileged operating system all data that you can touch not",
    "start": "1611600",
    "end": "1617279"
  },
  {
    "text": "executable all code not writeable all right so you're familiar with like",
    "start": "1617279",
    "end": "1623200"
  },
  {
    "text": "these stack protection systems executable stack patches and things like this is something the operating system",
    "start": "1623200",
    "end": "1628400"
  },
  {
    "text": "would do some of the stackguard compilers do something to the compiled code rather",
    "start": "1628400",
    "end": "1634320"
  },
  {
    "text": "than the operating system right okay okay so i'm going to move on here",
    "start": "1634320",
    "end": "1641840"
  },
  {
    "text": "okay so everybody understands i can override this housekeeping data correct",
    "start": "1647840",
    "end": "1653480"
  },
  {
    "text": "this this like pink area here i'm using to indicate that there's some housekeeping",
    "start": "1655520",
    "end": "1660720"
  },
  {
    "text": "data stored there it would be for instance the return address of the so i can go back to the previous function",
    "start": "1660720",
    "end": "1666080"
  },
  {
    "text": "that i was just executing i think i think i can explain why the stack is set",
    "start": "1666080",
    "end": "1671679"
  },
  {
    "text": "executable in older operating systems it actually was not executable",
    "start": "1671679",
    "end": "1676880"
  },
  {
    "text": "um correct me if i'm wrong",
    "start": "1676880",
    "end": "1681720"
  },
  {
    "text": "here we go correct me if i'm wrong um some older operating systems had the the stack non-executable",
    "start": "1684320",
    "end": "1691279"
  },
  {
    "text": "and um that was changed to make the stack executable and i believe the reason for the change was just a",
    "start": "1691279",
    "end": "1696799"
  },
  {
    "text": "performance hit that they had to check the the operating system at a check to make sure that memory that it was using was",
    "start": "1696799",
    "end": "1703600"
  },
  {
    "text": "or was not executable and the changes made for performance reasons and i think now we're stuck",
    "start": "1703600",
    "end": "1709520"
  },
  {
    "text": "um yeah i'm not too sure about that to be honest i i still am not actually convinced",
    "start": "1709520",
    "end": "1714640"
  },
  {
    "text": "about that or other argument you made because when i was playing around with page tables um there is a bit which you",
    "start": "1714640",
    "end": "1720080"
  },
  {
    "text": "can remove for execute and you cannot load that into eip it will not actually throw an exception it'll trap",
    "start": "1720080",
    "end": "1726320"
  },
  {
    "text": "so but anyways i'm not a god when it comes to protecting against this so",
    "start": "1726320",
    "end": "1731679"
  },
  {
    "text": "other people are probably a lot more technically advanced in the protection stuff",
    "start": "1731679",
    "end": "1737720"
  },
  {
    "text": "okay so the problem with null i want to move on here and talk about this the problem with the null character obviously is that if a null terminated",
    "start": "1738799",
    "end": "1744720"
  },
  {
    "text": "string is passed through something like a stir copy it's going to stop copying when it hits the null so same diagram as before i",
    "start": "1744720",
    "end": "1752159"
  },
  {
    "text": "store my housekeeping data and then my stack grows and i start filling my buffer which goes back",
    "start": "1752159",
    "end": "1757760"
  },
  {
    "text": "towards the housekeeping data and i hit a null character and it stops so i didn't make it i didn't make it to the",
    "start": "1757760",
    "end": "1763200"
  },
  {
    "text": "null or excuse me to the housekeeping data obviously then the null must be passed",
    "start": "1763200",
    "end": "1769360"
  },
  {
    "text": "the housekeeping data store my return address move up go down and boom",
    "start": "1769360",
    "end": "1775760"
  },
  {
    "text": "everybody see how that works okay now i have to make a little trip and",
    "start": "1775760",
    "end": "1782000"
  },
  {
    "start": "1779000",
    "end": "1779000"
  },
  {
    "text": "explain the difference between little and big endian so anybody has heard of this before obviously",
    "start": "1782000",
    "end": "1788320"
  },
  {
    "text": "on an intel system numbers are stored in my opinion backwards so if i have an address that's zero zero",
    "start": "1788320",
    "end": "1794000"
  },
  {
    "text": "four zero one zero ff it's going to be stored in memory as ff one zero four zero zero zero",
    "start": "1794000",
    "end": "1800799"
  },
  {
    "text": "well what's the last character in this then it's a null right well if i want to inject that address",
    "start": "1800799",
    "end": "1806640"
  },
  {
    "text": "and put it onto the stack i could i'll show you this",
    "start": "1806640",
    "end": "1812240"
  },
  {
    "text": "let's say that's our return address that we stored and it has some value in it it's real",
    "start": "1812240",
    "end": "1817360"
  },
  {
    "text": "and true and supposed to be used we fill uh here's our buffer going up okay now we fill our buffer down",
    "start": "1817360",
    "end": "1824399"
  },
  {
    "text": "put in oh that's a really crappy slide sorry um it says zero c two zero four zero",
    "start": "1824399",
    "end": "1829520"
  },
  {
    "text": "zero zero if you can't read that so the last number there is zero zero",
    "start": "1829520",
    "end": "1834720"
  },
  {
    "text": "now does everybody see how um still with a null character i was able to put an address on there that was valid for the",
    "start": "1834720",
    "end": "1839919"
  },
  {
    "text": "stack addressing range because it's little endian does that make sense",
    "start": "1839919",
    "end": "1845840"
  },
  {
    "text": "okay great injection is complete we control the",
    "start": "1845840",
    "end": "1851760"
  },
  {
    "text": "instruction pointer now the question is what do we make it point to how do we make it do something useful for us",
    "start": "1851760",
    "end": "1859039"
  },
  {
    "text": "there's the address we saw that okay so we have to have a payload",
    "start": "1862399",
    "end": "1867520"
  },
  {
    "start": "1864000",
    "end": "1864000"
  },
  {
    "text": "we have to put it somewhere in memory so the most natural place to put it is in the buffer we just overflowed",
    "start": "1867520",
    "end": "1872880"
  },
  {
    "text": "so here's our stack again we store our return address",
    "start": "1872880",
    "end": "1879840"
  },
  {
    "text": "we fill the buffer with our new address there's our null so everybody see where the where the",
    "start": "1879840",
    "end": "1885840"
  },
  {
    "text": "payload's going to go it's going to go right into here",
    "start": "1885840",
    "end": "1892640"
  },
  {
    "text": "so we have a little room there to play we can put some instruction code in there does that make sense anybody not get",
    "start": "1892640",
    "end": "1898080"
  },
  {
    "text": "that okay because this is easy stuff we'll get into the hard stuff later",
    "start": "1898080",
    "end": "1904960"
  },
  {
    "text": "one of the problems we might have here is that we might not have a lot of room let's say the buffer is really small so",
    "start": "1904960",
    "end": "1910240"
  },
  {
    "text": "that's one of the disadvantages to doing it this way but this is the simplest way to do it one of the problems is we have to guess",
    "start": "1910240",
    "end": "1916159"
  },
  {
    "text": "an address though we have to put an address there at the bottom that we know will be on the stack so there's certain tricks we can pull to make that easier",
    "start": "1916159",
    "end": "1922640"
  },
  {
    "text": "to do so with that confined payload",
    "start": "1922640",
    "end": "1927760"
  },
  {
    "start": "1925000",
    "end": "1925000"
  },
  {
    "text": "we might have to pull certain tricks such as compressing our payload and then decompressing it somewhere else",
    "start": "1927760",
    "end": "1934799"
  },
  {
    "text": "another one is to use only functions which have been pre-loaded into the process that we're exploiting",
    "start": "1934799",
    "end": "1942240"
  },
  {
    "text": "in a process there's a whole bunch of functions which are already loaded dlls with exported functions that have been built into the import table",
    "start": "1942240",
    "end": "1949279"
  },
  {
    "text": "they're all out there in memory just waiting for us to use them there's no reason we have to write our own code if",
    "start": "1949279",
    "end": "1954559"
  },
  {
    "text": "the code's already there we just need to jump to it so if we use only preloaded functions we",
    "start": "1954559",
    "end": "1959760"
  },
  {
    "text": "reduce considerably the size of our payload one of the things we don't have to do is build jump tables i'm going to talk",
    "start": "1959760",
    "end": "1965919"
  },
  {
    "text": "about jump tables in a little bit here but the key is the usable functions must already be loaded we can hard code the",
    "start": "1965919",
    "end": "1971679"
  },
  {
    "text": "addresses or we can scan for the functions through memory and then find the addresses that's two ways the",
    "start": "1971679",
    "end": "1978080"
  },
  {
    "text": "hard-coded addresses are by far the easiest but they're also the most prone to fail if there's something like a new",
    "start": "1978080",
    "end": "1984159"
  },
  {
    "text": "version a hard-coded address is not always guaranteed to work because on some systems it may be there on some other",
    "start": "1984159",
    "end": "1990640"
  },
  {
    "text": "systems it may not be in the same place it might be four bytes over on the other way and if we even get out of alignment",
    "start": "1990640",
    "end": "1995840"
  },
  {
    "text": "by one byte or toast because it starts executing entirely different things it starts the intel processor will",
    "start": "1995840",
    "end": "2001760"
  },
  {
    "text": "interpret it entirely differently",
    "start": "2001760",
    "end": "2005640"
  },
  {
    "start": "2006000",
    "end": "2006000"
  },
  {
    "text": "so we don't have to do that we can use more stack if we want to we're growing down the stack in the stack you know it",
    "start": "2006880",
    "end": "2012720"
  },
  {
    "text": "could be really deep and we can just go go as far as we want so there's no reason just to stop right when we hit",
    "start": "2012720",
    "end": "2017760"
  },
  {
    "text": "the housekeeping data i can go right past it i can start filling it",
    "start": "2017760",
    "end": "2023360"
  },
  {
    "text": "right past it as anybody here know what the problem would be with this particular situation",
    "start": "2023360",
    "end": "2031240"
  },
  {
    "text": "well if it works okay the question or the statement was it would throw an exception um",
    "start": "2038000",
    "end": "2044000"
  },
  {
    "text": "it may throw an exception if i do it incorrectly if i do it correctly i'm still overwriting the housekeeping",
    "start": "2044000",
    "end": "2049679"
  },
  {
    "text": "data but i need to overwrite it with something else we can't obviously have a null character in it so we can't use",
    "start": "2049679",
    "end": "2056158"
  },
  {
    "text": "anything with that zero zero so we're going to have to pick a",
    "start": "2056159",
    "end": "2061200"
  },
  {
    "text": "different address it doesn't have a 0-0 that means somewhere that's not the stack if we're talking about windows and",
    "start": "2061200",
    "end": "2066560"
  },
  {
    "text": "t so i'm going to show you some tricks there",
    "start": "2066560",
    "end": "2072398"
  },
  {
    "text": "so i can have my null character but it's way past the housekeeping data i just can have no null in the address",
    "start": "2073200",
    "end": "2079839"
  },
  {
    "text": "now fortunately most of the dlls are mapped up into the 77 range under nt which means we can easily use addresses",
    "start": "2079839",
    "end": "2085679"
  },
  {
    "text": "up there but all these little weird tricks have to be used to get back to the stack we have to get back to the stack because that's where our payload",
    "start": "2085679",
    "end": "2092240"
  },
  {
    "text": "is our payload isn't up there in the memory 777. actually you know my slide kind of sucks here because it says",
    "start": "2092240",
    "end": "2099800"
  },
  {
    "text": "77402008 but that's under nt that would be incorrect we are stack lives at zero zero four zero two zero zero whatever",
    "start": "2099800",
    "end": "2107280"
  },
  {
    "text": "okay so understand we are on stack memory that means we have a null character",
    "start": "2107280",
    "end": "2112480"
  },
  {
    "text": "so we have to pick a different address but the advantage obviously is that first red rectangle up there would",
    "start": "2112480",
    "end": "2118560"
  },
  {
    "text": "be like our return address we can we can go all the way down the stack we",
    "start": "2118560",
    "end": "2124000"
  },
  {
    "text": "have all this room we still overwrite that value there but we just can't use a null",
    "start": "2124000",
    "end": "2129520"
  },
  {
    "text": "we do something that makes it return to our stack now my stack diagram here is",
    "start": "2129520",
    "end": "2134960"
  },
  {
    "text": "actually not accurate for nt but it definitely makes the point we wouldn't be jumping and moving back like",
    "start": "2134960",
    "end": "2140880"
  },
  {
    "text": "this but if we go down and now we can execute payload see much more room than before",
    "start": "2140880",
    "end": "2146880"
  },
  {
    "text": "we're using the room after our return address does that make sense so we have a lot of room here on the stack to play with if",
    "start": "2146880",
    "end": "2152960"
  },
  {
    "text": "we want it so under nt when does address contain a null character",
    "start": "2152960",
    "end": "2158800"
  },
  {
    "text": "if it's on the stack i call it a low lend address and it means it has a zero zero in front of it",
    "start": "2158800",
    "end": "2164480"
  },
  {
    "text": "we can use it but it really is going to like really reduce the size of our payload",
    "start": "2164480",
    "end": "2169599"
  },
  {
    "text": "a highland address has no zeros in the address i believe the stack under linux is in",
    "start": "2169599",
    "end": "2175119"
  },
  {
    "text": "highland so we don't have to worry about it and we have an almost unlimited payload size at that point",
    "start": "2175119",
    "end": "2181599"
  },
  {
    "text": "unlimited in the sense that we have enough to do pretty much what we want",
    "start": "2181599",
    "end": "2187079"
  },
  {
    "start": "2185000",
    "end": "2185000"
  },
  {
    "text": "so let's say we have a very large payload and our stack lives in lowland like under nt",
    "start": "2187520",
    "end": "2193040"
  },
  {
    "text": "and we need to have obviously a large payload so we can't use the null character we have to do something tricky",
    "start": "2193040",
    "end": "2199520"
  },
  {
    "text": "so one of the tricks of writing a payload would be to use a cpu register",
    "start": "2199520",
    "end": "2205440"
  },
  {
    "text": "cpu registers often contain values and addresses which point to the stack so in",
    "start": "2205440",
    "end": "2211599"
  },
  {
    "text": "the next example i'm going to show a register which is pointing to the stack let's say the d register is pointing to",
    "start": "2211599",
    "end": "2217520"
  },
  {
    "start": "2216000",
    "end": "2216000"
  },
  {
    "text": "the stack it was used for something recently maybe there was something stored there that we needed to you know",
    "start": "2217520",
    "end": "2223040"
  },
  {
    "text": "copy to and so it's stored in this register so what",
    "start": "2223040",
    "end": "2228480"
  },
  {
    "text": "we want to do is make d become ip right that's the that's the",
    "start": "2228480",
    "end": "2235200"
  },
  {
    "text": "theory so here's our stack d is pointing somewhere if we can overflow far enough to get to where d is pointing to we can",
    "start": "2235200",
    "end": "2241680"
  },
  {
    "text": "put our payload starting right there but the key is we have to get d into ip",
    "start": "2241680",
    "end": "2246720"
  },
  {
    "text": "somehow and then we'll have a situation like this see we can make it jump right there so",
    "start": "2246720",
    "end": "2252720"
  },
  {
    "text": "that's right where our payload is going to start the rest of it is inconsequential we can fill it full of letter a",
    "start": "2252720",
    "end": "2259599"
  },
  {
    "text": "i don't know why but hackers seem to be really fond of using capital letter a in their buffer overflows",
    "start": "2259599",
    "end": "2267160"
  },
  {
    "text": "there's actually a much cooler way to do that though if you don't use just the same letter and you're building a buffer overflow",
    "start": "2270000",
    "end": "2276160"
  },
  {
    "text": "you can pick a cycling set of like letters like a b c d a b c f a b c z and",
    "start": "2276160",
    "end": "2282800"
  },
  {
    "text": "you can make a pattern for it and then when you actually own eip and your and your program actually crashes",
    "start": "2282800",
    "end": "2289280"
  },
  {
    "text": "if you're the hacker playing when playing with it on your computer when you pop up eip will say you know",
    "start": "2289280",
    "end": "2294320"
  },
  {
    "text": "crash at address you know five one five two five five five seven and all of a sudden you can find out exactly the",
    "start": "2294320",
    "end": "2300480"
  },
  {
    "text": "offset of where you've owned eip from it's a useful trick and saves a lot of time this book actually has some code in it",
    "start": "2300480",
    "end": "2307520"
  },
  {
    "text": "that does that okay so the idea is i got to get d",
    "start": "2307520",
    "end": "2313760"
  },
  {
    "text": "into ip so here's the trick one of the tricks calling through a register",
    "start": "2313760",
    "end": "2320960"
  },
  {
    "start": "2316000",
    "end": "2316000"
  },
  {
    "text": "the following assemblies and language instructions uh will translate to call eax call ebx call ecx",
    "start": "2320960",
    "end": "2328079"
  },
  {
    "text": "does anybody here know what happens when you do call eax",
    "start": "2328079",
    "end": "2332960"
  },
  {
    "text": "what's that it'll jump to the address and register",
    "start": "2334800",
    "end": "2340240"
  },
  {
    "text": "that's pretty much true it actually will first push the return address for the function it thinks you're in and then it will jump to the register through the",
    "start": "2340240",
    "end": "2346640"
  },
  {
    "text": "register but essentially you can make it go to the address stored in the register and that's the key point it takes two bytes",
    "start": "2346640",
    "end": "2353599"
  },
  {
    "text": "to do that that's it if i can find some place in memory that has ffd0 or in the case i don't know",
    "start": "2353599",
    "end": "2360640"
  },
  {
    "text": "what is it ffd is it ffd4 barnaby for eb edx it doesn't",
    "start": "2360640",
    "end": "2367119"
  },
  {
    "text": "matter everybody gets the point um so if i find these two bytes in memory that's all i have to do is pick an address and",
    "start": "2367119",
    "end": "2373359"
  },
  {
    "text": "put it into our housekeeping data that we're overriding that that address points to a location in memory that has",
    "start": "2373359",
    "end": "2379119"
  },
  {
    "text": "ffd0 or you know with the equivalent the cool thing about this is it doesn't",
    "start": "2379119",
    "end": "2384240"
  },
  {
    "text": "have to be code memory there doesn't actually have to be code that makes the call eax out there there has to be",
    "start": "2384240",
    "end": "2389280"
  },
  {
    "text": "somewhere data that has an ff and a d0 next to it if i make eip point to it",
    "start": "2389280",
    "end": "2394400"
  },
  {
    "text": "it'll think its code it could be in the data portion for all it cares",
    "start": "2394400",
    "end": "2400640"
  },
  {
    "text": "that's one way another way is to find a push",
    "start": "2401760",
    "end": "2408000"
  },
  {
    "start": "2404000",
    "end": "2404000"
  },
  {
    "text": "somewhere okay and then find a return again it's only two bytes so if i find a",
    "start": "2408000",
    "end": "2413359"
  },
  {
    "text": "five zero which is pushy ax and then later on i see a c3 that does a return what that",
    "start": "2413359",
    "end": "2419280"
  },
  {
    "text": "means is the eax will be pushed onto the stack and then later on a return will be called as long as i know eax is still on",
    "start": "2419280",
    "end": "2426560"
  },
  {
    "text": "the top of the stack when return is called then it's going to get pulled off of the stack and get put",
    "start": "2426560",
    "end": "2432240"
  },
  {
    "text": "into eip so i've just through another method obtained exactly the same thing",
    "start": "2432240",
    "end": "2439838"
  },
  {
    "text": "there's actually one more trick which is not in my slides but as the stack is growing and shrinking as we're running",
    "start": "2440400",
    "end": "2447440"
  },
  {
    "text": "sometimes the stack will have references to itself like there'll be a zero zero address",
    "start": "2447440",
    "end": "2453680"
  },
  {
    "text": "stored in the stack somewhere that references somewhere else on the stack maybe it was an argument from a previous",
    "start": "2453680",
    "end": "2458800"
  },
  {
    "text": "function well sometimes these can also be exploited if i can find a whole bunch of pop",
    "start": "2458800",
    "end": "2464400"
  },
  {
    "text": "instructions that will pop everything off the stack so i end up with the address that i want and then the return",
    "start": "2464400",
    "end": "2470640"
  },
  {
    "text": "then i can return back into the stack so set another way to do it that's also covered in this book",
    "start": "2470640",
    "end": "2479078"
  },
  {
    "text": "okay so if we jump to the wrong address we're gonna have problems we're gonna crash our payload certainly isn't gonna execute",
    "start": "2480240",
    "end": "2486079"
  },
  {
    "text": "if we're guessing then there are some tricks that will make our guessing easier we can reduce the precision of",
    "start": "2486079",
    "end": "2492000"
  },
  {
    "text": "our gas by using something called the no op which is hex 90 it's instruction which is fortunately one byte long which",
    "start": "2492000",
    "end": "2498720"
  },
  {
    "text": "means we don't have to worry about alignment issues and we can fill an entire buffer with no",
    "start": "2498720",
    "end": "2503839"
  },
  {
    "text": "ops and call that a no-op sled and i'll show a diagram of this",
    "start": "2503839",
    "end": "2510400"
  },
  {
    "start": "2510000",
    "end": "2510000"
  },
  {
    "text": "here's my here's my stack i just called a function so our stack grew up",
    "start": "2510400",
    "end": "2515839"
  },
  {
    "text": "then we're going to fill a buffer go down there's our null we overwrite this",
    "start": "2515839",
    "end": "2522240"
  },
  {
    "text": "but we also fill the last part of our buffer with no ops that's the cyan color there so we're actually filling the",
    "start": "2522240",
    "end": "2528560"
  },
  {
    "text": "buffer with no ops when we do this part right here the no ops are now there okay",
    "start": "2528560",
    "end": "2534480"
  },
  {
    "text": "here's the no ops so the no ops are there we overwrite the return address and jump somewhere guessing into the no",
    "start": "2534640",
    "end": "2541359"
  },
  {
    "text": "op zone well we don't have to be perfect because if we miss a little bit as long as we hit somewhere in the no ops we're going",
    "start": "2541359",
    "end": "2547520"
  },
  {
    "text": "to start sliding on the no op sled no up no no up nope we'll start executing no precision required as long as we",
    "start": "2547520",
    "end": "2553839"
  },
  {
    "text": "guess an address somewhere in that range we then will execute through the no ops until we hit the",
    "start": "2553839",
    "end": "2560079"
  },
  {
    "text": "actual payload code so if we hit a little less or a little more it doesn't make any difference",
    "start": "2560079",
    "end": "2566000"
  },
  {
    "text": "that's the knob sled you'll see that used under unix a lot",
    "start": "2566000",
    "end": "2572319"
  },
  {
    "text": "more than you will under nt we can store a payload somewhere other than the stack this is useful",
    "start": "2572319",
    "end": "2579599"
  },
  {
    "text": "if we don't have any room on the stack we have very very little room we can put just enough code on the stack to get to",
    "start": "2579599",
    "end": "2584640"
  },
  {
    "text": "somewhere on the heap and then store it in like an environment variable actually that's on the stack",
    "start": "2584640",
    "end": "2590560"
  },
  {
    "text": "somewhere again from a file maybe with http headers that we pass gets put on the heap somewhere there's a lot of ways",
    "start": "2590560",
    "end": "2597040"
  },
  {
    "text": "to get stuff onto the heap okay so",
    "start": "2597040",
    "end": "2602319"
  },
  {
    "text": "there's my buffer and to make eip point into the heap",
    "start": "2602319",
    "end": "2607839"
  },
  {
    "text": "that's pretty much it there's other ways to exploit heap um",
    "start": "2607839",
    "end": "2613760"
  },
  {
    "text": "you can actually overflow on the heap this is not a stack overflow this is entirely different kind of overflow it's called the heap overflow what i just",
    "start": "2613760",
    "end": "2620160"
  },
  {
    "text": "described to you in the previous slide was not a heap overflow i was showing you that you can store your executable",
    "start": "2620160",
    "end": "2625280"
  },
  {
    "text": "code out here just to make it easier for you if you don't have enough room on the stack but we still overflowed the stack to get",
    "start": "2625280",
    "end": "2631440"
  },
  {
    "text": "there this is entirely different a heap overflow one example of this is when you have two c plus plus objects that are near one",
    "start": "2631440",
    "end": "2637520"
  },
  {
    "start": "2633000",
    "end": "2633000"
  },
  {
    "text": "another so anybody here know what a v table is virtual function table every c plus plus",
    "start": "2637520",
    "end": "2644000"
  },
  {
    "text": "object that's instantiated in memory has to keep track of all of the virtual functions the reason it does this is because of",
    "start": "2644000",
    "end": "2650319"
  },
  {
    "text": "inheritance and polymorphism the ability of these are all c plus plus terms but basically i can",
    "start": "2650319",
    "end": "2656960"
  },
  {
    "text": "i can exploit things in the c plus language it'll allow me to override one function with another function if i've derived off of an object",
    "start": "2656960",
    "end": "2663599"
  },
  {
    "text": "that's all programmed speak but in essence what i'm saying is that every c plus object in",
    "start": "2663599",
    "end": "2669839"
  },
  {
    "text": "memory has a little table of function pointers that point to code okay you can overwrite those and they're",
    "start": "2669839",
    "end": "2677119"
  },
  {
    "text": "stored on the heap so this is our little v table",
    "start": "2677119",
    "end": "2683680"
  },
  {
    "start": "2680000",
    "end": "2680000"
  },
  {
    "text": "and any of the member functions or excuse me member variables stored within the c plus",
    "start": "2683760",
    "end": "2689440"
  },
  {
    "text": "object are going to be stored beneath the v table at least under nt this is what i witnessed right here",
    "start": "2689440",
    "end": "2696160"
  },
  {
    "text": "and the member variables are just like the stack and then if there's a buffer there they grow",
    "start": "2696160",
    "end": "2701200"
  },
  {
    "text": "but they grow away from the v table so that doesn't that's bad for us because we can't just make it grow right over",
    "start": "2701200",
    "end": "2706240"
  },
  {
    "text": "the v table but if two c plus plus objects are near each other in memory",
    "start": "2706240",
    "end": "2711440"
  },
  {
    "start": "2711000",
    "end": "2711000"
  },
  {
    "text": "does everybody see what's going to happen here i can go over the v table of another guy",
    "start": "2711440",
    "end": "2718560"
  },
  {
    "text": "so once i've overwritten that v table where do i make it point well i make a new v table and i put it",
    "start": "2718560",
    "end": "2724640"
  },
  {
    "text": "right in the buffer did i just over flood and make a point in there",
    "start": "2724640",
    "end": "2730240"
  },
  {
    "text": "so all of a sudden i've changed one of the member functions in the c plus object",
    "start": "2730240",
    "end": "2735680"
  },
  {
    "text": "does anybody know what a really good member function to change would be it's in every object",
    "start": "2735680",
    "end": "2741760"
  },
  {
    "text": "a destructor when i delete it the destructor is going to get called and the destructor is almost always virtual",
    "start": "2741760",
    "end": "2748720"
  },
  {
    "text": "you know this probably if you program at all in c plus so i make a new v table",
    "start": "2748720",
    "end": "2756319"
  },
  {
    "text": "and i spoof the addresses for all the functions that are supposed to be there",
    "start": "2756319",
    "end": "2761839"
  },
  {
    "text": "and when it's destroyed my code executes",
    "start": "2762640",
    "end": "2767920"
  },
  {
    "text": "okay that was the first part of the talk that was injection vector now we're talking about payload",
    "start": "2767920",
    "end": "2774599"
  },
  {
    "text": "looks good i'm doing good on time too okay so there's a couple things we can do in",
    "start": "2780400",
    "end": "2786000"
  },
  {
    "text": "the payload we can use previously loaded functions um we can do things like encode our data",
    "start": "2786000",
    "end": "2792800"
  },
  {
    "text": "in different ways and decode it and do things like that saving space or maybe making it look",
    "start": "2792800",
    "end": "2797920"
  },
  {
    "text": "different maybe even encrypting it i think there's a guy i think it's luis is going to do yeah",
    "start": "2797920",
    "end": "2803280"
  },
  {
    "text": "he's going to do a talk at defcon about self-encrypting payloads there's a lot of people talking about buffer overflows",
    "start": "2803280",
    "end": "2808640"
  },
  {
    "text": "this year i noticed we can load new functions and new dlls",
    "start": "2808640",
    "end": "2814720"
  },
  {
    "text": "and we can do things like obviously spawn a shell and i talked about some of that earlier",
    "start": "2814720",
    "end": "2820079"
  },
  {
    "text": "okay so i don't remember what this animation is so i'm gonna run it first and then i'm gonna go back",
    "start": "2820560",
    "end": "2826000"
  },
  {
    "text": "okay yeah this is like a diagram of what your payload might look like okay so let me go back the payload will usually start out with",
    "start": "2826000",
    "end": "2832000"
  },
  {
    "text": "let's say it's on the stack actually it doesn't matter it can be anywhere um you'll have a knob sled",
    "start": "2832000",
    "end": "2838160"
  },
  {
    "text": "perhaps then you'll have real code doing real things okay",
    "start": "2838160",
    "end": "2843680"
  },
  {
    "text": "and then at the end you'll have this little block of data well it doesn't it's not code it's data",
    "start": "2843680",
    "end": "2849920"
  },
  {
    "text": "and it's there because when i do things with real code i oftentimes need to pass arguments to functions many times these",
    "start": "2849920",
    "end": "2856640"
  },
  {
    "text": "arguments need to be encoded somewhere they might even be ascii strings and you know if my asked ascii string",
    "start": "2856640",
    "end": "2864079"
  },
  {
    "text": "might be you know http column backs backslash backslash www call to the dead cow slash bin slash exploit code.zip or",
    "start": "2864079",
    "end": "2872160"
  },
  {
    "text": "something so that'll need to be stored somewhere and it's going to be down in that red area there",
    "start": "2872160",
    "end": "2879119"
  },
  {
    "text": "down in here",
    "start": "2879119",
    "end": "2881680"
  },
  {
    "start": "2883000",
    "end": "2883000"
  },
  {
    "text": "okay in order to reference all that data that i have in the data section i have to know where i am in memory so this is the",
    "start": "2884839",
    "end": "2892000"
  },
  {
    "text": "first trick in the payload i could be anywhere okay and i don't know where it is",
    "start": "2892000",
    "end": "2898160"
  },
  {
    "text": "so my assembly language needs to do something to help me figure out where i am well the cool thing about it is if i",
    "start": "2898160",
    "end": "2904800"
  },
  {
    "text": "call if i call call okay the assembly image call it is going to",
    "start": "2904800",
    "end": "2910480"
  },
  {
    "text": "push the instruction pointer onto the stack well once it's on the stack i can get to it",
    "start": "2910480",
    "end": "2916800"
  },
  {
    "text": "you can't just load the instruction pointer out of the register it doesn't work but you can do call have it pushed onto",
    "start": "2916800",
    "end": "2921839"
  },
  {
    "text": "the stack and then you can pop it you can put it somewhere in this particular case i'm putting it into edi",
    "start": "2921839",
    "end": "2928559"
  },
  {
    "text": "which is just a register and actually you know and this is a good time to bring this up this particular",
    "start": "2928559",
    "end": "2935040"
  },
  {
    "text": "trick would not work because call reload and then relock being beneath it like this with pop edi it would translate to",
    "start": "2935040",
    "end": "2940960"
  },
  {
    "text": "something like oh e80000000",
    "start": "2940960",
    "end": "2946040"
  },
  {
    "text": "there's four four null characters in that we can't have that does anybody know how you might change",
    "start": "2946319",
    "end": "2951440"
  },
  {
    "text": "this call actually whoever can figure this out gets a copy of this book how could i change this call so there's",
    "start": "2951440",
    "end": "2956880"
  },
  {
    "text": "no null characters encoded into it once again the call instruction will",
    "start": "2956880",
    "end": "2961920"
  },
  {
    "text": "translate to e8 or something close to that in the four zeros because i'm calling forward",
    "start": "2961920",
    "end": "2968400"
  },
  {
    "text": "zero bytes and it needs to store the address what's that",
    "start": "2968400",
    "end": "2975359"
  },
  {
    "text": "okay xor the bytes how could i xor the bytes and un xor the bytes if i don't know how to",
    "start": "2975359",
    "end": "2982720"
  },
  {
    "text": "oh explain to me better what you mean actually how would you do it specifically",
    "start": "2982720",
    "end": "2988599"
  },
  {
    "text": "damn it pressure um let's say you want to store like a null",
    "start": "3001359",
    "end": "3007200"
  },
  {
    "text": "address on there then you could just xor that with the ones or something before you get to it or have one i'll guess you'd have what",
    "start": "3007200",
    "end": "3014400"
  },
  {
    "text": "if you store like 255 255 255 on the stack and x4 that again you'll get four zeros",
    "start": "3014400",
    "end": "3020559"
  },
  {
    "text": "if you export with itself you get four zeros out of that how would i make uh how would i point to it so that i",
    "start": "3020559",
    "end": "3026480"
  },
  {
    "text": "could run xor against it excuse me how would i make how would i point to the memory that i want to xor",
    "start": "3026480",
    "end": "3034318"
  },
  {
    "text": "i guess you'd have to guess via offsets to knob sled or hard code and address",
    "start": "3034880",
    "end": "3040640"
  },
  {
    "text": "yeah that might work but i don't know where i am in memory",
    "start": "3040640",
    "end": "3046720"
  },
  {
    "text": "i don't know but i mean could you jump and then do relocas",
    "start": "3047119",
    "end": "3053200"
  },
  {
    "text": "minus one",
    "start": "3053200",
    "end": "3055838"
  },
  {
    "text": "frac 55 rules by the way",
    "start": "3059119",
    "end": "3062558"
  },
  {
    "text": "technical assistance please",
    "start": "3066640",
    "end": "3069838"
  },
  {
    "text": "screensaver hopefully oh good",
    "start": "3072160",
    "end": "3077800"
  },
  {
    "text": "once again thank you eli okay so the correct answer to that question was uh you can do a call in",
    "start": "3082160",
    "end": "3089280"
  },
  {
    "text": "reverse and a call negative one will translate to e8 and f f f f f",
    "start": "3089280",
    "end": "3094720"
  },
  {
    "text": "there's no nulls in that good very very good",
    "start": "3094720",
    "end": "3100160"
  },
  {
    "text": "um okay so that's another way to do the same thing once we know where we are that means we have a register somewhere now that",
    "start": "3100160",
    "end": "3106559"
  },
  {
    "text": "points to our location we can now offset from that register to get to all the data stored in the previous slide all",
    "start": "3106559",
    "end": "3113119"
  },
  {
    "text": "the data stored in the data portion so when we actually do the call and then the pop we're going to find out",
    "start": "3113119",
    "end": "3120480"
  },
  {
    "text": "this location right here okay and now we can always reference off of that address",
    "start": "3120480",
    "end": "3127359"
  },
  {
    "text": "to get down to the data we know where everything is now",
    "start": "3127359",
    "end": "3132000"
  },
  {
    "start": "3134000",
    "end": "3134000"
  },
  {
    "text": "okay now the x-door protection my ascii strings are probably going to have to be null terminated or they may",
    "start": "3134960",
    "end": "3142000"
  },
  {
    "text": "have zeros and then remember i'm storing other things that have just numbers or something they have zeros in them so we can't have any nulls in our data portion",
    "start": "3142000",
    "end": "3148240"
  },
  {
    "text": "either otherwise we're going to cut it off prematurely so we just xor every single byte with some value",
    "start": "3148240",
    "end": "3155760"
  },
  {
    "text": "and now we have this xor encoded payload or excuse me data section",
    "start": "3155760",
    "end": "3161440"
  },
  {
    "text": "when we're done we just xor it again to decode it so we send it xord when we actually",
    "start": "3161440",
    "end": "3167680"
  },
  {
    "start": "3162000",
    "end": "3162000"
  },
  {
    "text": "inject it it's already been exported we export it locally and stored it locally that way we run it against the remote",
    "start": "3167680",
    "end": "3173040"
  },
  {
    "text": "system and our payload is actually going to decode it for us so there's our knob sled we begin",
    "start": "3173040",
    "end": "3178960"
  },
  {
    "text": "decoding right off the bat right after we figure out where we are with the getting bearings we then begin using",
    "start": "3178960",
    "end": "3184400"
  },
  {
    "text": "that address to offset to the data and begin decoding it and we unencode all the xor",
    "start": "3184400",
    "end": "3192000"
  },
  {
    "text": "all the data okay so once i've done that i can start using",
    "start": "3192000",
    "end": "3198160"
  },
  {
    "start": "3194000",
    "end": "3194000"
  },
  {
    "text": "function calls which are already yeah i can hard code function calls i can do you know call",
    "start": "3198160",
    "end": "3203838"
  },
  {
    "text": "77f7001b or something like that and it would work it would actually jump to that address and run it so all the",
    "start": "3204520",
    "end": "3209680"
  },
  {
    "text": "little pink regions i have here are out in code memory this is code memory and these are all different functions",
    "start": "3209680",
    "end": "3214720"
  },
  {
    "text": "they're just located wherever they're located and as i run i can just call them",
    "start": "3214720",
    "end": "3219920"
  },
  {
    "text": "and then later on i might need another one so i call it and then later on and you know and so forth",
    "start": "3219920",
    "end": "3225200"
  },
  {
    "text": "that's the easiest way to do this of course the problem is we we don't always know where these guys are going",
    "start": "3225200",
    "end": "3231440"
  },
  {
    "text": "to be right so we need a new trick",
    "start": "3231440",
    "end": "3236440"
  },
  {
    "start": "3236000",
    "end": "3236000"
  },
  {
    "text": "okay so the pro to this is it makes code smaller but the con is obviously if it's not in the same place",
    "start": "3237920",
    "end": "3243760"
  },
  {
    "text": "uh this is a problem if we have dynamically loaded dols for instance",
    "start": "3243760",
    "end": "3248880"
  },
  {
    "text": "there is one side effect though or there's one other thing i have to mention some dlls are usually in the",
    "start": "3248880",
    "end": "3254559"
  },
  {
    "text": "right place can anybody hear oh this is another good one anybody tell me which dll is almost",
    "start": "3254559",
    "end": "3260720"
  },
  {
    "text": "always in the same place under windows nt too many people answered",
    "start": "3260720",
    "end": "3266559"
  },
  {
    "text": "let me go there with that okay we'll try again later",
    "start": "3266559",
    "end": "3270640"
  },
  {
    "start": "3271000",
    "end": "3271000"
  },
  {
    "text": "that's pretty bad wasn't it okay so um let's say i don't have the",
    "start": "3273599",
    "end": "3280160"
  },
  {
    "text": "functions loaded into memory um fortunately there is always two",
    "start": "3280160",
    "end": "3285920"
  },
  {
    "text": "functions available available to me in any process load library and get proc address",
    "start": "3285920",
    "end": "3291200"
  },
  {
    "text": "load library allows me to load any dll and get proc address allows me to load any function address out of a previously",
    "start": "3291200",
    "end": "3298480"
  },
  {
    "text": "loaded dll get proc address allows me to specify the name of the function",
    "start": "3298480",
    "end": "3304559"
  },
  {
    "text": "in ascii that i want to use so obviously i can store those names in the data portion i can load any dll i want and",
    "start": "3304559",
    "end": "3309920"
  },
  {
    "text": "then find any function in that dll that's really handy i mean it's almost limitless now what i can do",
    "start": "3309920",
    "end": "3315599"
  },
  {
    "text": "there's plenty of dlls on the system which do a lot for me i can store the function name down in",
    "start": "3315599",
    "end": "3321440"
  },
  {
    "text": "the data portion let's say that uh hold on let me find",
    "start": "3321440",
    "end": "3327040"
  },
  {
    "text": "out what this slide is doing okay get proc address is already loaded so i",
    "start": "3327040",
    "end": "3332960"
  },
  {
    "text": "call it okay and i pass it the name of the new dll that i want or excuse me",
    "start": "3332960",
    "end": "3338960"
  },
  {
    "text": "in this slide we'll say the dll is already loaded this is slightly misleading we'll say",
    "start": "3338960",
    "end": "3344400"
  },
  {
    "text": "the dll is not loaded and it says load dll by name at the top of that slide does everybody see that load dll by name",
    "start": "3344400",
    "end": "3349920"
  },
  {
    "text": "we're using load library here pretend like get proc address says load library okay so i call load library and",
    "start": "3349920",
    "end": "3357119"
  },
  {
    "text": "i give it the name of what i want and it suddenly appears in memory",
    "start": "3357119",
    "end": "3363680"
  },
  {
    "text": "i can then use get proc address after i've done that to do the same thing get proc address give it the name of the",
    "start": "3363680",
    "end": "3370559"
  },
  {
    "text": "function i want once again that's stored in the data portion and it gives me the uh the function uh",
    "start": "3370559",
    "end": "3377280"
  },
  {
    "text": "address so then i take that function address and i store it somewhere where i can use it and that's called building a jump table so i get proc address",
    "start": "3377280",
    "end": "3384559"
  },
  {
    "text": "store that get proc address store it get proc address store it for every single function that i need to use",
    "start": "3384559",
    "end": "3390799"
  },
  {
    "text": "and i can just put it right into my data portion",
    "start": "3390799",
    "end": "3394559"
  },
  {
    "text": "once that's loaded i can begin using those functions boom and i use it i have to call through",
    "start": "3397119",
    "end": "3403280"
  },
  {
    "text": "the jump table so i actually call jump table and it jumps to the function i want everybody see how that works it's pretty",
    "start": "3403280",
    "end": "3410000"
  },
  {
    "text": "easy so i'll have one entry in my jump table for every single new function i need to use",
    "start": "3410000",
    "end": "3416880"
  },
  {
    "start": "3416000",
    "end": "3416000"
  },
  {
    "text": "okay so to do this i have to store the ascii name of every single function i want to",
    "start": "3416880",
    "end": "3423200"
  },
  {
    "text": "use okay um jeff just alerted me that the reception is starting shortly um",
    "start": "3430839",
    "end": "3437520"
  },
  {
    "text": "if i'm completely boring you get out of here but i'm going to keep going so hopefully",
    "start": "3437520",
    "end": "3444720"
  },
  {
    "text": "yeah i'll just keep rambling but i have two more books to give away if i pull another one",
    "start": "3445119",
    "end": "3450400"
  },
  {
    "text": "like i did before you might get it i'm gonna have to watch my screen before",
    "start": "3450400",
    "end": "3456319"
  },
  {
    "text": "i make that mistake again okay so in order to do that obviously we",
    "start": "3456319",
    "end": "3461760"
  },
  {
    "text": "got another one down okay obviously to do that i've got to store the ascii name of every single function i want to load",
    "start": "3461760",
    "end": "3467760"
  },
  {
    "text": "that's going to take up a lot of room right especially if there's a lot of them especially if i'm storing the names of dlls and functions",
    "start": "3467760",
    "end": "3473680"
  },
  {
    "text": "obviously it's going to take up a lot of room so hackers have developed this really cool",
    "start": "3473680",
    "end": "3478960"
  },
  {
    "text": "technique called hash loading hash loading works like this instead of storing the ascii name of the function",
    "start": "3478960",
    "end": "3484400"
  },
  {
    "text": "or dll i want to load i store a four byte hash of that name the chance of a",
    "start": "3484400",
    "end": "3489839"
  },
  {
    "text": "hash collision is almost next to nothing so all i need to do is store four bytes and then go out and find and hash",
    "start": "3489839",
    "end": "3496160"
  },
  {
    "text": "everything that's in memory to find that string so basically the hash is equivalent to the string as far",
    "start": "3496160",
    "end": "3502079"
  },
  {
    "text": "as i'm concerned i can reduce the size of my data portion considerably i'll show that in the next",
    "start": "3502079",
    "end": "3507440"
  },
  {
    "text": "slide we can find any function we want and we can load any deal loss just like before",
    "start": "3507440",
    "end": "3514240"
  },
  {
    "text": "okay does everybody know what a pe executable is",
    "start": "3515040",
    "end": "3520160"
  },
  {
    "text": "portable executable format every single binary under windows nt store well not every single one but most",
    "start": "3520160",
    "end": "3526480"
  },
  {
    "text": "of them are stored in this format called pe well in the pe header is stored an import table",
    "start": "3526480",
    "end": "3533440"
  },
  {
    "text": "and in this import table are the names of all the functions that are currently loaded",
    "start": "3533440",
    "end": "3539039"
  },
  {
    "text": "in some cases they're loaded by ordinal and that would change the situation slightly but most of the time and i've",
    "start": "3539280",
    "end": "3544480"
  },
  {
    "text": "seen them loaded by name and in this case we're going to exploit that",
    "start": "3544480",
    "end": "3549280"
  },
  {
    "text": "inside of the pe header is an offset which points to another part of the header and then inside of that part",
    "start": "3549839",
    "end": "3555359"
  },
  {
    "text": "there's an ascii name and a corresponding address it's telling me that this function by",
    "start": "3555359",
    "end": "3561680"
  },
  {
    "text": "this name runs or exists in memory at that address it's already there for me and it's",
    "start": "3561680",
    "end": "3567040"
  },
  {
    "text": "already loaded into memory so i check my crcs",
    "start": "3567040",
    "end": "3572559"
  },
  {
    "start": "3570000",
    "end": "3570000"
  },
  {
    "text": "obviously my data portion is not no longer storing ascii text now it's storing crcs storing four byte values so",
    "start": "3572559",
    "end": "3579119"
  },
  {
    "text": "i take one crc and load it up maybe a new register or something and then i go into the pe header and i find an ascii",
    "start": "3579119",
    "end": "3585920"
  },
  {
    "text": "name i hash it again the payload does that payload runs a hash and compares it",
    "start": "3585920",
    "end": "3592079"
  },
  {
    "text": "against the crc that i want if it matches it takes the function address",
    "start": "3592079",
    "end": "3598400"
  },
  {
    "text": "and drops it right over the top of the hash the hash is gone now the previous hash the one i just used it's gone",
    "start": "3598400",
    "end": "3604720"
  },
  {
    "text": "but it's convenient because i have basically four bytes for every single function i want to load being replaced by four bytes for every function address",
    "start": "3604720",
    "end": "3612000"
  },
  {
    "text": "so it's nice and clean as i go along here we are boom load boom load boom load",
    "start": "3612000",
    "end": "3617760"
  },
  {
    "text": "see how that is it's nice and clean no ascii text",
    "start": "3617760",
    "end": "3623520"
  },
  {
    "text": "um if we had uh this is an interesting slide if we had a really really confined payload space we can do really wacky",
    "start": "3626640",
    "end": "3632720"
  },
  {
    "text": "stuff like compress two assembly language instructions into a single byte i've seen a guy uh same as jeremy koth i",
    "start": "3632720",
    "end": "3639680"
  },
  {
    "text": "think he published something on bug track that did this it was a long time ago",
    "start": "3639680",
    "end": "3645520"
  },
  {
    "text": "you could double the capacity or payload but it also like seriously decreases the number of instructions you can use",
    "start": "3645520",
    "end": "3652079"
  },
  {
    "text": "you could also be confined by a limited character set let's say your url encoding or mime encoding your payload",
    "start": "3652480",
    "end": "3658160"
  },
  {
    "text": "is obviously being filtered somehow caesar's challenged two years ago this is a challenge as a party which",
    "start": "3658160",
    "end": "3664559"
  },
  {
    "text": "happens at defcon and there's a challenge posted to the hackers who arrive and they have to solve it by the end of the night caesar's challenge that",
    "start": "3664559",
    "end": "3671280"
  },
  {
    "text": "year was to make a payload that would work through a mime encoder well a mimo coder only allows certain instruct",
    "start": "3671280",
    "end": "3678079"
  },
  {
    "text": "basically certain characters to be used which limited the instruction set considerably down to a bunch of short jumps or a",
    "start": "3678079",
    "end": "3684640"
  },
  {
    "text": "short jump a push pop and a subtract well what we were able to do with this",
    "start": "3684640",
    "end": "3690480"
  },
  {
    "text": "is load up into well actually we would push a value onto the stack then we'd pop it into a register",
    "start": "3690480",
    "end": "3696480"
  },
  {
    "text": "and subtract that register until it was the actual instruction we wanted and we'd push it back onto the",
    "start": "3696480",
    "end": "3702000"
  },
  {
    "text": "stack we just keep doing that over and over and over again",
    "start": "3702000",
    "end": "3706720"
  },
  {
    "text": "it worked",
    "start": "3708319",
    "end": "3711480"
  },
  {
    "text": "also in the same challenge since we didn't have jump we couldn't jump to our",
    "start": "3714240",
    "end": "3719359"
  },
  {
    "text": "portion on the stack that we're writing to so we actually had this thing called the backwards bridge",
    "start": "3719359",
    "end": "3725040"
  },
  {
    "text": "we didn't want to use jump so instead here's our here's our our payloads running along so it's doing you know",
    "start": "3725040",
    "end": "3732240"
  },
  {
    "text": "load sub sub sub sub sub sub push load sub sub sub sub push and so forth",
    "start": "3732240",
    "end": "3737760"
  },
  {
    "text": "meanwhile it's pushing those down here and they're growing up towards us okay so as we go down",
    "start": "3737760",
    "end": "3744880"
  },
  {
    "text": "we're also filling up and we calculated the size exactly",
    "start": "3744880",
    "end": "3749920"
  },
  {
    "text": "so that when we were done in decoding this we just ran right into",
    "start": "3749920",
    "end": "3755119"
  },
  {
    "text": "our real code and began executing that was a backwards bridge the source code to this is available on caesarschallenge.org",
    "start": "3755119",
    "end": "3762599"
  },
  {
    "text": "okay so one of the other things we might want to do is load a new dll let's say that there's no dlls in memory",
    "start": "3763599",
    "end": "3769599"
  },
  {
    "text": "i already kind of covered this i guess i didn't think i had this slide but we have a dll we call a load library we",
    "start": "3769599",
    "end": "3777280"
  },
  {
    "text": "give it the ascii name and it actually adds a bunch of stuff to the thing a good a good deal to load is when inet",
    "start": "3777280",
    "end": "3783599"
  },
  {
    "text": "dildog talked about this in his dow of windows buffer overflow paper it provides these really cool functions",
    "start": "3783599",
    "end": "3789680"
  },
  {
    "text": "like internet open url and internet read file where i just give it like a url address and it goes and downloads it for",
    "start": "3789680",
    "end": "3795039"
  },
  {
    "text": "me it does all the work for me why work why sweat my payload is really small because i",
    "start": "3795039",
    "end": "3800160"
  },
  {
    "text": "only have to make one or two function calls and it'll download the file then all i have to do is execute it",
    "start": "3800160",
    "end": "3805680"
  },
  {
    "text": "the other cool thing about it is i could if i was a hacker i could go out an evil hacker i should say i'd go out and place it somewhere on",
    "start": "3805680",
    "end": "3813039"
  },
  {
    "text": "an anonymous website where nobody could find it or excuse me nobody could trace me to that site you know if you were an",
    "start": "3813039",
    "end": "3818720"
  },
  {
    "text": "admin and you saw this go out and this file get downloaded you could go out maybe and find this page somewhere on geocities but you'd never catch the guy",
    "start": "3818720",
    "end": "3824960"
  },
  {
    "text": "that put it there so it's anonymous basically another good uh function to load our",
    "start": "3824960",
    "end": "3831039"
  },
  {
    "text": "extremely deal auto load is uh the winsock dll obviously and uh and barnby's article in frac55 did just that",
    "start": "3831039",
    "end": "3838160"
  },
  {
    "text": "and it used it to open a socket another way to make function calls is",
    "start": "3838160",
    "end": "3844480"
  },
  {
    "text": "not actually use dlls at all it's to make interrupt calls it's an entirely different way to make something happen",
    "start": "3844480",
    "end": "3852079"
  },
  {
    "text": "okay now this is this is one i know it's not on the slide kernel 32 right",
    "start": "3852079",
    "end": "3857520"
  },
  {
    "text": "which dll what actually which interrupt call",
    "start": "3857520",
    "end": "3862720"
  },
  {
    "text": "what's the interrupt number no excuse me that's what that's on the slide you're not getting me that easy",
    "start": "3862720",
    "end": "3868960"
  },
  {
    "text": "which dll does kernel 32 wrap in order to make these interrupt calls",
    "start": "3870240",
    "end": "3875599"
  },
  {
    "text": "somebody has to raise their hand or something because that's if i don't know who it was so nobody gets a book",
    "start": "3876960",
    "end": "3883359"
  },
  {
    "text": "okay we don't need one okay",
    "start": "3884720",
    "end": "3889480"
  },
  {
    "text": "actually next time i do that eli you got to go with the microphone and pick somebody keep it all nice and early",
    "start": "3904799",
    "end": "3910720"
  },
  {
    "text": "um okay so an interrupt call is really easy all i have to do is load a register with a number and then load another register with a",
    "start": "3910720",
    "end": "3917119"
  },
  {
    "text": "pointer to basically arguments for the system call and then i call an interrupt an interrupt is usually encoded as two",
    "start": "3917119",
    "end": "3922960"
  },
  {
    "text": "bytes and i have two examples of that one for interrupt two e and one for interrupt",
    "start": "3922960",
    "end": "3928319"
  },
  {
    "text": "80. uh i believe internet interrupt 80 is there because it's the system call under linux and 2e would be the same",
    "start": "3928319",
    "end": "3934640"
  },
  {
    "text": "equivalent under nt",
    "start": "3934640",
    "end": "3937838"
  },
  {
    "text": "referencing barnaby again i think he used about five functions to attach those named pipes to each other execute",
    "start": "3943680",
    "end": "3949039"
  },
  {
    "text": "cmd and then make those wind socks i'm going to use the winsock library",
    "start": "3949039",
    "end": "3954319"
  },
  {
    "text": "i can spawn a process with interrupt 80 under linux that's pretty easy i can spawn a process under windows and",
    "start": "3954319",
    "end": "3959359"
  },
  {
    "text": "t with one call a create process",
    "start": "3959359",
    "end": "3963880"
  },
  {
    "text": "um worms i'm not really going to go into this because i'm already over time but obviously a worm once it's established can exploit",
    "start": "3966960",
    "end": "3973520"
  },
  {
    "text": "trust relationships to get wherever it wants to go lysine deficiency really quick if you",
    "start": "3973520",
    "end": "3978799"
  },
  {
    "text": "have a worm and you're in you're programming it uh and you're testing it you don't want it to get out of control",
    "start": "3978799",
    "end": "3984000"
  },
  {
    "text": "and take off right so we came up with this idea called lysine deficiency basically make some rule like a floppy",
    "start": "3984000",
    "end": "3990720"
  },
  {
    "text": "has to be in the drive or a file has to exist and if that isn't the case it doesn't",
    "start": "3990720",
    "end": "3995839"
  },
  {
    "text": "spread that's the way you can keep it in your laboratory and make sure it'll never get out and caesar wrote some interesting stuff",
    "start": "3995839",
    "end": "4002400"
  },
  {
    "text": "on this and it's posted on the rootkit site so i think it's just you know it's a good idea to have this lysine deficiency",
    "start": "4002400",
    "end": "4007680"
  },
  {
    "text": "and obviously it was a complete rip off from the uh from the dinosaur movie okay so recap",
    "start": "4007680",
    "end": "4014160"
  },
  {
    "text": "the injection is not the same as the payload payloads can perform a variety of things",
    "start": "4014160",
    "end": "4019599"
  },
  {
    "text": "now a service attack they can be a worm remote shell root kit",
    "start": "4019599",
    "end": "4024400"
  },
  {
    "text": "there's many many many challenges with injection null obviously stack size",
    "start": "4026559",
    "end": "4032240"
  },
  {
    "text": "different character encodings highland lowland address you have to be able to get to the stack",
    "start": "4032240",
    "end": "4038880"
  },
  {
    "text": "or wherever your code is being stored so there's things like calling through cpu registers as tricks",
    "start": "4038880",
    "end": "4045039"
  },
  {
    "text": "i've shown you that a limited opcode set can still be used to build a fully functional program",
    "start": "4045760",
    "end": "4051599"
  },
  {
    "text": "our payload has to be encoded we can build jump tables we can load any dll in the system find functions we can hard",
    "start": "4053760",
    "end": "4059920"
  },
  {
    "text": "code the addresses saving space or we can load them dynamically and we can use lysine deficiency to keep our worms from",
    "start": "4059920",
    "end": "4065680"
  },
  {
    "text": "spreading uncontrolled thank you very much",
    "start": "4065680",
    "end": "4072039"
  }
]