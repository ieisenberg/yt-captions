[
  {
    "text": "hey everybody uh thanks for coming to my talk so today we're going to talk about from mlops to ml oops uh exposing the",
    "start": "2560",
    "end": "9440"
  },
  {
    "text": "attack surface of machine learning platforms uh so a few words about myself",
    "start": "9440",
    "end": "14879"
  },
  {
    "text": "my name is Shaka man uh classically I'm a binary reverse engineer nowadays I",
    "start": "14879",
    "end": "20039"
  },
  {
    "text": "mostly assign cves CVSs scores which is also fun and uh I lead jrog security",
    "start": "20039",
    "end": "27039"
  },
  {
    "text": "research teams so we do zero day analysis CV is and malware analysis and",
    "start": "27039",
    "end": "32398"
  },
  {
    "text": "today I'm going to present a recent research that we did in our zero day team which included myself orander Nat",
    "start": "32399",
    "end": "41719"
  },
  {
    "text": "andeli all right so what is this talk about why should you care about this stock so when attackers infiltrate and",
    "start": "41719",
    "end": "48719"
  },
  {
    "text": "organizations Network they hunt for high value targets these are targets that will allow them to spread into the",
    "start": "48719",
    "end": "55600"
  },
  {
    "text": "entire organization so an obvious example is a domain controller if an attacker gets in",
    "start": "55600",
    "end": "61239"
  },
  {
    "text": "your domain controller then they can hijack the entire uh domain another example is it orchestration framework so",
    "start": "61239",
    "end": "69080"
  },
  {
    "text": "if an attacker takes over that they can publish packages to all of the machines",
    "start": "69080",
    "end": "74360"
  },
  {
    "text": "in the in the organization and take over the entire organization what I want to argue today and show you today that",
    "start": "74360",
    "end": "81320"
  },
  {
    "text": "mlops platforms are a new high value Target and hijacking them leads to",
    "start": "81320",
    "end": "86520"
  },
  {
    "text": "massive spread uh think solar winds but but for",
    "start": "86520",
    "end": "91960"
  },
  {
    "text": "AI okay so today we're going to see uh we're going to have a bit of intro about mlops platforms we're going to break",
    "start": "91960",
    "end": "99439"
  },
  {
    "text": "them down into distinct features and see how each feature individually can be",
    "start": "99439",
    "end": "104520"
  },
  {
    "text": "attacked when this mops platform is deployed in an organizational framework",
    "start": "104520",
    "end": "109799"
  },
  {
    "text": "uh we're going to have a fun demo where we exploit one of the zero days that we found as part of this research uh and in",
    "start": "109799",
    "end": "115840"
  },
  {
    "text": "the end we're going to see how to avoid these attacks as well okay okay so a bit of intro about",
    "start": "115840",
    "end": "121880"
  },
  {
    "text": "mlops platforms uh so this is the usual ml ml software supply chain this is what",
    "start": "121880",
    "end": "127600"
  },
  {
    "text": "you need to do in order to create a machine learning model so first of all you choose a machine learning algorithm",
    "start": "127600",
    "end": "133959"
  },
  {
    "text": "so these are well-known algorithms for example uh decision trees or svm once",
    "start": "133959",
    "end": "139360"
  },
  {
    "text": "you choose an algorithm you feed a data set to that algorithm so the data set is the data that we want our model to know",
    "start": "139360",
    "end": "146760"
  },
  {
    "text": "about and be able to answer questions about uh so this process of feeding the",
    "start": "146760",
    "end": "152120"
  },
  {
    "text": "data set is called training the model and this results in something that is called a pre-trained model so this is an",
    "start": "152120",
    "end": "159000"
  },
  {
    "text": "object that can be queried and you can query answer it questions like chat GPT",
    "start": "159000",
    "end": "164319"
  },
  {
    "text": "and it it will answer um and when the model is ready when we have this pre-trained model we",
    "start": "164319",
    "end": "170400"
  },
  {
    "text": "need Version Control so Version Control is usually happening in the model registry this is what will allow us to",
    "start": "170400",
    "end": "178040"
  },
  {
    "text": "uh save all the versions of the model and uh in the end when we want to deploy the model to production we use a mlops",
    "start": "178040",
    "end": "185519"
  },
  {
    "text": "platform feature called Model serving or model as a service and this will allow us to let clients uh query this model so",
    "start": "185519",
    "end": "193799"
  },
  {
    "text": "this whole uh supply chain can be uh done either manually but uh by a ml",
    "start": "193799",
    "end": "199879"
  },
  {
    "text": "developer or a data scientist or we can use a machine learning pipeline which we'll also see what that means in order",
    "start": "199879",
    "end": "206560"
  },
  {
    "text": "to automate all of this process okay so let's start with a machine learning pipeline so mlops",
    "start": "206560",
    "end": "212480"
  },
  {
    "text": "platforms provide us the ability to construct and run a pipeline so this is just a bunch of code usually python code",
    "start": "212480",
    "end": "220000"
  },
  {
    "text": "and it allows us to automate uh monitoring for data changes so we have the data set the pipeline monitors for",
    "start": "220000",
    "end": "227159"
  },
  {
    "text": "changes and then when there's new data it trains a new model evaluates it and",
    "start": "227159",
    "end": "232560"
  },
  {
    "text": "deploys it so this just allows us to do it to do this automatically so for example if in a this is similar to a",
    "start": "232560",
    "end": "239920"
  },
  {
    "text": "devops uh pipeline where you would have a commit trigger a build of the code and",
    "start": "239920",
    "end": "245560"
  },
  {
    "text": "then obviously test the code and push it out uh so the same thing can be said",
    "start": "245560",
    "end": "250599"
  },
  {
    "text": "about an ml pipeline once the data set changes we would uh train a new model from that data set and evaluate it and",
    "start": "250599",
    "end": "257400"
  },
  {
    "text": "deploy it so for example this is python code in the cube flow framework that",
    "start": "257400",
    "end": "263800"
  },
  {
    "text": "defines a data set and you can see here the input to the pipeline is uh training",
    "start": "263800",
    "end": "269520"
  },
  {
    "text": "dat data and evaluation data from Google Cloud for example so once this uh data",
    "start": "269520",
    "end": "275440"
  },
  {
    "text": "changes the pipeline runs and then it trains a new model with this new data and evaluates it and deploys",
    "start": "275440",
    "end": "283360"
  },
  {
    "text": "it okay so once we have a pre-trained model like let's say we did it manually or with a pipeline uh where do we store",
    "start": "283360",
    "end": "290919"
  },
  {
    "text": "it so we store it in a model registry so this is the version uh this is the source control or Version Control for",
    "start": "290919",
    "end": "296960"
  },
  {
    "text": "models all the models live there so data science just push new versions of models there and pull and then iterate on them",
    "start": "296960",
    "end": "304120"
  },
  {
    "text": "and ml Engineers when they want to promote a model to production they usually take a model from the model",
    "start": "304120",
    "end": "310039"
  },
  {
    "text": "registry and then push it out to production uh so this is an example of a",
    "start": "310039",
    "end": "316000"
  },
  {
    "text": "very popular open source model registry ml flow so we can see all of the models",
    "start": "316000",
    "end": "321240"
  },
  {
    "text": "uh living happily here with all the versions and aliases uh",
    "start": "321240",
    "end": "327479"
  },
  {
    "text": "Etc okay so the last feature I want to talk about is model serving or model as a service so uh once we promote a model",
    "start": "327479",
    "end": "334919"
  },
  {
    "text": "to production we have two choices on how users can uh use it the first choice is",
    "start": "334919",
    "end": "340520"
  },
  {
    "text": "called embedding so we take the pre-trained model and we put it inside uh an application and then the",
    "start": "340520",
    "end": "346600"
  },
  {
    "text": "application just uses it internally uh the second choice which is a bit more popular is called Model serving or model",
    "start": "346600",
    "end": "353440"
  },
  {
    "text": "as a service so we just give the mlops platform our model binary and it wraps it in an API and makes it accessible",
    "start": "353440",
    "end": "360720"
  },
  {
    "text": "through HTTP for example uh so this is for example like when you query Chad GPT",
    "start": "360720",
    "end": "365759"
  },
  {
    "text": "it's model as a service you use API and you query their model so this just saves us the time from writing a custom web",
    "start": "365759",
    "end": "372800"
  },
  {
    "text": "application and this just gives us proper API for for serving the model so",
    "start": "372800",
    "end": "379080"
  },
  {
    "text": "an example for that is uh one of the platforms that we researched is Seldon",
    "start": "379080",
    "end": "384160"
  },
  {
    "text": "core so this provides uh model serving and or inference server or model as a",
    "start": "384160",
    "end": "389240"
  },
  {
    "text": "service this these are all the same names these are all different for the same thing so uh you give this uh mlops",
    "start": "389240",
    "end": "397800"
  },
  {
    "text": "platform your model it uh the way that it serves it it wraps it in a Docker container then it deploys it through",
    "start": "397800",
    "end": "404120"
  },
  {
    "text": "kubernetes and it wraps it with a standard API layer so you can serve a lot of different model types and for your users it will look exactly the same",
    "start": "404120",
    "end": "411680"
  },
  {
    "text": "from the API so this is also very easy to do you just write a kubernetes configuration and you can see the only",
    "start": "411680",
    "end": "418039"
  },
  {
    "text": "thing we need to really specify here is where the pre-trained model is and then it will wrap everything for us and",
    "start": "418039",
    "end": "424120"
  },
  {
    "text": "provide apis and uh we're good to go okay so these are some uh mlops",
    "start": "424120",
    "end": "431280"
  },
  {
    "text": "features and now let's see how to attack these features so in our research we chose to analyze six of the biggest",
    "start": "431280",
    "end": "437440"
  },
  {
    "text": "open- source mlops platforms uh and see how to attack them when they're deployed in an",
    "start": "437440",
    "end": "443639"
  },
  {
    "text": "organizational Network so all the attacks here that I'm going to show are not theoretical we actually did them on",
    "start": "443639",
    "end": "449680"
  },
  {
    "text": "these platforms and they're also valid for a lot of other mlops",
    "start": "449680",
    "end": "454960"
  },
  {
    "text": "platforms okay so I want to make uh important distinction here so uh let's",
    "start": "454960",
    "end": "460440"
  },
  {
    "text": "look at the cve it's sort of a nonsense cve and we'll understand why so this was",
    "start": "460440",
    "end": "466080"
  },
  {
    "text": "rightfully disputed and it's about a python uh module a python library that",
    "start": "466080",
    "end": "471759"
  },
  {
    "text": "directly wraps the pickle module and what the cve says is if you unpickle",
    "start": "471759",
    "end": "477039"
  },
  {
    "text": "untrusted data uh then you can arbitrary code execution so that's like yeah of course",
    "start": "477039",
    "end": "484800"
  },
  {
    "text": "you don't say like obviously this is something that's very well known it's uh the known behavior and expected Behavior",
    "start": "484800",
    "end": "492159"
  },
  {
    "text": "so everybody knows about that pretty much and that was also the dispute reason uh so if you go to python",
    "start": "492159",
    "end": "498159"
  },
  {
    "text": "documentation there's a big red warning don't unpickle untrusted data it leads to code execution so the point here that",
    "start": "498159",
    "end": "505280"
  },
  {
    "text": "this isn't an implementation vulnerability and it shouldn't get a CV alloc",
    "start": "505280",
    "end": "510479"
  },
  {
    "text": "because there's nothing to fix it's expected Behavior so this is an inherent vulnerability in the format that we're",
    "start": "510479",
    "end": "517000"
  },
  {
    "text": "using we're using pickle uh and it's just an inherent vulnerability that if you pass pass untrusted data to it you",
    "start": "517000",
    "end": "523518"
  },
  {
    "text": "get arbitrary code execution and we as users of python have to know about this to stay",
    "start": "523519",
    "end": "530000"
  },
  {
    "text": "safe so the problem is that machine learning is a new field so python okay we're all seasoned we know about it but",
    "start": "530000",
    "end": "537160"
  },
  {
    "text": "machine learning is a new field so this raises the question question which of these inherent vulnerabilities are out",
    "start": "537160",
    "end": "542600"
  },
  {
    "text": "there which we might not know about right uh so inherent vulnerabilities are scary because there's no cves there's no",
    "start": "542600",
    "end": "549680"
  },
  {
    "text": "software patches either we know about them or we don't okay so let's start uh with some",
    "start": "549680",
    "end": "556839"
  },
  {
    "text": "inherent vulnerabilities in machine learning so this is probably the most well-known one but it's also the most dangerous one and uh just models are",
    "start": "556839",
    "end": "564839"
  },
  {
    "text": "code so what does that mean some model formats actually support a feature code",
    "start": "564839",
    "end": "570480"
  },
  {
    "text": "execution on load so you would think a model is just data but no when you load",
    "start": "570480",
    "end": "576519"
  },
  {
    "text": "these specific model formats they could be rigged to execute code uh and by the",
    "start": "576519",
    "end": "581959"
  },
  {
    "text": "way if this is the first time you heard about this welcome to the club I was quite surprised as well to hear about",
    "start": "581959",
    "end": "587040"
  },
  {
    "text": "this uh and here you can see some model formats that support this feature and uh some that doesn't but a lot of people",
    "start": "587040",
    "end": "594240"
  },
  {
    "text": "think it's only for pickle based models but no there's a lot of other machine learning model types that support this",
    "start": "594240",
    "end": "600560"
  },
  {
    "text": "so how does it look like so here we have a decomposition of a kasas H5 model and",
    "start": "600560",
    "end": "606480"
  },
  {
    "text": "the exact details uh rely on the specific model format but in Kos H5 there's base 64 data uh it's a l it's",
    "start": "606480",
    "end": "613760"
  },
  {
    "text": "called a Lambda layer it's a layer that runs code and you can see uh it's just decoded bytes and in the end if we",
    "start": "613760",
    "end": "619640"
  },
  {
    "text": "decompile these bytes it's just a python code object that sits inside the binary of uh of the model so the problem is",
    "start": "619640",
    "end": "627480"
  },
  {
    "text": "that the user they just wanted to load a model and use it right query it get predictions and now they have uh code",
    "start": "627480",
    "end": "634440"
  },
  {
    "text": "execution that they didn't expect so we're going to see how this fact actually causes a lot of attacks later",
    "start": "634440",
    "end": "642200"
  },
  {
    "text": "on okay so models can be code but surely we can load untrusted data sets right",
    "start": "642200",
    "end": "648920"
  },
  {
    "text": "it's just CSV data or parette data it's simple data it shouldn't cause code",
    "start": "648920",
    "end": "654279"
  },
  {
    "text": "execution so actually depending on the format this could also cause some trouble",
    "start": "654279",
    "end": "660040"
  },
  {
    "text": "so uh very uh big uh very maybe well-known example is in the hugging",
    "start": "660040",
    "end": "666000"
  },
  {
    "text": "face framework uh so sorry in the hugging face uh public repository so",
    "start": "666000",
    "end": "671440"
  },
  {
    "text": "this is a public repository that you can upload both models and data sets and it's like npm and pii you just upload",
    "start": "671440",
    "end": "678720"
  },
  {
    "text": "things there and everybody can consume it uh so they uh have a data sets",
    "start": "678720",
    "end": "683920"
  },
  {
    "text": "Library uh and they uh it allows you to load a download and uh load the data dat",
    "start": "683920",
    "end": "689480"
  },
  {
    "text": "set with just two lines of code you call low data set you give it the name of the remote repository of the data set and it",
    "start": "689480",
    "end": "696200"
  },
  {
    "text": "will just download it loaded okay so this is a for example a",
    "start": "696200",
    "end": "701399"
  },
  {
    "text": "CSV data set and we have some textual data inside the data doar uh but what's this python file",
    "start": "701399",
    "end": "708200"
  },
  {
    "text": "doing here so uh you probably guessed uh but uh this API will also happily",
    "start": "708200",
    "end": "714600"
  },
  {
    "text": "actually execute code for you uh this is part of a feature of uh like uh",
    "start": "714600",
    "end": "719760"
  },
  {
    "text": "pre-training the the data the data set so if you don't know about this feature",
    "start": "719760",
    "end": "725079"
  },
  {
    "text": "and this is for example the full prototype of of this function there's an argument called trust remote code and",
    "start": "725079",
    "end": "731639"
  },
  {
    "text": "it's uh by default it's true so if you just call this function and give it an",
    "start": "731639",
    "end": "736800"
  },
  {
    "text": "un uh an untrusted data set uh you don't just get the data set but you also get",
    "start": "736800",
    "end": "743199"
  },
  {
    "text": "python code running on your machine so a machine learning or data engineer can easily not know about this functionality",
    "start": "743199",
    "end": "749440"
  },
  {
    "text": "right they're just calling the API and they're getting code execution another inherent vulnerability",
    "start": "749440",
    "end": "755760"
  },
  {
    "text": "is in Jupiter notebook or Jupiter lab so uh Jupiter is a really amazing tool it's really loved by data scientists and for",
    "start": "755760",
    "end": "762680"
  },
  {
    "text": "those that are not familiar with it it's a web application and it allows you to write python code blocks uh both python",
    "start": "762680",
    "end": "770480"
  },
  {
    "text": "code blocks and uh documentation blocks and then you can run each block separately and get the output from that",
    "start": "770480",
    "end": "776440"
  },
  {
    "text": "block so this is really amazing for Interac Ive model testing and I use it all the time when I'm working with",
    "start": "776440",
    "end": "782800"
  },
  {
    "text": "machine learning models so so what you might uh know or not know about is",
    "start": "782800",
    "end": "788199"
  },
  {
    "text": "inherently the output of each uh python code block and here's an example that uh outputs HTML uh so it it doesn't just",
    "start": "788199",
    "end": "796600"
  },
  {
    "text": "show you text it can output HTML and graphs and all sorts of things and uh this HTML output can also have",
    "start": "796600",
    "end": "803440"
  },
  {
    "text": "JavaScript in it actually uh what we learned is that this out put is",
    "start": "803440",
    "end": "809639"
  },
  {
    "text": "completely un sandbox so this JavaScript code that may be there has full access to the Dom it it can manipulate the",
    "start": "809639",
    "end": "816839"
  },
  {
    "text": "entire web application so for example uh because",
    "start": "816839",
    "end": "821959"
  },
  {
    "text": "Jupiter is a web application then in the end it allows you running un sandbox python code if you control Jupiter if",
    "start": "821959",
    "end": "829360"
  },
  {
    "text": "you control the web application then you can just run un sandbox code you can run whatever python code you want so this is",
    "start": "829360",
    "end": "835800"
  },
  {
    "text": "an example uh JavaScript payload that we wrote and when you run it it it takes it",
    "start": "835800",
    "end": "840839"
  },
  {
    "text": "manipulates the Dom to add a new code cell and fill it with python code and run that code uh so when you run it it",
    "start": "840839",
    "end": "848040"
  },
  {
    "text": "looks like this uh so you run the JavaScript and then you get a new code cell at the bottom and you can see we",
    "start": "848040",
    "end": "854560"
  },
  {
    "text": "run calculator because we love running calculator uh so this JavaScript code",
    "start": "854560",
    "end": "860279"
  },
  {
    "text": "can actually cause python code execution um so you might think wait is this",
    "start": "860279",
    "end": "866320"
  },
  {
    "text": "really a problem like okay so just don't run untrusted JavaScript code in Jupiter",
    "start": "866320",
    "end": "872399"
  },
  {
    "text": "right and then you won't get RC um maybe some of you are familiar with the",
    "start": "872399",
    "end": "877880"
  },
  {
    "text": "situation that the browser will run untrusted JavaScript code so uh yeah of",
    "start": "877880",
    "end": "884120"
  },
  {
    "text": "course I'm talking about uh xss uh so for example this is a CV this is a vulnerability that we discovered as",
    "start": "884120",
    "end": "890680"
  },
  {
    "text": "part of this research uh that when you run uh untrusted mlflow recipes you get",
    "start": "890680",
    "end": "897279"
  },
  {
    "text": "xss uh so what's an ml flow recipe it's just a yaml file I'm not going to Deep dive into that because uh it doesn't",
    "start": "897279",
    "end": "904399"
  },
  {
    "text": "matter for the security impact but what you need to know it's a format that's specific to ml flow and usually when you",
    "start": "904399",
    "end": "910880"
  },
  {
    "text": "load a yaml file you don't get unrusted code execution uh that's mainly the",
    "start": "910880",
    "end": "916360"
  },
  {
    "text": "point so what we discovered is that due to lack of sanitization running a recipe",
    "start": "916360",
    "end": "921720"
  },
  {
    "text": "can emit unfiltered H HTML and of course JavaScript so for example a data",
    "start": "921720",
    "end": "927759"
  },
  {
    "text": "scientist can get uh uh uh sorry can get",
    "start": "927759",
    "end": "933279"
  },
  {
    "text": "a malicious recipe from an untrusted Source or from a man in the middle of tank and then when you run that recipe",
    "start": "933279",
    "end": "939519"
  },
  {
    "text": "and you can see we injected uh some JavaScript into a specific part of the recipe boom you get xss and the problem",
    "start": "939519",
    "end": "948600"
  },
  {
    "text": "again when an this xss is in the Jupiter environment then this xss is completely",
    "start": "948600",
    "end": "954399"
  },
  {
    "text": "equivalent to remote code execution so now we need to treat all Xs vulnerabilities in machine learning",
    "start": "954399",
    "end": "961199"
  },
  {
    "text": "libraries as potential arbitrary code execution so this just elevates xss into a whole different level because the data",
    "start": "961199",
    "end": "968240"
  },
  {
    "text": "scientist they get xss and they might be using Jupiter at that point so this is another big",
    "start": "968240",
    "end": "974600"
  },
  {
    "text": "problem okay so now I want to talk a bit more about implementation issues and not inherent vulnerabilities so these are",
    "start": "974600",
    "end": "981240"
  },
  {
    "text": "vulnerabilities that uh are not inherent due to the use format but there are classic issues that are more likely to",
    "start": "981240",
    "end": "987600"
  },
  {
    "text": "plague mlops platforms or just cause a severe impact on mlops platforms uh so",
    "start": "987600",
    "end": "993560"
  },
  {
    "text": "at least in this case it's not inherent vulnerability so when there is such an implementation vulnerability it will get",
    "start": "993560",
    "end": "999880"
  },
  {
    "text": "a cve and it will get a fix uh but spoiler alert we're going to change these inherent vulnerabilities and",
    "start": "999880",
    "end": "1005839"
  },
  {
    "text": "implementation vulnerabilities really nicely together to see full attack chains so let's go over a few examples",
    "start": "1005839",
    "end": "1012120"
  },
  {
    "text": "of uh implementation issues so first of all uh lack of authentication so if you",
    "start": "1012120",
    "end": "1017199"
  },
  {
    "text": "remember I talked about MLP pipelines and as an attacker if the mlops platform",
    "start": "1017199",
    "end": "1022959"
  },
  {
    "text": "supports a pipeline and I have enough permissions to edit the pipeline then I can just run arbitrary code because it's",
    "start": "1022959",
    "end": "1030400"
  },
  {
    "text": "just I can create a new Pipeline with arbitrary python code so uh this is I like to call it code execution as a",
    "start": "1030400",
    "end": "1036720"
  },
  {
    "text": "feature so some of these platforms require that the pipeline runs inside a Docker container but some of them don't",
    "start": "1036720",
    "end": "1043319"
  },
  {
    "text": "and we'll we'll see that and you would think that with remote code execution as a feature then probably the",
    "start": "1043319",
    "end": "1049480"
  },
  {
    "text": "authentication on these platforms is really strong with role-based Access Control right uh of course as you would",
    "start": "1049480",
    "end": "1057280"
  },
  {
    "text": "expect the answer is uh no um so a research highlighted uh that many Frameworks that support pipelines they",
    "start": "1057280",
    "end": "1064320"
  },
  {
    "text": "either don't support built-in authentication or uh they tell you oh yeah you should manage authentication",
    "start": "1064320",
    "end": "1069960"
  },
  {
    "text": "yourself like deployer reverse authenticating proxy or something like that so that means that simple",
    "start": "1069960",
    "end": "1075480"
  },
  {
    "text": "deployment of these platforms is just remote code execution as a feature uh",
    "start": "1075480",
    "end": "1081720"
  },
  {
    "text": "just there's no def defense and you can just Define a new pipeline so any user can just run arbitrary",
    "start": "1081720",
    "end": "1087720"
  },
  {
    "text": "code so some of these cves uh most of these issues don't get a cve but some do",
    "start": "1087720",
    "end": "1094600"
  },
  {
    "text": "and this is an example of uh something that did in the ray framework so it's exactly the same issue it's basically a",
    "start": "1094600",
    "end": "1101200"
  },
  {
    "text": "framework that doesn't have uh authentication and it allows you to submit arbitrary jobs which is just",
    "start": "1101200",
    "end": "1107880"
  },
  {
    "text": "running arbitrary Python and I want you to look at the reason that the CV was",
    "start": "1107880",
    "end": "1113240"
  },
  {
    "text": "disputed so I I'll read it out as as well but Rey has stated in the",
    "start": "1113240",
    "end": "1118480"
  },
  {
    "text": "documentation is not intended for use outside of a strictly controlled Network environment uh I mean it is this a",
    "start": "1118480",
    "end": "1125320"
  },
  {
    "text": "reasonable dispute claim in 2024 like we didn't bother adding security to our",
    "start": "1125320",
    "end": "1130400"
  },
  {
    "text": "demon I don't think it's a reasonable dispute claim um so what do you think do",
    "start": "1130400",
    "end": "1136240"
  },
  {
    "text": "you think uh users actually read the the documentation and didn't deploy this framework to",
    "start": "1136240",
    "end": "1142720"
  },
  {
    "text": "production well of course they they deployed it to production uh so this was highlighted by a great research by igo's",
    "start": "1142720",
    "end": "1150159"
  },
  {
    "text": "security team so this issue the lack of authentication with pipelines was already exploited on thousands of",
    "start": "1150159",
    "end": "1156520"
  },
  {
    "text": "servers and real malicious actors were running uh cryptojacking crypto mining",
    "start": "1156520",
    "end": "1161799"
  },
  {
    "text": "whatever you want and why wouldn't them it's like it's thousands of servers that are exposed to the internet they don't",
    "start": "1161799",
    "end": "1167960"
  },
  {
    "text": "have any authentic ation and they support remote code execution as a feature I would exploit it so these are",
    "start": "1167960",
    "end": "1174960"
  },
  {
    "text": "servers that people happily deployed to production without knowing the repercussions so just to summarize this",
    "start": "1174960",
    "end": "1181080"
  },
  {
    "text": "point uh many open source mlops platforms uh seem to lack authentication and when it's coupled with the pipeline",
    "start": "1181080",
    "end": "1188039"
  },
  {
    "text": "feature it's just remote RC sorry RC as a",
    "start": "1188039",
    "end": "1193159"
  },
  {
    "text": "feature okay so another vulnerability that has a very increased Effectiveness against mlop platforms is a container",
    "start": "1193159",
    "end": "1199880"
  },
  {
    "text": "Escape so mlops platforms use Docker containers in two scenarios the first scenario is that uh when a pipeline is",
    "start": "1199880",
    "end": "1207240"
  },
  {
    "text": "running then some of the more robust uh mlops platforms they run the pipeline code inside a Docker and then at least",
    "start": "1207240",
    "end": "1213720"
  },
  {
    "text": "it's contained it's not all of them but at least some of them uh so again if an attacker can edit the pipeline the",
    "start": "1213720",
    "end": "1220280"
  },
  {
    "text": "attacker can run code inside the docker in this case and the second scenario is that uh a model that is served is loaded",
    "start": "1220280",
    "end": "1228720"
  },
  {
    "text": "inside a Docker container and not just on the server itself uh so here whoever that can upload models can also run code",
    "start": "1228720",
    "end": "1236200"
  },
  {
    "text": "because again models are code and we'll see this so in both of these scenarios attackers with sufficient privileges can",
    "start": "1236200",
    "end": "1243440"
  },
  {
    "text": "execute code inside the container but breaking the container will allow the attacker to move laterally within the",
    "start": "1243440",
    "end": "1249320"
  },
  {
    "text": "organization so I want to focus on model serving as a breakout Target because",
    "start": "1249320",
    "end": "1254799"
  },
  {
    "text": "this uh endpoint is more likely to be exposed to attackers you it requires less privileges to serve",
    "start": "1254799",
    "end": "1261960"
  },
  {
    "text": "a new model than to edit a pipeline okay so in our research we",
    "start": "1261960",
    "end": "1267720"
  },
  {
    "text": "looked at two different platforms that provided model serving so K serve and Selden core so again an attacker for an",
    "start": "1267720",
    "end": "1274960"
  },
  {
    "text": "attacker it's very easy to get um code executed inside the serving container",
    "start": "1274960",
    "end": "1280919"
  },
  {
    "text": "the attacker just uploads a malicious model and boom We Run code inside the serving container because again models",
    "start": "1280919",
    "end": "1287000"
  },
  {
    "text": "are code once the model is load it just runs code so in kerve the architecture",
    "start": "1287000",
    "end": "1292320"
  },
  {
    "text": "here was actually good so you can see that the model in the first pod it doesn't have access to any other model",
    "start": "1292320",
    "end": "1298559"
  },
  {
    "text": "that is currently served uh by kerve so with just code execution we couldn't",
    "start": "1298559",
    "end": "1303679"
  },
  {
    "text": "achieve lateral movement or uh access sensitive resources but the problem is",
    "start": "1303679",
    "end": "1308720"
  },
  {
    "text": "that of course container Escape exists right so uh uh if the model's payload",
    "start": "1308720",
    "end": "1315320"
  },
  {
    "text": "would be laced with uh let's say local kernel kernel local privilege escalation",
    "start": "1315320",
    "end": "1320760"
  },
  {
    "text": "or any other container Escape then after the model runs it could escape the container and just have lateral movement",
    "start": "1320760",
    "end": "1327640"
  },
  {
    "text": "so this is a good case but a more problematic case for example Seldon core which is also a model serving mlops",
    "start": "1327640",
    "end": "1334760"
  },
  {
    "text": "platform and inference server so here at least they had a Docker container that's",
    "start": "1334760",
    "end": "1340000"
  },
  {
    "text": "good so uh all the model uh all the models are running inside a container but here it's not a good architecture",
    "start": "1340000",
    "end": "1346360"
  },
  {
    "text": "because all of the models are running inside the same same container so why is this bad so first an attacker can still",
    "start": "1346360",
    "end": "1352880"
  },
  {
    "text": "upload a malicious model of course the malicious model will appear in the serving container and then the malicious",
    "start": "1352880",
    "end": "1359799"
  },
  {
    "text": "model can hijack the container but here there's a problem because all of the other models are there as well the",
    "start": "1359799",
    "end": "1365559"
  },
  {
    "text": "attacker can do a few things first of all the attacker can poison one of these models and because this is an inference",
    "start": "1365559",
    "end": "1371880"
  },
  {
    "text": "server now it means we control all the responses to all the queries that the models uh support so for example if a",
    "start": "1371880",
    "end": "1379159"
  },
  {
    "text": "user asks uh what's the best PPI package for uh computer vision now the server uh",
    "start": "1379159",
    "end": "1385279"
  },
  {
    "text": "will answer yeah check out the my cool remote access Tool uh version 99 we control all the replies from from the",
    "start": "1385279",
    "end": "1392320"
  },
  {
    "text": "server from now on the other thing that uh because all of the models are in the same container the attacker can now",
    "start": "1392320",
    "end": "1399000"
  },
  {
    "text": "exfiltrate these models to his own cloud just steal the models and this is very",
    "start": "1399000",
    "end": "1404760"
  },
  {
    "text": "problematic because you know companies like open AI if you steal Che GPT 4 it's probably a few hundreds of millions of",
    "start": "1404760",
    "end": "1411559"
  },
  {
    "text": "dollars if if not more so you don't want this to happen okay and and the last",
    "start": "1411559",
    "end": "1417679"
  },
  {
    "text": "implementation uh issue that I want to talk about is that sadly I think we can expect a high number of security issues",
    "start": "1417679",
    "end": "1424440"
  },
  {
    "text": "uh in upcoming years so why is that it's just because of the immaturity of these mlops platforms so mlops platforms are",
    "start": "1424440",
    "end": "1431440"
  },
  {
    "text": "still fresh the oldest one we saw is about 5 years old the open source ones at least uh and AI experts are usually",
    "start": "1431440",
    "end": "1439320"
  },
  {
    "text": "not Security Experts they care about AI they don't they build the platform for AI first and not Security First so this",
    "start": "1439320",
    "end": "1446520"
  },
  {
    "text": "is very evident from the number of cves we had in the last couple years for example uh so in ml flow for example uh",
    "start": "1446520",
    "end": "1454400"
  },
  {
    "text": "we had 15 critical and uh 23 high cves this is an abnormally High number of",
    "start": "1454400",
    "end": "1460080"
  },
  {
    "text": "cves and for example the critical ones were also unauthenticated RC like think really bad stuff and we can compare it",
    "start": "1460080",
    "end": "1467120"
  },
  {
    "text": "to a robust project like Jenkins a devops server and in these past two years they had two critical and nine",
    "start": "1467120",
    "end": "1474039"
  },
  {
    "text": "High CVS although Jenkins is much more highly scrutinized than EML flow and I'm",
    "start": "1474039",
    "end": "1479880"
  },
  {
    "text": "not picking on mlflow here by the way for example again the jrog research team does a lot of external disclosures and",
    "start": "1479880",
    "end": "1487120"
  },
  {
    "text": "the biggest category where we did disclosures is definitely mlops uh this year it will 20 CVS and other categories",
    "start": "1487120",
    "end": "1494880"
  },
  {
    "text": "we found a lot less Okay cool so now we have all of the",
    "start": "1494880",
    "end": "1500760"
  },
  {
    "text": "pieces of the puzzle we understood inherent vulnerabilities and implementation vulnerabilities so let's",
    "start": "1500760",
    "end": "1505840"
  },
  {
    "text": "see how we would take advantage of uh these vulnerabilities in the real world let's see a first attack chain where an",
    "start": "1505840",
    "end": "1512559"
  },
  {
    "text": "attacker could infiltrate the entire organization from outside uh by using U malicious models to infect clients so",
    "start": "1512559",
    "end": "1520559"
  },
  {
    "text": "this is relevant for model Registries such as ml flow weights and biases and Zen ml for example which we researched",
    "start": "1520559",
    "end": "1527840"
  },
  {
    "text": "so first of all the attacker is going to upload a model to a public repository such as hugging face a malicious model",
    "start": "1527840",
    "end": "1535320"
  },
  {
    "text": "and similar to npm and pii malicious package attacks uh we need to entice a",
    "start": "1535320",
    "end": "1540840"
  },
  {
    "text": "data scientist inside the organization or anybody to load our model so we'll have a cool description and it will look",
    "start": "1540840",
    "end": "1547159"
  },
  {
    "text": "good but in the end they they will load our model and by the way it's very easy it's three lines of code uh to load a",
    "start": "1547159",
    "end": "1554120"
  },
  {
    "text": "model to download and load a model from hugging face and once these three lines of code run Boom the attacker has a",
    "start": "1554120",
    "end": "1560520"
  },
  {
    "text": "foothold inside organization because we ran code on that data scientist okay so",
    "start": "1560520",
    "end": "1566159"
  },
  {
    "text": "now the data scientist uh consumed the model and now the attacker is going to want to breach the model registry which",
    "start": "1566159",
    "end": "1573120"
  },
  {
    "text": "is inside the organization so how will the attacker do that so we saw a lot of them don't have any",
    "start": "1573120",
    "end": "1579120"
  },
  {
    "text": "authentication even if they do have authentication it makes a lot of sense that the data scientist will have stored",
    "start": "1579120",
    "end": "1584320"
  },
  {
    "text": "credentials because the data scientist is working with the model registry and lastly we saw that there are a lot of",
    "start": "1584320",
    "end": "1590120"
  },
  {
    "text": "cves so the attacker can use a zero day or one day in order to exploit the model",
    "start": "1590120",
    "end": "1595559"
  },
  {
    "text": "registry so now the model registry is infected and the attacker took all of the models in the registry and added",
    "start": "1595559",
    "end": "1601720"
  },
  {
    "text": "back door code to them uh so now it means anybody that will load these models boom they get code execution so",
    "start": "1601720",
    "end": "1608919"
  },
  {
    "text": "as just regular organization workflow of course users and servers and cicd",
    "start": "1608919",
    "end": "1614159"
  },
  {
    "text": "they're going to load these models from the model registry this is how it works and uh again to load a model from a",
    "start": "1614159",
    "end": "1621120"
  },
  {
    "text": "registry for example these are four lines of code that will remote uh download the latest model uh from mlflow",
    "start": "1621120",
    "end": "1627960"
  },
  {
    "text": "for example um and as soon as they load the model they don't have to query they",
    "start": "1627960",
    "end": "1633679"
  },
  {
    "text": "don't have to be evaluate they don't have to do anything we ran code on everybody and you can see how this is a",
    "start": "1633679",
    "end": "1639399"
  },
  {
    "text": "worm that can keep propagating into different Registries and users and infect the entire",
    "start": "1639399",
    "end": "1646279"
  },
  {
    "text": "organization okay so now let let's flip the script and let's see how we can use malicious models not to infect clients",
    "start": "1646440",
    "end": "1652600"
  },
  {
    "text": "but now we're going to infect servers so these scenarios are relevant for mlops platforms that have uh inference servers",
    "start": "1652600",
    "end": "1659399"
  },
  {
    "text": "or support model as a model serving so for example Seldon core and kerve from",
    "start": "1659399",
    "end": "1665320"
  },
  {
    "text": "our research so let's say the attacker is already inside the organization or even on the cloud so the attacker",
    "start": "1665320",
    "end": "1671080"
  },
  {
    "text": "uploads a new model into the inference server and like we like we've seen it gets into a container and this is the",
    "start": "1671080",
    "end": "1677720"
  },
  {
    "text": "good case where there is a container it might not even have a container so models are code so the model is running",
    "start": "1677720",
    "end": "1684240"
  },
  {
    "text": "code and we took over the container and now we're going to lace the payload of the malicious model with a container",
    "start": "1684240",
    "end": "1691120"
  },
  {
    "text": "Escape so this can either be a cve or a platform specific container Escape like we just saw in the kerve framework and",
    "start": "1691120",
    "end": "1699600"
  },
  {
    "text": "from there the attacker can uh continue spreading inside our organization because they did a container escape and",
    "start": "1699600",
    "end": "1705039"
  },
  {
    "text": "they're just living in the organization Network okay so to uh a cool part is that we can",
    "start": "1705039",
    "end": "1711840"
  },
  {
    "text": "summarize and see exactly which mlops feature enables which attack and also",
    "start": "1711840",
    "end": "1717200"
  },
  {
    "text": "which post exploitation technique they're vulnerable to and what are the Frameworks that are vulnerable to these",
    "start": "1717200",
    "end": "1723039"
  },
  {
    "text": "attacks so for example if you're deploying a framework that allows for model serving so now you know that",
    "start": "1723039",
    "end": "1728559"
  },
  {
    "text": "anybody that can serve a model can actually just run code on that framework",
    "start": "1728559",
    "end": "1734080"
  },
  {
    "text": "uh so you would make sure that the environment is very hardened against container Escape for example okay so let's have some fun",
    "start": "1734080",
    "end": "1741200"
  },
  {
    "text": "let's exploit a zero day um so our research team recently disclosed the privilege escalation",
    "start": "1741200",
    "end": "1747440"
  },
  {
    "text": "vulnerability and weights and biases so I want to exploit it uh for legal purposes I have to clarify it got a CV",
    "start": "1747440",
    "end": "1753720"
  },
  {
    "text": "ID a few days ago of course so it's not a zero day anymore there's a fix uh but",
    "start": "1753720",
    "end": "1758960"
  },
  {
    "text": "it's a very new one day let's say so we're going to simulate hijacking uh the",
    "start": "1758960",
    "end": "1764279"
  },
  {
    "text": "weights and biases model registry using a remote privilege escalation uh and then we're going to infect all of the",
    "start": "1764279",
    "end": "1770159"
  },
  {
    "text": "models in that model registry and then a data scientist is going to load one of these models and get infected as",
    "start": "1770159",
    "end": "1778518"
  },
  {
    "text": "well okay so I already have set up here uh the weight and basses locally so I",
    "start": "1780440",
    "end": "1787279"
  },
  {
    "text": "already have a project with a model and a data set so this model for example is the amnest model it allows you to do",
    "start": "1787279",
    "end": "1795159"
  },
  {
    "text": "optical character recognition and this is one what we're going to infect so let's run uh let's simulate uh",
    "start": "1795159",
    "end": "1803120"
  },
  {
    "text": "victim which is the let's simulate a victim which is a",
    "start": "1803120",
    "end": "1808600"
  },
  {
    "text": "data scientist and the data scientist is going to run a common workload uh for a",
    "start": "1808600",
    "end": "1814120"
  },
  {
    "text": "data scientist and uh while I'm running it in the background but while it's loading I",
    "start": "1814120",
    "end": "1819440"
  },
  {
    "text": "want to show you uh the the workload is evaluating uh just taking the latest model from the model registry and then",
    "start": "1819440",
    "end": "1826000"
  },
  {
    "text": "evaluating it with a local data set so it's going to uh load the latest model from weight and biases and this is the",
    "start": "1826000",
    "end": "1832159"
  },
  {
    "text": "scary part because we're going to see how he they get infected because of that",
    "start": "1832159",
    "end": "1837320"
  },
  {
    "text": "then it's going to load a local data set it's going to evaluate the new model so it's running an evaluation and getting",
    "start": "1837320",
    "end": "1843640"
  },
  {
    "text": "an accuracy score of this new model that we just uh loaded and then we're going to log the score to weights and",
    "start": "1843640",
    "end": "1851320"
  },
  {
    "text": "biases okay so they we ran the this uh this common workload it ended we got",
    "start": "1851320",
    "end": "1858360"
  },
  {
    "text": "accuracy and law score everything is fine okay uh so now as an attacker I",
    "start": "1858360",
    "end": "1865200"
  },
  {
    "text": "want to hijack the model registry I want to hijack weights and biases so what I'm going to do I'm going",
    "start": "1865200",
    "end": "1871960"
  },
  {
    "text": "to run a privilege escalation attack so this is a again the zero day that we discovered and disclosed so this is a",
    "start": "1871960",
    "end": "1878760"
  },
  {
    "text": "remote path reversal privilege arbitrary F leak so uh actually it's a very simple",
    "start": "1878760",
    "end": "1885000"
  },
  {
    "text": "attack but very effective attack so you can see I'm doing a curl request and uh as part of the curl request I'm uh going",
    "start": "1885000",
    "end": "1891960"
  },
  {
    "text": "to a specific endpoint but now I have patch reversal so I can leak any file I want I can leak Etc Shadow it runs as",
    "start": "1891960",
    "end": "1899000"
  },
  {
    "text": "root but what I'm going to leak I'm going to leak all of the API keys from thewait and bias server and this will uh",
    "start": "1899000",
    "end": "1906360"
  },
  {
    "text": "give us the admin's API key and then we can do whatever we want uh so let's run",
    "start": "1906360",
    "end": "1914480"
  },
  {
    "text": "that uh so now it's it's going to open a browser just to grab my attacker cookie",
    "start": "1915840",
    "end": "1920960"
  },
  {
    "text": "it needs that for uh for doing the attack good boom Okay cool so uh we got the we",
    "start": "1920960",
    "end": "1929799"
  },
  {
    "text": "leaked the API Keys let's see uh what it looks",
    "start": "1929799",
    "end": "1934919"
  },
  {
    "text": "like okay so this is the file that we actually leaked so it's a binary file it contains all sorts of things but uh it",
    "start": "1939440",
    "end": "1946120"
  },
  {
    "text": "also contains the API keys so this part uh so now just after very simple parsing",
    "start": "1946120",
    "end": "1953639"
  },
  {
    "text": "we have the admin's API key so the attack was uh successful",
    "start": "1953639",
    "end": "1959240"
  },
  {
    "text": "that's great and now I'm going to run uh an infection so I'm going to run it in the",
    "start": "1959240",
    "end": "1966360"
  },
  {
    "text": "background okay so what does the infection do so first of all we're going to log in as admin because we have the",
    "start": "1966360",
    "end": "1972200"
  },
  {
    "text": "dumped a admin API key and that will allow us to do a few things we're going to download the model that that I just",
    "start": "1972200",
    "end": "1978200"
  },
  {
    "text": "showed you and we're going to lace it with a a Lambda layer so we're going to lace it with code execution uh I love",
    "start": "1978200",
    "end": "1985200"
  },
  {
    "text": "running calculat so this is what uh my exploit is but you can run anything you want here and the cool thing is is",
    "start": "1985200",
    "end": "1991760"
  },
  {
    "text": "really I'm I'm downloading an existing model and I'm adding a layer on top of it which will cause uh code execution",
    "start": "1991760",
    "end": "1998440"
  },
  {
    "text": "and nobody will be none the wiser like the model still works fine and everything works fine but we just get",
    "start": "1998440",
    "end": "2004200"
  },
  {
    "text": "code execution uh and then we save the model and we just upload it to weights and bies with the same name but with a new",
    "start": "2004200",
    "end": "2012120"
  },
  {
    "text": "version okay great so it seems that the infection worked uh I uploaded the",
    "start": "2012120",
    "end": "2017159"
  },
  {
    "text": "infected model so now I'm going to run the exact same script on the victim and",
    "start": "2017159",
    "end": "2023760"
  },
  {
    "text": "if you remember what this script does it just loads the latest model",
    "start": "2023760",
    "end": "2029759"
  },
  {
    "text": "right so it's going to download the the model",
    "start": "2030760",
    "end": "2036399"
  },
  {
    "text": "Cel uh so yeah the model still works the same everything is the same but now we",
    "start": "2040600",
    "end": "2045760"
  },
  {
    "text": "can hijack the entire organization because we hijack all of the models and run code with",
    "start": "2045760",
    "end": "2051838"
  },
  {
    "text": "it thank you okay so uh this was a bit Grim we",
    "start": "2057280",
    "end": "2064480"
  },
  {
    "text": "showed a lot of problems let's talk about some solutions uh um so first of all our research team released an open",
    "start": "2064480",
    "end": "2070960"
  },
  {
    "text": "source extension for Jupiter which actually mitigates uh the xss attacks that we saw it does it by sandboxing the",
    "start": "2070960",
    "end": "2078358"
  },
  {
    "text": "output elements so now the output elements doesn't have access to the Dom",
    "start": "2078359",
    "end": "2083440"
  },
  {
    "text": "um and you wouldn't be able to turn an xss into full rce so we can install this",
    "start": "2083440",
    "end": "2088800"
  },
  {
    "text": "uh right now in Jupiter lab's extension manager it's called a xss guard we",
    "start": "2088800",
    "end": "2094000"
  },
  {
    "text": "couldn't find a better name but yeah uh something that changed actually after we submitted a talk and is very",
    "start": "2094000",
    "end": "2100560"
  },
  {
    "text": "good so hugging face actually realized that maybe running code by default uh is",
    "start": "2100560",
    "end": "2106240"
  },
  {
    "text": "not that good uh so they actually changed the flag of uh of that API call that I showed and now it's true by",
    "start": "2106240",
    "end": "2112960"
  },
  {
    "text": "default but uh to benefit from that you would need to upgrade to the latest version of the data sets Library so",
    "start": "2112960",
    "end": "2119440"
  },
  {
    "text": "please do that uh but while this is fixed I still urge you to not uh load",
    "start": "2119440",
    "end": "2125040"
  },
  {
    "text": "untrusted data sets because other libraries and other Frameworks they can use a data set format that supports code",
    "start": "2125040",
    "end": "2132160"
  },
  {
    "text": "execution as a feature let's say pickle for example uh so at least now this is",
    "start": "2132160",
    "end": "2137320"
  },
  {
    "text": "safe but still something to be worry about okay so uh what did we learn today",
    "start": "2137320",
    "end": "2143839"
  },
  {
    "text": "and what do you need to pay attention to when you're deploying an mlops platform so first of all check for the three",
    "start": "2143839",
    "end": "2150319"
  },
  {
    "text": "features that we mentioned uh check if your mlops platform supports it so uh ml pipelines model serving model registry",
    "start": "2150319",
    "end": "2158079"
  },
  {
    "text": "if your mlops platform supports it but you're not explicitly using it so please",
    "start": "2158079",
    "end": "2163119"
  },
  {
    "text": "disable it because you saw the security holes that it causes you should also check that the pipelines and the model",
    "start": "2163119",
    "end": "2170680"
  },
  {
    "text": "serving is using a Docker container because if not it's very easy to uh run",
    "start": "2170680",
    "end": "2176079"
  },
  {
    "text": "uncontained uh code uh and also like I showed check that you actually have",
    "start": "2176079",
    "end": "2181240"
  },
  {
    "text": "authentication in your mlops platform and if not then you can deploy a reverse",
    "start": "2181240",
    "end": "2186599"
  },
  {
    "text": "proxy or change platform second this is again a big one that models are code so",
    "start": "2186599",
    "end": "2192160"
  },
  {
    "text": "if someone has the Privileges to serve a new model in your inference server they",
    "start": "2192160",
    "end": "2197640"
  },
  {
    "text": "have code execution privileges they can run whatever they want uh you should prefer working with safe model format so",
    "start": "2197640",
    "end": "2203400"
  },
  {
    "text": "like I showed there are some other formats like safe tensors pmml message pack they don't support code execution",
    "start": "2203400",
    "end": "2210280"
  },
  {
    "text": "onload so if you get your organization to use those you're at least safe from that attack unless there's a CV",
    "start": "2210280",
    "end": "2217960"
  },
  {
    "text": "um and brief anybody that loads ml models tell them hey if you're loading an untrusted ml model you're hacked",
    "start": "2217960",
    "end": "2225560"
  },
  {
    "text": "basically and you can also use there's open source and Comm commercial tools that you can uh use to scan models and",
    "start": "2225560",
    "end": "2233359"
  },
  {
    "text": "understand if they're malicious so a good open source one is pickle scan unfortunately it only works for pickle",
    "start": "2233359",
    "end": "2238760"
  },
  {
    "text": "based models but it will tell you if the model is malicious uh if you work with jupyter",
    "start": "2238760",
    "end": "2244040"
  },
  {
    "text": "lab then consider installing our plugin it will just there's no real not a lot of downsides uh it just mitigates xss",
    "start": "2244040",
    "end": "2251560"
  },
  {
    "text": "attacks and uh really to conclude I hope you understood today that your emops",
    "start": "2251560",
    "end": "2256640"
  },
  {
    "text": "platform is a high value Target it allows for massive infection so don't let this happen to you uh talk to your",
    "start": "2256640",
    "end": "2263520"
  },
  {
    "text": "ciso make sure your ciso understands that uh they need to start protecting",
    "start": "2263520",
    "end": "2269000"
  },
  {
    "text": "their mlops platform in the same level that they protect their domain",
    "start": "2269000",
    "end": "2274040"
  },
  {
    "text": "controller thank you very much",
    "start": "2274040",
    "end": "2278520"
  }
]