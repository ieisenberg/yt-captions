[
  {
    "text": "a big focus of ours over the past 6",
    "start": "799",
    "end": "3800"
  },
  {
    "text": "months has been focused on making Lang",
    "start": "3800",
    "end": "6600"
  },
  {
    "text": "chain more composable and we've done",
    "start": "6600",
    "end": "9000"
  },
  {
    "text": "that by introducing Lang chain",
    "start": "9000",
    "end": "10599"
  },
  {
    "text": "expression language and we're moving",
    "start": "10599",
    "end": "12160"
  },
  {
    "text": "towards writing more and more of our",
    "start": "12160",
    "end": "13920"
  },
  {
    "text": "chains and agents in this",
    "start": "13920",
    "end": "16439"
  },
  {
    "text": "way why are we trying to make L chain",
    "start": "16439",
    "end": "19119"
  },
  {
    "text": "more",
    "start": "19119",
    "end": "20359"
  },
  {
    "text": "composable one of the things that we saw",
    "start": "20359",
    "end": "22680"
  },
  {
    "text": "was that when people tried to go from",
    "start": "22680",
    "end": "24320"
  },
  {
    "text": "prototyping to production they often",
    "start": "24320",
    "end": "26720"
  },
  {
    "text": "needed to customize sometimes heavily",
    "start": "26720",
    "end": "28920"
  },
  {
    "text": "customize the the change in agents that",
    "start": "28920",
    "end": "30920"
  },
  {
    "text": "they were using not just the prompts but",
    "start": "30920",
    "end": "33399"
  },
  {
    "text": "also some of the orchestration logic",
    "start": "33399",
    "end": "35360"
  },
  {
    "text": "that was happening whether it be the",
    "start": "35360",
    "end": "36960"
  },
  {
    "text": "data pre-processing the data",
    "start": "36960",
    "end": "38680"
  },
  {
    "text": "postprocessing or even which connections",
    "start": "38680",
    "end": "40840"
  },
  {
    "text": "were being made and in what order and so",
    "start": "40840",
    "end": "43520"
  },
  {
    "text": "by making Lang chain more composable we",
    "start": "43520",
    "end": "45960"
  },
  {
    "text": "want to make it really really easy for",
    "start": "45960",
    "end": "48039"
  },
  {
    "text": "people to take an initial chain which is",
    "start": "48039",
    "end": "50800"
  },
  {
    "text": "constructed with Lang chain expression",
    "start": "50800",
    "end": "52239"
  },
  {
    "text": "language and then modify it as they see",
    "start": "52239",
    "end": "56359"
  },
  {
    "text": "fit we also think that Lang chain",
    "start": "56359",
    "end": "58640"
  },
  {
    "text": "expression language has a lot lot of",
    "start": "58640",
    "end": "60199"
  },
  {
    "text": "benefits that you get out of the box",
    "start": "60199",
    "end": "62640"
  },
  {
    "text": "compared to just writing code to do this",
    "start": "62640",
    "end": "67360"
  },
  {
    "text": "so Lang and expression language is an",
    "start": "67360",
    "end": "68960"
  },
  {
    "text": "orchestration framework and so as an",
    "start": "68960",
    "end": "70840"
  },
  {
    "text": "orchestration framework we've paid",
    "start": "70840",
    "end": "72520"
  },
  {
    "text": "particular attention to a few key points",
    "start": "72520",
    "end": "74439"
  },
  {
    "text": "which we'll highlight somewhat in this",
    "start": "74439",
    "end": "75960"
  },
  {
    "text": "video and then somewhat in specific",
    "start": "75960",
    "end": "77439"
  },
  {
    "text": "videos later on that make it beneficial",
    "start": "77439",
    "end": "80960"
  },
  {
    "text": "to create your applications using this",
    "start": "80960",
    "end": "82880"
  },
  {
    "text": "orchestration framework as opposed to",
    "start": "82880",
    "end": "84560"
  },
  {
    "text": "just code so we have a whole section On",
    "start": "84560",
    "end": "87840"
  },
  {
    "text": "LAN chain expression language in the",
    "start": "87840",
    "end": "89479"
  },
  {
    "text": "docs and a lot of these benefits are",
    "start": "89479",
    "end": "91840"
  },
  {
    "text": "highlighted here so streaming support",
    "start": "91840",
    "end": "94200"
  },
  {
    "text": "which we will have a whole video on is",
    "start": "94200",
    "end": "96759"
  },
  {
    "text": "that that's been a huge focus of Lang",
    "start": "96759",
    "end": "98560"
  },
  {
    "text": "chain expression language streaming is",
    "start": "98560",
    "end": "100040"
  },
  {
    "text": "super important for llm applications and",
    "start": "100040",
    "end": "101720"
  },
  {
    "text": "we want to make sure that any chain and",
    "start": "101720",
    "end": "103520"
  },
  {
    "text": "any agent that you construct using Lang",
    "start": "103520",
    "end": "105640"
  },
  {
    "text": "chain expression language comes with",
    "start": "105640",
    "end": "107560"
  },
  {
    "text": "best-in-class streaming out of the",
    "start": "107560",
    "end": "109920"
  },
  {
    "text": "box async and batch support are also",
    "start": "109920",
    "end": "113520"
  },
  {
    "text": "really popular and necessary modes to",
    "start": "113520",
    "end": "116079"
  },
  {
    "text": "run llm applications in and so we want",
    "start": "116079",
    "end": "118240"
  },
  {
    "text": "to make sure that any application that",
    "start": "118240",
    "end": "120159"
  },
  {
    "text": "you create uh with Lang chain expression",
    "start": "120159",
    "end": "122799"
  },
  {
    "text": "language you can just use in those",
    "start": "122799",
    "end": "125039"
  },
  {
    "text": "manners as well without having to",
    "start": "125039",
    "end": "126759"
  },
  {
    "text": "rewrite code to support async or rewrite",
    "start": "126759",
    "end": "128759"
  },
  {
    "text": "code to support batch we've put a lot of",
    "start": "128759",
    "end": "131319"
  },
  {
    "text": "emphasis on Parallel execution as well",
    "start": "131319",
    "end": "133440"
  },
  {
    "text": "so again llm calls take a long time",
    "start": "133440",
    "end": "136000"
  },
  {
    "text": "often times you want to parallelize",
    "start": "136000",
    "end": "137640"
  },
  {
    "text": "things so that the whole application",
    "start": "137640",
    "end": "139239"
  },
  {
    "text": "doesn't take a long time and so we've",
    "start": "139239",
    "end": "141040"
  },
  {
    "text": "put a lot of emphasis on making that",
    "start": "141040",
    "end": "142440"
  },
  {
    "text": "easy to do retries and fallbacks llms",
    "start": "142440",
    "end": "146000"
  },
  {
    "text": "can uh fail the epis can fail uh they",
    "start": "146000",
    "end": "148680"
  },
  {
    "text": "can output weird responses and so being",
    "start": "148680",
    "end": "150959"
  },
  {
    "text": "able to easily attach um fallbacks to uh",
    "start": "150959",
    "end": "154560"
  },
  {
    "text": "uh either llms or even chains um can be",
    "start": "154560",
    "end": "159440"
  },
  {
    "text": "really important being able to access",
    "start": "159440",
    "end": "162239"
  },
  {
    "text": "intermediate results is also really",
    "start": "162239",
    "end": "164760"
  },
  {
    "text": "really important and so our the the the",
    "start": "164760",
    "end": "166560"
  },
  {
    "text": "Lang chain expression framework we",
    "start": "166560",
    "end": "168000"
  },
  {
    "text": "wanted to make really easy where if if",
    "start": "168000",
    "end": "170120"
  },
  {
    "text": "you create a chain of a few steps and",
    "start": "170120",
    "end": "172120"
  },
  {
    "text": "then you say hey I want I want you know",
    "start": "172120",
    "end": "174159"
  },
  {
    "text": "the the steps the the outputs from this",
    "start": "174159",
    "end": "176400"
  },
  {
    "text": "step or I want the outputs from this",
    "start": "176400",
    "end": "177640"
  },
  {
    "text": "other step you can get those really",
    "start": "177640",
    "end": "179319"
  },
  {
    "text": "really easily and maybe show them to the",
    "start": "179319",
    "end": "181000"
  },
  {
    "text": "user or just use them to",
    "start": "181000",
    "end": "183000"
  },
  {
    "text": "debug and then also we highlighted this",
    "start": "183000",
    "end": "186000"
  },
  {
    "text": "in an earlier video but observability is",
    "start": "186000",
    "end": "188400"
  },
  {
    "text": "a huge reason to use Lang chain",
    "start": "188400",
    "end": "190120"
  },
  {
    "text": "expression language over kind of like",
    "start": "190120",
    "end": "191560"
  },
  {
    "text": "writing the code from scratch we",
    "start": "191560",
    "end": "193120"
  },
  {
    "text": "automatically log all the inputs and",
    "start": "193120",
    "end": "195000"
  },
  {
    "text": "outputs of each step we automatically",
    "start": "195000",
    "end": "197000"
  },
  {
    "text": "log the sequence of events in which they",
    "start": "197000",
    "end": "198959"
  },
  {
    "text": "occur and then we have Lang Smith which",
    "start": "198959",
    "end": "200959"
  },
  {
    "text": "is a great way to kind of see exactly",
    "start": "200959",
    "end": "202799"
  },
  {
    "text": "what's happening and so if you build",
    "start": "202799",
    "end": "204519"
  },
  {
    "text": "something in Lang chain expression",
    "start": "204519",
    "end": "205720"
  },
  {
    "text": "language you get all of that for free um",
    "start": "205720",
    "end": "208480"
  },
  {
    "text": "out of the box",
    "start": "208480",
    "end": "210319"
  },
  {
    "text": "there's a lot of uh resources on L chain",
    "start": "210319",
    "end": "212640"
  },
  {
    "text": "expression language here so we have this",
    "start": "212640",
    "end": "214640"
  },
  {
    "text": "overview uh we have a getting started",
    "start": "214640",
    "end": "216840"
  },
  {
    "text": "page that walks through uh a basic",
    "start": "216840",
    "end": "219879"
  },
  {
    "text": "example um we have uh a page on why to",
    "start": "219879",
    "end": "224000"
  },
  {
    "text": "use l chain expression language and",
    "start": "224000",
    "end": "225480"
  },
  {
    "text": "comparing some of the the code that you",
    "start": "225480",
    "end": "227599"
  },
  {
    "text": "might write um and how it saves a bunch",
    "start": "227599",
    "end": "231040"
  },
  {
    "text": "of time to write it um linkchain",
    "start": "231040",
    "end": "233560"
  },
  {
    "text": "expression language all the objects also",
    "start": "233560",
    "end": "235560"
  },
  {
    "text": "expose a common interface this is really",
    "start": "235560",
    "end": "237599"
  },
  {
    "text": "nice because then you can interact with",
    "start": "237599",
    "end": "239680"
  },
  {
    "text": "any object in the same way and so we",
    "start": "239680",
    "end": "241840"
  },
  {
    "text": "have a uh we have a page on what this",
    "start": "241840",
    "end": "244360"
  },
  {
    "text": "interface is and then we've got a bunch",
    "start": "244360",
    "end": "246280"
  },
  {
    "text": "of howto um guides that cover various uh",
    "start": "246280",
    "end": "250319"
  },
  {
    "text": "uh different components and then we have",
    "start": "250319",
    "end": "252400"
  },
  {
    "text": "some cookbooks as well for doing common",
    "start": "252400",
    "end": "254159"
  },
  {
    "text": "tasks like rag um SQL DBS agents I want",
    "start": "254159",
    "end": "259120"
  },
  {
    "text": "to walk through a a quick notebook that",
    "start": "259120",
    "end": "261280"
  },
  {
    "text": "just highlights some of the initial",
    "start": "261280",
    "end": "263280"
  },
  {
    "text": "Concepts in Lang chain expression",
    "start": "263280",
    "end": "265479"
  },
  {
    "text": "language so first I'll just create a",
    "start": "265479",
    "end": "268120"
  },
  {
    "text": "really simple chain that's just a PRP",
    "start": "268120",
    "end": "269919"
  },
  {
    "text": "llm and then an output parser that",
    "start": "269919",
    "end": "271919"
  },
  {
    "text": "converts the I'm using a chat model here",
    "start": "271919",
    "end": "274199"
  },
  {
    "text": "so it's going to convert the message um",
    "start": "274199",
    "end": "276199"
  },
  {
    "text": "from a message into a string strings are",
    "start": "276199",
    "end": "278199"
  },
  {
    "text": "just generally easier to work with so",
    "start": "278199",
    "end": "281120"
  },
  {
    "text": "what I'm going to do is I'm going to",
    "start": "281120",
    "end": "282080"
  },
  {
    "text": "create the prompt I'm going to create",
    "start": "282080",
    "end": "283479"
  },
  {
    "text": "the model I'm going to create the output",
    "start": "283479",
    "end": "284880"
  },
  {
    "text": "parser and then I can join them together",
    "start": "284880",
    "end": "287280"
  },
  {
    "text": "with this just pipe syntax so I can do",
    "start": "287280",
    "end": "289320"
  },
  {
    "text": "prompt pipe model pipe output parser get",
    "start": "289320",
    "end": "291720"
  },
  {
    "text": "a chain and then I can use the invoke",
    "start": "291720",
    "end": "294280"
  },
  {
    "text": "method the invoke method is a standard",
    "start": "294280",
    "end": "295840"
  },
  {
    "text": "method that all Lang chain expression",
    "start": "295840",
    "end": "297880"
  },
  {
    "text": "language objects expose um and in this",
    "start": "297880",
    "end": "300560"
  },
  {
    "text": "case I'm passing in a dictionary because",
    "start": "300560",
    "end": "303039"
  },
  {
    "text": "the prompt here takes in this key value",
    "start": "303039",
    "end": "305880"
  },
  {
    "text": "mapping so I'm going to call the chain",
    "start": "305880",
    "end": "308199"
  },
  {
    "text": "and I'm going to get back a joke about",
    "start": "308199",
    "end": "310800"
  },
  {
    "text": "bears now I can easily use other methods",
    "start": "310800",
    "end": "314479"
  },
  {
    "text": "um that the Lang chain expression",
    "start": "314479",
    "end": "316080"
  },
  {
    "text": "language exposes so batch will run this",
    "start": "316080",
    "end": "320120"
  },
  {
    "text": "over uh uh both inputs and it runs these",
    "start": "320120",
    "end": "322759"
  },
  {
    "text": "in parallel so it'll it'll handle that",
    "start": "322759",
    "end": "324680"
  },
  {
    "text": "under the hood um uh for you you can",
    "start": "324680",
    "end": "327120"
  },
  {
    "text": "control the concurrency and everything",
    "start": "327120",
    "end": "328720"
  },
  {
    "text": "like that I get streaming for free so I",
    "start": "328720",
    "end": "331960"
  },
  {
    "text": "can see exactly what's happening um with",
    "start": "331960",
    "end": "334400"
  },
  {
    "text": "this streaming",
    "start": "334400",
    "end": "335720"
  },
  {
    "text": "step that covers kind of like the basics",
    "start": "335720",
    "end": "338440"
  },
  {
    "text": "again this is a very quick uh uh",
    "start": "338440",
    "end": "340560"
  },
  {
    "text": "overview in the spirit of time um",
    "start": "340560",
    "end": "342919"
  },
  {
    "text": "there's a lot more uh uh to cover around",
    "start": "342919",
    "end": "346360"
  },
  {
    "text": "the different interfaces for example",
    "start": "346360",
    "end": "347840"
  },
  {
    "text": "there are async versions of all of these",
    "start": "347840",
    "end": "350160"
  },
  {
    "text": "um but I'm going to move on to a",
    "start": "350160",
    "end": "351199"
  },
  {
    "text": "different one which is this idea of like",
    "start": "351199",
    "end": "352560"
  },
  {
    "text": "a runnable pass through the runable pass",
    "start": "352560",
    "end": "354960"
  },
  {
    "text": "through makes it really easy to keep on",
    "start": "354960",
    "end": "356520"
  },
  {
    "text": "adding information to a dictionary that",
    "start": "356520",
    "end": "359479"
  },
  {
    "text": "you keep on passing along and so this is",
    "start": "359479",
    "end": "361120"
  },
  {
    "text": "useful when you maybe want to do a few",
    "start": "361120",
    "end": "363000"
  },
  {
    "text": "different steps to add a few different",
    "start": "363000",
    "end": "364520"
  },
  {
    "text": "keys of that dictionary um in a",
    "start": "364520",
    "end": "366319"
  },
  {
    "text": "sequential order and so the primary",
    "start": "366319",
    "end": "367919"
  },
  {
    "text": "example of that is with rag so with rag",
    "start": "367919",
    "end": "371199"
  },
  {
    "text": "you have a question then you want to",
    "start": "371199",
    "end": "373000"
  },
  {
    "text": "look up context for that question and",
    "start": "373000",
    "end": "374919"
  },
  {
    "text": "then you want to pass the question and",
    "start": "374919",
    "end": "376479"
  },
  {
    "text": "that context to an llm for a final call",
    "start": "376479",
    "end": "379039"
  },
  {
    "text": "and so we can use a runnable pass",
    "start": "379039",
    "end": "380560"
  },
  {
    "text": "through to do this really easily so here",
    "start": "380560",
    "end": "383080"
  },
  {
    "text": "we have this tavil search",
    "start": "383080",
    "end": "385080"
  },
  {
    "text": "retriever here we have a a prompt that",
    "start": "385080",
    "end": "388080"
  },
  {
    "text": "takes in context and question",
    "start": "388080",
    "end": "390319"
  },
  {
    "text": "um we can first create a chain um and we",
    "start": "390319",
    "end": "393400"
  },
  {
    "text": "can see what it's like to pass in the",
    "start": "393400",
    "end": "394880"
  },
  {
    "text": "context manually so here we can pass in",
    "start": "394880",
    "end": "397759"
  },
  {
    "text": "um you know a string as context um uh",
    "start": "397759",
    "end": "400599"
  },
  {
    "text": "the question what is lsmith and we can",
    "start": "400599",
    "end": "402520"
  },
  {
    "text": "get back an answer but now we want this",
    "start": "402520",
    "end": "404800"
  },
  {
    "text": "context to not be passed in by us but we",
    "start": "404800",
    "end": "406880"
  },
  {
    "text": "want it to be fetched dynamically from a",
    "start": "406880",
    "end": "408919"
  },
  {
    "text": "retriever and so for that we can use",
    "start": "408919",
    "end": "411560"
  },
  {
    "text": "runnable pass through we can do runnable",
    "start": "411560",
    "end": "413599"
  },
  {
    "text": "pass through. assign assign just adds in",
    "start": "413599",
    "end": "416319"
  },
  {
    "text": "an extra key we can add in an extra key",
    "start": "416319",
    "end": "418879"
  },
  {
    "text": "called cont context and this context we",
    "start": "418879",
    "end": "421199"
  },
  {
    "text": "can uh get by first getting the question",
    "start": "421199",
    "end": "423840"
  },
  {
    "text": "and then passing it to the retriever the",
    "start": "423840",
    "end": "426000"
  },
  {
    "text": "results are then stored as context and",
    "start": "426000",
    "end": "427560"
  },
  {
    "text": "then we pass that whole thing to the",
    "start": "427560",
    "end": "429599"
  },
  {
    "text": "chain above so we can also reuse chains",
    "start": "429599",
    "end": "432840"
  },
  {
    "text": "in this way really easily and that's",
    "start": "432840",
    "end": "434199"
  },
  {
    "text": "part of the composability aspect of Lang",
    "start": "434199",
    "end": "436039"
  },
  {
    "text": "chain expression language so we can",
    "start": "436039",
    "end": "438039"
  },
  {
    "text": "create this chain and then we can call",
    "start": "438039",
    "end": "440560"
  },
  {
    "text": "it um it will take a little bit longer",
    "start": "440560",
    "end": "442400"
  },
  {
    "text": "because it's using a search API under",
    "start": "442400",
    "end": "444120"
  },
  {
    "text": "the hood but we eventually get back a",
    "start": "444120",
    "end": "447080"
  },
  {
    "text": "result if we want to see what's going on",
    "start": "447080",
    "end": "449120"
  },
  {
    "text": "in the the hood again because we are",
    "start": "449120",
    "end": "451400"
  },
  {
    "text": "using L chain expression language we can",
    "start": "451400",
    "end": "453080"
  },
  {
    "text": "take obser we can take advantage of the",
    "start": "453080",
    "end": "455000"
  },
  {
    "text": "built-in observability so if we go here",
    "start": "455000",
    "end": "458720"
  },
  {
    "text": "we can see the two important steps the",
    "start": "458720",
    "end": "461479"
  },
  {
    "text": "Retriever and so we can see what is",
    "start": "461479",
    "end": "463759"
  },
  {
    "text": "lsmith and we get back a bunch of",
    "start": "463759",
    "end": "465560"
  },
  {
    "text": "documents um and then we can see uh this",
    "start": "465560",
    "end": "468680"
  },
  {
    "text": "uh call to the language model chat open",
    "start": "468680",
    "end": "472240"
  },
  {
    "text": "AI we can also take advantage of uh some",
    "start": "472240",
    "end": "475720"
  },
  {
    "text": "of the parallelism that's built into",
    "start": "475720",
    "end": "477919"
  },
  {
    "text": "Lang chain expression language",
    "start": "477919",
    "end": "480120"
  },
  {
    "text": "and so we can use a runnable",
    "start": "480120",
    "end": "482520"
  },
  {
    "text": "parallel and we can do two things in",
    "start": "482520",
    "end": "484520"
  },
  {
    "text": "parallel we can make a call to the uh",
    "start": "484520",
    "end": "486759"
  },
  {
    "text": "language model that we can make call to",
    "start": "486759",
    "end": "488479"
  },
  {
    "text": "the retrieval chain that we have above",
    "start": "488479",
    "end": "490599"
  },
  {
    "text": "um that does this like search and then",
    "start": "490599",
    "end": "492199"
  },
  {
    "text": "passes that to the language model and",
    "start": "492199",
    "end": "493479"
  },
  {
    "text": "then we can also just ask the language",
    "start": "493479",
    "end": "494840"
  },
  {
    "text": "model to respond by itself and when we",
    "start": "494840",
    "end": "497000"
  },
  {
    "text": "can compare the answers of like what",
    "start": "497000",
    "end": "498520"
  },
  {
    "text": "does an answer look like if it's if it's",
    "start": "498520",
    "end": "500280"
  },
  {
    "text": "using retrieval versus what does it look",
    "start": "500280",
    "end": "501960"
  },
  {
    "text": "like if it's not and these are executed",
    "start": "501960",
    "end": "503599"
  },
  {
    "text": "again in in parallel which is helpful",
    "start": "503599",
    "end": "505520"
  },
  {
    "text": "because there's multiple LM calls as",
    "start": "505520",
    "end": "507759"
  },
  {
    "text": "well as a search call going on and so it",
    "start": "507759",
    "end": "509360"
  },
  {
    "text": "would take a while to do that",
    "start": "509360",
    "end": "511080"
  },
  {
    "text": "sequentially so here we can just make a",
    "start": "511080",
    "end": "513680"
  },
  {
    "text": "really simple template which is just the",
    "start": "513680",
    "end": "515039"
  },
  {
    "text": "question we can create a simple chain we",
    "start": "515039",
    "end": "517360"
  },
  {
    "text": "we can then create this parallel chain",
    "start": "517360",
    "end": "519080"
  },
  {
    "text": "which has a retrieved answer and a",
    "start": "519080",
    "end": "520479"
  },
  {
    "text": "simple answer the retrieved answer calls",
    "start": "520479",
    "end": "522599"
  },
  {
    "text": "the above retrieval chain the simple",
    "start": "522599",
    "end": "524279"
  },
  {
    "text": "answer calls the simple chain and then",
    "start": "524279",
    "end": "526640"
  },
  {
    "text": "we can invoke it with the question and",
    "start": "526640",
    "end": "528800"
  },
  {
    "text": "we can get back",
    "start": "528800",
    "end": "531360"
  },
  {
    "text": "a dictionary and here we have a",
    "start": "531360",
    "end": "533880"
  },
  {
    "text": "retrieved answer and a simple answer and",
    "start": "533880",
    "end": "535720"
  },
  {
    "text": "this is executed in parallel as well so",
    "start": "535720",
    "end": "539920"
  },
  {
    "text": "if we go then to our Langs Smith",
    "start": "539920",
    "end": "543360"
  },
  {
    "text": "instance we can see that we",
    "start": "543360",
    "end": "547440"
  },
  {
    "text": "have these two separate things that are",
    "start": "547440",
    "end": "549560"
  },
  {
    "text": "going on in parallel so we have the",
    "start": "549560",
    "end": "551360"
  },
  {
    "text": "retrieved answer and here we have this",
    "start": "551360",
    "end": "553160"
  },
  {
    "text": "Retriever and then a call to a language",
    "start": "553160",
    "end": "554720"
  },
  {
    "text": "model and then we have the simple answer",
    "start": "554720",
    "end": "556399"
  },
  {
    "text": "and here we have just this call to the",
    "start": "556399",
    "end": "558959"
  },
  {
    "text": "the language model",
    "start": "558959",
    "end": "561839"
  },
  {
    "text": "itself we can also stream things so this",
    "start": "565800",
    "end": "568720"
  },
  {
    "text": "is com ining parallelism with streaming",
    "start": "568720",
    "end": "571360"
  },
  {
    "text": "and so if we stream back the results of",
    "start": "571360",
    "end": "573440"
  },
  {
    "text": "this parallel chain what we can see is",
    "start": "573440",
    "end": "575800"
  },
  {
    "text": "that we we get the the results from the",
    "start": "575800",
    "end": "577880"
  },
  {
    "text": "simple answer first because it's just",
    "start": "577880",
    "end": "579519"
  },
  {
    "text": "making a call to a language model it",
    "start": "579519",
    "end": "581320"
  },
  {
    "text": "doesn't have to uh it doesn't have to do",
    "start": "581320",
    "end": "584240"
  },
  {
    "text": "the call to the API as well and then",
    "start": "584240",
    "end": "587320"
  },
  {
    "text": "eventually we start getting the",
    "start": "587320",
    "end": "588600"
  },
  {
    "text": "retrieved answer and we can do some",
    "start": "588600",
    "end": "590000"
  },
  {
    "text": "post-processing of this just to more",
    "start": "590000",
    "end": "592360"
  },
  {
    "text": "easily kind of like build up the answers",
    "start": "592360",
    "end": "594600"
  },
  {
    "text": "over time we'll cover this more heavily",
    "start": "594600",
    "end": "597519"
  },
  {
    "text": "in streaming and we can see that you",
    "start": "597519",
    "end": "599279"
  },
  {
    "text": "know when you get two chains that",
    "start": "599279",
    "end": "601240"
  },
  {
    "text": "actually start running at the same time",
    "start": "601240",
    "end": "603000"
  },
  {
    "text": "the the the tokens can be kind of like",
    "start": "603000",
    "end": "605320"
  },
  {
    "text": "interleaved and so having these",
    "start": "605320",
    "end": "606720"
  },
  {
    "text": "different Keys um the retrieved answer",
    "start": "606720",
    "end": "609160"
  },
  {
    "text": "key and the simple answer keys is a",
    "start": "609160",
    "end": "611240"
  },
  {
    "text": "really easy way to distinguish them and",
    "start": "611240",
    "end": "612600"
  },
  {
    "text": "pull them apart if you need to again",
    "start": "612600",
    "end": "615760"
  },
  {
    "text": "there are a lot of resources that we've",
    "start": "615760",
    "end": "617640"
  },
  {
    "text": "put together On LAN train expression",
    "start": "617640",
    "end": "619279"
  },
  {
    "text": "language there's definitely a little bit",
    "start": "619279",
    "end": "621600"
  },
  {
    "text": "of a learning curve to start and so we",
    "start": "621600",
    "end": "624120"
  },
  {
    "text": "are going to make sure to keep on having",
    "start": "624120",
    "end": "625959"
  },
  {
    "text": "the highle interfaces to the various",
    "start": "625959",
    "end": "627880"
  },
  {
    "text": "chains and agents so if you just want to",
    "start": "627880",
    "end": "630079"
  },
  {
    "text": "use a conversational retrieval chain",
    "start": "630079",
    "end": "631920"
  },
  {
    "text": "we'll have a function where you can pass",
    "start": "631920",
    "end": "633399"
  },
  {
    "text": "in a prompt pass in a language model and",
    "start": "633399",
    "end": "635200"
  },
  {
    "text": "get a conversational retrieval chain you",
    "start": "635200",
    "end": "636760"
  },
  {
    "text": "don't have to worry about Lang chain",
    "start": "636760",
    "end": "638160"
  },
  {
    "text": "expression language under the hood but",
    "start": "638160",
    "end": "640240"
  },
  {
    "text": "when you want to customize things we",
    "start": "640240",
    "end": "642040"
  },
  {
    "text": "think Lang chain expression language is",
    "start": "642040",
    "end": "644000"
  },
  {
    "text": "the best way to do that it makes it",
    "start": "644000",
    "end": "646120"
  },
  {
    "text": "easier to do so because it's part of the",
    "start": "646120",
    "end": "648040"
  },
  {
    "text": "chain so you don't have to go changing",
    "start": "648040",
    "end": "649360"
  },
  {
    "text": "the source code and then you also get",
    "start": "649360",
    "end": "651200"
  },
  {
    "text": "all the benefits of observability",
    "start": "651200",
    "end": "653839"
  },
  {
    "text": "streaming parallelism built in for",
    "start": "653839",
    "end": "656959"
  },
  {
    "text": "free so langing expression language",
    "start": "656959",
    "end": "659120"
  },
  {
    "text": "which is something that we've been",
    "start": "659120",
    "end": "660040"
  },
  {
    "text": "really really focused on over the past",
    "start": "660040",
    "end": "661839"
  },
  {
    "text": "few months we've added more and more",
    "start": "661839",
    "end": "663920"
  },
  {
    "text": "Primitives as well as more and more",
    "start": "663920",
    "end": "665839"
  },
  {
    "text": "examples of how to use it at the same",
    "start": "665839",
    "end": "668720"
  },
  {
    "text": "time we recognize that there's a bit of",
    "start": "668720",
    "end": "670320"
  },
  {
    "text": "a learning curve and so if you have",
    "start": "670320",
    "end": "671800"
  },
  {
    "text": "questions if you want to see uh",
    "start": "671800",
    "end": "673800"
  },
  {
    "text": "different different Primitives or",
    "start": "673800",
    "end": "675120"
  },
  {
    "text": "different examples please just let us",
    "start": "675120",
    "end": "676560"
  },
  {
    "text": "know and we'll absolutely create them",
    "start": "676560",
    "end": "681600"
  }
]