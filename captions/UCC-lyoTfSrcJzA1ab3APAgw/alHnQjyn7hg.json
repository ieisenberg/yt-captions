[
  {
    "text": "hey everybody brace here from Lang chain um and today I'm going to be doing a quick tutorial demo walkthrough video on",
    "start": "719",
    "end": "7680"
  },
  {
    "text": "implementing Google deep Goog Google deep Minds dramaton um in Lang chain JS",
    "start": "7680",
    "end": "14000"
  },
  {
    "text": "and Lang graph um if you're not aware dramaton is a or was a project by ghou",
    "start": "14000",
    "end": "19560"
  },
  {
    "text": "Deep mine from I think 2022 um where they take large language",
    "start": "19560",
    "end": "24599"
  },
  {
    "text": "models and using um their flow they can generate entire plays",
    "start": "24599",
    "end": "30480"
  },
  {
    "text": "um and there is a little GIF in their homepage which kind of does a good job of explaining how it works at a high",
    "start": "30480",
    "end": "36800"
  },
  {
    "text": "level so you present dramaton with a log line",
    "start": "36800",
    "end": "42920"
  },
  {
    "text": "um this log line is kind of like a description of the story you want or the play you want to generate from there it",
    "start": "42920",
    "end": "49960"
  },
  {
    "text": "creates a title then it generates some characters these characters have",
    "start": "49960",
    "end": "55039"
  },
  {
    "text": "descriptions um after generating the characters and the title it generates the scheme or the plot which contains",
    "start": "55039",
    "end": "61519"
  },
  {
    "text": "scenes scene descriptions places um what they call beats plot elements and",
    "start": "61519",
    "end": "68720"
  },
  {
    "text": "whatnot um and then generates including in the plot it generates locations for those scenes um",
    "start": "68720",
    "end": "75400"
  },
  {
    "text": "and then once all that is generated it goes and generates a final dialogue um and puts it all together into what will",
    "start": "75400",
    "end": "82840"
  },
  {
    "text": "eventually look like this um so at the end of this",
    "start": "82840",
    "end": "88040"
  },
  {
    "text": "tutorial when we finished imping all the code and we've executed it using Lang",
    "start": "88040",
    "end": "93520"
  },
  {
    "text": "graph it'll log um our play which looks like this so it has little",
    "start": "93520",
    "end": "99040"
  },
  {
    "text": "heading script description different scenes and then the actual dialogue um",
    "start": "99040",
    "end": "105759"
  },
  {
    "text": "and as you can see it's it's pretty pretty um in depth it has generates a lot of content um and it does all of",
    "start": "105759",
    "end": "112240"
  },
  {
    "text": "this using um a large language model in this tutorial we're going to use anthropic their new models and does it",
    "start": "112240",
    "end": "119039"
  },
  {
    "text": "all without function called it's simply prompting and then a tiny bit of parsing",
    "start": "119039",
    "end": "124119"
  },
  {
    "text": "on the end uh so to start you're going to want to go to my dramaton template",
    "start": "124119",
    "end": "129879"
  },
  {
    "text": "repo there's a lot of kind of code which doesn't really matter um but you need it",
    "start": "129879",
    "end": "135680"
  },
  {
    "text": "and I've already implemented that just so you don't have to implement that busy work uh you're going to want to copy the",
    "start": "135680",
    "end": "140840"
  },
  {
    "text": "get URL and go and clone it so",
    "start": "140840",
    "end": "146680"
  },
  {
    "text": "clone once you've cloned it navigate to the directory uh and install dependencies by calling",
    "start": "146680",
    "end": "154319"
  },
  {
    "text": "yarn uh next you can open it up and you'll see this is the structure",
    "start": "154319",
    "end": "160440"
  },
  {
    "text": "so it's a monor repo um based off of a monor repo template I have we've deleted the front end because we don't need that",
    "start": "160440",
    "end": "166440"
  },
  {
    "text": "we're only using the backend um and then inside the backend Source directory um",
    "start": "166440",
    "end": "171560"
  },
  {
    "text": "in example environment variables you're going to want to set this with your own anthropic API key and your lsmith keys",
    "start": "171560",
    "end": "179319"
  },
  {
    "text": "uh for tracing so you can see how your app's working and then inside here we",
    "start": "179319",
    "end": "184799"
  },
  {
    "text": "have four folders at the top and then a few files uh quickly to go through entities these are the different",
    "start": "184799",
    "end": "191760"
  },
  {
    "text": "entities that the app uses so characters plots titles stories and whatnot um and",
    "start": "191760",
    "end": "196799"
  },
  {
    "text": "these are different classes which essentially are just going to hold you the character name the character description or characters plural",
    "start": "196799",
    "end": "203840"
  },
  {
    "text": "description and they usually contain one or two uh methods for doing things like",
    "start": "203840",
    "end": "209360"
  },
  {
    "text": "passing in the generated text splitting it out setting it into the class um and then you can access it all later and",
    "start": "209360",
    "end": "215840"
  },
  {
    "text": "it's not just a straight string from the LM um so if we look through character and",
    "start": "215840",
    "end": "221400"
  },
  {
    "text": "characters uh place has this as well format name from string my prefix",
    "start": "221400",
    "end": "228120"
  },
  {
    "text": "and whatnot um yeah so I already implemented all this it's kind of busy work you know",
    "start": "228120",
    "end": "234040"
  },
  {
    "text": "it's really the same thing with slight tweaks many times over scene scen means",
    "start": "234040",
    "end": "240360"
  },
  {
    "text": "from string um and then as you can see inside a lot of these we're using these",
    "start": "240360",
    "end": "245680"
  },
  {
    "text": "constants called Place element plot element beat element um these are also implemented inside the constants file um",
    "start": "245680",
    "end": "253200"
  },
  {
    "text": "and here we can see all these different constants end marker stop marker character marker um and these are used",
    "start": "253200",
    "end": "259639"
  },
  {
    "text": "in The Prompt um I can show that right now that's the prompts are live inside",
    "start": "259639",
    "end": "266240"
  },
  {
    "text": "the prefixes directory um there are three main main prefix prefixes custom",
    "start": "266240",
    "end": "271639"
  },
  {
    "text": "media and sci-fi custom is kind of just the base implementation allows you to customize it um media and sci-fi are",
    "start": "271639",
    "end": "280280"
  },
  {
    "text": "both prompts from the uh to prefix this custom media scii these these were all",
    "start": "280280",
    "end": "286600"
  },
  {
    "text": "ported from the dramaton repo uh that would be a lot of porting to JS if you",
    "start": "286600",
    "end": "292840"
  },
  {
    "text": "did it yourself so this is something that I quickly did beforehand",
    "start": "292840",
    "end": "298360"
  },
  {
    "text": "um they are way down here and these are essentially the prompts that we're going to use when we're calling the LM to",
    "start": "298360",
    "end": "304840"
  },
  {
    "text": "generate um and then these different markers what's what they're called uh kind of split up like the character the",
    "start": "304840",
    "end": "311080"
  },
  {
    "text": "description and then log line so then when we're actually calling the llm it",
    "start": "311080",
    "end": "317080"
  },
  {
    "text": "sees these patterns that we use in the examples and will respond with those patterns as well so it's easy to parse",
    "start": "317080",
    "end": "323840"
  },
  {
    "text": "out their response uh without need to use function calling um in this example we're going to use the media one",
    "start": "323840",
    "end": "330639"
  },
  {
    "text": "um it looks like this you can take a look at it if you would like uh but it's just a few different prompts which",
    "start": "330639",
    "end": "337919"
  },
  {
    "text": "contain the characters prompt scenes prompt setting title and dialogue um and",
    "start": "337919",
    "end": "343000"
  },
  {
    "text": "these are the different steps we're going to take when generating so we're going to generate the title we're then going to generate the characters",
    "start": "343000",
    "end": "349520"
  },
  {
    "text": "generate the scene and the settings and finally the dialogue um after the prefixes and",
    "start": "349520",
    "end": "357080"
  },
  {
    "text": "entities we have this system prompt file which we can actually go to right now this is just going to get appended to",
    "start": "357080",
    "end": "362800"
  },
  {
    "text": "every single LM call you make so you can this isn't too important you kind of make it whatever you want but for this",
    "start": "362800",
    "end": "368759"
  },
  {
    "text": "we're going to use you are a brilliant",
    "start": "368759",
    "end": "376759"
  },
  {
    "text": "Storyteller um respond to the users",
    "start": "376759",
    "end": "382360"
  },
  {
    "text": "query exactly",
    "start": "382360",
    "end": "386719"
  },
  {
    "text": "without exactly that's enough um and then here we're going to import",
    "start": "387520",
    "end": "393120"
  },
  {
    "text": "this into our generate file where we'll go next where we actually generate the LM responses and prefix this to every",
    "start": "393120",
    "end": "399759"
  },
  {
    "text": "single LM call just as a kind of Base system prompt um next UIL file folder",
    "start": "399759",
    "end": "406840"
  },
  {
    "text": "three files in here the render story is also implemented by default just because this is rendering the story once it's",
    "start": "406840",
    "end": "413160"
  },
  {
    "text": "all been generated into this nice string that you saw here um this is not really",
    "start": "413160",
    "end": "419759"
  },
  {
    "text": "um specific to drron it's just a lot of you know pushing to an array and then joining at the end uh this is all",
    "start": "419759",
    "end": "426080"
  },
  {
    "text": "already implemented um and it kind of gives you the structure that you saw in that that example story file the next",
    "start": "426080",
    "end": "432560"
  },
  {
    "text": "two files are prefix summary and strip end we'll Implement these later these are going to be used as little utils um",
    "start": "432560",
    "end": "438800"
  },
  {
    "text": "after we generate before we generate and whatnot uh diffs these are also",
    "start": "438800",
    "end": "443960"
  },
  {
    "text": "generated um we will come back to this this uses a diff Library which is",
    "start": "443960",
    "end": "449879"
  },
  {
    "text": "similar to a diff library that they use in Python we'll get back to this when we actually use it um the generate file I",
    "start": "449879",
    "end": "457120"
  },
  {
    "text": "have all of the functions and the interfaces pre-built but the content or",
    "start": "457120",
    "end": "462520"
  },
  {
    "text": "the actual core functionality is not there so we'll do that after graph this is where we're going to Define our Lang",
    "start": "462520",
    "end": "468960"
  },
  {
    "text": "graph graph with all the different nodes calling the generations uh iterating and",
    "start": "468960",
    "end": "474560"
  },
  {
    "text": "kind of stepping back or forward based on what has exceeded um and then we'll",
    "start": "474560",
    "end": "479639"
  },
  {
    "text": "run it from the index file and finally the story generator file which contains the story generator class this is where",
    "start": "479639",
    "end": "486199"
  },
  {
    "text": "the core functionality between generating the title and the characters and whatnot will go on um I'll explain",
    "start": "486199",
    "end": "492599"
  },
  {
    "text": "all of this when we get to it this is the one method we really care about step it's what we call it's what we're going",
    "start": "492599",
    "end": "498280"
  },
  {
    "text": "to call inside our graph um and step will then call all the different generate functions we",
    "start": "498280",
    "end": "504879"
  },
  {
    "text": "write um and yeah I think we can get started on implenia now",
    "start": "504879",
    "end": "510199"
  },
  {
    "text": "all right so the first function we're going to write is the generate text function um inside this generate file",
    "start": "510199",
    "end": "516760"
  },
  {
    "text": "all of the generate title generate characters generate scenes functions they will all call to generate text um",
    "start": "516760",
    "end": "523479"
  },
  {
    "text": "to actually call the Lum and generate um and then these individual functions will",
    "start": "523479",
    "end": "528880"
  },
  {
    "text": "just do extra things like putting together The Prompt parsing the output",
    "start": "528880",
    "end": "534120"
  },
  {
    "text": "returning uh a title entity and whatnot um but they will all come down to just",
    "start": "534120",
    "end": "539640"
  },
  {
    "text": "calling this generate text to generate the initial text uh so we can see our input is a list of prompts an LM and an",
    "start": "539640",
    "end": "547519"
  },
  {
    "text": "optional seed argument so we are going to want to First Define an alpha parser",
    "start": "547519",
    "end": "553079"
  },
  {
    "text": "we always want to return string we'll just use the um string can't talk and type output",
    "start": "553079",
    "end": "561600"
  },
  {
    "text": "parser um will always be a string output parser which we can import from",
    "start": "561600",
    "end": "567480"
  },
  {
    "text": "linkchain core like so um and next our prompt uh which we",
    "start": "567480",
    "end": "577880"
  },
  {
    "text": "can use to pipe to our llm using the lane chain expression language and then pipe the llm to the Alpa parser like",
    "start": "577880",
    "end": "586000"
  },
  {
    "text": "this and I will explain what that's doing once this so we can Define our chain saying const chain equals input.",
    "start": "586000",
    "end": "595800"
  },
  {
    "text": "generation prompt. pipe we going to pipe that to the input.",
    "start": "595800",
    "end": "602600"
  },
  {
    "text": "llm and ah it's because it's an array sorry so we need to do con prompt equals",
    "start": "602600",
    "end": "610079"
  },
  {
    "text": "chat prompt template do from messages passing our",
    "start": "610079",
    "end": "615959"
  },
  {
    "text": "prompt there and now instead of this being an array it'll just be a single prompt that we can pipe to our llm and",
    "start": "615959",
    "end": "623640"
  },
  {
    "text": "then pipe this to our output parser um and what this pipe method is doing",
    "start": "623640",
    "end": "630880"
  },
  {
    "text": "um essentially it's all uh the Lang",
    "start": "630880",
    "end": "636040"
  },
  {
    "text": "expression language so any class which extends from the runnable class has access to this pipe method and then they",
    "start": "636040",
    "end": "642120"
  },
  {
    "text": "all also have access to invoke so what pipe does is when you invoke the chain it's going to call invoke on the prompt",
    "start": "642120",
    "end": "648639"
  },
  {
    "text": "which will format The Prompt into like a string so for the LM and then once it's",
    "start": "648639",
    "end": "654320"
  },
  {
    "text": "formatted it'll then pipe it to the input of the llm invoke call invoke that",
    "start": "654320",
    "end": "660760"
  },
  {
    "text": "take the output of that and pipe it to the input of the invoke call in the alpha parser um and just real quick we",
    "start": "660760",
    "end": "668200"
  },
  {
    "text": "can see that they all have invoke so Alpha par. invoke",
    "start": "668200",
    "end": "673320"
  },
  {
    "text": "exists um lm. invoke exists and so on for the uh",
    "start": "673320",
    "end": "679480"
  },
  {
    "text": "prompt so now that we have our chain we can just get the response say const result equals",
    "start": "679480",
    "end": "687079"
  },
  {
    "text": "chain. invoke um and since our prompt didn't none of",
    "start": "687079",
    "end": "693399"
  },
  {
    "text": "our prompts will have input variables just pass empty string as the input and then don't forget to pass our config",
    "start": "693399",
    "end": "699320"
  },
  {
    "text": "object as well um and then we can return this and we can see it's a type string because of",
    "start": "699320",
    "end": "704839"
  },
  {
    "text": "our output parser um and now inside of all of our different generate XYZ functions we can",
    "start": "704839",
    "end": "711639"
  },
  {
    "text": "call generate text and it's a simple wrap around the LM for always generating the",
    "start": "711639",
    "end": "716680"
  },
  {
    "text": "text all right next we're going to want to generate the title um and we can see from this input we",
    "start": "716680",
    "end": "722600"
  },
  {
    "text": "take in a story line which is the sentence couple sentences describing the",
    "start": "722600",
    "end": "728279"
  },
  {
    "text": "play you want to generate uh prefixes which are going to map to our prompt or which is a map with our prompt um and",
    "start": "728279",
    "end": "736199"
  },
  {
    "text": "then the llm and an optional seed argument so first we want to construct",
    "start": "736199",
    "end": "741320"
  },
  {
    "text": "the title prompt string not the actual Lang chain prompt but just the string",
    "start": "741320",
    "end": "746519"
  },
  {
    "text": "which will go in the prompt so we'll say con title prefix equals a template string",
    "start": "746519",
    "end": "752800"
  },
  {
    "text": "and we're going to take that's almost right we're going to want to take the prefixes that are",
    "start": "752800",
    "end": "758199"
  },
  {
    "text": "passed in and get the title prompt a lot of space pass in the story line and then",
    "start": "758199",
    "end": "763760"
  },
  {
    "text": "from our constants we want to add in the title all cap title element um and this",
    "start": "763760",
    "end": "771720"
  },
  {
    "text": "is just going to be title colon that's kind of prompting the LM to say okay at",
    "start": "771720",
    "end": "776880"
  },
  {
    "text": "the end of this prompt title but missing titles the LM will continue it with the actual title that we want and then we",
    "start": "776880",
    "end": "784120"
  },
  {
    "text": "can put it into a lang chain prompt say con title prompt equals chat prompt",
    "start": "784120",
    "end": "789320"
  },
  {
    "text": "template and we'll say from messages and pass in our system prompt",
    "start": "789320",
    "end": "795959"
  },
  {
    "text": "that we defined earlier so system and system default and right",
    "start": "795959",
    "end": "803600"
  },
  {
    "text": "beneath that we can do human and title prefix ah system default is already a",
    "start": "803600",
    "end": "810800"
  },
  {
    "text": "prompt template we don't need that we just pass it there now we have our title prompt",
    "start": "810800",
    "end": "816560"
  },
  {
    "text": "formatted as a chat prompt template and we can actually go ahead and invoke our",
    "start": "816560",
    "end": "822160"
  },
  {
    "text": "generate text so we can say or we're going need to added this later so let title text equals and then",
    "start": "822160",
    "end": "830720"
  },
  {
    "text": "await the generate text function passing in our",
    "start": "830720",
    "end": "835839"
  },
  {
    "text": "generation prompt seed and LLS uh and then we don't want to forget",
    "start": "835839",
    "end": "841959"
  },
  {
    "text": "about our config object for tracing there we go and that will",
    "start": "841959",
    "end": "847000"
  },
  {
    "text": "generate the title text in the LM uh next we're going to want to use this title entity that we saw",
    "start": "847000",
    "end": "854079"
  },
  {
    "text": "earlier we'll put it to the side um and specifically the from string",
    "start": "854079",
    "end": "859560"
  },
  {
    "text": "method which will extract the title I'll go over this function in a",
    "start": "859560",
    "end": "865199"
  },
  {
    "text": "second uh but first this is something I noticed that would only happen with the title generation call and nothing else",
    "start": "865199",
    "end": "872680"
  },
  {
    "text": "where the LM wouldn't respond with the different prefixes and suffixes that we wanted so we have to do a manual check",
    "start": "872680",
    "end": "880000"
  },
  {
    "text": "where we'll say if um title text is not end",
    "start": "880000",
    "end": "887800"
  },
  {
    "text": "with uh title element um or sorry not title element",
    "start": "887800",
    "end": "895079"
  },
  {
    "text": "the end marker as we you can see we're passing that into the extract element as the",
    "start": "895079",
    "end": "903399"
  },
  {
    "text": "ending oops as the end ARG there so if it does not end with the end marker we",
    "start": "903399",
    "end": "909680"
  },
  {
    "text": "want to modify title text just like that so it ends with the end marker after this we can go",
    "start": "909680",
    "end": "917160"
  },
  {
    "text": "and extract our title um but there are two more things we need to do sometimes",
    "start": "917160",
    "end": "923000"
  },
  {
    "text": "it also wouldn't prefix with this so you say let title is going to be of type",
    "start": "923000",
    "end": "931279"
  },
  {
    "text": "title then we can say if title do starts with title",
    "start": "931279",
    "end": "939240"
  },
  {
    "text": "element H sorry not title we want to the title text if title text starts with",
    "start": "939240",
    "end": "945680"
  },
  {
    "text": "starts with the title element we can just pass it right in know the title element we know it'll have the nend",
    "start": "945680",
    "end": "951240"
  },
  {
    "text": "marker because of this and we can extract the text and then else we can",
    "start": "951240",
    "end": "957319"
  },
  {
    "text": "say there you go title from string we want to make sure the title element is there and then the title text we don't",
    "start": "957319",
    "end": "964120"
  },
  {
    "text": "need a space there because extract elements um we'll parse it all out for us and then finally we can return the",
    "start": "964120",
    "end": "971759"
  },
  {
    "text": "title entity and the raw text from the generation this will generate our",
    "start": "971759",
    "end": "977240"
  },
  {
    "text": "title so yeah now we can go and generate characters it kind of acts the same",
    "start": "977240",
    "end": "982360"
  },
  {
    "text": "we're going to want to take a prompt generate the text call from string and the characters entity which I'll open up",
    "start": "982360",
    "end": "990279"
  },
  {
    "text": "here as well um yeah so we can kind of just copy",
    "start": "990279",
    "end": "996399"
  },
  {
    "text": "this CU a lot of this we're going to be able to re re reuse rename this to",
    "start": "996399",
    "end": "1002720"
  },
  {
    "text": "characters prefix and characters prompt paste that in there paste that in",
    "start": "1002720",
    "end": "1010399"
  },
  {
    "text": "there obviously we don't want the title prompt we want the character prompt",
    "start": "1010399",
    "end": "1016600"
  },
  {
    "text": "still want the story line you can see here here uh but it's not title so we can give rid that title",
    "start": "1016600",
    "end": "1023480"
  },
  {
    "text": "element um and then we're passing to our prompt passing our prompt to generate text passing other fields in getting",
    "start": "1023480",
    "end": "1029678"
  },
  {
    "text": "back the con character",
    "start": "1029679",
    "end": "1035360"
  },
  {
    "text": "text make that plural and then we don't need any of",
    "start": "1035360",
    "end": "1040798"
  },
  {
    "text": "this because LM consistently generates all the different end and start markers so",
    "start": "1040799",
    "end": "1048000"
  },
  {
    "text": "we can say const characters equals uh characters plural. from string",
    "start": "1048000",
    "end": "1057160"
  },
  {
    "text": "passing in the characters text um and the reason we're using characters plural and not the singular one is because",
    "start": "1057160",
    "end": "1063360"
  },
  {
    "text": "inside of this from string we call the singular one on all the different elements that are extracted um and a",
    "start": "1063360",
    "end": "1070679"
  },
  {
    "text": "quick note you can see that inside of the title from string we only want one title obviously so we're just getting",
    "start": "1070679",
    "end": "1077640"
  },
  {
    "text": "the zero with element because it's returns an array of strings however for characters want multiple characters so",
    "start": "1077640",
    "end": "1083840"
  },
  {
    "text": "we're extracting all of the elements iterating over them and then for each element",
    "start": "1083840",
    "end": "1090559"
  },
  {
    "text": "extracted call the singular character from string to format that if it was able to format it then",
    "start": "1090559",
    "end": "1097320"
  },
  {
    "text": "add it to the object and return a new instance of the character's class and then we",
    "start": "1097320",
    "end": "1103960"
  },
  {
    "text": "can once it's all been formatted return the characters entity and the characters",
    "start": "1103960",
    "end": "1109400"
  },
  {
    "text": "je characters text just like this I can type nice now we've finished our",
    "start": "1109400",
    "end": "1116320"
  },
  {
    "text": "generate characters function and our generate title function um we can move on to the generate",
    "start": "1116320",
    "end": "1123120"
  },
  {
    "text": "scenes all right now to generate the scenes prompt um or the scenes text",
    "start": "1123120",
    "end": "1128880"
  },
  {
    "text": "we're going to want to First Define the scenes prefix so we'll say cons",
    "start": "1128880",
    "end": "1134400"
  },
  {
    "text": "scenes prefix equals that thank you co-pilot with the",
    "start": "1134400",
    "end": "1140919"
  },
  {
    "text": "scene prompt story line and we're going to want to add a new line because as we can see from the input we're also taking",
    "start": "1140919",
    "end": "1147480"
  },
  {
    "text": "in character descriptions that we will have generated just before this so we'll",
    "start": "1147480",
    "end": "1152600"
  },
  {
    "text": "say uh for con name",
    "start": "1152600",
    "end": "1158240"
  },
  {
    "text": "of oops input. character descriptions input out character",
    "start": "1158880",
    "end": "1165960"
  },
  {
    "text": "descriptions if name is true true",
    "start": "1165960",
    "end": "1171679"
  },
  {
    "text": "then scenes prefix plus equals a template string of input. character",
    "start": "1171679",
    "end": "1180440"
  },
  {
    "text": "descriptions name new line um and this is just going to add the different",
    "start": "1180440",
    "end": "1186360"
  },
  {
    "text": "character descriptions to all",
    "start": "1186360",
    "end": "1192799"
  },
  {
    "text": "what uh name in character descriptions um and make this an",
    "start": "1192799",
    "end": "1198880"
  },
  {
    "text": "editable variable so then we're going to add all the different descriptions to our scenes prefix and",
    "start": "1198880",
    "end": "1205520"
  },
  {
    "text": "finally after looping over this we can append the uh n marker so we'll",
    "start": "1205520",
    "end": "1210919"
  },
  {
    "text": "say scenes prefix plus equals a template string with",
    "start": "1210919",
    "end": "1218840"
  },
  {
    "text": "the scenes marker at the end and we'll new line this just to be safe um and",
    "start": "1218840",
    "end": "1226520"
  },
  {
    "text": "then we can go and generate the text we'll say scenes text equals",
    "start": "1226520",
    "end": "1233799"
  },
  {
    "text": "wait generate text before we forget we'll pass in the config object and then",
    "start": "1233799",
    "end": "1241679"
  },
  {
    "text": "ah sorry we need to Define our lane chain prompt so say con prompt equals or match conventions",
    "start": "1241679",
    "end": "1250280"
  },
  {
    "text": "scenes prompt equals chat prompt template. promp messages passing in our",
    "start": "1250280",
    "end": "1257400"
  },
  {
    "text": "system default and and the human prompt with the scenes",
    "start": "1257400",
    "end": "1262559"
  },
  {
    "text": "prefix uh let's pass this into our generate text so we'll say generation prompt scenes prompt llm",
    "start": "1262559",
    "end": "1270679"
  },
  {
    "text": "config done uh and now we can call the",
    "start": "1270679",
    "end": "1276000"
  },
  {
    "text": "scenes entity to parse this text and actually extract our scenes we made up",
    "start": "1276000",
    "end": "1282840"
  },
  {
    "text": "of the singular scene entity and then I'll contain Place plot element and",
    "start": "1282840",
    "end": "1288600"
  },
  {
    "text": "scenes beat so we can say cons scene",
    "start": "1288600",
    "end": "1294480"
  },
  {
    "text": "equals scenes do from string scenes text um and",
    "start": "1294480",
    "end": "1301159"
  },
  {
    "text": "finally return our scenes and our scenes text so return scene and scenes text",
    "start": "1301159",
    "end": "1310159"
  },
  {
    "text": "there we go now we have defined our scenes function or generate scenes function uh takes in the character",
    "start": "1310159",
    "end": "1317240"
  },
  {
    "text": "descriptions as we defined be from before uh it creates our prompt",
    "start": "1317240",
    "end": "1323640"
  },
  {
    "text": "including all the character descriptions the scenes prompt and the scenes marker at the end which is just scenes um and",
    "start": "1323640",
    "end": "1331080"
  },
  {
    "text": "if we look inside of our",
    "start": "1331080",
    "end": "1335278"
  },
  {
    "text": "prefixes scenes marker we can see that it's defined before this list of um example",
    "start": "1336720",
    "end": "1345440"
  },
  {
    "text": "scenes and then we're going to be adding in our storyline character and then that scenes marker as well so that llm will",
    "start": "1345440",
    "end": "1351840"
  },
  {
    "text": "know to generate the rest of the scenes based on the example that we passed to",
    "start": "1351840",
    "end": "1357440"
  },
  {
    "text": "it um and yeah that's the rest of our generate scenes function uh now we have",
    "start": "1357440",
    "end": "1364120"
  },
  {
    "text": "Place descriptions and dialogue all right now for our place descriptions we're going to want to see",
    "start": "1364120",
    "end": "1372240"
  },
  {
    "text": "or as you can see we takeen our scenes regenerated before and we're going to use these and we're generating",
    "start": "1372240",
    "end": "1377279"
  },
  {
    "text": "descriptions for each place um it's going to compound we're going to pass in each scene description to the next LM generation so the story can",
    "start": "1377279",
    "end": "1384799"
  },
  {
    "text": "progress um in the proper way so we'll first Define our place prefix where",
    "start": "1384799",
    "end": "1390559"
  },
  {
    "text": "we'll say con Place prefix equals template string",
    "start": "1390559",
    "end": "1397039"
  },
  {
    "text": "we're going to want to get the setting prompt and the storyline um and then",
    "start": "1397039",
    "end": "1403159"
  },
  {
    "text": "next we can go and get a list of all the all the unique SE names we'll say const",
    "start": "1403159",
    "end": "1413320"
  },
  {
    "text": "unique place names equals and then a new",
    "start": "1413320",
    "end": "1421279"
  },
  {
    "text": "set and that looks right where we're going to take the scenes and then the",
    "start": "1421279",
    "end": "1427400"
  },
  {
    "text": "scenes property on that scenes entity and then the actual place name from each",
    "start": "1427400",
    "end": "1433799"
  },
  {
    "text": "one of those scenes and we'll convert this back to an array",
    "start": "1433799",
    "end": "1439039"
  },
  {
    "text": "by doing this just so it's a little bit easier to work with um and now that we've generated our",
    "start": "1439039",
    "end": "1446400"
  },
  {
    "text": "unique place names we can define a place descriptions object which we will then",
    "start": "1446400",
    "end": "1453400"
  },
  {
    "text": "go and append or add places to um after we generate them so we'll say const",
    "start": "1453400",
    "end": "1460120"
  },
  {
    "text": "Place descriptions just like that um and the key is going to be the name of the place and the value is going to be the",
    "start": "1460120",
    "end": "1466120"
  },
  {
    "text": "place entity um and now we can iterate in a 408 loop we're going to be calling",
    "start": "1466120",
    "end": "1472760"
  },
  {
    "text": "an a syn function inside there over each unique place name so we'll say four weight const",
    "start": "1472760",
    "end": "1480960"
  },
  {
    "text": "place of unique place names um and now that we're inside here we can take the",
    "start": "1480960",
    "end": "1487120"
  },
  {
    "text": "place and create our place suffix we'll say cons",
    "start": "1487120",
    "end": "1492600"
  },
  {
    "text": "Place suffix equals and then we're going to use the place entity do",
    "start": "1492600",
    "end": "1499600"
  },
  {
    "text": "format prefix sorry Place prefix just format prefix with the place",
    "start": "1499600",
    "end": "1507200"
  },
  {
    "text": "name um and now that we have our place prefix we can Define our prompts we'll",
    "start": "1507200",
    "end": "1512679"
  },
  {
    "text": "say Place prompt just like that but we want this to be a template string with",
    "start": "1512679",
    "end": "1518200"
  },
  {
    "text": "our place prefix and sorry this is supposed to be um suffix because that's",
    "start": "1518200",
    "end": "1525760"
  },
  {
    "text": "the prefix so cons placed place suffix and we want to get our place",
    "start": "1525760",
    "end": "1532440"
  },
  {
    "text": "prefix that we defined above and follow that with the place suffix we just Define there and now we can generate",
    "start": "1532440",
    "end": "1539120"
  },
  {
    "text": "text so we'll say let Place text equals generate text a wait",
    "start": "1539120",
    "end": "1546399"
  },
  {
    "text": "generate text passing in the prompt LM seed and don't forget config object and",
    "start": "1546399",
    "end": "1552600"
  },
  {
    "text": "now we've generated the text using our play suffix um and if I can quickly show you what this is doing",
    "start": "1552600",
    "end": "1559600"
  },
  {
    "text": "uh we're taking place format prefix and that takes the place element",
    "start": "1559600",
    "end": "1565320"
  },
  {
    "text": "the name which we passed in and the description element um and it's once again more prompting so that the uh llm",
    "start": "1565320",
    "end": "1573480"
  },
  {
    "text": "can see this is the place name let's write the description um and now that we have the place text we can go and format this",
    "start": "1573480",
    "end": "1580640"
  },
  {
    "text": "we'll say We'll reassign this saying Place text equals a template string with",
    "start": "1580640",
    "end": "1586600"
  },
  {
    "text": "the place suffix suffix and place",
    "start": "1586600",
    "end": "1592840"
  },
  {
    "text": "text just like that and then we can use the place class and we'll say Place",
    "start": "1592840",
    "end": "1600480"
  },
  {
    "text": "descriptions with the place name as the key and place. from",
    "start": "1600480",
    "end": "1606279"
  },
  {
    "text": "string um passing in the place and the place text if we see from string takes in the",
    "start": "1606279",
    "end": "1613799"
  },
  {
    "text": "place name and the generated text then trims the name adds the N marker um and",
    "start": "1613799",
    "end": "1620039"
  },
  {
    "text": "extracts all the places in between the description element which is what we",
    "start": "1620039",
    "end": "1627360"
  },
  {
    "text": "appended um with the format prefix and the end marker which we just added there and we'll just get the first one and",
    "start": "1627360",
    "end": "1633880"
  },
  {
    "text": "return it now we can push this to array so we we will ah forgot to Define this here so",
    "start": "1633880",
    "end": "1640399"
  },
  {
    "text": "we need to say const Place prefixes equals an empty array um",
    "start": "1640399",
    "end": "1648520"
  },
  {
    "text": "and now we can push our place prefixes there that's what we're going to use to return here with our just our",
    "start": "1648520",
    "end": "1656440"
  },
  {
    "text": "plain text um or sorry not just our plain text we want a template string with the place suffix and then Place",
    "start": "1656440",
    "end": "1663279"
  },
  {
    "text": "prefix so Place prefix and then Place suffix there",
    "start": "1663279",
    "end": "1670679"
  },
  {
    "text": "we go and place suffix is generate each time based on the place and when this is all done we can return our place",
    "start": "1670679",
    "end": "1677399"
  },
  {
    "text": "descriptions our array of place prefixes and now our",
    "start": "1677399",
    "end": "1683200"
  },
  {
    "text": "generate Place descriptions function is finished uh if we go through this one more time generate the prefix using the",
    "start": "1683200",
    "end": "1689360"
  },
  {
    "text": "prefix ped in story line um we're going to get a array with unique place names",
    "start": "1689360",
    "end": "1694919"
  },
  {
    "text": "we don't generate Place descriptions for the same place twice now we defined our object here",
    "start": "1694919",
    "end": "1702159"
  },
  {
    "text": "which we will append to once we finished generating and then we iterate over each unique place name gener the suffix um",
    "start": "1702159",
    "end": "1710440"
  },
  {
    "text": "using the place format prefix method which just adds these different constant",
    "start": "1710440",
    "end": "1715799"
  },
  {
    "text": "elements constants um construct The Prompt pass to the generate fun generate text",
    "start": "1715799",
    "end": "1722919"
  },
  {
    "text": "function uh reassign this text with the suffix call the from string method oops",
    "start": "1722919",
    "end": "1730279"
  },
  {
    "text": "which uses the extract elements function to extract the different place descriptions append it to the object",
    "start": "1730279",
    "end": "1736279"
  },
  {
    "text": "push it to array return everything uh and now we just have to generate the dialogue as the last function and then",
    "start": "1736279",
    "end": "1743640"
  },
  {
    "text": "all of our generate functions are done and we can move on to um writing the actual storage generator um and some",
    "start": "1743640",
    "end": "1750960"
  },
  {
    "text": "nice utils to go along with that um and then we Define our graph and yeah see how it",
    "start": "1750960",
    "end": "1756679"
  },
  {
    "text": "works all right so for Gen generating the dialogue first we're going to want to go and implement this prefix summary",
    "start": "1756679",
    "end": "1764960"
  },
  {
    "text": "util which we have the outline for we not the actual code um and the prefix summary youtil is",
    "start": "1764960",
    "end": "1771600"
  },
  {
    "text": "essentially going to take in a storyline and a list of scenes and it's going to use the constants that we see all over",
    "start": "1771600",
    "end": "1776760"
  },
  {
    "text": "the place um and return a string with the summary prefix so first we're going",
    "start": "1776760",
    "end": "1782519"
  },
  {
    "text": "to say let summary equals template string with the summary element constant",
    "start": "1782519",
    "end": "1790559"
  },
  {
    "text": "and the story line of the new line and then if scenes.",
    "start": "1790559",
    "end": "1797039"
  },
  {
    "text": "length length is greater than one we're going to want to say",
    "start": "1797039",
    "end": "1802799"
  },
  {
    "text": "summary plus equals another template string with",
    "start": "1802799",
    "end": "1807919"
  },
  {
    "text": "the previous element constant scenes. length the second to",
    "start": "1807919",
    "end": "1815000"
  },
  {
    "text": "last but with the beat um and this previous element says",
    "start": "1815000",
    "end": "1820200"
  },
  {
    "text": "previous beat I'm writing the beat here um and it's the second to last element for a reason which we will see when we",
    "start": "1820200",
    "end": "1826320"
  },
  {
    "text": "implement the generate dialogue function um and then we can just go and return",
    "start": "1826320",
    "end": "1832960"
  },
  {
    "text": "summary return summary now we've imple implemented this we can go back to our",
    "start": "1833720",
    "end": "1839519"
  },
  {
    "text": "generate function um and here we're going to use that to generate different prompts and",
    "start": "1839519",
    "end": "1845200"
  },
  {
    "text": "generate the dialogue so first we're going to want to say const scene equals",
    "start": "1845200",
    "end": "1851159"
  },
  {
    "text": "the last",
    "start": "1851159",
    "end": "1854200"
  },
  {
    "text": "scene oops um input. scenes. length minus one",
    "start": "1856919",
    "end": "1864039"
  },
  {
    "text": "I this going to give us the last scene and then next we can say let Place t uh",
    "start": "1864039",
    "end": "1871360"
  },
  {
    "text": "we're going to have a bunch of variables we're going to have the T at the end equals Place element new line scene.",
    "start": "1871360",
    "end": "1881000"
  },
  {
    "text": "place with a new line okay so now once we've defined our place T function we're",
    "start": "1881000",
    "end": "1886080"
  },
  {
    "text": "going to want to add a check and we're going to say if if the place from the last scene is in our input. place",
    "start": "1886080",
    "end": "1893440"
  },
  {
    "text": "descriptions so if scene. place is in input. place",
    "start": "1893440",
    "end": "1901840"
  },
  {
    "text": "descriptions then we're going to want to extract that place description so we'll say cons Place",
    "start": "1901840",
    "end": "1908679"
  },
  {
    "text": "description equals the place from Place subscriptions input um and then if if",
    "start": "1908679",
    "end": "1915200"
  },
  {
    "text": "this is true we need check we can say Place T",
    "start": "1915200",
    "end": "1921120"
  },
  {
    "text": "equals a template string um and this template string is going to contain the",
    "start": "1921120",
    "end": "1928320"
  },
  {
    "text": "constant description element um and then the place descriptions. description and",
    "start": "1928320",
    "end": "1936000"
  },
  {
    "text": "we're going to want to add a nice new line at the end there um and now we've defined our place T variable for the",
    "start": "1936000",
    "end": "1943559"
  },
  {
    "text": "prompt and we can go on to building the characters prompt so we'll say let",
    "start": "1943559",
    "end": "1949679"
  },
  {
    "text": "characters T and then we'll just give this a empty string um and then for each of the place",
    "start": "1949679",
    "end": "1959559"
  },
  {
    "text": "descriptions passed in we can say for sorry",
    "start": "1959559",
    "end": "1965240"
  },
  {
    "text": "if object.",
    "start": "1965240",
    "end": "1969399"
  },
  {
    "text": "values length is true so if we have some input. place descriptions um we can",
    "start": "1971120",
    "end": "1978639"
  },
  {
    "text": "do characters t plus equals the characters element constant which is",
    "start": "1978639",
    "end": "1985000"
  },
  {
    "text": "just characters colon um and then we can iterate so we can say for con name in",
    "start": "1985000",
    "end": "1991960"
  },
  {
    "text": "input. character descriptions um and then we don't want this but we can say",
    "start": "1991960",
    "end": "1997480"
  },
  {
    "text": "if scene. beat",
    "start": "1997480",
    "end": "2002158"
  },
  {
    "text": "includes includes the name then we can modify by our",
    "start": "2002840",
    "end": "2008679"
  },
  {
    "text": "characters t with the description name and a nice new line now we've constructed our characters",
    "start": "2008679",
    "end": "2016440"
  },
  {
    "text": "prompt um and the last one to do is to put them all together into final prompt so we'll say const plot element T equals",
    "start": "2016440",
    "end": "2026080"
  },
  {
    "text": "template string with the plot element constant and the scene. plot element and",
    "start": "2026080",
    "end": "2032600"
  },
  {
    "text": "a new line next we can say this we want the summary prompts we'll say con",
    "start": "2032600",
    "end": "2038159"
  },
  {
    "text": "summary T equals and then we're going to go ahead and use our",
    "start": "2038159",
    "end": "2043519"
  },
  {
    "text": "prefix summary function before so we're making the summary element now and mean this takes in storyline and a scenes so",
    "start": "2043519",
    "end": "2051358"
  },
  {
    "text": "we'll say input. storyline and input. scenes and now we have our summary string and finally the",
    "start": "2051359",
    "end": "2058158"
  },
  {
    "text": "beat CL beat T equals the beat",
    "start": "2058159",
    "end": "2064398"
  },
  {
    "text": "element and scene. beat with a new line um and now we can kind of put that all",
    "start": "2064399",
    "end": "2069839"
  },
  {
    "text": "together in a con",
    "start": "2069839",
    "end": "2074960"
  },
  {
    "text": "dialogue prefix equals one big template string um and this is going to be the",
    "start": "2074960",
    "end": "2083240"
  },
  {
    "text": "dialog prompt the place T variable or string we defined here uh",
    "start": "2083240",
    "end": "2089960"
  },
  {
    "text": "characters t let just do this so oops want to do the",
    "start": "2089960",
    "end": "2096639"
  },
  {
    "text": "input prefixes do dialog prompt and then",
    "start": "2096640",
    "end": "2101839"
  },
  {
    "text": "the place t characters T plot element T",
    "start": "2101839",
    "end": "2106920"
  },
  {
    "text": "summary T BT um we're going to finish this all up with a new line and a dialog",
    "start": "2106920",
    "end": "2114040"
  },
  {
    "text": "marker and a new line and this is so the prompt knows to start the dialogue uh",
    "start": "2114040",
    "end": "2119880"
  },
  {
    "text": "because if we look here at our dialogue prompt we can see that dialog marker",
    "start": "2119880",
    "end": "2128640"
  },
  {
    "text": "then it starts to define the dialogue end marker so us adding the",
    "start": "2128640",
    "end": "2133920"
  },
  {
    "text": "dialogue marker here we'll tell the LM hey it's time to start writing the dialogue and finish the M marker like it",
    "start": "2133920",
    "end": "2140920"
  },
  {
    "text": "saw in the um in the prompt",
    "start": "2140920",
    "end": "2146079"
  },
  {
    "text": "here now we can construct our Lang chain prompt so IQ copilot dialog prompt with",
    "start": "2146079",
    "end": "2151560"
  },
  {
    "text": "default dialog prompt um and then we can go and call generate text so con dialog",
    "start": "2151560",
    "end": "2158280"
  },
  {
    "text": "text equals generate text let's pass in our config object before we forget our generation prompt seed and",
    "start": "2158280",
    "end": "2166599"
  },
  {
    "text": "llm and then we can return it all so we return a string and a string which is the dialogue text and the dialogue",
    "start": "2166599",
    "end": "2173880"
  },
  {
    "text": "prefix which is this nice big prompt we just defined um and now that we've finished",
    "start": "2173880",
    "end": "2179880"
  },
  {
    "text": "this we can save to fix these inputs and we have now defined all of our different",
    "start": "2179880",
    "end": "2185400"
  },
  {
    "text": "generate functions um and because we have all of these finished we can go to our story generator I'm going start",
    "start": "2185400",
    "end": "2192440"
  },
  {
    "text": "implementing the step method which we'll use in our graph to generate each step aka the title as the first step",
    "start": "2192440",
    "end": "2199440"
  },
  {
    "text": "characters scenes places and so forth all right now for step method what",
    "start": "2199440",
    "end": "2206680"
  },
  {
    "text": "we want to do first is implement the strip and U function we're going to use",
    "start": "2206680",
    "end": "2212040"
  },
  {
    "text": "this pretty frequently throughout this step method um so this what this is",
    "start": "2212040",
    "end": "2217240"
  },
  {
    "text": "going to do is it's going to take in some text and the end marker um it's going to strip the end of a string if it",
    "start": "2217240",
    "end": "2223599"
  },
  {
    "text": "ends with that end marker so it's first to find a editable text variable because",
    "start": "2223599",
    "end": "2229520"
  },
  {
    "text": "have some nice eslint rules around reassigning um text ARG so let edible text equals",
    "start": "2229520",
    "end": "2239800"
  },
  {
    "text": "text. trim um and then we can say const trimmed and marker",
    "start": "2239800",
    "end": "2249520"
  },
  {
    "text": "um and that's going to trim the nend marker which shouldn't need to be trimmed anyway but these are you are",
    "start": "2249599",
    "end": "2256280"
  },
  {
    "text": "able to customize these we want to make sure um and then we want to say if editable text ends with the Trimm end",
    "start": "2256280",
    "end": "2265040"
  },
  {
    "text": "trimmed end marker uh reassign it with",
    "start": "2265040",
    "end": "2272839"
  },
  {
    "text": "substring zero and then the length of the editable text minus the length of the marker so it's just the text without",
    "start": "2272839",
    "end": "2279560"
  },
  {
    "text": "the M marker finally return edible text and there we go our STM strip remove and function is",
    "start": "2279560",
    "end": "2288040"
  },
  {
    "text": "finished and now we can go back and start using this throughout our step Method All right so for the story",
    "start": "2288040",
    "end": "2295280"
  },
  {
    "text": "generator um first I'm going to walk through this class and the methods already implemented and then we're going",
    "start": "2295280",
    "end": "2300560"
  },
  {
    "text": "to implement the set story line method um so this is going to be the main class",
    "start": "2300560",
    "end": "2306280"
  },
  {
    "text": "which handles the generation handles keeping track of things like the scenes the places the",
    "start": "2306280",
    "end": "2311960"
  },
  {
    "text": "dialogues um as we can see we already have all these class properties here and the Constructor Constructor which takes",
    "start": "2311960",
    "end": "2319319"
  },
  {
    "text": "in three required args the LM which is going to be Chad anthropic uh",
    "start": "2319319",
    "end": "2325960"
  },
  {
    "text": "storyline prefixes um and this is these are going to be the prompts which we saw",
    "start": "2325960",
    "end": "2332920"
  },
  {
    "text": "earlier uh the story line uh which is your log line or initial short description of the story",
    "start": "2332920",
    "end": "2339920"
  },
  {
    "text": "and obviously the llm uh the Constructor then sets these fields or class properties and it initializes the",
    "start": "2339920",
    "end": "2347440"
  },
  {
    "text": "different title characters scenes properties with empty string uh entities",
    "start": "2347440",
    "end": "2353560"
  },
  {
    "text": "um and then it calls this set storyline method which we can Implement right now uh so what this is going to do is it's",
    "start": "2353560",
    "end": "2359520"
  },
  {
    "text": "going to set the initial level and storyline Class Property so we're going to say",
    "start": "2359520",
    "end": "2366359"
  },
  {
    "text": "um edible story line is storyline. trim and",
    "start": "2366359",
    "end": "2371599"
  },
  {
    "text": "then if editable story line does not end with a period we're",
    "start": "2371599",
    "end": "2379760"
  },
  {
    "text": "going to want to add that just for consistency so edable story line plus",
    "start": "2379760",
    "end": "2384920"
  },
  {
    "text": "equals to period and then we can set the story line so call this do storyline equals story line um and then to keep",
    "start": "2384920",
    "end": "2392720"
  },
  {
    "text": "track of the level we're on and um this intervention method we have right here",
    "start": "2392720",
    "end": "2399960"
  },
  {
    "text": "um which we will not actually use in this example but there are some other",
    "start": "2399960",
    "end": "2405839"
  },
  {
    "text": "meth methods that you can Implement from the original drron it's not in this REO but I will",
    "start": "2405839",
    "end": "2412480"
  },
  {
    "text": "add it before the end um the original dramaton notebook it allows you to kind of step back recreate a title recreate a",
    "start": "2412480",
    "end": "2419760"
  },
  {
    "text": "character whatnot um and that's what this will be useful for uh we're going to set anyway so we're going to say this",
    "start": "2419760",
    "end": "2426319"
  },
  {
    "text": "Dot level equals zero stting the zeroth level zeroth level and then this do",
    "start": "2426319",
    "end": "2435200"
  },
  {
    "text": "interventions um we don't want to get a time stamp so we know when we started so const timestamp equals date. now and",
    "start": "2435200",
    "end": "2444480"
  },
  {
    "text": "then interventions at the current timestamp",
    "start": "2444480",
    "end": "2449680"
  },
  {
    "text": "equals story line with the editable story",
    "start": "2449680",
    "end": "2456040"
  },
  {
    "text": "line boom and then we're done and our set story line method has been implemented so when you call the",
    "start": "2456040",
    "end": "2462119"
  },
  {
    "text": "Constructor it's going to set the level to zero going to set the interventions going to clean up the story line and set",
    "start": "2462119",
    "end": "2467640"
  },
  {
    "text": "it uh on the class property or set it to the Class Property uh next this get",
    "start": "2467640",
    "end": "2474000"
  },
  {
    "text": "story method which is already implemented uh we're going to use this inside the graph when we're generating the story at the very end uh what you do",
    "start": "2474000",
    "end": "2481240"
  },
  {
    "text": "is you you call it on the class or you use this class to call it uh it gets",
    "start": "2481240",
    "end": "2486359"
  },
  {
    "text": "character descriptions from the St characters calls this util function which one exists in each of the entities",
    "start": "2486359",
    "end": "2494200"
  },
  {
    "text": "which essentially just takes in an an instance of the character entity return to descriptions just a little bit",
    "start": "2494200",
    "end": "2500440"
  },
  {
    "text": "cleaner than calling character. character descriptions so it gets the character descriptions and then new story which is",
    "start": "2500440",
    "end": "2507280"
  },
  {
    "text": "also a class which comes pre-implemented it's kind of just a placeholder for",
    "start": "2507280",
    "end": "2512400"
  },
  {
    "text": "these different entities um which we will use or which is used inside of this render story",
    "start": "2512400",
    "end": "2520000"
  },
  {
    "text": "function see it takes in an instance of the story class and then renders it nicely so this class just kind of holds",
    "start": "2520000",
    "end": "2526359"
  },
  {
    "text": "the story line the title The Character descriptions could use an like an object that's typed with an interface this is a",
    "start": "2526359",
    "end": "2533240"
  },
  {
    "text": "little bit easier because you can initialize it like this and it's done the same way that they do in the original dramaton notebook um and then",
    "start": "2533240",
    "end": "2540599"
  },
  {
    "text": "this returns an instance of this uh story entity which you can then use to random the story here so we we will use",
    "start": "2540599",
    "end": "2547680"
  },
  {
    "text": "this all the way at the end when we've defined the graph won't do it now um and",
    "start": "2547680",
    "end": "2552720"
  },
  {
    "text": "yeah now we can start implementing the different steps uh generating the title characters",
    "start": "2552720",
    "end": "2558400"
  },
  {
    "text": "scenes um yeah all righty uh I had to move rooms",
    "start": "2558400",
    "end": "2564920"
  },
  {
    "text": "real quick but now I'm back we can implement this step method um okay so as we can see it takes in for ARS level",
    "start": "2564920",
    "end": "2572119"
  },
  {
    "text": "seed index and the config object um the first thing we're going to want to do or",
    "start": "2572119",
    "end": "2578400"
  },
  {
    "text": "let me restart um at a high level this step method is going to have an if else chain which is going to check if the",
    "start": "2578400",
    "end": "2584440"
  },
  {
    "text": "level equals one two three and depending on which level it is it's can either generate the title then assign those",
    "start": "2584440",
    "end": "2590359"
  },
  {
    "text": "class Properties or generate the characters assign those class properties um and so on uh so the first things",
    "start": "2590359",
    "end": "2596720"
  },
  {
    "text": "we're going to want to do is do some checks around the level that it gets passed in because we're just allowing a number so we're going to want to assign",
    "start": "2596720",
    "end": "2602640"
  },
  {
    "text": "it to an editable variable so let editable",
    "start": "2602640",
    "end": "2609119"
  },
  {
    "text": "level equals level and then if it's undefined we're going to sign it to",
    "start": "2609760",
    "end": "2615319"
  },
  {
    "text": "whatever is already on the Class Property next we can say if editable",
    "start": "2615319",
    "end": "2621559"
  },
  {
    "text": "level um is less than zero or it's",
    "start": "2621559",
    "end": "2627640"
  },
  {
    "text": "greater than or equal to the the amount of level names then we're going to want to throw",
    "start": "2627640",
    "end": "2633599"
  },
  {
    "text": "a new error so throw new",
    "start": "2633599",
    "end": "2639040"
  },
  {
    "text": "error valid level um and then finally we're going to want to assign this do level sorry we're",
    "start": "2640280",
    "end": "2648680"
  },
  {
    "text": "going to want to add one to the level and then assign it to the Class Property um and next going back to this",
    "start": "2648680",
    "end": "2656960"
  },
  {
    "text": "interventions Class Property we're going to want to add a new one because we're taking a new Step",
    "start": "2656960",
    "end": "2662280"
  },
  {
    "text": "so get a timestamp and then this dot interventions the Tim stamp and we're",
    "start": "2662280",
    "end": "2668559"
  },
  {
    "text": "just going to say step with the current step that we're",
    "start": "2668559",
    "end": "2675559"
  },
  {
    "text": "on Boom all right now for the if statements",
    "start": "2675559",
    "end": "2680880"
  },
  {
    "text": "um pretty simple right we're doing if editable",
    "start": "2680880",
    "end": "2689319"
  },
  {
    "text": "level if editable level equals 1 and we'll just add console logs for",
    "start": "2689319",
    "end": "2695400"
  },
  {
    "text": "placeholders right now generating title else if it's two generating characters",
    "start": "2695400",
    "end": "2702359"
  },
  {
    "text": "else if it's three generating scenes if for generating",
    "start": "2702359",
    "end": "2710680"
  },
  {
    "text": "places else if five generating dialogues then",
    "start": "2710680",
    "end": "2716480"
  },
  {
    "text": "else console.log done all right so now we can",
    "start": "2716480",
    "end": "2721839"
  },
  {
    "text": "go through one by one Implement each of the different levels for Title Character scene places dialogues and so",
    "start": "2721839",
    "end": "2728839"
  },
  {
    "text": "forth um they're all pretty simple we're going to want to say",
    "start": "2728839",
    "end": "2734359"
  },
  {
    "text": "const title and title text equals wait",
    "start": "2734359",
    "end": "2741599"
  },
  {
    "text": "generate title um and then we're going to pass in the args that this requires which",
    "start": "2741599",
    "end": "2748720"
  },
  {
    "text": "are storyline prefixes LM andc",
    "start": "2748720",
    "end": "2753760"
  },
  {
    "text": "so oops it's an object storyline we can get from this",
    "start": "2753760",
    "end": "2759880"
  },
  {
    "text": "do storyline prefixes this. prefixes lm. LM",
    "start": "2759880",
    "end": "2766800"
  },
  {
    "text": "and Seed from the past and Seed object um and this going to give us the title entity and the raw title string",
    "start": "2766800",
    "end": "2774440"
  },
  {
    "text": "and from here we can assign the class property of title to",
    "start": "2774440",
    "end": "2780480"
  },
  {
    "text": "the title that was return this do prompts do tile to the title text",
    "start": "2780480",
    "end": "2787599"
  },
  {
    "text": "text uh which is the raw title text and prompts are",
    "start": "2787599",
    "end": "2793440"
  },
  {
    "text": "here um which is just the results of the prompts that we that we",
    "start": "2793440",
    "end": "2800160"
  },
  {
    "text": "generated um so after we've done this we can update the interventions interventions Tim stamp",
    "start": "2800160",
    "end": "2807400"
  },
  {
    "text": "title title boom and this gives us um the",
    "start": "2807400",
    "end": "2813200"
  },
  {
    "text": "different um sorry we don't want that we want to pend the title so plus equals",
    "start": "2813200",
    "end": "2820000"
  },
  {
    "text": "title title two string we're going to use a title element or title entity in",
    "start": "2820000",
    "end": "2828079"
  },
  {
    "text": "the two string method just so we get all the different properties um from the title entity and",
    "start": "2828079",
    "end": "2833760"
  },
  {
    "text": "not just the raw generated title string um and finally the step method",
    "start": "2833760",
    "end": "2841880"
  },
  {
    "text": "returns a Boolean which is if the title or characters or whatever you ask for to",
    "start": "2841880",
    "end": "2847280"
  },
  {
    "text": "generate was successfully generated so cons success",
    "start": "2847280",
    "end": "2853240"
  },
  {
    "text": "equals title do title. length greater than zero so if there",
    "start": "2853240",
    "end": "2861960"
  },
  {
    "text": "are more than zero characters in the title success we did it and then we can",
    "start": "2862880",
    "end": "2869319"
  },
  {
    "text": "return success boom and now we have finished implementing the first level",
    "start": "2869319",
    "end": "2876280"
  },
  {
    "text": "which is the title all right next for the characters uh it's pretty much the same as title",
    "start": "2876280",
    "end": "2883319"
  },
  {
    "text": "but swapping out the different inputs let me move this out of the",
    "start": "2883319",
    "end": "2889079"
  },
  {
    "text": "way all right so we can paste that in we're going to want to",
    "start": "2889079",
    "end": "2894440"
  },
  {
    "text": "generate characters instead story line prefixes as we can",
    "start": "2894440",
    "end": "2899800"
  },
  {
    "text": "see takes in the same input storyline prefixes CM ah almost forgot we need",
    "start": "2899800",
    "end": "2906520"
  },
  {
    "text": "that config object um so we get proper tracing don't forget that and then we",
    "start": "2906520",
    "end": "2913480"
  },
  {
    "text": "can get the characters and characters text from",
    "start": "2913480",
    "end": "2920960"
  },
  {
    "text": "gener characters assign this to characters equals characters this. prompt.",
    "start": "2920960",
    "end": "2927960"
  },
  {
    "text": "characters equals characters text and then we'll",
    "start": "2927960",
    "end": "2933720"
  },
  {
    "text": "say characters equals characters. two string which is",
    "start": "2933720",
    "end": "2939839"
  },
  {
    "text": "that sorry characters. twring is the two",
    "start": "2939839",
    "end": "2945079"
  },
  {
    "text": "string method on the character entity and then finally if",
    "start": "2945079",
    "end": "2951559"
  },
  {
    "text": "characters do character",
    "start": "2951559",
    "end": "2955200"
  },
  {
    "text": "descriptions if we have more than zero character descriptions we know that we",
    "start": "2960040",
    "end": "2966000"
  },
  {
    "text": "successfully generated characters and we can return success uh now for",
    "start": "2966000",
    "end": "2971240"
  },
  {
    "text": "scenes we can paste that in uh we're going to want to do",
    "start": "2971240",
    "end": "2976640"
  },
  {
    "text": "generate generate scenes this has a slightly different",
    "start": "2976640",
    "end": "2982319"
  },
  {
    "text": "input schema because we need the character description so we just generated but it's still storyline prefixes LMC",
    "start": "2982319",
    "end": "2989720"
  },
  {
    "text": "storyline character descriptions from this do characters. character descriptions",
    "start": "2989720",
    "end": "2998640"
  },
  {
    "text": "um you know what actually we have nice util for this characters get character",
    "start": "2999359",
    "end": "3008280"
  },
  {
    "text": "descriptions we'll use that uto um passing the config boom and now",
    "start": "3008280",
    "end": "3016760"
  },
  {
    "text": "we can say scenes and scenes text we can see that's a",
    "start": "3016760",
    "end": "3024440"
  },
  {
    "text": "string scenes entity this do scenes equals scenes this.",
    "start": "3024440",
    "end": "3030599"
  },
  {
    "text": "prompt. scenes equals scenes",
    "start": "3030599",
    "end": "3035480"
  },
  {
    "text": "text scenes we should probably add a new line to the end of these just for better",
    "start": "3035799",
    "end": "3043119"
  },
  {
    "text": "formatting so let's add these new",
    "start": "3043119",
    "end": "3047519"
  },
  {
    "text": "lines all right and now once again use the two string method on the",
    "start": "3050079",
    "end": "3058599"
  },
  {
    "text": "scenes to convert the scenes entity to nice string for our interventions with a time stamp um and then to check it was",
    "start": "3058599",
    "end": "3067799"
  },
  {
    "text": "success we can just say scenes do num",
    "start": "3067799",
    "end": "3073599"
  },
  {
    "text": "scenes it's greater than zero success and there we go now we finished",
    "start": "3073599",
    "end": "3079680"
  },
  {
    "text": "implementing our scenes characters and title steps you can ask some ni comments",
    "start": "3079680",
    "end": "3085559"
  },
  {
    "text": "saying generate the title generate the characters and",
    "start": "3085559",
    "end": "3094960"
  },
  {
    "text": "generate the scenes just so when we go back we have a little better idea of what's going on let's add some spaces",
    "start": "3094960",
    "end": "3102079"
  },
  {
    "text": "too make this a little bit easier to read There we go um and now we can move",
    "start": "3102079",
    "end": "3108559"
  },
  {
    "text": "on to generating the places um and then we'll just have dialogues and then we're",
    "start": "3108559",
    "end": "3114200"
  },
  {
    "text": "done all right now for generating the places kind of the same as above we can just copy this with some slight",
    "start": "3114200",
    "end": "3122480"
  },
  {
    "text": "modifications so we'll say places",
    "start": "3122480",
    "end": "3127760"
  },
  {
    "text": "and places text um and then we're going to want to do",
    "start": "3127760",
    "end": "3133640"
  },
  {
    "text": "generate Place excuse me Place descriptions put that over there you see",
    "start": "3133640",
    "end": "3139079"
  },
  {
    "text": "that it takes in storyline scenes which is new so we can swap out scenes for",
    "start": "3139079",
    "end": "3148520"
  },
  {
    "text": "scenes Class Property prefixes LMC config don't forget and let's add a",
    "start": "3149599",
    "end": "3155799"
  },
  {
    "text": "comment generate",
    "start": "3155799",
    "end": "3161599"
  },
  {
    "text": "gen the place",
    "start": "3161599",
    "end": "3167760"
  },
  {
    "text": "descriptions all right and now we can assign this class properties so assign",
    "start": "3167760",
    "end": "3172799"
  },
  {
    "text": "places to the places property and prompts places to the placees",
    "start": "3172799",
    "end": "3178440"
  },
  {
    "text": "text all right and now we're going to want to update the interventions like we",
    "start": "3178440",
    "end": "3183720"
  },
  {
    "text": "did see here um but with the different places so we can say for const place",
    "start": "3183720",
    "end": "3190480"
  },
  {
    "text": "name in places and then if place name is",
    "start": "3190480",
    "end": "3196839"
  },
  {
    "text": "true const Place equals placees place name this is going",
    "start": "3196839",
    "end": "3204720"
  },
  {
    "text": "to be the place element so then if place is true this do timestamp place place.",
    "start": "3204720",
    "end": "3212720"
  },
  {
    "text": "two string add a new line boom okay and finally for um returning success we're",
    "start": "3212720",
    "end": "3219240"
  },
  {
    "text": "going to say or const num scenes equals this. scenes. num",
    "start": "3219240",
    "end": "3227720"
  },
  {
    "text": "scenes and then const success equals object",
    "start": "3227720",
    "end": "3234760"
  },
  {
    "text": "do value places do length um and we want to make",
    "start": "3234760",
    "end": "3241559"
  },
  {
    "text": "sure this is the same as the number of scenes and num scenes is not",
    "start": "3241559",
    "end": "3248319"
  },
  {
    "text": "zero and then we can return success and there we go we have implemented our",
    "start": "3248319",
    "end": "3254599"
  },
  {
    "text": "fourth level where we generated Place subcriptions assign that update the",
    "start": "3254599",
    "end": "3259839"
  },
  {
    "text": "interventions um and return success and now we can go on to generating the dialogues and then we can generate the",
    "start": "3259839",
    "end": "3266520"
  },
  {
    "text": "graph or write the code for the graph and see this all work in in action all righty for the",
    "start": "3266520",
    "end": "3273680"
  },
  {
    "text": "dialogues our comment we'll say generate the dialogues um and then first we're going to want to extract um the",
    "start": "3273680",
    "end": "3281400"
  },
  {
    "text": "characters scenes and places into variables just make a little bit easier to work with so",
    "start": "3281400",
    "end": "3287319"
  },
  {
    "text": "const characters equals this. characters um this or const",
    "start": "3287319",
    "end": "3295760"
  },
  {
    "text": "scenes this. scenes and finally const Place descriptions equals this. places",
    "start": "3295760",
    "end": "3304720"
  },
  {
    "text": "nice now we're going to Define dialogues oops const",
    "start": "3304720",
    "end": "3313599"
  },
  {
    "text": "dialog prompts equals an array and we'll type this as an array of",
    "start": "3313599",
    "end": "3320480"
  },
  {
    "text": "strings and also an array of strings",
    "start": "3320480",
    "end": "3326880"
  },
  {
    "text": "um and that's so we don't get the typescript there like cannot assign whatever to type never or array never um",
    "start": "3326880",
    "end": "3334839"
  },
  {
    "text": "yeah and now we can say ifx equals",
    "start": "3334839",
    "end": "3340280"
  },
  {
    "text": "undefined um and that's part of the input here uh kind of an advanced drron",
    "start": "3340280",
    "end": "3345799"
  },
  {
    "text": "feature for going backwards and forth backwards and forwards um and we'll implement the logic we won't actually be",
    "start": "3345799",
    "end": "3352319"
  },
  {
    "text": "ding that um else to",
    "start": "3352319",
    "end": "3357880"
  },
  {
    "text": "do Implement all right so now here we can",
    "start": "3357880",
    "end": "3365000"
  },
  {
    "text": "we're going to want to generate dialogue for every scene so we can say const",
    "start": "3365000",
    "end": "3371400"
  },
  {
    "text": "results equals wait promise.all and then map over all the scenes and call the",
    "start": "3371400",
    "end": "3377640"
  },
  {
    "text": "generate dialogue function here on each scene so scenes do scen",
    "start": "3377640",
    "end": "3388240"
  },
  {
    "text": "map um that's be async",
    "start": "3388799",
    "end": "3394880"
  },
  {
    "text": "scene I don't think we need that we we can just do",
    "start": "3394880",
    "end": "3400079"
  },
  {
    "text": "generate dialogue and generary dialogue takes in storyline scenes character",
    "start": "3400079",
    "end": "3405319"
  },
  {
    "text": "descriptions Place descriptions prefix llm and Seed um so story line is the",
    "start": "3405319",
    "end": "3411400"
  },
  {
    "text": "same so story or same as the other one story line is this a story line",
    "start": "3411400",
    "end": "3417079"
  },
  {
    "text": "scenes we're going to want to pass in only the net amount of scenes that we're",
    "start": "3417079",
    "end": "3423000"
  },
  {
    "text": "on with our with our map so scenes equals scenes",
    "start": "3423000",
    "end": "3429319"
  },
  {
    "text": "dot scenes. slice 0 comma",
    "start": "3429319",
    "end": "3436839"
  },
  {
    "text": "k+ one and this is so we only pass in context in the scenes which it either",
    "start": "3437359",
    "end": "3443160"
  },
  {
    "text": "has generated or it's the first one just the first scene um so it's not looking ahead at scenes which it has even gener",
    "start": "3443160",
    "end": "3449880"
  },
  {
    "text": "a dialogue for next character descriptions are",
    "start": "3449880",
    "end": "3457240"
  },
  {
    "text": "characters um which is the same as or which we get from this variable equals",
    "start": "3457240",
    "end": "3462960"
  },
  {
    "text": "characters. character descriptions next is Place descriptions so Place descriptions we already have",
    "start": "3462960",
    "end": "3470200"
  },
  {
    "text": "that variable prefixes this our prefixes llm this llm and finally see um and now we",
    "start": "3470200",
    "end": "3478680"
  },
  {
    "text": "have our array of 2D arrays um and we're",
    "start": "3478680",
    "end": "3483920"
  },
  {
    "text": "going to want to reduce over these and assign that to our dialogues and dialog prompts variables",
    "start": "3483920",
    "end": "3491880"
  },
  {
    "text": "so we'll say dialog and dialog prompts equals thank you",
    "start": "3491880",
    "end": "3498119"
  },
  {
    "text": "co-pilot here and let's see if copal can get the",
    "start": "3498119",
    "end": "3503559"
  },
  {
    "text": "rest yes perfect um and I think we need this to",
    "start": "3503799",
    "end": "3511440"
  },
  {
    "text": "start uh why are you complaining string is not assignable to property never",
    "start": "3511440",
    "end": "3518799"
  },
  {
    "text": "string never never ah we need to type it so we're going to want to say",
    "start": "3518799",
    "end": "3526160"
  },
  {
    "text": "string array and string array did I type",
    "start": "3526160",
    "end": "3531960"
  },
  {
    "text": "that in correctly um",
    "start": "3531960",
    "end": "3538039"
  },
  {
    "text": "oh yeah inside of this 2D array there we go because we're returning an array with",
    "start": "3538280",
    "end": "3545119"
  },
  {
    "text": "arrays and arrays um and that's going to assign this to our variables up here so we can iterate over our returned results",
    "start": "3545119",
    "end": "3553960"
  },
  {
    "text": "and update this dialog's prompt um and then for this we're not going to implement this in this video don't need",
    "start": "3553960",
    "end": "3560359"
  },
  {
    "text": "to we're not going to use it um but essentially here you would generate dialogues the amount of scenes based on",
    "start": "3560359",
    "end": "3567240"
  },
  {
    "text": "if you've already generated some scenes um but yeah we don't need to do that because we're not actually generating",
    "start": "3567240",
    "end": "3575280"
  },
  {
    "text": "those scenes just now um let's see this do scenes let's",
    "start": "3575280",
    "end": "3583200"
  },
  {
    "text": "make sure we did this all right so we're not using this variable which would actually make sense",
    "start": "3583200",
    "end": "3590359"
  },
  {
    "text": "because we're mapping over and then we're slicing it there so I think wa to ler happy make it UND",
    "start": "3590359",
    "end": "3596599"
  },
  {
    "text": "score um yeah and now we just need to return success or assign the class properties",
    "start": "3596599",
    "end": "3603640"
  },
  {
    "text": "if we able to generate them all and finally return success so we'll say this. dialog dialoges this. prompt.",
    "start": "3603640",
    "end": "3610520"
  },
  {
    "text": "dialog dialog prompts um and then get a loop over everything so for con di of",
    "start": "3610520",
    "end": "3618520"
  },
  {
    "text": "dialogues get it update the interventions and then return true we have succeeded nice",
    "start": "3618520",
    "end": "3628720"
  },
  {
    "text": "um where are these errors coming from ah this is an error if you get here we",
    "start": "3628720",
    "end": "3634720"
  },
  {
    "text": "don't support other steps we got to throw so throw new",
    "start": "3634720",
    "end": "3639799"
  },
  {
    "text": "error inid level and then we have one more which is just for the",
    "start": "3639799",
    "end": "3645880"
  },
  {
    "text": "Imports all right now we can go and implement the graph which is going to",
    "start": "3646280",
    "end": "3653039"
  },
  {
    "text": "use Lane graph um it's going to call our storage generator Loop over that until it's generate all",
    "start": "3653039",
    "end": "3658200"
  },
  {
    "text": "the stories render it log it as a nice text string all right so last but not least",
    "start": "3658200",
    "end": "3664880"
  },
  {
    "text": "we want to implement our graph um we're going to use Lane graph for this it's essentially going to have a few different nodes excuse me for generating",
    "start": "3664880",
    "end": "3672520"
  },
  {
    "text": "um the different dialogue or characters um deciding if we need to continue um verifying that everything is",
    "start": "3672520",
    "end": "3679640"
  },
  {
    "text": "done generating the fancy text and logging it um I'm just going to copy and",
    "start": "3679640",
    "end": "3684680"
  },
  {
    "text": "paste this log line in that I pulled from the dramaton repo and it was their",
    "start": "3684680",
    "end": "3690559"
  },
  {
    "text": "demo of of what like a log line to use gener a story um and we start",
    "start": "3690559",
    "end": "3695839"
  },
  {
    "text": "implementing the graph so first things first I'm going to define a type that",
    "start": "3695839",
    "end": "3701240"
  },
  {
    "text": "will represent the graph state so we'll say type graph",
    "start": "3701240",
    "end": "3708000"
  },
  {
    "text": "State equals um and then what do we want to pass in we want to pass in a log line",
    "start": "3708000",
    "end": "3716279"
  },
  {
    "text": "string which we'll pass it initially we're going to pass in an LM um actually we don't need to pass it",
    "start": "3716279",
    "end": "3722880"
  },
  {
    "text": "in we can just access that globally that does not need to be configurable um and then inside the",
    "start": "3722880",
    "end": "3729279"
  },
  {
    "text": "graph we're going to pass around a story which will be of the story entity or",
    "start": "3729279",
    "end": "3735240"
  },
  {
    "text": "null because this will be null for almost every iteration till the end and the story is finally",
    "start": "3735240",
    "end": "3741440"
  },
  {
    "text": "generated um prefixes uh which will be of type",
    "start": "3741440",
    "end": "3747680"
  },
  {
    "text": "prefixes we will pass this in so it does not need to be null um and these are the",
    "start": "3747680",
    "end": "3753160"
  },
  {
    "text": "different prompt prefixes that we're going to use throughout the generations um what else do we need I",
    "start": "3753160",
    "end": "3759160"
  },
  {
    "text": "have written down over here the level level we want to start on",
    "start": "3759160",
    "end": "3764599"
  },
  {
    "text": "level number um this is always going to be zero for us however you could pass in",
    "start": "3764599",
    "end": "3772319"
  },
  {
    "text": "three if you want to start generating at you know let's say scenes but for us we're always going to pass it",
    "start": "3772319",
    "end": "3778039"
  },
  {
    "text": "in zero but it's good to make it customizable and then finally",
    "start": "3778039",
    "end": "3784359"
  },
  {
    "text": "generator which will be of type story generator or",
    "start": "3784440",
    "end": "3789520"
  },
  {
    "text": "null um we're not going to pass this in however we're going to initialize it on",
    "start": "3789520",
    "end": "3794559"
  },
  {
    "text": "the first node and then pass it through so it's going to be included in the state all righty now we can Define our",
    "start": "3794559",
    "end": "3802920"
  },
  {
    "text": "graph State channels that we're going to pass into our St graphs we'll say const",
    "start": "3802920",
    "end": "3810160"
  },
  {
    "text": "graph State um and this is some L graph syntax so we can kind of just copy this",
    "start": "3810160",
    "end": "3817000"
  },
  {
    "text": "all in each Channel takes in a value which",
    "start": "3817000",
    "end": "3823640"
  },
  {
    "text": "we are going to default to null because we don't need a default or or sorry",
    "start": "3823640",
    "end": "3829680"
  },
  {
    "text": "we're going to set it to null um you there's you can add a default um",
    "start": "3829680",
    "end": "3836960"
  },
  {
    "text": "which is just a generator function which returns something that the default will be um and for Value you can make it a",
    "start": "3836960",
    "end": "3843279"
  },
  {
    "text": "function where every time you return that in the state it calls this function so let's say you're doing an array you",
    "start": "3843279",
    "end": "3850319"
  },
  {
    "text": "would take in A and B which would both be arrays and then you could like concat it and that",
    "start": "3850319",
    "end": "3857079"
  },
  {
    "text": "way you could return just a single element of the array and not the entire State and L graph will handle updating",
    "start": "3857079",
    "end": "3864079"
  },
  {
    "text": "that so it always stays in sync but for us we just need to be null um and we can",
    "start": "3864079",
    "end": "3870200"
  },
  {
    "text": "do this for each entry so",
    "start": "3870200",
    "end": "3876119"
  },
  {
    "text": "paste paste paste and",
    "start": "3876119",
    "end": "3881960"
  },
  {
    "text": "paste nice um now we can Define our L",
    "start": "3881960",
    "end": "3887599"
  },
  {
    "text": "graph instance we're going to call it we're going to give it a variable name of workflow um it's a convention we use",
    "start": "3887599",
    "end": "3892720"
  },
  {
    "text": "in a lot of the L graph docs um it's like your graph workflow so const",
    "start": "3892720",
    "end": "3898160"
  },
  {
    "text": "workflow equals new state graph which we can import from Lang chain SL L graph",
    "start": "3898160",
    "end": "3905520"
  },
  {
    "text": "and then pass in our channels graph State and to be extra",
    "start": "3905520",
    "end": "3912319"
  },
  {
    "text": "fancy we can pass in a generic for the graph state right there nice now we've",
    "start": "3912319",
    "end": "3918760"
  },
  {
    "text": "defined our workflow we can go and Def find our llm so con llm equals new chat",
    "start": "3918760",
    "end": "3925000"
  },
  {
    "text": "androp Pi model name is oh God what is it okay",
    "start": "3925000",
    "end": "3933760"
  },
  {
    "text": "anthropic models I'm going to figure out the API",
    "start": "3933760",
    "end": "3940480"
  },
  {
    "text": "name and then come back all right found it so for this we're going to be using Sonet um that's",
    "start": "3940480",
    "end": "3946839"
  },
  {
    "text": "their smallest model smallest and smartest model they have available right now um I would recommend using Haiku",
    "start": "3946839",
    "end": "3953200"
  },
  {
    "text": "when it does release um hopefully it comes out soon soon just because it's going to be cheaper for you um it's",
    "start": "3953200",
    "end": "3958799"
  },
  {
    "text": "smart enough to get the right results uh and a lot faster um that's what they",
    "start": "3958799",
    "end": "3964440"
  },
  {
    "text": "claim so for this we're going to use Sonic because High crew is not available so model name is that and set the",
    "start": "3964440",
    "end": "3972039"
  },
  {
    "text": "temperature to zero nice okay now we can Define our",
    "start": "3972039",
    "end": "3979119"
  },
  {
    "text": "different um nodes the first will be the initializer node so const",
    "start": "3979119",
    "end": "3986160"
  },
  {
    "text": "initializer node equals State graph",
    "start": "3986160",
    "end": "3994000"
  },
  {
    "text": "State and this is the nice thing about L graph each node gets the entire State as",
    "start": "3994440",
    "end": "4000559"
  },
  {
    "text": "an input however you only have to",
    "start": "4000559",
    "end": "4006440"
  },
  {
    "text": "return you don't have to return the entire State each time um so let's say we take in the entire state but I only",
    "start": "4006440",
    "end": "4012720"
  },
  {
    "text": "return the generator it's not going to lose any of the other state items um",
    "start": "4012720",
    "end": "4018160"
  },
  {
    "text": "even though I didn't return them in that node so we can we we only need to type",
    "start": "4018160",
    "end": "4023559"
  },
  {
    "text": "this as returning a partial um and here we're going to want to define the story generator",
    "start": "4023559",
    "end": "4030039"
  },
  {
    "text": "class uh yeah so we can say con generator equals new story",
    "start": "4030039",
    "end": "4038400"
  },
  {
    "text": "generator let's add oh that",
    "start": "4038400",
    "end": "4044359"
  },
  {
    "text": "sucks why I vs code um import story generator from ah we've",
    "start": "4044359",
    "end": "4053520"
  },
  {
    "text": "already imported it because we use it as a type that makes sense um and then this takes in an",
    "start": "4053520",
    "end": "4060480"
  },
  {
    "text": "llm a story line which be the state. log line and the prefixes which will also be",
    "start": "4060480",
    "end": "4066319"
  },
  {
    "text": "from our state um and then I believe we can just",
    "start": "4066319",
    "end": "4073558"
  },
  {
    "text": "return our generator like that and then this will get passed",
    "start": "4073960",
    "end": "4079559"
  },
  {
    "text": "to the next node we won't have to initialize it again we can go ahead",
    "start": "4079559",
    "end": "4088599"
  },
  {
    "text": "and no we will add our workflows later so next we're going to generate or we're going to define the generator node which",
    "start": "4088599",
    "end": "4094599"
  },
  {
    "text": "is going to iterate on the levels and call the um story generator step",
    "start": "4094599",
    "end": "4103400"
  },
  {
    "text": "function so const generate generator node or we'll call it",
    "start": "4103400",
    "end": "4109640"
  },
  {
    "text": "generate node generate node equals the state it's",
    "start": "4109640",
    "end": "4115159"
  },
  {
    "text": "going to return a partial so we will say con generator equals state",
    "start": "4115159",
    "end": "4122920"
  },
  {
    "text": "if generator is false we're going to want to throw because that wouldn't make sense throw new error generator not",
    "start": "4122920",
    "end": "4132838"
  },
  {
    "text": "initialized uh now we know that it's going to be defined find so we can say",
    "start": "4132839",
    "end": "4138758"
  },
  {
    "text": "const success equals a wait we need to make this as sync and then type this for",
    "start": "4138759",
    "end": "4146920"
  },
  {
    "text": "a",
    "start": "4146920",
    "end": "4149238"
  },
  {
    "text": "promise nice await",
    "start": "4153319",
    "end": "4158520"
  },
  {
    "text": "nope we're going to want to wait the generator. step and we're going to want to pass in",
    "start": "4158520",
    "end": "4165199"
  },
  {
    "text": "the level and we don't",
    "start": "4165199",
    "end": "4171000"
  },
  {
    "text": "undefined undefined we don't need to pass in those um we do need to pass in a",
    "start": "4171000",
    "end": "4177000"
  },
  {
    "text": "our config object and here we forgot to Define config as runnable config make",
    "start": "4177000",
    "end": "4185798"
  },
  {
    "text": "sure that get imported from the right path yep Lang chain core runnables um and the reason we don't need to include",
    "start": "4185799",
    "end": "4191159"
  },
  {
    "text": "this in this state is because uh because Lane graph is a lane chain uh open",
    "start": "4191159",
    "end": "4197040"
  },
  {
    "text": "source project um every time this note is called We're automatically going to pass",
    "start": "4197040",
    "end": "4203600"
  },
  {
    "text": "in config as the second object so if we Define it that's enough we don't need to include in state or anything because L",
    "start": "4203600",
    "end": "4209199"
  },
  {
    "text": "chain or L graph will pass it through every time um and now we're passing our level and our",
    "start": "4209199",
    "end": "4215040"
  },
  {
    "text": "config and then we can um if this is successful then we",
    "start": "4215040",
    "end": "4221199"
  },
  {
    "text": "want to return the level plus one and if it's not success successful we want to return the same level so",
    "start": "4221199",
    "end": "4229760"
  },
  {
    "text": "if success is true oops",
    "start": "4229760",
    "end": "4237120"
  },
  {
    "text": "return level as state. level + one and",
    "start": "4237360",
    "end": "4244199"
  },
  {
    "text": "else nope we're going to want to",
    "start": "4244199",
    "end": "4248560"
  },
  {
    "text": "return level as just state. level um in this way when we Define the",
    "start": "4249560",
    "end": "4256280"
  },
  {
    "text": "next node or not a node it's going to be a um a checking function we'll check to",
    "start": "4256280",
    "end": "4261600"
  },
  {
    "text": "see if we need to advance to the finish line or keep going um if we need to keep",
    "start": "4261600",
    "end": "4268840"
  },
  {
    "text": "going it's just going to call generate node again the level's going to get passed in it'll either advance to the next level or retry um there's a",
    "start": "4268840",
    "end": "4275920"
  },
  {
    "text": "built-in maximum retries to Lane graph so this will time out if it keeps failing we don't have to deal with that",
    "start": "4275920",
    "end": "4282560"
  },
  {
    "text": "however you can update it um it is configurable so if you want it to be less than I think it's 25 is the max",
    "start": "4282560",
    "end": "4290239"
  },
  {
    "text": "right now then you can change it to be two uh we'll don't do that because then won't be able to complete you can change it to be like 10 or 12 or 50 depending",
    "start": "4290239",
    "end": "4297800"
  },
  {
    "text": "on how many retrives you want um but most of the time this is just ass going to succeed it's going to advance to the",
    "start": "4297800",
    "end": "4303480"
  },
  {
    "text": "next one and then we can Define our should continue check so const should",
    "start": "4303480",
    "end": "4312280"
  },
  {
    "text": "continue um and this is going to essentially check to see if we need to keep generating or if we can go to the",
    "start": "4312280",
    "end": "4318280"
  },
  {
    "text": "render story function so const level equals State and then we",
    "start": "4318280",
    "end": "4325000"
  },
  {
    "text": "only care about five levels yeah five levels so",
    "start": "4325000",
    "end": "4332199"
  },
  {
    "text": "if level equal 5 return um what are we going to call it",
    "start": "4332199",
    "end": "4339840"
  },
  {
    "text": "we'll call it render for rendering the story and",
    "start": "4339840",
    "end": "4345639"
  },
  {
    "text": "then else or render node and then else we will",
    "start": "4345639",
    "end": "4353040"
  },
  {
    "text": "return generate node uh we'll do greater than or",
    "start": "4353360",
    "end": "4358800"
  },
  {
    "text": "equal just so if something goes wrong we don't skip over it um yeah and the reason why we can",
    "start": "4358800",
    "end": "4365840"
  },
  {
    "text": "return a string here is because when we Define this should continue method um",
    "start": "4365840",
    "end": "4371920"
  },
  {
    "text": "Lane graph will take whatever the string is that's returned and if a node exists",
    "start": "4371920",
    "end": "4377360"
  },
  {
    "text": "with that name it'll call that node uh there is a way to return another value",
    "start": "4377360",
    "end": "4382440"
  },
  {
    "text": "and then map it to the node you want to invoke but this is simpler and more",
    "start": "4382440",
    "end": "4388960"
  },
  {
    "text": "concise um nice now we can Define our render",
    "start": "4388960",
    "end": "4395360"
  },
  {
    "text": "story that's not right we'll just do ourselves okay const render node equals",
    "start": "4395560",
    "end": "4400760"
  },
  {
    "text": "we don't need async State graph and then we can say const",
    "start": "4400760",
    "end": "4405880"
  },
  {
    "text": "generator equal State we can get the same if statement in there if it's false",
    "start": "4405880",
    "end": "4411520"
  },
  {
    "text": "throw and then story equals generator",
    "start": "4411520",
    "end": "4419440"
  },
  {
    "text": "dot get story which is the method which was already implemented um it essentially just returns a new story",
    "start": "4419440",
    "end": "4427520"
  },
  {
    "text": "entity and then we can return",
    "start": "4427520",
    "end": "4432840"
  },
  {
    "text": "story and that will apply there",
    "start": "4432840",
    "end": "4437040"
  },
  {
    "text": "nice now we can Define our L graph nodes so we'll say initializer node it's going to be",
    "start": "4438120",
    "end": "4445280"
  },
  {
    "text": "called initializer node generator node is generator node",
    "start": "4445280",
    "end": "4451239"
  },
  {
    "text": "should continue will not be a node um but we do need render node to be",
    "start": "4451239",
    "end": "4457480"
  },
  {
    "text": "one so we'll just copy and paste that nice okay now we Define our nodes and L graph these are different uh functions",
    "start": "4457480",
    "end": "4464280"
  },
  {
    "text": "which can be invoked by the graph which can go back and forth to each other um and we need to find our starting place",
    "start": "4464280",
    "end": "4470639"
  },
  {
    "text": "now so we can say workflow. add or set entry point with initializer",
    "start": "4470639",
    "end": "4478040"
  },
  {
    "text": "node workflow. add edge initializer node to gener to generator node this",
    "start": "4478040",
    "end": "4484040"
  },
  {
    "text": "essentially says L graph should always start with the initializer node and then",
    "start": "4484040",
    "end": "4489080"
  },
  {
    "text": "after finishing the initializer node it should always call generator node next and then we want want to add a",
    "start": "4489080",
    "end": "4495760"
  },
  {
    "text": "conditional Edge for generator noes so workflow. add conditional",
    "start": "4495760",
    "end": "4501880"
  },
  {
    "text": "edges and this is going to take in a start key and a condition so that'll be",
    "start": "4501880",
    "end": "4507760"
  },
  {
    "text": "the generator node and then the should continue node um what this says is after the generator node finishes call should",
    "start": "4507760",
    "end": "4514239"
  },
  {
    "text": "continue and then should continue either Returns the name of a",
    "start": "4514239",
    "end": "4519480"
  },
  {
    "text": "node or the name of a different node um or you can make a return some keywords like end which",
    "start": "4519480",
    "end": "4526320"
  },
  {
    "text": "is uh exported from Lane graph you could say and and this is a",
    "start": "4526320",
    "end": "4531480"
  },
  {
    "text": "constant um where if Lane graph sees this it'll automatically finish the chain we're not going to do that here um",
    "start": "4531480",
    "end": "4538840"
  },
  {
    "text": "because we can set a do add edge nope",
    "start": "4538840",
    "end": "4545840"
  },
  {
    "text": "because yeah we don't need to add an edge for generator to render because our should continue will handle that but",
    "start": "4545840",
    "end": "4551440"
  },
  {
    "text": "what we do need to add is a finish Point render node which says that if should",
    "start": "4551440",
    "end": "4557159"
  },
  {
    "text": "continue returns render node because the level has we've already completed all",
    "start": "4557159",
    "end": "4562199"
  },
  {
    "text": "the levels then it'll call render node get our story return it to State and",
    "start": "4562199",
    "end": "4569679"
  },
  {
    "text": "finish nice now we just need to compile the app so we'll say the graph H app",
    "start": "4569679",
    "end": "4575320"
  },
  {
    "text": "equals workflow. compile um and then we can invoke it",
    "start": "4575320",
    "end": "4582960"
  },
  {
    "text": "so we're going to stream this this just to make it a little better a little nicer ux so you say cons stream equals",
    "start": "4582960",
    "end": "4590480"
  },
  {
    "text": "await app.st stream we'll pass our args in a little",
    "start": "4590480",
    "end": "4595840"
  },
  {
    "text": "bit later um and then we can iterate over the Stream So for wait con state of",
    "start": "4595840",
    "end": "4602880"
  },
  {
    "text": "stream um here this is going to be an object where the key is the node we're",
    "start": "4602880",
    "end": "4609600"
  },
  {
    "text": "on and the value is whatever was returned from that node so we can say const",
    "start": "4609600",
    "end": "4615440"
  },
  {
    "text": "key value equals",
    "start": "4615440",
    "end": "4620600"
  },
  {
    "text": "object object. entry State we'll grab the zeroth item and then we can do some",
    "start": "4620600",
    "end": "4626280"
  },
  {
    "text": "nice logging console.log um new",
    "start": "4626280",
    "end": "4631960"
  },
  {
    "text": "line new line",
    "start": "4631960",
    "end": "4636679"
  },
  {
    "text": "console.log we'll just say key",
    "start": "4637239",
    "end": "4642960"
  },
  {
    "text": "key oops and then",
    "start": "4642960",
    "end": "4648920"
  },
  {
    "text": "value value but we were we're going to we'll comment that out we don't really need to see that um we should have another check",
    "start": "4648920",
    "end": "4656400"
  },
  {
    "text": "here okay yeah so going back to the end variable or constant I mentioned this",
    "start": "4656400",
    "end": "4662639"
  },
  {
    "text": "will always be the key of the last node so we can say if",
    "start": "4662639",
    "end": "4667960"
  },
  {
    "text": "key equals n we're going to do something a little",
    "start": "4667960",
    "end": "4673880"
  },
  {
    "text": "bit different we don't need need to log that but if it's not the end then we want to log in here we can say let final",
    "start": "4673880",
    "end": "4683560"
  },
  {
    "text": "result and we can say final result equals value",
    "start": "4683560",
    "end": "4691800"
  },
  {
    "text": "beautiful um and then finally we can",
    "start": "4691800",
    "end": "4697800"
  },
  {
    "text": "console.log our final result to see the final",
    "start": "4697800",
    "end": "4702600"
  },
  {
    "text": "result nice okay yes last thing we need to do is pass in our values to stream which we defined as the log line the",
    "start": "4702840",
    "end": "4709560"
  },
  {
    "text": "prefixes and the level so level always be zero at least in our case when we're",
    "start": "4709560",
    "end": "4715600"
  },
  {
    "text": "starting log line is that constant and then prefixes we can import from our",
    "start": "4715600",
    "end": "4724120"
  },
  {
    "text": "prefixes so import",
    "start": "4724120",
    "end": "4728320"
  },
  {
    "text": "prefixes um and then we're going to do this one",
    "start": "4730360",
    "end": "4736719"
  },
  {
    "text": "so nice and this is going to be prompt prefixes ah sorry I mistyped this we",
    "start": "4737159",
    "end": "4744960"
  },
  {
    "text": "only need to set this to a string and I will show Y in a",
    "start": "4744960",
    "end": "4750400"
  },
  {
    "text": "second we set that to a string because inside of story generator inside the",
    "start": "4750400",
    "end": "4758360"
  },
  {
    "text": "Constructor it does that mapping for us so we pass in a string and then it maps that to the proper prefix and assigns it",
    "start": "4758360",
    "end": "4766280"
  },
  {
    "text": "to the Class Property nice uh this all looks good I'm",
    "start": "4766280",
    "end": "4772000"
  },
  {
    "text": "going to pause this set my environment variables and then come back and we'll run it and see what it actually looks like in my",
    "start": "4772000",
    "end": "4778159"
  },
  {
    "text": "terminal all right I've set my environment variables I added my anthropic API key and then also my Lang",
    "start": "4778159",
    "end": "4783800"
  },
  {
    "text": "Smith API key um that's so we can see get all the tracing um so now we can go and try to",
    "start": "4783800",
    "end": "4790639"
  },
  {
    "text": "run this so we'll navigate to The backend directory we say start hit it",
    "start": "4790639",
    "end": "4798400"
  },
  {
    "text": "and 400 error rolls must alternate between user",
    "start": "4798400",
    "end": "4803920"
  },
  {
    "text": "and assistant but found multiple user roles in a",
    "start": "4803920",
    "end": "4809080"
  },
  {
    "text": "row interesting interesting uh I believe this is",
    "start": "4809080",
    "end": "4818119"
  },
  {
    "text": "because if we set that",
    "start": "4820000",
    "end": "4826639"
  },
  {
    "text": "um before it was just doing a from template which assigns a default role and I think for anthropic the default",
    "start": "4826800",
    "end": "4832840"
  },
  {
    "text": "rle is a human role but if we set this to system it should start with a system",
    "start": "4832840",
    "end": "4840159"
  },
  {
    "text": "please yes okay so now we're calling the generator node once it's going to generate uh might",
    "start": "4840159",
    "end": "4846960"
  },
  {
    "text": "take a second because Sonet is a little bit bigger than there or a little bit slower I guess um than something like",
    "start": "4846960",
    "end": "4855120"
  },
  {
    "text": "gbt 35 or hopefully haou when it releases but you can see it's moving",
    "start": "4855120",
    "end": "4860520"
  },
  {
    "text": "kind of quick um yeah so we've gone through three generator nodes so far should be",
    "start": "4860520",
    "end": "4866199"
  },
  {
    "text": "five total then it'll log everything I forget the exact output so we're going to run this one more time once we see",
    "start": "4866199",
    "end": "4872520"
  },
  {
    "text": "what the value of the end is um so that we can call the render story function on",
    "start": "4872520",
    "end": "4879840"
  },
  {
    "text": "the story I guess we could have just logged that there but it's a little bit nicer if at the end now we've done five",
    "start": "4879840",
    "end": "4886960"
  },
  {
    "text": "generator nodes or we're completing the fifth and when this finishes it should pretty instantly map to the render node",
    "start": "4886960",
    "end": "4894679"
  },
  {
    "text": "and then log okay so I canel it um it says Penny",
    "start": "4894679",
    "end": "4902159"
  },
  {
    "text": "and Lang in Lang Smith because it doesn't realize it's been canceled yet and we can actually debug why this was",
    "start": "4902159",
    "end": "4909960"
  },
  {
    "text": "not completing so we can see it generated the first one which should be a",
    "start": "4909960",
    "end": "4915880"
  },
  {
    "text": "title gave us a nice title",
    "start": "4915880",
    "end": "4921159"
  },
  {
    "text": "second gave us our characters that looks right third should give us our",
    "start": "4921159",
    "end": "4929880"
  },
  {
    "text": "places fourth should give us okay so it looks like it's getting",
    "start": "4929880",
    "end": "4936719"
  },
  {
    "text": "caught up on places",
    "start": "4936719",
    "end": "4942719"
  },
  {
    "text": "um we then go here we see level two it's obviously not updating because it wasn't",
    "start": "4943000",
    "end": "4949480"
  },
  {
    "text": "happy with that success so generator node just make sure it's",
    "start": "4949480",
    "end": "4956639"
  },
  {
    "text": "still only able to get through places",
    "start": "4956639",
    "end": "4961800"
  },
  {
    "text": "ah wait a minute yeah so it looks like it's adding",
    "start": "4961800",
    "end": "4967080"
  },
  {
    "text": "some extra text we don't",
    "start": "4967080",
    "end": "4970320"
  },
  {
    "text": "want still places we go to the last one I cancel it halfway through okay so",
    "start": "4973440",
    "end": "4981440"
  },
  {
    "text": "we can do is add some more logging inside of our",
    "start": "4981440",
    "end": "4987360"
  },
  {
    "text": "graph or sorry inside of our generator so if we go here let's open this up a",
    "start": "4987360",
    "end": "4994120"
  },
  {
    "text": "little bit more and we'll",
    "start": "4994120",
    "end": "4998719"
  },
  {
    "text": "say We'll add console logs to each level so we can see what is",
    "start": "5002159",
    "end": "5009080"
  },
  {
    "text": "failing exactly um and then I guess we'll also add an if statement saying if success is false we want to log exactly",
    "start": "5009080",
    "end": "5015639"
  },
  {
    "text": "what was the raw text and if it was able to parse it out so I'm going to add that and come back in a second all right so I",
    "start": "5015639",
    "end": "5021920"
  },
  {
    "text": "add this little check to each of the levels except for dialogue we never made it there plus it'll always return",
    "start": "5021920",
    "end": "5028280"
  },
  {
    "text": "success so we don't need to check there um but essentially what this does is you know it says pretty self-explanatory if",
    "start": "5028280",
    "end": "5034840"
  },
  {
    "text": "success is false it's going to log title success false or character success false and then the um hopefully the extracted",
    "start": "5034840",
    "end": "5042360"
  },
  {
    "text": "entity um but it probably won't be extracted if it's failing and then the raw text is returned from the",
    "start": "5042360",
    "end": "5048760"
  },
  {
    "text": "LM um so now we can go back here we can",
    "start": "5048760",
    "end": "5054159"
  },
  {
    "text": "rerun and then when this starts to fail I will kill it and we can try and debug from there all right so as we saw last",
    "start": "5054159",
    "end": "5061719"
  },
  {
    "text": "time it's failing on scenes um and it's unable to extract a list of scenes but",
    "start": "5061719",
    "end": "5067880"
  },
  {
    "text": "it obviously is getting the text um so we can go",
    "start": "5067880",
    "end": "5073360"
  },
  {
    "text": "to generate scenes we can then go to the from string",
    "start": "5073360",
    "end": "5079520"
  },
  {
    "text": "because we know that this is getting generated um and we want to see what is",
    "start": "5079520",
    "end": "5084880"
  },
  {
    "text": "getting trying to get extracted so we're just going to log all of this um console",
    "start": "5084880",
    "end": "5090080"
  },
  {
    "text": "log it all and then see what if any are not getting extracted",
    "start": "5090080",
    "end": "5095600"
  },
  {
    "text": "all right so running it again um it looks like it was just the model being a little unpredictable because we can see",
    "start": "5095600",
    "end": "5102239"
  },
  {
    "text": "it generated the scenes here um but now if we look again it's failing to",
    "start": "5102239",
    "end": "5109280"
  },
  {
    "text": "generate the descriptions um so we have our system prompt prompt here location description",
    "start": "5109280",
    "end": "5117119"
  },
  {
    "text": "for a given log line um and it's just iterating on these over and over it's",
    "start": "5117119",
    "end": "5122199"
  },
  {
    "text": "not able to generate so what we're going to do is same console log debug process",
    "start": "5122199",
    "end": "5127400"
  },
  {
    "text": "where we go look at our generate text",
    "start": "5127400",
    "end": "5132880"
  },
  {
    "text": "for Unique place names and we see what's going wrong and why it's not able to",
    "start": "5132880",
    "end": "5138280"
  },
  {
    "text": "continue so I'm going to add console logs I'll rerun it and then I'll come back and I'll show you what it logged and kind of the debug processor around",
    "start": "5138280",
    "end": "5145400"
  },
  {
    "text": "that all righty I'm back um the issue ended up being here when we get to the",
    "start": "5145400",
    "end": "5152440"
  },
  {
    "text": "number of places before I had it at get number of scenes because I saw scenes",
    "start": "5152440",
    "end": "5158440"
  },
  {
    "text": "get number of scenes wrong that is not we want to check we want to check num",
    "start": "5158440",
    "end": "5165679"
  },
  {
    "text": "places and then make sure that the place descriptions matches the amount of places we don't care if there's the same",
    "start": "5165679",
    "end": "5172800"
  },
  {
    "text": "amount of scenes as places that doesn't correlate at all we want to make sure the number of places we we've generated",
    "start": "5172800",
    "end": "5179760"
  },
  {
    "text": "the same amount of place descriptions as there are places so when I have this it",
    "start": "5179760",
    "end": "5187000"
  },
  {
    "text": "works um let's run it again oh also while I was debugging very exciting um",
    "start": "5187000",
    "end": "5193480"
  },
  {
    "text": "anthropic released Hau uh which is their smaller model around gp35 knowledge I",
    "start": "5193480",
    "end": "5201400"
  },
  {
    "text": "mean knowledge wise but also half the price for input tokens and um I think 25",
    "start": "5201400",
    "end": "5207000"
  },
  {
    "text": "cents per million tokens cheaper on output tokens and I think it's supposed to be faster as well and I mean from",
    "start": "5207000",
    "end": "5213159"
  },
  {
    "text": "running this you remember you were just seeing how fast it was with Sonet and now if we rerun with",
    "start": "5213159",
    "end": "5220560"
  },
  {
    "text": "Hau I don't even need to pause the video it's just going to whip right through",
    "start": "5220920",
    "end": "5227480"
  },
  {
    "text": "it generate generate I mean this is maybe five 6,000",
    "start": "5228239",
    "end": "5237880"
  },
  {
    "text": "tokens in total and it's going to get it all done",
    "start": "5237880",
    "end": "5243119"
  },
  {
    "text": "in oh this was okay so 21 seconds total between everything that was an",
    "start": "5243119",
    "end": "5250719"
  },
  {
    "text": "error on my log I thought I logged it properly exist story definitely does",
    "start": "5250719",
    "end": "5260480"
  },
  {
    "text": "exist ah I don't need I don't think I need to",
    "start": "5261600",
    "end": "5267158"
  },
  {
    "text": "do where was I graph I don't need by end I don't think let's try that and we'll",
    "start": "5267280",
    "end": "5273600"
  },
  {
    "text": "also just console log final result so we have",
    "start": "5273600",
    "end": "5279480"
  },
  {
    "text": "both in case story does not exist um and then we can see what went",
    "start": "5279480",
    "end": "5287280"
  },
  {
    "text": "wrong but this should work um I'm going to pause in between areas 20 seconds is",
    "start": "5287280",
    "end": "5292960"
  },
  {
    "text": "a little long wait but I'll be back when this is finished all right so that was right I didn't need to mark it with the",
    "start": "5292960",
    "end": "5298560"
  },
  {
    "text": "end um so when we final result. story",
    "start": "5298560",
    "end": "5303639"
  },
  {
    "text": "because we're returning the story here and then we wrap with this render story uto which comes with this repo we see",
    "start": "5303639",
    "end": "5311480"
  },
  {
    "text": "this um and inside the render story util you can update this to have your name or",
    "start": "5311480",
    "end": "5317280"
  },
  {
    "text": "anthropic or whoever you want to be co-written by um and we see it was able to generate title description all these",
    "start": "5317280",
    "end": "5326520"
  },
  {
    "text": "scenes with places plots and beats and then finally all the dialogue um as you",
    "start": "5326520",
    "end": "5332960"
  },
  {
    "text": "can see it's extensive it it was able to generate a lot of text and if you actually sit and read through it um it's",
    "start": "5332960",
    "end": "5339239"
  },
  {
    "text": "pretty cohesive so I will include in this template repo um a text file called",
    "start": "5339239",
    "end": "5346400"
  },
  {
    "text": "example story right here um and this is from previous generations so you can see what the expected output looks like if",
    "start": "5346400",
    "end": "5351800"
  },
  {
    "text": "you're building this yourself um and yeah just to reiterate what we did here we use Google's",
    "start": "5351800",
    "end": "5357760"
  },
  {
    "text": "dramaton uh Lang graph and Lang chain and anthropics brand new hiu model to",
    "start": "5357760",
    "end": "5364840"
  },
  {
    "text": "quickly and efficiently without using function calling generate an entire play",
    "start": "5364840",
    "end": "5370199"
  },
  {
    "text": "with characters and scenes and and you know a whole dialogue um and without",
    "start": "5370199",
    "end": "5377000"
  },
  {
    "text": "that much code there's really about 100 lines of code for Lane graph maybe a",
    "start": "5377000",
    "end": "5383080"
  },
  {
    "text": "little less because this this is kind of placeholder code really um and then Inside Story",
    "start": "5383080",
    "end": "5390320"
  },
  {
    "text": "generator we have the core lock logic is only about 120 lines as well um and then utils take",
    "start": "5390320",
    "end": "5398719"
  },
  {
    "text": "up and I guess generate 250 it wasn't that much you know we got it done in what was this about an hour long YouTube",
    "start": "5398719",
    "end": "5404600"
  },
  {
    "text": "video um so yeah I hope everybody liked this and thanks for watching",
    "start": "5404600",
    "end": "5413239"
  }
]