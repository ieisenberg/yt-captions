[
  {
    "text": "hey this is Lance from Lang Shain so",
    "start": "960",
    "end": "3159"
  },
  {
    "text": "anthropic just released tool use their",
    "start": "3159",
    "end": "4880"
  },
  {
    "text": "API and I've been really excited about",
    "start": "4880",
    "end": "6680"
  },
  {
    "text": "this for a while so let me kind of walk",
    "start": "6680",
    "end": "8240"
  },
  {
    "text": "through the implications and and how it",
    "start": "8240",
    "end": "10200"
  },
  {
    "text": "works so first all you need to do to get",
    "start": "10200",
    "end": "12440"
  },
  {
    "text": "started is just pip install Lang chain",
    "start": "12440",
    "end": "14440"
  },
  {
    "text": "anthropic um and I want to talk through",
    "start": "14440",
    "end": "17480"
  },
  {
    "text": "how this is really useful for structured",
    "start": "17480",
    "end": "19480"
  },
  {
    "text": "outputs so let's just kind of talk",
    "start": "19480",
    "end": "21720"
  },
  {
    "text": "through it how can we use tools to",
    "start": "21720",
    "end": "23240"
  },
  {
    "text": "produce structured output I kind of",
    "start": "23240",
    "end": "25599"
  },
  {
    "text": "think about tool use uh or function",
    "start": "25599",
    "end": "27640"
  },
  {
    "text": "calling as interchangeable terms and the",
    "start": "27640",
    "end": "30240"
  },
  {
    "text": "point is it basically invokes the LM to",
    "start": "30240",
    "end": "32398"
  },
  {
    "text": "produce a payload and this payload is",
    "start": "32399",
    "end": "34360"
  },
  {
    "text": "usually a Json string it can be passed",
    "start": "34360",
    "end": "36160"
  },
  {
    "text": "to an API like web search for example it",
    "start": "36160",
    "end": "39120"
  },
  {
    "text": "could also be passed to a parser to",
    "start": "39120",
    "end": "40640"
  },
  {
    "text": "produce a structured output like we're",
    "start": "40640",
    "end": "42079"
  },
  {
    "text": "going to show here so Lang chain has",
    "start": "42079",
    "end": "44760"
  },
  {
    "text": "this with structured outputs method",
    "start": "44760",
    "end": "46640"
  },
  {
    "text": "which basically binds um uh tool use for",
    "start": "46640",
    "end": "50199"
  },
  {
    "text": "structured output generation to an llm",
    "start": "50199",
    "end": "53879"
  },
  {
    "text": "um you pass in a schema and you get your",
    "start": "53879",
    "end": "57039"
  },
  {
    "text": "your object out so let's actually walk",
    "start": "57039",
    "end": "58640"
  },
  {
    "text": "through what happens under the hood",
    "start": "58640",
    "end": "60640"
  },
  {
    "text": "um you have a schema let's say we're",
    "start": "60640",
    "end": "62600"
  },
  {
    "text": "doing code generation we want the output",
    "start": "62600",
    "end": "65280"
  },
  {
    "text": "to have three things a prefix a code",
    "start": "65280",
    "end": "67960"
  },
  {
    "text": "solution and imports okay we can Define",
    "start": "67960",
    "end": "70320"
  },
  {
    "text": "that as a pantic object with those with",
    "start": "70320",
    "end": "72400"
  },
  {
    "text": "that particular schema we pass a",
    "start": "72400",
    "end": "75080"
  },
  {
    "text": "question this object is converted into",
    "start": "75080",
    "end": "78680"
  },
  {
    "text": "an internal function scheme which is",
    "start": "78680",
    "end": "80040"
  },
  {
    "text": "basically like a Json which is then",
    "start": "80040",
    "end": "81960"
  },
  {
    "text": "Plumb to the llm so the LM knows about",
    "start": "81960",
    "end": "84799"
  },
  {
    "text": "this function or this tool that it can",
    "start": "84799",
    "end": "86360"
  },
  {
    "text": "invoke so it gets the question it",
    "start": "86360",
    "end": "89000"
  },
  {
    "text": "ideally invokes the tool that returns a",
    "start": "89000",
    "end": "91159"
  },
  {
    "text": "Json string we also using this method",
    "start": "91159",
    "end": "94680"
  },
  {
    "text": "take that object you define for your",
    "start": "94680",
    "end": "96560"
  },
  {
    "text": "output schema and we create a parer from",
    "start": "96560",
    "end": "99119"
  },
  {
    "text": "it we parse that string to the output",
    "start": "99119",
    "end": "101560"
  },
  {
    "text": "that's the flow so let's just show how",
    "start": "101560",
    "end": "103360"
  },
  {
    "text": "this works a couple easy Imports here's",
    "start": "103360",
    "end": "106040"
  },
  {
    "text": "our data model right we talk about that",
    "start": "106040",
    "end": "107920"
  },
  {
    "text": "code uh schema we want prefix Imports",
    "start": "107920",
    "end": "110640"
  },
  {
    "text": "code all strings we kind of describe",
    "start": "110640",
    "end": "113119"
  },
  {
    "text": "what it actually is now here's our llm",
    "start": "113119",
    "end": "116320"
  },
  {
    "text": "we're going to use CLA three Opus and",
    "start": "116320",
    "end": "118479"
  },
  {
    "text": "this little header just indicates that",
    "start": "118479",
    "end": "120640"
  },
  {
    "text": "we want to enable tool use um so again",
    "start": "120640",
    "end": "124360"
  },
  {
    "text": "we call the llm with structured outputs",
    "start": "124360",
    "end": "127039"
  },
  {
    "text": "um and we're include or we Plum through",
    "start": "127039",
    "end": "129800"
  },
  {
    "text": "the schema we defined right here as code",
    "start": "129800",
    "end": "132120"
  },
  {
    "text": "I'm also including this include raw flag",
    "start": "132120",
    "end": "135040"
  },
  {
    "text": "which will basically you'll see returns",
    "start": "135040",
    "end": "136920"
  },
  {
    "text": "both like the raw model output so you",
    "start": "136920",
    "end": "139319"
  },
  {
    "text": "can kind of think of it as this thing it",
    "start": "139319",
    "end": "141080"
  },
  {
    "text": "returns that and it Returns the par",
    "start": "141080",
    "end": "143040"
  },
  {
    "text": "output and it returns it returns any",
    "start": "143040",
    "end": "144800"
  },
  {
    "text": "parsing errors that's very useful trick",
    "start": "144800",
    "end": "147000"
  },
  {
    "text": "so let's kick this off this runs now may",
    "start": "147000",
    "end": "149680"
  },
  {
    "text": "take a little bit we're using CLA claw 3",
    "start": "149680",
    "end": "152040"
  },
  {
    "text": "Opus so it's like the most performant",
    "start": "152040",
    "end": "154239"
  },
  {
    "text": "model and we're just asking a simple",
    "start": "154239",
    "end": "156480"
  },
  {
    "text": "question write a Python program that",
    "start": "156480",
    "end": "158680"
  },
  {
    "text": "prints a string um uh hello world and",
    "start": "158680",
    "end": "162319"
  },
  {
    "text": "tells me how it works in one sentence so",
    "start": "162319",
    "end": "164720"
  },
  {
    "text": "in this case I can see kind of the raw",
    "start": "164720",
    "end": "166360"
  },
  {
    "text": "output you'll see something interesting",
    "start": "166360",
    "end": "169440"
  },
  {
    "text": "initially anthropic does this thinking",
    "start": "169440",
    "end": "171480"
  },
  {
    "text": "step um which it kind of reasons about",
    "start": "171480",
    "end": "173720"
  },
  {
    "text": "the question then anthropic you can see",
    "start": "173720",
    "end": "176800"
  },
  {
    "text": "here this is actually the tool call and",
    "start": "176800",
    "end": "179000"
  },
  {
    "text": "so if you look at this here's that Json",
    "start": "179000",
    "end": "181720"
  },
  {
    "text": "string prefix code Imports like we had",
    "start": "181720",
    "end": "183760"
  },
  {
    "text": "talked about above so that's pretty neat",
    "start": "183760",
    "end": "185599"
  },
  {
    "text": "you can actually look at this raw",
    "start": "185599",
    "end": "186720"
  },
  {
    "text": "intermediate object which is this thing",
    "start": "186720",
    "end": "189159"
  },
  {
    "text": "and see that intermediate Json string",
    "start": "189159",
    "end": "191200"
  },
  {
    "text": "that the model is returning then we go",
    "start": "191200",
    "end": "194400"
  },
  {
    "text": "ahead and see hey were there any parsing",
    "start": "194400",
    "end": "195879"
  },
  {
    "text": "errors we see no we can then fetch out",
    "start": "195879",
    "end": "198200"
  },
  {
    "text": "that Parts result and then there it is",
    "start": "198200",
    "end": "200599"
  },
  {
    "text": "so this is pretty cool there's our parse",
    "start": "200599",
    "end": "202040"
  },
  {
    "text": "result now this is the pantic object we",
    "start": "202040",
    "end": "203680"
  },
  {
    "text": "want out that's really it let's showing",
    "start": "203680",
    "end": "206280"
  },
  {
    "text": "everything working end to end which is",
    "start": "206280",
    "end": "207599"
  },
  {
    "text": "really cool and you can see we kind of",
    "start": "207599",
    "end": "209080"
  },
  {
    "text": "did that all in like minutes let's look",
    "start": "209080",
    "end": "211319"
  },
  {
    "text": "at more challenging examples this is",
    "start": "211319",
    "end": "212760"
  },
  {
    "text": "something I've actually been working on",
    "start": "212760",
    "end": "213879"
  },
  {
    "text": "quite a bit is code",
    "start": "213879",
    "end": "215159"
  },
  {
    "text": "generation I have a bunch of different",
    "start": "215159",
    "end": "217200"
  },
  {
    "text": "Lang graph code generation flows that",
    "start": "217200",
    "end": "219519"
  },
  {
    "text": "typically involve some kind of inline or",
    "start": "219519",
    "end": "221640"
  },
  {
    "text": "or in the loop unit unit tests so what I",
    "start": "221640",
    "end": "225159"
  },
  {
    "text": "want to do is I have a code generation",
    "start": "225159",
    "end": "226840"
  },
  {
    "text": "step that'll answer questions about some",
    "start": "226840",
    "end": "228760"
  },
  {
    "text": "set of documentation like by context",
    "start": "228760",
    "end": "230879"
  },
  {
    "text": "stuff typically could be L chain docs or",
    "start": "230879",
    "end": "232840"
  },
  {
    "text": "other docs but what's interesting is I",
    "start": "232840",
    "end": "235120"
  },
  {
    "text": "want the output to be this pantic object",
    "start": "235120",
    "end": "237439"
  },
  {
    "text": "of like a prefix Imports and code just",
    "start": "237439",
    "end": "239319"
  },
  {
    "text": "like we saw above and then I can apply",
    "start": "239319",
    "end": "241360"
  },
  {
    "text": "unit test so this is like a real world",
    "start": "241360",
    "end": "242920"
  },
  {
    "text": "motivation why I care about this and why",
    "start": "242920",
    "end": "244519"
  },
  {
    "text": "I've been using it quite a bit um so I'm",
    "start": "244519",
    "end": "247400"
  },
  {
    "text": "going to load those docs right",
    "start": "247400",
    "end": "249239"
  },
  {
    "text": "here and um so this is just loading for",
    "start": "249239",
    "end": "252120"
  },
  {
    "text": "example some documentation from Lang",
    "start": "252120",
    "end": "253640"
  },
  {
    "text": "Cham and I'm going to show you something",
    "start": "253640",
    "end": "255640"
  },
  {
    "text": "pretty cool here let me just kick this",
    "start": "255640",
    "end": "257239"
  },
  {
    "text": "off and then I will uh go back and",
    "start": "257239",
    "end": "259519"
  },
  {
    "text": "explain to you what's going on so here's",
    "start": "259519",
    "end": "262320"
  },
  {
    "text": "a problem statement that's really",
    "start": "262320",
    "end": "264280"
  },
  {
    "text": "common you see how above here we are",
    "start": "264280",
    "end": "268199"
  },
  {
    "text": "counting on the llm to invoke this tool",
    "start": "268199",
    "end": "271520"
  },
  {
    "text": "but that's not always",
    "start": "271520",
    "end": "273080"
  },
  {
    "text": "guaranteed so we can do is note that in",
    "start": "273080",
    "end": "276720"
  },
  {
    "text": "this uh output we get we get um this",
    "start": "276720",
    "end": "281600"
  },
  {
    "text": "error so parsing error so if there's",
    "start": "281600",
    "end": "284360"
  },
  {
    "text": "some problem with a tool invocation and",
    "start": "284360",
    "end": "287120"
  },
  {
    "text": "this intermediate object that our parser",
    "start": "287120",
    "end": "288960"
  },
  {
    "text": "attempts to parse is not parsable like",
    "start": "288960",
    "end": "291960"
  },
  {
    "text": "for example what if it didn't call the",
    "start": "291960",
    "end": "293440"
  },
  {
    "text": "tool so then it doesn't return to Json",
    "start": "293440",
    "end": "295800"
  },
  {
    "text": "string it just returns like a blob of",
    "start": "295800",
    "end": "297520"
  },
  {
    "text": "text it can't be parsed you'll see an",
    "start": "297520",
    "end": "299720"
  },
  {
    "text": "error we want the ability to kind of",
    "start": "299720",
    "end": "301960"
  },
  {
    "text": "catch that and retry so let's just show",
    "start": "301960",
    "end": "305280"
  },
  {
    "text": "how to do that it's kind of a really",
    "start": "305280",
    "end": "306919"
  },
  {
    "text": "nice little trick here um and we'll do",
    "start": "306919",
    "end": "309360"
  },
  {
    "text": "it in a more challenging case so this is",
    "start": "309360",
    "end": "311320"
  },
  {
    "text": "actually I'm loading a bunch of Lang",
    "start": "311320",
    "end": "312560"
  },
  {
    "text": "chain expression language",
    "start": "312560",
    "end": "314360"
  },
  {
    "text": "docs I have a code generation prompt",
    "start": "314360",
    "end": "316800"
  },
  {
    "text": "that basically loads all those docs um",
    "start": "316800",
    "end": "319479"
  },
  {
    "text": "into the context",
    "start": "319479",
    "end": "320720"
  },
  {
    "text": "window and includes some stuff like your",
    "start": "320720",
    "end": "322919"
  },
  {
    "text": "code assistant with expertise and Lang",
    "start": "322919",
    "end": "324919"
  },
  {
    "text": "expression language um you know here's a",
    "start": "324919",
    "end": "327960"
  },
  {
    "text": "bunch of documentation answer questions",
    "start": "327960",
    "end": "330240"
  },
  {
    "text": "right so this stuff is same as before",
    "start": "330240",
    "end": "332280"
  },
  {
    "text": "toine my output schema in this case I",
    "start": "332280",
    "end": "334520"
  },
  {
    "text": "def I add a description this is the",
    "start": "334520",
    "end": "336680"
  },
  {
    "text": "schema for code Solutions related to L",
    "start": "336680",
    "end": "338600"
  },
  {
    "text": "transpression language which tells LM a",
    "start": "338600",
    "end": "341039"
  },
  {
    "text": "little bit more about the tool U same as",
    "start": "341039",
    "end": "344759"
  },
  {
    "text": "before same as before now here's where I",
    "start": "344759",
    "end": "347960"
  },
  {
    "text": "can do something pretty cool remember",
    "start": "347960",
    "end": "349960"
  },
  {
    "text": "that the model output has um is",
    "start": "349960",
    "end": "353199"
  },
  {
    "text": "basically a dict and it has that parsing",
    "start": "353199",
    "end": "355240"
  },
  {
    "text": "error field so what I'm going to add is",
    "start": "355240",
    "end": "356680"
  },
  {
    "text": "a little function here so if the output",
    "start": "356680",
    "end": "360080"
  },
  {
    "text": "has a parsing error I can fish out uh",
    "start": "360080",
    "end": "363120"
  },
  {
    "text": "both the raw output and the error raise",
    "start": "363120",
    "end": "365520"
  },
  {
    "text": "a value error um and then I can just",
    "start": "365520",
    "end": "367919"
  },
  {
    "text": "like return the tool output so here's a",
    "start": "367919",
    "end": "370520"
  },
  {
    "text": "trick I now build a chain which has our",
    "start": "370520",
    "end": "372440"
  },
  {
    "text": "prompt our structured llm and this",
    "start": "372440",
    "end": "375440"
  },
  {
    "text": "little check that's the new thing now",
    "start": "375440",
    "end": "377800"
  },
  {
    "text": "what I can do Lang chain has this really",
    "start": "377800",
    "end": "379599"
  },
  {
    "text": "convenient thing called with fallbacks",
    "start": "379599",
    "end": "381880"
  },
  {
    "text": "so basically I can define a fallback",
    "start": "381880",
    "end": "384440"
  },
  {
    "text": "chain which is basically just um this uh",
    "start": "384440",
    "end": "389240"
  },
  {
    "text": "so basically this check occurs if this",
    "start": "389240",
    "end": "392720"
  },
  {
    "text": "check throws an error I can go to this",
    "start": "392720",
    "end": "395199"
  },
  {
    "text": "fallback chain which sucks in the error",
    "start": "395199",
    "end": "398160"
  },
  {
    "text": "and basically automatically",
    "start": "398160",
    "end": "400520"
  },
  {
    "text": "retries um and so I can Implement that",
    "start": "400520",
    "end": "403560"
  },
  {
    "text": "all here where this is my code chain so",
    "start": "403560",
    "end": "405800"
  },
  {
    "text": "we Define that up here um that code",
    "start": "405800",
    "end": "408919"
  },
  {
    "text": "chain has this check at the end and I",
    "start": "408919",
    "end": "411080"
  },
  {
    "text": "have this fallback chain if that check",
    "start": "411080",
    "end": "413080"
  },
  {
    "text": "trips I go to the fallback and I",
    "start": "413080",
    "end": "416080"
  },
  {
    "text": "basically I basically add messages to",
    "start": "416080",
    "end": "418560"
  },
  {
    "text": "the LM saying hey",
    "start": "418560",
    "end": "420400"
  },
  {
    "text": "um you're required to fix the parsing",
    "start": "420400",
    "end": "421879"
  },
  {
    "text": "errors here's the error that you got",
    "start": "421879",
    "end": "424039"
  },
  {
    "text": "back try again so it orchestrates that",
    "start": "424039",
    "end": "426479"
  },
  {
    "text": "feedback so I can call code chain with",
    "start": "426479",
    "end": "429000"
  },
  {
    "text": "fallbacks I add the fallback chain here",
    "start": "429000",
    "end": "431680"
  },
  {
    "text": "we just ran that um and let's see what",
    "start": "431680",
    "end": "434919"
  },
  {
    "text": "our output looks like so we can actually",
    "start": "434919",
    "end": "437000"
  },
  {
    "text": "see um here's how to write uh a rag",
    "start": "437000",
    "end": "441240"
  },
  {
    "text": "chain using L trans expression language",
    "start": "441240",
    "end": "443800"
  },
  {
    "text": "um here's the Imports here's the code um",
    "start": "443800",
    "end": "447039"
  },
  {
    "text": "hopefully the code executes um okay and",
    "start": "447039",
    "end": "450120"
  },
  {
    "text": "so there's a pip install that I need to",
    "start": "450120",
    "end": "451800"
  },
  {
    "text": "do that that is something that I would",
    "start": "451800",
    "end": "453440"
  },
  {
    "text": "actually catch more in unit tests um but",
    "start": "453440",
    "end": "456080"
  },
  {
    "text": "in any case you can kind of see that at",
    "start": "456080",
    "end": "458520"
  },
  {
    "text": "least the pantic object was correctly",
    "start": "458520",
    "end": "460560"
  },
  {
    "text": "formatted and returned um so that's",
    "start": "460560",
    "end": "462840"
  },
  {
    "text": "really nice trick if you want to enforce",
    "start": "462840",
    "end": "464800"
  },
  {
    "text": "the output schema um you can use this",
    "start": "464800",
    "end": "466840"
  },
  {
    "text": "kind of fallback to catch errors in",
    "start": "466840",
    "end": "468759"
  },
  {
    "text": "pantic validation or or and um or pantic",
    "start": "468759",
    "end": "471599"
  },
  {
    "text": "parsing and to retry nice little trick",
    "start": "471599",
    "end": "474639"
  },
  {
    "text": "there and again the arrow we saw down",
    "start": "474639",
    "end": "476440"
  },
  {
    "text": "here is a really good example of what I",
    "start": "476440",
    "end": "478759"
  },
  {
    "text": "see often when I'm doing kind of code",
    "start": "478759",
    "end": "480520"
  },
  {
    "text": "execution in the wild that's something I",
    "start": "480520",
    "end": "483520"
  },
  {
    "text": "would catch in my unit tests so I would",
    "start": "483520",
    "end": "485599"
  },
  {
    "text": "attempt to execute the Imports if those",
    "start": "485599",
    "end": "488680"
  },
  {
    "text": "fail I can retry the entire process or I",
    "start": "488680",
    "end": "491960"
  },
  {
    "text": "can check um the code execution like we",
    "start": "491960",
    "end": "494199"
  },
  {
    "text": "just did and retry there in this case",
    "start": "494199",
    "end": "496639"
  },
  {
    "text": "that retry Loop would include hey your",
    "start": "496639",
    "end": "498759"
  },
  {
    "text": "code's missing something you don't have",
    "start": "498759",
    "end": "500199"
  },
  {
    "text": "this package pip install you know this",
    "start": "500199",
    "end": "502199"
  },
  {
    "text": "guy and then my code execution would",
    "start": "502199",
    "end": "505240"
  },
  {
    "text": "include that as an additional thing that",
    "start": "505240",
    "end": "507440"
  },
  {
    "text": "is necessary um so so you know for",
    "start": "507440",
    "end": "510159"
  },
  {
    "text": "example I was running if I was running",
    "start": "510159",
    "end": "511319"
  },
  {
    "text": "this in a sandbox environment I could",
    "start": "511319",
    "end": "513120"
  },
  {
    "text": "then run that pip install and it would",
    "start": "513120",
    "end": "514839"
  },
  {
    "text": "it would update my environment and then",
    "start": "514839",
    "end": "516360"
  },
  {
    "text": "it would run so you know nice example",
    "start": "516360",
    "end": "519240"
  },
  {
    "text": "showing how to use anthropic with",
    "start": "519240",
    "end": "520479"
  },
  {
    "text": "structured outputs like the vanilla case",
    "start": "520479",
    "end": "522599"
  },
  {
    "text": "simple case up here and how to do it",
    "start": "522599",
    "end": "524560"
  },
  {
    "text": "with this kind of retry fallback if",
    "start": "524560",
    "end": "526200"
  },
  {
    "text": "there are validation errors um you can",
    "start": "526200",
    "end": "530080"
  },
  {
    "text": "use what we talked about here this with",
    "start": "530080",
    "end": "532240"
  },
  {
    "text": "fallbacks to basically catch any",
    "start": "532240",
    "end": "534560"
  },
  {
    "text": "validation errors from Tool use and to",
    "start": "534560",
    "end": "536640"
  },
  {
    "text": "loop back and to enforce that the tool",
    "start": "536640",
    "end": "538279"
  },
  {
    "text": "is actually invoked um so that's about",
    "start": "538279",
    "end": "540480"
  },
  {
    "text": "it hopefully this is useful",
    "start": "540480",
    "end": "542800"
  },
  {
    "text": "thanks",
    "start": "542800",
    "end": "545800"
  }
]