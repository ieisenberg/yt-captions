[
  {
    "start": "0",
    "end": "290000"
  },
  {
    "text": "hi this is Bor from linkchain and today",
    "start": "480",
    "end": "3040"
  },
  {
    "text": "I want to show you how we can build a",
    "start": "3040",
    "end": "5520"
  },
  {
    "text": "data analyzing agent using Lang graph",
    "start": "5520",
    "end": "8120"
  },
  {
    "text": "and Azure container apps Dynamic",
    "start": "8120",
    "end": "10320"
  },
  {
    "text": "sessions um so the agent will build will",
    "start": "10320",
    "end": "13839"
  },
  {
    "text": "be able to query a SQL database and then",
    "start": "13839",
    "end": "16960"
  },
  {
    "text": "write and run python code to analyze the",
    "start": "16960",
    "end": "19279"
  },
  {
    "text": "retrieved data it'll be built on top of",
    "start": "19279",
    "end": "22039"
  },
  {
    "text": "Lang graph and make use of the new Azure",
    "start": "22039",
    "end": "24320"
  },
  {
    "text": "container apps Dynamic sessions Dynamic",
    "start": "24320",
    "end": "27240"
  },
  {
    "text": "sessions is really the key feature we",
    "start": "27240",
    "end": "29599"
  },
  {
    "text": "want to show off um LMS are great at a",
    "start": "29599",
    "end": "32840"
  },
  {
    "text": "lot of things but Rock computation isn't",
    "start": "32840",
    "end": "35640"
  },
  {
    "text": "one of them um fortunately LS are great",
    "start": "35640",
    "end": "39040"
  },
  {
    "text": "at writing programmatic logic that if",
    "start": "39040",
    "end": "42559"
  },
  {
    "text": "executed could perform the raw",
    "start": "42559",
    "end": "44239"
  },
  {
    "text": "computations for the L um so if we had",
    "start": "44239",
    "end": "47199"
  },
  {
    "text": "the ability to hook up our LMS to fast",
    "start": "47199",
    "end": "50199"
  },
  {
    "text": "and safe code interpreters then we could",
    "start": "50199",
    "end": "53120"
  },
  {
    "text": "unlock a lot of use cases um fortunately",
    "start": "53120",
    "end": "57320"
  },
  {
    "text": "this is exactly what the Azure container",
    "start": "57320",
    "end": "59640"
  },
  {
    "text": "apps Dynamic sessions integration allows",
    "start": "59640",
    "end": "62239"
  },
  {
    "text": "us to do it is a reliable and safe code",
    "start": "62239",
    "end": "68799"
  },
  {
    "text": "interpreter service provided by Azure",
    "start": "68799",
    "end": "71439"
  },
  {
    "text": "container apps um now in preview and it",
    "start": "71439",
    "end": "75280"
  },
  {
    "text": "has a nice Lang chain integration that",
    "start": "75280",
    "end": "78000"
  },
  {
    "text": "makes it really easy to use with any",
    "start": "78000",
    "end": "79960"
  },
  {
    "text": "Lang chain and R Lang graph agents that",
    "start": "79960",
    "end": "82200"
  },
  {
    "text": "you",
    "start": "82200",
    "end": "83400"
  },
  {
    "text": "build um and as a sneak preview of where",
    "start": "83400",
    "end": "86640"
  },
  {
    "text": "we're going to get um in my case case",
    "start": "86640",
    "end": "90320"
  },
  {
    "text": "I'm going to hook up my agent to a",
    "start": "90320",
    "end": "93320"
  },
  {
    "text": "database of lsmith traces um if you're",
    "start": "93320",
    "end": "97040"
  },
  {
    "text": "not familiar lsmith is our observability",
    "start": "97040",
    "end": "99360"
  },
  {
    "text": "and evaluation framework and one of the",
    "start": "99360",
    "end": "101799"
  },
  {
    "text": "key things it does is Trace uh llm",
    "start": "101799",
    "end": "106079"
  },
  {
    "text": "applications including things like the",
    "start": "106079",
    "end": "109000"
  },
  {
    "text": "latency and token counts and inputs and",
    "start": "109000",
    "end": "111880"
  },
  {
    "text": "outputs of different llm calls and so",
    "start": "111880",
    "end": "115560"
  },
  {
    "text": "once I've hooked up my agent to a",
    "start": "115560",
    "end": "118280"
  },
  {
    "text": "database of Lang Smith traces then I can",
    "start": "118280",
    "end": "121719"
  },
  {
    "text": "start to ask it questions like or make",
    "start": "121719",
    "end": "124479"
  },
  {
    "text": "requests of it like graph the average",
    "start": "124479",
    "end": "126439"
  },
  {
    "text": "latency by model and it's able to",
    "start": "126439",
    "end": "128959"
  },
  {
    "text": "generate these nice plots for me showing",
    "start": "128959",
    "end": "131879"
  },
  {
    "text": "the different latencies for different",
    "start": "131879",
    "end": "134519"
  },
  {
    "text": "models across the traces within my",
    "start": "134519",
    "end": "139000"
  },
  {
    "text": "application um and the agent archit",
    "start": "139000",
    "end": "144000"
  },
  {
    "text": "architecture we're going to use for this",
    "start": "144000",
    "end": "145599"
  },
  {
    "text": "is actually pretty simple um we will use",
    "start": "145599",
    "end": "148760"
  },
  {
    "text": "a tool calling mod model to be able to",
    "start": "148760",
    "end": "151319"
  },
  {
    "text": "invoke two different tools one for",
    "start": "151319",
    "end": "154640"
  },
  {
    "text": "writing and executing SQL queries",
    "start": "154640",
    "end": "157080"
  },
  {
    "text": "against our SQL database and the other",
    "start": "157080",
    "end": "159280"
  },
  {
    "text": "for writing and executing python that is",
    "start": "159280",
    "end": "162519"
  },
  {
    "text": "given access to our retrieve data um and",
    "start": "162519",
    "end": "166440"
  },
  {
    "text": "then can perform computations on",
    "start": "166440",
    "end": "170400"
  },
  {
    "text": "it so let's see how we can actually put",
    "start": "170400",
    "end": "173080"
  },
  {
    "text": "all this",
    "start": "173080",
    "end": "174239"
  },
  {
    "text": "together first we'll need to install all",
    "start": "174239",
    "end": "177800"
  },
  {
    "text": "the relevant dependencies um chiefly",
    "start": "177800",
    "end": "180480"
  },
  {
    "text": "Wang graph and the new Wang chain Azure",
    "start": "180480",
    "end": "183040"
  },
  {
    "text": "Dynamic sessions",
    "start": "183040",
    "end": "184640"
  },
  {
    "text": "integration then we'll need to set up",
    "start": "184640",
    "end": "186720"
  },
  {
    "text": "some credentials um in this case we'll",
    "start": "186720",
    "end": "189440"
  },
  {
    "text": "use Azure openi for our model we'll use",
    "start": "189440",
    "end": "192400"
  },
  {
    "text": "Azure postgress for our DB and of course",
    "start": "192400",
    "end": "195959"
  },
  {
    "text": "Azure contain WS Dynamic sessions for",
    "start": "195959",
    "end": "198640"
  },
  {
    "text": "code execution the links in the notebook",
    "start": "198640",
    "end": "201720"
  },
  {
    "text": "should show you how to set up all of",
    "start": "201720",
    "end": "203120"
  },
  {
    "text": "those and the L graph architecture we're",
    "start": "203120",
    "end": "206200"
  },
  {
    "text": "going to show here should actually",
    "start": "206200",
    "end": "207560"
  },
  {
    "text": "generalize to any llm has tool calling",
    "start": "207560",
    "end": "210879"
  },
  {
    "text": "abilities and to any SQL",
    "start": "210879",
    "end": "213760"
  },
  {
    "text": "database now we",
    "start": "213760",
    "end": "216799"
  },
  {
    "text": "can set up all of our credentials for",
    "start": "216799",
    "end": "221040"
  },
  {
    "text": "these various services so first we'll",
    "start": "221040",
    "end": "224000"
  },
  {
    "text": "set up azra",
    "start": "224000",
    "end": "226760"
  },
  {
    "text": "openi and then our Dynamic",
    "start": "231560",
    "end": "236400"
  },
  {
    "text": "sessions and lastly our SQL",
    "start": "236879",
    "end": "242720"
  },
  {
    "text": "database um one important thing to",
    "start": "243120",
    "end": "246760"
  },
  {
    "text": "remember whenever you are hooking up a",
    "start": "246760",
    "end": "250599"
  },
  {
    "text": "model to a SQL database is that there's",
    "start": "250599",
    "end": "253560"
  },
  {
    "text": "inherent risks in um executing model",
    "start": "253560",
    "end": "256440"
  },
  {
    "text": "generated SQL and it's really important",
    "start": "256440",
    "end": "259639"
  },
  {
    "text": "that you Scope your connection",
    "start": "259639",
    "end": "261919"
  },
  {
    "text": "permissions as narrowly as possible",
    "start": "261919",
    "end": "264479"
  },
  {
    "text": "given your application um so in this",
    "start": "264479",
    "end": "267040"
  },
  {
    "text": "case we only need our agent to be able",
    "start": "267040",
    "end": "269240"
  },
  {
    "text": "to read from our SQL databases so we",
    "start": "269240",
    "end": "271479"
  },
  {
    "text": "should scope the connection permissions",
    "start": "271479",
    "end": "274520"
  },
  {
    "text": "accordingly once we've set up our",
    "start": "274520",
    "end": "276520"
  },
  {
    "text": "credentials we can import all the rant",
    "start": "276520",
    "end": "280400"
  },
  {
    "text": "classes and methods and actually",
    "start": "280400",
    "end": "282400"
  },
  {
    "text": "instantiate our SQL database our Azure",
    "start": "282400",
    "end": "285919"
  },
  {
    "text": "opening ey model and our sessions code",
    "start": "285919",
    "end": "288800"
  },
  {
    "text": "interpreting",
    "start": "288800",
    "end": "290759"
  },
  {
    "start": "290000",
    "end": "517000"
  },
  {
    "text": "tool um now we can actually Define our",
    "start": "290759",
    "end": "294680"
  },
  {
    "text": "lane graph agent so the core elements of",
    "start": "294680",
    "end": "297720"
  },
  {
    "text": "any agent are the State nodes and edges",
    "start": "297720",
    "end": "302400"
  },
  {
    "text": "so nodes are where the agent actually um",
    "start": "302400",
    "end": "305280"
  },
  {
    "text": "performs various",
    "start": "305280",
    "end": "306720"
  },
  {
    "text": "functionality state is what is passed",
    "start": "306720",
    "end": "309360"
  },
  {
    "text": "through all the nodes so the input to",
    "start": "309360",
    "end": "312199"
  },
  {
    "text": "every node is the current agent State",
    "start": "312199",
    "end": "315440"
  },
  {
    "text": "and the output of every node should be",
    "start": "315440",
    "end": "317520"
  },
  {
    "text": "an update to that state and then edges",
    "start": "317520",
    "end": "320400"
  },
  {
    "text": "defines the flow of our agent from one",
    "start": "320400",
    "end": "322840"
  },
  {
    "text": "node to the next um in our case our",
    "start": "322840",
    "end": "326039"
  },
  {
    "text": "agent state will be simple it'll just be",
    "start": "326039",
    "end": "328560"
  },
  {
    "text": "a sequence of messages um and the only",
    "start": "328560",
    "end": "333639"
  },
  {
    "text": "custom message we'll need to add is",
    "start": "333639",
    "end": "335840"
  },
  {
    "text": "something we'll call Raw tool message",
    "start": "335840",
    "end": "338520"
  },
  {
    "text": "our tools will be creating um outputs",
    "start": "338520",
    "end": "343039"
  },
  {
    "text": "like data frames and in the case of our",
    "start": "343039",
    "end": "345759"
  },
  {
    "text": "code interpreter sometimes images um and",
    "start": "345759",
    "end": "348360"
  },
  {
    "text": "we want these things to be part of our",
    "start": "348360",
    "end": "349880"
  },
  {
    "text": "agent state so that they can be accessed",
    "start": "349880",
    "end": "352479"
  },
  {
    "text": "by Future nodes but we don't want these",
    "start": "352479",
    "end": "355160"
  },
  {
    "text": "to be part of any message contents",
    "start": "355160",
    "end": "357639"
  },
  {
    "text": "because we don't want data frames and",
    "start": "357639",
    "end": "358919"
  },
  {
    "text": "images to be sent back to our model in",
    "start": "358919",
    "end": "361120"
  },
  {
    "text": "Future model invocations um so we'll",
    "start": "361120",
    "end": "363840"
  },
  {
    "text": "simply add a new attribute to our tool",
    "start": "363840",
    "end": "366199"
  },
  {
    "text": "message we'll call it raw for raw tool",
    "start": "366199",
    "end": "368560"
  },
  {
    "text": "outputs um and this will allow us to add",
    "start": "368560",
    "end": "372240"
  },
  {
    "text": "uh arbitrary additional tool outputs to",
    "start": "372240",
    "end": "374319"
  },
  {
    "text": "our tool messages so that future nodes",
    "start": "374319",
    "end": "377039"
  },
  {
    "text": "can access the tool outputs the full",
    "start": "377039",
    "end": "379440"
  },
  {
    "text": "tool outputs of past node",
    "start": "379440",
    "end": "382599"
  },
  {
    "text": "executions so now we can Define the",
    "start": "382599",
    "end": "385880"
  },
  {
    "text": "actual nodes of our L graph agent um as",
    "start": "385880",
    "end": "390240"
  },
  {
    "text": "a reminder we will have three main nodes",
    "start": "390240",
    "end": "394199"
  },
  {
    "text": "one will be for actually calling our",
    "start": "394199",
    "end": "395840"
  },
  {
    "text": "model and then two for executing the",
    "start": "395840",
    "end": "399440"
  },
  {
    "text": "tools that our model might invoke one",
    "start": "399440",
    "end": "401840"
  },
  {
    "text": "for the SQL tool one for the python",
    "start": "401840",
    "end": "405240"
  },
  {
    "text": "tool so in the case of the model node um",
    "start": "405240",
    "end": "410800"
  },
  {
    "text": "again we'll be using tool calling apis",
    "start": "410800",
    "end": "413280"
  },
  {
    "text": "to make sure that our model is correctly",
    "start": "413280",
    "end": "415599"
  },
  {
    "text": "invoking the tools that we wanted to",
    "start": "415599",
    "end": "418160"
  },
  {
    "text": "have access to um and Tool or function",
    "start": "418160",
    "end": "422280"
  },
  {
    "text": "calling uh in case you're not familiar",
    "start": "422280",
    "end": "424919"
  },
  {
    "text": "is a specific type of chat model API",
    "start": "424919",
    "end": "428520"
  },
  {
    "text": "that allows you to pass in tool schemas",
    "start": "428520",
    "end": "431960"
  },
  {
    "text": "when you're calling your model and have",
    "start": "431960",
    "end": "433720"
  },
  {
    "text": "it generate um inputs to whatever tools",
    "start": "433720",
    "end": "437919"
  },
  {
    "text": "you've passed schemas in for um",
    "start": "437919",
    "end": "441000"
  },
  {
    "text": "crucially the tool calling models don't",
    "start": "441000",
    "end": "443520"
  },
  {
    "text": "actually call the tools they just",
    "start": "443520",
    "end": "444879"
  },
  {
    "text": "generate inputs to the",
    "start": "444879",
    "end": "446840"
  },
  {
    "text": "tools it's up to the application to",
    "start": "446840",
    "end": "449240"
  },
  {
    "text": "actually then take those inputs and pass",
    "start": "449240",
    "end": "451440"
  },
  {
    "text": "them through to the tool um so in our",
    "start": "451440",
    "end": "454120"
  },
  {
    "text": "case we will have two um tool schemas",
    "start": "454120",
    "end": "457120"
  },
  {
    "text": "that will be passing to our model one",
    "start": "457120",
    "end": "459800"
  },
  {
    "text": "we'll call create DF from SQL and the",
    "start": "459800",
    "end": "462840"
  },
  {
    "text": "other we'll call python shell so the",
    "start": "462840",
    "end": "465240"
  },
  {
    "text": "create def from SQL will be for querying",
    "start": "465240",
    "end": "467759"
  },
  {
    "text": "our SQL database",
    "start": "467759",
    "end": "470039"
  },
  {
    "text": "and um generating pandas data frames",
    "start": "470039",
    "end": "473120"
  },
  {
    "text": "from that and so the key attribute of",
    "start": "473120",
    "end": "476120"
  },
  {
    "text": "this tool schema will be the select",
    "start": "476120",
    "end": "478000"
  },
  {
    "text": "query attribute which should just be a",
    "start": "478000",
    "end": "481800"
  },
  {
    "text": "SQL select statement that our model",
    "start": "481800",
    "end": "483840"
  },
  {
    "text": "generates to get relevant data from our",
    "start": "483840",
    "end": "486560"
  },
  {
    "text": "SQL",
    "start": "486560",
    "end": "487599"
  },
  {
    "text": "database and then the other two",
    "start": "487599",
    "end": "490080"
  },
  {
    "text": "attributes will be DF columns and DF",
    "start": "490080",
    "end": "492360"
  },
  {
    "text": "name so once we extract data from our",
    "start": "492360",
    "end": "495199"
  },
  {
    "text": "SQL database we'll convert it into Panda",
    "start": "495199",
    "end": "497919"
  },
  {
    "text": "data frames that have the corresponding",
    "start": "497919",
    "end": "501319"
  },
  {
    "text": "um variable name and the column names",
    "start": "501319",
    "end": "504639"
  },
  {
    "text": "that the model",
    "start": "504639",
    "end": "506440"
  },
  {
    "text": "generates and then our python shell tool",
    "start": "506440",
    "end": "509520"
  },
  {
    "text": "is really simple it just has one",
    "start": "509520",
    "end": "511120"
  },
  {
    "text": "attribute code which should be python",
    "start": "511120",
    "end": "512880"
  },
  {
    "text": "code that we want our code interpreter",
    "start": "512880",
    "end": "515240"
  },
  {
    "text": "to",
    "start": "515240",
    "end": "517320"
  },
  {
    "text": "execute the other part of our model",
    "start": "517320",
    "end": "520000"
  },
  {
    "text": "calling node is there will be a simple",
    "start": "520000",
    "end": "522560"
  },
  {
    "text": "prompt The Prompt will have a system",
    "start": "522560",
    "end": "525240"
  },
  {
    "text": "message and then we'll pass in um",
    "start": "525240",
    "end": "528640"
  },
  {
    "text": "whatever messages are in our state to",
    "start": "528640",
    "end": "530920"
  },
  {
    "text": "the model as well the system prompt will",
    "start": "530920",
    "end": "533920"
  },
  {
    "text": "have a little bit of positive",
    "start": "533920",
    "end": "535880"
  },
  {
    "text": "encouragement telling the model that",
    "start": "535880",
    "end": "537240"
  },
  {
    "text": "it's great at SQL and python and then",
    "start": "537240",
    "end": "539959"
  },
  {
    "text": "also this D db. table info um",
    "start": "539959",
    "end": "543800"
  },
  {
    "text": "information so if we look at what this",
    "start": "543800",
    "end": "548279"
  },
  {
    "text": "looks like in this",
    "start": "548279",
    "end": "552880"
  },
  {
    "text": "case um like I said the database I've",
    "start": "553320",
    "end": "557079"
  },
  {
    "text": "connected my agent to has um lsmith",
    "start": "557079",
    "end": "561000"
  },
  {
    "text": "traces in it and so if we look at db.",
    "start": "561000",
    "end": "563800"
  },
  {
    "text": "tableinfo it should tell us a bit about",
    "start": "563800",
    "end": "567160"
  },
  {
    "text": "the um table scheme that are in my",
    "start": "567160",
    "end": "570279"
  },
  {
    "text": "database and have some example rows from",
    "start": "570279",
    "end": "573320"
  },
  {
    "text": "my database and this is really important",
    "start": "573320",
    "end": "577079"
  },
  {
    "text": "because if we want our model to be",
    "start": "577079",
    "end": "579800"
  },
  {
    "text": "generating um sensical SQL queries then",
    "start": "579800",
    "end": "583079"
  },
  {
    "text": "it needs to understand what types of",
    "start": "583079",
    "end": "585279"
  },
  {
    "text": "tables are in the SQL database that it's",
    "start": "585279",
    "end": "587200"
  },
  {
    "text": "being given access to um so this",
    "start": "587200",
    "end": "589560"
  },
  {
    "text": "information should all be in my prompt",
    "start": "589560",
    "end": "592800"
  },
  {
    "text": "that is being sent in every model",
    "start": "592800",
    "end": "595519"
  },
  {
    "text": "call and then the rest of what's",
    "start": "595519",
    "end": "598120"
  },
  {
    "text": "happening in the actual node is we'll",
    "start": "598120",
    "end": "600800"
  },
  {
    "text": "chain together our prompt with our L",
    "start": "600800",
    "end": "603600"
  },
  {
    "text": "we'll make sure to bind our tool schemas",
    "start": "603600",
    "end": "605720"
  },
  {
    "text": "to our l so that it knows how to invoke",
    "start": "605720",
    "end": "609279"
  },
  {
    "text": "the different tools that it can um and",
    "start": "609279",
    "end": "612360"
  },
  {
    "text": "then we just pass through all of the",
    "start": "612360",
    "end": "614959"
  },
  {
    "text": "messages in the state when we invoke our",
    "start": "614959",
    "end": "617920"
  },
  {
    "text": "simple prompt llm chain and this",
    "start": "617920",
    "end": "622240"
  },
  {
    "text": "invocation will generate an AI message",
    "start": "622240",
    "end": "625480"
  },
  {
    "text": "and we simply um add that AI message to",
    "start": "625480",
    "end": "629640"
  },
  {
    "text": "our message state so after this note is",
    "start": "629640",
    "end": "632240"
  },
  {
    "text": "called our agent State should have one",
    "start": "632240",
    "end": "634320"
  },
  {
    "text": "extra message in it which is an AI",
    "start": "634320",
    "end": "636279"
  },
  {
    "text": "message after our uh model calling node",
    "start": "636279",
    "end": "640680"
  },
  {
    "text": "will be our SQL executing node so this",
    "start": "640680",
    "end": "644440"
  },
  {
    "text": "node will simply check the last message",
    "start": "644440",
    "end": "647079"
  },
  {
    "text": "in our agent State um since this note",
    "start": "647079",
    "end": "650399"
  },
  {
    "text": "always will set up to always be called",
    "start": "650399",
    "end": "653000"
  },
  {
    "text": "after the model calling node we know",
    "start": "653000",
    "end": "655720"
  },
  {
    "text": "that the last message is always the AI",
    "start": "655720",
    "end": "657440"
  },
  {
    "text": "message the latest AI message and it'll",
    "start": "657440",
    "end": "660000"
  },
  {
    "text": "check for any tool calls to the create",
    "start": "660000",
    "end": "662399"
  },
  {
    "text": "DF from SQL tool if those exist it will",
    "start": "662399",
    "end": "667480"
  },
  {
    "text": "run whatever SQL query was generated and",
    "start": "667480",
    "end": "671240"
  },
  {
    "text": "get back the results these will be a",
    "start": "671240",
    "end": "674200"
  },
  {
    "text": "list of",
    "start": "674200",
    "end": "675320"
  },
  {
    "text": "dictionaries and it will store those",
    "start": "675320",
    "end": "677760"
  },
  {
    "text": "results as a pandas data frame uh it'll",
    "start": "677760",
    "end": "682200"
  },
  {
    "text": "create the data frame with whatever",
    "start": "682200",
    "end": "684160"
  },
  {
    "text": "columns the the tool call generated so",
    "start": "684160",
    "end": "688800"
  },
  {
    "text": "the model gets to decide what the data",
    "start": "688800",
    "end": "690800"
  },
  {
    "text": "frame column names are and we will also",
    "start": "690800",
    "end": "694160"
  },
  {
    "text": "store the name that the model generated",
    "start": "694160",
    "end": "698720"
  },
  {
    "text": "to give the data frame variable uh this",
    "start": "698720",
    "end": "702000"
  },
  {
    "text": "will become useful in our python code",
    "start": "702000",
    "end": "705000"
  },
  {
    "text": "execution execution step and then we",
    "start": "705000",
    "end": "708440"
  },
  {
    "text": "just append a tool message to our agent",
    "start": "708440",
    "end": "712160"
  },
  {
    "text": "State um the actual contents of this",
    "start": "712160",
    "end": "716279"
  },
  {
    "text": "tool message will simply say that a",
    "start": "716279",
    "end": "719279"
  },
  {
    "text": "Panda's data frame with a given variable",
    "start": "719279",
    "end": "722760"
  },
  {
    "text": "name and with certain columns was",
    "start": "722760",
    "end": "725120"
  },
  {
    "text": "generated and then in the Raw attribute",
    "start": "725120",
    "end": "728760"
  },
  {
    "text": "of our tool message will store the",
    "start": "728760",
    "end": "730720"
  },
  {
    "text": "actual Panda data frame so that it can",
    "start": "730720",
    "end": "732720"
  },
  {
    "text": "be accessed by the python code execution",
    "start": "732720",
    "end": "735880"
  },
  {
    "text": "step without actually being sent to the",
    "start": "735880",
    "end": "738240"
  },
  {
    "text": "model in Future model",
    "start": "738240",
    "end": "741519"
  },
  {
    "start": "741000",
    "end": "1059000"
  },
  {
    "text": "invocations and so once we have called",
    "start": "741519",
    "end": "744959"
  },
  {
    "text": "our model and executed any SQL queries",
    "start": "744959",
    "end": "748199"
  },
  {
    "text": "generated by by the model the last step",
    "start": "748199",
    "end": "750480"
  },
  {
    "text": "is to execute any python code that the",
    "start": "750480",
    "end": "753519"
  },
  {
    "text": "model has",
    "start": "753519",
    "end": "755000"
  },
  {
    "text": "written and the way this will work is",
    "start": "755000",
    "end": "759120"
  },
  {
    "text": "again we'll find the latest AI message",
    "start": "759120",
    "end": "762920"
  },
  {
    "text": "which will include any python shell tool",
    "start": "762920",
    "end": "765639"
  },
  {
    "text": "calls on it and we'll find any python",
    "start": "765639",
    "end": "768639"
  },
  {
    "text": "shell tool calls and once we found one",
    "start": "768639",
    "end": "771399"
  },
  {
    "text": "we'll take the code the model has",
    "start": "771399",
    "end": "773760"
  },
  {
    "text": "generated and we will use our code",
    "start": "773760",
    "end": "776120"
  },
  {
    "text": "interpreter and actually execute that",
    "start": "776120",
    "end": "778600"
  },
  {
    "text": "code",
    "start": "778600",
    "end": "780040"
  },
  {
    "text": "now there's a few extra things that we",
    "start": "780040",
    "end": "782639"
  },
  {
    "text": "have to do here so we're having our",
    "start": "782639",
    "end": "785000"
  },
  {
    "text": "model generate the code assuming that it",
    "start": "785000",
    "end": "787600"
  },
  {
    "text": "has access to um certain pandas data",
    "start": "787600",
    "end": "790720"
  },
  {
    "text": "frames now the model will know what data",
    "start": "790720",
    "end": "795040"
  },
  {
    "text": "frames it has access to because it'll",
    "start": "795040",
    "end": "798600"
  },
  {
    "text": "have n it'll have come up with the data",
    "start": "798600",
    "end": "802440"
  },
  {
    "text": "frame variable names when it actually",
    "start": "802440",
    "end": "805320"
  },
  {
    "text": "generated the SQL query so the SQL query",
    "start": "805320",
    "end": "808320"
  },
  {
    "text": "will have",
    "start": "808320",
    "end": "809959"
  },
  {
    "text": "the or the SQL tool calls will have the",
    "start": "809959",
    "end": "812399"
  },
  {
    "text": "SQL query it'll have the data frame",
    "start": "812399",
    "end": "814839"
  },
  {
    "text": "variable name and the data frame columns",
    "start": "814839",
    "end": "817560"
  },
  {
    "text": "so the model will know exactly what it",
    "start": "817560",
    "end": "819920"
  },
  {
    "text": "called every data frame that it",
    "start": "819920",
    "end": "821639"
  },
  {
    "text": "generated via a SQL query it'll write",
    "start": "821639",
    "end": "824600"
  },
  {
    "text": "code assuming it has access to the data",
    "start": "824600",
    "end": "827440"
  },
  {
    "text": "frame",
    "start": "827440",
    "end": "828399"
  },
  {
    "text": "variable but of course the code",
    "start": "828399",
    "end": "830800"
  },
  {
    "text": "interpreter isn't local uh by default it",
    "start": "830800",
    "end": "833839"
  },
  {
    "text": "doesn't have access to any of the data",
    "start": "833839",
    "end": "835880"
  },
  {
    "text": "that we have um in our back end so we",
    "start": "835880",
    "end": "838759"
  },
  {
    "text": "need to somehow upload the data frames",
    "start": "838759",
    "end": "841040"
  },
  {
    "text": "we generated with our SQL queries to our",
    "start": "841040",
    "end": "843880"
  },
  {
    "text": "code",
    "start": "843880",
    "end": "844720"
  },
  {
    "text": "interpreter fortunately um this is",
    "start": "844720",
    "end": "848480"
  },
  {
    "text": "possible with the dynamic sessions code",
    "start": "848480",
    "end": "851160"
  },
  {
    "text": "interpreter there is a nice upload file",
    "start": "851160",
    "end": "854199"
  },
  {
    "text": "functionality that they provide so what",
    "start": "854199",
    "end": "857120"
  },
  {
    "text": "we're going to do is before we call any",
    "start": "857120",
    "end": "860399"
  },
  {
    "text": "of the code generated by our model we're",
    "start": "860399",
    "end": "864240"
  },
  {
    "text": "going to upload our data frames to our",
    "start": "864240",
    "end": "865880"
  },
  {
    "text": "code",
    "start": "865880",
    "end": "866680"
  },
  {
    "text": "interpreter uh the way we're going to do",
    "start": "866680",
    "end": "868639"
  },
  {
    "text": "this is we're going going to go through",
    "start": "868639",
    "end": "870440"
  },
  {
    "text": "our agent State and find any tool",
    "start": "870440",
    "end": "873120"
  },
  {
    "text": "messages which were the output of the",
    "start": "873120",
    "end": "875560"
  },
  {
    "text": "create DF from SQL tool and we're going",
    "start": "875560",
    "end": "878880"
  },
  {
    "text": "to take all the data frames that were",
    "start": "878880",
    "end": "881360"
  },
  {
    "text": "generated by those SQL queries and",
    "start": "881360",
    "end": "884120"
  },
  {
    "text": "upload them as CSV files to our code",
    "start": "884120",
    "end": "887720"
  },
  {
    "text": "interpreter um and then we're going to",
    "start": "887720",
    "end": "890519"
  },
  {
    "text": "write some simple python code for",
    "start": "890519",
    "end": "893680"
  },
  {
    "text": "loading those CSV files as pandas data",
    "start": "893680",
    "end": "896839"
  },
  {
    "text": "frames with the names that the model",
    "start": "896839",
    "end": "898720"
  },
  {
    "text": "thinks it gives those gave those",
    "start": "898720",
    "end": "901680"
  },
  {
    "text": "variables and then what we're going to",
    "start": "901680",
    "end": "903440"
  },
  {
    "text": "do is we're going to take that code for",
    "start": "903440",
    "end": "907040"
  },
  {
    "text": "instantiating those pandas data frames",
    "start": "907040",
    "end": "909399"
  },
  {
    "text": "with the expected variable names and",
    "start": "909399",
    "end": "912360"
  },
  {
    "text": "prefix um all of our model generated",
    "start": "912360",
    "end": "915160"
  },
  {
    "text": "code with that so when our model writes",
    "start": "915160",
    "end": "918440"
  },
  {
    "text": "code like",
    "start": "918440",
    "end": "921040"
  },
  {
    "text": "df1 do sum columns a b c um we're going",
    "start": "921040",
    "end": "926320"
  },
  {
    "text": "to add before that import pandas df1",
    "start": "926320",
    "end": "929720"
  },
  {
    "text": "equals pd. read",
    "start": "929720",
    "end": "932639"
  },
  {
    "text": "CSV whatever the the correct CSV path is",
    "start": "932639",
    "end": "936560"
  },
  {
    "text": "within the code interpreter and then the",
    "start": "936560",
    "end": "939120"
  },
  {
    "text": "model generated code will actually have",
    "start": "939120",
    "end": "941279"
  },
  {
    "text": "access to something called df1 or",
    "start": "941279",
    "end": "943959"
  },
  {
    "text": "whatever variable name the the model",
    "start": "943959",
    "end": "946480"
  },
  {
    "text": "previously decided to assign to that",
    "start": "946480",
    "end": "948880"
  },
  {
    "text": "data",
    "start": "948880",
    "end": "949920"
  },
  {
    "text": "frame once we execute our code",
    "start": "949920",
    "end": "953399"
  },
  {
    "text": "interpreter um with the model generator",
    "start": "953399",
    "end": "955920"
  },
  {
    "text": "code we will get back uh a few different",
    "start": "955920",
    "end": "959240"
  },
  {
    "text": "types of results so if we look at what",
    "start": "959240",
    "end": "964160"
  },
  {
    "text": "the dynamic",
    "start": "964160",
    "end": "966440"
  },
  {
    "text": "sessions code interpreter returns with a",
    "start": "966440",
    "end": "970920"
  },
  {
    "text": "simple",
    "start": "970920",
    "end": "973279"
  },
  {
    "text": "example uh it has a few things in it it",
    "start": "973480",
    "end": "976480"
  },
  {
    "text": "has standard out for any standard output",
    "start": "976480",
    "end": "979639"
  },
  {
    "text": "generated by the execution of the code",
    "start": "979639",
    "end": "982319"
  },
  {
    "text": "standard eror if errors were generated",
    "start": "982319",
    "end": "985120"
  },
  {
    "text": "and result for whatever the actual",
    "start": "985120",
    "end": "987360"
  },
  {
    "text": "results of the code were of the code was",
    "start": "987360",
    "end": "990440"
  },
  {
    "text": "in this case since we just have a print",
    "start": "990440",
    "end": "991839"
  },
  {
    "text": "statement the only thing that's",
    "start": "991839",
    "end": "993399"
  },
  {
    "text": "populated is standard out but in general",
    "start": "993399",
    "end": "996240"
  },
  {
    "text": "standard out and result can both be not",
    "start": "996240",
    "end": "998880"
  },
  {
    "text": "just text but also richer outputs like",
    "start": "998880",
    "end": "1001600"
  },
  {
    "text": "images B 64 encoded",
    "start": "1001600",
    "end": "1004399"
  },
  {
    "text": "images so what we're going to do is",
    "start": "1004399",
    "end": "1006319"
  },
  {
    "text": "we're going to take our code interpreter",
    "start": "1006319",
    "end": "1009759"
  },
  {
    "text": "output and we'll need to parse it a",
    "start": "1009759",
    "end": "1012120"
  },
  {
    "text": "little bit before we can um create a",
    "start": "1012120",
    "end": "1015199"
  },
  {
    "text": "tool message out of it specifically we",
    "start": "1015199",
    "end": "1018000"
  },
  {
    "text": "want to make sure that if there's",
    "start": "1018000",
    "end": "1019160"
  },
  {
    "text": "something like images in our code",
    "start": "1019160",
    "end": "1021519"
  },
  {
    "text": "interpreter results we display those",
    "start": "1021519",
    "end": "1023920"
  },
  {
    "text": "images but we don't actually include",
    "start": "1023920",
    "end": "1025600"
  },
  {
    "text": "them in the contents that we send back",
    "start": "1025600",
    "end": "1028600"
  },
  {
    "text": "to the model in future um model calls",
    "start": "1028600",
    "end": "1032600"
  },
  {
    "text": "and so what we're going to do is we'll",
    "start": "1032600",
    "end": "1034720"
  },
  {
    "text": "simply remove any images that are",
    "start": "1034720",
    "end": "1037199"
  },
  {
    "text": "returned as part of our code interpret",
    "start": "1037199",
    "end": "1038640"
  },
  {
    "text": "result and since we're in a notebook we",
    "start": "1038640",
    "end": "1040798"
  },
  {
    "text": "can just display them um but if this",
    "start": "1040799",
    "end": "1044120"
  },
  {
    "text": "were being run in a different",
    "start": "1044120",
    "end": "1045199"
  },
  {
    "text": "environment we could pass them along",
    "start": "1045199",
    "end": "1047038"
  },
  {
    "text": "some other way",
    "start": "1047039",
    "end": "1050360"
  },
  {
    "text": "and those are what the tool message",
    "start": "1050360",
    "end": "1052760"
  },
  {
    "text": "outputs will be of the Python execution",
    "start": "1052760",
    "end": "1055120"
  },
  {
    "text": "node and those will get appended to our",
    "start": "1055120",
    "end": "1057520"
  },
  {
    "text": "agent",
    "start": "1057520",
    "end": "1058679"
  },
  {
    "text": "state so now that we've defined all of",
    "start": "1058679",
    "end": "1060960"
  },
  {
    "start": "1059000",
    "end": "1191000"
  },
  {
    "text": "our main nodes we can Define the edges",
    "start": "1060960",
    "end": "1063039"
  },
  {
    "text": "which will connect our nodes again this",
    "start": "1063039",
    "end": "1065600"
  },
  {
    "text": "will be pretty simple we will have a",
    "start": "1065600",
    "end": "1069280"
  },
  {
    "text": "call model node which will be the entry",
    "start": "1069280",
    "end": "1071120"
  },
  {
    "text": "point to our graph we'll have an edge",
    "start": "1071120",
    "end": "1074679"
  },
  {
    "text": "from um our SQL execution node to our",
    "start": "1074679",
    "end": "1080400"
  },
  {
    "text": "python execution node and from our",
    "start": "1080400",
    "end": "1083320"
  },
  {
    "text": "python execution back to making a model",
    "start": "1083320",
    "end": "1086120"
  },
  {
    "text": "call um and then every time we call the",
    "start": "1086120",
    "end": "1088679"
  },
  {
    "text": "model we'll have a conditional Edge",
    "start": "1088679",
    "end": "1091080"
  },
  {
    "text": "basically if our model decides to call",
    "start": "1091080",
    "end": "1093200"
  },
  {
    "text": "any tools then we will execute the SQL",
    "start": "1093200",
    "end": "1096360"
  },
  {
    "text": "and python nodes and go back to the",
    "start": "1096360",
    "end": "1098440"
  },
  {
    "text": "model and then if our model ever doesn't",
    "start": "1098440",
    "end": "1100919"
  },
  {
    "text": "have any tool calls that means that the",
    "start": "1100919",
    "end": "1103559"
  },
  {
    "text": "model has is ready to respond to the",
    "start": "1103559",
    "end": "1105200"
  },
  {
    "text": "user and we will end um the agent",
    "start": "1105200",
    "end": "1109840"
  },
  {
    "text": "and the latest AI message will be",
    "start": "1109840",
    "end": "1113000"
  },
  {
    "text": "returned to the",
    "start": "1113000",
    "end": "1115000"
  },
  {
    "text": "user so that's our",
    "start": "1115000",
    "end": "1117280"
  },
  {
    "text": "agent um now we're ready to try it out",
    "start": "1117280",
    "end": "1121120"
  },
  {
    "text": "uh again in the examples that we're",
    "start": "1121120",
    "end": "1123840"
  },
  {
    "text": "going to see here the results and",
    "start": "1123840",
    "end": "1125880"
  },
  {
    "text": "queries will be related to the specific",
    "start": "1125880",
    "end": "1127919"
  },
  {
    "text": "database that I've hooked up my model to",
    "start": "1127919",
    "end": "1131000"
  },
  {
    "text": "um once you hook up your own database",
    "start": "1131000",
    "end": "1133679"
  },
  {
    "text": "you should ask it questions and",
    "start": "1133679",
    "end": "1135760"
  },
  {
    "text": "hopefully get results related to the",
    "start": "1135760",
    "end": "1138400"
  },
  {
    "text": "data you've given it so we can try",
    "start": "1138400",
    "end": "1141919"
  },
  {
    "text": "running",
    "start": "1141919",
    "end": "1144919"
  },
  {
    "text": "our let's",
    "start": "1145200",
    "end": "1147760"
  },
  {
    "text": "actually run these",
    "start": "1147760",
    "end": "1151840"
  },
  {
    "text": "cells and now we can try actually",
    "start": "1157080",
    "end": "1160039"
  },
  {
    "text": "running our application so the first",
    "start": "1160039",
    "end": "1163120"
  },
  {
    "text": "thing will be simple graph the average",
    "start": "1163120",
    "end": "1165799"
  },
  {
    "text": "latency by model we can see what that",
    "start": "1165799",
    "end": "1168120"
  },
  {
    "text": "looks like",
    "start": "1168120",
    "end": "1170120"
  },
  {
    "text": "and after a few seconds we get this nice",
    "start": "1170120",
    "end": "1173080"
  },
  {
    "text": "graph um",
    "start": "1173080",
    "end": "1177159"
  },
  {
    "text": "and a nice message from the model and",
    "start": "1177159",
    "end": "1182799"
  },
  {
    "text": "actually in this case doesn't understand",
    "start": "1182799",
    "end": "1185679"
  },
  {
    "text": "that we can visualize the outputs that",
    "start": "1185679",
    "end": "1187840"
  },
  {
    "text": "it's generating and if we're curious to",
    "start": "1187840",
    "end": "1190280"
  },
  {
    "text": "see what the trace looks like",
    "start": "1190280",
    "end": "1195159"
  },
  {
    "start": "1191000",
    "end": "1361000"
  },
  {
    "text": "for this model call um",
    "start": "1195200",
    "end": "1199520"
  },
  {
    "text": "for for this agent call we can see that",
    "start": "1199520",
    "end": "1201880"
  },
  {
    "text": "under the hood we've called our model",
    "start": "1201880",
    "end": "1204200"
  },
  {
    "text": "three times uh so the first time we call",
    "start": "1204200",
    "end": "1207320"
  },
  {
    "text": "the model it has access to these",
    "start": "1207320",
    "end": "1209600"
  },
  {
    "text": "specific tools here's the system prompt",
    "start": "1209600",
    "end": "1212840"
  },
  {
    "text": "that we're passing in every",
    "start": "1212840",
    "end": "1214559"
  },
  {
    "text": "time and here's our request and here's",
    "start": "1214559",
    "end": "1218039"
  },
  {
    "text": "the first thing that the model generated",
    "start": "1218039",
    "end": "1220400"
  },
  {
    "text": "which is it called the create DF from",
    "start": "1220400",
    "end": "1223960"
  },
  {
    "text": "SQL tool and it wrote The Following",
    "start": "1223960",
    "end": "1227720"
  },
  {
    "text": "select statement and uh generated a",
    "start": "1227720",
    "end": "1233320"
  },
  {
    "text": "pandas data frame that I called DF",
    "start": "1233320",
    "end": "1235000"
  },
  {
    "text": "average",
    "start": "1235000",
    "end": "1236960"
  },
  {
    "text": "latency and then when we got to the",
    "start": "1236960",
    "end": "1239919"
  },
  {
    "text": "execute SQL query",
    "start": "1239919",
    "end": "1242200"
  },
  {
    "text": "node it actually ran that and we see",
    "start": "1242200",
    "end": "1245919"
  },
  {
    "text": "that our tool generated this",
    "start": "1245919",
    "end": "1249640"
  },
  {
    "text": "simple content which we know isn't the",
    "start": "1249640",
    "end": "1253600"
  },
  {
    "text": "full content of what the tool actually",
    "start": "1253600",
    "end": "1255200"
  },
  {
    "text": "generated but this is what we're sending",
    "start": "1255200",
    "end": "1256840"
  },
  {
    "text": "back to the model",
    "start": "1256840",
    "end": "1259200"
  },
  {
    "text": "the E execute python didn't have any",
    "start": "1259200",
    "end": "1261760"
  },
  {
    "text": "output because there weren't any python",
    "start": "1261760",
    "end": "1264080"
  },
  {
    "text": "tool calls in this first cycle then we",
    "start": "1264080",
    "end": "1267799"
  },
  {
    "text": "get back to calling our model again and",
    "start": "1267799",
    "end": "1271159"
  },
  {
    "text": "this time we're passing in the um our",
    "start": "1271159",
    "end": "1275559"
  },
  {
    "text": "system",
    "start": "1275559",
    "end": "1276480"
  },
  {
    "text": "message the human input the first",
    "start": "1276480",
    "end": "1279440"
  },
  {
    "text": "generated AI message which had the tool",
    "start": "1279440",
    "end": "1281720"
  },
  {
    "text": "call and the output of that tool call",
    "start": "1281720",
    "end": "1285440"
  },
  {
    "text": "and this time the model calls the python",
    "start": "1285440",
    "end": "1287159"
  },
  {
    "text": "shell tool instead of the query tool and",
    "start": "1287159",
    "end": "1290360"
  },
  {
    "text": "notice that it writes code assuming it",
    "start": "1290360",
    "end": "1292240"
  },
  {
    "text": "has access to this DF average latency",
    "start": "1292240",
    "end": "1295360"
  },
  {
    "text": "variable um and",
    "start": "1295360",
    "end": "1297520"
  },
  {
    "text": "so when we next execute the python code",
    "start": "1297520",
    "end": "1302279"
  },
  {
    "text": "um we know that what we're actually",
    "start": "1302279",
    "end": "1305240"
  },
  {
    "text": "doing before running this python code in",
    "start": "1305240",
    "end": "1307320"
  },
  {
    "text": "our code interpreter is prefixing it",
    "start": "1307320",
    "end": "1310039"
  },
  {
    "text": "with a pandas import statement which",
    "start": "1310039",
    "end": "1313240"
  },
  {
    "text": "actually loads DF average latency as a",
    "start": "1313240",
    "end": "1316799"
  },
  {
    "text": "variable in this code",
    "start": "1316799",
    "end": "1320080"
  },
  {
    "text": "and in this case our code interpreter um",
    "start": "1320080",
    "end": "1325279"
  },
  {
    "text": "won't be showing any results in the tool",
    "start": "1325279",
    "end": "1329679"
  },
  {
    "text": "message but that's because the main",
    "start": "1329679",
    "end": "1332120"
  },
  {
    "text": "result was an image which we removed",
    "start": "1332120",
    "end": "1333880"
  },
  {
    "text": "from the tool result and displayed in",
    "start": "1333880",
    "end": "1335480"
  },
  {
    "text": "our notebook and then we can see that in",
    "start": "1335480",
    "end": "1338000"
  },
  {
    "text": "our last",
    "start": "1338000",
    "end": "1340120"
  },
  {
    "text": "um model call uh which now has all of",
    "start": "1340120",
    "end": "1345120"
  },
  {
    "text": "the messages in our agent State up to",
    "start": "1345120",
    "end": "1347120"
  },
  {
    "text": "this point um",
    "start": "1347120",
    "end": "1349080"
  },
  {
    "text": "it finishes with simply returning a a",
    "start": "1349080",
    "end": "1353320"
  },
  {
    "text": "message with no tool calls and that's",
    "start": "1353320",
    "end": "1356080"
  },
  {
    "text": "when our agent knows to stop uh the",
    "start": "1356080",
    "end": "1360919"
  },
  {
    "text": "cycle so now let's try a slightly more",
    "start": "1360919",
    "end": "1364360"
  },
  {
    "start": "1361000",
    "end": "1580000"
  },
  {
    "text": "complex um agent call and we'll ask",
    "start": "1364360",
    "end": "1368880"
  },
  {
    "text": "something that's slightly",
    "start": "1368880",
    "end": "1371279"
  },
  {
    "text": "um uh higher level and and more fuzzy",
    "start": "1371279",
    "end": "1375480"
  },
  {
    "text": "about exactly what we're asking the",
    "start": "1375480",
    "end": "1376799"
  },
  {
    "text": "model to do um and we'll say what's the",
    "start": "1376799",
    "end": "1379520"
  },
  {
    "text": "relationship between latency and input",
    "start": "1379520",
    "end": "1381840"
  },
  {
    "text": "tokens um notice that we're not telling",
    "start": "1381840",
    "end": "1384520"
  },
  {
    "text": "it that it should graph something",
    "start": "1384520",
    "end": "1387200"
  },
  {
    "text": "whether to explicitly compute",
    "start": "1387200",
    "end": "1388440"
  },
  {
    "text": "correlation or some other dependency",
    "start": "1388440",
    "end": "1390640"
  },
  {
    "text": "statistic between latency and input",
    "start": "1390640",
    "end": "1393000"
  },
  {
    "text": "tokens we're just stating something high",
    "start": "1393000",
    "end": "1395640"
  },
  {
    "text": "level let's see what it generates and",
    "start": "1395640",
    "end": "1398240"
  },
  {
    "text": "see what the model is able to come up",
    "start": "1398240",
    "end": "1400320"
  },
  {
    "text": "with for that and again our model is",
    "start": "1400320",
    "end": "1402880"
  },
  {
    "text": "able or our agent is able to come up",
    "start": "1402880",
    "end": "1404760"
  },
  {
    "text": "with a pretty reasonable answer it",
    "start": "1404760",
    "end": "1407000"
  },
  {
    "text": "graphs the relationship prompt tokens",
    "start": "1407000",
    "end": "1409960"
  },
  {
    "text": "and latency specifically for the Gemini",
    "start": "1409960",
    "end": "1413640"
  },
  {
    "text": "pro model and then it also computes",
    "start": "1413640",
    "end": "1416679"
  },
  {
    "text": "correlations uh between prompt and",
    "start": "1416679",
    "end": "1418480"
  },
  {
    "text": "latency controlling for the different",
    "start": "1418480",
    "end": "1420279"
  },
  {
    "text": "models and we can see that there",
    "start": "1420279",
    "end": "1421600"
  },
  {
    "text": "actually is a pretty big difference",
    "start": "1421600",
    "end": "1423039"
  },
  {
    "text": "between the correlations with anthropic",
    "start": "1423039",
    "end": "1425080"
  },
  {
    "text": "seeming to be uh laty seeming to be much",
    "start": "1425080",
    "end": "1428120"
  },
  {
    "text": "more dependent on prompt token length",
    "start": "1428120",
    "end": "1430720"
  },
  {
    "text": "than some of the other",
    "start": "1430720",
    "end": "1432600"
  },
  {
    "text": "models now we can try continue our",
    "start": "1432600",
    "end": "1435880"
  },
  {
    "text": "conversation we could ask what about",
    "start": "1435880",
    "end": "1438520"
  },
  {
    "text": "latency versus output tokens see what",
    "start": "1438520",
    "end": "1441120"
  },
  {
    "text": "that",
    "start": "1441120",
    "end": "1442240"
  },
  {
    "text": "generates um and then maybe while we're",
    "start": "1442240",
    "end": "1444679"
  },
  {
    "text": "at it one last even higher level",
    "start": "1444679",
    "end": "1447000"
  },
  {
    "text": "question what's the better explanatory",
    "start": "1447000",
    "end": "1449039"
  },
  {
    "text": "variable for latency input or output",
    "start": "1449039",
    "end": "1451880"
  },
  {
    "text": "tokens and let's see what it generates",
    "start": "1451880",
    "end": "1454559"
  },
  {
    "text": "for those two",
    "start": "1454559",
    "end": "1457120"
  },
  {
    "text": "questions we can see that for the first",
    "start": "1457279",
    "end": "1459760"
  },
  {
    "text": "question of latency versus output tokens",
    "start": "1459760",
    "end": "1463240"
  },
  {
    "text": "our model generates actually quite a",
    "start": "1463240",
    "end": "1466360"
  },
  {
    "text": "nice graph um show knowing the different",
    "start": "1466360",
    "end": "1469640"
  },
  {
    "text": "latencies color coded by model and",
    "start": "1469640",
    "end": "1472279"
  },
  {
    "text": "already Computing and displaying some uh",
    "start": "1472279",
    "end": "1476159"
  },
  {
    "text": "correlation",
    "start": "1476159",
    "end": "1477279"
  },
  {
    "text": "lines",
    "start": "1477279",
    "end": "1478840"
  },
  {
    "text": "and it computes the correlations",
    "start": "1478840",
    "end": "1481440"
  },
  {
    "text": "controlling for the different models and",
    "start": "1481440",
    "end": "1484120"
  },
  {
    "text": "gives us a little analysis of Which",
    "start": "1484120",
    "end": "1485840"
  },
  {
    "text": "models show the highest correlations",
    "start": "1485840",
    "end": "1487760"
  },
  {
    "text": "between output tokens and latencies and",
    "start": "1487760",
    "end": "1490480"
  },
  {
    "text": "it does seem like in general output",
    "start": "1490480",
    "end": "1492120"
  },
  {
    "text": "tokens is a better explanatory variable",
    "start": "1492120",
    "end": "1496320"
  },
  {
    "text": "for latency so then when we ask this",
    "start": "1496320",
    "end": "1499320"
  },
  {
    "text": "final",
    "start": "1499320",
    "end": "1500360"
  },
  {
    "text": "question we can see that our model comes",
    "start": "1500360",
    "end": "1503399"
  },
  {
    "text": "to a similar conclusion Computing the",
    "start": "1503399",
    "end": "1506720"
  },
  {
    "text": "correlation between input tokens in",
    "start": "1506720",
    "end": "1508640"
  },
  {
    "text": "latency and output tokens in latency and",
    "start": "1508640",
    "end": "1510960"
  },
  {
    "text": "concluding that output tokens has a uh",
    "start": "1510960",
    "end": "1514799"
  },
  {
    "text": "higher",
    "start": "1514799",
    "end": "1515840"
  },
  {
    "text": "explanatory has more explanatory power",
    "start": "1515840",
    "end": "1519520"
  },
  {
    "text": "so there's our data analyst agent so",
    "start": "1519520",
    "end": "1523760"
  },
  {
    "text": "just to recap we built our agent um such",
    "start": "1523760",
    "end": "1528039"
  },
  {
    "text": "that it could execute SQL queries",
    "start": "1528039",
    "end": "1531360"
  },
  {
    "text": "against a SQL database and then take",
    "start": "1531360",
    "end": "1534120"
  },
  {
    "text": "whatever information it retrieved from",
    "start": "1534120",
    "end": "1535600"
  },
  {
    "text": "the database and upload it as csvs to",
    "start": "1535600",
    "end": "1538520"
  },
  {
    "text": "the Azure container apps Dynamic",
    "start": "1538520",
    "end": "1540919"
  },
  {
    "text": "sessions code interpreter and then",
    "start": "1540919",
    "end": "1543360"
  },
  {
    "text": "actually write code to interface uh uh",
    "start": "1543360",
    "end": "1546679"
  },
  {
    "text": "uh to analyze the those CSV files um and",
    "start": "1546679",
    "end": "1551880"
  },
  {
    "text": "we made it so that our agent could",
    "start": "1551880",
    "end": "1553279"
  },
  {
    "text": "actually return Rich results like",
    "start": "1553279",
    "end": "1556159"
  },
  {
    "text": "displaying images and and",
    "start": "1556159",
    "end": "1559600"
  },
  {
    "text": "such so that covers the data analyst",
    "start": "1559600",
    "end": "1563320"
  },
  {
    "text": "example there's links in the videos to",
    "start": "1563320",
    "end": "1567120"
  },
  {
    "text": "this notebook and to all the relevant",
    "start": "1567120",
    "end": "1569640"
  },
  {
    "text": "documentation and we're really excited",
    "start": "1569640",
    "end": "1572760"
  },
  {
    "text": "about the dynamic sessions tool and",
    "start": "1572760",
    "end": "1575559"
  },
  {
    "text": "can't wait to see what others think to",
    "start": "1575559",
    "end": "1577640"
  },
  {
    "text": "build with it",
    "start": "1577640",
    "end": "1581039"
  }
]