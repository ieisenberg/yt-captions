[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": "one of the most common use cases for",
    "start": "240",
    "end": "2080"
  },
  {
    "text": "llms is structured data generation and",
    "start": "2080",
    "end": "5200"
  },
  {
    "text": "Tool",
    "start": "5200",
    "end": "6240"
  },
  {
    "text": "calling while this works out of the box",
    "start": "6240",
    "end": "8800"
  },
  {
    "text": "for simple Json schemas we've seen it",
    "start": "8800",
    "end": "11719"
  },
  {
    "text": "struggle with large Json schemas and",
    "start": "11719",
    "end": "14080"
  },
  {
    "text": "even if it can do it reliably it's often",
    "start": "14080",
    "end": "16720"
  },
  {
    "text": "expensive and slow we work on a few",
    "start": "16720",
    "end": "20080"
  },
  {
    "text": "projects at linkchain like memory that",
    "start": "20080",
    "end": "22960"
  },
  {
    "text": "require extracting pretty large Json",
    "start": "22960",
    "end": "25680"
  },
  {
    "text": "schemas and so over the past few months",
    "start": "25680",
    "end": "28560"
  },
  {
    "text": "one of our lead engineers will has been",
    "start": "28560",
    "end": "30560"
  },
  {
    "text": "working on this Library called trust",
    "start": "30560",
    "end": "32558"
  },
  {
    "text": "call that does this more reliably",
    "start": "32559",
    "end": "35239"
  },
  {
    "text": "cheaper and faster at a high level it",
    "start": "35239",
    "end": "38520"
  },
  {
    "text": "does this by focusing on generating Json",
    "start": "38520",
    "end": "40920"
  },
  {
    "text": "patches rather than the full Json",
    "start": "40920",
    "end": "43800"
  },
  {
    "text": "blob when trying to update existing Json",
    "start": "43800",
    "end": "47120"
  },
  {
    "text": "blobs this is often much more reliable",
    "start": "47120",
    "end": "50399"
  },
  {
    "text": "cheaper and faster and this can also be",
    "start": "50399",
    "end": "53480"
  },
  {
    "text": "used as a technique for self-healing",
    "start": "53480",
    "end": "56079"
  },
  {
    "text": "when generating large Json blobs from",
    "start": "56079",
    "end": "58239"
  },
  {
    "text": "scratch",
    "start": "58239",
    "end": "60079"
  },
  {
    "text": "let's take a look at the library and see",
    "start": "60079",
    "end": "62000"
  },
  {
    "text": "how we can use",
    "start": "62000",
    "end": "63119"
  },
  {
    "start": "63000",
    "end": "170000"
  },
  {
    "text": "it the library is fully open source and",
    "start": "63119",
    "end": "66240"
  },
  {
    "text": "hosted on GitHub you can pip install it",
    "start": "66240",
    "end": "68920"
  },
  {
    "text": "with Pip install trust call one of the",
    "start": "68920",
    "end": "72200"
  },
  {
    "text": "things to note is that this is built on",
    "start": "72200",
    "end": "74119"
  },
  {
    "text": "Lang graph what is langra you might",
    "start": "74119",
    "end": "77439"
  },
  {
    "text": "ask Lang graph is a low-level",
    "start": "77439",
    "end": "79840"
  },
  {
    "text": "orchestration framework it can encode",
    "start": "79840",
    "end": "82560"
  },
  {
    "text": "cycles and retries and we use these",
    "start": "82560",
    "end": "85040"
  },
  {
    "text": "under the hood in trust call this also",
    "start": "85040",
    "end": "88000"
  },
  {
    "text": "means that although trust call is a",
    "start": "88000",
    "end": "89960"
  },
  {
    "text": "higher level interface on top of L graph",
    "start": "89960",
    "end": "92720"
  },
  {
    "text": "if you really want to you can dive into",
    "start": "92720",
    "end": "94680"
  },
  {
    "text": "the details and pretty easily modify all",
    "start": "94680",
    "end": "97200"
  },
  {
    "text": "the components",
    "start": "97200",
    "end": "98799"
  },
  {
    "text": "inside let's now take a look at trust",
    "start": "98799",
    "end": "101200"
  },
  {
    "text": "call in action I've got my Jupiter",
    "start": "101200",
    "end": "103920"
  },
  {
    "text": "notebook here and I'm going to set my",
    "start": "103920",
    "end": "105439"
  },
  {
    "text": "Lang chain tracing project to trust call",
    "start": "105439",
    "end": "108640"
  },
  {
    "text": "I'm then going to start with an example",
    "start": "108640",
    "end": "110240"
  },
  {
    "text": "of generating complex schemas so here",
    "start": "110240",
    "end": "113479"
  },
  {
    "text": "I've got a pretty complex schema that",
    "start": "113479",
    "end": "115280"
  },
  {
    "text": "contains a lot of nested schemas as well",
    "start": "115280",
    "end": "118840"
  },
  {
    "text": "let's see what happens if I try to use",
    "start": "118840",
    "end": "121000"
  },
  {
    "text": "traditional tool calling with open",
    "start": "121000",
    "end": "123840"
  },
  {
    "text": "AI we can see that it runs into an error",
    "start": "123840",
    "end": "126759"
  },
  {
    "text": "what is this",
    "start": "126759",
    "end": "128399"
  },
  {
    "text": "error if we scroll down we can see that",
    "start": "128399",
    "end": "131440"
  },
  {
    "text": "it actually didn't generate the correct",
    "start": "131440",
    "end": "133040"
  },
  {
    "text": "Json that's because this is a pretty",
    "start": "133040",
    "end": "134879"
  },
  {
    "text": "tricky nested Json schema to",
    "start": "134879",
    "end": "138160"
  },
  {
    "text": "extract we can set strict equals true",
    "start": "138160",
    "end": "141319"
  },
  {
    "text": "this should in theory do it but we run",
    "start": "141319",
    "end": "143440"
  },
  {
    "text": "into an issue open AI strict equals true",
    "start": "143440",
    "end": "146720"
  },
  {
    "text": "doesn't actually handle these types of",
    "start": "146720",
    "end": "149040"
  },
  {
    "text": "complex nest",
    "start": "149040",
    "end": "150920"
  },
  {
    "text": "Json here's where we can use trust call",
    "start": "150920",
    "end": "153720"
  },
  {
    "text": "we can pass in our schema as a tool and",
    "start": "153720",
    "end": "155959"
  },
  {
    "text": "specify that as a tool choice we can",
    "start": "155959",
    "end": "158720"
  },
  {
    "text": "then run it and see that it will",
    "start": "158720",
    "end": "160080"
  },
  {
    "text": "generate correct",
    "start": "160080",
    "end": "161920"
  },
  {
    "text": "Json there we go we extract a pretty",
    "start": "161920",
    "end": "164760"
  },
  {
    "text": "gnarly complex Json let's take a look at",
    "start": "164760",
    "end": "167440"
  },
  {
    "text": "what's going under the hood using Lang",
    "start": "167440",
    "end": "169920"
  },
  {
    "text": "Smith we can see that in this call",
    "start": "169920",
    "end": "172440"
  },
  {
    "start": "170000",
    "end": "212000"
  },
  {
    "text": "there's actually two calls to open AI",
    "start": "172440",
    "end": "174440"
  },
  {
    "text": "being made the first one is doing a",
    "start": "174440",
    "end": "177120"
  },
  {
    "text": "pretty standard extraction task",
    "start": "177120",
    "end": "181000"
  },
  {
    "text": "we can see that we pass to this validate",
    "start": "181000",
    "end": "182800"
  },
  {
    "text": "node and if we look at the output we can",
    "start": "182800",
    "end": "185200"
  },
  {
    "text": "see that we actually get an",
    "start": "185200",
    "end": "187360"
  },
  {
    "text": "error we then go into a patch node where",
    "start": "187360",
    "end": "190319"
  },
  {
    "text": "we're calling open AI to generate a Json",
    "start": "190319",
    "end": "193480"
  },
  {
    "text": "patch to apply to the previous generated",
    "start": "193480",
    "end": "196000"
  },
  {
    "text": "Json to correct it we then go into a",
    "start": "196000",
    "end": "199560"
  },
  {
    "text": "second validate node where we can see",
    "start": "199560",
    "end": "201840"
  },
  {
    "text": "that it is correctly",
    "start": "201840",
    "end": "203879"
  },
  {
    "text": "extracted so what's going on under the",
    "start": "203879",
    "end": "205959"
  },
  {
    "text": "hood is we're using this Json patch",
    "start": "205959",
    "end": "207920"
  },
  {
    "text": "operation to heal the first generated",
    "start": "207920",
    "end": "211799"
  },
  {
    "text": "extraction as mentioned trust call is",
    "start": "211799",
    "end": "214239"
  },
  {
    "text": "built on top of L graph that means that",
    "start": "214239",
    "end": "216480"
  },
  {
    "text": "we can actually visualize the underlying",
    "start": "216480",
    "end": "219400"
  },
  {
    "text": "graph we can see that it's quite complex",
    "start": "219400",
    "end": "222080"
  },
  {
    "text": "with a few loops and a bunch of",
    "start": "222080",
    "end": "223560"
  },
  {
    "text": "different states that it can enter let's",
    "start": "223560",
    "end": "226360"
  },
  {
    "text": "go on to a second example of updating",
    "start": "226360",
    "end": "228640"
  },
  {
    "text": "schemas so this is the case where you",
    "start": "228640",
    "end": "230959"
  },
  {
    "text": "already have an existing Json blob and",
    "start": "230959",
    "end": "233239"
  },
  {
    "text": "you want to update it with new",
    "start": "233239",
    "end": "235720"
  },
  {
    "text": "information if this Json blob is",
    "start": "235720",
    "end": "238400"
  },
  {
    "text": "large then I na thing to do here is to",
    "start": "238400",
    "end": "240959"
  },
  {
    "text": "pass the existing Json blob plus the new",
    "start": "240959",
    "end": "243239"
  },
  {
    "text": "information to an llm and ask it to",
    "start": "243239",
    "end": "245319"
  },
  {
    "text": "generate a full new Json when this Json",
    "start": "245319",
    "end": "248400"
  },
  {
    "text": "blob starts getting large that can prove",
    "start": "248400",
    "end": "251319"
  },
  {
    "text": "problematic let's take a",
    "start": "251319",
    "end": "253400"
  },
  {
    "text": "look here we have a pretty complex",
    "start": "253400",
    "end": "255480"
  },
  {
    "text": "schema and we have this initial schema",
    "start": "255480",
    "end": "257840"
  },
  {
    "text": "right here we have this conversation",
    "start": "257840",
    "end": "260840"
  },
  {
    "text": "upon which we want to update the initial",
    "start": "260840",
    "end": "263919"
  },
  {
    "text": "schema if we call it with standard",
    "start": "263919",
    "end": "266199"
  },
  {
    "text": "structured data extraction we can see",
    "start": "266199",
    "end": "268800"
  },
  {
    "text": "that it will forget and mess up a few",
    "start": "268800",
    "end": "271240"
  },
  {
    "text": "things for example we can see that it",
    "start": "271240",
    "end": "273840"
  },
  {
    "text": "kind of just forgets all about the",
    "start": "273840",
    "end": "275960"
  },
  {
    "text": "languages that were part of the original",
    "start": "275960",
    "end": "279840"
  },
  {
    "text": "profile let's see what happens when we",
    "start": "279840",
    "end": "281919"
  },
  {
    "text": "use trust",
    "start": "281919",
    "end": "283280"
  },
  {
    "text": "call with trust call we can see that it",
    "start": "283280",
    "end": "285960"
  },
  {
    "text": "keeps the original languages that's",
    "start": "285960",
    "end": "288120"
  },
  {
    "text": "because it's doing a Json patch",
    "start": "288120",
    "end": "290039"
  },
  {
    "text": "operation and there's nothing in the",
    "start": "290039",
    "end": "291840"
  },
  {
    "text": "conversation that overrides any of these",
    "start": "291840",
    "end": "294000"
  },
  {
    "text": "preferences they're just getting",
    "start": "294000",
    "end": "295080"
  },
  {
    "text": "forgotten from the original call let's",
    "start": "295080",
    "end": "297560"
  },
  {
    "text": "take a look at what's going under the",
    "start": "297560",
    "end": "298639"
  },
  {
    "text": "hood and compare the two methods in the",
    "start": "298639",
    "end": "301520"
  },
  {
    "start": "300000",
    "end": "362000"
  },
  {
    "text": "first method we can see that there's",
    "start": "301520",
    "end": "303160"
  },
  {
    "text": "just a simple call to open AI That's all",
    "start": "303160",
    "end": "305919"
  },
  {
    "text": "it's doing pretty",
    "start": "305919",
    "end": "307720"
  },
  {
    "text": "standard with the second method we can",
    "start": "307720",
    "end": "310000"
  },
  {
    "text": "see that it's still only making one call",
    "start": "310000",
    "end": "311759"
  },
  {
    "text": "to open AI but there's a lot more",
    "start": "311759",
    "end": "313560"
  },
  {
    "text": "pre-processing happening what's going if",
    "start": "313560",
    "end": "315919"
  },
  {
    "text": "we click into the call we can now see",
    "start": "315919",
    "end": "318360"
  },
  {
    "text": "that we have a system message where it",
    "start": "318360",
    "end": "319840"
  },
  {
    "text": "asks it to generate Json patches and",
    "start": "319840",
    "end": "322199"
  },
  {
    "text": "then we can see that the generation",
    "start": "322199",
    "end": "324000"
  },
  {
    "text": "isn't a full new Doc it's actually this",
    "start": "324000",
    "end": "326520"
  },
  {
    "text": "list of Json patch operations to apply",
    "start": "326520",
    "end": "329479"
  },
  {
    "text": "and and then that gets applied to the",
    "start": "329479",
    "end": "330759"
  },
  {
    "text": "original Json blob in the postprocessing",
    "start": "330759",
    "end": "335280"
  },
  {
    "text": "steps not only is this Json patch",
    "start": "336000",
    "end": "338479"
  },
  {
    "text": "generation more reliable but it can also",
    "start": "338479",
    "end": "340800"
  },
  {
    "text": "be cheaper and faster so let's take a",
    "start": "340800",
    "end": "343479"
  },
  {
    "text": "look at an example where we don't really",
    "start": "343479",
    "end": "345400"
  },
  {
    "text": "have that many things we want to update",
    "start": "345400",
    "end": "347479"
  },
  {
    "text": "in this case generating the full Json",
    "start": "347479",
    "end": "349800"
  },
  {
    "text": "blob is just",
    "start": "349800",
    "end": "352199"
  },
  {
    "text": "unnecessary let's do the original method",
    "start": "352199",
    "end": "354600"
  },
  {
    "text": "here and then let's run the trust call",
    "start": "354600",
    "end": "357120"
  },
  {
    "text": "method",
    "start": "357120",
    "end": "358280"
  },
  {
    "text": "here we can use lsmith to compare what's",
    "start": "358280",
    "end": "361319"
  },
  {
    "text": "going on under the",
    "start": "361319",
    "end": "362800"
  },
  {
    "start": "362000",
    "end": "469000"
  },
  {
    "text": "hood this is the first method we can see",
    "start": "362800",
    "end": "365639"
  },
  {
    "text": "that it takes about 3 and 1/2 seconds to",
    "start": "365639",
    "end": "368199"
  },
  {
    "text": "run and it's taking up about 300",
    "start": "368199",
    "end": "371240"
  },
  {
    "text": "completion",
    "start": "371240",
    "end": "372400"
  },
  {
    "text": "tokens this is what happens when we use",
    "start": "372400",
    "end": "374560"
  },
  {
    "text": "trust call the time to run Falls to",
    "start": "374560",
    "end": "377560"
  },
  {
    "text": "about 1 and 1 half seconds that's a",
    "start": "377560",
    "end": "379440"
  },
  {
    "text": "pretty big speed up it's taking more",
    "start": "379440",
    "end": "381639"
  },
  {
    "text": "tokens overall but it's taking far fewer",
    "start": "381639",
    "end": "384440"
  },
  {
    "text": "completion",
    "start": "384440",
    "end": "385560"
  },
  {
    "text": "tokens this is because it's just",
    "start": "385560",
    "end": "387639"
  },
  {
    "text": "generating the Json patch that's much",
    "start": "387639",
    "end": "390039"
  },
  {
    "text": "smaller than the whole Json",
    "start": "390039",
    "end": "393319"
  },
  {
    "text": "schema a final use case for trust call",
    "start": "393319",
    "end": "396479"
  },
  {
    "text": "is both updating and inserting items",
    "start": "396479",
    "end": "398919"
  },
  {
    "text": "into a list this is useful for our",
    "start": "398919",
    "end": "401039"
  },
  {
    "text": "memory service because we might want to",
    "start": "401039",
    "end": "402759"
  },
  {
    "text": "extract lists of items so here let's",
    "start": "402759",
    "end": "405919"
  },
  {
    "text": "look at an example we can create this",
    "start": "405919",
    "end": "407560"
  },
  {
    "text": "list of people that someone might know",
    "start": "407560",
    "end": "409680"
  },
  {
    "text": "and then we have this conversation where",
    "start": "409680",
    "end": "411440"
  },
  {
    "text": "they talk about those",
    "start": "411440",
    "end": "413360"
  },
  {
    "text": "people we can then create an extractor",
    "start": "413360",
    "end": "416160"
  },
  {
    "text": "with trust call and we just pass in",
    "start": "416160",
    "end": "418120"
  },
  {
    "text": "enable inserts this allows inserts into",
    "start": "418120",
    "end": "421039"
  },
  {
    "text": "the list we can see that after we call",
    "start": "421039",
    "end": "422599"
  },
  {
    "text": "it we get a list with both new",
    "start": "422599",
    "end": "425120"
  },
  {
    "text": "insertions as well as updated",
    "start": "425120",
    "end": "426919"
  },
  {
    "text": "information let's see what's going on",
    "start": "426919",
    "end": "428840"
  },
  {
    "text": "under the hood here we can see that",
    "start": "428840",
    "end": "431400"
  },
  {
    "text": "we're again making only a single llm",
    "start": "431400",
    "end": "433720"
  },
  {
    "text": "call and this llm is generating a bunch",
    "start": "433720",
    "end": "437360"
  },
  {
    "text": "of patches to documents in this list",
    "start": "437360",
    "end": "440879"
  },
  {
    "text": "these are then getting applied in the",
    "start": "440879",
    "end": "442440"
  },
  {
    "text": "post-processing step structured data",
    "start": "442440",
    "end": "445360"
  },
  {
    "text": "extraction and Tool calling with large",
    "start": "445360",
    "end": "447720"
  },
  {
    "text": "Json schemas can be unre reliable and",
    "start": "447720",
    "end": "450680"
  },
  {
    "text": "often cause problems when building llm",
    "start": "450680",
    "end": "452680"
  },
  {
    "text": "apps we ran into this firsthand when",
    "start": "452680",
    "end": "455280"
  },
  {
    "text": "building our memory Service as we needed",
    "start": "455280",
    "end": "457000"
  },
  {
    "text": "to extract pretty large Json schemas",
    "start": "457000",
    "end": "459800"
  },
  {
    "text": "about user preferences and information",
    "start": "459800",
    "end": "462440"
  },
  {
    "text": "trust call is a library we develop to",
    "start": "462440",
    "end": "464560"
  },
  {
    "text": "help solve this and we're excited to",
    "start": "464560",
    "end": "466360"
  },
  {
    "text": "release it to the world as well",
    "start": "466360",
    "end": "470439"
  }
]