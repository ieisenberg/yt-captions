[
  {
    "text": "hey everybody my name is brace I'm an engineer here at Lang chain and today I'm going to be doing a video um called",
    "start": "599",
    "end": "6879"
  },
  {
    "text": "Lang Tool uh and this is going to be um a walkth through a live coding video",
    "start": "6879",
    "end": "13160"
  },
  {
    "text": "where I build a program I'm calling l tool it's built on top of the any tool",
    "start": "13160",
    "end": "19279"
  },
  {
    "text": "and tool bench papers um that will be linked in the YouTube description very interesting",
    "start": "19279",
    "end": "25800"
  },
  {
    "text": "basically at a high level it's using LMS and rag techniques to call apis given a",
    "start": "25800",
    "end": "33079"
  },
  {
    "text": "massive data set of apis um the data set we'll be using in this video",
    "start": "33079",
    "end": "39680"
  },
  {
    "text": "was extracted or you know I took it from the toolbench data set uh but then slimmed it down to only about 130 apis",
    "start": "39680",
    "end": "48520"
  },
  {
    "text": "instead of the 16,000 that they have in their data set uh just so it's a little easier to work with but the principle is",
    "start": "48520",
    "end": "54359"
  },
  {
    "text": "the same yeah so the overall idea is you take user's query",
    "start": "54359",
    "end": "60440"
  },
  {
    "text": "you want to then extract a category from the user's query uh this category we're",
    "start": "60440",
    "end": "66080"
  },
  {
    "text": "going to provide a list of all the categories the LM can choose from we're going to be using tool calling so the llm can just respond with the tool it",
    "start": "66080",
    "end": "72280"
  },
  {
    "text": "wants or with the category it wants to use via the category Tool uh from that category we can then get a list of all",
    "start": "72280",
    "end": "78840"
  },
  {
    "text": "the apis in our data set with the category since we're only using about",
    "start": "78840",
    "end": "84119"
  },
  {
    "text": "13 total apis each category doesn't have more than like three or four apis I",
    "start": "84119",
    "end": "89600"
  },
  {
    "text": "think so we just pass all the apis to the LM um here the LM then selects which",
    "start": "89600",
    "end": "95439"
  },
  {
    "text": "API it believes best matches the user's query from there once we have the actual",
    "start": "95439",
    "end": "101360"
  },
  {
    "text": "API and the API spec we can take the user's query again that API spec pass it",
    "start": "101360",
    "end": "106399"
  },
  {
    "text": "to an llm and get a structure response with uh the different parameters or uh",
    "start": "106399",
    "end": "113719"
  },
  {
    "text": "search prams are body the body of the API from the query um we then pass that",
    "start": "113719",
    "end": "119360"
  },
  {
    "text": "to the next node where we verify that all the parameters that the API requires we have if we don't have that then we go",
    "start": "119360",
    "end": "126880"
  },
  {
    "text": "to a this is a conditional node if we don't have all the parameters then we go to this human Loop node which allows the",
    "start": "126880",
    "end": "133920"
  },
  {
    "text": "user to type in on the command line the missing parameters they have or it could be something else You' expand it to like",
    "start": "133920",
    "end": "140040"
  },
  {
    "text": "in a UI that then gets sent back to the verify params conditional Edge if we're",
    "start": "140040",
    "end": "145840"
  },
  {
    "text": "able to verify all the prams are present we pass it along to next node which actually goes and executes the fetch",
    "start": "145840",
    "end": "151760"
  },
  {
    "text": "response and then we have the final result yeah so this is going to be built",
    "start": "151760",
    "end": "157879"
  },
  {
    "text": "on top of um mostly Lang graph using Lan chain uh as like the core building blocks of course uh and typescript uh",
    "start": "157879",
    "end": "165159"
  },
  {
    "text": "we're not going to have a UI for this it's all going to be on the command line um but it should be pretty simple to extend to UI if you want or build on top",
    "start": "165159",
    "end": "172200"
  },
  {
    "text": "of it to build something else all right so the first step you're going to want to clone this repository I",
    "start": "172200",
    "end": "178840"
  },
  {
    "text": "have um this is just like a template repo uh it comes with the data set we're",
    "start": "178840",
    "end": "184480"
  },
  {
    "text": "going to be using uh and the backend directory it's like a typescript monor",
    "start": "184480",
    "end": "189640"
  },
  {
    "text": "repo um and it has some kind of placeholders or that's not placeholders",
    "start": "189640",
    "end": "195040"
  },
  {
    "text": "files um and functions just so we can go through by one Implement them all um and we know we're not missing anything so",
    "start": "195040",
    "end": "202080"
  },
  {
    "text": "I'll add a link to this but you're going to want to go in copy the get URL clone it um and once you've cloned",
    "start": "202080",
    "end": "209840"
  },
  {
    "text": "you can navigate playing",
    "start": "209840",
    "end": "216280"
  },
  {
    "text": "Tool uh you can have get in we're going to want to install dependencies we're using yarn in this project just run yarn",
    "start": "216360",
    "end": "222920"
  },
  {
    "text": "and then if we open it up we can go to the backend directory where all of our work is going to happen um and the first",
    "start": "222920",
    "end": "229080"
  },
  {
    "text": "thing we're going to want to do is add our secrets just so we don't forget uh so optionally you can add link Smith um",
    "start": "229080",
    "end": "235799"
  },
  {
    "text": "I'll probably use it throughout this video to debug if anything goes wrong um and get some observability and tracing on all of our",
    "start": "235799",
    "end": "242400"
  },
  {
    "text": "runs so you're just want to add in your linki Lan Smith API key your project and then of course your open API key for",
    "start": "242400",
    "end": "249239"
  },
  {
    "text": "function calling and all the LM calls we have here so you're going to create aim",
    "start": "249239",
    "end": "254599"
  },
  {
    "text": "file copy this in add it um and then you're set there if you look inside our",
    "start": "254599",
    "end": "260320"
  },
  {
    "text": "package Json start script we're pointing ourin configuration at this file so if",
    "start": "260320",
    "end": "267240"
  },
  {
    "text": "you want to name it something else you just got to update this um and I will do this off camera uh but",
    "start": "267240",
    "end": "273720"
  },
  {
    "text": "to start we're going to want to implement our graph uh this will give us the overall structure of what",
    "start": "273720",
    "end": "281080"
  },
  {
    "text": "the l tool is going to do and then we go through by one and implement the actual functions if we go back quickly to the",
    "start": "281080",
    "end": "287880"
  },
  {
    "text": "read me or I'll just go to the actual image then we can see our graph is going to have one two 3 four five six like seven",
    "start": "287880",
    "end": "296240"
  },
  {
    "text": "nodes um and once we've all those we can go through in imp the actual core",
    "start": "296240",
    "end": "301800"
  },
  {
    "text": "functionality uh so for a lane graph you're going to want to First Define your graph State and then your channels",
    "start": "301800",
    "end": "308639"
  },
  {
    "text": "and this will be the different state that's passed around to each node in L graph we have nodes we have um and then",
    "start": "308639",
    "end": "314520"
  },
  {
    "text": "these nodes all have the same state which is passed through to each one they all have the same input so it'll be this",
    "start": "314520",
    "end": "321120"
  },
  {
    "text": "state graph and then when you actually return data you don't have to return the entire node you can return one element",
    "start": "321120",
    "end": "328680"
  },
  {
    "text": "two elements no elements whatever and then Lane graph will actually see which you which elements you returned it will",
    "start": "328680",
    "end": "335319"
  },
  {
    "text": "then append or replace that in your data in your your state and pass it on to the next",
    "start": "335319",
    "end": "341280"
  },
  {
    "text": "node um so we are going to have an llm which we'll pass",
    "start": "341280",
    "end": "346800"
  },
  {
    "text": "in um when we instantiate the graph you don't need to do this if you're only ever going to use one LM but it allows",
    "start": "346800",
    "end": "353000"
  },
  {
    "text": "for a little more customization so we're just going to call which we're using chat open AI so chat open a",
    "start": "353000",
    "end": "360319"
  },
  {
    "text": "Ai and and we'll give these nice JS St the LM to use for the",
    "start": "360319",
    "end": "367280"
  },
  {
    "text": "graph uh the next we want to use is the or the next state item is the query uh",
    "start": "367280",
    "end": "372560"
  },
  {
    "text": "that obviously is not dynamic or it is dynamic so you can't hard code that so",
    "start": "372560",
    "end": "377639"
  },
  {
    "text": "the query to extract an API for query string um and these are both",
    "start": "377639",
    "end": "385800"
  },
  {
    "text": "required you can't pass a null or anything because we will be passing as the initial values to the graph uh but",
    "start": "385800",
    "end": "392240"
  },
  {
    "text": "for the next uh State element it's going to be the categories so",
    "start": "392240",
    "end": "399400"
  },
  {
    "text": "the relevant API categories can delete that",
    "start": "399400",
    "end": "404840"
  },
  {
    "text": "too and this uh the relevant API categories for the",
    "start": "404840",
    "end": "411800"
  },
  {
    "text": "query categories and this is going to be a array of strings um and each item will",
    "start": "411800",
    "end": "417560"
  },
  {
    "text": "be the name of the category which we can then match to our data set but since we're not instantiating the graph with",
    "start": "417560",
    "end": "423039"
  },
  {
    "text": "this we also have to allow it to be null um this is because the first iteration",
    "start": "423039",
    "end": "428479"
  },
  {
    "text": "or however many iterations until we eventually reach categories this will be null because we want to put any data in for",
    "start": "428479",
    "end": "434039"
  },
  {
    "text": "it all right um the next one we're going want to do is the apis for category so",
    "start": "434039",
    "end": "440280"
  },
  {
    "text": "the relevant apis from the",
    "start": "440280",
    "end": "446919"
  },
  {
    "text": "categories apis and these are not just going to be an array of",
    "start": "446919",
    "end": "452520"
  },
  {
    "text": "strings this repo comes with some types and these types match up exactly to the",
    "start": "452520",
    "end": "458639"
  },
  {
    "text": "schema of our data set so we're going to want to have this",
    "start": "458639",
    "end": "463759"
  },
  {
    "text": "be data set schema and array and of course null because we're not instantiating it um the next is going to",
    "start": "463759",
    "end": "470639"
  },
  {
    "text": "be the uh most relevant API for the query",
    "start": "470639",
    "end": "480199"
  },
  {
    "text": "um and this is after our node to select the API we'll",
    "start": "480199",
    "end": "486039"
  },
  {
    "text": "have one API and that will be the most relevant node according to our program",
    "start": "486039",
    "end": "491479"
  },
  {
    "text": "for the user query so we'll call it best API and that will be a singular data",
    "start": "491479",
    "end": "498960"
  },
  {
    "text": "schema or null of course next is the prams for the API",
    "start": "498960",
    "end": "507159"
  },
  {
    "text": "call um and we're going to extract these from the query and if the user does not provide or if the the query does not",
    "start": "507159",
    "end": "513440"
  },
  {
    "text": "contain all of the required params then we'll go through I'll just leave this open then we'll go through to the human",
    "start": "513440",
    "end": "520200"
  },
  {
    "text": "in the loop section um and actually ask the user for those parameters again so",
    "start": "520200",
    "end": "528200"
  },
  {
    "text": "prams this is going to be um that I think or",
    "start": "528200",
    "end": "534680"
  },
  {
    "text": "null let's disable this for esent um and this is because we don't know what value",
    "start": "534680",
    "end": "540680"
  },
  {
    "text": "well no that can actually always be a string because they're all going to have to get stringified anyway so better to",
    "start": "540680",
    "end": "546079"
  },
  {
    "text": "constrain it to be a string um and this is just an object containing the key and that's the pram name or the name of the",
    "start": "546079",
    "end": "555079"
  },
  {
    "text": "uh data so sorry let me go back these can be prams in the in the the if it's a get",
    "start": "555079",
    "end": "561399"
  },
  {
    "text": "request and you have query prams you could use these or it could be passed into the body of the request um inside",
    "start": "561399",
    "end": "568760"
  },
  {
    "text": "of this node we're going to be doing some mappings and essentially looking in either the body",
    "start": "568760",
    "end": "575399"
  },
  {
    "text": "or the required search prams and then mapping that to the prams here so we don't need a separate one for body and",
    "start": "575399",
    "end": "581200"
  },
  {
    "text": "query prams because they're all going to get mapped through there anyway um and finally we're going to want to",
    "start": "581200",
    "end": "586920"
  },
  {
    "text": "have the API response which is also going to be this will have to be string",
    "start": "586920",
    "end": "595279"
  },
  {
    "text": "any because we don't know beforehand what the API will return",
    "start": "595279",
    "end": "600839"
  },
  {
    "text": "nice once we've defined our graph State we can go and implement the same graph State through our graph channels uh but",
    "start": "600839",
    "end": "606519"
  },
  {
    "text": "this syntax is slightly different uh because it's the channels that L graph is going to be using so the Syntax for",
    "start": "606519",
    "end": "613079"
  },
  {
    "text": "this is the name so LM and then value is null and this going to be null",
    "start": "613079",
    "end": "619680"
  },
  {
    "text": "for all of these because um we're not going to be doing any sort of like",
    "start": "619680",
    "end": "625160"
  },
  {
    "text": "concatenating strings or arrays uh what you could do for this un L graph is if you wanted to say let's say we had the c",
    "start": "625160",
    "end": "632560"
  },
  {
    "text": "or let me Implement all these under me the categories just so we don't get out of order the next one is going to be query once again value is",
    "start": "632560",
    "end": "639880"
  },
  {
    "text": "null um but it Lang graph does we're not going to do this because we're always going to return the categories once and",
    "start": "639880",
    "end": "646399"
  },
  {
    "text": "not touch them again but if we were to say extract some categories go to",
    "start": "646399",
    "end": "652279"
  },
  {
    "text": "another node extract more categories we want to append it instead of having to deal with that appending inside our nodes we can just say value equals a",
    "start": "652279",
    "end": "660440"
  },
  {
    "text": "comma B and these will each be string",
    "start": "660440",
    "end": "666399"
  },
  {
    "text": "arrays I'll fix that in a second yeah so you will each be string arrays and then",
    "start": "666800",
    "end": "672200"
  },
  {
    "text": "you can do a do concat B and Lane graph essentially will take if you return um",
    "start": "672200",
    "end": "679519"
  },
  {
    "text": "an array of strings VI the category key in one of your nodes it will then use",
    "start": "679519",
    "end": "685040"
  },
  {
    "text": "this function it doesn't have to be this but it'll be whatever functions in the value um and pass in the existing and",
    "start": "685040",
    "end": "693160"
  },
  {
    "text": "the new data and here we're concatenating it but you could do",
    "start": "693160",
    "end": "698480"
  },
  {
    "text": "whatever kind of operation you want and it'll return that value to the category State um and let's switch this back to",
    "start": "698480",
    "end": "705560"
  },
  {
    "text": "null for now just because we don't need that but you can also have a default",
    "start": "705560",
    "end": "711040"
  },
  {
    "text": "which means that right now we're going to default to null but you could default to you know an empty array let's say and",
    "start": "711040",
    "end": "718839"
  },
  {
    "text": "then anytime time you reset this say like a checkpoint or on the initialization it's going to call this default function and that will be the",
    "start": "718839",
    "end": "724560"
  },
  {
    "text": "default value for this channel um but for us like I said we're",
    "start": "724560",
    "end": "731839"
  },
  {
    "text": "only ever going to be doing null because we're not doing any sort of operations",
    "start": "731839",
    "end": "738240"
  },
  {
    "text": "in between each nodes each of the nodes apis done best",
    "start": "738240",
    "end": "745040"
  },
  {
    "text": "API done prams done and and response done uh",
    "start": "745040",
    "end": "751720"
  },
  {
    "text": "now that we've implemented our state and our channels we can go",
    "start": "751720",
    "end": "756760"
  },
  {
    "text": "and uh we'll start the create graph function so we can Define our state",
    "start": "756760",
    "end": "762800"
  },
  {
    "text": "graph saying const graph equals new state graph and we're going to import",
    "start": "762800",
    "end": "768959"
  },
  {
    "text": "this from L graph um and this we can pass in a generic for a graph State and",
    "start": "768959",
    "end": "775240"
  },
  {
    "text": "this takes in an object with channels graph channels",
    "start": "775240",
    "end": "780279"
  },
  {
    "text": "um and now we have nuances of State graph which we can start adding our nodes and our edges",
    "start": "780279",
    "end": "785839"
  },
  {
    "text": "to all right to start we're going to Define all of our nodes and then after that we'll add the edges uh to define a",
    "start": "785839",
    "end": "791199"
  },
  {
    "text": "node you just call graph. add node and it takes in two args the",
    "start": "791199",
    "end": "799440"
  },
  {
    "text": "first is a key which is the string and that's how L graph is going to know what node is what and how to route the",
    "start": "799440",
    "end": "804760"
  },
  {
    "text": "different nodes to each other so we'll call this extract category node",
    "start": "804760",
    "end": "810320"
  },
  {
    "text": "extract category node and the second argument is a",
    "start": "810320",
    "end": "816079"
  },
  {
    "text": "function um which is runable like um if you're familiar with the Lang chain expression language or the Lang chain",
    "start": "816079",
    "end": "821920"
  },
  {
    "text": "Library you'll know that pretty much all Lang chain functions and classes do",
    "start": "821920",
    "end": "827120"
  },
  {
    "text": "extend runnables now except for some of the Legacy ones uh so you can pass in a lang chain function or any function that",
    "start": "827120",
    "end": "834240"
  },
  {
    "text": "takes in at least one argument the first argument is going to be the state",
    "start": "834240",
    "end": "840199"
  },
  {
    "text": "right here um and then the second argument is an optional configuration Arc where you can uh do things like call",
    "start": "840199",
    "end": "846240"
  },
  {
    "text": "backs and tracing uh for JS you don't need to pass that through we have some magic going on in the background which",
    "start": "846240",
    "end": "852720"
  },
  {
    "text": "can see if if you're if you do have tracing then you don't need to pass through the the argument anymore um but",
    "start": "852720",
    "end": "858399"
  },
  {
    "text": "since we're not actually going to implement it yet we will just do we'll just Define I guess the outline and then",
    "start": "858399",
    "end": "864759"
  },
  {
    "text": "we'll go back and paste in functions later so it'll be state graph State nope graph state did I",
    "start": "864759",
    "end": "872959"
  },
  {
    "text": "just import something yeah we don't want that so we're we only care about the first ARG which is the state um it's",
    "start": "872959",
    "end": "879079"
  },
  {
    "text": "going to be our graph State we defined here and this is going to be a function",
    "start": "879079",
    "end": "885279"
  },
  {
    "text": "and for now we'll just console log not I can",
    "start": "885279",
    "end": "892279"
  },
  {
    "text": "spell implemented and we'll add the state uh nice we can kind of copy this",
    "start": "892279",
    "end": "899959"
  },
  {
    "text": "outline because the next few will be pretty similar so next we're going to want to define the get all apis in",
    "start": "899959",
    "end": "905839"
  },
  {
    "text": "category node we will call it get API",
    "start": "905839",
    "end": "911519"
  },
  {
    "text": "node does the same thing our key and then our runable like",
    "start": "911519",
    "end": "917759"
  },
  {
    "text": "function uh next we want to have we want to define the select API node so select",
    "start": "917759",
    "end": "923800"
  },
  {
    "text": "API node once again it's the same uh the third is going to be the",
    "start": "923800",
    "end": "929360"
  },
  {
    "text": "extract the parameters node so extract params",
    "start": "929360",
    "end": "935440"
  },
  {
    "text": "node fourth we can see that routes to the verify all parameters are present node which will not be a node but",
    "start": "935440",
    "end": "943480"
  },
  {
    "text": "instead it'll be a conditional Edge so we will go and Implement that in a second um the third node is going to be",
    "start": "943480",
    "end": "949279"
  },
  {
    "text": "the human in the loop oh we can sorry we can see its conditional Edge because we route it it it always it is always",
    "start": "949279",
    "end": "955240"
  },
  {
    "text": "called after the extract API prams node however it can either call the human in",
    "start": "955240",
    "end": "961040"
  },
  {
    "text": "the loop node or the execute execute fetch request um and that's because it's a conditional Edge which based on our",
    "start": "961040",
    "end": "967800"
  },
  {
    "text": "logic we will Implement can route it different directions uh but the next node we're going want to implement is",
    "start": "967800",
    "end": "972839"
  },
  {
    "text": "the human in the loop so we'll call this we'll just call it",
    "start": "972839",
    "end": "978720"
  },
  {
    "text": "human Loop node and finally the last node",
    "start": "978720",
    "end": "984120"
  },
  {
    "text": "we're going to Define is the execute fetch request node so we will call that",
    "start": "984120",
    "end": "990399"
  },
  {
    "text": "execute request node nice uh now that we have all of our",
    "start": "990399",
    "end": "995519"
  },
  {
    "text": "nodes defined we can start to define the different edges um an edge is essentially how you tell L graph which",
    "start": "995519",
    "end": "1002680"
  },
  {
    "text": "node maps to another node or conditional Edge uh so our first node is going or",
    "start": "1002680",
    "end": "1008759"
  },
  {
    "text": "our first Edge is going to be the extract category to get apis in",
    "start": "1008759",
    "end": "1014120"
  },
  {
    "text": "category uh which is these two so we can say graph. add",
    "start": "1014120",
    "end": "1019360"
  },
  {
    "text": "Edge it's almost got it but we don't have a third ARG here um and this is saying that after",
    "start": "1019360",
    "end": "1027360"
  },
  {
    "text": "this node finishes always map it to this or always call this node next um and",
    "start": "1027360",
    "end": "1033839"
  },
  {
    "text": "that's going to be this part and then we can go and implement this again for get apis to select apis so get apis we'll",
    "start": "1033839",
    "end": "1041520"
  },
  {
    "text": "then always call the select API node next the select API node will'll",
    "start": "1041520",
    "end": "1048199"
  },
  {
    "text": "always call the extract API or extract parameters",
    "start": "1048199",
    "end": "1053520"
  },
  {
    "text": "node um and the extract parameters node will always call",
    "start": "1053520",
    "end": "1060080"
  },
  {
    "text": "our conditional Edge so we can now Define our conditional Edge uh this is also going",
    "start": "1060080",
    "end": "1066799"
  },
  {
    "text": "to be a placeholder function that we'll actually Implement when um we Define all",
    "start": "1066799",
    "end": "1072480"
  },
  {
    "text": "of our different edges and nodes so we can say graph. add conditional edges uh",
    "start": "1072480",
    "end": "1077840"
  },
  {
    "text": "the first par going to be the start key and that's which node will always map to",
    "start": "1077840",
    "end": "1083200"
  },
  {
    "text": "this conditional Edge and that will be the extract parameters node so once the extract parameters no finishes it'll map",
    "start": "1083200",
    "end": "1089520"
  },
  {
    "text": "this conditional Edge um and the second is a function which",
    "start": "1089520",
    "end": "1095240"
  },
  {
    "text": "defines um which uh the actual logic behind the conditional Edge so that also takes",
    "start": "1095240",
    "end": "1102919"
  },
  {
    "text": "takes in the state ARG and a config ARG which we don't need here because we're not making any API calls We'll add the",
    "start": "1102919",
    "end": "1110760"
  },
  {
    "text": "log um and then there are two ways you can handle conditional edges as you can see there are also there also is a third",
    "start": "1111080",
    "end": "1118320"
  },
  {
    "text": "argument you can pass for the conditional Edge mapping and this essentially says that this function",
    "start": "1118320",
    "end": "1124440"
  },
  {
    "text": "could return um instead of being a oh yeah so",
    "start": "1124440",
    "end": "1130799"
  },
  {
    "text": "from this function you can either return a string which is a node name and then if it's a node name that exists it'll",
    "start": "1130799",
    "end": "1137640"
  },
  {
    "text": "just map right to that node or this function could return any old string or value and then the third ARG",
    "start": "1137640",
    "end": "1145360"
  },
  {
    "text": "would be an object where we say let's",
    "start": "1145360",
    "end": "1150840"
  },
  {
    "text": "say ER returned should always go here um and this is saying that if this",
    "start": "1150840",
    "end": "1157320"
  },
  {
    "text": "function returns this string then we should always map it to this node and you can have as many of these as you",
    "start": "1157320",
    "end": "1164240"
  },
  {
    "text": "want uh but for us we don't need that because we're just going to return the name name of um the node but it could be",
    "start": "1164240",
    "end": "1172280"
  },
  {
    "text": "a little more declarative to actually Define the conditional Edge mapping as the third parameter all right where were we so now",
    "start": "1172280",
    "end": "1178840"
  },
  {
    "text": "we defin our conditional edge here that's either going to route to human in the loop we can Define this return type",
    "start": "1178840",
    "end": "1185919"
  },
  {
    "text": "actually just so we don't forget so it'll always return either human in the loop or execute",
    "start": "1185919",
    "end": "1193400"
  },
  {
    "text": "request node oops um and it doesn't like that because",
    "start": "1193400",
    "end": "1201320"
  },
  {
    "text": "we're not returning a value obviously so we'll just change this to",
    "start": "1201320",
    "end": "1207679"
  },
  {
    "text": "be throw an error and now it's happy with our return type um because",
    "start": "1210280",
    "end": "1218159"
  },
  {
    "text": "yeah um and we need to join that one AR error nice now we that we've defined",
    "start": "1218159",
    "end": "1223880"
  },
  {
    "text": "this we can go on and Define uh do we need any more",
    "start": "1223880",
    "end": "1229159"
  },
  {
    "text": "actually let's see so extract category to get apis get apis to select apis",
    "start": "1229159",
    "end": "1236320"
  },
  {
    "text": "select apis to extract prams prams to the mapping ah yes um the last thing we",
    "start": "1236320",
    "end": "1243600"
  },
  {
    "text": "need to do is Define our start and end nodes so graph",
    "start": "1243600",
    "end": "1249400"
  },
  {
    "text": "dot what's it called set entry points and that will be the first node we want",
    "start": "1249400",
    "end": "1255280"
  },
  {
    "text": "to be we want to be called when we actually execute our our graph um and",
    "start": "1255280",
    "end": "1260320"
  },
  {
    "text": "then we also want to add a graph. set finish point and this is going to be the know",
    "start": "1260320",
    "end": "1266919"
  },
  {
    "text": "that as soon as this finishes um the graph will end or our our Loop will end",
    "start": "1266919",
    "end": "1274000"
  },
  {
    "text": "uh you can also return a special end variable from any of your",
    "start": "1274000",
    "end": "1279600"
  },
  {
    "text": "nodes which is just this string um and if Lang graph receives this as the",
    "start": "1279600",
    "end": "1285000"
  },
  {
    "text": "return value from any of the nodes it will automatically finish the the it'll it'll it'll it'll exit",
    "start": "1285000",
    "end": "1291440"
  },
  {
    "text": "cleanly nice so now we defined our graph uh once we've done all this we can compile it so we say const app equals",
    "start": "1291440",
    "end": "1300840"
  },
  {
    "text": "graph. compile um and then we can",
    "start": "1300840",
    "end": "1306080"
  },
  {
    "text": "return app so we'll see the return type is preal that's just the name of the uh",
    "start": "1306080",
    "end": "1312000"
  },
  {
    "text": "more lower level uh Lane graph class if we go into",
    "start": "1312000",
    "end": "1317480"
  },
  {
    "text": "our main function we can say const app equals create graph and then",
    "start": "1317480",
    "end": "1324320"
  },
  {
    "text": "we see if we want to execute it we can say const response equals await app.",
    "start": "1324320",
    "end": "1330640"
  },
  {
    "text": "invoke um pral also extends the runnable class you can use the same invoke back",
    "start": "1330640",
    "end": "1336240"
  },
  {
    "text": "stream whatnot that you do in Lan chain um this will take in two args that we",
    "start": "1336240",
    "end": "1342480"
  },
  {
    "text": "defined up here the LM and the query uh so we can also go to find our LM we'll say const LM equals new chat open",
    "start": "1342480",
    "end": "1352039"
  },
  {
    "text": "AI we're going to want to say model name is uh we're going to",
    "start": "1352039",
    "end": "1360080"
  },
  {
    "text": "use use four turbo I never remember the name open AI",
    "start": "1360120",
    "end": "1367760"
  },
  {
    "text": "models we have four turbo preview so our model name is for Turbo",
    "start": "1370760",
    "end": "1376559"
  },
  {
    "text": "preview and then temperature zero of course so then we can pass that",
    "start": "1376559",
    "end": "1382640"
  },
  {
    "text": "in our first ARG and our second ARG is going to be our query I will explain where they came",
    "start": "1382640",
    "end": "1388840"
  },
  {
    "text": "from in a second and what these things are um and then we can see our response after we wait it we could you know",
    "start": "1388840",
    "end": "1395240"
  },
  {
    "text": "console log we're going to have to this later to stream just a little better ux uh but yeah o actually we have this pass",
    "start": "1395240",
    "end": "1402880"
  },
  {
    "text": "it already query string nice um and then we would simply run this file using the RN start command",
    "start": "1402880",
    "end": "1409400"
  },
  {
    "text": "from the backend directory and it on our graph let me close this to go over what",
    "start": "1409400",
    "end": "1415279"
  },
  {
    "text": "these things are essentially from our smaller data set um or sorry from the",
    "start": "1415279",
    "end": "1420600"
  },
  {
    "text": "larger data set from toolbench they also have a file containing um all the apis",
    "start": "1420600",
    "end": "1427120"
  },
  {
    "text": "and then different queries that um I think that was that they came up with and then the apis which if these apis",
    "start": "1427120",
    "end": "1434679"
  },
  {
    "text": "were returned from in their case tool bunch in our case",
    "start": "1434679",
    "end": "1440440"
  },
  {
    "text": "tool class um and then extract category function where the logic will live this",
    "start": "1498399",
    "end": "1504399"
  },
  {
    "text": "is so we can define a tool um which is compatible with Lang chain with a schema name description",
    "start": "1504399",
    "end": "1510799"
  },
  {
    "text": "whatnot and then a function which we can pipe everything through and get our",
    "start": "1510799",
    "end": "1516200"
  },
  {
    "text": "string returned that we want um so this schema is going to",
    "start": "1516200",
    "end": "1522480"
  },
  {
    "text": "be the what is it describe it given a",
    "start": "1522480",
    "end": "1527679"
  },
  {
    "text": "users query um extract the highle category",
    "start": "1527679",
    "end": "1536159"
  },
  {
    "text": "which best represents the query that's good and then we'll name it high",
    "start": "1536159",
    "end": "1543120"
  },
  {
    "text": "level we'll do multiple um it could best fit more than one category and then we",
    "start": "1543120",
    "end": "1549240"
  },
  {
    "text": "want to be able to pull the uh apis from all of those um this so this will be",
    "start": "1549240",
    "end": "1554559"
  },
  {
    "text": "z. array um and inside here we're going to be using this constant highle categories",
    "start": "1554559",
    "end": "1561679"
  },
  {
    "text": "mapping that I've already defined and this is essentially um each one of these",
    "start": "1561679",
    "end": "1566799"
  },
  {
    "text": "values are is an individual category from our data set um and I kind of passed them all to um actually Cloud",
    "start": "1566799",
    "end": "1574480"
  },
  {
    "text": "three Opus and I said given all these categories give me 10 highle categories that map to these lower level categories",
    "start": "1574480",
    "end": "1581919"
  },
  {
    "text": "so we will take highle category mapping um and we'll say it's it's an array of",
    "start": "1581919",
    "end": "1588640"
  },
  {
    "text": "of enums just so the LM always picks always returns if it follows the tool",
    "start": "1588640",
    "end": "1595159"
  },
  {
    "text": "schema properly it will always return um a key to this constant and isn't just",
    "start": "1595159",
    "end": "1600399"
  },
  {
    "text": "making up categories that it thinks fits the query so z. enum and then here we just want the keys",
    "start": "1600399",
    "end": "1608440"
  },
  {
    "text": "object. keys that's right and we're missing that and this type will not match",
    "start": "1608440",
    "end": "1616880"
  },
  {
    "text": "exactly how reading something on stack Overflow it's kind of just a weird JavaScript and then fancy Zod typing",
    "start": "1616880",
    "end": "1623840"
  },
  {
    "text": "thing so we can just cast it uh we'll say as string comma",
    "start": "1623840",
    "end": "1630840"
  },
  {
    "text": "string oh no it didn't work ah because you can't spread a single string there",
    "start": "1630840",
    "end": "1636480"
  },
  {
    "text": "we go and then we need to import this nice now we have our schema um",
    "start": "1636480",
    "end": "1642840"
  },
  {
    "text": "we'll add some more descriptions for these just to give the LM a better idea uh so",
    "start": "1642840",
    "end": "1649080"
  },
  {
    "text": "dot describe the highle categories to",
    "start": "1649080",
    "end": "1654520"
  },
  {
    "text": "extract from the query and then we'll describe this enum as well and we'll say",
    "start": "1654520",
    "end": "1659799"
  },
  {
    "text": "do describe the an enum",
    "start": "1659799",
    "end": "1668440"
  },
  {
    "text": "of all categories which best match the",
    "start": "1668440",
    "end": "1675960"
  },
  {
    "text": "query there we go kind of saying the same thing three times but it'll work uh the name just give it the same name as",
    "start": "1675960",
    "end": "1682840"
  },
  {
    "text": "the class and then description um let's actually just use",
    "start": "1682840",
    "end": "1689120"
  },
  {
    "text": "this and then we don't need to give Thea a highle description",
    "start": "1689120",
    "end": "1695640"
  },
  {
    "text": "so description is given user query extract a high LEL category which best",
    "start": "1695640",
    "end": "1701279"
  },
  {
    "text": "represents it call we're then going to get the input which is the type inferred",
    "start": "1701279",
    "end": "1707799"
  },
  {
    "text": "from our do schema uh we can see that this is just an object containing high level categories and then a string array",
    "start": "1707799",
    "end": "1714720"
  },
  {
    "text": "so we can say const categories mapped equals input.",
    "start": "1714720",
    "end": "1722720"
  },
  {
    "text": "highle categories. map category and then we're going to want",
    "start": "1722720",
    "end": "1730200"
  },
  {
    "text": "to return that um and it doesn't like this we can say",
    "start": "1730200",
    "end": "1737120"
  },
  {
    "text": "as key of type of high Lev category um it thinks that this is just a string",
    "start": "1737120",
    "end": "1743919"
  },
  {
    "text": "where in reality it's going to be a key of this object CU we defined it here",
    "start": "1743919",
    "end": "1750519"
  },
  {
    "text": "uh but we have to cast it because this is just going Zod just return to string for",
    "start": "1750519",
    "end": "1756279"
  },
  {
    "text": "that uh this is a 2d array so we'll flatten it nice and then we can just",
    "start": "1756279",
    "end": "1765200"
  },
  {
    "text": "return we have we the this call method um and the Langan chain tool interface",
    "start": "1765200",
    "end": "1770519"
  },
  {
    "text": "needs a string so we can just return a stringified version and then par out later",
    "start": "1770519",
    "end": "1777200"
  },
  {
    "text": "return json. stringify boom um and now in here we'll Define our",
    "start": "1777640",
    "end": "1786480"
  },
  {
    "text": "state graph State um we're going to want to pull out a couple things we want the",
    "start": "1786480",
    "end": "1792399"
  },
  {
    "text": "LM and the query um and since this is the first node we will only actually",
    "start": "1792399",
    "end": "1797840"
  },
  {
    "text": "have access to these um and now we can start building our LM calls so we're going to say const",
    "start": "1797840",
    "end": "1804640"
  },
  {
    "text": "prompt equals chat prompt template from Lang chain",
    "start": "1804640",
    "end": "1812279"
  },
  {
    "text": "nope chat prompt",
    "start": "1812279",
    "end": "1815960"
  },
  {
    "text": "template uh remember to import from the different or the new Lane chain libraries uh if available or else you'll",
    "start": "1817840",
    "end": "1825120"
  },
  {
    "text": "get a warning saying hey this is depricated in 0.2 we do release it those",
    "start": "1825120",
    "end": "1831279"
  },
  {
    "text": "Imports will be removed so import from core we'll say from",
    "start": "1831279",
    "end": "1836360"
  },
  {
    "text": "messages and we'll give a system message",
    "start": "1836360",
    "end": "1842039"
  },
  {
    "text": "saying uh you are an expert software",
    "start": "1842039",
    "end": "1848760"
  },
  {
    "text": "engineer helping Junior engineer understand the",
    "start": "1848760",
    "end": "1855320"
  },
  {
    "text": "high level category of a query the Junior engineer asks you okay this is not what we want but we'll take the",
    "start": "1855320",
    "end": "1861559"
  },
  {
    "text": "first part help the engineer engineer understand the high level category of a",
    "start": "1861559",
    "end": "1867080"
  },
  {
    "text": "query given their query and a list of",
    "start": "1867080",
    "end": "1873600"
  },
  {
    "text": "high LEL categories we'll say select the highle category which best represents the",
    "start": "1873600",
    "end": "1880679"
  },
  {
    "text": "query um and next we can go and find the human message and this will take this",
    "start": "1880679",
    "end": "1887840"
  },
  {
    "text": "one have two input variables um a list of all the highle categories um and their query so we'll",
    "start": "1887840",
    "end": "1896559"
  },
  {
    "text": "say human query and then a lan chain prompt",
    "start": "1896559",
    "end": "1902399"
  },
  {
    "text": "template variable query which is just a string wrapped in single",
    "start": "1902399",
    "end": "1909399"
  },
  {
    "text": "bracket and then high",
    "start": "1909399",
    "end": "1914760"
  },
  {
    "text": "level categories",
    "start": "1915279",
    "end": "1919919"
  },
  {
    "text": "um high level categories nice uh then we can say we can Define",
    "start": "1920399",
    "end": "1926279"
  },
  {
    "text": "our chains we oh yeah no this is right thank you co-pilot we're going to want to Define our tool first um my",
    "start": "1926279",
    "end": "1932120"
  },
  {
    "text": "instantiating this new class and then we can Define our chain we can say const chain equals prompt. pipe we're going to",
    "start": "1932120",
    "end": "1940360"
  },
  {
    "text": "want to pipe that prompt to the llm and then pipe the response to this llm um",
    "start": "1940360",
    "end": "1949399"
  },
  {
    "text": "to the tool which actually will not work because we're going to want to parse the",
    "start": "1949399",
    "end": "1955360"
  },
  {
    "text": "output of the LM first so we're going to want to define a new model say const",
    "start": "1955360",
    "end": "1961600"
  },
  {
    "text": "model with tools equals lm. with structured",
    "start": "1961600",
    "end": "1969080"
  },
  {
    "text": "output and the first is going to be the tool um and then this will essentially bind this tool and the tool schema and",
    "start": "1969080",
    "end": "1975960"
  },
  {
    "text": "the descriptions we added to the L so when it sends the request open a has the actual tool and Tool scheme available to",
    "start": "1975960",
    "end": "1982840"
  },
  {
    "text": "send that response back and it'll do all the output parsing so all we get is high",
    "start": "1982840",
    "end": "1988919"
  },
  {
    "text": "level categories as the response so now if we pipe that through here then we'll be able to pipe that to",
    "start": "1988919",
    "end": "1995960"
  },
  {
    "text": "Tool which we'll call this function passing in highle categories which we can see is",
    "start": "1995960",
    "end": "2002000"
  },
  {
    "text": "the same type of the input and then this will return a string so this should yep",
    "start": "2002000",
    "end": "2007480"
  },
  {
    "text": "return a string and we're not doing we're not passing any generics so this still thinks it's any um but next we can invoke this we",
    "start": "2007480",
    "end": "2014840"
  },
  {
    "text": "can say const response equals await chain.",
    "start": "2014840",
    "end": "2020519"
  },
  {
    "text": "invoke and this takes in two parameters the query right and the highle categories",
    "start": "2020519",
    "end": "2028679"
  },
  {
    "text": "and this we're going to want to use the high level categories but then we'll also include the lowlevel ones",
    "start": "2028679",
    "end": "2033919"
  },
  {
    "text": "just for some more um detail and to help the LM pick the right one so we'll",
    "start": "2033919",
    "end": "2040159"
  },
  {
    "text": "say object. entries map and then the key value this",
    "start": "2040159",
    "end": "2049599"
  },
  {
    "text": "value should be an array of strings why don't you like",
    "start": "2049599",
    "end": "2055320"
  },
  {
    "text": "that there you go um and then we're just going to return high level",
    "start": "2055320",
    "end": "2063200"
  },
  {
    "text": "category and then key and then",
    "start": "2063200",
    "end": "2068440"
  },
  {
    "text": "the lowl categories beneath that that's probably good just calling them lowle",
    "start": "2068440",
    "end": "2073800"
  },
  {
    "text": "categories like that and then this needs to be a string so we'll have to join them all in the end and we'll join them",
    "start": "2073800",
    "end": "2080839"
  },
  {
    "text": "with two new lines in between each just so it's obvious um which is an individual",
    "start": "2080839",
    "end": "2088200"
  },
  {
    "text": "category why don't you like that expected a comma makes sense all right",
    "start": "2088200",
    "end": "2094679"
  },
  {
    "text": "now we can this response should be a string yep and then we're going to want to parse that to get our categories so",
    "start": "2094679",
    "end": "2100920"
  },
  {
    "text": "we can say const high LEL categories",
    "start": "2100920",
    "end": "2107480"
  },
  {
    "text": "equals ton. parse and then this is going to be what this is any right yes so",
    "start": "2107480",
    "end": "2113800"
  },
  {
    "text": "we'll type it to be string array because we know that's what this is and then finally we can return it to our to Lane",
    "start": "2113800",
    "end": "2121160"
  },
  {
    "text": "graph and we'll say categories highle categories there we go",
    "start": "2121160",
    "end": "2128240"
  },
  {
    "text": "and laying graffle node it just depend this to the state um and pass the next node so now we can go and replace this",
    "start": "2128240",
    "end": "2134960"
  },
  {
    "text": "placeholder function right there let's import it",
    "start": "2134960",
    "end": "2141160"
  },
  {
    "text": "there we go and then if we invoke this and look at our Langan Smith tracing we",
    "start": "2141160",
    "end": "2146760"
  },
  {
    "text": "should see it call this once and return some categories so I'm going to add my",
    "start": "2146760",
    "end": "2152599"
  },
  {
    "text": "environment variables we can come back and run this all right so I've added my environment variable",
    "start": "2152599",
    "end": "2158520"
  },
  {
    "text": "um and I'm going to copy and paste something in from a previous project here uh just to walk right through it",
    "start": "2158520",
    "end": "2164599"
  },
  {
    "text": "we're going to switch this to stream um and then we'll call this stream essentially what this is doing is",
    "start": "2164599",
    "end": "2172200"
  },
  {
    "text": "it's streaming the graph um so instead of us having to wait until the entire graph is finished we can see each node",
    "start": "2172200",
    "end": "2178920"
  },
  {
    "text": "as it gets called um can add some new lines and kind of a divider take the object. keys",
    "start": "2178920",
    "end": "2186960"
  },
  {
    "text": "if the key is end then we know the graph is finished L graph will always return that when it finishes we can log",
    "start": "2186960",
    "end": "2193480"
  },
  {
    "text": "finished assign this final result variable to the uh state that it",
    "start": "2193480",
    "end": "2198920"
  },
  {
    "text": "finished with and if not then we can just console log the first key of the",
    "start": "2198920",
    "end": "2204800"
  },
  {
    "text": "event which will be the current node it's on and like the comment says if you want to see the actual",
    "start": "2204800",
    "end": "2210240"
  },
  {
    "text": "State um of that node on that iteration you can uncombine that line and then beneath that we're saying at the final",
    "start": "2210240",
    "end": "2217319"
  },
  {
    "text": "result is false then obviously it never finished um and if best API is false",
    "start": "2217319",
    "end": "2225160"
  },
  {
    "text": "then no best API found uh we will comment that out",
    "start": "2225160",
    "end": "2230640"
  },
  {
    "text": "because we obviously are not assigning best apis yet and then",
    "start": "2230640",
    "end": "2236040"
  },
  {
    "text": "obviously it won't actually select the API we'll comment that out as well all righty now if we go back here",
    "start": "2236040",
    "end": "2242720"
  },
  {
    "text": "and we navigate to The backend directory call yarn start",
    "start": "2242720",
    "end": "2248880"
  },
  {
    "text": "and it should start to stream no human in the loop is a dead end",
    "start": "2248880",
    "end": "2255000"
  },
  {
    "text": "okay so where is human",
    "start": "2255000",
    "end": "2260880"
  },
  {
    "text": "Loop is not there that's because that obviously won't work so let's go back to",
    "start": "2261000",
    "end": "2268680"
  },
  {
    "text": "our graph and see what we want to do with this human the loop should always map",
    "start": "2268680",
    "end": "2274200"
  },
  {
    "text": "back to here which means that we need to add an edge Ed saying add another",
    "start": "2274200",
    "end": "2281000"
  },
  {
    "text": "conditional Edge saying that whenever human in the loop finishes um we're going to want to call",
    "start": "2281000",
    "end": "2287160"
  },
  {
    "text": "this conditional Edge and we'll pass in the same function here we'll just quickly Define it oh there we go we",
    "start": "2287160",
    "end": "2293560"
  },
  {
    "text": "already had a placeholder so verifying prams um we can copy",
    "start": "2293560",
    "end": "2298839"
  },
  {
    "text": "this this return type",
    "start": "2298839",
    "end": "2304040"
  },
  {
    "text": "here and then we we can replace this and",
    "start": "2304800",
    "end": "2309920"
  },
  {
    "text": "then we just have just have to implement it once um okay so let's quickly go go over",
    "start": "2309920",
    "end": "2315480"
  },
  {
    "text": "we did before we just had this conditional Edge which said that whenever the extract parameters node",
    "start": "2315480",
    "end": "2320599"
  },
  {
    "text": "finished should always map the conditional Edge which could then either map to human the loop or finishing um",
    "start": "2320599",
    "end": "2326640"
  },
  {
    "text": "but what we forgot to do is add the edge for human the loop so before it could",
    "start": "2326640",
    "end": "2331920"
  },
  {
    "text": "map to verifile parameters then go to human Loop but we hadn't added this yet so now we've added a a second",
    "start": "2331920",
    "end": "2338400"
  },
  {
    "text": "conditional Edge which says whenever human Loop finishes we're going to want to call our verify parameters um",
    "start": "2338400",
    "end": "2345280"
  },
  {
    "text": "conditional Edge and then that can once again either call him to the loop or go",
    "start": "2345280",
    "end": "2351040"
  },
  {
    "text": "and execute so if we go back that should work okay I had to clear my console",
    "start": "2351040",
    "end": "2358240"
  },
  {
    "text": "there because I loged my API key but we can see that um essentially what",
    "start": "2358240",
    "end": "2363800"
  },
  {
    "text": "happened we tried to run that is it called this category it executed it and then try to go here and we got not",
    "start": "2363800",
    "end": "2368880"
  },
  {
    "text": "implemented um we're going to update these so it doesn't actually log my API",
    "start": "2368880",
    "end": "2374480"
  },
  {
    "text": "key oh well we're just going to stop logging that um because we don't want API keys to get logged again so if we",
    "start": "2374480",
    "end": "2381359"
  },
  {
    "text": "remove these here we go go back and run it then",
    "start": "2381359",
    "end": "2390680"
  },
  {
    "text": "here we go so stream event and then not implemented um and if we go to Lang",
    "start": "2390680",
    "end": "2396680"
  },
  {
    "text": "Smith",
    "start": "2396680",
    "end": "2399440"
  },
  {
    "text": "apis Tak in the state um what we're going to want to do here is extract the",
    "start": "2458280",
    "end": "2465160"
  },
  {
    "text": "categories from the state uh then we're want to read our data set file so const",
    "start": "2465160",
    "end": "2470960"
  },
  {
    "text": "all data",
    "start": "2470960",
    "end": "2474040"
  },
  {
    "text": "equals going to read the file using FS got to import it from FS um but we're",
    "start": "2476640",
    "end": "2484599"
  },
  {
    "text": "going to use our constant from our constant",
    "start": "2484599",
    "end": "2489960"
  },
  {
    "text": "file so we actually get the right path which we can import and then we'll type this saying",
    "start": "2489960",
    "end": "2497480"
  },
  {
    "text": "data schema array um and then we're going to map through our categories find",
    "start": "2497480",
    "end": "2502599"
  },
  {
    "text": "the actual data set item from there and return it under the",
    "start": "2502599",
    "end": "2509240"
  },
  {
    "text": "API field so we can say const",
    "start": "2509240",
    "end": "2514960"
  },
  {
    "text": "apis equals c atories map see ah We'll add to check to make",
    "start": "2514960",
    "end": "2522240"
  },
  {
    "text": "sure we don't execute this if um categories is false we can say if categories is",
    "start": "2522240",
    "end": "2528599"
  },
  {
    "text": "false or there's no link then throw new error no",
    "start": "2528599",
    "end": "2535240"
  },
  {
    "text": "categories pass to get apis node that's better uh now we can delete this",
    "start": "2535640",
    "end": "2542920"
  },
  {
    "text": "optional and c and then we can do all",
    "start": "2542920",
    "end": "2548240"
  },
  {
    "text": "data. filter d. category",
    "start": "2548240",
    "end": "2554760"
  },
  {
    "text": "name equals c and then flat flat that so we have a single array and then we can",
    "start": "2554760",
    "end": "2561280"
  },
  {
    "text": "just return apis um we'll pass that in",
    "start": "2561280",
    "end": "2567559"
  },
  {
    "text": "there and real quick we can see that this object has let's say video and",
    "start": "2567559",
    "end": "2574520"
  },
  {
    "text": "images if we go to our data set and we search for",
    "start": "2574520",
    "end": "2580040"
  },
  {
    "text": "whoops category name video images there we go so we only",
    "start": "2580040",
    "end": "2586520"
  },
  {
    "text": "have three from this category there's about three from each of the lowlevel",
    "start": "2586520",
    "end": "2591599"
  },
  {
    "text": "categories from the high level categories mapping there we go um and that will",
    "start": "2591599",
    "end": "2598200"
  },
  {
    "text": "return that and next we can go to the select apis node um which will perform",
    "start": "2598200",
    "end": "2605760"
  },
  {
    "text": "another llm call right here so we're going to pass in all the apis which we're able to filter through this node",
    "start": "2605760",
    "end": "2612920"
  },
  {
    "text": "pass to an LM have the LM select what it deems to be the best API based on the query return that API",
    "start": "2612920",
    "end": "2621000"
  },
  {
    "text": "under best API so we can close this and we're going",
    "start": "2621000",
    "end": "2626160"
  },
  {
    "text": "to want to go to the select API um this already has this class kind",
    "start": "2626160",
    "end": "2632040"
  },
  {
    "text": "of built out essentially what this is is the same as our extract category tool it extends",
    "start": "2632040",
    "end": "2639640"
  },
  {
    "text": "structure tool has the schema name description and this call method um but here we're going to want",
    "start": "2639640",
    "end": "2646160"
  },
  {
    "text": "to define a Constructor because you can see our description and schema is not",
    "start": "2646160",
    "end": "2651319"
  },
  {
    "text": "actually defined um but the type of the schema is so we'll",
    "start": "2651319",
    "end": "2658000"
  },
  {
    "text": "say Constructor and then we'll super real",
    "start": "2658000",
    "end": "2663319"
  },
  {
    "text": "quick okay so we can see that we want to take in the previous apis data set schema",
    "start": "2663319",
    "end": "2671280"
  },
  {
    "text": "here um and then we're going to want to call this function to create our",
    "start": "2671280",
    "end": "2676520"
  },
  {
    "text": "description and schema um the reason we're doing this dynamically is because the description we want the description",
    "start": "2676520",
    "end": "2683200"
  },
  {
    "text": "to contain all the apis and the API details and not just say pick the best",
    "start": "2683200",
    "end": "2688400"
  },
  {
    "text": "API um and this way the LM is more context on what API I should be",
    "start": "2688400",
    "end": "2693839"
  },
  {
    "text": "picking so this will take in two arguments so",
    "start": "2693839",
    "end": "2701280"
  },
  {
    "text": "apis T schema and query string which reminds me I actually need that there as",
    "start": "2701280",
    "end": "2707800"
  },
  {
    "text": "well all right now that we have this we can start to craft our prompts we can say const or sorry our description",
    "start": "2707800",
    "end": "2717079"
  },
  {
    "text": "con I can type again description equals given the",
    "start": "2717079",
    "end": "2724720"
  },
  {
    "text": "following query by user select the API which best",
    "start": "2724720",
    "end": "2734520"
  },
  {
    "text": "which will best serve the query and then new",
    "start": "2734680",
    "end": "2743520"
  },
  {
    "text": "line query query another new line",
    "start": "2743520",
    "end": "2750680"
  },
  {
    "text": "apis um and then this will be apis. map here we go API",
    "start": "2750680",
    "end": "2759040"
  },
  {
    "text": "dot we're going to want to get the tool name from this so API is the tool name",
    "start": "2759720",
    "end": "2768359"
  },
  {
    "text": "the actual wait a second did I do this",
    "start": "2768359",
    "end": "2775680"
  },
  {
    "text": "properly yeah so that's going to return the individual apis this should return",
    "start": "2775760",
    "end": "2781079"
  },
  {
    "text": "if it returns if we get one category from this array and not multiple we should get two to three that's going",
    "start": "2781079",
    "end": "2787160"
  },
  {
    "text": "return the into individual apis here we're going to want we'll just say tool",
    "start": "2787160",
    "end": "2792599"
  },
  {
    "text": "name API name is going to be the api.",
    "start": "2792599",
    "end": "2798319"
  },
  {
    "text": "API name this is sometimes kind of funky it's not always like if we look in the",
    "start": "2798319",
    "end": "2804359"
  },
  {
    "text": "data set sometimes it's a path like a uh",
    "start": "2804359",
    "end": "2809559"
  },
  {
    "text": "see oh that's an interesting one to pause on",
    "start": "2809559",
    "end": "2814680"
  },
  {
    "text": "um go all the way up yeah so we can see here API name is like that but the tool",
    "start": "2814680",
    "end": "2820160"
  },
  {
    "text": "name makes a little bit more sense uh so we'll just ignore that we're just going to want to pass in the",
    "start": "2820160",
    "end": "2825440"
  },
  {
    "text": "parameters um category tool API name description parameters and all that so",
    "start": "2825440",
    "end": "2832720"
  },
  {
    "text": "we will say tool name or we'll do highle category so well no sorry they're all",
    "start": "2832720",
    "end": "2837760"
  },
  {
    "text": "going to be the same category we don't need that tool name API name",
    "start": "2837760",
    "end": "2844359"
  },
  {
    "text": "comma description API API description I think is it's not",
    "start": "2844359",
    "end": "2849960"
  },
  {
    "text": "typed why am I not getting autocomplete there we go API description and then",
    "start": "2849960",
    "end": "2856960"
  },
  {
    "text": "finally parameters and then this is going to be an array where where we will",
    "start": "2857440",
    "end": "2864119"
  },
  {
    "text": "take API dot required",
    "start": "2864119",
    "end": "2869960"
  },
  {
    "text": "parameters and Pi do optional",
    "start": "2869960",
    "end": "2875240"
  },
  {
    "text": "parameters spread that just so it's all one big array llm doesn't need to know what's optional what's required right",
    "start": "2875240",
    "end": "2881440"
  },
  {
    "text": "now um but it is help helpful for it to know the parameters which it takes in because then if the user query contains",
    "start": "2881440",
    "end": "2887720"
  },
  {
    "text": "some of that um it can better match the API and then we'll map over this map P",
    "start": "2887720",
    "end": "2894640"
  },
  {
    "text": "parameters and then we will just",
    "start": "2894640",
    "end": "2900119"
  },
  {
    "text": "take the name and description so we'll say name",
    "start": "2900119",
    "end": "2908800"
  },
  {
    "text": "p. name name and then",
    "start": "2908800",
    "end": "2915599"
  },
  {
    "text": "description P do description um and then we'll join them all again where does",
    "start": "2915599",
    "end": "2923640"
  },
  {
    "text": "that end oh man okay there there open close open open and then here we go join",
    "start": "2923640",
    "end": "2931960"
  },
  {
    "text": "um we'll give it two new lines um there there we go and just make",
    "start": "2931960",
    "end": "2938440"
  },
  {
    "text": "this a little bit easier to read we'll put these all on new lines as well which means that we're just going",
    "start": "2938440",
    "end": "2945319"
  },
  {
    "text": "to want to have this be a single new line and then this will be double new",
    "start": "2945319",
    "end": "2953960"
  },
  {
    "text": "lines with some dividers in between the LM NOS there we go so now we have the query",
    "start": "2954200",
    "end": "2961760"
  },
  {
    "text": "which is going to be passed in there um sorry like this it's not",
    "start": "2961760",
    "end": "2968119"
  },
  {
    "text": "prompt then the apis and we're going to map over all the apis that are passed in and then finally we",
    "start": "2968119",
    "end": "2974400"
  },
  {
    "text": "can return description so now we can say this do",
    "start": "2974400",
    "end": "2980359"
  },
  {
    "text": "description equals select API tool. create description pass the API passing the",
    "start": "2980359",
    "end": "2985440"
  },
  {
    "text": "query it'll then set the description to be this nice formatted description um and then schema will be",
    "start": "2985440",
    "end": "2993440"
  },
  {
    "text": "this. schema um and we already defined this object object it's going to",
    "start": "2993440",
    "end": "2999760"
  },
  {
    "text": "be um the an object containing the API which is what we want the response to be",
    "start": "2999760",
    "end": "3006559"
  },
  {
    "text": "um and then the API will be an enum with the API name so equals z do kind of",
    "start": "3006559",
    "end": "3013280"
  },
  {
    "text": "similar to how we did this where we have an array and an enums so z. object API",
    "start": "3013280",
    "end": "3021480"
  },
  {
    "text": "z. enum apis. map API name and then",
    "start": "3021480",
    "end": "3027280"
  },
  {
    "text": "describe we can see describe an enm of uh we'll edit this to",
    "start": "3027280",
    "end": "3033400"
  },
  {
    "text": "be the name of the",
    "start": "3033400",
    "end": "3038440"
  },
  {
    "text": "API let's make sure we get API name just so it knows that that maps that that maps to that the name of the API which",
    "start": "3038440",
    "end": "3046960"
  },
  {
    "text": "best matches the query there we go now we've set our",
    "start": "3046960",
    "end": "3052240"
  },
  {
    "text": "schema we've set our description name is going to be the same um and I don't",
    "start": "3052240",
    "end": "3058319"
  },
  {
    "text": "think uh we do need this because we'll be using it in our call function so now we're going to sign apis equals apis",
    "start": "3058319",
    "end": "3066240"
  },
  {
    "text": "boom now we've defined our Constructor and our static helper function to um",
    "start": "3066240",
    "end": "3072960"
  },
  {
    "text": "initialize the tool with the description and the schema containing a dynamic",
    "start": "3072960",
    "end": "3078040"
  },
  {
    "text": "description and obviously Dynamic schema of all the different API names that were return from the last node um and now we",
    "start": "3078040",
    "end": "3084440"
  },
  {
    "text": "can implement this call function or this method what this is going to do is the llm is going to take in this tool it's going to",
    "start": "3084440",
    "end": "3091520"
  },
  {
    "text": "select the API and then we're going to want to map that to the API that's on the Class Property um and return that ID",
    "start": "3091520",
    "end": "3099440"
  },
  {
    "text": "and then we can map to it or I just we just return the whole thing and then just un stringify it so we'll say const",
    "start": "3099440",
    "end": "3106680"
  },
  {
    "text": "API and we'll rename that to API name equals the input and then we can find",
    "start": "3106680",
    "end": "3112000"
  },
  {
    "text": "the API so we'll say const best API equals this. apis do",
    "start": "3112000",
    "end": "3121160"
  },
  {
    "text": "find a. API name equals API name and then we'll say if this is false then",
    "start": "3121160",
    "end": "3128440"
  },
  {
    "text": "obviously something went wrong so throw new error API name is not found in list",
    "start": "3128440",
    "end": "3133520"
  },
  {
    "text": "of API names and we'll actually add the API names here just so it's easy to tell in the error and then we can",
    "start": "3133520",
    "end": "3141280"
  },
  {
    "text": "return json. stringify base API nice and then",
    "start": "3141280",
    "end": "3147000"
  },
  {
    "text": "we'll just do the same thing we did here or we'll parse it out um we can honestly",
    "start": "3147000",
    "end": "3152319"
  },
  {
    "text": "just copy most of this CU it's all somewhat the same so we'll copy",
    "start": "3152319",
    "end": "3158720"
  },
  {
    "text": "it paste it here but we're going need to switch up a few things one obviously get",
    "start": "3158720",
    "end": "3163839"
  },
  {
    "text": "the state in there graph State add our missing",
    "start": "3163839",
    "end": "3169400"
  },
  {
    "text": "Imports rename our tool to be right tool here and instantiate that",
    "start": "3169400",
    "end": "3176400"
  },
  {
    "text": "with the apis and the query so we're going to want to say what was the name",
    "start": "3176400",
    "end": "3181440"
  },
  {
    "text": "of it it was just apis nice easy apis pass it in and query um and here we're",
    "start": "3181440",
    "end": "3189359"
  },
  {
    "text": "going to want to make sure that apis is true and if it's false that means the previous node messed up so we'll just throw an error so we'll say f",
    "start": "3189359",
    "end": "3197240"
  },
  {
    "text": "apis equals null or API that link is zero and throw an",
    "start": "3197240",
    "end": "3205400"
  },
  {
    "text": "error no API Keys no apis pass to select API node nice that's",
    "start": "3205400",
    "end": "3217079"
  },
  {
    "text": "descriptive uh we'll edit this in a second but we've defined our tool our structured output with our tool and it's",
    "start": "3217079",
    "end": "3223640"
  },
  {
    "text": "going to contain the dynamic schema and description chain",
    "start": "3223640",
    "end": "3229480"
  },
  {
    "text": "response um we will add this later we're definitely going to want to have the",
    "start": "3229480",
    "end": "3234720"
  },
  {
    "text": "query in there we're not sure what else we want and then we'll say best API is",
    "start": "3234720",
    "end": "3241359"
  },
  {
    "text": "going to be a single instance of data set schema and then parse the response",
    "start": "3241359",
    "end": "3248079"
  },
  {
    "text": "and then we can just return it here we go all right to",
    "start": "3248079",
    "end": "3254640"
  },
  {
    "text": "do the prompt we're going want have a system prompt and we'll say you're an expert software engineer helping a",
    "start": "3254640",
    "end": "3260880"
  },
  {
    "text": "junior engineer select the best API for their",
    "start": "3260880",
    "end": "3269680"
  },
  {
    "text": "question given their or we'll say query I guess given their query and a list",
    "start": "3269680",
    "end": "3277400"
  },
  {
    "text": "of possible apis select",
    "start": "3277400",
    "end": "3283520"
  },
  {
    "text": "the API which will best",
    "start": "3283520",
    "end": "3290760"
  },
  {
    "text": "serve the their question nice and then",
    "start": "3291559",
    "end": "3297119"
  },
  {
    "text": "or their query sorry we'll pass in the query um and then we'll pass we don't",
    "start": "3297119",
    "end": "3302200"
  },
  {
    "text": "need to pass in the apis because they're already in the Tool uh given their query we'll modify",
    "start": "3302200",
    "end": "3309960"
  },
  {
    "text": "this prompt so the LM has a little more of a pointer towards using the tool so given their",
    "start": "3309960",
    "end": "3316200"
  },
  {
    "text": "query use the where's the",
    "start": "3316200",
    "end": "3321480"
  },
  {
    "text": "name we can delete that too um",
    "start": "3321480",
    "end": "3326960"
  },
  {
    "text": "use the select API tool to select the best API for the",
    "start": "3326960",
    "end": "3335920"
  },
  {
    "text": "query there we go let's go over one more time you're you're an expert software engineer helping a junior engineer",
    "start": "3335920",
    "end": "3341359"
  },
  {
    "text": "select the best API for their query given their query use this tool to select the best API passing the query",
    "start": "3341359",
    "end": "3349200"
  },
  {
    "text": "there we go now we only need query there we parse it chain together like we did before and there we go we can",
    "start": "3349200",
    "end": "3357000"
  },
  {
    "text": "we wanted this we delete that now let's go back let's add this to our",
    "start": "3357000",
    "end": "3363119"
  },
  {
    "text": "graph like so and import it nice now we",
    "start": "3363119",
    "end": "3368760"
  },
  {
    "text": "just need to implement the extract Rams human in the loop request and then we're",
    "start": "3368760",
    "end": "3376400"
  },
  {
    "text": "done all right for the extract parameters node um it's a little simpler than the other ones because we don't",
    "start": "3376400",
    "end": "3381799"
  },
  {
    "text": "need to do any parsing or filtering or finding with the tool so we can just Define a prompt Ashima chain it all",
    "start": "3381799",
    "end": "3388640"
  },
  {
    "text": "together send it in get the response so we'll say first We'll add the state we'll",
    "start": "3388640",
    "end": "3395160"
  },
  {
    "text": "State graph State um in here we're going to want once again the",
    "start": "3395160",
    "end": "3401720"
  },
  {
    "text": "LM query um and the best API just like",
    "start": "3401720",
    "end": "3408319"
  },
  {
    "text": "that um and next we're going to define the prompt and we'll say const prompt equals chat prompt template from",
    "start": "3408319",
    "end": "3418480"
  },
  {
    "text": "messages oh why they do value again okay chat prompt template",
    "start": "3418480",
    "end": "3425880"
  },
  {
    "text": "template prompts there we go from messages we'll add a system message",
    "start": "3425880",
    "end": "3432760"
  },
  {
    "text": "saying you are an expert software",
    "start": "3433280",
    "end": "3439760"
  },
  {
    "text": "engineer you're provided with a list",
    "start": "3441280",
    "end": "3448318"
  },
  {
    "text": "of required and optional",
    "start": "3448520",
    "end": "3456160"
  },
  {
    "text": "parameters parameters for an API along with a",
    "start": "3456160",
    "end": "3463480"
  },
  {
    "text": "users query given the query and",
    "start": "3463480",
    "end": "3472839"
  },
  {
    "text": "parameters we'll just say use the extract prams tool to extract the",
    "start": "3473599",
    "end": "3483599"
  },
  {
    "text": "parameters from the query and then we'll say if the query",
    "start": "3483599",
    "end": "3489839"
  },
  {
    "text": "does not contain any of the parameters well you just return an",
    "start": "3489839",
    "end": "3497559"
  },
  {
    "text": "empty object there we go and then the",
    "start": "3497559",
    "end": "3502680"
  },
  {
    "text": "human human will say query query we'll change this to be that",
    "start": "3504119",
    "end": "3512559"
  },
  {
    "text": "so we can do new lines cleanly and then required parameters",
    "start": "3512559",
    "end": "3519280"
  },
  {
    "text": "required prams optional parameters optional prams",
    "start": "3519280",
    "end": "3526839"
  },
  {
    "text": "um let's see you're an exper software engineer provided with a list of optional paramet We'll add this to the",
    "start": "3527839",
    "end": "3533920"
  },
  {
    "text": "system prompt",
    "start": "3533920",
    "end": "3538240"
  },
  {
    "text": "required parameters optional parameters query there we go next we can def find our schemas",
    "start": "3539720",
    "end": "3546319"
  },
  {
    "text": "we'll say const schema equals z do",
    "start": "3546319",
    "end": "3553079"
  },
  {
    "text": "object and then prams Z do yeah what is going to be z. record",
    "start": "3553079",
    "end": "3559680"
  },
  {
    "text": "string describe the parameters extracted from the",
    "start": "3559680",
    "end": "3564920"
  },
  {
    "text": "query that looks good to me um next we can pass yeah so we'll use the withd",
    "start": "3565160",
    "end": "3571960"
  },
  {
    "text": "structured output method so we can just pass in our schema um we'll add an extra",
    "start": "3571960",
    "end": "3577079"
  },
  {
    "text": "description here saying describe the parameters from the query",
    "start": "3577079",
    "end": "3584079"
  },
  {
    "text": "the exra yeah that's good to me and then we'll say const model with tools",
    "start": "3584079",
    "end": "3590599"
  },
  {
    "text": "equals lm. with struct nope with struct",
    "start": "3590599",
    "end": "3596359"
  },
  {
    "text": "output scha and then this should take in a second",
    "start": "3596359",
    "end": "3602119"
  },
  {
    "text": "ARG where are you there you go yep",
    "start": "3602119",
    "end": "3607160"
  },
  {
    "text": "config um containing the name and we will make that name extract",
    "start": "3607160",
    "end": "3615880"
  },
  {
    "text": "parameters there we go and now we can change these all together and execute the call so we'll say const chain equals",
    "start": "3615880",
    "end": "3623000"
  },
  {
    "text": "prompt. pipe model with tools um we don't need to pipe an output",
    "start": "3623000",
    "end": "3628480"
  },
  {
    "text": "parser because with structured output returns a runnable which parses it for us and that's why we can see that this",
    "start": "3628480",
    "end": "3634559"
  },
  {
    "text": "is going to be a object um and then this chain we can",
    "start": "3634559",
    "end": "3639640"
  },
  {
    "text": "invoke it and get the response we'll say con prams equals weight chain.",
    "start": "3639640",
    "end": "3646160"
  },
  {
    "text": "invoke and this takes in a query and then also required",
    "start": "3646160",
    "end": "3653000"
  },
  {
    "text": "prams and optional prams and now we can build here so we'll",
    "start": "3653000",
    "end": "3658319"
  },
  {
    "text": "say cons required prams equals best api. required prams map name",
    "start": "3658319",
    "end": "3666559"
  },
  {
    "text": "description there we go let's see is there anything else we want from this name",
    "start": "3666559",
    "end": "3673160"
  },
  {
    "text": "description we add type as",
    "start": "3673160",
    "end": "3677038"
  },
  {
    "text": "well type type whoops p. type all right and",
    "start": "3678599",
    "end": "3686240"
  },
  {
    "text": "now we can do the same for our optional",
    "start": "3686240",
    "end": "3692280"
  },
  {
    "text": "parameters and delete that delete that and now this should just be an object",
    "start": "3693520",
    "end": "3699640"
  },
  {
    "text": "like that and I believe we can just return because our state has a",
    "start": "3699640",
    "end": "3706920"
  },
  {
    "text": "prams field there we go now that we' finish implenting this we can delete that and we can go",
    "start": "3706920",
    "end": "3714480"
  },
  {
    "text": "and add it to our graph like so and import there we go now if we go",
    "start": "3714480",
    "end": "3722680"
  },
  {
    "text": "back here we can see that we've implemented our extract category node we've implemented our get API from",
    "start": "3722680",
    "end": "3728000"
  },
  {
    "text": "category our select API which is going to pick one API to many and then we're",
    "start": "3728000",
    "end": "3733119"
  },
  {
    "text": "going to extract the query prams next we're going to need to implement the uh verify all prams are present conditional",
    "start": "3733119",
    "end": "3739799"
  },
  {
    "text": "Edge um and if all of them are present we can send it right over to the execute",
    "start": "3739799",
    "end": "3744839"
  },
  {
    "text": "fetch request and if they're not all present then we can send it to the human",
    "start": "3744839",
    "end": "3750079"
  },
  {
    "text": "Loop which will allow the user to type in the missing prams they've had Loop that through until we have them",
    "start": "3750079",
    "end": "3755880"
  },
  {
    "text": "all and then we can execute the request uh so next we're going to want to implement the human in the loop node",
    "start": "3755880",
    "end": "3763039"
  },
  {
    "text": "which will be the request parameters uh this is going to have three functions read user input parse user input and",
    "start": "3763039",
    "end": "3770240"
  },
  {
    "text": "then the function which is actually um which is actually called by line",
    "start": "3770240",
    "end": "3776599"
  },
  {
    "text": "graph so real quick I guess we can just do",
    "start": "3776599",
    "end": "3781640"
  },
  {
    "text": "that and then add it to human in the loop like so",
    "start": "3781640",
    "end": "3788880"
  },
  {
    "text": "import there we go um for we're going for the read user",
    "start": "3788880",
    "end": "3794079"
  },
  {
    "text": "input we're going to be using a library called read line so we can say import Star as read",
    "start": "3794079",
    "end": "3802160"
  },
  {
    "text": "line from read line we can add this",
    "start": "3802160",
    "end": "3807960"
  },
  {
    "text": "here data set parameters array um and then we're going to use readline to allow the user to type in uh",
    "start": "3807960",
    "end": "3815799"
  },
  {
    "text": "their missing parameters this is going to be we're going to give them an example on the format they should add so",
    "start": "3815799",
    "end": "3822960"
  },
  {
    "text": "we'll say const prams format equals name",
    "start": "3822960",
    "end": "3830760"
  },
  {
    "text": "comma value and then the separator will make it three colons name value",
    "start": "3830760",
    "end": "3836680"
  },
  {
    "text": "um so then if they're adding values it'll essentially be like this they'll say let's say we're missing a city",
    "start": "3836680",
    "end": "3846839"
  },
  {
    "text": "comma SF missing another one state",
    "start": "3846839",
    "end": "3852039"
  },
  {
    "text": "comma California they would enter um and that's how we'll parse it",
    "start": "3852039",
    "end": "3857160"
  },
  {
    "text": "out there we go all right now to implement the read user interface function we can use read",
    "start": "3857160",
    "end": "3865000"
  },
  {
    "text": "line and we can say const RL equals read line. create",
    "start": "3865000",
    "end": "3873319"
  },
  {
    "text": "interface oops oh my goodness here we go input process.st",
    "start": "3873319",
    "end": "3882279"
  },
  {
    "text": "standard in output process.st standardout nice um and now we're going to want to construct a actually I could",
    "start": "3882279",
    "end": "3889359"
  },
  {
    "text": "use that here we go but this is going to be the",
    "start": "3889359",
    "end": "3894839"
  },
  {
    "text": "const question equals",
    "start": "3894839",
    "end": "3899559"
  },
  {
    "text": "that there we go um and then missing prompts or Miss we're going to want to",
    "start": "3901640",
    "end": "3906680"
  },
  {
    "text": "add a string with the missing prams we'll say con",
    "start": "3906680",
    "end": "3911839"
  },
  {
    "text": "missing pram string prams do map name",
    "start": "3911839",
    "end": "3919160"
  },
  {
    "text": "comma description and then we'll join that with some nice formatting this should be",
    "start": "3919160",
    "end": "3926160"
  },
  {
    "text": "a string and then we can say um what is this we'll say Lang",
    "start": "3926160",
    "end": "3934079"
  },
  {
    "text": "tool couldn't find all the required prams for",
    "start": "3934079",
    "end": "3944119"
  },
  {
    "text": "the API new line missing the missing prams",
    "start": "3944119",
    "end": "3952680"
  },
  {
    "text": "that's cleaner please provide the missing prams in the following format there we go um",
    "start": "3952680",
    "end": "3959119"
  },
  {
    "text": "and now this should this is a promise that will resolve once the user enters the prams hits enter and it'll return a",
    "start": "3959119",
    "end": "3966520"
  },
  {
    "text": "string um so here we're going to want to say",
    "start": "3966520",
    "end": "3974160"
  },
  {
    "text": "const uh best API equals State we do one before we need another",
    "start": "3974160",
    "end": "3980720"
  },
  {
    "text": "so human the loop which is what we're doing right now",
    "start": "3980720",
    "end": "3986240"
  },
  {
    "text": "extract pams extract pams will always map to verify",
    "start": "3986240",
    "end": "3991720"
  },
  {
    "text": "pams verify pams will then either map to human in the loop uh yeah",
    "start": "3991720",
    "end": "3998680"
  },
  {
    "text": "so here's we'll Implement verify prams first that makes more sense um so for verify",
    "start": "3998680",
    "end": "4007359"
  },
  {
    "text": "prams graph State we're going to want them justra the best apis we'll say",
    "start": "4007359",
    "end": "4013119"
  },
  {
    "text": "const best API and prams from",
    "start": "4013119",
    "end": "4019559"
  },
  {
    "text": "State um these prams will hopefully all be populated from the extract parameters",
    "start": "4019559",
    "end": "4026839"
  },
  {
    "text": "but if they're not we're going to need to find the missing ones so we'll say const required prams Keys equals best",
    "start": "4026839",
    "end": "4036640"
  },
  {
    "text": "api. required parameters ah well first yeah if best API is false we",
    "start": "4036640",
    "end": "4044400"
  },
  {
    "text": "throw that's not optional so now oops best api. required parameters do M or",
    "start": "4044400",
    "end": "4051839"
  },
  {
    "text": "much easier object. keys there we go and now",
    "start": "4051839",
    "end": "4060279"
  },
  {
    "text": "if you can do this before actually yeah so right off the bat if prams are false then we're just going to want to",
    "start": "4060279",
    "end": "4067000"
  },
  {
    "text": "return human in the loop because we have no prams so",
    "start": "4067000",
    "end": "4072000"
  },
  {
    "text": "return human in the loop and now we'll actually add a UIL for figuring out what",
    "start": "4072119",
    "end": "4077240"
  },
  {
    "text": "prams are missing so con find missing prams",
    "start": "4077240",
    "end": "4084160"
  },
  {
    "text": "equals required prams um and we'll just make this a",
    "start": "4084160",
    "end": "4091000"
  },
  {
    "text": "string array and then existing params or extracted I",
    "start": "4091000",
    "end": "4098920"
  },
  {
    "text": "guess that's probably better and that'll also be a string array um and now given the required",
    "start": "4098920",
    "end": "4105838"
  },
  {
    "text": "parameters and the extracted params we can map over so let's see const missing equals required params",
    "start": "4105839",
    "end": "4113400"
  },
  {
    "text": "do map p and then map over the extracted params",
    "start": "4113400",
    "end": "4119640"
  },
  {
    "text": "to see if it's in there so oh this will be filter actually sorry not map extracted",
    "start": "4119640",
    "end": "4127440"
  },
  {
    "text": "prams do sum E E equals p uh we update this to be",
    "start": "4127440",
    "end": "4138440"
  },
  {
    "text": "required it's a little bit more declarative and then",
    "start": "4138440",
    "end": "4144960"
  },
  {
    "text": "extracted there we go so map over all the required filter for prams which are",
    "start": "4144960",
    "end": "4152120"
  },
  {
    "text": "not in extracted prams um and we want to do do suum and not do includes because",
    "start": "4152120",
    "end": "4157880"
  },
  {
    "text": "if we do do includes um and the required parameter is a",
    "start": "4157880",
    "end": "4163318"
  },
  {
    "text": "string which has so if our extracted prams contain a string that is a subset",
    "start": "4163319",
    "end": "4170000"
  },
  {
    "text": "of the required prams then technically they would be included but it's not the actual one so if we do sum and do a",
    "start": "4170000",
    "end": "4175520"
  },
  {
    "text": "strict equals that verifies that we always get the missing prams that'll return to string and then we can just",
    "start": "4175520",
    "end": "4181960"
  },
  {
    "text": "return this so now we can say con to required prams keys and then",
    "start": "4181960",
    "end": "4190640"
  },
  {
    "text": "const extracted Brams keys object. keys extracted Brams and then now const",
    "start": "4190640",
    "end": "4199360"
  },
  {
    "text": "missing Keys equals find missing pams required prams extracted",
    "start": "4199360",
    "end": "4206480"
  },
  {
    "text": "prams here we can say if do length is",
    "start": "4206480",
    "end": "4211800"
  },
  {
    "text": "greater than zero human in the loop and else we have all our",
    "start": "4211800",
    "end": "4217520"
  },
  {
    "text": "parameters so now that'll work and now we know that um let's export this we can use it",
    "start": "4217520",
    "end": "4226800"
  },
  {
    "text": "and we'll actually put it into a util file make it a little cleaner",
    "start": "4226800",
    "end": "4233360"
  },
  {
    "text": ".ts utils there we go let's import it okay",
    "start": "4233360",
    "end": "4240840"
  },
  {
    "text": "so now our verified prams will always be called after our extract prams um most",
    "start": "4240840",
    "end": "4246600"
  },
  {
    "text": "likely we'll be missing a parameter we'll have to do human the loop we can then inside our human Loop use that UIL",
    "start": "4246600",
    "end": "4254440"
  },
  {
    "text": "function to find the names of all the missing parameters pass that through to our readline function get it from the",
    "start": "4254440",
    "end": "4260280"
  },
  {
    "text": "user parse it out send it back so now const or once again if this is false if",
    "start": "4260280",
    "end": "4268040"
  },
  {
    "text": "PR is false or best API is false no best API found that's good enough I guess",
    "start": "4268040",
    "end": "4274239"
  },
  {
    "text": "const missing prams equals find missing prams and then const required pram Keys",
    "start": "4274239",
    "end": "4283679"
  },
  {
    "text": "best api. required parameter keys cons extracted Ram",
    "start": "4283679",
    "end": "4291000"
  },
  {
    "text": "Keys oops we'll do",
    "start": "4291199",
    "end": "4297159"
  },
  {
    "text": "that and then this or that there we",
    "start": "4297159",
    "end": "4303760"
  },
  {
    "text": "go now we have all these and then we're going to want to map it back to um the",
    "start": "4303760",
    "end": "4309719"
  },
  {
    "text": "actual parameters with the sorry the data set data set parameters here so that we can get the name descriptions so",
    "start": "4309719",
    "end": "4316760"
  },
  {
    "text": "now we'll say const missing",
    "start": "4316760",
    "end": "4322480"
  },
  {
    "text": "prams schema schemas that'll work I guess equals",
    "start": "4322480",
    "end": "4327639"
  },
  {
    "text": "missing prams do map P or we'll",
    "start": "4327639",
    "end": "4332719"
  },
  {
    "text": "say missing pram name key key is better and then we can",
    "start": "4332719",
    "end": "4341880"
  },
  {
    "text": "find it inside of here so so best API do",
    "start": "4341880",
    "end": "4347600"
  },
  {
    "text": "required parameters. find required pram and then we can say",
    "start": "4347600",
    "end": "4356159"
  },
  {
    "text": "if ah this is not going to work I messed this up object. Keys is not what we",
    "start": "4356159",
    "end": "4365159"
  },
  {
    "text": "want we want just to map and then get the",
    "start": "4365159",
    "end": "4373920"
  },
  {
    "text": "name and then we don't want object. keys there we go however we do want",
    "start": "4374239",
    "end": "4380719"
  },
  {
    "text": "object. keys for the pram State field because that's just a single object key",
    "start": "4380719",
    "end": "4386560"
  },
  {
    "text": "value um that's better okay let me fix that over here as",
    "start": "4386560",
    "end": "4392000"
  },
  {
    "text": "well there we go okay so now to map it back to the full data schema missing",
    "start": "4393440",
    "end": "4399760"
  },
  {
    "text": "prams map missing pram key find name",
    "start": "4399760",
    "end": "4405880"
  },
  {
    "text": "name equals the missing Prime key and then we'll do a filter so it's",
    "start": "4405880",
    "end": "4411760"
  },
  {
    "text": "only the day schema so dot filter p is undefined and then we",
    "start": "4411760",
    "end": "4417960"
  },
  {
    "text": "can cast it there we go and now we can get the user input so we'll",
    "start": "4417960",
    "end": "4424360"
  },
  {
    "text": "say const user input equals user input",
    "start": "4424360",
    "end": "4429960"
  },
  {
    "text": "missing prams we'll have to await this this will be a string",
    "start": "4429960",
    "end": "4436400"
  },
  {
    "text": "exactly We'll add our input here so input",
    "start": "4436400",
    "end": "4442679"
  },
  {
    "text": "string and then we can say const if I can type",
    "start": "4442679",
    "end": "4449400"
  },
  {
    "text": "const par user input equals parse user input there nice now a parse user input",
    "start": "4449400",
    "end": "4456880"
  },
  {
    "text": "we know that they're always going to be in this format and if they're not then it'll fail and that's on the user um so",
    "start": "4456880",
    "end": "4463800"
  },
  {
    "text": "to start we can say if input do",
    "start": "4463800",
    "end": "4472040"
  },
  {
    "text": "includes if it does not include this you know they only returned a",
    "start": "4472040",
    "end": "4477600"
  },
  {
    "text": "single um missing pram so we can say",
    "start": "4477600",
    "end": "4483239"
  },
  {
    "text": "const key comma value equals input.",
    "start": "4483239",
    "end": "4488880"
  },
  {
    "text": "split at the comma string string then we can just",
    "start": "4488880",
    "end": "4496199"
  },
  {
    "text": "return a single object key value there we go and if it does include",
    "start": "4496199",
    "end": "4502000"
  },
  {
    "text": "that then we'll want to split that so we'll say const split prams equals input",
    "start": "4502000",
    "end": "4508560"
  },
  {
    "text": "Dot dosit and then we can do the same thing here so we'll",
    "start": "4508560",
    "end": "4514360"
  },
  {
    "text": "say um prams split prams do map key value return that and it's going to be",
    "start": "4514360",
    "end": "4522000"
  },
  {
    "text": "an array of that which is not what we want we'll just do do let",
    "start": "4522000",
    "end": "4527960"
  },
  {
    "text": "pams record string nope why'd you do that",
    "start": "4527960",
    "end": "4535080"
  },
  {
    "text": "string and then for each instead of map and",
    "start": "4535080",
    "end": "4543080"
  },
  {
    "text": "prams equals spread the previous prams and the new one there we go and then",
    "start": "4543080",
    "end": "4549159"
  },
  {
    "text": "we'll return this um nice so now that we pared user",
    "start": "4549159",
    "end": "4555239"
  },
  {
    "text": "put we can then go ahead and return prams and then spreading the new",
    "start": "4555239",
    "end": "4561639"
  },
  {
    "text": "prams and the par user input prams we'll also add a log so we can see what's going on so we'll say cons",
    "start": "4561639",
    "end": "4570159"
  },
  {
    "text": "console.log new line new",
    "start": "4570159",
    "end": "4575800"
  },
  {
    "text": "line new par prams I",
    "start": "4577440",
    "end": "4582520"
  },
  {
    "text": "guess and then Json stringify new line we also want this to",
    "start": "4582520",
    "end": "4588199"
  },
  {
    "text": "be a template string not a normal string obviously and N comma two for",
    "start": "4588199",
    "end": "4596000"
  },
  {
    "text": "better formatting there we go um and now we have the pars user prams we're going to return it we can make sure this is",
    "start": "4596000",
    "end": "4602760"
  },
  {
    "text": "added there we go um and now if this verify prams function determines that",
    "start": "4602760",
    "end": "4608400"
  },
  {
    "text": "we're missing prams call missing prams will get human in the loop you'll be able to add your prams and it can",
    "start": "4608400",
    "end": "4613679"
  },
  {
    "text": "continue on all right we have one more function or node to add the execute request node",
    "start": "4613679",
    "end": "4620400"
  },
  {
    "text": "which is just going to be executing a fetch request um inside this create fetch request file uh here we're going to be",
    "start": "4620400",
    "end": "4628000"
  },
  {
    "text": "doing um not that that's out of scope for this video we're just going to be doing create the fetch request which",
    "start": "4628000",
    "end": "4633840"
  },
  {
    "text": "means we're going to take the state graph",
    "start": "4633840",
    "end": "4639040"
  },
  {
    "text": "State we're going to want to say const what we want the prams",
    "start": "4639040",
    "end": "4646159"
  },
  {
    "text": "we want the best API and then we can say if best API API is",
    "start": "4646159",
    "end": "4653320"
  },
  {
    "text": "false then throw new error no best API found we don't need to check if this is",
    "start": "4653320",
    "end": "4660639"
  },
  {
    "text": "null because obviously there are get requests which don't require any parameters um but to craft a fetch",
    "start": "4660639",
    "end": "4667080"
  },
  {
    "text": "request we're going to want to say we're going to run to wrap it and a try try and catch just so if this fails doesn't kill our whole thing so we'll say try",
    "start": "4667080",
    "end": "4675800"
  },
  {
    "text": "and then catch e console. error error",
    "start": "4675800",
    "end": "4683080"
  },
  {
    "text": "fetching API and then if you want to see the actual error you can uncomment this",
    "start": "4683080",
    "end": "4689040"
  },
  {
    "text": "but I'll leave it commented for now try is going to be we add a variable here for the response we'll say let response",
    "start": "4689040",
    "end": "4697239"
  },
  {
    "text": "equals null and this can be any um and",
    "start": "4697239",
    "end": "4703920"
  },
  {
    "text": "then const fetch rest equals weit Fetch",
    "start": "4703920",
    "end": "4711679"
  },
  {
    "text": "and then the best api. URL the method is going to be method dot",
    "start": "4711679",
    "end": "4718199"
  },
  {
    "text": "is method is best api. method uh headers we will add later um",
    "start": "4718199",
    "end": "4725800"
  },
  {
    "text": "we don't or actually we'll do this outside yeah there are a few things I forgot to do uh so some of these API",
    "start": "4725800",
    "end": "4731960"
  },
  {
    "text": "URLs they're not all formatted the same way so some of them might contain like slash users slash brackets user ID",
    "start": "4731960",
    "end": "4739960"
  },
  {
    "text": "slash thoughts um and obviously that's not a query pram we can just depend to the end",
    "start": "4739960",
    "end": "4746120"
  },
  {
    "text": "so we're going to have to parse that URL um add in the missing values and then add any extra query programs we'll say",
    "start": "4746120",
    "end": "4754639"
  },
  {
    "text": "if the method is get or head get comma",
    "start": "4754639",
    "end": "4763840"
  },
  {
    "text": "head. includes best ap. method this means that there won't be a body instead",
    "start": "4763840",
    "end": "4770480"
  },
  {
    "text": "just query prams um so we'll say let",
    "start": "4770480",
    "end": "4777320"
  },
  {
    "text": "fetch options equals that",
    "start": "4777320",
    "end": "4782920"
  },
  {
    "text": "method will always be there we know we'll drop that okay so if it's a",
    "start": "4782920",
    "end": "4790800"
  },
  {
    "text": "get request or a head request then we don't need a body and instead we can",
    "start": "4790800",
    "end": "4797320"
  },
  {
    "text": "just parse the URL add the query pram send it in so we'll say let par URL",
    "start": "4797320",
    "end": "4806600"
  },
  {
    "text": "equals um a new URL there and then uh well actually no before we do",
    "start": "4806600",
    "end": "4813800"
  },
  {
    "text": "that we'll just make this just the string and then we'll say const pram",
    "start": "4813800",
    "end": "4819960"
  },
  {
    "text": "Keys equals object. keys prams",
    "start": "4819960",
    "end": "4825400"
  },
  {
    "text": "we'll add another check there saying if all right this is actually a little bit easier so we can",
    "start": "4825400",
    "end": "4831000"
  },
  {
    "text": "say if we have no prams then all we need to do is execute the request with the",
    "start": "4831000",
    "end": "4838320"
  },
  {
    "text": "URL and the method and then response",
    "start": "4838320",
    "end": "4843719"
  },
  {
    "text": "equals vet. okay is true",
    "start": "4843719",
    "end": "4849239"
  },
  {
    "text": "then response Json and else the text if there are prams then that means",
    "start": "4849239",
    "end": "4856120"
  },
  {
    "text": "we have to parse them out so we'll say fetch options is like",
    "start": "4856120",
    "end": "4862120"
  },
  {
    "text": "that the URL unpar is like that if it's a get or head request then",
    "start": "4862120",
    "end": "4870239"
  },
  {
    "text": "pram Keys we know this is going to be truthy and then we can say pram keys.",
    "start": "4870239",
    "end": "4877639"
  },
  {
    "text": "for each key if the URL includes if url. incl",
    "start": "4877639",
    "end": "4885400"
  },
  {
    "text": "includes a bracket with the key inside here key then we can par url. replace",
    "start": "4885400",
    "end": "4894280"
  },
  {
    "text": "the key and we want to delete it from our prams delete prams key and that way it's not",
    "start": "4894280",
    "end": "4901719"
  },
  {
    "text": "going to be included inside the um inside the search prams or the body",
    "start": "4901719",
    "end": "4907120"
  },
  {
    "text": "of the request um and now we have properly parsed our URL so now we can say um let",
    "start": "4907120",
    "end": "4917920"
  },
  {
    "text": "URL and we'll do this out of here so we'll say let URL equals new URL here",
    "start": "4917920",
    "end": "4925719"
  },
  {
    "text": "and then object. Keys prams fre url. search prams and we'll do entries",
    "start": "4925719",
    "end": "4935159"
  },
  {
    "text": "instead and then key comma value that's a little bit cleaner than having to do",
    "start": "4935159",
    "end": "4942880"
  },
  {
    "text": "this um and we'll do that up here as well so object.",
    "start": "4942880",
    "end": "4949400"
  },
  {
    "text": "entries program Keys key comma value inside an array and then if key is true",
    "start": "4949400",
    "end": "4957120"
  },
  {
    "text": "then add the value and delete prams key that",
    "start": "4957120",
    "end": "4963679"
  },
  {
    "text": "works there we go and now we have our new URL and we're put passing it to the URL",
    "start": "4963679",
    "end": "4971239"
  },
  {
    "text": "Constructor the global nodejs URL Constructor because it's really easy to add search prams adding the key the",
    "start": "4971239",
    "end": "4977000"
  },
  {
    "text": "value and then finally if there's still prams left",
    "start": "4977000",
    "end": "4982360"
  },
  {
    "text": "over um sorry we have to do this inside here actually so",
    "start": "4982920",
    "end": "4989719"
  },
  {
    "text": "then that URL is going to be a type of",
    "start": "4989719",
    "end": "4996199"
  },
  {
    "text": "URL and if it's a get or a head request and we're not going to pass in a",
    "start": "4997520",
    "end": "5003560"
  },
  {
    "text": "body so we know the rest have to be query prams so URL equals this new URL",
    "start": "5003560",
    "end": "5011440"
  },
  {
    "text": "that we' parsed out add the query prams and then if it's",
    "start": "5011440",
    "end": "5017960"
  },
  {
    "text": "not that then let's see this actually can go",
    "start": "5017960",
    "end": "5025679"
  },
  {
    "text": "outside because that's not specific to get our head requests the only thing that is specific to get our head request",
    "start": "5025679",
    "end": "5031960"
  },
  {
    "text": "is having no body so now fetch options will equal the previous fetch",
    "start": "5031960",
    "end": "5039159"
  },
  {
    "text": "options and then body json. stringify Rams we need to type this to just be a",
    "start": "5039159",
    "end": "5046560"
  },
  {
    "text": "generic record string comma any and we will es lint disable",
    "start": "5046560",
    "end": "5054960"
  },
  {
    "text": "that's not what I wanted disable We'll add that up",
    "start": "5054960",
    "end": "5061080"
  },
  {
    "text": "here nice okay let's C over this one more time if prams are false we're not going",
    "start": "5062320",
    "end": "5069320"
  },
  {
    "text": "to add in any special query pram so we can just execute it with the request method and the URL get the response if",
    "start": "5069320",
    "end": "5076239"
  },
  {
    "text": "we do pass in prams then first we're going to want to parse the URL to see if",
    "start": "5076239",
    "end": "5081719"
  },
  {
    "text": "any of the prams belong inside the URL and not as query parameters which we do here by mapping over all the prams if it",
    "start": "5081719",
    "end": "5087560"
  },
  {
    "text": "does exist then we add it in and we delete it from the prams object next we want to check if it's a get or head",
    "start": "5087560",
    "end": "5093040"
  },
  {
    "text": "request if it is a get or head request there can be no body so we don't need to",
    "start": "5093040",
    "end": "5098080"
  },
  {
    "text": "add a body here um and we're just going to format the URL with any extra query prams which might exist if it's not a",
    "start": "5098080",
    "end": "5105600"
  },
  {
    "text": "get or head if it's not a get or head request then we know we need to add the body so we will do that right here and",
    "start": "5105600",
    "end": "5112360"
  },
  {
    "text": "finally we can go ahead and call this again so now that we have that and then",
    "start": "5112360",
    "end": "5119400"
  },
  {
    "text": "we can say instead of we can pass in our fancy formatt URL I believe we're going to do a check here yeah so",
    "start": "5119400",
    "end": "5128400"
  },
  {
    "text": "then um",
    "start": "5128400",
    "end": "5132400"
  },
  {
    "text": "else there we go because we moved that all out we can just do const it doesn't need to be conditional there go nice",
    "start": "5134800",
    "end": "5142280"
  },
  {
    "text": "okay so now body there we go and then we already have our method and we going to",
    "start": "5142280",
    "end": "5147320"
  },
  {
    "text": "have a body or not so we can replace those options done done and",
    "start": "5147320",
    "end": "5153440"
  },
  {
    "text": "done finally if response is",
    "start": "5153440",
    "end": "5160040"
  },
  {
    "text": "true then we're going to want to return the response because we have this response",
    "start": "5160040",
    "end": "5166400"
  },
  {
    "text": "key and if not then we can just return response as null because we",
    "start": "5166400",
    "end": "5174960"
  },
  {
    "text": "didn't get a response there we go now we can go back in and last but not least add the final",
    "start": "5174960",
    "end": "5182760"
  },
  {
    "text": "node like that at our import we can uncomment these because",
    "start": "5182760",
    "end": "5190239"
  },
  {
    "text": "now we're actually going to be checking if it got the right API and if it includes the right",
    "start": "5190239",
    "end": "5196080"
  },
  {
    "text": "ID and we can go and run it so let's clear",
    "start": "5196080",
    "end": "5201560"
  },
  {
    "text": "this and yarn start we should see it iterate over each node and it failed",
    "start": "5201560",
    "end": "5208239"
  },
  {
    "text": "okay so we saw that it was able to execute the select API node and then it",
    "start": "5208239",
    "end": "5213320"
  },
  {
    "text": "failed because it can't parse a empty string like that so let's",
    "start": "5213320",
    "end": "5220080"
  },
  {
    "text": "see select apis always maps to the extract pams",
    "start": "5220080",
    "end": "5226199"
  },
  {
    "text": "node if there are no pams",
    "start": "5226199",
    "end": "5231159"
  },
  {
    "text": "then we'll make this optional instead not",
    "start": "5233800",
    "end": "5239880"
  },
  {
    "text": "optional do not",
    "start": "5241719",
    "end": "5246320"
  },
  {
    "text": "return prams I believe that's it let's just",
    "start": "5250239",
    "end": "5255320"
  },
  {
    "text": "really quick we can go into our Langs Smith trace and verify that that's actually",
    "start": "5255320",
    "end": "5262400"
  },
  {
    "text": "the node it finished at so we see it got all the way down to extract prams it called open",
    "start": "5262400",
    "end": "5268440"
  },
  {
    "text": "AI here and it tried to return that and obviously you can't parse",
    "start": "5268440",
    "end": "5276840"
  },
  {
    "text": "that um yeah okay so this should work if we make it optional then prams will just be that or",
    "start": "5276840",
    "end": "5283400"
  },
  {
    "text": "null we need to do prams equals prams null I",
    "start": "5283400",
    "end": "5289920"
  },
  {
    "text": "believe what am I doing wrong here okay so we have our prams which has to be record string",
    "start": "5301639",
    "end": "5311000"
  },
  {
    "text": "or null extract pams is",
    "start": "5311000",
    "end": "5317080"
  },
  {
    "text": "uh we'll say response and then response. prams or",
    "start": "5317080",
    "end": "5323719"
  },
  {
    "text": "null there we go now this should work and if it picks the same API then it",
    "start": "5323719",
    "end": "5329719"
  },
  {
    "text": "should there we go we are missing",
    "start": "5329719",
    "end": "5334920"
  },
  {
    "text": "number and the phone number you get details for so we need to provide our",
    "start": "5334920",
    "end": "5340480"
  },
  {
    "text": "number as the name and the value is going to",
    "start": "5340480",
    "end": "5346360"
  },
  {
    "text": "be fake phone number hit enter re see was able to parse the pram ah but it",
    "start": "5347360",
    "end": "5352880"
  },
  {
    "text": "picked the wrong ID okay but here we can see that the whole Loop executed was",
    "start": "5352880",
    "end": "5358719"
  },
  {
    "text": "able to select a tool um actually be another issue execute",
    "start": "5358719",
    "end": "5365480"
  },
  {
    "text": "request ah we never actually got an error message here so",
    "start": "5365480",
    "end": "5372360"
  },
  {
    "text": "execute execute request node create fetch",
    "start": "5372360",
    "end": "5377920"
  },
  {
    "text": "request progams are false no error was thrown very",
    "start": "5377920",
    "end": "5385520"
  },
  {
    "text": "interesting this always has to so we'll say console.log making request with",
    "start": "5385520",
    "end": "5395040"
  },
  {
    "text": "prams or console.log without",
    "start": "5395040",
    "end": "5401480"
  },
  {
    "text": "prams and then if response is true return that else return response",
    "start": "5402040",
    "end": "5407719"
  },
  {
    "text": "null you've already implemented it let's go back and run it um and you can see it's moving quite",
    "start": "5407719",
    "end": "5415040"
  },
  {
    "text": "quickly because we're using open AI GPT for Turbo which is very",
    "start": "5415040",
    "end": "5421639"
  },
  {
    "text": "helpful there we go without prams okay so here we can see that we have a",
    "start": "5421639",
    "end": "5426800"
  },
  {
    "text": "problem obviously um because it even though we added our number pram it",
    "start": "5426800",
    "end": "5432639"
  },
  {
    "text": "doesn't realize that we have our number there so now what happens after human in the loop",
    "start": "5432639",
    "end": "5439719"
  },
  {
    "text": "request pams human in the loop goes to verify pams verify",
    "start": "5439719",
    "end": "5447320"
  },
  {
    "text": "pams is false then it should return human in the loop so let's see let's add",
    "start": "5447320",
    "end": "5452520"
  },
  {
    "text": "a log there console. log no PR actually this is we can do this a little easier",
    "start": "5452520",
    "end": "5458159"
  },
  {
    "text": "in Langs Smith so we'll go here we'll scroll scroll down to our human in the",
    "start": "5458159",
    "end": "5463600"
  },
  {
    "text": "loop node we'll see that it definitely returned prams with a number if we go to",
    "start": "5463600",
    "end": "5470560"
  },
  {
    "text": "our execute request node",
    "start": "5470560",
    "end": "5476920"
  },
  {
    "text": "then okay so it did make a request and it returned it so it looks like it's",
    "start": "5476920",
    "end": "5482040"
  },
  {
    "text": "just a logging issue for us um I didn't add an API key for Rapid API",
    "start": "5482040",
    "end": "5487400"
  },
  {
    "text": "all these apis are rapid AP API so if you want to actually make the request add your rapid API key and to the fetch",
    "start": "5487400",
    "end": "5493679"
  },
  {
    "text": "request you'll get a response um which means that the actual issue is down here where we",
    "start": "5493679",
    "end": "5502040"
  },
  {
    "text": "should console log the result so",
    "start": "5502040",
    "end": "5508520"
  },
  {
    "text": "console.log fetch result and then",
    "start": "5508520",
    "end": "5515280"
  },
  {
    "text": "console.log um final result. response now if we rerun we should",
    "start": "5515280",
    "end": "5522199"
  },
  {
    "text": "see it select go this paste it in and then",
    "start": "5522199",
    "end": "5529600"
  },
  {
    "text": "fetch result missing API key there we go uh the only problem is it picked the wrong result so we're kind of running",
    "start": "5529600",
    "end": "5536080"
  },
  {
    "text": "out of time but let's see if we can real quick go and do some prompt engineering to get it to pick the right tool uh",
    "start": "5536080",
    "end": "5544400"
  },
  {
    "text": "first we want to see where it failed so extract category it picked communication and",
    "start": "5544400",
    "end": "5550199"
  },
  {
    "text": "social if we go to our constants go to communication social email SMS social",
    "start": "5550199",
    "end": "5557199"
  },
  {
    "text": "communication if we then go to the IDS which we're accepting we can see what categories those are and see if it",
    "start": "5557199",
    "end": "5563159"
  },
  {
    "text": "failed there if it failed at a further tools let's see category name",
    "start": "5563159",
    "end": "5568760"
  },
  {
    "text": "data and it looks like it did not pick the right highlight",
    "start": "5568760",
    "end": "5574920"
  },
  {
    "text": "category yeah so we want it to pick is data and analytics which means that",
    "start": "5574920",
    "end": "5580000"
  },
  {
    "text": "hopefully if we fix the extract category node with a little bit of prompting then it'll pick the right High",
    "start": "5580000",
    "end": "5586800"
  },
  {
    "text": "Lev category and pick the right API U so I'm going to pause this and I'll come back and explain a better prompt that I",
    "start": "5586800",
    "end": "5592480"
  },
  {
    "text": "added okay so here's the change I made um instead of just passing in the highle category let's go back to the lsmith",
    "start": "5592480",
    "end": "5599719"
  },
  {
    "text": "instead of just passing in the highle category name and its lowle subcategories what I'm doing now is I'm reading all the data from our trimed",
    "start": "5599719",
    "end": "5606719"
  },
  {
    "text": "Corpus um I'm then mapping over every single high Lev category finding all of",
    "start": "5606719",
    "end": "5614040"
  },
  {
    "text": "the corresponding low-l categories in there and making the string say highle category name of the high level category",
    "start": "5614040",
    "end": "5620920"
  },
  {
    "text": "and then instead of just the category names of the lowle categories I'm",
    "start": "5620920",
    "end": "5626040"
  },
  {
    "text": "mapping over every single tool which is underneath that high level category um and if we look we can see it's",
    "start": "5626040",
    "end": "5632639"
  },
  {
    "text": "about uh what's that that's like six categories per high level each of these",
    "start": "5632639",
    "end": "5639159"
  },
  {
    "text": "usually have around three so um we're going to have you know R plus or minus",
    "start": "5639159",
    "end": "5644520"
  },
  {
    "text": "15 um tools inside each high level category these tools contain just the name and that is with hopes that the",
    "start": "5644520",
    "end": "5651960"
  },
  {
    "text": "name is more descriptive and the LM is able to uh better select the highle",
    "start": "5651960",
    "end": "5657360"
  },
  {
    "text": "category based on the names of the tools which are inside that so we've made",
    "start": "5657360",
    "end": "5662719"
  },
  {
    "text": "those changes uh I also updated the um this to say high level categories and",
    "start": "5662719",
    "end": "5669520"
  },
  {
    "text": "corresponding tools and then the prompt variable name so if we make that change and",
    "start": "5669520",
    "end": "5675840"
  },
  {
    "text": "execute it select API okay it's asking for the same",
    "start": "5675840",
    "end": "5684560"
  },
  {
    "text": "parameters which is not great okay so still didn't work if",
    "start": "5684560",
    "end": "5690800"
  },
  {
    "text": "we go back to Lang Smith we can see if it picked the same tool or or a different tool sorry the same category",
    "start": "5690800",
    "end": "5695840"
  },
  {
    "text": "different category nice nice nice okay it still",
    "start": "5695840",
    "end": "5702880"
  },
  {
    "text": "picked the same category so I wonder if there's more prompt engineering we can",
    "start": "5702880",
    "end": "5708360"
  },
  {
    "text": "do I'm going to pause this and come back when I fixed it all righty couple minutes later I made a small But Mighty",
    "start": "5708360",
    "end": "5716000"
  },
  {
    "text": "change uh what I did is I moved the description let's see I'll copy this and show we we had",
    "start": "5716000",
    "end": "5722760"
  },
  {
    "text": "before so previously we had this where I had your an expert software engineer",
    "start": "5722760",
    "end": "5728280"
  },
  {
    "text": "helping a junior engineer understand High Lev category of the query given their query and a list of high level",
    "start": "5728280",
    "end": "5733760"
  },
  {
    "text": "categories select the high level category which best represents your query um if you remember from the from some of the other llm calls we had we",
    "start": "5733760",
    "end": "5740280"
  },
  {
    "text": "were obviously including the query in the user section but then more context like the categories the tools or the",
    "start": "5740280",
    "end": "5746520"
  },
  {
    "text": "apis we would include in the system prompt so what I did is refactored this a little bit to say",
    "start": "5746520",
    "end": "5753880"
  },
  {
    "text": "say you're a software engineer you're helping a fellow Engineers select the best category of apis based on their query you only presented with a list of",
    "start": "5753880",
    "end": "5760760"
  },
  {
    "text": "highle API categories and their query think slowly carefully and select the",
    "start": "5760760",
    "end": "5766600"
  },
  {
    "text": "best category for their query this was I did added this um little prompt engineering tip uh which I read in a",
    "start": "5766600",
    "end": "5774159"
  },
  {
    "text": "paper maybe it was on Twitter a while ago these LMS are trained on obviously data that humans have have uh put in the",
    "start": "5774159",
    "end": "5781280"
  },
  {
    "text": "internet so there's a lot of information out there and let's say courses or whatever where some human is saying",
    "start": "5781280",
    "end": "5787199"
  },
  {
    "text": "think slowly and carefully and get this result and when people think slowly and",
    "start": "5787199",
    "end": "5792840"
  },
  {
    "text": "carefully they're going to get the better results because they're not rushing through it so the LM is able to",
    "start": "5792840",
    "end": "5798119"
  },
  {
    "text": "get better answers I'm not sure the technical details in that but it seems to work CU it did here um so thanks s",
    "start": "5798119",
    "end": "5804880"
  },
  {
    "text": "carefully and then I also passed in the actual context inside the system prompt so if we go back and run",
    "start": "5804880",
    "end": "5812639"
  },
  {
    "text": "it then we should see it blow through and select yes so before it was asking",
    "start": "5812639",
    "end": "5818800"
  },
  {
    "text": "for us for a parameter called number with a phone number here it's phone so let's add in our dummy phone",
    "start": "5818800",
    "end": "5825960"
  },
  {
    "text": "number hit enter and then boom you got the proper ID um which just go to show",
    "start": "5825960",
    "end": "5831560"
  },
  {
    "text": "you that a lot of this all our code is right we just needed to modify two sentences in our prompt and to move some",
    "start": "5831560",
    "end": "5837719"
  },
  {
    "text": "context to the system prompt or maybe in a future case it's moving context from system to the human prompt um and then",
    "start": "5837719",
    "end": "5844560"
  },
  {
    "text": "that is able to allow the LM to pick the right um API or for your use case uh if",
    "start": "5844560",
    "end": "5852080"
  },
  {
    "text": "we go back to Lang graph or Lang Smith sorry we can see that in our open API",
    "start": "5852080",
    "end": "5857199"
  },
  {
    "text": "call passing everything there and it picked two data and analytics still",
    "start": "5857199",
    "end": "5862520"
  },
  {
    "text": "thought communication social um was right and if we actually inspect the",
    "start": "5862520",
    "end": "5868360"
  },
  {
    "text": "query I can see it's believable you know what's at business check for a phone number for what's WhatApp business",
    "start": "5868360",
    "end": "5874840"
  },
  {
    "text": "account um and that seems pretty related to communication and social but I'm assuming since we passed in we search",
    "start": "5874840",
    "end": "5882520"
  },
  {
    "text": "for WhatsApp then here we go under data and",
    "start": "5882520",
    "end": "5887679"
  },
  {
    "text": "analytics there are a bunch of WhatsApp tools so that's most likely why it's selected",
    "start": "5887679",
    "end": "5893360"
  },
  {
    "text": "what'sapp um and then inside the get API node obviously we're getting the",
    "start": "5893360",
    "end": "5898920"
  },
  {
    "text": "apis and then select apis node",
    "start": "5898920",
    "end": "5905560"
  },
  {
    "text": "it selected the proper API because we passed them all in here",
    "start": "5906480",
    "end": "5912520"
  },
  {
    "text": "um and it makes sense that the query is about WhatsApp it's going to choose the tool which has WhatsApp in the name and",
    "start": "5912520",
    "end": "5918360"
  },
  {
    "text": "then the rest was the same and it all worked um and yeah just to kind of re reiterate go over what we all did what",
    "start": "5918360",
    "end": "5925199"
  },
  {
    "text": "we did here um we take user's query we extract the most likely category from",
    "start": "5925199",
    "end": "5931560"
  },
  {
    "text": "our list of categories based on that query we then want to extract all the apis under that",
    "start": "5931560",
    "end": "5938159"
  },
  {
    "text": "category since we're only dealing with 130 total API and extracting that way",
    "start": "5938159",
    "end": "5943239"
  },
  {
    "text": "down to you know under 15 once we get the categories we can just pass them all context to an llm um and this would work",
    "start": "5943239",
    "end": "5949840"
  },
  {
    "text": "up to a pretty large scale now that language models can scale to massive context L context context lengths but if",
    "start": "5949840",
    "end": "5956199"
  },
  {
    "text": "you're dealing with more than that you just add more steps to this tree where it breaks down even further um we passed all the API cm it's",
    "start": "5956199",
    "end": "5963280"
  },
  {
    "text": "SEL X One API then we extract we do some query analysis where we try and extract the parameters from the user's query um",
    "start": "5963280",
    "end": "5970920"
  },
  {
    "text": "we then verify we have all the parameters if we're missing any we send that to the human in the loop aspect where we ask the human to provide the",
    "start": "5970920",
    "end": "5977280"
  },
  {
    "text": "parameters go back verify we have them all and then execute the fetch request and get the",
    "start": "5977280",
    "end": "5982840"
  },
  {
    "text": "response uh yeah that's it um I hope you guys enjoyed this this repo I will push up the finish code on a branch called",
    "start": "5982840",
    "end": "5991080"
  },
  {
    "text": "finish so let's go uh finished add- a and",
    "start": "5991080",
    "end": "6000040"
  },
  {
    "text": "commit finished code and then we'll lint",
    "start": "6000040",
    "end": "6005080"
  },
  {
    "text": "It And format it just to make a little",
    "start": "6005080",
    "end": "6009679"
  },
  {
    "text": "prettier there we go so now um if if you want to follow follow",
    "start": "6015800",
    "end": "6021800"
  },
  {
    "text": "along from scratch just pull this re from Main if you want to see the final code or want to see where you might have",
    "start": "6021800",
    "end": "6028040"
  },
  {
    "text": "differed uh then pull from the finished branch which I'm just going to leave up here um and yeah I hope everybody",
    "start": "6028040",
    "end": "6035159"
  },
  {
    "text": "enjoyed this I hope you have fun building l tool I hope you had as much fun building L tools I did",
    "start": "6035159",
    "end": "6043840"
  }
]