[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "my name is Charles uh I'm a co-founder",
    "start": "4080",
    "end": "7319"
  },
  {
    "text": "and CEO of man Verge we have been",
    "start": "7319",
    "end": "11040"
  },
  {
    "text": "developing big memory software that",
    "start": "11040",
    "end": "13679"
  },
  {
    "text": "intend to make memory bigger faster and",
    "start": "13679",
    "end": "17160"
  },
  {
    "text": "also to improve the inter-process",
    "start": "17160",
    "end": "19260"
  },
  {
    "text": "communication across many servers",
    "start": "19260",
    "end": "21960"
  },
  {
    "text": "and what I'm going to introducing is a",
    "start": "21960",
    "end": "24539"
  },
  {
    "text": "shared memory SDK that can help",
    "start": "24539",
    "end": "27779"
  },
  {
    "text": "accelerate a workload on top of Ray",
    "start": "27779",
    "end": "30619"
  },
  {
    "text": "across multiple servers",
    "start": "30619",
    "end": "33600"
  },
  {
    "start": "32000",
    "end": "74000"
  },
  {
    "text": "so the problem we're trying to solve is",
    "start": "33600",
    "end": "36300"
  },
  {
    "text": "when the data needs to move between",
    "start": "36300",
    "end": "38460"
  },
  {
    "text": "different processes",
    "start": "38460",
    "end": "40260"
  },
  {
    "text": "and when these processes on the same",
    "start": "40260",
    "end": "42899"
  },
  {
    "text": "node it is easy there are many IPC",
    "start": "42899",
    "end": "45480"
  },
  {
    "text": "mechanisms within the same node but when",
    "start": "45480",
    "end": "48059"
  },
  {
    "text": "they need to travel between different",
    "start": "48059",
    "end": "49620"
  },
  {
    "text": "nodes IO is incurred and there are many",
    "start": "49620",
    "end": "53520"
  },
  {
    "text": "copies there are serialization",
    "start": "53520",
    "end": "55079"
  },
  {
    "text": "deserialization and in the case when you",
    "start": "55079",
    "end": "57719"
  },
  {
    "text": "need to use network storage the storage",
    "start": "57719",
    "end": "60000"
  },
  {
    "text": "media speed also slow down the",
    "start": "60000",
    "end": "62039"
  },
  {
    "text": "application so whenever the application",
    "start": "62039",
    "end": "64140"
  },
  {
    "text": "needs to move from a single node to",
    "start": "64140",
    "end": "65580"
  },
  {
    "text": "multiple node it inevitably slow down",
    "start": "65580",
    "end": "68460"
  },
  {
    "text": "because of the bottleneck imposed by IO",
    "start": "68460",
    "end": "71700"
  },
  {
    "text": "and they were really not good solution",
    "start": "71700",
    "end": "73680"
  },
  {
    "text": "to this until the emergence of a new",
    "start": "73680",
    "end": "76439"
  },
  {
    "start": "74000",
    "end": "121000"
  },
  {
    "text": "standard called cxl cxl stands for",
    "start": "76439",
    "end": "80360"
  },
  {
    "text": "compute express link it's a new memory",
    "start": "80360",
    "end": "83400"
  },
  {
    "text": "protocol that runs on pcie Gen 5 that",
    "start": "83400",
    "end": "87600"
  },
  {
    "text": "allows a memory to be extended beyond",
    "start": "87600",
    "end": "90600"
  },
  {
    "text": "the DDR memory that's plugged into the",
    "start": "90600",
    "end": "92520"
  },
  {
    "text": "dim slots it can be added within a",
    "start": "92520",
    "end": "95340"
  },
  {
    "text": "server it can also be available as a",
    "start": "95340",
    "end": "99119"
  },
  {
    "text": "memory Appliance that's connected to",
    "start": "99119",
    "end": "101460"
  },
  {
    "text": "multiple servers so what this allows",
    "start": "101460",
    "end": "104040"
  },
  {
    "text": "multiple nodes to do you have different",
    "start": "104040",
    "end": "106079"
  },
  {
    "text": "processes can access the same memory",
    "start": "106079",
    "end": "108960"
  },
  {
    "text": "with the low store mechanism that memory",
    "start": "108960",
    "end": "111840"
  },
  {
    "text": "supports very with very low latency and",
    "start": "111840",
    "end": "114000"
  },
  {
    "text": "very high bandwidth without going",
    "start": "114000",
    "end": "115920"
  },
  {
    "text": "through a network allow data to be",
    "start": "115920",
    "end": "118020"
  },
  {
    "text": "shared across multiple servers",
    "start": "118020",
    "end": "121020"
  },
  {
    "start": "121000",
    "end": "151000"
  },
  {
    "text": "and what we did is we developed a new",
    "start": "121020",
    "end": "124740"
  },
  {
    "text": "software layer we called Gizmo and Gizmo",
    "start": "124740",
    "end": "128580"
  },
  {
    "text": "stands for Global IO free sheer memory",
    "start": "128580",
    "end": "132060"
  },
  {
    "text": "object it presents a object storage like",
    "start": "132060",
    "end": "135300"
  },
  {
    "text": "API but those objects will be memory",
    "start": "135300",
    "end": "137940"
  },
  {
    "text": "mapped and accessible from your",
    "start": "137940",
    "end": "140700"
  },
  {
    "text": "applications and we would coordinate",
    "start": "140700",
    "end": "143040"
  },
  {
    "text": "among the different nodes and making",
    "start": "143040",
    "end": "144900"
  },
  {
    "text": "sure the access are consistent correct",
    "start": "144900",
    "end": "147300"
  },
  {
    "text": "and cash coherent",
    "start": "147300",
    "end": "148860"
  },
  {
    "text": "and we",
    "start": "148860",
    "end": "150239"
  },
  {
    "text": "um we present a very simple API where",
    "start": "150239",
    "end": "153900"
  },
  {
    "text": "you can connect to our Gizmo server and",
    "start": "153900",
    "end": "157260"
  },
  {
    "text": "start to be able to write and read to",
    "start": "157260",
    "end": "160200"
  },
  {
    "text": "the Gizmo store",
    "start": "160200",
    "end": "161519"
  },
  {
    "text": "and the key difference here from what",
    "start": "161519",
    "end": "164819"
  },
  {
    "text": "Ray already includes and Ray has a great",
    "start": "164819",
    "end": "167580"
  },
  {
    "text": "architecture it has a shared memory",
    "start": "167580",
    "end": "170040"
  },
  {
    "text": "object store within however it's only",
    "start": "170040",
    "end": "172800"
  },
  {
    "text": "very fast when the object is placed",
    "start": "172800",
    "end": "175980"
  },
  {
    "text": "locally if the object is on another",
    "start": "175980",
    "end": "178620"
  },
  {
    "text": "server what rate did underneath is it",
    "start": "178620",
    "end": "181860"
  },
  {
    "text": "needs to transport that object from the",
    "start": "181860",
    "end": "184500"
  },
  {
    "text": "other node to the local node to make the",
    "start": "184500",
    "end": "187319"
  },
  {
    "text": "local copy before you can access it and",
    "start": "187319",
    "end": "190140"
  },
  {
    "text": "with our solution you do not need to do",
    "start": "190140",
    "end": "192959"
  },
  {
    "text": "that copying and you do not need to",
    "start": "192959",
    "end": "195300"
  },
  {
    "text": "incur the serialization and",
    "start": "195300",
    "end": "196800"
  },
  {
    "text": "deserialization because the network i o",
    "start": "196800",
    "end": "198959"
  },
  {
    "text": "but instead you can directly create",
    "start": "198959",
    "end": "201300"
  },
  {
    "text": "those objects and allow those objects to",
    "start": "201300",
    "end": "203760"
  },
  {
    "text": "be accessed anywhere and we can ensure",
    "start": "203760",
    "end": "206280"
  },
  {
    "text": "the consistency behind the scenes and so",
    "start": "206280",
    "end": "209760"
  },
  {
    "text": "this is the really the Improvement we",
    "start": "209760",
    "end": "212159"
  },
  {
    "text": "can add to the uh to the ray system",
    "start": "212159",
    "end": "216000"
  },
  {
    "text": "and so now I'm going to show a live a",
    "start": "216000",
    "end": "218819"
  },
  {
    "text": "demo in a video",
    "start": "218819",
    "end": "220400"
  },
  {
    "text": "and and this is uh essentially running a",
    "start": "220400",
    "end": "224040"
  },
  {
    "start": "223000",
    "end": "257000"
  },
  {
    "text": "four node right each of them have four",
    "start": "224040",
    "end": "226739"
  },
  {
    "text": "CPUs and we're gonna show the Baseline",
    "start": "226739",
    "end": "230400"
  },
  {
    "text": "uh of uh of this uh running a shuffle",
    "start": "230400",
    "end": "233819"
  },
  {
    "text": "Benchmark on this four-door Ray and",
    "start": "233819",
    "end": "236819"
  },
  {
    "text": "we're gonna show them with our kiss ball",
    "start": "236819",
    "end": "238920"
  },
  {
    "text": "integrated with Ray and how does the",
    "start": "238920",
    "end": "241799"
  },
  {
    "text": "performance compare over the last few",
    "start": "241799",
    "end": "243900"
  },
  {
    "text": "months we collaborated with the ray",
    "start": "243900",
    "end": "245700"
  },
  {
    "text": "community and with the any scale team to",
    "start": "245700",
    "end": "248760"
  },
  {
    "text": "do the integration and to be able to",
    "start": "248760",
    "end": "250920"
  },
  {
    "text": "validate the performance Improvement",
    "start": "250920",
    "end": "253140"
  },
  {
    "text": "that a cross note sheer memory can",
    "start": "253140",
    "end": "255840"
  },
  {
    "text": "present",
    "start": "255840",
    "end": "257519"
  },
  {
    "start": "257000",
    "end": "336000"
  },
  {
    "text": "so here is the the demo the text is a",
    "start": "257519",
    "end": "260040"
  },
  {
    "text": "little small so I'm going to try to read",
    "start": "260040",
    "end": "262320"
  },
  {
    "text": "them out so first let's see how many",
    "start": "262320",
    "end": "264720"
  },
  {
    "text": "nodes are here and this is writing the",
    "start": "264720",
    "end": "266280"
  },
  {
    "text": "Baseline we have a full note each of",
    "start": "266280",
    "end": "269160"
  },
  {
    "text": "them with 16 gigabyte of memory",
    "start": "269160",
    "end": "272520"
  },
  {
    "text": "and we're going to run a shuffle",
    "start": "272520",
    "end": "273780"
  },
  {
    "text": "Benchmark with about 20 Gigabytes to be",
    "start": "273780",
    "end": "277080"
  },
  {
    "text": "shuffled across these four nodes and",
    "start": "277080",
    "end": "280020"
  },
  {
    "text": "this is using the original array with",
    "start": "280020",
    "end": "282060"
  },
  {
    "text": "its built-in uh in-memory Object Store",
    "start": "282060",
    "end": "285600"
  },
  {
    "text": "and uh as you see it's taking a little",
    "start": "285600",
    "end": "288180"
  },
  {
    "text": "while for these Shuffle jobs to complete",
    "start": "288180",
    "end": "293100"
  },
  {
    "text": "and let's give it a few more seconds",
    "start": "293100",
    "end": "296960"
  },
  {
    "text": "and as you can see here it took about 57",
    "start": "299040",
    "end": "301800"
  },
  {
    "text": "seconds for this Benchmark to complete",
    "start": "301800",
    "end": "305940"
  },
  {
    "text": "now let's uh take a look at uh kissable",
    "start": "305940",
    "end": "310380"
  },
  {
    "text": "now with Gizmo integrated into Ray again",
    "start": "310380",
    "end": "313620"
  },
  {
    "text": "the same four notes now they are",
    "start": "313620",
    "end": "316020"
  },
  {
    "text": "connected to the sheer memory so the",
    "start": "316020",
    "end": "317940"
  },
  {
    "text": "shuffle can happen over the sheer memory",
    "start": "317940",
    "end": "319800"
  },
  {
    "text": "and it's the same 20 gigabyte data sites",
    "start": "319800",
    "end": "322560"
  },
  {
    "text": "and you can see the setup time is about",
    "start": "322560",
    "end": "324660"
  },
  {
    "text": "the same but running time becomes much",
    "start": "324660",
    "end": "326400"
  },
  {
    "text": "faster",
    "start": "326400",
    "end": "327360"
  },
  {
    "text": "so the difference here the new time is",
    "start": "327360",
    "end": "330419"
  },
  {
    "text": "about 30 seconds including the initial",
    "start": "330419",
    "end": "332280"
  },
  {
    "text": "setup time so it's about half the time",
    "start": "332280",
    "end": "334320"
  },
  {
    "text": "it spent using Gizmo if you take out the",
    "start": "334320",
    "end": "338280"
  },
  {
    "start": "336000",
    "end": "398000"
  },
  {
    "text": "set setup time the Improvement is",
    "start": "338280",
    "end": "340320"
  },
  {
    "text": "actually even more",
    "start": "340320",
    "end": "342419"
  },
  {
    "text": "so just to show more complete results",
    "start": "342419",
    "end": "344400"
  },
  {
    "text": "that we were able to achieve by",
    "start": "344400",
    "end": "346800"
  },
  {
    "text": "integrating uh Gizmo into Ray to getting",
    "start": "346800",
    "end": "350580"
  },
  {
    "text": "a local object one gigabytes object",
    "start": "350580",
    "end": "353699"
  },
  {
    "text": "compared to Baseline and Gizmo it's the",
    "start": "353699",
    "end": "357300"
  },
  {
    "text": "same which is a great result because",
    "start": "357300",
    "end": "359460"
  },
  {
    "text": "here the objects are placed in a shared",
    "start": "359460",
    "end": "362460"
  },
  {
    "text": "memory instead of local memory but it",
    "start": "362460",
    "end": "364680"
  },
  {
    "text": "actually has no performance degradation",
    "start": "364680",
    "end": "367020"
  },
  {
    "text": "and when the object is placed on a",
    "start": "367020",
    "end": "369060"
  },
  {
    "text": "remote node it's about seven times",
    "start": "369060",
    "end": "371220"
  },
  {
    "text": "faster instead of uh you know 2.7",
    "start": "371220",
    "end": "374280"
  },
  {
    "text": "seconds we are also having the same",
    "start": "374280",
    "end": "376680"
  },
  {
    "text": "speed as as you're accessing a local",
    "start": "376680",
    "end": "378720"
  },
  {
    "text": "object",
    "start": "378720",
    "end": "379680"
  },
  {
    "text": "and the next line is the demo we have",
    "start": "379680",
    "end": "382380"
  },
  {
    "text": "shown shuffling 20 Gigabytes of object",
    "start": "382380",
    "end": "385860"
  },
  {
    "text": "uh that we we were able to achieve about",
    "start": "385860",
    "end": "388740"
  },
  {
    "text": "half the time",
    "start": "388740",
    "end": "390419"
  },
  {
    "text": "and then to shuffle a bigger object the",
    "start": "390419",
    "end": "393120"
  },
  {
    "text": "Improvement is even more we can have 2.8",
    "start": "393120",
    "end": "395460"
  },
  {
    "text": "times faster performance and and these",
    "start": "395460",
    "end": "399240"
  },
  {
    "start": "398000",
    "end": "455000"
  },
  {
    "text": "benefits because of the following",
    "start": "399240",
    "end": "402000"
  },
  {
    "text": "reasons number one because of uh Gizmo",
    "start": "402000",
    "end": "406080"
  },
  {
    "text": "is using Shear memory access it's not",
    "start": "406080",
    "end": "408780"
  },
  {
    "text": "doing the network i o it's not doing the",
    "start": "408780",
    "end": "412259"
  },
  {
    "text": "serialization deserialization therefore",
    "start": "412259",
    "end": "414660"
  },
  {
    "text": "the transport is much faster there will",
    "start": "414660",
    "end": "417120"
  },
  {
    "text": "be much less copies that you don't need",
    "start": "417120",
    "end": "419880"
  },
  {
    "text": "to copy from A to B and all the",
    "start": "419880",
    "end": "422220"
  },
  {
    "text": "intermediate copies you need to go go",
    "start": "422220",
    "end": "424199"
  },
  {
    "text": "through the stack and also it's much",
    "start": "424199",
    "end": "426360"
  },
  {
    "text": "more efficient use of the memory you",
    "start": "426360",
    "end": "429000"
  },
  {
    "text": "know before when you have a distributed",
    "start": "429000",
    "end": "430940"
  },
  {
    "text": "uh in-memory store you can have multiple",
    "start": "430940",
    "end": "433919"
  },
  {
    "text": "copies of your object because of the",
    "start": "433919",
    "end": "436560"
  },
  {
    "text": "different objects you're all accessing",
    "start": "436560",
    "end": "437940"
  },
  {
    "text": "it so you multiply the usage of memory",
    "start": "437940",
    "end": "440280"
  },
  {
    "text": "now you only need to have one copy for",
    "start": "440280",
    "end": "443220"
  },
  {
    "text": "all of the nodes therefore you get more",
    "start": "443220",
    "end": "446160"
  },
  {
    "text": "bang for the buck and it's less likely",
    "start": "446160",
    "end": "448680"
  },
  {
    "text": "for you to run out of memory and speed",
    "start": "448680",
    "end": "450300"
  },
  {
    "text": "the disk therefore the speed is much",
    "start": "450300",
    "end": "453720"
  },
  {
    "text": "faster",
    "start": "453720",
    "end": "455280"
  },
  {
    "start": "455000",
    "end": "517000"
  },
  {
    "text": "and as we mentioned we are working with",
    "start": "455280",
    "end": "459000"
  },
  {
    "text": "the any scale team and with the ray",
    "start": "459000",
    "end": "460800"
  },
  {
    "text": "Community we just submitted a",
    "start": "460800",
    "end": "463259"
  },
  {
    "text": "enhancement a proposal to incorporate a",
    "start": "463259",
    "end": "466800"
  },
  {
    "text": "plugable object store into the array",
    "start": "466800",
    "end": "469500"
  },
  {
    "text": "architecture so that kissable or other",
    "start": "469500",
    "end": "472620"
  },
  {
    "text": "object store can be plugged in very",
    "start": "472620",
    "end": "474479"
  },
  {
    "text": "easily and you can see the details of",
    "start": "474479",
    "end": "477300"
  },
  {
    "text": "this enhancement proposal from this link",
    "start": "477300",
    "end": "481020"
  },
  {
    "text": "and we have uh other Improvement coming",
    "start": "481020",
    "end": "484800"
  },
  {
    "text": "as well offering a bigger memory to the",
    "start": "484800",
    "end": "488280"
  },
  {
    "text": "rayform framework in addition to the",
    "start": "488280",
    "end": "490740"
  },
  {
    "text": "sheer memory where we can improve the",
    "start": "490740",
    "end": "493259"
  },
  {
    "text": "internode communication that we can have",
    "start": "493259",
    "end": "495780"
  },
  {
    "text": "endless memory that can dynamically add",
    "start": "495780",
    "end": "498720"
  },
  {
    "text": "more memory capacity to your node so",
    "start": "498720",
    "end": "502020"
  },
  {
    "text": "even when you have data skew situations",
    "start": "502020",
    "end": "504000"
  },
  {
    "text": "you do not run out of memory and run",
    "start": "504000",
    "end": "506580"
  },
  {
    "text": "into those om errors",
    "start": "506580",
    "end": "509340"
  },
  {
    "text": "and we can also dynamically scale the",
    "start": "509340",
    "end": "511979"
  },
  {
    "text": "memory bandwidth that's often a",
    "start": "511979",
    "end": "514140"
  },
  {
    "text": "bottleneck for various AI workload",
    "start": "514140",
    "end": "518399"
  },
  {
    "start": "517000",
    "end": "537000"
  },
  {
    "text": "so if you have more questions email us",
    "start": "518399",
    "end": "522060"
  },
  {
    "text": "at Gizmo and members.com",
    "start": "522060",
    "end": "524720"
  },
  {
    "text": "and we also have a boost here over there",
    "start": "524720",
    "end": "527760"
  },
  {
    "text": "so we'll be happy to answer your",
    "start": "527760",
    "end": "530160"
  },
  {
    "text": "questions",
    "start": "530160",
    "end": "531180"
  },
  {
    "text": "thank you very much",
    "start": "531180",
    "end": "532680"
  },
  {
    "text": "[Applause]",
    "start": "532680",
    "end": "535850"
  }
]