[
  {
    "start": "0",
    "end": "44000"
  },
  {
    "text": "[Music]",
    "start": "170",
    "end": "14480"
  },
  {
    "text": "good afternoon everyone my name is hao",
    "start": "14480",
    "end": "16720"
  },
  {
    "text": "i'm currently a postdoc scholar at uc",
    "start": "16720",
    "end": "18880"
  },
  {
    "text": "berkeley wrestling",
    "start": "18880",
    "end": "20080"
  },
  {
    "text": "working on large-scale display machine",
    "start": "20080",
    "end": "21680"
  },
  {
    "text": "learning algorithms and systems",
    "start": "21680",
    "end": "23920"
  },
  {
    "text": "today in my talk i'm going to introduce",
    "start": "23920",
    "end": "25840"
  },
  {
    "text": "some latest development we did",
    "start": "25840",
    "end": "27760"
  },
  {
    "text": "on introducing high connective",
    "start": "27760",
    "end": "29840"
  },
  {
    "text": "communication apis into raid",
    "start": "29840",
    "end": "31920"
  },
  {
    "text": "to better support distributed machine",
    "start": "31920",
    "end": "33440"
  },
  {
    "text": "learning workloads",
    "start": "33440",
    "end": "35120"
  },
  {
    "text": "i'm going to walk you through the",
    "start": "35120",
    "end": "36399"
  },
  {
    "text": "motivation apis and a few use cases",
    "start": "36399",
    "end": "39440"
  },
  {
    "text": "about this new feature ok let's get",
    "start": "39440",
    "end": "42840"
  },
  {
    "text": "started",
    "start": "42840",
    "end": "44239"
  },
  {
    "start": "44000",
    "end": "44000"
  },
  {
    "text": "whenever we program a distributed",
    "start": "44239",
    "end": "45840"
  },
  {
    "text": "application on a distributed environment",
    "start": "45840",
    "end": "48079"
  },
  {
    "text": "we have to address communication which",
    "start": "48079",
    "end": "50239"
  },
  {
    "text": "is an essential procedure to exchange",
    "start": "50239",
    "end": "52160"
  },
  {
    "text": "information or according to works",
    "start": "52160",
    "end": "53760"
  },
  {
    "text": "between different processes",
    "start": "53760",
    "end": "55840"
  },
  {
    "text": "the most fundamental form of",
    "start": "55840",
    "end": "57520"
  },
  {
    "text": "communication between two processes",
    "start": "57520",
    "end": "59600"
  },
  {
    "text": "normally appears as send and receive",
    "start": "59600",
    "end": "61840"
  },
  {
    "text": "operations",
    "start": "61840",
    "end": "63520"
  },
  {
    "text": "a single process sends a message to a",
    "start": "63520",
    "end": "65680"
  },
  {
    "text": "receiver process",
    "start": "65680",
    "end": "67200"
  },
  {
    "text": "such as this slide issues the",
    "start": "67200",
    "end": "69439"
  },
  {
    "text": "communication pattern is known",
    "start": "69439",
    "end": "71040"
  },
  {
    "text": "as point-to-point communication which",
    "start": "71040",
    "end": "73280"
  },
  {
    "text": "should be quite familiar to read users",
    "start": "73280",
    "end": "77280"
  },
  {
    "start": "77000",
    "end": "77000"
  },
  {
    "text": "ray has been developed to significantly",
    "start": "77280",
    "end": "79200"
  },
  {
    "text": "reduce the complexity",
    "start": "79200",
    "end": "80799"
  },
  {
    "text": "when realizing such communications in a",
    "start": "80799",
    "end": "82880"
  },
  {
    "text": "distributed program",
    "start": "82880",
    "end": "84560"
  },
  {
    "text": "specifically we can use reboot and",
    "start": "84560",
    "end": "87119"
  },
  {
    "text": "re-get apis",
    "start": "87119",
    "end": "89439"
  },
  {
    "text": "on the sender process we put the data we",
    "start": "89439",
    "end": "91520"
  },
  {
    "text": "want to communicate into risk object",
    "start": "91520",
    "end": "93280"
  },
  {
    "text": "store",
    "start": "93280",
    "end": "93840"
  },
  {
    "text": "by passing the data to the report api on",
    "start": "93840",
    "end": "96960"
  },
  {
    "text": "the receiver set",
    "start": "96960",
    "end": "98400"
  },
  {
    "text": "we pull the data from remote by passing",
    "start": "98400",
    "end": "100799"
  },
  {
    "text": "the data's reference to the right api",
    "start": "100799",
    "end": "103360"
  },
  {
    "text": "which will automatically trigger a lower",
    "start": "103360",
    "end": "105360"
  },
  {
    "text": "layer rpc",
    "start": "105360",
    "end": "106720"
  },
  {
    "text": "to complete the communication",
    "start": "106720",
    "end": "110560"
  },
  {
    "text": "however there are many cases where",
    "start": "110640",
    "end": "112960"
  },
  {
    "start": "111000",
    "end": "111000"
  },
  {
    "text": "ascending process may want to",
    "start": "112960",
    "end": "114399"
  },
  {
    "text": "communicate with multiple receivers at",
    "start": "114399",
    "end": "116079"
  },
  {
    "text": "once",
    "start": "116079",
    "end": "117119"
  },
  {
    "text": "a typical example is in data parallel",
    "start": "117119",
    "end": "118960"
  },
  {
    "text": "distributed machine learning",
    "start": "118960",
    "end": "120479"
  },
  {
    "text": "a training process located on gpo worker",
    "start": "120479",
    "end": "123119"
  },
  {
    "text": "0",
    "start": "123119",
    "end": "124320"
  },
  {
    "text": "derives its grading updates on a local",
    "start": "124320",
    "end": "126640"
  },
  {
    "text": "partition of training data",
    "start": "126640",
    "end": "128239"
  },
  {
    "text": "and then wants to broadcast your",
    "start": "128239",
    "end": "130800"
  },
  {
    "text": "gradients",
    "start": "130800",
    "end": "131440"
  },
  {
    "text": "to all other peer processes on other",
    "start": "131440",
    "end": "133360"
  },
  {
    "text": "gpus or nodes",
    "start": "133360",
    "end": "135040"
  },
  {
    "text": "in order to perform a coordinated update",
    "start": "135040",
    "end": "137440"
  },
  {
    "text": "or model parameters",
    "start": "137440",
    "end": "139280"
  },
  {
    "text": "this pattern called belongs to one of",
    "start": "139280",
    "end": "142720"
  },
  {
    "text": "the many connective communicating tabs",
    "start": "142720",
    "end": "144959"
  },
  {
    "text": "and is very frequently observed in",
    "start": "144959",
    "end": "147280"
  },
  {
    "text": "almost every knowledge digital machine",
    "start": "147280",
    "end": "149360"
  },
  {
    "text": "learning training applications",
    "start": "149360",
    "end": "152400"
  },
  {
    "text": "how can we program such connective",
    "start": "152400",
    "end": "153920"
  },
  {
    "text": "communication pattern on ray",
    "start": "153920",
    "end": "155920"
  },
  {
    "text": "theoretically we can use multiple signal",
    "start": "155920",
    "end": "158080"
  },
  {
    "text": "receive operations",
    "start": "158080",
    "end": "159120"
  },
  {
    "text": "to assemble a broadcast for examples",
    "start": "159120",
    "end": "162959"
  },
  {
    "text": "many report and re-get among different",
    "start": "162959",
    "end": "165360"
  },
  {
    "text": "processes",
    "start": "165360",
    "end": "166160"
  },
  {
    "text": "to achieve this broadcast communication",
    "start": "166160",
    "end": "170160"
  },
  {
    "start": "170000",
    "end": "170000"
  },
  {
    "text": "how about a more complex case let's",
    "start": "170160",
    "end": "172160"
  },
  {
    "text": "consider ring or reduce",
    "start": "172160",
    "end": "173840"
  },
  {
    "text": "which is one of the most adopted",
    "start": "173840",
    "end": "175599"
  },
  {
    "text": "connective pattern in distributed",
    "start": "175599",
    "end": "176879"
  },
  {
    "text": "machinery applications",
    "start": "176879",
    "end": "178879"
  },
  {
    "text": "so how does all reduce work the figure",
    "start": "178879",
    "end": "182080"
  },
  {
    "text": "illustrates the algorithm",
    "start": "182080",
    "end": "183680"
  },
  {
    "text": "it constructs multiple message passing",
    "start": "183680",
    "end": "185680"
  },
  {
    "text": "rings across all processes",
    "start": "185680",
    "end": "187840"
  },
  {
    "text": "and at each step it lets the process",
    "start": "187840",
    "end": "190239"
  },
  {
    "text": "send the parallels data to the next",
    "start": "190239",
    "end": "191920"
  },
  {
    "text": "worker process",
    "start": "191920",
    "end": "193519"
  },
  {
    "text": "once received every worker will reduce",
    "start": "193519",
    "end": "196080"
  },
  {
    "text": "the received value",
    "start": "196080",
    "end": "197200"
  },
  {
    "text": "with its local value then start the next",
    "start": "197200",
    "end": "200159"
  },
  {
    "text": "round of message passing for a different",
    "start": "200159",
    "end": "201920"
  },
  {
    "text": "subset of data",
    "start": "201920",
    "end": "203440"
  },
  {
    "text": "after a few runs all workers will have a",
    "start": "203440",
    "end": "206319"
  },
  {
    "text": "synced copy of the reduced values",
    "start": "206319",
    "end": "210080"
  },
  {
    "text": "assembling a ring ring-reduced",
    "start": "210080",
    "end": "211519"
  },
  {
    "text": "connective using many p2p communication",
    "start": "211519",
    "end": "213599"
  },
  {
    "text": "based",
    "start": "213599",
    "end": "215840"
  },
  {
    "text": "communication based on ray put and",
    "start": "215840",
    "end": "218239"
  },
  {
    "text": "re-get might",
    "start": "218239",
    "end": "218959"
  },
  {
    "text": "still be possible but as we'll see later",
    "start": "218959",
    "end": "221920"
  },
  {
    "text": "it's usually programmatically cumbersome",
    "start": "221920",
    "end": "224159"
  },
  {
    "text": "and might end up with sub-optimal",
    "start": "224159",
    "end": "226080"
  },
  {
    "text": "performance",
    "start": "226080",
    "end": "228640"
  },
  {
    "text": "this drawbacks motivate us to introduce",
    "start": "228720",
    "end": "230879"
  },
  {
    "start": "229000",
    "end": "229000"
  },
  {
    "text": "a new set of high performance connective",
    "start": "230879",
    "end": "232720"
  },
  {
    "text": "primitives into ray",
    "start": "232720",
    "end": "234720"
  },
  {
    "text": "specifically connective primitives",
    "start": "234720",
    "end": "237120"
  },
  {
    "text": "consider communication patterns",
    "start": "237120",
    "end": "238720"
  },
  {
    "text": "happening in a group of processes",
    "start": "238720",
    "end": "241280"
  },
  {
    "text": "to get an impression on how it works",
    "start": "241280",
    "end": "244000"
  },
  {
    "text": "taking the previous grading broadcasting",
    "start": "244000",
    "end": "245840"
  },
  {
    "text": "as an example",
    "start": "245840",
    "end": "247680"
  },
  {
    "text": "instead of assembling the broadcast",
    "start": "247680",
    "end": "249599"
  },
  {
    "text": "using many regret at each participant",
    "start": "249599",
    "end": "251760"
  },
  {
    "text": "process",
    "start": "251760",
    "end": "252959"
  },
  {
    "text": "what we can do is to put all the",
    "start": "252959",
    "end": "255360"
  },
  {
    "text": "processes",
    "start": "255360",
    "end": "256400"
  },
  {
    "text": "usually in the form of reactors or tasks",
    "start": "256400",
    "end": "259359"
  },
  {
    "text": "in the same connective group",
    "start": "259359",
    "end": "261440"
  },
  {
    "text": "and each process in a group invokes the",
    "start": "261440",
    "end": "263520"
  },
  {
    "text": "same connective broadcast call",
    "start": "263520",
    "end": "265280"
  },
  {
    "text": "to start the category communication and",
    "start": "265280",
    "end": "267520"
  },
  {
    "text": "achieve the goal",
    "start": "267520",
    "end": "270240"
  },
  {
    "start": "270000",
    "end": "270000"
  },
  {
    "text": "providing specialized apis for each",
    "start": "270320",
    "end": "272479"
  },
  {
    "text": "connective communication pattern",
    "start": "272479",
    "end": "274240"
  },
  {
    "text": "is programmatically much simpler",
    "start": "274240",
    "end": "276000"
  },
  {
    "text": "compared to assembling a complex",
    "start": "276000",
    "end": "278080"
  },
  {
    "text": "algorithm",
    "start": "278080",
    "end": "278800"
  },
  {
    "text": "using multiple re-get and report rpc",
    "start": "278800",
    "end": "280880"
  },
  {
    "text": "costs",
    "start": "280880",
    "end": "282479"
  },
  {
    "text": "simpler programs also means less",
    "start": "282479",
    "end": "284639"
  },
  {
    "text": "error-prone",
    "start": "284639",
    "end": "286240"
  },
  {
    "text": "another key advantage of providing",
    "start": "286240",
    "end": "288080"
  },
  {
    "text": "specialized apis are",
    "start": "288080",
    "end": "289680"
  },
  {
    "text": "the ability to implement these",
    "start": "289680",
    "end": "291360"
  },
  {
    "text": "primitives at a rather low level",
    "start": "291360",
    "end": "293680"
  },
  {
    "text": "which allows us to make the best use of",
    "start": "293680",
    "end": "296080"
  },
  {
    "text": "the network",
    "start": "296080",
    "end": "296880"
  },
  {
    "text": "hardware such as ethernet infiniband",
    "start": "296880",
    "end": "299919"
  },
  {
    "text": "to provide the greatest communication",
    "start": "299919",
    "end": "301759"
  },
  {
    "text": "performance",
    "start": "301759",
    "end": "303039"
  },
  {
    "text": "or to optimize for different types of",
    "start": "303039",
    "end": "305520"
  },
  {
    "text": "computing devices such as gpus",
    "start": "305520",
    "end": "308080"
  },
  {
    "text": "and avoid many unnecessary overhead as",
    "start": "308080",
    "end": "310479"
  },
  {
    "text": "well see next",
    "start": "310479",
    "end": "313360"
  },
  {
    "start": "314000",
    "end": "314000"
  },
  {
    "text": "so how does the api actually look like",
    "start": "314000",
    "end": "316320"
  },
  {
    "text": "and what benefits can it bring to us",
    "start": "316320",
    "end": "318880"
  },
  {
    "text": "next i'm going to walk you through the",
    "start": "318880",
    "end": "320560"
  },
  {
    "text": "aps by running a programming practice",
    "start": "320560",
    "end": "322960"
  },
  {
    "text": "using the previous example or reduce",
    "start": "322960",
    "end": "325520"
  },
  {
    "text": "ingredients",
    "start": "325520",
    "end": "326400"
  },
  {
    "text": "in data parallel distributed learning in",
    "start": "326400",
    "end": "329440"
  },
  {
    "text": "this case",
    "start": "329440",
    "end": "330000"
  },
  {
    "text": "we have many model training workers each",
    "start": "330000",
    "end": "332479"
  },
  {
    "text": "owning a model replica",
    "start": "332479",
    "end": "334080"
  },
  {
    "text": "that locates on a different process each",
    "start": "334080",
    "end": "336880"
  },
  {
    "text": "replica takes a part of the training",
    "start": "336880",
    "end": "338560"
  },
  {
    "text": "data at the inputs",
    "start": "338560",
    "end": "339840"
  },
  {
    "text": "and computes a local version of the",
    "start": "339840",
    "end": "341600"
  },
  {
    "text": "grading updates",
    "start": "341600",
    "end": "343199"
  },
  {
    "text": "once the gradients on all processes are",
    "start": "343199",
    "end": "345039"
  },
  {
    "text": "ready we invoke an already used",
    "start": "345039",
    "end": "347360"
  },
  {
    "text": "communication",
    "start": "347360",
    "end": "348720"
  },
  {
    "text": "on each process to synchronize the",
    "start": "348720",
    "end": "351039"
  },
  {
    "text": "gradient updates",
    "start": "351039",
    "end": "352639"
  },
  {
    "text": "what all reduce does is that it will",
    "start": "352639",
    "end": "354639"
  },
  {
    "text": "communicate the local gradients of each",
    "start": "354639",
    "end": "356560"
  },
  {
    "text": "process",
    "start": "356560",
    "end": "357199"
  },
  {
    "text": "to all other processes and aggregate",
    "start": "357199",
    "end": "359600"
  },
  {
    "text": "them",
    "start": "359600",
    "end": "360639"
  },
  {
    "text": "after this all processes will have the",
    "start": "360639",
    "end": "363039"
  },
  {
    "text": "aggregated gradients",
    "start": "363039",
    "end": "365360"
  },
  {
    "text": "can safely apply the aggregation to",
    "start": "365360",
    "end": "367680"
  },
  {
    "text": "update their local parameters",
    "start": "367680",
    "end": "369360"
  },
  {
    "text": "and then proceed to the next training",
    "start": "369360",
    "end": "370960"
  },
  {
    "text": "iteration",
    "start": "370960",
    "end": "373520"
  },
  {
    "start": "373000",
    "end": "373000"
  },
  {
    "text": "this is a very typical distributed",
    "start": "373759",
    "end": "375360"
  },
  {
    "text": "workload and array provides convenient",
    "start": "375360",
    "end": "377680"
  },
  {
    "text": "ways to implement this distributed logic",
    "start": "377680",
    "end": "380720"
  },
  {
    "text": "it's natural to express each modal",
    "start": "380720",
    "end": "382479"
  },
  {
    "text": "training worker and its training logic",
    "start": "382479",
    "end": "384240"
  },
  {
    "text": "inside an",
    "start": "384240",
    "end": "384880"
  },
  {
    "text": "actor and let rays spawn and manage many",
    "start": "384880",
    "end": "387600"
  },
  {
    "text": "actors on a cluster",
    "start": "387600",
    "end": "389759"
  },
  {
    "text": "suppose we want to launch a distributed",
    "start": "389759",
    "end": "391520"
  },
  {
    "text": "machine learning training task on 16",
    "start": "391520",
    "end": "393360"
  },
  {
    "text": "gpus spread it across a 16 node cluster",
    "start": "393360",
    "end": "396160"
  },
  {
    "text": "each with one gpu the reactor api allows",
    "start": "396160",
    "end": "399840"
  },
  {
    "text": "us to define a gpu vector",
    "start": "399840",
    "end": "401600"
  },
  {
    "text": "in the way shown on the right of the",
    "start": "401600",
    "end": "403120"
  },
  {
    "text": "slide",
    "start": "403120",
    "end": "404800"
  },
  {
    "text": "note that in each one of the gpu actors",
    "start": "404800",
    "end": "407199"
  },
  {
    "text": "we have created a gpu array",
    "start": "407199",
    "end": "409360"
  },
  {
    "text": "self dot gradients on its designated gpu",
    "start": "409360",
    "end": "412400"
  },
  {
    "text": "and initialization for work through",
    "start": "412400",
    "end": "414720"
  },
  {
    "text": "purpose",
    "start": "414720",
    "end": "415520"
  },
  {
    "text": "think of this array self.gradients as",
    "start": "415520",
    "end": "418400"
  },
  {
    "text": "the gradients of the model parameters",
    "start": "418400",
    "end": "420000"
  },
  {
    "text": "generated at each",
    "start": "420000",
    "end": "421360"
  },
  {
    "text": "version of the training that need to be",
    "start": "421360",
    "end": "423440"
  },
  {
    "text": "repeatedly synchronized",
    "start": "423440",
    "end": "424639"
  },
  {
    "text": "across all actors",
    "start": "424639",
    "end": "427680"
  },
  {
    "start": "428000",
    "end": "428000"
  },
  {
    "text": "with the standard ray api communicating",
    "start": "428639",
    "end": "431039"
  },
  {
    "text": "ingredients between gpu workers would",
    "start": "431039",
    "end": "432960"
  },
  {
    "text": "require a series of re-get calls",
    "start": "432960",
    "end": "435680"
  },
  {
    "text": "and passing around the object reference",
    "start": "435680",
    "end": "437599"
  },
  {
    "text": "across different actors",
    "start": "437599",
    "end": "439759"
  },
  {
    "text": "on the right side we provide a snippet",
    "start": "439759",
    "end": "442319"
  },
  {
    "text": "of the example code",
    "start": "442319",
    "end": "443520"
  },
  {
    "text": "to achieve this using the original reged",
    "start": "443520",
    "end": "445759"
  },
  {
    "text": "report apis",
    "start": "445759",
    "end": "446800"
  },
  {
    "text": "in order in order for this code to work",
    "start": "446800",
    "end": "450639"
  },
  {
    "text": "we need to first substantially enhance",
    "start": "450639",
    "end": "452960"
  },
  {
    "text": "the gpu worker actor class",
    "start": "452960",
    "end": "455120"
  },
  {
    "text": "so it has a few more methods",
    "start": "455120",
    "end": "458400"
  },
  {
    "text": "here we have introduced three new",
    "start": "458400",
    "end": "460080"
  },
  {
    "text": "methods",
    "start": "460080",
    "end": "462000"
  },
  {
    "text": "the put gradient method simply put a",
    "start": "462000",
    "end": "464720"
  },
  {
    "text": "grading array into risk object store",
    "start": "464720",
    "end": "467039"
  },
  {
    "text": "the reduced gradients method does three",
    "start": "467039",
    "end": "468960"
  },
  {
    "text": "steps first",
    "start": "468960",
    "end": "470639"
  },
  {
    "text": "it pulls other's gradients based on the",
    "start": "470639",
    "end": "472479"
  },
  {
    "text": "remote references",
    "start": "472479",
    "end": "474000"
  },
  {
    "text": "second it performs gradient reduction",
    "start": "474000",
    "end": "476720"
  },
  {
    "text": "and third",
    "start": "476720",
    "end": "477360"
  },
  {
    "text": "it puts the reduced gradients back to",
    "start": "477360",
    "end": "479199"
  },
  {
    "text": "the object store",
    "start": "479199",
    "end": "481199"
  },
  {
    "text": "the last method to get reduced gradient",
    "start": "481199",
    "end": "483280"
  },
  {
    "text": "method tries to pull the reduced results",
    "start": "483280",
    "end": "485360"
  },
  {
    "text": "using its object reference",
    "start": "485360",
    "end": "488319"
  },
  {
    "text": "so back to the driver code with these",
    "start": "488319",
    "end": "490479"
  },
  {
    "text": "three new methods",
    "start": "490479",
    "end": "493360"
  },
  {
    "text": "we first let all workers to put their",
    "start": "493360",
    "end": "495440"
  },
  {
    "text": "gradients into object store by calling",
    "start": "495440",
    "end": "497680"
  },
  {
    "text": "the put gradient we then",
    "start": "497680",
    "end": "500720"
  },
  {
    "text": "designate the worker zero as a height",
    "start": "500720",
    "end": "502639"
  },
  {
    "text": "worker and ask",
    "start": "502639",
    "end": "504000"
  },
  {
    "text": "it to pull the gradients generated by",
    "start": "504000",
    "end": "505840"
  },
  {
    "text": "other workers from the object store",
    "start": "505840",
    "end": "507919"
  },
  {
    "text": "and then reduce them and then put the",
    "start": "507919",
    "end": "510319"
  },
  {
    "text": "reduced results back",
    "start": "510319",
    "end": "511360"
  },
  {
    "text": "in object store this is done in the",
    "start": "511360",
    "end": "513440"
  },
  {
    "text": "reduced gradient method",
    "start": "513440",
    "end": "516159"
  },
  {
    "text": "finally all other workers try to get the",
    "start": "516159",
    "end": "518479"
  },
  {
    "text": "reduced results from object",
    "start": "518479",
    "end": "520000"
  },
  {
    "text": "store through a few more rpc calls",
    "start": "520000",
    "end": "523518"
  },
  {
    "text": "note that while this achieves or reduced",
    "start": "523519",
    "end": "525360"
  },
  {
    "text": "communication it is not",
    "start": "525360",
    "end": "527200"
  },
  {
    "text": "strictly following a ring or this",
    "start": "527200",
    "end": "528720"
  },
  {
    "text": "algorithm in fact",
    "start": "528720",
    "end": "530959"
  },
  {
    "text": "implementing a ring or use algorithm",
    "start": "530959",
    "end": "532720"
  },
  {
    "text": "would be much more complex",
    "start": "532720",
    "end": "534000"
  },
  {
    "text": "than this example",
    "start": "534000",
    "end": "536959"
  },
  {
    "start": "537000",
    "end": "537000"
  },
  {
    "text": "do you support any problem on this",
    "start": "537200",
    "end": "538720"
  },
  {
    "text": "process despite",
    "start": "538720",
    "end": "540640"
  },
  {
    "text": "the programming complexity i want to",
    "start": "540640",
    "end": "542800"
  },
  {
    "text": "elaborate a bit more",
    "start": "542800",
    "end": "544160"
  },
  {
    "text": "on why this would cause some performance",
    "start": "544160",
    "end": "546240"
  },
  {
    "text": "issue",
    "start": "546240",
    "end": "547519"
  },
  {
    "text": "communicating between workers using",
    "start": "547519",
    "end": "549600"
  },
  {
    "text": "reboot and re-get",
    "start": "549600",
    "end": "550720"
  },
  {
    "text": "will require going through the re-object",
    "start": "550720",
    "end": "552720"
  },
  {
    "text": "store introducing small overheads",
    "start": "552720",
    "end": "555519"
  },
  {
    "text": "called by object serialization and",
    "start": "555519",
    "end": "557040"
  },
  {
    "text": "digital addition or by object movement",
    "start": "557040",
    "end": "559839"
  },
  {
    "text": "between cpu ram and gpu memory",
    "start": "559839",
    "end": "562560"
  },
  {
    "text": "note that this overhead is incurred at",
    "start": "562560",
    "end": "564640"
  },
  {
    "text": "every re-get operation",
    "start": "564640",
    "end": "567040"
  },
  {
    "text": "consider the fact that every connected",
    "start": "567040",
    "end": "568880"
  },
  {
    "text": "primitive is assembled by many many",
    "start": "568880",
    "end": "570880"
  },
  {
    "text": "re-get operations",
    "start": "570880",
    "end": "572640"
  },
  {
    "text": "and each primitive will be called",
    "start": "572640",
    "end": "574320"
  },
  {
    "text": "repeatedly in an application which is",
    "start": "574320",
    "end": "576480"
  },
  {
    "text": "actually the case",
    "start": "576480",
    "end": "577519"
  },
  {
    "text": "in iterative machine learning training",
    "start": "577519",
    "end": "580399"
  },
  {
    "text": "this overheads can be significantly",
    "start": "580399",
    "end": "582160"
  },
  {
    "text": "amplified and become unacceptable",
    "start": "582160",
    "end": "585680"
  },
  {
    "text": "also note that assembling this computing",
    "start": "585680",
    "end": "587839"
  },
  {
    "text": "pattern from scratch",
    "start": "587839",
    "end": "589279"
  },
  {
    "text": "makes it really difficult to utilize",
    "start": "589279",
    "end": "591200"
  },
  {
    "text": "many optimization opportunities",
    "start": "591200",
    "end": "593440"
  },
  {
    "text": "such as leveraging on vlink and redirect",
    "start": "593440",
    "end": "596640"
  },
  {
    "text": "and other faster hardware specific",
    "start": "596640",
    "end": "599040"
  },
  {
    "text": "communication channels in contrast",
    "start": "599040",
    "end": "605600"
  },
  {
    "start": "602000",
    "end": "602000"
  },
  {
    "text": "with connective communication primitives",
    "start": "605600",
    "end": "607440"
  },
  {
    "text": "we can simplify the code a lot",
    "start": "607440",
    "end": "609519"
  },
  {
    "text": "and boost the performance significantly",
    "start": "609519",
    "end": "613200"
  },
  {
    "text": "like most connective communication",
    "start": "613200",
    "end": "614640"
  },
  {
    "text": "libraries we first establish a connected",
    "start": "614640",
    "end": "617200"
  },
  {
    "text": "group",
    "start": "617200",
    "end": "617760"
  },
  {
    "text": "for this group of 16 gpu actors in the",
    "start": "617760",
    "end": "620240"
  },
  {
    "text": "setup function",
    "start": "620240",
    "end": "621839"
  },
  {
    "text": "in which we invoke the init connected",
    "start": "621839",
    "end": "624480"
  },
  {
    "text": "group api",
    "start": "624480",
    "end": "625600"
  },
  {
    "text": "by passing in a few arguments such as",
    "start": "625600",
    "end": "627680"
  },
  {
    "text": "word size rank",
    "start": "627680",
    "end": "629120"
  },
  {
    "text": "and connected backend once the",
    "start": "629120",
    "end": "631680"
  },
  {
    "text": "connective group is created",
    "start": "631680",
    "end": "633680"
  },
  {
    "text": "we can perform collective communication",
    "start": "633680",
    "end": "635360"
  },
  {
    "text": "using the primitive",
    "start": "635360",
    "end": "636959"
  },
  {
    "text": "here we perform an implicit or reduce",
    "start": "636959",
    "end": "639760"
  },
  {
    "text": "over the self.grading array",
    "start": "639760",
    "end": "641760"
  },
  {
    "text": "using the clinical api to see the",
    "start": "641760",
    "end": "644959"
  },
  {
    "text": "contrast",
    "start": "644959",
    "end": "646000"
  },
  {
    "text": "using a simple connective reduced core",
    "start": "646000",
    "end": "648000"
  },
  {
    "text": "we managed to reduce ingredients across",
    "start": "648000",
    "end": "650079"
  },
  {
    "text": "16 workers and store them in a",
    "start": "650079",
    "end": "652000"
  },
  {
    "text": "self-gradient",
    "start": "652000",
    "end": "653279"
  },
  {
    "text": "buffer in place how do we achieve this",
    "start": "653279",
    "end": "657519"
  },
  {
    "start": "656000",
    "end": "656000"
  },
  {
    "text": "behind the scene we have created the",
    "start": "657519",
    "end": "659600"
  },
  {
    "text": "python bindings",
    "start": "659600",
    "end": "660720"
  },
  {
    "text": "over a few well-known collective",
    "start": "660720",
    "end": "662160"
  },
  {
    "text": "computing backend such as nico from a",
    "start": "662160",
    "end": "664399"
  },
  {
    "text": "media for gpu based communication",
    "start": "664399",
    "end": "666640"
  },
  {
    "text": "and glue from facebook for cpu based",
    "start": "666640",
    "end": "669040"
  },
  {
    "text": "communication",
    "start": "669040",
    "end": "670320"
  },
  {
    "text": "within developed high level python apis",
    "start": "670320",
    "end": "672560"
  },
  {
    "text": "using its prism bindings",
    "start": "672560",
    "end": "674320"
  },
  {
    "text": "and makes them compatible with the ray",
    "start": "674320",
    "end": "676320"
  },
  {
    "text": "programming patterns",
    "start": "676320",
    "end": "677839"
  },
  {
    "text": "that's why we can now reach a lot of",
    "start": "677839",
    "end": "680320"
  },
  {
    "text": "off-the-shelf optimizations from these",
    "start": "680320",
    "end": "682160"
  },
  {
    "text": "windows specific libraries",
    "start": "682160",
    "end": "684800"
  },
  {
    "text": "in the above example we choose the nico",
    "start": "684800",
    "end": "687040"
  },
  {
    "text": "backend as a connective or reduced",
    "start": "687040",
    "end": "688959"
  },
  {
    "text": "backend",
    "start": "688959",
    "end": "689920"
  },
  {
    "text": "which is extremely advantageous to",
    "start": "689920",
    "end": "691680"
  },
  {
    "text": "communicate contents between distributed",
    "start": "691680",
    "end": "693440"
  },
  {
    "text": "gpus",
    "start": "693440",
    "end": "694480"
  },
  {
    "text": "compared to risk grpc based",
    "start": "694480",
    "end": "696399"
  },
  {
    "text": "implementation",
    "start": "696399",
    "end": "697680"
  },
  {
    "text": "since nico is optimized to achieve high",
    "start": "697680",
    "end": "699839"
  },
  {
    "text": "bandwidth and low latency",
    "start": "699839",
    "end": "701519"
  },
  {
    "text": "over pcie and unveiling high-speed",
    "start": "701519",
    "end": "703760"
  },
  {
    "text": "interconnects within a node",
    "start": "703760",
    "end": "705600"
  },
  {
    "text": "and over a media network across nodes",
    "start": "705600",
    "end": "709759"
  },
  {
    "start": "710000",
    "end": "710000"
  },
  {
    "text": "how do primitives perform compared to",
    "start": "710079",
    "end": "712399"
  },
  {
    "text": "re-rpc-based communication on",
    "start": "712399",
    "end": "713839"
  },
  {
    "text": "connectives",
    "start": "713839",
    "end": "715040"
  },
  {
    "text": "here we provide two macro benchmarks a",
    "start": "715040",
    "end": "718160"
  },
  {
    "text": "more comprehensive performance report",
    "start": "718160",
    "end": "719920"
  },
  {
    "text": "can be found in the official",
    "start": "719920",
    "end": "721120"
  },
  {
    "text": "documentation",
    "start": "721120",
    "end": "722880"
  },
  {
    "text": "on the first benchmark we compare the",
    "start": "722880",
    "end": "724959"
  },
  {
    "text": "ray with nickel backend",
    "start": "724959",
    "end": "726560"
  },
  {
    "text": "to rate rpc backend on all reducing",
    "start": "726560",
    "end": "729040"
  },
  {
    "text": "contents between two gpus in one node",
    "start": "729040",
    "end": "731680"
  },
  {
    "text": "we spawn two workers each worker owns",
    "start": "731680",
    "end": "733839"
  },
  {
    "text": "one gpu",
    "start": "733839",
    "end": "734959"
  },
  {
    "text": "another unveiling in this node is",
    "start": "734959",
    "end": "736880"
  },
  {
    "text": "enabled",
    "start": "736880",
    "end": "738560"
  },
  {
    "text": "we observe that across different sizes",
    "start": "738560",
    "end": "740480"
  },
  {
    "text": "of tensors the degree",
    "start": "740480",
    "end": "742160"
  },
  {
    "text": "nickel backend is strictly better and",
    "start": "742160",
    "end": "744880"
  },
  {
    "text": "can be turned to 1000x",
    "start": "744880",
    "end": "746480"
  },
  {
    "text": "faster in terms of latency",
    "start": "746480",
    "end": "750399"
  },
  {
    "text": "for the second benchmark we perform or",
    "start": "750639",
    "end": "752800"
  },
  {
    "text": "reduce communication across 14 processes",
    "start": "752800",
    "end": "756000"
  },
  {
    "text": "spawned on a cluster with seven nodes",
    "start": "756000",
    "end": "758560"
  },
  {
    "text": "issue with two gpus",
    "start": "758560",
    "end": "760639"
  },
  {
    "text": "so that cross node communication is",
    "start": "760639",
    "end": "762240"
  },
  {
    "text": "required still",
    "start": "762240",
    "end": "764399"
  },
  {
    "text": "we observe a similar speed up ranging",
    "start": "764399",
    "end": "766639"
  },
  {
    "text": "from 10x up to 100x lower latency",
    "start": "766639",
    "end": "771440"
  },
  {
    "text": "to say an end-to-end use case we will",
    "start": "771760",
    "end": "774079"
  },
  {
    "start": "772000",
    "end": "772000"
  },
  {
    "text": "use specie project",
    "start": "774079",
    "end": "775600"
  },
  {
    "text": "as an example for the context",
    "start": "775600",
    "end": "778639"
  },
  {
    "text": "species is a very nice library to",
    "start": "778639",
    "end": "780480"
  },
  {
    "text": "provide various nlp features",
    "start": "780480",
    "end": "782880"
  },
  {
    "text": "sweden array have been collaborating a",
    "start": "782880",
    "end": "784880"
  },
  {
    "text": "lot and the specie project",
    "start": "784880",
    "end": "786880"
  },
  {
    "text": "is an extension to enable distributed",
    "start": "786880",
    "end": "788800"
  },
  {
    "text": "training of specific ml pipeline using",
    "start": "788800",
    "end": "791200"
  },
  {
    "text": "raid",
    "start": "791200",
    "end": "792560"
  },
  {
    "text": "in space and array we implement a",
    "start": "792560",
    "end": "795200"
  },
  {
    "text": "sharded primary server",
    "start": "795200",
    "end": "796560"
  },
  {
    "text": "by communicating gradients using a reget",
    "start": "796560",
    "end": "798800"
  },
  {
    "text": "and reset rpc",
    "start": "798800",
    "end": "800000"
  },
  {
    "text": "costs when we replace the wanina array",
    "start": "800000",
    "end": "802880"
  },
  {
    "text": "apis",
    "start": "802880",
    "end": "803440"
  },
  {
    "text": "with the new collective api we observe",
    "start": "803440",
    "end": "806000"
  },
  {
    "text": "constant",
    "start": "806000",
    "end": "806560"
  },
  {
    "text": "end-to-end speed up when training the",
    "start": "806560",
    "end": "808560"
  },
  {
    "text": "specifics the er",
    "start": "808560",
    "end": "810320"
  },
  {
    "text": "stands for name entity recognition",
    "start": "810320",
    "end": "813600"
  },
  {
    "text": "pipelines",
    "start": "813600",
    "end": "814399"
  },
  {
    "text": "on distributed gpu are clusters",
    "start": "814399",
    "end": "817760"
  },
  {
    "text": "so to give a summary of the results if",
    "start": "817760",
    "end": "819839"
  },
  {
    "text": "your applications happen to require",
    "start": "819839",
    "end": "821519"
  },
  {
    "text": "connective communication between",
    "start": "821519",
    "end": "822720"
  },
  {
    "text": "distributed gpus and cpus",
    "start": "822720",
    "end": "824800"
  },
  {
    "text": "we highly recommend to try these",
    "start": "824800",
    "end": "826240"
  },
  {
    "text": "primitives and hopefully speed up could",
    "start": "826240",
    "end": "828480"
  },
  {
    "text": "also be observed in your application",
    "start": "828480",
    "end": "832079"
  },
  {
    "start": "832000",
    "end": "832000"
  },
  {
    "text": "besides all reduce and the nickel",
    "start": "833760",
    "end": "835199"
  },
  {
    "text": "backends the real primitives api",
    "start": "835199",
    "end": "837519"
  },
  {
    "text": "also support many other commonly used",
    "start": "837519",
    "end": "839680"
  },
  {
    "text": "primitives",
    "start": "839680",
    "end": "841040"
  },
  {
    "text": "and also communication between",
    "start": "841040",
    "end": "842399"
  },
  {
    "text": "distributed cpus",
    "start": "842399",
    "end": "844079"
  },
  {
    "text": "or even communication between cpus and",
    "start": "844079",
    "end": "846240"
  },
  {
    "text": "gpus that is",
    "start": "846240",
    "end": "847440"
  },
  {
    "text": "different devices this matrix reports",
    "start": "847440",
    "end": "850560"
  },
  {
    "text": "the current status of the supported",
    "start": "850560",
    "end": "852160"
  },
  {
    "text": "primitives and backends",
    "start": "852160",
    "end": "854320"
  },
  {
    "text": "note that here we use glue as the",
    "start": "854320",
    "end": "856480"
  },
  {
    "text": "default cpu backend",
    "start": "856480",
    "end": "858000"
  },
  {
    "text": "and nico as the default gpu backend",
    "start": "858000",
    "end": "862000"
  },
  {
    "text": "it's worth noting that the scope of this",
    "start": "862079",
    "end": "863920"
  },
  {
    "text": "project also expands a bit further",
    "start": "863920",
    "end": "866240"
  },
  {
    "text": "beyond collective communication it also",
    "start": "866240",
    "end": "868720"
  },
  {
    "text": "offers api for certain review based",
    "start": "868720",
    "end": "870720"
  },
  {
    "text": "point-to-point communication",
    "start": "870720",
    "end": "872639"
  },
  {
    "text": "in this example on the slide we",
    "start": "872639",
    "end": "875839"
  },
  {
    "text": "instantiate the two gpu actors",
    "start": "875839",
    "end": "878320"
  },
  {
    "text": "and use scenario primitives to conduct",
    "start": "878320",
    "end": "880800"
  },
  {
    "text": "p2p communication",
    "start": "880800",
    "end": "882560"
  },
  {
    "text": "in many gpu based applications this",
    "start": "882560",
    "end": "884560"
  },
  {
    "text": "might be faster than the real native rpc",
    "start": "884560",
    "end": "886800"
  },
  {
    "text": "methods",
    "start": "886800",
    "end": "887839"
  },
  {
    "text": "because it can now reach the gpu",
    "start": "887839",
    "end": "889519"
  },
  {
    "text": "specific communication features",
    "start": "889519",
    "end": "892959"
  },
  {
    "start": "893000",
    "end": "893000"
  },
  {
    "text": "despite the advantage of this apis it's",
    "start": "893120",
    "end": "895600"
  },
  {
    "text": "also important to point out of your",
    "start": "895600",
    "end": "897440"
  },
  {
    "text": "limitations of them",
    "start": "897440",
    "end": "899680"
  },
  {
    "text": "first since the connector apis are",
    "start": "899680",
    "end": "901839"
  },
  {
    "text": "essentially performing out of band",
    "start": "901839",
    "end": "903199"
  },
  {
    "text": "communication",
    "start": "903199",
    "end": "904079"
  },
  {
    "text": "between actors or task processes they do",
    "start": "904079",
    "end": "906800"
  },
  {
    "text": "not go through risk object store",
    "start": "906800",
    "end": "909040"
  },
  {
    "text": "well we can bypass certain overheads it",
    "start": "909040",
    "end": "911839"
  },
  {
    "text": "also means we might not be able to enjoy",
    "start": "911839",
    "end": "914000"
  },
  {
    "text": "certain benefits",
    "start": "914000",
    "end": "915040"
  },
  {
    "text": "brought by the object store such as",
    "start": "915040",
    "end": "916800"
  },
  {
    "text": "fault tolerance",
    "start": "916800",
    "end": "919440"
  },
  {
    "text": "second the users of this apis need to",
    "start": "919440",
    "end": "922720"
  },
  {
    "text": "manually manage the lifecycles of the",
    "start": "922720",
    "end": "924480"
  },
  {
    "text": "connective groups it constructed",
    "start": "924480",
    "end": "926480"
  },
  {
    "text": "which might be an added mental overhead",
    "start": "926480",
    "end": "929920"
  },
  {
    "text": "third due to the nature of collaborative",
    "start": "929920",
    "end": "933040"
  },
  {
    "text": "connective communication in order to",
    "start": "933040",
    "end": "935120"
  },
  {
    "text": "complete a connected communication",
    "start": "935120",
    "end": "936880"
  },
  {
    "text": "within a group",
    "start": "936880",
    "end": "938000"
  },
  {
    "text": "the connective api has to be called by",
    "start": "938000",
    "end": "940160"
  },
  {
    "text": "all processes",
    "start": "940160",
    "end": "941040"
  },
  {
    "text": "processes exactly once this introduces",
    "start": "941040",
    "end": "944240"
  },
  {
    "text": "certain risk of deadlocks because one",
    "start": "944240",
    "end": "946399"
  },
  {
    "text": "might forgot to invoke the api at some",
    "start": "946399",
    "end": "948639"
  },
  {
    "text": "participant process",
    "start": "948639",
    "end": "951519"
  },
  {
    "text": "to mitigate this the last issue we also",
    "start": "951519",
    "end": "953519"
  },
  {
    "text": "introduced a declarative version of the",
    "start": "953519",
    "end": "955279"
  },
  {
    "text": "connective apis",
    "start": "955279",
    "end": "957360"
  },
  {
    "text": "normally the collective primitives are",
    "start": "957360",
    "end": "959120"
  },
  {
    "text": "called in an imperative way",
    "start": "959120",
    "end": "960880"
  },
  {
    "text": "that is other participant process",
    "start": "960880",
    "end": "963920"
  },
  {
    "text": "has to make the same connective call",
    "start": "963920",
    "end": "966079"
  },
  {
    "text": "simultaneously",
    "start": "966079",
    "end": "967120"
  },
  {
    "text": "to complete the group communication",
    "start": "967120",
    "end": "970800"
  },
  {
    "text": "besides the deadlock risk as i mentioned",
    "start": "971199",
    "end": "973600"
  },
  {
    "text": "this sometimes might cause certain",
    "start": "973600",
    "end": "975199"
  },
  {
    "text": "restrictions",
    "start": "975199",
    "end": "975920"
  },
  {
    "text": "on how users can use this api to",
    "start": "975920",
    "end": "978000"
  },
  {
    "text": "implement their applications",
    "start": "978000",
    "end": "980079"
  },
  {
    "text": "with risk help we expo explore a bit",
    "start": "980079",
    "end": "983279"
  },
  {
    "text": "further to expose a set of more",
    "start": "983279",
    "end": "984959"
  },
  {
    "text": "intuitive",
    "start": "984959",
    "end": "985839"
  },
  {
    "text": "declarative connective apis soon in this",
    "start": "985839",
    "end": "988800"
  },
  {
    "text": "slide",
    "start": "988800",
    "end": "990000"
  },
  {
    "text": "that some viewers might find useful in",
    "start": "990000",
    "end": "992079"
  },
  {
    "text": "their projects",
    "start": "992079",
    "end": "993680"
  },
  {
    "text": "different from the imperative ones the",
    "start": "993680",
    "end": "996320"
  },
  {
    "text": "declarative api",
    "start": "996320",
    "end": "997839"
  },
  {
    "text": "specifies the entire connective",
    "start": "997839",
    "end": "999680"
  },
  {
    "text": "communication while a single api call",
    "start": "999680",
    "end": "1002160"
  },
  {
    "text": "by passing object reference of tensors",
    "start": "1002160",
    "end": "1004399"
  },
  {
    "text": "owned by each participant process",
    "start": "1004399",
    "end": "1007279"
  },
  {
    "text": "this connective compatible object",
    "start": "1007279",
    "end": "1008880"
  },
  {
    "text": "reference are realized by a simplified",
    "start": "1008880",
    "end": "1011199"
  },
  {
    "text": "python object store with limited",
    "start": "1011199",
    "end": "1013199"
  },
  {
    "text": "functionality compared to the normal ray",
    "start": "1013199",
    "end": "1015199"
  },
  {
    "text": "object's reference",
    "start": "1015199",
    "end": "1017519"
  },
  {
    "text": "the declaration api is supports to be",
    "start": "1017519",
    "end": "1019360"
  },
  {
    "text": "called in a driver program",
    "start": "1019360",
    "end": "1020720"
  },
  {
    "text": "instead of inset instead instead we",
    "start": "1020720",
    "end": "1023519"
  },
  {
    "text": "inside the academic task code",
    "start": "1023519",
    "end": "1025918"
  },
  {
    "text": "due to time limits i won't expand too",
    "start": "1025919",
    "end": "1028000"
  },
  {
    "text": "much on this topic",
    "start": "1028000",
    "end": "1029120"
  },
  {
    "text": "but feel free to try them out and check",
    "start": "1029120",
    "end": "1031120"
  },
  {
    "text": "the read documentations",
    "start": "1031120",
    "end": "1034160"
  },
  {
    "start": "1034000",
    "end": "1034000"
  },
  {
    "text": "on top of this collective's primitives",
    "start": "1034319",
    "end": "1036558"
  },
  {
    "text": "we are building really native digital",
    "start": "1036559",
    "end": "1038160"
  },
  {
    "text": "machine learning training systems",
    "start": "1038160",
    "end": "1039760"
  },
  {
    "text": "such as parameter servers and pipeline",
    "start": "1039760",
    "end": "1042160"
  },
  {
    "text": "parallel training strategies",
    "start": "1042160",
    "end": "1044319"
  },
  {
    "text": "a key advantage is that with risk help",
    "start": "1044319",
    "end": "1047360"
  },
  {
    "text": "they can be used to distribute very",
    "start": "1047360",
    "end": "1049360"
  },
  {
    "text": "arbitrary python-based ml code",
    "start": "1049360",
    "end": "1051360"
  },
  {
    "text": "beyond tensorflow and patrick such as",
    "start": "1051360",
    "end": "1053840"
  },
  {
    "text": "those written in spacey",
    "start": "1053840",
    "end": "1055440"
  },
  {
    "text": "think or jax or even long pi code",
    "start": "1055440",
    "end": "1058960"
  },
  {
    "text": "stay tuned for our development on this",
    "start": "1058960",
    "end": "1061039"
  },
  {
    "text": "part",
    "start": "1061039",
    "end": "1063280"
  },
  {
    "start": "1063000",
    "end": "1063000"
  },
  {
    "text": "so to summarize my talk connective",
    "start": "1063280",
    "end": "1066400"
  },
  {
    "text": "communication are really important part",
    "start": "1066400",
    "end": "1068320"
  },
  {
    "text": "of distributed communication",
    "start": "1068320",
    "end": "1069679"
  },
  {
    "text": "especially in digital machine learning",
    "start": "1069679",
    "end": "1072160"
  },
  {
    "text": "to support its communication",
    "start": "1072160",
    "end": "1075520"
  },
  {
    "text": "and guarantees of use and performance we",
    "start": "1075520",
    "end": "1078559"
  },
  {
    "text": "provide a set of ccl library-backed",
    "start": "1078559",
    "end": "1080720"
  },
  {
    "text": "connective primitive apis on ray",
    "start": "1080720",
    "end": "1083600"
  },
  {
    "text": "they have a few good features for",
    "start": "1083600",
    "end": "1086240"
  },
  {
    "text": "example",
    "start": "1086240",
    "end": "1087200"
  },
  {
    "text": "they are in pure python very easy to",
    "start": "1087200",
    "end": "1089280"
  },
  {
    "text": "program and use",
    "start": "1089280",
    "end": "1090960"
  },
  {
    "text": "this support cpu and gpu arrays and they",
    "start": "1090960",
    "end": "1093440"
  },
  {
    "text": "also support transfers between cpu",
    "start": "1093440",
    "end": "1095919"
  },
  {
    "text": "cpu gpu gpu and cpu to gpu",
    "start": "1095919",
    "end": "1099760"
  },
  {
    "text": "they also support many primitives as",
    "start": "1099760",
    "end": "1102000"
  },
  {
    "text": "well as p2p communications",
    "start": "1102000",
    "end": "1104640"
  },
  {
    "text": "and we provide both imperative and",
    "start": "1104640",
    "end": "1106720"
  },
  {
    "text": "declarative versions of them",
    "start": "1106720",
    "end": "1109520"
  },
  {
    "text": "and in terms of performance we observe",
    "start": "1109520",
    "end": "1112400"
  },
  {
    "text": "that",
    "start": "1112400",
    "end": "1112880"
  },
  {
    "text": "there is a turn to when someone acts",
    "start": "1112880",
    "end": "1114640"
  },
  {
    "text": "faster than rpc-based connected",
    "start": "1114640",
    "end": "1118160"
  },
  {
    "text": "connectives in many use cases",
    "start": "1118160",
    "end": "1122240"
  },
  {
    "text": "there is also an ongoing effort on",
    "start": "1122240",
    "end": "1123919"
  },
  {
    "text": "developing generic distribution machine",
    "start": "1123919",
    "end": "1125360"
  },
  {
    "text": "learning training systems on top of them",
    "start": "1125360",
    "end": "1127360"
  },
  {
    "text": "on top of them stay tuned for more news",
    "start": "1127360",
    "end": "1131360"
  },
  {
    "text": "and if you are interested in the",
    "start": "1131360",
    "end": "1132480"
  },
  {
    "text": "connectives check it out in the link",
    "start": "1132480",
    "end": "1134840"
  },
  {
    "text": "below",
    "start": "1134840",
    "end": "1136400"
  },
  {
    "text": "thanks for attending my talk feel free",
    "start": "1136400",
    "end": "1138320"
  },
  {
    "text": "to raise your hand if you have any",
    "start": "1138320",
    "end": "1141759"
  },
  {
    "text": "questions",
    "start": "1142280",
    "end": "1145280"
  }
]