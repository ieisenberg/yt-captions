[
  {
    "start": "0",
    "end": "98000"
  },
  {
    "text": "thank you uh welcome to the talk uh so",
    "start": "4279",
    "end": "7439"
  },
  {
    "text": "we will be talking about unstructured",
    "start": "7439",
    "end": "9120"
  },
  {
    "text": "data and scaling unstructured data with",
    "start": "9120",
    "end": "11519"
  },
  {
    "text": "any scale andr Data before uh we dive in",
    "start": "11519",
    "end": "16080"
  },
  {
    "text": "just want to introduce myself here I'm",
    "start": "16080",
    "end": "17760"
  },
  {
    "text": "Prine I'm from any scale I lead",
    "start": "17760",
    "end": "19800"
  },
  {
    "text": "engineering team here I also have with",
    "start": "19800",
    "end": "22080"
  },
  {
    "text": "me my teammate",
    "start": "22080",
    "end": "24560"
  },
  {
    "text": "how good afternoon everyone my name is H",
    "start": "24560",
    "end": "28439"
  },
  {
    "text": "I'm team and also I'm uh like one of the",
    "start": "28439",
    "end": "31599"
  },
  {
    "text": "earliest contributor to a reproject so",
    "start": "31599",
    "end": "33440"
  },
  {
    "text": "before any skill I let the Reco team at",
    "start": "33440",
    "end": "35800"
  },
  {
    "text": "end group that that support the world's",
    "start": "35800",
    "end": "38200"
  },
  {
    "text": "largest",
    "start": "38200",
    "end": "39920"
  },
  {
    "text": "redeployment yeah that's me",
    "start": "39920",
    "end": "43480"
  },
  {
    "text": "too all right so the rough outline of",
    "start": "44000",
    "end": "47239"
  },
  {
    "text": "the talk would be uh I want to give you",
    "start": "47239",
    "end": "49399"
  },
  {
    "text": "a brief overview of the patterns we are",
    "start": "49399",
    "end": "52719"
  },
  {
    "text": "seeing in unstructured data use cases in",
    "start": "52719",
    "end": "54719"
  },
  {
    "text": "the industry and also introduce some of",
    "start": "54719",
    "end": "57359"
  },
  {
    "text": "the technical challenges we see uh when",
    "start": "57359",
    "end": "59640"
  },
  {
    "text": "people will tend to scale these",
    "start": "59640",
    "end": "60920"
  },
  {
    "text": "unstructured data use cases and then we",
    "start": "60920",
    "end": "63559"
  },
  {
    "text": "claim uh Ray dat Ray data as a solution",
    "start": "63559",
    "end": "66439"
  },
  {
    "text": "and show you how Ray data achieves that",
    "start": "66439",
    "end": "69200"
  },
  {
    "text": "the rest of the talk we would be deep",
    "start": "69200",
    "end": "70720"
  },
  {
    "text": "diving into the architecture of Ray data",
    "start": "70720",
    "end": "73640"
  },
  {
    "text": "and some of the optimizations we see on",
    "start": "73640",
    "end": "75960"
  },
  {
    "text": "R data on any scale which we which we",
    "start": "75960",
    "end": "78040"
  },
  {
    "text": "call as rate turbo which you might have",
    "start": "78040",
    "end": "79920"
  },
  {
    "text": "heard in the keynote and other talks and",
    "start": "79920",
    "end": "82400"
  },
  {
    "text": "then we do have a case study of stable",
    "start": "82400",
    "end": "85320"
  },
  {
    "text": "diffusion data processing uh wherein you",
    "start": "85320",
    "end": "87720"
  },
  {
    "text": "can see all the tools that Ray data",
    "start": "87720",
    "end": "89560"
  },
  {
    "text": "provides and observability scaling and",
    "start": "89560",
    "end": "93159"
  },
  {
    "text": "uh performance we would go through that",
    "start": "93159",
    "end": "95600"
  },
  {
    "text": "in the case study so with that let me",
    "start": "95600",
    "end": "98079"
  },
  {
    "start": "98000",
    "end": "186000"
  },
  {
    "text": "get started with the use cases for",
    "start": "98079",
    "end": "100200"
  },
  {
    "text": "unstructured data so unstructured data",
    "start": "100200",
    "end": "103159"
  },
  {
    "text": "so why do we care about unstructured",
    "start": "103159",
    "end": "105680"
  },
  {
    "text": "data the first main use case is pretty",
    "start": "105680",
    "end": "108520"
  },
  {
    "text": "intuitive we have been seeing this for",
    "start": "108520",
    "end": "109920"
  },
  {
    "text": "over a decade now basic object detection",
    "start": "109920",
    "end": "112439"
  },
  {
    "text": "in images but then over the recent years",
    "start": "112439",
    "end": "115799"
  },
  {
    "text": "we have seen more use cases of",
    "start": "115799",
    "end": "117759"
  },
  {
    "text": "unstructured data like for example",
    "start": "117759",
    "end": "120399"
  },
  {
    "text": "in the field of Medical indust in the",
    "start": "120399",
    "end": "122640"
  },
  {
    "text": "field of healthcare we do see a lot of",
    "start": "122640",
    "end": "125320"
  },
  {
    "text": "analysis on images and other data and",
    "start": "125320",
    "end": "128319"
  },
  {
    "text": "then geospatial data brings a different",
    "start": "128319",
    "end": "130119"
  },
  {
    "text": "dimension to unstructured data you can",
    "start": "130119",
    "end": "132120"
  },
  {
    "text": "you can imagine all the all the",
    "start": "132120",
    "end": "134080"
  },
  {
    "text": "industries that have recently propped up",
    "start": "134080",
    "end": "136000"
  },
  {
    "text": "like R hailing Industries or like",
    "start": "136000",
    "end": "137840"
  },
  {
    "text": "automative Industries or even like",
    "start": "137840",
    "end": "140280"
  },
  {
    "text": "people using geospatial data for Niche",
    "start": "140280",
    "end": "142840"
  },
  {
    "text": "use cases like studying crop cultures or",
    "start": "142840",
    "end": "146040"
  },
  {
    "text": "other use cases uh even like oil wells",
    "start": "146040",
    "end": "148760"
  },
  {
    "text": "uh and other stuff",
    "start": "148760",
    "end": "151360"
  },
  {
    "text": "and then a recent pattern that we are",
    "start": "151360",
    "end": "152760"
  },
  {
    "text": "seeing is also on manufacturing and",
    "start": "152760",
    "end": "154599"
  },
  {
    "text": "Manufacturing quality there is a lot of",
    "start": "154599",
    "end": "156280"
  },
  {
    "text": "insights and data collection that is",
    "start": "156280",
    "end": "157680"
  },
  {
    "text": "happening on manufacturing industry and",
    "start": "157680",
    "end": "160080"
  },
  {
    "text": "then robotics we see uh this includes",
    "start": "160080",
    "end": "162879"
  },
  {
    "text": "human robots but also things like uh",
    "start": "162879",
    "end": "165959"
  },
  {
    "text": "self-driving cards wherein there is a",
    "start": "165959",
    "end": "167760"
  },
  {
    "text": "lot of like perception models which are",
    "start": "167760",
    "end": "169519"
  },
  {
    "text": "usually run on point clouds or lighter",
    "start": "169519",
    "end": "171599"
  },
  {
    "text": "data or even image data all these use",
    "start": "171599",
    "end": "174599"
  },
  {
    "text": "cases are just a beginning but this is",
    "start": "174599",
    "end": "178080"
  },
  {
    "text": "only this also shows us that",
    "start": "178080",
    "end": "180040"
  },
  {
    "text": "unstructured data is going to keep going",
    "start": "180040",
    "end": "181800"
  },
  {
    "text": "increasing everywhere and it is going to",
    "start": "181800",
    "end": "183599"
  },
  {
    "text": "be in all use cases we see now what are",
    "start": "183599",
    "end": "186799"
  },
  {
    "start": "186000",
    "end": "323000"
  },
  {
    "text": "some of the challenges that we see when",
    "start": "186799",
    "end": "188640"
  },
  {
    "text": "we run these unstructured data workloads",
    "start": "188640",
    "end": "190599"
  },
  {
    "text": "in traditional data pipelines and Data",
    "start": "190599",
    "end": "192879"
  },
  {
    "text": "Systems one one is one of them being",
    "start": "192879",
    "end": "196239"
  },
  {
    "text": "heterogeneous compute these unstructured",
    "start": "196239",
    "end": "198720"
  },
  {
    "text": "data processing pipelines are almost",
    "start": "198720",
    "end": "200959"
  },
  {
    "text": "fundamentally always involving multiple",
    "start": "200959",
    "end": "203799"
  },
  {
    "text": "Computer Resources like CPUs and gpus",
    "start": "203799",
    "end": "206599"
  },
  {
    "text": "here I show a simple example of a very",
    "start": "206599",
    "end": "209439"
  },
  {
    "text": "simple unstructured data processing",
    "start": "209439",
    "end": "211239"
  },
  {
    "text": "pipeline which has three stages as you",
    "start": "211239",
    "end": "213280"
  },
  {
    "text": "can see the third stage has a GPU",
    "start": "213280",
    "end": "215400"
  },
  {
    "text": "inference and the first two stages are",
    "start": "215400",
    "end": "216959"
  },
  {
    "text": "mostly CPU bound this is quite common in",
    "start": "216959",
    "end": "219799"
  },
  {
    "text": "most unstructured data use cases what we",
    "start": "219799",
    "end": "222159"
  },
  {
    "text": "do see when you use traditional data",
    "start": "222159",
    "end": "224560"
  },
  {
    "text": "pipelines or Data Systems is a lot of",
    "start": "224560",
    "end": "227239"
  },
  {
    "text": "computer resource uh misutilization in",
    "start": "227239",
    "end": "230439"
  },
  {
    "text": "this picture you can see the red line",
    "start": "230439",
    "end": "232159"
  },
  {
    "text": "which shows that even though some",
    "start": "232159",
    "end": "234319"
  },
  {
    "text": "batches of data which are those blue",
    "start": "234319",
    "end": "235959"
  },
  {
    "text": "squares have finished some processing on",
    "start": "235959",
    "end": "238239"
  },
  {
    "text": "the first two stages we haven't yet put",
    "start": "238239",
    "end": "241040"
  },
  {
    "text": "the gpus to utilization to work this is",
    "start": "241040",
    "end": "244280"
  },
  {
    "text": "a big usage uh suboptimal usage which we",
    "start": "244280",
    "end": "247519"
  },
  {
    "text": "think can be solved in a better way the",
    "start": "247519",
    "end": "250599"
  },
  {
    "text": "other problem that we see is pure scale",
    "start": "250599",
    "end": "252560"
  },
  {
    "text": "and reliability issues one is obviously",
    "start": "252560",
    "end": "255400"
  },
  {
    "text": "because this unstructured data has lot",
    "start": "255400",
    "end": "257680"
  },
  {
    "text": "of uh explosion of unstructured data",
    "start": "257680",
    "end": "259959"
  },
  {
    "text": "definitely increased the scale of data",
    "start": "259959",
    "end": "262079"
  },
  {
    "text": "we are processing but also the patterns",
    "start": "262079",
    "end": "264400"
  },
  {
    "text": "are different uh because these",
    "start": "264400",
    "end": "266440"
  },
  {
    "text": "unstructured data processing also",
    "start": "266440",
    "end": "267960"
  },
  {
    "text": "involve a lot of heavy GPU usages it's",
    "start": "267960",
    "end": "270280"
  },
  {
    "text": "pretty common for people to use spot",
    "start": "270280",
    "end": "272400"
  },
  {
    "text": "instances in order to run these",
    "start": "272400",
    "end": "274360"
  },
  {
    "text": "pipelines which means preemptions or",
    "start": "274360",
    "end": "277280"
  },
  {
    "text": "failures are very common so instead of",
    "start": "277280",
    "end": "279639"
  },
  {
    "text": "thinking fall tolerance as a fail safe",
    "start": "279639",
    "end": "281720"
  },
  {
    "text": "mechanism you have to think about this",
    "start": "281720",
    "end": "283400"
  },
  {
    "text": "as a first class citizen fall tolerance",
    "start": "283400",
    "end": "285479"
  },
  {
    "text": "becomes a first class citizens in this",
    "start": "285479",
    "end": "287479"
  },
  {
    "text": "in these pipelines next is a share",
    "start": "287479",
    "end": "290039"
  },
  {
    "text": "complexity of the ecosystem on one end",
    "start": "290039",
    "end": "293479"
  },
  {
    "text": "you see in this unstructured data",
    "start": "293479",
    "end": "295160"
  },
  {
    "text": "pipelines is different data sources",
    "start": "295160",
    "end": "297520"
  },
  {
    "text": "different formats of data predominantly",
    "start": "297520",
    "end": "300360"
  },
  {
    "text": "unru predominantly with no defined",
    "start": "300360",
    "end": "302639"
  },
  {
    "text": "schema on the other end is you see a",
    "start": "302639",
    "end": "305240"
  },
  {
    "text": "traditional ml ecosystem like your",
    "start": "305240",
    "end": "306960"
  },
  {
    "text": "training systems or your like ml",
    "start": "306960",
    "end": "308880"
  },
  {
    "text": "inferencing systems we today existing",
    "start": "308880",
    "end": "312360"
  },
  {
    "text": "Solutions are very fragmented you don't",
    "start": "312360",
    "end": "314759"
  },
  {
    "text": "have one system which can bring you from",
    "start": "314759",
    "end": "317039"
  },
  {
    "text": "one stage to the which can run through",
    "start": "317039",
    "end": "319319"
  },
  {
    "text": "all the stages of these",
    "start": "319319",
    "end": "321800"
  },
  {
    "text": "pipeline we claim that Ray data helps",
    "start": "321800",
    "end": "324479"
  },
  {
    "text": "solve all these problems and in order to",
    "start": "324479",
    "end": "327720"
  },
  {
    "text": "as you can see from this picture ray",
    "start": "327720",
    "end": "329240"
  },
  {
    "text": "data can help solve the heterogeneous",
    "start": "329240",
    "end": "330919"
  },
  {
    "text": "compute Problem by intellig by an",
    "start": "330919",
    "end": "333680"
  },
  {
    "text": "innovation called streaming execution",
    "start": "333680",
    "end": "336039"
  },
  {
    "text": "what we can do with this is we are able",
    "start": "336039",
    "end": "337880"
  },
  {
    "text": "to maximize the resource utilization at",
    "start": "337880",
    "end": "340400"
  },
  {
    "text": "every stage of the pipeline we don't",
    "start": "340400",
    "end": "342280"
  },
  {
    "text": "need to wait for every stage to be",
    "start": "342280",
    "end": "343960"
  },
  {
    "text": "finished before you start putting your",
    "start": "343960",
    "end": "345680"
  },
  {
    "text": "computer resources in the next stage to",
    "start": "345680",
    "end": "347520"
  },
  {
    "text": "use this helps you maximize your GPA",
    "start": "347520",
    "end": "350560"
  },
  {
    "text": "utilization and also reduce the cost",
    "start": "350560",
    "end": "353680"
  },
  {
    "text": "next is scale and reliability we",
    "start": "353680",
    "end": "355319"
  },
  {
    "text": "designed the system with fall tolerance",
    "start": "355319",
    "end": "357240"
  },
  {
    "text": "as a first class citizen especially on",
    "start": "357240",
    "end": "359360"
  },
  {
    "text": "rate turbo we have implemented a lot of",
    "start": "359360",
    "end": "361360"
  },
  {
    "text": "proprietary checkpointing and resum",
    "start": "361360",
    "end": "363039"
  },
  {
    "text": "ability features which you will see",
    "start": "363039",
    "end": "364520"
  },
  {
    "text": "later which will help you recover and",
    "start": "364520",
    "end": "366800"
  },
  {
    "text": "run this platform regardless of failures",
    "start": "366800",
    "end": "369319"
  },
  {
    "text": "at any stage and also on partial",
    "start": "369319",
    "end": "371720"
  },
  {
    "text": "failures the system just seamlessly",
    "start": "371720",
    "end": "373400"
  },
  {
    "text": "continues on full failures of like a",
    "start": "373400",
    "end": "375720"
  },
  {
    "text": "driver node in this case you would be",
    "start": "375720",
    "end": "377599"
  },
  {
    "text": "able to seamlessly recover without any",
    "start": "377599",
    "end": "379720"
  },
  {
    "text": "Miss without having to restart the job",
    "start": "379720",
    "end": "381560"
  },
  {
    "text": "at any stage and then because Ray data",
    "start": "381560",
    "end": "385120"
  },
  {
    "text": "is built on top of Ray it gives you a",
    "start": "385120",
    "end": "387960"
  },
  {
    "text": "really flexible and performance API and",
    "start": "387960",
    "end": "390720"
  },
  {
    "text": "being pythonic in nature means that it",
    "start": "390720",
    "end": "392759"
  },
  {
    "text": "integrates seamlessly into all the ml",
    "start": "392759",
    "end": "394960"
  },
  {
    "text": "ecosystem what this means is you will be",
    "start": "394960",
    "end": "397360"
  },
  {
    "text": "able to in single code and a single",
    "start": "397360",
    "end": "399360"
  },
  {
    "text": "pipeline be able to run your entire data",
    "start": "399360",
    "end": "401960"
  },
  {
    "text": "processing inferencing or even training",
    "start": "401960",
    "end": "404120"
  },
  {
    "text": "pipeline you don't need to have to",
    "start": "404120",
    "end": "405880"
  },
  {
    "text": "checkpoint the solutions and have to",
    "start": "405880",
    "end": "407560"
  },
  {
    "text": "come up with a different framework for",
    "start": "407560",
    "end": "409120"
  },
  {
    "text": "doing the next stages of your pipeline",
    "start": "409120",
    "end": "410919"
  },
  {
    "text": "you can do all of this in a single",
    "start": "410919",
    "end": "412319"
  },
  {
    "text": "simple Pipeline and that is available on",
    "start": "412319",
    "end": "414759"
  },
  {
    "text": "R",
    "start": "414759",
    "end": "416639"
  },
  {
    "text": "Data before we go into R data Deep dive",
    "start": "416639",
    "end": "419599"
  },
  {
    "text": "and apis let me go through some use",
    "start": "419599",
    "end": "421599"
  },
  {
    "text": "cases uh we have been seeing a lot of",
    "start": "421599",
    "end": "424400"
  },
  {
    "text": "usage of Ray data in the industry you",
    "start": "424400",
    "end": "426479"
  },
  {
    "text": "might have heard some tech talks about",
    "start": "426479",
    "end": "427960"
  },
  {
    "text": "it in the previous during the course of",
    "start": "427960",
    "end": "430080"
  },
  {
    "text": "the summit I picked up some of those",
    "start": "430080",
    "end": "432599"
  },
  {
    "text": "like Amazon has been using it as using",
    "start": "432599",
    "end": "434919"
  },
  {
    "text": "it you might have seen it in the keynote",
    "start": "434919",
    "end": "436680"
  },
  {
    "text": "they have they have got up to 90%",
    "start": "436680",
    "end": "438440"
  },
  {
    "text": "efficiency using Ray data on Ray data",
    "start": "438440",
    "end": "441440"
  },
  {
    "text": "Roblox has been recently using this data",
    "start": "441440",
    "end": "444319"
  },
  {
    "text": "and they they have tremendously",
    "start": "444319",
    "end": "446039"
  },
  {
    "text": "benefited from this Pinterest is another",
    "start": "446039",
    "end": "448599"
  },
  {
    "text": "massive user of Ray data on open source",
    "start": "448599",
    "end": "451319"
  },
  {
    "text": "they have been running this tool for",
    "start": "451319",
    "end": "453000"
  },
  {
    "text": "their GPU based models and they have",
    "start": "453000",
    "end": "454680"
  },
  {
    "text": "seen a lot of benefits in both both in",
    "start": "454680",
    "end": "457720"
  },
  {
    "text": "terms of usability and also in terms of",
    "start": "457720",
    "end": "460680"
  },
  {
    "text": "performance let me give you a peek into",
    "start": "460680",
    "end": "463400"
  },
  {
    "text": "how Ray data allows you to express these",
    "start": "463400",
    "end": "465879"
  },
  {
    "text": "pipelines at the core rad data has",
    "start": "465879",
    "end": "468240"
  },
  {
    "text": "simple read and rate operations like I",
    "start": "468240",
    "end": "470560"
  },
  {
    "text": "said in the earlier slide about",
    "start": "470560",
    "end": "472840"
  },
  {
    "text": "flexibility and support for in ml",
    "start": "472840",
    "end": "475520"
  },
  {
    "text": "ecosystem it supports read and write",
    "start": "475520",
    "end": "477879"
  },
  {
    "text": "from lot of different data sources and",
    "start": "477879",
    "end": "480479"
  },
  {
    "text": "lot of different formats in fact on Ray",
    "start": "480479",
    "end": "483000"
  },
  {
    "text": "turbo we have even optimized some of",
    "start": "483000",
    "end": "485080"
  },
  {
    "text": "these reads and writes for unstructured",
    "start": "485080",
    "end": "487199"
  },
  {
    "text": "data like images and videos and we do",
    "start": "487199",
    "end": "489039"
  },
  {
    "text": "provide proprietary extensions for",
    "start": "489039",
    "end": "491520"
  },
  {
    "text": "those and Ray data once you read the",
    "start": "491520",
    "end": "494319"
  },
  {
    "text": "data the fundamental object that you get",
    "start": "494319",
    "end": "496199"
  },
  {
    "text": "is a data set on which you can do any",
    "start": "496199",
    "end": "498360"
  },
  {
    "text": "kind of data transformation you can do",
    "start": "498360",
    "end": "500599"
  },
  {
    "text": "data Transformations row by row like",
    "start": "500599",
    "end": "502520"
  },
  {
    "text": "filters and Maps but also Ray data",
    "start": "502520",
    "end": "504800"
  },
  {
    "text": "provides you on a way to run these",
    "start": "504800",
    "end": "506759"
  },
  {
    "text": "operations in batches which which is",
    "start": "506759",
    "end": "508560"
  },
  {
    "text": "much more performant for example map",
    "start": "508560",
    "end": "510639"
  },
  {
    "text": "batches can be done under row of data at",
    "start": "510639",
    "end": "512919"
  },
  {
    "text": "a given time in in some cases it's a lot",
    "start": "512919",
    "end": "515680"
  },
  {
    "text": "more performant than doing a rowby row",
    "start": "515680",
    "end": "518719"
  },
  {
    "text": "operations and we provide basic all the",
    "start": "518719",
    "end": "521080"
  },
  {
    "text": "consumption operations like show take",
    "start": "521080",
    "end": "523440"
  },
  {
    "text": "all these operations which extract the",
    "start": "523440",
    "end": "525080"
  },
  {
    "text": "data at end of the",
    "start": "525080",
    "end": "526519"
  },
  {
    "text": "pipeline and then we also have",
    "start": "526519",
    "end": "528880"
  },
  {
    "text": "aggregations on Ray turbo we also",
    "start": "528880",
    "end": "531320"
  },
  {
    "text": "provide streaming aggregations meaning",
    "start": "531320",
    "end": "533160"
  },
  {
    "text": "you would be able to stream the",
    "start": "533160",
    "end": "534560"
  },
  {
    "text": "operation operators stream different",
    "start": "534560",
    "end": "536519"
  },
  {
    "text": "operators and aggregate",
    "start": "536519",
    "end": "538279"
  },
  {
    "text": "them and and one of the Innovations of",
    "start": "538279",
    "end": "540880"
  },
  {
    "text": "Ray data because of the N because it is",
    "start": "540880",
    "end": "542720"
  },
  {
    "text": "built on top of Ray is it allows you to",
    "start": "542720",
    "end": "545160"
  },
  {
    "text": "express Computer Resources easily so you",
    "start": "545160",
    "end": "548000"
  },
  {
    "text": "can specify your concurrency you can",
    "start": "548000",
    "end": "550200"
  },
  {
    "text": "specify your compute strategy you can",
    "start": "550200",
    "end": "552480"
  },
  {
    "text": "specify whether the operators have to be",
    "start": "552480",
    "end": "554399"
  },
  {
    "text": "using CPUs and gpus what this allows you",
    "start": "554399",
    "end": "557120"
  },
  {
    "text": "to do it it allows you to scale",
    "start": "557120",
    "end": "559040"
  },
  {
    "text": "different stages of pipeline in in",
    "start": "559040",
    "end": "561040"
  },
  {
    "text": "different computer resources at",
    "start": "561040",
    "end": "562480"
  },
  {
    "text": "different concurrency this is super",
    "start": "562480",
    "end": "564480"
  },
  {
    "text": "powerful I'll show as you will see in",
    "start": "564480",
    "end": "566480"
  },
  {
    "text": "the later in the talk this is super",
    "start": "566480",
    "end": "567959"
  },
  {
    "text": "powerful when you have to utilize",
    "start": "567959",
    "end": "570000"
  },
  {
    "text": "maximize utilization of Computer",
    "start": "570000",
    "end": "571640"
  },
  {
    "text": "Resources at different",
    "start": "571640",
    "end": "573480"
  },
  {
    "text": "stages and then we have we have a lot of",
    "start": "573480",
    "end": "576480"
  },
  {
    "text": "Integrations to ml ecosystem for example",
    "start": "576480",
    "end": "578680"
  },
  {
    "text": "we have Integrations with py to we have",
    "start": "578680",
    "end": "580360"
  },
  {
    "text": "Integrations with tensorflow again this",
    "start": "580360",
    "end": "582440"
  },
  {
    "text": "goes back to what I said in the previous",
    "start": "582440",
    "end": "584040"
  },
  {
    "text": "slide it allows you to seamlessly",
    "start": "584040",
    "end": "585519"
  },
  {
    "text": "integrate this pipeline end to",
    "start": "585519",
    "end": "588560"
  },
  {
    "text": "end this is a simple example putting",
    "start": "588560",
    "end": "591160"
  },
  {
    "text": "together everything I've shown so far",
    "start": "591160",
    "end": "593040"
  },
  {
    "text": "what you see on the left is a simple",
    "start": "593040",
    "end": "594720"
  },
  {
    "text": "code to do like a three-stage p",
    "start": "594720",
    "end": "597000"
  },
  {
    "text": "three-stage data processing on image",
    "start": "597000",
    "end": "599600"
  },
  {
    "text": "data the first stage is just a simple",
    "start": "599600",
    "end": "601920"
  },
  {
    "text": "CPU operation which is just resizing and",
    "start": "601920",
    "end": "604800"
  },
  {
    "text": "the second stage is segmentation model",
    "start": "604800",
    "end": "607160"
  },
  {
    "text": "and the third is a classification model",
    "start": "607160",
    "end": "609480"
  },
  {
    "text": "as you can see in the API you are able",
    "start": "609480",
    "end": "611839"
  },
  {
    "text": "to express the concurrency of each",
    "start": "611839",
    "end": "613839"
  },
  {
    "text": "operation easily with a simple line of",
    "start": "613839",
    "end": "615680"
  },
  {
    "text": "code and at the same time you're also",
    "start": "615680",
    "end": "617600"
  },
  {
    "text": "able to tell where each of those",
    "start": "617600",
    "end": "619240"
  },
  {
    "text": "operations needs to run and how much",
    "start": "619240",
    "end": "620920"
  },
  {
    "text": "computer resource it can",
    "start": "620920",
    "end": "622480"
  },
  {
    "text": "utilize if you see the right side of the",
    "start": "622480",
    "end": "625000"
  },
  {
    "text": "of the picture you will see that each of",
    "start": "625000",
    "end": "626880"
  },
  {
    "text": "those is a different stage Each of which",
    "start": "626880",
    "end": "629360"
  },
  {
    "text": "which is scaling at a different level",
    "start": "629360",
    "end": "631240"
  },
  {
    "text": "like one of them is scaling to four node",
    "start": "631240",
    "end": "633480"
  },
  {
    "text": "four actors and another one to eight",
    "start": "633480",
    "end": "635279"
  },
  {
    "text": "actors and each of them is able to",
    "start": "635279",
    "end": "637200"
  },
  {
    "text": "perform and all the data is transferred",
    "start": "637200",
    "end": "639240"
  },
  {
    "text": "from one stage to other stage in a",
    "start": "639240",
    "end": "640839"
  },
  {
    "text": "streaming way that way you don't need to",
    "start": "640839",
    "end": "642800"
  },
  {
    "text": "wait for one stage to completely finish",
    "start": "642800",
    "end": "644560"
  },
  {
    "text": "before the next stage starts its work",
    "start": "644560",
    "end": "646560"
  },
  {
    "text": "this maximizes utilization so all the",
    "start": "646560",
    "end": "648560"
  },
  {
    "text": "stages are working",
    "start": "648560",
    "end": "650880"
  },
  {
    "text": "concurrently to show you how all of this",
    "start": "650880",
    "end": "653120"
  },
  {
    "start": "652000",
    "end": "968000"
  },
  {
    "text": "is done under the hood let me bring in",
    "start": "653120",
    "end": "655120"
  },
  {
    "text": "how who will walk you through the",
    "start": "655120",
    "end": "656480"
  },
  {
    "text": "architecture of Ray data",
    "start": "656480",
    "end": "660480"
  },
  {
    "text": "okay uh thanks bra and H everyone and in",
    "start": "661079",
    "end": "663200"
  },
  {
    "text": "the next section I'm going to dive into",
    "start": "663200",
    "end": "665320"
  },
  {
    "text": "the re internal architecture of R data",
    "start": "665320",
    "end": "667639"
  },
  {
    "text": "and explain how R data like resolve the",
    "start": "667639",
    "end": "670680"
  },
  {
    "text": "technical challenges we mentioned",
    "start": "670680",
    "end": "672079"
  },
  {
    "text": "earlier with some key",
    "start": "672079",
    "end": "674720"
  },
  {
    "text": "Innovations so first of all let's take a",
    "start": "674720",
    "end": "676760"
  },
  {
    "text": "look at this simple example of B",
    "start": "676760",
    "end": "678600"
  },
  {
    "text": "inference so we have a pipeline of four",
    "start": "678600",
    "end": "681320"
  },
  {
    "text": "stages so when running this code the",
    "start": "681320",
    "end": "683639"
  },
  {
    "text": "first thing really has going to do is to",
    "start": "683639",
    "end": "685200"
  },
  {
    "text": "convert the user code to a logical plan",
    "start": "685200",
    "end": "688760"
  },
  {
    "text": "so basically logical plan is a consist",
    "start": "688760",
    "end": "691040"
  },
  {
    "text": "of several logical operators that Define",
    "start": "691040",
    "end": "693920"
  },
  {
    "text": "what to do for each stage of data",
    "start": "693920",
    "end": "695959"
  },
  {
    "text": "processing and we can see we have four",
    "start": "695959",
    "end": "698560"
  },
  {
    "text": "operators here so rate transform",
    "start": "698560",
    "end": "701000"
  },
  {
    "text": "inference and right so among these four",
    "start": "701000",
    "end": "703920"
  },
  {
    "text": "operators only the inference operator",
    "start": "703920",
    "end": "706240"
  },
  {
    "text": "use GPU resource so this is because we",
    "start": "706240",
    "end": "708839"
  },
  {
    "text": "have set number gpus 21 for it and other",
    "start": "708839",
    "end": "712200"
  },
  {
    "text": "operators by default only use CPU",
    "start": "712200",
    "end": "714839"
  },
  {
    "text": "resource and the next thing we will do",
    "start": "714839",
    "end": "717200"
  },
  {
    "text": "is to convert the logical plan into a",
    "start": "717200",
    "end": "719560"
  },
  {
    "text": "physical plan so basically physical a",
    "start": "719560",
    "end": "722680"
  },
  {
    "text": "physical plan consist of multiple",
    "start": "722680",
    "end": "724360"
  },
  {
    "text": "physical operators let let Define the uh",
    "start": "724360",
    "end": "728040"
  },
  {
    "text": "concrete implementation of how to",
    "start": "728040",
    "end": "729800"
  },
  {
    "text": "process the data and also by converting",
    "start": "729800",
    "end": "732639"
  },
  {
    "text": "the logical plan to a physical plan and",
    "start": "732639",
    "end": "735600"
  },
  {
    "text": "the plan will also be op optimized for",
    "start": "735600",
    "end": "737839"
  },
  {
    "text": "example in this case um we can fuse the",
    "start": "737839",
    "end": "740440"
  },
  {
    "text": "read and transform together as one",
    "start": "740440",
    "end": "742440"
  },
  {
    "text": "single physical operator because labels",
    "start": "742440",
    "end": "744720"
  },
  {
    "text": "only use CPU",
    "start": "744720",
    "end": "748000"
  },
  {
    "text": "resource and in Red Data the basic unit",
    "start": "748000",
    "end": "751279"
  },
  {
    "text": "for unit for data processing and data",
    "start": "751279",
    "end": "754079"
  },
  {
    "text": "transfer is called a data block so",
    "start": "754079",
    "end": "757160"
  },
  {
    "text": "basically for each operator they process",
    "start": "757160",
    "end": "759760"
  },
  {
    "text": "input data blocks and generates output",
    "start": "759760",
    "end": "762199"
  },
  {
    "text": "data blocks in a streaming Manner and",
    "start": "762199",
    "end": "764760"
  },
  {
    "text": "and each operator is also associated",
    "start": "764760",
    "end": "766839"
  },
  {
    "text": "with um um output queue to buffer the",
    "start": "766839",
    "end": "770120"
  },
  {
    "text": "output data so the operators are running",
    "start": "770120",
    "end": "773160"
  },
  {
    "text": "on the driver of the of your uh job but",
    "start": "773160",
    "end": "776480"
  },
  {
    "text": "the data will be stored distribut uh in",
    "start": "776480",
    "end": "778959"
  },
  {
    "text": "the distributed the object store so by",
    "start": "778959",
    "end": "782040"
  },
  {
    "text": "using the object the object store so the",
    "start": "782040",
    "end": "784639"
  },
  {
    "text": "operators doesn't need to fet the data",
    "start": "784639",
    "end": "786760"
  },
  {
    "text": "to its local process it can it only",
    "start": "786760",
    "end": "788920"
  },
  {
    "text": "needs to manipulate the uh object",
    "start": "788920",
    "end": "791440"
  },
  {
    "text": "references to the remote",
    "start": "791440",
    "end": "795760"
  },
  {
    "text": "objects and to perform the acture and",
    "start": "796160",
    "end": "799320"
  },
  {
    "text": "data processing and data use R tasks and",
    "start": "799320",
    "end": "802560"
  },
  {
    "text": "actors and users can specify like",
    "start": "802560",
    "end": "805480"
  },
  {
    "text": "different resource requirements for",
    "start": "805480",
    "end": "807360"
  },
  {
    "text": "these actors and tasks",
    "start": "807360",
    "end": "809760"
  },
  {
    "text": "and uh and re will schedule them to the",
    "start": "809760",
    "end": "812760"
  },
  {
    "text": "node with the corresponding Hardware in",
    "start": "812760",
    "end": "814959"
  },
  {
    "text": "the cluster and at the at the core of R",
    "start": "814959",
    "end": "818639"
  },
  {
    "text": "data there's a central decision making",
    "start": "818639",
    "end": "821120"
  },
  {
    "text": "component called the streaming executor",
    "start": "821120",
    "end": "823880"
  },
  {
    "text": "so basically the streaming exor is",
    "start": "823880",
    "end": "825720"
  },
  {
    "text": "responsible for scheduling tasks like",
    "start": "825720",
    "end": "828959"
  },
  {
    "text": "managing resources and handling bad",
    "start": "828959",
    "end": "831040"
  },
  {
    "text": "pressure and one important thing to",
    "start": "831040",
    "end": "833759"
  },
  {
    "text": "notice here is that in Red Data all the",
    "start": "833759",
    "end": "836480"
  },
  {
    "text": "tasks are scheduled dynamically at",
    "start": "836480",
    "end": "839880"
  },
  {
    "text": "time so by doing so the data can ensure",
    "start": "839880",
    "end": "844079"
  },
  {
    "text": "all the GPU operators are consistently",
    "start": "844079",
    "end": "847440"
  },
  {
    "text": "saturated uh let me explain why so let's",
    "start": "847440",
    "end": "850360"
  },
  {
    "text": "say in this case if the uh inference",
    "start": "850360",
    "end": "853000"
  },
  {
    "text": "operator GP operator is under saturated",
    "start": "853000",
    "end": "856079"
  },
  {
    "text": "when R finat it will will simply",
    "start": "856079",
    "end": "858320"
  },
  {
    "text": "schedule more tasks for the first stage",
    "start": "858320",
    "end": "861480"
  },
  {
    "text": "the load and transform operator to",
    "start": "861480",
    "end": "863720"
  },
  {
    "text": "Output more data to and then fed into",
    "start": "863720",
    "end": "866440"
  },
  {
    "text": "the map operator the inference map",
    "start": "866440",
    "end": "870959"
  },
  {
    "text": "operator uh okay and now let's uh WRA up",
    "start": "870959",
    "end": "873959"
  },
  {
    "text": "the re architecture and check out what's",
    "start": "873959",
    "end": "876639"
  },
  {
    "text": "advantages we get from this architecture",
    "start": "876639",
    "end": "880440"
  },
  {
    "text": "so first of firstly with the streaming",
    "start": "880440",
    "end": "882880"
  },
  {
    "text": "execution engine that supports B",
    "start": "882880",
    "end": "884800"
  },
  {
    "text": "pressure where data can easily support",
    "start": "884800",
    "end": "887440"
  },
  {
    "text": "and data set up to P by scale of data",
    "start": "887440",
    "end": "890440"
  },
  {
    "text": "and secondly because of thanks to this",
    "start": "890440",
    "end": "894040"
  },
  {
    "text": "heog genus resource scheduling and",
    "start": "894040",
    "end": "896320"
  },
  {
    "text": "dynamic task scheduling we data can",
    "start": "896320",
    "end": "899199"
  },
  {
    "text": "fully utilize all the GPU resources in",
    "start": "899199",
    "end": "901880"
  },
  {
    "text": "the",
    "start": "901880",
    "end": "902680"
  },
  {
    "text": "cluster and thirdly because R data is",
    "start": "902680",
    "end": "905880"
  },
  {
    "text": "built on top of recall we leverage uh",
    "start": "905880",
    "end": "908399"
  },
  {
    "text": "record Lage reconstruction feature to",
    "start": "908399",
    "end": "910480"
  },
  {
    "text": "handle failures and so basically when a",
    "start": "910480",
    "end": "913279"
  },
  {
    "text": "task and crashed in the middle of",
    "start": "913279",
    "end": "916399"
  },
  {
    "text": "execution this feature will",
    "start": "916399",
    "end": "918320"
  },
  {
    "text": "automatically re resubmit the",
    "start": "918320",
    "end": "921600"
  },
  {
    "text": "task and lastly the object store also",
    "start": "921600",
    "end": "925040"
  },
  {
    "text": "brings us a some additional uh Advantage",
    "start": "925040",
    "end": "928399"
  },
  {
    "text": "for example",
    "start": "928399",
    "end": "929519"
  },
  {
    "text": "for workers running on the same note",
    "start": "929519",
    "end": "932000"
  },
  {
    "text": "they can share data without copy using",
    "start": "932000",
    "end": "934639"
  },
  {
    "text": "using the shared memory and for workers",
    "start": "934639",
    "end": "937480"
  },
  {
    "text": "on across different nodes the object",
    "start": "937480",
    "end": "939759"
  },
  {
    "text": "store can like efficiently transfer data",
    "start": "939759",
    "end": "941839"
  },
  {
    "text": "from one node to the other and also the",
    "start": "941839",
    "end": "944360"
  },
  {
    "text": "data transfer will be pipelined with the",
    "start": "944360",
    "end": "946920"
  },
  {
    "text": "task",
    "start": "946920",
    "end": "947880"
  },
  {
    "text": "execution and last but not least uh if",
    "start": "947880",
    "end": "950800"
  },
  {
    "text": "the buffer Q size has exceed the memory",
    "start": "950800",
    "end": "953639"
  },
  {
    "text": "limit of share memory uh the object the",
    "start": "953639",
    "end": "956199"
  },
  {
    "text": "object store will will also",
    "start": "956199",
    "end": "957920"
  },
  {
    "text": "automatically F the um additional um",
    "start": "957920",
    "end": "961720"
  },
  {
    "text": "blocks to dis avoiding Auto memory",
    "start": "961720",
    "end": "966600"
  },
  {
    "text": "errors um so besides all the features we",
    "start": "966600",
    "end": "969759"
  },
  {
    "start": "968000",
    "end": "1244000"
  },
  {
    "text": "have mentioned um I think inale also",
    "start": "969759",
    "end": "973800"
  },
  {
    "text": "also um provide a improved uh Red Data",
    "start": "973800",
    "end": "977279"
  },
  {
    "text": "solution that we call retable data so",
    "start": "977279",
    "end": "980160"
  },
  {
    "text": "basically retable data comes with uh",
    "start": "980160",
    "end": "982440"
  },
  {
    "text": "some more advanced features that makes",
    "start": "982440",
    "end": "984480"
  },
  {
    "text": "the unche data uh inference jobs even",
    "start": "984480",
    "end": "987680"
  },
  {
    "text": "faster and cheaper at",
    "start": "987680",
    "end": "989880"
  },
  {
    "text": "skill so the uh so first of all speaking",
    "start": "989880",
    "end": "993199"
  },
  {
    "text": "of performance uh one of the biggest",
    "start": "993199",
    "end": "997560"
  },
  {
    "text": "pinpoint for many begin beginner users",
    "start": "997560",
    "end": "1000160"
  },
  {
    "text": "is to optimize the configuration so",
    "start": "1000160",
    "end": "1003040"
  },
  {
    "text": "basically if the configuration is not",
    "start": "1003040",
    "end": "1005240"
  },
  {
    "text": "correctly set it can lead to like some",
    "start": "1005240",
    "end": "1007519"
  },
  {
    "text": "performance or even reliability issues",
    "start": "1007519",
    "end": "1009800"
  },
  {
    "text": "for example low GP utilization and the",
    "start": "1009800",
    "end": "1012720"
  },
  {
    "text": "PA reason or high memory pressure so",
    "start": "1012720",
    "end": "1016199"
  },
  {
    "text": "retable data offers an configuration",
    "start": "1016199",
    "end": "1018560"
  },
  {
    "text": "optim iser that can automatically detect",
    "start": "1018560",
    "end": "1021880"
  },
  {
    "text": "some common issues and and and and",
    "start": "1021880",
    "end": "1025160"
  },
  {
    "text": "propose suggestions to have users",
    "start": "1025160",
    "end": "1028438"
  },
  {
    "text": "optimize corresponding configurations to",
    "start": "1028439",
    "end": "1031240"
  },
  {
    "text": "fix these issues and another issue in",
    "start": "1031240",
    "end": "1035720"
  },
  {
    "text": "our com our observation is that when you",
    "start": "1035720",
    "end": "1038880"
  },
  {
    "text": "have a huge data set that consist of",
    "start": "1038880",
    "end": "1041038"
  },
  {
    "text": "many small files the method fetching",
    "start": "1041039",
    "end": "1043959"
  },
  {
    "text": "stage can take significant significant",
    "start": "1043959",
    "end": "1046678"
  },
  {
    "text": "time because it's broken and",
    "start": "1046679",
    "end": "1049640"
  },
  {
    "text": "this will usually slow down your like U",
    "start": "1049640",
    "end": "1052240"
  },
  {
    "text": "development cycles and also cause",
    "start": "1052240",
    "end": "1054440"
  },
  {
    "text": "resource waste so to deal with this",
    "start": "1054440",
    "end": "1056960"
  },
  {
    "text": "issue we uh recently shipped a new",
    "start": "1056960",
    "end": "1059240"
  },
  {
    "text": "feature that allows fing metata in a",
    "start": "1059240",
    "end": "1062600"
  },
  {
    "text": "incremental way so so by doing so the",
    "start": "1062600",
    "end": "1065760"
  },
  {
    "text": "job can kick off the actual data",
    "start": "1065760",
    "end": "1068760"
  },
  {
    "text": "processing tasks immediately when it",
    "start": "1068760",
    "end": "1070840"
  },
  {
    "text": "starts and by with this feature we have",
    "start": "1070840",
    "end": "1074120"
  },
  {
    "text": "seen up to U 4.5x shorter job start time",
    "start": "1074120",
    "end": "1078480"
  },
  {
    "text": "in our Benchmark",
    "start": "1078480",
    "end": "1081000"
  },
  {
    "text": "tests and the second area we are",
    "start": "1081000",
    "end": "1083679"
  },
  {
    "text": "improving is for tolerance so first as",
    "start": "1083679",
    "end": "1086640"
  },
  {
    "text": "we experience as we have mentioned",
    "start": "1086640",
    "end": "1088480"
  },
  {
    "text": "before so thanks to the linguage",
    "start": "1088480",
    "end": "1090720"
  },
  {
    "text": "Reconstruction feature so if a notes get",
    "start": "1090720",
    "end": "1093120"
  },
  {
    "text": "preempted and Le tasks running on it",
    "start": "1093120",
    "end": "1095960"
  },
  {
    "text": "will be automatically resubmitted to a",
    "start": "1095960",
    "end": "1098600"
  },
  {
    "text": "different",
    "start": "1098600",
    "end": "1099720"
  },
  {
    "text": "note so this feature B allows the job to",
    "start": "1099720",
    "end": "1103679"
  },
  {
    "text": "continue to run without crashing due to",
    "start": "1103679",
    "end": "1106360"
  },
  {
    "text": "a like random Hardware failure but when",
    "start": "1106360",
    "end": "1108960"
  },
  {
    "text": "you are running your job on a large",
    "start": "1108960",
    "end": "1110960"
  },
  {
    "text": "scale spot instance cluster like when",
    "start": "1110960",
    "end": "1113760"
  },
  {
    "text": "many nodes get preed at the same time um",
    "start": "1113760",
    "end": "1116240"
  },
  {
    "text": "it can still lead to Performance",
    "start": "1116240",
    "end": "1119159"
  },
  {
    "text": "degradation uh this is because the uh",
    "start": "1119159",
    "end": "1121960"
  },
  {
    "text": "node preemption and the task res",
    "start": "1121960",
    "end": "1124400"
  },
  {
    "text": "submission are transparent to Red Data",
    "start": "1124400",
    "end": "1126720"
  },
  {
    "text": "streaming",
    "start": "1126720",
    "end": "1127720"
  },
  {
    "text": "skilter so so because of this some like",
    "start": "1127720",
    "end": "1131480"
  },
  {
    "text": "performance issues can happen for",
    "start": "1131480",
    "end": "1133360"
  },
  {
    "text": "example the resource contention between",
    "start": "1133360",
    "end": "1136480"
  },
  {
    "text": "the regular tasks and the R TR tasks and",
    "start": "1136480",
    "end": "1140360"
  },
  {
    "text": "also the uh the resour accounting on the",
    "start": "1140360",
    "end": "1143760"
  },
  {
    "text": "streaming SECU will be",
    "start": "1143760",
    "end": "1146200"
  },
  {
    "text": "inaccurate so to address this issue we a",
    "start": "1146200",
    "end": "1150400"
  },
  {
    "text": "retal data offers an failure aware",
    "start": "1150400",
    "end": "1153000"
  },
  {
    "text": "scheduler that can make better decisions",
    "start": "1153000",
    "end": "1156320"
  },
  {
    "text": "about like task scheduling and B",
    "start": "1156320",
    "end": "1159039"
  },
  {
    "text": "pressure U during uh node preemption and",
    "start": "1159039",
    "end": "1162200"
  },
  {
    "text": "also making making sure the job always",
    "start": "1162200",
    "end": "1164000"
  },
  {
    "text": "running at the Optimal",
    "start": "1164000",
    "end": "1167000"
  },
  {
    "text": "Performance um so this despite this",
    "start": "1167000",
    "end": "1169520"
  },
  {
    "text": "automatic task resubmission and another",
    "start": "1169520",
    "end": "1172919"
  },
  {
    "text": "um so in certain scenarios you still",
    "start": "1172919",
    "end": "1175480"
  },
  {
    "text": "need to resubmit rerun your job for",
    "start": "1175480",
    "end": "1178320"
  },
  {
    "text": "example when you want to update your",
    "start": "1178320",
    "end": "1180400"
  },
  {
    "text": "user code to deal with some like edge",
    "start": "1180400",
    "end": "1182880"
  },
  {
    "text": "cases in your input data or when you or",
    "start": "1182880",
    "end": "1185440"
  },
  {
    "text": "when the hand or even the entire cluster",
    "start": "1185440",
    "end": "1188520"
  },
  {
    "text": "crashes So to avoid like restarting the",
    "start": "1188520",
    "end": "1192960"
  },
  {
    "text": "job from scratch so any scale provides a",
    "start": "1192960",
    "end": "1196159"
  },
  {
    "text": "fe a job checkpointing feature that will",
    "start": "1196159",
    "end": "1198400"
  },
  {
    "text": "Auto automatically checkpoint the um",
    "start": "1198400",
    "end": "1200840"
  },
  {
    "text": "progress of the of the job and resume",
    "start": "1200840",
    "end": "1203520"
  },
  {
    "text": "the progress when we running the",
    "start": "1203520",
    "end": "1207120"
  },
  {
    "text": "job and lastly speaking of uh",
    "start": "1207440",
    "end": "1210360"
  },
  {
    "text": "scalability and any scale provides an",
    "start": "1210360",
    "end": "1213559"
  },
  {
    "text": "enhance all Scala that allows the job to",
    "start": "1213559",
    "end": "1216799"
  },
  {
    "text": "uh start with zero resource and",
    "start": "1216799",
    "end": "1218679"
  },
  {
    "text": "efficiently scale up to thousands of GPU",
    "start": "1218679",
    "end": "1222039"
  },
  {
    "text": "nodes and also support Dynamic scaling",
    "start": "1222039",
    "end": "1224640"
  },
  {
    "text": "done so with this feature you can even",
    "start": "1224640",
    "end": "1227159"
  },
  {
    "text": "share the res shift resources resources",
    "start": "1227159",
    "end": "1230280"
  },
  {
    "text": "among different jobs at one",
    "start": "1230280",
    "end": "1233000"
  },
  {
    "text": "time so to enable this feature user",
    "start": "1233000",
    "end": "1235559"
  },
  {
    "text": "simply need to set the cluster and size",
    "start": "1235559",
    "end": "1238880"
  },
  {
    "text": "and the concurrency of the operator to",
    "start": "1238880",
    "end": "1241720"
  },
  {
    "text": "AR",
    "start": "1241720",
    "end": "1243919"
  },
  {
    "start": "1244000",
    "end": "1505000"
  },
  {
    "text": "range uh okay in the next in the last",
    "start": "1244080",
    "end": "1246440"
  },
  {
    "text": "section of this presentation let's work",
    "start": "1246440",
    "end": "1248760"
  },
  {
    "text": "through a concrete example to",
    "start": "1248760",
    "end": "1251159"
  },
  {
    "text": "demonstrate how to use R data to deal",
    "start": "1251159",
    "end": "1254039"
  },
  {
    "text": "with a real world problem of un data",
    "start": "1254039",
    "end": "1256760"
  },
  {
    "text": "inference",
    "start": "1256760",
    "end": "1258799"
  },
  {
    "text": "so the task we're going to imp Implement",
    "start": "1258799",
    "end": "1260919"
  },
  {
    "text": "is um data is the data preprocessing",
    "start": "1260919",
    "end": "1263679"
  },
  {
    "text": "pipeline for stab defion chaining so",
    "start": "1263679",
    "end": "1266760"
  },
  {
    "text": "this this picture shows the uh model",
    "start": "1266760",
    "end": "1269400"
  },
  {
    "text": "architecture of the stable diffusion",
    "start": "1269400",
    "end": "1271320"
  },
  {
    "text": "model so we can see from the picture",
    "start": "1271320",
    "end": "1273640"
  },
  {
    "text": "that the model basically takes two types",
    "start": "1273640",
    "end": "1275799"
  },
  {
    "text": "of inputs one is the one is the image",
    "start": "1275799",
    "end": "1278480"
  },
  {
    "text": "latens and the second is the TX",
    "start": "1278480",
    "end": "1280520"
  },
  {
    "text": "embeddings of the corresponding",
    "start": "1280520",
    "end": "1283919"
  },
  {
    "text": "captions so what we are going to do is",
    "start": "1283919",
    "end": "1286440"
  },
  {
    "text": "to implement an offline pipeline to",
    "start": "1286440",
    "end": "1289960"
  },
  {
    "text": "precompute the image Lance and the test",
    "start": "1289960",
    "end": "1292520"
  },
  {
    "text": "embeddings for more than one billion",
    "start": "1292520",
    "end": "1296760"
  },
  {
    "text": "samples so uh to to implement list with",
    "start": "1296760",
    "end": "1300159"
  },
  {
    "text": "r data so we also Define such a typical",
    "start": "1300159",
    "end": "1302919"
  },
  {
    "text": "four stage data pipeline so first we use",
    "start": "1302919",
    "end": "1306240"
  },
  {
    "text": "the repet API to load the data from load",
    "start": "1306240",
    "end": "1309799"
  },
  {
    "text": "the raw image and test data from cloud",
    "start": "1309799",
    "end": "1311880"
  },
  {
    "text": "storage and then we use a map function",
    "start": "1311880",
    "end": "1314960"
  },
  {
    "text": "to apply image transformation to uh",
    "start": "1314960",
    "end": "1318640"
  },
  {
    "text": "information and TX oranization and",
    "start": "1318640",
    "end": "1320799"
  },
  {
    "text": "thirdly we use uh uh map batches to",
    "start": "1320799",
    "end": "1323880"
  },
  {
    "text": "apply the encoding logic to the data",
    "start": "1323880",
    "end": "1326159"
  },
  {
    "text": "using GPU resource and lastly we use R",
    "start": "1326159",
    "end": "1329480"
  },
  {
    "text": "Park to write the results back to cloud",
    "start": "1329480",
    "end": "1332960"
  },
  {
    "text": "storage uh so if you want to learn more",
    "start": "1332960",
    "end": "1335200"
  },
  {
    "text": "about the for example there's a free",
    "start": "1335200",
    "end": "1337559"
  },
  {
    "text": "template on any scale and covering all",
    "start": "1337559",
    "end": "1340559"
  },
  {
    "text": "the the entire job of super chaining",
    "start": "1340559",
    "end": "1343159"
  },
  {
    "text": "including how to use uh R data and R",
    "start": "1343159",
    "end": "1345840"
  },
  {
    "text": "chain to do on online and offline data",
    "start": "1345840",
    "end": "1348520"
  },
  {
    "text": "data processing and distributing model",
    "start": "1348520",
    "end": "1350720"
  },
  {
    "text": "chaining and we also uh published a a",
    "start": "1350720",
    "end": "1354200"
  },
  {
    "text": "blog post like a while back and covering",
    "start": "1354200",
    "end": "1357080"
  },
  {
    "text": "more technical details and check it out",
    "start": "1357080",
    "end": "1359559"
  },
  {
    "text": "if are",
    "start": "1359559",
    "end": "1361000"
  },
  {
    "text": "interested so when running the job in uh",
    "start": "1361000",
    "end": "1364960"
  },
  {
    "text": "on any scale so any scale R also provide",
    "start": "1364960",
    "end": "1368159"
  },
  {
    "text": "some visibility to us to help you better",
    "start": "1368159",
    "end": "1371240"
  },
  {
    "text": "understand the what's going on Under The",
    "start": "1371240",
    "end": "1373120"
  },
  {
    "text": "Hoot about the job so the most commonly",
    "start": "1373120",
    "end": "1375760"
  },
  {
    "text": "used one is to is this progress bar so",
    "start": "1375760",
    "end": "1379200"
  },
  {
    "text": "basically it shows you the some key some",
    "start": "1379200",
    "end": "1381760"
  },
  {
    "text": "realtime key matrics about the job as",
    "start": "1381760",
    "end": "1384559"
  },
  {
    "text": "well as for each operator and and if you",
    "start": "1384559",
    "end": "1388559"
  },
  {
    "text": "want to view the historical data of the",
    "start": "1388559",
    "end": "1390960"
  },
  {
    "text": "Matrix there's also a graph dashboard to",
    "start": "1390960",
    "end": "1394760"
  },
  {
    "text": "uh that shows uh several time series",
    "start": "1394760",
    "end": "1397880"
  },
  {
    "text": "Matrix charts um of both at the record",
    "start": "1397880",
    "end": "1401640"
  },
  {
    "text": "and R data level and also if you want to",
    "start": "1401640",
    "end": "1405279"
  },
  {
    "text": "dig into a specific task or worker you",
    "start": "1405279",
    "end": "1408640"
  },
  {
    "text": "can you can do it you can click a button",
    "start": "1408640",
    "end": "1411279"
  },
  {
    "text": "on the red Dash dashboard on at one time",
    "start": "1411279",
    "end": "1414559"
  },
  {
    "text": "to generate such um frame graph CPU",
    "start": "1414559",
    "end": "1417440"
  },
  {
    "text": "frame graph so you can get a sense of",
    "start": "1417440",
    "end": "1419919"
  },
  {
    "text": "like which function is the most",
    "start": "1419919",
    "end": "1421400"
  },
  {
    "text": "expensive",
    "start": "1421400",
    "end": "1423520"
  },
  {
    "text": "one and okay lastly let's take look at",
    "start": "1423520",
    "end": "1426200"
  },
  {
    "text": "some key matrics of the this of this",
    "start": "1426200",
    "end": "1428679"
  },
  {
    "text": "Benchmark so first of all we can see",
    "start": "1428679",
    "end": "1430760"
  },
  {
    "text": "that the G uh list Java can fully",
    "start": "1430760",
    "end": "1433480"
  },
  {
    "text": "utilize the GPU resources across the",
    "start": "1433480",
    "end": "1435880"
  },
  {
    "text": "entire cluster and also the cluster can",
    "start": "1435880",
    "end": "1439679"
  },
  {
    "text": "scale up um pretty quickly within a few",
    "start": "1439679",
    "end": "1442440"
  },
  {
    "text": "minutes when the job",
    "start": "1442440",
    "end": "1444799"
  },
  {
    "text": "starts and last but not list the",
    "start": "1444799",
    "end": "1447559"
  },
  {
    "text": "throughput of the job can scale up",
    "start": "1447559",
    "end": "1450600"
  },
  {
    "text": "linearly with the number of GPU noes in",
    "start": "1450600",
    "end": "1454159"
  },
  {
    "text": "the",
    "start": "1454159",
    "end": "1455080"
  },
  {
    "text": "cluster okay uh so at the end of the",
    "start": "1455080",
    "end": "1457679"
  },
  {
    "text": "presentation let me do a quick summary",
    "start": "1457679",
    "end": "1459840"
  },
  {
    "text": "summary of the key takeways so first of",
    "start": "1459840",
    "end": "1462960"
  },
  {
    "text": "all R data and solve the resolve the key",
    "start": "1462960",
    "end": "1466799"
  },
  {
    "text": "technical challenges with some key",
    "start": "1466799",
    "end": "1468799"
  },
  {
    "text": "Innovations the streaming execution",
    "start": "1468799",
    "end": "1470919"
  },
  {
    "text": "engine heterogenous resource resource",
    "start": "1470919",
    "end": "1473960"
  },
  {
    "text": "scheduling automatic failure recovery",
    "start": "1473960",
    "end": "1476880"
  },
  {
    "text": "and the python ative API L allows you to",
    "start": "1476880",
    "end": "1479840"
  },
  {
    "text": "similarly integrate your R data code",
    "start": "1479840",
    "end": "1482000"
  },
  {
    "text": "with the existing ml ecosystem and only",
    "start": "1482000",
    "end": "1485600"
  },
  {
    "text": "any scale size any scale provides a",
    "start": "1485600",
    "end": "1488200"
  },
  {
    "text": "fully managed platform for R data and",
    "start": "1488200",
    "end": "1491200"
  },
  {
    "text": "any R",
    "start": "1491200",
    "end": "1492960"
  },
  {
    "text": "workloads and any Nale also provides a",
    "start": "1492960",
    "end": "1496880"
  },
  {
    "text": "more advanced re uh rubo data solution",
    "start": "1496880",
    "end": "1500520"
  },
  {
    "text": "that makes unru data inference even",
    "start": "1500520",
    "end": "1503200"
  },
  {
    "text": "faster and cheaper at Large Scale okay I",
    "start": "1503200",
    "end": "1505880"
  },
  {
    "start": "1505000",
    "end": "1779000"
  },
  {
    "text": "think that's what we have",
    "start": "1505880",
    "end": "1507159"
  },
  {
    "text": "today",
    "start": "1507159",
    "end": "1510159"
  },
  {
    "text": "thanks all right so we have about four",
    "start": "1511039",
    "end": "1513360"
  },
  {
    "text": "minutes for the Q&A section uh if you",
    "start": "1513360",
    "end": "1515159"
  },
  {
    "text": "have any question please raise your hand",
    "start": "1515159",
    "end": "1516559"
  },
  {
    "text": "and wait for me to bring the mic to you",
    "start": "1516559",
    "end": "1519200"
  },
  {
    "text": "first question thank you for the",
    "start": "1519200",
    "end": "1521399"
  },
  {
    "text": "presentation so I'm interested in",
    "start": "1521399",
    "end": "1523039"
  },
  {
    "text": "learning like how do we handle the back",
    "start": "1523039",
    "end": "1524960"
  },
  {
    "text": "pressure",
    "start": "1524960",
    "end": "1526159"
  },
  {
    "text": "internally uh okay the question is how",
    "start": "1526159",
    "end": "1528080"
  },
  {
    "text": "do will handle the B pressure internally",
    "start": "1528080",
    "end": "1531120"
  },
  {
    "text": "so so basically so so exion will keep we",
    "start": "1531120",
    "end": "1534640"
  },
  {
    "text": "keep a track of the resource usage of",
    "start": "1534640",
    "end": "1536000"
  },
  {
    "text": "each operator and we like allocate some",
    "start": "1536000",
    "end": "1538679"
  },
  {
    "text": "budget so basically we first we check",
    "start": "1538679",
    "end": "1540679"
  },
  {
    "text": "how how much resource we have in the",
    "start": "1540679",
    "end": "1542000"
  },
  {
    "text": "cluster and we we assign we allocate the",
    "start": "1542000",
    "end": "1544960"
  },
  {
    "text": "resource to each with budget to each",
    "start": "1544960",
    "end": "1547080"
  },
  {
    "text": "operator and basically the stre can",
    "start": "1547080",
    "end": "1549440"
  },
  {
    "text": "decide how many tasks to submit and how",
    "start": "1549440",
    "end": "1552520"
  },
  {
    "text": "and whether we need whether it needs to",
    "start": "1552520",
    "end": "1554760"
  },
  {
    "text": "uh pause and running task based on",
    "start": "1554760",
    "end": "1557480"
  },
  {
    "text": "longtime res",
    "start": "1557480",
    "end": "1558760"
  },
  {
    "text": "so that's how it works at a high",
    "start": "1558760",
    "end": "1561039"
  },
  {
    "text": "level see next",
    "start": "1561039",
    "end": "1564440"
  },
  {
    "text": "question hi uh yeah great talk thanks",
    "start": "1564440",
    "end": "1568000"
  },
  {
    "text": "um do you ever see problems where the",
    "start": "1568000",
    "end": "1571120"
  },
  {
    "text": "head node starts to become a bottleneck",
    "start": "1571120",
    "end": "1574000"
  },
  {
    "text": "uh because there's like I think my",
    "start": "1574000",
    "end": "1577159"
  },
  {
    "text": "understanding and this might be wrong is",
    "start": "1577159",
    "end": "1578559"
  },
  {
    "text": "that all the communication has to go",
    "start": "1578559",
    "end": "1580520"
  },
  {
    "text": "through there at some point yeah okay",
    "start": "1580520",
    "end": "1581880"
  },
  {
    "text": "good question so the question is like",
    "start": "1581880",
    "end": "1583480"
  },
  {
    "text": "whether the handle can be a botc of the",
    "start": "1583480",
    "end": "1585600"
  },
  {
    "text": "of the job so I think for most influence",
    "start": "1585600",
    "end": "1588960"
  },
  {
    "text": "jobs I think because we are doing",
    "start": "1588960",
    "end": "1590799"
  },
  {
    "text": "streaming execution uh Al first all let",
    "start": "1590799",
    "end": "1593399"
  },
  {
    "text": "me let me explain so the overhead on",
    "start": "1593399",
    "end": "1595360"
  },
  {
    "text": "hand note is is mainly about the",
    "start": "1595360",
    "end": "1596960"
  },
  {
    "text": "streaming SEC you need to manage all the",
    "start": "1596960",
    "end": "1599279"
  },
  {
    "text": "object references of the of the entire",
    "start": "1599279",
    "end": "1602000"
  },
  {
    "text": "cluster and but for for for batch",
    "start": "1602000",
    "end": "1604760"
  },
  {
    "text": "inference un unru data bat inference",
    "start": "1604760",
    "end": "1606760"
  },
  {
    "text": "jobs I think that's usually not a bottom",
    "start": "1606760",
    "end": "1608520"
  },
  {
    "text": "neck because we are doing we are",
    "start": "1608520",
    "end": "1610120"
  },
  {
    "text": "streaming we are we are we are we are",
    "start": "1610120",
    "end": "1612039"
  },
  {
    "text": "doing that processing a streaming way so",
    "start": "1612039",
    "end": "1613720"
  },
  {
    "text": "we don't have too many blocks in memory",
    "start": "1613720",
    "end": "1616480"
  },
  {
    "text": "at the same time but if we are doing",
    "start": "1616480",
    "end": "1618840"
  },
  {
    "text": "like there there other more like like U",
    "start": "1618840",
    "end": "1621919"
  },
  {
    "text": "memory intensive operators like for",
    "start": "1621919",
    "end": "1623360"
  },
  {
    "text": "example Group by so for those operators",
    "start": "1623360",
    "end": "1625880"
  },
  {
    "text": "that's not streaming you need to keep",
    "start": "1625880",
    "end": "1627960"
  },
  {
    "text": "all the um objects in object reference",
    "start": "1627960",
    "end": "1630440"
  },
  {
    "text": "in memory for those for those uh",
    "start": "1630440",
    "end": "1632360"
  },
  {
    "text": "workloads the that can be more the head",
    "start": "1632360",
    "end": "1634640"
  },
  {
    "text": "node can be more expensive can be more",
    "start": "1634640",
    "end": "1636520"
  },
  {
    "text": "like more of laot would would the load",
    "start": "1636520",
    "end": "1638880"
  },
  {
    "text": "on the head node scale with the number",
    "start": "1638880",
    "end": "1641200"
  },
  {
    "text": "of gpus for instance like have you gone",
    "start": "1641200",
    "end": "1642799"
  },
  {
    "text": "to like say if you get to hundreds like",
    "start": "1642799",
    "end": "1645640"
  },
  {
    "text": "500 gpus does that load start to I think",
    "start": "1645640",
    "end": "1648480"
  },
  {
    "text": "in our experience I think one one handle",
    "start": "1648480",
    "end": "1650360"
  },
  {
    "text": "can can can easily handle more than",
    "start": "1650360",
    "end": "1652120"
  },
  {
    "text": "1,000 GPU nodes so that's not usually",
    "start": "1652120",
    "end": "1654559"
  },
  {
    "text": "not an issue uh I think if you find this",
    "start": "1654559",
    "end": "1656960"
  },
  {
    "text": "B neck I think the simplest way to use",
    "start": "1656960",
    "end": "1658840"
  },
  {
    "text": "like a larger head note got it thank",
    "start": "1658840",
    "end": "1662960"
  },
  {
    "text": "you next question uh",
    "start": "1662960",
    "end": "1667200"
  },
  {
    "text": "help uh regarding the observability do",
    "start": "1668200",
    "end": "1671200"
  },
  {
    "text": "you have a way to visualize the dag of",
    "start": "1671200",
    "end": "1674159"
  },
  {
    "text": "your execution just like a sparkk dags",
    "start": "1674159",
    "end": "1677240"
  },
  {
    "text": "okay uh we currently don't have the the",
    "start": "1677240",
    "end": "1680080"
  },
  {
    "text": "D visualization on the dashboard but we",
    "start": "1680080",
    "end": "1682679"
  },
  {
    "text": "will print out the D the dck shape in in",
    "start": "1682679",
    "end": "1685600"
  },
  {
    "text": "in the uh console so I think you can",
    "start": "1685600",
    "end": "1689360"
  },
  {
    "text": "kind of get a sense",
    "start": "1689360",
    "end": "1690919"
  },
  {
    "text": "that we have time for one more last",
    "start": "1690919",
    "end": "1693600"
  },
  {
    "text": "question hi uh so regarding the task",
    "start": "1693600",
    "end": "1697399"
  },
  {
    "text": "retries um so let's say if you have a",
    "start": "1697399",
    "end": "1700080"
  },
  {
    "text": "long running bad job right and for a",
    "start": "1700080",
    "end": "1702799"
  },
  {
    "text": "week and one of the task Fields so you",
    "start": "1702799",
    "end": "1704840"
  },
  {
    "text": "said that on the open source version",
    "start": "1704840",
    "end": "1706120"
  },
  {
    "text": "also you have task lineage mhm so can",
    "start": "1706120",
    "end": "1708480"
  },
  {
    "text": "that like uh reconstruct the entire task",
    "start": "1708480",
    "end": "1711159"
  },
  {
    "text": "from the beginning and get it like you",
    "start": "1711159",
    "end": "1713120"
  },
  {
    "text": "know uh rerun that particular task I",
    "start": "1713120",
    "end": "1715919"
  },
  {
    "text": "think in the same context as spark right",
    "start": "1715919",
    "end": "1717519"
  },
  {
    "text": "like spark if you have one task failure",
    "start": "1717519",
    "end": "1719320"
  },
  {
    "text": "it will have that lineage and it will",
    "start": "1719320",
    "end": "1720480"
  },
  {
    "text": "bring that task in the end unless",
    "start": "1720480",
    "end": "1722000"
  },
  {
    "text": "there's a if I think it tries like three",
    "start": "1722000",
    "end": "1724080"
  },
  {
    "text": "four times unless there's a task failure",
    "start": "1724080",
    "end": "1726360"
  },
  {
    "text": "or on application Level so is can that",
    "start": "1726360",
    "end": "1729080"
  },
  {
    "text": "be done a on open source version and if",
    "start": "1729080",
    "end": "1731679"
  },
  {
    "text": "if no then is that something you solve",
    "start": "1731679",
    "end": "1733760"
  },
  {
    "text": "on the proprietary version uh so if I",
    "start": "1733760",
    "end": "1736159"
  },
  {
    "text": "your question is like when so when a",
    "start": "1736159",
    "end": "1738440"
  },
  {
    "text": "task fails can we TR Trace back to the",
    "start": "1738440",
    "end": "1741200"
  },
  {
    "text": "previous the other previous task in the",
    "start": "1741200",
    "end": "1743799"
  },
  {
    "text": "lineage right yeah so let's say you have",
    "start": "1743799",
    "end": "1745279"
  },
  {
    "text": "like multiple map multiple stage yes and",
    "start": "1745279",
    "end": "1748480"
  },
  {
    "text": "like one of them",
    "start": "1748480",
    "end": "1749880"
  },
  {
    "text": "fails open source yes so basically",
    "start": "1749880",
    "end": "1752640"
  },
  {
    "text": "that's how that's how Lage",
    "start": "1752640",
    "end": "1753960"
  },
  {
    "text": "reconstruction works so basically when a",
    "start": "1753960",
    "end": "1755480"
  },
  {
    "text": "task fails and if the objects lost we",
    "start": "1755480",
    "end": "1758919"
  },
  {
    "text": "can chase back to the previous task in",
    "start": "1758919",
    "end": "1761919"
  },
  {
    "text": "the lineage and run the task to",
    "start": "1761919",
    "end": "1763760"
  },
  {
    "text": "reproduce the the object okay okay good",
    "start": "1763760",
    "end": "1767760"
  },
  {
    "text": "thank you",
    "start": "1767760",
    "end": "1768960"
  },
  {
    "text": "all right so if you have any more",
    "start": "1768960",
    "end": "1770080"
  },
  {
    "text": "question please ask Howen Bine after the",
    "start": "1770080",
    "end": "1772039"
  },
  {
    "text": "talk uh we are out of time and please",
    "start": "1772039",
    "end": "1773760"
  },
  {
    "text": "give another round Applause for how Bine",
    "start": "1773760",
    "end": "1776200"
  },
  {
    "text": "thank you everyone",
    "start": "1776200",
    "end": "1779480"
  }
]