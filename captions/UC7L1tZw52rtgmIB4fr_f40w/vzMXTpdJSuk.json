[
  {
    "start": "0",
    "end": "113000"
  },
  {
    "text": "hi uh my name is eric so in this talk",
    "start": "2560",
    "end": "4720"
  },
  {
    "text": "we're going to look closely at the idea",
    "start": "4720",
    "end": "6080"
  },
  {
    "text": "of ray as a general purpose serverless",
    "start": "6080",
    "end": "7839"
  },
  {
    "text": "substrate",
    "start": "7839",
    "end": "9840"
  },
  {
    "text": "so a bit about me um i'm a software",
    "start": "9840",
    "end": "12320"
  },
  {
    "text": "engineer here at any skill",
    "start": "12320",
    "end": "14400"
  },
  {
    "text": "and also a finishing phd student at uc",
    "start": "14400",
    "end": "16160"
  },
  {
    "text": "berkeley so and",
    "start": "16160",
    "end": "17520"
  },
  {
    "text": "i'm the team lead for rayquarn rlib and",
    "start": "17520",
    "end": "19520"
  },
  {
    "text": "in grad school i do research in applied",
    "start": "19520",
    "end": "21279"
  },
  {
    "text": "rl and",
    "start": "21279",
    "end": "21920"
  },
  {
    "text": "ml systems research uh so before grad",
    "start": "21920",
    "end": "24400"
  },
  {
    "text": "school i spend",
    "start": "24400",
    "end": "25199"
  },
  {
    "text": "several years in industry at uh",
    "start": "25199",
    "end": "26560"
  },
  {
    "text": "databricks and google",
    "start": "26560",
    "end": "30000"
  },
  {
    "text": "so this talk is going to be about ray as",
    "start": "30000",
    "end": "31760"
  },
  {
    "text": "a general purpose or a list platform",
    "start": "31760",
    "end": "34000"
  },
  {
    "text": "we're going to start with just the",
    "start": "34000",
    "end": "35280"
  },
  {
    "text": "definition of serverless or at least the",
    "start": "35280",
    "end": "37280"
  },
  {
    "text": "definition",
    "start": "37280",
    "end": "37920"
  },
  {
    "text": "we're going to use in this talk and a",
    "start": "37920",
    "end": "39680"
  },
  {
    "text": "vision of where serverless could go to",
    "start": "39680",
    "end": "41120"
  },
  {
    "text": "support",
    "start": "41120",
    "end": "41600"
  },
  {
    "text": "more demanding applications after i",
    "start": "41600",
    "end": "44000"
  },
  {
    "text": "explain this vision i will tell you",
    "start": "44000",
    "end": "45520"
  },
  {
    "text": "about what's hard about achieving this",
    "start": "45520",
    "end": "47280"
  },
  {
    "text": "uh kind of the choir requirements here",
    "start": "47280",
    "end": "49120"
  },
  {
    "text": "and how we can achieve this with ray",
    "start": "49120",
    "end": "52480"
  },
  {
    "text": "so what does serverless mean you're",
    "start": "52480",
    "end": "54800"
  },
  {
    "text": "probably familiar with serverless in the",
    "start": "54800",
    "end": "56239"
  },
  {
    "text": "context of",
    "start": "56239",
    "end": "57199"
  },
  {
    "text": "function as a service or fast for",
    "start": "57199",
    "end": "58960"
  },
  {
    "text": "example amazon lambda provides an",
    "start": "58960",
    "end": "61280"
  },
  {
    "text": "implementation of serverless functions",
    "start": "61280",
    "end": "63600"
  },
  {
    "text": "so fast is really about microservices",
    "start": "63600",
    "end": "66080"
  },
  {
    "text": "taken to the extreme",
    "start": "66080",
    "end": "67600"
  },
  {
    "text": "where you're defining individual",
    "start": "67600",
    "end": "69040"
  },
  {
    "text": "stateless functions that can be invoked",
    "start": "69040",
    "end": "70560"
  },
  {
    "text": "over the network another key ingredient",
    "start": "70560",
    "end": "72880"
  },
  {
    "text": "here is that you get very high",
    "start": "72880",
    "end": "74080"
  },
  {
    "text": "elasticity so you can scale",
    "start": "74080",
    "end": "76000"
  },
  {
    "text": "tight throughputs almost instantly so",
    "start": "76000",
    "end": "78240"
  },
  {
    "text": "you also don't need to worry really",
    "start": "78240",
    "end": "79520"
  },
  {
    "text": "about the scaling story for your",
    "start": "79520",
    "end": "80640"
  },
  {
    "text": "application",
    "start": "80640",
    "end": "82320"
  },
  {
    "text": "so comparing this to historical",
    "start": "82320",
    "end": "83840"
  },
  {
    "text": "approaches for building application",
    "start": "83840",
    "end": "85360"
  },
  {
    "text": "where you have",
    "start": "85360",
    "end": "86240"
  },
  {
    "text": "on one hand bare metal servers where you",
    "start": "86240",
    "end": "88640"
  },
  {
    "text": "have to think about all layers of the",
    "start": "88640",
    "end": "90159"
  },
  {
    "text": "stack from the hardware to the operating",
    "start": "90159",
    "end": "91759"
  },
  {
    "text": "system container and so on",
    "start": "91759",
    "end": "94000"
  },
  {
    "text": "to slightly more modern approaches such",
    "start": "94000",
    "end": "96079"
  },
  {
    "text": "as virtual machines and containers",
    "start": "96079",
    "end": "98479"
  },
  {
    "text": "where you're pushing off concerns of the",
    "start": "98479",
    "end": "100400"
  },
  {
    "text": "hardware and operating system to the",
    "start": "100400",
    "end": "102079"
  },
  {
    "text": "service provider",
    "start": "102079",
    "end": "103600"
  },
  {
    "text": "serverless functions provide a much",
    "start": "103600",
    "end": "105040"
  },
  {
    "text": "simpler developer interface so you just",
    "start": "105040",
    "end": "106880"
  },
  {
    "text": "you're really concerned with just the",
    "start": "106880",
    "end": "108240"
  },
  {
    "text": "code itself",
    "start": "108240",
    "end": "109280"
  },
  {
    "text": "the function definition that you're",
    "start": "109280",
    "end": "110640"
  },
  {
    "text": "going to deploy so the two",
    "start": "110640",
    "end": "114880"
  },
  {
    "start": "113000",
    "end": "113000"
  },
  {
    "text": "kind of key serverless benefits we can",
    "start": "114880",
    "end": "116640"
  },
  {
    "text": "distill from fast are that first",
    "start": "116640",
    "end": "118960"
  },
  {
    "text": "there's not the need to worry about",
    "start": "118960",
    "end": "120159"
  },
  {
    "text": "managing machines so this really gives",
    "start": "120159",
    "end": "121840"
  },
  {
    "text": "you much",
    "start": "121840",
    "end": "122320"
  },
  {
    "text": "lower operational overhead i'm also a",
    "start": "122320",
    "end": "124719"
  },
  {
    "text": "much simplified development process",
    "start": "124719",
    "end": "127360"
  },
  {
    "text": "it's also highly elastic so you can you",
    "start": "127360",
    "end": "129520"
  },
  {
    "text": "generally pay for",
    "start": "129520",
    "end": "130399"
  },
  {
    "text": "um you know by the millisecond only for",
    "start": "130399",
    "end": "132480"
  },
  {
    "text": "the compute that you use",
    "start": "132480",
    "end": "134800"
  },
  {
    "text": "you can also scale very easily to high",
    "start": "134800",
    "end": "136959"
  },
  {
    "text": "throughputs",
    "start": "136959",
    "end": "138319"
  },
  {
    "text": "so because of these two properties",
    "start": "138319",
    "end": "140800"
  },
  {
    "text": "there's a lot of",
    "start": "140800",
    "end": "141599"
  },
  {
    "text": "actually interest in serverless have the",
    "start": "141599",
    "end": "144239"
  },
  {
    "text": "general purpose benefits of serverless",
    "start": "144239",
    "end": "146560"
  },
  {
    "text": "applying to a broad range of potential",
    "start": "146560",
    "end": "148239"
  },
  {
    "text": "workloads",
    "start": "148239",
    "end": "150720"
  },
  {
    "text": "uh yeah so what is fast servlets used",
    "start": "151120",
    "end": "153280"
  },
  {
    "text": "for today well primarily",
    "start": "153280",
    "end": "154879"
  },
  {
    "text": "primarily it's used for defining",
    "start": "154879",
    "end": "156080"
  },
  {
    "text": "functions that respond to web requests",
    "start": "156080",
    "end": "157760"
  },
  {
    "text": "for example",
    "start": "157760",
    "end": "159040"
  },
  {
    "text": "you could use it for web hooks state",
    "start": "159040",
    "end": "161040"
  },
  {
    "text": "lists web applications",
    "start": "161040",
    "end": "163280"
  },
  {
    "text": "notification handling and so on",
    "start": "163280",
    "end": "166400"
  },
  {
    "text": "with such a simple crud app it's that's",
    "start": "166400",
    "end": "169200"
  },
  {
    "text": "just",
    "start": "169200",
    "end": "169680"
  },
  {
    "text": "issuing a create a read update requested",
    "start": "169680",
    "end": "171920"
  },
  {
    "text": "a database it's really straightforward",
    "start": "171920",
    "end": "173599"
  },
  {
    "text": "to write a stateless function that you",
    "start": "173599",
    "end": "174959"
  },
  {
    "text": "can deploy using uh",
    "start": "174959",
    "end": "176400"
  },
  {
    "text": "for example aws lambda and so on",
    "start": "176400",
    "end": "179519"
  },
  {
    "text": "okay so in this talk i'm going to focus",
    "start": "179519",
    "end": "181200"
  },
  {
    "text": "on the question of whether there is a",
    "start": "181200",
    "end": "183040"
  },
  {
    "text": "more general form of serverless",
    "start": "183040",
    "end": "184720"
  },
  {
    "text": "that isn't just pure functions um so",
    "start": "184720",
    "end": "188080"
  },
  {
    "text": "recall the two key benefits of",
    "start": "188080",
    "end": "189920"
  },
  {
    "text": "serverless",
    "start": "189920",
    "end": "190800"
  },
  {
    "text": "not worrying about machines and",
    "start": "190800",
    "end": "192400"
  },
  {
    "text": "elasticity",
    "start": "192400",
    "end": "193920"
  },
  {
    "text": "um in this talk we're going to focus on",
    "start": "193920",
    "end": "195920"
  },
  {
    "text": "applications that cannot run on fast",
    "start": "195920",
    "end": "198640"
  },
  {
    "text": "so think about machine learning data",
    "start": "198640",
    "end": "200640"
  },
  {
    "text": "processing or complex backend services",
    "start": "200640",
    "end": "204159"
  },
  {
    "text": "and we're going to think about how to",
    "start": "204159",
    "end": "205440"
  },
  {
    "text": "bring benefits above to these",
    "start": "205440",
    "end": "207599"
  },
  {
    "text": "different types of applications",
    "start": "207599",
    "end": "210720"
  },
  {
    "text": "so why don't these applications fit into",
    "start": "210720",
    "end": "212480"
  },
  {
    "text": "serverless functions",
    "start": "212480",
    "end": "213920"
  },
  {
    "text": "um basically it's because these",
    "start": "213920",
    "end": "215599"
  },
  {
    "text": "applications are stable so",
    "start": "215599",
    "end": "217280"
  },
  {
    "text": "maybe they have state held in a process",
    "start": "217280",
    "end": "219440"
  },
  {
    "text": "that cannot be easily moved to a",
    "start": "219440",
    "end": "220720"
  },
  {
    "text": "database",
    "start": "220720",
    "end": "221840"
  },
  {
    "text": "um so in principle it's possible to",
    "start": "221840",
    "end": "224080"
  },
  {
    "text": "build many of these applications in a",
    "start": "224080",
    "end": "225599"
  },
  {
    "text": "purely stateless manner",
    "start": "225599",
    "end": "227120"
  },
  {
    "text": "it's just very efficient inefficient so",
    "start": "227120",
    "end": "229599"
  },
  {
    "text": "you might have state cached memory or",
    "start": "229599",
    "end": "231200"
  },
  {
    "text": "local ssd that's really advantageous",
    "start": "231200",
    "end": "234560"
  },
  {
    "text": "um this kind of efficiency",
    "start": "234560",
    "end": "237599"
  },
  {
    "text": "might not matter for credit applications",
    "start": "237599",
    "end": "239920"
  },
  {
    "text": "but it very much matters for",
    "start": "239920",
    "end": "241840"
  },
  {
    "text": "machine learning data processing and",
    "start": "241840",
    "end": "243840"
  },
  {
    "text": "back-end applications",
    "start": "243840",
    "end": "245439"
  },
  {
    "text": "um so let's look at a few examples of",
    "start": "245439",
    "end": "248239"
  },
  {
    "text": "applications and whether they require",
    "start": "248239",
    "end": "249760"
  },
  {
    "text": "state or not",
    "start": "249760",
    "end": "250799"
  },
  {
    "text": "so of course as we've seen before crud",
    "start": "250799",
    "end": "252799"
  },
  {
    "text": "is stateless by definition",
    "start": "252799",
    "end": "255280"
  },
  {
    "text": "um but if you're doing model training it",
    "start": "255280",
    "end": "257440"
  },
  {
    "text": "is it's staple you have state in the gpu",
    "start": "257440",
    "end": "259919"
  },
  {
    "text": "model inference can be thought of as a",
    "start": "259919",
    "end": "262639"
  },
  {
    "text": "stateless but",
    "start": "262639",
    "end": "263520"
  },
  {
    "text": "if you're doing optimizations like",
    "start": "263520",
    "end": "264880"
  },
  {
    "text": "batching where you're accumulating",
    "start": "264880",
    "end": "266160"
  },
  {
    "text": "requests in a stateful way for short",
    "start": "266160",
    "end": "267759"
  },
  {
    "text": "periods of time that's not stateless",
    "start": "267759",
    "end": "270800"
  },
  {
    "text": "data processing is often expressed as a",
    "start": "270800",
    "end": "272560"
  },
  {
    "text": "series of stateless transformations over",
    "start": "272560",
    "end": "274240"
  },
  {
    "text": "data",
    "start": "274240",
    "end": "274880"
  },
  {
    "text": "but underlying implementations usually",
    "start": "274880",
    "end": "276880"
  },
  {
    "text": "require a stable workers for efficiency",
    "start": "276880",
    "end": "280320"
  },
  {
    "text": "and back-end services for example for",
    "start": "280320",
    "end": "282479"
  },
  {
    "text": "fraud detection",
    "start": "282479",
    "end": "283360"
  },
  {
    "text": "usually have a mix of stateless and",
    "start": "283360",
    "end": "285040"
  },
  {
    "text": "stable components",
    "start": "285040",
    "end": "287919"
  },
  {
    "start": "288000",
    "end": "288000"
  },
  {
    "text": "so i want to show this point again in a",
    "start": "288400",
    "end": "290080"
  },
  {
    "text": "more visual way that's again",
    "start": "290080",
    "end": "291440"
  },
  {
    "text": "contrast fast workloads and those for",
    "start": "291440",
    "end": "293680"
  },
  {
    "text": "more stable applications",
    "start": "293680",
    "end": "295440"
  },
  {
    "text": "so with a function as a service you're",
    "start": "295440",
    "end": "297520"
  },
  {
    "text": "applying just the function to incoming",
    "start": "297520",
    "end": "299199"
  },
  {
    "text": "requests",
    "start": "299199",
    "end": "300000"
  },
  {
    "text": "and these functions are all running",
    "start": "300000",
    "end": "301039"
  },
  {
    "text": "independently of each other",
    "start": "301039",
    "end": "303280"
  },
  {
    "text": "on the other hand with stable",
    "start": "303280",
    "end": "304479"
  },
  {
    "text": "applications such as machine learning",
    "start": "304479",
    "end": "306160"
  },
  {
    "text": "and data processing these",
    "start": "306160",
    "end": "307600"
  },
  {
    "text": "applications are running a complex web",
    "start": "307600",
    "end": "309440"
  },
  {
    "text": "of communication",
    "start": "309440",
    "end": "310639"
  },
  {
    "text": "between staple mapreduce tasks or all",
    "start": "310639",
    "end": "313039"
  },
  {
    "text": "reduced workers",
    "start": "313039",
    "end": "315759"
  },
  {
    "start": "316000",
    "end": "316000"
  },
  {
    "text": "so obviously it's kind of a new",
    "start": "316639",
    "end": "318320"
  },
  {
    "text": "observation that many applications are",
    "start": "318320",
    "end": "319840"
  },
  {
    "text": "inherently stateful",
    "start": "319840",
    "end": "321280"
  },
  {
    "text": "so one question is where are these",
    "start": "321280",
    "end": "322800"
  },
  {
    "text": "staples serverless applications today",
    "start": "322800",
    "end": "325360"
  },
  {
    "text": "well the market has actually produced",
    "start": "325360",
    "end": "326880"
  },
  {
    "text": "plenty of these many of them which",
    "start": "326880",
    "end": "328479"
  },
  {
    "text": "actually predate the modern notion of",
    "start": "328479",
    "end": "330000"
  },
  {
    "text": "serverless",
    "start": "330000",
    "end": "330960"
  },
  {
    "text": "for example in data processing we have",
    "start": "330960",
    "end": "332960"
  },
  {
    "text": "services like",
    "start": "332960",
    "end": "334000"
  },
  {
    "text": "amazon athena redshift spectrum",
    "start": "334000",
    "end": "337520"
  },
  {
    "text": "google bigquery databricks serverless",
    "start": "337520",
    "end": "340800"
  },
  {
    "text": "these these services offer high levels",
    "start": "340800",
    "end": "342639"
  },
  {
    "text": "of abstraction and elasticity",
    "start": "342639",
    "end": "345600"
  },
  {
    "text": "in other verticals and i'm not going to",
    "start": "345600",
    "end": "347039"
  },
  {
    "text": "go through a list of these but we have",
    "start": "347039",
    "end": "348479"
  },
  {
    "text": "various platforms of the service",
    "start": "348479",
    "end": "350800"
  },
  {
    "text": "machine learning as a service and these",
    "start": "350800",
    "end": "352240"
  },
  {
    "text": "are found from many third-party",
    "start": "352240",
    "end": "353840"
  },
  {
    "text": "providers and also",
    "start": "353840",
    "end": "354720"
  },
  {
    "text": "all the major clouds such as you know",
    "start": "354720",
    "end": "356080"
  },
  {
    "text": "azure aws gcp and so on",
    "start": "356080",
    "end": "359759"
  },
  {
    "text": "so one thing to note that these uh these",
    "start": "359759",
    "end": "362319"
  },
  {
    "text": "these kind of applications have in",
    "start": "362319",
    "end": "363600"
  },
  {
    "text": "common is that they're almost all custom",
    "start": "363600",
    "end": "365199"
  },
  {
    "text": "built",
    "start": "365199",
    "end": "365600"
  },
  {
    "text": "vertical proprietary services and the",
    "start": "365600",
    "end": "368479"
  },
  {
    "text": "main downsides here are of course",
    "start": "368479",
    "end": "370400"
  },
  {
    "text": "beyond api lock-in is that if your",
    "start": "370400",
    "end": "372400"
  },
  {
    "text": "application doesn't neatly fit into one",
    "start": "372400",
    "end": "373919"
  },
  {
    "text": "of these verticals",
    "start": "373919",
    "end": "375199"
  },
  {
    "text": "you have to spend a lot of time gluing",
    "start": "375199",
    "end": "377280"
  },
  {
    "text": "together different systems or different",
    "start": "377280",
    "end": "378960"
  },
  {
    "text": "services to build an application",
    "start": "378960",
    "end": "382319"
  },
  {
    "text": "so this current market situation is not",
    "start": "383600",
    "end": "385360"
  },
  {
    "text": "ideal for many",
    "start": "385360",
    "end": "386880"
  },
  {
    "text": "several types of workloads for example",
    "start": "386880",
    "end": "388319"
  },
  {
    "text": "if you're an open source project that",
    "start": "388319",
    "end": "389680"
  },
  {
    "text": "you just don't want to be locked into a",
    "start": "389680",
    "end": "391199"
  },
  {
    "text": "particular service",
    "start": "391199",
    "end": "393440"
  },
  {
    "text": "so a common scenario is maybe you want",
    "start": "393440",
    "end": "396240"
  },
  {
    "text": "to build some ml application",
    "start": "396240",
    "end": "399280"
  },
  {
    "text": "and your application has several",
    "start": "399280",
    "end": "400400"
  },
  {
    "text": "different components such as model",
    "start": "400400",
    "end": "402000"
  },
  {
    "text": "training",
    "start": "402000",
    "end": "403280"
  },
  {
    "text": "data pre-processing and serving and",
    "start": "403280",
    "end": "406240"
  },
  {
    "text": "today",
    "start": "406240",
    "end": "407120"
  },
  {
    "text": "you can leverage serverless for some of",
    "start": "407120",
    "end": "408880"
  },
  {
    "text": "these components",
    "start": "408880",
    "end": "410400"
  },
  {
    "text": "for others you'll need to uh stitch",
    "start": "410400",
    "end": "412479"
  },
  {
    "text": "together um",
    "start": "412479",
    "end": "413759"
  },
  {
    "text": "serverless services or stateful services",
    "start": "413759",
    "end": "416319"
  },
  {
    "text": "and",
    "start": "416319",
    "end": "417039"
  },
  {
    "text": "systems so the result is a collection of",
    "start": "417039",
    "end": "420479"
  },
  {
    "text": "disparate systems glued together we",
    "start": "420479",
    "end": "422639"
  },
  {
    "text": "could probably say a system is only as",
    "start": "422639",
    "end": "424400"
  },
  {
    "text": "serverless as it's kind of weakest link",
    "start": "424400",
    "end": "426000"
  },
  {
    "text": "so you probably don't end up with an",
    "start": "426000",
    "end": "428080"
  },
  {
    "text": "output serverless at all",
    "start": "428080",
    "end": "431039"
  },
  {
    "text": "so in the next few slides i want to show",
    "start": "431599",
    "end": "433360"
  },
  {
    "text": "some more evidence that i think shows",
    "start": "433360",
    "end": "435280"
  },
  {
    "text": "there is a community need for a more",
    "start": "435280",
    "end": "437039"
  },
  {
    "text": "general serverless",
    "start": "437039",
    "end": "438400"
  },
  {
    "text": "substrate so the first",
    "start": "438400",
    "end": "442080"
  },
  {
    "start": "440000",
    "end": "440000"
  },
  {
    "text": "is looking at the history of data",
    "start": "442080",
    "end": "443360"
  },
  {
    "text": "processing on fast",
    "start": "443360",
    "end": "445759"
  },
  {
    "text": "there have been several projects that",
    "start": "445759",
    "end": "447039"
  },
  {
    "text": "have attempted data processing on",
    "start": "447039",
    "end": "448479"
  },
  {
    "text": "serverless functions",
    "start": "448479",
    "end": "450160"
  },
  {
    "text": "for when this example is sparkling",
    "start": "450160",
    "end": "451759"
  },
  {
    "text": "lambda this is a project from a cubel",
    "start": "451759",
    "end": "455280"
  },
  {
    "text": "another is pyrin which is also uh trying",
    "start": "455280",
    "end": "457520"
  },
  {
    "text": "to execute analytic workloads over",
    "start": "457520",
    "end": "459520"
  },
  {
    "text": "atypus lambda",
    "start": "459520",
    "end": "461680"
  },
  {
    "text": "so both projects have generated plenty",
    "start": "461680",
    "end": "463360"
  },
  {
    "text": "of buzz you know great looking",
    "start": "463360",
    "end": "465120"
  },
  {
    "text": "benchmarks",
    "start": "465120",
    "end": "465919"
  },
  {
    "text": "papers but there really hasn't been much",
    "start": "465919",
    "end": "467919"
  },
  {
    "text": "adoption",
    "start": "467919",
    "end": "469360"
  },
  {
    "text": "and one reason for this is that the",
    "start": "469360",
    "end": "471039"
  },
  {
    "text": "limitations of mass are hurt the",
    "start": "471039",
    "end": "472720"
  },
  {
    "text": "generality of the solution",
    "start": "472720",
    "end": "474400"
  },
  {
    "text": "for example typically you have execution",
    "start": "474400",
    "end": "477440"
  },
  {
    "text": "time limits",
    "start": "477440",
    "end": "478160"
  },
  {
    "text": "lack of local storage small container",
    "start": "478160",
    "end": "480720"
  },
  {
    "text": "sizes",
    "start": "480720",
    "end": "481280"
  },
  {
    "text": "and an ability to communicate between",
    "start": "481280",
    "end": "483120"
  },
  {
    "text": "different serverless functions",
    "start": "483120",
    "end": "486560"
  },
  {
    "text": "but in some sense this kind of abuse of",
    "start": "487440",
    "end": "489759"
  },
  {
    "text": "function as a service points to this",
    "start": "489759",
    "end": "491199"
  },
  {
    "text": "community desire for",
    "start": "491199",
    "end": "493039"
  },
  {
    "text": "serverless characteristics for bringing",
    "start": "493039",
    "end": "494560"
  },
  {
    "text": "serverless characteristics to more",
    "start": "494560",
    "end": "495919"
  },
  {
    "text": "applications",
    "start": "495919",
    "end": "498479"
  },
  {
    "start": "498000",
    "end": "498000"
  },
  {
    "text": "another class applications i want to",
    "start": "499440",
    "end": "500879"
  },
  {
    "text": "look at are open source distributed",
    "start": "500879",
    "end": "502479"
  },
  {
    "text": "machine learning libraries",
    "start": "502479",
    "end": "504639"
  },
  {
    "text": "today there's actually an emerging",
    "start": "504639",
    "end": "506160"
  },
  {
    "text": "emerging ecosystem of machine learning",
    "start": "506160",
    "end": "507919"
  },
  {
    "text": "libraries that integrate with ray",
    "start": "507919",
    "end": "509919"
  },
  {
    "text": "uh for example we have a class division",
    "start": "509919",
    "end": "512719"
  },
  {
    "text": "um",
    "start": "512719",
    "end": "513120"
  },
  {
    "text": "horavod for distributed training uh",
    "start": "513120",
    "end": "515120"
  },
  {
    "text": "spacey and hugging face and nlp",
    "start": "515120",
    "end": "517839"
  },
  {
    "text": "and then this is actually one of the",
    "start": "517839",
    "end": "519039"
  },
  {
    "text": "original goals i raised like foster a",
    "start": "519039",
    "end": "521200"
  },
  {
    "text": "ecosystem of machine learning libraries",
    "start": "521200",
    "end": "523518"
  },
  {
    "text": "and so why is this happening",
    "start": "523519",
    "end": "525200"
  },
  {
    "text": "um it turns out there's a huge amount of",
    "start": "525200",
    "end": "528080"
  },
  {
    "text": "effort required to",
    "start": "528080",
    "end": "529200"
  },
  {
    "text": "manage all the different aspects of",
    "start": "529200",
    "end": "530800"
  },
  {
    "text": "running on a distributed system",
    "start": "530800",
    "end": "532560"
  },
  {
    "text": "or just running distributed in general",
    "start": "532560",
    "end": "535120"
  },
  {
    "text": "um not even considering like you know",
    "start": "535120",
    "end": "536880"
  },
  {
    "text": "the full benefits of elasticity",
    "start": "536880",
    "end": "540000"
  },
  {
    "text": "to kind of achieve this you need a team",
    "start": "540000",
    "end": "541519"
  },
  {
    "text": "of experts in distributed systems",
    "start": "541519",
    "end": "543200"
  },
  {
    "text": "and of course the authors of these",
    "start": "543200",
    "end": "544560"
  },
  {
    "text": "libraries would rather outsource that to",
    "start": "544560",
    "end": "546720"
  },
  {
    "text": "an open source and reliable distributed",
    "start": "546720",
    "end": "548320"
  },
  {
    "text": "substrates such as ray instead of",
    "start": "548320",
    "end": "550000"
  },
  {
    "text": "spending a lot of effort implementing it",
    "start": "550000",
    "end": "551600"
  },
  {
    "text": "themselves",
    "start": "551600",
    "end": "554000"
  },
  {
    "start": "554000",
    "end": "554000"
  },
  {
    "text": "so one of the visions we have for ray is",
    "start": "555040",
    "end": "557040"
  },
  {
    "text": "a general purpose",
    "start": "557040",
    "end": "558240"
  },
  {
    "text": "serverless platform today if you're",
    "start": "558240",
    "end": "560399"
  },
  {
    "text": "building an application",
    "start": "560399",
    "end": "562080"
  },
  {
    "text": "you have a choice of narrow specialized",
    "start": "562080",
    "end": "564080"
  },
  {
    "text": "serverless solutions",
    "start": "564080",
    "end": "565360"
  },
  {
    "text": "so if your application happens for",
    "start": "565360",
    "end": "566959"
  },
  {
    "text": "example to fit into",
    "start": "566959",
    "end": "568399"
  },
  {
    "text": "the stateless patterns for functions of",
    "start": "568399",
    "end": "569920"
  },
  {
    "text": "service that's great you can",
    "start": "569920",
    "end": "571680"
  },
  {
    "text": "use that and you're you're set otherwise",
    "start": "571680",
    "end": "575279"
  },
  {
    "text": "if one of the existing proprietary",
    "start": "575279",
    "end": "576720"
  },
  {
    "text": "vertical services works for you",
    "start": "576720",
    "end": "578560"
  },
  {
    "text": "um you can also run seriously without",
    "start": "578560",
    "end": "580320"
  },
  {
    "text": "too much effort",
    "start": "580320",
    "end": "582240"
  },
  {
    "text": "or for applications that don't fit into",
    "start": "582240",
    "end": "583920"
  },
  {
    "text": "these molds or perhaps open source",
    "start": "583920",
    "end": "585760"
  },
  {
    "text": "projects",
    "start": "585760",
    "end": "586720"
  },
  {
    "text": "um there's really high barrier to",
    "start": "586720",
    "end": "588640"
  },
  {
    "text": "building a service application",
    "start": "588640",
    "end": "591839"
  },
  {
    "text": "on the other hand if we have a general",
    "start": "591920",
    "end": "593760"
  },
  {
    "text": "purpose platform",
    "start": "593760",
    "end": "595200"
  },
  {
    "text": "vertical services can be simply",
    "start": "595200",
    "end": "596800"
  },
  {
    "text": "implemented as libraries on top of the",
    "start": "596800",
    "end": "598480"
  },
  {
    "text": "platform",
    "start": "598480",
    "end": "599839"
  },
  {
    "text": "so your application can either",
    "start": "599839",
    "end": "601279"
  },
  {
    "text": "straightforwardly use these libraries",
    "start": "601279",
    "end": "603360"
  },
  {
    "text": "or it can build on the underlying",
    "start": "603360",
    "end": "605040"
  },
  {
    "text": "platform itself which",
    "start": "605040",
    "end": "607120"
  },
  {
    "text": "if it's general purpose can support both",
    "start": "607120",
    "end": "608720"
  },
  {
    "text": "stable and stateless computation",
    "start": "608720",
    "end": "610320"
  },
  {
    "text": "patterns",
    "start": "610320",
    "end": "611839"
  },
  {
    "text": "finally we all know building an",
    "start": "611839",
    "end": "613200"
  },
  {
    "text": "application today involves a lot of just",
    "start": "613200",
    "end": "614959"
  },
  {
    "text": "gluing things together",
    "start": "614959",
    "end": "616240"
  },
  {
    "text": "so a general purpose platform will also",
    "start": "616240",
    "end": "617839"
  },
  {
    "text": "let you mix and match together different",
    "start": "617839",
    "end": "619360"
  },
  {
    "text": "workloads",
    "start": "619360",
    "end": "620160"
  },
  {
    "text": "and libraries uh so what's hard about a",
    "start": "620160",
    "end": "623200"
  },
  {
    "text": "general purpose serverless platform",
    "start": "623200",
    "end": "625839"
  },
  {
    "start": "625000",
    "end": "625000"
  },
  {
    "text": "so some requirements are of course we",
    "start": "625839",
    "end": "628240"
  },
  {
    "text": "have to meet the basic",
    "start": "628240",
    "end": "629360"
  },
  {
    "text": "requirements of service serverless the",
    "start": "629360",
    "end": "631200"
  },
  {
    "text": "basic characteristics",
    "start": "631200",
    "end": "633040"
  },
  {
    "text": "which we as we saw before we don't want",
    "start": "633040",
    "end": "634560"
  },
  {
    "text": "to worry about machines and we want high",
    "start": "634560",
    "end": "636399"
  },
  {
    "text": "elasticity",
    "start": "636399",
    "end": "638160"
  },
  {
    "text": "but in addition for generality there are",
    "start": "638160",
    "end": "640240"
  },
  {
    "text": "much uh more requirements from the",
    "start": "640240",
    "end": "642800"
  },
  {
    "text": "that the platform must provide through",
    "start": "642800",
    "end": "644480"
  },
  {
    "text": "its api",
    "start": "644480",
    "end": "646079"
  },
  {
    "text": "and this means this includes",
    "start": "646079",
    "end": "648160"
  },
  {
    "text": "universality to handle many different",
    "start": "648160",
    "end": "649760"
  },
  {
    "text": "types of workloads",
    "start": "649760",
    "end": "651440"
  },
  {
    "text": "you want to lift those you know fast",
    "start": "651440",
    "end": "652880"
  },
  {
    "text": "limitations then support staple apps",
    "start": "652880",
    "end": "655040"
  },
  {
    "text": "support hardware accelerators and so on",
    "start": "655040",
    "end": "657920"
  },
  {
    "text": "you want to be able to easily compose",
    "start": "657920",
    "end": "659440"
  },
  {
    "text": "many different libraries into a single",
    "start": "659440",
    "end": "660720"
  },
  {
    "text": "application so it's kind of like",
    "start": "660720",
    "end": "662320"
  },
  {
    "text": "gluing components together in a",
    "start": "662320",
    "end": "663760"
  },
  {
    "text": "distributed setting",
    "start": "663760",
    "end": "666000"
  },
  {
    "text": "and you want a portable api that runs",
    "start": "666000",
    "end": "668000"
  },
  {
    "text": "not only on one cloud provider but runs",
    "start": "668000",
    "end": "669920"
  },
  {
    "text": "on many different clouds many different",
    "start": "669920",
    "end": "671360"
  },
  {
    "text": "types of hardware",
    "start": "671360",
    "end": "675760"
  },
  {
    "start": "675000",
    "end": "675000"
  },
  {
    "text": "um in general uh generality doesn't come",
    "start": "675760",
    "end": "678079"
  },
  {
    "text": "for free so we have to make some",
    "start": "678079",
    "end": "679120"
  },
  {
    "text": "trade-offs",
    "start": "679120",
    "end": "680399"
  },
  {
    "text": "i think one non-requirement here is very",
    "start": "680399",
    "end": "682079"
  },
  {
    "text": "fine grain elasticity",
    "start": "682079",
    "end": "685360"
  },
  {
    "text": "it's okay to sacrifice the speed of",
    "start": "686560",
    "end": "688399"
  },
  {
    "text": "elasticity for more flexibility",
    "start": "688399",
    "end": "690800"
  },
  {
    "text": "um many types of workloads just simply",
    "start": "690800",
    "end": "693040"
  },
  {
    "text": "don't require like extreme per",
    "start": "693040",
    "end": "694720"
  },
  {
    "text": "millisecond at least that elasticity",
    "start": "694720",
    "end": "697760"
  },
  {
    "text": "for example it's totally okay for us to",
    "start": "697760",
    "end": "699360"
  },
  {
    "text": "take a few seconds or even a few minutes",
    "start": "699360",
    "end": "701040"
  },
  {
    "text": "to scale up your you know",
    "start": "701040",
    "end": "702320"
  },
  {
    "text": "large scale distributed training",
    "start": "702320",
    "end": "703760"
  },
  {
    "text": "workload to you know many gpus",
    "start": "703760",
    "end": "706000"
  },
  {
    "text": "um no one really cares about scaling up",
    "start": "706000",
    "end": "707680"
  },
  {
    "text": "their model training in a fraction of a",
    "start": "707680",
    "end": "709040"
  },
  {
    "text": "second that you might care about for",
    "start": "709040",
    "end": "710880"
  },
  {
    "text": "certain other workloads it simply",
    "start": "710880",
    "end": "712399"
  },
  {
    "text": "doesn't have a user benefit",
    "start": "712399",
    "end": "715040"
  },
  {
    "text": "so i think a historical analogy for this",
    "start": "715040",
    "end": "718240"
  },
  {
    "text": "is",
    "start": "718240",
    "end": "718639"
  },
  {
    "text": "uh just as relational databases have",
    "start": "718639",
    "end": "721360"
  },
  {
    "text": "specialized",
    "start": "721360",
    "end": "722079"
  },
  {
    "text": "indexes that allow them to support",
    "start": "722079",
    "end": "724240"
  },
  {
    "text": "millisecond level queries at very low",
    "start": "724240",
    "end": "726079"
  },
  {
    "text": "latencies",
    "start": "726079",
    "end": "727680"
  },
  {
    "text": "for many workloads the industry has",
    "start": "727680",
    "end": "729200"
  },
  {
    "text": "actually moved on to big data systems",
    "start": "729200",
    "end": "730959"
  },
  {
    "text": "which are more",
    "start": "730959",
    "end": "731920"
  },
  {
    "text": "flexible and scalable but of course",
    "start": "731920",
    "end": "733519"
  },
  {
    "text": "cannot support such low latency queries",
    "start": "733519",
    "end": "737360"
  },
  {
    "text": "so one example this is moving from",
    "start": "737360",
    "end": "738959"
  },
  {
    "text": "relational databases to",
    "start": "738959",
    "end": "740639"
  },
  {
    "text": "export another requirement",
    "start": "740639",
    "end": "744320"
  },
  {
    "text": "and and this is a more subtle one is",
    "start": "744320",
    "end": "746639"
  },
  {
    "text": "that we shouldn't require auto",
    "start": "746639",
    "end": "748160"
  },
  {
    "text": "parallelization in all cases and this is",
    "start": "748160",
    "end": "749760"
  },
  {
    "text": "somewhat a fundamental point",
    "start": "749760",
    "end": "751279"
  },
  {
    "text": "it's you know always possible to write a",
    "start": "751279",
    "end": "753600"
  },
  {
    "text": "state a",
    "start": "753600",
    "end": "754320"
  },
  {
    "text": "stateful workload that doesn't scale",
    "start": "754320",
    "end": "755839"
  },
  {
    "text": "because it has some inherent",
    "start": "755839",
    "end": "757040"
  },
  {
    "text": "communication bottleneck",
    "start": "757040",
    "end": "758639"
  },
  {
    "text": "um you know or simply it just wasn't you",
    "start": "758639",
    "end": "761040"
  },
  {
    "text": "know programmed to scale and so on",
    "start": "761040",
    "end": "763440"
  },
  {
    "text": "um but the implication for a general",
    "start": "763440",
    "end": "767519"
  },
  {
    "text": "purpose platform i think is merely that",
    "start": "767519",
    "end": "769279"
  },
  {
    "text": "the application has to be able to",
    "start": "769279",
    "end": "770880"
  },
  {
    "text": "express how it wants to scale through",
    "start": "770880",
    "end": "772399"
  },
  {
    "text": "the api and the plan as long as the",
    "start": "772399",
    "end": "774560"
  },
  {
    "text": "application expresses that scale then",
    "start": "774560",
    "end": "775920"
  },
  {
    "text": "the platform",
    "start": "775920",
    "end": "776560"
  },
  {
    "text": "can know uh how to scale it if needed so",
    "start": "776560",
    "end": "779440"
  },
  {
    "text": "we'll see how",
    "start": "779440",
    "end": "780480"
  },
  {
    "text": "later ray apis like custom resources and",
    "start": "780480",
    "end": "783279"
  },
  {
    "text": "placement groups make this",
    "start": "783279",
    "end": "784839"
  },
  {
    "text": "possible",
    "start": "784839",
    "end": "787839"
  },
  {
    "start": "787000",
    "end": "787000"
  },
  {
    "text": "okay so let's walk through these",
    "start": "788000",
    "end": "789040"
  },
  {
    "text": "requirements again in more detail",
    "start": "789040",
    "end": "790320"
  },
  {
    "text": "starting with the basic requirements",
    "start": "790320",
    "end": "792320"
  },
  {
    "text": "so first the developer or the use also",
    "start": "792320",
    "end": "794959"
  },
  {
    "text": "the user of the application",
    "start": "794959",
    "end": "796480"
  },
  {
    "text": "shouldn't need to worry about machines",
    "start": "796480",
    "end": "798560"
  },
  {
    "text": "so",
    "start": "798560",
    "end": "800160"
  },
  {
    "text": "you want to think mostly about the code",
    "start": "800160",
    "end": "802399"
  },
  {
    "text": "and you also want hardware portability",
    "start": "802399",
    "end": "804000"
  },
  {
    "text": "for the code that you write so it should",
    "start": "804000",
    "end": "805440"
  },
  {
    "text": "run on",
    "start": "805440",
    "end": "806639"
  },
  {
    "text": "you know different size clusters from",
    "start": "806639",
    "end": "808320"
  },
  {
    "text": "your laptop to maybe your local",
    "start": "808320",
    "end": "810399"
  },
  {
    "text": "kubernetes cluster",
    "start": "810399",
    "end": "812560"
  },
  {
    "text": "on i should run on different size",
    "start": "812560",
    "end": "814000"
  },
  {
    "text": "containers different numbers of machines",
    "start": "814000",
    "end": "815600"
  },
  {
    "text": "and and so on",
    "start": "815600",
    "end": "817920"
  },
  {
    "text": "you also want as much elasticity as",
    "start": "817920",
    "end": "819680"
  },
  {
    "text": "possible so this means you need",
    "start": "819680",
    "end": "821839"
  },
  {
    "text": "application aware auto scaling uh",
    "start": "821839",
    "end": "823680"
  },
  {
    "text": "distributed scheduling",
    "start": "823680",
    "end": "825199"
  },
  {
    "text": "handling of fault tolerance and fast",
    "start": "825199",
    "end": "827199"
  },
  {
    "text": "fast scale open skill",
    "start": "827199",
    "end": "830720"
  },
  {
    "start": "831000",
    "end": "831000"
  },
  {
    "text": "there are additional requirements for",
    "start": "831600",
    "end": "833040"
  },
  {
    "text": "the generality of the api",
    "start": "833040",
    "end": "834880"
  },
  {
    "text": "um so first universality you want to",
    "start": "834880",
    "end": "837600"
  },
  {
    "text": "support many different types of",
    "start": "837600",
    "end": "838720"
  },
  {
    "text": "workloads",
    "start": "838720",
    "end": "839920"
  },
  {
    "text": "both stateless and stateful batch",
    "start": "839920",
    "end": "842399"
  },
  {
    "text": "workloads and also online serving",
    "start": "842399",
    "end": "844560"
  },
  {
    "text": "and io and compute intensive workloads",
    "start": "844560",
    "end": "847920"
  },
  {
    "text": "this also includes abstractions for data",
    "start": "847920",
    "end": "850320"
  },
  {
    "text": "sharing communication and movement and",
    "start": "850320",
    "end": "851760"
  },
  {
    "text": "so on",
    "start": "851760",
    "end": "853839"
  },
  {
    "text": "ray provides this through its api which",
    "start": "853839",
    "end": "856720"
  },
  {
    "text": "i'm not going to",
    "start": "856720",
    "end": "857440"
  },
  {
    "text": "get into detail here but it includes",
    "start": "857440",
    "end": "859360"
  },
  {
    "text": "tasks and actors",
    "start": "859360",
    "end": "860720"
  },
  {
    "text": "that can work together and also a",
    "start": "860720",
    "end": "861920"
  },
  {
    "text": "distributed object store",
    "start": "861920",
    "end": "865040"
  },
  {
    "text": "the second requirement is a",
    "start": "865279",
    "end": "866720"
  },
  {
    "text": "composibility so you want your",
    "start": "866720",
    "end": "868399"
  },
  {
    "text": "application to be language integrated",
    "start": "868399",
    "end": "870800"
  },
  {
    "text": "have native python java interface and so",
    "start": "870800",
    "end": "872959"
  },
  {
    "text": "on for writing distributed applications",
    "start": "872959",
    "end": "874959"
  },
  {
    "text": "and this will allow you to mix and match",
    "start": "874959",
    "end": "876720"
  },
  {
    "text": "different kinds of libraries and",
    "start": "876720",
    "end": "877760"
  },
  {
    "text": "computations very easily",
    "start": "877760",
    "end": "880320"
  },
  {
    "text": "so ray of course has a language",
    "start": "880320",
    "end": "881760"
  },
  {
    "text": "integrated api",
    "start": "881760",
    "end": "883839"
  },
  {
    "text": "that works with python java and also",
    "start": "883839",
    "end": "886320"
  },
  {
    "text": "other languages in the works",
    "start": "886320",
    "end": "888560"
  },
  {
    "text": "the race system also very inherently",
    "start": "888560",
    "end": "890399"
  },
  {
    "text": "supports composability",
    "start": "890399",
    "end": "892160"
  },
  {
    "text": "through its bottom up distributed",
    "start": "892160",
    "end": "894880"
  },
  {
    "text": "scheduler",
    "start": "894880",
    "end": "895839"
  },
  {
    "text": "and a support for a distributed object",
    "start": "895839",
    "end": "897519"
  },
  {
    "text": "references so",
    "start": "897519",
    "end": "898880"
  },
  {
    "text": "these are references for distributed",
    "start": "898880",
    "end": "901680"
  },
  {
    "text": "data objects that can be passed around",
    "start": "901680",
    "end": "903040"
  },
  {
    "text": "the cluster",
    "start": "903040",
    "end": "903839"
  },
  {
    "text": "just like you can pass around you know",
    "start": "903839",
    "end": "905040"
  },
  {
    "text": "references or pointers in a single node",
    "start": "905040",
    "end": "907360"
  },
  {
    "text": "program",
    "start": "907360",
    "end": "909680"
  },
  {
    "text": "the final requirement is portability so",
    "start": "910639",
    "end": "912639"
  },
  {
    "text": "you want to open api",
    "start": "912639",
    "end": "914399"
  },
  {
    "text": "and that can run on any any type of part",
    "start": "914399",
    "end": "918399"
  },
  {
    "text": "uh ray provides this obviously through",
    "start": "918399",
    "end": "920079"
  },
  {
    "text": "being an open source project",
    "start": "920079",
    "end": "921839"
  },
  {
    "text": "and ray also has a like a resources api",
    "start": "921839",
    "end": "924560"
  },
  {
    "text": "that that kind shields the application",
    "start": "924560",
    "end": "926160"
  },
  {
    "text": "programmer from having to worry about",
    "start": "926160",
    "end": "927440"
  },
  {
    "text": "individual",
    "start": "927440",
    "end": "928800"
  },
  {
    "text": "hardware or machine configurations so so",
    "start": "928800",
    "end": "931440"
  },
  {
    "text": "the developer",
    "start": "931440",
    "end": "932079"
  },
  {
    "text": "requests cpu gpu or other custom",
    "start": "932079",
    "end": "934639"
  },
  {
    "text": "resources",
    "start": "934639",
    "end": "935680"
  },
  {
    "text": "and the underlying system will ensure",
    "start": "935680",
    "end": "937360"
  },
  {
    "text": "that they are scheduled correctly",
    "start": "937360",
    "end": "939680"
  },
  {
    "text": "ray also comes with a cluster launcher",
    "start": "939680",
    "end": "941279"
  },
  {
    "text": "or auto scaling layer that supports a",
    "start": "941279",
    "end": "943199"
  },
  {
    "text": "wide range of different types of",
    "start": "943199",
    "end": "944399"
  },
  {
    "text": "clusters and cloud providers",
    "start": "944399",
    "end": "947600"
  },
  {
    "text": "so let's consider how well ray meets",
    "start": "949839",
    "end": "952240"
  },
  {
    "text": "these requirements",
    "start": "952240",
    "end": "955759"
  },
  {
    "start": "955000",
    "end": "955000"
  },
  {
    "text": "the analogy i'm going to reiterate here",
    "start": "955759",
    "end": "957360"
  },
  {
    "text": "is that we're moving from",
    "start": "957360",
    "end": "958800"
  },
  {
    "text": "a special purpose system special purpose",
    "start": "958800",
    "end": "960959"
  },
  {
    "text": "systems for serverless to having a more",
    "start": "960959",
    "end": "962720"
  },
  {
    "text": "general purpose system",
    "start": "962720",
    "end": "964160"
  },
  {
    "text": "this kind of shift has happened many",
    "start": "964160",
    "end": "965680"
  },
  {
    "text": "times before so the most recent example",
    "start": "965680",
    "end": "968079"
  },
  {
    "text": "is moving from relational databases to",
    "start": "968079",
    "end": "969839"
  },
  {
    "text": "big data systems like spark",
    "start": "969839",
    "end": "972000"
  },
  {
    "text": "i think there's a similar analogy from",
    "start": "972000",
    "end": "973680"
  },
  {
    "text": "moving from specialized",
    "start": "973680",
    "end": "975519"
  },
  {
    "text": "functions to service platforms to a",
    "start": "975519",
    "end": "977040"
  },
  {
    "text": "system like ray",
    "start": "977040",
    "end": "979839"
  },
  {
    "text": "to contrast the apis their apis",
    "start": "979839",
    "end": "982240"
  },
  {
    "start": "980000",
    "end": "980000"
  },
  {
    "text": "explicitly you have a table",
    "start": "982240",
    "end": "983839"
  },
  {
    "text": "so with fast we have functions storage",
    "start": "983839",
    "end": "987759"
  },
  {
    "text": "and endpoints and these are the apis",
    "start": "987759",
    "end": "990000"
  },
  {
    "text": "authors used to build their applications",
    "start": "990000",
    "end": "992639"
  },
  {
    "text": "with ray we have tasks which can be used",
    "start": "992639",
    "end": "995839"
  },
  {
    "text": "to express stateless computation these",
    "start": "995839",
    "end": "997360"
  },
  {
    "text": "are the",
    "start": "997360",
    "end": "998160"
  },
  {
    "text": "analogy of an analog of functions",
    "start": "998160",
    "end": "1001199"
  },
  {
    "text": "but ray also provides actors for staple",
    "start": "1001199",
    "end": "1003440"
  },
  {
    "text": "computations",
    "start": "1003440",
    "end": "1005120"
  },
  {
    "text": "and it also lets you easily communicate",
    "start": "1005120",
    "end": "1006800"
  },
  {
    "text": "between tasks and actors just by",
    "start": "1006800",
    "end": "1008480"
  },
  {
    "text": "invoking",
    "start": "1008480",
    "end": "1009680"
  },
  {
    "text": "tasks or making after method calls",
    "start": "1009680",
    "end": "1013279"
  },
  {
    "text": "obviously you can still use any kind of",
    "start": "1013839",
    "end": "1015839"
  },
  {
    "text": "storage you want directly",
    "start": "1015839",
    "end": "1017680"
  },
  {
    "text": "but ray also provides a shared memory",
    "start": "1017680",
    "end": "1019839"
  },
  {
    "text": "object store which enables a distributed",
    "start": "1019839",
    "end": "1021600"
  },
  {
    "text": "communication",
    "start": "1021600",
    "end": "1022480"
  },
  {
    "text": "in a high performance way finally for",
    "start": "1022480",
    "end": "1025839"
  },
  {
    "text": "exposing your application to the outside",
    "start": "1025839",
    "end": "1027520"
  },
  {
    "text": "world",
    "start": "1027520",
    "end": "1028400"
  },
  {
    "text": "uh ray has a serving library for web and",
    "start": "1028400",
    "end": "1030640"
  },
  {
    "text": "model serving that not only provides you",
    "start": "1030640",
    "end": "1032319"
  },
  {
    "text": "know the basics of load balancing",
    "start": "1032319",
    "end": "1035120"
  },
  {
    "text": "but also a programmable serving so you",
    "start": "1035120",
    "end": "1037120"
  },
  {
    "text": "can easily compose some",
    "start": "1037120",
    "end": "1039760"
  },
  {
    "text": "dags of dags of serving pipelines and",
    "start": "1039760",
    "end": "1042880"
  },
  {
    "text": "that's all",
    "start": "1042880",
    "end": "1045280"
  },
  {
    "text": "so let's also score these systems on the",
    "start": "1046400",
    "end": "1048160"
  },
  {
    "text": "requirements we outlined in the previous",
    "start": "1048160",
    "end": "1049600"
  },
  {
    "text": "section",
    "start": "1049600",
    "end": "1050880"
  },
  {
    "text": "so first elasticity uh fast provides",
    "start": "1050880",
    "end": "1053600"
  },
  {
    "text": "very fine-grained auto-scaling",
    "start": "1053600",
    "end": "1055679"
  },
  {
    "text": "um a system like ray which operates at",
    "start": "1055679",
    "end": "1058480"
  },
  {
    "text": "higher level provides",
    "start": "1058480",
    "end": "1059679"
  },
  {
    "text": "application aware auto scaling that",
    "start": "1059679",
    "end": "1061039"
  },
  {
    "text": "operates on that kind of course or grain",
    "start": "1061039",
    "end": "1062559"
  },
  {
    "text": "level so it's not quite as",
    "start": "1062559",
    "end": "1064000"
  },
  {
    "text": "fast at scaling but it's still fairly",
    "start": "1064000",
    "end": "1066240"
  },
  {
    "text": "fast due to optimizations like node",
    "start": "1066240",
    "end": "1067840"
  },
  {
    "text": "caching that i'll talk about",
    "start": "1067840",
    "end": "1069679"
  },
  {
    "text": "in a few slides in terms of",
    "start": "1069679",
    "end": "1073200"
  },
  {
    "text": "shielding the the programmer from",
    "start": "1073200",
    "end": "1075200"
  },
  {
    "text": "reasoning about individual",
    "start": "1075200",
    "end": "1076320"
  },
  {
    "text": "machines fast now achieves this just",
    "start": "1076320",
    "end": "1078240"
  },
  {
    "text": "being very restrictive you just pick one",
    "start": "1078240",
    "end": "1080240"
  },
  {
    "text": "size",
    "start": "1080240",
    "end": "1080880"
  },
  {
    "text": "container for your entire application",
    "start": "1080880",
    "end": "1082720"
  },
  {
    "text": "and that's it",
    "start": "1082720",
    "end": "1083919"
  },
  {
    "text": "um ray has a more kind of flexible",
    "start": "1083919",
    "end": "1086080"
  },
  {
    "text": "approach to this where",
    "start": "1086080",
    "end": "1088240"
  },
  {
    "text": "you have apis to require resources or",
    "start": "1088240",
    "end": "1092000"
  },
  {
    "text": "or groups of resources through things",
    "start": "1092000",
    "end": "1094000"
  },
  {
    "text": "called placement groups",
    "start": "1094000",
    "end": "1096960"
  },
  {
    "text": "in terms of universality fast of course",
    "start": "1097440",
    "end": "1100480"
  },
  {
    "text": "is",
    "start": "1100480",
    "end": "1100960"
  },
  {
    "text": "mostly for stateless stateless online",
    "start": "1100960",
    "end": "1102960"
  },
  {
    "text": "serving workloads",
    "start": "1102960",
    "end": "1104160"
  },
  {
    "text": "array in addition supports staple",
    "start": "1104160",
    "end": "1106240"
  },
  {
    "text": "workloads",
    "start": "1106240",
    "end": "1107679"
  },
  {
    "text": "batch workloads machine learning",
    "start": "1107679",
    "end": "1111039"
  },
  {
    "text": "for composability fast",
    "start": "1111440",
    "end": "1114720"
  },
  {
    "text": "doesn't really provide many primitives",
    "start": "1114720",
    "end": "1116480"
  },
  {
    "text": "for communication between",
    "start": "1116480",
    "end": "1118080"
  },
  {
    "text": "serverless functions or at all of course",
    "start": "1118080",
    "end": "1119600"
  },
  {
    "text": "you can still do rpc to external",
    "start": "1119600",
    "end": "1121200"
  },
  {
    "text": "services",
    "start": "1121200",
    "end": "1122559"
  },
  {
    "text": "and endpoints and so on but it's not",
    "start": "1122559",
    "end": "1124480"
  },
  {
    "text": "really built in",
    "start": "1124480",
    "end": "1125679"
  },
  {
    "text": "on the other hand ray has primitives for",
    "start": "1125679",
    "end": "1130320"
  },
  {
    "text": "communication between tasks and actors",
    "start": "1130799",
    "end": "1132480"
  },
  {
    "text": "through distributability",
    "start": "1132480",
    "end": "1136559"
  },
  {
    "text": "finally uh for the most part fast is",
    "start": "1136559",
    "end": "1138960"
  },
  {
    "text": "tied to specific cloud service and",
    "start": "1138960",
    "end": "1140880"
  },
  {
    "text": "obviously raise the open source project",
    "start": "1140880",
    "end": "1143760"
  },
  {
    "text": "we also find an improved rate in the",
    "start": "1143760",
    "end": "1145440"
  },
  {
    "text": "future versions to kind of improve on",
    "start": "1145440",
    "end": "1146799"
  },
  {
    "text": "some of these points so uh",
    "start": "1146799",
    "end": "1149120"
  },
  {
    "text": "some of the low-hanging fruit is",
    "start": "1149120",
    "end": "1150960"
  },
  {
    "text": "improving auto selling algorithms and",
    "start": "1150960",
    "end": "1153039"
  },
  {
    "text": "supporting a multi-tenancy within rey so",
    "start": "1153039",
    "end": "1155679"
  },
  {
    "text": "this will allow multiple",
    "start": "1155679",
    "end": "1157600"
  },
  {
    "text": "users or applications to run within the",
    "start": "1157600",
    "end": "1159520"
  },
  {
    "text": "same cluster",
    "start": "1159520",
    "end": "1161679"
  },
  {
    "text": "we also plan to improve raise support",
    "start": "1161679",
    "end": "1163280"
  },
  {
    "text": "for data intensive workloads",
    "start": "1163280",
    "end": "1164880"
  },
  {
    "text": "for example by providing features such",
    "start": "1164880",
    "end": "1166720"
  },
  {
    "text": "as automatic object spilling to external",
    "start": "1166720",
    "end": "1169120"
  },
  {
    "text": "storage",
    "start": "1169120",
    "end": "1170240"
  },
  {
    "text": "and locality scheduling for data",
    "start": "1170240",
    "end": "1174720"
  },
  {
    "start": "1175000",
    "end": "1175000"
  },
  {
    "text": "so the rate ecosystem today we have a",
    "start": "1176000",
    "end": "1178080"
  },
  {
    "text": "significant amount of open source",
    "start": "1178080",
    "end": "1179440"
  },
  {
    "text": "projects that are leveraging ray is a",
    "start": "1179440",
    "end": "1180960"
  },
  {
    "text": "distributed service substrate",
    "start": "1180960",
    "end": "1183200"
  },
  {
    "text": "uh of course we have the built-in native",
    "start": "1183200",
    "end": "1185200"
  },
  {
    "text": "ray libraries for reinforcement learning",
    "start": "1185200",
    "end": "1187679"
  },
  {
    "text": "hyper parameter tuning serving and",
    "start": "1187679",
    "end": "1189840"
  },
  {
    "text": "training",
    "start": "1189840",
    "end": "1191120"
  },
  {
    "text": "there are also a number of community ml",
    "start": "1191120",
    "end": "1192799"
  },
  {
    "text": "libraries that use ray for scaling out",
    "start": "1192799",
    "end": "1194400"
  },
  {
    "text": "workloads so this ranges from",
    "start": "1194400",
    "end": "1196080"
  },
  {
    "text": "computer vision to distributed training",
    "start": "1196080",
    "end": "1198640"
  },
  {
    "text": "uh natural language processing and model",
    "start": "1198640",
    "end": "1200559"
  },
  {
    "text": "search",
    "start": "1200559",
    "end": "1201600"
  },
  {
    "text": "there are also a few early stage",
    "start": "1201600",
    "end": "1203600"
  },
  {
    "text": "integrations with data processing",
    "start": "1203600",
    "end": "1204960"
  },
  {
    "text": "libraries so these are our data frame",
    "start": "1204960",
    "end": "1206880"
  },
  {
    "text": "and array libraries are leveraging ray",
    "start": "1206880",
    "end": "1208400"
  },
  {
    "text": "as their distributed substrate",
    "start": "1208400",
    "end": "1210880"
  },
  {
    "text": "so the reason these libraries are",
    "start": "1210880",
    "end": "1212320"
  },
  {
    "text": "integrating with ray is that is to have",
    "start": "1212320",
    "end": "1214240"
  },
  {
    "text": "the advantage of a common substrate",
    "start": "1214240",
    "end": "1216640"
  },
  {
    "text": "ray provides portability across",
    "start": "1216640",
    "end": "1218000"
  },
  {
    "text": "different platforms and it also allows",
    "start": "1218000",
    "end": "1219919"
  },
  {
    "text": "users to easily compose",
    "start": "1219919",
    "end": "1221280"
  },
  {
    "text": "workloads involving a mix of these",
    "start": "1221280",
    "end": "1222720"
  },
  {
    "text": "libraries for example",
    "start": "1222720",
    "end": "1224799"
  },
  {
    "text": "you can easily call reactors from dasa",
    "start": "1224799",
    "end": "1227520"
  },
  {
    "text": "data frames",
    "start": "1227520",
    "end": "1228559"
  },
  {
    "text": "or you know call das data frames from",
    "start": "1228559",
    "end": "1231200"
  },
  {
    "text": "reactors",
    "start": "1231200",
    "end": "1231919"
  },
  {
    "text": "if you're using desk on ray or you might",
    "start": "1231919",
    "end": "1234000"
  },
  {
    "text": "call it distributed analytics library",
    "start": "1234000",
    "end": "1235679"
  },
  {
    "text": "from",
    "start": "1235679",
    "end": "1236000"
  },
  {
    "text": "a model serving workbook i think this",
    "start": "1236000",
    "end": "1238400"
  },
  {
    "text": "kind of seamless composition between",
    "start": "1238400",
    "end": "1240559"
  },
  {
    "text": "distributed libraries is really unique",
    "start": "1240559",
    "end": "1242640"
  },
  {
    "text": "it's a kind of",
    "start": "1242640",
    "end": "1243679"
  },
  {
    "text": "capability unheard of in the distributed",
    "start": "1243679",
    "end": "1245760"
  },
  {
    "text": "system world and",
    "start": "1245760",
    "end": "1246720"
  },
  {
    "text": "something that ray is really good at",
    "start": "1246720",
    "end": "1250640"
  },
  {
    "text": "so in the last part of my talk i'm going",
    "start": "1251520",
    "end": "1252960"
  },
  {
    "text": "to cover some new features for raid 1.0",
    "start": "1252960",
    "end": "1254880"
  },
  {
    "text": "that are oriented towards this edition",
    "start": "1254880",
    "end": "1256480"
  },
  {
    "text": "of a general purpose service problem",
    "start": "1256480",
    "end": "1259760"
  },
  {
    "text": "so first is faster auto scaling so in",
    "start": "1259760",
    "end": "1263039"
  },
  {
    "text": "raid 1.0",
    "start": "1263039",
    "end": "1263919"
  },
  {
    "text": "we have a feature called autoscaler node",
    "start": "1263919",
    "end": "1265840"
  },
  {
    "text": "caching",
    "start": "1265840",
    "end": "1268080"
  },
  {
    "text": "many other features involve",
    "start": "1268080",
    "end": "1271120"
  },
  {
    "text": "improving the ability for applications",
    "start": "1271120",
    "end": "1272720"
  },
  {
    "text": "to express the requirements of scheduler",
    "start": "1272720",
    "end": "1274480"
  },
  {
    "text": "for example with accelerator type",
    "start": "1274480",
    "end": "1276080"
  },
  {
    "text": "resources",
    "start": "1276080",
    "end": "1277200"
  },
  {
    "text": "multi-node type auto scaling placement",
    "start": "1277200",
    "end": "1279360"
  },
  {
    "text": "groups",
    "start": "1279360",
    "end": "1280559"
  },
  {
    "start": "1280000",
    "end": "1280000"
  },
  {
    "text": "the auto scaler node caching when you're",
    "start": "1280559",
    "end": "1283360"
  },
  {
    "text": "launching a new instance in",
    "start": "1283360",
    "end": "1284960"
  },
  {
    "text": "aws or another cloud typically there are",
    "start": "1284960",
    "end": "1287280"
  },
  {
    "text": "two overheads there's a launch overhead",
    "start": "1287280",
    "end": "1289039"
  },
  {
    "text": "and then the boot overhead",
    "start": "1289039",
    "end": "1291520"
  },
  {
    "text": "the second time that you reboot a",
    "start": "1291520",
    "end": "1292880"
  },
  {
    "text": "machine it's much faster to start",
    "start": "1292880",
    "end": "1294640"
  },
  {
    "text": "since the you know the elastic block",
    "start": "1294640",
    "end": "1296240"
  },
  {
    "text": "storage is all warmed up",
    "start": "1296240",
    "end": "1297840"
  },
  {
    "text": "and any application specific setup",
    "start": "1297840",
    "end": "1299840"
  },
  {
    "text": "commands like installing libraries is",
    "start": "1299840",
    "end": "1301600"
  },
  {
    "text": "already done",
    "start": "1301600",
    "end": "1302960"
  },
  {
    "text": "so we take advantage of this to greatly",
    "start": "1302960",
    "end": "1304480"
  },
  {
    "text": "improve the speed of the ray auto scaler",
    "start": "1304480",
    "end": "1306159"
  },
  {
    "text": "by",
    "start": "1306159",
    "end": "1306480"
  },
  {
    "text": "basically caching nodes in the stop",
    "start": "1306480",
    "end": "1308080"
  },
  {
    "text": "state when possible",
    "start": "1308080",
    "end": "1309760"
  },
  {
    "text": "um so when uh when a ray cluster is auto",
    "start": "1309760",
    "end": "1312960"
  },
  {
    "text": "scaling we will kind of cache",
    "start": "1312960",
    "end": "1314480"
  },
  {
    "text": "nodes and stop state when it's scaling",
    "start": "1314480",
    "end": "1316240"
  },
  {
    "text": "down these nodes are extremely cheap to",
    "start": "1316240",
    "end": "1318960"
  },
  {
    "text": "keep around because you don't pay for",
    "start": "1318960",
    "end": "1320240"
  },
  {
    "text": "the compute you just pay for the",
    "start": "1320240",
    "end": "1322000"
  },
  {
    "text": "ephemeral disk storage um",
    "start": "1322000",
    "end": "1325200"
  },
  {
    "text": "and it is of course really fast to",
    "start": "1325200",
    "end": "1326640"
  },
  {
    "text": "restart this these the nodes in this",
    "start": "1326640",
    "end": "1328640"
  },
  {
    "text": "state",
    "start": "1328640",
    "end": "1329440"
  },
  {
    "text": "so this simple optimization greatly",
    "start": "1329440",
    "end": "1331039"
  },
  {
    "text": "improves the speed of auto scaling and",
    "start": "1331039",
    "end": "1332720"
  },
  {
    "text": "rate",
    "start": "1332720",
    "end": "1334960"
  },
  {
    "start": "1335000",
    "end": "1335000"
  },
  {
    "text": "another feature is accelerator type",
    "start": "1335760",
    "end": "1337280"
  },
  {
    "text": "resources so this is the new feature",
    "start": "1337280",
    "end": "1338799"
  },
  {
    "text": "that works",
    "start": "1338799",
    "end": "1339280"
  },
  {
    "text": "in conjunction with multiple node type",
    "start": "1339280",
    "end": "1341760"
  },
  {
    "text": "auto scaling",
    "start": "1341760",
    "end": "1342799"
  },
  {
    "text": "and rate custom resources and the",
    "start": "1342799",
    "end": "1345760"
  },
  {
    "text": "simplest way to",
    "start": "1345760",
    "end": "1346720"
  },
  {
    "text": "illustrate this is an example so suppose",
    "start": "1346720",
    "end": "1348880"
  },
  {
    "text": "i want to run some code on a v100 gpu",
    "start": "1348880",
    "end": "1351919"
  },
  {
    "text": "and i can i can simply uh from ray util",
    "start": "1351919",
    "end": "1354159"
  },
  {
    "text": "accelerators",
    "start": "1354159",
    "end": "1355280"
  },
  {
    "text": "import you know tesla v100 and then when",
    "start": "1355280",
    "end": "1358640"
  },
  {
    "text": "i decorate my function with",
    "start": "1358640",
    "end": "1360000"
  },
  {
    "text": "ray.remote not only do i specify an",
    "start": "1360000",
    "end": "1362320"
  },
  {
    "text": "mgpus1",
    "start": "1362320",
    "end": "1363360"
  },
  {
    "text": "but i also specify the accelerator type",
    "start": "1363360",
    "end": "1365360"
  },
  {
    "text": "to be the v100 gpu",
    "start": "1365360",
    "end": "1367360"
  },
  {
    "text": "and then when when this when this task",
    "start": "1367360",
    "end": "1369760"
  },
  {
    "text": "is scheduled ray will ensure that",
    "start": "1369760",
    "end": "1371280"
  },
  {
    "text": "this task is is run on a machine with",
    "start": "1371280",
    "end": "1373520"
  },
  {
    "text": "with their appropriate gpu type",
    "start": "1373520",
    "end": "1377120"
  },
  {
    "start": "1377000",
    "end": "1377000"
  },
  {
    "text": "so this feature works in conjunction",
    "start": "1378159",
    "end": "1379520"
  },
  {
    "text": "with multi-node type auto scaling",
    "start": "1379520",
    "end": "1381200"
  },
  {
    "text": "so the idea here is simply that you can",
    "start": "1381200",
    "end": "1383120"
  },
  {
    "text": "have a cluster with a mixture of",
    "start": "1383120",
    "end": "1384640"
  },
  {
    "text": "different machine types for example",
    "start": "1384640",
    "end": "1386159"
  },
  {
    "text": "gpu nodes uh cpu nodes uh",
    "start": "1386159",
    "end": "1389280"
  },
  {
    "text": "spot nodes and so on and the way to",
    "start": "1389280",
    "end": "1391360"
  },
  {
    "text": "think about this feature is it kind of",
    "start": "1391360",
    "end": "1392640"
  },
  {
    "text": "has two user interfaces a sysadmin and",
    "start": "1392640",
    "end": "1394960"
  },
  {
    "text": "an end user interface",
    "start": "1394960",
    "end": "1396080"
  },
  {
    "text": "so i mean sometimes these are the same",
    "start": "1396080",
    "end": "1398080"
  },
  {
    "text": "the same person",
    "start": "1398080",
    "end": "1399520"
  },
  {
    "text": "so the sysadmin defines the allowable",
    "start": "1399520",
    "end": "1401280"
  },
  {
    "text": "node types for the cluster",
    "start": "1401280",
    "end": "1402720"
  },
  {
    "text": "for example they might say um you know",
    "start": "1402720",
    "end": "1406400"
  },
  {
    "text": "i can have up to five five cpu nodes of",
    "start": "1406400",
    "end": "1409360"
  },
  {
    "text": "the instance type f4 large",
    "start": "1409360",
    "end": "1410799"
  },
  {
    "text": "and they might define additional node",
    "start": "1410799",
    "end": "1412159"
  },
  {
    "text": "types as gpu nodes larger cpu",
    "start": "1412159",
    "end": "1414400"
  },
  {
    "text": "and so on from the user perspective they",
    "start": "1414400",
    "end": "1417280"
  },
  {
    "text": "simply write",
    "start": "1417280",
    "end": "1418080"
  },
  {
    "text": "code that requests uh resources from ray",
    "start": "1418080",
    "end": "1420960"
  },
  {
    "text": "for example",
    "start": "1420960",
    "end": "1422000"
  },
  {
    "text": "uh you know uh 16 this function or actor",
    "start": "1422000",
    "end": "1425679"
  },
  {
    "text": "requires 16 cpus",
    "start": "1425679",
    "end": "1427440"
  },
  {
    "text": "half a gpu and maybe a particular gpu",
    "start": "1427440",
    "end": "1430320"
  },
  {
    "text": "type",
    "start": "1430320",
    "end": "1431120"
  },
  {
    "text": "and um the ray schedule will",
    "start": "1431120",
    "end": "1433600"
  },
  {
    "text": "automatically",
    "start": "1433600",
    "end": "1434559"
  },
  {
    "text": "add the right set of nodes to the",
    "start": "1434559",
    "end": "1436000"
  },
  {
    "text": "cluster to satisfy these resource",
    "start": "1436000",
    "end": "1437360"
  },
  {
    "text": "commands",
    "start": "1437360",
    "end": "1438000"
  },
  {
    "text": "and uh under under hood this is kind of",
    "start": "1438000",
    "end": "1441039"
  },
  {
    "text": "done with a reverse bin packing",
    "start": "1441039",
    "end": "1442840"
  },
  {
    "text": "algorithm",
    "start": "1442840",
    "end": "1445360"
  },
  {
    "start": "1445000",
    "end": "1445000"
  },
  {
    "text": "so the the final feature i want to",
    "start": "1445360",
    "end": "1446960"
  },
  {
    "text": "highlight is placement groups",
    "start": "1446960",
    "end": "1449200"
  },
  {
    "text": "this is a feature many users have asked",
    "start": "1449200",
    "end": "1450960"
  },
  {
    "text": "for it lets you atomically reserve",
    "start": "1450960",
    "end": "1453200"
  },
  {
    "text": "groups of resources for actors and tasks",
    "start": "1453200",
    "end": "1455039"
  },
  {
    "text": "array",
    "start": "1455039",
    "end": "1456559"
  },
  {
    "text": "this is also known as a gang scheduling",
    "start": "1456559",
    "end": "1459360"
  },
  {
    "text": "so",
    "start": "1459360",
    "end": "1460159"
  },
  {
    "text": "uh one big benefit of using this api is",
    "start": "1460159",
    "end": "1462480"
  },
  {
    "text": "that instead of",
    "start": "1462480",
    "end": "1463520"
  },
  {
    "text": "uh you know requesting actors or tasks",
    "start": "1463520",
    "end": "1465520"
  },
  {
    "text": "individually is that it gives auto",
    "start": "1465520",
    "end": "1466799"
  },
  {
    "text": "scaler more visibility into the shape of",
    "start": "1466799",
    "end": "1468640"
  },
  {
    "text": "resource requests that the application",
    "start": "1468640",
    "end": "1470080"
  },
  {
    "text": "really wants so it can make better",
    "start": "1470080",
    "end": "1471679"
  },
  {
    "text": "scaling decisions",
    "start": "1471679",
    "end": "1473679"
  },
  {
    "text": "um so just to show it works for you when",
    "start": "1473679",
    "end": "1476320"
  },
  {
    "text": "you create a placement group you create",
    "start": "1476320",
    "end": "1477840"
  },
  {
    "text": "a",
    "start": "1477840",
    "end": "1478080"
  },
  {
    "text": "you're requesting a set of a set of",
    "start": "1478080",
    "end": "1480320"
  },
  {
    "text": "resources that you want to spread or",
    "start": "1480320",
    "end": "1482080"
  },
  {
    "text": "pack into",
    "start": "1482080",
    "end": "1482880"
  },
  {
    "text": "across machines for example if you have",
    "start": "1482880",
    "end": "1485360"
  },
  {
    "text": "four machines",
    "start": "1485360",
    "end": "1486000"
  },
  {
    "text": "and you and you specify spread uh this",
    "start": "1486000",
    "end": "1488799"
  },
  {
    "text": "is kind of an anti-affinity",
    "start": "1488799",
    "end": "1490480"
  },
  {
    "text": "preference you want to spread the the",
    "start": "1490480",
    "end": "1492480"
  },
  {
    "text": "you know the resource groups across many",
    "start": "1492480",
    "end": "1494080"
  },
  {
    "text": "different machines here",
    "start": "1494080",
    "end": "1495360"
  },
  {
    "text": "the five groups are spread across four",
    "start": "1495360",
    "end": "1496880"
  },
  {
    "text": "machines it's the best we can do",
    "start": "1496880",
    "end": "1499039"
  },
  {
    "text": "you can also request pack placement so",
    "start": "1499039",
    "end": "1501039"
  },
  {
    "text": "we try to",
    "start": "1501039",
    "end": "1502080"
  },
  {
    "text": "in this case schedule try to pack the",
    "start": "1502080",
    "end": "1504400"
  },
  {
    "text": "resource groups as close together as",
    "start": "1504400",
    "end": "1506000"
  },
  {
    "text": "possible within the machine so here",
    "start": "1506000",
    "end": "1507440"
  },
  {
    "text": "we're able to co-locate them",
    "start": "1507440",
    "end": "1508880"
  },
  {
    "text": "all within just two machines",
    "start": "1508880",
    "end": "1512080"
  },
  {
    "start": "1512000",
    "end": "1512000"
  },
  {
    "text": "so in conclusion ray 1.0 is a step",
    "start": "1512400",
    "end": "1514880"
  },
  {
    "text": "towards ray as a more general purpose",
    "start": "1514880",
    "end": "1516559"
  },
  {
    "text": "serverless substrate",
    "start": "1516559",
    "end": "1518240"
  },
  {
    "text": "uh has a bunch of new apis towards this",
    "start": "1518240",
    "end": "1520159"
  },
  {
    "text": "end in growing ecosystem libraries",
    "start": "1520159",
    "end": "1523520"
  },
  {
    "text": "if you're if you're interested in ray or",
    "start": "1523520",
    "end": "1525200"
  },
  {
    "text": "getting involved",
    "start": "1525200",
    "end": "1526880"
  },
  {
    "text": "you can check out our documentation",
    "start": "1526880",
    "end": "1528400"
  },
  {
    "text": "slack channel at our",
    "start": "1528400",
    "end": "1530000"
  },
  {
    "text": "channels that read to io um we also have",
    "start": "1530000",
    "end": "1532960"
  },
  {
    "text": "a",
    "start": "1532960",
    "end": "1533279"
  },
  {
    "text": "ray 1.0 white paper that covers the",
    "start": "1533279",
    "end": "1535600"
  },
  {
    "text": "internals of ray",
    "start": "1535600",
    "end": "1536559"
  },
  {
    "text": "this is uh you can find this on github",
    "start": "1536559",
    "end": "1538159"
  },
  {
    "text": "or redox",
    "start": "1538159",
    "end": "1540320"
  },
  {
    "text": "yeah so thank you and we're we're hiring",
    "start": "1540320",
    "end": "1543840"
  }
]