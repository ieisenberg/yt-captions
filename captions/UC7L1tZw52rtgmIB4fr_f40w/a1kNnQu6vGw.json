[
  {
    "text": "hi everyone thanks for joining us today",
    "start": "3360",
    "end": "5600"
  },
  {
    "text": "i'm stephanie and today i'll be taking",
    "start": "5600",
    "end": "7440"
  },
  {
    "text": "you on a deep dive of the ray memory",
    "start": "7440",
    "end": "9440"
  },
  {
    "text": "management system",
    "start": "9440",
    "end": "11840"
  },
  {
    "text": "before we start let me tell you a little",
    "start": "11840",
    "end": "13679"
  },
  {
    "text": "bit about myself",
    "start": "13679",
    "end": "15200"
  },
  {
    "text": "i'm a software engineer at any skill and",
    "start": "15200",
    "end": "17600"
  },
  {
    "text": "also a phd student in distributed",
    "start": "17600",
    "end": "19600"
  },
  {
    "text": "systems at uc berkeley",
    "start": "19600",
    "end": "21680"
  },
  {
    "text": "the majority of my work at both any",
    "start": "21680",
    "end": "23600"
  },
  {
    "text": "schill and berkeley has been on the open",
    "start": "23600",
    "end": "25599"
  },
  {
    "text": "source gray core",
    "start": "25599",
    "end": "27119"
  },
  {
    "text": "you can think of that as the back end",
    "start": "27119",
    "end": "28720"
  },
  {
    "text": "for all of the ray application libraries",
    "start": "28720",
    "end": "30800"
  },
  {
    "text": "like rlib tune and more the raycore team",
    "start": "30800",
    "end": "34320"
  },
  {
    "text": "spends a lot of time making sure that",
    "start": "34320",
    "end": "35760"
  },
  {
    "text": "the backend can provide reliability and",
    "start": "35760",
    "end": "37920"
  },
  {
    "text": "performance",
    "start": "37920",
    "end": "38879"
  },
  {
    "text": "for the huge variety of applications",
    "start": "38879",
    "end": "40480"
  },
  {
    "text": "that other developers build on top",
    "start": "40480",
    "end": "42559"
  },
  {
    "text": "so today i'll be giving you an overview",
    "start": "42559",
    "end": "44719"
  },
  {
    "text": "of some of that work",
    "start": "44719",
    "end": "47520"
  },
  {
    "text": "since i'll be focusing specifically on",
    "start": "47520",
    "end": "49440"
  },
  {
    "text": "the memory management system",
    "start": "49440",
    "end": "50960"
  },
  {
    "text": "we'll be going in depth on a bunch of",
    "start": "50960",
    "end": "52559"
  },
  {
    "text": "topics related to gray objects",
    "start": "52559",
    "end": "54879"
  },
  {
    "text": "such as object storage the radon get",
    "start": "54879",
    "end": "57280"
  },
  {
    "text": "call",
    "start": "57280",
    "end": "58000"
  },
  {
    "text": "and memory deallocation",
    "start": "58000",
    "end": "61120"
  },
  {
    "text": "before we get into the specifics let's",
    "start": "61120",
    "end": "63359"
  },
  {
    "text": "talk let's take a high level view of the",
    "start": "63359",
    "end": "65680"
  },
  {
    "text": "architecture",
    "start": "65680",
    "end": "67280"
  },
  {
    "text": "one important thing to understand is",
    "start": "67280",
    "end": "69119"
  },
  {
    "text": "that under the hood",
    "start": "69119",
    "end": "70479"
  },
  {
    "text": "the system treats small and large",
    "start": "70479",
    "end": "72240"
  },
  {
    "text": "objects differently",
    "start": "72240",
    "end": "74080"
  },
  {
    "text": "that's because these objects have",
    "start": "74080",
    "end": "75520"
  },
  {
    "text": "different properties in terms of memory",
    "start": "75520",
    "end": "77360"
  },
  {
    "text": "usage",
    "start": "77360",
    "end": "78080"
  },
  {
    "text": "and how long it takes to get the value",
    "start": "78080",
    "end": "80960"
  },
  {
    "text": "so ray will attempt to optimize",
    "start": "80960",
    "end": "82560"
  },
  {
    "text": "performance",
    "start": "82560",
    "end": "83520"
  },
  {
    "text": "depending on the object's size and",
    "start": "83520",
    "end": "85759"
  },
  {
    "text": "meanwhile the user can ignore all of",
    "start": "85759",
    "end": "87520"
  },
  {
    "text": "these details",
    "start": "87520",
    "end": "88320"
  },
  {
    "text": "and reason about program logic at the",
    "start": "88320",
    "end": "90079"
  },
  {
    "text": "level of object refs",
    "start": "90079",
    "end": "92079"
  },
  {
    "text": "we'll see how this translates to the",
    "start": "92079",
    "end": "93600"
  },
  {
    "text": "physical design next",
    "start": "93600",
    "end": "96479"
  },
  {
    "text": "but first let's take a look at the",
    "start": "96479",
    "end": "97920"
  },
  {
    "text": "overall ray architecture to see how the",
    "start": "97920",
    "end": "100079"
  },
  {
    "text": "memory management system fits in",
    "start": "100079",
    "end": "102640"
  },
  {
    "text": "one of the head nodes in array cluster",
    "start": "102640",
    "end": "104479"
  },
  {
    "text": "is designated as the headnode",
    "start": "104479",
    "end": "106479"
  },
  {
    "text": "and that's because it hosts the global",
    "start": "106479",
    "end": "108000"
  },
  {
    "text": "control store which manages system",
    "start": "108000",
    "end": "109840"
  },
  {
    "text": "metadata that may be accessed by all of",
    "start": "109840",
    "end": "112000"
  },
  {
    "text": "the nodes in a cluster",
    "start": "112000",
    "end": "113439"
  },
  {
    "text": "such as a directory for locating objects",
    "start": "113439",
    "end": "116479"
  },
  {
    "text": "we also have the driver which is the",
    "start": "116479",
    "end": "118479"
  },
  {
    "text": "root python process of an application",
    "start": "118479",
    "end": "120960"
  },
  {
    "text": "and workers which are python processes",
    "start": "120960",
    "end": "123040"
  },
  {
    "text": "that can execute tasks",
    "start": "123040",
    "end": "125840"
  },
  {
    "text": "on every node we also have one process",
    "start": "125840",
    "end": "127920"
  },
  {
    "text": "known as the railit",
    "start": "127920",
    "end": "129360"
  },
  {
    "text": "and the railit has a scheduler thread",
    "start": "129360",
    "end": "131039"
  },
  {
    "text": "that manages resources",
    "start": "131039",
    "end": "132560"
  },
  {
    "text": "and an object store thread that manages",
    "start": "132560",
    "end": "134400"
  },
  {
    "text": "memory",
    "start": "134400",
    "end": "135760"
  },
  {
    "text": "array cluster can also have many other",
    "start": "135760",
    "end": "137760"
  },
  {
    "text": "worker nodes",
    "start": "137760",
    "end": "138879"
  },
  {
    "text": "and these nodes all look like the head",
    "start": "138879",
    "end": "140480"
  },
  {
    "text": "node except that they don't have the",
    "start": "140480",
    "end": "141840"
  },
  {
    "text": "global control stored",
    "start": "141840",
    "end": "143520"
  },
  {
    "text": "so one thing to note is that the global",
    "start": "143520",
    "end": "145120"
  },
  {
    "text": "control store could actually live on any",
    "start": "145120",
    "end": "147120"
  },
  {
    "text": "of these nodes",
    "start": "147120",
    "end": "148800"
  },
  {
    "text": "but currently it resides only on the",
    "start": "148800",
    "end": "150640"
  },
  {
    "text": "head node",
    "start": "150640",
    "end": "153200"
  },
  {
    "text": "the memory management system is actually",
    "start": "153280",
    "end": "155200"
  },
  {
    "text": "a subset of the overall ray architecture",
    "start": "155200",
    "end": "157760"
  },
  {
    "text": "for this talk we'll focus on just these",
    "start": "157760",
    "end": "159920"
  },
  {
    "text": "components",
    "start": "159920",
    "end": "161360"
  },
  {
    "text": "first there's the object metadata and",
    "start": "161360",
    "end": "163599"
  },
  {
    "text": "for both small and large",
    "start": "163599",
    "end": "164879"
  },
  {
    "text": "objects the metadata is stored at the",
    "start": "164879",
    "end": "166720"
  },
  {
    "text": "process that created",
    "start": "166720",
    "end": "168080"
  },
  {
    "text": "the initial object ref and we call that",
    "start": "168080",
    "end": "170480"
  },
  {
    "text": "process the owner",
    "start": "170480",
    "end": "172239"
  },
  {
    "text": "for example if a worker calls a remote",
    "start": "172239",
    "end": "174480"
  },
  {
    "text": "function foo",
    "start": "174480",
    "end": "175519"
  },
  {
    "text": "and that returns an object ref to x",
    "start": "175519",
    "end": "178879"
  },
  {
    "text": "then that worker will also own the",
    "start": "178879",
    "end": "180400"
  },
  {
    "text": "metadata for the object",
    "start": "180400",
    "end": "183680"
  },
  {
    "text": "the owner process is important because",
    "start": "183680",
    "end": "185680"
  },
  {
    "text": "as we'll see soon it's involved in most",
    "start": "185680",
    "end": "187599"
  },
  {
    "text": "of the system operations related to that",
    "start": "187599",
    "end": "189680"
  },
  {
    "text": "object",
    "start": "189680",
    "end": "190640"
  },
  {
    "text": "next we'll look at the architecture",
    "start": "190640",
    "end": "192159"
  },
  {
    "text": "differences for small versus large",
    "start": "192159",
    "end": "194159"
  },
  {
    "text": "objects small objects are quick to copy",
    "start": "194159",
    "end": "198000"
  },
  {
    "text": "and you can store a lot of them at a",
    "start": "198000",
    "end": "199519"
  },
  {
    "text": "single process that's why we store these",
    "start": "199519",
    "end": "202080"
  },
  {
    "text": "directly at the owner",
    "start": "202080",
    "end": "204319"
  },
  {
    "text": "if another worker needs the object value",
    "start": "204319",
    "end": "206400"
  },
  {
    "text": "we can simply copy the object to that",
    "start": "206400",
    "end": "208400"
  },
  {
    "text": "worker",
    "start": "208400",
    "end": "209440"
  },
  {
    "text": "that makes reads really fast and it's",
    "start": "209440",
    "end": "211599"
  },
  {
    "text": "also easy to understand how failures",
    "start": "211599",
    "end": "213440"
  },
  {
    "text": "work",
    "start": "213440",
    "end": "214080"
  },
  {
    "text": "if the owner fails then the object will",
    "start": "214080",
    "end": "215840"
  },
  {
    "text": "fail too",
    "start": "215840",
    "end": "217680"
  },
  {
    "text": "but there are some downsides in extreme",
    "start": "217680",
    "end": "219599"
  },
  {
    "text": "cases where an object is referenced by",
    "start": "219599",
    "end": "221680"
  },
  {
    "text": "many workers",
    "start": "221680",
    "end": "223040"
  },
  {
    "text": "for example passing a small object ref",
    "start": "223040",
    "end": "225360"
  },
  {
    "text": "as an argument",
    "start": "225360",
    "end": "226080"
  },
  {
    "text": "to many many tasks can be inefficient",
    "start": "226080",
    "end": "228720"
  },
  {
    "text": "because each task would require one copy",
    "start": "228720",
    "end": "232799"
  },
  {
    "text": "large objects are more expensive to copy",
    "start": "232799",
    "end": "234959"
  },
  {
    "text": "so we have to navigate a different",
    "start": "234959",
    "end": "236560"
  },
  {
    "text": "trade-off depending on the object's size",
    "start": "236560",
    "end": "239040"
  },
  {
    "text": "instead of storing the object value",
    "start": "239040",
    "end": "240640"
  },
  {
    "text": "directly at the object's owner",
    "start": "240640",
    "end": "242239"
  },
  {
    "text": "we store the object in the distributed",
    "start": "242239",
    "end": "244159"
  },
  {
    "text": "object store",
    "start": "244159",
    "end": "245680"
  },
  {
    "text": "so while one python process might have",
    "start": "245680",
    "end": "247599"
  },
  {
    "text": "the object ref",
    "start": "247599",
    "end": "248959"
  },
  {
    "text": "the actual value may be stored at a",
    "start": "248959",
    "end": "251120"
  },
  {
    "text": "completely different process",
    "start": "251120",
    "end": "252799"
  },
  {
    "text": "maybe even on a different node",
    "start": "252799",
    "end": "255840"
  },
  {
    "text": "the main benefit here is that the object",
    "start": "255840",
    "end": "257759"
  },
  {
    "text": "store on each node can be implemented",
    "start": "257759",
    "end": "259600"
  },
  {
    "text": "with shared memory",
    "start": "259600",
    "end": "260880"
  },
  {
    "text": "so we can leverage that to reduce the",
    "start": "260880",
    "end": "262560"
  },
  {
    "text": "number of copies",
    "start": "262560",
    "end": "264560"
  },
  {
    "text": "on the other hand it can take longer to",
    "start": "264560",
    "end": "266400"
  },
  {
    "text": "read an object since it's stored at a",
    "start": "266400",
    "end": "268400"
  },
  {
    "text": "separate process",
    "start": "268400",
    "end": "269680"
  },
  {
    "text": "and the failure model is more",
    "start": "269680",
    "end": "270960"
  },
  {
    "text": "complicated because now we have a",
    "start": "270960",
    "end": "272639"
  },
  {
    "text": "distributed system",
    "start": "272639",
    "end": "275680"
  },
  {
    "text": "now we'll start to look at how that",
    "start": "275919",
    "end": "277360"
  },
  {
    "text": "architecture actually gets used",
    "start": "277360",
    "end": "279280"
  },
  {
    "text": "to do that we'll discuss each of the",
    "start": "279280",
    "end": "280960"
  },
  {
    "text": "different steps that are involved in an",
    "start": "280960",
    "end": "282720"
  },
  {
    "text": "object's lifetime",
    "start": "282720",
    "end": "285440"
  },
  {
    "text": "to illustrate these different steps",
    "start": "285440",
    "end": "287120"
  },
  {
    "text": "we'll use the simple ray program as a",
    "start": "287120",
    "end": "289199"
  },
  {
    "text": "running example",
    "start": "289199",
    "end": "290800"
  },
  {
    "text": "here we have two remote functions one",
    "start": "290800",
    "end": "293120"
  },
  {
    "text": "that returns an array of random numbers",
    "start": "293120",
    "end": "296080"
  },
  {
    "text": "and another that takes an array as the",
    "start": "296080",
    "end": "297840"
  },
  {
    "text": "argument and computes the mean",
    "start": "297840",
    "end": "300400"
  },
  {
    "text": "we'll invoke two tasks and show the",
    "start": "300400",
    "end": "302320"
  },
  {
    "text": "resulting task graph on the right",
    "start": "302320",
    "end": "304880"
  },
  {
    "text": "first we'll invoke a task to compute a",
    "start": "304880",
    "end": "306880"
  },
  {
    "text": "random array",
    "start": "306880",
    "end": "308080"
  },
  {
    "text": "and the system will treat this as a",
    "start": "308080",
    "end": "309759"
  },
  {
    "text": "large object",
    "start": "309759",
    "end": "311520"
  },
  {
    "text": "this call returns an object ref to the",
    "start": "311520",
    "end": "313520"
  },
  {
    "text": "caller or a future that will eventually",
    "start": "313520",
    "end": "315600"
  },
  {
    "text": "get populated by ray with the task's",
    "start": "315600",
    "end": "317759"
  },
  {
    "text": "return value",
    "start": "317759",
    "end": "319520"
  },
  {
    "text": "we can pass this feature to another task",
    "start": "319520",
    "end": "322080"
  },
  {
    "text": "to indicate a data dependency",
    "start": "322080",
    "end": "324320"
  },
  {
    "text": "and the second task will compute and",
    "start": "324320",
    "end": "326080"
  },
  {
    "text": "return the mean and this time the system",
    "start": "326080",
    "end": "328240"
  },
  {
    "text": "will treat this as a small object",
    "start": "328240",
    "end": "330000"
  },
  {
    "text": "since it's just an integer",
    "start": "330000",
    "end": "333199"
  },
  {
    "text": "so that program looks simple enough but",
    "start": "334080",
    "end": "336240"
  },
  {
    "text": "under the hood there's actually a series",
    "start": "336240",
    "end": "337919"
  },
  {
    "text": "of steps that the system has to take",
    "start": "337919",
    "end": "340000"
  },
  {
    "text": "during the object's lifetime first the",
    "start": "340000",
    "end": "342880"
  },
  {
    "text": "application creates the initial object",
    "start": "342880",
    "end": "344960"
  },
  {
    "text": "ref",
    "start": "344960",
    "end": "345600"
  },
  {
    "text": "and this happens whenever a task is",
    "start": "345600",
    "end": "347759"
  },
  {
    "text": "invoked such as with the call to",
    "start": "347759",
    "end": "349440"
  },
  {
    "text": "random.remote",
    "start": "349440",
    "end": "350880"
  },
  {
    "text": "from here the system will ensure that",
    "start": "350880",
    "end": "352560"
  },
  {
    "text": "the task eventually gets executed",
    "start": "352560",
    "end": "354880"
  },
  {
    "text": "and that the object value can eventually",
    "start": "354880",
    "end": "356639"
  },
  {
    "text": "be read",
    "start": "356639",
    "end": "358720"
  },
  {
    "text": "next the application can create other",
    "start": "358720",
    "end": "360560"
  },
  {
    "text": "references to the object value",
    "start": "360560",
    "end": "362639"
  },
  {
    "text": "even before the object value has been",
    "start": "362639",
    "end": "364639"
  },
  {
    "text": "computed",
    "start": "364639",
    "end": "365759"
  },
  {
    "text": "for example our program did this when it",
    "start": "365759",
    "end": "367840"
  },
  {
    "text": "passed the array object ref as an",
    "start": "367840",
    "end": "369919"
  },
  {
    "text": "argument to the mean task",
    "start": "369919",
    "end": "372960"
  },
  {
    "text": "once the task actually executes we can",
    "start": "372960",
    "end": "375199"
  },
  {
    "text": "allocate memory for the returned object",
    "start": "375199",
    "end": "377759"
  },
  {
    "text": "and now that the value is available",
    "start": "377759",
    "end": "379840"
  },
  {
    "text": "other reference holders can get",
    "start": "379840",
    "end": "381600"
  },
  {
    "text": "or resolve the value of the object so",
    "start": "381600",
    "end": "384319"
  },
  {
    "text": "for example the downstream tasks that we",
    "start": "384319",
    "end": "386400"
  },
  {
    "text": "submitted earlier",
    "start": "386400",
    "end": "387280"
  },
  {
    "text": "could resolve its reference to array and",
    "start": "387280",
    "end": "389520"
  },
  {
    "text": "start execution",
    "start": "389520",
    "end": "392080"
  },
  {
    "text": "while this is happening it's also",
    "start": "392080",
    "end": "393680"
  },
  {
    "text": "possible for more references to get",
    "start": "393680",
    "end": "395440"
  },
  {
    "text": "created",
    "start": "395440",
    "end": "396240"
  },
  {
    "text": "for example we might want to pass the",
    "start": "396240",
    "end": "398000"
  },
  {
    "text": "object ref to other tasks",
    "start": "398000",
    "end": "400080"
  },
  {
    "text": "and finally at some point all of the",
    "start": "400080",
    "end": "401840"
  },
  {
    "text": "references to the object should get",
    "start": "401840",
    "end": "403360"
  },
  {
    "text": "deleted",
    "start": "403360",
    "end": "404960"
  },
  {
    "text": "ray implements a distributed reference",
    "start": "404960",
    "end": "406720"
  },
  {
    "text": "counting protocol to figure out when",
    "start": "406720",
    "end": "408639"
  },
  {
    "text": "this happens",
    "start": "408639",
    "end": "409759"
  },
  {
    "text": "for example the system will wait until",
    "start": "409759",
    "end": "411680"
  },
  {
    "text": "any tasks that depend on the object",
    "start": "411680",
    "end": "413840"
  },
  {
    "text": "have finished execution before it",
    "start": "413840",
    "end": "415680"
  },
  {
    "text": "decides to finally deallocate the object",
    "start": "415680",
    "end": "419199"
  },
  {
    "text": "as a user this is convenient because it",
    "start": "419199",
    "end": "421199"
  },
  {
    "text": "means that you don't need to worry about",
    "start": "421199",
    "end": "422800"
  },
  {
    "text": "manually freeing memory",
    "start": "422800",
    "end": "424479"
  },
  {
    "text": "you can just delete an object ref once",
    "start": "424479",
    "end": "426319"
  },
  {
    "text": "you're finished with it",
    "start": "426319",
    "end": "429199"
  },
  {
    "text": "now we'll look at each of those steps in",
    "start": "429280",
    "end": "430960"
  },
  {
    "text": "detail and the first step was the",
    "start": "430960",
    "end": "432639"
  },
  {
    "text": "creation of the initial object graph",
    "start": "432639",
    "end": "436400"
  },
  {
    "text": "so in our program example this happened",
    "start": "436400",
    "end": "438479"
  },
  {
    "text": "when we submitted the two tasks",
    "start": "438479",
    "end": "440639"
  },
  {
    "text": "let's see how ray executes this on a",
    "start": "440639",
    "end": "442560"
  },
  {
    "text": "cluster",
    "start": "442560",
    "end": "444880"
  },
  {
    "text": "for now we can just focus on the object",
    "start": "444880",
    "end": "446800"
  },
  {
    "text": "store components of the architecture",
    "start": "446800",
    "end": "449199"
  },
  {
    "text": "eventually the tasks will get executed",
    "start": "449199",
    "end": "451440"
  },
  {
    "text": "here",
    "start": "451440",
    "end": "452479"
  },
  {
    "text": "but for now we'll just focus on the",
    "start": "452479",
    "end": "454319"
  },
  {
    "text": "driver",
    "start": "454319",
    "end": "456000"
  },
  {
    "text": "and that's because the initial creation",
    "start": "456000",
    "end": "457680"
  },
  {
    "text": "of the object ref",
    "start": "457680",
    "end": "459039"
  },
  {
    "text": "is a completely local operation like i",
    "start": "459039",
    "end": "461919"
  },
  {
    "text": "mentioned",
    "start": "461919",
    "end": "462400"
  },
  {
    "text": "before the object metadata is stored at",
    "start": "462400",
    "end": "465039"
  },
  {
    "text": "the owner",
    "start": "465039",
    "end": "466000"
  },
  {
    "text": "and there are other types of metadata",
    "start": "466000",
    "end": "467520"
  },
  {
    "text": "that gets stored here like the ref",
    "start": "467520",
    "end": "469280"
  },
  {
    "text": "counts",
    "start": "469280",
    "end": "470160"
  },
  {
    "text": "but to keep things simple we'll just",
    "start": "470160",
    "end": "471759"
  },
  {
    "text": "show the object's value for now",
    "start": "471759",
    "end": "474879"
  },
  {
    "text": "as the driver runs the application code",
    "start": "474879",
    "end": "477120"
  },
  {
    "text": "it will invoke the",
    "start": "477120",
    "end": "478000"
  },
  {
    "text": "first task which creates an object ref",
    "start": "478000",
    "end": "480639"
  },
  {
    "text": "and at this point we'll add a metadata",
    "start": "480639",
    "end": "482639"
  },
  {
    "text": "row for that object",
    "start": "482639",
    "end": "483840"
  },
  {
    "text": "to the driver's local memory since",
    "start": "483840",
    "end": "486639"
  },
  {
    "text": "object refs are also futures",
    "start": "486639",
    "end": "488560"
  },
  {
    "text": "the value is going to be an unknown",
    "start": "488560",
    "end": "490879"
  },
  {
    "text": "initially",
    "start": "490879",
    "end": "493840"
  },
  {
    "text": "that also lets us invoke the next task",
    "start": "494479",
    "end": "496720"
  },
  {
    "text": "immediately without waiting for the",
    "start": "496720",
    "end": "498319"
  },
  {
    "text": "first task",
    "start": "498319",
    "end": "499199"
  },
  {
    "text": "to finish you can see here that we're",
    "start": "499199",
    "end": "501360"
  },
  {
    "text": "also creating a reference to the array",
    "start": "501360",
    "end": "503440"
  },
  {
    "text": "object",
    "start": "503440",
    "end": "504800"
  },
  {
    "text": "by passing the object ref as an argument",
    "start": "504800",
    "end": "506879"
  },
  {
    "text": "to the new task",
    "start": "506879",
    "end": "508400"
  },
  {
    "text": "similar to before this remote call will",
    "start": "508400",
    "end": "510400"
  },
  {
    "text": "also return an object ref",
    "start": "510400",
    "end": "512320"
  },
  {
    "text": "and although we don't store this one in",
    "start": "512320",
    "end": "513839"
  },
  {
    "text": "the python code the driver will still",
    "start": "513839",
    "end": "515839"
  },
  {
    "text": "add a metadata row for this new object",
    "start": "515839",
    "end": "520320"
  },
  {
    "text": "next let's talk about the creation of",
    "start": "520320",
    "end": "522080"
  },
  {
    "text": "the object value",
    "start": "522080",
    "end": "524800"
  },
  {
    "text": "we'll start with allocation for the",
    "start": "524800",
    "end": "526560"
  },
  {
    "text": "large object which was returned by the",
    "start": "526560",
    "end": "528800"
  },
  {
    "text": "random task",
    "start": "528800",
    "end": "531600"
  },
  {
    "text": "to start we have to schedule the random",
    "start": "531680",
    "end": "533680"
  },
  {
    "text": "task on a worker",
    "start": "533680",
    "end": "535279"
  },
  {
    "text": "let's suppose that we have another node",
    "start": "535279",
    "end": "537200"
  },
  {
    "text": "with a worker on it",
    "start": "537200",
    "end": "538480"
  },
  {
    "text": "and so we can send the task to that",
    "start": "538480",
    "end": "540160"
  },
  {
    "text": "worker for execution",
    "start": "540160",
    "end": "542240"
  },
  {
    "text": "once the worker finishes the task it",
    "start": "542240",
    "end": "544320"
  },
  {
    "text": "stores the return value in its local",
    "start": "544320",
    "end": "546240"
  },
  {
    "text": "object store",
    "start": "546240",
    "end": "548720"
  },
  {
    "text": "next the worker responds to the task's",
    "start": "548720",
    "end": "550880"
  },
  {
    "text": "caller saying that the array is now in",
    "start": "550880",
    "end": "552880"
  },
  {
    "text": "the distributed object store",
    "start": "552880",
    "end": "556320"
  },
  {
    "text": "the driver updates its local metadata to",
    "start": "556320",
    "end": "558640"
  },
  {
    "text": "record the fact that the actual object",
    "start": "558640",
    "end": "560560"
  },
  {
    "text": "value is stored in the remote",
    "start": "560560",
    "end": "562080"
  },
  {
    "text": "object store and this way you can sort",
    "start": "562080",
    "end": "564640"
  },
  {
    "text": "of think of the driver's local value as",
    "start": "564640",
    "end": "566640"
  },
  {
    "text": "a pointer",
    "start": "566640",
    "end": "567279"
  },
  {
    "text": "into the distributed object store",
    "start": "567279",
    "end": "570480"
  },
  {
    "text": "another important thing about this",
    "start": "570480",
    "end": "572000"
  },
  {
    "text": "design is that the first copy of the",
    "start": "572000",
    "end": "573839"
  },
  {
    "text": "object is known as the primary copy",
    "start": "573839",
    "end": "576320"
  },
  {
    "text": "that's because ray will guarantee that",
    "start": "576320",
    "end": "578000"
  },
  {
    "text": "it stays pinned until the object is safe",
    "start": "578000",
    "end": "580080"
  },
  {
    "text": "to deallocate",
    "start": "580080",
    "end": "582880"
  },
  {
    "text": "now that the object value has been",
    "start": "582880",
    "end": "584399"
  },
  {
    "text": "created we can resolve an object ref and",
    "start": "584399",
    "end": "586720"
  },
  {
    "text": "get the value",
    "start": "586720",
    "end": "590000"
  },
  {
    "text": "show how large objects get resolved",
    "start": "590000",
    "end": "592160"
  },
  {
    "text": "let's look at the mean task",
    "start": "592160",
    "end": "593920"
  },
  {
    "text": "and see how it resolves its reference to",
    "start": "593920",
    "end": "595920"
  },
  {
    "text": "the array object",
    "start": "595920",
    "end": "598959"
  },
  {
    "text": "to resolve large objects we'll need a",
    "start": "599600",
    "end": "601519"
  },
  {
    "text": "way to figure out where objects are",
    "start": "601519",
    "end": "603040"
  },
  {
    "text": "located",
    "start": "603040",
    "end": "604000"
  },
  {
    "text": "this is where the object directory comes",
    "start": "604000",
    "end": "605839"
  },
  {
    "text": "in this directory stores the current",
    "start": "605839",
    "end": "608399"
  },
  {
    "text": "locations of all large objects",
    "start": "608399",
    "end": "610880"
  },
  {
    "text": "and it lives on the head node as a part",
    "start": "610880",
    "end": "612480"
  },
  {
    "text": "of the global control store",
    "start": "612480",
    "end": "614880"
  },
  {
    "text": "each time an object is created in an",
    "start": "614880",
    "end": "616880"
  },
  {
    "text": "object store node",
    "start": "616880",
    "end": "618079"
  },
  {
    "text": "the node will asynchronously add itself",
    "start": "618079",
    "end": "620240"
  },
  {
    "text": "as a location",
    "start": "620240",
    "end": "621440"
  },
  {
    "text": "in the object directory",
    "start": "621440",
    "end": "624640"
  },
  {
    "text": "since the object directory is globally",
    "start": "624720",
    "end": "626640"
  },
  {
    "text": "accessible we can use this on other",
    "start": "626640",
    "end": "628560"
  },
  {
    "text": "nodes to figure out where to find an",
    "start": "628560",
    "end": "630240"
  },
  {
    "text": "object",
    "start": "630240",
    "end": "631440"
  },
  {
    "text": "let's say the mean task gets scheduled",
    "start": "631440",
    "end": "633200"
  },
  {
    "text": "to run on a third node",
    "start": "633200",
    "end": "635839"
  },
  {
    "text": "now that we have a value for the array",
    "start": "635839",
    "end": "637760"
  },
  {
    "text": "argument we can also send the mean task",
    "start": "637760",
    "end": "640000"
  },
  {
    "text": "to be executed",
    "start": "640000",
    "end": "641680"
  },
  {
    "text": "we'll send the test over like before but",
    "start": "641680",
    "end": "644160"
  },
  {
    "text": "this time we'll also attach a message",
    "start": "644160",
    "end": "646000"
  },
  {
    "text": "saying that the array can be found in",
    "start": "646000",
    "end": "647760"
  },
  {
    "text": "the distributed object store",
    "start": "647760",
    "end": "649760"
  },
  {
    "text": "and that will let the worker on node 3",
    "start": "649760",
    "end": "651760"
  },
  {
    "text": "know where to find the object",
    "start": "651760",
    "end": "654959"
  },
  {
    "text": "from here on the caller is no longer",
    "start": "654959",
    "end": "657120"
  },
  {
    "text": "involved in the object transfer",
    "start": "657120",
    "end": "659279"
  },
  {
    "text": "this is to reduce the bandwidth that's",
    "start": "659279",
    "end": "660959"
  },
  {
    "text": "needed at the caller",
    "start": "660959",
    "end": "662320"
  },
  {
    "text": "so even though the caller can specify",
    "start": "662320",
    "end": "664079"
  },
  {
    "text": "data dependencies through object graphs",
    "start": "664079",
    "end": "666399"
  },
  {
    "text": "it doesn't have to ever see the object",
    "start": "666399",
    "end": "668160"
  },
  {
    "text": "data",
    "start": "668160",
    "end": "669600"
  },
  {
    "text": "instead each node that needs the object",
    "start": "669600",
    "end": "671519"
  },
  {
    "text": "will copy it directly from another node",
    "start": "671519",
    "end": "674000"
  },
  {
    "text": "for example node 3 can now ask the",
    "start": "674000",
    "end": "676079"
  },
  {
    "text": "object directory for locations of the",
    "start": "676079",
    "end": "678079"
  },
  {
    "text": "array",
    "start": "678079",
    "end": "680399"
  },
  {
    "text": "the object directory responds saying",
    "start": "681040",
    "end": "682959"
  },
  {
    "text": "that the object is on node 2",
    "start": "682959",
    "end": "685120"
  },
  {
    "text": "and now node 3 can ask node 2 for a copy",
    "start": "685120",
    "end": "687680"
  },
  {
    "text": "of the object",
    "start": "687680",
    "end": "690399"
  },
  {
    "text": "node 2 sends a copy over to node 3 and",
    "start": "690399",
    "end": "693279"
  },
  {
    "text": "now this worker can begin executing the",
    "start": "693279",
    "end": "695360"
  },
  {
    "text": "task",
    "start": "695360",
    "end": "697680"
  },
  {
    "text": "as you saw the process for large objects",
    "start": "698880",
    "end": "701040"
  },
  {
    "text": "can get pretty complicated",
    "start": "701040",
    "end": "702399"
  },
  {
    "text": "because we have to use a distributed",
    "start": "702399",
    "end": "703920"
  },
  {
    "text": "protocol",
    "start": "703920",
    "end": "705680"
  },
  {
    "text": "small objects are relatively easy to",
    "start": "705680",
    "end": "707519"
  },
  {
    "text": "handle since they're not as expensive to",
    "start": "707519",
    "end": "709440"
  },
  {
    "text": "store and copy",
    "start": "709440",
    "end": "711920"
  },
  {
    "text": "to show this let's see what happens when",
    "start": "711920",
    "end": "713839"
  },
  {
    "text": "the mean task returns its result",
    "start": "713839",
    "end": "716240"
  },
  {
    "text": "since the result here is just an integer",
    "start": "716240",
    "end": "718160"
  },
  {
    "text": "it should be pretty small",
    "start": "718160",
    "end": "721360"
  },
  {
    "text": "for small objects we never need to",
    "start": "721600",
    "end": "723360"
  },
  {
    "text": "communicate with the distributed object",
    "start": "723360",
    "end": "725120"
  },
  {
    "text": "store",
    "start": "725120",
    "end": "725920"
  },
  {
    "text": "instead we can just respond directly to",
    "start": "725920",
    "end": "727920"
  },
  {
    "text": "the object's owner with the value of the",
    "start": "727920",
    "end": "729920"
  },
  {
    "text": "object",
    "start": "729920",
    "end": "730880"
  },
  {
    "text": "and the owner then copies this value",
    "start": "730880",
    "end": "732800"
  },
  {
    "text": "into its local in-process store",
    "start": "732800",
    "end": "736399"
  },
  {
    "text": "from there getting the value of a small",
    "start": "736399",
    "end": "738320"
  },
  {
    "text": "object is also pretty straightforward",
    "start": "738320",
    "end": "741839"
  },
  {
    "text": "in the code we did this by calling",
    "start": "741839",
    "end": "743600"
  },
  {
    "text": "ray.get on the object ref returned by",
    "start": "743600",
    "end": "746079"
  },
  {
    "text": "the mean task",
    "start": "746079",
    "end": "748800"
  },
  {
    "text": "this is implemented with a lookup to the",
    "start": "748800",
    "end": "751040"
  },
  {
    "text": "local in process store",
    "start": "751040",
    "end": "753519"
  },
  {
    "text": "then we just copy the value to python",
    "start": "753519",
    "end": "758079"
  },
  {
    "text": "we can do something similar to handle",
    "start": "758079",
    "end": "759839"
  },
  {
    "text": "small objects that get passed as a task",
    "start": "759839",
    "end": "762000"
  },
  {
    "text": "argument",
    "start": "762000",
    "end": "762800"
  },
  {
    "text": "so for example let's say that we",
    "start": "762800",
    "end": "764720"
  },
  {
    "text": "actually decided to pass the final",
    "start": "764720",
    "end": "766480"
  },
  {
    "text": "object ref",
    "start": "766480",
    "end": "767440"
  },
  {
    "text": "to another task foo once the value is",
    "start": "767440",
    "end": "770399"
  },
  {
    "text": "ready the driver will copy the value",
    "start": "770399",
    "end": "772160"
  },
  {
    "text": "from its in-process store",
    "start": "772160",
    "end": "773519"
  },
  {
    "text": "into the task description and from there",
    "start": "773519",
    "end": "775920"
  },
  {
    "text": "the worker can access the value directly",
    "start": "775920",
    "end": "780079"
  },
  {
    "text": "okay so now that we've created all of",
    "start": "780320",
    "end": "782079"
  },
  {
    "text": "these objects how do we actually get rid",
    "start": "782079",
    "end": "783920"
  },
  {
    "text": "of them that makes it easy to free small",
    "start": "783920",
    "end": "787680"
  },
  {
    "text": "objects quickly so once the driver sees",
    "start": "787680",
    "end": "790160"
  },
  {
    "text": "that the",
    "start": "790160",
    "end": "790880"
  },
  {
    "text": "resulting object run has gone out of",
    "start": "790880",
    "end": "793279"
  },
  {
    "text": "scope",
    "start": "793279",
    "end": "794079"
  },
  {
    "text": "it just erases the entry from its local",
    "start": "794079",
    "end": "796160"
  },
  {
    "text": "metadata",
    "start": "796160",
    "end": "798720"
  },
  {
    "text": "we can do the same thing to erase the",
    "start": "798959",
    "end": "800800"
  },
  {
    "text": "array object ref",
    "start": "800800",
    "end": "802399"
  },
  {
    "text": "but this time since the actual value was",
    "start": "802399",
    "end": "804320"
  },
  {
    "text": "stored in the distributed object store",
    "start": "804320",
    "end": "806560"
  },
  {
    "text": "we also have to free that memory",
    "start": "806560",
    "end": "810160"
  },
  {
    "text": "there are two kinds of object copies",
    "start": "810480",
    "end": "812079"
  },
  {
    "text": "that can exist in the distributed object",
    "start": "812079",
    "end": "814079"
  },
  {
    "text": "store",
    "start": "814079",
    "end": "814880"
  },
  {
    "text": "i mentioned earlier that one of these is",
    "start": "814880",
    "end": "816800"
  },
  {
    "text": "known as the primary copy",
    "start": "816800",
    "end": "818880"
  },
  {
    "text": "and gray will pin this copy to make sure",
    "start": "818880",
    "end": "820800"
  },
  {
    "text": "that at least one copy of the object is",
    "start": "820800",
    "end": "822560"
  },
  {
    "text": "always available",
    "start": "822560",
    "end": "824000"
  },
  {
    "text": "so that means that we also need to",
    "start": "824000",
    "end": "825360"
  },
  {
    "text": "figure out when we can unpin this copy",
    "start": "825360",
    "end": "828480"
  },
  {
    "text": "during the object's lifetime we can also",
    "start": "828480",
    "end": "830240"
  },
  {
    "text": "create multiple secondary copies",
    "start": "830240",
    "end": "832639"
  },
  {
    "text": "for example this one got created because",
    "start": "832639",
    "end": "835040"
  },
  {
    "text": "we executed a task there that needed the",
    "start": "835040",
    "end": "837519"
  },
  {
    "text": "object",
    "start": "837519",
    "end": "839440"
  },
  {
    "text": "secondary copies might get freed before",
    "start": "839440",
    "end": "841600"
  },
  {
    "text": "the object has gone out of scope",
    "start": "841600",
    "end": "843680"
  },
  {
    "text": "for example if node 3's object store",
    "start": "843680",
    "end": "845839"
  },
  {
    "text": "reaches capacity",
    "start": "845839",
    "end": "847120"
  },
  {
    "text": "we might free it early",
    "start": "847120",
    "end": "850240"
  },
  {
    "text": "rey will eventually and automatically",
    "start": "851120",
    "end": "852959"
  },
  {
    "text": "free both primary and secondary copies",
    "start": "852959",
    "end": "855680"
  },
  {
    "text": "and to do this the node that has the",
    "start": "855680",
    "end": "857360"
  },
  {
    "text": "primary copy will ask the object's owner",
    "start": "857360",
    "end": "860240"
  },
  {
    "text": "when the copy can be released",
    "start": "860240",
    "end": "863760"
  },
  {
    "text": "in this case the reference has already",
    "start": "863839",
    "end": "865440"
  },
  {
    "text": "gone out of scope so the owner responds",
    "start": "865440",
    "end": "867519"
  },
  {
    "text": "saying that it's okay to release the",
    "start": "867519",
    "end": "869199"
  },
  {
    "text": "array",
    "start": "869199",
    "end": "870560"
  },
  {
    "text": "the primary node frees the array once it",
    "start": "870560",
    "end": "872720"
  },
  {
    "text": "receives the reply",
    "start": "872720",
    "end": "874079"
  },
  {
    "text": "then broadcast this to other nodes to",
    "start": "874079",
    "end": "876160"
  },
  {
    "text": "free the secondary copies",
    "start": "876160",
    "end": "879519"
  },
  {
    "text": "this way we eventually end up back in",
    "start": "879600",
    "end": "881360"
  },
  {
    "text": "the original state and ready to execute",
    "start": "881360",
    "end": "883360"
  },
  {
    "text": "more tasks",
    "start": "883360",
    "end": "885839"
  },
  {
    "text": "so you might be wondering what do i",
    "start": "886880",
    "end": "889199"
  },
  {
    "text": "actually do if i have a memory issue in",
    "start": "889199",
    "end": "891040"
  },
  {
    "text": "my program",
    "start": "891040",
    "end": "892160"
  },
  {
    "text": "well next i'll go through a brief demo",
    "start": "892160",
    "end": "894000"
  },
  {
    "text": "of some of the memory debugging tools",
    "start": "894000",
    "end": "895680"
  },
  {
    "text": "that ray provides",
    "start": "895680",
    "end": "897600"
  },
  {
    "text": "i'll show you how to take an out of",
    "start": "897600",
    "end": "899120"
  },
  {
    "text": "memory error in your application",
    "start": "899120",
    "end": "900959"
  },
  {
    "text": "and debug it using the ray memory",
    "start": "900959",
    "end": "902800"
  },
  {
    "text": "dashboard this is a new feature that was",
    "start": "902800",
    "end": "905199"
  },
  {
    "text": "contributed by max fiton",
    "start": "905199",
    "end": "907120"
  },
  {
    "text": "and i definitely encourage you to try it",
    "start": "907120",
    "end": "908800"
  },
  {
    "text": "out and send us any feedback",
    "start": "908800",
    "end": "912000"
  },
  {
    "text": "so here i've actually just taken the",
    "start": "912000",
    "end": "913839"
  },
  {
    "text": "same example that i've been using",
    "start": "913839",
    "end": "915839"
  },
  {
    "text": "in my presentation and i copy pasted it",
    "start": "915839",
    "end": "918399"
  },
  {
    "text": "into this python script",
    "start": "918399",
    "end": "920959"
  },
  {
    "text": "so here we have the random task which",
    "start": "920959",
    "end": "922959"
  },
  {
    "text": "generates a 100 megabyte array",
    "start": "922959",
    "end": "925040"
  },
  {
    "text": "of random integers from 0 to 10 and we",
    "start": "925040",
    "end": "928079"
  },
  {
    "text": "have a mean",
    "start": "928079",
    "end": "928720"
  },
  {
    "text": "task which takes in an array and returns",
    "start": "928720",
    "end": "931279"
  },
  {
    "text": "the mean",
    "start": "931279",
    "end": "933199"
  },
  {
    "text": "so let's start by starting up a",
    "start": "933199",
    "end": "935199"
  },
  {
    "text": "standalone ray system",
    "start": "935199",
    "end": "940160"
  },
  {
    "text": "and we can do that just by calling",
    "start": "940160",
    "end": "941600"
  },
  {
    "text": "ray.init so you can think of that as",
    "start": "941600",
    "end": "944240"
  },
  {
    "text": "starting a onenote cluster",
    "start": "944240",
    "end": "945839"
  },
  {
    "text": "on my laptop since we're going to be",
    "start": "945839",
    "end": "948720"
  },
  {
    "text": "trying to trigger",
    "start": "948720",
    "end": "949519"
  },
  {
    "text": "an out of memory error i'm going to make",
    "start": "949519",
    "end": "951680"
  },
  {
    "text": "that a bit easier for ourselves just by",
    "start": "951680",
    "end": "953680"
  },
  {
    "text": "setting the object store memory to one",
    "start": "953680",
    "end": "956000"
  },
  {
    "text": "gigabyte",
    "start": "956000",
    "end": "958560"
  },
  {
    "text": "and so that means that we can store",
    "start": "958560",
    "end": "960000"
  },
  {
    "text": "about 10 arrays at a time",
    "start": "960000",
    "end": "963680"
  },
  {
    "text": "so next we'll start computing some means",
    "start": "963839",
    "end": "965680"
  },
  {
    "text": "in parallel",
    "start": "965680",
    "end": "967040"
  },
  {
    "text": "so first i'll generate some random",
    "start": "967040",
    "end": "968880"
  },
  {
    "text": "arrays",
    "start": "968880",
    "end": "971040"
  },
  {
    "text": "and this will generate about 20 of them",
    "start": "971040",
    "end": "972880"
  },
  {
    "text": "in parallel",
    "start": "972880",
    "end": "974720"
  },
  {
    "text": "and then i'll pass each of those arrays",
    "start": "974720",
    "end": "976720"
  },
  {
    "text": "to the mean task",
    "start": "976720",
    "end": "982079"
  },
  {
    "text": "and finally we'll block and get the",
    "start": "982079",
    "end": "984880"
  },
  {
    "text": "results using raid outget",
    "start": "984880",
    "end": "987839"
  },
  {
    "text": "okay so now let's see what happens when",
    "start": "987839",
    "end": "989519"
  },
  {
    "text": "we run this",
    "start": "989519",
    "end": "997839"
  },
  {
    "text": "so we can see that almost immediately",
    "start": "998480",
    "end": "1000560"
  },
  {
    "text": "we're getting these out of memory errors",
    "start": "1000560",
    "end": "1003920"
  },
  {
    "text": "and so for some context the way that ray",
    "start": "1003920",
    "end": "1006160"
  },
  {
    "text": "reports out of memory errors",
    "start": "1006160",
    "end": "1008079"
  },
  {
    "text": "is by looking at the local object store",
    "start": "1008079",
    "end": "1010399"
  },
  {
    "text": "capacity when a worker tries to store an",
    "start": "1010399",
    "end": "1012480"
  },
  {
    "text": "object",
    "start": "1012480",
    "end": "1012959"
  },
  {
    "text": "in its object store so here when a",
    "start": "1012959",
    "end": "1015519"
  },
  {
    "text": "worker tries to store the array in its",
    "start": "1015519",
    "end": "1017680"
  },
  {
    "text": "local object store",
    "start": "1017680",
    "end": "1019199"
  },
  {
    "text": "if it sees that it's out of memory it'll",
    "start": "1019199",
    "end": "1022079"
  },
  {
    "text": "wait for some time",
    "start": "1022079",
    "end": "1023120"
  },
  {
    "text": "so that objects can get freed and then",
    "start": "1023120",
    "end": "1026079"
  },
  {
    "text": "it'll try to put the same object into",
    "start": "1026079",
    "end": "1028000"
  },
  {
    "text": "the object store again",
    "start": "1028000",
    "end": "1030000"
  },
  {
    "text": "and the default setting is to do this up",
    "start": "1030000",
    "end": "1032240"
  },
  {
    "text": "until about 30 seconds",
    "start": "1032240",
    "end": "1034240"
  },
  {
    "text": "and after that if the object store is",
    "start": "1034240",
    "end": "1036079"
  },
  {
    "text": "still full then the worker will return",
    "start": "1036079",
    "end": "1038319"
  },
  {
    "text": "an exception to the caller saying that",
    "start": "1038319",
    "end": "1040240"
  },
  {
    "text": "it was out of memory",
    "start": "1040240",
    "end": "1041839"
  },
  {
    "text": "so in this case that's what happened at",
    "start": "1041839",
    "end": "1044558"
  },
  {
    "text": "this radar get call we actually got an",
    "start": "1044559",
    "end": "1046480"
  },
  {
    "text": "out of memory",
    "start": "1046480",
    "end": "1047199"
  },
  {
    "text": "exception because at least one of the",
    "start": "1047199",
    "end": "1049039"
  },
  {
    "text": "workers couldn't store its object",
    "start": "1049039",
    "end": "1050880"
  },
  {
    "text": "into the local object store so now let's",
    "start": "1050880",
    "end": "1053919"
  },
  {
    "text": "try",
    "start": "1053919",
    "end": "1054400"
  },
  {
    "text": "running this with the ray memory",
    "start": "1054400",
    "end": "1055919"
  },
  {
    "text": "dashboard to see if we can get some more",
    "start": "1055919",
    "end": "1057679"
  },
  {
    "text": "information",
    "start": "1057679",
    "end": "1059200"
  },
  {
    "text": "so to do that i'm actually going to do a",
    "start": "1059200",
    "end": "1061440"
  },
  {
    "text": "little bit of a hack here just to keep",
    "start": "1061440",
    "end": "1063280"
  },
  {
    "text": "the driver alive because we don't want",
    "start": "1063280",
    "end": "1064960"
  },
  {
    "text": "it to error",
    "start": "1064960",
    "end": "1065600"
  },
  {
    "text": "out on the out of memory exception",
    "start": "1065600",
    "end": "1069039"
  },
  {
    "text": "and this time i'm going to run this",
    "start": "1069039",
    "end": "1070480"
  },
  {
    "text": "again",
    "start": "1070480",
    "end": "1072720"
  },
  {
    "text": "okay so now let's try running that and",
    "start": "1072720",
    "end": "1074400"
  },
  {
    "text": "this time we're going to visit the",
    "start": "1074400",
    "end": "1075520"
  },
  {
    "text": "dashboard",
    "start": "1075520",
    "end": "1078080"
  },
  {
    "text": "so we can look at this dashboard url",
    "start": "1079039",
    "end": "1082879"
  },
  {
    "text": "and some of this might look familiar to",
    "start": "1083200",
    "end": "1084960"
  },
  {
    "text": "you so initially we'll see this resource",
    "start": "1084960",
    "end": "1087120"
  },
  {
    "text": "level usage",
    "start": "1087120",
    "end": "1088000"
  },
  {
    "text": "where we can see things like cpu we're",
    "start": "1088000",
    "end": "1090559"
  },
  {
    "text": "going to go over to this memory usage",
    "start": "1090559",
    "end": "1092559"
  },
  {
    "text": "which tells us information about all of",
    "start": "1092559",
    "end": "1094480"
  },
  {
    "text": "the references",
    "start": "1094480",
    "end": "1095679"
  },
  {
    "text": "that are currently held by workers in",
    "start": "1095679",
    "end": "1097200"
  },
  {
    "text": "the cluster so each worker will report",
    "start": "1097200",
    "end": "1099919"
  },
  {
    "text": "information about the objects that it",
    "start": "1099919",
    "end": "1101679"
  },
  {
    "text": "has a reference to",
    "start": "1101679",
    "end": "1103200"
  },
  {
    "text": "such as a unique string and the object",
    "start": "1103200",
    "end": "1105679"
  },
  {
    "text": "size and in this case an object size of",
    "start": "1105679",
    "end": "1107760"
  },
  {
    "text": "question mark means that it hasn't been",
    "start": "1107760",
    "end": "1109360"
  },
  {
    "text": "computed yet",
    "start": "1109360",
    "end": "1110559"
  },
  {
    "text": "and also a reference type so for example",
    "start": "1110559",
    "end": "1113679"
  },
  {
    "text": "used by pending task means that it's an",
    "start": "1113679",
    "end": "1115600"
  },
  {
    "text": "argument to a task that hasn't run yet",
    "start": "1115600",
    "end": "1119120"
  },
  {
    "text": "another cool thing is that we can",
    "start": "1119120",
    "end": "1120640"
  },
  {
    "text": "actually group the object references by",
    "start": "1120640",
    "end": "1122799"
  },
  {
    "text": "stack trace",
    "start": "1122799",
    "end": "1124160"
  },
  {
    "text": "and so the stack trace here refers to",
    "start": "1124160",
    "end": "1125919"
  },
  {
    "text": "the stack trace where that reference was",
    "start": "1125919",
    "end": "1127679"
  },
  {
    "text": "initially created",
    "start": "1127679",
    "end": "1129440"
  },
  {
    "text": "and we can see that there are actually",
    "start": "1129440",
    "end": "1130880"
  },
  {
    "text": "two different groups of",
    "start": "1130880",
    "end": "1132640"
  },
  {
    "text": "references here one of them that was",
    "start": "1132640",
    "end": "1134720"
  },
  {
    "text": "created at line 20 of our program",
    "start": "1134720",
    "end": "1136880"
  },
  {
    "text": "and another that was created at line 21",
    "start": "1136880",
    "end": "1139919"
  },
  {
    "text": "and both of them have 20 objects each so",
    "start": "1139919",
    "end": "1142960"
  },
  {
    "text": "if we go over to our code",
    "start": "1142960",
    "end": "1144559"
  },
  {
    "text": "we can see that at line 20",
    "start": "1144559",
    "end": "1149440"
  },
  {
    "text": "these were the array objects and at line",
    "start": "1149600",
    "end": "1151840"
  },
  {
    "text": "21 these were the mean objects",
    "start": "1151840",
    "end": "1154960"
  },
  {
    "text": "and that makes sense because if we look",
    "start": "1154960",
    "end": "1156480"
  },
  {
    "text": "at the array objects",
    "start": "1156480",
    "end": "1158080"
  },
  {
    "text": "the total memory that was used by these",
    "start": "1158080",
    "end": "1159840"
  },
  {
    "text": "objects is really large",
    "start": "1159840",
    "end": "1161440"
  },
  {
    "text": "we have almost one gigabyte of memory",
    "start": "1161440",
    "end": "1164400"
  },
  {
    "text": "used by the already objects",
    "start": "1164400",
    "end": "1167840"
  },
  {
    "text": "so in the examples that i showed you",
    "start": "1167840",
    "end": "1169440"
  },
  {
    "text": "earlier each array object was",
    "start": "1169440",
    "end": "1171520"
  },
  {
    "text": "supposed to get freed as soon as the",
    "start": "1171520",
    "end": "1173039"
  },
  {
    "text": "downstream mean test finished",
    "start": "1173039",
    "end": "1175360"
  },
  {
    "text": "but for some reason they're not getting",
    "start": "1175360",
    "end": "1176880"
  },
  {
    "text": "freed in this case even though some of",
    "start": "1176880",
    "end": "1178880"
  },
  {
    "text": "the mean tasks are finishing",
    "start": "1178880",
    "end": "1181360"
  },
  {
    "text": "and we know that some of the main tasks",
    "start": "1181360",
    "end": "1183120"
  },
  {
    "text": "are finished because if we look at the",
    "start": "1183120",
    "end": "1184640"
  },
  {
    "text": "object size",
    "start": "1184640",
    "end": "1185919"
  },
  {
    "text": "some of them have actually already been",
    "start": "1185919",
    "end": "1187440"
  },
  {
    "text": "filled in so there's no longer a",
    "start": "1187440",
    "end": "1189039"
  },
  {
    "text": "question mark",
    "start": "1189039",
    "end": "1190720"
  },
  {
    "text": "so that means we're still keeping around",
    "start": "1190720",
    "end": "1192799"
  },
  {
    "text": "all of the array objects",
    "start": "1192799",
    "end": "1194559"
  },
  {
    "text": "even though some of the mean results are",
    "start": "1194559",
    "end": "1196160"
  },
  {
    "text": "actually available",
    "start": "1196160",
    "end": "1198160"
  },
  {
    "text": "and we can look at the dashboard to give",
    "start": "1198160",
    "end": "1199760"
  },
  {
    "text": "us a hint here because if we notice this",
    "start": "1199760",
    "end": "1202000"
  },
  {
    "text": "line",
    "start": "1202000",
    "end": "1202640"
  },
  {
    "text": "it says that we have 17 of these local",
    "start": "1202640",
    "end": "1205280"
  },
  {
    "text": "references",
    "start": "1205280",
    "end": "1207039"
  },
  {
    "text": "and a local reference is a python object",
    "start": "1207039",
    "end": "1210159"
  },
  {
    "text": "rep",
    "start": "1210159",
    "end": "1211520"
  },
  {
    "text": "and if we look at the code now we can",
    "start": "1211520",
    "end": "1213600"
  },
  {
    "text": "actually see",
    "start": "1213600",
    "end": "1214640"
  },
  {
    "text": "that indeed we're we're storing all of",
    "start": "1214640",
    "end": "1216640"
  },
  {
    "text": "the array references",
    "start": "1216640",
    "end": "1218320"
  },
  {
    "text": "in this temporary list and we're never",
    "start": "1218320",
    "end": "1220400"
  },
  {
    "text": "deleting that list from python",
    "start": "1220400",
    "end": "1223600"
  },
  {
    "text": "okay so we can actually fix this pretty",
    "start": "1223600",
    "end": "1225600"
  },
  {
    "text": "easily just by not storing",
    "start": "1225600",
    "end": "1227760"
  },
  {
    "text": "these temporary variables so instead i'm",
    "start": "1227760",
    "end": "1230640"
  },
  {
    "text": "going to",
    "start": "1230640",
    "end": "1231440"
  },
  {
    "text": "create a list of means and just create",
    "start": "1231440",
    "end": "1234720"
  },
  {
    "text": "the task in a for loop instead",
    "start": "1234720",
    "end": "1237039"
  },
  {
    "text": "so i'll create this temporary variable a",
    "start": "1237039",
    "end": "1240080"
  },
  {
    "text": "and then i'll pass this into the mean",
    "start": "1240080",
    "end": "1242400"
  },
  {
    "text": "task",
    "start": "1242400",
    "end": "1244720"
  },
  {
    "text": "so now if we run this again",
    "start": "1247679",
    "end": "1251279"
  },
  {
    "text": "this time we'll visit the new dashboard",
    "start": "1254559",
    "end": "1263039"
  },
  {
    "text": "and this time when we look at the memory",
    "start": "1263039",
    "end": "1264799"
  },
  {
    "text": "tab we should be able to see that most",
    "start": "1264799",
    "end": "1266720"
  },
  {
    "text": "of the references have actually gone",
    "start": "1266720",
    "end": "1268159"
  },
  {
    "text": "away",
    "start": "1268159",
    "end": "1269280"
  },
  {
    "text": "and so here this is looking a lot better",
    "start": "1269280",
    "end": "1271120"
  },
  {
    "text": "because we only have",
    "start": "1271120",
    "end": "1272320"
  },
  {
    "text": "21 objects left in reference instead of",
    "start": "1272320",
    "end": "1275200"
  },
  {
    "text": "more than 40 before",
    "start": "1275200",
    "end": "1278320"
  },
  {
    "text": "and if we look at this at this group by",
    "start": "1278320",
    "end": "1281840"
  },
  {
    "text": "stack trace again",
    "start": "1281840",
    "end": "1283039"
  },
  {
    "text": "we can see that there's only one of",
    "start": "1283039",
    "end": "1284799"
  },
  {
    "text": "these array objects left",
    "start": "1284799",
    "end": "1286480"
  },
  {
    "text": "and that makes sense because we actually",
    "start": "1286480",
    "end": "1288000"
  },
  {
    "text": "have this one left over from the for",
    "start": "1288000",
    "end": "1289679"
  },
  {
    "text": "loop",
    "start": "1289679",
    "end": "1291440"
  },
  {
    "text": "okay cool so now if we actually run this",
    "start": "1291440",
    "end": "1294000"
  },
  {
    "text": "completely",
    "start": "1294000",
    "end": "1295520"
  },
  {
    "text": "i can get rid of this time.sleep column",
    "start": "1295520",
    "end": "1297600"
  },
  {
    "text": "and maybe let's say we want to print out",
    "start": "1297600",
    "end": "1300000"
  },
  {
    "text": "the mean of the means and since these",
    "start": "1300000",
    "end": "1303440"
  },
  {
    "text": "are all numbers from 0 to 10",
    "start": "1303440",
    "end": "1306880"
  },
  {
    "text": "this should print out a mean of around 5",
    "start": "1306880",
    "end": "1310000"
  },
  {
    "text": "for all of the arrays",
    "start": "1310000",
    "end": "1313120"
  },
  {
    "text": "great so it looks like that's working",
    "start": "1314640",
    "end": "1317440"
  },
  {
    "text": "okay so hopefully that gave you a sense",
    "start": "1317440",
    "end": "1319360"
  },
  {
    "text": "of how memory management works and right",
    "start": "1319360",
    "end": "1322000"
  },
  {
    "text": "but if you're a ray user actually the",
    "start": "1322000",
    "end": "1323679"
  },
  {
    "text": "ideal case for me is that you never have",
    "start": "1323679",
    "end": "1325360"
  },
  {
    "text": "to care about this stuff again",
    "start": "1325360",
    "end": "1327280"
  },
  {
    "text": "and that's because as system builders",
    "start": "1327280",
    "end": "1328880"
  },
  {
    "text": "we're always trying to make sure that",
    "start": "1328880",
    "end": "1330240"
  },
  {
    "text": "ray takes care of all of the hard stuff",
    "start": "1330240",
    "end": "1332559"
  },
  {
    "text": "and that way you can just focus on",
    "start": "1332559",
    "end": "1334080"
  },
  {
    "text": "writing your application",
    "start": "1334080",
    "end": "1336159"
  },
  {
    "text": "if you are curious to learn more you can",
    "start": "1336159",
    "end": "1338000"
  },
  {
    "text": "check out our recent white paper",
    "start": "1338000",
    "end": "1339760"
  },
  {
    "text": "and also find us on github thanks and",
    "start": "1339760",
    "end": "1342400"
  },
  {
    "text": "i'd love to take any questions",
    "start": "1342400",
    "end": "1346480"
  }
]