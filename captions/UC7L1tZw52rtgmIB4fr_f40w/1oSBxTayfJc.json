[
  {
    "start": "0",
    "end": "42000"
  },
  {
    "text": "[Music]",
    "start": "150",
    "end": "14480"
  },
  {
    "text": "hi everyone i'm stephanie and i'm here",
    "start": "14480",
    "end": "16400"
  },
  {
    "text": "with e",
    "start": "16400",
    "end": "17279"
  },
  {
    "text": "we're both software engineers at any",
    "start": "17279",
    "end": "18800"
  },
  {
    "text": "scale and together we'll present how ray",
    "start": "18800",
    "end": "21119"
  },
  {
    "text": "internally manages objects using the",
    "start": "21119",
    "end": "23199"
  },
  {
    "text": "ownership model",
    "start": "23199",
    "end": "24480"
  },
  {
    "text": "ownership is the basis of the ray",
    "start": "24480",
    "end": "26240"
  },
  {
    "text": "architecture today but that wasn't",
    "start": "26240",
    "end": "28160"
  },
  {
    "text": "always the case",
    "start": "28160",
    "end": "29359"
  },
  {
    "text": "so i'll first explain what ownership is",
    "start": "29359",
    "end": "31439"
  },
  {
    "text": "and why we decided to redesign rey and",
    "start": "31439",
    "end": "33680"
  },
  {
    "text": "version 1.0",
    "start": "33680",
    "end": "34880"
  },
  {
    "text": "around this concept after that e will",
    "start": "34880",
    "end": "37360"
  },
  {
    "text": "present some future and ongoing work on",
    "start": "37360",
    "end": "39360"
  },
  {
    "text": "extensions to the ownership model",
    "start": "39360",
    "end": "42640"
  },
  {
    "start": "42000",
    "end": "169000"
  },
  {
    "text": "so first i want to give some background",
    "start": "42640",
    "end": "44399"
  },
  {
    "text": "for why we wanted to introduce ownership",
    "start": "44399",
    "end": "46640"
  },
  {
    "text": "in ray the two main reasons were system",
    "start": "46640",
    "end": "49120"
  },
  {
    "text": "stability",
    "start": "49120",
    "end": "49920"
  },
  {
    "text": "and performance and to show why these",
    "start": "49920",
    "end": "53120"
  },
  {
    "text": "are important",
    "start": "53120",
    "end": "53760"
  },
  {
    "text": "let's take a look at model serving as an",
    "start": "53760",
    "end": "55840"
  },
  {
    "text": "example use case",
    "start": "55840",
    "end": "57360"
  },
  {
    "text": "we can implement this in ray by using",
    "start": "57360",
    "end": "59440"
  },
  {
    "text": "multiple actors as model replicas",
    "start": "59440",
    "end": "62079"
  },
  {
    "text": "and a router after that routes requests",
    "start": "62079",
    "end": "64080"
  },
  {
    "text": "to the models",
    "start": "64080",
    "end": "65360"
  },
  {
    "text": "let's say this is an image",
    "start": "65360",
    "end": "66799"
  },
  {
    "text": "classification pipeline",
    "start": "66799",
    "end": "68479"
  },
  {
    "text": "we can serve requests by having the",
    "start": "68479",
    "end": "70240"
  },
  {
    "text": "router send each request",
    "start": "70240",
    "end": "71760"
  },
  {
    "text": "to an appropriate model replica and the",
    "start": "71760",
    "end": "74000"
  },
  {
    "text": "clients will then send the image data to",
    "start": "74000",
    "end": "76000"
  },
  {
    "text": "this replica",
    "start": "76000",
    "end": "77600"
  },
  {
    "text": "there are a few aspects of this that",
    "start": "77600",
    "end": "79040"
  },
  {
    "text": "make it difficult to support",
    "start": "79040",
    "end": "81040"
  },
  {
    "text": "first tasks are dynamically generated by",
    "start": "81040",
    "end": "83680"
  },
  {
    "text": "clients",
    "start": "83680",
    "end": "84400"
  },
  {
    "text": "so we can't predict when they'll happen",
    "start": "84400",
    "end": "86880"
  },
  {
    "text": "also the tasks here can be very short",
    "start": "86880",
    "end": "89200"
  },
  {
    "text": "in only tens of milliseconds so the",
    "start": "89200",
    "end": "91360"
  },
  {
    "text": "system overhead has to be very low",
    "start": "91360",
    "end": "94000"
  },
  {
    "text": "and finally performance here may depend",
    "start": "94000",
    "end": "96000"
  },
  {
    "text": "on moving data efficiently",
    "start": "96000",
    "end": "97840"
  },
  {
    "text": "one way to send the images to the model",
    "start": "97840",
    "end": "100079"
  },
  {
    "text": "is to pass them directly through the",
    "start": "100079",
    "end": "101600"
  },
  {
    "text": "router",
    "start": "101600",
    "end": "102320"
  },
  {
    "text": "but that would make the router a",
    "start": "102320",
    "end": "103439"
  },
  {
    "text": "bottleneck since the images can be",
    "start": "103439",
    "end": "105119"
  },
  {
    "text": "pretty large",
    "start": "105119",
    "end": "107360"
  },
  {
    "text": "we can see that bottleneck here in this",
    "start": "107360",
    "end": "109200"
  },
  {
    "text": "approach that i call pass by value",
    "start": "109200",
    "end": "111439"
  },
  {
    "text": "this is a cdf of request latency and the",
    "start": "111439",
    "end": "113920"
  },
  {
    "text": "upward slope shows that there are too",
    "start": "113920",
    "end": "115360"
  },
  {
    "text": "many requests for the router to handle",
    "start": "115360",
    "end": "118000"
  },
  {
    "text": "if you've used ray before you know that",
    "start": "118000",
    "end": "119920"
  },
  {
    "text": "you can avoid these expensive copies by",
    "start": "119920",
    "end": "121840"
  },
  {
    "text": "passing an object ref",
    "start": "121840",
    "end": "123040"
  },
  {
    "text": "instead and that's like passing a",
    "start": "123040",
    "end": "124960"
  },
  {
    "text": "pointer instead of the value",
    "start": "124960",
    "end": "127360"
  },
  {
    "text": "now the router might not be a bottleneck",
    "start": "127360",
    "end": "129520"
  },
  {
    "text": "but a naive system design can still add",
    "start": "129520",
    "end": "131840"
  },
  {
    "text": "a lot of overhead",
    "start": "131840",
    "end": "133760"
  },
  {
    "text": "and for example a centralized scheduler",
    "start": "133760",
    "end": "136080"
  },
  {
    "text": "can be a bottleneck for the application",
    "start": "136080",
    "end": "138480"
  },
  {
    "text": "we can see that here with a modified",
    "start": "138480",
    "end": "140239"
  },
  {
    "text": "version of ray where all object refs and",
    "start": "140239",
    "end": "142800"
  },
  {
    "text": "tasks in the cluster",
    "start": "142800",
    "end": "144000"
  },
  {
    "text": "are managed by a centralized process so",
    "start": "144000",
    "end": "147040"
  },
  {
    "text": "this is the basic motivation behind",
    "start": "147040",
    "end": "148879"
  },
  {
    "text": "ownership",
    "start": "148879",
    "end": "149680"
  },
  {
    "text": "you can think of it as a way to",
    "start": "149680",
    "end": "150879"
  },
  {
    "text": "decentralize the system for better",
    "start": "150879",
    "end": "152640"
  },
  {
    "text": "performance",
    "start": "152640",
    "end": "153519"
  },
  {
    "text": "but without sacrificing other guarantees",
    "start": "153519",
    "end": "155680"
  },
  {
    "text": "like reliability and fault tolerance",
    "start": "155680",
    "end": "158720"
  },
  {
    "text": "and you can see that here where the",
    "start": "158720",
    "end": "160400"
  },
  {
    "text": "solid green curve is ray version 1.0",
    "start": "160400",
    "end": "164000"
  },
  {
    "text": "in the rest of this talk i'll explain",
    "start": "164000",
    "end": "165680"
  },
  {
    "text": "how we achieve this with ownership",
    "start": "165680",
    "end": "169519"
  },
  {
    "start": "169000",
    "end": "358000"
  },
  {
    "text": "but first let's talk a little bit more",
    "start": "169599",
    "end": "171440"
  },
  {
    "text": "about object drifts",
    "start": "171440",
    "end": "172800"
  },
  {
    "text": "object refs are one of the main",
    "start": "172800",
    "end": "174160"
  },
  {
    "text": "primitives in rey and understanding",
    "start": "174160",
    "end": "176239"
  },
  {
    "text": "what's special about them",
    "start": "176239",
    "end": "177440"
  },
  {
    "text": "is critical to understanding ownership",
    "start": "177440",
    "end": "180000"
  },
  {
    "text": "the key",
    "start": "180000",
    "end": "180480"
  },
  {
    "text": "idea behind an object riff is that they",
    "start": "180480",
    "end": "182560"
  },
  {
    "text": "act as both a reference to distributed",
    "start": "182560",
    "end": "184640"
  },
  {
    "text": "memory",
    "start": "184640",
    "end": "185360"
  },
  {
    "text": "and as a future i'll explain what that",
    "start": "185360",
    "end": "187840"
  },
  {
    "text": "means next",
    "start": "187840",
    "end": "190400"
  },
  {
    "text": "as a point of contrast let's look at the",
    "start": "190400",
    "end": "192400"
  },
  {
    "text": "rpc model",
    "start": "192400",
    "end": "193599"
  },
  {
    "text": "i'll walk through a simple rpc program",
    "start": "193599",
    "end": "195680"
  },
  {
    "text": "execution",
    "start": "195680",
    "end": "196640"
  },
  {
    "text": "on three distributed processes so we",
    "start": "196640",
    "end": "198959"
  },
  {
    "text": "have a driver that invokes the rpc's",
    "start": "198959",
    "end": "201200"
  },
  {
    "text": "and two stateless workers that can",
    "start": "201200",
    "end": "202800"
  },
  {
    "text": "execute the requests which i'll call",
    "start": "202800",
    "end": "204799"
  },
  {
    "text": "tasks",
    "start": "204799",
    "end": "206319"
  },
  {
    "text": "we'll begin by sending an f-task to",
    "start": "206319",
    "end": "208239"
  },
  {
    "text": "worker one and once the worker finishes",
    "start": "208239",
    "end": "210560"
  },
  {
    "text": "the task it sends back the return value",
    "start": "210560",
    "end": "213280"
  },
  {
    "text": "we do the same to compute o2 and then",
    "start": "213280",
    "end": "215840"
  },
  {
    "text": "finally we can send the values back to",
    "start": "215840",
    "end": "217360"
  },
  {
    "text": "worker 2 to compute their sum",
    "start": "217360",
    "end": "219840"
  },
  {
    "text": "so obviously this is a really naive way",
    "start": "219840",
    "end": "221920"
  },
  {
    "text": "to execute the program",
    "start": "221920",
    "end": "223200"
  },
  {
    "text": "and we're not really taking advantage of",
    "start": "223200",
    "end": "224799"
  },
  {
    "text": "the workers at all the two problems",
    "start": "224799",
    "end": "227280"
  },
  {
    "text": "are that there's a lot of unnecessary",
    "start": "227280",
    "end": "228799"
  },
  {
    "text": "data movement going on",
    "start": "228799",
    "end": "230319"
  },
  {
    "text": "and there's no parallelism in the",
    "start": "230319",
    "end": "231920"
  },
  {
    "text": "execution object reps allow ray to",
    "start": "231920",
    "end": "234799"
  },
  {
    "text": "manage these functionalities on behalf",
    "start": "234799",
    "end": "236720"
  },
  {
    "text": "of the application",
    "start": "236720",
    "end": "239680"
  },
  {
    "text": "first let's look at data movement the",
    "start": "239680",
    "end": "241760"
  },
  {
    "text": "main issue before was that we had to",
    "start": "241760",
    "end": "243360"
  },
  {
    "text": "copy",
    "start": "243360",
    "end": "243840"
  },
  {
    "text": "o1 and o2 back to the caller just so",
    "start": "243840",
    "end": "246319"
  },
  {
    "text": "that they could be copied into the add",
    "start": "246319",
    "end": "247920"
  },
  {
    "text": "rbc",
    "start": "247920",
    "end": "249040"
  },
  {
    "text": "and this can get very expensive if o1",
    "start": "249040",
    "end": "251040"
  },
  {
    "text": "and o2 are large",
    "start": "251040",
    "end": "252400"
  },
  {
    "text": "so many systems get around this by using",
    "start": "252400",
    "end": "254319"
  },
  {
    "text": "distributed memory",
    "start": "254319",
    "end": "256000"
  },
  {
    "text": "after executing the first task instead",
    "start": "256000",
    "end": "258160"
  },
  {
    "text": "of sending o1 back to the caller",
    "start": "258160",
    "end": "260239"
  },
  {
    "text": "we can actually just store o1 in memory",
    "start": "260239",
    "end": "262639"
  },
  {
    "text": "on the remote node before replying",
    "start": "262639",
    "end": "265199"
  },
  {
    "text": "and we can do the same thing for o2 so",
    "start": "265199",
    "end": "267600"
  },
  {
    "text": "now when we call the add rpc",
    "start": "267600",
    "end": "269520"
  },
  {
    "text": "we can pass the objects by reference and",
    "start": "269520",
    "end": "271520"
  },
  {
    "text": "set it by value",
    "start": "271520",
    "end": "273040"
  },
  {
    "text": "so the add rpc still has to fetch o1 but",
    "start": "273040",
    "end": "275759"
  },
  {
    "text": "we were able to save a lot of data",
    "start": "275759",
    "end": "277440"
  },
  {
    "text": "copies",
    "start": "277440",
    "end": "278000"
  },
  {
    "text": "because the caller doesn't have to keep",
    "start": "278000",
    "end": "279600"
  },
  {
    "text": "all of the data local",
    "start": "279600",
    "end": "283040"
  },
  {
    "text": "ideally we also want the two f tasks to",
    "start": "283040",
    "end": "285360"
  },
  {
    "text": "execute in parallel",
    "start": "285360",
    "end": "286800"
  },
  {
    "text": "many rpc systems support this with",
    "start": "286800",
    "end": "288880"
  },
  {
    "text": "futures so that another function can be",
    "start": "288880",
    "end": "290880"
  },
  {
    "text": "invoked while a previous result is still",
    "start": "290880",
    "end": "292880"
  },
  {
    "text": "pending",
    "start": "292880",
    "end": "293840"
  },
  {
    "text": "in our example instead of having to wait",
    "start": "293840",
    "end": "295840"
  },
  {
    "text": "for the first task to finish",
    "start": "295840",
    "end": "297680"
  },
  {
    "text": "the caller will immediately get back a",
    "start": "297680",
    "end": "299280"
  },
  {
    "text": "future that i can use later on to get",
    "start": "299280",
    "end": "301280"
  },
  {
    "text": "the value of one",
    "start": "301280",
    "end": "303039"
  },
  {
    "text": "in the meantime the caller submits the",
    "start": "303039",
    "end": "304880"
  },
  {
    "text": "other f task which the system can now",
    "start": "304880",
    "end": "307199"
  },
  {
    "text": "execute in parallel with the first",
    "start": "307199",
    "end": "309600"
  },
  {
    "text": "and the caller can also pass the return",
    "start": "309600",
    "end": "311440"
  },
  {
    "text": "futures into the add task",
    "start": "311440",
    "end": "313360"
  },
  {
    "text": "before o1 and o2 have even been computed",
    "start": "313360",
    "end": "316639"
  },
  {
    "text": "then as soon as the values are ready the",
    "start": "316639",
    "end": "318720"
  },
  {
    "text": "system will send the downstream task",
    "start": "318720",
    "end": "322800"
  },
  {
    "text": "object refs combine these two ideas so",
    "start": "323039",
    "end": "325440"
  },
  {
    "text": "now we can execute tasks in parallel",
    "start": "325440",
    "end": "328080"
  },
  {
    "text": "and the return features also act as",
    "start": "328080",
    "end": "330080"
  },
  {
    "text": "references to distributed memory",
    "start": "330080",
    "end": "332240"
  },
  {
    "text": "meanwhile rey can manage data movement",
    "start": "332240",
    "end": "334479"
  },
  {
    "text": "and parallelism for the application",
    "start": "334479",
    "end": "336880"
  },
  {
    "text": "by making the values and distributed",
    "start": "336880",
    "end": "338639"
  },
  {
    "text": "memory immutable we can keep the same",
    "start": "338639",
    "end": "340479"
  },
  {
    "text": "semantics as rpc but support a wider",
    "start": "340479",
    "end": "342880"
  },
  {
    "text": "variety of applications",
    "start": "342880",
    "end": "344560"
  },
  {
    "text": "for example in model surfing we can use",
    "start": "344560",
    "end": "346880"
  },
  {
    "text": "object refs to avoid copying large data",
    "start": "346880",
    "end": "349039"
  },
  {
    "text": "through the router",
    "start": "349039",
    "end": "350400"
  },
  {
    "text": "we can also use object refs to make",
    "start": "350400",
    "end": "352160"
  },
  {
    "text": "multiple requests in parallel",
    "start": "352160",
    "end": "353840"
  },
  {
    "text": "since each object ref is also a future",
    "start": "353840",
    "end": "357919"
  },
  {
    "start": "358000",
    "end": "568000"
  },
  {
    "text": "object refs make it possible for ray to",
    "start": "358319",
    "end": "360160"
  },
  {
    "text": "provide high performance for the",
    "start": "360160",
    "end": "361520"
  },
  {
    "text": "application",
    "start": "361520",
    "end": "362479"
  },
  {
    "text": "but there's a lot more to it than that",
    "start": "362479",
    "end": "364319"
  },
  {
    "text": "so let's take a look at the requirements",
    "start": "364319",
    "end": "366080"
  },
  {
    "text": "and challenges for building a system",
    "start": "366080",
    "end": "367919"
  },
  {
    "text": "like rey the goal of ray is to",
    "start": "367919",
    "end": "371039"
  },
  {
    "text": "efficiently support",
    "start": "371039",
    "end": "372080"
  },
  {
    "text": "applications that dynamically generate",
    "start": "372080",
    "end": "374160"
  },
  {
    "text": "many short tasks which might run in",
    "start": "374160",
    "end": "376000"
  },
  {
    "text": "milliseconds",
    "start": "376000",
    "end": "377120"
  },
  {
    "text": "and the reason for that is generality as",
    "start": "377120",
    "end": "380160"
  },
  {
    "text": "an analogy we can look again to the rpc",
    "start": "380160",
    "end": "382479"
  },
  {
    "text": "model",
    "start": "382479",
    "end": "383280"
  },
  {
    "text": "for example the popular grpc framework",
    "start": "383280",
    "end": "386000"
  },
  {
    "text": "is practical for so many applications",
    "start": "386000",
    "end": "388000"
  },
  {
    "text": "because of its low",
    "start": "388000",
    "end": "388960"
  },
  {
    "text": "overhead and its ability to execute",
    "start": "388960",
    "end": "391199"
  },
  {
    "text": "millions of tasks per second",
    "start": "391199",
    "end": "393360"
  },
  {
    "text": "so the question that we study here is",
    "start": "393360",
    "end": "395120"
  },
  {
    "text": "whether we can do the same for object",
    "start": "395120",
    "end": "396880"
  },
  {
    "text": "refs",
    "start": "396880",
    "end": "397520"
  },
  {
    "text": "and how we can still achieve fault",
    "start": "397520",
    "end": "399120"
  },
  {
    "text": "tolerance in doing so",
    "start": "399120",
    "end": "402240"
  },
  {
    "text": "to see why this is difficult let's",
    "start": "402240",
    "end": "404080"
  },
  {
    "text": "consider the example from earlier",
    "start": "404080",
    "end": "405919"
  },
  {
    "text": "where we had a driver that submitted to",
    "start": "405919",
    "end": "407840"
  },
  {
    "text": "f tasks and passed their results to an",
    "start": "407840",
    "end": "410160"
  },
  {
    "text": "ad task",
    "start": "410160",
    "end": "411440"
  },
  {
    "text": "the fundamental problem is that a single",
    "start": "411440",
    "end": "413440"
  },
  {
    "text": "value can now be shared by multiple",
    "start": "413440",
    "end": "415280"
  },
  {
    "text": "processes",
    "start": "415280",
    "end": "416319"
  },
  {
    "text": "take o1 for example",
    "start": "416319",
    "end": "419360"
  },
  {
    "text": "this object is referred to by several",
    "start": "419360",
    "end": "421280"
  },
  {
    "text": "processes the driver that specifies how",
    "start": "421280",
    "end": "423759"
  },
  {
    "text": "to create and use it",
    "start": "423759",
    "end": "425199"
  },
  {
    "text": "the worker that creates the value the",
    "start": "425199",
    "end": "427360"
  },
  {
    "text": "worker that uses the value",
    "start": "427360",
    "end": "428960"
  },
  {
    "text": "and the physical location of the value",
    "start": "428960",
    "end": "431199"
  },
  {
    "text": "and all of these may be distinct and",
    "start": "431199",
    "end": "432960"
  },
  {
    "text": "distributed processes",
    "start": "432960",
    "end": "434479"
  },
  {
    "text": "so if we want to ensure that a reference",
    "start": "434479",
    "end": "436240"
  },
  {
    "text": "holder can dereference the value",
    "start": "436240",
    "end": "438240"
  },
  {
    "text": "we need to coordinate these processes",
    "start": "438240",
    "end": "442160"
  },
  {
    "text": "to make this concrete let's think about",
    "start": "442240",
    "end": "444000"
  },
  {
    "text": "the requirements for dereferencing a",
    "start": "444000",
    "end": "445840"
  },
  {
    "text": "value",
    "start": "445840",
    "end": "446720"
  },
  {
    "text": "at minimum we need to know where a value",
    "start": "446720",
    "end": "448639"
  },
  {
    "text": "is located and whether it's still",
    "start": "448639",
    "end": "450319"
  },
  {
    "text": "referenced",
    "start": "450319",
    "end": "451680"
  },
  {
    "text": "of course failures complicate things so",
    "start": "451680",
    "end": "453919"
  },
  {
    "text": "we also need to be able to detect a",
    "start": "453919",
    "end": "455680"
  },
  {
    "text": "failure",
    "start": "455680",
    "end": "456319"
  },
  {
    "text": "which means that we need to record the",
    "start": "456319",
    "end": "457759"
  },
  {
    "text": "location of a task before it starts",
    "start": "457759",
    "end": "459759"
  },
  {
    "text": "executing",
    "start": "459759",
    "end": "460960"
  },
  {
    "text": "that way if a worker dies we can",
    "start": "460960",
    "end": "462720"
  },
  {
    "text": "determine if there were any pending",
    "start": "462720",
    "end": "464240"
  },
  {
    "text": "tasks on the worker that need to be",
    "start": "464240",
    "end": "465919"
  },
  {
    "text": "re-executed",
    "start": "465919",
    "end": "467759"
  },
  {
    "text": "second we need to record each object's",
    "start": "467759",
    "end": "469599"
  },
  {
    "text": "lineage or the tasks that we executed to",
    "start": "469599",
    "end": "471919"
  },
  {
    "text": "create the object",
    "start": "471919",
    "end": "473440"
  },
  {
    "text": "similar to existing systems we can then",
    "start": "473440",
    "end": "476000"
  },
  {
    "text": "re-execute this lineage upon a failure",
    "start": "476000",
    "end": "478160"
  },
  {
    "text": "to recreate the object",
    "start": "478160",
    "end": "480639"
  },
  {
    "text": "and finally rey itself has to be fault",
    "start": "480639",
    "end": "482960"
  },
  {
    "text": "tolerant meaning that all of this",
    "start": "482960",
    "end": "484400"
  },
  {
    "text": "information must be able to survive",
    "start": "484400",
    "end": "486160"
  },
  {
    "text": "failures",
    "start": "486160",
    "end": "488400"
  },
  {
    "text": "of course the main challenge is doing",
    "start": "488400",
    "end": "490160"
  },
  {
    "text": "all of this without sacrificing",
    "start": "490160",
    "end": "492080"
  },
  {
    "text": "latency and throughput",
    "start": "492080",
    "end": "495280"
  },
  {
    "text": "one option that i mentioned earlier is",
    "start": "495280",
    "end": "497120"
  },
  {
    "text": "to use a centralized master",
    "start": "497120",
    "end": "498879"
  },
  {
    "text": "which is used by systems like dask and",
    "start": "498879",
    "end": "501120"
  },
  {
    "text": "apache spark",
    "start": "501120",
    "end": "502319"
  },
  {
    "text": "we can have one process manage all",
    "start": "502319",
    "end": "504240"
  },
  {
    "text": "object refs so to execute a task",
    "start": "504240",
    "end": "506720"
  },
  {
    "text": "the driver first sends it to the master",
    "start": "506720",
    "end": "509039"
  },
  {
    "text": "which then sends it to the right worker",
    "start": "509039",
    "end": "511840"
  },
  {
    "text": "and this makes things like failure",
    "start": "511840",
    "end": "513200"
  },
  {
    "text": "handling really simple but as we saw",
    "start": "513200",
    "end": "515360"
  },
  {
    "text": "earlier",
    "start": "515360",
    "end": "516080"
  },
  {
    "text": "performance suffers because we have to",
    "start": "516080",
    "end": "517760"
  },
  {
    "text": "send all tasks through the master",
    "start": "517760",
    "end": "521599"
  },
  {
    "text": "another option is to use a more",
    "start": "521599",
    "end": "523360"
  },
  {
    "text": "decentralized approach",
    "start": "523360",
    "end": "524640"
  },
  {
    "text": "which is actually what we did in ray up",
    "start": "524640",
    "end": "526399"
  },
  {
    "text": "to version 0.8",
    "start": "526399",
    "end": "528160"
  },
  {
    "text": "the idea here was to have the driver",
    "start": "528160",
    "end": "530080"
  },
  {
    "text": "send tasks to workers directly",
    "start": "530080",
    "end": "532240"
  },
  {
    "text": "avoiding that extra message to a",
    "start": "532240",
    "end": "533920"
  },
  {
    "text": "centralized master on the critical path",
    "start": "533920",
    "end": "535920"
  },
  {
    "text": "of execution",
    "start": "535920",
    "end": "537440"
  },
  {
    "text": "but then we would need some way to do",
    "start": "537440",
    "end": "539200"
  },
  {
    "text": "things like detect failures",
    "start": "539200",
    "end": "541120"
  },
  {
    "text": "so to handle that each worker would",
    "start": "541120",
    "end": "543120"
  },
  {
    "text": "acquire a lease",
    "start": "543120",
    "end": "544240"
  },
  {
    "text": "for tasks that it was executing and the",
    "start": "544240",
    "end": "546560"
  },
  {
    "text": "lease would expire if the worker failed",
    "start": "546560",
    "end": "549600"
  },
  {
    "text": "that way another worker could detect the",
    "start": "549600",
    "end": "551600"
  },
  {
    "text": "failure of a task",
    "start": "551600",
    "end": "553279"
  },
  {
    "text": "so even though there was still a",
    "start": "553279",
    "end": "554560"
  },
  {
    "text": "centralized lease manager this design",
    "start": "554560",
    "end": "556720"
  },
  {
    "text": "meant that",
    "start": "556720",
    "end": "557360"
  },
  {
    "text": "it was no longer a bottleneck in the",
    "start": "557360",
    "end": "559040"
  },
  {
    "text": "system but on the other hand",
    "start": "559040",
    "end": "561279"
  },
  {
    "text": "things like failures and memory safety",
    "start": "561279",
    "end": "563279"
  },
  {
    "text": "were a lot harder to get right",
    "start": "563279",
    "end": "564880"
  },
  {
    "text": "because they required workers to",
    "start": "564880",
    "end": "566399"
  },
  {
    "text": "coordinate",
    "start": "566399",
    "end": "568560"
  },
  {
    "start": "568000",
    "end": "795000"
  },
  {
    "text": "and that brings us to ownership which is",
    "start": "568560",
    "end": "570480"
  },
  {
    "text": "a method of decentralizing the system",
    "start": "570480",
    "end": "572560"
  },
  {
    "text": "without complicating coordination our",
    "start": "572560",
    "end": "576080"
  },
  {
    "text": "key",
    "start": "576080",
    "end": "576480"
  },
  {
    "text": "insight is that coordination is only",
    "start": "576480",
    "end": "578399"
  },
  {
    "text": "expensive in existing solutions",
    "start": "578399",
    "end": "580480"
  },
  {
    "text": "because they don't take advantage of the",
    "start": "580480",
    "end": "582080"
  },
  {
    "text": "inherent structure of a ray application",
    "start": "582080",
    "end": "584959"
  },
  {
    "text": "first ray task graphs are inherently",
    "start": "584959",
    "end": "586959"
  },
  {
    "text": "hierarchical",
    "start": "586959",
    "end": "588320"
  },
  {
    "text": "in our earlier example the program",
    "start": "588320",
    "end": "590240"
  },
  {
    "text": "itself could have been invoked by a",
    "start": "590240",
    "end": "591839"
  },
  {
    "text": "different task",
    "start": "591839",
    "end": "592880"
  },
  {
    "text": "and these function indications naturally",
    "start": "592880",
    "end": "594800"
  },
  {
    "text": "form a tree",
    "start": "594800",
    "end": "596880"
  },
  {
    "text": "second although passing on object ref",
    "start": "596880",
    "end": "599040"
  },
  {
    "text": "creates shared state between processes",
    "start": "599040",
    "end": "601360"
  },
  {
    "text": "in most cases the scope is actually",
    "start": "601360",
    "end": "603360"
  },
  {
    "text": "limited to passing downwards through the",
    "start": "603360",
    "end": "605200"
  },
  {
    "text": "tree",
    "start": "605200",
    "end": "606079"
  },
  {
    "text": "so in our example the driver only passes",
    "start": "606079",
    "end": "609279"
  },
  {
    "text": "o1 and o2 in its local scope meaning",
    "start": "609279",
    "end": "611760"
  },
  {
    "text": "that its parent never actually sees",
    "start": "611760",
    "end": "613440"
  },
  {
    "text": "these values",
    "start": "613440",
    "end": "614720"
  },
  {
    "text": "so by exploiting the inherent",
    "start": "614720",
    "end": "616320"
  },
  {
    "text": "application structure we can actually",
    "start": "616320",
    "end": "618320"
  },
  {
    "text": "decentralize ray without having to",
    "start": "618320",
    "end": "620240"
  },
  {
    "text": "coordinate between all of the processes",
    "start": "620240",
    "end": "622640"
  },
  {
    "text": "we just need to coordinate between the",
    "start": "622640",
    "end": "624000"
  },
  {
    "text": "processes that actually share state",
    "start": "624000",
    "end": "626480"
  },
  {
    "text": "in contrast a centralized master takes",
    "start": "626480",
    "end": "628720"
  },
  {
    "text": "the extreme approach of centralizing all",
    "start": "628720",
    "end": "630560"
  },
  {
    "text": "system state in one place",
    "start": "630560",
    "end": "632320"
  },
  {
    "text": "no matter which worker created it or",
    "start": "632320",
    "end": "634079"
  },
  {
    "text": "which worker will need it in the future",
    "start": "634079",
    "end": "637760"
  },
  {
    "text": "so the idea behind ownership is to shard",
    "start": "637760",
    "end": "640079"
  },
  {
    "text": "the master across the workers",
    "start": "640079",
    "end": "641839"
  },
  {
    "text": "which are the processes that actually",
    "start": "641839",
    "end": "643360"
  },
  {
    "text": "create and share object refs",
    "start": "643360",
    "end": "645519"
  },
  {
    "text": "when a worker invokes a task it owns the",
    "start": "645519",
    "end": "648720"
  },
  {
    "text": "returned object rif",
    "start": "648720",
    "end": "650240"
  },
  {
    "text": "and essentially acts as a master for",
    "start": "650240",
    "end": "652320"
  },
  {
    "text": "just that object",
    "start": "652320",
    "end": "654000"
  },
  {
    "text": "but unlike a completely centralized",
    "start": "654000",
    "end": "655760"
  },
  {
    "text": "master the runtime overhead is low",
    "start": "655760",
    "end": "658000"
  },
  {
    "text": "because we can keep all of the metadata",
    "start": "658000",
    "end": "659760"
  },
  {
    "text": "local to the worker",
    "start": "659760",
    "end": "661120"
  },
  {
    "text": "that's most likely to use the object ref",
    "start": "661120",
    "end": "663760"
  },
  {
    "text": "and we can also scale the system by",
    "start": "663760",
    "end": "665600"
  },
  {
    "text": "using nested function calls in the",
    "start": "665600",
    "end": "667279"
  },
  {
    "text": "application",
    "start": "667279",
    "end": "668320"
  },
  {
    "text": "instead of sharding the master with an",
    "start": "668320",
    "end": "670240"
  },
  {
    "text": "application agnostic approach",
    "start": "670240",
    "end": "671839"
  },
  {
    "text": "like consistent hashing",
    "start": "671839",
    "end": "675680"
  },
  {
    "text": "of course the main challenge is in",
    "start": "675680",
    "end": "677040"
  },
  {
    "text": "keeping system operations as simple as",
    "start": "677040",
    "end": "679279"
  },
  {
    "text": "if there were only one master",
    "start": "679279",
    "end": "681200"
  },
  {
    "text": "and these operations include failure",
    "start": "681200",
    "end": "683120"
  },
  {
    "text": "recovery especially if an owner dies",
    "start": "683120",
    "end": "685920"
  },
  {
    "text": "and memory safety in this talk i'll",
    "start": "685920",
    "end": "688800"
  },
  {
    "text": "focus just on failure recovery and let's",
    "start": "688800",
    "end": "690959"
  },
  {
    "text": "take a look at how this works",
    "start": "690959",
    "end": "693920"
  },
  {
    "text": "here we have several worker nodes that",
    "start": "693920",
    "end": "695680"
  },
  {
    "text": "each host an object store",
    "start": "695680",
    "end": "697279"
  },
  {
    "text": "and the system metadata will be stored",
    "start": "697279",
    "end": "699200"
  },
  {
    "text": "at the workers",
    "start": "699200",
    "end": "700480"
  },
  {
    "text": "we'll use an example where we have task",
    "start": "700480",
    "end": "702560"
  },
  {
    "text": "a that submits task b",
    "start": "702560",
    "end": "704640"
  },
  {
    "text": "and then passes the returned object ref",
    "start": "704640",
    "end": "706800"
  },
  {
    "text": "to task c",
    "start": "706800",
    "end": "709519"
  },
  {
    "text": "to schedule b the owner first writes the",
    "start": "709680",
    "end": "712079"
  },
  {
    "text": "future location of the task",
    "start": "712079",
    "end": "713920"
  },
  {
    "text": "before sending b to node 2 for execution",
    "start": "713920",
    "end": "717440"
  },
  {
    "text": "once b finishes it stores the return",
    "start": "717440",
    "end": "720240"
  },
  {
    "text": "value in distributed memory",
    "start": "720240",
    "end": "722000"
  },
  {
    "text": "and then responds to x's owner",
    "start": "722000",
    "end": "725360"
  },
  {
    "text": "next we schedule c onto worker 3",
    "start": "725360",
    "end": "728720"
  },
  {
    "text": "and since c has a reference to b's",
    "start": "728720",
    "end": "730639"
  },
  {
    "text": "return value",
    "start": "730639",
    "end": "731760"
  },
  {
    "text": "it also receives the address of x's",
    "start": "731760",
    "end": "733839"
  },
  {
    "text": "owner",
    "start": "733839",
    "end": "736240"
  },
  {
    "text": "now let's say that there is a failure",
    "start": "736240",
    "end": "737920"
  },
  {
    "text": "while worker 3 is trying to dereference",
    "start": "737920",
    "end": "740079"
  },
  {
    "text": "x",
    "start": "740079",
    "end": "741040"
  },
  {
    "text": "we'll leave it to x's owner to detect",
    "start": "741040",
    "end": "743360"
  },
  {
    "text": "the failure",
    "start": "743360",
    "end": "744800"
  },
  {
    "text": "and to recover the object by",
    "start": "744800",
    "end": "746480"
  },
  {
    "text": "re-executing the object's linkage",
    "start": "746480",
    "end": "750480"
  },
  {
    "text": "of course we also need to handle the",
    "start": "751200",
    "end": "752639"
  },
  {
    "text": "case where x's owner fails while worker",
    "start": "752639",
    "end": "754880"
  },
  {
    "text": "3 is trying to dereference",
    "start": "754880",
    "end": "756399"
  },
  {
    "text": "x so the main challenge here is that",
    "start": "756399",
    "end": "758639"
  },
  {
    "text": "we've now lost all of the system",
    "start": "758639",
    "end": "760240"
  },
  {
    "text": "metadata that was on marker one",
    "start": "760240",
    "end": "762320"
  },
  {
    "text": "so somehow we need to recover it and",
    "start": "762320",
    "end": "764079"
  },
  {
    "text": "finish executing c",
    "start": "764079",
    "end": "766399"
  },
  {
    "text": "to to ensure progress we first clean up",
    "start": "766399",
    "end": "770000"
  },
  {
    "text": "all of the state related to x by using",
    "start": "770000",
    "end": "772160"
  },
  {
    "text": "the cached owner address to detect the",
    "start": "772160",
    "end": "774160"
  },
  {
    "text": "failure",
    "start": "774160",
    "end": "775600"
  },
  {
    "text": "and then we can rely on the hierarchical",
    "start": "775600",
    "end": "778160"
  },
  {
    "text": "nature of the application",
    "start": "778160",
    "end": "781040"
  },
  {
    "text": "so a's owner will eventually resubmit a",
    "start": "781040",
    "end": "783920"
  },
  {
    "text": "which in turn resubmits b",
    "start": "783920",
    "end": "785519"
  },
  {
    "text": "and c so we trade off some persistence",
    "start": "785519",
    "end": "788320"
  },
  {
    "text": "here",
    "start": "788320",
    "end": "788720"
  },
  {
    "text": "but in exchange we get simplicity and",
    "start": "788720",
    "end": "790720"
  },
  {
    "text": "lower runtime overhead",
    "start": "790720",
    "end": "792240"
  },
  {
    "text": "and importantly we don't sacrifice",
    "start": "792240",
    "end": "794160"
  },
  {
    "text": "correctness",
    "start": "794160",
    "end": "796079"
  },
  {
    "text": "so next i'll hand it over to e who will",
    "start": "796079",
    "end": "798320"
  },
  {
    "text": "explain some of the limitations of this",
    "start": "798320",
    "end": "800000"
  },
  {
    "text": "approach",
    "start": "800000",
    "end": "800560"
  },
  {
    "text": "and what we can do to address them",
    "start": "800560",
    "end": "804160"
  },
  {
    "text": "thanks stephanie for the great talk",
    "start": "804480",
    "end": "806399"
  },
  {
    "text": "about the ownership model",
    "start": "806399",
    "end": "808160"
  },
  {
    "text": "here i will talk about ownership",
    "start": "808160",
    "end": "810000"
  },
  {
    "text": "transfer and how does it address the",
    "start": "810000",
    "end": "811920"
  },
  {
    "text": "limitations",
    "start": "811920",
    "end": "812720"
  },
  {
    "text": "of the ownership model in the ownership",
    "start": "812720",
    "end": "815920"
  },
  {
    "text": "model",
    "start": "815920",
    "end": "816800"
  },
  {
    "text": "whoever creates and objects owns the",
    "start": "816800",
    "end": "819600"
  },
  {
    "text": "metadata",
    "start": "819600",
    "end": "820800"
  },
  {
    "text": "as stephanie mentioned there are a lot",
    "start": "820800",
    "end": "822639"
  },
  {
    "text": "of benefits from this",
    "start": "822639",
    "end": "824480"
  },
  {
    "text": "like it guarantees consistency and low",
    "start": "824480",
    "end": "827199"
  },
  {
    "text": "latency",
    "start": "827199",
    "end": "828320"
  },
  {
    "text": "it is decentralized the system according",
    "start": "828320",
    "end": "830399"
  },
  {
    "text": "to the application structure",
    "start": "830399",
    "end": "832399"
  },
  {
    "text": "and they can use lineages construction",
    "start": "832399",
    "end": "835120"
  },
  {
    "text": "to recover from failures",
    "start": "835120",
    "end": "837920"
  },
  {
    "text": "but there are also some limitations",
    "start": "837920",
    "end": "841440"
  },
  {
    "text": "like energy reconstruction can be",
    "start": "841440",
    "end": "843519"
  },
  {
    "text": "applied to all",
    "start": "843519",
    "end": "844800"
  },
  {
    "text": "scenarios and objects is the field",
    "start": "844800",
    "end": "848079"
  },
  {
    "text": "sharing with their owner",
    "start": "848079",
    "end": "851360"
  },
  {
    "text": "we will go deep into the second",
    "start": "852240",
    "end": "853839"
  },
  {
    "text": "limitation in the rest of this talk",
    "start": "853839",
    "end": "856320"
  },
  {
    "text": "usually this is fine if we only pass the",
    "start": "856320",
    "end": "858880"
  },
  {
    "text": "object",
    "start": "858880",
    "end": "859360"
  },
  {
    "text": "downwards but the question is what if",
    "start": "859360",
    "end": "862320"
  },
  {
    "text": "they are not",
    "start": "862320",
    "end": "863519"
  },
  {
    "text": "what if there are other patterns",
    "start": "863519",
    "end": "867360"
  },
  {
    "start": "866000",
    "end": "1094000"
  },
  {
    "text": "ownership transfer is trying to adjust",
    "start": "867760",
    "end": "869839"
  },
  {
    "text": "the second mutation by introducing",
    "start": "869839",
    "end": "871839"
  },
  {
    "text": "transfer",
    "start": "871839",
    "end": "872560"
  },
  {
    "text": "the ownership from one worker to another",
    "start": "872560",
    "end": "875199"
  },
  {
    "text": "in this session",
    "start": "875199",
    "end": "876240"
  },
  {
    "text": "we will go through why this is important",
    "start": "876240",
    "end": "878320"
  },
  {
    "text": "by identifying",
    "start": "878320",
    "end": "879440"
  },
  {
    "text": "the other patterns for object patching",
    "start": "879440",
    "end": "881519"
  },
  {
    "text": "first and then",
    "start": "881519",
    "end": "883040"
  },
  {
    "text": "we will go through some real-world use",
    "start": "883040",
    "end": "884880"
  },
  {
    "text": "cases in the last part",
    "start": "884880",
    "end": "886639"
  },
  {
    "text": "we will review the design so",
    "start": "886639",
    "end": "890160"
  },
  {
    "text": "why do we need ownership transfer as",
    "start": "890160",
    "end": "893279"
  },
  {
    "text": "mentioned",
    "start": "893279",
    "end": "893920"
  },
  {
    "text": "here we have one assumption about our",
    "start": "893920",
    "end": "896320"
  },
  {
    "text": "model that is object reference is",
    "start": "896320",
    "end": "898959"
  },
  {
    "text": "passed downwards let's do a quick recap",
    "start": "898959",
    "end": "902160"
  },
  {
    "text": "here",
    "start": "902160",
    "end": "903120"
  },
  {
    "text": "suppose in the driver we call as remote",
    "start": "903120",
    "end": "905600"
  },
  {
    "text": "function f",
    "start": "905600",
    "end": "907040"
  },
  {
    "text": "and the retain is x here",
    "start": "907040",
    "end": "910399"
  },
  {
    "text": "the owner of x will be the driver",
    "start": "910399",
    "end": "913600"
  },
  {
    "text": "then the driver passed x to the mode",
    "start": "913600",
    "end": "915920"
  },
  {
    "text": "function g",
    "start": "915920",
    "end": "917279"
  },
  {
    "text": "now let's check what's going to happen",
    "start": "917279",
    "end": "919279"
  },
  {
    "text": "if some worker failed",
    "start": "919279",
    "end": "922240"
  },
  {
    "text": "what if the workers run f field this is",
    "start": "922240",
    "end": "925360"
  },
  {
    "text": "fine",
    "start": "925360",
    "end": "926480"
  },
  {
    "text": "since x is owned by the driver and she",
    "start": "926480",
    "end": "929199"
  },
  {
    "text": "can still access x",
    "start": "929199",
    "end": "930560"
  },
  {
    "text": "even the worker run f failed then",
    "start": "930560",
    "end": "933600"
  },
  {
    "text": "what if the driver exits",
    "start": "933600",
    "end": "936639"
  },
  {
    "text": "in this case she won't be able to access",
    "start": "936639",
    "end": "939519"
  },
  {
    "text": "x anymore",
    "start": "939519",
    "end": "940480"
  },
  {
    "text": "but it's also okay since the worker",
    "start": "940480",
    "end": "943279"
  },
  {
    "text": "around you",
    "start": "943279",
    "end": "944160"
  },
  {
    "text": "will be killed after the driver died",
    "start": "944160",
    "end": "947680"
  },
  {
    "text": "this is downward passing pattern where",
    "start": "947680",
    "end": "950480"
  },
  {
    "text": "the object is passed from the owner",
    "start": "950480",
    "end": "952399"
  },
  {
    "text": "downwards to",
    "start": "952399",
    "end": "953199"
  },
  {
    "text": "the other functions but what if the",
    "start": "953199",
    "end": "956800"
  },
  {
    "text": "assumption is broken",
    "start": "956800",
    "end": "959040"
  },
  {
    "text": "let's check another piece of code",
    "start": "959040",
    "end": "961759"
  },
  {
    "text": "suppose",
    "start": "961759",
    "end": "962320"
  },
  {
    "text": "we have a remote function f inside f",
    "start": "962320",
    "end": "965519"
  },
  {
    "text": "it puts an object into object star and",
    "start": "965519",
    "end": "968639"
  },
  {
    "text": "return a list of object reference to the",
    "start": "968639",
    "end": "970959"
  },
  {
    "text": "corner",
    "start": "970959",
    "end": "972720"
  },
  {
    "text": "the driver calls the remote function",
    "start": "972720",
    "end": "974800"
  },
  {
    "text": "first",
    "start": "974800",
    "end": "975839"
  },
  {
    "text": "and then the worker will create x and",
    "start": "975839",
    "end": "978480"
  },
  {
    "text": "return a list",
    "start": "978480",
    "end": "979360"
  },
  {
    "text": "containing x here x is owned by the",
    "start": "979360",
    "end": "983279"
  },
  {
    "text": "worker where f schedule",
    "start": "983279",
    "end": "985519"
  },
  {
    "text": "and the driver only owns the out list",
    "start": "985519",
    "end": "989680"
  },
  {
    "text": "then the driver tries to access the",
    "start": "989680",
    "end": "992240"
  },
  {
    "text": "inner element",
    "start": "992240",
    "end": "993120"
  },
  {
    "text": "of the list let's recheck the previous",
    "start": "993120",
    "end": "996560"
  },
  {
    "text": "two questions",
    "start": "996560",
    "end": "998639"
  },
  {
    "text": "what if the worker field",
    "start": "998639",
    "end": "1001680"
  },
  {
    "text": "driver will fail to access x since the",
    "start": "1001680",
    "end": "1004079"
  },
  {
    "text": "owner died",
    "start": "1004079",
    "end": "1005440"
  },
  {
    "text": "and what's worse we have no way to",
    "start": "1005440",
    "end": "1008160"
  },
  {
    "text": "reconstruct it",
    "start": "1008160",
    "end": "1009199"
  },
  {
    "text": "since the lineage information is stored",
    "start": "1009199",
    "end": "1011120"
  },
  {
    "text": "in the owner",
    "start": "1011120",
    "end": "1012720"
  },
  {
    "text": "in this case it's not okay",
    "start": "1012720",
    "end": "1016320"
  },
  {
    "text": "what if the driver access",
    "start": "1016320",
    "end": "1019680"
  },
  {
    "text": "is okay for this case since there is no",
    "start": "1019680",
    "end": "1022160"
  },
  {
    "text": "place",
    "start": "1022160",
    "end": "1022800"
  },
  {
    "text": "where access x anymore we call this",
    "start": "1022800",
    "end": "1026000"
  },
  {
    "text": "upward pattern since it's passing the",
    "start": "1026000",
    "end": "1027839"
  },
  {
    "text": "object from owner to the color",
    "start": "1027839",
    "end": "1031120"
  },
  {
    "text": "now let's check another piece of code",
    "start": "1031120",
    "end": "1034160"
  },
  {
    "text": "the driver first called the mode",
    "start": "1034160",
    "end": "1035678"
  },
  {
    "text": "function f to get object x",
    "start": "1035679",
    "end": "1038079"
  },
  {
    "text": "and now x is owned by the driver",
    "start": "1038079",
    "end": "1041600"
  },
  {
    "text": "then the driver created a detached actor",
    "start": "1041600",
    "end": "1044640"
  },
  {
    "text": "the touch actor is an actor that would",
    "start": "1044640",
    "end": "1046640"
  },
  {
    "text": "still arrive",
    "start": "1046640",
    "end": "1048079"
  },
  {
    "text": "even the job axis then the driver passes",
    "start": "1048079",
    "end": "1051679"
  },
  {
    "text": "a list of containing x",
    "start": "1051679",
    "end": "1053039"
  },
  {
    "text": "to a detached director next we check the",
    "start": "1053039",
    "end": "1056400"
  },
  {
    "text": "previous two questions",
    "start": "1056400",
    "end": "1058559"
  },
  {
    "text": "what if the worker failed it's okay",
    "start": "1058559",
    "end": "1062080"
  },
  {
    "text": "since the driver now is the owner of x",
    "start": "1062080",
    "end": "1064960"
  },
  {
    "text": "and",
    "start": "1064960",
    "end": "1065280"
  },
  {
    "text": "the function g still can access x just",
    "start": "1065280",
    "end": "1068400"
  },
  {
    "text": "like downward pass pattern",
    "start": "1068400",
    "end": "1071440"
  },
  {
    "text": "what if the driver exists the actor",
    "start": "1071440",
    "end": "1074880"
  },
  {
    "text": "won't be able to access x anymore",
    "start": "1074880",
    "end": "1076960"
  },
  {
    "text": "since the owner axis x cannot be",
    "start": "1076960",
    "end": "1080480"
  },
  {
    "text": "constructed",
    "start": "1080480",
    "end": "1081360"
  },
  {
    "text": "due to the owner die so it's not",
    "start": "1081360",
    "end": "1084400"
  },
  {
    "text": "okay here we call this",
    "start": "1084400",
    "end": "1088160"
  },
  {
    "text": "lateral passing pattern since it's",
    "start": "1088160",
    "end": "1090160"
  },
  {
    "text": "passing object",
    "start": "1090160",
    "end": "1091280"
  },
  {
    "text": "across different ownership trees",
    "start": "1091280",
    "end": "1095520"
  },
  {
    "start": "1094000",
    "end": "1185000"
  },
  {
    "text": "now we have checked the three patterns",
    "start": "1095520",
    "end": "1097679"
  },
  {
    "text": "of object passing and",
    "start": "1097679",
    "end": "1099120"
  },
  {
    "text": "two of them need the support of",
    "start": "1099120",
    "end": "1100960"
  },
  {
    "text": "ownership transfer to work safely",
    "start": "1100960",
    "end": "1103200"
  },
  {
    "text": "next let's check some real world use",
    "start": "1103200",
    "end": "1105280"
  },
  {
    "text": "cases",
    "start": "1105280",
    "end": "1107200"
  },
  {
    "text": "but first maybe let's think about why we",
    "start": "1107200",
    "end": "1109520"
  },
  {
    "text": "need to take care of these cases",
    "start": "1109520",
    "end": "1111600"
  },
  {
    "text": "or to answer another question what will",
    "start": "1111600",
    "end": "1114480"
  },
  {
    "text": "happen if we don't take care of",
    "start": "1114480",
    "end": "1116080"
  },
  {
    "text": "these cases scale down a cluster will be",
    "start": "1116080",
    "end": "1120240"
  },
  {
    "text": "hard even there is no test",
    "start": "1120240",
    "end": "1122240"
  },
  {
    "text": "running because it might have the owner",
    "start": "1122240",
    "end": "1125360"
  },
  {
    "text": "of some objects there",
    "start": "1125360",
    "end": "1126960"
  },
  {
    "text": "and if we remove that node we will no",
    "start": "1126960",
    "end": "1129039"
  },
  {
    "text": "longer be able to access these objects",
    "start": "1129039",
    "end": "1132559"
  },
  {
    "text": "we also won't be able to remove the",
    "start": "1132559",
    "end": "1134559"
  },
  {
    "text": "zombie process",
    "start": "1134559",
    "end": "1135679"
  },
  {
    "text": "for example we cannot access driver or",
    "start": "1135679",
    "end": "1138799"
  },
  {
    "text": "any worker which are the owner of some",
    "start": "1138799",
    "end": "1140799"
  },
  {
    "text": "objects",
    "start": "1140799",
    "end": "1141360"
  },
  {
    "text": "that's as they are in use so these",
    "start": "1141360",
    "end": "1143520"
  },
  {
    "text": "workers are just there",
    "start": "1143520",
    "end": "1144880"
  },
  {
    "text": "but doing nothing like zombie process",
    "start": "1144880",
    "end": "1148480"
  },
  {
    "text": "and we won't be able to reconstruct the",
    "start": "1148480",
    "end": "1150720"
  },
  {
    "text": "objects if the owner died",
    "start": "1150720",
    "end": "1154320"
  },
  {
    "text": "here is a real world example in udp",
    "start": "1154320",
    "end": "1157520"
  },
  {
    "text": "right now they pass the list of data",
    "start": "1157520",
    "end": "1161679"
  },
  {
    "text": "data partition upwards to the corner if",
    "start": "1161679",
    "end": "1164640"
  },
  {
    "text": "the worker died there's no way to get",
    "start": "1164640",
    "end": "1166640"
  },
  {
    "text": "the data here's another example",
    "start": "1166640",
    "end": "1170000"
  },
  {
    "text": "the test object is put into object store",
    "start": "1170000",
    "end": "1172559"
  },
  {
    "text": "first",
    "start": "1172559",
    "end": "1173360"
  },
  {
    "text": "and then the list of object references",
    "start": "1173360",
    "end": "1176080"
  },
  {
    "text": "are stored in the detached actor",
    "start": "1176080",
    "end": "1178160"
  },
  {
    "text": "if the worker access then this cached",
    "start": "1178160",
    "end": "1181120"
  },
  {
    "text": "objects are no longer able to be",
    "start": "1181120",
    "end": "1183120"
  },
  {
    "text": "retrieved",
    "start": "1183120",
    "end": "1185679"
  },
  {
    "start": "1185000",
    "end": "1232000"
  },
  {
    "text": "next let's take a look at the designs",
    "start": "1185840",
    "end": "1190799"
  },
  {
    "text": "to solve this problem we need to answer",
    "start": "1190880",
    "end": "1193360"
  },
  {
    "text": "two questions",
    "start": "1193360",
    "end": "1195679"
  },
  {
    "text": "when should we do and",
    "start": "1195679",
    "end": "1198720"
  },
  {
    "text": "how can we transfer the ownership",
    "start": "1198720",
    "end": "1202559"
  },
  {
    "text": "to answer the first one we need to",
    "start": "1202559",
    "end": "1204400"
  },
  {
    "text": "figure out what's the best way to",
    "start": "1204400",
    "end": "1206159"
  },
  {
    "text": "trigger a transfer",
    "start": "1206159",
    "end": "1207760"
  },
  {
    "text": "to answer the second one we need to",
    "start": "1207760",
    "end": "1209600"
  },
  {
    "text": "figure out how can we transfer our",
    "start": "1209600",
    "end": "1211440"
  },
  {
    "text": "objects from one owner to another owner",
    "start": "1211440",
    "end": "1214400"
  },
  {
    "text": "we need the solution to be easy to use",
    "start": "1214400",
    "end": "1217200"
  },
  {
    "text": "which means that it should",
    "start": "1217200",
    "end": "1218720"
  },
  {
    "text": "be user-friendly we also need it to be",
    "start": "1218720",
    "end": "1222080"
  },
  {
    "text": "efficient and advanced",
    "start": "1222080",
    "end": "1223360"
  },
  {
    "text": "as a lot of overhead to system we want",
    "start": "1223360",
    "end": "1226640"
  },
  {
    "text": "the solution to cover the most",
    "start": "1226640",
    "end": "1229280"
  },
  {
    "text": "of the real-world use cases",
    "start": "1229280",
    "end": "1234159"
  },
  {
    "start": "1232000",
    "end": "1267000"
  },
  {
    "text": "let's first try to answer the first",
    "start": "1234159",
    "end": "1236640"
  },
  {
    "text": "question when to trigger a transfer",
    "start": "1236640",
    "end": "1240480"
  },
  {
    "text": "one way is to introduce a new api to",
    "start": "1240480",
    "end": "1243200"
  },
  {
    "text": "trigger the transfer manually",
    "start": "1243200",
    "end": "1244960"
  },
  {
    "text": "for example some api like move q which",
    "start": "1244960",
    "end": "1248159"
  },
  {
    "text": "will move the ownership",
    "start": "1248159",
    "end": "1249520"
  },
  {
    "text": "of an object to a network",
    "start": "1249520",
    "end": "1253280"
  },
  {
    "text": "this is simple to implement and very",
    "start": "1253600",
    "end": "1255600"
  },
  {
    "text": "efficient but",
    "start": "1255600",
    "end": "1256960"
  },
  {
    "text": "this is not very good to the user since",
    "start": "1256960",
    "end": "1259200"
  },
  {
    "text": "the user is using carefully about the",
    "start": "1259200",
    "end": "1261360"
  },
  {
    "text": "ownership",
    "start": "1261360",
    "end": "1262000"
  },
  {
    "text": "of the objects and we also need to",
    "start": "1262000",
    "end": "1265280"
  },
  {
    "text": "update the code to do this",
    "start": "1265280",
    "end": "1268400"
  },
  {
    "start": "1267000",
    "end": "1317000"
  },
  {
    "text": "another way is to transfer by deleting",
    "start": "1268400",
    "end": "1270880"
  },
  {
    "text": "detecting the scope",
    "start": "1270880",
    "end": "1272320"
  },
  {
    "text": "changes automatically",
    "start": "1272320",
    "end": "1275600"
  },
  {
    "text": "this can provide the best of the user",
    "start": "1275840",
    "end": "1278000"
  },
  {
    "text": "experience and the user don't need to",
    "start": "1278000",
    "end": "1280000"
  },
  {
    "text": "think about the ownership",
    "start": "1280000",
    "end": "1281360"
  },
  {
    "text": "explicit since the algorithm will cover",
    "start": "1281360",
    "end": "1283919"
  },
  {
    "text": "it for them",
    "start": "1283919",
    "end": "1285440"
  },
  {
    "text": "but how to do the detection here",
    "start": "1285440",
    "end": "1289520"
  },
  {
    "text": "output transfer is actively used to do",
    "start": "1289520",
    "end": "1292240"
  },
  {
    "text": "since they will only need to transfer",
    "start": "1292240",
    "end": "1294159"
  },
  {
    "text": "the owner of objects to the corner",
    "start": "1294159",
    "end": "1298080"
  },
  {
    "text": "for the lateral transfer it's more",
    "start": "1298320",
    "end": "1300000"
  },
  {
    "text": "complicated but we can at least",
    "start": "1300000",
    "end": "1302080"
  },
  {
    "text": "easily support transferring between",
    "start": "1302080",
    "end": "1304480"
  },
  {
    "text": "detached",
    "start": "1304480",
    "end": "1305360"
  },
  {
    "text": "actors which can cover a lot of use",
    "start": "1305360",
    "end": "1307360"
  },
  {
    "text": "cases",
    "start": "1307360",
    "end": "1308640"
  },
  {
    "text": "the ideal solution is to do transfer if",
    "start": "1308640",
    "end": "1310880"
  },
  {
    "text": "the receiver and the owner of the",
    "start": "1310880",
    "end": "1312480"
  },
  {
    "text": "objects are in different",
    "start": "1312480",
    "end": "1313840"
  },
  {
    "text": "ownership scope which is harder to",
    "start": "1313840",
    "end": "1317840"
  },
  {
    "start": "1317000",
    "end": "1389000"
  },
  {
    "text": "another question is how to transfer",
    "start": "1317840",
    "end": "1321280"
  },
  {
    "text": "let's review the example in the lateral",
    "start": "1321280",
    "end": "1324000"
  },
  {
    "text": "pressing pattern",
    "start": "1324000",
    "end": "1325200"
  },
  {
    "text": "it should be the same for upward",
    "start": "1325200",
    "end": "1326880"
  },
  {
    "text": "pressing pattern",
    "start": "1326880",
    "end": "1328559"
  },
  {
    "text": "in java we first call a remote function",
    "start": "1328559",
    "end": "1331039"
  },
  {
    "text": "to get x",
    "start": "1331039",
    "end": "1332080"
  },
  {
    "text": "and now create a detached actor and pass",
    "start": "1332080",
    "end": "1335039"
  },
  {
    "text": "x to the detection act",
    "start": "1335039",
    "end": "1337200"
  },
  {
    "text": "how about the ownership of x the driver",
    "start": "1337200",
    "end": "1340799"
  },
  {
    "text": "owns",
    "start": "1340799",
    "end": "1341200"
  },
  {
    "text": "x and x won't be available if the driver",
    "start": "1341200",
    "end": "1344840"
  },
  {
    "text": "exists one way to do",
    "start": "1344840",
    "end": "1347520"
  },
  {
    "text": "this is by ownership sharing",
    "start": "1347520",
    "end": "1350880"
  },
  {
    "text": "we can implement the sharing in",
    "start": "1350880",
    "end": "1353039"
  },
  {
    "text": "reference content layer",
    "start": "1353039",
    "end": "1354400"
  },
  {
    "text": "so that the object can be owned by",
    "start": "1354400",
    "end": "1356159"
  },
  {
    "text": "multiple workers",
    "start": "1356159",
    "end": "1357440"
  },
  {
    "text": "and in this way we transfer the",
    "start": "1357440",
    "end": "1359280"
  },
  {
    "text": "ownership to each of the worker",
    "start": "1359280",
    "end": "1361760"
  },
  {
    "text": "here the driver and the actor both will",
    "start": "1361760",
    "end": "1364559"
  },
  {
    "text": "only object",
    "start": "1364559",
    "end": "1365440"
  },
  {
    "text": "x the object x will be cleaning up when",
    "start": "1365440",
    "end": "1368559"
  },
  {
    "text": "it's locked on by any workers",
    "start": "1368559",
    "end": "1371280"
  },
  {
    "text": "this is relatively simple to implement",
    "start": "1371280",
    "end": "1374080"
  },
  {
    "text": "since most of the changes will be in",
    "start": "1374080",
    "end": "1376240"
  },
  {
    "text": "reference continue",
    "start": "1376240",
    "end": "1378400"
  },
  {
    "text": "and it's relatively efficient since it",
    "start": "1378400",
    "end": "1381039"
  },
  {
    "text": "behaves like",
    "start": "1381039",
    "end": "1382000"
  },
  {
    "text": "a logic copy of the underlying objects",
    "start": "1382000",
    "end": "1384880"
  },
  {
    "text": "so we don't duplicate",
    "start": "1384880",
    "end": "1386159"
  },
  {
    "text": "the physicality of the objects",
    "start": "1386159",
    "end": "1389600"
  },
  {
    "start": "1389000",
    "end": "1434000"
  },
  {
    "text": "here is just a quick recap we went",
    "start": "1389600",
    "end": "1392159"
  },
  {
    "text": "through the three patterns",
    "start": "1392159",
    "end": "1393440"
  },
  {
    "text": "of object pressing and discuss why we",
    "start": "1393440",
    "end": "1396400"
  },
  {
    "text": "need ownership transfer",
    "start": "1396400",
    "end": "1398080"
  },
  {
    "text": "later we went through one design we will",
    "start": "1398080",
    "end": "1400880"
  },
  {
    "text": "transfer the ownership",
    "start": "1400880",
    "end": "1402240"
  },
  {
    "text": "automatically via patent detection and",
    "start": "1402240",
    "end": "1405280"
  },
  {
    "text": "share the ownership among other workers",
    "start": "1405280",
    "end": "1407840"
  },
  {
    "text": "which is",
    "start": "1407840",
    "end": "1408480"
  },
  {
    "text": "using this object since this is an",
    "start": "1408480",
    "end": "1411679"
  },
  {
    "text": "ongoing project we are looking for",
    "start": "1411679",
    "end": "1414840"
  },
  {
    "text": "feedback",
    "start": "1414840",
    "end": "1416000"
  },
  {
    "text": "and so that concludes our talk on",
    "start": "1416000",
    "end": "1418960"
  },
  {
    "text": "ownership",
    "start": "1418960",
    "end": "1419919"
  },
  {
    "text": "please check out our whitepaper for more",
    "start": "1419919",
    "end": "1422720"
  },
  {
    "text": "information about ownership model",
    "start": "1422720",
    "end": "1424640"
  },
  {
    "text": "and how it relates to other problems",
    "start": "1424640",
    "end": "1426960"
  },
  {
    "text": "such as memory management",
    "start": "1426960",
    "end": "1428960"
  },
  {
    "text": "thank you and we are happy to take any",
    "start": "1428960",
    "end": "1433200"
  },
  {
    "text": "questions",
    "start": "1433640",
    "end": "1436640"
  }
]