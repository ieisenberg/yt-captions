[
  {
    "text": "welcome everybody to most malleable memory management method I spent a lot of time on that title",
    "start": "5000",
    "end": "13000"
  },
  {
    "text": "uh for those of you who don't know missing before I am BJ fer for those of you who do know me before I'm still BJ",
    "start": "13000",
    "end": "20960"
  },
  {
    "text": "fer um I I live in Stockholm in Sweden uh I",
    "start": "20960",
    "end": "27119"
  },
  {
    "text": "work for net Insight net Insight Mak Network equipment like these media",
    "start": "27119",
    "end": "33000"
  },
  {
    "text": "switches or or these and we connect them in large networks and in fact you have one of the world's largest installations",
    "start": "33000",
    "end": "39520"
  },
  {
    "text": "here in Norway uh there are a plethora of CPUs",
    "start": "39520",
    "end": "44760"
  },
  {
    "text": "on these pictures I don't know how many because every plugin board has at least two CPUs at least one CPU and at least",
    "start": "44760",
    "end": "50280"
  },
  {
    "text": "one fpj but usually two CPUs and a couple of fpgs we do everything we design the",
    "start": "50280",
    "end": "56160"
  },
  {
    "text": "mechanics Electronics fpj programming low level software Network stack",
    "start": "56160",
    "end": "62239"
  },
  {
    "text": "Services Network Management Systems the lot we also do things like",
    "start": "62239",
    "end": "69400"
  },
  {
    "text": "uh cloud-based real-time media streaming and we also lately",
    "start": "69400",
    "end": "75640"
  },
  {
    "text": "do Precision distribution of time so in nation state siiz networks we keep every",
    "start": "75640",
    "end": "80840"
  },
  {
    "text": "node in the network within a 100ish NCS so ntp about 100,000 times",
    "start": "80840",
    "end": "88159"
  },
  {
    "text": "better um so there is what we do if you think this",
    "start": "88159",
    "end": "93799"
  },
  {
    "text": "is interesting come and have a chat we are hiring you",
    "start": "93799",
    "end": "100119"
  },
  {
    "text": "know uh but uh that is not really the topic today the topic today",
    "start": "100119",
    "end": "106000"
  },
  {
    "text": "is memory management memory management is interesting uh it's it's one of those",
    "start": "106000",
    "end": "112520"
  },
  {
    "text": "things that you can have a very long career in C++ and never have to worry about at all",
    "start": "112520",
    "end": "121159"
  },
  {
    "text": "I started my C+ plus career in 94 so that's it's been a time been a",
    "start": "121159",
    "end": "128759"
  },
  {
    "text": "while and the first time I needed memory management was I think it was 2017 or 18 I'm not",
    "start": "128759",
    "end": "136840"
  },
  {
    "text": "sure so almost 25 years anyway without having to worry about it and in this",
    "start": "136840",
    "end": "144480"
  },
  {
    "text": "project uh actually this Real Time video streaming cloud-based video streaming",
    "start": "144480",
    "end": "149560"
  },
  {
    "text": "thing it was a make or break thing it was what made the video server actually work to",
    "start": "149560",
    "end": "157519"
  },
  {
    "text": "do it to do what it was meant to do with the performance that it needed to",
    "start": "157519",
    "end": "162720"
  },
  {
    "text": "have so why how come how can this",
    "start": "162720",
    "end": "168400"
  },
  {
    "text": "be well it all comes to the Heap the the free store what you allocate with new",
    "start": "168400",
    "end": "174640"
  },
  {
    "text": "and get rid of with delete and it's a it's a super clever construction you you",
    "start": "174640",
    "end": "181879"
  },
  {
    "text": "can allocate objects of any size and any alignment and you can allocate and",
    "start": "181879",
    "end": "187959"
  },
  {
    "text": "deallocate from any thread and you can even allocate in one thread and deallocate from another thread and it",
    "start": "187959",
    "end": "193159"
  },
  {
    "text": "just works and lifetimes can vary a lot",
    "start": "193159",
    "end": "198959"
  },
  {
    "text": "you have objects that just wink into existence and disappear again like some",
    "start": "198959",
    "end": "204159"
  },
  {
    "text": "uh Quantum mechanic thing and uh like particles",
    "start": "204159",
    "end": "209200"
  },
  {
    "text": "just pop be and then disappearing again or they can live for",
    "start": "209200",
    "end": "214920"
  },
  {
    "text": "years I heard not very long ago about uh an installation of one of those machines",
    "start": "214920",
    "end": "220319"
  },
  {
    "text": "that I showed you in in the introduction that had been running continuously for 15",
    "start": "220319",
    "end": "228680"
  },
  {
    "text": "years I bet there were a number of objects that had actually been alive that whole",
    "start": "228680",
    "end": "235120"
  },
  {
    "text": "time so this is amazing this is this is powerful",
    "start": "235120",
    "end": "240920"
  },
  {
    "text": "but this also means that the Heap is a very complex data",
    "start": "240920",
    "end": "246360"
  },
  {
    "text": "structure and there are compromises to be made",
    "start": "246360",
    "end": "252120"
  },
  {
    "text": "between uh lookup time how long does it take to find a a chunk of memory that",
    "start": "252120",
    "end": "258239"
  },
  {
    "text": "fits what you want to allocate and how much extra space are you prepared to waste to to get it",
    "start": "258239",
    "end": "266360"
  },
  {
    "text": "fast and you get poor locality of reference",
    "start": "266360",
    "end": "271479"
  },
  {
    "text": "for one you get poor locality of reference because you just don't have any control of it you you cannot say I",
    "start": "271479",
    "end": "278160"
  },
  {
    "text": "want to allocate this object here and I I know that this other object that I'm allocating is going to be used more or",
    "start": "278160",
    "end": "285000"
  },
  {
    "text": "less at the same time so they should really should be close to each other in memory because that is good for for cash",
    "start": "285000",
    "end": "291759"
  },
  {
    "text": "locality but we there is no API to express",
    "start": "291759",
    "end": "296919"
  },
  {
    "text": "that uh and you also get p locality of reference due to these object lifetime",
    "start": "297240",
    "end": "303800"
  },
  {
    "text": "varying so you you get the available Slots of unused memory just gets",
    "start": "303800",
    "end": "311039"
  },
  {
    "text": "scattered all over the place and it's that's just how it",
    "start": "311039",
    "end": "316840"
  },
  {
    "text": "is and a consequence of that is that you can get fragmentation so say that you have a program that it allocates and",
    "start": "316840",
    "end": "324560"
  },
  {
    "text": "deallocates small objects back and forth all the time but once in a while it needs to allocate a huge slab of",
    "start": "324560",
    "end": "331600"
  },
  {
    "text": "memory and although there may be enough free memory available in small bits and",
    "start": "331600",
    "end": "339000"
  },
  {
    "text": "pieces here and there you don't have a contiguous space for that huge slab so it needs to go to the operating system",
    "start": "339000",
    "end": "344639"
  },
  {
    "text": "get a large chunk of memory get this big object there and then when the big object is no",
    "start": "344639",
    "end": "350919"
  },
  {
    "text": "longer needed it's deallocated and you keep allocating smaller objects back and forth BL and next time you need to",
    "start": "350919",
    "end": "357919"
  },
  {
    "text": "allocate a large level memory there is no free space of that size anymore so",
    "start": "357919",
    "end": "363520"
  },
  {
    "text": "you need to go out to the operating system and for a long running program this may look like you have a memory",
    "start": "363520",
    "end": "369240"
  },
  {
    "text": "leak if you look at the memory consumption of the program it's just slowly",
    "start": "369240",
    "end": "375160"
  },
  {
    "text": "growing but there is no memory leak it's just that there aren't these huge slabs",
    "start": "375160",
    "end": "381440"
  },
  {
    "text": "available these tend to asymptotically reach some ceiling but it's extremely",
    "start": "381440",
    "end": "388840"
  },
  {
    "text": "difficult to predict predict what will it grow",
    "start": "388840",
    "end": "393880"
  },
  {
    "text": "to so this is this is problematic and this is of course the",
    "start": "393880",
    "end": "401479"
  },
  {
    "text": "reason why oh yeah sure synchronization oh boy yeah we are allocating and",
    "start": "401479",
    "end": "406880"
  },
  {
    "text": "deallocating in different threads so of course you need synchronization and yeah sure you",
    "start": "406880",
    "end": "414840"
  },
  {
    "text": "can limit the overhead of synchronization by having thread local",
    "start": "414840",
    "end": "420240"
  },
  {
    "text": "pools that you allocate with but you still have to handle the case where it's deallocated from another thread than it",
    "start": "420240",
    "end": "427120"
  },
  {
    "text": "was allocated from so then you maybe wait until the pool is",
    "start": "427120",
    "end": "432199"
  },
  {
    "text": "completely filled with well not filled at all no no objects in it and then",
    "start": "432199",
    "end": "437720"
  },
  {
    "text": "return it to to the available pool but then you waste a lot of space so all",
    "start": "437720",
    "end": "443560"
  },
  {
    "text": "these engineering tradeoffs back and forth and it costs so what do you",
    "start": "443560",
    "end": "450080"
  },
  {
    "text": "if this is not acceptable if your program needs something better well you turn to",
    "start": "450080",
    "end": "456520"
  },
  {
    "text": "allocators I'm me Norway who has been at the monk Museum and seen this in",
    "start": "458720",
    "end": "465120"
  },
  {
    "text": "person H fewer than I thought maybe a quarter of the people I'm ashamed to",
    "start": "465120",
    "end": "470599"
  },
  {
    "text": "admit I have actually not done so myself I really shouldn't make a point of doing",
    "start": "470599",
    "end": "475919"
  },
  {
    "text": "that but then there's PM PMR PMR sucks l",
    "start": "475919",
    "end": "481319"
  },
  {
    "text": "so P polymorphic memory resource the way it works is is that a container I have",
    "start": "487639",
    "end": "493400"
  },
  {
    "text": "container in quotes because the container is basically anything that will allocate memory like LED string for",
    "start": "493400",
    "end": "502240"
  },
  {
    "text": "example uh a container has a PMR allocator and the PMR allocator",
    "start": "502240",
    "end": "509680"
  },
  {
    "text": "references a memory resource you have this uh firewall between them so the the PMR",
    "start": "509680",
    "end": "517680"
  },
  {
    "text": "allocator deals with instantiating and destroying objects in the memory that the memory",
    "start": "517680",
    "end": "524480"
  },
  {
    "text": "resource has provided so the memory resource is not bothered with object",
    "start": "524480",
    "end": "530160"
  },
  {
    "text": "creation or anything it deals with bytes and the PMR allocator does all the",
    "start": "530160",
    "end": "537480"
  },
  {
    "text": "really scary stuff so also",
    "start": "537480",
    "end": "544040"
  },
  {
    "text": "all all the containers in the standard Library are PMR available under",
    "start": "544040",
    "end": "549720"
  },
  {
    "text": "namespace PMR so you have for example stent PMR Vector St PMR string stent PMR list if you're inclined that way",
    "start": "549720",
    "end": "560600"
  },
  {
    "text": "uh and you have this header memory resource if you want to write your own",
    "start": "560600",
    "end": "566480"
  },
  {
    "text": "memory resource that handles your own memory allocation strategies for that fit your",
    "start": "566480",
    "end": "572519"
  },
  {
    "text": "needs you include memory resource and you create a class that inherits from St",
    "start": "572519",
    "end": "578640"
  },
  {
    "text": "PMR memory resource and you implement these three functions do allocate do de allocate and",
    "start": "578640",
    "end": "585839"
  },
  {
    "text": "do is equal by the way please feel free to interrupt at any time if you have",
    "start": "585839",
    "end": "592800"
  },
  {
    "text": "questions don't don't wait to the end",
    "start": "592800",
    "end": "598120"
  },
  {
    "text": "uh and that's pretty much it uh it's in my",
    "start": "598120",
    "end": "603720"
  },
  {
    "text": "opinion mildly annoying that the alignment is size T we actually have a data type to express alignment it's",
    "start": "603720",
    "end": "610399"
  },
  {
    "text": "align Val T it is used in other places which we will see very soon alignment is",
    "start": "610399",
    "end": "618000"
  },
  {
    "text": "not a size it's an alignment it's a different thing it's it should use an extra type of its own and we even have a",
    "start": "618000",
    "end": "624399"
  },
  {
    "text": "type of its own but it's not used here I believe the reasons for this is",
    "start": "624399",
    "end": "629480"
  },
  {
    "text": "that allocators came with C++ 98 and Alignment came in was it",
    "start": "629480",
    "end": "637040"
  },
  {
    "text": "11 14 I'm not sure that is probably the historical reason why it looks like it is but it's",
    "start": "637040",
    "end": "643959"
  },
  {
    "text": "still annoying so let's let's write a tracing",
    "start": "643959",
    "end": "649440"
  },
  {
    "text": "resource one that just tells us what is happening so inherit from St PMR",
    "start": "649440",
    "end": "657560"
  },
  {
    "text": "resource instan with a reference to a no stream Where where we tell log what is",
    "start": "657560",
    "end": "663760"
  },
  {
    "text": "happening do deallocate call C operator new with the with the size",
    "start": "663760",
    "end": "670480"
  },
  {
    "text": "and here we see the cost to align valt because that is needed for the aligned operator",
    "start": "670480",
    "end": "676440"
  },
  {
    "text": "new and then output to the stream allocate this many bytes this alignment",
    "start": "676440",
    "end": "682160"
  },
  {
    "text": "and we got this address similar for do",
    "start": "682160",
    "end": "687440"
  },
  {
    "text": "deallocate do is equal is an interesting thing it's",
    "start": "687440",
    "end": "693360"
  },
  {
    "text": "uh in the PMR World equality between memory resources is",
    "start": "693360",
    "end": "699680"
  },
  {
    "text": "that if what one memory resource allocated can be deallocated by another",
    "start": "699680",
    "end": "706320"
  },
  {
    "text": "memory resource then they are equal so for example stateless",
    "start": "706320",
    "end": "712680"
  },
  {
    "text": "allocators work fine here stateful probably not but maybe it",
    "start": "712680",
    "end": "719720"
  },
  {
    "text": "depends on how you have written them",
    "start": "719720",
    "end": "725600"
  },
  {
    "text": "so let's have a little look so I have here this tracing",
    "start": "725600",
    "end": "734120"
  },
  {
    "text": "resource takes a no stream do this uh",
    "start": "734120",
    "end": "739399"
  },
  {
    "text": "logging and a creat a resource to referencing study Out Create a PMR",
    "start": "739399",
    "end": "746320"
  },
  {
    "text": "Vector of PMR strings that uses this tracing",
    "start": "746320",
    "end": "752760"
  },
  {
    "text": "resource and then we and place a couple of strings and we can see now what happens",
    "start": "752760",
    "end": "758639"
  },
  {
    "text": "so the first allocation is for the vector to grow from size 0 to one so we",
    "start": "758639",
    "end": "764720"
  },
  {
    "text": "need space for the vector storage 40 bytes alignment",
    "start": "764720",
    "end": "770440"
  },
  {
    "text": "eight uh because that is the the alignment requirement of uh of the",
    "start": "771079",
    "end": "776760"
  },
  {
    "text": "strings then L 26 bites alignment one because that is the actual character for",
    "start": "776760",
    "end": "783240"
  },
  {
    "text": "a somewhat longer string and the null termination then we place the next one",
    "start": "783240",
    "end": "789839"
  },
  {
    "text": "so it needs to grow the vector so it allocates 80 bytes for it allocate 32",
    "start": "789839",
    "end": "795839"
  },
  {
    "text": "bytes note that we're not allocating 26 bytes again because it's uh this object is moved so no need for another",
    "start": "795839",
    "end": "803320"
  },
  {
    "text": "allocation then deallocate the old 40 bytes that are no longer needed then we",
    "start": "803320",
    "end": "809120"
  },
  {
    "text": "go out of scope and deallocate everything and here I learned something new that I did not know before note the",
    "start": "809120",
    "end": "815360"
  },
  {
    "text": "order of deallocation it deallocates from beginning to end of the vector I",
    "start": "815360",
    "end": "821279"
  },
  {
    "text": "was always certain for whatever reason that Vector deallocates from the tail",
    "start": "821279",
    "end": "826839"
  },
  {
    "text": "towards the head but uh looking at the standard it actually doesn't say",
    "start": "826839",
    "end": "831920"
  },
  {
    "text": "anything such that was just something I",
    "start": "831920",
    "end": "836160"
  },
  {
    "text": "imagined so now we have seen the first demo of using PMR and our",
    "start": "837759",
    "end": "846240"
  },
  {
    "text": "own kind of simple but still useful uh memory",
    "start": "846240",
    "end": "852480"
  },
  {
    "text": "Resource One thing that is is kind of obvious but it's it's",
    "start": "855759",
    "end": "863120"
  },
  {
    "text": "something you can make a mistake with uh you noted that when I created the",
    "start": "863120",
    "end": "869240"
  },
  {
    "text": "Vector I just gave it the address of the memory resource there there are no",
    "start": "869240",
    "end": "875199"
  },
  {
    "text": "safeties here you you really better make sure that your memory resource outlives",
    "start": "875199",
    "end": "880839"
  },
  {
    "text": "all containers that use it because otherwise a container will follow the",
    "start": "880839",
    "end": "885880"
  },
  {
    "text": "pointer to those bleeding bites that used to be an allocat A Memory resource",
    "start": "885880",
    "end": "891160"
  },
  {
    "text": "and try to make operations on it that kind of necromancy does not lead to anything",
    "start": "891160",
    "end": "896279"
  },
  {
    "text": "good and it's it's an honest mistake that it's easy to make because the the API just doesn't help you",
    "start": "896279",
    "end": "904560"
  },
  {
    "text": "unfortunately and it's also very easy to accidentally misusing a PMR type when",
    "start": "905040",
    "end": "910279"
  },
  {
    "text": "you should and that is not so easy to detect when",
    "start": "910279",
    "end": "915959"
  },
  {
    "text": "you make that mistake because what happens is that the program works the",
    "start": "915959",
    "end": "921440"
  },
  {
    "text": "logic is correct it's just that you don't get the objects in the location of memory where you expected them to be",
    "start": "921440",
    "end": "929959"
  },
  {
    "text": "we will see that more in this",
    "start": "929959",
    "end": "934279"
  },
  {
    "text": "presentation however there are tools I'm going to show some tools that",
    "start": "935360",
    "end": "942759"
  },
  {
    "text": "help with this so throughout this talk I'm going",
    "start": "942759",
    "end": "948040"
  },
  {
    "text": "to use this uh word frequency histogram as an example so I have an unordered map",
    "start": "948040",
    "end": "956880"
  },
  {
    "text": "from strings being the ones we count the frequency of and the and the size T that",
    "start": "956880",
    "end": "962759"
  },
  {
    "text": "is the count obviously when I add a word we just use the bracket operator to get to the",
    "start": "962759",
    "end": "971959"
  },
  {
    "text": "to the size T and if it wasn't there a new one is created and it is initialized to zero and then it's incremented so we",
    "start": "971959",
    "end": "977959"
  },
  {
    "text": "get one the first time and then of course we want to be able to see which which are the most popular words so I",
    "start": "977959",
    "end": "984639"
  },
  {
    "text": "have a print top top n first ones and the way it works I have a",
    "start": "984639",
    "end": "990240"
  },
  {
    "text": "convenient uh type alas for for St pair here but I copy all the all the words",
    "start": "990240",
    "end": "997160"
  },
  {
    "text": "from the unordered map into this Vector in order to be able to to do a",
    "start": "997160",
    "end": "1003519"
  },
  {
    "text": "partial sort of them so we sort the first n words using stud greater because we want",
    "start": "1003519",
    "end": "1011040"
  },
  {
    "text": "the most popular ones first and we sort it on uh count colon colon second which is",
    "start": "1011040",
    "end": "1017800"
  },
  {
    "text": "the the uh the size team member right and then",
    "start": "1017800",
    "end": "1023199"
  },
  {
    "text": "we just Loop over the first five ones first n ones sorry uh and uh print them",
    "start": "1023199",
    "end": "1029199"
  },
  {
    "text": "so we can see which are the popular strings and Main just perfectly naively",
    "start": "1029199",
    "end": "1037480"
  },
  {
    "text": "reads words using the stream extraction operator from see in and adds them and",
    "start": "1037480",
    "end": "1044120"
  },
  {
    "text": "then we print the most popular five ones",
    "start": "1044120",
    "end": "1049160"
  },
  {
    "text": "so let's let's have a look at",
    "start": "1049160",
    "end": "1052559"
  },
  {
    "text": "this the basic one it's this is the one you saw uh",
    "start": "1058880",
    "end": "1064280"
  },
  {
    "text": "no no difference in here I I hope there is no difference in here shouldn't",
    "start": "1064280",
    "end": "1070520"
  },
  {
    "text": "be and I should yeah I should mention uh as",
    "start": "1073400",
    "end": "1078960"
  },
  {
    "text": "test data to use to drive this example I have this all keys of text this I I",
    "start": "1078960",
    "end": "1084240"
  },
  {
    "text": "actually don't really know what this is it's part of the Pearl distribution I chose it because it has a lot of strings",
    "start": "1084240",
    "end": "1093159"
  },
  {
    "text": "a fair bit of repetition and it's reasonably sized it's yeah",
    "start": "1093159",
    "end": "1100520"
  },
  {
    "text": "33,000 roughly lines long so we have a fair number of",
    "start": "1100520",
    "end": "1107320"
  },
  {
    "text": "strings now I I'm a Linux developer so I use",
    "start": "1107320",
    "end": "1112400"
  },
  {
    "text": "Linux tools I'm sure there are other tools available for for uh other operating systems Heap track is one that",
    "start": "1112400",
    "end": "1119880"
  },
  {
    "text": "I like using for this so the way it works you run Heap",
    "start": "1119880",
    "end": "1125400"
  },
  {
    "text": "track on a program and you get the results and we",
    "start": "1125400",
    "end": "1132679"
  },
  {
    "text": "can ignore this popup for now now we can see the most popular string is by far is",
    "start": "1132679",
    "end": "1140520"
  },
  {
    "text": "a octo Thorp closely followed by semon and then",
    "start": "1140520",
    "end": "1146960"
  },
  {
    "text": "letter quite far behind and then they are not very frequent",
    "start": "1146960",
    "end": "1152039"
  },
  {
    "text": "anymore what Heap track tells us here is that first of all 133 thou, 540 calls to",
    "start": "1152039",
    "end": "1162080"
  },
  {
    "text": "allocation functions okay that is fair",
    "start": "1162080",
    "end": "1167120"
  },
  {
    "text": "amount uh we can see like how much memory did did the program take in total",
    "start": "1167120",
    "end": "1172520"
  },
  {
    "text": "we can analyze a bit I'm not going to go into very much detail because this is not a primarily a heap track talk but we",
    "start": "1172520",
    "end": "1179679"
  },
  {
    "text": "can see the sizes of the objects created almost all of them are between 17 to 32",
    "start": "1179679",
    "end": "1185640"
  },
  {
    "text": "bytes or 30 33 to 64 bytes that is where they tend to",
    "start": "1185640",
    "end": "1191520"
  },
  {
    "text": "be uh we can look at top down to see where are the allocations so we have",
    "start": "1191520",
    "end": "1200559"
  },
  {
    "text": "main we have like print top has a number of allocations and",
    "start": "1201760",
    "end": "1207840"
  },
  {
    "text": "such so this is useful useful program to",
    "start": "1207840",
    "end": "1214200"
  },
  {
    "text": "drill down and see where where are your allocations you can also do bottom up which is to see from the allocation",
    "start": "1214200",
    "end": "1220679"
  },
  {
    "text": "function how did I get there another one that is really useful is the flame growth and now you have to",
    "start": "1220679",
    "end": "1226760"
  },
  {
    "text": "be careful and select the right thing I'm choosing number of allocations the way to read this Frame",
    "start": "1226760",
    "end": "1233200"
  },
  {
    "text": "graph is that the the vertical axis is a call stack and the horizontal axis is",
    "start": "1233200",
    "end": "1239880"
  },
  {
    "text": "the number of calls relatively speaking so if something is very wide it's a lot if it's very narrow there are only a",
    "start": "1239880",
    "end": "1247240"
  },
  {
    "text": "few so we can see that we have print top and we have",
    "start": "1247240",
    "end": "1252880"
  },
  {
    "text": "histogram ad these are the ones and histogram ad is divided into two one for",
    "start": "1252880",
    "end": "1259000"
  },
  {
    "text": "for the strings and one for the nodes in the unordered map so we we already have",
    "start": "1259000",
    "end": "1267240"
  },
  {
    "text": "some feel for how our program works in terms of how it allocates",
    "start": "1267240",
    "end": "1273600"
  },
  {
    "text": "memory maybe not that much useful information here but we do have a",
    "start": "1275679",
    "end": "1281799"
  },
  {
    "text": "baseline Victor are you think",
    "start": "1281799",
    "end": "1289720"
  },
  {
    "text": "uh am I using debug builds or release builds it's",
    "start": "1289720",
    "end": "1296600"
  },
  {
    "text": "uh it's a matter of taste what you want to do really uh I compromise and use",
    "start": "1296600",
    "end": "1303480"
  },
  {
    "text": "what cake calls release with debug info which in this case with the GCC means",
    "start": "1303480",
    "end": "1310600"
  },
  {
    "text": "it's- O2 and and debug symbols uh the reason I'm not choosing",
    "start": "1310600",
    "end": "1316559"
  },
  {
    "text": "03 is that it tends to make it difficult to read the the the call",
    "start": "1316559",
    "end": "1323320"
  },
  {
    "text": "stack and uh o Zer pure debug is in my opinion",
    "start": "1323320",
    "end": "1329360"
  },
  {
    "text": "just too noisy to be useful but it's it's a matter of taste and it may matter it may differ from",
    "start": "1329360",
    "end": "1336480"
  },
  {
    "text": "program to program also what makes sense but thank you for that",
    "start": "1336480",
    "end": "1341799"
  },
  {
    "text": "question okay so we have a baseline 133,000 allocations let's let's P Mar it",
    "start": "1341799",
    "end": "1349080"
  },
  {
    "text": "so the way you do this is you just scatter colon colon PMR everywhere in",
    "start": "1349080",
    "end": "1355039"
  },
  {
    "text": "your program uh and you make sure that you take an",
    "start": "1355039",
    "end": "1361080"
  },
  {
    "text": "allocator and you in this case I have this unorder map that is words",
    "start": "1361080",
    "end": "1366159"
  },
  {
    "text": "underscore and I give it this allocator so it knows what to",
    "start": "1366159",
    "end": "1372159"
  },
  {
    "text": "use so it will allocate memory with that and in C++ 17 where the PMR was first",
    "start": "1372159",
    "end": "1380080"
  },
  {
    "text": "introduced you needed to add a type name here to say what what type do I want to",
    "start": "1380080",
    "end": "1385120"
  },
  {
    "text": "allocate C plus 20 thankfully got rid of that so you just write the empty diamond",
    "start": "1385120",
    "end": "1390440"
  },
  {
    "text": "and forget about it it makes life so much easier upgrade to 20 if you",
    "start": "1390440",
    "end": "1396320"
  },
  {
    "text": "haven't but it still works in 17 uh again our our main program uses a",
    "start": "1396320",
    "end": "1402720"
  },
  {
    "text": "PMR string and everything else is exactly the same so let's have a look at this",
    "start": "1402720",
    "end": "1409880"
  },
  {
    "text": "what do you expect no one there say",
    "start": "1423919",
    "end": "1431400"
  },
  {
    "text": "anything you expect the same yeah it's the same",
    "start": "1431400",
    "end": "1439200"
  },
  {
    "text": "so why now but if we look at the call growth though we will see a difference",
    "start": "1439200",
    "end": "1447039"
  },
  {
    "text": "we we see that the memory is allocated via the polymorphic allocator in all of",
    "start": "1447039",
    "end": "1452480"
  },
  {
    "text": "these cases so no we haven't gained anything",
    "start": "1452480",
    "end": "1457840"
  },
  {
    "text": "but we we see that we are exercising the PMR system uh we are allocating through",
    "start": "1457840",
    "end": "1464799"
  },
  {
    "text": "PMR why is it the same",
    "start": "1464799",
    "end": "1469799"
  },
  {
    "text": "because we we haven't given it an an allocator that does something special",
    "start": "1471880",
    "end": "1477840"
  },
  {
    "text": "yes so uh the the default polymorphic",
    "start": "1477840",
    "end": "1485799"
  },
  {
    "text": "allocator uses a new delete resource which just calls operator new and",
    "start": "1485799",
    "end": "1491559"
  },
  {
    "text": "delete uh so yeah of course we got the same",
    "start": "1491559",
    "end": "1496760"
  },
  {
    "text": "result but we did see it being used we have had some",
    "start": "1496760",
    "end": "1502360"
  },
  {
    "text": "progress um the standard Library ships with five uh five memory resources that",
    "start": "1502360",
    "end": "1511720"
  },
  {
    "text": "you can use and of course you can write your own also uh the new delete resource you just saw it's the one that just",
    "start": "1511720",
    "end": "1519480"
  },
  {
    "text": "allocates and deletes with operating new delete n resource is really useful it does fail at absolutely everything you",
    "start": "1519480",
    "end": "1526480"
  },
  {
    "text": "try to give it I have such days at work",
    "start": "1526480",
    "end": "1532240"
  },
  {
    "text": "uh but this is useful when for example if you want to write tests that your",
    "start": "1532240",
    "end": "1537679"
  },
  {
    "text": "data structure handles Auto memory conditions hand it the null resource and",
    "start": "1537679",
    "end": "1543559"
  },
  {
    "text": "see how it behaves synchronized pool resource it",
    "start": "1543559",
    "end": "1550960"
  },
  {
    "text": "uh it grabs large contiguous chunks of memory and use these as tables of",
    "start": "1550960",
    "end": "1558279"
  },
  {
    "text": "same size elements where it it does allocations by just finding the some",
    "start": "1558279",
    "end": "1564559"
  },
  {
    "text": "free slot in that table which means that allocations and deallocations are just",
    "start": "1564559",
    "end": "1570559"
  },
  {
    "text": "really simple uh indexing operations so they they're dir cheap uh",
    "start": "1570559",
    "end": "1577679"
  },
  {
    "text": "it's synchronized so that you can work where you allocate and deallocate from",
    "start": "1577679",
    "end": "1582760"
  },
  {
    "text": "different threads uh the unsynchronized one is the same but as a name implies the you don't",
    "start": "1582760",
    "end": "1589799"
  },
  {
    "text": "pay for the synchronization overhead if you know that you're going to allocate and deallocate in the same",
    "start": "1589799",
    "end": "1595080"
  },
  {
    "text": "thread and then you have the monotonic buffer resource it is an interesting one uh",
    "start": "1595080",
    "end": "1601159"
  },
  {
    "text": "it's it's super fast the way this one works is that you grab a huge contigous",
    "start": "1601159",
    "end": "1608480"
  },
  {
    "text": "slab of memory or several and every time you allocate it",
    "start": "1608480",
    "end": "1613880"
  },
  {
    "text": "it starts from the beginning and then every allocation just goes forward makes the Align necessary alignment for for",
    "start": "1613880",
    "end": "1621159"
  },
  {
    "text": "the requirements and just goes forward uh and deallocation does buger",
    "start": "1621159",
    "end": "1628520"
  },
  {
    "text": "roll so it's kind of wasteful but it's super fast because since all allocations",
    "start": "1628520",
    "end": "1634399"
  },
  {
    "text": "are just going forward in memory it it's a perfect match for modern CPUs cash",
    "start": "1634399",
    "end": "1641320"
  },
  {
    "text": "prefetches uh and one use case that I found that is really handy for this is",
    "start": "1641320",
    "end": "1647840"
  },
  {
    "text": "if you have a long running program but you have something that you need to do periodically a function that is called",
    "start": "1647840",
    "end": "1654120"
  },
  {
    "text": "now and then where it needs to for example parse data or whatever that you",
    "start": "1654120",
    "end": "1659880"
  },
  {
    "text": "you know that you will need to populate some data structure in the call and then you have grabb the information that you",
    "start": "1659880",
    "end": "1666279"
  },
  {
    "text": "needed from it and you don't need those dat structures anymore then you can pre-allocate a slab of memory at the",
    "start": "1666279",
    "end": "1672880"
  },
  {
    "text": "beginning of the function create a monotonic buffer resource that refers to that slab of memory then it does its",
    "start": "1672880",
    "end": "1678080"
  },
  {
    "text": "work you get the information you need deallocate the U monotonic buffer resource but you",
    "start": "1678080",
    "end": "1685000"
  },
  {
    "text": "keep the memory slab",
    "start": "1685000",
    "end": "1688159"
  },
  {
    "text": "yes how about just reserving a stood Vector yeah if if the only thing you",
    "start": "1693279",
    "end": "1699399"
  },
  {
    "text": "need is a St Vector yeah sure go ahead do that uh but if you for example need to",
    "start": "1699399",
    "end": "1706200"
  },
  {
    "text": "so one case where I have used this is uh in the network we receive a UDP packet",
    "start": "1706200",
    "end": "1711960"
  },
  {
    "text": "that contains a adjacent object that we need to parse",
    "start": "1711960",
    "end": "1718120"
  },
  {
    "text": "and get information out of uh and uh I know the it's bounded in size by",
    "start": "1718120",
    "end": "1724480"
  },
  {
    "text": "how large the payload of a UDP packet can be but I have no idea of the internal structure of that one so",
    "start": "1724480",
    "end": "1731880"
  },
  {
    "text": "allocating a a sufficiently large slab of memory and that then do the Json",
    "start": "1731880",
    "end": "1737039"
  },
  {
    "text": "paring in that slab of memory is very fast very",
    "start": "1737039",
    "end": "1744278"
  },
  {
    "text": "convenient right and also you can Cascade memory resources so you",
    "start": "1746399",
    "end": "1751480"
  },
  {
    "text": "typically construct the memory resource with a pointer to the next resource to use the Upstream",
    "start": "1751480",
    "end": "1759360"
  },
  {
    "text": "resource so as an example if I have this function do work that uses in this case",
    "start": "1759360",
    "end": "1765480"
  },
  {
    "text": "a pool we see that the pool has been constructed with um with monotonic",
    "start": "1765480",
    "end": "1771200"
  },
  {
    "text": "buffers monotonic buffer is a monotonic buffer resource that is created using the Heap and the Heap is the new delete",
    "start": "1771200",
    "end": "1780080"
  },
  {
    "text": "resource what happens when you run this program is that when do work needs to",
    "start": "1780080",
    "end": "1785480"
  },
  {
    "text": "allocate memory it calls pool for memory if the pool has a free slot in its",
    "start": "1785480",
    "end": "1792640"
  },
  {
    "text": "tables it will just return the pointer to it if it doesn't it goes to monotonic buffer and say hey give me another slab",
    "start": "1792640",
    "end": "1798440"
  },
  {
    "text": "of memory it adds that slab of memory to to its tables uh the UN synchronized pool",
    "start": "1798440",
    "end": "1805919"
  },
  {
    "text": "resource uses this slab of memory again for adds it to its tables and if the",
    "start": "1805919",
    "end": "1812120"
  },
  {
    "text": "monotonic buffers was out of memory it will go to the Heap to allocate a slab to get more memory from it so you can",
    "start": "1812120",
    "end": "1821080"
  },
  {
    "text": "cascate these to get whatever Behavior you you",
    "start": "1821080",
    "end": "1826240"
  },
  {
    "text": "want like so so a slide detour go back to the",
    "start": "1826240",
    "end": "1832480"
  },
  {
    "text": "tracing resource I wrote this using the the naked operator new",
    "start": "1832480",
    "end": "1838799"
  },
  {
    "text": "and delete and uh I mean this",
    "start": "1838799",
    "end": "1843919"
  },
  {
    "text": "works as we saw but it's sort of not really the the",
    "start": "1843919",
    "end": "1850399"
  },
  {
    "text": "PMR way of doing it is we should instead have given it uh the the next memory resource to to",
    "start": "1850399",
    "end": "1858840"
  },
  {
    "text": "use to allocate memory from so we can do it like this instead",
    "start": "1858840",
    "end": "1864200"
  },
  {
    "text": "we we have a mem a member next that is another pointer to memory resource we",
    "start": "1864200",
    "end": "1870080"
  },
  {
    "text": "get a memory resource uh as an argument to the",
    "start": "1870080",
    "end": "1875799"
  },
  {
    "text": "Constructor uh we get the default resource if you if",
    "start": "1875799",
    "end": "1881679"
  },
  {
    "text": "you don't provide one that seems to be the tradition in PMR if you can talk",
    "start": "1881679",
    "end": "1886720"
  },
  {
    "text": "about tradition with something that is this young that you you default the the",
    "start": "1886720",
    "end": "1892000"
  },
  {
    "text": "next level uh get default resource this one is",
    "start": "1892000",
    "end": "1898080"
  },
  {
    "text": "interesting uh the the default default so to speak is the new delete resource",
    "start": "1898080",
    "end": "1903960"
  },
  {
    "text": "but there is actually a function stood PMR set default resource I am not convinced that it is a",
    "start": "1903960",
    "end": "1910519"
  },
  {
    "text": "good idea to use that to be honest but now you know of its",
    "start": "1910519",
    "end": "1916159"
  },
  {
    "text": "existence and then change the implementations and",
    "start": "1916159",
    "end": "1922279"
  },
  {
    "text": "do allocate and do deallocate to just use this next resource to to get the",
    "start": "1922279",
    "end": "1927760"
  },
  {
    "text": "actual bytes or return the actual",
    "start": "1927760",
    "end": "1932679"
  },
  {
    "text": "bytes so back to the PMR histogram",
    "start": "1933720",
    "end": "1938840"
  },
  {
    "text": "um which allocator should we use",
    "start": "1938840",
    "end": "1946080"
  },
  {
    "text": "suggestions sorry I didn't hear tracing",
    "start": "1946080",
    "end": "1953279"
  },
  {
    "text": "allocator nah let's not it's a you do remember it was 133,000",
    "start": "1954000",
    "end": "1961360"
  },
  {
    "text": "allocations right you don't want that Trace you really don't want that Trace uh I choose the unsynchronized",
    "start": "1961360",
    "end": "1970159"
  },
  {
    "text": "pool uh because we know that this is all in one thread and we saw earlier that",
    "start": "1970159",
    "end": "1976559"
  },
  {
    "text": "almost all allocations were 16 to 32 or 32 to 64 there were just a handful of",
    "start": "1976559",
    "end": "1984559"
  },
  {
    "text": "other allocations so the unsynchronized uh pool is a is a good memory resource",
    "start": "1984559",
    "end": "1991480"
  },
  {
    "text": "it's a good fit for this problem",
    "start": "1991480",
    "end": "1997559"
  },
  {
    "text": "so just create an unsynchronized pool resource I have not given it an underlying resource to get memory from",
    "start": "1997559",
    "end": "2004200"
  },
  {
    "text": "so it will use a new delete resource go to the Heap to get these slabs of memory",
    "start": "2004200",
    "end": "2009960"
  },
  {
    "text": "to use inst instantiate the histogram with a pointer to this resource and we can",
    "start": "2009960",
    "end": "2018960"
  },
  {
    "text": "go",
    "start": "2020000",
    "end": "2023000"
  },
  {
    "text": "yep how does the pooled resource know the size of the chunks it should have uh",
    "start": "2028559",
    "end": "2035440"
  },
  {
    "text": "this is an implementation detail that the that is not mandated by the standard",
    "start": "2035440",
    "end": "2041919"
  },
  {
    "text": "but the likely scenario is that you when you when you do allocations it will uh",
    "start": "2041919",
    "end": "2050000"
  },
  {
    "text": "round it to some probably a power of two low power two bytes uh and it will",
    "start": "2050000",
    "end": "2057480"
  },
  {
    "text": "find it will it will find or create a table of that rounded up size to the",
    "start": "2057480",
    "end": "2063560"
  },
  {
    "text": "nearest power of two I think that is what I would expect uh so when you start it has nothing the",
    "start": "2063560",
    "end": "2070878"
  },
  {
    "text": "first allocation it will allocate one table the second allocation if it if it fits that size it will use it if it's a",
    "start": "2070879",
    "end": "2077800"
  },
  {
    "text": "different size it will allocate a new slab to have a table for that size did that answer your question",
    "start": "2077800",
    "end": "2086800"
  },
  {
    "text": "okay so we have this uh person two where we get an",
    "start": "2088639",
    "end": "2095838"
  },
  {
    "text": "allocator uh and actually use the unsynchronized",
    "start": "2095879",
    "end": "2101720"
  },
  {
    "text": "pool here",
    "start": "2101720",
    "end": "2107320"
  },
  {
    "text": "so what do you think what do you",
    "start": "2111520",
    "end": "2116000"
  },
  {
    "text": "expect okay 30,000 down from 33,000 that",
    "start": "2123240",
    "end": "2128880"
  },
  {
    "text": "is it's not nothing it's definitely an",
    "start": "2128880",
    "end": "2135280"
  },
  {
    "text": "improvement uh we look at the flame graph what do we",
    "start": "2135280",
    "end": "2140720"
  },
  {
    "text": "what do we have here we have print print top is almost everything we have this",
    "start": "2140720",
    "end": "2146119"
  },
  {
    "text": "tiny little bit this is where this is",
    "start": "2146119",
    "end": "2151240"
  },
  {
    "text": "ADD it's kind of difficult to see but it is uh no sorry",
    "start": "2152240",
    "end": "2158800"
  },
  {
    "text": "sorry the tool kind of tells you that you shouldn't really bother with this one it's not it's not significant so",
    "start": "2159160",
    "end": "2167040"
  },
  {
    "text": "almost all our um allocations are in print top okay",
    "start": "2167040",
    "end": "2172319"
  },
  {
    "text": "why why is that why is",
    "start": "2172319",
    "end": "2178200"
  },
  {
    "text": "that uh let's see print top we count uses a PMR string",
    "start": "2178400",
    "end": "2185720"
  },
  {
    "text": "we we use PMR Vector oh I have made a mistake you have not seen",
    "start": "2185720",
    "end": "2193078"
  },
  {
    "text": "this so you saw nothing",
    "start": "2193520",
    "end": "2199119"
  },
  {
    "text": "right so this is what I actually compiled but of course I mean the PMR",
    "start": "2199520",
    "end": "2205599"
  },
  {
    "text": "Vector of course surely this will make a huge",
    "start": "2205599",
    "end": "2212960"
  },
  {
    "text": "difference yeah so exactly the same for exactly the",
    "start": "2215680",
    "end": "2223079"
  },
  {
    "text": "reason that was said for those who didn't uh hear the comment was we we are",
    "start": "2223079",
    "end": "2228400"
  },
  {
    "text": "not giving the PMR Vector uh the allocator to use so we can add we can add one here we",
    "start": "2228400",
    "end": "2236359"
  },
  {
    "text": "can say use we can use the allocator that that",
    "start": "2236359",
    "end": "2244920"
  },
  {
    "text": "is in use by the unorder map anyway so did just continue using that",
    "start": "2244920",
    "end": "2250839"
  },
  {
    "text": "one so let's try what do you expect",
    "start": "2250839",
    "end": "2257599"
  },
  {
    "text": "now rarely has a room being so",
    "start": "2258880",
    "end": "2263400"
  },
  {
    "text": "quiet 84 if this was a program that suffered",
    "start": "2264040",
    "end": "2270040"
  },
  {
    "text": "from the performance of memory allocation this would have been a drastic",
    "start": "2270040",
    "end": "2275280"
  },
  {
    "text": "improvement 100 33,000 down to",
    "start": "2275280",
    "end": "2280160"
  },
  {
    "text": "84 uh can I measure a time difference in in this demo uh I expect not because it",
    "start": "2283119",
    "end": "2288839"
  },
  {
    "text": "will be bounded by the reading the file I have actually not tried to",
    "start": "2288839",
    "end": "2295680"
  },
  {
    "text": "measure it so but this is my guess uh if we look at now at the sizes we can",
    "start": "2295680",
    "end": "2302480"
  },
  {
    "text": "see almost all allocations are more than 1 kiloby because the these uh this pool",
    "start": "2302480",
    "end": "2309160"
  },
  {
    "text": "resource will allocate fairly large slabs I actually don't know how",
    "start": "2309160",
    "end": "2314880"
  },
  {
    "text": "large and we can see the the rest of the allocations here this line is 10 allocations the rest is just nothing it",
    "start": "2314880",
    "end": "2322359"
  },
  {
    "text": "doesn't",
    "start": "2322359",
    "end": "2324720"
  },
  {
    "text": "matter so this can be a huge Boon for performance and of course depending on",
    "start": "2327400",
    "end": "2334960"
  },
  {
    "text": "what your needs are in this case I think that it made sense to use the unsynchronized pool resource but",
    "start": "2334960",
    "end": "2342319"
  },
  {
    "text": "maybe you have different needs for where In memory your object should",
    "start": "2342319",
    "end": "2348119"
  },
  {
    "text": "be and to get better cach locality and and such like and so maybe then you",
    "start": "2348119",
    "end": "2353319"
  },
  {
    "text": "would get other kinds of uh performance benefits like better read ahead",
    "start": "2353319",
    "end": "2359680"
  },
  {
    "text": "or such but I mean",
    "start": "2359680",
    "end": "2368040"
  },
  {
    "text": "this is awesome",
    "start": "2368040",
    "end": "2371599"
  },
  {
    "text": "right but you really do need tools like this like Heap track or something else because it's it's so easy",
    "start": "2373440",
    "end": "2380440"
  },
  {
    "text": "to to miss using a PMR type or to miss giving it an allocator and the system",
    "start": "2380440",
    "end": "2386119"
  },
  {
    "text": "just works just doesn't perform the way you intended it",
    "start": "2386119",
    "end": "2391200"
  },
  {
    "text": "to so let's uh go to a different chapter",
    "start": "2394160",
    "end": "2401680"
  },
  {
    "text": "yes yeah so the question is why is it encouraged to to default the allocators",
    "start": "2418720",
    "end": "2424520"
  },
  {
    "text": "when it's a problem that is so easy to forget if I don't default it then I then",
    "start": "2424520",
    "end": "2429839"
  },
  {
    "text": "I won't because the compiler will say that hey you're missing a parameter I agree with you uh and uh you don't have",
    "start": "2429839",
    "end": "2437880"
  },
  {
    "text": "to provide them normally but that is that is how the standard types are",
    "start": "2437880",
    "end": "2445440"
  },
  {
    "text": "written and I don't know why they are written that way well",
    "start": "2445440",
    "end": "2453000"
  },
  {
    "text": "Jason",
    "start": "2455319",
    "end": "2458319"
  },
  {
    "text": "Jason suggested setting the default resource to the null resource because then everything will fail if you forget",
    "start": "2461599",
    "end": "2467520"
  },
  {
    "text": "somewhere and uh I think that is an excellent comment yes I think do do",
    "start": "2467520",
    "end": "2474640"
  },
  {
    "text": "that",
    "start": "2474640",
    "end": "2477640"
  },
  {
    "text": "yes uh how would the monotonic allocator change this uh example um it would",
    "start": "2482599",
    "end": "2490000"
  },
  {
    "text": "consume more memory because when you deallocate something it will it will not be deallocated it will just continue",
    "start": "2490000",
    "end": "2495920"
  },
  {
    "text": "allocating more in this particular example it probably wouldn't really",
    "start": "2495920",
    "end": "2501040"
  },
  {
    "text": "matter because we're not deallocating until the end of the program anyway so",
    "start": "2501040",
    "end": "2506280"
  },
  {
    "text": "it would probably be really fast uh but that's guess work uh the the",
    "start": "2506280",
    "end": "2515000"
  },
  {
    "text": "problem with uh yeah there is one really big problem with how Vector works and the monotonic",
    "start": "2515000",
    "end": "2522160"
  },
  {
    "text": "resource and that is since a vector Grows by doubling its size every time it",
    "start": "2522160",
    "end": "2527359"
  },
  {
    "text": "means that it it will all it it will just continue creating more and more and more",
    "start": "2527359",
    "end": "2533800"
  },
  {
    "text": "space and leaving Dead Bites behind it so those those will be",
    "start": "2533800",
    "end": "2540200"
  },
  {
    "text": "wasted so if you use Vector with monotonic resource you probably want to",
    "start": "2540200",
    "end": "2545720"
  },
  {
    "text": "uh resarch everything up front in the",
    "start": "2545720",
    "end": "2550359"
  },
  {
    "text": "back would would would libraries like lib C++",
    "start": "2555640",
    "end": "2561319"
  },
  {
    "text": "that doesn't grow by factor to handle this better uh",
    "start": "2561319",
    "end": "2566359"
  },
  {
    "text": "probably okay so far we have used the the standard Library types how about",
    "start": "2567440",
    "end": "2573160"
  },
  {
    "text": "writing our own type that uses pm so I have here a counted string that has",
    "start": "2573160",
    "end": "2579960"
  },
  {
    "text": "a size t and a pimar string and a comparison on the count",
    "start": "2579960",
    "end": "2585920"
  },
  {
    "text": "that we could use and let's let's just Chuck this into",
    "start": "2585920",
    "end": "2591640"
  },
  {
    "text": "a a simple program where was",
    "start": "2591640",
    "end": "2597480"
  },
  {
    "text": "I there so I have the tracing resource",
    "start": "2597480",
    "end": "2604000"
  },
  {
    "text": "because it's useful to to show things I have this counted string exactly the way you saw",
    "start": "2604000",
    "end": "2609359"
  },
  {
    "text": "it so create a tracing resource create a vector of my counted string using this",
    "start": "2609359",
    "end": "2615680"
  },
  {
    "text": "resource and and place back stuff and all we see is",
    "start": "2615680",
    "end": "2623240"
  },
  {
    "text": "the allocations for the vector we don't see any allocations for these PMR",
    "start": "2623240",
    "end": "2629000"
  },
  {
    "text": "strings here that's a bummer that used that worked when we had",
    "start": "2629000",
    "end": "2635680"
  },
  {
    "text": "a a Vector Ed",
    "start": "2635680",
    "end": "2638960"
  },
  {
    "text": "string so the pimar system is a a heck of a lot of compile time type",
    "start": "2644760",
    "end": "2653079"
  },
  {
    "text": "Shenanigans uh going on and it it needs to introspect your type so for a vector",
    "start": "2653079",
    "end": "2658520"
  },
  {
    "text": "to know that it should use should pass the PMR allocator to your type it's it's",
    "start": "2658520",
    "end": "2663760"
  },
  {
    "text": "not enough that your type you uses PMR types internally or in its Constructors",
    "start": "2663760",
    "end": "2670520"
  },
  {
    "text": "uh you need to tell it that this is a PMR type so you need to have a a public",
    "start": "2670520",
    "end": "2675920"
  },
  {
    "text": "Alias allocator type that is uh a PMR allocator you need Constructors where",
    "start": "2675920",
    "end": "2684319"
  },
  {
    "text": "you have the allocator type as the last argument the",
    "start": "2684319",
    "end": "2689440"
  },
  {
    "text": "U as we saw the the tradition seem to be to to default it I actually agree with",
    "start": "2689440",
    "end": "2696800"
  },
  {
    "text": "the observation that maybe you shouldn't default",
    "start": "2696800",
    "end": "2701279"
  },
  {
    "text": "it and if you have very addict Constructors then it doesn't really make much sense to have it at the end so if",
    "start": "2702119",
    "end": "2708680"
  },
  {
    "text": "you have very adct Constructors you instead you have stood allocator RT and",
    "start": "2708680",
    "end": "2713839"
  },
  {
    "text": "the allocator type as the first parameters that way a container that",
    "start": "2713839",
    "end": "2719359"
  },
  {
    "text": "will wants to allocate your object it can see that aha allocator RT I know what to",
    "start": "2719359",
    "end": "2724880"
  },
  {
    "text": "do and this one is weird you need a copy like Constructor",
    "start": "2724880",
    "end": "2730280"
  },
  {
    "text": "something that looks like and behaves like a copy Constructor except that it has an extra argument that is an",
    "start": "2730280",
    "end": "2736559"
  },
  {
    "text": "allocator to say copy from this Source into this object and use this allocator",
    "start": "2736559",
    "end": "2742599"
  },
  {
    "text": "for it and likewise a move like Constructor",
    "start": "2742599",
    "end": "2748359"
  },
  {
    "text": "if I create a new object by moving from this but us this",
    "start": "2748359",
    "end": "2753920"
  },
  {
    "text": "allocator so our count when taken care of this our",
    "start": "2754880",
    "end": "2761880"
  },
  {
    "text": "counted strings suddenly became a lot less easy to read it's quite cluttered",
    "start": "2761880",
    "end": "2767880"
  },
  {
    "text": "but we have this allocator type here a Constructor that takes the allocator as the last",
    "start": "2767880",
    "end": "2775440"
  },
  {
    "text": "argument a very tic one that has stood the allocator RT at the beginning and",
    "start": "2775440",
    "end": "2781079"
  },
  {
    "text": "the allocator type this uh weird copy like",
    "start": "2781079",
    "end": "2787480"
  },
  {
    "text": "Constructor and move like",
    "start": "2787480",
    "end": "2791359"
  },
  {
    "text": "Constructor and let's have a look at",
    "start": "2792839",
    "end": "2796520"
  },
  {
    "text": "this so what I've done here again I'm using the tracing",
    "start": "2798200",
    "end": "2803319"
  },
  {
    "text": "resource so we can see what happens",
    "start": "2803319",
    "end": "2809160"
  },
  {
    "text": "and I'm using uh the pre-processor here to be able to just",
    "start": "2810119",
    "end": "2816359"
  },
  {
    "text": "remove functions uh easily let's get everything back to where it should",
    "start": "2816359",
    "end": "2824200"
  },
  {
    "text": "be and then it's the same uh create a tracing resource create the vector of my",
    "start": "2827000",
    "end": "2832440"
  },
  {
    "text": "counted string using this memory resource and place back two strings so",
    "start": "2832440",
    "end": "2837760"
  },
  {
    "text": "now we can see that allocate space for the for the vector allocate space for the string call The variadic Constructor",
    "start": "2837760",
    "end": "2846880"
  },
  {
    "text": "why is it calling the vartic one instead of this that uses a p",
    "start": "2846880",
    "end": "2855880"
  },
  {
    "text": "string well I'm creating with a string literal so this becomes a",
    "start": "2859800",
    "end": "2865400"
  },
  {
    "text": "a an array a c array of characters and C array of characters is not a PMR string",
    "start": "2865400",
    "end": "2873760"
  },
  {
    "text": "but it does match perfectly with uh the t's because it can be",
    "start": "2873760",
    "end": "2881319"
  },
  {
    "text": "anything so this is a better fit but if I if I remove",
    "start": "2881319",
    "end": "2887960"
  },
  {
    "text": "this then it works then I have exactly you see that it calls the nonar",
    "start": "2887960",
    "end": "2894359"
  },
  {
    "text": "adic Constructor",
    "start": "2894359",
    "end": "2897480"
  },
  {
    "text": "now uh but I we have the normal copy",
    "start": "2901319",
    "end": "2906359"
  },
  {
    "text": "Constructor and normal move Constructor and those are not seen at all we we see that when the vector grows it uses move",
    "start": "2906359",
    "end": "2913640"
  },
  {
    "text": "move alloc which is this one that doesn't move but has an allocator say",
    "start": "2913640",
    "end": "2919240"
  },
  {
    "text": "construct using move but to this allocator if",
    "start": "2919240",
    "end": "2925440"
  },
  {
    "text": "I don't provide that one it will use the the copying",
    "start": "2925440",
    "end": "2932839"
  },
  {
    "text": "counterpart and if you don't use use that one you get a very succinct and easy to",
    "start": "2933559",
    "end": "2941040"
  },
  {
    "text": "understand message that tells you exactly where you went wrong and what you should have done instead to make this program",
    "start": "2941040",
    "end": "2948680"
  },
  {
    "text": "work I spent a couple of hours on that honestly I did spend a couple of",
    "start": "2950640",
    "end": "2955960"
  },
  {
    "text": "hours on that so now you don't have to make that mistake you have seen it if if you get",
    "start": "2955960",
    "end": "2962319"
  },
  {
    "text": "this compilation spew you you know what you're what your",
    "start": "2962319",
    "end": "2967519"
  },
  {
    "text": "er uh so this is interesting and I don't really know",
    "start": "2969440",
    "end": "2975760"
  },
  {
    "text": "why it is like this but it",
    "start": "2975760",
    "end": "2981640"
  },
  {
    "text": "is so to to conclude here a little bit we what we can see is that it it's not",
    "start": "2984520",
    "end": "2992880"
  },
  {
    "text": "really difficult to write your own type that uses PMR allocators and and that plays well with the PMR system so",
    "start": "2992880",
    "end": "3000880"
  },
  {
    "text": "that the containers will actually use pmr2 but it's it's easy to get make",
    "start": "3000880",
    "end": "3007520"
  },
  {
    "text": "mistakes and using PMR types with standard containers is dead easy you",
    "start": "3009760",
    "end": "3015760"
  },
  {
    "text": "just you stood PMR your your type and you give it the memory resource that you want to use and that's that's it it's",
    "start": "3015760",
    "end": "3022559"
  },
  {
    "text": "super easy uh PMR is extraordinarily flexible",
    "start": "3022559",
    "end": "3028079"
  },
  {
    "text": "this is where the title for the presentation comes the most malleable memory management system because we",
    "start": "3028079",
    "end": "3035280"
  },
  {
    "text": "can we can just mix and match and play with do I want to use this memory",
    "start": "3035680",
    "end": "3041480"
  },
  {
    "text": "resource or that memory resource or this combination of memory resource or maybe the exact same data structure should use",
    "start": "3041480",
    "end": "3047880"
  },
  {
    "text": "this allocate this memory resource here in the program and this other memory resource here in the program because",
    "start": "3047880",
    "end": "3053799"
  },
  {
    "text": "they are called in different contexts where circumstances are differently this is extraordinarily",
    "start": "3053799",
    "end": "3061839"
  },
  {
    "text": "powerful and this this connection of how you manage btes and how you",
    "start": "3061839",
    "end": "3071400"
  },
  {
    "text": "construct objects makes life so much",
    "start": "3071400",
    "end": "3076119"
  },
  {
    "text": "easier but as we see in memory usage is quite opaque it it's very easy to make",
    "start": "3076839",
    "end": "3083160"
  },
  {
    "text": "mistakes and it's not so easy to see where you made the mistakes essentially the only way you",
    "start": "3083160",
    "end": "3089520"
  },
  {
    "text": "have is to use tools like like Heap track to to just manually observe where",
    "start": "3089520",
    "end": "3096880"
  },
  {
    "text": "was naked new and delete",
    "start": "3096880",
    "end": "3100798"
  },
  {
    "text": "C so PMR is obviously not a penia for for your Management Systems there are a",
    "start": "3104040",
    "end": "3109599"
  },
  {
    "text": "number of drawbacks uh there is one that everybody likes to talk about and",
    "start": "3109599",
    "end": "3115960"
  },
  {
    "text": "then there are a few that actually does matter uh the more Eagle eyed among you",
    "start": "3115960",
    "end": "3122280"
  },
  {
    "text": "may have noticed that when I used the PMR the memory usage",
    "start": "3122280",
    "end": "3127359"
  },
  {
    "text": "increased because the objects grew bigger in the case of the unordered map",
    "start": "3127359",
    "end": "3134359"
  },
  {
    "text": "we have a memory resource in the unordered map the memory resource has a pointer eight bytes",
    "start": "3134359",
    "end": "3140839"
  },
  {
    "text": "two the unordered map has a PMR allocator that has a pointer to a memory",
    "start": "3140839",
    "end": "3148000"
  },
  {
    "text": "resource 8 bytes and every single PMR string in",
    "start": "3148000",
    "end": "3153160"
  },
  {
    "text": "that an order map has a a PMR allocator that has a pointer 8 bytes to",
    "start": "3153160",
    "end": "3161319"
  },
  {
    "text": "to a memory resource the exact same memory resource so you're wasting memory your",
    "start": "3161319",
    "end": "3168200"
  },
  {
    "text": "objects will grow when you use PMR that is that is a",
    "start": "3168200",
    "end": "3173280"
  },
  {
    "text": "downside so you may be tempted to Instead try to write your own unordered",
    "start": "3173680",
    "end": "3179000"
  },
  {
    "text": "map where you have your own string that you handle in your own data type how",
    "start": "3179000",
    "end": "3185599"
  },
  {
    "text": "much work is that",
    "start": "3185599",
    "end": "3189960"
  },
  {
    "text": "so the the problem that everybody talks about is that the",
    "start": "3190640",
    "end": "3196599"
  },
  {
    "text": "interface for the memory resource is a virtual function call uh I believe that it is rare that",
    "start": "3196599",
    "end": "3203920"
  },
  {
    "text": "this is actually a problem because you are going to make a lot of",
    "start": "3203920",
    "end": "3210079"
  },
  {
    "text": "calls because if you're not making a lot of calls you you should probably not bother using uh memory management at",
    "start": "3210079",
    "end": "3218079"
  },
  {
    "text": "all and since you are making a lot of calls it means that the the V table for the memory resource",
    "start": "3218079",
    "end": "3227160"
  },
  {
    "text": "will be in hot cache it is fast it's not it's not immediate of course there is a",
    "start": "3227160",
    "end": "3233319"
  },
  {
    "text": "an indirection but think think about what happens then you you get you get some bites of row memory that you are",
    "start": "3233319",
    "end": "3240359"
  },
  {
    "text": "going to write to and in most cases the exception being the monotonic",
    "start": "3240359",
    "end": "3247640"
  },
  {
    "text": "memory resource these uh bites will be in cold cache so that is where your hit",
    "start": "3247640",
    "end": "3253559"
  },
  {
    "text": "is primarily I'm sure some of you will have situations where the virtual function call is the killer but I I'm",
    "start": "3253559",
    "end": "3261359"
  },
  {
    "text": "willing to bet that it's it's unusual",
    "start": "3261359",
    "end": "3266799"
  },
  {
    "text": "so my take on this is that if you suddenly realize that you",
    "start": "3266799",
    "end": "3273680"
  },
  {
    "text": "you actually need to think about memory management start with P because it's",
    "start": "3273680",
    "end": "3279040"
  },
  {
    "text": "dead easy to get started and most probably you will have",
    "start": "3279040",
    "end": "3285240"
  },
  {
    "text": "the a perfectly good solution with that and you're happy you have Sav saved yourself a lot of trouble if you're",
    "start": "3285240",
    "end": "3293440"
  },
  {
    "text": "unlucky write your own row allocators that is not fun",
    "start": "3293440",
    "end": "3298680"
  },
  {
    "text": "but it's it's still there but start with PMR it will probably be sufficient for",
    "start": "3298680",
    "end": "3303920"
  },
  {
    "text": "your need yeah one more thing um I mentioned",
    "start": "3303920",
    "end": "3312440"
  },
  {
    "text": "in the beginning the operator equal equal for memory resources that memory",
    "start": "3312440",
    "end": "3319559"
  },
  {
    "text": "resources are considered equal if what one allocated another can deallocate",
    "start": "3319559",
    "end": "3325920"
  },
  {
    "text": "uh that is important with uh this is It's a PMR container will never ever",
    "start": "3325920",
    "end": "3333920"
  },
  {
    "text": "change its memory resource it the object will live with the container",
    "start": "3333920",
    "end": "3340720"
  },
  {
    "text": "the uh memory resource it was constructed",
    "start": "3340720",
    "end": "3346078"
  },
  {
    "text": "with even when you do move a sign it will not change and here is where",
    "start": "3346440",
    "end": "3352720"
  },
  {
    "text": "operator equal equals comes in because if if operator equal equal to to the memory",
    "start": "3352720",
    "end": "3358680"
  },
  {
    "text": "resource says that these are the same then you get just a normal move operator where you're just stealing the pointers",
    "start": "3358680",
    "end": "3366119"
  },
  {
    "text": "and everything is blazingly fast but if they are different if they are not",
    "start": "3366119",
    "end": "3371240"
  },
  {
    "text": "equal then it will do element wise call to to move with this move like",
    "start": "3371240",
    "end": "3377440"
  },
  {
    "text": "Constructor with uh with the uh allocator uh or you will do a move to",
    "start": "3377440",
    "end": "3385440"
  },
  {
    "text": "newly allocated memory so this one is important if",
    "start": "3385440",
    "end": "3392319"
  },
  {
    "text": "memory resources are the same the internal pointers are taken over otherwise element wise moveed to newly",
    "start": "3392319",
    "end": "3398440"
  },
  {
    "text": "allocated memory this is design decision that could have been different but I think",
    "start": "3398440",
    "end": "3406599"
  },
  {
    "text": "they made the right choice here this is a bit surprising when you start using this I was definitely surprised by it",
    "start": "3406599",
    "end": "3414000"
  },
  {
    "text": "but the reason I think think this was the right decision is that it makes it so much easier to reason about where",
    "start": "3414000",
    "end": "3421920"
  },
  {
    "text": "does an object memory reside because it will reside with the allocator that the",
    "start": "3421920",
    "end": "3427400"
  },
  {
    "text": "object was constructed",
    "start": "3427400",
    "end": "3430920"
  },
  {
    "text": "with if you want to learn more talk to Jason Turner in the corner in the back uh he had a miniseries on C plus weekly",
    "start": "3432880",
    "end": "3440599"
  },
  {
    "text": "about PMR uh",
    "start": "3440599",
    "end": "3446799"
  },
  {
    "text": "Jason comments that it's been a while uh but it's still really good yeah you can",
    "start": "3447839",
    "end": "3453680"
  },
  {
    "text": "probably not see it but it says December 2020 so yeah it's been a while but it is a good good way to get up to speed on U",
    "start": "3453680",
    "end": "3461960"
  },
  {
    "text": "how PMR works and if you want to get into the how's and wise of the PMR",
    "start": "3461960",
    "end": "3467960"
  },
  {
    "text": "system why does it look the way it does watch this CPP con talk by Pablo Halper",
    "start": "3467960",
    "end": "3474319"
  },
  {
    "text": "and uh aliser Meredith it's really good really in depth and it explains the",
    "start": "3474319",
    "end": "3480720"
  },
  {
    "text": "engineering tradeoffs and why they choose to do things the way they did and that was most malleable memory",
    "start": "3480720",
    "end": "3489599"
  },
  {
    "text": "management method thank you very much for your kind",
    "start": "3489599",
    "end": "3493799"
  },
  {
    "text": "attention questions Jason",
    "start": "3499160",
    "end": "3506720"
  },
  {
    "text": "okay do do I have some best practices for when I should do a PMR and uh not",
    "start": "3528000",
    "end": "3535440"
  },
  {
    "text": "not really I I think so there there are situations where if from experience if",
    "start": "3535440",
    "end": "3541640"
  },
  {
    "text": "you have developed a type of program where you know that memory management will be important so for example if I",
    "start": "3541640",
    "end": "3548359"
  },
  {
    "text": "would start today to write a new uh video streaming server I I wouldn't hesitate for a",
    "start": "3548359",
    "end": "3554920"
  },
  {
    "text": "second to to just start with PMR right from the beginning because I have done this before but otherwise if I'm doing",
    "start": "3554920",
    "end": "3562640"
  },
  {
    "text": "something that is unfamiliar to me I don't know then I I won't bother because",
    "start": "3562640",
    "end": "3568119"
  },
  {
    "text": "most probably it won't won't matter like I said I I've been working nearly 25 years with C plus before I first had to",
    "start": "3568119",
    "end": "3575160"
  },
  {
    "text": "think about memory management so don't start complicating your life until it's",
    "start": "3575160",
    "end": "3581039"
  },
  {
    "text": "until you life comes back at you and see that hey I actually need to think about",
    "start": "3581039",
    "end": "3586200"
  },
  {
    "text": "this uh but I I really do think as I said just a couple of slides ago here",
    "start": "3586200",
    "end": "3592319"
  },
  {
    "text": "that that if you find yourself that you do need memory management start with PMR",
    "start": "3592319",
    "end": "3598119"
  },
  {
    "text": "don't start writing your own raw allocators more questions",
    "start": "3598119",
    "end": "3605440"
  },
  {
    "text": "yes why does unique pointer not have pmrs but unique pointer itself does never allocate well it could of course",
    "start": "3606520",
    "end": "3613599"
  },
  {
    "text": "use PMR to deallocate um I don't know it's the",
    "start": "3613599",
    "end": "3621838"
  },
  {
    "text": "answer uh yes",
    "start": "3622559",
    "end": "3626559"
  },
  {
    "text": "okay so so the comment was that for a unique pointer you you can you can provide your own deleter and you can",
    "start": "3634559",
    "end": "3640000"
  },
  {
    "text": "provide a deleter that uses a PMR allocator to to do the",
    "start": "3640000",
    "end": "3647240"
  },
  {
    "text": "deletion can you then make make unique uspm I don't think",
    "start": "3650720",
    "end": "3656520"
  },
  {
    "text": "so that the user of",
    "start": "3672079",
    "end": "3677760"
  },
  {
    "text": "is wow can we if we write some templating code can we",
    "start": "3678880",
    "end": "3685200"
  },
  {
    "text": "device some mechanism to ensure that the user of it uses PMR the way it is intended",
    "start": "3685200",
    "end": "3692359"
  },
  {
    "text": "to sorry I I have I have no idea I I don't know but what I can say though is",
    "start": "3693400",
    "end": "3700240"
  },
  {
    "text": "one thing that I I should have mentioned but I forgot uh this thing where it's",
    "start": "3700240",
    "end": "3705440"
  },
  {
    "text": "it's easy to by mistake not use the right types somewhere uh what you can do",
    "start": "3705440",
    "end": "3714200"
  },
  {
    "text": "and I I absolutely hate this but you can if you have good unit test Suites right",
    "start": "3714200",
    "end": "3721160"
  },
  {
    "text": "you do right so you can make a a a test memory resource that you can query for",
    "start": "3721160",
    "end": "3727359"
  },
  {
    "text": "which operators have been called or maybe you can mock them if you if you want to do that and see what it's called",
    "start": "3727359",
    "end": "3733839"
  },
  {
    "text": "Uh and ensure that your data type does see allocations that it should the",
    "start": "3733839",
    "end": "3740400"
  },
  {
    "text": "reason I said I hate that is that this is a kind of brittle kind of test",
    "start": "3740400",
    "end": "3746039"
  },
  {
    "text": "that breaks the moment you make the slightest bit of change to your code and",
    "start": "3746039",
    "end": "3751200"
  },
  {
    "text": "it becomes really unpleasant to maintain but it's something you can do",
    "start": "3751200",
    "end": "3760079"
  },
  {
    "text": "yes uh you can use uh uh a simpler thing",
    "start": "3765680",
    "end": "3770839"
  },
  {
    "text": "like a a like a memory resource that that what",
    "start": "3770839",
    "end": "3776640"
  },
  {
    "text": "do you say did give logging for example something that you can query for for results yes you can do that what what",
    "start": "3776640",
    "end": "3783480"
  },
  {
    "text": "you're missing though is if there is some type somewhere in the middle where you forgot to use PMR at all you used a",
    "start": "3783480",
    "end": "3790119"
  },
  {
    "text": "stood Vector instead of St P Vector I think uh time's up so thank you",
    "start": "3790119",
    "end": "3797359"
  },
  {
    "text": "very much for your kind",
    "start": "3797359",
    "end": "3800160"
  },
  {
    "text": "attention",
    "start": "3803039",
    "end": "3806039"
  }
]