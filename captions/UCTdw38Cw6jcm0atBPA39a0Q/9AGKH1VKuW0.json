[
  {
    "text": "i think we're good to go it's one minute past uh sharp",
    "start": "3520",
    "end": "8960"
  },
  {
    "text": "uh thank you for being here i think every speaker in the conference told you that how nice it is to actually see",
    "start": "8960",
    "end": "15599"
  },
  {
    "text": "people in fashion bones uh in the last two years i did only online presentations and it's not nice",
    "start": "15599",
    "end": "23119"
  },
  {
    "text": "to not see people staring at you or making funny faces or getting bored i",
    "start": "23119",
    "end": "30320"
  },
  {
    "text": "hope it won't be the case today but let's talk today about grpc grpc has",
    "start": "30320",
    "end": "36399"
  },
  {
    "text": "been around for quite a few years but not in the dotnet ecosystem",
    "start": "36399",
    "end": "42000"
  },
  {
    "text": "and i chose this because i always like to talk about different tools and technologies that we have available so",
    "start": "42000",
    "end": "48879"
  },
  {
    "text": "that the developers can be able to make an informed decision when it comes to picking the right tool",
    "start": "48879",
    "end": "54960"
  },
  {
    "text": "for the specific problem they have so who am i my name is irina scultu",
    "start": "54960",
    "end": "60000"
  },
  {
    "text": "married named dominte i'm from romania so i really love portugal the language",
    "start": "60000",
    "end": "65920"
  },
  {
    "text": "the food and the wine i think every speaker told you that i'm a software architect and an",
    "start": "65920",
    "end": "71360"
  },
  {
    "text": "independent consultant i organize a group on microsoft mvp and i often blog not that often uh lately",
    "start": "71360",
    "end": "79360"
  },
  {
    "text": "because i have a small child at arena codes you can find me on twitter i always tweet about my blog",
    "start": "79360",
    "end": "86720"
  },
  {
    "text": "posts so we will get started about grpc but not",
    "start": "86720",
    "end": "92159"
  },
  {
    "text": "until we're gonna talk about the monolith who here because i see a lot of people my age",
    "start": "92159",
    "end": "98479"
  },
  {
    "text": "have worked with monoliths before who loves them",
    "start": "98479",
    "end": "104320"
  },
  {
    "text": "oh admit it it was easy life uh i worked with monoliths since i don't",
    "start": "105280",
    "end": "110640"
  },
  {
    "text": "know 15 years ago 12 years ago and the life was very easy for a developer because",
    "start": "110640",
    "end": "116880"
  },
  {
    "text": "you loaded the solution everything loaded with that solution and when you press build button you could go ahead",
    "start": "116880",
    "end": "123680"
  },
  {
    "text": "and grab a coffee because the build always took many many minutes",
    "start": "123680",
    "end": "130080"
  },
  {
    "text": "the life was easy for a developer because everything was in there if you ever needed a",
    "start": "130080",
    "end": "135840"
  },
  {
    "text": "class was in there you went ahead and you instantiated that class use the functionality called the method and",
    "start": "135840",
    "end": "141920"
  },
  {
    "text": "everything was there but well kind every application web application",
    "start": "141920",
    "end": "148080"
  },
  {
    "text": "look like that it has the front end and a back end we had onion architectures everything in one one place",
    "start": "148080",
    "end": "155120"
  },
  {
    "text": "database or several databases and so on but now everything is working to be",
    "start": "155120",
    "end": "161360"
  },
  {
    "text": "distributed we split the front-end app we have react we have angular we have",
    "start": "161360",
    "end": "166640"
  },
  {
    "text": "whatever js applications and we have an api to serve data",
    "start": "166640",
    "end": "171840"
  },
  {
    "text": "and it doesn't matter what databases we have in uh behind of it but the future is distributed",
    "start": "171840",
    "end": "178720"
  },
  {
    "text": "distributed and we need to adapt to the the challenge of serving requests faster",
    "start": "178720",
    "end": "184239"
  },
  {
    "text": "and more requests because the storage is cheap and the user wants the responses very fast",
    "start": "184239",
    "end": "189840"
  },
  {
    "text": "so now we might end up having a front end that talks with different different backends and those backends maybe talk",
    "start": "189840",
    "end": "197360"
  },
  {
    "text": "with other backends so api to api calls and then maybe we get to this kind of",
    "start": "197360",
    "end": "203840"
  },
  {
    "text": "situations we have dotted dot net apps that need to talk with a go application",
    "start": "203840",
    "end": "209280"
  },
  {
    "text": "or node.js or third-party apis that we do not know the language we know",
    "start": "209280",
    "end": "215840"
  },
  {
    "text": "the definition of it but that's it so that's a common scenario in the world of",
    "start": "215840",
    "end": "221519"
  },
  {
    "text": "microservices right you have smaller chunks and those chunks are needed to",
    "start": "221519",
    "end": "226799"
  },
  {
    "text": "talk with each other and that talk is often made in json right because",
    "start": "226799",
    "end": "232000"
  },
  {
    "text": "json is the common language for pretty much everything and well we have rest apis admitted you",
    "start": "232000",
    "end": "239680"
  },
  {
    "text": "did rest apis you implemented such apis you did right",
    "start": "239680",
    "end": "245360"
  },
  {
    "text": "so and those apis were following every rest guideline",
    "start": "245360",
    "end": "250799"
  },
  {
    "text": "no right more often than not though our apis i i know from experience um my apis were",
    "start": "250799",
    "end": "259040"
  },
  {
    "text": "like transporting json over http if they had a few things with rest but",
    "start": "259040",
    "end": "265840"
  },
  {
    "text": "that's it weren't restful enough to actually name them as being restful so",
    "start": "265840",
    "end": "271680"
  },
  {
    "text": "rest uh has something like that we have a client we have a server and in between we often",
    "start": "271680",
    "end": "278240"
  },
  {
    "text": "have content negotiation done under under the hood uh so that a content",
    "start": "278240",
    "end": "283600"
  },
  {
    "text": "negotiation takes care of the format of the request uh the payload",
    "start": "283600",
    "end": "289199"
  },
  {
    "text": "the error handling and the retries and also the authentication everything is",
    "start": "289199",
    "end": "294240"
  },
  {
    "text": "self-contained in those requests we have headers we have verbs and the server",
    "start": "294240",
    "end": "299440"
  },
  {
    "text": "understands uh what we want uh based on what we sent okay if we send content",
    "start": "299440",
    "end": "306080"
  },
  {
    "text": "type of a specific mime type it will give us a specific response back if we",
    "start": "306080",
    "end": "311199"
  },
  {
    "text": "send another mime type maybe it will send a different representation of that resource but",
    "start": "311199",
    "end": "317919"
  },
  {
    "text": "rent has a problem rest or json over http",
    "start": "317919",
    "end": "323520"
  },
  {
    "text": "um has a lot of issues it becomes very chatty i mean it forces",
    "start": "323520",
    "end": "329759"
  },
  {
    "text": "you to go over the network to bring data and then maybe go again over the network",
    "start": "329759",
    "end": "335199"
  },
  {
    "text": "to bring some more data and that's why a lot of technologies like graphql",
    "start": "335199",
    "end": "341120"
  },
  {
    "text": "are very popular right now because it gives the client all the control okay so another thing that rest does",
    "start": "341120",
    "end": "348639"
  },
  {
    "text": "very well is forcing team collaboration if you have a",
    "start": "348639",
    "end": "354800"
  },
  {
    "text": "client application that is developed in your team and you have front-end developers you might go to them and say",
    "start": "354800",
    "end": "361120"
  },
  {
    "text": "hey add that field because it was added in the back end and so on but if you do",
    "start": "361120",
    "end": "366560"
  },
  {
    "text": "not own the client app what do you do you always need to go um and take care",
    "start": "366560",
    "end": "373680"
  },
  {
    "text": "of the breaking changes okay if you expose an api and that api is consumed by don't know who or whom or",
    "start": "373680",
    "end": "381680"
  },
  {
    "text": "what application every change that you made you need to make it with um",
    "start": "381680",
    "end": "389520"
  },
  {
    "text": "with the care because you don't need to break your consumers okay so um",
    "start": "389600",
    "end": "396160"
  },
  {
    "text": "this chattiness from the rest apis can easily be overridden or forgotten by",
    "start": "396160",
    "end": "401919"
  },
  {
    "text": "using remote procedure calls so remote procedure calls",
    "start": "401919",
    "end": "407039"
  },
  {
    "text": "it's a concept that's here from the 70s it's an old concept you know",
    "start": "407039",
    "end": "412720"
  },
  {
    "text": "these concepts have a tendency of getting back to the surface every once in a while",
    "start": "412720",
    "end": "419520"
  },
  {
    "text": "and basically a remote procedure called will make a call look local",
    "start": "419520",
    "end": "425840"
  },
  {
    "text": "you're acting you're you're calling over something and that's something looks to you as a developer as it's",
    "start": "425840",
    "end": "432720"
  },
  {
    "text": "part of the monolith okay so let's look at some code we have this",
    "start": "432720",
    "end": "438880"
  },
  {
    "text": "you have an order and you create an order for a specific request and then uh you need to process the",
    "start": "438880",
    "end": "445360"
  },
  {
    "text": "payment and if the payment is successful well you will need to arrange the shipping for that specific order if we",
    "start": "445360",
    "end": "452080"
  },
  {
    "text": "were to look at this everything seems to be part of the same application or at least",
    "start": "452080",
    "end": "458319"
  },
  {
    "text": "from the same abstraction of the application right but one thing that happens is",
    "start": "458319",
    "end": "464800"
  },
  {
    "text": "whenever you call a specific method there is another call involved and you",
    "start": "464800",
    "end": "470720"
  },
  {
    "text": "might have the tendency to abuse the the code looks local and you forget",
    "start": "470720",
    "end": "475840"
  },
  {
    "text": "the network and you tend to make additional additional calls okay when you have for example http",
    "start": "475840",
    "end": "482720"
  },
  {
    "text": "clients that make calls to different services those services are obviously",
    "start": "482720",
    "end": "489360"
  },
  {
    "text": "different applications and you make an http call over the network and you're more aware of that so rpc as a general",
    "start": "489360",
    "end": "497120"
  },
  {
    "text": "concept will make the code look local and it's easier for a developer to get started with",
    "start": "497120",
    "end": "503039"
  },
  {
    "text": "it has a caller method approach you do not need to instantiate the http client",
    "start": "503039",
    "end": "508560"
  },
  {
    "text": "get and read the stream and so on and so forth and well it's kind of prone to errors if",
    "start": "508560",
    "end": "514080"
  },
  {
    "text": "you're not careful enough but the goal of an rpc is to make the",
    "start": "514080",
    "end": "519440"
  },
  {
    "text": "network uh communication transparent like make you forget that is not that is",
    "start": "519440",
    "end": "525600"
  },
  {
    "text": "there so pretty much it will make two applications that are distributed behave",
    "start": "525600",
    "end": "532080"
  },
  {
    "text": "like a monolith for you the code will look like it's in the same solution like it's in the same",
    "start": "532080",
    "end": "538480"
  },
  {
    "text": "application okay so enough with the history",
    "start": "538480",
    "end": "544160"
  },
  {
    "text": "let's talk about grpc grpc started in 2001 as being an",
    "start": "544160",
    "end": "550320"
  },
  {
    "text": "internal project named stubby at google uh in 2005 they open sourced it and fast",
    "start": "550320",
    "end": "557839"
  },
  {
    "text": "forwarding in 2019 well we got it in dot net core as being",
    "start": "557839",
    "end": "564080"
  },
  {
    "text": "a first class citizen okay so what is grpc grpc it's a thing",
    "start": "564080",
    "end": "569839"
  },
  {
    "text": "that it's contract based you will need to create an interface definition",
    "start": "569839",
    "end": "575519"
  },
  {
    "text": "so you're gonna remember soap similar in this way with soap",
    "start": "575519",
    "end": "582480"
  },
  {
    "text": "but it will make you have no code references so if you'll have a solution",
    "start": "582480",
    "end": "588000"
  },
  {
    "text": "you all won't add add reference search for that project and so on so",
    "start": "588000",
    "end": "593760"
  },
  {
    "text": "no reference to separate projects and behind the scenes it will use http",
    "start": "593760",
    "end": "599040"
  },
  {
    "text": "2. wanted or not http 2 will be used and it because of",
    "start": "599040",
    "end": "605839"
  },
  {
    "text": "how http 2 is made it's way faster and it has an efficient protobuf",
    "start": "605839",
    "end": "611200"
  },
  {
    "text": "serialization which ends up with giving a smaller payload and of course it's available in many languages including c",
    "start": "611200",
    "end": "618240"
  },
  {
    "text": "plus loss what it does very well is called generation it generates code for us and",
    "start": "618240",
    "end": "624720"
  },
  {
    "text": "it's very nice because with the click of a button we get the code",
    "start": "624720",
    "end": "629760"
  },
  {
    "text": "okay so if we're to look at client server architecture and request from",
    "start": "629760",
    "end": "636399"
  },
  {
    "text": "http now if we introduce the proto the protofile becomes the the central point",
    "start": "636399",
    "end": "642480"
  },
  {
    "text": "of true so the client will know the protofile the server will know the protofile and",
    "start": "642480",
    "end": "647680"
  },
  {
    "text": "will expose methods okay so now let's have a look at the protofile",
    "start": "647680",
    "end": "653519"
  },
  {
    "text": "protofile it's a file simple with the extension.proto",
    "start": "653519",
    "end": "659600"
  },
  {
    "text": "that has a special syntax uh defined by uh by google where you define the",
    "start": "659600",
    "end": "664959"
  },
  {
    "text": "version of it uh the namespace the package that will be generated afterwards and after that you'll have",
    "start": "664959",
    "end": "672480"
  },
  {
    "text": "the name of the service and the methods that are exposed so in this case i want to say hey i have",
    "start": "672480",
    "end": "679200"
  },
  {
    "text": "a service that is called fibo and it has a method named compute fibonacci that",
    "start": "679200",
    "end": "685360"
  },
  {
    "text": "returns a fibonacci result and gets an input named a requested number well",
    "start": "685360",
    "end": "692959"
  },
  {
    "text": "in grpc you need also to define the representation of a request and of a",
    "start": "692959",
    "end": "699680"
  },
  {
    "text": "response in the traditional way so what we'll see here it's two",
    "start": "699680",
    "end": "706079"
  },
  {
    "text": "messages this is the way that is called in grpc messages and these messages",
    "start": "706079",
    "end": "711519"
  },
  {
    "text": "have properties in c sharp it will be translated as simple properties named",
    "start": "711519",
    "end": "717120"
  },
  {
    "text": "number and named result for the fibonacci result what you see in there",
    "start": "717120",
    "end": "722160"
  },
  {
    "text": "as an allocation equals one it's not an assignment it's the order of the field",
    "start": "722160",
    "end": "727920"
  },
  {
    "text": "because it has um binary representation okay",
    "start": "727920",
    "end": "733839"
  },
  {
    "text": "so what it does uh rpc very well is exposes four ways of working with data",
    "start": "733839",
    "end": "742720"
  },
  {
    "text": "and we're going to talk in depth about each one of them and also we're going to look at some code",
    "start": "742720",
    "end": "748959"
  },
  {
    "text": "so first of all first of all we have unary representations",
    "start": "748959",
    "end": "754240"
  },
  {
    "text": "uri means request response in a traditional way you issue a request kind of and you get",
    "start": "754240",
    "end": "760639"
  },
  {
    "text": "one response back it's one to one representation another way of method of working with",
    "start": "760639",
    "end": "766959"
  },
  {
    "text": "grpc is server streaming what happens in here is that the server will be able to",
    "start": "766959",
    "end": "772639"
  },
  {
    "text": "send several chunks of data over the same connection so it will have only one tcp connection and over that",
    "start": "772639",
    "end": "780320"
  },
  {
    "text": "the server will stream several several things i have demos for this so i'm gonna also",
    "start": "780320",
    "end": "785760"
  },
  {
    "text": "show you client streaming well the client sends several things to the server and gets",
    "start": "785760",
    "end": "791600"
  },
  {
    "text": "one response back and of course bi-directional which is a combination of the for the",
    "start": "791600",
    "end": "798240"
  },
  {
    "text": "previous two so let's have a look grpc unary if we",
    "start": "798240",
    "end": "803519"
  },
  {
    "text": "were to map this in a similar and traditional way of request response in http it will look like this so the",
    "start": "803519",
    "end": "810399"
  },
  {
    "text": "client issues a request the server receives the request and sends a response back",
    "start": "810399",
    "end": "817040"
  },
  {
    "text": "how it looks in terms of defining this in a service is i have an rpc method named compute",
    "start": "817040",
    "end": "824160"
  },
  {
    "text": "fibonacci receives a requested number type returns a fibonacci return type",
    "start": "824160",
    "end": "830959"
  },
  {
    "text": "so this is how unary looks in the code the second method",
    "start": "830959",
    "end": "836560"
  },
  {
    "text": "or server streaming mapped on http request the traditional",
    "start": "836560",
    "end": "842240"
  },
  {
    "text": "way we have okay the client issues the request but gets back several chunks of",
    "start": "842240",
    "end": "849199"
  },
  {
    "text": "responses okay how it looks similar to the unity one except the fact",
    "start": "849199",
    "end": "855680"
  },
  {
    "text": "that it has the the stream part as a keyword in the result",
    "start": "855680",
    "end": "860800"
  },
  {
    "text": "which means that basically it will send back oops sorry",
    "start": "860800",
    "end": "867040"
  },
  {
    "text": "it will send back a stream of this type so several of those",
    "start": "867040",
    "end": "872560"
  },
  {
    "text": "client streaming again similar a request",
    "start": "872560",
    "end": "878320"
  },
  {
    "text": "with several chunks over one tcp connection and one response back so this is how it",
    "start": "878320",
    "end": "884959"
  },
  {
    "text": "it gets mapped over a traditional sim uh http request",
    "start": "884959",
    "end": "891120"
  },
  {
    "text": "okay this scenario is super nice for example when you upload things if you have scenarios like uploading large",
    "start": "891120",
    "end": "898000"
  },
  {
    "text": "files you can chunk them and send them over one tcp connection",
    "start": "898000",
    "end": "903760"
  },
  {
    "text": "getting data from the sensors maybe something that sends several data",
    "start": "903839",
    "end": "909920"
  },
  {
    "text": "somewhere in the cloud maybe so to collect data and bi-directional streaming",
    "start": "909920",
    "end": "916880"
  },
  {
    "text": "a combination of the two so the client sends several chunks to the server and will get several chunks",
    "start": "916880",
    "end": "923760"
  },
  {
    "text": "back from the server over one connection how it looks well",
    "start": "923760",
    "end": "929120"
  },
  {
    "text": "by having stream keyword added at the input and stream",
    "start": "929120",
    "end": "934160"
  },
  {
    "text": "keyword added at the result okay so big picture it's kind of that's it",
    "start": "934160",
    "end": "941600"
  },
  {
    "text": "but in dos net six there are a few other grpc concepts",
    "start": "941600",
    "end": "946880"
  },
  {
    "text": "that we kind of need to talk grpc internals",
    "start": "946880",
    "end": "952160"
  },
  {
    "text": "status codes we all know status codes right i know there are kind of 63 of them we use like maybe 10 in a",
    "start": "952160",
    "end": "960399"
  },
  {
    "text": "good manner but status codes represent the actual status code of that request okay",
    "start": "960399",
    "end": "967440"
  },
  {
    "text": "well in grpc that status code that we all know it's",
    "start": "967440",
    "end": "973360"
  },
  {
    "text": "not the same grpc will have its own status codes that",
    "start": "973360",
    "end": "979040"
  },
  {
    "text": "it's up to you to map to the response for example you might",
    "start": "979040",
    "end": "984639"
  },
  {
    "text": "get 200 okay over the entire response but for the",
    "start": "984639",
    "end": "989920"
  },
  {
    "text": "specific grpc request you might get an exception it's still a valid uh",
    "start": "989920",
    "end": "996639"
  },
  {
    "text": "scenario rpc exception is the thing that you need to catch every time you um work with",
    "start": "996639",
    "end": "1003360"
  },
  {
    "text": "grpc and you expect something bad to happen and from that rpc exception you need to filter out",
    "start": "1003360",
    "end": "1011199"
  },
  {
    "text": "grpc status code that are different from the status codes you all know",
    "start": "1011199",
    "end": "1017920"
  },
  {
    "text": "interceptors interceptors are grpc concepts",
    "start": "1017920",
    "end": "1022959"
  },
  {
    "text": "that will allow you to interact with that specific grpc request uh in a manner that",
    "start": "1022959",
    "end": "1030000"
  },
  {
    "text": "you can inject or i don't know hydrate the the responses it's like injecting",
    "start": "1030000",
    "end": "1035678"
  },
  {
    "text": "yourself in the pipeline for that specific grpc request",
    "start": "1035679",
    "end": "1040720"
  },
  {
    "text": "and you will have four uh types of interceptor specific to each of those",
    "start": "1040720",
    "end": "1046160"
  },
  {
    "text": "methods so unary server streaming client streaming and bi-directional",
    "start": "1046160",
    "end": "1051360"
  },
  {
    "text": "so if you have scenarios where you need to add a header maybe you can add",
    "start": "1051360",
    "end": "1057360"
  },
  {
    "text": "an interceptor and that interceptor will be called whenever your grpc called",
    "start": "1057360",
    "end": "1063200"
  },
  {
    "text": "will be made request headers where the request headers are",
    "start": "1063200",
    "end": "1068640"
  },
  {
    "text": "simply headers from the classical http response headers the same",
    "start": "1068640",
    "end": "1075120"
  },
  {
    "text": "you can add some extra bits in there as being key value pairs if you want to transport extra information",
    "start": "1075120",
    "end": "1081919"
  },
  {
    "text": "and something that is kinda new it did response trailers",
    "start": "1081919",
    "end": "1087440"
  },
  {
    "text": "so you have two kind of things that you can add on the response a response trailer is",
    "start": "1087440",
    "end": "1094960"
  },
  {
    "text": "something that is sent by the server at the end of the the response it's like an additional set",
    "start": "1094960",
    "end": "1100720"
  },
  {
    "text": "of headers because the way of http 2 is made",
    "start": "1100720",
    "end": "1106480"
  },
  {
    "text": "okay so what we can tweak in grpc service or in grpc in general in dotnet",
    "start": "1106480",
    "end": "1114080"
  },
  {
    "text": "when we create a project in services uh the middleware has a lot of things that can",
    "start": "1114080",
    "end": "1120559"
  },
  {
    "text": "be uh fine-tuned one of these are enable detailed errors if you want detailed",
    "start": "1120559",
    "end": "1128160"
  },
  {
    "text": "errors regarding this grpc you can set that back to true",
    "start": "1128160",
    "end": "1134320"
  },
  {
    "text": "also you can limit or increase the limit uh regarding the message size so for",
    "start": "1134320",
    "end": "1141120"
  },
  {
    "text": "each request you might need scenarios where you say hey i don't need more than one megabyte for each request",
    "start": "1141120",
    "end": "1148160"
  },
  {
    "text": "and you will be able to modify and add it here",
    "start": "1148160",
    "end": "1153200"
  },
  {
    "text": "maybe uh you need some compression it's always a good",
    "start": "1153200",
    "end": "1158799"
  },
  {
    "text": "scenario to have compression to the response so you can add this here",
    "start": "1158799",
    "end": "1164160"
  },
  {
    "text": "you can have different compression levels you can have optimal or you can look into that",
    "start": "1164160",
    "end": "1171200"
  },
  {
    "text": "error in there you can specify what is the compression algorithm you can have gzip or whatever",
    "start": "1171200",
    "end": "1179280"
  },
  {
    "text": "it's suitable for your scenario and also if you want to create your own compression provider",
    "start": "1179280",
    "end": "1185600"
  },
  {
    "text": "you can go ahead and plug that in you can create an eye compression",
    "start": "1185600",
    "end": "1191280"
  },
  {
    "text": "provider you inherit that you implement the interface and you implement the logic yourself or you use something that",
    "start": "1191280",
    "end": "1198960"
  },
  {
    "text": "is existing and also you have a way of adding the interceptors in there so create your",
    "start": "1198960",
    "end": "1206240"
  },
  {
    "text": "interceptor add it in there security related i'm not gonna talk too much um i'm just gonna specify a few",
    "start": "1206240",
    "end": "1213760"
  },
  {
    "text": "things what is supported so it's supported in two places at the channel level and",
    "start": "1213760",
    "end": "1221600"
  },
  {
    "text": "add the connection level and everything that we know from",
    "start": "1221600",
    "end": "1226720"
  },
  {
    "text": "apis you can add them on uh in here so enough with the uh the talk",
    "start": "1226720",
    "end": "1233840"
  },
  {
    "text": "let's see some code and first of all i'm gonna show you how a project looks",
    "start": "1233840",
    "end": "1240960"
  },
  {
    "text": "okay so how do you create a new project go ahead",
    "start": "1240960",
    "end": "1247399"
  },
  {
    "text": "okay so um using the specific client",
    "start": "1257760",
    "end": "1264640"
  },
  {
    "text": "you sorry i need to repeat the question so the question is if you enable a specific",
    "start": "1264640",
    "end": "1270159"
  },
  {
    "text": "compression level how do you make a consumer basically understand that specific compression",
    "start": "1270159",
    "end": "1277039"
  },
  {
    "text": "you need to also add this to the client to be able to match those",
    "start": "1277039",
    "end": "1282240"
  },
  {
    "text": "and you're able to do to do that using grpc net client so",
    "start": "1282240",
    "end": "1288000"
  },
  {
    "text": "first of all if we're talking about grpc we're still talking about the kind of api right and that api still has",
    "start": "1288000",
    "end": "1295440"
  },
  {
    "text": "something that we we know so i'm going to start by showing you a proto file i hope the font is big",
    "start": "1295440",
    "end": "1302720"
  },
  {
    "text": "enough um to be seen from behind of the room",
    "start": "1302720",
    "end": "1308080"
  },
  {
    "text": "so what i have here is a service it's interface definition language this",
    "start": "1308080",
    "end": "1314240"
  },
  {
    "text": "is the it's similar to the wizzle if you remember from the soap you specify it in here and then i have",
    "start": "1314240",
    "end": "1322240"
  },
  {
    "text": "four methods specified one is unary server streaming client streaming and",
    "start": "1322240",
    "end": "1328400"
  },
  {
    "text": "bi-directional these are very similar in terms of the difference is the this keyword",
    "start": "1328400",
    "end": "1335440"
  },
  {
    "text": "stream okay so this streams the response and this streams the",
    "start": "1335440",
    "end": "1340960"
  },
  {
    "text": "input and the streams the input and the output cool um i named i created two messages",
    "start": "1340960",
    "end": "1348000"
  },
  {
    "text": "named i thought it would be easier to understand by mapping uh to what is the",
    "start": "1348000",
    "end": "1353200"
  },
  {
    "text": "request and response in http uh for a web api so i named my message",
    "start": "1353200",
    "end": "1359120"
  },
  {
    "text": "request and it has a field name content value and the response i named it a response",
    "start": "1359120",
    "end": "1365440"
  },
  {
    "text": "and it has a message okay so this is the protofile the cool thing about the",
    "start": "1365440",
    "end": "1370640"
  },
  {
    "text": "protofile is that it will stay on the server and after you build this it will",
    "start": "1370640",
    "end": "1376559"
  },
  {
    "text": "generate a stub for you so it will generate something that you will be able to override so each of",
    "start": "1376559",
    "end": "1384080"
  },
  {
    "text": "those four methods you will need to specify uh an override and to give an actual implementation",
    "start": "1384080",
    "end": "1390480"
  },
  {
    "text": "okay so how it looks uh the first method the unary one the unity one uh receives a request that",
    "start": "1390480",
    "end": "1398559"
  },
  {
    "text": "message that has only one field and it has an additional parameter named server",
    "start": "1398559",
    "end": "1403840"
  },
  {
    "text": "call context this context is similar to http context it gives you access to the",
    "start": "1403840",
    "end": "1410480"
  },
  {
    "text": "actual thing that is sent so from here you will be able to do something like that",
    "start": "1410480",
    "end": "1417840"
  },
  {
    "text": "and extract the actual http context that we know from web api and also from there you can",
    "start": "1419039",
    "end": "1426080"
  },
  {
    "text": "extract information about the user if you have some authentication added in there and get the claims for example if",
    "start": "1426080",
    "end": "1433440"
  },
  {
    "text": "you have something implemented or maybe you want to have",
    "start": "1433440",
    "end": "1438480"
  },
  {
    "text": "the client certificate that is also set in the r or maybe",
    "start": "1438480",
    "end": "1443520"
  },
  {
    "text": "you also need to get the request headers and those request headers are",
    "start": "1443520",
    "end": "1449200"
  },
  {
    "text": "the actual http request headers so not specific to the grpc thing",
    "start": "1449200",
    "end": "1454799"
  },
  {
    "text": "so context you get that you access that you have request headers and you pass the key that you want to to extract from",
    "start": "1454799",
    "end": "1461360"
  },
  {
    "text": "there key variable value pair nothing complicated",
    "start": "1461360",
    "end": "1466640"
  },
  {
    "text": "also from here you can do something else you can add response trailers remember the thing",
    "start": "1466640",
    "end": "1473279"
  },
  {
    "text": "that is specific to grpc that is sent at the end of the body of the request named trailer",
    "start": "1473279",
    "end": "1479440"
  },
  {
    "text": "so how you add those uh those are added just by using the context so the current call context",
    "start": "1479440",
    "end": "1486640"
  },
  {
    "text": "response trailers and you have this thingy that is called metadata entry",
    "start": "1486640",
    "end": "1491840"
  },
  {
    "text": "which is nothing more than a key value pair you have the key and you have the pair and that's it",
    "start": "1491840",
    "end": "1498480"
  },
  {
    "text": "okay so from here it's your job to implement what is actually needed in that uh that",
    "start": "1498480",
    "end": "1505120"
  },
  {
    "text": "method okay so i'm gonna show you a demo so in here in this window",
    "start": "1505120",
    "end": "1512000"
  },
  {
    "text": "you we will have a server that runs so i'm gonna do dotnet run",
    "start": "1512000",
    "end": "1518799"
  },
  {
    "text": "and this server will hook to a specific port and wait for the",
    "start": "1518799",
    "end": "1524799"
  },
  {
    "text": "quests so you see it's in local host 5000 and it waits for requests",
    "start": "1524799",
    "end": "1531840"
  },
  {
    "text": "and in this other side i'm going to have pretty much the same thing only that is the client that will",
    "start": "1531840",
    "end": "1538880"
  },
  {
    "text": "call this the specific method so i will also show you the code for this",
    "start": "1538880",
    "end": "1545679"
  },
  {
    "text": "the code will be on github and you'll be able to look around it so what i have",
    "start": "1545679",
    "end": "1551200"
  },
  {
    "text": "here is a set of console apps is the easiest way of displaying things",
    "start": "1551200",
    "end": "1557360"
  },
  {
    "text": "so unary console app is a program cs that uses",
    "start": "1557360",
    "end": "1563919"
  },
  {
    "text": "nothing else nothing more than a few packages and those packages are grpc and",
    "start": "1563919",
    "end": "1570720"
  },
  {
    "text": "grpc net client and asp.net core because i want to show you two two types of using things",
    "start": "1570720",
    "end": "1577840"
  },
  {
    "text": "for example when you're talking about grpc first you need to create a channel so a",
    "start": "1577840",
    "end": "1584320"
  },
  {
    "text": "channel is a thing that opens a tcp connection and from",
    "start": "1584320",
    "end": "1590320"
  },
  {
    "text": "that channel several pieces of data can travel back and forth so",
    "start": "1590320",
    "end": "1595600"
  },
  {
    "text": "with a channel you can talk with the server several times on the same tcp",
    "start": "1595600",
    "end": "1600720"
  },
  {
    "text": "connection so it's like okay open the uh the communication way once and then chat",
    "start": "1600720",
    "end": "1606720"
  },
  {
    "text": "whenever you when uh you want so this is uh the implementation for",
    "start": "1606720",
    "end": "1612960"
  },
  {
    "text": "by using grpc net client so this package is not done by microsoft you find it in",
    "start": "1612960",
    "end": "1619120"
  },
  {
    "text": "nuget package manager and it has a sort of different syntax but in the end it does the same you specify hey i need a",
    "start": "1619120",
    "end": "1626880"
  },
  {
    "text": "channel for this address and this channel has a few options",
    "start": "1626880",
    "end": "1632640"
  },
  {
    "text": "and those options are regarding credential the most common example you'll find is this insecure",
    "start": "1632640",
    "end": "1639279"
  },
  {
    "text": "thing you need to add it to be able to actually make the the request the grpc request otherwise you will need to add",
    "start": "1639279",
    "end": "1646240"
  },
  {
    "text": "there whatever the solution is jvt or any other kind of authentication",
    "start": "1646240",
    "end": "1652640"
  },
  {
    "text": "it's here where you add that okay so from here uh you need to well",
    "start": "1652640",
    "end": "1658320"
  },
  {
    "text": "instantiate the client i want to specify that here i didn't",
    "start": "1658320",
    "end": "1663600"
  },
  {
    "text": "implement the greater client it was generated for me the only thing that i implemented was",
    "start": "1663600",
    "end": "1668960"
  },
  {
    "text": "the actual greater service that i over over uh write the where i",
    "start": "1668960",
    "end": "1674480"
  },
  {
    "text": "override the methods but here the greater and greater client",
    "start": "1674480",
    "end": "1680159"
  },
  {
    "text": "it's made for me okay what you can have in here is just okay instantiate the",
    "start": "1680159",
    "end": "1685679"
  },
  {
    "text": "request you'll need to pass this request in your method call",
    "start": "1685679",
    "end": "1690960"
  },
  {
    "text": "okay so you have stay async hello pass the request message you cannot have empty",
    "start": "1690960",
    "end": "1696880"
  },
  {
    "text": "here there or null you need to pass something with a specific uh field",
    "start": "1696880",
    "end": "1702720"
  },
  {
    "text": "and in here you you are able to have a few things for example you for you can specify a",
    "start": "1702720",
    "end": "1709440"
  },
  {
    "text": "deadline for example if um i'm not getting the the response back in",
    "start": "1709440",
    "end": "1715840"
  },
  {
    "text": "five seconds or milliseconds just consider this as being okay expired",
    "start": "1715840",
    "end": "1720880"
  },
  {
    "text": "don't do it anymore or maybe you can uh you need a cancellation token after a while if",
    "start": "1720880",
    "end": "1727520"
  },
  {
    "text": "something happens you will be able to cancel that request okay so this is the",
    "start": "1727520",
    "end": "1735360"
  },
  {
    "text": "the complicated version the complicated overload but in here i'm gonna show you the",
    "start": "1735360",
    "end": "1741039"
  },
  {
    "text": "the easiest one okay so i'm gonna open the server it's still listening",
    "start": "1741039",
    "end": "1747279"
  },
  {
    "text": "uh any here i'm gonna do a dotnet run to make the client make an actual",
    "start": "1747279",
    "end": "1753360"
  },
  {
    "text": "request okay so let's see what happened after dollar tron i sent a message hello",
    "start": "1753360",
    "end": "1761120"
  },
  {
    "text": "world that's the console and i'm sending ndc",
    "start": "1761120",
    "end": "1767279"
  },
  {
    "text": "and what i'm getting back is hello back with ndc from localhost 500",
    "start": "1767279",
    "end": "1773200"
  },
  {
    "text": "5000 okay so let's see on the server side what happened on the server side",
    "start": "1773200",
    "end": "1779440"
  },
  {
    "text": "you'll see that it's an http 2 request made and it's a post request",
    "start": "1779440",
    "end": "1785679"
  },
  {
    "text": "in grpc you do not have verbs you have post and with posts it's what you get",
    "start": "1785679",
    "end": "1792000"
  },
  {
    "text": "so if you're talking about caching or anything like that you can forget it so",
    "start": "1792000",
    "end": "1797520"
  },
  {
    "text": "everything gets a post even if you get data it's still a post uh and if you were to look at the uri",
    "start": "1797520",
    "end": "1805360"
  },
  {
    "text": "you see that it's localhost port number greet greater say hello",
    "start": "1805360",
    "end": "1810480"
  },
  {
    "text": "and that say hello it's basically the method that was called on the server side",
    "start": "1810480",
    "end": "1816080"
  },
  {
    "text": "uh what do you get is application grpc 200 is the state status code and the",
    "start": "1816080",
    "end": "1822480"
  },
  {
    "text": "request took that amount of time okay so if i were to run this again",
    "start": "1822480",
    "end": "1827760"
  },
  {
    "text": "you'll see another thing happening on the server and another response back okay",
    "start": "1827760",
    "end": "1835039"
  },
  {
    "text": "in the other slide uh let's see i didn't show you but if i look into the",
    "start": "1835039",
    "end": "1841840"
  },
  {
    "text": "dependency part i'm gonna try to zoom in i do not have a reference",
    "start": "1841840",
    "end": "1847279"
  },
  {
    "text": "towards something towards the service or towards anything the only thing that we have",
    "start": "1847279",
    "end": "1852799"
  },
  {
    "text": "here is a reference by editing the project file you need to",
    "start": "1852799",
    "end": "1858720"
  },
  {
    "text": "add this an item group where you can specify hey include that",
    "start": "1858720",
    "end": "1865360"
  },
  {
    "text": "protofile that you want to do um to use",
    "start": "1865360",
    "end": "1870640"
  },
  {
    "text": "and grpc services act like being a client in here you have two options uh client or",
    "start": "1870640",
    "end": "1877440"
  },
  {
    "text": "server and based on that he knows okay this is the client or this is the server",
    "start": "1877440",
    "end": "1882960"
  },
  {
    "text": "okay so the path can be a relative or it can be somewhere",
    "start": "1882960",
    "end": "1889279"
  },
  {
    "text": "where every other project can have access and in there",
    "start": "1889279",
    "end": "1894559"
  },
  {
    "text": "so this is the way of not having a project reference so you thread this as",
    "start": "1894559",
    "end": "1899919"
  },
  {
    "text": "being independent but that independence is somehow apparent",
    "start": "1899919",
    "end": "1904960"
  },
  {
    "text": "because you still have the protofile that you will need to take care of what i did here is to navigate to the",
    "start": "1904960",
    "end": "1911039"
  },
  {
    "text": "server protos i mean in the other project in here but very well i could have had an upper",
    "start": "1911039",
    "end": "1917600"
  },
  {
    "text": "level folder where i could have pointed the every other project",
    "start": "1917600",
    "end": "1922799"
  },
  {
    "text": "okay so this is what you need to have a client okay so and the other part let's see the",
    "start": "1922799",
    "end": "1931360"
  },
  {
    "text": "client streaming how it looks the client streaming it's rather similar",
    "start": "1931360",
    "end": "1937360"
  },
  {
    "text": "i'm going to modify this because it's 5000. uh it's still create a channel have it",
    "start": "1937360",
    "end": "1943600"
  },
  {
    "text": "as being insecure create a client and then call the method",
    "start": "1943600",
    "end": "1949039"
  },
  {
    "text": "i'm going to also modify this because it's too large call the method named client stream that",
    "start": "1949039",
    "end": "1955200"
  },
  {
    "text": "client stream it has no apparent logic it has a for loop that goes to this value and simply",
    "start": "1955200",
    "end": "1962640"
  },
  {
    "text": "writes the value makes the request with i okay and what we're having to",
    "start": "1962640",
    "end": "1969200"
  },
  {
    "text": "have here is the response we need to sort of",
    "start": "1969200",
    "end": "1974240"
  },
  {
    "text": "wait and see that the the request uh is done okay so what i'm gonna do it's still",
    "start": "1974240",
    "end": "1981039"
  },
  {
    "text": "here the server wait for the request and i'm gonna have another console app",
    "start": "1981039",
    "end": "1987760"
  },
  {
    "text": "in the right hand side does not run that will issue requests",
    "start": "1987760",
    "end": "1994240"
  },
  {
    "text": "so because it's a client streaming cool failed to connect to all the",
    "start": "1994240",
    "end": "1999919"
  },
  {
    "text": "addresses let's see 5000 it works i didn't save",
    "start": "1999919",
    "end": "2006960"
  },
  {
    "text": "i'm gonna show you also how you can specify a range of",
    "start": "2008640",
    "end": "2014720"
  },
  {
    "text": "ports to connect so clear screen run",
    "start": "2014720",
    "end": "2021200"
  },
  {
    "text": "so you see on the server you get uh values and several of them so which",
    "start": "2022240",
    "end": "2027919"
  },
  {
    "text": "means that the client sends things it's one tcp connection in there and it sends a lot",
    "start": "2027919",
    "end": "2033440"
  },
  {
    "text": "of things what you can see here is the method client stream that was called 200 okay",
    "start": "2033440",
    "end": "2040000"
  },
  {
    "text": "as a http status code and application grpc okay and here the the response",
    "start": "2040000",
    "end": "2048158"
  },
  {
    "text": "from to the client was the last i that was sent to the server okay so this is",
    "start": "2048159",
    "end": "2053280"
  },
  {
    "text": "what's received as next value cool the next part uh server streaming",
    "start": "2053280",
    "end": "2061040"
  },
  {
    "text": "i'm gonna use the same approach and then dig deeper",
    "start": "2061040",
    "end": "2066158"
  },
  {
    "text": "but first i'm gonna show you something regarding the rpc exception that i talked about",
    "start": "2066159",
    "end": "2071839"
  },
  {
    "text": "so in case something happens you have the rpc exception that you can catch",
    "start": "2071839",
    "end": "2077760"
  },
  {
    "text": "and you can treat it differently by using by filtering the the status",
    "start": "2077760",
    "end": "2082960"
  },
  {
    "text": "code and remember that status code it's not http status code it's",
    "start": "2082960",
    "end": "2088480"
  },
  {
    "text": "related to grpc and if we were to look it here we have aborted already exists",
    "start": "2088480",
    "end": "2094560"
  },
  {
    "text": "canceled data loss deadline exceeded invalid argument out",
    "start": "2094560",
    "end": "2099760"
  },
  {
    "text": "of range permission denied on a dedicated unavailable and unimplemented",
    "start": "2099760",
    "end": "2105599"
  },
  {
    "text": "these are not status codes but they're specific to grpc",
    "start": "2105599",
    "end": "2110800"
  },
  {
    "text": "okay so based on that you can also throw rpc exception with the specific grpc",
    "start": "2110800",
    "end": "2116240"
  },
  {
    "text": "status code to be able to tell which is which okay",
    "start": "2116240",
    "end": "2122079"
  },
  {
    "text": "back to the server streaming uh the approach is the same",
    "start": "2122079",
    "end": "2127359"
  },
  {
    "text": "but this way 5000 to make sure it works",
    "start": "2127359",
    "end": "2134160"
  },
  {
    "text": "you send basically several responses to the client but the client is still the one that",
    "start": "2134800",
    "end": "2140960"
  },
  {
    "text": "needs to instantiate the request and here i'm gonna show you the the trailer values",
    "start": "2140960",
    "end": "2146400"
  },
  {
    "text": "okay same when something uh happens you can write something in",
    "start": "2146400",
    "end": "2151520"
  },
  {
    "text": "console or log or whatever is the case and it's still the same server is",
    "start": "2151520",
    "end": "2158000"
  },
  {
    "text": "listening and i'm gonna run the client",
    "start": "2158000",
    "end": "2163280"
  },
  {
    "text": "dotnet run",
    "start": "2163280",
    "end": "2167520"
  },
  {
    "text": "and you see the client streaming sends stuff to the uh to the to the server",
    "start": "2169119",
    "end": "2175599"
  },
  {
    "text": "you see server streams and also the client found some trailer values",
    "start": "2175599",
    "end": "2181200"
  },
  {
    "text": "key value pairs sent at the end of the response",
    "start": "2181200",
    "end": "2186480"
  },
  {
    "text": "okay bi-directional it's similar",
    "start": "2186480",
    "end": "2191920"
  },
  {
    "text": "okay we're sending but at the same time we're also",
    "start": "2192960",
    "end": "2199119"
  },
  {
    "text": "writing things the same approach server is listening and bi-directional",
    "start": "2199119",
    "end": "2205280"
  },
  {
    "text": "which does not run let me make sure i have the right port in there",
    "start": "2205280",
    "end": "2211040"
  },
  {
    "text": "yep and this and this",
    "start": "2211040",
    "end": "2216400"
  },
  {
    "text": "uh the order is not guaranteed okay so i'm sending the same uh",
    "start": "2221760",
    "end": "2226839"
  },
  {
    "text": "i until 10 in the form loop and i receive the messages with i back",
    "start": "2226839",
    "end": "2232560"
  },
  {
    "text": "okay so this is how it works if you have a specific scenario for this go ahead and",
    "start": "2232560",
    "end": "2238880"
  },
  {
    "text": "use it it's very performant and we're going to talk",
    "start": "2238880",
    "end": "2245200"
  },
  {
    "text": "a bit about what else we have in grpc in dos net 6",
    "start": "2245200",
    "end": "2251040"
  },
  {
    "text": "because we have a lot of things that are pretty awesome out of the box so why use",
    "start": "2251040",
    "end": "2256240"
  },
  {
    "text": "grpc i also have another demo for that benefits well performance in slides if you have",
    "start": "2256240",
    "end": "2262880"
  },
  {
    "text": "scenarios where you have an http client or rest api that talks with another",
    "start": "2262880",
    "end": "2268640"
  },
  {
    "text": "server point-to-point communication then well why not use something that is way",
    "start": "2268640",
    "end": "2273839"
  },
  {
    "text": "performant okay allows you to have polyglot environments if you have",
    "start": "2273839",
    "end": "2280000"
  },
  {
    "text": "go or any other language you can also use grpc to have a binary communication between them",
    "start": "2280000",
    "end": "2286160"
  },
  {
    "text": "it has low network usage because the response is way smaller",
    "start": "2286160",
    "end": "2291200"
  },
  {
    "text": "useful to point to point communication and it has multiple calls over a single",
    "start": "2291200",
    "end": "2297599"
  },
  {
    "text": "tcp connection which is i think uh one big benefit so it's contro truck clock base smaller",
    "start": "2297599",
    "end": "2304800"
  },
  {
    "text": "payloads it's way faster and it's out of the box and if the browser supports it",
    "start": "2304800",
    "end": "2310720"
  },
  {
    "text": "and we have senior server to server why not use it uh streaming types",
    "start": "2310720",
    "end": "2316880"
  },
  {
    "text": "dot net six and also it can be configured to run with http 3. i don't know about you but",
    "start": "2316880",
    "end": "2323680"
  },
  {
    "text": "i'm just getting starting with http 2 and they're talking about http 3",
    "start": "2323680",
    "end": "2329200"
  },
  {
    "text": "and i feel like it's kind of getting ahead of me so what does grpc",
    "start": "2329200",
    "end": "2335760"
  },
  {
    "text": "does awesome in dotnet6 well how about this out of the box without",
    "start": "2335760",
    "end": "2341440"
  },
  {
    "text": "installing uh additional things it does transcend fault handling",
    "start": "2341440",
    "end": "2346480"
  },
  {
    "text": "uh you can configure uh some things like",
    "start": "2346480",
    "end": "2352160"
  },
  {
    "text": "how to behave in case of network failures for example",
    "start": "2352160",
    "end": "2358880"
  },
  {
    "text": "you can have something like this you can't name your default policy or use",
    "start": "2358880",
    "end": "2364079"
  },
  {
    "text": "the default name you can configure the maximum attempts",
    "start": "2364079",
    "end": "2369359"
  },
  {
    "text": "you can say hey when do you back off already trying",
    "start": "2369359",
    "end": "2375520"
  },
  {
    "text": "maximum back off on how many times seconds multipliers and status codes so",
    "start": "2375520",
    "end": "2383200"
  },
  {
    "text": "basically you tell this hey when you try to apply a retry policy when you encounter",
    "start": "2383200",
    "end": "2389920"
  },
  {
    "text": "this status code and this status code is the one from grpc",
    "start": "2389920",
    "end": "2395040"
  },
  {
    "text": "also you have another option of having hedging policy you can define that",
    "start": "2395040",
    "end": "2400800"
  },
  {
    "text": "advance things from transient fault handling",
    "start": "2400800",
    "end": "2405839"
  },
  {
    "text": "and also you can work this out also what you can",
    "start": "2405839",
    "end": "2411599"
  },
  {
    "text": "do is define this and from this you can also load balance which is the thing that i",
    "start": "2411599",
    "end": "2419119"
  },
  {
    "text": "really uh tried and it's it's very nice uh client side load balancing out of the",
    "start": "2419119",
    "end": "2424640"
  },
  {
    "text": "box i mean you'll specify a range of addresses or dns",
    "start": "2424640",
    "end": "2430240"
  },
  {
    "text": "and it will try to connect based on the policy you you specify",
    "start": "2430240",
    "end": "2435680"
  },
  {
    "text": "uh on a server or another server for example you can have a dns a resolver factory or",
    "start": "2435680",
    "end": "2442640"
  },
  {
    "text": "a static one if you know the ports and you have two kind of policies like",
    "start": "2442640",
    "end": "2448000"
  },
  {
    "text": "pick first or round robin or why not you can implement your own it's very very easy to do that so i'm",
    "start": "2448000",
    "end": "2454960"
  },
  {
    "text": "going to show you this so i have the server running i'm going to have",
    "start": "2454960",
    "end": "2461839"
  },
  {
    "text": "another server running uh okay just a second",
    "start": "2461839",
    "end": "2468660"
  },
  {
    "text": "[Music] i'm gonna copy because i didn't want to",
    "start": "2468660",
    "end": "2477040"
  },
  {
    "text": "lose this so what will happen is i will have two",
    "start": "2477040",
    "end": "2483200"
  },
  {
    "text": "instances to simulate like i know a kubernetes environment when it's on port 5000 and",
    "start": "2483200",
    "end": "2489200"
  },
  {
    "text": "one it runs on 5002 okay so to server i'm gonna leave this",
    "start": "2489200",
    "end": "2494720"
  },
  {
    "text": "here and in here i have a new one i recall so a simple",
    "start": "2494720",
    "end": "2501760"
  },
  {
    "text": "request dotnet",
    "start": "2501760",
    "end": "2506800"
  },
  {
    "text": "run and i'm gonna run this several times to show you that uh once it gets it from uh one port and",
    "start": "2506800",
    "end": "2514000"
  },
  {
    "text": "once it gets it from the second one without me doing anything special",
    "start": "2514000",
    "end": "2520079"
  },
  {
    "text": "so still five thousand see",
    "start": "2520160",
    "end": "2525520"
  },
  {
    "text": "so 5000 and the last one",
    "start": "2525520",
    "end": "2530640"
  },
  {
    "text": "so how i did this is to simply create a static resolver factory",
    "start": "2530640",
    "end": "2538000"
  },
  {
    "text": "by adding an array of balancer addresses i i have localhost 5000 and localhost",
    "start": "2538000",
    "end": "2544839"
  },
  {
    "text": "5002. so this i know the ports and this is how i'm specifying it",
    "start": "2544839",
    "end": "2550640"
  },
  {
    "text": "and then i'm gonna register and the dependency injection the the factory and then i'm gonna",
    "start": "2550640",
    "end": "2558000"
  },
  {
    "text": "create okay for the address i have a static policy namely my example host",
    "start": "2558000",
    "end": "2565119"
  },
  {
    "text": "it's insecure because i'm not adding anything related to the security",
    "start": "2565119",
    "end": "2570240"
  },
  {
    "text": "and as a policy use round robin and of course set that on the service",
    "start": "2570240",
    "end": "2577040"
  },
  {
    "text": "providers but the important bit it's over here you can specify",
    "start": "2577040",
    "end": "2582480"
  },
  {
    "text": "which are the ports if you know the ports or if you have a dns you can have",
    "start": "2582480",
    "end": "2588000"
  },
  {
    "text": "something like this you can add the dns resolver factory and you can",
    "start": "2588000",
    "end": "2594240"
  },
  {
    "text": "leave that to to be refreshed every other time i don't know so if you have",
    "start": "2594240",
    "end": "2599760"
  },
  {
    "text": "kubernetes for example and you have other posts pods spinning up",
    "start": "2599760",
    "end": "2604960"
  },
  {
    "text": "you can connect to those automatically without you i don't know tweaking things so instead of static here will be added",
    "start": "2604960",
    "end": "2612319"
  },
  {
    "text": "uh dns and it will know how to to connect to that",
    "start": "2612319",
    "end": "2617680"
  },
  {
    "text": "so this is what out of the box net 6grpc does this thing is pretty new",
    "start": "2617680",
    "end": "2625440"
  },
  {
    "text": "and i thought it's awesome that they implement that i'm thinking about blazer scenarios for",
    "start": "2625440",
    "end": "2631920"
  },
  {
    "text": "example how cool it is to have you know blazer instances running uh",
    "start": "2631920",
    "end": "2637200"
  },
  {
    "text": "in kubernetes or whatever and to spin new instances and let the service connect to those",
    "start": "2637200",
    "end": "2643599"
  },
  {
    "text": "okay so policies that you can configure",
    "start": "2643599",
    "end": "2650240"
  },
  {
    "text": "pick first round-robin implement your own if that's the case so pretty cool so far",
    "start": "2650240",
    "end": "2656240"
  },
  {
    "text": "grpc because for example when someone starts with microservices they",
    "start": "2656240",
    "end": "2662000"
  },
  {
    "text": "first start on doing http client calls to get data from one side to another we're talking about microservice",
    "start": "2662000",
    "end": "2668480"
  },
  {
    "text": "architecture as being the silver bullet everyone wants to work with microservices microservices but",
    "start": "2668480",
    "end": "2674319"
  },
  {
    "text": "sometimes those microservices add overhead and we need to manage that overhead",
    "start": "2674319",
    "end": "2680720"
  },
  {
    "text": "so until you while you're young with microservices architecture",
    "start": "2680720",
    "end": "2686800"
  },
  {
    "text": "you do http client calls i did that until i moved to service buses or any",
    "start": "2686800",
    "end": "2692319"
  },
  {
    "text": "others tools like that rabbit mq activemq or whatever but http clients is",
    "start": "2692319",
    "end": "2698240"
  },
  {
    "text": "the the easiest way of getting data over the network from one side to another right",
    "start": "2698240",
    "end": "2703760"
  },
  {
    "text": "but if you have that why not use a technology that is actually faster so",
    "start": "2703760",
    "end": "2709440"
  },
  {
    "text": "what are the downsides well the downside is that you won't have the same benefit of using",
    "start": "2709440",
    "end": "2716079"
  },
  {
    "text": "a queue for example you need both systems to be up in order to",
    "start": "2716079",
    "end": "2721280"
  },
  {
    "text": "make them communicate so another thing is that as a developer you might forget at this network you call",
    "start": "2721280",
    "end": "2728000"
  },
  {
    "text": "the method you call the method it's very familiar and it's not humanly readable",
    "start": "2728000",
    "end": "2734160"
  },
  {
    "text": "until now because postman did a very awesome thing",
    "start": "2734160",
    "end": "2739359"
  },
  {
    "text": "i'm gonna just second i'm gonna stop this",
    "start": "2739359",
    "end": "2744318"
  },
  {
    "text": "postman you all know bozeman right postman has the thing that is in beta",
    "start": "2745280",
    "end": "2750560"
  },
  {
    "text": "now you can add new you have grpc request",
    "start": "2750560",
    "end": "2756640"
  },
  {
    "text": "and from that grpc request you need to specify what's the port of the server and you have a way of discovering the",
    "start": "2756640",
    "end": "2763119"
  },
  {
    "text": "protobuf file you can use server reflection or you just can import from local file which is",
    "start": "2763119",
    "end": "2769839"
  },
  {
    "text": "i'm gonna do i'm gonna hit next i'm going to here you can add api definitions",
    "start": "2769839",
    "end": "2777440"
  },
  {
    "text": "added versions and so on but i'm going to use it without importing and what it does",
    "start": "2777440",
    "end": "2782480"
  },
  {
    "text": "is to discover the methods you're having in that specific protofile okay so say",
    "start": "2782480",
    "end": "2787839"
  },
  {
    "text": "hello client streaming and so on so if i were to select one of these i can generate an example response he",
    "start": "2787839",
    "end": "2795440"
  },
  {
    "text": "can they can look here and it will generate",
    "start": "2795440",
    "end": "2800960"
  },
  {
    "text": "message request for us and also you can invoke the method you see invoke",
    "start": "2800960",
    "end": "2808160"
  },
  {
    "text": "is very soapish invoke but either way",
    "start": "2808160",
    "end": "2813760"
  },
  {
    "text": "it works and it has a visual representation one major drawback of",
    "start": "2813760",
    "end": "2818800"
  },
  {
    "text": "grpc until now was that you have you had binary and that binary file was not humor readable okay so here",
    "start": "2818800",
    "end": "2826560"
  },
  {
    "text": "it is message hello back with whatever i sent from the specific port in there",
    "start": "2826560",
    "end": "2833280"
  },
  {
    "text": "and it's pretty awesome it's still in development so don't expect it to work at its full potential",
    "start": "2833280",
    "end": "2840079"
  },
  {
    "text": "but it's here for us to to use another tool is the bloomer pc maybe",
    "start": "2840079",
    "end": "2847359"
  },
  {
    "text": "if you worked with grpc before it's familiar you can find it on github if you google",
    "start": "2847359",
    "end": "2852400"
  },
  {
    "text": "it bloom grpc it's it has the same approach you specify a port you import a",
    "start": "2852400",
    "end": "2859119"
  },
  {
    "text": "protofile and it will discover the methods that are available and from there you'll be",
    "start": "2859119",
    "end": "2864319"
  },
  {
    "text": "able to hit play and execute the requests which is uh pretty",
    "start": "2864319",
    "end": "2870160"
  },
  {
    "text": "awesome nowadays okay so getting back to the downsides",
    "start": "2870160",
    "end": "2876800"
  },
  {
    "text": "uh you need better testing would you with grpc because you have a single point of truth and a single point of",
    "start": "2876800",
    "end": "2883040"
  },
  {
    "text": "failure if that profile it changed and well you're not taking care of the other",
    "start": "2883040",
    "end": "2888559"
  },
  {
    "text": "consuming services things are happening you need to focus on ci cd",
    "start": "2888559",
    "end": "2895440"
  },
  {
    "text": "there is also a talk on youtube from a guy from spotify spotify uses grpc and",
    "start": "2895440",
    "end": "2901440"
  },
  {
    "text": "they talk about how they migrated to grpc and how they have a single repository with grpc files and they take",
    "start": "2901440",
    "end": "2909040"
  },
  {
    "text": "everything from there drawback is that you have a http post",
    "start": "2909040",
    "end": "2915839"
  },
  {
    "text": "even if you're sending if you're getting data http post is what you use and there",
    "start": "2915839",
    "end": "2921760"
  },
  {
    "text": "is no way of changing that so there is no http caching or caching at the",
    "start": "2921760",
    "end": "2928000"
  },
  {
    "text": "transport level single point of truth and the biggest one that is not supported in",
    "start": "2928000",
    "end": "2934559"
  },
  {
    "text": "asia yet uh it's still working progress for about two years",
    "start": "2934559",
    "end": "2940319"
  },
  {
    "text": "i don't know what's happening but it's still work in progress uh to overcome that if you use kubernetes or",
    "start": "2940319",
    "end": "2947119"
  },
  {
    "text": "docker and anything like that it works if you also use uh servers like you you",
    "start": "2947119",
    "end": "2953040"
  },
  {
    "text": "manually installed servers you can have grpc services running in there but not azure as",
    "start": "2953040",
    "end": "2959520"
  },
  {
    "text": "services okay to overcome that they have an",
    "start": "2959520",
    "end": "2964960"
  },
  {
    "text": "implementation called grpc web but in that you cannot have server",
    "start": "2964960",
    "end": "2970000"
  },
  {
    "text": "streaming and client streaming so well okay so um",
    "start": "2970000",
    "end": "2977599"
  },
  {
    "text": "grpc versus rest it's not really about verses but we need to have",
    "start": "2977599",
    "end": "2982960"
  },
  {
    "text": "familiar comparison so uh rest or http apis are very",
    "start": "2982960",
    "end": "2988880"
  },
  {
    "text": "resource focused you're working with resources you expose things over the wire well rpc embraces developer semantics",
    "start": "2988880",
    "end": "2997040"
  },
  {
    "text": "and it's action-based do that call that act on that you have loose coupling in http or",
    "start": "2997040",
    "end": "3004880"
  },
  {
    "text": "you should have if you have an http client that is strongly typed",
    "start": "3004880",
    "end": "3010079"
  },
  {
    "text": "you do not have loose coupling anymore because this is the scenario where we're talking about server-to-server",
    "start": "3010079",
    "end": "3016319"
  },
  {
    "text": "communication not browser to api okay browser to api it's a different other",
    "start": "3016319",
    "end": "3022960"
  },
  {
    "text": "story called grpc web that it's still in development and it",
    "start": "3022960",
    "end": "3028480"
  },
  {
    "text": "deserves a different talk on its own rpc has a tire coupling but you have",
    "start": "3028480",
    "end": "3034160"
  },
  {
    "text": "that protofi that you move around and your act on that the first one is text based and the",
    "start": "3034160",
    "end": "3039440"
  },
  {
    "text": "second one is binary based but that binary base used to be a",
    "start": "3039440",
    "end": "3045839"
  },
  {
    "text": "drawback until now but thanks god guys from postman actually made a thing that is visually",
    "start": "3045839",
    "end": "3053440"
  },
  {
    "text": "and clickable and usable until now you could have used grpc curl there is a",
    "start": "3053440",
    "end": "3060720"
  },
  {
    "text": "version c url for that but either way",
    "start": "3060720",
    "end": "3067119"
  },
  {
    "text": "when and why grpc overall so grpc",
    "start": "3067119",
    "end": "3074000"
  },
  {
    "text": "i think in my opinion it's very it worth your time if you have server to server get data from one side",
    "start": "3074000",
    "end": "3081119"
  },
  {
    "text": "to another it has a lot of performance benefits it's way faster the payload is smaller",
    "start": "3081119",
    "end": "3087119"
  },
  {
    "text": "and it has client-side load balancing it's worth mentioning and retry policies out of the box if you",
    "start": "3087119",
    "end": "3093280"
  },
  {
    "text": "need something advanced you can go ahead and tweak that and read more about it great a great choice for microservices",
    "start": "3093280",
    "end": "3101920"
  },
  {
    "text": "point to point replaces http clients gracefully and those four modes",
    "start": "3101920",
    "end": "3108000"
  },
  {
    "text": "if you have scenarios like that it's moving data from one side to another uh",
    "start": "3108000",
    "end": "3113280"
  },
  {
    "text": "in big chunks i think it's notable and it decouples code you",
    "start": "3113280",
    "end": "3118800"
  },
  {
    "text": "won't have references that references something else and ends up being a spaghetti references and so on",
    "start": "3118800",
    "end": "3125440"
  },
  {
    "text": "in my opinion an alternative feature of web apis would be around no more hunting for",
    "start": "3125440",
    "end": "3132480"
  },
  {
    "text": "documentation like no more i don't know a swagger file looking what do i have to create what do i have to",
    "start": "3132480",
    "end": "3139359"
  },
  {
    "text": "add in there and no more inter misinterpretation of status codes i remember the the talks about what do you",
    "start": "3139359",
    "end": "3146480"
  },
  {
    "text": "send here is it bad request or is it 422 i mean",
    "start": "3146480",
    "end": "3151599"
  },
  {
    "text": "regarding the error processing uh and also no more data parse errors",
    "start": "3151599",
    "end": "3157599"
  },
  {
    "text": "no more forgotten fields no more i don't know fields that should have been named with uh underscore and so on",
    "start": "3157599",
    "end": "3166079"
  },
  {
    "text": "so about distributed systems these are about uh trade-offs and because these are about trade-offs",
    "start": "3166079",
    "end": "3173040"
  },
  {
    "text": "we cannot have a technology or a tool that will solve our problems we just need to pick the right technology for us",
    "start": "3173040",
    "end": "3180640"
  },
  {
    "text": "the right scenario so that's why we should need to know about the tools",
    "start": "3180640",
    "end": "3187359"
  },
  {
    "text": "i also added in here some next steps to look into if you're really interested",
    "start": "3187359",
    "end": "3193359"
  },
  {
    "text": "grpc web james newton king has a few uh talks about it on dotnet channel",
    "start": "3193359",
    "end": "3200720"
  },
  {
    "text": "http 2 and of course http 3 now of course",
    "start": "3200720",
    "end": "3206240"
  },
  {
    "text": "and of course proto-syntax because if you have complicated scenarios you might need to have a look",
    "start": "3206240",
    "end": "3212880"
  },
  {
    "text": "on those okay uh postman it's in beta",
    "start": "3212880",
    "end": "3219200"
  },
  {
    "text": "grpc curl if you are in need of a tool that makes requests grpc requests",
    "start": "3219200",
    "end": "3226559"
  },
  {
    "text": "and bloomer pc another thing that i want to mention is these two books",
    "start": "3226559",
    "end": "3232400"
  },
  {
    "text": "if you've been to mark randle's workshop you might know about that book it's free",
    "start": "3232400",
    "end": "3237839"
  },
  {
    "text": "and this one is anthony's girati beginning rpc with asp.net core 6.",
    "start": "3237839",
    "end": "3242960"
  },
  {
    "text": "he has a lot of examples in there that might help you and of course",
    "start": "3242960",
    "end": "3248800"
  },
  {
    "text": "if you need you can dm me thanks for listening you have the slides",
    "start": "3248800",
    "end": "3254880"
  },
  {
    "text": "there embracing grpc a bitly the slides and the source code and everything you have those uploaded in",
    "start": "3254880",
    "end": "3262319"
  },
  {
    "text": "there and also feel free to reach out to me i'm here",
    "start": "3262319",
    "end": "3268079"
  },
  {
    "text": "and thank you for listening",
    "start": "3268079",
    "end": "3272440"
  },
  {
    "text": "you",
    "start": "3288079",
    "end": "3290160"
  }
]