[
  {
    "text": "all right hi all welcome to clean testing i'm jason taylor and i'm an ssw solution",
    "start": "7359",
    "end": "13759"
  },
  {
    "text": "architect you can find me on twitter at jasontaylordev so recently i've been teaching folks",
    "start": "13759",
    "end": "20160"
  },
  {
    "text": "about clean architecture as the simplest approach to enterprise application development with net core",
    "start": "20160",
    "end": "26720"
  },
  {
    "text": "today in this talk i want to highlight a simple and yet powerful approach to automated testing with net core i'll",
    "start": "26720",
    "end": "33600"
  },
  {
    "text": "demonstrate an approach with tests that are easy to create maintain and understand and i'll give you the",
    "start": "33600",
    "end": "39520"
  },
  {
    "text": "confidence to deploy your system to production knowing that it will behave as expected",
    "start": "39520",
    "end": "46320"
  },
  {
    "text": "so today we'll start with a brief introduction to clean architecture and following that i'll provide an overview",
    "start": "48239",
    "end": "53840"
  },
  {
    "text": "of the clean testing approach next we'll take a quick look at some testing tools before we dive into the",
    "start": "53840",
    "end": "59920"
  },
  {
    "text": "live demos and this is where we'll spend most of our time finally i'll wrap it up with some resources for those of you who are keen",
    "start": "59920",
    "end": "66479"
  },
  {
    "text": "to learn more with clean architecture the domain and application layers are at the center of",
    "start": "66479",
    "end": "73200"
  },
  {
    "text": "the design this is known as the core of the system the domain layer contains enterprise logic and types and the",
    "start": "73200",
    "end": "80080"
  },
  {
    "text": "application layer contains business logic and types now core should not be dependent on",
    "start": "80080",
    "end": "85439"
  },
  {
    "text": "concerns such as data access and infrastructure so we invert those dependencies therefore",
    "start": "85439",
    "end": "91680"
  },
  {
    "text": "infrastructure and presentation depend on core now this is achieved by adding",
    "start": "91680",
    "end": "96720"
  },
  {
    "text": "interfaces or abstractions within core which are implemented by layers outside of course such as infrastructure",
    "start": "96720",
    "end": "104479"
  },
  {
    "text": "all dependencies flow inwards and core has no dependencies on any other layers",
    "start": "104479",
    "end": "110320"
  },
  {
    "text": "infrastructure and presentation depend on core but not on one another now this results in an architecture and",
    "start": "110320",
    "end": "116560"
  },
  {
    "text": "design that is independent of frameworks it doesn't require the existence of some framework",
    "start": "116560",
    "end": "122399"
  },
  {
    "text": "it's testable that's why we're here today we're going to see just how easy it is to test a system that follows this",
    "start": "122399",
    "end": "128319"
  },
  {
    "text": "architecture it's independent of the ui right now we might be using angular soon",
    "start": "128319",
    "end": "133360"
  },
  {
    "text": "we'll switch to blazer independent for database might be based on sql server you might prefer postgres you can switch",
    "start": "133360",
    "end": "140160"
  },
  {
    "text": "it to cosmos db without trouble finally it's independent of anything",
    "start": "140160",
    "end": "145280"
  },
  {
    "text": "external in fact core simply doesn't know anything about the outside world and that's what makes this architecture",
    "start": "145280",
    "end": "151519"
  },
  {
    "text": "and design so brilliant it's the difference between an application that will last three years and one that will last 20.",
    "start": "151519",
    "end": "158720"
  },
  {
    "text": "now if you'd like to learn more please check out my clean architecture with asp.net core talk which i gave at ndc",
    "start": "158720",
    "end": "164640"
  },
  {
    "text": "sydney last year next clean testing before we dive right",
    "start": "164640",
    "end": "170640"
  },
  {
    "text": "into the details i wanted to give an overview of the typical approach so with the typical approach to",
    "start": "170640",
    "end": "176080"
  },
  {
    "text": "automated testing we have focus on unit tests integration tests and ui tests no",
    "start": "176080",
    "end": "182879"
  },
  {
    "text": "surprises there we know that ui tests are the most expensive to create and maintain and that they're also the",
    "start": "182879",
    "end": "188959"
  },
  {
    "text": "slowest to run we therefore minimize the amount of ui tests that we create",
    "start": "188959",
    "end": "194239"
  },
  {
    "text": "in the middle we have integration tests and at the bottom we have our unit test now we know that unit tests are cheap to",
    "start": "194239",
    "end": "200319"
  },
  {
    "text": "create and maintain and the fastest to run and so this is where our main effort is focused",
    "start": "200319",
    "end": "205760"
  },
  {
    "text": "so generally you'll write a unit test first if you can't write a unit test you'll write an integration test and where an",
    "start": "205760",
    "end": "212080"
  },
  {
    "text": "integration test won't work you'll write a ui test if logic exists in the front end then ui",
    "start": "212080",
    "end": "218000"
  },
  {
    "text": "tests will be required if logic exists in the api layer then maybe you'll need some asp.net core integration tests",
    "start": "218000",
    "end": "225280"
  },
  {
    "text": "of course with the clean architecture approach we're trying to keep logic out of both of these places",
    "start": "225280",
    "end": "231040"
  },
  {
    "text": "but we're here to talk about clean testing with the clean testing approach we're going to add subcutaneous tests",
    "start": "231040",
    "end": "236640"
  },
  {
    "text": "into the mix we'll still write unit integration and ui tests where appropriate but the main focus will be",
    "start": "236640",
    "end": "243200"
  },
  {
    "text": "on subcutaneous tests and that's because these tests are easy to write and run",
    "start": "243200",
    "end": "248239"
  },
  {
    "text": "these tests effectively verify behavior and integration they document the system",
    "start": "248239",
    "end": "253599"
  },
  {
    "text": "and reduce the need to create and maintain a large number of mocks in short these tests are going to",
    "start": "253599",
    "end": "259199"
  },
  {
    "text": "provide us with a great deal of confidence so what are subcutaneous tests",
    "start": "259199",
    "end": "264479"
  },
  {
    "text": "the subcutaneous tests are the tests that operate just below the ui layer now",
    "start": "264479",
    "end": "269600"
  },
  {
    "text": "this can be interpreted a number of different ways so say for example if you were building a single page application",
    "start": "269600",
    "end": "275440"
  },
  {
    "text": "with an angular front-end and a web api back-end in that case just below the the",
    "start": "275440",
    "end": "281040"
  },
  {
    "text": "ui layer could be the api if there was logic worth testing in that api",
    "start": "281040",
    "end": "286320"
  },
  {
    "text": "however with the approach that we use in clean architecture there's no logic in the api so we go one layer deeper we go",
    "start": "286320",
    "end": "293040"
  },
  {
    "text": "into the core layer into the application layer where we have our commands and queries which are the entry points to",
    "start": "293040",
    "end": "298400"
  },
  {
    "text": "our application so we'll use subcutaneous tests to verify the basic inputs and outputs of",
    "start": "298400",
    "end": "304240"
  },
  {
    "text": "the system and this provides us good test coverage and helps to ensure that our tests are not brittle we just want",
    "start": "304240",
    "end": "310160"
  },
  {
    "text": "to test the basics now these tests are only appropriate if we keep logic out of the ui which we do",
    "start": "310160",
    "end": "316960"
  },
  {
    "text": "with the clean architecture approach and this will therefore reduce the need to write expensive and slow ui tests as",
    "start": "316960",
    "end": "324560"
  },
  {
    "text": "subcutaneous tests are going to cover a lot of that behavior anyway so let's look at this from a different",
    "start": "324560",
    "end": "330080"
  },
  {
    "text": "perspective we can see in the presentation layer that contains the ui so for a spa as i",
    "start": "330080",
    "end": "336720"
  },
  {
    "text": "mentioned it might be an angular front-end with a web api back-end or maybe it's just a microservice with a",
    "start": "336720",
    "end": "341840"
  },
  {
    "text": "web api back-end in core which includes the application layers and the domain layers",
    "start": "341840",
    "end": "348560"
  },
  {
    "text": "that contains all logic we'll be testing our commands queries validators and other cross-cutting concerns",
    "start": "348560",
    "end": "354720"
  },
  {
    "text": "within infrastructure that represents both the internal infrastructure and the external infrastructure as an example of",
    "start": "354720",
    "end": "362560"
  },
  {
    "text": "the internal infrastructure you can think about the database we'll be writing these tests against a live database for",
    "start": "362560",
    "end": "370000"
  },
  {
    "text": "external infrastructure think about an external client api such as some web service that you're accessing",
    "start": "370000",
    "end": "376880"
  },
  {
    "text": "so these subcutaneous tests that we write they're going to operate from the core layer all the way down to the underlying",
    "start": "376880",
    "end": "383919"
  },
  {
    "text": "database but we're going to exclude external infrastructure so just to ensure that we're on the same",
    "start": "383919",
    "end": "390080"
  },
  {
    "text": "page we're going to test commands and queries are the entry points to our application",
    "start": "390080",
    "end": "395440"
  },
  {
    "text": "we're going to include internal services and they'll be configured as closely to production as possible",
    "start": "395440",
    "end": "402000"
  },
  {
    "text": "we're going to mock our external services hopefully we don't have too many mocks should be only used for external services such as our external",
    "start": "402000",
    "end": "409360"
  },
  {
    "text": "api client and most importantly we're going to keep it simple because these tests should be",
    "start": "409360",
    "end": "414560"
  },
  {
    "text": "easy to write and maintain so now let's have a look at some testing tools starting with testing frameworks",
    "start": "414560",
    "end": "422240"
  },
  {
    "text": "the frameworks i considered when putting together this approach were n-unit a popular choice by many.net core and net",
    "start": "422240",
    "end": "429440"
  },
  {
    "text": "developers it's probably the most widely used x unit a very popular choice with net",
    "start": "429440",
    "end": "435280"
  },
  {
    "text": "core developers next there's ms test we all know and a lot of ms test i think it's a default",
    "start": "435280",
    "end": "441360"
  },
  {
    "text": "choice for many new developers but most people are using n unit or x unit now",
    "start": "441360",
    "end": "447360"
  },
  {
    "text": "that's a logo that i created for ms test they don't have one created a few logos in the past this is my favorite one so",
    "start": "447360",
    "end": "453520"
  },
  {
    "text": "far i hope they like it and finally we have fixie now fixes a",
    "start": "453520",
    "end": "458960"
  },
  {
    "text": "relatively new framework it's kind of a powerful convention based test framework",
    "start": "458960",
    "end": "464960"
  },
  {
    "text": "now i couldn't test all of these but i did create many subcutaneous tests for n unit x unit and fixie i probably should",
    "start": "464960",
    "end": "472960"
  },
  {
    "text": "have tried ms test i know there's been a lot of work put into it it's cross platform and fast um perhaps that's",
    "start": "472960",
    "end": "478800"
  },
  {
    "text": "something that i'll try next time and so which framework did i go with well while it's possible to write great",
    "start": "478800",
    "end": "485520"
  },
  {
    "text": "subcutaneous tests in one of these frameworks and i decided from the end unit",
    "start": "485520",
    "end": "491680"
  },
  {
    "text": "for this style of testing i found i needed to provide the best support it was simple it seemed to be a little bit",
    "start": "491680",
    "end": "497440"
  },
  {
    "text": "faster i didn't benchmark it but i did feel it to be a little bit faster than say x unit or fixie and it had great",
    "start": "497440",
    "end": "503919"
  },
  {
    "text": "mechanisms for managing global state and that was really the key for me writing these styles having those global",
    "start": "503919",
    "end": "510000"
  },
  {
    "text": "mechanisms all right so now moving on to some tools",
    "start": "510000",
    "end": "515200"
  },
  {
    "text": "first and foremost we have fluent assertions so this tool contains a large set of extension methods to allow you to",
    "start": "515200",
    "end": "521360"
  },
  {
    "text": "more naturally specify the outcome of a test it also improves your readability within",
    "start": "521360",
    "end": "527120"
  },
  {
    "text": "tests so it makes your tests easy to understand and that's one of the goals of this approach making these tests easy",
    "start": "527120",
    "end": "533519"
  },
  {
    "text": "to understand a little bit of a form of documentation within your system",
    "start": "533519",
    "end": "538959"
  },
  {
    "text": "so not only that one of the greatest things about fluent assertions is that it clearly explains the test failure",
    "start": "538959",
    "end": "544720"
  },
  {
    "text": "results you get better results and this means that you're going to spend less time in the debugger so how many times",
    "start": "544720",
    "end": "551279"
  },
  {
    "text": "do you see a test fail and you jump straight to the debugger because you don't really have enough information to resolve it and without hitting that",
    "start": "551279",
    "end": "557760"
  },
  {
    "text": "break point i find i'm doing that less and less with fluent assertions as it provides enough information in those",
    "start": "557760",
    "end": "563360"
  },
  {
    "text": "test results so i get to skip the debugger and go straight to resolving that issue",
    "start": "563360",
    "end": "569120"
  },
  {
    "text": "overall i found that fluent assertions helped to improve my productivity and simplified my approach it's a great tool",
    "start": "569120",
    "end": "577120"
  },
  {
    "text": "next we have mock so i don't think mock really needs an introduction but just in case it's a mocking framework for net",
    "start": "577120",
    "end": "584160"
  },
  {
    "text": "it's really the default choice for many developers now according to the repo it's very popular and friendly",
    "start": "584160",
    "end": "590480"
  },
  {
    "text": "now you only need to check the new get stats to see that it's popular i'm not sure about friendly it's never welcomed",
    "start": "590480",
    "end": "596640"
  },
  {
    "text": "me in the morning or commented on how nice and clean my code was but certainly popular we can give it",
    "start": "596640",
    "end": "602320"
  },
  {
    "text": "that so that aside it does support mocking classes and interfaces it's strongly",
    "start": "602320",
    "end": "608720"
  },
  {
    "text": "typed so there's no magic strings and it's very simple to use no prior knowledge required that's what i love",
    "start": "608720",
    "end": "614480"
  },
  {
    "text": "about this tool next we have respawn this is my favorite new tool",
    "start": "614480",
    "end": "619920"
  },
  {
    "text": "like all good things it's either recommended by or created by jimmy bogard this particular tool was created",
    "start": "619920",
    "end": "625040"
  },
  {
    "text": "by jimmy respawn is an intelligent database cleaner for integration tests what it",
    "start": "625040",
    "end": "630959"
  },
  {
    "text": "does is instead of deleting the data or rolling back the transactions so you can reset your database back to a clean",
    "start": "630959",
    "end": "636640"
  },
  {
    "text": "state is it just resets the database back to a clean checkpoint it takes a performant approach by working out the",
    "start": "636640",
    "end": "643040"
  },
  {
    "text": "relationships among the tables and deleting the data in the correct order it's easy to configure you can set it to",
    "start": "643040",
    "end": "649920"
  },
  {
    "text": "ignore tables and schemas such as the ef migrations history we'll be taking a look at that and it supports many",
    "start": "649920",
    "end": "656000"
  },
  {
    "text": "databases such as sql server postgres and mysql to name a few the best thing",
    "start": "656000",
    "end": "661279"
  },
  {
    "text": "about respawn like some of the other tools that we're looking at is that it's really easy to learn and i'm going to",
    "start": "661279",
    "end": "666399"
  },
  {
    "text": "show you a lot in this talk all right the demos we're going to be doing today will be all built using the",
    "start": "666399",
    "end": "673600"
  },
  {
    "text": "clean architecture solution template so this is a template that i built once i had a really good understanding of the",
    "start": "673600",
    "end": "679760"
  },
  {
    "text": "type of solution that i wanted to build and how i structured it so it's a net caller template package you can install",
    "start": "679760",
    "end": "685519"
  },
  {
    "text": "it from the command line run it from the command line it's using asp.net core 31",
    "start": "685519",
    "end": "690560"
  },
  {
    "text": "entity framework course 31 and angular 10. if you want to install it you just run",
    "start": "690560",
    "end": "696480"
  },
  {
    "text": "new install clean architecture solution template from the command line and then you can simply run.net new ca solution",
    "start": "696480",
    "end": "703519"
  },
  {
    "text": "and that'll create the project for you today now we're going to write the demo using that clean architecture solution",
    "start": "703519",
    "end": "709440"
  },
  {
    "text": "template the only difference is that i've deleted the test projects so we can create them ourself",
    "start": "709440",
    "end": "714959"
  },
  {
    "text": "so let's have a look at that now",
    "start": "714959",
    "end": "718240"
  },
  {
    "text": "so here's the project it's ready to go you can see there's the domain application layer infrastructure layer",
    "start": "720959",
    "end": "726320"
  },
  {
    "text": "and web ui representing presentation and down here we have a brand new end unit test project and it's called application",
    "start": "726320",
    "end": "732639"
  },
  {
    "text": "dot subject subcutaneous tests i've got a single test we'll run that to make sure everything's working nicely",
    "start": "732639",
    "end": "739440"
  },
  {
    "text": "that's passed very quick and we'll just have a quick look at what we'll be testing today so this is the application",
    "start": "739440",
    "end": "745440"
  },
  {
    "text": "it's got some step um examples from the core template i've also added my own",
    "start": "745440",
    "end": "751279"
  },
  {
    "text": "to-do component this one's a little bit better than most of the to-do lists you see out there because it supports multiple lists so",
    "start": "751279",
    "end": "758320"
  },
  {
    "text": "add a most important task list go back and change the total if we want to or delete the list",
    "start": "758320",
    "end": "764800"
  },
  {
    "text": "we can add a new item to this presentation",
    "start": "764800",
    "end": "771600"
  },
  {
    "text": "we can um edit items and we can edit the details things like",
    "start": "771680",
    "end": "778320"
  },
  {
    "text": "that delete things set priorities all that sort of stuff so we're going to test some basic",
    "start": "778320",
    "end": "783519"
  },
  {
    "text": "behaviors on that we'll test this view generating this view model will test",
    "start": "783519",
    "end": "789440"
  },
  {
    "text": "actually creating a new to-do list and updating the new to-do list",
    "start": "789440",
    "end": "794880"
  },
  {
    "text": "so the first test that i'd like to write is the get to do lists query so that is",
    "start": "794880",
    "end": "800560"
  },
  {
    "text": "this one in the get to this query so everything's in the system has been represented as a",
    "start": "800560",
    "end": "805839"
  },
  {
    "text": "query or a command this particular query doesn't have any input or it's uh",
    "start": "805839",
    "end": "813200"
  },
  {
    "text": "to run but we could add input later if we wanted to so we could add some say filtering um some pagination",
    "start": "813200",
    "end": "820639"
  },
  {
    "text": "uh sorting that sort of thing whatever it was that we needed for this particular query but this one's a lot simpler",
    "start": "820639",
    "end": "826639"
  },
  {
    "text": "it's quite basic we inject the dbcontext and imapper for automapper and we",
    "start": "826639",
    "end": "832000"
  },
  {
    "text": "generate a new to-do's view model so here we generate the priority levels by reading the enumeration",
    "start": "832000",
    "end": "838160"
  },
  {
    "text": "and we generate the list of to-do's which also contains the list of to-do",
    "start": "838160",
    "end": "843519"
  },
  {
    "text": "items all right so i like to follow the same structure in my test project as i do in",
    "start": "843519",
    "end": "850720"
  },
  {
    "text": "my real projects so i'm going to create a to-do list folder a queries folder and a get to do's query test project",
    "start": "850720",
    "end": "858399"
  },
  {
    "text": "so let's do that now got a nice little tool shift f2 to add a new file",
    "start": "858399",
    "end": "864959"
  },
  {
    "text": "to do lists queries get to use query",
    "start": "864959",
    "end": "871839"
  },
  {
    "text": "tests actually we'll just call it get to those",
    "start": "871839",
    "end": "877360"
  },
  {
    "text": "tests representing more of a feature than the actual class there we go",
    "start": "877360",
    "end": "883440"
  },
  {
    "text": "okay now i've got a stub for that so i'll grab the stub so i don't have to type too much",
    "start": "883440",
    "end": "889440"
  },
  {
    "text": "okay here we go",
    "start": "890720",
    "end": "894600"
  },
  {
    "text": "all right so this is how we'd like the test to work we basically want a new upper get to this query we want to send",
    "start": "898079",
    "end": "904000"
  },
  {
    "text": "it away get the result and assert on that we want to do that with our production",
    "start": "904000",
    "end": "909360"
  },
  {
    "text": "so we want get as close to the production scenario as possible so i need to bring a few",
    "start": "909360",
    "end": "915839"
  },
  {
    "text": "references for brilliant end unit uh i need a reference to the get to this",
    "start": "915839",
    "end": "920959"
  },
  {
    "text": "query that's obviously an application we're gonna wire up",
    "start": "920959",
    "end": "927480"
  },
  {
    "text": "where we have the configure services method so we're going to reuse that configure services services so instead we'll add a",
    "start": "930000",
    "end": "936880"
  },
  {
    "text": "reference to the web ui and a project reference web ui and of course",
    "start": "936880",
    "end": "943759"
  },
  {
    "text": "web ui represents the references the application layer anyway so now we can bring that in",
    "start": "943759",
    "end": "950880"
  },
  {
    "text": "there we go i need to install some packages fluent assertions mock and",
    "start": "950880",
    "end": "956079"
  },
  {
    "text": "respawn so we'll just do that from the command line",
    "start": "956079",
    "end": "960320"
  },
  {
    "text": "so mock",
    "start": "967199",
    "end": "970079"
  },
  {
    "text": "assertions oh yeah i should have saved my um cs project before i did that because",
    "start": "974560",
    "end": "981199"
  },
  {
    "text": "it's kind of created this nasty backup file so i'll just go ahead and delete that",
    "start": "981199",
    "end": "986480"
  },
  {
    "text": "and we'll run that again there we go",
    "start": "986480",
    "end": "991279"
  },
  {
    "text": "there we go mock",
    "start": "991920",
    "end": "995399"
  },
  {
    "text": "and assertions",
    "start": "997920",
    "end": "1002639"
  },
  {
    "text": "and respawn",
    "start": "1007519",
    "end": "1011079"
  },
  {
    "text": "okay so let's bring in the namespace for fluent assertions",
    "start": "1013440",
    "end": "1018800"
  },
  {
    "text": "yes a second there we go",
    "start": "1021120",
    "end": "1025319"
  },
  {
    "text": "didn't bring it in let's give it another second chance that's better i'll clean up that okay so",
    "start": "1026160",
    "end": "1033600"
  },
  {
    "text": "we're ready to go so all we have to do now is implement this helper method called send async and of course you're",
    "start": "1033600",
    "end": "1040240"
  },
  {
    "text": "wondering what does send a sync do well it's going to actually use mediator",
    "start": "1040240",
    "end": "1045918"
  },
  {
    "text": "to send this query through and find the handler and execute the",
    "start": "1045919",
    "end": "1051440"
  },
  {
    "text": "handler now we could of course just new up the query in the handler and run handler.handle method",
    "start": "1051440",
    "end": "1058320"
  },
  {
    "text": "but that's going to miss one very important thing and that's the fact that we have a whole pipeline of crosscutting concerns so for",
    "start": "1058320",
    "end": "1065440"
  },
  {
    "text": "example we have a validation behavior right here and if we don't run it through mediator this validation",
    "start": "1065440",
    "end": "1071280"
  },
  {
    "text": "behavior is not going to execute so none of our queries and commands will be validated we've got an unhandled exception behavior a login behavior so",
    "start": "1071280",
    "end": "1078480"
  },
  {
    "text": "we want all of those to form part of our test to be as close to that production scenario as possible",
    "start": "1078480",
    "end": "1084640"
  },
  {
    "text": "um there's one other thing i need to do as well oh yeah look at these assertions it kind of",
    "start": "1084640",
    "end": "1090240"
  },
  {
    "text": "looks like we're going to be relying on some kind of global data there and we don't want that to to",
    "start": "1090240",
    "end": "1095679"
  },
  {
    "text": "happen because you know for this test we might need one less than six items but someone else is going to write a new",
    "start": "1095679",
    "end": "1100960"
  },
  {
    "text": "test down the track and they're going to change this global data and it's going to break a whole bunch of tests so let's",
    "start": "1100960",
    "end": "1106320"
  },
  {
    "text": "set up our data here as part of the test i've got a snippet for that",
    "start": "1106320",
    "end": "1113520"
  },
  {
    "text": "there we go so now we're going to create our to-do list and the tutorial items as part of the test",
    "start": "1114080",
    "end": "1119679"
  },
  {
    "text": "bringing those we've got a new helper method add async which will add it to the underlying store",
    "start": "1119679",
    "end": "1125360"
  },
  {
    "text": "and then we'll assert on those results so we're not going to be dependent on global data so it'll only be if we want to change it here",
    "start": "1125360",
    "end": "1131360"
  },
  {
    "text": "so i need to add in those helper methods to do that we want to do two things we want to create a new",
    "start": "1131360",
    "end": "1137280"
  },
  {
    "text": "class to wire up the production services and to implement those helper methods and we're going to call this testing.cs",
    "start": "1137280",
    "end": "1144240"
  },
  {
    "text": "and it's going to be an abstract class and we'll just put it in the root of the project there",
    "start": "1144240",
    "end": "1150720"
  },
  {
    "text": "now i mentioned that end unit has really cool value from the global test resources and",
    "start": "1150720",
    "end": "1157440"
  },
  {
    "text": "using the one type setup so this is going to be one for all tests which is",
    "start": "1157440",
    "end": "1162640"
  },
  {
    "text": "really",
    "start": "1162640",
    "end": "1165039"
  },
  {
    "text": "bringing me here and let's just say we've got no away uh a",
    "start": "1176320",
    "end": "1183039"
  },
  {
    "text": "weight um so back in our get to do's tests uh we can bring in a reference to",
    "start": "1183039",
    "end": "1189039"
  },
  {
    "text": "testing we could say testing.async but we can actually use the using static directive",
    "start": "1189039",
    "end": "1197039"
  },
  {
    "text": "now the using static directive allows us to access the static members within testing without needing to specify the",
    "start": "1199039",
    "end": "1205520"
  },
  {
    "text": "type name so you can see they've been resolved",
    "start": "1205520",
    "end": "1209840"
  },
  {
    "text": "over here oh we can delete this unit test one we don't need it done so we've got the skeleton in place so",
    "start": "1211520",
    "end": "1217600"
  },
  {
    "text": "let's um flesh that out by registering our services so first we're going to need to you know",
    "start": "1217600",
    "end": "1224640"
  },
  {
    "text": "kind of wire up the database and for that the first thing we'll need is app settings because that contains all of our",
    "start": "1224640",
    "end": "1230880"
  },
  {
    "text": "application configuration so i'm just going to drag that across and we'll just modify it slightly i'll",
    "start": "1230880",
    "end": "1237200"
  },
  {
    "text": "delete that one from here i need to get some identity server configuration just to say that the key",
    "start": "1237200",
    "end": "1243600"
  },
  {
    "text": "we're going to use is development i'm not going to require an ssl because the environment is in development",
    "start": "1243600",
    "end": "1250400"
  },
  {
    "text": "so i can put that in here just like that and then up the top i've got this use in memory databases equal",
    "start": "1250400",
    "end": "1257600"
  },
  {
    "text": "to true and that's just a little feature of the template to make it people to make it easy for people to get up and",
    "start": "1257600",
    "end": "1262720"
  },
  {
    "text": "running i'm going to change the name of this database we'll have clean testing db for our web",
    "start": "1262720",
    "end": "1268559"
  },
  {
    "text": "ui and we'll have clean testing db underscore tests for our tests",
    "start": "1268559",
    "end": "1274080"
  },
  {
    "text": "so that's enough for now we can go ahead and fire up our configuration",
    "start": "1274080",
    "end": "1281679"
  },
  {
    "text": "and so you can see we just use the configuration builder prints in the current directory perfectly the app",
    "start": "1288840",
    "end": "1294880"
  },
  {
    "text": "settings file nice and easy and i just want to create this field",
    "start": "1294880",
    "end": "1303440"
  },
  {
    "text": "yeah we'll create that ourself",
    "start": "1303440",
    "end": "1307039"
  },
  {
    "text": "there we go okay next we have the",
    "start": "1314159",
    "end": "1319200"
  },
  {
    "text": "services to wire up so we'll need the configuration for that so let's get services wired up so via services equals",
    "start": "1319200",
    "end": "1326080"
  },
  {
    "text": "a new service collection easy and reference to startup",
    "start": "1326080",
    "end": "1334240"
  },
  {
    "text": "because view startup so that's in web ui and remember that's where we're going to get our",
    "start": "1334240",
    "end": "1340159"
  },
  {
    "text": "service registration from because it contains the of course very helpful configure services method where everything is",
    "start": "1340159",
    "end": "1346720"
  },
  {
    "text": "going to be wired up so we'll reuse that and then we just simply say whoops",
    "start": "1346720",
    "end": "1353919"
  },
  {
    "text": "startup dot configure services and pass in our service collection if only it could be that easy",
    "start": "1353919",
    "end": "1361760"
  },
  {
    "text": "actually if we were to run that now we'd get an object reference error and that's because when it tries to register the",
    "start": "1361760",
    "end": "1367520"
  },
  {
    "text": "identity services it actually requires a iweb host environment",
    "start": "1367520",
    "end": "1372640"
  },
  {
    "text": "so to solve that because we're not going to be doing asp.net core integration testing and having that environment up",
    "start": "1372640",
    "end": "1379039"
  },
  {
    "text": "and running we're just going to create a mock and we need to do it before we call configure services so we'll do it right",
    "start": "1379039",
    "end": "1385440"
  },
  {
    "text": "here so services dot add singleton",
    "start": "1385440",
    "end": "1390919"
  },
  {
    "text": "mock.org we'll bring in the namespace for mock um i work",
    "start": "1390919",
    "end": "1397360"
  },
  {
    "text": "environment just like that by reviewing the source code i was able",
    "start": "1397360",
    "end": "1403919"
  },
  {
    "text": "to find that we simply need to specify",
    "start": "1403919",
    "end": "1408240"
  },
  {
    "text": "sorry the environment name",
    "start": "1409679",
    "end": "1416159"
  },
  {
    "text": "which will be development and",
    "start": "1416159",
    "end": "1423120"
  },
  {
    "text": "the application name which will be clean testing",
    "start": "1423200",
    "end": "1428960"
  },
  {
    "text": "that web ui there we go okay so that's in place um",
    "start": "1428960",
    "end": "1435919"
  },
  {
    "text": "now the next thing is that we want our test to be as isolated as possible so we'll use an i server scope factory for",
    "start": "1435919",
    "end": "1442720"
  },
  {
    "text": "that and this will be quite similar to how it would operate under asb net core anyway so scope",
    "start": "1442720",
    "end": "1449919"
  },
  {
    "text": "factory equal services dot build",
    "start": "1449919",
    "end": "1455120"
  },
  {
    "text": "build service provider dot get service i service scope",
    "start": "1455600",
    "end": "1462799"
  },
  {
    "text": "factory there we go okay so with service registration",
    "start": "1462799",
    "end": "1468720"
  },
  {
    "text": "complete actually we'll just add this field a little bit of help we'll just make it",
    "start": "1468720",
    "end": "1474240"
  },
  {
    "text": "static",
    "start": "1474240",
    "end": "1476720"
  },
  {
    "text": "okay so now that that's complete we can flesh out our add async and send a async",
    "start": "1480080",
    "end": "1485279"
  },
  {
    "text": "helper methods so first we'll grab a scope",
    "start": "1485279",
    "end": "1490159"
  },
  {
    "text": "oops",
    "start": "1497840",
    "end": "1500840"
  },
  {
    "text": "we've got our db context",
    "start": "1503520",
    "end": "1507039"
  },
  {
    "text": "good and we can by simply call context.add",
    "start": "1509520",
    "end": "1514880"
  },
  {
    "text": "and entity framework call we'll figure out what type of entity is and where to add it so that makes our life very",
    "start": "1514880",
    "end": "1520559"
  },
  {
    "text": "simple save changes listen",
    "start": "1520559",
    "end": "1528159"
  },
  {
    "text": "oops there we go all right so now we need a wire",
    "start": "1528159",
    "end": "1533760"
  },
  {
    "text": "synthesis for a little bit of code from there we're going to grab our radiator",
    "start": "1533760",
    "end": "1541158"
  },
  {
    "text": "and we simply call a white if you will return the result await",
    "start": "1542240",
    "end": "1547440"
  },
  {
    "text": "mediator dot send whatever the request was",
    "start": "1547440",
    "end": "1553799"
  },
  {
    "text": "okay that's looking good uh let's run this now and see if our test passes",
    "start": "1556000",
    "end": "1562480"
  },
  {
    "text": "just press ctrl rt",
    "start": "1562480",
    "end": "1566440"
  },
  {
    "text": "it failed system.o could not find cleantesting.web ui wow",
    "start": "1571200",
    "end": "1578240"
  },
  {
    "text": "that's interesting there's a guy in the name yeah where is the typo in the name",
    "start": "1578720",
    "end": "1585120"
  },
  {
    "text": "double e yeah i see that um",
    "start": "1585120",
    "end": "1591200"
  },
  {
    "text": "number 38 38 thank you uh in testing.css",
    "start": "1591200",
    "end": "1599240"
  },
  {
    "text": "ah this thanks i was thinking where can i have a typo in the name for assembly",
    "start": "1601679",
    "end": "1606799"
  },
  {
    "text": "that i'm referencing i forgot we were specifying the application name is that dinesh",
    "start": "1606799",
    "end": "1613080"
  },
  {
    "text": "no i don't know oh okay thank you very much all right so we'll run it again",
    "start": "1613279",
    "end": "1620640"
  },
  {
    "text": "fingers crossed yeah thanks for picking that up",
    "start": "1620640",
    "end": "1626400"
  },
  {
    "text": "i would have i would have um i would have fumbled around for a little while looking for that one so there we go it passes um which is awesome however if we",
    "start": "1626400",
    "end": "1634480"
  },
  {
    "text": "run this a second time now um it's going to fail and that's because we're inserting data into the database but",
    "start": "1634480",
    "end": "1640240"
  },
  {
    "text": "we're not cleaning up after ourselves so it says expected result.list to contain one item",
    "start": "1640240",
    "end": "1645840"
  },
  {
    "text": "but it found two so let's use respawn to fix that so in our testing.cs class we can do",
    "start": "1645840",
    "end": "1653039"
  },
  {
    "text": "that by creating a new checkpoint it's so simple to create",
    "start": "1653039",
    "end": "1658880"
  },
  {
    "text": "checkpoint and we just specify the tables or schemas to ignore we only have one thing",
    "start": "1658880",
    "end": "1665919"
  },
  {
    "text": "that we want to ignore and that is the entity framework migrations history",
    "start": "1665919",
    "end": "1674240"
  },
  {
    "text": "okay so that's not very clean",
    "start": "1674240",
    "end": "1679279"
  },
  {
    "text": "there we go bringing the field for that",
    "start": "1679279",
    "end": "1684640"
  },
  {
    "text": "oh that would have been another mistake oh boy there we go that looks good",
    "start": "1685360",
    "end": "1690399"
  },
  {
    "text": "and we'll just make that static i also want to add a little bit of a",
    "start": "1690399",
    "end": "1695840"
  },
  {
    "text": "helper method you know that testing database already exists which is not always going to be the case so let's",
    "start": "1695840",
    "end": "1700880"
  },
  {
    "text": "just add a ensure database method okay so that will create the database if",
    "start": "1700880",
    "end": "1706720"
  },
  {
    "text": "it doesn't exist and also run the migrations i'll paste that one in",
    "start": "1706720",
    "end": "1713520"
  },
  {
    "text": "here we go so it grabs a new scope gets the context and calls database dot migrate and for that we need a reference",
    "start": "1713919",
    "end": "1720000"
  },
  {
    "text": "to energy framework call wonderful and we'll need to create our",
    "start": "1720000",
    "end": "1726000"
  },
  {
    "text": "reset state method and so bring that here public static",
    "start": "1726000",
    "end": "1732159"
  },
  {
    "text": "async task reset state",
    "start": "1732159",
    "end": "1739039"
  },
  {
    "text": "and this is an asynchronous method so we just go wait checkpoint dot reset and so we want to",
    "start": "1739039",
    "end": "1745279"
  },
  {
    "text": "run this before every test of course we could run it after the test as part of cleanup but sometimes our",
    "start": "1745279",
    "end": "1752559"
  },
  {
    "text": "tests don't complete sometimes they fail sometimes we're debugging and we stop early and so the cleanup might not take",
    "start": "1752559",
    "end": "1759279"
  },
  {
    "text": "place but we know the setup's always going to take place so we clean up the database as part of setup and then we",
    "start": "1759279",
    "end": "1764799"
  },
  {
    "text": "know that we have a clean state um whenever the test runs so to do that we're going to create a",
    "start": "1764799",
    "end": "1771200"
  },
  {
    "text": "test based class so i'll call that testbase.cs",
    "start": "1771200",
    "end": "1776760"
  },
  {
    "text": "and i will paste in a snippet for that to save us some time",
    "start": "1776960",
    "end": "1782559"
  },
  {
    "text": "just like that so we've got our using static to refer directive to testing bringing the namespace for setup and you",
    "start": "1783120",
    "end": "1789919"
  },
  {
    "text": "can see all we're doing is calling reset state from testing and so to associate",
    "start": "1789919",
    "end": "1795200"
  },
  {
    "text": "that with our test class we can just derive from test base",
    "start": "1795200",
    "end": "1801600"
  },
  {
    "text": "there we go so we have the test setup logic okay let's run those tests again",
    "start": "1802399",
    "end": "1810399"
  },
  {
    "text": "so we're expecting it should clean up the database delete those two lists that already exist and um the test should pass",
    "start": "1810399",
    "end": "1818799"
  },
  {
    "text": "there we go great so we can run that as many times as we want and we'll always get a clean state for the database",
    "start": "1818799",
    "end": "1825760"
  },
  {
    "text": "all right so now let's test one of our commands so we've got the create to do list command right here you can see it",
    "start": "1825760",
    "end": "1832720"
  },
  {
    "text": "has an associated validator which is going to check that the title is not empty but it has a maximum length of 200",
    "start": "1832720",
    "end": "1838799"
  },
  {
    "text": "characters and that it must be a unique title which is going to go up to the database and make sure there's no other to do list",
    "start": "1838799",
    "end": "1845440"
  },
  {
    "text": "with that title over here we can see the dto to make the request just accepts a title",
    "start": "1845440",
    "end": "1852159"
  },
  {
    "text": "and that essentially it's just adding that entity to the database so nice and simple",
    "start": "1852159",
    "end": "1858640"
  },
  {
    "text": "so let's create a test class for that",
    "start": "1858640",
    "end": "1863960"
  },
  {
    "text": "there we go so mirroring that structure that's in the application layer and i will put in the stubs for all of",
    "start": "1870320",
    "end": "1876720"
  },
  {
    "text": "those um tests",
    "start": "1876720",
    "end": "1880320"
  },
  {
    "text": "using static testing there we go green and n unit",
    "start": "1882399",
    "end": "1889200"
  },
  {
    "text": "okay so the first test that we're going to write is should require minimum fields this one's really easy to write",
    "start": "1889200",
    "end": "1895679"
  },
  {
    "text": "but it does something very interesting and that is it doesn't test the command handler it actually tests the validation",
    "start": "1895679",
    "end": "1902960"
  },
  {
    "text": "pipeline",
    "start": "1902960",
    "end": "1905960"
  },
  {
    "text": "so to have an invalid create to-do list command we need to specify an invalid title",
    "start": "1908000",
    "end": "1913440"
  },
  {
    "text": "and of course if we don't specify a title it's going to be null so then we can add",
    "start": "1913440",
    "end": "1919120"
  },
  {
    "text": "use fluent assertions.actions which provides a very nice invoking method which we can use to assert on an",
    "start": "1919120",
    "end": "1926799"
  },
  {
    "text": "exception so we'll simply pass the command to our send async method",
    "start": "1926799",
    "end": "1934080"
  },
  {
    "text": "and say that it should",
    "start": "1934080",
    "end": "1939279"
  },
  {
    "text": "throw and the exception it will throw will be a validation exception and it needs to come from",
    "start": "1939279",
    "end": "1945840"
  },
  {
    "text": "application common exceptions rather than one of these other many validation exceptions because it's our validation",
    "start": "1945840",
    "end": "1951919"
  },
  {
    "text": "exception and that's it so if we run that hopefully we get a pass",
    "start": "1951919",
    "end": "1959398"
  },
  {
    "text": "there we go so that passed and it was pretty quick so yeah that jumped into the validation behavior",
    "start": "1962720",
    "end": "1969440"
  },
  {
    "text": "which basically will inject any validators associated with the request in our case the create to-do list",
    "start": "1969440",
    "end": "1974799"
  },
  {
    "text": "command if there are any validators it will run those validators if there are failures it throws the validation",
    "start": "1974799",
    "end": "1980799"
  },
  {
    "text": "exception so we were testing that and that worked quite well so",
    "start": "1980799",
    "end": "1986640"
  },
  {
    "text": "we also want to ensure that it has a unique title now to do that we need to do a little bit of setup because we've",
    "start": "1986640",
    "end": "1992799"
  },
  {
    "text": "got a blank database right so the first thing that we want to do is actually",
    "start": "1992799",
    "end": "1998559"
  },
  {
    "text": "yeah no we'll do that one so the first thing that we want to do is to create a new to-do list so that when we create a",
    "start": "1998559",
    "end": "2005519"
  },
  {
    "text": "second to-do list it um it will um throw the validation exception saying the title is not unique",
    "start": "2005519",
    "end": "2011440"
  },
  {
    "text": "so we can use some of our helper methods and you know we're choosing to use send async here so that we can use the create",
    "start": "2011440",
    "end": "2018799"
  },
  {
    "text": "to-do list command the alternative would be we could say await add async and just add the entities",
    "start": "2018799",
    "end": "2025919"
  },
  {
    "text": "directly to the database but in actual fact this way is better because it allows us to use the system that we've",
    "start": "2025919",
    "end": "2032240"
  },
  {
    "text": "created in the way that it was designed to be used and so we're testing a little bit more just by doing that",
    "start": "2032240",
    "end": "2038399"
  },
  {
    "text": "so we're going to go and give this a title and we'll be boring and call it shopping",
    "start": "2038399",
    "end": "2045360"
  },
  {
    "text": "so that's going to send that to mediator if it's a valid command mediator we'll go ahead and create that new shopping um",
    "start": "2045360",
    "end": "2052158"
  },
  {
    "text": "to-do list in the database so now we will set up ours which will be a new command",
    "start": "2052159",
    "end": "2059440"
  },
  {
    "text": "so you create to do this command and of course we we want it to fail we want it to hit the",
    "start": "2059440",
    "end": "2065599"
  },
  {
    "text": "validation so we'll give it the same title shopping and now we can use this fluent",
    "start": "2065599",
    "end": "2071800"
  },
  {
    "text": "actions.invoking helper to assert the validation exception is thrown again so actually we'll just",
    "start": "2071800",
    "end": "2077679"
  },
  {
    "text": "grab that",
    "start": "2077679",
    "end": "2080158"
  },
  {
    "text": "there we go so if we run that this will be ensuring that the validator",
    "start": "2082800",
    "end": "2088638"
  },
  {
    "text": "is checking for a unique title and that this little tiny bit of behavior here is working",
    "start": "2088639",
    "end": "2093919"
  },
  {
    "text": "so that's good and it pass so finally we want to create a should create to-do",
    "start": "2093919",
    "end": "2099680"
  },
  {
    "text": "list test now this one's a little bit more involved let me grab it and",
    "start": "2099680",
    "end": "2105200"
  },
  {
    "text": "walk you through it so the first thing it's going to do is to grab a user id using this helper",
    "start": "2105200",
    "end": "2111040"
  },
  {
    "text": "method then it's going to set up the command send the command",
    "start": "2111040",
    "end": "2116720"
  },
  {
    "text": "get an id back retrieve that using the new helper method from the database and assert on",
    "start": "2116720",
    "end": "2123119"
  },
  {
    "text": "the actual record that was created so what we can do is start by adding the",
    "start": "2123119",
    "end": "2128800"
  },
  {
    "text": "new find async helper method and of course we'll add that into our",
    "start": "2128800",
    "end": "2133920"
  },
  {
    "text": "testing helper class i think we'll put it just here",
    "start": "2133920",
    "end": "2139920"
  },
  {
    "text": "so it's generic which makes it quite easy because we can use the generic version of the efcor find async method pass it",
    "start": "2143359",
    "end": "2150480"
  },
  {
    "text": "in the primary key and that will return the result so you can see in the test we also had",
    "start": "2150480",
    "end": "2156240"
  },
  {
    "text": "this run as default user async and this method allows us to work with asp.net core identity to create a user in the",
    "start": "2156240",
    "end": "2162880"
  },
  {
    "text": "database with a valid user id and so that user id is going to be used when we assert that it was created by",
    "start": "2162880",
    "end": "2169599"
  },
  {
    "text": "the right user so we'll set this up within testing.cs as well",
    "start": "2169599",
    "end": "2175920"
  },
  {
    "text": "and grab a snippet",
    "start": "2175920",
    "end": "2179040"
  },
  {
    "text": "okay so we have this method run as default user async which calls run as user async so you see we're setting a",
    "start": "2181119",
    "end": "2187200"
  },
  {
    "text": "default username and password and it's using asp.net identity to go ahead and",
    "start": "2187200",
    "end": "2192320"
  },
  {
    "text": "create that user in the database",
    "start": "2192320",
    "end": "2196720"
  },
  {
    "text": "and we set the current user id to the static field current user id on this",
    "start": "2199200",
    "end": "2205200"
  },
  {
    "text": "class now the system is going to actually",
    "start": "2205200",
    "end": "2212079"
  },
  {
    "text": "retrieve the current user id using the i current user service",
    "start": "2212079",
    "end": "2217839"
  },
  {
    "text": "so we need to replace the registration for that service so that it actually uses this value",
    "start": "2217839",
    "end": "2223280"
  },
  {
    "text": "which is going to represent the current user service for us so to do that we need to first remove",
    "start": "2223280",
    "end": "2229520"
  },
  {
    "text": "the existing registration just here and replace it with our own mock registration that references the",
    "start": "2229520",
    "end": "2235920"
  },
  {
    "text": "high current user id so i'll grab the code for that",
    "start": "2235920",
    "end": "2241800"
  },
  {
    "text": "and here it is so we find the existing registration we remove it and then we add our new registration which is a mock",
    "start": "2242720",
    "end": "2249760"
  },
  {
    "text": "of i current user service and you can see it just passes user id as current",
    "start": "2249760",
    "end": "2255119"
  },
  {
    "text": "user id okay wonderful",
    "start": "2255119",
    "end": "2263200"
  },
  {
    "text": "that's work okay now we need to do one other thing remember after",
    "start": "2263440",
    "end": "2268960"
  },
  {
    "text": "uh before each test run the database is being cleaned up and that means that that user is going to be deleted which",
    "start": "2268960",
    "end": "2274720"
  },
  {
    "text": "means that we really need to reset current user id back to null um so that",
    "start": "2274720",
    "end": "2279760"
  },
  {
    "text": "we're not writing tests thinking that there is a valid user so we'll put that in here",
    "start": "2279760",
    "end": "2285520"
  },
  {
    "text": "current user id equals null it's reset before each test",
    "start": "2285520",
    "end": "2290720"
  },
  {
    "text": "so let's go back and run that test",
    "start": "2290800",
    "end": "2296920"
  },
  {
    "text": "and it passes so you can see even for a little bit more complicated tests we're able to create these helper methods um",
    "start": "2303839",
    "end": "2310400"
  },
  {
    "text": "assert on the things that we need to assert on and use a scenario that's pretty close to the production scenario",
    "start": "2310400",
    "end": "2316720"
  },
  {
    "text": "which is great so now that we've got all of our infrastructure up in place let's create another set of tests for the update",
    "start": "2316720",
    "end": "2323440"
  },
  {
    "text": "to-do list just to see how easy it is now to write these tests so if we come back over here we've got",
    "start": "2323440",
    "end": "2330800"
  },
  {
    "text": "our update to do list command and um it's basically going to",
    "start": "2330800",
    "end": "2336560"
  },
  {
    "text": "you know grab the entity from the database throw an exception if it's not null otherwise it's just going to update the title and",
    "start": "2336560",
    "end": "2343200"
  },
  {
    "text": "save the changes so let me create that",
    "start": "2343200",
    "end": "2348240"
  },
  {
    "text": "so we'll call it update to do lists",
    "start": "2348240",
    "end": "2354320"
  },
  {
    "text": "test dot cs and i will not bore you with any more of my typing",
    "start": "2354320",
    "end": "2360400"
  },
  {
    "text": "and just paste that whole block in and we'll have a walk through",
    "start": "2360400",
    "end": "2366200"
  },
  {
    "text": "okay we'll just bring in the name spaces okay",
    "start": "2373119",
    "end": "2380240"
  },
  {
    "text": "okay so we're inheriting from using static testing because that's where all of our helper um sorry not inheriting",
    "start": "2381359",
    "end": "2387359"
  },
  {
    "text": "we're using the using static testing directive um where all of our helper classes are",
    "start": "2387359",
    "end": "2392560"
  },
  {
    "text": "we're derived from test space which does our clean up before each test runs so the first test we have is that it",
    "start": "2392560",
    "end": "2398800"
  },
  {
    "text": "should require a valid to-do list id and so um we can't update data to do",
    "start": "2398800",
    "end": "2405040"
  },
  {
    "text": "list if it doesn't exist and obviously this doesn't exist because the database is going to be empty so we run that and",
    "start": "2405040",
    "end": "2411520"
  },
  {
    "text": "we assert that it throws a not found exception",
    "start": "2411520",
    "end": "2415760"
  },
  {
    "text": "good okay next should require a unique title obviously this is quite similar to the",
    "start": "2419440",
    "end": "2425200"
  },
  {
    "text": "one that we created before so we're expecting it to work the only difference being",
    "start": "2425200",
    "end": "2432000"
  },
  {
    "text": "is that it does a slightly different check because it checks to see that the title is unique",
    "start": "2432000",
    "end": "2439040"
  },
  {
    "text": "for the items in the list excluding you know the current item",
    "start": "2439040",
    "end": "2445440"
  },
  {
    "text": "that's working and then finally should update to-do list so this one will you",
    "start": "2445440",
    "end": "2450800"
  },
  {
    "text": "know grab a user id create the to-do list update the to-do list and assert on the",
    "start": "2450800",
    "end": "2456640"
  },
  {
    "text": "results so that's it we can really write our tests in a simple kind of concise and",
    "start": "2456640",
    "end": "2464720"
  },
  {
    "text": "clear way and anytime we need to add some new helpful functionality we can pop it in here",
    "start": "2464720",
    "end": "2470880"
  },
  {
    "text": "and we can also control individual test setup and clean up within test space",
    "start": "2470880",
    "end": "2477119"
  },
  {
    "text": "and just just to be clear my favorite thing about n unit was really this one time setup method because it really made",
    "start": "2477119",
    "end": "2483040"
  },
  {
    "text": "it easy to manage that global test state which is very important for tests of these kind",
    "start": "2483040",
    "end": "2489280"
  },
  {
    "text": "so let's run all those tests make sure they're working well",
    "start": "2489280",
    "end": "2494760"
  },
  {
    "text": "good done running relatively quickly for seven tests",
    "start": "2495680",
    "end": "2500720"
  },
  {
    "text": "so let's continue",
    "start": "2500720",
    "end": "2504119"
  },
  {
    "text": "all right so now i have some resources to share with you if you're keen to learn more",
    "start": "2509040",
    "end": "2515359"
  },
  {
    "text": "first is the clean architecture texture solution template so we'll go and have a quick look at that",
    "start": "2515359",
    "end": "2523240"
  },
  {
    "text": "i'll find it so the clean architecture solution",
    "start": "2523760",
    "end": "2528800"
  },
  {
    "text": "template was created by me it was actually created a lot last year around this time for ndc",
    "start": "2528800",
    "end": "2534800"
  },
  {
    "text": "sydney for my talk there and so basically you know when i first started talking about cleaning",
    "start": "2534800",
    "end": "2539839"
  },
  {
    "text": "architecture i was talking about northwind traders and the sample solution that i built there but i spent so long working with the community you",
    "start": "2539839",
    "end": "2546240"
  },
  {
    "text": "can see you know there's a lot of people contributing issues and pull requests and and following this repo that we had",
    "start": "2546240",
    "end": "2552720"
  },
  {
    "text": "a lot of interesting discussions um and and we had a lot of interesting contributions so ended up building the",
    "start": "2552720",
    "end": "2558560"
  },
  {
    "text": "clean architecture solution template um because northwind traders was good as a clean architect for example but this is",
    "start": "2558560",
    "end": "2564800"
  },
  {
    "text": "much better for actually creating new solutions you know you get that experience where you can go net new ca solution from the command",
    "start": "2564800",
    "end": "2571760"
  },
  {
    "text": "line uh you can see in here we've got a few more tests for you to have a play with so this this is the",
    "start": "2571760",
    "end": "2578240"
  },
  {
    "text": "subcutaneous test library i'll probably change that name um and we also have some application unit tests and some",
    "start": "2578240",
    "end": "2584640"
  },
  {
    "text": "domain unit tests there so there's a lot more that you can you can kind of see there",
    "start": "2584640",
    "end": "2590640"
  },
  {
    "text": "next resource we have is the contoso university resource by jimmy bogard and",
    "start": "2590640",
    "end": "2596000"
  },
  {
    "text": "this one is very cool it provides an example of writing these style of tests uh using",
    "start": "2596000",
    "end": "2602560"
  },
  {
    "text": "um x unit so i'm using n unit jimmy bogard's using x unit and so you can see",
    "start": "2602560",
    "end": "2608800"
  },
  {
    "text": "how to write it using x unit so right in here inside of contoso university",
    "start": "2608800",
    "end": "2613920"
  },
  {
    "text": "integration test so that's a really cool approach as well and following that we have the fixie",
    "start": "2613920",
    "end": "2620160"
  },
  {
    "text": "demo so i mentioned that um i was very interested in writing these style of tests using fixie that actually came",
    "start": "2620160",
    "end": "2626720"
  },
  {
    "text": "from a recommendation from jimmy who said you know you kind of have to jump through quite a lot of hoops to write this style of test with x unit because",
    "start": "2626720",
    "end": "2633520"
  },
  {
    "text": "it's just not very good at managing those globally shared resources so i was i was i was pretty keen to use fixie",
    "start": "2633520",
    "end": "2639680"
  },
  {
    "text": "actually i i went i went ahead and created a um dot net call project template for it um so if you're",
    "start": "2639680",
    "end": "2645359"
  },
  {
    "text": "interested in in using fixy there is a there is a project template you can use um and i think it's just.net new fixie",
    "start": "2645359",
    "end": "2651920"
  },
  {
    "text": "from the command line after you install it um and what i really liked about fixi",
    "start": "2651920",
    "end": "2657359"
  },
  {
    "text": "and kind of the fixie demo um is that uh patrick lloyd",
    "start": "2657359",
    "end": "2662960"
  },
  {
    "text": "created a lot of good documentation around this approach uh to kind of describe you know what the goals were",
    "start": "2662960",
    "end": "2669119"
  },
  {
    "text": "and what what they want to avoid and and what they want to do better um so this is this is really cool to check out as",
    "start": "2669119",
    "end": "2675359"
  },
  {
    "text": "well one of the one of the things that's really cool in this particular one is actually uses a diff tool",
    "start": "2675359",
    "end": "2682560"
  },
  {
    "text": "when when comparing the results of the tests so that's a fairly nice unique",
    "start": "2682560",
    "end": "2687920"
  },
  {
    "text": "experience it's worth checking out so you can see that no matter which framework you'd prefer to use you'll",
    "start": "2687920",
    "end": "2694560"
  },
  {
    "text": "have a good example for getting started so end unit is in the clean architecture solution template contoso university is",
    "start": "2694560",
    "end": "2701440"
  },
  {
    "text": "x unit and fixie demo is um the the fixie test framework um and so both of",
    "start": "2701440",
    "end": "2708480"
  },
  {
    "text": "those frameworks were a big inspiration for the solution that i put together in clean testing",
    "start": "2708480",
    "end": "2714640"
  },
  {
    "text": "all right so in summary today i've shown you that clean tests are simple to create maintain and understand",
    "start": "2714640",
    "end": "2721760"
  },
  {
    "text": "and these tests were configured to run the production services against a real database and that helped verify the",
    "start": "2721760",
    "end": "2727520"
  },
  {
    "text": "behavior and the integration for the test that we created we used testing tools such as mock",
    "start": "2727520",
    "end": "2732880"
  },
  {
    "text": "fluent assertions and respawn and that helped to improve the simplicity and productivity of the tests that we wrote",
    "start": "2732880",
    "end": "2739440"
  },
  {
    "text": "and this approach resulted in better test coverage and higher",
    "start": "2739440",
    "end": "2744839"
  },
  {
    "text": "confidence so the confidence to deploy your system to production knowing that it was going to behave as expected",
    "start": "2744839",
    "end": "2752480"
  },
  {
    "text": "thank you i appreciate everyone who came and",
    "start": "2752480",
    "end": "2758240"
  },
  {
    "text": "attended i will drop out now to the slack channel",
    "start": "2758240",
    "end": "2764838"
  }
]