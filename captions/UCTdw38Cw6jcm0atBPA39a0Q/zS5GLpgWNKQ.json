[
  {
    "start": "0",
    "end": "170000"
  },
  {
    "text": "hello good morning so welcome to this",
    "start": "979",
    "end": "6629"
  },
  {
    "text": "session my name is Peter Felix and for the next hour I will be speaking about",
    "start": "6629",
    "end": "12599"
  },
  {
    "text": "called clinical routines for synchronous and concurrent programming I'm a",
    "start": "12599",
    "end": "20220"
  },
  {
    "text": "software engineer working mostly on back-end systems identity HTTP bas",
    "start": "20220",
    "end": "28560"
  },
  {
    "text": "in.net and on the JVM more recently on the JVM I'm also a teacher at the Lisbon",
    "start": "28560",
    "end": "35550"
  },
  {
    "text": "Polytechnical Institute and for the last seven years have been working on server-side HTTP systems that one way or",
    "start": "35550",
    "end": "44129"
  },
  {
    "text": "the other have some sort of a synchrony so I've worked with old models for a",
    "start": "44129",
    "end": "49710"
  },
  {
    "text": "synchrony on dotnet I've worked with the sync wait I work with JVM with futures with rx",
    "start": "49710",
    "end": "56699"
  },
  {
    "text": "Java with reactive streams and also with Kotlin so my presentation here is going",
    "start": "56699",
    "end": "63840"
  },
  {
    "text": "to be a little bit biased for the backend that's where I have most experience so what is Kotlin it's a",
    "start": "63840",
    "end": "71580"
  },
  {
    "text": "static type programming language it was created by JetBrains the manufacture of",
    "start": "71580",
    "end": "76650"
  },
  {
    "text": "excellent ideas such as IntelliJ and writer around 2011 it has excellent",
    "start": "76650",
    "end": "84000"
  },
  {
    "text": "support or integration with the JVM ecosystem so it's very easy to start",
    "start": "84000",
    "end": "89670"
  },
  {
    "text": "using Kotlin on Java project for instance using IntelliJ using Gradle",
    "start": "89670",
    "end": "95159"
  },
  {
    "text": "without any friction arrow so it's it's great it's an Android official language",
    "start": "95159",
    "end": "101520"
  },
  {
    "text": "since 2017 that means that for instance google documentation typically also produces examples in Catalan and Kotlin",
    "start": "101520",
    "end": "109470"
  },
  {
    "text": "is well supported on Android studio on the server side it's also it also has",
    "start": "109470",
    "end": "115049"
  },
  {
    "text": "official support for spring boot starting with 2.0 on 2017 so it's it's",
    "start": "115049",
    "end": "123360"
  },
  {
    "text": "it's something that framework manufacturers are starting to adopt and",
    "start": "123360",
    "end": "128550"
  },
  {
    "text": "to officially support on the JVM ecosystem Kotlin also targets other ecosystems",
    "start": "128550",
    "end": "135270"
  },
  {
    "text": "namely there is now Kotlin for native platforms and also Kotlin for javascript",
    "start": "135270",
    "end": "141330"
  },
  {
    "text": "they are not so well developed and in my talk I will mainly focus the jvm",
    "start": "141330",
    "end": "146880"
  },
  {
    "text": "ecosystem the last version is 1.3 it was released October 2018 it was the first",
    "start": "146880",
    "end": "154410"
  },
  {
    "text": "release where ocurro teens are stable feature they were available previously",
    "start": "154410",
    "end": "160110"
  },
  {
    "text": "but they were called experimental now they are stable they have a stable API",
    "start": "160110",
    "end": "165300"
  },
  {
    "text": "they are fully supported in production so why is synchronous what is the use",
    "start": "165300",
    "end": "174120"
  },
  {
    "start": "170000",
    "end": "170000"
  },
  {
    "text": "case what is the motivation for us to write a synchronous code well first of",
    "start": "174120",
    "end": "179640"
  },
  {
    "text": "all blocking White's monopolize threads so when I when something is waiting we",
    "start": "179640",
    "end": "185910"
  },
  {
    "text": "need to use the thread during that period and all threads are costly for",
    "start": "185910",
    "end": "192060"
  },
  {
    "text": "instance on JVM by default just for the stack of a thread we use one megabyte so",
    "start": "192060",
    "end": "199140"
  },
  {
    "text": "treads are not lightweight threads are costly and some threads are more than",
    "start": "199140",
    "end": "204210"
  },
  {
    "text": "costly they are special so I cannot do things with them for instance I cannot",
    "start": "204210",
    "end": "209310"
  },
  {
    "text": "block the UI thread if I want my system to remain responsive other things other",
    "start": "209310",
    "end": "215250"
  },
  {
    "text": "systems such such as for instance nodejs have a single thread or a single a parent thread which makes it even more",
    "start": "215250",
    "end": "223080"
  },
  {
    "text": "special so that I cannot even think on blocking code there just just to provide",
    "start": "223080",
    "end": "230820"
  },
  {
    "text": "you an example on the server side assume that I have a service that accepts",
    "start": "230820",
    "end": "237450"
  },
  {
    "text": "inbound HTTP requests and that during its processing consumes or uses an",
    "start": "237450",
    "end": "243450"
  },
  {
    "text": "external dependency something that is rather common in these new brave world",
    "start": "243450",
    "end": "248460"
  },
  {
    "text": "of micro services where I have a service exposes an API and eventually needs to",
    "start": "248460",
    "end": "254910"
  },
  {
    "text": "consume another API and I have 500 requests per second coming in and I it I",
    "start": "254910",
    "end": "260609"
  },
  {
    "text": "need to use an external dependency that has a two seconds latency that mean that",
    "start": "260609",
    "end": "265830"
  },
  {
    "text": "by in ever I will have 1000 threads blocking on IO",
    "start": "265830",
    "end": "271800"
  },
  {
    "text": "1000 threads means one gigabyte just for memory so on a given moment in time if I",
    "start": "271800",
    "end": "278379"
  },
  {
    "text": "take a picture of the system I will have 1000 threads doing nothing but each one",
    "start": "278379",
    "end": "284710"
  },
  {
    "text": "consuming one megabyte of memory is it possible to do better yes namely taking",
    "start": "284710",
    "end": "291279"
  },
  {
    "text": "advantage of synchronous i/o I can do a synchronous i/o I can wait for those two",
    "start": "291279",
    "end": "297430"
  },
  {
    "text": "seconds latency without blocking a thread that is made possible by a synchronous i/o which is available or",
    "start": "297430",
    "end": "304020"
  },
  {
    "text": "almost all platforms and in this case I will not have any thread blocked during",
    "start": "304020",
    "end": "311770"
  },
  {
    "text": "that time this is this is very sensitive",
    "start": "311770",
    "end": "317590"
  },
  {
    "text": "and we may live with this synchronous code for a while and the system can",
    "start": "317590",
    "end": "325029"
  },
  {
    "text": "behave well until the day were in production the external dependency that",
    "start": "325029",
    "end": "330729"
  },
  {
    "text": "we are using slightly increases the latency and then we start having issues",
    "start": "330729",
    "end": "336159"
  },
  {
    "text": "first our server starts accepting new requests because they aren't threads",
    "start": "336159",
    "end": "341169"
  },
  {
    "text": "available to accept new new new requests if I increase the number of threads that are available in the server I start",
    "start": "341169",
    "end": "347860"
  },
  {
    "text": "eating memory limits so is something that we can eventually on on development",
    "start": "347860",
    "end": "355360"
  },
  {
    "text": "environments even on production environments may not be critical and the",
    "start": "355360",
    "end": "362349"
  },
  {
    "text": "first but if our external dependencies increased latency we start having more",
    "start": "362349",
    "end": "367539"
  },
  {
    "text": "threads blocked and if we are using a sinker a synchronous sorry if you are using synchronous i/o we all have an",
    "start": "367539",
    "end": "374529"
  },
  {
    "text": "issue there a synchronous is not the same thing as parallel programming most",
    "start": "374529",
    "end": "381189"
  },
  {
    "text": "of the times I don't I'm not trying to do something in parallel I'm trying to do a synchronous flow but I want to do",
    "start": "381189",
    "end": "388569"
  },
  {
    "text": "it without blocking threads so I'm not I may use the synchronous also to get some",
    "start": "388569",
    "end": "395110"
  },
  {
    "text": "parallel behavior but namely it's not the first go of a synchronous it's not to have",
    "start": "395110",
    "end": "402040"
  },
  {
    "text": "parallelism it's just to have scalability also a synchronous typically",
    "start": "402040",
    "end": "408070"
  },
  {
    "text": "will not make things faster on major on most platforms a synchronous i/o is",
    "start": "408070",
    "end": "414810"
  },
  {
    "text": "slightly more expensive def then a synchronous i/o again we don't want to",
    "start": "414810",
    "end": "422230"
  },
  {
    "text": "make a single request faster we want to make the system F better throughput",
    "start": "422230",
    "end": "428110"
  },
  {
    "text": "because more threads are available I want the system to be more responsive",
    "start": "428110",
    "end": "433120"
  },
  {
    "text": "because I don't I'm not blocking the white red I want a better resource usage",
    "start": "433120",
    "end": "438910"
  },
  {
    "text": "and I want more stability I want that my system continues to behave correctly",
    "start": "438910",
    "end": "444669"
  },
  {
    "text": "even for instance a dependency increases the latency of their responses in the",
    "start": "444669",
    "end": "453520"
  },
  {
    "text": "past we have we had many models for synchronous api's ranging from callbacks",
    "start": "453520",
    "end": "459220"
  },
  {
    "text": "that we have in java for a long time and we have in node.js and we add in dotnet",
    "start": "459220",
    "end": "464680"
  },
  {
    "text": "using one thing that was the synchronous programming model the begin something in the end something that he still on",
    "start": "464680",
    "end": "470950"
  },
  {
    "text": "delegates on the delegate signature more recently we had the concept of futures",
    "start": "470950",
    "end": "477310"
  },
  {
    "text": "for instance on jdk 11 the HTTP client is based on futures in javascript",
    "start": "477310",
    "end": "483250"
  },
  {
    "text": "promises are rather common and in dotnet we have tasks of t as the class to",
    "start": "483250",
    "end": "490210"
  },
  {
    "text": "represent the future we also have reactive streams as a generalization of",
    "start": "490210",
    "end": "496720"
  },
  {
    "text": "futures it started in the.net world but is more popular in the java world with",
    "start": "496720",
    "end": "502630"
  },
  {
    "text": "rx Java and also in the JavaScript world with rx yes however all of these models",
    "start": "502630",
    "end": "512459"
  },
  {
    "text": "present some issues let's let's take an example so I have a simple 4 that does 3",
    "start": "512459",
    "end": "522159"
  },
  {
    "text": "iterations it has an accumulator which is an integer called the blocking",
    "start": "522159",
    "end": "527170"
  },
  {
    "text": "operation passing the accumulator receives the result does something with the result and assign",
    "start": "527170",
    "end": "533310"
  },
  {
    "text": "to the accumulator so I have a loop a blocking operation inside it and I have",
    "start": "533310",
    "end": "538560"
  },
  {
    "text": "a sequential flow so there is a dependency between iterations of the loop something that is typical to happen",
    "start": "538560",
    "end": "548060"
  },
  {
    "text": "okay if I try to use for instance futures to deal with with this issue I",
    "start": "548060",
    "end": "553950"
  },
  {
    "text": "can instead of calling a blocking operation I call an synchronous operation that returns the future I get",
    "start": "553950",
    "end": "560880"
  },
  {
    "text": "a future but then I don't I don't need the future",
    "start": "560880",
    "end": "566130"
  },
  {
    "text": "I need the value that is represented by the future so what could I do in Java",
    "start": "566130",
    "end": "571410"
  },
  {
    "text": "for instance I could do future not get and obtain the value that is represented by by in the future but future dot yet",
    "start": "571410",
    "end": "579120"
  },
  {
    "text": "is a blocking operation it's the same thing as in dotnet doing task dot result",
    "start": "579120",
    "end": "584520"
  },
  {
    "text": "I'm blocking until the result is available okay so we can try to use a",
    "start": "584520",
    "end": "590130"
  },
  {
    "text": "different thing for instance in in Java we have Combinator's that allow me to",
    "start": "590130",
    "end": "595520"
  },
  {
    "text": "define a callback when the value is available in the case of Java and the",
    "start": "595520",
    "end": "602040"
  },
  {
    "text": "futures is then except if it was in JavaScript it will be then if it was in",
    "start": "602040",
    "end": "607589"
  },
  {
    "text": "dotnet it will be continuing with so okay III do that the problem is that now",
    "start": "607589",
    "end": "614580"
  },
  {
    "text": "that do something with it's not in the scope of the for anymore it's in the",
    "start": "614580",
    "end": "619680"
  },
  {
    "text": "scope of the Quebec so the four will continue without calling do something",
    "start": "619680",
    "end": "625320"
  },
  {
    "text": "will because do something with will only be called on the callback so I needed to",
    "start": "625320",
    "end": "631410"
  },
  {
    "text": "change the structure of my code and the code doesn't work anymore because I need",
    "start": "631410",
    "end": "637260"
  },
  {
    "text": "to remove things of the sequential for it short form and and in in this case of",
    "start": "637260",
    "end": "644880"
  },
  {
    "text": "in this example which is rather typical where the iterations depend on the value",
    "start": "644880",
    "end": "650339"
  },
  {
    "text": "of a previous iteration using convex and using continuations introduces major",
    "start": "650339",
    "end": "657810"
  },
  {
    "text": "changes on the way that I structure the code so I like to say that",
    "start": "657810",
    "end": "666590"
  },
  {
    "start": "662000",
    "end": "662000"
  },
  {
    "text": "futures observables do not fit fit well in the structure in the classical structure of imperative code where I",
    "start": "666590",
    "end": "673640"
  },
  {
    "text": "have a sequence of statements where I have complexity complexes control logic with ifs and tries and force",
    "start": "673640",
    "end": "681080"
  },
  {
    "text": "it fits well when I'm using a different style of programming namely when I'm",
    "start": "681080",
    "end": "686660"
  },
  {
    "text": "using function composition and I am using expressions and not sequences of statements it's typical instead of doing",
    "start": "686660",
    "end": "695570"
  },
  {
    "text": "fours I will do for instance zip or a flat map or a map they impose a",
    "start": "695570",
    "end": "701060"
  },
  {
    "text": "different programming style it's it's not necessarily bad it's just an observation it's a different programming",
    "start": "701060",
    "end": "708050"
  },
  {
    "text": "style which comes with a cost sometimes this is good sometimes for instance it",
    "start": "708050",
    "end": "713720"
  },
  {
    "text": "doesn't fit the team or the type of developers that that we have and introduces some issues I worked in a in",
    "start": "713720",
    "end": "724340"
  },
  {
    "text": "a recent project where we had a fully synchronous pipeline the good thing was",
    "start": "724340",
    "end": "730940"
  },
  {
    "text": "that we didn't add any production issues with lack of threat none whatsoever",
    "start": "730940",
    "end": "736850"
  },
  {
    "text": "so the system was always responsive threads were always available because it",
    "start": "736850",
    "end": "743030"
  },
  {
    "text": "was completely forbidden to block a thread no one was allowed to do that",
    "start": "743030",
    "end": "749380"
  },
  {
    "text": "what was the problem the problem was that the code was spread with flat maps",
    "start": "749380",
    "end": "755600"
  },
  {
    "text": "we were using our rx Java and one of the core composition functions that we have",
    "start": "755600",
    "end": "762620"
  },
  {
    "text": "in our X Java is flat map and when I try to understand a business concern to try",
    "start": "762620",
    "end": "768770"
  },
  {
    "text": "to look into the code to try to find out that business issue was being solved all",
    "start": "768770",
    "end": "774320"
  },
  {
    "text": "that I found was flat naps because structural issues that were or",
    "start": "774320",
    "end": "781990"
  },
  {
    "text": "non-functional issues required to do with the synchrony were spread around",
    "start": "781990",
    "end": "787670"
  },
  {
    "text": "all the code so the challenge here is to create code it doesn't block threats",
    "start": "787670",
    "end": "795140"
  },
  {
    "start": "790000",
    "end": "790000"
  },
  {
    "text": "because threads are costly and some threads are special while still using the same classical",
    "start": "795140",
    "end": "801750"
  },
  {
    "text": "imparative synchronous coding style where I have a four if I call a function",
    "start": "801750",
    "end": "807390"
  },
  {
    "text": "or receive eval I don't receive a future of a value I call function I receive a value and and",
    "start": "807390",
    "end": "812910"
  },
  {
    "text": "and I can code using the same principles that I always did so how can this be",
    "start": "812910",
    "end": "820589"
  },
  {
    "text": "achieved a very popular approach",
    "start": "820589",
    "end": "825920"
  },
  {
    "text": "introduced by c-sharp a couple of years ago was to use a single weight and it's",
    "start": "825920",
    "end": "831270"
  },
  {
    "text": "it's very popular not only c-sharp provides a single weight but also",
    "start": "831270",
    "end": "836459"
  },
  {
    "text": "JavaScript now provides a sync await I think peyten also provides a sync await so and other languages are considering",
    "start": "836459",
    "end": "844589"
  },
  {
    "text": "variations of a single white to resolve the issue and when I heard about Kotlin",
    "start": "844589",
    "end": "852839"
  },
  {
    "text": "and I heard about the fact that Kotlin was trying to solve this issue as well my first reaction was okay they are",
    "start": "852839",
    "end": "859140"
  },
  {
    "text": "going to use the sync await as well so it's going to be similar to C sharp and and if Kotlin at the sync await or the",
    "start": "859140",
    "end": "868440"
  },
  {
    "text": "same flavor of a sync awaited c-sharp in JavaScript EV it would be something like this so I would have the same for I",
    "start": "868440",
    "end": "876410"
  },
  {
    "text": "would sprinkle that magical weight after obtaining the future which converts the",
    "start": "876410",
    "end": "883649"
  },
  {
    "text": "future into the value that the future represents without blocking a thread however I pay a cost I need to annotate",
    "start": "883649",
    "end": "892279"
  },
  {
    "text": "the function with that prefix the sink and the function still returns the",
    "start": "892279",
    "end": "897839"
  },
  {
    "text": "future which is something good because in the last line I am returning an int",
    "start": "897839",
    "end": "903329"
  },
  {
    "text": "but the signature of the function says that it returns a future of an int so if",
    "start": "903329",
    "end": "910380"
  },
  {
    "text": "it was in c-sharp it will be a task event if it was in JavaScript it will be",
    "start": "910380",
    "end": "916050"
  },
  {
    "text": "a promise so I returned a value but the function returns a future of that value",
    "start": "916050",
    "end": "924170"
  },
  {
    "text": "and at the sink there is a implementation detail",
    "start": "925430",
    "end": "931700"
  },
  {
    "text": "that that that aspect is going to be important when we compare it with Kotlin so the asynch doesn't show up on the",
    "start": "931700",
    "end": "939800"
  },
  {
    "text": "color it's just the way it's just it's just me forming the compiler that the",
    "start": "939800",
    "end": "945530"
  },
  {
    "text": "compilation of this function needs to be done a little bit different differently",
    "start": "945530",
    "end": "951230"
  },
  {
    "text": "so that I can use the oh wait operator so when I'm using a sync oh wait each",
    "start": "951230",
    "end": "957350"
  },
  {
    "text": "function still returned the future however the calling function can use a",
    "start": "957350",
    "end": "963230"
  },
  {
    "text": "white to convert the future into the value that is represented by by the future and the thing is that a private",
    "start": "963230",
    "end": "971600"
  },
  {
    "text": "implementation detail however Kotlin decided to follow a different path and",
    "start": "971600",
    "end": "978880"
  },
  {
    "text": "the pass was based on the concept of core routine x' core routines are a rather old concept I",
    "start": "978880",
    "end": "987320"
  },
  {
    "text": "think the first historical reference that I could find is from 1963 and he",
    "start": "987320",
    "end": "996260"
  },
  {
    "text": "says that the core routine is a generalization of a subroutine of a function that can suspend and resume",
    "start": "996260",
    "end": "1003670"
  },
  {
    "text": "execution multiple times during its processing and how is this concept is",
    "start": "1003670",
    "end": "1011140"
  },
  {
    "text": "rather old concept implemented in Catalan there are four core concepts",
    "start": "1011140",
    "end": "1018460"
  },
  {
    "text": "that we'll go through during this talk the first one is the concept of a suspend function so this is the original",
    "start": "1018460",
    "end": "1028959"
  },
  {
    "text": "code I have a function a for a blocking operation the blocking operation returns",
    "start": "1028960",
    "end": "1036130"
  },
  {
    "text": "the result I do something with that result if I want to use score routines in Catalan I just do this I mark the",
    "start": "1036130",
    "end": "1047829"
  },
  {
    "start": "1044000",
    "end": "1044000"
  },
  {
    "text": "function as being a suspend function and then I make sure that that function that",
    "start": "1047830",
    "end": "1053470"
  },
  {
    "text": "I was called is also a suspend function that's it namely",
    "start": "1053470",
    "end": "1060630"
  },
  {
    "text": "two important things there isn't no await in sight so I'm not using awake",
    "start": "1060630",
    "end": "1068070"
  },
  {
    "text": "I'm just calling a function and obtaining a result the IDE will notice",
    "start": "1068070",
    "end": "1075840"
  },
  {
    "text": "that that call is going to be a special call and we'll put a marker if I'm using for instance IntelliJ it will put there",
    "start": "1075840",
    "end": "1083100"
  },
  {
    "text": "that that marker saying that that point is a suspension point and also the",
    "start": "1083100",
    "end": "1091320"
  },
  {
    "text": "function returns an int so the function does not return a future event the function returns in an int so I have a",
    "start": "1091320",
    "end": "1098130"
  },
  {
    "text": "function that during its execution will suspend processing without blocking a",
    "start": "1098130",
    "end": "1104610"
  },
  {
    "text": "thread and it still returns an int and not a future event and also I don't need",
    "start": "1104610",
    "end": "1110670"
  },
  {
    "text": "to use a white I don't need to not forget to use a wait if I'm in c-sharp",
    "start": "1110670",
    "end": "1118110"
  },
  {
    "text": "not using a way typically results in a compilation error because I have a task",
    "start": "1118110",
    "end": "1123720"
  },
  {
    "text": "of T and I need a T if I don't use a white compiler will shout at me but",
    "start": "1123720",
    "end": "1129870"
  },
  {
    "text": "faces and when I mean in JavaScript is rather easy for me to forget about your weight and then I only get an error",
    "start": "1129870",
    "end": "1136440"
  },
  {
    "text": "during runtime also if I need to call",
    "start": "1136440",
    "end": "1142470"
  },
  {
    "text": "this function I'll call the function directly so if I I have color one color one calls example example returns an int",
    "start": "1142470",
    "end": "1149790"
  },
  {
    "text": "and color one can use that int directly the same thing if I have another suspend",
    "start": "1149790",
    "end": "1156120"
  },
  {
    "text": "functioned caller two that calls color one that calls example so straight plain",
    "start": "1156120",
    "end": "1162690"
  },
  {
    "text": "code not a future in sight not a no wait in sight what what I have I have that",
    "start": "1162690",
    "end": "1172140"
  },
  {
    "text": "suspend marker or that suspend modifier on the functions and if I look if I try",
    "start": "1172140",
    "end": "1183630"
  },
  {
    "text": "to create a graphical representation of these I have fun suspend functions calling suspend functions and where each",
    "start": "1183630",
    "end": "1190590"
  },
  {
    "text": "function returns the value that I'm interested on so plain calls between suspend",
    "start": "1190590",
    "end": "1196890"
  },
  {
    "text": "functions plane types returns no future of tea no waiter knows think needed",
    "start": "1196890",
    "end": "1203510"
  },
  {
    "text": "sequential by default none blocking by default perfect so eventually we could",
    "start": "1203510",
    "end": "1211110"
  },
  {
    "text": "end the session now go have lunch we just need to sprinkle suspend",
    "start": "1211110",
    "end": "1216169"
  },
  {
    "text": "everywhere well things are a little bit more complex than this",
    "start": "1216169",
    "end": "1222290"
  },
  {
    "text": "the first complexity point appears when I need to interact with legacy code for",
    "start": "1222290",
    "end": "1229169"
  },
  {
    "text": "instance when I need to call a JVM function for instance the apache",
    "start": "1229169",
    "end": "1234390"
  },
  {
    "text": "httpclient or the sync HTTP client which",
    "start": "1234390",
    "end": "1241230"
  },
  {
    "text": "are not suspend functions they not do not provide a sense suspend functions they provide callback interfaces or",
    "start": "1241230",
    "end": "1248429"
  },
  {
    "text": "callback based interfaces or feature like objects so how do i interact",
    "start": "1248429",
    "end": "1254880"
  },
  {
    "text": "between suspend functions where everything is marvelous and everything is gray great with legacy API is and I",
    "start": "1254880",
    "end": "1265169"
  },
  {
    "text": "always have legacy API well the second concept is the concept",
    "start": "1265169",
    "end": "1271410"
  },
  {
    "text": "of suspend goroutine function and most",
    "start": "1271410",
    "end": "1277679"
  },
  {
    "text": "of the magic of kuru teens is in this suspend co-routine let's look at the",
    "start": "1277679",
    "end": "1284370"
  },
  {
    "text": "example so i have the same for loop but now i'm not calling a suspend function",
    "start": "1284370",
    "end": "1290309"
  },
  {
    "text": "I'm calling a legacy function that returns the future so I have a future",
    "start": "1290309",
    "end": "1295340"
  },
  {
    "text": "but I need the value that is represented by the future so how do I get from the",
    "start": "1295340",
    "end": "1302100"
  },
  {
    "text": "future to the value that is represented by the future I can try to use suspend",
    "start": "1302100",
    "end": "1307530"
  },
  {
    "text": "co-routine and suspend co-routine is a function that i call and then i provide",
    "start": "1307530",
    "end": "1315720"
  },
  {
    "text": "to that function another function that receives a continuation and and and the",
    "start": "1315720",
    "end": "1321510"
  },
  {
    "text": "first time that i saw this i stopped in what is going on here so I have a",
    "start": "1321510",
    "end": "1327010"
  },
  {
    "text": "function I call it passing a function which receives a continuation and what",
    "start": "1327010",
    "end": "1336130"
  },
  {
    "text": "am I doing with that continuation I'm using that continuation on a callback",
    "start": "1336130",
    "end": "1341620"
  },
  {
    "text": "that I create so basically I'm using a futures so I have to then accept which",
    "start": "1341620",
    "end": "1347920"
  },
  {
    "text": "is a variation of a continuous so what I'm doing is okay I'm passing a function",
    "start": "1347920",
    "end": "1353650"
  },
  {
    "text": "this function will receive a continuation and I am registering this continuation on the den except of the",
    "start": "1353650",
    "end": "1360880"
  },
  {
    "text": "future and saying okay when the value is available please resume the processing",
    "start": "1360880",
    "end": "1367840"
  },
  {
    "text": "using this continuation so I called suspend core routine inside span",
    "start": "1367840",
    "end": "1374770"
  },
  {
    "text": "coroutine I called future then accept and then the osing thread is released",
    "start": "1374770",
    "end": "1383790"
  },
  {
    "text": "when after 2 seconds 5 seconds 10 seconds the future completes it will",
    "start": "1383790",
    "end": "1391660"
  },
  {
    "text": "called the second callback that is in green it will be called on a different",
    "start": "1391660",
    "end": "1397929"
  },
  {
    "text": "red and that red will call continuation dot resume and that continuation dot",
    "start": "1397929",
    "end": "1405790"
  },
  {
    "text": "resume will return from the suspend core routine function or apparently return",
    "start": "1405790",
    "end": "1412540"
  },
  {
    "text": "from the suspend coroutines function so I entered the suspend core routine function in the yellow thread and I",
    "start": "1412540",
    "end": "1420490"
  },
  {
    "text": "leave the suspend co-routine function in the green thread in the meanwhile no",
    "start": "1420490",
    "end": "1426100"
  },
  {
    "text": "threads were armed no threads were blocked and then if I have a for the",
    "start": "1426100",
    "end": "1434140"
  },
  {
    "text": "processing continues on the form so no major issue that however if we look into",
    "start": "1434140",
    "end": "1441640"
  },
  {
    "text": "that code that I added it's not pretty code it's rather complex code it's perfectly normal that when we",
    "start": "1441640",
    "end": "1449679"
  },
  {
    "text": "you see these uuuu are puzzled and having these in our code bases it's not",
    "start": "1449679",
    "end": "1457000"
  },
  {
    "text": "but it's rather easy to put grab this code and put it inside for instance an",
    "start": "1457000",
    "end": "1464600"
  },
  {
    "text": "accession method called oh wait and then I just do this a sync operation",
    "start": "1464600",
    "end": "1471409"
  },
  {
    "text": "return future dot await so the function returning future returns",
    "start": "1471409",
    "end": "1477470"
  },
  {
    "text": "the future the dot await returns the value of the future we in out blocking",
    "start": "1477470",
    "end": "1484720"
  },
  {
    "text": "what is that await is is it a language feature no it's just an extension",
    "start": "1484720",
    "end": "1491659"
  },
  {
    "text": "function because in Kotlin we have accession functions so I just write an accession function and because in the",
    "start": "1491659",
    "end": "1500720"
  },
  {
    "text": "jvm world we have so many different flavors of futures because we have",
    "start": "1500720",
    "end": "1505789"
  },
  {
    "text": "complete all future we have listenable future we have defer result I can just",
    "start": "1505789",
    "end": "1513200"
  },
  {
    "text": "create extension methods for them and name it a weight and then I just do oh",
    "start": "1513200",
    "end": "1518570"
  },
  {
    "text": "wait what if I'm using a a P I that",
    "start": "1518570",
    "end": "1524149"
  },
  {
    "text": "doesn't provide me with a low weight exertion method I do it my own I do my own await taking advantage of the",
    "start": "1524149",
    "end": "1532159"
  },
  {
    "text": "building block which is suspend call routine so you may now say up but you",
    "start": "1532159",
    "end": "1540350"
  },
  {
    "text": "said that a weights were not used yes I said that the weights are not used",
    "start": "1540350",
    "end": "1546320"
  },
  {
    "text": "except when dealing with legacy objects with functions that are not suspend",
    "start": "1546320",
    "end": "1553330"
  },
  {
    "text": "functions that are based on features functions that are based on callbacks",
    "start": "1553330",
    "end": "1558399"
  },
  {
    "text": "and if you look into most Kotlin examples since they are rather small",
    "start": "1558399",
    "end": "1565299"
  },
  {
    "text": "eventually you will see and a weight there and you may start to sink that",
    "start": "1565299",
    "end": "1570649"
  },
  {
    "text": "okay I need to sprinkle the weights in my code no I may have a core of the code",
    "start": "1570649",
    "end": "1577309"
  },
  {
    "text": "which is suspend doesn't need a weight doesn't need futures on the boundary I",
    "start": "1577309",
    "end": "1583940"
  },
  {
    "text": "may need to use a weight or I may need to use the spanker routine because I'm",
    "start": "1583940",
    "end": "1589250"
  },
  {
    "text": "interface with something that within the future or with something that is based on callbacks the second issue that we have",
    "start": "1589250",
    "end": "1599900"
  },
  {
    "text": "is that we cannot call a suspend function from a regular function a",
    "start": "1599900",
    "end": "1606620"
  },
  {
    "text": "normal function a non suspend function cannot call a suspend function so",
    "start": "1606620",
    "end": "1612100"
  },
  {
    "text": "everything is great and amazing if I'm inside suspend functions when I",
    "start": "1612100",
    "end": "1617630"
  },
  {
    "text": "go outside I may need to use a weight when I try to get in I have a problem",
    "start": "1617630",
    "end": "1622730"
  },
  {
    "text": "and and why do I have a problem because when because when suspend functions are",
    "start": "1622730",
    "end": "1630350"
  },
  {
    "text": "compiled into byte code they use a style of compilation that is called",
    "start": "1630350",
    "end": "1636020"
  },
  {
    "text": "continuation passing style and this means that the signature of the function is change if you go look into the byte",
    "start": "1636020",
    "end": "1644120"
  },
  {
    "text": "code that is generated after compilation of that function I will see that it has a first parameter which is an integer",
    "start": "1644120",
    "end": "1651650"
  },
  {
    "text": "but it has a second parameter which is a continuation and it is this",
    "start": "1651650",
    "end": "1657910"
  },
  {
    "text": "transformation that occurs during compilation that makes it possible to",
    "start": "1657910",
    "end": "1664190"
  },
  {
    "text": "have suspension points that don't block threads however this only works if I'm",
    "start": "1664190",
    "end": "1671930"
  },
  {
    "text": "from a suspend function from to another suspend function if I am on a plain",
    "start": "1671930",
    "end": "1678110"
  },
  {
    "text": "regular function I need to use the third concept from code link or routines which",
    "start": "1678110",
    "end": "1685580"
  },
  {
    "text": "are coroutine builders so coroutine",
    "start": "1685580",
    "end": "1691490"
  },
  {
    "text": "builders allow me to go from regular functions into the marvelous world of",
    "start": "1691490",
    "end": "1697300"
  },
  {
    "text": "suspend functions and what they do occur in builder what they do is create a",
    "start": "1697300",
    "end": "1704780"
  },
  {
    "text": "curtain and start the corrosion so what is the core routine because until now",
    "start": "1704780",
    "end": "1711200"
  },
  {
    "text": "I've only talked about suspend functions suspend function defines the state",
    "start": "1711200",
    "end": "1717620"
  },
  {
    "text": "machine ocurro teen is an instance of that state machine ocurro teen built",
    "start": "1717620",
    "end": "1723860"
  },
  {
    "text": "creates and starts an instance of occur routine and I like to think of",
    "start": "1723860",
    "end": "1728929"
  },
  {
    "text": "coroutines like very lightweight read that don't take 1 megabyte or stack and",
    "start": "1728929",
    "end": "1735140"
  },
  {
    "text": "I can have thousands of them but they are state machines that are spinning",
    "start": "1735140",
    "end": "1741049"
  },
  {
    "text": "after I start them they are waiting for things to happen without blocking threads but they are state machines a",
    "start": "1741049",
    "end": "1750250"
  },
  {
    "text": "coroutine builder is a way to click to instantiate and start a curtain instance",
    "start": "1750250",
    "end": "1757370"
  },
  {
    "text": "and I have several coroutine builders I have one that is called launched when",
    "start": "1757370",
    "end": "1765139"
  },
  {
    "text": "the coroutine doesn't produce any value and the read the result of value or the",
    "start": "1765139",
    "end": "1770899"
  },
  {
    "text": "result type of a launch is a job a job is similar to a task in c-sharp why did",
    "start": "1770899",
    "end": "1778850"
  },
  {
    "text": "Kotlin introduce it yet another future like object because Kotlin targets JDK 6",
    "start": "1778850",
    "end": "1786730"
  },
  {
    "text": "because of Android and JDK 6 doesn't have complete all future so I did they",
    "start": "1786730",
    "end": "1793250"
  },
  {
    "text": "had to create their own also Kotlin aims to target other platforms so if I'm",
    "start": "1793250",
    "end": "1800360"
  },
  {
    "text": "using Kotlin native I will still F job available but completable future is not",
    "start": "1800360",
    "end": "1806870"
  },
  {
    "text": "available on iOS for instance and I have a thing which is a variation of launch",
    "start": "1806870",
    "end": "1813399"
  },
  {
    "text": "when I'm using a suspend when I'm calling a suspense function that returns the T and it returns a deferred a",
    "start": "1813399",
    "end": "1821149"
  },
  {
    "text": "deferred is similar to a task of T so the relation between job and deferred is similar to the relation between task",
    "start": "1821149",
    "end": "1827990"
  },
  {
    "text": "doesn't produce any value and task of T that produces a value so when a plane",
    "start": "1827990",
    "end": "1834649"
  },
  {
    "text": "function calls starts a core routine it receives a future like object so I still",
    "start": "1834649",
    "end": "1841370"
  },
  {
    "text": "have future like objects in the boundaries because they are nice to",
    "start": "1841370",
    "end": "1846409"
  },
  {
    "text": "interact with legacy components in the core I typically only have suspend",
    "start": "1846409",
    "end": "1852110"
  },
  {
    "text": "functions so let's at a concrete example a spring",
    "start": "1852110",
    "end": "1857990"
  },
  {
    "start": "1854000",
    "end": "1854000"
  },
  {
    "text": "controller and ler so I have a method I have an annotation saying so any get",
    "start": "1857990",
    "end": "1863780"
  },
  {
    "text": "request to slash example should be handled by this method and in this",
    "start": "1863780",
    "end": "1869270"
  },
  {
    "text": "method I'm calling example one if I do this I get a compilation error and the",
    "start": "1869270",
    "end": "1874640"
  },
  {
    "text": "compiler says no no no no get example is not a suspense function you cannot call",
    "start": "1874640",
    "end": "1880910"
  },
  {
    "text": "a suspense function from a non suspense action okay I could try to add the",
    "start": "1880910",
    "end": "1886820"
  },
  {
    "text": "suspend body fire on get example however spring at least spring five does not",
    "start": "1886820",
    "end": "1894410"
  },
  {
    "text": "understand that and it will not be considered as an HTTP handler so I need",
    "start": "1894410",
    "end": "1902390"
  },
  {
    "text": "to do this a little bit differently I need to create to put there a launch so",
    "start": "1902390",
    "end": "1908240"
  },
  {
    "text": "what I'm doing is that the get example will return a different result what is",
    "start": "1908240",
    "end": "1914180"
  },
  {
    "text": "the default is a feature like object from the Spring Framework and inside I",
    "start": "1914180",
    "end": "1920030"
  },
  {
    "text": "will do launch when the example returns I will put I will set the result of the",
    "start": "1920030",
    "end": "1925490"
  },
  {
    "text": "default or I will set the error result so I will complete the default result",
    "start": "1925490",
    "end": "1934280"
  },
  {
    "text": "they're not pretty code so if I look at",
    "start": "1934280",
    "end": "1939410"
  },
  {
    "text": "this so my logic is inside example one and I have lots of noise around it",
    "start": "1939410",
    "end": "1946120"
  },
  {
    "text": "however again this is Kotlin so it is easy it is easy to extract this into",
    "start": "1946120",
    "end": "1953800"
  },
  {
    "text": "infrastructure code we go here and just",
    "start": "1953800",
    "end": "1959290"
  },
  {
    "text": "create this so I have I created a function called the sync handler that",
    "start": "1959290",
    "end": "1964810"
  },
  {
    "text": "does this thing it receives a block that is a suspension function of unit to T",
    "start": "1964810",
    "end": "1972200"
  },
  {
    "text": "and then my business code will look like",
    "start": "1972200",
    "end": "1977590"
  },
  {
    "text": "get mapping to slash example get example equals the synchronous Handler and",
    "start": "1977590",
    "end": "1983000"
  },
  {
    "text": "inside I have the business code that I want to go so I'm just saying that I have a regular",
    "start": "1983000",
    "end": "1990840"
  },
  {
    "text": "function and then I have a suspend function and that sink and ler will do",
    "start": "1990840",
    "end": "1996960"
  },
  {
    "text": "the mapping between both the mapping needs to be specific to spring it uses a",
    "start": "1996960",
    "end": "2002240"
  },
  {
    "text": "spring specific type such as the FIR result it's easy encapsulated on the",
    "start": "2002240",
    "end": "2008600"
  },
  {
    "text": "function so the idea is that I have a",
    "start": "2008600",
    "end": "2014690"
  },
  {
    "text": "spring annular old world I need to use a core routine builder i an't into this",
    "start": "2014690",
    "end": "2020480"
  },
  {
    "text": "brave new world of suspend functions if I need to interact with the synchronous i/o using a legacy framework or a legacy",
    "start": "2020480",
    "end": "2029150"
  },
  {
    "text": "function that returns for instance the future I use await if I run this I can",
    "start": "2029150",
    "end": "2036980"
  },
  {
    "text": "see for instance that on the first green line I see the antlers starting and it",
    "start": "2036980",
    "end": "2045080"
  },
  {
    "text": "is starting on a thread from the thread from the container from in this case I'm",
    "start": "2045080",
    "end": "2050480"
  },
  {
    "text": "using Tomcat so it's a threat from Tomcat and then I can see that the other logs are due are done in different",
    "start": "2050480",
    "end": "2057290"
  },
  {
    "text": "threads or threads from a continent red pool they are not being blocked and in",
    "start": "2057290",
    "end": "2063020"
  },
  {
    "text": "the end I end the processing as I've said can we do better than this noise",
    "start": "2063020",
    "end": "2070429"
  },
  {
    "text": "around the gate example yes we can just create an L / a sink a sync function or",
    "start": "2070429",
    "end": "2077030"
  },
  {
    "text": "a sync annular function and then we just I don't like this since Cortland is so",
    "start": "2077030",
    "end": "2084290"
  },
  {
    "text": "it's it's very easy to do DSL in Catalan it's very easy to to create an NSYNC",
    "start": "2084290",
    "end": "2089628"
  },
  {
    "text": "handler that I can call like this okay",
    "start": "2089629",
    "end": "2096639"
  },
  {
    "text": "Carruth in scope last of the four in my",
    "start": "2096640",
    "end": "2101780"
  },
  {
    "text": "opinion fundamental concepts of coroutines and here I think starts another major",
    "start": "2101780",
    "end": "2111060"
  },
  {
    "text": "difference between a sink await in goroutines the problem that co-routine",
    "start": "2111060",
    "end": "2118410"
  },
  {
    "text": "scope is going to handle and to solve is not handled properly by a single weight",
    "start": "2118410",
    "end": "2125280"
  },
  {
    "text": "and in perhaps some of you will identify issues in the way that you are using a",
    "start": "2125280",
    "end": "2134010"
  },
  {
    "text": "single weight by identifying the problem that concur it in scope is trying to",
    "start": "2134010",
    "end": "2140040"
  },
  {
    "text": "solve and for that let's consider that I",
    "start": "2140040",
    "end": "2145970"
  },
  {
    "text": "set a timeout on the endler for one second my a synchronous business logic takes",
    "start": "2145970",
    "end": "2154349"
  },
  {
    "text": "three or four seconds but I set a timeout of one second meaning that after",
    "start": "2154349",
    "end": "2160740"
  },
  {
    "text": "one second the spring container will produce a response a five or three",
    "start": "2160740",
    "end": "2168000"
  },
  {
    "text": "response saying service not available and that HTTP request/response flow will",
    "start": "2168000",
    "end": "2175980"
  },
  {
    "text": "end and I can see that on the green line if I look into the locks on the green",
    "start": "2175980",
    "end": "2182430"
  },
  {
    "text": "line on a thread from the spring container it is saying timeout okay but",
    "start": "2182430",
    "end": "2191430"
  },
  {
    "text": "if I still continue into if I look into into the logs I see that after that",
    "start": "2191430",
    "end": "2196859"
  },
  {
    "text": "after one second after two seconds I still have the kuru teen doing things",
    "start": "2196859",
    "end": "2202700"
  },
  {
    "text": "the request already ended but the core routine is still doing things it will",
    "start": "2202700",
    "end": "2209250"
  },
  {
    "text": "produce a value which which is going to be ignored because the response was already produce it but the core routine",
    "start": "2209250",
    "end": "2216599"
  },
  {
    "text": "is still spinning III I like to",
    "start": "2216599",
    "end": "2222270"
  },
  {
    "text": "visualize the coroutine as a flow of",
    "start": "2222270",
    "end": "2227510"
  },
  {
    "text": "executions where each execution can open on different threads that's why the",
    "start": "2227510",
    "end": "2233160"
  },
  {
    "text": "different colors between those threads we have the suspension points suspicion",
    "start": "2233160",
    "end": "2238800"
  },
  {
    "text": "points do not block treads which is good ocurro teen builder just creates this instance and",
    "start": "2238800",
    "end": "2245460"
  },
  {
    "text": "makes makes it spin return the future that represents the core routine however",
    "start": "2245460",
    "end": "2251670"
  },
  {
    "text": "the lifecycle of that core routine is detached of the life cycle of the Singh",
    "start": "2251670",
    "end": "2258780"
  },
  {
    "text": "that created the core routine in this case I have a request I was handling the",
    "start": "2258780",
    "end": "2265980"
  },
  {
    "text": "request while handling the request I created a coroutine the request was",
    "start": "2265980",
    "end": "2273390"
  },
  {
    "text": "cancelled due to a timeout produces a response but nobody warned to the core",
    "start": "2273390",
    "end": "2280200"
  },
  {
    "text": "routine the current seems still there doing things and some of the times III",
    "start": "2280200",
    "end": "2285750"
  },
  {
    "text": "have these things on my code I don't noticed because they seem armful",
    "start": "2285750",
    "end": "2291990"
  },
  {
    "text": "but they are spending resources in",
    "start": "2291990",
    "end": "2298770"
  },
  {
    "text": "Kotlin this only happens if I use one",
    "start": "2298770",
    "end": "2305430"
  },
  {
    "text": "thing that how I will show later before that for cuddling to handle this they",
    "start": "2305430",
    "end": "2312900"
  },
  {
    "text": "introduced it the concept of a scope so when I use the core routine or sorry",
    "start": "2312900",
    "end": "2319650"
  },
  {
    "start": "2313000",
    "end": "2313000"
  },
  {
    "text": "when I use a curtain builder I always use a curtain builder in the context of",
    "start": "2319650",
    "end": "2325080"
  },
  {
    "text": "a scope I can use a special scope which",
    "start": "2325080",
    "end": "2330780"
  },
  {
    "text": "was the one that I use it before sync that let me see it's here",
    "start": "2330780",
    "end": "2335910"
  },
  {
    "text": "so the first yellow line you can see global scope global scope is a",
    "start": "2335910",
    "end": "2342570"
  },
  {
    "text": "particular type of scope that is global meaning that the core routine that I",
    "start": "2342570",
    "end": "2348630"
  },
  {
    "text": "create on global scope is not going to be attached to anything it's like a",
    "start": "2348630",
    "end": "2354180"
  },
  {
    "text": "daemon --thread most of the times I",
    "start": "2354180",
    "end": "2359370"
  },
  {
    "text": "should not use global scope I use it years just as an example and it's due to",
    "start": "2359370",
    "end": "2365760"
  },
  {
    "text": "the fact that I'm using global scope that I have this co-routine leakage the",
    "start": "2365760",
    "end": "2371220"
  },
  {
    "text": "result the the responses produce it and the curtain still keeps spinning so scopes allows me",
    "start": "2371220",
    "end": "2385740"
  },
  {
    "start": "2383000",
    "end": "2383000"
  },
  {
    "text": "to have parent-child relations between coroutines so I can have so because the",
    "start": "2385740",
    "end": "2393840"
  },
  {
    "text": "coroutine is also scoped when I create when I launch a curtain in Salonika",
    "start": "2393840",
    "end": "2399630"
  },
  {
    "text": "routine it will be in the same scope as a parent why is this scoping important",
    "start": "2399630",
    "end": "2406470"
  },
  {
    "text": "why is this parent-child relationship in important because it allows me to",
    "start": "2406470",
    "end": "2412940"
  },
  {
    "text": "automatically propagate cancellation so if the top curtain the one on the left",
    "start": "2412940",
    "end": "2420590"
  },
  {
    "text": "ends for instance it is consult it will propagate consolation to all the child",
    "start": "2420590",
    "end": "2427590"
  },
  {
    "text": "coroutines and the verse also happens is if one of the child coroutines throws an",
    "start": "2427590",
    "end": "2435570"
  },
  {
    "text": "error that error will propagate to the top one which will then cancel everyone",
    "start": "2435570",
    "end": "2440850"
  },
  {
    "text": "else so I have a way to stop everything that is bound to a specific scope when",
    "start": "2440850",
    "end": "2449460"
  },
  {
    "text": "that scope ends when when we deal with",
    "start": "2449460",
    "end": "2455040"
  },
  {
    "text": "this the major question and the art question is what the hell is the scope",
    "start": "2455040",
    "end": "2462050"
  },
  {
    "start": "2459000",
    "end": "2459000"
  },
  {
    "text": "in my application what should I use as a",
    "start": "2462050",
    "end": "2467250"
  },
  {
    "text": "scope the answer is it depends for",
    "start": "2467250",
    "end": "2472410"
  },
  {
    "text": "instance if I'm using an Android if I'm doing an Android application perhaps",
    "start": "2472410",
    "end": "2478010"
  },
  {
    "text": "activity can be used as a scope because if I launch an activity and I then I",
    "start": "2478010",
    "end": "2485310"
  },
  {
    "text": "press back the activity ends I want all the core teams that were created in the",
    "start": "2485310",
    "end": "2491220"
  },
  {
    "text": "context of that activity to stop III left the screen I don't want the Karoo",
    "start": "2491220",
    "end": "2498960"
  },
  {
    "text": "teens to still be spinning after I left or I may want to associate the scope to",
    "start": "2498960",
    "end": "2507690"
  },
  {
    "text": "other concept because I may want to leave the activity but I have a data",
    "start": "2507690",
    "end": "2513270"
  },
  {
    "text": "model or a service that keeps fetching information and I want to associate two",
    "start": "2513270",
    "end": "2518550"
  },
  {
    "text": "quarantines to that service it depends on the architecture of the application for instance a forma if I am on the",
    "start": "2518550",
    "end": "2525150"
  },
  {
    "text": "server side a good choice for a scope each DHCP request if D I create",
    "start": "2525150",
    "end": "2532050"
  },
  {
    "text": "coroutines in the context of a request the request ended I want to end all the",
    "start": "2532050",
    "end": "2537120"
  },
  {
    "text": "coroutines there isn't they don't have any reason to remain alive because the",
    "start": "2537120",
    "end": "2542520"
  },
  {
    "text": "scope where they were created was terminated so a scope it depends on the",
    "start": "2542520",
    "end": "2548970"
  },
  {
    "text": "context and it's a thing with a lifecycle and we want to correlate to associate the life cycle of the",
    "start": "2548970",
    "end": "2555450"
  },
  {
    "text": "coroutines with the life cycle of that thing I have",
    "start": "2555450",
    "end": "2561270"
  },
  {
    "text": "here an example using a scope for spring taking advantage of the different result",
    "start": "2561270",
    "end": "2568050"
  },
  {
    "text": "scope so coroutine scope is an interface to implement that interface I just need",
    "start": "2568050",
    "end": "2574530"
  },
  {
    "text": "to provide a getter with a job that's it and in this case what am I doing with",
    "start": "2574530",
    "end": "2580170"
  },
  {
    "text": "the job I am registering an on time out endler on the deferred result scope",
    "start": "2580170",
    "end": "2586700"
  },
  {
    "text": "meaning that when the request times out spring we'll call that Handler and I",
    "start": "2586700",
    "end": "2593250"
  },
  {
    "text": "will cancel the job and that will propagate that cancellation through any",
    "start": "2593250",
    "end": "2598770"
  },
  {
    "text": "coroutines that were created on that scope directly created or indirectly created and if I",
    "start": "2598770",
    "end": "2611340"
  },
  {
    "text": "look into the logs but I can see that on the first yellow line spring did timeout",
    "start": "2611340",
    "end": "2618930"
  },
  {
    "text": "and immediately after on the sort on the green line I have the goroutine being canceled and",
    "start": "2618930",
    "end": "2626340"
  },
  {
    "text": "everything stopping in a couple of milliseconds",
    "start": "2626340",
    "end": "2632030"
  },
  {
    "text": "so all any all in Urkel routines will be",
    "start": "2633140",
    "end": "2638580"
  },
  {
    "text": "also consult as long as scope is properly propagated namely as long as",
    "start": "2638580",
    "end": "2645600"
  },
  {
    "text": "global scope is not used and and and",
    "start": "2645600",
    "end": "2651260"
  },
  {
    "text": "global scope is a is an easy thing to use because it's it's a global object so",
    "start": "2651260",
    "end": "2659040"
  },
  {
    "text": "okay I need to launch a quarantine I call launch the compiler screams at me",
    "start": "2659040",
    "end": "2664560"
  },
  {
    "text": "saying no no no to launch something you need a scope mmm I need a scope why can",
    "start": "2664560",
    "end": "2670140"
  },
  {
    "text": "I use oh there is global scope global scope not launched then it works more or",
    "start": "2670140",
    "end": "2677010"
  },
  {
    "text": "less it works the core routines are created but the core routines are not",
    "start": "2677010",
    "end": "2683520"
  },
  {
    "text": "properly managed because when the scope ends the coroutines will still be there spinning",
    "start": "2683520",
    "end": "2690950"
  },
  {
    "text": "so um okay how does a sync await and all",
    "start": "2690950",
    "end": "2697050"
  },
  {
    "text": "this issue it doesn't so a sinker white",
    "start": "2697050",
    "end": "2702990"
  },
  {
    "text": "does not Endel this issue of proper cancellation well in c-sharp more or",
    "start": "2702990",
    "end": "2712710"
  },
  {
    "text": "less does it because in c-sharp we have the concept of cancellation token that I",
    "start": "2712710",
    "end": "2717990"
  },
  {
    "text": "can pass and then I can observe and if the cancellation token is active or if",
    "start": "2717990",
    "end": "2725300"
  },
  {
    "text": "cancellation was requested I can conceal my code",
    "start": "2725300",
    "end": "2732200"
  },
  {
    "text": "however it's it's it's not a very clean solution because I need to remember to",
    "start": "2732200",
    "end": "2738750"
  },
  {
    "text": "always pass the consolation token to everything that I call so cancellation",
    "start": "2738750",
    "end": "2745590"
  },
  {
    "text": "token needs to be viral I call a function I pass it the cancellation token any function that that function",
    "start": "2745590",
    "end": "2751620"
  },
  {
    "text": "calls needs best the cancellation token so that the constellation token is available on all the tree of a",
    "start": "2751620",
    "end": "2758430"
  },
  {
    "text": "synchronous functions that I called so",
    "start": "2758430",
    "end": "2763980"
  },
  {
    "text": "it's a model but it's not a very good model in JavaScript there isn't any model because in JavaScript there isn't",
    "start": "2763980",
    "end": "2771119"
  },
  {
    "text": "any predefined way of concealing promises it's it's under specification",
    "start": "2771119",
    "end": "2779640"
  },
  {
    "text": "but there isn't any consensus yet so I don't have any solution here I think",
    "start": "2779640",
    "end": "2788010"
  },
  {
    "text": "most of the code bases have this problem however the effect of this problem most",
    "start": "2788010",
    "end": "2795000"
  },
  {
    "text": "of the times is ezel I still have things running but since the result is ignored",
    "start": "2795000",
    "end": "2800490"
  },
  {
    "text": "so it isn't a locked it's just wasting resources but proper",
    "start": "2800490",
    "end": "2806490"
  },
  {
    "text": "cancellation is something that doesn't exist in JavaScript more or less exists",
    "start": "2806490",
    "end": "2814710"
  },
  {
    "text": "in c-sharp using constellation token in Kotlin it is the first-class concern",
    "start": "2814710",
    "end": "2821869"
  },
  {
    "text": "okay so how about concurrency in the name of this talk I've talked about the",
    "start": "2822079",
    "end": "2828329"
  },
  {
    "text": "synchronous processing but also about concurrency well what is concurrency",
    "start": "2828329",
    "end": "2834900"
  },
  {
    "start": "2832000",
    "end": "2832000"
  },
  {
    "text": "kakera C is the excess by multiple threads to move multiple shared data",
    "start": "2834900",
    "end": "2842000"
  },
  {
    "text": "meaning that when multiple threads access mutable shared data it needs to",
    "start": "2842000",
    "end": "2848520"
  },
  {
    "text": "have proper synchronization what is proper synchronization it depends I mean",
    "start": "2848520",
    "end": "2856319"
  },
  {
    "text": "need to use locks I may need to use synchronized in Java I may need to use monitors or smothers and in Java well",
    "start": "2856319",
    "end": "2864450"
  },
  {
    "text": "depends on the exact type of access that I'm doing but proper synchronization",
    "start": "2864450",
    "end": "2870329"
  },
  {
    "text": "needs to be in place and how about with coroutines because coroutines executes",
    "start": "2870329",
    "end": "2878160"
  },
  {
    "text": "in different threads so do I have a concurrency issue when using coroutines",
    "start": "2878160",
    "end": "2884760"
  },
  {
    "text": "do I have to explicitly add proper synchronization no because on coroutine",
    "start": "2884760",
    "end": "2894000"
  },
  {
    "text": "coroutine runs in multiple threads but run sequentially on the multiple",
    "start": "2894000",
    "end": "2899890"
  },
  {
    "text": "threats and the Karoo teen engines ensures that from a memory model",
    "start": "2899890",
    "end": "2905830"
  },
  {
    "text": "viewpoint there isn't weapons before relation between the threads meaning",
    "start": "2905830",
    "end": "2912760"
  },
  {
    "text": "that yes I have multiple threads accessing mutable data but on a",
    "start": "2912760",
    "end": "2919000"
  },
  {
    "text": "sequential fashion meaning that there isn't any concurrent access",
    "start": "2919000",
    "end": "2925450"
  },
  {
    "text": "I don't need proper synchronization which is good to know so I can think of",
    "start": "2925450",
    "end": "2934960"
  },
  {
    "text": "a core routine from a synchronization viewpoint as a single thread however if",
    "start": "2934960",
    "end": "2942460"
  },
  {
    "text": "I have multiple co-routines accessing the same data for instance classical",
    "start": "2942460",
    "end": "2948970"
  },
  {
    "text": "example I'm doing requests to the outside so I have incoming requests I'm",
    "start": "2948970",
    "end": "2954130"
  },
  {
    "text": "doing outside requests or outbound requests but I want to use a cash for",
    "start": "2954130",
    "end": "2960010"
  },
  {
    "text": "the outbound requests a cache is going to be mutable share a data so each",
    "start": "2960010",
    "end": "2966400"
  },
  {
    "text": "incoming request will produce a crew team to go outside I will have multiple",
    "start": "2966400",
    "end": "2972220"
  },
  {
    "text": "co-routines trying to get things from the cache trying to insert things into the cache if I have multiple core",
    "start": "2972220",
    "end": "2979270"
  },
  {
    "text": "routines I have concurrent access so I need proper synchronization only if I",
    "start": "2979270",
    "end": "2989050"
  },
  {
    "text": "have multiple coroutines how can I handle this proper synchronization well",
    "start": "2989050",
    "end": "2996870"
  },
  {
    "text": "the story right now it's not clear enough one thing that it's true is that",
    "start": "2996870",
    "end": "3006090"
  },
  {
    "text": "we need proper synchronization beware that if I try to use the traditional",
    "start": "3006090",
    "end": "3012800"
  },
  {
    "text": "synchronization mechanisms that I have on on our platforms I may run into",
    "start": "3012800",
    "end": "3018810"
  },
  {
    "text": "issues because most of the traditional synchronization primitives are blocking",
    "start": "3018810",
    "end": "3023990"
  },
  {
    "text": "so if I try to use this smurfer it will block for instance in",
    "start": "3023990",
    "end": "3030630"
  },
  {
    "text": "sharp I have I think he Slim's mother or smother slim that provides a synchronous",
    "start": "3030630",
    "end": "3037650"
  },
  {
    "text": "operations operations that result on a task of something in Java we don't have",
    "start": "3037650",
    "end": "3043769"
  },
  {
    "text": "that however the Catalan library already provides me with something one of those",
    "start": "3043769",
    "end": "3050849"
  },
  {
    "text": "some things is a mutex interface that provides mutual exclusion where the loc",
    "start": "3050849",
    "end": "3058369"
  },
  {
    "text": "method is also a suspend method meaning that I can acquire a lock and not block",
    "start": "3058369",
    "end": "3065579"
  },
  {
    "text": "a thread while waiting for that lock to be available also Kotlin or the one of",
    "start": "3065579",
    "end": "3076410"
  },
  {
    "text": "the Catalan X libraries I was going to say the standard library but I don't",
    "start": "3076410",
    "end": "3081539"
  },
  {
    "text": "think it is the standard library it's one of the extensions that are under the package code Linux also provides me with",
    "start": "3081539",
    "end": "3089009"
  },
  {
    "text": "a channel interface and this channel interface is like a cue and provides me",
    "start": "3089009",
    "end": "3095460"
  },
  {
    "text": "with the suspend send and the suspend receive meaning that I can send things",
    "start": "3095460",
    "end": "3100559"
  },
  {
    "text": "to a queue I can extract things from queue without blocking while sending or",
    "start": "3100559",
    "end": "3106230"
  },
  {
    "text": "receiving namely what the Kotlin team is",
    "start": "3106230",
    "end": "3113579"
  },
  {
    "text": "trying to create and it's still experimental in Kotlin 1.3 is to use a",
    "start": "3113579",
    "end": "3119640"
  },
  {
    "text": "technique where we handle the issue of synchronization by not having shared",
    "start": "3119640",
    "end": "3126960"
  },
  {
    "text": "state between co-routines so what they are recommending is that i",
    "start": "3126960",
    "end": "3134240"
  },
  {
    "text": "confine shared multiple data to a single core routine so if I have a cache I",
    "start": "3134240",
    "end": "3141329"
  },
  {
    "text": "don't have multiple core routines trying to put things inside the cache and grab",
    "start": "3141329",
    "end": "3146549"
  },
  {
    "text": "things from the cache I have a single core routine that owns the cache the",
    "start": "3146549",
    "end": "3151950"
  },
  {
    "text": "cache is private to that core routine and I have other coroutines communicating with that core routine to",
    "start": "3151950",
    "end": "3158630"
  },
  {
    "text": "grab things of the cache things there so it's a nectar like",
    "start": "3158630",
    "end": "3165560"
  },
  {
    "text": "programming model where mutable state is private to a nectar and what is a nectar",
    "start": "3165560",
    "end": "3173780"
  },
  {
    "text": "is a coroutine it's still experimental in 1.3 meaning that there is something",
    "start": "3173780",
    "end": "3179810"
  },
  {
    "text": "available but it is highly likely that the signatures the programming model",
    "start": "3179810",
    "end": "3185630"
  },
  {
    "text": "will change one important thing to bear in mind is that a quarantine should not",
    "start": "3185630",
    "end": "3193550"
  },
  {
    "text": "walk threads and we can have thousands of quarantine so having for instance a core routine",
    "start": "3193550",
    "end": "3199550"
  },
  {
    "text": "handling a cache is not the same thing of having a thread ending the cache",
    "start": "3199550",
    "end": "3206030"
  },
  {
    "text": "because the thread is costly occur routine isn't okay almost ending up just",
    "start": "3206030",
    "end": "3214490"
  },
  {
    "text": "to highlight some differences between the asynch await model and the Kotlin",
    "start": "3214490",
    "end": "3220970"
  },
  {
    "text": "model this example is based on an example by Raman ilizarov on on code",
    "start": "3220970",
    "end": "3226550"
  },
  {
    "text": "link of 2017 I believe and on the left",
    "start": "3226550",
    "end": "3235310"
  },
  {
    "text": "side I have do you think await model on the right side I have dr. cotton model at the example is an example where I",
    "start": "3235310",
    "end": "3242420"
  },
  {
    "text": "need to load two images and then do something with both images if I want",
    "start": "3242420",
    "end": "3250000"
  },
  {
    "text": "sequential non-blocking processing and I'm on c-sharp or JavaScript I need to",
    "start": "3250000",
    "end": "3255500"
  },
  {
    "text": "put your weight so I do load image I receive a task off of an image and then",
    "start": "3255500",
    "end": "3260900"
  },
  {
    "text": "I do oh wait I do a second load image I receive a task of an image and I do",
    "start": "3260900",
    "end": "3266210"
  },
  {
    "text": "weight and then I do something with the images if I am in Kotlin I just called",
    "start": "3266210",
    "end": "3272480"
  },
  {
    "text": "load image because load image is a suspend function so I just call load image so by default in Kotlin the",
    "start": "3272480",
    "end": "3282980"
  },
  {
    "text": "behavior is sequential however by default the behavior when",
    "start": "3282980",
    "end": "3288440"
  },
  {
    "text": "using a single white is not sequential if I look into",
    "start": "3288440",
    "end": "3293780"
  },
  {
    "text": "the lower part if I called load image so I set f1 equals load image f2 equals",
    "start": "3293780",
    "end": "3300740"
  },
  {
    "text": "load image and I don't do the oh wait I will have both load images running so",
    "start": "3300740",
    "end": "3310300"
  },
  {
    "text": "without putting there and explicit await the default behavior is parallel",
    "start": "3310300",
    "end": "3317810"
  },
  {
    "text": "for instance if load image access shared data I will have a concurrency issue",
    "start": "3317810",
    "end": "3324560"
  },
  {
    "text": "there so by default on a sync await model I have concurrency issues you may",
    "start": "3324560",
    "end": "3333560"
  },
  {
    "text": "ask but what if I want to do the same thing in Kotlin can I do it yes but you",
    "start": "3333560",
    "end": "3341330"
  },
  {
    "text": "need to be explicit about it you need to create two coroutines that will execute",
    "start": "3341330",
    "end": "3346760"
  },
  {
    "text": "the first load image and the second load image in this case since the goroutines",
    "start": "3346760",
    "end": "3352340"
  },
  {
    "text": "are returning something I need to use the sync function ok so if I want a",
    "start": "3352340",
    "end": "3359800"
  },
  {
    "text": "current parallel behavior I need to explicitly require it which is in my",
    "start": "3359800",
    "end": "3367730"
  },
  {
    "text": "opinion a safer approach so concurrency",
    "start": "3367730",
    "end": "3373010"
  },
  {
    "text": "is explicit not only concurrency is",
    "start": "3373010",
    "end": "3378350"
  },
  {
    "text": "explicit I need to turn it on explicitly by colleague a sync concurrency is",
    "start": "3378350",
    "end": "3386620"
  },
  {
    "text": "structured and what does this mean it means that when I'm branching out",
    "start": "3386620",
    "end": "3393170"
  },
  {
    "text": "creating concurrency I'm doing it in the context of a scope namely I can I I can",
    "start": "3393170",
    "end": "3402710"
  },
  {
    "text": "only call a sync if the context where I am already has a",
    "start": "3402710",
    "end": "3408080"
  },
  {
    "text": "scope so meaning that those thing calls that I have there on the right side are",
    "start": "3408080",
    "end": "3413480"
  },
  {
    "text": "being called in the context of scope meaning that if the scope where I am is",
    "start": "3413480",
    "end": "3419480"
  },
  {
    "text": "consult those load images will be automatically consult as well",
    "start": "3419480",
    "end": "3425920"
  },
  {
    "text": "and if you look there isn't any constellation talking inside the constellation of the load image will",
    "start": "3425920",
    "end": "3433000"
  },
  {
    "text": "happen automatically if the scope where those sinkholes was done is also",
    "start": "3433000",
    "end": "3440920"
  },
  {
    "text": "canceled so they call the Cortland",
    "start": "3440920",
    "end": "3446160"
  },
  {
    "text": "engineering team called this structured concurrency so four major concepts in my",
    "start": "3446700",
    "end": "3457180"
  },
  {
    "text": "opinion when reasoning about goroutines the concept of suspend functions the",
    "start": "3457180",
    "end": "3465579"
  },
  {
    "text": "concept of a suspend core routine is a very generic building block that I can",
    "start": "3465579",
    "end": "3472210"
  },
  {
    "text": "use to interact with the external world that is bedded in futures and bases in callbacks the concept of core routine",
    "start": "3472210",
    "end": "3480160"
  },
  {
    "text": "builder as a way to start to create and start a core team and finally perhaps",
    "start": "3480160",
    "end": "3487720"
  },
  {
    "text": "one of the most important concepts and one of the concepts that is more",
    "start": "3487720",
    "end": "3493170"
  },
  {
    "text": "different of the one that is provided by a single white is the concept of core",
    "start": "3493170",
    "end": "3499480"
  },
  {
    "text": "routine scope in the idea that unless I'm using global scope everything runs",
    "start": "3499480",
    "end": "3507130"
  },
  {
    "text": "bounded to a scope and that scope will imply propagation of cancellation so",
    "start": "3507130",
    "end": "3516809"
  },
  {
    "start": "3514000",
    "end": "3514000"
  },
  {
    "text": "some resources I have these examples on my github PAHs Velux on Kotlin",
    "start": "3516869",
    "end": "3524500"
  },
  {
    "text": "co-routines I will put the slides there I have a previous version of this presentation",
    "start": "3524500",
    "end": "3530530"
  },
  {
    "text": "that I did on the context they are there but now I've made some changes for today",
    "start": "3530530",
    "end": "3535690"
  },
  {
    "text": "I'll put them there as well I strongly recommend to videos by Raman a laser off",
    "start": "3535690",
    "end": "3541569"
  },
  {
    "text": "which was one of the engineers behind curtains on count link of 2017 and",
    "start": "3541569",
    "end": "3548170"
  },
  {
    "text": "Kotlin come 2018 namely there are two videos on the 2017 edition witches which",
    "start": "3548170",
    "end": "3554440"
  },
  {
    "text": "are very worthwhile to see there is also Colton's guide that",
    "start": "3554440",
    "end": "3559480"
  },
  {
    "text": "about these things and if you want to look this in action JetBrains is",
    "start": "3559480",
    "end": "3567010"
  },
  {
    "text": "creating a new web applications framework it's called Couture and and and",
    "start": "3567010",
    "end": "3573010"
  },
  {
    "text": "everything is Couture is around co-routines and suspend function so if i'm using spring the core of spring",
    "start": "3573010",
    "end": "3580510"
  },
  {
    "text": "doesn't use suspend function so I need to interface between callbacks and",
    "start": "3580510",
    "end": "3586450"
  },
  {
    "text": "futures and suspend functions if I'm using an HTTP client probably the HTTP",
    "start": "3586450",
    "end": "3592240"
  },
  {
    "text": "client from spring for instance doesn't use it's not just a suspend function so",
    "start": "3592240",
    "end": "3597310"
  },
  {
    "text": "I need to use a white to interface with it in Couture almost everything is",
    "start": "3597310",
    "end": "3603280"
  },
  {
    "text": "suspend because it is a web application framework that was done from the beginning using this model and I think",
    "start": "3603280",
    "end": "3612160"
  },
  {
    "text": "it's time to have lunch thank you very much for being here any questions that to you that you have questions yes",
    "start": "3612160",
    "end": "3622770"
  },
  {
    "text": "well the only tooling that I know is that they they they provide books into",
    "start": "3632380",
    "end": "3640700"
  },
  {
    "text": "the logging frameworks to show what is happening",
    "start": "3640700",
    "end": "3645950"
  },
  {
    "text": "so when because now typically logging",
    "start": "3645950",
    "end": "3651080"
  },
  {
    "text": "frameworks log the thread that issued the log but now I have two different",
    "start": "3651080",
    "end": "3657080"
  },
  {
    "text": "concepts I have the concept of thread and I have the concept of coroutine and I want to know the thread but more",
    "start": "3657080",
    "end": "3664130"
  },
  {
    "text": "importantly I want to know the idea of the core routine where something happens",
    "start": "3664130",
    "end": "3669470"
  },
  {
    "text": "so they instrument the logging so that I have it from information about both if I",
    "start": "3669470",
    "end": "3677840"
  },
  {
    "text": "have some profiling that detects blocking code well what I can speak from",
    "start": "3677840",
    "end": "3685010"
  },
  {
    "text": "my previous experiences not using coroutines but using other a synchronous programming model is that first it's",
    "start": "3685010",
    "end": "3695480"
  },
  {
    "text": "it's code review so and an explicit rule you cannot block anything sometimes we",
    "start": "3695480",
    "end": "3704030"
  },
  {
    "text": "need to block because you are using legacy api's that don't support the sink",
    "start": "3704030",
    "end": "3709040"
  },
  {
    "text": "a sink I know but each case is the case it needs to be analyzed by default we don't",
    "start": "3709040",
    "end": "3716000"
  },
  {
    "text": "block another good way of detecting places where we are blocking is",
    "start": "3716000",
    "end": "3721450"
  },
  {
    "text": "configuring thread pools with very very few threads so and and if I configure",
    "start": "3721450",
    "end": "3729080"
  },
  {
    "text": "for instance I used to run the apache httpclient with only two threads or as",
    "start": "3729080",
    "end": "3734500"
  },
  {
    "text": "many threads at CPU cores since they don't lock I don't need more threads",
    "start": "3734500",
    "end": "3740150"
  },
  {
    "text": "than CPU cores if any one of those threads blocks how we'll noticed so yeah",
    "start": "3740150",
    "end": "3746630"
  },
  {
    "text": "I I don't know any profiling tool that triggers of warning so in the past I've",
    "start": "3746630",
    "end": "3756109"
  },
  {
    "text": "used mostly peer review and doing non-functional testing with very few",
    "start": "3756109",
    "end": "3762230"
  },
  {
    "text": "traits thank you any more questions no once",
    "start": "3762230",
    "end": "3767610"
  },
  {
    "text": "again thank you for being here [Applause]",
    "start": "3767610",
    "end": "3777489"
  }
]