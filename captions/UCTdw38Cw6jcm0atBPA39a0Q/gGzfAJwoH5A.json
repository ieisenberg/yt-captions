[
  {
    "text": "you can't see the slides you can see them all right hey hey there's audio",
    "start": "6120",
    "end": "12179"
  },
  {
    "text": "there's light hi everyone uh Welcome to My Party",
    "start": "12179",
    "end": "18779"
  },
  {
    "text": "um my name is if you ask many people many Danes in this room",
    "start": "18779",
    "end": "24240"
  },
  {
    "text": "if you want to know how to really pronounce my last name you got to ask some of the Norwegian organizers of the conference I don't really know it's a",
    "start": "24240",
    "end": "30539"
  },
  {
    "text": "Norwegian one my American friends call me mads that sometimes you can't really hear the",
    "start": "30539",
    "end": "37140"
  },
  {
    "text": "S there I don't know what's up with that the um um but enough about me uh I work on C",
    "start": "37140",
    "end": "42660"
  },
  {
    "text": "sharp we're going to talk about C sharp uh how many people here use C sharp",
    "start": "42660",
    "end": "48780"
  },
  {
    "text": "okay one or two good so it's an object-oriented language you know it how many people don't just",
    "start": "48780",
    "end": "55379"
  },
  {
    "text": "it wasn't like a fool there's one there good good there okay all right",
    "start": "55379",
    "end": "61860"
  },
  {
    "text": "okay um so I'm probably gonna skew it a little to people who know C sharp and then and",
    "start": "61860",
    "end": "68040"
  },
  {
    "text": "but do ask you know to come up after if there's something like that was interesting didn't understand that bit",
    "start": "68040",
    "end": "74820"
  },
  {
    "text": "um that goes for all of you um so I work on c-sharp on the design of",
    "start": "74820",
    "end": "81420"
  },
  {
    "text": "the language and uh I will I'm going to show you some of",
    "start": "81420",
    "end": "86520"
  },
  {
    "text": "this in UC sharp every year it's kind of crazy I mean it's C sharp 12 next I",
    "start": "86520",
    "end": "91619"
  },
  {
    "text": "can't keep up anymore because I work on I always work on the next version except right now I work and then you know the",
    "start": "91619",
    "end": "97259"
  },
  {
    "text": "thing that's out there the thing that is about to ship and the thing that I'm currently like thinking about there are",
    "start": "97259",
    "end": "103020"
  },
  {
    "text": "three different versions and they change every year I'm too old for that I can't I can't keep track anymore but the the C",
    "start": "103020",
    "end": "108720"
  },
  {
    "text": "sharp that comes out in November is C shop 12 we'll show a few features from that and I also thought I'd spent some",
    "start": "108720",
    "end": "114840"
  },
  {
    "text": "of the time since it's kind of getting close and there's a lot of material out there about the next C sharp",
    "start": "114840",
    "end": "120000"
  },
  {
    "text": "um I thought we'd spend some time talking about things that we're thinking",
    "start": "120000",
    "end": "125219"
  },
  {
    "text": "about for the further future and that's of course with all the caveats this may never happen uh this is just a fever",
    "start": "125219",
    "end": "131760"
  },
  {
    "text": "dream in mads his head and it's never gonna you know but I I thought that would just be more fun and I'll do that",
    "start": "131760",
    "end": "139020"
  },
  {
    "text": "at the expense of some detail and not showing all the features of c-sharp 12. so I hope you're okay with that trade-off that feels like more a thing I",
    "start": "139020",
    "end": "146760"
  },
  {
    "text": "can do that other people would have a harder time kind of I have a hard enough time getting into my head but you know",
    "start": "146760",
    "end": "153239"
  },
  {
    "text": "harder for other people okay before we dive in I was going to say I",
    "start": "153239",
    "end": "159239"
  },
  {
    "text": "don't have slides I do but they have code on them so I hope it's okay but that's that's towards the end if we get",
    "start": "159239",
    "end": "165060"
  },
  {
    "text": "there uh just as a matter of kind of orienting yourself um",
    "start": "165060",
    "end": "170700"
  },
  {
    "text": "the docs page is really good now the Microsoft c-sharp docs are super good and actually as we are putting out new",
    "start": "170700",
    "end": "178739"
  },
  {
    "text": "features in preview most of these features now the ones I'm showing today are out in preview you can turn on Lang",
    "start": "178739",
    "end": "184620"
  },
  {
    "text": "version preview and use them if you want um and as they go out you know this this watch new and C sharp here fills up with",
    "start": "184620",
    "end": "192000"
  },
  {
    "text": "documentation for it so documentation is in preview at the same time as the uh as",
    "start": "192000",
    "end": "197879"
  },
  {
    "text": "the features I think that's pretty cool um go Bill Wagner who's over there um running that uh here's the c-sharp",
    "start": "197879",
    "end": "204900"
  },
  {
    "text": "language strategy if you if you're wondering like do they ever stop evolving do they stop putting new stuff",
    "start": "204900",
    "end": "209940"
  },
  {
    "text": "in c-sharp all the time at this break night Pace this is where you can go and and see no we don't",
    "start": "209940",
    "end": "216959"
  },
  {
    "text": "um like if you if you ever want to read that I'm not going to like go into details too much on this but if you ever",
    "start": "216959",
    "end": "222480"
  },
  {
    "text": "want to kind of read our statement that's supposed to be like a long-term statement for how we think about uh",
    "start": "222480",
    "end": "228720"
  },
  {
    "text": "evolving C sharp this is where to get it and the sort of some of the main points are we do evolve and innovate",
    "start": "228720",
    "end": "235500"
  },
  {
    "text": "aggressively because we want to be relevant to the developers and the domains of today not just of yesteryear",
    "start": "235500",
    "end": "243540"
  },
  {
    "text": "like we want to be a programming language that would be great for your next project and not just for your previous project so you got to lean in",
    "start": "243540",
    "end": "250980"
  },
  {
    "text": "there and we do um and on top of that um well we also have a commitment in",
    "start": "250980",
    "end": "257699"
  },
  {
    "text": "here to backwards compat we might touch on that a little later that's going to be fun um and um and then also uh the strong",
    "start": "257699",
    "end": "265860"
  },
  {
    "text": "role that the community has come to play in and the ever greater role at the community plays in the future of c-sharp",
    "start": "265860",
    "end": "272100"
  },
  {
    "text": "where we have I mean everything's open source I'll show you in a second we have more and more contributions not just in",
    "start": "272100",
    "end": "279180"
  },
  {
    "text": "terms of like increasingly not just in terms of little",
    "start": "279180",
    "end": "284220"
  },
  {
    "text": "ideas or not that they're also useful but also whole features that are being driven and contributed and even",
    "start": "284220",
    "end": "290580"
  },
  {
    "text": "implemented by community members that are not that do not work for Microsoft so that is really cool to see and um the",
    "start": "290580",
    "end": "298440"
  },
  {
    "text": "way we kind of um the way we kind of keep",
    "start": "298440",
    "end": "303900"
  },
  {
    "text": "um keep in touch with the sort of high touch place to get involved with c-sharp is is on GitHub that's the uh the",
    "start": "303900",
    "end": "311580"
  },
  {
    "text": "compiler repos called Roslin that's where the c-sharp compiler is implemented in C sharp and the vb1 and",
    "start": "311580",
    "end": "317340"
  },
  {
    "text": "VB actually if you're interested um and over here for instance we have this status page that everyone can go",
    "start": "317340",
    "end": "323220"
  },
  {
    "text": "and check out um it recently got a C sharp 12 category here which is all the features",
    "start": "323220",
    "end": "330720"
  },
  {
    "text": "big and small even like little Dell tester features that are shipping in c-sharp 12. so you can see it's a big",
    "start": "330720",
    "end": "336479"
  },
  {
    "text": "release if you just count here some of these are maybe not relevant to you some of these are tiny and they will just",
    "start": "336479",
    "end": "342419"
  },
  {
    "text": "like remove things that you didn't even know was a problem and some of them are indeed big features",
    "start": "342419",
    "end": "347759"
  },
  {
    "text": "um and then up here are the four things that we already have some developer",
    "start": "347759",
    "end": "352919"
  },
  {
    "text": "activity on that actually somebody's been working on this feature not just from a conceptual point of view but",
    "start": "352919",
    "end": "358740"
  },
  {
    "text": "actually from a code point of view so we're already like engaging on what might become C sharp 13.",
    "start": "358740",
    "end": "367020"
  },
  {
    "text": "um and some of those features are that's some of what I will touch on later in the talk",
    "start": "367020",
    "end": "372780"
  },
  {
    "text": "um and of course the c-sharp Lang which is the repo where we do the actual language design we used to be together that wasn't like a good fit",
    "start": "372780",
    "end": "379680"
  },
  {
    "text": "um so we ripped them apart we have a separate repo for c-sharp language design uh where the the code the",
    "start": "379680",
    "end": "385979"
  },
  {
    "text": "documents are documents right it's it's not it's the signs proposals meeting",
    "start": "385979",
    "end": "391740"
  },
  {
    "text": "notes that kind of stuff we don't there aren't a lot of Cs files in here um they're over in Roslyn and",
    "start": "391740",
    "end": "400020"
  },
  {
    "text": "um and that's just like our that's where we do our daily work just like on a coding project this is where the design",
    "start": "400020",
    "end": "405120"
  },
  {
    "text": "team we do our daily work you can see the latest the latest meetings you can see the notes and what we thought out of",
    "start": "405120",
    "end": "411180"
  },
  {
    "text": "those uh let's dive into this year um there's a the readme has a",
    "start": "411180",
    "end": "418740"
  },
  {
    "text": "kind of a has the agenda actually what are they going to discuss next uh looks like there are some things that we would",
    "start": "418740",
    "end": "425100"
  },
  {
    "text": "love to look at soon here are notes that I actually took the notes but I haven't published them yet because I was heading",
    "start": "425100",
    "end": "430860"
  },
  {
    "text": "out the door for this um and here you can just go and see what",
    "start": "430860",
    "end": "436380"
  },
  {
    "text": "what are they thinking about that's a high touch kind of Engagement and lots",
    "start": "436380",
    "end": "441419"
  },
  {
    "text": "and lots of discussion in here um so if you're really interested um this is where to go",
    "start": "441419",
    "end": "448979"
  },
  {
    "text": "that's probably enough for for looking at web pages now okay luckily Visual Studio is just behind",
    "start": "448979",
    "end": "455099"
  },
  {
    "text": "here it's got code in it uh we're going to do some coding I apologize it's a little bit I'm I'm kind of a tall guy",
    "start": "455099",
    "end": "461759"
  },
  {
    "text": "not for Dane but you know and um the code is far so I'm so your beautiful",
    "start": "461759",
    "end": "466979"
  },
  {
    "text": "audience and it's hard to look at you and at uh the screen at the same time so",
    "start": "466979",
    "end": "472440"
  },
  {
    "text": "sorry for like you having to watch my forehead a lot but we'll make it work okay so uh let's look at some of the",
    "start": "472440",
    "end": "480000"
  },
  {
    "text": "features that I just like heading out right now and we have they're features in different categories so I'm going to start with one that I'm not actually",
    "start": "480000",
    "end": "485880"
  },
  {
    "text": "going to show um because uh how many were here for Nick chapsis talk just uh just before",
    "start": "485880",
    "end": "493380"
  },
  {
    "text": "um yeah a good smearing of you um so uh I was walking through",
    "start": "493380",
    "end": "499919"
  },
  {
    "text": "I had breakfast with Layla and Irina there are also speakers here and and it",
    "start": "499919",
    "end": "505919"
  },
  {
    "text": "started to rain and they and then it stopped and they're like okay Now's the Time to go to the venue and I went up to",
    "start": "505919",
    "end": "512279"
  },
  {
    "text": "my huddle room to hotel room to grab my stuff and instead I sat down and looked at my presentation some more and it",
    "start": "512279",
    "end": "517380"
  },
  {
    "text": "started raining again so I was dripping wet as I came in and Nick was just talking about",
    "start": "517380",
    "end": "522479"
  },
  {
    "text": "um the improvements we made to um uh",
    "start": "522479",
    "end": "528480"
  },
  {
    "text": "interpolator string handlers which is uh so if you if you didn't hear it never",
    "start": "528480",
    "end": "533760"
  },
  {
    "text": "mind it's just an example of us there are several features that we do that can",
    "start": "533760",
    "end": "538980"
  },
  {
    "text": "help you improve the performance of your code if you were kind of low level or that can help Library writers do things",
    "start": "538980",
    "end": "546019"
  },
  {
    "text": "that make their users code more performant like features that in and of themselves most",
    "start": "546019",
    "end": "554279"
  },
  {
    "text": "c-sharp developers will not be using as in like putting them in in their syntax",
    "start": "554279",
    "end": "559560"
  },
  {
    "text": "but that many people will benefit from there's always a few of those features there are some in C sharp 12 as well I'm",
    "start": "559560",
    "end": "565320"
  },
  {
    "text": "not going to show any of them today they're they're a little bit more Niche but they're good for everyone so we do it anyway we try to not make c-sharp",
    "start": "565320",
    "end": "572519"
  },
  {
    "text": "have too many Niche features in general but Niche features that are for people that make things that build on them",
    "start": "572519",
    "end": "579480"
  },
  {
    "text": "faster that's great we want to support that we always did we always had unsafe code in c-sharp from from the GetGo and",
    "start": "579480",
    "end": "588720"
  },
  {
    "text": "then we've sort of done a transition where more and more of what you could do with unsafe code there's now a safe",
    "start": "588720",
    "end": "594600"
  },
  {
    "text": "alternative to and that does add complexity to a corner of the language but hopefully complexity that doesn't",
    "start": "594600",
    "end": "600300"
  },
  {
    "text": "affect most of you so that's one category then we do things that are just like as I said you didn't even realize this",
    "start": "600300",
    "end": "607980"
  },
  {
    "text": "was a problem but some people stumble on it all the time the stub their toes and things we just kind of clean up all the",
    "start": "607980",
    "end": "613200"
  },
  {
    "text": "time there's a bunch of that little kind of cleanup we're going to start with one of those as kind of like a palette cleanser and then there are those",
    "start": "613200",
    "end": "619620"
  },
  {
    "text": "features that I genuinely like you write nicest C sharp now you have less boilerplate that kind of stuff",
    "start": "619620",
    "end": "626580"
  },
  {
    "text": "um and I have two of those today that are really like I think meaningfully helpful even though",
    "start": "626580",
    "end": "633480"
  },
  {
    "text": "you can't technically do anything new with them they're meaningfully helpful in making your code not just have less",
    "start": "633480",
    "end": "640200"
  },
  {
    "text": "characters but be more abstracted and more elegant okay and then there's a category that's",
    "start": "640200",
    "end": "645540"
  },
  {
    "text": "pretty rare and should be pretty rare which is we actually change fundamentally what you",
    "start": "645540",
    "end": "651600"
  },
  {
    "text": "can express in C sharp it's like deep fundamental expressiveness that you",
    "start": "651600",
    "end": "657480"
  },
  {
    "text": "just couldn't do this before okay we did one of those in C sharp 11 which is uh",
    "start": "657480",
    "end": "663779"
  },
  {
    "text": "you can have static virtual methods and interfaces static virtual members and that becomes huge for various scenarios",
    "start": "663779",
    "end": "671519"
  },
  {
    "text": "um in you know implementing some design patterns more",
    "start": "671519",
    "end": "676620"
  },
  {
    "text": "beautifully it's it's huge for numerics it's huge for uh being able to build abstract static factories and that kind",
    "start": "676620",
    "end": "683339"
  },
  {
    "text": "of stuff and we really kind of open up a whole new way that you can abstract things",
    "start": "683339",
    "end": "689459"
  },
  {
    "text": "and there's another one of those a couple of those features that we're contemplating and one of them I hope to",
    "start": "689459",
    "end": "694500"
  },
  {
    "text": "get to in the end of this talk and and show you as well but but there's none of that in c2f12 there's not like a a",
    "start": "694500",
    "end": "700560"
  },
  {
    "text": "fundamentally expressiveness expanding feature and they shouldn't be one in every release that's just too much",
    "start": "700560",
    "end": "705959"
  },
  {
    "text": "okay let's go palette cleanser why can't you just feature so for some",
    "start": "705959",
    "end": "713519"
  },
  {
    "text": "reason you have a using Alias here for some reason you always had to put like a name type type that was declared",
    "start": "713519",
    "end": "720000"
  },
  {
    "text": "somewhere so I can't just in C sharp 11 and all the way up to C sharp 11 I can't",
    "start": "720000",
    "end": "725459"
  },
  {
    "text": "just say decimal here it's an error why well because you're using a keyword and there's supposed to",
    "start": "725459",
    "end": "731519"
  },
  {
    "text": "be a name there okay well can I just put decimal with capital D no because even though I have",
    "start": "731519",
    "end": "738480"
  },
  {
    "text": "usings in the background they don't apply to other usings duh so you have to write the whole thing",
    "start": "738480",
    "end": "744480"
  },
  {
    "text": "that's pretty annoying so we didn't solve that ladder problem but in C sharp",
    "start": "744480",
    "end": "750720"
  },
  {
    "text": "uh in C 12 at least we made it so that um so I'm going to upgrade to C sharp 12",
    "start": "750720",
    "end": "756360"
  },
  {
    "text": "now and stay there um at least you can write any old type expression",
    "start": "756360",
    "end": "762839"
  },
  {
    "text": "um so that's obviously the um the keyword types int and so on just",
    "start": "762839",
    "end": "768480"
  },
  {
    "text": "abbreviations not a big deal but it becomes a little more of a big deal uh when you think about like two full types",
    "start": "768480",
    "end": "774779"
  },
  {
    "text": "for instance let's say you have decimal comma decimal maybe you maybe the",
    "start": "774779",
    "end": "780480"
  },
  {
    "text": "elements of the tube will have names the this is the actual grade and this is the weight",
    "start": "780480",
    "end": "785639"
  },
  {
    "text": "assigned to it when you compute the GPA um stuff like that now that's now that's",
    "start": "785639",
    "end": "791880"
  },
  {
    "text": "legal and that was really you couldn't really do that before and of course for those of you all of you those of you",
    "start": "791880",
    "end": "797700"
  },
  {
    "text": "still using unsafe code you couldn't put pointers in an alias either and you still can't",
    "start": "797700",
    "end": "804180"
  },
  {
    "text": "because it's not in an unsafe context um but you can make the context unsafe",
    "start": "804180",
    "end": "810360"
  },
  {
    "text": "because now you can also put the unsafe keyword and then using Alias okay so so just like",
    "start": "810360",
    "end": "816000"
  },
  {
    "text": "this should have been like this all along it wasn't sorry now it is you're welcome",
    "start": "816000",
    "end": "821339"
  },
  {
    "text": "um so we do that kind of thing don't usually make a lot of fanfare about it but hey I thought I'd show you",
    "start": "821339",
    "end": "827399"
  },
  {
    "text": "one um so",
    "start": "827399",
    "end": "832620"
  },
  {
    "text": "let's get to something more meaty um and now we sometimes we end up in this awkward spot where we have this",
    "start": "832620",
    "end": "839519"
  },
  {
    "text": "feature we want to do a broad feature we want to do and the one I'm going to talk about next",
    "start": "839519",
    "end": "845459"
  },
  {
    "text": "primary Constructors was that in C sharp six like I can't even tell you how many years ago",
    "start": "845459",
    "end": "851339"
  },
  {
    "text": "we were going to put in primary Constructors to the language okay I'm going to show you what it is in a minute",
    "start": "851339",
    "end": "856680"
  },
  {
    "text": "and then we didn't we didn't get around to it there was some gnarliness and then",
    "start": "856680",
    "end": "861899"
  },
  {
    "text": "we put in records much later and we said okay at least records should have primary constructures so records in C",
    "start": "861899",
    "end": "868380"
  },
  {
    "text": "sharp as you can say they're primary certain let me tell you what a primary structure is it's this idea that you can",
    "start": "868380",
    "end": "874320"
  },
  {
    "text": "put Constructor parameters directly on the class and many other languages have this this is not like a new thing we",
    "start": "874320",
    "end": "880500"
  },
  {
    "text": "invented for C sharp and it's really convenient that you could get your Constructor parameters",
    "start": "880500",
    "end": "885839"
  },
  {
    "text": "directly on the class you a you don't have if the Constructor is simple you don't have to write a Constructor at all",
    "start": "885839",
    "end": "891540"
  },
  {
    "text": "like you just put the parameters there and they're in scope for your whole class and that means that members even",
    "start": "891540",
    "end": "896639"
  },
  {
    "text": "members even after initialization function members in the class can just",
    "start": "896639",
    "end": "902639"
  },
  {
    "text": "use those parameters they're just in scope and you just use them and you don't have to think about how did it get there you know in which order were",
    "start": "902639",
    "end": "909120"
  },
  {
    "text": "things assigned to the fields or whatever uh it's just there so that's kind of elegant I'm going to",
    "start": "909120",
    "end": "915720"
  },
  {
    "text": "need some water here that's nice and elegant and it's been in",
    "start": "915720",
    "end": "921660"
  },
  {
    "text": "C sharp for a couple of releases for records but records how many people how many uh",
    "start": "921660",
    "end": "928260"
  },
  {
    "text": "in this room have used records or looked at them fairly much yeah so you so about half of you records that sort of this",
    "start": "928260",
    "end": "935100"
  },
  {
    "text": "opinionated feature in c-sharp but like classes and Strikes are great but sometimes you want to express value",
    "start": "935100",
    "end": "943680"
  },
  {
    "text": "semantics rather than object reference semantics right you want a thing that",
    "start": "943680",
    "end": "948899"
  },
  {
    "text": "just represents value but value types like structs aren't good enough because for whatever reason you can't inherit",
    "start": "948899",
    "end": "955560"
  },
  {
    "text": "um and you can't build up change of them that kind of stuff right so you you need more expressiveness you want classes",
    "start": "955560",
    "end": "962839"
  },
  {
    "text": "also you know structs can be expensive to pass around a lot because they they can be big so classes are great but",
    "start": "962839",
    "end": "969600"
  },
  {
    "text": "classes have all the wrong behaviors for a value they compare that equality by reference and all that kind of stuff so",
    "start": "969600",
    "end": "976019"
  },
  {
    "text": "we so we made a whole like opinionated feature that if you put the record keyword on your class instruct then we",
    "start": "976019",
    "end": "981240"
  },
  {
    "text": "flip all the defaults to be value friendly well one of the value friendly defaults is that if you're a value you",
    "start": "981240",
    "end": "988320"
  },
  {
    "text": "want all the stuff that you you just have public State you're like flat",
    "start": "988320",
    "end": "993779"
  },
  {
    "text": "state right you're not encapsulated and smart and so when you put a primary structure",
    "start": "993779",
    "end": "999959"
  },
  {
    "text": "on a record all those things should just also become public properties on the thing and we even throw a deconstructor",
    "start": "999959",
    "end": "1006259"
  },
  {
    "text": "in there that matches it for good measure and so when I do this for a record then indeed it has ID and name and grades as",
    "start": "1006259",
    "end": "1013880"
  },
  {
    "text": "public properties on the on the object um which is great if you're in that area",
    "start": "1013880",
    "end": "1021440"
  },
  {
    "text": "but it's not great if you're trying to encapsulate something if what you're getting into your Constructor is actually like supposed to be secret or",
    "start": "1021440",
    "end": "1027500"
  },
  {
    "text": "you want to expose it in a different way like dependency injection anyone you know kind of sucks if you're like just",
    "start": "1027500",
    "end": "1033558"
  },
  {
    "text": "put that up there and you know so um so for uh let me put let me keep the",
    "start": "1033559",
    "end": "1039860"
  },
  {
    "text": "ID up here just for to make the point so when you do this for a record you should really use uppercase names here because then the properties get named in the",
    "start": "1039860",
    "end": "1046400"
  },
  {
    "text": "right convention and so on but in C sharp 12 you don't have to be a record anymore and when you are when you put a",
    "start": "1046400",
    "end": "1053059"
  },
  {
    "text": "primary Constructor on a non-record this whole exposing things as properties goes away so it's like a smaller feature but",
    "start": "1053059",
    "end": "1060320"
  },
  {
    "text": "better suited for you being in charge of what gets exposed and how classic optic grinder style right so",
    "start": "1060320",
    "end": "1066679"
  },
  {
    "text": "so um so you can see now that the ID is no longer available if you look at the if",
    "start": "1066679",
    "end": "1073280"
  },
  {
    "text": "you look at the object the only thing that's there is the property that I actually declare at the GPA",
    "start": "1073280",
    "end": "1078400"
  },
  {
    "text": "and these are no longer referenced because they are just privately in scope in the class and and nobody's accessing",
    "start": "1078400",
    "end": "1085700"
  },
  {
    "text": "them so we can but we can expose them we just have to do it ourselves and then we also",
    "start": "1085700",
    "end": "1090919"
  },
  {
    "text": "get get to decide exactly how we do it so let's expose the name",
    "start": "1090919",
    "end": "1095960"
  },
  {
    "text": "a public string name this is really bad for my posture you're",
    "start": "1095960",
    "end": "1101960"
  },
  {
    "text": "gonna you're gonna I'm gonna be sitting down after this for sure you're gonna have to bring me beer",
    "start": "1101960",
    "end": "1108440"
  },
  {
    "text": "um so I can do an auto property and then just take that parameter which is in",
    "start": "1108440",
    "end": "1113840"
  },
  {
    "text": "scope that Constructor parameter and I can just assign it in the initializer okay",
    "start": "1113840",
    "end": "1119539"
  },
  {
    "text": "so now I decided my storage and my representation I could also do something else let's do",
    "start": "1119539",
    "end": "1125539"
  },
  {
    "text": "the ID I could do that as a computed property so the the getter here is you know",
    "start": "1125539",
    "end": "1132080"
  },
  {
    "text": "expression Bodied properties just implicitly have a getter the getter here",
    "start": "1132080",
    "end": "1137179"
  },
  {
    "text": "will evaluate this expression this ID variable every time so that means after the object has been initialized and the",
    "start": "1137179",
    "end": "1144020"
  },
  {
    "text": "Constructor is done running the ID has to still be around and same down here you see the grade",
    "start": "1144020",
    "end": "1149720"
  },
  {
    "text": "grades that's being accessed in a function member as well so we have to so",
    "start": "1149720",
    "end": "1155360"
  },
  {
    "text": "from the language point of view we have to keep these things around after the thing that got them as a parameter is",
    "start": "1155360",
    "end": "1161480"
  },
  {
    "text": "over after the Constructor is over well that's familiar already in C sharp",
    "start": "1161480",
    "end": "1167179"
  },
  {
    "text": "from other places if you have lambdas or local functions they can see the",
    "start": "1167179",
    "end": "1173900"
  },
  {
    "text": "parameters to the enclosing method as well and they can also survive the lifetime of the enclosing method so what",
    "start": "1173900",
    "end": "1179539"
  },
  {
    "text": "we do there is what's generally called capture right we we find an object to",
    "start": "1179539",
    "end": "1185000"
  },
  {
    "text": "stash these supposedly local parameters in so that that object can can be kept",
    "start": "1185000",
    "end": "1190880"
  },
  {
    "text": "alive and can stick around after that method has run so you can have it so you can sign up an event that references for",
    "start": "1190880",
    "end": "1198740"
  },
  {
    "text": "instance sign up a delegate that you created from a Lambda that had something in scope that is no longer around",
    "start": "1198740",
    "end": "1205280"
  },
  {
    "text": "um well we keep it around we generate an object behind the scenes stick it in there keep that alive as long as you're",
    "start": "1205280",
    "end": "1210860"
  },
  {
    "text": "that's why that's why events can memory leak so bad right that's um",
    "start": "1210860",
    "end": "1216020"
  },
  {
    "text": "if you don't if you don't unsubscribe so we just want to do a similar thing here we want to do Implement capture and",
    "start": "1216020",
    "end": "1223160"
  },
  {
    "text": "where to stick this state we stick it in the object itself right",
    "start": "1223160",
    "end": "1228260"
  },
  {
    "text": "it's really part of object State you want to think about it as yes it's a parameter but it's part of object state",
    "start": "1228260",
    "end": "1234620"
  },
  {
    "text": "it's a parameter to the object that sticks around so behind the scenes we will generate some field it'll have an a",
    "start": "1234620",
    "end": "1240320"
  },
  {
    "text": "god-awful name that you can't say in C sharp and then we will implement the the",
    "start": "1240320",
    "end": "1247539"
  },
  {
    "text": "parameter axis in that way okay so you just so generally you don't have to",
    "start": "1247539",
    "end": "1252559"
  },
  {
    "text": "think about a thing it just happens it only happens if you use it though like this this name thing here doesn't get",
    "start": "1252559",
    "end": "1258200"
  },
  {
    "text": "captured it doesn't waste a field in the object because you'd only ever reference it during initialization but when you go",
    "start": "1258200",
    "end": "1264860"
  },
  {
    "text": "in and use it in in function members it gets captured and a field gets allocated",
    "start": "1264860",
    "end": "1270080"
  },
  {
    "text": "so sometimes you need to know that um this does still add to the footprint of",
    "start": "1270080",
    "end": "1276620"
  },
  {
    "text": "the object if you will and can have other effects like maybe your struct isn't unmanaged anymore or something",
    "start": "1276620",
    "end": "1282679"
  },
  {
    "text": "because of it but generally speaking we try to make it as transparent as possible",
    "start": "1282679",
    "end": "1287900"
  },
  {
    "text": "okay um actually any questions so far",
    "start": "1287900",
    "end": "1293200"
  },
  {
    "text": "all right oh there's one",
    "start": "1296419",
    "end": "1299919"
  },
  {
    "text": "what if I have different naming conventions for parameters and for parameter names and field names that's a",
    "start": "1302780",
    "end": "1308419"
  },
  {
    "text": "good question we thought about that some and uh it doesn't mean that",
    "start": "1308419",
    "end": "1314299"
  },
  {
    "text": "if you kind of mix uh capture and and and self-declared",
    "start": "1314299",
    "end": "1320480"
  },
  {
    "text": "Fields and some of the object state will be with one naming convention and the other with another right of course you",
    "start": "1320480",
    "end": "1326600"
  },
  {
    "text": "could choose to name your parameters with an underscore for instance if that's your naming convention feels but that looks ugly from the outside when",
    "start": "1326600",
    "end": "1332240"
  },
  {
    "text": "you're calling the Constructor so we did discuss oh should there be some feature that you could have an",
    "start": "1332240",
    "end": "1337340"
  },
  {
    "text": "internal name and an external name and all that kind of stuff and for now we were like let's wait and see",
    "start": "1337340",
    "end": "1342500"
  },
  {
    "text": "it might not be that much of a problem or maybe if you really insistent about it and you want to be consistent that",
    "start": "1342500",
    "end": "1348980"
  },
  {
    "text": "all like object state has the same naming convention maybe you just don't use capture maybe you're maybe you just",
    "start": "1348980",
    "end": "1356720"
  },
  {
    "text": "write the field declaration that says you know int ID",
    "start": "1356720",
    "end": "1364120"
  },
  {
    "text": "equals ID and then the oh and underscore here right so you're just saying I'm doing",
    "start": "1364120",
    "end": "1369740"
  },
  {
    "text": "this [Music] um myself still it's still easier than having to write",
    "start": "1369740",
    "end": "1376159"
  },
  {
    "text": "the Constructor yourself right you still get to just initialize it right there you still get benefit from the feature",
    "start": "1376159",
    "end": "1381260"
  },
  {
    "text": "you just don't get benefit from the capture part of it so that's the trade-off you get you get to make",
    "start": "1381260",
    "end": "1388340"
  },
  {
    "text": "um and and um you know there's an interesting thing here so this actually allows me to make",
    "start": "1388340",
    "end": "1394940"
  },
  {
    "text": "a point I was going to make later um you see there's a warning on the ID here um and that's because we realized that a",
    "start": "1394940",
    "end": "1401419"
  },
  {
    "text": "common failure mode and this happens in other languages as well that that have primary Constructors the common failure",
    "start": "1401419",
    "end": "1407059"
  },
  {
    "text": "mode is that you actually allocate your own storage for the thing and you and",
    "start": "1407059",
    "end": "1412220"
  },
  {
    "text": "you initialize it but somewhere else you accidentally capture the parameter which is right there in scope you accidentally say ID instead of underscore ID oops you",
    "start": "1412220",
    "end": "1420080"
  },
  {
    "text": "know and now you have two copies and you modify one it doesn't change the other and you know it's just that's a mess and",
    "start": "1420080",
    "end": "1425539"
  },
  {
    "text": "a waste so we decided to detect if you both if",
    "start": "1425539",
    "end": "1430700"
  },
  {
    "text": "you have a a parameter that gets captured like ID does here and also either get used uh as an initializer or",
    "start": "1430700",
    "end": "1439039"
  },
  {
    "text": "actually or gets passed to the base class then we're going to assume that this is a double storage kind of",
    "start": "1439039",
    "end": "1446539"
  },
  {
    "text": "bug that you have and we're going to give you a warning about it so we try to protect you from kind of that oops I I did both",
    "start": "1446539",
    "end": "1454280"
  },
  {
    "text": "situations all right yeah another question there",
    "start": "1454280",
    "end": "1460179"
  },
  {
    "text": "could you also put interfaces in what sorry on the you don't have a Constructor",
    "start": "1464179",
    "end": "1470659"
  },
  {
    "text": "anymore so in the parameter list yeah uh sure include any type of work any type you like and the DI will work with it",
    "start": "1470659",
    "end": "1476600"
  },
  {
    "text": "and d-o-d-i yeah um yeah this is so this is just a Constructor signature",
    "start": "1476600",
    "end": "1484340"
  },
  {
    "text": "and then we do some additional things with it so di should work the same it always does and this is indeed a",
    "start": "1484340",
    "end": "1489860"
  },
  {
    "text": "dependency injection is one of the places where we've hurt the most about I love primary Constructors",
    "start": "1489860",
    "end": "1497240"
  },
  {
    "text": "they will be perfect for dependency injection but they only work for records and Records suck for things that have",
    "start": "1497240",
    "end": "1503299"
  },
  {
    "text": "dependency injection you you've gone so tantalizing they closed and you didn't so it's a core scenario for us I haven't",
    "start": "1503299",
    "end": "1510260"
  },
  {
    "text": "played with it recently if it doesn't work definitely tell us because it's that's like a core scenario",
    "start": "1510260",
    "end": "1516919"
  },
  {
    "text": "um so good good question there uh we'll take one more and then I'll uh then I'll move on",
    "start": "1516919",
    "end": "1523360"
  },
  {
    "text": "um hello just for laziness purposes could we replace the lines 11 and 12",
    "start": "1527659",
    "end": "1532940"
  },
  {
    "text": "that you have there by something just in the primary Constructor like something",
    "start": "1532940",
    "end": "1538039"
  },
  {
    "text": "indicated public string name and gradiently gets public by Magic great",
    "start": "1538039",
    "end": "1543620"
  },
  {
    "text": "question and that's been discussed intensively like we um should we have",
    "start": "1543620",
    "end": "1550000"
  },
  {
    "text": "we've jumped onto a slippery slope slippery slope we have a few terms that",
    "start": "1550600",
    "end": "1556400"
  },
  {
    "text": "always come up in language design Cliff is one we'll get to that in a second slippery slope is another have we put",
    "start": "1556400",
    "end": "1563360"
  },
  {
    "text": "ourselves on a slippery slope now people are going to ask for more and more things in this primary Constructor uh",
    "start": "1563360",
    "end": "1569419"
  },
  {
    "text": "signature when is it gonna stop um and the good thing about releasing often is that we can just release the",
    "start": "1569419",
    "end": "1575900"
  },
  {
    "text": "Bare Bones here and then we can see then we get time to sort of see do we",
    "start": "1575900",
    "end": "1580940"
  },
  {
    "text": "want to take the next step do we want to for instance do we want to say that you could say public",
    "start": "1580940",
    "end": "1587000"
  },
  {
    "text": "string name and then it becomes then it becomes a proper member okay but it",
    "start": "1587000",
    "end": "1592220"
  },
  {
    "text": "should really be a property then if it's public but do you need to use property syntax in your parameter list that's kind of ugly but if you don't do we pick",
    "start": "1592220",
    "end": "1599000"
  },
  {
    "text": "a default for whether it's get or set or is it in you know what kind of property is it actually is it an auto property",
    "start": "1599000",
    "end": "1604880"
  },
  {
    "text": "and so now we're we're getting into opinionated space again which this was precisely about trying to stay out of",
    "start": "1604880",
    "end": "1611720"
  },
  {
    "text": "opinionated space a feature that that's good for all so it it just comes with this like Pandora's box of design",
    "start": "1611720",
    "end": "1619159"
  },
  {
    "text": "questions that we were happy to leave for our future cells you know maybe",
    "start": "1619159",
    "end": "1624320"
  },
  {
    "text": "until after I retire or something but it keeps coming up so it clearly and other languages have it there's also",
    "start": "1624320",
    "end": "1630860"
  },
  {
    "text": "like is it is it a good thing that some of the members the actual members that you can access from the outside are declared in like a",
    "start": "1630860",
    "end": "1637460"
  },
  {
    "text": "parameter list somewhere rather than on the at the actual top level of the class I'm not sure I mean that it's a discussion",
    "start": "1637460",
    "end": "1645080"
  },
  {
    "text": "so you you're absolutely right in pointing out that that is something that",
    "start": "1645080",
    "end": "1651320"
  },
  {
    "text": "you know is worth a serious discussion okay I'm gonna move on",
    "start": "1651320",
    "end": "1658279"
  },
  {
    "text": "um a little bit uh and just point out a few more things about this uh let's see actually maybe not that",
    "start": "1658279",
    "end": "1665120"
  },
  {
    "text": "much more I think we covered most of it um let me just think",
    "start": "1665120",
    "end": "1670240"
  },
  {
    "text": "oh yeah one more thing um of course you might wonder how do I yeah",
    "start": "1671960",
    "end": "1677480"
  },
  {
    "text": "a few things about relationship to other Constructors so you see that there's another Constructor in here that normal Constructor",
    "start": "1677480",
    "end": "1684080"
  },
  {
    "text": "declaration it delegates to the primary Constructor and indeed it has to like directly indirectly every if you have a",
    "start": "1684080",
    "end": "1690679"
  },
  {
    "text": "primary Constructor every other Constructor needs to call this uh and that's to make sure that those",
    "start": "1690679",
    "end": "1696559"
  },
  {
    "text": "parameters actually get passed at some point so they have a value when when they get captured and used in other",
    "start": "1696559",
    "end": "1702440"
  },
  {
    "text": "contexts um so the way to call base is actually",
    "start": "1702440",
    "end": "1707900"
  },
  {
    "text": "let's say I have a base I have prepared a base class for the purpose um the um",
    "start": "1707900",
    "end": "1714620"
  },
  {
    "text": "it takes a name that was very handy so I just pass Constructor arguments to the",
    "start": "1714620",
    "end": "1720200"
  },
  {
    "text": "base where the base class is it kind of fits together nicely um now",
    "start": "1720200",
    "end": "1726799"
  },
  {
    "text": "um one thing to one thing to be aware of is",
    "start": "1726799",
    "end": "1732860"
  },
  {
    "text": "that so that's the only thing that can call Base essentially and then it can call any Constructor in the base one thing to be aware of is if you were",
    "start": "1732860",
    "end": "1740480"
  },
  {
    "text": "um I have to delete the The Inheritance here if you're declaring a struct and not a class",
    "start": "1740480",
    "end": "1746179"
  },
  {
    "text": "um all struct can exist in as in a zero state right",
    "start": "1746179",
    "end": "1754520"
  },
  {
    "text": "you can get structs without running a Constructor you can say default or you can get an array of structs and they're",
    "start": "1754520",
    "end": "1759740"
  },
  {
    "text": "already in there and that in the zero State and even if you say new student",
    "start": "1759740",
    "end": "1765620"
  },
  {
    "text": "open friend close paren that'll translate into giving you the zero one unless it has a parameter-less",
    "start": "1765620",
    "end": "1772580"
  },
  {
    "text": "Constructor of its own and so you just so that also means that if you",
    "start": "1772580",
    "end": "1779299"
  },
  {
    "text": "have primary Constructor parameters that are captured those will also be zero you know",
    "start": "1779299",
    "end": "1784779"
  },
  {
    "text": "just as if they had been filled if you had them in fields it would be zero they're still zero even though they're",
    "start": "1784779",
    "end": "1789860"
  },
  {
    "text": "like parameters those parameters never came through nobody ever called to Constructor so they're just there I hope",
    "start": "1789860",
    "end": "1795860"
  },
  {
    "text": "that's not surprising but it's something to be aware of this does not protect you from that nothing protects you from that",
    "start": "1795860",
    "end": "1802898"
  },
  {
    "text": "um yeah good so um let me take this back to a class I",
    "start": "1803240",
    "end": "1809419"
  },
  {
    "text": "don't know if it matters but just to be on a safe side so I'm going to jump to the next feature which is collection expressions and I am very very very very",
    "start": "1809419",
    "end": "1816860"
  },
  {
    "text": "excited about collection expressions um and it might show I'm going to try",
    "start": "1816860",
    "end": "1822200"
  },
  {
    "text": "not to jump because who knows but uh so the the issue we're trying to go",
    "start": "1822200",
    "end": "1828679"
  },
  {
    "text": "for here is that even as we've unified many things into sharp over the years collection creating collections is kind",
    "start": "1828679",
    "end": "1835880"
  },
  {
    "text": "of like a mess it's a hodgepodge depending on your choice of collection you have to do different things to",
    "start": "1835880",
    "end": "1841760"
  },
  {
    "text": "create one with some elements in it here in this example for the grade array",
    "start": "1841760",
    "end": "1848480"
  },
  {
    "text": "there I've been using yeah arrays and so I have to create a new array this way and",
    "start": "1848480",
    "end": "1853640"
  },
  {
    "text": "the two places I'm calling here I'm actually being smart I'm calling it right at empty because I know that's more efficient because all empty arrays",
    "start": "1853640",
    "end": "1860120"
  },
  {
    "text": "of this element type are immutable it has zero",
    "start": "1860120",
    "end": "1865179"
  },
  {
    "text": "elements that you can sign into so we can share one okay great you have to know that trick though I mean David",
    "start": "1865179",
    "end": "1871039"
  },
  {
    "text": "where are you David you would have to have yeah you would have to have told them to do that right",
    "start": "1871039",
    "end": "1876380"
  },
  {
    "text": "um so um but if I if I decide ah you know what this should this should really be a list",
    "start": "1876380",
    "end": "1882020"
  },
  {
    "text": "of a list of grade let's write it backwards here list of grade instead well oops now all those things don't",
    "start": "1882020",
    "end": "1888980"
  },
  {
    "text": "work anymore um up here well maybe I can I can create a new list and then use a collection",
    "start": "1888980",
    "end": "1895520"
  },
  {
    "text": "initializer syntax which is kind of similar and that adds adds ads adds",
    "start": "1895520",
    "end": "1900559"
  },
  {
    "text": "every element individually to the list which is not super efficient but it works",
    "start": "1900559",
    "end": "1906320"
  },
  {
    "text": "well down here I can just call list.empty right oh wait there is no list at empty actually there's no list",
    "start": "1906320",
    "end": "1913059"
  },
  {
    "text": "unless you go and include the non-generic ones but it doesn't have an empty that's generic I can guarantee you",
    "start": "1913059",
    "end": "1918200"
  },
  {
    "text": "that there's no way of saying listed empty you just have to create an empty list so we will do new",
    "start": "1918200",
    "end": "1924200"
  },
  {
    "text": "and rely on the target type new to get to provide the rest but this okay and now great",
    "start": "1924200",
    "end": "1930500"
  },
  {
    "text": "now I want to actually no you know what it has to be an immutable array",
    "start": "1930500",
    "end": "1935779"
  },
  {
    "text": "and um surprisingly this compiles so you like how can so I'm using an",
    "start": "1935779",
    "end": "1942559"
  },
  {
    "text": "object initializer here it's calling add to mutate the immutable array multiple",
    "start": "1942559",
    "end": "1947659"
  },
  {
    "text": "times to put the new element in how does this not how does the compiler not complain about this well that's because",
    "start": "1947659",
    "end": "1953840"
  },
  {
    "text": "collection initializes they if there's an ad method they call it and they consider it good well immutable array",
    "start": "1953840",
    "end": "1960140"
  },
  {
    "text": "has an ad method it just doesn't behave the same way as other AD methods it doesn't mutate because hey I'm in",
    "start": "1960140",
    "end": "1966320"
  },
  {
    "text": "immutable array you know so don't so I'm not going to mutate you give me an element to my ad method I'm going to",
    "start": "1966320",
    "end": "1972200"
  },
  {
    "text": "give you a new immutable array that has that element added but collection initializes they call the",
    "start": "1972200",
    "end": "1978559"
  },
  {
    "text": "ad they get that thing back and they're like huh and they just throw it out",
    "start": "1978559",
    "end": "1984820"
  },
  {
    "text": "and you're left with the same immutable array that you created it has no elements in it",
    "start": "1984820",
    "end": "1992140"
  },
  {
    "text": "so and the fact we don't even warn you about this it's kind of a little bad actually um but instead we're going to give you a",
    "start": "1992960",
    "end": "1999500"
  },
  {
    "text": "new feature which is like I don't care how this is going to get initialized I care that it does you know the what not",
    "start": "1999500",
    "end": "2006220"
  },
  {
    "text": "the how that's one of our mottos from all the way back to link and the Syntax",
    "start": "2006220",
    "end": "2011500"
  },
  {
    "text": "for collection Expressions is this um square brackets they get Target type",
    "start": "2011500",
    "end": "2017559"
  },
  {
    "text": "to whatever is expected where you use them whether it's set use them as an argument or assign them to a variable or",
    "start": "2017559",
    "end": "2022720"
  },
  {
    "text": "whatever in all those places even if you cast it to a type then based on the type that they're being targeted to",
    "start": "2022720",
    "end": "2029740"
  },
  {
    "text": "they'll do the right thing okay that's and the right thing",
    "start": "2029740",
    "end": "2035080"
  },
  {
    "text": "is efficient that's our so our goal here is we'll just do the right thing for you and you",
    "start": "2035080",
    "end": "2040600"
  },
  {
    "text": "wouldn't have been able to do a better job yourself like in 99.7 case or something where you don't",
    "start": "2040600",
    "end": "2046299"
  },
  {
    "text": "have like super specialized domain knowledge so um",
    "start": "2046299",
    "end": "2051820"
  },
  {
    "text": "so what does that mean well for um it means that there are various ways that a type can enable itself to be",
    "start": "2051820",
    "end": "2060040"
  },
  {
    "text": "created with a collection expression okay if it's array that's just built into the compiler all right compiler",
    "start": "2060040",
    "end": "2066220"
  },
  {
    "text": "knows about arrays it's going to new up the array unless it's empty in which case it's going to call the radar empty right it's going to do the right thing",
    "start": "2066220",
    "end": "2073839"
  },
  {
    "text": "um if it's um and sort of so we sort of have a list of",
    "start": "2073839",
    "end": "2079419"
  },
  {
    "text": "prioritized list of things we want to try at the bottom of the list is okay if if a collection initializer would work",
    "start": "2079419",
    "end": "2086260"
  },
  {
    "text": "we're going to do that thing we're going to call add all those times but in between there are better options",
    "start": "2086260",
    "end": "2092560"
  },
  {
    "text": "um and in particular we introduced a new code pattern",
    "start": "2092560",
    "end": "2098619"
  },
  {
    "text": "um essentially you put an attribute on your collection and it tells you where to go to look for a factory method and then",
    "start": "2098619",
    "end": "2106119"
  },
  {
    "text": "the compiler will call that factory method with a span that it just uh created in the most efficient way it can",
    "start": "2106119",
    "end": "2111940"
  },
  {
    "text": "containing all the elements that you provided that's exactly the details of how it",
    "start": "2111940",
    "end": "2118359"
  },
  {
    "text": "creates that span can change over time but if you have a factory method that will take the span then we will give it",
    "start": "2118359",
    "end": "2124660"
  },
  {
    "text": "to you and you get all the elements in one fill swoop and you can do whatever you want with that um",
    "start": "2124660",
    "end": "2130140"
  },
  {
    "text": "so um so a list of t for instance is an ex or in in fact immutable array here is a",
    "start": "2130140",
    "end": "2137500"
  },
  {
    "text": "better example um actually now has that attribute and it will just do the right thing it will",
    "start": "2137500",
    "end": "2143260"
  },
  {
    "text": "create a beautiful immutable array uh as efficiently as it can and if it's not as efficient as it can",
    "start": "2143260",
    "end": "2149619"
  },
  {
    "text": "be David will tell us and it will be in the next release so",
    "start": "2149619",
    "end": "2155560"
  },
  {
    "text": "your next book yeah yeah we have to read your book we have to pay for your book we all have just we have one copy we'll",
    "start": "2155560",
    "end": "2161619"
  },
  {
    "text": "we'll pitch in for one copy that we'll keep around",
    "start": "2161619",
    "end": "2166440"
  },
  {
    "text": "so um so that's pretty good now that and we're kind of like sort of ready to ship like",
    "start": "2168820",
    "end": "2175720"
  },
  {
    "text": "this we're like okay but what about interfaces well interfaces can also they can also actually put that attribute on",
    "start": "2175720",
    "end": "2181000"
  },
  {
    "text": "and they can so the factory method can for for instance for I immutable list it's an interface but it's pretty fair",
    "start": "2181000",
    "end": "2188079"
  },
  {
    "text": "to assume that creating an immutable list is a good concrete type to choose so but it will point to a factory method",
    "start": "2188079",
    "end": "2194320"
  },
  {
    "text": "that makes that decision for it so the the even the interface decides but for the core collection interfaces in",
    "start": "2194320",
    "end": "2200380"
  },
  {
    "text": "c-sharp the ones that are sort of known by the language um",
    "start": "2200380",
    "end": "2205480"
  },
  {
    "text": "we felt we can do better so so let's say that you put let's put I",
    "start": "2205480",
    "end": "2212200"
  },
  {
    "text": "let's actually put inumerable here like a super simple interface I innumerable of grade",
    "start": "2212200",
    "end": "2219760"
  },
  {
    "text": "now all the pattern matching here is not going to work anymore list patterns don't work on I know mobile we should",
    "start": "2219760",
    "end": "2224859"
  },
  {
    "text": "probably fix that but that was not like a we'll get there I think um it's harder than with the other",
    "start": "2224859",
    "end": "2231220"
  },
  {
    "text": "collections but anyway you can see that the collection Expressions work out just fine here and that's because and we made",
    "start": "2231220",
    "end": "2238060"
  },
  {
    "text": "a choice what to do in the compiler what concrete type to create",
    "start": "2238060",
    "end": "2243220"
  },
  {
    "text": "when this happens but we're not going to tell you what choice we made we can keep this secret",
    "start": "2243220",
    "end": "2248560"
  },
  {
    "text": "or at least we're going to say that if you find out relying on that knowledge is not",
    "start": "2248560",
    "end": "2254440"
  },
  {
    "text": "supported why because especially for these read-only types like iron mobile",
    "start": "2254440",
    "end": "2260560"
  },
  {
    "text": "and I read only lists and I read only collection we can do so much better than just",
    "start": "2260560",
    "end": "2266140"
  },
  {
    "text": "creating list of t for instance from a performance point of view we can really kill you know if we if it has like fixed",
    "start": "2266140",
    "end": "2272859"
  },
  {
    "text": "length we can use that if it has um if it's empty of course we can reuse",
    "start": "2272859",
    "end": "2278140"
  },
  {
    "text": "the same thing and all kinds of other optimizations we can do to really really create the best",
    "start": "2278140",
    "end": "2284680"
  },
  {
    "text": "concrete thing that supports the iron mobile of T interface in your specific scenario",
    "start": "2284680",
    "end": "2291460"
  },
  {
    "text": "we with your the specific elements that you provided to it so we're reserving the right",
    "start": "2291460",
    "end": "2297099"
  },
  {
    "text": "to do the best even if it means a compiler generates new implementations of iron removal of T behind the scenes",
    "start": "2297099",
    "end": "2302440"
  },
  {
    "text": "doesn't even use Library once it generates private ones because that's the best way it can do it it uses inline",
    "start": "2302440",
    "end": "2307960"
  },
  {
    "text": "arrays which is a feature in C sharp 12 that's for performance I'm not going to show you whatever it can do whatever it",
    "start": "2307960",
    "end": "2313420"
  },
  {
    "text": "wants and it can change and do better release over release because we under specified it on purpose okay",
    "start": "2313420",
    "end": "2319480"
  },
  {
    "text": "sounds good so now you can write the most beautiful code the most like the",
    "start": "2319480",
    "end": "2325240"
  },
  {
    "text": "least vulnerable to these changes of concrete type and so on and also the most efficient with the same syntax at",
    "start": "2325240",
    "end": "2331060"
  },
  {
    "text": "the same time that's pretty cool right oh okay not not that cool all right thank you",
    "start": "2331060",
    "end": "2338500"
  },
  {
    "text": "thank you I'm just I'm only going to ask for one I asked for one now it's fine you can be you can go back to grumping it okay",
    "start": "2338500",
    "end": "2346839"
  },
  {
    "text": "uh in the future oh actually there's a few more things you can do uh already today it has a it has a",
    "start": "2346839",
    "end": "2354460"
  },
  {
    "text": "um spread mechanism so you can spread in some other collection like I can take my my friend Dustin's grades to to get my",
    "start": "2354460",
    "end": "2361599"
  },
  {
    "text": "to get my GPA up a little bit and spread in his grades into mine it's probably not the best example",
    "start": "2361599",
    "end": "2367599"
  },
  {
    "text": "um you'll notice that the Syntax for these um collection Expressions kind of",
    "start": "2367599",
    "end": "2372760"
  },
  {
    "text": "mirrors the Syntax for list patterns if you looked at those and that's a nice Duality we have that further",
    "start": "2372760",
    "end": "2378579"
  },
  {
    "text": "tuples for instance that the creation syntax and the the pattern match sort of",
    "start": "2378579",
    "end": "2383800"
  },
  {
    "text": "deconstruct syntax match each other um usually we start with the creation syntax and then we make it pattern",
    "start": "2383800",
    "end": "2390400"
  },
  {
    "text": "matching syntax and that looks like that this time we actually went the other way around we had the list patterns first",
    "start": "2390400",
    "end": "2396579"
  },
  {
    "text": "and also dictionary literals we're probably going to do them we just need to find out",
    "start": "2396579",
    "end": "2401740"
  },
  {
    "text": "exactly all the details about them and also what happens if you don't give a type at all but you just say VAR x",
    "start": "2401740",
    "end": "2407800"
  },
  {
    "text": "equals some stuff here and that's a really hard question actually it's much different question",
    "start": "2407800",
    "end": "2413619"
  },
  {
    "text": "than what happens when you know the interface because then people have told you this is the surface area I'm interested in if you just say bar x",
    "start": "2413619",
    "end": "2419500"
  },
  {
    "text": "equals and how do we know what surface area you want and if we if we just say list of T you get all the surface area",
    "start": "2419500",
    "end": "2425320"
  },
  {
    "text": "you can do everything but it's not going to be very efficient if you don't make use of it so the choice we make",
    "start": "2425320",
    "end": "2431680"
  },
  {
    "text": "will be right or wrong depending on what you do well should we like do flow analysis and see what you do with it",
    "start": "2431680",
    "end": "2437260"
  },
  {
    "text": "I don't know it kind of gets complicated so that's an open question we'll get to it later",
    "start": "2437260",
    "end": "2443260"
  },
  {
    "text": "um and we'll do something once we're confident that we have the right the right answer for that okay",
    "start": "2443260",
    "end": "2448780"
  },
  {
    "text": "all right um I'm going to move on and talk about okay",
    "start": "2448780",
    "end": "2455320"
  },
  {
    "text": "Mark you get this one",
    "start": "2455320",
    "end": "2459599"
  },
  {
    "text": "can you use that in a stack alloc that's a good question I'm not sure use what to spread",
    "start": "2461320",
    "end": "2469260"
  },
  {
    "text": "uh I don't think so um I repeated the question so",
    "start": "2470320",
    "end": "2476820"
  },
  {
    "text": "I don't think so um why don't you try it out and tell me because I'm actually",
    "start": "2476820",
    "end": "2482859"
  },
  {
    "text": "interested okay um Mark wants to stack of course you do",
    "start": "2482859",
    "end": "2487900"
  },
  {
    "text": "it's actually it's a good question um here's a feature we didn't do uh that we",
    "start": "2487900",
    "end": "2496240"
  },
  {
    "text": "were going to do the last time around then we realized we hadn't actually there was a hard technical problem we",
    "start": "2496240",
    "end": "2503079"
  },
  {
    "text": "hadn't solved then as we went back to this release we realized that the heart technical problem was sort of the mirror",
    "start": "2503079",
    "end": "2509740"
  },
  {
    "text": "of a philosophical problem and we didn't solve the philosophical problem uh so I",
    "start": "2509740",
    "end": "2515920"
  },
  {
    "text": "think we have a solution to the philosophical problem now uh but let's see what kind of problem we've been",
    "start": "2515920",
    "end": "2522280"
  },
  {
    "text": "um we might have a piss off the user problem next so um so we'll see but the",
    "start": "2522280",
    "end": "2527320"
  },
  {
    "text": "idea is um so now this is where the word Cliff comes in I told you we had a vocabulary",
    "start": "2527320",
    "end": "2532599"
  },
  {
    "text": "Auto properties have a cliff right if I wanted so let's say this is a get set property and I you know this is great",
    "start": "2532599",
    "end": "2538540"
  },
  {
    "text": "but I just want to do it one tiny little thing differently than what the auto property does I want to just like trim",
    "start": "2538540",
    "end": "2543780"
  },
  {
    "text": "uh White space away from the string as it comes into the setter well now I fall off the cliff and I can't use an auto",
    "start": "2543780",
    "end": "2549880"
  },
  {
    "text": "property anymore I have to explicitly declare my backing field and I have to also write the getter even though it's",
    "start": "2549880",
    "end": "2555460"
  },
  {
    "text": "trivial and all that stuff well what if you didn't have to do that we could we can we can support that if we let you",
    "start": "2555460",
    "end": "2561520"
  },
  {
    "text": "write optionally write bodies in your auto properties and those bodies can reference the backing field",
    "start": "2561520",
    "end": "2568060"
  },
  {
    "text": "of the property with the variable name or the parameter name field that's the",
    "start": "2568060",
    "end": "2573220"
  },
  {
    "text": "design so I so really if it does like just the the standard thing the way you",
    "start": "2573220",
    "end": "2578680"
  },
  {
    "text": "would write that explicitly is just to say field equals value and value is a special parameter right",
    "start": "2578680",
    "end": "2583900"
  },
  {
    "text": "it represents whatever you whatever you assign to the property when you call the setter uh field similarly",
    "start": "2583900",
    "end": "2590380"
  },
  {
    "text": "would be think of it as a as a special reference parameter that really",
    "start": "2590380",
    "end": "2595420"
  },
  {
    "text": "references some the backing field but we're not telling you the backing Field's name we're giving you",
    "start": "2595420",
    "end": "2600700"
  },
  {
    "text": "through this ref primer instead okay so we could do that that's that's kind of neat now I didn't fall off the cliff",
    "start": "2600700",
    "end": "2606400"
  },
  {
    "text": "when I decided that I wanted to trim my stuff you can still keep this one unimplemented if I want of course you",
    "start": "2606400",
    "end": "2612640"
  },
  {
    "text": "get squiggles here because it doesn't work but that's the sign I'm just showing you the sign I could implement this explicitly as well I could say that",
    "start": "2612640",
    "end": "2620079"
  },
  {
    "text": "just returns whatever is in field and it's still an auto property because",
    "start": "2620079",
    "end": "2625660"
  },
  {
    "text": "it references the backing field so it'll generate a backing field if it needs to all properties are order properties if",
    "start": "2625660",
    "end": "2631359"
  },
  {
    "text": "you want them to be just mention the backing field and it will be there it's like a Genie in a Bottle but you get more than three so",
    "start": "2631359",
    "end": "2639220"
  },
  {
    "text": "so that's kind of great and we love that design simple it's easy to explain it's kind of similar to how value already works so no",
    "start": "2639220",
    "end": "2645760"
  },
  {
    "text": "of course now we realize this is a breaking change in the language right because if you had",
    "start": "2645760",
    "end": "2651579"
  },
  {
    "text": "if you let's say you had let's say you had a field called field string field",
    "start": "2651579",
    "end": "2659020"
  },
  {
    "text": "okay and now okay um I'm not and let's say it doesn't initialize now",
    "start": "2659020",
    "end": "2665560"
  },
  {
    "text": "this is perfectly valid c-sharp code today and the and the occurrences of the word",
    "start": "2665560",
    "end": "2671319"
  },
  {
    "text": "field here reference the field outside or they reference something called field",
    "start": "2671319",
    "end": "2676660"
  },
  {
    "text": "that may be very far away you know but it's in scope and if we make it mean something else we have performed what is",
    "start": "2676660",
    "end": "2683380"
  },
  {
    "text": "known as a breaking change we're going to break some users code somewhere without them having done anything wrong",
    "start": "2683380",
    "end": "2689800"
  },
  {
    "text": "it's not their fault they couldn't know that there was going to be a thing called field in the future",
    "start": "2689800",
    "end": "2695920"
  },
  {
    "text": "well we can't do that but but if and so what we've been telling ourselves uh previously in this kind of situation is",
    "start": "2695920",
    "end": "2702339"
  },
  {
    "text": "well we can't do that we can't break them you know page one we can't break anyone so we're gonna make the feature",
    "start": "2702339",
    "end": "2708579"
  },
  {
    "text": "design less optimal we're gonna diminish the new feature",
    "start": "2708579",
    "end": "2714460"
  },
  {
    "text": "in order to respect those small small percentages of code",
    "start": "2714460",
    "end": "2720040"
  },
  {
    "text": "out there that would have been broken by it is that a good trade-off for those people absolutely yes for the rest of us",
    "start": "2720040",
    "end": "2727240"
  },
  {
    "text": "I don't know is there a way that can we square that differently um so either we diminish it by having a",
    "start": "2727240",
    "end": "2733720"
  },
  {
    "text": "worse syntax like somebody said just use two keywords or you know whatever but",
    "start": "2733720",
    "end": "2740338"
  },
  {
    "text": "or you know we could also use the syntax but have really Arcane rules for how it works",
    "start": "2740680",
    "end": "2746980"
  },
  {
    "text": "um so we could say that well field means the underlying field unless there's something in scope somewhere called",
    "start": "2746980",
    "end": "2753339"
  },
  {
    "text": "field in which case it means that so but that means that in in new code where you actually want to use field to mean the",
    "start": "2753339",
    "end": "2759940"
  },
  {
    "text": "then all of a sudden somebody introduces field somewhere in scope that you don't care about at all and your code silently",
    "start": "2759940",
    "end": "2766839"
  },
  {
    "text": "changes meaning as a spooky action at a distance right that that's horrible too",
    "start": "2766839",
    "end": "2771880"
  },
  {
    "text": "so that's why we didn't ship it this time we're like oh so instead we looked at is there a way that we can occasionally cautiously",
    "start": "2771880",
    "end": "2780579"
  },
  {
    "text": "start doing breaking changes in C sharp okay and there's a long story I'm not going",
    "start": "2780579",
    "end": "2787599"
  },
  {
    "text": "to tell the long story because I have something else I want to show you and we're getting close to time the short story is",
    "start": "2787599",
    "end": "2796380"
  },
  {
    "text": "we want to we want to inconvenience you now",
    "start": "2797800",
    "end": "2803740"
  },
  {
    "text": "rather than forever and want to inconvenience the few rather than the many okay",
    "start": "2803740",
    "end": "2808839"
  },
  {
    "text": "now CGR is different from many other programming languages in that there's pretty much just one compiler out there",
    "start": "2808839",
    "end": "2816280"
  },
  {
    "text": "most people use it and even when you upgrade the compiler you keep",
    "start": "2816280",
    "end": "2823420"
  },
  {
    "text": "generally keep using the same language version until you opt into a new Target framework or you explicitly up the",
    "start": "2823420",
    "end": "2828460"
  },
  {
    "text": "language version so you have newer compilers compiling older language versions essentially every time you get",
    "start": "2828460",
    "end": "2835060"
  },
  {
    "text": "the you do a tool set upgrade or whatever you get a new compiler might have a new language version with it but",
    "start": "2835060",
    "end": "2841240"
  },
  {
    "text": "that's not the language version you get in most cases nowadays the way things work you keep compiling with the old language",
    "start": "2841240",
    "end": "2848079"
  },
  {
    "text": "version so we could make the new compiler give you warnings in your in your code when",
    "start": "2848079",
    "end": "2853900"
  },
  {
    "text": "you're targeting the old language version saying in the future when you upgrade to a new language version this",
    "start": "2853900",
    "end": "2859780"
  },
  {
    "text": "use of field here will break can I help you fix it now so that it's",
    "start": "2859780",
    "end": "2866079"
  },
  {
    "text": "resilient to the Future can I help you write what you would have written if you had started out in the new version of",
    "start": "2866079",
    "end": "2871660"
  },
  {
    "text": "the language can I help you upgrade to the Future okay so that would be something like",
    "start": "2871660",
    "end": "2877839"
  },
  {
    "text": "saying this dot field instead like so we would ship it with a fix and",
    "start": "2877839",
    "end": "2883480"
  },
  {
    "text": "you could apply it automatically to everything if you don't care just fix them most people won't have any",
    "start": "2883480",
    "end": "2889000"
  },
  {
    "text": "few people have a few so we'll only do this when it's really",
    "start": "2889000",
    "end": "2894579"
  },
  {
    "text": "blocking at a sign that we think is cool and work and and valuable and when we have an automatic fix that's foolproof",
    "start": "2894579",
    "end": "2900819"
  },
  {
    "text": "that's sort of like that would be our criteria for doing a break like this it'll be rare",
    "start": "2900819",
    "end": "2906220"
  },
  {
    "text": "but when we do it's just like before you go to C sharp 13 or whatever",
    "start": "2906220",
    "end": "2912819"
  },
  {
    "text": "I now know that this code will be broken let me tell you now and let me give you a fix so you'll be good you'll be able",
    "start": "2912819",
    "end": "2919599"
  },
  {
    "text": "to move into the future unhindered and then of course we can have all kinds of",
    "start": "2919599",
    "end": "2925300"
  },
  {
    "text": "catch-alls then people will say I not right now tell me again when the uh tell me again when I when I start to upgrade",
    "start": "2925300",
    "end": "2931480"
  },
  {
    "text": "and then we'll try to also hook any upgrade gestures you do and so on but but the general mechanism we think is",
    "start": "2931480",
    "end": "2937480"
  },
  {
    "text": "the gentlest way to get the breaking changes out of the way and have you and have neither the",
    "start": "2937480",
    "end": "2943660"
  },
  {
    "text": "language nor your code suffer from these clashes forevermore",
    "start": "2943660",
    "end": "2948700"
  },
  {
    "text": "okay rip the Band-Aid off and you're good yeah",
    "start": "2948700",
    "end": "2953819"
  },
  {
    "text": "what if you skipped several versions well if we keep doing breaking changes of course they will accumulate so we",
    "start": "2956079",
    "end": "2961839"
  },
  {
    "text": "have to really be judicious here and not accumulate a lot but if you skip several versions all that'll happen is that you",
    "start": "2961839",
    "end": "2968200"
  },
  {
    "text": "when you when you get the new compiler it'll be flat it'll flag all those",
    "start": "2968200",
    "end": "2973480"
  },
  {
    "text": "things and you'll fix all those things and we'll make sure it works that that that it works across several versions",
    "start": "2973480",
    "end": "2979599"
  },
  {
    "text": "it's not it's not as the only problem with several versions should be that okay there'll be more of them and",
    "start": "2979599",
    "end": "2985480"
  },
  {
    "text": "they'll still be uh this be you know Visual Studio menu item that says fix all the breaking changes with the",
    "start": "2985480",
    "end": "2992020"
  },
  {
    "text": "automatic fix I don't care it's going to guarantee that your code is going to be semantically equivalent and it's going",
    "start": "2992020",
    "end": "2998260"
  },
  {
    "text": "to be robust against all these all the breaking changes that your compiler knows about",
    "start": "2998260",
    "end": "3003720"
  },
  {
    "text": "okay so if we can get that in the dot net nine time frame then we",
    "start": "3003720",
    "end": "3010380"
  },
  {
    "text": "can get this feature into C sharp 13. we start talking about some of the other ugly ones like VAR or or",
    "start": "3010380",
    "end": "3017760"
  },
  {
    "text": "um in particular discards which are a feature that is very hubbled",
    "start": "3017760",
    "end": "3024180"
  },
  {
    "text": "by this problem of backwards compatibility sometimes underscore means variable",
    "start": "3024180",
    "end": "3029339"
  },
  {
    "text": "sometimes it means discard depends on which syntax you use to declare it because the syntaxes are already there",
    "start": "3029339",
    "end": "3036240"
  },
  {
    "text": "we couldn't break them so that's horrible and we could we could potentially fix that in the future even go back and fix the existing ones",
    "start": "3036240",
    "end": "3043020"
  },
  {
    "text": "so that's it that's something that just to show you something hard that's on our minds and that we're trying to kind of",
    "start": "3043020",
    "end": "3049500"
  },
  {
    "text": "trying to push through with something that's reasonable for everyone and we're going to need a lot of feedback over the",
    "start": "3049500",
    "end": "3055200"
  },
  {
    "text": "coming year year hopefully no more than a year to kind of to thread that needle",
    "start": "3055200",
    "end": "3060420"
  },
  {
    "text": "we've sort of this controversy on all sides and you know people with scenarios",
    "start": "3060420",
    "end": "3065760"
  },
  {
    "text": "and so on we're going to have to try the most inclusive we can to um",
    "start": "3065760",
    "end": "3071400"
  },
  {
    "text": "to arrive at something reasonable here okay I'm gonna now",
    "start": "3071400",
    "end": "3077940"
  },
  {
    "text": "I'm going to save and close this as well um okay sure",
    "start": "3077940",
    "end": "3085099"
  },
  {
    "text": "and I'm actually going to do slides for a bit just a bit because we only have a bit left we have 10 minutes left",
    "start": "3085099",
    "end": "3093059"
  },
  {
    "text": "so when we talked about this at build we decided to put this fireplace and and",
    "start": "3093059",
    "end": "3099059"
  },
  {
    "text": "hot chocolate slide in so we can sort of go in we get you all into story mode story mode",
    "start": "3099059",
    "end": "3105920"
  },
  {
    "text": "so you all like extension methods right",
    "start": "3106440",
    "end": "3111839"
  },
  {
    "text": "who here does not like extension methods okay",
    "start": "3111839",
    "end": "3117740"
  },
  {
    "text": "let's talk after I want to know why but not now um the cool thing about extension methods",
    "start": "3118020",
    "end": "3123780"
  },
  {
    "text": "is I can put things that are relevant to me",
    "start": "3123780",
    "end": "3129000"
  },
  {
    "text": "on a type that I get from somewhere someone else I get it's a it's a form of software",
    "start": "3129000",
    "end": "3134520"
  },
  {
    "text": "composition that is actually genius right it allows for loose coupling",
    "start": "3134520",
    "end": "3139740"
  },
  {
    "text": "with but higher discoverability I can now walk up and say dot on that type that I didn't write because I put that",
    "start": "3139740",
    "end": "3146460"
  },
  {
    "text": "extension method on it or somebody else wrote the extension method I need that thing is immediately discoverable",
    "start": "3146460",
    "end": "3152280"
  },
  {
    "text": "to me fantastic and the syntax looks good it's also it's nice and dandy but",
    "start": "3152280",
    "end": "3157920"
  },
  {
    "text": "it only works for instance methods you can make something look like an instance method",
    "start": "3157920",
    "end": "3163079"
  },
  {
    "text": "but that the buck stops there so ever since we did extension map the first public",
    "start": "3163079",
    "end": "3169260"
  },
  {
    "text": "preview that had extensions extension methods and it came out",
    "start": "3169260",
    "end": "3174780"
  },
  {
    "text": "two months after I joined Microsoft 18 years ago and for all that time people have been",
    "start": "3174780",
    "end": "3181140"
  },
  {
    "text": "saying but what about properties what about operators what about indexes what about static methods",
    "start": "3181140",
    "end": "3188220"
  },
  {
    "text": "yeah we even we tried really hard in C sharp four and the approach we took just",
    "start": "3188220",
    "end": "3193319"
  },
  {
    "text": "fell apart the thing is the extension methods we have today they're in a dead end in an evolutionary dead end the way",
    "start": "3193319",
    "end": "3201660"
  },
  {
    "text": "you express them the way you declare them does not generalize to other kinds of members it relies on you putting the",
    "start": "3201660",
    "end": "3207420"
  },
  {
    "text": "this keyword on a parameter well not everything has parameters you know",
    "start": "3207420",
    "end": "3212720"
  },
  {
    "text": "and how do you and and that doesn't even make sense where you're an extension static thing there is no this there's no",
    "start": "3212720",
    "end": "3218400"
  },
  {
    "text": "instance but you still want to extend the type so we just gave up and then we tried",
    "start": "3218400",
    "end": "3224520"
  },
  {
    "text": "some years later and then we tried some years later and then we try some years later then in parallel we saw",
    "start": "3224520",
    "end": "3232020"
  },
  {
    "text": "some scenarios that seem to be completely unrelated like just a whole another set of scenarios that were also",
    "start": "3232020",
    "end": "3237660"
  },
  {
    "text": "interesting and where we also really not weren't able to provide the best so those scenarios had to do with",
    "start": "3237660",
    "end": "3246800"
  },
  {
    "text": "week weekly type data this is it's kind of like a broad way of saying like wire",
    "start": "3247940",
    "end": "3252960"
  },
  {
    "text": "data or you know that kind of stuff we look with Envy at the things that you",
    "start": "3252960",
    "end": "3259559"
  },
  {
    "text": "looking at um Excel spreadsheets and so on F sharp this is one of the places where we",
    "start": "3259559",
    "end": "3264900"
  },
  {
    "text": "actually looked enviously at F sharp a lot of people say Hey you steal all your features from F sharp yeah have you",
    "start": "3264900",
    "end": "3270119"
  },
  {
    "text": "looked at ml you know where do you think they got it from but this one I love F sharp",
    "start": "3270119",
    "end": "3277380"
  },
  {
    "text": "and we do steal from them um but this one but they had this really",
    "start": "3277380",
    "end": "3283380"
  },
  {
    "text": "really cool thing called type providers which means that at at development time",
    "start": "3283380",
    "end": "3289500"
  },
  {
    "text": "as you're sitting there typing a coding time the compiler could have these little",
    "start": "3289500",
    "end": "3294839"
  },
  {
    "text": "plugins that would look at a particular data source and interpret it",
    "start": "3294839",
    "end": "3301200"
  },
  {
    "text": "into types like it could look at Wikipedia data or",
    "start": "3301200",
    "end": "3307200"
  },
  {
    "text": "um adjacent schema or even just representative Json data and programmatically it could cook up some",
    "start": "3307200",
    "end": "3313380"
  },
  {
    "text": "fake types that it could show to you at compile time and you could do strongly typed",
    "start": "3313380",
    "end": "3318420"
  },
  {
    "text": "programming against this weekly type data how cool is that it's a little not so cool when the data",
    "start": "3318420",
    "end": "3324000"
  },
  {
    "text": "changes shape and it doesn't match up anymore but that's I mean that's the nature of working with static types over",
    "start": "3324000",
    "end": "3331380"
  },
  {
    "text": "Dynamic data that that same thing happens in typescript as well like you have you put Types on those payloads",
    "start": "3331380",
    "end": "3336960"
  },
  {
    "text": "well the payload changes your types your thing still type checks just fine",
    "start": "3336960",
    "end": "3342359"
  },
  {
    "text": "but you start getting um you start getting a lot of uh a lot",
    "start": "3342359",
    "end": "3348359"
  },
  {
    "text": "of errors in the code that actually runs your types of code right because the data doesn't fit the types",
    "start": "3348359",
    "end": "3354720"
  },
  {
    "text": "seems like an acceptable circumstance but you can get types for those weekly type things",
    "start": "3354720",
    "end": "3361640"
  },
  {
    "text": "and yeah and typescript as well you can type everything in typescript is really just a dictionary but you can express it",
    "start": "3362160",
    "end": "3367440"
  },
  {
    "text": "as a type and then you get a really nice development experience just pretending you know what type it is and usually",
    "start": "3367440",
    "end": "3372900"
  },
  {
    "text": "you're right okay so it turns out that those two stories",
    "start": "3372900",
    "end": "3379800"
  },
  {
    "text": "connect and so I'm going to start with the latter and then we're going to work our",
    "start": "3379800",
    "end": "3385260"
  },
  {
    "text": "way back around to how does that apply to extension everything",
    "start": "3385260",
    "end": "3391099"
  },
  {
    "text": "so let's say that you have something that we let's call them explicit extensions okay and let's just start",
    "start": "3391500",
    "end": "3397619"
  },
  {
    "text": "thinking about it it's a type declaration that is really like a fancy Alias it's just an alias it's just a",
    "start": "3397619",
    "end": "3403680"
  },
  {
    "text": "very good Alias not those sucky aliases that we started to talk with today like these are like aliases for the future",
    "start": "3403680",
    "end": "3412319"
  },
  {
    "text": "because it was so what this says here is that data set is really",
    "start": "3412319",
    "end": "3417599"
  },
  {
    "text": "a dictionary but um but unlike an alias it can you know",
    "start": "3417599",
    "end": "3423300"
  },
  {
    "text": "there are all kinds of things that that's better about it um one is that it can have an",
    "start": "3423300",
    "end": "3428460"
  },
  {
    "text": "accessibility you can put it in metadata somewhere you can put it you can be in an assembly and you consume it from another assembly it's a real type",
    "start": "3428460",
    "end": "3434880"
  },
  {
    "text": "not just some FICO name for your file can be generic",
    "start": "3434880",
    "end": "3441240"
  },
  {
    "text": "because there's a real type and real types can be generic",
    "start": "3441240",
    "end": "3445400"
  },
  {
    "text": "um and it can reference other types because it's not in that",
    "start": "3446280",
    "end": "3451800"
  },
  {
    "text": "using blog where you have to say full names all the time that's a small but important like I couldn't say uppercase",
    "start": "3451800",
    "end": "3457440"
  },
  {
    "text": "decimal before just do that because it sits with the other type declarations where everything has been imported",
    "start": "3457440",
    "end": "3463700"
  },
  {
    "text": "and mysteriously it can have a body can have just a semicolon and it's just an alias",
    "start": "3463700",
    "end": "3470280"
  },
  {
    "text": "but it can have a body what does this all mean let's look at an example and actually explicit",
    "start": "3470280",
    "end": "3476280"
  },
  {
    "text": "I put explicit explicitly here but we can that's probably the the reason it has explicit is because it's going to be",
    "start": "3476280",
    "end": "3482339"
  },
  {
    "text": "an implicit later but I'm going to make the explicit implicit and then we're going to make the implicit explicit when we get to it okay",
    "start": "3482339",
    "end": "3487559"
  },
  {
    "text": "so just we'll just do this that wasn't confusing at all so here I'm I have a method that takes a",
    "start": "3487559",
    "end": "3494220"
  },
  {
    "text": "string that's supposed to represent some Json that I'm going to do some something with and then I call it with a Json string and yay it's a raw string literal",
    "start": "3494220",
    "end": "3501000"
  },
  {
    "text": "because we have those now uh maybe I could I could declare an alias for it that I can share that says",
    "start": "3501000",
    "end": "3507720"
  },
  {
    "text": "well this string is supposed to be a Json string it's just still an alias but it's just a hint that",
    "start": "3507720",
    "end": "3513119"
  },
  {
    "text": "I can now say well my method takes adjacent strings hint to the user okay it's meant to be Json",
    "start": "3513119",
    "end": "3519180"
  },
  {
    "text": "but it could be more than a hint to the user maybe we can give it a body that has function members well it's not that",
    "start": "3519180",
    "end": "3525000"
  },
  {
    "text": "state here but it could have extra function members that make sense only on strings that represent Json",
    "start": "3525000",
    "end": "3530640"
  },
  {
    "text": "like parse and get me something that we call data object like a dictionary object of some kind you know represents",
    "start": "3530640",
    "end": "3537540"
  },
  {
    "text": "structured representation of that of that data there I'm almost out of time oh my God",
    "start": "3537540",
    "end": "3543240"
  },
  {
    "text": "and then um you know I could actually call that method it's sort of like an extension method but it's only there",
    "start": "3543240",
    "end": "3549599"
  },
  {
    "text": "when I explicitly say that it's a Json object it's not on all data objects",
    "start": "3549599",
    "end": "3555359"
  },
  {
    "text": "so I'm going to have to cut the story short a little I could have multiple of these and they're sort of like strongly typed aliases think about the wire Data",
    "start": "3555359",
    "end": "3562319"
  },
  {
    "text": "customer and order they're really just dictionaries but I'm putting like typescript like uh Types on top of them",
    "start": "3562319",
    "end": "3567839"
  },
  {
    "text": "that just look up they have strongly typed members that just look up in the dictionary and as long as it matches",
    "start": "3567839",
    "end": "3573420"
  },
  {
    "text": "whatever schema those things follow you'll have a strongly typed developer experience against these and hey we",
    "start": "3573420",
    "end": "3579180"
  },
  {
    "text": "could use Source generators to generate these from schema or typescript types or whatever so so we have like typescript",
    "start": "3579180",
    "end": "3586740"
  },
  {
    "text": "like and we have F sharp typewriter like it's heaven",
    "start": "3586740",
    "end": "3592140"
  },
  {
    "text": "but they can also be implicit and what implicit then means is they automatically apply by default to the",
    "start": "3592140",
    "end": "3599880"
  },
  {
    "text": "underlying type that they extend okay so not only are they a view an enhanced",
    "start": "3599880",
    "end": "3605460"
  },
  {
    "text": "view on the original type they enhance the original type with instance methods",
    "start": "3605460",
    "end": "3612299"
  },
  {
    "text": "but also with static methods and all with all the other kinds of things you can imagine right so these are this is",
    "start": "3612299",
    "end": "3617940"
  },
  {
    "text": "extension everything this is where you get all the extension members this is where those two features come",
    "start": "3617940",
    "end": "3623819"
  },
  {
    "text": "together because you're just saying and all data objects are Json objects in scope here where I include this",
    "start": "3623819",
    "end": "3630299"
  },
  {
    "text": "extension and nowhere else but here they are and that means that I can call to Jason",
    "start": "3630299",
    "end": "3635819"
  },
  {
    "text": "on my data object and I can call from Json on data the data object type itself",
    "start": "3635819",
    "end": "3640980"
  },
  {
    "text": "because it's static and sort of the stretch goal and this is",
    "start": "3640980",
    "end": "3647040"
  },
  {
    "text": "going to be the end of the talk what if they could Implement interfaces for you on the types that you don't own",
    "start": "3647040",
    "end": "3653099"
  },
  {
    "text": "so hey Json object is parsable and you you know you can put an explicit",
    "start": "3653099",
    "end": "3659700"
  },
  {
    "text": "implementation in there if you want like you can you can Implement interfaces on behalf of the underlying type that are",
    "start": "3659700",
    "end": "3666480"
  },
  {
    "text": "only in force whatever that means right here where you import the extension",
    "start": "3666480",
    "end": "3673380"
  },
  {
    "text": "now you can satisfy you can you you can take types from over here that know nothing about the frame",
    "start": "3673380",
    "end": "3679079"
  },
  {
    "text": "I'll go over here and you can satisfy the interface that is sort of the ticket to entry of this framework on behalf of",
    "start": "3679079",
    "end": "3684839"
  },
  {
    "text": "the types that didn't that didn't know they should okay now you have software this software composition benefit we",
    "start": "3684839",
    "end": "3690780"
  },
  {
    "text": "talked about before even more Loosely coupled and I think that has like immense if we",
    "start": "3690780",
    "end": "3696359"
  },
  {
    "text": "can get it to work that has immense potential um probably also for abuse and with that",
    "start": "3696359",
    "end": "3702359"
  },
  {
    "text": "I'm going to say thank you very much you've been a patient audience [Applause]",
    "start": "3702359",
    "end": "3716739"
  }
]