[
  {
    "text": "all right let's get started so if you're already if you're still arriving then welcome come on in there's plenty of",
    "start": "8080",
    "end": "14480"
  },
  {
    "text": "room um so hello everyone and welcome uh my name is Mark Seaman if you want to know more about me there's an about page",
    "start": "14480",
    "end": "20800"
  },
  {
    "text": "there on blockplur.dks i'm not going to you know tire you with all the details i'm also at Twitter at plur and I you",
    "start": "20800",
    "end": "26800"
  },
  {
    "text": "know I love tweets particularly if they're you know positive um but but",
    "start": "26800",
    "end": "32000"
  },
  {
    "text": "still okay so this talk is called one one carter three languages so I'm going to do a software carter a little",
    "start": "32000",
    "end": "37600"
  },
  {
    "text": "exercise I'm going to do some live coding while I do that um and I'm going",
    "start": "37600",
    "end": "42879"
  },
  {
    "text": "to do it in three languages and those languages will be C and uh and Haskell",
    "start": "42879",
    "end": "47920"
  },
  {
    "text": "and and closure so if you've never seen hasll or closure before you're in the right place because that's basically the idea about this talk to say well If",
    "start": "47920",
    "end": "54559"
  },
  {
    "text": "you're curious about those languages you've never seen them before but let you know want to know what they look like and maybe also what they're about",
    "start": "54559",
    "end": "61039"
  },
  {
    "text": "then this talk should give you just a you know a brief introduction to those languages obviously you're not going to",
    "start": "61039",
    "end": "66720"
  },
  {
    "text": "be an expert or or really understand much but at least you would seen them and then you can go and uh and look into",
    "start": "66720",
    "end": "72320"
  },
  {
    "text": "it yourself if you think that's interesting so that's that's basically the idea here so first of all let's talk",
    "start": "72320",
    "end": "77360"
  },
  {
    "text": "a little bit about casters how many of you do casters regularly maybe not every day but just you know once in a while no",
    "start": "77360",
    "end": "82640"
  },
  {
    "text": "not not a lot a couple all right um I I think I think you should do kartas i",
    "start": "82640",
    "end": "88080"
  },
  {
    "text": "think you should do consider doing kartas so the concept of a karta actually comes from martial arts so that's why this karate guy is there and",
    "start": "88080",
    "end": "94720"
  },
  {
    "text": "I believe the word is Japanese and means something like form but basically the idea is that um sometimes you want to",
    "start": "94720",
    "end": "101920"
  },
  {
    "text": "train but you don't have a sparing partner and uh you still like to train so you can do you can go through some",
    "start": "101920",
    "end": "108720"
  },
  {
    "text": "motions and that should build up muscle memory which is important when you're doing a physical activity to actually",
    "start": "108720",
    "end": "114640"
  },
  {
    "text": "have you know your body accustomed to making certain moves um so that's a pretty good way of of doing something",
    "start": "114640",
    "end": "120880"
  },
  {
    "text": "that is you know exercising with when it's a physical activity now sometimes",
    "start": "120880",
    "end": "126719"
  },
  {
    "text": "when you do programming you'd also like to train if you want to become a better programmer u it might actually be a good",
    "start": "126719",
    "end": "132000"
  },
  {
    "text": "idea to to train but um but the problem with uh you know we don't really need to",
    "start": "132000",
    "end": "137840"
  },
  {
    "text": "to build up muscle memory you know contrary to some people's belief it's not the it's not the your typing speed",
    "start": "137840",
    "end": "144480"
  },
  {
    "text": "that you know determines whether or not you're a good programmer uh it's more like what what really makes you a good programmer is experience and your",
    "start": "144480",
    "end": "150879"
  },
  {
    "text": "ability to think things through and um and the more thing the more you are",
    "start": "150879",
    "end": "155920"
  },
  {
    "text": "accustomed to thinking and looking at programming problems from different angles the better you will be at that so",
    "start": "155920",
    "end": "161920"
  },
  {
    "text": "um in order to train your brain you you don't go you you shouldn't go through the same ex same steps all you know all",
    "start": "161920",
    "end": "169280"
  },
  {
    "text": "the time what you should do is you try you should try to make your brain think about things that you don't uh that you",
    "start": "169280",
    "end": "174640"
  },
  {
    "text": "can't think about or you haven't tried to think about before so you need to you know do something that is novel to your",
    "start": "174640",
    "end": "179920"
  },
  {
    "text": "brain so it's sort of like the opposite of actually building up muscle memory you you need to try to do something that",
    "start": "179920",
    "end": "185440"
  },
  {
    "text": "is new and even if you're a professional software developer that's actually not what you do on your day-to-day job you",
    "start": "185440",
    "end": "191280"
  },
  {
    "text": "know on your day-to-day job you probably do the same thing you write in the same language that you wrote in you know last year or maybe last week and so on and",
    "start": "191280",
    "end": "198080"
  },
  {
    "text": "you you know you're working on the same code base you're using the same methodology you're probably you know working with the same colleagues and it",
    "start": "198080",
    "end": "204080"
  },
  {
    "text": "might be nice you know it might be a very good job that you have but it's not like it's actually giving you um you",
    "start": "204080",
    "end": "209360"
  },
  {
    "text": "know challenges in and and force you to think about things in new ways uh so I think it's a good idea to just you know",
    "start": "209360",
    "end": "215519"
  },
  {
    "text": "try to to do things that you don't know so that's why I think a cart is actually a pretty good way of approaching things",
    "start": "215519",
    "end": "222640"
  },
  {
    "text": "so instead of trying to do the same software exercise all over and over and again what I really do is I try to do",
    "start": "222640",
    "end": "228400"
  },
  {
    "text": "various exercises but I try to do them you know in different languages or with different constraints and so on and I",
    "start": "228400",
    "end": "233599"
  },
  {
    "text": "mix them up so I never really do the same thing twice um unless I give presentations um and then I do the same",
    "start": "233599",
    "end": "239519"
  },
  {
    "text": "thing twice but that's work um so you know an example of a Carter one of my favorite carters is the tennis carter uh",
    "start": "239519",
    "end": "245599"
  },
  {
    "text": "basically what you have to do here is you have to implement the scoring system for tennis and I like this one because it's quite simple it's easy to",
    "start": "245599",
    "end": "251439"
  },
  {
    "text": "understand you can cover the rules in about 20 seconds um and uh it's not",
    "start": "251439",
    "end": "256560"
  },
  {
    "text": "difficult at all to implement but it does have a few gotchas here and there so you may be surprised the first time",
    "start": "256560",
    "end": "262000"
  },
  {
    "text": "you try to do the car to you'll discover that well it's pretty simple but it's not quite as simple as you actually",
    "start": "262000",
    "end": "267520"
  },
  {
    "text": "thought so I think I like that for that reason um another favorite of mine is is the diamond carter but the one that",
    "start": "267520",
    "end": "273520"
  },
  {
    "text": "we're going to look at today is the FSB bus Carter the simplest of all Carters this is ridiculously simple and easy to",
    "start": "273520",
    "end": "279840"
  },
  {
    "text": "implement but that also means that the point here today is not so much doing Carter uh the point here today is to",
    "start": "279840",
    "end": "286320"
  },
  {
    "text": "introduce you to um new language that you may not have seen before so we're going to talk about you know the syntax",
    "start": "286320",
    "end": "291520"
  },
  {
    "text": "and the philosophy you know behind the language and that means you know the problem is not going to you know stand",
    "start": "291520",
    "end": "296639"
  },
  {
    "text": "in the way and so you you don't have to think about the problem this is trivial i'll cover the rules if you've never heard about it before but I'll only",
    "start": "296639",
    "end": "303360"
  },
  {
    "text": "spend like 20 20 seconds 30 seconds on it before we do that you know I should just tell you you know there are lots of",
    "start": "303360",
    "end": "309360"
  },
  {
    "text": "carters out there um a good place to go is bit.ly/codecarters it's not all of those carters but this is just a a site um it",
    "start": "309360",
    "end": "316800"
  },
  {
    "text": "started out as a wiki that someone have you know created with a lot of those carters in them not all of them but a",
    "start": "316800",
    "end": "322400"
  },
  {
    "text": "lot of them um right okay so we're going to look at three languages today so the",
    "start": "322400",
    "end": "327680"
  },
  {
    "text": "first language that we're going to look at is C so I'm assuming that you are either a C developer or Java developer",
    "start": "327680",
    "end": "334560"
  },
  {
    "text": "or at least someone who is familiar with the one of those languages enough to be able to read the C# code that I'm",
    "start": "334560",
    "end": "340240"
  },
  {
    "text": "showing you so I'm not going to spend too much time actually on the C# code i'm not going to do live demoing of the",
    "start": "340240",
    "end": "345919"
  },
  {
    "text": "C# code because that's not really the point the the the reason why I want to show you the C# code is just so that we",
    "start": "345919",
    "end": "351840"
  },
  {
    "text": "have something to contrast to or compare to um but the first language that I'm actually going to show you then is H",
    "start": "351840",
    "end": "359400"
  },
  {
    "text": "hasll and uh I'm going to talk about what HA hasll is when we get there and then when when I'm done doing Haskell",
    "start": "359400",
    "end": "365199"
  },
  {
    "text": "I'll do the same carta again for a third time in closure and the first thing we can you know identify here when we are",
    "start": "365199",
    "end": "371919"
  },
  {
    "text": "looking at this slide is that we can see all cool languages have nice logos and what does that say about C# then um I",
    "start": "371919",
    "end": "378720"
  },
  {
    "text": "don't know you know F has a nice logo um so um so that's basically bit so um okay",
    "start": "378720",
    "end": "385600"
  },
  {
    "text": "so let's just cover the rules of fistbas so um the rules of fisbus is very very simple you should write a program that",
    "start": "385600",
    "end": "392560"
  },
  {
    "text": "prints the numbers from 1 to 100 but there are some special rules because if the number is a multiple of three you",
    "start": "392560",
    "end": "397600"
  },
  {
    "text": "should print f instead of the number if it's a multiple of five it should you should print buzz and if the number is a",
    "start": "397600",
    "end": "403759"
  },
  {
    "text": "multiple of both three and five you should print fistbus that's it so as as",
    "start": "403759",
    "end": "408800"
  },
  {
    "text": "I promised you know we can spend all of 20 seconds talking about the rules of fistbus and that's basically it so it's",
    "start": "408800",
    "end": "414560"
  },
  {
    "text": "trivial you know it's not an interesting problem at all if you u if you try to do this in the language you're most",
    "start": "414560",
    "end": "419919"
  },
  {
    "text": "familiar with you should be able to do this in like five minutes um so but that also means that we you know you",
    "start": "419919",
    "end": "425280"
  },
  {
    "text": "shouldn't be confused of okay what was the rules about FSB bus and how do we actually do this this is really really trivial so that enables us to f just",
    "start": "425280",
    "end": "432639"
  },
  {
    "text": "focus on the language instead of focus on the problem now just let's just look at you know what could it look like in",
    "start": "432639",
    "end": "439039"
  },
  {
    "text": "C# so there you know C# is one of those languages where there's not one way of doing things there are plenty of of",
    "start": "439039",
    "end": "444720"
  },
  {
    "text": "alternative ways to approach a problem so here's just a sort of an old-fashioned implementation of of",
    "start": "444720",
    "end": "451039"
  },
  {
    "text": "fisbus in in C so you know since you want to have a a program you need to start with a main method so that's",
    "start": "451039",
    "end": "457360"
  },
  {
    "text": "fairly um standard and what you could do is if you want to what do it really the oldfashioned imperative way you can say",
    "start": "457360",
    "end": "463440"
  },
  {
    "text": "well let's have a full loop and you'll just go from the numbers from one to 100 and the first thing you do is you say",
    "start": "463440",
    "end": "468639"
  },
  {
    "text": "well if I modulo 3 * 5 5 equals zero you'll print or you'll console.right",
    "start": "468639",
    "end": "473919"
  },
  {
    "text": "line fistbus and the only thing you might wonder here is why do I do 3 * 5 and not just 15 which you know 3 * 5",
    "start": "473919",
    "end": "480960"
  },
  {
    "text": "obviously is and the reason for that is basically just you know I I I like the philosophy of domain driven design um",
    "start": "480960",
    "end": "488319"
  },
  {
    "text": "where you talk in the domain language so even when I do carters I like to do my carters in um in the language of the the",
    "start": "488319",
    "end": "495759"
  },
  {
    "text": "carter description and the carter description of fsbuzz you know specifically talks about the numbers",
    "start": "495759",
    "end": "500960"
  },
  {
    "text": "three and five but it never talks about the number 15 um so I just thought that you know I'm happy to use the constants",
    "start": "500960",
    "end": "507440"
  },
  {
    "text": "three and five because they're part of the domain language if you will but the number 15 is not so that's basically why I did that it might be even clearer and",
    "start": "507440",
    "end": "514159"
  },
  {
    "text": "more you know relatable to the rules if I had written something like if I modulo 3 equals z and I module 5 equals zero",
    "start": "514159",
    "end": "522000"
  },
  {
    "text": "then you know print fist bus whatever we can do that later on all right otherwise",
    "start": "522000",
    "end": "527519"
  },
  {
    "text": "I'll say well if it's module 5 equals z I'll print bus and then you know module 3 equals zero I'll print fist and then",
    "start": "527519",
    "end": "533600"
  },
  {
    "text": "otherwise I'll just print the number so that's basically it you know if I run this program it's just gonna start",
    "start": "533600",
    "end": "539360"
  },
  {
    "text": "printing out all of those those numbers so I just you know wrapped that column into multiple column col",
    "start": "539360",
    "end": "544640"
  },
  {
    "text": "columns here in order to fit all the numbers on the screen but obviously it's just going to you know print one column so that's basically what what it is that",
    "start": "544640",
    "end": "550959"
  },
  {
    "text": "we want to achieve so that was the C# part of it uh C# part of it now let's uh",
    "start": "550959",
    "end": "556320"
  },
  {
    "text": "let's look at it in Haskell then so first of all before I just start typing some Haskell code let's talk a little bit about okay what is Haskell actually",
    "start": "556320",
    "end": "563200"
  },
  {
    "text": "so first of all we realize that Haskell has a cool logo there's also a version of that logo in colors making it even",
    "start": "563200",
    "end": "569440"
  },
  {
    "text": "more cool but you know for some reason I decided to pick the gray one um the next",
    "start": "569440",
    "end": "575279"
  },
  {
    "text": "thing we can say about Haskell is that it's a strictly functional uh programming language so what do we mean",
    "start": "575279",
    "end": "580560"
  },
  {
    "text": "by strictly functional well it turns out that a lot of the popular functional",
    "start": "580560",
    "end": "585760"
  },
  {
    "text": "programming languages out there like Scala and Closure and F um possibly also Erlang which I don't know a lot about um",
    "start": "585760",
    "end": "592959"
  },
  {
    "text": "but the other ones that I just mentioned here they are not actually strictly functional they are like what we could call multi- paradigmatic languages",
    "start": "592959",
    "end": "600240"
  },
  {
    "text": "particularly Scala is and also F is pretty multi- paradigmatic you can do object-oriented you know software",
    "start": "600240",
    "end": "606640"
  },
  {
    "text": "development in F# if you want to because F needs to interoperate with all the C# code and the visual basic code that's",
    "start": "606640",
    "end": "612640"
  },
  {
    "text": "already on net and this same sort of situation also goes for the other languages there so they are not strictly",
    "start": "612640",
    "end": "618160"
  },
  {
    "text": "functional they're sort of like designed to make functional programming easy but they can do sorts of all sorts of you",
    "start": "618160",
    "end": "623920"
  },
  {
    "text": "know imperative stuff and things with side effects as well if you want to this",
    "start": "623920",
    "end": "629040"
  },
  {
    "text": "is not true for for Haskell haskell Haskell is a strictly functional language there is the Haskell way or or",
    "start": "629040",
    "end": "635600"
  },
  {
    "text": "the highway when when you're writing HASLL you can't just say well yeah but I'd like a little bit of state mutation here because whatever nope it's not",
    "start": "635600",
    "end": "643279"
  },
  {
    "text": "possible you have to write functional code that's the only thing you can do so it's a great language for learning",
    "start": "643279",
    "end": "648720"
  },
  {
    "text": "functional programming if you're interested in this because you can only do functional programming with it um the",
    "start": "648720",
    "end": "654079"
  },
  {
    "text": "other thing we can say about HA hasll is that it's statically typed and actually what we're looking at the moment this bullet list is actually if we could call",
    "start": "654079",
    "end": "660880"
  },
  {
    "text": "that a bullet list this is actually Haskell code this compiles and it has a type haskell is a value hasll up here on",
    "start": "660880",
    "end": "667839"
  },
  {
    "text": "the slide um the value has the type it's a list of strings in this case it's",
    "start": "667839",
    "end": "672959"
  },
  {
    "text": "probably fairly evident that that what is going on because the um square brackets there indicates that it's a",
    "start": "672959",
    "end": "678480"
  },
  {
    "text": "list and since the you know values inside of the list are quoted with those quotes double quotes those are strings",
    "start": "678480",
    "end": "684720"
  },
  {
    "text": "so therefore this is a list of strings but you'll notice that there is actually no type declaration anywhere but even so",
    "start": "684720",
    "end": "690399"
  },
  {
    "text": "it is statically typed because the compiler can infer you know the type of this list you know a third third thing we",
    "start": "690399",
    "end": "697360"
  },
  {
    "text": "could say about Haskell is that it's lazily evaluated which is sort of unusual that's not what we used to when we do C sharp Java development but it's",
    "start": "697360",
    "end": "704079"
  },
  {
    "text": "not something that we actually need to think much about when you know when I show you the the Carter here so let's let's not talk too much about that so",
    "start": "704079",
    "end": "711440"
  },
  {
    "text": "with that said let's try to see what it looks like to um to do the FSBUS Carter",
    "start": "711440",
    "end": "716720"
  },
  {
    "text": "in in Haskell so in order to do that I'll switch to uh here's atom and uh",
    "start": "716720",
    "end": "722240"
  },
  {
    "text": "it'd be it'd be not interesting to show you hello world so I already put that in here but that's basically what hello",
    "start": "722240",
    "end": "727680"
  },
  {
    "text": "world looks like and if I want to evaluate it I can switch here to um to a um to my console here I have loaded the",
    "start": "727680",
    "end": "734959"
  },
  {
    "text": "Haskell ripple the readaloud print loop and if you can't see the font size now now is the time to actually speak up to",
    "start": "734959",
    "end": "741120"
  },
  {
    "text": "ask me to to change it because that's better you know if you do that straight away but I tried to see if I could make",
    "start": "741120",
    "end": "746720"
  },
  {
    "text": "the font size big enough so I can call the main function here and you see that it prints out hello world so yeah it",
    "start": "746720",
    "end": "752480"
  },
  {
    "text": "works at this point but that's not what we want to do we want to do fists so I'll switch back to my editor here and",
    "start": "752480",
    "end": "757920"
  },
  {
    "text": "I'll say well okay so I'll I want to de de um I want to deconstruct the problem into two problems i want to take first",
    "start": "757920",
    "end": "765040"
  },
  {
    "text": "of all I want to solve the problem of having a single number and figure out figuring out for that number what should",
    "start": "765040",
    "end": "770720"
  },
  {
    "text": "the resulting string be and then once I have that function I can then start to figure out okay um if I have a list of",
    "start": "770720",
    "end": "777600"
  },
  {
    "text": "numbers or you know a sequence of numbers then you know how do I actually print out all of those those strings instead so I'm going to write first a",
    "start": "777600",
    "end": "784560"
  },
  {
    "text": "function called fistbuzz one and I I'm calling it one because it just deals with one input element and you don't",
    "start": "784560",
    "end": "790880"
  },
  {
    "text": "have function overloading in um in in hasll so you need to call this function some something else and I want to",
    "start": "790880",
    "end": "796560"
  },
  {
    "text": "reserve the word fsbuzz for the function that actually does you know for all the numbers so the fsbas one function needs",
    "start": "796560",
    "end": "803839"
  },
  {
    "text": "to take an input and we can just call that i for integer we could also have called it number but you know in in H",
    "start": "803839",
    "end": "810079"
  },
  {
    "text": "hasll we like to keep things very succinct so that it's as unreadable as possible um so the first thing we need",
    "start": "810079",
    "end": "816160"
  },
  {
    "text": "to figure out is how do we actually convert a number to a string and uh that",
    "start": "816160",
    "end": "821440"
  },
  {
    "text": "turns out to be fairly easy because there is a there there is a function called show that will convert you a lot",
    "start": "821440",
    "end": "828560"
  },
  {
    "text": "of different things into integers so if I try to compile this uh you will notice that all sorts of warnings pops pop up",
    "start": "828560",
    "end": "835360"
  },
  {
    "text": "over here some of the warnings you you shouldn't really worry about because one of the warnings for example is that it says well this function is not used um",
    "start": "835360",
    "end": "842800"
  },
  {
    "text": "and I I will use it but only until the end of the carter so you will have you will see at least that warning until the",
    "start": "842800",
    "end": "848639"
  },
  {
    "text": "very end so don't worry too much about those things u there's a couple of other warnings that we can talk about but actually basically this already compiles",
    "start": "848639",
    "end": "855440"
  },
  {
    "text": "and is statically typed believe it or not so if I go back here and reload my",
    "start": "855440",
    "end": "860800"
  },
  {
    "text": "my um my my code I can say well all right let's call FSB bus one with the number one for example and you'll see it",
    "start": "860800",
    "end": "867199"
  },
  {
    "text": "prints out or it returns the string one and if I do it with two you know it you know returns the string two and you know",
    "start": "867199",
    "end": "873120"
  },
  {
    "text": "if I do it with three it returns the string three which is not the correct implementation but shouldn't really surprise us because we haven't started",
    "start": "873120",
    "end": "879279"
  },
  {
    "text": "dealing with that but that ought to be fizz right okay so I I told you that this is statically typed so we can ask",
    "start": "879279",
    "end": "886079"
  },
  {
    "text": "you know in the ripple here we can say what is The type of fistbus one well the compiler says well the type of fistbus",
    "start": "886079",
    "end": "891839"
  },
  {
    "text": "one is this this looks a little bit weird but it says show a fat arrow a",
    "start": "891839",
    "end": "898480"
  },
  {
    "text": "small arrow string so basically what it means is what I usually do is I say well",
    "start": "898480",
    "end": "903600"
  },
  {
    "text": "first of all I focus on everything that's on the right hand side of that fat arrow um so I'm just looking a a",
    "start": "903600",
    "end": "909440"
  },
  {
    "text": "thin arrow to string so basically what that means is that it's a function that takes a value of the type a and returns",
    "start": "909440",
    "end": "916399"
  },
  {
    "text": "a string now string is probably pretty understandable for for everyone that has",
    "start": "916399",
    "end": "921920"
  },
  {
    "text": "done any software development uh ever um but what is a well a is a generic type",
    "start": "921920",
    "end": "927680"
  },
  {
    "text": "so you know generic um you know methods from sharp and java has generics as well and that's basically what we have here",
    "start": "927680",
    "end": "933839"
  },
  {
    "text": "so this could be any any well not actually any value but it could be a",
    "start": "933839",
    "end": "938959"
  },
  {
    "text": "value of a lot of different types and I'll just prove it to you to say well okay instead of calling it with with the with integers you know I can call it",
    "start": "938959",
    "end": "945680"
  },
  {
    "text": "with a decimal and that's going to you know work just fine you know I can call it with a boolean so if I call it with",
    "start": "945680",
    "end": "951199"
  },
  {
    "text": "the boolean value false it's just going to give me this the string false back you know if I I can even call it with",
    "start": "951199",
    "end": "956560"
  },
  {
    "text": "another string so I can say well fu it's just going to double quote it that's a little bit weird but that's uh you know",
    "start": "956560",
    "end": "961680"
  },
  {
    "text": "uh you'd expect it to just return the string and again you know without actually double quoted but that's some",
    "start": "961680",
    "end": "967040"
  },
  {
    "text": "you know whatever um so it just takes everything well actually not everything but it takes a lot of things and just",
    "start": "967040",
    "end": "973360"
  },
  {
    "text": "turns them into strings so what does this show a thing mean this so let's just type out the um let's look at the",
    "start": "973360",
    "end": "980399"
  },
  {
    "text": "type of fisbus one again so you'll notice that it says show a fat arrow and",
    "start": "980399",
    "end": "985759"
  },
  {
    "text": "then a and that what what's on the left hand side of that fat arrow is a qualification of the generic type so it",
    "start": "985759",
    "end": "992000"
  },
  {
    "text": "says well it's not every type it's only those types that belong to what we call a type class called show so you know in",
    "start": "992000",
    "end": "1000240"
  },
  {
    "text": "in um in C# and in Java you are you know probably used to every object belongs to",
    "start": "1000240",
    "end": "1006320"
  },
  {
    "text": "a an object hierarchy that you know derives from objects and you know object define a two-string method not so here",
    "start": "1006320",
    "end": "1012399"
  },
  {
    "text": "in HA hasll there are a lot of things that you can turn into strings you know everything that belongs to the type",
    "start": "1012399",
    "end": "1018480"
  },
  {
    "text": "class show you can turn into a string but you shouldn't really take the word type class to mean a class like in in",
    "start": "1018480",
    "end": "1024400"
  },
  {
    "text": "Shava Java because it's sort of different you can think of it as a category of types or a set of types that",
    "start": "1024400",
    "end": "1030720"
  },
  {
    "text": "all can be turned into string but basically what it means is that if if a type belongs to the type class show",
    "start": "1030720",
    "end": "1038160"
  },
  {
    "text": "there is a show function or the show function is defined for that type and that means we can use that type and turn it into a string right so you'll Notice",
    "start": "1038160",
    "end": "1046079"
  },
  {
    "text": "also that the compiler tries to infer a type of the function that is as you know",
    "start": "1046079",
    "end": "1052720"
  },
  {
    "text": "as universal as possible so in this case it says well it could be anything as long as we can turn it into a string",
    "start": "1052720",
    "end": "1058000"
  },
  {
    "text": "it's not going to stay that way because we we'll need to do some arithmetic on the the number in order to figure out",
    "start": "1058000",
    "end": "1063200"
  },
  {
    "text": "whether it's a multiple of three or five so it's going to we have we'll have to restrict it more until we can continue",
    "start": "1063200",
    "end": "1069919"
  },
  {
    "text": "one of the things that the compiler would like me to do though is it'd like me to actually you know put on a a",
    "start": "1069919",
    "end": "1075600"
  },
  {
    "text": "specific type declaration so we can do that as well that's one of the warnings so we can write fistbus one is um so I'm",
    "start": "1075600",
    "end": "1082880"
  },
  {
    "text": "basically just going to you know write what the compiler already inferred i'll say for every show a uh the function is",
    "start": "1082880",
    "end": "1090400"
  },
  {
    "text": "uh takes a as input and returns a string as output so that's just one more warning uh less uh now so uh so we you",
    "start": "1090400",
    "end": "1097360"
  },
  {
    "text": "don't you don't have to this in order to make it to compile but you know hasll still would like you to do that because",
    "start": "1097360",
    "end": "1102880"
  },
  {
    "text": "sometimes that is useful now with that out of the way let's try to figure out",
    "start": "1102880",
    "end": "1108320"
  },
  {
    "text": "okay so how do we deal with all the other requirements of having to you know return fizz if it's a multiple of three",
    "start": "1108320",
    "end": "1114240"
  },
  {
    "text": "so what I can do is I said well I can't do overloading but you know I can define the function in more than one way so in",
    "start": "1114240",
    "end": "1121760"
  },
  {
    "text": "this case I can say well fsbas one of i it I can actually define a constrained",
    "start": "1121760",
    "end": "1127280"
  },
  {
    "text": "or a filtering you know implementation of that function so that what that this is what this vertical bar means it says",
    "start": "1127280",
    "end": "1133679"
  },
  {
    "text": "well every what comes next is a boolean expression in this case I'll say well you know I mod three should equal zero",
    "start": "1133679",
    "end": "1142400"
  },
  {
    "text": "so this is just a funky way of writing um you know an infix operation let's not",
    "start": "1142400",
    "end": "1147520"
  },
  {
    "text": "worry too much about that if that is true now this is a boolean an expression if that is if that if that evaluates to",
    "start": "1147520",
    "end": "1154160"
  },
  {
    "text": "true we can return you know fizz so the return value of the function is just the",
    "start": "1154160",
    "end": "1159200"
  },
  {
    "text": "expression after this uh you know single equal sign here um but this is this particular you know implementation of",
    "start": "1159200",
    "end": "1165679"
  },
  {
    "text": "the function if you will will only be called if this boolean expression here actually values to true otherwise it's",
    "start": "1165679",
    "end": "1171679"
  },
  {
    "text": "just going to fall down into this um you know default implementation if you will that doesn't have any constraints so",
    "start": "1171679",
    "end": "1177440"
  },
  {
    "text": "this is sort of the fallback implementation so the order actually matters here now if I try to compile",
    "start": "1177440",
    "end": "1183440"
  },
  {
    "text": "this you'll notice that you know that it that it doesn't actually compile these red boxes around it and the reason for",
    "start": "1183440",
    "end": "1189679"
  },
  {
    "text": "that is it says well mod is not defined for any show you know for any generic",
    "start": "1189679",
    "end": "1194720"
  },
  {
    "text": "type argument a that only belongs to the show show type class mod is not defined for those types because you know this",
    "start": "1194720",
    "end": "1202080"
  },
  {
    "text": "you know how do we do mod on a string for example that's we don't really know how to do that so we need to constrain",
    "start": "1202080",
    "end": "1208000"
  },
  {
    "text": "the type further on and say well you know a must belong to the show type",
    "start": "1208000",
    "end": "1213200"
  },
  {
    "text": "class but it must also belong to another type class and that type class is called integral and I'll you know get back to",
    "start": "1213200",
    "end": "1219600"
  },
  {
    "text": "what that means in in a moment but basically now it uh it compiles so if I go back to my ripple I can reload my",
    "start": "1219600",
    "end": "1226960"
  },
  {
    "text": "code and I can say okay what is fbus one of three that is now fizz so I'm happy",
    "start": "1226960",
    "end": "1232159"
  },
  {
    "text": "that works okay so what does what what does integral mean well integral is basically just another type class so",
    "start": "1232159",
    "end": "1239120"
  },
  {
    "text": "that means it's a set of types that you know share a contract if you will and",
    "start": "1239120",
    "end": "1244159"
  },
  {
    "text": "integral is just any integer so um you know in in HA hasll integers might not",
    "start": "1244159",
    "end": "1249360"
  },
  {
    "text": "be you know one integer there's 16 bit integers and 32-bit integers 64-bit integers and there are unb unbounded",
    "start": "1249360",
    "end": "1255440"
  },
  {
    "text": "integers that can be as large as as you will as long as they're within the constraints of your of your system you",
    "start": "1255440",
    "end": "1260559"
  },
  {
    "text": "know that's true for net as well they have all of those different integers and hasll does that as well but what I've",
    "start": "1260559",
    "end": "1265760"
  },
  {
    "text": "done here is you know in inn net you know in C# I would have had to write an overload for all of those specific",
    "start": "1265760",
    "end": "1271200"
  },
  {
    "text": "integers and and deal with each of those types specifically whereas in Haskell I can just say well you know this just",
    "start": "1271200",
    "end": "1277440"
  },
  {
    "text": "applies to any integer that uh that belongs to the set of of of integer",
    "start": "1277440",
    "end": "1282799"
  },
  {
    "text": "types that we call integral because for all of those types the mod function is",
    "start": "1282799",
    "end": "1287960"
  },
  {
    "text": "defined fine um and there's a there you know the integral type class also",
    "start": "1287960",
    "end": "1293679"
  },
  {
    "text": "defines other functions than mod it you know like plus and minus and and and things like that um but now that means",
    "start": "1293679",
    "end": "1299360"
  },
  {
    "text": "you know I can go back and and reload i already do did that i I was just talking about integral i sort of you know",
    "start": "1299360",
    "end": "1305600"
  },
  {
    "text": "explained that already so let's move on um so I'll just do a copy and paste and",
    "start": "1305600",
    "end": "1310880"
  },
  {
    "text": "I'll say okay if it's you know modulo five I should print buzz and you know if",
    "start": "1310880",
    "end": "1317120"
  },
  {
    "text": "it's a modulo of so I could do what I talked about in in in um in C# I can say",
    "start": "1317120",
    "end": "1322320"
  },
  {
    "text": "an i mod um five equals",
    "start": "1322320",
    "end": "1327960"
  },
  {
    "text": "zero then it should be fistbus so again you know this looks a little bit verbose",
    "start": "1327960",
    "end": "1333840"
  },
  {
    "text": "uh you may think that that um it could be more you know does it have to be this verbose and it doesn't you know I'm just",
    "start": "1333840",
    "end": "1339440"
  },
  {
    "text": "showing you you the more verbose syntax because I think it's a good introduction to the language but you can actually write it much more compact so you don't",
    "start": "1339440",
    "end": "1345760"
  },
  {
    "text": "have to repeat yourself just as much as I did here um but so there are all sorts of you know language syntax shortcuts uh",
    "start": "1345760",
    "end": "1352640"
  },
  {
    "text": "you can use if if you don't like you know the the verbosity of this so if I",
    "start": "1352640",
    "end": "1357840"
  },
  {
    "text": "reload now we can see that um you know fistbus 3 we expect that to return fizz it does uh five returns bus 15 returns",
    "start": "1357840",
    "end": "1366320"
  },
  {
    "text": "fistbus so that seems promising so the next thing we need to figure out is to say well okay um now I have a function",
    "start": "1366320",
    "end": "1373039"
  },
  {
    "text": "that takes a single integer or a single integral and returns a string but what I",
    "start": "1373039",
    "end": "1378720"
  },
  {
    "text": "actually need is to print all the numbers from one to 100 using that you know algorithm if you will so how do I",
    "start": "1378720",
    "end": "1384960"
  },
  {
    "text": "do that so I need to do a loop and then you run into this problem that Haskell doesn't do loop you can't do loops in",
    "start": "1384960",
    "end": "1391039"
  },
  {
    "text": "Haskell oh okay so what do you do then well Haskell doesn't do loops but it",
    "start": "1391039",
    "end": "1396320"
  },
  {
    "text": "does lists so let's look at what a list is so a list in Haskell is a um linked",
    "start": "1396320",
    "end": "1402080"
  },
  {
    "text": "list maybe I should just um clear the console here so that we um No that",
    "start": "1402080",
    "end": "1407360"
  },
  {
    "text": "doesn't give me the top then well I hope you can see even though I'm",
    "start": "1407360",
    "end": "1413039"
  },
  {
    "text": "writing down there at the bottom um so I was talking about lists",
    "start": "1413039",
    "end": "1418799"
  },
  {
    "text": "so lists in in hasll are linked lists and we can you know we can write them out you know fairly easily like saying",
    "start": "1418799",
    "end": "1424320"
  },
  {
    "text": "well here's a list of of three numbers the numbers one uh four and two but",
    "start": "1424320",
    "end": "1429679"
  },
  {
    "text": "lists are generic as well so you know I can also write a list with the with the strings fu and bar if I wanted to do",
    "start": "1429679",
    "end": "1435280"
  },
  {
    "text": "that you know but I can't mix them so you know if I try to you know put in a an integer into a list of strings that",
    "start": "1435280",
    "end": "1441520"
  },
  {
    "text": "doesn't compile so it's just like in in C# you have you know list of t lists are",
    "start": "1441520",
    "end": "1446960"
  },
  {
    "text": "also generic in in Haskell now lists in Haskell and you know in general in functional programming tend to be linked",
    "start": "1446960",
    "end": "1453120"
  },
  {
    "text": "lists so um so what a linked list is that it's a um you know it's a value it",
    "start": "1453120",
    "end": "1458400"
  },
  {
    "text": "contains a value which is on the head of the list as we call it this is the value that we can see and then there's a",
    "start": "1458400",
    "end": "1463919"
  },
  {
    "text": "pointer to the rest of the list so um so another way of writing you know",
    "start": "1463919",
    "end": "1469360"
  },
  {
    "text": "first of all you can write the empty list the empty list just looks like this but then what you can do is you can say well the a list with one element is",
    "start": "1469360",
    "end": "1476000"
  },
  {
    "text": "actually the element the value one and then a pointer to the rest of the list uh and the rest of the list might be the",
    "start": "1476000",
    "end": "1482559"
  },
  {
    "text": "empty list like this one so this colon operator there is what we call the cons operator and we sometimes say that we",
    "start": "1482559",
    "end": "1488080"
  },
  {
    "text": "cons one onto the rest of the list and the rest of the list we call the tail of the list in this case it's the empty",
    "start": "1488080",
    "end": "1493600"
  },
  {
    "text": "list so when I evaluate that you will notice that it gives me just the syntactic sugar of that um but that's",
    "start": "1493600",
    "end": "1499679"
  },
  {
    "text": "basically those two things are completely equivalent and you can you know you can cons each other so you can",
    "start": "1499679",
    "end": "1505120"
  },
  {
    "text": "say well 1 32 and then end them as long as you end them with the empty list uh that's that's going to be fine actually",
    "start": "1505120",
    "end": "1511200"
  },
  {
    "text": "you can also create infinite lists if you want to but not with this syntax um so you can see again you know the",
    "start": "1511200",
    "end": "1516240"
  },
  {
    "text": "syntactic sugar version of that is just you know the numbers 1 three and two now this is this becomes important in just a",
    "start": "1516240",
    "end": "1522559"
  },
  {
    "text": "moment um the last thing I want to show you or talk about with list is that we can also you know we're interested in in",
    "start": "1522559",
    "end": "1528080"
  },
  {
    "text": "in looking at the numbers from 1 to 100 and we can use this thing called list comprehension i'm just going to do the",
    "start": "1528080",
    "end": "1533279"
  },
  {
    "text": "numbers from 1 to 15 and basically I'm just saying well you know the start number dot dot the end number and then",
    "start": "1533279",
    "end": "1538960"
  },
  {
    "text": "I'm just get going to get all of those numbers generated so that's a little bit easier way of actually getting all the",
    "start": "1538960",
    "end": "1544080"
  },
  {
    "text": "numbers from you know in in a range now remember this con um you know way of",
    "start": "1544080",
    "end": "1550320"
  },
  {
    "text": "expressing things with with the colon operator because basically what I need to do now is I want to write a function",
    "start": "1550320",
    "end": "1555919"
  },
  {
    "text": "where I say well if I have an input which is a list of numbers I want to produce an output which is a list of",
    "start": "1555919",
    "end": "1562240"
  },
  {
    "text": "strings you know where each element has been transformed into a string using that fistbus one function so I'll call",
    "start": "1562240",
    "end": "1568880"
  },
  {
    "text": "this function fistbus so that's why I didn't call the other one fistbus and what I want to say is I want I want the",
    "start": "1568880",
    "end": "1574640"
  },
  {
    "text": "input to be a list of integers and what I can do then is I can pattern match on that list you know immediately and try",
    "start": "1574640",
    "end": "1581200"
  },
  {
    "text": "to dstructure the head and the tail so I'll say well there's going to be a head",
    "start": "1581200",
    "end": "1586320"
  },
  {
    "text": "i I'll call that I for integer and then there's going to be the rest of the list the tail of the list and I'm going to",
    "start": "1586320",
    "end": "1592159"
  },
  {
    "text": "call that eyes so that's the plural s so it it doesn't it doesn't say is here it",
    "start": "1592159",
    "end": "1597200"
  },
  {
    "text": "says eyes so read that as eyes this is very common in Haskell that you have things where it's called X and X's or I",
    "start": "1597200",
    "end": "1602720"
  },
  {
    "text": "and I's or Y and Y's or whatever um so this is a fairly easy way of of calling",
    "start": "1602720",
    "end": "1608159"
  },
  {
    "text": "it but basically it says well this is actually still one argument but I am immediately instead of trying to you",
    "start": "1608159",
    "end": "1613679"
  },
  {
    "text": "know pull the head and the tail out of the list um I'm just immediately doing this so this is just a compact syntax",
    "start": "1613679",
    "end": "1618960"
  },
  {
    "text": "for pulling the head of the tail out of the list immediately even so it looks like it's it's sort of two arguments but",
    "start": "1618960",
    "end": "1625039"
  },
  {
    "text": "it's actually just one so what I want to do is I want to say well okay I want to take the number I I",
    "start": "1625039",
    "end": "1631039"
  },
  {
    "text": "have one number the i that which is at the head of the list I want to transform that using fsbus one that's fairly easy",
    "start": "1631039",
    "end": "1637840"
  },
  {
    "text": "I just call fsbus one with i and then I want to say well that will be the head of my new list of strings but I want to",
    "start": "1637840",
    "end": "1645159"
  },
  {
    "text": "consist of strings so how do I get a list of strings from the rest of the integers well I just cons that you know",
    "start": "1645159",
    "end": "1651520"
  },
  {
    "text": "to the rest of the in integers so I just kind of call you know recursively call fistbus with the eyes all right so",
    "start": "1651520",
    "end": "1658320"
  },
  {
    "text": "that's basically going to do almost all of it the only thing that's that's still missing here and if I try to compile it I actually get a warning it says well",
    "start": "1658320",
    "end": "1664799"
  },
  {
    "text": "there is a special case that you haven't dealt with because most lists tend to",
    "start": "1664799",
    "end": "1670240"
  },
  {
    "text": "have this structure but there is a special case of a list that doesn't have a head and a tail and that is the empty",
    "start": "1670240",
    "end": "1676399"
  },
  {
    "text": "list so if the input is the empty list this pattern actually doesn't match because there is not both a head and a",
    "start": "1676399",
    "end": "1683120"
  },
  {
    "text": "tail so I need to define okay what's going to happen in the case where the input is the empty list i'm just going",
    "start": "1683120",
    "end": "1688640"
  },
  {
    "text": "to say all right in that case the output is also going to be the empty list but because the compiler knows the types of",
    "start": "1688640",
    "end": "1694799"
  },
  {
    "text": "these things the input here is the empty list of integers the output is an empty",
    "start": "1694799",
    "end": "1700240"
  },
  {
    "text": "list of strings so even though we can't see the types that are sort of still there the compiler figures it out",
    "start": "1700240",
    "end": "1705600"
  },
  {
    "text": "because it knows what I mean so again you know if we get if we go back here and say all right let's reload all of",
    "start": "1705600",
    "end": "1711279"
  },
  {
    "text": "this stuff we can say um let's call FSB bus with the numbers just from 1 to 15",
    "start": "1711279",
    "end": "1717440"
  },
  {
    "text": "and see what's going to happen and we can see that that we get you know one two fus f 7 8 and so on you know back so",
    "start": "1717440",
    "end": "1724480"
  },
  {
    "text": "that actually looks like it's working what's the type of fist bus so we can ask about that as well the type is it",
    "start": "1724480",
    "end": "1731840"
  },
  {
    "text": "looks a lot like the other one it's it says for all integral a all show a it's a list of A's that goes into a list of",
    "start": "1731840",
    "end": "1738480"
  },
  {
    "text": "strings so it's almost the other one but it's just instead of one A going into one string it's a list of A's that goes",
    "start": "1738480",
    "end": "1744240"
  },
  {
    "text": "into a list of strings uh so we can almost just take and copy and paste you",
    "start": "1744240",
    "end": "1749360"
  },
  {
    "text": "know this you know type declaration up here you know paste it in here you know just remove a couple of things i just",
    "start": "1749360",
    "end": "1755279"
  },
  {
    "text": "need to put those square brackets around the the the types here like this and uh this still ought",
    "start": "1755279",
    "end": "1763440"
  },
  {
    "text": "to work so so this is the same i just put the type decoration on because the compiler",
    "start": "1763440",
    "end": "1768640"
  },
  {
    "text": "likes me to do this so there's another warning here that that that I might you",
    "start": "1768640",
    "end": "1773679"
  },
  {
    "text": "know be interested in here and this is not from the compiler this is from a llinter and it says well you know this",
    "start": "1773679",
    "end": "1779200"
  },
  {
    "text": "is something that is done you this you know thing where you recursively call you know you recursively move over a",
    "start": "1779200",
    "end": "1785520"
  },
  {
    "text": "list and just call you know constant new list out of that until you you reach the end of the list that is such a common",
    "start": "1785520",
    "end": "1791919"
  },
  {
    "text": "thing to do that that's actually built into the language it's called a map and it's not just hasll you know it's in functional programming in general this",
    "start": "1791919",
    "end": "1798240"
  },
  {
    "text": "is just called a map so why not why not do that instead so um so I just showed",
    "start": "1798240",
    "end": "1803360"
  },
  {
    "text": "you this here because it shows you the general you know way that you actually deal with things so you also understand",
    "start": "1803360",
    "end": "1809200"
  },
  {
    "text": "that the map the built-in map function is not magical in any way it's actually implemented pretty much like this but",
    "start": "1809200",
    "end": "1814960"
  },
  {
    "text": "what what it means though is we can say well we'll just define fisb bus to say well we'll take any uh integers as input",
    "start": "1814960",
    "end": "1821840"
  },
  {
    "text": "any list of integers as input and we'll just call map and we'll say fistbus one is the function that we're going to use",
    "start": "1821840",
    "end": "1827120"
  },
  {
    "text": "each to map each element and then we're just going to say that the other input to the map function is is is those eyes",
    "start": "1827120",
    "end": "1834080"
  },
  {
    "text": "and that is ex exactly the same and then you know hasll wants me to do something you know or the llinter wants me to do",
    "start": "1834080",
    "end": "1840000"
  },
  {
    "text": "something called an e to reduce um so this is almost like this seems almost like you know mathematics you know like",
    "start": "1840000",
    "end": "1846000"
  },
  {
    "text": "when you were solving you know equations back in high school or college or whatever you can say well there's an",
    "start": "1846000",
    "end": "1852159"
  },
  {
    "text": "eyes on both sides of the of the equal sign and we can actually just remove those and um and say that is exactly",
    "start": "1852159",
    "end": "1857840"
  },
  {
    "text": "equivalent again so this is called point free programming and some people hate it and some people think it's really",
    "start": "1857840",
    "end": "1863600"
  },
  {
    "text": "wonderful I I am sort of in you know torn in between that because it I really likes the feeling you know my brain gets",
    "start": "1863600",
    "end": "1869840"
  },
  {
    "text": "every time I can do this but then I come back to it and I say this is completely unreadable Um so um so I I actually",
    "start": "1869840",
    "end": "1876399"
  },
  {
    "text": "often tend not to do this but but but the hasll lint really wants you to do this but in F# I wouldn't do stuff like",
    "start": "1876399",
    "end": "1882320"
  },
  {
    "text": "this um but you know if we go and reload here we can see that um it still compiles and if I do um you know fbus",
    "start": "1882320",
    "end": "1888880"
  },
  {
    "text": "from 1 to 15 it still returns exactly the same so it's just a simpler implementation if you will now we're not",
    "start": "1888880",
    "end": "1894159"
  },
  {
    "text": "quite there yet because we're actually not you know the the specification of the problem says that we have to print",
    "start": "1894159",
    "end": "1899519"
  },
  {
    "text": "the numbers from 1 to 100 am I actually not printing anything yet and and you'd probably argue well but you are because",
    "start": "1899519",
    "end": "1905600"
  },
  {
    "text": "the things are just there well yes but that is because the ripple you know the read eval print loop prints it for me so",
    "start": "1905600",
    "end": "1912640"
  },
  {
    "text": "I'm just toying around in this development environment called read eval print loops that reads the expression",
    "start": "1912640",
    "end": "1917919"
  },
  {
    "text": "that I write you know evaluate and then prints the result of that expression and then gives me you know prompt so that I",
    "start": "1917919",
    "end": "1923600"
  },
  {
    "text": "can write a new expression but that's actually not you know if I run my program it doesn't print anything",
    "start": "1923600",
    "end": "1928720"
  },
  {
    "text": "actually still you know my main method still just prints hello world because I haven't done anything else so I need to",
    "start": "1928720",
    "end": "1935279"
  },
  {
    "text": "just uh you know print this and I also you know instead of having just this list you know printing from left to",
    "start": "1935279",
    "end": "1940480"
  },
  {
    "text": "right I want to have you know printing a column where with each um value on a new line so there's a couple of things that",
    "start": "1940480",
    "end": "1947279"
  },
  {
    "text": "I still need to do so you might say well okay instead of having put strlN hello",
    "start": "1947279",
    "end": "1952399"
  },
  {
    "text": "world here can I just put in you know fisbus and then you know 1 to 15 would",
    "start": "1952399",
    "end": "1958080"
  },
  {
    "text": "that work and and that turns out not to work because I have declared you know my",
    "start": "1958080",
    "end": "1963440"
  },
  {
    "text": "main entry point to be of the type IO of unit and that means that it's a function",
    "start": "1963440",
    "end": "1968960"
  },
  {
    "text": "that's a function that takes no no input it returns no output but it has side effects and the side effect is that it",
    "start": "1968960",
    "end": "1975120"
  },
  {
    "text": "prints to the console and uh fistbus 1 to 15 doesn't have a side effect it",
    "start": "1975120",
    "end": "1980559"
  },
  {
    "text": "actually returns a string so these types are actually incompatible so what I'd much rather like to do is I want to say",
    "start": "1980559",
    "end": "1986799"
  },
  {
    "text": "well I have a list of strings i want to concatenate all of those strings together to become a single string but",
    "start": "1986799",
    "end": "1994240"
  },
  {
    "text": "where each of the elements are separated with a new line character and then I want to print those most of this is basically just",
    "start": "1994240",
    "end": "2000559"
  },
  {
    "text": "built into Haskell so that's that's fairly easy to do so so the function that uh you know takes a list of strings",
    "start": "2000559",
    "end": "2006399"
  },
  {
    "text": "and just creates a single string with new lines is actually built in it's called unlines but that just returns a",
    "start": "2006399",
    "end": "2012799"
  },
  {
    "text": "single string that's still not IO of of unit but then I can say all right so I'll just call put strr and um and then",
    "start": "2012799",
    "end": "2021519"
  },
  {
    "text": "that's going to work so I I'll get back to this in a moment but let's just see if we reload this and I call the main",
    "start": "2021519",
    "end": "2026880"
  },
  {
    "text": "function again um oh that's just 1 to 15 i should actually do you know 1 to 100",
    "start": "2026880",
    "end": "2032240"
  },
  {
    "text": "um so reload and u main again and you'll see that it prints all the numbers uh so",
    "start": "2032240",
    "end": "2037840"
  },
  {
    "text": "that's very nice so normally when there is a demo and it succeeds you",
    "start": "2037840",
    "end": "2043000"
  },
  {
    "text": "clap oh I know it's yay i know that's that wasn't actually particularly you",
    "start": "2043000",
    "end": "2048800"
  },
  {
    "text": "know difficult so all right so one of the things that is a little bit funny about hasll is that you know uh",
    "start": "2048800",
    "end": "2054480"
  },
  {
    "text": "functions are actually composed right to left so so what actually happens here is we say well we'll start with the",
    "start": "2054480",
    "end": "2060800"
  },
  {
    "text": "function call where we call fistbus with one to 100 then we take the value of",
    "start": "2060800",
    "end": "2065919"
  },
  {
    "text": "that and call the online functions with that one the output of that one will",
    "start": "2065919",
    "end": "2071040"
  },
  {
    "text": "then take that value and call put strr with that value and that's the string that that you then saw was printed so",
    "start": "2071040",
    "end": "2077599"
  },
  {
    "text": "that's sort of a backwards and exactly why hasll has that backwards composition I don't actually know it's a little bit",
    "start": "2077599",
    "end": "2084000"
  },
  {
    "text": "weird um it's not the most readable It's one of the things about the language that you know not my favorite part um",
    "start": "2084000",
    "end": "2090800"
  },
  {
    "text": "but uh but there there are ways around it so well in in practice it's not that",
    "start": "2090800",
    "end": "2096000"
  },
  {
    "text": "big a deal all right so that's just a glimpse into Haskell and and if you're left with",
    "start": "2096000",
    "end": "2102480"
  },
  {
    "text": "lots of questions that's fine um but in the interest of time let's just move on to",
    "start": "2102480",
    "end": "2107800"
  },
  {
    "text": "Closure so um so what we what can we say about Closure so first of all we can say that Closure also has a nice logo so",
    "start": "2107800",
    "end": "2114320"
  },
  {
    "text": "that's must obviously mean that it's a nice language and um it's also a",
    "start": "2114320",
    "end": "2119359"
  },
  {
    "text": "dynamically typed language so Haskell as we looked at was statically typed the type system of Haskell is extremely",
    "start": "2119359",
    "end": "2125520"
  },
  {
    "text": "powerful it's much more powerful than Sharp or Java's type system now Closure is in the completely different end of",
    "start": "2125520",
    "end": "2131200"
  },
  {
    "text": "the spectrum because it's still dynamically typed so that's interesting just uh you know to contrast the other",
    "start": "2131200",
    "end": "2136560"
  },
  {
    "text": "thing um it's also what we call a functional first language so closure",
    "start": "2136560",
    "end": "2141760"
  },
  {
    "text": "runs on the JVM the Java virtual machine and just like if sharp is a multiplayermatic language because it",
    "start": "2141760",
    "end": "2148000"
  },
  {
    "text": "needs to run on net and interoperate with things written in C# or in visual basic well closure runs on the JVM so it",
    "start": "2148000",
    "end": "2154079"
  },
  {
    "text": "needs to interoperate with all the object-oriented code written in Java uh and therefore you know it can do",
    "start": "2154079",
    "end": "2159280"
  },
  {
    "text": "object-oriented things as well so you don't have to be functional but it's it's designed to make functional",
    "start": "2159280",
    "end": "2164640"
  },
  {
    "text": "programming easy um so it's it's sort of like its first you know priority is to",
    "start": "2164640",
    "end": "2169760"
  },
  {
    "text": "make functional programming easy and then you can also do imperative of of you know object-oriented code with",
    "start": "2169760",
    "end": "2174839"
  },
  {
    "text": "it uh the third thing that you may al already have sort of gotten the hint is that it's a lisp so just like in hasll I",
    "start": "2174839",
    "end": "2182800"
  },
  {
    "text": "showed you a list of strings that were you know a proper hasll code this is actually proper you know closure code",
    "start": "2182800",
    "end": "2188640"
  },
  {
    "text": "there um so closure is a value that contains those uh three uh strings so at",
    "start": "2188640",
    "end": "2195200"
  },
  {
    "text": "runtimes obviously it's a it's a it's a list of strings but you know at compile time well there is no compile time so",
    "start": "2195200",
    "end": "2201680"
  },
  {
    "text": "it's just being interpreted as as we go along so um so let's look at what that",
    "start": "2201680",
    "end": "2207680"
  },
  {
    "text": "would look like so I'll switch to another editor and uh you as you can",
    "start": "2207680",
    "end": "2212720"
  },
  {
    "text": "tell first of all there are some errors there in the output i'm not going to use that console a whole lot it's just I",
    "start": "2212720",
    "end": "2217920"
  },
  {
    "text": "just have that console sitting there you know because towards the end I want to print all the numbers um but this",
    "start": "2217920",
    "end": "2223839"
  },
  {
    "text": "particular editor sometimes complain about things and you will see those um pink uh error messages there in the",
    "start": "2223839",
    "end": "2229520"
  },
  {
    "text": "console just ignore them for now you know it just makes the demo more colorful because now you also have pink",
    "start": "2229520",
    "end": "2234640"
  },
  {
    "text": "on the screen um so that's nice but otherwise it doesn't really mean anything hopefully um so um I can type",
    "start": "2234640",
    "end": "2241760"
  },
  {
    "text": "things over here on the left hand side and this is where I'm going to type my closure code so the first thing we might",
    "start": "2241760",
    "end": "2247040"
  },
  {
    "text": "say well you know what does a function call look like so in HA hasll we could you know write something like show one",
    "start": "2247040",
    "end": "2253200"
  },
  {
    "text": "in order to um to convert the number one into a string now as you can tell that does not work in",
    "start": "2253200",
    "end": "2259480"
  },
  {
    "text": "closure now in in other languages uh you you may have to say well your argument should be enclosed in brackets like this",
    "start": "2259480",
    "end": "2266400"
  },
  {
    "text": "one um that's you know the fairly you know normal syntax and pretty",
    "start": "2266400",
    "end": "2271480"
  },
  {
    "text": "reminiscent of you know how how C# works or Java works or whatever um that's not",
    "start": "2271480",
    "end": "2276720"
  },
  {
    "text": "the closure syntax either but it's we're getting closer because we actually need the brackets we just need to move the",
    "start": "2276720",
    "end": "2282160"
  },
  {
    "text": "bracket over here and then you know the function to turn things into strings in closure is not called show it's called",
    "start": "2282160",
    "end": "2288800"
  },
  {
    "text": "str or string I suppose and then now you can see that I have you know the number one you know converted into a string and",
    "start": "2288800",
    "end": "2295200"
  },
  {
    "text": "if I you know use three uh that number is converted into the string three so that's basically what a function call",
    "start": "2295200",
    "end": "2300720"
  },
  {
    "text": "looks like so it's not you know one of the common things that people have against lisps",
    "start": "2300720",
    "end": "2306640"
  },
  {
    "text": "are that you know there are all these brackets but what we often find is that there are just as many brackets in C",
    "start": "2306640",
    "end": "2313119"
  },
  {
    "text": "they're just placed in different you know it's just put in different places but there's actually not necessarily",
    "start": "2313119",
    "end": "2318400"
  },
  {
    "text": "more brackets there probably are more brackets with with closure but it's just you know syntactical we don't have to worry about it and as I you know warned",
    "start": "2318400",
    "end": "2324960"
  },
  {
    "text": "you it just you know dumps out all of these things because the internet connection is rubbish but um I don't",
    "start": "2324960",
    "end": "2330240"
  },
  {
    "text": "think it's actually going to affect us anyway so the next thing we could say well we need to define a function called",
    "start": "2330240",
    "end": "2335280"
  },
  {
    "text": "fistbus how do we define a function well that's pretty easy we just write defun and uh we call the function fbus and",
    "start": "2335280",
    "end": "2341920"
  },
  {
    "text": "it's going to take some arguments so we'll say well the um the function is going to take a single argument we can",
    "start": "2341920",
    "end": "2347119"
  },
  {
    "text": "call that i and um then the um the body of the function is just that we call str",
    "start": "2347119",
    "end": "2354000"
  },
  {
    "text": "on i so that means that I can call fsbuzz now with the number one for",
    "start": "2354000",
    "end": "2359200"
  },
  {
    "text": "example and that if with the number one and that evaluates to the string one so that's that's fantastic and uh if we try",
    "start": "2359200",
    "end": "2367200"
  },
  {
    "text": "to call it with the number two it evaluates to two now and three evaluates to three that ought to be fizz but it's",
    "start": "2367200",
    "end": "2373359"
  },
  {
    "text": "three at the moment so I just type out the other ones that I actually care about five and you know 15 they all just",
    "start": "2373359",
    "end": "2379599"
  },
  {
    "text": "evaluate to the number at the moment and I want them to evaluate to you know fist and bus and fist bus and so on but",
    "start": "2379599",
    "end": "2385440"
  },
  {
    "text": "that's just to get us started so now you can see we already have a function so the first thing we might say is okay so",
    "start": "2385440",
    "end": "2390960"
  },
  {
    "text": "how do we actually make the decision between or how do we switch between you know the case where we should write",
    "start": "2390960",
    "end": "2397119"
  },
  {
    "text": "fistbus and the case where we should write bus and so on so in hasll you saw that I used uh you know sort of like um",
    "start": "2397119",
    "end": "2404320"
  },
  {
    "text": "constrained functions with boolean expressions in each function definition uh that's not how closure works uh so we",
    "start": "2404320",
    "end": "2411119"
  },
  {
    "text": "need to figure out whether we have something that is closer to like in C# we had you know if else if else if else",
    "start": "2411119",
    "end": "2417200"
  },
  {
    "text": "do we have that in closure and we do it's called cond uh for condition I suppose and basically the structure of",
    "start": "2417200",
    "end": "2424079"
  },
  {
    "text": "this is that um you you provide pairs of boolean expressions and return values so",
    "start": "2424079",
    "end": "2431280"
  },
  {
    "text": "basically what you say I'm just going to hardcode a boolean expression for now I'm just going to say true and then I'm going to say well fistbus and then you",
    "start": "2431280",
    "end": "2439359"
  },
  {
    "text": "know there's a new pair of a boolean expression and a return value and I'm going to say bus here I'm going to",
    "start": "2439359",
    "end": "2444720"
  },
  {
    "text": "change the hardcoded you know boolean expressions later on and then I say true",
    "start": "2444720",
    "end": "2451640"
  },
  {
    "text": "fizz and then you know there is an else branch if not none of these are true I can say else and then I just return you",
    "start": "2451640",
    "end": "2458480"
  },
  {
    "text": "know some number right now I'm just going to hardcode one so you can see this entire expression at the moment just returns fistbus because the first",
    "start": "2458480",
    "end": "2465839"
  },
  {
    "text": "expression up here the first boolean expression up here is true right now it's hardcoded so what's in all those",
    "start": "2465839",
    "end": "2471440"
  },
  {
    "text": "other things here actually doesn't matter uh you know if I um if I type false here the result is still fbus um",
    "start": "2471440",
    "end": "2478000"
  },
  {
    "text": "but you know if I change this to false obviously it now evaluates to fist because it just falls back you know down",
    "start": "2478000",
    "end": "2483680"
  },
  {
    "text": "into the first true that it can find you know and and you know it's probably not surprising but if they're all false it",
    "start": "2483680",
    "end": "2490000"
  },
  {
    "text": "we return the else value and that is one so that's sort of the structure that I'm",
    "start": "2490000",
    "end": "2495040"
  },
  {
    "text": "looking for and um I'll just cut that and I'll replace",
    "start": "2495040",
    "end": "2501200"
  },
  {
    "text": "the current function function body that I have with this structure and I'm just going to say well instead of you know",
    "start": "2501200",
    "end": "2506720"
  },
  {
    "text": "returning the hardcoded string one I'm just going to have to remember to still return str of I so the the behavior",
    "start": "2506720",
    "end": "2513119"
  },
  {
    "text": "didn't change i actually didn't get any further but now I have sort of the template for where I need to go so the",
    "start": "2513119",
    "end": "2518240"
  },
  {
    "text": "next thing I need to figure out is to instead of just hard coding an expression here how do I actually determine if a you know a number is a",
    "start": "2518240",
    "end": "2523920"
  },
  {
    "text": "multiple of of three for example down here well just like I did with the other in the other examples I I need to do",
    "start": "2523920",
    "end": "2530319"
  },
  {
    "text": "some sort of modulo comparison so I can say well mod three of three for example",
    "start": "2530319",
    "end": "2535599"
  },
  {
    "text": "that is actually zero you know mod six of three is also zero but mod five of",
    "start": "2535599",
    "end": "2540960"
  },
  {
    "text": "three is two for example so that's not quite a boolean expression what I really want what I really need that you know",
    "start": "2540960",
    "end": "2547599"
  },
  {
    "text": "modular operation to be is I need it to be zero so I need to compare is that expression is it zero or not so how do I",
    "start": "2547599",
    "end": "2554800"
  },
  {
    "text": "compare something two values and figure out whether they're equal well I used a",
    "start": "2554800",
    "end": "2560000"
  },
  {
    "text": "function that is used to determine whether these two are equal and that function is called the equal sign so I",
    "start": "2560000",
    "end": "2566319"
  },
  {
    "text": "just say well I'll just take those two values and try to compare them to each other so again you will notice just like",
    "start": "2566319",
    "end": "2572720"
  },
  {
    "text": "everything else in closure the function is the first element in the list and",
    "start": "2572720",
    "end": "2578160"
  },
  {
    "text": "that is but what what's being you know evaluated and all the other elements in the list are just arguments to that",
    "start": "2578160",
    "end": "2583920"
  },
  {
    "text": "function and some functions can take an arbitrary number of arguments this one can for example so I can say you know I",
    "start": "2583920",
    "end": "2589599"
  },
  {
    "text": "can put as many zeros I as I want here and they're all equal to each other but you know if I just you know put one one",
    "start": "2589599",
    "end": "2596560"
  },
  {
    "text": "here that actually turns out to be oh I should probably put you know in order to demonstrate that I should just probably",
    "start": "2596560",
    "end": "2602000"
  },
  {
    "text": "change this to six so you can see they're all zero that evaluates to true you know if I change one of them to be",
    "start": "2602000",
    "end": "2607760"
  },
  {
    "text": "not a zero that evaluates to false then but that's that's a you know a ridiculous thing to do in this case so",
    "start": "2607760",
    "end": "2613119"
  },
  {
    "text": "let's just go back here and say this is actually the sort of thing that we're that we're looking for you know is it is is it equal to zero so I'll cut that and",
    "start": "2613119",
    "end": "2620800"
  },
  {
    "text": "I'll paste it in up here and I'll say well I'll just replace that hardcoded five with an i and um now we can see",
    "start": "2620800",
    "end": "2627599"
  },
  {
    "text": "that fbus three returns fistbus of five doesn't return you know bus yet because I haven't done that fbus of 15 also",
    "start": "2627599",
    "end": "2634560"
  },
  {
    "text": "returns fist because you know 15 is a multiple of three that's also wrong but we can fix that fairly easily so the",
    "start": "2634560",
    "end": "2640880"
  },
  {
    "text": "next thing we can say is okay let's just replace the other ones here that one is just you know a replace and changing the",
    "start": "2640880",
    "end": "2646480"
  },
  {
    "text": "the number and uh then up here we can say something like well um the easiest thing is probably to say well but you",
    "start": "2646480",
    "end": "2652960"
  },
  {
    "text": "know I could write 15 here and that would actually solve the problem but again you know I don't want to think too",
    "start": "2652960",
    "end": "2658079"
  },
  {
    "text": "much about the the the um the constant 15 so I much rather do this and I think that is a little bit closer to the",
    "start": "2658079",
    "end": "2664160"
  },
  {
    "text": "problem description so something like something something like that um is uh is something that I'm happy with so um",
    "start": "2664160",
    "end": "2670240"
  },
  {
    "text": "I'm not going to spend more time with that anyway so let's move on so again just like I had in HA hasll I now have a",
    "start": "2670240",
    "end": "2675599"
  },
  {
    "text": "function that you know can take a single integer and turn it into a string now I want to figure out okay so what if I",
    "start": "2675599",
    "end": "2681280"
  },
  {
    "text": "have you know I what how do I print all the numbers from 1 to 100 and it turns out exactly the same thing you know the",
    "start": "2681280",
    "end": "2687440"
  },
  {
    "text": "same principle that applies it to Haskell we can also apply it here but in um in closure we can actually do function overloading which we couldn't",
    "start": "2687440",
    "end": "2694839"
  },
  {
    "text": "incl and um the way that we f do function overloading is that we say well we'll put uh each of the arguments um",
    "start": "2694839",
    "end": "2702480"
  },
  {
    "text": "and group the function you know according to arguments so we can say right now this is just a way of of",
    "start": "2702480",
    "end": "2707599"
  },
  {
    "text": "grouping things a little bit differently so since closure is a dynamic language we can't overload on the input type",
    "start": "2707599",
    "end": "2713920"
  },
  {
    "text": "because you know things don't have type as such um but we can overload on the number of arguments and this is what's",
    "start": "2713920",
    "end": "2719760"
  },
  {
    "text": "called the functions arity that's just a fancy way of saying number of arguments so this overload here has an arity of",
    "start": "2719760",
    "end": "2726079"
  },
  {
    "text": "one because it takes one argument so what I want now is to say well let's define another function that has an",
    "start": "2726079",
    "end": "2731839"
  },
  {
    "text": "arity of two it's going to take a start and an end and uh then it's going to you know I'm just going to put in a",
    "start": "2731839",
    "end": "2739040"
  },
  {
    "text": "placeholder string here um so that I can call it and then we'll start to figure out okay how do we actually replace that",
    "start": "2739040",
    "end": "2745920"
  },
  {
    "text": "um so this function here this is the same function it's still the fistbus function but this is the the overload",
    "start": "2745920",
    "end": "2751040"
  },
  {
    "text": "that has erity too so that means I should be able to call it with you know like 1 to 16 for example and right now",
    "start": "2751040",
    "end": "2758079"
  },
  {
    "text": "it just returns the string placeholder because that's what I put there so you could say well okay so how do I get the",
    "start": "2758079",
    "end": "2764000"
  },
  {
    "text": "numbers from start to end well you know we had list comprehension in HASLL so",
    "start": "2764000",
    "end": "2769520"
  },
  {
    "text": "you know in HA hasll I could just write something like you know 1 dot dot you know 15 that is not a syntax that is you",
    "start": "2769520",
    "end": "2776079"
  },
  {
    "text": "know you know valid in enclosure um but we have a function called range where we",
    "start": "2776079",
    "end": "2781920"
  },
  {
    "text": "can just pass in start and end and uh that now gives me the numbers from one",
    "start": "2781920",
    "end": "2787119"
  },
  {
    "text": "to to 15 so you'll notice that end is exclusive you know in Haskell 1 to 15 meant all the numbers you know 1 and 15",
    "start": "2787119",
    "end": "2794319"
  },
  {
    "text": "but this range function excludes the end so that's why I need to say from 1 to 16",
    "start": "2794319",
    "end": "2800160"
  },
  {
    "text": "that gives me actually the numbers one up till 15 but not 16 um I'm not too",
    "start": "2800160",
    "end": "2806560"
  },
  {
    "text": "happy about this uh yet because it's just returning the numbers i want to convert them into strings um and that's",
    "start": "2806560",
    "end": "2812640"
  },
  {
    "text": "just as trivial as to do in in Haskell because map is a functional concept so we also have a built-in map function",
    "start": "2812640",
    "end": "2819599"
  },
  {
    "text": "here and I'm just going to say well use the fistbus function and it'll figure out that it actually needs to use the",
    "start": "2819599",
    "end": "2825280"
  },
  {
    "text": "version with the different arity so it'll know that it needs to use the the overload of fist bus that has arity one",
    "start": "2825280",
    "end": "2831280"
  },
  {
    "text": "and that is why now it's printing one two fist four bus fist and so on so that's fine but we're not really I'm not",
    "start": "2831280",
    "end": "2838079"
  },
  {
    "text": "quite happy with this yet because you'll notice that the overload that takes one argument returns a string whereas the",
    "start": "2838079",
    "end": "2844000"
  },
  {
    "text": "overload that takes two arguments returns a list of strings and I think you know a function that has various",
    "start": "2844000",
    "end": "2849119"
  },
  {
    "text": "different overloads but returns different val you know different types that's sort of confusing that is not good API design so I want this to return",
    "start": "2849119",
    "end": "2855680"
  },
  {
    "text": "a string also specifically I want to return wanted to return a string that just concatenated all of those things",
    "start": "2855680",
    "end": "2861359"
  },
  {
    "text": "together but with a new line you know character between each of them so in uh in Haskell we could call a",
    "start": "2861359",
    "end": "2868720"
  },
  {
    "text": "function that simply just takes a list of strings and then just concatenates all of those in together in one string",
    "start": "2868720",
    "end": "2874960"
  },
  {
    "text": "that was the built-in function unlines um ino in in closure we also have a",
    "start": "2874960",
    "end": "2880160"
  },
  {
    "text": "function that does that but it's buried you know within some name space that we then need to open so instead of of doing",
    "start": "2880160",
    "end": "2885599"
  },
  {
    "text": "that let's just see if we can build it from from first principles if we will because there are built-in things here in the call on the root name space that",
    "start": "2885599",
    "end": "2892720"
  },
  {
    "text": "actually enabled us to do that so there is a function called interpose uh that can do uh just that and",
    "start": "2892720",
    "end": "2899359"
  },
  {
    "text": "basically it just says well which which value do you want to interpose with and",
    "start": "2899359",
    "end": "2904800"
  },
  {
    "text": "uh then we can just say well okay I want to interpose with the new line character so or the new line string so now you can",
    "start": "2904800",
    "end": "2910559"
  },
  {
    "text": "see I have you know the string one the string new line the string two the string new line the string fist so they're still not concatenated but now I",
    "start": "2910559",
    "end": "2916640"
  },
  {
    "text": "have the new line you know string in between all the other values so I'm closer to where I want to be and uh you",
    "start": "2916640",
    "end": "2922400"
  },
  {
    "text": "know it might be more readable closure code we if we actually you know wrap things around a little bit i don't know",
    "start": "2922400",
    "end": "2929160"
  },
  {
    "text": "um so we need to figure out okay how do we actually concatenate the strings this is basically the last thing we need to",
    "start": "2929160",
    "end": "2934800"
  },
  {
    "text": "do so um it turns out that that str function there actually also does that",
    "start": "2934800",
    "end": "2940079"
  },
  {
    "text": "so you know just as an example you know if I have list of fu and bar and and bass you know um it just gives me fu bar",
    "start": "2940079",
    "end": "2947359"
  },
  {
    "text": "bass you know and and again you know the number of arguments is it can be any number of arguments so if I you know add",
    "start": "2947359",
    "end": "2953520"
  },
  {
    "text": "cukes there and you know it just concatenates all of those things together so it can be you know any arbitrary number of arguments it's just",
    "start": "2953520",
    "end": "2960079"
  },
  {
    "text": "going to concatenate all of those strings together so that seems promising let's try to do that so we'll say okay",
    "start": "2960079",
    "end": "2965599"
  },
  {
    "text": "so um I'll just write str here and then I'll make sure to put a bracket at the",
    "start": "2965599",
    "end": "2971680"
  },
  {
    "text": "end and then we'll see you know down here in the evaluation it says well it doesn't do what we expected because it",
    "start": "2971680",
    "end": "2977599"
  },
  {
    "text": "just returns the string closure.lang.lacy lazy sick at number um",
    "start": "2977599",
    "end": "2982800"
  },
  {
    "text": "and that's not really what we wanted and the reason for that is it turns out that you know that expression all of this",
    "start": "2982800",
    "end": "2988960"
  },
  {
    "text": "expression here is exactly of that type it's a lazy sequence it's actually not",
    "start": "2988960",
    "end": "2994000"
  },
  {
    "text": "yet a number you know a list of numbers or a list of strings it's only a list of strings once you start enumerating",
    "start": "2994000",
    "end": "3000559"
  },
  {
    "text": "enumerating them and you know a a list of values is not the same thing as an",
    "start": "3000559",
    "end": "3006559"
  },
  {
    "text": "argument list uh that you use that you you put specifically into a a function",
    "start": "3006559",
    "end": "3012000"
  },
  {
    "text": "call if you will so this doesn't quite work but on the other hand this is such a common thing that you need to do in",
    "start": "3012000",
    "end": "3017040"
  },
  {
    "text": "closure that obviously there's a solution for that so basically every time you need to to say well you know I",
    "start": "3017040",
    "end": "3023440"
  },
  {
    "text": "want to call a function for example str and I have a list of something and I",
    "start": "3023440",
    "end": "3028800"
  },
  {
    "text": "just want you to treat that as the input list as the argument list to this function well there's another built-in",
    "start": "3028800",
    "end": "3034480"
  },
  {
    "text": "function that's called apply that basically just enable you to do that um so just say well apply strr to this you",
    "start": "3034480",
    "end": "3040319"
  },
  {
    "text": "know input list and then it does what it is that we need to do so now you'll see you know down there at that um you know",
    "start": "3040319",
    "end": "3045920"
  },
  {
    "text": "fistbus from 1 to 16 actually returns a single string with all of this uh new line stuff in it so I just want to do",
    "start": "3045920",
    "end": "3053280"
  },
  {
    "text": "two things because first of all you know the requirements are actually that I should um that I should return the um",
    "start": "3053280",
    "end": "3060160"
  },
  {
    "text": "the numbers from 1 to 100 so again you know I'm just going to do a placeholder here and I So I'm now defining an an",
    "start": "3060160",
    "end": "3067760"
  },
  {
    "text": "overload with an arity of one or of an with an arity of zero and that means I",
    "start": "3067760",
    "end": "3072880"
  },
  {
    "text": "can call fsbuzz without you know supplying any arguments at all and right now it's just going to return placeholder because that's what I wrote",
    "start": "3072880",
    "end": "3078400"
  },
  {
    "text": "up there but obviously what I want to do instead is I want to hardcode if you will the numbers from one to 100 so what",
    "start": "3078400",
    "end": "3085040"
  },
  {
    "text": "I'm going to do here is I'm going to call fsbuzz with the um with the numbers from one to 100 and since you know the",
    "start": "3085040",
    "end": "3092240"
  },
  {
    "text": "the end is exclusive I need to do one to 101 so so that's fsbus without any",
    "start": "3092240",
    "end": "3097960"
  },
  {
    "text": "arguments um the only thing that we've left now is just like in hasll we might need to do you know a a main a main",
    "start": "3097960",
    "end": "3105520"
  },
  {
    "text": "function you know the entry point into an application that would actually print all of this stuff out there on the console um I'm not going to do that so",
    "start": "3105520",
    "end": "3112400"
  },
  {
    "text": "I'm just going to you know I'm not I'm not going to create a program for this i'm just going to print it out here so let's just see if we can clear the",
    "start": "3112400",
    "end": "3117680"
  },
  {
    "text": "console um that there all this pink stuff went array so we can say um print",
    "start": "3117680",
    "end": "3123599"
  },
  {
    "text": "I'm just going to call fsbuzz bang and there we have all the the stuff again all right so that's the",
    "start": "3123599",
    "end": "3130160"
  },
  {
    "text": "fistbus carter in in um enclosure as well very nice yay thank",
    "start": "3130160",
    "end": "3137640"
  },
  {
    "text": "you all right so let's go back and see did we learn anything and uh what of",
    "start": "3137640",
    "end": "3142960"
  },
  {
    "text": "what often happens to me when I do when I do cartas is that it turns out that um maybe not every time but the by doing",
    "start": "3142960",
    "end": "3149839"
  },
  {
    "text": "exercises and learning new languages and doing you know carters and so on it changes the way that I think about",
    "start": "3149839",
    "end": "3156160"
  },
  {
    "text": "things or it gives me more options for modeling how to address various problems and it turns out that often what you can",
    "start": "3156160",
    "end": "3162240"
  },
  {
    "text": "do is you can backport what you learn from one language or one technique into what you do on in your day-to-day job",
    "start": "3162240",
    "end": "3169280"
  },
  {
    "text": "and we can do that here as well and there's nothing new in this in the sense that you know a lot of the features that",
    "start": "3169280",
    "end": "3174640"
  },
  {
    "text": "you have in C# and in Java now are things that are actually backported from other languages and so on but let's just",
    "start": "3174640",
    "end": "3180800"
  },
  {
    "text": "see what it looks like here so here's a new version of the C sharp um implementation of the Carter so you'll",
    "start": "3180800",
    "end": "3187280"
  },
  {
    "text": "notice that the entry point now is a main method and the only thing it does is it says well console.right line um",
    "start": "3187280",
    "end": "3193839"
  },
  {
    "text": "the value of calling fist bus from 1 to 100 so that looks a lot similar to what I did in Haskell and closure i'm just",
    "start": "3193839",
    "end": "3200800"
  },
  {
    "text": "you know the main the entry point is just a call to something that produces a string and then I print that",
    "start": "3200800",
    "end": "3205960"
  },
  {
    "text": "string now what is fbus well it's a it's a helper method here that takes and",
    "start": "3205960",
    "end": "3211280"
  },
  {
    "text": "start and a count and basically you see the first line there it says innumerable range from start to count so",
    "start": "3211280",
    "end": "3216920"
  },
  {
    "text": "innumerable.range is built into C i think it's part of the link namespace somewhere um so that's just a static",
    "start": "3216920",
    "end": "3223760"
  },
  {
    "text": "helper method that will produce an ionumable of int from start and then with count so the API is a little bit",
    "start": "3223760",
    "end": "3229839"
  },
  {
    "text": "different you don't you know supply an end value you you you know you tell it how many elements you want um so in this",
    "start": "3229839",
    "end": "3236160"
  },
  {
    "text": "case it's it's the same one to and and the number of elements you want is 100 so that's pretty much the same so that",
    "start": "3236160",
    "end": "3242480"
  },
  {
    "text": "gives you an ionumable of int and then you can say well let's do a select over that and select is just the car name for",
    "start": "3242480",
    "end": "3249280"
  },
  {
    "text": "a map so you saw map in both Haskell and closure and that and map is what's",
    "start": "3249280",
    "end": "3254720"
  },
  {
    "text": "called in functional programming but um you know when Anna Hitsburg um decided to to do and uh you know to implement",
    "start": "3254720",
    "end": "3261599"
  },
  {
    "text": "link you know language integrated query in in",
    "start": "3261599",
    "end": "3266318"
  },
  {
    "text": "Cer and and Visual Basic developers to learn if the concepts were named not",
    "start": "3266760",
    "end": "3271839"
  },
  {
    "text": "from functional programming but from SQL syntax u because most you know C#",
    "start": "3271839",
    "end": "3277280"
  },
  {
    "text": "developers were probably familiar with you know working with SQL Server or Oracle or whatever at the time um so a",
    "start": "3277280",
    "end": "3283760"
  },
  {
    "text": "select in SQL is basically the same thing as a map anyway uh or it's pretty closely related so there I'm not saying",
    "start": "3283760",
    "end": "3289520"
  },
  {
    "text": "the name is bad but that's just why he chose to to name it like that instead of calling it map but it is exactly the",
    "start": "3289520",
    "end": "3295359"
  },
  {
    "text": "same thing and then what we give what we get back there is then anumable of string",
    "start": "3295359",
    "end": "3300800"
  },
  {
    "text": "and then we can aggregate it so we you know we saw the aggregation before you know in closure had this interpose thing",
    "start": "3300800",
    "end": "3307200"
  },
  {
    "text": "um what I'm doing here is I just supply a little lambda expression and I'm saying well for any two x and y those",
    "start": "3307200",
    "end": "3313119"
  },
  {
    "text": "are two strings I'm just going to concatenate those together but also put a new line in between them and then",
    "start": "3313119",
    "end": "3318160"
  },
  {
    "text": "that's going to create a new string which becomes a new x and then I get a new y from the next element of the list and then I can concatenate those",
    "start": "3318160",
    "end": "3324480"
  },
  {
    "text": "together and that just becomes one string in the end and uh the fbus one helper method is not surprising it just",
    "start": "3324480",
    "end": "3331119"
  },
  {
    "text": "looks like this it takes a single integer and returns a string now one of the things that are interesting And with",
    "start": "3331119",
    "end": "3336960"
  },
  {
    "text": "this is well first of all you might ask is this better than the previous um the previous implementation in C# this is",
    "start": "3336960",
    "end": "3342079"
  },
  {
    "text": "actually a little longer the the last one was like 10 lines of actual code this is maybe 12 15 lines of code uh so",
    "start": "3342079",
    "end": "3349200"
  },
  {
    "text": "do do we think it's better maybe not you know it's always subjective uh because it depends on what your needs are but",
    "start": "3349200",
    "end": "3355359"
  },
  {
    "text": "one thing that I think is interesting about this is if you imagine that you took those two helper functions you know fbus and fistbus one and made them",
    "start": "3355359",
    "end": "3361880"
  },
  {
    "text": "public these functions would of methods would actually be very testable because these are actually what we what we know",
    "start": "3361880",
    "end": "3368000"
  },
  {
    "text": "as pure functions i talked about pure functions yesterday in my talk yesterday and uh one of the things that I talked",
    "start": "3368000",
    "end": "3374160"
  },
  {
    "text": "about well is if a function is a pure function you know it's deterministic has no side effects it's trivial to unit",
    "start": "3374160",
    "end": "3379680"
  },
  {
    "text": "test this is very very easy to unit test so if you have a need of unit testing something you know instead of going and",
    "start": "3379680",
    "end": "3385839"
  },
  {
    "text": "trying to you know introduce all sorts of interfaces and say well I need an interface that uh that emulates that I'm",
    "start": "3385839",
    "end": "3392400"
  },
  {
    "text": "writing to the console and then I need to mock that interface and blah blah blah which a lot of people would actually do if they needed to make this",
    "start": "3392400",
    "end": "3398720"
  },
  {
    "text": "testable Well what we can say is well you know now we have fbus one and we have fbus and these are two pure",
    "start": "3398720",
    "end": "3404559"
  },
  {
    "text": "functions so they're trivial to unit test and then what we have left is just the main um the main function or the",
    "start": "3404559",
    "end": "3410240"
  },
  {
    "text": "main method there and the question is that's basically just declarative one liner do we really need to unit test",
    "start": "3410240",
    "end": "3416559"
  },
  {
    "text": "that there's no logic in it so probably not we can leave that as what Gerard Misares calls a humble method and not",
    "start": "3416559",
    "end": "3422559"
  },
  {
    "text": "test it and then we could test all the other things so I think it's often interesting to to see you know you actually get some benefit out of",
    "start": "3422559",
    "end": "3428559"
  },
  {
    "text": "learning how to do it in different languages or in different paradigms and that might actually be applicable when you bring it back home so um so if you",
    "start": "3428559",
    "end": "3437040"
  },
  {
    "text": "if you thought this was interesting or it piqu your interest um interest then um you're welcome to come and ask me i",
    "start": "3437040",
    "end": "3442880"
  },
  {
    "text": "think I have like two minutes left so I'm not going to take any you know answers questions and answers now um but",
    "start": "3442880",
    "end": "3448640"
  },
  {
    "text": "just come up and ask me afterwards and I'll be h happy to talk to you um if you if you thought this was interesting I",
    "start": "3448640",
    "end": "3454640"
  },
  {
    "text": "have a sometimes I blog a little bit about my adventures in Carter so you can you know subscribe to the blog or to",
    "start": "3454640",
    "end": "3460319"
  },
  {
    "text": "Twitter um also I I do occasionally cover some of these things the diamond carter for example I do a treatment of",
    "start": "3460319",
    "end": "3466319"
  },
  {
    "text": "the diamond carter with property based testing in one of my Pluralsight courses um so if you're interested in that you",
    "start": "3466319",
    "end": "3472160"
  },
  {
    "text": "can go to bit.ly/pluralsite because I you know sometimes known as as plur and that's",
    "start": "3472160",
    "end": "3477599"
  },
  {
    "text": "all the link to all my courses so if you don't have a subscription to Pluralsight I have um I have vouchers here that you can welcome to come and get this is a um",
    "start": "3477599",
    "end": "3485040"
  },
  {
    "text": "this is a free one month subscription to um to Plitid it's a trial subscription",
    "start": "3485040",
    "end": "3490480"
  },
  {
    "text": "so if you want those then come and get them and also if you want to ask me something come and ask me meet me out in",
    "start": "3490480",
    "end": "3495760"
  },
  {
    "text": "the hallway if you see me later on today then ask me i'll be happy to talk to you but with that I'll um you know let you",
    "start": "3495760",
    "end": "3501520"
  },
  {
    "text": "go if you if you want to you know go and do something else so thank you for coming",
    "start": "3501520",
    "end": "3507400"
  }
]