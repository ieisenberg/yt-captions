[
  {
    "text": "all right um I think we're gonna get started here um all right everybody so",
    "start": "6080",
    "end": "13080"
  },
  {
    "text": "good morning uh my name is John hied or uh borus dorcus depends on where you",
    "start": "13080",
    "end": "18520"
  },
  {
    "text": "meet me or where you find me if you find me through Twitter I'm so sorry um welcome to a small talk I'm calling a",
    "start": "18520",
    "end": "24720"
  },
  {
    "text": "hello operator and it's about specifically making calls for c not just any kind of calls but the calls to put",
    "start": "24720",
    "end": "30480"
  },
  {
    "text": "actual operator overloading in C now before anyone freaks out C hasn't",
    "start": "30480",
    "end": "36640"
  },
  {
    "text": "actually put operators in the language yet so nobody has to you know get to grab their pitchforks just yet I mean I I have to say that because I made a",
    "start": "36640",
    "end": "43000"
  },
  {
    "text": "tweet jokingly about operators and c and it ended up on a Reddit somewhere and they like were like oh my God he's going",
    "start": "43000",
    "end": "48320"
  },
  {
    "text": "to put Opera in C is ruining the language which is how they say that about everything I do about around C but",
    "start": "48320",
    "end": "53960"
  },
  {
    "text": "whatever um of course the reason why they're actually concerned when I make those kinds of tweets is because I'm",
    "start": "53960",
    "end": "59000"
  },
  {
    "text": "actually the product editor for ISO IEC jtc1 SC sc22",
    "start": "59000",
    "end": "66200"
  },
  {
    "text": "um wg14 which is a very longwinded say winded way of saying the C committee",
    "start": "66200",
    "end": "71439"
  },
  {
    "text": "right um so it's my job to take all the papers that get approved glue them together and then make sure the",
    "start": "71439",
    "end": "76640"
  },
  {
    "text": "specification that gets shipped out to ISO uh actually makes sense and we actually just got done um finally",
    "start": "76640",
    "end": "85000"
  },
  {
    "text": "conforming to all of iso's Demands and polishing up c23 and that should hopefully publish sometime before the end of this year um it's going to be",
    "start": "85000",
    "end": "91680"
  },
  {
    "text": "called c23 and we officially voted it to be c23 even though it's publishing in 2024 um but uh that's just you know how",
    "start": "91680",
    "end": "98880"
  },
  {
    "text": "that goes um so this is not really a talk about",
    "start": "98880",
    "end": "103960"
  },
  {
    "text": "kind of contemporary issues I mean it we'll kind of go over some things that are present and current implementation C and C++",
    "start": "103960",
    "end": "110600"
  },
  {
    "text": "about the way things work um but this is kind of going to be a talk that's more geared towards how do you design under",
    "start": "110600",
    "end": "116439"
  },
  {
    "text": "those kinds of constraints right how do you walk into a language that c um that's 50 years old and then decide",
    "start": "116439",
    "end": "122399"
  },
  {
    "text": "you're going to start changing some stuff right like it's a interesting task um and we're going to see if we can do",
    "start": "122399",
    "end": "129800"
  },
  {
    "text": "this so that we can put operators inside the C language like what would that look like right what was that uh what would",
    "start": "129800",
    "end": "135000"
  },
  {
    "text": "the syntax be like what would the performance metrics what were the design characteristics right how can we avoid certain decisions made by C and cs+ and",
    "start": "135000",
    "end": "142200"
  },
  {
    "text": "so on so forth so let's get into a little bit little bit of that while I'm talking about this um you're going to",
    "start": "142200",
    "end": "147879"
  },
  {
    "text": "see some art uh this was actually done by King Kismet um the chapy character",
    "start": "147879",
    "end": "152959"
  },
  {
    "text": "over there in the robes is actually a character representation of me um it was the character I have from my blog the",
    "start": "152959",
    "end": "158760"
  },
  {
    "text": "phd. where I talk about all lot of this stuff and how I get people interested in C and C++ and optimization and standards",
    "start": "158760",
    "end": "166120"
  },
  {
    "text": "and all this other fun stuff um so that's kind of like my blog character um and then the other person is actually a",
    "start": "166120",
    "end": "171640"
  },
  {
    "text": "more of a Die Hard Sea Fan um just his he goes just by the name bird um but uh",
    "start": "171640",
    "end": "177440"
  },
  {
    "text": "as you can see he's obviously he's a she's a he's a bird but he's spefically a shrike um but they uh are you know a",
    "start": "177440",
    "end": "183720"
  },
  {
    "text": "person who is kind of a Die Hard SE fan and so you're going to be seeing some art from me kind of elucidating some of the situation um specifically the kind",
    "start": "183720",
    "end": "190920"
  },
  {
    "text": "of situation I want to elucidate about is that operators are kind of this thing that everybody loves to hate from C",
    "start": "190920",
    "end": "198080"
  },
  {
    "text": "right everybody uh loves to beat on it um it's so Infamous that James gossing",
    "start": "198080",
    "end": "204239"
  },
  {
    "text": "when he was making Java he was like yeah no it's going to be kind of Over My Dead Body if you ever think we're going to put operators in this language right um",
    "start": "204239",
    "end": "211480"
  },
  {
    "text": "and so you know uh he made the very personal choice about not including",
    "start": "211480",
    "end": "217319"
  },
  {
    "text": "operators in Java because he had seen too much abuse of it in C++ and right and I mean who here has had to deal with",
    "start": "217319",
    "end": "222959"
  },
  {
    "text": "like abusive operators and had to like work in a codebase where somebody may like a DSL out of macros or whatever and",
    "start": "222959",
    "end": "229760"
  },
  {
    "text": "it's Hannah says she loves it I mean you're the author of CT so probably you know a little little bit of bias there",
    "start": "229760",
    "end": "235439"
  },
  {
    "text": "but um you know no no bias of course it perfectly pure facts it's great it",
    "start": "235439",
    "end": "241120"
  },
  {
    "text": "definitely makes sense um but you know it's hard to overstate just how much of",
    "start": "241120",
    "end": "247840"
  },
  {
    "text": "a profound impact C has had on the ability of people to reason about operators and languages right to the",
    "start": "247840",
    "end": "254079"
  },
  {
    "text": "point that again it just gets such Universal push back in almost every sector of programming language design",
    "start": "254079",
    "end": "260400"
  },
  {
    "text": "you go into un univer a little bit I mean some of it",
    "start": "260400",
    "end": "267639"
  },
  {
    "text": "but not not quite um so it is very hard to talk about right so even if you try",
    "start": "267639",
    "end": "274039"
  },
  {
    "text": "to convince people that you know it would solve the problem it would give you cromulent syntax right it'll do this",
    "start": "274039",
    "end": "280960"
  },
  {
    "text": "it'll do that right they're just kind of very much against it and you know some",
    "start": "280960",
    "end": "287120"
  },
  {
    "text": "of it seems kind of emotional and some of it kind of seems like it's reasonable right um you know if you've ever had to",
    "start": "287120",
    "end": "294759"
  },
  {
    "text": "work in a code base where everything is put behind an operator right and you're like this is like your you know this is your first time looking at it like that",
    "start": "294759",
    "end": "300400"
  },
  {
    "text": "code just gets impenetrable right like why is the left shift being used here why is the the increment operator",
    "start": "300400",
    "end": "306160"
  },
  {
    "text": "between these two things like how come you're using the less stand sign but this isn't a comparison and how come isn't returning a Boolean like what's",
    "start": "306160",
    "end": "312160"
  },
  {
    "text": "going on here it's beautiful it it's beautiful in some ways but it's",
    "start": "312160",
    "end": "318400"
  },
  {
    "text": "important in others and again beauty is it kind of in the eye of the beholder and as a junior developer being first introduced to this kind of codebase with",
    "start": "318400",
    "end": "324120"
  },
  {
    "text": "no help uh you know maybe being exposed to operators in that way is not quite",
    "start": "324120",
    "end": "330000"
  },
  {
    "text": "the gentle introduction you'd like into making things nice you know and I mean you know it's it's sort",
    "start": "330000",
    "end": "337440"
  },
  {
    "text": "of things like this like how could anyone possibly guess that you know subtraction was going to be used for concatenation of two State machines",
    "start": "337440",
    "end": "343759"
  },
  {
    "text": "right not even plus right it doesn't it boggles the mind but like this is where",
    "start": "343759",
    "end": "349639"
  },
  {
    "text": "it comes from this is like the source of the frustration right like you have operations that you want to give names",
    "start": "349639",
    "end": "355479"
  },
  {
    "text": "that you want to you know kind of perceive and understand when you read the code but you can't because it's locked behind these operative so you",
    "start": "355479",
    "end": "361639"
  },
  {
    "text": "have to do a lot of code reading and a lot of maybe even debugging to get to a place where you actually understand okay",
    "start": "361639",
    "end": "366800"
  },
  {
    "text": "this is what's actually going on in this code this is what this notation means right um it's not unlike if you have",
    "start": "366800",
    "end": "372440"
  },
  {
    "text": "when you have to learn math notation for a first time algebraic notations and other things like that but you know the",
    "start": "372440",
    "end": "377520"
  },
  {
    "text": "benefit of algebraic notation in mathematics is that usually it's very like shared right it's widespread whereas the things that people come up",
    "start": "377520",
    "end": "383240"
  },
  {
    "text": "with in cook up with and these code bases are very um not shared and uh not",
    "start": "383240",
    "end": "388400"
  },
  {
    "text": "intuitive to a Outsider right but it does have some genuine",
    "start": "388400",
    "end": "393800"
  },
  {
    "text": "appeal right um some people do like operators right they do want to see it you know whether it's in C or in other",
    "start": "393800",
    "end": "399319"
  },
  {
    "text": "languages right um they try to push it into place like C and other places right",
    "start": "399319",
    "end": "404560"
  },
  {
    "text": "so these are two proposals n3201 there the n and then the followed by like four",
    "start": "404560",
    "end": "409840"
  },
  {
    "text": "series of numbers is a n document which is a document that is you kind of officially put up for C to try to put",
    "start": "409840",
    "end": "416240"
  },
  {
    "text": "something in the language right make a fix remove something add something um so on and so forth right so there's two",
    "start": "416240",
    "end": "422280"
  },
  {
    "text": "papers here that were very recent right 20 uh 22 and 2023 um where people wanted",
    "start": "422280",
    "end": "429160"
  },
  {
    "text": "to get some form of operators into see right and this isn't like super new",
    "start": "429160",
    "end": "437039"
  },
  {
    "text": "right we Define operators for standard and anex math types all the time right so not just your ins and your your",
    "start": "437039",
    "end": "443560"
  },
  {
    "text": "floats and your Longs your doubles but complex types which is covered by nxg as far as the C standards concerned",
    "start": "443560",
    "end": "449560"
  },
  {
    "text": "imaginary types but actually not for much longer because we just voted in a paper for c2y which is the eventual new",
    "start": "449560",
    "end": "455879"
  },
  {
    "text": "version of standard I hope like C I hope it comes out in 2028 or 2029 um not 2030",
    "start": "455879",
    "end": "460960"
  },
  {
    "text": "that'd be too long um but imaginary tests were actually voted out of the C standard um recently um because it",
    "start": "460960",
    "end": "468360"
  },
  {
    "text": "wasn't seen that much use and the the spec wording around it was kind of dubious and questionable um so we kind",
    "start": "468360",
    "end": "475120"
  },
  {
    "text": "of got rid of imaginary types but we kept complex types which is an nxg um there's also stuff from anex H which is",
    "start": "475120",
    "end": "480199"
  },
  {
    "text": "the floating Point interchange type so you have your decimal 128 so your actual like decimal floating Point types um you",
    "start": "480199",
    "end": "486479"
  },
  {
    "text": "have your float 128 your float 32x which is your extended floating Point 32-bit floating point and so on and so forth",
    "start": "486479",
    "end": "492240"
  },
  {
    "text": "and there's also some proposals that try to take advantage of this or try to impr propose this kind of stuff so for example um if you've ever been very",
    "start": "492240",
    "end": "499080"
  },
  {
    "text": "annoyed by the fact that c does not have uh wraparound right wraparound integers right or certain things that you would",
    "start": "499080",
    "end": "505199"
  },
  {
    "text": "think would just be basic in your in the language to make things safer and easier um there was a proposal from a man by",
    "start": "505199",
    "end": "511639"
  },
  {
    "text": "the name of uh David sabota who proposed something called uh n2683 which was towards integer safety",
    "start": "511639",
    "end": "518479"
  },
  {
    "text": "and so we actually accepted part of that proposal but we didn't accept the part with the CKD intore T that would give",
    "start": "518479",
    "end": "524760"
  },
  {
    "text": "you a checked integer that would tell you if it accidentally wrapped around or o overflowed or underflow and stuff like",
    "start": "524760",
    "end": "530279"
  },
  {
    "text": "that um but he's still they're still kind of trying to pursueing that um and so this is where kind of this interest in operators is kind of bubbling up from",
    "start": "530279",
    "end": "537279"
  },
  {
    "text": "right that we have these plethora of type and a lot of the time in order to make",
    "start": "537279",
    "end": "542920"
  },
  {
    "text": "these types accessible we have to inject them straight into the core language itself rather than kind of giving you",
    "start": "542920",
    "end": "548040"
  },
  {
    "text": "the tools to do it yourself and so there's this kind of tension between what users want to do and what they want",
    "start": "548040",
    "end": "553839"
  },
  {
    "text": "to Define especially with their their math heavy right they're doing linear algebra if they're writing kernels whatever else um versus you know other",
    "start": "553839",
    "end": "560399"
  },
  {
    "text": "users who aren't really all that interested in that stuff and they don't really want you to uh complicate the",
    "start": "560399",
    "end": "566320"
  },
  {
    "text": "language right that's usually the the complaint that comes out making the language too complex too comp too complicated um by adding all this extra",
    "start": "566320",
    "end": "573040"
  },
  {
    "text": "stuff on top right of course there's you know the more",
    "start": "573040",
    "end": "578240"
  },
  {
    "text": "spicy the more spicy way of looking at this right so this is uh fre Homer who who is a extremely talented Graphics",
    "start": "578240",
    "end": "585040"
  },
  {
    "text": "developer compiler developer foremost uh in in her field um and you know she's",
    "start": "585040",
    "end": "592440"
  },
  {
    "text": "does a lot of Graphics programming obviously and so this is just some syntax this is more of a c syntax um but",
    "start": "592440",
    "end": "598519"
  },
  {
    "text": "uh or sorry this is more JS syntax actually um but uh this is using",
    "start": "598519",
    "end": "604040"
  },
  {
    "text": "function calls to do a bunch of like basic vertex math and like is you can see it's like it's very Robos and some",
    "start": "604040",
    "end": "610160"
  },
  {
    "text": "of the uh some of the operations have to come in kind of like an inverse order and that you have to do like the first",
    "start": "610160",
    "end": "616440"
  },
  {
    "text": "operation on the inside most and kind of work your way outward to each subsequent operation because that's just how the ordering ends up being for function",
    "start": "616440",
    "end": "622120"
  },
  {
    "text": "calls right um and so it comes it becomes very like interesting looking um",
    "start": "622120",
    "end": "628320"
  },
  {
    "text": "for a lot of the the uh a lot of the code you want to write right so there there's kind of a back and forth between",
    "start": "628320",
    "end": "633680"
  },
  {
    "text": "like I want you know very cromulent syntax that represents exactly what I mean right that appeals to my domain",
    "start": "633680",
    "end": "639720"
  },
  {
    "text": "right specially for mathematics right this is huge for them right they want to be able to use multiplication and division and subtraction and addition",
    "start": "639720",
    "end": "646120"
  },
  {
    "text": "and they don't really want to have to think about all the complications around that um whereas there are other people who are like I hate that I want",
    "start": "646120",
    "end": "651920"
  },
  {
    "text": "functions I want only functions I want to be able to read every line and understand what's going on and not have to look at any definitions and and do",
    "start": "651920",
    "end": "657880"
  },
  {
    "text": "any of that stuff right and so this brings me to this talk right can we make this for C right so",
    "start": "657880",
    "end": "663959"
  },
  {
    "text": "obviously there are proposals there's all these other types there these things that people want to do with it right there's both sides of the equation can",
    "start": "663959",
    "end": "669800"
  },
  {
    "text": "we actually make operators in C and that's what this talk is going to be",
    "start": "669800",
    "end": "675320"
  },
  {
    "text": "about and the way this talk is going to be structured is that we're going to start from a C++ system right so we're",
    "start": "675320",
    "end": "681399"
  },
  {
    "text": "going to start from all of the things that make operators work in C++ or most of the things right that we care about",
    "start": "681399",
    "end": "687800"
  },
  {
    "text": "right and then we're kind of going to do is we're going to see if we can kind of backtrack and analyze and remove and cut away and like think about and uh design",
    "start": "687800",
    "end": "695360"
  },
  {
    "text": "our way away from like the C++ way of doing things and maybe into something that's more friendly towards C right so",
    "start": "695360",
    "end": "701720"
  },
  {
    "text": "try to figure out some ways that you know we can make the feature set applicable to C without sacrificing some",
    "start": "701720",
    "end": "707639"
  },
  {
    "text": "of C's like core tenants um and hopefully elay people's fears about",
    "start": "707639",
    "end": "713360"
  },
  {
    "text": "operators in the Pro in in the uh process while we're doing that right",
    "start": "713360",
    "end": "719399"
  },
  {
    "text": "so what do I mean by like the cs+ system well there's a specific set of systems",
    "start": "719399",
    "end": "724880"
  },
  {
    "text": "that and cs+ work together to kind of conspire to give you operators right that allow you to make operator plus",
    "start": "724880",
    "end": "730560"
  },
  {
    "text": "operator minus operator divide whatever um and there's about five of them um so",
    "start": "730560",
    "end": "736279"
  },
  {
    "text": "you have your name uh or argument dependent lookup right so name lookup and argument dependent lookup so when you call a function or call an operator",
    "start": "736279",
    "end": "743079"
  },
  {
    "text": "right it goes and searches the existing symbols to find exactly The Operators of the functions you're trying to call",
    "start": "743079",
    "end": "748760"
  },
  {
    "text": "right um you have overload resolution which after you find all of the things you're supposed to be calling right um which",
    "start": "748760",
    "end": "756040"
  },
  {
    "text": "one is actually the one you want to call right so they're all named operator plus there's like 50 of them which one did",
    "start": "756040",
    "end": "761519"
  },
  {
    "text": "you actually mean to to do operator plus with right um then there's the implicit conversions obviously so like yeah okay",
    "start": "761519",
    "end": "768600"
  },
  {
    "text": "maybe you added uh an integer to this uh",
    "start": "768600",
    "end": "773839"
  },
  {
    "text": "V this uh Vector 2 but uh actually you know we can promote that to a float and",
    "start": "773839",
    "end": "779680"
  },
  {
    "text": "so we're going to call the version that's VC 2 plus float and make that work rather than forcing you to like do",
    "start": "779680",
    "end": "785440"
  },
  {
    "text": "a cast on the integer or whatever right um so that's where the implicit conversions Constructors things like that come from then there's destructors",
    "start": "785440",
    "end": "791600"
  },
  {
    "text": "and you know resource acquisition is initialization such a mouthful of an acronym but ri right so the thing you",
    "start": "791600",
    "end": "797040"
  },
  {
    "text": "know that provides safety and and resource safety in C++ your general purpose undo mechanism in C++ right and",
    "start": "797040",
    "end": "802959"
  },
  {
    "text": "then you have references right the things that allows you to pass normal looking uh objects without having to",
    "start": "802959",
    "end": "809160"
  },
  {
    "text": "actually qualify them as pointers and then you get a reference to it right something that you can that points at it but doesn't actually copy the value or",
    "start": "809160",
    "end": "815000"
  },
  {
    "text": "whatever right it's just a transient thing that allows to go down argument function calls and get returned and and",
    "start": "815000",
    "end": "820360"
  },
  {
    "text": "behave normally right so let's actually start with name and argument dependent",
    "start": "820360",
    "end": "825639"
  },
  {
    "text": "lookup right we have a system that helps us",
    "start": "825639",
    "end": "830800"
  },
  {
    "text": "find all the operator pluss we're interested in right so let's just take this kind of quick snippet of code it's",
    "start": "830800",
    "end": "835880"
  },
  {
    "text": "not very complicated right we have a nam space math list it's got a vector 2 in it it's got a float X and Y this is like",
    "start": "835880",
    "end": "842240"
  },
  {
    "text": "the most basic Vector type in the world right nothing fancy um it's got an",
    "start": "842240",
    "end": "848240"
  },
  {
    "text": "operator plus uh internally um as a member function to allow you to add two",
    "start": "848240",
    "end": "853720"
  },
  {
    "text": "Vector twos together right so do pointwise addition right so X gets add to X Y gets add to Y whatever um and",
    "start": "853720",
    "end": "860079"
  },
  {
    "text": "then there's two free functions at the name Space level outside of the structure um that allow you to add a",
    "start": "860079",
    "end": "867000"
  },
  {
    "text": "float to the vector 2 right and what that suppos is that it adds the flo to basically both components rather than um",
    "start": "867000",
    "end": "873240"
  },
  {
    "text": "forcing you to create a temporary Vector to just to say I want to add to both right um you do that for both the right",
    "start": "873240",
    "end": "878720"
  },
  {
    "text": "side hand right hand side and left hand side right and syntax is very simple right we",
    "start": "878720",
    "end": "883880"
  },
  {
    "text": "have a quick main down here where we just make a VC 2 we uh initialize it",
    "start": "883880",
    "end": "889560"
  },
  {
    "text": "with uh X to 1.0 and uh uh y to 2.0 and",
    "start": "889560",
    "end": "895000"
  },
  {
    "text": "then inside this kind of you know grossly parenthesized expression we do V plus 3.0 F so we're invoking one of",
    "start": "895000",
    "end": "901600"
  },
  {
    "text": "those plus operators um we're then getting the x of that and then we're truncating it to an integer and then",
    "start": "901600",
    "end": "907519"
  },
  {
    "text": "returning it to main right so we use the we use the value that we create right um and so the question is how do we find",
    "start": "907519",
    "end": "913959"
  },
  {
    "text": "the function right there's three operator pluses here and so we need to actually find the one right we're",
    "start": "913959",
    "end": "919519"
  },
  {
    "text": "actually operating at the global Nam space right we're we're operating inside function main which exists in the global",
    "start": "919519",
    "end": "924560"
  },
  {
    "text": "namespace that's not in the math lib so how does it know to actually go off in find that plus inside math lip right how",
    "start": "924560",
    "end": "932600"
  },
  {
    "text": "does it know to like know that it has to find has to get to that get to that place so the way it works is I'm being",
    "start": "932600",
    "end": "939360"
  },
  {
    "text": "very glib about this because in like the actual CS standard this is like a huge deal and it's got like 17 Pages",
    "start": "939360",
    "end": "945360"
  },
  {
    "text": "dedicated to just like this is how you find a function that you're looking for right with these arguments and under",
    "start": "945360",
    "end": "951440"
  },
  {
    "text": "with this name under these circumstances right um but in this case it's very simple right it looks in the namespace",
    "start": "951440",
    "end": "957120"
  },
  {
    "text": "of the type of each argument right so we're using a v 2 and we're adding to a v 2 so it's going to look in the names",
    "start": "957120",
    "end": "963519"
  },
  {
    "text": "space of V 2 and it exists in the math lib so it just goes looks in math lib and says okay are there any pluses here",
    "start": "963519",
    "end": "968759"
  },
  {
    "text": "that I should be interested in right um and so it finds all three overloads",
    "start": "968759",
    "end": "974240"
  },
  {
    "text": "inside the mathlib right and so it finds the member function in the type itself and then it finds the two free functions",
    "start": "974240",
    "end": "979600"
  },
  {
    "text": "in math lib and so that's the full set of functions that we look at we've collected all the functions we're interested in right",
    "start": "979600",
    "end": "986720"
  },
  {
    "text": "um and then after that that we use types conversions orders and more right to",
    "start": "986720",
    "end": "992560"
  },
  {
    "text": "select the right function right so in this case we're adding a v to to a float so and very specifically we want to look",
    "start": "992560",
    "end": "997920"
  },
  {
    "text": "at uh we are trying to look at oops um my",
    "start": "997920",
    "end": "1003240"
  },
  {
    "text": "bad I believe I have accidentally gone too",
    "start": "1003240",
    "end": "1008720"
  },
  {
    "text": "far that's okay I went way too far right back again sorry about that uh let's say",
    "start": "1008720",
    "end": "1015600"
  },
  {
    "text": "you know this is a real presentation that I'm already goofing up um okay great I did it right this time um",
    "start": "1015600",
    "end": "1021920"
  },
  {
    "text": "so in this code you can see that you know what we're specifically looking for",
    "start": "1021920",
    "end": "1027038"
  },
  {
    "text": "is we're looking for this right we're looking for the uh the vector 2 the",
    "start": "1027039",
    "end": "1032880"
  },
  {
    "text": "second Vector 2 plus operator plus that has the vector on the left hand side and the float on the right hand side because that's what we're doing inside that that",
    "start": "1032880",
    "end": "1038438"
  },
  {
    "text": "call right that expression but the problem is is that none of this exists in C right we don't",
    "start": "1038439",
    "end": "1044319"
  },
  {
    "text": "have name spaces right we don't have member functions we just have regular free functions right everything is that file or Global scope so when you're",
    "start": "1044319",
    "end": "1051440"
  },
  {
    "text": "thinking about how do I put operators in C like a lot of that name lookup stuff doesn't mean anything right um so this",
    "start": "1051440",
    "end": "1058360"
  },
  {
    "text": "is kind of a c version of this where instead of having a namespace you kind of just prefix the VC 2 with a quick",
    "start": "1058360",
    "end": "1064600"
  },
  {
    "text": "thing whatever so in this case it's math lib so we're just calling ml uncore VC 2 you're not allowed to have member",
    "start": "1064600",
    "end": "1070280"
  },
  {
    "text": "functions so everything is just there and then you have to have operators",
    "start": "1070280",
    "end": "1076000"
  },
  {
    "text": "right all three operators kind of exist the global scope because that's the only place you can declare functions right in C so this isn't real syntax right this",
    "start": "1076000",
    "end": "1081960"
  },
  {
    "text": "is just me taking math lib and saying okay now that we're working in C what do we have to get rid of to like actually",
    "start": "1081960",
    "end": "1088200"
  },
  {
    "text": "get closer to something that's working that would be viable for C right so we had to strip the name spaces because we don't have it unfortunately right we",
    "start": "1088200",
    "end": "1095120"
  },
  {
    "text": "have to Shi the member functions and so that moves that function outside um and then now we just have these kind of free",
    "start": "1095120",
    "end": "1100720"
  },
  {
    "text": "functions with the name operator plus right um and so in this case now we don't have to do any lookup because all",
    "start": "1100720",
    "end": "1107799"
  },
  {
    "text": "of the operators are now in scope right so they're just all in the global name space so when it comes to name lookup I",
    "start": "1107799",
    "end": "1112919"
  },
  {
    "text": "just say okay what are all the operator pluses in the global name space and that's it I'm done right that's my algorithm right um so I don't have to",
    "start": "1112919",
    "end": "1118679"
  },
  {
    "text": "like I don't have any quirks for okay look in the type look in the uh look in",
    "start": "1118679",
    "end": "1124360"
  },
  {
    "text": "the actual you know class itself to see if there's a fun a member function there or a friend function or a ADL found",
    "start": "1124360",
    "end": "1131280"
  },
  {
    "text": "hidden friend which is just it's there's so many different steps in C++ it's it's interesting um but in this case it's",
    "start": "1131280",
    "end": "1138280"
  },
  {
    "text": "very simple right there's three potential operators the global scope right this is very SE like it's just",
    "start": "1138280",
    "end": "1143360"
  },
  {
    "text": "free functions okay right so we've got that part down right we managed to make name look up a trivial like nonissue",
    "start": "1143360",
    "end": "1149840"
  },
  {
    "text": "right this is just how every other function works right you find the function that you're calling and then you call it right and this actually gets us to what",
    "start": "1149840",
    "end": "1157400"
  },
  {
    "text": "Jacob na'vi was proposing in n351 where he wanted to have operators",
    "start": "1157400",
    "end": "1163240"
  },
  {
    "text": "um the problem is doesn't quite get there right because if you look at the previous code that we were running um",
    "start": "1163240",
    "end": "1169080"
  },
  {
    "text": "there's still references in here right and C doesn't have references right and there's a bunch of other kind of subtle things like we don't have the operator",
    "start": "1169080",
    "end": "1174520"
  },
  {
    "text": "keyword in C in C either so like we're not quite there yet right we haven't actually gotten to something that's",
    "start": "1174520",
    "end": "1179559"
  },
  {
    "text": "Works in C by itself so we now uh have to kind of think about",
    "start": "1179559",
    "end": "1186039"
  },
  {
    "text": "like what else do we need to address or get rid of or tweak in order to make something work in C right",
    "start": "1186039",
    "end": "1194400"
  },
  {
    "text": "so back to the systems underlying CS operator overloading right we have act we've kind of taken care of name and",
    "start": "1194400",
    "end": "1200640"
  },
  {
    "text": "argument dependent lookup right everything's just in the global name space they're all free functions that's the only thing we have to look for great we know how to do that part and see now",
    "start": "1200640",
    "end": "1207520"
  },
  {
    "text": "we have overload resolution right so you have a bunch of functions you need to figure out which one of these functions",
    "start": "1207520",
    "end": "1213240"
  },
  {
    "text": "you're going to call and do something with right um so that takes us to this",
    "start": "1213240",
    "end": "1219280"
  },
  {
    "text": "part right overload resolution figuring out which function to call figuring out how we're going to do all of this and so this was uh a very fun thing",
    "start": "1219280",
    "end": "1229919"
  },
  {
    "text": "um that Jacob nav's proposal uh also did right so as you can see here we've stripped off the references because you",
    "start": "1229919",
    "end": "1236320"
  },
  {
    "text": "know we're in C we don't have references right so now we're just passing everything by value which isn't a big deal because it's just a float of it's",
    "start": "1236320",
    "end": "1242360"
  },
  {
    "text": "just a a struct of two floats right so we're not like smashing the stack or something by not using references here",
    "start": "1242360",
    "end": "1247520"
  },
  {
    "text": "right so this is like a very simple case right most of the time you'd want to pass most of the stuff by value anyway",
    "start": "1247520",
    "end": "1252600"
  },
  {
    "text": "um so we got R of the references we have the operator plus and now this actually",
    "start": "1252600",
    "end": "1258159"
  },
  {
    "text": "looks a lot like what Jacob Navia had in his proposal when he wanted to propose us to see right so his proposal was",
    "start": "1258159",
    "end": "1264480"
  },
  {
    "text": "listen let's just add operator as like a kind of funny identifier that goes there and then allow you to put the symbol there that defines it and then you know",
    "start": "1264480",
    "end": "1270440"
  },
  {
    "text": "we can have the return value and our arguments there and it will just work that way and it works pretty much exactly the same way as C++ um you know",
    "start": "1270440",
    "end": "1278760"
  },
  {
    "text": "but we have an issue right how do we tell these three these three things apart right if you've ever looked at",
    "start": "1278760",
    "end": "1286039"
  },
  {
    "text": "code right um if you ever looked at C code you ever looked at C++ code you ever looked at the generated assembly um",
    "start": "1286039",
    "end": "1292960"
  },
  {
    "text": "this is an example where I've taken some C++ code that had an operator Plus for an INT 128t that I defined um and int",
    "start": "1292960",
    "end": "1300600"
  },
  {
    "text": "256t that I defined and what you see is that the function names here don't look",
    "start": "1300600",
    "end": "1306440"
  },
  {
    "text": "like things that you would recognize right it's all it has all these jumbled symbols in it right so there's like zpl",
    "start": "1306440",
    "end": "1311919"
  },
  {
    "text": "8 in 128t you see the type name in there and then you like an S underscore right and it's like what what is all that and",
    "start": "1311919",
    "end": "1317840"
  },
  {
    "text": "this is what's a process called name mangling and name mangling is like a foundational feature in a ton of",
    "start": "1317840",
    "end": "1323440"
  },
  {
    "text": "languages like rust has it C has it um you know C++ obviously has it um and",
    "start": "1323440",
    "end": "1329120"
  },
  {
    "text": "many many more use name mangling so that even if you have a function or several functions with the same name your binary",
    "start": "1329120",
    "end": "1337880"
  },
  {
    "text": "your actual code that gets compiled can tell them apart and the way they tell them apart is by basically injecting",
    "start": "1337880",
    "end": "1344640"
  },
  {
    "text": "types and other information from the function signature into into the final label in the assembly like guess for the",
    "start": "1344640",
    "end": "1350400"
  },
  {
    "text": "generated code and that means that there's a onetoone relationship between every function that exists in your",
    "start": "1350400",
    "end": "1355559"
  },
  {
    "text": "source code and the actual binary that appears here so even though all of the functions technically have the same name",
    "start": "1355559",
    "end": "1362080"
  },
  {
    "text": "the implementation mangles that name with type information and other stuff to make it distinct each one distinct from",
    "start": "1362080",
    "end": "1368039"
  },
  {
    "text": "the other right and so this is kind of what C++ does in order to make sure that",
    "start": "1368039",
    "end": "1376799"
  },
  {
    "text": "it can have all these functions with the same name right this is how this is the binary side of overload resolution right so there's a front end side where it",
    "start": "1376799",
    "end": "1382799"
  },
  {
    "text": "actually picks the function that's going to call but then when it actually generates the code for this it makes",
    "start": "1382799",
    "end": "1388000"
  },
  {
    "text": "sure to put down here a label that is",
    "start": "1388000",
    "end": "1393120"
  },
  {
    "text": "completely kind of divorced from uh the actual name in the source code",
    "start": "1393120",
    "end": "1399440"
  },
  {
    "text": "right okay I think I'm think I haven't lost anyone yet um and so this is kind of bad for C right and so this is kind",
    "start": "1399440",
    "end": "1406000"
  },
  {
    "text": "of a quick snippet of C++ code that's using X turn and C to demonstrate but in",
    "start": "1406000",
    "end": "1411159"
  },
  {
    "text": "C++ you can see that like the name is fully mangled just like it was in that",
    "start": "1411159",
    "end": "1416840"
  },
  {
    "text": "last slide right so you know fla warba that takes an INT and a double right",
    "start": "1416840",
    "end": "1423080"
  },
  {
    "text": "gets this name angled so you see flra warba is in there as part of the name but you have these extra things like the I and D at the end which stands for the",
    "start": "1423080",
    "end": "1429360"
  },
  {
    "text": "integer and the double that you're passing as a function um that you're passing into the function and then the z12 in the front um for additional",
    "start": "1429360",
    "end": "1436960"
  },
  {
    "text": "mangling that uh this implementation does meanwhile for the xtor C of the flba warbo which is an O at the end um",
    "start": "1436960",
    "end": "1446039"
  },
  {
    "text": "there's nothing there right it's literally just the name like the label in the assembly is literally just the name that comes from C and so when",
    "start": "1446039",
    "end": "1452600"
  },
  {
    "text": "you're talking about how do I differentiate these three operator pluses C doesn't have any mechanism for",
    "start": "1452600",
    "end": "1458919"
  },
  {
    "text": "that doesn't have any understanding of that no implementation has any understanding of this right now obviously if you're talking to clang or",
    "start": "1458919",
    "end": "1464400"
  },
  {
    "text": "GCC right they pack the name Mangler that understands how to do this stuff right so C can still technically talk",
    "start": "1464400",
    "end": "1470559"
  },
  {
    "text": "C++ and vice versa because they have the mangling and they can understand that sort of thing but if you go to say tiny",
    "start": "1470559",
    "end": "1475880"
  },
  {
    "text": "CC if you go to uh quick C if you go to um you know qbcc right um if you decide",
    "start": "1475880",
    "end": "1482880"
  },
  {
    "text": "to go to the the the Serbian guy who's holding up his entire local compiler economy with his one C compiler um he",
    "start": "1482880",
    "end": "1488320"
  },
  {
    "text": "doesn't have any of this right they don't have any of this stuff um so it sort of violates the fundamental",
    "start": "1488320",
    "end": "1494159"
  },
  {
    "text": "tenant ofy right that what you write in the program is the thing that appears in your binary right and so this is kind of",
    "start": "1494159",
    "end": "1500039"
  },
  {
    "text": "like a very sacred tenant because it also Powers a lot of ffi a lot of foreign function interfaces because a",
    "start": "1500039",
    "end": "1505960"
  },
  {
    "text": "lot of people will generate C code from like zigg or rust or Odin or Java or",
    "start": "1505960",
    "end": "1512200"
  },
  {
    "text": "whatever knowing that the names they wrote In The Source Code are going to be basically what exactly appears in the",
    "start": "1512200",
    "end": "1519440"
  },
  {
    "text": "binary and that means that they can write reliable foreign function interfaces right and this is how C kind of becomes the glue language between all",
    "start": "1519440",
    "end": "1525240"
  },
  {
    "text": "these others right because they don't have any of this name mangling going on right and even though you see the name mangling it here um it's actually",
    "start": "1525240",
    "end": "1531240"
  },
  {
    "text": "different for almost every single implementation every single implementation mangles their symbols differently msvc has a wild name",
    "start": "1531240",
    "end": "1537080"
  },
  {
    "text": "mingling um GC and clang kind of share it but it depends on the platform you're on depends on what you're compiling for",
    "start": "1537080",
    "end": "1542880"
  },
  {
    "text": "it can change it up um other people have their own very interesting ideas for how they should do name mingling um and so",
    "start": "1542880",
    "end": "1551480"
  },
  {
    "text": "in plus is kind of really a wild wild west when you get down to the binary level um whereas in C right you write",
    "start": "1551480",
    "end": "1557200"
  },
  {
    "text": "you know Flor waro you get floral waro every time everywhere or just about everywhere right you might get like an additional underscore in places for like",
    "start": "1557200",
    "end": "1564080"
  },
  {
    "text": "there as like a differentiation mechanism um but otherwise what you see is what you're getting out",
    "start": "1564080",
    "end": "1569559"
  },
  {
    "text": "right so this is what uh Johnson's and",
    "start": "1569559",
    "end": "1575200"
  },
  {
    "text": "n320 uh one was trying to do he was trying to do operators without overloading right a way of specifying",
    "start": "1575200",
    "end": "1580919"
  },
  {
    "text": "operators without having to do the overload now from Jacob na'vi standpoint with his paper with just using the",
    "start": "1580919",
    "end": "1586360"
  },
  {
    "text": "operator plus the actual keyword operator and the plus um he said well it's just implementation defined or",
    "start": "1586360",
    "end": "1591880"
  },
  {
    "text": "we'll Define a mangling in the standard and then we'll do that right but that's kind of In Contention with C++ right if you define a mangling by the C standard",
    "start": "1591880",
    "end": "1598799"
  },
  {
    "text": "right whose implementation wins is it mvc's is it clangs is it gcc's right who gets to Define what the mangling ends up",
    "start": "1598799",
    "end": "1605279"
  },
  {
    "text": "being right um and so it kind of became uh uh difficult right it also becomes",
    "start": "1605279",
    "end": "1611440"
  },
  {
    "text": "hard to name a function right um if you don't know what the uh mangle name will",
    "start": "1611440",
    "end": "1616679"
  },
  {
    "text": "be how do you form a function pointer to this thing in C right like we don't have the same kind of mechanisms and castings",
    "start": "1616679",
    "end": "1622039"
  },
  {
    "text": "and whatever to get at the function pointer so how do you name a function pointer with operator plus right um and",
    "start": "1622039",
    "end": "1628240"
  },
  {
    "text": "so it was very kind of convolute and this is where Jacob navi's proposal kind of broke down in the committee and in communication when we when we were",
    "start": "1628240",
    "end": "1634039"
  },
  {
    "text": "trying to discuss it and talk about it very recently as far as I think back J back in January marcus' standpoint for n3201 was",
    "start": "1634039",
    "end": "1642679"
  },
  {
    "text": "what if we designed it so that we didn't have this problem what if we made it so that this wasn't a thing that we had to worry about right",
    "start": "1642679",
    "end": "1649200"
  },
  {
    "text": "um and so this was also the standpoint I had because I was also cooking up a proposal for this but I hadn't actually",
    "start": "1649200",
    "end": "1655760"
  },
  {
    "text": "published it yet um and so the idea is that maybe we instead of tackling this from a position of well maybe we'll just",
    "start": "1655760",
    "end": "1662039"
  },
  {
    "text": "Define a mangling what if we just didn't have mangling at all right how do we and now it comes in questioning like how do",
    "start": "1662039",
    "end": "1668000"
  },
  {
    "text": "we do that how do we fix this right but first we have to kind of address the two Waring sites here so this is this big uh",
    "start": "1668000",
    "end": "1674799"
  },
  {
    "text": "snake likee fellow is sending and then of course we still have bird from before um sending is kind of on my side",
    "start": "1674799",
    "end": "1680120"
  },
  {
    "text": "actually he loves operators he wants operators see he's actually a Die Hard sea Enthusiast um but he wants operators he wants like to see see grow and change",
    "start": "1680120",
    "end": "1687159"
  },
  {
    "text": "and and do other things like that um whereas bird is more of your typical conservative uh you know I want function",
    "start": "1687159",
    "end": "1692440"
  },
  {
    "text": "calls function calls only that's the way this should work right um",
    "start": "1692440",
    "end": "1698679"
  },
  {
    "text": "so when you're looking at this right you have these operators and you want to",
    "start": "1698679",
    "end": "1704919"
  },
  {
    "text": "kind of separate the operator itself from like the actual ual function that defines like the mangling and everything",
    "start": "1704919",
    "end": "1710640"
  },
  {
    "text": "else that goes on behind the scenes right so you know the thing that's the core problem",
    "start": "1710640",
    "end": "1717919"
  },
  {
    "text": "here is that the actual behavior of operator plus is kind of locked behind this unnameable operator right um You can't call these normally it locks out",
    "start": "1717919",
    "end": "1724559"
  },
  {
    "text": "the people who want functions and yes obviously overload resolution provokes all the naming issues I talked about before right so we kind of those are",
    "start": "1724559",
    "end": "1731440"
  },
  {
    "text": "like the the things we have to solve with our design right so first off we're going to like go back to the functions",
    "start": "1731440",
    "end": "1737720"
  },
  {
    "text": "right so like here's the functions and we've we've hand this is mangled but it's like hand mangled right like we're",
    "start": "1737720",
    "end": "1743120"
  },
  {
    "text": "writing ml V to add we're writing ml V to add F we're writing MLF ad like we've",
    "start": "1743120",
    "end": "1749600"
  },
  {
    "text": "we've done mangling but like it's our mangling right it's our if we we put this in the in the source code we put this in the header we implement it in",
    "start": "1749600",
    "end": "1755799"
  },
  {
    "text": "the in the C file right and so it is a mangling but it's one that we chose for our library with our namespace with our",
    "start": "1755799",
    "end": "1762320"
  },
  {
    "text": "scheming whatever right so we've got the functions right and this makes the function people Havey",
    "start": "1762320",
    "end": "1768519"
  },
  {
    "text": "they're like oh yeah I'll write this all the time I you know screw those those those operator people I'm going to write this all the time right but we still",
    "start": "1768519",
    "end": "1774039"
  },
  {
    "text": "want the operators so what if we still allow you to declare The Operators but we",
    "start": "1774039",
    "end": "1779320"
  },
  {
    "text": "decouple the function call and the function declaration the function definition if we decouple that from the",
    "start": "1779320",
    "end": "1784960"
  },
  {
    "text": "operator itself right so here's my syntax that I've this we just",
    "start": "1784960",
    "end": "1791919"
  },
  {
    "text": "like the fancy syntax I've just kind of made up right now right um and it hopefully it's not too hard to understand but of course I'm going to",
    "start": "1791919",
    "end": "1797080"
  },
  {
    "text": "walk you through it um in C we have the horrible horrible horrible thing that um",
    "start": "1797080",
    "end": "1802320"
  },
  {
    "text": "we don't really have a way of claiming our own um keywords and we don't have context sensitive keywords so what",
    "start": "1802320",
    "end": "1808919"
  },
  {
    "text": "happens is we usually have to do the underscore capital letter fix for all of our keywords so that's why operator here",
    "start": "1808919",
    "end": "1816039"
  },
  {
    "text": "it looks so weird um we have to spell it in this kind of ridiculous way in order to like not collide with people who are",
    "start": "1816039",
    "end": "1822240"
  },
  {
    "text": "existing in the real life who are who have written code that has the identifier operator in it which sounds",
    "start": "1822240",
    "end": "1827600"
  },
  {
    "text": "silly but people do do that so here we have uncore capital O operator I'm just",
    "start": "1827600",
    "end": "1832880"
  },
  {
    "text": "going to call it operator from here on out butore capital O operator and then we have an open parenthesis and what",
    "start": "1832880",
    "end": "1838720"
  },
  {
    "text": "this list is is just this list of arguments into this this weird statement is that it's just basically telling the",
    "start": "1838720",
    "end": "1844600"
  },
  {
    "text": "op what kind of operator we're defining so we have an operator plus it takes uh",
    "start": "1844600",
    "end": "1849679"
  },
  {
    "text": "two Vector twos right two float and Float types um and then uh we want to",
    "start": "1849679",
    "end": "1855919"
  },
  {
    "text": "bind it to ml V2 ad right so we're creating this association between this",
    "start": "1855919",
    "end": "1861639"
  },
  {
    "text": "function call and this operator right so there's a plus operator and it will call",
    "start": "1861639",
    "end": "1867200"
  },
  {
    "text": "hopefully mlc2 ad right using the syntax everybody is no anybody lost Have I Lost",
    "start": "1867200",
    "end": "1873440"
  },
  {
    "text": "anybody no great okay wonderful um same thing for the other two operator",
    "start": "1873440",
    "end": "1879919"
  },
  {
    "text": "declarations right we have an operator plus but one is with ML 2 and float and the other one is float first and then ml",
    "start": "1879919",
    "end": "1885279"
  },
  {
    "text": "2 right and we're just binding it to each of these functions right so we're name mangling but we're doing the name mangling oursel",
    "start": "1885279",
    "end": "1891760"
  },
  {
    "text": "right and so this is what I say to those people who want to have either operators here the functions I come in there and I",
    "start": "1891760",
    "end": "1897960"
  },
  {
    "text": "say both right um you know um much like the tabs and spaces debate I also show",
    "start": "1897960",
    "end": "1903320"
  },
  {
    "text": "up and say both and then I get you know and then this happens to me right I get I get beaten up um you know because they",
    "start": "1903320",
    "end": "1909559"
  },
  {
    "text": "don't really want to share um they think that it's an affront to Nature um you know I'm ruining the language and I'm",
    "start": "1909559",
    "end": "1915159"
  },
  {
    "text": "taking things away from them but but I want to you know hear me out okay before you before you",
    "start": "1915159",
    "end": "1920559"
  },
  {
    "text": "beat before you beat the crap out of me hear me out okay um these two pieces of",
    "start": "1920559",
    "end": "1928639"
  },
  {
    "text": "code do the identical do identical things right so we creating a vector",
    "start": "1928639",
    "end": "1933720"
  },
  {
    "text": "right similar code to before right literally exactly same the same code as before in the top one right we're using",
    "start": "1933720",
    "end": "1939120"
  },
  {
    "text": "the operator we're doing V plus 30 3.0 f um we're taking the uh member of X and",
    "start": "1939120",
    "end": "1944559"
  },
  {
    "text": "then Cas it to an in then returning it right um but in this bottom snipp it we are doing the exact same thing but we're",
    "start": "1944559",
    "end": "1951639"
  },
  {
    "text": "using the ml V3 at F right we're using the function we created and the idea is",
    "start": "1951639",
    "end": "1958399"
  },
  {
    "text": "we can have both of those coexist at the exact same time right without actually forcing you to pick between the two and",
    "start": "1958399",
    "end": "1965200"
  },
  {
    "text": "the reason you do that is because the design forces you to make them both",
    "start": "1965200",
    "end": "1970360"
  },
  {
    "text": "available right so both of these will compile because you've made a design that gives you not only the function",
    "start": "1970360",
    "end": "1977480"
  },
  {
    "text": "calls by forcing you to pin the operator to a function call but then also gives you the operator that will always",
    "start": "1977480",
    "end": "1983240"
  },
  {
    "text": "translate to that function call right and so both people who want to",
    "start": "1983240",
    "end": "1988360"
  },
  {
    "text": "write the operator code but also write the function code get to actually live in the same code base right and they",
    "start": "1988360",
    "end": "1996360"
  },
  {
    "text": "don't have to necessarily be at each other's throats right now obviously if you have a senior person right they might try to force their opinion about",
    "start": "1996360",
    "end": "2002240"
  },
  {
    "text": "how the world should work right you know only we only use operators here none of that none of those garbage macros are",
    "start": "2002240",
    "end": "2007760"
  },
  {
    "text": "fun call this is a wholesome clean code base with the code looks normal it looks like it looks like it came straight out",
    "start": "2007760",
    "end": "2012880"
  },
  {
    "text": "of the math textbook right you know those kinds of people then you have other people who are like no we write function calls here everything is a function it's readable you make",
    "start": "2012880",
    "end": "2018880"
  },
  {
    "text": "Temporaries and you understand everything about the code and that's how we do things here right and that's obviously that's up to a matter of style",
    "start": "2018880",
    "end": "2024919"
  },
  {
    "text": "but the whole point about the design is that the design enables you to pick right so instead of being like James",
    "start": "2024919",
    "end": "2029960"
  },
  {
    "text": "Gosling and saying no operators for anyone or instead of being like uh C++ where we have IO stream operators like",
    "start": "2029960",
    "end": "2035600"
  },
  {
    "text": "well actually you can't actually call a function to do this it's actually all hidden behind the left shift left shift operator and that's how you're going to",
    "start": "2035600",
    "end": "2041440"
  },
  {
    "text": "do your reads and your rights for Io streams right um this design enables you to pick the one that you want right so",
    "start": "2041440",
    "end": "2047720"
  },
  {
    "text": "there's sometimes where you know you're taking a a formula straight out of a paper right and you want it to look as",
    "start": "2047720",
    "end": "2053800"
  },
  {
    "text": "close to that paper as possible right or you're working with Scientists right and they're usually working fortrend or something else but you're you're you dip",
    "start": "2053800",
    "end": "2059320"
  },
  {
    "text": "them into C and they're like okay well how do I write this code with these vun is like well you have to write a bunch of functions and stack them all together",
    "start": "2059320",
    "end": "2064440"
  },
  {
    "text": "and make sure you do it in reverse order because remember you have to evaluate the first the the arguments of the first function call then kind of work your way",
    "start": "2064440",
    "end": "2069839"
  },
  {
    "text": "outward right so you have to teach them all of that and they get like annoyed and like what is this garbage like why am I writing it like this give me a break um you know but the whole point",
    "start": "2069839",
    "end": "2077638"
  },
  {
    "text": "here is that the design kind of enables you to pick one or the other at your",
    "start": "2077639",
    "end": "2082760"
  },
  {
    "text": "leisure right um and so by forcing this you're able to kind of prevent the war",
    "start": "2082760",
    "end": "2087839"
  },
  {
    "text": "that breaks out usually when it's like well I want operators oh I want functions um and so you can kind of",
    "start": "2087839",
    "end": "2093440"
  },
  {
    "text": "reach this kind of Middle Ground here by just you know getting rid of the overload resolution problem and by making that linking that that that that",
    "start": "2093440",
    "end": "2100960"
  },
  {
    "text": "connection between the operator and the function explicit right so now anytime somebody sees a a v a vector 2 that's",
    "start": "2100960",
    "end": "2106640"
  },
  {
    "text": "being added to by a float they know where to find the operator and then where to find the function call from",
    "start": "2106640",
    "end": "2111800"
  },
  {
    "text": "that operator declaration right before you'd have to go to the operator and then just start reading the code because",
    "start": "2111800",
    "end": "2116920"
  },
  {
    "text": "the operator was the definition right you Fus the two things together that's what C++ did um in many other languages like C and Etc also did right they kind",
    "start": "2116920",
    "end": "2124119"
  },
  {
    "text": "of fused the concepts together but by this doing this separation you can avoid a lot of that headache right and so it's",
    "start": "2124119",
    "end": "2130640"
  },
  {
    "text": "a little bit of an extra step obviously you have to you have to declare this extra like underscore Capo operator nonsense but by separating the two",
    "start": "2130640",
    "end": "2137320"
  },
  {
    "text": "you've now effectively eliminated the problem that came with the original issue in the first place",
    "start": "2137320",
    "end": "2145079"
  },
  {
    "text": "right and so now we've successfully taken care of overl resolution and now there's like three other systems but",
    "start": "2145079",
    "end": "2150839"
  },
  {
    "text": "they're actually much smaller system so they we don't really have to get too deep into it um but having done that",
    "start": "2150839",
    "end": "2157319"
  },
  {
    "text": "right we we have the problem of implicit conversions right so in C++ right if you have uh a if you have a integer right it",
    "start": "2157319",
    "end": "2165480"
  },
  {
    "text": "might get it might get converted or promoted to a float and then used with this this this VC 2 operator right um",
    "start": "2165480",
    "end": "2171200"
  },
  {
    "text": "mostly for convenience purposes right A lot of these implicit conversions and promotions integy promotions Etc um are",
    "start": "2171200",
    "end": "2178240"
  },
  {
    "text": "purely for uh convenience purposes right um the problem is that implicit",
    "start": "2178240",
    "end": "2184960"
  },
  {
    "text": "conversions are like basically the root of all evil right which I know it's the you know usually we're like oh it's inheritance that's the The Base Class of",
    "start": "2184960",
    "end": "2190319"
  },
  {
    "text": "all evil right if you're Sean parent or something um usually you know there's other people who have very specific",
    "start": "2190319",
    "end": "2195560"
  },
  {
    "text": "ideas about what the the horrible things you can do with in C++ but if you talk",
    "start": "2195560",
    "end": "2201160"
  },
  {
    "text": "to Jason Turner who I think is he hey um he says here um uh you know implicit",
    "start": "2201160",
    "end": "2207720"
  },
  {
    "text": "conversions he says the root of all evil or most of it in C++ and I mean having programmed as much as I have he's he's",
    "start": "2207720",
    "end": "2213520"
  },
  {
    "text": "he's kind of right um he's he's kind of cooking here um because uh I've had to deal with a lot of like crazy overload",
    "start": "2213520",
    "end": "2219920"
  },
  {
    "text": "sets and everything like that and usually the the thing that breaks the overload set or makes things go Haywire is that there's some complicit",
    "start": "2219920",
    "end": "2225680"
  },
  {
    "text": "converence somewhere like oh this this string view gets automatically constructed into this type and that's why this whole thing blow blows up in",
    "start": "2225680",
    "end": "2231640"
  },
  {
    "text": "your face and that's why you have a dangling reference and whatever and and so on and so forth and that a lot of that comes from implicit conversions",
    "start": "2231640",
    "end": "2237040"
  },
  {
    "text": "right um similarly um Sean middleditch who is a uh I don't know if currently",
    "start": "2237040",
    "end": "2243200"
  },
  {
    "text": "but works at worked at blizzard worked on working on a survival game senior programmer tons of experience under his belt he actually made his own language",
    "start": "2243200",
    "end": "2250480"
  },
  {
    "text": "and he put implicit conversions in them and he says it's you know his my second or third largest mistake of his of his",
    "start": "2250480",
    "end": "2255880"
  },
  {
    "text": "whole career right that implicit doing implicit conversions right the Russ folk also uh got a whiff of implicit",
    "start": "2255880",
    "end": "2261680"
  },
  {
    "text": "conversion from C++ um and some from C and decide to like never have any of them in their language at all right if",
    "start": "2261680",
    "end": "2268160"
  },
  {
    "text": "you try to add like a a 32bit integer and a 64-bit injur it will like force you to cast one of those like you can't",
    "start": "2268160",
    "end": "2274640"
  },
  {
    "text": "even just like do that normally I'm which a little Annoying like it's definitely annoying but um it's a pain",
    "start": "2274640",
    "end": "2280960"
  },
  {
    "text": "um and so in this design um we're actually going to not deal with it which",
    "start": "2280960",
    "end": "2286079"
  },
  {
    "text": "is bad in a way right you kind of want it to work because you kind of want that Simplicity to kick in you want you know",
    "start": "2286079",
    "end": "2292240"
  },
  {
    "text": "floats to convert to doubles and vice versa or whatever um but in this case",
    "start": "2292240",
    "end": "2297440"
  },
  {
    "text": "right as you can see from the code here right um we have the operator set up from the exact same operators before but",
    "start": "2297440",
    "end": "2303359"
  },
  {
    "text": "if you try to add a three 3.0 instead of 3.0 F which is you know a double versus a float if you try to add the double to",
    "start": "2303359",
    "end": "2309720"
  },
  {
    "text": "that it just says I don't know what you're talking about this there's no operator for this I hate it uh",
    "start": "2309720",
    "end": "2314839"
  },
  {
    "text": "question but that would change to behavior between using the function which would impf",
    "start": "2314839",
    "end": "2320520"
  },
  {
    "text": "convert from using the operator which now yes and the reason it's like this",
    "start": "2320520",
    "end": "2328319"
  },
  {
    "text": "the reason the behavior is like this um is because uh specifically this is about",
    "start": "2328319",
    "end": "2334640"
  },
  {
    "text": "the next slide um about the lookup algorithm right um when you get to the place where it's",
    "start": "2334640",
    "end": "2340520"
  },
  {
    "text": "like okay I need to consider a large variety of stuff um so that I can pick",
    "start": "2340520",
    "end": "2345560"
  },
  {
    "text": "the right operator right because remember there's still even if we've gotten rid of overload resolution",
    "start": "2345560",
    "end": "2351040"
  },
  {
    "text": "there's still like a I have to pick the right operator from this list of operators um if you get into conversion",
    "start": "2351040",
    "end": "2356760"
  },
  {
    "text": "issues then you have to wonder like okay which one of these am I going to call now in the case that we're seeing here",
    "start": "2356760",
    "end": "2363160"
  },
  {
    "text": "like this is very simple right clearly it should probably pick the float one right like even if it's the right it's 3.0 a compiler that's you know not even",
    "start": "2363160",
    "end": "2371200"
  },
  {
    "text": "modern like relatively like not even new like from the early 2000s can tell you",
    "start": "2371200",
    "end": "2377640"
  },
  {
    "text": "that you know this 3.0 is small enough to fit in the float it should probably work out just fine there's no errors and no you know warnings you'll get right",
    "start": "2377640",
    "end": "2383839"
  },
  {
    "text": "which should just work right um but the reason we have to do this is because we",
    "start": "2383839",
    "end": "2388880"
  },
  {
    "text": "want to do that exact type match because again if you had a if you had the same code um but you had an operator Plus for",
    "start": "2388880",
    "end": "2394960"
  },
  {
    "text": "double then it's like okay well should I pick the double one or if you had say if you had an operator for a long double",
    "start": "2394960",
    "end": "2400240"
  },
  {
    "text": "like should I pick that one should I pick this one right you start to get into these arguments about like which conversion am I supposed to invoke which",
    "start": "2400240",
    "end": "2405599"
  },
  {
    "text": "one am I supposed to match um and so uh that's why kind of at least for the for the first blush of this we're just not",
    "start": "2405599",
    "end": "2411800"
  },
  {
    "text": "going to we're not dealing with implicit conversion like there's no implicit conversions it matches directly or it doesn't right and the good news about",
    "start": "2411800",
    "end": "2417960"
  },
  {
    "text": "for doing this for function calls like you said obviously you get back those implicit conversions in some case where you get argument promotions to double",
    "start": "2417960",
    "end": "2423520"
  },
  {
    "text": "and things like that but um you know in the case of function call right you've",
    "start": "2423520",
    "end": "2428920"
  },
  {
    "text": "kind of made it explicit that you're calling a function again so like the trade-off is there is like okay like",
    "start": "2428920",
    "end": "2434359"
  },
  {
    "text": "you've asked for it so like you get all the function like Behavior you wanted but for the purpos of The Operators",
    "start": "2434359",
    "end": "2439920"
  },
  {
    "text": "right and for the purpose of making sure that finding the right thing is easy um",
    "start": "2439920",
    "end": "2445079"
  },
  {
    "text": "we're kind of just doing an exact type match only strike balance well yes and",
    "start": "2445079",
    "end": "2450800"
  },
  {
    "text": "so there there are very interesting things you can do with exact type based matching um even though again like it it",
    "start": "2450800",
    "end": "2458359"
  },
  {
    "text": "will get annoying um to do it that way right again here I have to basically add two whole extra things just for double",
    "start": "2458359",
    "end": "2464720"
  },
  {
    "text": "um and then I have to add two extra operators for double and it's annoying but one of the interesting things that you can do when you have exact type",
    "start": "2464720",
    "end": "2469960"
  },
  {
    "text": "based matching is that you can kind of control the uh promotions you do or",
    "start": "2469960",
    "end": "2475079"
  },
  {
    "text": "don't do right um and this gets very important when you want to do when you have like mixed integer addition and",
    "start": "2475079",
    "end": "2480920"
  },
  {
    "text": "things like that right obviously for VC 2 it's kind of silly but um for when you're doing like I'm going to add this",
    "start": "2480920",
    "end": "2488160"
  },
  {
    "text": "int 256 to this int 128t you could say okay well do I want that to happen or do I want to actually make it be an error",
    "start": "2488160",
    "end": "2494839"
  },
  {
    "text": "right and so you can can decide for each mixture what to do right obviously it's annoying again to Define it all out but",
    "start": "2494839",
    "end": "2501960"
  },
  {
    "text": "that's you yeah you could also just do a cast and it would work just fine I think there's two questions Jason oh three",
    "start": "2501960",
    "end": "2508800"
  },
  {
    "text": "questions sorry is",
    "start": "2508800",
    "end": "2513520"
  },
  {
    "text": "yes and no so in c2y we added a new feature actually so if you have generic and you",
    "start": "2517359",
    "end": "2524000"
  },
  {
    "text": "the way generic works is you put uncore capital G generic you open an open parentheses then you put an expression right something that eventually computes",
    "start": "2524000",
    "end": "2530680"
  },
  {
    "text": "to uh some kind of value that'll eventually give you a type right it's basically like size it's kind of like size of that way you can throw a",
    "start": "2530680",
    "end": "2537440"
  },
  {
    "text": "expression in there and it'll basically compute the size well this will just compute the type and then that's what will'll use in thisor capital G generic",
    "start": "2537440",
    "end": "2543520"
  },
  {
    "text": "thing to then match on a very a series of branches and what c2y did is that we actually added actually we actually",
    "start": "2543520",
    "end": "2550559"
  },
  {
    "text": "added exact type matching if you wrap that in type of so if you pass a type",
    "start": "2550559",
    "end": "2556240"
  },
  {
    "text": "into generic it'll do exact type matching and uh yeah so it will it won't allow",
    "start": "2556240",
    "end": "2563720"
  },
  {
    "text": "yes it won't do conversions in the case if you use if you use the type base matched but it uh will do conversions if",
    "start": "2563720",
    "end": "2569200"
  },
  {
    "text": "you use the uh normal generic but it won't do the normal implicit conversions it will do what they call L value",
    "start": "2569200",
    "end": "2574359"
  },
  {
    "text": "conversions um which is like float can uh no not F it's like arrays are decayed",
    "start": "2574359",
    "end": "2580160"
  },
  {
    "text": "to pointers um and there's like a couple of things that happen like qualifiers get tripped off so you if you want to do",
    "start": "2580160",
    "end": "2586119"
  },
  {
    "text": "underscore generic to like match on int versus constant you can't do that with an expression you have to use the type",
    "start": "2586119",
    "end": "2591400"
  },
  {
    "text": "based version and that will allow you to match on int versus constant because it won't actually because again L value conversion the fancy standard term for",
    "start": "2591400",
    "end": "2598520"
  },
  {
    "text": "this is that it strips off qualifiers right it actually gets rid of um your cons your volatile uh and then any",
    "start": "2598520",
    "end": "2604800"
  },
  {
    "text": "implementation toin stuff that you have um in their like kernel address spaces or whatever um but uh yes so you can do",
    "start": "2604800",
    "end": "2614480"
  },
  {
    "text": "exact matching in c2y with generic and funnily enough it was so popular the extension when they made it it was so",
    "start": "2614480",
    "end": "2620680"
  },
  {
    "text": "popular that they actually backported it to all the other standard versions you get a you'll get a warning on pedantic code if you try to use type of around an",
    "start": "2620680",
    "end": "2626920"
  },
  {
    "text": "expression in generic to do exact matching um but if you don't have pedantic warnings on you can just you can do that all day and'll you can get",
    "start": "2626920",
    "end": "2633480"
  },
  {
    "text": "exact the exact matching um that was actually a case where implementors actually rather than just complain to",
    "start": "2633480",
    "end": "2639160"
  },
  {
    "text": "the standard they actually like implemented it themselves and then got it through and then that's why it sailed to the committee and one meeting and everybody's happy um but yeah so that",
    "start": "2639160",
    "end": "2647040"
  },
  {
    "text": "answer your question yes okay uh other yes so um in this case could we just",
    "start": "2647040",
    "end": "2654119"
  },
  {
    "text": "have five operators for three functions just explicitly say if you have double and two then just use",
    "start": "2654119",
    "end": "2661480"
  },
  {
    "text": "MLF to basically Force the comp to do the conversion do anyway",
    "start": "2661480",
    "end": "2667760"
  },
  {
    "text": "yes that is something that you can do I I don't explain that here but yes um because I am going to be proposing this",
    "start": "2667760",
    "end": "2674280"
  },
  {
    "text": "to see eventually right I have to write the whole all the spec and all the wording and that's part of it that's in there it's that you can you can write",
    "start": "2674280",
    "end": "2681000"
  },
  {
    "text": "three functions then you can kind of cheat your way into doing conversions by just defining a bunch of operators that call the other that will call the",
    "start": "2681000",
    "end": "2687440"
  },
  {
    "text": "function that will just naturally do a narrowing conversion or whatever um but again to be explicit like you have to",
    "start": "2687440",
    "end": "2692800"
  },
  {
    "text": "write it all out right so if they're if they're unrelated types right you'll have to write out all the functions yourself sure but you know yes you can",
    "start": "2692800",
    "end": "2698960"
  },
  {
    "text": "write three functions and then you know just add the double ones that call the float ones or whatever however you would",
    "start": "2698960",
    "end": "2704640"
  },
  {
    "text": "like to to go about that okay any more",
    "start": "2704640",
    "end": "2712079"
  },
  {
    "text": "questions same question okay all right great okay so you know is there room for",
    "start": "2712079",
    "end": "2717440"
  },
  {
    "text": "argument promotion or inur promotion which is kind of what's been noticed here and it's like yeah the perhaps there's some room for that but again we're not really going to get into it",
    "start": "2717440",
    "end": "2723240"
  },
  {
    "text": "we're kind of just going to stick with exact type based matching because that's kind of the simplest and the good thing about exact type base matching is that",
    "start": "2723240",
    "end": "2728599"
  },
  {
    "text": "later on you can kind of tack the promotion stuff onto it later and it's like not going to break anybody it'll just make code that wasn't working",
    "start": "2728599",
    "end": "2734520"
  },
  {
    "text": "before start working again so this is kind of like how you do standardization right you kind of you convin people like oh no we're making a small system that",
    "start": "2734520",
    "end": "2740480"
  },
  {
    "text": "won't break anything and then you're like We'll add it later and then you know maybe you get to adding it maybe you you know decide you're going to go",
    "start": "2740480",
    "end": "2745960"
  },
  {
    "text": "uh horseback riding into the mountains and never come back um but that actually takes care of",
    "start": "2745960",
    "end": "2751480"
  },
  {
    "text": "implicit conversions but now we get to a very interesting one which is destructors and RI",
    "start": "2751480",
    "end": "2757720"
  },
  {
    "text": "um this one is actually a doozy right because it acts because this system is actually very hard to replace but first",
    "start": "2757720",
    "end": "2765000"
  },
  {
    "text": "before we get into that let's do a brief overview I'm sure most of you know about this but RI what is it right it's in C++",
    "start": "2765000",
    "end": "2771000"
  },
  {
    "text": "it's the ability to make an object that will capture something um hold on to that resource and then when the object",
    "start": "2771000",
    "end": "2779000"
  },
  {
    "text": "dies it uh invokes this the structor and you can do anything in the structure right so the Constructor will be able to",
    "start": "2779000",
    "end": "2784240"
  },
  {
    "text": "constr will be able to create something um and it sets the classes in variance and the structures in variance and set",
    "start": "2784240",
    "end": "2790520"
  },
  {
    "text": "member variables and whatever else it needs to do and then when the structure invokes it's supposed to be a undo mechanism right so if you allocated",
    "start": "2790520",
    "end": "2796960"
  },
  {
    "text": "something you're supposed to deallocate something if you grabb a file resource you're supposed to free the you're supposed to release the file resource or",
    "start": "2796960",
    "end": "2802440"
  },
  {
    "text": "if you grab a mutex you're supposed to release if you lock the mut supposed to unlock it so on and so forth right it's a general purpose undo mechanism that's",
    "start": "2802440",
    "end": "2808720"
  },
  {
    "text": "exactly what RI is right you do something here you can undo it down here right and it's guaranteed that if you",
    "start": "2808720",
    "end": "2814440"
  },
  {
    "text": "successfully do the thing up here by the time you break out of here unless you call like long jump or something and or do like a inline assembly to break out",
    "start": "2814440",
    "end": "2821760"
  },
  {
    "text": "right you're guaranteed that every every any way that you can return or break or uh go to out of that block that variable",
    "start": "2821760",
    "end": "2829400"
  },
  {
    "text": "when it's destroyed will Calla us Destructor right so again it's a general purpose undo mechanism right we don't really have that in C it's also",
    "start": "2829400",
    "end": "2835520"
  },
  {
    "text": "something I'm also working on uh to fix but not quite yet so why does this matter right so",
    "start": "2835520",
    "end": "2843440"
  },
  {
    "text": "let's imagine like we have a a big instructor right a big instructure C and it has some unsend long long data and a",
    "start": "2843440",
    "end": "2849599"
  },
  {
    "text": "stood Vector right so this is the you know basically just a growable array of data we can stuff some stuff we can put",
    "start": "2849599",
    "end": "2855319"
  },
  {
    "text": "stuff in it and you can also add and we just have this this uh big in operator plus add right so this is C++ code",
    "start": "2855319",
    "end": "2861319"
  },
  {
    "text": "right so what happens if we try to do the same thing in C right so you know let's say we have an allocator of some",
    "start": "2861319",
    "end": "2867559"
  },
  {
    "text": "kind we you know we're trying to replicate what the feeling for uh uh",
    "start": "2867559",
    "end": "2873880"
  },
  {
    "text": "what the stood Vector is we're we're kind of cheating because we don't keep the size here we're using other ways to track that but we have an allocator we",
    "start": "2873880",
    "end": "2879319"
  },
  {
    "text": "have the data we have a pointer to the data and we're going to kind of allocate the data in the structure we're going to keep track of it and then we're going to",
    "start": "2879319",
    "end": "2884839"
  },
  {
    "text": "destroy it when we need to right so we have a big in make big in which just takes an allocator and then we take an",
    "start": "2884839",
    "end": "2890559"
  },
  {
    "text": "unsigned long log of initial value right very simple stuff um and then we have a void destroy bigin right um where we uh",
    "start": "2890559",
    "end": "2897960"
  },
  {
    "text": "take a big in by pointer and then we just you know kill the insid right we destroy the data we you know un we zero",
    "start": "2897960",
    "end": "2903880"
  },
  {
    "text": "out the allocator whatever um so then we make an ad function right so remember we",
    "start": "2903880",
    "end": "2908920"
  },
  {
    "text": "have that that function operator split we have the big and AD and then we have you know a big and ad uh operator that's",
    "start": "2908920",
    "end": "2915240"
  },
  {
    "text": "an actual plus that we can use to do this stuff right so let's try and use it right so we have uh limits. H we're",
    "start": "2915240",
    "end": "2923200"
  },
  {
    "text": "going to make two bigs A and B we're going to make one that has we have some Global allocator somewhere just called",
    "start": "2923200",
    "end": "2929240"
  },
  {
    "text": "aloc um We're going to take uh you know three uh integers of three billion um",
    "start": "2929240",
    "end": "2935799"
  },
  {
    "text": "and we're going to also take you Max for a and b and we're going to make big in out of those right and then we have big in C where we do a plus b plus a right",
    "start": "2935799",
    "end": "2944480"
  },
  {
    "text": "and then you know to make sure that you know we're we're good citizens in C we always clean up our stuff right so we have big and Destroy CB and a right so",
    "start": "2944480",
    "end": "2951400"
  },
  {
    "text": "we've cleaned up everything we've created a bunch of stuff we've done some temporary work and we we've destroyed everything right what is wrong with",
    "start": "2951400",
    "end": "2958119"
  },
  {
    "text": "this what is wrong with this image what is wrong with this",
    "start": "2958119",
    "end": "2964078"
  },
  {
    "text": "code yes there is a big that you cannot see right because we do a plus b plus a",
    "start": "2964599",
    "end": "2972520"
  },
  {
    "text": "we have created a temporary and this temporary exists right at that line",
    "start": "2972520",
    "end": "2977720"
  },
  {
    "text": "right at the a plus b plus a so whether you do B plus a or a plus b first you do",
    "start": "2977720",
    "end": "2982760"
  },
  {
    "text": "that first right you do that binary operation first because again you do them two at a you do two at a time right so you do a plus b you get a B you get a",
    "start": "2982760",
    "end": "2989280"
  },
  {
    "text": "temporary and so we're just going to kind of annotate this with the Double uncore C like Pretend This a generated code right so we have a big in of double",
    "start": "2989280",
    "end": "2995200"
  },
  {
    "text": "underscore C 0 and that's a plus b that's our first temporary we get a big",
    "start": "2995200",
    "end": "3001480"
  },
  {
    "text": "int C which is the thing that was in our original source code we do Dore c0 plus a right and this is like this is",
    "start": "3001480",
    "end": "3008400"
  },
  {
    "text": "actually kind of like what my my my compiler that I wrote and was was generating right we have this generated",
    "start": "3008400",
    "end": "3014200"
  },
  {
    "text": "code that does the next step that finally assigns the C you do C 0 plus a right and then you destroy all of the",
    "start": "3014200",
    "end": "3020200"
  },
  {
    "text": "bigs except c0 C 0 is still there c0",
    "start": "3020200",
    "end": "3025359"
  },
  {
    "text": "still has data C 0 has allocated and now you have a memory leak because you've",
    "start": "3025359",
    "end": "3030520"
  },
  {
    "text": "attempted to use this this data structure that allocates its own data but",
    "start": "3030520",
    "end": "3036960"
  },
  {
    "text": "actually didn't properly destroy itself at the end right and so this is the whole purpose behind destructors and",
    "start": "3036960",
    "end": "3043160"
  },
  {
    "text": "raai right because the object itself has a concept of when it goes in and out of scope it can successfully call Big in",
    "start": "3043160",
    "end": "3050079"
  },
  {
    "text": "Destroy on itself right but we can't do that here because this is C we don't",
    "start": "3050079",
    "end": "3056000"
  },
  {
    "text": "have that mechanism ISM now there are many ways to handle this right you could use an arena or",
    "start": "3056000",
    "end": "3061960"
  },
  {
    "text": "specialized allocator where you mark the beginning of a block and an end of a block and so everything that's allocated between the two markings just gets",
    "start": "3061960",
    "end": "3068160"
  },
  {
    "text": "obliterated when you go to the end of the block right there's all sorts of techniques that people use very frequently in see specifically around",
    "start": "3068160",
    "end": "3073559"
  },
  {
    "text": "Arena allocators right to solve this problem right um garbage collection and R counting style um types are also",
    "start": "3073559",
    "end": "3080160"
  },
  {
    "text": "available in C they do this a lot actually if you go for example in GCC the literal code base itself um they",
    "start": "3080160",
    "end": "3085599"
  },
  {
    "text": "have a huge garbage colle right Chrome with Miracle pointer it's a cs+ code base but they have a garbage collector that's sitting behind his stuff that",
    "start": "3085599",
    "end": "3090920"
  },
  {
    "text": "does ref counting and everything else right A lot of large C and cs+ code bases will literally rely on a garbage",
    "start": "3090920",
    "end": "3096760"
  },
  {
    "text": "collector or something of that nature to kind of make these kinds of problems just kind of quietly go away obviously a lot more in C than in",
    "start": "3096760",
    "end": "3103400"
  },
  {
    "text": "C++ um but none of these Solutions are really as automatic as you have them in cs+ right in cs+ with chrome with with",
    "start": "3103400",
    "end": "3110040"
  },
  {
    "text": "the Chrome code base with Miracle pointer right all that stuff happens in its construct and it D structures and that's how it knows what to do right",
    "start": "3110040",
    "end": "3116160"
  },
  {
    "text": "whereas see you have to separate that from the object itself because you can't attach that information there um and I",
    "start": "3116160",
    "end": "3124240"
  },
  {
    "text": "hate to be this kind of person um myself but like is this really a hidden blessing right so like it naturally",
    "start": "3124240",
    "end": "3130599"
  },
  {
    "text": "encourages operators for simple stack based types that don't do any allocation and it naturally discourages complex",
    "start": "3130599",
    "end": "3136680"
  },
  {
    "text": "heat based types right and so maybe that's a win-win for the SE Community right for the cs+ community they'd hate",
    "start": "3136680",
    "end": "3141760"
  },
  {
    "text": "this right they'd be like this is awful I hate this I want my big in type with my data inside and everything just",
    "start": "3141760",
    "end": "3146839"
  },
  {
    "text": "beautiful class it's all encapsulated and everything's beautiful and perfect and I have private with all the members and public with a beautiful interface",
    "start": "3146839",
    "end": "3152160"
  },
  {
    "text": "and they they would hate this but the c community right maybe they'd actually prefer it this way maybe they'd prefer it if they you know you have to go the",
    "start": "3152160",
    "end": "3158760"
  },
  {
    "text": "extra mile to make an allocator work with an arena allocator or whatever just so you can use these operators right",
    "start": "3158760",
    "end": "3165559"
  },
  {
    "text": "so it's not really a solve problem iny right um obviously because we don't have",
    "start": "3165559",
    "end": "3171119"
  },
  {
    "text": "objects that can track their own construction and destruction we can't really solve this problem but",
    "start": "3171119",
    "end": "3176960"
  },
  {
    "text": "maybe that's just fine for the SE Community maybe that's the only things they want are VC twos and they don't want bigs",
    "start": "3176960",
    "end": "3183480"
  },
  {
    "text": "right arguably that's not true because you can CC libraries where they do big in things right and they have big you",
    "start": "3183480",
    "end": "3189319"
  },
  {
    "text": "know big in structures and everything um but you know this is kind of like the",
    "start": "3189319",
    "end": "3194359"
  },
  {
    "text": "where we're at right now we can't get a full we can't get a guaranteed fully safe oper you know oper operator type",
    "start": "3194359",
    "end": "3201319"
  },
  {
    "text": "operator uh feature that also works in this way because of these Temporaries that are get created right",
    "start": "3201319",
    "end": "3208440"
  },
  {
    "text": "okay so that kind of takes care of the destructors in REI stuff right we're kind of just saying well it's a win because you know C yay um which is a bit",
    "start": "3208760",
    "end": "3215839"
  },
  {
    "text": "silly but that's kind of where we're at um so now we have references and references uh are a bit interesting",
    "start": "3215839",
    "end": "3222319"
  },
  {
    "text": "because they're basically just pointers but they're not supposed to be null right um and that's like the big the big cell um but it's also a little bit more",
    "start": "3222319",
    "end": "3228440"
  },
  {
    "text": "important than that right um references were actually introduced in the cs+ very specifically to help with operators right so when you have assignment",
    "start": "3228440",
    "end": "3234240"
  },
  {
    "text": "operators and things like that um you were supposed to you know kind of use these references so that you don't aren't constantly copying right um they",
    "start": "3234240",
    "end": "3242240"
  },
  {
    "text": "also gave shape to existing C syntax right so in C you can do something like pointer you know and then index it at an",
    "start": "3242240",
    "end": "3248520"
  },
  {
    "text": "ID at an at an index and then set it to five right and it's like this is like technically a reference but like you",
    "start": "3248520",
    "end": "3253960"
  },
  {
    "text": "can't you can't hold the thing that comes out of pointer sub you know uh uh subscripted with by idx right you can't",
    "start": "3253960",
    "end": "3260520"
  },
  {
    "text": "actually touch that thing it's not real right like you have to either directly assign into it or you lose the ability",
    "start": "3260520",
    "end": "3266079"
  },
  {
    "text": "to like assign into that slot again right if you you can't hold on to the reference right but in C plus you can",
    "start": "3266079",
    "end": "3271400"
  },
  {
    "text": "you can make an uh you know an inch reference to poter idx and then you can hold on to that it reference and start",
    "start": "3271400",
    "end": "3276520"
  },
  {
    "text": "doing stuff to it right and it'll work naturally right that means you can pass it into functions and you know return it and stuff like that",
    "start": "3276520",
    "end": "3283160"
  },
  {
    "text": "right um so how do we handle this for C operators well we actually just do a",
    "start": "3283160",
    "end": "3288599"
  },
  {
    "text": "little bit of a a kind of a hack and not really a hack but like we have references and that we have pointers",
    "start": "3288599",
    "end": "3293720"
  },
  {
    "text": "right pointers are technically references just that they can be null so obviously people try to avoid them when they don't have null in the mix but we",
    "start": "3293720",
    "end": "3300680"
  },
  {
    "text": "don't have references in C so what we do for C is that well we'll just have",
    "start": "3300680",
    "end": "3305960"
  },
  {
    "text": "operators that take things by by by pointer right um so in that way you know if you have a very large structure right",
    "start": "3305960",
    "end": "3313040"
  },
  {
    "text": "you don't have to kind of keep copying it all on the stack right now obviously any optimizing compiler will see that you're copying this huge you know uh",
    "start": "3313040",
    "end": "3319880"
  },
  {
    "text": "structure on the stack and kind of working on it over and over again so they'll kind of try to reduce the number of copies but it still would be nice if",
    "start": "3319880",
    "end": "3325200"
  },
  {
    "text": "you the program had control over that the same way in C++ where you have references you can control that very explicitly by just writing The Operators",
    "start": "3325200",
    "end": "3331920"
  },
  {
    "text": "the way you want to and so the way we're doing this is you have to write another",
    "start": "3331920",
    "end": "3337760"
  },
  {
    "text": "function because of course you do because it's a c um but we write another function ml ref vect to add and this one",
    "start": "3337760",
    "end": "3343280"
  },
  {
    "text": "takes the results the left and the right types all by pointer and oh it should",
    "start": "3343280",
    "end": "3349640"
  },
  {
    "text": "actually return void my bad but uh the operator declaration for this just has",
    "start": "3349640",
    "end": "3355319"
  },
  {
    "text": "the same stuff except that right after the plus we have a little Amper sand and what that means is take the address of",
    "start": "3355319",
    "end": "3360359"
  },
  {
    "text": "the arguments and Temporaries that we're passing through these functions right um and so that allows you to have these you",
    "start": "3360359",
    "end": "3367240"
  },
  {
    "text": "know kind of various Temporaries and prevent having um a constant churning of the stack when you're making a bunch of",
    "start": "3367240",
    "end": "3373440"
  },
  {
    "text": "operations yes AR uh what do you mean oh only do it for one argument um no I have not",
    "start": "3373440",
    "end": "3380280"
  },
  {
    "text": "designed it like that um the problem with that was that it was a little bit complicated to specify which was meant",
    "start": "3380280",
    "end": "3386480"
  },
  {
    "text": "to be the pointer and which was not meant to be the pointer um it was kind of a headache to figure out how to do",
    "start": "3386480",
    "end": "3392559"
  },
  {
    "text": "that exactly there are some syntactic options I can use to get that but it has like diminishing returns right almost so",
    "start": "3392559",
    "end": "3399160"
  },
  {
    "text": "either you want them all to be a poter or or you don't and that covers like 90% of use cases but like there are cases where it's like okay I just want the",
    "start": "3399160",
    "end": "3404680"
  },
  {
    "text": "arguments as like values but then I want a reference to the result right so I can just write into the result directly um",
    "start": "3404680",
    "end": "3412119"
  },
  {
    "text": "but we didn't the proposal I'm writing is going to cover that at least not at first there is thankfully room to grow for the proposal I'm writing so that we",
    "start": "3412119",
    "end": "3418280"
  },
  {
    "text": "don't actually have to suffer that um but that's kind of the idea behind how",
    "start": "3418280",
    "end": "3423319"
  },
  {
    "text": "this works and with that that's a full design right we've managed to actually knock",
    "start": "3423319",
    "end": "3429960"
  },
  {
    "text": "off every single kind of thing that comes with c and kind of create like a sort of working prototype of this thing",
    "start": "3429960",
    "end": "3436920"
  },
  {
    "text": "in C for how you would have operators right without name mangling without overloading without name lookup without all these other things right and so now",
    "start": "3436920",
    "end": "3443880"
  },
  {
    "text": "that we have this full design I I was in this presentation I was kind of Li to some of the details right some obvious restrictions are necessary right like",
    "start": "3443880",
    "end": "3449280"
  },
  {
    "text": "obviously you shouldn't be able to write like operator Plus in int right you can't like override the basic types",
    "start": "3449280",
    "end": "3455400"
  },
  {
    "text": "right that'd be a little bit silly although you kind of want to because you know you could like instead of having undefined behavior for all stuff you",
    "start": "3455400",
    "end": "3460599"
  },
  {
    "text": "kind of want to make it all well-defined behavior and that would be really cool but like it's not not part of the initial discussion yet",
    "start": "3460599",
    "end": "3466559"
  },
  {
    "text": "unfortunately um pointers obviously count as viil types so you can't obviously overid pointer operations like",
    "start": "3466559",
    "end": "3472119"
  },
  {
    "text": "that um and of course you know in this presentation I didn't really explore any of the special scope hoping we can do um",
    "start": "3472119",
    "end": "3477280"
  },
  {
    "text": "that would actually make some of the uh overriding of basic operators work um but that's something that I can talk",
    "start": "3477280",
    "end": "3482599"
  },
  {
    "text": "about later uh there was a",
    "start": "3482599",
    "end": "3486559"
  },
  {
    "text": "question yes so the reason that you can't um and this is what I was talking about with the the syntax from oh from",
    "start": "3490680",
    "end": "3497760"
  },
  {
    "text": "here um the figure out which one of these the pointers like if you want to say like ml V 2 Star and like Mark one",
    "start": "3497760",
    "end": "3505000"
  },
  {
    "text": "as a pointer and not the other right then it becomes a question of like how do you know which argument is supposed to be the pointer one how you know stuff",
    "start": "3505000",
    "end": "3511039"
  },
  {
    "text": "like that um how which one are you supposed to be pass supposed to be passed by value and how do you know that you're not accidentally overriding like",
    "start": "3511039",
    "end": "3517319"
  },
  {
    "text": "oh I overrode Plus for like a pointer and so now every time you try to increment a pointer it just calls in operator instead right and so that's why",
    "start": "3517319",
    "end": "3524359"
  },
  {
    "text": "you can't override this stuff on pointers directly so the same way you can't override uh for INT int you can't",
    "start": "3524359",
    "end": "3530599"
  },
  {
    "text": "overwrite it for in star or uh my struct star or whatever else right because you pointer operations are still a built-in",
    "start": "3530599",
    "end": "3537200"
  },
  {
    "text": "type even though it's a pointer to your type right does that make sense okay yeah yes no maybe okay all",
    "start": "3537200",
    "end": "3545039"
  },
  {
    "text": "right um so the good news is that it means we solve the core tension so you know when you have these people fighting",
    "start": "3545039",
    "end": "3551240"
  },
  {
    "text": "about functions and operators right and I come in and I say both that means that rather than getting my my butt handed to",
    "start": "3551240",
    "end": "3557680"
  },
  {
    "text": "me you know maybe we can be a little bit happier and make progress together um and that's my talk thank you very much",
    "start": "3557680",
    "end": "3567200"
  },
  {
    "text": "okay so does anyone have any other like questions or comments or things they'd like to ask about oh yes you",
    "start": "3570240",
    "end": "3578880"
  },
  {
    "text": "mention yes adduct",
    "start": "3579799",
    "end": "3585280"
  },
  {
    "text": "operator so the question was you know can we add the the the destructor calls to the operator syntax like literally",
    "start": "3585280",
    "end": "3590839"
  },
  {
    "text": "just make an operator like squiggly for like destructors right um and I actually wrote a this question comes up a lot and",
    "start": "3590839",
    "end": "3597440"
  },
  {
    "text": "so I actually wrote a blog post about this the the short answer is the short answer is yes the long answer is yes but",
    "start": "3597440",
    "end": "3604599"
  },
  {
    "text": "you have a lot of work to do and what I mean by that is that c does not have an object model right it doesn't understand",
    "start": "3604599",
    "end": "3610200"
  },
  {
    "text": "like creation destruction um if you call exit it's not required to like clean up",
    "start": "3610200",
    "end": "3615880"
  },
  {
    "text": "anything if you uh long jump or even go too other of stuff there like no nothing in C has a concept of like objects or",
    "start": "3615880",
    "end": "3623640"
  },
  {
    "text": "the object model or like how to create stuff they doesn't have place new doesn't have any of that so when you get into like destructors like it seems",
    "start": "3623640",
    "end": "3630200"
  },
  {
    "text": "simple to like oh I'll just add Destructor to this and I'll have the ability to do the thing that I want to do but then you have a bunch of other",
    "start": "3630200",
    "end": "3635520"
  },
  {
    "text": "very pressing questions about like how do you handle having an object model in a language that never had an object",
    "start": "3635520",
    "end": "3641760"
  },
  {
    "text": "model and that's actually very very like it's very difficult to do thoroughly",
    "start": "3641760",
    "end": "3647720"
  },
  {
    "text": "throughout the language um and so I mean I wrote a blog post if you go to the phd. it's it's kind of ranty because I",
    "start": "3647720",
    "end": "3652920"
  },
  {
    "text": "wrote it because I was in anger because we were discussing operators and people are like well why don't you just put destructors on it like put RI in C just",
    "start": "3652920",
    "end": "3660319"
  },
  {
    "text": "just slap some Constructors and destruct there it'll be simple it'll be easy and then it's like no you got to slow your",
    "start": "3660319",
    "end": "3665799"
  },
  {
    "text": "roll it's it's it's a little B more complicated than that um but yeah so I mean you can read the blog post if you",
    "start": "3665799",
    "end": "3671119"
  },
  {
    "text": "want again like this a little ranty but you know it it should be fun um other question yes you do it just for the",
    "start": "3671119",
    "end": "3678119"
  },
  {
    "text": "temporar created so invoke destructors but only",
    "start": "3678119",
    "end": "3684119"
  },
  {
    "text": "for the Temporaries uh yes we could do that but again that's like you're getting like a partial",
    "start": "3684119",
    "end": "3689240"
  },
  {
    "text": "system right like you have the structures but you only invoc them in this case right like I understand where what you're coming from and like why it would be helpful but um you know it's",
    "start": "3689240",
    "end": "3695960"
  },
  {
    "text": "one of those things where it's like having the system there like either you should commit to like making a real system that's integrated with the",
    "start": "3695960",
    "end": "3701480"
  },
  {
    "text": "language or you should just kind of like leave it alone right um again I I it's",
    "start": "3701480",
    "end": "3707160"
  },
  {
    "text": "it's very tempting in past be like yeah we'll just have to structures for this one case right like it's very small and simple and tempting but it's not quite",
    "start": "3707160",
    "end": "3713319"
  },
  {
    "text": "where you want to be you know um yes uh you first I guess you have same",
    "start": "3713319",
    "end": "3720440"
  },
  {
    "text": "problem with the temporar have operators function basically change two add functions together and just pass it",
    "start": "3720440",
    "end": "3727440"
  },
  {
    "text": "temporary from the first call or from the inner call to the outer call they would have basically the same problem",
    "start": "3727440",
    "end": "3734240"
  },
  {
    "text": "yeah and so I think in this case the natural sea style of dealing with these",
    "start": "3734240",
    "end": "3740400"
  },
  {
    "text": "types is One Step at a Time Capture your Temporaries and clean them at manually so the",
    "start": "3740400",
    "end": "3746720"
  },
  {
    "text": "toer yes but like that's that's a choice that we'd you'd have to let the the programmer make right it's just that you",
    "start": "3746720",
    "end": "3752680"
  },
  {
    "text": "have to you know in in being thorough you have to point out that like hey this this natural syntax you're doing with a big in right might not behave the way",
    "start": "3752680",
    "end": "3759640"
  },
  {
    "text": "you expect it to right but like yes if you make a function call and you chain three of these things together right um",
    "start": "3759640",
    "end": "3765000"
  },
  {
    "text": "you're going to drop some big in on the floor you're going to leak some memory right and so obviously the conventional wisdom is don't do that right and then",
    "start": "3765000",
    "end": "3770920"
  },
  {
    "text": "you know see this is where see people coming like well if you were just smarter and you test it harder it' be better and you know stuff like that that",
    "start": "3770920",
    "end": "3776119"
  },
  {
    "text": "but um you know we're when you're trying to design things that are a little bit safer a little B more foolproof right",
    "start": "3776119",
    "end": "3782119"
  },
  {
    "text": "you kind of want to avoid or attempt to avoid some of the problems so you know again we don't have a good solution for",
    "start": "3782119",
    "end": "3787760"
  },
  {
    "text": "destructors in RI in in C um specifically for objects when they're being destroyed um and so that's kind of",
    "start": "3787760",
    "end": "3793400"
  },
  {
    "text": "why we just have the problem right add that problem with operators you just keep it you have the same problem right",
    "start": "3793400",
    "end": "3799799"
  },
  {
    "text": "you have the same problem um it's just that again people kind of expect more out of operators they want they they want it like again we we had this",
    "start": "3799799",
    "end": "3806079"
  },
  {
    "text": "discussion in the committee and people were like well I don't like it that I can create this gigantic foot gun it's like okay but you can you can do that",
    "start": "3806079",
    "end": "3812200"
  },
  {
    "text": "the normal way too and it's like well I still don't like it for operator right like they're holding it to a higher standard than they would hold the rest of the language and that's natural",
    "start": "3812200",
    "end": "3818319"
  },
  {
    "text": "because you're trying to put a new feature in that that and sees a conservative language so they'll you know they'll try to kill you you know",
    "start": "3818319",
    "end": "3823839"
  },
  {
    "text": "you know if you you change their precious language any any deviation from c89 is is an F front to kernigan and Richie you know and stuff like that but",
    "start": "3823839",
    "end": "3831440"
  },
  {
    "text": "um it's not again yes it is not a new vulnerability it's not a new problem but it's still one that you know I would",
    "start": "3831440",
    "end": "3838480"
  },
  {
    "text": "expect that a rookie would make that mistake with a big in right they would start try to add stuff together and it would fail right whereas if you show",
    "start": "3838480",
    "end": "3844400"
  },
  {
    "text": "them documentation where you have to do each thing step individually right like there's less less of a chance they'd",
    "start": "3844400",
    "end": "3850119"
  },
  {
    "text": "screw it up right again it's still like up it's it's it's up in the air it's up to you yeah",
    "start": "3850119",
    "end": "3856720"
  },
  {
    "text": "question uh you could right so remember how I did that thing where I you know I did the floats and I did the doubles",
    "start": "3862160",
    "end": "3868400"
  },
  {
    "text": "well you would just do the checked in but then you do the checked in with the structures that return the Boolean right",
    "start": "3868400",
    "end": "3874279"
  },
  {
    "text": "and so you'd stack them all together like a million times right um and that's how you would solve that problem of course You' you run the risk of the same",
    "start": "3874279",
    "end": "3880599"
  },
  {
    "text": "thing with big int like you accidentally ignored an a flag that says hey overflow did you want to stop do you want you",
    "start": "3880599",
    "end": "3886760"
  },
  {
    "text": "want to check me you want to do anything with that and it's like you just ran over that information right you just dropped it on the floor um so again it's",
    "start": "3886760",
    "end": "3892400"
  },
  {
    "text": "you you have to be careful with it obviously but you know again this is one of those things that they want any other",
    "start": "3892400",
    "end": "3897559"
  },
  {
    "text": "questions okay I won't keep you here I kept you guys a little longer but thank you I appreciate it",
    "start": "3897559",
    "end": "3903920"
  }
]