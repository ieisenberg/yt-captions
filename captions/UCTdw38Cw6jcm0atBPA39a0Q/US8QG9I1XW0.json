[
  {
    "start": "0",
    "end": "150000"
  },
  {
    "text": "all right hello everyone i think we might as well get get started if more people are arriving then just please",
    "start": "10960",
    "end": "16160"
  },
  {
    "text": "come in uh but I think I'm I might as well start on time uh so that because I have a lot of stuff to cover so um thank",
    "start": "16160",
    "end": "22640"
  },
  {
    "text": "you all for coming my name is Mark Seaman if you want to know more about me there's an about page there on blog.dk i should somehow see if I can",
    "start": "22640",
    "end": "30080"
  },
  {
    "text": "get rid of that mouse pointer there excuse me no let's see if that works no you just",
    "start": "30080",
    "end": "37520"
  },
  {
    "text": "have to live with that let's see if I can put it down here somewhere okay now you don't see it all right um so um I'm",
    "start": "37520",
    "end": "44480"
  },
  {
    "text": "also on Twitter at Plur if you think that's interesting i think Twitter is quite useful actually so I'd love",
    "start": "44480",
    "end": "50000"
  },
  {
    "text": "feedback there um so I'm going to talk about functional architecture today and specifically about these things called",
    "start": "50000",
    "end": "55600"
  },
  {
    "text": "pits of successes uh that I'm going to cover in just a moment and um if you're here and maybe you're a little bit",
    "start": "55600",
    "end": "61760"
  },
  {
    "text": "afraid that I'm going to talk about a lot of complicated you know sophisticated things um well to a degree",
    "start": "61760",
    "end": "68479"
  },
  {
    "text": "I am but I'm also not going to assume that you may have you know heard about those things and I'm also not going to",
    "start": "68479",
    "end": "74159"
  },
  {
    "text": "assume that you already know how to read and understand F code or Haskell code so even though I'm going to show you a",
    "start": "74159",
    "end": "80159"
  },
  {
    "text": "little bit of code I'm not assuming that you actually know how to read that so don't worry about that i'll talk you through the important points of that i'm",
    "start": "80159",
    "end": "86560"
  },
  {
    "text": "also going to show you a little a bit of C# code i assume that you understand that um so with that out of the way",
    "start": "86560",
    "end": "92880"
  },
  {
    "text": "let's just uh get started with talking about the pits of successes so",
    "start": "92880",
    "end": "97960"
  },
  {
    "text": "um imagine that you have some sort of goal that you need to uh to reach um in",
    "start": "97960",
    "end": "103200"
  },
  {
    "text": "your software development uh project and I'm not only just talking about some sort of feature that you that you need",
    "start": "103200",
    "end": "108240"
  },
  {
    "text": "to implement but you may have a higher goal of saying um I want to enable my codebase to be flexible and maintainable",
    "start": "108240",
    "end": "114960"
  },
  {
    "text": "and all of all of those things while I deliver features and I want it to be long-term maintainable so that I can",
    "start": "114960",
    "end": "121040"
  },
  {
    "text": "also deliver features um requested by by my business three years from now and and",
    "start": "121040",
    "end": "126320"
  },
  {
    "text": "not you know go to my stakeholders and ask for a rewrite which you know happens quite often so that's the sort of things",
    "start": "126320",
    "end": "133200"
  },
  {
    "text": "that I'm going to try to talk about today because that is basically what software architecture is about um that",
    "start": "133200",
    "end": "138959"
  },
  {
    "text": "those sorts of decisions also about scalability and all sorts of other things so on but all of those things",
    "start": "138959",
    "end": "144160"
  },
  {
    "text": "that actually what we call non-functional requirements um so you could imagine that you envision that",
    "start": "144160",
    "end": "150720"
  },
  {
    "start": "150000",
    "end": "355000"
  },
  {
    "text": "goal as having to be you know roll a boulder on up the top up to the top of a",
    "start": "150720",
    "end": "156239"
  },
  {
    "text": "tall hill so if you've ever done any if you've ever studied you know physics you know just classical Newtonian mechanics",
    "start": "156239",
    "end": "163680"
  },
  {
    "text": "you'll know that if you have to roll a boulder on top of a hill you'll need to exert some force in order to get it",
    "start": "163680",
    "end": "169040"
  },
  {
    "text": "there so you'll need to expend a lot of effort to actually roll the bolt up the hill and if you are you know able to",
    "start": "169040",
    "end": "175920"
  },
  {
    "text": "actually roll it all the way on top of the hill you can put it there and if you're very very you know precise in",
    "start": "175920",
    "end": "182080"
  },
  {
    "text": "doing that you may actually achieve an equilibrium and it stays there but you probably also realize that this",
    "start": "182080",
    "end": "187760"
  },
  {
    "text": "equilibrium is extremely unstable so if you don't place it exactly in the right spot or if you have some sort of",
    "start": "187760",
    "end": "193680"
  },
  {
    "text": "disturbance to the system it's going to start trying to roll down one of the sides and you have to you know you know",
    "start": "193680",
    "end": "199680"
  },
  {
    "text": "exert more effort in order to prevent it from doing that uh so you have to be constantly vigilant and keep watch of",
    "start": "199680",
    "end": "206800"
  },
  {
    "text": "what it is that's going on in order to be able to achieve your goal your goal is not something you it's not something",
    "start": "206800",
    "end": "212640"
  },
  {
    "text": "you only achieve but you also something that you need to keep on watching um you know whether it's it stays there and and",
    "start": "212640",
    "end": "220080"
  },
  {
    "text": "one of the problems with that is you know this is what I often feel it's like to be a software architect or a lead",
    "start": "220080",
    "end": "225760"
  },
  {
    "text": "developer on a team is you have to be constantly vigilant because if um if you",
    "start": "225760",
    "end": "231280"
  },
  {
    "text": "just look away for a moment you know if you are sick for a couple of days or if you go on vacation or if you just go to",
    "start": "231280",
    "end": "236799"
  },
  {
    "text": "too many meetings what's going to happen is that uh you know you just let it go for a moment and then it you know",
    "start": "236799",
    "end": "242799"
  },
  {
    "text": "everything rolls downhill again and all the effort that you expended uh on actually getting to that goal that is",
    "start": "242799",
    "end": "249200"
  },
  {
    "text": "basically wasted effort now and I you know I I feel like a lot of of software development feels like that or at least",
    "start": "249200",
    "end": "256000"
  },
  {
    "text": "that's what it used to feel like for me so um you know I spent like at least a decade doing object-oriented design and",
    "start": "256000",
    "end": "262720"
  },
  {
    "text": "and being all sorts of you know playing all sorts of different roles you know from an individual contributor to you",
    "start": "262720",
    "end": "268000"
  },
  {
    "text": "know a team lead to architect and and such things and uh you know I I did this",
    "start": "268000",
    "end": "274400"
  },
  {
    "text": "a lot where I was constantly you know looking out for things that could cause the boulder to roll downhill again in",
    "start": "274400",
    "end": "280479"
  },
  {
    "text": "order to to try to prevent that from happening and I sort of just uh you know you know I thought that that was just",
    "start": "280479",
    "end": "286720"
  },
  {
    "text": "what software development was all about this was just you know an intrinsic part of the of the uh of the game if we if",
    "start": "286720",
    "end": "293759"
  },
  {
    "text": "you will and then about five six years ago I started to you know learn about functional programming and I got",
    "start": "293759",
    "end": "300560"
  },
  {
    "text": "interested in this uh in functional programming for a lot of other reasons and the more I started writing you know",
    "start": "300560",
    "end": "306400"
  },
  {
    "text": "code with functional programming the more I realized that a lot of these things that were very very difficult in object-oriented design actually turns",
    "start": "306400",
    "end": "313520"
  },
  {
    "text": "out to be quite easy to do uh with functional programming it almost happens by itself so again if you can try to",
    "start": "313520",
    "end": "320479"
  },
  {
    "text": "re-imagine your goal and saying well it's not that you want to be on the top of a hill that's not your goal your goal",
    "start": "320479",
    "end": "326479"
  },
  {
    "text": "is just to reach an equilibrium you can say well let's try to invert this and say you just want to have an equilibrium",
    "start": "326479",
    "end": "332320"
  },
  {
    "text": "so you just roll your boulder down into the pit and it just you know automatically rolls down and stays there and even if you have a disturbance to",
    "start": "332320",
    "end": "338720"
  },
  {
    "text": "the system it's just you know settles back into an equilibrium again so this is what we call stable equilibrium and",
    "start": "338720",
    "end": "345039"
  },
  {
    "text": "this is really what functional programming feels like for me these days and I just wanted to share a little bit",
    "start": "345039",
    "end": "350160"
  },
  {
    "text": "with you why I think that is happening so I should preface this right away by",
    "start": "350160",
    "end": "356240"
  },
  {
    "start": "355000",
    "end": "500000"
  },
  {
    "text": "saying that um this talk is based on my experience with writing F code so F is a",
    "start": "356240",
    "end": "361759"
  },
  {
    "text": "one of those programming languages that have a nice logo as you can tell um which makes it much more cooler than the",
    "start": "361759",
    "end": "367600"
  },
  {
    "text": "other language um so um so so a lot of this these",
    "start": "367600",
    "end": "372639"
  },
  {
    "text": "experience that I'm going to talk about here today is based on my experience with doing F# programming and I've done lots of you know just playing around",
    "start": "372639",
    "end": "378479"
  },
  {
    "text": "fooling around with F but I've also written real production code that actually runs today in F as well so that",
    "start": "378479",
    "end": "384800"
  },
  {
    "text": "is certainly possible i'm also basing some of this talk on my experiences with",
    "start": "384800",
    "end": "389840"
  },
  {
    "text": "the fooling around with Haskell and um um Haskell is a programming language that I don't have production experience",
    "start": "389840",
    "end": "396639"
  },
  {
    "text": "with but I've you know played around with for quite a bit of time now um I need to say that these two",
    "start": "396639",
    "end": "403759"
  },
  {
    "text": "languages have a couple of things in common they're both statically typed functional programming languages and the",
    "start": "403759",
    "end": "409600"
  },
  {
    "text": "type systems that they use are what we call a Hindley Milner type system and the reason why I say that this is that",
    "start": "409600",
    "end": "416560"
  },
  {
    "text": "there are other programming languages other functional programming languages out there that do not belong to this",
    "start": "416560",
    "end": "421919"
  },
  {
    "text": "family of languages like um a very popular one is um is Scala that's run that runs on the JVM which is also",
    "start": "421919",
    "end": "428240"
  },
  {
    "text": "statically typed as far as I understand but it's not a Hindley Milner type system and you also have something like",
    "start": "428240",
    "end": "433919"
  },
  {
    "text": "closure which is dynamically typed and you have uh which is um sort of I don't",
    "start": "433919",
    "end": "439039"
  },
  {
    "text": "even understand if it has a type system or not you know every time I ask someone they say \"Yes it sort of has.\" And I",
    "start": "439039",
    "end": "444400"
  },
  {
    "text": "said \"What does that mean?\" You know \"It sort of has types.\" That's not really helpful uh but anyways um so you may",
    "start": "444400",
    "end": "450479"
  },
  {
    "text": "reach slightly different conclusions if you're talking about those languages instead of these languages but these are the languages that that I'm going to",
    "start": "450479",
    "end": "456479"
  },
  {
    "text": "talk about right okay so um so let's see what we can do here with these with these things here so I'm going to cover",
    "start": "456479",
    "end": "463039"
  },
  {
    "text": "three pits of success so the first one I'm going to cover is something called ports and adapters and I'll talk about what that is when we get there uh I'm",
    "start": "463039",
    "end": "470080"
  },
  {
    "text": "going to talk about services entities and value objects basically how do we think about data and behavior and uh",
    "start": "470080",
    "end": "476319"
  },
  {
    "text": "third I'm going to talk about testability which is really fun to talk about um so it's not that I only that",
    "start": "476319",
    "end": "482080"
  },
  {
    "text": "I've only identified three pits of success during my all the these years of working with functional programming i've",
    "start": "482080",
    "end": "487759"
  },
  {
    "text": "actually identified you know like eight or 10 of them but I don't have time to talk about all of them so I just picked",
    "start": "487759",
    "end": "492960"
  },
  {
    "text": "the ones that I thought was the most important ones and that is those three right so let's just get dive right",
    "start": "492960",
    "end": "500879"
  },
  {
    "start": "500000",
    "end": "780000"
  },
  {
    "text": "into talking about ports and adapters so ports and adapters is a well-known",
    "start": "500879",
    "end": "506599"
  },
  {
    "text": "well-escribed software architecture uh and it's a very well um it's it's a very",
    "start": "506599",
    "end": "513440"
  },
  {
    "text": "um it's a it's a pretty good architecture for doing enterprise software so I've written lots of code",
    "start": "513440",
    "end": "518719"
  },
  {
    "text": "using the port and adapters architecture it has various names so one of the names that it's known as is port and adapters",
    "start": "518719",
    "end": "524720"
  },
  {
    "text": "it's also known as hexagonal architecture um for reasons that remain unclear to me because it doesn't really",
    "start": "524720",
    "end": "530959"
  },
  {
    "text": "look particularly you know hexagonal this but and some people also call it the onion architecture because it you",
    "start": "530959",
    "end": "537040"
  },
  {
    "text": "know has concentric layers just like an onion uh and and in a sense you can say this is basically what we know as",
    "start": "537040",
    "end": "543200"
  },
  {
    "text": "layered application architecture done right uh so it's sort of like you know um it's a little bit of that also but it",
    "start": "543200",
    "end": "550080"
  },
  {
    "text": "you know it's related to that sort of architecture and I'm not trying to tell you that this architecture is bad i'm",
    "start": "550080",
    "end": "555440"
  },
  {
    "text": "just going to tell you that my experience with this architecture is that in OOD it's difficult to achieve",
    "start": "555440",
    "end": "561440"
  },
  {
    "text": "but actually the goal is great i really like this architecture because it solves a lot of problems basically what we're",
    "start": "561440",
    "end": "566959"
  },
  {
    "text": "trying to do with this architecture we're saying in the middle there the boxes in the middle represents your domain model your business logic this is",
    "start": "566959",
    "end": "574000"
  },
  {
    "text": "the stuff that you actually care about this is why you're building the software because you have some sort of business logic that is important to automate um",
    "start": "574000",
    "end": "582000"
  },
  {
    "text": "so this is actually what ought to you know deliver value to your organization and then you have you know layers that",
    "start": "582000",
    "end": "588080"
  },
  {
    "text": "protect that because you you need that business logic to you know interact with all sorts of real world systems like you",
    "start": "588080",
    "end": "594080"
  },
  {
    "text": "need to to draw graphical user interfaces you need to write things into databases you need to send emails and",
    "start": "594080",
    "end": "600000"
  },
  {
    "text": "all of those sorts of things but you don't want your business logic to be too dependent on all of those technical",
    "start": "600000",
    "end": "605680"
  },
  {
    "text": "concerns because they may change um so you want to protect uh you know the the",
    "start": "605680",
    "end": "611600"
  },
  {
    "text": "valuable parts of your software from all the incidentals all the technical details so that's basically what this sort of of application architecture",
    "start": "611600",
    "end": "618160"
  },
  {
    "text": "tries to achieve and that's perfectly fine my experience with this though is",
    "start": "618160",
    "end": "623360"
  },
  {
    "text": "that it's one it's like rolling that boulder up the hill is that in the sense that it it's really difficult just to",
    "start": "623360",
    "end": "629120"
  },
  {
    "text": "explain to a team of of software developers who's never heard about this before why you would want to do this",
    "start": "629120",
    "end": "634560"
  },
  {
    "text": "because it goes into a lot of things about you know the object u the design",
    "start": "634560",
    "end": "639760"
  },
  {
    "text": "principles of object-oriented design like the solid principles for example and you need to think about dependency injection and you need to think about",
    "start": "639760",
    "end": "646640"
  },
  {
    "text": "all of these things that you know in order to understand those things you have to read thick books about it you",
    "start": "646640",
    "end": "651839"
  },
  {
    "text": "Robert C martin who is the original person or the person who originally described the um the solid principles he",
    "start": "651839",
    "end": "658640"
  },
  {
    "text": "has a book called HR principles patterns and practices and this is 700 pages long",
    "start": "658640",
    "end": "664320"
  },
  {
    "text": "book that describe the solid principles and gives you examples of how that is and why it's interesting and so on you",
    "start": "664320",
    "end": "670399"
  },
  {
    "text": "know and I wrote a book about dependency injection which I think is a good book but it's 500 pages and you know the book",
    "start": "670399",
    "end": "676320"
  },
  {
    "text": "that these books are so big should be a telltale sign for us to say well if it",
    "start": "676320",
    "end": "683279"
  },
  {
    "text": "if we need that many pages to explain a concept Maybe we should start to think",
    "start": "683279",
    "end": "689040"
  },
  {
    "text": "about if there's a better way if is that really the best we can do so the first",
    "start": "689040",
    "end": "694640"
  },
  {
    "text": "problem with this is that it it really takes a lot of effort just rolling the boulder up the hill in the sense that you need to make everyone on a team",
    "start": "694640",
    "end": "701519"
  },
  {
    "text": "understand why it's important but then once you're there it's it's even more difficult to stay there because every",
    "start": "701519",
    "end": "708399"
  },
  {
    "text": "small disturbance into the system might actually destroy the entire system for example you know if I'm go if I go on",
    "start": "708399",
    "end": "714399"
  },
  {
    "text": "vacation or just sick for a couple of days maybe what's going to happen then is that there's some urgent issue in",
    "start": "714399",
    "end": "720079"
  },
  {
    "text": "your production system that you need to address so you go in and say well I you know in order to address this urgent",
    "start": "720079",
    "end": "725600"
  },
  {
    "text": "issue we'll just call the database directly from the domain model because um you know we know that we can't do",
    "start": "725600",
    "end": "731519"
  },
  {
    "text": "that but we'll fix it later okay and you know that later is never um and and that",
    "start": "731519",
    "end": "736639"
  },
  {
    "text": "just causes this thing to to you know unravel very quickly again so it's not really particularly you know",
    "start": "736639",
    "end": "743720"
  },
  {
    "text": "stable um so so it's not that it's not impossible to do with Java or C# um but",
    "start": "743720",
    "end": "749440"
  },
  {
    "text": "it's really really difficult to do now what about functional programming does functional programming help and it does",
    "start": "749440",
    "end": "755120"
  },
  {
    "text": "let's try to understand why that is but basically what I'm saying is not that the architecture is bad but basically",
    "start": "755120",
    "end": "760639"
  },
  {
    "text": "that just that it's difficult to achieve this architecture with the at least with the object-oriented languages that we",
    "start": "760639",
    "end": "766399"
  },
  {
    "text": "normally use whereas you know with functional programming it it sort of t tends to fall into this sort of",
    "start": "766399",
    "end": "771839"
  },
  {
    "text": "architecture all by itself so let's try to understand why that is so let's let's start to talk about what is the design",
    "start": "771839",
    "end": "777839"
  },
  {
    "text": "ideal of functional programming well in functional programming we really like these things called pure functions and",
    "start": "777839",
    "end": "784240"
  },
  {
    "start": "780000",
    "end": "1010000"
  },
  {
    "text": "why do we like pure functions we like pure functions because they're easy to reason about they are easy to manipulate",
    "start": "784240",
    "end": "790399"
  },
  {
    "text": "and they are they are you know easy to compose and they have all sorts of nice qualities about them it also turns out",
    "start": "790399",
    "end": "796240"
  },
  {
    "text": "they're easy to test for reasons that I'll explain later so um so we really like our pure functions that that is the",
    "start": "796240",
    "end": "803040"
  },
  {
    "text": "design ideal of a function you know functional programming um codebase so what is a a pure function we need to",
    "start": "803040",
    "end": "809519"
  },
  {
    "text": "understand that a pure function is a function first of all that is deterministic it always returns the same",
    "start": "809519",
    "end": "815120"
  },
  {
    "text": "output if you give it the same input the other thing about a pure function is that it has no side effects",
    "start": "815120",
    "end": "821760"
  },
  {
    "text": "um a side effect may be that you know you send an email it may be that you you know write files to disk you delete a",
    "start": "821760",
    "end": "828480"
  },
  {
    "text": "record from a database it may also just be that you change uh you know a value in memory uh so it might not be",
    "start": "828480",
    "end": "834320"
  },
  {
    "text": "something that involves IO but anything that is observable from outside of the function if it changes the state of of",
    "start": "834320",
    "end": "840160"
  },
  {
    "text": "of something outside of the function we call that a side effect so um it it needs to do neither of those it can't do",
    "start": "840160",
    "end": "847120"
  },
  {
    "text": "it can't do side effects it can't do nondeterminism if it's deterministic has no side effect we call it a pure",
    "start": "847120",
    "end": "852680"
  },
  {
    "text": "function so um so you probably go then but but side effects you know all",
    "start": "852680",
    "end": "857839"
  },
  {
    "text": "software development is is basically all about you know doing side effects you know when we create software we want to",
    "start": "857839",
    "end": "864480"
  },
  {
    "text": "you know print new UI on a screen of the user that's a side effect we want to send off emails that's a side effect we",
    "start": "864480",
    "end": "871440"
  },
  {
    "text": "want to put things into a database that's a side effect why would we ever you know be a how would we ever be able",
    "start": "871440",
    "end": "877040"
  },
  {
    "text": "to do something if we can only do pure functions and we never say that you can't that you can only do pure",
    "start": "877040",
    "end": "883279"
  },
  {
    "text": "functions we just say we like pure functions so we want to maximize how many pure functions we have but we",
    "start": "883279",
    "end": "889279"
  },
  {
    "text": "absolutely acknowledge that we also need to have impure functions because we need to write to databases we need to update",
    "start": "889279",
    "end": "895839"
  },
  {
    "text": "your user interface and we need to do all of those things we just say we prefer the pure functions because",
    "start": "895839",
    "end": "901040"
  },
  {
    "text": "they're easier to um develop they're easier to maintain so there's a couple of",
    "start": "901040",
    "end": "906480"
  },
  {
    "text": "relationship between those two things that you that you need to understand and first of all if you have a pure function",
    "start": "906480",
    "end": "911920"
  },
  {
    "text": "and you want to call another pure function from that pure function that is absolutely okay you can do that you know",
    "start": "911920",
    "end": "918320"
  },
  {
    "text": "it doesn't make your calling pure function more or less pure that it calls another pure function that's just a way of of composing things makes absolutely",
    "start": "918320",
    "end": "925160"
  },
  {
    "text": "sense if you have an impure function and you want to call another impure function from that impure function you can",
    "start": "925160",
    "end": "930880"
  },
  {
    "text": "absolutely do that doesn't change whether it's more or less impure that's possible you can also call a pure",
    "start": "930880",
    "end": "937279"
  },
  {
    "text": "function from an impure function you know if if the function is already impure it doesn't become more or less impure by calling pure functions and you",
    "start": "937279",
    "end": "944320"
  },
  {
    "text": "know pure function is something as simple as 2 plus two so you can definitely do you know 2 plus two equals",
    "start": "944320",
    "end": "949519"
  },
  {
    "text": "four even though you're in an impure context you're trying to save something into the database that's absolutely possible you know going the other way on",
    "start": "949519",
    "end": "956320"
  },
  {
    "text": "the other hand is not possible and there are various ways it's not possible in in",
    "start": "956320",
    "end": "961920"
  },
  {
    "text": "H hasll for example it wouldn't even compile i'll show you what that looks like in a moment in F it's not that you",
    "start": "961920",
    "end": "968399"
  },
  {
    "text": "can't sort of do it if you imagine that you have a function uh that's pure at the moment but then you want to change",
    "start": "968399",
    "end": "974480"
  },
  {
    "text": "the implementation a little bit and and the change you introduce is a call to an impure function what's actually going to",
    "start": "974480",
    "end": "980399"
  },
  {
    "text": "happen then is it it will compile but that you know your function that was you know pure before now also becomes impure",
    "start": "980399",
    "end": "986399"
  },
  {
    "text": "because it's calling into another impure function so it just you know moves from one um place to the other one you could",
    "start": "986399",
    "end": "992000"
  },
  {
    "text": "you could say um so you can't go the other way you can't call impure code from pure code that that's really",
    "start": "992000",
    "end": "998000"
  },
  {
    "text": "important let's try to see an example why what that would look like and why that is important because this is basically the expla explanation for why",
    "start": "998000",
    "end": "1005199"
  },
  {
    "text": "we tend to fall into this port and adapters architecture when we do functional programming right okay so let's look at",
    "start": "1005199",
    "end": "1011600"
  },
  {
    "start": "1010000",
    "end": "1250000"
  },
  {
    "text": "at an example so one of my favorite examples is you know a scenario um where",
    "start": "1011600",
    "end": "1016959"
  },
  {
    "text": "you try to implement a system for doing you know restaurant reservations so you know this these exist already but this",
    "start": "1016959",
    "end": "1022639"
  },
  {
    "text": "is just to you know it's a nice rich you know problem domain so it's nice to talk about so you imagine Imagine that you",
    "start": "1022639",
    "end": "1028720"
  },
  {
    "text": "want to make a reservation on a restaurant you go to you know a website or an app fill in some details and then you hit a button to send off your",
    "start": "1028720",
    "end": "1035160"
  },
  {
    "text": "reservation and in this particular scenario what we can imagine then is that there's a JSON document that your",
    "start": "1035160",
    "end": "1040640"
  },
  {
    "text": "you know user interface somehow posts to an HTTP-based server and the HTTP based",
    "start": "1040640",
    "end": "1046000"
  },
  {
    "text": "server receives that JSON documents and wants to deal with it so we we'll need we'll go through five steps here the",
    "start": "1046000",
    "end": "1052000"
  },
  {
    "text": "first thing we need to do is is to validate the incoming JSON because JSON is not particularly strongly typed uh so",
    "start": "1052000",
    "end": "1057360"
  },
  {
    "text": "we'll need to validate is it actually wellformed do we understand what is being said here if it's valid we can",
    "start": "1057360",
    "end": "1063919"
  },
  {
    "text": "move on if it's invalid we'll need to you know return a response we'll get back to that later on but imagine that that we've determined that this is a",
    "start": "1063919",
    "end": "1070320"
  },
  {
    "text": "valid you know well-formed JSON document it means we understand what it's trying to say it means we understand the the um",
    "start": "1070320",
    "end": "1076799"
  },
  {
    "text": "the date on which the reservation is being attempted that that means also we'll need to look into our database to",
    "start": "1076799",
    "end": "1082480"
  },
  {
    "text": "say how many or you know how many existing reservations do we already have for that date how many reserved seats do",
    "start": "1082480",
    "end": "1088880"
  },
  {
    "text": "we have from that date that date uh yeah from that date let's read that from the database now we have enough information",
    "start": "1088880",
    "end": "1094880"
  },
  {
    "text": "to make a business decision you know do we actually have enough excess capacity to accept the reservation if we have we",
    "start": "1094880",
    "end": "1101200"
  },
  {
    "text": "can save the reservation into the database so that it becomes part of the decision when the next you know request comes in we might be shortcircuiting",
    "start": "1101200",
    "end": "1109039"
  },
  {
    "text": "various ways in various steps here because if we can't validate we there's no reason to go through the rest if we",
    "start": "1109039",
    "end": "1114240"
  },
  {
    "text": "decide that we can't accept the reservation there's no reason to save it into the database so we might short circuit at various points but I'm not",
    "start": "1114240",
    "end": "1120720"
  },
  {
    "text": "showing those arrows but what we might want to do anyway you know independent of the decision we reach we want to say",
    "start": "1120720",
    "end": "1126640"
  },
  {
    "text": "well let's translate our decision back into an HTTP response that can then be sent back to the client so those are the",
    "start": "1126640",
    "end": "1133600"
  },
  {
    "text": "five steps that we need to go through and you'll notice that three of them are green and three of them are not red but",
    "start": "1133600",
    "end": "1139200"
  },
  {
    "text": "purple um and the three obviously are the pure functions and the uh the purple",
    "start": "1139200",
    "end": "1144720"
  },
  {
    "text": "ones are the impure functions but you'll also notice that they're sort of interle so we have those three pure functions",
    "start": "1144720",
    "end": "1150080"
  },
  {
    "text": "and we have those two impure functions and we somehow need to you know make them in you know mix them together and",
    "start": "1150080",
    "end": "1156160"
  },
  {
    "text": "uh we'll wonder how we can do that so let's try to look like look at what that would look like so I'm going to show you",
    "start": "1156160",
    "end": "1161919"
  },
  {
    "text": "some Haskell code and I'm not assuming that you know H hasll at all um what's really important here is just the top",
    "start": "1161919",
    "end": "1167919"
  },
  {
    "text": "line so actually everything but the top line is the only reason why so the top line is the function declaration and its",
    "start": "1167919",
    "end": "1174080"
  },
  {
    "text": "type and the rest of it is actually the implementation of the function all the whites and and and so on beneath that uh",
    "start": "1174080",
    "end": "1180000"
  },
  {
    "text": "and you don't really I I you don't really need to read that just read the top line here i just put the other the the function body there to you know show",
    "start": "1180000",
    "end": "1186960"
  },
  {
    "text": "off that I can actually write hasll code haha um but it's not important let's look at the top line there the validate",
    "start": "1186960",
    "end": "1193440"
  },
  {
    "text": "reservation the blue and the orange stuff here so validate reservation just declares here's a function its name is",
    "start": "1193440",
    "end": "1199120"
  },
  {
    "text": "validate reservation the orange stuff then is the type of the function it says it takes something called reservation",
    "start": "1199120",
    "end": "1204640"
  },
  {
    "text": "rendition as input this is sort of our you know hasll representation of the JSON document it returns something",
    "start": "1204640",
    "end": "1210320"
  },
  {
    "text": "called either error reservation as output it's not particularly important exactly what that means what's important",
    "start": "1210320",
    "end": "1216080"
  },
  {
    "text": "here to realize is that this function is pure and it's guaranteed by the compiler to be pure why how do we know that well",
    "start": "1216080",
    "end": "1225280"
  },
  {
    "text": "basically because in Haskell all functions are pure by default so unless explicitly stated otherwise they are",
    "start": "1225280",
    "end": "1232480"
  },
  {
    "text": "pure and this one does not explicitly state that it's impure and therefore it's pure and because the type is is",
    "start": "1232480",
    "end": "1239440"
  },
  {
    "text": "declared as being pure if I tried to do something in the function body there that was impure it wouldn't compile but",
    "start": "1239440",
    "end": "1245679"
  },
  {
    "text": "I'm I'm not trying to do something impure in the function body there so this compiles and it's fine now what",
    "start": "1245679",
    "end": "1251520"
  },
  {
    "start": "1250000",
    "end": "1745000"
  },
  {
    "text": "does it look like if if we want to explicitly state that a function is impure well it looks like this so I'm",
    "start": "1251520",
    "end": "1257039"
  },
  {
    "text": "just going to show you a function declaration without its its um its implementation so this is the next fun",
    "start": "1257039",
    "end": "1262640"
  },
  {
    "text": "next function in that uh little sequence diagram that I showed you get reserved seats from uh DB so it takes a",
    "start": "1262640",
    "end": "1269120"
  },
  {
    "text": "connection string and a zone time that's basically just a representation of the date and then it returns something called IO of int and this is impure and",
    "start": "1269120",
    "end": "1277120"
  },
  {
    "text": "the reason why we know that is because those two letters IO indicates that this is an impure function so basically what",
    "start": "1277120",
    "end": "1284000"
  },
  {
    "text": "is it returning io of int int is just an integer so it's it returns the number of already reserved seats for that zone",
    "start": "1284000",
    "end": "1290799"
  },
  {
    "text": "time but that integer you know originates from an impure context",
    "start": "1290799",
    "end": "1296799"
  },
  {
    "text": "because it's not deterministic you know reading from a database is not deterministic you could read from a database you know calling the same",
    "start": "1296799",
    "end": "1302960"
  },
  {
    "text": "database query twice and you'll get two different results because the state of the database changed uh in the meantime",
    "start": "1302960",
    "end": "1308559"
  },
  {
    "text": "so that's not deterministic so so that is an impure operation but basically what IO of intim says is that there is",
    "start": "1308559",
    "end": "1315200"
  },
  {
    "text": "an integer but it's it's packaged up inside of an impure context so you can",
    "start": "1315200",
    "end": "1320320"
  },
  {
    "text": "almost think about this impure context as being sort of like a little bubble or a little space that it is sort of you",
    "start": "1320320",
    "end": "1326960"
  },
  {
    "text": "know sits around that integer and when you're outside when you're in a pure context you can see the the bubble or or",
    "start": "1326960",
    "end": "1333440"
  },
  {
    "text": "box or whatever you want to call it where that integer is is inside but you can't see what the integer is so it's a",
    "start": "1333440",
    "end": "1338480"
  },
  {
    "text": "little bit like shredding cat maybe I don't know really um but anyway so you",
    "start": "1338480",
    "end": "1343520"
  },
  {
    "text": "know that you have something that contains an integer but as long as you're in a pure context you don't know what that integer is so how do we get",
    "start": "1343520",
    "end": "1350240"
  },
  {
    "text": "that integer i'll get back to that but you know we I talked about how you can't",
    "start": "1350240",
    "end": "1355919"
  },
  {
    "text": "call an impure function from a pure function but I'd like my business logic to be impure because basically I just",
    "start": "1355919",
    "end": "1362080"
  },
  {
    "text": "like as much as possible of my you know code to be pure so I want I want to be able to make a decision so I could write",
    "start": "1362080",
    "end": "1368640"
  },
  {
    "text": "a new function called check capacity and I could just if I just for a moment forget about this you know distinction",
    "start": "1368640",
    "end": "1374640"
  },
  {
    "text": "between between pure and impure i could say well in my ideal dream world I'd",
    "start": "1374640",
    "end": "1381039"
  },
  {
    "text": "like to have an integer which rep represents the number of already reserved seats and I also need you know",
    "start": "1381039",
    "end": "1386799"
  },
  {
    "text": "an integer that represents the capacity of the of the restaurant so you know",
    "start": "1386799",
    "end": "1392000"
  },
  {
    "text": "that might be just another number like the restaurant could can hold 10 people or it can hold a 100 people or whatever",
    "start": "1392000",
    "end": "1398240"
  },
  {
    "text": "um so I need those numbers and then then I also need the the reservation itself if I have those three pieces of",
    "start": "1398240",
    "end": "1403600"
  },
  {
    "text": "information I can make a decision that is a pure function how do we know that because there's no IO involved in the",
    "start": "1403600",
    "end": "1410640"
  },
  {
    "text": "type declaration there um so I sort of just you know brushing aside that I",
    "start": "1410640",
    "end": "1416559"
  },
  {
    "text": "don't actually have an int for the reserve C's i have an IO of int so um",
    "start": "1416559",
    "end": "1421679"
  },
  {
    "text": "how do I get it out well I'll get back to that but um it turns out to be possible but you know if if I did that",
    "start": "1421679",
    "end": "1428240"
  },
  {
    "text": "though I I decide may if I decide to accept the reservation I could say well all right let's save the um the",
    "start": "1428240",
    "end": "1433760"
  },
  {
    "text": "reservation into the database again now that is another impure operation we can see that because it's it returns IO of",
    "start": "1433760",
    "end": "1440400"
  },
  {
    "text": "nothing but those empty brackets there we call those unit and both f and hasll",
    "start": "1440400",
    "end": "1445520"
  },
  {
    "text": "has this thing called unit and it's basically void like it ought to be because unit is is a real value so you",
    "start": "1445520",
    "end": "1451600"
  },
  {
    "text": "can use you know unit as a return value but you also use it as input so you can take a return value and you know pass it",
    "start": "1451600",
    "end": "1458080"
  },
  {
    "text": "on as input to another function if you need to do that and that turns out to sometimes be be interesting to do but",
    "start": "1458080",
    "end": "1464080"
  },
  {
    "text": "but if you think about those empty brackets as being sort of rep the same thing as void in C# or Java you know",
    "start": "1464080",
    "end": "1470880"
  },
  {
    "text": "that if you have a method in C# or Java that returns void it's it it pretty",
    "start": "1470880",
    "end": "1475919"
  },
  {
    "text": "strongly indicates that there must be a side effect of calling that method because why would you call a method that doesn't return anything you'd probably",
    "start": "1475919",
    "end": "1482480"
  },
  {
    "text": "want to want it want to achieve some sort of side effect um so that's that's possible also in HA hasll but it's only",
    "start": "1482480",
    "end": "1488640"
  },
  {
    "text": "possible to have side effects uh in an impure context because side effects are per definition impure so we have you",
    "start": "1488640",
    "end": "1495039"
  },
  {
    "text": "know IO of unit now the final thing we need to do is to say well if we reached",
    "start": "1495039",
    "end": "1500320"
  },
  {
    "text": "a decision so far we want to translate it back to an HTTP result so we could do that as well um again you just look at",
    "start": "1500320",
    "end": "1507039"
  },
  {
    "text": "the top line there we can see there's no IO involved in that so that's a pure function as well this is just a",
    "start": "1507039",
    "end": "1512080"
  },
  {
    "text": "translation from our internal representation of you know did we accept the reservation or not and then just",
    "start": "1512080",
    "end": "1517600"
  },
  {
    "text": "something that can that we can you know translate to you know HTTP responses that can go on the wire that's basically what we're doing here all right so so we",
    "start": "1517600",
    "end": "1525360"
  },
  {
    "text": "have those five functions i wrote three pure functions two impure functions i",
    "start": "1525360",
    "end": "1530640"
  },
  {
    "text": "somehow need to again you know interle those um so that they can all talk together because I need some of the",
    "start": "1530640",
    "end": "1536400"
  },
  {
    "text": "impure information in order to continue with some of the pure you the pure operations but I said I can't call pure",
    "start": "1536400",
    "end": "1543039"
  },
  {
    "text": "functions no that's I can't call impure functions from pure functions so how do I resolve that issue well it turns out",
    "start": "1543039",
    "end": "1550000"
  },
  {
    "text": "that you know at the boundary of the system every system is impure because you know when you get a request coming",
    "start": "1550000",
    "end": "1556080"
  },
  {
    "text": "into a system or someone presses a button on a user interface or whatever that is nondeterministic side effective",
    "start": "1556080",
    "end": "1562080"
  },
  {
    "text": "behavior anyway so everything that happens you know at the entry point of a system is by definition impure anyway so",
    "start": "1562080",
    "end": "1569120"
  },
  {
    "text": "um so we could imagine that we have some sort of entry point where we can say well if we if you put all of those functions into some sort of web",
    "start": "1569120",
    "end": "1575200"
  },
  {
    "text": "framework uh we could imagine that we have some sort of framework that that you know contains a dispatcher and it",
    "start": "1575200",
    "end": "1580559"
  },
  {
    "text": "says well all right here here's a JSON document that arrives at this particular URL it ought to be dispatched to a",
    "start": "1580559",
    "end": "1586720"
  },
  {
    "text": "function that can deal with that and that is an impure function so we need to have an impure function that can deal",
    "start": "1586720",
    "end": "1592240"
  },
  {
    "text": "with an incoming request anyway so let's use that in that that function to compose all of those other things",
    "start": "1592240",
    "end": "1597600"
  },
  {
    "text": "together so in this case I've just called it post reservation and if you look at the top line again the orange",
    "start": "1597600",
    "end": "1604240"
  },
  {
    "text": "stuff you can see it takes reservation rendition as input returns IO of HTTP result of unit as output so very clearly",
    "start": "1604240",
    "end": "1611039"
  },
  {
    "text": "this is impure as well this has side effects or nondeterministic behavior inside of it and that means we can do",
    "start": "1611039",
    "end": "1617039"
  },
  {
    "text": "everything when we're in impure context we can call pure functions and impure functions so we're pretty much all",
    "start": "1617039",
    "end": "1623279"
  },
  {
    "text": "almost there um and we can just walk you know through a couple of the details so don't worry about all this the the",
    "start": "1623279",
    "end": "1629559"
  },
  {
    "text": "hascally scary stuff like all the strange looking arrows and dollar signs and so on um that's basically you can",
    "start": "1629559",
    "end": "1637200"
  },
  {
    "text": "think about that as glue that enables you to compose functions together and I'm not going to walk you through all of it but basically just if you look at the",
    "start": "1637200",
    "end": "1643919"
  },
  {
    "text": "um you can see there are four indented lines if you look at the top indented line the one that starts with R arrow ho",
    "start": "1643919",
    "end": "1649919"
  },
  {
    "text": "hoist either and so on you can see after the dollar sign it says validate reservation candidate that's a function",
    "start": "1649919",
    "end": "1655440"
  },
  {
    "text": "call the validate reservation was the first function that I showed you and that's a pure function and it returns a",
    "start": "1655440",
    "end": "1661840"
  },
  {
    "text": "value and we do gluey stuff to that value in order to you know be able to address it later on and then if you look",
    "start": "1661840",
    "end": "1668640"
  },
  {
    "text": "look at the next line you can see there's more Haskell googlygook there but after the dollar sign it says get",
    "start": "1668640",
    "end": "1674720"
  },
  {
    "text": "reserved seeds from DB and a couple of you know input arguments to that and so",
    "start": "1674720",
    "end": "1680480"
  },
  {
    "text": "again you know I'm in a pure context i'm inside of the impure bubble if you will so that means I can call both pure and",
    "start": "1680480",
    "end": "1687279"
  },
  {
    "text": "impure functions all everything goes here and that means now that I that sits",
    "start": "1687279",
    "end": "1692399"
  },
  {
    "text": "on the left hand side of that arrow that is the result of calling get reserve seats from DB and you saw before when I",
    "start": "1692399",
    "end": "1699039"
  },
  {
    "text": "declared the function I said it returns IO of int but I'm now you know opened",
    "start": "1699039",
    "end": "1704880"
  },
  {
    "text": "the door and went inside of the IO context and that means the I is now no longer an IO of int it's just an int",
    "start": "1704880",
    "end": "1711200"
  },
  {
    "text": "it's in because I'm already in the impure context and that mean I can pass that as an argument to check capacity so",
    "start": "1711200",
    "end": "1716960"
  },
  {
    "text": "that's the next next to last line there it says hoist either more more you know",
    "start": "1716960",
    "end": "1722159"
  },
  {
    "text": "has googled hoist either dollar and then it says check capacity 10 IR so 10 is",
    "start": "1722159",
    "end": "1728000"
  },
  {
    "text": "just because I hardcoded the capacity of the restaurant very small intimate restaurant it can only seat 10 people",
    "start": "1728000",
    "end": "1733440"
  },
  {
    "text": "but then I is just the number of already reserved seats that's that's just an integer at this point so even if check",
    "start": "1733440",
    "end": "1739440"
  },
  {
    "text": "capacity is a pure function I'm calling it from an impure context so that all works and then there's some more crap",
    "start": "1739440",
    "end": "1746320"
  },
  {
    "start": "1745000",
    "end": "1985000"
  },
  {
    "text": "going on there now if we try to visualize what's going on here we can try to draw it in with concentric",
    "start": "1746320",
    "end": "1752880"
  },
  {
    "text": "circles uh funny how that works out and um so basically what happened here is we",
    "start": "1752880",
    "end": "1757919"
  },
  {
    "text": "say well we get the incoming request it's being dispatched to this uh function called post reservation which",
    "start": "1757919",
    "end": "1762960"
  },
  {
    "text": "is an impure function that's the one that I just showed you on the previous slide now um the first thing post",
    "start": "1762960",
    "end": "1768320"
  },
  {
    "text": "reservation does is it says uh let's try to validate the incoming data if we can do that let's try to call the database",
    "start": "1768320",
    "end": "1774559"
  },
  {
    "text": "to get the number of already receipts reserved seats from the database um with",
    "start": "1774559",
    "end": "1779760"
  },
  {
    "text": "that information we can now call check capacity which is another pure function if we decide to accept the reservation",
    "start": "1779760",
    "end": "1786559"
  },
  {
    "text": "we can call save reservation and then we can you know no matter what we decided we can return you know translate things",
    "start": "1786559",
    "end": "1792880"
  },
  {
    "text": "back into an HTTP result and you will notice that I've drawn in the concentric circles and you will notice that I've",
    "start": "1792880",
    "end": "1798720"
  },
  {
    "text": "made some of the things purple and I'll make some of some of the things green by purpose because the green stuff is the",
    "start": "1798720",
    "end": "1804720"
  },
  {
    "text": "pure stuff and the purple stuff is the impure stuff and it has to be like this",
    "start": "1804720",
    "end": "1810399"
  },
  {
    "text": "in Haskell because it's the only thing that compiles because I have this constraint that I can't call you know um",
    "start": "1810399",
    "end": "1817279"
  },
  {
    "text": "impure code from pure code i I have to structure my data my application in this",
    "start": "1817279",
    "end": "1822640"
  },
  {
    "text": "way so you will often hear has talk about you know IO happens at the boundary of the system yes because HA",
    "start": "1822640",
    "end": "1828960"
  },
  {
    "text": "hasll you know forces you to do to do it in this way there's no other way you can actually do it but if you sort of look",
    "start": "1828960",
    "end": "1835520"
  },
  {
    "text": "at this a little bit you'll see that that is very very close to being port and adapters this is basically the ports",
    "start": "1835520",
    "end": "1840559"
  },
  {
    "text": "and adapters architecture in the middle there check capacity that is my business logic in the concentric circle around",
    "start": "1840559",
    "end": "1847039"
  },
  {
    "text": "that validate reservation to HTTP result this is what you'd call your application model or your service layer or whatever",
    "start": "1847039",
    "end": "1852880"
  },
  {
    "text": "people tend to call it this is where you adapt your business model to the outside world and then you have have the the",
    "start": "1852880",
    "end": "1859679"
  },
  {
    "text": "impure stuff on on the boundary there um and you could even imagine if you",
    "start": "1859679",
    "end": "1865039"
  },
  {
    "text": "just slice it through horizontally you know through the middle you basically have you know your normal horizontally",
    "start": "1865039",
    "end": "1871200"
  },
  {
    "text": "layered application architecture because you have your you know your interface to the to the outside world on top and then",
    "start": "1871200",
    "end": "1876960"
  },
  {
    "text": "you have your application layer then you have your domain model then you have your data access layer there in the bottle in the bottom you can also you",
    "start": "1876960",
    "end": "1883200"
  },
  {
    "text": "can almost imagine that there's sort of a can uh you know shape you know sitting down here that represents your database",
    "start": "1883200",
    "end": "1888880"
  },
  {
    "text": "and then you have you know your horizontally layered application model there but the thing is it just",
    "start": "1888880",
    "end": "1894000"
  },
  {
    "text": "automatically falls into this model because that's basically all it can do uh in Haskell specifically so if I was a",
    "start": "1894000",
    "end": "1901039"
  },
  {
    "text": "team leader on a Haskell project and and uh you know I went on vacation and then you had the same sort of urgency as",
    "start": "1901039",
    "end": "1907440"
  },
  {
    "text": "before where you say I really really want to call the database you know from within my domain model from within check",
    "start": "1907440",
    "end": "1912960"
  },
  {
    "text": "capacity because I really need to solve the problem fast you could try to do that but basically that would mean you",
    "start": "1912960",
    "end": "1918960"
  },
  {
    "text": "can only do that if you change the type of the function to become impure and",
    "start": "1918960",
    "end": "1924080"
  },
  {
    "text": "changing the type of a function is a breaking change and that means now all the rest of your code is not going to",
    "start": "1924080",
    "end": "1930039"
  },
  {
    "text": "compile and and in that point it might actually be easier to actually do the right thing instead of trying to to fix",
    "start": "1930039",
    "end": "1936960"
  },
  {
    "text": "all those breaking changes so you know it really just helps you to do the right thing up front and you can do the same",
    "start": "1936960",
    "end": "1943519"
  },
  {
    "text": "thing in F as well if SHA is not so strict about its distinction between pure and impure but this is the",
    "start": "1943519",
    "end": "1949039"
  },
  {
    "text": "basically the same composition as um as I showed you in Haskell before it doesn't really enforce it but there are",
    "start": "1949039",
    "end": "1955519"
  },
  {
    "text": "ways that you can do do that if you're a um a a team lead or a software architect",
    "start": "1955519",
    "end": "1960559"
  },
  {
    "text": "on an F project and and it's not particularly e it's not particularly difficult to keep track of whether",
    "start": "1960559",
    "end": "1965679"
  },
  {
    "text": "you're doing the right thing f sort of tends to fall into this um this thing this way of of of writing things fairly",
    "start": "1965679",
    "end": "1972000"
  },
  {
    "text": "easy as well i have a blog post that shows all of this code if you're interested in that um so um so you don't",
    "start": "1972000",
    "end": "1978240"
  },
  {
    "text": "really have to take a lot of notes if you really want to dive into it um I have that on my blog on my on my blog",
    "start": "1978240",
    "end": "1983279"
  },
  {
    "text": "and if you can't find it then ping me on Twitter right um so that's really nice that we sort of just fall into this pit",
    "start": "1983279",
    "end": "1990159"
  },
  {
    "start": "1985000",
    "end": "2173000"
  },
  {
    "text": "of of doing the right thing having the right software architecture all by itself so let's move on to talk about",
    "start": "1990159",
    "end": "1995360"
  },
  {
    "text": "services and data now um when people you know initially learn about",
    "start": "1995360",
    "end": "2001519"
  },
  {
    "text": "object-oriented programming and object-oriented design they um they are often taught that objects are data with",
    "start": "2001519",
    "end": "2009760"
  },
  {
    "text": "behavior and there's this concept called encapsulation that says you should not really expose the internals of your",
    "start": "2009760",
    "end": "2015919"
  },
  {
    "text": "objects what you really should do is you should have your objects um expose enough operations so that a user of the",
    "start": "2015919",
    "end": "2023120"
  },
  {
    "text": "object can just ask it to do things you know tell don't ask if you will um so so",
    "start": "2023120",
    "end": "2028159"
  },
  {
    "text": "so that's this whole idea about this whole design idea about encapsulation and object orientation and um if people",
    "start": "2028159",
    "end": "2035360"
  },
  {
    "text": "are you know new to to enterprise development and they're just out of college or wherever they you know",
    "start": "2035360",
    "end": "2040720"
  },
  {
    "text": "learned object-oriented design they probably come out and they'll do designs like this so they say I need to keep",
    "start": "2040720",
    "end": "2046240"
  },
  {
    "text": "track of a user in my system i have lots of users in my system and the users have ID they have an ID and they have a",
    "start": "2046240",
    "end": "2052158"
  },
  {
    "text": "username i also need to persist my user in a database uh so I'll do you know create read update and delete that can",
    "start": "2052159",
    "end": "2058638"
  },
  {
    "text": "talk to my database and you know this is a well described design pattern it's called",
    "start": "2058639",
    "end": "2064800"
  },
  {
    "text": "active record and you know if you read Martin Fowler's book you know patterns of enterprise application architecture",
    "start": "2064800",
    "end": "2070800"
  },
  {
    "text": "is actually described in that book so it sort of like almost seems like this is some sort of of well-known good thing",
    "start": "2070800",
    "end": "2078000"
  },
  {
    "text": "but it's turned out that you know in the last decade at least we've we pretty much experienced and and learned the",
    "start": "2078000",
    "end": "2083760"
  },
  {
    "text": "hard way that this is probably more of an anti-attern than it is is a pattern at least in C# and and and in Java um it",
    "start": "2083760",
    "end": "2090480"
  },
  {
    "text": "seems like it still does some good things in Ruby i don't know um but Ruby is static is dynamically typed so maybe",
    "start": "2090480",
    "end": "2097359"
  },
  {
    "text": "other rules you know are at play there so I'm not pointing fingers at at Ruby at all but I'm just saying well I'm",
    "start": "2097359",
    "end": "2102560"
  },
  {
    "text": "talking about statically typed languages here uh at least in Shishar and Java we've learned the hard way that that is",
    "start": "2102560",
    "end": "2107839"
  },
  {
    "text": "actually not a good way to design systems even though this seems very object-oriented you know a user is an",
    "start": "2107839",
    "end": "2113920"
  },
  {
    "text": "encapsulation of data about the user together with all the behavior that belongs to the user this seems like",
    "start": "2113920",
    "end": "2119160"
  },
  {
    "text": "object-orientation this you know by principle there's nothing wrong with this but the problem is that you say",
    "start": "2119160",
    "end": "2124800"
  },
  {
    "text": "well I need to do things with users and later on you figure out I need to do other things with users as well you know",
    "start": "2124800",
    "end": "2130160"
  },
  {
    "text": "because I want to be able to send an email to an user so I'll also add that um you know feature to the user object",
    "start": "2130160",
    "end": "2137359"
  },
  {
    "text": "and what often happens with these things is that the more behavior you add to a",
    "start": "2137359",
    "end": "2142400"
  },
  {
    "text": "function to a a class like this the more behavior it also attracts so it you know",
    "start": "2142400",
    "end": "2147760"
  },
  {
    "text": "you you'd end up with a couple of very very big classes in a typical source uh source code base that um you know where",
    "start": "2147760",
    "end": "2155520"
  },
  {
    "text": "the the classes just you know attract more and more of this sort of behavior and they become less and less cohesive",
    "start": "2155520",
    "end": "2161200"
  },
  {
    "text": "and we we end up calling those big classes god classes and that is a well-known anti-attern as well so we",
    "start": "2161200",
    "end": "2167599"
  },
  {
    "text": "learned the hard way that this actually leads to somewhere something that is not particularly",
    "start": "2167599",
    "end": "2173000"
  },
  {
    "start": "2173000",
    "end": "2210000"
  },
  {
    "text": "maintainable so what should we do about it well there's there's this book called domain driven design by Eric Evans and",
    "start": "2173000",
    "end": "2179520"
  },
  {
    "text": "it's sort of like two books in one one of the book one part of the book talks a lot about this thing about actually",
    "start": "2179520",
    "end": "2185040"
  },
  {
    "text": "talking thinking about the domain and the business language uh that you're",
    "start": "2185040",
    "end": "2190160"
  },
  {
    "text": "trying to to um to model and so on but there's also a part of the book that is very concrete and talks about various",
    "start": "2190160",
    "end": "2195920"
  },
  {
    "text": "design patterns and how to think about objects and Eric Evans makes a pretty good distinction very interesting",
    "start": "2195920",
    "end": "2201119"
  },
  {
    "text": "distinction in this book that I think is very um valuable that I've have served me very well doing object-oriented",
    "start": "2201119",
    "end": "2206720"
  },
  {
    "text": "design in the last 10 years at least or more and he says basically you can think about your objects as falling into two",
    "start": "2206720",
    "end": "2213560"
  },
  {
    "start": "2210000",
    "end": "2467000"
  },
  {
    "text": "categories um and one of the categories has two subcategories so basically he says well um the first category of",
    "start": "2213560",
    "end": "2220400"
  },
  {
    "text": "objects we call those entities and these are the these are the objects that that you learn about in in university and so",
    "start": "2220400",
    "end": "2228480"
  },
  {
    "text": "on so if if you um if you ever had you know an introduction to object-oriented analysis and design you know the the",
    "start": "2228480",
    "end": "2235520"
  },
  {
    "text": "question is but how do I do object-oriented analysis and design and the you know the naive answer to that",
    "start": "2235520",
    "end": "2241760"
  },
  {
    "text": "question is well just take the you know the problem specification and just look for all the nouns and the nouns will",
    "start": "2241760",
    "end": "2247040"
  },
  {
    "text": "describe your objects and we know that that's not really true but there's some truth in that is some of the nouns will",
    "start": "2247040",
    "end": "2253280"
  },
  {
    "text": "actually be some of the entities you're interested in entities are objects that have you know inherent identity that",
    "start": "2253280",
    "end": "2260240"
  },
  {
    "text": "have you know long lasting identity so these are the the business objects you want to keep track of these are your",
    "start": "2260240",
    "end": "2265920"
  },
  {
    "text": "users your contracts um your orders if you're keeping track of a fleet of cars",
    "start": "2265920",
    "end": "2271119"
  },
  {
    "text": "that is your you know your car objects or whatever it is that you're keeping track of these are entities and you",
    "start": "2271119",
    "end": "2276960"
  },
  {
    "text": "probably have those and there's nothing wrong with that and then he also talks about well there's another sort of",
    "start": "2276960",
    "end": "2282240"
  },
  {
    "text": "object that also contains data we call those value objects and that's another well-known design pattern but basically",
    "start": "2282240",
    "end": "2288880"
  },
  {
    "text": "what what Eric Evans then says is that these objects are basically just carriers of data and they don't really",
    "start": "2288880",
    "end": "2295280"
  },
  {
    "text": "in they don't really encapsulate any business logic because we've learned that if we try to put business logic",
    "start": "2295280",
    "end": "2301280"
  },
  {
    "text": "inside of these things business logic changes u so it's not a good idea to put",
    "start": "2301280",
    "end": "2306960"
  },
  {
    "text": "business logic that changes you know at a different you know cadence that the data changes it's not a good idea to to",
    "start": "2306960",
    "end": "2314160"
  },
  {
    "text": "you know put those together so instead you should put your business logic into collections other objects that are",
    "start": "2314160",
    "end": "2319760"
  },
  {
    "text": "collections of behavior and he calls those things services and you probably you know heard lots about you know",
    "start": "2319760",
    "end": "2325839"
  },
  {
    "text": "services this is basically just another word for manager you know so you have like your user manager and things and",
    "start": "2325839",
    "end": "2332320"
  },
  {
    "text": "all of a sudden you also have your manager factory service and so on but that's basically the stuff that he's talking about here so what does the user",
    "start": "2332320",
    "end": "2340240"
  },
  {
    "text": "that we looked at before what does it look like if we refactor it to do what Eric Evans tells us to do well it looks",
    "start": "2340240",
    "end": "2345839"
  },
  {
    "text": "something like this so we'll say all right here's a user it has an ID and a username and I even went to the effort",
    "start": "2345839",
    "end": "2351359"
  },
  {
    "text": "of making this immutable which I hadn't needed to do but I just you know wanted to do that um and that's it it's just",
    "start": "2351359",
    "end": "2358800"
  },
  {
    "text": "the data and then we can say well what if we need to you know make create read",
    "start": "2358800",
    "end": "2364320"
  },
  {
    "text": "update and delete operations on that oh well for that we have the repository pattern so you can have like your SQL",
    "start": "2364320",
    "end": "2369839"
  },
  {
    "text": "user repository class that implements I use aer repository that does all of that now that's another well-described design",
    "start": "2369839",
    "end": "2376400"
  },
  {
    "text": "pattern that everyone by the way gets wrong but that's a different story and if we want to send emails we can have",
    "start": "2376400",
    "end": "2382400"
  },
  {
    "text": "another you know service that does that email sender so",
    "start": "2382400",
    "end": "2388520"
  },
  {
    "text": "um my experience with doing this is that that actually works you know if you if",
    "start": "2388520",
    "end": "2394240"
  },
  {
    "text": "you need to do object-oriented design and development of a maintainable",
    "start": "2394240",
    "end": "2399720"
  },
  {
    "text": "non-trivial system this actually works this is a way to to keep a codebase",
    "start": "2399720",
    "end": "2405680"
  },
  {
    "text": "maintainable for years but the problem again is you know you have to read thick",
    "start": "2405680",
    "end": "2411760"
  },
  {
    "text": "books in order to understand why you have to do this and how to do it and you need to get everyone on the same page so",
    "start": "2411760",
    "end": "2418000"
  },
  {
    "text": "again we're a bit of that situation where it feels like rolling a boulder up a hill and again if you look away for",
    "start": "2418000",
    "end": "2423359"
  },
  {
    "text": "just a moment then someone comes by and totally ruins everything um and then you're back to start again and not even",
    "start": "2423359",
    "end": "2430160"
  },
  {
    "text": "that but also you'd say but that's not really object orientation anymore this is an anemic oh that's an anemic domain",
    "start": "2430160",
    "end": "2437599"
  },
  {
    "text": "model right um this that's a very common criticism of this sort of of of code",
    "start": "2437599",
    "end": "2442960"
  },
  {
    "text": "says \"Well that's actually not object-oriented code anymore because you've separated you separated data from",
    "start": "2442960",
    "end": "2449160"
  },
  {
    "text": "behavior that's not what object orientation was originally about.\" Or",
    "start": "2449160",
    "end": "2454320"
  },
  {
    "text": "maybe you know everyone tries to second guess what Alan K meant when he coined the term but I don't know but basically",
    "start": "2454320",
    "end": "2459520"
  },
  {
    "text": "what we taught about um you know C# and Java that's not the sort of object orientation we were originally thought",
    "start": "2459520",
    "end": "2465720"
  },
  {
    "text": "taught um so what about functional programming does it make it better you",
    "start": "2465720",
    "end": "2471359"
  },
  {
    "start": "2467000",
    "end": "2487000"
  },
  {
    "text": "betcha because you know functional programming basically wants you to do this it says there there's data and",
    "start": "2471359",
    "end": "2477280"
  },
  {
    "text": "there are functions that operate on data and that's it that's that is how you are supposed to work with with um with your",
    "start": "2477280",
    "end": "2484640"
  },
  {
    "text": "stuff this is how you are supposed to write code in functional programming so if we look at this same example again we",
    "start": "2484640",
    "end": "2490480"
  },
  {
    "start": "2487000",
    "end": "2546000"
  },
  {
    "text": "can say what does a user look like this is an F example of a user this just a oneliner it's almost declarative well it",
    "start": "2490480",
    "end": "2497200"
  },
  {
    "text": "is declarative to say a user is a type that has an integer ID and as a string",
    "start": "2497200",
    "end": "2503119"
  },
  {
    "text": "username and that's it this is a strongly type type",
    "start": "2503119",
    "end": "2508160"
  },
  {
    "text": "declaration but it has no behavior and well in F you can add behavior because F",
    "start": "2508160",
    "end": "2513520"
  },
  {
    "text": "f is what we call a multi-paradigmatic language um so you can make it more",
    "start": "2513520",
    "end": "2518960"
  },
  {
    "text": "object-oriented if you want to um but you shouldn't really feel the urge to do this this is fine this is what it wants",
    "start": "2518960",
    "end": "2524640"
  },
  {
    "text": "you to do in HA hasll for example there's a little bit of a different syntax of doing this um but but it's",
    "start": "2524640",
    "end": "2530319"
  },
  {
    "text": "basically the same concept and in hasll in H hasll you can't add any behavior to data data is data it can be as deeply",
    "start": "2530319",
    "end": "2537680"
  },
  {
    "text": "nested and very you know it has it has have a very complex structure if you will but it's just data it has no in you",
    "start": "2537680",
    "end": "2544400"
  },
  {
    "text": "know associated behavior so we should feel good about this this is not anemic",
    "start": "2544400",
    "end": "2549599"
  },
  {
    "start": "2546000",
    "end": "2581000"
  },
  {
    "text": "or anything this is how functional programming should look like and if we want to do things with the user if we",
    "start": "2549599",
    "end": "2555680"
  },
  {
    "text": "want to save it into a database or something we can create a module which is a collection of functions that either",
    "start": "2555680",
    "end": "2561680"
  },
  {
    "text": "you know take user as an input or return user as output or maybe even do both i",
    "start": "2561680",
    "end": "2566800"
  },
  {
    "text": "don't know these are impure by the way but that's not really the point but the point is a module is basically just a",
    "start": "2566800",
    "end": "2573520"
  },
  {
    "text": "service uh but it it doesn't have to pretend that it's an object because it's just a module and you could have a",
    "start": "2573520",
    "end": "2579280"
  },
  {
    "text": "module for sending email as well so that's uh that's basically just what",
    "start": "2579280",
    "end": "2584319"
  },
  {
    "start": "2581000",
    "end": "2612000"
  },
  {
    "text": "what F wants to you wants you to do and this is what Haskell wants you to do so so it wants you to do what Eric Evans",
    "start": "2584319",
    "end": "2590960"
  },
  {
    "text": "spends 400 pages trying to teach you how to do this is basically if you ever learned Haskell or if you ever learned F",
    "start": "2590960",
    "end": "2598240"
  },
  {
    "text": "you know the functional parts of F this is what you are supposed to do this is what the language wants you to do so",
    "start": "2598240",
    "end": "2603280"
  },
  {
    "text": "you're falling into this pit of success again saying well these two things should not go together that they should",
    "start": "2603280",
    "end": "2608560"
  },
  {
    "text": "be separate but they can you know work with each other and that's fine much more maintainable codebase you get out",
    "start": "2608560",
    "end": "2614640"
  },
  {
    "start": "2612000",
    "end": "2715000"
  },
  {
    "text": "of this all right so let's talk about testability because testability is always fun to talk about you know Kent",
    "start": "2614640",
    "end": "2621040"
  },
  {
    "text": "beg introduced the concept of test-driven development back in mid90s so 9596 something like that I can't",
    "start": "2621040",
    "end": "2628160"
  },
  {
    "text": "remember the exact date and it was really really controversial when he started doing that and I picked a",
    "start": "2628160",
    "end": "2633359"
  },
  {
    "text": "test-driven development up in around 2003 it was really really controversial back then there's you know there's been",
    "start": "2633359",
    "end": "2639839"
  },
  {
    "text": "more acceptance of test-driven development now into you know to the degree where most people actually seem",
    "start": "2639839",
    "end": "2644880"
  },
  {
    "text": "to think that it ought to be you know that's actually you know a well-known best practice now but it turns out it's",
    "start": "2644880",
    "end": "2650400"
  },
  {
    "text": "still sort of controversial and you know from time to time the controversy you know pops up again so a couple of years",
    "start": "2650400",
    "end": "2656240"
  },
  {
    "text": "ago you know David Hammire Hansen wrote an article called um TDD is dead long",
    "start": "2656240",
    "end": "2661520"
  },
  {
    "text": "live testing and uh basically what he uh I'll try to to cover what he said in a moment but",
    "start": "2661520",
    "end": "2667520"
  },
  {
    "text": "basically he said well it's not that he's against testing but he just thinks that test-driven developments actually leads to a lot of of problems he leads",
    "start": "2667520",
    "end": "2674000"
  },
  {
    "text": "to what what he calls test induced damage now David Hayansen can be quite",
    "start": "2674000",
    "end": "2679599"
  },
  {
    "text": "controversial himself and some people really don't like his style because he's you know swearing a lot and uh he's",
    "start": "2679599",
    "end": "2685200"
  },
  {
    "text": "saying things in a very provocative manner but you know I found over the years that if you actually try to listen",
    "start": "2685200",
    "end": "2690800"
  },
  {
    "text": "to what it is that he's trying to say to you he's really a freethinking spirit he",
    "start": "2690800",
    "end": "2696400"
  },
  {
    "text": "does not just go with the flow he goes against the grain and sometimes it seems like he makes an you know an you know an",
    "start": "2696400",
    "end": "2702079"
  },
  {
    "text": "effort out out of doing that but basically if he says something that goes against the grain it's worth the effort",
    "start": "2702079",
    "end": "2707359"
  },
  {
    "text": "at least to try to understand what it is he says because he's a very intelligent young man i can I can say young man now",
    "start": "2707359",
    "end": "2713119"
  },
  {
    "text": "because my hair is gray um so let's try to understand what it is that he says he says test-driven",
    "start": "2713119",
    "end": "2718560"
  },
  {
    "start": "2715000",
    "end": "2856000"
  },
  {
    "text": "development leads to to test induced damage that is his claim i'm not saying it's my claim that is his claim let's",
    "start": "2718560",
    "end": "2724400"
  },
  {
    "text": "try to understand what he means by test induced damage so here is a class um called capacity checker that tries to",
    "start": "2724400",
    "end": "2731200"
  },
  {
    "text": "check the capacity of one of these restaurant reservation system so um this is nice testable C# code we have a class",
    "start": "2731200",
    "end": "2739359"
  },
  {
    "text": "called capacity checker it implements an interface called I capacity checker it um it uses dependency injection to have",
    "start": "2739359",
    "end": "2746560"
  },
  {
    "text": "a capacity that's just an integer but also an I reservation repository and we'll need to have the constructor in",
    "start": "2746560",
    "end": "2751920"
  },
  {
    "text": "order to depend to inject those in and save them in fields for later usage then we have on the bottom here has capacity",
    "start": "2751920",
    "end": "2759359"
  },
  {
    "text": "which is the actual value that this class provides it says well given a reservation do we have capacity yes or",
    "start": "2759359",
    "end": "2767280"
  },
  {
    "text": "no true or false so what we do here on the last two lines of code there we say",
    "start": "2767280",
    "end": "2773520"
  },
  {
    "text": "well we'll ask the repository to get the number of reserved seats for that date that gives us a number of reserved seats",
    "start": "2773520",
    "end": "2779040"
  },
  {
    "text": "reserved is just an integer and then we say then we just do a comparison you know a less than comparison and says",
    "start": "2779040",
    "end": "2785119"
  },
  {
    "text": "well if the capac capacity is less than that you know what we already have reserved plus what is being requested",
    "start": "2785119",
    "end": "2790480"
  },
  {
    "text": "then the answer is is false otherwise it's true so so David Hinaya Hansen's",
    "start": "2790480",
    "end": "2796240"
  },
  {
    "text": "point here would be why would you ever write code like that you know the only",
    "start": "2796240",
    "end": "2803200"
  },
  {
    "text": "valuable thing here is are those two lines of code in the bottom the rest is just noise why would you do that and",
    "start": "2803200",
    "end": "2810000"
  },
  {
    "text": "then you say well because of testability all right fair enough so I'm I'm not even saying that this is bad in",
    "start": "2810000",
    "end": "2816720"
  },
  {
    "text": "the sense that you know if you ask me to write a non-trivial maintainable system",
    "start": "2816720",
    "end": "2822319"
  },
  {
    "text": "in C that has you know test coverage this is what I do because I I don't know",
    "start": "2822319",
    "end": "2827760"
  },
  {
    "text": "of a better way of doing it in C# so I'm not really pointing fingers at you know this is I'm not saying this is bad",
    "start": "2827760",
    "end": "2833920"
  },
  {
    "text": "practice you may need to do this but that is that is a high cost to pay to",
    "start": "2833920",
    "end": "2839680"
  },
  {
    "text": "have you know testability because that really it it it causes your code to be",
    "start": "2839680",
    "end": "2845040"
  },
  {
    "text": "spread out instead of being you know going well together and it's difficult to manage and difficult to you know",
    "start": "2845040",
    "end": "2851280"
  },
  {
    "text": "navigate a codebase like that and you just have a lot lot of noise that you don't really need to have what would it look like in another",
    "start": "2851280",
    "end": "2858240"
  },
  {
    "start": "2856000",
    "end": "3006000"
  },
  {
    "text": "language like an F for example now here's something this is not even similar because this actually does much",
    "start": "2858240",
    "end": "2864319"
  },
  {
    "text": "more it makes the same sort of boolean comparison but then it also instead of just returning true or false it actually",
    "start": "2864319",
    "end": "2870720"
  },
  {
    "text": "returns a failure with some more information about the failure if you know why it failed if that's what's the",
    "start": "2870720",
    "end": "2876480"
  },
  {
    "text": "case and it returns success uh you know if if if the boolean you know evaluation",
    "start": "2876480",
    "end": "2882160"
  },
  {
    "text": "returned true so if I just wanted to do it entirely similar to the other one just returning a boolean I could",
    "start": "2882160",
    "end": "2887680"
  },
  {
    "text": "actually have done that in two lines of code but now it turns out to be four now this is an you know apart from that this",
    "start": "2887680",
    "end": "2893119"
  },
  {
    "text": "is exactly the same thing because this this is a function called check and it takes three arguments it takes a",
    "start": "2893119",
    "end": "2899440"
  },
  {
    "text": "capacity argument that's just an integer it takes get reserve seeds which turns out to be another function and then it",
    "start": "2899440",
    "end": "2905760"
  },
  {
    "text": "takes reservation as the third argument so what you often see in functional programming is that you'll see functions",
    "start": "2905760",
    "end": "2911280"
  },
  {
    "text": "taking other functions as argument this is what we call higher order functions this is a completely normal thing to do",
    "start": "2911280",
    "end": "2916960"
  },
  {
    "text": "now get reserve seats is a function it plays the exact same role as that repository that you saw before so on the",
    "start": "2916960",
    "end": "2923359"
  },
  {
    "text": "first line you can see it says let reserve seeds equal get reserve seeds reservation date that is that is a",
    "start": "2923359",
    "end": "2930640"
  },
  {
    "text": "function call i'm calling the function get reserve seeds with the reservations state and I get I'm getting out of that",
    "start": "2930640",
    "end": "2937200"
  },
  {
    "text": "function called the number of already reserved seats that function is just being passed in and it's sort of",
    "start": "2937200",
    "end": "2942640"
  },
  {
    "text": "polymorphic because I'm not asking for a specific function i'm just asking for a function that can take a data as input",
    "start": "2942640",
    "end": "2948559"
  },
  {
    "text": "and and give me an integer as output any function that could does can do that fits that description and that will",
    "start": "2948559",
    "end": "2954040"
  },
  {
    "text": "compile now is this function that we're looking at here is that pure or impure turns out to be important in just",
    "start": "2954040",
    "end": "2960880"
  },
  {
    "text": "a moment so therefore the question is this pure or impure well it turns out that most of the stuff that goes on up",
    "start": "2960880",
    "end": "2967040"
  },
  {
    "text": "here is actually pure the only thing we don't really know about is we don't know what get reserve seeds actually does so",
    "start": "2967040",
    "end": "2973119"
  },
  {
    "text": "it may be pure it may be impure now if get reserve seats is sort of like the the repository like it's actually",
    "start": "2973119",
    "end": "2979599"
  },
  {
    "text": "querying a database to get the number of already reserved seats that's an impure operation because it's not deterministic",
    "start": "2979599",
    "end": "2985599"
  },
  {
    "text": "it depends on the state of the database um so in that case it would be impure and if it's if it's impure if that is a",
    "start": "2985599",
    "end": "2992720"
  },
  {
    "text": "database call then all of this function also becomes impure that's how you know how that's how it works in F on the",
    "start": "2992720",
    "end": "2998880"
  },
  {
    "text": "other hand if get reserve seats is a pure function then this function is also pure because there's nothing else in that implementation that could make it",
    "start": "2998880",
    "end": "3005559"
  },
  {
    "text": "impure why is that interesting it's interesting because it turns out that pure functions are always",
    "start": "3005559",
    "end": "3012200"
  },
  {
    "start": "3006000",
    "end": "3139000"
  },
  {
    "text": "testable and I'll get back to why that is but let's just look at what would a test look like what would a unit test",
    "start": "3012200",
    "end": "3018480"
  },
  {
    "text": "look like of this function here's just one example i'm not I'm only going to show you one example just to give you an idea about it so the scenario here is",
    "start": "3018480",
    "end": "3025520"
  },
  {
    "text": "that I want to test that it returns the correct result if there are no prior reservations in the system so the the",
    "start": "3025520",
    "end": "3031520"
  },
  {
    "text": "system just booted up there are absolutely no reservations the restaurant just opened and I want to to",
    "start": "3031520",
    "end": "3037280"
  },
  {
    "text": "check the first reservation that comes into the system that's basically the scenario here so I'm saying well I need to set up a little bit of of context i",
    "start": "3037280",
    "end": "3044160"
  },
  {
    "text": "need to define what the context is so I say well what's the capacity of the restaurant i'm just you know hard coding that in this test case to 10 because",
    "start": "3044160",
    "end": "3050960"
  },
  {
    "text": "well that's just an easy number to think about i like the number 10 and the number one and so on um so so that's",
    "start": "3050960",
    "end": "3058640"
  },
  {
    "text": "just arbitrary but it's just to have a test case then I say for the and on the next line I say let get reserve seats",
    "start": "3058640",
    "end": "3064480"
  },
  {
    "text": "underscore equals zero the underscore means that I don't care about the input this is a local function this is a",
    "start": "3064480",
    "end": "3070720"
  },
  {
    "text": "function that only belongs to this test case but it always returns zero no",
    "start": "3070720",
    "end": "3076000"
  },
  {
    "text": "matter what the input is that is a pure function because it is as deterministic as possible it always returns zero that",
    "start": "3076000",
    "end": "3083680"
  },
  {
    "text": "means there are never any reserve seats in this particular scenario that's a pure function and then I have this let",
    "start": "3083680",
    "end": "3090000"
  },
  {
    "text": "get get res let reservation and then a lot of crap you know uh with with a lot of stuff yes by the way this is my email",
    "start": "3090000",
    "end": "3096319"
  },
  {
    "text": "address um you know all the spammers already have it so you might as well get it as well",
    "start": "3096319",
    "end": "3102318"
  },
  {
    "text": "um so um so that's just you know that's a little bit that looks a little noisy because there's actually a lot of code",
    "start": "3102520",
    "end": "3108480"
  },
  {
    "text": "there but but it's just data and we could put that in some sort of factory if we wanted to do that but I just I'm",
    "start": "3108480",
    "end": "3113680"
  },
  {
    "text": "just showing you a self-contained example here um and then you know on the on the third to last line there it says",
    "start": "3113680",
    "end": "3119839"
  },
  {
    "text": "let actual equal capacity check capacity get reserve seats reservation i'm taking those three arguments that I set up in a",
    "start": "3119839",
    "end": "3126240"
  },
  {
    "text": "range phase and just passing them as arguments i'm getting an actual result back i can and now I can now you know",
    "start": "3126240",
    "end": "3132400"
  },
  {
    "text": "declare what did I expect and compare those two things to each other and this test will either pass or",
    "start": "3132400",
    "end": "3138040"
  },
  {
    "text": "fail that was easy so you might wonder now is it co",
    "start": "3138040",
    "end": "3144000"
  },
  {
    "start": "3139000",
    "end": "3187000"
  },
  {
    "text": "coincidental that this was easy to test and it turns out it's not there is a",
    "start": "3144000",
    "end": "3149359"
  },
  {
    "text": "reason why this was easy to write and the reason is that as long as a function is pure it is intrinsically testable and",
    "start": "3149359",
    "end": "3157599"
  },
  {
    "text": "let's try to understand why that is in order to get help to understand that let's refer to Jessica K jessica K",
    "start": "3157599",
    "end": "3164640"
  },
  {
    "text": "sometimes talks about a concept that she calls isolation and she says um",
    "start": "3164640",
    "end": "3171119"
  },
  {
    "text": "isolation is you know when the only information a function has about the external world is something that is passed into it via arguments then the",
    "start": "3171119",
    "end": "3179040"
  },
  {
    "text": "function has isolation and that is a good thing by the way this is a you know a desirable quality of a function",
    "start": "3179040",
    "end": "3187440"
  },
  {
    "start": "3187000",
    "end": "3247000"
  },
  {
    "text": "um so basically what we're saying is a function does not have any implicit knowledge about the outside world",
    "start": "3187440",
    "end": "3193280"
  },
  {
    "text": "everything it needs to know in order to do what it is that it wants to do needs to be passed in as arguments now is a",
    "start": "3193280",
    "end": "3200880"
  },
  {
    "text": "pure function isolated yes always because a pure function you know is must be",
    "start": "3200880",
    "end": "3207599"
  },
  {
    "text": "deterministic otherwise it's not pure and by deterministic we're saying it should always return the same output",
    "start": "3207599",
    "end": "3213359"
  },
  {
    "text": "given the same input it is only the input that can influence the output of a function so therefore a pure function is",
    "start": "3213359",
    "end": "3219200"
  },
  {
    "text": "a subset of all functions that have isolation the the you know the F# function that I just showed you may not",
    "start": "3219200",
    "end": "3225920"
  },
  {
    "text": "be pure we talked about that but it has isolation because it makes no attempt of",
    "start": "3225920",
    "end": "3231520"
  },
  {
    "text": "you know using it you know implicit knowledge about the world everything it tries to do is based on its function",
    "start": "3231520",
    "end": "3237760"
  },
  {
    "text": "arguments so it has isolation it may not be pure maybe it is we don't know um but",
    "start": "3237760",
    "end": "3243119"
  },
  {
    "text": "at least pure functions the ideal of functional programming all pure functions have",
    "start": "3243119",
    "end": "3248280"
  },
  {
    "start": "3247000",
    "end": "3300000"
  },
  {
    "text": "isolation why is isolation interesting let's talk about unit testing why is in isolation you know important in the",
    "start": "3248280",
    "end": "3255280"
  },
  {
    "text": "context of unit testing well you know let's try to see if we can come up with a definition of unit testing basically",
    "start": "3255280",
    "end": "3261119"
  },
  {
    "text": "you know if you have 10 experts in in unit testing and you ask them to come up with an definition of of what a unit",
    "start": "3261119",
    "end": "3267200"
  },
  {
    "text": "test is you'll get 12 answers um so so it's not really possible to get",
    "start": "3267200",
    "end": "3272400"
  },
  {
    "text": "you know one definition of a unit test but here's one that I use a unit test is an automated test that tests a unit in",
    "start": "3272400",
    "end": "3278160"
  },
  {
    "text": "isolation from its dependencies and most experts in unit testing where they disagree is where all the controversy is",
    "start": "3278160",
    "end": "3285040"
  },
  {
    "text": "is it means it's is basically around you know what is a unit and I'm not",
    "start": "3285040",
    "end": "3290079"
  },
  {
    "text": "particularly interested in what a unit is the thing that I'm interested in in this definition is the word isolation we",
    "start": "3290079",
    "end": "3296880"
  },
  {
    "text": "want to test the unit in isolation of its dependencies this is the same sort of isolation that Jessica car talks",
    "start": "3296880",
    "end": "3303240"
  },
  {
    "start": "3300000",
    "end": "3344000"
  },
  {
    "text": "about all right so let's try to understand why you know why David Hammaya Hansen may be up onto something",
    "start": "3303240",
    "end": "3309839"
  },
  {
    "text": "and why it's not a concern in functional programming so David Hinamaya Hansen says well isolation is an important",
    "start": "3309839",
    "end": "3316240"
  },
  {
    "text": "quality of your code if you want it to be testable and then you know you try to",
    "start": "3316240",
    "end": "3321680"
  },
  {
    "text": "combine that with object-oriented programming and bang you have test induced damage and where I think that",
    "start": "3321680",
    "end": "3327520"
  },
  {
    "text": "David Hamaya Hansen draws the wrong conclusion he says and that's the fault of test-driven development whereas I'm",
    "start": "3327520",
    "end": "3335040"
  },
  {
    "text": "more and more beginning to see I can do test-driven development with a with functional programming and it it does it",
    "start": "3335040",
    "end": "3340400"
  },
  {
    "text": "doesn't it does not leave to lead to test induced damage so therefore the",
    "start": "3340400",
    "end": "3345760"
  },
  {
    "start": "3344000",
    "end": "3444000"
  },
  {
    "text": "problem must be somewhere else and I think actually OOP is the problem so let's try to understand why object-oriented programming is is a",
    "start": "3345760",
    "end": "3352799"
  },
  {
    "text": "problem here now the ideal the design ideal the philosophy behind OOP is",
    "start": "3352799",
    "end": "3358920"
  },
  {
    "text": "encapsulation this is what we're aiming for this is what we were taught is important in object- oriented design if",
    "start": "3358920",
    "end": "3365680"
  },
  {
    "text": "we want to be testable we we now need to aim for this quality of isolation",
    "start": "3365680",
    "end": "3372000"
  },
  {
    "text": "because otherwise it's not really testable now again we are we're in this situation where we're trying to roll a",
    "start": "3372000",
    "end": "3378480"
  },
  {
    "text": "boulder up the hill it is possible to sit there in the intersection between those two uh you know sets and say",
    "start": "3378480",
    "end": "3386240"
  },
  {
    "text": "here's testable OOD it is possible but again you know it",
    "start": "3386240",
    "end": "3392160"
  },
  {
    "text": "requires a lot of effort and it requires a lot of diligence and a lot of you know constant monitoring of what's going on",
    "start": "3392160",
    "end": "3398640"
  },
  {
    "text": "because otherwise you'll probably air to one of the sides and what's often happening is if you don't if you don't",
    "start": "3398640",
    "end": "3404480"
  },
  {
    "text": "have an a focus on you know uh test-driven development or testability you may air to the side of encapsulation",
    "start": "3404480",
    "end": "3410799"
  },
  {
    "text": "that's basically that what happened the first 10 years of the NET framework for example you know um the first 10 years",
    "start": "3410799",
    "end": "3416640"
  },
  {
    "text": "of the baseclass library in net it was infamous for not being particularly testable it's been it's much better now",
    "start": "3416640",
    "end": "3423200"
  },
  {
    "text": "but but it was really difficult to test you know base class libraries the first 10 years of of you know net life the net",
    "start": "3423200",
    "end": "3428960"
  },
  {
    "text": "framework's lifetime now on the other hand if you are focusing on test-driven development you often heir to the side",
    "start": "3428960",
    "end": "3434880"
  },
  {
    "text": "of isolation and um and then you get something that is you know that has this",
    "start": "3434880",
    "end": "3440319"
  },
  {
    "text": "test induced damage that that David Hinami Hansen talked about but in functional programming is different",
    "start": "3440319",
    "end": "3446799"
  },
  {
    "start": "3444000",
    "end": "3494000"
  },
  {
    "text": "because what's the ideal function in functional programming well it's that pure function that we already talked",
    "start": "3446799",
    "end": "3452400"
  },
  {
    "text": "about that is the design ideal it has isolation and because it has isolation",
    "start": "3452400",
    "end": "3458240"
  },
  {
    "text": "it's testable there may be other ways to to make things testable but if they have isolation they tend to be testable but",
    "start": "3458240",
    "end": "3464559"
  },
  {
    "text": "there is no you know there's no intersection that you need to to to fit into basically you know if I had a team",
    "start": "3464559",
    "end": "3470880"
  },
  {
    "text": "of you know developers who are already good at doing functional programming I could basically just you know say to",
    "start": "3470880",
    "end": "3477200"
  },
  {
    "text": "them if I was the lead developer or software architect I could say just write as many pure functions as you can",
    "start": "3477200",
    "end": "3483040"
  },
  {
    "text": "do good functional programming design write pure functions and I'll go on holiday and I'll come back and then",
    "start": "3483040",
    "end": "3489440"
  },
  {
    "text": "we'll see then we can start testing it that might actually be possible because you know if they write pure functions",
    "start": "3489440",
    "end": "3495119"
  },
  {
    "start": "3494000",
    "end": "3537000"
  },
  {
    "text": "they are testable so what I've tried to do here in in this",
    "start": "3495119",
    "end": "3500160"
  },
  {
    "text": "talk is to talk about you know in my experience there are there were lots of things more than three things um that",
    "start": "3500160",
    "end": "3505760"
  },
  {
    "text": "I've experienced during my career as architect and lead developer and so on where I say this requires a lot of",
    "start": "3505760",
    "end": "3511119"
  },
  {
    "text": "effort this is really difficult to do in C and probably also in Java um but it",
    "start": "3511119",
    "end": "3516559"
  },
  {
    "text": "turns out that you know if I try to rephrase the way that I approach my things and use you know functional programming instead all of these things",
    "start": "3516559",
    "end": "3522799"
  },
  {
    "text": "just sort of automatically you know fall into a successful place it just automatically happens so we looked at",
    "start": "3522799",
    "end": "3528559"
  },
  {
    "text": "three things we looked at ports and adapters we looked at services entities and value objects we looked at testability all of these things turn out",
    "start": "3528559",
    "end": "3535119"
  },
  {
    "text": "to to um to work very well it's not the only three i I know of others but I",
    "start": "3535119",
    "end": "3540640"
  },
  {
    "text": "didn't have time for you know to describe any more if you want to know more then um well you can come and talk",
    "start": "3540640",
    "end": "3546240"
  },
  {
    "text": "to me afterwards i I will not have time to do Q&A right now but um I'm happy to talk to you afterwards otherwise you can",
    "start": "3546240",
    "end": "3551599"
  },
  {
    "text": "also visit my blog i you know blog a lot about these things um I also have bullside courses i have bullside courses",
    "start": "3551599",
    "end": "3557680"
  },
  {
    "text": "on you know test-driven development unit testing functional programming uh all sorts of things and you know since I go",
    "start": "3557680",
    "end": "3563520"
  },
  {
    "text": "under the pseudonym I just created this bitly/plur pluralsite um so that's just",
    "start": "3563520",
    "end": "3569359"
  },
  {
    "text": "a link to all my courses if you don't have a Pluralsight subscription you can come and get a voucher i have I I Yeah",
    "start": "3569359",
    "end": "3575920"
  },
  {
    "text": "I'll get it out in a moment i have vouchers that that'll give you a one month trial subscription to Pluralsight",
    "start": "3575920",
    "end": "3581520"
  },
  {
    "text": "for free so you can come and get those if if you need them but otherwise um I'll let you go for lunch in in 10",
    "start": "3581520",
    "end": "3587359"
  },
  {
    "text": "seconds i just want to say if you if you want if you have questions then come and talk to me now or in the hallway or if",
    "start": "3587359",
    "end": "3593680"
  },
  {
    "text": "you see me around in the conference or send me an email or whatever I'll be happy to answer any questions that you have but some of you want to go to lunch",
    "start": "3593680",
    "end": "3600319"
  },
  {
    "text": "now and I think you should do that so thank you all for coming and have a nice lunch",
    "start": "3600319",
    "end": "3606520"
  }
]