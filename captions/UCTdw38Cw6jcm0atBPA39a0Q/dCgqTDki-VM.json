[
  {
    "text": "all right music's going down looks like we're ready to begin we got our slides going it's 5:40 last session of the day",
    "start": "10210",
    "end": "16600"
  },
  {
    "text": "hopefully everybody's brain is already full of knowledge juice at this point",
    "start": "16600",
    "end": "22050"
  },
  {
    "text": "we're gonna take a deeper look at blazer today my name is Ryan Nowak I'm a developer and architect on asp net core",
    "start": "22050",
    "end": "28570"
  },
  {
    "text": "and this is hello I'm Steve Sanderson yeah I'm also same kind of thing as Ryan",
    "start": "28570",
    "end": "33970"
  },
  {
    "text": "we've been working together for how long now a year and a half three or four years it seemed something about quite",
    "start": "33970",
    "end": "40000"
  },
  {
    "text": "wide range yet so and engineer number one an engineer number two on blazer up here so agenda today what are we gonna",
    "start": "40000",
    "end": "46570"
  },
  {
    "text": "do I'm gonna have a short presentation about blazer server we're going to talk about how that works and lots of juicy",
    "start": "46570",
    "end": "52899"
  },
  {
    "text": "details about that a lot of that information applies to blazer client as well but since we just shipped blazer",
    "start": "52899",
    "end": "58300"
  },
  {
    "text": "server I'm mostly going to be talking about that and Steve is going to show us yeah I'm gonna give you some more advanced demos about some things",
    "start": "58300",
    "end": "64960"
  },
  {
    "text": "relating to authorization and authentication which we don't normally get to talk about yeah so all of the",
    "start": "64960",
    "end": "70600"
  },
  {
    "text": "content today is going to be slightly on the advanced side so if you're here hopefully you've heard of blazer so far this is not going to be an introductory",
    "start": "70600",
    "end": "77380"
  },
  {
    "text": "talk this is going to be some more deep technical in-depth content and hopefully that is useful to you or at least",
    "start": "77380",
    "end": "83650"
  },
  {
    "text": "entertaining for you I think there's lots of cool technical stuff to learn about here so let's get started",
    "start": "83650",
    "end": "88900"
  },
  {
    "text": "so Blazer server how does it work today what we're going to talk about",
    "start": "88900",
    "end": "94420"
  },
  {
    "text": "with respect to blazer server is sort of a progression of from the point where you write your code to the point where",
    "start": "94420",
    "end": "101049"
  },
  {
    "text": "the DOM is updating in the UI how does that process work addition what's going",
    "start": "101049",
    "end": "106780"
  },
  {
    "text": "to fall out of that is some information about Blazer performance and the design of how the Blazer rendering process works as well as how to think about the",
    "start": "106780",
    "end": "113530"
  },
  {
    "text": "scale of blazer server in production and this is a deep dive to be totally clear into details that you don't really need",
    "start": "113530",
    "end": "120250"
  },
  {
    "text": "to know so not an introductory course not necessarily a deep reflection of how",
    "start": "120250",
    "end": "125500"
  },
  {
    "text": "to program Blazer or best practices for architecture but if you're the kind of person who likes really detailed",
    "start": "125500",
    "end": "130810"
  },
  {
    "text": "information and you like to know all the low-level secret details this might be useful to you and it might help you",
    "start": "130810",
    "end": "136390"
  },
  {
    "text": "understand and get a better appreciation for what's in Blazer and hopefully it's still fun for everybody and you can",
    "start": "136390",
    "end": "142450"
  },
  {
    "text": "learn something and tickle that part of your brain so at a high level how does blazer",
    "start": "142450",
    "end": "147790"
  },
  {
    "text": "server work you write C sharp and or Razer code it runs on the server in a",
    "start": "147790",
    "end": "153460"
  },
  {
    "text": "dotnet core process so remember blazer server is not the web assembly flavor of blazer it's the dotnet core flavor of blazer and then",
    "start": "153460",
    "end": "161050"
  },
  {
    "text": "though that rendering process that blazer process your application running in a dotnet core process is going to",
    "start": "161050",
    "end": "167290"
  },
  {
    "text": "update the UI and a browser somewhere else on the Internet ooh we do that via",
    "start": "167290",
    "end": "173050"
  },
  {
    "text": "signal are usually over a WebSocket connection so we can send you eye updates from your server to somebody",
    "start": "173050",
    "end": "179110"
  },
  {
    "text": "sitting in their house or on their phone or somewhere else and we're gonna look at questions like how can this work and",
    "start": "179110",
    "end": "185530"
  },
  {
    "text": "how can this be done in a performant way a lot of that information and those sort of motivating design details that make",
    "start": "185530",
    "end": "191920"
  },
  {
    "text": "Blazer server work are true of both web assembly and server and laser server was something we invented well after we had",
    "start": "191920",
    "end": "198820"
  },
  {
    "text": "figured out blazer web assembly so that's why it has so much in common and you'll find that a lot of the details",
    "start": "198820",
    "end": "204010"
  },
  {
    "text": "that are common to Blazer are pivotal to how this can even work in the server side model so if you're the kind of",
    "start": "204010",
    "end": "209980"
  },
  {
    "text": "person who likes diagrams here's a nifty diagram on the left we've got our asp net core process we've got blazer",
    "start": "209980",
    "end": "216160"
  },
  {
    "text": "running on top of your components running on top of net in.net core 3 oh and you've got the signal our",
    "start": "216160",
    "end": "223030"
  },
  {
    "text": "communication channel that is talking to a browser somewhere with a Dom again signal our is that real-time WebSocket",
    "start": "223030",
    "end": "229480"
  },
  {
    "text": "based communication framework this is how we push Dom updates into a browser and this is how we get UI updates our UI",
    "start": "229480",
    "end": "237160"
  },
  {
    "text": "events from a browser as well as things like J's Interop or any other kinds of things that we need to make blaze of",
    "start": "237160",
    "end": "243250"
  },
  {
    "text": "server work with the browser I'll go over that WebSocket channel so when",
    "start": "243250",
    "end": "248560"
  },
  {
    "text": "you're writing your blazer code it's gonna look something like this right we are inside the the counter component",
    "start": "248560",
    "end": "255010"
  },
  {
    "text": "here and I have got another component that I'm using here which I'm calling fancy span which is a fancy sort of span",
    "start": "255010",
    "end": "260859"
  },
  {
    "text": "and that's basically the only modification that I have made to this from the default template I'm going to",
    "start": "260859",
    "end": "266530"
  },
  {
    "text": "switch to that because I've got that over here and just give that a run for y'all you can ignore that for now so I'm",
    "start": "266530",
    "end": "273340"
  },
  {
    "text": "gonna go to the counter page I've got this very exciting fancy ban here and when I click the counter it's gonna go back and forth between",
    "start": "273340",
    "end": "280120"
  },
  {
    "text": "bold Wow that's powerful weekend right revolutionary everyone is going to want",
    "start": "280120",
    "end": "286479"
  },
  {
    "text": "apps that are either bold or not incredibly valuable so this is our sort of motivating example for today and it's",
    "start": "286479",
    "end": "293889"
  },
  {
    "text": "not really that impressive or that complicated and that's great because it's a great opportunity to dig into",
    "start": "293889",
    "end": "299680"
  },
  {
    "text": "these low-level details and see kind of how blazer works on a fundamental level there's not a lot of complexity in the",
    "start": "299680",
    "end": "304990"
  },
  {
    "text": "sample which is hopefully going to help everybody sort of understand the principles here so blazer at its core is",
    "start": "304990",
    "end": "311919"
  },
  {
    "text": "based on a bunch of different primitives and I'm gonna kind of flip back and forth between the code and this thing so",
    "start": "311919",
    "end": "317889"
  },
  {
    "text": "you can see what those are so we have primitives in blazer like elements those are your HTML tags we have primitives in",
    "start": "317889",
    "end": "325389"
  },
  {
    "text": "blazer like components that's where you render another component and use its output and compose with it we have",
    "start": "325389",
    "end": "331479"
  },
  {
    "text": "primitive it's in blazer like attributes attributes can either be parameters that are passed to a component or they can be",
    "start": "331479",
    "end": "338199"
  },
  {
    "text": "attributes on an HTML element and just we also have content and content is well it's content it's just the raw text",
    "start": "338199",
    "end": "344860"
  },
  {
    "text": "output the things that are gonna show up in the DOM is plain text now we also have some high-level constructs like events and at bind and",
    "start": "344860",
    "end": "352960"
  },
  {
    "text": "at on click generally most of your high-level constructs in Blazer are going to map to attributes so there are",
    "start": "352960",
    "end": "359950"
  },
  {
    "text": "probably some special cases there probably some things that I forgot if Steve feels like mentioning them he will",
    "start": "359950",
    "end": "365430"
  },
  {
    "text": "but everything that we're going to look at today for the most part either is one of these four primitives on the top or",
    "start": "365430",
    "end": "371620"
  },
  {
    "text": "maps to an attribute so if I flip back to this I can identify some of these things so up here we've got an element",
    "start": "371620",
    "end": "379110"
  },
  {
    "text": "right here we've got a component you can tell it's a component because upper case and it's bold up here we've got an",
    "start": "379110",
    "end": "386139"
  },
  {
    "text": "attribute we sort of think about attributes being passed to components and attributes being passed to elements",
    "start": "386139",
    "end": "392050"
  },
  {
    "text": "that's like really similar things here we've got some content inside of here",
    "start": "392050",
    "end": "397150"
  },
  {
    "text": "and this text that's being evaluated here this expression that's being evaluated here when you see at something",
    "start": "397150",
    "end": "403030"
  },
  {
    "text": "it's c-sharp code that's going to run and produce a value in Blaser that's actually content - it's just content",
    "start": "403030",
    "end": "409090"
  },
  {
    "text": "that's going to be done ethically computed likewise this c-sharp expression here these at parentheses",
    "start": "409090",
    "end": "414759"
  },
  {
    "text": "thing that's inside of this attribute is just the value of that attribute so we've got all these different kinds of",
    "start": "414759",
    "end": "420550"
  },
  {
    "text": "primitives that we talked about before some some things that probably don't fall into that primitive category that",
    "start": "420550",
    "end": "426400"
  },
  {
    "text": "are going to be mapped to attributes are like this at unclick attribute here what is that so when you see at in front of",
    "start": "426400",
    "end": "433479"
  },
  {
    "text": "an attribute in Blaser that's something we refer to as a directive attribute and there's a couple different categories of",
    "start": "433479",
    "end": "439210"
  },
  {
    "text": "those that you'll see and they all represent like power like they're all like some kind of superpower or something like that so add on click in",
    "start": "439210",
    "end": "445780"
  },
  {
    "text": "this case means this is the C sharp version of the onclick event handler for this button likewise the fact that we",
    "start": "445780",
    "end": "452740"
  },
  {
    "text": "can nest content inside of this fancy span we put some static text in here you",
    "start": "452740",
    "end": "459130"
  },
  {
    "text": "could put other components in here other rendering logic in here and the that's that's like a special kind of value that",
    "start": "459130",
    "end": "464440"
  },
  {
    "text": "will be passed to that fancy span so enough of looking at the code I promised a deep dive and deep dive we shall so",
    "start": "464440",
    "end": "471550"
  },
  {
    "text": "what does the compiler do so a lot of what I spend my time on when I'm working on blazer is writing this compiler along",
    "start": "471550",
    "end": "478570"
  },
  {
    "text": "with some other people on the team and thinking about well when you write all that code and that razor file what does",
    "start": "478570",
    "end": "483699"
  },
  {
    "text": "this turn into what does it output what does it do how does it behave so the way",
    "start": "483699",
    "end": "489220"
  },
  {
    "text": "that dot razor files work is they actually get compiled to c-sharp so all of the all of the app expressions that",
    "start": "489220",
    "end": "496419"
  },
  {
    "text": "are in your c-sharp they appear in like special positions in some generated c-sharp file and then those generated",
    "start": "496419",
    "end": "502330"
  },
  {
    "text": "c-sharp files are passed to the compiler along with your other c-sharp files and ultimately make your assembly so if you",
    "start": "502330",
    "end": "508389"
  },
  {
    "text": "inspect this code and you're very careful you will see those four primitives that we talked about here represented you'll see elements you'll",
    "start": "508389",
    "end": "515500"
  },
  {
    "text": "see content you'll see attributes you'll see components there's a component and",
    "start": "515500",
    "end": "521080"
  },
  {
    "text": "you'll see those four primitives show up here right likewise the content that we passed to that fancy span component is",
    "start": "521080",
    "end": "527770"
  },
  {
    "text": "actually represented as a attribute that has a value that contains a dotnet",
    "start": "527770",
    "end": "532959"
  },
  {
    "text": "lambda so that's how composition generally kind of works in Blaser and at its core it all just goes back to those",
    "start": "532959",
    "end": "539170"
  },
  {
    "text": "four primitives everything is either elements components attributes or content",
    "start": "539170",
    "end": "544860"
  },
  {
    "text": "so the job of the compiler is basically to understand the code you wrote and turn all of that structure into those",
    "start": "544860",
    "end": "551740"
  },
  {
    "text": "four primitives the generated code when it's executed which is the thing that we just looked at is going to produce a",
    "start": "551740",
    "end": "558040"
  },
  {
    "text": "data structure that primarily contains those four primitives so if you think about what's going to be in there it's",
    "start": "558040",
    "end": "563320"
  },
  {
    "text": "going to be that the fact that it's an element and the element name the fact that it's a component and the component",
    "start": "563320",
    "end": "568630"
  },
  {
    "text": "type the fact that it's an attribute and its name and value and we call this process of rendering so if you look at a",
    "start": "568630",
    "end": "575260"
  },
  {
    "text": "component class and it's got a build render tree method or we hear us talking about rendering rendering the pro is the",
    "start": "575260",
    "end": "580630"
  },
  {
    "text": "process of executing all of the code that's in here that's not inside the",
    "start": "580630",
    "end": "585760"
  },
  {
    "text": "code block and getting its output so what does it output well we can look at",
    "start": "585760",
    "end": "591520"
  },
  {
    "text": "that too I captured this data earlier today using Steve's cool unit testing prototype that",
    "start": "591520",
    "end": "596530"
  },
  {
    "text": "he showed during his talk if you're really smart and you feel up to it you can try just building a component",
    "start": "596530",
    "end": "602200"
  },
  {
    "text": "writing a unit test and then set a breakpoint inside that renderer and you can see what the renderer actually works",
    "start": "602200",
    "end": "607630"
  },
  {
    "text": "with so I have simplified things and I have tried to sort of extract the parts",
    "start": "607630",
    "end": "612640"
  },
  {
    "text": "of this that are useful for teaching so that we can look at them and this is the output of rendering the component that",
    "start": "612640",
    "end": "619000"
  },
  {
    "text": "we've been looking at that counter component and that fancy span and doing its first render and getting kind of its",
    "start": "619000",
    "end": "624520"
  },
  {
    "text": "snapshot what is all the Dom what is all of those four primitives that we produce",
    "start": "624520",
    "end": "630400"
  },
  {
    "text": "from that first render so you can see we're inside the counter component here",
    "start": "630400",
    "end": "635470"
  },
  {
    "text": "on the Left we have some markup one of the optimizations that we do in Blaser is that when you contain when you have",
    "start": "635470",
    "end": "642730"
  },
  {
    "text": "elements attributes and content that are entirely static within the page like this h1 banner that contains the text",
    "start": "642730",
    "end": "649810"
  },
  {
    "text": "counter we'll sort of reduce that into a single node for the purposes of optimization so don't let that throw you",
    "start": "649810",
    "end": "655110"
  },
  {
    "text": "then you can see we open an element here that's div then you can see we open the",
    "start": "655110",
    "end": "660280"
  },
  {
    "text": "fancy span and so on and so on and so on it's all those four primitives on the right-hand side you see the rendering",
    "start": "660280",
    "end": "666040"
  },
  {
    "text": "output of the fancy span both of these two components produce their own independent sets of frames so an",
    "start": "666040",
    "end": "672100"
  },
  {
    "text": "important takeaway or conclusion from this to understand about how components work is that each component",
    "start": "672100",
    "end": "677500"
  },
  {
    "text": "his own set of frames it has its own output and they're independent and gets stitched together later shall we say why",
    "start": "677500",
    "end": "683350"
  },
  {
    "text": "its frames are not a kind of tree structure please okay right so when this stuff is getting rendered we've got a",
    "start": "683350",
    "end": "690220"
  },
  {
    "text": "big array in memory that we can fill up with these render frames so as we're",
    "start": "690220",
    "end": "695530"
  },
  {
    "text": "going through invoking each of these instructions in the render method that adds a frame into this array and we keep",
    "start": "695530",
    "end": "701170"
  },
  {
    "text": "going through populate in that array now that's not the most obvious way to do it a more obvious way would be to build up a kind of hierarchical tree structure",
    "start": "701170",
    "end": "707680"
  },
  {
    "text": "where every time you add a new okhla new element will you know create an element instance and then we'll recursively",
    "start": "707680",
    "end": "713110"
  },
  {
    "text": "start populating that and build a big recursive data graph in memory and we could totally have done that but that",
    "start": "713110",
    "end": "719080"
  },
  {
    "text": "wouldn't have performed anywhere near as well because it would be constantly allocating for every single thing it",
    "start": "719080",
    "end": "724300"
  },
  {
    "text": "needs in that tree structure and so as a pretty important optimization for us we want rendering to not allocate memory it",
    "start": "724300",
    "end": "731290"
  },
  {
    "text": "should operate other fixed buffers of data and that's why we've got these these arrays of frames that we populate",
    "start": "731290",
    "end": "737650"
  },
  {
    "text": "and and it makes things look a lot more complicated and it is but you know you don't have to worry about that for your",
    "start": "737650",
    "end": "743380"
  },
  {
    "text": "normal programming tasks yeah so everything that Steve just mentioned is true by the way Surrender frames are",
    "start": "743380",
    "end": "749530"
  },
  {
    "text": "what we call the output of building the rendering tree it's a declarative format and the great thing about render frames",
    "start": "749530",
    "end": "755050"
  },
  {
    "text": "is a format is it's very efficient as Steve mentioned and it's very efficient for doing a bunch of things that we care",
    "start": "755050",
    "end": "760060"
  },
  {
    "text": "about you can very efficiently turn it over turn it into HTML in oh of n operation so a single pass over the",
    "start": "760060",
    "end": "766540"
  },
  {
    "text": "frames and you can very very efficiently diff outputs of render frames so if you",
    "start": "766540",
    "end": "772180"
  },
  {
    "text": "have two sets of render frames that come from the same components it's designed for diffing",
    "start": "772180",
    "end": "777940"
  },
  {
    "text": "now I didn't mention these numbers and some of you probably wondered what these numbers were I'm not going to give it an",
    "start": "777940",
    "end": "783550"
  },
  {
    "text": "extremely detailed explanation of how this works but the numbers exist as an aid to the diffing system so they",
    "start": "783550",
    "end": "789580"
  },
  {
    "text": "basically what the numbers map to is the line of code effectively the logical",
    "start": "789580",
    "end": "795040"
  },
  {
    "text": "line of code that produced this render frame and the way that that works is when you have conditions in the generated code or you have conditions in",
    "start": "795040",
    "end": "801400"
  },
  {
    "text": "your code or loops in your code those sequence numbers will reflect the control flow that took place when you",
    "start": "801400",
    "end": "807550"
  },
  {
    "text": "executed the application and will help in diffing who so in general why do we care about",
    "start": "807550",
    "end": "815320"
  },
  {
    "text": "dipping we care about dipping because of two things because in Blazer server we're gonna",
    "start": "815320",
    "end": "821140"
  },
  {
    "text": "send the diffs or send Dom updates over the network we want it to be the most efficient set of data the smallest set",
    "start": "821140",
    "end": "827470"
  },
  {
    "text": "of data that's necessary to get the output that you want the other reason why we care about dipping is both for",
    "start": "827470",
    "end": "832870"
  },
  {
    "text": "Blazers server and for blazer webassembly Dom updates are very comparatively expensive to all the other",
    "start": "832870",
    "end": "838390"
  },
  {
    "text": "things that we're doing here things like running your rendering method or building the render tree or doing the diff itself are actually fairly cheap",
    "start": "838390",
    "end": "844780"
  },
  {
    "text": "compared to doing things like updating the Dom so we'd like to avoid updating the Dom when necessary and we'd also",
    "start": "844780",
    "end": "850450"
  },
  {
    "text": "like to ensure that we can transmit the minimal amount of information so I think Steve mentioned a lot of these things",
    "start": "850450",
    "end": "856480"
  },
  {
    "text": "already so I won't go into this in I won't read my own slides at you but the important part here that I think is is",
    "start": "856480",
    "end": "863080"
  },
  {
    "text": "to explain in a little bit more detail as what is on the right so each component has its own set of frames that",
    "start": "863080",
    "end": "868750"
  },
  {
    "text": "come out as its output and just like that each component is is designed to",
    "start": "868750",
    "end": "874420"
  },
  {
    "text": "sort of render independently from the rest of system so the way that the render infrastructure is is is designed",
    "start": "874420",
    "end": "880360"
  },
  {
    "text": "is we queue up components for rendering during the rendering process of a component it might trigger other",
    "start": "880360",
    "end": "886330"
  },
  {
    "text": "components to render and we basically try to find the minimal set that needs to render and execute them in order",
    "start": "886330",
    "end": "891400"
  },
  {
    "text": "until there's nothing left so what causes a component to render what causes a component to update its State when I",
    "start": "891400",
    "end": "897880"
  },
  {
    "text": "say render you should think update state right when I click that button something went bold inside the fancy",
    "start": "897880",
    "end": "903370"
  },
  {
    "text": "span and something went bold inside the counter the kinds of things that make a component render are first of all its",
    "start": "903370",
    "end": "909430"
  },
  {
    "text": "initial creation second of all when parameters change third when an event happens and fourth arbitrary reasons",
    "start": "909430",
    "end": "916660"
  },
  {
    "text": "that you decide the most common one being things like background timers or other kinds of notifications that come",
    "start": "916660",
    "end": "922000"
  },
  {
    "text": "from your app code ultimately it's the component that decides when to render itself if you're using razor code to",
    "start": "922000",
    "end": "928810"
  },
  {
    "text": "author components or you're inheriting from component base you're getting all these behaviors by default as well so",
    "start": "928810",
    "end": "935290"
  },
  {
    "text": "who renders in our example I clicked I click the increment count button and we",
    "start": "935290",
    "end": "940630"
  },
  {
    "text": "saw that we saw that the current count changed which implies that we would need to render this page the counter page and we",
    "start": "940630",
    "end": "948190"
  },
  {
    "text": "also saw that the fancy span toggles every time you click from bold to not bold and back and so on so can we figure out why we render well",
    "start": "948190",
    "end": "956500"
  },
  {
    "text": "this component has to render because it handled in event so we click the on click button increment count is a method",
    "start": "956500",
    "end": "962920"
  },
  {
    "text": "on this class and so we're ear under the counter component then when we're rerender encountered component we",
    "start": "962920",
    "end": "969220"
  },
  {
    "text": "evaluate this expression we compare that to the previous value of is bold and we see that that has changed and so the",
    "start": "969220",
    "end": "975820"
  },
  {
    "text": "fancy span also has to render so each of these rendering decisions is somewhat independent from each other and tries to",
    "start": "975820",
    "end": "981760"
  },
  {
    "text": "be efficient and do the minimal amount of work when necessary in this case something we're passing into the fancy span said hey you've got to update",
    "start": "981760",
    "end": "988180"
  },
  {
    "text": "because the value is different so how does the dip I'm not gonna go an",
    "start": "988180",
    "end": "994060"
  },
  {
    "text": "incredible incredible detail about the different how the different works I think Steve might have a few things to say about it",
    "start": "994060",
    "end": "999070"
  },
  {
    "text": "we've got some awesome documentation for it it's called the source code you can read that generally generally the bus",
    "start": "999070",
    "end": "1006240"
  },
  {
    "text": "with the different code I have to acknowledge this is difficult for me I'm gonna take a moment the bus factor on",
    "start": "1006240",
    "end": "1011520"
  },
  {
    "text": "diffing code is very high Steve and Javier are I think the only people who really understand what's going on there",
    "start": "1011520",
    "end": "1017430"
  },
  {
    "text": "and maybe maybe I'm being generous to to Javier anyway if Europe sinks into the sea",
    "start": "1017430",
    "end": "1022950"
  },
  {
    "text": "expect a rewrite of blazer anyway so what the dipping process the diffing",
    "start": "1022950",
    "end": "1028140"
  },
  {
    "text": "process basically batches through lists of frames that are known to have come from the same component and what it",
    "start": "1028140",
    "end": "1033209"
  },
  {
    "text": "outputs is a different set of instructions so it's a set of instructions to basically turn the",
    "start": "1033209",
    "end": "1038400"
  },
  {
    "text": "current state into the future state so these are these are the diff outputs",
    "start": "1038400",
    "end": "1043650"
  },
  {
    "text": "from clicking that button and we'll do the right side first because it's really simple the right side produces one diff",
    "start": "1043650",
    "end": "1050160"
  },
  {
    "text": "one diff instruction not one diff one diff instruction and it says set attribute and then it will have a",
    "start": "1050160",
    "end": "1056670"
  },
  {
    "text": "pointer to this frame and it will say set the style attribute to nothing to empty and that's it that's the only",
    "start": "1056670",
    "end": "1064290"
  },
  {
    "text": "difference a span so when we when we run dipping after doing that click the only thing we need to do to the Dom is we",
    "start": "1064290",
    "end": "1070170"
  },
  {
    "text": "need to find that attribute and we need to set its value to zero likewise the",
    "start": "1070170",
    "end": "1075240"
  },
  {
    "text": "counter component is a little bit more accomplished we need to upkeep that count value remember that's content from zero to one",
    "start": "1075240",
    "end": "1081950"
  },
  {
    "text": "and that content is inside of div and P tags so we have a step in so we step",
    "start": "1081950",
    "end": "1087950"
  },
  {
    "text": "into a P a div tag then we step in to a P tag and then we update that text and",
    "start": "1087950",
    "end": "1094309"
  },
  {
    "text": "then we step out and step out now how does the system know that we're stepping into a P tag how does a system know that",
    "start": "1094309",
    "end": "1100999"
  },
  {
    "text": "we're stepping into a div tag well remember that output we looked at before that big honkin output for counter",
    "start": "1100999",
    "end": "1106489"
  },
  {
    "text": "component these diff instructions I'm not showing it to you here but they have offsets and they say like step into the",
    "start": "1106489",
    "end": "1112399"
  },
  {
    "text": "one at offset of three or something like that right and it ends up being like these dips are very coupled to exactly",
    "start": "1112399",
    "end": "1118249"
  },
  {
    "text": "what state came before and exactly what step state came afterwards so think about that I'm not again I'm not showing",
    "start": "1118249",
    "end": "1124820"
  },
  {
    "text": "all the details here because I don't want to make everybody's heads explode but I want you to get the point which is that the system is designed to produce",
    "start": "1124820",
    "end": "1131389"
  },
  {
    "text": "the really minimal set of changes that need to happen it's fairly sophisticated to guarantee that and we do that by",
    "start": "1131389",
    "end": "1136700"
  },
  {
    "text": "identifying exactly what parts of the Dom need to change and changing only those parts at no point do we like",
    "start": "1136700",
    "end": "1142399"
  },
  {
    "text": "generate new HTML and just paste over something like we go by manipulating things so benefits of dipping it's",
    "start": "1142399",
    "end": "1149809"
  },
  {
    "text": "really cheap all the stuff that we've talked about here so far in that the framework is doing on your hat on your",
    "start": "1149809",
    "end": "1155179"
  },
  {
    "text": "behalf is very comparatively inexpensive compared to things like updating the Dom or sending bytes over the network",
    "start": "1155179",
    "end": "1161679"
  },
  {
    "text": "components are designed to only render if they have a reason usually that's going to just work in your favor and",
    "start": "1161679",
    "end": "1167419"
  },
  {
    "text": "your components aren't going to do any work if they don't have anything interesting to do one of the nice side",
    "start": "1167419",
    "end": "1173329"
  },
  {
    "text": "effects of doing dipping is if your component does rerender and it produces the same output you'll get a zero diff",
    "start": "1173329",
    "end": "1179119"
  },
  {
    "text": "so there's nothing to do and it can short-circuit very nicely and the things that are comparatively expensive in",
    "start": "1179119",
    "end": "1184639"
  },
  {
    "text": "terms of the Blaser UI process are network transmission of Dom updates which we we sort of amortize by batching",
    "start": "1184639",
    "end": "1192649"
  },
  {
    "text": "and dama the actual Dom updates themselves are comparatively expensive so how does the server work and I'm",
    "start": "1192649",
    "end": "1200269"
  },
  {
    "text": "going to speed up a little bit here because I want to make sure Steve has time to do his demos and cool little stuff and we're also going to leave a",
    "start": "1200269",
    "end": "1206029"
  },
  {
    "text": "little bit of time for questions so how does this work when we introduce Blaser server to the mix",
    "start": "1206029",
    "end": "1211220"
  },
  {
    "text": "well rendering with Blaser server how we actually apply the updates to the UI how",
    "start": "1211220",
    "end": "1216260"
  },
  {
    "text": "we run your components how we figure out what to change in the UI everything you've heard so far is the same so the",
    "start": "1216260",
    "end": "1222770"
  },
  {
    "text": "process of how do we figure out what operations to do on the UI totally the same between web assembly and blazer",
    "start": "1222770",
    "end": "1228530"
  },
  {
    "text": "server adding the server just means that the Dom updates have to go over the wire so we have to send them over that signal",
    "start": "1228530",
    "end": "1235610"
  },
  {
    "text": "our connection that we talked about and we choose signal R because it's got it's bi-directional it's got low latency and",
    "start": "1235610",
    "end": "1241100"
  },
  {
    "text": "it's got a very low amount of overhead per message in addition to that we use the message pack format instead of",
    "start": "1241100",
    "end": "1246410"
  },
  {
    "text": "something more verbose like JSON so we use a very optimized binary format to transform these frames over the wire I'm",
    "start": "1246410",
    "end": "1253640"
  },
  {
    "text": "going to break from my prepared remarks and just show a quick demo of this in",
    "start": "1253640",
    "end": "1259100"
  },
  {
    "text": "the interest of time so let's run this up and I'm going to show you what's happening in the UI here just to sort of",
    "start": "1259100",
    "end": "1265820"
  },
  {
    "text": "prove that that's what's happening so I've got my counter page here that's very exciting and I'm gonna I can't zoom",
    "start": "1265820",
    "end": "1273620"
  },
  {
    "text": "in any closer on that unfortunately and I'm gonna find that area of the DOM and then I'm gonna expand this you can see",
    "start": "1273620",
    "end": "1279980"
  },
  {
    "text": "our fancy span and you can see hopefully the font size is is pretty good it's it's kind of a challenge to make the",
    "start": "1279980",
    "end": "1286520"
  },
  {
    "text": "font size bigger in the developer tool so you can see when I click this it's gonna kind of flash on the screen so you",
    "start": "1286520",
    "end": "1292100"
  },
  {
    "text": "can see Chrome can tell you exactly what changed in the DOM and it's because we're only changing those parts now the",
    "start": "1292100",
    "end": "1298310"
  },
  {
    "text": "other piece of this that I want to highlight here is I'll refresh this because the network tab always wants you",
    "start": "1298310",
    "end": "1303530"
  },
  {
    "text": "to refresh things I'll refresh this and you can see that I've got this web socket over here and I can look at this",
    "start": "1303530",
    "end": "1309710"
  },
  {
    "text": "web socket and I can see all of these messages that are coming through this web sockets you can see we're getting a",
    "start": "1309710",
    "end": "1314780"
  },
  {
    "text": "243 bite down message and we're getting a 27 message back and and so on so when",
    "start": "1314780",
    "end": "1320210"
  },
  {
    "text": "you keep clicking this you see these messages fly and they're all sort of on the order of like 200 250 bytes",
    "start": "1320210",
    "end": "1325370"
  },
  {
    "text": "something like that that's the size of that payload that's saying update this count and set the style attribute to two",
    "start": "1325370",
    "end": "1332480"
  },
  {
    "text": "empty that's what's going over the wire and that's that 200 bytes so that's that's roughly what the message format is like the message format because it's",
    "start": "1332480",
    "end": "1340250"
  },
  {
    "text": "based on message pack which is a binary format it's not human readable so we're really going to look at it as far as how",
    "start": "1340250",
    "end": "1346729"
  },
  {
    "text": "do we do the server-side communication how does this work so I can show that as well when we do a when you do a",
    "start": "1346729",
    "end": "1353749"
  },
  {
    "text": "connection and when you browse to that initial page you get this blob of HTML back that's in part of the page and this",
    "start": "1353749",
    "end": "1359779"
  },
  {
    "text": "can be whether you're using pre rendering with blazer or not but when we run through your server-side code we say",
    "start": "1359779",
    "end": "1364999"
  },
  {
    "text": "well we're gonna put the counter component here we're gonna put the app component here so we generate in a comment in the page the sort of set of",
    "start": "1364999",
    "end": "1372619"
  },
  {
    "text": "instructions for what the server can do we call this a marker these markers are encrypted payloads so it's something",
    "start": "1372619",
    "end": "1379039"
  },
  {
    "text": "that only the server will be able to understand and really the reason why we have encryption there is to prevent",
    "start": "1379039",
    "end": "1384919"
  },
  {
    "text": "tampering to prevent you from injecting like sort of garbage data in there it would be very hard or very impossible",
    "start": "1384919",
    "end": "1390589"
  },
  {
    "text": "for you to brute-force this and come up with a data payload that's going to do something different there also time",
    "start": "1390589",
    "end": "1396169"
  },
  {
    "text": "stamps so you can't really replay them beyond like 30 seconds after when it was issued so then the client opens that",
    "start": "1396169",
    "end": "1402469"
  },
  {
    "text": "WebSocket connection to the server and it basically sends back this information and says hey this is who I am and it's",
    "start": "1402469",
    "end": "1409039"
  },
  {
    "text": "the full list of instructions of what the server needs to do to get you into the sort of initialized state so in this",
    "start": "1409039",
    "end": "1414499"
  },
  {
    "text": "case the instructions go to the server that say well my component that is the root component of this app is you know",
    "start": "1414499",
    "end": "1421249"
  },
  {
    "text": "my site app go ahead and load that and that's how the server gets into the same state and then you're connected and",
    "start": "1421249",
    "end": "1427519"
  },
  {
    "text": "things start working so how this works you get a signal our connection over",
    "start": "1427519",
    "end": "1432949"
  },
  {
    "text": "that connection you get a secret ID the browser holds on to that secret ID and",
    "start": "1432949",
    "end": "1438109"
  },
  {
    "text": "can use it to reconnect if something goes wrong and that's important because on the server we have to retain the",
    "start": "1438109",
    "end": "1444229"
  },
  {
    "text": "ability to diff with the client so we need a persistent connection to the server because all your state and all your components are in memory we will",
    "start": "1444229",
    "end": "1451459"
  },
  {
    "text": "hold on to your components in memory on the server until you disconnect and things timeout or until you gracefully",
    "start": "1451459",
    "end": "1457429"
  },
  {
    "text": "close so if you close the browser tab or if you navigate away from the site for instance will will detect that inside",
    "start": "1457429",
    "end": "1463519"
  },
  {
    "text": "the browser will send a message to the server and will instantly kill all your state on the server I already showed the",
    "start": "1463519",
    "end": "1469279"
  },
  {
    "text": "client-server communication let's actually look at one more thing so when",
    "start": "1469279",
    "end": "1474379"
  },
  {
    "text": "you're using server-side Blaser and these are sort of debug level logs I don't expect anybody",
    "start": "1474379",
    "end": "1480149"
  },
  {
    "text": "to be able to really get what's going on here but I think maybe if you look carefully you can see some of the things",
    "start": "1480149",
    "end": "1486480"
  },
  {
    "text": "that we're talking about here so when I click this button it sends a signal our message to the server that's where my",
    "start": "1486480",
    "end": "1492870"
  },
  {
    "text": "cursor is right now that says hey the mouse was clicked here on this button then that goes to my event handler",
    "start": "1492870",
    "end": "1498600"
  },
  {
    "text": "that's event 3 it's Mouse event args and you can see we render the counter we",
    "start": "1498600",
    "end": "1504120"
  },
  {
    "text": "render the fancy span we get a batch batch number seven of size 217 bytes and",
    "start": "1504120",
    "end": "1509639"
  },
  {
    "text": "that sent to the client and then the client acknowledges the batch and says hey I got it I did the thing I applied",
    "start": "1509639",
    "end": "1514769"
  },
  {
    "text": "the update and that's roughly how eventing and communication work in in server-side laser cool cool so I think",
    "start": "1514769",
    "end": "1521730"
  },
  {
    "text": "I'm gonna wrap there and yield the rest of my time to Steve you don't you don't want it in the bandwidth thing oh we can",
    "start": "1521730",
    "end": "1527070"
  },
  {
    "text": "do the bandwidth thing so in case you've been curious about performance of signal are yeah let's let's go ahead and do",
    "start": "1527070",
    "end": "1532139"
  },
  {
    "text": "this so in case you've been curious about this this is a question that we get a lot that comes up a lot when we're",
    "start": "1532139",
    "end": "1537419"
  },
  {
    "text": "talking about server-side Blaser is people people think about it really hard and they say well that probably can't",
    "start": "1537419",
    "end": "1542549"
  },
  {
    "text": "work that probably is not going to have good performance it probably is not possible this is a comparison I made of",
    "start": "1542549",
    "end": "1549179"
  },
  {
    "text": "the bandwidth of some of the things that you might use day to day so I gathered this by using another code sample that I",
    "start": "1549179",
    "end": "1555779"
  },
  {
    "text": "didn't show here but I'm happy to show anybody later I've got a form with like five text fields on it and I'm just",
    "start": "1555779",
    "end": "1561029"
  },
  {
    "text": "typing in those text fields and basically doing the kinds of things you do in an enterprise or line of business app and the Dom updates or the the diff",
    "start": "1561029",
    "end": "1568080"
  },
  {
    "text": "dips that are getting sent across the wire per operation in that more complicated case are more like 500 bytes",
    "start": "1568080",
    "end": "1574830"
  },
  {
    "text": "so if you think about I'm entering things once a second on a form field each of your connected clients in a",
    "start": "1574830",
    "end": "1581309"
  },
  {
    "text": "blazer server application is costing you Oh point zero five kilobits per second of bandwidth compared to something like",
    "start": "1581309",
    "end": "1588389"
  },
  {
    "text": "Spotify on desktop which is using 160 kilobytes or YouTube at its like worst",
    "start": "1588389",
    "end": "1593639"
  },
  {
    "text": "resolution using like a thousand kilobits yeah so in a world where video games can be streamed over the Internet",
    "start": "1593639",
    "end": "1599970"
  },
  {
    "text": "1080p or even 4k as Google are saying you know or not to be surprising that we can stream button clicks is not actually",
    "start": "1599970",
    "end": "1607440"
  },
  {
    "text": "that hard yeah so if you want to if you want to understand or think about how to plan",
    "start": "1607440",
    "end": "1612920"
  },
  {
    "text": "performance of a blazer server application of the thing that actually matters is latency so latency of more",
    "start": "1612920",
    "end": "1619070"
  },
  {
    "text": "than 200 to 250 milliseconds feels bad it will start to feel laggy if you're more than that amount fortunately it's",
    "start": "1619070",
    "end": "1624560"
  },
  {
    "text": "relatively easy to get latency better than that but if your application involves devices that are going to have",
    "start": "1624560",
    "end": "1630100"
  },
  {
    "text": "unreliable network connections or that network connections with a lot of packet loss Blaser is not a good a blazer",
    "start": "1630100",
    "end": "1636980"
  },
  {
    "text": "server is not a good choice for that blazer client is a great choice however most of most of our use cases",
    "start": "1636980",
    "end": "1643370"
  },
  {
    "text": "involve like being in our office having a good internet connection being close to the data center or some little",
    "start": "1643370",
    "end": "1650510"
  },
  {
    "text": "app that like 10 people are going to use the the latency and the impact of the Dom updates is going to depend on the",
    "start": "1650510",
    "end": "1656720"
  },
  {
    "text": "kind of interaction so if you intend to build an application that's got a big text field on it and you're gonna type",
    "start": "1656720",
    "end": "1662510"
  },
  {
    "text": "your diary of everything that happened in your life in there it's gonna be 30 megabytes the performance of that is going to be very poor because that's",
    "start": "1662510",
    "end": "1669440"
  },
  {
    "text": "something that has to be sent back and forth over the wire time and time again but for the kinds of applications that people typically use build and use",
    "start": "1669440",
    "end": "1675800"
  },
  {
    "text": "inside businesses the the size of the Dom updates is not a very big factor you can design to make smaller updates",
    "start": "1675800",
    "end": "1682550"
  },
  {
    "text": "but that's more of a consideration for people writing complicated controls like forms or tables or filtering grids",
    "start": "1682550",
    "end": "1688990"
  },
  {
    "text": "however the performance consideration that does matter is memory so because",
    "start": "1688990",
    "end": "1694550"
  },
  {
    "text": "every connected client reserves some amount of memory and has their components in memory on the server the",
    "start": "1694550",
    "end": "1700370"
  },
  {
    "text": "amount of memory that each of your that your components use in your app and the amount of memory that the framework uses",
    "start": "1700370",
    "end": "1705920"
  },
  {
    "text": "is a consideration that you have to care a lot about so we did an experiment we did some experiments with this before we",
    "start": "1705920",
    "end": "1711860"
  },
  {
    "text": "shipped Blaser we did this really cool thing where we wrote a headless client for testing Blaser",
    "start": "1711860",
    "end": "1716960"
  },
  {
    "text": "i'm not going to get incredibly deep with it but basically we needed something that we could test Blaser better that with better than something",
    "start": "1716960",
    "end": "1724370"
  },
  {
    "text": "like selenium which is slow and heavy so we wrote a client that uses signal art to talk to Blaser directly and basically",
    "start": "1724370",
    "end": "1730460"
  },
  {
    "text": "simulates a client so that we could run lots of them and we did an experiment on",
    "start": "1730460",
    "end": "1735500"
  },
  {
    "text": "Azure so a small vm for us a DSD 1 v 2 which is like a single-core small via",
    "start": "1735500",
    "end": "1743179"
  },
  {
    "text": "gracefully handled five-thousand concurrent clients so that's five thousand clients doing a very simple forms thing with no degradation in",
    "start": "1743179",
    "end": "1750169"
  },
  {
    "text": "latency was once we got significantly higher than five thousand clients that we started to see the latency spiked and",
    "start": "1750169",
    "end": "1757070"
  },
  {
    "text": "that was mostly due to memory consumption and garbage collection pressure likewise we tried a much more",
    "start": "1757070",
    "end": "1762620"
  },
  {
    "text": "powerful VM and we were able to very comfortably run 20,000 concurrent clients on that on that VM so thanks",
    "start": "1762620",
    "end": "1771470"
  },
  {
    "text": "that's my bit I'm gonna hand things over to Steve all right next app if you want to help us out excellent",
    "start": "1771470",
    "end": "1777530"
  },
  {
    "text": "all right let's switch control hmm okay afterwards if you don't mind yeah right",
    "start": "1777530",
    "end": "1783980"
  },
  {
    "text": "then so we can turn the screen back on excellent right so during my part of",
    "start": "1783980",
    "end": "1791059"
  },
  {
    "text": "this talk I want to tell you some slightly more advanced stuff about some things with authorization and",
    "start": "1791059",
    "end": "1797630"
  },
  {
    "text": "authentication which is an interesting topic that doesn't get a lot of coverage before we really get into showing you",
    "start": "1797630",
    "end": "1804380"
  },
  {
    "text": "how to do stuff with it I want to show you what we gonna give you out of the box when you clear create a new laser",
    "start": "1804380",
    "end": "1810110"
  },
  {
    "text": "application from the project template today you might have seen this you might not so when you create a blazer server",
    "start": "1810110",
    "end": "1815390"
  },
  {
    "text": "application you get the choice to use your tri-ball if you turn it on you get",
    "start": "1815390",
    "end": "1821690"
  },
  {
    "text": "to Bill to choose what authentication method you want to use so if you click on this button you'll see that we've got",
    "start": "1821690",
    "end": "1827900"
  },
  {
    "text": "a bunch of different options for you we can let you use no authentication if you want to you can use individual accounts",
    "start": "1827900",
    "end": "1833690"
  },
  {
    "text": "which are stored in a database inside your application we also let you connect to various cloud-based user identity",
    "start": "1833690",
    "end": "1841700"
  },
  {
    "text": "stores and finally we've got good old windows authentication Steve are these the same options as normal server-side",
    "start": "1841700",
    "end": "1847910"
  },
  {
    "text": "asp net core they are in fact the same options at the same UI so if you have any options that you're using with",
    "start": "1847910",
    "end": "1853700"
  },
  {
    "text": "server-side asp net core we expect them to work with Blaser as well they will indeed work yes because there's nothing",
    "start": "1853700",
    "end": "1859130"
  },
  {
    "text": "different when it comes to what's happening at runtime with making this work on the server so i'm going to",
    "start": "1859130",
    "end": "1864530"
  },
  {
    "text": "quickly show you what happens if we create the store the option to use individual user accounts stored inside",
    "start": "1864530",
    "end": "1871280"
  },
  {
    "text": "the application so when that project has created itself and restored its packages",
    "start": "1871280",
    "end": "1876740"
  },
  {
    "text": "I can start this up in a browser and what we'll hopefully see is something that looks pretty familiar like a normal",
    "start": "1876740",
    "end": "1884320"
  },
  {
    "text": "standard blazer project you probably seen this about a hundred times by now the thing about it there's slightly",
    "start": "1884320",
    "end": "1889399"
  },
  {
    "text": "different to usual is that up here in the top right you can see we've got these register and login links so let's",
    "start": "1889399",
    "end": "1894860"
  },
  {
    "text": "say I want to login well I have to really have to register myself first because I don't have an account and when",
    "start": "1894860",
    "end": "1900110"
  },
  {
    "text": "I click that you see it goes over into this slightly different looking UI and this is supplied by a feature that's",
    "start": "1900110",
    "end": "1906320"
  },
  {
    "text": "built into asp net core on the server it's called identity and it provides birth and UI for user management as well",
    "start": "1906320",
    "end": "1913279"
  },
  {
    "text": "as the data store for it and that's integrated with blazer on the server there so let's register myself that's",
    "start": "1913279",
    "end": "1919309"
  },
  {
    "text": "not really my email address but it will work well enough and type in a password",
    "start": "1919309",
    "end": "1924470"
  },
  {
    "text": "that's good enough for the password policy when I first do that because I'm the first ever person to use this site",
    "start": "1924470",
    "end": "1931220"
  },
  {
    "text": "it doesn't actually even have a database yet so it's going to give me this error message saying that I need to create the database that won't happen if you deploy",
    "start": "1931220",
    "end": "1937789"
  },
  {
    "text": "to production but it does when you're running locally so I've created my database now and then I'll hit continue",
    "start": "1937789",
    "end": "1943820"
  },
  {
    "text": "or reload and then hopefully well let's try that one more time when it's finished creating the database then it",
    "start": "1943820",
    "end": "1949730"
  },
  {
    "text": "will let me in and you'll see I am indeed logged in as that person and of course I can do things like logout",
    "start": "1949730",
    "end": "1955490"
  },
  {
    "text": "I could log back in let's give my username again and we go okay so we've got a user",
    "start": "1955490",
    "end": "1963230"
  },
  {
    "text": "database and we've been able to keep track of who's logged in and we could now start using the normal blazer",
    "start": "1963230",
    "end": "1968840"
  },
  {
    "text": "programming model to produce different UI depending on who's logged in and what kind of capabilities and powers they",
    "start": "1968840",
    "end": "1975470"
  },
  {
    "text": "should have okay so that's what we've got built into the box but what I think I would like to for us to spend our time",
    "start": "1975470",
    "end": "1982340"
  },
  {
    "text": "doing now is going to a much more advanced level and thinking about what would happen if we couldn't use this",
    "start": "1982340",
    "end": "1988279"
  },
  {
    "text": "built-in system and we had to create something else like it ourselves maybe we want to create a really custom user",
    "start": "1988279",
    "end": "1994730"
  },
  {
    "text": "experience around logging in that integrates with a you know a different custom back-end data store right so",
    "start": "1994730",
    "end": "2001899"
  },
  {
    "text": "what's the scenario for our application I do love having sort of gimmicky scenarios for my demos so here's the one",
    "start": "2001899",
    "end": "2008470"
  },
  {
    "text": "that we're going to do here a little application I've been working on called mission control not a lot of",
    "start": "2008470",
    "end": "2013750"
  },
  {
    "text": "people know this but as well as being a developer on the weekends I operate a network of spies and they mostly work",
    "start": "2013750",
    "end": "2021070"
  },
  {
    "text": "around the New York you know the central Manhattan area of New York that's",
    "start": "2021070",
    "end": "2026140"
  },
  {
    "text": "actually in my country did you know that oh yeah I know okay I actually yeah I was I wasn't sure if you're confused now we apply quite an",
    "start": "2026140",
    "end": "2032290"
  },
  {
    "text": "influential role in the operations ago country okay so obviously as a spy",
    "start": "2032290",
    "end": "2038140"
  },
  {
    "text": "master I need to keep track of where all my spies are so I've got this application here which for instance lets",
    "start": "2038140",
    "end": "2043840"
  },
  {
    "text": "me list where they all are and I know what all their missions are that they're currently dealing with and if I want a slightly more graphically rich view of",
    "start": "2043840",
    "end": "2051010"
  },
  {
    "text": "it I can go over onto this agents screen here and I get this cool 3d map that I can kind of scroll around and see what",
    "start": "2051010",
    "end": "2057399"
  },
  {
    "text": "they're all up to I could zoom out and get an overview so instance is Natalia she's triggering the global banking",
    "start": "2057400",
    "end": "2064330"
  },
  {
    "text": "crisis so that was a while ago was oh oh no this is the next one we look forward",
    "start": "2064330",
    "end": "2069429"
  },
  {
    "text": "to that yeah everyone's been waiting for that for a while we we all want that right and then we've got let's see we've got agent K doing some things with",
    "start": "2069430",
    "end": "2075669"
  },
  {
    "text": "scoober equipment down there okay so this list of information about my agencies obviously very sensitive I",
    "start": "2075670",
    "end": "2082000"
  },
  {
    "text": "don't want it to fall into the wrong hands so I want to protect it the first and most important rule of any kind of",
    "start": "2082000",
    "end": "2088330"
  },
  {
    "text": "security relating to client-side applications is that all of your security enforcement happens on the",
    "start": "2088330",
    "end": "2093909"
  },
  {
    "text": "server it does not happen in the client because nothing your client does can be trusted people can always change the",
    "start": "2093910",
    "end": "2099820"
  },
  {
    "text": "code that's in your client they could more easily just look at what network requests it makes and then just modify",
    "start": "2099820",
    "end": "2105910"
  },
  {
    "text": "all the IDs and the payloads of the requests if they want to you just can't trust anything that the client will do",
    "start": "2105910",
    "end": "2110980"
  },
  {
    "text": "so if we want to lock this stuff down we're going to have to do it on the server so let's do that I'm gonna go",
    "start": "2110980",
    "end": "2116620"
  },
  {
    "text": "into my server and you can see I've got this MVC application here that is returning this hard-coded data but you",
    "start": "2116620",
    "end": "2123040"
  },
  {
    "text": "know in a real app that could do something a little bit more interesting and I'm going to use a very simple",
    "start": "2123040",
    "end": "2128080"
  },
  {
    "text": "built-in feature of a subpoena core on the server to simply say that I want this controller to be authorized which",
    "start": "2128080",
    "end": "2134320"
  },
  {
    "text": "means that you can only access the methods on it if you are logged in and I could add other criteria like roles and",
    "start": "2134320",
    "end": "2140650"
  },
  {
    "text": "policies and stuff but I don't really need that right now I'm just gonna do this and then let's see what happens now if I come back to",
    "start": "2140650",
    "end": "2147350"
  },
  {
    "text": "my browser and try to reload now then instead of getting this data I don't get the data I just get this kind of",
    "start": "2147350",
    "end": "2153770"
  },
  {
    "text": "spinning thing that goes on forever which is quite weird but why is that happening well we'll have a look and we see that",
    "start": "2153770",
    "end": "2160190"
  },
  {
    "text": "what's happening is the server is now responding with 401 unauthorized which",
    "start": "2160190",
    "end": "2165260"
  },
  {
    "text": "is good right that's exactly what we wanted this user is not logged in so they should not be allowed to see that data but what's not so good is that this",
    "start": "2165260",
    "end": "2173540"
  },
  {
    "text": "user experience is kind of insane right now we're just showing this spinner going forever and the users just waiting",
    "start": "2173540",
    "end": "2179480"
  },
  {
    "text": "and waiting so what we would like to do is if the users not logged in display a nice message to tell them why they can't",
    "start": "2179480",
    "end": "2186170"
  },
  {
    "text": "see this data and that's pretty easy to do because in the same way that we use this authorized attribute on the server",
    "start": "2186170",
    "end": "2192320"
  },
  {
    "text": "we can use the exact same attribute in our client side or you know in our",
    "start": "2192320",
    "end": "2197930"
  },
  {
    "text": "components that are running on Blaser which is itself either running client-side in web assembly or server",
    "start": "2197930",
    "end": "2203030"
  },
  {
    "text": "side it doesn't matter you're producing this client like experience and we can use these same attributes on it so I'm",
    "start": "2203030",
    "end": "2209930"
  },
  {
    "text": "going to go to the thing that renders my list of agents here and I'm not going to go through all the code here if you want",
    "start": "2209930",
    "end": "2215210"
  },
  {
    "text": "to learn more about blazars programming model and what these kind of components are and how you set up events and stuff",
    "start": "2215210",
    "end": "2220640"
  },
  {
    "text": "well you can go and read some documentation about that I just want to assume that we know some of that stuff and try building some UI inside it so",
    "start": "2220640",
    "end": "2227960"
  },
  {
    "text": "I'm going to add an attribute right here which is the authorize attribute and that's going to tell Blaser that I want",
    "start": "2227960",
    "end": "2235250"
  },
  {
    "text": "people to only be able to go to this page if they're logged in so if I reload now then instead of seeing that",
    "start": "2235250",
    "end": "2241100"
  },
  {
    "text": "squirrely thing and now get this nice message only logged in mission commanders may access this area now you",
    "start": "2241100",
    "end": "2248000"
  },
  {
    "text": "will be reassured to know that's not the built in default message in our system that's something that I've customized",
    "start": "2248000",
    "end": "2253070"
  },
  {
    "text": "and if you're wondering where I customized that it's right here in my root component so if you've not seen",
    "start": "2253070",
    "end": "2258970"
  },
  {
    "text": "blazes Rooter before this is usually kept more or less the top level of you in your application and it's responsible",
    "start": "2258970",
    "end": "2266290"
  },
  {
    "text": "for knowing what the current URL is and observing when that URL changes and then",
    "start": "2266290",
    "end": "2274100"
  },
  {
    "text": "displaying different pages depending on that and we can say things like if there is a page or if there isn't a page will",
    "start": "2274100",
    "end": "2280290"
  },
  {
    "text": "display this message if there is then we'll do this other stuff and the other stuff that I want to do here is use this",
    "start": "2280290",
    "end": "2286170"
  },
  {
    "text": "thing called authorized route view and that's built-in and what that does is it checks whether or not the page that",
    "start": "2286170",
    "end": "2292050"
  },
  {
    "text": "corresponds to your URL whether you can satisfy the authorization criteria for",
    "start": "2292050",
    "end": "2297810"
  },
  {
    "text": "it and if you can't obviously it displays this message okay right so I",
    "start": "2297810",
    "end": "2302880"
  },
  {
    "text": "want to be able to do some real authorization now and some real log again and such but the question we have",
    "start": "2302880",
    "end": "2309600"
  },
  {
    "text": "to ask ourselves is what does it even mean to log in what is our authentication protocol well let's",
    "start": "2309600",
    "end": "2316020"
  },
  {
    "text": "imagine that we've been given a protocol that we have to integrate with we don't control this protocol someone else has",
    "start": "2316020",
    "end": "2322230"
  },
  {
    "text": "done it we've just got to build a UI for it and the protocol that we're going to have looks a bit like this okay so we're",
    "start": "2322230",
    "end": "2330390"
  },
  {
    "text": "going to have our client-side blazer application and in order to authenticate itself with a server it's going to have",
    "start": "2330390",
    "end": "2336870"
  },
  {
    "text": "to send a request to the server with a username and password and what we expect the server to send us back in this case",
    "start": "2336870",
    "end": "2343530"
  },
  {
    "text": "is going to be a JSON web token that's a pretty standard thing within the",
    "start": "2343530",
    "end": "2348990"
  },
  {
    "text": "industry there are various different flows you can use for controlling how the client gets the tokens from the",
    "start": "2348990",
    "end": "2354330"
  },
  {
    "text": "server the one I'm going to do here is a bit like password grant flow but there's",
    "start": "2354330",
    "end": "2359340"
  },
  {
    "text": "quite a lot of subtleties to it and if you want to learn more you can go and read some docs from the OAuth group or other people and they'll tell you about",
    "start": "2359340",
    "end": "2365490"
  },
  {
    "text": "how this sort of thing is supposed to work but we're going to have a pretty simple implementation right here that gets that token and then when we want to",
    "start": "2365490",
    "end": "2372300"
  },
  {
    "text": "access some protected resources such as our list of agents we'll send that token inside the request",
    "start": "2372300",
    "end": "2378720"
  },
  {
    "text": "to the server as a bearer header and if the server likes the token that we've sent then it's going to be willing to",
    "start": "2378720",
    "end": "2384570"
  },
  {
    "text": "send back this protected data to us okay so how can we get into a situation where we've got the Turki well we need to make",
    "start": "2384570",
    "end": "2391770"
  },
  {
    "text": "the user login right then first thing I want to do as part of logging in is",
    "start": "2391770",
    "end": "2397860"
  },
  {
    "text": "actually show what the users login status is at the moment I'm just displaying this hard coded message let's",
    "start": "2397860",
    "end": "2403680"
  },
  {
    "text": "see where that comes from shall we inside my list of components here I've got one called login display",
    "start": "2403680",
    "end": "2409380"
  },
  {
    "text": "and as can see it's just got this hard coded message insider now what I want to do is display a different bit of output",
    "start": "2409380",
    "end": "2416310"
  },
  {
    "text": "depending on whether the users logged in or not and I can do that using this built-in thing called authorize view",
    "start": "2416310",
    "end": "2423330"
  },
  {
    "text": "don't know why the scales changed okay and the authorized view lets us produced different outputs so if the users",
    "start": "2423330",
    "end": "2429420"
  },
  {
    "text": "authorize we're going to display hello and we'll say that name and if they're not then we're gonna just tell them that",
    "start": "2429420",
    "end": "2434640"
  },
  {
    "text": "they're logged out okay let's see if that actually works I am logged out at the moment so when I reload hopefully it",
    "start": "2434640",
    "end": "2441600"
  },
  {
    "text": "will now say you're logged out good that's working we're happy with that quick question though how does the",
    "start": "2441600",
    "end": "2448740"
  },
  {
    "text": "client know whether we're logged in or not just where does it get that information from is it asking the server",
    "start": "2448740",
    "end": "2454470"
  },
  {
    "text": "does it somehow just magically know well let me show you the thing that determines whether you're logged in or",
    "start": "2454470",
    "end": "2460770"
  },
  {
    "text": "logged out or what your authentication stay is as far as the client is concerned is a DI service a dependency",
    "start": "2460770",
    "end": "2467550"
  },
  {
    "text": "injection service and we've got a built in implementation of this the authentication state provider if you're",
    "start": "2467550",
    "end": "2474000"
  },
  {
    "text": "using server-side laser but if you're using blazer on webassembly which I am here then there is no built in implementation because what does it mean",
    "start": "2474000",
    "end": "2480780"
  },
  {
    "text": "to be logged in or logged out you need to define a definition for that so I've created an implementation of this called",
    "start": "2480780",
    "end": "2487530"
  },
  {
    "text": "token authentication state provider because good we're going to be working with JSON web tokens in a bit and the",
    "start": "2487530",
    "end": "2493140"
  },
  {
    "text": "implementation for that isn't very much all it's doing is is overriding this method called get authentication stay",
    "start": "2493140",
    "end": "2500010"
  },
  {
    "text": "async and we're hard-coding the idea that we're logged out so here's a claims",
    "start": "2500010",
    "end": "2505260"
  },
  {
    "text": "identity which is a standard concept in don't net it's been forever and that describes information about the user and",
    "start": "2505260",
    "end": "2511920"
  },
  {
    "text": "an empty one like this just means someone who's logged out so that's my default hard-coded status I'm logged out",
    "start": "2511920",
    "end": "2518520"
  },
  {
    "text": "if I wanted to I could change this to hard code the idea that I'm logged in instead so let me do that just to show",
    "start": "2518520",
    "end": "2525780"
  },
  {
    "text": "you what this will do I'm gonna create a different claims identity that hard codes the idea that my name is Steve and",
    "start": "2525780",
    "end": "2532380"
  },
  {
    "text": "I've already been authenticated using this fake off type which is not a real thing I've just made it up but that's",
    "start": "2532380",
    "end": "2538530"
  },
  {
    "text": "what my client-side application is now going to believe is the case for this user so if I go back and I read",
    "start": "2538530",
    "end": "2544110"
  },
  {
    "text": "Lode now then instead of you're logged out it now says hello Steve which is",
    "start": "2544110",
    "end": "2549660"
  },
  {
    "text": "quite a good improvement okay so does that mean we can now fetch the list of agents from the server let's find out",
    "start": "2549660",
    "end": "2555360"
  },
  {
    "text": "I'll try to do that and the answer is no we still despite the client thinking that we're logged in we still can't get",
    "start": "2555360",
    "end": "2561540"
  },
  {
    "text": "that data and the server is still responding with 401 unauthorized just",
    "start": "2561540",
    "end": "2566790"
  },
  {
    "text": "because the client thinks we're logged in that is not going to convince the server we'd still didn't provide a valid token okay so let's try and get a valid",
    "start": "2566790",
    "end": "2574500"
  },
  {
    "text": "token I'll remove that thing about being logged in as Steve I'll just go back to where we were before so it says I'm",
    "start": "2574500",
    "end": "2580080"
  },
  {
    "text": "logged out again and now I want to change this up here so that it displays a button for logging in so I'm going to",
    "start": "2580080",
    "end": "2586320"
  },
  {
    "text": "go back to my what is it now my login display and I'm going to change what",
    "start": "2586320",
    "end": "2592290"
  },
  {
    "text": "we've got there a little bit to have a little bit more stuff going on all right so now if you're authorized again will",
    "start": "2592290",
    "end": "2599760"
  },
  {
    "text": "display that your username and if you're not authorized we're going to display a message that say a button that says",
    "start": "2599760",
    "end": "2606420"
  },
  {
    "text": "login and if you're wondering what all these MDC things are well this is coming",
    "start": "2606420",
    "end": "2611850"
  },
  {
    "text": "from a nougat package that I've installed and that's what's providing all this attractive UI this has this",
    "start": "2611850",
    "end": "2617280"
  },
  {
    "text": "material design style and this MDC stands for material design components so that's coming from an external package",
    "start": "2617280",
    "end": "2623220"
  },
  {
    "text": "in case you were wondering but anyway that's how I'm going to display a login button you might also be wondering what this",
    "start": "2623220",
    "end": "2629790"
  },
  {
    "text": "thing is a login dialog is that something that's built into blazer the answer is no it's not that's one of my",
    "start": "2629790",
    "end": "2635190"
  },
  {
    "text": "components that I've defined in my application right here so let me show you what that's going to do when that",
    "start": "2635190",
    "end": "2640440"
  },
  {
    "text": "renders hopefully now we're going to see this button to login up in the top right",
    "start": "2640440",
    "end": "2645990"
  },
  {
    "text": "and when I click on that it's going to display this attractive login dialog which has got some nice features in it",
    "start": "2645990",
    "end": "2651840"
  },
  {
    "text": "such as some validation so if I click this you'll see it says you know you didn't fill that out what are you doing and I'll start trying to fill this in",
    "start": "2651840",
    "end": "2658350"
  },
  {
    "text": "and you see the status starts to change and that's all very nice so what's going to happen if I click on login shall we",
    "start": "2658350",
    "end": "2664200"
  },
  {
    "text": "find out what happens is we get an exception not implement an exception okay so we've obviously not finished",
    "start": "2664200",
    "end": "2670800"
  },
  {
    "text": "doing our job just yet let's go and see why we got that exception in fact what is inside this login dialog well",
    "start": "2670800",
    "end": "2677790"
  },
  {
    "text": "there is quite a lot of code in this and I appreciate that it might seem a little overwhelming at first but don't worry",
    "start": "2677790",
    "end": "2685140"
  },
  {
    "text": "I'll walk you through it it's not that bad really so this form on the screen here is an example of a data entry process and so",
    "start": "2685140",
    "end": "2692400"
  },
  {
    "text": "I'm using Blazers built-in forms and validation system and that is based around this built-in component called",
    "start": "2692400",
    "end": "2698070"
  },
  {
    "text": "edit form that keeps track of an edit operation that is taking place such as which fields are dirty which fields have",
    "start": "2698070",
    "end": "2705030"
  },
  {
    "text": "got validation messages associated with them things like that and we have to tell it which model object we want to",
    "start": "2705030",
    "end": "2710760"
  },
  {
    "text": "validate when this form gets submitted so I've got this credentials thing and down here that's what defined as an",
    "start": "2710760",
    "end": "2717660"
  },
  {
    "text": "instance of login credentials a custom type in my application I'll show you that you'll see it's not got very much",
    "start": "2717660",
    "end": "2723900"
  },
  {
    "text": "going on it's just got user name and password and I've got these validation attributes on it so that's why validation rules were applied and to",
    "start": "2723900",
    "end": "2731370"
  },
  {
    "text": "edit an instance of login credentials I'm using some form fields so I've got a text field here that's bound to the user",
    "start": "2731370",
    "end": "2738390"
  },
  {
    "text": "name property on my model I've also got a thing that will display any validation messages associated with that field then",
    "start": "2738390",
    "end": "2746220"
  },
  {
    "text": "what else we've got down here we've got some buttons that are going to submit the form and up at the top we're saying",
    "start": "2746220",
    "end": "2751380"
  },
  {
    "text": "that when the form is submitted if all the validation rules are satisfied then we'll call this method",
    "start": "2751380",
    "end": "2756780"
  },
  {
    "text": "submit credentials and that is defined down here and that's the thing that was throwing they're not implemented",
    "start": "2756780",
    "end": "2762240"
  },
  {
    "text": "exception that we saw before okay so what do we need to do well remember the protocol we want to send our credentials",
    "start": "2762240",
    "end": "2768990"
  },
  {
    "text": "to the backend server and it's going to return a JSON web token to us if our credentials are good so let me put in a",
    "start": "2768990",
    "end": "2776160"
  },
  {
    "text": "little bit of implementation for that I'm going to use the HTTP client to post",
    "start": "2776160",
    "end": "2781860"
  },
  {
    "text": "in JSON format to the server this was it the login credentials the credentials",
    "start": "2781860",
    "end": "2788790"
  },
  {
    "text": "object there so that will get JSON serialized and let's just mark this as async and the result that comes back",
    "start": "2788790",
    "end": "2795000"
  },
  {
    "text": "from there is going to be an instance of login result that is simply just the",
    "start": "2795000",
    "end": "2800040"
  },
  {
    "text": "JSON web token if the server is happy with us then we'll check whether the",
    "start": "2800040",
    "end": "2805050"
  },
  {
    "text": "server seems to be happy in other words is that token all or not and if it's not then we think okay good we're logged",
    "start": "2805050",
    "end": "2811830"
  },
  {
    "text": "I don't know what to do yet all I'm going to do right now is just print that token to the console so that we can see it let's try it out shall we",
    "start": "2811830",
    "end": "2818580"
  },
  {
    "text": "I'm going to once again try to log in and I'm going to enter a bad password",
    "start": "2818580",
    "end": "2825030"
  },
  {
    "text": "initially so the server will reply with an empty token and will display that message to the user and then if I change",
    "start": "2825030",
    "end": "2831480"
  },
  {
    "text": "it to a good password then that form will go away and will display this token here everybody it's a little picture of",
    "start": "2831480",
    "end": "2837630"
  },
  {
    "text": "that token yeah yeah this is my secret token now if you've not seen a JSON web",
    "start": "2837630",
    "end": "2842670"
  },
  {
    "text": "token before this is an industry standard thing it's a way of encoding a bunch of claims about a user in an",
    "start": "2842670",
    "end": "2848760"
  },
  {
    "text": "encrypted or and signed way so if you're wondering what's inside it we've got",
    "start": "2848760",
    "end": "2854010"
  },
  {
    "text": "three parts we've got this first part up to that first dot we've got another part that goes down to this next dot and then",
    "start": "2854010",
    "end": "2859800"
  },
  {
    "text": "there's a third part after it and each one of those parts is some base64 encoded data so shall we have a look",
    "start": "2859800",
    "end": "2865890"
  },
  {
    "text": "what's inside there I'm going to go to this website called base64 decode dog which is awesome so that's just what I",
    "start": "2865890",
    "end": "2871710"
  },
  {
    "text": "want right now and I'm going to paste that base64 stuff in there and then I'll click decode and",
    "start": "2871710",
    "end": "2876839"
  },
  {
    "text": "we'll see that what was inside er is this so it contains some JSON and we've",
    "start": "2876839",
    "end": "2883950"
  },
  {
    "text": "got this claim called name and it says that my name is Steve and that this token is going to expire to a certain",
    "start": "2883950",
    "end": "2890280"
  },
  {
    "text": "point in the future and we've got some other information as well now if you're thinking ah that means I can easily make",
    "start": "2890280",
    "end": "2896790"
  },
  {
    "text": "tokens that say that my name is anything I want that's cool you can't really because the third part of this token if",
    "start": "2896790",
    "end": "2903599"
  },
  {
    "text": "I remember correctly is a signature from the server so when you send that back to the server it will be able to validate that it really did issue this token and",
    "start": "2903599",
    "end": "2910530"
  },
  {
    "text": "it can check the expiry date and things like that okay so we've got our token now we want to actually use it in some",
    "start": "2910530",
    "end": "2915839"
  },
  {
    "text": "way I want to use that to update my authentication state as far as the client is concerned and that means",
    "start": "2915839",
    "end": "2922020"
  },
  {
    "text": "pausing the information out of this token and using it in our authentication state provider okay so I want to",
    "start": "2922020",
    "end": "2929220"
  },
  {
    "text": "centralize all the stuff about using a token here in this token authentication state provider so instead of printing",
    "start": "2929220",
    "end": "2936750"
  },
  {
    "text": "this to the console I want to just pass that on to my my thing whose name is too",
    "start": "2936750",
    "end": "2942960"
  },
  {
    "text": "long to keep repeating so I'm gonna send that token over there and in order to be able to do that I better actually",
    "start": "2942960",
    "end": "2948840"
  },
  {
    "text": "in import or inject an instance of this into my component so let me just drop",
    "start": "2948840",
    "end": "2954870"
  },
  {
    "text": "another little bit of code up here and inject one of these authentication state providers so that I can call this",
    "start": "2954870",
    "end": "2960840"
  },
  {
    "text": "set oaken async method on it but I haven't implemented this method yet hence the red squiggly thing let's go",
    "start": "2960840",
    "end": "2967560"
  },
  {
    "text": "over here what are we going to do with this token well the first thing I'm going to do is just store it in memory",
    "start": "2967560",
    "end": "2974550"
  },
  {
    "text": "so I'm going to define a field to hold it just temporarily in memory and I'm",
    "start": "2974550",
    "end": "2979950"
  },
  {
    "text": "going to store the value on there and then I'm going to tell blazer that the authentication state has changed and so",
    "start": "2979950",
    "end": "2987480"
  },
  {
    "text": "anything that depends on authentication state needs to refresh at this point okay and then instead of hard-coding the",
    "start": "2987480",
    "end": "2995280"
  },
  {
    "text": "idea that I'm always logged out I want to pass stuff from that token and use that as the authentication state so I'm",
    "start": "2995280",
    "end": "3002030"
  },
  {
    "text": "saying if the token is null are empty then we'll behave as if you're logged out but otherwise I want to pause the",
    "start": "3002030",
    "end": "3008660"
  },
  {
    "text": "claims out of that token and that's pretty easy it just means splitting it on the dots doing a base64 decode and",
    "start": "3008660",
    "end": "3015050"
  },
  {
    "text": "then parsing the JSON data that I just showed you before and that then becomes my authentication state as far as the",
    "start": "3015050",
    "end": "3021680"
  },
  {
    "text": "client is concerned so now when I log in hopefully it will actually display that",
    "start": "3021680",
    "end": "3027800"
  },
  {
    "text": "in the UI it says hello Steve you're left in and that's pretty cool and you see that the",
    "start": "3027800",
    "end": "3033140"
  },
  {
    "text": "rest of the UI is also updated and it's now trying to fetch the data from the server which is still not working but",
    "start": "3033140",
    "end": "3038660"
  },
  {
    "text": "we'll get to that in a minute we've got a couple of problems the first problem is that because I've only stored this",
    "start": "3038660",
    "end": "3045320"
  },
  {
    "text": "token temporarily in memory as soon as i refresh my page I instantly become",
    "start": "3045320",
    "end": "3050630"
  },
  {
    "text": "logged out again because the token wasn't really stored anywhere so where should we store this token well a",
    "start": "3050630",
    "end": "3056120"
  },
  {
    "text": "convenient place for a client-side application is the browser's local storage and I can do that quite easily",
    "start": "3056120",
    "end": "3061870"
  },
  {
    "text": "this authentication state provider is a dependency injection service so it can",
    "start": "3061870",
    "end": "3067370"
  },
  {
    "text": "depend on other services too and I'm going to make it depend on having a JavaScript runtime and I can use that to",
    "start": "3067370",
    "end": "3074150"
  },
  {
    "text": "make calls into JavaScript for example to store this token in the so what I'm gonna do is I'll get rid of",
    "start": "3074150",
    "end": "3080140"
  },
  {
    "text": "my temporary in memory store altogether won't have a double line break because Ryan gets mad",
    "start": "3080140",
    "end": "3085390"
  },
  {
    "text": "well James gets mad oh yeah yeah sorry just over there yeah yeah and then",
    "start": "3085390",
    "end": "3090730"
  },
  {
    "text": "instead of storing my token in that field I'm going to call a method on JavaScript one time I'm gonna say we're",
    "start": "3090730",
    "end": "3097450"
  },
  {
    "text": "going to call the standard JavaScript API local storage say item the key will be auth token and the value will be the",
    "start": "3097450",
    "end": "3104170"
  },
  {
    "text": "token itself and then when I want to know what the value of that token is I'm",
    "start": "3104170",
    "end": "3109750"
  },
  {
    "text": "going to read it back from JavaScript as well and that's just as easy we make a",
    "start": "3109750",
    "end": "3115000"
  },
  {
    "text": "call on J s runtime to say local storage getitem using the key auth token so now",
    "start": "3115000",
    "end": "3121450"
  },
  {
    "text": "hopefully that will be stored persistently in the browser let's see I'm going to log in again and then I'm",
    "start": "3121450",
    "end": "3130540"
  },
  {
    "text": "going to refresh once again and this time I stay logged in I know you can't really see anything happen but really I",
    "start": "3130540",
    "end": "3136420"
  },
  {
    "text": "did refresh there we go I'm afraid I've done something crazy here anyway right it did work and I'm",
    "start": "3136420",
    "end": "3142390"
  },
  {
    "text": "still logged in that's good but sadly I'm now trapped forever I can't log out because I have an",
    "start": "3142390",
    "end": "3148150"
  },
  {
    "text": "implemented logout let's do a quick logout feature shall we on our login dialog we've got a button click handler",
    "start": "3148150",
    "end": "3155080"
  },
  {
    "text": "for logout which throws at the moment and I'm simply going to tell it that I want it to overwrite the current token",
    "start": "3155080",
    "end": "3162880"
  },
  {
    "text": "with an empty string and that will be sufficient to make me get logged out as long as I mark that as a sink thank you",
    "start": "3162880",
    "end": "3169440"
  },
  {
    "text": "right let's see if I can log myself out now so I'm still logged in I click the",
    "start": "3169440",
    "end": "3174820"
  },
  {
    "text": "button and I'm logged out brilliant and the rest of the UI automatically updated all right so we're very nearly there now",
    "start": "3174820",
    "end": "3181090"
  },
  {
    "text": "what's not working yet let's find out I'm going to try once again to log in and get my data and you'll see that I",
    "start": "3181090",
    "end": "3187420"
  },
  {
    "text": "still don't get my data and if we look at the browser console you'll see still unbelievably despite all the hard work",
    "start": "3187420",
    "end": "3194290"
  },
  {
    "text": "we've done the server is still not happy it still says 401 unauthorized why is that because we are still not sending",
    "start": "3194290",
    "end": "3201370"
  },
  {
    "text": "the token in our request to the server so let's do that now we've got the token first I'm going to have to be able to",
    "start": "3201370",
    "end": "3207580"
  },
  {
    "text": "expose that token to other code in my application so I'm going to do a little bit reef factoring using this extract method tool",
    "start": "3207580",
    "end": "3214070"
  },
  {
    "text": "here I'm going to extract a method called get token async like that and",
    "start": "3214070",
    "end": "3219230"
  },
  {
    "text": "then I'm going to mark that as public so I can use it elsewhere in my application",
    "start": "3219230",
    "end": "3224540"
  },
  {
    "text": "and then over on one of the places where I want to get some data I'll be able to",
    "start": "3224540",
    "end": "3230540"
  },
  {
    "text": "call it so let's go to inside my pages I'll go to my agents list and you can see I'm already injecting my token",
    "start": "3230540",
    "end": "3237500"
  },
  {
    "text": "provider in here so now I can get that token from my provider using the get",
    "start": "3237500",
    "end": "3243980"
  },
  {
    "text": "token async method and then when we make this outbound HTTP request I'm going to",
    "start": "3243980",
    "end": "3249110"
  },
  {
    "text": "also add an authentication header called bearer with this token value all right",
    "start": "3249110",
    "end": "3255320"
  },
  {
    "text": "let's see if finally we can actually fetch our super secret data from the",
    "start": "3255320",
    "end": "3261200"
  },
  {
    "text": "server now that we're logged in and we can so finally the server accepts that we're logged in and all the other stuff",
    "start": "3261200",
    "end": "3266870"
  },
  {
    "text": "is going to work so if I hit logout instantly it's going to switch over to this mode it didn't have to reload the page it just does it if I log in again",
    "start": "3266870",
    "end": "3273250"
  },
  {
    "text": "then my data is going to come back and all the authentication decisions are",
    "start": "3273250",
    "end": "3279380"
  },
  {
    "text": "still being made on the client on the server obviously okay so that is the",
    "start": "3279380",
    "end": "3285260"
  },
  {
    "text": "flow that I wanted to show you I hope that gives you a sense of how you could create a custom UI flow corresponding to",
    "start": "3285260",
    "end": "3292130"
  },
  {
    "text": "whatever kind of back-end authentication service you might need so that's enough about that now we've got a little bit of",
    "start": "3292130",
    "end": "3298790"
  },
  {
    "text": "time left and we had an idea for what we could do we're just going to switch back to the other laptop if that's all right",
    "start": "3298790",
    "end": "3305140"
  },
  {
    "text": "is that okay right there you go",
    "start": "3305140",
    "end": "3311829"
  },
  {
    "text": "okay okay great so we've got a couple minutes for QA we'll probably be hanging",
    "start": "3322130",
    "end": "3327390"
  },
  {
    "text": "around afterwards the party a little bit too if you want to talk to us but shout out shout out your questions I have",
    "start": "3327390",
    "end": "3332819"
  },
  {
    "text": "pre-canned ones that people can either upload by asking or if nobody has questions we'll just talk about this",
    "start": "3332819",
    "end": "3338789"
  },
  {
    "text": "stuff what do you all night",
    "start": "3338789",
    "end": "3343279"
  },
  {
    "text": "yeah okay so the question is about the performance of the different algorithm how it might compare to other frameworks",
    "start": "3350680",
    "end": "3357279"
  },
  {
    "text": "yes so we've thought about this very carefully it's been one of the first things that we started with when we work",
    "start": "3357279",
    "end": "3362900"
  },
  {
    "text": "it on Blaser in the first place and the good news is that because of the way that our system works we have got an",
    "start": "3362900",
    "end": "3369380"
  },
  {
    "text": "unfair advantage that allows us to be significantly faster than other things and the unfair advantage that we've got",
    "start": "3369380",
    "end": "3375619"
  },
  {
    "text": "is that we've got a compile step going on and so you remember those sequence numbers that Ryan showed you on his",
    "start": "3375619",
    "end": "3382130"
  },
  {
    "text": "slide those are inserted automatically by the compiler and that gives us a lot of extra information that we can use at",
    "start": "3382130",
    "end": "3388549"
  },
  {
    "text": "run time during dipping so when we do dipping over your tree structure we can",
    "start": "3388549",
    "end": "3394039"
  },
  {
    "text": "do it in an order n time it's for purely linear operation to do that death which",
    "start": "3394039",
    "end": "3399079"
  },
  {
    "text": "is ridiculously fast compared with a typical tree difficult for men squared",
    "start": "3399079",
    "end": "3404210"
  },
  {
    "text": "to n to the fourth power depending on what kind of operations you support so yes we have we have it very easy to do",
    "start": "3404210",
    "end": "3412309"
  },
  {
    "text": "those deaths and in most cases we're going to be able to significantly outperform most things when you can",
    "start": "3412309",
    "end": "3418759"
  },
  {
    "text": "count it based on number of operations performed those",
    "start": "3418759",
    "end": "3423910"
  },
  {
    "text": "sure okay the question is about the adoption level of web assembly in browsers particularly mobile and the",
    "start": "3436880",
    "end": "3443730"
  },
  {
    "text": "answer to that is that web assembly has been supported in the two main mobile platforms iOS and Android for a long",
    "start": "3443730",
    "end": "3450660"
  },
  {
    "text": "time by now I think it was first in iOS version 11 which is quite a while ago and it's it's been in android for even",
    "start": "3450660",
    "end": "3456509"
  },
  {
    "text": "longer so it's it's basically very very widely available more or less Universal",
    "start": "3456509",
    "end": "3462359"
  },
  {
    "text": "as for the question of whether blazer server is a better fit for doing things",
    "start": "3462359",
    "end": "3469049"
  },
  {
    "text": "on mobile as well it really depends that the key advantages that blazer server is going to have is more to do with the",
    "start": "3469049",
    "end": "3474329"
  },
  {
    "text": "bandwidth required for getting that initial page to show up so blazer server involves transferring a lot less data",
    "start": "3474329",
    "end": "3480749"
  },
  {
    "text": "over the network to startup and it's also taking the load off the client when",
    "start": "3480749",
    "end": "3485880"
  },
  {
    "text": "it comes to actually running all the UI update operations and diffing and stuff so blazer server can perform better on",
    "start": "3485880",
    "end": "3492089"
  },
  {
    "text": "low-end mobile devices if they've got a good network connection",
    "start": "3492089",
    "end": "3497119"
  },
  {
    "text": "right question do you on a second I'm sure so the question was about scaling and about whether or not blazer has any",
    "start": "3508800",
    "end": "3514650"
  },
  {
    "text": "built-in mechanisms for scaling your memory or sort of sharing storage using",
    "start": "3514650",
    "end": "3520080"
  },
  {
    "text": "offloading a store like Redis so the reason why we don't have something like that is we don't have something like",
    "start": "3520080",
    "end": "3526260"
  },
  {
    "text": "that because the thing that we have in memory is your instances of components so it's not a prescriptive data",
    "start": "3526260",
    "end": "3531450"
  },
  {
    "text": "structure kind of thing we haven't found the need to do that because we're just",
    "start": "3531450",
    "end": "3536520"
  },
  {
    "text": "basically using sticky sessions at the load balancer so like the signal our service does stickiness and you're",
    "start": "3536520",
    "end": "3543180"
  },
  {
    "text": "connected so like there's no need to necessarily like move you to another node while you're connected is that",
    "start": "3543180",
    "end": "3549060"
  },
  {
    "text": "address your question or yeah it's gone",
    "start": "3549060",
    "end": "3554640"
  },
  {
    "text": "so you can use other mechanisms for that you could use reticence out of your app for the things you want to save as well",
    "start": "3554640",
    "end": "3559860"
  },
  {
    "text": "and we've got some Docs and guidance on that down front okay the question is can",
    "start": "3559860",
    "end": "3574380"
  },
  {
    "text": "you use blaze a client with an on an on net server it was it an omelet okay so",
    "start": "3574380",
    "end": "3581730"
  },
  {
    "text": "to clarify when you use blaze a client what you're serving to the browser is just static files as far as the server",
    "start": "3581730",
    "end": "3588420"
  },
  {
    "text": "is concerned it does not matter at all wise on the server you don't need it to be and it have anything ology Blaser you",
    "start": "3588420",
    "end": "3594240"
  },
  {
    "text": "don't even need it to be a dotnet server you could serve it from you know an ojs server I should a demo yesterday of",
    "start": "3594240",
    "end": "3600810"
  },
  {
    "text": "serving a blazer client application from github pages it's completely uninteresting to the server what the",
    "start": "3600810",
    "end": "3606750"
  },
  {
    "text": "content is it's just static files in the back",
    "start": "3606750",
    "end": "3612770"
  },
  {
    "text": "um the scenario you're describing where an outbound HTTP request is blocking",
    "start": "3637130",
    "end": "3643400"
  },
  {
    "text": "things is very unfamiliar to me because you can't do blocking HTTP requests in",
    "start": "3643400",
    "end": "3648620"
  },
  {
    "text": "the client even if you want to the only kind of HTTP requests you can do are asynchronous so I think something",
    "start": "3648620",
    "end": "3654350"
  },
  {
    "text": "different must have been happen in your situation but I can't really guess what it is if you want come and chat to us",
    "start": "3654350",
    "end": "3660050"
  },
  {
    "text": "afterwards and we'll try and help you figure that out we're about at time so we'll take one more don't fret",
    "start": "3660050",
    "end": "3667360"
  },
  {
    "text": "sorry the question again threading ohm",
    "start": "3669410",
    "end": "3675320"
  },
  {
    "text": "on training in web assembly yeah sure okay so the initial the question is what's the state of multi-threading",
    "start": "3675320",
    "end": "3680750"
  },
  {
    "text": "support in web assembly great question so when the first version of web",
    "start": "3680750",
    "end": "3685850"
  },
  {
    "text": "assembly came out it did not have any kind of concept of multi-threading it was a purely single threaded",
    "start": "3685850",
    "end": "3691280"
  },
  {
    "text": "specification and that's the thing that is currently rolled out into like all the browsers in the world the as for",
    "start": "3691280",
    "end": "3699020"
  },
  {
    "text": "adding actual threading support there is a proposal for how that should work and it's at quite an advanced stage already",
    "start": "3699020",
    "end": "3704660"
  },
  {
    "text": "so advanced in fact that it's already been shipped inside Chrome Google has been pushing that along quite well so I",
    "start": "3704660",
    "end": "3712280"
  },
  {
    "text": "don't know how quickly that's going to come to other browsers but it you know it's obviously making its way along quite well as for support within Blaser",
    "start": "3712280",
    "end": "3719420"
  },
  {
    "text": "that's not something we've started taking advantage of yet the mono team who provides the mono web assembly",
    "start": "3719420",
    "end": "3724550"
  },
  {
    "text": "runtime for us they've been working quite hard on making sure that they can attach Nets concept of threading on to",
    "start": "3724550",
    "end": "3732080"
  },
  {
    "text": "the new web assembly threading and apparently that works really well but we haven't started trying to use it yet in",
    "start": "3732080",
    "end": "3738590"
  },
  {
    "text": "terms of how it affects you as a developer the programming model that we've designed so far is all designed",
    "start": "3738590",
    "end": "3744050"
  },
  {
    "text": "around the traditional single threaded model that most client-side developers are familiar with so there isn't really",
    "start": "3744050",
    "end": "3750050"
  },
  {
    "text": "much of a need for having multiple threads concurrently if you're just doing a bunch of things with button clicks and HTTP requests and stuff the",
    "start": "3750050",
    "end": "3757280"
  },
  {
    "text": "scenario you might want to is in more advanced scenarios where you're doing some kind of background competition that",
    "start": "3757280",
    "end": "3762590"
  },
  {
    "text": "absolutely can't be interrupted for some reason and for that you would have to find a way of modeling that with",
    "start": "3762590",
    "end": "3767650"
  },
  {
    "text": "asynchrony today we do expect to get the multi-threading support from on our web assembly over",
    "start": "3767650",
    "end": "3774340"
  },
  {
    "text": "the next coming months okay thanks",
    "start": "3774340",
    "end": "3779360"
  },
  {
    "text": "[Applause]",
    "start": "3779360",
    "end": "3785219"
  }
]