[
  {
    "text": "oh wow all these people here what are you doing here it's Friday afternoon it's 28 degrees you should be sitting",
    "start": "3120",
    "end": "8920"
  },
  {
    "text": "outside you you're all watching me die here on stage all right let's see if this works yes it works okay getting a",
    "start": "8920",
    "end": "17320"
  },
  {
    "text": "grip on your dependencies well my dependency was my laptop which filled me",
    "start": "17320",
    "end": "22800"
  },
  {
    "text": "which is usually something that happens with dependencies and you know they fail you so this is an a good exercise a",
    "start": "22800",
    "end": "28320"
  },
  {
    "text": "learning exercise it's my last day in Sydney so I can uh die in my plane",
    "start": "28320",
    "end": "33640"
  },
  {
    "text": "tonight um thank you for showing up um yeah dependency",
    "start": "33640",
    "end": "40120"
  },
  {
    "text": "management it's all about coupling right it's all about coupling now the main",
    "start": "40120",
    "end": "45320"
  },
  {
    "text": "question people always ask me it's like how do I prevent coupling Dennis you buil an open source library and you're",
    "start": "45320",
    "end": "51800"
  },
  {
    "text": "supposedly very smart I said well it's so fake until you make it but yeah how do you prevent that well typically",
    "start": "51800",
    "end": "59039"
  },
  {
    "text": "there's a couple of answ uh one of them is don't write code at all then you don't have the problem or",
    "start": "59039",
    "end": "65439"
  },
  {
    "text": "use a programming language that doesn't have this problem maybe JavaScript oh no it has mpm but has no not having um",
    "start": "65439",
    "end": "73119"
  },
  {
    "text": "maybe write code in SQL plsql an oracle or something they don't have any packages or dependencies or whatever I",
    "start": "73119",
    "end": "80079"
  },
  {
    "text": "guess but yeah usually the answer is um yeah you need to increase cohesion you need to decrease coupling by the way I'm",
    "start": "80079",
    "end": "86479"
  },
  {
    "text": "moving too close to my my microphone uh okay great that sounds like the ultimate answer but how do I do",
    "start": "86479",
    "end": "93479"
  },
  {
    "text": "that I mean that sounds so awesome that's something you hear in every conference that talks about architecture increase cohesion decrease coupling so",
    "start": "93479",
    "end": "100720"
  },
  {
    "text": "you need to put stuff together but I also need to decouple things somehow how",
    "start": "100720",
    "end": "106479"
  },
  {
    "text": "does that that work I don't know uh usually we do that hey did I skip a slide yeah usually we do that by",
    "start": "106479",
    "end": "112799"
  },
  {
    "text": "introducing abstractions you know interfaces contracts and stuff like that",
    "start": "112799",
    "end": "118079"
  },
  {
    "text": "but I don't know I'm trying to gu The Experience level I guess there's more than one person in this group that has",
    "start": "118079",
    "end": "124119"
  },
  {
    "text": "created too many abstractions or creating abstractions that sounded like a great idea because you were trying to",
    "start": "124119",
    "end": "129959"
  },
  {
    "text": "make things simple for the new people in the team uh ultimately it became really convoluted and difficult to understand",
    "start": "129959",
    "end": "136440"
  },
  {
    "text": "you know you all know yagy you know you especially if you're uh if you just came from a new University or something like",
    "start": "136440",
    "end": "143080"
  },
  {
    "text": "that you tend to create all these you read a book about design patterns for example what do you do when you remember",
    "start": "143080",
    "end": "148879"
  },
  {
    "text": "remember that body read the book just to check old enough or the web page these days or is there a Tik Tok variant of",
    "start": "148879",
    "end": "155760"
  },
  {
    "text": "that or something I don't know but I remember when I read the blue book I I had the physical copy what did I do this",
    "start": "155760",
    "end": "162840"
  },
  {
    "text": "is awesome I'll bring it to my desk I'll show it to all my colleagues you know I was physically on my desk when we still",
    "start": "162840",
    "end": "168640"
  },
  {
    "text": "physically went to the office like you know in ancient past and then it became almost like a bingo card like uh you",
    "start": "168640",
    "end": "175760"
  },
  {
    "text": "know I've I've never actually applied the visitor pattern anybody applied the visitor pattern",
    "start": "175760",
    "end": "181000"
  },
  {
    "text": "for as a serious thing not for fun yes Chris you did one time was was there a",
    "start": "181000",
    "end": "187000"
  },
  {
    "text": "legal reason for doing it so that's the thing you all these",
    "start": "187000",
    "end": "192360"
  },
  {
    "text": "abstractions they make they make things usually more complicated than we then we want to and we all go through this cycle",
    "start": "192360",
    "end": "198480"
  },
  {
    "text": "I somebody on Twitter once said and I'm going off script again doesn't matter it's Friday afternoon it's very cozy",
    "start": "198480",
    "end": "203799"
  },
  {
    "text": "here uh I remember that somebody said like around like if you have like 10 to",
    "start": "203799",
    "end": "209080"
  },
  {
    "text": "15 years of experience you tend to be the most dogmatic person only after that",
    "start": "209080",
    "end": "214200"
  },
  {
    "text": "you start to realize that every principle and I see people with no almost no hair shaking yes I recognize",
    "start": "214200",
    "end": "219640"
  },
  {
    "text": "that not looking at people um you realize that every principle pattern",
    "start": "219640",
    "end": "225760"
  },
  {
    "text": "practice has pros and cons and you need to understand the context in which those apply and which not they're all great",
    "start": "225760",
    "end": "232079"
  },
  {
    "text": "things everything I I practice St development I love it I've done it wrong I'm trying to do it right now I'd like",
    "start": "232079",
    "end": "238040"
  },
  {
    "text": "to think I do that right this applies with everything so abstractions have their place so too many abstractions and I",
    "start": "238040",
    "end": "245720"
  },
  {
    "text": "don't know if youve ever heard about that I think somebody said once that there's not a problem you cannot solve",
    "start": "245720",
    "end": "250840"
  },
  {
    "text": "with another abstraction except the problem of too many abstractions I didn't it's is very old it's when people",
    "start": "250840",
    "end": "257959"
  },
  {
    "text": "cing now cohesion is to make sure that everything around a particular concept is in one",
    "start": "257959",
    "end": "265120"
  },
  {
    "text": "place only so how do you increase cohesion your code base it's open",
    "start": "265120",
    "end": "270479"
  },
  {
    "text": "question there's no stupid answer sorry no try that's what you learn right don't",
    "start": "270479",
    "end": "277880"
  },
  {
    "text": "you remember the first time you create some code and then the senior developer you know there were no pool requests at",
    "start": "277880",
    "end": "282919"
  },
  {
    "text": "that time uh maybe you maybe you still experienced that tells you yeah but we already have an implementation like that",
    "start": "282919",
    "end": "288240"
  },
  {
    "text": "or almost like that make sure that we can reuse that yeah but it does it's not doing the exact same thing no but we do",
    "start": "288240",
    "end": "294720"
  },
  {
    "text": "not want to have the same logic twice in our code base so we're going to refactor it yeah but it's doing the exact same",
    "start": "294720",
    "end": "300800"
  },
  {
    "text": "thing okay then we make it you know make it more generic make it more flexible so we can actually reuse that code and that",
    "start": "300800",
    "end": "307080"
  },
  {
    "text": "becomes almost like yeah but we need to we follow dry we do not repeat ourselves",
    "start": "307080",
    "end": "312639"
  },
  {
    "text": "that's against the rules you know and we've all done that I'm still doing it",
    "start": "312639",
    "end": "318319"
  },
  {
    "text": "and what what's the flip side of that if everything is in one place only and everything depends on",
    "start": "318319",
    "end": "324080"
  },
  {
    "text": "that coupling indeed that's the problem so dry is a very good thing but it can",
    "start": "324080",
    "end": "331720"
  },
  {
    "text": "lead to Too Much coupling and yeah I've experienced this firsthand so then what is the solution what is the solution",
    "start": "331720",
    "end": "339199"
  },
  {
    "text": "well Yoda is very old actually he died a long time ago kind of um it's actually",
    "start": "339199",
    "end": "346240"
  },
  {
    "text": "pretty simple in understand the internal boundaries of your",
    "start": "346240",
    "end": "351400"
  },
  {
    "text": "system okay Dennis that makes sense no it doesn't make sense at all I have no clue what you mean what boundaries",
    "start": "351400",
    "end": "356919"
  },
  {
    "text": "you're talking about yeah that's the difficult part and that's what I'm I'm going to help you with the rest of the talk check the time yes okay internal",
    "start": "356919",
    "end": "365919"
  },
  {
    "text": "boundaries how do you know what the internal boundaries are of your code base well it depends if you have a very",
    "start": "365919",
    "end": "371560"
  },
  {
    "text": "nice well organized code base with modules and you know internal seams and",
    "start": "371560",
    "end": "377199"
  },
  {
    "text": "nice abstractions is pretty obvious so let me ask you an honest question who has a code base who's currently working",
    "start": "377199",
    "end": "383479"
  },
  {
    "text": "on a Cod code base that feels like it's well structured completely consistent",
    "start": "383479",
    "end": "388520"
  },
  {
    "text": "you know everybody knows where code is honestly people are afraid to say yes",
    "start": "388520",
    "end": "394120"
  },
  {
    "text": "because they're afraid no it it it happens it happens even my own open source project is I would say a bit",
    "start": "394120",
    "end": "401919"
  },
  {
    "text": "messy but uh as we just discussed I have a slide form of OCD I think or I'd like",
    "start": "401919",
    "end": "406960"
  },
  {
    "text": "to make fun of it uh Anyway by the me I completely forgot to talk about myself because I love talking um I'm Dutch you",
    "start": "406960",
    "end": "414120"
  },
  {
    "text": "can probably hear that from my accent so I flew all the 24 hours back so I actually I'm adjusted now to this time",
    "start": "414120",
    "end": "419960"
  },
  {
    "text": "zone and tonight at 4:00 I have to go back to the airport um I'm I like to",
    "start": "419960",
    "end": "425319"
  },
  {
    "text": "call myself a handson architect in the do net space I've been in this profession for profession for 27 years I",
    "start": "425319",
    "end": "431840"
  },
  {
    "text": "started coding on aom 64 when I was 11 in assembly and later C C++ and then I",
    "start": "431840",
    "end": "437879"
  },
  {
    "text": "discovered C I do look a little bit around it like languages that look a little bit the same like typescripts and",
    "start": "437879",
    "end": "444240"
  },
  {
    "text": "I typically help my clients to optimize the entire development uh process from from ID to production continu deployment",
    "start": "444240",
    "end": "451479"
  },
  {
    "text": "pulumi test driven development architecture event sourcing lot of this stuff I've been an MVP Microsoft MVP for",
    "start": "451479",
    "end": "457919"
  },
  {
    "text": "a year now I'm up for Renewal I have no clue what it means and whether I will succeed uh I will lose all these nice",
    "start": "457919",
    "end": "464479"
  },
  {
    "text": "licenses um and you can find me on D dooman that's my Twitter oh X Handler doesn't work X anyway I have a couple",
    "start": "464479",
    "end": "471240"
  },
  {
    "text": "things a Blog I have a coding guidelines I have one more couple of libraries for event sourcing a bdd style framework I",
    "start": "471240",
    "end": "477919"
  },
  {
    "text": "maintain and you may know me from fluent to anybody in the net space here I'm",
    "start": "477919",
    "end": "483360"
  },
  {
    "text": "always surprised like half of the people are not so they either front end developers managers",
    "start": "483360",
    "end": "489319"
  },
  {
    "text": "Architects python data scientists no no okay difficult very difficult audience",
    "start": "489319",
    "end": "496039"
  },
  {
    "text": "uh anyway if you do know it then you probably know this stuff which does not define me for the people that do know that fluent to search is just a library",
    "start": "496039",
    "end": "502680"
  },
  {
    "text": "and it doesn't say anything about architecture well understanding the internal",
    "start": "502680",
    "end": "508000"
  },
  {
    "text": "boundaries is very hard so the first thing is what you need to do is try to understand that code base",
    "start": "508000",
    "end": "515159"
  },
  {
    "text": "and there's a couple of things you can do you can for example Lo use the project dependencies or folder names or",
    "start": "515159",
    "end": "520518"
  },
  {
    "text": "name spaces in your v c to get a sense of what are these things how is this code distributed across this big",
    "start": "520519",
    "end": "527279"
  },
  {
    "text": "codebase if you're in Java it's probably package names or something like that they have similar concept um I typically",
    "start": "527279",
    "end": "533720"
  },
  {
    "text": "use this this is from my own open source library and what you find is you cannot see this from the back but the f all the",
    "start": "533720",
    "end": "539640"
  },
  {
    "text": "names are typically very functional if you have that that helps but if they're very technical like Microsoft if you",
    "start": "539640",
    "end": "545760"
  },
  {
    "text": "create a project you get like an as. net web product project you typically get things like controllers fuse models",
    "start": "545760",
    "end": "553320"
  },
  {
    "text": "repositories that doesn't tell you anything about the functional structure of that codebase only there's technical",
    "start": "553320",
    "end": "559440"
  },
  {
    "text": "Concepts there that doesn't help um you can use all kinds of tools like this is a a project dependen view every platform",
    "start": "559440",
    "end": "566600"
  },
  {
    "text": "has something similar which helps you understand the thickness of the error actually means how thick the coupling is",
    "start": "566600",
    "end": "572279"
  },
  {
    "text": "how how thick the dependency is which is nice um this is a type dependency diagram it's completely unreadable it's",
    "start": "572279",
    "end": "578720"
  },
  {
    "text": "also unreadable here it doesn't really matter but it's a tool that hopefully gives you some insights uh you can use",
    "start": "578720",
    "end": "585240"
  },
  {
    "text": "endend which is another one it's a paid product within the do net space which is very powerful because also allows you to",
    "start": "585240",
    "end": "591680"
  },
  {
    "text": "visually uh group things in a way that makes more sense but it's all about understanding the code base I remember",
    "start": "591680",
    "end": "598360"
  },
  {
    "text": "that I had to work on the Legacy code base with one of the teams of my client and I was wondering like what's the",
    "start": "598360",
    "end": "604399"
  },
  {
    "text": "scope of those unit tests they were really weird like some tests were actually interacting with the controller",
    "start": "604399",
    "end": "609800"
  },
  {
    "text": "which is an asp.net HTTP uh class uh but also interacting with the database and I",
    "start": "609800",
    "end": "616240"
  },
  {
    "text": "was trying to understand like why do what what actually made them decide to have that kind of scope it turns out",
    "start": "616240",
    "end": "622920"
  },
  {
    "text": "that code base was an onion architecture I'll talk about that in a second they didn't realize it nobody in the team",
    "start": "622920",
    "end": "628519"
  },
  {
    "text": "knew what the architecture look like they had no clue they were just looking at you know projects and code and just",
    "start": "628519",
    "end": "634000"
  },
  {
    "text": "copying mimicking what other people did that didn't help so I actually draw a picture for them because pictures tell",
    "start": "634000",
    "end": "640079"
  },
  {
    "text": "more than a thousand words or something although I can speak very fast if I want to but that helped because they suddenly",
    "start": "640079",
    "end": "646120"
  },
  {
    "text": "started to have to get this mental picture of how things are supposed to re to to relate to each other so tools like",
    "start": "646120",
    "end": "652839"
  },
  {
    "text": "this can help you can also use your IDE if you have a good ide it can also tell you all kinds of stuff like where does a",
    "start": "652839",
    "end": "658320"
  },
  {
    "text": "parameter come from how does how do does the decool chain go over the different classes or modules or whatever folder",
    "start": "658320",
    "end": "664200"
  },
  {
    "text": "structure you have gives you an indication of how things are supposed to work together uh this is an example that",
    "start": "664200",
    "end": "670680"
  },
  {
    "text": "jet brain Rider does which is the net development tool from jet brains um",
    "start": "670680",
    "end": "675720"
  },
  {
    "text": "there's lots of other examples that you can use use those tools don't use Visual Studio code for coding that's not that's",
    "start": "675720",
    "end": "681959"
  },
  {
    "text": "a text editor with some smart things using actual IDE that provides that Insight so that's important or and it's",
    "start": "681959",
    "end": "690040"
  },
  {
    "text": "2024 AI is everything and I should have an AI slide otherwise I'm not part of the hype use AI tooling now I'm actually",
    "start": "690040",
    "end": "696600"
  },
  {
    "text": "a big fan of AI like again this is jet brains uh they have all these idees now all of them have built-in AI support",
    "start": "696600",
    "end": "703959"
  },
  {
    "text": "which can do things like explain that code I actually discovered a production issue where somebody actually Implement",
    "start": "703959",
    "end": "710399"
  },
  {
    "text": "an RSI what is it asymmetric encryption by copying code from the internet which",
    "start": "710399",
    "end": "715839"
  },
  {
    "text": "I couldn't read and it was using padding I have no clue what padding is and and actually I used the AI to explain what",
    "start": "715839",
    "end": "721240"
  },
  {
    "text": "that code was doing and detected the algorithm even provided me with an alternative that by itself has saved me",
    "start": "721240",
    "end": "728000"
  },
  {
    "text": "saved me weeks of work so use that you know here this is the chat shows you all",
    "start": "728000",
    "end": "733920"
  },
  {
    "text": "kinds of stuff explains your problems in your codebase that can help the tools are incredibly smart I have no clue how",
    "start": "733920",
    "end": "740120"
  },
  {
    "text": "it works but it has helped me tremendously um yes so AI tooling also",
    "start": "740120",
    "end": "747320"
  },
  {
    "text": "use it the first level where you need to control your dependencies on the architecture level that's where it all",
    "start": "747320",
    "end": "753040"
  },
  {
    "text": "starts of course so what I like is um to rely on the dependency inversion",
    "start": "753040",
    "end": "759399"
  },
  {
    "text": "principle I know everybody knows solid right solid yes no oh only two people",
    "start": "759399",
    "end": "765639"
  },
  {
    "text": "really single responsibility principle open close principle Lisk of",
    "start": "765639",
    "end": "770839"
  },
  {
    "text": "substitution principle uh interface aggregation principle dependency inversion principle no okay who's your",
    "start": "770839",
    "end": "777839"
  },
  {
    "text": "architect here just check in nobody raises their hands anymore I don't blame you um it's",
    "start": "777839",
    "end": "785399"
  },
  {
    "text": "actually pretty simple I have an interface I don't know you can see that in the back uh it's",
    "start": "785399",
    "end": "790959"
  },
  {
    "text": "called iore orders it's a generic interface which is something that c has and it has a couple of methods query add",
    "start": "790959",
    "end": "798880"
  },
  {
    "text": "delete is this a generic interface in a sense like is this generic functionality or is this very specific to the domain",
    "start": "798880",
    "end": "805480"
  },
  {
    "text": "you're working in generic or to uh specific who thinks is",
    "start": "805480",
    "end": "812440"
  },
  {
    "text": "generic it's pretty generic yeah or who thinks it's specific who doesn't think anything because it's Friday afternoon",
    "start": "812440",
    "end": "819920"
  },
  {
    "text": "and it's very generic because yeah I mean and not to be confused with Net's",
    "start": "819920",
    "end": "826000"
  },
  {
    "text": "generic concept it's a generic thing you can do anything with it I mean yes it can store orders but you can you can",
    "start": "826000",
    "end": "832120"
  },
  {
    "text": "build complete ques and there's not much you can optimize so imagine there's an",
    "start": "832120",
    "end": "837320"
  },
  {
    "text": "implementation in this case it's a repository pattern on hibernate which used to be proper net space and then we",
    "start": "837320",
    "end": "843680"
  },
  {
    "text": "have this functional model module an order processing module that is very domain specific right it's a blue it's",
    "start": "843680",
    "end": "849639"
  },
  {
    "text": "in a domain layer and this is typically how it works that's how you do that right everybody has implemented a",
    "start": "849639",
    "end": "855079"
  },
  {
    "text": "repository pattern at some point in their life yes yes see um this is I was",
    "start": "855079",
    "end": "861279"
  },
  {
    "text": "going to say wrong but I should be more subtle it's wrong um what the dependency",
    "start": "861279",
    "end": "867639"
  },
  {
    "text": "inversion principle does well it's kind of self-explanatory it reverses the dependency what does that mean well I",
    "start": "867639",
    "end": "874160"
  },
  {
    "text": "still have the same module here order processing the difference now is what's the",
    "start": "874160",
    "end": "880199"
  },
  {
    "text": "difference it's blue not yellow anymore no actually there's another it's",
    "start": "880199",
    "end": "885639"
  },
  {
    "text": "actually more functional the names in there are now called get incomplete order or store order or complete an",
    "start": "885639",
    "end": "891680"
  },
  {
    "text": "order which is much more functional the difference is now the order rep store is still there we still have this I don't",
    "start": "891680",
    "end": "897800"
  },
  {
    "text": "know what it's called an hibernate or n framework or whatever you're using in your space but notice the dependency it",
    "start": "897800",
    "end": "903079"
  },
  {
    "text": "goes upward so now what you have is that the domain layer has defined what it needs you know the it defines your",
    "start": "903079",
    "end": "910320"
  },
  {
    "text": "contract what it needs and then the lower level layer and the data layer if you if you like to use a layered",
    "start": "910320",
    "end": "917199"
  },
  {
    "text": "architecture is actually implementing that contract and we almost always do it the other way around we always have this",
    "start": "917199",
    "end": "923399"
  },
  {
    "text": "dependency to these generic pieces of code that we create this is a very powerful technique that you can use to",
    "start": "923399",
    "end": "929959"
  },
  {
    "text": "decouple code from each other it can be confusing you know and intuitive in the beginning and the dependency inversion",
    "start": "929959",
    "end": "936120"
  },
  {
    "text": "principle actually if you read Uncle Bob's Bob Uncle Bob's book it says something like uh higher level",
    "start": "936120",
    "end": "942279"
  },
  {
    "text": "abstractions should not depend on lower level abstractions which by itself sounds very",
    "start": "942279",
    "end": "947600"
  },
  {
    "text": "abstract uh which we're trying to avoid but yeah that's kind of the idea now you",
    "start": "947600",
    "end": "952959"
  },
  {
    "text": "can also apply this on the architecture level this is an example of the Union architecture by way I don't know if",
    "start": "952959",
    "end": "960120"
  },
  {
    "text": "anybody went to Ian Cooper's presentation I'm not suggesting that you should use the onion architecture",
    "start": "960120",
    "end": "966600"
  },
  {
    "text": "without understand the problem because it's an architecture style an architecture style that has pros and",
    "start": "966600",
    "end": "971680"
  },
  {
    "text": "cons you need to understand those that context you need to have the problem that this style tries to implement some",
    "start": "971680",
    "end": "977639"
  },
  {
    "text": "people would even say it's it's outdated but I guess there's a lot of people haven't even seen it yet and I still",
    "start": "977639",
    "end": "983199"
  },
  {
    "text": "trying to figure it out it's still a layered architecture but the beauty of this architecture is that the dependencies go inwards so the domain",
    "start": "983199",
    "end": "990000"
  },
  {
    "text": "model is in the middle does not have any dependencies if the domain model needs to somehow be able to persist the domain",
    "start": "990000",
    "end": "997680"
  },
  {
    "text": "or you know get information from the rest of the world the domain model will Define this so the center circle will",
    "start": "997680",
    "end": "1004600"
  },
  {
    "text": "Define what it needs a contract yeah what what you just saw and then the outer layers will actually Implement",
    "start": "1004600",
    "end": "1010040"
  },
  {
    "text": "that contract so if you have a complicated architecture and you need kind some kind of structure this is an",
    "start": "1010040",
    "end": "1015639"
  },
  {
    "text": "option but you need to understand read more about it again not saying that you should blindly follow this is another",
    "start": "1015639",
    "end": "1021079"
  },
  {
    "text": "version the he hexagonal I canot even pronounce it how do you pronounce it you're American",
    "start": "1021079",
    "end": "1027079"
  },
  {
    "text": "hexagonal cool nail it hex",
    "start": "1027079",
    "end": "1032520"
  },
  {
    "text": "hex it it was a an intense week let's call it like that uh but also ports and",
    "start": "1033039",
    "end": "1038600"
  },
  {
    "text": "adapters that's the other term it's kind of the same idea domain is in the middle application is around it and you have",
    "start": "1038600",
    "end": "1044000"
  },
  {
    "text": "all these primary and secondary ports that are supposed to connect your your system to the rest of the world the",
    "start": "1044000",
    "end": "1049039"
  },
  {
    "text": "database to the UI to uh htpn points whatever same principle because the",
    "start": "1049039",
    "end": "1055679"
  },
  {
    "text": "dependencies goes go inward go go inward this is another version this is Uncle Bob's version but yeah it looks exactly",
    "start": "1055679",
    "end": "1062120"
  },
  {
    "text": "the same just different terminology errors go in world this is what you can do on the architecture level again these",
    "start": "1062120",
    "end": "1069360"
  },
  {
    "text": "are not top level architectures these are styles that you can apply to a part of the system if that part of the system",
    "start": "1069360",
    "end": "1076440"
  },
  {
    "text": "has certain requirements that warrant this architecture I've done a lot of event sourcing in my career I love that",
    "start": "1076440",
    "end": "1082120"
  },
  {
    "text": "architecture style but it's not something you should just apply unless you have the problem a simple crit architecture is still completely",
    "start": "1082120",
    "end": "1089559"
  },
  {
    "text": "fine what is important and this is not to be confused confused with a vertical uh vertical slice architecture because",
    "start": "1089559",
    "end": "1095600"
  },
  {
    "text": "that's also controversial but I do like to organize my coat and my functionality into vertical slices so is the vertical",
    "start": "1095600",
    "end": "1103760"
  },
  {
    "text": "slice yeah probably it is yeah but I like this model it's very easy to draw that's the beauty about an architecture",
    "start": "1103760",
    "end": "1109600"
  },
  {
    "text": "you can draw draw nice architectures with nice boxes nice boundaries and then you hope that the developers Implement",
    "start": "1109600",
    "end": "1115559"
  },
  {
    "text": "that that's why I'm a coding architecture I help them but what you see is basically everything is organized in a functional aspect every of those",
    "start": "1115559",
    "end": "1123559"
  },
  {
    "text": "slices may have a different architecture style maybe the first one uh I have to",
    "start": "1123559",
    "end": "1129039"
  },
  {
    "text": "stay with the microphone the first one has onion architecture because it's a very complicated domain maybe the second",
    "start": "1129039",
    "end": "1134600"
  },
  {
    "text": "one is a very collaborative domain that needs high performance and where we want to be able to have multiple people work",
    "start": "1134600",
    "end": "1139679"
  },
  {
    "text": "on the same entity where you want to merge events you would apply event sourcing maybe one of those slides is",
    "start": "1139679",
    "end": "1144960"
  },
  {
    "text": "all about you know uh uh searching you know and you use a simple Lucine index",
    "start": "1144960",
    "end": "1150400"
  },
  {
    "text": "or solar whatever and it's a very simple architecture that's the whole point all of them are supposed to represent",
    "start": "1150400",
    "end": "1156760"
  },
  {
    "text": "capabilities that the system provides and of course you immediately see that the dark orange part assuming that",
    "start": "1156760",
    "end": "1163280"
  },
  {
    "text": "they're not color blind are the seams are those internal boundaries these become natural boundaries composition",
    "start": "1163280",
    "end": "1170000"
  },
  {
    "text": "it's a bit of a puristic approach is where you connect everything together so if the First Slice needs some surface",
    "start": "1170000",
    "end": "1176080"
  },
  {
    "text": "from the others it would Define a contract and then the composition layer would connect the two things together",
    "start": "1176080",
    "end": "1181799"
  },
  {
    "text": "which is kind of a what is it the moderator moderator P yes um there're still shared services",
    "start": "1181799",
    "end": "1189880"
  },
  {
    "text": "because you should apply dry within boundaries but this is",
    "start": "1189880",
    "end": "1195480"
  },
  {
    "text": "important oh so dry as I said earlier is a good thing but you have to be careful",
    "start": "1195480",
    "end": "1201720"
  },
  {
    "text": "that you don't apply it dogmatically so what I like to do is given those boundaries those capabilities that I",
    "start": "1201720",
    "end": "1206799"
  },
  {
    "text": "have in my system and I even structure my code according this you can actually go to the repository and you'll find the",
    "start": "1206799",
    "end": "1212640"
  },
  {
    "text": "names of the specific functional slices literally composition shareed servfaces you can actually see from the codebase",
    "start": "1212640",
    "end": "1219760"
  },
  {
    "text": "what the architecture looks like looks like some people will call this the um screaming architecture the codebase",
    "start": "1219760",
    "end": "1225960"
  },
  {
    "text": "screams the architecture I hope it's not screaming because of pains but screaming because it's happy",
    "start": "1225960",
    "end": "1232440"
  },
  {
    "text": "or something um so dry I actually apply within those boundaries so let's say I",
    "start": "1232440",
    "end": "1238320"
  },
  {
    "text": "have some kind of surface which can be anything most conceptual concept some reusable piece of code I typically just",
    "start": "1238320",
    "end": "1245080"
  },
  {
    "text": "duplicate the thing across the different slices even in the same repository yes I",
    "start": "1245080",
    "end": "1250720"
  },
  {
    "text": "do that and that feels very un natural to a lot of people especially if you have to explain this to your architect",
    "start": "1250720",
    "end": "1257000"
  },
  {
    "text": "why are you duplicating the code so owner Cloud now reports we cross the 12% duplication turn it off it's it",
    "start": "1257000",
    "end": "1264559"
  },
  {
    "text": "doesn't help at all it only leads to more coupling couple of more examples duplicating service 2 is also",
    "start": "1264559",
    "end": "1269760"
  },
  {
    "text": "duplicating across the code base helpers whatever you call helpers and if you know net space you love extension",
    "start": "1269760",
    "end": "1276880"
  },
  {
    "text": "methods you know C is extension method which allows you to extend every method every class with additional capability I",
    "start": "1276880",
    "end": "1283400"
  },
  {
    "text": "build an entire library with 300 million downloads it's everywhere I also duplicate them wait what so you're",
    "start": "1283400",
    "end": "1290320"
  },
  {
    "text": "basically duplicating everything no I actually think about what is the worth the duplicating and what is not worth",
    "start": "1290320",
    "end": "1296080"
  },
  {
    "text": "duplicating what is too difficult so there's certain things which I put in the centralized service if there's",
    "start": "1296080",
    "end": "1301720"
  },
  {
    "text": "certain functionality that is either very complicated or need certain skills to understand or maintain I might",
    "start": "1301720",
    "end": "1308799"
  },
  {
    "text": "actually decide to put that in the centralized surface create an interface and make it available to the rest of the code base so it's not like one end of",
    "start": "1308799",
    "end": "1316200"
  },
  {
    "text": "the scale or the other that's being dogmatic I'm trying to Case by case figure out what should be reused and",
    "start": "1316200",
    "end": "1321400"
  },
  {
    "text": "what should not be reused make sense interesting thing is if you have",
    "start": "1321400",
    "end": "1327440"
  },
  {
    "text": "this whole architecture Sly the question about what is the unit in unit testing",
    "start": "1327440",
    "end": "1332480"
  },
  {
    "text": "also becomes much more I would say natural you know uh the books will probably tell you that if you do unit",
    "start": "1332480",
    "end": "1338520"
  },
  {
    "text": "testing or even better test driven development every method every class is a unit and if you follow the B the books",
    "start": "1338520",
    "end": "1345520"
  },
  {
    "text": "blindly you'll probably design it like that I completely disagree with that I'm",
    "start": "1345520",
    "end": "1350880"
  },
  {
    "text": "not very opinionated well I'm very opinionated loosely held I'd like to say um actually this becomes quite obvious",
    "start": "1350880",
    "end": "1358159"
  },
  {
    "text": "so if you look at this picture there's a couple of service here I would probably create unit tests around the entire",
    "start": "1358159",
    "end": "1364480"
  },
  {
    "text": "slice here if that makes sense other slce as well you know this one also I'll",
    "start": "1364480",
    "end": "1369840"
  },
  {
    "text": "create test around them and technically that's pretty easy to do these days those tests don't have to be very",
    "start": "1369840",
    "end": "1375480"
  },
  {
    "text": "complicated and difficult to read uh since there's a couple of things which are within that slide supposed to be",
    "start": "1375480",
    "end": "1381279"
  },
  {
    "text": "reusable I call them Services here again in the most broad term I test them separately here the surface on the right",
    "start": "1381279",
    "end": "1388000"
  },
  {
    "text": "there's another one here and of course the centralized service is also tested independently those are my units and",
    "start": "1388000",
    "end": "1394520"
  },
  {
    "text": "that actually so if you if you try to practice test driven development and Chris had a great demo yesterday about it um the way you can do it wrong is if",
    "start": "1394520",
    "end": "1402159"
  },
  {
    "text": "you treat every class of method as a separate unit you tend to create tons of unit tests you know you have very high",
    "start": "1402159",
    "end": "1408240"
  },
  {
    "text": "code coverage but whenever you redesign or sorry refactor something because we should do that that's what we do every",
    "start": "1408240",
    "end": "1414360"
  },
  {
    "text": "day you'll figure out you'll run into the situation that you have to rewrite your tests that is a smell that's a",
    "start": "1414360",
    "end": "1420080"
  },
  {
    "text": "signal that you're probably testing too small of course you can also go to the other end of the scale you're testing too big I've also experiened that",
    "start": "1420080",
    "end": "1427120"
  },
  {
    "text": "experienced that but understanding those internal boundaries actually helps you with this kind of",
    "start": "1427120",
    "end": "1432440"
  },
  {
    "text": "stuff this is the architecture level on the package level and whenever I say",
    "start": "1432440",
    "end": "1438240"
  },
  {
    "text": "pack package you should assume I'm also talking about projects within a solution or um components in a different",
    "start": "1438240",
    "end": "1444960"
  },
  {
    "text": "architecture style you also have rules to make that easy who has this problem experienced this problem that you update",
    "start": "1444960",
    "end": "1450960"
  },
  {
    "text": "a package whether it's a nuget package or I don't know PHP or mpm and that pulls in a whole bunch of other packages",
    "start": "1450960",
    "end": "1457080"
  },
  {
    "text": "who knows that who has experienced this everybody's coding the rest wasn't coding still wondering what they do I'll",
    "start": "1457080",
    "end": "1462400"
  },
  {
    "text": "ask afterwards uh this is not the coolest room so I'm not sure why you're here um but this is a problem but it's",
    "start": "1462400",
    "end": "1468640"
  },
  {
    "text": "even worse if you have if you depend on two different packages that depend on a shared package and then the functions",
    "start": "1468640",
    "end": "1475440"
  },
  {
    "text": "start to deviate like even breaking changes you're basically screwed right and there's ways to work around that but",
    "start": "1475440",
    "end": "1481200"
  },
  {
    "text": "it's always painful there's an easy way around that relatively what I do and this is based",
    "start": "1481200",
    "end": "1488080"
  },
  {
    "text": "on a book uh this is also actually Robert M Robert C Mar also wrote about this there's another book called the",
    "start": "1488080",
    "end": "1493440"
  },
  {
    "text": "principles of successful package management written by Dutch guy I think Matias newak or something thing he says",
    "start": "1493440",
    "end": "1500880"
  },
  {
    "text": "create a package great we can all do that um instead of creating very generic",
    "start": "1500880",
    "end": "1508880"
  },
  {
    "text": "base classes you know we love to have these these libraries you create a base class you drive from it and somehow all",
    "start": "1508880",
    "end": "1514480"
  },
  {
    "text": "kinds of magic happens you don't know what's happening under the hood but it works right the problem most of the time",
    "start": "1514480",
    "end": "1520080"
  },
  {
    "text": "is if you have that uh and you want something that the magic doesn't provide out of the box you need to dive into the",
    "start": "1520080",
    "end": "1525480"
  },
  {
    "text": "details quite often it's either very difficult not documented because the",
    "start": "1525480",
    "end": "1530559"
  },
  {
    "text": "author of that package only focused on the most common scenarios so I take the opposite direction what I do is actually",
    "start": "1530559",
    "end": "1537440"
  },
  {
    "text": "create small building blocks that all serve their own purpose that you have to",
    "start": "1537440",
    "end": "1543799"
  },
  {
    "text": "understand even my documentation is written like that and then if you cover this part uh I actually provide some",
    "start": "1543799",
    "end": "1550240"
  },
  {
    "text": "kind of higher level building blocks base classes uh no not really but convenience blocks that will make it",
    "start": "1550240",
    "end": "1556000"
  },
  {
    "text": "easier to solve the most common scenarios but you need understand the individual bits and pieces they're also",
    "start": "1556000",
    "end": "1561600"
  },
  {
    "text": "properly documented the tutorials start with this for example the library liquid projection that I just showed you",
    "start": "1561600",
    "end": "1566720"
  },
  {
    "text": "quickly which is an event sourcing library is built ex completely according to this idea this is step one they don't hide",
    "start": "1566720",
    "end": "1574760"
  },
  {
    "text": "the magic they don't don't hide how everything works on the hood that's",
    "start": "1574760",
    "end": "1579919"
  },
  {
    "text": "important the application whatever it is does not use inheritance how Waits we",
    "start": "1579919",
    "end": "1585480"
  },
  {
    "text": "actually been told right with objectoriented programming inheritance that's the holy Grill of programming these things well yes maybe it is but",
    "start": "1585480",
    "end": "1593360"
  },
  {
    "text": "it's also something that leads to coupling leads to Super classes super",
    "start": "1593360",
    "end": "1598559"
  },
  {
    "text": "base classes God classes some people like to call them it's not because we're bad developers it's just organically these things grow in a certain direction",
    "start": "1598559",
    "end": "1605480"
  },
  {
    "text": "and that's why I try to avoid that so I prefer composition basically using building blocks in other classes instead",
    "start": "1605480",
    "end": "1612159"
  },
  {
    "text": "of deriving from building blocks that already makes it a little bit easier creates more decoupling in there next",
    "start": "1612159",
    "end": "1618000"
  },
  {
    "text": "step is make sure you only depend on abstract packages",
    "start": "1618000",
    "end": "1623760"
  },
  {
    "text": "why what's what's so specific about abstract",
    "start": "1623760",
    "end": "1628600"
  },
  {
    "text": "packages I was actually hoping for interaction today sorry they can be replaced yeah that's",
    "start": "1629080",
    "end": "1636440"
  },
  {
    "text": "true well the most important aspect is they tend to be stable abstract interfaces contracts",
    "start": "1636440",
    "end": "1643640"
  },
  {
    "text": "typically don't change that much like um uh so Newton soft. Json is not a good",
    "start": "1643640",
    "end": "1649640"
  },
  {
    "text": "example in net space of an abstract stable package that changes so much of course it becomes obsolete now that",
    "start": "1649640",
    "end": "1654880"
  },
  {
    "text": "Microsoft replaced it no as long as you you depend only on packages that for example Define interfaces or contracts",
    "start": "1654880",
    "end": "1662279"
  },
  {
    "text": "or packages that are very specific and only contain small pieces of functionality then the ripple effect is",
    "start": "1662279",
    "end": "1667919"
  },
  {
    "text": "reduced and this is pretty fundamental the next time you go back to like next month if you start working on try to",
    "start": "1667919",
    "end": "1674080"
  },
  {
    "text": "think about all the dependencies and how you distributed the logic around across the different projects again package",
    "start": "1674080",
    "end": "1679159"
  },
  {
    "text": "means project component uh microservice even with that skill you can think about that like that also if you have like",
    "start": "1679159",
    "end": "1688120"
  },
  {
    "text": "additional functionality that is not always used with the main package don't put it in the main package actually",
    "start": "1688120",
    "end": "1694200"
  },
  {
    "text": "create a separate package out of that so in this P picture you see this blue box dependency package which actually",
    "start": "1694200",
    "end": "1700120"
  },
  {
    "text": "decouples the two of them it's almost the dependency version principle again the optional package depends on the core",
    "start": "1700120",
    "end": "1706360"
  },
  {
    "text": "one and connects it to this other capabilities you have that's another principle and everything that's in that",
    "start": "1706360",
    "end": "1714799"
  },
  {
    "text": "package is something you should use at the same time so additional stuff like I don't know you built a library that has",
    "start": "1714799",
    "end": "1720720"
  },
  {
    "text": "some some more implementations for unit testing don't put them in the same package put them in an auxiliary package",
    "start": "1720720",
    "end": "1726760"
  },
  {
    "text": "if you're in net space xunit is actually doing this you have xunit abstractions xunit core xunit other stuff assertions",
    "start": "1726760",
    "end": "1734200"
  },
  {
    "text": "or something like that um that's done on purpose to decouple things because you do not want to ship a new version of",
    "start": "1734200",
    "end": "1740399"
  },
  {
    "text": "your core package just because you changed the mock implementation and made a bit smarter nothing changed in the",
    "start": "1740399",
    "end": "1746159"
  },
  {
    "text": "rest so you actually end up much more controlled versioning of individual packages and",
    "start": "1746159",
    "end": "1752720"
  },
  {
    "text": "components sounds very difficult no it's cool that's actually cool I know pyic dependencies obviously but nobody does",
    "start": "1752720",
    "end": "1760279"
  },
  {
    "text": "that let it sink in next week try to look at the picture again look at your",
    "start": "1760279",
    "end": "1766200"
  },
  {
    "text": "own code base and try to get a sense like okay maybe I get it if you don't get it you can always reach out to me you can hire me or something I don't",
    "start": "1766200",
    "end": "1772240"
  },
  {
    "text": "know no it's too far away um on the code level yeah you can go one level down the",
    "start": "1772240",
    "end": "1778360"
  },
  {
    "text": "code level uh same principles what can you do um in net if you create a class",
    "start": "1778360",
    "end": "1785919"
  },
  {
    "text": "or struct or whatever the default visibility so the scope of how you can access it is unfortunately",
    "start": "1785919",
    "end": "1793240"
  },
  {
    "text": "public which means that if the code is public anybody can use it which is",
    "start": "1793240",
    "end": "1798440"
  },
  {
    "text": "annoying because then it means also idees like a riter or rearer they cannot",
    "start": "1798440",
    "end": "1804519"
  },
  {
    "text": "actually make any assumptions whether that code is being used even if that code is not even invoked within the code",
    "start": "1804519",
    "end": "1810000"
  },
  {
    "text": "base and if it's a big code base you may not have that over you anymore it can make assumption because it's public so",
    "start": "1810000",
    "end": "1815519"
  },
  {
    "text": "the first thing I do is make everything internal internal and net means it's only visible within the same project or",
    "start": "1815519",
    "end": "1821519"
  },
  {
    "text": "the same package which makes a difference now the IDE can actually make",
    "start": "1821519",
    "end": "1826799"
  },
  {
    "text": "can reason about that it can analyze the codebase and discover hey you're not calling this it becomes gray and what's",
    "start": "1826799",
    "end": "1832320"
  },
  {
    "text": "the best day as a developer in your life deleting code I was going to say",
    "start": "1832320",
    "end": "1837600"
  },
  {
    "text": "getting a pay range but uh no actually that was my point deleting code is is awesome especially",
    "start": "1837600",
    "end": "1844760"
  },
  {
    "text": "if it's other people's code because then I can rewrite it no I",
    "start": "1844760",
    "end": "1850320"
  },
  {
    "text": "love deleting code even deleting my own code because every line of code that is not there I don't have to maintain don't",
    "start": "1850320",
    "end": "1856399"
  },
  {
    "text": "have to create test for it unless you have nothing left then it's no fun anymore but anyway um but this is",
    "start": "1856399",
    "end": "1862440"
  },
  {
    "text": "important it's a simple trick make everything internal and I don't know the equivalent in other languages but figure",
    "start": "1862440",
    "end": "1868080"
  },
  {
    "text": "it out but you know what it means uh remove unused code well clear even unused parameters is surprisingly much",
    "start": "1868080",
    "end": "1875519"
  },
  {
    "text": "like every codebase I've worked with as a consultant if I use the proper tooling you know all this stuff becomes gray",
    "start": "1875519",
    "end": "1881320"
  },
  {
    "text": "like entire section of the code where the compiler didn't actually see it with a good analysis tool can actually figure",
    "start": "1881320",
    "end": "1887480"
  },
  {
    "text": "out like hey this section will never be invoked just delete that it's incredible how much code I removed from my last",
    "start": "1887480",
    "end": "1893880"
  },
  {
    "text": "project I we wrote um what else I already alluded to that if you",
    "start": "1893880",
    "end": "1901039"
  },
  {
    "text": "start to structure your code Base According to the capabilities then make sure you do the same with your own with",
    "start": "1901039",
    "end": "1906960"
  },
  {
    "text": "your code sell so this is an example and this is a pretty uh puristic example",
    "start": "1906960",
    "end": "1913120"
  },
  {
    "text": "where I have a component that is responsible for making a distributed log across different servers it's using SQL",
    "start": "1913120",
    "end": "1919720"
  },
  {
    "text": "Server specific uh Primitives to make sure that only one of the servers at startup can for example in initialize",
    "start": "1919720",
    "end": "1926000"
  },
  {
    "text": "the schema of the database that is something that I do not want to duplicate that is a good example",
    "start": "1926000",
    "end": "1932159"
  },
  {
    "text": "of something I would put in this you know the bottom part the shareed services what's interesting is I have an",
    "start": "1932159",
    "end": "1938200"
  },
  {
    "text": "infrastructure folder which is debatable it has a functional name distributed",
    "start": "1938200",
    "end": "1943399"
  },
  {
    "text": "locking which is what it's about um it has an interface called I provide",
    "start": "1943399",
    "end": "1949039"
  },
  {
    "text": "cluster crust so I provide cluster white lock which is a net convention to say I",
    "start": "1949039",
    "end": "1956200"
  },
  {
    "text": "provide to you the cluster white lock it's an interface abstraction and a",
    "start": "1956200",
    "end": "1961639"
  },
  {
    "text": "concrete implementation the cluster lock provider obviously but what's interesting is there's also code in an",
    "start": "1961639",
    "end": "1967399"
  },
  {
    "text": "internal follow and that code if you're in a net space might actually look very generic I",
    "start": "1967399",
    "end": "1973559"
  },
  {
    "text": "mean who wants to create an exception swallowing disposable it's a pretty uh special thing but the point is I make it",
    "start": "1973559",
    "end": "1980320"
  },
  {
    "text": "very explicit here almost puristic that some of this code is just an implementation detail even though in the",
    "start": "1980320",
    "end": "1986440"
  },
  {
    "text": "past I would probably put this into infrastructure common or something like that some generic name so I can reuse",
    "start": "1986440",
    "end": "1992279"
  },
  {
    "text": "code I'm not doing that I'm just duplicating it and make sure that this is internal why do I use this in do net",
    "start": "1992279",
    "end": "1999639"
  },
  {
    "text": "the the default behavior is the the name space or sorry the folder structure is also the structure of the name space of",
    "start": "1999639",
    "end": "2005240"
  },
  {
    "text": "your types so if somebody accidentally uh because the ID is very easy to import",
    "start": "2005240",
    "end": "2011159"
  },
  {
    "text": "all kinds of stuff in your current codebase is using at the top of the file using is a way to import namespace same",
    "start": "2011159",
    "end": "2017320"
  },
  {
    "text": "Principle as Import in JavaScript typescript infrastructure. distribute locking do internals that's hopefully a",
    "start": "2017320",
    "end": "2024080"
  },
  {
    "text": "signal for the refie like hey that's weird why are you using internal stuff from a completely different a space is",
    "start": "2024080",
    "end": "2030159"
  },
  {
    "text": "to reduce coupling again you know yeah but you know we need to apply dry no not at this level by the way this also",
    "start": "2030159",
    "end": "2037200"
  },
  {
    "text": "becomes the natural seam the natural boundary for unit testing for dry",
    "start": "2037200",
    "end": "2042320"
  },
  {
    "text": "already showed you for unit testing it's so simple so simple on paper also means",
    "start": "2042320",
    "end": "2048480"
  },
  {
    "text": "that the Json fos in your structure are supposed to be separate uh what it separate boundaries so that's why I hate",
    "start": "2048480",
    "end": "2055280"
  },
  {
    "text": "the whole principle that Microsoft have the controllers fuse models they are usually part of the same thing One",
    "start": "2055280",
    "end": "2061200"
  },
  {
    "text": "controller in asp.net links to the view links to the model they belong together",
    "start": "2061200",
    "end": "2066839"
  },
  {
    "text": "these models are typically not not reusable so group them in the same F that makes it much more logic how things",
    "start": "2066839",
    "end": "2072800"
  },
  {
    "text": "belong together and it means if you have things to separate folders next to each other that means that in principle a",
    "start": "2072800",
    "end": "2079280"
  },
  {
    "text": "separate unit for unit testing and for dry and for other things I hope that makes",
    "start": "2079280",
    "end": "2084800"
  },
  {
    "text": "sense couple other things tell don't ask principle like what's wrong with the for",
    "start": "2084800",
    "end": "2090560"
  },
  {
    "text": "the first line order. order lines any has a value of more than 10K but they really trying",
    "start": "2090560",
    "end": "2097960"
  },
  {
    "text": "to do here is yeah for the sake of time I'm not actually going to wait for the answer because then we're not finished before dinner um what we're doing here",
    "start": "2097960",
    "end": "2105839"
  },
  {
    "text": "actually is saying I want to know if this order has a value of more than 10K why is this code touching the order",
    "start": "2105839",
    "end": "2113560"
  },
  {
    "text": "lines of an order and doing this yourself why is it not just asking like are you high valued or something like",
    "start": "2113560",
    "end": "2120240"
  },
  {
    "text": "that that's a basic o principle data hiding and still we all do this why",
    "start": "2120240",
    "end": "2125560"
  },
  {
    "text": "because we simply usually often use primitive types for collections instead of encapsulating thises so the bottom",
    "start": "2125560",
    "end": "2131680"
  },
  {
    "text": "one is the correct one I'm asking the order are you high valued because if that logic changes none of the rest of",
    "start": "2131680",
    "end": "2137119"
  },
  {
    "text": "the code needs to know about this same here if the item sell in is smaller than",
    "start": "2137119",
    "end": "2142960"
  },
  {
    "text": "11 if the item quality then we increase the quality so you're basically putting all this responsibility and I don't know",
    "start": "2142960",
    "end": "2149000"
  },
  {
    "text": "what kind of business role this is outside the class or the type that owns this information this is so trivial and",
    "start": "2149000",
    "end": "2156040"
  },
  {
    "text": "we all do it including myself because it just sneaks into your code base you have a collection you don't you're using",
    "start": "2156040",
    "end": "2161599"
  },
  {
    "text": "certain methods to iterate over the collections putting everything back into the class applying basic o principles",
    "start": "2161599",
    "end": "2168040"
  },
  {
    "text": "except inheritance of course makes it a lot easier the law of damer is that do I say damer of demer what is it is it",
    "start": "2168040",
    "end": "2176599"
  },
  {
    "text": "demer or depending on who you ask right Americans will say deer and the no okay",
    "start": "2176599",
    "end": "2182359"
  },
  {
    "text": "it's the meter finally settle that",
    "start": "2182359",
    "end": "2188960"
  },
  {
    "text": "sorry thank you okay cool damer yeah see like d yeah somehow always reminds me of",
    "start": "2188960",
    "end": "2196400"
  },
  {
    "text": "stranger things I don't know why um this is also one like basically says like if you have one more more than one dot in",
    "start": "2196400",
    "end": "2203200"
  },
  {
    "text": "your your reference then that's a trigger that's a urtic or a smell is probably a better word for that like",
    "start": "2203200",
    "end": "2209720"
  },
  {
    "text": "context do selected M path counts so wait so it's actually calculating the",
    "start": "2209720",
    "end": "2216200"
  },
  {
    "text": "depth by taking something that looks like a string and Counting the number of dots in there like that's a lot of",
    "start": "2216200",
    "end": "2223960"
  },
  {
    "text": "knowledge um this the same thing so this should have already triggered the previous example that something is",
    "start": "2223960",
    "end": "2230280"
  },
  {
    "text": "wrong there's tons of examples on the internet this is not new stuff I learned this 20 years ago I just completely",
    "start": "2230280",
    "end": "2236000"
  },
  {
    "text": "forgot about that um one way of solving it is to encapsulate things so here you have a first class citizen in a code",
    "start": "2236000",
    "end": "2243040"
  },
  {
    "text": "based order which has an internal or private order lines collection",
    "start": "2243040",
    "end": "2248319"
  },
  {
    "text": "I don't like classes which names is plural but I couldn't come up with anything like that I could have called it orderline collection or something",
    "start": "2248319",
    "end": "2254760"
  },
  {
    "text": "with a the special thing is now the logic of determining whether it's high valued is encapsulated inside that class",
    "start": "2254760",
    "end": "2261720"
  },
  {
    "text": "and even the top level one the order doesn't need to know how to do that it just ask the in inline cloud and I know",
    "start": "2261720",
    "end": "2267800"
  },
  {
    "text": "everybody uses primitive types lists collections dictionary stuff by default",
    "start": "2267800",
    "end": "2272880"
  },
  {
    "text": "by encapsulating those things into first class sting of your code base so basically custom classes or types uh it",
    "start": "2272880",
    "end": "2280160"
  },
  {
    "text": "already makes your code a lot easier to maintain you'll figure that out if you do that you'll discover that your code becomes much more readable because quite",
    "start": "2280160",
    "end": "2287359"
  },
  {
    "text": "often if you have like a parent child cation an order and Order lines the order is very bloated it has a stupid",
    "start": "2287359",
    "end": "2294280"
  },
  {
    "text": "list collection or something with order lines but all the logic is in the order class the order line is usually just two",
    "start": "2294280",
    "end": "2299560"
  },
  {
    "text": "properties or three properties or something like that everything is in a base in a parent class that's the",
    "start": "2299560",
    "end": "2304839"
  },
  {
    "text": "natural thing that happens apply encapsulate primitive types don't do it",
    "start": "2304839",
    "end": "2310200"
  },
  {
    "text": "always don't be dogmatic but keep it in mind every time you use a primitive type in your your class in your domain modile",
    "start": "2310200",
    "end": "2316480"
  },
  {
    "text": "for example would it be smart to encapsulate that like a string representing an ISBN number for a book",
    "start": "2316480",
    "end": "2322839"
  },
  {
    "text": "and then the class that owns that property of this field contains all the logic to verify whether an ISBN number",
    "start": "2322839",
    "end": "2328480"
  },
  {
    "text": "is correct then create a freaking asbn type for that",
    "start": "2328480",
    "end": "2333640"
  },
  {
    "text": "encapsulate 15 minutes left and halfway I think um dependency injection who's using",
    "start": "2333640",
    "end": "2340280"
  },
  {
    "text": "dependency injection oh okay everybody almost who has a a global control sorry",
    "start": "2340280",
    "end": "2346000"
  },
  {
    "text": "Global container okay so that's another issue if you have a global container all your",
    "start": "2346000",
    "end": "2352240"
  },
  {
    "text": "registrations are centrally somewhere you have this big gen big class where all the registrations all your dependencies happening interestingly if",
    "start": "2352240",
    "end": "2359200"
  },
  {
    "text": "you follow this kind of idea and again you don't have to call it functional slide but just modules or something it",
    "start": "2359200",
    "end": "2364359"
  },
  {
    "text": "becomes also interesting to align those containers with it like this F slide has",
    "start": "2364359",
    "end": "2369599"
  },
  {
    "text": "a local di container maybe this this composition layer has its own container",
    "start": "2369599",
    "end": "2374640"
  },
  {
    "text": "for registration stuff registering stuff the the third one has its own container",
    "start": "2374640",
    "end": "2379880"
  },
  {
    "text": "maybe the second one doesn't even need a container why would you need it it's only needed if you have complicated dependencies or something like that",
    "start": "2379880",
    "end": "2386200"
  },
  {
    "text": "because I and I've done this myself like this huge registration class and you try to make sense of it becomes a mess and",
    "start": "2386200",
    "end": "2393200"
  },
  {
    "text": "at some point in run time you're trying to figure out when you analyze the C where does this come from you know it's hidden the way with some even worse",
    "start": "2393200",
    "end": "2400319"
  },
  {
    "text": "convention based dependency scanning like magically things pop up there is",
    "start": "2400319",
    "end": "2405359"
  },
  {
    "text": "value in that but you have to understand the flip side of that it makes your code very difficult to understand aligning",
    "start": "2405359",
    "end": "2412040"
  },
  {
    "text": "this with those internal boundaries is another great thing to do um and dependency injection you don't",
    "start": "2412040",
    "end": "2419319"
  },
  {
    "text": "need an interface or abstractions for dependen injection you can actually inject a concrete class almost every",
    "start": "2419319",
    "end": "2426000"
  },
  {
    "text": "example in net space the first people what they do is I have this component what do we do we create an interface",
    "start": "2426000",
    "end": "2432280"
  },
  {
    "text": "called component with the eye in front of it and that's what to register why",
    "start": "2432280",
    "end": "2437319"
  },
  {
    "text": "yes because we need to be able to mock that dependency interestingly if you use the same principles that I showed you as",
    "start": "2437319",
    "end": "2444359"
  },
  {
    "text": "the unit of testing you don't need mocking except across the dependencies but inside you don't need mocking",
    "start": "2444359",
    "end": "2450880"
  },
  {
    "text": "interface you don't need to don't need mocking libraries or anything like that I'm not saying you should never use it",
    "start": "2450880",
    "end": "2456160"
  },
  {
    "text": "again there's two cams no inside the boundaries you probably don't need mocking tools across boundaries you do",
    "start": "2456160",
    "end": "2462880"
  },
  {
    "text": "need mocking tools because that's where you have your contracts I hope the message actually comes comes across so of course um uh uh",
    "start": "2462880",
    "end": "2472720"
  },
  {
    "text": "unless you're very lucky you all have to deal with Legacy code it's not every project is is Green Field even if you I",
    "start": "2472720",
    "end": "2478960"
  },
  {
    "text": "mean I love Legacy code I'm addicted to Legacy code as I said I love deleting code and rewriting it in my own image",
    "start": "2478960",
    "end": "2485480"
  },
  {
    "text": "but um the it's it's really nice and I actually try to figure out like how do",
    "start": "2485480",
    "end": "2491400"
  },
  {
    "text": "oh talking about Legacy uh sorry distracting this I hope he's fine um I I",
    "start": "2491400",
    "end": "2499560"
  },
  {
    "text": "kind of Tred to imagine like because I have this natural way of approaching these legy code basis and I try to figure out like how do I actually",
    "start": "2499560",
    "end": "2505359"
  },
  {
    "text": "approach this what are the steps that I go through yes sorry now you're all distracted I know that don't matter just",
    "start": "2505359",
    "end": "2512119"
  },
  {
    "text": "listen to my voice there's nothing on the slides listen to my voice and I fall asleep um so I try to draw a little bit",
    "start": "2512119",
    "end": "2519680"
  },
  {
    "text": "in general what I do what I start with understanding if there's a production environment what happens there what is",
    "start": "2519680",
    "end": "2525720"
  },
  {
    "text": "actually deployed there what are the dependencies what does it need how does it run is it one machine is it multiple",
    "start": "2525720",
    "end": "2531599"
  },
  {
    "text": "machine does it depend on cloud services how does it skill how do these indes communicate with each other which ports",
    "start": "2531599",
    "end": "2537079"
  },
  {
    "text": "are open up that gives me kind of sense of what is the thing supposed to do and how it's being used in production",
    "start": "2537079",
    "end": "2542599"
  },
  {
    "text": "because you can look at the code base but this is very useful that's what I start with then I figure out tried to figure out the code base is there a code",
    "start": "2542599",
    "end": "2548960"
  },
  {
    "text": "base what version is the code base is it which which source control system is it using um I actually found and this is",
    "start": "2548960",
    "end": "2555359"
  },
  {
    "text": "not a joke it's not a I'm not lying uh this last year I ran into a production",
    "start": "2555359",
    "end": "2560839"
  },
  {
    "text": "system at a client where the code was actually on the network drive in yes in a f and there were also",
    "start": "2560839",
    "end": "2568160"
  },
  {
    "text": "zip files containing alternate versions with that and the zip. buck you know backup stuff like that so this might be",
    "start": "2568160",
    "end": "2575520"
  },
  {
    "text": "trivial but even if you go go to a g repos story asure devops you might wonder what is the version that's",
    "start": "2575520",
    "end": "2580920"
  },
  {
    "text": "currently in production what what hash key is it do they use gitflow or something like that so that you immediately see master or main supposed",
    "start": "2580920",
    "end": "2587880"
  },
  {
    "text": "to represent what's in production or tag or something can I actually go to the production excitable and get the version",
    "start": "2587880",
    "end": "2593640"
  },
  {
    "text": "or even the hash key of the commit from the production environment if you can't do that there's room for improvements",
    "start": "2593640",
    "end": "2599359"
  },
  {
    "text": "Next Step find that and then use code and delete it because again all that",
    "start": "2599359",
    "end": "2604680"
  },
  {
    "text": "code that you can delete you don't have to maintain or understand can remove it you can make your mental model a bit more simpler build a safety",
    "start": "2604680",
    "end": "2612160"
  },
  {
    "text": "net unless you're very lucky there's probably no automated testing or very limited automated testing or very",
    "start": "2612160",
    "end": "2618000"
  },
  {
    "text": "unreliable automated testing so build a safety net improve the deployability you know if you start to improve this thing",
    "start": "2618000",
    "end": "2624960"
  },
  {
    "text": "how difficult is it to actually deploy it again in production that's going to be interesting you know yeah we do it by",
    "start": "2624960",
    "end": "2631480"
  },
  {
    "text": "hand what do you mean yeah we create a zip and we copy to copy it to network drive and then we zip into this folder",
    "start": "2631480",
    "end": "2637160"
  },
  {
    "text": "then we change the config file we copy the original config file because it contains changes you've experienced this",
    "start": "2637160",
    "end": "2643000"
  },
  {
    "text": "right so use infrastructures code use pumi or something like that um and then",
    "start": "2643000",
    "end": "2648640"
  },
  {
    "text": "you know when you're actually capable of deploying a new version start to improve the code quality start to apply the",
    "start": "2648640",
    "end": "2655079"
  },
  {
    "text": "things I showed you earlier uh apply the law of diameter uh look at the number of",
    "start": "2655079",
    "end": "2660440"
  },
  {
    "text": "dots try to encapsulate primitive types with more specific types try to understand fit together then you even go",
    "start": "2660440",
    "end": "2666839"
  },
  {
    "text": "one level up you know you look at the code design you look at the folder structures and at some point you may even look at the architecture can I",
    "start": "2666839",
    "end": "2672839"
  },
  {
    "text": "actually decouple certain things is it actually useful to introduce an onion architecture or something or apply the",
    "start": "2672839",
    "end": "2678359"
  },
  {
    "text": "dip practice to make everything a little bit more Loosely coupled that on itself",
    "start": "2678359",
    "end": "2683599"
  },
  {
    "text": "is a job it's my job so um a couple of extra things a",
    "start": "2683599",
    "end": "2689359"
  },
  {
    "text": "safety net um there's a nice book written by Mr Mr Ferris he lives in Miami Beach uh working effectively with",
    "start": "2689359",
    "end": "2696400"
  },
  {
    "text": "Legacy code it's a brilliant book it's written with C++ as examples but yeah if you do Java or JavaScript or typescript",
    "start": "2696400",
    "end": "2702960"
  },
  {
    "text": "or shop you'll you'll be able to figure that out and he talks about characteristics tests or",
    "start": "2702960",
    "end": "2708680"
  },
  {
    "text": "characterization tests which are literally tests that you introduce on an existing code base that call a",
    "start": "2708680",
    "end": "2715280"
  },
  {
    "text": "particular method verify or or observe what comes out of that and put that in",
    "start": "2715280",
    "end": "2720440"
  },
  {
    "text": "the assertion so literally writing tests that just capture the current behavior so that the you can use that as",
    "start": "2720440",
    "end": "2727599"
  },
  {
    "text": "a safety note because then you're going to refactor and you know nothing breaks yes they may actually work on a production backup database yes they may",
    "start": "2727599",
    "end": "2734640"
  },
  {
    "text": "be very slow you will not be able to paralyze that you know they will be brittle but it doesn't matter it is",
    "start": "2734640",
    "end": "2740280"
  },
  {
    "text": "something that you have and you don't have to be make it maintainable they don't have to be readable as long as you and you can even it's 2024 use an AI",
    "start": "2740280",
    "end": "2748240"
  },
  {
    "text": "tool to generate some of that that's a safety L um for example I have this Legacy code",
    "start": "2748240",
    "end": "2755640"
  },
  {
    "text": "base I have a production datase and I'm creating a b a bunch of test test so",
    "start": "2755640",
    "end": "2760680"
  },
  {
    "text": "test read around that that's what it could look like what about this database well it's actually pretty cool these",
    "start": "2760680",
    "end": "2766720"
  },
  {
    "text": "days we have things like Docker and you can run SQL Server as an example in a",
    "start": "2766720",
    "end": "2771920"
  },
  {
    "text": "Linux container which launches in milliseconds and use that in your tests so that a bunch of test actually use its",
    "start": "2771920",
    "end": "2779160"
  },
  {
    "text": "own isolated database which makes those those characterization tests a little bit more stable and reliable or",
    "start": "2779160",
    "end": "2785559"
  },
  {
    "text": "faster looks a little bit like this Linux test container and then the test read just creates a new one of course if",
    "start": "2785559",
    "end": "2792079"
  },
  {
    "text": "it's a production backup uh you need to restore that but you could even build a container that already contains the",
    "start": "2792079",
    "end": "2797280"
  },
  {
    "text": "production backup in there and launch the container can still be pretty fast much faster than having a shared SQL",
    "start": "2797280",
    "end": "2803400"
  },
  {
    "text": "Server somewhere where you manually have to copy the production database this is i' I've used this",
    "start": "2803400",
    "end": "2809000"
  },
  {
    "text": "technique many times it takes a little bit of work at the beginning but it pays back",
    "start": "2809000",
    "end": "2814079"
  },
  {
    "text": "easily uh in the net space is actually called test",
    "start": "2814079",
    "end": "2818839"
  },
  {
    "text": "for.net okay um so how do you find existing seams and the couple them is a",
    "start": "2819880",
    "end": "2825400"
  },
  {
    "text": "couple of things I started with that use a tool to visualize things I think most people are visual people and we like to",
    "start": "2825400",
    "end": "2831960"
  },
  {
    "text": "create this mental model the best way to actually look at a picture um then then",
    "start": "2831960",
    "end": "2837240"
  },
  {
    "text": "try to identify potential candidates for modules or functional slices what I've",
    "start": "2837240",
    "end": "2843079"
  },
  {
    "text": "often seen is that the original architect was actually pretty decent they actually had some kind of",
    "start": "2843079",
    "end": "2848480"
  },
  {
    "text": "architecture in mind you know there was some kind of structure in the codebase but the developers that came after that",
    "start": "2848480",
    "end": "2854119"
  },
  {
    "text": "kind of lost track you know made a mess out of that not because they're bad developers just because they didn't have",
    "start": "2854119",
    "end": "2859359"
  },
  {
    "text": "this mental picture anymore and didn't know what to do they just started copy pasting code find types classes whatever you",
    "start": "2859359",
    "end": "2867559"
  },
  {
    "text": "call that that are supposed to be used together that's important because if they used to you can actually group them",
    "start": "2867559",
    "end": "2874480"
  },
  {
    "text": "uh also find types that were designed to be reusable that's a difference there a subtle difference something that's potentially",
    "start": "2874480",
    "end": "2880880"
  },
  {
    "text": "reusable which is practically everything you create is something different from something that was designed to be",
    "start": "2880880",
    "end": "2886319"
  },
  {
    "text": "reusable keep that in mind you you when you see it you know it so these are just",
    "start": "2886319",
    "end": "2891680"
  },
  {
    "text": "juristic it's not going to lead to guarantee you to success but it hopefully gives you uh get you in the",
    "start": "2891680",
    "end": "2897119"
  },
  {
    "text": "right direction that's you um and also look at the current dependency injection registration and see if that aligns with",
    "start": "2897119",
    "end": "2903680"
  },
  {
    "text": "what you already seeing because you're building this model maybe you draw it out paper on whiteboard or something",
    "start": "2903680",
    "end": "2908800"
  },
  {
    "text": "like that and then see if everything in the code base aligns with that quite often it doesn't but looking at the",
    "start": "2908800",
    "end": "2914000"
  },
  {
    "text": "registrations may actually because that's code that doesn't change that often may actually give you hints about",
    "start": "2914000",
    "end": "2919880"
  },
  {
    "text": "what the original architect had in mind when they designed that code base and as I said code in adjacent",
    "start": "2919880",
    "end": "2926079"
  },
  {
    "text": "folders you should actually treat them as separate uh separate boundaries use that you know to",
    "start": "2926079",
    "end": "2933400"
  },
  {
    "text": "visualize what the architecture should look like could be something like this could be something else completely doesn't matter but use that information",
    "start": "2933400",
    "end": "2940240"
  },
  {
    "text": "so that everybody else also get a sense of that or even use that and ask existing developers that have been",
    "start": "2940240",
    "end": "2945960"
  },
  {
    "text": "around like do you recognize yourself in this well not yourself but do you recognize the codebase in this if not",
    "start": "2945960",
    "end": "2951599"
  },
  {
    "text": "you know this only doing this because some of the developers may already have built some kind of mental model because",
    "start": "2951599",
    "end": "2957480"
  },
  {
    "text": "they've been working with that codebase by creating this picture they either say oh that is actually also what I have in",
    "start": "2957480",
    "end": "2963200"
  },
  {
    "text": "mind or no man this is completely not what what this code Bas looks like like no no that's true but that's a good",
    "start": "2963200",
    "end": "2968319"
  },
  {
    "text": "thing pictures pictures say a thousand words and then try find some kind of",
    "start": "2968319",
    "end": "2974000"
  },
  {
    "text": "code base that you start to entangle and create a nice separate block for it how",
    "start": "2974000",
    "end": "2979319"
  },
  {
    "text": "do you do that move code to functional follows step one that already helps me",
    "start": "2979319",
    "end": "2984520"
  },
  {
    "text": "often you know functional folders folders with names that represent Concepts from that codebase capabilities",
    "start": "2984520",
    "end": "2991680"
  },
  {
    "text": "you know appli uh code level guidelines introduce for example editor config or ES Lin or whatever you're using in that",
    "start": "2991680",
    "end": "2998400"
  },
  {
    "text": "folder not on the entire code base but at the level of that folder because that applies to everything that you move",
    "start": "2998400",
    "end": "3003799"
  },
  {
    "text": "there start to clean it up use a dip adapter what is a dip adapter well let's",
    "start": "3003799",
    "end": "3009640"
  },
  {
    "text": "say I have an auto processing module and I have this ugly generic interface which",
    "start": "3009640",
    "end": "3015200"
  },
  {
    "text": "you cannot easily change because it's used all over the code base what you can do is introduce something in between you",
    "start": "3015200",
    "end": "3021160"
  },
  {
    "text": "define a new interface a contract which is very specific to The Domain that's new the blue one is new",
    "start": "3021160",
    "end": "3027400"
  },
  {
    "text": "and then you have a simple class in the middle that uh implements the new interface as the dependency version",
    "start": "3027400",
    "end": "3033960"
  },
  {
    "text": "principle tries to say and has a dependency on the old interface that way you can have a small",
    "start": "3033960",
    "end": "3040240"
  },
  {
    "text": "part of the code base Define you know become its own boundary Define what it needs and have an adapter that actually",
    "start": "3040240",
    "end": "3046599"
  },
  {
    "text": "translate that translate in the old interface because quite often that I store order which only has three members",
    "start": "3046599",
    "end": "3052760"
  },
  {
    "text": "here in reality has like 50 members or something like that because it just grew up over time organically because people",
    "start": "3052760",
    "end": "3059079"
  },
  {
    "text": "weren't understanding the code base that's a very powerful that adapter is very small and is typically also not",
    "start": "3059079",
    "end": "3064760"
  },
  {
    "text": "covered by test except maybe those characteris characterization tests then duplicate",
    "start": "3064760",
    "end": "3070880"
  },
  {
    "text": "code copy paste cross the code base copy paste what's in that that new that new",
    "start": "3070880",
    "end": "3077240"
  },
  {
    "text": "little boundary and copy there and make sure that it doesn't rely on anything else anymore that feels very dirty but",
    "start": "3077240",
    "end": "3084160"
  },
  {
    "text": "also duplicate code that is not supposed to be used but it's used in multiple places just let it just duplicate and",
    "start": "3084160",
    "end": "3090839"
  },
  {
    "text": "what you will find is that by duplicating it you can actually delete a lot of stuff because quite often re",
    "start": "3090839",
    "end": "3097359"
  },
  {
    "text": "potentially or reusable code or code that's being reused is much more complicated need be because it needs to to to to satisfy the different",
    "start": "3097359",
    "end": "3104319"
  },
  {
    "text": "requirements of the different parts of the system just duplicate and figure out like oh I'm not using this this entire",
    "start": "3104319",
    "end": "3109880"
  },
  {
    "text": "path just delete it delete it delete it and then you have three or four or five copies which are much simpler to",
    "start": "3109880",
    "end": "3115440"
  },
  {
    "text": "understand than that one reusable implementation and of course if it was",
    "start": "3115440",
    "end": "3122760"
  },
  {
    "text": "supposed to be reusable and there's duplication and you think it's worth the effort if it's really that complicated",
    "start": "3122760",
    "end": "3128920"
  },
  {
    "text": "as I said move it to the Shar surface layer or whatever you call it like that and start to reuse it all over the place",
    "start": "3128920",
    "end": "3135599"
  },
  {
    "text": "so it goes both ways and then maybe also looking at IC",
    "start": "3135599",
    "end": "3141280"
  },
  {
    "text": "containers um this is a very coar grained high level way of approaching",
    "start": "3141280",
    "end": "3147040"
  },
  {
    "text": "that the reality is much more complicated but this is generally what I follow every time I have to deal with",
    "start": "3147040",
    "end": "3155400"
  },
  {
    "text": "that and then you just repeat so you nice have this nice extracted capability",
    "start": "3155400",
    "end": "3160440"
  },
  {
    "text": "you know what's also cool about this picture this is still a monolith right it's one application now imagine that",
    "start": "3160440",
    "end": "3167359"
  },
  {
    "text": "this extracted capability needs to scale independently in the if there's a reason to scale not because somebody think it's",
    "start": "3167359",
    "end": "3173960"
  },
  {
    "text": "cool you could actually take that box put it in into a small orange UT box",
    "start": "3173960",
    "end": "3179480"
  },
  {
    "text": "which you deploy independently in the cloud or something before you know it you have a microservice architecture the",
    "start": "3179480",
    "end": "3185160"
  },
  {
    "text": "beauty is you have a microservice architecture that aligns with the internal functional boundaries of your",
    "start": "3185160",
    "end": "3190200"
  },
  {
    "text": "code base which is much better than a technical reason but again I'm not saying you should you can consider that",
    "start": "3190200",
    "end": "3197000"
  },
  {
    "text": "given that you understand the consequences make sense and then at some point you have a beautiful codebase",
    "start": "3197000",
    "end": "3203359"
  },
  {
    "text": "which will never happen because by the time you're done you already move to the next project but that's the reality that's the",
    "start": "3203359",
    "end": "3209319"
  },
  {
    "text": "reality this is it um yeah I actually caught up quite well",
    "start": "3209319",
    "end": "3215440"
  },
  {
    "text": "given that I lost a couple of minutes I hope it made sense maybe not right now",
    "start": "3215440",
    "end": "3220559"
  },
  {
    "text": "but I hope that if you start if you know let sink in over the weekend or you drink a couple of beers tonight it certainly will make sense um this has",
    "start": "3220559",
    "end": "3228000"
  },
  {
    "text": "really changed the way I've designed I design and build my system every codebase that I had to you know help",
    "start": "3228000",
    "end": "3234559"
  },
  {
    "text": "clients with these were the things that helped me really you know it helped me with applying test driven development at",
    "start": "3234559",
    "end": "3239720"
  },
  {
    "text": "the right level dependency injection dry all these things align really well with this whole idea so thank you for your",
    "start": "3239720",
    "end": "3246160"
  },
  {
    "text": "attention if you have more questions you can stick around unless there's questions right now forgot to ask of course if not yes oh yeah",
    "start": "3246160",
    "end": "3257160"
  },
  {
    "text": "yeah so you don't so the question is while you do that you have like one group of",
    "start": "3270400",
    "end": "3276760"
  },
  {
    "text": "people probably doing the new thing and the other people doing the old thing um I use a whip no um actually",
    "start": "3276760",
    "end": "3285119"
  },
  {
    "text": "I've actually used I already told that yesterday two days ago I I used to print out code and use a red pen to re the",
    "start": "3285119",
    "end": "3290720"
  },
  {
    "text": "thing is um a lot of developers either consciously or unconsciously start to",
    "start": "3290720",
    "end": "3296079"
  },
  {
    "text": "mimic make existing things they copy what happen happens on the other place having this inconsistent scenario is not",
    "start": "3296079",
    "end": "3302640"
  },
  {
    "text": "bad at all as long as there's a path towards it and what you will find is people get used to doing it in a",
    "start": "3302640",
    "end": "3307960"
  },
  {
    "text": "different way and quite often I've noticed this as well that a lot of developers want to do it better but they",
    "start": "3307960",
    "end": "3313799"
  },
  {
    "text": "just don't know how to untie things from each other they don't know what pattern to apply to decouple things that's your",
    "start": "3313799",
    "end": "3319599"
  },
  {
    "text": "job as the person that does that so it's not going to happen overnight it can take a long time",
    "start": "3319599",
    "end": "3326760"
  },
  {
    "text": "what do you do about the religious debates so I'm not a religious person um so yeah usually you need somebody that",
    "start": "3327160",
    "end": "3334440"
  },
  {
    "text": "has the ultimate say because you will not always be able to convince everybody I worked with Architects with 20 years",
    "start": "3334440",
    "end": "3340640"
  },
  {
    "text": "of experience that love to introduce tons of design patterns because it makes it easy to extend for the future yeah",
    "start": "3340640",
    "end": "3348480"
  },
  {
    "text": "it's a little it's a level of immaturity yeah this is the difficult part even as a consultant I'm running in the",
    "start": "3348480",
    "end": "3353640"
  },
  {
    "text": "situation that it's sometimes not possible difficult to convince then either you have to force it or you have",
    "start": "3353640",
    "end": "3359359"
  },
  {
    "text": "to be patient I'm not a patient person so you guess what happens now it's not always working like that so it's not a",
    "start": "3359359",
    "end": "3365319"
  },
  {
    "text": "trivial answer good question though yes oh do one you have one minute",
    "start": "3365319",
    "end": "3376200"
  },
  {
    "text": "well Json that comes into the system is typically deserialized into a data",
    "start": "3392760",
    "end": "3398160"
  },
  {
    "text": "structure which we used to call a data transfer object which can be a dumb object that just has Fields properties",
    "start": "3398160",
    "end": "3404400"
  },
  {
    "text": "and whatever but it depends on the situation I've actually had situations where I deserialized them into uh data",
    "start": "3404400",
    "end": "3411880"
  },
  {
    "text": "object and then I still had methods on that object so I don't have to deal with the Primitive types and more but it's",
    "start": "3411880",
    "end": "3417319"
  },
  {
    "text": "it's a very generic answer to a pretty generic question but it's something to keep in mind don't be dogmatic maybe is",
    "start": "3417319",
    "end": "3424079"
  },
  {
    "text": "that the only thing you need to remember you I'll be around I also am available on lots of different channels I actually",
    "start": "3424079",
    "end": "3431200"
  },
  {
    "text": "think this slide deck is from a previous Star Wars Focus presentation because I suddenly see R2D2 and C3PO I'll be",
    "start": "3431200",
    "end": "3437640"
  },
  {
    "text": "around for the rest of the day uh I hope you enjoyed this session on Friday afternoon which was a replacement",
    "start": "3437640",
    "end": "3443839"
  },
  {
    "text": "session probably the original presidental was going to be much better I hope you enjoy the rest of the conference and I'm honored to be here",
    "start": "3443839",
    "end": "3450160"
  },
  {
    "text": "thank you for having you all here [Applause]",
    "start": "3450160",
    "end": "3455839"
  }
]