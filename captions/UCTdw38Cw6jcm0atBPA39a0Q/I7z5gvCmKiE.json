[
  {
    "start": "0",
    "end": "225000"
  },
  {
    "text": "okay the door is closed so I guess I should start that's the the sign thank",
    "start": "1820",
    "end": "7439"
  },
  {
    "text": "you so much for coming you know I really this is this is my first Tech Talk any",
    "start": "7439",
    "end": "12600"
  },
  {
    "text": "conference oh I really appreciate the opportunity to speak and I'm really pleased anybody turned up and I'm also",
    "start": "12600",
    "end": "18839"
  },
  {
    "text": "it's great to see some of you here that I know really know C++ better than me so I hope you'll be kind and you know I",
    "start": "18839",
    "end": "26039"
  },
  {
    "text": "hope you'll actually enjoy this presentation so I'm going to talk a",
    "start": "26039",
    "end": "31980"
  },
  {
    "text": "little bit about the kind of the practical concerns of building a memory",
    "start": "31980",
    "end": "37200"
  },
  {
    "text": "profiler for a production piece of software so first of all just a show of hands who enjoys finding memory leaks or",
    "start": "37200",
    "end": "44040"
  },
  {
    "text": "searching for memory leaks enjoy it good challenge right okay maybe this talk",
    "start": "44040",
    "end": "49260"
  },
  {
    "text": "isn't for you this is many of the talks of people who don't enjoy finding memory leaks who's ever been surprised where",
    "start": "49260",
    "end": "56430"
  },
  {
    "text": "memory leak or memory abnormal memory usage turns out to be right I think and",
    "start": "56430",
    "end": "62040"
  },
  {
    "text": "I think that's really at the core of this talk is going to be you know where you know how your code can tell you things that you don't expect if that",
    "start": "62040",
    "end": "69960"
  },
  {
    "text": "makes sense so I'm a little bit about me I'm one of those people that be honor referred to",
    "start": "69960",
    "end": "76350"
  },
  {
    "text": "as those kind of hardware hackers so you think they're programmer types but I've been trying to do better than that and",
    "start": "76350",
    "end": "82740"
  },
  {
    "text": "actually learn learn C++ over the years so I actually spent 15 years in kind of electronic music sequences games",
    "start": "82740",
    "end": "89550"
  },
  {
    "text": "high-performance computing startup who anybody remember a chem parallel",
    "start": "89550",
    "end": "95460"
  },
  {
    "text": "language from many many years ago so kind of dealing with firmware and device drivers and parallel systems and that",
    "start": "95460",
    "end": "101220"
  },
  {
    "text": "kind of that passion for really understanding how the machine works has it really kept with me through those",
    "start": "101220",
    "end": "107850"
  },
  {
    "text": "years and then 20 plus years actually at Bloomberg doing primarily high-performance C++ graphics and now",
    "start": "107850",
    "end": "114450"
  },
  {
    "text": "quite a lot of integration with Java scripts you know dynamic environments layered on top of of C++ I'm a developer",
    "start": "114450",
    "end": "123450"
  },
  {
    "text": "still I'm very proud of the fact I still know how to actually run the compiler I'm a manager and a mentor in working in",
    "start": "123450",
    "end": "130709"
  },
  {
    "text": "our London New York and San Francisco offices but based in London and I'm really passionate about stem and steam with the arts index",
    "start": "130709",
    "end": "137280"
  },
  {
    "text": "I still think that creative thing is important in diversity and philanthropy at Bloomberg so whose bloomberg forgive",
    "start": "137280",
    "end": "146010"
  },
  {
    "text": "me for just spending one minute telling who Bloomberg is because I think it's a relatively unfamiliar company too many",
    "start": "146010",
    "end": "151770"
  },
  {
    "text": "people born 1981 is the first real you know electronic bond calculation system",
    "start": "151770",
    "end": "159720"
  },
  {
    "text": "for training floors after Mike Bloomberg left Salomon Brothers and really we were kind of one of the first tech startups",
    "start": "159720",
    "end": "165900"
  },
  {
    "text": "and back in the 80s nowadays the Bloomberg professional service presented through a thing called",
    "start": "165900",
    "end": "171570"
  },
  {
    "text": "the terminal which is basically a real-time browser soft real-time evolved into a desktop system that now is used",
    "start": "171570",
    "end": "178620"
  },
  {
    "text": "by over 300,000 traders and researchers on the trading floors around the world and providing data analysis",
    "start": "178620",
    "end": "184530"
  },
  {
    "text": "communication and trading tools and also the real-time data is available in",
    "start": "184530",
    "end": "190680"
  },
  {
    "text": "enterprise products as feeds 100 billion updates a day sometimes 10 million",
    "start": "190680",
    "end": "195750"
  },
  {
    "text": "updates per second an update can be changing the price can be a news headline you know those kind of things",
    "start": "195750",
    "end": "201360"
  },
  {
    "text": "being being delivered we actually have our own news and media departments generating 5,000 news stories per day in",
    "start": "201360",
    "end": "207390"
  },
  {
    "text": "120 countries 19,000 employees over 5,000 of those are software engineers so",
    "start": "207390",
    "end": "213570"
  },
  {
    "text": "we're very we know software engineering is that is a you know a really important thing at at Bloomberg it's not just",
    "start": "213570",
    "end": "221100"
  },
  {
    "text": "something that we kind of have to do to get by you know a software engineering reforms the core so tech at Bloomberg as",
    "start": "221100",
    "end": "227460"
  },
  {
    "start": "225000",
    "end": "225000"
  },
  {
    "text": "a say a tech company you often people have never heard of we have 900",
    "start": "227460",
    "end": "232770"
  },
  {
    "text": "developers in London out of the 5,000 total originally we were very much a Fortran and C shop kind of running on",
    "start": "232770",
    "end": "239640"
  },
  {
    "text": "often on custom hardware with custom context ripping context swapping os's we",
    "start": "239640",
    "end": "245490"
  },
  {
    "text": "were very early adopter of server-side JavaScript back in 2003 if you think the node wasn't actually really born 2000 to",
    "start": "245490",
    "end": "252360"
  },
  {
    "text": "2009 and so we know we've quite proud of that and something we're even more proud",
    "start": "252360",
    "end": "259230"
  },
  {
    "text": "of is our presence on the super-stressed analyst Committee for over 10 years now you know we we've some of you here will",
    "start": "259230",
    "end": "265860"
  },
  {
    "text": "know our friends you know John and stir and and so on and you know we that",
    "start": "265860",
    "end": "272199"
  },
  {
    "text": "that involvement has really really helped us something that we've been pushing through a long time and is now part of C++ 17 is this concept of",
    "start": "272199",
    "end": "279789"
  },
  {
    "text": "runtime polymorphic a metallic itis the PM our namespace and which is something",
    "start": "279789",
    "end": "285250"
  },
  {
    "text": "that we use internally I'll show you a little bit that later on but it's really helped us to kind of get you know",
    "start": "285250",
    "end": "291160"
  },
  {
    "text": "everybody talked about see performance out of nicely structured C++ but that's the kind of thing we've we've we've been aim aiming for for a while and we would",
    "start": "291160",
    "end": "298690"
  },
  {
    "text": "contribute to open source initiatives we do have a public presence on github which you're welcome to have a look at",
    "start": "298690",
    "end": "305139"
  },
  {
    "text": "including our reference SDL implementation and that is there and we also have presence on the JavaScript et",
    "start": "305139",
    "end": "311199"
  },
  {
    "text": "cetera and I'm committee and have been you know sponsoring and helping define and develop see a CSS grid layout async",
    "start": "311199",
    "end": "319030"
  },
  {
    "text": "I wait big into now private data types which are coming soon and to JavaScript so feel free to look at our tech blog",
    "start": "319030",
    "end": "326530"
  },
  {
    "text": "and there's a few things on there I really hope that some of the code in this talk I'll be able to open source soon apologies it is not there yet but I",
    "start": "326530",
    "end": "333430"
  },
  {
    "text": "really hope we're going to be able to to do that and so the Bloomberg terminal this is the thing this is my passion the",
    "start": "333430",
    "end": "340389"
  },
  {
    "start": "336000",
    "end": "336000"
  },
  {
    "text": "thing that my group is very heavily involved in developing and originally it was totally homegrown terminal on the",
    "start": "340389",
    "end": "345909"
  },
  {
    "text": "desktop with a very custom UI stack and my friend Alex who's who's here has",
    "start": "345909",
    "end": "352690"
  },
  {
    "text": "spent the last 10 years trying to delete most of my code that does that and he's pretty good at that actually it's now",
    "start": "352690",
    "end": "360219"
  },
  {
    "text": "you know we've now evolved that and a lot of the core kind of UI framework within it is actually built around open",
    "start": "360219",
    "end": "365289"
  },
  {
    "text": "source chromium web blink now I guess which gives us html5 css3",
    "start": "365289",
    "end": "371259"
  },
  {
    "text": "standards compliant compliance internally access to this state of the",
    "start": "371259",
    "end": "376570"
  },
  {
    "text": "art v8 JavaScript engine and you know we get for free things that that chromium",
    "start": "376570",
    "end": "382210"
  },
  {
    "text": "core is doing like hardware accelerated graphics accessibility integration so the hook up on the desktop certainly on",
    "start": "382210",
    "end": "389259"
  },
  {
    "text": "the windows to the accessibility framework you know we have a couple of traders I know of who actually are",
    "start": "389259",
    "end": "395229"
  },
  {
    "text": "completely blind who've managed to actually trade successfully with the screen switched off which i think is is",
    "start": "395229",
    "end": "400330"
  },
  {
    "text": "amazing stick to see how's a system like this which is so you are heavy can actually",
    "start": "400330",
    "end": "405390"
  },
  {
    "text": "be used and by somebody who has those challenges we add to this kind of",
    "start": "405390",
    "end": "412500"
  },
  {
    "text": "chromium core a custom real-time data processing pipeline called data layer which allows our application teams to",
    "start": "412500",
    "end": "419070"
  },
  {
    "text": "build and model sophisticated sort of debt data transformation you know from",
    "start": "419070",
    "end": "424410"
  },
  {
    "text": "in the incoming stream into the UI you know you may have a hundred thousand row trading blotter which is dynamically",
    "start": "424410",
    "end": "430620"
  },
  {
    "text": "updating it needs to be sorted live and filtered live these are obviously is only looking at maybe 40 50 rows on the",
    "start": "430620",
    "end": "436830"
  },
  {
    "text": "screen but you need to be doing that processing real-time in a way that is flexible so it's kind of you can kind of",
    "start": "436830",
    "end": "442350"
  },
  {
    "text": "think of it like an excel like and a streaming sequel like queries in into",
    "start": "442350",
    "end": "447630"
  },
  {
    "text": "the UI and we kind of add on the top of that true push in order to leverage",
    "start": "447630",
    "end": "455480"
  },
  {
    "text": "multicast data fan-out that we have across the world and we do other things that integrate with biometric",
    "start": "455480",
    "end": "461250"
  },
  {
    "text": "authentication devices so that when you log in we know it's really you which is quite important if you're a if you're a",
    "start": "461250",
    "end": "466530"
  },
  {
    "text": "trader and we really care about performance at the desktop it's you know it's really",
    "start": "466530",
    "end": "472770"
  },
  {
    "start": "468000",
    "end": "468000"
  },
  {
    "text": "important that we have low latency in terms of data coming in to actually do the getting on the screen scalability",
    "start": "472770",
    "end": "479220"
  },
  {
    "text": "you know we're displaying maybe hundreds of real-time components on the desktop across maybe you know up to eight",
    "start": "479220",
    "end": "485550"
  },
  {
    "text": "high-definition monitors all from one PC mainly 2d graphics you know graphics",
    "start": "485550",
    "end": "490710"
  },
  {
    "text": "cards nowadays are fantastic at 3d graphics you know you still have to work quite hard to get high performance 2d",
    "start": "490710",
    "end": "495720"
  },
  {
    "text": "graphics actually for you know for mainly text and charts and so on reliability crashing or freezing when",
    "start": "495720",
    "end": "501900"
  },
  {
    "text": "the markets are you know high volatility is a disaster we really must be writing",
    "start": "501900",
    "end": "507210"
  },
  {
    "text": "reliable code it's not a rocket it's not a car but as far as the traders are concerned that they really want this to",
    "start": "507210",
    "end": "513479"
  },
  {
    "text": "stay to stay working and now profiling",
    "start": "513479",
    "end": "518610"
  },
  {
    "text": "us really helps obviously to target these hotspots for improvement CPU profiling obviously and but also memory",
    "start": "518610",
    "end": "524039"
  },
  {
    "text": "profiling you know if you've got a system that needs to run for a long time and you really need to understand how memory is being used in that system so",
    "start": "524039",
    "end": "529740"
  },
  {
    "text": "this talk is very much focused on how you kind of apply CPU pro-lite profiling",
    "start": "529740",
    "end": "534900"
  },
  {
    "text": "principles to to memory and doing that actually within the application itself rather than using external tools and we're",
    "start": "534900",
    "end": "544589"
  },
  {
    "text": "doing this because this thing has to work every day here this is the New York",
    "start": "544589",
    "end": "549869"
  },
  {
    "text": "Stock Exchange and floor and this is the kind of environment where where this",
    "start": "549869",
    "end": "555329"
  },
  {
    "text": "this front end to this this you know a wealth of data needs to actually run all",
    "start": "555329",
    "end": "560730"
  },
  {
    "text": "day so memory leaks in 2018 really surely memory leaks are a thing",
    "start": "560730",
    "end": "566759"
  },
  {
    "start": "561000",
    "end": "561000"
  },
  {
    "text": "of the past Rai everybody is writing clean code yeah obviously not well we have we have to",
    "start": "566759",
    "end": "574470"
  },
  {
    "text": "deal with code that we're not writing today we have to deal with legacy code party code open source code old",
    "start": "574470",
    "end": "581009"
  },
  {
    "text": "libraries we've brought in and even then non leaky code can feel like it's",
    "start": "581009",
    "end": "586679"
  },
  {
    "text": "leaking you know if you find you know if you're if pools for example are being used in an unexpected way they can use a",
    "start": "586679",
    "end": "593850"
  },
  {
    "text": "lot more memory than you you think they they might be using so and it's sometimes hard to spot these kind of",
    "start": "593850",
    "end": "600089"
  },
  {
    "text": "these kind of patterns and in addition which is something that's very relevant for us is mixed environments that combine manage languages like JavaScript",
    "start": "600089",
    "end": "607589"
  },
  {
    "text": "on top of 90 C++ where you've basically got proxy objects that connect your JavaScript to to native objects you get",
    "start": "607589",
    "end": "616050"
  },
  {
    "text": "complex and non-obvious life cycles for your your native objects you're at the",
    "start": "616050",
    "end": "621300"
  },
  {
    "text": "whim of the garbage collector unless you're you were very very careful so you can find that your your native C++",
    "start": "621300",
    "end": "627569"
  },
  {
    "text": "objects can live a lot longer than you might want them to or it or expect them to so I'm going to give you a very very",
    "start": "627569",
    "end": "634439"
  },
  {
    "start": "633000",
    "end": "633000"
  },
  {
    "text": "quick case study here so here's a one of our components on the screen and it's called the GD or graphics display or",
    "start": "634439",
    "end": "641549"
  },
  {
    "text": "something really imaginative and that you know the very you know a simple component just two bits of text and",
    "start": "641549",
    "end": "648509"
  },
  {
    "text": "numbers and some charts I was I was looking at a memory issue with this and",
    "start": "648509",
    "end": "653610"
  },
  {
    "text": "I was finding that basically this code which just pulls in some data from some",
    "start": "653610",
    "end": "659069"
  },
  {
    "text": "kind of source probably the network posits that day sir and builds of world builds that representation on the screen",
    "start": "659069",
    "end": "665480"
  },
  {
    "text": "when it was working fine it was using 500 megabytes mmm it's quite a big world however if",
    "start": "665480",
    "end": "672410"
  },
  {
    "text": "amongst those input packets were some errors that would get sent to some error",
    "start": "672410",
    "end": "678329"
  },
  {
    "text": "stream if they were present then the memory usage of this component would",
    "start": "678329",
    "end": "684269"
  },
  {
    "text": "jump to 800 megabytes consistently I think why you know must be surely something in this past line function is",
    "start": "684269",
    "end": "690989"
  },
  {
    "text": "you know partially handling you know a message and you know it's building some state and then maybe it's leaking or",
    "start": "690989",
    "end": "697559"
  },
  {
    "text": "it's yeah I don't really know how am I going to find out where this memory is going to be used so we're going to come",
    "start": "697559",
    "end": "703529"
  },
  {
    "text": "back to this example later but this is a the kind of the the crux of why why we",
    "start": "703529",
    "end": "709619"
  },
  {
    "text": "were doing this work so usual strategies for finding memory issues looking at the code of course deleting disabling codes",
    "start": "709619",
    "end": "717149"
  },
  {
    "start": "711000",
    "end": "711000"
  },
  {
    "text": "of the problem goes away adding logging everywhere trial and error hunches sleeping on it not",
    "start": "717149",
    "end": "723059"
  },
  {
    "text": "sleeping sometimes custom allocators you know you can put in there C++ is obviously very flexible for custom",
    "start": "723059",
    "end": "729179"
  },
  {
    "text": "allocators but you can't always plug them in everywhere particularly when you're dealing with somebody else's code",
    "start": "729179",
    "end": "734279"
  },
  {
    "text": "a CI system that runs code tests with tests allocators installed fantastic if",
    "start": "734279",
    "end": "739649"
  },
  {
    "text": "you can build those tests in but again it's not always appropriate profiling calls to malloc you know actually just",
    "start": "739649",
    "end": "745589"
  },
  {
    "text": "using a standard CPU profiler in sequel who's calling malloc sometimes that can give you a clue external memory nicest",
    "start": "745589",
    "end": "752549"
  },
  {
    "text": "tools you know I started doing this work before some of the latest compilers and tools and we released which actually do",
    "start": "752549",
    "end": "758579"
  },
  {
    "text": "solve some of these problems a little bit but in a different way you know interviewing has a pretty decent memory",
    "start": "758579",
    "end": "764699"
  },
  {
    "text": "profiler building Visual Studio 2017 now hooks into event tracing for Windows which is the kind of kernel level",
    "start": "764699",
    "end": "771169"
  },
  {
    "text": "logging the windows has and that can record and memory accesses and I would",
    "start": "771169",
    "end": "777869"
  },
  {
    "text": "argue that what I'm going to show you actually gives you a little bit more context than some of those tools and maybe I mean certainly in some cases is",
    "start": "777869",
    "end": "784259"
  },
  {
    "text": "is more useful and so what we're trying to do when we're trying to fix a memory issue is we are trying to find out on to",
    "start": "784259",
    "end": "792360"
  },
  {
    "text": "try and answer this question which code paths result in the most memory usage and how does that change over time it",
    "start": "792360",
    "end": "798209"
  },
  {
    "text": "really is a classic profiling problem just concerning memory and as I say some modern IDs and",
    "start": "798209",
    "end": "804009"
  },
  {
    "text": "debugger tools can help but if your code can tell you it can also add extra context that tells you more about that",
    "start": "804009",
    "end": "811499"
  },
  {
    "text": "that memory so how do you build a memory profiler as we say the call stack",
    "start": "811499",
    "end": "817360"
  },
  {
    "start": "813000",
    "end": "813000"
  },
  {
    "text": "defines each unique code path all the way down to malloc so what could we do we could intercept malloc and free and",
    "start": "817360",
    "end": "824379"
  },
  {
    "text": "reality and calloc and so on we could figure out where we are look at the call stack at that point we could build a",
    "start": "824379",
    "end": "830049"
  },
  {
    "text": "histogram of unique call stacks to allocation total at that call stack so for every unique call stack we can just",
    "start": "830049",
    "end": "837009"
  },
  {
    "text": "keep the sum of well actually how much memory has been allocated by that unique call stack and then we want to we need",
    "start": "837009",
    "end": "842949"
  },
  {
    "text": "to way of visualizing the result too to make sense of this data and we need to do this quickly we really don't want our",
    "start": "842949",
    "end": "849040"
  },
  {
    "text": "application to slow down too much when we have this mode enabled may be a little bit of the slowdown is fine but",
    "start": "849040",
    "end": "854529"
  },
  {
    "text": "you know no more than you know a few percent perhaps so how do we intersect malloc on Windows application primarily",
    "start": "854529",
    "end": "864759"
  },
  {
    "start": "860000",
    "end": "860000"
  },
  {
    "text": "runs in the Windows desktop so sorry I'm sorry about that for you people use Linux but the principles are very much",
    "start": "864759",
    "end": "870999"
  },
  {
    "text": "the same so on Windows the C runtime library is actually just a thin wrapper as far as far as heap is concerned",
    "start": "870999",
    "end": "878350"
  },
  {
    "text": "around functions that are actually in kernel32.dll so malloc he's like you",
    "start": "878350",
    "end": "883809"
  },
  {
    "text": "know four or five lines of code it basically just calls into heap Alec in the low-level saying for free we at",
    "start": "883809",
    "end": "889209"
  },
  {
    "text": "Carrick Halleck just adds the kind of zeroing out to the memory and M size gets you the size of any any object so",
    "start": "889209",
    "end": "897329"
  },
  {
    "text": "pretty easy to understand how that how this all fits together so what you can",
    "start": "897720",
    "end": "903309"
  },
  {
    "start": "902000",
    "end": "902000"
  },
  {
    "text": "do and this we actually borrowed a trick from older versions of chromium which we",
    "start": "903309",
    "end": "908949"
  },
  {
    "text": "found conveniently when we started to embed chromium in in our terminal was",
    "start": "908949",
    "end": "914319"
  },
  {
    "text": "that old versions of chromium what they were doing we're actually modifying the standard C runtime library on Windows",
    "start": "914319",
    "end": "920379"
  },
  {
    "text": "and removing malloc free reality and callek NM size from that library and",
    "start": "920379",
    "end": "926230"
  },
  {
    "text": "then replacing them with custom versions on the link path that would be used",
    "start": "926230",
    "end": "931449"
  },
  {
    "text": "instead and because these the original malloc free and so on with very very thin wrappers on to he Pelican he trailer can heat",
    "start": "931449",
    "end": "939250"
  },
  {
    "text": "heat free down in kernel32 this is very easy and safe thing to do so you can see",
    "start": "939250",
    "end": "945760"
  },
  {
    "text": "here the clasp is actually a bit of Python in the chromium code base that actually does this to actually pull",
    "start": "945760",
    "end": "951550"
  },
  {
    "text": "these you know generate a new version of the library that actually pulls these are these object files out of that",
    "start": "951550",
    "end": "957550"
  },
  {
    "text": "library for you I think on Linux you can just use order of precedence right for linking the symbols or as on Windows it",
    "start": "957550",
    "end": "964510"
  },
  {
    "text": "seems you've got more than one reference you it will fail you you have to actually you can only have one version of malloc on the windows link line so",
    "start": "964510",
    "end": "973150"
  },
  {
    "text": "how do you actually do that so this is the replacement malloc for example so",
    "start": "973150",
    "end": "978520"
  },
  {
    "text": "the replacement malloc does a heap Alec it actually calls heap size to actually find out what we really got you know for",
    "start": "978520",
    "end": "984130"
  },
  {
    "text": "you if we ask for three bytes we probably gonna get four or maybe eight so it's actually worth knowing what what",
    "start": "984130",
    "end": "990220"
  },
  {
    "text": "what you actually got of course the definition of what heap size does changes and sometimes it will give you",
    "start": "990220",
    "end": "995890"
  },
  {
    "text": "what you're asked for and sometimes it will give you back will actually what it what it allocated but you know this is",
    "start": "995890",
    "end": "1002520"
  },
  {
    "text": "this seems to be the best way of finding that very easy we can just keep track",
    "start": "1002520",
    "end": "1007980"
  },
  {
    "text": "you know in this callback you know how much memory we we allocated in total and then we're going to call back to some",
    "start": "1007980",
    "end": "1013140"
  },
  {
    "text": "instrumentation that we've installed and a call back to set this up and we actually need to initialize a static",
    "start": "1013140",
    "end": "1018840"
  },
  {
    "text": "variable which gets us the process heap which is the main heap and any any application we'll use on windows and",
    "start": "1018840",
    "end": "1024810"
  },
  {
    "text": "there are some flags you have to set this is basically copied from the C runtime in order to make sure that that",
    "start": "1024810",
    "end": "1030420"
  },
  {
    "text": "is set up correctly nowadays this this thing called the low fragmentation heap which is used by default on Windows but",
    "start": "1030420",
    "end": "1038660"
  },
  {
    "text": "it's all sort of smells a bit nasty right you don't really want to be hacking the C runtime library and also",
    "start": "1038660",
    "end": "1045300"
  },
  {
    "text": "it it only works if you have if you have the ability to recompile and link everything that you want to do",
    "start": "1045300",
    "end": "1051690"
  },
  {
    "text": "instrument it's not not great so maybe there's a better way strategy to",
    "start": "1051690",
    "end": "1056790"
  },
  {
    "start": "1056000",
    "end": "1056000"
  },
  {
    "text": "actually you know intercept what happens at load time so if you have the same structure we have the C one",
    "start": "1056790",
    "end": "1063240"
  },
  {
    "text": "time library calling in to kernel32 and but the loader when your application loads it's going to resolve those those",
    "start": "1063240",
    "end": "1069870"
  },
  {
    "text": "references into kernel32 and if you actually look at how this works it's",
    "start": "1069870",
    "end": "1075360"
  },
  {
    "text": "pretty easy to actually intercept at run time so if you look down on the the bottom bottom left of that box that's my",
    "start": "1075360",
    "end": "1083190"
  },
  {
    "text": "call from from Malick to he palak what actually happens is the call cools to another piece in the same",
    "start": "1083190",
    "end": "1090270"
  },
  {
    "text": "Code section that actually has an indirect jump in it and that indirect jump you can see actually jumps via a",
    "start": "1090270",
    "end": "1097370"
  },
  {
    "text": "piece of memory in the data section which is writable so and that actually",
    "start": "1097370",
    "end": "1103500"
  },
  {
    "text": "points to the address and the loaded P palak method in kernel32.dll so if I",
    "start": "1103500",
    "end": "1110640"
  },
  {
    "text": "change that Bess that yellow one is zero X seven seven eight seven nine four two six I can actually have all calls to",
    "start": "1110640",
    "end": "1118830"
  },
  {
    "text": "heap Eric from that C runtime library instance call into my my code",
    "start": "1118830",
    "end": "1124350"
  },
  {
    "text": "sounds a bit messy right it's all described very very clearly in this document from 1994 nothing might just",
    "start": "1124350",
    "end": "1131280"
  },
  {
    "text": "changed you know over over twenty years so you can do that",
    "start": "1131280",
    "end": "1137400"
  },
  {
    "text": "conveniently chromium array actually has a little helper class that does this for you",
    "start": "1137400",
    "end": "1142730"
  },
  {
    "text": "IAT patched function actually does this for you every time you call it you can",
    "start": "1142730",
    "end": "1148020"
  },
  {
    "text": "replace all calls from imported module to function name in sound so module with calls to your own new function fantastic",
    "start": "1148020",
    "end": "1155730"
  },
  {
    "text": "so how do you use that from your own from some DLL that's not part of the main or another dealer you want to",
    "start": "1155730",
    "end": "1161820"
  },
  {
    "text": "instrument you just instantiate these objects and set them up and to basically",
    "start": "1161820",
    "end": "1167160"
  },
  {
    "text": "patch in your own functions to to intersect these heap Alex heap freeze he",
    "start": "1167160",
    "end": "1174660"
  },
  {
    "text": "pre Alex so here's the intercept for palak it calls the real one which in this the arrow is not patched so it",
    "start": "1174660",
    "end": "1180270"
  },
  {
    "text": "actually calls through to the real one and then we're going to just add some instrumentation in a record allocation",
    "start": "1180270",
    "end": "1185370"
  },
  {
    "text": "internal here likewise for free we're going to call the real heap free we actually going to find out what size it",
    "start": "1185370",
    "end": "1190559"
  },
  {
    "text": "was first and then free it and then call into our own deallocation",
    "start": "1190559",
    "end": "1195860"
  },
  {
    "text": "instrumentation function heap realloc kind of has to do to two things it has to remember have what the old size was",
    "start": "1195860",
    "end": "1202080"
  },
  {
    "text": "do the realloc the new size kind of decrement your total count from while the other size",
    "start": "1202080",
    "end": "1208260"
  },
  {
    "text": "and add in add in the the new size and also record a de-allocation and an allocation which is likely to happen in",
    "start": "1208260",
    "end": "1214800"
  },
  {
    "text": "the case of every alak that's it so we now have successfully intercepted these",
    "start": "1214800",
    "end": "1222180"
  },
  {
    "text": "heat functions without actually changing any code which is a nice place to be in so the next stage is to figure out where",
    "start": "1222180",
    "end": "1227550"
  },
  {
    "text": "we are how do we get the call stack and conveniently both on Windows and Linux there are our system functions that do",
    "start": "1227550",
    "end": "1233970"
  },
  {
    "text": "this for you on Windows its capture stack back-trace linux has back trace and battery symbols to resolve what you",
    "start": "1233970",
    "end": "1240180"
  },
  {
    "text": "get conveniently the windows 1 and I don't know why they did this maybe they",
    "start": "1240180",
    "end": "1245400"
  },
  {
    "text": "were thinking of me when they designed Windows they actually give you a hash a unique hash for that unique cool stack",
    "start": "1245400",
    "end": "1252420"
  },
  {
    "text": "as part of the the trace back which is fantastic because now we have a key for",
    "start": "1252420",
    "end": "1257640"
  },
  {
    "text": "looking things up a key that defines every individual unique call stack on",
    "start": "1257640",
    "end": "1264510"
  },
  {
    "text": "Linux you have to make some kind of hash but I'm sure everybody in this room is capable of writing a hash function or",
    "start": "1264510",
    "end": "1270180"
  },
  {
    "text": "using a hash function so this is just the code that would actually you know based on that will allow you to",
    "start": "1270180",
    "end": "1276240"
  },
  {
    "start": "1271000",
    "end": "1271000"
  },
  {
    "text": "basically build a vector of avid rate of return addresses from the stack and",
    "start": "1276240",
    "end": "1282240"
  },
  {
    "text": "store that in a just in a map that allows you for any of these hashes to",
    "start": "1282240",
    "end": "1287910"
  },
  {
    "text": "actually go back eventually to the real call stack and then also have a separate map you can use to actually resolve the",
    "start": "1287910",
    "end": "1294540"
  },
  {
    "text": "symbols for each of those addresses in that vector that makes sense so this is just a way of being able to at any in",
    "start": "1294540",
    "end": "1301860"
  },
  {
    "text": "any of these those intercepts in fact we only need to intercept the the actual ones that do allocation that the malecón",
    "start": "1301860",
    "end": "1307470"
  },
  {
    "text": "realloc to to record where we are so now",
    "start": "1307470",
    "end": "1312930"
  },
  {
    "text": "what are we going to do now we have we know where we are we have this intercept that's happened we're going to build",
    "start": "1312930",
    "end": "1318330"
  },
  {
    "start": "1317000",
    "end": "1317000"
  },
  {
    "text": "some kind of histogram so in this malloc intercept we're gonna we're going to figure out where we are from the cool stack in the hash and we're going to",
    "start": "1318330",
    "end": "1324450"
  },
  {
    "text": "accumulate the size per unique call stack in a simple another map simply that has an accumulating counter per",
    "start": "1324450",
    "end": "1332400"
  },
  {
    "text": "unique call stack hash very very simple in addition we want to remember for that",
    "start": "1332400",
    "end": "1339000"
  },
  {
    "text": "particular malloc address we got back where did it come from so we're going to",
    "start": "1339000",
    "end": "1345120"
  },
  {
    "text": "have another table that the Maps malloc pointer back to add some descriptor that",
    "start": "1345120",
    "end": "1352170"
  },
  {
    "text": "tells us the cool stack of where the malloc came from so that we can find it so that when we call free we can use",
    "start": "1352170",
    "end": "1359310"
  },
  {
    "text": "that address that we was given two free lookup where we came from and then decrement the size that we're storing",
    "start": "1359310",
    "end": "1364710"
  },
  {
    "text": "for that particular unique call stack without having the program need to carry any extra state and we need to do this",
    "start": "1364710",
    "end": "1371640"
  },
  {
    "text": "quickly so these are these are all our data structures look like pretty simple we have this descriptor for for a malloc",
    "start": "1371640",
    "end": "1379710"
  },
  {
    "start": "1372000",
    "end": "1372000"
  },
  {
    "text": "which tells us the size of the malloc and and the unique call stack it was",
    "start": "1379710",
    "end": "1384960"
  },
  {
    "text": "actually called from we have this collection called address map the type",
    "start": "1384960",
    "end": "1391770"
  },
  {
    "text": "of parent live Malick's looked up by the application pointer we have this other",
    "start": "1391770",
    "end": "1398760"
  },
  {
    "text": "other map which is per unit call stack accumulating size of memory allocated and that's memory map here and we have",
    "start": "1398760",
    "end": "1406790"
  },
  {
    "text": "each trace back represented as a vector of returned pointers and then we store",
    "start": "1406790",
    "end": "1412710"
  },
  {
    "text": "those in another map which is reference which keyed by hash to tell us from any hash how do we get back to the actual",
    "start": "1412710",
    "end": "1419040"
  },
  {
    "text": "call stack in order to actually display some kind of meaningful answer and we also have a final map which is probably",
    "start": "1419040",
    "end": "1425700"
  },
  {
    "text": "gonna be filled in by some other thread that actually goes and resolves all the symbols and that we have in each of",
    "start": "1425700",
    "end": "1432030"
  },
  {
    "text": "these in each of these coolsex this is how we'd actually do it so",
    "start": "1432030",
    "end": "1437790"
  },
  {
    "text": "within within the actually intercept we would build the walk back we were bill one of the descriptors we'd",
    "start": "1437790",
    "end": "1444720"
  },
  {
    "text": "put it in the address map and then remember just and accumulate for that",
    "start": "1444720",
    "end": "1452670"
  },
  {
    "text": "particular call stack how much extra memory where we're adding either accumulate or add a new entry if this is",
    "start": "1452670",
    "end": "1458700"
  },
  {
    "text": "the first time we've seen this this new call stack similar principle for free we don't actually need the call stack",
    "start": "1458700",
    "end": "1464100"
  },
  {
    "text": "anymore because we just look up based on the free pointer where the call stack was the allocated",
    "start": "1464100",
    "end": "1469890"
  },
  {
    "text": "and therefore we can decrement the memory and was used by that particular",
    "start": "1469890",
    "end": "1475620"
  },
  {
    "text": "malloc one gotcha our little data structures here which we",
    "start": "1475620",
    "end": "1482280"
  },
  {
    "start": "1476000",
    "end": "1476000"
  },
  {
    "text": "using to store this again to use malloc because they are their dynamic objects",
    "start": "1482280",
    "end": "1487740"
  },
  {
    "text": "they're their Maps right so we're already inside malloc so we want to be a bit careful here so even in a single",
    "start": "1487740",
    "end": "1494820"
  },
  {
    "text": "thread you know we need to have some kind of protection so here's the most basic protection we can have within a",
    "start": "1494820",
    "end": "1500549"
  },
  {
    "start": "1496000",
    "end": "1496000"
  },
  {
    "text": "single thread is some simple variable that tells we'll tells us whether we're already in malloc already and when this",
    "start": "1500549",
    "end": "1506669"
  },
  {
    "text": "happens not very nice way of doing it right so can we do better",
    "start": "1506669",
    "end": "1511919"
  },
  {
    "text": "of course we can do better with a little guard that keeps track of that still not",
    "start": "1511919",
    "end": "1518460"
  },
  {
    "start": "1512000",
    "end": "1512000"
  },
  {
    "text": "the full solution because our internal data structures are shared amongst",
    "start": "1518460",
    "end": "1524370"
  },
  {
    "text": "multiple threads so we do need to have some kind of looking around our internal data structures when we are actually",
    "start": "1524370",
    "end": "1530730"
  },
  {
    "text": "doing this instrumentation but in addition and this isn't you know our our static in an allocation boolean and",
    "start": "1530730",
    "end": "1538350"
  },
  {
    "text": "really doesn't cut it in a multi-threaded environment you know how you know how what we need to know is for",
    "start": "1538350",
    "end": "1543720"
  },
  {
    "text": "any thread are is that threading inside malloc at the moment simple solution actually use thread local storage and",
    "start": "1543720",
    "end": "1550110"
  },
  {
    "start": "1548000",
    "end": "1548000"
  },
  {
    "text": "for that so that now per thread we know whether we're already inside malloc or",
    "start": "1550110",
    "end": "1556110"
  },
  {
    "text": "whether this is just an you know standard call to malloc that we haven't actually we're not right in the middle of instrumenting and at the time I was",
    "start": "1556110",
    "end": "1563640"
  },
  {
    "text": "quite pleased to find this because how often do you actually find you know valid uses for local storage this is",
    "start": "1563640",
    "end": "1569520"
  },
  {
    "text": "this is one of them I think so I was a quite happy about that and so how does this actually work very very simple",
    "start": "1569520",
    "end": "1576780"
  },
  {
    "start": "1572000",
    "end": "1572000"
  },
  {
    "text": "function let's see how the data structures update so we call the first malloc and the address map get seen the",
    "start": "1576780",
    "end": "1584730"
  },
  {
    "text": "description of our particular malloc so we got address a and it was a size 10 and it had a particular hash and we also",
    "start": "1584730",
    "end": "1591320"
  },
  {
    "text": "remember the total size of that particular call stack hash and we start",
    "start": "1591320",
    "end": "1598350"
  },
  {
    "text": "to build our kind of set of call stacks as we go and we follow this through we had a new entry",
    "start": "1598350",
    "end": "1605090"
  },
  {
    "text": "then we jump into another function it's just another Malik but it actually you",
    "start": "1605090",
    "end": "1611220"
  },
  {
    "text": "know is now a different unique cool stack so we had a new entry in the memory map and we also add a new entry",
    "start": "1611220",
    "end": "1621179"
  },
  {
    "text": "in the the try spec map as well and we've got a now got a new symbol to resolve later which will eventually",
    "start": "1621179",
    "end": "1626429"
  },
  {
    "text": "resolve which gives us all the data to produce a nice sort of output and the kind of output we can produce is like",
    "start": "1626429",
    "end": "1632460"
  },
  {
    "start": "1630000",
    "end": "1630000"
  },
  {
    "text": "this so this was I ran an example and it gave me this is the highest use call",
    "start": "1632460",
    "end": "1637830"
  },
  {
    "text": "stack that that used memory in this particular example it was some heavy worksheet component which actually was",
    "start": "1637830",
    "end": "1644970"
  },
  {
    "text": "you know from this particular call stack going all the way up was was using 300 megabytes of memory not a great way of",
    "start": "1644970",
    "end": "1651630"
  },
  {
    "text": "actually looking at the data so maybe we need a we need more visual representations of the data how about if",
    "start": "1651630",
    "end": "1658890"
  },
  {
    "start": "1657000",
    "end": "1657000"
  },
  {
    "text": "we put this data in a tree you know we now have this histogram where every histogram node can be kind of resolved",
    "start": "1658890",
    "end": "1664740"
  },
  {
    "text": "to a vector of trace back addresses that within it within each individual call stack so why don't we actually Traverse",
    "start": "1664740",
    "end": "1672150"
  },
  {
    "text": "those and build a tree representation that tells us the amount of memory used",
    "start": "1672150",
    "end": "1677190"
  },
  {
    "start": "1677000",
    "end": "1677000"
  },
  {
    "text": "by individual return pointers in Titan",
    "start": "1677190",
    "end": "1683400"
  },
  {
    "text": "total so I won't go through this in detail but basically we just go through our histogram and we just traverse it",
    "start": "1683400",
    "end": "1689670"
  },
  {
    "text": "and build up a tree which then ends up looking like this so you can see everybody calls malloc and these are",
    "start": "1689670",
    "end": "1696360"
  },
  {
    "start": "1692000",
    "end": "1692000"
  },
  {
    "text": "base by tree these are you know the three biggest callers to malloc the",
    "start": "1696360",
    "end": "1702420"
  },
  {
    "text": "first one is some fancy tight allocator that we have already somewhere in our code and part of our code is using that",
    "start": "1702420",
    "end": "1708990"
  },
  {
    "text": "you see there that what are we a stack context allocator store at the top there",
    "start": "1708990",
    "end": "1714600"
  },
  {
    "text": "further down we have some just generic c++ which is calling our default allocator which in our case is this",
    "start": "1714600",
    "end": "1720990"
  },
  {
    "text": "encoding frequent delete blocked list allocate you can see there's some code probably some pool stuff that's actually",
    "start": "1720990",
    "end": "1726300"
  },
  {
    "text": "using that but also there's some we write down the bottom that is actually directly calling malloc it's not maybe",
    "start": "1726300",
    "end": "1732720"
  },
  {
    "text": "not even C++ code it may be C code that's actually you know it using any of this so that's a I think that's a step",
    "start": "1732720",
    "end": "1739450"
  },
  {
    "text": "forward in how we actually instrument memory but habit if we actually tried to",
    "start": "1739450",
    "end": "1745210"
  },
  {
    "start": "1743000",
    "end": "1743000"
  },
  {
    "text": "show this graphically wouldn't that be nicer so using this exact mechanism but just building a tree",
    "start": "1745210",
    "end": "1754120"
  },
  {
    "start": "1747000",
    "end": "1747000"
  },
  {
    "text": "traversal UI on the front of it what can we do so here's the piece of code nobody writes code like this anymore right",
    "start": "1754120",
    "end": "1759910"
  },
  {
    "text": "nobody calls mallet directly who knows very very simple piece of code that allocates memory and then Waits and then",
    "start": "1759910",
    "end": "1767500"
  },
  {
    "text": "freeze it what actually happens there we go so you can see that that's actually",
    "start": "1767500",
    "end": "1774250"
  },
  {
    "text": "showing the call stack that's allocated the most memory waited five seconds went",
    "start": "1774250",
    "end": "1779710"
  },
  {
    "text": "away too quick maybe that said let's just leak then you can kind of see this",
    "start": "1779710",
    "end": "1785050"
  },
  {
    "start": "1782000",
    "end": "1782000"
  },
  {
    "text": "see this for real so you can see we've actually got two unique cool stacks here",
    "start": "1785050",
    "end": "1790620"
  },
  {
    "text": "one of which one of which is the actual leak obviously and the other one is actually the little vector we're",
    "start": "1790620",
    "end": "1796120"
  },
  {
    "text": "building if I hover over this you'd actually see what they were that we're actually using to keep track with the",
    "start": "1796120",
    "end": "1801220"
  },
  {
    "text": "pointers so immediately this is showing you obviously this is a very simple example where what call stacks in my",
    "start": "1801220",
    "end": "1808090"
  },
  {
    "text": "code are using most memory to make a little bit more a little bit a little bit richer so this is a three little",
    "start": "1808090",
    "end": "1813970"
  },
  {
    "text": "tests again that just show you and the different call stacks that are",
    "start": "1813970",
    "end": "1819430"
  },
  {
    "text": "eventually called him call into malloc and back the proportion of each of those that was responsible for the 569",
    "start": "1819430",
    "end": "1825910"
  },
  {
    "text": "megabytes of heap that we've actually used here now let's go back to our case study so we remember our case study was",
    "start": "1825910",
    "end": "1833490"
  },
  {
    "start": "1828000",
    "end": "1828000"
  },
  {
    "text": "something that took in a load of data input data maybe it's JSON or you know some other format and built a world from",
    "start": "1833490",
    "end": "1840520"
  },
  {
    "text": "it and what we discovered is when it ran perfectly and used 500 megabytes of memory when it ran with some errors and",
    "start": "1840520",
    "end": "1848470"
  },
  {
    "text": "and spat those errors out to the error stream it used 800 megabytes of memory so I ran this through the profiler what",
    "start": "1848470",
    "end": "1856330"
  },
  {
    "start": "1855000",
    "end": "1855000"
  },
  {
    "text": "happened this is the normal case what we'd expect so we see about 500",
    "start": "1856330",
    "end": "1861940"
  },
  {
    "text": "megabytes of memory called from the places we expect it that's the world that we're building fantastic",
    "start": "1861940",
    "end": "1868190"
  },
  {
    "text": "how about in the error case what happens ah so all of a sudden we're using 800",
    "start": "1868190",
    "end": "1874879"
  },
  {
    "start": "1869000",
    "end": "1869000"
  },
  {
    "text": "megabytes of memory which we know is the problem and we can see our world on the left here is the 500 megabytes but look",
    "start": "1874879",
    "end": "1881779"
  },
  {
    "text": "on the right look at this cool stack operator input",
    "start": "1881779",
    "end": "1886940"
  },
  {
    "text": "right output it's something to do with the logger why would the logger be using",
    "start": "1886940",
    "end": "1894139"
  },
  {
    "text": "300 megabytes of memory it's one of these surprising cases right this was this was real we this is we actually",
    "start": "1894139",
    "end": "1900080"
  },
  {
    "text": "found this and so let's go back what does a logger look like so logger is",
    "start": "1900080",
    "end": "1906379"
  },
  {
    "start": "1903000",
    "end": "1903000"
  },
  {
    "text": "typically some kind of thread base producer-consumer you typically have a you know another thread that's going to",
    "start": "1906379",
    "end": "1912289"
  },
  {
    "text": "be writing to disk or to network that doesn't interact with some kind of queue in the middle that doesn't interrupt your your actual program flow what would",
    "start": "1912289",
    "end": "1921320"
  },
  {
    "text": "that look like if you if you just ran a simple produce against consumer logger you get this well-behaved of course if",
    "start": "1921320",
    "end": "1927860"
  },
  {
    "text": "you're producing data fast then you can consume it then it's gonna build up memory but then it's going to go away as",
    "start": "1927860",
    "end": "1933379"
  },
  {
    "text": "you'd expect however maybe you're going to be clever and within your logging you're going to introduce some kind of",
    "start": "1933379",
    "end": "1939919"
  },
  {
    "text": "pooling let's just have a very simple free list here so you imagine that the queue between the producer and the",
    "start": "1939919",
    "end": "1945320"
  },
  {
    "text": "consumer is some you know is some list of strings for example but also we're",
    "start": "1945320",
    "end": "1950659"
  },
  {
    "text": "going to pull those strings so that we don't give them back rather than give them back we're going to put them in a free list when the win",
    "start": "1950659",
    "end": "1956659"
  },
  {
    "text": "that when they're finished with and what happens this is again the standard",
    "start": "1956659",
    "end": "1962659"
  },
  {
    "text": "producer consumer with a pool of course the strings end up building up in in",
    "start": "1962659",
    "end": "1967759"
  },
  {
    "text": "that pool but you think what a string object itself is not very not very big but you look a little deeper and you",
    "start": "1967759",
    "end": "1973970"
  },
  {
    "text": "find out well there's nothing that's actually removing the string data from those strings before putting them back",
    "start": "1973970",
    "end": "1980000"
  },
  {
    "text": "in the pool so what happens if now and again I suddenly stand a huge log message which maybe is the source of the",
    "start": "1980000",
    "end": "1987259"
  },
  {
    "text": "problem in the first place and what's going to happen is this this producer consumer is going to end up",
    "start": "1987259",
    "end": "1992929"
  },
  {
    "text": "hanging on to huge log messages in its pool that it no longer needs you know it's written them out to disk or it's ripped them out to network but there",
    "start": "1992929",
    "end": "1999940"
  },
  {
    "text": "you know they there's they're stuck in these pulls so let's let's be cleverer",
    "start": "1999940",
    "end": "2005340"
  },
  {
    "text": "let's clear the strings before we put them back in the pool so they're just basic empty string objects often doesn't",
    "start": "2005340",
    "end": "2010710"
  },
  {
    "text": "help what clear does to the string storage is is implementation defined often it won't",
    "start": "2010710",
    "end": "2016440"
  },
  {
    "text": "bother to to clear out the memory that's been allocated for that string even resize 0 doesn't necessarily change the",
    "start": "2016440",
    "end": "2024870"
  },
  {
    "text": "the the capacity of that string it might you just don't know in our case it",
    "start": "2024870",
    "end": "2031740"
  },
  {
    "text": "didn't what we found actually is the only way to really clear out a string before putting it back in the pool is to",
    "start": "2031740",
    "end": "2038070"
  },
  {
    "text": "swap in an empty string but then you think well what's the point of pulling if you're just dropping in an empty string well maybe you you you you do",
    "start": "2038070",
    "end": "2044669"
  },
  {
    "text": "this for sizes that are bigger and then a particular limit so and you get the",
    "start": "2044669",
    "end": "2050220"
  },
  {
    "text": "benefit of pooling lots of small objects but without the expense of accidentally pulling very very large objects and you",
    "start": "2050220",
    "end": "2057300"
  },
  {
    "text": "do this sure enough what happens is memory usage builds up and then as the the consumer thread flushes out the pool",
    "start": "2057300",
    "end": "2067230"
  },
  {
    "text": "is well behaved it still ends up pulling a little bit you can see on the right here lots and lots of tiny string objects but you're left with based the",
    "start": "2067230",
    "end": "2074099"
  },
  {
    "text": "basic memory usage of your application is just the world that you expect it to be so we've safely under megabytes",
    "start": "2074099",
    "end": "2080810"
  },
  {
    "text": "just by understanding that actually memory usage was in a very unusual place",
    "start": "2080810",
    "end": "2086628"
  },
  {
    "start": "2086000",
    "end": "2086000"
  },
  {
    "text": "so I said earlier that there are some great tools external tools that could",
    "start": "2086629",
    "end": "2091950"
  },
  {
    "text": "help you with some of this work but the disadvantage of an external tool is that",
    "start": "2091950",
    "end": "2097138"
  },
  {
    "text": "it doesn't really know the context of what's running inside your program it has no idea whether for example the",
    "start": "2097139",
    "end": "2102450"
  },
  {
    "text": "memory that's been allocated is is for some kind of pool or some other use or maybe it's a string type or you know",
    "start": "2102450",
    "end": "2108270"
  },
  {
    "text": "it's just memory the point of running this kind of thing inside your",
    "start": "2108270",
    "end": "2113520"
  },
  {
    "text": "application is you can extend these api's to actually add context so for example simply we could add the ability",
    "start": "2113520",
    "end": "2122579"
  },
  {
    "start": "2119000",
    "end": "2119000"
  },
  {
    "text": "whenever we do an allocation from within a pool we actually tag that and say well",
    "start": "2122579",
    "end": "2128460"
  },
  {
    "text": "actually within this thread I'm gonna have a little guard that just sets a piece of context in my own stream mutations",
    "start": "2128460",
    "end": "2133710"
  },
  {
    "text": "them to tell me that this is actually pool memory that's being allocated and very very simple we just add these",
    "start": "2133710",
    "end": "2141540"
  },
  {
    "text": "guards in when we allocate and deallocate so that the instrumentation knows that actually the thing that's",
    "start": "2141540",
    "end": "2148140"
  },
  {
    "text": "going on is is is to do with the pool and the way we actually implement this",
    "start": "2148140",
    "end": "2154500"
  },
  {
    "text": "again is another piece of thread local storage because this could be running multiple threads obviously but within a single thread and we can maintain that",
    "start": "2154500",
    "end": "2161010"
  },
  {
    "text": "context and we just have another map maybe that just keeps track of actually",
    "start": "2161010",
    "end": "2166619"
  },
  {
    "text": "this is an allocation that not only is using the heat but is actually can be tagged as as heat that is used by a pool",
    "start": "2166619",
    "end": "2172820"
  },
  {
    "text": "what happens if we add that into the UI maybe we just decide to color it so now we see this trigger that tells us not",
    "start": "2172820",
    "end": "2179369"
  },
  {
    "text": "only the code that's using the most memory but how much of that code how much of the the memory that's used is",
    "start": "2179369",
    "end": "2185339"
  },
  {
    "text": "actually designated as pool memory can be useful right you could obviously take",
    "start": "2185339",
    "end": "2192240"
  },
  {
    "text": "this much much further adding lots more context that tells you about your your",
    "start": "2192240",
    "end": "2197339"
  },
  {
    "text": "system something that I'm working on at the moment is to make this kind of pool reputation representation smarter what",
    "start": "2197339",
    "end": "2205619"
  },
  {
    "text": "you really want to know is if I have a pool well how much of that the data in that pool is kind of been lent out to",
    "start": "2205619",
    "end": "2211320"
  },
  {
    "text": "the to the thing that's using that pool and how much is actually held currently by the pool to give you an idea of whether that pool is is being used",
    "start": "2211320",
    "end": "2218040"
  },
  {
    "text": "efficiently we can actually do this using a kind of series of stats",
    "start": "2218040",
    "end": "2226770"
  },
  {
    "text": "allocators now this is using the kind of Bloomberg BD style from because that's what we use internally forgive me you",
    "start": "2226770",
    "end": "2233730"
  },
  {
    "text": "could absolutely replace this with the standard PMR memory resource that's in",
    "start": "2233730",
    "end": "2239130"
  },
  {
    "text": "super c++ 17 so by just stacking these",
    "start": "2239130",
    "end": "2245010"
  },
  {
    "text": "allocators we have basically a the allocator I just talked about before which is a kind of accounting allocator",
    "start": "2245010",
    "end": "2253170"
  },
  {
    "text": "with a guard that allows the instrumentation to know that we're in a pool given to a standard multiple",
    "start": "2253170",
    "end": "2260460"
  },
  {
    "text": "allocator and then that given to another counting allocator which is given to the application so now if we actually look",
    "start": "2260460",
    "end": "2267420"
  },
  {
    "text": "at the prints between the top and the bottom counting allocator that will tell us",
    "start": "2267420",
    "end": "2272630"
  },
  {
    "text": "actually how much memory is held in the pool currently ready for use but not",
    "start": "2272630",
    "end": "2279359"
  },
  {
    "text": "actually handed out to the application so the intention is that we can start to add that into the instrumentation so",
    "start": "2279359",
    "end": "2286440"
  },
  {
    "text": "that when we look at our tree view of our code it'll actually tell us not only the call stacks not only which data is",
    "start": "2286440",
    "end": "2291900"
  },
  {
    "text": "pool data but actually how much of that data is held by a pool rather than actually in active use by an application",
    "start": "2291900",
    "end": "2298019"
  },
  {
    "text": "you know you can you can particularly we found if you use a pool at startup you know you end up starting up things very",
    "start": "2298019",
    "end": "2304259"
  },
  {
    "text": "very fast because your pools working well and then you forget that this date is held in this pool forever and once",
    "start": "2304259",
    "end": "2309359"
  },
  {
    "text": "you go to steady-state you know that maybe that data isn't you know that data it was only used by the parser for",
    "start": "2309359",
    "end": "2315359"
  },
  {
    "text": "example as you start up so but you don't need it anymore so maybe you need to",
    "start": "2315359",
    "end": "2320609"
  },
  {
    "text": "change the life cycle of that particular pool now I just want to very quickly",
    "start": "2320609",
    "end": "2325740"
  },
  {
    "start": "2324000",
    "end": "2324000"
  },
  {
    "text": "touch on mixed mode systems as I mentioned before we we run in an environment particularly now we have",
    "start": "2325740",
    "end": "2331440"
  },
  {
    "text": "chromium embedded where the the kind of the the glue that holds a desktop system",
    "start": "2331440",
    "end": "2337859"
  },
  {
    "text": "together is is written in JavaScript and then that manages lower-level soft",
    "start": "2337859",
    "end": "2345509"
  },
  {
    "text": "real-time C++ subsystems what we're finding particularly with the modern",
    "start": "2345509",
    "end": "2351059"
  },
  {
    "text": "ways people are writing JavaScript for example react and style coding where you",
    "start": "2351059",
    "end": "2357539"
  },
  {
    "text": "know a single you know change to some state results in the whole JavaScript world being rebuilt and if that",
    "start": "2357539",
    "end": "2363779"
  },
  {
    "text": "JavaScript is using some proxy objects to hang on to C++ objects you can end up with your your C++ memory footprint",
    "start": "2363779",
    "end": "2371509"
  },
  {
    "text": "holding multiple invitations of the system and because you're at the mercy of the JavaScript garbage collector you",
    "start": "2371509",
    "end": "2378930"
  },
  {
    "text": "don't know you know the guy the garbage collector doesn't really know the cost of each of these native objects that",
    "start": "2378930",
    "end": "2386309"
  },
  {
    "text": "maybe it's it's reference referencing from JavaScript you know and we found system you know somebody changes their you know their trading system by ticket",
    "start": "2386309",
    "end": "2394589"
  },
  {
    "text": "to a sell ticket and that you know just a simple simple change of that button for a react style piece of JavaScript",
    "start": "2394589",
    "end": "2401549"
  },
  {
    "text": "can be result in a whole data transformation pipeline being created for the for the the cell mode as opposed to the bio mode",
    "start": "2401549",
    "end": "2407790"
  },
  {
    "text": "but the bye mode still exists in memory so what we found is that if you can't deterministically control how the",
    "start": "2407790",
    "end": "2415140"
  },
  {
    "text": "garbage collector is working and everybody says don't don't play with the garbage collector you need to let it do",
    "start": "2415140",
    "end": "2420510"
  },
  {
    "text": "its thing suddenly we've done is actually adopted the approach that c-sharp takes another",
    "start": "2420510",
    "end": "2426570"
  },
  {
    "text": "managed language obviously and the dispose pattern where you can determine lists that you say although I don't know",
    "start": "2426570",
    "end": "2432390"
  },
  {
    "text": "how long my JavaScript objects is going to exist for I do know when I'm finished with the thing it references",
    "start": "2432390",
    "end": "2438330"
  },
  {
    "text": "so I'll implement in my proxy object a dispose method that allows me to call",
    "start": "2438330",
    "end": "2444300"
  },
  {
    "text": "into the C++ and actually let that thing be destroyed we found that to be very",
    "start": "2444300",
    "end": "2449460"
  },
  {
    "text": "very helpful for the large large native objects such as our data transformation",
    "start": "2449460",
    "end": "2455310"
  },
  {
    "text": "pipeline and that we're that we're using and this is just an example of of how that looks in es6 style JavaScript so",
    "start": "2455310",
    "end": "2463590"
  },
  {
    "text": "that's it I think I've kind of done it in the right sort of time which has impressed me anyway there's lots of",
    "start": "2463590",
    "end": "2470370"
  },
  {
    "text": "further reading if you're interested in this this kind of stuff this original",
    "start": "2470370",
    "end": "2475650"
  },
  {
    "text": "blog from 1994 is still relevant today and that you know the PE format that's",
    "start": "2475650",
    "end": "2481380"
  },
  {
    "text": "used on Windows hasn't hasn't changed does this guy Bruce Dawson who is you know he's publishing articles almost",
    "start": "2481380",
    "end": "2488130"
  },
  {
    "text": "every week at the moment about particularly he works for Google and",
    "start": "2488130",
    "end": "2495150"
  },
  {
    "text": "he's in a really you know down deep with JavaScript engines and chromium and memory usage and CPU usage and why your",
    "start": "2495150",
    "end": "2502710"
  },
  {
    "text": "24 calls on your PC suddenly wait for a while and you know how different locks",
    "start": "2502710",
    "end": "2507780"
  },
  {
    "text": "behave and so on a really really great blog that he has we actually have our",
    "start": "2507780",
    "end": "2514410"
  },
  {
    "text": "own tech blogs and which you're very welcome to look at I hope to publish something on there about this particular",
    "start": "2514410",
    "end": "2520110"
  },
  {
    "text": "talk and of course we have a public github including our STL reference",
    "start": "2520110",
    "end": "2525570"
  },
  {
    "text": "implementation and what you're welcome to follow me on Twitter or Tech at Bloomberg and I really really thank you",
    "start": "2525570",
    "end": "2531810"
  },
  {
    "text": "for coming along for your interest in this too I hope you found it somewhat useful I'd",
    "start": "2531810",
    "end": "2539310"
  },
  {
    "text": "be happy to answer any questions but thank you so much [Applause]",
    "start": "2539310",
    "end": "2548900"
  }
]