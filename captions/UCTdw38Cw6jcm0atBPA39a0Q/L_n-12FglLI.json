[
  {
    "text": "foreign last year I had had the privilege of",
    "start": "2040",
    "end": "7919"
  },
  {
    "text": "being here as well and speaking and they had me up on the stage four the the Blazer stage as I like to call it",
    "start": "7919",
    "end": "13380"
  },
  {
    "text": "because that's where Steve Sanderson originally first introduced Blazer to the world and I was very excited about",
    "start": "13380",
    "end": "19020"
  },
  {
    "text": "that and and but I figured out like like just like it is here so David as well as you know big lights shining on you so",
    "start": "19020",
    "end": "24420"
  },
  {
    "text": "can't really see anything besides your own screen there so I took a few steps back on that stage and and then that was",
    "start": "24420",
    "end": "30300"
  },
  {
    "text": "the big you know screen above me that sort of shielded me from the light and I thought that was a good idea but more",
    "start": "30300",
    "end": "36120"
  },
  {
    "text": "comfortable um but it turned out it wasn't the best idea I had because when I went back to the hotel I just scrolled back to the",
    "start": "36120",
    "end": "42780"
  },
  {
    "text": "video and just have a look just to see how bad I've done um you know what you could see in the video was a body and arms wailing about",
    "start": "42780",
    "end": "50039"
  },
  {
    "text": "while I was articulating but my head was completely gone it couldn't see it so uh I guess we stalked me down in this room",
    "start": "50039",
    "end": "55800"
  },
  {
    "text": "I have nowhere to hide so let's see if we can we can get through this without me going blind but uh I promise there's",
    "start": "55800",
    "end": "62219"
  },
  {
    "text": "no light mode thought in this talk so you should be fine so we're going to talk about how to create maintainable",
    "start": "62219",
    "end": "69360"
  },
  {
    "text": "and testable beta components but before that let me say hi my name is Eagle I'm",
    "start": "69360",
    "end": "75420"
  },
  {
    "text": "from Denmark originally and I live in Iceland now and if you want to reach out you can reach out on Twitter and just",
    "start": "75420",
    "end": "80580"
  },
  {
    "text": "add me and if you have any questions now or if you are watching this from the future also feel free to just add me and",
    "start": "80580",
    "end": "86100"
  },
  {
    "text": "and ask your questions there so like I said I I maintained but I live in Iceland but I work remotely for a Danish",
    "start": "86100",
    "end": "92340"
  },
  {
    "text": "company called delegates and we do primary Cloud native Solutions built on the Microsoft stack so if you want to",
    "start": "92340",
    "end": "97680"
  },
  {
    "text": "hear more about that just reach out to me I'm also Microsoft MVP and uh been that since 2020 and I became an MVP",
    "start": "97680",
    "end": "104579"
  },
  {
    "text": "because I built a B unit which is a testing library but we're going to talk a little bit about a little bit about",
    "start": "104579",
    "end": "110880"
  },
  {
    "text": "later today and I also try to live stream on Twitch so that's me programming and answering",
    "start": "110880",
    "end": "118320"
  },
  {
    "text": "questions and having fun and so if you like what you see here today and you might uh you might not then feel free to",
    "start": "118320",
    "end": "124439"
  },
  {
    "text": "jump in there it's a good way to sort of engage and ask you questions sometimes so so um that's a better option you have",
    "start": "124439",
    "end": "129599"
  },
  {
    "text": "and um so but before we really get get started I want to sort of set the stage and",
    "start": "129599",
    "end": "135840"
  },
  {
    "text": "align expectations uh a lot you know a lot of other people",
    "start": "135840",
    "end": "142080"
  },
  {
    "text": "maybe you know I'm gonna agree much smarter people than me have thought",
    "start": "142080",
    "end": "147120"
  },
  {
    "text": "about what maintainability when what how to make and how to create maintainable code and uh",
    "start": "147120",
    "end": "153840"
  },
  {
    "text": "so I'm not really going to reinvent any Wheels here today but what we will do we will try to take those good ideas with",
    "start": "153840",
    "end": "160200"
  },
  {
    "text": "all those people that have come before us and see how we can apply those ideas but we probably already applied to our",
    "start": "160200",
    "end": "166319"
  },
  {
    "text": "regular C sharp code or Java whatever you're coding in how we can apply those to to Blazer as well and that is sort of",
    "start": "166319",
    "end": "174120"
  },
  {
    "text": "what we're going to focus on today and one of those such people is Dan North A",
    "start": "174120",
    "end": "179400"
  },
  {
    "text": "couple of years ago he formulated uh the qubit properties and I really like those",
    "start": "179400",
    "end": "184560"
  },
  {
    "text": "properties as well they're great but I think what really stood out to me was this decision to um",
    "start": "184560",
    "end": "192060"
  },
  {
    "text": "to call them properties instead of principles and this is the reasoning he gave so he",
    "start": "192060",
    "end": "197159"
  },
  {
    "text": "says principles are like rules you are either compliant or you're not right this gives rise to bounded sets of rule",
    "start": "197159",
    "end": "203640"
  },
  {
    "text": "followers or rule enforcers rather than send that set of people with shared values instead I started thinking about",
    "start": "203640",
    "end": "210239"
  },
  {
    "text": "properties qualities or characteristics of code rather than rules to follow so properties to find a goal or Center to",
    "start": "210239",
    "end": "217560"
  },
  {
    "text": "move towards your code is only closer to or farther away from that Center and",
    "start": "217560",
    "end": "222599"
  },
  {
    "text": "there's always a clear direction of travel so this speaks to me because I don't",
    "start": "222599",
    "end": "228659"
  },
  {
    "text": "always write you know super clean maintainable code and I don't expect either of you to always do that and",
    "start": "228659",
    "end": "234840"
  },
  {
    "text": "sometimes hanging something together quickly um this is more valuable than spending",
    "start": "234840",
    "end": "241140"
  },
  {
    "text": "um a lot of time that it might take to write good and terrible code I think sometimes at least for me it can take a bit longer to really you have because",
    "start": "241140",
    "end": "247620"
  },
  {
    "text": "you have to think deeper and harder sometimes about the code you're writing so so in that regard I think it's nice",
    "start": "247620",
    "end": "253519"
  },
  {
    "text": "that I can deliberately I try to be deliberate about that choose whether or not I want to go to the what I would",
    "start": "253519",
    "end": "261000"
  },
  {
    "text": "mind if you have a definition of a good good properties go to that Center or if I choose to be deliberate about not",
    "start": "261000",
    "end": "267300"
  },
  {
    "text": "staying there and I also I bring this up because I also want to make it clear that I don't want you guys to go home",
    "start": "267300",
    "end": "272880"
  },
  {
    "text": "and look at your basic components and say oh man I'm you know Eagle told me that this is how it's supposed to look",
    "start": "272880",
    "end": "278580"
  },
  {
    "text": "and it doesn't look at all like that and now I don't want you go home feeling bad this is not what it's about this is",
    "start": "278580",
    "end": "283860"
  },
  {
    "text": "about us talking about discovering what good properties could be for Blazer",
    "start": "283860",
    "end": "289320"
  },
  {
    "text": "components and have them as a goals we can strive towards when we want to and when we need to okay",
    "start": "289320",
    "end": "295860"
  },
  {
    "text": "so maintainable components I also find",
    "start": "295860",
    "end": "301800"
  },
  {
    "text": "statistical components and I'm a bit I'm sort of a person that don't really feel comfortable writing",
    "start": "301800",
    "end": "308160"
  },
  {
    "text": "production code before I've written test code so what do we mean by that like like and that's something sort of where",
    "start": "308160",
    "end": "313740"
  },
  {
    "text": "I I end up in the test run development camp and I don't want to be a sealer about I don't want to say well this is always the best thing but if you do if",
    "start": "313740",
    "end": "320400"
  },
  {
    "text": "you have considered trying to write a code in a system development fashion you will probably experience about uh that you",
    "start": "320400",
    "end": "327840"
  },
  {
    "text": "also tend to write more maintainable code because writing the test first sort of drives the design and when you force",
    "start": "327840",
    "end": "333419"
  },
  {
    "text": "yourself to write code production code that you can actually test easily which is generally",
    "start": "333419",
    "end": "338460"
  },
  {
    "text": "what happens when you do write your test first then you sort of land in that um",
    "start": "338460",
    "end": "344220"
  },
  {
    "text": "you know pit of success in terms of creating maintainable code it doesn't have to be that way you can certainly write a production code first but I",
    "start": "344220",
    "end": "351240"
  },
  {
    "text": "would suggest that you give it a try if you haven't tried system development for and don't be discouraged because Testament development takes five minutes",
    "start": "351240",
    "end": "357479"
  },
  {
    "text": "to understand right between the fact that everybody can sort of process that and get that under their skin but it takes quite a bit of practice to",
    "start": "357479",
    "end": "364440"
  },
  {
    "text": "actually get good at it and see the advantages and and feel that Advantage so keep it keep it in your toolbox and",
    "start": "364440",
    "end": "370979"
  },
  {
    "text": "take it take it out but I will get back to testing later but for now let's let's talk about maintainability and if we",
    "start": "370979",
    "end": "378840"
  },
  {
    "text": "start at a high level uh we have this fella here Mark Seaman who who actually spoke about this exact",
    "start": "378840",
    "end": "384780"
  },
  {
    "text": "topic a few hours ago so if you didn't watch this talk on fractal architecture you can go back and back in time and see",
    "start": "384780",
    "end": "390600"
  },
  {
    "text": "it again um but if we start at a high level um Mark Siemens says in his book",
    "start": "390600",
    "end": "397080"
  },
  {
    "text": "um code that fits in your head uh he talks about mental code as something that follows a fractional architect or",
    "start": "397080",
    "end": "402360"
  },
  {
    "text": "maintainable apps maintainable code and and for actual architecture is sort of where we see we divide our application",
    "start": "402360",
    "end": "410039"
  },
  {
    "text": "our code into layers in that fractal and each layer has about seven things up to seven things Concepts that it deals with",
    "start": "410039",
    "end": "417440"
  },
  {
    "text": "and if we want to sort of know more about the lower layers well we double",
    "start": "417440",
    "end": "422819"
  },
  {
    "text": "click on that fractal and we get to a new fraction that contains another seven Concepts but at a lower level",
    "start": "422819",
    "end": "429419"
  },
  {
    "text": "and that makes you know the code more easy to understand at the individual level",
    "start": "429419",
    "end": "435660"
  },
  {
    "text": "you can easily comprehend and again that leads to maintainability I think so as",
    "start": "435660",
    "end": "440880"
  },
  {
    "text": "an added bonus the whole metaphor of a fractal are different layers there translates very",
    "start": "440880",
    "end": "447240"
  },
  {
    "text": "well to laser components right because a Blazer component is typically a component that has sub-components in it",
    "start": "447240",
    "end": "453900"
  },
  {
    "text": "so if we remember when we architect our Blazer applications in a way where we",
    "start": "453900",
    "end": "459539"
  },
  {
    "text": "make sure that the sub components are sort of dealing with the same conceptual things",
    "start": "459539",
    "end": "464580"
  },
  {
    "text": "uh and then we go one layer deep well then we sort of can lean into that concept of factual architecture and and",
    "start": "464580",
    "end": "472139"
  },
  {
    "text": "um so if you I guess you've all seen if you're a Blazer developers you've all seen that you know typically the entry",
    "start": "472139",
    "end": "477720"
  },
  {
    "text": "point of a base application is the app.reza file right and it has some infrastructure it has the it has a",
    "start": "477720",
    "end": "484080"
  },
  {
    "text": "navigating routing stuff and it has maybe has some other things like like high level Concepts like cross-coding",
    "start": "484080",
    "end": "489720"
  },
  {
    "text": "concerns like authentication stuff like that then you can double click on one of those uh typical that's going to be one",
    "start": "489720",
    "end": "495000"
  },
  {
    "text": "body element there and when you go into that well then you certainly have so now you have the the concept of of maybe",
    "start": "495000",
    "end": "501599"
  },
  {
    "text": "layout where you have headers and navigation and Center content and then you can go into each of those you can",
    "start": "501599",
    "end": "508259"
  },
  {
    "text": "understand those uh in their own rights without having that uh full um up and",
    "start": "508259",
    "end": "514680"
  },
  {
    "text": "down uh understanding of the full stack necessarily so that's one of the advantages of taking this approach I",
    "start": "514680",
    "end": "519839"
  },
  {
    "text": "think and it applies very well to to Blazer without us really having to force the issue now if we go one step deeper and talk",
    "start": "519839",
    "end": "526740"
  },
  {
    "text": "about I'm going to use a dance concept here of calling properties but properties of maintainable components if",
    "start": "526740",
    "end": "533040"
  },
  {
    "text": "we go down to the component level these are sort of my go-to uh when I",
    "start": "533040",
    "end": "538800"
  },
  {
    "text": "want to sort of start by building maintainable code and this is this is sort of the same I do with just regular C sharp code for that matter but you",
    "start": "538800",
    "end": "545399"
  },
  {
    "text": "know the first thing is and the one thing is that a component should be really good to do should be really be",
    "start": "545399",
    "end": "551279"
  },
  {
    "text": "good at doing that one thing and I think the hardest part there is figuring out what is one thing what what",
    "start": "551279",
    "end": "557880"
  },
  {
    "text": "and and are we two things three things four things are we just one thing are we good enough so some of the things some",
    "start": "557880",
    "end": "563940"
  },
  {
    "text": "of the other things we can go look for is is uh whether or not the component is",
    "start": "563940",
    "end": "569279"
  },
  {
    "text": "mixing abstraction levels so we talked about other Factor before do we have multiple layers of of a fraction within",
    "start": "569279",
    "end": "574560"
  },
  {
    "text": "the same component or not another thing I I tend to look at is whether or not a component exhibits High",
    "start": "574560",
    "end": "581820"
  },
  {
    "text": "cohesion or if it's the opposite if it's soft lower than that location and the fourth thing I want to you know",
    "start": "581820",
    "end": "588839"
  },
  {
    "text": "take take in here today is going to be um if I'm using uh abstractions in my",
    "start": "588839",
    "end": "596100"
  },
  {
    "text": "components or if I'm using stuff that uh like infrastructure things directly in my code so the typical thing you will",
    "start": "596100",
    "end": "603060"
  },
  {
    "text": "see in a place application could be using HTTP client directly in your component or a DB context something like that",
    "start": "603060",
    "end": "608459"
  },
  {
    "text": "if you think about it that's clearly a different abstraction level different concept than putting stuff on screen for",
    "start": "608459",
    "end": "613980"
  },
  {
    "text": "the user to interact with and work with and it also quite hurts testability it's",
    "start": "613980",
    "end": "619800"
  },
  {
    "text": "going to make your test harder to write and work with so so so do keep that in mind okay so let's make it a bit",
    "start": "619800",
    "end": "626880"
  },
  {
    "text": "concrete let's create something that we can use to examine these properties with and",
    "start": "626880",
    "end": "632640"
  },
  {
    "text": "um I have a dynamic data table component for you here and it works by yeah",
    "start": "632640",
    "end": "638160"
  },
  {
    "text": "imagine we have a page where we want to show movies on so somehow we've gotten a collection of movies small list of",
    "start": "638160",
    "end": "644220"
  },
  {
    "text": "movies and what we need to do to make that printer predictable for us is we need to pass that movies to our data",
    "start": "644220",
    "end": "649860"
  },
  {
    "text": "table component and it will figure out how to create a table with headers based on the public properties of our data",
    "start": "649860",
    "end": "657240"
  },
  {
    "text": "item in this in this case the movie and it will print out a row for each movie with the data that was actually in that",
    "start": "657240",
    "end": "663300"
  },
  {
    "text": "movie so this is approximation it's not you know you can imagine that daytime would look a bit different when it's 2",
    "start": "663300",
    "end": "668399"
  },
  {
    "text": "two strings but the idea is sort of this is the concept what we're building so how does this look implementation wise",
    "start": "668399",
    "end": "676079"
  },
  {
    "text": "well we need some magic so of course we need system reflection in here and uh",
    "start": "676079",
    "end": "681180"
  },
  {
    "text": "what else well we need a t item so the T item represents the type of item we will",
    "start": "681180",
    "end": "687000"
  },
  {
    "text": "be rendering out and then we need a code block and the first thing we need in our code block is going to be the parameter",
    "start": "687000",
    "end": "693300"
  },
  {
    "text": "that that we can that can be used passing the items with uh so that will receive the items from the outside and",
    "start": "693300",
    "end": "700079"
  },
  {
    "text": "then we need a little bit of helpers that can you know help with the magic and for this we will use the reflection",
    "start": "700079",
    "end": "705899"
  },
  {
    "text": "bit here where we say the type of T item and then we go and get the properties and we say we only want the properties",
    "start": "705899",
    "end": "711839"
  },
  {
    "text": "that are public and that are instance properties on our T item and we also filter out those we cannot read so give",
    "start": "711839",
    "end": "718680"
  },
  {
    "text": "us all the properties that are instant and public and readable so now that we know something about our",
    "start": "718680",
    "end": "724740"
  },
  {
    "text": "T item well we can create another helper method that allows us to read the",
    "start": "724740",
    "end": "730200"
  },
  {
    "text": "properties and create column names out of that so we can print you know the column header for for the table and",
    "start": "730200",
    "end": "736740"
  },
  {
    "text": "finally we didn't allowable method to actually get the data out of our individual item so we have get items get",
    "start": "736740",
    "end": "743399"
  },
  {
    "text": "item data method that takes an item as input and users will probably item",
    "start": "743399",
    "end": "748500"
  },
  {
    "text": "property info collection we have there to select out the values now if you scroll down a little bit",
    "start": "748500",
    "end": "754140"
  },
  {
    "text": "we obviously need a table to put it into and then we need the table header and in there we need a table row and then we",
    "start": "754140",
    "end": "761160"
  },
  {
    "text": "can for each over the result of the get column names method call and print out a table header cell for each of the public",
    "start": "761160",
    "end": "767160"
  },
  {
    "text": "properties that exist in that component and finally we need also a g body and we",
    "start": "767160",
    "end": "773760"
  },
  {
    "text": "need to for each over each of the items and when we have done that we can use the get item data to pull out the data",
    "start": "773760",
    "end": "779639"
  },
  {
    "text": "and for each over each of the table cells we need to print for each row now",
    "start": "779639",
    "end": "784980"
  },
  {
    "text": "it's a fairly simple component uh and you can ask I can ask the question now what can we do to make that even more",
    "start": "784980",
    "end": "791100"
  },
  {
    "text": "simple and more maintainable for the future and you might be sitting out here in the room or in the future and watching this",
    "start": "791100",
    "end": "797339"
  },
  {
    "text": "and thinking well it's like 30 lines it's super simple already and and you know I wouldn't really disagree with you",
    "start": "797339",
    "end": "803639"
  },
  {
    "text": "but you know for the sake of demonstration let's try anyway and besides you we might have a product owner come and say hey uh",
    "start": "803639",
    "end": "811560"
  },
  {
    "text": "that looks really super nice but could we get some sorting could we get some filtering could we get some inline",
    "start": "811560",
    "end": "816660"
  },
  {
    "text": "editing and all of a sudden our you know small about 30 lines of component sample component here grow and grow and grew",
    "start": "816660",
    "end": "823079"
  },
  {
    "text": "and now it's maybe not so easy to comprehend easy to maintain anymore so let's give it a go and see if we can you",
    "start": "823079",
    "end": "830279"
  },
  {
    "text": "know refax it a little bit and and give ourselves a better chance of adding new features faster in the future",
    "start": "830279",
    "end": "837440"
  },
  {
    "text": "so if we address the first thing there and",
    "start": "843600",
    "end": "849060"
  },
  {
    "text": "figure out well how can we refactor our component well we could look at the the idea about mixing mixing abstraction",
    "start": "849060",
    "end": "855779"
  },
  {
    "text": "levels and and so if we make this a bit concrete we can see here the red part here are really",
    "start": "855779",
    "end": "861480"
  },
  {
    "text": "dealing with a plural multiple items right so that is sort of one level of",
    "start": "861480",
    "end": "866519"
  },
  {
    "text": "abstraction you can look at from a data perspective all of that code here that is highlighted in red it's about the",
    "start": "866519",
    "end": "872820"
  },
  {
    "text": "multiple of items whereas the green oh sorry not green obviously blue Parts",
    "start": "872820",
    "end": "878160"
  },
  {
    "text": "um they are about the individual item you can sort of say that's in each case around the column names but let's you",
    "start": "878160",
    "end": "883920"
  },
  {
    "text": "know it's sort of it's a different level of abstraction I feel so this is uh this is sort of an indication that's",
    "start": "883920",
    "end": "890100"
  },
  {
    "text": "something we can do here to refactor this and split it up another thing we could look at is the",
    "start": "890100",
    "end": "895680"
  },
  {
    "text": "cohesionness of our data table component and and cohesion was something I I it took me a while to sort of really grasp",
    "start": "895680",
    "end": "901920"
  },
  {
    "text": "what that sort of fancy word meant and and in this case it means that we can",
    "start": "901920",
    "end": "908579"
  },
  {
    "text": "see that the the red parts of the code they don't really know or care or use",
    "start": "908579",
    "end": "914519"
  },
  {
    "text": "anything from the blue parts so these two parts of the code that are highlighted right now they can exist in",
    "start": "914519",
    "end": "920880"
  },
  {
    "text": "separate places without them really knowing anything about it and and so this is also an indication that the the",
    "start": "920880",
    "end": "926279"
  },
  {
    "text": "component here isn't really highly cohesive because it has different parts of the component that use other parts",
    "start": "926279",
    "end": "931320"
  },
  {
    "text": "and then there's other parts again that use some other parts so they could be grouped together and put to the side and",
    "start": "931320",
    "end": "938160"
  },
  {
    "text": "nothing would really but they wouldn't wouldn't care that the other part is missing now so let's uh let's try that",
    "start": "938160",
    "end": "944940"
  },
  {
    "text": "refactoring so I guess the first step would be would be to remove this item's property",
    "start": "944940",
    "end": "950639"
  },
  {
    "text": "info helper property we have here and if we just pull that out into a separate",
    "start": "950639",
    "end": "956699"
  },
  {
    "text": "class because we're going to reuse that across different classes um well our code looks like this now and",
    "start": "956699",
    "end": "962699"
  },
  {
    "text": "our um and I'm not cheating so it's here now um and and it looks like this so so this is the get items property",
    "start": "962699",
    "end": "968579"
  },
  {
    "text": "information method now but you know the same thing basically and if we jump back here well the next",
    "start": "968579",
    "end": "974100"
  },
  {
    "text": "step would be to uh to to pull out stuff related to the header right so let's do",
    "start": "974100",
    "end": "980699"
  },
  {
    "text": "that and create a new component called um well you guessed it data table header and it only really needs in its current",
    "start": "980699",
    "end": "988560"
  },
  {
    "text": "version it only really needs to know what type of what what is the data type that is being rendered right now because",
    "start": "988560",
    "end": "994920"
  },
  {
    "text": "it just needs to have that type information so it can generate the right columns for the header now next step you",
    "start": "994920",
    "end": "1001519"
  },
  {
    "text": "probably already guessed this oh well sorry I have to show you the new data table header component as you can see it's nice concise that's it's pretty",
    "start": "1001519",
    "end": "1009380"
  },
  {
    "text": "clear you can understand what's going on here right away right so next step as you would imagine would be to pull out",
    "start": "1009380",
    "end": "1015920"
  },
  {
    "text": "the thing that deals with printing out individual rows and create a data table",
    "start": "1015920",
    "end": "1021079"
  },
  {
    "text": "row component and again this component will just take the item in as input so",
    "start": "1021079",
    "end": "1028400"
  },
  {
    "text": "it so our outer data table component will still iterate over each of the items because it's dealing on that",
    "start": "1028400",
    "end": "1034040"
  },
  {
    "text": "abstraction level but we are passing down the individual items and responsibility of rendering that to a",
    "start": "1034040",
    "end": "1039079"
  },
  {
    "text": "lower level component and this is going to be a data table role which just deals with you know iterating over the",
    "start": "1039079",
    "end": "1045380"
  },
  {
    "text": "individual fields and that item and printing out the table cells in the",
    "start": "1045380",
    "end": "1050419"
  },
  {
    "text": "table row okay so this is our final refactor it's a data table component and if we sort of",
    "start": "1050419",
    "end": "1057760"
  },
  {
    "text": "take a a step back and just just re-uh go go through those um like like the the",
    "start": "1057760",
    "end": "1063799"
  },
  {
    "text": "properties I was talking about before and just just double check so I think the important takeaway really is that do",
    "start": "1063799",
    "end": "1069860"
  },
  {
    "text": "one thing well kind of idea and and this is the same you should do for regular",
    "start": "1069860",
    "end": "1074960"
  },
  {
    "text": "classes and methods but I think it's easier to forget that with components sometimes perhaps because we have this",
    "start": "1074960",
    "end": "1082460"
  },
  {
    "text": "mix of markup and and code and logic together in in one place and and it's",
    "start": "1082460",
    "end": "1088640"
  },
  {
    "text": "quite easier to just add an upload of markup into a component but before you know it you kind of you're scrolling up",
    "start": "1088640",
    "end": "1093799"
  },
  {
    "text": "and down your rather long component trying to find that bit a little piece of markup but but actually responsible",
    "start": "1093799",
    "end": "1099200"
  },
  {
    "text": "for that UI thing you want to change and fix right so so remembering to apply that do one thing well very known you",
    "start": "1099200",
    "end": "1107900"
  },
  {
    "text": "know coding rule also to UI components I think makes a difference so",
    "start": "1107900",
    "end": "1113000"
  },
  {
    "text": "and and what we also get is because we are utilizing the composibility of Blazer components and where we move",
    "start": "1113000",
    "end": "1119179"
  },
  {
    "text": "related sections of a markup and and the code deriving them into sort of well-known sub components uh you will",
    "start": "1119179",
    "end": "1126679"
  },
  {
    "text": "also have shorter components that would be easier to understand and again we talked about the factual concept with up to seven things and and it's okay sort",
    "start": "1126679",
    "end": "1134059"
  },
  {
    "text": "of to do this even the sub component is only going to be going to be used by a single parent component I think so yeah",
    "start": "1134059",
    "end": "1139700"
  },
  {
    "text": "we did glance over the don't depend on infrastructure here but I think you can imagine if we for example had an HTTP client in here for perhaps maybe to have",
    "start": "1139700",
    "end": "1146780"
  },
  {
    "text": "some Advanced feature where you can pass in the UL and have that UL Pawn to a I don't know Json document that you would download and print out as a table well",
    "start": "1146780",
    "end": "1153380"
  },
  {
    "text": "we would probably have to want to move that HTTP client out and have an abstraction representing that functionality of downloading uh code and",
    "start": "1153380",
    "end": "1161240"
  },
  {
    "text": "and returning maybe uh some sort of Json document or object that you couldn't reiterate over and spit out in the table",
    "start": "1161240",
    "end": "1167660"
  },
  {
    "text": "um so uh let's go ahead and um I change gears a little bit and look at",
    "start": "1167660",
    "end": "1174620"
  },
  {
    "text": "how we can use sort of our wealth fact how easy it is to test well factored laser components and isolate that and",
    "start": "1174620",
    "end": "1180559"
  },
  {
    "text": "get faster stable tests so to do that we're going to use B unit and but I'll",
    "start": "1180559",
    "end": "1186919"
  },
  {
    "text": "first tell you what B unit is and and why it is or why we need it so B units B",
    "start": "1186919",
    "end": "1193580"
  },
  {
    "text": "unit is a library that we can use to test Blazer components and and I sort of",
    "start": "1193580",
    "end": "1199940"
  },
  {
    "text": "want to underscore the word Library here because it's not a framework like like a like X unit or Ms test or in Unit B unit",
    "start": "1199940",
    "end": "1206840"
  },
  {
    "text": "is a library that you add on top of those okay you create a regular just a regular old X unit or any other name is",
    "start": "1206840",
    "end": "1212480"
  },
  {
    "text": "test test project and when you have that you can install all the normal tools you do like like fluent assertion maybe or",
    "start": "1212480",
    "end": "1217940"
  },
  {
    "text": "moq or any subject or whatever you use and B unit is just another Library like those that enable you to test things uh",
    "start": "1217940",
    "end": "1224360"
  },
  {
    "text": "basic reporters in particular that also means that B unit tests I call it beam test but it's really just whatever test",
    "start": "1224360",
    "end": "1230720"
  },
  {
    "text": "you're riding in the test framework those tests will look and feel kind of the same and that's the goal of B unit",
    "start": "1230720",
    "end": "1236720"
  },
  {
    "text": "is to make it feel familiar if you have good patterns or practices you're following in your organization for",
    "start": "1236720",
    "end": "1242179"
  },
  {
    "text": "writing tests well those the test that's his laser components shouldn't feel different than that so that's what bu",
    "start": "1242179",
    "end": "1248539"
  },
  {
    "text": "enables us and we can reuse those patterns and practices that we really we have established there and also other",
    "start": "1248539",
    "end": "1255200"
  },
  {
    "text": "libraries that we use in our test now there is a thing that tend to surprise",
    "start": "1255200",
    "end": "1260780"
  },
  {
    "text": "newcomers the B unit and maybe especially if they've used something like selenium or playwright before and",
    "start": "1260780",
    "end": "1266240"
  },
  {
    "text": "this is that B unit doesn't run uh your JavaScript code it actually doesn't run in a browse at all it's completely just",
    "start": "1266240",
    "end": "1273020"
  },
  {
    "text": "in it's just C sharp code it will run uh so and that's that's both an advantages",
    "start": "1273020",
    "end": "1278480"
  },
  {
    "text": "disadvantages like luckily the Blazer team decided to create Blazers such that when you want",
    "start": "1278480",
    "end": "1284600"
  },
  {
    "text": "to call JavaScript you're actually calling through an abstraction through the IGS runtime interface right and that",
    "start": "1284600",
    "end": "1290240"
  },
  {
    "text": "means that during a period test if you have interactions with JavaScript from your component to JavaScript you can",
    "start": "1290240",
    "end": "1296240"
  },
  {
    "text": "let's build in uh JavaScript interrupt functionality in B unit that allows you to set up and configure those",
    "start": "1296240",
    "end": "1301640"
  },
  {
    "text": "expectations how you want your JavaScript to behave if that is not enough okay and I think",
    "start": "1301640",
    "end": "1307640"
  },
  {
    "text": "for the most part like that at least the promise of blazers is that we don't have to write a lot of JavaScript it's mostly just Plumbing to get to some browser",
    "start": "1307640",
    "end": "1313520"
  },
  {
    "text": "apis but if you have more complex interactions you want to test obviously I do recommend creating real entering",
    "start": "1313520",
    "end": "1319280"
  },
  {
    "text": "tests where you use something like playwright or maybe Taylor test studio and set up a test and in those into",
    "start": "1319280",
    "end": "1325400"
  },
  {
    "text": "interest uh headless browser will be started in the background and it will load up a Blazer app and load up your",
    "start": "1325400",
    "end": "1330799"
  },
  {
    "text": "component and it will run the JavaScript and you will be able to expect the outcome but that is um those are",
    "start": "1330799",
    "end": "1336919"
  },
  {
    "text": "disadvantages to that and and this is where B unit shines is that it's it's runs basically as fast as your regular",
    "start": "1336919",
    "end": "1343159"
  },
  {
    "text": "unit test so it's much faster generally than it is to do those real end-to-end tests where you have to spin up a browser and it also has some advantages",
    "start": "1343159",
    "end": "1350179"
  },
  {
    "text": "that because B unit is is sort of working with the Blazer runtime the real",
    "start": "1350179",
    "end": "1355400"
  },
  {
    "text": "Blazer runtime we can put some hooks into that and we will know much more about what's going on with your components and and where they are in the",
    "start": "1355400",
    "end": "1362179"
  },
  {
    "text": "life cycle and allow you to have more stable and predictable test where I don't have to do a lot of we have to try",
    "start": "1362179",
    "end": "1367960"
  },
  {
    "text": "creating entrances before and if around then you you know that they can be a little bit unstable sometimes so so we",
    "start": "1367960",
    "end": "1373159"
  },
  {
    "text": "don't really have necessarily that problem um and and how do we solve color how do we go about using B and well uh this is",
    "start": "1373159",
    "end": "1380840"
  },
  {
    "text": "a standard X unit CS Branch file I probably seen that before using issue on it so we need to make a few changes to",
    "start": "1380840",
    "end": "1387620"
  },
  {
    "text": "that the first change we need to make is to change the SDK type to microsoft.net.sdk.raza and that just",
    "start": "1387620",
    "end": "1393559"
  },
  {
    "text": "enables the Blazer compiler to come in and do its stuff and we want that because we want to write out certain",
    "start": "1393559",
    "end": "1398840"
  },
  {
    "text": "Razer files that gives us some advantages I'll come back to later and then you obviously need to add a package reference to to B unit and that's just",
    "start": "1398840",
    "end": "1405860"
  },
  {
    "text": "it so that's this is basically what is this but you might also be asking why is it even necessary and and originally",
    "start": "1405860",
    "end": "1411799"
  },
  {
    "text": "when I started Building B unit I was sort of in the early days of this place I was trying to just build a computer Library like I guess everybody else who",
    "start": "1411799",
    "end": "1418400"
  },
  {
    "text": "was experimenting at that time and and like I said I don't really like writing production code at at a certain level I",
    "start": "1418400",
    "end": "1423980"
  },
  {
    "text": "tried I want to have some tests for it and I couldn't really figure out how to test it and it turns out there are some things you need to do to to Really",
    "start": "1423980",
    "end": "1430580"
  },
  {
    "text": "simulate that production environment right that a basic opponent existing so one of the things is that you know",
    "start": "1430580",
    "end": "1436700"
  },
  {
    "text": "components they do have livestocking methods and doing a test you need to make sure that those lifecycle methods",
    "start": "1436700",
    "end": "1443240"
  },
  {
    "text": "are called and and you know used in the same way that the beta launcher would do it similarly parameters services and",
    "start": "1443240",
    "end": "1451400"
  },
  {
    "text": "other things like that they need to be passed into the laser component in the same way that the Blazer runtime does it at the same right time and uh there's",
    "start": "1451400",
    "end": "1459500"
  },
  {
    "text": "event handlers we need to trigger those in the same way that the Blazer runtime does it I guess you're using a pattern",
    "start": "1459500",
    "end": "1465740"
  },
  {
    "text": "here but I think most importantly is Blazer components actually doesn't know how to produce markup themselves what",
    "start": "1465740",
    "end": "1472159"
  },
  {
    "text": "they are they are a sort of a conceptual abstract representation of what the markup is that you want and then we have",
    "start": "1472159",
    "end": "1478880"
  },
  {
    "text": "something called the browser render if it's you rendering out to a browser that will come by and take that representation and turn that into markup",
    "start": "1478880",
    "end": "1484880"
  },
  {
    "text": "and this is all of that is basically what B unit helps you with so that's why we need it now",
    "start": "1484880",
    "end": "1490539"
  },
  {
    "text": "the hello world of Beulah testing uh looks like it looks a little bit like",
    "start": "1490539",
    "end": "1495559"
  },
  {
    "text": "this so so this is the counter component I assume most of you know what that is but if you've gotten how it works it is basically a button you can click and",
    "start": "1495559",
    "end": "1502159"
  },
  {
    "text": "there's a count of an increment by increments by one so if you want to write a test for that we do something like this well we start by creating a",
    "start": "1502159",
    "end": "1509360"
  },
  {
    "text": "Razer file and let's call it counter test.rason and we add a code block and in that code block we add our um I'm",
    "start": "1509360",
    "end": "1516260"
  },
  {
    "text": "going to use x units in this demo but we actually add a next unit test and the engagement test is called counter should",
    "start": "1516260",
    "end": "1521600"
  },
  {
    "text": "increment when clicked so first in that test we need something called a test contact that's a it's a B unit thing",
    "start": "1521600",
    "end": "1527240"
  },
  {
    "text": "it's the thing that allows us to sort of drive a Blazer component through its life cycle and and interrogate and see",
    "start": "1527240",
    "end": "1532940"
  },
  {
    "text": "what what is being what is happening under the hood now once we have that we can call the render method and we can pass in the carbon component and output",
    "start": "1532940",
    "end": "1539360"
  },
  {
    "text": "out of that we get uh something called a rental fragment which is that thing that",
    "start": "1539360",
    "end": "1544520"
  },
  {
    "text": "container that represents the render component plus the Dom tree that has been built and so on and so forth and allows us to interact and and food and",
    "start": "1544520",
    "end": "1551360"
  },
  {
    "text": "and do things with the component and you might notice I I use the abbreviation cut it stands for component on the test",
    "start": "1551360",
    "end": "1558200"
  },
  {
    "text": "so if you're familiar with other you know X unit terminology you might have heard the U the term system under test",
    "start": "1558200",
    "end": "1563720"
  },
  {
    "text": "so this is my little thing on that so component ancest for cut and once we have that once we have the cut we can go",
    "start": "1563720",
    "end": "1569960"
  },
  {
    "text": "ahead and use the fight method that takes us to your system Alexa and that will give us out the button that we want to attempt to click and once we have",
    "start": "1569960",
    "end": "1576980"
  },
  {
    "text": "that we can use the ventric and we have a click it should be quite obvious what's going on here and once we click that well now we need to assert",
    "start": "1576980",
    "end": "1583400"
  },
  {
    "text": "something and what we would like to assert is we go into the Dom tree again after we've done the click and find the",
    "start": "1583400",
    "end": "1589039"
  },
  {
    "text": "paragraph element and that paragraph element we can use the B units um",
    "start": "1589039",
    "end": "1594860"
  },
  {
    "text": "assertion method markup matches on and say well now I expect the paragraph element to look like this it should have",
    "start": "1594860",
    "end": "1600380"
  },
  {
    "text": "current count a colon one in there so that is all of the you know hello world places if you like a B unit test and and",
    "start": "1600380",
    "end": "1607520"
  },
  {
    "text": "one thing you might be noticing if it's this first time you're looking at something like this is that we have sort",
    "start": "1607520",
    "end": "1614000"
  },
  {
    "text": "of this weird markup directly in our C sharp code and and it's um it's it's",
    "start": "1614000",
    "end": "1619279"
  },
  {
    "text": "pretty wild that we can this but this is actually ported in the racial language and and so basically we're able to start",
    "start": "1619279",
    "end": "1625700"
  },
  {
    "text": "out in markup mode Escape into code mode by using the code block but inside code mode we can actually Escape batch markup",
    "start": "1625700",
    "end": "1631760"
  },
  {
    "text": "mode by just adding that add sign you see in front and that gives us the ability to Define our component under",
    "start": "1631760",
    "end": "1637279"
  },
  {
    "text": "test with in markup like we see here and it also gives us the ability to to",
    "start": "1637279",
    "end": "1642919"
  },
  {
    "text": "Define maybe expected uh HTML like we see here with highlighting with",
    "start": "1642919",
    "end": "1648080"
  },
  {
    "text": "intellisense with autocomplete and and all that help we usually expect to get from the editor so that's super nice",
    "start": "1648080",
    "end": "1653360"
  },
  {
    "text": "now running the unit test because it's just an X unit test it's still just an excellent test even though we have a bunch of beer and stuff in there we can",
    "start": "1653360",
    "end": "1660380"
  },
  {
    "text": "run it from Visual Studio we can run it from the command line or wherever you can run your unit tests so in this case I'm just going to run it with.net test",
    "start": "1660380",
    "end": "1665900"
  },
  {
    "text": "and a little bit of extra source to give us a better output and when we do that well we get the output we see from",
    "start": "1665900",
    "end": "1672020"
  },
  {
    "text": "running.net test that also means it just works on CI like anything that's nothing special going on here nothing magical Okay so",
    "start": "1672020",
    "end": "1679340"
  },
  {
    "text": "now we know how we can go about verifying stuff and and and how we can",
    "start": "1679340",
    "end": "1684620"
  },
  {
    "text": "build our chest and how we can get started but now we need to sort of answer the question well what do I want",
    "start": "1684620",
    "end": "1690260"
  },
  {
    "text": "to verify what do I want to ensure about my my blazer component and you can you",
    "start": "1690260",
    "end": "1696380"
  },
  {
    "text": "could decide to to to do what we did here where we say well one answer a certain part of the backup looks like this or you can more focus on the",
    "start": "1696380",
    "end": "1703100"
  },
  {
    "text": "functionality like what happens when I interact with that and and um there",
    "start": "1703100",
    "end": "1708679"
  },
  {
    "text": "wasn't a lot of functionality well that was pretty printing of of a in our data table component that was you know we're",
    "start": "1708679",
    "end": "1714200"
  },
  {
    "text": "going to print out automatically print out a table for you but there's not a we don't didn't have any buttons you can click on stuff like that so I'm going to",
    "start": "1714200",
    "end": "1719779"
  },
  {
    "text": "take another example to sort of show that off now I don't know how many of you know the Blazing Pizza Workshop you",
    "start": "1719779",
    "end": "1725419"
  },
  {
    "text": "can see the the URLs down here at the bottom of the slide on screen it's a good Workshop if you want to get started",
    "start": "1725419",
    "end": "1730640"
  },
  {
    "text": "with blazer or just learn all the small corners and place I actually it takes you through most of the details that are",
    "start": "1730640",
    "end": "1736159"
  },
  {
    "text": "there I also have a version of the workshop the links next to it well that",
    "start": "1736159",
    "end": "1741200"
  },
  {
    "text": "includes tests so if you want to see how I went about working through that workshop and creating tests in every",
    "start": "1741200",
    "end": "1747140"
  },
  {
    "text": "step then there's also an option for you but the basic piece of Workshop is a workshop where you create a web",
    "start": "1747140",
    "end": "1753140"
  },
  {
    "text": "application that allows you to order pizza and the configure Pizza dialog is a way where you've chosen to order pizza",
    "start": "1753140",
    "end": "1759679"
  },
  {
    "text": "and you're able to maybe add extra chopping so if you want to write a test for this functionality well how could that look so",
    "start": "1759679",
    "end": "1767000"
  },
  {
    "text": "um well first we need a test cast obviously and we can call that selecting topping from drop down added to the pizza and next we need a test contact",
    "start": "1767000",
    "end": "1775220"
  },
  {
    "text": "and we need a new pizza that we can you know that's going to be our state container as well and we pass that pizza",
    "start": "1775220",
    "end": "1781399"
  },
  {
    "text": "to our configure Pizza dialog it might look a bit like we're just passing in a string to the configure Pizza dialog but",
    "start": "1781399",
    "end": "1788240"
  },
  {
    "text": "that variable it's actually just a reference to the variable on the line above where we knew about pizza now we",
    "start": "1788240",
    "end": "1794720"
  },
  {
    "text": "need to go ahead and find that drop down and we can use the change method on that",
    "start": "1794720",
    "end": "1800960"
  },
  {
    "text": "drop down to change the selection to to the number one element in the drop down and after we've done that well our",
    "start": "1800960",
    "end": "1808640"
  },
  {
    "text": "assertion would be that well in this case it's going to keep it simple so we just say well now the pieces toppings collection should not be engine anymore",
    "start": "1808640",
    "end": "1814580"
  },
  {
    "text": "so the interesting part about this test is that we have very limited uh",
    "start": "1814580",
    "end": "1821659"
  },
  {
    "text": "dependence or coupling to the action markup that was generated by the configured Peter dialog we don't do any",
    "start": "1821659",
    "end": "1828080"
  },
  {
    "text": "surgeons on the markup really well we do need to know that there is a select element that lies at a specific",
    "start": "1828080",
    "end": "1833179"
  },
  {
    "text": "Precision but we can use the CSS lecture to get at and we can trigger something an event hand on that that will do",
    "start": "1833179",
    "end": "1838700"
  },
  {
    "text": "something but the idea is we want to be able to create tests that don't break if we do refactorings of the markup that",
    "start": "1838700",
    "end": "1845539"
  },
  {
    "text": "that represent the configured Peter dialog for example as long as we only want our test to break if the business",
    "start": "1845539",
    "end": "1850820"
  },
  {
    "text": "rule if the business conditions that we're trying to verify here changes so this is a approach to creating stable",
    "start": "1850820",
    "end": "1857059"
  },
  {
    "text": "and maintainable tests where you only sort of make sure you have them targeted at what you are actually wanting to",
    "start": "1857059",
    "end": "1863600"
  },
  {
    "text": "assert on and not try to try to make them resilient against breaking when",
    "start": "1863600",
    "end": "1868640"
  },
  {
    "text": "they shouldn't okay but obviously sometimes it can't be very very valuable",
    "start": "1868640",
    "end": "1874880"
  },
  {
    "text": "to verify Margaret it could be for example you have a designer in your company or maybe you are the designer",
    "start": "1874880",
    "end": "1880760"
  },
  {
    "text": "and uh you've decided that a certain piece of markup has to go together with",
    "start": "1880760",
    "end": "1886880"
  },
  {
    "text": "a certain piece of CSS right and if the markup is not right the look and feel of",
    "start": "1886880",
    "end": "1892039"
  },
  {
    "text": "the app of the component you've written isn't going to be right it could be that you're building a third-party component Library somebody else is using and you",
    "start": "1892039",
    "end": "1898700"
  },
  {
    "text": "want to make sure you don't break them if you accidentally change significant things about your component so",
    "start": "1898700",
    "end": "1906820"
  },
  {
    "text": "doing just markup comparison has historically been quite hard but with B",
    "start": "1906820",
    "end": "1912919"
  },
  {
    "text": "unit we're able to do that semantically and that means that as semantic comparison means that two markup uh",
    "start": "1912919",
    "end": "1919220"
  },
  {
    "text": "Snippets are equal if they uh render and behave the same in a web browser that's",
    "start": "1919220",
    "end": "1925460"
  },
  {
    "text": "really ultimately what matters right the opposite is the classical thing where you compare two strings to each other",
    "start": "1925460",
    "end": "1930740"
  },
  {
    "text": "using just you know so it equals a string equals and obviously a insignificant change to White space",
    "start": "1930740",
    "end": "1936679"
  },
  {
    "text": "indentation and stuff like that which doesn't matter in the browser well they're going to break a test so we don't want that",
    "start": "1936679",
    "end": "1941960"
  },
  {
    "text": "so consider this dialog button component we",
    "start": "1941960",
    "end": "1947600"
  },
  {
    "text": "have up here and and this straightforward test of that so we're just assuming that the markup is right",
    "start": "1947600",
    "end": "1952940"
  },
  {
    "text": "and we use Market matches and Market matches is the solution method in the universe allows you to get that semantic comparison logic built in so if I for",
    "start": "1952940",
    "end": "1961039"
  },
  {
    "text": "example go and do control KD in my dialog buttons component well this test will still pass because they would still",
    "start": "1961039",
    "end": "1966799"
  },
  {
    "text": "look the two piece of two Snippets of markup will still look the same in the browser right so that's what we want we",
    "start": "1966799",
    "end": "1972080"
  },
  {
    "text": "want to be able to do insignificant changes to our components on our test without breaking our test we don't want",
    "start": "1972080",
    "end": "1977659"
  },
  {
    "text": "unstable test another thing we can do is well all of attribute doesn't matter so",
    "start": "1977659",
    "end": "1983059"
  },
  {
    "text": "contextual pass we can even go ahead and and I excel will be changing order of classes in uh in a class attribute still",
    "start": "1983059",
    "end": "1991100"
  },
  {
    "text": "the test would pass because they are still semantically the same now they're going to be more advanced",
    "start": "1991100",
    "end": "1996200"
  },
  {
    "text": "scenarios for example where you have attributes that have generated content maybe that content changes every time maybe it's",
    "start": "1996200",
    "end": "2002440"
  },
  {
    "text": "like an ID counter a good or something like that well the semantic parent being that has an ability where you can pass",
    "start": "2002440",
    "end": "2009460"
  },
  {
    "text": "it various semantic compare modifiers uh and in this case we're saying well",
    "start": "2009460",
    "end": "2015519"
  },
  {
    "text": "instead of doing a string comparison of the Eid attribute just apply this regex instead and use that to check if it",
    "start": "2015519",
    "end": "2022240"
  },
  {
    "text": "still matches so again it's about creating stable environment for your test so they don't break when they don't",
    "start": "2022240",
    "end": "2027940"
  },
  {
    "text": "have to um sometimes we also know that maybe the button belongs well not in this case but",
    "start": "2027940",
    "end": "2034059"
  },
  {
    "text": "in case we wanted to ignore the button for example because it belongs to a different component that doesn't really the component test well we can just say",
    "start": "2034059",
    "end": "2039399"
  },
  {
    "text": "that's going to appear something in the compo of again not componentry but in the in the Dom tree that is not really",
    "start": "2039399",
    "end": "2045460"
  },
  {
    "text": "relevant for this chest to just ignore that so again allows us to create stable tests that we can trust and keep around",
    "start": "2045460",
    "end": "2052060"
  },
  {
    "text": "and about that creating maintainable tests so these ideas are actually quite generally",
    "start": "2052060",
    "end": "2059440"
  },
  {
    "text": "applicable also to regular unit tests so let's have a look so I generally like to avoid duplicated code in my test classes",
    "start": "2059440",
    "end": "2066760"
  },
  {
    "text": "that also means like just chest components as we've seen today I don't necessarily mind having",
    "start": "2066760",
    "end": "2072940"
  },
  {
    "text": "duplication between test classes because in general different test classes will deal with different system on a test or",
    "start": "2072940",
    "end": "2079658"
  },
  {
    "text": "component under tests and you would want to be able to refactor those individuals and not have them break together right have dependencies between them",
    "start": "2079659",
    "end": "2086580"
  },
  {
    "text": "so another thing I like to do is move common arrange code or into Constructors",
    "start": "2086580",
    "end": "2092800"
  },
  {
    "text": "or setup methods if you're using any unit where you will have a setup method instead of using the Constructor where like we do an X unit so that we don't",
    "start": "2092800",
    "end": "2099880"
  },
  {
    "text": "have as you know duplicated stuff move that away and and package it into something if you need to create test",
    "start": "2099880",
    "end": "2108160"
  },
  {
    "text": "data or you have a more complex setup for your for your component on the test or system on the test maybe look to",
    "start": "2108160",
    "end": "2114820"
  },
  {
    "text": "creational patterns or include look through testing libraries that can help you with for example Auto fixture I use",
    "start": "2114820",
    "end": "2120760"
  },
  {
    "text": "that quite a bit or bogus is another good library for creating test data that is not really particular to the specific",
    "start": "2120760",
    "end": "2127599"
  },
  {
    "text": "test but is needed maybe to make a test uh pass through its uh whatever it's going to do",
    "start": "2127599",
    "end": "2134260"
  },
  {
    "text": "I also and this is obviously this is specific to B unit but but only verifying markup that belongs to the",
    "start": "2134260",
    "end": "2139900"
  },
  {
    "text": "component you're actually testing so that is where you might say well the rest of this Dom tree here just ignore",
    "start": "2139900",
    "end": "2145660"
  },
  {
    "text": "that bit it's not relevant here um and uh I I some of you might have",
    "start": "2145660",
    "end": "2152560"
  },
  {
    "text": "heard this like stick to one logical assertion protest and I don't mean one assert statement like uh should equal something something I mean one logical",
    "start": "2152560",
    "end": "2160060"
  },
  {
    "text": "like you have multiple searches a certain statements but that you're all center around one thing that the test is",
    "start": "2160060",
    "end": "2165460"
  },
  {
    "text": "about to verify so don't don't put too much into in each test rather duplicate",
    "start": "2165460",
    "end": "2170980"
  },
  {
    "text": "the test so you have more conciseness about what why it is failing and one thing I also really like to do is to if",
    "start": "2170980",
    "end": "2178240"
  },
  {
    "text": "I have sort of a pattern of assertions but I'm repeating from test to test but with maybe different uh input create",
    "start": "2178240",
    "end": "2184960"
  },
  {
    "text": "helper methods create a certain methods customer certain methods that that sort of encapsulate that logic and maybe give",
    "start": "2184960",
    "end": "2190540"
  },
  {
    "text": "those assertion methods names that represent the domain language you're building software in so again that will",
    "start": "2190540",
    "end": "2196599"
  },
  {
    "text": "make your test much easier to read because you will have the language you're expecting it would won't be the",
    "start": "2196599",
    "end": "2202240"
  },
  {
    "text": "generic assertion methods you're seeing now how do we apply this to testing our",
    "start": "2202240",
    "end": "2207339"
  },
  {
    "text": "data table component well the first thing we can do is create a data table test the Razer file and have that",
    "start": "2207339",
    "end": "2213339"
  },
  {
    "text": "inherit from cyst contact so test contact was the B unit thing and by having our test component it held from",
    "start": "2213339",
    "end": "2219099"
  },
  {
    "text": "that it becomes the test context which means all the methods we need to do our work will live on our razor chest class",
    "start": "2219099",
    "end": "2225880"
  },
  {
    "text": "which means they are readily available and we don't have the new upper chest context in each and every test so",
    "start": "2225880",
    "end": "2231400"
  },
  {
    "text": "the first test the first test we could create would be just like a hello world chest just test the minimal thing that",
    "start": "2231400",
    "end": "2238300"
  },
  {
    "text": "that should be that should sort of meta for the data table component and that's that is that it renders where we sort of",
    "start": "2238300",
    "end": "2244119"
  },
  {
    "text": "outer structure correctly which means a table and a header on the body right so we just render the data table component",
    "start": "2244119",
    "end": "2250000"
  },
  {
    "text": "and we don't even pass in itself we just say that the type you're going to be working with is going to be object and since object doesn't have any public",
    "start": "2250000",
    "end": "2256119"
  },
  {
    "text": "properties it's going to be quite simple right so our assertion will be well we",
    "start": "2256119",
    "end": "2261339"
  },
  {
    "text": "expect to have this tape we actually expect to have a table a t header but we're going to ignore the children because that's part of the data table",
    "start": "2261339",
    "end": "2267660"
  },
  {
    "text": "header components domain and we're going to have a tea party it's going to be empty box there's no items and we're",
    "start": "2267660",
    "end": "2273460"
  },
  {
    "text": "going to have a you know closing element for a table so that is sort of the the simple test we have just to verify that",
    "start": "2273460",
    "end": "2279220"
  },
  {
    "text": "the data table does build the right markup Force now um",
    "start": "2279220",
    "end": "2284619"
  },
  {
    "text": "the next we would want to do is to test how the data table uses the data table header component and",
    "start": "2284619",
    "end": "2291700"
  },
  {
    "text": "that it does the right thing puts it in the right place because that's you know important right so and again we have the",
    "start": "2291700",
    "end": "2298839"
  },
  {
    "text": "same render command but this time we will go in and and you will when you think about it there's sort of two trees",
    "start": "2298839",
    "end": "2305020"
  },
  {
    "text": "that are outcome of run rendering a Blazer component that is the Dom tree the mark of that produced that's a tree",
    "start": "2305020",
    "end": "2310119"
  },
  {
    "text": "in itself and then we have a component Tree on the other side that contains the hierarchy of components that has been",
    "start": "2310119",
    "end": "2315220"
  },
  {
    "text": "built and in this case we're going to go into the component tree and say find me the component the child component of",
    "start": "2315220",
    "end": "2320859"
  },
  {
    "text": "type data table header and return that to me and that allows me to now go and",
    "start": "2320859",
    "end": "2327160"
  },
  {
    "text": "say well I expect all the content of the data table header component to be the",
    "start": "2327160",
    "end": "2332680"
  },
  {
    "text": "child nodes of the T head element that the data table component has created so this",
    "start": "2332680",
    "end": "2340000"
  },
  {
    "text": "sort of ensures that the composition between the data table and the digital header is correct without tying my data",
    "start": "2340000",
    "end": "2347500"
  },
  {
    "text": "table test to whatever the data table header decides to do now",
    "start": "2347500",
    "end": "2353260"
  },
  {
    "text": "we need to do the same for the data table row and we can take a look a slightly different approach here to try",
    "start": "2353260",
    "end": "2358300"
  },
  {
    "text": "something else to have something meaningful to verify against this time we have to pass in",
    "start": "2358300",
    "end": "2365020"
  },
  {
    "text": "real data to our data table otherwise that's not going to be in a data table rows to to look at so we're going to",
    "start": "2365020",
    "end": "2370720"
  },
  {
    "text": "pass into movies in this case and we're going to render our components of the HTTP component with those and now we can",
    "start": "2370720",
    "end": "2376180"
  },
  {
    "text": "use the find components plural again to go down to the go down in the component tree and and pull out the data table row",
    "start": "2376180",
    "end": "2383280"
  },
  {
    "text": "components that was created by the data table component and once we have those we can go into those and say give me the",
    "start": "2383280",
    "end": "2391420"
  },
  {
    "text": "items the movies that you were passed when you were called being being rendered it's a bit convoluted I admit",
    "start": "2391420",
    "end": "2397720"
  },
  {
    "text": "but I yeah so the end result is that we have a list of movies that will pass to each data table Row in the same order",
    "start": "2397720",
    "end": "2404320"
  },
  {
    "text": "they were passed to them and now our assertion is well the movies we found in our rows in our component tree they",
    "start": "2404320",
    "end": "2411700"
  },
  {
    "text": "should match the original movies that we passed into the into the um into the data table uh so this is",
    "start": "2411700",
    "end": "2419380"
  },
  {
    "text": "sort of a way again to verify that the data table is using its child components correctly without really tying Us in and",
    "start": "2419380",
    "end": "2425680"
  },
  {
    "text": "and for example from a data table just look and see that we had the right amount of uh TTR elements uh and and",
    "start": "2425680",
    "end": "2433420"
  },
  {
    "text": "look at the individual concept of each of T element now that belongs in the data table road test so let's have a",
    "start": "2433420",
    "end": "2439900"
  },
  {
    "text": "look at that I'm going to skip the data table hit a test because it's going to be very much the same as what we see here so the first test would be well in",
    "start": "2439900",
    "end": "2447820"
  },
  {
    "text": "case we just cell laser to render a data table row without any data well we just expected",
    "start": "2447820",
    "end": "2454359"
  },
  {
    "text": "to do the minimal thing which is to rent out a TR and you can even argue maybe it shouldn't even do that but I guess in",
    "start": "2454359",
    "end": "2459640"
  },
  {
    "text": "this case I decided that it should now a more interesting test is where we pass a single item to it and then here we can",
    "start": "2459640",
    "end": "2466180"
  },
  {
    "text": "say well now because this is your responsibility this is your domain so this is the markup you should be",
    "start": "2466180",
    "end": "2471280"
  },
  {
    "text": "producing so if we sort of go back and take take a",
    "start": "2471280",
    "end": "2477040"
  },
  {
    "text": "step back and look what we did we actually do here with these couple of tests well because we split our data",
    "start": "2477040",
    "end": "2483280"
  },
  {
    "text": "table component into multiple sub components that we can involve and work on individually well we have now been",
    "start": "2483280",
    "end": "2488619"
  },
  {
    "text": "able to verify the component Mark of any isolation for each of the components and that means we have simpler test we also",
    "start": "2488619",
    "end": "2493960"
  },
  {
    "text": "have simpler components also we did write some tests that verify",
    "start": "2493960",
    "end": "2499960"
  },
  {
    "text": "the composition how these components are used together combined together in that",
    "start": "2499960",
    "end": "2505060"
  },
  {
    "text": "sort of nice composability that we have with a Blazer okay so",
    "start": "2505060",
    "end": "2511480"
  },
  {
    "text": "sometimes you want to do a little bit more you want to completely remove a child component so if we have a simple",
    "start": "2511480",
    "end": "2517660"
  },
  {
    "text": "example here with a foo that has a bar as a child component sometimes you want to just take that child component",
    "start": "2517660",
    "end": "2523480"
  },
  {
    "text": "completely out of the equation now why would you do that maybe if you can answer yes to this question should",
    "start": "2523480",
    "end": "2529359"
  },
  {
    "text": "changing bar break through in any way I should break a rather break food tests well probably not and that might be",
    "start": "2529359",
    "end": "2536500"
  },
  {
    "text": "reasons why you want to not have bar there then it could also be that bar is a third-party component and third-party",
    "start": "2536500",
    "end": "2542440"
  },
  {
    "text": "components shouldn't be your responsibility to test supposedly the third-party component vendor has written",
    "start": "2542440",
    "end": "2548380"
  },
  {
    "text": "there a set of Bureau tests I hope and and sort of done that due diligence and ensure that the components work as",
    "start": "2548380",
    "end": "2553720"
  },
  {
    "text": "intended and and also if they change small things maybe like prop Channel",
    "start": "2553720",
    "end": "2559480"
  },
  {
    "text": "things in there it shouldn't really break your chest because it's at the end of days you're not your responsibility",
    "start": "2559480",
    "end": "2565020"
  },
  {
    "text": "so what we can is we can substitute bar",
    "start": "2565020",
    "end": "2571060"
  },
  {
    "text": "with something else we can't remove it from the component tree because the component tree is steadily compiled at compile time right but we can substitute",
    "start": "2571060",
    "end": "2577480"
  },
  {
    "text": "with something else Blazer is rather flexible with that and it's kind of nice so let's look at the rules for",
    "start": "2577480",
    "end": "2583000"
  },
  {
    "text": "substituting one component with something else um and and the first rule is that the",
    "start": "2583000",
    "end": "2589300"
  },
  {
    "text": "substitute must be a basic component and that means at the very minimum it has to",
    "start": "2589300",
    "end": "2594579"
  },
  {
    "text": "inherit from I component which is the minimal thing that needs that sort of specifies that this is a beta component",
    "start": "2594579",
    "end": "2600099"
  },
  {
    "text": "now another thing it must have or must be it it must have the same parameters",
    "start": "2600099",
    "end": "2607180"
  },
  {
    "text": "as uh that the thing it's substituting that your original component is has and and this is a really nice uh sort of",
    "start": "2607180",
    "end": "2614560"
  },
  {
    "text": "fallback is that we can also just have the component our substitute Implement uh parameters uh parameter that has that",
    "start": "2614560",
    "end": "2623140"
  },
  {
    "text": "caption unmatched values in it the point is Blazer just needs a way to take the",
    "start": "2623140",
    "end": "2628180"
  },
  {
    "text": "parameters that passed to our original our bar component and have somewhere to put them otherwise it's going to blow up",
    "start": "2628180",
    "end": "2633640"
  },
  {
    "text": "and say hey this is there's something wrong here yeah so and that is a third rule that only really comes into play if",
    "start": "2633640",
    "end": "2640119"
  },
  {
    "text": "you have one of those ad ref keywords on your components and are referencing the component in your component under test",
    "start": "2640119",
    "end": "2647680"
  },
  {
    "text": "so in this case we're referencing bar in our full component and for that to",
    "start": "2647680",
    "end": "2653260"
  },
  {
    "text": "really work bar has to be this bar substitute has to be a bar because",
    "start": "2653260",
    "end": "2658359"
  },
  {
    "text": "otherwise Blazer cannot assign at runtime whatever substitute component you have to the variable field bar",
    "start": "2658359",
    "end": "2665800"
  },
  {
    "text": "um I don't know how many of you often produce the adref keyword I don't see",
    "start": "2665800",
    "end": "2671680"
  },
  {
    "text": "that a lot in my place I have so it tends not to be a huge problem but that is work around for this if we need that",
    "start": "2671680",
    "end": "2677079"
  },
  {
    "text": "but obviously we don't want to manually create a new substitute components for",
    "start": "2677079",
    "end": "2685300"
  },
  {
    "text": "every component we might want to replace during testing so to make this a bit easier and approachable B unit comes",
    "start": "2685300",
    "end": "2691960"
  },
  {
    "text": "with a stop component and uh a stop component is",
    "start": "2691960",
    "end": "2697300"
  },
  {
    "text": "something that looks like like this it has a signature called stop of G component and G components the component substituting and it is a Blazer",
    "start": "2697300",
    "end": "2704619"
  },
  {
    "text": "components of the rule number one shakes off there it also has one of those capture all parameters and it even makes",
    "start": "2704619",
    "end": "2709960"
  },
  {
    "text": "that available to you so if you want to assert against that you want to assert that you are stopped out component actually did receive the expected",
    "start": "2709960",
    "end": "2716380"
  },
  {
    "text": "parameters you can sort of make that composition verification that we talked about earlier and but it clearly isn't a",
    "start": "2716380",
    "end": "2725200"
  },
  {
    "text": "g component like stop is not the original so for the third rule if you're",
    "start": "2725200",
    "end": "2730420"
  },
  {
    "text": "using the address keyword we can't use the building stops but again for most cases it's not a problem okay so let's look at some code so component factories",
    "start": "2730420",
    "end": "2738339"
  },
  {
    "text": "is the properties on B units test context [Music] that be introduced to control how",
    "start": "2738339",
    "end": "2745420"
  },
  {
    "text": "components are instantiated if you don't add anything to that it's just going to be the whatever component you have in your componentry originally but in this",
    "start": "2745420",
    "end": "2751300"
  },
  {
    "text": "case we have a method called add stop that takes a generic parameter of the type of component you want to substitute out and that's just basically that's",
    "start": "2751300",
    "end": "2758319"
  },
  {
    "text": "what we need to do and now we can go ahead and say render component and now if we go and use a method called health",
    "start": "2758319",
    "end": "2764980"
  },
  {
    "text": "component which just queries the component tree and ask do you have this comported in you well if we ask for a",
    "start": "2764980",
    "end": "2770980"
  },
  {
    "text": "bar one you should get false back and if we add first stop of part well then we get through back sometimes you also might want to have a",
    "start": "2770980",
    "end": "2778119"
  },
  {
    "text": "bar print out some markup like the stop of bar rather you want that to put some",
    "start": "2778119",
    "end": "2784240"
  },
  {
    "text": "markup into the Dom tree there can be some reasons for that maybe it will make some assertions easier to write and for",
    "start": "2784240",
    "end": "2789819"
  },
  {
    "text": "that we just have a sort of a render template kind of method here where you actually the PS variable we have there",
    "start": "2789819",
    "end": "2796540"
  },
  {
    "text": "on screen it's actually the parameters when we pass the original bars you can even output some of the parameters that",
    "start": "2796540",
    "end": "2802060"
  },
  {
    "text": "were passed the original bar out into the markup if you if you like that but as you can see now now we can assert",
    "start": "2802060",
    "end": "2807099"
  },
  {
    "text": "that well the not bar markup in the H1 tag there is actually part of the the",
    "start": "2807099",
    "end": "2812859"
  },
  {
    "text": "full component another thing you might want to do is",
    "start": "2812859",
    "end": "2818800"
  },
  {
    "text": "stop out a whole set of components perhaps you want to stop out everything from the third party vendor",
    "start": "2818800",
    "end": "2824740"
  },
  {
    "text": "and and then instead of pass using the generic version of AD stop you use the non-generic version that takes the type",
    "start": "2824740",
    "end": "2830140"
  },
  {
    "text": "predicate in and you just say yes whenever you want to stop our type and know if you don't so in this case we're",
    "start": "2830140",
    "end": "2835660"
  },
  {
    "text": "saying everything every type that lives and namespace starts with third-party Library are going to be stopped out okay",
    "start": "2835660",
    "end": "2842220"
  },
  {
    "text": "and another half you've if any of you have built build react apps before but",
    "start": "2842220",
    "end": "2847480"
  },
  {
    "text": "but in react in the testing World there they have a concept of Shadow rendering and we can sort of emulate that a little",
    "start": "2847480",
    "end": "2853060"
  },
  {
    "text": "bit social rendering means just render this full component directly as it is without any of the child control rooms",
    "start": "2853060",
    "end": "2860380"
  },
  {
    "text": "no matter what they are and we can fake that this is like a poor Manchester rendering where we say well as long as",
    "start": "2860380",
    "end": "2866800"
  },
  {
    "text": "the type is not equal to whatever I'm testing right now my component it's just food in this case just stop it out so",
    "start": "2866800",
    "end": "2872260"
  },
  {
    "text": "that also works now we still have that third rule that didn't really work for us with the Stop",
    "start": "2872260",
    "end": "2877780"
  },
  {
    "text": "and and this is where mocking come in comes in so modern component is using third-party marketing libraries like end",
    "start": "2877780",
    "end": "2882819"
  },
  {
    "text": "unit or in substitute or something works surprisingly well and and it does this um and and and and and and because Marx",
    "start": "2882819",
    "end": "2890859"
  },
  {
    "text": "they inherit from The Mark component that means that the third rule checks out so if we have adref in our code and",
    "start": "2890859",
    "end": "2898540"
  },
  {
    "text": "reference in something we want to to stop out we can actually do that and and the reason why we typically have an",
    "start": "2898540",
    "end": "2904420"
  },
  {
    "text": "address to a component we want to stop out is because we want to call methods on it right that's usually the primary",
    "start": "2904420",
    "end": "2909460"
  },
  {
    "text": "reason why I use the AdWords ad with keyword in the first place so you would want to set up what happens when we call",
    "start": "2909460",
    "end": "2915819"
  },
  {
    "text": "those methods on our component and that's what we can do through marking now the the reason why it works so well",
    "start": "2915819",
    "end": "2921760"
  },
  {
    "text": "is because most laser components inherit from component base and component base has all those nice life cycle methods",
    "start": "2921760",
    "end": "2928180"
  },
  {
    "text": "like on initialized on after render and they are all virtual so when I'm marking framework she's virtual method it just",
    "start": "2928180",
    "end": "2934240"
  },
  {
    "text": "says I'll take over that and basically unless you do tell me to do something with them they're going to do nothing so",
    "start": "2934240",
    "end": "2940240"
  },
  {
    "text": "that means the common component doesn't do anything really because it's been neutered by by the by the login",
    "start": "2940240",
    "end": "2945339"
  },
  {
    "text": "framework that is some exceptions though and that is it's um it's if you have a Constructor in there it can't prevent it",
    "start": "2945339",
    "end": "2951579"
  },
  {
    "text": "for construction for running it cannot prevent a dispose method from running on this situation of course and if you have",
    "start": "2951579",
    "end": "2956619"
  },
  {
    "text": "field initializers or property initializers they're also going to run but so we're sort of into Corner cases here and for most cases probably going",
    "start": "2956619",
    "end": "2963280"
  },
  {
    "text": "to work quite fine now we're using mock instances is not allowed so if you have",
    "start": "2963280",
    "end": "2968800"
  },
  {
    "text": "multiple components you want to Mark like multiple bars in the same view you want to Mark Mark you have to create a",
    "start": "2968800",
    "end": "2974680"
  },
  {
    "text": "mark for each of them so Blazer doesn't allow the same instance of uh component to exist multiple places in the",
    "start": "2974680",
    "end": "2980440"
  },
  {
    "text": "component that's basically what that rule means okay so let's look at an example so I'm going to use moq here uh",
    "start": "2980440",
    "end": "2986619"
  },
  {
    "text": "you know I'm not really a mock moq expert but uh I think this is I I gather",
    "start": "2986619",
    "end": "2991900"
  },
  {
    "text": "that using that because that seems to be the most used marketing framework in the internet community so I thought that was",
    "start": "2991900",
    "end": "2997119"
  },
  {
    "text": "a better chance for everybody to understand what's going on here so basically we're just creating a",
    "start": "2997119",
    "end": "3002220"
  },
  {
    "text": "Mark of the bar component and and we are adding that to our component factories by using the add method that takes a",
    "start": "3002220",
    "end": "3008160"
  },
  {
    "text": "generic program which again of the component we want to substitute out and we pass in the instance of the",
    "start": "3008160",
    "end": "3013619"
  },
  {
    "text": "substitute in this case the bar Mark object now if you go ahead and render the food component well we can see that",
    "start": "3013619",
    "end": "3020520"
  },
  {
    "text": "if we go and ask find component we use the find component again to go into the componentry and find a bar component we do actually get one out but when we go a",
    "start": "3020520",
    "end": "3027960"
  },
  {
    "text": "bit deeper and look at the instance of that component we will see that it is actually the same as the bar Mark object so we did actually substitute out with",
    "start": "3027960",
    "end": "3034440"
  },
  {
    "text": "the marked object that's pretty cool now if we do have multiple bars in a foo",
    "start": "3034440",
    "end": "3039599"
  },
  {
    "text": "well what we can do is uh well I find something in the mock Library called Mark repository that allows us to set up",
    "start": "3039599",
    "end": "3045000"
  },
  {
    "text": "common you know rules for a mock and then instead of using just passing in",
    "start": "3045000",
    "end": "3050220"
  },
  {
    "text": "the concrete mock replacement we can use the add method here that takes uh a a",
    "start": "3050220",
    "end": "3055980"
  },
  {
    "text": "factory that that is called whenever a B unit sees a bar in in the component tree",
    "start": "3055980",
    "end": "3061800"
  },
  {
    "text": "it it will um it will call this method and say give me a you know replacement",
    "start": "3061800",
    "end": "3066960"
  },
  {
    "text": "for bar a real bar for that matter doesn't matter and it will do that and now if we go in and use the fine",
    "start": "3066960",
    "end": "3072960"
  },
  {
    "text": "components to find all the bars components in the components we well here we have the outputs and and we can",
    "start": "3072960",
    "end": "3078420"
  },
  {
    "text": "verify again that using the mock.get method to verify that the instances of the first bar and the second bar is",
    "start": "3078420",
    "end": "3085440"
  },
  {
    "text": "actually marked components Okay so that was a quite a bit we went through",
    "start": "3085440",
    "end": "3093059"
  },
  {
    "text": "so let's just uh quickly sum up and and what did we sort of get through today so I think it's important to to say that",
    "start": "3093059",
    "end": "3100559"
  },
  {
    "text": "that like the techniques here it's a techniques you're probably already known and aware of from",
    "start": "3100559",
    "end": "3107339"
  },
  {
    "text": "from your regular C sharp code or from whatever code you brought right or write your you know write in your day job uh",
    "start": "3107339",
    "end": "3113819"
  },
  {
    "text": "but yeah we talked about how we can take those concepts of of cohesion uh",
    "start": "3113819",
    "end": "3119760"
  },
  {
    "text": "abstraction levels and that thing about doing one thing well and apply those to basic components and don't forget them",
    "start": "3119760",
    "end": "3126000"
  },
  {
    "text": "just because it's easy to add more markup in there I gave you an intro to B unit and sort",
    "start": "3126000",
    "end": "3131280"
  },
  {
    "text": "of told you what it is and how you can use it and now we've went through a bunch of examples of how to actually write tests so that they become",
    "start": "3131280",
    "end": "3137520"
  },
  {
    "text": "maintainable and and how to split things up and make sure you test for the right things in the right types and and",
    "start": "3137520",
    "end": "3143520"
  },
  {
    "text": "obviously yeah some marking here at the end that always is a fun tool to have in your toolbit so",
    "start": "3143520",
    "end": "3150660"
  },
  {
    "text": "um I'm going to say thank you very much for your attention it's been fun here and uh you have my contact information",
    "start": "3150660",
    "end": "3156660"
  },
  {
    "text": "here if you have any questions or you can come up afterwards and say hi and ask your questions uh I want to give a quick shout out to these two companies",
    "start": "3156660",
    "end": "3164040"
  },
  {
    "text": "progress and string Fusion they have been sponsoring my work with B unit for quite a while and I want to encourage",
    "start": "3164040",
    "end": "3170040"
  },
  {
    "text": "you to go home to your company and if you are in a position where you can",
    "start": "3170040",
    "end": "3175440"
  },
  {
    "text": "maybe help out some of the open source project you might be using that are critical maybe to your projects to your",
    "start": "3175440",
    "end": "3180839"
  },
  {
    "text": "infrastructure see if you can go and support them as an open source developer myself I can say that it makes a big",
    "start": "3180839",
    "end": "3186300"
  },
  {
    "text": "difference it might not be that you are actually paying them you know with the full-time job it might just be you know",
    "start": "3186300",
    "end": "3191760"
  },
  {
    "text": "Candy money or extra coffee or something but just the encouragement of getting a little bit of support from the community makes a big difference to open source",
    "start": "3191760",
    "end": "3197940"
  },
  {
    "text": "development so I highly encourage you to to see if there's any way you can get a little bit back as well so thank you very much and have a safe trip home",
    "start": "3197940",
    "end": "3205650"
  },
  {
    "text": "[Applause]",
    "start": "3205650",
    "end": "3212459"
  }
]