[
  {
    "text": "so hello everyone thank you all for coming so welcome to functional C++ for fun and",
    "start": "2360",
    "end": "9270"
  },
  {
    "text": "profit I think that there's at least free talk to this conference with the for fun and profit so at least one of",
    "start": "9270",
    "end": "14940"
  },
  {
    "text": "them going on in another room right now in my defense I did choose this title for a reason I'll come on to that in a",
    "start": "14940",
    "end": "20940"
  },
  {
    "text": "second but just introduce myself first of all I'm bill Nash some of you may",
    "start": "20940",
    "end": "26039"
  },
  {
    "text": "know me as the author of the catch test framework as on this mug here you can",
    "start": "26039",
    "end": "31500"
  },
  {
    "text": "have a look at others but more recently I've also got a job at JetBrains",
    "start": "31500",
    "end": "37530"
  },
  {
    "text": "some developer advocate for their C++ tools it's a sea lion cross-platform IDE",
    "start": "37530",
    "end": "43350"
  },
  {
    "text": "to C++ app closed for Mac and iOS development and resharper C++ like",
    "start": "43350",
    "end": "48750"
  },
  {
    "text": "individual studio so I'm not gonna be talking any more about those today so what this is about but we do have a",
    "start": "48750",
    "end": "55710"
  },
  {
    "text": "booth down the exhibition also come see is there you haven't done all done so already so we're going to be talking",
    "start": "55710",
    "end": "61500"
  },
  {
    "text": "about functional C++ as we said and about that title the for fun and profit",
    "start": "61500",
    "end": "67109"
  },
  {
    "text": "bit the reason I put that in there is because a lot of material on functional",
    "start": "67109",
    "end": "72840"
  },
  {
    "text": "programming even functional programming in C++ it's becoming increasingly popular these days tends to have a much",
    "start": "72840",
    "end": "79859"
  },
  {
    "text": "more academic slant to it you know interesting stuff that says you if you like functional programming or curious",
    "start": "79859",
    "end": "86130"
  },
  {
    "text": "about this as interesting to read up on but not necessarily that practical for",
    "start": "86130",
    "end": "91139"
  },
  {
    "text": "real-world code but everything I'm going to be talking about today is based on my real-world experience in a real codebase",
    "start": "91139",
    "end": "98159"
  },
  {
    "text": "in my previous job mostly which was at a bank on a coin library so you know quite",
    "start": "98159",
    "end": "103259"
  },
  {
    "text": "a large scale legacy seed LastPass codebase they've been able to put these idioms to to very good use in tool I'll",
    "start": "103259",
    "end": "109979"
  },
  {
    "text": "touch a little bit more on that as we go through but this one had went to size that real-world quality to it so we'll",
    "start": "109979",
    "end": "116639"
  },
  {
    "text": "also go off in a check off in a slightly different direction to some other talks that you may have seen or other articles",
    "start": "116639",
    "end": "122869"
  },
  {
    "text": "or will draw on material from other talks and articles and right at the end",
    "start": "122869",
    "end": "128599"
  },
  {
    "text": "I'll post some references to to some of those as well so let's get started and",
    "start": "128599",
    "end": "134040"
  },
  {
    "text": "actually want to start just by defining what functional programming actually is because it may",
    "start": "134040",
    "end": "140159"
  },
  {
    "text": "not be exactly what you think it is so before I do that just take a moment to think to yourself what you think the",
    "start": "140159",
    "end": "146909"
  },
  {
    "text": "functional programming actually means what's the core concept that it all",
    "start": "146909",
    "end": "152909"
  },
  {
    "text": "stems from you may be thinking of something like first-order though the first class functions or",
    "start": "152909",
    "end": "159239"
  },
  {
    "text": "higher-order functions the name functional programming implies that or maybe immutability purity referential",
    "start": "159239",
    "end": "167189"
  },
  {
    "text": "transparency maybe even monads all these things are important terms to be sure in",
    "start": "167189",
    "end": "173609"
  },
  {
    "text": "functional programming you could drop it like a tag cloud of functional programming concepts they'd all be there right right close to the center but not",
    "start": "173609",
    "end": "180540"
  },
  {
    "text": "the silly right at the center that's what I want to get up and I want to start there and see where they go from",
    "start": "180540",
    "end": "185970"
  },
  {
    "text": "it and what I'm going to do is go to pull up the Haskell wiki which you know",
    "start": "185970",
    "end": "191489"
  },
  {
    "text": "it's a reasonable authority on these matters and it defines functional programming like this says that",
    "start": "191489",
    "end": "197189"
  },
  {
    "text": "functional programming I'll highlight it actually functional programming is a style of programming which models",
    "start": "197189",
    "end": "203459"
  },
  {
    "text": "computations as the evaluation of expressions that's the interesting bit",
    "start": "203459",
    "end": "210599"
  },
  {
    "text": "and be further down the same page says in functional programming programs are",
    "start": "210599",
    "end": "215819"
  },
  {
    "text": "executed again by evaluating expressions in contrast with imperative programming",
    "start": "215819",
    "end": "222840"
  },
  {
    "text": "where programs are composed of statements which change global States",
    "start": "222840",
    "end": "229010"
  },
  {
    "text": "when executed functional programming typically avoids using mutable state",
    "start": "229010",
    "end": "235549"
  },
  {
    "text": "there's a few interesting things to unpack in just a few shall very simple sentences there we haven't gotten into",
    "start": "235549",
    "end": "241650"
  },
  {
    "text": "any of academic stuff we're just pitting evaluation of expressions against",
    "start": "241650",
    "end": "246840"
  },
  {
    "text": "statements and we know that C++ has statements and we're going to cover that in just a moment why that doesn't",
    "start": "246840",
    "end": "253799"
  },
  {
    "text": "necessarily stop us from writing functional code but what does this really mean what does it mean to",
    "start": "253799",
    "end": "260159"
  },
  {
    "text": "evaluate expressions but notice also that it ties it in with changing global",
    "start": "260159",
    "end": "265260"
  },
  {
    "text": "States and functional programming we offer say it's free from side effects when it",
    "start": "265260",
    "end": "270990"
  },
  {
    "text": "when it's pure and side effects in mutable states tend to go together we're",
    "start": "270990",
    "end": "276240"
  },
  {
    "text": "going to unpack that a bit more as well but doesn't also say at the end at functional programming typically the",
    "start": "276240",
    "end": "283110"
  },
  {
    "text": "voids using mutable state doesn't say they entirely avoid fact that will be impossible over different levels of",
    "start": "283110",
    "end": "290550"
  },
  {
    "text": "abstraction is going to be running on a CPU that's there's going to be mutating so to some level but also just in terms",
    "start": "290550",
    "end": "296340"
  },
  {
    "text": "of getting anything done cure a functional program that doesn't mutate",
    "start": "296340",
    "end": "301380"
  },
  {
    "text": "any state at the level is operating at would just make your machine run warm I",
    "start": "301380",
    "end": "306450"
  },
  {
    "text": "see any effect it would really have so we need needs ability in order to get stuff done",
    "start": "306450",
    "end": "311700"
  },
  {
    "text": "it is useful functional programming is more about controlling where that occurs",
    "start": "311700",
    "end": "317400"
  },
  {
    "text": "and making sure that's explicit and that's something we're going to totally bring out during the course of material",
    "start": "317400",
    "end": "323210"
  },
  {
    "text": "so I want to drill into this idea of expressions a bit more in a way reframe",
    "start": "323210",
    "end": "329670"
  },
  {
    "text": "the idea of functional programming as expression oriented programming I will plug at this thread and see where",
    "start": "329670",
    "end": "335220"
  },
  {
    "text": "it takes us so let's have a look at some typical C++ code that we've also",
    "start": "335220",
    "end": "340620"
  },
  {
    "text": "statement so here we've got you know a point of this screen because I can't point it all three at once here we've",
    "start": "340620",
    "end": "347220"
  },
  {
    "text": "got a variable there Carlos obviously Nina of some sort and what we're trying",
    "start": "347220",
    "end": "352800"
  },
  {
    "text": "to do here is give it an initial value dependent on some other condition I'm",
    "start": "352800",
    "end": "358890"
  },
  {
    "text": "using a statement to do that here so we're calling a function does really matter what it is or what the condition",
    "start": "358890",
    "end": "365430"
  },
  {
    "text": "is just that in order to now give our variable a value depend on that",
    "start": "365430",
    "end": "371790"
  },
  {
    "text": "condition we're doing it within the statement and that statement is acting like a sort of a firewall for values if",
    "start": "371790",
    "end": "377400"
  },
  {
    "text": "you like the only way we can really get the value out of the statement is by using an assignment here so we're",
    "start": "377400",
    "end": "384419"
  },
  {
    "text": "mutating your values and therefore it's a side-effect it's pretty much the only thing we can do within a statement and",
    "start": "384419",
    "end": "390840"
  },
  {
    "text": "that's why right right at the beginning we said that statements imply mutability",
    "start": "390840",
    "end": "395940"
  },
  {
    "text": "and so the antithesis of functional programming so this is not very functional at all and as a result it has",
    "start": "395940",
    "end": "402000"
  },
  {
    "text": "a number of problems in such a small simple piece of code as well as that assignment we've got mutability there there's a",
    "start": "402000",
    "end": "409199"
  },
  {
    "text": "result our variable has to be non Const we'll come back to that in a second but also has to start off with there's",
    "start": "409199",
    "end": "417180"
  },
  {
    "text": "an uninitialized variable because recovery to give it a meaningful value that's our we could add one we could",
    "start": "417180",
    "end": "423090"
  },
  {
    "text": "give it some sort Sentinel value perhaps or we could give it say one of these values and then only set it so the other",
    "start": "423090",
    "end": "430110"
  },
  {
    "text": "value given the condition that would be okay but it doesn't really express what",
    "start": "430110",
    "end": "435389"
  },
  {
    "text": "we want to do which is to just say the initial value is one of these two values depend on this condition that's really",
    "start": "435389",
    "end": "440819"
  },
  {
    "text": "what we want to say should be simple the statement is making that hard in fact impossible and going back to the non",
    "start": "440819",
    "end": "448349"
  },
  {
    "text": "constable the real problem now is actually much trickier to see because",
    "start": "448349",
    "end": "453509"
  },
  {
    "text": "we're so used to non-comp in the default in c++ and most mainstream languages in",
    "start": "453509",
    "end": "459449"
  },
  {
    "text": "fact but consider what happens in the rest of the globe when we don't know how much code is beyond this but in the rest",
    "start": "459449",
    "end": "465599"
  },
  {
    "text": "of that code in order to reason about what the value of color might be we have to consider every line of code that it",
    "start": "465599",
    "end": "471719"
  },
  {
    "text": "could possibly go through if we really want to to read about it we don't do that typically what we do is we sort of",
    "start": "471719",
    "end": "478740"
  },
  {
    "text": "you know hope based on conventional or expectation but it's not going to change somewhere else and then we'll end up",
    "start": "478740",
    "end": "485550"
  },
  {
    "text": "debugging after the fact of that assumption doesn't hold true that's our typical approach to this but it doesn't",
    "start": "485550",
    "end": "491250"
  },
  {
    "text": "have to be that way if we can start off with using immutable values not just",
    "start": "491250",
    "end": "497310"
  },
  {
    "text": "Kant's but actually immutable then the whole class of complexity that we've try",
    "start": "497310",
    "end": "502380"
  },
  {
    "text": "to pretend this in there that actually is it just goes away that's incredibly freeing and you can see now that this",
    "start": "502380",
    "end": "509130"
  },
  {
    "text": "statement is stopping us from you being able to do that so what can we do about you just for a moment let's imagine that",
    "start": "509130",
    "end": "517010"
  },
  {
    "text": "c++ was an expression oriented language a true functional programming language then it would allow us to do something a",
    "start": "517010",
    "end": "523890"
  },
  {
    "text": "bit like this so now rewritten it with this veritable version of C++ so now if",
    "start": "523890",
    "end": "530250"
  },
  {
    "text": "is an expression rather than a statement so now rather than within the statement",
    "start": "530250",
    "end": "535680"
  },
  {
    "text": "having to rely on a side effects it does evaluates to a value the value of it where she wanted so the whole expression",
    "start": "535680",
    "end": "542760"
  },
  {
    "text": "the whole list expression evaluates to a single value we can use that value now to initialize our variable as we wanted",
    "start": "542760",
    "end": "549540"
  },
  {
    "text": "give it that value right at the start so we can make it Const as we wanted and as",
    "start": "549540",
    "end": "554670"
  },
  {
    "text": "a bonus we can now use type inference as well we didn't even ask for that we got that for free so that's great so that's",
    "start": "554670",
    "end": "562320"
  },
  {
    "text": "exactly what we would want and that's exactly what most full functional languages I know of gives you and once",
    "start": "562320",
    "end": "569400"
  },
  {
    "text": "you start writing code like this it's really hard to go back Factory is an",
    "start": "569400",
    "end": "574980"
  },
  {
    "text": "example from one of my favorite functional programming languages f-sharp apart from some little syntactic",
    "start": "574980",
    "end": "580980"
  },
  {
    "text": "differences that's basically exactly what we were trying to write in F sharp that's exactly how you write it well we",
    "start": "580980",
    "end": "587820"
  },
  {
    "text": "can't do that in C++ now I have this superpower which is I can read minds and",
    "start": "587820",
    "end": "594540"
  },
  {
    "text": "I know exactly what you're thinking you're thinking actually you can do this in C++ you can use the ternary operator",
    "start": "594540",
    "end": "601860"
  },
  {
    "text": "and yes you can do that here we can use a ternary operator to achieve all of",
    "start": "601860",
    "end": "608880"
  },
  {
    "text": "those benefits that we just talked about so what's the problem well first of all",
    "start": "608880",
    "end": "614220"
  },
  {
    "text": "a lot of people don't like the ternary operator or maybe you've got a style guide that's ability from using them or",
    "start": "614220",
    "end": "619470"
  },
  {
    "text": "or at least advises you not to and there are some downsides to them in terms of",
    "start": "619470",
    "end": "625050"
  },
  {
    "text": "things like readability can very easily get formatted correctly or you try to use too much nesting becomes very",
    "start": "625050",
    "end": "631920"
  },
  {
    "text": "unreadable you have to be very careful of operator president ii should nurture",
    "start": "631920",
    "end": "637080"
  },
  {
    "text": "if you up quite easily but if you're careful if you keep it simple this sort of code I think is absolutely fine in a",
    "start": "637080",
    "end": "643110"
  },
  {
    "text": "good use and I tend to use this sort of code all the time where I can so that's",
    "start": "643110",
    "end": "648750"
  },
  {
    "text": "not actually the problem the problem is that it just doesn't scale right fine to",
    "start": "648750",
    "end": "654390"
  },
  {
    "text": "this simple case but or what if you got little more than one condition so you know here I'm using a switch",
    "start": "654390",
    "end": "660690"
  },
  {
    "text": "statement with three cases we don't have some you know hard coded way of doing",
    "start": "660690",
    "end": "667500"
  },
  {
    "text": "things like the ternary operator so what can we do here we got back all those original problems again what can",
    "start": "667500",
    "end": "674610"
  },
  {
    "text": "we do about it well I said earlier there was no way to get the value out of the",
    "start": "674610",
    "end": "680640"
  },
  {
    "text": "statement without a side effect and actually I lied that there is one way",
    "start": "680640",
    "end": "685980"
  },
  {
    "text": "and it's ironic lis using another statement the return statement",
    "start": "685980",
    "end": "692540"
  },
  {
    "text": "see if shift that switch statement into a lambda expression we can now return",
    "start": "692540",
    "end": "698340"
  },
  {
    "text": "out of it so we will capture the variable coming",
    "start": "698340",
    "end": "703980"
  },
  {
    "text": "in do our switches normal return out of it and you clear the bottom and pointing to the screen again we're immediately",
    "start": "703980",
    "end": "709620"
  },
  {
    "text": "invoking that lambda expression in some other communities as actually a name to their CD is called be immediately",
    "start": "709620",
    "end": "716670"
  },
  {
    "text": "invoked lambda expression or immediately invoked function expression I think that's first became popular in JavaScript so I remember rightly do it",
    "start": "716670",
    "end": "725610"
  },
  {
    "text": "C++ as well and that works actually that gives us all of the benefits that we",
    "start": "725610",
    "end": "732210"
  },
  {
    "text": "were looking at earlier with the expression oriented version this is a way of psyching expression int",
    "start": "732210",
    "end": "738030"
  },
  {
    "text": "programming in C++ so again what's the problem well the first thing you might",
    "start": "738030",
    "end": "743790"
  },
  {
    "text": "think is it's a bit of a heavyweight solution for a simple problem now bringing Landers in but we didn't",
    "start": "743790",
    "end": "750540"
  },
  {
    "text": "actually need them well this is actually less code than the previous imperative",
    "start": "750540",
    "end": "756600"
  },
  {
    "text": "example mostly because in this case because there's a switch table to get to",
    "start": "756600",
    "end": "761790"
  },
  {
    "text": "the break keywords but the point is it is actually less code we don't have to worry about it being more typing maybe",
    "start": "761790",
    "end": "769740"
  },
  {
    "text": "if you did that's not necessarily a bad thing so the next thing might think of these",
    "start": "769740",
    "end": "775560"
  },
  {
    "text": "for what about performance we've now got this function call overhead we've got things being returned out",
    "start": "775560",
    "end": "781440"
  },
  {
    "text": "their functions and surely there's going to be a performance here but you",
    "start": "781440",
    "end": "786690"
  },
  {
    "text": "probably also expect any decent compiler to optimize that away and in fact I did check with visual C++ and GCC check the",
    "start": "786690",
    "end": "795900"
  },
  {
    "text": "disassemblies projects on on god bolt against a number of different versions",
    "start": "795900",
    "end": "802050"
  },
  {
    "text": "of GCC and clang and all of them gave identical code to the imperative version for this",
    "start": "802050",
    "end": "807120"
  },
  {
    "text": "particular example since the last time I did this talk the month ago now I made",
    "start": "807120",
    "end": "814380"
  },
  {
    "text": "that same statement someone came to me and they said oh but I tried this ever example and it could produce more code",
    "start": "814380",
    "end": "819779"
  },
  {
    "text": "so it's not guaranteed and if that performance really is critical then then you may need to still profile or be",
    "start": "819779",
    "end": "826470"
  },
  {
    "text": "careful but as a default using this approach shouldn't give you any",
    "start": "826470",
    "end": "832310"
  },
  {
    "text": "significant issues and in fact again this is a simple case just involving",
    "start": "832310",
    "end": "839160"
  },
  {
    "text": "basically integers if the state variable here was actually more complex this may",
    "start": "839160",
    "end": "845250"
  },
  {
    "text": "actually be more performant because you're given the optimizer more scope to to optimize things you're going to",
    "start": "845250",
    "end": "850350"
  },
  {
    "text": "return by the optimizations for example that can come into play so you may actually get a performance improvement",
    "start": "850350",
    "end": "856230"
  },
  {
    "text": "because of this because the things that make code easier to reason about to humans",
    "start": "856230",
    "end": "861380"
  },
  {
    "text": "also make it easier to reason about to the compiler the optimizer so the more",
    "start": "861380",
    "end": "868380"
  },
  {
    "text": "declarative will make the code the more spoke there is for that sort of optimization so that's another thing to",
    "start": "868380",
    "end": "873720"
  },
  {
    "text": "bear in mind functional programming in general is often issued because we're",
    "start": "873720",
    "end": "879420"
  },
  {
    "text": "we're worried about performance penalties but actually the opposite can be true again always measure because",
    "start": "879420",
    "end": "885750"
  },
  {
    "text": "it's not always true so that's if statements and switch statements loops",
    "start": "885750",
    "end": "892890"
  },
  {
    "text": "are also statements in C++ so what do we do about those we've got much the same",
    "start": "892890",
    "end": "898950"
  },
  {
    "text": "problems again the statement accident threw a value firewall we could use the",
    "start": "898950",
    "end": "905279"
  },
  {
    "text": "same sort of techniques but actually the real problem with loops is we don't really want to be writing low-level route loops in the first place we have a",
    "start": "905279",
    "end": "912779"
  },
  {
    "text": "number of facilities in the standard library for raising the level of abstraction of our loops which allow us",
    "start": "912779",
    "end": "918480"
  },
  {
    "text": "to write things in a more functional way I wouldn't necessarily use for each these days if you are reaching for that",
    "start": "918480",
    "end": "925649"
  },
  {
    "text": "there may be disarrange base for loop is what you want what you really want to be reaching for were the more specific",
    "start": "925649",
    "end": "931790"
  },
  {
    "text": "algorithms transform and accumulate here these are all examples of what we call",
    "start": "931790",
    "end": "939110"
  },
  {
    "text": "higher-order functions so they're first slightly academic word and it just means any function that takes some sort of",
    "start": "939110",
    "end": "946670"
  },
  {
    "text": "callable object like a function and/or returns a call of an object that",
    "start": "946670",
    "end": "952130"
  },
  {
    "text": "therefore Leeming so these all qualify and in fact this was I thought the complete list from the standard again",
    "start": "952130",
    "end": "957950"
  },
  {
    "text": "after Mike the last version is talk someone pointed out the worst law that's not important the important thing is",
    "start": "957950",
    "end": "963260"
  },
  {
    "text": "I've highlighted the ones at the top for a reason standard transform copyist and",
    "start": "963260",
    "end": "968390"
  },
  {
    "text": "accumulate loosely map on to the functional concepts of map filter and",
    "start": "968390",
    "end": "973580"
  },
  {
    "text": "reduce in by a third of technically accumulate debatable villus reduce or",
    "start": "973580",
    "end": "980900"
  },
  {
    "text": "more accurately less fold but it's in the ballpark these are roughly",
    "start": "980900",
    "end": "987920"
  },
  {
    "text": "corresponding functions so they're very important functions in the functional",
    "start": "987920",
    "end": "993020"
  },
  {
    "text": "programming world unfortunately the way the standard library is implemented the SQL in particular they don't quite work",
    "start": "993020",
    "end": "1000190"
  },
  {
    "text": "the way you would want to use in a proper functionally function functional programming style we'll come back to",
    "start": "1000190",
    "end": "1007630"
  },
  {
    "text": "that a bit later what we can do about that but for now release the subject of",
    "start": "1007630",
    "end": "1013750"
  },
  {
    "text": "loops I'm going to move on to another section and I'm going to now sort of build up a bit on this idea of trying to",
    "start": "1013750",
    "end": "1021430"
  },
  {
    "text": "maintain immutable types we looked at it to single values now when I look sort of",
    "start": "1021430",
    "end": "1027880"
  },
  {
    "text": "more aggregate values and calling this section the Builder pattern you think of it more like a sort of extended",
    "start": "1027880",
    "end": "1034270"
  },
  {
    "text": "constructor that's where the word build is coming from sort of some similarity",
    "start": "1034270",
    "end": "1040510"
  },
  {
    "text": "with the factory method it's not exactly the same thing either so where this all",
    "start": "1040510",
    "end": "1046390"
  },
  {
    "text": "starts is if we want to build immutable types in C++ we can do it but it's bit",
    "start": "1046390",
    "end": "1053860"
  },
  {
    "text": "noisy so we're going to sprinkle everything with Const because console is not the default console is not",
    "start": "1053860",
    "end": "1060070"
  },
  {
    "text": "transitive so we need to put it on things we've pointing to as well and those objects themselves and they need",
    "start": "1060070",
    "end": "1065290"
  },
  {
    "text": "to be mutable because if they have noncoms well you know the drill it's a pain but we can do this so we go",
    "start": "1065290",
    "end": "1072840"
  },
  {
    "text": "to the trouble to put in words comes from and now we find well we can't",
    "start": "1072840",
    "end": "1078539"
  },
  {
    "text": "really write a a default constructor most of the time so in fact I've deleted it here just to be clear that we're not",
    "start": "1078539",
    "end": "1083610"
  },
  {
    "text": "even trying because we're going to always have to construct one of these in fully valid state because we can't you take it after",
    "start": "1083610",
    "end": "1090870"
  },
  {
    "text": "the tax obviously you'll notice that there's there's other methods on here",
    "start": "1090870",
    "end": "1096000"
  },
  {
    "text": "either if you think of this is like a typical domain type so I chose an employee here",
    "start": "1096000",
    "end": "1102480"
  },
  {
    "text": "to try and represent that idea you wouldn't use it for through all types",
    "start": "1102480",
    "end": "1107990"
  },
  {
    "text": "but in this case I think it's it's a reasonable approach the reason we don't",
    "start": "1107990",
    "end": "1113130"
  },
  {
    "text": "have any additional methods here is a lot of methods we might add to an object for all to do with encapsulating the",
    "start": "1113130",
    "end": "1118740"
  },
  {
    "text": "changing of state and if you can't change that state then you don't need those methods to maintain the invariance",
    "start": "1118740",
    "end": "1126120"
  },
  {
    "text": "so there's certainly no setters they wouldn't make sense though getters",
    "start": "1126120",
    "end": "1131789"
  },
  {
    "text": "because well this is the collection of values we can just make them all public",
    "start": "1131789",
    "end": "1137720"
  },
  {
    "text": "that's always the right approach but more often than not it is once once you",
    "start": "1137720",
    "end": "1143400"
  },
  {
    "text": "sort of free of mind of no years of zero baggage so with any getters and setters",
    "start": "1143400",
    "end": "1150240"
  },
  {
    "text": "we don't need any other mutable objects method sorry but there may be some other",
    "start": "1150240",
    "end": "1155429"
  },
  {
    "text": "methods you need better depends on your types but very often didn't need any so",
    "start": "1155429",
    "end": "1160919"
  },
  {
    "text": "we get these simple Delaine types it just expressed the data we're moving back towards this time where we separate",
    "start": "1160919",
    "end": "1167820"
  },
  {
    "text": "the data from the behavior opposite direction of our own so that's where",
    "start": "1167820",
    "end": "1173159"
  },
  {
    "text": "we're starting from now to create one of these well I haven't added the constructor because now we can just use member wise in is",
    "start": "1173159",
    "end": "1179640"
  },
  {
    "text": "realization most new feature going C++ 11 allows us to dis initialize each",
    "start": "1179640",
    "end": "1185000"
  },
  {
    "text": "field is this there was a constructor there for us so that's great we can do that we've constructed it in the fully valid state",
    "start": "1185000",
    "end": "1191669"
  },
  {
    "text": "and often times us as far as we need to go but in the real world it's never",
    "start": "1191669",
    "end": "1197940"
  },
  {
    "text": "quite so simple then a typical large complex code base clickity thinking of the type of",
    "start": "1197940",
    "end": "1203190"
  },
  {
    "text": "codebase I was working on in the bank you'll get all these dependencies between objects they'll try to represent",
    "start": "1203190",
    "end": "1208680"
  },
  {
    "text": "me here but with this person and address object we've got to get them from somewhere they've also got to be built",
    "start": "1208680",
    "end": "1213960"
  },
  {
    "text": "as immutable types we're going to go through this process for all of them though we can't do all that manually but",
    "start": "1213960",
    "end": "1219750"
  },
  {
    "text": "we start then sort of thinking back about what we're losing because if we made employee a mutable type we could",
    "start": "1219750",
    "end": "1227790"
  },
  {
    "text": "progressively build these objects up as we get these objects in so maintaining",
    "start": "1227790",
    "end": "1234870"
  },
  {
    "text": "immutability wind that we've code like this where we've got to build up all of the fields ahead of time so that we can",
    "start": "1234870",
    "end": "1241050"
  },
  {
    "text": "then populate our mutable objects so effectively replicating the structure of our object of our class outside in local",
    "start": "1241050",
    "end": "1249000"
  },
  {
    "text": "variables like we're doing in all that work twice and we're going to do that every time we construct one of these so",
    "start": "1249000",
    "end": "1255630"
  },
  {
    "text": "it does start to feel like we're you know working against the grain a bit so",
    "start": "1255630",
    "end": "1261570"
  },
  {
    "text": "what can we do about that well just noted that we're effectively replicating",
    "start": "1261570",
    "end": "1267000"
  },
  {
    "text": "that structure again anyway so let's just formalize that a bit and put that",
    "start": "1267000",
    "end": "1272460"
  },
  {
    "text": "into another class so I call this one employee builder that's why called the",
    "start": "1272460",
    "end": "1278880"
  },
  {
    "text": "whole pattern to build a pattern you can see we've got basically the same fields again this time they're mutable but only",
    "start": "1278880",
    "end": "1285030"
  },
  {
    "text": "the first level so the the personal address they're still they're still Const because we've got to get those",
    "start": "1285030",
    "end": "1291030"
  },
  {
    "text": "from somewhere else still but now we can actually progressively build this objects up I've also put this build",
    "start": "1291030",
    "end": "1298500"
  },
  {
    "text": "method on there so that's not essential to this pattern I just found it really useful because it just gives you one",
    "start": "1298500",
    "end": "1303810"
  },
  {
    "text": "place that packages everything up and produces the correct type you could put any validation in there as well and that",
    "start": "1303810",
    "end": "1309960"
  },
  {
    "text": "saves you having to write constructors and your your built object if you want to keep them pure and clean again under",
    "start": "1309960",
    "end": "1317310"
  },
  {
    "text": "that's really essential so go back to the code that built it up now we still",
    "start": "1317310",
    "end": "1322350"
  },
  {
    "text": "have a little messy stuff but you can see now we're declaring our employee builder at the top we're progressively",
    "start": "1322350",
    "end": "1328050"
  },
  {
    "text": "populating that as we get values you'll notice we've got dependencies between values here so they need to find the",
    "start": "1328050",
    "end": "1334050"
  },
  {
    "text": "person before we can find the address so all that's taken care of and they're finally at the end once we're ready then",
    "start": "1334050",
    "end": "1340080"
  },
  {
    "text": "we say build and we get a built object that seems simple something so simple",
    "start": "1340080",
    "end": "1345960"
  },
  {
    "text": "that if it were wife why even bother but actually what have we achieved here",
    "start": "1345960",
    "end": "1351470"
  },
  {
    "text": "we've now got this really clear separation between this sort of mutable",
    "start": "1351470",
    "end": "1357030"
  },
  {
    "text": "phase where we're building something up and the then immutable phase where we",
    "start": "1357030",
    "end": "1363390"
  },
  {
    "text": "can using that value in the rest of our program so we actually use in the type system to enforce those boundaries which",
    "start": "1363390",
    "end": "1371130"
  },
  {
    "text": "is really a nice property so for this point on enzyme you see this employee",
    "start": "1371130",
    "end": "1376920"
  },
  {
    "text": "you know you know that's not going to change but we haven't given up all the conveniences of immutability either and",
    "start": "1376920",
    "end": "1383370"
  },
  {
    "text": "this idea of delineating these are the mutable and immutable stages it's really",
    "start": "1383370",
    "end": "1389430"
  },
  {
    "text": "fundamental to a lot of functional techniques where we want to still get the benefits immutability so for what",
    "start": "1389430",
    "end": "1399330"
  },
  {
    "text": "else we can do here again leaning on my experience my previous role what we",
    "start": "1399330",
    "end": "1405120"
  },
  {
    "text": "found was sometimes some of these values we don't even have at the time we're trying to build this we might need to go",
    "start": "1405120",
    "end": "1411210"
  },
  {
    "text": "and fetch it asynchronously so simulated that here by saying contacts but maybe",
    "start": "1411210",
    "end": "1416310"
  },
  {
    "text": "that's a fund for a database we're going to go away look it up so I've got this highlight that it's called sore whites",
    "start": "1416310",
    "end": "1423240"
  },
  {
    "text": "here hopefully co-routine to make this simpler but we'll be working with avi do this for some time I think so we're",
    "start": "1423240",
    "end": "1430260"
  },
  {
    "text": "passing the person that we got in the previous steps and then we give it a lander that's going to get called back",
    "start": "1430260",
    "end": "1436020"
  },
  {
    "text": "when it actually has the value so first of all notice that I'm using generalized",
    "start": "1436020",
    "end": "1442890"
  },
  {
    "text": "Lander capture to move our builder type into the lambda so that's another",
    "start": "1442890",
    "end": "1448380"
  },
  {
    "text": "advantage to using the Builder type rather than just this massive local variables is we can just do that move in",
    "start": "1448380",
    "end": "1454530"
  },
  {
    "text": "one go just it's a convenience but it's a nice property and we vacillate the",
    "start": "1454530",
    "end": "1460710"
  },
  {
    "text": "lander mutable because that's the way c++ works but yeah it works is it's",
    "start": "1460710",
    "end": "1468300"
  },
  {
    "text": "actually quite a nice way of doing this sort of asynchronously building up the graphs of object objects",
    "start": "1468300",
    "end": "1475040"
  },
  {
    "text": "so it's difficult to convey just on a few slides of some toy code how this",
    "start": "1475040",
    "end": "1481560"
  },
  {
    "text": "really works in a large-scale software code base I've used it to a good effect",
    "start": "1481560",
    "end": "1488570"
  },
  {
    "text": "if I haven't convinced you of this just remember that pattern of separating the",
    "start": "1488570",
    "end": "1494600"
  },
  {
    "text": "mutable and immutable places which you sometimes see referred to as the the raw and cooked phases of the values because",
    "start": "1494600",
    "end": "1503220"
  },
  {
    "text": "we're going to build on that and in fact the next section we're going to start by take a little detour but it's going to",
    "start": "1503220",
    "end": "1509190"
  },
  {
    "text": "come back to this point we're going to talk about strings and you may wonder what reference counted strings has to do",
    "start": "1509190",
    "end": "1515820"
  },
  {
    "text": "with functional programming bear with me so it's talk about a fast and safe reference counted string and if you've",
    "start": "1515820",
    "end": "1524310"
  },
  {
    "text": "been around C++ for for a while you may recall that originally the original",
    "start": "1524310",
    "end": "1530580"
  },
  {
    "text": "design of standard string was such that it could be implemented in a reference counted manner then most early",
    "start": "1530580",
    "end": "1536040"
  },
  {
    "text": "implementations were but there was a problem with that and that's a standard string has a mutable interface and",
    "start": "1536040",
    "end": "1542390"
  },
  {
    "text": "mutability in reference counting then mix very well so we have to go through some contortions to make that work so we",
    "start": "1542390",
    "end": "1549810"
  },
  {
    "text": "use a technique to show you're familiar with called copy-on-write where you gated of course to to cow so hence the",
    "start": "1549810",
    "end": "1556740"
  },
  {
    "text": "visual so I'm sure you know how that works but I'm just going to recap briefly to to set the stage so we have",
    "start": "1556740",
    "end": "1564810"
  },
  {
    "text": "our actual string here as a buffering memory and then our logical strings have got freedom here pointing to the same",
    "start": "1564810",
    "end": "1571470"
  },
  {
    "text": "buffer sharing that and then increment in this reference counts I've got a reference count of 3 there simple so far",
    "start": "1571470",
    "end": "1578490"
  },
  {
    "text": "and then we come to make a mutable operation that saved the third string needs to mutate it's it's copy so at",
    "start": "1578490",
    "end": "1585330"
  },
  {
    "text": "that point that mutable operation checks the reference count sees that it's shared and says I need to make a copy so",
    "start": "1585330",
    "end": "1592020"
  },
  {
    "text": "a new copy to that point hence copy-on-write so now we have two buffers one with a reference count of two will",
    "start": "1592020",
    "end": "1598830"
  },
  {
    "text": "move a reference count of 1 sure that's just a recap for you",
    "start": "1598830",
    "end": "1604170"
  },
  {
    "text": "but there's a problem with this and that's that well first of all we have to",
    "start": "1604170",
    "end": "1610590"
  },
  {
    "text": "protect the reference count either using some sort of mutex or make it atomic and",
    "start": "1610590",
    "end": "1616110"
  },
  {
    "text": "back in the early days of reference counted standard strings the Atomics we had if we had them at all one",
    "start": "1616110",
    "end": "1622020"
  },
  {
    "text": "particularly performant would come along a bit since then so between that and the fact that you",
    "start": "1622020",
    "end": "1627180"
  },
  {
    "text": "can accidentally trigger these just by calling a mutable method even though you",
    "start": "1627180",
    "end": "1632910"
  },
  {
    "text": "didn't actually need to mutate it meant that we we really suffered on the formal side because of this so much so that",
    "start": "1632910",
    "end": "1640350"
  },
  {
    "text": "well we found out that caravans like a dog that was the first reason that we",
    "start": "1640350",
    "end": "1646620"
  },
  {
    "text": "decided to addition but it was actually a second in many ways more important reason which is that you can actually",
    "start": "1646620",
    "end": "1654780"
  },
  {
    "text": "get into a situation where you had these shared strings and you maybe you've got",
    "start": "1654780",
    "end": "1660510"
  },
  {
    "text": "iterators into them and then because some other string has wheat ated and taking a copy you can end up with",
    "start": "1660510",
    "end": "1667650"
  },
  {
    "text": "invalidate edo phrases and first version of the standard actually allowed for this it was illegal and so we were able to",
    "start": "1667650",
    "end": "1675060"
  },
  {
    "text": "write these reference count these strings but C++ 11 change that real bad",
    "start": "1675060",
    "end": "1680340"
  },
  {
    "text": "out so you can no longer implement a reference counted string in C++ and be",
    "start": "1680340",
    "end": "1688800"
  },
  {
    "text": "conformant and actually have any benefit at all which I believe is the main reason that GCC eventually moves away",
    "start": "1688800",
    "end": "1695190"
  },
  {
    "text": "from reference counting strings because one of the last holdouts so Sander string now is typically implemented",
    "start": "1695190",
    "end": "1701430"
  },
  {
    "text": "using the the small string optimization which is going to find the general-purpose but now if you do have",
    "start": "1701430",
    "end": "1708990"
  },
  {
    "text": "lots of copies of strings it's much more wasteful of memory as well as the copying overhead but if you remember",
    "start": "1708990",
    "end": "1715220"
  },
  {
    "text": "back to when we first started talking about this we said the problem was because these strings have a mutable",
    "start": "1715220",
    "end": "1720990"
  },
  {
    "text": "interface so if we started with an immutable string design then we start",
    "start": "1720990",
    "end": "1728310"
  },
  {
    "text": "with the same situation we've got our shared butter could our reference count and that's it we're done",
    "start": "1728310",
    "end": "1734210"
  },
  {
    "text": "we don't have the mutability causing the problem so this worked works absolutely fine",
    "start": "1734210",
    "end": "1740050"
  },
  {
    "text": "except there is a reason that standard string has a mutable interface and",
    "start": "1740050",
    "end": "1745760"
  },
  {
    "text": "that's that we do actually sometimes want to mutate strings so can we have our cake and eat it",
    "start": "1745760",
    "end": "1752020"
  },
  {
    "text": "can we achieve what we want with mutable strings while also maintaining all the benefits of this design the answer is",
    "start": "1752020",
    "end": "1759020"
  },
  {
    "text": "yes again there's two ways the first is a lot of cases can be handled now by",
    "start": "1759020",
    "end": "1764150"
  },
  {
    "text": "string of u so u + + 17 or you can roll your own quite easily about one for about seven or eight years it's pretty",
    "start": "1764150",
    "end": "1771890"
  },
  {
    "text": "easy to write and they just allow you to have non owning copies of a string but",
    "start": "1771890",
    "end": "1778130"
  },
  {
    "text": "you can also change the where in the string you point to and how long it is",
    "start": "1778130",
    "end": "1784130"
  },
  {
    "text": "so you can have sub strings so as long as there are no non-overlapping ownership issues that can be a really",
    "start": "1784130",
    "end": "1791060"
  },
  {
    "text": "good solution for a lot of cases but when you really really do what actually wants and you take the string in place",
    "start": "1791060",
    "end": "1797230"
  },
  {
    "text": "then go back to the builder patent so we have a specialized string type record",
    "start": "1797230",
    "end": "1804740"
  },
  {
    "text": "here string builder and string builder is now optimized to mutability only",
    "start": "1804740",
    "end": "1809840"
  },
  {
    "text": "meant to be used in that raw builder stage so yeah we can mutate it in place",
    "start": "1809840",
    "end": "1816770"
  },
  {
    "text": "we can make the buffers smaller we can we can realloc to a bigger buffer it does have a reference count there's",
    "start": "1816770",
    "end": "1823430"
  },
  {
    "text": "always one we never actually touched that in the string builder and the reason we have the reference count at",
    "start": "1823430",
    "end": "1828800"
  },
  {
    "text": "all is because once we've got this string into the shape that we want then we can just detach the underlying memory",
    "start": "1828800",
    "end": "1837560"
  },
  {
    "text": "but typically by using a standard move our very references into one are very",
    "start": "1837560",
    "end": "1843680"
  },
  {
    "text": "mutable string types you know we transfer that ownership in so now the immutable string owns a memory string",
    "start": "1843680",
    "end": "1850250"
  },
  {
    "text": "builder no longer does so it can't change it so it's now safe we can now freely share this around as before we",
    "start": "1850250",
    "end": "1857810"
  },
  {
    "text": "can take additional copies we'll increment the reference count so it's only when we take the additional copy",
    "start": "1857810",
    "end": "1863690"
  },
  {
    "text": "that that reference can't even gets consulted so that's quite nice",
    "start": "1863690",
    "end": "1868880"
  },
  {
    "text": "well then sometimes we may want to take a string that we've been using immutable",
    "start": "1868880",
    "end": "1874070"
  },
  {
    "text": "in somewhere and it still make changes to it and we can even handle that so",
    "start": "1874070",
    "end": "1879500"
  },
  {
    "text": "we've got any an immutable string if it is shared and we take a copy into a",
    "start": "1879500",
    "end": "1884870"
  },
  {
    "text": "stringbuilder then it will have to copy the butter so this is basically like that points in",
    "start": "1884870",
    "end": "1890660"
  },
  {
    "text": "copy-on-write where we we have to decide except now we're making it explicit in the code you're actually passing it from",
    "start": "1890660",
    "end": "1896570"
  },
  {
    "text": "one site to another you're in control you know exactly where that's happening but if it's not shared then we can move",
    "start": "1896570",
    "end": "1904870"
  },
  {
    "text": "the the memory from the immutable string into the stringbuilder that's not",
    "start": "1904870",
    "end": "1910070"
  },
  {
    "text": "technically immutable then because we are changing the string but that's in according to the well understood semantics is of no semantics and C++ so",
    "start": "1910070",
    "end": "1918200"
  },
  {
    "text": "he choose to do that that that's safe within those constraints and what I",
    "start": "1918200",
    "end": "1923660"
  },
  {
    "text": "found was my previous role well we had one of these string string builder pairs this particular pattern we sort of use",
    "start": "1923660",
    "end": "1932120"
  },
  {
    "text": "once or twice in the whole code base almost all of it was building the strings up to begin with and then using them immediately so that cost that we",
    "start": "1932120",
    "end": "1940430"
  },
  {
    "text": "have to play there that we were playing and copy and write we really had to pay at all we've got all the benefits for",
    "start": "1940430",
    "end": "1947420"
  },
  {
    "text": "free and almost none of the downsides that's why this is a fast and safe",
    "start": "1947420",
    "end": "1953630"
  },
  {
    "text": "reference counter string all by concentrating on keep them now they'll use immutable using those builder stage",
    "start": "1953630",
    "end": "1960770"
  },
  {
    "text": "types and just to be absolutely clear this is like a view of the the lifetimes",
    "start": "1960770",
    "end": "1967760"
  },
  {
    "text": "of our our strings so moving from the the raw string builder stage into this",
    "start": "1967760",
    "end": "1973130"
  },
  {
    "text": "completely safe sea mutable stage that we can we can share around freely if we need to then go back to a string builder",
    "start": "1973130",
    "end": "1978500"
  },
  {
    "text": "and then from there we can move back into into strings again so we control when we transition between those types",
    "start": "1978500",
    "end": "1985280"
  },
  {
    "text": "that that's really the important thing here so that strings and strings in a",
    "start": "1985280",
    "end": "1992060"
  },
  {
    "text": "way are just a special case of a race so your by a score can be apply same ideas",
    "start": "1992060",
    "end": "1999590"
  },
  {
    "text": "with array types the simple answer is yes we can and again my previous role we did have for a",
    "start": "1999590",
    "end": "2007030"
  },
  {
    "text": "builder's and array views and that sort of thing and immutable arrays but they're not quite as useful in the",
    "start": "2007030",
    "end": "2014470"
  },
  {
    "text": "general-purpose sense because our usage of arrays tends to be a bit different we tend our very big arrays quite often",
    "start": "2014470",
    "end": "2021940"
  },
  {
    "text": "we do tend to mutate them in place a lot more so we are not paying the cost a lot more so that they weren't quite so",
    "start": "2021940",
    "end": "2028600"
  },
  {
    "text": "useful we ended up using vectors a lot more instead where it gets more",
    "start": "2028600",
    "end": "2033850"
  },
  {
    "text": "interesting is more complex structures particularly associative data structures",
    "start": "2033850",
    "end": "2039610"
  },
  {
    "text": "because we can do a lot more there and what I want to talk about next is something called persistent data",
    "start": "2039610",
    "end": "2046000"
  },
  {
    "text": "structures so this is another idea we've borrowed from the functional programming world and just to be clear about what a",
    "start": "2046000",
    "end": "2054580"
  },
  {
    "text": "persistent data structure is when we say persistence we're not talking about writing to a file the database so that",
    "start": "2054580",
    "end": "2061419"
  },
  {
    "text": "sort of persistence it's the sort of persistence where when you have some",
    "start": "2061419",
    "end": "2066730"
  },
  {
    "text": "some value some data structure of a particular value and then you take a",
    "start": "2066730",
    "end": "2073118"
  },
  {
    "text": "mutation on that the old value still persists so what you were you typically",
    "start": "2073119",
    "end": "2078490"
  },
  {
    "text": "doing is getting a new mutated version of it and you still got the old one which you can choose to hang on to if",
    "start": "2078490",
    "end": "2084310"
  },
  {
    "text": "you need it or throw it away but that's the underlying principle so a naive way",
    "start": "2084310",
    "end": "2089470"
  },
  {
    "text": "of implementing these will be to take a complete copy of that data every time which would work but it'll be very",
    "start": "2089470",
    "end": "2095919"
  },
  {
    "text": "expensive so the trick to persistent data structures is to share as much of",
    "start": "2095919",
    "end": "2100990"
  },
  {
    "text": "the underlying representation as possible and you can do this to a greater or less extent depending on what",
    "start": "2100990",
    "end": "2106900"
  },
  {
    "text": "the data structure is so to illustrate what I mean take the simplest case which is a singly linked list so truly know",
    "start": "2106900",
    "end": "2113590"
  },
  {
    "text": "how singly linked when this works but again I'm just going to really quickly refresh on that so we have a number of",
    "start": "2113590",
    "end": "2119200"
  },
  {
    "text": "nodes each contains a value and a pointer to the next or previous",
    "start": "2119200",
    "end": "2125920"
  },
  {
    "text": "depending which way you look at it node in the list it's important that it's a",
    "start": "2125920",
    "end": "2131350"
  },
  {
    "text": "singly linked list because if you have a doubly linked list if doesn't work because what you can do next is well if",
    "start": "2131350",
    "end": "2137340"
  },
  {
    "text": "you want to add a new head to our list then all we need is the new node with a",
    "start": "2137340",
    "end": "2144090"
  },
  {
    "text": "pointer to the previous head and the important point here is the original list which can still persist still exist",
    "start": "2144090",
    "end": "2152700"
  },
  {
    "text": "doesn't know anything about the new list the new list only knows about the",
    "start": "2152700",
    "end": "2157770"
  },
  {
    "text": "original one that's the defining characteristic so typically we would",
    "start": "2157770",
    "end": "2163080"
  },
  {
    "text": "have some rapper class say list that will have the pointer to the first",
    "start": "2163080",
    "end": "2168510"
  },
  {
    "text": "element so we'll have a new copy of that and we could do the same removing",
    "start": "2168510",
    "end": "2173640"
  },
  {
    "text": "elements just have now a pointer to an earlier node instead we can you know",
    "start": "2173640",
    "end": "2179010"
  },
  {
    "text": "pile these things up to be kind of multiple instances of our list with",
    "start": "2179010",
    "end": "2184410"
  },
  {
    "text": "different values through memory at the same time all efficiently sharing all of the common state all the time you're",
    "start": "2184410",
    "end": "2191550"
  },
  {
    "text": "doing operations at the head at least it's a very efficient way to do if you need to do operations further down then",
    "start": "2191550",
    "end": "2197880"
  },
  {
    "text": "it becomes less or less efficient progressively and so you could hold a",
    "start": "2197880",
    "end": "2203250"
  },
  {
    "text": "release in memory at once at fairly low cost but if you're not interested in Bilbo's you can just let them go with",
    "start": "2203250",
    "end": "2208260"
  },
  {
    "text": "its reference counted or using garbage collection they'll just disappear and you're left with final lists as if that",
    "start": "2208260",
    "end": "2213960"
  },
  {
    "text": "was what you created in the first place so that so it works for a linked list we",
    "start": "2213960",
    "end": "2219390"
  },
  {
    "text": "don't tend to use lists so much in C++ mostly because we'll see that the points",
    "start": "2219390",
    "end": "2225090"
  },
  {
    "text": "are hotting and all the cache misses they're not particularly efficient for our purposes these days the bread and",
    "start": "2225090",
    "end": "2231420"
  },
  {
    "text": "butter the functional programming world for this reason but we don't sense use them but we can apply the same",
    "start": "2231420",
    "end": "2237480"
  },
  {
    "text": "principles to tree based structures so take a clip of a simple binary tree like",
    "start": "2237480",
    "end": "2247290"
  },
  {
    "text": "this one here so we got all these values in a strictly for during so each node",
    "start": "2247290",
    "end": "2254550"
  },
  {
    "text": "has two pointers now instead of the one in the list left and a right and in",
    "start": "2254550",
    "end": "2259710"
  },
  {
    "text": "order to find a pointer the node we just go down comparing the values and if it's less than go left it's greater than they",
    "start": "2259710",
    "end": "2266370"
  },
  {
    "text": "go right again I'm sure this is fairly familiar now if you got want to",
    "start": "2266370",
    "end": "2271710"
  },
  {
    "text": "enter a new value into this tree then",
    "start": "2271710",
    "end": "2277140"
  },
  {
    "text": "we've got to find where to put it so which reverse down the list to find that we can either put it to the right of the",
    "start": "2277140",
    "end": "2282330"
  },
  {
    "text": "free or the left of the five there I will simply add it to an existing lease",
    "start": "2282330",
    "end": "2288690"
  },
  {
    "text": "we should always be able to do that so we can add that to the foot to the left of the five so nice and simple and if",
    "start": "2288690",
    "end": "2298470"
  },
  {
    "text": "this was a typical mutable tree then we'd be done job done but if we want to",
    "start": "2298470",
    "end": "2304800"
  },
  {
    "text": "make this desist n't and immutable we can't do that because now we've got to write our pointer in to be the five note",
    "start": "2304800",
    "end": "2312840"
  },
  {
    "text": "there and can't mutate it so we have to take a copy of it and then write the",
    "start": "2312840",
    "end": "2318030"
  },
  {
    "text": "pointer into the copy instead so we effectively invalidating that node but because they've done that we've now got",
    "start": "2318030",
    "end": "2323850"
  },
  {
    "text": "to do the same for its parent for seven and all the way up to the root we validated all those nodes up to the root",
    "start": "2323850",
    "end": "2329690"
  },
  {
    "text": "so similar to with the list if we are mutating elements further down the list",
    "start": "2329690",
    "end": "2335220"
  },
  {
    "text": "but now we don't have to touch any of these other branches in the tree so we",
    "start": "2335220",
    "end": "2340890"
  },
  {
    "text": "can still do that relatively efficiently so we did that and once we've done that since we've got a new root the old value",
    "start": "2340890",
    "end": "2348840"
  },
  {
    "text": "from the old root still persists we've still got that around we have a new tree with your sharing all of the",
    "start": "2348840",
    "end": "2354270"
  },
  {
    "text": "common state well not all of it because we're that to invalidate some additional nodes now but most of it it's important",
    "start": "2354270",
    "end": "2360960"
  },
  {
    "text": "point so that's quite nice but that's a simple binary tree which has a few",
    "start": "2360960",
    "end": "2366630"
  },
  {
    "text": "limitations and to illustrate the the biggest of those limitations if you try",
    "start": "2366630",
    "end": "2372600"
  },
  {
    "text": "to load one of these things up with sorted data then you could quickly see that you're going up with a linked list",
    "start": "2372600",
    "end": "2378810"
  },
  {
    "text": "down one side or the other it's not going to be very efficient so we came up many decades ago with lasers",
    "start": "2378810",
    "end": "2386330"
  },
  {
    "text": "automatically rebalancing these trees in an efficient way and believe the most",
    "start": "2386330",
    "end": "2391860"
  },
  {
    "text": "common one that the we tend to use today is the red black tree I'm not going to go into it in a lot of detail but just",
    "start": "2391860",
    "end": "2397560"
  },
  {
    "text": "to whiz through these are the rules the root note is black the color is",
    "start": "2397560",
    "end": "2403210"
  },
  {
    "text": "arbitrary really just a way of characterizing these notes already knows",
    "start": "2403210",
    "end": "2408339"
  },
  {
    "text": "our black children you leave the red and all paths in the route of the same number of black nodes don't need to try",
    "start": "2408339",
    "end": "2414190"
  },
  {
    "text": "remember that that's not that important but I will illustrate what effect that has when I tree so if we now go back to",
    "start": "2414190",
    "end": "2421750"
  },
  {
    "text": "our example we're reading our foreign but now this is the red black tree which might be kind of like this to start with",
    "start": "2421750",
    "end": "2427150"
  },
  {
    "text": "so we put our foreign as a red node because that was the sorrel all new",
    "start": "2427150",
    "end": "2432430"
  },
  {
    "text": "nodes are red attached to the five but now we invalidate the the red node",
    "start": "2432430",
    "end": "2438880"
  },
  {
    "text": "invariant that all red node should have black children so what we do when we",
    "start": "2438880",
    "end": "2444970"
  },
  {
    "text": "apply these rules we always consider the parent node grandparent note in any uncle notes so just looking at those we",
    "start": "2444970",
    "end": "2451990"
  },
  {
    "text": "just have to recolor them so now the four is a child of a black node so that",
    "start": "2451990",
    "end": "2458230"
  },
  {
    "text": "works at least in that group but our looking further up we've invalidated the",
    "start": "2458230",
    "end": "2463390"
  },
  {
    "text": "red node invariant server up between the three and seven we've got two red nodes again so we just apply the same rule going up",
    "start": "2463390",
    "end": "2468819"
  },
  {
    "text": "in this case it's just read coloring all the way to the root in some cases that you mask and shuffle the nodes around as",
    "start": "2468819",
    "end": "2474040"
  },
  {
    "text": "well and actually when you get to the root we've got a red root now again the",
    "start": "2474040",
    "end": "2480700"
  },
  {
    "text": "root node should always be black so we could just recolor that and now the invariants about having the same number",
    "start": "2480700",
    "end": "2487329"
  },
  {
    "text": "of black nodes in every branch that holds it's that invariant gives us the the rough balancing by the way because",
    "start": "2487329",
    "end": "2496560"
  },
  {
    "text": "it means that the tree can never be more than twice as deep on one branch than",
    "start": "2496560",
    "end": "2501700"
  },
  {
    "text": "any other given branch so that's fine let's say the specific rules are not",
    "start": "2501700",
    "end": "2507970"
  },
  {
    "text": "that important what's important is that now in order to do that we've had to touch all of these notes you can see",
    "start": "2507970",
    "end": "2513310"
  },
  {
    "text": "that ones I've highlighted so not just the ones on the path to the root but a few sort of collateral nodes as well",
    "start": "2513310",
    "end": "2519849"
  },
  {
    "text": "we've also been touched so you can imagine what that means for persistence",
    "start": "2519849",
    "end": "2525490"
  },
  {
    "text": "we've now got to copy more notes so we can do that again you can make this work",
    "start": "2525490",
    "end": "2531700"
  },
  {
    "text": "I know because I've done it but there's this extra overhead you can",
    "start": "2531700",
    "end": "2538010"
  },
  {
    "text": "mitigate that somewhat ironically given what we've said about strings by using",
    "start": "2538010",
    "end": "2543680"
  },
  {
    "text": "copy-on-write so you can measure in all of these nodes are reference counted then as you come",
    "start": "2543680",
    "end": "2549290"
  },
  {
    "text": "down the tree to find the place you want to put it in you just keep a track of where nobody shared or not if a node is",
    "start": "2549290",
    "end": "2554420"
  },
  {
    "text": "shared then you consider what it's children to be shared but if you're mutating a node that's not shared then",
    "start": "2554420",
    "end": "2559670"
  },
  {
    "text": "you can afford to do that in place so when you're first building up these trees you can actually do most of the",
    "start": "2559670",
    "end": "2565070"
  },
  {
    "text": "operations notably before anything outside you can see it so there's our raw vs. cooked stage again",
    "start": "2565070",
    "end": "2573400"
  },
  {
    "text": "so that actually mitigates a lot of overhead what we found was with our",
    "start": "2573400",
    "end": "2579410"
  },
  {
    "text": "implementation loading up and loads of financial market later we had a roughly",
    "start": "2579410",
    "end": "2584840"
  },
  {
    "text": "10% overhead on insert with our red black tree compared to standard set",
    "start": "2584840",
    "end": "2590120"
  },
  {
    "text": "which we found quite acceptable what wasn't too bad so that'll works and in",
    "start": "2590120",
    "end": "2595850"
  },
  {
    "text": "fact if you look on Wikipedia under red black tree it does say the red black trees are also particularly valuable in",
    "start": "2595850",
    "end": "2602900"
  },
  {
    "text": "functional programming where they're one of the most common persistent data structures used to construct associative",
    "start": "2602900",
    "end": "2609860"
  },
  {
    "text": "arrays and sets which can retain previous versions after mutations so exactly what we talked about and but the",
    "start": "2609860",
    "end": "2617720"
  },
  {
    "text": "benefits of having one of these persistent data structures by the way there's actually a few of them one that",
    "start": "2617720",
    "end": "2626120"
  },
  {
    "text": "we have a refreshed on yet but is what most people are interested in is with concurrency because now when you insert",
    "start": "2626120",
    "end": "2632360"
  },
  {
    "text": "something into one of these sets you get a new root and nothing else changes so if you've got one place in your code",
    "start": "2632360",
    "end": "2638330"
  },
  {
    "text": "that holds this this root node you can do an atomic swap on that well use your compare and swap there may be a loop",
    "start": "2638330",
    "end": "2644030"
  },
  {
    "text": "around it which means you can get the fairly trivial lock free implementations",
    "start": "2644030",
    "end": "2650360"
  },
  {
    "text": "of these things fairly safely exactly what we did with great performance",
    "start": "2650360",
    "end": "2656260"
  },
  {
    "text": "benefit but also another thing we did just leave being financial data will be",
    "start": "2656260",
    "end": "2662540"
  },
  {
    "text": "running scenarios against different versions of our market data with small mutations at night",
    "start": "2662540",
    "end": "2667700"
  },
  {
    "text": "and with this technique we were able to hold all of these big data sets in memory at once knowing that most of the",
    "start": "2667700",
    "end": "2673880"
  },
  {
    "text": "common state was being shared and that was that was a really nice property as well but ultimately the most important",
    "start": "2673880",
    "end": "2681349"
  },
  {
    "text": "benefit is it's much easier to reason about the code when you know exactly which points do involve mutations again",
    "start": "2681349",
    "end": "2688430"
  },
  {
    "text": "with strictly controlling where we allow the mutations to occur so we only use in those places that we benefit from them",
    "start": "2688430",
    "end": "2694579"
  },
  {
    "text": "and not anywhere else and that's that's really liberating so that was red black",
    "start": "2694579",
    "end": "2700010"
  },
  {
    "text": "trees and we could stop there most people do but red black trees aren't",
    "start": "2700010",
    "end": "2705170"
  },
  {
    "text": "necessarily the most efficient data structure and C++ we're always looking for the most efficient ways to do things",
    "start": "2705170",
    "end": "2710599"
  },
  {
    "text": "on me so what's what's the problem with red black trees well the problem is that",
    "start": "2710599",
    "end": "2716780"
  },
  {
    "text": "the trees get quite deep and I teach a verse down the tree you're doing lots of point ops again more cache misses and in",
    "start": "2716780",
    "end": "2725390"
  },
  {
    "text": "fact if you loaded up one of these these trees we've say 15 million items you're going to get a tree depth of about",
    "start": "2725390",
    "end": "2731180"
  },
  {
    "text": "twenty four nodes deep I sell a lot of pointer hops to look up every every item in the tree and the reason that the",
    "start": "2731180",
    "end": "2739400"
  },
  {
    "text": "trees get so deep because we've only got two pointers in every node maximum of two in fact so you can see there's",
    "start": "2739400",
    "end": "2745940"
  },
  {
    "text": "obviously a limit on how wide it can be so the solution then must be to read",
    "start": "2745940",
    "end": "2752150"
  },
  {
    "text": "more pointers and in short yes it is but",
    "start": "2752150",
    "end": "2758140"
  },
  {
    "text": "that raises two more questions now first question is how'd you know which pointed",
    "start": "2758140",
    "end": "2764210"
  },
  {
    "text": "to follow into traversing down with the red black tree for the simple binary tree sister case you're comparing the",
    "start": "2764210",
    "end": "2770720"
  },
  {
    "text": "value less less then or greater then left or right what do we do here well what we can do is",
    "start": "2770720",
    "end": "2780640"
  },
  {
    "text": "laughter Mia click the hash of the value and we look at the first say five digits",
    "start": "2783020",
    "end": "2790530"
  },
  {
    "text": "of the hash we get a number that number is now an index into an array of",
    "start": "2790530",
    "end": "2796200"
  },
  {
    "text": "pointers simple so this gives us 27 there gets us to the next level down the",
    "start": "2796200",
    "end": "2803610"
  },
  {
    "text": "next level down we then look at the next five bits could be six if we want to 64",
    "start": "2803610",
    "end": "2809070"
  },
  {
    "text": "bit 64 elements array don't got another value another index into this array",
    "start": "2809070",
    "end": "2815460"
  },
  {
    "text": "gives us the next node and each node is now either a branch node with one of these arrays in or it's a leaf node with",
    "start": "2815460",
    "end": "2822210"
  },
  {
    "text": "value or set of values as it happens so this is what we call a 3 TR ie more",
    "start": "2822210",
    "end": "2831330"
  },
  {
    "text": "commonly associated with we've strings like a string dictionary where each node you use each letter in the string or",
    "start": "2831330",
    "end": "2839730"
  },
  {
    "text": "each character in the string rather to to say which which pointed follow next here we're doing with a hash parts of a",
    "start": "2839730",
    "end": "2847080"
  },
  {
    "text": "hash so we call this a hash tree so that that's the part of the solution I said",
    "start": "2847080",
    "end": "2852930"
  },
  {
    "text": "there are two problems the other problem is as you can see here most of the time most of the elements in this array are",
    "start": "2852930",
    "end": "2859590"
  },
  {
    "text": "null maybe have a few pointers at a time so though we've got 32 available slots we're not using them all but would",
    "start": "2859590",
    "end": "2866250"
  },
  {
    "text": "obviously seem to be quite wasteful of memory if you add up all of these nodes",
    "start": "2866250",
    "end": "2871620"
  },
  {
    "text": "it can actually be very wasteful so what can we do about that that sounds like the ideal place for using some sort of",
    "start": "2871620",
    "end": "2878730"
  },
  {
    "text": "sparse array so it would typically do is we store it into gel which is a bitmap",
    "start": "2878730",
    "end": "2884190"
  },
  {
    "text": "for all the set bits being the indices that contain the pointer and the on tip",
    "start": "2884190",
    "end": "2891330"
  },
  {
    "text": "bits of the null ones and then we just saw a compact array with only the pointers at a set then all we have to do",
    "start": "2891330",
    "end": "2898560"
  },
  {
    "text": "is just for any given index we just finally The Associated bit and count all",
    "start": "2898560",
    "end": "2904110"
  },
  {
    "text": "the set bits from that bit and to the right and that tells us the index into the compact array now doing that",
    "start": "2904110",
    "end": "2911130"
  },
  {
    "text": "counting the set bits is itself an interesting problem I'm not going to go into here in fact I've done another talk on this",
    "start": "2911130",
    "end": "2917690"
  },
  {
    "text": "C++ now just a couple of weeks ago which is just come up on YouTube so they'll be",
    "start": "2917690",
    "end": "2923460"
  },
  {
    "text": "linked to that at the end while I go into my complete implementation of this go into more information there but that",
    "start": "2923460",
    "end": "2930180"
  },
  {
    "text": "now gives us a nice efficient implementation of this in fact this data",
    "start": "2930180",
    "end": "2935250"
  },
  {
    "text": "structure is more space efficient than a hash map and is approaching the same level of performance or what you end up",
    "start": "2935250",
    "end": "2942990"
  },
  {
    "text": "with it's ever like this so now you've got a tree with some of these that only",
    "start": "2942990",
    "end": "2949349"
  },
  {
    "text": "have two pointers that you can have up to 32 pointers of each tree you go down you consult different parts of the the",
    "start": "2949349",
    "end": "2955260"
  },
  {
    "text": "hash to get down to the root and there's also some interesting properties now so",
    "start": "2955260",
    "end": "2961589"
  },
  {
    "text": "for start the maximum depth of this tree if you're using five bits of the hash each time there's going to be six or",
    "start": "2961589",
    "end": "2968730"
  },
  {
    "text": "seven depending on whether you include the last two bits from the 32 that's",
    "start": "2968730",
    "end": "2973829"
  },
  {
    "text": "doing a lot less than our 24 bits out earlier in fact that example with 15 million entries will have an average",
    "start": "2973829",
    "end": "2980190"
  },
  {
    "text": "tree depth of 5 that's significantly better than the 24 in the red-black tree",
    "start": "2980190",
    "end": "2986180"
  },
  {
    "text": "because it's hash based you're going to get hash collisions so the the leaf nodes will actually be an array of nodes",
    "start": "2986180",
    "end": "2992520"
  },
  {
    "text": "array of values sorry which can IV do a linear search on if you're doing the hash hash map or you can actually do a",
    "start": "2992520",
    "end": "3000430"
  },
  {
    "text": "binary search on those well to make it even more efficient as I said it's more space efficient in the hash tables the",
    "start": "3000430",
    "end": "3007790"
  },
  {
    "text": "complexity technically is a log 32 lens which is an unusual one in practice I",
    "start": "3007790",
    "end": "3013460"
  },
  {
    "text": "found that for most I'll use say it's very close to sometimes even exceeding the performance of the hash table and",
    "start": "3013460",
    "end": "3020619"
  },
  {
    "text": "really nice point compared to red black trees you don't need to rebalance it does assume a good hash distribution to",
    "start": "3020619",
    "end": "3028040"
  },
  {
    "text": "start with receiving that the tree effectively balances itself according to the hash distribution because you use in",
    "start": "3028040",
    "end": "3034310"
  },
  {
    "text": "the hash in order to construct the structure of the tree so you don't need that rebalancing step it's much more",
    "start": "3034310",
    "end": "3041300"
  },
  {
    "text": "shallow so the copying overhead compared to red black tree is also much less which means it's ideal for making",
    "start": "3041300",
    "end": "3047240"
  },
  {
    "text": "persistent much simpler and more efficient to make assistant",
    "start": "3047240",
    "end": "3053120"
  },
  {
    "text": "than a red-black tree we've almost the performance of the hash table it seems like the ideal data structure for our",
    "start": "3053120",
    "end": "3059330"
  },
  {
    "text": "purposes in fact if you watched my total column I do exactly that case so this is",
    "start": "3059330",
    "end": "3065570"
  },
  {
    "text": "really nice it's called a persistent hash array Maps tree to give it its full name watch that talk for more",
    "start": "3065570",
    "end": "3072560"
  },
  {
    "text": "information I think I've just got time for the final section we're going to switch it up a bit now and we're",
    "start": "3072560",
    "end": "3079910"
  },
  {
    "text": "actually going to talk about another data structure that's we've now gotten C++ 17 it's probably the simplest",
    "start": "3079910",
    "end": "3085790"
  },
  {
    "text": "container you could possibly think of so of course I'm talking about optional",
    "start": "3085790",
    "end": "3091570"
  },
  {
    "text": "sure you're familiar with how optional works so basically it gives us the",
    "start": "3091570",
    "end": "3096860"
  },
  {
    "text": "ability to say we've got a value or no value at all without having to resort to",
    "start": "3096860",
    "end": "3101930"
  },
  {
    "text": "pointers or Sentinel values but in practice the way we use it it looks like",
    "start": "3101930",
    "end": "3107090"
  },
  {
    "text": "a pointer so we can test it for true Venis it can be reference it which will get the value out if it has one or throw",
    "start": "3107090",
    "end": "3113360"
  },
  {
    "text": "an exception if not so we get small improvements over pointers there but",
    "start": "3113360",
    "end": "3118850"
  },
  {
    "text": "it's a shame that they haven't put more the semantics around this to to make it safer to use but there is one method",
    "start": "3118850",
    "end": "3127160"
  },
  {
    "text": "that that it does have as useful let's see the value or method this allows us",
    "start": "3127160",
    "end": "3132290"
  },
  {
    "text": "to effectively coalesce value so if our optional doesn't have a value at all",
    "start": "3132290",
    "end": "3137330"
  },
  {
    "text": "then use this default instead which is nice that's quite a common use case",
    "start": "3137330",
    "end": "3142960"
  },
  {
    "text": "unfortunately slop that general in particular I mean here with an integer",
    "start": "3142960",
    "end": "3148400"
  },
  {
    "text": "is fine but though there may be some cost associated with constructing or calculating the buddy you want to put",
    "start": "3148400",
    "end": "3155480"
  },
  {
    "text": "here you don't to pay that cost if you're never actually going to use the value so it'd be nice if instead of a",
    "start": "3155480",
    "end": "3162740"
  },
  {
    "text": "value here you can put a lambda but it's sense enough to write your own helper function so here's a helper function",
    "start": "3162740",
    "end": "3169460"
  },
  {
    "text": "I've just called a value or again but it takes the optional is its first argument and then a lambda there's a second",
    "start": "3169460",
    "end": "3175850"
  },
  {
    "text": "argument and all it does inside is check the optional if it has it use that if not",
    "start": "3175850",
    "end": "3181400"
  },
  {
    "text": "returns the results according the simple and now we can write code like",
    "start": "3181400",
    "end": "3187190"
  },
  {
    "text": "this some that haven't really taken advantage of it here still returning just the content into jet but now now",
    "start": "3187190",
    "end": "3193040"
  },
  {
    "text": "we've got lambdas here we could actually go off we could call a database if we wanted to and it would only do that if",
    "start": "3193040",
    "end": "3198500"
  },
  {
    "text": "we needed to but we're still written it in a life compact and expressive form so",
    "start": "3198500",
    "end": "3204860"
  },
  {
    "text": "that's the first little improvement let's talk a little bit more on this thread because in this case we're doing",
    "start": "3204860",
    "end": "3211580"
  },
  {
    "text": "something only if the option doesn't have a value we can do it they'll be around as well I've called this one with",
    "start": "3211580",
    "end": "3218630"
  },
  {
    "text": "another helper function it takes a lambda and what we say is if the optional does have the value then call",
    "start": "3218630",
    "end": "3225770"
  },
  {
    "text": "the lambda passing the dereference value along and this is the start of making usage a little bit more a little bit",
    "start": "3225770",
    "end": "3232190"
  },
  {
    "text": "safer so now in our example usage we're",
    "start": "3232190",
    "end": "3237200"
  },
  {
    "text": "using a dereferenced type suggested integer here we have a net to do to do referencing ourselves so there's no way",
    "start": "3237200",
    "end": "3243050"
  },
  {
    "text": "that can blow up on us that's all been relegated to the helper function but then the lambda will use the ironic",
    "start": "3243050",
    "end": "3250370"
  },
  {
    "text": "thing we can only do side-effects here now we've made this into a sleepin by",
    "start": "3250370",
    "end": "3255700"
  },
  {
    "text": "only there doing something with the case for the optional has a value but we can",
    "start": "3255700",
    "end": "3262370"
  },
  {
    "text": "fix that simply enough we just returned",
    "start": "3262370",
    "end": "3267440"
  },
  {
    "text": "an optional of the same type in this example so now I'll and also returns",
    "start": "3267440",
    "end": "3275320"
  },
  {
    "text": "over an optional or the value itself and if we didn't have a value then we just return an empty optional never got value",
    "start": "3275320",
    "end": "3282650"
  },
  {
    "text": "semantics we've made this into an expression so rather than doing",
    "start": "3282650",
    "end": "3289280"
  },
  {
    "text": "something in a lambda we are constructing a value that we're returning out so the return value here",
    "start": "3289280",
    "end": "3294560"
  },
  {
    "text": "is also an optional and of course now we can we can chain that with other calls",
    "start": "3294560",
    "end": "3300400"
  },
  {
    "text": "but one little limitation here and that's that I've made this return an optional at the same time to keep it",
    "start": "3300400",
    "end": "3309200"
  },
  {
    "text": "simple it's baby steps but we can take it a little stage server bit of simply boilerplate that you can write",
    "start": "3309200",
    "end": "3316010"
  },
  {
    "text": "once and forget about to add opportunities the type is not already",
    "start": "3316010",
    "end": "3321530"
  },
  {
    "text": "optional we can now use devil type to work out what the return value of the lambda is whatever that is we're going",
    "start": "3321530",
    "end": "3328850"
  },
  {
    "text": "to return an option of that type okay so internally the rest of its just the",
    "start": "3328850",
    "end": "3335570"
  },
  {
    "text": "same now they can use different types just by returning a different type from a lambda so in this example at the",
    "start": "3335570",
    "end": "3341210"
  },
  {
    "text": "bottom we've got an integer coming in there converting it to a string long way around and we're returning a string so",
    "start": "3341210",
    "end": "3349750"
  },
  {
    "text": "what we'll actually get is an optional string coming out the other end but",
    "start": "3349750",
    "end": "3355340"
  },
  {
    "text": "because we always returning an optional like I say we can chain these together as well so in this example let's code at",
    "start": "3355340",
    "end": "3362690"
  },
  {
    "text": "the top the same but we're starting right in the middle the middle is we",
    "start": "3362690",
    "end": "3368750"
  },
  {
    "text": "passed our original option into it and if that has a value we execute the inner lambda this close multiplying by to",
    "start": "3368750",
    "end": "3375350"
  },
  {
    "text": "return the result of that so if we still have a value then the outer width gets",
    "start": "3375350",
    "end": "3380630"
  },
  {
    "text": "executed at the last lambda which has one it's called simply enough this is",
    "start": "3380630",
    "end": "3386690"
  },
  {
    "text": "actually composing it's a functionality that's a nice property but it's not",
    "start": "3386690",
    "end": "3393080"
  },
  {
    "text": "particularly readable and unfortunately C++ is not very good with functional",
    "start": "3393080",
    "end": "3398870"
  },
  {
    "text": "competition so a real functional programming language that encourages you to write code like this will have a wave",
    "start": "3398870",
    "end": "3404810"
  },
  {
    "text": "effectively inverting this flow so that rather than writing inside out like we've done we will push the values in at",
    "start": "3404810",
    "end": "3410960"
  },
  {
    "text": "the top we write like a series of operations and the value pops out to the bottom now can't do that in the general",
    "start": "3410960",
    "end": "3418490"
  },
  {
    "text": "case in C++ but we can't do something specific to this case and all get to do",
    "start": "3418490",
    "end": "3424160"
  },
  {
    "text": "is change our helper function to be an infix operator this case I've chosen the pipe operator because reminds me of",
    "start": "3424160",
    "end": "3431810"
  },
  {
    "text": "mutex pipes now with that one change look at how this affects the code so",
    "start": "3431810",
    "end": "3438680"
  },
  {
    "text": "same example as before now we can see the option of going at the top because",
    "start": "3438680",
    "end": "3444050"
  },
  {
    "text": "the first operation gets the form the second operation it gets performed optional drops out at the bottom and we",
    "start": "3444050",
    "end": "3449550"
  },
  {
    "text": "can construct some quite complex pipelines here in some comparatively simple code it's a more complex example",
    "start": "3449550",
    "end": "3455610"
  },
  {
    "text": "look at our strengths aversion in there there's this is interesting the second line that's doing a filter because we're",
    "start": "3455610",
    "end": "3463230"
  },
  {
    "text": "only going on if the value that we've unwraps out the first optional is greater than 10 so some of those values",
    "start": "3463230",
    "end": "3469500"
  },
  {
    "text": "may they still end up with an empty optional and we'll skip the remaining stages if you're starting to look really",
    "start": "3469500",
    "end": "3476070"
  },
  {
    "text": "nice and in fact there's another property about this which is that apart from that returning an empty optional",
    "start": "3476070",
    "end": "3483210"
  },
  {
    "text": "for the filter there's nothing about this code at the bottom it has anything to do with optionals all we're saying is",
    "start": "3483210",
    "end": "3490710"
  },
  {
    "text": "we've got some value coming in and I'm going to do stuff with it where it gets that value whether it's wraps in an",
    "start": "3490710",
    "end": "3496320"
  },
  {
    "text": "optional or a pointer or a vector or a future whether that values coming from",
    "start": "3496320",
    "end": "3503190"
  },
  {
    "text": "we can apply these operations to it those two things have been affected we'll start to write different helpers",
    "start": "3503190",
    "end": "3509160"
  },
  {
    "text": "for those different cases but we can do that it's a very general pattern that leaves a very composable code that",
    "start": "3509160",
    "end": "3515370"
  },
  {
    "text": "allows us to separate concerns out very clearly especially we're writing things in a very expression oriented way so",
    "start": "3515370",
    "end": "3522810"
  },
  {
    "text": "with all those factors and a few others that I brushed under the carpet what this gives us is a monad over optional",
    "start": "3522810",
    "end": "3529890"
  },
  {
    "text": "it's called the maybe monad usually I'm not going to discuss what a motor actually is but this is a good example",
    "start": "3529890",
    "end": "3536130"
  },
  {
    "text": "of one and if you want a slightly more general example you only have to look at",
    "start": "3536130",
    "end": "3541680"
  },
  {
    "text": "it needless ranges library we did a talk cpp con 2250 no think I think it was",
    "start": "3541680",
    "end": "3549990"
  },
  {
    "text": "that's us on YouTube if you haven't seen it I definitely recommend you go and watch it if you have seen it I recommend",
    "start": "3549990",
    "end": "3555270"
  },
  {
    "text": "you go watch it again because it's an amazing mind-bending talk and what he ends up with you work",
    "start": "3555270",
    "end": "3561810"
  },
  {
    "text": "through this demo of building a calendar on standard out actually here's the output so it starts off with a range of",
    "start": "3561810",
    "end": "3569880"
  },
  {
    "text": "dates and he ends up with this being printed standard out now think of the complexity of that layout code there but",
    "start": "3569880",
    "end": "3577520"
  },
  {
    "text": "this is not the entire code but this is what all the pieces together and in fact all",
    "start": "3577520",
    "end": "3582800"
  },
  {
    "text": "the rest of the code is to extend early very expressive I believe that there was exactly one if statement in the entire",
    "start": "3582800",
    "end": "3588800"
  },
  {
    "text": "code base no loops and basically no meter did't II think we'll see the",
    "start": "3588800",
    "end": "3596960"
  },
  {
    "text": "upshot of that so we've used the same pipe character to to compose these this",
    "start": "3596960",
    "end": "3605030"
  },
  {
    "text": "piece of the functionality not all of these are magnetic some of them are most of their close to we're going to be the",
    "start": "3605030",
    "end": "3612080"
  },
  {
    "text": "subtleties involved there but to give you a nice idea exactly how composable",
    "start": "3612080",
    "end": "3617750"
  },
  {
    "text": "these things are look at this this one in the middle which is chunk free if you",
    "start": "3617750",
    "end": "3623600"
  },
  {
    "text": "look at the output again exceed there's there's three months across well it",
    "start": "3623600",
    "end": "3628610"
  },
  {
    "text": "could change that to two that it will display out two columns instead that's",
    "start": "3628610",
    "end": "3634070"
  },
  {
    "text": "completely separate from all the rest of that that code is completely orthogonal it's a really nice property that's why",
    "start": "3634070",
    "end": "3640400"
  },
  {
    "text": "people get so worked up about monads from the functional programming world because it gives us the ability to to",
    "start": "3640400",
    "end": "3646730"
  },
  {
    "text": "write our code compose our code and reuse our code in these sort of ways that is really nice and once you",
    "start": "3646730",
    "end": "3652640"
  },
  {
    "text": "understand what's going on really readable and expressive so hopefully that's open your eyes a bit too to the",
    "start": "3652640",
    "end": "3659570"
  },
  {
    "text": "plow there now things a good point too to recap what kevin Henny said about",
    "start": "3659570",
    "end": "3665780"
  },
  {
    "text": "monads a lot sure when he said this exactly that's I'll let you read that",
    "start": "3665780",
    "end": "3670850"
  },
  {
    "text": "one he actually did a talk on functional",
    "start": "3670850",
    "end": "3676610"
  },
  {
    "text": "C++ here I think a couple years ago anyway I think we're getting close to",
    "start": "3676610",
    "end": "3683990"
  },
  {
    "text": "game so I'm going to wrap up this is a summary of what we've talked about if you remember we started off discussing",
    "start": "3683990",
    "end": "3689510"
  },
  {
    "text": "or expression oriented programming once and why that's significant how that leads to local reasoning on may not have",
    "start": "3689510",
    "end": "3695750"
  },
  {
    "text": "even mentioned that term but that's that's what we get when we can read it about variables and values in isolation",
    "start": "3695750",
    "end": "3701240"
  },
  {
    "text": "without having to consider well the other code all that complexity involved we saw how this implies the need for",
    "start": "3701240",
    "end": "3708140"
  },
  {
    "text": "immutability where possible but what we also need to allow mutability just",
    "start": "3708140",
    "end": "3713900"
  },
  {
    "text": "control that we have to help build the types can help us to to manage the explosion of",
    "start": "3713900",
    "end": "3719150"
  },
  {
    "text": "complexity in our code as a result of that we extended out into business and data structures that can help us with",
    "start": "3719150",
    "end": "3725900"
  },
  {
    "text": "collections and the finally we just looked at monads we've be the maybe",
    "start": "3725900",
    "end": "3731660"
  },
  {
    "text": "monad / optional hope that's given you some ideas of some things you can join",
    "start": "3731660",
    "end": "3736910"
  },
  {
    "text": "your own code bases is that all of their staff see stuff that I've used to go in effect so it's a good place to finish",
    "start": "3736910",
    "end": "3742850"
  },
  {
    "text": "thanks for the listening on my my website level of indirection comm reloading read that flash storage /f CPP",
    "start": "3742850",
    "end": "3751280"
  },
  {
    "text": "reps by HTML my second photo all the references to two other talks and",
    "start": "3751280",
    "end": "3757070"
  },
  {
    "text": "material you can find there it's me on Twitter still underscore Nash",
    "start": "3757070",
    "end": "3763090"
  },
  {
    "text": "that's it thanks all for listening [Applause]",
    "start": "3763090",
    "end": "3771980"
  }
]