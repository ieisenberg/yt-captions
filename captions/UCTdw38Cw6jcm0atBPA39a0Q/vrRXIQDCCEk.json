[
  {
    "text": "all right let's get started my name is Kalyn Smith I'll be talking",
    "start": "6000",
    "end": "11400"
  },
  {
    "text": "to you about the basics of how to write a compiler using llvm obviously in a",
    "start": "11400",
    "end": "16680"
  },
  {
    "text": "talk for an hour long I can't really go into a whole lot of detail this entire college curriculums and you can spend a",
    "start": "16680",
    "end": "23100"
  },
  {
    "text": "lifetime writing a programming language right so this is only the basics it's a very high level overview of what the",
    "start": "23100",
    "end": "30060"
  },
  {
    "text": "general process is and how you get a binary at the end first though who am I I'm Caitlin Smith",
    "start": "30060",
    "end": "36780"
  },
  {
    "text": "I am a senior software engineer at Microsoft by day I don't work on any of this stuff though that I'm going to talk",
    "start": "36780",
    "end": "42540"
  },
  {
    "text": "about there um I'm also the creator of the method script programming language and uh",
    "start": "42540",
    "end": "50160"
  },
  {
    "text": "I'll go a little bit more into what methodscript does but it's a I've been I've spent the last decade working on",
    "start": "50160",
    "end": "56039"
  },
  {
    "text": "that it's an up-and-coming language that's somewhere between a toy language and an alpha release please do not use",
    "start": "56039",
    "end": "62039"
  },
  {
    "text": "it for your production stuff but if you play Minecraft it's actually mostly",
    "start": "62039",
    "end": "67260"
  },
  {
    "text": "that's where it's niche is right now so if you run a Minecraft server you may have heard of command helper which is a",
    "start": "67260",
    "end": "73439"
  },
  {
    "text": "plugin for the Java version of the Minecraft server which allows you to run method script in it and that's where",
    "start": "73439",
    "end": "79080"
  },
  {
    "text": "it's primarily used today so I have a cool video a Minecraft video to show you in a little bit",
    "start": "79080",
    "end": "84720"
  },
  {
    "text": "um but yeah if you have a throwaway project or if you're just a language nerd feel free to check it out it's",
    "start": "84720",
    "end": "89960"
  },
  {
    "text": "methodscope.com most of the presentation is actually about llvm sorry uh yeah",
    "start": "89960",
    "end": "95700"
  },
  {
    "text": "we'll we'll switch to C halfway even so it's not just about method script but at",
    "start": "95700",
    "end": "101820"
  },
  {
    "text": "least now you've heard of it so here's the agenda there's just the brief introduction of method script and",
    "start": "101820",
    "end": "107700"
  },
  {
    "text": "and compilers in general what they do uh we'll talk about how you parse",
    "start": "107700",
    "end": "113700"
  },
  {
    "text": "the program whatever that is into an abstract syntax tree the AST you'll see",
    "start": "113700",
    "end": "119579"
  },
  {
    "text": "this term come up quite a lot then we'll take that AST and we'll compile it into",
    "start": "119579",
    "end": "125000"
  },
  {
    "text": "llvm code uh or and then object code and finally a binary and actually most",
    "start": "125000",
    "end": "131099"
  },
  {
    "text": "interestingly the optimizations that llvm does I think that's a very interesting topic to kind",
    "start": "131099",
    "end": "137280"
  },
  {
    "text": "of cover so the objectives there's a lot here and not everybody is a language nerd so uh is there anybody here who",
    "start": "137280",
    "end": "145020"
  },
  {
    "text": "maintains their own compiler one all right so yes just us so",
    "start": "145020",
    "end": "154319"
  },
  {
    "text": "um it's not exactly a popular thing to have to do right but there's nonetheless",
    "start": "154319",
    "end": "159540"
  },
  {
    "text": "quite a lot in there does anybody write regex does anybody write complicated regex",
    "start": "159540",
    "end": "167640"
  },
  {
    "text": "does anybody write complicated regex and then say God there's got to be a better way",
    "start": "167640",
    "end": "173819"
  },
  {
    "text": "yes so usually compilers are the answer to that and compilers should not be the",
    "start": "173819",
    "end": "179400"
  },
  {
    "text": "scary thing they're not just for programming languages you can write small domain-specific programming or",
    "start": "179400",
    "end": "185099"
  },
  {
    "text": "compilers that that work for whatever it is that you're trying to do parsing strings in general and a very generic",
    "start": "185099",
    "end": "192599"
  },
  {
    "text": "and high performance way is almost always better to do with a custom compiler than",
    "start": "192599",
    "end": "200760"
  },
  {
    "text": "it is to use regex not that I'm suggesting you should throw away regex it's useful and it has its place but",
    "start": "200760",
    "end": "206099"
  },
  {
    "text": "compilers are a good generic topic to know a bit about",
    "start": "206099",
    "end": "211340"
  },
  {
    "text": "um and if you're a programmer it's also good to know about these lower level optimizations that happen and the",
    "start": "211500",
    "end": "216959"
  },
  {
    "text": "compile so pretty much every compiler is an optimizing compiler so it's doing a lot of stuff to kind of reef",
    "start": "216959",
    "end": "223260"
  },
  {
    "text": "re-transform your code into something that's more performant and it's important to kind of know what",
    "start": "223260",
    "end": "228900"
  },
  {
    "text": "those optimizations are or at least could be so you can actually see the code that you write isn't what runs it's",
    "start": "228900",
    "end": "234840"
  },
  {
    "text": "the binary and so knowing how you get from the code to the binary and what",
    "start": "234840",
    "end": "239940"
  },
  {
    "text": "kind of things happen in there is is it can be important for writing performant code you don't want to over optimize you",
    "start": "239940",
    "end": "246360"
  },
  {
    "text": "also don't want to sacrifice readability for optimization purposes when the",
    "start": "246360",
    "end": "251519"
  },
  {
    "text": "compiler is just going to do that optimization anyways so it's important to know this stuff even if you're not planning on writing a compiler and if",
    "start": "251519",
    "end": "258419"
  },
  {
    "text": "you aren't writing a compiler talk to me after so a few disclaimers here I'm not an",
    "start": "258419",
    "end": "264600"
  },
  {
    "text": "expert I'm just three beginners in a trench coat when it comes to lvm stuff um",
    "start": "264600",
    "end": "270780"
  },
  {
    "text": "I don't know might be my answer for some questions that are specific about llvm a lot of the stuff that I do I just copy",
    "start": "270780",
    "end": "277979"
  },
  {
    "text": "from clang without question and uh and some of it doesn't make sense to me or I",
    "start": "277979",
    "end": "284759"
  },
  {
    "text": "have a very very basic understanding of what it is so but what I have works at",
    "start": "284759",
    "end": "289979"
  },
  {
    "text": "least and what I've got in the slides I know about but beyond that I might not be able to say a whole lot also native",
    "start": "289979",
    "end": "296460"
  },
  {
    "text": "method script which is compiling method scripts to binaries rather than running it in Java which I'll show you a diagram",
    "start": "296460",
    "end": "302280"
  },
  {
    "text": "of later that's just starting out so we will swap to C Midway",
    "start": "302280",
    "end": "308040"
  },
  {
    "text": "um also the presentation uses llvm12 so the current version is 15. the stuff",
    "start": "308040",
    "end": "314160"
  },
  {
    "text": "should all be still relevant but just in case there's some differences there's were a few versions behind",
    "start": "314160",
    "end": "321060"
  },
  {
    "text": "so here's uh hello world and Method script so hopefully you can understand what's",
    "start": "321060",
    "end": "326759"
  },
  {
    "text": "going on here we're assigning a variable we are printing that variable out we're",
    "start": "326759",
    "end": "332820"
  },
  {
    "text": "printing out a red Hello World so there's a couple of functions here string",
    "start": "332820",
    "end": "338280"
  },
  {
    "text": "concatenation assignment variable interpolation basic stuff this is about as basic as",
    "start": "338280",
    "end": "344340"
  },
  {
    "text": "you can get without just messaging out a string here it is running in real life so it is",
    "start": "344340",
    "end": "349620"
  },
  {
    "text": "a real programming language but we have a house here in Minecraft and we hit the doorbell and we get a text message",
    "start": "349620",
    "end": "354840"
  },
  {
    "text": "so it's mostly used in Minecraft but it's it's unbounded it is a real",
    "start": "354840",
    "end": "360900"
  },
  {
    "text": "programming language this is what the code for that looks like it's very little code so we're",
    "start": "360900",
    "end": "366479"
  },
  {
    "text": "binding to the player interact event if that event happened at a specific location in the game World then we send",
    "start": "366479",
    "end": "372479"
  },
  {
    "text": "an SMS and that's it so it's for what you get uh it's it's a very",
    "start": "372479",
    "end": "378120"
  },
  {
    "text": "straightforward language it's easy to learn I have a lot of people who have told me that they couldn't",
    "start": "378120",
    "end": "384060"
  },
  {
    "text": "figure out JavaScript or whatever other language and they played around with method script and especially in in Minecraft it's really especially younger",
    "start": "384060",
    "end": "391319"
  },
  {
    "text": "people it's very motivating so it's an educational language in that sense",
    "start": "391319",
    "end": "396900"
  },
  {
    "text": "so how is a method script organized we have the functions which are the intermediate representation the AST",
    "start": "396900",
    "end": "403020"
  },
  {
    "text": "there's a compiler that takes the source code and spits out this AST there's tooling so there's an IDE and",
    "start": "403020",
    "end": "409919"
  },
  {
    "text": "stuff that kind of sits on top of that these get output to the jvm which is currently the reference implementation",
    "start": "409919",
    "end": "415919"
  },
  {
    "text": "and the most complete implementation and this is what's running in Minecraft um but what I wanted to do is that",
    "start": "415919",
    "end": "422160"
  },
  {
    "text": "because this requires the jvm and Java and everything has to be installed what I want to do is to actually compile to",
    "start": "422160",
    "end": "428280"
  },
  {
    "text": "llvm when you compile to llvm you get by native binaries for free basically",
    "start": "428280",
    "end": "436139"
  },
  {
    "text": "um so these are the platforms and the runtimes and for the Minecraft stuff there's Minecraft functions like setting",
    "start": "436139",
    "end": "441720"
  },
  {
    "text": "getting blocks and whatever that kind of sits on top of the jvm but that's not really part of method script",
    "start": "441720",
    "end": "448800"
  },
  {
    "text": "um so a quick intro about llvm so there's several languages or compilers",
    "start": "448800",
    "end": "455580"
  },
  {
    "text": "on the left here these are the front ends so clang for C and C plus plus I'll go for laying and rust C for rust and",
    "start": "455580",
    "end": "463919"
  },
  {
    "text": "then on the other side we have the targets which are the CPU architectures x86 arm power PC m1s all that's all",
    "start": "463919",
    "end": "471120"
  },
  {
    "text": "that's there was some is not really a CPU architecture but I put it here because it is a target",
    "start": "471120",
    "end": "477419"
  },
  {
    "text": "um so that's the web assembly if you're familiar with that it's different uh it doesn't really belong in this list but",
    "start": "477419",
    "end": "482880"
  },
  {
    "text": "it's nonetheless got a back end in love that's at least partially supported uh",
    "start": "482880",
    "end": "489479"
  },
  {
    "text": "there's a lot I mean there's you can do very real stuff with it but it's kind of a newer technology maybe not so mature",
    "start": "489479",
    "end": "495000"
  },
  {
    "text": "but before llvm this is what it would look like so every compiler writer that",
    "start": "495000",
    "end": "500759"
  },
  {
    "text": "wanted to Target each of these CPU architectures would create a compiler for each of those and each of these",
    "start": "500759",
    "end": "507120"
  },
  {
    "text": "lines represents a lot of work so if you wanted to support uh you know Intel and",
    "start": "507120",
    "end": "514320"
  },
  {
    "text": "mac and whatever else you basically end up writing two or three compilers some",
    "start": "514320",
    "end": "520320"
  },
  {
    "text": "of the work can be reused but the actual conversion to the the assembly or",
    "start": "520320",
    "end": "525420"
  },
  {
    "text": "whatever that's got to be redone each time so this is just a lot of work llvm",
    "start": "525420",
    "end": "531180"
  },
  {
    "text": "came in and said no no this is too many lines so we're going to get rid of all these lines we're going to sit on the",
    "start": "531180",
    "end": "536519"
  },
  {
    "text": "middle and you're going to Target llvm as a compiler writer and we will Target all",
    "start": "536519",
    "end": "543600"
  },
  {
    "text": "of these targets as llvm and what's cool about this graph is first of all it's",
    "start": "543600",
    "end": "548760"
  },
  {
    "text": "less lines in general each line still represents a lot of work but there's less lines overall and each like person",
    "start": "548760",
    "end": "557459"
  },
  {
    "text": "has to only deal with one line so if you're a compiler writer you just worry",
    "start": "557459",
    "end": "562680"
  },
  {
    "text": "about writing your compiler if you're a CPU architect you worry about converting",
    "start": "562680",
    "end": "568380"
  },
  {
    "text": "llvm to your CPU but there's this kind of standard abstraction layer sitting in",
    "start": "568380",
    "end": "573540"
  },
  {
    "text": "the middle so llvm used to stand for low-level virtual machine they want to be very",
    "start": "573540",
    "end": "579540"
  },
  {
    "text": "clear that it no longer stands for that it's just llvm and it makes sense",
    "start": "579540",
    "end": "585839"
  },
  {
    "text": "because it is low level but it's not a virtual machine in any sense of that word maybe it was back when the project",
    "start": "585839",
    "end": "592860"
  },
  {
    "text": "started or whatever but it's it's uh it's just an abstraction layer between the compiler and the the CPU",
    "start": "592860",
    "end": "601760"
  },
  {
    "text": "um there's also lots of optimizations that llvm provides and what's really cool",
    "start": "601920",
    "end": "607680"
  },
  {
    "text": "about these is that if you write a new optimization for llvm code everybody on the left and the right benefits from",
    "start": "607680",
    "end": "614279"
  },
  {
    "text": "this so it's actually really impactful if you can come up with some cool new optimization on llvm stuff everybody and",
    "start": "614279",
    "end": "622019"
  },
  {
    "text": "the whole ecosystem benefits from that Microsoft and Google are really starting",
    "start": "622019",
    "end": "627480"
  },
  {
    "text": "to bet big on llvm as well so Microsoft's using it for Quantum Computing projects clang has fully",
    "start": "627480",
    "end": "634560"
  },
  {
    "text": "supported in visual studio now Chrome has ditched msvc for for clang on",
    "start": "634560",
    "end": "641459"
  },
  {
    "text": "windows so these are real production projects these aren't little toy projects or whatever llvm is really",
    "start": "641459",
    "end": "647579"
  },
  {
    "text": "getting some real traction it's actually been around for a while it's been around since 2000 when it was very first",
    "start": "647579",
    "end": "654360"
  },
  {
    "text": "started but it's you know it's very hard to kind of break into this compiler space and get people to use use your",
    "start": "654360",
    "end": "660959"
  },
  {
    "text": "stuff right so it's been a bit but it's coming along and it's it's very much",
    "start": "660959",
    "end": "666000"
  },
  {
    "text": "maturing these days foreign ERS you know uh zero indexed and",
    "start": "666000",
    "end": "672779"
  },
  {
    "text": "floating Point means you can have quite a lot of numbers in between right so there's 3.0 easy steps to writing a",
    "start": "672779",
    "end": "679560"
  },
  {
    "text": "compiler uh first Sub-Zero is uh to design the language and this is just",
    "start": "679560",
    "end": "684959"
  },
  {
    "text": "left as an exercise for the reader it's got an infinite number of points between there though",
    "start": "684959",
    "end": "690240"
  },
  {
    "text": "um the next step is to compile the AST compiled to llvmir which IR is the",
    "start": "690240",
    "end": "697260"
  },
  {
    "text": "intermediate representation this is kind of the human readable assembly it's not",
    "start": "697260",
    "end": "702779"
  },
  {
    "text": "really assembly but it kind of looks like it um and or bit code bit code and IR are",
    "start": "702779",
    "end": "708360"
  },
  {
    "text": "one to one but obviously for presentation purposes it's it's much better to show you the IR not the bit",
    "start": "708360",
    "end": "714180"
  },
  {
    "text": "code so I'll be using that but those are interchangeable uh and then finally you use the llvm",
    "start": "714180",
    "end": "720720"
  },
  {
    "text": "tool chain to create the native binaries so let's talk about compiling the AST so",
    "start": "720720",
    "end": "726660"
  },
  {
    "text": "what is an AST what is an abstract syntax tree so let's take the simple program two plus three plus four this is",
    "start": "726660",
    "end": "733019"
  },
  {
    "text": "a program we could also rewrite this as a a prefix notation also known as like a",
    "start": "733019",
    "end": "740100"
  },
  {
    "text": "just regular function call so we're calling the function add and we're sending it the parameters two three and",
    "start": "740100",
    "end": "746220"
  },
  {
    "text": "four and this is what the tree would look like for this program so at the root we have the function itself and",
    "start": "746220",
    "end": "752760"
  },
  {
    "text": "then any arguments that are passed are Leaf nodes the leaf nodes can also be other function columns as well so it's",
    "start": "752760",
    "end": "759480"
  },
  {
    "text": "not just it doesn't have to be these Atomic values or whatever it can be much more complicated but for this program",
    "start": "759480",
    "end": "765540"
  },
  {
    "text": "this is what the AST looks like and this is kind of the uh data data structure",
    "start": "765540",
    "end": "770760"
  },
  {
    "text": "representation of a program so how do we get that the first step is",
    "start": "770760",
    "end": "777360"
  },
  {
    "text": "to Lex so Lexing is when you take the program and you read it in one character at a time",
    "start": "777360",
    "end": "783000"
  },
  {
    "text": "and the lecture knows about certain specific types of characters like left left parentheses and commas and things",
    "start": "783000",
    "end": "789360"
  },
  {
    "text": "so what it sees in this program is ADD left parentheses two comma 3 comma four",
    "start": "789360",
    "end": "795060"
  },
  {
    "text": "right parentheses it says that a D and D go together that's one lexime or one token and so we",
    "start": "795060",
    "end": "803279"
  },
  {
    "text": "create an identifier is what this is called and we actually need a bit more context to be able to say what it is",
    "start": "803279",
    "end": "809820"
  },
  {
    "text": "identifying that comes later in the parsing step but we get each of these tokens here uh that are that are kind of",
    "start": "809820",
    "end": "816600"
  },
  {
    "text": "combined into their logical lexime uh next the partial takes over and it's",
    "start": "816600",
    "end": "823440"
  },
  {
    "text": "it sees that there's an identifier here that's followed by a left parenthesis so that must mean that this is a function",
    "start": "823440",
    "end": "829380"
  },
  {
    "text": "call um so we we create the kind of top level node there",
    "start": "829380",
    "end": "835320"
  },
  {
    "text": "left parenthesis means we start a new row on the tree so we go down one level uh if we if we encounter a right",
    "start": "835320",
    "end": "842279"
  },
  {
    "text": "parentheses we go up a level comma means start a new new node on the same row",
    "start": "842279",
    "end": "848760"
  },
  {
    "text": "conceptually it's pretty simple to explain I think um it can definitely be difficult it's",
    "start": "848760",
    "end": "855300"
  },
  {
    "text": "basically just a big switch statement in your lecture there's a lot of other you can generate if you write a grammar for",
    "start": "855300",
    "end": "861420"
  },
  {
    "text": "instance you can get these things for free but I think it's just as easy to write the actual lecture yourself",
    "start": "861420",
    "end": "868260"
  },
  {
    "text": "so once you have this AST it's just a tree in memory the next thing to do is to compile it to lvmr or the bitcode",
    "start": "868260",
    "end": "875700"
  },
  {
    "text": "directly if you're if you're using the the apis and stuff",
    "start": "875700",
    "end": "880880"
  },
  {
    "text": "so the first step is to flatten the tree this is basically just a depth first",
    "start": "880980",
    "end": "888199"
  },
  {
    "text": "recursion through the tree so so you you get this flat structure here and uh then",
    "start": "888199",
    "end": "895620"
  },
  {
    "text": "we take this structure and we go from top to bottom and we create the IR so each node is kind of handled",
    "start": "895620",
    "end": "902880"
  },
  {
    "text": "independently from the rest so in that previous tree that we had what we're doing here is we're saying a the local",
    "start": "902880",
    "end": "910139"
  },
  {
    "text": "variable a equals the i-32 2 B is 3 C is",
    "start": "910139",
    "end": "916800"
  },
  {
    "text": "four the add function has to do an intermediate step because the add",
    "start": "916800",
    "end": "923339"
  },
  {
    "text": "instruction provided by lvm only does you can only add two numbers at once so we do add a",
    "start": "923339",
    "end": "931079"
  },
  {
    "text": "and b we store that into an intermediate and then we do I that intermediate plus C and then we sort that into the result",
    "start": "931079",
    "end": "939600"
  },
  {
    "text": "so this is real llvmir it's simplified in the sense that there's some boilerplate and stuff that I haven't",
    "start": "939600",
    "end": "945779"
  },
  {
    "text": "shown you but this is It's relatively straightforward to understand especially",
    "start": "945779",
    "end": "951120"
  },
  {
    "text": "for something this simple and if you know any kind of assembly you might you might be like ah yeah yeah I recognize",
    "start": "951120",
    "end": "957300"
  },
  {
    "text": "this now so here's the full program and this is",
    "start": "957300",
    "end": "962519"
  },
  {
    "text": "there's a lot of stuff here that you don't really need to know the target data layout at the top is saying that",
    "start": "962519",
    "end": "968820"
  },
  {
    "text": "we're using little ndn we're using Windows name mangling here's the alignment information the target triple",
    "start": "968820",
    "end": "974760"
  },
  {
    "text": "is interesting though this is what architecture we're targeting and Tool chains and stuff that we're trying to",
    "start": "974760",
    "end": "980220"
  },
  {
    "text": "emulate um we're creating a global variable here",
    "start": "980220",
    "end": "985260"
  },
  {
    "text": "uh on this line here where where we store the constant string hello world",
    "start": "985260",
    "end": "990720"
  },
  {
    "text": "which is uh length 14 I8 it's an array of length 14 containing i8s",
    "start": "990720",
    "end": "999540"
  },
  {
    "text": "and it's a global variable that's what the at signs mean we're defining a method here Main and we",
    "start": "999540",
    "end": "1006199"
  },
  {
    "text": "take some arguments these are ARG V and Arc C then we're calling puts puts is",
    "start": "1006199",
    "end": "1011420"
  },
  {
    "text": "the C standard Library way of writing to the console and we're sending it this is",
    "start": "1011420",
    "end": "1016759"
  },
  {
    "text": "complicated but we're basically getting a pointer to this string here",
    "start": "1016759",
    "end": "1021860"
  },
  {
    "text": "um and so we're basically doing a system out here and then we return zero we also",
    "start": "1021860",
    "end": "1027140"
  },
  {
    "text": "have a forward Declaration of the puts because puts is defined in the C standard Library we are not defining it",
    "start": "1027140",
    "end": "1032959"
  },
  {
    "text": "so we're saying this will be here the Linker will fix it so the compiler can move on with its",
    "start": "1032959",
    "end": "1039620"
  },
  {
    "text": "life so here's a more complicated example this is the Rand function and Method",
    "start": "1039620",
    "end": "1044839"
  },
  {
    "text": "script um so you'll note the the red lines uh it's kind of funny when you make a",
    "start": "1044839",
    "end": "1050299"
  },
  {
    "text": "presentation you look really really critically about what you're putting in the slides and I discovered a bug in",
    "start": "1050299",
    "end": "1056840"
  },
  {
    "text": "method script so I fixed the bug so these lines are not there anymore but",
    "start": "1056840",
    "end": "1061880"
  },
  {
    "text": "what's even funnier is when I get to the optimizations we're going to come back to this example it doesn't actually",
    "start": "1061880",
    "end": "1067039"
  },
  {
    "text": "matter at all but I fixed the bug but anyways the the red lines just ignore those",
    "start": "1067039",
    "end": "1072559"
  },
  {
    "text": "so what we're doing in method script Rand with no parameters returns a value between 0 and 1 a double so the C",
    "start": "1072559",
    "end": "1079940"
  },
  {
    "text": "standard Library provides the Rand function which returns an integer and specifically on Windows it returns a",
    "start": "1079940",
    "end": "1085880"
  },
  {
    "text": "16-bit integer and I wanted more discrete steps there between between each value so what I'm doing is I'm",
    "start": "1085880",
    "end": "1091340"
  },
  {
    "text": "calling Rand twice and then shifting left the first one doing a bitwise or with",
    "start": "1091340",
    "end": "1098059"
  },
  {
    "text": "the second one doing an unsigned int to floating point conversion of that value and then dividing by the maximum Rand",
    "start": "1098059",
    "end": "1105140"
  },
  {
    "text": "number so that gives us a number between 0 and 1. uh we're not doing anything",
    "start": "1105140",
    "end": "1110419"
  },
  {
    "text": "with this value so we're just returning 0 after but let's do something with it now",
    "start": "1110419",
    "end": "1117200"
  },
  {
    "text": "and by the way there's also the four declaration here of this this round because that's also provided by the",
    "start": "1117200",
    "end": "1123320"
  },
  {
    "text": "standard Library so now let's actually output it so this code here is the same as as on that last slide so don't um",
    "start": "1123320",
    "end": "1130580"
  },
  {
    "text": "don't get too hung up on that I'll zoom in here um so what we're doing this is a little",
    "start": "1130580",
    "end": "1137480"
  },
  {
    "text": "bit complicated because we we're we're converting method script Concepts into Concepts that the C standard Library can",
    "start": "1137480",
    "end": "1144260"
  },
  {
    "text": "support so it's not always like ideal or whatever you just this is how you have",
    "start": "1144260",
    "end": "1149539"
  },
  {
    "text": "to do it so what we're doing is we're using S printf to convert the decimal",
    "start": "1149539",
    "end": "1154820"
  },
  {
    "text": "number into a string because we know we're about to Output it and we have to do that conversion first so this is the",
    "start": "1154820",
    "end": "1161240"
  },
  {
    "text": "S printf we're doing it a Loca and all of the stuff Alex I'll explain a local later",
    "start": "1161240",
    "end": "1166940"
  },
  {
    "text": "um but esperanf here is kind of storing the the converted value into the buffer",
    "start": "1166940",
    "end": "1171980"
  },
  {
    "text": "and then we output the buffer so now let's build on this a little bit",
    "start": "1171980",
    "end": "1177200"
  },
  {
    "text": "more so now we're going to call Rand store it",
    "start": "1177200",
    "end": "1182840"
  },
  {
    "text": "and a variable and then output that variable and actually uh",
    "start": "1182840",
    "end": "1189940"
  },
  {
    "text": "yeah so there's the same here is at the beginning and at the end it's the same",
    "start": "1190880",
    "end": "1196280"
  },
  {
    "text": "stuff but we have this block here in the middle that's new and I will zoom in on that so what we're",
    "start": "1196280",
    "end": "1204020"
  },
  {
    "text": "doing here this assignment a Loca is an important call this comes up quite a lot so what this does is this allocates",
    "start": "1204020",
    "end": "1210200"
  },
  {
    "text": "memory on the stack and we are storing the value of the output from the",
    "start": "1210200",
    "end": "1216799"
  },
  {
    "text": "previous operation in that stack the the memory that we've allocated On",
    "start": "1216799",
    "end": "1223280"
  },
  {
    "text": "The Stack and then we're again loading it back into a register so I these are",
    "start": "1223280",
    "end": "1229460"
  },
  {
    "text": "local variables the 10 and 11. they're local variables but llvm allows us to",
    "start": "1229460",
    "end": "1234980"
  },
  {
    "text": "kind of think of them as registers and llvm gives us an infinite number of",
    "start": "1234980",
    "end": "1241460"
  },
  {
    "text": "them obviously that's an abstraction CPUs don't have an infinite number of registers but we can think of the the",
    "start": "1241460",
    "end": "1248059"
  },
  {
    "text": "local variables as registers and then whenever you're modifying something on the stack you think of that as memory",
    "start": "1248059",
    "end": "1254900"
  },
  {
    "text": "but we'll come back to this when we get to the optimizations so this is",
    "start": "1254900",
    "end": "1260600"
  },
  {
    "text": "inefficient though this is weird and it's inefficient but the cool thing about it is that if we look at the",
    "start": "1260600",
    "end": "1266539"
  },
  {
    "text": "actual code here um oops so this is uh the Rand function or the",
    "start": "1266539",
    "end": "1274520"
  },
  {
    "text": "output of the Rand function this is the output of the assignment function and this is the output of sys out and",
    "start": "1274520",
    "end": "1279980"
  },
  {
    "text": "they're totally independent from each other so as a compiler writer I don't have to really worry about the interaction I just have to do what the",
    "start": "1279980",
    "end": "1286280"
  },
  {
    "text": "code said and so I take the the abstract syntax tree and I print it out I do my",
    "start": "1286280",
    "end": "1292520"
  },
  {
    "text": "own optimizations on top first but once I have my optimized version I don't have to go too crazy with it",
    "start": "1292520",
    "end": "1300519"
  },
  {
    "text": "so the next step once you have this IR code is quite straightforward it's it's really just up to the llvm tool chain",
    "start": "1300559",
    "end": "1307460"
  },
  {
    "text": "after this so there's kind of a lot here so I'll I'll focus on specific things so the first step is to call LLC this is",
    "start": "1307460",
    "end": "1314179"
  },
  {
    "text": "the llvm compiler this takes as input the LL file the IR that we had written",
    "start": "1314179",
    "end": "1320120"
  },
  {
    "text": "either by hand or through our compilation process and we're saying we",
    "start": "1320120",
    "end": "1325280"
  },
  {
    "text": "want an object file and you do this on a per file basis then we call link and you can use any",
    "start": "1325280",
    "end": "1332659"
  },
  {
    "text": "system Linker or whatever but lvm has its own which is what I'm using here we",
    "start": "1332659",
    "end": "1338299"
  },
  {
    "text": "send it all of these object files that we had created and we're linking it with the standard Library so these are the",
    "start": "1338299",
    "end": "1344659"
  },
  {
    "text": "this is where the Rand and puts functions and everything else live in at",
    "start": "1344659",
    "end": "1350120"
  },
  {
    "text": "least windows in these lib files lib files if you're familiar with dlls libs",
    "start": "1350120",
    "end": "1356360"
  },
  {
    "text": "are the the static include version of dlls basically",
    "start": "1356360",
    "end": "1362360"
  },
  {
    "text": "there's a lot of other stuff there that is you know passed to things and whatever finally we",
    "start": "1362360",
    "end": "1369380"
  },
  {
    "text": "we output main.exe so this is the tool chain so once you've got the IR written this is",
    "start": "1369380",
    "end": "1375320"
  },
  {
    "text": "what you run and you get the the binaries and this works more or less the same on Linux and mac and stuff",
    "start": "1375320",
    "end": "1382100"
  },
  {
    "text": "so that's it that's how you write a compiler but let's talk about some of these optimizations because they're",
    "start": "1382100",
    "end": "1387559"
  },
  {
    "text": "really really cool first on let's just review the memory model of a computer so we have the",
    "start": "1387559",
    "end": "1394340"
  },
  {
    "text": "physical layer here um physical",
    "start": "1394340",
    "end": "1399679"
  },
  {
    "text": "the places that you can store memory in a computer first is the CPU there's also",
    "start": "1399679",
    "end": "1406159"
  },
  {
    "text": "the CPU cache L1 L2 and sometimes L3 and then finally RAM and it goes from",
    "start": "1406159",
    "end": "1412280"
  },
  {
    "text": "fastest to slowest we don't really have a lot of visibility on the CPU cache it",
    "start": "1412280",
    "end": "1417320"
  },
  {
    "text": "just does that as part of the hardware so we don't have a lot of visibility into that but in and and then on the",
    "start": "1417320",
    "end": "1423260"
  },
  {
    "text": "logical level we have registers the stack and then the Heap all else being equal if you can if if",
    "start": "1423260",
    "end": "1430220"
  },
  {
    "text": "the the thing that you're trying to do makes sense to do this for you want to",
    "start": "1430220",
    "end": "1435620"
  },
  {
    "text": "move that as far to the left as possible so you would prefer that your memory is",
    "start": "1435620",
    "end": "1441080"
  },
  {
    "text": "always coming from the CPU if it must come from Ram you would",
    "start": "1441080",
    "end": "1446539"
  },
  {
    "text": "prefer it to come from the stack and then and then finally the Heap certain problems",
    "start": "1446539",
    "end": "1452179"
  },
  {
    "text": "can't be solved you can't store a dynamic array in the CPU for instance so",
    "start": "1452179",
    "end": "1458179"
  },
  {
    "text": "some problems must be put in a certain location but again all else being equal",
    "start": "1458179",
    "end": "1463520"
  },
  {
    "text": "we want to move this as far to the left as possible these memory accesses",
    "start": "1463520",
    "end": "1469299"
  },
  {
    "text": "so let's go back to this slide so this is the the rent and then says",
    "start": "1469400",
    "end": "1475700"
  },
  {
    "text": "out so what we're going to do first is we're going to run the opt tool so",
    "start": "1475700",
    "end": "1481460"
  },
  {
    "text": "optimizations normally happen when you use the tool chain assuming you don't say oh zero but what we can do with the",
    "start": "1481460",
    "end": "1488720"
  },
  {
    "text": "Ops tools we can run specific optimization passes so there's a lot of them out there but if we want to see",
    "start": "1488720",
    "end": "1495440"
  },
  {
    "text": "each step one at a time what the optimizations are doing we can use this tool what I'm doing here is I'm calling",
    "start": "1495440",
    "end": "1501620"
  },
  {
    "text": "mem to Reg and it does what it sounds like it moves any accesses that it can from memory if we're if we're using the",
    "start": "1501620",
    "end": "1508880"
  },
  {
    "text": "stack or then it's going to try and move those into register reads and writes",
    "start": "1508880",
    "end": "1514280"
  },
  {
    "text": "instead so this is the same program as before but what you what you notice now is that",
    "start": "1514280",
    "end": "1519980"
  },
  {
    "text": "I've basically this is the round call here and this is the uh sysound call",
    "start": "1519980",
    "end": "1527360"
  },
  {
    "text": "we've kind of removed that middle inefficient section because we weren't actually needing to put that in in the",
    "start": "1527360",
    "end": "1534679"
  },
  {
    "text": "stack it was uh it could have been in any value that's representable as an",
    "start": "1534679",
    "end": "1539779"
  },
  {
    "text": "integer including doubles which are just basically integers with a fancy format",
    "start": "1539779",
    "end": "1546080"
  },
  {
    "text": "um those those all lend themselves to being stored into the registers and so",
    "start": "1546080",
    "end": "1551539"
  },
  {
    "text": "llvm saw that and it said okay let's get rid of these and put them into",
    "start": "1551539",
    "end": "1557320"
  },
  {
    "text": "into the registers instead um you'll also notice that I'm using",
    "start": "1557320",
    "end": "1564080"
  },
  {
    "text": "these monotonically increasing numbers on the left that's because",
    "start": "1564080",
    "end": "1570200"
  },
  {
    "text": "lovm has this concept called Static single assignment",
    "start": "1570200",
    "end": "1575240"
  },
  {
    "text": "and so what we can't do is we cannot assign a value into a register more than",
    "start": "1575240",
    "end": "1581659"
  },
  {
    "text": "once so you can kind of think of these values the the local variables as",
    "start": "1581659",
    "end": "1587299"
  },
  {
    "text": "constants so you can only assign them once you can change the value if they",
    "start": "1587299",
    "end": "1592400"
  },
  {
    "text": "point to some value in memory you can change the value of that memory but you cannot reassign that register",
    "start": "1592400",
    "end": "1599299"
  },
  {
    "text": "it really is a weird way of thinking about things but this is kind of what enables that abstraction of infinite",
    "start": "1599299",
    "end": "1606440"
  },
  {
    "text": "registers and to be able to do some of these optimizations",
    "start": "1606440",
    "end": "1611480"
  },
  {
    "text": "um so there's a really interesting Wikipedia article on static single assignment uh I if you're interested in",
    "start": "1611480",
    "end": "1618380"
  },
  {
    "text": "this anyways it's a good read uh yeah so remember this this a loco",
    "start": "1618380",
    "end": "1626179"
  },
  {
    "text": "store load pattern what do you do if you have to write a",
    "start": "1626179",
    "end": "1631880"
  },
  {
    "text": "value to it multiple times so maybe you have an if block and some conditional you either write one value or the next",
    "start": "1631880",
    "end": "1639080"
  },
  {
    "text": "that means you're going to have multiple stores there but how do you do that how do you move that to us this kind of",
    "start": "1639080",
    "end": "1646400"
  },
  {
    "text": "constant everything's a constant thing well let's take a look so here's a",
    "start": "1646400",
    "end": "1653900"
  },
  {
    "text": "simple C program we are assigning we're declaring I and",
    "start": "1653900",
    "end": "1659120"
  },
  {
    "text": "then based on some user input we're either assigning 42 or 7 to it and then we're returning it",
    "start": "1659120",
    "end": "1665240"
  },
  {
    "text": "so let's do we're going to use we're switching to C now so let's use clang and we'll tell it to do no optimizations",
    "start": "1665240",
    "end": "1671779"
  },
  {
    "text": "at all and what this is what we get This is complicated clang does a lot of",
    "start": "1671779",
    "end": "1677120"
  },
  {
    "text": "extra stuff that I can't really explain but I've annotated the important bits",
    "start": "1677120",
    "end": "1682460"
  },
  {
    "text": "here so there at six is the Declaration of of I",
    "start": "1682460",
    "end": "1687919"
  },
  {
    "text": "um we're doing the if the the conditional and the if statement there in the next section here so this is",
    "start": "1687919",
    "end": "1694640"
  },
  {
    "text": "where we do you know is ARG Arc C greater than one if so we store that to eight then if eight we go to 9 else 10.",
    "start": "1694640",
    "end": "1703299"
  },
  {
    "text": "in 9 we assign I to 42 and go to 11 down here and then the else block here is set",
    "start": "1703299",
    "end": "1711080"
  },
  {
    "text": "I to seven and then again go to 11. then we load the value that wasn't I into 12",
    "start": "1711080",
    "end": "1716480"
  },
  {
    "text": "and then return 12. so how does it optimize this so let's run reg mem to Reg on this",
    "start": "1716480",
    "end": "1725139"
  },
  {
    "text": "so we have the same comparison here this is the ARG C is is less than one uh and",
    "start": "1725299",
    "end": "1731840"
  },
  {
    "text": "then and then break and either go to four or five these are empty though and we have this Phi node",
    "start": "1731840",
    "end": "1739760"
  },
  {
    "text": "so a fine note is an interesting concept that kind of inverts that you're thinking on its head so what",
    "start": "1739760",
    "end": "1746179"
  },
  {
    "text": "a fine note says is what what branch or what block did I just come from",
    "start": "1746179",
    "end": "1752419"
  },
  {
    "text": "and if I just came from block four then set return the value 42 and if I",
    "start": "1752419",
    "end": "1759020"
  },
  {
    "text": "just came from block five return the value 7. and that's that's what this output is is Health this is provided by",
    "start": "1759020",
    "end": "1766460"
  },
  {
    "text": "clang this is what clang outputs but that's why because this says that from block 6 we either came from block five",
    "start": "1766460",
    "end": "1773899"
  },
  {
    "text": "or four and from from this block we we came we always came from block two which is an",
    "start": "1773899",
    "end": "1780980"
  },
  {
    "text": "implied block two up here um so there's still some additional",
    "start": "1780980",
    "end": "1787520"
  },
  {
    "text": "optimization to be done here but this is this is how you do it this is how llvm",
    "start": "1787520",
    "end": "1792679"
  },
  {
    "text": "does it so we're back to not using the the ram anymore it's all registers",
    "start": "1792679",
    "end": "1797960"
  },
  {
    "text": "now so this is really cool the further optimizations of course we remove the empty Branch statements there",
    "start": "1797960",
    "end": "1804260"
  },
  {
    "text": "and it doesn't even need a fine node in this case a select is good enough and it selected basically says if this value is",
    "start": "1804260",
    "end": "1810799"
  },
  {
    "text": "true return return based on that so let's talk about Loop unrolling and",
    "start": "1810799",
    "end": "1817580"
  },
  {
    "text": "instruction combination this is a bit more complicated of an example so here we have some code where we loop from 1",
    "start": "1817580",
    "end": "1825440"
  },
  {
    "text": "to 10 exclusive and we increment ARG C then we return rxc so what does this",
    "start": "1825440",
    "end": "1831440"
  },
  {
    "text": "code look like without optimization this is a lot of code sorry I couldn't",
    "start": "1831440",
    "end": "1836720"
  },
  {
    "text": "get it uh any any shorter than this but basically what we do is this is the anti",
    "start": "1836720",
    "end": "1845720"
  },
  {
    "text": "assignment in in the for Loop then we have the if I is less than 10 part then",
    "start": "1845720",
    "end": "1852020"
  },
  {
    "text": "we do the guts of the for Loop which is adding one two two I or sorry rxc is",
    "start": "1852020",
    "end": "1858320"
  },
  {
    "text": "what we had then we do the the last step of the four which is adding one to I and",
    "start": "1858320",
    "end": "1864860"
  },
  {
    "text": "then depending on the values we we loop back up to to the conditional or we exit",
    "start": "1864860",
    "end": "1870860"
  },
  {
    "text": "so there's there's a lot of stuff here that is kind of irrelevant but we're basically doing some ads more or less",
    "start": "1870860",
    "end": "1877760"
  },
  {
    "text": "right um so what if we do full optimizations what do",
    "start": "1877760",
    "end": "1883880"
  },
  {
    "text": "we get out of this it's quite simple so actually this was a",
    "start": "1883880",
    "end": "1889159"
  },
  {
    "text": "very contrived example this is just a really fancy way to add nine that's what",
    "start": "1889159",
    "end": "1894620"
  },
  {
    "text": "we were doing really and lvm saw right through that and that's what it",
    "start": "1894620",
    "end": "1899779"
  },
  {
    "text": "converted it to after the optimization so how did it do this this is actually a really cool trick uh how does it know",
    "start": "1899779",
    "end": "1906620"
  },
  {
    "text": "how does obviously as humans we can look at this code and say oh you're just adding nine but how does the compiler",
    "start": "1906620",
    "end": "1912440"
  },
  {
    "text": "get to this generically well let's step through it one optimization at a time so the first step to run is the mem to",
    "start": "1912440",
    "end": "1918740"
  },
  {
    "text": "wrench which is pretty much a prerequisite for most other optimizations this this code we ended up with a couple",
    "start": "1918740",
    "end": "1924980"
  },
  {
    "text": "of fine notes Here we still have our ad here this is the adding one to rxc we",
    "start": "1924980",
    "end": "1932240"
  },
  {
    "text": "also have the ad for the counter variable here um this this block three here is is",
    "start": "1932240",
    "end": "1938840"
  },
  {
    "text": "rather complicated and not maybe not so necessary to fully understand let's do one more optimization which is loop",
    "start": "1938840",
    "end": "1945020"
  },
  {
    "text": "unroll so Loop unrolling is basically where you take you trade off program signs for for",
    "start": "1945020",
    "end": "1952580"
  },
  {
    "text": "runtime complexity um so um what we've basically done is we copy",
    "start": "1952580",
    "end": "1960080"
  },
  {
    "text": "paste each internal of the loop nine times and so that's what's that's what's",
    "start": "1960080",
    "end": "1966380"
  },
  {
    "text": "happened here but we're still a long way from just add nine so what's the next step the next",
    "start": "1966380",
    "end": "1972200"
  },
  {
    "text": "step is to do a simplified control flow graph so what we what we actually what",
    "start": "1972200",
    "end": "1977360"
  },
  {
    "text": "you notice here is there's there's a lot of stuff here that's like we're just in Block 10 and we go to 11. i i there's no",
    "start": "1977360",
    "end": "1984679"
  },
  {
    "text": "absolutely no need for this so simplify uh CFG",
    "start": "1984679",
    "end": "1990159"
  },
  {
    "text": "simplifies the control flow graph and gets rid of these unnecessary breaks",
    "start": "1990159",
    "end": "1996200"
  },
  {
    "text": "jumps and stuff so this is kind of the core of the loop here this is what we end up with we add one and one and one",
    "start": "1996200",
    "end": "2003460"
  },
  {
    "text": "the next step is to instruction combine so we combine instructions that are basically the same so in this case it it",
    "start": "2003460",
    "end": "2011380"
  },
  {
    "text": "knows that the add instruction if we do add one add one that's the same thing as doing add two if we do it nine times we",
    "start": "2011380",
    "end": "2018039"
  },
  {
    "text": "could add nine and that's that voila so",
    "start": "2018039",
    "end": "2024640"
  },
  {
    "text": "Loop unrolling can't always be done uh we cannot solve the halting problem",
    "start": "2024640",
    "end": "2031000"
  },
  {
    "text": "so the first example that I showed you was one extreme which was a constant number of loop iterations The Other",
    "start": "2031000",
    "end": "2037960"
  },
  {
    "text": "Extreme is just a who knows how many iterations um by the way this is the output of that",
    "start": "2037960",
    "end": "2044340"
  },
  {
    "text": "fully up not optimized and then uh",
    "start": "2044340",
    "end": "2050320"
  },
  {
    "text": "the same process for this while while user input so the loop unroll does",
    "start": "2050320",
    "end": "2056080"
  },
  {
    "text": "nothing basically um and that's kind of what we expect there's kind of a middle ground here where we want to do some Loop unrolling",
    "start": "2056080",
    "end": "2063339"
  },
  {
    "text": "but not fully unroll it and the reason that you would do this actually these contrived examples for",
    "start": "2063339",
    "end": "2068919"
  },
  {
    "text": "the constant ones obviously you can do that but um you don't always want to do Loop",
    "start": "2068919",
    "end": "2074138"
  },
  {
    "text": "unrolling sometimes it's less efficient and that can happen if you're if you're just if your Loop repeat decision logic",
    "start": "2074139",
    "end": "2081760"
  },
  {
    "text": "is very very cheap and your innards are expensive then",
    "start": "2081760",
    "end": "2087820"
  },
  {
    "text": "um there's probably not a whole lot of reason to do the loop unrolling but if your decision logic is extremely",
    "start": "2087820",
    "end": "2093760"
  },
  {
    "text": "expensive then then it actually makes quite a lot of sense to do Loop unrolling so I",
    "start": "2093760",
    "end": "2100359"
  },
  {
    "text": "actually couldn't figure out how to get llvm to show me an example of this so I just took an example from Wikipedia of",
    "start": "2100359",
    "end": "2105640"
  },
  {
    "text": "what Loop enrolling is and this is kind of written in a higher level language but it's the same concept so what we",
    "start": "2105640",
    "end": "2111760"
  },
  {
    "text": "have here at the top is we've defined our Bunch size as eight and we do a a modulo a division a floor",
    "start": "2111760",
    "end": "2121960"
  },
  {
    "text": "Division and then a modulo to get the number of times we need to do the batch repeat and that's what this is here so",
    "start": "2121960",
    "end": "2129220"
  },
  {
    "text": "in this case uh 50 divided by 8 is 6 remainder two so we'll run this big loop",
    "start": "2129220",
    "end": "2136000"
  },
  {
    "text": "here six times and then we'll have some left over in this case two and we use switch case fall through",
    "start": "2136000",
    "end": "2143680"
  },
  {
    "text": "to you know jump down to two and then we do the remaining two there so this is kind of loop unrolling in a more",
    "start": "2143680",
    "end": "2151420"
  },
  {
    "text": "reasonable example so llvm contains a lot of optimization",
    "start": "2151420",
    "end": "2158320"
  },
  {
    "text": "so this is what you get when you do actually I can't remember if this is O2 or O3 but it's a lot it's a lot of",
    "start": "2158320",
    "end": "2165280"
  },
  {
    "text": "optimizations and actually uh the the ones that I've highlighted here are the",
    "start": "2165280",
    "end": "2170500"
  },
  {
    "text": "ones that I just talked about you'll notice that a lot of them are repeated and that's because some of the",
    "start": "2170500",
    "end": "2176020"
  },
  {
    "text": "optimizations will rewrite the code in such a way that now this previously run",
    "start": "2176020",
    "end": "2181480"
  },
  {
    "text": "optimization can run again and it will simplify it further the general rule is",
    "start": "2181480",
    "end": "2187720"
  },
  {
    "text": "not always of course with CPU pipelining and whatever there's there's some complexity in the statement but as a",
    "start": "2187720",
    "end": "2193900"
  },
  {
    "text": "general rule the less instructions that you have the more efficient your program is so generally speaking you want to",
    "start": "2193900",
    "end": "2201040"
  },
  {
    "text": "simplify it as much as possible and just come up with the smallest file anyways there's a lot in here I don't",
    "start": "2201040",
    "end": "2207339"
  },
  {
    "text": "know what half of these do but this is what you get when you run O2 or O3",
    "start": "2207339",
    "end": "2213280"
  },
  {
    "text": "there's another tool in the opt tool or another a moat or whatever in the Ops tool that",
    "start": "2213280",
    "end": "2220119"
  },
  {
    "text": "shows the control flow graph which I think is an interesting thing to see so this can show you your you know",
    "start": "2220119",
    "end": "2226960"
  },
  {
    "text": "optimized or not and if you use like graphvis or whatever you can see your",
    "start": "2226960",
    "end": "2232000"
  },
  {
    "text": "control control flow graph which can maybe help you reason over what's going",
    "start": "2232000",
    "end": "2237339"
  },
  {
    "text": "on in your program especially if you're handwriting the IR and you want to see you want to see what's going on there",
    "start": "2237339",
    "end": "2245220"
  },
  {
    "text": "so the llvm language reference is is a great place to read about individual IR",
    "start": "2245560",
    "end": "2251020"
  },
  {
    "text": "instructions and if you're writing a language then this is this is the bread",
    "start": "2251020",
    "end": "2257140"
  },
  {
    "text": "and butter this is the API so you need to be very familiar with us because you're rewriting your language in terms",
    "start": "2257140",
    "end": "2263740"
  },
  {
    "text": "of what IR what llvm provides you in the IR it's changing constantly so it is it's a",
    "start": "2263740",
    "end": "2271420"
  },
  {
    "text": "bit of a moving Target and it's still very much development um but it's actually a pretty good",
    "start": "2271420",
    "end": "2276460"
  },
  {
    "text": "document there there's some more uh references here for optimizations there's a I mean obviously",
    "start": "2276460",
    "end": "2283420"
  },
  {
    "text": "you saw that big less a huge number of them that I just didn't cover at all like I said the SSA article on Wikipedia",
    "start": "2283420",
    "end": "2290200"
  },
  {
    "text": "is really uh really informative my llvm is open source it's on GitHub",
    "start": "2290200",
    "end": "2296020"
  },
  {
    "text": "this this site here is really cool so lvm is is quite low level in that it's",
    "start": "2296020",
    "end": "2302320"
  },
  {
    "text": "very nearly assembly and so there's a lot of Concepts like throwing exceptions and whatever one of",
    "start": "2302320",
    "end": "2309160"
  },
  {
    "text": "the state of design goals of llvm is to be able to Target any any architecture",
    "start": "2309160",
    "end": "2314859"
  },
  {
    "text": "within reason I guess but not all architectures support things like",
    "start": "2314859",
    "end": "2321760"
  },
  {
    "text": "exceptions and whatever so llvm does not provide that so when you're mapping these kind of higher level Concepts into",
    "start": "2321760",
    "end": "2328240"
  },
  {
    "text": "this lower level also doing things like changing if statements into jumps and things this this site here goes through",
    "start": "2328240",
    "end": "2335800"
  },
  {
    "text": "through that about how conceptually you think about these things and how you",
    "start": "2335800",
    "end": "2341320"
  },
  {
    "text": "convert this higher level stuff into into a lower level language in this case lvm",
    "start": "2341320",
    "end": "2347800"
  },
  {
    "text": "ah if you liked the Minecraft demo so be",
    "start": "2347800",
    "end": "2352960"
  },
  {
    "text": "sure to check out method scripts if you run a Minecraft server it's definitely of interest to you but if you if you",
    "start": "2352960",
    "end": "2358420"
  },
  {
    "text": "like playing around with it if you want to contribute as well here's a link to to uh giving any PRS or whatever if you",
    "start": "2358420",
    "end": "2365560"
  },
  {
    "text": "feel so inclined um but yes so that's it for me are there",
    "start": "2365560",
    "end": "2370780"
  },
  {
    "text": "any questions yes what's the difference between targeting the jvm and llvm in",
    "start": "2370780",
    "end": "2381220"
  },
  {
    "text": "yeah so the question was what's the difference between targeting the jvm and lovem so uh when you target the jvm it's",
    "start": "2381220",
    "end": "2389859"
  },
  {
    "text": "in the AST is interpreted inside of java so the function Rand is just a wrapper",
    "start": "2389859",
    "end": "2395740"
  },
  {
    "text": "around Java's Rand function and it runs directly so you it's basically it's it",
    "start": "2395740",
    "end": "2401859"
  },
  {
    "text": "is the run time and it interprets the ASD whereas the llvm the output is an",
    "start": "2401859",
    "end": "2408040"
  },
  {
    "text": "executable and it's totally self-contained so you don't need any job or anything else",
    "start": "2408040",
    "end": "2414119"
  },
  {
    "text": "jvm bite God has a LLB Antarctic uh so are there any plans for uh Java byte",
    "start": "2415180",
    "end": "2422260"
  },
  {
    "text": "code as an llvm Target I don't think so I would like to do that myself so I",
    "start": "2422260",
    "end": "2427599"
  },
  {
    "text": "could in in theory I could put um I could put any",
    "start": "2427599",
    "end": "2433359"
  },
  {
    "text": "uh let me see let me see if I can go back",
    "start": "2433359",
    "end": "2441359"
  },
  {
    "text": "I actually simplified this this graph I've this I've I've used this in method script pitch text before there's another",
    "start": "2443320",
    "end": "2449800"
  },
  {
    "text": "you could put another leg here at the bottom for a DSL or whatever you know",
    "start": "2449800",
    "end": "2456520"
  },
  {
    "text": "you want to whatever thing you want to Target and so it targets jvm right now",
    "start": "2456520",
    "end": "2462040"
  },
  {
    "text": "it interprets in the jvm but there's no reason I couldn't just output jvm byte",
    "start": "2462040",
    "end": "2467200"
  },
  {
    "text": "code myself um and a lot of the learnings from llvm will certainly be useful there",
    "start": "2467200",
    "end": "2473099"
  },
  {
    "text": "but as a first implementation running it as kind of in a semi it is compiled it",
    "start": "2473099",
    "end": "2478960"
  },
  {
    "text": "compiles to the AST but but then it's it's interpreted from there and that's an easier thing to",
    "start": "2478960",
    "end": "2485079"
  },
  {
    "text": "start with than a fully compiled language but yes it's it's less efficient to do",
    "start": "2485079",
    "end": "2491079"
  },
  {
    "text": "that and so it would be actually really great to be able to Output the the Java",
    "start": "2491079",
    "end": "2496480"
  },
  {
    "text": "byte code as well",
    "start": "2496480",
    "end": "2499260"
  },
  {
    "text": "the optimization Stone yeah uh so the question was uh multi how",
    "start": "2507220",
    "end": "2515140"
  },
  {
    "text": "does lvm support multi-threading I think probably the answer is it it doesn't uh",
    "start": "2515140",
    "end": "2520540"
  },
  {
    "text": "it's it's something that you have to manage yourself as the language designer",
    "start": "2520540",
    "end": "2525700"
  },
  {
    "text": "um so far I've I've not gotten into this because I I'm just I'm I'm focused on",
    "start": "2525700",
    "end": "2531220"
  },
  {
    "text": "Hello World level right now but I don't think there's I've not seen anything that specifically because threads are a",
    "start": "2531220",
    "end": "2538660"
  },
  {
    "text": "higher level concept uh that the OS kind of provides so my suspicion would be",
    "start": "2538660",
    "end": "2544119"
  },
  {
    "text": "that there's nothing specific in llvm",
    "start": "2544119",
    "end": "2549000"
  },
  {
    "text": "Mark something as volatile yeah",
    "start": "2549400",
    "end": "2553980"
  },
  {
    "text": "well it's it's using if it's using OS threads it's going to have the the contention resolution and things that",
    "start": "2560020",
    "end": "2566260"
  },
  {
    "text": "are provided in the CE Library basically and this is standard Library so that's probably what the answer is is that you",
    "start": "2566260",
    "end": "2572980"
  },
  {
    "text": "use these things that are provided in the C standard Library but I don't know",
    "start": "2572980",
    "end": "2579099"
  },
  {
    "text": "yes",
    "start": "2579099",
    "end": "2581819"
  },
  {
    "text": "yes there are so what what tools are available for for verifying the optimizations there's uh some bisection",
    "start": "2590680",
    "end": "2598060"
  },
  {
    "text": "tools for instance so so you run you know you say I found the bug I think I'm",
    "start": "2598060",
    "end": "2603339"
  },
  {
    "text": "going to run half of the optimizations and if the code output still works it was in the other half and then try again",
    "start": "2603339",
    "end": "2610839"
  },
  {
    "text": "um I actually I I lurk in the IRC channel for llvm and that comes up from time to time that people are like",
    "start": "2610839",
    "end": "2617140"
  },
  {
    "text": "I think there's a bug in this optimization and then that's basically the advice to do this bisect and then",
    "start": "2617140",
    "end": "2622900"
  },
  {
    "text": "try and try and figure out which path it is using this opt tool basically and then",
    "start": "2622900",
    "end": "2629500"
  },
  {
    "text": "go go from there uh pretty much so",
    "start": "2629500",
    "end": "2634839"
  },
  {
    "text": "yes",
    "start": "2634839",
    "end": "2637380"
  },
  {
    "text": "yes debugging so that is an interesting question I've only I've only scratched the surface but what you can do is",
    "start": "2639880",
    "end": "2647079"
  },
  {
    "text": "um you can output I don't think I have this in examples actually but you basically output dwarf",
    "start": "2647079",
    "end": "2655180"
  },
  {
    "text": "information as part of the binary um and uh yeah I cut it out from this",
    "start": "2655180",
    "end": "2661780"
  },
  {
    "text": "example um but you you basically output extra information inside of the IR and inside",
    "start": "2661780",
    "end": "2668920"
  },
  {
    "text": "of this this file or through the bit code that says that like this line of of",
    "start": "2668920",
    "end": "2674319"
  },
  {
    "text": "code came from this source source uh identifier or whatever",
    "start": "2674319",
    "end": "2680140"
  },
  {
    "text": "and then tools like the gnu debugger and stuff can just work with with that",
    "start": "2680140",
    "end": "2687099"
  },
  {
    "text": "um but I've only scratched the surface obviously debugging is a super important thing to be able to do",
    "start": "2687099",
    "end": "2693520"
  },
  {
    "text": "um so I very much want to provide that functionality at some point but very very surface level there",
    "start": "2693520",
    "end": "2702359"
  },
  {
    "text": "oh perfect",
    "start": "2704140",
    "end": "2706859"
  },
  {
    "text": "yes sort of it's It's to not have to worry",
    "start": "2709240",
    "end": "2716020"
  },
  {
    "text": "about the assembly for that architecture so if you were writing bare metal for instance it should look the same in",
    "start": "2716020",
    "end": "2723160"
  },
  {
    "text": "everything but what we're doing here is we're using um uh",
    "start": "2723160",
    "end": "2728800"
  },
  {
    "text": "puts for instance is that's implemented by Windows libraries or Linux or",
    "start": "2728800",
    "end": "2734680"
  },
  {
    "text": "whatever and so some of these vary like the ram function for instance uh returns",
    "start": "2734680",
    "end": "2741400"
  },
  {
    "text": "a 16-bit value in Windows and 32-bit on Linux so the IR does look different for",
    "start": "2741400",
    "end": "2747099"
  },
  {
    "text": "each platform and I do have to take those things into account but at least the CPU specific stuff is should be the",
    "start": "2747099",
    "end": "2757180"
  },
  {
    "text": "same the only thing in theory if you're writing metal is the only difference should be this target triple",
    "start": "2757180",
    "end": "2764200"
  },
  {
    "text": "um but yeah there are there are platform differences still so it's not a perfect abstraction",
    "start": "2764200",
    "end": "2771480"
  },
  {
    "text": "yes yes so what I'm doing right now is that I'm basically just copying what clang is doing for alignment in each",
    "start": "2774040",
    "end": "2780160"
  },
  {
    "text": "platform um but yeah uh the the alignment would probably be CPU specific as well",
    "start": "2780160",
    "end": "2786760"
  },
  {
    "text": "so any other questions",
    "start": "2786760",
    "end": "2791520"
  },
  {
    "text": "support for Unicode um",
    "start": "2791940",
    "end": "2796740"
  },
  {
    "text": "I don't know I don't know so this is",
    "start": "2797319",
    "end": "2802540"
  },
  {
    "text": "yeah that's a good question I'm not sure I'm not sure I think that's probably going to come",
    "start": "2802540",
    "end": "2808000"
  },
  {
    "text": "down to because you can put whatever you want here and I think it's going to come down to whatever you support as the compiler",
    "start": "2808000",
    "end": "2814960"
  },
  {
    "text": "you're going to read in some text file basically and then you're going to output something else so as long as you",
    "start": "2814960",
    "end": "2821220"
  },
  {
    "text": "output something that this string can can process maybe you have to do escapes",
    "start": "2821220",
    "end": "2827619"
  },
  {
    "text": "or whatever then I guess it should be possible",
    "start": "2827619",
    "end": "2831780"
  },
  {
    "text": "I don't know yeah yeah I I I'm sure I'll I'm sure that lvm",
    "start": "2833140",
    "end": "2839980"
  },
  {
    "text": "doesn't care uh because you're just passing in these opaque strings from your language to to the whatever the",
    "start": "2839980",
    "end": "2847780"
  },
  {
    "text": "like in this case puts so I'm sure it's it's basically up to you to support",
    "start": "2847780",
    "end": "2855480"
  },
  {
    "text": "any other questions well I'd like to thank you for your attention I hope you got something out",
    "start": "2856540",
    "end": "2862540"
  },
  {
    "text": "of this uh you know it's it's a kind of a niche topic of course and but it's really great to see so many other",
    "start": "2862540",
    "end": "2868720"
  },
  {
    "text": "language nerds here so thank you all for your time [Applause]",
    "start": "2868720",
    "end": "2877230"
  }
]