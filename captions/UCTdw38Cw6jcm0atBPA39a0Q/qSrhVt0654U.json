[
  {
    "start": "0",
    "end": "200000"
  },
  {
    "text": "good morning I'm tall helper good afternoon I'm low helper and this is the walking with superstars legacy code",
    "start": "2270",
    "end": "8760"
  },
  {
    "text": "session and before we start I thinking introduction is in order as I said my",
    "start": "8760",
    "end": "15150"
  },
  {
    "text": "name is dog helper I work as a consultant in a company called Cod value I've been developing in software for",
    "start": "15150",
    "end": "21029"
  },
  {
    "text": "more than a decade this is being a sitter space room I guess I'm not alone right and I'm being using Delavan",
    "start": "21029",
    "end": "29460"
  },
  {
    "text": "development and clean code since 2008 I guess where I learned about those and",
    "start": "29460",
    "end": "35000"
  },
  {
    "text": "I've been keeping that ever since I help developers write better code and have",
    "start": "35000",
    "end": "40320"
  },
  {
    "text": "encountered numerous legacy code situations I'm also applause I thought oh I just",
    "start": "40320",
    "end": "45960"
  },
  {
    "text": "released two courses in C++ unit testing would catch and deep dive into mocking",
    "start": "45960",
    "end": "51899"
  },
  {
    "text": "insider starts with Google mock and I suggest you check them out I also have a blog at helper called calm where that",
    "start": "51899",
    "end": "58379"
  },
  {
    "text": "about anything I find interesting and I have Twitter be helper so feel free to",
    "start": "58379",
    "end": "63660"
  },
  {
    "text": "tweet say what you think will exclusively develop in C++",
    "start": "63660",
    "end": "69960"
  },
  {
    "text": "jesse plus plus nothing else no one dotnet developers in the code Java the",
    "start": "69960",
    "end": "78869"
  },
  {
    "text": "rest I'll product managers I guess I'm doing currently to my job I get to",
    "start": "78869",
    "end": "86369"
  },
  {
    "text": "consult in Java C++ and.net and that way I can draw lines between the similarities and the differences between",
    "start": "86369",
    "end": "92520"
  },
  {
    "text": "them and I think we got it better in C++ to tell you the truth and",
    "start": "92520",
    "end": "98009"
  },
  {
    "text": "I'll explain why but before that we all came to talk about legacy code right what does legacy code means does anyone",
    "start": "98009",
    "end": "107159"
  },
  {
    "text": "has a good definition of legacy code I'll tell you my definition",
    "start": "107159",
    "end": "112829"
  },
  {
    "text": "it's the feeling I get at the bottom of my stomach when I look at the code base and understand I need to walk with it",
    "start": "112829",
    "end": "118350"
  },
  {
    "text": "right it makers it's a very emotional term legacy code it causes fear and",
    "start": "118350",
    "end": "125100"
  },
  {
    "text": "distrust and well you know you don't you're not going to have a good day when",
    "start": "125100",
    "end": "132090"
  },
  {
    "text": "you see that code the first time and we all know we probably talking about this old code written in the days of the dinosaurs by someone",
    "start": "132090",
    "end": "139900"
  },
  {
    "text": "using bad practices and obsolete methods right not a good developer like everyone",
    "start": "139900",
    "end": "146080"
  },
  {
    "text": "else in the room and we probably ate this guy as well but there's no clear",
    "start": "146080",
    "end": "153100"
  },
  {
    "text": "definition for legacy code the only thing close the definition we have is what Michael feathers wrote in",
    "start": "153100",
    "end": "159700"
  },
  {
    "text": "his book walking effectively with legacy code which if you haven't read that before you should wear it says legacy",
    "start": "159700",
    "end": "167650"
  },
  {
    "text": "code this code without unit tests and I get it and but it's not really a full",
    "start": "167650",
    "end": "173680"
  },
  {
    "text": "definition I wish there was a word a sentence I can say about legacy code",
    "start": "173680",
    "end": "180040"
  },
  {
    "text": "other than legacy code that will explain exactly what it means and fortunately we",
    "start": "180040",
    "end": "185290"
  },
  {
    "text": "don't have that but what I do have is I noticed a few properties of legacy code",
    "start": "185290",
    "end": "191520"
  },
  {
    "text": "some things that are true for every single code base I got to look at which was in this indian essence legacy code",
    "start": "191520",
    "end": "198280"
  },
  {
    "text": "the first of which is that it is no longer engineered just catched right",
    "start": "198280",
    "end": "204130"
  },
  {
    "start": "200000",
    "end": "200000"
  },
  {
    "text": "when we start a new project we have an architecture team or an architect who come up with this amazing design and",
    "start": "204130",
    "end": "210610"
  },
  {
    "text": "then we build and we take the the components and break them down and we have lengthy conversations about the",
    "start": "210610",
    "end": "217630"
  },
  {
    "text": "best way to implement the code right and then we ship the product and forget about that and the next guy in line",
    "start": "217630",
    "end": "223450"
  },
  {
    "text": "usually it's someone else get to patch the code because what I notice developers do with code that they have",
    "start": "223450",
    "end": "229990"
  },
  {
    "text": "no idea what happens there Wood legacy code is that they put a breakpoint so in the code run line by line until",
    "start": "229990",
    "end": "236280"
  },
  {
    "text": "something that looks similar to the bug they want to fix or a place to put the",
    "start": "236280",
    "end": "242170"
  },
  {
    "text": "features in place and then they write the code immediately compile build and commit an done way right and this is the",
    "start": "242170",
    "end": "249880"
  },
  {
    "text": "case with legacy code another thing about legacy code is that it's very fragile it's easy to break",
    "start": "249880",
    "end": "255970"
  },
  {
    "text": "legacy code especially after awhile as pastor still a few years if you get this",
    "start": "255970",
    "end": "261459"
  },
  {
    "text": "code that was written eight years ago using all c-plus class it is almost",
    "start": "261459",
    "end": "267460"
  },
  {
    "text": "impossible to change anything without breaking some functionality and and this is the good case scenario because the",
    "start": "267460",
    "end": "274540"
  },
  {
    "text": "best case scenario is you break the functionality but you're not aware about it I had a client a customer called in",
    "start": "274540",
    "end": "281770"
  },
  {
    "text": "the middle of the night something very crucial important in this process stopped working and after a lot",
    "start": "281770",
    "end": "287860"
  },
  {
    "text": "of begin log reading and debugging we found the problem it was a change that",
    "start": "287860",
    "end": "294400"
  },
  {
    "text": "was made two months before that they changed the code the code ran for two months and only after two months someone",
    "start": "294400",
    "end": "300940"
  },
  {
    "text": "noticed that there's a problem and that is usually the case and that's why we feel this called so much because we",
    "start": "300940",
    "end": "306970"
  },
  {
    "text": "don't know what will break we are not even sure whether or not we'll be able to catch the bug once it happens the",
    "start": "306970",
    "end": "314290"
  },
  {
    "start": "314000",
    "end": "314000"
  },
  {
    "text": "next thing about legacy code is that obviously it was written by someone else I am last year in NBC anyone was in NDC",
    "start": "314290",
    "end": "321940"
  },
  {
    "text": "Oslo 2016 okay me too and I went to a",
    "start": "321940",
    "end": "326980"
  },
  {
    "text": "session by Caroline clever in which they did a survey about legacy code as",
    "start": "326980",
    "end": "332290"
  },
  {
    "text": "developers for the definition of legacy code 3% of those developers said legacy",
    "start": "332290",
    "end": "337419"
  },
  {
    "text": "code is any code written by someone else and I left because that's that's like a",
    "start": "337419",
    "end": "344140"
  },
  {
    "text": "very funny definition and they thought about it and it's very true because what usually happened with legacy code is",
    "start": "344140",
    "end": "350590"
  },
  {
    "text": "that the person who wrote it and understood what is doing left Italy",
    "start": "350590",
    "end": "355960"
  },
  {
    "text": "moved to a new project Italy moved to a new company and there's no one to ask what to do this one to tell me what was",
    "start": "355960",
    "end": "363010"
  },
  {
    "text": "the original thought the original decision he made when implementing the code and which make it easy to break his",
    "start": "363010",
    "end": "369790"
  },
  {
    "text": "code because I have no idea what he had in mind now in some cases some real cases I managed to find this person he",
    "start": "369790",
    "end": "376600"
  },
  {
    "text": "has no clue because he forgot we talked in five years ago he has no idea what happened I barely can remember what",
    "start": "376600",
    "end": "382510"
  },
  {
    "text": "happened last month and that's a problem because usually the people responsible maintaining legacy code another one who",
    "start": "382510",
    "end": "389110"
  },
  {
    "text": "wrote it and lastly and very importantly legacy code has uses and those users are",
    "start": "389110",
    "end": "396580"
  },
  {
    "text": "the sole reason you came to this session because legacy code without any users",
    "start": "396580",
    "end": "402220"
  },
  {
    "text": "you can it is immediately and forget about it but usually the code we're walking on",
    "start": "402220",
    "end": "407919"
  },
  {
    "text": "someone really really care about it and once you use it and he's really needed",
    "start": "407919",
    "end": "413210"
  },
  {
    "text": "to keep on walking the bug fixes and you need the new features some of the time they even got used to the bugs and eat",
    "start": "413210",
    "end": "419539"
  },
  {
    "text": "the same bugs to continue walking in that specific way because they found some metal to walk around them or with",
    "start": "419539",
    "end": "425509"
  },
  {
    "text": "them and you can change that because they pay money or they need it to the in",
    "start": "425509",
    "end": "431960"
  },
  {
    "text": "order to make money and so we need to remember those user whatever we do so",
    "start": "431960",
    "end": "440560"
  },
  {
    "start": "440000",
    "end": "440000"
  },
  {
    "text": "having defined some properties of legacy code they have good news and bad news starting with the bad news everyone here",
    "start": "440560",
    "end": "447380"
  },
  {
    "text": "works in C++ right to some degree which means that you might have a problem",
    "start": "447380",
    "end": "453110"
  },
  {
    "text": "because in C++ there's quite a lot of legacy code in relation to other languages I don't have the any numbers",
    "start": "453110",
    "end": "459560"
  },
  {
    "text": "whatsoever but I have a feeling that more than in Java or.net the reason",
    "start": "459560",
    "end": "465379"
  },
  {
    "text": "being that it'll pass has been around for many many years and a lot of systems were written using C++ and so we have",
    "start": "465379",
    "end": "472159"
  },
  {
    "text": "quite a lot of legacy code there the second dead news for you which we might have know already is that you",
    "start": "472159",
    "end": "477680"
  },
  {
    "text": "probably walk in with legacy code right now right because in C++ these days",
    "start": "477680",
    "end": "485150"
  },
  {
    "text": "either you get to implement some cool algorithm or multi-platform a voice-over-ip seen all your working with",
    "start": "485150",
    "end": "492949"
  },
  {
    "text": "legacy code that you need to keep on maintaining and fixing and the last",
    "start": "492949",
    "end": "498349"
  },
  {
    "text": "thing is that which simplifies is very easy to make very big mistakes memory",
    "start": "498349",
    "end": "503599"
  },
  {
    "text": "allocation problem but all the flaws you name it you all know you're been there and that makes it hard to work with",
    "start": "503599",
    "end": "509630"
  },
  {
    "text": "legacy code because we can break something in a very critical problematic",
    "start": "509630",
    "end": "514880"
  },
  {
    "text": "way but I have good news for you the good news is that like that working",
    "start": "514880",
    "end": "520729"
  },
  {
    "text": "with C++ you have quite a lot of power in your hands and C++ enabled me to do",
    "start": "520729",
    "end": "526850"
  },
  {
    "text": "things with legacy code that I can do with Java or.net in fact when going into",
    "start": "526850",
    "end": "532570"
  },
  {
    "text": "java.net say places I wish I had some of the features",
    "start": "532570",
    "end": "539149"
  },
  {
    "text": "obstacles placement enable me to fix and improve legacy code and I'll I'll show",
    "start": "539149",
    "end": "546139"
  },
  {
    "text": "you a few of them so what can we do with legacy code three simple steps now simple to say not to do first thing is",
    "start": "546139",
    "end": "553699"
  },
  {
    "start": "547000",
    "end": "547000"
  },
  {
    "text": "understand what the code does seems trivial right but we all know that sometimes each cell will feel as if it's",
    "start": "553699",
    "end": "560600"
  },
  {
    "text": "better just to jump into the code and start fixing things before fully understanding what it does and sometimes",
    "start": "560600",
    "end": "565999"
  },
  {
    "text": "it's really hard to understand what the code does reason being that again we don't have anyone to ask and there's",
    "start": "565999",
    "end": "572209"
  },
  {
    "text": "quite a lot of it but in order to work fully with legacy code we really need to",
    "start": "572209",
    "end": "577970"
  },
  {
    "text": "understand what it does beforehand I've been in two companies in which as part",
    "start": "577970",
    "end": "583939"
  },
  {
    "text": "of fixing their existing problems I do diagrams workflow diagram so how the",
    "start": "583939",
    "end": "590899"
  },
  {
    "text": "system works and it was the first time anyone in that company really understood what the system does and that's a shame",
    "start": "590899",
    "end": "598040"
  },
  {
    "text": "that you need a consultant to do that but what can I do and in fact in one",
    "start": "598040",
    "end": "603199"
  },
  {
    "text": "companies were so successful that they took that diagram and continue implementing new features in you in",
    "start": "603199",
    "end": "609649"
  },
  {
    "text": "other platforms based on my diagram that I drove just to fix a bug so we need to",
    "start": "609649",
    "end": "615470"
  },
  {
    "text": "understand what happens once you get a clear understanding what that piece of code does now you need to make sure that",
    "start": "615470",
    "end": "621949"
  },
  {
    "text": "it keeps on doing that doesn't break which is also very trivial to say very",
    "start": "621949",
    "end": "627559"
  },
  {
    "text": "hard to do because there are users that want your code to keep on functioning",
    "start": "627559",
    "end": "632660"
  },
  {
    "text": "the same way and lastly once I achieve those two points the next sort of business is to start improving now I can",
    "start": "632660",
    "end": "640040"
  },
  {
    "text": "refactor code now I can make fixes because I know what the code does and I can fix that this is the end of the talk",
    "start": "640040",
    "end": "646339"
  },
  {
    "text": "right you don't need to know anything else now before that there's one tool",
    "start": "646339",
    "end": "654769"
  },
  {
    "text": "that helped me do that although I am pretty biased but I noticed that after undoing the diagram and use the static",
    "start": "654769",
    "end": "661429"
  },
  {
    "text": "analysis tools and I understood what the tool does what their code does and I got a few people to talk to me and explain",
    "start": "661429",
    "end": "667639"
  },
  {
    "text": "what they wish did writing Unitas can really help me heal because unitest",
    "start": "667639",
    "end": "674019"
  },
  {
    "text": "help me first of all define what the code does I need to write code that",
    "start": "674019",
    "end": "679040"
  },
  {
    "text": "executes it and by defining what the code does I learn things about it and once every unit has in place I can debug",
    "start": "679040",
    "end": "685819"
  },
  {
    "text": "it instead of taking the whole project and running it and trying to debug the specific scenario I'm trying to",
    "start": "685819",
    "end": "692319"
  },
  {
    "text": "implement the test Hill which in the most system big system enterprise system",
    "start": "692319",
    "end": "698089"
  },
  {
    "text": "is variously helping to do sometimes I don't have the environment to get the old project in place so I want to add",
    "start": "698089",
    "end": "704720"
  },
  {
    "text": "just a few points of it if you pieces of it and once I have those tests in place I know I can change the code without",
    "start": "704720",
    "end": "711199"
  },
  {
    "text": "breaking it it's as simple as that and this is what a unit s look like anyone",
    "start": "711199",
    "end": "717620"
  },
  {
    "start": "716000",
    "end": "716000"
  },
  {
    "text": "here that we use Google test before okay thus does amount that's the same amount",
    "start": "717620",
    "end": "725029"
  },
  {
    "text": "of people are get when asked about unit testing in a dotnet so that's fine unit s essentially is a",
    "start": "725029",
    "end": "731060"
  },
  {
    "text": "method it's as simple as that it's just a method that I get to run my code in",
    "start": "731060",
    "end": "736459"
  },
  {
    "text": "and that's it and everyone you know how to write a method and write and in this",
    "start": "736459",
    "end": "744319"
  },
  {
    "text": "case I'm going to show the demos with Google test and Google mock not because they're better or worse in other unit",
    "start": "744319",
    "end": "750319"
  },
  {
    "text": "testing frameworks just because in this specific environment it's easy to talk",
    "start": "750319",
    "end": "755720"
  },
  {
    "text": "about them they are widely use okay easily acquired if you want to learn about other unit testing Cermak and",
    "start": "755720",
    "end": "761990"
  },
  {
    "text": "mocking so MacNeill what i think about each and every one of them i have another session tomorrow so what do we",
    "start": "761990",
    "end": "768350"
  },
  {
    "text": "have you usually in the sixth class unit i've seen there is a macro like which is",
    "start": "768350",
    "end": "775660"
  },
  {
    "text": "this guy over here let me try",
    "start": "775660",
    "end": "781000"
  },
  {
    "text": "that is the test my code basically does three things first of all define a new method this is like writing a new",
    "start": "781389",
    "end": "788059"
  },
  {
    "text": "function the second thing it does is that it creates a class in the background if you go and dive into that",
    "start": "788059",
    "end": "795139"
  },
  {
    "text": "code you'll see there's a class class created here because want and class around my method and the last thing it",
    "start": "795139",
    "end": "801050"
  },
  {
    "text": "makes sure that when I the whole their project with the unica seen the unitive will be executed so",
    "start": "801050",
    "end": "807890"
  },
  {
    "text": "essentially that's a platform to encode that's it nothing more nothing less other than that I have here there we",
    "start": "807890",
    "end": "818060"
  },
  {
    "text": "this is also known as the test fiction name but what we C++ developers",
    "start": "818060",
    "end": "823420"
  },
  {
    "text": "grown-ups this is the class name that will run the test and the second thing",
    "start": "823420",
    "end": "828560"
  },
  {
    "text": "of the hill here we go is the test name and the test name is",
    "start": "828560",
    "end": "834640"
  },
  {
    "text": "what it's called and what it does usually I will give it a good name that is seeing a lot Hill and in the middle",
    "start": "834640",
    "end": "842149"
  },
  {
    "text": "is the importance today a bit the important bits is the actual code I get to execute this is this part over here",
    "start": "842149",
    "end": "849580"
  },
  {
    "text": "first I'll initialize whatever I need to initialize and then I'll run the code I'm trying to test and usually in the",
    "start": "849580",
    "end": "857149"
  },
  {
    "text": "end I have another macro depending on which unit testing some okay I'm using that we'll check the results in this",
    "start": "857149",
    "end": "862970"
  },
  {
    "text": "case I'm checking that when I call night dot say I'll get back me and if that's",
    "start": "862970",
    "end": "869450"
  },
  {
    "text": "in fact is the case the test will pass otherwise the test will fail it's as simple as that and that basically is how",
    "start": "869450",
    "end": "876529"
  },
  {
    "text": "you write a unit test in C++ is in Google test but it's not as simple as",
    "start": "876529",
    "end": "882529"
  },
  {
    "text": "that because no one ever old code that looks like this right we are things in",
    "start": "882529",
    "end": "887750"
  },
  {
    "text": "our code called dependencies other people classes we have server and",
    "start": "887750",
    "end": "893990"
  },
  {
    "start": "892000",
    "end": "892000"
  },
  {
    "text": "databases and filled party libraries that are executed and run as part of our",
    "start": "893990",
    "end": "899420"
  },
  {
    "text": "code and usually with old code we have moved those usually the code is not well",
    "start": "899420",
    "end": "905209"
  },
  {
    "text": "structures is no clear definition the classes are not divided we have a big",
    "start": "905209",
    "end": "911149"
  },
  {
    "text": "mess and taking a big mess and trying to test that is nearly impossible and so I",
    "start": "911149",
    "end": "916820"
  },
  {
    "text": "need to make a few code changes and then I hit a problem because the code has dependencies and if I needed to change",
    "start": "916820",
    "end": "923930"
  },
  {
    "text": "that I'll most likely 78 on three percent as they say 33 percent of all",
    "start": "923930",
    "end": "930589"
  },
  {
    "text": "the statistics are made up as well as this one so I'll probably break the code",
    "start": "930589",
    "end": "936290"
  },
  {
    "text": "if I try to change it just to test it and if I'll break the code I know one",
    "start": "936290",
    "end": "941779"
  },
  {
    "text": "thing for certain I'm not going home today I'm going to stay over the weekend or late at night to fix the problem the",
    "start": "941779",
    "end": "949189"
  },
  {
    "text": "problem is just created and that's not a good thing to do I don't want to do that",
    "start": "949189",
    "end": "955369"
  },
  {
    "text": "and then so I need to find a better solution and when usually have this sort",
    "start": "955369",
    "end": "961519"
  },
  {
    "text": "of a problem I always look for a Wiseman who already solve that kind of solution in this case okay in this case Jim",
    "start": "961519",
    "end": "971569"
  },
  {
    "text": "Carrey who said my focus is to forget the pain of life forget the pain Mock",
    "start": "971569",
    "end": "978949"
  },
  {
    "text": "the pain reduce it and laugh and obviously was talking about unittest",
    "start": "978949",
    "end": "985899"
  },
  {
    "text": "because in unit tests I have two problems I need to solve I have a",
    "start": "985899",
    "end": "991009"
  },
  {
    "text": "sensing and separation problem when I write the unit s with the some sort of",
    "start": "991009",
    "end": "996220"
  },
  {
    "start": "994000",
    "end": "994000"
  },
  {
    "text": "dependencies hyah the first problem is that when I run the code in this case the left side send",
    "start": "996220",
    "end": "1002379"
  },
  {
    "text": "email to user an email will be sent to the user and I have no way to verify it actually walked this is a sensing",
    "start": "1002379",
    "end": "1008379"
  },
  {
    "text": "problem there's no code I can write to make sure it email was sent I'm not going to pull my email account my inbox",
    "start": "1008379",
    "end": "1015189"
  },
  {
    "text": "in order to get to know if the tests passed or failed and I also have a separation problem I have very important",
    "start": "1015189",
    "end": "1021639"
  },
  {
    "text": "kind of logic downhill unfortunately for me there's nothing in the way that is",
    "start": "1021639",
    "end": "1026649"
  },
  {
    "text": "going to for an exceptional crash in some amazing spectacular way and so I don't get to their code I need so going",
    "start": "1026649",
    "end": "1034058"
  },
  {
    "text": "back to mr. Kelly's suggestion I'm going to use mock objects and mock objects in",
    "start": "1034059",
    "end": "1040870"
  },
  {
    "text": "a way something that every single developer you know r2 right anyone here ever use a mock framework and mocking",
    "start": "1040870",
    "end": "1047678"
  },
  {
    "text": "same book they saying some people didn't raise up the answer about the Google",
    "start": "1047679",
    "end": "1053350"
  },
  {
    "text": "test just like there ends up which is strange but okay and essentially",
    "start": "1053350",
    "end": "1059919"
  },
  {
    "text": "something everyone you know what to do and let me ask a different question will you ever call the database raise your",
    "start": "1059919",
    "end": "1066129"
  },
  {
    "text": "hand we will never call the next ourselves and again you didn't although no one",
    "start": "1066129",
    "end": "1073960"
  },
  {
    "text": "here ever called the database I said carefully because this is a successful and I might have some people who",
    "start": "1073960",
    "end": "1080950"
  },
  {
    "text": "actually wrote database logical and but well but we don't call that abase we",
    "start": "1080950",
    "end": "1088720"
  },
  {
    "text": "call a class that does the actual thing of calling the database and in fact mocking that class is just a metal of",
    "start": "1088720",
    "end": "1096090"
  },
  {
    "text": "inheriting that class other ID in all of the method and I got a fake object that",
    "start": "1096090",
    "end": "1102070"
  },
  {
    "start": "1102000",
    "end": "1102000"
  },
  {
    "text": "fake objects is an essence the class that does absolutely nothing and that class does absolutely nothing can be",
    "start": "1102070",
    "end": "1108820"
  },
  {
    "text": "used in the test in order to get all the things I don't like in the tests outside of my test and isolate the code that",
    "start": "1108820",
    "end": "1115570"
  },
  {
    "text": "will care about the logic uncertainty test and then I get to decide in a",
    "start": "1115570",
    "end": "1121990"
  },
  {
    "text": "specific test what I want to do with it now we can write those by hand we can just",
    "start": "1121990",
    "end": "1128230"
  },
  {
    "text": "inherit any single class we want and although I the method write a bunch of code will developers in order to write a",
    "start": "1128230",
    "end": "1133360"
  },
  {
    "text": "lot of code not just this simple trivial code unfortunately that's not a good idea because once I start writing code",
    "start": "1133360",
    "end": "1139360"
  },
  {
    "text": "just for the test and every test need the specific environment and the different kind of behavior I'll end up",
    "start": "1139360",
    "end": "1145270"
  },
  {
    "text": "with a lot of code in my tests which I need to maintain and I don't like that and I might even write a few bugs on the",
    "start": "1145270",
    "end": "1150760"
  },
  {
    "text": "way and break something and I don't want to write a test to test my test so I",
    "start": "1150760",
    "end": "1157150"
  },
  {
    "text": "will use a mocking framework and this is all do that using Google mock now in C++",
    "start": "1157150",
    "end": "1163360"
  },
  {
    "start": "1160000",
    "end": "1160000"
  },
  {
    "text": "unfortunately no reflection yet and so I'll need to inherit the class in my",
    "start": "1163360",
    "end": "1169420"
  },
  {
    "text": "class the fake rest API client is I have a REST API client and in Google Care in",
    "start": "1169420",
    "end": "1176740"
  },
  {
    "text": "Google mock I'll just override a method by using mock underscore method with some number after it in order to create",
    "start": "1176740",
    "end": "1184060"
  },
  {
    "text": "an obviously I'd method of that method I'm trying to change now it takes a",
    "start": "1184060",
    "end": "1189520"
  },
  {
    "text": "while but we you know everyone will so wall syntax it's not the walls I can do",
    "start": "1189520",
    "end": "1195450"
  },
  {
    "text": "essentially the macro the number is how many parameters that method has this is",
    "start": "1195450",
    "end": "1201100"
  },
  {
    "text": "the name of the method this is actual this in will be converted to a new method other hidden in the background",
    "start": "1201100",
    "end": "1206530"
  },
  {
    "text": "compile-time of HTTP POST which returns no argument and have two arguments of",
    "start": "1206530",
    "end": "1212740"
  },
  {
    "text": "type reference to a string to a CD string the same heel goes here would actually be get returned the string can",
    "start": "1212740",
    "end": "1218920"
  },
  {
    "text": "get in received one string okay any questions so far so good how do I use those classes now that I",
    "start": "1218920",
    "end": "1226390"
  },
  {
    "text": "have them in hand let's see let's see a small demo so basically here I have a",
    "start": "1226390",
    "end": "1238350"
  },
  {
    "text": "distributed calculator I always say that in India scene I will like to show calculators are very simple to explain",
    "start": "1238350",
    "end": "1244090"
  },
  {
    "text": "forcing don't look like the real code so I use a distributed calculator that calculator has a database in which it",
    "start": "1244090",
    "end": "1253000"
  },
  {
    "text": "gets the data out of the database it will return the title with two numbers and then I'll stick them together using",
    "start": "1253000",
    "end": "1261310"
  },
  {
    "text": "some string magic and called the client an HTTP client real HTTP client would",
    "start": "1261310",
    "end": "1267430"
  },
  {
    "text": "actually be get and get a result back out convert it to an integer that's very nice things to do but let's say it works",
    "start": "1267430",
    "end": "1274180"
  },
  {
    "text": "and that's it now want to test that code and I have two problems right the",
    "start": "1274180",
    "end": "1279190"
  },
  {
    "text": "database in place another client in class I want to remove those so using Google Mach I can remove them and that's",
    "start": "1279190",
    "end": "1287140"
  },
  {
    "text": "really important by the way all those mock objects I just write them in the part of the code that that is the test",
    "start": "1287140",
    "end": "1294370"
  },
  {
    "text": "not in the real production code and if I go here I have the fake lines to make my",
    "start": "1294370",
    "end": "1303670"
  },
  {
    "text": "life simpler I'll just use the mock method for HTTP GET which is a virtual method and have the effect that access",
    "start": "1303670",
    "end": "1312460"
  },
  {
    "text": "and here it's a cons method soy mocha transmitted of get data and that will",
    "start": "1312460",
    "end": "1318220"
  },
  {
    "text": "return a pair of twins no parameters and that's it now we can write a test how",
    "start": "1318220",
    "end": "1324670"
  },
  {
    "text": "can I write a test very simply you'll go this is the tests will go line by line",
    "start": "1324670",
    "end": "1330730"
  },
  {
    "text": "as I said I'll mark it as a test so I can run it now and I have",
    "start": "1330730",
    "end": "1336370"
  },
  {
    "text": "dissipated the calculator test whatever I'll calculate return to valid numbers someone will call the server so in the",
    "start": "1336370",
    "end": "1343180"
  },
  {
    "text": "fact I'm doing two things you first of all need me to make sure that the database returns to valid members second",
    "start": "1343180",
    "end": "1348490"
  },
  {
    "text": "of all I want to make sure that the client was called with the right parameters and using Google mock I can",
    "start": "1348490",
    "end": "1355420"
  },
  {
    "text": "use this macro expect hold that's my way of telling it I want you to expect that method to be called for the fact that",
    "start": "1355420",
    "end": "1363460"
  },
  {
    "text": "the access the method is called get data and always no matter how many times someone will call you just return the data what is",
    "start": "1363460",
    "end": "1371260"
  },
  {
    "text": "the data two numbers one in two and then I will create the fake clients with some",
    "start": "1371260",
    "end": "1377590"
  },
  {
    "text": "dummy URL I don't care which because I'm not going to actually execute it and I",
    "start": "1377590",
    "end": "1382870"
  },
  {
    "text": "write another expect call the same for that clients and when actually get",
    "start": "1382870",
    "end": "1387880"
  },
  {
    "text": "called with this specific parameter I expected to happen at least once and for",
    "start": "1387880",
    "end": "1395679"
  },
  {
    "text": "the test not to crash I'll also return the number three although in this point I don't really",
    "start": "1395679",
    "end": "1401200"
  },
  {
    "text": "care what numbers come back because testing this specific number is useless I just told him to do that and if we'll",
    "start": "1401200",
    "end": "1409480"
  },
  {
    "text": "run this code you can see what happens",
    "start": "1409480",
    "end": "1415230"
  },
  {
    "text": "we get here to the calculated test now we are here the data access I'll just",
    "start": "1415500",
    "end": "1420809"
  },
  {
    "text": "this data access inherit from the real one but in fact this is a gene Mauch on whatever data access this is my secular",
    "start": "1420809",
    "end": "1427870"
  },
  {
    "text": "such as created and if I'll jump",
    "start": "1427870",
    "end": "1434140"
  },
  {
    "text": "slightly on the side there's a fake line called widgets HTTP GET and I'll return",
    "start": "1434140",
    "end": "1440710"
  },
  {
    "text": "the result free which I don't care about in this point that has just ended whatever happens after this point is",
    "start": "1440710",
    "end": "1447670"
  },
  {
    "text": "useless to me because I just told him what to return right this is the magic",
    "start": "1447670",
    "end": "1452679"
  },
  {
    "text": "of fake objects and what happens with Google mock is that once you go out of",
    "start": "1452679",
    "end": "1458290"
  },
  {
    "text": "scope it will check whether or not what you just told him to happen really happened so in effect when I go out of",
    "start": "1458290",
    "end": "1466900"
  },
  {
    "text": "scope it will check that this method was called at least once and if I learn it all the way to",
    "start": "1466900",
    "end": "1472510"
  },
  {
    "text": "the end we can see the small V mark here telling me that it work if this wasn't the case if I'll change it to at least a",
    "start": "1472510",
    "end": "1479559"
  },
  {
    "text": "twice and run it quickly again I can find the I'm using the sharpest of C++",
    "start": "1479559",
    "end": "1486640"
  },
  {
    "text": "in this case but you can run it in command line as well we can see that it's fairly says too few actions",
    "start": "1486640",
    "end": "1493419"
  },
  {
    "text": "specified expect call happened you expect it to be called at least twice but it only was called once so you have",
    "start": "1493419",
    "end": "1501159"
  },
  {
    "text": "a bug and this is my thirty second introduction into mocking there's quite",
    "start": "1501159",
    "end": "1508899"
  },
  {
    "text": "small to death but that's the basics so now you know how to fake external",
    "start": "1508899",
    "end": "1514840"
  },
  {
    "text": "dependencies which is very useful but obviously this is still not the big",
    "start": "1514840",
    "end": "1521620"
  },
  {
    "text": "picture this is not the whole story right I just show you a very trivial situation which in legacy code will",
    "start": "1521620",
    "end": "1529330"
  },
  {
    "text": "probably not happen in logistical things are more complex and I just used",
    "start": "1529330",
    "end": "1538419"
  },
  {
    "text": "dependency injection I use the constructor to pass the dependencies in which also doesn't tend to happen in",
    "start": "1538419",
    "end": "1545020"
  },
  {
    "text": "legacy code usually I need to find a way to somehow push those fake objects from",
    "start": "1545020",
    "end": "1550240"
  },
  {
    "text": "outside to the inside of the class and I don't know how much code is so that",
    "start": "1550240",
    "end": "1555580"
  },
  {
    "text": "actually does that in C++ but if if it's as simple as just creating a new constructor that they get",
    "start": "1555580",
    "end": "1562600"
  },
  {
    "text": "all the dependencies instead of initializing them in the constructor inside whoa I'll just override the",
    "start": "1562600",
    "end": "1568210"
  },
  {
    "text": "constructor and I'm done if it's the measure of just doing something called the functional part of",
    "start": "1568210",
    "end": "1574390"
  },
  {
    "text": "the injection which is creative hole in my method a method that is set client or",
    "start": "1574390",
    "end": "1579580"
  },
  {
    "text": "something like that that I can call maybe that's a good solution although it says some problem with it but most of",
    "start": "1579580",
    "end": "1585610"
  },
  {
    "text": "the time is not that simple right most of the time I need to work extra hard",
    "start": "1585610",
    "end": "1591520"
  },
  {
    "text": "also you might have noticed that I gave myself a few discounts on the way my",
    "start": "1591520",
    "end": "1598000"
  },
  {
    "text": "class was over writable right all of the methods in the classes are",
    "start": "1598000",
    "end": "1604699"
  },
  {
    "text": "just faked if we go to the real classes here we go well you the rest idea client",
    "start": "1604699",
    "end": "1611959"
  },
  {
    "text": "has a virtual method how many of you owed virtual on any every single clear method you ever wrote written right it's",
    "start": "1611959",
    "end": "1620569"
  },
  {
    "text": "not often we do and it's not always this way they are in fact several",
    "start": "1620569",
    "end": "1625999"
  },
  {
    "text": "dependencies which are harder to fake which Google mock won't work for you because it can't override the method",
    "start": "1625999",
    "end": "1632479"
  },
  {
    "text": "ously we can't override the methods we have the problem and there's a group of",
    "start": "1632479",
    "end": "1638869"
  },
  {
    "text": "those kind of dependencies the source which is methods which are not virtual the second of which is classes I cannot",
    "start": "1638869",
    "end": "1646219"
  },
  {
    "start": "1645000",
    "end": "1645000"
  },
  {
    "text": "all find it very hard to inherit all right that's C++ we can do whatever we",
    "start": "1646219",
    "end": "1651949"
  },
  {
    "text": "want we can there are several shrieking superstars that will enable me to make the class impossible to inherit right I",
    "start": "1651949",
    "end": "1660219"
  },
  {
    "text": "can make the constructor project I can make the constructor very difficult with",
    "start": "1660219",
    "end": "1665359"
  },
  {
    "text": "a lot of dependencies there are quite a few of those static methods static",
    "start": "1665359",
    "end": "1670789"
  },
  {
    "text": "methods cannot be overridden because they do not belong to any class and",
    "start": "1670789",
    "end": "1676119"
  },
  {
    "text": "singleton goes through the same kind of place infinite on I make sure that one",
    "start": "1676119",
    "end": "1681949"
  },
  {
    "text": "no one can override my methods because what's the purpose of a singleton if someone can change the behavior and well",
    "start": "1681949",
    "end": "1689539"
  },
  {
    "text": "internally instantiated is the most common situation which in the method someone calls new and create a new",
    "start": "1689539",
    "end": "1697009"
  },
  {
    "text": "instance which means that I can take the fake object from outside and shove it into my code and lastly heavy classes",
    "start": "1697009",
    "end": "1703969"
  },
  {
    "text": "heavy classes are big classes that do a lot of things not a single responsibility to kind of classes those",
    "start": "1703969",
    "end": "1710239"
  },
  {
    "text": "classes usually called the database called the client and do all the calculation inside in hopefully in",
    "start": "1710239",
    "end": "1716599"
  },
  {
    "text": "different methods and those things were the dependency in the actual logic on",
    "start": "1716599",
    "end": "1721929"
  },
  {
    "text": "interwined one within the another are very how to fake because if I look fake",
    "start": "1721929",
    "end": "1728239"
  },
  {
    "text": "that class I'll fake away the implementation I care about",
    "start": "1728239",
    "end": "1734319"
  },
  {
    "text": "we'll start with Singleton's this is one implementation of singleton being a superstar film you might find a few",
    "start": "1734510",
    "end": "1740790"
  },
  {
    "text": "problems with it and that's fine I'm just trying to make a point and this",
    "start": "1740790",
    "end": "1748260"
  },
  {
    "text": "singleton has the end instance which is initialized exactly once using the code",
    "start": "1748260",
    "end": "1755370"
  },
  {
    "text": "once flag and a private constructor just so no one can call me on that singleton",
    "start": "1755370",
    "end": "1761610"
  },
  {
    "text": "now the switches situations when using single tones in code there's the good",
    "start": "1761610",
    "end": "1767700"
  },
  {
    "text": "way to use single tones in which I'll implement a singleton and use it outside",
    "start": "1767700",
    "end": "1772860"
  },
  {
    "text": "of the code I care about and pass that instance as if it is an instance of a",
    "start": "1772860",
    "end": "1778350"
  },
  {
    "text": "class and no one inside the code should know otherwise and then I can fake it easily but in many cases once I have a",
    "start": "1778350",
    "end": "1785429"
  },
  {
    "text": "single tone you'll notice people calling it from all over the place cause throughout the system the good news with",
    "start": "1785429",
    "end": "1793559"
  },
  {
    "text": "singleton is that if I managed to change the instance I don't need dependency injection because singleton in essence",
    "start": "1793559",
    "end": "1799710"
  },
  {
    "text": "is a dependency injection right if I'll change the instance is something else every single place that uses that",
    "start": "1799710",
    "end": "1805740"
  },
  {
    "text": "singleton will automatically get my instance I'll just need to find a good",
    "start": "1805740",
    "end": "1810929"
  },
  {
    "text": "way to do that and in fit of us we have something very powerful that we can use and it's this friend keyboard which was",
    "start": "1810929",
    "end": "1818010"
  },
  {
    "text": "there for ever by using the friend keyboard I can make sure someone else can call my private methods and yes it's",
    "start": "1818010",
    "end": "1826950"
  },
  {
    "text": "it says that I going to change now production code in order to test it and we'll get to that in a minute",
    "start": "1826950",
    "end": "1833309"
  },
  {
    "text": "but if we have a singleton here we go here I have this is the trip service",
    "start": "1833309",
    "end": "1840150"
  },
  {
    "text": "cutter you can find it online in github I change the sit assess implementation",
    "start": "1840150",
    "end": "1845429"
  },
  {
    "text": "I'll do a pull request later on but the idea is that I have two powers either",
    "start": "1845429",
    "end": "1851669"
  },
  {
    "text": "method get' flips by user very simple method ago it receives a user name a",
    "start": "1851669",
    "end": "1857880"
  },
  {
    "text": "user instance and first of all it checks whether or not I log in not the user but",
    "start": "1857880",
    "end": "1864000"
  },
  {
    "text": "I'm another user and it checks whether or not I'm logged in using a single term if the session get",
    "start": "1864000",
    "end": "1870389"
  },
  {
    "text": "instant get clogged the user obviously something bad will happen when I try to test that if I'm logged in then I want",
    "start": "1870389",
    "end": "1878519"
  },
  {
    "text": "to get all of the friends of that user and all of and check whether or not I'm",
    "start": "1878519",
    "end": "1887369"
  },
  {
    "text": "a friend of the user just past in the in the method beginning and if I'm a friend",
    "start": "1887369",
    "end": "1892619"
  },
  {
    "text": "if he authorized my user then I'll go to",
    "start": "1892619",
    "end": "1897809"
  },
  {
    "text": "the database and find all the trips of that other user and return all the trips",
    "start": "1897809",
    "end": "1902820"
  },
  {
    "text": "so I can see if my friend is currently going to a Y or something like that to",
    "start": "1902820",
    "end": "1908700"
  },
  {
    "text": "problems with us with this piece of code the first being the singleton who knows what the second one any one time to wake",
    "start": "1908700",
    "end": "1918450"
  },
  {
    "text": "up we have a static method called down downstairs here and a static method call",
    "start": "1918450",
    "end": "1925379"
  },
  {
    "text": "is another problem this is another form of the of using something I can't easily fake and I want to fake the singleton to",
    "start": "1925379",
    "end": "1932489"
  },
  {
    "text": "start with because there are a bunch of tests I can write but I can check whether or not I'm not logged in if I'm not logged in I should get an exception",
    "start": "1932489",
    "end": "1939330"
  },
  {
    "text": "if I am logged in but I'm not a friend of that user that's cool that's cool that's good enough then I should get an",
    "start": "1939330",
    "end": "1945989"
  },
  {
    "text": "empty list back right that's two tests I want to write and I can do that because if I write a test immediately it will",
    "start": "1945989",
    "end": "1952139"
  },
  {
    "text": "call the instance get another sense exception and nothing good will happen out of it actually it beans it'll start probably",
    "start": "1952139",
    "end": "1958739"
  },
  {
    "text": "be some exception happen please read the code UMP and the solution is quite",
    "start": "1958739",
    "end": "1965940"
  },
  {
    "text": "simple without changing the code too much but a bit I can go to my singleton",
    "start": "1965940",
    "end": "1973769"
  },
  {
    "text": "class over here this is the singleton class as you see the methods are",
    "start": "1973769",
    "end": "1980839"
  },
  {
    "text": "specifically written to for an exception because I don't I want to make sure I'm not calling those in the real code it's",
    "start": "1980839",
    "end": "1986879"
  },
  {
    "text": "probably going to some user session or whatever and here in the single class I",
    "start": "1986879",
    "end": "1992909"
  },
  {
    "text": "did two things I did a foreword Declaration of two new classes which I'm going to implement in a different place",
    "start": "1992909",
    "end": "1999570"
  },
  {
    "text": "in the tests till for fakie the session that will replace the reviews accession and the",
    "start": "1999570",
    "end": "2005820"
  },
  {
    "text": "user session accessor couldn't find a better name so and I made sure that both",
    "start": "2005820",
    "end": "2011070"
  },
  {
    "text": "of those are friends in the single of the singleton class having done that I",
    "start": "2011070",
    "end": "2016679"
  },
  {
    "text": "can now write the fake user session classes in Google mock here I go",
    "start": "2016679",
    "end": "2022320"
  },
  {
    "text": "fake user session has two method is either logged in returnable in value get",
    "start": "2022320",
    "end": "2028289"
  },
  {
    "text": "a user get logged user with a pointer to use it that's it",
    "start": "2028289",
    "end": "2033480"
  },
  {
    "text": "and I'll write another class called the user access all which are the single method sets that world's up to you what",
    "start": "2033480",
    "end": "2041429"
  },
  {
    "text": "you do in this specific clients I wanted to make sure that there's no previous instance and I was a bit lazy so what I",
    "start": "2041429",
    "end": "2048599"
  },
  {
    "text": "do I'll call get instance for the instance to get initialized and immediately deleted not perfect but walking and then",
    "start": "2048599",
    "end": "2056878"
  },
  {
    "text": "I'll replace the instance with my instance and that's it it's as simple as that once I allow a few things and then Evert",
    "start": "2056879",
    "end": "2064319"
  },
  {
    "text": "I'll go to my test here is the test shoot for an exception Wiesel is not",
    "start": "2064319",
    "end": "2069510"
  },
  {
    "text": "logged in when the user is not logged in I wanted for an exception I'll create a fake is a session and when Colleen",
    "start": "2069510",
    "end": "2077010"
  },
  {
    "text": "affected a session get logged in will return not logged in user essentially null pointed and I'll create",
    "start": "2077010",
    "end": "2085829"
  },
  {
    "text": "a real trip service that has no dependency injection whatsoever but",
    "start": "2085829",
    "end": "2091050"
  },
  {
    "text": "beforehand I'll make sure that to set my fake user session now every place in the",
    "start": "2091050",
    "end": "2097530"
  },
  {
    "text": "system that calls user session that instance will get my fake object very",
    "start": "2097530",
    "end": "2104430"
  },
  {
    "text": "important when you do with those kinds of tricks to make sure to clean afterwards you need to reset that thing",
    "start": "2104430",
    "end": "2109560"
  },
  {
    "text": "after you they finish airplane with it and now I can check that I'll get an",
    "start": "2109560",
    "end": "2115230"
  },
  {
    "text": "exception a sub falls means that when the method is called an exception will be found when get Sharif's by user I",
    "start": "2115230",
    "end": "2121829"
  },
  {
    "text": "don't care about which user I suppose to get user not logged in exception that's",
    "start": "2121829",
    "end": "2126869"
  },
  {
    "text": "this test second test I can write that when I'm not a friend of the user",
    "start": "2126869",
    "end": "2134000"
  },
  {
    "text": "which is fine then the number of ships returning is zero and I did it by",
    "start": "2134000",
    "end": "2141000"
  },
  {
    "text": "creating and not using and passing it on",
    "start": "2141000",
    "end": "2146310"
  },
  {
    "text": "and I make sure that when get logged user will be called it returns some user",
    "start": "2146310",
    "end": "2151890"
  },
  {
    "text": "which is not the friend of that use it okay and I get zero and although the two",
    "start": "2151890",
    "end": "2158099"
  },
  {
    "text": "tests second height I want to write more tests obviously I'm until I do it interesting that the interesting test says that when my user",
    "start": "2158099",
    "end": "2164609"
  },
  {
    "text": "is in fact logged in then I want to get these trips back and I did it he'll I'll",
    "start": "2164609",
    "end": "2172950"
  },
  {
    "text": "create the successions replace it with service here we go this is my friend and",
    "start": "2172950",
    "end": "2178890"
  },
  {
    "text": "my friend is my friend Teja he has two trips and when I call get treats by user",
    "start": "2178890",
    "end": "2185190"
  },
  {
    "text": "I should get the fees back in fact that's not what happens what happens is I'll get an exception right let's let me",
    "start": "2185190",
    "end": "2192720"
  },
  {
    "text": "run it for you and hope that nothing",
    "start": "2192720",
    "end": "2198420"
  },
  {
    "text": "that happens because demos in a session [Music] might be problematic where are you",
    "start": "2198420",
    "end": "2207619"
  },
  {
    "text": "as I said things turn to",
    "start": "2207650",
    "end": "2212809"
  },
  {
    "text": "interesting okay unfortunately for us",
    "start": "2219119",
    "end": "2225520"
  },
  {
    "text": "but this being C++ we can hack our way around using the command do it real",
    "start": "2225520",
    "end": "2233950"
  },
  {
    "text": "quick debug let's see whether or not in Google to test when I use it what I'll",
    "start": "2233950",
    "end": "2240220"
  },
  {
    "text": "end up with is an executable I can run and this is it Dell's out the test so I can go here in run trip service test and",
    "start": "2240220",
    "end": "2253839"
  },
  {
    "text": "I see that to test has passed those two test test okay but I get a failure without known seedless last exception",
    "start": "2253839",
    "end": "2261099"
  },
  {
    "text": "will surplusage be in C++ and so to test pass want a cell because I haven't done",
    "start": "2261099",
    "end": "2266260"
  },
  {
    "text": "anything about the static method and which we're going to solve next static",
    "start": "2266260",
    "end": "2275109"
  },
  {
    "start": "2274000",
    "end": "2274000"
  },
  {
    "text": "methods belong to a group called unfuckable methods unshakeable methods are methods which are impossible to",
    "start": "2275109",
    "end": "2281770"
  },
  {
    "text": "override static methods is one of them how to are impossible to instantiate",
    "start": "2281770",
    "end": "2286810"
  },
  {
    "text": "class our second one because I need to instantiate the class even if it's a say class if the constructor calls the",
    "start": "2286810",
    "end": "2293050"
  },
  {
    "text": "database that is a problem for me and unreal chole methods and if I can",
    "start": "2293050",
    "end": "2298240"
  },
  {
    "text": "inherit them I can take them in fact this is true to any other different",
    "start": "2298240",
    "end": "2305109"
  },
  {
    "text": "static language c-sharp vb.net java cannot fake using this method but c plus",
    "start": "2305109",
    "end": "2313240"
  },
  {
    "text": "or scan because in citruses we have a lot of power and in fact c++ will enable",
    "start": "2313240",
    "end": "2318819"
  },
  {
    "text": "me to fake unshakeable methods this is the power I wish I had in other places and the solution for which is using a",
    "start": "2318819",
    "end": "2326440"
  },
  {
    "text": "kind of duck typing that happens during the Bible in a compilation time using",
    "start": "2326440",
    "end": "2332589"
  },
  {
    "text": "template magic I can create a different class that look exactly like the class I'm trying to replace and by using this",
    "start": "2332589",
    "end": "2339819"
  },
  {
    "text": "template class I can tell him to replace the instance that is currently using with my instance and take unfixable",
    "start": "2339819",
    "end": "2347589"
  },
  {
    "text": "classes and I even can fake the classes that are",
    "start": "2347589",
    "end": "2353350"
  },
  {
    "text": "internally instantiated without having any other dependency injection well if",
    "start": "2353350",
    "end": "2361000"
  },
  {
    "text": "we go to trip service by the way this one is on github and not jump to head",
    "start": "2361000",
    "end": "2369540"
  },
  {
    "text": "what I did here is changed the trip",
    "start": "2370290",
    "end": "2375370"
  },
  {
    "text": "service class a bit I made it a template class it's a trip service of type T if",
    "start": "2375370",
    "end": "2382090"
  },
  {
    "text": "this was in fact production code real clients I would inherit it just so the",
    "start": "2382090",
    "end": "2387520"
  },
  {
    "text": "client want me to define which that is using all the time but I'll leave it",
    "start": "2387520",
    "end": "2392860"
  },
  {
    "text": "like this and the T happens field where I have the static method call all",
    "start": "2392860",
    "end": "2398830"
  },
  {
    "text": "they're all in case it's an instance method call button virtual the same",
    "start": "2398830",
    "end": "2403960"
  },
  {
    "text": "thing basically even if it was new T would work as well all I need is some",
    "start": "2403960",
    "end": "2410890"
  },
  {
    "text": "type that implements find Suites by user in order to get completion to walk and",
    "start": "2410890",
    "end": "2417190"
  },
  {
    "text": "now I can go here and create a fake trip",
    "start": "2417190",
    "end": "2423760"
  },
  {
    "text": "data access object class doesn't inherit anything not virtual and it has a static",
    "start": "2423760",
    "end": "2430210"
  },
  {
    "text": "method find treats by user with some dummy implementation in this case and",
    "start": "2430210",
    "end": "2438040"
  },
  {
    "text": "now I can take this class back to the test that failed before hand over here and all I need to do is is set it to use",
    "start": "2438040",
    "end": "2450400"
  },
  {
    "text": "the fake trips that are access object and that's it I just it went into the class and",
    "start": "2450400",
    "end": "2456580"
  },
  {
    "text": "replace whatever happens inside without doing too many changes I haven't broken",
    "start": "2456580",
    "end": "2461980"
  },
  {
    "text": "anything because the old code keeps on going the same way it worked before and",
    "start": "2461980",
    "end": "2467260"
  },
  {
    "text": "now this test will pass because it will call the fake trips that aux object and that's it and that's cool that's",
    "start": "2467260",
    "end": "2475660"
  },
  {
    "text": "something I don't have in any other language other than dynamic language but there has many more issues with legacy",
    "start": "2475660",
    "end": "2482200"
  },
  {
    "text": "code than I have here because it's the Namek and if I want the same code again",
    "start": "2482200",
    "end": "2488160"
  },
  {
    "text": "it passed if you ignored arrows in the end this is a Google test trying to send",
    "start": "2488160",
    "end": "2494890"
  },
  {
    "text": "me for myself yeah and that's it and I can do that to a multiple kind of methods in fact this",
    "start": "2494890",
    "end": "2502210"
  },
  {
    "text": "is this became my go-to operation whenever I can't easily inject the",
    "start": "2502210",
    "end": "2507580"
  },
  {
    "text": "classes and I can do that in the shop in fact in c-sharp and Java what I used",
    "start": "2507580",
    "end": "2512890"
  },
  {
    "start": "2508000",
    "end": "2508000"
  },
  {
    "text": "something called extract and override I'll extract the extract of the logic to different methods and then inherit that",
    "start": "2512890",
    "end": "2520210"
  },
  {
    "text": "in a class in my tests and override a method but this is much easier so simple",
    "start": "2520210",
    "end": "2525970"
  },
  {
    "text": "now some of you might feel that it those are not good solutions because I have",
    "start": "2525970",
    "end": "2532240"
  },
  {
    "text": "changed the code I have changed the legacy code and in order to support the",
    "start": "2532240",
    "end": "2537400"
  },
  {
    "text": "test and I have an answer in a story to explain why why it's okay the answer is",
    "start": "2537400",
    "end": "2544630"
  },
  {
    "text": "that I will do anything I can in order to get that code on the test because otherwise I can't walk I can't advance I",
    "start": "2544630",
    "end": "2551950"
  },
  {
    "text": "can't change it I can improve it and the second one the story is that a week ago I was late to walk the reason I was late",
    "start": "2551950",
    "end": "2559030"
  },
  {
    "text": "to walk is that city all decided that the junction in the end of my street is",
    "start": "2559030",
    "end": "2565060"
  },
  {
    "text": "where we have a big roundabout there with one lane and they want to change that to a multi Lane kind of Junction",
    "start": "2565060",
    "end": "2572500"
  },
  {
    "text": "with headlights and everything and there was a big tractor blocking the road and construction workers walking there and I",
    "start": "2572500",
    "end": "2579280"
  },
  {
    "text": "was stuck there for 20 minutes and I was not happy and I was stuck there ever",
    "start": "2579280",
    "end": "2585280"
  },
  {
    "text": "since because they are still doing whatever they do in there and I guess it will it will be like that for few weeks",
    "start": "2585280",
    "end": "2591970"
  },
  {
    "text": "or months but I know one thing as much as I suffer daily right now in a few",
    "start": "2591970",
    "end": "2598930"
  },
  {
    "text": "months when they finish my life will be so much easier I couldn't leave home later because I will not be stuck in",
    "start": "2598930",
    "end": "2606550"
  },
  {
    "text": "traffic because they will improve everything and what I have to pay right now is a slight hiccup on the way in",
    "start": "2606550",
    "end": "2615160"
  },
  {
    "text": "other words with legacy code things will get a bit Wars before they'll improve and that's something we",
    "start": "2615160",
    "end": "2621130"
  },
  {
    "text": "need to remember that's something that you need to explain your boss or your clients because they'll probably be",
    "start": "2621130",
    "end": "2626739"
  },
  {
    "text": "angry the beginning once you get a style change in corner IQ test but after a while you gain so much confidence and",
    "start": "2626739",
    "end": "2634059"
  },
  {
    "text": "control over your code that you forget it if I get all bad it was and I'm sure that if you'll talk to me a year from",
    "start": "2634059",
    "end": "2640359"
  },
  {
    "text": "now I'll be happy about the way the street stood out to be in that something",
    "start": "2640359",
    "end": "2647170"
  },
  {
    "text": "is very that is very important to remember there's a another very cool",
    "start": "2647170",
    "end": "2652599"
  },
  {
    "start": "2652000",
    "end": "2652000"
  },
  {
    "text": "thing I can do with Hitler's passing year end inheritance sometimes the methods the problematic",
    "start": "2652599",
    "end": "2659859"
  },
  {
    "text": "method especially when dealing with very big classes is infective private method",
    "start": "2659859",
    "end": "2665670"
  },
  {
    "text": "if I have a big class usually someone who didn't think about solely the",
    "start": "2665670",
    "end": "2672299"
  },
  {
    "text": "principle and the single sponsibility principle what all the logic in a single class or is one developer told me when I",
    "start": "2672299",
    "end": "2678729"
  },
  {
    "text": "told him it usually the question starts when people ask me how can I test",
    "start": "2678729",
    "end": "2684430"
  },
  {
    "text": "private methods it was in Java but I get it in any differently as we learned",
    "start": "2684430",
    "end": "2689680"
  },
  {
    "text": "which other and when a developer asked me about how to test a private method returns a small light bulb in the back",
    "start": "2689680",
    "end": "2695440"
  },
  {
    "text": "of my hand and I asked him why on earth would you want to do that and he says",
    "start": "2695440",
    "end": "2700839"
  },
  {
    "text": "that's because most of our logic is in private methods when looking at that",
    "start": "2700839",
    "end": "2707650"
  },
  {
    "text": "class usually what I will find is that the class have some generic name something's have been service utility",
    "start": "2707650",
    "end": "2714279"
  },
  {
    "text": "whatever and it has a single public method called execute or run or something on those lines and all of the",
    "start": "2714279",
    "end": "2720670"
  },
  {
    "text": "logic is shoved into that class and we get to see those quite a lot and usually",
    "start": "2720670",
    "end": "2726400"
  },
  {
    "text": "I'll I try to explain to that developer that you need to factor that class break",
    "start": "2726400",
    "end": "2731829"
  },
  {
    "text": "it into different classes and last time I did that I got an answer very",
    "start": "2731829",
    "end": "2739079"
  },
  {
    "text": "problematic answer that made me laugh inside because we don't want the laughs in front of the plant and he told me my",
    "start": "2739079",
    "end": "2746799"
  },
  {
    "text": "team leader does not believe in breaking things into classes",
    "start": "2746799",
    "end": "2751949"
  },
  {
    "text": "so good luck with that but even if it's what if I do believe in",
    "start": "2751989",
    "end": "2757729"
  },
  {
    "text": "classes this abstract the mythical creature sometimes I need to test this thing before I break it into classes",
    "start": "2757729",
    "end": "2763640"
  },
  {
    "text": "right and so I have this private method that save to the database and that's a",
    "start": "2763640",
    "end": "2768890"
  },
  {
    "text": "shame and I want to fake only that method and in C++ I can because all I have to do is in any that class and",
    "start": "2768890",
    "end": "2775789"
  },
  {
    "text": "declare all the classes public and that's it I can change the accessibility of methods in C++ by narrating that",
    "start": "2775789",
    "end": "2782390"
  },
  {
    "text": "class and I can fake the private method the protected method the problem whatever I want and this way and it's",
    "start": "2782390",
    "end": "2789619"
  },
  {
    "text": "not a healthy situation to bill with in but once I get this class on the test the part that I haven't faked I can",
    "start": "2789619",
    "end": "2796999"
  },
  {
    "text": "break it up to different classes at least I have the confidence that whatever worked before will continue on",
    "start": "2796999",
    "end": "2803029"
  },
  {
    "text": "walking and you can do that with any other language other just Acosta's so",
    "start": "2803029",
    "end": "2811700"
  },
  {
    "text": "that's the cool things so to summarize taking control of the legacy code we have a legacy code",
    "start": "2811700",
    "end": "2817160"
  },
  {
    "start": "2812000",
    "end": "2812000"
  },
  {
    "text": "situation which is not the perfect place to be but unfortunately most of us get to see that from time to time or all day",
    "start": "2817160",
    "end": "2822920"
  },
  {
    "text": "long so first thing we need to do is to write a few tests understand what the",
    "start": "2822920",
    "end": "2828799"
  },
  {
    "text": "code does for your code document the code for your code and then once I have",
    "start": "2828799",
    "end": "2834469"
  },
  {
    "text": "a few tests I'll probably hit a brick wall the brick will be in dependencies and then I'll get to employ those fake",
    "start": "2834469",
    "end": "2841069"
  },
  {
    "text": "objects or to mock objects in order to test without those dependencies and once",
    "start": "2841069",
    "end": "2846650"
  },
  {
    "text": "I have that in place I can replace it actual dependencies with my classes that does what I tell them to do and I can",
    "start": "2846650",
    "end": "2853160"
  },
  {
    "text": "refactor and clean up the code now if you was about recycled a few definition for the factoring does the right",
    "start": "2853160",
    "end": "2859549"
  },
  {
    "text": "definition bin I'll change what the code does without I change what the code how the code does something without changing",
    "start": "2859549",
    "end": "2865369"
  },
  {
    "text": "what the code does the second bin I want to rewrite the code but my boss won't",
    "start": "2865369",
    "end": "2870410"
  },
  {
    "text": "allow me so I'll call it with facto and not talking about that one but you can once your test in place and once I have",
    "start": "2870410",
    "end": "2877130"
  },
  {
    "text": "all of those well lucky me have maintainable code and this is the process that will take something the",
    "start": "2877130",
    "end": "2883920"
  },
  {
    "text": "- interviewed a few weeks - a year or so depending on the code but you'll get",
    "start": "2883920",
    "end": "2888990"
  },
  {
    "text": "there as long as you persist and and be",
    "start": "2888990",
    "end": "2894780"
  },
  {
    "text": "certain that what you're doing is in fact improving the code that was my",
    "start": "2894780",
    "end": "2901619"
  },
  {
    "text": "session thank you very much by the way if you like to learn more about unit",
    "start": "2901619",
    "end": "2906630"
  },
  {
    "text": "testing come to melt in my session and you can also go to Pluralsight I have a",
    "start": "2906630",
    "end": "2911849"
  },
  {
    "text": "few of those here if you need a few weeks there because I have to cause us",
    "start": "2911849",
    "end": "2917160"
  },
  {
    "text": "there which are more extensive than one hour we'll talk and if you have any",
    "start": "2917160",
    "end": "2923220"
  },
  {
    "text": "question I'll be happy to answer them all right now",
    "start": "2923220",
    "end": "2927230"
  }
]