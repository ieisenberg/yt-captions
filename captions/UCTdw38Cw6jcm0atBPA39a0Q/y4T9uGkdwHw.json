[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "all right uh good morning evening afternoon wherever you're joining from",
    "start": "10080",
    "end": "15120"
  },
  {
    "text": "uh and welcome to uh the first sessions of today for ndc sydney um today i'm going to be",
    "start": "15120",
    "end": "21920"
  },
  {
    "text": "talking about fixing some poor performance patterns and azure sql database applications",
    "start": "21920",
    "end": "27199"
  },
  {
    "text": "um a little bit about me before i start um one that kind of like these days is",
    "start": "27199",
    "end": "33040"
  },
  {
    "text": "saying that i started with sql server way back in the last century uh playing about with the version six",
    "start": "33040",
    "end": "38719"
  },
  {
    "text": "five so i've come through everything and all the evolutions of all the way through to the the cloud-based stuff that we've",
    "start": "38719",
    "end": "45039"
  },
  {
    "text": "got these days i've been a microsoft mvp for the data platform for",
    "start": "45039",
    "end": "50079"
  },
  {
    "text": "the last six years uh and sql database really is where my uh my expertise and focus has been these",
    "start": "50079",
    "end": "56879"
  },
  {
    "text": "days so really what we're going to look at here um back in days when you had",
    "start": "56879",
    "end": "64400"
  },
  {
    "start": "60000",
    "end": "204000"
  },
  {
    "text": "your your on-premises stuff uh you've got complete control about where you would set up your application your database",
    "start": "64400",
    "end": "70560"
  },
  {
    "text": "servers you'll have them put together in the same racks and really close together",
    "start": "70560",
    "end": "76000"
  },
  {
    "text": "all the equipment you need there everything would seem to be running really good you would tend to have these big beefy machines",
    "start": "76000",
    "end": "82560"
  },
  {
    "text": "for your database servers you're probably masking a lot of things that might have been happening there and",
    "start": "82560",
    "end": "88000"
  },
  {
    "text": "one of the best examples i had was an upgrade project i was working on and",
    "start": "88000",
    "end": "93840"
  },
  {
    "text": "in the data center they decided for some reason to put the new database server in a rack on a different floor so far",
    "start": "93840",
    "end": "101280"
  },
  {
    "text": "away from the existing application servers now when we did the testing to turn this on it just",
    "start": "101280",
    "end": "107439"
  },
  {
    "text": "absolutely dragged there was nothing there was no response no throughput it turns out that that investigation on",
    "start": "107439",
    "end": "113680"
  },
  {
    "text": "that the the cable run length between the application server and the database server ended up being something",
    "start": "113680",
    "end": "119680"
  },
  {
    "text": "ridiculous like about 120 meters so being able to then change that back",
    "start": "119680",
    "end": "125759"
  },
  {
    "text": "move everything else about into different rights took a little bit more downtime we've got it there and put everything together and",
    "start": "125759",
    "end": "131760"
  },
  {
    "text": "run brilliantly after that but when you go to cloud who knows what you're going to get with",
    "start": "131760",
    "end": "137040"
  },
  {
    "text": "that you get no control over the placement of where your actual service is going to be",
    "start": "137040",
    "end": "142080"
  },
  {
    "text": "running you don't know whether your application server is going to be anywhere near your actual database server so a lot of",
    "start": "142080",
    "end": "148480"
  },
  {
    "text": "these things particularly around how the interaction is and how things like latency",
    "start": "148480",
    "end": "153840"
  },
  {
    "text": "are going to impact it now become things where you have to pay a little bit more attention",
    "start": "153840",
    "end": "158879"
  },
  {
    "text": "and that's kind of some of the photos we're going to go through in this session we'll look at some of the bits where you can see",
    "start": "158879",
    "end": "163920"
  },
  {
    "text": "the latency being impacted and how we can mitigate for that as well but the other side of it is also because",
    "start": "163920",
    "end": "170720"
  },
  {
    "text": "you're there on somebody else's infrastructure and you're buying a certain amount of power in your database how do you make use of",
    "start": "170720",
    "end": "177680"
  },
  {
    "text": "that to get the optimal performance out of that how do you squeeze in the last bit of performance out of the the cpu memory uh i o",
    "start": "177680",
    "end": "185840"
  },
  {
    "text": "resources that you've been allocated for the amount you're willing to pay for so you've got that trade-off there yes you",
    "start": "185840",
    "end": "190959"
  },
  {
    "text": "can throw more money out and go bigger and beefier but is that really you know value for",
    "start": "190959",
    "end": "196080"
  },
  {
    "text": "your system by going that way so there's a delicate balance there and look at some of the ways that we can",
    "start": "196080",
    "end": "201519"
  },
  {
    "text": "make sure we optimize for that uh i'm going to go through i've picked five areas out",
    "start": "201519",
    "end": "207360"
  },
  {
    "start": "204000",
    "end": "216000"
  },
  {
    "text": "that i think are the most important bits to consider for this uh so that's what we'll run through",
    "start": "207360",
    "end": "213280"
  },
  {
    "text": "today so the first of those firewall access",
    "start": "213280",
    "end": "218879"
  },
  {
    "start": "216000",
    "end": "322000"
  },
  {
    "text": "uh and how you access azure sql database through either proxy or redirect",
    "start": "218879",
    "end": "224959"
  },
  {
    "text": "so i go out there and i deal with you know lots and lots of sql databases all over the place and what i normally see is this subset",
    "start": "224959",
    "end": "232159"
  },
  {
    "text": "up here you pretty much got the simplistic approach of your application as a connection string pointing to your",
    "start": "232159",
    "end": "239599"
  },
  {
    "text": "sql server endpoint uh you've got tcp 1433 opened up for that",
    "start": "239599",
    "end": "244959"
  },
  {
    "text": "and off you go that's all people tended to think of and all those they're available what that actually does though",
    "start": "244959",
    "end": "253040"
  },
  {
    "text": "is it directs your connection to the relevant gateway the gateway will then go okay let me",
    "start": "253040",
    "end": "260079"
  },
  {
    "text": "find out where that connection you want to go to is actually reciting so",
    "start": "260079",
    "end": "265120"
  },
  {
    "text": "which of my multitude of servers running sql server running instances there with your database on it",
    "start": "265120",
    "end": "272000"
  },
  {
    "text": "do i need to get a connection to and it will then proxy that through to there",
    "start": "272000",
    "end": "278320"
  },
  {
    "text": "there is another option though where you can get a direct connection straight through again we're pointing",
    "start": "278320",
    "end": "284800"
  },
  {
    "text": "initially to the gateway but what it's then doing is then look up for us and responding back and saying",
    "start": "284800",
    "end": "291040"
  },
  {
    "text": "well actually that particular database is residing here let me give you the direct address",
    "start": "291040",
    "end": "297360"
  },
  {
    "text": "for it and that you pass through that way it does require some changes to your",
    "start": "297360",
    "end": "303120"
  },
  {
    "text": "firewalls though so rather than just having 1433 available for your system",
    "start": "303120",
    "end": "308720"
  },
  {
    "text": "you've now got to open up the the 11 000 to 11 999 range because the redirect will actually take it away from 1433",
    "start": "308720",
    "end": "316000"
  },
  {
    "text": "into this higher port range to give you the direct connection through",
    "start": "316000",
    "end": "321840"
  },
  {
    "start": "322000",
    "end": "400000"
  },
  {
    "text": "so when we look at that a few bits and pieces you want to make sure that you've opened up that port range now depending upon where",
    "start": "322800",
    "end": "330240"
  },
  {
    "text": "your application server is there's different considerations here so if you're running that in azure or maybe some differences you need",
    "start": "330240",
    "end": "335840"
  },
  {
    "text": "to look at there and you might not be coming out of your own network boundary so much there so",
    "start": "335840",
    "end": "342320"
  },
  {
    "text": "some of the the poor issues might not be such an issue but when you're running with azure and you bought an nsg perhaps on",
    "start": "342320",
    "end": "349120"
  },
  {
    "text": "your v-net again you've got to consider the additional port range on there as well and same when using the",
    "start": "349120",
    "end": "356800"
  },
  {
    "text": "the vena endpoints as an option to to get into your sql database and that sort of stuff is through there",
    "start": "356800",
    "end": "363520"
  },
  {
    "text": "as well the other bit to remember though is depending upon your connection to the",
    "start": "363520",
    "end": "368800"
  },
  {
    "text": "internet because you want to date yourself in the cloud if you're still running some of your connectivity from on premises",
    "start": "368800",
    "end": "376400"
  },
  {
    "text": "what's where is the actual core bit of the latency there if you've got current internet connection the gain you",
    "start": "376880",
    "end": "382560"
  },
  {
    "text": "get from this might be insignificant because your biggest pain point is actually your",
    "start": "382560",
    "end": "387840"
  },
  {
    "text": "latency between your particular data center or on-premises your office whatever it is",
    "start": "387840",
    "end": "393440"
  },
  {
    "text": "and the internet so a bit of testing is worthwhile doing there and see whether it can actually improve that",
    "start": "393440",
    "end": "400800"
  },
  {
    "text": "it's um it used to be long we could change this was either directly through powershell or the azure cli",
    "start": "400800",
    "end": "406160"
  },
  {
    "text": "it used to be a code only change to update the connection policy and that's now being changed and now we",
    "start": "406160",
    "end": "412240"
  },
  {
    "text": "made that front and center in the portal you can go straight out here you can do a database there and",
    "start": "412240",
    "end": "417599"
  },
  {
    "text": "actually set that up and you can actually see that quite easily if you run a network analyzer on the traffic",
    "start": "417599",
    "end": "422880"
  },
  {
    "text": "between your application and database you'll actually see that switch over and getting the new address for your your",
    "start": "422880",
    "end": "430720"
  },
  {
    "text": "debit server and passing that back to the application and coming back through on the higher port range there to",
    "start": "430720",
    "end": "436160"
  },
  {
    "text": "to show that so first end of the day let's jump in and",
    "start": "436160",
    "end": "441199"
  },
  {
    "start": "438000",
    "end": "819000"
  },
  {
    "text": "have a quick look at this so i've got a vm in azure that i've just",
    "start": "441199",
    "end": "446319"
  },
  {
    "text": "installed management studio and that's going to be my simple client for this this particular test uh first thing is i'm going to show that",
    "start": "446319",
    "end": "453680"
  },
  {
    "text": "on my firewall so for the windows firewall you know something to consider there if you're running it on your application on the",
    "start": "453680",
    "end": "459440"
  },
  {
    "text": "windows server make sure that your windows firewall allows you to get out on the right port range as well so i've got everything",
    "start": "459440",
    "end": "465759"
  },
  {
    "text": "open there 1433 for my first initial connection i've got my 11 000 port range open there",
    "start": "465759",
    "end": "471360"
  },
  {
    "text": "as well so nothing's blocking that at the moment if i come in and look at uh",
    "start": "471360",
    "end": "478639"
  },
  {
    "text": "actually my connection policy here um i can show that that's",
    "start": "478639",
    "end": "484720"
  },
  {
    "text": "now got the the various options here for either default proxy redirect my default actually is proxy by default",
    "start": "484720",
    "end": "492319"
  },
  {
    "text": "so if you haven't changed anything it's going to be doing the proxy email as well um and you'll be able to change that and",
    "start": "492319",
    "end": "499199"
  },
  {
    "text": "then update the way it goes on the connection there the other bit that's going to be relevant",
    "start": "499199",
    "end": "505520"
  },
  {
    "text": "um if i find my right group here is going to be on my nsg",
    "start": "505520",
    "end": "514560"
  },
  {
    "text": "and again looking at my outbound rules what i've got is i've got 1433 as open so it's allowed",
    "start": "514560",
    "end": "521120"
  },
  {
    "text": "all the time but at the moment my redirect group my 11 000 i've got that set on a deny at the",
    "start": "521120",
    "end": "527440"
  },
  {
    "text": "moment so we're going to block things out from that so",
    "start": "527440",
    "end": "532640"
  },
  {
    "text": "let's jump in and have a look at what we're going to do here so i've already connected this up got my connection let's just make",
    "start": "532640",
    "end": "539920"
  },
  {
    "text": "sure that we're set to the right subscription here i'm just going to set a few variables for",
    "start": "539920",
    "end": "545120"
  },
  {
    "text": "my resource group and everything else i need to connect to i'm not going to change my firewall",
    "start": "545120",
    "end": "550560"
  },
  {
    "text": "rules here because they're already set up we don't have to worry about that but just let's verify",
    "start": "550560",
    "end": "555920"
  },
  {
    "text": "what our actual connection policy is at the moment as we can see it's still get that set to",
    "start": "555920",
    "end": "562560"
  },
  {
    "text": "my default so for the first bit i'm going to",
    "start": "562560",
    "end": "568240"
  },
  {
    "text": "actually be more explicit i'm going to say let's set that to",
    "start": "568240",
    "end": "574839"
  },
  {
    "text": "update sorry i said that to proxy explicitly um",
    "start": "574839",
    "end": "580000"
  },
  {
    "text": "and we've already seen that i've currently got a deny on the nsg so skip that one for now so let's jump on to my first",
    "start": "580000",
    "end": "588560"
  },
  {
    "text": "management studio and we connect onto my database server",
    "start": "588560",
    "end": "594720"
  },
  {
    "text": "[Music] just like take my password correctly",
    "start": "594720",
    "end": "600399"
  },
  {
    "text": "over here",
    "start": "600399",
    "end": "605839"
  },
  {
    "text": "cool i'm just going to open a new query it doesn't matter which database",
    "start": "607920",
    "end": "616000"
  },
  {
    "text": "i'm going to do on this one is",
    "start": "616320",
    "end": "620480"
  },
  {
    "text": "simple query just selecting a straightforward value back out so i'm taking away things",
    "start": "621600",
    "end": "626800"
  },
  {
    "text": "like any sort of io interaction from here it's all going to be this just give me something back i've got this",
    "start": "626800",
    "end": "633600"
  },
  {
    "text": "option with management shooter where i can put the the client statistics and that's kind of useful because when i",
    "start": "633600",
    "end": "638959"
  },
  {
    "text": "run this through and let it go through the the various runs here i'll go through selecting this 100 times",
    "start": "638959",
    "end": "645120"
  },
  {
    "text": "once it's completed that it's going to come back and give me this bit on applying statistics an important thing i want to look at",
    "start": "645120",
    "end": "650880"
  },
  {
    "text": "here is the way timing server replies and that's the measure of where it's going what's that latency you're coming",
    "start": "650880",
    "end": "657120"
  },
  {
    "text": "through on my connections here so you know it gave me a 250 milliseconds on that",
    "start": "657120",
    "end": "663760"
  },
  {
    "text": "okay so we're we've got a starting point there for that side now let's open up",
    "start": "663760",
    "end": "671279"
  },
  {
    "text": "our nsg so we're now going to make that 11 000",
    "start": "671279",
    "end": "678160"
  },
  {
    "text": "to 199 port range available",
    "start": "678160",
    "end": "689279"
  },
  {
    "text": "and now i'm going to open a second connection here",
    "start": "689279",
    "end": "703360"
  },
  {
    "text": "so save server same database same query",
    "start": "703360",
    "end": "710790"
  },
  {
    "text": "[Music] and again put my client statistics on",
    "start": "710790",
    "end": "716160"
  },
  {
    "text": "for this one and fire that off",
    "start": "716160",
    "end": "720399"
  },
  {
    "text": "so we'll see once that comes through",
    "start": "725440",
    "end": "731839"
  },
  {
    "text": "is completely the opposite of what is done for every single time i have done with this",
    "start": "734800",
    "end": "740079"
  },
  {
    "text": "and is trying desperately to show me a lie on here that is now changed it to a higher value",
    "start": "740079",
    "end": "748480"
  },
  {
    "text": "which is quite fascinating let me come back and rerun",
    "start": "748480",
    "end": "753200"
  },
  {
    "text": "on the previous one as well",
    "start": "753600",
    "end": "759839"
  },
  {
    "text": "that is uh the most bizarre experience on there um",
    "start": "763760",
    "end": "770320"
  },
  {
    "text": "so out of probably hundreds of times i've run this demo it has always come down and showed a",
    "start": "770320",
    "end": "776480"
  },
  {
    "text": "reduction in the time on here uh i don't know why that's perhaps decided today of all days to give me",
    "start": "776480",
    "end": "782959"
  },
  {
    "text": "something bizarre on that but on the the redirect policy what we should see is that that time",
    "start": "782959",
    "end": "789760"
  },
  {
    "text": "will come down if i run through a number of tests and what this is an average over time undoubtedly you'll see that but we will",
    "start": "789760",
    "end": "796639"
  },
  {
    "text": "just work the time on the uh the session today um we'll skip past",
    "start": "796639",
    "end": "801680"
  },
  {
    "text": "that but you know the experience you should see there from that is that that will come down so again it's reiterating the flag of",
    "start": "801680",
    "end": "808240"
  },
  {
    "text": "don't just do one test once you've got this set up run it with a realistic expression of",
    "start": "808240",
    "end": "813360"
  },
  {
    "text": "your workload and see whether the the two options give you a benefit from there but that's somewhere where you can start to squeeze",
    "start": "813360",
    "end": "820000"
  },
  {
    "start": "819000",
    "end": "1151000"
  },
  {
    "text": "some more performance out of your system now related to latency as well um over fetching so the n plus one",
    "start": "820000",
    "end": "827279"
  },
  {
    "text": "selects uh issue that you can get with your code again with uh that increasing latency that you'll they",
    "start": "827279",
    "end": "833839"
  },
  {
    "text": "will get with the cloud-based system that's going to increase that issue so the more to ground trips that you have",
    "start": "833839",
    "end": "839440"
  },
  {
    "text": "to go back to the database but what that's going to be for the performance of your application",
    "start": "839440",
    "end": "845360"
  },
  {
    "text": "very commonly seen in things like orm applications or where you've got the use of apis that are very focused on delivering",
    "start": "845360",
    "end": "852560"
  },
  {
    "text": "one particular piece of information back to you when you start to you know to join those",
    "start": "852560",
    "end": "857760"
  },
  {
    "text": "together and go i need to get something a little bit more an extensive area with that sort of one-to-many relationship",
    "start": "857760",
    "end": "863920"
  },
  {
    "text": "that's where you can start to see this sort of issue coming in and feeding into your code if you haven't actually",
    "start": "863920",
    "end": "869519"
  },
  {
    "text": "addressed it and look to see how you can optimize for that um so again you tend to get this bit of",
    "start": "869519",
    "end": "877600"
  },
  {
    "text": "your first entity there you getting the whole collection for that and then for each of those having to go",
    "start": "877600",
    "end": "883120"
  },
  {
    "text": "and get the other related pieces of data that go with that um as i said another",
    "start": "883120",
    "end": "888560"
  },
  {
    "text": "way that i've seen it is various calls to an api that returns a certain amount of the",
    "start": "888560",
    "end": "895199"
  },
  {
    "text": "data that you actually need to resolve for your query but not everything and then from there it's",
    "start": "895199",
    "end": "900720"
  },
  {
    "text": "going off for each role creating the additional api to go and get that additional pieces of data",
    "start": "900720",
    "end": "906639"
  },
  {
    "text": "fill in the gaps and give us the whole picture that we're needing for the application there so you can again you can see visually that that",
    "start": "906639",
    "end": "913680"
  },
  {
    "text": "whole approach of how it can then mount up the number of round trips of the database and decrease your performance overall",
    "start": "913680",
    "end": "922399"
  },
  {
    "text": "um there isn't a silver bullet on this one because there's so many ways to code for this",
    "start": "922399",
    "end": "927680"
  },
  {
    "text": "um one example here um so the changing the simple approach here",
    "start": "927680",
    "end": "934079"
  },
  {
    "text": "to use a dot include on your you call to the the object model",
    "start": "934079",
    "end": "939360"
  },
  {
    "text": "there that's one way that can pull everything back from your related items um it may well be on that though that",
    "start": "939360",
    "end": "946160"
  },
  {
    "text": "you then bring back too much data so if you're looking for one small part on the related items",
    "start": "946160",
    "end": "951279"
  },
  {
    "text": "this is still going to pull everything back related to that so something like this might be a good",
    "start": "951279",
    "end": "957279"
  },
  {
    "text": "explain a good scenario where you go for an explicit community database so you",
    "start": "957279",
    "end": "962320"
  },
  {
    "text": "write your own query whether that's uh through a stored procedure or whether you actually physically write out the query and send",
    "start": "962320",
    "end": "969040"
  },
  {
    "text": "that as the definition there to go and get that and it can return everything",
    "start": "969040",
    "end": "974079"
  },
  {
    "text": "back in one go from there okay so example around this",
    "start": "974079",
    "end": "982639"
  },
  {
    "text": "um and i just got",
    "start": "982639",
    "end": "986399"
  },
  {
    "text": "a little bit on this to show a sample of course i didn't actually yes it's this one",
    "start": "987680",
    "end": "995680"
  },
  {
    "text": "activate that window so what we're going to run here and the way we've got this one set up is",
    "start": "995680",
    "end": "1003040"
  },
  {
    "text": "uh for the basic setup of it i'm really just going back to the to the",
    "start": "1003040",
    "end": "1008320"
  },
  {
    "text": "one object here once i've got all my standards and then go back and do enough for each",
    "start": "1008320",
    "end": "1013360"
  },
  {
    "text": "of those getting all the related students for that one that's going to show me my uh my n plus one issue there",
    "start": "1013360",
    "end": "1021279"
  },
  {
    "text": "one method to fix that i'm using my include there to pull back the information around the students in",
    "start": "1021279",
    "end": "1027438"
  },
  {
    "text": "this one so that wouldn't come down to her for each loop here to write everything out i've already got all the data back for",
    "start": "1027439",
    "end": "1033120"
  },
  {
    "text": "that one so it's a very simple bit of code to do that but if we find that off and show the the first",
    "start": "1033120",
    "end": "1039760"
  },
  {
    "text": "version of it so we see we've got our our first query",
    "start": "1039760",
    "end": "1046319"
  },
  {
    "text": "here and then our second format query here for each entity that we've",
    "start": "1046319",
    "end": "1052880"
  },
  {
    "text": "got through on there uh we'll find that some of those are giving us some data back so we get",
    "start": "1052880",
    "end": "1058080"
  },
  {
    "text": "bill steve out there the first time mohammed the second one uh capital at the third one and on from",
    "start": "1058080",
    "end": "1065520"
  },
  {
    "text": "there as well and if we look at the timings on each of those um each of those calls for the additional",
    "start": "1065520",
    "end": "1071919"
  },
  {
    "text": "data on the side 25 to 15 you know 25 to 30 milliseconds on each of those so that mounts up in",
    "start": "1071919",
    "end": "1079200"
  },
  {
    "text": "terms of our performance there in the number of round trips if we fire off",
    "start": "1079200",
    "end": "1084799"
  },
  {
    "text": "and look at the fixed version we'll see that our single query yes it's a bit more complex",
    "start": "1084799",
    "end": "1090400"
  },
  {
    "text": "in building things out and getting the join in place there to get our child objects but we get everything back in one go",
    "start": "1090400",
    "end": "1099360"
  },
  {
    "text": "and we've got far far less time involved on that as well so something there to to make sure that",
    "start": "1099520",
    "end": "1106000"
  },
  {
    "text": "you're looking for that trying to see things through that uh one of the ways you might be able to you know pick that out",
    "start": "1106000",
    "end": "1112799"
  },
  {
    "text": "if it's not obvious from your code is starting to look at things like the query plans are generated on your sql",
    "start": "1112799",
    "end": "1118799"
  },
  {
    "text": "server and looking at the the details of what you're seeing in there you may find that if you're getting an awful lot of",
    "start": "1118799",
    "end": "1125679"
  },
  {
    "text": "similar query plans but there may be single use plans or a lot of very very similar plans",
    "start": "1125679",
    "end": "1132480"
  },
  {
    "text": "that might be an indication that this is what you're experiencing the consent for each of those child items it's doing the",
    "start": "1132480",
    "end": "1138400"
  },
  {
    "text": "same query but with a different parameter on it and depending upon how you're then set up for uh parameterization",
    "start": "1138400",
    "end": "1146160"
  },
  {
    "text": "and managing your plan cache correctly that may be something that manifests itself in there which leads us on nicely to the",
    "start": "1146160",
    "end": "1153280"
  },
  {
    "start": "1151000",
    "end": "1432000"
  },
  {
    "text": "next part to talk about is that piece of memory optimization so the way you get your query plan goes",
    "start": "1153280",
    "end": "1161360"
  },
  {
    "text": "through before it actually starts to return your results you know that query submitted",
    "start": "1161360",
    "end": "1166799"
  },
  {
    "text": "the query text gets hashed first of all and then it looks for a match for that",
    "start": "1166799",
    "end": "1173039"
  },
  {
    "text": "that hash in the the plan cache already so has this query already been run do i",
    "start": "1173039",
    "end": "1179120"
  },
  {
    "text": "already know how i'm physically going to go about getting the data and returning it to you um",
    "start": "1179120",
    "end": "1184720"
  },
  {
    "text": "if it is great i can just go ahead use that plan and start to deliver your results back",
    "start": "1184720",
    "end": "1190400"
  },
  {
    "text": "if not i've got to spend the time to compile brand new plan for that store that into the plan cache and then i'm ready to go",
    "start": "1190400",
    "end": "1197360"
  },
  {
    "text": "ahead and execute but there's limits to that so you've got a fixed amount of your",
    "start": "1197360",
    "end": "1203200"
  },
  {
    "text": "memory where you can actually store your plans um now it depends upon the tier of uh",
    "start": "1203200",
    "end": "1209120"
  },
  {
    "text": "database you've got so it is something that's scalable with the higher tiers you do get more but it's limited by",
    "start": "1209120",
    "end": "1214480"
  },
  {
    "text": "either a number of plans of the total size whichever it gets reached first and then the hash",
    "start": "1214480",
    "end": "1221039"
  },
  {
    "text": "has to be an exact match to get you the use in there so be aware that if you've got case",
    "start": "1221039",
    "end": "1226480"
  },
  {
    "text": "differences if you've got an extra space uh if you",
    "start": "1226480",
    "end": "1231600"
  },
  {
    "text": "you know run things over multi-line as opposed to a single line all those can actually be slightly different so as long as your",
    "start": "1231600",
    "end": "1238080"
  },
  {
    "text": "application's sending it in a consistent manner great you should be able to pick things up but if not then you might start to",
    "start": "1238080",
    "end": "1243919"
  },
  {
    "text": "get some bloating in there as well also with buying a service and platform as a service approach you've got",
    "start": "1243919",
    "end": "1250480"
  },
  {
    "text": "fixed amount of memory uh to use there and to use across everything and get your memory shared between your",
    "start": "1250480",
    "end": "1257440"
  },
  {
    "text": "buffer cache where your data is actually loaded and returned to you and that's the bit you want lots of that you want",
    "start": "1257440",
    "end": "1262640"
  },
  {
    "text": "all your data to be there so you don't have to do any disc io or possible but the more",
    "start": "1262640",
    "end": "1268400"
  },
  {
    "text": "you're using up the equity plans the less you've actually got for the actual data and you've got that",
    "start": "1268400",
    "end": "1274240"
  },
  {
    "text": "possibility of impacting things there and causing more io instead of being able to return and satisfy your community from memory",
    "start": "1274240",
    "end": "1282159"
  },
  {
    "text": "what causes that as a lot is a lot of single-use ad-hoc plans and each time it goes through",
    "start": "1282159",
    "end": "1288240"
  },
  {
    "text": "those it's also consuming high cpu as well because it's got to recompile or compile each of those new",
    "start": "1288240",
    "end": "1293520"
  },
  {
    "text": "plans as well so if you start to monitor your performance to see icpu and i memory usage",
    "start": "1293520",
    "end": "1299600"
  },
  {
    "text": "you've got less dtus that are available there for running the actual queries themselves and delivering the results",
    "start": "1299600",
    "end": "1305440"
  },
  {
    "text": "back to you so again i'm a little bit there to be aware of how your system's been used",
    "start": "1305440",
    "end": "1310480"
  },
  {
    "text": "can i tune it better to give me a better response",
    "start": "1310480",
    "end": "1315520"
  },
  {
    "text": "first step is obviously looking to see can you actually write your queries in a parameterized version",
    "start": "1315520",
    "end": "1320960"
  },
  {
    "text": "can you make use of that within the code to ensure it goes through and using the correct type of parameters",
    "start": "1320960",
    "end": "1326640"
  },
  {
    "text": "as well um i've seen the bits where using the the",
    "start": "1326640",
    "end": "1332000"
  },
  {
    "text": "max option i think that's the default for ef if you're just using the string is it'll",
    "start": "1332000",
    "end": "1337520"
  },
  {
    "text": "default to you know background max type um that's poor as well because you know",
    "start": "1337520",
    "end": "1342799"
  },
  {
    "text": "one it's got to be implicitly cast converted at the sql engine in to matching uh another data type",
    "start": "1342799",
    "end": "1350559"
  },
  {
    "text": "it limits the use of indexes so again you know if you're parameterizing make sure you define your parameters",
    "start": "1350559",
    "end": "1356000"
  },
  {
    "text": "very well particularly in terms of the length of those parameters",
    "start": "1356000",
    "end": "1361120"
  },
  {
    "text": "we can tweak it at the database side by forcing parameterization so we can say i don't care what's coming",
    "start": "1361120",
    "end": "1367440"
  },
  {
    "text": "in i'm going to look at every single query and if there's an opportunity to parameterize it",
    "start": "1367440",
    "end": "1372640"
  },
  {
    "text": "i'm going to do that and i'm going to store the plan cache i'm going to store the the parameterized",
    "start": "1372640",
    "end": "1378799"
  },
  {
    "text": "type so i will get matches in the future there and be able to reuse it",
    "start": "1378799",
    "end": "1384720"
  },
  {
    "text": "it does cause a little bit slowness that way because of the conversion looking at parameter sniffing so you",
    "start": "1384720",
    "end": "1390400"
  },
  {
    "text": "might have some impact in terms of performance by doing it that way so perhaps a better approach is having",
    "start": "1390400",
    "end": "1397200"
  },
  {
    "text": "to optimize for ad hoc so if you know you're going to get a lot of queries that are going to be in",
    "start": "1397200",
    "end": "1403440"
  },
  {
    "text": "single-use type it's going to be you know that variation is going to be small enough",
    "start": "1403440",
    "end": "1408880"
  },
  {
    "text": "uh and things are then thrown away then optimizing for ad hoc is a great way to do it because it won't then store the",
    "start": "1408880",
    "end": "1414880"
  },
  {
    "text": "full plan on the first time so if you go through and that's never repeated right you know that stores a minimum",
    "start": "1414880",
    "end": "1421360"
  },
  {
    "text": "amount of data and it's easier to flush out at the end of the day it's only then once you get that used a",
    "start": "1421360",
    "end": "1428159"
  },
  {
    "text": "second time does it do a full version of that",
    "start": "1428159",
    "end": "1433039"
  },
  {
    "text": "so let's have a look at the impact that that can have on our system",
    "start": "1433600",
    "end": "1445679"
  },
  {
    "text": "all right so what i'm going to set up in my database is to store procedures uh and most of it is here for making",
    "start": "1445679",
    "end": "1453440"
  },
  {
    "text": "some randomization on it so i'm going to just tell it with my parameter how many times to run",
    "start": "1453440",
    "end": "1459520"
  },
  {
    "text": "what it's going to do is this first bit code is just going to give me a random value that i'm going to use in the inner select now for",
    "start": "1459520",
    "end": "1467200"
  },
  {
    "text": "the first one the unparameterized version i'm going to build it up as a dynamic sql string and pass that",
    "start": "1467200",
    "end": "1473440"
  },
  {
    "text": "through so very simplistic approach on there passing in just the state value",
    "start": "1473440",
    "end": "1479600"
  },
  {
    "text": "and calling z to do that the second version of it i've actually",
    "start": "1479600",
    "end": "1486080"
  },
  {
    "text": "got it properly parameterized in there asking that n is a parameter variable",
    "start": "1486080",
    "end": "1491279"
  },
  {
    "text": "and yes it's a very simplistic example it's not really something i'll see so much of the real world there's the difference",
    "start": "1491279",
    "end": "1496640"
  },
  {
    "text": "between these two but it's something that's sufficient to show the differences in what we're doing here",
    "start": "1496640",
    "end": "1504480"
  },
  {
    "text": "okay so we've got those created",
    "start": "1504799",
    "end": "1508399"
  },
  {
    "text": "first thing i'm going to do is make sure that everything is cleaned out that we've got a nice",
    "start": "1511360",
    "end": "1516400"
  },
  {
    "text": "clean cash everything's empty to start with so we're not impacting it from anything else and just to verify that",
    "start": "1516400",
    "end": "1524400"
  },
  {
    "text": "there's nothing in there and my filter here just making sure that i'm not logging the actual query that's running",
    "start": "1524400",
    "end": "1530159"
  },
  {
    "text": "to get this data back uh to actually include in there as well [Music]",
    "start": "1530159",
    "end": "1536240"
  },
  {
    "text": "so let's run the first one that will run through i'm going calls",
    "start": "1536240",
    "end": "1541440"
  },
  {
    "text": "the procedure 10 times getting some data on there and if i look at what that's done",
    "start": "1541440",
    "end": "1548080"
  },
  {
    "text": "what we can see is that we've got first of all",
    "start": "1548799",
    "end": "1557840"
  },
  {
    "text": "um so we've got one plan here for the the procedure itself",
    "start": "1566559",
    "end": "1573200"
  },
  {
    "text": "but then we've got these other 10 ad hoc ones for each time it was called and notice on that that each of those",
    "start": "1573200",
    "end": "1580320"
  },
  {
    "text": "has a single execution on it now if i go the other way and run my",
    "start": "1580320",
    "end": "1587279"
  },
  {
    "text": "parameterized version then once that has run through my ten times let's go back in and",
    "start": "1587279",
    "end": "1594480"
  },
  {
    "text": "see what impact that's had now what we've got is we've added in",
    "start": "1594480",
    "end": "1602000"
  },
  {
    "text": "another one for the the procedure but this time i have an execution count of",
    "start": "1602000",
    "end": "1607600"
  },
  {
    "text": "10 so it's called the same thing 10 times we've been able to get that reuse out of it so i've saved that bit on there i",
    "start": "1607600",
    "end": "1614159"
  },
  {
    "text": "haven't had to you know to blow things out and increase the number of plans that we're storing",
    "start": "1614159",
    "end": "1621039"
  },
  {
    "text": "to get that done",
    "start": "1621039",
    "end": "1626960"
  },
  {
    "text": "so again we'll come back and do the same thing again get our first bit to start with so we'll",
    "start": "1626960",
    "end": "1632000"
  },
  {
    "text": "clean that all out we're back in here just the uh the basic stuff on here",
    "start": "1632000",
    "end": "1640080"
  },
  {
    "text": "now i need to pull the next bit into the query",
    "start": "1640080",
    "end": "1646240"
  },
  {
    "text": "grab the bits back from",
    "start": "1648880",
    "end": "1655840"
  },
  {
    "text": "pop those into my new one so we can look at it",
    "start": "1661440",
    "end": "1665759"
  },
  {
    "text": "on this one i'm going to run it with force parameterization and again running the unparameterized",
    "start": "1666480",
    "end": "1675520"
  },
  {
    "text": "selects and what we can see now is it's converted that it's worked through on that query on the",
    "start": "1680840",
    "end": "1687279"
  },
  {
    "text": "inner select i can take that bit out for the the parameter that's passed in i can properly uh parameterize what's",
    "start": "1687279",
    "end": "1695360"
  },
  {
    "text": "stored as a query plan so we can see the format has changed and we're now passing it as a variable in here in the",
    "start": "1695360",
    "end": "1703039"
  },
  {
    "text": "query text um it's changing the type to be a prepared plan",
    "start": "1703039",
    "end": "1709039"
  },
  {
    "text": "but we've got our execution count of 10. so even just on that we can see it has made some improvements in what's going",
    "start": "1709039",
    "end": "1715520"
  },
  {
    "text": "to be stored there the amount of reduce and being able to go through things a lot easier from there",
    "start": "1715520",
    "end": "1725279"
  },
  {
    "text": "okay let's reset that back",
    "start": "1725279",
    "end": "1739840"
  },
  {
    "text": "so the other option i mentioned was optimizing bad hot workloads so again we'll set that up",
    "start": "1740240",
    "end": "1747840"
  },
  {
    "text": "clear things out and just show",
    "start": "1747840",
    "end": "1752880"
  },
  {
    "text": "what we're using in terms of um the the memory usage on here",
    "start": "1752880",
    "end": "1760720"
  },
  {
    "text": "i'm just going to capture that out",
    "start": "1760880",
    "end": "1767840"
  },
  {
    "text": "let's just save that in there for now",
    "start": "1774080",
    "end": "1781520"
  },
  {
    "text": "so i'm just going to pick a a value i've just had coded in a particular version in here for that in",
    "start": "1781520",
    "end": "1788799"
  },
  {
    "text": "our select",
    "start": "1788799",
    "end": "1794799"
  },
  {
    "text": "and let's see what that's done so we've got stub of it in here an",
    "start": "1794799",
    "end": "1800480"
  },
  {
    "text": "important thing to notice is it hasn't actually stored that full detailed query plan so our ad",
    "start": "1800480",
    "end": "1806080"
  },
  {
    "text": "hoc bit here is just going what's the absolute minimum i'm just going to store what's uh the text and the sql handle and the hashes",
    "start": "1806080",
    "end": "1814000"
  },
  {
    "text": "minimum amount here and to manage that so if i never see that query again great",
    "start": "1814000",
    "end": "1820240"
  },
  {
    "text": "that's all i've used up is just that small amount of memory to store that piece of information if i run it",
    "start": "1820240",
    "end": "1826559"
  },
  {
    "text": "again with a different one again what i'm going to get is another stub created",
    "start": "1826559",
    "end": "1833520"
  },
  {
    "text": "for that one now if we go back now and we use the the first one",
    "start": "1833760",
    "end": "1840880"
  },
  {
    "text": "and show that",
    "start": "1842320",
    "end": "1845840"
  },
  {
    "text": "we can now see that it's changed from a stub into full plan and it's now stored fuel query plan",
    "start": "1848399",
    "end": "1853919"
  },
  {
    "text": "details in there as well so we can see we've got that space saving from not having to store that",
    "start": "1853919",
    "end": "1860080"
  },
  {
    "text": "in this case it won't be a big amount because it's a fairly simplistic query but you can imagine if you've got fairly complex query and multi-steps in it",
    "start": "1860080",
    "end": "1867360"
  },
  {
    "text": "that that actual query plan can actually go to a fairly reasonable size per plan and that's where we can start",
    "start": "1867360",
    "end": "1875039"
  },
  {
    "text": "to see that that will blow out the amount that's used in our",
    "start": "1875039",
    "end": "1881200"
  },
  {
    "text": "our plan cache so if i go back and compare that",
    "start": "1881200",
    "end": "1886158"
  },
  {
    "text": "and see what the changes have been so we can see that our our number of",
    "start": "1886720",
    "end": "1893279"
  },
  {
    "text": "plans have increased and there's been a small increase in the amount of memory consumed by that",
    "start": "1893279",
    "end": "1898880"
  },
  {
    "start": "1894000",
    "end": "2001000"
  },
  {
    "text": "you know in this age you know about half a megabyte on that again that's for a very small simplistic",
    "start": "1898880",
    "end": "1905440"
  },
  {
    "text": "plan we can see that if that was something a little bit more substantial that that could start to grow at a",
    "start": "1905440",
    "end": "1912640"
  },
  {
    "text": "reasonable rate as well so how much can",
    "start": "1912640",
    "end": "1919120"
  },
  {
    "text": "that sort of thing get into it so if we run that another 100 times",
    "start": "1919360",
    "end": "1927120"
  },
  {
    "text": "come back and look at that once it completes",
    "start": "1929440",
    "end": "1935840"
  },
  {
    "text": "and looking at that i think casual has got a little bit of a slowly",
    "start": "1951200",
    "end": "1957039"
  },
  {
    "text": "perhaps so if we come on to that and see what difference you know 100 executions makes",
    "start": "1960840",
    "end": "1967519"
  },
  {
    "text": "again it's not a massive amount on that simplistic one but if you've got a busy system it's not",
    "start": "1967600",
    "end": "1973600"
  },
  {
    "text": "parameterizing things correctly you're starting to get you know various high talk plans",
    "start": "1973600",
    "end": "1979039"
  },
  {
    "text": "introduced on there we can see looking like it's not to creep up and creep up and depend upon what level we've set",
    "start": "1979039",
    "end": "1985440"
  },
  {
    "text": "for our database here then that can start creeping to the amount of memory that we're consuming",
    "start": "1985440",
    "end": "1991440"
  },
  {
    "text": "and what's available for everything else to make use of",
    "start": "1991440",
    "end": "1996799"
  },
  {
    "start": "2001000",
    "end": "2424000"
  },
  {
    "text": "related to that again now looking at the buffer cache side of things rather than the blind cache how can we ensure that",
    "start": "2002240",
    "end": "2008720"
  },
  {
    "text": "we're making best use of our memory on there compression is something i don't see",
    "start": "2008720",
    "end": "2016000"
  },
  {
    "text": "enough of uh it's it's almost close to having a free hit to improve your performance in this",
    "start": "2016000",
    "end": "2022559"
  },
  {
    "text": "environment now console indexing um that's one that's just there you know by the nature",
    "start": "2022559",
    "end": "2028640"
  },
  {
    "text": "of that and the technology it uses it's always compressed it's a fantastic compression level it's in there it's the",
    "start": "2028640",
    "end": "2035360"
  },
  {
    "text": "uh the same sort of compression that's used with uh with power pivot in excel uh with the",
    "start": "2035360",
    "end": "2041360"
  },
  {
    "text": "volume you can get in there so that same engine is used to allow the compression on that and massively compressible really good",
    "start": "2041360",
    "end": "2048878"
  },
  {
    "text": "you can't switch that off it's always compressed by the nature of it so that's that's one option you've got there if",
    "start": "2048879",
    "end": "2053919"
  },
  {
    "text": "you can make use of pollen stores there is also a compress function uh you can actually tell sql server to store",
    "start": "2053919",
    "end": "2060878"
  },
  {
    "text": "compressed data and it uses the gzip algorithm to compress that data and store it into your column",
    "start": "2060879",
    "end": "2066079"
  },
  {
    "text": "you've then got to deal with that when you're reading things back again but again it might be one way of making",
    "start": "2066079",
    "end": "2071760"
  },
  {
    "text": "use of compression to to reduce the amount of footprint of your data",
    "start": "2071760",
    "end": "2078000"
  },
  {
    "text": "role compression uh changes a bit on the storage format so it's quite simplistic algorithm on that as we'll see",
    "start": "2078000",
    "end": "2084240"
  },
  {
    "text": "um and it will start to reduce the space per row giving you more rows per page your pages",
    "start": "2084240",
    "end": "2090079"
  },
  {
    "text": "overall again better use of your memory uh page compression then takes that step",
    "start": "2090079",
    "end": "2095358"
  },
  {
    "text": "further and actually looks for different patterns on the page to see how it can then reduce that even",
    "start": "2095359",
    "end": "2100400"
  },
  {
    "text": "further so we're on page compression is the one we're going to focus on on here um so row",
    "start": "2100400",
    "end": "2107359"
  },
  {
    "text": "starts quite simply you'll basically go where you've got fixed length and fields can i reduce those by",
    "start": "2107359",
    "end": "2114400"
  },
  {
    "text": "changing them to variable length and storing them down that way and only storing what's actually needed rather than the",
    "start": "2114400",
    "end": "2120480"
  },
  {
    "text": "the full allocation of bytes for that particular data type uh again it'll look at it and say you",
    "start": "2120480",
    "end": "2126079"
  },
  {
    "text": "know if i've got a big end but all my values are small enough to be",
    "start": "2126079",
    "end": "2131599"
  },
  {
    "text": "in a small into a tiny end again i can do that and store just the",
    "start": "2131599",
    "end": "2137119"
  },
  {
    "text": "storage uh available for that um things like nulls and zeros they're",
    "start": "2137119",
    "end": "2143680"
  },
  {
    "text": "optimized to take up more space so we can see on just something as",
    "start": "2143680",
    "end": "2149440"
  },
  {
    "text": "simplistic as this um we can reduce quite significant amount there on that row",
    "start": "2149440",
    "end": "2156240"
  },
  {
    "text": "and down to you know over a million about 30 percent of the storage space",
    "start": "2156240",
    "end": "2162480"
  },
  {
    "text": "it's not a bad uh bit from there so page compression will start with the",
    "start": "2162480",
    "end": "2167680"
  },
  {
    "text": "little compression algorithm first of all so it starts to look in each column",
    "start": "2167680",
    "end": "2172800"
  },
  {
    "text": "for repeated values so what's common that it can take out and store that as the primary value from",
    "start": "2172800",
    "end": "2179760"
  },
  {
    "text": "that particular role on each page so for example on",
    "start": "2179760",
    "end": "2186000"
  },
  {
    "text": "here it finds the aabcc part of the first column and then it",
    "start": "2186000",
    "end": "2192240"
  },
  {
    "text": "puts a code in to say well how much of that is used by the actual value so you can see this uses the first four characters",
    "start": "2192240",
    "end": "2199440"
  },
  {
    "text": "and then replaces the next one and the second row has an exact match so just take",
    "start": "2199440",
    "end": "2204560"
  },
  {
    "text": "something back there it doesn't have to store anything from that one and the third row here takes the first",
    "start": "2204560",
    "end": "2210160"
  },
  {
    "text": "three out of our uh code value and then adds the rest in there so because it starts",
    "start": "2210160",
    "end": "2215200"
  },
  {
    "text": "to remove some of the parts out from there once it's done that",
    "start": "2215200",
    "end": "2220320"
  },
  {
    "text": "first across the rows it'll then start looking for common patterns across the entire page",
    "start": "2220320",
    "end": "2226240"
  },
  {
    "text": "and so again we've been left with here they know 4b and 4b i can say i can store that once and just",
    "start": "2226240",
    "end": "2233599"
  },
  {
    "text": "index it through those uh to see what value should it be taking on there so those repeated values",
    "start": "2233599",
    "end": "2239839"
  },
  {
    "text": "are removed as well so because we get more rows still the",
    "start": "2239839",
    "end": "2245200"
  },
  {
    "text": "page every single page that's in the buffer rule has got more data more rows",
    "start": "2245200",
    "end": "2250400"
  },
  {
    "text": "and quite easily based upon that so there's fewer reads to satisfy community now",
    "start": "2250400",
    "end": "2255599"
  },
  {
    "text": "whether that's logically the world that's going down the physical means by pulling it back from the disk your reads is better because in your",
    "start": "2255599",
    "end": "2261920"
  },
  {
    "text": "io's generally always going to be the slowest part of our system and we get more pages fed in",
    "start": "2261920",
    "end": "2269520"
  },
  {
    "text": "so they're possibly going to stay there in memory longer as well so we're flushing out an algorithm that goes what's the what's the last",
    "start": "2269520",
    "end": "2276800"
  },
  {
    "text": "page that hasn't been touched if i need to bring more data into memory that's what's going to go first of all",
    "start": "2276800",
    "end": "2284000"
  },
  {
    "text": "and there's a measure of page life expectancy which isn't how long the light would be that page to stay in memory um without having to be",
    "start": "2284000",
    "end": "2291200"
  },
  {
    "text": "you know flush back to disk and go back in again and so that can get us to having higher",
    "start": "2291200",
    "end": "2297520"
  },
  {
    "text": "values on that the trade-off is because it's got compression on it because we've got",
    "start": "2297520",
    "end": "2302560"
  },
  {
    "text": "those encoded values effectively it adds a few more cpu cycles to then be",
    "start": "2302560",
    "end": "2308000"
  },
  {
    "text": "able to translate that back and forth while it does that from my experience",
    "start": "2308000",
    "end": "2314400"
  },
  {
    "text": "the the cpu overhead is really low compared to the value you're going to get",
    "start": "2314400",
    "end": "2319520"
  },
  {
    "text": "by being able to keep more data in memory uh and read it back from there around having to go for",
    "start": "2319520",
    "end": "2326960"
  },
  {
    "text": "some caveats so understand your data before you decide to go down this route and the workload metrics",
    "start": "2327760",
    "end": "2335680"
  },
  {
    "text": "really will give you that indication of which type of compression you really want to consider um so if you only get a few duplicate",
    "start": "2335680",
    "end": "2342720"
  },
  {
    "text": "values you probably want to look at the low compression because you don't get much over the page as it pulls",
    "start": "2342720",
    "end": "2348160"
  },
  {
    "text": "things out and then the type of operations that you're dealing with um",
    "start": "2348160",
    "end": "2353440"
  },
  {
    "text": "if there is a high percentage of updates uh page compression um",
    "start": "2353440",
    "end": "2360400"
  },
  {
    "text": "is probably not going to be the the best there because it's going to add a lot more cpu overhead in that case",
    "start": "2360400",
    "end": "2366160"
  },
  {
    "text": "um and even just the type of uh of table access you've got if there's a large number of",
    "start": "2366160",
    "end": "2371839"
  },
  {
    "text": "scans so you're looking over ranges for most your queries rather than singleton loopups",
    "start": "2371839",
    "end": "2376960"
  },
  {
    "text": "uh page compression again is going to give you some some good returns on that as well",
    "start": "2376960",
    "end": "2382560"
  },
  {
    "text": "you can compress heaps but they won't actually do the compression until you rebuild those and the way you",
    "start": "2382560",
    "end": "2388079"
  },
  {
    "text": "rebuild the heap is to put custard index over it and then drop back or something like this again uh you format things only people tidy",
    "start": "2388079",
    "end": "2395280"
  },
  {
    "text": "things up it's a good thing to do occasionally anyway uh to get rid of the following parameters and things like that so it",
    "start": "2395280",
    "end": "2401119"
  },
  {
    "text": "tidies up very very heaps um the non-clustered index does not",
    "start": "2401119",
    "end": "2406160"
  },
  {
    "text": "automatically inherit the the clustered index compression settings you have to be explicit",
    "start": "2406160",
    "end": "2411920"
  },
  {
    "text": "as well and you can't do it for long pages um so a few bits and pieces around that",
    "start": "2411920",
    "end": "2417839"
  },
  {
    "text": "some caveats but if you're planning this well ahead it's something that will give you good value from there",
    "start": "2417839",
    "end": "2424880"
  },
  {
    "start": "2424000",
    "end": "2889000"
  },
  {
    "text": "so let's have a look at some of the bits around this",
    "start": "2424880",
    "end": "2430160"
  },
  {
    "text": "so one of the other bits with with azure sql database today they haven't put all of the the internal functions",
    "start": "2431920",
    "end": "2438480"
  },
  {
    "text": "across um there is on your own premises uh your full-blown version of sql server",
    "start": "2438480",
    "end": "2444720"
  },
  {
    "text": "that there is some functions and procedures that you can run which will give you an estimate directly of",
    "start": "2444720",
    "end": "2450319"
  },
  {
    "text": "the expected savings if you switch compression on it's got a test to make sure it is a",
    "start": "2450319",
    "end": "2456560"
  },
  {
    "text": "specific version which they haven't unfortunately updated yet to include the version type for azure",
    "start": "2456560",
    "end": "2462160"
  },
  {
    "text": "sql database uh but kaelin delaney's hacked that apart and the changes and created",
    "start": "2462160",
    "end": "2467839"
  },
  {
    "text": "an equivalent set which works in azure and so i'm going to make use of that one to",
    "start": "2467839",
    "end": "2473680"
  },
  {
    "text": "give me my estimates from here",
    "start": "2473680",
    "end": "2477520"
  },
  {
    "text": "so what we're going to do is i've set up those objects to to do my estimates i'm",
    "start": "2479599",
    "end": "2484800"
  },
  {
    "text": "just going to go through now and on this particular database we're going to run that through and say",
    "start": "2484800",
    "end": "2490079"
  },
  {
    "text": "give me an estimate of what we can actually get with the the various types of compression so",
    "start": "2490079",
    "end": "2495440"
  },
  {
    "text": "what is going to be my space savings overall so how much more data am i going to be able to bring",
    "start": "2495440",
    "end": "2501599"
  },
  {
    "text": "in to the buffer pool based upon setting compression on from here and that might take a minute or two",
    "start": "2501599",
    "end": "2507359"
  },
  {
    "text": "to run through so we'll leave that in the background and actually look at the",
    "start": "2507359",
    "end": "2513760"
  },
  {
    "text": "next part of the demo as well while i'm doing that so how i'm going to show you this is i'm",
    "start": "2513760",
    "end": "2521280"
  },
  {
    "text": "going to gather the uh the ion and time statistics as we go through it's just going to be",
    "start": "2521280",
    "end": "2527520"
  },
  {
    "text": "basically selecting from a single table um within the database here",
    "start": "2527520",
    "end": "2533520"
  },
  {
    "text": "if i clear some of this i'll actually see",
    "start": "2533520",
    "end": "2537039"
  },
  {
    "text": "okay so the first bit here is not going to be impacted um i'm going to",
    "start": "2547440",
    "end": "2556160"
  },
  {
    "text": "get my select from this one table here and that'll take a few seconds it's a",
    "start": "2556720",
    "end": "2563680"
  },
  {
    "text": "reasonably sized table to go through",
    "start": "2563680",
    "end": "2579838"
  },
  {
    "text": "i'm definitely having a slow day on azure by looks of it",
    "start": "2586880",
    "end": "2593838"
  },
  {
    "text": "okay so important things i'm going to grab out from here and keep a note of",
    "start": "2598160",
    "end": "2606800"
  },
  {
    "text": "just the number of logical reads and the execution time for that as the the plain version on",
    "start": "2606800",
    "end": "2616000"
  },
  {
    "text": "here that's still going um",
    "start": "2618839",
    "end": "2623440"
  },
  {
    "text": "i will go ahead and rebuild this table so we're adding row compression",
    "start": "2624400",
    "end": "2630720"
  },
  {
    "text": "onto the table first of all so she's gonna go through and run that um",
    "start": "2630720",
    "end": "2636800"
  },
  {
    "text": "on each of the on that table once it's got that we'll just",
    "start": "2636800",
    "end": "2644160"
  },
  {
    "text": "we run the query again to get the the same stuff back",
    "start": "2644160",
    "end": "2649839"
  },
  {
    "text": "okay so we've now got this real compressed",
    "start": "2681680",
    "end": "2686400"
  },
  {
    "text": "so we should be somewhere around about the uh the 10 second mark to run this one through",
    "start": "2688800",
    "end": "2696318"
  },
  {
    "text": "he says as it passes through 15 seconds",
    "start": "2696480",
    "end": "2705599"
  },
  {
    "text": "and they were quite high that first time that's almost 30 seconds so",
    "start": "2705599",
    "end": "2711359"
  },
  {
    "text": "okay so what we can see immediately is the number of logical reads has come",
    "start": "2716839",
    "end": "2724400"
  },
  {
    "text": "down a decent percentage there already",
    "start": "2724400",
    "end": "2732319"
  },
  {
    "text": "and if i look on the the time values we've had a little bit of increase in the cpu time so that's related to that",
    "start": "2732319",
    "end": "2739200"
  },
  {
    "text": "part of um how much effort it's got to do to actually do the decompress as it comes out from memory",
    "start": "2739200",
    "end": "2746319"
  },
  {
    "text": "there but overall because of the fewer amount of weeds that we've had to do would come",
    "start": "2746319",
    "end": "2753040"
  },
  {
    "text": "through in a much quicker relapse time out of that so we've got the benefits here yes there's a little bit more",
    "start": "2753040",
    "end": "2758240"
  },
  {
    "text": "uh in terms of effort on there but the benefits of the the iops has certainly been worth it in",
    "start": "2758240",
    "end": "2764960"
  },
  {
    "text": "this uh scenario now let's look what happens if we go to page compression",
    "start": "2764960",
    "end": "2770960"
  },
  {
    "text": "this is now complete so you can see here that my expectation if we go to um",
    "start": "2770960",
    "end": "2777440"
  },
  {
    "text": "you know page compression on here um is going to give us you know you know we're going to reduce",
    "start": "2777440",
    "end": "2782640"
  },
  {
    "text": "down to 83 of the original size of the database so you know almost a 20 saving in terms of",
    "start": "2782640",
    "end": "2789599"
  },
  {
    "text": "how much we can consume and that's obviously going to get a significant amount more data into",
    "start": "2789599",
    "end": "2795359"
  },
  {
    "text": "the buffer cache uh which is being reflected and has been able to get a far better query",
    "start": "2795359",
    "end": "2801359"
  },
  {
    "text": "response here as well",
    "start": "2801359",
    "end": "2804880"
  },
  {
    "text": "so once we've completed that compression let's go ahead and run our queenie again",
    "start": "2809760",
    "end": "2816160"
  },
  {
    "text": "and let's see what benefits going to to page compression is going to give us throughout this as well",
    "start": "2816160",
    "end": "2830079"
  },
  {
    "text": "so we were 28 seconds for the previous one with low compression",
    "start": "2830079",
    "end": "2835760"
  },
  {
    "text": "and we should come within that or similar time",
    "start": "2836960",
    "end": "2845839"
  },
  {
    "text": "so again on there once again we've still reduced the logical leads even further",
    "start": "2856160",
    "end": "2863200"
  },
  {
    "text": "again a slight uplift on our cpu time on the server but again we've had some",
    "start": "2863200",
    "end": "2869920"
  },
  {
    "text": "gains in the overall performance of that ability to to reduce how much io we're actually doing is",
    "start": "2869920",
    "end": "2877119"
  },
  {
    "text": "more than over compensating for the increased cpu that is touching whenever we deal with that",
    "start": "2877119",
    "end": "2887839"
  },
  {
    "start": "2889000",
    "end": "3147000"
  },
  {
    "text": "okay and the last section and it's one that uh",
    "start": "2890000",
    "end": "2896079"
  },
  {
    "text": "that i found was really quite buried in the documentation uh it wasn't something that was",
    "start": "2896079",
    "end": "2901440"
  },
  {
    "text": "the most obvious to me to to work out what was going on in some things until i started digging a little bit data but once again that",
    "start": "2901440",
    "end": "2909040"
  },
  {
    "text": "bit with uh ensuring that things are well behaved and shouldn't you get the the service that you're paying for",
    "start": "2909040",
    "end": "2915760"
  },
  {
    "text": "there's got to be that limit around everything your sql database does uh to reduce the noisy neighbor effect so",
    "start": "2915760",
    "end": "2922800"
  },
  {
    "text": "there is iops limits as well so as well if you're only getting so many cpu cycles you've got so much",
    "start": "2922800",
    "end": "2928559"
  },
  {
    "text": "memory it's not that around io and it's applied to all the ios so just your your regular storage of uh",
    "start": "2928559",
    "end": "2935359"
  },
  {
    "text": "pulling the pages back off disk to read into the buffer cache that's all part about your transaction",
    "start": "2935359",
    "end": "2940640"
  },
  {
    "text": "log as well has got that and we can actually see what for each",
    "start": "2940640",
    "end": "2945920"
  },
  {
    "text": "tier of database we can identify what the particular resource limits are for all those it does split",
    "start": "2945920",
    "end": "2953839"
  },
  {
    "text": "up between internal and user workflow so your your internal workloads are well managed and",
    "start": "2953839",
    "end": "2959440"
  },
  {
    "text": "controlled by a completely different pool and giving different resource limits but as as a user and what you set in",
    "start": "2959440",
    "end": "2965280"
  },
  {
    "text": "your application to be able to use that's done separately from there as well",
    "start": "2965280",
    "end": "2970400"
  },
  {
    "text": "although that is the target of it you may not get that full of mind just because of uh additional limits in the ongoing",
    "start": "2970400",
    "end": "2976559"
  },
  {
    "text": "store so where you've got an amount of share storage uh because what everybody else running",
    "start": "2976559",
    "end": "2981760"
  },
  {
    "text": "about you is doing um if it's all hitting at one time yeah you're going to have impacts there at",
    "start": "2981760",
    "end": "2987280"
  },
  {
    "text": "the physical side which is just what you're going to get but we you know the expectation is you should get",
    "start": "2987280",
    "end": "2993280"
  },
  {
    "text": "pretty close to that and the one i've seen with the biggest impact has been with the transaction",
    "start": "2993280",
    "end": "2999040"
  },
  {
    "text": "of great governments and it is it's very it's hard and it's a",
    "start": "2999040",
    "end": "3005599"
  },
  {
    "text": "value that will be throttled uh while it's happening so it's not something that goes",
    "start": "3005599",
    "end": "3011839"
  },
  {
    "text": "save your limit i'm going to reduce you now it will actually slow things down as it's going through",
    "start": "3011839",
    "end": "3017599"
  },
  {
    "text": "into the transaction log to maintain it within the limits that you have available",
    "start": "3017599",
    "end": "3023040"
  },
  {
    "text": "so large uh large i o type queries the ones that are going to",
    "start": "3023040",
    "end": "3028640"
  },
  {
    "text": "have the biggest impact there so the thing with the balkan set index builds",
    "start": "3028640",
    "end": "3034079"
  },
  {
    "text": "all that when it generates an awful lot of transaction log activity certainly going to be limited through",
    "start": "3034079",
    "end": "3039520"
  },
  {
    "text": "there we can monitor for that also we can look",
    "start": "3039520",
    "end": "3045119"
  },
  {
    "text": "at what's happening at a point in time seeing what the the weight stats tell us about",
    "start": "3045119",
    "end": "3050319"
  },
  {
    "text": "what's happening there are we seeing this particular weight and you know some of the ways we can get",
    "start": "3050319",
    "end": "3057200"
  },
  {
    "text": "around that is maybe looking at what sort of pattern we're using so if we're doing um a load for",
    "start": "3057200",
    "end": "3065599"
  },
  {
    "text": "for staging then we're going to transform that into the final tables then rather than loading that into our",
    "start": "3065599",
    "end": "3071520"
  },
  {
    "text": "database think about loading it into 10 db it's minimally logged in there so you won't get the same throttling rates",
    "start": "3071520",
    "end": "3078000"
  },
  {
    "text": "hitting will still be some part of it that will cause that but you won't get it to anybody in the same way because it doesn't log as",
    "start": "3078000",
    "end": "3084559"
  },
  {
    "text": "much to start with and then when you extract out there into your database you put things into the final versions",
    "start": "3084559",
    "end": "3090480"
  },
  {
    "text": "you may well have these small queries and you're able to do that with you may be able to batch it through there in",
    "start": "3090480",
    "end": "3095520"
  },
  {
    "text": "some ways to improve the performance there's a lot of ways you can improve that sort of pattern um if you've got",
    "start": "3095520",
    "end": "3103760"
  },
  {
    "text": "uh tables that you can use a cup uh columns or indexing with then loading into that bypasses it as",
    "start": "3103760",
    "end": "3110160"
  },
  {
    "text": "well because the the compression it puts in by the nature of the columns index uh is going to reduce the the log",
    "start": "3110160",
    "end": "3116800"
  },
  {
    "text": "rate as well through that um but that does increase the cpu again was",
    "start": "3116800",
    "end": "3121920"
  },
  {
    "text": "all those tradeoffs there but the important thing is that this 96 megabytes per second",
    "start": "3121920",
    "end": "3127520"
  },
  {
    "text": "um on the vcore instances of sql database is an absolute hard limit you can get slightly",
    "start": "3127520",
    "end": "3133599"
  },
  {
    "text": "above that if you go to the hyperscale tier because it uses a different mechanism for the transaction logging there uh you",
    "start": "3133599",
    "end": "3141280"
  },
  {
    "text": "can increase that up uh into the the hundreds of megabytes per second",
    "start": "3141280",
    "end": "3148640"
  },
  {
    "start": "3147000",
    "end": "3504000"
  },
  {
    "text": "all right so let's a quick look at what we have so",
    "start": "3149359",
    "end": "3157040"
  },
  {
    "text": "my database here we'll pay attention to this as we run some of the queries through",
    "start": "3157040",
    "end": "3162800"
  },
  {
    "text": "um but i'm also just going to bump one of these",
    "start": "3162800",
    "end": "3168720"
  },
  {
    "text": "instances up before we get started",
    "start": "3168720",
    "end": "3172960"
  },
  {
    "text": "we're both sitting at the same at the moment but let's push this one up",
    "start": "3175520",
    "end": "3182318"
  },
  {
    "text": "to higher tier level okay",
    "start": "3188640",
    "end": "3195838"
  },
  {
    "text": "so on my basic one we can see and these are my logarithm and my logarithmic db max",
    "start": "3203760",
    "end": "3211119"
  },
  {
    "text": "are identical databases the only difference is going to be the actual performance here on those and so that's going to show us it from",
    "start": "3211119",
    "end": "3220000"
  },
  {
    "text": "there if i start a new query for this one and hopefully it has completed the",
    "start": "3220000",
    "end": "3227920"
  },
  {
    "text": "scale up still in progress we'll see what it",
    "start": "3227920",
    "end": "3234839"
  },
  {
    "text": "reports grab the same query",
    "start": "3234839",
    "end": "3250960"
  },
  {
    "text": "not yet it's still waiting to scale up on that one we'll come back and we'll show that that",
    "start": "3250960",
    "end": "3256480"
  },
  {
    "text": "um we'll see the difference there on the the array values by scaling up",
    "start": "3256480",
    "end": "3262160"
  },
  {
    "text": "from the p2 to the i think it's you know p4 p6 there are s6 rather that we we",
    "start": "3262160",
    "end": "3268720"
  },
  {
    "text": "went to on this one um so a little bit of a workload that we're",
    "start": "3268720",
    "end": "3275359"
  },
  {
    "text": "going to run through here um and all i'm going to do is ultimately the the workload is just take a copy of",
    "start": "3275359",
    "end": "3282240"
  },
  {
    "text": "one table into another so using that select into and what i'm going to monitor through this is my",
    "start": "3282240",
    "end": "3288720"
  },
  {
    "text": "my weight stats values so we can see what the the biggest weights are on that",
    "start": "3288720",
    "end": "3294160"
  },
  {
    "text": "one's through on this one so um i'm just going to run this one",
    "start": "3294160",
    "end": "3300400"
  },
  {
    "text": "through on the first database while it's doing that",
    "start": "3300400",
    "end": "3306880"
  },
  {
    "text": "and i'm going to copy that so we can run this in the the",
    "start": "3310720",
    "end": "3316559"
  },
  {
    "text": "second database to see the difference as it goes through from there",
    "start": "3316559",
    "end": "3322480"
  },
  {
    "text": "so this will take a few seconds to run through and bring back the details",
    "start": "3323280",
    "end": "3335838"
  },
  {
    "text": "so what we can see is i run through here my library governor was the biggest weight and out of an execution of 44 seconds",
    "start": "3346079",
    "end": "3354960"
  },
  {
    "text": "i've got over 40 seconds of accumulated waste now that's not the",
    "start": "3354960",
    "end": "3360000"
  },
  {
    "text": "meaning that um the actual query only took a couple of seconds because it went into a parallel query this is added up",
    "start": "3360000",
    "end": "3366799"
  },
  {
    "text": "from all of the threads as well so it's it's not necessarily saying that",
    "start": "3366799",
    "end": "3372319"
  },
  {
    "text": "that whole percentage of the the entire query was all waiting for something to happen there",
    "start": "3372319",
    "end": "3377839"
  },
  {
    "text": "but there was a significant amount of weights from that so you can see this one most certainly was throttled as",
    "start": "3377839",
    "end": "3384000"
  },
  {
    "text": "it went through um into the",
    "start": "3384000",
    "end": "3389040"
  },
  {
    "text": "uh our queenie on there um that has my",
    "start": "3389040",
    "end": "3395200"
  },
  {
    "text": "so skilled up excellent so monitoring on this one so this is now on my max one",
    "start": "3398559",
    "end": "3404640"
  },
  {
    "text": "and what we'll do is we go through on this one and run this what we'll find",
    "start": "3404640",
    "end": "3411920"
  },
  {
    "text": "obviously by scaling up is going to be significantly quicker as well um but we'll also see quite a different",
    "start": "3411920",
    "end": "3419040"
  },
  {
    "text": "picture on it with the uh the usage of the the low grade government on here as well",
    "start": "3419040",
    "end": "3433839"
  },
  {
    "text": "should be on here so as we can see it's a far far lower percentage overall uh out of",
    "start": "3436720",
    "end": "3443200"
  },
  {
    "text": "this so um where we were up at 98 percent",
    "start": "3443200",
    "end": "3451280"
  },
  {
    "text": "and yes we've dropped a bit down to 96 as we scale that up we'll see that come",
    "start": "3451280",
    "end": "3457200"
  },
  {
    "text": "down further and further as well and if i look at the patterns that we're seeing on here we can still see that",
    "start": "3457200",
    "end": "3463200"
  },
  {
    "text": "on my log io percentage it still did get out there and still maxed out so there was still great",
    "start": "3463200",
    "end": "3468720"
  },
  {
    "text": "weights on it there it was still pushing it through um the those of high i o stuff",
    "start": "3468720",
    "end": "3474720"
  },
  {
    "text": "there's ways we can start to pull that down so it's again looking at that and finding out if that's a common pattern",
    "start": "3474720",
    "end": "3481359"
  },
  {
    "text": "then have i got the right performance tier for my database and anything i want to flick up to there",
    "start": "3481359",
    "end": "3488720"
  },
  {
    "text": "cool so that covers everything from there as i said you know lots and lots of the demos through there",
    "start": "3488720",
    "end": "3503838"
  },
  {
    "text": "you",
    "start": "3504559",
    "end": "3506640"
  }
]