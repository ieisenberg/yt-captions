[
  {
    "start": "0",
    "end": "124000"
  },
  {
    "text": "so this was designed for being given in front of a thousand people and it was",
    "start": "3260",
    "end": "8750"
  },
  {
    "text": "this morning but but we're gonna we're gonna do it three and so feel free to just treat it as a talk and shout",
    "start": "8750",
    "end": "14299"
  },
  {
    "text": "questions and we can we can go off the rails that'll be fun I already gave the talk once so um so I'm happy if you want",
    "start": "14299",
    "end": "22189"
  },
  {
    "text": "if something you want to want to go into but yeah let's just start and we'll see",
    "start": "22189",
    "end": "29119"
  },
  {
    "text": "if if another person or two shows up but yeah so the idea here is to is to look",
    "start": "29119",
    "end": "36829"
  },
  {
    "text": "at the significance of this particular place in like of Oslo in the in history",
    "start": "36829",
    "end": "44149"
  },
  {
    "text": "of programming languages and so I'm as I'm wondering if you've heard about",
    "start": "44149",
    "end": "49280"
  },
  {
    "text": "Christian new Gore yeah so so the joke is that Christian ego is the Danish",
    "start": "49280",
    "end": "54739"
  },
  {
    "text": "football player who was very famous in the 70s that's probably not who you're",
    "start": "54739",
    "end": "60019"
  },
  {
    "text": "thinking of though you're thinking of this guy who was together with all Johan Dahl who in who designed the similar",
    "start": "60019",
    "end": "67190"
  },
  {
    "text": "languages which the the general-purpose one was is considered the first optical",
    "start": "67190",
    "end": "73400"
  },
  {
    "text": "and programming language ever and and was and came out 50 years ago here so in",
    "start": "73400",
    "end": "79070"
  },
  {
    "text": "February of 68 so it's like it's like what later turned out to be a",
    "start": "79070",
    "end": "86240"
  },
  {
    "text": "magnificent turning point in the history of programming languages and of course I don't are you both in the region ok I'll do it",
    "start": "86240",
    "end": "93470"
  },
  {
    "text": "in English anyway you are - I know he'll do it in English anyway because otherwise I'll stumble but yeah you can",
    "start": "93470",
    "end": "100910"
  },
  {
    "text": "understand what's on the screen there so so one of the things that that Kristin said sorry I got a chance to hang out",
    "start": "100910",
    "end": "108530"
  },
  {
    "text": "with him a number of times when he was alive and and he would often say you were often quipped that if he had a penny for every object that was ever",
    "start": "108530",
    "end": "115100"
  },
  {
    "text": "instantiated you know she could just have every time somebody said new object he could have got an opinion in his",
    "start": "115100",
    "end": "120290"
  },
  {
    "text": "account he would be a rich man I think that's probably true so this is sort of like the general",
    "start": "120290",
    "end": "127760"
  },
  {
    "start": "124000",
    "end": "405000"
  },
  {
    "text": "outline of of the languages that he worked on there there was similar one",
    "start": "127760",
    "end": "134120"
  },
  {
    "text": "which was for how much do any of you know any of this stuff ready some of it yeah I think they still",
    "start": "134120",
    "end": "140780"
  },
  {
    "text": "teach it in Norway it's the only place in the world where people's to learn this stuff okay you you get you they",
    "start": "140780",
    "end": "152510"
  },
  {
    "text": "heard you all into the simulator auditorium at the University and they tell you why it's called that okay yeah",
    "start": "152510",
    "end": "158330"
  },
  {
    "text": "I've been there so you know they started out he wasn't really a computer",
    "start": "158330",
    "end": "163430"
  },
  {
    "text": "scientist to begin with he was into operational analysis and so he got this idea that hey maybe you could use",
    "start": "163430",
    "end": "169010"
  },
  {
    "text": "computers and he had some ideas for how to do it but he he wasn't like a programmer he didn't have the skills to",
    "start": "169010",
    "end": "175190"
  },
  {
    "text": "to do this himself so he teamed up with Oh Lu Han who was rumored to be one of the sharpest knives in the in the Oslo",
    "start": "175190",
    "end": "181070"
  },
  {
    "text": "drawer at the time and and they they went and did first a domain-specific language just for simulating what they",
    "start": "181070",
    "end": "186800"
  },
  {
    "text": "call discrete event simulation for essentially playing out different things",
    "start": "186800",
    "end": "191890"
  },
  {
    "text": "behaving according to rules over time and seeing what happens simulation and",
    "start": "191890",
    "end": "197020"
  },
  {
    "text": "and that was what was called Simula one it was based on on the programming language alcohol at the time but then",
    "start": "197020",
    "end": "203240"
  },
  {
    "text": "after a while they realized wow these are actually great concepts for generalizing and using for other aspects",
    "start": "203240",
    "end": "209390"
  },
  {
    "text": "of programming and that's together with some things that happened we will see that they happened in in programming",
    "start": "209390",
    "end": "214670"
  },
  {
    "text": "languages elsewhere that gave them the sort of the the bits and pieces to to",
    "start": "214670",
    "end": "219770"
  },
  {
    "text": "make it a general-purpose programming language which became sumeul 67 then",
    "start": "219770",
    "end": "226660"
  },
  {
    "text": "Kristin also got very involved with the trade unions and anger very he was very",
    "start": "226660",
    "end": "231980"
  },
  {
    "text": "into enabling the workers and giving them a seat at the table and those kinds",
    "start": "231980",
    "end": "238310"
  },
  {
    "text": "of things that you know back in them back in the early 70s you know we were we we were all about empowering people",
    "start": "238310",
    "end": "244970"
  },
  {
    "text": "and and and not just letting the big corporations exploit the workers and so",
    "start": "244970",
    "end": "252320"
  },
  {
    "text": "on he was very much into that I think he was he was a member of the Workers Party all his life and very involved with the",
    "start": "252320",
    "end": "258680"
  },
  {
    "text": "trade unions and one of the things so he was he was able to kind of combine these interests like his his personal ideology",
    "start": "258680",
    "end": "265730"
  },
  {
    "text": "with with the language thing because he realized that the way that you wrote",
    "start": "265730",
    "end": "270930"
  },
  {
    "text": "in inseam early I was actually kinda much closer to how people think about",
    "start": "270930",
    "end": "275970"
  },
  {
    "text": "things and and not just and further away from just how computers happened to work inside which is sort of very much a",
    "start": "275970",
    "end": "281820"
  },
  {
    "text": "geeky thing and so he so he together with a few other people they actually",
    "start": "281820",
    "end": "287190"
  },
  {
    "text": "took the concepts and and designed a language a complete language that couldn't be run on computers that was",
    "start": "287190",
    "end": "292710"
  },
  {
    "text": "all about describing things in a precise manner and that BQ that was what became",
    "start": "292710",
    "end": "299009"
  },
  {
    "text": "Delta which is upon on on both the Greek letter Delta but also the word for participate in Norwegian so this was",
    "start": "299009",
    "end": "306990"
  },
  {
    "text": "really the start of participatory design what became object-oriented - synoptic urine analysis - all those fields that",
    "start": "306990",
    "end": "312419"
  },
  {
    "text": "had their own separate life ever since with you you've maybe seen some of these",
    "start": "312419",
    "end": "318180"
  },
  {
    "text": "design tools that have UML graphs and all that kind of stuff rational rows all",
    "start": "318180",
    "end": "323490"
  },
  {
    "text": "and that all he didn't I don't think he liked the graphic stuff very much he was he he felt words were better better but",
    "start": "323490",
    "end": "329520"
  },
  {
    "text": "that all kind of came from from his early work on participatory design as well so there was another field that he",
    "start": "329520",
    "end": "335580"
  },
  {
    "text": "found it and he founded it with a language but then he went and got new friends he became a professor in in",
    "start": "335580",
    "end": "341280"
  },
  {
    "text": "August in Denmark and had lots of students flocked to him he was like a very charismatic figure and some of the",
    "start": "341280",
    "end": "348060"
  },
  {
    "text": "best students sought him out and and they started a project together which eventually he was in August in 1975-76",
    "start": "348060",
    "end": "355680"
  },
  {
    "text": "and it took them a lot of time and a lot of red wine to finally come up with a",
    "start": "355680",
    "end": "360840"
  },
  {
    "text": "programming language or finish the programming language and I'm told that",
    "start": "360840",
    "end": "366509"
  },
  {
    "text": "they were pretty exasperated with him because he was in no hurry he did not they had to meet deadlines and and",
    "start": "366509",
    "end": "372479"
  },
  {
    "text": "submit PhDs and feed their kids and you know and he was just like he was happy",
    "start": "372479",
    "end": "378030"
  },
  {
    "text": "to sit around for days discussing all the concepts and making sure that we were we were viewing the big enough picture and all that um did any of you",
    "start": "378030",
    "end": "385259"
  },
  {
    "text": "meet him by the way No so anyway eventually a programming",
    "start": "385259",
    "end": "391830"
  },
  {
    "text": "language came out which was sort of a an attempt to make a smaller more general",
    "start": "391830",
    "end": "396930"
  },
  {
    "text": "unified successor to to Simula it was his idea that this was the language to",
    "start": "396930",
    "end": "403200"
  },
  {
    "text": "take over from seminal of course it really succeeded in doing that so the quick genealogy of programming languages",
    "start": "403200",
    "end": "409800"
  },
  {
    "text": "here alcohol was sort of like the it was",
    "start": "409800",
    "end": "415729"
  },
  {
    "text": "alcohol in at that time was like Java in the 90s in the late 90s it was like the",
    "start": "415729",
    "end": "422069"
  },
  {
    "text": "language that everybody that drove all the thinking except it was better yeah",
    "start": "422069",
    "end": "428909"
  },
  {
    "text": "it was a beautiful language for its time that really introduced the ideas of high-level programming languages and",
    "start": "428909",
    "end": "433949"
  },
  {
    "text": "structured programming and those things so a lot of things derived from Algol strong typing as well and Simula one was",
    "start": "433949",
    "end": "441360"
  },
  {
    "text": "it was a superset of that they added features to Algol rather than create their own language from scratch there",
    "start": "441360",
    "end": "449460"
  },
  {
    "text": "was a lot of there's this language that never actually happened in a way an unofficial version of alcohol that was",
    "start": "449460",
    "end": "455969"
  },
  {
    "text": "proposed for to be the next version of alcohol that was made by two guys one of them was and these guys later became",
    "start": "455969",
    "end": "464129"
  },
  {
    "text": "extremely famous on their own almost Tony Hoare who invented all kinds",
    "start": "464129",
    "end": "471479"
  },
  {
    "text": "of things quicksort and axiomatic semantics and one particular thing that",
    "start": "471479",
    "end": "481830"
  },
  {
    "text": "he invented and at this point was record types reference referenced record types",
    "start": "481830",
    "end": "488520"
  },
  {
    "text": "where you had records that are you know types that have a number of fields inside with different types like structs",
    "start": "488520",
    "end": "494759"
  },
  {
    "text": "and C and the fact that you could reference o you would reference them indirectly with it there would be a pointer inside right and you would",
    "start": "494759",
    "end": "500870"
  },
  {
    "text": "dereference you pass him around through the pointer instead of copying the values around it's amazing that somebody had to invent",
    "start": "500870",
    "end": "508080"
  },
  {
    "text": "that but but that was that was where that came out that was an alcohol ww he wrote it together with Niklaus viewed",
    "start": "508080",
    "end": "514640"
  },
  {
    "text": "it was a Swiss guy and they proposed it for the out to the elbow committee and",
    "start": "514640",
    "end": "520709"
  },
  {
    "text": "they said now that's not a big enough advance and yeah and they went on to create a complicated useless beast of a",
    "start": "520709",
    "end": "528420"
  },
  {
    "text": "version of Algol 68 that nobody thought was a good idea and said no to these",
    "start": "528420",
    "end": "534089"
  },
  {
    "text": "things which of course turned out to pretty much change the world of programming even though the languages elfin ever made viet just said well",
    "start": "534089",
    "end": "540639"
  },
  {
    "text": "screw Algol I'll go and make my own language and anything went and made Pascal which which essentially",
    "start": "540639",
    "end": "547380"
  },
  {
    "text": "eviscerated Algol from the world like it took over from Algol it became the next algo so there you know so if you're",
    "start": "547380",
    "end": "554920"
  },
  {
    "text": "right and but but these records that with the references that was just a",
    "start": "554920",
    "end": "561100"
  },
  {
    "text": "thing that Kristen and and uh Luhan doll that they needed to to generalize the",
    "start": "561100",
    "end": "568269"
  },
  {
    "text": "concepts of similar one and make it to general-purpose programming language so that idea along with the it's there were",
    "start": "568269",
    "end": "574720"
  },
  {
    "text": "sort of a hidden snake and paradise here which was the fact that just for expediency reasons Tony Hoare has talked",
    "start": "574720",
    "end": "581800"
  },
  {
    "text": "about this since this is billion dollar mistake he said oh let's also invent a",
    "start": "581800",
    "end": "587500"
  },
  {
    "text": "null pointer let's make it so that the default value of these references this is null and you know a bad can it be and",
    "start": "587500",
    "end": "594759"
  },
  {
    "text": "it was easy to implement and and if you think about how many in all reference exceptions have been thrown since then",
    "start": "594759",
    "end": "600970"
  },
  {
    "text": "if if he had to pay a penny for every null reference exception yeah he would probably be a couple of billion dollars",
    "start": "600970",
    "end": "606310"
  },
  {
    "text": "in the short so so he calls it his billion dollar mistake and that of",
    "start": "606310",
    "end": "611949"
  },
  {
    "text": "course was also adopted into not just similar but every up you're going to languages language since has had this problem this snake in paradise okay so",
    "start": "611949",
    "end": "620670"
  },
  {
    "start": "620000",
    "end": "1063000"
  },
  {
    "text": "let's actually look at some similar I don't have did any when you look at similar before no they they don't",
    "start": "620670",
    "end": "627009"
  },
  {
    "text": "actually make you read it in in Norway anymore that's good because it's a little modern standards it's a little",
    "start": "627009",
    "end": "633970"
  },
  {
    "text": "heavy to look at it's it's worse than Visual Basic I want to say and that you know we shall basic is very wordy so so",
    "start": "633970",
    "end": "643269"
  },
  {
    "text": "I so I came up with this dialect of similar that I call Simula for the purposes of this talk that it's just",
    "start": "643269",
    "end": "649389"
  },
  {
    "text": "sort of like a curly brace version of the language with the same semantics and same constructs I didn't actually like",
    "start": "649389",
    "end": "655420"
  },
  {
    "text": "come up with a whole language but I just I just fudged something for the slides I don't have a compiler or anything but",
    "start": "655420",
    "end": "663240"
  },
  {
    "text": "essentially here first to show that all of the concepts have up you're going to program and all the central concepts",
    "start": "663240",
    "end": "668649"
  },
  {
    "text": "were there it wasn't it was like we came out fully formed it was that you know languages introduce these",
    "start": "668649",
    "end": "674380"
  },
  {
    "text": "ideas one by one over time similar when it came on the stage it had all it had this whole new thing all there so it was",
    "start": "674380",
    "end": "681430"
  },
  {
    "text": "it was like a big big turn of events and you know they had pet classes that was a",
    "start": "681430",
    "end": "686860"
  },
  {
    "text": "new concept they had classes had virtual methods so that's an abstract procedure",
    "start": "686860",
    "end": "694120"
  },
  {
    "text": "here that in a class cliff classes couldn't be abstract that's something that came later so if you created a",
    "start": "694120",
    "end": "702130"
  },
  {
    "text": "glyph and you call print on it you just get an exception but that's like a small thing that that was easy for languages",
    "start": "702130",
    "end": "707890"
  },
  {
    "text": "to add later and then you can Dyck subclasses right you could derive from from the glyph they put it on they put",
    "start": "707890",
    "end": "715149"
  },
  {
    "text": "the the base class in front of the class keyword and for that reason they call this prefixing that they never talked",
    "start": "715149",
    "end": "721570"
  },
  {
    "text": "about sub classing or inheritance wasn't even a word back then that was used for this they just called it prefixing and",
    "start": "721570",
    "end": "728110"
  },
  {
    "text": "all the all the concepts and all the words we know now came later it's just a features were there right so so you",
    "start": "728110",
    "end": "734829"
  },
  {
    "text": "could prefix another class and that means you get all the things that are in that in that prefix class along with the",
    "start": "734829",
    "end": "740110"
  },
  {
    "text": "new stuff so yes we can make two derived classes two sub classes and then we can",
    "start": "740110",
    "end": "747610"
  },
  {
    "text": "go and have have some reference variables a single reference variable and an array create new ones that has",
    "start": "747610",
    "end": "755949"
  },
  {
    "text": "new keyword and assign them into variables and then call you know once",
    "start": "755949",
    "end": "766300"
  },
  {
    "text": "you've built up a little structure of them then call the virtual print method with the dot which is also like a new",
    "start": "766300",
    "end": "771399"
  },
  {
    "text": "thing at this side I don't know that they invented the dot but it was right around this time that people started using the dot which is like the only",
    "start": "771399",
    "end": "780160"
  },
  {
    "text": "thing that almost all object-oriented programming languages have in common you know across widely different syntaxes",
    "start": "780160",
    "end": "786850"
  },
  {
    "text": "for everything else they all have the dot except small talk small talk doesn't",
    "start": "786850",
    "end": "792180"
  },
  {
    "text": "but it's become this universal thing across all languages somehow again from",
    "start": "792180",
    "end": "798279"
  },
  {
    "text": "here so so just just show that you could write an op to your own program back then just as well as you can today in in",
    "start": "798279",
    "end": "804459"
  },
  {
    "text": "c-sharp or any other modern object on a programming language I was pretty amazing and a big",
    "start": "804459",
    "end": "810130"
  },
  {
    "text": "big a big big contribution to two",
    "start": "810130",
    "end": "815800"
  },
  {
    "text": "languages but you could also do things in similar that didn't catch on and that didn't move into the mainstream that are",
    "start": "815800",
    "end": "822910"
  },
  {
    "text": "quite interesting and and some of them it's a bit of a shame that they went",
    "start": "822910",
    "end": "828910"
  },
  {
    "text": "away some maybe not so much but one of the one of the things that similar inherited from alcohol was alcohol has",
    "start": "828910",
    "end": "836290"
  },
  {
    "text": "completely general block structure you can just nest things inside other things right but the only things you have an",
    "start": "836290",
    "end": "842200"
  },
  {
    "text": "alcohol are procedures right so you can nest procedures within other procedures within other procedures like you like you can with functions in",
    "start": "842200",
    "end": "848560"
  },
  {
    "text": "JavaScript or with local functions in C sharp or many functional languages also have that general block structure but",
    "start": "848560",
    "end": "854260"
  },
  {
    "text": "for functions but stimuli had it also for classes right so you can have classes within classes within classes",
    "start": "854260",
    "end": "860200"
  },
  {
    "text": "and within procedures and you know you can mix and match and it's like proper nesting where the thing inside can see",
    "start": "860200",
    "end": "866590"
  },
  {
    "text": "the instance of the thing around it that is part of so that does general block structure and they use it quite a bit",
    "start": "866590",
    "end": "873190"
  },
  {
    "text": "for a program composition so that's an example of it here they when they went",
    "start": "873190",
    "end": "879790"
  },
  {
    "text": "to stimulus 67 they still wanted to do stimulus emulation but instead of having the concepts of simulation hard-coded",
    "start": "879790",
    "end": "885640"
  },
  {
    "text": "into the language as a domain-specific has two main specific constructs they had now a the world's first application",
    "start": "885640",
    "end": "892150"
  },
  {
    "text": "framework called class simulation and so here is a here's a tiny bit of class",
    "start": "892150",
    "end": "897730"
  },
  {
    "text": "simulation it's class um and it has",
    "start": "897730",
    "end": "903160"
  },
  {
    "text": "another class inside of it that's called process it has several other classes inside of it that are the things that",
    "start": "903160",
    "end": "908230"
  },
  {
    "text": "you use for simulation okay so process is one process is the class it represents something that is an",
    "start": "908230",
    "end": "915130"
  },
  {
    "text": "individually active object in a simulation okay call that a process what",
    "start": "915130",
    "end": "923410"
  },
  {
    "text": "you and that's also a class but what you notice is that this class here the process class has code inside it doesn't",
    "start": "923410",
    "end": "930550"
  },
  {
    "text": "just have members it also has some statements it doesn't matter what they are it's just that they have some",
    "start": "930550",
    "end": "937840"
  },
  {
    "text": "statements that stuff that all processes do because",
    "start": "937840",
    "end": "943090"
  },
  {
    "text": "objects don't just have things they also do things in Simula which is quite",
    "start": "943090",
    "end": "948130"
  },
  {
    "text": "different from from what we got and we've gotten used to since then and because it's a base class for other",
    "start": "948130",
    "end": "954310"
  },
  {
    "text": "things it says the thing it has the things in it that all things should start L processors you start out doing",
    "start": "954310",
    "end": "959590"
  },
  {
    "text": "and should end end up doing at the end and then it has a special keyword in ER which says whatever code you put in in",
    "start": "959590",
    "end": "967510"
  },
  {
    "text": "the derived class should just go here right when you derive from this the the code that the derived class adds gets",
    "start": "967510",
    "end": "974560"
  },
  {
    "text": "executed at this point where the inner occurs so that was a mechanism for for",
    "start": "974560",
    "end": "979780"
  },
  {
    "text": "inheriting across classes inheriting code across classes and you can see that",
    "start": "979780",
    "end": "985240"
  },
  {
    "text": "the outer class simulation also has code down here abbreviated it but it also and",
    "start": "985240",
    "end": "992200"
  },
  {
    "text": "it also has an inner so when you want to go and simulate something like I'm doing",
    "start": "992200",
    "end": "997510"
  },
  {
    "text": "here I can prefix not just you can't just prefix classes but you can also",
    "start": "997510",
    "end": "1003960"
  },
  {
    "text": "prefix statements and say it's inheritance essentially this this piece",
    "start": "1003960",
    "end": "1009150"
  },
  {
    "text": "of program inherits from the class simulation in the sense that all that is",
    "start": "1009150",
    "end": "1014970"
  },
  {
    "text": "in there now now gets in scope of my program so I'm now inserting myself into",
    "start": "1014970",
    "end": "1020430"
  },
  {
    "text": "the scope of the program and my code goes into the inner of that class right so so the whole simulation sets up the",
    "start": "1020430",
    "end": "1026970"
  },
  {
    "text": "way simulations the simulation framework works then I get to write my main program here the doctorate starts things",
    "start": "1026970",
    "end": "1033300"
  },
  {
    "text": "up where I'll probably start out some of my some of the process specializations",
    "start": "1033300",
    "end": "1039839"
  },
  {
    "text": "that I've made like the worker here which inherits from process and and does some things okay so we have active",
    "start": "1039839",
    "end": "1048000"
  },
  {
    "text": "objects here for the first time and we have this notion of inheritance for code",
    "start": "1048000",
    "end": "1054150"
  },
  {
    "text": "as well and come up here and that never really made it into other programming languages except for beta which Kristin",
    "start": "1054150",
    "end": "1060090"
  },
  {
    "text": "was in charge of so I thought I'd show you that as well so some of the things made it and some of the things didn't",
    "start": "1060090",
    "end": "1066410"
  },
  {
    "start": "1063000",
    "end": "1177000"
  },
  {
    "text": "but all the things that the major things",
    "start": "1066410",
    "end": "1071940"
  },
  {
    "text": "that came to stitute optimum programming in the in the next 50 years and I'm probably way",
    "start": "1071940",
    "end": "1077830"
  },
  {
    "text": "into the future what we're there okay that's similar cool and questions",
    "start": "1077830",
    "end": "1084700"
  },
  {
    "text": "and just yeah yes and no it it doesn't",
    "start": "1084700",
    "end": "1095590"
  },
  {
    "text": "really let me move up again here it doesn't really in the same sense you can nest classes in c-sharp and you can in",
    "start": "1095590",
    "end": "1102760"
  },
  {
    "text": "C++ as well but that's just a scoping mechanism that means that you can't you",
    "start": "1102760",
    "end": "1109030"
  },
  {
    "text": "have to dot in to get at the class you can't see it from outside but in simulate has a deeper meaning where if a",
    "start": "1109030",
    "end": "1115960"
  },
  {
    "text": "class is nested within another class that means that it is nested inside of",
    "start": "1115960",
    "end": "1121870"
  },
  {
    "text": "instances of the class so the so the process class here is a different",
    "start": "1121870",
    "end": "1129340"
  },
  {
    "text": "process class for one instance of the simulation framework than for another",
    "start": "1129340",
    "end": "1134650"
  },
  {
    "text": "instance of the simulation framework in that it can see the actual instance variables of the enclosing object in",
    "start": "1134650",
    "end": "1140130"
  },
  {
    "text": "c-sharp you can't you can't see the instance members of the enclosing class when you're when you're nested so it's",
    "start": "1140130",
    "end": "1146560"
  },
  {
    "text": "important difference it's more like the way that lambdas can see enclosing local",
    "start": "1146560",
    "end": "1151990"
  },
  {
    "text": "variables in a method in in many optional and programming languages today on functional languages too so it's it's",
    "start": "1151990",
    "end": "1158650"
  },
  {
    "text": "sort of proper what symbol some of us old people will call a proper block structure right it's not just about",
    "start": "1158650",
    "end": "1166840"
  },
  {
    "text": "scoping it's really about being situated within the the enclosing instances so",
    "start": "1166840",
    "end": "1174900"
  },
  {
    "text": "good question so so that was similar if",
    "start": "1174900",
    "end": "1180160"
  },
  {
    "start": "1177000",
    "end": "1385000"
  },
  {
    "text": "we go and look at what that led to similar was fairly popular programming language in industry but not like",
    "start": "1180160",
    "end": "1186250"
  },
  {
    "text": "broadly wildly successful I think that it's it's lasting legacy is in what",
    "start": "1186250",
    "end": "1192700"
  },
  {
    "text": "other languages learned from it so there - in particular that was sort of the",
    "start": "1192700",
    "end": "1198430"
  },
  {
    "text": "second generation object-oriented programming languages one is small talk which took some of the concepts from",
    "start": "1198430",
    "end": "1204070"
  },
  {
    "text": "similar and completely redid them in a in a very very different kind of context small talk was very",
    "start": "1204070",
    "end": "1211690"
  },
  {
    "text": "inspired by Lisp which is a not strongly type at a completely dynamic language",
    "start": "1211690",
    "end": "1217480"
  },
  {
    "text": "it's also completely reflects reflexive it can change itself and code is data and there's no clear separation between",
    "start": "1217480",
    "end": "1225389"
  },
  {
    "text": "compile-time and run-time in in Lisp and small talk took all this combined that",
    "start": "1225389",
    "end": "1230499"
  },
  {
    "text": "with the emerging graphical user interfaces and produced something that",
    "start": "1230499",
    "end": "1235809"
  },
  {
    "text": "is a programming language that doesn't actually even have a full syntax instead",
    "start": "1235809",
    "end": "1240970"
  },
  {
    "text": "it is this interactive app almost is this environment that you go into with",
    "start": "1240970",
    "end": "1246519"
  },
  {
    "text": "Windows and with your with the mouse that they just invented at Xerox and and click around and they the all the",
    "start": "1246519",
    "end": "1255759"
  },
  {
    "text": "programming constructs the classes are themselves objects running and as your",
    "start": "1255759",
    "end": "1262360"
  },
  {
    "text": "program you create new classes and put them into data structures that you can then view and these and these system",
    "start": "1262360",
    "end": "1268210"
  },
  {
    "text": "browsers these browsers where you click around I want to look in that class I want to see its methods and it's all you click through lists and only when you",
    "start": "1268210",
    "end": "1274749"
  },
  {
    "text": "get down to the body of the particular implementation of a method in a particular class do you actually the source code it's a very very different",
    "start": "1274749",
    "end": "1281110"
  },
  {
    "text": "world and and small talk notably has no notion of block structure it's all it's",
    "start": "1281110",
    "end": "1287139"
  },
  {
    "text": "all up in the top layer in fact in many ways as well a small talk program is",
    "start": "1287139",
    "end": "1293080"
  },
  {
    "text": "complete spaghetti because the whole global world is a flat namespace and and",
    "start": "1293080",
    "end": "1299230"
  },
  {
    "text": "also the there are no control structures in small talk the only control structure",
    "start": "1299230",
    "end": "1304720"
  },
  {
    "text": "in small talk in in proper small talk they cheated a little in some of the implementations is virtual method calls",
    "start": "1304720",
    "end": "1311679"
  },
  {
    "text": "right is that's the only thing you have you don't have if you don't have while you don't have anything other than",
    "start": "1311679",
    "end": "1318399"
  },
  {
    "text": "virtual calls and then you have blocks which are sort of like lambdas and so the way that you do an if statement",
    "start": "1318399",
    "end": "1323740"
  },
  {
    "text": "that's an example here is that you take a bool in and then in boolean expression",
    "start": "1323740",
    "end": "1330279"
  },
  {
    "text": "and then it has a method called if true if false then method names are in parts",
    "start": "1330279",
    "end": "1335350"
  },
  {
    "text": "in between the arguments then you pass it a block for what did you do if they do if the object is true and",
    "start": "1335350",
    "end": "1340390"
  },
  {
    "text": "block for what you do if it's call if it's false so you can then so there's a true object in there that implements the",
    "start": "1340390",
    "end": "1345760"
  },
  {
    "text": "if true if false by calling the the true argument and there's a false object that implements the same one by calling the",
    "start": "1345760",
    "end": "1351310"
  },
  {
    "text": "false argument and that's how that's how control structures are even even meant",
    "start": "1351310",
    "end": "1357520"
  },
  {
    "text": "to happen so it's very it's very consistent and radical and beautiful and self consistent in its own way but it's",
    "start": "1357520",
    "end": "1363370"
  },
  {
    "text": "very very different from from the similar worldview there were some other",
    "start": "1363370",
    "end": "1371140"
  },
  {
    "text": "people at olives University when Kristen was there this is actually my dad and he",
    "start": "1371140",
    "end": "1377140"
  },
  {
    "text": "has nothing to do with his talk other than he had Kristen I got for his advisor at and his final project and I",
    "start": "1377140",
    "end": "1384430"
  },
  {
    "text": "just want to put him in there this is another guy who was around at the same time though more people know it's not a",
    "start": "1384430",
    "end": "1391450"
  },
  {
    "text": "it's not as good of a picture though this is be honest true strop who came up with C++ and C pose for us was really",
    "start": "1391450",
    "end": "1400140"
  },
  {
    "text": "directly inspired not just by similar but by Kristen when Kristen was there Donna got to know him",
    "start": "1400140",
    "end": "1407790"
  },
  {
    "text": "bianna told me how when he was a thesis",
    "start": "1407790",
    "end": "1413740"
  },
  {
    "text": "student he they had little offices and the guest apartments for guest lecturers were just up the stairs at the top floor",
    "start": "1413740",
    "end": "1421120"
  },
  {
    "text": "of the department and Kristen was there and he always got bored so he would come down the stairs looking for something to",
    "start": "1421120",
    "end": "1426790"
  },
  {
    "text": "do and be honest office would be the first one he would pass so bianna made sure to always have a crate of beer in",
    "start": "1426790",
    "end": "1431890"
  },
  {
    "text": "there so he could lure Kristen to come in and share a beer and talk about programming languages and so he was very",
    "start": "1431890",
    "end": "1439330"
  },
  {
    "text": "personally inspired by these ideas and opting on in programming but he but he saw correctly I think a lot of people",
    "start": "1439330",
    "end": "1445630"
  },
  {
    "text": "have been to writing C++ for like not being pure and beautiful enough and making too many compromises but he saw",
    "start": "1445630",
    "end": "1450970"
  },
  {
    "text": "correctly that it was very hard to implement these ideas in an efficient",
    "start": "1450970",
    "end": "1456880"
  },
  {
    "text": "enough manner that there would be broad adoption of octagon programming so he",
    "start": "1456880",
    "end": "1461890"
  },
  {
    "text": "wanted to he added it to C which had the philosophy of kind of no cost",
    "start": "1461890",
    "end": "1468190"
  },
  {
    "text": "abstractions like no overhead abstractions and tried to expand that notion as",
    "start": "1468190",
    "end": "1473920"
  },
  {
    "text": "as much as was possible to object and programming and that was really the key idea of C++ and I have to say wildly",
    "start": "1473920",
    "end": "1482470"
  },
  {
    "text": "wildly successful right because you got an option Orion programming language that was actually competitive today it's competitive with almost any other",
    "start": "1482470",
    "end": "1489490"
  },
  {
    "text": "programming language on the planet in terms of performance now it's been around for a long time and has many like",
    "start": "1489490",
    "end": "1495850"
  },
  {
    "text": "aspects that are getting a little long in the tooth but but it had an amazing",
    "start": "1495850",
    "end": "1501220"
  },
  {
    "text": "impact and really really contributed to the success adopting our own programming had so-so between them the the C++ and",
    "start": "1501220",
    "end": "1508840"
  },
  {
    "text": "small talk option programming languages they were the ones that made off your Orion programming popular and made it last for 50 years um",
    "start": "1508840",
    "end": "1514830"
  },
  {
    "text": "so we need to give him credit for that even though of course Kristin and Johanna are the real heroes in the story",
    "start": "1514830",
    "end": "1520450"
  },
  {
    "text": "on that but a lot of things were lost to a lot of these ideas that Simula had",
    "start": "1520450",
    "end": "1526660"
  },
  {
    "text": "were lost in that process including the block structure and the active objects and the and the inheritance of of code",
    "start": "1526660",
    "end": "1534490"
  },
  {
    "text": "now I mentioned that Kristin went on to",
    "start": "1534490",
    "end": "1543190"
  },
  {
    "start": "1536000",
    "end": "1611000"
  },
  {
    "text": "do Delta which was a language that was for describing things describing systems",
    "start": "1543190",
    "end": "1548260"
  },
  {
    "text": "and say even higher level and computers they couldn't describe things that you can't couldn't even put in a computer program and that was sort of a part of a",
    "start": "1548260",
    "end": "1555790"
  },
  {
    "text": "realization that they had stumbled onto some really powerful ways of describing things and and he famously quipped the",
    "start": "1555790",
    "end": "1564730"
  },
  {
    "text": "sort of a reference to the conceptual modeling that they that they were",
    "start": "1564730",
    "end": "1570250"
  },
  {
    "text": "realizing that they were coming up with that you know one word can say more than a thousand pictures which is you it's the other way from how you usually say",
    "start": "1570250",
    "end": "1576730"
  },
  {
    "text": "it right one picture can say more than a thousand words but he turned it on its head because when you're talking about",
    "start": "1576730",
    "end": "1582070"
  },
  {
    "text": "abstract concepts like animal for instance which is what I'm alluding to here you know it's really hard to draw a",
    "start": "1582070",
    "end": "1587170"
  },
  {
    "text": "picture of animal what would you draw right you have you need a thousand",
    "start": "1587170",
    "end": "1592720"
  },
  {
    "text": "pictures to get the concept across whereas the word in and of itself has",
    "start": "1592720",
    "end": "1598240"
  },
  {
    "text": "that whole like expressive power so so concepts in the language are a very",
    "start": "1598240",
    "end": "1603940"
  },
  {
    "text": "powerful thing and and basing your programming language around though it's a very strong effective thing to do",
    "start": "1603940",
    "end": "1609960"
  },
  {
    "text": "so they were very focused on modeling and as he did Delta and as they worked",
    "start": "1609960",
    "end": "1616510"
  },
  {
    "text": "on beta they kept like honing this conceptual framework if you will for the",
    "start": "1616510",
    "end": "1621730"
  },
  {
    "text": "language and and putting a lot of work into describing in excruciating detail",
    "start": "1621730",
    "end": "1627300"
  },
  {
    "text": "exactly what it was you did when you're programmed the program is to understand it's another phrase that came from that",
    "start": "1627300",
    "end": "1632760"
  },
  {
    "text": "so there are kind of two layers of this one is that at the layer of when the",
    "start": "1632760",
    "end": "1639280"
  },
  {
    "start": "1636000",
    "end": "1715000"
  },
  {
    "text": "program runs the program execution the you know you're trying to model",
    "start": "1639280",
    "end": "1646240"
  },
  {
    "text": "something in the real world or maybe it's imagined but you're trying to model something something else and them and",
    "start": "1646240",
    "end": "1653290"
  },
  {
    "text": "you do that in the computer program but when you do it you don't model it every which way it's a it's what they call a",
    "start": "1653290",
    "end": "1659710"
  },
  {
    "text": "physical model and what that means is that it's it's one-to-one it you can see",
    "start": "1659710",
    "end": "1665530"
  },
  {
    "text": "the the things the phenomena in the real world correspond one-to-one with things",
    "start": "1665530",
    "end": "1671260"
  },
  {
    "text": "in the model in particular with little allocated chunks of memory you know that",
    "start": "1671260",
    "end": "1677500"
  },
  {
    "text": "are the objects every object represents something that it's modeling and that's as opposed to how most programming",
    "start": "1677500",
    "end": "1683559"
  },
  {
    "text": "languages were where maybe you had all the names in one array and you had all their all the ages in another array like",
    "start": "1683559",
    "end": "1689020"
  },
  {
    "text": "the the shape of the of the program as it was running did not correspond to the",
    "start": "1689020",
    "end": "1695050"
  },
  {
    "text": "shape of the world that it was trying to describe whereas that was sort of the thing that octagon and programming led to its physical modeling it's one-to-one",
    "start": "1695050",
    "end": "1702490"
  },
  {
    "text": "and its isomorphic in a sense right you can think of it that way but also at the so that's sort of the running program",
    "start": "1702490",
    "end": "1708670"
  },
  {
    "text": "but at the program text level you sort",
    "start": "1708670",
    "end": "1713710"
  },
  {
    "text": "of have a similar thing where if you look at the way that people think about",
    "start": "1713710",
    "end": "1720550"
  },
  {
    "start": "1715000",
    "end": "1824000"
  },
  {
    "text": "we're getting to these concepts like the concepts that people have in their mind at least so Kristen and others would",
    "start": "1720550",
    "end": "1728170"
  },
  {
    "text": "claim and it's a fairly it's a reasonable model for how people think about things is that they have concepts in their head they use nouns for them",
    "start": "1728170",
    "end": "1734410"
  },
  {
    "text": "and some concepts are more special than others like sheep is more special than",
    "start": "1734410",
    "end": "1739450"
  },
  {
    "text": "animal and you know sheep is more special they're fewer sheep in the world and",
    "start": "1739450",
    "end": "1745630"
  },
  {
    "text": "they're animals but on the other hand the sheep have more things together more things in common they have their more",
    "start": "1745630",
    "end": "1750790"
  },
  {
    "text": "properties of sheep that are shared among all sheep then there are properties that are shared among all animals right so this is like as you get",
    "start": "1750790",
    "end": "1757150"
  },
  {
    "text": "more special you have more shared properties but fewer phenomena that that",
    "start": "1757150",
    "end": "1762430"
  },
  {
    "text": "fit into the into the concept and that map's exactly two classes in in object",
    "start": "1762430",
    "end": "1768370"
  },
  {
    "text": "or new programming languages where you have that specialization when you create subclasses so when you prefix like they",
    "start": "1768370",
    "end": "1774309"
  },
  {
    "text": "said in similar and you add more properties and more members as you",
    "start": "1774309",
    "end": "1780700"
  },
  {
    "text": "specialize so that and that correspondence has been really even",
    "start": "1780700",
    "end": "1785980"
  },
  {
    "text": "though it was never as clearly expressed around other program and other opportunity programming languages that has been a driving factor I think in how",
    "start": "1785980",
    "end": "1792400"
  },
  {
    "text": "why they became so popular it's a lot easier to to conceive and maintain a",
    "start": "1792400",
    "end": "1797650"
  },
  {
    "text": "system when you when you have this mental model for a structure that",
    "start": "1797650",
    "end": "1803530"
  },
  {
    "text": "corresponds to the domain that you're programming for and it's a lot easier to involve and get you get participation",
    "start": "1803530",
    "end": "1809290"
  },
  {
    "text": "from the end users when the concepts of the program correspond to the concepts of their domain so um so it's very",
    "start": "1809290",
    "end": "1816040"
  },
  {
    "text": "powerful again one-to-one at the at the concept level there so given that armed with",
    "start": "1816040",
    "end": "1827020"
  },
  {
    "start": "1824000",
    "end": "1858000"
  },
  {
    "text": "that realization and lots of red wine Kristin and his Danish his young Danish",
    "start": "1827020",
    "end": "1833770"
  },
  {
    "text": "friends they embarked and on beta and eventually in it's hard to say exactly",
    "start": "1833770",
    "end": "1839740"
  },
  {
    "text": "when the first beta version was it kept evolving but around 83 I want to say it was pretty much finished",
    "start": "1839740",
    "end": "1846370"
  },
  {
    "text": "they created the programming language to end all programming languages and so we",
    "start": "1846370",
    "end": "1853179"
  },
  {
    "text": "tried to really be very true to this to these modeling ideas but there was also",
    "start": "1853179",
    "end": "1858480"
  },
  {
    "start": "1858000",
    "end": "1873000"
  },
  {
    "text": "actually let's let's take a side trip for a moment just to consider what's with all these Greek letters actually",
    "start": "1858480",
    "end": "1866170"
  },
  {
    "text": "there they was Delta and now this beta well at some point during the red wine in fuel infused discussions they came up",
    "start": "1866170",
    "end": "1873640"
  },
  {
    "text": "with this idea that there were four layers of programming language of four layers of languages that were interesting they already had",
    "start": "1873640",
    "end": "1879039"
  },
  {
    "text": "Delta which was a description language of the highest level for people only and then they had high-level programming",
    "start": "1879039",
    "end": "1884830"
  },
  {
    "text": "languages that you would want to write programs in but then you needed implementation languages that where you",
    "start": "1884830",
    "end": "1891490"
  },
  {
    "text": "sort of had to manually translate to a low-level program that would run better on a machine by being implemented in",
    "start": "1891490",
    "end": "1898630"
  },
  {
    "text": "assembly language which was the lowest level so by happy coincidence that",
    "start": "1898630",
    "end": "1903700"
  },
  {
    "text": "mapped just to the sequence of Greek letters starting with the Delta they already had and down to the Alpha at the",
    "start": "1903700",
    "end": "1909399"
  },
  {
    "text": "bottom however so this said the grad plan was to design all of these languages one by one but of course the",
    "start": "1909399",
    "end": "1915639"
  },
  {
    "text": "the lower ones they never got to and the name beta came to be used for the for the higher level programming language",
    "start": "1915639",
    "end": "1921460"
  },
  {
    "text": "turned out they didn't need the lower ones so that was the origin of those Greek letters but one central",
    "start": "1921460",
    "end": "1928169"
  },
  {
    "start": "1925000",
    "end": "2026000"
  },
  {
    "text": "observation that one thing you noticed in similar maybe was that this thing",
    "start": "1928169",
    "end": "1934419"
  },
  {
    "text": "with classes and procedures are very similar and similar they the thing that",
    "start": "1934419",
    "end": "1941529"
  },
  {
    "text": "classes can also have code inside and and so on there there are many ways in which classes look more like procedures",
    "start": "1941529",
    "end": "1948460"
  },
  {
    "text": "and similar than they ended up doing in these other second generation programming languages whether they became more different they were sort of",
    "start": "1948460",
    "end": "1954580"
  },
  {
    "text": "like they cleaned it up and separated the two concepts probably that's how they thought of it right but for beta they kind of they thought about it the",
    "start": "1954580",
    "end": "1960879"
  },
  {
    "text": "the opposite way they had originally conceived of objects I think Kristin said it this way objects are activation",
    "start": "1960879",
    "end": "1966730"
  },
  {
    "text": "records that survive they're like the activation records are like the stack frames right except they're not necessarily in a stack of a procedure",
    "start": "1966730",
    "end": "1972990"
  },
  {
    "text": "while it's running like in one particular instance is running that's the activation record it looks like an",
    "start": "1972990",
    "end": "1978460"
  },
  {
    "text": "object right it has some fields which are the local variables the state of the of the procedure and essentially the",
    "start": "1978460",
    "end": "1984460"
  },
  {
    "text": "sort of objects as those guys but they survive the initial invocation right they stick around and other people can",
    "start": "1984460",
    "end": "1990100"
  },
  {
    "text": "refer to them and they and for beta they thought well isn't it odd that we have",
    "start": "1990100",
    "end": "1995710"
  },
  {
    "text": "these things that look so much like each other in the language shouldn't we try to you know unify shouldn't we try to",
    "start": "1995710",
    "end": "2002159"
  },
  {
    "text": "see if we can take these two concepts and smush them together and come up with one programming language abstraction",
    "start": "2002159",
    "end": "2008130"
  },
  {
    "text": "single abstraction language where where we just view procedures and classes as",
    "start": "2008130",
    "end": "2015540"
  },
  {
    "text": "two different sides of the same coin of the same construct so so that's what",
    "start": "2015540",
    "end": "2023550"
  },
  {
    "text": "they did and that's what we're going to have a look at now so they came up with this concept called a pattern and pattern is the unification of classes",
    "start": "2023550",
    "end": "2030780"
  },
  {
    "start": "2026000",
    "end": "2069000"
  },
  {
    "text": "and procedures so I have some beta here and then again you know I have a C like syntax that I call Sita on the",
    "start": "2030780",
    "end": "2037830"
  },
  {
    "text": "right-hand side that might make it easier to read because the beta syntax is really odd and we'll get into why part of why it's so odd in a minute but",
    "start": "2037830",
    "end": "2047210"
  },
  {
    "text": "the idea is so now you can see I have declarations like before and the things I'm declaring they look like that",
    "start": "2047210",
    "end": "2052860"
  },
  {
    "text": "classes like a text stack sounds like a class link sounds like a class and again we have the block structure the Kalista",
    "start": "2052860",
    "end": "2058800"
  },
  {
    "text": "class here but we don't say class because this is these are pattern declarations we use the same syntax for",
    "start": "2058800",
    "end": "2066060"
  },
  {
    "text": "declaring classes and for declaring procedures it's the same constructs oh here comes a here comes a non-virtual",
    "start": "2066060",
    "end": "2072679"
  },
  {
    "start": "2069000",
    "end": "2231000"
  },
  {
    "text": "method we would we would think of it today of the of the text stack but it's really just another pattern it also has",
    "start": "2072679",
    "end": "2079620"
  },
  {
    "text": "some things you see it has exactly the same declaration of an element inside as the link pattern has there they both",
    "start": "2079620",
    "end": "2085408"
  },
  {
    "text": "have some state inside but then this also has some other parts than the declarations namely a a body of code",
    "start": "2085409",
    "end": "2094320"
  },
  {
    "text": "that it can execute and it also has some at an equation of what comes out and a",
    "start": "2094320",
    "end": "2101340"
  },
  {
    "text": "and you can see I tried to map those to the return keyword over here because",
    "start": "2101340",
    "end": "2106620"
  },
  {
    "text": "that's sort of more familiar for for C like syntax if we try to look at a method that takes things in similar the",
    "start": "2106620",
    "end": "2112830"
  },
  {
    "text": "push method here another pattern has some state and it has a do part which is",
    "start": "2112830",
    "end": "2118050"
  },
  {
    "text": "what it does but it doesn't have an exit because it doesn't return anything but it hasn't entered it has parameters essentially I come in so all patterns",
    "start": "2118050",
    "end": "2124920"
  },
  {
    "text": "can have all or any of these parts that they can have declarations they can have enter parts which are things that come",
    "start": "2124920",
    "end": "2130860"
  },
  {
    "text": "in they can have a body it is a code that runs when you execute them and then an exit part which is what comes out",
    "start": "2130860",
    "end": "2137220"
  },
  {
    "text": "when you're done executing and now you can go and build objects or methods or weird mixtures if you want",
    "start": "2137220",
    "end": "2144490"
  },
  {
    "text": "out of those to your heart's content there's no limitation there so that's sort of the big unification but once",
    "start": "2144490",
    "end": "2150670"
  },
  {
    "text": "you've done that you have to start wondering well there were all these things and simulated that you could only",
    "start": "2150670",
    "end": "2156310"
  },
  {
    "text": "do for classes or only do for procedures now I guess we got to have to allow them for both since they're in the same",
    "start": "2156310",
    "end": "2163480"
  },
  {
    "text": "they're now the same thing so what happens when you start allowing these things across for instance we had",
    "start": "2163480",
    "end": "2169540"
  },
  {
    "text": "virtual procedures and let me know hang",
    "start": "2169540",
    "end": "2174880"
  },
  {
    "text": "on before we get there just let me yeah one of the things was parameters and and results I get to a",
    "start": "2174880",
    "end": "2182650"
  },
  {
    "text": "virtual procedures remember we have parameters and results and procedures we sort of had parameters for the",
    "start": "2182650",
    "end": "2188590"
  },
  {
    "text": "Constructors for classes as well but we didn't have results for when you were done evaluating a class and similar but",
    "start": "2188590",
    "end": "2194619"
  },
  {
    "text": "a class like pattern can totally have have parameters and results you would use the enter part for for constructing",
    "start": "2194619",
    "end": "2202359"
  },
  {
    "text": "or initializing it and the exit part is sort of you can use it for getting the value evaluating it and and figuring out",
    "start": "2202359",
    "end": "2209140"
  },
  {
    "text": "what's it made of and for instance if you want to compare two objects for equality you don't just want to see if",
    "start": "2209140",
    "end": "2215349"
  },
  {
    "text": "it's the same object but if they're if they're equal then you would just evaluate the the objects and get their",
    "start": "2215349",
    "end": "2221349"
  },
  {
    "text": "return value out and you compare the return values so it was used for that",
    "start": "2221349",
    "end": "2226450"
  },
  {
    "text": "kind of thing now to the virtual elements well so here we're using it",
    "start": "2226450",
    "end": "2233349"
  },
  {
    "text": "creating text a creating a text putting the text in there and getting it out again no surprises there they a little",
    "start": "2233349",
    "end": "2238750"
  },
  {
    "text": "hung up on the references they have very explicit syntax for reference because objects can also be evaluated so you",
    "start": "2238750",
    "end": "2244630"
  },
  {
    "text": "need to explicitly take a reference to the object when you don't want to evaluate it you just want to pointer essentially that gets a little tedious",
    "start": "2244630",
    "end": "2250540"
  },
  {
    "text": "so I just I just alighted that over here and instead when you want to evaluate an object I put the parentheses on the end",
    "start": "2250540",
    "end": "2256180"
  },
  {
    "text": "like you're calling it that's probably more familiar today so but it's a text",
    "start": "2256180",
    "end": "2262660"
  },
  {
    "text": "stack what if I wanted a stack of that a generic stack stack of anything can you",
    "start": "2262660",
    "end": "2268480"
  },
  {
    "text": "somehow do generics in in in beta well yes you can because you can",
    "start": "2268480",
    "end": "2275540"
  },
  {
    "text": "and this comes to the thing about what what's this class what's the thing with classes that corresponds to virtual",
    "start": "2275540",
    "end": "2281780"
  },
  {
    "text": "methods well that should be virtual classes what is a virtual class well it's a class declaration inside of",
    "start": "2281780",
    "end": "2288860"
  },
  {
    "text": "another class that can be overwritten and derive classes and so here for instance I am declaring a class a",
    "start": "2288860",
    "end": "2295400"
  },
  {
    "text": "virtual class called type which is the type of thing that this stack is supposed to hold and then if I want to",
    "start": "2295400",
    "end": "2300560"
  },
  {
    "text": "create a stack of a particular type then I prefix I derive from and make a",
    "start": "2300560",
    "end": "2305600"
  },
  {
    "text": "subclass of the Oh should have just said stack here and that's a typo of stack",
    "start": "2305600",
    "end": "2312830"
  },
  {
    "text": "and and I overwrite the the class here",
    "start": "2312830",
    "end": "2320060"
  },
  {
    "text": "and now I have a stack of texts because all the places because now inside of this particular stack everything",
    "start": "2320060",
    "end": "2328730"
  },
  {
    "text": "everywhere it's this type in the code that now means text just like a generic parameter of a type parameter right but",
    "start": "2328730",
    "end": "2335030"
  },
  {
    "text": "I but instead of passing it in through a parameter list I pass it in by specializing you use inheritance a lot",
    "start": "2335030",
    "end": "2341180"
  },
  {
    "text": "more so that's one way that that's one kind of crossover concept that almost",
    "start": "2341180",
    "end": "2346730"
  },
  {
    "text": "didn't catch on anywhere except actually in Scala they have this notion of abstract type which is exactly this they",
    "start": "2346730",
    "end": "2353900"
  },
  {
    "text": "this is probably the only really useful concept from beta that survived into another I wouldn't say Skylar's",
    "start": "2353900",
    "end": "2361130"
  },
  {
    "text": "mainstream but at least another language that's alive and well it got the the",
    "start": "2361130",
    "end": "2366680"
  },
  {
    "text": "abstract types which are virtual essentially virtual classes from beta",
    "start": "2366680",
    "end": "2372050"
  },
  {
    "text": "and I actually think it's a wonderful concept and I would love to have them in c-sharp one day so other things you can",
    "start": "2372050",
    "end": "2382940"
  },
  {
    "start": "2379000",
    "end": "2504000"
  },
  {
    "text": "as you saw also in no actually not as you saw in them a similar to what you saw in Simula you can also create",
    "start": "2382940",
    "end": "2391150"
  },
  {
    "text": "procedure patterns that can be specialized that you can derive from so you can have a base pattern that is a",
    "start": "2391150",
    "end": "2397280"
  },
  {
    "text": "procedure so this is for each that will enumerate all the elements in the in the",
    "start": "2397280",
    "end": "2405740"
  },
  {
    "text": "data structure and and invoke some code for each of today you would probably in other",
    "start": "2405740",
    "end": "2411230"
  },
  {
    "text": "languages you do that by passing in a lambda for the code to invoke but not here what you do instead is you leave an",
    "start": "2411230",
    "end": "2416660"
  },
  {
    "text": "inner in the for each and then people can go and create a sup procedure of by",
    "start": "2416660",
    "end": "2425540"
  },
  {
    "text": "deriving from for each putting code into the inner like their code goes into the inner and and now when you when you run",
    "start": "2425540",
    "end": "2433610"
  },
  {
    "text": "that one as the loop goes around your code gets executed every time right so",
    "start": "2433610",
    "end": "2438950"
  },
  {
    "text": "so you don't need to necessarily look at the details but it's just a loop that has a little you know it has it keeps",
    "start": "2438950",
    "end": "2447500"
  },
  {
    "text": "track of how far you are down the list it puts an element type in an element in scope that the inner can use and it also",
    "start": "2447500",
    "end": "2454730"
  },
  {
    "text": "has a bool that you can set to true if you want to end if you want to terminate the loop okay so if inner assigns true",
    "start": "2454730",
    "end": "2461960"
  },
  {
    "text": "to to end then the next time around the while loop quits so let's look at a use",
    "start": "2461960",
    "end": "2467780"
  },
  {
    "text": "of that here's this very simple use of for each I'm creating another method inside of stack that's the count method",
    "start": "2467780",
    "end": "2474920"
  },
  {
    "text": "to tells you how many elements are in here it derives from for each it gets all this code and it adds another member",
    "start": "2474920",
    "end": "2481460"
  },
  {
    "text": "in there which is the size that we're counting into the accumulator and then it runs this code every time around so it count it ups the counter and then it",
    "start": "2481460",
    "end": "2488120"
  },
  {
    "text": "adds a return which which is the the sizes it as it is at the end right so so",
    "start": "2488120",
    "end": "2493670"
  },
  {
    "text": "it's very you don't really need lambdas in a language like this you can you you you specialize instead of passing",
    "start": "2493670",
    "end": "2500530"
  },
  {
    "text": "lambdas or or higher-order parameters another example is a contains method",
    "start": "2500530",
    "end": "2509810"
  },
  {
    "start": "2504000",
    "end": "2597000"
  },
  {
    "text": "that checks whether a given object is contained in here well how do we know when an object is the same that may",
    "start": "2509810",
    "end": "2517190"
  },
  {
    "text": "depend on what element type we have how should they be compared so we can put a virtual method on the stack class that",
    "start": "2517190",
    "end": "2524000"
  },
  {
    "text": "is a virtual pattern that the does the comparison and then when you create your",
    "start": "2524000",
    "end": "2530960"
  },
  {
    "text": "own stack class and you override the type you also override the equals message to say when should we consider two objects equal and but you can't",
    "start": "2530960",
    "end": "2540590"
  },
  {
    "text": "override in the same way that you could in Sumy land that you can in in any other of your and",
    "start": "2540590",
    "end": "2545600"
  },
  {
    "text": "programming languages because it's not conceptually pure to take if something",
    "start": "2545600",
    "end": "2550730"
  },
  {
    "text": "is in the general class it should stay there you can't concept should be more special so this shouldn't be able to",
    "start": "2550730",
    "end": "2556010"
  },
  {
    "text": "throw things away from the more general concepts that should only be able to extend them so in beta you can't override what you do instead is you",
    "start": "2556010",
    "end": "2563650"
  },
  {
    "text": "specialize the method so we saw how you can inherit from one method to another and that and that's what you have to do",
    "start": "2563650",
    "end": "2570650"
  },
  {
    "text": "also when you have a virtual method the the override essentially implicitly",
    "start": "2570650",
    "end": "2575660"
  },
  {
    "text": "inherits from the original declaration so again we have something here that doesn't do much it has a pool but it",
    "start": "2575660",
    "end": "2583730"
  },
  {
    "text": "doesn't do anything with it instead it has an inner and people will overwrite the equals method can then provide the",
    "start": "2583730",
    "end": "2590330"
  },
  {
    "text": "body that does the actual comparison and assigns the result into the result variable here another interesting way of",
    "start": "2590330",
    "end": "2600560"
  },
  {
    "text": "using virtual patterns so we so now we have virtual patterns both virtual",
    "start": "2600560",
    "end": "2606080"
  },
  {
    "text": "classes and virtual procedures but another thing that in similar you can only have virtual members in classes you",
    "start": "2606080",
    "end": "2612080"
  },
  {
    "text": "can't have them in procedures but in beta for because of generality you can have virtual methods inside of other methods so the so the fine method",
    "start": "2612080",
    "end": "2620740"
  },
  {
    "text": "specializes for each adds aware virtual method that you use to provide a condition to the find method that you",
    "start": "2620740",
    "end": "2629420"
  },
  {
    "text": "need to satisfy in order to be found by the fine method alright so that's an again an abstract method that returns a boolean and",
    "start": "2629420",
    "end": "2635980"
  },
  {
    "text": "somebody who uses to find method they start out by creating a sub a sub class",
    "start": "2635980",
    "end": "2641840"
  },
  {
    "text": "a sub procedure that specializes the where method to do the actual comparison",
    "start": "2641840",
    "end": "2647780"
  },
  {
    "text": "and then you run it and and that's what it does as it goes down the chain as it",
    "start": "2647780",
    "end": "2653060"
  },
  {
    "text": "reaches this kind of combines it all together so just to say very very",
    "start": "2653060",
    "end": "2659240"
  },
  {
    "text": "beautiful conceptual generalization probably a little too abstract for most people so I didn't nothing really came",
    "start": "2659240",
    "end": "2666200"
  },
  {
    "text": "of it as for the why is beta syntax so odd Kristin really liked",
    "start": "2666200",
    "end": "2673359"
  },
  {
    "text": "hanging out and when he came to ojos he was off to visit which he kept doing",
    "start": "2673359",
    "end": "2679130"
  },
  {
    "text": "also when I was a student and I met him many times he was often bored and he",
    "start": "2679130",
    "end": "2684410"
  },
  {
    "text": "wanted to go out and have fun but you know there was a particular day when all the all his own old students were busy",
    "start": "2684410",
    "end": "2691820"
  },
  {
    "text": "with their kids and the only people who could go out with him was me and one of my fellow students was also called Kristen so we went to Cafe Casablanca in",
    "start": "2691820",
    "end": "2699980"
  },
  {
    "text": "Ho Hos and we got drunk and Kristen started explaining why bata had the",
    "start": "2699980",
    "end": "2705440"
  },
  {
    "text": "syntax it had essentially they had had this idea that it's easier to learn a programming language if all the if all",
    "start": "2705440",
    "end": "2712880"
  },
  {
    "text": "the constructs are described with words but it gets tedious to use a programming",
    "start": "2712880",
    "end": "2719390"
  },
  {
    "text": "language when you're when you become proficient on your professional developer so you want to have short little squiggles like in C C's very",
    "start": "2719390",
    "end": "2724579"
  },
  {
    "text": "terse has very few words keywords and so they wanted to say well I want to give",
    "start": "2724579",
    "end": "2729859"
  },
  {
    "text": "you a choice every construct has two syntaxes that has a word syntax and a glyph syntax okay that was the idea for",
    "start": "2729859",
    "end": "2736910"
  },
  {
    "text": "beta and they designed it all out and that design he actually wrote down on the paper tablecloth where we were",
    "start": "2736910",
    "end": "2743180"
  },
  {
    "text": "sitting in the bar and drinking and and I later just almost like the day after I",
    "start": "2743180",
    "end": "2752720"
  },
  {
    "text": "woke up and I went and talked to my buddy Christ thing we're like why did we not keep the the tablecloth why didn't",
    "start": "2752720",
    "end": "2758900"
  },
  {
    "text": "we bring it with us after when we went home we were too drunk to think of it imagine having that tablecloths a day",
    "start": "2758900",
    "end": "2763970"
  },
  {
    "text": "and it had like all Kristin scribbles specifically you know especially for us that would have been",
    "start": "2763970",
    "end": "2769730"
  },
  {
    "text": "cool and we didn't do it anyway so",
    "start": "2769730",
    "end": "2776950"
  },
  {
    "start": "2773000",
    "end": "2992000"
  },
  {
    "text": "looking further into the future of course the next generation of optic",
    "start": "2776950",
    "end": "2782660"
  },
  {
    "text": "learning programming languages there was an object Pascal slash turbo Pascal slash Delphi and as Hollis Berg was",
    "start": "2782660",
    "end": "2790400"
  },
  {
    "text": "involved in most of those an implementation of them and there was",
    "start": "2790400",
    "end": "2796839"
  },
  {
    "text": "Java of course which is the big big thing that came out of some weird",
    "start": "2796839",
    "end": "2802030"
  },
  {
    "text": "marriage between small talk and C++ that turned out surprisingly",
    "start": "2802030",
    "end": "2807079"
  },
  {
    "text": "they they were really basing Java off a small talk James Gosling has talked about this sense that it was they like this very",
    "start": "2807079",
    "end": "2813859"
  },
  {
    "text": "dynamic thing and Java has reflection and all that and has a strong runtime representation of object of classes",
    "start": "2813859",
    "end": "2819829"
  },
  {
    "text": "which C++ doesn't it it races it all like compile time but they wanted it to be excessive they wanted to be strongly",
    "start": "2819829",
    "end": "2825499"
  },
  {
    "text": "typed and they wanted even strong more strongly typed than C++ which doesn't say a lot and they wanted it to be",
    "start": "2825499",
    "end": "2831319"
  },
  {
    "text": "accessible to people so they stole all the C syntax and C++ syntax and that was",
    "start": "2831319",
    "end": "2836509"
  },
  {
    "text": "essentially how Java came about and of course it was wildly wildly successful and also derived from small talk where's",
    "start": "2836509",
    "end": "2844999"
  },
  {
    "text": "a bunch of scripting languages Python Ruby and the several of them I just put Python here that became very successful",
    "start": "2844999",
    "end": "2851209"
  },
  {
    "text": "Python is now in the Stack Overflow survey this year I think it's a the fourth most popular language because of",
    "start": "2851209",
    "end": "2858049"
  },
  {
    "text": "its use in a science community that's now turning into data science code all over a very very obscure route where",
    "start": "2858049",
    "end": "2868130"
  },
  {
    "text": "they took small talk and ripped out the classes and only left objects so if you wanted to make new objects you just had",
    "start": "2868130",
    "end": "2874249"
  },
  {
    "text": "to create them from scratch or clone them from other objects it's called prototype based programming and that",
    "start": "2874249",
    "end": "2879289"
  },
  {
    "text": "would have remained obscure if it wasn't for Java Script that became in the three",
    "start": "2879289",
    "end": "2885349"
  },
  {
    "text": "weeks that it was written it was inspired by all of these Java from this for the syntax and this it was a",
    "start": "2885349",
    "end": "2891469"
  },
  {
    "text": "scripting language inspired by Python and it had this prototype based objects idea that was built-in so now everybody",
    "start": "2891469",
    "end": "2897409"
  },
  {
    "text": "the most popular programming language in the world now uses has only recently gotten classes classes isn't even up",
    "start": "2897409",
    "end": "2904640"
  },
  {
    "text": "until now wasn't even a thing and this supposedly opticore in programming language so that was sort of the and of course the story goes on but they want",
    "start": "2904640",
    "end": "2911989"
  },
  {
    "text": "only one thing I also want to mention is that yes somewhere in there the c-sharp which was you know mildly inspired by Java and to to make a joke of it and and",
    "start": "2911989",
    "end": "2922130"
  },
  {
    "text": "of course by others as well including we reinstating some C++ concepts so that's",
    "start": "2922130",
    "end": "2927890"
  },
  {
    "text": "kind of how it all play out but there is beta all alone with no arrows going out from it nobody really actually ever used",
    "start": "2927890",
    "end": "2933829"
  },
  {
    "text": "it for anything no no one adopted it Industrial II for long and it and not many of the ideas",
    "start": "2933829",
    "end": "2940670"
  },
  {
    "text": "made it except for the virtual classes that I mentioned before made it to other other languages so it was kind of like in a sense it was a it wasn't the",
    "start": "2940670",
    "end": "2949160"
  },
  {
    "text": "success that similar was I didn't have the impact or the usage but but from an",
    "start": "2949160",
    "end": "2955990"
  },
  {
    "text": "academic point of view it's a really wonderful thing to study and it kind of reminds us that you know sometimes it's",
    "start": "2955990",
    "end": "2965540"
  },
  {
    "text": "one of those languages like self actually also I love self and beta because they're languages that take a concept and they go all away with it and",
    "start": "2965540",
    "end": "2972380"
  },
  {
    "text": "it's very not just mind blowing but mind expanding to sometimes go and learn and",
    "start": "2972380",
    "end": "2978230"
  },
  {
    "text": "maybe use those languages and think about wow wow the world look really looks different from this place it's",
    "start": "2978230",
    "end": "2986690"
  },
  {
    "text": "kind of like fundamentalism it makes the world it makes it a lot easier to interpret everything in the world",
    "start": "2986690",
    "end": "2992859"
  },
  {
    "start": "2992000",
    "end": "3070000"
  },
  {
    "text": "Kristen was very loved and well known in the in the programming community I",
    "start": "2992859",
    "end": "2998930"
  },
  {
    "text": "happened to I arranged a programming language conference about five years ago and we had a we had a party and some of",
    "start": "2998930",
    "end": "3007240"
  },
  {
    "text": "my speakers were older than the rest and sort of a they were catching up from old",
    "start": "3007240",
    "end": "3012250"
  },
  {
    "text": "days this is a be honest rooster who was the keynote speaker there and we have we have Dave Unger who was the the primary",
    "start": "3012250",
    "end": "3020020"
  },
  {
    "text": "designer of self that I showed before we have will cook who's also influenced",
    "start": "3020020",
    "end": "3025780"
  },
  {
    "text": "programming languages over the years and they were kind of sitting for themselves in a four-person booths and I'm walking around being the organizer checking in",
    "start": "3025780",
    "end": "3032109"
  },
  {
    "text": "on people and I there are these three old guys and creaky knee guys I'm like and I get you guys something can I fetch",
    "start": "3032109",
    "end": "3037390"
  },
  {
    "text": "a beer for you whatever and they're like hey Matt we were just exchanging stories about Kristin Durgan",
    "start": "3037390",
    "end": "3043270"
  },
  {
    "text": "do you want to sit down and join us and they pointed to the fourth empty scene I was like I'm in heaven I'm in heaven I get to sit and talk to these old guys",
    "start": "3043270",
    "end": "3049270"
  },
  {
    "text": "about Kristin egor they were all just like they all had different stories they interacted with them in different",
    "start": "3049270",
    "end": "3054400"
  },
  {
    "text": "periods of time and and we just all like touched by him it's kind of impressive",
    "start": "3054400",
    "end": "3061089"
  },
  {
    "text": "that it's not just the technology it's really also the person really really it touched a lot of people they're so happy",
    "start": "3061089",
    "end": "3068500"
  },
  {
    "text": "to have known him a little and had that experience his final a lot of people now if you go and read his the",
    "start": "3068500",
    "end": "3079280"
  },
  {
    "start": "3070000",
    "end": "3154000"
  },
  {
    "text": "the eulogies and so on for Kristen a lot of people reference his last public talk",
    "start": "3079280",
    "end": "3085369"
  },
  {
    "text": "that I was also at which was a banquet speech at the Eco conference in Malaga in 2002 as it turned out only a few",
    "start": "3085369",
    "end": "3093500"
  },
  {
    "text": "months before he died of a heart attack and a few months before uh Leo Han Dahl died he was actually sick at the time",
    "start": "3093500",
    "end": "3098780"
  },
  {
    "text": "and we signed a giant big get well card for him unfortunately that wasn't enough and he gave this fun speech that many",
    "start": "3098780",
    "end": "3106880"
  },
  {
    "text": "people remember and I particularly it was like hilarious he was so so funny and and one of the things that he he",
    "start": "3106880",
    "end": "3112970"
  },
  {
    "text": "took offense to was that Danes have this weed I just just to make it clear if it",
    "start": "3112970",
    "end": "3118160"
  },
  {
    "text": "isn't already we Dame's make a lot of fun we took a lot of fun at Norwegians and you know we it's all unfounded but",
    "start": "3118160",
    "end": "3127850"
  },
  {
    "text": "particularly have this notion we have this term called fair labor which is Mountain monkeys right and that's that",
    "start": "3127850",
    "end": "3134869"
  },
  {
    "text": "just means no agents I'm sorry but it's slang for Norwegians and he picked up on this and he was mildly offended by it",
    "start": "3134869",
    "end": "3140030"
  },
  {
    "text": "and he said well well no it wasn't true but it was fun like in no way we call Dame's plane monkeys ambiguity intended",
    "start": "3140030",
    "end": "3148840"
  },
  {
    "text": "and I thought that was kind of that was kind of neat so yeah I think that the",
    "start": "3148840",
    "end": "3156650"
  },
  {
    "start": "3154000",
    "end": "3308000"
  },
  {
    "text": "only thing left is to think about well what what was some of the things that",
    "start": "3156650",
    "end": "3163310"
  },
  {
    "text": "also maybe came in from the beginning with optical and programming but maybe weren't so good and then we can talk a",
    "start": "3163310",
    "end": "3169700"
  },
  {
    "text": "little bit about the future so this conceptual model thing as a model as",
    "start": "3169700",
    "end": "3175970"
  },
  {
    "text": "reasoning for why the languages to sign the way it is it's all fair and good but sometimes we have to be honest and say",
    "start": "3175970",
    "end": "3181700"
  },
  {
    "text": "well there are the languages could have looked looked a lot different and still",
    "start": "3181700",
    "end": "3186740"
  },
  {
    "text": "fit the conceptual framework that they came up with there was some things in particular that weren't in the language",
    "start": "3186740",
    "end": "3192680"
  },
  {
    "text": "that weren't there because the conceptual look at the concept said that there should be but they were there because it was for computers and we",
    "start": "3192680",
    "end": "3199700"
  },
  {
    "text": "couldn't figure out how to do it otherwise right one of them single inheritance right so concepts can totally overlap",
    "start": "3199700",
    "end": "3207290"
  },
  {
    "text": "you can have overlapping concept right you gave you can have a in Denmark we",
    "start": "3207290",
    "end": "3213320"
  },
  {
    "text": "have all these proofs of owner that you have a mobile sausage stand right so it's both a vehicle and it's a and it's",
    "start": "3213320",
    "end": "3220340"
  },
  {
    "text": "an eatery right okay so it's overlapping concepts and you have that all over it's",
    "start": "3220340",
    "end": "3226490"
  },
  {
    "text": "easy to run into that in real life so it's not like neat hierarchies it's a web right there",
    "start": "3226490",
    "end": "3231920"
  },
  {
    "text": "this definitely specialization and generalization it's an ordered graph but it's not and it's not cyclic but it but",
    "start": "3231920",
    "end": "3240109"
  },
  {
    "text": "it's also not just a hierarchy right it's not um it's not a tree so",
    "start": "3240109",
    "end": "3246670"
  },
  {
    "text": "object-oriented programming has struggled with this ever since like for these 50 years there's been this uneasy",
    "start": "3246670",
    "end": "3251720"
  },
  {
    "text": "thing about should you have multiple inheritance then C++ has multiple inheritance other languages do but it",
    "start": "3251720",
    "end": "3257930"
  },
  {
    "text": "gets really ugly because translating that into something that's beautiful at",
    "start": "3257930",
    "end": "3263510"
  },
  {
    "text": "a language level and it and efficient and easy to reason about turned out to be surprisingly hard and so we've landed",
    "start": "3263510",
    "end": "3270560"
  },
  {
    "text": "now on this uneasy compromise in the statically typed languages that we have interfaces which are not classes but",
    "start": "3270560",
    "end": "3277910"
  },
  {
    "text": "they're very like classes but they don't have code in them and so they don't have the technical problems that you have when you try to combine different",
    "start": "3277910",
    "end": "3284359"
  },
  {
    "text": "concepts so you can have all your concept overlap that you want at the interface level once you get to classes you have to choose what's the main",
    "start": "3284359",
    "end": "3290839"
  },
  {
    "text": "hierarchy and then do that in classes and it's not beautiful you know it's",
    "start": "3290839",
    "end": "3296720"
  },
  {
    "text": "it's not economical to have these two different kinds of types but it's the",
    "start": "3296720",
    "end": "3303230"
  },
  {
    "text": "way we could figure out how to do it a big one I want to say is the the",
    "start": "3303230",
    "end": "3309470"
  },
  {
    "start": "3308000",
    "end": "3470000"
  },
  {
    "text": "singularity the the null reference exceptions so I mentioned Tony Hoare invented the",
    "start": "3309470",
    "end": "3317030"
  },
  {
    "text": "reference the referenced record types and invented the null reference because it was easy that's like okay that could",
    "start": "3317030",
    "end": "3324020"
  },
  {
    "text": "be null because that's there and then we had now we have an initial value for them and and everyone's happy and off to",
    "start": "3324020",
    "end": "3329750"
  },
  {
    "text": "the races and and he calls it his billion dollar mistake and gives talks about that like and",
    "start": "3329750",
    "end": "3336790"
  },
  {
    "text": "we never really came to grips of that null null reference exceptions are not just enough to go in programming",
    "start": "3337599",
    "end": "3343130"
  },
  {
    "text": "language but they're worse because everything is a referee things by reference so you have them all the time and also most optical and programming",
    "start": "3343130",
    "end": "3351020"
  },
  {
    "text": "languages are strongly imperative and so UN so the way that you the way that an object starts out it starts out with its",
    "start": "3351020",
    "end": "3358670"
  },
  {
    "text": "fields having all the default values and then you have to initialize it before before it should be observed but people",
    "start": "3358670",
    "end": "3366560"
  },
  {
    "text": "can typically observe objects before they're fully initialized or they forget to initialize something and these default values leak out so there there's",
    "start": "3366560",
    "end": "3374869"
  },
  {
    "text": "a lot of risk of null and by the way null isn't bad right null is a very useful thing for expressing okay",
    "start": "3374869",
    "end": "3380810"
  },
  {
    "text": "something I didn't have that I didn't have that value or it only sometimes there or whatever like it's a",
    "start": "3380810",
    "end": "3387560"
  },
  {
    "text": "semantically useful thing and what Tony Hoare said was he should just have",
    "start": "3387560",
    "end": "3392720"
  },
  {
    "text": "introduced a notion in the type system where you could declare whether the null was okay or not like if you've done that",
    "start": "3392720",
    "end": "3397970"
  },
  {
    "text": "said there's there's nullable none novel references then you wouldn't have had this problem with null reference",
    "start": "3397970",
    "end": "3403190"
  },
  {
    "text": "exceptions because then the type system could tell you when you were doing the right thing and when you weren't and we",
    "start": "3403190",
    "end": "3409700"
  },
  {
    "text": "sort of only slowly coming to grips with that now some of the modern programming languages are a lot better at dealing with nulls we're trying to add something",
    "start": "3409700",
    "end": "3415520"
  },
  {
    "text": "to c-sharp novel reference types that let you distinguish between whether",
    "start": "3415520",
    "end": "3421250"
  },
  {
    "text": "whether object references should be should be null or not and if they shouldn't then we can say don't stick a null in there and give you a warning and",
    "start": "3421250",
    "end": "3426920"
  },
  {
    "text": "if they should then we'll let you do it but then when you do reference we say hey you forgot to check for null before",
    "start": "3426920",
    "end": "3433250"
  },
  {
    "text": "you dereference and we can catch you there and help reduce the null reference exceptions which are really like a I",
    "start": "3433250",
    "end": "3438440"
  },
  {
    "text": "think of it a little bit like fossil fuels fuels right in that the fossil fuels",
    "start": "3438440",
    "end": "3444319"
  },
  {
    "text": "really help civilize give civilization a boost and we grew our economy and our science and everything a lot more",
    "start": "3444319",
    "end": "3449990"
  },
  {
    "text": "quickly because of fossil fuels but we also paid a high price that now we have to learn how to how to get along without",
    "start": "3449990",
    "end": "3458089"
  },
  {
    "text": "it and I think null was one of those things that it was one of those shortcuts to greatness that we were sort",
    "start": "3458089",
    "end": "3464180"
  },
  {
    "text": "of all just ignoring the elephant in a room for a while and and well we can't keep doing that",
    "start": "3464180",
    "end": "3469940"
  },
  {
    "text": "so looking for the next 50 50 years from",
    "start": "3469940",
    "end": "3475549"
  },
  {
    "start": "3470000",
    "end": "3600000"
  },
  {
    "text": "now somebody can use the zero send 100 for an oo joke if they want to if",
    "start": "3475549",
    "end": "3481430"
  },
  {
    "text": "they're still after you going programming around you know the pennies for for every object and it might be",
    "start": "3481430",
    "end": "3492589"
  },
  {
    "text": "good to take a temperature on house up you're going to programming doing now you obviously it's wildly successful you have to go pretty far down the list of",
    "start": "3492589",
    "end": "3499130"
  },
  {
    "text": "most used languages before you get to one that's not object-oriented so obviously it has succeeded wildly in a",
    "start": "3499130",
    "end": "3504470"
  },
  {
    "text": "certain sense but it's also the object oriented paradigm is struggling to deal with some of the modern challenges in",
    "start": "3504470",
    "end": "3510829"
  },
  {
    "text": "programming in particular it's sort of very it's very fine grained on state",
    "start": "3510829",
    "end": "3517280"
  },
  {
    "text": "right it says that everything I know about sheep should be in the Sheep class",
    "start": "3517280",
    "end": "3525819"
  },
  {
    "text": "everything I know about sheep not just what data is in they are used to to",
    "start": "3525819",
    "end": "3531500"
  },
  {
    "text": "track the Sheep but also all the functionality that they have it will be in virtual methods and when I want to do",
    "start": "3531500",
    "end": "3537140"
  },
  {
    "text": "something that's particular to every animal the way I do it is that I put a virtual method in animal and I override",
    "start": "3537140",
    "end": "3543260"
  },
  {
    "text": "it and it's all - it's all together Salk and capsulated together and that's great if you're only describing if you're only",
    "start": "3543260",
    "end": "3549410"
  },
  {
    "text": "using sheep for one kind of program right and if you're doing it locally and you can track all the state and so on",
    "start": "3549410",
    "end": "3555289"
  },
  {
    "text": "but both sort of at a program level and also at the program execution level to go to those two levels again we're now",
    "start": "3555289",
    "end": "3561740"
  },
  {
    "text": "in a much more distributed world you have libraries of data and you have libraries and you have actual data that",
    "start": "3561740",
    "end": "3567950"
  },
  {
    "text": "gets used from many different programs and also on many different computers at",
    "start": "3567950",
    "end": "3575240"
  },
  {
    "text": "the same time like the the shapes get used in many different programs and the data get used on many different machines",
    "start": "3575240",
    "end": "3581420"
  },
  {
    "text": "so this all this distribution that kind of tears against the encapsulation of",
    "start": "3581420",
    "end": "3586520"
  },
  {
    "text": "opticon in programming and so I think that I think functional programming has answers to all of that but they but they",
    "start": "3586520",
    "end": "3593180"
  },
  {
    "text": "suck in other ways like they're they lack a lot of the goodness of optimum programming and I think that the the",
    "start": "3593180",
    "end": "3600859"
  },
  {
    "text": "trend that we've been seeing now for the last it's it started about a decade ago I think with the programming",
    "start": "3600859",
    "end": "3607470"
  },
  {
    "text": "language Scala is to try to bring object-oriented and functional programming together and try to look for",
    "start": "3607470",
    "end": "3613620"
  },
  {
    "text": "instead of viewing them as we did in the old days certainly as as Kristin's age did as being like fundamentally",
    "start": "3613620",
    "end": "3620640"
  },
  {
    "text": "different and completely separate paradigms we should try to look for commonalities and in which ways are",
    "start": "3620640",
    "end": "3626490"
  },
  {
    "text": "object-oriented and functional programming actually the same or very compatible and try to bring them",
    "start": "3626490",
    "end": "3631500"
  },
  {
    "text": "together into a unified paradigm that sometimes has two different ways of",
    "start": "3631500",
    "end": "3637470"
  },
  {
    "text": "doing things but they're complementary rather than competing right I think Scala did a good first whack at that it",
    "start": "3637470",
    "end": "3645300"
  },
  {
    "text": "was the first language that had that as a philosophy from the start saying we want to create a language that is",
    "start": "3645300",
    "end": "3650540"
  },
  {
    "text": "equally an object and a functional programming language but not in that it",
    "start": "3650540",
    "end": "3655650"
  },
  {
    "text": "just smooshes all the features on both in but it tries to sync them together tries to unify them like beta try to",
    "start": "3655650",
    "end": "3661770"
  },
  {
    "text": "unify classes and procedures they try to unify the two paradigms and I think",
    "start": "3661770",
    "end": "3667500"
  },
  {
    "text": "that's a good I don't agree with everything they do in Scala by far in the specifics but I think that's a great",
    "start": "3667500",
    "end": "3673200"
  },
  {
    "text": "philosophy and I and having started out in c-sharp with an object-oriented programming language",
    "start": "3673200",
    "end": "3678210"
  },
  {
    "text": "people sometimes accuse me of you know they don't quite dare to do that but",
    "start": "3678210",
    "end": "3684390"
  },
  {
    "text": "they sometimes sort of imply that we were like blinded by functional programming and we don't like up your",
    "start": "3684390",
    "end": "3689730"
  },
  {
    "text": "programming anymore but we're really trying to import good ideas from",
    "start": "3689730",
    "end": "3694950"
  },
  {
    "text": "functional programming into c-sharp in a way that complements and works well with what's already there and create sort of",
    "start": "3694950",
    "end": "3701160"
  },
  {
    "text": "like this combined world where you can use the right tools for the job and on",
    "start": "3701160",
    "end": "3707100"
  },
  {
    "text": "both sides so that's sort of like that's I think a trend that we'll see play out over the next decade and and have",
    "start": "3707100",
    "end": "3714480"
  },
  {
    "text": "languages that are a lot less pure one of you the other of course may be some new ideas may come out or new turns may",
    "start": "3714480",
    "end": "3720480"
  },
  {
    "text": "happen in the world that obviate all that and something new will happen I can't look 50 years out in the future but that's the that's the change that I",
    "start": "3720480",
    "end": "3728070"
  },
  {
    "text": "I'm seeing now that's been ongoing for a while and I think it's going to hit the mainstream",
    "start": "3728070",
    "end": "3733240"
  },
  {
    "text": "over there over the next decade or so it's going to become mainstream as the",
    "start": "3733240",
    "end": "3738850"
  },
  {
    "text": "the current big languages try to adapt to this and it may be that we get replaced by some that do it better",
    "start": "3738850",
    "end": "3744910"
  },
  {
    "text": "because they do it from the beginning maybe the dispels the death of c-sharp and Java and all that but we try not to",
    "start": "3744910",
    "end": "3750700"
  },
  {
    "text": "we try to we try to be part of that movement and and do a good job of embracing it so that puts us at the end",
    "start": "3750700",
    "end": "3758440"
  },
  {
    "text": "of the talk yeah I'll take questions and hang out for bed a few rightwell options",
    "start": "3758440",
    "end": "3781650"
  },
  {
    "text": "sort of solve the problem if you if",
    "start": "3781650",
    "end": "3787810"
  },
  {
    "text": "that's all you have from the start then it becomes a lot better they saw part of the problem then in that you don't have",
    "start": "3787810",
    "end": "3794140"
  },
  {
    "text": "any other mechanisms you in the problem is that in our current languages we already have decoupled the checking of",
    "start": "3794140",
    "end": "3799660"
  },
  {
    "text": "null from the dereferencing right so you can forget to do one and still do the other if you if you start with option",
    "start": "3799660",
    "end": "3806440"
  },
  {
    "text": "types the way you get at the what's inside is some sort of pattern matching where you can't get the value inside",
    "start": "3806440",
    "end": "3813490"
  },
  {
    "text": "without also checking for null at the same time so it's sort of like by construction impossible to get a null",
    "start": "3813490",
    "end": "3819580"
  },
  {
    "text": "reference exception however what you're not solving is what's for when you don't",
    "start": "3819580",
    "end": "3825370"
  },
  {
    "text": "have an option type when you have something that's just a reference and you know it never to be null you want it",
    "start": "3825370",
    "end": "3830590"
  },
  {
    "text": "to never be known what's its default value yes and that you have to assign it",
    "start": "3830590",
    "end": "3840040"
  },
  {
    "text": "that is very hard to enforce it's barely possible to enforce in a functional world where you don't",
    "start": "3840040",
    "end": "3846220"
  },
  {
    "text": "typically have subtyping and overriding and and chaining constructors and all that in an object joinder world getting",
    "start": "3846220",
    "end": "3852940"
  },
  {
    "text": "all that toothpaste back in the tube and making sure that nobody ever forgets to assign to an unknowable thing that is in",
    "start": "3852940",
    "end": "3863470"
  },
  {
    "text": "practice extremely hard to do it may be that we make sign progress enough I'd love for that",
    "start": "3863470",
    "end": "3869440"
  },
  {
    "text": "to be the case that we actually can get there and say okay we've got this solved now this was that turned out to be the",
    "start": "3869440",
    "end": "3875530"
  },
  {
    "text": "way to do it but we're not quite there yet it's but Swift has problems where",
    "start": "3875530",
    "end": "3882160"
  },
  {
    "text": "you you get into the corners and you still struggle with the default value stuff it's they pushed it pretty far to",
    "start": "3882160",
    "end": "3889150"
  },
  {
    "text": "the corners and it's pretty impressive what they did and they could do that because they start out fresh with a new language but they still have problems to",
    "start": "3889150",
    "end": "3899380"
  },
  {
    "text": "the extent that they're object-oriented it's very it's extremely hard and you know languages are messy we have we also",
    "start": "3899380",
    "end": "3908020"
  },
  {
    "text": "have static constructors and we have and when you have constructors you can call virtual methods on the object that",
    "start": "3908020",
    "end": "3913720"
  },
  {
    "text": "you're in and that even though it's not initialized and there all this stuff that's just chasing down all that to",
    "start": "3913720",
    "end": "3920080"
  },
  {
    "text": "make sure that you never ever observe an unknowable reference before it's been",
    "start": "3920080",
    "end": "3925570"
  },
  {
    "text": "assigned is well in our current languages it's impossible it's just it's",
    "start": "3925570",
    "end": "3930820"
  },
  {
    "text": "just too incomplete right it can't be done but in the general but we may be",
    "start": "3930820",
    "end": "3936910"
  },
  {
    "text": "able to have languages where we can button it down enough without lobotomizing it to the point where it's",
    "start": "3936910",
    "end": "3942970"
  },
  {
    "text": "not usable anymore finding that balance I think it's an open question still and we're making great but we're making all",
    "start": "3942970",
    "end": "3949150"
  },
  {
    "text": "trying to make strides at it from different angles and that's why I think it's totally conceivable that we'll find",
    "start": "3949150",
    "end": "3954700"
  },
  {
    "text": "the right balance and that new programming languages five years from now will no longer have this problem that we awesome of course we still well",
    "start": "3954700",
    "end": "3961900"
  },
  {
    "text": "we can't can't get rid of in c-sharp for instance but they do it better but",
    "start": "3961900",
    "end": "3972220"
  },
  {
    "text": "that's because there's Explorer that's because of the aspect of being a functional programming language that is",
    "start": "3972220",
    "end": "3978250"
  },
  {
    "text": "that there are a lot of things you can't do in them yeah they button you down quite hard right in some function of",
    "start": "3978250",
    "end": "3983980"
  },
  {
    "text": "program language you can't even reassign things right they're all things are immutable they trend heavily towards",
    "start": "3983980",
    "end": "3990520"
  },
  {
    "text": "immutable and they're just some kinds of abstraction that are not there so it",
    "start": "3990520",
    "end": "3995920"
  },
  {
    "text": "kind of yes you can most of the time if you don't want all these other good",
    "start": "3995920",
    "end": "4002100"
  },
  {
    "text": "features that's the problem and some people are happy just living in a functional world well more power to them",
    "start": "4002100",
    "end": "4008490"
  },
  {
    "text": "they don't have the null problem and they can be very arrogant about it we",
    "start": "4008490",
    "end": "4016350"
  },
  {
    "text": "don't have that problem over here anymore and you guys you you know but but the truth of the matter is that they",
    "start": "4016350",
    "end": "4022560"
  },
  {
    "text": "that's a lot of expressiveness that they leave on the table like that so yeah if we can solve it in that hybrid world",
    "start": "4022560",
    "end": "4028950"
  },
  {
    "text": "where functional and off you're gonna die coming together that will be that will be fabulous I would love a future",
    "start": "4028950",
    "end": "4034440"
  },
  {
    "text": "that it has that how and the way that's",
    "start": "4034440",
    "end": "4070110"
  },
  {
    "text": "good way of putting it yeah the how and the what maybe yeah but yeah yeah you",
    "start": "4070110",
    "end": "4079290"
  },
  {
    "text": "kind of have to again you have to strike a balance nobody is particularly in love with having to say how all the time right and",
    "start": "4079290",
    "end": "4085140"
  },
  {
    "text": "that's part of why people love functional programming is you can but you often end up saying how anyway you",
    "start": "4085140",
    "end": "4090720"
  },
  {
    "text": "just say differently there's still nitty-gritty you never get away from the nitty-gritty but yeah we'll see where it",
    "start": "4090720",
    "end": "4098339"
  },
  {
    "text": "goes but I think I'm optimistic about I really like I like the programming",
    "start": "4098340",
    "end": "4105450"
  },
  {
    "text": "language scene right now I like that we are not monopolies with the big languages but that there are lots of",
    "start": "4105450",
    "end": "4111420"
  },
  {
    "text": "smaller very forward-looking creative languages that are actually thriving",
    "start": "4111420",
    "end": "4116730"
  },
  {
    "text": "industrially as well I think it pushes us all it pushes up the velocity of innovation in programming languages in a",
    "start": "4116730",
    "end": "4123330"
  },
  {
    "text": "good good way so yeah I'm really happy about that it's um that's the right way it was a bit boring",
    "start": "4123330",
    "end": "4130920"
  },
  {
    "text": "for some years there were Java was kind of sitting on everything I went to was researcher at the time I",
    "start": "4130920",
    "end": "4137159"
  },
  {
    "text": "went to research conferences and all the research papers was essentially the",
    "start": "4137159",
    "end": "4142318"
  },
  {
    "text": "title of all the papers was doing what we did the last time we published a paper but now in Java right as all",
    "start": "4142319",
    "end": "4148199"
  },
  {
    "text": "reheated stuff trying to everyone try to get on the Java bandwagon it was amazing how much error took out of the room that",
    "start": "4148199",
    "end": "4154798"
  },
  {
    "text": "was not a good environment I mean Java is good in many ways but there was just not a good environment where nothing else could could thrive so",
    "start": "4154799",
    "end": "4163008"
  },
  {
    "text": "it's much better now there I I don't mind the competition I welcome it if like we're we're all in this in this",
    "start": "4163009",
    "end": "4169710"
  },
  {
    "text": "quest together to make programming better cool thanks for coming y'all yeah",
    "start": "4169710",
    "end": "4178620"
  },
  {
    "text": "it was not as big as the first one but it is it's fun there's more fun in a",
    "start": "4178620",
    "end": "4184500"
  },
  {
    "text": "different way this way thanks for sticking with me thank you",
    "start": "4184500",
    "end": "4190099"
  }
]