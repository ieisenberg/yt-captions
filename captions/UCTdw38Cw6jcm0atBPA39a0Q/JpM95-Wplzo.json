[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "so good morning welcome to GRP see on Donna core so about me my",
    "start": "9730",
    "end": "17520"
  },
  {
    "text": "name is James Newton King I'm a developer on the asp.net team since the beginning of this year I've been looking",
    "start": "17520",
    "end": "23939"
  },
  {
    "text": "at G RPC and how we can improve the GI PC experience on net core and I'm happy",
    "start": "23939",
    "end": "30510"
  },
  {
    "text": "to say everything I'm going to show you today is available now at launch worth Donnie core 3 o last month so let's just",
    "start": "30510",
    "end": "40860"
  },
  {
    "start": "38000",
    "end": "166000"
  },
  {
    "text": "start by getting an understanding of who who feels comfortable about understanding what gr PC is if you have",
    "start": "40860",
    "end": "47879"
  },
  {
    "text": "you've got a good idea about what G RPC is and what it's used for put your hands up so it's maybe a third",
    "start": "47879",
    "end": "53879"
  },
  {
    "text": "of people maybe half who is using gr PC whether it's Annette or any other",
    "start": "53879",
    "end": "60750"
  },
  {
    "text": "platform Java C++ go so it's maybe half a dozen hints so let's let's start off",
    "start": "60750",
    "end": "69150"
  },
  {
    "text": "by talking about what exactly she RPC is so it's a remote procedure call",
    "start": "69150",
    "end": "75180"
  },
  {
    "text": "framework as far as I can tell it's probably got the largest mindshare out",
    "start": "75180",
    "end": "80670"
  },
  {
    "text": "of remote procedure called frameworks the community the overall developer community is really coalescing around it",
    "start": "80670",
    "end": "87080"
  },
  {
    "text": "it was originally created by Google but is now run by the cloud native computing",
    "start": "87080",
    "end": "92790"
  },
  {
    "text": "foundation and the G&G RPC doesn't stand for Google it's a recursive acronym that",
    "start": "92790",
    "end": "98040"
  },
  {
    "text": "stands for G RPC remote procedure calls",
    "start": "98040",
    "end": "102500"
  },
  {
    "text": "so GRP see it's not new it was has actually been around since 2015 but it",
    "start": "104270",
    "end": "111000"
  },
  {
    "text": "is built with modern technologies so G RPC is really the union of two cool",
    "start": "111000",
    "end": "116040"
  },
  {
    "text": "technologies is HCB - which acts as its underlying protocol and then there's",
    "start": "116040",
    "end": "121110"
  },
  {
    "text": "protobuf okay a protocol buffers I'll call it protobuf throughout the rest of us talk and it acts as like a contract",
    "start": "121110",
    "end": "128399"
  },
  {
    "text": "language and also the serialization format GBC has designed for modern",
    "start": "128399",
    "end": "134940"
  },
  {
    "text": "applications its high-performance it uses a binary protocol and H should be too and also proto buffers binary",
    "start": "134940",
    "end": "141209"
  },
  {
    "text": "creates very small messages very fast messages it's quite easy to create real time services who's in charge",
    "start": "141209",
    "end": "147690"
  },
  {
    "text": "and GBC is platform independent so it's now supported and don't it call well but",
    "start": "147690",
    "end": "154410"
  },
  {
    "text": "it's also supported and knowed Java Ruby C++ Python go rust pretty much anything",
    "start": "154410",
    "end": "162180"
  },
  {
    "text": "you can think of gr PC support certain so let's talk a bit about what proto",
    "start": "162180",
    "end": "168840"
  },
  {
    "start": "166000",
    "end": "230000"
  },
  {
    "text": "buffers so protobuf actually serves a number of purposes and gr pc the first",
    "start": "168840",
    "end": "175440"
  },
  {
    "text": "purpose as it serves as an interface definition language it's a language independent way of defining messages",
    "start": "175440",
    "end": "183210"
  },
  {
    "text": "that your services are going to send and receive and that proto file is then",
    "start": "183210",
    "end": "188910"
  },
  {
    "text": "shared between applications so your contract needs to be known both about on the server and on the client so here we",
    "start": "188910",
    "end": "195810"
  },
  {
    "text": "can see a couple of messages and you'll notice that against each field so topic ID details we're specifying a number",
    "start": "195810",
    "end": "202950"
  },
  {
    "text": "when protobuf sends a message it doesn't send the entire message name like it's not a cell prescriptive format you need",
    "start": "202950",
    "end": "209250"
  },
  {
    "text": "to have a contract on both sides protobuf also acts as the definition of",
    "start": "209250",
    "end": "216150"
  },
  {
    "text": "the service model so here we have a topic service and then a method on that service call subscribe you can think of",
    "start": "216150",
    "end": "223050"
  },
  {
    "text": "a t RPC service like a controller and a method like in action and in protobuf is",
    "start": "223050",
    "end": "232110"
  },
  {
    "start": "230000",
    "end": "286000"
  },
  {
    "text": "the wire format so that's the actual serialization and we'll take those messages that are defined and c-sharp",
    "start": "232110",
    "end": "239209"
  },
  {
    "text": "dotnet and we'll turn it into this binary format so it's small and fast and",
    "start": "239209",
    "end": "244950"
  },
  {
    "text": "then it will get sent across HTTP 2 to the client and because this is an open",
    "start": "244950",
    "end": "251160"
  },
  {
    "text": "standard you get the benefits of a binary format and that it's very fast but also because it's standards-based as",
    "start": "251160",
    "end": "258000"
  },
  {
    "text": "cross-platform like it's not a donut only thing which you can't communicate with other services you get the best of",
    "start": "258000",
    "end": "263400"
  },
  {
    "text": "both worlds it's also important to note that because it's binary is not human",
    "start": "263400",
    "end": "269280"
  },
  {
    "text": "readable you need to have both tools to understand the binary unless you're",
    "start": "269280",
    "end": "274530"
  },
  {
    "text": "amazing at reading binary or and you also need to have the contract because",
    "start": "274530",
    "end": "280350"
  },
  {
    "text": "it's not a self descriptor of mystery and format let's talk a bit",
    "start": "280350",
    "end": "287570"
  },
  {
    "start": "286000",
    "end": "434000"
  },
  {
    "text": "about the conceptual differences between remote procedure calls and HT PAP is Mecca main rest it could mean pretty",
    "start": "287570",
    "end": "294650"
  },
  {
    "text": "much anything which has cent worth HCP plus Jason today so G RPC it's an",
    "start": "294650",
    "end": "301640"
  },
  {
    "text": "opinionated contract first technology if",
    "start": "301640",
    "end": "306920"
  },
  {
    "text": "we compare that to HTTP API is there more about the content that's what you think about first you want to craft your",
    "start": "306920",
    "end": "313370"
  },
  {
    "text": "JSON to look the way you want it to look you want to create user friendly URLs which people can look at and build up",
    "start": "313370",
    "end": "319940"
  },
  {
    "text": "and they can read and understand what's going on gee RPC it's a lot more opinionated and that that's the contract which matters",
    "start": "319940",
    "end": "326660"
  },
  {
    "text": "more than what gets into cross the wire and with char pcs that contract that's",
    "start": "326660",
    "end": "333560"
  },
  {
    "text": "designed for humans you saw it a bit earlier it's very easy to read and understand you can type it",
    "start": "333560",
    "end": "340010"
  },
  {
    "text": "out yourself and modify it and you can give it to someone else and they can look at what's going on if we compare",
    "start": "340010",
    "end": "345980"
  },
  {
    "text": "that with HG PAP is the content is designed for humans so you're able to",
    "start": "345980",
    "end": "350990"
  },
  {
    "text": "look at a rest call and you can see that that URL is for product number five and here is the JSON of what you want to",
    "start": "350990",
    "end": "358400"
  },
  {
    "text": "have set against their products you've got first-name equals John lastname",
    "start": "358400",
    "end": "363530"
  },
  {
    "text": "equals Smith here is his age you can read and understand that worth protobuf the with GBC like the opposite is true",
    "start": "363530",
    "end": "371410"
  },
  {
    "text": "you can't read the message but also with ACP API is if you're using a contract",
    "start": "371410",
    "end": "379340"
  },
  {
    "text": "like technology like swagger or open API those contracts like not very user",
    "start": "379340",
    "end": "387290"
  },
  {
    "text": "friendly you not able to easily read them or create them without tools you probably want to use a tool like like a",
    "start": "387290",
    "end": "395270"
  },
  {
    "text": "swagger generation tool to generate that file rather than writing it yourself so",
    "start": "395270",
    "end": "401150"
  },
  {
    "text": "I think the overall message worth remote procedure calls as the the idea behind",
    "start": "401150",
    "end": "406670"
  },
  {
    "text": "them is to hide the complexity of remote hang you should be able to invoke methods and net and have them run on a",
    "start": "406670",
    "end": "413540"
  },
  {
    "text": "completely different server with having to worry about the underlying mechanism and what's getting sent",
    "start": "413540",
    "end": "419599"
  },
  {
    "text": "meanwhile HCP api's generally if you want to invoke them you're probably creating an HTTP client you're building",
    "start": "419599",
    "end": "426330"
  },
  {
    "text": "up a URL you're serializing some JSON you're seeing that into the body then you're sending it off okay so let's look",
    "start": "426330",
    "end": "436409"
  },
  {
    "start": "434000",
    "end": "508000"
  },
  {
    "text": "at a demo of using G RPC so in Visual",
    "start": "436409",
    "end": "443580"
  },
  {
    "text": "Studio 2015 we have a new template which came with dotnet core 3 so it's AG RPC",
    "start": "443580",
    "end": "450569"
  },
  {
    "text": "service so we just type in char PC service it comes up click Next click",
    "start": "450569",
    "end": "456899"
  },
  {
    "text": "create wait a few seconds click create again so this is a basic hello world",
    "start": "456899",
    "end": "464729"
  },
  {
    "text": "application it has a single greeter service and we can send hello name to",
    "start": "464729",
    "end": "473430"
  },
  {
    "text": "there and reply with hello and that name so let's look at about at what was",
    "start": "473430",
    "end": "478649"
  },
  {
    "text": "created so we have our G RPC service",
    "start": "478649",
    "end": "485209"
  },
  {
    "text": "that doesn't work very well so we have our G RPC service over here and we've",
    "start": "485209",
    "end": "490649"
  },
  {
    "text": "got the typical things you would see with a G's an ASP Donaire core",
    "start": "490649",
    "end": "496469"
  },
  {
    "text": "application we've got to start up we've got a program CS we've got some settings we've got a couple of extra directories",
    "start": "496469",
    "end": "502289"
  },
  {
    "text": "so first one is this proto's directory none of that we have greet proto open",
    "start": "502289",
    "end": "509339"
  },
  {
    "start": "508000",
    "end": "611000"
  },
  {
    "text": "that up so this is that contract I talked about here you can see we've got our greeter service we've got to say",
    "start": "509339",
    "end": "516448"
  },
  {
    "text": "hello that takes a hello request which we can see down here and we've got hello reply",
    "start": "516449",
    "end": "522360"
  },
  {
    "text": "which take returns message so that's the name we're going to pass in and the message we're going to return and then n",
    "start": "522360",
    "end": "529949"
  },
  {
    "text": "services we've got a greatest service so this is an implementation of that greeter contract so we've got say hello",
    "start": "529949",
    "end": "539480"
  },
  {
    "text": "I've got a hello request we've got a server call context think of a server call context like an HTTP context so it",
    "start": "539480",
    "end": "547560"
  },
  {
    "text": "really just gives you a bunch of contextual information about the call which is going on and then we're",
    "start": "547560",
    "end": "554220"
  },
  {
    "text": "returning a task of hallo reply because this is just a synchronous method we're saying to us not from result when we're",
    "start": "554220",
    "end": "560280"
  },
  {
    "text": "giving it a response so something which pops out right here is these are the",
    "start": "560280",
    "end": "566190"
  },
  {
    "text": "only files we have in our application where is greater bass coming from where is hello requests coming from where is",
    "start": "566190",
    "end": "572310"
  },
  {
    "text": "hello reply so cogeneration is at the core of G RPC by using this proto file",
    "start": "572310",
    "end": "580410"
  },
  {
    "text": "and tooling we're able to generate c-sharp implementations of these types",
    "start": "580410",
    "end": "586650"
  },
  {
    "text": "so not just the request and reply but also Vaska reader base and if we",
    "start": "586650",
    "end": "592680"
  },
  {
    "text": "navigate to greet a base we can see we've got some generated code a bit",
    "start": "592680",
    "end": "599550"
  },
  {
    "text": "bigger sure",
    "start": "599550",
    "end": "602209"
  },
  {
    "start": "611000",
    "end": "665000"
  },
  {
    "text": "so this is our generated code although it's generated code I wouldn't be too afraid of it like I think there's bad",
    "start": "611420",
    "end": "617480"
  },
  {
    "text": "generated code which you need to worry about like you need to manually update some hangman you need to do some step",
    "start": "617480",
    "end": "623330"
  },
  {
    "text": "and then it gets checked under source control when it gets out of date between every one I would define this as good",
    "start": "623330",
    "end": "628550"
  },
  {
    "text": "generated code there's this generated code you don't even need to think about there is logic built into msbuild",
    "start": "628550",
    "end": "635480"
  },
  {
    "text": "that will automatically at compile time regenerate that as soon as you make any changes to your proto file so another",
    "start": "635480",
    "end": "644090"
  },
  {
    "text": "thing to notice about this is we've got dependency injection hooked up so we are integrating into asp.net core you can",
    "start": "644090",
    "end": "651500"
  },
  {
    "text": "use dependency injection you can use logging you can use a asp.net core orth",
    "start": "651500",
    "end": "657470"
  },
  {
    "text": "indication you can use middleware all that good stuff and if we look at our startup file we can see we've got",
    "start": "657470",
    "end": "666560"
  },
  {
    "start": "665000",
    "end": "761000"
  },
  {
    "text": "configure services we're just saying add G RPC and then down and endpoints in point routing",
    "start": "666560",
    "end": "673330"
  },
  {
    "text": "we've just got mapped G RPC service and we've got our implementation okay so",
    "start": "673330",
    "end": "678940"
  },
  {
    "text": "let's run this and see what happens",
    "start": "678940",
    "end": "687520"
  },
  {
    "text": "okay so we've launched our app on localhost 5001 so we can browse to that",
    "start": "691450",
    "end": "699690"
  },
  {
    "text": "and we got this message what does this say",
    "start": "699690",
    "end": "705240"
  },
  {
    "text": "communication with qi RPC endpoints must be made through a gr PC client so G RPC",
    "start": "705240",
    "end": "711490"
  },
  {
    "text": "it's not like rest where you can just browse to a URL and because you're doing a get will just return you some data and",
    "start": "711490",
    "end": "717850"
  },
  {
    "text": "you can easily debug like that jarppi see you really need to have a client so we will create a compliant right now and",
    "start": "717850",
    "end": "724510"
  },
  {
    "text": "Donette so i will add a console",
    "start": "724510",
    "end": "732550"
  },
  {
    "text": "application regular Donette core console application and I foolishly installed",
    "start": "732550",
    "end": "743500"
  },
  {
    "text": "the latest preview so I need to update some stuff so it will work I'll just",
    "start": "743500",
    "end": "750280"
  },
  {
    "text": "build this okay so there are a couple of ways I could add the client here I could",
    "start": "750280",
    "end": "757690"
  },
  {
    "text": "add some new get packages I mean I could add a reference to vet proto file the",
    "start": "757690",
    "end": "763060"
  },
  {
    "start": "761000",
    "end": "870000"
  },
  {
    "text": "way the proto fire was referenced in our project file and I agree to service as is this protobuf element so this is us",
    "start": "763060",
    "end": "769270"
  },
  {
    "text": "telling the project and then the compiler itself here is our proto file and we want to generate it at least here",
    "start": "769270",
    "end": "777820"
  },
  {
    "text": "on the server we want server generation which means we want to generate a server space class Rev and generate a concrete",
    "start": "777820",
    "end": "784810"
  },
  {
    "text": "client so we could add those NuGet packages an alternative way is an visual",
    "start": "784810",
    "end": "791830"
  },
  {
    "text": "CEO we have aired connected service so if anyone's son W see if this might look",
    "start": "791830",
    "end": "797620"
  },
  {
    "text": "a little familiar so you can come into service references and say add new G RPC",
    "start": "797620",
    "end": "803140"
  },
  {
    "text": "reference we're going to browse on disk to our proto file greet proto okay okay",
    "start": "803140",
    "end": "814710"
  },
  {
    "text": "so we're gonna there's visual Co it's going to add some new get packages and it's going to add that proto file and",
    "start": "814710",
    "end": "821140"
  },
  {
    "text": "we're done so nothing like unlike WCF when you add a",
    "start": "821140",
    "end": "826870"
  },
  {
    "text": "service reference like we're not calling off to a server and getting a soap request and then generating some code",
    "start": "826870",
    "end": "832540"
  },
  {
    "text": "then at that point all we're doing is in the client we're adding some more stuff",
    "start": "832540",
    "end": "837610"
  },
  {
    "text": "to the project file so we've got some package references and then our proto",
    "start": "837610",
    "end": "842889"
  },
  {
    "text": "file note our proto file now C is client because we're on the client now let's",
    "start": "842889",
    "end": "849819"
  },
  {
    "text": "talk about these packages so Google protobuf misses the serialization runtime serialization a protobuf GBC net",
    "start": "849819",
    "end": "859120"
  },
  {
    "text": "client this is the client implementation of T RPC and then she RPC tools this is",
    "start": "859120",
    "end": "866019"
  },
  {
    "text": "the runtime tooling and code generation okay let's write some code to call our",
    "start": "866019",
    "end": "873250"
  },
  {
    "start": "870000",
    "end": "993000"
  },
  {
    "text": "service so the first thing we'll do is we'll create a channel so you can think of channel is like a representation of",
    "start": "873250",
    "end": "880630"
  },
  {
    "text": "our connection to the G RPC server and",
    "start": "880630",
    "end": "886029"
  },
  {
    "text": "all we do is we'll type in the address of our server which was 5001 done now we",
    "start": "886029",
    "end": "895209"
  },
  {
    "text": "need to create a client using that channel and if all has gone to plan",
    "start": "895209",
    "end": "901600"
  },
  {
    "text": "we can see greeter so greeter has shown up so that wasn't a type we've ever created this isn't a type that we're",
    "start": "901600",
    "end": "908319"
  },
  {
    "text": "getting by referencing the server dll's this has been coaching rated within the",
    "start": "908319",
    "end": "913709"
  },
  {
    "text": "console application so we say greeter greet client and then we give it the",
    "start": "913709",
    "end": "920800"
  },
  {
    "text": "channel and that's it okay now we want",
    "start": "920800",
    "end": "926769"
  },
  {
    "text": "to make some calls so on client we've got a couple of couple of methods so",
    "start": "926769",
    "end": "932470"
  },
  {
    "text": "we've got say hello might be a little small for some people but we've got say hello and we have say hello async these",
    "start": "932470",
    "end": "938920"
  },
  {
    "text": "both call the same service are the same method just the difference is one's blocking one is asynchronous it's you",
    "start": "938920",
    "end": "945730"
  },
  {
    "text": "see asynchronous because blocking is bad so we've got our hello request this is",
    "start": "945730",
    "end": "951250"
  },
  {
    "text": "pretty much the exact same types that the server has taken give it a name say hello to in DC Sydney",
    "start": "951250",
    "end": "962290"
  },
  {
    "text": "get the response because it's a sink we'll wait it and because we wait it we",
    "start": "963640",
    "end": "969410"
  },
  {
    "text": "need to make this a sink",
    "start": "969410",
    "end": "973420"
  },
  {
    "text": "ok so we've now made I call let's write",
    "start": "975490",
    "end": "980870"
  },
  {
    "text": "out their response",
    "start": "980870",
    "end": "983680"
  },
  {
    "start": "993000",
    "end": "1083000"
  },
  {
    "text": "done okay so theoretically we should be finished so let's launch these two so",
    "start": "994090",
    "end": "1008880"
  },
  {
    "text": "this is the server",
    "start": "1008880",
    "end": "1012080"
  },
  {
    "text": "this is the client so yes I server",
    "start": "1021280",
    "end": "1026500"
  },
  {
    "text": "successfully started up and fingers",
    "start": "1026500",
    "end": "1033220"
  },
  {
    "text": "crossed that broke yeah",
    "start": "1033220",
    "end": "1038490"
  },
  {
    "text": "okay let's actually try compiling things I did just update the latest Visual",
    "start": "1039150",
    "end": "1049660"
  },
  {
    "text": "Studio preview which was a bad move a rookie a rookie mistake okay so that's a",
    "start": "1049660",
    "end": "1063370"
  },
  {
    "text": "theater maybe cogeneration just got a little a little funky",
    "start": "1063370",
    "end": "1069419"
  },
  {
    "text": "okay there we go so that successfully called the client to the server so we can see I'm a client we got our response",
    "start": "1083720",
    "end": "1090240"
  },
  {
    "text": "and on the server asp.net has written out some output so we can see our request has come in so we've got",
    "start": "1090240",
    "end": "1097170"
  },
  {
    "text": "requests starting HTTP to post I mean",
    "start": "1097170",
    "end": "1103920"
  },
  {
    "text": "has come into this URL so localhost 5001 then greet service URL greet is the",
    "start": "1103920",
    "end": "1110580"
  },
  {
    "text": "package that the G RPC services in greeter is the service name and then say",
    "start": "1110580",
    "end": "1116070"
  },
  {
    "text": "hello was the method name and that's just all there is to basic - yeah PC",
    "start": "1116070",
    "end": "1121919"
  },
  {
    "text": "it's very very easy to setup it's very fast and efficient and product",
    "start": "1121919",
    "end": "1127169"
  },
  {
    "text": "productive I think but like unlike a technology like WCF you're not worrying",
    "start": "1127169",
    "end": "1133410"
  },
  {
    "text": "about all these different knobs and dials for configuration G RPC in its default status let's just do protobuf",
    "start": "1133410",
    "end": "1140070"
  },
  {
    "text": "that's your choice and let's just do HTTP - and then you just go and use use",
    "start": "1140070",
    "end": "1147000"
  },
  {
    "text": "G RPC so the question was about the",
    "start": "1147000",
    "end": "1154980"
  },
  {
    "start": "1153000",
    "end": "1265000"
  },
  {
    "text": "routes so G RPC is very convention based so the routes are are required suppose",
    "start": "1154980",
    "end": "1161790"
  },
  {
    "text": "that is the format like you can modify that by changing the package name or the service name of a method name but those",
    "start": "1161790",
    "end": "1168750"
  },
  {
    "text": "three things combined that what that is what builds up the route and that's a strict requirement and for G RPC",
    "start": "1168750",
    "end": "1174450"
  },
  {
    "text": "specification you know you don't care",
    "start": "1174450",
    "end": "1180299"
  },
  {
    "text": "and if you do care then maybe Jia PC might not be the right technology for you like you might be better off doing",
    "start": "1180299",
    "end": "1186660"
  },
  {
    "text": "something like a QP API is using using NB C so let's go a bit deeper on what",
    "start": "1186660",
    "end": "1197160"
  },
  {
    "text": "we've created and Donnie core three four G RPC so like I said before Jia BC isn't",
    "start": "1197160",
    "end": "1204059"
  },
  {
    "text": "new g RPC isn't new on Donette either so we already had this technology this new",
    "start": "1204059",
    "end": "1209640"
  },
  {
    "text": "get package called G RPC course so that's already came from a cloud native computing foundation this has been",
    "start": "1209640",
    "end": "1215460"
  },
  {
    "text": "around since 2015 and it's been doing a great job there are a couple of issues with it so this",
    "start": "1215460",
    "end": "1223020"
  },
  {
    "text": "implementation it's kind of a thunder net wrapper around a native",
    "start": "1223020",
    "end": "1228600"
  },
  {
    "text": "implementation so the server and client and also the hup-two library they're",
    "start": "1228600",
    "end": "1235440"
  },
  {
    "text": "implemented and native see rather than c-sharp that has some downsides around",
    "start": "1235440",
    "end": "1240720"
  },
  {
    "text": "performance because you've got the overhead of donít interrupt and also the",
    "start": "1240720",
    "end": "1246630"
  },
  {
    "text": "native code would be faster just to do it all on one technology and also all those native binaries they're quite",
    "start": "1246630",
    "end": "1252900"
  },
  {
    "text": "large because it's multiplied by all the different target service package has",
    "start": "1252900",
    "end": "1258330"
  },
  {
    "text": "this is a very big package it's a big boy it's about 50 megabytes in size",
    "start": "1258330",
    "end": "1264440"
  },
  {
    "text": "it's what have we introduced some dhaniya core threes so we've got GI PC asp net core so that's our server",
    "start": "1265220",
    "end": "1271380"
  },
  {
    "text": "implementation it sits on top of Kestrel and it uses Kestrel for its HTTP Susac",
    "start": "1271380",
    "end": "1277560"
  },
  {
    "text": "and it integrates with asp.net core so like I said dependency injection routing",
    "start": "1277560",
    "end": "1284580"
  },
  {
    "text": "or not routing but it uses that for out'n configuration authentication",
    "start": "1284580",
    "end": "1291990"
  },
  {
    "text": "authorization all of that stuff you can just reuse with a speed net core and you can use it side by side with other",
    "start": "1291990",
    "end": "1298020"
  },
  {
    "text": "technologies so you can have a MVC app alongside of a ER PC app maybe on the",
    "start": "1298020",
    "end": "1306870"
  },
  {
    "text": "same port may be on different different ports our client is G RBC doneto client",
    "start": "1306870",
    "end": "1314750"
  },
  {
    "text": "it's also a fully Donette implementation and it uses HTTP 2 via HP client and",
    "start": "1314750",
    "end": "1322230"
  },
  {
    "text": "because it uses HTTP client you can use existing HTTP client technologies like",
    "start": "1322230",
    "end": "1327600"
  },
  {
    "text": "delegating handlers acts almost as like outgoing middleware for your G RPC calls",
    "start": "1327600",
    "end": "1334880"
  },
  {
    "text": "now what we've done is we've taken the common API of a PC core and we've split",
    "start": "1335360",
    "end": "1342360"
  },
  {
    "text": "it off into its own package so what api's are these these are things like that server call context",
    "start": "1342360",
    "end": "1350290"
  },
  {
    "text": "the base type of a channel the base type for the client mr. metadata API sand",
    "start": "1350290",
    "end": "1356890"
  },
  {
    "text": "there's some authorization api's this is all good stuff so one of our goals of",
    "start": "1356890",
    "end": "1362260"
  },
  {
    "text": "our new implementation is to be compatible with qi RPC core and we've achieved that by splitting it off into",
    "start": "1362260",
    "end": "1368530"
  },
  {
    "text": "its own package and then having it reference by all our implementations so",
    "start": "1368530",
    "end": "1374440"
  },
  {
    "text": "what does that mean it means if you're in da near call and you can just use a PC core you can use these new GC",
    "start": "1374440",
    "end": "1382480"
  },
  {
    "text": "implementations and you don't really need to worry about G RPC core or its native implementation but if you are",
    "start": "1382480",
    "end": "1389440"
  },
  {
    "text": "using qi RPC core today and you want to move to these new implementations they're very compatible like pretty much",
    "start": "1389440",
    "end": "1396490"
  },
  {
    "text": "all the changes you'll need to make will be in the application startup code on the server and how you go about creating",
    "start": "1396490",
    "end": "1403180"
  },
  {
    "text": "that channel on the client so let's talk",
    "start": "1403180",
    "end": "1410530"
  },
  {
    "start": "1409000",
    "end": "1471000"
  },
  {
    "text": "about why you might want to use G RPC so I think one of the keep key features as",
    "start": "1410530",
    "end": "1415780"
  },
  {
    "text": "a performance so the size of G RPC request should pretty much always be",
    "start": "1415780",
    "end": "1421780"
  },
  {
    "text": "smaller than an equivalent HTP request using JSON and that's done via HTTP 2 so",
    "start": "1421780",
    "end": "1429550"
  },
  {
    "text": "it's a binary protocol it uses binary framing and also it has header compression so all the plain text ACP",
    "start": "1429550",
    "end": "1437740"
  },
  {
    "text": "headers which gets sent today worth 1 point 1 and heb - those can be",
    "start": "1437740",
    "end": "1443320"
  },
  {
    "text": "compressed and to a much smaller size and then there's the protobuf messages",
    "start": "1443320",
    "end": "1449710"
  },
  {
    "text": "so bro protobuf it's a binary format and it's like I said before it's not self",
    "start": "1449710",
    "end": "1456250"
  },
  {
    "text": "descriptive so you don't have a lot of repeating information getting sent like property names aren't getting sent with",
    "start": "1456250",
    "end": "1462010"
  },
  {
    "text": "every request that information is recorded once in the contract and then by being able to share of a contract you",
    "start": "1462010",
    "end": "1469180"
  },
  {
    "text": "don't need to repeat that all the time so let's imagine some JSON with some equivalent protobuf so we've got some",
    "start": "1469180",
    "end": "1476740"
  },
  {
    "start": "1471000",
    "end": "1513000"
  },
  {
    "text": "Jason on the Left we've got an equivalent protobuf contract on the right",
    "start": "1476740",
    "end": "1482100"
  },
  {
    "text": "but these look about the same size but the contract isn't what's getting sent what's getting sent there's some very",
    "start": "1482100",
    "end": "1488309"
  },
  {
    "text": "small and efficient binary so this is a",
    "start": "1488309",
    "end": "1495270"
  },
  {
    "text": "comparison that someone I'm a communities of Jason verse some equivalent protobuf and protobuf is",
    "start": "1495270",
    "end": "1502590"
  },
  {
    "text": "between a quarter and a third the size of Jason which is a significant saving",
    "start": "1502590",
    "end": "1510080"
  },
  {
    "start": "1513000",
    "end": "1566000"
  },
  {
    "text": "so another way jiya BC gets good performance is via",
    "start": "1513380",
    "end": "1518549"
  },
  {
    "text": "HTTP to Modi flex zone so HTTP 1.1 you tend to have a single TCP connection and",
    "start": "1518549",
    "end": "1525870"
  },
  {
    "text": "a limited number of requests can go across at at the same time and even when you do have multiple requests again",
    "start": "1525870",
    "end": "1531900"
  },
  {
    "text": "through an HB through a TCP connection you can get into a situation where one",
    "start": "1531900",
    "end": "1538320"
  },
  {
    "text": "request box another so if one request is particularly slow it will hold up all",
    "start": "1538320",
    "end": "1543330"
  },
  {
    "text": "the requests behind it and they can't complete until it completes so this is called head-of-line blocking and HTTP 2",
    "start": "1543330",
    "end": "1550470"
  },
  {
    "text": "for the most part solves it so I've got a little Asterix there it doesn't completely solve every single use case",
    "start": "1550470",
    "end": "1557190"
  },
  {
    "text": "and makes it considerably better but HTTP 3 is a perspective technology which",
    "start": "1557190",
    "end": "1563429"
  },
  {
    "text": "may completely solve head of line blocking so to give an example of hgp",
    "start": "1563429",
    "end": "1568740"
  },
  {
    "start": "1566000",
    "end": "1597000"
  },
  {
    "text": "1.1 versus - oh this is an image split",
    "start": "1568740",
    "end": "1573809"
  },
  {
    "text": "up into 100 small images and you can see with 1.1 it takes a while to download",
    "start": "1573809",
    "end": "1579929"
  },
  {
    "text": "that's because only so many requests can be can be made at once well - OH",
    "start": "1579929",
    "end": "1586289"
  },
  {
    "text": "pretty much the client in this case as a browser can just request every single",
    "start": "1586289",
    "end": "1592230"
  },
  {
    "text": "one mentor once Mayall quickly download",
    "start": "1592230",
    "end": "1596059"
  },
  {
    "start": "1597000",
    "end": "1630000"
  },
  {
    "text": "so cogeneration cogeneration is really at the core of qi RPC and their",
    "start": "1598450",
    "end": "1604960"
  },
  {
    "text": "cogeneration is driven by the protobuf and face definition language services",
    "start": "1604960",
    "end": "1610059"
  },
  {
    "text": "this language neutral contract format which you can easily read edit exchange",
    "start": "1610059",
    "end": "1615309"
  },
  {
    "text": "with other people so we start off with this contract file in this case we've",
    "start": "1615309",
    "end": "1621669"
  },
  {
    "text": "got a request and we've got an event in this case this is a streaming call I'll",
    "start": "1621669",
    "end": "1626950"
  },
  {
    "text": "talk about streaming pretty soon and what we do at least and our net is we",
    "start": "1626950",
    "end": "1633549"
  },
  {
    "start": "1630000",
    "end": "1678000"
  },
  {
    "text": "reference some new get packages so we talked about Google Doc protobuf that's the runtime serialization technology",
    "start": "1633549",
    "end": "1640450"
  },
  {
    "text": "we've got your PC tools so that's the tool length that will recognize the",
    "start": "1640450",
    "end": "1646899"
  },
  {
    "text": "protobuf file and your project and do the cogeneration and then we have the",
    "start": "1646899",
    "end": "1652779"
  },
  {
    "text": "asp net core server so that's the server implementation and then we have this",
    "start": "1652779",
    "end": "1658720"
  },
  {
    "text": "protobuf reference and that's referencing the protobuf file on disk and then what type of cogeneration you",
    "start": "1658720",
    "end": "1667179"
  },
  {
    "text": "want so you can say server you can say client F for some reason you want to both call and receive in the same",
    "start": "1667179",
    "end": "1674049"
  },
  {
    "text": "project you can say both as well so the",
    "start": "1674049",
    "end": "1679809"
  },
  {
    "start": "1678000",
    "end": "1710000"
  },
  {
    "text": "code which is generated if you're on the server this is the server space class by",
    "start": "1679809",
    "end": "1685419"
  },
  {
    "text": "default it will have virtual methods on it and those virtual methods will just",
    "start": "1685419",
    "end": "1691299"
  },
  {
    "text": "throw a not implemented error so if someone if you had a proto file and you",
    "start": "1691299",
    "end": "1697509"
  },
  {
    "text": "only wanted to implement one out of multiple services you could do that and then if someone tries to call other",
    "start": "1697509",
    "end": "1703869"
  },
  {
    "text": "services it will just throw a not implemented error back to the client and",
    "start": "1703869",
    "end": "1710580"
  },
  {
    "start": "1710000",
    "end": "1765000"
  },
  {
    "text": "then this is the strongly typed G RPC client so this will take the request and",
    "start": "1710580",
    "end": "1717279"
  },
  {
    "text": "it will return a streaming object this is strongly typed it will also take a",
    "start": "1717279",
    "end": "1724059"
  },
  {
    "text": "client channel based on the constructor so that represents the connection a channel can be used with multiple",
    "start": "1724059",
    "end": "1730119"
  },
  {
    "text": "clients so you can create one channel and then you can create a topics client and agree to client all of those",
    "start": "1730119",
    "end": "1736090"
  },
  {
    "text": "can use a single channel so it's important to note that the meta data",
    "start": "1736090",
    "end": "1742980"
  },
  {
    "text": "which I haven't shown in these code examples there's also code generated so that metadata is information about the",
    "start": "1742980",
    "end": "1748809"
  },
  {
    "text": "calls you can think of that as like instructions about how to serialize and",
    "start": "1748809",
    "end": "1753940"
  },
  {
    "text": "deserialize instructions about the URL router needs to go and some other other",
    "start": "1753940",
    "end": "1760720"
  },
  {
    "text": "metadata so another key feature Jia BC",
    "start": "1760720",
    "end": "1768669"
  },
  {
    "start": "1765000",
    "end": "1831000"
  },
  {
    "text": "is supported and every language so this isn't a thing which marks off is made up",
    "start": "1768669",
    "end": "1774370"
  },
  {
    "text": "this is an open standard which we are contributing to so pretty much any",
    "start": "1774370",
    "end": "1779559"
  },
  {
    "text": "implementation any modern language in common use today has CIBC library and",
    "start": "1779559",
    "end": "1785320"
  },
  {
    "text": "all of these G RPC libraries are interoperable with one another so there",
    "start": "1785320",
    "end": "1790389"
  },
  {
    "text": "is a integration suite and some Interop tests and every client and server",
    "start": "1790389",
    "end": "1796600"
  },
  {
    "text": "including ours will strive to pass all of those and then those are continuously tested so there's a integration test",
    "start": "1796600",
    "end": "1802990"
  },
  {
    "text": "server which is run by the CN CF and as requests well as updates happen to",
    "start": "1802990",
    "end": "1809440"
  },
  {
    "text": "clients and servers will continuously run every client against every server every possible permutation which as you",
    "start": "1809440",
    "end": "1816639"
  },
  {
    "text": "can imagine quickly ends up to thousands and thousands of tests and that's done pretty much every chicken so G RPC is",
    "start": "1816639",
    "end": "1825309"
  },
  {
    "text": "highly compatible and it's usable pretty much everywhere so streaming I think",
    "start": "1825309",
    "end": "1833649"
  },
  {
    "start": "1831000",
    "end": "1950000"
  },
  {
    "text": "streaming is one of the probably the most interesting features of G RPC so",
    "start": "1833649",
    "end": "1839830"
  },
  {
    "text": "ACB - has excellent streaming support and Qi RPC uses that streaming support",
    "start": "1839830",
    "end": "1845529"
  },
  {
    "text": "to enable string of messages so there are actually a number of different kinds",
    "start": "1845529",
    "end": "1850539"
  },
  {
    "text": "of Qi RPC methods we've kind of already seen a couple of them so we've got unary",
    "start": "1850539",
    "end": "1855880"
  },
  {
    "text": "methods unary method is like what you would have in rest you've got a single request and a single response",
    "start": "1855880",
    "end": "1862090"
  },
  {
    "text": "it's about greater service I showed you before that had a sing Griet requests and it had a single greet",
    "start": "1862090",
    "end": "1868130"
  },
  {
    "text": "reply we've got service streaming so",
    "start": "1868130",
    "end": "1874460"
  },
  {
    "text": "server streaming that's initiated by the client sending request then the server returning a stream of updates so you",
    "start": "1874460",
    "end": "1881120"
  },
  {
    "text": "could imagine with a GRDC call you could subscribe to weather updates so you",
    "start": "1881120",
    "end": "1887660"
  },
  {
    "text": "could come across to a server you could say I'm a request here is my location and then the server over like pretty an",
    "start": "1887660",
    "end": "1896480"
  },
  {
    "text": "arbitrary long time can just stream down request so with one call you can avoid polling and all that kind of thing you",
    "start": "1896480",
    "end": "1903260"
  },
  {
    "text": "can do it efficiently and quickly this client streaming which as you can",
    "start": "1903260",
    "end": "1908810"
  },
  {
    "text": "imagine is pretty much the opposite so an example of this might be you want to upload a lot of data so maybe you stream",
    "start": "1908810",
    "end": "1916070"
  },
  {
    "text": "data up to a server and then when you're complete so the client will indicate to the server hey I'm done streaming the",
    "start": "1916070",
    "end": "1923030"
  },
  {
    "text": "server can then do some work and then it can return a response and bi-directional",
    "start": "1923030",
    "end": "1928970"
  },
  {
    "text": "streaming is pretty much what you would expect streaming in both directions an example of this might be a chat room so",
    "start": "1928970",
    "end": "1935600"
  },
  {
    "text": "you can say any messages you're typing will get sent to the server and their",
    "start": "1935600",
    "end": "1941810"
  },
  {
    "text": "own individual char PC messages and then all the other messages on the server can get streamed back down to you so I'll do",
    "start": "1941810",
    "end": "1951560"
  },
  {
    "start": "1950000",
    "end": "2086000"
  },
  {
    "text": "a demo of streaming very soon but before that let's go a bit deeper on how",
    "start": "1951560",
    "end": "1957260"
  },
  {
    "text": "exactly G RPC works on the wire so imagine HTTP 1.1 we've got a text",
    "start": "1957260",
    "end": "1965690"
  },
  {
    "text": "request which starts off with some ticks base headers so we've got posts which is",
    "start": "1965690",
    "end": "1971810"
  },
  {
    "text": "a method we've got a URL blah blah blah we've also got the request body so this",
    "start": "1971810",
    "end": "1977600"
  },
  {
    "text": "can be any content in this case is just some awesome text it's hello world and",
    "start": "1977600",
    "end": "1983060"
  },
  {
    "text": "JSON how does that map to HTTP 2 so they",
    "start": "1983060",
    "end": "1988460"
  },
  {
    "text": "should be - it's a binary protocol and it's built around the idea of framing so",
    "start": "1988460",
    "end": "1994250"
  },
  {
    "text": "we've got a headers frame as you can imagine the headers go into the headers frame and then we've got a data frame so the",
    "start": "1994250",
    "end": "2002290"
  },
  {
    "text": "content the body goes into the data let's look at a G RPC request",
    "start": "2002290",
    "end": "2010090"
  },
  {
    "text": "now although Jia PC you don't get control over what gets sent like you",
    "start": "2010090",
    "end": "2016640"
  },
  {
    "text": "don't get control over the URL and pretty much every requests will always be a post and it's an RPC technology",
    "start": "2016640",
    "end": "2023660"
  },
  {
    "text": "like WCF unlike w CF g RPC doesn't",
    "start": "2023660",
    "end": "2029300"
  },
  {
    "text": "completely ignore the fact that it's living in an HTTP 2 environment it's not like WCF where you have a single",
    "start": "2029300",
    "end": "2035960"
  },
  {
    "text": "endpoint and you're posting an envelope of xml to the server and then the server's unwrapping their job easier",
    "start": "2035960",
    "end": "2042770"
  },
  {
    "text": "still uses hqb to HQ p concepts so if we want to send additional metadata with",
    "start": "2042770",
    "end": "2047810"
  },
  {
    "text": "our request we can send those as headers so in this case you can see we're doing a post to that URL so we've got our",
    "start": "2047810",
    "end": "2055600"
  },
  {
    "text": "greet which is a service named greeter which is we've got greet which is the",
    "start": "2055600",
    "end": "2060888"
  },
  {
    "text": "package name greed of a service name and say hello which is Method and then we've got one world",
    "start": "2060889",
    "end": "2066730"
  },
  {
    "text": "so again headers under the head of Supreme One world and to the data frame",
    "start": "2066730",
    "end": "2072050"
  },
  {
    "text": "there's only the one because the property name isn't sent because as a",
    "start": "2072050",
    "end": "2077240"
  },
  {
    "text": "self describing format protobuf and obviously like I'm a real world this would be binary I'm just giving you a textual representation of what it would",
    "start": "2077240",
    "end": "2084350"
  },
  {
    "text": "look like it's like a responses so this is an HP one response as you expect with",
    "start": "2084350",
    "end": "2090440"
  },
  {
    "start": "2086000",
    "end": "2247000"
  },
  {
    "text": "those stairs code was a message again we've got hitters under headers frame their body and to the data frame so this",
    "start": "2090440",
    "end": "2099440"
  },
  {
    "text": "is the G RPC response so this is where it starts diverging at all from what you",
    "start": "2099440",
    "end": "2104600"
  },
  {
    "text": "would expect so the GI BC response headers they go",
    "start": "2104600",
    "end": "2111020"
  },
  {
    "text": "into a hitter's frame the body the content goes into a data frame but",
    "start": "2111020",
    "end": "2118550"
  },
  {
    "text": "what's this Qi RPC status so I don't i if one of it one of the issues with one",
    "start": "2118550",
    "end": "2124070"
  },
  {
    "text": "point one is once you send through request headers there's no additional ways to easily see in it additional",
    "start": "2124070",
    "end": "2130070"
  },
  {
    "text": "metadata like if you've ever want to send like how long did the server request",
    "start": "2130070",
    "end": "2135170"
  },
  {
    "text": "take and send that as a header you haven't been able to do that at one point one because the headers have",
    "start": "2135170",
    "end": "2140810"
  },
  {
    "text": "already been sent and you can't easily add that to the body like you can like maybe encode the body in such a way that",
    "start": "2140810",
    "end": "2147980"
  },
  {
    "text": "you can add metadata at the end but it is an automatic so what a CB 2 has as it",
    "start": "2147980",
    "end": "2155000"
  },
  {
    "text": "has just another headers frame so this is known as trailing headers also known",
    "start": "2155000",
    "end": "2160250"
  },
  {
    "text": "as trailers and with HTTP 2 you can",
    "start": "2160250",
    "end": "2166369"
  },
  {
    "text": "really think of the request and a response not as a single request like",
    "start": "2166369",
    "end": "2171770"
  },
  {
    "text": "you would worth one point one where you have headers and a body and you send that and then you get a response you can",
    "start": "2171770",
    "end": "2176900"
  },
  {
    "text": "think of a CB 2 as a stream from the client to the server of frames these can",
    "start": "2176900",
    "end": "2183320"
  },
  {
    "text": "be multiple headers frames multiple data frames and then the opposite coming back so in this case because it's a unary",
    "start": "2183320",
    "end": "2190640"
  },
  {
    "text": "request we've got one here Doe one data I mean another header to say that it's exceeded so the question you might ask",
    "start": "2190640",
    "end": "2198950"
  },
  {
    "text": "is why do we need two successes because we've already got 200 okay that's sent",
    "start": "2198950",
    "end": "2205040"
  },
  {
    "text": "with the headers why do we need a second status and we need it because of streaming so like you can have multiple",
    "start": "2205040",
    "end": "2210859"
  },
  {
    "text": "header frames you can have multiple data frames so if we were streaming from the",
    "start": "2210859",
    "end": "2216320"
  },
  {
    "text": "server to the client we can just send hello world and one data frame maybe we need to do some more processing we wait",
    "start": "2216320",
    "end": "2222770"
  },
  {
    "text": "a couple of seconds then we send another reply and another data frame and another one and then that last hit a frame",
    "start": "2222770",
    "end": "2230960"
  },
  {
    "text": "that's giving the overall status of our call because those headers they were",
    "start": "2230960",
    "end": "2236840"
  },
  {
    "text": "sent to the client in the very first message we need to send a status at the very end to say hey this overall",
    "start": "2236840",
    "end": "2243619"
  },
  {
    "text": "streaming had succeeded okay so let's go",
    "start": "2243619",
    "end": "2250460"
  },
  {
    "start": "2247000",
    "end": "2645000"
  },
  {
    "text": "and extend our basic hello greeter to do some streaming so if this is our unary",
    "start": "2250460",
    "end": "2259820"
  },
  {
    "text": "call it takes one request one reply let's do some service streaming",
    "start": "2259820",
    "end": "2266180"
  },
  {
    "text": "so they say say hello streaming we take one request and to make it streaming we",
    "start": "2266180",
    "end": "2273600"
  },
  {
    "text": "just add stream that's all you do that's it",
    "start": "2273600",
    "end": "2278870"
  },
  {
    "text": "now if we wanted to do bi-directional streaming we just said stream over here",
    "start": "2278870",
    "end": "2285060"
  },
  {
    "text": "and if we wanted to do client streaming we get rid of this one let's just leave",
    "start": "2285060",
    "end": "2290550"
  },
  {
    "text": "it at service streaming save that now we need to implement it on the server",
    "start": "2290550",
    "end": "2297800"
  },
  {
    "text": "now if cogeneration has done its job we've got hello stream in say hello",
    "start": "2297800",
    "end": "2303960"
  },
  {
    "text": "stream in so there's a couple of",
    "start": "2303960",
    "end": "2310320"
  },
  {
    "text": "differences here they're still taking a hello request but there's no more",
    "start": "2310320",
    "end": "2316580"
  },
  {
    "text": "message getting returned with the task and also we've got this new parameter",
    "start": "2316580",
    "end": "2323040"
  },
  {
    "text": "called service streamwriter hello reply so the stream Rider is how we return the",
    "start": "2323040",
    "end": "2328350"
  },
  {
    "text": "messages from the server so first let's make it a sync so",
    "start": "2328350",
    "end": "2337440"
  },
  {
    "text": "response stream has write async this is the method we'll be using to return messages say hello reply message",
    "start": "2337440",
    "end": "2347310"
  },
  {
    "text": "actually let's this had a for loop so 10",
    "start": "2347310",
    "end": "2353760"
  },
  {
    "text": "times",
    "start": "2353760",
    "end": "2356000"
  },
  {
    "text": "or wait this",
    "start": "2361539",
    "end": "2364679"
  },
  {
    "text": "say hello get that request get the name",
    "start": "2374150",
    "end": "2382549"
  },
  {
    "text": "from it and so we can see what's going on we'll get the index and that looks",
    "start": "2382549",
    "end": "2392599"
  },
  {
    "text": "like it so that's it so that's how you do service streaming on the server all you're doing is you've got your messages",
    "start": "2392599",
    "end": "2398749"
  },
  {
    "text": "you've got your response stream you just write two response stream and you're done now on the client now usually if",
    "start": "2398749",
    "end": "2409269"
  },
  {
    "text": "you've got two different proto files you need to make the change in both when we reference this Greek proto file we just",
    "start": "2409269",
    "end": "2416960"
  },
  {
    "text": "added a link to it so it's actually referencing the same location although",
    "start": "2416960",
    "end": "2422089"
  },
  {
    "text": "sometimes code generation doesn't automatically run and other projects when the linker updates oops I need to",
    "start": "2422089",
    "end": "2430720"
  },
  {
    "text": "stop these guys let's try that again",
    "start": "2430779",
    "end": "2439989"
  },
  {
    "text": "okay so that built it's coming out are",
    "start": "2439989",
    "end": "2447170"
  },
  {
    "text": "you nor equal so client let's go say",
    "start": "2447170",
    "end": "2454369"
  },
  {
    "text": "hello streaming we need to give it a request",
    "start": "2454369",
    "end": "2459700"
  },
  {
    "text": "and because we're returning multiple responses we're no longer like we can no longer just or wait like we did before",
    "start": "2471400",
    "end": "2477549"
  },
  {
    "text": "to get a response now server streaming calls and in fact all streaming calls will just return an object which will",
    "start": "2477549",
    "end": "2485170"
  },
  {
    "text": "represent the overall call a man on that call we have a response stream so a",
    "start": "2485170",
    "end": "2492160"
  },
  {
    "text": "spawn stream is what we'll use to get the messages coming from the server back to the client and read them so we've got",
    "start": "2492160",
    "end": "2498430"
  },
  {
    "text": "some methods on this so we can say move next and we can wait there and then we can access it from current that's that's",
    "start": "2498430",
    "end": "2505990"
  },
  {
    "text": "usable but what we've done and a speed on in core as we've added an async",
    "start": "2505990",
    "end": "2512140"
  },
  {
    "text": "iterative method called read all async and using that we can use a fancy new",
    "start": "2512140",
    "end": "2519089"
  },
  {
    "text": "asynchronous for each",
    "start": "2519089",
    "end": "2522539"
  },
  {
    "text": "console.writeline and we'll just write out our message and I think we're done",
    "start": "2528080",
    "end": "2537530"
  },
  {
    "text": "so let's start our server again",
    "start": "2537530",
    "end": "2545870"
  },
  {
    "text": "let's start our client and let's see what happens okay a worked I think it",
    "start": "2551820",
    "end": "2557490"
  },
  {
    "text": "worked really quickly and that's because ERP C is really fast and we didn't add a delay so let's add a delay over here so",
    "start": "2557490",
    "end": "2566220"
  },
  {
    "text": "we can see what's going on a bit better let's wait one and a half seconds it",
    "start": "2566220",
    "end": "2573900"
  },
  {
    "text": "seems like a good amount - away",
    "start": "2573900",
    "end": "2577069"
  },
  {
    "text": "okay so we've just started streaming we can see here that our request has been",
    "start": "2588190",
    "end": "2594010"
  },
  {
    "text": "received so we can see a speed on it is processing it our server is streaming",
    "start": "2594010",
    "end": "2600130"
  },
  {
    "text": "back messages we're saying hello hello Sydney and now our server has finished and that",
    "start": "2600130",
    "end": "2606670"
  },
  {
    "text": "took 15 seconds because 10 messages times 1 1/2 seconds we got 15 seconds and that's so that's all there is really",
    "start": "2606670",
    "end": "2613270"
  },
  {
    "text": "to streaming I get so simple so you can use that to have not just service",
    "start": "2613270",
    "end": "2618400"
  },
  {
    "text": "streaming you can have bi-directional streaming so G RPC it's really great at real-time services you can forget about",
    "start": "2618400",
    "end": "2625240"
  },
  {
    "text": "polling or having to like wait and have someone call you you can just initiate a",
    "start": "2625240",
    "end": "2631960"
  },
  {
    "text": "G RPC call to the server and that connection can just stay open I mean as soon as the server has data it",
    "start": "2631960",
    "end": "2638020"
  },
  {
    "text": "can just push it down to you and you can process it ok I've said a lot of great",
    "start": "2638020",
    "end": "2649119"
  },
  {
    "start": "2645000",
    "end": "2824000"
  },
  {
    "text": "things about G RPC why why aren't we using it everywhere why don't we just",
    "start": "2649119",
    "end": "2654640"
  },
  {
    "text": "throw that Jason away it's awful I hate it what about rest rest it's as old as",
    "start": "2654640",
    "end": "2662680"
  },
  {
    "text": "it's it's um apart so it's G ABC all the things so well browsers have really good",
    "start": "2662680",
    "end": "2670029"
  },
  {
    "text": "hqb to support chances are if you've got a browser open and you're browsing to",
    "start": "2670029",
    "end": "2675369"
  },
  {
    "text": "Google or Facebook or Stack Overflow or all these different places you're",
    "start": "2675369",
    "end": "2682089"
  },
  {
    "text": "probably already using HTTP 2 the problem is as browser API is they",
    "start": "2682089",
    "end": "2688420"
  },
  {
    "text": "haven't caught up so XML HTTP request fetch they support 1.1 but they don't",
    "start": "2688420",
    "end": "2694750"
  },
  {
    "text": "support they don't provide access to those low-level frames that we've added an HTTP to and because of that some",
    "start": "2694750",
    "end": "2701559"
  },
  {
    "text": "possible to write a completely compatible gob C client and the browser so if there",
    "start": "2701559",
    "end": "2709510"
  },
  {
    "text": "is a workaround this sort of like a kind of side by side specification called Qi",
    "start": "2709510",
    "end": "2715180"
  },
  {
    "text": "RPC web and it provides limited support for calling shabby C services from the",
    "start": "2715180",
    "end": "2720640"
  },
  {
    "text": "browser so this is just like a diagram of how",
    "start": "2720640",
    "end": "2727130"
  },
  {
    "text": "you can potentially use it there's a lots of different ways of using Chi RPC web where we can see on the Left we have",
    "start": "2727130",
    "end": "2732800"
  },
  {
    "text": "our browser and we've got an app which is using to your PC web then that's talking to a proxy that proxy will take",
    "start": "2732800",
    "end": "2741590"
  },
  {
    "text": "the GI PC requests and will then transform them and call them as HTTP to",
    "start": "2741590",
    "end": "2748160"
  },
  {
    "text": "requests onto a G RPC server the GI PC server can do stuff in a capacitor back to a proxy and proxy can translate back",
    "start": "2748160",
    "end": "2755900"
  },
  {
    "text": "into G RPC web this works for the most part there are some limitations with it",
    "start": "2755900",
    "end": "2761890"
  },
  {
    "text": "so you can't do client streaming you can't do bi-directional streaming but",
    "start": "2761890",
    "end": "2768320"
  },
  {
    "text": "unary calls and service streaming calls they both work you're probably thinking",
    "start": "2768320",
    "end": "2773390"
  },
  {
    "text": "I heard James I've followed your plan we have blazing our blazer is dotnet and",
    "start": "2773390",
    "end": "2779690"
  },
  {
    "text": "the in the browser and dotnet supports HTTP - unfortunately black blazer it",
    "start": "2779690",
    "end": "2786710"
  },
  {
    "text": "still lives and the like the browser sandbox and it's only able to use those",
    "start": "2786710",
    "end": "2793220"
  },
  {
    "text": "api's that have 1.1 like if you're a node you can talk full tree RPC but within like the JavaScript browser",
    "start": "2793220",
    "end": "2800690"
  },
  {
    "text": "environment you're really limited to hqp limited to G a B C - web currently our",
    "start": "2800690",
    "end": "2808880"
  },
  {
    "text": "implementation doesn't support HTTP web like you use a proxy one of the things",
    "start": "2808880",
    "end": "2813980"
  },
  {
    "text": "we'll explore and the coming year is like is it something that we should",
    "start": "2813980",
    "end": "2819050"
  },
  {
    "text": "implement properly if you've got feedback on that please let me know and",
    "start": "2819050",
    "end": "2825140"
  },
  {
    "text": "it's not human readable so H GB - and",
    "start": "2825140",
    "end": "2830330"
  },
  {
    "text": "protobuf they're binary protocols you can't read them both without tooling and",
    "start": "2830330",
    "end": "2837710"
  },
  {
    "text": "also you need to have the contract so you need to have a contract to be able to translate those numbers and to",
    "start": "2837710",
    "end": "2842750"
  },
  {
    "text": "property types and actually say what the property type value is is a destroyer",
    "start": "2842750",
    "end": "2847910"
  },
  {
    "text": "assassin integer so you need additional tools to debug calls so you can just",
    "start": "2847910",
    "end": "2854780"
  },
  {
    "text": "browse or something and a browser like you can with rest and get a response there are a",
    "start": "2854780",
    "end": "2860900"
  },
  {
    "text": "couple of tools I would recommend one is bloom RPC so this is like an electron",
    "start": "2860900",
    "end": "2867470"
  },
  {
    "text": "app and using it you can load up a proto file ad hoc you type in the address then",
    "start": "2867470",
    "end": "2874250"
  },
  {
    "text": "you can just start making calls if you have familiar with WCF like there's a",
    "start": "2874250",
    "end": "2879320"
  },
  {
    "text": "WCF test client where you can point at a proxy and start doing stuff and this is kind of similar and if you really need",
    "start": "2879320",
    "end": "2890690"
  },
  {
    "text": "to go low low level and debug the incoming requests in response Wireshark is an option Wireshark isn't",
    "start": "2890690",
    "end": "2898310"
  },
  {
    "text": "easy to use it's a power tool I've used it a lot but I think if you've got G RPC",
    "start": "2898310",
    "end": "2904970"
  },
  {
    "text": "services and they're working like theoretically this isn't something you should ever need to worry about because",
    "start": "2904970",
    "end": "2910400"
  },
  {
    "text": "the client and server will just take care of it for you so although Wireshark is a power tool it",
    "start": "2910400",
    "end": "2915890"
  },
  {
    "text": "does have some knowledge of G RPC so we can see highlighted and read there it recognizes that this request on this",
    "start": "2915890",
    "end": "2922190"
  },
  {
    "text": "line was a G RPC request and it's provided some information to us about it",
    "start": "2922190",
    "end": "2927620"
  },
  {
    "text": "so you can see they're in quite small text there's a headers frame there's a data frame him it's another hitter's",
    "start": "2927620",
    "end": "2933200"
  },
  {
    "text": "frame so that indicates to us that this is a G RPC response I mean it's showing a bit of information",
    "start": "2933200",
    "end": "2939050"
  },
  {
    "text": "about the protobuf message and it's a lot more useful than if you compare it",
    "start": "2939050",
    "end": "2945140"
  },
  {
    "text": "to a binary so the binary is down there I'm a very bottom that's the highlighted blue stuff really it's a bunch of bunch of gibberish and",
    "start": "2945140",
    "end": "2952010"
  },
  {
    "text": "the only thing which really makes any sense is there's some utf-8 ticks which shows up as hello world so that's all I",
    "start": "2952010",
    "end": "2962960"
  },
  {
    "start": "2960000",
    "end": "3065000"
  },
  {
    "text": "have for you today er PC is out on da near court today you can use it there's a template with Shep",
    "start": "2962960",
    "end": "2970550"
  },
  {
    "text": "swift on air core 300 which I use that's a good place to get started there's also a great tutorial that tutorial will",
    "start": "2970550",
    "end": "2976910"
  },
  {
    "text": "cover both creating that service and visual studio or vs code and then",
    "start": "2976910",
    "end": "2984650"
  },
  {
    "text": "creating the template there's a lot of great documentation on dr. Marek's Ofcom and there's a lot",
    "start": "2984650",
    "end": "2991790"
  },
  {
    "text": "on there which I haven't covered today so gr BC and using it with orth indication does it work the short answer",
    "start": "2991790",
    "end": "2998510"
  },
  {
    "text": "is yes it does logging in Diagnostics how you how can you log what's happening",
    "start": "2998510",
    "end": "3004450"
  },
  {
    "text": "on your client and server we have integration with HTTP client factory so",
    "start": "3004450",
    "end": "3009970"
  },
  {
    "text": "if you want to centrally configure your client using di you can do that and then",
    "start": "3009970",
    "end": "3015510"
  },
  {
    "text": "then you can automatically inject it into your services or any other place",
    "start": "3015510",
    "end": "3020680"
  },
  {
    "text": "who are using di we've also partnered with some people in the community to",
    "start": "3020680",
    "end": "3026050"
  },
  {
    "text": "write a guide for migrating to WCF migrating to GE PC for WCF developers",
    "start": "3026050",
    "end": "3034300"
  },
  {
    "text": "like how does G RPC compared with WCF how they the same how are they different what's missing from G IPC but you might",
    "start": "3034300",
    "end": "3041230"
  },
  {
    "text": "need to think about and that's also available on dr. Marek's Ofcom and",
    "start": "3041230",
    "end": "3047550"
  },
  {
    "text": "that's it I think we've got about ten minutes which has a lot of time for questions if you have any questions just",
    "start": "3047550",
    "end": "3055780"
  },
  {
    "text": "raise your hand and let me know so I've got one up the back there could you",
    "start": "3055780",
    "end": "3065350"
  },
  {
    "start": "3065000",
    "end": "3115000"
  },
  {
    "text": "speak up a bit so the question was about",
    "start": "3065350",
    "end": "3071710"
  },
  {
    "text": "how does G RBC work with services behind load balancers so one of the issues",
    "start": "3071710",
    "end": "3077890"
  },
  {
    "text": "around G RBC is as a should be to only and some load balancers and proxies",
    "start": "3077890",
    "end": "3084130"
  },
  {
    "text": "don't properly support HTTP to now if your proxy properly supports HTTP 2 then",
    "start": "3084130",
    "end": "3089470"
  },
  {
    "text": "you're fine GC will just work through it like any other HTTP request if it doesn't support",
    "start": "3089470",
    "end": "3096580"
  },
  {
    "text": "HTTP 2 then you won't be able to use it you'd have to either continue to use rest or maybe use another technology",
    "start": "3096580",
    "end": "3102430"
  },
  {
    "text": "like G a B C - web yes",
    "start": "3102430",
    "end": "3108329"
  },
  {
    "text": "so the question was about using Google protobuf and like Monsieur serialization",
    "start": "3114380",
    "end": "3121320"
  },
  {
    "start": "3115000",
    "end": "3188000"
  },
  {
    "text": "library so although GRP see by default users Google dot protobuf you don't have to",
    "start": "3121320",
    "end": "3128580"
  },
  {
    "text": "use it you can put in your own serialization technology like you could have G RPC sending and receiving Jason",
    "start": "3128580",
    "end": "3136589"
  },
  {
    "text": "so there's another protobuf library from Marc Ravel and has arisen based on proto",
    "start": "3136589",
    "end": "3142440"
  },
  {
    "text": "files this is actually like code first protobuf you can use that with the G RPC",
    "start": "3142440",
    "end": "3149640"
  },
  {
    "text": "server and client we've created just a little a little bit more work and a",
    "start": "3149640",
    "end": "3155520"
  },
  {
    "text": "disadvantage as its not interoperable with other languages like you've defined",
    "start": "3155520",
    "end": "3160890"
  },
  {
    "text": "your contract and a c-sharp class you can't give that c-sharp class to someone in Ruby and have them expect to be able",
    "start": "3160890",
    "end": "3166890"
  },
  {
    "text": "to call you like you can with that protobuf file but yes the short answer is it does work and like we we support",
    "start": "3166890",
    "end": "3174900"
  },
  {
    "text": "that but our official implementation as protobuf files using Google dobro debuff",
    "start": "3174900",
    "end": "3181730"
  },
  {
    "text": "yes so the question was about versioning",
    "start": "3181730",
    "end": "3190290"
  },
  {
    "start": "3188000",
    "end": "3255000"
  },
  {
    "text": "and the contract so the contract you can add new things to it like you can have a",
    "start": "3190290",
    "end": "3195750"
  },
  {
    "text": "service you can add new methods to it that's fine if a caller calls a service",
    "start": "3195750",
    "end": "3201030"
  },
  {
    "text": "which doesn't implement their method the service will just return not implemented you can also add new fields to a message",
    "start": "3201030",
    "end": "3209099"
  },
  {
    "text": "so we could take our hello message and we could have the name and then we could",
    "start": "3209099",
    "end": "3214530"
  },
  {
    "text": "add some additional metadata like we want to say hello back to them and shouty caps for example like if that",
    "start": "3214530",
    "end": "3223200"
  },
  {
    "text": "value wasn't set from the client it will just come back as a null value like it'll just come back as empty on the",
    "start": "3223200",
    "end": "3228630"
  },
  {
    "text": "server so yes you can version things and like as long as you're not changing what's already there like you can't if",
    "start": "3228630",
    "end": "3236430"
  },
  {
    "text": "you've already got a field and it's an integer you can change it to a boolean without changing both sides but",
    "start": "3236430",
    "end": "3245119"
  },
  {
    "text": "addition a few making additions and yes versioning is fine yes yeah so I've wind",
    "start": "3245119",
    "end": "3256039"
  },
  {
    "text": "the is just like NBC where once the code has finished executing the action slash",
    "start": "3256039",
    "end": "3262970"
  },
  {
    "text": "method and G RPC then the server considers itself done and it just sends",
    "start": "3262970",
    "end": "3268549"
  },
  {
    "text": "a response back to the client to say yes I'm done so a bad example I showed I I",
    "start": "3268549",
    "end": "3273980"
  },
  {
    "text": "probably should mention like I simplified things a lot like those frames can be more complicated like",
    "start": "3273980",
    "end": "3279319"
  },
  {
    "text": "there's other frames like there's a frame about resetting a stream there's a frame you can have frame metadata",
    "start": "3279319",
    "end": "3287210"
  },
  {
    "text": "metadata to say this is gonna be the final frame of my stream there's other",
    "start": "3287210",
    "end": "3293630"
  },
  {
    "text": "ones about flow control so it's a bit more complex than I showed but like I'm a server yes like once your code has",
    "start": "3293630",
    "end": "3299749"
  },
  {
    "text": "finished and exits method it will just automatically tell the client yes I'm finished and that for each loop will",
    "start": "3299749",
    "end": "3305869"
  },
  {
    "text": "just stop because the service told it's finished and it knows there's gonna be normal messages yes so the question was",
    "start": "3305869",
    "end": "3317839"
  },
  {
    "start": "3316000",
    "end": "3355000"
  },
  {
    "text": "about geo PC streaming and reconnecting er PC doesn't have any built-in functionality around reconnecting there",
    "start": "3317839",
    "end": "3325609"
  },
  {
    "text": "would be something that you would need to implement yourself there might be something we might explore in the next",
    "start": "3325609",
    "end": "3331190"
  },
  {
    "text": "year for future additions to our library around adding like more resilient",
    "start": "3331190",
    "end": "3336499"
  },
  {
    "text": "connections like automatic reconnection but no like by default er PC doesn't",
    "start": "3336499",
    "end": "3341539"
  },
  {
    "text": "itself the specification doesn't know anything about reconnecting but it's the kind of thing you can add on yourself",
    "start": "3341539",
    "end": "3347180"
  },
  {
    "text": "potentially yes",
    "start": "3347180",
    "end": "3351369"
  },
  {
    "text": "can you use the new async and numerals why I used one on the client so that's a",
    "start": "3354890",
    "end": "3361890"
  },
  {
    "start": "3355000",
    "end": "3395000"
  },
  {
    "text": "async enumerable so that's a for each but rather than blocking each time you",
    "start": "3361890",
    "end": "3367170"
  },
  {
    "text": "say move next so we'll move next asynchronously so like a few head I have",
    "start": "3367170",
    "end": "3372960"
  },
  {
    "text": "a server isn't reading anything the server's the one writing like if you were doing bi-directional streaming and",
    "start": "3372960",
    "end": "3378900"
  },
  {
    "text": "both the server and the client were both right and they're both reading simultaneously then yes you could use",
    "start": "3378900",
    "end": "3385369"
  },
  {
    "text": "Ayase and Canoe mirabile on the server in that case yes so the question was",
    "start": "3385369",
    "end": "3396540"
  },
  {
    "start": "3395000",
    "end": "3428000"
  },
  {
    "text": "about using HTTP poly yes I believe you might be able to so our client like I",
    "start": "3396540",
    "end": "3405090"
  },
  {
    "text": "haven't tried it and it hasn't occurred to me until you've just mentioned it but our client just uses HTTP client under",
    "start": "3405090",
    "end": "3412050"
  },
  {
    "text": "the covers so there's a potential that yes that could work I don't know there'd",
    "start": "3412050",
    "end": "3419250"
  },
  {
    "text": "be something we'd need to explore yes",
    "start": "3419250",
    "end": "3425570"
  },
  {
    "start": "3428000",
    "end": "3459000"
  },
  {
    "text": "I do not know so you can like this there's no like idea of wisdom there's",
    "start": "3428839",
    "end": "3436339"
  },
  {
    "text": "no like here is my publish contracts you can go here and download them and then",
    "start": "3436339",
    "end": "3442130"
  },
  {
    "text": "automatically do things there's no spec around that as far as I can tell an ERP see I've been something kind of similar",
    "start": "3442130",
    "end": "3448250"
  },
  {
    "text": "like you can do some reflection and like a server can provide information about what end points it has if it doesn't",
    "start": "3448250",
    "end": "3454520"
  },
  {
    "text": "provide the protobuf file yeah like",
    "start": "3454520",
    "end": "3460099"
  },
  {
    "start": "3459000",
    "end": "3505000"
  },
  {
    "text": "you've got a bunch of options so you can share it on disk like if you're both on the same project you could have like a",
    "start": "3460099",
    "end": "3466520"
  },
  {
    "text": "central dotnet class library 2.0 it could reference the proto file and then",
    "start": "3466520",
    "end": "3473990"
  },
  {
    "text": "you could do the compilation and code generation on one package I mean you can just reference that package from all over the place you could then take their",
    "start": "3473990",
    "end": "3480079"
  },
  {
    "text": "package and you can put it on nougat and then anyone can reference it if there are some packages or we like that like",
    "start": "3480079",
    "end": "3486079"
  },
  {
    "text": "there's chappy C dot health checks that's just some code generated and proxies that have been been put on",
    "start": "3486079",
    "end": "3492950"
  },
  {
    "text": "nougat and everyone can reference so there are a lot of options yes",
    "start": "3492950",
    "end": "3499809"
  },
  {
    "start": "3505000",
    "end": "3559000"
  },
  {
    "text": "you can pretty much use all the authentication that's available that's",
    "start": "3506370",
    "end": "3511950"
  },
  {
    "text": "an asp.net core so one one that you can't use as Windows authentication",
    "start": "3511950",
    "end": "3518750"
  },
  {
    "text": "windows authentication doesn't work an HTTP - but like securing a GI PC service",
    "start": "3518750",
    "end": "3525480"
  },
  {
    "text": "shouldn't be much different from securing a NBC controller like you can",
    "start": "3525480",
    "end": "3531000"
  },
  {
    "text": "just put an authorized attribute on it and you put in the necessary middle wave and necessary configuration and then",
    "start": "3531000",
    "end": "3537780"
  },
  {
    "text": "that middleware will just automatically run women a request comes in if you get a rejection like a it will return an",
    "start": "3537780",
    "end": "3545580"
  },
  {
    "text": "unauthorized response back to the client and the client will say hey I can't do this because I'm not authorized yes",
    "start": "3545580",
    "end": "3551970"
  },
  {
    "text": "behind behind you yes I don't know",
    "start": "3551970",
    "end": "3560100"
  },
  {
    "start": "3559000",
    "end": "3600000"
  },
  {
    "text": "anything about Asia functions so at the moment Jia PC doesn't work an azure app service we talked about the",
    "start": "3560100",
    "end": "3568050"
  },
  {
    "text": "issue with proxies before right now the proxies that as you app service they",
    "start": "3568050",
    "end": "3574350"
  },
  {
    "text": "don't support the necessary features they should be - that's something we're working on so hopefully like no promises",
    "start": "3574350",
    "end": "3582090"
  },
  {
    "text": "but will aim for next year beginning of next year to get Jia BC working on as",
    "start": "3582090",
    "end": "3587880"
  },
  {
    "text": "your app service so yeah I don't I don't know anything about as your function",
    "start": "3587880",
    "end": "3592890"
  },
  {
    "text": "support they might like it's a good technology and it's a good way yeah yeah",
    "start": "3592890",
    "end": "3599820"
  },
  {
    "text": "so as your functions runs on top of App Service but beyond that I don't know",
    "start": "3599820",
    "end": "3604920"
  },
  {
    "text": "whether they might add like built-in support for a gr BC endpoint for invoking stuff so I'm Ferrand the what",
    "start": "3604920",
    "end": "3617910"
  },
  {
    "text": "handling Oh server error handling so that PRP see",
    "start": "3617910",
    "end": "3625359"
  },
  {
    "text": "status let me just look how much time I think this is the last question so Jia PC the status which gets returned",
    "start": "3625359",
    "end": "3633309"
  },
  {
    "text": "you can also send back a description of what error happened so you can give information to say this was an",
    "start": "3633309",
    "end": "3640150"
  },
  {
    "text": "unauthorized response I mean you can give some detail and that description I guess not as rich as you might get",
    "start": "3640150",
    "end": "3647019"
  },
  {
    "text": "with some other technologies like WCF I believe there are packages that you can use to extend it there's something I",
    "start": "3647019",
    "end": "3652720"
  },
  {
    "text": "haven't looked at closely it no it'll probably be something we'll look at upcoming that's here ok that's it sorry",
    "start": "3652720",
    "end": "3659559"
  },
  {
    "text": "no more questions I'll be around all conference so if you want to ask me just come up to me and thank you very much",
    "start": "3659559",
    "end": "3665840"
  },
  {
    "text": "[Applause]",
    "start": "3665840",
    "end": "3671429"
  }
]