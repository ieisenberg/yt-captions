[
  {
    "text": "thank you for coming along um to a really in-depth talk near the end of the day um good job there was a",
    "start": "4799",
    "end": "11280"
  },
  {
    "text": "coffee break before this one i think so uh yeah my name is matt warren i sometimes blog at matt1.org",
    "start": "11280",
    "end": "18480"
  },
  {
    "text": "and i work at a company if it wasn't at all obvious i i'm happy to wear the free t-shirts they give me i work at contrast security and",
    "start": "18480",
    "end": "25760"
  },
  {
    "text": "we do security tools for developers and part of why and this interests me because it",
    "start": "25760",
    "end": "32000"
  },
  {
    "text": "overlaps with my day job and some of the things i get to do there which i'll go into a little bit later but generally we",
    "start": "32000",
    "end": "37600"
  },
  {
    "text": "provide tools for you to analyze your code and see if there's security issues that's what contrast is about but this talk is",
    "start": "37600",
    "end": "44879"
  },
  {
    "text": "about performance in the dot net runtime uh i should start with",
    "start": "44879",
    "end": "50800"
  },
  {
    "text": "uh i guess a disclaimer up front i i love this stuff around net internals",
    "start": "50800",
    "end": "56000"
  },
  {
    "text": "if it wasn't clear if you read anything on my blog i more than happy to spend quite a lot of time figuring this stuff out just mostly",
    "start": "56000",
    "end": "62239"
  },
  {
    "text": "for the fun of it some of it as i said overlaps my day job but um a lot of this is for information and it's been quite",
    "start": "62239",
    "end": "68960"
  },
  {
    "text": "good over the last few years because basically they opensourced.net runtime back in 2016.",
    "start": "68960",
    "end": "76159"
  },
  {
    "text": "um so we can dive into this stuff you can get you know if you if you're really keen and you really want to you can build",
    "start": "76159",
    "end": "82320"
  },
  {
    "text": "your own version of the runtime and run it locally in debug mode just for the fun of it um but uh more seriously is",
    "start": "82320",
    "end": "89040"
  },
  {
    "text": "that we can find this stuff out it's a lot easier i'm trying to do some of the things i do to research talks like this",
    "start": "89040",
    "end": "94320"
  },
  {
    "text": "and others um 10 years ago would have required some sort of ninja win dbg",
    "start": "94320",
    "end": "99360"
  },
  {
    "text": "skills and a level of assembly that's beyond me but i really like this stuff and i really",
    "start": "99360",
    "end": "105280"
  },
  {
    "text": "enjoy digging into it and sounds seems like people respond to that as well but i think it's um",
    "start": "105280",
    "end": "111600"
  },
  {
    "text": "easy to say you know i like this stuff but maybe put my money where my mouth is this is my collection of books as far as",
    "start": "111600",
    "end": "117119"
  },
  {
    "text": "i know i've got every one of every book that ever come out that talks anything about the.net runtime internals and there's a few that aren't here that i",
    "start": "117119",
    "end": "123119"
  },
  {
    "text": "have ebooks i some point start to stop collecting physical books um but anyway this is quite a good set",
    "start": "123119",
    "end": "128959"
  },
  {
    "text": "of resources if you want to know more about um often it overlaps with performance actually so some of the",
    "start": "128959",
    "end": "134160"
  },
  {
    "text": "books are writing about talking about getting performance but mentioned so this is a good list the one",
    "start": "134160",
    "end": "139200"
  },
  {
    "text": "that's missing here in my recent one i'm reading is a the thousand page book about product it's called pro.net memory",
    "start": "139200",
    "end": "145280"
  },
  {
    "text": "management if you want to learn anything about the net gc um it's covered in that one thousand page book but anyway",
    "start": "145280",
    "end": "150959"
  },
  {
    "text": "there's a lot of good resources out there as well as blogs um so yeah i really i really like this stuff um but",
    "start": "150959",
    "end": "156879"
  },
  {
    "text": "maybe a bit more of an a um justification for this it's not just because i like talking",
    "start": "156879",
    "end": "162239"
  },
  {
    "text": "about it and hopefully other people like uh listening to it as well but actually um",
    "start": "162239",
    "end": "168160"
  },
  {
    "text": "there's a level where understanding one level below what we're working from is useful",
    "start": "168160",
    "end": "173200"
  },
  {
    "text": "so it quite often comes up in performance if you want to get the most performance at the clr um the runtime",
    "start": "173200",
    "end": "179280"
  },
  {
    "text": "you do need to have an idea of what the jit is doing or the garbage collector is doing you need to understand",
    "start": "179280",
    "end": "185519"
  },
  {
    "text": "which things are more costly than others uh you also need to measure and all the other sort of general advice this is not",
    "start": "185519",
    "end": "191360"
  },
  {
    "text": "a performance talk in that sort of way but you know you need to measure these things but actually there's times isn't it i'm not going to stand here and claim",
    "start": "191360",
    "end": "197680"
  },
  {
    "text": "that day in day out knowing what's going on in the run time is affecting our jobs that would be a bit disingenuous but i",
    "start": "197680",
    "end": "203760"
  },
  {
    "text": "think for a lot of us there's times where this stuff comes up um you know i think also it's it's um",
    "start": "203760",
    "end": "209680"
  },
  {
    "text": "good that uh as a kind of wider community it's not just the people at microsoft who work on the runtime that",
    "start": "209680",
    "end": "215519"
  },
  {
    "text": "know these things i think it's good that actually it helps our ecosystem it helps us have better",
    "start": "215519",
    "end": "220720"
  },
  {
    "text": "libraries on.net or it helps this general understanding of what the runtime does um the promise of the run",
    "start": "220720",
    "end": "226959"
  },
  {
    "text": "time is that we can treat it as a black box and yes that does apply we just write r c sharp f sharp vb.net code whatever language",
    "start": "226959",
    "end": "234319"
  },
  {
    "text": "we're writing and then the runtime does its thing but actually there's times when it's worth knowing one level",
    "start": "234319",
    "end": "240640"
  },
  {
    "text": "below your usual abstraction and of course that that can vary so sometimes that usual abstraction is you",
    "start": "240640",
    "end": "246319"
  },
  {
    "text": "know you're working on top of asp.net so you need to know that sometimes it's the base class library but i believe i think",
    "start": "246319",
    "end": "251920"
  },
  {
    "text": "for a lot of us there's times we're actually knowing things about the runtime how is uh",
    "start": "251920",
    "end": "257199"
  },
  {
    "text": "how how delegates work or why certain types of method calls are more expensive than others and as i said before it",
    "start": "257199",
    "end": "263280"
  },
  {
    "text": "often comes up with performance to get the highest performance out of the runtime knowing these things is useful",
    "start": "263280",
    "end": "270720"
  },
  {
    "text": "so there's a lot of things in the runtime to give a bit of scope to that i did a previous talk",
    "start": "271280",
    "end": "277040"
  },
  {
    "text": "which was called from.net run to hello world the simplest program you can do that's a 45 minute talk just talking",
    "start": "277040",
    "end": "283600"
  },
  {
    "text": "about everything that happens from the point you write dot net run to the point that hello world appears on the screen",
    "start": "283600",
    "end": "288639"
  },
  {
    "text": "and that if you know anything about those sorts of applications a very small application misses out a lot of the stuff that the runtime does there's",
    "start": "288639",
    "end": "295040"
  },
  {
    "text": "probably no time for a gc to happen and a few other things i've deliberately missed out so there's a lot going on in the run time it's a huge",
    "start": "295040",
    "end": "302479"
  },
  {
    "text": "piece of engineering it's a huge piece of software there's a lot of stuff going on there so to give a bit of focus i'm just trying to do the overlap the",
    "start": "302479",
    "end": "308880"
  },
  {
    "text": "intersection of some things that are going on in the runtime that are designed or written or",
    "start": "308880",
    "end": "315360"
  },
  {
    "text": "implemented in a way that give us performance so we get to use the runtime we write our code",
    "start": "315360",
    "end": "321120"
  },
  {
    "text": "and there's a lot of things that actually happen to not just a naive way there's a lot of work that's gone in to",
    "start": "321120",
    "end": "326800"
  },
  {
    "text": "make things that we would expect to be fair from a runtime to be quick but there's a lot of work to make that",
    "start": "326800",
    "end": "332800"
  },
  {
    "text": "happen and we'll talk about those one of the ones is maybe methods calls we don't ever really think about what's going on",
    "start": "332800",
    "end": "339199"
  },
  {
    "text": "with them ethical that's fair enough the runtime handles that for us but it's not an accident that nets can",
    "start": "339199",
    "end": "345600"
  },
  {
    "text": "work in high performance situations taking power and things like if you've ever seen those benchmarks and a lot of",
    "start": "345600",
    "end": "350639"
  },
  {
    "text": "work goes into making even something as simple as a method called efficient",
    "start": "350639",
    "end": "356639"
  },
  {
    "text": "so um but just to give a kind of um overview of the landscape if you like i know that not everyone has",
    "start": "359120",
    "end": "365759"
  },
  {
    "text": "been delved into the code of the runtime or knows some of the components from that so this is probably i think",
    "start": "365759",
    "end": "372400"
  },
  {
    "text": "about well i think it's pre-covered so anyway that makes it a couple of years old so you could probably add 10 or 20",
    "start": "372400",
    "end": "378160"
  },
  {
    "text": "to these numbers but it gives you an idea right there's a lot of code in there over 2 million lines of source code 8 million lines of test code",
    "start": "378160",
    "end": "385759"
  },
  {
    "text": "which is i think it's not a bad ratio for a runtime you'd hope that they'd be testing quite well this is what's considered the core",
    "start": "385759",
    "end": "392479"
  },
  {
    "text": "runtime the base class libraries are separate from this so you can these numbers go up if you start to include",
    "start": "392479",
    "end": "397840"
  },
  {
    "text": "all the you know the base class libraries we know and use every day the the collections and all the other things",
    "start": "397840",
    "end": "403039"
  },
  {
    "text": "that live in system and microsoft name spaces is the core runtime can actually run standalone",
    "start": "403039",
    "end": "408479"
  },
  {
    "text": "can't do too much more than just a hallowed app with the core runtime you do need the base class libraries to do",
    "start": "408479",
    "end": "413759"
  },
  {
    "text": "anything more useful but this gives you an idea of the scope of that lots of files of source code there's quite a lot",
    "start": "413759",
    "end": "419280"
  },
  {
    "text": "of c-sharp code in there although a lot of that is test code and by far the bulk",
    "start": "419280",
    "end": "424319"
  },
  {
    "text": "of the runtime is written in c plus which may not be that surprising quite a lot of il code that's generally",
    "start": "424319",
    "end": "431039"
  },
  {
    "text": "for testing the runtime wants to be able to test in different scenarios without necessarily having to rely on the",
    "start": "431039",
    "end": "436880"
  },
  {
    "text": "company so it has its own you know it goes directly from the il code because that's at the level the runtime works we",
    "start": "436880",
    "end": "442720"
  },
  {
    "text": "write our c-sharp f-sharp whatever code that gets turned into il and the runtime then does the job on the il code a bunch",
    "start": "442720",
    "end": "450400"
  },
  {
    "text": "of assembler code and we'll look at some of that later on a bit of python and perl i believe is for scripting and",
    "start": "450400",
    "end": "455840"
  },
  {
    "text": "test you know supporting code i don't think any of that none of that ends up in the runtime",
    "start": "455840",
    "end": "461599"
  },
  {
    "text": "itself but the point i want to get across is there's a serious amount i've gone into this and the open source uh",
    "start": "461599",
    "end": "467440"
  },
  {
    "text": "corsillar is mostly known although it's now that they changed it you know.net five just became.net not rather than.net",
    "start": "467440",
    "end": "473599"
  },
  {
    "text": "core but anyway that runtime has not suddenly appeared as an open source version that's come from the heritage of",
    "start": "473599",
    "end": "480720"
  },
  {
    "text": "net all the way back to the beginning through silverlight and all the different versions so it's not just code",
    "start": "480720",
    "end": "485840"
  },
  {
    "text": "that suddenly appeared uh what 2016 uh six years ago um it's built on all the",
    "start": "485840",
    "end": "491280"
  },
  {
    "text": "code in fact some of the code um goes way back to the very beginning some of the low-level internal things uh don't",
    "start": "491280",
    "end": "496879"
  },
  {
    "text": "change um they might have uh improved certain parts but there's parts you can trace back and one of the books i showed",
    "start": "496879",
    "end": "502560"
  },
  {
    "text": "a minute ago is about something called rota and roads was essentially the runtime that was open sourced about 20",
    "start": "502560",
    "end": "510000"
  },
  {
    "text": "years ago it was under a sort of academic license and it roughly equates to the net 2 time frame and you can look",
    "start": "510000",
    "end": "516800"
  },
  {
    "text": "at the source code of rota and you can see some similarity at least in the file names maybe not completely the content",
    "start": "516800",
    "end": "523200"
  },
  {
    "text": "of the file but there's things that have stuck around since that point maybe a",
    "start": "523200",
    "end": "529360"
  },
  {
    "text": "more pictorial way of looking at things these are just um square maps just basically the size",
    "start": "529360",
    "end": "535920"
  },
  {
    "text": "of the source code in those folders and these folders are not just the source code folders on disk but they're kind of",
    "start": "535920",
    "end": "541279"
  },
  {
    "text": "the naming terminology of those components as well um so it's fairly well structured and split up like that",
    "start": "541279",
    "end": "546480"
  },
  {
    "text": "so to go through some of these mscorelib is actually now system private",
    "start": "546480",
    "end": "551680"
  },
  {
    "text": "call it this is the c-sharp code in the runtime and this is things like system.gc",
    "start": "551680",
    "end": "558640"
  },
  {
    "text": "there's a rule about this part of the code that it can't have any dependencies so anything this code needs to run has",
    "start": "558640",
    "end": "564240"
  },
  {
    "text": "to be in there so that's why some collections are in there obviously the core type string and",
    "start": "564240",
    "end": "569839"
  },
  {
    "text": "some of those are implemented in there and this is and then reflection is another one that sits in there so it's",
    "start": "569839",
    "end": "575839"
  },
  {
    "text": "kind of very core parts of the component that the bits that are needed uh to do anything at all and the bare",
    "start": "575839",
    "end": "581600"
  },
  {
    "text": "minimum if you like but the reason why um that sits in the run time and not",
    "start": "581600",
    "end": "586959"
  },
  {
    "text": "separately is because that uh say you take an example of system.gc right the apis in system.gc",
    "start": "586959",
    "end": "593519"
  },
  {
    "text": "need to match exactly what the current version of the gc is doing so that's why this um is shipped as part of the",
    "start": "593519",
    "end": "599519"
  },
  {
    "text": "runtime not as a as a separate thing and there's some special rules like i said it has to be the first",
    "start": "599519",
    "end": "604959"
  },
  {
    "text": "thing loaded it can't and certain types um strings and arrays as we can sort of imagine are quite special types they do",
    "start": "604959",
    "end": "611839"
  },
  {
    "text": "quite special things so the runtime needs to know that the code in here is matching what the runtime is certain things that this can do that other codes",
    "start": "611839",
    "end": "619279"
  },
  {
    "text": "sorry in terms of knowledge this code hack might have that other third party or even base class libraries can't have",
    "start": "619279",
    "end": "624560"
  },
  {
    "text": "that same knowledge um the jit just in time compiler is a huge chunk as well",
    "start": "624560",
    "end": "630839"
  },
  {
    "text": "um the code that's responsible for taking the il that's come from the compiler the c-sharp compiler roslin",
    "start": "630839",
    "end": "636640"
  },
  {
    "text": "compiler and then uh jitting it the first time it's run that has to worry about",
    "start": "636640",
    "end": "642480"
  },
  {
    "text": "generally different cpu architectures you know it's jitting code for all the platforms that um",
    "start": "642480",
    "end": "648640"
  },
  {
    "text": "net runs on so uh x86 x64 arm 64",
    "start": "648640",
    "end": "654880"
  },
  {
    "text": "and some other ones i've gotten anyway there's quite a few and they're growing over time and so there's obviously per cpu",
    "start": "654880",
    "end": "662480"
  },
  {
    "text": "architecture knowledge in there there's you know functions are written multiple times to support different things it has to have",
    "start": "662480",
    "end": "668640"
  },
  {
    "text": "a knowledge of registers and lots of things there's a lot of complexity in there",
    "start": "668640",
    "end": "674320"
  },
  {
    "text": "the gc is a relatively standalone component as well there is actually a way you can run the",
    "start": "674320",
    "end": "679760"
  },
  {
    "text": "gc if you're really keen you can run the gc separate from the runtime and also in theory you could implement",
    "start": "679760",
    "end": "686160"
  },
  {
    "text": "your own gc and drop it in as a replacement as an api and an interface it sits behind probably the most thing",
    "start": "686160",
    "end": "692240"
  },
  {
    "text": "people know the most interesting thing about the gc is there's a is basically one single file gc.cpp and for the",
    "start": "692240",
    "end": "699120"
  },
  {
    "text": "longest time if you looked on github at the file it would say too big to too big to render um so there's historical",
    "start": "699120",
    "end": "705440"
  },
  {
    "text": "reasons they maybe they like the idea it's one file who knows i wouldn't fancy working on a 35 000 line of code and file but",
    "start": "705440",
    "end": "712880"
  },
  {
    "text": "anyway that's the way it is and it's probably not going to change it's being part of the run time from the beginning",
    "start": "712880",
    "end": "719200"
  },
  {
    "text": "um another bit that's always surprises me is just how much goes into debugging",
    "start": "719200",
    "end": "724320"
  },
  {
    "text": "so if you're in tess's talk this morning talking about debugging she showed wind ebg",
    "start": "724320",
    "end": "730399"
  },
  {
    "text": "and sos right sos is the component if you want to do anything",
    "start": "730399",
    "end": "735560"
  },
  {
    "text": "debugging.net memory dumps or net code in wind dbg you need to use sos you load it up and it",
    "start": "735560",
    "end": "741920"
  },
  {
    "text": "has the commands and along with the other components really that provides the bridge so ndbg is like a native",
    "start": "741920",
    "end": "747839"
  },
  {
    "text": "debugger it only knows about native codes our code in the runtime is managed it's gone",
    "start": "747839",
    "end": "753839"
  },
  {
    "text": "through legit there's kind of levels of abstraction on there in native code there's data structures that describe and all sorts of stuff so",
    "start": "753839",
    "end": "760399"
  },
  {
    "text": "that's the job of sos is kind of like a plug-in but also you have the dia data access that's providing a way",
    "start": "760399",
    "end": "767760"
  },
  {
    "text": "for given a dot-net process how do i get useful information out of it like where's the location in memory where i",
    "start": "767760",
    "end": "774079"
  },
  {
    "text": "can find the list of all the threads that are running because they're managed threads not native threads how can i find information about a jitted method",
    "start": "774079",
    "end": "780959"
  },
  {
    "text": "how can i find information about managed types all these sorts of things that's data access layers provided there on top",
    "start": "780959",
    "end": "788959"
  },
  {
    "text": "of that when you're debugging say in visual studio you know you're doing f9 f10",
    "start": "788959",
    "end": "794160"
  },
  {
    "text": "whatever all that sort of stuff and that's talking to the.net debugging api again",
    "start": "794160",
    "end": "799600"
  },
  {
    "text": "visual studio understands native but to control a.net process to be able to step",
    "start": "799600",
    "end": "805120"
  },
  {
    "text": "through even something as simple as stepping through lines you know when you're stepping through the actual assembly you need to map that back",
    "start": "805120",
    "end": "812079"
  },
  {
    "text": "via the il to the original code that was written you need to understand that relationship because we don't want to",
    "start": "812079",
    "end": "817200"
  },
  {
    "text": "step through in terms of assembly code we want to step through in terms of our high-level c-sharp code which is not",
    "start": "817200",
    "end": "822560"
  },
  {
    "text": "necessarily a one-to-one mapping of assembly so there's quite a lot going on there platform adaption layer is so that the",
    "start": "822560",
    "end": "829440"
  },
  {
    "text": "runtime can affect program regardless of the os and then this part of the code",
    "start": "829440",
    "end": "834560"
  },
  {
    "text": "handles that's the theory behind the platform adaption layer so obviously for the longest time.net pretty much ran on",
    "start": "834560",
    "end": "840959"
  },
  {
    "text": "windows but you know now it's linux and there's code in there to let it run on unix and all the different os's it",
    "start": "840959",
    "end": "846959"
  },
  {
    "text": "supports and then onto the um apis you might not know that the runtime actually has api",
    "start": "846959",
    "end": "853839"
  },
  {
    "text": "so i sort of talked about one already there's a debugging api that's how any third party and visual studio debugger",
    "start": "853839",
    "end": "860480"
  },
  {
    "text": "can talk can debug a dot-net process as a there's an api to use it's uh",
    "start": "860480",
    "end": "866560"
  },
  {
    "text": "into process communication there's commands sent back from forwards you know you move to the next breakpoint all",
    "start": "866560",
    "end": "871920"
  },
  {
    "text": "these sorts of things there's an api that allows it to do that and third-party third-party debuggers",
    "start": "871920",
    "end": "877040"
  },
  {
    "text": "these are published apis up on msdn docs it's known as i-core debug the debugging",
    "start": "877040",
    "end": "882720"
  },
  {
    "text": "api and then icore profiler is the profiling api and essentially my day job",
    "start": "882720",
    "end": "889279"
  },
  {
    "text": "is working with the icor profiler api and it's what probably most people know",
    "start": "889279",
    "end": "894800"
  },
  {
    "text": "if you've used any profiling tools obviously but any apm tools um",
    "start": "894800",
    "end": "900720"
  },
  {
    "text": "net apm tools will probably use the profiling api it gives you the sort of access to a",
    "start": "900720",
    "end": "906480"
  },
  {
    "text": "runtime process that those tools need and one of the main bits that a lot of those tools do and what certainly the",
    "start": "906480",
    "end": "912320"
  },
  {
    "text": "tool i work on does is actually rewrite your il at runtime that's sort of the secret",
    "start": "912320",
    "end": "917519"
  },
  {
    "text": "code of some of those tools that's how those tools can instrument your code without you having to make changes and",
    "start": "917519",
    "end": "923519"
  },
  {
    "text": "that's part of what the profiling api provides",
    "start": "923519",
    "end": "927839"
  },
  {
    "text": "so just as a sort of um little tip if you ever think okay i'd really like a job where some of this",
    "start": "930639",
    "end": "936240"
  },
  {
    "text": "internals and this runtime stuff is like part of my daily job if you ever see a job advert asking for knowledge or",
    "start": "936240",
    "end": "942320"
  },
  {
    "text": "mentioning the profiling api or debugging api that's probably your sort of um secret way in right it's worked",
    "start": "942320",
    "end": "948480"
  },
  {
    "text": "for me for the past six years you certainly have to understand um yeah one terms of one level of interaction lower",
    "start": "948480",
    "end": "954959"
  },
  {
    "text": "to to work with the profiling apis but just to give a caveat those apis are com",
    "start": "954959",
    "end": "960000"
  },
  {
    "text": "apis and you're writing code in c plus plus so if that's that's not your thing um so my job is",
    "start": "960000",
    "end": "965199"
  },
  {
    "text": "split between the code and writing in profiling which is c plus at the same time writing a",
    "start": "965199",
    "end": "970800"
  },
  {
    "text": "managed part of well it's a bit of both but um certainly those apis require knowledge and if com is a word that you",
    "start": "970800",
    "end": "976639"
  },
  {
    "text": "don't ever want to hear in your professional life then then maybe stay away from that but anyway there's some apis in there and um",
    "start": "976639",
    "end": "983920"
  },
  {
    "text": "fortunately and i think uh microsoft is not a coincidence they these are all versioned apis microsoft agrees to",
    "start": "983920",
    "end": "989839"
  },
  {
    "text": "support them it's why there's a big ecosystem of third-party tools in in situations where microsoft doesn't",
    "start": "989839",
    "end": "995360"
  },
  {
    "text": "necessarily want to make all those tools they've made these apis available and they support them throughout all the",
    "start": "995360",
    "end": "1000639"
  },
  {
    "text": "different versions of net onto the part that is the most focus of",
    "start": "1000639",
    "end": "1006560"
  },
  {
    "text": "of this talk today is that is sometimes known as the vm virtual machine that's the folder it's stored in sometimes",
    "start": "1006560",
    "end": "1013279"
  },
  {
    "text": "known as the execution engine it's it's it's really the bit that hangs all the other parts together it's the bit that executes first and then it will invoke",
    "start": "1013279",
    "end": "1020399"
  },
  {
    "text": "the jit it's the bit that sets up the gc and and gets that running and the other",
    "start": "1020399",
    "end": "1025600"
  },
  {
    "text": "parts are clearly not trivial but the the there's a lot of work going in in the virtual machine side of the code is",
    "start": "1025600",
    "end": "1031199"
  },
  {
    "text": "what's considered i suppose the runtime part of it but what sort of things it do well quite",
    "start": "1031199",
    "end": "1036640"
  },
  {
    "text": "a lot so you've got your type system in there generics um we pretty much take generics for granted right we've been",
    "start": "1036640",
    "end": "1042798"
  },
  {
    "text": "fortunate.net to have them since dot net two so only if you're in the very early versions of dot net would you have not",
    "start": "1042799",
    "end": "1048480"
  },
  {
    "text": "had generics and maybe you remember arraylist and all the you know the non-generic things but",
    "start": "1048480",
    "end": "1053520"
  },
  {
    "text": "anyways we we can write generic code maybe if you've seen other runtimes like go it took a while for them to get",
    "start": "1053520",
    "end": "1060559"
  },
  {
    "text": "uh generics and there's big debates about how they can make it work with the language so we should be quite grateful",
    "start": "1060559",
    "end": "1066240"
  },
  {
    "text": "that it's been in if we like using or writing generic code we should be grateful it's been in.net but it",
    "start": "1066240",
    "end": "1071679"
  },
  {
    "text": "basically makes everything else harder your types have to be aware of generics because types can be genetics methods",
    "start": "1071679",
    "end": "1077200"
  },
  {
    "text": "have to be aware of genetics method calls are more complicated if you're calling a method with generic arguments and so on and so on um so",
    "start": "1077200",
    "end": "1084559"
  },
  {
    "text": "the type system is uh also important because it's what gives us type safety and if we didn't have type safety",
    "start": "1084559",
    "end": "1090640"
  },
  {
    "text": "i guess we'd be writing you know dynamic code and if you've ever done any dynamic code you know the trade-offs there right",
    "start": "1090640",
    "end": "1096720"
  },
  {
    "text": "we can rely on quite a lot of things in c sharp in terms of if our code compiles we know something about it",
    "start": "1096720",
    "end": "1103280"
  },
  {
    "text": "obviously the built-in types they have to ship with the runtime so strings arrays all the primitives those sorts of",
    "start": "1103280",
    "end": "1109039"
  },
  {
    "text": "things span nowadays is another one that's added in there span read only memory included in that loading types and",
    "start": "1109039",
    "end": "1115600"
  },
  {
    "text": "classes generally are types and classes loading as well but obviously any other code has to deal with that and as again",
    "start": "1115600",
    "end": "1121280"
  },
  {
    "text": "the guarantees it won't load a type that doesn't meet the type system requirements if you've ever had type load exceptions or those sorts of things",
    "start": "1121280",
    "end": "1127679"
  },
  {
    "text": "you know there is ways not generally in writing in c sharp code that goes through a compiler but if you ever you know you can write whatever il",
    "start": "1127679",
    "end": "1134559"
  },
  {
    "text": "you want and pass it to the run time and it'll have a go at it so it has to be sure that it knows the classes fit in",
    "start": "1134559",
    "end": "1141440"
  },
  {
    "text": "with type safety threading we obviously have threading we don't probably nowadays aren't really",
    "start": "1141440",
    "end": "1146640"
  },
  {
    "text": "writing you know newing up threads and stuff there's thread pulls and much higher levels of abstraction but they're",
    "start": "1146640",
    "end": "1151679"
  },
  {
    "text": "all built on top of the threads that the runtime provides that aren't os threads so there's a whole level of abstraction",
    "start": "1151679",
    "end": "1157760"
  },
  {
    "text": "there exception handling stack walking again i mean we probably don't like getting exceptions in our code but if you ever",
    "start": "1157760",
    "end": "1163919"
  },
  {
    "text": "used a language or runtime it doesn't give you decent stack traces or doesn't tell you you know where exception",
    "start": "1163919",
    "end": "1169200"
  },
  {
    "text": "happened you should be very grateful that you know with the first class experience we have in visual studio that pops up an exception and gives us the",
    "start": "1169200",
    "end": "1175919"
  },
  {
    "text": "whole stack trace and we can you know jump to different parts of the stack trace we can see variables in the stack trace we can you",
    "start": "1175919",
    "end": "1181840"
  },
  {
    "text": "know all these sorts of things the runtime provides quite a lot of that and just the whole exception handling and",
    "start": "1181840",
    "end": "1186960"
  },
  {
    "text": "the ability to throw and catch and all those sorts of things we probably use quite often in our code",
    "start": "1186960",
    "end": "1192720"
  },
  {
    "text": "uh event tracing profiling i've talked a bit about um but event tracing is quite a lot so if you again the talk this",
    "start": "1192720",
    "end": "1198240"
  },
  {
    "text": "morning talked about tools like dot net counters or dot net collectors a lot of these tools are querying into the",
    "start": "1198240",
    "end": "1204240"
  },
  {
    "text": "runtime and finding this information out there's a lot of information the runtime publishes about itself of what it's doing",
    "start": "1204240",
    "end": "1210640"
  },
  {
    "text": "and just even something like p invoke right we i mean maybe we're not using it directly but it's there in almost",
    "start": "1210640",
    "end": "1215919"
  },
  {
    "text": "everything we do um calling out to native codes maybe from time to time we",
    "start": "1215919",
    "end": "1221679"
  },
  {
    "text": "use it directly and put the dll import and stuff there's quite a lot of work there",
    "start": "1221679",
    "end": "1226720"
  },
  {
    "text": "so that gives us a rough idea of the landscape so the first thing i'm going to talk about is virtual stub dispatch",
    "start": "1226720",
    "end": "1232480"
  },
  {
    "text": "has anyone heard of this in the context of of.net a few people great so everyone else is",
    "start": "1232480",
    "end": "1238640"
  },
  {
    "text": "going to learn something new today so virtual stub dispatch is um you will know it you just won't know it's maybe",
    "start": "1238640",
    "end": "1243919"
  },
  {
    "text": "called that but let's say um so hands up who's got an eye logger interface in their code",
    "start": "1243919",
    "end": "1250400"
  },
  {
    "text": "yeah okay and hands up who's got any interfaces in their code that's everyone right i don't think many",
    "start": "1250400",
    "end": "1255440"
  },
  {
    "text": "people write any code but without interfaces so we kind of take it for granted right we can do interfaces the",
    "start": "1255440",
    "end": "1261120"
  },
  {
    "text": "whole program to the abstraction not the implementation we can switch out although actually we probably find that",
    "start": "1261120",
    "end": "1266880"
  },
  {
    "text": "a lot of the time you might only have one implementation of an interface because it makes it mockable and testable and all those other things as",
    "start": "1266880",
    "end": "1272080"
  },
  {
    "text": "well so it's not even we're always having multiple implementations but that's there as well so you have the",
    "start": "1272080",
    "end": "1277200"
  },
  {
    "text": "kind of standard thing you have a i logger this is a console one you can imagine like a",
    "start": "1277200",
    "end": "1282240"
  },
  {
    "text": "azure table storage logger or whatever event log logger there's different implementations you might swap it out by",
    "start": "1282240",
    "end": "1288480"
  },
  {
    "text": "di or have your code set up but it's called virtual because actually",
    "start": "1288480",
    "end": "1293679"
  },
  {
    "text": "in the il uh actually this is more than metadata if you were to look in the iel spy or some of those tools ieldas",
    "start": "1293679",
    "end": "1300880"
  },
  {
    "text": "and they'll often put in the at least the one i was using here puts the um method attributes uh as comments so this",
    "start": "1300880",
    "end": "1308240"
  },
  {
    "text": "is not saying we see in our code but this is what's behind the scene in the metadata and it's talking about virtual",
    "start": "1308240",
    "end": "1314159"
  },
  {
    "text": "um and then uh so i like to think of virtuals like essentially it's because the compiler can't",
    "start": "1314159",
    "end": "1320960"
  },
  {
    "text": "guarantee where that method call is going to live at compile time because it's behind an interface you have a",
    "start": "1320960",
    "end": "1326480"
  },
  {
    "text": "method it's given an ilogger interface now you could say it could analyze the whole program and see okay there's only",
    "start": "1326480",
    "end": "1332240"
  },
  {
    "text": "one concrete implementation so it must end up there yeah that is true but the dot net just in time compiler doesn't",
    "start": "1332240",
    "end": "1338000"
  },
  {
    "text": "generally do that it looks at just methods because that's quite expensive to analyze the whole program and even if it could analyze the whole program",
    "start": "1338000",
    "end": "1344240"
  },
  {
    "text": "actually you can dynamically load types so there's nothing to stop you doing plugins and assembly load from and all",
    "start": "1344240",
    "end": "1349600"
  },
  {
    "text": "that sort of stuff to load another implementation of the interface so essentially it means certainly at compile time and generally even at",
    "start": "1349600",
    "end": "1356080"
  },
  {
    "text": "startup time it can't guarantee except in a few niche cases where that",
    "start": "1356080",
    "end": "1362640"
  },
  {
    "text": "method so by the time the runtime executes a method it doesn't really care about interfaces now it needs to know",
    "start": "1362640",
    "end": "1369840"
  },
  {
    "text": "the place in memory where the code for that method is and it needs to be able to go there having put the parameters on",
    "start": "1369840",
    "end": "1375360"
  },
  {
    "text": "the stack or whatever the stuff it does before it needs to basically jump to that location and that code needs to execute does what it does and then jump",
    "start": "1375360",
    "end": "1381919"
  },
  {
    "text": "back and return values and all the things it does in a method call so it needs to have a concrete thing and",
    "start": "1381919",
    "end": "1387520"
  },
  {
    "text": "that's what virtual's all about so if we look at this example here we've",
    "start": "1387520",
    "end": "1392720"
  },
  {
    "text": "got an eye logger method so in the the one that isn't highlighted it's taking a concrete implementation",
    "start": "1392720",
    "end": "1398880"
  },
  {
    "text": "the compiler can figure all that out it knows it's a console logger class it can say right you just need to call the",
    "start": "1398880",
    "end": "1405039"
  },
  {
    "text": "console logger class log error method that's fine there's no issues there but if we're talking about",
    "start": "1405039",
    "end": "1410559"
  },
  {
    "text": "a method with a interface it needs to know which implementation of the log error function that ends up as",
    "start": "1410559",
    "end": "1417440"
  },
  {
    "text": "this is a slightly confusing example because actually when you knew up a class and then straightaway caller method that's saying",
    "start": "1417440",
    "end": "1424159"
  },
  {
    "text": "legit can figure out because you've literally just created the object so it's smart enough to do that so it can do some and that's something called d",
    "start": "1424159",
    "end": "1430640"
  },
  {
    "text": "virtualization that we'll get onto a minute but generally when it's looking at the something went wrong method at",
    "start": "1430640",
    "end": "1435760"
  },
  {
    "text": "the bottom highlighted it doesn't know until the method's called at runtime",
    "start": "1435760",
    "end": "1441200"
  },
  {
    "text": "what where it needs to jump to to actually execute that method",
    "start": "1441200",
    "end": "1447600"
  },
  {
    "text": "and so you see that in il if you dig down to that it uses the cool vert instruction it actually uses the cool",
    "start": "1447919",
    "end": "1453760"
  },
  {
    "text": "vert in the concrete case because the culvert also does null checking if you've ever looked at that so it's sort",
    "start": "1453760",
    "end": "1458960"
  },
  {
    "text": "of a safety thing because the cool verts there's actually a cool instruction that can be more efficient but it doesn't check for nulls but certainly in the",
    "start": "1458960",
    "end": "1465200"
  },
  {
    "text": "case we're looking at here it's covert so that's why it's virtual it doesn't know at compile time",
    "start": "1465200",
    "end": "1471520"
  },
  {
    "text": "um but something else we need to understand about this is whenever you call them sorry not whenever in most situations",
    "start": "1471520",
    "end": "1478080"
  },
  {
    "text": "you call a method in.net between the call sites where you you know you write foo and pass in the parameters and the",
    "start": "1478080",
    "end": "1484880"
  },
  {
    "text": "callee where the method actually executes there's generally a stub",
    "start": "1484880",
    "end": "1490799"
  },
  {
    "text": "and stubs are like everywhere in the runtime if you want proof that blog post is 11 000 words i wouldn't recommend",
    "start": "1491760",
    "end": "1498400"
  },
  {
    "text": "reading it all in one go there's a table of contents but it shows all the places p and vote goes through stubs there's",
    "start": "1498400",
    "end": "1503520"
  },
  {
    "text": "stubs that handle moving from managed to native code and marshalling and a few",
    "start": "1503520",
    "end": "1508559"
  },
  {
    "text": "other things there's stubs when you call generic methods because it needs to know about generic arguments because",
    "start": "1508559",
    "end": "1514559"
  },
  {
    "text": "uh we'll do generics in a minute but there's stubs in a lot of places and so i think of stubs as like a bit of",
    "start": "1514559",
    "end": "1520720"
  },
  {
    "text": "housekeeping a bit of fix up is not two method calls this is all one method",
    "start": "1520720",
    "end": "1525760"
  },
  {
    "text": "called the stub in the middle is like doing a bit of work moving a few things around and then a straight jump literally a jump assembly instruction to",
    "start": "1525760",
    "end": "1532559"
  },
  {
    "text": "the place and it does some fix up so that's what's going on with stubs",
    "start": "1532559",
    "end": "1538000"
  },
  {
    "text": "so this person simon hall i came across his name because there's something called the book of the run time and if you want to get into",
    "start": "1538000",
    "end": "1545760"
  },
  {
    "text": "the dot net runtime and you want a free results i showed some books earlier but on the github repository botr book of",
    "start": "1545760",
    "end": "1552240"
  },
  {
    "text": "the run time is under their docs folder it is um written",
    "start": "1552240",
    "end": "1557919"
  },
  {
    "text": "for runtime engineers by runtime engineers so it's not an introductory thing i often read one of these pages",
    "start": "1557919",
    "end": "1564400"
  },
  {
    "text": "uh scratch my head a bit make a few notes come back a week later and then understand a little bit more",
    "start": "1564400",
    "end": "1569440"
  },
  {
    "text": "and read it you know so it's not that they're uh not well written there's not there's not nice diagrams but they are",
    "start": "1569440",
    "end": "1574640"
  },
  {
    "text": "written with an assumption that you're already working on the runtime and here's how another bit of the runtime works so it's a bit of knowledge maybe",
    "start": "1574640",
    "end": "1580960"
  },
  {
    "text": "to get into them i've got some good mileage out of basically uh understanding enough about a book of the",
    "start": "1580960",
    "end": "1586480"
  },
  {
    "text": "runtime page to feel i can write a blog post to explain it to people who don't want to read the book of the runtime page so anyway but uh he wrote the page",
    "start": "1586480",
    "end": "1593039"
  },
  {
    "text": "on virtual stub dispatch and he was so pleased with what he did he put on his linkedin i mean you would because",
    "start": "1593039",
    "end": "1598640"
  },
  {
    "text": "virtual desktop dispatches every time a method or maybe not every time i think something they've done some stats in in",
    "start": "1598640",
    "end": "1604080"
  },
  {
    "text": "some measurements elsewhere 95 of methods when we call a method involving an interface go through virtual stub",
    "start": "1604080",
    "end": "1610400"
  },
  {
    "text": "dispatchers a few times that it can go directly but so in the dot net 2 time frame they did",
    "start": "1610400",
    "end": "1615600"
  },
  {
    "text": "they redesigned it and this is the sort of stuff that the runtime engineers have to worry about right so there's a",
    "start": "1615600",
    "end": "1620880"
  },
  {
    "text": "trade-off performance but also memory locality memory density if they had",
    "start": "1620880",
    "end": "1626159"
  },
  {
    "text": "something that made all our code run faster but every time the.net app started up it used twice as much memory",
    "start": "1626159",
    "end": "1631279"
  },
  {
    "text": "then we'd probably be a bit annoyed right so they have to do these trade-offs and um we'll come on as a second the stubs of small because they",
    "start": "1631279",
    "end": "1637919"
  },
  {
    "text": "don't want to make a have a bad trade-off in terms of memory um but they did um improve it so anyway yeah if i'd",
    "start": "1637919",
    "end": "1645200"
  },
  {
    "text": "if i'd done saying a significant that i'd be putting it on my linkedin that's for sure and you look at the other stuff you you did quite a lot of",
    "start": "1645200",
    "end": "1651520"
  },
  {
    "text": "interesting bits on the net runtime probably uh yeah ten years or so again",
    "start": "1651520",
    "end": "1656559"
  },
  {
    "text": "um so virtual stub dispatch the way it works is step by step is this uh first",
    "start": "1656559",
    "end": "1662000"
  },
  {
    "text": "time it comes in it's basically that i don't know right it doesn't know where that method exists the concrete method",
    "start": "1662000",
    "end": "1668960"
  },
  {
    "text": "it knows the object you're calling it again so it can do some lookups because the runtime has something called",
    "start": "1668960",
    "end": "1674559"
  },
  {
    "text": "a method table attached just in front of every object on the heap there's a pointer to the method table and the",
    "start": "1674559",
    "end": "1680640"
  },
  {
    "text": "method table is basically which type uh class or struts or whatever this object is off and that's",
    "start": "1680640",
    "end": "1686880"
  },
  {
    "text": "why we um have well one of the things it enables is reflection the strong you know the",
    "start": "1686880",
    "end": "1692720"
  },
  {
    "text": "really rich reflection that we get in dot net but it also helps with type safety and a few other things but that's",
    "start": "1692720",
    "end": "1699360"
  },
  {
    "text": "a an overheads that that's why um we talk about say we get into classes",
    "start": "1699360",
    "end": "1704799"
  },
  {
    "text": "versus struts every class instant object engine sorry on the heap has that overhead because it needs to be able to reference back from",
    "start": "1704799",
    "end": "1711360"
  },
  {
    "text": "the actual data of the object to say which type is this and that obviously also helps with things like when the",
    "start": "1711360",
    "end": "1716640"
  },
  {
    "text": "runtime's doing um class hierarchies to know whether which methods are called in the hierarchy if",
    "start": "1716640",
    "end": "1722159"
  },
  {
    "text": "you've overridden your inheritance and it also helps with um method sorry",
    "start": "1722159",
    "end": "1727279"
  },
  {
    "text": "interface so the first time is like i don't know so it has to fall back to",
    "start": "1727279",
    "end": "1732559"
  },
  {
    "text": "step four in this case which is basically go and find out where this method lives",
    "start": "1732559",
    "end": "1737679"
  },
  {
    "text": "i've got an object i know the method of the interface and remember that",
    "start": "1737679",
    "end": "1742960"
  },
  {
    "text": "an object has its own methods a class sorry a type has its own methods plus the ones that is implemented for the",
    "start": "1742960",
    "end": "1749279"
  },
  {
    "text": "interface you can have multiple interfaces implemented to the class you can explicitly implement interface",
    "start": "1749279",
    "end": "1755440"
  },
  {
    "text": "methods and you can have methods that just exist on your type that aren't anything to do with the interface so it has to figure all that out then you",
    "start": "1755440",
    "end": "1762000"
  },
  {
    "text": "throw in you know does this class override a base class and these are abstract classes and there's a bit of stuff to calculate there",
    "start": "1762000",
    "end": "1768480"
  },
  {
    "text": "once it knows that it starts to build up the stub and there's an assumption it makes basically there's a high chance that",
    "start": "1768480",
    "end": "1777039"
  },
  {
    "text": "next time you call the same method you might call it with the same type of object not the same instance but the",
    "start": "1777039",
    "end": "1782480"
  },
  {
    "text": "same type so that's the monomorphic case one i'm going to assume that and i believe",
    "start": "1782480",
    "end": "1788960"
  },
  {
    "text": "they've done some analysis of programs and some other things to say that's kind of common and it goes back to what we",
    "start": "1788960",
    "end": "1794240"
  },
  {
    "text": "said in the beginning we might implement an interface just for the sake of having that abstraction so we can make it union",
    "start": "1794240",
    "end": "1800480"
  },
  {
    "text": "testable in our production code there might only be one instant concrete implementation of that",
    "start": "1800480",
    "end": "1805600"
  },
  {
    "text": "class running there might be a two if you're looking at the test code but so that's why that",
    "start": "1805600",
    "end": "1811919"
  },
  {
    "text": "it's kind of let's optimize for the best case scenario which is there's one",
    "start": "1811919",
    "end": "1817520"
  },
  {
    "text": "implementation and it's the same one i saw last time but we know that's not true right all",
    "start": "1817520",
    "end": "1823120"
  },
  {
    "text": "the time so it has to have a fullback so it then has to fall back to the polymorphic right there's two implementations this interface i need to",
    "start": "1823120",
    "end": "1830240"
  },
  {
    "text": "look at the object every time and decide which one of those two it is and dispatch to the right place",
    "start": "1830240",
    "end": "1835520"
  },
  {
    "text": "and um and one thing worth pointing out in generic zelda it did sign called back patching so that the first time it comes",
    "start": "1835520",
    "end": "1842559"
  },
  {
    "text": "in it goes to the resolver straight down to four but next time it doesn't want to do that so back patches which is like",
    "start": "1842559",
    "end": "1848720"
  },
  {
    "text": "rewriting some location of code in memory to set the um",
    "start": "1848720",
    "end": "1854480"
  },
  {
    "text": "object so that next time it can say right is this the same object it does a comparison",
    "start": "1854480",
    "end": "1859519"
  },
  {
    "text": "another way of looking at if you want and this is from the book of the runtime is uh",
    "start": "1859519",
    "end": "1865360"
  },
  {
    "text": "this is a different path because it can change and it can actually say look i made a guess the first time based on the",
    "start": "1865360",
    "end": "1871679"
  },
  {
    "text": "fact i thought you'd always call it with this concrete implementation but you know",
    "start": "1871679",
    "end": "1876799"
  },
  {
    "text": "what in the 99 times since then you've called it a different one i think i better adjust my best guess because i'm",
    "start": "1876799",
    "end": "1882880"
  },
  {
    "text": "always falling back to the you know the worst case scenario so it's these things are changing and then it will redo the",
    "start": "1882880",
    "end": "1888320"
  },
  {
    "text": "back patching to have you know but it doesn't want to get in a case where it's always back patching you know so there's",
    "start": "1888320",
    "end": "1893760"
  },
  {
    "text": "a bit more logic there because you could get in a bad case where it's always swapping between two or things like that so again these are things they need to",
    "start": "1893760",
    "end": "1899600"
  },
  {
    "text": "worry about because it wouldn't be great if our method was quick the first time but every subsequent time it was slow so",
    "start": "1899600",
    "end": "1904880"
  },
  {
    "text": "these things have to adapt and in fact in the debug version of the runtime you can turn on some stats and",
    "start": "1904880",
    "end": "1910720"
  },
  {
    "text": "they're able to run a program and see things like effectively cache hits and misses how many times am i going through",
    "start": "1910720",
    "end": "1916000"
  },
  {
    "text": "the happy the best case path how many times am i falling back how many times am i changing my guess and repatching",
    "start": "1916000",
    "end": "1921519"
  },
  {
    "text": "and so on and this again is all back to the simon the guy i showed previously his page this was all different in dot",
    "start": "1921519",
    "end": "1927760"
  },
  {
    "text": "net one and they updated it in dot net two um for performance",
    "start": "1927760",
    "end": "1933120"
  },
  {
    "text": "and part of actually the other thing they did is you can um have two cool sites and they can go through two",
    "start": "1933200",
    "end": "1939360"
  },
  {
    "text": "different stubs even though they end up the same page because basically they determined that the call sites could be",
    "start": "1939360",
    "end": "1945279"
  },
  {
    "text": "calling the same method but with different usage patterns so again this was like a this was a",
    "start": "1945279",
    "end": "1950880"
  },
  {
    "text": "trade-off they said right we'll have more stubs we'll keep them small we'll have more stubs but it gives better throughput",
    "start": "1950880",
    "end": "1958080"
  },
  {
    "text": "i'm not going to show a lot of assembly codes because i can't understand it all let's be clear but i can at least",
    "start": "1958080",
    "end": "1963279"
  },
  {
    "text": "understand this so this is the kind of monomorphic case what it's doing is a comparison of the eax which is like the",
    "start": "1963279",
    "end": "1971120"
  },
  {
    "text": "uh point of the current object comparing it to expected this is like i've seen",
    "start": "1971120",
    "end": "1976720"
  },
  {
    "text": "this before are you the same type i saw last time if you're not jump to the failure case",
    "start": "1976720",
    "end": "1982399"
  },
  {
    "text": "the the worst case i need to adjust my logic or i need to fall back to something else",
    "start": "1982399",
    "end": "1988000"
  },
  {
    "text": "if you are what i expect because i've seen you before then jump straight to the target so we see that actually it's",
    "start": "1988000",
    "end": "1993279"
  },
  {
    "text": "two assembly instructions they've got it down to two assembly instructions for the best case scenario and again this is the sort of stuff that",
    "start": "1993279",
    "end": "1999679"
  },
  {
    "text": "the runtime engineers have to worry about if that was too big and we had lots of these stubs in memory and that",
    "start": "1999679",
    "end": "2005360"
  },
  {
    "text": "you know you can imagine how many places in our code we call different cool sites calling different um methods",
    "start": "2005360",
    "end": "2011760"
  },
  {
    "text": "a lot basically um but this is all overhead so they would like to get rid of it so that's",
    "start": "2011760",
    "end": "2018240"
  },
  {
    "text": "the opposite of all this is de-virtualization and if the jit can actually say do you know what i don't",
    "start": "2018240",
    "end": "2023760"
  },
  {
    "text": "need to do any of this it can save the two extra even in the best cases instructions",
    "start": "2023760",
    "end": "2030240"
  },
  {
    "text": "it's part of it is also it's not just the best case but like the the first time through when i said it has to fall",
    "start": "2030240",
    "end": "2035840"
  },
  {
    "text": "back that's slow so that first time through equals slower startup so that's why this is also important so there's",
    "start": "2035840",
    "end": "2041679"
  },
  {
    "text": "been some work uh this is from a little while ago yeah back in 2017. i think this issue is still open",
    "start": "2041679",
    "end": "2049039"
  },
  {
    "text": "they're trying to say is there more and more situations we can skip all this out it's a great mechanism they've",
    "start": "2050000",
    "end": "2055280"
  },
  {
    "text": "tuned it over time it's about as efficient as it could be when you're talking two assembly instructions but you know what code would be even faster",
    "start": "2055280",
    "end": "2061919"
  },
  {
    "text": "and this is when we get into like checking power running at you know million frames a second uh sorry a million uh 10 million requests per",
    "start": "2061919",
    "end": "2068240"
  },
  {
    "text": "second in front um that sort of level right this thing starts to matter more so sometimes",
    "start": "2068240",
    "end": "2073679"
  },
  {
    "text": "some places may not use interfaces because there is a cost overhead you have to time it to prove it's really a",
    "start": "2073679",
    "end": "2079200"
  },
  {
    "text": "difference for your situation but there is a cost overhead for interfaces",
    "start": "2079200",
    "end": "2084480"
  },
  {
    "text": "so we've covered that so value types i'm sure these are familiar to most people who's ever had uh an interview",
    "start": "2084480",
    "end": "2090800"
  },
  {
    "text": "where you've been asked about struts versus classes right it's pretty yeah i think it's hard it feels like hard to",
    "start": "2090800",
    "end": "2096960"
  },
  {
    "text": "get a net job at some point in your crew or you don't get asked that and there's a whole thing about do they live on the heat they live on the stack whatever you",
    "start": "2096960",
    "end": "2103359"
  },
  {
    "text": "know people you know you read read it on stack overflow get the answer next time you have a job interview but um",
    "start": "2103359",
    "end": "2109680"
  },
  {
    "text": "the point more is about what they're implemented so the things that we do know about struts and versus classes",
    "start": "2109680",
    "end": "2116720"
  },
  {
    "text": "is there's no method table overhead for a strut so they compact more in memory and that's one of the main reasons",
    "start": "2116720",
    "end": "2122400"
  },
  {
    "text": "people end up using them because the the data needed for a structure is just the data for the fields of that",
    "start": "2122400",
    "end": "2128480"
  },
  {
    "text": "strut i think it's one thing in terms of like taking stuff for granted right we",
    "start": "2128480",
    "end": "2133680"
  },
  {
    "text": "changed the struct keyword the class keyword destruct right it's one one word change there's quite a lot of stuff that",
    "start": "2133680",
    "end": "2139760"
  },
  {
    "text": "that implications for the runtime is quite big behind the scenes um so yeah if you had an array of um",
    "start": "2139760",
    "end": "2146160"
  },
  {
    "text": "struts the data in the ray would be literally struts zero structure one packed in there",
    "start": "2146160",
    "end": "2152160"
  },
  {
    "text": "the fields of that within that if you have an array of classes what you've got is an array of references",
    "start": "2152160",
    "end": "2157280"
  },
  {
    "text": "that point to the the actual reference living somewhere else they might be all near each other if you",
    "start": "2157280",
    "end": "2163200"
  },
  {
    "text": "allocate them together they could be all over the gc can move things around compact whatever but it's still that",
    "start": "2163200",
    "end": "2168400"
  },
  {
    "text": "extra level of indirection that reference to go from what's in the array which is a it does mean that reference is easier to",
    "start": "2168400",
    "end": "2174880"
  },
  {
    "text": "handle in some ways because a reference is always the same size because it's a pointer to somewhere else but struts",
    "start": "2174880",
    "end": "2181440"
  },
  {
    "text": "give us if you care about packing things in memory if you care about the efficiency of not having that extra",
    "start": "2181440",
    "end": "2186560"
  },
  {
    "text": "level of indirection that's why i think in games and things like that or you go and look in the",
    "start": "2186560",
    "end": "2191680"
  },
  {
    "text": "kestrel source code that's what's running um in the tech and power benchmarks that that sort of thing",
    "start": "2191680",
    "end": "2197200"
  },
  {
    "text": "becomes more of an issue and there's also the discussion around allocation and you know it causes gc",
    "start": "2197200",
    "end": "2203520"
  },
  {
    "text": "generally struts uh can be allocated on the stack except well they aren't going to go into that whole thing as i said",
    "start": "2203520",
    "end": "2208560"
  },
  {
    "text": "look it up stack overflow but you can a lot of time assume that they are allocated on the stack which equals no gc no gc pauses",
    "start": "2208560",
    "end": "2217200"
  },
  {
    "text": "but as i said we take it for granted uh so i counted a while back because there's 63 places in the run times no",
    "start": "2217520",
    "end": "2223040"
  },
  {
    "text": "64. 64 places in the runtime and 23 issues also i don't know um where they",
    "start": "2223040",
    "end": "2228480"
  },
  {
    "text": "where the code has the runtime code has to care whether the of the type sorry that it's dealing with is a is a value",
    "start": "2228480",
    "end": "2235760"
  },
  {
    "text": "type or is a struct or is a reference type and a lot of that um you can see",
    "start": "2235760",
    "end": "2241920"
  },
  {
    "text": "something like um reflection invocation of class there but a lot of that is the first case which is",
    "start": "2241920",
    "end": "2248000"
  },
  {
    "text": "boxing right boxing is one of the things it has to worry about once you get into value types because you can box value",
    "start": "2248000",
    "end": "2253359"
  },
  {
    "text": "types into an object and it has to deal with that and that's what the runtime helps us out with",
    "start": "2253359",
    "end": "2258880"
  },
  {
    "text": "but another place is when you're calling a method you're calling a method with",
    "start": "2258880",
    "end": "2264079"
  },
  {
    "text": "reference it's when the word comes in right by reference you're passing a reference to an object",
    "start": "2264079",
    "end": "2269359"
  },
  {
    "text": "that reference is always the same size on 32-bit or 64-bit you just pass in effect to pointer and then the method",
    "start": "2269359",
    "end": "2275680"
  },
  {
    "text": "that on the other call site sorry the callee on the other end just takes that reference and then can access the type",
    "start": "2275680",
    "end": "2282480"
  },
  {
    "text": "struts passed by value it needs to physically put the contents of the strut",
    "start": "2282480",
    "end": "2288320"
  },
  {
    "text": "and at this level we're talking about on the stack or as an optimization registers so there's a certain amount of",
    "start": "2288320",
    "end": "2295200"
  },
  {
    "text": "registers it varies again per cpu there's rules about registers some registers are reserved so you see in the",
    "start": "2295200",
    "end": "2301440"
  },
  {
    "text": "top case here and i haven't got the laser but you see in the top left here uh this parameter",
    "start": "2301440",
    "end": "2307119"
  },
  {
    "text": "so that's passed around as like an implicit parameter so we call a method we don't ever pass this parameter but if",
    "start": "2307119",
    "end": "2312960"
  },
  {
    "text": "we're calling an instance method on a class that's done for us behind the scenes um the reason in this case uh if you",
    "start": "2312960",
    "end": "2319520"
  },
  {
    "text": "haven't picked it up yet what's happening is all the arguments are being shuffled one left so this pointer is",
    "start": "2319520",
    "end": "2324560"
  },
  {
    "text": "being dropped and it's shuffled one left if you want to find out what's going on there you can read the issue it's one of",
    "start": "2324560",
    "end": "2330079"
  },
  {
    "text": "my favorite things i've discovered it's called a gener a shuffle thunk and its job is to move everything that way because by the time the method is called",
    "start": "2330079",
    "end": "2336960"
  },
  {
    "text": "this argument needs to not be there and it's it's to do with delegates and i'm not going to go into oh if you're not come and ask me later i can explain a",
    "start": "2336960",
    "end": "2342640"
  },
  {
    "text": "bit more but the point is um this is the stuff it has to deal with and it would like to put as much possible in uh we've",
    "start": "2342640",
    "end": "2348960"
  },
  {
    "text": "highlighted it green right that's registers registers are fast and stack so when it gets down to moving stuff",
    "start": "2348960",
    "end": "2355520"
  },
  {
    "text": "around if it can reuse registers great but there's rules about which registers can be used certain data types only",
    "start": "2355520",
    "end": "2362400"
  },
  {
    "text": "fitted certain registers you have special purpose registers they're different on x86 versus x64 you also",
    "start": "2362400",
    "end": "2368079"
  },
  {
    "text": "have to respect the platform or os running on them because there's some rules about registers and um saying",
    "start": "2368079",
    "end": "2373839"
  },
  {
    "text": "that's known as abi application binary interface which is how do methods get called on this platform so that's",
    "start": "2373839",
    "end": "2379200"
  },
  {
    "text": "different on windows versus linux even under x86 so complexity all over the",
    "start": "2379200",
    "end": "2384400"
  },
  {
    "text": "place um but yeah just to give you a sort of uh idea so it's shuffling these things around because um",
    "start": "2384400",
    "end": "2390880"
  },
  {
    "text": "when you go from a cool site to a callee the callee of that method expects things",
    "start": "2390880",
    "end": "2396800"
  },
  {
    "text": "to be in a certain place it needs to know the rules of where it can get the parameters for that method it knows what",
    "start": "2396800",
    "end": "2401839"
  },
  {
    "text": "type of method it is it knows it's got you know three arguments um but it's a job of the call site to",
    "start": "2401839",
    "end": "2407680"
  },
  {
    "text": "put things in the right registers if it's a very you know these things are uh sort of um laid out in in something",
    "start": "2407680",
    "end": "2414240"
  },
  {
    "text": "called api's application binary interfaces",
    "start": "2414240",
    "end": "2418720"
  },
  {
    "text": "another thing about generics this might be a bit more known but if you have a",
    "start": "2419280",
    "end": "2424880"
  },
  {
    "text": "generic method simplest one possible literally storing a value it's a wrapper right we've got one field of type t",
    "start": "2424880",
    "end": "2430640"
  },
  {
    "text": "we've got a store method where we pass in t and it stores it right it seems a bit contrived but i'll show",
    "start": "2430640",
    "end": "2436000"
  },
  {
    "text": "in a minute there's actually real world examples for this the point is is if t is a reference type",
    "start": "2436000",
    "end": "2441440"
  },
  {
    "text": "it does um sharing right it can basically say all reference types are in terms of what",
    "start": "2441440",
    "end": "2448000"
  },
  {
    "text": "i need to worry about are the same size so i can i know the location i can store them in the same location i don't care",
    "start": "2448000",
    "end": "2455040"
  },
  {
    "text": "whether it's your own class or a base class library class if it's a reference type easy so",
    "start": "2455040",
    "end": "2460640"
  },
  {
    "text": "it does shared and that's to stop there being an explosion of methods if it did a different method for every",
    "start": "2460640",
    "end": "2467280"
  },
  {
    "text": "time we you know so we have like i list right that's generic if every time we need upper lists for a different",
    "start": "2467280",
    "end": "2473520"
  },
  {
    "text": "type you know so the runtime cares enough to make sure there's not a lot of extra methods and it can do that by",
    "start": "2473520",
    "end": "2479200"
  },
  {
    "text": "sharing all the method implementations at the assembly code level for",
    "start": "2479200",
    "end": "2484480"
  },
  {
    "text": "reference types it can't do the same for value types so this is primitives same applies if it was our own struts",
    "start": "2484480",
    "end": "2492079"
  },
  {
    "text": "so that's because partly it's because they're different sizes so an int is different size and a double so it can't",
    "start": "2492079",
    "end": "2497599"
  },
  {
    "text": "make assumptions about even something as simple as storing a value because they need to be stored differently because they have different physical sizes even",
    "start": "2497599",
    "end": "2504400"
  },
  {
    "text": "if they're the same size we sort of see a bit here there's different assembly instructions that make sense so this is",
    "start": "2504400",
    "end": "2509440"
  },
  {
    "text": "like a vectorized version the bottom right can store the double more efficiently legit cares about this because we want",
    "start": "2509440",
    "end": "2515280"
  },
  {
    "text": "our code to be as fast as possible with some of the stuff the jit does for us we don't probably think about it right i",
    "start": "2515280",
    "end": "2520319"
  },
  {
    "text": "just want to put whatever i want in a list but actually the jit students work to make the double version as efficient",
    "start": "2520319",
    "end": "2526319"
  },
  {
    "text": "as it could be for doubles versus the version for floats versus for ins um but it does mean it has to create",
    "start": "2526319",
    "end": "2531920"
  },
  {
    "text": "different versions so this is you know there'd be two different versions of this store method for both these cases",
    "start": "2531920",
    "end": "2539520"
  },
  {
    "text": "why this is important because actually you can kind of use it as a trick and i suppose some people have heard of ben",
    "start": "2539599",
    "end": "2545200"
  },
  {
    "text": "adams right people heard of um if you want to learn about some really good performance tricks look up",
    "start": "2545200",
    "end": "2552000"
  },
  {
    "text": "ben adams github profile and see some of the pr's he's done in the kestrel web server like this one here",
    "start": "2552000",
    "end": "2558000"
  },
  {
    "text": "in asp.net sometimes in the runtime it's fair to say you know he's what he's",
    "start": "2558000",
    "end": "2563119"
  },
  {
    "text": "talking about with performance and he's submitted many many pr's and quite a lot of them have what helped push the tech",
    "start": "2563119",
    "end": "2569040"
  },
  {
    "text": "in power uh up if you've seen the taking power results they publish from time to time showing.net",
    "start": "2569040",
    "end": "2574640"
  },
  {
    "text": "basically.net competing with others i think it's kind of it's one of those ones that's at the level of they're",
    "start": "2574640",
    "end": "2580079"
  },
  {
    "text": "maxing out the network card right they're all there's a few that are sort of all within a kind of space for each other it shows that actually uh you know",
    "start": "2580079",
    "end": "2587680"
  },
  {
    "text": "maybe we're not writing code that needs to run at 10 million requests per second but it's quite nice to know that we're working on a run time that could be used",
    "start": "2587680",
    "end": "2594960"
  },
  {
    "text": "for that if we'd ever need to um but he uses this thing",
    "start": "2594960",
    "end": "2600480"
  },
  {
    "text": "david fallon for many people know calls it type system abuse he likes to call it working with type",
    "start": "2600480",
    "end": "2605839"
  },
  {
    "text": "systems you can actually use this trick of the uh legit having to make a different version of every generic method you can",
    "start": "2605839",
    "end": "2612800"
  },
  {
    "text": "use it to get more efficient code um and he did that so he literally is very similar to the code of wrote a few",
    "start": "2612800",
    "end": "2618400"
  },
  {
    "text": "slides back he wrapped a frame in a strut frame adapter that pretty much you can see stores the frame and then passes",
    "start": "2618400",
    "end": "2625839"
  },
  {
    "text": "through the methods to and then obviously wrapped it when you do it and this 39 000 extra requests per",
    "start": "2625839",
    "end": "2633359"
  },
  {
    "text": "second and the reason it can do that going back to the previous slide showing ins versus doubles is for every",
    "start": "2633359",
    "end": "2639119"
  },
  {
    "text": "different struct it sees legit makes a different method and because it makes a different method you can optimize it",
    "start": "2639119",
    "end": "2645119"
  },
  {
    "text": "just for that code so that can be the most efficient version so we saw the one of ins and doubles it was making them",
    "start": "2645119",
    "end": "2650800"
  },
  {
    "text": "more efficient based on that there's other stuff the jit can do but it can specialize because it's not making a",
    "start": "2650800",
    "end": "2656079"
  },
  {
    "text": "kind of generic generic method if that makes sense with struts i'm not saying wrap every",
    "start": "2656079",
    "end": "2661680"
  },
  {
    "text": "class in your codes with a struts please don't do that um as you can see i mean",
    "start": "2661680",
    "end": "2666880"
  },
  {
    "text": "it's it's a nice number but it's it was already at one million requests per second one point yeah one 121 thousand",
    "start": "2666880",
    "end": "2673359"
  },
  {
    "text": "it went up to one million you know we're talking quite a you need to be at quite a high level performance before this really helps um but anyway it's part of",
    "start": "2673359",
    "end": "2681200"
  },
  {
    "text": "what um uh the runtime provides has given us this flexibility because not all runtimes has the ability of value types",
    "start": "2681200",
    "end": "2687359"
  },
  {
    "text": "right not going to start naming names but there is some that don't let you create your own value types or are still",
    "start": "2687359",
    "end": "2693040"
  },
  {
    "text": "trying to get that in their runtime so it's quite nice that net clr gives us this option if we need it",
    "start": "2693040",
    "end": "2700400"
  },
  {
    "text": "having said all that they want to have universal share generics because obviously there's a",
    "start": "2700400",
    "end": "2706160"
  },
  {
    "text": "cost for all of this for the runtime and they'd like to make the ability to have more generic methods because we don't always need that extra",
    "start": "2706160",
    "end": "2712400"
  },
  {
    "text": "performance and so um yeah there's an idea it's again this is from a little while ago me basically asking what",
    "start": "2712400",
    "end": "2719200"
  },
  {
    "text": "you're talking about what is universal share generics but the idea is that actually there's a cost and the reason it matters",
    "start": "2719200",
    "end": "2725119"
  },
  {
    "text": "more is because of ahead of time compilation this specialized version of the code has to be jitted at runtime that doesn't",
    "start": "2725119",
    "end": "2731599"
  },
  {
    "text": "help so when you want to have generics and ahead of time compilation as i said generics makes everything harder in the",
    "start": "2731599",
    "end": "2737280"
  },
  {
    "text": "runtime this is the sort of thing they might need to go down the route of having not having specialized even",
    "start": "2737280",
    "end": "2742480"
  },
  {
    "text": "though it gives a nice performance boost in some cases i think that ultimately for ahead of time compilation that's you",
    "start": "2742480",
    "end": "2748079"
  },
  {
    "text": "can see why mono's had it there for a little while as well",
    "start": "2748079",
    "end": "2752560"
  },
  {
    "text": "and it plays a part okay so on to another thing of value",
    "start": "2753680",
    "end": "2760480"
  },
  {
    "text": "type so boxing so we generally say boxing is uh is is bad right you want to avoid if possible you don't want to",
    "start": "2760480",
    "end": "2766960"
  },
  {
    "text": "always be boxing your struts into an object but but even in that case the runtime",
    "start": "2766960",
    "end": "2773920"
  },
  {
    "text": "tries to make it as efficient as possible and clearly those more objects go on the heap and the garbage collector",
    "start": "2773920",
    "end": "2778960"
  },
  {
    "text": "has to do more work but the garbage collector is a pretty impressive bit of code and there's you know it's not like",
    "start": "2778960",
    "end": "2784560"
  },
  {
    "text": "all garbage collection is slow and pauses your application is many times it can clean up huge amounts of memory on",
    "start": "2784560",
    "end": "2791040"
  },
  {
    "text": "the heap without your program you know beating her having a beat or whatever",
    "start": "2791040",
    "end": "2796560"
  },
  {
    "text": "so uh even for saying like boxing which is considered you shouldn't be doing it excessively they at least try to make it",
    "start": "2796560",
    "end": "2802400"
  },
  {
    "text": "as efficient as it could be so it'll try and try and inlining in lining is like the first thing the jit does because if you",
    "start": "2802400",
    "end": "2808240"
  },
  {
    "text": "can inline a method into the cooling method then it's just more efficient because you haven't even got the mechanism of a method call and it can",
    "start": "2808240",
    "end": "2814800"
  },
  {
    "text": "then do other optimizations after that but it generally only does that for things it knows about in 64's primitive",
    "start": "2814800",
    "end": "2821119"
  },
  {
    "text": "types so there's an assembly helper so one of the things you see quite a lot in the runtime is",
    "start": "2821119",
    "end": "2826640"
  },
  {
    "text": "handwritten assembly code because if you think right so the options for the runtime is write it in c",
    "start": "2826640",
    "end": "2832400"
  },
  {
    "text": "plus plus so that's okay you can you can rely but then you're relying on the compiler doing the right thing",
    "start": "2832400",
    "end": "2838319"
  },
  {
    "text": "you could write a lot of runtime code in manage code and then you need the jit to jit it",
    "start": "2838319",
    "end": "2843520"
  },
  {
    "text": "but the jit isn't necessarily uh thinking too much about jitting the sort",
    "start": "2843520",
    "end": "2848640"
  },
  {
    "text": "of code that exists in the run time it's more worried about jitting the code wheel right and making that efficient",
    "start": "2848640",
    "end": "2853680"
  },
  {
    "text": "and certainly when they were first making the runtime they're making it at the same time as the jit was being made so there wasn't you know so it's kind of",
    "start": "2853680",
    "end": "2859520"
  },
  {
    "text": "chicken and egg thing so there's times where there's handwritten bits of assembly um just because it's very",
    "start": "2859520",
    "end": "2864800"
  },
  {
    "text": "specific what they want to do or because it's performance or because they can't write it any other way because it won't",
    "start": "2864800",
    "end": "2870079"
  },
  {
    "text": "do the most performant code and then it falls back to some c plus plus code so",
    "start": "2870079",
    "end": "2875280"
  },
  {
    "text": "again there's a sort of idea a lot of the time to run time like a fast path there's many times that the uh code can",
    "start": "2875280",
    "end": "2881839"
  },
  {
    "text": "allocate without needing uh to trigger a um garbage collection if uh",
    "start": "2881839",
    "end": "2888319"
  },
  {
    "text": "you're in any gc tool called certainly talked about this one is an idea of segments and if there's space in the",
    "start": "2888319",
    "end": "2893520"
  },
  {
    "text": "current segment uh allocation is really just bumping a pointer to make space for the object it's only when it runs out of",
    "start": "2893520",
    "end": "2899200"
  },
  {
    "text": "space in the segment then the gc has to get involved and decide whether to allocate more segments or do a garbage",
    "start": "2899200",
    "end": "2904720"
  },
  {
    "text": "collection and so on so a lot of the time allocation uh not really allocation it's just bumping",
    "start": "2904720",
    "end": "2910000"
  },
  {
    "text": "a pointer sometimes it can fall back to those to give an idea of some of this code um [Music]",
    "start": "2910000",
    "end": "2916240"
  },
  {
    "text": "essentially uh is copying via pointer um if you've ever done any c plus plus this",
    "start": "2916240",
    "end": "2921359"
  },
  {
    "text": "is like you know the sort of stuff you have to write in c but it's basically",
    "start": "2921359",
    "end": "2926400"
  },
  {
    "text": "if it can if it's a certain size so one two four or eight it will just literally copy so we're talking about here you've",
    "start": "2926400",
    "end": "2933119"
  },
  {
    "text": "got your struts and you've just ended up being boxed and it needs to create a chunk of memory on the heap and put the",
    "start": "2933119",
    "end": "2939680"
  },
  {
    "text": "contents of that strut into the if you like into the box i guess that's where the name comes from",
    "start": "2939680",
    "end": "2944880"
  },
  {
    "text": "um so it needs to copy the contents of your structure that time turn it into we would have already created an object",
    "start": "2944880",
    "end": "2951359"
  },
  {
    "text": "that is represents the box version of that but needs to put the data in and it",
    "start": "2951359",
    "end": "2956640"
  },
  {
    "text": "has a full back if it's not one of the nice cases of the right sort of size because it can't just do it via pointers of unsigned 32 and so on um but it also",
    "start": "2956640",
    "end": "2965040"
  },
  {
    "text": "has to tell the garbage collector you've if you know with struts you can actually",
    "start": "2965040",
    "end": "2970240"
  },
  {
    "text": "have a strut that has a reference and this is when struts get complicated you can have a strut that contains a field",
    "start": "2970240",
    "end": "2975599"
  },
  {
    "text": "that is a class right that's for you know you can write code like that so if it's then making a copy of that",
    "start": "2975599",
    "end": "2982079"
  },
  {
    "text": "then it has to tell the gc look hey i've made another reference to a object you need to know about that",
    "start": "2982079",
    "end": "2988160"
  },
  {
    "text": "because that's going to affect how you do garbage collection right you need to know there's now two references and only when they both go can you clean it up",
    "start": "2988160",
    "end": "2993200"
  },
  {
    "text": "and all that sort of stuff so that's what it's doing this is like the lowest level and even then it's doing some um you",
    "start": "2993200",
    "end": "2999440"
  },
  {
    "text": "know interesting stuff with pointers and car oh gosh yeah don't you love c plus plus although actually you can write",
    "start": "2999440",
    "end": "3005280"
  },
  {
    "text": "nowadays you can write c sharp code that looks not too dissimilar with all the new features they keep adding but",
    "start": "3005280",
    "end": "3011119"
  },
  {
    "text": "lets you write something more and more like c sharp it's also quite nice that basically it's",
    "start": "3011119",
    "end": "3016319"
  },
  {
    "text": "uh you know some of the code in the runtime is readable even if you're not c plus right we can all read a while loop",
    "start": "3016319",
    "end": "3021440"
  },
  {
    "text": "and stuff like that we can have a rough idea of what's going on uh unboxing is uh the reverse you don't",
    "start": "3021440",
    "end": "3027760"
  },
  {
    "text": "tend to unbox as much as your box really it's normally a one-way thing but you can unbox if you want to",
    "start": "3027760",
    "end": "3033920"
  },
  {
    "text": "and again there's some again the runtime tries to do the best it can in all these situations you probably shouldn't box",
    "start": "3033920",
    "end": "3040000"
  },
  {
    "text": "because it's i overhead but you know if you're boxing then you're gonna you probably shouldn't",
    "start": "3040000",
    "end": "3045520"
  },
  {
    "text": "unbox because it's even more overhead but it still made it as quick as it can across the runtime",
    "start": "3045520",
    "end": "3050720"
  },
  {
    "text": "another thing to think about with struts is that essentially um",
    "start": "3050720",
    "end": "3056640"
  },
  {
    "text": "when you pass a strut it's kind of like so you have an instance method on a strut it's kind of like you're passing",
    "start": "3056640",
    "end": "3062319"
  },
  {
    "text": "it with the ref keyword because when you call an instance method on a strut and it you know",
    "start": "3062319",
    "end": "3067680"
  },
  {
    "text": "changes the value of a field or whatever you'd like it to operate on the the the struct you called it on you",
    "start": "3067680",
    "end": "3072960"
  },
  {
    "text": "wouldn't like it to be on a copy right because then you'd lose those values so um",
    "start": "3072960",
    "end": "3078480"
  },
  {
    "text": "again uh runtime we don't care right when we call a method on a an instance method on a strut versus a class we're",
    "start": "3078480",
    "end": "3084480"
  },
  {
    "text": "not worrying about what's going on but the runtime has to figure some of this stuff out to make sure it does what we'd expect",
    "start": "3084480",
    "end": "3091680"
  },
  {
    "text": "and another one to finish with on struts so you have a structure you might override two string right",
    "start": "3091680",
    "end": "3096960"
  },
  {
    "text": "think about what happens when you box the struct there's a two string method on object right so you would like your",
    "start": "3096960",
    "end": "3104319"
  },
  {
    "text": "two string method to be called not the kind of standard one built in one on object which basically prints the type",
    "start": "3104319",
    "end": "3109440"
  },
  {
    "text": "name right if you've ever seen that but uh it gets a bit complicated so",
    "start": "3109440",
    "end": "3115920"
  },
  {
    "text": "as we talked about before a struct looks like this in memory when it's boxed you've got the extra stuff the method",
    "start": "3115920",
    "end": "3120960"
  },
  {
    "text": "table the object header and then the data at the end is the same that's basically how it does boxing in a",
    "start": "3120960",
    "end": "3126559"
  },
  {
    "text": "pictorial form when you uh have an object the this point of the",
    "start": "3126559",
    "end": "3132319"
  },
  {
    "text": "point of the object is actually to the front of the method table so it can then do that kind of look up",
    "start": "3132319",
    "end": "3137920"
  },
  {
    "text": "quite quickly it could be behind a meta table but the runtime chooses to be between the object header and the method table",
    "start": "3137920",
    "end": "3145119"
  },
  {
    "text": "but essentially it means that by the time you've called the my the tostring method the pointer actually needs to be",
    "start": "3145119",
    "end": "3151440"
  },
  {
    "text": "here because that two-string method will make assumptions about the layout i'll destruct so this is getting way into the weeds on",
    "start": "3151440",
    "end": "3158000"
  },
  {
    "text": "like struts but essentially uh even if you're boxing struts the runtime and i said stubs for everywhere there's a stub",
    "start": "3158000",
    "end": "3164160"
  },
  {
    "text": "that fixes up that pointer so it can just so again you know if we ever meet a.net runtime engineer this is stuff we",
    "start": "3164160",
    "end": "3170559"
  },
  {
    "text": "generally don't have to worry about we should probably uh thank them that we can just write code in the most simple way",
    "start": "3170559",
    "end": "3177440"
  },
  {
    "text": "and it does the right thing and it does it efficiently okay on to the last section that i'm talking about today tier compilation",
    "start": "3177599",
    "end": "3183839"
  },
  {
    "text": "people heard about this this has been around for a little while in net core um a few people yeah okay so uh it's",
    "start": "3183839",
    "end": "3191200"
  },
  {
    "text": "been in the runtime since 2.1 and they turned it on by default since three i",
    "start": "3191200",
    "end": "3197280"
  },
  {
    "text": "think anyway certainly in dot net five and six it's on by default um and the basic idea behind it is um",
    "start": "3197280",
    "end": "3206839"
  },
  {
    "text": "that uh the problem with uh just in time is it's just entirely i mean the not necessary",
    "start": "3206839",
    "end": "3213200"
  },
  {
    "text": "problem but it's the nature of it but if you have method a that calls method b that calls method c that calls method d",
    "start": "3213200",
    "end": "3218880"
  },
  {
    "text": "they all need to get jitted before they can run because it has it as it hits the point in method a that it needs to jit",
    "start": "3218880",
    "end": "3224079"
  },
  {
    "text": "method b it goes and jits it and so on so jitting can be a problem for startup",
    "start": "3224079",
    "end": "3229119"
  },
  {
    "text": "uh if you've ever used like engine and things like that there is ways around that you can pre-compile that so it doesn't have to do that and certainly",
    "start": "3229119",
    "end": "3235359"
  },
  {
    "text": "the the base class libraries and the runtime is shipped with that all done because otherwise startup would be really slow",
    "start": "3235359",
    "end": "3241040"
  },
  {
    "text": "um but our code generally isn't unless we've made the step of doing engine previously now ready r2 are ready to run",
    "start": "3241040",
    "end": "3247520"
  },
  {
    "text": "is the kind of precursor for that so you can do that and it obviously matters startup is",
    "start": "3247520",
    "end": "3253599"
  },
  {
    "text": "matters more in like a containerized world right where or azure functions those sorts of things where you know we expect things to be",
    "start": "3253599",
    "end": "3260640"
  },
  {
    "text": "running quickly if it's a long running process on a server maybe starting up in five seconds versus two is not such a",
    "start": "3260640",
    "end": "3266800"
  },
  {
    "text": "problem if it's a function that takes that you know a second to run then that starts to become a problem so that this",
    "start": "3266800",
    "end": "3271839"
  },
  {
    "text": "whole startup is saying they worry about um and again another stub",
    "start": "3271839",
    "end": "3277200"
  },
  {
    "text": "so when the code and the way it works is just in time is it puts the stub into place and the first time you call a",
    "start": "3277200",
    "end": "3283359"
  },
  {
    "text": "method it hits that stub and that stub's job is then to jit the method and then rewrite the stub so that",
    "start": "3283359",
    "end": "3289920"
  },
  {
    "text": "next time you don't go through the stub you go straight to the methods that's what the stubs there",
    "start": "3289920",
    "end": "3295200"
  },
  {
    "text": "and so you see after jitting we've lost the pre-stub pre-code fix-up",
    "start": "3295200",
    "end": "3300480"
  },
  {
    "text": "has to still exist for a bunch of scenarios and can also help with things like generics and other places where we",
    "start": "3300480",
    "end": "3306640"
  },
  {
    "text": "always need a stub but there is a way to go straight to the native code so yeah the pre-stub is what's happening",
    "start": "3306640",
    "end": "3313440"
  },
  {
    "text": "the first time if you ever and you can sometimes see this if you debug code some of these things show up in a stack trace",
    "start": "3313440",
    "end": "3319520"
  },
  {
    "text": "pre-stub with tier compilation what they've done is they've left some of that in so",
    "start": "3319520",
    "end": "3324799"
  },
  {
    "text": "they've left the pre-stub in but it's now got a counter and the basic idea of tier compilation is this is that",
    "start": "3324799",
    "end": "3330720"
  },
  {
    "text": "actually a lot of methods don't need to be heavily optimized the first time right if that method only",
    "start": "3330720",
    "end": "3336960"
  },
  {
    "text": "runs once why spend relatively a long time in the jits doing all these really impressive",
    "start": "3336960",
    "end": "3342960"
  },
  {
    "text": "optimizations if it's only going to execute once but you know what if that method is executed",
    "start": "3342960",
    "end": "3348480"
  },
  {
    "text": "10 000 times a second you'd really like the most optimal version of that method so what tier compilation does it breaks",
    "start": "3348480",
    "end": "3354720"
  },
  {
    "text": "that dependency says right the first end times i believe it was 30 but anyway there's a counter it can be a bit more",
    "start": "3354720",
    "end": "3360319"
  },
  {
    "text": "intelligent that but it says look we'll do the quickest jits possible the first time it's called minops minimum",
    "start": "3360319",
    "end": "3366079"
  },
  {
    "text": "optimizations don't try and do anything fancy just get that code out there as quickly as possible it's functional code",
    "start": "3366079",
    "end": "3371359"
  },
  {
    "text": "there's no doubt about that but it's not the most optimized do that put a counter in see how many times the method's",
    "start": "3371359",
    "end": "3378079"
  },
  {
    "text": "called if it becomes hot on a background thread rejit the method so it's not blocking execution and then",
    "start": "3378079",
    "end": "3384559"
  },
  {
    "text": "in quite a clever way switch it out because you have to worry about if the method's executing and there's a synchronization thing going on there",
    "start": "3384559",
    "end": "3390799"
  },
  {
    "text": "once you've done that then switch out for an optimized version and that really helps start up time",
    "start": "3390799",
    "end": "3396240"
  },
  {
    "text": "because you can do the minimum work first time and then worry about it later and it also helps them do extra analysis",
    "start": "3396240",
    "end": "3402640"
  },
  {
    "text": "because they can actually i don't know how much is simply implemented but the idea is actually you can do a second",
    "start": "3402640",
    "end": "3408079"
  },
  {
    "text": "attempt and then maybe down the line you could do a third and fourth term once the mechanism is there there might be stuff how you say look another type's",
    "start": "3408079",
    "end": "3413680"
  },
  {
    "text": "been loaded it changes our idea of how the program's working let's have another go optimising these methods so i believe",
    "start": "3413680",
    "end": "3419760"
  },
  {
    "text": "at the moment it's just tier zero and tier one but there's you know theory the mechanisms there for more",
    "start": "3419760",
    "end": "3425760"
  },
  {
    "text": "um and then um yeah with that optimized one we now have um again and it still keeps around so you've got the optimize",
    "start": "3425760",
    "end": "3432160"
  },
  {
    "text": "native code so this is after it's done the tiered tier one which is the more optimization",
    "start": "3432160",
    "end": "3437920"
  },
  {
    "text": "it's um now the method is gonna every time it's going to be called it's gonna go to the octopus one but it still keeps",
    "start": "3437920",
    "end": "3444079"
  },
  {
    "text": "the original one around and there's various scenarios where they might want to go back because actually there's a potential that they made a uh a bad",
    "start": "3444079",
    "end": "3450240"
  },
  {
    "text": "decision right there's there's some flexibility there and it also um relates to things that i want to work on with",
    "start": "3450240",
    "end": "3456400"
  },
  {
    "text": "like the profiling api whether it's ability to region methods and a bit of stuff with sometimes when you're",
    "start": "3456400",
    "end": "3461760"
  },
  {
    "text": "debugging there's a way it can change the optimization of methods there's a few cases where it needs to go back and",
    "start": "3461760",
    "end": "3467119"
  },
  {
    "text": "forwards and this is part of a larger initiative this is i think this is more of a design",
    "start": "3467119",
    "end": "3473440"
  },
  {
    "text": "document i've not seen how much of this has yet been implemented but the idea is that yeah reach it there",
    "start": "3473440",
    "end": "3479520"
  },
  {
    "text": "the point is is that actually there might be times where even we talked a bit about generics you might see a",
    "start": "3479520",
    "end": "3485040"
  },
  {
    "text": "method a generic method you might want to optimize the int version because you see that being called loads but the",
    "start": "3485040",
    "end": "3490319"
  },
  {
    "text": "version for string is not called so much you want to leave that as is so yeah they can",
    "start": "3490319",
    "end": "3496720"
  },
  {
    "text": "the mechanism behind this is code version it can allow more but at the moment it's mostly tier zero tier one",
    "start": "3496720",
    "end": "3504400"
  },
  {
    "text": "so that's uh that's it of a brief introduction to the runtime and",
    "start": "3504640",
    "end": "3509839"
  },
  {
    "text": "performance um there's uh yeah booker runtime is really a great place to start i've uh written a bunch of blog posts",
    "start": "3509839",
    "end": "3517040"
  },
  {
    "text": "about internals but also some of like if you want to find your own way through this right so resources how to explore the runtime",
    "start": "3517040",
    "end": "3524960"
  },
  {
    "text": "some tools and other presentations for other people so there's some blog posts to get started with but",
    "start": "3524960",
    "end": "3531760"
  },
  {
    "text": "thank you thank you",
    "start": "3531760",
    "end": "3535480"
  }
]