[
  {
    "text": "all right so first of all a wonderful good morning and indeed it is still the",
    "start": "7759",
    "end": "14040"
  },
  {
    "text": "morning session at 11:40 that's I believe the most unfortunate time slot I've ever been to because at this point",
    "start": "14040",
    "end": "20480"
  },
  {
    "text": "in time everybody's thinking about the lunch break now I've done the most the most severe error any speaker can do",
    "start": "20480",
    "end": "26480"
  },
  {
    "text": "I've mentioned lunch now nobody listening listen to me anymore anyway but let's talk a little",
    "start": "26480",
    "end": "33440"
  },
  {
    "text": "bit about design patterns and some misconceptions that I found out about so first give me a one minute 30",
    "start": "33440",
    "end": "42079"
  },
  {
    "text": "seconds to quickly introduce myself my name is CLA elberger and I'm doing a lot",
    "start": "42079",
    "end": "47520"
  },
  {
    "text": "of C trainings consultancy Etc and I had talk a lot about design patterns I've",
    "start": "47520",
    "end": "52920"
  },
  {
    "text": "even a written book about design patterns because from my point of view this is a totally underrepresented Topic",
    "start": "52920",
    "end": "57960"
  },
  {
    "text": "in the community it may be old but I do not think that it's out of date or uh",
    "start": "57960",
    "end": "63000"
  },
  {
    "text": "not important anymore so let's talk a NE about design patterns but perhaps in this talk with a",
    "start": "63000",
    "end": "70119"
  },
  {
    "text": "special twist it's primarily about terminology because I I've seen the terms the names",
    "start": "70119",
    "end": "77840"
  },
  {
    "text": "of design P used for various uh things not necessarily the right things okay",
    "start": "77840",
    "end": "84280"
  },
  {
    "text": "before we now go into the terminology quick reminder of what is a design pattern so design pattern first of all",
    "start": "84280",
    "end": "91000"
  },
  {
    "text": "has a name now for this talk actually is the primary thing that I want to talk about because this name already has a",
    "start": "91000",
    "end": "97520"
  },
  {
    "text": "lot of weight it carries meaning it communicates an intention now if I name",
    "start": "97520",
    "end": "103079"
  },
  {
    "text": "a design pattern you should already have pretty good idea what I'm talking about design patterns generally aim at",
    "start": "103079",
    "end": "109079"
  },
  {
    "text": "reducing dependencies therefore help us to manage um our software structure our software",
    "start": "109079",
    "end": "116399"
  },
  {
    "text": "and I usually do this by providing some sort of abstraction some sort of abstraction doesn't have to",
    "start": "116399",
    "end": "123640"
  },
  {
    "text": "be a base class it's perfectly okay to just have a pointer function poter included base classes of course",
    "start": "123640",
    "end": "130560"
  },
  {
    "text": "templates standard functions stood variant all of this stuff yeah any way to provide an",
    "start": "130560",
    "end": "136200"
  },
  {
    "text": "abstraction and last but not least design patterns are not invented they're",
    "start": "136200",
    "end": "141480"
  },
  {
    "text": "usually discovered which is a pretty interesting detail in the end um so",
    "start": "141480",
    "end": "146720"
  },
  {
    "text": "usually you see that something's working for a couple of years perhaps even see this in many places um",
    "start": "146720",
    "end": "152959"
  },
  {
    "text": "working and so then you have found and discovered design pattern so now for me today it's primly",
    "start": "152959",
    "end": "160599"
  },
  {
    "text": "about the name because terminology indeed matters terminology matters because this is the",
    "start": "160599",
    "end": "167159"
  },
  {
    "text": "way we communicate about code and so a quote from K Lal um that",
    "start": "167159",
    "end": "174159"
  },
  {
    "text": "from my point of view expresses exactly why we have patterns in in the languages the use of design patterns",
    "start": "174159",
    "end": "180840"
  },
  {
    "text": "provides us in our daily lives with decisive speed advantages for understanding complex structures this is",
    "start": "180840",
    "end": "186560"
  },
  {
    "text": "also why patterns found way into software development years ago consistently applied patterns help us",
    "start": "186560",
    "end": "192519"
  },
  {
    "text": "deal with the complexity of source code so for that reason I actually hope",
    "start": "192519",
    "end": "199080"
  },
  {
    "text": "that when I use the term Builder I'll you pretty much of the same idea",
    "start": "199080",
    "end": "204720"
  },
  {
    "text": "same realize the same intention also if I use the term Factory",
    "start": "204720",
    "end": "210400"
  },
  {
    "text": "method I hope that all of you have pretty much the same idea yeah that when I say this um we communicate about the",
    "start": "210400",
    "end": "217439"
  },
  {
    "text": "same thing when I say bridge I also hope that you have the same idea in mind the same dependency structure and last but",
    "start": "217439",
    "end": "225159"
  },
  {
    "text": "not least um when I say design pattern I also hope that we pretty much communicate about the same",
    "start": "225159",
    "end": "231280"
  },
  {
    "text": "thing and that is the four terms that today I want to talk about a little bit so let's start with Builder indeed",
    "start": "231280",
    "end": "240720"
  },
  {
    "text": "and I admit that initially when I planned this talk I actually didn't think about this but I changed my mind",
    "start": "240720",
    "end": "246200"
  },
  {
    "text": "when couple of months ago somebody posted at LinkedIn a kind of a nice",
    "start": "246200",
    "end": "251519"
  },
  {
    "text": "overview of design patterns now the 18 18 of the most commonly used design",
    "start": "251519",
    "end": "256639"
  },
  {
    "text": "patterns a quick reminder to some extent you see in top it also mentioned the",
    "start": "256639",
    "end": "262560"
  },
  {
    "text": "Builder design pattern then somebody in this um thread",
    "start": "262560",
    "end": "268880"
  },
  {
    "text": "asked what is your favorite design pattern and many people replied well 44",
    "start": "268880",
    "end": "274880"
  },
  {
    "text": "it's a reasonable number and I was super surprised to find that many many people replied with",
    "start": "274880",
    "end": "280240"
  },
  {
    "text": "Builder I was surprised because I don't see a lot of Builders nowadays so I was",
    "start": "280240",
    "end": "285919"
  },
  {
    "text": "curious and I was asking many people here state that their favorite bu pattern is the Builder",
    "start": "285919",
    "end": "292360"
  },
  {
    "text": "pattern let makes me curious which program language you use and which",
    "start": "292360",
    "end": "297520"
  },
  {
    "text": "Builder do you refer to a the GF Builder pattern or B Joshua bl's Builder",
    "start": "297520",
    "end": "306520"
  },
  {
    "text": "pattern unfortunately you see only five people replied but at least these five answers consistently said that actually",
    "start": "306520",
    "end": "313120"
  },
  {
    "text": "they were thinking about the B josa bl's Builder pattern so if you've not heard about",
    "start": "313120",
    "end": "320919"
  },
  {
    "text": "this this is a pattern that was first described in the Effective Java book many many years",
    "start": "320919",
    "end": "327560"
  },
  {
    "text": "ago now I don't want to present Java code so I translated this into modern C++ to give you a little bit of an",
    "start": "327560",
    "end": "334199"
  },
  {
    "text": "example so imagine we have some class and some class very quickly uh",
    "start": "334199",
    "end": "341000"
  },
  {
    "text": "translates into widget so we have a widget with a Constructor that takes a lot of parameters a lot of them so it",
    "start": "341000",
    "end": "348520"
  },
  {
    "text": "doesn't have to be five could be even more and of course immediately you see that this style is already questionable",
    "start": "348520",
    "end": "356280"
  },
  {
    "text": "many many integers that could be confused and uh switched it's a dangerous kind of",
    "start": "356280",
    "end": "363440"
  },
  {
    "text": "interface but also many of these values might have defaults so I might assume X and Y to be",
    "start": "363440",
    "end": "370720"
  },
  {
    "text": "Zero by default but I just cannot omit them because they're F the first two",
    "start": "370720",
    "end": "377039"
  },
  {
    "text": "parameters so how do I approach this problem in a safe way such that this",
    "start": "377240",
    "end": "382759"
  },
  {
    "text": "interface is easy to use correctly and hard to use incorrectly well the first step definitely should",
    "start": "382759",
    "end": "389520"
  },
  {
    "text": "always be even independent of this uh pattern is to have strong types for these parameters so the exposition might",
    "start": "389520",
    "end": "397479"
  },
  {
    "text": "be represented with the Type X PA the Y position with that y pass with height title etc etc it definitely is a first",
    "start": "397479",
    "end": "404639"
  },
  {
    "text": "step totally independent of anything that follows good now with this we could",
    "start": "404639",
    "end": "409680"
  },
  {
    "text": "actually indeed very easily overload the Constructor could have 10 different Constructors that just Express all the",
    "start": "409680",
    "end": "415720"
  },
  {
    "text": "variations of parameters that we have okay not particularly yeah um",
    "start": "415720",
    "end": "423960"
  },
  {
    "text": "convenient so now that we have these strong types what we can provide are set",
    "start": "423960",
    "end": "430400"
  },
  {
    "text": "functions so set functions for the X pause the Y pause etc etc note in",
    "start": "430400",
    "end": "436560"
  },
  {
    "text": "particular that these functions are all called set not set xport set YP no no",
    "start": "436560",
    "end": "442000"
  },
  {
    "text": "all of them are called set so we consist using function overloading here and that is the key now the constru",
    "start": "442000",
    "end": "450199"
  },
  {
    "text": "is now replaced with a very generic Constructor that takes just",
    "start": "450199",
    "end": "456199"
  },
  {
    "text": "arguments veric template parameters these arguments are all moved",
    "start": "456199",
    "end": "463639"
  },
  {
    "text": "forwarded whatever into the set function and today we can very easily and conveniently do this by means of fold",
    "start": "463639",
    "end": "469199"
  },
  {
    "text": "Expressions very nice all of these arguments are given to set which of course because of the",
    "start": "469199",
    "end": "476319"
  },
  {
    "text": "strong types calls the right set function that is nice super convenient on the one hand",
    "start": "476319",
    "end": "483080"
  },
  {
    "text": "side and it suddenly enables us to um provide an interface that pretty much cannot be",
    "start": "483080",
    "end": "488639"
  },
  {
    "text": "misused so in the in the main function we can uh pretty much pass all the",
    "start": "488639",
    "end": "494599"
  },
  {
    "text": "parameters but suddenly we have the ability just to Mid a view the ones that",
    "start": "494599",
    "end": "500440"
  },
  {
    "text": "we do not want to specify the ones where we use want to use a default and also the order suddenly doesn't matter we can",
    "start": "500440",
    "end": "506479"
  },
  {
    "text": "first provide with orx pass or or this way nice really nice pretty cool amazing",
    "start": "506479",
    "end": "514518"
  },
  {
    "text": "way to write a Constructor that deals with a lot of defaults and this is now what a lot of",
    "start": "514519",
    "end": "520039"
  },
  {
    "text": "people think about when they think about Builder and if somebody asks a question what is your favorite design pattern",
    "start": "520039",
    "end": "526360"
  },
  {
    "text": "this is what they think about unfortunately this is not really",
    "start": "526360",
    "end": "531959"
  },
  {
    "text": "what it is this is not a design pattern so to just go to the other",
    "start": "531959",
    "end": "538600"
  },
  {
    "text": "pattern the gang of four design pattern here's a short quick reminder of what",
    "start": "538600",
    "end": "544000"
  },
  {
    "text": "the gang of four says about this separate the construction of a complex object from its representation",
    "start": "544000",
    "end": "551640"
  },
  {
    "text": "so that the same construction process can create different",
    "start": "551640",
    "end": "556720"
  },
  {
    "text": "representations so of course in this book published in 1994 they use a an inheritance hierarchy",
    "start": "557040",
    "end": "564399"
  },
  {
    "text": "which was just the thing of the time yeah this was uh the '90s Aron program was all the",
    "start": "564399",
    "end": "571040"
  },
  {
    "text": "but there's one thing about this picture this is why I used it which makes it clear that this is different implicitly",
    "start": "571040",
    "end": "578399"
  },
  {
    "text": "there is an architectural boundary in the middle so I have a clear separation between two levels of programming the",
    "start": "578399",
    "end": "585120"
  },
  {
    "text": "abstract part on top and the more concrete part at the bottom and so there",
    "start": "585120",
    "end": "590279"
  },
  {
    "text": "is definitely an inversion of dependencies happening I communicate by means of this um this inheritance",
    "start": "590279",
    "end": "597959"
  },
  {
    "text": "hierarchy good good and so yes there are two different",
    "start": "597959",
    "end": "604000"
  },
  {
    "text": "Builders there's first the gang of four design pattern Builder design pattern",
    "start": "604000",
    "end": "610279"
  },
  {
    "text": "and then as josha Block's Builder pattern but I would Clearly say that josha block Builder is not a design",
    "start": "610279",
    "end": "616720"
  },
  {
    "text": "pattern don't get me wrong it's super valuable and absolutely cool I would use it too but it's not a design pattern",
    "start": "616720",
    "end": "623200"
  },
  {
    "text": "there is no architectural boundary I do not really separate between two levels of code that's not",
    "start": "623200",
    "end": "629800"
  },
  {
    "text": "the intention and so I'm definitely also not focused on reducing or inverting",
    "start": "629800",
    "end": "634959"
  },
  {
    "text": "dependencies it's just a very useful and very convenient implementation",
    "start": "634959",
    "end": "641399"
  },
  {
    "text": "detail but this is what it is I would say that it's super similar to an API",
    "start": "641399",
    "end": "647519"
  },
  {
    "text": "pattern called fluent interface if youve not heard about this please check it out at Wikipedia super",
    "start": "647519",
    "end": "654240"
  },
  {
    "text": "simple to find because it is pretty a pretty PR common thing to to write interfaces perhaps not so much in C++ I",
    "start": "654240",
    "end": "661320"
  },
  {
    "text": "don't know other languages use this more often but this is pretty much an ability gives you the ability to write fluent",
    "start": "661320",
    "end": "667079"
  },
  {
    "text": "code yeah things that you can pretty much read like it's like writing sentences in code and so",
    "start": "667079",
    "end": "673120"
  },
  {
    "text": "comprehensibility and usability of course should improve good stuff just",
    "start": "673120",
    "end": "679639"
  },
  {
    "text": "not a design pattern so please don't confuse josha bl's Builder pattern with a G of four",
    "start": "679639",
    "end": "685560"
  },
  {
    "text": "Builder pattern the two different things which UNT have the same name which of",
    "start": "685560",
    "end": "691000"
  },
  {
    "text": "course now brings me back to the terms it's a little difficult nowadays to talk about Builder now somebody ask what is",
    "start": "691000",
    "end": "697240"
  },
  {
    "text": "your favorite design pattern some people say Builder and these two people might have very different things in mind",
    "start": "697240",
    "end": "702480"
  },
  {
    "text": "that's unfortunate so if you today use the term Builder from now on it might",
    "start": "702480",
    "end": "708079"
  },
  {
    "text": "might not be a bad idea to be a little more specific do you talk about the G Builder G of four or do you talk about",
    "start": "708079",
    "end": "715279"
  },
  {
    "text": "block Spiller yeah both have their values but both are superb they're just very",
    "start": "715279",
    "end": "721320"
  },
  {
    "text": "different things all right so terms matter else we are talking about two completely",
    "start": "721320",
    "end": "728200"
  },
  {
    "text": "different things which brings me to a second term",
    "start": "728200",
    "end": "733880"
  },
  {
    "text": "a term that oh my I've seen used so arbitrarily in so many blogs books even",
    "start": "733880",
    "end": "741399"
  },
  {
    "text": "um that by now I I believe nobody really knows what a factory method is",
    "start": "741399",
    "end": "746880"
  },
  {
    "text": "anymore so quick example some toy example we want to draw",
    "start": "746880",
    "end": "753880"
  },
  {
    "text": "shapes so to get started I first have a vector of uni pointers of shape and of",
    "start": "753880",
    "end": "759800"
  },
  {
    "text": "course it doesn't have to be but that's the traditional thing the classic thing again and I previ this with shapes it's",
    "start": "759800",
    "end": "766519"
  },
  {
    "text": "more convenient then there is a function that allows me to draw all the shapes",
    "start": "766519",
    "end": "771680"
  },
  {
    "text": "that's good yeah convenient again but then I have a function to read shapes",
    "start": "771680",
    "end": "777480"
  },
  {
    "text": "from Json I pass a string the file name and I get all the shapes everything",
    "start": "777480",
    "end": "783920"
  },
  {
    "text": "that's stored in the Jason file and then in the main function I read the shapes from Jason and I draw",
    "start": "783920",
    "end": "791639"
  },
  {
    "text": "them cool now my major point of interest is",
    "start": "791639",
    "end": "797519"
  },
  {
    "text": "the read shapes from Json function now this function creates all",
    "start": "797519",
    "end": "802800"
  },
  {
    "text": "the shapes and so it creates something it's it's a factory function in L",
    "start": "802800",
    "end": "808399"
  },
  {
    "text": "however and as I said also in blocks Etc very often this is considered to be an",
    "start": "808399",
    "end": "813480"
  },
  {
    "text": "example for the factory method design pattern we create",
    "start": "813480",
    "end": "819240"
  },
  {
    "text": "something no unfortunately no a creation function is not",
    "start": "819279",
    "end": "826839"
  },
  {
    "text": "automatically a factory method or not even a design pattern again don't get me wrong it's a valuable thing but it has",
    "start": "826839",
    "end": "834279"
  },
  {
    "text": "nothing to do with softer design so again don't get me wrong this definitely improves code without doubt",
    "start": "834279",
    "end": "842000"
  },
  {
    "text": "so it encapsulates this creation process super valuable because now you can change things in one place and that's",
    "start": "842000",
    "end": "848320"
  },
  {
    "text": "one function if a new kind of shape enters the the picture you can do this in one this one function you don't have",
    "start": "848320",
    "end": "853720"
  },
  {
    "text": "to do the all of the code base and so you can control to do things in one place fulfills kind of the SRP and draw",
    "start": "853720",
    "end": "862680"
  },
  {
    "text": "good but again we have not really thought about reducing any dependencies",
    "start": "862680",
    "end": "869680"
  },
  {
    "text": "so if it's not dependency related it's probably not a design pattern it's merely an implementation",
    "start": "869680",
    "end": "877360"
  },
  {
    "text": "detail but then what is a factory method okay let's let's use this example",
    "start": "877360",
    "end": "883440"
  },
  {
    "text": "to just develop it into something where we actually deal about talk about",
    "start": "883440",
    "end": "889120"
  },
  {
    "text": "dependencies so let's first introduce an architectural boundary that's the the",
    "start": "889120",
    "end": "895079"
  },
  {
    "text": "the the first point the starting point but okay again we have high level",
    "start": "895079",
    "end": "901600"
  },
  {
    "text": "lowlevel this is terms that usually confuse people so let's make it a little a little more specific the upper code is",
    "start": "901600",
    "end": "908440"
  },
  {
    "text": "my code and the lower code is your code so you read shapes from Jason and",
    "start": "908440",
    "end": "916519"
  },
  {
    "text": "that's good for you absolutely this is valuable for you but I don't care about this at all that's a",
    "start": "916519",
    "end": "923839"
  },
  {
    "text": "little implementation detail on your side of the architecture I don't have to know this",
    "start": "923839",
    "end": "930160"
  },
  {
    "text": "but now let's let's make things more interesting let's just argue or assume that I want to create shipes too but I",
    "start": "930160",
    "end": "937440"
  },
  {
    "text": "don't really want to deal with the details so in order to um give get an",
    "start": "937440",
    "end": "944800"
  },
  {
    "text": "example say I now need a create and draw shapes function I want to create a couple of shapes I want to draw them and",
    "start": "944800",
    "end": "951279"
  },
  {
    "text": "draw shapes is in my side but not the read shapes from function uh",
    "start": "951279",
    "end": "957040"
  },
  {
    "text": "shapes from Json function that function is on your side now if I would call this actually",
    "start": "957040",
    "end": "963839"
  },
  {
    "text": "would totally break the architecture you can use my code but I cannot use your code so this definitely is uh not",
    "start": "963839",
    "end": "971600"
  },
  {
    "text": "working at all at this point so consequently I would have to take your",
    "start": "971600",
    "end": "977680"
  },
  {
    "text": "function I would have to be to become the owner of fre shapes from",
    "start": "977680",
    "end": "982920"
  },
  {
    "text": "Jason but this makes both of us pretty unhappy first",
    "start": "982920",
    "end": "989480"
  },
  {
    "text": "I now suddenly have to deal with all the shapes suddenly I know about circles and rectangles and squares and all these",
    "start": "989480",
    "end": "996519"
  },
  {
    "text": "things that I don't really care about and you you cannot change my function",
    "start": "996519",
    "end": "1003160"
  },
  {
    "text": "it's my function SLE you are no longer in charge of the uh of the",
    "start": "1003160",
    "end": "1008240"
  },
  {
    "text": "details that's bad however let's start to to",
    "start": "1008240",
    "end": "1014600"
  },
  {
    "text": "communicate let's start to design that so our goal is that I can create shapes",
    "start": "1014600",
    "end": "1020880"
  },
  {
    "text": "when I need them but I definitely don't want to depend on all the details that that's your problem and you you actually",
    "start": "1020880",
    "end": "1027240"
  },
  {
    "text": "want to depend on the details but you might not be so much concerned in when and how to draw them all right so this",
    "start": "1027240",
    "end": "1035798"
  },
  {
    "text": "is where this Factory method design pattern enters the game as a quick reminder what does the",
    "start": "1035799",
    "end": "1042240"
  },
  {
    "text": "gang of for say about this Define an interface for creating an",
    "start": "1042240",
    "end": "1047400"
  },
  {
    "text": "object but let's subclasses decide which class to instantiate Vector method let",
    "start": "1047400",
    "end": "1053440"
  },
  {
    "text": "the class defer instantiation to subclasses of course there certain",
    "start": "1053440",
    "end": "1059679"
  },
  {
    "text": "connotation here it talks about sub classes which is very objectoriented but",
    "start": "1059679",
    "end": "1064720"
  },
  {
    "text": "again this is the time this is just what the book does it primarily talks about Define an interface for",
    "start": "1064720",
    "end": "1071240"
  },
  {
    "text": "creating and this is now what we do so first of all you get your function",
    "start": "1071240",
    "end": "1076960"
  },
  {
    "text": "back I don't want to know that the details okay but then in my create",
    "start": "1076960",
    "end": "1082080"
  },
  {
    "text": "shapes create and draw shapes I just open up the world for your code by",
    "start": "1082080",
    "end": "1088440"
  },
  {
    "text": "introducing a function pointer function poter such an archaic",
    "start": "1088440",
    "end": "1096159"
  },
  {
    "text": "thing okay doesn't have to but then you totally lose the um the idea that it has",
    "start": "1096159",
    "end": "1101600"
  },
  {
    "text": "to be a base class so I take a function poter to some function that creates shapes and just use it my function",
    "start": "1101600",
    "end": "1110080"
  },
  {
    "text": "really I really don't care what it what I get I can just use the stuff you on the other hand okay and this is now an",
    "start": "1110080",
    "end": "1117120"
  },
  {
    "text": "example for the factory method design P yes and note I point to the function",
    "start": "1117120",
    "end": "1122159"
  },
  {
    "text": "pointer I do not point to the function below the function below is still just a",
    "start": "1122159",
    "end": "1127320"
  },
  {
    "text": "an implementation detail Factory function the factor method is actually just my function",
    "start": "1127320",
    "end": "1133520"
  },
  {
    "text": "pointer so you canot just pass your function to um my code",
    "start": "1133520",
    "end": "1139679"
  },
  {
    "text": "and that's great yeah so suddenly I can uh create shapes without having to know",
    "start": "1139679",
    "end": "1145280"
  },
  {
    "text": "the details good stuff so again the core of this entire",
    "start": "1145280",
    "end": "1152080"
  },
  {
    "text": "idea is that there is an architectural boundary somewhere in the middle and that there is a dependency",
    "start": "1152080",
    "end": "1158679"
  },
  {
    "text": "inversion now I talked a lot about dependencies I uh talked a lot about I don't need to know this stuff that's",
    "start": "1158679",
    "end": "1165520"
  },
  {
    "text": "pretty much what the design patterns do so just that some of you can sleep well",
    "start": "1165520",
    "end": "1171480"
  },
  {
    "text": "of course we could do this with a base class sure we have a shapes Factory on my side of the code with a virtual",
    "start": "1171480",
    "end": "1178280"
  },
  {
    "text": "create function I take a say reference to the shapes Factory uh in my function and you",
    "start": "1178280",
    "end": "1184440"
  },
  {
    "text": "could implement this of course however you want to it's the same idea it's not",
    "start": "1184440",
    "end": "1190240"
  },
  {
    "text": "um something totally different it's not suddenly um now suddenly a design",
    "start": "1190240",
    "end": "1196080"
  },
  {
    "text": "pattern so the takeaway is is that factor method and Factor functions function are two different terms which",
    "start": "1196080",
    "end": "1203840"
  },
  {
    "text": "unfortunately are mixed up so often the problem is that in C++ we often talk",
    "start": "1203840",
    "end": "1209000"
  },
  {
    "text": "about methods but to just say it clearly in C++ there are no methods now take a",
    "start": "1209000",
    "end": "1215120"
  },
  {
    "text": "in take a look at the index of the C++ standard the term method doesn't appear there are no methods in C++ we have",
    "start": "1215120",
    "end": "1221960"
  },
  {
    "text": "functions everywhere and so Factor method is kind of a special term which",
    "start": "1221960",
    "end": "1227200"
  },
  {
    "text": "indeed comes a little bit from the Java world so this is actually something that",
    "start": "1227200",
    "end": "1232360"
  },
  {
    "text": "it's not just my idea this is something that's even written at Wikipedia so if you go to the English version Look for",
    "start": "1232360",
    "end": "1239000"
  },
  {
    "text": "Factory and then go to terminology then indeed as the explicit statement",
    "start": "1239000",
    "end": "1244400"
  },
  {
    "text": "unfortunately this is not really visible here the last sentence the general concept of a factory is often confused",
    "start": "1244400",
    "end": "1250640"
  },
  {
    "text": "with a specific Factory method design pattern two different things",
    "start": "1250640",
    "end": "1257120"
  },
  {
    "text": "unfortunately and so remember that the term Factory is",
    "start": "1257120",
    "end": "1263360"
  },
  {
    "text": "heavily overloaded and that that factory loan is not necessarily referred to this Factory method design",
    "start": "1263360",
    "end": "1269960"
  },
  {
    "text": "pattern so distinguish between the general idea of a factory function and really you can use that term for",
    "start": "1269960",
    "end": "1275720"
  },
  {
    "text": "anything anything that creates something is a factory function in the end and distinguish to factory method",
    "start": "1275720",
    "end": "1283640"
  },
  {
    "text": "that's something that has a certain yeah carries a certain meaning yeah we",
    "start": "1283640",
    "end": "1289320"
  },
  {
    "text": "somehow distinguish um um communicate about how shapes are created I want to",
    "start": "1289320",
    "end": "1295279"
  },
  {
    "text": "do this but you know the details so perhaps consider Factory method design pattern a customizable Factory function",
    "start": "1295279",
    "end": "1302799"
  },
  {
    "text": "that might be a good good translation all",
    "start": "1302799",
    "end": "1309200"
  },
  {
    "text": "right there's another term that I would like to address",
    "start": "1309200",
    "end": "1314400"
  },
  {
    "text": "Bridge aka the pimple idiom",
    "start": "1314400",
    "end": "1320039"
  },
  {
    "text": "I think when I say Bridge you already have a pretty good idea but still allow me to quickly give you a little bit of",
    "start": "1321159",
    "end": "1327240"
  },
  {
    "text": "an uh motivation so this time my motivation are electric cars why well",
    "start": "1327240",
    "end": "1334320"
  },
  {
    "text": "because I not just say that in electric cars things are changing a lot in",
    "start": "1334320",
    "end": "1339640"
  },
  {
    "text": "particular The Battery Technology is changing a lot so if you now consider this in terms",
    "start": "1339640",
    "end": "1346480"
  },
  {
    "text": "of a class some electric car class then this class might have a data member",
    "start": "1346480",
    "end": "1352240"
  },
  {
    "text": "called battery of course however having this data member as a",
    "start": "1352240",
    "end": "1360080"
  },
  {
    "text": "concrete type might actually create a lot of change indeed so whenever something about battery changes users of",
    "start": "1360080",
    "end": "1367159"
  },
  {
    "text": "electric car will experience the change will see this change and if the size of",
    "start": "1367159",
    "end": "1372320"
  },
  {
    "text": "battery for instance changes it's not just some change it really is an ABI break everything will have to be",
    "start": "1372320",
    "end": "1377440"
  },
  {
    "text": "recompiled everything that uses electric car so if this happens often this might",
    "start": "1377440",
    "end": "1383039"
  },
  {
    "text": "be a real inconvenience and it might be something that might not be even acceptable to to",
    "start": "1383039",
    "end": "1388559"
  },
  {
    "text": "people so what about what to do about this well we could first of all again",
    "start": "1388559",
    "end": "1395919"
  },
  {
    "text": "introduce some abstraction some battery okay battery is well a base class with",
    "start": "1395919",
    "end": "1402799"
  },
  {
    "text": "uh some functions say charge that that should give you an idea so then electric",
    "start": "1402799",
    "end": "1409480"
  },
  {
    "text": "car electric car does no longer um store battery as a as a um concrete type but",
    "start": "1409480",
    "end": "1417039"
  },
  {
    "text": "as a pointer to base as an abstraction and we might get this via the",
    "start": "1417039",
    "end": "1422600"
  },
  {
    "text": "Constructor okay then of course there are many many different implementations of battery battery gen one gen two gen",
    "start": "1422600",
    "end": "1429159"
  },
  {
    "text": "three yeah things change there's a lot of of new stuff and then in the electric car class",
    "start": "1429159",
    "end": "1436919"
  },
  {
    "text": "uh we would just get out battery that is provided via the Constructor so electric",
    "start": "1436919",
    "end": "1445000"
  },
  {
    "text": "car takes some battery say battery gen one and electric car does not change",
    "start": "1445000",
    "end": "1451520"
  },
  {
    "text": "again and again and again anymore good so electric car itself becomes pretty AI",
    "start": "1451520",
    "end": "1458640"
  },
  {
    "text": "stable again this is well not exactly the example but a very similar example",
    "start": "1459000",
    "end": "1464640"
  },
  {
    "text": "to what we see in blocks and books even this is not a bridge unfortunately it",
    "start": "1464640",
    "end": "1472720"
  },
  {
    "text": "pretty much sounds like a bridge but it is not and it is about this particular",
    "start": "1472720",
    "end": "1478440"
  },
  {
    "text": "parameter so we are injecting the battery gen one into the electric car",
    "start": "1478440",
    "end": "1483799"
  },
  {
    "text": "class and yes you know the term for that dependency injection not to be confused",
    "start": "1483799",
    "end": "1489200"
  },
  {
    "text": "with dependency inversion that's something different but we inject the battery and so this is usually given as",
    "start": "1489200",
    "end": "1496520"
  },
  {
    "text": "a as a a bridge example but to say it clearly bridge is",
    "start": "1496520",
    "end": "1503720"
  },
  {
    "text": "never about dependency injection never worse never will be that's not what",
    "start": "1503720",
    "end": "1508760"
  },
  {
    "text": "bridges are about to show why let's indeed go into",
    "start": "1508760",
    "end": "1514840"
  },
  {
    "text": "the example that the gang of four in their book give on their own so we don't have to understand the complete example",
    "start": "1514840",
    "end": "1520799"
  },
  {
    "text": "just the the um the upper um setting their example is about Windows so we",
    "start": "1520799",
    "end": "1527600"
  },
  {
    "text": "have different Windows the windows however depend on",
    "start": "1527600",
    "end": "1532679"
  },
  {
    "text": "the platform so we might be on Linux we would use something different then on",
    "start": "1532679",
    "end": "1537760"
  },
  {
    "text": "Windows different than a ma on Mac OS so in order to factor this out these",
    "start": "1537760",
    "end": "1543159"
  },
  {
    "text": "differences we introduce a window imp yeah they call it imp not imple and this",
    "start": "1543159",
    "end": "1549440"
  },
  {
    "text": "thing has many many different implementations yeah X window cute window whatever is available",
    "start": "1549440",
    "end": "1556679"
  },
  {
    "text": "good this is what they they uh write about",
    "start": "1556679",
    "end": "1562799"
  },
  {
    "text": "this particular example consider the implementation of a portable window obstruction and user",
    "start": "1562799",
    "end": "1569360"
  },
  {
    "text": "interface toolkit clients should be able to create a window without committing to a",
    "start": "1569360",
    "end": "1576360"
  },
  {
    "text": "concrete implementation only the window implementation should depend on the platform in which the application",
    "start": "1576360",
    "end": "1583080"
  },
  {
    "text": "runs so not my words their words but pretty clear with without committing to",
    "start": "1583080",
    "end": "1588480"
  },
  {
    "text": "a concrete implementation yeah they should not depend on the",
    "start": "1588480",
    "end": "1594398"
  },
  {
    "text": "platform the code example okay this is really pretty much copy and paste from their code example and and no this not",
    "start": "1595360",
    "end": "1602520"
  },
  {
    "text": "what we do today anymore please please don't but just to to point it out in code we have this window imp up here",
    "start": "1602520",
    "end": "1611720"
  },
  {
    "text": "that's the abstraction of different kinds of implementations some P viral function",
    "start": "1611720",
    "end": "1616880"
  },
  {
    "text": "whatever and we have the window class this window class has a window imp yes this is the",
    "start": "1616880",
    "end": "1625320"
  },
  {
    "text": "thing that you please do not copy now the nowadays uni pointer is is not just",
    "start": "1625320",
    "end": "1630760"
  },
  {
    "text": "optional anymore this window imp that is my pointer to implementation now we",
    "start": "1630760",
    "end": "1637960"
  },
  {
    "text": "commonly call this pimple nowadays not just imp that is my point at implementation but this point at",
    "start": "1637960",
    "end": "1644200"
  },
  {
    "text": "implementation is not passed anywhere no this is my personal private little thing",
    "start": "1644200",
    "end": "1649720"
  },
  {
    "text": "that nobody else needs to care about problem about the example however is that in the Constructor I'm given a view",
    "start": "1649720",
    "end": "1657360"
  },
  {
    "text": "and this view is another data member but this view has nothing to do with a bridge example it just happens to",
    "start": "1657360",
    "end": "1663480"
  },
  {
    "text": "be there because it probably feels a little more realistic that's another design pattern this is what we call the",
    "start": "1663480",
    "end": "1669760"
  },
  {
    "text": "strategy design pattern and that's the difference yeah kind of combined in this",
    "start": "1669760",
    "end": "1676320"
  },
  {
    "text": "example the Bridge pattern is not about injection this is about hiding the",
    "start": "1676320",
    "end": "1681399"
  },
  {
    "text": "details as much as possible yeah you don't care it's my concern the strategy pattern on the other hand is very much",
    "start": "1681399",
    "end": "1688240"
  },
  {
    "text": "about dependence injection this is exactly what this what the point is you give me the view and I",
    "start": "1688240",
    "end": "1694480"
  },
  {
    "text": "don't need to care so to just and of course note many",
    "start": "1694480",
    "end": "1701159"
  },
  {
    "text": "people then just call things imple and then it's a bridge or pimple or whatever",
    "start": "1701159",
    "end": "1706399"
  },
  {
    "text": "the name of the data member make a difference it's about how you provide this this",
    "start": "1706399",
    "end": "1711960"
  },
  {
    "text": "imple so our car example in order to fix that to really make it a bridge would",
    "start": "1711960",
    "end": "1719399"
  },
  {
    "text": "not have to do a lot the battery would still be the same pretty",
    "start": "1719399",
    "end": "1725799"
  },
  {
    "text": "much um the electric car class however would change a bit because silly in the",
    "start": "1725799",
    "end": "1732320"
  },
  {
    "text": "Constructor I would not accept an engine anymore sorry a battery a battery anymore that's my concern not yours yeah",
    "start": "1732320",
    "end": "1739880"
  },
  {
    "text": "I deal with battery then of course no dependence injection then of course",
    "start": "1739880",
    "end": "1746519"
  },
  {
    "text": "there are still many implementations yeah but these implementations are chosen by the electric car itself electric car creates",
    "start": "1746519",
    "end": "1754880"
  },
  {
    "text": "its own engine and so if you create an electric car somewhere in the um in the main",
    "start": "1754880",
    "end": "1763679"
  },
  {
    "text": "function for instance you just well give it a name perhaps you give it some other",
    "start": "1763679",
    "end": "1769600"
  },
  {
    "text": "things that are a little more superficial but you do not care about batteries that's entirely a problem of",
    "start": "1769600",
    "end": "1774919"
  },
  {
    "text": "the electric car itself so that's a bridge so the confusion probably comes a",
    "start": "1774919",
    "end": "1783679"
  },
  {
    "text": "little bit from this really big",
    "start": "1783679",
    "end": "1789080"
  },
  {
    "text": "similarity this is the uml class diagram that they gang of for users kind of I'm I'm now using my example but this is",
    "start": "1789080",
    "end": "1796039"
  },
  {
    "text": "pretty much what it looks like yeah there's a little box that says bridge but if you then compare it to the",
    "start": "1796039",
    "end": "1802600"
  },
  {
    "text": "strategy design pattern it looks alike it's the same uml",
    "start": "1802600",
    "end": "1808600"
  },
  {
    "text": "class diagram no difference at all except for the little box that says",
    "start": "1808600",
    "end": "1814919"
  },
  {
    "text": "bridge and so it is easy to confuse it is easy not to see the",
    "start": "1814919",
    "end": "1820000"
  },
  {
    "text": "difference but the difference becomes visible if you really think about",
    "start": "1820000",
    "end": "1825559"
  },
  {
    "text": "dependencies so this is the dependency structure of of",
    "start": "1825559",
    "end": "1832240"
  },
  {
    "text": "bridge so on the left lower left the electric car directly uses the",
    "start": "1832240",
    "end": "1838519"
  },
  {
    "text": "battery battery gen one and gen two and gen uh gen three it directly uses that",
    "start": "1838519",
    "end": "1844880"
  },
  {
    "text": "so these two are on the same level of the architecture they know each other that's the",
    "start": "1844880",
    "end": "1852278"
  },
  {
    "text": "point strategy on the other hand moves this bar gen one to a lower um level so",
    "start": "1852360",
    "end": "1860080"
  },
  {
    "text": "now the electric car is totally unaware of a battery and requests a battery and its Constructor please give me a battery",
    "start": "1860080",
    "end": "1866399"
  },
  {
    "text": "somebody else now takes care of that and provides this and another level of the",
    "start": "1866399",
    "end": "1871799"
  },
  {
    "text": "architecture so again the difference is an architectural",
    "start": "1871799",
    "end": "1878080"
  },
  {
    "text": "boundary all right so please do not confuse bridon strategy",
    "start": "1878840",
    "end": "1884519"
  },
  {
    "text": "and if somebody in in some code example explains by dependence injection please just rethink say okay it's a",
    "start": "1884519",
    "end": "1892080"
  },
  {
    "text": "strategy so use the term bridge when you do referred to internal customization no",
    "start": "1892080",
    "end": "1898080"
  },
  {
    "text": "dependency injection again that's the point of a bridge and if there is a dependen",
    "start": "1898080",
    "end": "1903840"
  },
  {
    "text": "injection it's very likely a strategy not necessarily but very likely in in",
    "start": "1903840",
    "end": "1909799"
  },
  {
    "text": "the example it definitely was so bridge is about internal customization strategy about external",
    "start": "1909799",
    "end": "1916159"
  },
  {
    "text": "customization all right so again the term matters else",
    "start": "1916159",
    "end": "1921679"
  },
  {
    "text": "we talking about two totally different things so which brings me",
    "start": "1921679",
    "end": "1928240"
  },
  {
    "text": "to term number four the term design",
    "start": "1928240",
    "end": "1934840"
  },
  {
    "text": "pattern now sometimes submit talks about design patterns in general and one of",
    "start": "1935399",
    "end": "1941799"
  },
  {
    "text": "the latest um reviews I get back contained the following remark",
    "start": "1941799",
    "end": "1948159"
  },
  {
    "text": "I believe that object under programming especially its theory is overestimated C++ always at templates and now it also",
    "start": "1948159",
    "end": "1955200"
  },
  {
    "text": "has stood variant which makes most of the use of inheritance unnecessary so",
    "start": "1955200",
    "end": "1961600"
  },
  {
    "text": "the the opinion itself I feel is deeply flawed but there's there's something else now here as soon as you say design",
    "start": "1961600",
    "end": "1970120"
  },
  {
    "text": "pattern people think about objectoriented programming it's like a reaction it's like this is what it is so",
    "start": "1970120",
    "end": "1978320"
  },
  {
    "text": "design patterns equal object oriented programming not really not really and",
    "start": "1978320",
    "end": "1985600"
  },
  {
    "text": "this is not news some of you might have um might know this book modern C++ design by",
    "start": "1985600",
    "end": "1993159"
  },
  {
    "text": "Andre alexes by the way is at this conference and Andre is still mocking uh the community by saying he invented mod",
    "start": "1993159",
    "end": "2000000"
  },
  {
    "text": "C++ because this book was published in 20 2001 so kind of 10 years before we",
    "start": "2000000",
    "end": "2006399"
  },
  {
    "text": "had uh C+ 11 with modern C++ okay Joker side in this book he uses design",
    "start": "2006399",
    "end": "2013519"
  },
  {
    "text": "patterns it's in the subtitle but never by means of a base class but very consistently by means of templates at",
    "start": "2013519",
    "end": "2020360"
  },
  {
    "text": "the time he was torching compilers everything was done in templates and I think there was one compiler that comp",
    "start": "2020360",
    "end": "2026080"
  },
  {
    "text": "could compile his his code so we have already learned that",
    "start": "2026080",
    "end": "2032080"
  },
  {
    "text": "it's not just about base classes so strategy",
    "start": "2032080",
    "end": "2037600"
  },
  {
    "text": "I just picked on this one because this is something quite quite useful to to uh",
    "start": "2037600",
    "end": "2042880"
  },
  {
    "text": "to talk about so this classic form is often considered to be the one implementation strategy is a base class",
    "start": "2042880",
    "end": "2050240"
  },
  {
    "text": "and we can provide things and nothing could be farther from the truth there's",
    "start": "2050240",
    "end": "2055760"
  },
  {
    "text": "so many different ways to to do a strategy and in fact the C+ standard libr itself uses hundreds of strategies",
    "start": "2055760",
    "end": "2065000"
  },
  {
    "text": "inde hundreds of them so just a few examples unique",
    "start": "2065000",
    "end": "2072320"
  },
  {
    "text": "pointer that's a class that all of us know about and I think you are aware of the fact that unic point actually has",
    "start": "2072320",
    "end": "2078599"
  },
  {
    "text": "two template parameters T and the deleter T being the type that we deal",
    "start": "2078599",
    "end": "2083839"
  },
  {
    "text": "with and deleter being the thing that cleans up eventually now this deleter this is not",
    "start": "2083839",
    "end": "2090398"
  },
  {
    "text": "just some nice new idea this deleter is actually a strategy",
    "start": "2090399",
    "end": "2097440"
  },
  {
    "text": "just in template form dependency injection so we inject the deleting Behavior into the uni",
    "start": "2097440",
    "end": "2104160"
  },
  {
    "text": "pointer class configure the uni pointer that's a",
    "start": "2104160",
    "end": "2110079"
  },
  {
    "text": "strategy then St um um um stood Vector the the um the container two template",
    "start": "2110079",
    "end": "2117400"
  },
  {
    "text": "parameters again we have the T and we have allocator and of course the allocator",
    "start": "2117400",
    "end": "2122920"
  },
  {
    "text": "it's not just some idea it allows me to inject the allocation um mechanism now",
    "start": "2122920",
    "end": "2128440"
  },
  {
    "text": "it allows me to say uh to tell Vector how to acquire memory it's a strategy",
    "start": "2128440",
    "end": "2133880"
  },
  {
    "text": "again nothing about a strategy in in form of a template parameter in fact",
    "start": "2133880",
    "end": "2139160"
  },
  {
    "text": "pretty much all containers use a strategy all over the place so hash said",
    "start": "2139160",
    "end": "2144480"
  },
  {
    "text": "here actually has three different strategies then",
    "start": "2144480",
    "end": "2152079"
  },
  {
    "text": "algorithms accumulate so I want to accumulate meaning sum up all the numbers in this",
    "start": "2152079",
    "end": "2159560"
  },
  {
    "text": "Vector of integers 1 2 3 4 5 to 7 of course I would pass begin numbers",
    "start": "2159560",
    "end": "2166240"
  },
  {
    "text": "and numbers a zero okay and then I can decide how to add things up okay I chose",
    "start": "2166240",
    "end": "2173319"
  },
  {
    "text": "the boring thing perhaps but stood plus what is stood",
    "start": "2173319",
    "end": "2178760"
  },
  {
    "text": "plus well it's a strategy it's a",
    "start": "2178760",
    "end": "2184400"
  },
  {
    "text": "strategy I inject the behavior for the accumulation into accumulate I decide",
    "start": "2184400",
    "end": "2190359"
  },
  {
    "text": "how accumulate should do its work accumulate doesn't care it will do its job I can inject this",
    "start": "2190359",
    "end": "2197640"
  },
  {
    "text": "behavior and next example generate so generate is",
    "start": "2197640",
    "end": "2203319"
  },
  {
    "text": "the algorithm that builds the vector with numbers not in sense of it adds numbers but it sets the the numbers",
    "start": "2203319",
    "end": "2210119"
  },
  {
    "text": "generate takes a ah no not a strategy F Factory method",
    "start": "2210119",
    "end": "2217119"
  },
  {
    "text": "so now not every dependency injection must be a strategy but this one this one generates something and again it's a",
    "start": "2217119",
    "end": "2225760"
  },
  {
    "text": "template paramet that allows me to say how the things which things are created Factory",
    "start": "2225760",
    "end": "2233040"
  },
  {
    "text": "method and so indeed generate could be written in so many different ways of course the",
    "start": "2233040",
    "end": "2240040"
  },
  {
    "text": "standard way of doing things is um to pass a template parameter um uh",
    "start": "2240040",
    "end": "2245720"
  },
  {
    "text": "generator and yes of course this is the right way of doing things but it would still be a factor method if I would um",
    "start": "2245720",
    "end": "2252240"
  },
  {
    "text": "do this in form of a function pointer yeah okay the AR archaic thing but I",
    "start": "2252240",
    "end": "2258480"
  },
  {
    "text": "could do it if I wanted to so function pointer still Factory method I could yes",
    "start": "2258480",
    "end": "2264440"
  },
  {
    "text": "of course also use a base class not particularly um good idea in in the context of dstl but generally it would",
    "start": "2264440",
    "end": "2272079"
  },
  {
    "text": "be a factory method so in form of a base class and last one not least I could",
    "start": "2272079",
    "end": "2278240"
  },
  {
    "text": "Envision also that we pass a St function again not a good idea s we have runtime",
    "start": "2278240",
    "end": "2283319"
  },
  {
    "text": "po but it it definitely is still Factory method so it's not the how I implement",
    "start": "2283319",
    "end": "2289960"
  },
  {
    "text": "it it's what I want to express it's the name it's the term so my own quote design patterns",
    "start": "2289960",
    "end": "2298400"
  },
  {
    "text": "truly are everywhere every kind of dependency inversion every kind of dependency management all of these are",
    "start": "2298400",
    "end": "2305440"
  },
  {
    "text": "already designed patterns they are everywhere we cannot work without them",
    "start": "2305440",
    "end": "2311960"
  },
  {
    "text": "so please do not believe that design patterns are objectoriented programming",
    "start": "2311960",
    "end": "2317599"
  },
  {
    "text": "now I believe they're one of the most essential building blocks for successful software development and as part of that",
    "start": "2317599",
    "end": "2324720"
  },
  {
    "text": "being such an essential building block it definitely is about the terminology",
    "start": "2324720",
    "end": "2330599"
  },
  {
    "text": "so if we cannot talk about them because we and misunderstand each other because you have a different idea then of course",
    "start": "2330599",
    "end": "2336560"
  },
  {
    "text": "it doesn't work really well so please realize that the terminology around design patterns represent represents an",
    "start": "2336560",
    "end": "2343560"
  },
  {
    "text": "essential tool to deal with software complexity and so to quote Cara",
    "start": "2343560",
    "end": "2351640"
  },
  {
    "text": "again the use of design patent provides us in our daily lives with decisive speed advantages for understanding",
    "start": "2351640",
    "end": "2358079"
  },
  {
    "text": "complex structures this is also why patterns found the way into software development years ago consistently",
    "start": "2358079",
    "end": "2364560"
  },
  {
    "text": "applied patterns help us to deal with complexity of source code so and a such",
    "start": "2364560",
    "end": "2370400"
  },
  {
    "text": "I really think that terminology truly matters so please keep these terms in",
    "start": "2370400",
    "end": "2375480"
  },
  {
    "text": "mind and uh use them consistently thank you very",
    "start": "2375480",
    "end": "2381640"
  },
  {
    "text": "much so we definitely have time for a few questions if there are",
    "start": "2386640",
    "end": "2392800"
  },
  {
    "text": "some",
    "start": "2395400",
    "end": "2398400"
  },
  {
    "text": "all right that was the capital M",
    "start": "2405599",
    "end": "2410079"
  },
  {
    "text": "okay one question wouldn't the um example where you pass the generator",
    "start": "2412560",
    "end": "2419760"
  },
  {
    "text": "argument uh uh to the the argument of the factory to the generator couldn't",
    "start": "2419760",
    "end": "2425880"
  },
  {
    "text": "you interpret that also as a command and here we are again at so the",
    "start": "2425880",
    "end": "2431520"
  },
  {
    "text": "question was just to speak it out loud again um couldn't this uh injection of a",
    "start": "2431520",
    "end": "2437319"
  },
  {
    "text": "pointer Etc be a command oh my this is now something we could talk for hours",
    "start": "2437319",
    "end": "2442720"
  },
  {
    "text": "about yeah command is again one of these patterns that looks exactly like strategy and Factory they all look alike",
    "start": "2442720",
    "end": "2448720"
  },
  {
    "text": "some point so I would not fight over which term it truly is doesn't matter",
    "start": "2448720",
    "end": "2455280"
  },
  {
    "text": "the most important point is to really realize that there is some some dependency management happening so if",
    "start": "2455280",
    "end": "2461560"
  },
  {
    "text": "you feel like it's a factory method and if you call it this way no I called my function point a factory method okay",
    "start": "2461560",
    "end": "2468119"
  },
  {
    "text": "then then you communicate what you want to have in code if you call this command okay then why not then you interpret",
    "start": "2468119",
    "end": "2475319"
  },
  {
    "text": "this as a command still gives me the ability to do something yeah so okay I I",
    "start": "2475319",
    "end": "2480640"
  },
  {
    "text": "would argue it's a factory method but I would not fight over it just just to tease",
    "start": "2480640",
    "end": "2487240"
  },
  {
    "text": "um another comment I'd like to make if if nobody has questions I don't want to uh that maybe to to give you an",
    "start": "2487240",
    "end": "2494839"
  },
  {
    "text": "impression I wrote a patent book or several patent books actually and the first one was the second one after the",
    "start": "2494839",
    "end": "2500560"
  },
  {
    "text": "gang of four patent books so uh yeah and and and I'm teaching that for I forgot how maybe 30 years now and",
    "start": "2500560",
    "end": "2509040"
  },
  {
    "text": "I think we allowed to see the the title of the book patn oriented architecture which is",
    "start": "2509040",
    "end": "2514520"
  },
  {
    "text": "AA yeah um which is a um again a classic yeah this is",
    "start": "2514520",
    "end": "2520960"
  },
  {
    "text": "something that everybody should have taken a look at um maybe one comment I",
    "start": "2520960",
    "end": "2526680"
  },
  {
    "text": "gave a talk ages ago about design patterns in modern C++ and uh still",
    "start": "2526680",
    "end": "2532920"
  },
  {
    "text": "using inheritance from time to time but actually using a lot of the customization points through template",
    "start": "2532920",
    "end": "2538680"
  },
  {
    "text": "parameters and that often turns around the inheritance hierarchy on uh uh top",
    "start": "2538680",
    "end": "2544760"
  },
  {
    "text": "down so what you see the go pattern you have the base abstraction and then uh derived classes in if you if you use",
    "start": "2544760",
    "end": "2551240"
  },
  {
    "text": "template parameters you tend to have uh then have the crtp pattern inside",
    "start": "2551240",
    "end": "2558040"
  },
  {
    "text": "where you more or less inherit from your your parameter instead of uh uh going the other way around yeah good comment",
    "start": "2558040",
    "end": "2565480"
  },
  {
    "text": "so maybe I should resurrect that talk for next year why not I think as I said",
    "start": "2565480",
    "end": "2570559"
  },
  {
    "text": "in the beginning I think we are not talking about this enough um talk about the little details in the language",
    "start": "2570559",
    "end": "2576720"
  },
  {
    "text": "standards features but not so much about how to design things the big picture all",
    "start": "2576720",
    "end": "2581880"
  },
  {
    "text": "right then you have an early lunch break this is good I believe thank you very",
    "start": "2581880",
    "end": "2587920"
  },
  {
    "text": "much",
    "start": "2593000",
    "end": "2596000"
  }
]