[
  {
    "start": "0",
    "end": "9000"
  },
  {
    "text": "all right think about ready so hello and my name is Diane I'm the maintainer of massive joyous",
    "start": "4180",
    "end": "10670"
  },
  {
    "start": "9000",
    "end": "72000"
  },
  {
    "text": "just a data access framework for node and PostgreSQL it's a little bit unusual in a few respects first and that it's",
    "start": "10670",
    "end": "17930"
  },
  {
    "text": "working with relational databases in node which is already heavily focused on no sequel stores for the most part like",
    "start": "17930",
    "end": "24740"
  },
  {
    "text": "document dps especially second that it's more in the data mapper style as opposed",
    "start": "24740",
    "end": "29750"
  },
  {
    "text": "to the more common object relational mapper and finally that it's exclusive",
    "start": "29750",
    "end": "35030"
  },
  {
    "text": "to poster as it doesn't work with any other type of relational database which is just about unheard of so what I'm",
    "start": "35030",
    "end": "41449"
  },
  {
    "text": "gonna be talking about today is kind of the theory or the philosophy of why massive is design of a it is why it or",
    "start": "41449",
    "end": "48350"
  },
  {
    "text": "how it works with data differently from some of its counterparts and other data access libraries and why exclusivity to",
    "start": "48350",
    "end": "55609"
  },
  {
    "text": "post pairs makes sense in node specifically as opposed to other contexts I'm also going to get into some",
    "start": "55609",
    "end": "62089"
  },
  {
    "text": "of the practical aspects of how massive represents the database in client code and some survey some of the tools that",
    "start": "62089",
    "end": "68540"
  },
  {
    "text": "it provides for working with the contents of your datastore data access",
    "start": "68540",
    "end": "74630"
  },
  {
    "start": "72000",
    "end": "133000"
  },
  {
    "text": "in JavaScript would have been a punch line not ten years ago and honestly JavaScript itself still is some quarters",
    "start": "74630",
    "end": "79790"
  },
  {
    "text": "I'm a little bit guilty of that myself my background is all in Java and c-sharp back in the old days but about five",
    "start": "79790",
    "end": "87650"
  },
  {
    "text": "years ago I was stuck on a legacy Enterprise Grails application and the boss said there's new project coming",
    "start": "87650",
    "end": "93050"
  },
  {
    "text": "down the pipeline but we're using node so he could have told me involved COBOL but I learned JavaScript that was how",
    "start": "93050",
    "end": "100240"
  },
  {
    "text": "and what I found and I started digging into it was Doug Crockford calls it the",
    "start": "100240",
    "end": "105950"
  },
  {
    "text": "world's most misunderstood programming language and by and large is correct you've got first-class functions so you",
    "start": "105950",
    "end": "112700"
  },
  {
    "text": "can be all cool and functional you've got a prototypal inheritance model as opposed to the more common class-based",
    "start": "112700",
    "end": "118430"
  },
  {
    "text": "version there's a complete lack of type safety which is scary enough that there are multiple static type checkers in the",
    "start": "118430",
    "end": "125060"
  },
  {
    "text": "form of typescript and flow and all of these aspects are kind of weird at first but they're all critical to how massive",
    "start": "125060",
    "end": "131209"
  },
  {
    "text": "can actually work the real elephant in the room though if you will is the",
    "start": "131209",
    "end": "136370"
  },
  {
    "start": "133000",
    "end": "223000"
  },
  {
    "text": "exclusivity to so like I said using a relational database with node is already a little",
    "start": "136370",
    "end": "142460"
  },
  {
    "text": "bit unusual people generally reach for MongoDB first or maybe couch but that's",
    "start": "142460",
    "end": "148070"
  },
  {
    "text": "largely because we can speak JavaScript to the database and you work in terms of",
    "start": "148070",
    "end": "153560"
  },
  {
    "text": "JSON documents which are very easy to work with in JavaScript but the thing",
    "start": "153560",
    "end": "159080"
  },
  {
    "text": "that we've discovered in the past few years is the whole no sequel backlash sort of got off the ground is that all",
    "start": "159080",
    "end": "165470"
  },
  {
    "text": "of these no sequel stores are specialized you know you have the document databases key value stores like",
    "start": "165470",
    "end": "171650"
  },
  {
    "text": "Redis and BigTable derivatives like Cassandra HBase that are all extremely good at a certain set of things and",
    "start": "171650",
    "end": "178130"
  },
  {
    "text": "they're not generalists relational databases meanwhile have been sorted the Swiss Army knife of data access for the",
    "start": "178130",
    "end": "184700"
  },
  {
    "text": "past 45 years they can do just about everything tolerably well at sub planet",
    "start": "184700",
    "end": "190340"
  },
  {
    "text": "scale and unless somebody manages to turn the entire field of discrete math on its head they're gonna be doing that",
    "start": "190340",
    "end": "196730"
  },
  {
    "text": "for the next 45 years as well so they're here to stay but when you do use a",
    "start": "196730",
    "end": "202040"
  },
  {
    "text": "relational data access framework you expect to be able to transplant to build it on my sequel deploy it on sequel",
    "start": "202040",
    "end": "209150"
  },
  {
    "text": "server or both and a lot of data access libraries tout compatibility as a",
    "start": "209150",
    "end": "215180"
  },
  {
    "text": "selling point the idea is that it shouldn't matter which DBMS or database management system you're actually using",
    "start": "215180",
    "end": "221230"
  },
  {
    "text": "except it kind of does so every DBMS has",
    "start": "221230",
    "end": "226550"
  },
  {
    "start": "223000",
    "end": "344000"
  },
  {
    "text": "a different approach to conformance with the standard it's issued every few years by the American National Standards",
    "start": "226550",
    "end": "231650"
  },
  {
    "text": "Institute and it describes the ideal relational database if ever actually",
    "start": "231650",
    "end": "238250"
  },
  {
    "text": "implemented to completion whatever product managed to do it would fetch your slippers and make you breakfast in",
    "start": "238250",
    "end": "243650"
  },
  {
    "text": "bed it's extensive and there's a lot in there that nobody's really gotten into",
    "start": "243650",
    "end": "248890"
  },
  {
    "text": "so every actual database management system is sort of catching up to what's",
    "start": "248890",
    "end": "254450"
  },
  {
    "text": "in the standard and as the new version comes out they get further and further behind some DBMS is actually just go",
    "start": "254450",
    "end": "262430"
  },
  {
    "text": "ahead and violate the standard anyway probably the easiest example is sequel server with top the standard specifies",
    "start": "262430",
    "end": "268280"
  },
  {
    "text": "that you limit the number of results by using the limit keyword at the end of a query sequel server just goes and does its own",
    "start": "268280",
    "end": "274650"
  },
  {
    "text": "thing out of the major relational databases in existence the closest one",
    "start": "274650",
    "end": "281400"
  },
  {
    "text": "it's kind of difficult to quantify is probably oracle post res is the next",
    "start": "281400",
    "end": "286860"
  },
  {
    "text": "best and it's also about the only one that any of us could afford on our own because it's free postcards notably",
    "start": "286860",
    "end": "293760"
  },
  {
    "text": "managed to get out ahead of the standards in 2016 when ANSI introduced",
    "start": "293760",
    "end": "298890"
  },
  {
    "text": "the JSON section of the standard postcards actually already supported it and had fairly robust set of tools for",
    "start": "298890",
    "end": "306750"
  },
  {
    "text": "working with JSON inside relational tables it has a whole host of other features too that appear at only some or",
    "start": "306750",
    "end": "314280"
  },
  {
    "text": "none of its competitors you have array fields you have table inheritance",
    "start": "314280",
    "end": "319640"
  },
  {
    "text": "materialized views common table expressions probably the most important from an architectural perspective is the",
    "start": "319640",
    "end": "326580"
  },
  {
    "text": "foreign data wrapper which allows you to represent a MongoDB collection or a",
    "start": "326580",
    "end": "331770"
  },
  {
    "text": "spreadsheet or a REST API basically anything that represents information in discrete records as a table which you",
    "start": "331770",
    "end": "339300"
  },
  {
    "text": "can then retrieve information from and write information back to",
    "start": "339300",
    "end": "344960"
  },
  {
    "start": "344000",
    "end": "445000"
  },
  {
    "text": "so another reason to be sort of going long on postgrads is that it's kind of having a moment the y-axis here is",
    "start": "350900",
    "end": "357210"
  },
  {
    "text": "logarithmic so bear that in mind but our DBMS world has historically been",
    "start": "357210",
    "end": "363150"
  },
  {
    "text": "dominated by sort of the big three my sequel sequel server and oracle Postgres",
    "start": "363150",
    "end": "368430"
  },
  {
    "text": "is beginning to make inroads on turning that into the big four it actually did",
    "start": "368430",
    "end": "373680"
  },
  {
    "text": "pass MongoDB on this chart because number four overall not just in relational database relational databases",
    "start": "373680",
    "end": "381030"
  },
  {
    "text": "early in 2017 but there's one really important characteristic that postcards",
    "start": "381030",
    "end": "386580"
  },
  {
    "text": "has besides just having all those features and being kind of an underdog on the rise which is that it is the only",
    "start": "386580",
    "end": "393780"
  },
  {
    "text": "major our DBMS that is really community driven after Oracle bought my sequel and",
    "start": "393780",
    "end": "399330"
  },
  {
    "text": "Monte wood NES broke off to start mariadb none of the big three are truly community backed projects anymore sequel",
    "start": "399330",
    "end": "406770"
  },
  {
    "text": "server and oracle are both proprietary my sequel is joined at the hip to Oracle",
    "start": "406770",
    "end": "412220"
  },
  {
    "text": "postgrads meanwhile has been around since 1996 so it's a very stable very mature product and if you want",
    "start": "412220",
    "end": "419130"
  },
  {
    "text": "enterprise support you can get it from siteís or Enterprise to be here any of a host of other vendors but it being",
    "start": "419130",
    "end": "425880"
  },
  {
    "text": "community project is also something of a weakness because without that community that's actually writing code for it and",
    "start": "425880",
    "end": "432150"
  },
  {
    "text": "around it it's dead there's just nothing there so I think it's really important to keep the open source option viable",
    "start": "432150",
    "end": "438600"
  },
  {
    "text": "and that means writing code that targets it not just explicitly but exclusively",
    "start": "438600",
    "end": "445160"
  },
  {
    "start": "445000",
    "end": "481000"
  },
  {
    "text": "so after the choice of language and database probably the biggest question in a back-end architecture for an",
    "start": "448070",
    "end": "454740"
  },
  {
    "text": "application is how do you approach data work itself and the object relational",
    "start": "454740",
    "end": "460560"
  },
  {
    "text": "mapper or ORM is a very common choice for that and there are really reasons",
    "start": "460560",
    "end": "465870"
  },
  {
    "text": "it's attractive if you don't have to write sequel to get started which if you don't already know sequel is kind of",
    "start": "465870",
    "end": "471000"
  },
  {
    "text": "intimidating you don't have to think about your the layout of your database which again if it's not a subject you're",
    "start": "471000",
    "end": "477539"
  },
  {
    "text": "familiar with it's a lot to take in but it's got problems",
    "start": "477539",
    "end": "484460"
  },
  {
    "start": "481000",
    "end": "527000"
  },
  {
    "text": "so this is from a 2006 blog post and Ted know where it continues that it",
    "start": "484490",
    "end": "490040"
  },
  {
    "text": "represents a quagmire which starts well gets more complicated as time passes and before long and traps its users in a",
    "start": "490040",
    "end": "496410"
  },
  {
    "text": "commitment that has no clear demarcation point no clear wind conditions and no clear exit strategy o our aims have",
    "start": "496410",
    "end": "503970"
  },
  {
    "text": "major limitations that are not immediately obvious and they just as software encourage a host of bad habits",
    "start": "503970",
    "end": "511110"
  },
  {
    "text": "in developers who use them foundational to most of these problems is that they",
    "start": "511110",
    "end": "516900"
  },
  {
    "text": "encourage of view of the database as a black box that you don't really understand you just put information into",
    "start": "516900",
    "end": "522810"
  },
  {
    "text": "it and pull information back out of it this contrasts with a view of the database as an organizing principle this",
    "start": "522810",
    "end": "530970"
  },
  {
    "start": "527000",
    "end": "606000"
  },
  {
    "text": "building is the Villa Savoye it's a actually a house built in the late 1920s",
    "start": "530970",
    "end": "536700"
  },
  {
    "text": "early 30s by the French architect Le Corbusier who's sort of Maxim was that a house is a machine for living so with",
    "start": "536700",
    "end": "545820"
  },
  {
    "text": "the Villa Savoye he had essentially free reign to indulge his principles and make",
    "start": "545820",
    "end": "551160"
  },
  {
    "text": "the best case he could for his view of architecture and it turns out is actually not that great as a house you",
    "start": "551160",
    "end": "556950"
  },
  {
    "text": "might notice there's no gutters on it which admit that it's been plagued by rain damage problems ever since construction was completed and nobody",
    "start": "556950",
    "end": "563730"
  },
  {
    "text": "actually lives inside it anymore it's a museum and the reasoning behind this is",
    "start": "563730",
    "end": "568950"
  },
  {
    "text": "that people really hate living in machines it's the sort of thing that we write dystopian fiction about yeah going",
    "start": "568950",
    "end": "575430"
  },
  {
    "text": "all the way back to they have on Harvey's metropolis more famous is the movie which features machines for living",
    "start": "575430",
    "end": "582420"
  },
  {
    "text": "and machines for working and central to the conflict of that book is one of the machines for working which is named Ola",
    "start": "582420",
    "end": "588690"
  },
  {
    "text": "and it eats people which kind of sets the tone for the whole thing but when",
    "start": "588690",
    "end": "594480"
  },
  {
    "text": "restoring information that has to be a mechanical process we have to have well-defined schemas and relationships",
    "start": "594480",
    "end": "600750"
  },
  {
    "text": "and we have to approach them consistently in order for them to be at all useful",
    "start": "600750",
    "end": "606800"
  },
  {
    "text": "databases have to be internally coherent but when you're using an object relational mapper it encourages you not",
    "start": "610600",
    "end": "617630"
  },
  {
    "text": "to think about that to put minimal thought into how your information is",
    "start": "617630",
    "end": "622910"
  },
  {
    "text": "actually structured when it's being stored so this results in a whole host of issues that tend to bite people later",
    "start": "622910",
    "end": "629390"
  },
  {
    "text": "on in maintenance or post release such as poor performance due to inefficient",
    "start": "629390",
    "end": "635000"
  },
  {
    "text": "structuring of data redundancy and inconsistency having related information",
    "start": "635000",
    "end": "640400"
  },
  {
    "text": "stored so far apart it has to be duplicated organic model growth if you",
    "start": "640400",
    "end": "646040"
  },
  {
    "text": "baked version 1 come back to add a new feature and realize you have suddenly a choice between major surgery on your",
    "start": "646040",
    "end": "651830"
  },
  {
    "text": "data model or just bolting something on to the side and hoping nobody looks too closely at it many of these issues can",
    "start": "651830",
    "end": "658820"
  },
  {
    "text": "be worked around with proper application of sequel but Oren's were supposed to",
    "start": "658820",
    "end": "663980"
  },
  {
    "text": "save you from having to do that in the first place and if you have some of the structural problems there's no getting",
    "start": "663980",
    "end": "669770"
  },
  {
    "text": "around them even with a full rewrite of the application you have to overhaul your database and hope and pray that you",
    "start": "669770",
    "end": "676910"
  },
  {
    "text": "can get the information you already have into the new format without losing too much of it all of this sort of at root",
    "start": "676910",
    "end": "685250"
  },
  {
    "start": "682000",
    "end": "738000"
  },
  {
    "text": "comes down to it's called the object-relational impedance mismatch both of these models actually represent",
    "start": "685250",
    "end": "690830"
  },
  {
    "text": "the same structure but they look vastly different so relational databases care about two things records and links",
    "start": "690830",
    "end": "698330"
  },
  {
    "text": "between records it's like building and logic and that the simplicity makes it really really powerful meanwhile objects",
    "start": "698330",
    "end": "705950"
  },
  {
    "text": "in application code relate in many many more complicated ways in terms of ownership and traversal and all manner",
    "start": "705950",
    "end": "714050"
  },
  {
    "text": "of data structures that relational databases don't have a clue about and it's actually worse in JavaScript",
    "start": "714050",
    "end": "720770"
  },
  {
    "text": "because of how easy it is to mutate objects to add new properties to change prototypes do this that and the other so",
    "start": "720770",
    "end": "727870"
  },
  {
    "text": "you have to handle the translation from the object model to the data model and",
    "start": "727870",
    "end": "733130"
  },
  {
    "text": "vice versa extremely intelligently in order to do it safely",
    "start": "733130",
    "end": "738730"
  },
  {
    "start": "738000",
    "end": "813000"
  },
  {
    "text": "and if you used an RM for long enough you eventually have to pay for the convenience that it gave you early on",
    "start": "741459",
    "end": "747670"
  },
  {
    "text": "basically anything complicated is going to involve writing sequel and again your",
    "start": "747670",
    "end": "752750"
  },
  {
    "text": "as opposed to not have to do that but if you want to actually take",
    "start": "752750",
    "end": "757970"
  },
  {
    "text": "advantage of the compatibility selling point you're writing lowest common denominator sequel you're ignoring the",
    "start": "757970",
    "end": "764300"
  },
  {
    "text": "feature set of whatever database you've settled on in favor of just whatever can be applied across the board",
    "start": "764300",
    "end": "771070"
  },
  {
    "text": "alternatively you can split the query logic and have to maintain twice as many queries if you want to do CQRS command",
    "start": "771070",
    "end": "779570"
  },
  {
    "text": "currie responsibility segregation you're now maintaining three data models not just the actual storage model but also",
    "start": "779570",
    "end": "786380"
  },
  {
    "text": "the application read and the application write pictures of what your data looks",
    "start": "786380",
    "end": "791690"
  },
  {
    "text": "like if you want to do bulk persistence operations sometimes that's supported to",
    "start": "791690",
    "end": "798050"
  },
  {
    "text": "a certain extent but even when it is present in the library it's a departure",
    "start": "798050",
    "end": "803899"
  },
  {
    "text": "from the metaphor which encourages you to pull out information and then have each record object manage its own state",
    "start": "803899",
    "end": "811070"
  },
  {
    "text": "internally so this all kind of brings us to the crux of the matter which is",
    "start": "811070",
    "end": "816709"
  },
  {
    "start": "813000",
    "end": "934000"
  },
  {
    "text": "abstraction so all of software development is about building up layers of abstractions under ourselves in the",
    "start": "816709",
    "end": "823250"
  },
  {
    "text": "early days we built assemblers to abstract over electrical pulses later on we started designing languages and",
    "start": "823250",
    "end": "828890"
  },
  {
    "text": "building compilers linkers and interpreters to abstract over assembly if it's pneumatics and registers we're",
    "start": "828890",
    "end": "833930"
  },
  {
    "text": "still a bit much to manage in the 21st century we've been creating frameworks so that we don't have to think about the",
    "start": "833930",
    "end": "840230"
  },
  {
    "text": "low-level plumbing any more than we have to and there's the temptation to think of the database as that low-level",
    "start": "840230",
    "end": "845540"
  },
  {
    "text": "plumbing it used to be the province of the database administrators and you had to climb at Everest to talk to them and",
    "start": "845540",
    "end": "852380"
  },
  {
    "text": "beg for permission to make a change and be told no but the role of the database has really evolved into a single",
    "start": "852380",
    "end": "860149"
  },
  {
    "text": "application persistence store and that means that application developers have",
    "start": "860149",
    "end": "865940"
  },
  {
    "text": "become responsible for design and layout and tuning even if the day to day care",
    "start": "865940",
    "end": "871670"
  },
  {
    "text": "and feeding and backup manager that sort of thing is ops Department so",
    "start": "871670",
    "end": "877089"
  },
  {
    "text": "we are responsible for what the database looks like whether we like it or not so we need to think about how we approach",
    "start": "877089",
    "end": "885009"
  },
  {
    "text": "it and the abstract tools that we use to manipulate information so this is from",
    "start": "885009",
    "end": "897100"
  },
  {
    "text": "towards a new model of abstraction and software engineering it's a 1992 paper building on earlier",
    "start": "897100",
    "end": "902559"
  },
  {
    "text": "work by Mary Sean William bulls and cats Alice continues that these abstractions",
    "start": "902559",
    "end": "907689"
  },
  {
    "text": "are backed by real pieces of code running on real machines consuming real energy and taking up real space to",
    "start": "907689",
    "end": "913059"
  },
  {
    "text": "attempts to completely ignore the underlying implementation is like trying to completely ignore the laws of physics",
    "start": "913059",
    "end": "918220"
  },
  {
    "text": "and may be tempting but it won't get us very far and the lesson I take from this",
    "start": "918220",
    "end": "923230"
  },
  {
    "text": "is that at some point the chips are down and we have real information in a real data store somewhere and we need to work",
    "start": "923230",
    "end": "929290"
  },
  {
    "text": "out how to treat it most effectively for the context that we're actually working in this is one context it's my favorite",
    "start": "929290",
    "end": "941019"
  },
  {
    "start": "934000",
    "end": "988000"
  },
  {
    "text": "joke in software development Enterprise fizzbuzz on github fantastic waste of time highly recommended but what makes jokes",
    "start": "941019",
    "end": "948250"
  },
  {
    "text": "like these funny is a kernel of truth underneath it all and here that underlying truth is that these hyper",
    "start": "948250",
    "end": "955180"
  },
  {
    "text": "verbose abstractions that really just torturous are how you achieve",
    "start": "955180",
    "end": "960279"
  },
  {
    "text": "flexibility in statically typed object-oriented languages Java recognizes that flexibility is dangerous",
    "start": "960279",
    "end": "966910"
  },
  {
    "text": "and frankly it's correct but in order to actually be able to use flexibility or",
    "start": "966910",
    "end": "973809"
  },
  {
    "text": "to achieve flexibility in Java it makes you prove that you can understand that - that you know what you're doing that you",
    "start": "973809",
    "end": "979660"
  },
  {
    "text": "can be trusted with those tools so it favors formality and precision over openness to just doing whatever you want",
    "start": "979660",
    "end": "988589"
  },
  {
    "start": "988000",
    "end": "1049000"
  },
  {
    "text": "unlike other contexts ahead okay there's really nothing true about this one at",
    "start": "988709",
    "end": "994480"
  },
  {
    "text": "all but if you view it through the lens of classical irony we can see that as developers using dynamic languages like",
    "start": "994480",
    "end": "1001649"
  },
  {
    "text": "JavaScript we're a little bit spoiled to the point that we start to conflate",
    "start": "1001649",
    "end": "1007050"
  },
  {
    "text": "but the abstractions that we traffic in which are really down to the natural expressiveness of language itself having",
    "start": "1007050",
    "end": "1012630"
  },
  {
    "text": "first order functions having an app introduces native array methods in standard library working on a single",
    "start": "1012630",
    "end": "1018750"
  },
  {
    "text": "thread with asynchronous i/o we start to think of those as being synonymous with low-level power and it's really not",
    "start": "1018750",
    "end": "1025949"
  },
  {
    "text": "nobody's flippin ones and zeros on a platter using node but that's on a",
    "start": "1025949",
    "end": "1031678"
  },
  {
    "text": "technical level on a conceptual level these are very fundamental operations that were performing very very",
    "start": "1031679",
    "end": "1038188"
  },
  {
    "text": "intuitively so it kind of is fundamental",
    "start": "1038189",
    "end": "1043709"
  },
  {
    "text": "in that respect even if this is still a complete nutter crock so given the",
    "start": "1043709",
    "end": "1054300"
  },
  {
    "start": "1049000",
    "end": "1103000"
  },
  {
    "text": "differences between the potential contexts that we work in we need to pay attention to what we're actually working",
    "start": "1054300",
    "end": "1059700"
  },
  {
    "text": "with so object relational mapper is grew out of object-oriented languages not",
    "start": "1059700",
    "end": "1065910"
  },
  {
    "text": "surprisingly the great grandi great granddaddy of course was hibernate which",
    "start": "1065910",
    "end": "1071070"
  },
  {
    "text": "came out of Java and they provide a usable metaphor for data access in those strongly typed formally object-oriented",
    "start": "1071070",
    "end": "1077940"
  },
  {
    "text": "languages but that doesn't make them the best universal tool it's like document databases are great at storing",
    "start": "1077940",
    "end": "1083870"
  },
  {
    "text": "hierarchical information but less good at any kind of general case so we need",
    "start": "1083870",
    "end": "1090780"
  },
  {
    "text": "to remember that abstraction for its own sake doesn't actually get us anywhere if we blindly deploy an abstraction that",
    "start": "1090780",
    "end": "1097020"
  },
  {
    "text": "was built and intended for a different context there's a really good chance that it's only gonna make our lives harder dynamic languages specifically",
    "start": "1097020",
    "end": "1107090"
  },
  {
    "start": "1103000",
    "end": "1167000"
  },
  {
    "text": "make it really easy to specialize we don't have a lot of the overhead that",
    "start": "1107090",
    "end": "1113360"
  },
  {
    "text": "languages on the other side of the fence kind of do we don't have interfaces or abstract classes to worry about",
    "start": "1113360",
    "end": "1119580"
  },
  {
    "text": "we don't have types we don't really have access modifiers there's an asterisk by that one we don't even have index out of",
    "start": "1119580",
    "end": "1126480"
  },
  {
    "text": "range errors because you just get undefined if you pass an invalid index so this all encourages us to build",
    "start": "1126480",
    "end": "1133440"
  },
  {
    "text": "concrete systems or specialized systems that still have a very light footprint because the to look at the language",
    "start": "1133440",
    "end": "1140250"
  },
  {
    "text": "gives allows us to build to express the same",
    "start": "1140250",
    "end": "1145650"
  },
  {
    "text": "concepts in much less space so having lighter code bases means there's a lot",
    "start": "1145650",
    "end": "1150930"
  },
  {
    "text": "less investment in them which makes it easy to scrap and rebuild should it come to that as opposed to something like",
    "start": "1150930",
    "end": "1157500"
  },
  {
    "text": "Java where the code base is just so much more verbose there's much more volume to",
    "start": "1157500",
    "end": "1162630"
  },
  {
    "text": "it and volume translates to inertia so",
    "start": "1162630",
    "end": "1171270"
  },
  {
    "start": "1167000",
    "end": "1232000"
  },
  {
    "text": "that's it for the manifesto apart massive has been around for several",
    "start": "1171270",
    "end": "1176490"
  },
  {
    "text": "years it was originally Rob Connery's project one of his micro RMS he started",
    "start": "1176490",
    "end": "1182040"
  },
  {
    "text": "that in 2012 I began contributing to it in 2015 and eventually when Rob moved on to become the hipster and do a Luxor",
    "start": "1182040",
    "end": "1188250"
  },
  {
    "text": "stuff took over the project massive is what I would call moderately popular the",
    "start": "1188250",
    "end": "1195630"
  },
  {
    "text": "clear heavyweights in terms of data access with node is Mongoose which is an ORM for MongoDB we're a couple orders of",
    "start": "1195630",
    "end": "1204660"
  },
  {
    "text": "magnitude less popular than that in terms of relational data the household name if you will is sequel eyes which is",
    "start": "1204660",
    "end": "1212760"
  },
  {
    "text": "again much more popular but in sort of the second tier of data access frameworks massive is a small but",
    "start": "1212760",
    "end": "1220890"
  },
  {
    "text": "contender in there expect that the postgrads exclusivity probably counts",
    "start": "1220890",
    "end": "1226380"
  },
  {
    "text": "for some of that because a lot of people still do have to use my sequel or sequel server but the fundamental approach that",
    "start": "1226380",
    "end": "1234750"
  },
  {
    "start": "1232000",
    "end": "1342000"
  },
  {
    "text": "massive takes is that MongoDB really got the whole JavaScript as query language",
    "start": "1234750",
    "end": "1240210"
  },
  {
    "text": "thing correct so in the spirit of good artists copying we're just going to steal that and run with it so the",
    "start": "1240210",
    "end": "1247350"
  },
  {
    "text": "database isn't just a black box that you've pushed information into and pull it out of it's an active principle in",
    "start": "1247350",
    "end": "1254430"
  },
  {
    "text": "whatever system it is that we're building and we need to respect it and use the metaphors that we already have",
    "start": "1254430",
    "end": "1261300"
  },
  {
    "text": "for interacting with principles like that and that's the application programming interface or API so massive",
    "start": "1261300",
    "end": "1268940"
  },
  {
    "text": "connects given information that you pass to it and returns an instance that",
    "start": "1268940",
    "end": "1274419"
  },
  {
    "text": "as objects attached for your tables and views and so forth and just provides an",
    "start": "1274419",
    "end": "1280179"
  },
  {
    "text": "idiomatic interface for interacting with those database objects as objects one of",
    "start": "1280179",
    "end": "1287769"
  },
  {
    "text": "the most frustrating things about working with an ORM is having to first define and later maintain models that's",
    "start": "1287769",
    "end": "1295840"
  },
  {
    "text": "not happening for us we talked directly to tables to views and to functions its",
    "start": "1295840",
    "end": "1304059"
  },
  {
    "text": "follows more of process of translation instead of reimagining your data model as an object model so this allows direct",
    "start": "1304059",
    "end": "1312580"
  },
  {
    "text": "usage of just about the full feature set of the database so you can use functions",
    "start": "1312580",
    "end": "1318609"
  },
  {
    "text": "which other data access frameworks often ignore you can use triggers without having to worry about what it's going to",
    "start": "1318609",
    "end": "1324639"
  },
  {
    "text": "do to State and triggers are fine I believe it and it's better for command",
    "start": "1324639",
    "end": "1330609"
  },
  {
    "text": "query responsibility segregation too because you don't have three data models you can just talk directly to your",
    "start": "1330609",
    "end": "1337059"
  },
  {
    "text": "tables to persist data and to your views to actually read it if we have these",
    "start": "1337059",
    "end": "1345009"
  },
  {
    "start": "1342000",
    "end": "1451000"
  },
  {
    "text": "things actually attached to a connected instance we need to represent what goes on inside the each database object so",
    "start": "1345009",
    "end": "1352809"
  },
  {
    "text": "the first aspect of these building blocks is whatever you can issue a select statement against each of these",
    "start": "1352809",
    "end": "1360940"
  },
  {
    "text": "methods invokes one of the four sequel statement generators and returns a promise for results which generally is",
    "start": "1360940",
    "end": "1368379"
  },
  {
    "text": "an array of Records exception there is find one which obviously returns a single record count returns the number",
    "start": "1368379",
    "end": "1377128"
  },
  {
    "text": "find and find one and count are taking a criteria object although find one there",
    "start": "1379379",
    "end": "1386139"
  },
  {
    "text": "has a primary key you can switch them out the criteria object allows you to",
    "start": "1386139",
    "end": "1391690"
  },
  {
    "text": "generate conditions to look for records in the table or view so it just adds",
    "start": "1391690",
    "end": "1398049"
  },
  {
    "text": "together a predicate key value pairs that you pass it we do allow both JSON traversal",
    "start": "1398049",
    "end": "1404950"
  },
  {
    "text": "in a much nicer format than postcards it otherwise have you doing it and operations so we",
    "start": "1404950",
    "end": "1412280"
  },
  {
    "text": "can look for artists who started exhibiting before 1900 without having to",
    "start": "1412280",
    "end": "1418160"
  },
  {
    "text": "do anything too complicated if you need to write more complex conditions you can",
    "start": "1418160",
    "end": "1423350"
  },
  {
    "text": "also use an or key and pass an array of other criteria objects and it will take care of the rest for you so this covers",
    "start": "1423350",
    "end": "1430730"
  },
  {
    "text": "a lot of your basic criteria use cases there is actually another readable",
    "start": "1430730",
    "end": "1435860"
  },
  {
    "text": "method that lets you hand write a sequel style where clause or prepared statement",
    "start": "1435860",
    "end": "1440870"
  },
  {
    "text": "style bearclaw's i have built two enterprise applications on top of massive and I have not had to use it",
    "start": "1440870",
    "end": "1447230"
  },
  {
    "text": "once so it's they're mostly for backwards compatibility at this point",
    "start": "1447230",
    "end": "1452620"
  },
  {
    "text": "secondary to readable x' you have the writable x' which are things that you can push information into when we're",
    "start": "1455830",
    "end": "1464510"
  },
  {
    "text": "putting when we're pulling these things out of the database and building the API we actually apply prototypes on top of",
    "start": "1464510",
    "end": "1471770"
  },
  {
    "text": "each other to allow something that can be read from and written to to be consistent with things that can only be",
    "start": "1471770",
    "end": "1478100"
  },
  {
    "text": "read from save here is sort of a one-size-fits-all put this thing back in",
    "start": "1478100",
    "end": "1485780"
  },
  {
    "text": "the database if you've passed a record that includes a primary key it's an update otherwise it's creating a new one",
    "start": "1485780",
    "end": "1492680"
  },
  {
    "text": "with an insert so this is not a true Postgres in search with the on conflict",
    "start": "1492680",
    "end": "1497960"
  },
  {
    "text": "clause instead massive knows what your primary keys are and determines which",
    "start": "1497960",
    "end": "1503720"
  },
  {
    "text": "statements to emit you can also skip the magic and go",
    "start": "1503720",
    "end": "1509240"
  },
  {
    "text": "directly to insert or update update here is doing a bulk operation it takes a",
    "start": "1509240",
    "end": "1515060"
  },
  {
    "text": "criteria object or primary key and then a map of changes to apply to matching",
    "start": "1515060",
    "end": "1520670"
  },
  {
    "text": "records finally destroy because delete is a reserved word in JavaScript and we",
    "start": "1520670",
    "end": "1526100"
  },
  {
    "text": "can't even use it for a function name it does what you think it does it removes information it can also take a criteria",
    "start": "1526100",
    "end": "1534200"
  },
  {
    "text": "object or primary key last but not least",
    "start": "1534200",
    "end": "1540020"
  },
  {
    "start": "1537000",
    "end": "1600000"
  },
  {
    "text": "the correspondence with UNIX directory permissions is fortuitous you have things that you can execute this",
    "start": "1540020",
    "end": "1547760"
  },
  {
    "text": "includes both database functions and sequel script files which massive loads up on initialization it treats them as",
    "start": "1547760",
    "end": "1555200"
  },
  {
    "text": "identically as possible although there are a couple of fundamental differences first that you can nest files under",
    "start": "1555200",
    "end": "1562760"
  },
  {
    "text": "multiple levels of folder a second that we can optionally make function",
    "start": "1562760",
    "end": "1569300"
  },
  {
    "text": "execution a little bit nicer by detecting the output shape so if it only returns a scalar value or a single",
    "start": "1569300",
    "end": "1575390"
  },
  {
    "text": "record we can do that instead of the usual list of result objects having",
    "start": "1575390",
    "end": "1582050"
  },
  {
    "text": "scripts is actually pretty great because it allows you to work in files first",
    "start": "1582050",
    "end": "1588290"
  },
  {
    "text": "which are a lot easier to modify than database functions and then once things are stable and if you feel like it you",
    "start": "1588290",
    "end": "1594140"
  },
  {
    "text": "can bake that into your database formally or you can just leave it as scripts nobody's going to judge using",
    "start": "1594140",
    "end": "1605090"
  },
  {
    "start": "1600000",
    "end": "1698000"
  },
  {
    "text": "transactions or using the API with transactions it's been one of the most requested features over the years and it's finally part of version 5 the",
    "start": "1605090",
    "end": "1614720"
  },
  {
    "text": "canonical example of for database transactions is moving money between bank accounts but that's boring so",
    "start": "1614720",
    "end": "1621170"
  },
  {
    "text": "instead in 1915 a casimir Malkovich who is a prominent constructivist painter broke decisively with that school at the",
    "start": "1621170",
    "end": "1628340"
  },
  {
    "text": "zero to ten exhibition when he showcased his first works in the new Suprematist style that he'd come up with he had",
    "start": "1628340",
    "end": "1634040"
  },
  {
    "text": "actually covered the windows of his workshop with newspaper wouldn't talk about art with just about anybody for",
    "start": "1634040",
    "end": "1639920"
  },
  {
    "text": "months and months before the big reveal which is surprisingly analogous to",
    "start": "1639920",
    "end": "1645110"
  },
  {
    "text": "working inside transactional context you do a bunch of work in isolation and",
    "start": "1645110",
    "end": "1651080"
  },
  {
    "text": "finally either commit and it's visible to everybody else or you roll it back and nothing ever happened we spare so in",
    "start": "1651080",
    "end": "1661030"
  },
  {
    "text": "with the width transaction method you get back a copy of the connected instance and can start issuing API",
    "start": "1661030",
    "end": "1668330"
  },
  {
    "text": "methods against that that work inside that transactional context so we can go out and find Casimir",
    "start": "1668330",
    "end": "1675799"
  },
  {
    "text": "creates his new movement destroy his links with all other artistic movements",
    "start": "1675799",
    "end": "1681450"
  },
  {
    "text": "and finally return a promise that will create the link between Malevich and suprematism when that last promise",
    "start": "1681450",
    "end": "1688620"
  },
  {
    "text": "resolves the transaction is committed if at any point there is an error thrown everything is rolled back so having",
    "start": "1688620",
    "end": "1701820"
  },
  {
    "start": "1698000",
    "end": "1756000"
  },
  {
    "text": "these building blocks is great but of course we need to know how to actually or what actually to build so to do that",
    "start": "1701820",
    "end": "1709380"
  },
  {
    "text": "we have to ask the database what's inside it the ANSI standard defines a",
    "start": "1709380",
    "end": "1715850"
  },
  {
    "text": "information schema that contains basic metadata for your database here we're",
    "start": "1715850",
    "end": "1721440"
  },
  {
    "text": "looking at four tables tables obviously contains information about the tables",
    "start": "1721440",
    "end": "1727410"
  },
  {
    "text": "that exist in the database we look at columns to figure out what's actually inside them add constraints to see what",
    "start": "1727410",
    "end": "1734100"
  },
  {
    "text": "the primary keys are it also includes foreign key information but we don't use that and finally key column usage",
    "start": "1734100",
    "end": "1740570"
  },
  {
    "text": "correlates of columns and constraints so it tells you which columns makeup which",
    "start": "1740570",
    "end": "1746220"
  },
  {
    "text": "constraints so there's actually dozens of entries in the information schema",
    "start": "1746220",
    "end": "1751230"
  },
  {
    "text": "that these are what we're interested in for our purposes for the rest we have to",
    "start": "1751230",
    "end": "1756840"
  },
  {
    "start": "1756000",
    "end": "1881000"
  },
  {
    "text": "dig a little bit deeper Postgres actually implements the information schema as a set of views on",
    "start": "1756840",
    "end": "1763860"
  },
  {
    "text": "these system catalogs again there are many many more but the ones were",
    "start": "1763860",
    "end": "1769080"
  },
  {
    "text": "interested in PT namespace corresponds to the schema or schemas in your database",
    "start": "1769080",
    "end": "1774799"
  },
  {
    "text": "we need the OID to track certain other internals the PG class corresponds to",
    "start": "1774799",
    "end": "1780809"
  },
  {
    "text": "the information schema tables but again we need the OID because table inheritance is the thing and we need to",
    "start": "1780809",
    "end": "1786900"
  },
  {
    "text": "know which tables extend which other tables schemas we did not use the",
    "start": "1786900",
    "end": "1793710"
  },
  {
    "text": "information schema to look for information about views because the information schema is not defined as",
    "start": "1793710",
    "end": "1799880"
  },
  {
    "text": "tracking materialized views which are a separate set of view that actually saves",
    "start": "1799880",
    "end": "1805080"
  },
  {
    "text": "its results kind of a cache and we want to include both of them and do it as consistently",
    "start": "1805080",
    "end": "1810720"
  },
  {
    "text": "as possible so just go directly to the system catalog and pull that out we also",
    "start": "1810720",
    "end": "1816150"
  },
  {
    "text": "have to use PG attributes to find columns in views because those are not defined in the information schema again",
    "start": "1816150",
    "end": "1823050"
  },
  {
    "text": "so if you look for information schema columns belonging to views you'll come up empty we also use the PD relation is",
    "start": "1823050",
    "end": "1831960"
  },
  {
    "text": "updatable function to determine whether if you can actually be persisted to if you meet certain criteria such as only",
    "start": "1831960",
    "end": "1839880"
  },
  {
    "text": "querying a single table and not doing any aggregation you can actually insert update or delete to a view which is",
    "start": "1839880",
    "end": "1846570"
  },
  {
    "text": "pretty neat finally PD proc contains",
    "start": "1846570",
    "end": "1851760"
  },
  {
    "text": "information about functions there is an information schema routines table but it",
    "start": "1851760",
    "end": "1858180"
  },
  {
    "text": "doesn't give us enough information we need to know what the results look like and a number of arguments whether it's a",
    "start": "1858180",
    "end": "1864930"
  },
  {
    "text": "very attic function that can take an arbitrary number of arguments and that all goes into both the invocation of",
    "start": "1864930",
    "end": "1871830"
  },
  {
    "text": "functions and sort of the enhancement that massive offers to unwrap results",
    "start": "1871830",
    "end": "1878760"
  },
  {
    "text": "for possible last but not least we you",
    "start": "1878760",
    "end": "1886500"
  },
  {
    "start": "1881000",
    "end": "1934000"
  },
  {
    "text": "look at the file system your if you used massive in a node project you can have a",
    "start": "1886500",
    "end": "1892380"
  },
  {
    "text": "database folder or a DB folder or rename it as you loot as you like and changes",
    "start": "1892380",
    "end": "1897660"
  },
  {
    "text": "your configuration on connection and massive loads those up has closely two functions as it can I do have to give",
    "start": "1897660",
    "end": "1906300"
  },
  {
    "text": "some props to of Italy Tamil off the developer of the PD promise driver that massive uses under the hood it also uses",
    "start": "1906300",
    "end": "1913050"
  },
  {
    "text": "his cry file parser which enables a lot of pretty cool stuff so you're not limited to just working with prepared",
    "start": "1913050",
    "end": "1919260"
  },
  {
    "text": "statements with numeric placeholders you can use named parameters you can interpolate column and table names and",
    "start": "1919260",
    "end": "1925890"
  },
  {
    "text": "do some really cool dynamic stuff with that but there's one potential problem with having multiple sources of database and",
    "start": "1925890",
    "end": "1933240"
  },
  {
    "text": "other objects which is what do you do when names collide",
    "start": "1933240",
    "end": "1938429"
  },
  {
    "start": "1934000",
    "end": "2038000"
  },
  {
    "text": "here we've got an AW schema an auth folder a groups table and groups folder",
    "start": "1938429",
    "end": "1943950"
  },
  {
    "text": "with a seagull script in it then a user's table and a script which will",
    "start": "1943950",
    "end": "1949559"
  },
  {
    "text": "eventually become a function named users so this is where prototypal inheritance",
    "start": "1949559",
    "end": "1955860"
  },
  {
    "text": "really saves us because if you were working in a class-based inheritance model we might not be able",
    "start": "1955860",
    "end": "1963330"
  },
  {
    "text": "to actually resolve this but with prototypal inheritance as we load new information we just keep applying",
    "start": "1963330",
    "end": "1969299"
  },
  {
    "text": "prototypes on top of whatever we have so when all said and done we'll have a",
    "start": "1969299",
    "end": "1975840"
  },
  {
    "text": "single author object although that was always just a namespace we'll have a group stable with find and search update",
    "start": "1975840",
    "end": "1982980"
  },
  {
    "text": "and so on that will also contain a permissions function that you can invoke directly users again will be a table",
    "start": "1982980",
    "end": "1990539"
  },
  {
    "text": "with the usual set of methods but it will also be a function that you can just go ahead and invoke and not worry",
    "start": "1990539",
    "end": "1997440"
  },
  {
    "text": "about whatever else is on it there are two cases that we can't handle with this one is when you would collide with a",
    "start": "1997440",
    "end": "2005389"
  },
  {
    "text": "method on a readable or writable so if that groups folder were to have a find",
    "start": "2005389",
    "end": "2010460"
  },
  {
    "text": "one not sequel script in it that would overlap the table find one and there's",
    "start": "2010460",
    "end": "2016159"
  },
  {
    "text": "nothing we can do about that if the second case is if you have a script and function that resolve to the same name",
    "start": "2016159",
    "end": "2022669"
  },
  {
    "text": "at the same path again we can't have the same function do two different things so",
    "start": "2022669",
    "end": "2028399"
  },
  {
    "text": "in both cases we just abort and raise an error so as long as you spend massive up",
    "start": "2028399",
    "end": "2034279"
  },
  {
    "text": "before you roll out to prod you're good",
    "start": "2034279",
    "end": "2038289"
  },
  {
    "start": "2038000",
    "end": "2075000"
  },
  {
    "text": "having readable writable and executable gives this basic feature parity with ORM",
    "start": "2040509",
    "end": "2046309"
  },
  {
    "text": "really a fraction of the price there is no models to maintain there's barely any state management and it's",
    "start": "2046309",
    "end": "2052638"
  },
  {
    "text": "totally optional to save there are a few gaps though there's nothing yet about",
    "start": "2052639",
    "end": "2058878"
  },
  {
    "text": "shaping query results or modifying their behavior and there's nothing about",
    "start": "2058879",
    "end": "2064099"
  },
  {
    "text": "working with related objects which is really a strength of a parallel data model where you can build up an object",
    "start": "2064099",
    "end": "2071030"
  },
  {
    "text": "graph and flip it over into the relational graph first off being able to affect what",
    "start": "2071030",
    "end": "2079638"
  },
  {
    "text": "queries do or how they do it here we're looking for artists with the criteria",
    "start": "2079639",
    "end": "2086240"
  },
  {
    "text": "object but just about every API method can take as a final argument options",
    "start": "2086240",
    "end": "2092419"
  },
  {
    "text": "object which is a little bit of a kitchen sink that tells the engine to do",
    "start": "2092419",
    "end": "2097790"
  },
  {
    "text": "something different so here we're looking for only two fields everything else is excluded from the results that",
    "start": "2097790",
    "end": "2104330"
  },
  {
    "text": "come back and we're sorting with the",
    "start": "2104330",
    "end": "2109340"
  },
  {
    "text": "order option there these on the right are a subset of the available options",
    "start": "2109340",
    "end": "2115369"
  },
  {
    "text": "build does a dry run and actually returns the sequel that would have been omitted fields and expertise mattify the",
    "start": "2115369",
    "end": "2122540"
  },
  {
    "text": "Select list expose is unsafely interpolated do not pass user input directly to it because you will get",
    "start": "2122540",
    "end": "2128869"
  },
  {
    "text": "sequel injected but if you have to do some arithmetic or call a function on a",
    "start": "2128869",
    "end": "2134600"
  },
  {
    "text": "column that's how you do that offset limit in order to do the slicing and dicing that you expect they do only is",
    "start": "2134600",
    "end": "2141770"
  },
  {
    "text": "used with persistence methods for tables which are inherited by others in",
    "start": "2141770",
    "end": "2147320"
  },
  {
    "text": "Postgres by default if you've update a parent table the update will actually",
    "start": "2147320",
    "end": "2152660"
  },
  {
    "text": "cascade out to the children but you can set only to turn that behavior off on",
    "start": "2152660",
    "end": "2159140"
  },
  {
    "text": "conflict ignores used with in search and allows you to insert something with a primary key without worrying about an",
    "start": "2159140",
    "end": "2165080"
  },
  {
    "text": "error if it already exists finally single returns only the first result and",
    "start": "2165080",
    "end": "2171070"
  },
  {
    "text": "stream returns the entire result set as a node stream so you can work with it over time",
    "start": "2171070",
    "end": "2178089"
  },
  {
    "start": "2178000",
    "end": "2218000"
  },
  {
    "text": "as for object graphs or complex sets of related objects the first sort of piece",
    "start": "2181809",
    "end": "2188529"
  },
  {
    "text": "to that is turning tabular results like this into something a little bit more friendly so if we have a view that joins",
    "start": "2188529",
    "end": "2195969"
  },
  {
    "text": "tables together that means there's probably going to be duplication because you have the same information appearing",
    "start": "2195969",
    "end": "2202660"
  },
  {
    "text": "once for every corresponding record getting that or something that looks",
    "start": "2202660",
    "end": "2207910"
  },
  {
    "text": "like that in sequel is perfectly all right because sequel is built to work with sets and JavaScript though we'd",
    "start": "2207910",
    "end": "2214569"
  },
  {
    "text": "rather iterate and traverse so the way",
    "start": "2214569",
    "end": "2219640"
  },
  {
    "start": "2218000",
    "end": "2278000"
  },
  {
    "text": "we do that I kind of lied about models we have to have the developer actually",
    "start": "2219640",
    "end": "2225969"
  },
  {
    "text": "tell massive what the expected result should look like because we have to",
    "start": "2225969",
    "end": "2230979"
  },
  {
    "text": "handle arbitrary cases and they can get extremely complicated if we can't rely on something like column nomenclature",
    "start": "2230979",
    "end": "2237729"
  },
  {
    "text": "where you could token out aliases in views or something because you might not",
    "start": "2237729",
    "end": "2245559"
  },
  {
    "text": "have it and it may not be possible to change that so you define a schema that",
    "start": "2245559",
    "end": "2251829"
  },
  {
    "text": "says the route record is defined by such-and-such primary key it has these",
    "start": "2251829",
    "end": "2258009"
  },
  {
    "text": "columns attached to it and every other thing is a descendant record or records",
    "start": "2258009",
    "end": "2264269"
  },
  {
    "text": "so each of those has its own primary key its own columns which can be renamed and",
    "start": "2264269",
    "end": "2270130"
  },
  {
    "text": "is either an array or a single object so it's a little bit complicated a little",
    "start": "2270130",
    "end": "2276670"
  },
  {
    "text": "bit crappy but the payoff is that you just have to pass it in when you need it",
    "start": "2276670",
    "end": "2281799"
  },
  {
    "start": "2278000",
    "end": "2380000"
  },
  {
    "text": "and not otherwise and you get back exactly what you need so a list of",
    "start": "2281799",
    "end": "2287079"
  },
  {
    "text": "movements which where each move and contains a list of artists is much more amenable to processing in JavaScript and",
    "start": "2287079",
    "end": "2295920"
  },
  {
    "text": "much less crappy to deal with in trying to figure out if you have everything in",
    "start": "2296640",
    "end": "2302229"
  },
  {
    "text": "order and keeping track of pointers within nested arrays",
    "start": "2302229",
    "end": "2308699"
  },
  {
    "text": "so this does not actually give us a full object graph its hierarchy and it can only ever be a",
    "start": "2310630",
    "end": "2316450"
  },
  {
    "text": "hierarchy but we're not trying to go toe-to-toe with our arms on this subject",
    "start": "2316450",
    "end": "2321999"
  },
  {
    "text": "we're trying to be as convenient as possible and then get out of the way so",
    "start": "2321999",
    "end": "2327150"
  },
  {
    "text": "having this as an optional addition for when you really want to do some complex",
    "start": "2327150",
    "end": "2332410"
  },
  {
    "text": "results processing and only when you want to do that it makes it easy enough without having to build up all that",
    "start": "2332410",
    "end": "2339160"
  },
  {
    "text": "overhead that you would need to do this on a full scale it also avoids a common",
    "start": "2339160",
    "end": "2346960"
  },
  {
    "text": "trap with data access which is the n plus 1 select problem where if you approach this problem from the start you",
    "start": "2346960",
    "end": "2353920"
  },
  {
    "text": "would think okay let's go out and get all the movements and start iterating over those and you go out and you find",
    "start": "2353920",
    "end": "2359499"
  },
  {
    "text": "all the constructivists all the Suprematist s-- and so on and so forth and by the time you're done you've",
    "start": "2359499",
    "end": "2365440"
  },
  {
    "text": "issued as many queries and made as many round trips to the database as you have",
    "start": "2365440",
    "end": "2370509"
  },
  {
    "text": "movement's plus the original query to get the list of movements in the first place so because we're working with a",
    "start": "2370509",
    "end": "2375670"
  },
  {
    "text": "single query that doesn't enter into the equation at all",
    "start": "2375670",
    "end": "2380819"
  },
  {
    "start": "2380000",
    "end": "2412000"
  },
  {
    "text": "the other side of working with related objects is of course persistence so it's",
    "start": "2381569",
    "end": "2387460"
  },
  {
    "text": "a common use case that you have a many-to-many relationship set up and one",
    "start": "2387460",
    "end": "2392499"
  },
  {
    "text": "side of it is already populated you want to add an entity to the other side and",
    "start": "2392499",
    "end": "2397630"
  },
  {
    "text": "set up the relationship ideally in the same transaction so nobody sees the",
    "start": "2397630",
    "end": "2402700"
  },
  {
    "text": "partial state of the database so here if we have a movement defined and we want",
    "start": "2402700",
    "end": "2409479"
  },
  {
    "text": "to add an artists to it we can do that the JavaScript side on the left there is",
    "start": "2409479",
    "end": "2416440"
  },
  {
    "start": "2412000",
    "end": "2535000"
  },
  {
    "text": "at least simple the sequel is not but if",
    "start": "2416440",
    "end": "2422140"
  },
  {
    "text": "you turn the deep insert option on you can pass an object to insert where any",
    "start": "2422140",
    "end": "2428650"
  },
  {
    "text": "key that is not recognized as a column defines a junction so our junction table is named movement artists we want to add",
    "start": "2428650",
    "end": "2436390"
  },
  {
    "text": "a link to movement number 5 because we haven't actually inserted if only on",
    "start": "2436390",
    "end": "2442119"
  },
  {
    "text": "call yet our study is undefined in the JavaScript so",
    "start": "2442119",
    "end": "2450760"
  },
  {
    "text": "that eventually turns into that mess of sequel on the right where we use",
    "start": "2450760",
    "end": "2457240"
  },
  {
    "text": "probably my favorite post-grad feature which is the writable common table expression to insert original record",
    "start": "2457240",
    "end": "2464200"
  },
  {
    "text": "that we wanted to insert and then return everything that we effected so returning",
    "start": "2464200",
    "end": "2469990"
  },
  {
    "text": "allows you to sort of treat persistent statements as read statements which is",
    "start": "2469990",
    "end": "2475690"
  },
  {
    "text": "immensely powerful and other databases are usually limited to selecting add add",
    "start": "2475690",
    "end": "2480700"
  },
  {
    "text": "identity or using the scope identity function or something like that with postgrads you can just get back whatever you just did so we take that and we set",
    "start": "2480700",
    "end": "2489910"
  },
  {
    "text": "up a second CTE to actually create the link and that",
    "start": "2489910",
    "end": "2495600"
  },
  {
    "text": "generates a an insert select which uses the inserted records to actually",
    "start": "2495600",
    "end": "2502300"
  },
  {
    "text": "populate that formerly undefined artist ID and finally for consistency with the",
    "start": "2502300",
    "end": "2508360"
  },
  {
    "text": "other insert uses of insert we just return the original record because that's what you would expect to get back",
    "start": "2508360",
    "end": "2514030"
  },
  {
    "text": "out of there so this does only work for",
    "start": "2514030",
    "end": "2519040"
  },
  {
    "text": "unary inserts because managing location would be prohibitively complicated with",
    "start": "2519040",
    "end": "2524800"
  },
  {
    "text": "an array of records coming in but it does allow multiple junctions and multiple records in each Junction so",
    "start": "2524800",
    "end": "2537370"
  },
  {
    "text": "that's enough about our ends for now let's switch gears a little bit and eat mongodb lunch for change relational",
    "start": "2537370",
    "end": "2543460"
  },
  {
    "text": "databases are traditionally terrible at working with hierarchical data if you've worked with them for long enough you've",
    "start": "2543460",
    "end": "2549550"
  },
  {
    "text": "probably seen a table that has a parent ID column and a self joining foreign key or you might have seen somebody try to",
    "start": "2549550",
    "end": "2555940"
  },
  {
    "text": "decompose a complicated structure across a dozen or more tables I've seen both",
    "start": "2555940",
    "end": "2561310"
  },
  {
    "text": "it's horrifying but postgrads offers really robust JSON support and that",
    "start": "2561310",
    "end": "2567730"
  },
  {
    "text": "means that we can take advantage of it to sort of do something similar to a",
    "start": "2567730",
    "end": "2574060"
  },
  {
    "text": "MongoDB collection inside a relational context so it makes it much much easier to work",
    "start": "2574060",
    "end": "2581170"
  },
  {
    "text": "with complex or hierarchical information without having to switch things around",
    "start": "2581170",
    "end": "2586599"
  },
  {
    "text": "too much save doc is just a method on the connected instance itself you can",
    "start": "2586599",
    "end": "2592539"
  },
  {
    "text": "pass it a collection name and a document to initialize it with and it will",
    "start": "2592539",
    "end": "2599200"
  },
  {
    "text": "persist it and return the new document record so looking at that because it is",
    "start": "2599200",
    "end": "2605529"
  },
  {
    "start": "2602000",
    "end": "2671000"
  },
  {
    "text": "a row in a table it has a primary key when you pull a document out of the",
    "start": "2605529",
    "end": "2610930"
  },
  {
    "text": "database through the document API it attaches the primary key automatically when you persist it back it removes it",
    "start": "2610930",
    "end": "2617979"
  },
  {
    "text": "so you're never storing a redundant primary key it's handled automatically",
    "start": "2617979",
    "end": "2624779"
  },
  {
    "text": "behind the scenes there are some metadata fields with a trigger that updates the updated at there's a text",
    "start": "2624779",
    "end": "2632950"
  },
  {
    "text": "search vector which includes the values present in the document body so this all",
    "start": "2632950",
    "end": "2639009"
  },
  {
    "text": "allows blending document and relational strategies or even using documents for",
    "start": "2639009",
    "end": "2644769"
  },
  {
    "text": "rapid prototyping if you have the general layout settled but you don't",
    "start": "2644769",
    "end": "2649900"
  },
  {
    "text": "know exactly what columns you're looking at defining you can use the looser schema of a document collection and then",
    "start": "2649900",
    "end": "2656739"
  },
  {
    "text": "transition to a proper relational schema on your own time without having to switch databases or integrate a second",
    "start": "2656739",
    "end": "2662739"
  },
  {
    "text": "datastore which would actually prevent you from having referential integrity",
    "start": "2662739",
    "end": "2667989"
  },
  {
    "text": "between your sources of information so",
    "start": "2667989",
    "end": "2673539"
  },
  {
    "start": "2671000",
    "end": "2719000"
  },
  {
    "text": "there there is a document API find doc",
    "start": "2673539",
    "end": "2679180"
  },
  {
    "text": "works exactly like the tabular finder that it takes eight criteria object save Docs a little bit different it's",
    "start": "2679180",
    "end": "2685660"
  },
  {
    "text": "all-or-nothing persistence so it will completely replace the document body if",
    "start": "2685660",
    "end": "2690729"
  },
  {
    "text": "it exists otherwise we'll create it and of course nothing was there before if you want to emerge in new information",
    "start": "2690729",
    "end": "2697900"
  },
  {
    "text": "without having the full document up front or ahead of time you can use update doc which like the tabular update",
    "start": "2697900",
    "end": "2704829"
  },
  {
    "text": "can take either a criteria object like it's doing here or a primary key",
    "start": "2704829",
    "end": "2710430"
  },
  {
    "text": "finally a search dock works exactly like the readable search and that it does a full-text search on the body I do have",
    "start": "2710430",
    "end": "2720990"
  },
  {
    "start": "2719000",
    "end": "2791000"
  },
  {
    "text": "one cautionary tale about all this though which is that that delete with criteria is extremely powerful that boy",
    "start": "2720990",
    "end": "2728309"
  },
  {
    "text": "is it dangerous so the applications that I developed on top of massive where accessibility",
    "start": "2728309",
    "end": "2734099"
  },
  {
    "text": "testing up sweets the idea was you would have your testers go out look at",
    "start": "2734099",
    "end": "2739559"
  },
  {
    "text": "websites discover issues report them in the web app and keep on going so he",
    "start": "2739559",
    "end": "2747510"
  },
  {
    "text": "decided at some point that would be really nice to be able to manage the issues that people were finding in bulk",
    "start": "2747510",
    "end": "2753319"
  },
  {
    "text": "so went through design went through development the developer who actually",
    "start": "2753319",
    "end": "2758849"
  },
  {
    "text": "implemented the bulk delete side of this missed a very important step and then I",
    "start": "2758849",
    "end": "2764400"
  },
  {
    "text": "missed a more important one by passing it through code review without realizing something was up so we deployed and",
    "start": "2764400",
    "end": "2770280"
  },
  {
    "text": "about a week later somebody didn't noticed hey cool new feature and promptly dumped the biggest table in",
    "start": "2770280",
    "end": "2776760"
  },
  {
    "text": "production so we had to go to backups for that which was not very much fun so the moral of the story is if you're",
    "start": "2776760",
    "end": "2782640"
  },
  {
    "text": "using criteria with destroy make sure the criteria actually reach it so every",
    "start": "2782640",
    "end": "2794220"
  },
  {
    "start": "2791000",
    "end": "2847000"
  },
  {
    "text": "decision in software development builds on what's underneath it when you pick a",
    "start": "2794220",
    "end": "2799440"
  },
  {
    "text": "tool you're not just selecting a library or something that adds a little bit of functionality you're choosing a model of",
    "start": "2799440",
    "end": "2805799"
  },
  {
    "text": "a way of thinking and different models and different thought processes are more appropriate for different situations",
    "start": "2805799",
    "end": "2812450"
  },
  {
    "text": "your choice of database is as important as any other choice you're going to make",
    "start": "2812450",
    "end": "2817950"
  },
  {
    "text": "if not more and there's no opting out you can't say we're just not going to",
    "start": "2817950",
    "end": "2823170"
  },
  {
    "text": "think about the database because that is in itself a statement about how you feel about your database when you have a data",
    "start": "2823170",
    "end": "2830880"
  },
  {
    "text": "storage problem its relational unless and until you can articulate otherwise but even within the domain of relational",
    "start": "2830880",
    "end": "2837809"
  },
  {
    "text": "databases there are some really clear differences and I think postgrads makes a very strong case for being the best",
    "start": "2837809",
    "end": "2843750"
  },
  {
    "text": "product available on the market right now focusing on posters exclusively is what",
    "start": "2843750",
    "end": "2851260"
  },
  {
    "start": "2847000",
    "end": "2897000"
  },
  {
    "text": "makes massive powerful library close integration is something to be very judicious about it's not appropriate for",
    "start": "2851260",
    "end": "2857589"
  },
  {
    "text": "all requirements but if you can commit to doing that it is 100% worth it especially in something like JavaScript",
    "start": "2857589",
    "end": "2865089"
  },
  {
    "text": "which allows you to write much leaner api's that rely on sequel for the really complex operations and just use whatever",
    "start": "2865089",
    "end": "2872080"
  },
  {
    "text": "affords more convenience in the day-to-day or simpler stuff a software",
    "start": "2872080",
    "end": "2877690"
  },
  {
    "text": "development just goes a lot faster when you have the full toolkit the Postgres has to offer at your disposal if you",
    "start": "2877690",
    "end": "2883570"
  },
  {
    "text": "treat the database as just that dumb black box that you push things into and pull them out of without thinking about",
    "start": "2883570",
    "end": "2889210"
  },
  {
    "text": "them that means that you have to put in a lot of effort to reproduce the utility that it wants to give you for free so",
    "start": "2889210",
    "end": "2898089"
  },
  {
    "start": "2897000",
    "end": "2963000"
  },
  {
    "text": "the evolution of data storage with everything that we've been seeing coming out is really exciting but we also need",
    "start": "2898089",
    "end": "2904150"
  },
  {
    "text": "to think about how we actually work with the databases that we have so there's a lot of room between the raw sequel",
    "start": "2904150",
    "end": "2910900"
  },
  {
    "text": "statements and the overweight abstractions that ORM give you data",
    "start": "2910900",
    "end": "2915910"
  },
  {
    "text": "mapping kind of threads the needle there and it and the API approach of proving",
    "start": "2915910",
    "end": "2921070"
  },
  {
    "text": "really efficient for agile development in JavaScript even more than they do in more formal languages so I hope you'll",
    "start": "2921070",
    "end": "2928540"
  },
  {
    "text": "check the massive out but even more than that I hope you'll go back and think critically about what you're actually",
    "start": "2928540",
    "end": "2933640"
  },
  {
    "text": "doing with your database and use the appropriate tools and abstractions for whatever it is you're facing that's it",
    "start": "2933640",
    "end": "2941220"
  },
  {
    "text": "[Applause]",
    "start": "2941240",
    "end": "2948579"
  }
]