[
  {
    "text": "testing testing testing testing testing testing welcome welcome welcome welcome hear am I on up you're up I'm up your",
    "start": "5400",
    "end": "12639"
  },
  {
    "text": "screen is it on yeah yeah I can see I can see stuff welcome everybody uh we are I think we're the last Talk of the",
    "start": "12639",
    "end": "18439"
  },
  {
    "text": "day are we the last Talk of the day Fe okay I'm sorry so L it's late and we're tired but it's gonna be an awesome talk",
    "start": "18439",
    "end": "24599"
  },
  {
    "text": "we promis we promis it's 420 so this is uh yeah Dam it is David we work on the",
    "start": "24599",
    "end": "32040"
  },
  {
    "text": "net team at Microsoft uh it's a first time first time in Australia it is first time back for me in a little bit um yeah",
    "start": "32040",
    "end": "40360"
  },
  {
    "text": "so the idea for this talk was donet 8 is a really big release like most of our releases every year now are really large",
    "start": "40360",
    "end": "47760"
  },
  {
    "text": "um and often you might if you just watch the blog posts or you just watch netcon",
    "start": "47760",
    "end": "53359"
  },
  {
    "text": "um or some of the major announcements there's probably a lot of stuff you're not getting information about and so we",
    "start": "53359",
    "end": "59440"
  },
  {
    "text": "figured you know we would just have a what what's the qualifier for getting in this talk stuff that we thought was cool",
    "start": "59440",
    "end": "65119"
  },
  {
    "text": "stuff that we like um and so that's really it you know so we're going to show a whole bunch of stuff we'll see how much Fowler can code I've sold him",
    "start": "65119",
    "end": "72360"
  },
  {
    "text": "for all the stuff that's in this deck there is literally no way anyone humanly possible could write a demo for",
    "start": "72360",
    "end": "77799"
  },
  {
    "text": "everything in this he's taking that as a challenge so I don't know how this will go we'll try all right so if you don't",
    "start": "77799",
    "end": "85280"
  },
  {
    "text": "know um there's blog post which has kind of the top",
    "start": "85280",
    "end": "91040"
  },
  {
    "text": "user facing items that we kind of shi so you won't see very n the features are very specific to one area or there's",
    "start": "91040",
    "end": "98840"
  },
  {
    "text": "also this what's new in. netx doc on learn which is exhaustive exhaustive so",
    "start": "98840",
    "end": "106280"
  },
  {
    "text": "there's runtime SDK C whatever version we're at we're at 12 now Don asire yeah",
    "start": "106280",
    "end": "113719"
  },
  {
    "text": "that um it's m core even IC for everything else right I",
    "start": "113719",
    "end": "120000"
  },
  {
    "text": "can't have favorites have cor woo when forms woo LPF um Etc so you",
    "start": "120000",
    "end": "128000"
  },
  {
    "text": "hey so you can you can come here and dig into individual changes of every part of",
    "start": "128000",
    "end": "133120"
  },
  {
    "text": "the stock right so if you if you get bored one day or if you don't you know have to do you can kind of turn on here",
    "start": "133120",
    "end": "138959"
  },
  {
    "text": "and just read things like you know different instructions AVX 512",
    "start": "138959",
    "end": "144480"
  },
  {
    "text": "instructions this is a little everything is there is detailed right a little more palatable than to's might be so like",
    "start": "144480",
    "end": "152560"
  },
  {
    "text": "to's post is an incredible epic every even to's blog post that epic every",
    "start": "152560",
    "end": "157720"
  },
  {
    "text": "single year he writes this like Tom So when you say exhaustive it's not that exhaustive like it literally exhausts",
    "start": "157720",
    "end": "163680"
  },
  {
    "text": "you to read it it's not read but this is you know it look at the scroll bar it got more summarized it's kind of small",
    "start": "163680",
    "end": "169200"
  },
  {
    "text": "here right there's lots of stuff going on so we thought we'd go through and I I will attempt to show these in a bit more",
    "start": "169200",
    "end": "175040"
  },
  {
    "text": "detail if I don't feel horribly um so how many of you have used C",
    "start": "175040",
    "end": "182599"
  },
  {
    "text": "12 okay 11 that's last year's version 10 that's year before net 6 okay all right",
    "start": "182640",
    "end": "190680"
  },
  {
    "text": "and there are no supported versions before that because net 6 is now the earliest supported version of net other",
    "start": "190680",
    "end": "196760"
  },
  {
    "text": "than NET Framework and Net Framework only supports C 72 or something 7. 7.2 officially good",
    "start": "196760",
    "end": "204840"
  },
  {
    "text": "guess all right so I have two projects here I have this console app and we just",
    "start": "204840",
    "end": "210360"
  },
  {
    "text": "to as a scratch pad for showing features right so these demos aren't persistent they're not planned they're just we're",
    "start": "210360",
    "end": "216560"
  },
  {
    "text": "going to on the flight hold together right you're gonna help me perfect I thought I thought you meant together",
    "start": "216560",
    "end": "223239"
  },
  {
    "text": "everybody zoom in font you can't see my amazing FS there you go lovely good",
    "start": "223239",
    "end": "230439"
  },
  {
    "text": "Perfect all right so the first feature my favorite seash short feature second favorite movie is mads here in audience",
    "start": "230439",
    "end": "236159"
  },
  {
    "text": "somewhere he is there look at that mad there mads works on C he actually helped says build a language say hi mads hey",
    "start": "236159",
    "end": "243000"
  },
  {
    "text": "okay so you might be you might be used to building classes like this this is um",
    "start": "243000",
    "end": "248959"
  },
  {
    "text": "gonna have a class and I'm G to have some properties this is going to be a very generic name points and it's XY and",
    "start": "248959",
    "end": "256239"
  },
  {
    "text": "you're going to have um some properties here so everyone types prop tab tab because that's how you do it really",
    "start": "256239",
    "end": "262360"
  },
  {
    "text": "quickly then xmy and this is noisy this class is kind of chunky and big what if",
    "start": "262360",
    "end": "267520"
  },
  {
    "text": "I could just do something like this that I could just I and I can write a",
    "start": "267520",
    "end": "273120"
  },
  {
    "text": "code picture but I'm gonna you're do Time by typing it by hand right you could have Sav a lot of you done by now look at co-pilot amazing so there's a",
    "start": "273120",
    "end": "281600"
  },
  {
    "text": "feature called primary Constructors that lets me if I have a single Constructor I can just by shorthand type this",
    "start": "281600",
    "end": "289680"
  },
  {
    "text": "syntax beautiful right time saving if you do dependency injection and you have",
    "start": "289680",
    "end": "295360"
  },
  {
    "text": "like good on Constructors and you're declaring all the things and declaring fields and code fixer to kind of flip",
    "start": "295360",
    "end": "301600"
  },
  {
    "text": "between primary and non- primary convert to regular old school no",
    "start": "301600",
    "end": "307560"
  },
  {
    "text": "offense primary so you can jump between both both patterns um few things to know",
    "start": "307560",
    "end": "312840"
  },
  {
    "text": "though these aren't exactly equivalent sometimes so let's say you were doing something like",
    "start": "312840",
    "end": "318759"
  },
  {
    "text": "um let's call this Fu let's have a reference type this time I'm going to",
    "start": "318759",
    "end": "324560"
  },
  {
    "text": "take in an object oh right nor wow",
    "start": "324560",
    "end": "330199"
  },
  {
    "text": "normally you want to do some kind of checking for null right so you would have your class and you would take in",
    "start": "330199",
    "end": "336080"
  },
  {
    "text": "some object o and you would have code like um",
    "start": "336080",
    "end": "342000"
  },
  {
    "text": "private these names are awful o you know",
    "start": "342000",
    "end": "348960"
  },
  {
    "text": "or that's not bad that was good all right so you want to have this code in your in your app so how do you do the same thing when you have your",
    "start": "348960",
    "end": "355000"
  },
  {
    "text": "Constructor up here whoa I mean that's interesting I",
    "start": "355000",
    "end": "361160"
  },
  {
    "text": "guesses work pretty equivalent so yeah I didn't know to do that but yeah you can do that um a pattern you'll see also",
    "start": "361160",
    "end": "367120"
  },
  {
    "text": "that's pretty common is people kind of are using a pattern where you don't have properties maybe but you have Fields so",
    "start": "367120",
    "end": "373400"
  },
  {
    "text": "you may have a private object uh object o That's assigned to in the Constructor the same as you have like this and you",
    "start": "373400",
    "end": "381039"
  },
  {
    "text": "can do the equivalent refactoring hopefully help me out help me",
    "start": "381039",
    "end": "387360"
  },
  {
    "text": "out no that's not right I can copy this code um I can do object",
    "start": "387400",
    "end": "394319"
  },
  {
    "text": "o and then I can take this and I believe do this here right and this gives me the",
    "start": "394319",
    "end": "401759"
  },
  {
    "text": "equivalent features if you want to do n checking this is kind of the new pattern when you want to write that logic but you can only do certain things so you",
    "start": "401759",
    "end": "407880"
  },
  {
    "text": "can't write arbitrary code that checks all the fields in this one place so if you do want to do checking on multiple",
    "start": "407880",
    "end": "414360"
  },
  {
    "text": "fields in the Constructor you still have to revert to the old thing right um but during Ma going to fix that in C 13 he",
    "start": "414360",
    "end": "421280"
  },
  {
    "text": "promised me so with the triple bang operator yeah yeah yeah exactly oh sorry",
    "start": "421280",
    "end": "427240"
  },
  {
    "text": "to this is the new new St tax we're thinking about from not no no not no no maybe no yeah",
    "start": "427240",
    "end": "437680"
  },
  {
    "text": "okay all right this feature is super useful um for controllers for Signal",
    "start": "437680",
    "end": "443400"
  },
  {
    "text": "hubs for basically dependenc yeah Pages actually for Pages you don't P model page models there you go um so that is",
    "start": "443400",
    "end": "450599"
  },
  {
    "text": "one of the best features I think in C 13 that we we've had and and it's funny that feature came out in the first time",
    "start": "450599",
    "end": "456400"
  },
  {
    "text": "in preview in C six because in the beginning of aset core the aset team pulled in the C",
    "start": "456400",
    "end": "464280"
  },
  {
    "text": "compiler the compiler that was not done yet the preview compiler and we used it everywhere and then the feature got",
    "start": "464280",
    "end": "470680"
  },
  {
    "text": "taken out and we had to undo all the code painful for that one de who had to",
    "start": "470680",
    "end": "475759"
  },
  {
    "text": "do it that work but all right so we got our first favorite thing let's do the second",
    "start": "475759",
    "end": "482159"
  },
  {
    "text": "favorite thing that's one how much time do we have left kind of time okay thato",
    "start": "482159",
    "end": "487680"
  },
  {
    "text": "took you eight minutes I'm just gonna go faster okay how many of you have done",
    "start": "487680",
    "end": "492800"
  },
  {
    "text": "this before like let's declare an array right new r one I love Co I think this is my",
    "start": "492800",
    "end": "499800"
  },
  {
    "text": "favorite feature the first one was your favorite feature said this is my favorite your okay you get one sometimes",
    "start": "499800",
    "end": "505879"
  },
  {
    "text": "all right so here's my array right I'm going to print the array I just thought it this is this is creepy I don't even",
    "start": "505879",
    "end": "513000"
  },
  {
    "text": "know what this thing is doing prly AR this is like normal syns for declaring ARR right and you can have numbers in",
    "start": "513000",
    "end": "518760"
  },
  {
    "text": "here um but it infers the number from having the the number of elements in the array I compile time so now I can just",
    "start": "518760",
    "end": "525839"
  },
  {
    "text": "and if you realize that we have been building tooling to help you make your code more modern to use new features in",
    "start": "525839",
    "end": "531800"
  },
  {
    "text": "C this wasn't always think we did but we've been doing it more and more as we add new features so you have a new team",
    "start": "531800",
    "end": "537880"
  },
  {
    "text": "and you want team to kind of learn new features or you want to have standards you can actually configure these fixes",
    "start": "537880",
    "end": "543399"
  },
  {
    "text": "to say I want to use c x or these features and then the tooling will kind of help you either revert or keep you",
    "start": "543399",
    "end": "549800"
  },
  {
    "text": "same PL but this one I think you should you should definitely use this is like so good noise reduction to the max right",
    "start": "549800",
    "end": "555600"
  },
  {
    "text": "so this looks pretty simple it's an array on this side so obviously it's an array it's inferring that it's an array",
    "start": "555600",
    "end": "560839"
  },
  {
    "text": "and you don't have the new syntax right that's all inferred but what if this was not an array what if it was a",
    "start": "560839",
    "end": "567600"
  },
  {
    "text": "list still works and this is where the magic comes in because the compiler is looking at the Target type on the left",
    "start": "567600",
    "end": "573440"
  },
  {
    "text": "hand side and determining what should happen on the right hand side and because the compiler is super smart it",
    "start": "573440",
    "end": "578600"
  },
  {
    "text": "can do insanely efficient things that you can't do under the covers I mean you could probably try to do it if you look",
    "start": "578600",
    "end": "583839"
  },
  {
    "text": "at the Cen stuff but it's really clever so you said Target type but then you said left hand side what about in other",
    "start": "583839",
    "end": "589120"
  },
  {
    "text": "Target type situation oo so what if I have a method I guess using food anyway it's",
    "start": "589120",
    "end": "596880"
  },
  {
    "text": "fine let's call this this this taking a span right let's call this",
    "start": "596880",
    "end": "603839"
  },
  {
    "text": "sum and if I call it sum Copa is going to do something insane for me",
    "start": "603839",
    "end": "609240"
  },
  {
    "text": "probably okay wa there you go some it's going to complain because oh you did an array of thank you",
    "start": "609240",
    "end": "617760"
  },
  {
    "text": "it's nice having the language in the room for you pressure I feel pressure don't mess up so we you've got co-pilot",
    "start": "617760",
    "end": "627880"
  },
  {
    "text": "got watching wrong teacher is watching me I need to not mess up okay talku about safety nets all",
    "start": "627880",
    "end": "635480"
  },
  {
    "text": "right call you pilot that's nice what does that make F",
    "start": "635480",
    "end": "641519"
  },
  {
    "text": "never mind we passenger back seat driver um okay so I",
    "start": "641519",
    "end": "648079"
  },
  {
    "text": "can do some want to and I can infer from the arguments what type it should create okay that was cool but that's still a",
    "start": "648079",
    "end": "654959"
  },
  {
    "text": "concrete type what if it was like not a real type like a contract for a type like interface oh went crazy here what",
    "start": "654959",
    "end": "661680"
  },
  {
    "text": "if I want to take in something like a readon collection because I want my method to just be like I don't really",
    "start": "661680",
    "end": "666720"
  },
  {
    "text": "depend on a array I don't depend good good good point because it couldn't possibly work as Engineers you want to",
    "start": "666720",
    "end": "672279"
  },
  {
    "text": "build the most generic function so you want to have an ey list of tea right well I'm not adding to it I want it to",
    "start": "672279",
    "end": "678240"
  },
  {
    "text": "be read only can does that work PM with the requirements I'm just like trying to get",
    "start": "678240",
    "end": "684800"
  },
  {
    "text": "my job done and go home all right that okay okay so you get",
    "start": "684800",
    "end": "690399"
  },
  {
    "text": "impressive and and this is done via contract so the the compiler can can I think for these methods we have",
    "start": "690399",
    "end": "696399"
  },
  {
    "text": "knowledge of read only lists and a couple a couple of interfaces but any type can declare an attribute for how it",
    "start": "696399",
    "end": "703240"
  },
  {
    "text": "can be constructed so you can actually this can actually be an there's no one uses in here I bet I bet I bet no one",
    "start": "703240",
    "end": "710320"
  },
  {
    "text": "uses this this API put your hand if you do what see my don't count",
    "start": "710320",
    "end": "719360"
  },
  {
    "text": "this also works that's amazing super cool very cool so there's this uniform way of creating collection everywhere um",
    "start": "719639",
    "end": "725639"
  },
  {
    "text": "one really cool pattern that I love using this API is let's say you had a method that was going to get a list from",
    "start": "725639",
    "end": "731680"
  },
  {
    "text": "somewhere else and it could be null normally you would do something like let",
    "start": "731680",
    "end": "736839"
  },
  {
    "text": "me create some scaffolding here you're watching me stumble through coding so",
    "start": "736839",
    "end": "742360"
  },
  {
    "text": "public task of list of person andil is so smart it's going",
    "start": "742360",
    "end": "749040"
  },
  {
    "text": "to just create this for me don't do it though give me a",
    "start": "749040",
    "end": "754920"
  },
  {
    "text": "person are you are you guys on this stuff yet this is like the future I'm GNA do all my thoughts from now",
    "start": "754920",
    "end": "760920"
  },
  {
    "text": "on get people and I'm gonna just return okay that too let's just do that",
    "start": "760920",
    "end": "767240"
  },
  {
    "text": "let's do that um but let's assume this can be null so you may have code like",
    "start": "767240",
    "end": "773040"
  },
  {
    "text": "this right like people get people right say synchronous you can do this yes and",
    "start": "773040",
    "end": "780079"
  },
  {
    "text": "it's super efficient so before you would have had maybe you would have written this code like new list of person like",
    "start": "780079",
    "end": "787040"
  },
  {
    "text": "if that's in a method it would be every single time it and they go yeah so it tries to do the most efficient thing so",
    "start": "787040",
    "end": "793079"
  },
  {
    "text": "if if I do this it would be a new list this is an array",
    "start": "793079",
    "end": "799320"
  },
  {
    "text": "right oh my gosh this will work too right this should work",
    "start": "799320",
    "end": "805639"
  },
  {
    "text": "too complain about is it",
    "start": "805639",
    "end": "810839"
  },
  {
    "text": "line 12 KY curly KY line 12 on the other line 12 that",
    "start": "810839",
    "end": "817279"
  },
  {
    "text": "line 12 there you go it's lit almost works almost what's",
    "start": "817279",
    "end": "824680"
  },
  {
    "text": "complaining about top arguments cannot be oh it can't figure out",
    "start": "824680",
    "end": "832440"
  },
  {
    "text": "mads so this does the most efficient thing and is the equivalent of array",
    "start": "834079",
    "end": "839839"
  },
  {
    "text": "no empty yeah of person right so the",
    "start": "839839",
    "end": "844920"
  },
  {
    "text": "compiler is doing its best to to gen to the most efficient code for every scenario you can't outsmart it what did",
    "start": "844920",
    "end": "852680"
  },
  {
    "text": "it do when it wasn't even a concrete type when it was a read okay never",
    "start": "852680",
    "end": "857800"
  },
  {
    "text": "mind go on it creates a concrete type wow that's amazing specific that that actually impl the interface that's",
    "start": "857800",
    "end": "864519"
  },
  {
    "text": "that's like the my my favorite feature I love that have a question",
    "start": "864519",
    "end": "870319"
  },
  {
    "text": "yeah I'm pretty sure if it can be allocated on the stack it will be so it will it will stack Al if it can if it",
    "start": "881120",
    "end": "888720"
  },
  {
    "text": "can't it has to create an array so if you're doing an array of a span of objects it can't stack holic arbitrary",
    "start": "888720",
    "end": "894040"
  },
  {
    "text": "object if you're doing a span event it can do a stolic in that situation if it knows you never going to capture that",
    "start": "894040",
    "end": "900000"
  },
  {
    "text": "state and like return it or store it on the Heap yeah so it does really cool",
    "start": "900000",
    "end": "905240"
  },
  {
    "text": "efficient things um I burnt so much time talking about feature in Lanta Rays am I",
    "start": "905240",
    "end": "910519"
  },
  {
    "text": "gonna show this probably not it is super obscure but it's a super cool obscure feature that I like all right Let's do",
    "start": "910519",
    "end": "918199"
  },
  {
    "text": "let's do another one more cart feature that is new that I believe was done by an intern and then made made RA in a",
    "start": "918199",
    "end": "926199"
  },
  {
    "text": "later release but it was the same like intern intern the intern code that that we wrote so that's cool in C six we",
    "start": "926199",
    "end": "934319"
  },
  {
    "text": "introduced oh one more thing about about about okay one more thing to add this does not work yet we want this to work",
    "start": "934319",
    "end": "940639"
  },
  {
    "text": "this is amazing like this is like JavaScript right I mean that's not amazing but this is amazing um what type",
    "start": "940639",
    "end": "947440"
  },
  {
    "text": "should this be should it be an array hands up for",
    "start": "947440",
    "end": "953440"
  },
  {
    "text": "array should it be list only one",
    "start": "953440",
    "end": "959120"
  },
  {
    "text": "okay interesting so",
    "start": "959120",
    "end": "964279"
  },
  {
    "text": "fired okay Ma got feedback that's a survey all right we're good we're good",
    "start": "964279",
    "end": "969680"
  },
  {
    "text": "we're good um we were at yeah default Lambda so in C 6 we could do this this",
    "start": "969680",
    "end": "975639"
  },
  {
    "text": "is very hcal like it's amazing right in line function and I could declare Lambda",
    "start": "975639",
    "end": "981440"
  },
  {
    "text": "and it will infer what the type is going to be so f is going to be a funk of interent right beautiful and it even",
    "start": "981440",
    "end": "987319"
  },
  {
    "text": "supports things like you know so you could ask the question what happens if you make it like an out parameter what",
    "start": "987319",
    "end": "993319"
  },
  {
    "text": "like what would you do then right well the compter generates one on the fight because you can't represent um the out",
    "start": "993319",
    "end": "998600"
  },
  {
    "text": "parameters via uh a generic type so it's not Funk or action it's just a this new",
    "start": "998600",
    "end": "1005560"
  },
  {
    "text": "um anous of a right it's a yeah it's a",
    "start": "1005560",
    "end": "1011199"
  },
  {
    "text": "Anonymous delegate there you go what you couldn't do before which maybe you didn't know was you couldn't do this",
    "start": "1011199",
    "end": "1019000"
  },
  {
    "text": "not works yay why is it important well because",
    "start": "1019000",
    "end": "1024918"
  },
  {
    "text": "minimal apis we wanted to support things like this let's say you had a page",
    "start": "1024919",
    "end": "1030839"
  },
  {
    "text": "index that came from C string and it wasn't there by default you want to say the NX by default is one so n this works",
    "start": "1030839",
    "end": "1037678"
  },
  {
    "text": "as well great awesome small but very nice feature um I think as part of the",
    "start": "1037679",
    "end": "1043160"
  },
  {
    "text": "language design we end up tightening up features over time so you see a thing may come out in one version and then",
    "start": "1043160",
    "end": "1049160"
  },
  {
    "text": "you'll use it and you'll find some edges and then we'll kind of Polish and polish and polish and polish as we go by so if",
    "start": "1049160",
    "end": "1054360"
  },
  {
    "text": "you don't get kind of big features every single release it's because we're working on that polish but m is not me I",
    "start": "1054360",
    "end": "1059559"
  },
  {
    "text": "just complain to him sometimes we just run out of time too yeah and we we have to just draw a line and go this is still",
    "start": "1059559",
    "end": "1066000"
  },
  {
    "text": "useful even if we can't yet use it for this other thing we wanted it for yeah and then we add the thing and then we can use it and I believe M had to talk",
    "start": "1066000",
    "end": "1073000"
  },
  {
    "text": "um on Friday about C so definitely go and watch this talk and learn about tomorrow tomor tomorrow Friday tomorrow",
    "start": "1073000",
    "end": "1079320"
  },
  {
    "text": "Thursday so we'll be it'll be Friday wherever you are I don't even try to attempt to figure that",
    "start": "1079320",
    "end": "1084760"
  },
  {
    "text": "out um okay runtime features we're done with C now we're we're in the guts of the runtime and the jit and the garbage",
    "start": "1084760",
    "end": "1091559"
  },
  {
    "text": "collector I only found kind of two main features that I think we we um haven't talked about yeah a lot of um there's",
    "start": "1091559",
    "end": "1100120"
  },
  {
    "text": "this new GC Mode called datas or datas I can talk about this one if you like oh",
    "start": "1100120",
    "end": "1105240"
  },
  {
    "text": "perfect you should go so as part of one of the projects we did in net8 we had a project called Goldilocks which was for",
    "start": "1105240",
    "end": "1110760"
  },
  {
    "text": "AET core how can we uh kind of find that sweet spot for building really small low",
    "start": "1110760",
    "end": "1116320"
  },
  {
    "text": "memory use low XE size as.net core apps if you're building like GPC or apis uh",
    "start": "1116320",
    "end": "1122480"
  },
  {
    "text": "one of the one of the issues we hit very early was that server GC which is the nice GC mode that does multicore GC and",
    "start": "1122480",
    "end": "1129360"
  },
  {
    "text": "all the wonderful um you know non-using GC stuff for most stuff um was it uses a lot of memory like because it like",
    "start": "1129360",
    "end": "1135480"
  },
  {
    "text": "season you have 24 cores and so it creates 24 heaps or you know half 12 heaps or whatever it might be just use them just use them all like I'm Ser a GC",
    "start": "1135480",
    "end": "1142440"
  },
  {
    "text": "there's lots of cores I want to do all the things to make your app run faster so that's what it does but then it turns",
    "start": "1142440",
    "end": "1148559"
  },
  {
    "text": "out that when people run hello world aset core and they see on a machine with 24 cores like a you know modern laptop",
    "start": "1148559",
    "end": "1155440"
  },
  {
    "text": "and they see it's using 400 megabytes or 500 megabytes or 2 gigabytes they go why",
    "start": "1155440",
    "end": "1160720"
  },
  {
    "text": "is it using so much memory to do hello world and so this is our first attempt",
    "start": "1160720",
    "end": "1165799"
  },
  {
    "text": "at basically tuning the server GC to in instead say you know what I'm only going to create uh memory that I need if the",
    "start": "1165799",
    "end": "1173600"
  },
  {
    "text": "if the app needs it and then if the app needs it and then it doesn't need it anymore I'll dynamically adapt back down",
    "start": "1173600",
    "end": "1179840"
  },
  {
    "text": "I'll shrink uh either my budget or and including the number of heaps that I'm using um and so as a result of that you",
    "start": "1179840",
    "end": "1187360"
  },
  {
    "text": "can end up having apps that instead of using like I said gigabytes of RAM I only use a couple hundred megabytes of RAM for the same load right the same",
    "start": "1187360",
    "end": "1194039"
  },
  {
    "text": "amount of load going on the application so this is only on by default currently in the new web API native aot template",
    "start": "1194039",
    "end": "1201880"
  },
  {
    "text": "but you can turn it on in any application okay if you enable server GC which is on by default in as core you",
    "start": "1201880",
    "end": "1208039"
  },
  {
    "text": "can set another flag that will turn this thing on that flag right there garbage collection adaption mode as an MS build property set it to one and you can try",
    "start": "1208039",
    "end": "1214679"
  },
  {
    "text": "it out let us know how it goes our goal is for this to become the default mode eventually in nine in nine hopefully y y",
    "start": "1214679",
    "end": "1221320"
  },
  {
    "text": "all right so that mode is funny because that mode came up in the very beginning when we were discussing the the aot",
    "start": "1221320",
    "end": "1227000"
  },
  {
    "text": "stuff we were comparing to go and we were being compared to go and go is really good at not doing aggressive",
    "start": "1227000",
    "end": "1234000"
  },
  {
    "text": "collection and allocation um rgc is is lazy and extremely efficient that's that",
    "start": "1234000",
    "end": "1239640"
  },
  {
    "text": "that makes sense you're lazy so you're being more efficient because you're going to do less until you have to do more stuff right um so this this is one",
    "start": "1239640",
    "end": "1245679"
  },
  {
    "text": "of our big attempts at making this making us by default kind of scalable up",
    "start": "1245679",
    "end": "1250720"
  },
  {
    "text": "and down that was a big thing for us um we have teams inside Microsoft that run on 128 core machines and they will run",
    "start": "1250720",
    "end": "1258679"
  },
  {
    "text": "one process 128 maches yeah insane and they run a single process in server GC",
    "start": "1258679",
    "end": "1264320"
  },
  {
    "text": "mode and that one process will assume 128 heaps by default right so we've",
    "start": "1264320",
    "end": "1269880"
  },
  {
    "text": "we've gotten feedback over time that you know we want to be able to scale dynamically based on the load that's",
    "start": "1269880",
    "end": "1275559"
  },
  {
    "text": "this Fe is and to be clear there are knobs already that let you configure how many heaps to use configure the size of",
    "start": "1275559",
    "end": "1280919"
  },
  {
    "text": "each of those heaps but that's a lot of knobs and what if your app changes size while it's running like what if you need to suddenly have more heaps and then",
    "start": "1280919",
    "end": "1287120"
  },
  {
    "text": "this magic sauce right so this the whole point here is that we'll just figure it out for you you just run the app and it figures it",
    "start": "1287120",
    "end": "1292400"
  },
  {
    "text": "out awesome um the other feature this is a really interesting one that is like",
    "start": "1292400",
    "end": "1298159"
  },
  {
    "text": "wow we did this one um so if okay hey okay who has ever done private reflection to get access to a member in",
    "start": "1298159",
    "end": "1303840"
  },
  {
    "text": "code that you don't own and no it's okay it's fine who's ever used any framework whoa okay it",
    "start": "1303840",
    "end": "1312200"
  },
  {
    "text": "uses private reflection to get access to code it does that's how it makes itself",
    "start": "1312200",
    "end": "1317480"
  },
  {
    "text": "fast remember the day of looking in reflector on donet framework to figure",
    "start": "1317480",
    "end": "1322840"
  },
  {
    "text": "out how Stuff work before your open source and you find all the code and you be like I want to tweet that field that",
    "start": "1322840",
    "end": "1328159"
  },
  {
    "text": "private field right there and then you write code that is like what everyone does you do type of like some class and you find a class",
    "start": "1328159",
    "end": "1335840"
  },
  {
    "text": "and it's like in the I decompiled and you find a field name you're like okay the field name is private field and then",
    "start": "1335840",
    "end": "1342640"
  },
  {
    "text": "you and you feel dirty you're like you're like sweating and you're you're feeling terrible and you get fielded and",
    "start": "1342640",
    "end": "1349000"
  },
  {
    "text": "you pass it in with the string so you declare a constant and doesn't make it feel any better but then and then you",
    "start": "1349000",
    "end": "1354320"
  },
  {
    "text": "say binding flags nonpublic and you know you've gone off the rails the the fact that there isn't even a binding flags",
    "start": "1354320",
    "end": "1360520"
  },
  {
    "text": "for private because we don't want to say it it's no no no we feel so saying it",
    "start": "1360520",
    "end": "1366080"
  },
  {
    "text": "like don't ever do this non static so it's instance and then you like you you've done this and you get the field",
    "start": "1366080",
    "end": "1371159"
  },
  {
    "text": "info and then you're like I can now call like the actual internal FS let's let's call this does it have a value",
    "start": "1371159",
    "end": "1379200"
  },
  {
    "text": "copilot helping me out like already hold on why is it complaining about this it's",
    "start": "1379200",
    "end": "1387080"
  },
  {
    "text": "private let's it public okay perfect feels private and so",
    "start": "1387640",
    "end": "1393919"
  },
  {
    "text": "everyone's seen this code before this isn't new to anyone right don't feel bad for this this is awful so I do this and I should get back",
    "start": "1393919",
    "end": "1401799"
  },
  {
    "text": "42 right not not surprising World 42 right there's a new",
    "start": "1401799",
    "end": "1408720"
  },
  {
    "text": "way to do private reflection it's kind of crazy okay so I",
    "start": "1408720",
    "end": "1416120"
  },
  {
    "text": "can declare let's see if I get the syntax right I can declare an external method right has to be",
    "start": "1416120",
    "end": "1423640"
  },
  {
    "text": "static has to match let me just look at the syntax I'm not GNA get this right gonna get it wrong so you can use this",
    "start": "1423640",
    "end": "1430840"
  },
  {
    "text": "thing called unsafe accessor to declare an external method with a string name on top of the",
    "start": "1430840",
    "end": "1439240"
  },
  {
    "text": "actual method with an attribute right so I can say like I want to get a private field and I have an example",
    "start": "1439240",
    "end": "1446000"
  },
  {
    "text": "here yeah we totally messed it up so here's an example and I can't call",
    "start": "1446000",
    "end": "1451960"
  },
  {
    "text": "it here let's just do public some",
    "start": "1451960",
    "end": "1458640"
  },
  {
    "text": "class so same idea but different syntax external method ref because I can",
    "start": "1458640",
    "end": "1464360"
  },
  {
    "text": "set and get the field and the name of the field here private field is a string and I just declare this this method and",
    "start": "1464360",
    "end": "1471440"
  },
  {
    "text": "the runtime will do magic to implement this on Native alt mono Corr so you get",
    "start": "1471440",
    "end": "1478080"
  },
  {
    "text": "this tight safe way to do unsafe reflection great that keeps working even",
    "start": "1478080",
    "end": "1485440"
  },
  {
    "text": "if you trim or you do Native a or any of those things y the reason we did this was because Entity framework or the",
    "start": "1485440",
    "end": "1492520"
  },
  {
    "text": "driving reason we did this was because enti framework wanted to generate code I",
    "start": "1492520",
    "end": "1497960"
  },
  {
    "text": "compile time that accesses your your members that that you um your your entities that you declared and today it",
    "start": "1497960",
    "end": "1504440"
  },
  {
    "text": "bypasses your properties and goes to your Fields directly if you didn't know it that's what it does right so whenever you do a query with a projection they'll",
    "start": "1504440",
    "end": "1511559"
  },
  {
    "text": "instantiate your objects and hold your Fields directly it's super crazy and it's very efficient so they didn't want",
    "start": "1511559",
    "end": "1517520"
  },
  {
    "text": "to lose efficiency they ran per test and the difference was like massive yeah so the question was how do we let any",
    "start": "1517520",
    "end": "1525360"
  },
  {
    "text": "framework cenate static code that accesses private Fields sounds",
    "start": "1525360",
    "end": "1531720"
  },
  {
    "text": "crazy right so you can imagine in a runtime safe guaranteed way in a runtime safe guaranteed so you can imagine you",
    "start": "1531720",
    "end": "1536760"
  },
  {
    "text": "have like a class like this and you have a property like this behind the scenes you get this underscore underscore uh",
    "start": "1536760",
    "end": "1544640"
  },
  {
    "text": "like brackets private field blah blah blah any will basically code spit those",
    "start": "1544640",
    "end": "1549679"
  },
  {
    "text": "things into like these classes so they will sour generate all this stuff behind the scenes and every runtime even the",
    "start": "1549679",
    "end": "1556120"
  },
  {
    "text": "aot runtime will support this new feature and we can do type sa reflection",
    "start": "1556120",
    "end": "1561559"
  },
  {
    "text": "that's kind of incredible right um let me make sure this works first just so you can tell I'm not a funny all right you calling the new one",
    "start": "1561559",
    "end": "1569440"
  },
  {
    "text": "now oh wow that was Quicks super fast we can tell all right run time over we're",
    "start": "1569440",
    "end": "1577480"
  },
  {
    "text": "halfway through okay okay okay pretty good all right who has used timer provider it is one of the best features",
    "start": "1577480",
    "end": "1584000"
  },
  {
    "text": "in net it is so good have you heard about it how do you test things that use date",
    "start": "1584000",
    "end": "1589880"
  },
  {
    "text": "time. know you don't you don't you don't right yeah you spin up a VM you said it's time",
    "start": "1589880",
    "end": "1597640"
  },
  {
    "text": "to what you want to do for each test a container not a VM okay container so you",
    "start": "1597640",
    "end": "1603640"
  },
  {
    "text": "you get Docker Docker run you configur I'm kidding so normally you would have code that was like this and you were",
    "start": "1603640",
    "end": "1609960"
  },
  {
    "text": "like you you want to assign the current time to your your U fields or your your",
    "start": "1609960",
    "end": "1615440"
  },
  {
    "text": "classes so you you would do this right in your applications and obviously anyone who's tested a timer or date time",
    "start": "1615440",
    "end": "1622279"
  },
  {
    "text": "has an I date time interface yep we did a search internally",
    "start": "1622279",
    "end": "1627720"
  },
  {
    "text": "on Microsoft there were a thousand ID time interfaces like system clock I fake",
    "start": "1627720",
    "end": "1633480"
  },
  {
    "text": "clock I there was one as cor there were two in aset core the same team over time",
    "start": "1633480",
    "end": "1639880"
  },
  {
    "text": "there was one in extensions there's one in the runtime there's one and everywhere so guess what it became this",
    "start": "1639880",
    "end": "1645799"
  },
  {
    "text": "obvious need we should have a timer exraction right so if you want to test the passage of time use this new feature",
    "start": "1645799",
    "end": "1652640"
  },
  {
    "text": "called time provider right and there's one by default there's I think time. default",
    "start": "1652640",
    "end": "1660120"
  },
  {
    "text": "system this is the default implementation and you are supposed to build your own mock there's also one in",
    "start": "1660120",
    "end": "1668159"
  },
  {
    "text": "Microsoft extensions I don't what the name is um there's a mock we ship out of the box where you can kind of like",
    "start": "1668159",
    "end": "1674279"
  },
  {
    "text": "manually Advance Time by saying like add add or",
    "start": "1674279",
    "end": "1679559"
  },
  {
    "text": "it is so normally your code would be doing this instead you will take in a Time",
    "start": "1679559",
    "end": "1685480"
  },
  {
    "text": "provider p and this I guess this is the gross part you can't just use your",
    "start": "1685480",
    "end": "1691440"
  },
  {
    "text": "static method anymore you can't use this anymore this goes away yeah right so I'm assuming if you wrote testable",
    "start": "1691440",
    "end": "1698880"
  },
  {
    "text": "code no judgment you don't call any static exactly so you you should be you know find doing hey I have a date time",
    "start": "1699840",
    "end": "1706679"
  },
  {
    "text": "object get now look at that perfect that's not what it is get there",
    "start": "1706679",
    "end": "1712799"
  },
  {
    "text": "you go now and some other argument why is this complaining oh it's",
    "start": "1712799",
    "end": "1718559"
  },
  {
    "text": "offset perfect so you should be using this thing and it's it's usable with timers as well so I can create a has",
    "start": "1718559",
    "end": "1725919"
  },
  {
    "text": "anyone seen my favorite feature from n6 from six audit",
    "start": "1725919",
    "end": "1731559"
  },
  {
    "text": "timer this timer you can create timer object how many time is in the framework",
    "start": "1732440",
    "end": "1738960"
  },
  {
    "text": "I don't want to about it okay there were two and then we added one more right so now there are seven",
    "start": "1738960",
    "end": "1747158"
  },
  {
    "text": "okay so you can do this and just wait for a timer to tick you can wait for next tick is that what it is no I see I have",
    "start": "1747559",
    "end": "1754600"
  },
  {
    "text": "to do the await I forgot to use this thing I think it's like while yeah we go so you can do this and",
    "start": "1754600",
    "end": "1762720"
  },
  {
    "text": "this actually will wait on a second or you can say pass in the timer",
    "start": "1762720",
    "end": "1768919"
  },
  {
    "text": "provider p and if you have a mock one it won't fire until you advance the time by",
    "start": "1768919",
    "end": "1774320"
  },
  {
    "text": "hand so the idea is You author test You author all your code to inject the provider and then your test can just",
    "start": "1774320",
    "end": "1780640"
  },
  {
    "text": "have a mock one so you can kind of Advance time um by hand it's super nice um things that support this also task.",
    "start": "1780640",
    "end": "1788320"
  },
  {
    "text": "delay everyone is doing this in their code when they want to like get more money so you put a f sleep in and then",
    "start": "1788320",
    "end": "1794720"
  },
  {
    "text": "when the boss says you got speed it up then you go I got you boss from days one",
    "start": "1794720",
    "end": "1801399"
  },
  {
    "text": "day and then you pass in the provider that just looks like my first",
    "start": "1801399",
    "end": "1807000"
  },
  {
    "text": "workflow step one way to day so Tas delay support time provider as well so",
    "start": "1807000",
    "end": "1812120"
  },
  {
    "text": "it is cancellation token so we kind of went far to figure out what things in the BCL people end up using um that",
    "start": "1812120",
    "end": "1819559"
  },
  {
    "text": "anything that does new timer internally we now support passing in this from the outside so you can kind of mock time",
    "start": "1819559",
    "end": "1825039"
  },
  {
    "text": "right right super good feature can't can't solation token Source no takes in",
    "start": "1825039",
    "end": "1830760"
  },
  {
    "text": "a Time Ider there it is time span DeLay So time span from second one and then",
    "start": "1830760",
    "end": "1836679"
  },
  {
    "text": "you can pass in PS well so change all your code all of it and flow this thing",
    "start": "1836679",
    "end": "1843720"
  },
  {
    "text": "everywhere and then you don't have to worry about testing later on awesome because flicky tests suck we have tests",
    "start": "1843720",
    "end": "1850360"
  },
  {
    "text": "that like need to wait for the entire timeout to fail it it sucks so this is kind of the way to fix",
    "start": "1850360",
    "end": "1856679"
  },
  {
    "text": "that all right great random that shuffle you want to talk about this one this is your one your fav oh look 10 seconds",
    "start": "1856679",
    "end": "1862120"
  },
  {
    "text": "there's just someone did the work to add nice methods on um the random class so",
    "start": "1862120",
    "end": "1868240"
  },
  {
    "text": "that if you've got like an array of values and you want to get a random value out of it you don't have to write that code anymore you just say Shuffle",
    "start": "1868240",
    "end": "1874440"
  },
  {
    "text": "the array please and it reorders it randomly or you can say get me a random value from it and it will get you a",
    "start": "1874440",
    "end": "1879960"
  },
  {
    "text": "random value from it I just think that's so cool is this nice nice feature right shffle yeah I mean this isn't useful",
    "start": "1879960",
    "end": "1885360"
  },
  {
    "text": "because I can't I can't actually get it back but I should declare first yeah that yes you you just shuffled an",
    "start": "1885360",
    "end": "1890880"
  },
  {
    "text": "ephemeral array that just disappears again so you're just doing work put that in a loop and replace your timer delay",
    "start": "1890880",
    "end": "1896039"
  },
  {
    "text": "for one day before see what happens make it do something is a sort called Sleep sort um",
    "start": "1896039",
    "end": "1902039"
  },
  {
    "text": "I mean you could Implement like a dice rolling method with that what you just wrote right just Shuffle this SE and",
    "start": "1902039",
    "end": "1907840"
  },
  {
    "text": "give me back a random one do it do it all right nice Shuffle Works boom yeah",
    "start": "1907840",
    "end": "1914960"
  },
  {
    "text": "sh14 run it again shuffled yeah 401 this is how you trick the interns you Shuffle the the original see what see what they",
    "start": "1914960",
    "end": "1921639"
  },
  {
    "text": "do all right there's also get items yeah which gives you back a random",
    "start": "1921639",
    "end": "1929320"
  },
  {
    "text": "random so let's see if I do this with one it's not not super efficient what I",
    "start": "1929320",
    "end": "1935279"
  },
  {
    "text": "pass Ron span of choices and a length or destination this is so you",
    "start": "1935279",
    "end": "1940519"
  },
  {
    "text": "don't allocate the return arrate right so you can say given this this list of choices push it into this span so",
    "start": "1940519",
    "end": "1946919"
  },
  {
    "text": "there's no allocation at all randomly yeah get me a random two subet from into",
    "start": "1946919",
    "end": "1952840"
  },
  {
    "text": "this no allocations yeah very nice one thing you'll see in new apis we are thinking a lot about low allocation apis",
    "start": "1952840",
    "end": "1960440"
  },
  {
    "text": "there there's also the convenient the convenient apis that do allocate so there's get items that had to create an",
    "start": "1960440",
    "end": "1966159"
  },
  {
    "text": "array returning and there's also get items that fil in memory it's a brand new pattern that's very much like",
    "start": "1966159",
    "end": "1972840"
  },
  {
    "text": "C the C and C but you have choices now you can do yes and span makes it much easier yday Frozen collections who's",
    "start": "1972840",
    "end": "1979600"
  },
  {
    "text": "heard about Frozen collections yeah good right so that actually came from the teams",
    "start": "1979600",
    "end": "1986360"
  },
  {
    "text": "team the team team uh the MS team's backend team they were trying to optimize a bunch of their uh code that",
    "start": "1986360",
    "end": "1993440"
  },
  {
    "text": "had to read some config object at startup and then it would basically they wanted to optimize for lookup later yeah",
    "start": "1993440",
    "end": "1999840"
  },
  {
    "text": "later later on so they had this onetime expensive read at startup and then you basically crunch the the array or",
    "start": "1999840",
    "end": "2006240"
  },
  {
    "text": "dictionary or set into this like super optimized lookup system um it's not immutable it's",
    "start": "2006240",
    "end": "2013919"
  },
  {
    "text": "frozen confusing right um Frozen um collections cannot be changed immutable",
    "start": "2014799",
    "end": "2019960"
  },
  {
    "text": "arrays can be changed but you get a new array after the mutation that's the main difference right so hopefully that made",
    "start": "2019960",
    "end": "2027120"
  },
  {
    "text": "sense have we like changed any of the code a on E to use frozen stuff yet some",
    "start": "2027120",
    "end": "2032840"
  },
  {
    "text": "I believe we changed a couple of things to use frozen dictionary um but there's a biggest up cost as you said like the",
    "start": "2032840",
    "end": "2038760"
  },
  {
    "text": "startup cost is higher but then every read is much quicker exactly so it's optimized for reading and you are paying",
    "start": "2038760",
    "end": "2044760"
  },
  {
    "text": "the cost up front to Crunch and figure out what the data is so you can say list of strings uh do this ins do this",
    "start": "2044760",
    "end": "2051800"
  },
  {
    "text": "optimize for this algorithm this hash code if you have like a small set use a super perfect hatch if you have a big",
    "start": "2051800",
    "end": "2057560"
  },
  {
    "text": "set do something else so you're paying this big cost up front to create the collection so that reading is super",
    "start": "2057560",
    "end": "2063200"
  },
  {
    "text": "efficient okay yeah it's a crazy indexing um collection very very cool feature",
    "start": "2063200",
    "end": "2068520"
  },
  {
    "text": "all right composite format this is kind of a let me move this I don't even know that one is this also came from the team team um",
    "start": "2068520",
    "end": "2077040"
  },
  {
    "text": "the idea here was when you do this code in normally string. format right no",
    "start": "2077040",
    "end": "2083679"
  },
  {
    "text": "close close string. format I say like hello oh nice hello world this is um it",
    "start": "2083679",
    "end": "2093280"
  },
  {
    "text": "got better in net 6 I believe okay this is a slow one this is not not great this",
    "start": "2093280",
    "end": "2098880"
  },
  {
    "text": "code is doing a part of the template every single time finding the zero",
    "start": "2098880",
    "end": "2104200"
  },
  {
    "text": "getting the values as an object and then filling in the hole and making a new string right it's fine not so bad but",
    "start": "2104200",
    "end": "2110000"
  },
  {
    "text": "it's not as efficient this code let me just get a veryable like not",
    "start": "2110000",
    "end": "2117359"
  },
  {
    "text": "crazy what are you doing co-pilot it's like the most eager puppy",
    "start": "2117359",
    "end": "2123640"
  },
  {
    "text": "you've ever had is this code since I think C 6 tell me",
    "start": "2123640",
    "end": "2131079"
  },
  {
    "text": "if I'm wrong um someone it it looks similar it looks like the same thing but",
    "start": "2131079",
    "end": "2136520"
  },
  {
    "text": "the compiler is breaking this into a series of calls to like append and it allocates one final string it is",
    "start": "2136520",
    "end": "2142760"
  },
  {
    "text": "insanely efficient right so they're very different things but you have to do the first one if you have a string that",
    "start": "2142760",
    "end": "2148920"
  },
  {
    "text": "comes from somewhere else so you're loading um things from a database or resources or you have like a bunch of",
    "start": "2148920",
    "end": "2156040"
  },
  {
    "text": "format strings that are external to the application so the compiler can't optimize right this call by doing a",
    "start": "2156040",
    "end": "2162440"
  },
  {
    "text": "straight inline parts of the template right so the goal is to split up parsing from filling so there's a type called",
    "start": "2162440",
    "end": "2169720"
  },
  {
    "text": "composite format where you parse a template so you give it you give it this",
    "start": "2169720",
    "end": "2175160"
  },
  {
    "text": "string form template and you basically are getting a a a format that has a hole",
    "start": "2175160",
    "end": "2180520"
  },
  {
    "text": "it's a prear template right template it yeah it has holes in it a hole it's unone oh I guess this is",
    "start": "2180520",
    "end": "2188119"
  },
  {
    "text": "one hole M and then there's a string format overload that takes oh my gosh really",
    "start": "2188119",
    "end": "2195599"
  },
  {
    "text": "want a for loop it's not a for Loop like what are you doing there this wait where is the",
    "start": "2195599",
    "end": "2201800"
  },
  {
    "text": "overload string for my Oh wrong way so culture",
    "start": "2201800",
    "end": "2208599"
  },
  {
    "text": "info dot inv Varian culture perfect so pass in the culture info pass in the",
    "start": "2208599",
    "end": "2214640"
  },
  {
    "text": "template that's prear so you don't have to reparse the every single time and the value gets filled in it's super",
    "start": "2214640",
    "end": "2220599"
  },
  {
    "text": "efficient I believe there's overloads for up where it won't allocate for three arguments and then",
    "start": "2220599",
    "end": "2227240"
  },
  {
    "text": "tough luck yeah there there's a trade-off between having like T1 to t50 like",
    "start": "2227240",
    "end": "2233960"
  },
  {
    "text": "there's just a lot of memory and other trade-offs and size and generics and",
    "start": "2233960",
    "end": "2241000"
  },
  {
    "text": "question correct good question is this how logging works",
    "start": "2243960",
    "end": "2251200"
  },
  {
    "text": "when you when you grab let me jump the core when you grab an i logger",
    "start": "2251200",
    "end": "2257720"
  },
  {
    "text": "from the of program's see logger here when you grab this and you log some string like logger.log go copilot go go",
    "start": "2257720",
    "end": "2266599"
  },
  {
    "text": "finish me hello name I like say you get",
    "start": "2266599",
    "end": "2272160"
  },
  {
    "text": "a name this comes from the query string",
    "start": "2272160",
    "end": "2278880"
  },
  {
    "text": "[Music] almost almost perfect what happens when",
    "start": "2278880",
    "end": "2285040"
  },
  {
    "text": "you do this right same problem you get this call to log it has to process thing every time we do some insane things but",
    "start": "2285040",
    "end": "2291319"
  },
  {
    "text": "in net seven or six I don't even know what happen we actually reimplemented this",
    "start": "2291319",
    "end": "2299040"
  },
  {
    "text": "with that new primitive so we actually parse this template into a composite format under the covers and if you have",
    "start": "2299040",
    "end": "2305119"
  },
  {
    "text": "up to three arguments then you get the per of box and a lot of bad things um",
    "start": "2305119",
    "end": "2310200"
  },
  {
    "text": "but yeah we we actually and that's probably a pattern where if we add a new primitive we will do our best to use it",
    "start": "2310200",
    "end": "2317680"
  },
  {
    "text": "everywhere in the same release so we can find problems and see if it works in practice so yeah that happens and the",
    "start": "2317680",
    "end": "2324079"
  },
  {
    "text": "covers it's still parsing every time because the string is her yeah but there are ways to kind of like pre-compile and",
    "start": "2324079",
    "end": "2329480"
  },
  {
    "text": "say parse once and then do it over and logging that we released in six six and",
    "start": "2329480",
    "end": "2337480"
  },
  {
    "text": "seven and eight kept updating them all new versions new things that came out all right on this same trend of",
    "start": "2337480",
    "end": "2343640"
  },
  {
    "text": "crunching things up front to then make it fast for reading at runtime there's this new feature called search values",
    "start": "2343640",
    "end": "2350520"
  },
  {
    "text": "has anyone seen this feature search values Phil Phil told me before that I",
    "start": "2350520",
    "end": "2355880"
  },
  {
    "text": "know everything in this talk I said you don't know um search values is the same",
    "start": "2355880",
    "end": "2363040"
  },
  {
    "text": "pattern that we've seen with frozen Collections and with the composite format where",
    "start": "2363040",
    "end": "2368400"
  },
  {
    "text": "you want to do a fast search at runtime or or many searches at runtime on some",
    "start": "2368400",
    "end": "2373880"
  },
  {
    "text": "body of text so you want to say I'm gonna look for I don't know like bite",
    "start": "2373880",
    "end": "2379440"
  },
  {
    "text": "values ense ense I want I want to scan for new lines right there you go or you",
    "start": "2379440",
    "end": "2384880"
  },
  {
    "text": "can pass it in on AR R is it an a ray of values it's an a ray of values go C",
    "start": "2384880",
    "end": "2390800"
  },
  {
    "text": "yay um and we will do our best to observe",
    "start": "2390800",
    "end": "2395839"
  },
  {
    "text": "this array of values pass in and we will give you the most optimized searching algorithm that we can figure out under",
    "start": "2395839",
    "end": "2401960"
  },
  {
    "text": "the covers for the payload pass in and it does some insane things I learn in",
    "start": "2401960",
    "end": "2407079"
  },
  {
    "text": "computer science like way back when that we kind of like brought back in just to give you a sense of what it does like",
    "start": "2407079",
    "end": "2412520"
  },
  {
    "text": "okay that's not helpful let me just show you because I use this all the time does anyone use",
    "start": "2412520",
    "end": "2417680"
  },
  {
    "text": "source.net every day it is amazing it's this entire index",
    "start": "2417680",
    "end": "2424640"
  },
  {
    "text": "of the entire net code base that is like insanely fast",
    "start": "2424640",
    "end": "2430560"
  },
  {
    "text": "search I could type okay how dare",
    "start": "2430839",
    "end": "2437880"
  },
  {
    "text": "you all right so here is the create function that you won't understand how in in St until you see the",
    "start": "2437880",
    "end": "2445720"
  },
  {
    "text": "implementation create values if it's empties empties or values not a big deal one value do a one byte",
    "start": "2445720",
    "end": "2452119"
  },
  {
    "text": "search try to find out if you're in the asky range if you're less than five optimize this this is like super",
    "start": "2452119",
    "end": "2458280"
  },
  {
    "text": "vectorized and optimized so like we spent a lot of time trying to optimize for all the cases that we saw in our",
    "start": "2458280",
    "end": "2464880"
  },
  {
    "text": "code base um if you're asky and and and you support better position and the value is less than 128 you can do this",
    "start": "2464880",
    "end": "2471440"
  },
  {
    "text": "super optimized thing or if you're just bites do this thing so there's this pattern that we're making of um do all",
    "start": "2471440",
    "end": "2479560"
  },
  {
    "text": "the work up front to look at data and figure out how best to optimize the algorithm for runtime and then make a",
    "start": "2479560",
    "end": "2484760"
  },
  {
    "text": "really fast efficient thing and you use this by calling index of on different",
    "start": "2484760",
    "end": "2492000"
  },
  {
    "text": "things so I think for this one this is a bit let me just h b whatever I I said B and I wrote",
    "start": "2492000",
    "end": "2501100"
  },
  {
    "text": "[Laughter] X is it as",
    "start": "2501100",
    "end": "2506640"
  },
  {
    "text": "span as span. index of I believe you can pass in a search how do you use this I",
    "start": "2506640",
    "end": "2513839"
  },
  {
    "text": "forgot to use this thing though failing horribly search values you pass it into something",
    "start": "2513839",
    "end": "2521280"
  },
  {
    "text": "where do you pass it into values this doesn't have any functions like all it has on it is a call to index s contains",
    "start": "2521280",
    "end": "2529240"
  },
  {
    "text": "and then when you call index s and contains it defers to the implementation M if I can find",
    "start": "2529240",
    "end": "2535040"
  },
  {
    "text": "it no no no no no can't find it go read the doc I for what to call",
    "start": "2535040",
    "end": "2541760"
  },
  {
    "text": "it yeah you might be right",
    "start": "2541760",
    "end": "2549119"
  },
  {
    "text": "there it is okay so inex have it okay that's right perfect and this indirectly",
    "start": "2550559",
    "end": "2557559"
  },
  {
    "text": "calls the underlying search values and you can do it for inex of any and there's accept and there's do you want to find the thing in or do you want to",
    "start": "2557559",
    "end": "2563640"
  },
  {
    "text": "find any that's not in the thing and it's used we replatted our HP parsers every part that we have in the BCL got",
    "start": "2563640",
    "end": "2570520"
  },
  {
    "text": "repl on top of this Jason Jason regular HP regular expression everything got",
    "start": "2570520",
    "end": "2576680"
  },
  {
    "text": "replaced thing it's it's insanely efficient all right 16 minutes um let's",
    "start": "2576680",
    "end": "2584480"
  },
  {
    "text": "see what we should jump what we should jump that's actually interesting this is two this is to anyone does like hatching of stuff where",
    "start": "2584480",
    "end": "2591839"
  },
  {
    "text": "you like shot6 and you pass in the bite array there are no I think this is not new and it potentially but there are one",
    "start": "2591839",
    "end": "2598880"
  },
  {
    "text": "shot hash functions where you pass in the entire blob a static function and you just can say like do the thing and",
    "start": "2598880",
    "end": "2605160"
  },
  {
    "text": "come back and give me by um and there's overloads for passing in a span and right into a span there's overloads for",
    "start": "2605160",
    "end": "2611680"
  },
  {
    "text": "like um passing in just a blob and getting on a r that's less efficient Etc um there's a new interface this is a",
    "start": "2611680",
    "end": "2619839"
  },
  {
    "text": "super lowlevel API if you need to format primitive types to a span a utf8 span",
    "start": "2619839",
    "end": "2627280"
  },
  {
    "text": "you know how you can do um int. parse and you can pass in a string so inet",
    "start": "2627280",
    "end": "2634520"
  },
  {
    "text": "seven or six we added support for passing in a a utf8 um Char so you don't",
    "start": "2634520",
    "end": "2640680"
  },
  {
    "text": "have to allocate a string to parse it you can say like given this big piece of text um find the number 200 in this in",
    "start": "2640680",
    "end": "2647040"
  },
  {
    "text": "this text and then get a sub spam if they allocating and then parse the in right no allocations that was done for",
    "start": "2647040",
    "end": "2654280"
  },
  {
    "text": "chars but not for bytes or is it cars it's chars chars chars and bytes I agree",
    "start": "2654280",
    "end": "2661520"
  },
  {
    "text": "um so now we have this new interface that you can that we Implement on all of our primitive types",
    "start": "2661520",
    "end": "2668880"
  },
  {
    "text": "lots of in there it is well that's the old one span formattable and then there's utf8 span formattable know it is",
    "start": "2669319",
    "end": "2675359"
  },
  {
    "text": "well you had to keep going I think or it could be I UTF span Parable because it's the other typ right there's two sides",
    "start": "2675359",
    "end": "2682119"
  },
  {
    "text": "like am I pass utfa or am I writing out to utfa right so there's there's produced me this value as a bite aray or charay",
    "start": "2682119",
    "end": "2692559"
  },
  {
    "text": "or string and then there's T given an input charay or string or bite array",
    "start": "2692559",
    "end": "2698240"
  },
  {
    "text": "produce me the actual value right so just these two interfaces to go back and forth between between we had one in one release not the other we did one side",
    "start": "2698240",
    "end": "2705119"
  },
  {
    "text": "and we didn't do the other side now we have both sides and it's really useful if like me you've got a little class",
    "start": "2705119",
    "end": "2710400"
  },
  {
    "text": "Library you get package that you want to write out really efficient razor templates to a utf8 stream now I can",
    "start": "2710400",
    "end": "2717800"
  },
  {
    "text": "just use this to do it rather than doing it manually that's awesome yeah great um extensions let's talk about some of the",
    "start": "2717800",
    "end": "2723200"
  },
  {
    "text": "big features in extensions that you may have seen keydi is anyone use keydi this a big one this is a huge feature I think",
    "start": "2723200",
    "end": "2730800"
  },
  {
    "text": "people either love or hate it or hate it I think it should not exist and we're awful for doing it I mean we held it for",
    "start": "2730800",
    "end": "2738000"
  },
  {
    "text": "a long time so we held out so long that we reinvented it numerous times in the",
    "start": "2738000",
    "end": "2743599"
  },
  {
    "text": "subsystems that needed it so you might have heard of named options which is built on options and that's because we",
    "start": "2743599",
    "end": "2749920"
  },
  {
    "text": "didn't have keydi so we had to have a different version of options so that you could name them it is insanely useful ke",
    "start": "2749920",
    "end": "2755520"
  },
  {
    "text": "the ey if you haven't there's now overloads for you know adding services so let's add scope",
    "start": "2755520",
    "end": "2762960"
  },
  {
    "text": "there's add key sculpt add key Singleton add key trans and the only difference is",
    "start": "2762960",
    "end": "2768920"
  },
  {
    "text": "you can pass in a key which can be any object and you can then call get required service for an interface",
    "start": "2768920",
    "end": "2775319"
  },
  {
    "text": "passing that key so I can say add me and I logger um and use the key FU oh my",
    "start": "2775319",
    "end": "2782760"
  },
  {
    "text": "gosh",
    "start": "2782760",
    "end": "2785760"
  },
  {
    "text": "lost his [Laughter]",
    "start": "2787800",
    "end": "2794040"
  },
  {
    "text": "M loer thing just a fate Locker just to show the the",
    "start": "2794040",
    "end": "2800920"
  },
  {
    "text": "idea yeah it's not working right so I can say the big",
    "start": "2801440",
    "end": "2807359"
  },
  {
    "text": "benefit is you get to use the same interface and not change interface which is super important if you don't own the",
    "start": "2807359",
    "end": "2813000"
  },
  {
    "text": "interface so let's say you have a thing that came from somewhere else H be client and you want to get a different",
    "start": "2813000",
    "end": "2818720"
  },
  {
    "text": "HB client based on the target out back backend um yep U so I have one called",
    "start": "2818720",
    "end": "2825240"
  },
  {
    "text": "open AA now I can have ITB client for open AA I can have one for different things which of course you can do because we wrote around it this didn't",
    "start": "2825240",
    "end": "2832960"
  },
  {
    "text": "exist so we wrote A Thing exactly but now so this lets you use the da container as a factory without having to",
    "start": "2832960",
    "end": "2840079"
  },
  {
    "text": "work with your own Factory right for things that have both an an interface type and strings or sorry and a key",
    "start": "2840079",
    "end": "2847319"
  },
  {
    "text": "right you might want to if you're using something like Dapper the data access Library not the distributed systems",
    "start": "2847319",
    "end": "2853599"
  },
  {
    "text": "anyway um you might want to input like a SQL connection into di like a SQL connection Factory but maybe you've got",
    "start": "2853599",
    "end": "2859400"
  },
  {
    "text": "two database servers how would you do that today well you can't you can't put SQL Connection in twice you you have to",
    "start": "2859400",
    "end": "2865920"
  },
  {
    "text": "wrap it with either a wrapper type for each one or you'd have to create your own Factory type that you pass a string",
    "start": "2865920",
    "end": "2871079"
  },
  {
    "text": "into or some type of key to get out the one that you want right now you can just and the is a factory so you should be",
    "start": "2871079",
    "end": "2876880"
  },
  {
    "text": "able to use it like a as a factory so you can say yes whenever you add an a well if",
    "start": "2876880",
    "end": "2886160"
  },
  {
    "text": "you call add key blah you can name the key you want to name for any clients you",
    "start": "2886160",
    "end": "2891839"
  },
  {
    "text": "you can call any of the Aspire components multiple times and we'll add like different clients with different",
    "start": "2891839",
    "end": "2897240"
  },
  {
    "text": "settings um and they vary by Key by key survive so yeah for that one novel thing",
    "start": "2897240",
    "end": "2902920"
  },
  {
    "text": "that I I've been trying to do um with keydi is do multi-tenant di using a key",
    "start": "2902920",
    "end": "2909680"
  },
  {
    "text": "as a tenant ID yep so you can have the same Services I I don't know I blah provider but sculp for tenant by using",
    "start": "2909680",
    "end": "2917200"
  },
  {
    "text": "the tenant ID as the actual key so you can you can build pretty insane narly things by having this key the whereas",
    "start": "2917200",
    "end": "2923400"
  },
  {
    "text": "today most people Implement that by literally overriding the entire entire collection per whatever like per request",
    "start": "2923400",
    "end": "2930400"
  },
  {
    "text": "they figure out who the tenant is and then they go well I'll create a new container from my collection just for",
    "start": "2930400",
    "end": "2935599"
  },
  {
    "text": "this tenant Orchard yeah ult for example yeah is it is it",
    "start": "2935599",
    "end": "2943359"
  },
  {
    "text": "better is a fact it's exactly that yes it is I think that's the the point um",
    "start": "2943480",
    "end": "2949280"
  },
  {
    "text": "the point is before you could do the same thing if you built your own Factory your own bort Factory for every single",
    "start": "2949280",
    "end": "2955200"
  },
  {
    "text": "interface type this is just the container is the factory and here's and here's how you get things from it and",
    "start": "2955200",
    "end": "2962040"
  },
  {
    "text": "you get the whole benefit of the performance and stuff that it does and it covers so y cool really cool feature",
    "start": "2962040",
    "end": "2968280"
  },
  {
    "text": "um we don't have lazy yet no and we haven't updated all the sub ever I'm",
    "start": "2968280",
    "end": "2973599"
  },
  {
    "text": "kidding should we don't use key Services we didn't retrofit ke Services into all yet we're trying to use it for new",
    "start": "2973599",
    "end": "2980079"
  },
  {
    "text": "features that we built in eight but there's still work to go to go back and like retrofit it so all right 10 minutes",
    "start": "2980079",
    "end": "2985599"
  },
  {
    "text": "I'm G to jump around let crazy know yeah Jump Around um config swich generator this one is I don't have to show it when",
    "start": "2985599",
    "end": "2991920"
  },
  {
    "text": "you do something like this today which everyone does I've seen you do it seen your code on get I've seen it options so",
    "start": "2991920",
    "end": "3001000"
  },
  {
    "text": "here is your um app app settings app options whatever",
    "start": "3001000",
    "end": "3007079"
  },
  {
    "text": "y let's call this um key in key client",
    "start": "3007079",
    "end": "3015280"
  },
  {
    "text": "secret password can't be a",
    "start": "3015880",
    "end": "3021599"
  },
  {
    "text": "string yeah thank you almost oh close close",
    "start": "3021599",
    "end": "3028920"
  },
  {
    "text": "close so I'm going to bind this op what is going on here what are you",
    "start": "3028920",
    "end": "3035920"
  },
  {
    "text": "about oh gosh okay you can do stuff like this and pass in a config",
    "start": "3035920",
    "end": "3043359"
  },
  {
    "text": "section no options I I have to call get Section app",
    "start": "3043359",
    "end": "3050760"
  },
  {
    "text": "options. get right you can do this or you can bind bind by by by making an options and then calling bind passing it",
    "start": "3050760",
    "end": "3057079"
  },
  {
    "text": "in very common pattern when you're doing um ASP net core right right this does",
    "start": "3057079",
    "end": "3062920"
  },
  {
    "text": "not work in Native aot what happens under the covers is we have to look at this config section look at this type",
    "start": "3062920",
    "end": "3070040"
  },
  {
    "text": "reflect on all the properties and then poke stuff into Fields using reflection right so recurse find the object graph",
    "start": "3070040",
    "end": "3076839"
  },
  {
    "text": "and like do the the thing you do normally the sarch generator lets us take this and do it at compile time and",
    "start": "3076839",
    "end": "3084040"
  },
  {
    "text": "we magically use a feature in C 12 interceptors that is amazing that will",
    "start": "3084040",
    "end": "3090799"
  },
  {
    "text": "sneakily replace this line of code with one that is Cen at compile time so we'll",
    "start": "3090799",
    "end": "3096640"
  },
  {
    "text": "grab your object and we will say this is a get method and it takes app options",
    "start": "3096640",
    "end": "3102319"
  },
  {
    "text": "and it will generate a method that is an overload that is the exact mirror of this function and it will spill all the",
    "start": "3102319",
    "end": "3108200"
  },
  {
    "text": "code that does the reflection at compile time so super efficient um and we turn it on by default when you turn on aot",
    "start": "3108200",
    "end": "3114880"
  },
  {
    "text": "but it's usable without aot as well so if you want to turn it on there I believe is an entry in",
    "start": "3114880",
    "end": "3121960"
  },
  {
    "text": "configuration let me find it Source no not",
    "start": "3121960",
    "end": "3128000"
  },
  {
    "text": "Comm there's one for com too if you want to use Comm Ms build property right in your",
    "start": "3128000",
    "end": "3134040"
  },
  {
    "text": "project file let's make this compile first so you're not shouting at me",
    "start": "3134040",
    "end": "3139200"
  },
  {
    "text": "there's this in theory that would be a little",
    "start": "3139200",
    "end": "3144400"
  },
  {
    "text": "bit quicker too right on Startup less refle should be yes no reflection yes",
    "start": "3144400",
    "end": "3149440"
  },
  {
    "text": "less none being less that F12 works is it on is it working is",
    "start": "3149440",
    "end": "3159119"
  },
  {
    "text": "it doing stuff I can't tell said succeeded Move On You Gotta",
    "start": "3159119",
    "end": "3165960"
  },
  {
    "text": "Move On It Works promise promise promise there never been ER all right so seven",
    "start": "3165960",
    "end": "3171559"
  },
  {
    "text": "minutes we can do IH hosted has anyone seen the I hosted life cycle service",
    "start": "3171559",
    "end": "3176640"
  },
  {
    "text": "it's pretty important everyone if you Rite a hosted service you have a thing that you want to run in the background of of an asore app or a worker service",
    "start": "3176640",
    "end": "3183760"
  },
  {
    "text": "so you write a class you add it to di it implements I hosted service and then it",
    "start": "3183760",
    "end": "3189200"
  },
  {
    "text": "gets started up and called when the app starts up and it gets called when the app shuts down we added more life cycle",
    "start": "3189200",
    "end": "3194599"
  },
  {
    "text": "events because sometimes you want to be able to say yes I want to get called when the app is starting but I don't want you to continue starting the app",
    "start": "3194599",
    "end": "3201160"
  },
  {
    "text": "until I finished right whereas today I think I hosted service before that there was only one hook and it would run the",
    "start": "3201160",
    "end": "3206599"
  },
  {
    "text": "in parallel and there was really no way to kind of compose and change the order so we added more life cycle hooks so now you can get called back you can",
    "start": "3206599",
    "end": "3212799"
  },
  {
    "text": "Implement both interfaces because that does it for you um and you get more methods started start starting started",
    "start": "3212799",
    "end": "3219400"
  },
  {
    "text": "it's not in like Chron chronological order it should be like yeah starting started and then stopping and stopped",
    "start": "3219400",
    "end": "3225559"
  },
  {
    "text": "yeah fun story we couldn't agree on having multiple of these um so what what",
    "start": "3225559",
    "end": "3230920"
  },
  {
    "text": "happened was people wanted to have different hostage Services depend on each other right that were desperately",
    "start": "3230920",
    "end": "3236480"
  },
  {
    "text": "different different teams built Services I want to run before that team service that's hard to do so we just built this",
    "start": "3236480",
    "end": "3242640"
  },
  {
    "text": "thing this thing instead so you get more chances to run at different phases right so now at least you can figure out if",
    "start": "3242640",
    "end": "3248880"
  },
  {
    "text": "they're running on that one I can run the one before that or the one after that this use communic classic life cycle problem yeah very difficult",
    "start": "3248880",
    "end": "3255599"
  },
  {
    "text": "awesome let's amp it up okay so let's look at some boring I'm kidding not boring stuff no so just just to finish",
    "start": "3255599",
    "end": "3261920"
  },
  {
    "text": "it the one reason I wanted to use that one is anyone ever written code to pre-warm up a cach in in their aset core",
    "start": "3261920",
    "end": "3267559"
  },
  {
    "text": "app and they would like the app to not start until that cash is warmed up this is what you use okay before start we",
    "start": "3267559",
    "end": "3274920"
  },
  {
    "text": "should call it before start maybe starting or before let's not black shadow the name now we shipped it already damn",
    "start": "3274920",
    "end": "3281480"
  },
  {
    "text": "it we ship a feature by the just I'll rant there's a there's a feature called I service provider is service can",
    "start": "3281480",
    "end": "3290520"
  },
  {
    "text": "you it's embarrassing it's embarrassing what were we thinking that was a placeholder name it was",
    "start": "3290520",
    "end": "3296920"
  },
  {
    "text": "and then we looked away and it became the real name everyone tapped out if you do",
    "start": "3296920",
    "end": "3303760"
  },
  {
    "text": "anything on the CLI and.net you can actually get Jason back from the command",
    "start": "3303760",
    "end": "3309040"
  },
  {
    "text": "line oh my gosh this is like amazing feature I forgot about this one so it it it might look super lame but look at",
    "start": "3309040",
    "end": "3318000"
  },
  {
    "text": "this so does everyone understand what that means what that did okay so Ms build is an engine it goes through",
    "start": "3320160",
    "end": "3326640"
  },
  {
    "text": "phases right you have this evaluation phase and then this execution phase if you want to coordinate or orchestrate or",
    "start": "3326640",
    "end": "3334160"
  },
  {
    "text": "get Ms build thing with something else right you want to say I want to do this thing and then I want to know what the",
    "start": "3334160",
    "end": "3340920"
  },
  {
    "text": "value of that thing was inside the orchestration so that I can then take that and run a different script with",
    "start": "3340920",
    "end": "3346039"
  },
  {
    "text": "that value before you would have to write your own Target compose it into",
    "start": "3346039",
    "end": "3351079"
  },
  {
    "text": "the build like past targets da da have your target evaluate at the right time and then output Jason file or something",
    "start": "3351079",
    "end": "3357640"
  },
  {
    "text": "that you know how to read ask me how I know we did this in our own tools this is how like the razor compiler and stuff",
    "start": "3357640",
    "end": "3363000"
  },
  {
    "text": "work now it's just a generic feature in EMS build you say I want to run this target publish in this case and then",
    "start": "3363000",
    "end": "3368440"
  },
  {
    "text": "just get this property you can also get items I know so if you want to enumerate all the things like all the compile",
    "start": "3368440",
    "end": "3374119"
  },
  {
    "text": "items get all the all the references out you can say output items and it'll give you a list if I recall y let me try this",
    "start": "3374119",
    "end": "3382160"
  },
  {
    "text": "one it's super super cool do let's try it",
    "start": "3382160",
    "end": "3388240"
  },
  {
    "text": "how many of you have pared the XML nms build yeah which of course is generally",
    "start": "3388839",
    "end": "3395880"
  },
  {
    "text": "wrong doesn't work because it's not static right it can change it's an engine when you execute it look at that",
    "start": "3395880",
    "end": "3401839"
  },
  {
    "text": "Jason no less amazing beautiful hopefully you've all seen donet container publish you can publish a",
    "start": "3401839",
    "end": "3407240"
  },
  {
    "text": "container image to the local do demon I'll just do a net",
    "start": "3407240",
    "end": "3412799"
  },
  {
    "text": "publish this is the old one it still works but yeah that one works too so you don't have to have Docker files or",
    "start": "3412799",
    "end": "3419240"
  },
  {
    "text": "Docker installed you you can kind of just build a container image natively in net your for slash is offending me that",
    "start": "3419240",
    "end": "3425319"
  },
  {
    "text": "could just be a dash too to bad be a dash pilot said it's better that",
    "start": "3425319",
    "end": "3431200"
  },
  {
    "text": "wasn't I I believe over you what does yes the get property yes",
    "start": "3431200",
    "end": "3438400"
  },
  {
    "text": "they absolutely because it literally runs the target as it would normally have run and then just outputs whatever",
    "start": "3438400",
    "end": "3443480"
  },
  {
    "text": "you asked for",
    "start": "3443480",
    "end": "3446880"
  },
  {
    "text": "oh publish doesn't",
    "start": "3450680",
    "end": "3454280"
  },
  {
    "text": "file oh if you're doing a Docker base build you have to copy from the host into the Container so you can do the",
    "start": "3465440",
    "end": "3470480"
  },
  {
    "text": "build and then copy out yeah well this there's no Docker file this container build is Magic this is file tar API to",
    "start": "3470480",
    "end": "3477720"
  },
  {
    "text": "produce the image format there is no Docker involved or files involv to be very clear this is for this is for the",
    "start": "3477720",
    "end": "3483280"
  },
  {
    "text": "circumstance where you have no need to use Docker locally just to build like I have all the things I need I just need",
    "start": "3483280",
    "end": "3489240"
  },
  {
    "text": "an image out of my build I need a Docker container out of it now you don't need a Docker file to do that you can just say",
    "start": "3489240",
    "end": "3495480"
  },
  {
    "text": "net publish make me a container okay and so if you're anyone who saw the Aspire",
    "start": "3495480",
    "end": "3500760"
  },
  {
    "text": "demo this morning where he ran a to publish to Azure it used both of these features in order to get the container",
    "start": "3500760",
    "end": "3507680"
  },
  {
    "text": "out it evaluated Ms build stuff to get a Json file then use that to compose the rest of the steps including publishing",
    "start": "3507680",
    "end": "3513200"
  },
  {
    "text": "directly to a container registry there's a feature where you can get the actual container file the tar GC archive for a",
    "start": "3513200",
    "end": "3521400"
  },
  {
    "text": "container image like I can I copy and do one containers are not magic they're",
    "start": "3521400",
    "end": "3526920"
  },
  {
    "text": "just a format a file format I didn't have to do the crazy thing let me just edit NOP super top",
    "start": "3526920",
    "end": "3535799"
  },
  {
    "text": "secret super top secret delete delete delete that's fine",
    "start": "3535799",
    "end": "3543200"
  },
  {
    "text": "it's all it's all temporary this is not a Windows thing is it let's see if this",
    "start": "3543200",
    "end": "3549319"
  },
  {
    "text": "works it Miss build a normalize the pathway so you're good my God so I have this thing in",
    "start": "3549359",
    "end": "3555280"
  },
  {
    "text": "images so if you want to run a bunch of tools on the container before it gets published to the registries you want to",
    "start": "3555280",
    "end": "3561319"
  },
  {
    "text": "run like security scanners or whatever you want to run on these images you can produce the image before it gets",
    "start": "3561319",
    "end": "3567119"
  },
  {
    "text": "published to run more steps on it beautiful natively and on it there's no time left there's a ton of features",
    "start": "3567119",
    "end": "3572960"
  },
  {
    "text": "let's just look at a slide and I'll just smile there's all the aset stuff we like thank you very much Jim rendering three",
    "start": "3572960",
    "end": "3581599"
  },
  {
    "text": "two that was good o I forgot about that one too it's fine I'm looking at this",
    "start": "3581720",
    "end": "3586920"
  },
  {
    "text": "and I'm going oh that's right I forgot we did that that's awesome eye authorization requirement data it's good that's really cool did we dock that",
    "start": "3586920",
    "end": "3592839"
  },
  {
    "text": "really well we did okay go and look up for that one if you've ever done any custom authorization policy stuff in EET",
    "start": "3592839",
    "end": "3600039"
  },
  {
    "text": "this will make your life easier go look at our authorization requirement data yeah generic attributes we updated all the attributes to be generic I forgot",
    "start": "3600039",
    "end": "3606359"
  },
  {
    "text": "about that too we did so much cool stuff this last year Polish Polish it's beautiful all right",
    "start": "3606359",
    "end": "3612280"
  },
  {
    "text": "awesome thanks all any questions ask a question the end of the day yeah we're",
    "start": "3612280",
    "end": "3617720"
  },
  {
    "text": "done what do you want to know nothing I'll keep quing",
    "start": "3617720",
    "end": "3626440"
  },
  {
    "text": "oh on the slide here improve debugging yeah that's a really good feature so we had a one of our developers James Newton",
    "start": "3628200",
    "end": "3634440"
  },
  {
    "text": "King you know the creator of jason. we call him Jason call him Jason Jason King",
    "start": "3634440",
    "end": "3640160"
  },
  {
    "text": "he he he got he got inspired one day and just went off and like updated all of",
    "start": "3640160",
    "end": "3645839"
  },
  {
    "text": "the core types to have better debugger display visualizers in in in Visual",
    "start": "3645839",
    "end": "3651039"
  },
  {
    "text": "Studio or the buggers that support that and so but yeah yeah",
    "start": "3651039",
    "end": "3656440"
  },
  {
    "text": "so once you he was so now if you Tak in like H context and you want to look at",
    "start": "3656440",
    "end": "3662000"
  },
  {
    "text": "the context while debugging usually today what would you do you go down to like the locals window the watch window then you'd scroll to get the most basic",
    "start": "3662000",
    "end": "3668400"
  },
  {
    "text": "information now you can just like hover over it and it tells you look at that look at that tells you the path tells",
    "start": "3668400",
    "end": "3673760"
  },
  {
    "text": "you the 200 AK the St is really really cool it's huge and he he changed types like in the BCL he changed types in as",
    "start": "3673760",
    "end": "3680559"
  },
  {
    "text": "core and EF look at the connection look at the connection look at the top it's giving you the connection ID the IP addresses by",
    "start": "3680559",
    "end": "3687039"
  },
  {
    "text": "number of features oh it's great a lot it's a lot of stuff in there we should trim that that's what that is features 26",
    "start": "3687039",
    "end": "3695359"
  },
  {
    "text": "like he tried here but we can we can't do anything items request request look",
    "start": "3695359",
    "end": "3700400"
  },
  {
    "text": "at all this cookies pie scheme yeah very nice very cool",
    "start": "3700400",
    "end": "3708400"
  },
  {
    "text": "yeah anyone else everyone's tired everyone's tired",
    "start": "3708400",
    "end": "3713440"
  },
  {
    "text": "end of the day get it say",
    "start": "3713440",
    "end": "3718960"
  },
  {
    "text": "what ohing the big big big feature is form binding so before we had in donet 7 you",
    "start": "3718960",
    "end": "3727359"
  },
  {
    "text": "can do this you can do from form and you could say like string s and this would if you did a form post it would bind",
    "start": "3727359",
    "end": "3734319"
  },
  {
    "text": "this field all right this is kind of lame you couldn't do objects you couldn't do classes so you couldn't do",
    "start": "3734319",
    "end": "3739559"
  },
  {
    "text": "something like I have a form that's like person form go co pilot go",
    "start": "3739559",
    "end": "3746640"
  },
  {
    "text": "go yes do my bidding AI this works",
    "start": "3746640",
    "end": "3753160"
  },
  {
    "text": "now and it has antiforgery support thank you Phil thanks for the CL it is not MVC model binding it's not like a super",
    "start": "3753160",
    "end": "3759680"
  },
  {
    "text": "complicated list that you can dynamically change it is what you would have written by hand to make that work like it's it's that right I think what's",
    "start": "3759680",
    "end": "3766200"
  },
  {
    "text": "what's insane is we essentially one of our Engineers went off and wrote an",
    "start": "3766200",
    "end": "3771400"
  },
  {
    "text": "entire serializer to make this work like in a couple weeks he's like oh I have a thing",
    "start": "3771400",
    "end": "3776640"
  },
  {
    "text": "huh where so there it ISS and it's shared by the new blazer features so if",
    "start": "3776640",
    "end": "3782799"
  },
  {
    "text": "you're using Blazer eight and you're doing form handling in Blazer 8 like not using server interactive or client",
    "start": "3782799",
    "end": "3788760"
  },
  {
    "text": "interactive rendering you're just doing normal Blazer in Blazer 8 um it's using the exact same form binding under the",
    "start": "3788760",
    "end": "3795760"
  },
  {
    "text": "covers the question is what if the property was an INT but you pass a string thanks for coming well",
    "start": "3795760",
    "end": "3802240"
  },
  {
    "text": "everything's strings but you mean a string that's an in can't be passed it explodes it",
    "start": "3802240",
    "end": "3807920"
  },
  {
    "text": "explodes get pass error you'll give an error yeah get a",
    "start": "3807920",
    "end": "3813799"
  },
  {
    "text": "400 there's no model State no model mining there's no model no model State",
    "start": "3813799",
    "end": "3819359"
  },
  {
    "text": "it's efficient it's efficient Phil model state is expensive it's very",
    "start": "3819359",
    "end": "3824839"
  },
  {
    "text": "expensive this this can't go here you get 400 cuz you sent me a bad",
    "start": "3824839",
    "end": "3831960"
  },
  {
    "text": "value it's your 400 your fault 500 my fault",
    "start": "3831960",
    "end": "3837720"
  },
  {
    "text": "of course not no because that would be disclosure disclosure you could write a filter we",
    "start": "3839240",
    "end": "3844640"
  },
  {
    "text": "got our BAS covered Rel security yeah yeah",
    "start": "3844640",
    "end": "3852720"
  }
]