[
  {
    "text": "foreign welcome everybody come on in grab a seat in this session we'll be talking about",
    "start": "539",
    "end": "7639"
  },
  {
    "text": "consuming graphql apis in c-sharp thanks so much for joining me today my name is",
    "start": "7639",
    "end": "14340"
  },
  {
    "text": "Brandon Minnick and graphql is a very very special favorite",
    "start": "14340",
    "end": "20939"
  },
  {
    "text": "topic of mine and I'm so glad you're all here with me because I was in a similar",
    "start": "20939",
    "end": "26039"
  },
  {
    "text": "seat as you just a couple years ago I was at a con conference just like this",
    "start": "26039",
    "end": "31679"
  },
  {
    "text": "where I sat in the session about graphql and immediately fell in love with it I learned about it and found out that this",
    "start": "31679",
    "end": "39180"
  },
  {
    "text": "is something this is exactly what I needed because I'm I'm a mobile app developer I make IOS and Android apps in",
    "start": "39180",
    "end": "46200"
  },
  {
    "text": "c-sharp using xamarin and now.net Maui and as a mobile app developer one of our",
    "start": "46200",
    "end": "53399"
  },
  {
    "text": "goals is to make sure that we don't use too much of your cellular data that we",
    "start": "53399",
    "end": "58980"
  },
  {
    "text": "don't use too much of your CPU and burn through your battery because well that's a that's a really good way to get a one",
    "start": "58980",
    "end": "65040"
  },
  {
    "text": "star review from from one of your users and so when I first learned about graphql and",
    "start": "65040",
    "end": "71400"
  },
  {
    "text": "found out that that's exactly what it's made for it's literally made so that we can make",
    "start": "71400",
    "end": "77100"
  },
  {
    "text": "less round trips back and forth from the client to the server so that we don't have to pull down data from the server",
    "start": "77100",
    "end": "84840"
  },
  {
    "text": "that we don't need and just throw it away because with graphql we can do everything in one round trip with",
    "start": "84840",
    "end": "90000"
  },
  {
    "text": "graphql we get exactly the data we ask for no more no less and so on the client",
    "start": "90000",
    "end": "96119"
  },
  {
    "text": "side I love it because it makes my apps faster it makes my my users happier hopefully that's what gives me more",
    "start": "96119",
    "end": "102360"
  },
  {
    "text": "five-star reviews and then even on the server side if you're sending data that the client",
    "start": "102360",
    "end": "108420"
  },
  {
    "text": "doesn't need well now you're also wasting bandwidth spending more money on your cloud services so graphql actually",
    "start": "108420",
    "end": "115259"
  },
  {
    "text": "benefits both sides and that's what we're going to talk about today so uh before we get rolling I want to point",
    "start": "115259",
    "end": "120899"
  },
  {
    "text": "out a couple links you'll see these at the bottom of just about every slide today here on the bottom left that is my",
    "start": "120899",
    "end": "127439"
  },
  {
    "text": "Twitter handle you can find me at the code traveler and if you have any questions if we don't get a chance to",
    "start": "127439",
    "end": "133080"
  },
  {
    "text": "chat later in the conference feel free to reach out to me I love talking c-sharp.net graphql if you want to chat",
    "start": "133080",
    "end": "140400"
  },
  {
    "text": "about xamarin Maui iOS Android that's what I'm there for feel free to reach out anytime and then here on the bottom",
    "start": "140400",
    "end": "147420"
  },
  {
    "text": "right this is a web page that I put together just for us today just for this session and this is where you can find all the",
    "start": "147420",
    "end": "155099"
  },
  {
    "text": "resources so don't worry about memorizing anything don't worry about having to take pictures and member",
    "start": "155099",
    "end": "160800"
  },
  {
    "text": "slides later because as long as you grab this link that's where you can find the slides that's where you can find the open",
    "start": "160800",
    "end": "167280"
  },
  {
    "text": "source sample app that we're going to play around with today the completed version is already posted on GitHub and",
    "start": "167280",
    "end": "173220"
  },
  {
    "text": "I've also included a bunch of links to learn more about graphql if you want to continue on in this journey which I hope",
    "start": "173220",
    "end": "179519"
  },
  {
    "text": "we all do so what is graphql well",
    "start": "179519",
    "end": "184980"
  },
  {
    "text": "quite simply it's a query language for your API so the way graphql works is the",
    "start": "184980",
    "end": "193379"
  },
  {
    "text": "client tells the server exactly what we want and then the server gives us that",
    "start": "193379",
    "end": "200159"
  },
  {
    "text": "exactly back whereas with rest it's kind of the opposite right with rest we build",
    "start": "200159",
    "end": "206159"
  },
  {
    "text": "a server and we say this is what the rest endpoint is going to get back to you so it doesn't matter if you want",
    "start": "206159",
    "end": "214260"
  },
  {
    "text": "five objects we're still gonna give you all ten of them and then on our side as",
    "start": "214260",
    "end": "219959"
  },
  {
    "text": "client developers we just end up throwing those away which is a shame um so graphql kind of takes that rest",
    "start": "219959",
    "end": "225360"
  },
  {
    "text": "Paradigm and turns it on his head and says why don't we let the client tell us what they want and then we'll just give",
    "start": "225360",
    "end": "231780"
  },
  {
    "text": "them that data but to really understand graphql I think it's important to know",
    "start": "231780",
    "end": "236879"
  },
  {
    "text": "where it came from and graphql was actually invented back in 2012 by",
    "start": "236879",
    "end": "241980"
  },
  {
    "text": "Facebook and if you remember 2012 and if you had a Facebook account you probably",
    "start": "241980",
    "end": "247860"
  },
  {
    "text": "downloaded the Facebook app uh this was right around the time they released their first Native app and when it first",
    "start": "247860",
    "end": "254700"
  },
  {
    "text": "came out it was really bad uh they got tons and tons of one and two star reviews because",
    "start": "254700",
    "end": "262260"
  },
  {
    "text": "users were complaining that the app was using too much of their cellular data that the app would get really hot when",
    "start": "262260",
    "end": "268380"
  },
  {
    "text": "they used it because it was really churning through the processor it was using too much memory and when you think",
    "start": "268380",
    "end": "274620"
  },
  {
    "text": "about it it makes a lot of sense because if we look here this is just a screenshot from my Facebook app but look",
    "start": "274620",
    "end": "280800"
  },
  {
    "text": "at all the data that this app loads just when you launch it like I didn't do anything I just opened the app and all",
    "start": "280800",
    "end": "287220"
  },
  {
    "text": "of a sudden I'm greeted with all this multimedia with videos with images I have a whole timeline for status updates",
    "start": "287220",
    "end": "294840"
  },
  {
    "text": "from my friends and their profile pictures their names the date and time they posted it and it's not just your",
    "start": "294840",
    "end": "301560"
  },
  {
    "text": "timeline that loads the notifications tab also loads so you get in all your notification data about",
    "start": "301560",
    "end": "307800"
  },
  {
    "text": "uh upcoming events mutual friends people you may know and their profile pictures",
    "start": "307800",
    "end": "313320"
  },
  {
    "text": "and our mutual friends count and so if you think about this in terms of",
    "start": "313320",
    "end": "319080"
  },
  {
    "text": "retrieving data from a rest API it ends up looking something like this",
    "start": "319080",
    "end": "324240"
  },
  {
    "text": "where when the app first launches it already knows who I am so it can call",
    "start": "324240",
    "end": "329460"
  },
  {
    "text": "facebook.com user slash ID and get the information about me so it can get my",
    "start": "329460",
    "end": "334800"
  },
  {
    "text": "updated profile picture maybe I updated my my likes and dislikes on my profile",
    "start": "334800",
    "end": "340320"
  },
  {
    "text": "whatever it'll grab all that and then once it has that information it's going to make a couple more API requests",
    "start": "340320",
    "end": "346979"
  },
  {
    "text": "because once it knows about me and who I am and that I'm confirms I'm authenticated then it can go find my uh",
    "start": "346979",
    "end": "354000"
  },
  {
    "text": "upcoming events it can go find my friend's birthdays it can go find mutual friends but even once those responses",
    "start": "354000",
    "end": "361620"
  },
  {
    "text": "come back it's Gotta make another round trip to go get more information because for like mutual friends okay now it",
    "start": "361620",
    "end": "367440"
  },
  {
    "text": "knows the IDS of my mutual friends but it's got to do another round trip to go get their profile picture uh their name",
    "start": "367440",
    "end": "374820"
  },
  {
    "text": "and so what we end up seeing or what Facebook ended up seeing back in the day",
    "start": "374820",
    "end": "379860"
  },
  {
    "text": "was this Cascade did API calls where we would start with one that when that",
    "start": "379860",
    "end": "386580"
  },
  {
    "text": "comes back it would trigger multiple more when those would come back they would trigger multiple more and they",
    "start": "386580",
    "end": "392340"
  },
  {
    "text": "were seeing dozens upwards of hundreds of API requests being made as soon as the user launches the app so it was",
    "start": "392340",
    "end": "399960"
  },
  {
    "text": "pretty easy to figure out why those bad reviews were flowed in because sure they're using a lot of data all these",
    "start": "399960",
    "end": "406860"
  },
  {
    "text": "round trips they're waiting on the previous one so you know data can only travel so fast literally limited by the",
    "start": "406860",
    "end": "413039"
  },
  {
    "text": "speed of light and the location of where you are and where the server is so if the server happened to be on the other",
    "start": "413039",
    "end": "418560"
  },
  {
    "text": "side of the world and it takes 600 milliseconds to get there and back well we gotta wait 600 milliseconds before we",
    "start": "418560",
    "end": "424319"
  },
  {
    "text": "can make that next API request and then wait another 600 milliseconds before the next API request and so you can really",
    "start": "424319",
    "end": "430080"
  },
  {
    "text": "start to see how the load times could be slow the cellular data usage can be high",
    "start": "430080",
    "end": "435660"
  },
  {
    "text": "and so the the engineers at Facebook said there's got to be a better way",
    "start": "435660",
    "end": "440940"
  },
  {
    "text": "and that's when they came up with the idea for graphql where they took all of those rest apis and consolidate them",
    "start": "440940",
    "end": "447960"
  },
  {
    "text": "down into one graphql API now quick caveat just in case anybody",
    "start": "447960",
    "end": "454319"
  },
  {
    "text": "out there is a little uneasy that we're talking about graphql and we're talking about Facebook yes Facebook invented it",
    "start": "454319",
    "end": "460740"
  },
  {
    "text": "but they no longer own it Facebook has essentially donated the technology to",
    "start": "460740",
    "end": "466319"
  },
  {
    "text": "the global good to developers like us there's a whole graphql Foundation that now exists the graphql foundation is",
    "start": "466319",
    "end": "473460"
  },
  {
    "text": "what owns the graphql Technologies they have a steering committee with people from all over the world who are",
    "start": "473460",
    "end": "479880"
  },
  {
    "text": "constantly updating and creating new graphql specs every year so if you're not a fan of Facebook",
    "start": "479880",
    "end": "485759"
  },
  {
    "text": "that's okay yes they invented it but now it's safe and sound in the graphql foundation similar to how we have things",
    "start": "485759",
    "end": "493560"
  },
  {
    "text": "like dot net foundations that handle open source libraries the graphql foundation also manages all of the open",
    "start": "493560",
    "end": "500759"
  },
  {
    "text": "source graphql libraries so so right they shrunk all those rest apis down to this one API endpoint",
    "start": "500759",
    "end": "508080"
  },
  {
    "text": "and you might be thinking well wait a minute if there's only one API endpoint",
    "start": "508080",
    "end": "514620"
  },
  {
    "text": "how how does it know what data to give back because you know I'm sure Facebook has gigabytes of data just on me let",
    "start": "514620",
    "end": "521820"
  },
  {
    "text": "alone all of us and we can't possibly send all that back in one request well",
    "start": "521820",
    "end": "528120"
  },
  {
    "text": "the way this works is when we hit this API endpoint as a client as a mobile app",
    "start": "528120",
    "end": "535500"
  },
  {
    "text": "as a website as a desktop app what we do is we provide a query so in our graphql",
    "start": "535500",
    "end": "543480"
  },
  {
    "text": "query we tell the server exactly what we want so for example in this query here I'm",
    "start": "543480",
    "end": "550860"
  },
  {
    "text": "telling the server I want to get information about a user and so I've specified a specific user and then I say",
    "start": "550860",
    "end": "557580"
  },
  {
    "text": "for that user give me their name their upcoming events count",
    "start": "557580",
    "end": "562980"
  },
  {
    "text": "and give me some friend suggestions but actually just one just the first one and for that friend's suggestion give me",
    "start": "562980",
    "end": "569279"
  },
  {
    "text": "that person's name and our mutual friends count and then what comes back from the server",
    "start": "569279",
    "end": "574440"
  },
  {
    "text": "is this Json response now this is the same Json we know and love so if you",
    "start": "574440",
    "end": "581040"
  },
  {
    "text": "know how to deserialize Json you already know how to handle a response from a",
    "start": "581040",
    "end": "586980"
  },
  {
    "text": "graphql server it's the same thing we would deserialize this using something like system.text.json now we can use it",
    "start": "586980",
    "end": "593580"
  },
  {
    "text": "in our c-sharp code Happy Days and if we look at that Json response it's exactly the data we asked for so",
    "start": "593580",
    "end": "600899"
  },
  {
    "text": "there's the user the name Brandon Minnick that's me I have looks like I have four upcoming events count",
    "start": "600899",
    "end": "607440"
  },
  {
    "text": "and it gave me one friend suggestion just like I asked for it it looks like it's recommending uh my friend Seth",
    "start": "607440",
    "end": "613920"
  },
  {
    "text": "Juarez and we have 18 friends in common so this is really cool because again",
    "start": "613920",
    "end": "621000"
  },
  {
    "text": "most of us probably already know how to handle this Json response but if we look",
    "start": "621000",
    "end": "627060"
  },
  {
    "text": "at this query this query is not Json at first glance it kind of looks like Json right but if",
    "start": "627060",
    "end": "633660"
  },
  {
    "text": "you squint a little bit you'll notice there's no there's no colons there's no",
    "start": "633660",
    "end": "638760"
  },
  {
    "text": "double dots uh there's no quotes and that's because this this is the graphql this is this is the",
    "start": "638760",
    "end": "646500"
  },
  {
    "text": "query part of the query language and so you might be thinking well okay great",
    "start": "646500",
    "end": "652620"
  },
  {
    "text": "like I came in here to learn about a new cool tool called graphql and now this guy's telling me I gotta learn a whole",
    "start": "652620",
    "end": "658800"
  },
  {
    "text": "new language well I'm out but don't worry it's actually super super easy to",
    "start": "658800",
    "end": "664920"
  },
  {
    "text": "figure out how to form these queries I've been using graphql for years and to be honest with you I've I still have yet",
    "start": "664920",
    "end": "670800"
  },
  {
    "text": "to memorize it so let's show you how to do it using the GitHub graphql API",
    "start": "670800",
    "end": "677220"
  },
  {
    "text": "so let's jump out here and I've gone to the GitHub graphql API and when you",
    "start": "677220",
    "end": "685260"
  },
  {
    "text": "navigate there you're greeted with this GUI in our browser and this is pretty",
    "start": "685260",
    "end": "690720"
  },
  {
    "text": "cool this is something called graphical which I think is a fantastic name because it's a graphical user interface",
    "start": "690720",
    "end": "697800"
  },
  {
    "text": "for your graphql back end so Kudos whoever came up with with this name",
    "start": "697800",
    "end": "702920"
  },
  {
    "text": "and here is where we can figure out how to write queries for in this case",
    "start": "702920",
    "end": "708899"
  },
  {
    "text": "github's graphql API endpoint now what's really cool with guise like these you",
    "start": "708899",
    "end": "715200"
  },
  {
    "text": "get stuff like this for free when you build your graphql server so every every",
    "start": "715200",
    "end": "720300"
  },
  {
    "text": "tool every SDK that's out there at least as far as I know of definitely in the.net world",
    "start": "720300",
    "end": "726660"
  },
  {
    "text": "we all get this for free so I build my graphql server and it just comes included and",
    "start": "726660",
    "end": "733560"
  },
  {
    "text": "one of the coolest things about these is this docs tab here so the way graphql works is we when we",
    "start": "733560",
    "end": "742800"
  },
  {
    "text": "create a graphql server we Define what's called a graphql schema and that schema",
    "start": "742800",
    "end": "748079"
  },
  {
    "text": "essentially is it lists all the objects it lists all",
    "start": "748079",
    "end": "753420"
  },
  {
    "text": "the queries the methods that any user can provide and because we've",
    "start": "753420",
    "end": "759180"
  },
  {
    "text": "pre-defined that these tools these guis like graphical when you load them they can crawl the",
    "start": "759180",
    "end": "766680"
  },
  {
    "text": "schema and provide you the current latest up-to-date documentation and so",
    "start": "766680",
    "end": "772620"
  },
  {
    "text": "this is really cool because it means graphql's self-documenting we don't have to write any docs because all the latest greatest",
    "start": "772620",
    "end": "779459"
  },
  {
    "text": "docs are already here for us now I think GitHub still does write some docs and it's not a bad idea right to help your",
    "start": "779459",
    "end": "785279"
  },
  {
    "text": "users out but do you have to not really because check this out so",
    "start": "785279",
    "end": "791519"
  },
  {
    "text": "here in the documentation Explorer we're greeted with two root types these",
    "start": "791519",
    "end": "797220"
  },
  {
    "text": "are the same root types that you'll see on every graphql server the first one is query",
    "start": "797220",
    "end": "804420"
  },
  {
    "text": "query is like a get request query says I want to get information back from the",
    "start": "804420",
    "end": "810720"
  },
  {
    "text": "server but I'm not going to change anything so I'm just going to make a query you're going to send me data Happy",
    "start": "810720",
    "end": "816360"
  },
  {
    "text": "Days a mutation does make changes on the server so mutations kind of like our",
    "start": "816360",
    "end": "822660"
  },
  {
    "text": "puts our posts our updates our deletes our patches anything anytime we want to change something on the surfer that's",
    "start": "822660",
    "end": "828120"
  },
  {
    "text": "going to be a mutation now for us today I'm this is actually live I'm logged",
    "start": "828120",
    "end": "834060"
  },
  {
    "text": "into GitHub you have to log in to use this so we're just going to stick to queries because I don't want to ruin anything on my",
    "start": "834060",
    "end": "840240"
  },
  {
    "text": "GitHub account by accident but the way this works now is on the left here all I",
    "start": "840240",
    "end": "846839"
  },
  {
    "text": "have to do is copy this value in and then on the right I can click this so this is the object",
    "start": "846839",
    "end": "854100"
  },
  {
    "text": "that comes back when I make a query and when we drill down into it now we",
    "start": "854100",
    "end": "859680"
  },
  {
    "text": "can see all of the other objects that we can query for and if you're familiar",
    "start": "859680",
    "end": "864839"
  },
  {
    "text": "with GitHub then a lot of this probably looks familiar like we can query for organizations we could query for",
    "start": "864839",
    "end": "870380"
  },
  {
    "text": "repositories we can ask about security all this fun stuff so why don't we do",
    "start": "870380",
    "end": "877260"
  },
  {
    "text": "let's do a query for this user here uh and before I copy it",
    "start": "877260",
    "end": "882779"
  },
  {
    "text": "let's talk about this because again this is telling us that when I query for a user it's going to bring back a user",
    "start": "882779",
    "end": "888959"
  },
  {
    "text": "object um but this one looks a little different this says to query for a user I need to",
    "start": "888959",
    "end": "894899"
  },
  {
    "text": "provide a login and that login needs to be a strict and now in the graphql world",
    "start": "894899",
    "end": "900560"
  },
  {
    "text": "this exclamation point means that string cannot be null so I need to pass in a",
    "start": "900560",
    "end": "906959"
  },
  {
    "text": "non-nullable string which if you think about it makes sense right because how do I query for a user if I don't tell",
    "start": "906959",
    "end": "913019"
  },
  {
    "text": "you what user I want a query for so again I'm just going to copy this",
    "start": "913019",
    "end": "919440"
  },
  {
    "text": "paste this over here and actually you can already start to see you actually get intellisense",
    "start": "919440",
    "end": "926820"
  },
  {
    "text": "let's bring that back up auto complete and everything there we go so if we type in user",
    "start": "926820",
    "end": "932699"
  },
  {
    "text": "login and I'll put in my GitHub username which again kind of weird right that",
    "start": "932699",
    "end": "938699"
  },
  {
    "text": "they use the word login like it's not asking for your password it's just asking for your GitHub username but whatever GitHub you guys can do whatever",
    "start": "938699",
    "end": "944880"
  },
  {
    "text": "you want so now that we have that we can drill deeper so I can click on this user",
    "start": "944880",
    "end": "950699"
  },
  {
    "text": "object again and start discovering What fields can I get back about a user and so I see",
    "start": "950699",
    "end": "957660"
  },
  {
    "text": "things here on the right like uh I see bio uh Avatar URL what else do we want",
    "start": "957660",
    "end": "964740"
  },
  {
    "text": "to query for maybe we could search for company",
    "start": "964740",
    "end": "969839"
  },
  {
    "text": "we could do followers see how many people are watching our",
    "start": "969839",
    "end": "975000"
  },
  {
    "text": "our GitHub accounts and now we have a query and I don't know if you noticed",
    "start": "975000",
    "end": "980519"
  },
  {
    "text": "but along with intellisense it'll even tell you if you forget something so see how we",
    "start": "980519",
    "end": "986160"
  },
  {
    "text": "got a little red squiggle here if I go to execute this right now it's going to yell at me because",
    "start": "986160",
    "end": "991560"
  },
  {
    "text": "it tried to warn me but I didn't listen so let's actually finish this query",
    "start": "991560",
    "end": "996660"
  },
  {
    "text": "run it and there we go this is this is the Json response and again it's",
    "start": "996660",
    "end": "1003560"
  },
  {
    "text": "exactly the data that we asked for so there's my bio the URL for my avatar the",
    "start": "1003560",
    "end": "1009920"
  },
  {
    "text": "company I work at the total followers I have and if we decide later on that you",
    "start": "1009920",
    "end": "1016100"
  },
  {
    "text": "know in our app the designer came along and said ah we don't really care about things like the user's company anymore",
    "start": "1016100",
    "end": "1022880"
  },
  {
    "text": "well we just remove that from our query and now that company information is gone so",
    "start": "1022880",
    "end": "1029360"
  },
  {
    "text": "again with graphql we get all of this information in one round trip we don't have to wait for this response to come",
    "start": "1029360",
    "end": "1036558"
  },
  {
    "text": "back before then we can follow up like we have to do with rest to make another request for say the follower count we",
    "start": "1036559",
    "end": "1043640"
  },
  {
    "text": "get it all back at once and we get exactly the data we need because it's",
    "start": "1043640",
    "end": "1048860"
  },
  {
    "text": "exactly the data we ask for so we don't have to worry about using too much bandwidth or paying extra in server",
    "start": "1048860",
    "end": "1055100"
  },
  {
    "text": "costs because the server is always giving 10 objects when we only need one now",
    "start": "1055100",
    "end": "1060679"
  },
  {
    "text": "this is pretty cool right but what are we really doing we're not we're not writing code here we're we're in the",
    "start": "1060679",
    "end": "1066860"
  },
  {
    "text": "browser the browser's running on GitHub servers like we're not even sending this query from here in Oslo on my computer",
    "start": "1066860",
    "end": "1073820"
  },
  {
    "text": "so I want to show you how this is actually working and to do that I'm",
    "start": "1073820",
    "end": "1079340"
  },
  {
    "text": "going to bring up Postman here and let's hide some of the the details from test",
    "start": "1079340",
    "end": "1086960"
  },
  {
    "text": "runs so what I've done I've entered in github's graphql API endpoint here",
    "start": "1086960",
    "end": "1093260"
  },
  {
    "text": "and I've told Postman that I want to make a post request now",
    "start": "1093260",
    "end": "1098419"
  },
  {
    "text": "wait a minute post isn't that a rest API thing well it turns out every graphql",
    "start": "1098419",
    "end": "1105620"
  },
  {
    "text": "request is just a post request so if you've ever made a post request in",
    "start": "1105620",
    "end": "1112100"
  },
  {
    "text": "c-sharp you already know how to make a graphql or a HTTP client request to a",
    "start": "1112100",
    "end": "1118280"
  },
  {
    "text": "graphql endpoint you just create your HTTP client you say post async and we get the data back so",
    "start": "1118280",
    "end": "1124940"
  },
  {
    "text": "pretty cool but what do we put in the body here so it's a post request which",
    "start": "1124940",
    "end": "1131179"
  },
  {
    "text": "means we're going to have something in our body and it turns out we have one",
    "start": "1131179",
    "end": "1136460"
  },
  {
    "text": "field that we enter in that one field is query and then for the value of that",
    "start": "1136460",
    "end": "1143660"
  },
  {
    "text": "we just come back here copy this and paste it in",
    "start": "1143660",
    "end": "1148760"
  },
  {
    "text": "so what I'm going to do now is just let me get some rid of that uh White space",
    "start": "1148760",
    "end": "1154340"
  },
  {
    "text": "because otherwise Postman gets mad at me there we go nope one more",
    "start": "1154340",
    "end": "1161120"
  },
  {
    "text": "and I'm gonna make sure we keep the quotes here and there we are so so I put",
    "start": "1161120",
    "end": "1166520"
  },
  {
    "text": "in the exact query that we just essentially copy pasted in graphql I just copy paste",
    "start": "1166520",
    "end": "1173900"
  },
  {
    "text": "that here and when I click Send we get exactly the data back that we",
    "start": "1173900",
    "end": "1181640"
  },
  {
    "text": "asked for so so right so under the hood graphql is just using post requests we can use C",
    "start": "1181640",
    "end": "1189440"
  },
  {
    "text": "sharp HTTP client send post async copy paste those graphql queries into the body and we're good to go and just like",
    "start": "1189440",
    "end": "1196160"
  },
  {
    "text": "we saw uh back in the browser if if maybe I don't care about the Avatar URL anymore I just delete that from my query",
    "start": "1196160",
    "end": "1203539"
  },
  {
    "text": "and now it's gone pretty cool",
    "start": "1203539",
    "end": "1208240"
  },
  {
    "text": "okay so let's do a quick review on graphql graphql apis have one endpoint so every",
    "start": "1210799",
    "end": "1217460"
  },
  {
    "text": "graphql request you make whether you're going to do a query a mutation changing something on the server at or not you're",
    "start": "1217460",
    "end": "1224120"
  },
  {
    "text": "going to hit the same endpoint um if you want to you can have multiple graphql endpoints at your company some",
    "start": "1224120",
    "end": "1230419"
  },
  {
    "text": "companies do that for say like a public facing graphql API and an internal graphql API that's totally cool but you",
    "start": "1230419",
    "end": "1238280"
  },
  {
    "text": "don't have to everything can go through the same endpoint graphql apis are self-documenting so",
    "start": "1238280",
    "end": "1244760"
  },
  {
    "text": "just like we saw in graphical anytime we navigate to a graphql server",
    "start": "1244760",
    "end": "1250460"
  },
  {
    "text": "in our browser we're presented with this GUI that'll have all of the docs there and those",
    "start": "1250460",
    "end": "1256760"
  },
  {
    "text": "docs as soon as we load that website in the browser",
    "start": "1256760",
    "end": "1261860"
  },
  {
    "text": "those docs are generated so they're always up to date they're always showing you exactly what's running on the server",
    "start": "1261860",
    "end": "1266900"
  },
  {
    "text": "at that time graphql requests are just post requests so graphql leverages the post HTTP",
    "start": "1266900",
    "end": "1274700"
  },
  {
    "text": "method under the hood and again if you know how to make a post request using HTTP client then you already know how to",
    "start": "1274700",
    "end": "1279980"
  },
  {
    "text": "make a graphql request as well just remember that the graphql request body",
    "start": "1279980",
    "end": "1285740"
  },
  {
    "text": "is going to be one field for your Json that's called query and then on the other side for the value just copy paste",
    "start": "1285740",
    "end": "1293299"
  },
  {
    "text": "in exactly what we found using the browser and like we mentioned that response is",
    "start": "1293299",
    "end": "1298820"
  },
  {
    "text": "just Json so it's the same Json we know and love deserialize it and now we have C sharp to play around with in our code",
    "start": "1298820",
    "end": "1306679"
  },
  {
    "text": "all right well speaking of code let's actually write some so",
    "start": "1306679",
    "end": "1312440"
  },
  {
    "text": "there are two popular graphql client sdks for net the first one being",
    "start": "1312440",
    "end": "1319539"
  },
  {
    "text": "graphql.client this is kind of the this is the OG this was the first graphql",
    "start": "1319539",
    "end": "1325400"
  },
  {
    "text": "client that was created 4.net developers it's the oldest and not surprisingly it",
    "start": "1325400",
    "end": "1331039"
  },
  {
    "text": "also has the most downloads on nougat but the one we're going to focus on today is strawberry shake uh strawberry",
    "start": "1331039",
    "end": "1338659"
  },
  {
    "text": "shakes newer it's uh we'll say relatively new it's been around for about two years",
    "start": "1338659",
    "end": "1345020"
  },
  {
    "text": "um and I'll I'll tell you I've used both of these I've I have built apps that",
    "start": "1345020",
    "end": "1350900"
  },
  {
    "text": "have used graphql client I've built apps that use strawberry shake and strawberry shake is incredible the big difference",
    "start": "1350900",
    "end": "1359000"
  },
  {
    "text": "between these two well I guess there's a couple big differences but the main one that I really appreciate is strawberry shake",
    "start": "1359000",
    "end": "1366880"
  },
  {
    "text": "writes the code for us it includes a lot of source generators a ton of source",
    "start": "1366880",
    "end": "1372559"
  },
  {
    "text": "generators and whereas with graphql client I end up having to write all that",
    "start": "1372559",
    "end": "1377659"
  },
  {
    "text": "code myself so not that that's a bad thing you know graphql.client the SDK is solid it's stable it's been around for",
    "start": "1377659",
    "end": "1384380"
  },
  {
    "text": "forever uh if you use it great but with strawberry shake can't recommend it",
    "start": "1384380",
    "end": "1390440"
  },
  {
    "text": "enough we'll see all the code that it generates for us in just a second but it's also the fastest client",
    "start": "1390440",
    "end": "1397700"
  },
  {
    "text": "um they have benchmarks posted on the website I've shared links to the website on uh on the URL that I've provided here",
    "start": "1397700",
    "end": "1404480"
  },
  {
    "text": "where they do benchmarks and the creators of strawberry shake have literally created the fastest graphql",
    "start": "1404480",
    "end": "1410900"
  },
  {
    "text": "client and the fastest graphql server sdks in the world so literally it",
    "start": "1410900",
    "end": "1416120"
  },
  {
    "text": "doesn't matter if you're coding in Python go rust they go head-to-head against all of them",
    "start": "1416120",
    "end": "1422780"
  },
  {
    "text": "and blow them all out of the water in terms of requests per second uh memory allocation speed and response and it's",
    "start": "1422780",
    "end": "1430820"
  },
  {
    "text": "kind of cool because they're all strawberry shakes totally open source so you can go see how they did it and if you've ever want to be if you ever want",
    "start": "1430820",
    "end": "1437240"
  },
  {
    "text": "to be terrified go look at it because it's nothing but pointers and refs and you know all the unsafe code that we're",
    "start": "1437240",
    "end": "1443480"
  },
  {
    "text": "told not to do but luckily they're they're a lot smarter than me so they they know how to do it and then they",
    "start": "1443480",
    "end": "1449539"
  },
  {
    "text": "have a boatload of unit tests to make sure everything's good and everything's solid which totally is so so let's check",
    "start": "1449539",
    "end": "1455419"
  },
  {
    "text": "this out I'm going to jump over here to visual studio",
    "start": "1455419",
    "end": "1460460"
  },
  {
    "text": "and I have an app that I built and this app",
    "start": "1460460",
    "end": "1465919"
  },
  {
    "text": "let's bring it up there we go so made this in.net Maui and right now I've got",
    "start": "1465919",
    "end": "1472640"
  },
  {
    "text": "an empty books page so nothing appears on this page because well we're going to write that code together",
    "start": "1472640",
    "end": "1478659"
  },
  {
    "text": "but before we write the code for the client side let me show you a little around the server side because both of",
    "start": "1478659",
    "end": "1485960"
  },
  {
    "text": "those are in here so I have a hot chocolate graphql.mobile and hot",
    "start": "1485960",
    "end": "1491919"
  },
  {
    "text": "chocolate.graphql.back end and you might be wondering well wait a minute hot chocolate I thought we were talking",
    "start": "1491919",
    "end": "1497659"
  },
  {
    "text": "about strawberry shake well it's the same company uh the company is called chili cream they're back-end sdks called",
    "start": "1497659",
    "end": "1505340"
  },
  {
    "text": "hot chocolate and their front end SDK is called strawberry shake so I don't know I guess they get really",
    "start": "1505340",
    "end": "1512419"
  },
  {
    "text": "thirsty sometimes and that's how they come up with their names but yeah we have strawberry shake dot",
    "start": "1512419",
    "end": "1518000"
  },
  {
    "text": "Maui in our client side and our mobile app because again this is a.net Maui app they also make strawberry shake dot",
    "start": "1518000",
    "end": "1523880"
  },
  {
    "text": "Blazer if you want to use it for your Blazer app or if you just want to use it in a console app they also have just",
    "start": "1523880",
    "end": "1529720"
  },
  {
    "text": "strawberryshake.core which you can use so lots of options there but right so on the server side hot chocolate",
    "start": "1529720",
    "end": "1536480"
  },
  {
    "text": "so how does this work well here's my program",
    "start": "1536480",
    "end": "1541539"
  },
  {
    "text": "program.cs file that's it how many lines of code is that 11",
    "start": "1541539",
    "end": "1546940"
  },
  {
    "text": "including the using namespace up here um literally we just say",
    "start": "1546940",
    "end": "1553419"
  },
  {
    "text": "builder.services.ad graphql server so this is an extension method that hot chocolate provides for us and once you",
    "start": "1553419",
    "end": "1559220"
  },
  {
    "text": "say that it's gonna basically do most of the work and then all I had to do was provide it",
    "start": "1559220",
    "end": "1565100"
  },
  {
    "text": "with a custom query type so what does this look like well this query",
    "start": "1565100",
    "end": "1571100"
  },
  {
    "text": "this is just a c-sharp class you'll notice it doesn't inherit from anything it doesn't Implement any interfaces this",
    "start": "1571100",
    "end": "1578179"
  },
  {
    "text": "is just something I wrote and what this is is three methods one's called get",
    "start": "1578179",
    "end": "1584059"
  },
  {
    "text": "books which returns an innumerable of type book we have another one called get",
    "start": "1584059",
    "end": "1590000"
  },
  {
    "text": "book so one book where if we provide the title the graphql API will provide the first",
    "start": "1590000",
    "end": "1596840"
  },
  {
    "text": "book it finds matching that title or we can search for the author using git author same idea we search via the",
    "start": "1596840",
    "end": "1603320"
  },
  {
    "text": "author's name we get the author's details back and you know this is this is just a sample app something I made so",
    "start": "1603320",
    "end": "1609860"
  },
  {
    "text": "I could share it with you today and so all this data is just hard coded but here",
    "start": "1609860",
    "end": "1615860"
  },
  {
    "text": "in this query this is where you would actually point to your data source so",
    "start": "1615860",
    "end": "1620960"
  },
  {
    "text": "these methods in the graphql world these are called resolvers and these resolvers point to wherever",
    "start": "1620960",
    "end": "1628580"
  },
  {
    "text": "your data lives so if your data is in a database this would go fetch the data from the database or what's really",
    "start": "1628580",
    "end": "1634940"
  },
  {
    "text": "common nowadays because most companies have already built a whole Suite of rest apis",
    "start": "1634940",
    "end": "1640700"
  },
  {
    "text": "is you can put a graphql server in front of those rest apis and then you can have",
    "start": "1640700",
    "end": "1646460"
  },
  {
    "text": "these graphql resolvers point to your existing rest apis because you know",
    "start": "1646460",
    "end": "1651799"
  },
  {
    "text": "those rest apis have been around forever you know the company has some sure spent a lot of money and investment in them",
    "start": "1651799",
    "end": "1657559"
  },
  {
    "text": "and don't want to lose them because if you got rid of your rest apis it will probably break all your apps but if you",
    "start": "1657559",
    "end": "1663380"
  },
  {
    "text": "want to take advantage of graphql going forward you can point these methods to",
    "start": "1663380",
    "end": "1668720"
  },
  {
    "text": "those existing rest apis and leverage all that existing technology you have that you know works and it's tested and",
    "start": "1668720",
    "end": "1674419"
  },
  {
    "text": "trusted and that's kind of been the really common approach for a lot of companies starting out but yeah if",
    "start": "1674419",
    "end": "1680539"
  },
  {
    "text": "you're building a Greenfield app you can just point directly to your database Happy Days so",
    "start": "1680539",
    "end": "1687140"
  },
  {
    "text": "I have this running so in my browser I'm going to navigate to my local host here so I'm just on",
    "start": "1687140",
    "end": "1692900"
  },
  {
    "text": "localhost Port 5100 slash graphql and again we get a cool little GUI here",
    "start": "1692900",
    "end": "1699559"
  },
  {
    "text": "so it looks a little different from graphical the one that is running on github's graphql API but if I'm being",
    "start": "1699559",
    "end": "1706400"
  },
  {
    "text": "honest this one's a little cooler because check out",
    "start": "1706400",
    "end": "1710559"
  },
  {
    "text": "yeah so again this is made by the company chili cream who makes hot chocolate for",
    "start": "1712179",
    "end": "1719240"
  },
  {
    "text": "the server they make strawberry shake for the client and this",
    "start": "1719240",
    "end": "1724580"
  },
  {
    "text": "is named banana cake Bop so hope you're hungry try to keep up but",
    "start": "1724580",
    "end": "1729740"
  },
  {
    "text": "yeah if we go look over here right we can see the schema reference this is the one that I built the one we were just",
    "start": "1729740",
    "end": "1735320"
  },
  {
    "text": "looking at in code and again feels very similar to what we're just looking at on the GitHub API where I have a query",
    "start": "1735320",
    "end": "1742820"
  },
  {
    "text": "and in that query we can call for we can query for books which returns all",
    "start": "1742820",
    "end": "1749000"
  },
  {
    "text": "the books and in graphql terminology these square brackets denote a list so",
    "start": "1749000",
    "end": "1754640"
  },
  {
    "text": "anytime you see those square brackets around it means this is a list of type book and again that exclamation point",
    "start": "1754640",
    "end": "1760520"
  },
  {
    "text": "means the list is not nullable so we'll never return null but also the list will",
    "start": "1760520",
    "end": "1767179"
  },
  {
    "text": "never contain a null book either so a non-nullable book in a non-nullable list is what we're",
    "start": "1767179",
    "end": "1773240"
  },
  {
    "text": "going to get back and again this was all auto generated for me I didn't I didn't do anything other than",
    "start": "1773240",
    "end": "1780559"
  },
  {
    "text": "write this code right here I promise all I did was write this code and then hot",
    "start": "1780559",
    "end": "1787640"
  },
  {
    "text": "chocolate automatically inferred it for us and they do they do some fancy things too",
    "start": "1787640",
    "end": "1793880"
  },
  {
    "text": "like you can see I named let's see how we can get these side by side maybe whoa all right so like I",
    "start": "1793880",
    "end": "1801980"
  },
  {
    "text": "named this method get books but when hot chocolate generated the API for me they changed it to just books to",
    "start": "1801980",
    "end": "1809779"
  },
  {
    "text": "kind of better follow best practices in graphql which I appreciate um and again if if I had told it that",
    "start": "1809779",
    "end": "1817940"
  },
  {
    "text": "the book was nullable then you as you can imagine this exclamation point would",
    "start": "1817940",
    "end": "1823100"
  },
  {
    "text": "go away and it would Auto generate the API with the possibility of a no book",
    "start": "1823100",
    "end": "1828380"
  },
  {
    "text": "coming back but you know you can see that this is the one I made because I",
    "start": "1828380",
    "end": "1833899"
  },
  {
    "text": "gave it a description called return all books and we see down here this returns all books so it literally took this code",
    "start": "1833899",
    "end": "1841039"
  },
  {
    "text": "just because I passed it in here and said this is my query type and then auto-generated all",
    "start": "1841039",
    "end": "1847340"
  },
  {
    "text": "this stuff for us so again I've I've never memorized how to do graphql queries I've never made one on",
    "start": "1847340",
    "end": "1854600"
  },
  {
    "text": "the fly without coming here so if we keep following that pattern we can make a query",
    "start": "1854600",
    "end": "1861440"
  },
  {
    "text": "and we can use the intellisense here to say I'm going to ask for all the books and for each book I want to know its",
    "start": "1861440",
    "end": "1868100"
  },
  {
    "text": "title I want to know it's author and give me that author's name and birthday",
    "start": "1868100",
    "end": "1873500"
  },
  {
    "text": "and when I click run just like we expect we get all of the books back from our API",
    "start": "1873500",
    "end": "1879860"
  },
  {
    "text": "really really cool so how do we do this on the client side",
    "start": "1879860",
    "end": "1886220"
  },
  {
    "text": "well or how do we consume it on the client side it's probably a better way of",
    "start": "1886220",
    "end": "1891500"
  },
  {
    "text": "putting that so let's actually dig into some code here so as we've already pointed out I",
    "start": "1891500",
    "end": "1897679"
  },
  {
    "text": "added this nuget package ahead of time strawberry shake dot Maui and again if you're doing Blazer they have strawberry",
    "start": "1897679",
    "end": "1903799"
  },
  {
    "text": "shake top Blazer there's also strawberry shake dot core if you just want the core functionality and you don't care about the platform they got options for you",
    "start": "1903799",
    "end": "1911380"
  },
  {
    "text": "and when you add this to your app there's a couple steps you have to do",
    "start": "1911380",
    "end": "1917659"
  },
  {
    "text": "and I'll show you those command line commands that I did ahead of time but when you run this command line command",
    "start": "1917659",
    "end": "1924679"
  },
  {
    "text": "to initialize strawberry shake it generates this Json file",
    "start": "1924679",
    "end": "1929779"
  },
  {
    "text": "and this Json file has a couple things in it that are pretty cool so first of",
    "start": "1929779",
    "end": "1935419"
  },
  {
    "text": "all I pointed strawberry shake to my graphql API endpoint and so when I",
    "start": "1935419",
    "end": "1941720"
  },
  {
    "text": "initialized strawberry shake what it does this is just a one-time thing it",
    "start": "1941720",
    "end": "1946820"
  },
  {
    "text": "goes out to your graphql API and it pulls down the schema so the same schema",
    "start": "1946820",
    "end": "1953240"
  },
  {
    "text": "that I didn't write because I made I use hot chocolate to write my code in C",
    "start": "1953240",
    "end": "1958580"
  },
  {
    "text": "Sharp hot chocolate generated that schema automatically for me strawberry shakes pulling down that",
    "start": "1958580",
    "end": "1965539"
  },
  {
    "text": "schema and it saves it here locally so if we scroll down there's another file called schema.graphql",
    "start": "1965539",
    "end": "1971840"
  },
  {
    "text": "and this is the schema that hot chocolate on the server side had Auto generated for us and you can see like",
    "start": "1971840",
    "end": "1978740"
  },
  {
    "text": "this is exactly what we expect right like we have our book query we have the books query that returns all the books",
    "start": "1978740",
    "end": "1984620"
  },
  {
    "text": "and that's the list of books with the exclamation points meaning it's not nullable we have the type of book and",
    "start": "1984620",
    "end": "1990740"
  },
  {
    "text": "every book is going to have a title which is a string that's not null and an author that's not null and every author",
    "start": "1990740",
    "end": "1997399"
  },
  {
    "text": "is going to have a name and a birthday so so right away strawberry shake knows",
    "start": "1997399",
    "end": "2003220"
  },
  {
    "text": "everything about our graphql API and this is what it uses to Auto generate all the c-sharp code",
    "start": "2003220",
    "end": "2010720"
  },
  {
    "text": "and if we dig in a little bit not sure how much everybody's played with Source",
    "start": "2010720",
    "end": "2017019"
  },
  {
    "text": "generators they're if I'm being honest they're pretty difficult to figure out uh once you get",
    "start": "2017019",
    "end": "2023620"
  },
  {
    "text": "them working though they're really cool really fun to play with but check this out so I went into I went",
    "start": "2023620",
    "end": "2029679"
  },
  {
    "text": "into the Ops folder here for my mobile app and if we dig into it eventually we'll come across a folder",
    "start": "2029679",
    "end": "2036880"
  },
  {
    "text": "called Berry and that's where strawberry shake stores all its auto-generated code so if we wanted to",
    "start": "2036880",
    "end": "2044140"
  },
  {
    "text": "I could open up this file and we can see all the code that it created for us and and this is tons of",
    "start": "2044140",
    "end": "2050740"
  },
  {
    "text": "code so things like a class called get books query result there's information",
    "start": "2050740",
    "end": "2056980"
  },
  {
    "text": "in here for how it instantiates its version of HTTP client and you know",
    "start": "2056980",
    "end": "2062679"
  },
  {
    "text": "we're not going to go through this but look at that it generated almost a thousand lines of code for us whereas if",
    "start": "2062679",
    "end": "2069280"
  },
  {
    "text": "we weren't using strawberry shake we would have to write all this code ourselves so again this is why I love",
    "start": "2069280",
    "end": "2075460"
  },
  {
    "text": "using strawberry shake highly highly recommend it because not only do we all get get this code for free but it's also",
    "start": "2075460",
    "end": "2081700"
  },
  {
    "text": "the fastest SDK available to.net developers and actually any any graphql",
    "start": "2081700",
    "end": "2087580"
  },
  {
    "text": "developers out there so right now we have",
    "start": "2087580",
    "end": "2094658"
  },
  {
    "text": "our initialization file I ran a command line command that I'll show you in a bit to initialize it it",
    "start": "2094659",
    "end": "2101080"
  },
  {
    "text": "got the schema for us so now it knows exactly how the type system and",
    "start": "2101080",
    "end": "2106300"
  },
  {
    "text": "everything on our graphql server works and what do we do next well",
    "start": "2106300",
    "end": "2111660"
  },
  {
    "text": "in.net Maui it uses the same initialization Paradigm that we use",
    "start": "2111660",
    "end": "2116740"
  },
  {
    "text": "across.net so if you're a Blazer developer or asp.net core developer I'll guarantee you've seen the",
    "start": "2116740",
    "end": "2122859"
  },
  {
    "text": "builder.services Paradigm where we have an iservice collection that we can add transients Singleton scoped variables",
    "start": "2122859",
    "end": "2130599"
  },
  {
    "text": "too well with strawberry shake they gave me this",
    "start": "2130599",
    "end": "2135640"
  },
  {
    "text": "method add Library graphql client and that",
    "start": "2135640",
    "end": "2141400"
  },
  {
    "text": "method is named that because I told it to so back in that configuration file you'll see",
    "start": "2141400",
    "end": "2148180"
  },
  {
    "text": "I said name this thing Library graphql client and then anytime you generate",
    "start": "2148180",
    "end": "2153700"
  },
  {
    "text": "code generate it in my namespace hot chocolate graphql.mobile",
    "start": "2153700",
    "end": "2158920"
  },
  {
    "text": "so it went ahead and did just that thanks strawberry shake and then just",
    "start": "2158920",
    "end": "2164260"
  },
  {
    "text": "like anytime we're adding HTTP client to our dependency injection container we can configure it so I gave it the Base",
    "start": "2164260",
    "end": "2170800"
  },
  {
    "text": "address so it's just pointing here to localhost on my machine and then we can configure the message handlers I added",
    "start": "2170800",
    "end": "2177220"
  },
  {
    "text": "some rules about error policies so it'll automatically retry if it can't find the server and then we won't go this deep",
    "start": "2177220",
    "end": "2185079"
  },
  {
    "text": "into graphql today but it also supports websockets so another part of graphql",
    "start": "2185079",
    "end": "2191320"
  },
  {
    "text": "along with queries which again that's reading data from the server mutations which changes data on the server",
    "start": "2191320",
    "end": "2199000"
  },
  {
    "text": "graph graphql servers also have something called a subscription and",
    "start": "2199000",
    "end": "2204400"
  },
  {
    "text": "it's kind of exactly what it sounds like it allows us to subscribe to events on",
    "start": "2204400",
    "end": "2210400"
  },
  {
    "text": "the graphql server so I can subscribe and say hey let me know anytime",
    "start": "2210400",
    "end": "2218320"
  },
  {
    "text": "um this repository changes right let me know anytime a user commits code so that I can update in real time on my app and",
    "start": "2218320",
    "end": "2225579"
  },
  {
    "text": "we can subscribe to graphql servers it uses iobservables and we can just sit",
    "start": "2225579",
    "end": "2230920"
  },
  {
    "text": "there and watch them and all this real-time data just Flows In which is really really cool but for today we'll",
    "start": "2230920",
    "end": "2237400"
  },
  {
    "text": "just be sticking we'll stick into the basics stick to queries so we've added our graphql client here to our services",
    "start": "2237400",
    "end": "2244720"
  },
  {
    "text": "or our I service collection and so now I can go into my books view model and I",
    "start": "2244720",
    "end": "2252760"
  },
  {
    "text": "can start writing some code because I've already written this I have this uh this is a the command that runs when the app",
    "start": "2252760",
    "end": "2258880"
  },
  {
    "text": "launches called refresh books and right now it's just totally empty so that's why we don't have any data visible on",
    "start": "2258880",
    "end": "2265960"
  },
  {
    "text": "our mobile app but What I've Done ahead of time is I've added in that Library graphql client",
    "start": "2265960",
    "end": "2272200"
  },
  {
    "text": "that strawberry shake generated automatically for us and what we do",
    "start": "2272200",
    "end": "2278320"
  },
  {
    "text": "we can say VAR result equals client dot get booksquery",
    "start": "2278320",
    "end": "2287020"
  },
  {
    "text": "dot execute async and then I pass in my cancellation token",
    "start": "2287020",
    "end": "2292420"
  },
  {
    "text": "that's it we've just gotten data back from our graphql server it's automatically",
    "start": "2292420",
    "end": "2297960"
  },
  {
    "text": "deserialized for us and we can do it everywhere with it so",
    "start": "2297960",
    "end": "2303339"
  },
  {
    "text": "what do we write just a couple lines of c-sharp code including some initialization and we're off and running",
    "start": "2303339",
    "end": "2308980"
  },
  {
    "text": "and so what we'd want to do is something like um just like we do with HTTP client",
    "start": "2308980",
    "end": "2314140"
  },
  {
    "text": "right we want to make sure there's no errors this will throw uh automatically throw a",
    "start": "2314140",
    "end": "2320980"
  },
  {
    "text": "graphql exception if I remember something like that it'll throw an exception if any errors are found so if",
    "start": "2320980",
    "end": "2327160"
  },
  {
    "text": "it couldn't connect to the server it'll throw an exception or you know if you misform your graphql query like if I ask",
    "start": "2327160",
    "end": "2335740"
  },
  {
    "text": "for something that doesn't exist well this is going to yell at me but you can see here",
    "start": "2335740",
    "end": "2341140"
  },
  {
    "text": "I still get an error back so either I can't access it or maybe I'm not allowed",
    "start": "2341140",
    "end": "2347260"
  },
  {
    "text": "to access it based on permissions whatever it might be that'll rethrow any exceptions but",
    "start": "2347260",
    "end": "2353200"
  },
  {
    "text": "now that we know that the data doesn't have any exceptions we can just double check that none of that data is null",
    "start": "2353200",
    "end": "2361180"
  },
  {
    "text": "and once we know it's not null we'll just iterate over it so we'll say",
    "start": "2361180",
    "end": "2366940"
  },
  {
    "text": "for each book in result.data.books add it to this observable collection",
    "start": "2366940",
    "end": "2374260"
  },
  {
    "text": "that I've already initialized up here so I'll just say books dot add",
    "start": "2374260",
    "end": "2379720"
  },
  {
    "text": "book and there we go and so now when we run",
    "start": "2379720",
    "end": "2384760"
  },
  {
    "text": "the app let's see what happens",
    "start": "2384760",
    "end": "2389700"
  },
  {
    "text": "all right so now we have all the data showing in our app super fast granted",
    "start": "2397240",
    "end": "2402880"
  },
  {
    "text": "the round trip time is probably about a millisecond but super super easy right we just had to",
    "start": "2402880",
    "end": "2408700"
  },
  {
    "text": "write a couple lines of c-sharp code we just had to add it to our I service collection and strawberry shake",
    "start": "2408700",
    "end": "2416200"
  },
  {
    "text": "basically did all of that for us so now I want to show you what if we want",
    "start": "2416200",
    "end": "2422619"
  },
  {
    "text": "to make a different query right like we created this get books query by adding",
    "start": "2422619",
    "end": "2428680"
  },
  {
    "text": "this file here so this file is called getbooksquery.graphql",
    "start": "2428680",
    "end": "2434380"
  },
  {
    "text": "and if we look back at the configuration for this graphql Json file",
    "start": "2434380",
    "end": "2440440"
  },
  {
    "text": "it knows to search for any any folder any any file in any folder with the dot",
    "start": "2440440",
    "end": "2446619"
  },
  {
    "text": "graphql file name and use that to create",
    "start": "2446619",
    "end": "2451780"
  },
  {
    "text": "what we're asking you to so whether it's a query whether it's a mutation look for these dot graphql dot graphql files and",
    "start": "2451780",
    "end": "2458859"
  },
  {
    "text": "auto generate the code for me so why don't we why don't we create another one here on the Fly and let's do one called uh how about we",
    "start": "2458859",
    "end": "2467380"
  },
  {
    "text": "do git book by title now",
    "start": "2467380",
    "end": "2473440"
  },
  {
    "text": "what I'm going to do is because if we're going to query for a book by a",
    "start": "2473440",
    "end": "2478480"
  },
  {
    "text": "title then we need to know what title we're querying for and that means we need to pass in a variable and the way",
    "start": "2478480",
    "end": "2484480"
  },
  {
    "text": "that works here in graphql is to name the variable here so I'll name it title",
    "start": "2484480",
    "end": "2490060"
  },
  {
    "text": "and I'll let graphql know that this is a non-nullable string and then down here we'll just use",
    "start": "2490060",
    "end": "2495520"
  },
  {
    "text": "intellisense again to say I want a book and then book needs to know",
    "start": "2495520",
    "end": "2500920"
  },
  {
    "text": "the title so I'll give it that variable title and then again I want to know give me",
    "start": "2500920",
    "end": "2507040"
  },
  {
    "text": "the book's title give me the books author give me the author's name give me their birthday and the only thing left to do",
    "start": "2507040",
    "end": "2514599"
  },
  {
    "text": "is to pass in that variable and we do that down here you can actually see I'm getting yelled at there's a little",
    "start": "2514599",
    "end": "2519820"
  },
  {
    "text": "squiggle right down here where it says variables and so for every variable that",
    "start": "2519820",
    "end": "2525640"
  },
  {
    "text": "we add into our graphql query we can easily add it down here so I can say there's going to be a variable title and",
    "start": "2525640",
    "end": "2535300"
  },
  {
    "text": "hopefully I spelled that correctly let's see if this runs boom and look at that we get one book back from our graphql",
    "start": "2535780",
    "end": "2541900"
  },
  {
    "text": "API it's exactly the book we asked for C sharp in depth and now we've got another",
    "start": "2541900",
    "end": "2547180"
  },
  {
    "text": "brand new graphql query that just like we've been doing all day right copy",
    "start": "2547180",
    "end": "2552579"
  },
  {
    "text": "and we're going to paste it in what's it called get book by title so get book by title Dot graphql",
    "start": "2552579",
    "end": "2561940"
  },
  {
    "text": "and I'm just going to paste that in again I'm not memorizing anything about graphql or the server and once I build",
    "start": "2561940",
    "end": "2569980"
  },
  {
    "text": "this now hot chocolate's off and running so hot chocolate is now generating all the code",
    "start": "2569980",
    "end": "2576040"
  },
  {
    "text": "behind this um you know when we first saw that auto generated file it was what like 780",
    "start": "2576040",
    "end": "2582520"
  },
  {
    "text": "lines of code so let's see if we jump back in there",
    "start": "2582520",
    "end": "2588000"
  },
  {
    "text": "go back to Barry open this up how we doing now oh look at that",
    "start": "2590920",
    "end": "2596680"
  },
  {
    "text": "we're up to 1200 lines of code 1200 lines of code we didn't have to write that's so cool and if we go back to our",
    "start": "2596680",
    "end": "2604240"
  },
  {
    "text": "view model now we can use it so I can say",
    "start": "2604240",
    "end": "2611740"
  },
  {
    "text": "um let's see this is the John's Key result he's the author of C sharp in depth and just like",
    "start": "2611740",
    "end": "2618460"
  },
  {
    "text": "we did above I'll just say client now check that out I've got get book by",
    "start": "2618460",
    "end": "2625420"
  },
  {
    "text": "title again totally auto-generated for me I didn't have to write anything other",
    "start": "2625420",
    "end": "2630640"
  },
  {
    "text": "than you know copy and paste into graphql query and again",
    "start": "2630640",
    "end": "2636520"
  },
  {
    "text": "execute async now remember we created that variable title well guess what execute async says hey I",
    "start": "2636520",
    "end": "2644560"
  },
  {
    "text": "need to know the title so no problem I'll pass in C sharp in depth again",
    "start": "2644560",
    "end": "2650400"
  },
  {
    "text": "and of course give it our cancellation token like we always do as good developers and you know what we've",
    "start": "2650400",
    "end": "2657760"
  },
  {
    "text": "already got that book displayed in the app so I'll tell you what let's put a break point here run the app again",
    "start": "2657760",
    "end": "2663040"
  },
  {
    "text": "because we don't really need to add it to the screen twice you know I love John skeet but we don't need to show his book twice in",
    "start": "2663040",
    "end": "2669040"
  },
  {
    "text": "the library but this break point boom already done um",
    "start": "2669040",
    "end": "2674560"
  },
  {
    "text": "and we can see the result here so let's see if we dig into the result",
    "start": "2674560",
    "end": "2679980"
  },
  {
    "text": "there we go we've got our data and look at that there's our our book object",
    "start": "2680680",
    "end": "2686380"
  },
  {
    "text": "and our book all right C sharp in depth and we can get information about the author here and look at that there's",
    "start": "2686380",
    "end": "2692920"
  },
  {
    "text": "John skeed and you know I don't know his birthday so I just basically made it January 1st but uh but",
    "start": "2692920",
    "end": "2701079"
  },
  {
    "text": "yeah so with again just not even not even writing any code strawberry shakes generating this all for us",
    "start": "2701079",
    "end": "2708579"
  },
  {
    "text": "all I have to do now is just say execute async pass in my variable name and we're",
    "start": "2708579",
    "end": "2713800"
  },
  {
    "text": "off and running so couldn't recommend strawberry shake more I actually have I",
    "start": "2713800",
    "end": "2719680"
  },
  {
    "text": "have a couple apps in the App Store and one of them I can't wait to implement strawberry shaking because I didn't even",
    "start": "2719680",
    "end": "2726040"
  },
  {
    "text": "use the other Library I didn't even use uh graphql.client in it I actually wrote",
    "start": "2726040",
    "end": "2731260"
  },
  {
    "text": "everything by hand so I can't wait for the pull requests when I open that up because it's going to remove",
    "start": "2731260",
    "end": "2737220"
  },
  {
    "text": "thousands of lines of code probably 10 000 lines of code just gone code I don't have to maintain anymore it's gonna be",
    "start": "2737220",
    "end": "2743319"
  },
  {
    "text": "great okay so we've got a little bit of time left so let's see",
    "start": "2743319",
    "end": "2749380"
  },
  {
    "text": "I want to show you those initialization steps because yeah I mean I totally skipped them but wasn't",
    "start": "2749380",
    "end": "2756700"
  },
  {
    "text": "sure how much time we'd have wanted to make sure we saw all the cool stuff but these",
    "start": "2756700",
    "end": "2763660"
  },
  {
    "text": "are the docks so they've got getting started docs for Blazer xamarin console apps uh he hasn't",
    "start": "2763660",
    "end": "2769960"
  },
  {
    "text": "added Maui yet Maui's still in preview I've actually been working with this guy Michael stabe you might see him around",
    "start": "2769960",
    "end": "2776500"
  },
  {
    "text": "he's given some talks he's the really smart guy that writes all these Source generators that knows how to do all the",
    "start": "2776500",
    "end": "2782740"
  },
  {
    "text": "pass by reference and unsafe code so if you ever want to meet a really really",
    "start": "2782740",
    "end": "2787780"
  },
  {
    "text": "smart guy look out for Michael stab or go see his talks he'll be around and",
    "start": "2787780",
    "end": "2793780"
  },
  {
    "text": "and so what we do to initialize strawberry shake we have to bring in its",
    "start": "2793780",
    "end": "2799240"
  },
  {
    "text": "tool manifest so we pop open the command line we say.net new tool manifest and",
    "start": "2799240",
    "end": "2804400"
  },
  {
    "text": "then we tell it to install the strawberry shake tools and then once those tools are installed",
    "start": "2804400",
    "end": "2810040"
  },
  {
    "text": "I'm going to skip these steps because these are just how to initialize the project how to add the nuget packages",
    "start": "2810040",
    "end": "2816160"
  },
  {
    "text": "here we go so this is the good stuff down here so this dot net graphql init",
    "start": "2816160",
    "end": "2823240"
  },
  {
    "text": "this is what auto-generated that graphql.json file whoops zoom out",
    "start": "2823240",
    "end": "2831099"
  },
  {
    "text": "this one right here so this file was auto-generated for me after I ran",
    "start": "2831099",
    "end": "2839160"
  },
  {
    "text": ".net graphql init and when I do that I point it to or I'd",
    "start": "2839200",
    "end": "2845079"
  },
  {
    "text": "rather I pointed it to my graphql server so when I ran this I said.net graphql",
    "start": "2845079",
    "end": "2850119"
  },
  {
    "text": "the knit and then I pointed to localhost Port 5100 graphql and that's when it went out and it",
    "start": "2850119",
    "end": "2858700"
  },
  {
    "text": "fetched my graphql schema that ironically it also had generated for me on the",
    "start": "2858700",
    "end": "2864160"
  },
  {
    "text": "server and then again this graphql schema is how or how strawberries Shake knows how to",
    "start": "2864160",
    "end": "2871180"
  },
  {
    "text": "auto generate all the c-sharp for us so incredibly incredibly powerful tool and",
    "start": "2871180",
    "end": "2876940"
  },
  {
    "text": "also just happens to be the most performant most memory efficient and the fastest on the market",
    "start": "2876940",
    "end": "2883540"
  },
  {
    "text": "so can't recommend it enough strawberry shake so let's do uh just a",
    "start": "2883540",
    "end": "2888579"
  },
  {
    "text": "quick review because again I know I skipped over these steps I want to really make sure we point this out we do",
    "start": "2888579",
    "end": "2895540"
  },
  {
    "text": "have to install the strawberry shake tools so again that means opening up the terminal typing in net new tool manifest",
    "start": "2895540",
    "end": "2901900"
  },
  {
    "text": "into your folder so the folder where you have the project then running.net tool",
    "start": "2901900",
    "end": "2907599"
  },
  {
    "text": "install strawberry shake dot tools and then we want to Auto initialize that",
    "start": "2907599",
    "end": "2913480"
  },
  {
    "text": "schema so telling strawberry shake hey go get my schema so that you can do all the work for me and generate all the",
    "start": "2913480",
    "end": "2919720"
  },
  {
    "text": "c-sharp code for me and we do that by saying.net graphql init passing in the URL of our graphql API",
    "start": "2919720",
    "end": "2928660"
  },
  {
    "text": "and then after that like we saw we we can add it to our iservice collection if",
    "start": "2928660",
    "end": "2934119"
  },
  {
    "text": "we're using dependency injection which hopefully we are I think at least that's my favorite way of doing everything but",
    "start": "2934119",
    "end": "2939880"
  },
  {
    "text": "really after that all we're doing is we're just adding these dot graphql files so you can put a dot graphql file",
    "start": "2939880",
    "end": "2947079"
  },
  {
    "text": "anywhere in your project and strawberry shake will start searching your project every time you build if it finds a new",
    "start": "2947079",
    "end": "2952839"
  },
  {
    "text": "one it'll generate all the c-sharp code that goes with it and then when we go back to our code or when we go to write",
    "start": "2952839",
    "end": "2959140"
  },
  {
    "text": "our code all we do is say client dot whatever the query's name is dot execute async",
    "start": "2959140",
    "end": "2966280"
  },
  {
    "text": "and we're done all right well if you haven't had a chance yet",
    "start": "2966280",
    "end": "2972160"
  },
  {
    "text": "here is the link to all of the resources today so make sure to take out your phone grab a picture of this you can",
    "start": "2972160",
    "end": "2978460"
  },
  {
    "text": "share it with your friends share it with your colleagues who maybe couldn't make it today because this is where you can find the slides this is where you can",
    "start": "2978460",
    "end": "2984880"
  },
  {
    "text": "find a link to the GitHub repo where we have the completed sample that we just built together today and I've also",
    "start": "2984880",
    "end": "2991599"
  },
  {
    "text": "included a lot of resources that I used when I was first learning about graphql that I know will be helpful for you too",
    "start": "2991599",
    "end": "2998560"
  },
  {
    "text": "as well thank you [Applause]",
    "start": "2998560",
    "end": "3005900"
  }
]