[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "hey everyone thank you for coming on this like I think it's like a perfect",
    "start": "6330",
    "end": "11980"
  },
  {
    "text": "slot for this conference it's the first day so I'm not too hungover it's in the afternoon so I'd have like my maximum",
    "start": "11980",
    "end": "17680"
  },
  {
    "text": "caffeine intake and I'm just gonna be coasting for the rest of the day so I feel pretty good about things so my name",
    "start": "17680",
    "end": "23619"
  },
  {
    "text": "is Jimmy Bogart you could follow me on twitter at JB guard we're the warning",
    "start": "23619",
    "end": "28660"
  },
  {
    "text": "you may want to UM you know you may want to mute untappd if you follow me you'll see quite a few those tweets coming up",
    "start": "28660",
    "end": "35129"
  },
  {
    "text": "you can find me at github conveniently also I'd github.com /j Bogart and that's",
    "start": "35129",
    "end": "40870"
  },
  {
    "text": "also where you find the presentation here as well as any kind of code and things like that you can find their",
    "start": "40870",
    "end": "46510"
  },
  {
    "text": "github I blog about this subject as well as a lot of others on my website at",
    "start": "46510",
    "end": "51579"
  },
  {
    "text": "Jimmy Bogart calm and for my day job actually work for a company called head",
    "start": "51579",
    "end": "56680"
  },
  {
    "text": "spring out of Austin Texas it was a very long ride on my horse on the way here so he's very tired and for my day job I do",
    "start": "56680",
    "end": "64890"
  },
  {
    "text": "consulting for companies where I build custom complex systems so a lot of things we'll be talking about it really",
    "start": "64890",
    "end": "70600"
  },
  {
    "text": "just let a lessons learned from implementing this kind of architecture over the past I don't know six or seven",
    "start": "70600",
    "end": "76570"
  },
  {
    "text": "years or so and that's the mother junk about me I do a lot of open source stuff and I think I get an award for doing",
    "start": "76570",
    "end": "82750"
  },
  {
    "text": "that I don't really know why I get it but I don't say no I get free stuff so hooray free stuff I've enjoyed my time",
    "start": "82750",
    "end": "89830"
  },
  {
    "text": "in Australia so far there's a few things that I would improve though I have yet to have a single Tim Tam slam which I",
    "start": "89830",
    "end": "97210"
  },
  {
    "text": "think I need to fix that pretty soon and also there's no Starbucks what's come on guys yeah get Jake yeah I mean get your",
    "start": "97210",
    "end": "104320"
  },
  {
    "text": "coffee stuff together please all right so let's let's talk a little bit about vertical slice architecture so I've been",
    "start": "104320",
    "end": "111369"
  },
  {
    "text": "a few talks in this area over the years it's really talking about one of our journey from the previous kinds of",
    "start": "111369",
    "end": "117280"
  },
  {
    "text": "systems we were working with and this kind of architecture so this talk is really about looking at us doing this",
    "start": "117280",
    "end": "124119"
  },
  {
    "text": "kind of architecture for the past six or seven years and talking about some of the lessons learned and patterns we've seen while working in this kind of",
    "start": "124119",
    "end": "130869"
  },
  {
    "text": "architecture so first I want to do a little bit of a history lesson ooh let",
    "start": "130869",
    "end": "136360"
  },
  {
    "text": "me switch over here there we go a little bit of a history",
    "start": "136360",
    "end": "141590"
  },
  {
    "text": "lesson this is of course the Battle of Waterloo so a very large part of my career I was actually Napoleon and which",
    "start": "141590",
    "end": "148159"
  },
  {
    "text": "psy marched all the way to Russia lost almost all my army came all the way back and then was defeated and then for the",
    "start": "148159",
    "end": "153200"
  },
  {
    "text": "rest of my career I was the other guy the Duke of Wellington I think I don't",
    "start": "153200",
    "end": "159920"
  },
  {
    "text": "know we don't really get much history outside of Texas like we were a country you know so anyway so a little bit of a",
    "start": "159920",
    "end": "165680"
  },
  {
    "text": "history lesson that led us up to the vertical slice architecture that we're doing today and it really all started",
    "start": "165680",
    "end": "171859"
  },
  {
    "text": "with us doing a lot of traditional interior style architectures and for the most most of my career this was kind of",
    "start": "171859",
    "end": "179000"
  },
  {
    "start": "174000",
    "end": "174000"
  },
  {
    "text": "the way to build systems into build applications so a lot of the a lot of the documentation from Microsoft when",
    "start": "179000",
    "end": "185030"
  },
  {
    "text": "they were first getting started with net really recommended to build applications and architectures like this where I have",
    "start": "185030",
    "end": "191719"
  },
  {
    "text": "a very kind of very segmented heavily layered kind of architecture where I",
    "start": "191719",
    "end": "197180"
  },
  {
    "text": "have a user interface layer they can only talk to the business logic layer the business logic layer is supposed to",
    "start": "197180",
    "end": "203659"
  },
  {
    "text": "be isolated so it doesn't really do anything else it only has abstraction x' it talks to not any real dependencies",
    "start": "203659",
    "end": "208970"
  },
  {
    "text": "and of course we have to have the data access layer and the database we improved upon this model of course with",
    "start": "208970",
    "end": "215479"
  },
  {
    "text": "domain different designs so now we had a domain layer and repository but is",
    "start": "215479",
    "end": "220939"
  },
  {
    "text": "basically a similar kind of traditional inter architecture for most of my career so and these kind of architectures a lot",
    "start": "220939",
    "end": "229400"
  },
  {
    "text": "of the code we had was then organized by those individual layers so if I had",
    "start": "229400",
    "end": "234470"
  },
  {
    "text": "something in my system that was dealing with like a person or order or an invoice or something like that we'd have",
    "start": "234470",
    "end": "239780"
  },
  {
    "text": "different objects related to the different things that you would want to do with that specific object so we'd",
    "start": "239780",
    "end": "245449"
  },
  {
    "start": "245000",
    "end": "245000"
  },
  {
    "text": "have things like a person object of course and the person object contained the data and probably not any behavior",
    "start": "245449",
    "end": "251959"
  },
  {
    "text": "but mostly just data associated with that object for the user interface part we'd have the person controller so that",
    "start": "251959",
    "end": "258349"
  },
  {
    "text": "was where the main web request came in for you to to interact with this thing for all the business logic of course we",
    "start": "258349",
    "end": "263990"
  },
  {
    "text": "don't want to put that in the user interface layer so we moved all the business logic into service classes and",
    "start": "263990",
    "end": "269240"
  },
  {
    "text": "inevitably those service classes were then named after the main entity or object they were related to so for this that meant",
    "start": "269240",
    "end": "276560"
  },
  {
    "text": "we had a person service that service had to do some kind of data access where",
    "start": "276560",
    "end": "281870"
  },
  {
    "text": "there's queries to go ahead and build out a list of people or something like that or to get individual parts so that",
    "start": "281870",
    "end": "288380"
  },
  {
    "text": "we had to put that inside of a person repository and so we had to be very strict about the kinds of logic we put",
    "start": "288380",
    "end": "294500"
  },
  {
    "text": "in each of these places but one of the things we found was that these became sort of dumping grounds for all the",
    "start": "294500",
    "end": "299570"
  },
  {
    "text": "kinds of logic in her system so anything dealing with a person in terms of business logic all got dumped",
    "start": "299570",
    "end": "306320"
  },
  {
    "text": "into that service class anything dealing with data access again got dumped in the",
    "start": "306320",
    "end": "312470"
  },
  {
    "text": "person repository so those classes and types grew and grew and grew over time until at one point we looked back and",
    "start": "312470",
    "end": "319400"
  },
  {
    "text": "said I don't think I don't think we're doing this right because we keep going down this later architecture all it's",
    "start": "319400",
    "end": "325130"
  },
  {
    "text": "doing is giving its larger and larger objects that just makes merging harder",
    "start": "325130",
    "end": "330800"
  },
  {
    "text": "and harder and harder because more than one person would be editing the service class and we check in and then someone",
    "start": "330800",
    "end": "337190"
  },
  {
    "text": "would change this part in this part we get this conflict of like oh we're just we're all thrashing over these very common objects and these very common",
    "start": "337190",
    "end": "343160"
  },
  {
    "text": "layers whenever I needed to change the system I noticed I knew I was jumping",
    "start": "343160",
    "end": "348260"
  },
  {
    "text": "around the codebase quite a lot in Evernote codebase we would organize all these objects by layer",
    "start": "348260",
    "end": "354710"
  },
  {
    "start": "351000",
    "end": "351000"
  },
  {
    "text": "so we'd have folders for each of the kinds of layers in our systems we had a folder for controllers a folder for",
    "start": "354710",
    "end": "360169"
  },
  {
    "text": "services a folder for repositories we agent this is a simplified view we had a",
    "start": "360169",
    "end": "366080"
  },
  {
    "text": "vegetable-based architecture I think you know what I'm talking about if you buy it you start to cry we certainly cried a lot with the the",
    "start": "366080",
    "end": "372380"
  },
  {
    "text": "onion based architecture we had for so long and each of these folders was actually pulled out in two separate projects so the project structure became",
    "start": "372380",
    "end": "379699"
  },
  {
    "text": "pretty complicated as well so when we ever we wanted to make a change to this system we had to go to all these",
    "start": "379699",
    "end": "385820"
  },
  {
    "text": "different locations to just do something like add a different new field to the screen so we wanted to add a new field",
    "start": "385820",
    "end": "391280"
  },
  {
    "text": "well of course we had to go to the controllers to be able to say this new object needs to have this new set of",
    "start": "391280",
    "end": "396650"
  },
  {
    "text": "properties there we needed to change any kind of services or handlers associated with it so way to go to that folder as",
    "start": "396650",
    "end": "402530"
  },
  {
    "text": "well we had to change how that information was displayed in screen so we had to change the view",
    "start": "402530",
    "end": "407870"
  },
  {
    "text": "models associated with it and the view models folder and then finally we had of course go to the views folder to",
    "start": "407870",
    "end": "413600"
  },
  {
    "text": "actually change how the things were displayed so we found ourselves jumping around a whole lot and made it really",
    "start": "413600",
    "end": "419360"
  },
  {
    "text": "difficult to understand when I made a change all the different things that I need to all the different things I need",
    "start": "419360",
    "end": "425480"
  },
  {
    "text": "a touch because everything was spread out according to the kind of thing it was as opposed to bringing everything",
    "start": "425480",
    "end": "432710"
  },
  {
    "text": "together when it needed to change together so part of this project we",
    "start": "432710",
    "end": "438860"
  },
  {
    "text": "threw out all those notions of any kind of layered architecture and move towards what I called vertical slices I wish I",
    "start": "438860",
    "end": "445490"
  },
  {
    "text": "had a more clever name than this so maybe afterwards someone can like trademark something better than this but this is about the best thing I can come",
    "start": "445490",
    "end": "451070"
  },
  {
    "text": "up with is dealing with code in vertical slices and then when we look at this is instead of thinking about all of our all",
    "start": "451070",
    "end": "459140"
  },
  {
    "text": "of our code and the kind buckets so it's saying all these service kind of code belongs in a service all the repository",
    "start": "459140",
    "end": "465590"
  },
  {
    "text": "kind of code belongs in a repository and instead of looking at what I need to make a change to the system everything I",
    "start": "465590",
    "end": "471590"
  },
  {
    "text": "need a touch in order to make that change why don't we put all that code in one spot so that was the very first",
    "start": "471590",
    "end": "477170"
  },
  {
    "text": "thing we did when we built this kind of vertical slice architecture we looked at I'm making a new change of the system",
    "start": "477170",
    "end": "482930"
  },
  {
    "start": "480000",
    "end": "480000"
  },
  {
    "text": "and we literally wrote it on the whiteboard that says I have to change this class I have to name this task in",
    "start": "482930",
    "end": "488060"
  },
  {
    "text": "this class how can I take all that code that is it is very much related to each",
    "start": "488060",
    "end": "493400"
  },
  {
    "text": "other and pull it all together into one spot so what that when I have to reason",
    "start": "493400",
    "end": "499040"
  },
  {
    "text": "about a feature or understand how the system behaves for specific action or tasks the user is performing I can just",
    "start": "499040",
    "end": "505910"
  },
  {
    "text": "go to one spot to see all the code related to that change now the way we",
    "start": "505910",
    "end": "511610"
  },
  {
    "text": "did this was a lot of refactoring so thankfully we all had resharper licenses because Visual Studio at the time didn't",
    "start": "511610",
    "end": "518330"
  },
  {
    "text": "have anything but I guess you can just use that today JetBrains is a sponsoring so I think you can say you can use",
    "start": "518330",
    "end": "523580"
  },
  {
    "text": "Visual Studio right yeah so I moved all the code related to a change as close",
    "start": "523580",
    "end": "530540"
  },
  {
    "text": "together as possible sometimes in the exact same file I went to those original",
    "start": "530540",
    "end": "537740"
  },
  {
    "text": "layer classes I have something like a some kind of noun based service and that service had",
    "start": "537740",
    "end": "543649"
  },
  {
    "start": "539000",
    "end": "539000"
  },
  {
    "text": "different methods for the different kinds of things you would do with that for that domain object and I moved all",
    "start": "543649",
    "end": "549949"
  },
  {
    "text": "those individual methods into individual classes for each of the kinds of things it would do so if I could approve reject",
    "start": "549949",
    "end": "557029"
  },
  {
    "text": "or flag an invoice instead of having one class that had every single kind of thing you'd do with that thing in one",
    "start": "557029",
    "end": "563959"
  },
  {
    "text": "single file I moved each of the different operations that would never be executed with each",
    "start": "563959",
    "end": "569180"
  },
  {
    "text": "other into their own individual classes so when I changed for example the",
    "start": "569180",
    "end": "574279"
  },
  {
    "text": "approve function I don't have to worry about the side effects with rejecting or",
    "start": "574279",
    "end": "580069"
  },
  {
    "text": "flagging an invoice because all the code related to that kind of operation was separated out from all the different",
    "start": "580069",
    "end": "586190"
  },
  {
    "text": "other different pieces now this did result in like way more classes in my",
    "start": "586190",
    "end": "592399"
  },
  {
    "text": "system so if you like to have fewer classes then this is definitely not the architecture for you if you like to have",
    "start": "592399",
    "end": "598490"
  },
  {
    "text": "things very much organized and separate from each other so you don't to worry about anything messing with each other",
    "start": "598490",
    "end": "604819"
  },
  {
    "text": "then this is what we found work really well for us so this is our first step",
    "start": "604819",
    "end": "610610"
  },
  {
    "text": "was just taking all of those individual methods and moving them to separate",
    "start": "610610",
    "end": "615949"
  },
  {
    "text": "classes then we looked at each class and said you know what these all look similar but not quite the same they look",
    "start": "615949",
    "end": "623329"
  },
  {
    "text": "like they're just performing one action so they're just doing an approval they're doing a rejection or doing a",
    "start": "623329",
    "end": "628940"
  },
  {
    "text": "flagging and there's some kind of like input to the thing it does the work and then there's some kind of output so we",
    "start": "628940",
    "end": "635660"
  },
  {
    "text": "started explicitly modeling our classes to represent that kind of abstraction so",
    "start": "635660",
    "end": "641269"
  },
  {
    "text": "instead of representing our abstractions in terms of like services and repositories and said we had a request",
    "start": "641269",
    "end": "647420"
  },
  {
    "text": "to do something then the work itself and then finally whatever the output of that",
    "start": "647420",
    "end": "653089"
  },
  {
    "text": "thing was so looked something like this everything and our system had some kind",
    "start": "653089",
    "end": "658519"
  },
  {
    "start": "654000",
    "end": "654000"
  },
  {
    "text": "of input then some kind of handler that would handle that request to do the work and then sometimes that work to be done",
    "start": "658519",
    "end": "666680"
  },
  {
    "text": "it would have some kind of output so over the course of like 2 or 3 years I",
    "start": "666680",
    "end": "672589"
  },
  {
    "text": "did this pattern several projects and I got to the point where I said just copying the same code over and over again and even though I do",
    "start": "672589",
    "end": "679370"
  },
  {
    "text": "a lot of open-source I'm really I don't really enjoy doing it it's not that fun to get all these Stack Overflow",
    "start": "679370",
    "end": "684649"
  },
  {
    "text": "questions and people complaining about your stuff so I eventually said okay fine I'll create an open source library",
    "start": "684649",
    "end": "691100"
  },
  {
    "text": "that just I don't have to keep copying this code over and over again and so I",
    "start": "691100",
    "end": "696740"
  },
  {
    "text": "pulled that code out to represented this kind of pattern of requests handlers and",
    "start": "696740",
    "end": "703040"
  },
  {
    "text": "responses into a full-fledged library and this library is called mediator or mediate are I don't know how to",
    "start": "703040",
    "end": "709310"
  },
  {
    "start": "704000",
    "end": "704000"
  },
  {
    "text": "pronounce it right even though I named the thing I should probably get that sorted out now of course have you",
    "start": "709310",
    "end": "715160"
  },
  {
    "text": "noticed the name it was I made it around the time signal art came out and I'm not that clever with names so that's why",
    "start": "715160",
    "end": "721399"
  },
  {
    "text": "it's called mediate are and it's also very Google a ball so that's good I always want that anyway so what I did",
    "start": "721399",
    "end": "727459"
  },
  {
    "text": "was I took all those disparate request objects that I just each time made up on my own and said let's just represent",
    "start": "727459",
    "end": "733970"
  },
  {
    "text": "those requests as a first-class citizen in our application and so each request",
    "start": "733970",
    "end": "739310"
  },
  {
    "text": "is now represented by some class that implements this interface I request of T now that T actually represents the",
    "start": "739310",
    "end": "746720"
  },
  {
    "text": "response type so every request is inherently coupled to the response that",
    "start": "746720",
    "end": "752240"
  },
  {
    "text": "it will produce and in the middle from ticket from that request type to the response type is the magic handler that",
    "start": "752240",
    "end": "760640"
  },
  {
    "text": "just is like the stupidest interface possible which is take a request and return a response very exciting stuff",
    "start": "760640",
    "end": "768140"
  },
  {
    "text": "right of course we're all a sync a wheat stuff right so now instead of just returning T I have to return tasks of T",
    "start": "768140",
    "end": "776110"
  },
  {
    "text": "unfortunately it's everywhere right everything we have to do is task oriented so anyway now it has a task of",
    "start": "776110",
    "end": "783110"
  },
  {
    "text": "T as its return just in case I need to do async stuff so everything in my",
    "start": "783110",
    "end": "789050"
  },
  {
    "text": "system now revolves around these individual requests they handler to do the work and then finally whatever",
    "start": "789050",
    "end": "795470"
  },
  {
    "text": "response comes out the other side now registering all my handlers is pretty straightforward just this is a speii net",
    "start": "795470",
    "end": "802490"
  },
  {
    "start": "800000",
    "end": "800000"
  },
  {
    "text": "core dependency injection junk so I try to make it as easy as possible to add this to my system",
    "start": "802490",
    "end": "807859"
  },
  {
    "text": "so down there you could have there's a line that says services dot add mediator and you tell we're to look for your",
    "start": "807859",
    "end": "813079"
  },
  {
    "text": "handlers and knows how to register all of them so I just want to make it as easy as possible to add this to my",
    "start": "813079",
    "end": "818569"
  },
  {
    "text": "applications so everything in my system was revolved around these requests but",
    "start": "818569",
    "end": "826399"
  },
  {
    "text": "it got a little bit more subtle than that and they types a request that have my system and I found that most of my",
    "start": "826399",
    "end": "832159"
  },
  {
    "start": "832000",
    "end": "832000"
  },
  {
    "text": "systems actually all of them had different kinds of requests I typically",
    "start": "832159",
    "end": "837769"
  },
  {
    "text": "build web applications whether it's server-side web applications NBC's kind of traditional server-side rendering NBC",
    "start": "837769",
    "end": "843919"
  },
  {
    "text": "or even like single page applications or just pure web api's all those",
    "start": "843919",
    "end": "849559"
  },
  {
    "text": "applications basically revolve around gets and posts I know there are more exotic like HTTP methods than post but",
    "start": "849559",
    "end": "857629"
  },
  {
    "text": "I'd say 99% of the time the systems I build either get information outs or I'm",
    "start": "857629",
    "end": "863269"
  },
  {
    "text": "trying to change something and so those can be represented as requests to either get data in the form of a query or to",
    "start": "863269",
    "end": "872449"
  },
  {
    "text": "change something in the form of a post so my gets then represented queries and",
    "start": "872449",
    "end": "878720"
  },
  {
    "text": "those queries were kind of requests where the request was a query there'd be some kind of handler to do whatever work",
    "start": "878720",
    "end": "885169"
  },
  {
    "text": "was necessary and finally that would return the response and that response was the data that you were interested in",
    "start": "885169",
    "end": "891879"
  },
  {
    "text": "the post represented the commands that is I want to change something in the",
    "start": "891879",
    "end": "897139"
  },
  {
    "text": "system and then these also had a similar kind of structure and that the commands now were the requests that have some",
    "start": "897139",
    "end": "904129"
  },
  {
    "text": "kind of handler to handle that request seduced to change some information and then finally of course we have that",
    "start": "904129",
    "end": "910850"
  },
  {
    "text": "response know one of the big things I wanted to make sure when I did this was",
    "start": "910850",
    "end": "915859"
  },
  {
    "text": "to encapsulate everything necessary to perform that action that as the handlers themselves wanted to have everything",
    "start": "915859",
    "end": "922489"
  },
  {
    "text": "that it needed to do to be represented inside of those query and command objects so I had this very simplified",
    "start": "922489",
    "end": "929779"
  },
  {
    "start": "925000",
    "end": "925000"
  },
  {
    "text": "view of the world and I like simple I'm not I don't like I used to like complex",
    "start": "929779",
    "end": "934970"
  },
  {
    "text": "things and to do also like I like to keep things very simple now and the simplest thing I can think of was I had",
    "start": "934970",
    "end": "941180"
  },
  {
    "text": "one object going in something does the work and then one object coming out there's not like all these weird context",
    "start": "941180",
    "end": "947420"
  },
  {
    "text": "things where I can reach out to do other stuff nope just like everything that you need to do the work must be passed in through",
    "start": "947420",
    "end": "952940"
  },
  {
    "text": "that request object and then everything that you needed to worry about on the other side is passed out through the",
    "start": "952940",
    "end": "958100"
  },
  {
    "text": "response object there's no other kind of indirect inputs or outputs so we then",
    "start": "958100",
    "end": "965660"
  },
  {
    "text": "took this another step further so this is just talking about the kind of the main meat of the work and this this",
    "start": "965660",
    "end": "971510"
  },
  {
    "text": "middle handler we started to move everything related to be able to handle that request into that single that",
    "start": "971510",
    "end": "979880"
  },
  {
    "text": "single class that represented everything to do so we had more or less complete encapsulation of how that work needed to",
    "start": "979880",
    "end": "987950"
  },
  {
    "start": "983000",
    "end": "983000"
  },
  {
    "text": "be done so that when the request came in I don't it was basically a black box I don't know what the internals were doing",
    "start": "987950",
    "end": "993560"
  },
  {
    "text": "it would do all the work and then finally out coming the other side was a response and as much as possible we try",
    "start": "993560",
    "end": "999410"
  },
  {
    "text": "to push all the behavior inside of these handlers so that I had one spot to go to",
    "start": "999410",
    "end": "1005320"
  },
  {
    "text": "to understand what was all the logic necessary to be able to fulfill those requests so inner systems we had again",
    "start": "1005320",
    "end": "1015370"
  },
  {
    "text": "queries and commands modeling the queries started with that initial",
    "start": "1015370",
    "end": "1021490"
  },
  {
    "start": "1018000",
    "end": "1018000"
  },
  {
    "text": "request object upfront now some of our queries were very very simple that is it",
    "start": "1021490",
    "end": "1027939"
  },
  {
    "text": "was just a class to represent the requests to get information and so these classes may not have any data on them",
    "start": "1027940",
    "end": "1034030"
  },
  {
    "text": "whatsoever and you may look at it and say well gosh shouldn't I kind of a waste because it's just a type with no",
    "start": "1034030",
    "end": "1039880"
  },
  {
    "text": "information but that that class represents a concept and that concept is requesting information so in this case",
    "start": "1039880",
    "end": "1046089"
  },
  {
    "text": "this class represents the query for some index page in this case maybe the index page for people or invoices or orders",
    "start": "1046090",
    "end": "1054430"
  },
  {
    "text": "whatever that might be this represents that distinct and unique request for that data one thing you also notice here",
    "start": "1054430",
    "end": "1061900"
  },
  {
    "text": "is that I'm using inter classes to basically scope this request object so",
    "start": "1061900",
    "end": "1069040"
  },
  {
    "text": "instead of me having like generic reusable queries that it can be used to all cross my system I tried to not read",
    "start": "1069040",
    "end": "1074950"
  },
  {
    "text": "use as much as possible and for for us actually reuse was a four-letter word even though it's five letters some spunk",
    "start": "1074950",
    "end": "1081640"
  },
  {
    "text": "spelling I guess he can jam thanks together anyway we tried as much as possible not to try to share logic",
    "start": "1081640",
    "end": "1087490"
  },
  {
    "text": "between different handlers to say let's keep everything as distinct as possible and using these inter types let us",
    "start": "1087490",
    "end": "1093190"
  },
  {
    "text": "really represent that concept that these things really belong inside the scope of this one single page so remember",
    "start": "1093190",
    "end": "1102580"
  },
  {
    "text": "Aquarius could get a little more complicated so if we needed to have some kind of parameterization going on with their queries well then this these would",
    "start": "1102580",
    "end": "1108910"
  },
  {
    "text": "just be additional properties on top of our query object so this is for example represents viewing as some additional",
    "start": "1108910",
    "end": "1115600"
  },
  {
    "text": "details for I guess like a course or something and so all the different parameters that you might see in the",
    "start": "1115600",
    "end": "1121210"
  },
  {
    "text": "either the the URL or any kind of parameters I'm pulling out of context I'm just passing through as individual",
    "start": "1121210",
    "end": "1128020"
  },
  {
    "text": "properties and I try to capture all the data that the query handler needs in",
    "start": "1128020",
    "end": "1133150"
  },
  {
    "text": "order to perform its work and put it in this individual query object the idea is",
    "start": "1133150",
    "end": "1138700"
  },
  {
    "text": "that if I want to know how does this query handler behave what information does it need I again just have this one",
    "start": "1138700",
    "end": "1144760"
  },
  {
    "text": "single spot to go to to see what the result is or to see what the inputs are",
    "start": "1144760",
    "end": "1151290"
  },
  {
    "text": "now of course my query does implement this interface I request of T and so",
    "start": "1151290",
    "end": "1156700"
  },
  {
    "text": "this tells me what the response object looks like as well so this query is the request that returns this other model",
    "start": "1156700",
    "end": "1163060"
  },
  {
    "text": "class so those two things are always going to be explicitly linked to each other I will never have the case where a",
    "start": "1163060",
    "end": "1170800"
  },
  {
    "text": "query could potentially return multiple response types each individual request only returns and only represents being",
    "start": "1170800",
    "end": "1177790"
  },
  {
    "text": "able to get one kind of result and again it's just this avoid reuse as much as possible we can do one more even more",
    "start": "1177790",
    "end": "1186460"
  },
  {
    "start": "1186000",
    "end": "1186000"
  },
  {
    "text": "complicated things like paging and sorting and filtering all the crazy things you can do with with a",
    "start": "1186460",
    "end": "1192910"
  },
  {
    "text": "complicated search page these again were all just properties I would put on my query object and very often times I",
    "start": "1192910",
    "end": "1199330"
  },
  {
    "text": "could bind that query object directly to the request parameters to make my life a little bit easier",
    "start": "1199330",
    "end": "1205560"
  },
  {
    "text": "so now that I have my different query objects my query requests modeled I now",
    "start": "1207220",
    "end": "1212830"
  },
  {
    "text": "turn my attention to the response objects now the response objects don't just live by themselves like none of my",
    "start": "1212830",
    "end": "1218620"
  },
  {
    "start": "1213000",
    "end": "1213000"
  },
  {
    "text": "systems I just take those responses and just directly give them to the end user as objects they have to go through some",
    "start": "1218620",
    "end": "1224290"
  },
  {
    "text": "sort of transformation so typically that response object is passed to something",
    "start": "1224290",
    "end": "1229600"
  },
  {
    "text": "that then renders that information to the screen somehow so for this example",
    "start": "1229600",
    "end": "1234880"
  },
  {
    "text": "let's just pretend like we're using classic MVC style architecture and that response is then going to be passed",
    "start": "1234880",
    "end": "1241000"
  },
  {
    "text": "directly to the view so the idea is that that response object is artistically",
    "start": "1241000",
    "end": "1246030"
  },
  {
    "text": "crafted just for that one view and for nobody else so I don't try to share",
    "start": "1246030",
    "end": "1252910"
  },
  {
    "text": "responses I make that view or whatever page it is only use that one single response object and whatever I need to",
    "start": "1252910",
    "end": "1259900"
  },
  {
    "text": "be able to render that screen I have to have in that response so it's a one-stop",
    "start": "1259900",
    "end": "1265240"
  },
  {
    "text": "shop for all the data I could possibly need to be able to perform whatever thing I need to do to the final end user",
    "start": "1265240",
    "end": "1271030"
  },
  {
    "text": "in this case rendering HTML so some of",
    "start": "1271030",
    "end": "1276820"
  },
  {
    "text": "our responses or simple they just be like here's some just dumb properties on",
    "start": "1276820",
    "end": "1283000"
  },
  {
    "start": "1279000",
    "end": "1279000"
  },
  {
    "text": "there and this is all the information that I need to show on the screen now you'll notice here that it's not",
    "start": "1283000",
    "end": "1288220"
  },
  {
    "text": "connected to any kind of like domain object or entity framework thing or and hibernate thing it's not connected any",
    "start": "1288220",
    "end": "1294430"
  },
  {
    "text": "RM the idea is that everything that's necessary to be able to show that information is then captured in this",
    "start": "1294430",
    "end": "1300130"
  },
  {
    "text": "object and I don't have to go back out to anything else to be able to get data everything that's that I need is in this",
    "start": "1300130",
    "end": "1306130"
  },
  {
    "text": "one single object but things could get complicated I could have like",
    "start": "1306130",
    "end": "1311880"
  },
  {
    "text": "parent-child or like the parent information and then detail information and so for those kinds of things",
    "start": "1311880",
    "end": "1318250"
  },
  {
    "text": "I could have this concept of an inner class again so if I needed to show another list of information instead of",
    "start": "1318250",
    "end": "1324460"
  },
  {
    "text": "again me trying to share those classes and types outside I explicitly modeled",
    "start": "1324460",
    "end": "1329830"
  },
  {
    "text": "those as inner types so that it basically prevents us from trying to share those objects outside of the scope",
    "start": "1329830",
    "end": "1336630"
  },
  {
    "text": "there may be other pages in which I show similar information but I want to guarantee that if I need",
    "start": "1336630",
    "end": "1343030"
  },
  {
    "text": "to change this screen I can change this class and not care about about affecting",
    "start": "1343030",
    "end": "1348430"
  },
  {
    "text": "anybody else before when I had that layered architecture we were very much sharing different methods and classes",
    "start": "1348430",
    "end": "1355180"
  },
  {
    "text": "and types throughout our entire application and so we kept having this problem that I need to change some",
    "start": "1355180",
    "end": "1360340"
  },
  {
    "text": "method in my repository but that methods being used in three places so I asked myself well do I need to up do I need to",
    "start": "1360340",
    "end": "1367390"
  },
  {
    "text": "like break it out into its own method do those other classes and other places that's using it also need this new",
    "start": "1367390",
    "end": "1372760"
  },
  {
    "text": "change that I'm making with this I don't have to care about anybody else really this is like there's like The Selfish",
    "start": "1372760",
    "end": "1377800"
  },
  {
    "text": "Gene here or it says I can just build whatever I need for my individual screen and I don't care about anybody else this",
    "start": "1377800",
    "end": "1383590"
  },
  {
    "text": "is just what I need now in some cases we",
    "start": "1383590",
    "end": "1390340"
  },
  {
    "text": "would see the commands and queries sort of linked together and you can think of",
    "start": "1390340",
    "end": "1395590"
  },
  {
    "text": "this in terms of viewing a form on a screen so if I'm editing something or creating something you initially have",
    "start": "1395590",
    "end": "1401830"
  },
  {
    "text": "that first request which is to show the form well if something needs to actually generate that HTML for the form and so",
    "start": "1401830",
    "end": "1407800"
  },
  {
    "text": "we'd have an initial query to be able to show that form so we've had this kind of duality in which a queries response type",
    "start": "1407800",
    "end": "1416290"
  },
  {
    "start": "1412000",
    "end": "1412000"
  },
  {
    "text": "would actually be the command and then the command would eventually be submitted back up through the form to",
    "start": "1416290",
    "end": "1422110"
  },
  {
    "text": "actually do the work so these things would kind of be chained together I'd have a query to build out the command",
    "start": "1422110",
    "end": "1427900"
  },
  {
    "text": "which was the form and then I'd submit the form again to then sort of rehydrate the command to actually perform the work",
    "start": "1427900",
    "end": "1435090"
  },
  {
    "text": "so you see this a lot in MVC applications where you have and get in a posts that are doing like the git is",
    "start": "1435090",
    "end": "1441580"
  },
  {
    "text": "returning a view model and then that same view model is going back into the post this is the same kind of thing here",
    "start": "1441580",
    "end": "1446650"
  },
  {
    "text": "where the queries response is the commands that I bind to the screen and then finally I think that same object",
    "start": "1446650",
    "end": "1452320"
  },
  {
    "text": "and push it back through in this request the final request object here so with my",
    "start": "1452320",
    "end": "1462790"
  },
  {
    "text": "query inputs and outputs represented as these requests and objects we then turned our attention to the commands now",
    "start": "1462790",
    "end": "1470560"
  },
  {
    "text": "commands are going to be a little bit different than the queries the typical query request don't have a lot of properties",
    "start": "1470560",
    "end": "1476740"
  },
  {
    "text": "on them but in our command requests I need to have all the information necessary to perform the action on those",
    "start": "1476740",
    "end": "1484630"
  },
  {
    "start": "1479000",
    "end": "1479000"
  },
  {
    "text": "request objects itself so our request objects would include all the data",
    "start": "1484630",
    "end": "1490720"
  },
  {
    "start": "1489000",
    "end": "1489000"
  },
  {
    "text": "necessary to be able to perform that action and most typically I could just look on the form on the screen and say",
    "start": "1490720",
    "end": "1496210"
  },
  {
    "text": "ok I've got these input fields so just take all these input fields and represent them as first-class properties",
    "start": "1496210",
    "end": "1502060"
  },
  {
    "text": "I'm a command object and then rely on whatever asp net core or whatever",
    "start": "1502060",
    "end": "1507970"
  },
  {
    "text": "server-side framework necessary to be able to take those raw request variables and then bind them to this object to be",
    "start": "1507970",
    "end": "1514060"
  },
  {
    "text": "able to be processed later on I wanted to make sure though that whatever I",
    "start": "1514060",
    "end": "1520510"
  },
  {
    "text": "needed to do to be able to perform this activity whatever information I needed",
    "start": "1520510",
    "end": "1525580"
  },
  {
    "text": "had to be represented on this class itself oftentimes we saw that some of our some of our kind of business logic",
    "start": "1525580",
    "end": "1532210"
  },
  {
    "text": "would do some work with it and reach out somewhere else like oh I also need to know who the current user is I need to",
    "start": "1532210",
    "end": "1537670"
  },
  {
    "text": "know like what time it is so we said no none of that everything you need has to be on this object so that we can we can",
    "start": "1537670",
    "end": "1544600"
  },
  {
    "text": "effectively reason about what the work it's actually doing behind the scenes this is a little this is kind of hard",
    "start": "1544600",
    "end": "1550150"
  },
  {
    "text": "for us because it's so easy just to be like who's the current user but it was difficult for us to reason about the",
    "start": "1550150",
    "end": "1555880"
  },
  {
    "text": "behavior without understanding that this is all that's necessary to perform that work on this individual object by the",
    "start": "1555880",
    "end": "1563320"
  },
  {
    "text": "way it starts to look very much like messaging except this is in process I will say if you're doing this this is",
    "start": "1563320",
    "end": "1568600"
  },
  {
    "text": "all synchronous in process don't just take these and decide I'm just going to throw them out into some kind of message",
    "start": "1568600",
    "end": "1574750"
  },
  {
    "text": "bus or on a cue you will have a very bad time dot gif or gif because our",
    "start": "1574750",
    "end": "1581530"
  },
  {
    "text": "interactions are really meant to be synchronous so you just can't take these and say we'll just make everything asynchronous and the application will",
    "start": "1581530",
    "end": "1587380"
  },
  {
    "text": "work just hunky-dory so looking at these properties these come directly from a",
    "start": "1587380",
    "end": "1594640"
  },
  {
    "start": "1593000",
    "end": "1593000"
  },
  {
    "text": "form on the screen so each of those properties I usually use to be able to build out this HTML as well so I knew",
    "start": "1594640",
    "end": "1602890"
  },
  {
    "text": "that this had an enrollment date because my form was or the HTML was built based",
    "start": "1602890",
    "end": "1608200"
  },
  {
    "text": "on that proper existing and so when it finally gets posted back up it's all bound back",
    "start": "1608200",
    "end": "1613600"
  },
  {
    "text": "together on the other side now so far I",
    "start": "1613600",
    "end": "1619210"
  },
  {
    "text": "know this leg this application is not doing a whole lot it's just like basically crud based operations I get it",
    "start": "1619210",
    "end": "1626799"
  },
  {
    "text": "I'm not that I'm not that creative with sample applications I just steal from others and so this is one of Microsoft's",
    "start": "1626799",
    "end": "1633370"
  },
  {
    "text": "example that didn't have a lot complicated stuff so let's pretend that we don't have just a simple crud",
    "start": "1633370",
    "end": "1638650"
  },
  {
    "text": "application and we have something that is doing more complicated work and that more complicated work instead of just",
    "start": "1638650",
    "end": "1644470"
  },
  {
    "text": "having these kind of very simple crud based operations associated instead we'd have individual operations represented",
    "start": "1644470",
    "end": "1651490"
  },
  {
    "start": "1650000",
    "end": "1650000"
  },
  {
    "text": "as tasks to do for the end user so this one for example and as a mock-up of a",
    "start": "1651490",
    "end": "1657970"
  },
  {
    "text": "task based UI for a student so I can view the student details but I also have",
    "start": "1657970",
    "end": "1663370"
  },
  {
    "text": "the ability to transfer that students to a different course I can correct some grading or it can adjust their schedule",
    "start": "1663370",
    "end": "1670390"
  },
  {
    "text": "to move some of their classes around now each of these kinds of tasks and operations are very distinct from each",
    "start": "1670390",
    "end": "1676210"
  },
  {
    "text": "other so I try to represent every single unique thing you can do as individual",
    "start": "1676210",
    "end": "1681220"
  },
  {
    "text": "requests handlers and responses in my system so when I move towards this of",
    "start": "1681220",
    "end": "1687549"
  },
  {
    "text": "vertical slice architecture it fits really well with task based you eyes because I represent each of those",
    "start": "1687549",
    "end": "1694540"
  },
  {
    "text": "individual requests as the tasks you could do on the screen and every task as",
    "start": "1694540",
    "end": "1699790"
  },
  {
    "text": "an individual request and try to couple those two things as much as possible with each other so I have transferring a",
    "start": "1699790",
    "end": "1707799"
  },
  {
    "text": "student I've correcting a students and I have the scheduling of the student and each of those requests is going to be",
    "start": "1707799",
    "end": "1713020"
  },
  {
    "text": "distinct from each other each of those responses is going to be distinct from each other and naturally of course the",
    "start": "1713020",
    "end": "1718360"
  },
  {
    "text": "actual handling logic to do whatever it's necessary to perform those operations again I'm going to keep those",
    "start": "1718360",
    "end": "1723700"
  },
  {
    "text": "completely separate from each other as well all right so we've talked about the",
    "start": "1723700",
    "end": "1730419"
  },
  {
    "text": "query requests query responses command requests next up are the command responses and this is probably the most",
    "start": "1730419",
    "end": "1737230"
  },
  {
    "start": "1734000",
    "end": "1734000"
  },
  {
    "text": "controversial part of this talk even though I've never done before I'm gonna assume it's controversial",
    "start": "1737230",
    "end": "1742630"
  },
  {
    "text": "because this is this this part is a part that tends to fly against some of the",
    "start": "1742630",
    "end": "1747700"
  },
  {
    "text": "traditional object-oriented advice people get so most advice I hear about commands is that commands aren't",
    "start": "1747700",
    "end": "1754270"
  },
  {
    "text": "supposed to return anything which may be the case for a lot of our commands that",
    "start": "1754270",
    "end": "1759910"
  },
  {
    "start": "1758000",
    "end": "1758000"
  },
  {
    "text": "I just have a some kind of requests to go in and do something the handler does there's to work and they don't have any",
    "start": "1759910",
    "end": "1765580"
  },
  {
    "text": "kind of response but for a lot of our systems we can't just stop with nothing I'm like okay did the thing but like",
    "start": "1765580",
    "end": "1771550"
  },
  {
    "text": "what was the what was the result of that thing it did it did it succeed that it failed am I supposed to just look for exceptions so we started were so",
    "start": "1771550",
    "end": "1778590"
  },
  {
    "text": "representing the kind of result of the operation as some kind of individual",
    "start": "1778590",
    "end": "1784720"
  },
  {
    "text": "result object so these days a lot of our commands actually do return something to",
    "start": "1784720",
    "end": "1789910"
  },
  {
    "text": "tell the end user like and this was some result of your operation so that we not to make like another request to say okay",
    "start": "1789910",
    "end": "1796180"
  },
  {
    "text": "now what did you just do was that was that successful or not the simplest",
    "start": "1796180",
    "end": "1802240"
  },
  {
    "text": "approach would be to just represent the result of our operation as a simple",
    "start": "1802240",
    "end": "1807820"
  },
  {
    "start": "1803000",
    "end": "1803000"
  },
  {
    "text": "true/false success or fail so our requests implement this I request of",
    "start": "1807820",
    "end": "1813070"
  },
  {
    "text": "bool and then I return the results as like good or bad yes it succeeded or no",
    "start": "1813070",
    "end": "1818800"
  },
  {
    "text": "it did not there could be some cases in which I need to know like some more details",
    "start": "1818800",
    "end": "1824830"
  },
  {
    "text": "about what happened so let's say I'm actually in this application creating something like creating a student or",
    "start": "1824830",
    "end": "1830290"
  },
  {
    "text": "creating an order so I need to know some information about what just happened so in this case my response could be the",
    "start": "1830290",
    "end": "1838000"
  },
  {
    "start": "1833000",
    "end": "1833000"
  },
  {
    "text": "ID of the thing that's created so the handler after it's done creating the",
    "start": "1838000",
    "end": "1844600"
  },
  {
    "text": "object will return back out the ID of whatever was created so that I can",
    "start": "1844600",
    "end": "1849940"
  },
  {
    "text": "finally at the end say okay I've got the ID then typically do some kind of redirect to say okay and now here's the",
    "start": "1849940",
    "end": "1856390"
  },
  {
    "text": "thing you just created as opposed to just redirecting to the list of things and it's left to the end-user to figure",
    "start": "1856390",
    "end": "1861520"
  },
  {
    "text": "out wait which one was the one I just created was it that one no you want to be like okay here is the one that you actually created and we can only do that",
    "start": "1861520",
    "end": "1868270"
  },
  {
    "text": "if we have the actual ID coming out the other side",
    "start": "1868270",
    "end": "1873090"
  },
  {
    "text": "now we can get like way more complicated than this if I need to have maybe more",
    "start": "1874859",
    "end": "1880539"
  },
  {
    "text": "complex response types and maybe I need to know not just that it was success or failed but like why did it succeed or",
    "start": "1880539",
    "end": "1886989"
  },
  {
    "text": "why did it fail so we started to build more complex response objects we call these command results",
    "start": "1886989",
    "end": "1892809"
  },
  {
    "start": "1892000",
    "end": "1892000"
  },
  {
    "text": "this command results represented either a success or fail but when it failed I",
    "start": "1892809",
    "end": "1897970"
  },
  {
    "text": "had to know what was the reason why it failed and I can show that reason back to the end user it could have a more",
    "start": "1897970",
    "end": "1904359"
  },
  {
    "text": "complex payload so now I have not just a response than just a true or false or",
    "start": "1904359",
    "end": "1909849"
  },
  {
    "text": "just a failure reason or a good now I could put any kind of payload in there so maybe it's maybe it's the flattened",
    "start": "1909849",
    "end": "1916239"
  },
  {
    "text": "out object maybe it's here's the here's the main thing that you did and here's all some other data as part of it now I",
    "start": "1916239",
    "end": "1922119"
  },
  {
    "text": "have the ability to return back outs some more pertinent information to the end user for what they just the",
    "start": "1922119",
    "end": "1928599"
  },
  {
    "text": "operation that just performs so some for",
    "start": "1928599",
    "end": "1934149"
  },
  {
    "text": "some of the more complex applications they're doing more complicated work behind the scenes for their commands then I start to represent the results of",
    "start": "1934149",
    "end": "1941229"
  },
  {
    "text": "those commands as another kind of first-class citizen in our application I",
    "start": "1941229",
    "end": "1946979"
  },
  {
    "text": "would say don't start with this it's tempting to say let's just choose the most complicated in solution because you",
    "start": "1946979",
    "end": "1955659"
  },
  {
    "text": "never know if we might need all this but I tend to find it's easier just to start with the simplest thing that could possibly work and then know that this",
    "start": "1955659",
    "end": "1962830"
  },
  {
    "text": "thing exists so that you have a place to refactor towards if things do get complicated I also like to have this as",
    "start": "1962830",
    "end": "1968950"
  },
  {
    "text": "sort of a kind of a blanket response across my entire system because it annoys developers I'm like ah I just can",
    "start": "1968950",
    "end": "1975369"
  },
  {
    "text": "I just returned nothing like nobody cares I don't need to no one's acting on this result so I'd say only introduced",
    "start": "1975369",
    "end": "1980979"
  },
  {
    "text": "this in the cases where you actually need to act on the result itself so once",
    "start": "1980979",
    "end": "1988960"
  },
  {
    "text": "I have the requests and the responses for both commands and queries modeled in my system now an a actually do some work",
    "start": "1988960",
    "end": "1996399"
  },
  {
    "text": "and this is like the thing I really want to focus on which is handling these requests and the work that I find inside",
    "start": "1996399",
    "end": "2003299"
  },
  {
    "text": "of them first up let's look at query handlers",
    "start": "2003299",
    "end": "2008340"
  },
  {
    "text": "now again the whole idea behind this is the work to be done for hailing a query",
    "start": "2008340",
    "end": "2013710"
  },
  {
    "text": "should be completely encapsulated inside of that handler from the outside perspective all I see is a request going",
    "start": "2013710",
    "end": "2019560"
  },
  {
    "text": "in some black box and some response going out so have whatever tools",
    "start": "2019560",
    "end": "2025110"
  },
  {
    "text": "necessary or whatever means at my disposal to be able to do whatever that work is so it could be something as",
    "start": "2025110",
    "end": "2030930"
  },
  {
    "text": "simple as using auto map because like I have to show this tool right like I'm not almost required to at this point I'm",
    "start": "2030930",
    "end": "2039630"
  },
  {
    "text": "using my preferred mode of using out a mapper which is to use linked projections to be able to project",
    "start": "2039630",
    "end": "2045060"
  },
  {
    "text": "straight out from my domain model directly out to a DTO if you're using autumn a per and you don't know about",
    "start": "2045060",
    "end": "2050970"
  },
  {
    "text": "project two I would say please look it up because if you get one thing out of this talk it is if using on a mapper",
    "start": "2050970",
    "end": "2056850"
  },
  {
    "text": "please do this you will have the least amount of problems and least amount of headache if you just go this route and",
    "start": "2056850",
    "end": "2062100"
  },
  {
    "text": "what this is doing behind the scenes is converting the configuration of how to",
    "start": "2062100",
    "end": "2067379"
  },
  {
    "text": "go from a source to a destination object into a link select projection and ORM",
    "start": "2067380",
    "end": "2075510"
  },
  {
    "text": "know how to take that link select projection projection and translate that directly into sequel so this is",
    "start": "2075510",
    "end": "2082740"
  },
  {
    "text": "equivalent to a sequel view where I have a predefined select statement to say",
    "start": "2082740",
    "end": "2088919"
  },
  {
    "text": "select this directly into this DTO so with projections I completely skip any",
    "start": "2088920",
    "end": "2094500"
  },
  {
    "text": "kind of intermediate rich domain model and they go straight from sequel duty to DTO except with this method I don't have",
    "start": "2094500",
    "end": "2101880"
  },
  {
    "text": "any kind of handcrafted artisanal bespoke sequel that I know we all love",
    "start": "2101880",
    "end": "2107340"
  },
  {
    "text": "to write right so with this model I go straight from that sequel straight to my",
    "start": "2107340",
    "end": "2114240"
  },
  {
    "text": "object but we can still do sequel if you want to like if we want to just drop down to using raw sequel for whatever",
    "start": "2114240",
    "end": "2120450"
  },
  {
    "start": "2116000",
    "end": "2116000"
  },
  {
    "text": "reasons maybe we we want to show off that we know how to do cross join their correct way or we want to show people",
    "start": "2120450",
    "end": "2127380"
  },
  {
    "text": "how to use common table expressions like you can still do a sequel as long if you want to it's it's just fine I would say",
    "start": "2127380",
    "end": "2133950"
  },
  {
    "text": "if someone's forcing you to do store procedures you could still do that I'm sorry for you if you have to still do",
    "start": "2133950",
    "end": "2140760"
  },
  {
    "text": "that but from the outside perspective I don't care what you do I just do whatever you need to to",
    "start": "2140760",
    "end": "2146670"
  },
  {
    "text": "take that rest quest and then return some kind of response so the handlers",
    "start": "2146670",
    "end": "2153330"
  },
  {
    "start": "2152000",
    "end": "2152000"
  },
  {
    "text": "are intended to encapsulate all that sort of logic necessary to build a response so it could be using EF core I",
    "start": "2153330",
    "end": "2160620"
  },
  {
    "text": "could be using dapper I could be using HTTP client maybe have to call it to",
    "start": "2160620",
    "end": "2166530"
  },
  {
    "text": "some other web api to be able to get to get that information maybe I have to go out to some kind of composed crazy API",
    "start": "2166530",
    "end": "2175200"
  },
  {
    "text": "gateway to get information and maybe have to take a bunch of different sources together to put something together that's maybe that's just some",
    "start": "2175200",
    "end": "2181740"
  },
  {
    "text": "kind of like meat grinder they're just like churning a bunch of stuff together and then outputting response but the",
    "start": "2181740",
    "end": "2187590"
  },
  {
    "text": "nice thing is from my applications for perspective I don't care all I see is a query then some kind of",
    "start": "2187590",
    "end": "2195510"
  },
  {
    "text": "black box that's going to handle the query and then on the other side is my response it's also possible in one application to",
    "start": "2195510",
    "end": "2204480"
  },
  {
    "text": "have all these different kinds of query handler approaches to my handlers I",
    "start": "2204480",
    "end": "2211320"
  },
  {
    "text": "would suggest being maybe not do the meat-grinder approach like if you have to do that maybe try to simplify that",
    "start": "2211320",
    "end": "2216590"
  },
  {
    "text": "but it's certainly possible that I could use the correct tool for the job for",
    "start": "2216590",
    "end": "2221970"
  },
  {
    "text": "each individual handler which is shocking I now use the correct tool for the job now there are cases that we do",
    "start": "2221970",
    "end": "2230940"
  },
  {
    "text": "run into duplications so I could have two different classes that have some kind of common common query logic and",
    "start": "2230940",
    "end": "2238530"
  },
  {
    "start": "2233000",
    "end": "2233000"
  },
  {
    "text": "this is where I typically like pump the brakes with mind if my teams to say you",
    "start": "2238530",
    "end": "2245040"
  },
  {
    "text": "know the first thing you should do whenever you see duplicated logic is to ask yourself is it just accidentally",
    "start": "2245040",
    "end": "2250620"
  },
  {
    "text": "duplicated that you just say it just looks the same just coincidentally or is",
    "start": "2250620",
    "end": "2255960"
  },
  {
    "text": "it literally the same logic that needs to change at the same time for the same reasons forever and ever",
    "start": "2255960",
    "end": "2262380"
  },
  {
    "text": "so if we had that case that we just we know that this should be common shared logic then we pulled that common shared",
    "start": "2262380",
    "end": "2268950"
  },
  {
    "text": "logic into something what is that thing whatever you want could be a class it",
    "start": "2268950",
    "end": "2274860"
  },
  {
    "text": "could be a function extension method could be another library I don't really care just used",
    "start": "2274860",
    "end": "2279930"
  },
  {
    "text": "use a little kind of standard refactoring techniques to pull that kind of common logic out queries are really",
    "start": "2279930",
    "end": "2286920"
  },
  {
    "text": "the boring part to be honest like it's just like get the data out as quickly and as efficiently as possible but",
    "start": "2286920",
    "end": "2292920"
  },
  {
    "text": "otherwise it's like it's queries it's not that exciting the interesting part I think comes into the command handlers which is the really",
    "start": "2292920",
    "end": "2299100"
  },
  {
    "start": "2296000",
    "end": "2296000"
  },
  {
    "text": "work doing the real work happening in our system so for our teams what I like",
    "start": "2299100",
    "end": "2305940"
  },
  {
    "text": "to do is just again it's the they don't a lot of my developers want to start off",
    "start": "2305940",
    "end": "2312990"
  },
  {
    "text": "with the most complicated solution possible but I really try to ground them saying just just do the most boring",
    "start": "2312990",
    "end": "2318510"
  },
  {
    "text": "thing that could possibly work imagine those old store procedures let's do the most boring of procedural code as",
    "start": "2318510",
    "end": "2323700"
  },
  {
    "start": "2323000",
    "end": "2323000"
  },
  {
    "text": "possible and if that's all you need to do then just stop right there like if it's just one or two lines of code and it works",
    "start": "2323700",
    "end": "2329910"
  },
  {
    "text": "then just stop that's okay well a couple of things I do make sure that they do as developers one I want to",
    "start": "2329910",
    "end": "2336630"
  },
  {
    "text": "make sure that we don't introduce any unnecessary abstractions if that handler",
    "start": "2336630",
    "end": "2341700"
  },
  {
    "start": "2337000",
    "end": "2337000"
  },
  {
    "text": "needs to use something just use that thing directly don't introduce some kind of abstraction on top of it so in this",
    "start": "2341700",
    "end": "2348210"
  },
  {
    "text": "case I don't have any kind of like repository on top of my DB context I just use the DB context directly",
    "start": "2348210",
    "end": "2354660"
  },
  {
    "text": "because I know that this logic is completely encapsulated from other handlers then why do I need an",
    "start": "2354660",
    "end": "2361260"
  },
  {
    "text": "abstraction why kind of just use all these things directly I don't need to have that kind of indirection it's not adding any value to my system so anytime",
    "start": "2361260",
    "end": "2368220"
  },
  {
    "text": "I saw any abstractions I would reject the pull request it never actually happened because we would tell them not",
    "start": "2368220",
    "end": "2374280"
  },
  {
    "text": "to do in the first place but we made sure so just use all those things directly and the only time I put in any",
    "start": "2374280",
    "end": "2380970"
  },
  {
    "text": "kind of abstraction is really for testing purposes so if I'm building an",
    "start": "2380970",
    "end": "2385980"
  },
  {
    "text": "application has to talk to sa P boo then I want to put something in front of me between me and it's because s ap is",
    "start": "2385980",
    "end": "2393120"
  },
  {
    "text": "horrible to deal with and it always goes down so only in those cases where I want",
    "start": "2393120",
    "end": "2398160"
  },
  {
    "text": "to isolate my system from others want to introduce some kind of abstraction otherwise just reuse the real things and",
    "start": "2398160",
    "end": "2404190"
  },
  {
    "text": "call it a day I also find that the people that really hate dependency injection",
    "start": "2404190",
    "end": "2409920"
  },
  {
    "text": "they really hate abstractions that get enabled via dependency injection for me if my handler is really small and stupid",
    "start": "2409920",
    "end": "2416700"
  },
  {
    "text": "my dependency injection configuration is also really small and stupid so I don't really have any problem with it just",
    "start": "2416700",
    "end": "2422520"
  },
  {
    "text": "like I have the requests going in if that handler needs other things to do its work then those other things need to",
    "start": "2422520",
    "end": "2429180"
  },
  {
    "text": "be passed in via dependency injection and that's it now sometimes these",
    "start": "2429180",
    "end": "2437099"
  },
  {
    "text": "handlers can get really gnarly and ugly and I tell my developers like just because we're using this pattern doesn't",
    "start": "2437099",
    "end": "2443490"
  },
  {
    "text": "mean we have to determine we have to be okay with ugly procedural code so just don't panic remember that we can always",
    "start": "2443490",
    "end": "2451079"
  },
  {
    "text": "go back to the old TDD mode of red green refactor although most people I know",
    "start": "2451079",
    "end": "2456780"
  },
  {
    "text": "just stop at red and green and like move on to the X feature but that last step is actually important we need to look at",
    "start": "2456780",
    "end": "2461940"
  },
  {
    "text": "the code that we just wrote scrutinized and it say is there something we can do",
    "start": "2461940",
    "end": "2467220"
  },
  {
    "text": "it to make it more easy to maintain over time so at this point I actually just",
    "start": "2467220",
    "end": "2473280"
  },
  {
    "text": "fall back to the kind of 20 to 30-year old techniques to make this kind of code better we look at the different code",
    "start": "2473280",
    "end": "2479880"
  },
  {
    "start": "2479000",
    "end": "2479000"
  },
  {
    "text": "smells I typically find there so for these kind of handlers I usually find that the class just got too big and so",
    "start": "2479880",
    "end": "2486930"
  },
  {
    "text": "the major code smells I'm looking at are gonna be it's a large class and a long method but there's a whole book written",
    "start": "2486930",
    "end": "2492990"
  },
  {
    "text": "about how to fix this kind of code called refactoring which I highly recommend the second edition is out next",
    "start": "2492990",
    "end": "2498000"
  },
  {
    "text": "year but it's JavaScript oriented so we'll see and so there's just a standard",
    "start": "2498000",
    "end": "2504900"
  },
  {
    "text": "set of refactorings like and I can based on the different code smells I see in a handler decide how do I want to make",
    "start": "2504900",
    "end": "2510809"
  },
  {
    "text": "this code easier to maintain over time typically I'm using the last one they're composed method we just basically take a",
    "start": "2510809",
    "end": "2517530"
  },
  {
    "text": "really long method and break it up into smaller methods all at the same conceptual level I won't go into an",
    "start": "2517530",
    "end": "2523589"
  },
  {
    "text": "example of this because there would be a whole talk by itself on refactoring but just know like just use the standard",
    "start": "2523589",
    "end": "2529230"
  },
  {
    "text": "techniques of refactoring ugly code inside handlers there's nothing that says if you're using this technique you",
    "start": "2529230",
    "end": "2535500"
  },
  {
    "text": "have to keep the code as ugly as possible I also tend to find behavioral",
    "start": "2535500",
    "end": "2541049"
  },
  {
    "start": "2540000",
    "end": "2540000"
  },
  {
    "text": "smells these are the kind of things that it's not like the structural code looks likely but I also have some behavioral things",
    "start": "2541049",
    "end": "2547590"
  },
  {
    "text": "that are going on things like I've got a lot of if-then statements I've got a lot of complex conditionals going on I've",
    "start": "2547590",
    "end": "2554849"
  },
  {
    "text": "got duplicated code between different things and so for that I actually use another refactoring book I know patterns",
    "start": "2554849",
    "end": "2560369"
  },
  {
    "text": "right and that supposed to use design patterns anymore but I still find that they're useful in cases where I need to",
    "start": "2560369",
    "end": "2565590"
  },
  {
    "text": "put some higher level abstractions or structures around the code I find on my handlers there's not a whole lot of",
    "start": "2565590",
    "end": "2571800"
  },
  {
    "text": "patterns I use these days once I go to this kind of approach I basically have like decorator chain of responsibility",
    "start": "2571800",
    "end": "2578340"
  },
  {
    "text": "and strategy if I know those three patterns that's like 99% of the pattern",
    "start": "2578340",
    "end": "2584190"
  },
  {
    "text": "needs I have and so really I just look for the coat smells that indicate that those patterns are may need to be",
    "start": "2584190",
    "end": "2589500"
  },
  {
    "text": "introduced it introduces to them when I feel they're necessary what I really",
    "start": "2589500",
    "end": "2596099"
  },
  {
    "text": "want to drive towards though is trying to push my behavior down so right now everything is procedural inside that",
    "start": "2596099",
    "end": "2601590"
  },
  {
    "text": "handler what I like to do is start pushing that behavior down into the domain model so in this case my handler",
    "start": "2601590",
    "end": "2608400"
  },
  {
    "start": "2602000",
    "end": "2602000"
  },
  {
    "text": "now is just responsible for the kind of data access logic this is a handler that's doing a create or edit so the",
    "start": "2608400",
    "end": "2615750"
  },
  {
    "text": "logic inside of there is well do I am i creating a new one or am i editing existing one once I get that information",
    "start": "2615750",
    "end": "2622320"
  },
  {
    "text": "about which is which then I actually delegate all the actual behavior down to the domain model to do the real meat of",
    "start": "2622320",
    "end": "2628410"
  },
  {
    "text": "the work so now down there there's a handle method and it says now I've done the kind of data access junk now",
    "start": "2628410",
    "end": "2635160"
  },
  {
    "text": "delegate ought to the domain object to do the real meat of the work so now the",
    "start": "2635160",
    "end": "2640920"
  },
  {
    "text": "domain has the real work to be done so in this case the I couldn't fit it on",
    "start": "2640920",
    "end": "2646680"
  },
  {
    "start": "2641000",
    "end": "2641000"
  },
  {
    "text": "the screen because it was like 200 miles long all this all this logic but the general idea is that the real meat of",
    "start": "2646680",
    "end": "2652200"
  },
  {
    "text": "the work you can stop to push down into your individual domain objects so now instead of me having like these",
    "start": "2652200",
    "end": "2657890"
  },
  {
    "text": "repository abstractions to facilitate unit testing now I do actually have",
    "start": "2657890",
    "end": "2664290"
  },
  {
    "text": "fully encapsulated domain models where all my behavior is you notice as well that I'm passing in my request objects",
    "start": "2664290",
    "end": "2670530"
  },
  {
    "text": "all the way towards my models as well my domain models as well as opposed to trying to break it out into something",
    "start": "2670530",
    "end": "2675660"
  },
  {
    "text": "else I don't in this case I don't care if my domain model knows about the commands that need to act on the domain that's",
    "start": "2675660",
    "end": "2680910"
  },
  {
    "text": "really the only way I can really only way I could do this kind of pattern appropriately so ideally my domain green",
    "start": "2680910",
    "end": "2690089"
  },
  {
    "text": "box grows with behavior and that becomes really where all the work happens in my system now before I do any work",
    "start": "2690089",
    "end": "2699559"
  },
  {
    "text": "typically have to check to see can you do that thing that you're trying to do and so this comes into validation so",
    "start": "2699559",
    "end": "2707579"
  },
  {
    "text": "this kind of architecture I try to Center my validation around the requests and the handlers but a typically find",
    "start": "2707579",
    "end": "2714930"
  },
  {
    "text": "that there are a couple different validation scopes that I have there's the like just looking at the form itself",
    "start": "2714930",
    "end": "2720690"
  },
  {
    "start": "2715000",
    "end": "2715000"
  },
  {
    "text": "that request level validation and then once I say like have you filled in all the junk on the screen okay just let's",
    "start": "2720690",
    "end": "2728279"
  },
  {
    "text": "just make sure that maybe just a cat sat on your keyboard but at least everything's filled in I have that",
    "start": "2728279",
    "end": "2733920"
  },
  {
    "text": "request level validation and then I had the sort of second level domain validation which is things like make",
    "start": "2733920",
    "end": "2741119"
  },
  {
    "text": "sure that that email address isn't already taken when you're registering make sure that you can't ship a canceled",
    "start": "2741119",
    "end": "2746999"
  },
  {
    "text": "order make sure that you can't add items to an order if it's already been accepted that kind of validation can",
    "start": "2746999",
    "end": "2754380"
  },
  {
    "text": "only really happen inside the domain model so I had this command level validation that looks at not just a",
    "start": "2754380",
    "end": "2760230"
  },
  {
    "text": "domain model state but also looks at maybe other domain objects maybe looks at the database maybe has to go out to",
    "start": "2760230",
    "end": "2766170"
  },
  {
    "text": "somewhere else and inside of that is where I have the kind of second level of",
    "start": "2766170",
    "end": "2771480"
  },
  {
    "text": "validation so my requests can validate",
    "start": "2771480",
    "end": "2777509"
  },
  {
    "start": "2777000",
    "end": "2777000"
  },
  {
    "text": "themselves in this case I'm using a tool called fluent validation but you could certainly use any kind of like Dana data",
    "start": "2777509",
    "end": "2783930"
  },
  {
    "text": "annotations is also a good fit for this one the general idea though for this kind of validation it can only look at",
    "start": "2783930",
    "end": "2789210"
  },
  {
    "text": "that request object for this request validation it can't go out to something else to see if it needs to be successful",
    "start": "2789210",
    "end": "2795749"
  },
  {
    "text": "not it can only look at itself so that constrains what I can do in here but that's okay I don't want to get too",
    "start": "2795749",
    "end": "2802079"
  },
  {
    "text": "complicated in my request validation I want to keep it separate between validating the request by itself versus",
    "start": "2802079",
    "end": "2807809"
  },
  {
    "text": "looking at other things in the outside world to be able to say it is this request possible to do the domain",
    "start": "2807809",
    "end": "2816600"
  },
  {
    "text": "validation is where I can start leaning on those result objects so this one for example I'm trying to approve an invoice",
    "start": "2816600",
    "end": "2822990"
  },
  {
    "start": "2817000",
    "end": "2817000"
  },
  {
    "text": "and it will look to see what the status is and if the status isn't a good status it will just return back a failure",
    "start": "2822990",
    "end": "2829440"
  },
  {
    "text": "reason saying I can't do this and this is why so I've got my none that I've",
    "start": "2829440",
    "end": "2841680"
  },
  {
    "text": "validated the request I got my response and the last little piece want to talk about are some of the representations",
    "start": "2841680",
    "end": "2846900"
  },
  {
    "start": "2846000",
    "end": "2846000"
  },
  {
    "text": "that is taking that response and then putting it into the outside world now in",
    "start": "2846900",
    "end": "2852180"
  },
  {
    "text": "the original NBC way of working of things when I went down this path in this architecture my applications wind",
    "start": "2852180",
    "end": "2858660"
  },
  {
    "text": "up looking something like this that as that is I had a controller with basically no behavior in it whatsoever",
    "start": "2858660",
    "end": "2865320"
  },
  {
    "start": "2859000",
    "end": "2859000"
  },
  {
    "text": "it was just just like taking the request object and then delegating off to mediator to actually do the actual",
    "start": "2865320",
    "end": "2871470"
  },
  {
    "text": "handling of the work but the controller itself was almost pointless it was basically just a description of routes",
    "start": "2871470",
    "end": "2877500"
  },
  {
    "text": "and then left on the right hand side you can kind of see that I still have a little bit of disorganization like the",
    "start": "2877500",
    "end": "2882960"
  },
  {
    "text": "controller contains stuff for everything but then when I want to see with the actual work being done it's then split",
    "start": "2882960",
    "end": "2888390"
  },
  {
    "text": "out to these other classes these days though if I need to do server-side rendering what I'll do is instead use",
    "start": "2888390",
    "end": "2895200"
  },
  {
    "start": "2894000",
    "end": "2894000"
  },
  {
    "text": "razor pages which fully encapsulate all the work necessary to be able to handle",
    "start": "2895200",
    "end": "2900750"
  },
  {
    "text": "the requests in one single place so in this case I've got a single razor page that has the data to be shown on the",
    "start": "2900750",
    "end": "2908550"
  },
  {
    "text": "screen so that's that that data property that has that model that has the request and response objects it has any kind of",
    "start": "2908550",
    "end": "2914850"
  },
  {
    "text": "validation fit configuration handling everything necessary to be able to",
    "start": "2914850",
    "end": "2919890"
  },
  {
    "text": "reason about this one request is in this one single spot and then if you want to",
    "start": "2919890",
    "end": "2926610"
  },
  {
    "text": "see how the thing is actually rendered then of course the the actual razor of CS HTML page is right next to it so",
    "start": "2926610",
    "end": "2932610"
  },
  {
    "text": "everything's right next to each other that means that when I'm money developers are developing in a system",
    "start": "2932610",
    "end": "2938010"
  },
  {
    "text": "they're only ever adding files they're almost never editing files an editing",
    "start": "2938010",
    "end": "2943950"
  },
  {
    "text": "file is an editing thing is where we have merge conflicts and potentially bugs creeping in because I'm",
    "start": "2943950",
    "end": "2950940"
  },
  {
    "text": "changing code as opposed to adding code so ideally I'm only ever adding code and by having everything encapsulated in one",
    "start": "2950940",
    "end": "2957329"
  },
  {
    "text": "single spot for new requests I can have a reasonable guarantee that I'm not breaking anything else",
    "start": "2957329",
    "end": "2964520"
  },
  {
    "text": "now Web API s are gonna be a little bit different because very often I'm sharing",
    "start": "2964940",
    "end": "2970020"
  },
  {
    "text": "a lot of different actions for a thing on one single single page application so this one for example I've got different",
    "start": "2970020",
    "end": "2976950"
  },
  {
    "text": "actions to perform at an order I can approve an order reject an order hold an order or cancel an order each of those",
    "start": "2976950",
    "end": "2983579"
  },
  {
    "text": "has their own individual handlers however if I'm looking at the browser those are just buttons that aren't that",
    "start": "2983579",
    "end": "2990119"
  },
  {
    "text": "are on the screen but I don't I don't leave that screen so what typically happens is all those handlers actually do return a common result object that is",
    "start": "2990119",
    "end": "2998819"
  },
  {
    "text": "then passed into my single page application hopefully reacts or view and hopefully not angular and then my life",
    "start": "2998819",
    "end": "3007069"
  },
  {
    "text": "is much better so that one single response object is bound again to just one single view on the screen so what",
    "start": "3007069",
    "end": "3014510"
  },
  {
    "text": "I'm trying to get to here is a one to one with response objects and the representations but sometimes of",
    "start": "3014510",
    "end": "3021319"
  },
  {
    "text": "representations are shared against lots of different requests and that's okay so",
    "start": "3021319",
    "end": "3031819"
  },
  {
    "text": "with all this in place I still notice that when I go from handler to handler to handler I may have some duplicated",
    "start": "3031819",
    "end": "3038000"
  },
  {
    "text": "logic across a wide variety of different handlers and so it's not enough for me to just say we'll just extract all those",
    "start": "3038000",
    "end": "3044480"
  },
  {
    "text": "pieces out into one class and I have anything call it I could have duplication that just basically stretches across all the different",
    "start": "3044480",
    "end": "3051349"
  },
  {
    "text": "handlers in my system so what I'd like to do is to say for every time you call",
    "start": "3051349",
    "end": "3058849"
  },
  {
    "text": "this handler also do this other behavior or this other logic and so for us we can",
    "start": "3058849",
    "end": "3064099"
  },
  {
    "start": "3064000",
    "end": "3064000"
  },
  {
    "text": "use the decorator pattern in order to achieve this I don't like to call the",
    "start": "3064099",
    "end": "3069500"
  },
  {
    "text": "decorator it's kind of a weird name so I called it pipeline behavior because some frameworks call them pipelines some",
    "start": "3069500",
    "end": "3075109"
  },
  {
    "text": "calling behaviors so I just called it both why not so these pipeline behaviors wrap the",
    "start": "3075109",
    "end": "3081470"
  },
  {
    "text": "handler with additional logic and I can then stack them as well I can have additional pipeline behaviors all",
    "start": "3081470",
    "end": "3087710"
  },
  {
    "start": "3084000",
    "end": "3084000"
  },
  {
    "text": "wrapping my one single handler this is all still transparent to people using",
    "start": "3087710",
    "end": "3093079"
  },
  {
    "text": "the handler they don't necessarily know these other things are going on or don't have to worry about them but allows me to have cross-cutting concerns wrap",
    "start": "3093079",
    "end": "3100369"
  },
  {
    "text": "around by individual handlers so think this is similar to action filters and",
    "start": "3100369",
    "end": "3106910"
  },
  {
    "start": "3104000",
    "end": "3104000"
  },
  {
    "text": "NBC wear filters wrap around the execution of an action you can do additional behaviors this is exactly",
    "start": "3106910",
    "end": "3112700"
  },
  {
    "text": "what I have as well I have a very simple interface that takes in the request object and then takes the next action to",
    "start": "3112700",
    "end": "3119930"
  },
  {
    "text": "perform as a parameter and I need to return back out their response so let's",
    "start": "3119930",
    "end": "3126410"
  },
  {
    "text": "say I want to have every single handler wrapped in a transaction I can do that",
    "start": "3126410",
    "end": "3131930"
  },
  {
    "text": "now with an additional behavior this behavior takes in the original request object it relies on the whatever ORM you",
    "start": "3131930",
    "end": "3139760"
  },
  {
    "start": "3132000",
    "end": "3132000"
  },
  {
    "text": "want to use in this case it's in any framework and then inside of the logic it's going to say begin the transaction",
    "start": "3139760",
    "end": "3146619"
  },
  {
    "text": "call the next action whatever that might be it could be a handler it could be another pipeline behavior commit the",
    "start": "3146619",
    "end": "3153200"
  },
  {
    "text": "transaction but if anything fails so there's an exception or perhaps I get a I get some kind of validation failure",
    "start": "3153200",
    "end": "3162349"
  },
  {
    "text": "then go ahead and roll back the transaction so with this this pipeline",
    "start": "3162349",
    "end": "3168829"
  },
  {
    "text": "behavior in place I get to remove all these Save Changes method calls and all",
    "start": "3168829",
    "end": "3174079"
  },
  {
    "text": "my handlers and say you know what that is taken care of for you I could do",
    "start": "3174079",
    "end": "3179900"
  },
  {
    "text": "something like a unit of work let's say I get something like domain events maybe something that needs to happen at the",
    "start": "3179900",
    "end": "3186980"
  },
  {
    "start": "3180000",
    "end": "3180000"
  },
  {
    "text": "end of performing some logical operation and so after I've done the work I need",
    "start": "3186980",
    "end": "3192710"
  },
  {
    "text": "to complete my unit of work and I can do that pretty easily now with a pipe on behavior what if things fail and I want",
    "start": "3192710",
    "end": "3201680"
  },
  {
    "text": "to retry them well now that's very easy for me to do I can just have a simple",
    "start": "3201680",
    "end": "3207200"
  },
  {
    "start": "3203000",
    "end": "3203000"
  },
  {
    "text": "while loop that says try the action and if it fails just try it again",
    "start": "3207200",
    "end": "3212840"
  },
  {
    "text": "and if it fails some in number of times okay then go ahead and throw the exception but if I have like excuse me",
    "start": "3212840",
    "end": "3219520"
  },
  {
    "text": "if I'm using Azure for example like the Azure sequel always goes down so they have a built in like a called over and",
    "start": "3219520",
    "end": "3226430"
  },
  {
    "text": "over again so we have a similar thing here that maybe I maybe I have concurrency problems or I have the",
    "start": "3226430",
    "end": "3232220"
  },
  {
    "text": "possibility of a lot of concurrency collisions so I can just put in a retry policy in one place it says if I get",
    "start": "3232220",
    "end": "3237980"
  },
  {
    "text": "that if I get some kind of concurrency exception just try the thing again and",
    "start": "3237980",
    "end": "3244520"
  },
  {
    "text": "then hopefully the thing resolves itself",
    "start": "3244520",
    "end": "3249040"
  },
  {
    "text": "logging of course is like that's a canonical thing they do with decorators is log every single request that's super",
    "start": "3249550",
    "end": "3256550"
  },
  {
    "start": "3250000",
    "end": "3250000"
  },
  {
    "text": "simple now I have one single place that I log every single request and respond to my system in this case I have log",
    "start": "3256550",
    "end": "3263720"
  },
  {
    "text": "with a scope to say I'm starting this request I'm gonna call to the handler I do the work and then I'm what I'm done I",
    "start": "3263720",
    "end": "3269840"
  },
  {
    "text": "say okay this is what I called and then this is the actual response on the other side you may have to do something",
    "start": "3269840",
    "end": "3276080"
  },
  {
    "text": "different in you with the whole g-power GPD are gdpr whatever i don't worry",
    "start": "3276080",
    "end": "3281660"
  },
  {
    "text": "about this kind of junk so every single request in response then can be logged",
    "start": "3281660",
    "end": "3287570"
  },
  {
    "text": "in the system and if something fails for whatever reason I have a record of that that I've just enabled with this one",
    "start": "3287570",
    "end": "3293060"
  },
  {
    "text": "single spot in my system registration is pretty easy for these sort of things I",
    "start": "3293060",
    "end": "3299150"
  },
  {
    "start": "3297000",
    "end": "3297000"
  },
  {
    "text": "in my head I think of them as the Russian dolls or they mature yeah sure",
    "start": "3299150",
    "end": "3306080"
  },
  {
    "text": "the Russian dolls where they're they're like there's the meat in the middle that is my actual work and then on top of it",
    "start": "3306080",
    "end": "3312530"
  },
  {
    "text": "I start to layer the other interesting behaviors of my system but from the outside I don't need I don't know about",
    "start": "3312530",
    "end": "3317990"
  },
  {
    "text": "anything I just know I have a request I'm sending in that request it wraps everything in all those behaviors calls",
    "start": "3317990",
    "end": "3324290"
  },
  {
    "text": "a handler and then out the other side is my response now the final one a part I",
    "start": "3324290",
    "end": "3331370"
  },
  {
    "text": "want to talk about is testing so looking at all these different things going on I",
    "start": "3331370",
    "end": "3336740"
  },
  {
    "text": "have a different a few different scopes of testing I want to look at but overall I can look at this set of work being",
    "start": "3336740",
    "end": "3342830"
  },
  {
    "text": "done and see that basically this breaks down into there's an arranged part which is the request there's the act",
    "start": "3342830",
    "end": "3349700"
  },
  {
    "text": "which is the middle junk and then the assert which is going to be looking at",
    "start": "3349700",
    "end": "3355670"
  },
  {
    "text": "the response so when I'm testing these kind of systems I want to make sure that",
    "start": "3355670",
    "end": "3361940"
  },
  {
    "text": "as much as possible I'm modeling the reality of how the system typically behaves if I want to get confidence out",
    "start": "3361940",
    "end": "3367940"
  },
  {
    "text": "of my tests then they have to model as much as possible how the real world and how the real application actually works",
    "start": "3367940",
    "end": "3374060"
  },
  {
    "text": "so that means that when I set up my tests it's gonna set up the application very similarly to how my framework will",
    "start": "3374060",
    "end": "3381500"
  },
  {
    "text": "set things up but I'm not using that testing extension from asp net core because that's like sending raw HTTP",
    "start": "3381500",
    "end": "3387530"
  },
  {
    "text": "requests in that's like way too much for me so instead what I'll be doing is basically just setting up all the",
    "start": "3387530",
    "end": "3392960"
  },
  {
    "text": "dependencies and environments but I'll still just be calling handlers themselves now there are some stuff that",
    "start": "3392960",
    "end": "3399590"
  },
  {
    "text": "asp net core does for us and executes everything inside scopes so i want to mimic that kind of behavior my tests so",
    "start": "3399590",
    "end": "3405950"
  },
  {
    "text": "how these simple methods to say execute something inside of a scope then providing you a callback to say okay do",
    "start": "3405950",
    "end": "3412490"
  },
  {
    "text": "something with the scope that you're working with so I've got a couple methods here to say execute something",
    "start": "3412490",
    "end": "3418609"
  },
  {
    "text": "inside of a scope exactly like how every single asp net core request works if I",
    "start": "3418609",
    "end": "3425869"
  },
  {
    "text": "need to set up data those will be also done inside of some kind of scope so in this case I'm passing in an action",
    "start": "3425869",
    "end": "3432380"
  },
  {
    "start": "3427000",
    "end": "3427000"
  },
  {
    "text": "against the DB context I will go ahead and get the DB context outs perform whatever actually need upon it and then",
    "start": "3432380",
    "end": "3438350"
  },
  {
    "text": "call Save Changes to make sure that all your changes are saved I'll have a",
    "start": "3438350",
    "end": "3444260"
  },
  {
    "text": "helper method now to send requests down to as well so this will rely on that",
    "start": "3444260",
    "end": "3449330"
  },
  {
    "start": "3445000",
    "end": "3445000"
  },
  {
    "text": "previous execute scope method to be able to get out the mediator object just like my razor page or controller was doing",
    "start": "3449330",
    "end": "3456490"
  },
  {
    "text": "calling cin to send the request down and then that's all wrapped inside a scope which means i have all the pipeline",
    "start": "3456490",
    "end": "3463010"
  },
  {
    "text": "behaviors and all the things that we're executing in the normal request pipeline of an asp net core application i'm going",
    "start": "3463010",
    "end": "3472130"
  },
  {
    "text": "to use a trick that I thought I'd never use the C sharp five six way of doing",
    "start": "3472130",
    "end": "3479060"
  },
  {
    "text": "using static so I'd say using static testing which is all those test helper methods and now I",
    "start": "3479060",
    "end": "3484880"
  },
  {
    "text": "don't think whole like base fixture dot send instead of just have a weights in de sink and have a nice little helper",
    "start": "3484880",
    "end": "3491150"
  },
  {
    "text": "method be able send out requests and to be able to get the response inside a test my queries I basically set up the",
    "start": "3491150",
    "end": "3501740"
  },
  {
    "start": "3500000",
    "end": "3500000"
  },
  {
    "text": "data that it wants so you create a bunch of objects say insert all those objects then and my test I say send those",
    "start": "3501740",
    "end": "3508550"
  },
  {
    "text": "objects down get the response back outs and then my assertion is just look at the result object and make sure the",
    "start": "3508550",
    "end": "3514550"
  },
  {
    "text": "result is what I expect now that does mean that inside my test I will have multiple transactions and multiple",
    "start": "3514550",
    "end": "3521030"
  },
  {
    "text": "scopes that's okay that's how the real system works if I want to perform something in my application I'm typically doing a series of actions and",
    "start": "3521030",
    "end": "3528170"
  },
  {
    "text": "operations so I don't want to do things like wrap everything in a transaction and roll back at the end because that",
    "start": "3528170",
    "end": "3533240"
  },
  {
    "text": "will have some false positives I want to use as much as possible how the real application actually works and behaves",
    "start": "3533240",
    "end": "3538599"
  },
  {
    "text": "so that means that I really want to set up my system through the front door and out through the back door so in this",
    "start": "3538599",
    "end": "3544160"
  },
  {
    "start": "3540000",
    "end": "3540000"
  },
  {
    "text": "case my setup is also sending a command to do work that ensures that and runs",
    "start": "3544160",
    "end": "3549500"
  },
  {
    "text": "through all the validation so I can't setup junk data it performs all the side effects necessary and I know that this",
    "start": "3549500",
    "end": "3555920"
  },
  {
    "text": "is almost exactly like how an end user would actually use the system but now it's represented as these first cost",
    "start": "3555920",
    "end": "3561230"
  },
  {
    "text": "operations in my test I can't always do that sometimes I need to set up the data",
    "start": "3561230",
    "end": "3566510"
  },
  {
    "start": "3565000",
    "end": "3565000"
  },
  {
    "text": "when necessary so just like it's just a thing that happens in these kind of systems that not everything I can do in the system is available as an action to",
    "start": "3566510",
    "end": "3573230"
  },
  {
    "text": "perform through the user interface so sometimes they do have to set up my own data and then finally looking at",
    "start": "3573230",
    "end": "3581030"
  },
  {
    "start": "3581000",
    "end": "3581000"
  },
  {
    "text": "commands when I test those I will test them with actual round trips so I'll say do this work it will do that work inside",
    "start": "3581030",
    "end": "3588260"
  },
  {
    "text": "a scope transaction and when I come back I say okay now go ahead and get that information back out of the database and",
    "start": "3588260",
    "end": "3594230"
  },
  {
    "text": "check to make sure that all the things were appropriately saved all the way down to the database and back out again",
    "start": "3594230",
    "end": "3599630"
  },
  {
    "text": "and so I have to go all the way back out so that's that find a sync to say go get the thing pull back out and make sure it",
    "start": "3599630",
    "end": "3606170"
  },
  {
    "text": "matches that original command I had before so that means with this approach",
    "start": "3606170",
    "end": "3612560"
  },
  {
    "text": "I wind up having integration tests for every single request to my system and for a lot of",
    "start": "3612560",
    "end": "3618079"
  },
  {
    "text": "times I can just go ahead and stop there like if there if the handler is just doing all the work right inside the",
    "start": "3618079",
    "end": "3623720"
  },
  {
    "text": "handler there's no need to unit test it if I've pushed down that behavior into my domain model that's where my unit",
    "start": "3623720",
    "end": "3630319"
  },
  {
    "text": "tests come into play i unit test those things that are truly isolated and unit",
    "start": "3630319",
    "end": "3635509"
  },
  {
    "text": "tests and an integration test the things that I don't actually want to isolate and abstract so some key takeaways in",
    "start": "3635509",
    "end": "3644869"
  },
  {
    "text": "vertical slice architecture vertical slices makes code super easy to add change and delete because I had that",
    "start": "3644869",
    "end": "3651140"
  },
  {
    "text": "confidence to know that I'm changing one isolated part of my system and I'm not affecting anybody else do",
    "start": "3651140",
    "end": "3657829"
  },
  {
    "text": "not skip the refactor step a lot of people hate this architecture because they like my handlers are so ugly it's because you didn't do that red green",
    "start": "3657829",
    "end": "3663950"
  },
  {
    "text": "refactor you just did red green or maybe didn't have tests so it was just like barfing in the keyboard and then was",
    "start": "3663950",
    "end": "3670279"
  },
  {
    "text": "done so don't forget that refactor step it is still important and these kinds of architectures try as much as possible to",
    "start": "3670279",
    "end": "3676130"
  },
  {
    "text": "push your behavior down into domain model so that that complicated logic is unit testable and you can't get that",
    "start": "3676130",
    "end": "3682430"
  },
  {
    "text": "quick feedback and then finally I would recommend integration testing your",
    "start": "3682430",
    "end": "3687859"
  },
  {
    "text": "handlers and unit testing your domain don't unit test your handlers there's not really value in it you want to mimic",
    "start": "3687859",
    "end": "3693289"
  },
  {
    "text": "as much as possible how your real system behaves is that that means integration tests so that was vertical slice",
    "start": "3693289",
    "end": "3703339"
  },
  {
    "text": "architecture say yes to celery and no to sticky onions if that means anything anyone if you want to sample code behind",
    "start": "3703339",
    "end": "3710390"
  },
  {
    "text": "this it's on my github comm /j Bogart there's some repositories with the examples of this kind of code otherwise",
    "start": "3710390",
    "end": "3716170"
  },
  {
    "text": "thank you for your time and I hope you have a great rest of the conference thank you [Applause]",
    "start": "3716170",
    "end": "3722059"
  }
]