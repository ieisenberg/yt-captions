[
  {
    "text": "okay the clocks us it's time to get started so welcome everybody I am your",
    "start": "3060",
    "end": "9929"
  },
  {
    "text": "own father I will be of this stand-up comedy session typesafe c++ we're going",
    "start": "9929",
    "end": "15450"
  },
  {
    "text": "to have a lot of fun at the expense of this language a bit of background I've",
    "start": "15450",
    "end": "21570"
  },
  {
    "text": "been doing software development as a profession since 94 oh I guess I'm",
    "start": "21570",
    "end": "27330"
  },
  {
    "text": "getting bit graybeard I think I wrote my first C++ program in 93 might have been",
    "start": "27330",
    "end": "34140"
  },
  {
    "text": "92 not entirely sure so I've learned a lot of about how to abuse things that is",
    "start": "34140",
    "end": "41780"
  },
  {
    "text": "kind of what I like to do but today we're not actually going to abuse things we're going to have fun at the expense",
    "start": "41780",
    "end": "47940"
  },
  {
    "text": "of a very unsafe language and it'll be a blast all right so what is type safety I",
    "start": "47940",
    "end": "59960"
  },
  {
    "text": "mean to be able to talk about how to achieve type safety and what is good and",
    "start": "59960",
    "end": "67560"
  },
  {
    "text": "what is bad we must have an D of what type safety actually is under",
    "start": "67560",
    "end": "74810"
  },
  {
    "text": "the language is not too happy about converting between different types yeah",
    "start": "80469",
    "end": "85649"
  },
  {
    "text": "that is definitely one of them other ideas for what makes at compile",
    "start": "85649",
    "end": "97869"
  },
  {
    "text": "time the compiler can tell us what is a valid action or not cannot write",
    "start": "97869",
    "end": "106689"
  },
  {
    "text": "arbitrary data to an arbitrary address is a good one especially in the US here's what we canary says type safety",
    "start": "106689",
    "end": "115899"
  },
  {
    "text": "the extent to which a programming language discourages or prevents type errors I think this is really",
    "start": "115899",
    "end": "122739"
  },
  {
    "text": "interesting the the extent varies we can have very little type safety some type",
    "start": "122739",
    "end": "129009"
  },
  {
    "text": "safety quite a lot of it or extremely much type safety and also discourages prevent we can have a system where you",
    "start": "129009",
    "end": "139569"
  },
  {
    "text": "can do all crazy things but it's sort of cumbersome and I guess that is where C++",
    "start": "139569",
    "end": "145000"
  },
  {
    "text": "comes in because after all we can as you said of we can we can do orbit rewrite",
    "start": "145000",
    "end": "150790"
  },
  {
    "text": "the address is we can do type punning and we V avoid stores and what-have-you",
    "start": "150790",
    "end": "156700"
  },
  {
    "text": "so there's absolutely no way that we can prevent we cannot protect ourselves",
    "start": "156700",
    "end": "163720"
  },
  {
    "text": "against Machiavelli but but but we can't protect against honest mistakes so it",
    "start": "163720",
    "end": "171400"
  },
  {
    "text": "here is my take of this type says if system discourages or prevents use of",
    "start": "171400",
    "end": "178090"
  },
  {
    "text": "one type when another is intended as what's suggested and also prevents or",
    "start": "178090",
    "end": "185019"
  },
  {
    "text": "discourages operations that don't make sense so here is familiar with POSIX API",
    "start": "185019",
    "end": "193169"
  },
  {
    "text": "file handle what operations make sense to do on a file handler +1 yeah yeah do",
    "start": "193169",
    "end": "203970"
  },
  {
    "text": "doing arithmetics on file handles that is a really good thing so maybe not great example of good type safety also",
    "start": "203970",
    "end": "212049"
  },
  {
    "text": "use of values outside the defines BAE I remember when I was a young teenager and I was first introduced to and you",
    "start": "212049",
    "end": "220239"
  },
  {
    "text": "can say this type is an integral type that holds values between 1 and 6 perfect for modeling dyes that's one",
    "start": "220239",
    "end": "229930"
  },
  {
    "text": "example there are probably other ideas but I think these are the most important",
    "start": "229930",
    "end": "236620"
  },
  {
    "text": "ones so this is actually what I'm going",
    "start": "236620",
    "end": "242109"
  },
  {
    "text": "to about today I've sort of sneaked through the introduction without saying anything",
    "start": "242109",
    "end": "247299"
  },
  {
    "text": "so we're going to look at type safety in C++ the raw language itself what it",
    "start": "247299",
    "end": "254500"
  },
  {
    "text": "offers and then I'm going to show finally simplistic but but nonetheless",
    "start": "254500",
    "end": "260769"
  },
  {
    "text": "quite powerful library solution and then Scout hub for some and more",
    "start": "260769",
    "end": "266590"
  },
  {
    "text": "sophisticated libraries to achieve type safety and at the end we'll look at what",
    "start": "266590",
    "end": "272080"
  },
  {
    "text": "happens to your code you use strong types that are genuinely safe because",
    "start": "272080",
    "end": "278199"
  },
  {
    "text": "things actually happen to your code good things so my stuff begins with this",
    "start": "278199",
    "end": "286660"
  },
  {
    "text": "extremely embarrassing bug I was a team leader of a number of programmers we",
    "start": "286660",
    "end": "292659"
  },
  {
    "text": "were developing a communications protocol for directing data flows",
    "start": "292659",
    "end": "299500"
  },
  {
    "text": "through a network and we have in this example I want to initiate a remove of a",
    "start": "299500",
    "end": "307720"
  },
  {
    "text": "receiver from a data flow and all of these messages have a request ID so that",
    "start": "307720",
    "end": "313630"
  },
  {
    "text": "when you get a response you can map the response to the request via the request",
    "start": "313630",
    "end": "318820"
  },
  {
    "text": "ID and in this case you also have a receiver ID and both of them are represented as 32-bit unsigned integers",
    "start": "318820",
    "end": "326289"
  },
  {
    "text": "and do you spot the bug yes oh boy did I feel embarrassed every",
    "start": "326289",
    "end": "336189"
  },
  {
    "text": "node you have any of you made this kind of mistake yeah what did you do what I did was I",
    "start": "336189",
    "end": "349349"
  },
  {
    "text": "started wondering when is it allowed to",
    "start": "349349",
    "end": "354960"
  },
  {
    "text": "when can one type be allowed to use when another is intended so if we have this",
    "start": "354960",
    "end": "360909"
  },
  {
    "text": "code like here we have a function that has a B and it wants to call a function",
    "start": "360909",
    "end": "367300"
  },
  {
    "text": "that requires an a what when is this allowed and in this case we can actually",
    "start": "367300",
    "end": "373629"
  },
  {
    "text": "not say this because we don't know what a and B are but what about this",
    "start": "373629",
    "end": "378749"
  },
  {
    "text": "amb are structs that they are in every way the same type aren't they a there",
    "start": "378749",
    "end": "385870"
  },
  {
    "text": "are naked strux they have exactly one member called value and the type is the",
    "start": "385870",
    "end": "391869"
  },
  {
    "text": "same as int so is this legal no it's not legal because there are",
    "start": "391869",
    "end": "397120"
  },
  {
    "text": "different types good so what if I actually want to make this legal then",
    "start": "397120",
    "end": "402149"
  },
  {
    "text": "can I do that well I can add a constructor to a that takes a be",
    "start": "402149",
    "end": "408729"
  },
  {
    "text": "providing I'm not marking its as explicit because it explicit it's still not allowed or I can add a conversion",
    "start": "408729",
    "end": "416680"
  },
  {
    "text": "operator from from B to get an A again as long as I'm not marking it explicit",
    "start": "416680",
    "end": "424620"
  },
  {
    "text": "or I can change the inheritance structure so that a B is an A then it's",
    "start": "424620",
    "end": "432069"
  },
  {
    "text": "also allowed and in all other situations this is forbidden it's not allowed so",
    "start": "432069",
    "end": "442240"
  },
  {
    "text": "with this inside her slightly different story began where instead of using type",
    "start": "442240",
    "end": "449259"
  },
  {
    "text": "depths for request ID and receiver idea just made naked structs that holds the",
    "start": "449259",
    "end": "455229"
  },
  {
    "text": "value and I made this mistake and boom",
    "start": "455229",
    "end": "459599"
  },
  {
    "text": "candidate function not viable no known conversion from receiver ID to request ID hey we're at home right this is this",
    "start": "461039",
    "end": "468610"
  },
  {
    "text": "is it except it's a little bit cumbersome to work with it this way with",
    "start": "468610",
    "end": "475800"
  },
  {
    "text": "having to access dot value all the time but this is a good start",
    "start": "475800",
    "end": "482289"
  },
  {
    "text": "so it means that for type that we create",
    "start": "482289",
    "end": "487630"
  },
  {
    "text": "ourselves we have well everything is forbidden by default if we want something to be allowed we must make an",
    "start": "487630",
    "end": "494139"
  },
  {
    "text": "effort to allow it this is great so what I did them instead was to make a class",
    "start": "494139",
    "end": "500500"
  },
  {
    "text": "for receiver ID so we can construct it we can get the value out of it easily",
    "start": "500500",
    "end": "505919"
  },
  {
    "text": "having the ability to compare for equality makes sense and we're actually using these in a map so the lips and",
    "start": "505919",
    "end": "512770"
  },
  {
    "text": "operator is also good but this becomes a lot of boilerplate and especially since",
    "start": "512770",
    "end": "520029"
  },
  {
    "text": "I'm going to repeat exactly the same thing again for request ID so we have a",
    "start": "520029",
    "end": "530410"
  },
  {
    "text": "solution but it's a bit cumbersome I don't want to write this code over and",
    "start": "530410",
    "end": "537700"
  },
  {
    "text": "over and over so what happened then it was thought is thinking but can can I",
    "start": "537700",
    "end": "545290"
  },
  {
    "text": "write a library for this and since you already saw the again that you you know that can or at least you assumed before",
    "start": "545290",
    "end": "554470"
  },
  {
    "text": "I go on it's other questions about what I've shown so far or is it clear",
    "start": "554470",
    "end": "559529"
  },
  {
    "text": "ok I see not good so I started experimenting with",
    "start": "559529",
    "end": "567459"
  },
  {
    "text": "something like this a class template that takes a tee tse the type that that",
    "start": "567459",
    "end": "574370"
  },
  {
    "text": "it's to represent and the tag or get back to the tag very shortly",
    "start": "574370",
    "end": "581420"
  },
  {
    "text": "it has constructors from a tee and you can get the value out of it and you add",
    "start": "581420",
    "end": "588440"
  },
  {
    "text": "other operations to the Equality comparison less than what have you assignment you may note that tag is",
    "start": "588440",
    "end": "598310"
  },
  {
    "text": "actually not used for anything it is actually used here but to prevent",
    "start": "598310",
    "end": "605630"
  },
  {
    "text": "operations so here I'm saying explicitly that a safe type is not allowed to be",
    "start": "605630",
    "end": "614750"
  },
  {
    "text": "constructed from a safe type that uses another tee or another tag or both and",
    "start": "614750",
    "end": "622160"
  },
  {
    "text": "the same is repeated also for at least for assignment and you can use it like",
    "start": "622160",
    "end": "631160"
  },
  {
    "text": "this using interim is safe type of int and struct into an underscore so I'm",
    "start": "631160",
    "end": "639110"
  },
  {
    "text": "creating here the struct into an underscore that is that tag type it's not used for anything anywhere in the",
    "start": "639110",
    "end": "646279"
  },
  {
    "text": "program other than to make a difference to make sure that int 1 and n 2 are",
    "start": "646279",
    "end": "652339"
  },
  {
    "text": "actually different types because although both are safe types of int they have different tag types and this works",
    "start": "652339",
    "end": "660649"
  },
  {
    "text": "this works fine so by changing my code so that request ID is now safe type of",
    "start": "660649",
    "end": "668230"
  },
  {
    "text": "you and 32e and request ID tag and the same for receiver ID but note that the",
    "start": "668230",
    "end": "678260"
  },
  {
    "text": "tags are not the same they are different so it's not allowed to mix these so with",
    "start": "678260",
    "end": "685760"
  },
  {
    "text": "this bug again the classic will get this compilation error",
    "start": "685760",
    "end": "691720"
  },
  {
    "text": "candidate functional viable no known conversion from safe tight blah blah blah receiver ID tag to safe type blah",
    "start": "691720",
    "end": "698480"
  },
  {
    "text": "blah blah request ID tag this worked it's not ideal but it's good it's a bit",
    "start": "698480",
    "end": "706160"
  },
  {
    "text": "noisy the error message I think so we can do a little bit better are you",
    "start": "706160",
    "end": "713360"
  },
  {
    "text": "familiar with curiously recurring templates parameter idiom I got to write",
    "start": "713360",
    "end": "718369"
  },
  {
    "text": "this one Peter does this look familiar",
    "start": "718369",
    "end": "724790"
  },
  {
    "text": "to you or is it weird that request ID is defined in terms of itself so the",
    "start": "724790",
    "end": "734600"
  },
  {
    "text": "request ID inherits from safe type of human 32t and request ID the reason this",
    "start": "734600",
    "end": "741559"
  },
  {
    "text": "works is that safe type doesn't actually do anything at all with the tag type it just needs to know that it is a type and",
    "start": "741559",
    "end": "748660"
  },
  {
    "text": "when you have struct request ID :",
    "start": "748660",
    "end": "753670"
  },
  {
    "text": "request ID is known to be a type we cannot do much with it we we cannot",
    "start": "753670",
    "end": "759110"
  },
  {
    "text": "instantiate it we don't know how big it is we cannot call functions on it but we",
    "start": "759110",
    "end": "764990"
  },
  {
    "text": "can't use its type we can have pointers to it we can have references to it we're not doing that but we can and in this",
    "start": "764990",
    "end": "771799"
  },
  {
    "text": "case I can use it as the tag type and then we have the using directive to say",
    "start": "771799",
    "end": "777410"
  },
  {
    "text": "that request ID has all the constructors that are the safe type does and repeat",
    "start": "777410",
    "end": "784279"
  },
  {
    "text": "the same thing for receiver ID and now we see candidate function not viable no",
    "start": "784279",
    "end": "790339"
  },
  {
    "text": "known conversion receiver ID to request ID perfect absolutely perfect Peter I'm",
    "start": "790339",
    "end": "798410"
  },
  {
    "text": "going to have to ask you to close your eyes again I'm sorry this is a little bit too much",
    "start": "798410",
    "end": "804709"
  },
  {
    "text": "boilerplate to repeat so I made a convenient macro",
    "start": "804709",
    "end": "811029"
  },
  {
    "text": "I really am NOT a friend of the preprocessor but sometimes it can",
    "start": "813170",
    "end": "819439"
  },
  {
    "text": "provide conveniences so by using this I",
    "start": "819439",
    "end": "824939"
  },
  {
    "text": "can write save type request ID you in 32 T the syntax is wrong but it is convenient it's it's not a lot of typing",
    "start": "824939",
    "end": "832049"
  },
  {
    "text": "it was not difficult to convince my colleagues to start using this which",
    "start": "832049",
    "end": "839809"
  },
  {
    "text": "prevented a huge number of bugs so now",
    "start": "839809",
    "end": "850949"
  },
  {
    "text": "you've seen how to how to write a simple library this was actually used or is",
    "start": "850949",
    "end": "856230"
  },
  {
    "text": "still used at my previous job it's good",
    "start": "856230",
    "end": "861600"
  },
  {
    "text": "enough for a lot questions or can I go",
    "start": "861600",
    "end": "868350"
  },
  {
    "text": "on so let's let's take a look at what",
    "start": "868350",
    "end": "876389"
  },
  {
    "text": "others have done there are there are several libraries available I will",
    "start": "876389",
    "end": "883319"
  },
  {
    "text": "briefly introduce you to two of them there are others this young man came",
    "start": "883319",
    "end": "892980"
  },
  {
    "text": "along you're not a Miller Funai turn on various social media he",
    "start": "892980",
    "end": "899519"
  },
  {
    "text": "posted on his github account this typesafe library zero overhead utilities",
    "start": "899519",
    "end": "906959"
  },
  {
    "text": "for preventing bugs at compile time I think I'm sold already it is this is a",
    "start": "906959",
    "end": "913919"
  },
  {
    "text": "fairly rich lab with you can piece together the functionality you want of your types",
    "start": "913919",
    "end": "919489"
  },
  {
    "text": "it also includes and includes a number of other things that you may argue don't",
    "start": "919489",
    "end": "925679"
  },
  {
    "text": "really have anything to do with type safety per se like variations or",
    "start": "925679",
    "end": "931399"
  },
  {
    "text": "optional and variant that actually don't know to to which degree they differ from",
    "start": "931399",
    "end": "938009"
  },
  {
    "text": "the standard implementation but they are available from C++ 11 so at least that",
    "start": "938009",
    "end": "945378"
  },
  {
    "text": "it looks like this in in the header typesafe slash strong type def HPP you",
    "start": "946370",
    "end": "954509"
  },
  {
    "text": "have a closed template that the public interface looks like this you you can",
    "start": "954509",
    "end": "961769"
  },
  {
    "text": "create them from your values you can get the values out of a safe type using",
    "start": "961769",
    "end": "967699"
  },
  {
    "text": "conversion operator everything is constant x per everything is explicit and you see on the first few lines that",
    "start": "967699",
    "end": "977160"
  },
  {
    "text": "it's pretty much the same ID that i had the template parameters are on the",
    "start": "977160",
    "end": "982319"
  },
  {
    "text": "reverse the order from from my example but it's the same idea and the way you",
    "start": "982319",
    "end": "987839"
  },
  {
    "text": "use it is like this you you include the header obviously you follow the example",
    "start": "987839",
    "end": "994199"
  },
  {
    "text": "in your familiars documentation and did get a shorthand namespace and you say my",
    "start": "994199",
    "end": "1003589"
  },
  {
    "text": "handle is a type safe strong type therefore my handle and this is now",
    "start": "1003589",
    "end": "1010310"
  },
  {
    "text": "really just a handle type you cannot do the only thing you can do with this is to create it with the value and you can",
    "start": "1010310",
    "end": "1016699"
  },
  {
    "text": "get the value back that's all but here comes the stroke of genius it's a very",
    "start": "1016699",
    "end": "1024199"
  },
  {
    "text": "clever young man there is a sub namespace strong type def op and with",
    "start": "1024199",
    "end": "1032270"
  },
  {
    "text": "that you can piece together the functionality so you can say yeah and by the way I want my handle to be equality",
    "start": "1032270",
    "end": "1038839"
  },
  {
    "text": "comparable and I want to be able to just",
    "start": "1038839",
    "end": "1044240"
  },
  {
    "text": "be mr. to oh streams and you need there",
    "start": "1044240",
    "end": "1051770"
  },
  {
    "text": "are also some functionalities that are of over higher level functionality like integrator integer arithmetic this is",
    "start": "1051770",
    "end": "1061700"
  },
  {
    "text": "probably going to surprise you but when I've used strong types in in my code base I have not once found a need for an",
    "start": "1061700",
    "end": "1070640"
  },
  {
    "text": "integer arithmetic type I have found need for something else",
    "start": "1070640",
    "end": "1076669"
  },
  {
    "text": "that I will get to because our arithmetic is needed but I haven't",
    "start": "1076669",
    "end": "1081799"
  },
  {
    "text": "actually needed an integer arithmetic type since he since you define a",
    "start": "1081799",
    "end": "1093020"
  },
  {
    "text": "structure cannot of course add your own member functions to it as you please or in this case maybe I don't like the",
    "start": "1093020",
    "end": "1101590"
  },
  {
    "text": "stream insertion operator that is that is provided from the library I want my",
    "start": "1101590",
    "end": "1106970"
  },
  {
    "text": "own so I can then just write the the member there and I can get the underlying value by using a static cost",
    "start": "1106970",
    "end": "1115240"
  },
  {
    "text": "or since this is actually a rather cumbersome I can use from the library",
    "start": "1115240",
    "end": "1121490"
  },
  {
    "text": "the the function get get is overloaded for constant non constant l value",
    "start": "1121490",
    "end": "1127549"
  },
  {
    "text": "reference or value reference it does the right thing so that is handy there is",
    "start": "1127549",
    "end": "1136159"
  },
  {
    "text": "another one that is also worth looking at this is a bit more modern I think I",
    "start": "1136159",
    "end": "1142240"
  },
  {
    "text": "think it was roughly a year ago that is yonathan baqara posted his library",
    "start": "1142240",
    "end": "1149030"
  },
  {
    "text": "called named type so implementation of strong types in C++ so you have the",
    "start": "1149030",
    "end": "1157130"
  },
  {
    "text": "github link there it's a it's a smaller library much more focused on type safety",
    "start": "1157130",
    "end": "1164770"
  },
  {
    "text": "and but of course there are some other sort of related things like support for",
    "start": "1164770",
    "end": "1172480"
  },
  {
    "text": "converting between like but not the same types like meters to feet for example",
    "start": "1172480",
    "end": "1180880"
  },
  {
    "text": "and if you have not watched his talks from meeting C++ last year should take a",
    "start": "1181630",
    "end": "1188419"
  },
  {
    "text": "photo of that link it's an amazing talk",
    "start": "1188419",
    "end": "1193509"
  },
  {
    "text": "his library is similar I'm talking a little bit so that people can take",
    "start": "1196539",
    "end": "1202190"
  },
  {
    "text": "photos similar but not quite the same you can see that it is a bit more",
    "start": "1202190",
    "end": "1208280"
  },
  {
    "text": "modern we're done okay",
    "start": "1208280",
    "end": "1213400"
  },
  {
    "text": "so the way you use it is well you recognize the pattern it's uh said my",
    "start": "1213400",
    "end": "1219950"
  },
  {
    "text": "handle is a flu and everything is in a nice place flu and since he's using it in his fluency + Ross blog if you're not",
    "start": "1219950",
    "end": "1226310"
  },
  {
    "text": "reading that you should so it's a fluent name type of int and a tag the",
    "start": "1226310",
    "end": "1235280"
  },
  {
    "text": "difference here is that the functionality you want your nothin bukhara calls these skills you add them",
    "start": "1235280",
    "end": "1242330"
  },
  {
    "text": "as parameter c in the template parameter list which means that you don't have to repeat and say the comparable my handle",
    "start": "1242330",
    "end": "1250490"
  },
  {
    "text": "inherits from comparable of my handle so you get a it's a bit shorter if you're",
    "start": "1250490",
    "end": "1257990"
  },
  {
    "text": "reasonably familiar with writing template code it's not difficult to add your own skills the same actually goes",
    "start": "1257990",
    "end": "1266990"
  },
  {
    "text": "for your familiars library you can if",
    "start": "1266990",
    "end": "1272060"
  },
  {
    "text": "you like use the C RTP instead the",
    "start": "1272060",
    "end": "1278810"
  },
  {
    "text": "advantage of doing that is of course if you want to add add member functions he",
    "start": "1278810",
    "end": "1287630"
  },
  {
    "text": "has one thing that I think is a little bit questionable you can say that",
    "start": "1287630",
    "end": "1293050"
  },
  {
    "text": "actually I want my type to be implicitly convertible to something I'm not sure",
    "start": "1293050",
    "end": "1299120"
  },
  {
    "text": "that that is a good idea but it is at least good that if you want it to be implicitly convertible you have to be very explicit about it and it's also",
    "start": "1299120",
    "end": "1305690"
  },
  {
    "text": "about ugly and that is good and that's",
    "start": "1305690",
    "end": "1312560"
  },
  {
    "text": "pretty much it actually I'm not going to mention more but then now you have seen two examples that are available from",
    "start": "1312560",
    "end": "1319340"
  },
  {
    "text": "from github questions",
    "start": "1319340",
    "end": "1326169"
  },
  {
    "text": "so what do you think happens with your code when you start using strong types",
    "start": "1330390",
    "end": "1335840"
  },
  {
    "text": "it won't compile - what happens yeah because your your your code is",
    "start": "1339380",
    "end": "1344730"
  },
  {
    "text": "bug-ridden and the compiler will now tell you that your code is bug-ridden fix your code yeah that is true can be",
    "start": "1344730",
    "end": "1351720"
  },
  {
    "text": "true doesn't have to be I'm using an exam",
    "start": "1351720",
    "end": "1359130"
  },
  {
    "text": "from from my pre job I work for a net insight net inside networking equipment",
    "start": "1359130",
    "end": "1364890"
  },
  {
    "text": "and net inside prides itself rightly so of knowing exactly how much network",
    "start": "1364890",
    "end": "1373590"
  },
  {
    "text": "capacity is utilized on every leg in the entire network and the way this is done",
    "start": "1373590",
    "end": "1379770"
  },
  {
    "text": "is by using a I'm simplifying here but it's it's a quantum network capacity",
    "start": "1379770",
    "end": "1385620"
  },
  {
    "text": "that is called a slot and slots are grouped together in frames frames are",
    "start": "1385620",
    "end": "1391260"
  },
  {
    "text": "typically a thousand times bigger than what I'm showing here but you would not be able to follow those slides if I draw",
    "start": "1391260",
    "end": "1398280"
  },
  {
    "text": "them correctly to size and these colors",
    "start": "1398280",
    "end": "1404130"
  },
  {
    "text": "here are data flows on the leg in the network so we can see that we have a",
    "start": "1404130",
    "end": "1409950"
  },
  {
    "text": "green data flow that occupies 8 slots we can see the exact indices and we have a",
    "start": "1409950",
    "end": "1417240"
  },
  {
    "text": "much smaller blue data flow and we can say that the white ones are or unutilized capacity that we can add for",
    "start": "1417240",
    "end": "1423720"
  },
  {
    "text": "for new things slot ranges is really important because insight needs to do",
    "start": "1423720",
    "end": "1431660"
  },
  {
    "text": "set arithmetics actually or on these and like I said the frames are much bigger",
    "start": "1431660",
    "end": "1437580"
  },
  {
    "text": "than this and you have many many many instances so by being able to represent",
    "start": "1437580",
    "end": "1443340"
  },
  {
    "text": "a continuous range as just two numbers saves a lot of computation and a lot of",
    "start": "1443340",
    "end": "1448500"
  },
  {
    "text": "memory so those are important and",
    "start": "1448500",
    "end": "1454880"
  },
  {
    "text": "they're represented like this the the two boxes on the left or pseudocode you",
    "start": "1454880",
    "end": "1461160"
  },
  {
    "text": "cannot just for Klara an anonymous type like this unfortunately I would really like to see",
    "start": "1461160",
    "end": "1467470"
  },
  {
    "text": "that true but I don't want to get into how they are represented but but the",
    "start": "1467470",
    "end": "1473740"
  },
  {
    "text": "index is identify a slot in a frame and",
    "start": "1473740",
    "end": "1478870"
  },
  {
    "text": "a slot count adjust the number and then the range is something that has a start",
    "start": "1478870",
    "end": "1484030"
  },
  {
    "text": "on the length so for example e in the",
    "start": "1484030",
    "end": "1489610"
  },
  {
    "text": "picture of the frame you have the green one on the right starts on slot number",
    "start": "1489610",
    "end": "1494920"
  },
  {
    "text": "it's not index 13 and has a slot count of four",
    "start": "1494920",
    "end": "1500340"
  },
  {
    "text": "okay so magic number don't we hate those",
    "start": "1501960",
    "end": "1508750"
  },
  {
    "text": "in our code has something like this establish a connection and SD is the is",
    "start": "1508750",
    "end": "1515950"
  },
  {
    "text": "an old video transfer standard constant bit rate so which I create connection",
    "start": "1515950",
    "end": "1524830"
  },
  {
    "text": "destination 528 what what is 528 so I",
    "start": "1524830",
    "end": "1531700"
  },
  {
    "text": "have to read create connection prototype and I see okay it's a slot count fun 128",
    "start": "1531700",
    "end": "1537310"
  },
  {
    "text": "okay good but with a reasonable strong",
    "start": "1537310",
    "end": "1542890"
  },
  {
    "text": "type support you will not get away with this the compiler will say no I don't",
    "start": "1542890",
    "end": "1550720"
  },
  {
    "text": "know I am NOT doing an implicit conversion from a naked int sorry you have to state what the type is so by",
    "start": "1550720",
    "end": "1557380"
  },
  {
    "text": "saying at the call side create a connection to this destination with a",
    "start": "1557380",
    "end": "1563230"
  },
  {
    "text": "slot count of 528 this is not great but it is better because now now I'm",
    "start": "1563230",
    "end": "1570700"
  },
  {
    "text": "expressing intent and there we know that the capacity here is in in slot it's not",
    "start": "1570700",
    "end": "1578560"
  },
  {
    "text": "in the megabits per second or whatever how many of you since we're in Norway",
    "start": "1578560",
    "end": "1585460"
  },
  {
    "text": "how many of you write the programming write your programs using a scandinavian keyboard layout you love curly braces",
    "start": "1585460",
    "end": "1592660"
  },
  {
    "text": "don't you so just to save your hands from falling",
    "start": "1592660",
    "end": "1599200"
  },
  {
    "text": "apart you of course give it a name so you can type a few some fewer curly so",
    "start": "1599200",
    "end": "1605590"
  },
  {
    "text": "just by having a really program or hostile keyboard you will write better programs that's good",
    "start": "1605590",
    "end": "1611919"
  },
  {
    "text": "who knew so do that be explicit with the",
    "start": "1611919",
    "end": "1620770"
  },
  {
    "text": "type and give them give your numbers names that means something all right",
    "start": "1620770",
    "end": "1631380"
  },
  {
    "text": "encapsulation this interest so in this",
    "start": "1631380",
    "end": "1637690"
  },
  {
    "text": "implementation of the communications protocol the protocol is a binary",
    "start": "1637690",
    "end": "1642970"
  },
  {
    "text": "protocol so we want to stuff things into a message buffer so I say that I want to",
    "start": "1642970",
    "end": "1650230"
  },
  {
    "text": "serialize this capacitor as a slot count as 24 bits needless to say this code is",
    "start": "1650230",
    "end": "1657400"
  },
  {
    "text": "repeated three or four times throughout the code base which is completely bonkers fortunately the protocol is saying so",
    "start": "1657400",
    "end": "1666120"
  },
  {
    "text": "slot count is always represented as 24 bits so we can do something since since",
    "start": "1666120",
    "end": "1676299"
  },
  {
    "text": "using a strong type we can do something that we couldn't do with the type def",
    "start": "1676299",
    "end": "1681760"
  },
  {
    "text": "and that is to overload functions we can say that the way to serialize data is to",
    "start": "1681760",
    "end": "1689110"
  },
  {
    "text": "go through this function that is called serialize data and it is overloaded for slot count and it's overloaded for slot",
    "start": "1689110",
    "end": "1697929"
  },
  {
    "text": "index and for receiver ID and for request ID and you have the information of how to represent in this case of slot",
    "start": "1697929",
    "end": "1704409"
  },
  {
    "text": "count in a message buffer in one place in the serialized data overload for that type and of course then you do a",
    "start": "1704409",
    "end": "1714720"
  },
  {
    "text": "convenience thing and offer a template I'd serialize function that just calls",
    "start": "1714720",
    "end": "1721179"
  },
  {
    "text": "this serialized data so you get the coders on the last line there yes a buffer dot serialize",
    "start": "1721179",
    "end": "1728330"
  },
  {
    "text": "now we have gained two things here one is the encapsulation we bother with how",
    "start": "1728330",
    "end": "1737250"
  },
  {
    "text": "it is represented in one place it's not distributed this 24 bits it sits in one",
    "start": "1737250",
    "end": "1744000"
  },
  {
    "text": "place that is good we are also much more honest about which",
    "start": "1744000",
    "end": "1749400"
  },
  {
    "text": "level of abstraction we're working on here I'm building a message I'm concerned with which part does this",
    "start": "1749400",
    "end": "1758220"
  },
  {
    "text": "message consist of what what what data is stuffed in there exactly how its represented that there is another layer",
    "start": "1758220",
    "end": "1764580"
  },
  {
    "text": "of abstraction so it makes the code less",
    "start": "1764580",
    "end": "1770580"
  },
  {
    "text": "cluttered which is a good thing and this",
    "start": "1770580",
    "end": "1777030"
  },
  {
    "text": "is a big it type semantics if someone suggested an important bit is to see",
    "start": "1777030",
    "end": "1783330"
  },
  {
    "text": "what what operations actually makes sense to do on the type so we had",
    "start": "1783330",
    "end": "1791190"
  },
  {
    "text": "something is sort of looking like we have a slot pool and to be quickly able",
    "start": "1791190",
    "end": "1799559"
  },
  {
    "text": "to see if can i establish a data flow over this leg of the network i just want",
    "start": "1799559",
    "end": "1805290"
  },
  {
    "text": "to very very quickly be able to ask the Schloss pool for that leg how much is available and this is done by for",
    "start": "1805290",
    "end": "1814890"
  },
  {
    "text": "example in the release capacity function we iterate over all the ranges and just",
    "start": "1814890",
    "end": "1821940"
  },
  {
    "text": "add two unused slots and of course this did not compile stupid system",
    "start": "1821940",
    "end": "1827760"
  },
  {
    "text": "okay back to naked ins again hey or not so started thinking what operations do",
    "start": "1827760",
    "end": "1837600"
  },
  {
    "text": "actually make sense on these types does",
    "start": "1837600",
    "end": "1843120"
  },
  {
    "text": "it always make sense to do additions and whatever so back to this we have a frame",
    "start": "1843120",
    "end": "1851820"
  },
  {
    "text": "of slots and I start thinking doesn't make sense to add slot counts yeah that",
    "start": "1851820",
    "end": "1858420"
  },
  {
    "text": "was the example adding slot counts gives another soft count subtracting",
    "start": "1858420",
    "end": "1864090"
  },
  {
    "text": "them yes it's symmetric it makes perfect sense multiplies locks guns get shotgun",
    "start": "1864090",
    "end": "1870149"
  },
  {
    "text": "squared now even though you're not familiar with the the problem really do",
    "start": "1870149",
    "end": "1875879"
  },
  {
    "text": "you understand intuitively that this is nonsense you don't want to do that so no don't don't want to be able to scale it",
    "start": "1875879",
    "end": "1884580"
  },
  {
    "text": "to be multiplied with the ratios I have this slot counter that I want five times as much make sense divide slot counts",
    "start": "1884580",
    "end": "1895440"
  },
  {
    "text": "with each other no it's sort of the same it's mere ratio and yeah the dividing of",
    "start": "1895440",
    "end": "1903299"
  },
  {
    "text": "start cut with ratio makes equal sense so that is good what about a slot in",
    "start": "1903299",
    "end": "1909779"
  },
  {
    "text": "this is doesn't make sense to add low the indices makes absolutely no sense",
    "start": "1909779",
    "end": "1917009"
  },
  {
    "text": "whatsoever it's not index plus a slot count yes I mentioned that when I talked",
    "start": "1917009",
    "end": "1923909"
  },
  {
    "text": "about the slot ranges consecutive ranges of slots so that that makes sense not index plus account is another slot index",
    "start": "1923909",
    "end": "1930179"
  },
  {
    "text": "so again for example the the green rage at the top right thirteen plus it's",
    "start": "1930179",
    "end": "1937320"
  },
  {
    "text": "count of four is 17 which happens to be where the next range begins to it",
    "start": "1937320",
    "end": "1944519"
  },
  {
    "text": "subtracts lotta indexes yeah sure makes sense gets a slot count back divide starting disease",
    "start": "1944519",
    "end": "1952970"
  },
  {
    "text": "divide with the slot count this is getting weird no I don't want that divide with some",
    "start": "1954220",
    "end": "1961820"
  },
  {
    "text": "ratio I have the sixteenth slot and I want to divide that by now that doesn't",
    "start": "1961820",
    "end": "1967940"
  },
  {
    "text": "make sense starting next squared no go slotting in the time slot gun no",
    "start": "1967940",
    "end": "1975230"
  },
  {
    "text": "don't go if this is we don't want that stop the times irate no go does this",
    "start": "1975230",
    "end": "1983750"
  },
  {
    "text": "remind you of something you should",
    "start": "1983750",
    "end": "1988880"
  },
  {
    "text": "actually write this pattern the absolutely perfect example is in the",
    "start": "1988880",
    "end": "1995510"
  },
  {
    "text": "chrono library the counterpart to the",
    "start": "1995510",
    "end": "2000610"
  },
  {
    "text": "slot indices or the time points in the chrono and the slot counts on the left",
    "start": "2000610",
    "end": "2006610"
  },
  {
    "text": "to each its counterpart in the chrono library or durations I can add durations",
    "start": "2006610",
    "end": "2011950"
  },
  {
    "text": "I can scale and subtract their durations I can add a duration to a time point to",
    "start": "2011950",
    "end": "2017169"
  },
  {
    "text": "get another time point I can subtract two time points to get the duration",
    "start": "2017169",
    "end": "2023529"
  },
  {
    "text": "between them another example that is almost correct but not quite is pointer",
    "start": "2023529",
    "end": "2031990"
  },
  {
    "text": "arithmetic so you can say that on the right hand side you have pointers and left hand side you have the in e-type",
    "start": "2031990",
    "end": "2041309"
  },
  {
    "text": "the only reason that that is not exactly correct is because the Infinity is a",
    "start": "2041309",
    "end": "2046419"
  },
  {
    "text": "generic in your type that you can wear if you like which doesn't make any sense or close the file log with I did not",
    "start": "2046419",
    "end": "2057730"
  },
  {
    "text": "know this but this is actually there is a name for this in mathematics this is",
    "start": "2057730",
    "end": "2063310"
  },
  {
    "text": "called an affine space so the typical idea of an affine space is a coordinate",
    "start": "2063310",
    "end": "2069580"
  },
  {
    "text": "system where you have positions the positions are in this case the slot indices and you have vectors you can add",
    "start": "2069580",
    "end": "2076929"
  },
  {
    "text": "vectors you can subtract lectures you can add a vector to a position to get another position if vectors are parallel",
    "start": "2076929",
    "end": "2083429"
  },
  {
    "text": "you can ask if one is longer and shorter than the other how much you can get a new new vector by saying",
    "start": "2083429",
    "end": "2091388"
  },
  {
    "text": "this vector times three so it says three times as long vector that is parallel so",
    "start": "2091389",
    "end": "2099010"
  },
  {
    "text": "I discovered something that is of course well known since a long time but it's",
    "start": "2099010",
    "end": "2104800"
  },
  {
    "text": "good to know that my intuition was onto something so I modeled I actually modeled exactly",
    "start": "2104800",
    "end": "2113770"
  },
  {
    "text": "this behavior into short counter slaughter index and don't you think I actually discovered a bug where I did",
    "start": "2113770",
    "end": "2120970"
  },
  {
    "text": "made our own operations that did not make sense yeah strong types so test",
    "start": "2120970",
    "end": "2131349"
  },
  {
    "text": "code then test code is interesting so we have something like this Oh have a test",
    "start": "2131349",
    "end": "2138180"
  },
  {
    "text": "capacity decrease is notified to clients so in in this test I have a test node",
    "start": "2138180",
    "end": "2145630"
  },
  {
    "text": "and creating two clients and at the end I'm throttling the capacity and I want",
    "start": "2145630",
    "end": "2151960"
  },
  {
    "text": "to make sure that the new capacity callback is called but what are these",
    "start": "2151960",
    "end": "2161050"
  },
  {
    "text": "numbers this is it's a bit confusing isn't it but we all heard that it's bad",
    "start": "2161050",
    "end": "2172150"
  },
  {
    "text": "to use magic numbers so let's let's name them this number for that comes up it",
    "start": "2172150",
    "end": "2177400"
  },
  {
    "text": "seems to be a request ID let's do that request ID for yeah so the code is a",
    "start": "2177400",
    "end": "2183970"
  },
  {
    "text": "little bit cleaner now maybe I should do the same with with the other numbers so",
    "start": "2183970",
    "end": "2191170"
  },
  {
    "text": "I give them names as variables to don't",
    "start": "2191170",
    "end": "2197050"
  },
  {
    "text": "do this for Java everything that is sacred don't do this to yourself or to your colleagues this this code was",
    "start": "2197050",
    "end": "2202450"
  },
  {
    "text": "almost good and now it's completely impossible to read even though it's just straight code just don't personally I",
    "start": "2202450",
    "end": "2212140"
  },
  {
    "text": "actually like magic numbers in in when we're talking about example based tests",
    "start": "2212140",
    "end": "2218170"
  },
  {
    "text": "so that is but I want to give them some meaning that tells something to me so I",
    "start": "2218170",
    "end": "2224020"
  },
  {
    "text": "prefer to write that like this create a",
    "start": "2224020",
    "end": "2229390"
  },
  {
    "text": "client with capacity of slot count of five and another way the slot count of eight the advantage of this now is that",
    "start": "2229390",
    "end": "2237720"
  },
  {
    "text": "the code speaks to me as a reader and says I know what the units are and if",
    "start": "2237720",
    "end": "2243310"
  },
  {
    "text": "I'm if I'm getting these wrong I get a compilation error but since they are since this is an example based test it's",
    "start": "2243310",
    "end": "2250900"
  },
  {
    "text": "also much easier to reason about the validity of the test because I can see",
    "start": "2250900",
    "end": "2256450"
  },
  {
    "text": "that at the end I'm throttling the capacity to five and the thing I'm checking for the callbacks is that I get",
    "start": "2256450",
    "end": "2263530"
  },
  {
    "text": "a slot count of two and three two plus three is five so yeah that makes sense it's probably true and I initialized the",
    "start": "2263530",
    "end": "2272020"
  },
  {
    "text": "clients with five slots and eight slots so five two two and eight two three",
    "start": "2272020",
    "end": "2277869"
  },
  {
    "text": "though it feels like it's a fair scaling so this probably a reasonable test so I",
    "start": "2277869",
    "end": "2286030"
  },
  {
    "text": "actually like magic numbers in in example based test but give give your numbers of semantic meaning you can of",
    "start": "2286030",
    "end": "2294040"
  },
  {
    "text": "course do this with even if you have typed ifs but you won't I know you want",
    "start": "2294040",
    "end": "2299730"
  },
  {
    "text": "because the compiler will let you get away with doing the wrong thing in this case you have to so you're forced to",
    "start": "2299730",
    "end": "2306579"
  },
  {
    "text": "write good code yay strong types so that",
    "start": "2306579",
    "end": "2312760"
  },
  {
    "text": "is actually what I wanted to talk about",
    "start": "2312760",
    "end": "2317819"
  },
  {
    "text": "to summarize we will know that the type safety for the built-in types that it's",
    "start": "2317819",
    "end": "2323530"
  },
  {
    "text": "absolutely terrible you get implicit conversions to everything but structs and clauses are",
    "start": "2323530",
    "end": "2330970"
  },
  {
    "text": "as strong as you make them everything is forbidden by default you must explicitly",
    "start": "2330970",
    "end": "2336160"
  },
  {
    "text": "add the functionality that you want to have and as we saw there are some",
    "start": "2336160",
    "end": "2342880"
  },
  {
    "text": "libraries available that can make your life easier and like I showed with this",
    "start": "2342880",
    "end": "2351130"
  },
  {
    "text": "I find space times where I have two types or couples and mean something together",
    "start": "2351130",
    "end": "2357190"
  },
  {
    "text": "just reasoning about this helps you understand your problem better and if",
    "start": "2357190",
    "end": "2363790"
  },
  {
    "text": "you can model this in your type system you present the possibility of making mistakes and be very aware of the urge",
    "start": "2363790",
    "end": "2372820"
  },
  {
    "text": "for convenience like the implicit conversions because it is much more",
    "start": "2372820",
    "end": "2378070"
  },
  {
    "text": "convenient to write code like that and you have just blasted a hole through the entire ID because now things can",
    "start": "2378070",
    "end": "2383950"
  },
  {
    "text": "implicitly convert to something you probably did not want at least in a place where you probably did not want it",
    "start": "2383950",
    "end": "2390750"
  },
  {
    "text": "so be a little bit careful about that and strong times leads to more",
    "start": "2390750",
    "end": "2397240"
  },
  {
    "text": "expressive code you have fewer magical numbers and you have better encapsulation because you can overload",
    "start": "2397240",
    "end": "2403600"
  },
  {
    "text": "on them and your tests express intent much more clear to the reader and avoid",
    "start": "2403600",
    "end": "2413140"
  },
  {
    "text": "type def type tests are really handy locally inside a function to create a shorthand but don't use them in your",
    "start": "2413140",
    "end": "2418930"
  },
  {
    "text": "api's because really what the type def when you use it in a bi it's really just",
    "start": "2418930",
    "end": "2424869"
  },
  {
    "text": "a comment it says yeah yeah yeah it's an int but use it in this way who reads",
    "start": "2424869",
    "end": "2430570"
  },
  {
    "text": "comments anyway so be careful about that and that is it unless there are some",
    "start": "2430570",
    "end": "2440830"
  },
  {
    "text": "interesting questions yes",
    "start": "2440830",
    "end": "2444420"
  },
  {
    "text": "what can you repeat the last bit yes yes",
    "start": "2448110",
    "end": "2456610"
  },
  {
    "text": "I have I tried singing used to define literals instead of explicitly writing my table yes I have it's a matter of",
    "start": "2456610",
    "end": "2465430"
  },
  {
    "text": "taste actually in the in the very long version of this talk I had examples of",
    "start": "2465430",
    "end": "2470770"
  },
  {
    "text": "that but I 45 minutes is shorter I had to strip some things more questions I",
    "start": "2470770",
    "end": "2479580"
  },
  {
    "text": "want to show you one thing there are there are a few minutes left are you",
    "start": "2480090",
    "end": "2485200"
  },
  {
    "text": "concerned about performance a few nods",
    "start": "2485200",
    "end": "2491250"
  },
  {
    "text": "simplifying a bit but you recognize this safe type here we use it t in the tag",
    "start": "2492880",
    "end": "2501550"
  },
  {
    "text": "then construct it I can get the value out I've added a operator plus equal and",
    "start": "2501550",
    "end": "2507050"
  },
  {
    "text": "- equal so I'm using some safe types here int 1 in 2 in 3 that gives you",
    "start": "2507050",
    "end": "2513230"
  },
  {
    "text": "different tags I've created an addition that you can add an int 1 and into sort",
    "start": "2513230",
    "end": "2521570"
  },
  {
    "text": "of like the slot index + slot count to get another slot index so I have a",
    "start": "2521570",
    "end": "2530570"
  },
  {
    "text": "function here that takes an int 1 and into and holds consume on on the summer",
    "start": "2530570",
    "end": "2537220"
  },
  {
    "text": "and here is a horrible overhead that you see there is none it's absolutely none",
    "start": "2537220",
    "end": "2545450"
  },
  {
    "text": "the compiler sees through everything it's just just an addition of two registers at any better but it actually",
    "start": "2545450",
    "end": "2555830"
  },
  {
    "text": "does get better because here I have another function a safe function that",
    "start": "2555830",
    "end": "2563930"
  },
  {
    "text": "takes by reference an int 1 and into a 19-3",
    "start": "2563930",
    "end": "2569410"
  },
  {
    "text": "so we add 2 I 1 and we subtract 2 I 1",
    "start": "2570610",
    "end": "2575720"
  },
  {
    "text": "and we see that it creates a function that does a move add sub move a return",
    "start": "2575720",
    "end": "2581120"
  },
  {
    "text": "ok and then I'm mirroring the same thing as a primitive fund using using the",
    "start": "2581120",
    "end": "2587360"
  },
  {
    "text": "primitive types so these are just than aliases for integer references and it",
    "start": "2587360",
    "end": "2597080"
  },
  {
    "text": "does exactly the same thing but look at the code move add move sub move it's one",
    "start": "2597080",
    "end": "2606650"
  },
  {
    "text": "instruction longer how come any ideas Tony knows of course yes",
    "start": "2606650",
    "end": "2619800"
  },
  {
    "text": "aliasing the the rules the rules of the language say that two pointers or",
    "start": "2619800",
    "end": "2626340"
  },
  {
    "text": "reference in in this case of different unrelated types must not refer to the",
    "start": "2626340",
    "end": "2633630"
  },
  {
    "text": "same object so the compiler knows that there is absolutely no way that that",
    "start": "2633630",
    "end": "2641880"
  },
  {
    "text": "there will be unexpected side effects of these I 1 I 2 I 3 actually being the",
    "start": "2641880",
    "end": "2648630"
  },
  {
    "text": "same variable it knows that they cannot be because they're different unrelated types whereas in the primitive function",
    "start": "2648630",
    "end": "2655410"
  },
  {
    "text": "the the compiler must assume that it is perfectly possible that everything of one of them are the same so yeah we have",
    "start": "2655410",
    "end": "2665850"
  },
  {
    "text": "a negative cost abstraction who heard of that last time now it's a this is a good",
    "start": "2665850",
    "end": "2671220"
  },
  {
    "text": "one I must admit that this is rare I actually had to work a bit to come up with an example that showed this but",
    "start": "2671220",
    "end": "2680880"
  },
  {
    "text": "don't be afraid of using strong types for fear of performance loss don't use",
    "start": "2680880",
    "end": "2687870"
  },
  {
    "text": "strong types expressively to get performance gains because you may be disappointed but but you should",
    "start": "2687870",
    "end": "2693750"
  },
  {
    "text": "absolutely not expect performance loss and you get much better code and much",
    "start": "2693750",
    "end": "2698820"
  },
  {
    "text": "better safety so is it the top link is",
    "start": "2698820",
    "end": "2704100"
  },
  {
    "text": "to an experiment library that I have written please toy with it if you like unlike you know some Millers and young",
    "start": "2704100",
    "end": "2712020"
  },
  {
    "text": "Humber chorus library it does actually support I find space types the second",
    "start": "2712020",
    "end": "2718140"
  },
  {
    "text": "link is to where my slides slides for my talks or including this one I uploaded",
    "start": "2718140",
    "end": "2723390"
  },
  {
    "text": "it during the lunch so go there if you want to and then you have information",
    "start": "2723390",
    "end": "2728640"
  },
  {
    "text": "for how to spam me if that is your thing thank you very much [Applause]",
    "start": "2728640",
    "end": "2742069"
  }
]