[
  {
    "text": "cool good morning first talk of the day",
    "start": "240",
    "end": "5279"
  },
  {
    "text": "and this is a title slide my company would want me to use um",
    "start": "5279",
    "end": "10920"
  },
  {
    "text": "this is the one that I would really want to use um I noticed when I Was preparing this talk and talking to some people about it",
    "start": "10920",
    "end": "18680"
  },
  {
    "text": "that there is some kind of an age Gap it's like people under 35 they don't",
    "start": "18680",
    "end": "25500"
  },
  {
    "text": "actively remember celebrity that watch that match and people who are like my",
    "start": "25500",
    "end": "31920"
  },
  {
    "text": "age and older they do and so I figured for the younger people in the room that",
    "start": "31920",
    "end": "37200"
  },
  {
    "text": "I explain a little bit like there's this TV channel called Music Television now it shows mostly reality shows",
    "start": "37200",
    "end": "44879"
  },
  {
    "text": "um and like dating dating programs but it used to be about music because we did",
    "start": "44879",
    "end": "50219"
  },
  {
    "text": "not have the bandwidth to actually watch videos in the 90s I mean YouTube didn't exist",
    "start": "50219",
    "end": "56699"
  },
  {
    "text": "um downloading a song took an entire evening over over dial up so if we wanted to see the music clips we had to",
    "start": "56699",
    "end": "62340"
  },
  {
    "text": "watch television and we fell in love with some artists at that time",
    "start": "62340",
    "end": "68340"
  },
  {
    "text": "and then MTV started thinking started to think about what can we do differently and that's when it all started going",
    "start": "68340",
    "end": "74460"
  },
  {
    "text": "downhill so celebrity that match is part of that and we first got Biebs and butt head you might remember those and and",
    "start": "74460",
    "end": "81240"
  },
  {
    "text": "there was also celebrity that match so what was celebrity that match um I was thinking about what am I gonna",
    "start": "81240",
    "end": "90000"
  },
  {
    "text": "name this talk I'm going to be talking about actors versus actors I was",
    "start": "90000",
    "end": "95159"
  },
  {
    "text": "thinking celebrity that match is an animated series with clay figures where celebrities fight celebrities so you",
    "start": "95159",
    "end": "101700"
  },
  {
    "text": "often have actors fighting actors right and it was really cool because they even had these clay figure commentators I",
    "start": "101700",
    "end": "109259"
  },
  {
    "text": "think they were called Nick diamond and and um I have it written down somewhere",
    "start": "109259",
    "end": "114360"
  },
  {
    "text": "Johnny Gomez and there was also Mills Lane who was the referee",
    "start": "114360",
    "end": "120780"
  },
  {
    "text": "um he had catchphrases like let's get it on and whenever something sketchy happened he's like I'll allow it right",
    "start": "120780",
    "end": "126659"
  },
  {
    "text": "and I remember like some of the episodes very vividly like Toby Maguire against",
    "start": "126659",
    "end": "131700"
  },
  {
    "text": "Jake Gyllenhaal or Paris Hilton against Nicole Richie actually MTV posted all of",
    "start": "131700",
    "end": "137640"
  },
  {
    "text": "these on YouTube so if if you're not familiar go and watch it it's very gory um I I left out all the gore but it gets",
    "start": "137640",
    "end": "145260"
  },
  {
    "text": "very bloody really quickly all I'm trying to say is I watched MTV when they were still cool I had to",
    "start": "145260",
    "end": "151739"
  },
  {
    "text": "invert this meme because mdv no longer is cool um but yeah it works",
    "start": "151739",
    "end": "157500"
  },
  {
    "text": "so having that out of the way um let's get down to the order of the day",
    "start": "157500",
    "end": "162900"
  },
  {
    "text": "um what am I going to talk about today I'm first going to tell you why you would want to use an extra framework right try to keep that brief and I'll",
    "start": "162900",
    "end": "170640"
  },
  {
    "text": "give you a little bit of a history of how we got to the point where we are today and and I'm going to show you some",
    "start": "170640",
    "end": "177239"
  },
  {
    "text": "shared Concepts between akan Orleans stuff that is similar between the two",
    "start": "177239",
    "end": "182340"
  },
  {
    "text": "and then we will basically fight it out and I'll show you some of the differences between the two and and",
    "start": "182340",
    "end": "189180"
  },
  {
    "text": "hopefully by 10 10 o'clock we will come to a conclusion and you can go and have a coffee",
    "start": "189180",
    "end": "195420"
  },
  {
    "text": "so why would you want to use a act one has changed in our industry",
    "start": "195420",
    "end": "202140"
  },
  {
    "text": "now first of all we are not writing software at the same scale anymore as 20",
    "start": "202140",
    "end": "209220"
  },
  {
    "text": "years ago we've had an explosion of the internet people are using smart devices",
    "start": "209220",
    "end": "214319"
  },
  {
    "text": "not just smartphones and watches but like you probably have a bunch of connected devices in your house as well",
    "start": "214319",
    "end": "220980"
  },
  {
    "text": "and a lot of the stuff that we do has to be prepared for a much bigger scale",
    "start": "220980",
    "end": "226379"
  },
  {
    "text": "let's say that you write a back end for an app if you're really planning to",
    "start": "226379",
    "end": "232260"
  },
  {
    "text": "scale that to millions of users you're going to need a system that is able to keep up with that right and we're no",
    "start": "232260",
    "end": "238799"
  },
  {
    "text": "longer running on Specialized Hardware anymore and a lot of us when we do high",
    "start": "238799",
    "end": "244200"
  },
  {
    "text": "skill stuff we are deploying it to the cloud and the cloud is basically a whole bunch of commodity Hardware so we're",
    "start": "244200",
    "end": "251400"
  },
  {
    "text": "going to need to figure out a way to scale with commodity Hardware to numbers that we were previously not able to",
    "start": "251400",
    "end": "258419"
  },
  {
    "text": "imagine and if we look at 50 years of evolution in microprocessors and there's a couple",
    "start": "258419",
    "end": "266280"
  },
  {
    "text": "of trends that you could notice I mean three to five gigahertz CPUs that has",
    "start": "266280",
    "end": "272220"
  },
  {
    "text": "been the norm for the last decade and a half or so um so that has stabilized completely and",
    "start": "272220",
    "end": "279840"
  },
  {
    "text": "what we also see is the single threat performance it's tapering off it's still increasing and there's a lot of Branch",
    "start": "279840",
    "end": "287220"
  },
  {
    "text": "prediction stuff that is making sure that this is still advancing but it's not advancing as much as the potential",
    "start": "287220",
    "end": "293880"
  },
  {
    "text": "number of users for our systems so we need to look for a little bit of Hope and the only hope that we have is this",
    "start": "293880",
    "end": "301500"
  },
  {
    "text": "when I started college um I got like the best of the best it was a Pentium tree a single core machine",
    "start": "301500",
    "end": "309840"
  },
  {
    "text": "right had 128 megabytes of RAM and that was like a high-end spec PC at",
    "start": "309840",
    "end": "316800"
  },
  {
    "text": "that time now we all have probably eight cores in in our pocket right and modern",
    "start": "316800",
    "end": "324180"
  },
  {
    "text": "laptops like like my new one it has 14 cores in um in a simple laptop that I can carry",
    "start": "324180",
    "end": "330960"
  },
  {
    "text": "around now to be able to use multiple cores we're gonna need to use multiple threats",
    "start": "330960",
    "end": "337139"
  },
  {
    "text": "and if we need to use multiple threads that's when stuff gets hard",
    "start": "337139",
    "end": "342180"
  },
  {
    "text": "because if we look at andal's law he's a very smart gentleman who thought about this way more than we did and he",
    "start": "342180",
    "end": "349860"
  },
  {
    "text": "describes how much you can theoretically speed up a workload by throwing more resources at it so if you add more CPUs",
    "start": "349860",
    "end": "358440"
  },
  {
    "text": "you're always going to be limited by the amount of your code that can be executed",
    "start": "358440",
    "end": "364080"
  },
  {
    "text": "in parallel if you can execute execute all of your codes in parallel you can basically",
    "start": "364080",
    "end": "371100"
  },
  {
    "text": "scale to Infinity but that is not the reality if we have multiple threats we're always going to",
    "start": "371100",
    "end": "378780"
  },
  {
    "text": "be faced with state and at some point more of our threats",
    "start": "378780",
    "end": "384419"
  },
  {
    "text": "are going to be accessing the same state and then you get race conditions and when you get race conditions you need to",
    "start": "384419",
    "end": "390840"
  },
  {
    "text": "introduce some kind of blocking right you need to make sure that that resources only be is only used by one",
    "start": "390840",
    "end": "398039"
  },
  {
    "text": "thread at a time that opens you to the possibility of of deadlocks which is not fun at all but",
    "start": "398039",
    "end": "405180"
  },
  {
    "text": "assuming that you can solve that what you will have with shared state is",
    "start": "405180",
    "end": "410880"
  },
  {
    "text": "that you will have a bit of your code that cannot run in parallel all the access to this resource needs to",
    "start": "410880",
    "end": "418139"
  },
  {
    "text": "run in series and not in parallel which is going to hurt our potential scaling as per Emerald's law",
    "start": "418139",
    "end": "424620"
  },
  {
    "text": "so as and assuming you can do that anybody here tried to manage their own threat pool at some point in their",
    "start": "424620",
    "end": "431160"
  },
  {
    "text": "careers was it fun no I mean assuming that you you can get",
    "start": "431160",
    "end": "437940"
  },
  {
    "text": "the debt logs and the serializing out of the way scheduling threats is hard I mean if you have to do it by yourself I",
    "start": "437940",
    "end": "443520"
  },
  {
    "text": "prefer somebody smarter than me thinking about that problem and that is where all of these actor",
    "start": "443520",
    "end": "450660"
  },
  {
    "text": "Frameworks come in and we have a lot of them now I mean a lot more than you might realize there are actor focused",
    "start": "450660",
    "end": "458099"
  },
  {
    "text": "languages like erlang and elixir we have Frameworks on the.net CLR you can do",
    "start": "458099",
    "end": "464340"
  },
  {
    "text": "actors in Dapper or Orleans protoactor on the jvm there's a whole I mean the",
    "start": "464340",
    "end": "470039"
  },
  {
    "text": "list of of actor Frameworks on Wikipedia is it's literally like two screens long",
    "start": "470039",
    "end": "477060"
  },
  {
    "text": "now what these Frameworks promise US is you will write your code in a very",
    "start": "477060",
    "end": "483360"
  },
  {
    "text": "simple way because inside your actor everything is going to be single threaded so that's easy to reason about",
    "start": "483360",
    "end": "490680"
  },
  {
    "text": "but they promise you that if you have a lot of actors you can get a very high degree of parallelization which makes",
    "start": "490680",
    "end": "496680"
  },
  {
    "text": "your scale out a lot easier and almost linear and by keeping a lot of your state in",
    "start": "496680",
    "end": "502800"
  },
  {
    "text": "memory you can also go to very very low latency situations and I'm sorry but",
    "start": "502800",
    "end": "508560"
  },
  {
    "text": "that is my company mandated um lock screen",
    "start": "508560",
    "end": "513659"
  },
  {
    "text": "that apparently I cannot turn off I have to use the right finger",
    "start": "513659",
    "end": "520979"
  },
  {
    "text": "um and you can use these systems to be extremely resilient as well I mean",
    "start": "520979",
    "end": "527160"
  },
  {
    "text": "there's resiliency built in so that you can recover from exceptions now we have a lot of them",
    "start": "527160",
    "end": "534240"
  },
  {
    "text": "um but I want to tell you a little bit more about how we got to the point of these two Frameworks coming to be right",
    "start": "534240",
    "end": "541500"
  },
  {
    "text": "now a lot of the initial research comes from the 1970s and it was all",
    "start": "541500",
    "end": "546779"
  },
  {
    "text": "theoretical they did not have the hardware to do a lot of the stuff that they were thinking about but Carl Hewitt he was basically",
    "start": "546779",
    "end": "554540"
  },
  {
    "text": "reasoning about how he could structure code for artificial Intel intelligence",
    "start": "554540",
    "end": "560580"
  },
  {
    "text": "in sort of neural network they didn't use the term but it was something like that",
    "start": "560580",
    "end": "565740"
  },
  {
    "text": "and that's what was actors are all based on this happened in 1973 this is not new it has been around for a long time",
    "start": "565740",
    "end": "573180"
  },
  {
    "text": "and what he was reasoning about is how can we use many independent processors to process bigger workloads and those",
    "start": "573180",
    "end": "581160"
  },
  {
    "text": "models got refined by a whole bunch of computer scientists and mathematicians over the following decades until in the",
    "start": "581160",
    "end": "588420"
  },
  {
    "text": "80s Ericsson came up with a language called erlang",
    "start": "588420",
    "end": "594000"
  },
  {
    "text": "um they in Erickson research like people my age may remember it's the same time we had Ericsson smartphones around",
    "start": "594000",
    "end": "600600"
  },
  {
    "text": "celebrity that much time right um not smartphones dumb phones um but they designed the language to be",
    "start": "600600",
    "end": "609480"
  },
  {
    "text": "extremely fault tolerant because when they were designing these Telco systems uptime was the way that they made money",
    "start": "609480",
    "end": "616980"
  },
  {
    "text": "every minute that you're down you cannot charge customers for phone calls so they were doing this research",
    "start": "616980",
    "end": "624120"
  },
  {
    "text": "um Joe Armstrong was one of the people who worked on that a lot and they wanted to be able to have multiple Telco",
    "start": "624120",
    "end": "630120"
  },
  {
    "text": "systems work together to be very very resilient and that got applied in the",
    "start": "630120",
    "end": "636180"
  },
  {
    "text": "1990s to build the axd 301 it has been their Flagship Telco system for more",
    "start": "636180",
    "end": "643980"
  },
  {
    "text": "than a decade it's a total of two million lines of code about half of which is erlang there's also some CNC",
    "start": "643980",
    "end": "651300"
  },
  {
    "text": "Plus in there um they manage with these systems to get nine nines of uptime",
    "start": "651300",
    "end": "658140"
  },
  {
    "text": "if you want to put that into perspective that is 31 milliseconds of downtime per",
    "start": "658140",
    "end": "663300"
  },
  {
    "text": "year right I cannot get that with anything I ever wrote Never",
    "start": "663300",
    "end": "668880"
  },
  {
    "text": "but just to show that there is really a lot of benefit in the resiliency of these systems",
    "start": "668880",
    "end": "674880"
  },
  {
    "text": "and then it was a little bit quiet like a lot of the mainstream software development was happening in",
    "start": "674880",
    "end": "680000"
  },
  {
    "text": "object-oriented languages and and procedural languages and these actual models they live their own life on the",
    "start": "680000",
    "end": "686880"
  },
  {
    "text": "side but then because of this explosion of of the internet that I was telling you about like the need picked up because we",
    "start": "686880",
    "end": "694740"
  },
  {
    "text": "need to be able to process stuff stuff in parallel and that is what these Frameworks are really good at",
    "start": "694740",
    "end": "700579"
  },
  {
    "text": "so in the Microsoft extreme Computing group people were researching how they",
    "start": "700579",
    "end": "706440"
  },
  {
    "text": "could leverage their data centers now known as Azure and their big data",
    "start": "706440",
    "end": "712140"
  },
  {
    "text": "centers that they have for office and for exchange online and for Xbox live",
    "start": "712140",
    "end": "717380"
  },
  {
    "text": "and how they could leverage that and all those commodity servers to to process",
    "start": "717380",
    "end": "722940"
  },
  {
    "text": "big workloads and when the time came to actually release Halo 4 this is what",
    "start": "722940",
    "end": "729660"
  },
  {
    "text": "they used and the approach that are lean Stakes to an actor model is a bit opinionated and",
    "start": "729660",
    "end": "735779"
  },
  {
    "text": "they abstract some stuff around away from it but what you will see is that they take",
    "start": "735779",
    "end": "744720"
  },
  {
    "text": "some they take some steps to make it easier for the developer but what they did works really well especially if you",
    "start": "744720",
    "end": "750480"
  },
  {
    "text": "pair it with clouds more specifically azure because they wanted to build something that's extremely high",
    "start": "750480",
    "end": "756660"
  },
  {
    "text": "available and with almost linear scaling and for Halo 4 that was really important",
    "start": "756660",
    "end": "761760"
  },
  {
    "text": "because they usually release games around the holidays um and then a lot of people are going to",
    "start": "761760",
    "end": "768060"
  },
  {
    "text": "be playing over the Christmas holiday but your staff is going to be on holiday as well so if you have problems I mean",
    "start": "768060",
    "end": "773880"
  },
  {
    "text": "that's not going to solve itself um so they use this to be able to scale",
    "start": "773880",
    "end": "779519"
  },
  {
    "text": "it out almost linearly and Halo 4 was a success so it all worked",
    "start": "779519",
    "end": "784860"
  },
  {
    "text": "around the same time um two people started porting um akka which is a framework built by",
    "start": "784860",
    "end": "791760"
  },
  {
    "text": "light bend on the jvm and they started porting that to.net because they had a need for an actor",
    "start": "791760",
    "end": "798540"
  },
  {
    "text": "system that works on.net and they learn about each other's efforts",
    "start": "798540",
    "end": "804120"
  },
  {
    "text": "um Aaron and Roger they learn about each other Aaron started a company called pedabridge and",
    "start": "804120",
    "end": "810600"
  },
  {
    "text": "this has been growing ever since I mean they increased performance every time that they do a new release",
    "start": "810600",
    "end": "817560"
  },
  {
    "text": "um it's definitely production stable um and it is very very performant",
    "start": "817560",
    "end": "824160"
  },
  {
    "text": "now they got permission from light Bend to call it aka.net because the AKA name comes from the jvm",
    "start": "824160",
    "end": "831480"
  },
  {
    "text": "um and they are some of the.net actor systems there's there's others out there",
    "start": "831480",
    "end": "837839"
  },
  {
    "text": "um but they are two of the more popular ones now before we dive into the differences",
    "start": "837839",
    "end": "844980"
  },
  {
    "text": "I would like to say that um a lot of the things that these Frameworks do under the hood are",
    "start": "844980",
    "end": "852660"
  },
  {
    "text": "basically very very very similar there is a lot more that is similar between",
    "start": "852660",
    "end": "857820"
  },
  {
    "text": "these two Frameworks than what actually separates them right now the whole idea is that an actor or a",
    "start": "857820",
    "end": "866399"
  },
  {
    "text": "grain they have different names for that or leans calls it a grain and aka.net",
    "start": "866399",
    "end": "872639"
  },
  {
    "text": "calls as an actor the reason they call it the grain is they speak about a",
    "start": "872639",
    "end": "878160"
  },
  {
    "text": "virtual actor model or a virtual actor system so they used some different names but",
    "start": "878160",
    "end": "885120"
  },
  {
    "text": "it's basically the same thing what you will have is you will have an object instance",
    "start": "885120",
    "end": "890600"
  },
  {
    "text": "um that has its own behavior and",
    "start": "891060",
    "end": "896339"
  },
  {
    "text": "all of the state is going to be internal to this object so you're gonna have private fields",
    "start": "896339",
    "end": "903920"
  },
  {
    "text": "in your object that are actually um portraying all the states that are",
    "start": "903920",
    "end": "909180"
  },
  {
    "text": "supposed to be in this actor and everything that modifies that state or all the stuff that needs to respond to",
    "start": "909180",
    "end": "914940"
  },
  {
    "text": "things that are going to happen to this actor that is just code functions as you're used to writing them",
    "start": "914940",
    "end": "921839"
  },
  {
    "text": "and the input is where it gets really interesting the only way you can actually talk to an actor is by sending",
    "start": "921839",
    "end": "928019"
  },
  {
    "text": "it a message and those messages get processed one by one in order",
    "start": "928019",
    "end": "934440"
  },
  {
    "text": "and this is important because because they are executed one by one in order you know that there is always only a",
    "start": "934440",
    "end": "941760"
  },
  {
    "text": "single thread that is going to be running on your actor at any given time and that makes the whole parallelizable",
    "start": "941760",
    "end": "948720"
  },
  {
    "text": "part really easy to reason about because you don't have to worry about locking when you're processing a message inside",
    "start": "948720",
    "end": "954779"
  },
  {
    "text": "an actor this guaranteed single threat dreadingness is what is going to enable our almost linear scaling",
    "start": "954779",
    "end": "963120"
  },
  {
    "text": "now these messages um what you will see is these are pretty",
    "start": "963120",
    "end": "968699"
  },
  {
    "text": "simple CLR objects and but they do get passed around a network from time to",
    "start": "968699",
    "end": "973920"
  },
  {
    "text": "time so they get serialized and deserialized um as these systems operate",
    "start": "973920",
    "end": "981240"
  },
  {
    "text": "um AKA and Orleans have slightly different approaches to that or Lanes more often than AKA serializes MDC",
    "start": "981240",
    "end": "988680"
  },
  {
    "text": "realizes messages um but this this is something you have to",
    "start": "988680",
    "end": "994740"
  },
  {
    "text": "keep in mind so you might as well design them for immutability it's going to make your life so much easier",
    "start": "994740",
    "end": "1001279"
  },
  {
    "text": "and then the big thing that ties all of this together as I said I like smart people thinking about this stuff for me",
    "start": "1001279",
    "end": "1008000"
  },
  {
    "text": "so that I don't have to um and the thing that ties it all together is the actor system or The Silo",
    "start": "1008000",
    "end": "1013940"
  },
  {
    "text": "right Orleans calls it a silo academic calls it an actor system but they",
    "start": "1013940",
    "end": "1019399"
  },
  {
    "text": "basically do the same thing is the orchestrator that ties it all together",
    "start": "1019399",
    "end": "1025699"
  },
  {
    "text": "and the first thing that it does is it manages the life cycles of your actors you are never",
    "start": "1025699",
    "end": "1032260"
  },
  {
    "text": "instantiating an actor yourself you tell the actor system to do it for you and",
    "start": "1032260",
    "end": "1037520"
  },
  {
    "text": "they spin it up and they can take it down they can rehydrate it when you need",
    "start": "1037520",
    "end": "1042860"
  },
  {
    "text": "it again stuff like this and this is managed by the silo or the actor system",
    "start": "1042860",
    "end": "1048980"
  },
  {
    "text": "also it takes care of all the messaging and the addressing if you send a message to a certain address the actor system",
    "start": "1048980",
    "end": "1055460"
  },
  {
    "text": "will make sure that it arrives in the inbox of the particular actor and it",
    "start": "1055460",
    "end": "1061640"
  },
  {
    "text": "does then from those inboxes do all the thread scheduling for us and the thread scheduling is the stuff that I told you",
    "start": "1061640",
    "end": "1067640"
  },
  {
    "text": "earlier that I don't like doing it's the hard part and they do that for us in this system",
    "start": "1067640",
    "end": "1073700"
  },
  {
    "text": "there's also a way to set timers in both actor systems it it works a little bit",
    "start": "1073700",
    "end": "1079400"
  },
  {
    "text": "differently in each but you can send timed messages to actors and so if you will have to build your own scheduler or",
    "start": "1079400",
    "end": "1086840"
  },
  {
    "text": "whatever like you could easily do it with actors as well and there's also a published subscribe",
    "start": "1086840",
    "end": "1092419"
  },
  {
    "text": "event bus in inside the actor system now this is what ties it all together",
    "start": "1092419",
    "end": "1097820"
  },
  {
    "text": "but now we're talking about one node in our cluster all these actor systems are",
    "start": "1097820",
    "end": "1103580"
  },
  {
    "text": "going to work together in a cluster and this is where the scaling really",
    "start": "1103580",
    "end": "1109520"
  },
  {
    "text": "happens um if we let them work together we are able to Shard our actor across",
    "start": "1109520",
    "end": "1116480"
  },
  {
    "text": "all the nodes and if we can Shard our actors actors across a bigger cluster that allows us",
    "start": "1116480",
    "end": "1122960"
  },
  {
    "text": "to add more nodes and that way we can enable that scaling",
    "start": "1122960",
    "end": "1128200"
  },
  {
    "text": "and when a note drops from the cluster you can recreate the actors on another",
    "start": "1128200",
    "end": "1133280"
  },
  {
    "text": "node so that it can take over um all of that can happen seamlessly and",
    "start": "1133280",
    "end": "1139340"
  },
  {
    "text": "so you're also adding resilience to your cluster in this way",
    "start": "1139340",
    "end": "1144460"
  },
  {
    "text": "um this near linear scale out it's actually pretty amazing if you see the scaling",
    "start": "1144679",
    "end": "1150260"
  },
  {
    "text": "graphs um of what they did with Halo like adding 500 servers in classical",
    "start": "1150260",
    "end": "1156559"
  },
  {
    "text": "scenarios you're actually running into limits with things like load balancers and so on but with that they could",
    "start": "1156559",
    "end": "1162980"
  },
  {
    "text": "nearly linearly add nodes to their Halo cluster and that works extremely well",
    "start": "1162980",
    "end": "1169580"
  },
  {
    "text": "so now we're going to do the thing that separates them what is different in",
    "start": "1169580",
    "end": "1174799"
  },
  {
    "text": "these two Frameworks and I want to say I'm opinionated",
    "start": "1174799",
    "end": "1181400"
  },
  {
    "text": "so I'm gonna let you guys be the judge of this right what I'm gonna do is I'm gonna try and explain a difference",
    "start": "1181400",
    "end": "1188539"
  },
  {
    "text": "between the two Frameworks and then you guys will be able to this",
    "start": "1188539",
    "end": "1194059"
  },
  {
    "text": "QR code will return on every voting slide as well you can vote which framework you liked better",
    "start": "1194059",
    "end": "1200419"
  },
  {
    "text": "right um so the first thing that we need to look",
    "start": "1200419",
    "end": "1206600"
  },
  {
    "text": "at is like what what kind of API do we need to develop our actors when we're",
    "start": "1206600",
    "end": "1212780"
  },
  {
    "text": "doing our active development um in our day-to-day job and what we will see",
    "start": "1212780",
    "end": "1220460"
  },
  {
    "text": "um when we start in aka.net creating an actor what we do is we",
    "start": "1220460",
    "end": "1225980"
  },
  {
    "text": "inherit from the receive actor or any of the other actor based classes that there",
    "start": "1225980",
    "end": "1231020"
  },
  {
    "text": "are and that's basically enables us to spin",
    "start": "1231020",
    "end": "1237679"
  },
  {
    "text": "this up as an actor in our actor system and when we there is a possibility to",
    "start": "1237679",
    "end": "1243740"
  },
  {
    "text": "pass Constructor parameters through a system called props we will see that in a couple of uh slides and we can pass",
    "start": "1243740",
    "end": "1251539"
  },
  {
    "text": "parameter Constructors parameter arguments",
    "start": "1251539",
    "end": "1256880"
  },
  {
    "text": "we can add Constructor parameters to this to this actor the way that you're used to",
    "start": "1256880",
    "end": "1262100"
  },
  {
    "text": "and if we want to handle specific messages we need to have some kind of Handler for it and as you can see if I",
    "start": "1262100",
    "end": "1268820"
  },
  {
    "text": "want to respond to the complete round message I'm just going to call the handle uh handle complete round method",
    "start": "1268820",
    "end": "1276080"
  },
  {
    "text": "below right which is um easy to notice we can use",
    "start": "1276080",
    "end": "1282100"
  },
  {
    "text": "any.net class or struct as a message as long as it's serializable and",
    "start": "1282100",
    "end": "1287600"
  },
  {
    "text": "deserializable you don't need to add any attributes to it that takes care of all of that by itself",
    "start": "1287600",
    "end": "1294980"
  },
  {
    "text": "so that works really well um it's um",
    "start": "1294980",
    "end": "1300919"
  },
  {
    "text": "if you write your code in that Handler method the thing is this is a synchronous by default",
    "start": "1300919",
    "end": "1306500"
  },
  {
    "text": "so what this does on the aqua.net actor is it takes in the message it comes from the inbox but it's not giving any",
    "start": "1306500",
    "end": "1313820"
  },
  {
    "text": "response the thread on the sender has already exited",
    "start": "1313820",
    "end": "1319640"
  },
  {
    "text": "and if we want to send something back we can use properties like sender.tel and that goes to the inbox of the send",
    "start": "1319640",
    "end": "1325760"
  },
  {
    "text": "director right and that's how you can actually respond to a message now there's a lot more to it than that but I",
    "start": "1325760",
    "end": "1332240"
  },
  {
    "text": "think this is the basics like we inherit from that receive actor we register some handlers and we can respond to messages",
    "start": "1332240",
    "end": "1339340"
  },
  {
    "text": "send something back if we want now in Orleans there it works a little",
    "start": "1339340",
    "end": "1345260"
  },
  {
    "text": "bit differently and we start by creating an interface that has to",
    "start": "1345260",
    "end": "1351039"
  },
  {
    "text": "implement or inherit from one of the base interfaces that are in The Orleans",
    "start": "1351039",
    "end": "1357200"
  },
  {
    "text": "packages so this is one with um accuwit as its key",
    "start": "1357200",
    "end": "1363380"
  },
  {
    "text": "and then what we will do is we will basically make a synchronous methods as",
    "start": "1363380",
    "end": "1369320"
  },
  {
    "text": "members of our interface we can Define our own in the way that we want to write them",
    "start": "1369320",
    "end": "1375280"
  },
  {
    "text": "and I specifically named these parameters content and not message",
    "start": "1375280",
    "end": "1380419"
  },
  {
    "text": "because Orleans will wrap the parameters that you put in this function you could",
    "start": "1380419",
    "end": "1386059"
  },
  {
    "text": "have seven parameters and it will wrap all of that into a message for you okay so these are not the actual messages",
    "start": "1386059",
    "end": "1392840"
  },
  {
    "text": "they are the parameters to end and the return types of your methods and and",
    "start": "1392840",
    "end": "1398480"
  },
  {
    "text": "Orleans will wrap that for you now after you've made that interface",
    "start": "1398480",
    "end": "1404179"
  },
  {
    "text": "you're going to inherit from one of the grain based glasses and Implement your",
    "start": "1404179",
    "end": "1410539"
  },
  {
    "text": "interface and that is basically all you need to do I'm sure you've written a",
    "start": "1410539",
    "end": "1416240"
  },
  {
    "text": "sync code before if you if you've done anything with.net and so you can do",
    "start": "1416240",
    "end": "1421820"
  },
  {
    "text": "whatever you want to do now Orleans uses more specific serializers so if you want",
    "start": "1421820",
    "end": "1428120"
  },
  {
    "text": "to use anything that is not one of the net based data types",
    "start": "1428120",
    "end": "1433820"
  },
  {
    "text": "you're going to need to add this generate serializer attribute to it for it to work with the Orleans message",
    "start": "1433820",
    "end": "1441020"
  },
  {
    "text": "serializers it's not a big deal but it's something you have to think about",
    "start": "1441020",
    "end": "1446360"
  },
  {
    "text": "and your code goes there but the cool thing here is um in Orleans as opposed to akka the",
    "start": "1446360",
    "end": "1454400"
  },
  {
    "text": "caller will actually have a thread waiting and it's going to wait for the response to come back",
    "start": "1454400",
    "end": "1461179"
  },
  {
    "text": "so you can use a normal method return to answer the caller of your message",
    "start": "1461179",
    "end": "1469100"
  },
  {
    "text": "so if you use an empty task that's going to do nothing but you could send data",
    "start": "1469100",
    "end": "1474440"
  },
  {
    "text": "back in the way that you're used to in other net programs right",
    "start": "1474440",
    "end": "1481700"
  },
  {
    "text": "so we have to figure out it's your time to vote what coding style that you like better",
    "start": "1481700",
    "end": "1488179"
  },
  {
    "text": "the academic one where the messages are really explicit where you can register",
    "start": "1488179",
    "end": "1493220"
  },
  {
    "text": "handlers where the tell is one way and the responses are on another thread and",
    "start": "1493220",
    "end": "1499820"
  },
  {
    "text": "another inbox or did you like The Orleans one better that is a lot closer",
    "start": "1499820",
    "end": "1504980"
  },
  {
    "text": "to the normal C sharp that we're riding in oo systems um where we can actually just have",
    "start": "1504980",
    "end": "1513159"
  },
  {
    "text": "task-based methods to return okay you like echo.net better good I'm going to",
    "start": "1513159",
    "end": "1519380"
  },
  {
    "text": "put it down as one point for AKA um",
    "start": "1519380",
    "end": "1524539"
  },
  {
    "text": "cool second round in our fight um",
    "start": "1524539",
    "end": "1531039"
  },
  {
    "text": "once we've coded our actors we're going to need to spin them up inside a silo",
    "start": "1531620",
    "end": "1536960"
  },
  {
    "text": "inside an actor system and the way that that works and I'm going to start with Orleans now",
    "start": "1536960",
    "end": "1544640"
  },
  {
    "text": "um the way that that works from the outside is we get something called a grain Factory when you instantiate an",
    "start": "1544640",
    "end": "1551240"
  },
  {
    "text": "Orleans client you have an injectable grade Factory that you can use in your asp.net controllers or wherever you want",
    "start": "1551240",
    "end": "1557600"
  },
  {
    "text": "to use it and that grain Factory allows you to call this getgrain method",
    "start": "1557600",
    "end": "1563179"
  },
  {
    "text": "and the Gap grain methods with the interface of our actor that will actually tell the actor system to tell",
    "start": "1563179",
    "end": "1569600"
  },
  {
    "text": "the cluster to spin up one of these actors and with Orleans we have to give",
    "start": "1569600",
    "end": "1575779"
  },
  {
    "text": "it an ID because the ID of any actor like echo.net actors don't have to have an ID",
    "start": "1575779",
    "end": "1582320"
  },
  {
    "text": "you can do whatever you want um but this needs it because that's going to determine the sharding in the",
    "start": "1582320",
    "end": "1589039"
  },
  {
    "text": "cluster right and it's also going to make sure that when the actor gets recreated it fetches the right data",
    "start": "1589039",
    "end": "1596360"
  },
  {
    "text": "and what we're going to get back week after that we get a grain back and we can call the async methods on",
    "start": "1596360",
    "end": "1606200"
  },
  {
    "text": "on that grain that we get back but we never hold the reference to the actual grain",
    "start": "1606200",
    "end": "1611840"
  },
  {
    "text": "what you're getting back from this grain Factory is a proxy that is allowed that is able to talk to the actual grain",
    "start": "1611840",
    "end": "1618919"
  },
  {
    "text": "somewhere around the cluster right that's the way that works and when we hit that Sync here that's basically the",
    "start": "1618919",
    "end": "1626779"
  },
  {
    "text": "threat not pausing in the async on your method on your actor no it's actually your local threat pausing while the",
    "start": "1626779",
    "end": "1634880"
  },
  {
    "text": "network round trip to your um to your grain is happening and you getting a response back right so that's",
    "start": "1634880",
    "end": "1642740"
  },
  {
    "text": "why these methods need to be task based so that this can all work and the way that we want it to work",
    "start": "1642740",
    "end": "1649960"
  },
  {
    "text": "and the return types that we're actually getting from those methods is actually the stuff that we're gonna get back",
    "start": "1649960",
    "end": "1657440"
  },
  {
    "text": "um when we execute this on the client side right very straightforward not hard to do",
    "start": "1657440",
    "end": "1663980"
  },
  {
    "text": "that it looks a little bit differently when we are creating",
    "start": "1663980",
    "end": "1669080"
  },
  {
    "text": "um actors we're going to need to tell the actor system um how it needs to be instantiated which",
    "start": "1669080",
    "end": "1675679"
  },
  {
    "text": "Constructor parameters we need to pass and we do it with something called props and the best way to explain props is",
    "start": "1675679",
    "end": "1682340"
  },
  {
    "text": "saying it's a Constructor pointer so it tells us which Constructor to use",
    "start": "1682340",
    "end": "1688100"
  },
  {
    "text": "with which parameters on a certain class to spin up an actor so we first create those props",
    "start": "1688100",
    "end": "1696140"
  },
  {
    "text": "um with the props that create and Factory method and what we can then do these this is just a params array of",
    "start": "1696140",
    "end": "1703900"
  },
  {
    "text": "objects so you can pass whatever Constructor parameters you need",
    "start": "1703900",
    "end": "1708980"
  },
  {
    "text": "and then you're gonna tell the actor system to create that actor for you and same here we're not getting back a",
    "start": "1708980",
    "end": "1716000"
  },
  {
    "text": "reference to the actual actor we're getting back an i actor ref and I actorf is a really powerful thing",
    "start": "1716000",
    "end": "1722720"
  },
  {
    "text": "it's an object it's the same the same way it works the same way as the one in the grains the proxy and this is",
    "start": "1722720",
    "end": "1729980"
  },
  {
    "text": "serializer serializable and you can pass it around your network and it'll keep working which is extremely powerful in a",
    "start": "1729980",
    "end": "1737720"
  },
  {
    "text": "lot of things that you do and now we are doing it asynchronously",
    "start": "1737720",
    "end": "1742880"
  },
  {
    "text": "um so we have a tell and tell is just sending a message to the inbox of that actor there is a synchronous method you",
    "start": "1742880",
    "end": "1750260"
  },
  {
    "text": "could also do the um fire and forget thing with Orleans",
    "start": "1750260",
    "end": "1755779"
  },
  {
    "text": "actors and here we have something similar as the Orleans way is doing an ask",
    "start": "1755779",
    "end": "1761360"
  },
  {
    "text": "and basically all that does is it's sending a message to the Inbox and waiting for a particular message to come",
    "start": "1761360",
    "end": "1768020"
  },
  {
    "text": "back so the coding on the actor side Remains the Same as you've seen in the previous round but this is like the",
    "start": "1768020",
    "end": "1774260"
  },
  {
    "text": "synchronous way now in the American Army they have asked don't tell",
    "start": "1774260",
    "end": "1779480"
  },
  {
    "text": "when you're doing echo.net you should be thinking about tell don't ask like this is kind of like an empty pattern you",
    "start": "1779480",
    "end": "1785720"
  },
  {
    "text": "don't want to be using this with echo.net unless in certain scenarios you're talking to actors from the",
    "start": "1785720",
    "end": "1791179"
  },
  {
    "text": "outside and you're going to want to wait for a response but inside your actor system this is really like a pattern you",
    "start": "1791179",
    "end": "1796700"
  },
  {
    "text": "should steer away from so that's how that works um",
    "start": "1796700",
    "end": "1801980"
  },
  {
    "text": "so how would you prefer to create your actors we can have a factory with",
    "start": "1801980",
    "end": "1807860"
  },
  {
    "text": "interfaces and proxies and async methods which is really easy to do and furry.net",
    "start": "1807860",
    "end": "1813380"
  },
  {
    "text": "like and on aka.net you're going to need to do props and you're going to have actor",
    "start": "1813380",
    "end": "1819260"
  },
  {
    "text": "refs and you can do tells and you can do asks",
    "start": "1819260",
    "end": "1823960"
  },
  {
    "text": "interesting it means that I until now whichever I put first is the",
    "start": "1824600",
    "end": "1832039"
  },
  {
    "text": "one you preferred we have more rounds I swap them around on purpose to not be",
    "start": "1832039",
    "end": "1837980"
  },
  {
    "text": "biased okay let's see what happens on the next round we're going to start with AKA again",
    "start": "1837980",
    "end": "1844179"
  },
  {
    "text": "um as I said actors need organizing and they need sharding especially if you're",
    "start": "1844580",
    "end": "1849620"
  },
  {
    "text": "using a cluster and there are some subtle differences between the two Frameworks there",
    "start": "1849620",
    "end": "1855740"
  },
  {
    "text": "now if we look at echo.net actors live in a tree in a hierarchy",
    "start": "1855740",
    "end": "1861559"
  },
  {
    "text": "right there's three that we get for free whenever we spin up an actor's system it's the root the user and the system",
    "start": "1861559",
    "end": "1868279"
  },
  {
    "text": "actor and everything that you create like we saw in the previous round if you",
    "start": "1868279",
    "end": "1873799"
  },
  {
    "text": "do actorsystem.actor off what you're creating is a top level actor",
    "start": "1873799",
    "end": "1878899"
  },
  {
    "text": "now these actors they can create children right and so these parents they kind of have children and your um",
    "start": "1878899",
    "end": "1886000"
  },
  {
    "text": "identifier in an actor system is defined by your place in the tree so the one at the bottom right is called",
    "start": "1886000",
    "end": "1892880"
  },
  {
    "text": "slash user slash A2 slash B3 right and that address needs to be unique",
    "start": "1892880",
    "end": "1900260"
  },
  {
    "text": "um so you're gonna have to um if you don't give them names I could will take care of it for you but",
    "start": "1900260",
    "end": "1906740"
  },
  {
    "text": "sometimes you want to address your actors by their address so you're gonna have to make sure that then you generate",
    "start": "1906740",
    "end": "1912740"
  },
  {
    "text": "them in a unique way now when um",
    "start": "1912740",
    "end": "1918080"
  },
  {
    "text": "when we do these these top level actors what you've seen in the previous round",
    "start": "1918080",
    "end": "1923779"
  },
  {
    "text": "is is we make props and then create the actor true that if you create a child it",
    "start": "1923779",
    "end": "1930620"
  },
  {
    "text": "is very similar it's the code in the bottom the only thing is different is that it's different is instead of actor",
    "start": "1930620",
    "end": "1936679"
  },
  {
    "text": "system we're using context and if you use context actor F of what you're doing is creating a child actor",
    "start": "1936679",
    "end": "1943460"
  },
  {
    "text": "for your current actor now when we start clustering these notes",
    "start": "1943460",
    "end": "1949700"
  },
  {
    "text": "together each one of them has their own actors and we can have an a um an A2 B3 in on",
    "start": "1949700",
    "end": "1958520"
  },
  {
    "text": "every node if we so wish because that will not conflict because the full address of an actor is defined by the",
    "start": "1958520",
    "end": "1964940"
  },
  {
    "text": "node and and they're placed in the hierarchy but if we want to start to implement",
    "start": "1964940",
    "end": "1970640"
  },
  {
    "text": "sharding we have full control we can distribute our shards the way that we",
    "start": "1970640",
    "end": "1975740"
  },
  {
    "text": "want to there is an aca.cluster.charting package that provides an abstraction on top of",
    "start": "1975740",
    "end": "1984919"
  },
  {
    "text": "um these these clusters but basically what you do when you implement an",
    "start": "1984919",
    "end": "1990799"
  },
  {
    "text": "academic cluster is you have a bunch of actor systems that are able to talk to each other",
    "start": "1990799",
    "end": "1996380"
  },
  {
    "text": "so as soon as you set up clustering all you do is you create a",
    "start": "1996380",
    "end": "2002080"
  },
  {
    "text": "um a ring of um nodes that are talking to each other but where your actors go you can",
    "start": "2002080",
    "end": "2008860"
  },
  {
    "text": "basically have full control over them there's a whole ways of doing it and if",
    "start": "2008860",
    "end": "2014019"
  },
  {
    "text": "you don't want to go for the sharding package you could build something called routers where you could use a hash that",
    "start": "2014019",
    "end": "2020140"
  },
  {
    "text": "is computed on a certain message to go to a certain node and if you don't have a mechanism that spins up your actor on",
    "start": "2020140",
    "end": "2026559"
  },
  {
    "text": "that note that is your sharding mechanism so you can do a lot you can do a lot of different things",
    "start": "2026559",
    "end": "2031659"
  },
  {
    "text": "also in an academic cluster every node can have a certain role and depending on",
    "start": "2031659",
    "end": "2037480"
  },
  {
    "text": "what actors you're instantiating you can choose to not use or use certain roles",
    "start": "2037480",
    "end": "2042640"
  },
  {
    "text": "in your cluster so you have the full control over that now in Orleans it works a little bit",
    "start": "2042640",
    "end": "2049419"
  },
  {
    "text": "differently and they don't call it an actor system they call it a silo and Grains live in a",
    "start": "2049419",
    "end": "2056740"
  },
  {
    "text": "silo and your identity um for an Orleans grain is your type of",
    "start": "2056740",
    "end": "2063220"
  },
  {
    "text": "grain and then the identifier that you've given right we saw the eye grain with gooit key and if you have the same",
    "start": "2063220",
    "end": "2071679"
  },
  {
    "text": "if you have different Goods like that needs to be unique in your entire cluster",
    "start": "2071679",
    "end": "2076720"
  },
  {
    "text": "that's also going to determine which node a certain grain goes onto",
    "start": "2076720",
    "end": "2082358"
  },
  {
    "text": "and there's no no there's no hierarchy so it's basically like a bunch of marbles in a bag you",
    "start": "2082359",
    "end": "2088658"
  },
  {
    "text": "have a silo and you can drop a lot of cranes into that and the system will",
    "start": "2088659",
    "end": "2093878"
  },
  {
    "text": "distribute them for you so in that cluster unlike the previous",
    "start": "2093879",
    "end": "2099220"
  },
  {
    "text": "one your IDs need to be unique across the entire cluster and the silos they",
    "start": "2099220",
    "end": "2104440"
  },
  {
    "text": "are cluster aware um there's advantages and disadvantages to",
    "start": "2104440",
    "end": "2111339"
  },
  {
    "text": "that the disadvantage is you have no control or very little control which",
    "start": "2111339",
    "end": "2117520"
  },
  {
    "text": "um Silo a grain goes into but because they are virtual actors and you can use this grain Factory",
    "start": "2117520",
    "end": "2123760"
  },
  {
    "text": "everywhere even inside other grains and you don't need to know where the cluster",
    "start": "2123760",
    "end": "2130359"
  },
  {
    "text": "has spun up a certain um grain you can use a grain Factory to",
    "start": "2130359",
    "end": "2136000"
  },
  {
    "text": "get a reference to the actor that might already be living somewhere and that makes Discovery and addressing",
    "start": "2136000",
    "end": "2141579"
  },
  {
    "text": "a lot easier right in aka.net what you'll probably be doing is passing the actor reference around your network",
    "start": "2141579",
    "end": "2148060"
  },
  {
    "text": "because that is able to talk to the actual actor instance whereas here you",
    "start": "2148060",
    "end": "2153520"
  },
  {
    "text": "can use the virtual addressing to make that life a little bit easier right",
    "start": "2153520",
    "end": "2159339"
  },
  {
    "text": "but both of them are still quite similar on the low level and they both Implement",
    "start": "2159339",
    "end": "2164920"
  },
  {
    "text": "some kind of ring communication to do cluster Discovery and to detect which nodes are going down and all of that",
    "start": "2164920",
    "end": "2172240"
  },
  {
    "text": "on the low end like they they function really similar similarly to one another",
    "start": "2172240",
    "end": "2179140"
  },
  {
    "text": "so what structure do you like best do you prefer your actors to be in a",
    "start": "2179140",
    "end": "2186339"
  },
  {
    "text": "tree and where you have full control over everything over the sharding but you have to do everything yourself or do",
    "start": "2186339",
    "end": "2192940"
  },
  {
    "text": "you prefer the um easier flatter structure and where your",
    "start": "2192940",
    "end": "2199180"
  },
  {
    "text": "actors need to be uniquely id'd across your entire okay interesting we have a switch around here okay two points for",
    "start": "2199180",
    "end": "2205780"
  },
  {
    "text": "Lanes and one for I could on that right there's not a lot more than 40",
    "start": "2205780",
    "end": "2211900"
  },
  {
    "text": "people in this room so let's move on now this is arguably",
    "start": "2211900",
    "end": "2218020"
  },
  {
    "text": "um if you look at the differences between these two Frameworks the way that",
    "start": "2218020",
    "end": "2223359"
  },
  {
    "text": "exceptions are handled is probably what ties a lot of the",
    "start": "2223359",
    "end": "2228700"
  },
  {
    "text": "differences together you'll see in a minute what I mean now in Orleans",
    "start": "2228700",
    "end": "2236200"
  },
  {
    "text": "what happens if an exception is thrown inside a grain and",
    "start": "2236200",
    "end": "2242320"
  },
  {
    "text": "as I said like the input and output parameters of those methods",
    "start": "2242320",
    "end": "2248160"
  },
  {
    "text": "they are wrapped in messages for us and Orleans behind the scenes adds a",
    "start": "2248160",
    "end": "2255160"
  },
  {
    "text": "capability to send an exception back to the caller right so if an exception is",
    "start": "2255160",
    "end": "2260500"
  },
  {
    "text": "thrown in the grain that exception gets serialized it's it gets sent in the response message to the calling threads",
    "start": "2260500",
    "end": "2267579"
  },
  {
    "text": "it gets deserialized there and it gets rethrown right so when you have an exception happening",
    "start": "2267579",
    "end": "2274359"
  },
  {
    "text": "in your grain and you're having this task-based method that goes across the network you will actually get that",
    "start": "2274359",
    "end": "2281680"
  },
  {
    "text": "um you will get that reception exception thrown in your calling Tourette",
    "start": "2281680",
    "end": "2287440"
  },
  {
    "text": "the source is going to be different and the call stack is going to be different but like it will it will preserve messages and and exception types and",
    "start": "2287440",
    "end": "2294339"
  },
  {
    "text": "stuff like that right um there's a big advantage to that it's",
    "start": "2294339",
    "end": "2299859"
  },
  {
    "text": "like a very natural way of doing things if you have been a c-sharp developer for a long time there is also a big downside",
    "start": "2299859",
    "end": "2308440"
  },
  {
    "text": "um for this mechanism to function properly you always have to wait for the",
    "start": "2308440",
    "end": "2313480"
  },
  {
    "text": "processing on the grain end to end right because that's when your method will return and then you know that no",
    "start": "2313480",
    "end": "2320020"
  },
  {
    "text": "exceptions happened um which means that if you're doing a long",
    "start": "2320020",
    "end": "2326560"
  },
  {
    "text": "processing talk also your calling thread will pause for a very long time",
    "start": "2326560",
    "end": "2332578"
  },
  {
    "text": "so we can just call that handle grain handle complete round on our grain",
    "start": "2332619",
    "end": "2340359"
  },
  {
    "text": "and we can catch the exception that is coming from the Grain in the calling threat right",
    "start": "2340359",
    "end": "2347020"
  },
  {
    "text": "very easy to reason about all you have to remember is it does get serialized and deserialized so your call stack is",
    "start": "2347020",
    "end": "2352900"
  },
  {
    "text": "going to be different now in akka.net we use a concept called supervision",
    "start": "2352900",
    "end": "2359200"
  },
  {
    "text": "um and supervision any people here with children yeah okay if your children is behave in",
    "start": "2359200",
    "end": "2366640"
  },
  {
    "text": "a supermarket who is responsible yeah right I have three kids and they",
    "start": "2366640",
    "end": "2372880"
  },
  {
    "text": "have my energy so I'm responsible a lot um now what happens is",
    "start": "2372880",
    "end": "2379480"
  },
  {
    "text": "errors in academic get escalated to the parent because we have this asynchronous tell",
    "start": "2379480",
    "end": "2386680"
  },
  {
    "text": "right we're dumping the message in the inbox of the actor and our calling thread is moving on it's not waiting for",
    "start": "2386680",
    "end": "2393820"
  },
  {
    "text": "the actor to finish the processing we cannot escalate exceptions back to the caller not in the way that we usually do",
    "start": "2393820",
    "end": "2401260"
  },
  {
    "text": "right so the method that is being used inside academic is called supervision and it",
    "start": "2401260",
    "end": "2407260"
  },
  {
    "text": "escalates it to its parent actor and the parent will take a decision it can either decide itself or further",
    "start": "2407260",
    "end": "2414460"
  },
  {
    "text": "escalate of the tree that is a technicality it can basically do a couple of things",
    "start": "2414460",
    "end": "2419500"
  },
  {
    "text": "it can say resume it's like your exception your exception wasn't so bad",
    "start": "2419500",
    "end": "2425140"
  },
  {
    "text": "um you can just drop this message and take the next one from your inbox that's basically what resume does",
    "start": "2425140",
    "end": "2431619"
  },
  {
    "text": "stop means it's like okay throw away your inbox and kill off your actor instance this exception is bad it's like",
    "start": "2431619",
    "end": "2438280"
  },
  {
    "text": "you need to stop don't do that to your kids um but this is this is killing off the",
    "start": "2438280",
    "end": "2445660"
  },
  {
    "text": "actor instance and it throws away the inbox with it if you restart you preserve the inbox",
    "start": "2445660",
    "end": "2452740"
  },
  {
    "text": "but you do recycle the actor instance and you will dispatch the same message again to the new instance right so",
    "start": "2452740",
    "end": "2459760"
  },
  {
    "text": "that's the actions you can take you can either reply it to only the failing child or all of your children",
    "start": "2459760",
    "end": "2465640"
  },
  {
    "text": "um which makes sense if you have cut a huge workload into multiple small pieces and the whole thing is invalidated by",
    "start": "2465640",
    "end": "2471640"
  },
  {
    "text": "one exception right now on the parent actor you will need to do something like this you need to",
    "start": "2471640",
    "end": "2477940"
  },
  {
    "text": "override the supervisor strategy method and you need to return a strategy that",
    "start": "2477940",
    "end": "2483160"
  },
  {
    "text": "inspects the exception and makes a decision so you get the exception from your child",
    "start": "2483160",
    "end": "2489280"
  },
  {
    "text": "and your parent can decide what this child actor needs to do right if you get",
    "start": "2489280",
    "end": "2494500"
  },
  {
    "text": "a fatal exception um so one for one is only applying it to",
    "start": "2494500",
    "end": "2499660"
  },
  {
    "text": "the failing child if you get a fatal exception you might want to stop if it transients you might want may want to",
    "start": "2499660",
    "end": "2505599"
  },
  {
    "text": "restart and otherwise I otherwise we're escalating right so what do you prefer best for error",
    "start": "2505599",
    "end": "2512440"
  },
  {
    "text": "handling are we going to send it back to the calling threat or and retro and catch it there",
    "start": "2512440",
    "end": "2519040"
  },
  {
    "text": "or are we going to use a resiliency mechanism with supervision and Community",
    "start": "2519040",
    "end": "2524680"
  },
  {
    "text": "you can communicate back to the sender with a message if you would like but then you have to do that in the",
    "start": "2524680",
    "end": "2530740"
  },
  {
    "text": "parent and it's not going to escalate automatically okay we're on two two",
    "start": "2530740",
    "end": "2537339"
  },
  {
    "text": "and we have 18 minutes left great I think I'm on schedule",
    "start": "2537339",
    "end": "2542859"
  },
  {
    "text": "um this ties it all together like this supervision this is what made Erickson",
    "start": "2542859",
    "end": "2549160"
  },
  {
    "text": "so successful with those Telco systems because you can build self-healing systems anything that fails you can",
    "start": "2549160",
    "end": "2554560"
  },
  {
    "text": "handle inside the actor system build your exponential backups if you want and so on",
    "start": "2554560",
    "end": "2561579"
  },
  {
    "text": "now clients and this is we are starting with akanau Okay",
    "start": "2561579",
    "end": "2569440"
  },
  {
    "text": "um you're gonna have a cluster where your",
    "start": "2569440",
    "end": "2574540"
  },
  {
    "text": "sharded actors that are doing the actual work are living right at some point you're gonna want to talk to those",
    "start": "2574540",
    "end": "2580359"
  },
  {
    "text": "actors from the outside probably sooner than later right",
    "start": "2580359",
    "end": "2586599"
  },
  {
    "text": "um so in aka.net to be able to talk to an actor from the outside if you have the I",
    "start": "2586599",
    "end": "2593140"
  },
  {
    "text": "actor ref that works really well but the only way to get an ixrf from outside an actor system is to actually",
    "start": "2593140",
    "end": "2599440"
  },
  {
    "text": "create it [Music] um to create an actor in the actor system",
    "start": "2599440",
    "end": "2604599"
  },
  {
    "text": "as a top level actor and get a response from that right and then you have an IAC to ref you cannot do that for a node",
    "start": "2604599",
    "end": "2611500"
  },
  {
    "text": "that lives across the network so the way that you usually talk to actors that live in your cluster is to",
    "start": "2611500",
    "end": "2619839"
  },
  {
    "text": "spin up a client actor system if you spin up a client actor system and",
    "start": "2619839",
    "end": "2625359"
  },
  {
    "text": "join it to no don't do that okay and join it to your cluster",
    "start": "2625359",
    "end": "2631660"
  },
  {
    "text": "and it can talk to all of the other actors in the cluster and you can hold the reference to your proxy actor that",
    "start": "2631660",
    "end": "2638140"
  },
  {
    "text": "is living in your client Vector system so if you're talking to a bigger cluster from an asp.net application what you're",
    "start": "2638140",
    "end": "2645040"
  },
  {
    "text": "going to do is spin up a small extra system in that process that is going to be talking to all of your other actors",
    "start": "2645040",
    "end": "2650859"
  },
  {
    "text": "right um and because of location transparency in",
    "start": "2650859",
    "end": "2656319"
  },
  {
    "text": "the iactor refs it means you can pass around the iactor refs that you want and then communicate to the actors directly",
    "start": "2656319",
    "end": "2663339"
  },
  {
    "text": "and if it need be now Orleans is a lot more the way that",
    "start": "2663339",
    "end": "2671619"
  },
  {
    "text": "you're used to if you spin up there's an actual Orleans client library that allows you to talk",
    "start": "2671619",
    "end": "2677380"
  },
  {
    "text": "to a cluster and that client Library gives you an injectable grain Factory without actually spin spinning up an",
    "start": "2677380",
    "end": "2683680"
  },
  {
    "text": "entire actor system and that allows you to make proxies for actors that get instantiated over",
    "start": "2683680",
    "end": "2692020"
  },
  {
    "text": "um the cluster and also your client library is cluster aware so when it",
    "start": "2692020",
    "end": "2697060"
  },
  {
    "text": "talks to the cluster if you do an actor off and no it's not an actor off in Orleans if you do a get grain and it is",
    "start": "2697060",
    "end": "2706660"
  },
  {
    "text": "not already living it will spin it up on the right node according to the sharding",
    "start": "2706660",
    "end": "2711819"
  },
  {
    "text": "mechanism that it's using and those proxies they work the same way that I already showed you so in the startup",
    "start": "2711819",
    "end": "2719319"
  },
  {
    "text": "code of your application you're going to use a host Builder just the same way that you're used to in",
    "start": "2719319",
    "end": "2726579"
  },
  {
    "text": "in like asp.net applications you're going to use the host Builder to build the client and if you have that host you",
    "start": "2726579",
    "end": "2734619"
  },
  {
    "text": "can start it and it will contact the cluster see which nodes there are and you can start using it",
    "start": "2734619",
    "end": "2739900"
  },
  {
    "text": "and then that grains Factory um that is something",
    "start": "2739900",
    "end": "2746260"
  },
  {
    "text": "um the cluster client is actually allowing you to do get green and that will spin",
    "start": "2746260",
    "end": "2751780"
  },
  {
    "text": "up a grain somewhere around the cluster if it's already there it will give you a proxy that is able to talk to it right",
    "start": "2751780",
    "end": "2758560"
  },
  {
    "text": "so they have more of a vision around like what clients should look like and that is more in line with the rest of",
    "start": "2758560",
    "end": "2765700"
  },
  {
    "text": "um.net as a language right so I think I told talked about all of that",
    "start": "2765700",
    "end": "2772780"
  },
  {
    "text": "yeah this service you can inject into your um the eye controller and use that",
    "start": "2772780",
    "end": "2781000"
  },
  {
    "text": "so what did you like best and client actor system that needs to",
    "start": "2781000",
    "end": "2787720"
  },
  {
    "text": "join the cluster where you can spin up your proxy actors and talk to the other nodes in the cluster or a full-fledged",
    "start": "2787720",
    "end": "2797200"
  },
  {
    "text": "client library that is able to work in the same way that a lot of other clients are",
    "start": "2797200",
    "end": "2802540"
  },
  {
    "text": "okay Orleans is one ahead it's tree two",
    "start": "2802540",
    "end": "2807359"
  },
  {
    "text": "and then persistence I've been talking about actors for 45 minutes now and I",
    "start": "2807880",
    "end": "2813819"
  },
  {
    "text": "haven't mentioned how data gets there I mean we can spin up an actor and send it messages on mute date",
    "start": "2813819",
    "end": "2820119"
  },
  {
    "text": "state but at some point like the actor or the process is going to spin down and",
    "start": "2820119",
    "end": "2826000"
  },
  {
    "text": "it might come up after we restart it and the data is going to be lost because",
    "start": "2826000",
    "end": "2831160"
  },
  {
    "text": "it's all Fields inside an object it's going to be gone was in memory so at some points we're going to want to write",
    "start": "2831160",
    "end": "2837339"
  },
  {
    "text": "that to a database right now the",
    "start": "2837339",
    "end": "2842740"
  },
  {
    "text": "way that Orleans does that is by using a",
    "start": "2842740",
    "end": "2847900"
  },
  {
    "text": "state object and you can design your own it just",
    "start": "2847900",
    "end": "2853240"
  },
  {
    "text": "needs to be serializable that's it and you can design your own and put any",
    "start": "2853240",
    "end": "2859060"
  },
  {
    "text": "number of fields or content into it all the relevant state of your of your grain",
    "start": "2859060",
    "end": "2865420"
  },
  {
    "text": "should be in there you can have multiple gray um State objects per crane if you",
    "start": "2865420",
    "end": "2871720"
  },
  {
    "text": "would so please what you need to do is add them with the persist State",
    "start": "2871720",
    "end": "2878200"
  },
  {
    "text": "attribute to your Constructor of your crane and that will tell Orleans to inject the",
    "start": "2878200",
    "end": "2887140"
  },
  {
    "text": "correct State Management object for this grain into the grain and it's an i persistent State and the",
    "start": "2887140",
    "end": "2895359"
  },
  {
    "text": "way that we can write it to an underlying storage technology is by calling the state rights the the rights",
    "start": "2895359",
    "end": "2901960"
  },
  {
    "text": "data sync and this persists the entire object right the way that that works is it",
    "start": "2901960",
    "end": "2908980"
  },
  {
    "text": "persists the entire thing so next time this actor with the same ID remember we",
    "start": "2908980",
    "end": "2915040"
  },
  {
    "text": "were using um something with a good key or with an integer key it's going to use that key",
    "start": "2915040",
    "end": "2920560"
  },
  {
    "text": "to re-query the state store to rehydrate this actor when it spins up again so",
    "start": "2920560",
    "end": "2926319"
  },
  {
    "text": "that your state object is populated when the actor comes back on and especially in your Orleans Orleans takes a lot of",
    "start": "2926319",
    "end": "2933280"
  },
  {
    "text": "decisions about spinning down actors and and bringing them back up up so if that happens it's fully transparent it'll be",
    "start": "2933280",
    "end": "2940599"
  },
  {
    "text": "as if it was alive the whole time right that is the way that that works in or",
    "start": "2940599",
    "end": "2947440"
  },
  {
    "text": "lanes and you can use a number of different persistence mechanisms um you can use Azure blob store or table",
    "start": "2947440",
    "end": "2954339"
  },
  {
    "text": "story or a relational database or document database like there's a whole bunch of plugins that you can use with",
    "start": "2954339",
    "end": "2959859"
  },
  {
    "text": "that very similar to echo.net it also supports a bunch of different storage",
    "start": "2959859",
    "end": "2965260"
  },
  {
    "text": "Technologies it works a little bit differently we start by inheriting from one of the",
    "start": "2965260",
    "end": "2972400"
  },
  {
    "text": "persistent actor bass classes which come in the um persistence package",
    "start": "2972400",
    "end": "2978819"
  },
  {
    "text": "and the way that it works is is more of an event sourced persistence model we now",
    "start": "2978819",
    "end": "2985720"
  },
  {
    "text": "get um it needs a persistence ID as I said academic actors don't need a key",
    "start": "2985720",
    "end": "2991839"
  },
  {
    "text": "but when we need to rehydrate actors when they have been down and they come back up we need an ID to query the data",
    "start": "2991839",
    "end": "2998440"
  },
  {
    "text": "store and in echo.net you do that by implementing the persistence ID property",
    "start": "2998440",
    "end": "3005880"
  },
  {
    "text": "um that needs to be unique across your cluster very important",
    "start": "3005880",
    "end": "3011339"
  },
  {
    "text": "and now we don't have a receive register any registry anymore we have command and",
    "start": "3011339",
    "end": "3017520"
  },
  {
    "text": "recover command is what is coming from the Inbox and recover is what's coming from the",
    "start": "3017520",
    "end": "3023160"
  },
  {
    "text": "persistence mechanism when the actors restart so when we are getting recover messages",
    "start": "3023160",
    "end": "3028380"
  },
  {
    "text": "we don't want to re-persist them because that will be a loop but if you call the",
    "start": "3028380",
    "end": "3033720"
  },
  {
    "text": "persist method with the message that is what is going to going to get written to your data",
    "start": "3033720",
    "end": "3039480"
  },
  {
    "text": "store and the handle method is going to call the calls and that is going to",
    "start": "3039480",
    "end": "3044640"
  },
  {
    "text": "mutate your state in your actor right and when this comes back up",
    "start": "3044640",
    "end": "3050700"
  },
  {
    "text": "um it will actually first see if there's a snapshot and recover the snapshot then it will get all the messages that were",
    "start": "3050700",
    "end": "3057839"
  },
  {
    "text": "that have happened since the snapshot will bring all of those up we'll replay those and then it will start accepting",
    "start": "3057839",
    "end": "3063900"
  },
  {
    "text": "messages from the inbox um so all of that Maps really well if you're doing any kind of event sourced",
    "start": "3063900",
    "end": "3070800"
  },
  {
    "text": "stuff because this is event sourced by Nature right",
    "start": "3070800",
    "end": "3076020"
  },
  {
    "text": "um so these are two different approaches but basically what they both do is make sure that we can recover State when",
    "start": "3076020",
    "end": "3082500"
  },
  {
    "text": "actors come back up after they have been done right so",
    "start": "3082500",
    "end": "3088619"
  },
  {
    "text": "which persistence model do you like",
    "start": "3088619",
    "end": "3092359"
  },
  {
    "text": "oh we have event sourcing fans here",
    "start": "3098220",
    "end": "3102980"
  },
  {
    "text": "it Maps really well if you build like a ddds type system or a secure style",
    "start": "3104280",
    "end": "3109680"
  },
  {
    "text": "system with actors this persistence model is going to help you tremendously",
    "start": "3109680",
    "end": "3116160"
  },
  {
    "text": "um we're at three three so it might all come down to this one",
    "start": "3116160",
    "end": "3122760"
  },
  {
    "text": "um configuration when we bring our processes",
    "start": "3122760",
    "end": "3128880"
  },
  {
    "text": "um we need to tell them how to communicate to other nodes in the cluster and how all of that is going to",
    "start": "3128880",
    "end": "3134700"
  },
  {
    "text": "work and and what we see in accra.net this has come over from the jvm",
    "start": "3134700",
    "end": "3140940"
  },
  {
    "text": "implementation of of akka it's called Hokum human optimized configuration",
    "start": "3140940",
    "end": "3146579"
  },
  {
    "text": "object notation um yeah it's a mouthful um it looks like Jason but it's not it's",
    "start": "3146579",
    "end": "3153059"
  },
  {
    "text": "not chasing compatible um you can have this in files it parses",
    "start": "3153059",
    "end": "3158099"
  },
  {
    "text": "to a structure and you can apply configurations on top of other configurations to come to like a final",
    "start": "3158099",
    "end": "3164460"
  },
  {
    "text": "one um it's very flexible but there's almost no syntax highlighting for it so it's",
    "start": "3164460",
    "end": "3171000"
  },
  {
    "text": "not the most fun to work with but this is the way you configure actor systems you configure your persistence in here",
    "start": "3171000",
    "end": "3177420"
  },
  {
    "text": "you can configure your clustering and your networking stay awake stay awake",
    "start": "3177420",
    "end": "3183660"
  },
  {
    "text": "um and you can do all of that and at the bottom you can see where the seed nodes are that are the nodes that it already",
    "start": "3183660",
    "end": "3190140"
  },
  {
    "text": "knows about when it's joining a cluster stuff like that right now in our lanes we have to input the",
    "start": "3190140",
    "end": "3196800"
  },
  {
    "text": "same kind of information but in a different way and again here you see the host Builder again when we spin up a",
    "start": "3196800",
    "end": "3203280"
  },
  {
    "text": "silo that needs to join a cluster and it needs to have persistence and whatever it works with this host Builder with",
    "start": "3203280",
    "end": "3211920"
  },
  {
    "text": "um all the methods that we can call on that to add storage at persistence for timers",
    "start": "3211920",
    "end": "3218940"
  },
  {
    "text": "all that sort of stuff right um it's different but",
    "start": "3218940",
    "end": "3225420"
  },
  {
    "text": "which did you like",
    "start": "3225420",
    "end": "3228440"
  },
  {
    "text": "yeah I figured that that would go that way um that's okay Orleans is ahead",
    "start": "3232859",
    "end": "3239400"
  },
  {
    "text": "we have one last thing that I want to show you before we wrap things up and that is about performance",
    "start": "3239400",
    "end": "3246540"
  },
  {
    "text": "um I did a little bit of benchmarking I did bench end bench on my laptop",
    "start": "3246540",
    "end": "3254460"
  },
  {
    "text": "um the amount of messages that I could dispatch to actors on academ was 10",
    "start": "3254460",
    "end": "3261960"
  },
  {
    "text": "million a second in Orleans it was 5 000 seconds",
    "start": "3261960",
    "end": "3267960"
  },
  {
    "text": "now you might think that that is a huge difference and and big reason that in my benchmarks",
    "start": "3267960",
    "end": "3274380"
  },
  {
    "text": "this was different is because I could.net was not serializing and deserializing the messages and Orleans",
    "start": "3274380",
    "end": "3280200"
  },
  {
    "text": "was and I left I could have worked around that but it's something that I wanna",
    "start": "3280200",
    "end": "3287099"
  },
  {
    "text": "put in here and so that you realize it's like um this is one of the big performance",
    "start": "3287099",
    "end": "3293339"
  },
  {
    "text": "differences between the two in Orleans your messages will get serialized and deserialized a lot quicker when you talk",
    "start": "3293339",
    "end": "3299940"
  },
  {
    "text": "to other actors whereas in accra.net if you pass it around between actors on the",
    "start": "3299940",
    "end": "3306660"
  },
  {
    "text": "same node um you're actually passing around the object reference which is super fast",
    "start": "3306660",
    "end": "3313140"
  },
  {
    "text": "right and that attributes for a lot of this and if I would have like made it more",
    "start": "3313140",
    "end": "3320160"
  },
  {
    "text": "fair and enforced serialization and deserialization in the aqua.net one I think it would still have been faster",
    "start": "3320160",
    "end": "3325740"
  },
  {
    "text": "but not by this much right also memory usage",
    "start": "3325740",
    "end": "3330900"
  },
  {
    "text": "um if I created a million actors on my laptop and that took 900 megabytes which",
    "start": "3330900",
    "end": "3336420"
  },
  {
    "text": "means that the overhead for a single actor in a release build is about 900 bytes so having a couple of million on a",
    "start": "3336420",
    "end": "3343800"
  },
  {
    "text": "single node is not going to hurt you that much and it took 11 seconds to do in Orleans it took twice as long and it",
    "start": "3343800",
    "end": "3350400"
  },
  {
    "text": "took twice the memory now that may seem bad um but what you get back in Orleans is a",
    "start": "3350400",
    "end": "3359579"
  },
  {
    "text": "lot of sensible defaults that have been decided for you right but you're sacrificing some performance for it and",
    "start": "3359579",
    "end": "3366960"
  },
  {
    "text": "if you want to have like the last bit of performance out of your actors and your",
    "start": "3366960",
    "end": "3372960"
  },
  {
    "text": "actor systems you're gonna have more knobs to turn and more things you can do in academates",
    "start": "3372960",
    "end": "3379920"
  },
  {
    "text": "so I'm not going to let you vote I'm going to give this point to akka",
    "start": "3379920",
    "end": "3384740"
  },
  {
    "text": " I have a problem now um because my conclusion was going to be today's winner but this is a tie",
    "start": "3385319",
    "end": "3392220"
  },
  {
    "text": "so I'm gonna skip I had two slides for for both of them so I'm gonna just skip them",
    "start": "3392220",
    "end": "3398720"
  },
  {
    "text": "and um no I'm not going to skip it I'm first gonna",
    "start": "3398720",
    "end": "3405558"
  },
  {
    "text": "I'm gonna I want your opinion um I've always been opinionated on akka",
    "start": "3406020",
    "end": "3411359"
  },
  {
    "text": "because it's the one that I'm most familiar with um I wanted to take that out of today's talk which is why I let you vote",
    "start": "3411359",
    "end": "3419099"
  },
  {
    "text": "I want your opinion like have I been Fair towards or Lanes or not",
    "start": "3419099",
    "end": "3424140"
  },
  {
    "text": "um did you feel my preference throughout this talk um okay that's good",
    "start": "3424140",
    "end": "3430859"
  },
  {
    "text": "that's great because that's what I wanted to achieve that's why I did the Voting and because I am opinionated",
    "start": "3430859",
    "end": "3436920"
  },
  {
    "text": "but I didn't want my opinion to be your opinion I want to show how these things are different different because I think",
    "start": "3436920",
    "end": "3443400"
  },
  {
    "text": "they're both really great and if if you ask me for my take and which",
    "start": "3443400",
    "end": "3450780"
  },
  {
    "text": "is why I'm giving it completely at the end and with academic you have full control",
    "start": "3450780",
    "end": "3455940"
  },
  {
    "text": "over a lot of things over your sharding your messages your actual life cycles",
    "start": "3455940",
    "end": "3461760"
  },
  {
    "text": "yeah like you can turn all the knobs which means you can squeeze every last bit of performance from this if you want",
    "start": "3461760",
    "end": "3469260"
  },
  {
    "text": "but a lot of the stuff because of that is way more explicit than the code you will see the full message contracts",
    "start": "3469260",
    "end": "3476400"
  },
  {
    "text": "you will have to deal with sending messages back to a sender and all of",
    "start": "3476400",
    "end": "3481680"
  },
  {
    "text": "that because all of it is built for performance but you will get that performance if you",
    "start": "3481680",
    "end": "3488460"
  },
  {
    "text": "go through the learning curve and which is where Orleans comes in it's a",
    "start": "3488460",
    "end": "3495300"
  },
  {
    "text": "very opinionated implementation of the actor model and you have to take my",
    "start": "3495300",
    "end": "3502140"
  },
  {
    "text": "opinion with a grain of salt but I think that this works really well in a lot of",
    "start": "3502140",
    "end": "3507300"
  },
  {
    "text": "cases and the performance numbers that I just showed you it looks really drastic in a",
    "start": "3507300",
    "end": "3513420"
  },
  {
    "text": "real life scenario I don't think it will matter that much",
    "start": "3513420",
    "end": "3518520"
  },
  {
    "text": "so if you want to get up to speed really quickly with doing a distributed distributed system that you can easily",
    "start": "3518520",
    "end": "3525660"
  },
  {
    "text": "scale out even or Lanes is Gonna Get You ways further than API calls between",
    "start": "3525660",
    "end": "3531839"
  },
  {
    "text": "microservices will get you and the abstractions that are leads made",
    "start": "3531839",
    "end": "3537660"
  },
  {
    "text": "are very sensible in a lot of scenarios I felt very little friction when I was",
    "start": "3537660",
    "end": "3543299"
  },
  {
    "text": "working with it was easy to understand it was very easy to get up to speed with and it's a lot closer to the C sharp",
    "start": "3543299",
    "end": "3550200"
  },
  {
    "text": "that you might be used to when you're doing asp.net applications for instance",
    "start": "3550200",
    "end": "3556380"
  },
  {
    "text": "um so don't steer away from Orleans because of the performance numbers or because of my personal preference I",
    "start": "3556380",
    "end": "3561900"
  },
  {
    "text": "think it's a great framework as well um I think both of these have a place to me it feels like Microsoft is going",
    "start": "3561900",
    "end": "3568680"
  },
  {
    "text": "to invest in Orleans a lot in the coming years they're they've been giving it um the time of day again they have been",
    "start": "3568680",
    "end": "3575040"
  },
  {
    "text": "quiet about it for five or six years after they released it in 2015 but now",
    "start": "3575040",
    "end": "3581339"
  },
  {
    "text": "with Net 7 they're actually promoted promoting it as a distributed programming model in.net application so",
    "start": "3581339",
    "end": "3588059"
  },
  {
    "text": "we're going to see a lot of it and I think that's exciting because I think we should do more actor-based development",
    "start": "3588059",
    "end": "3594119"
  },
  {
    "text": "whenever we have stateful High scale stuff that we need to do like stateful concurrent stuff",
    "start": "3594119",
    "end": "3602040"
  },
  {
    "text": "this is a programming model that is going to help you a lot it doesn't matter which one of the two",
    "start": "3602040",
    "end": "3609420"
  },
  {
    "text": "you use they will work fine in a lot of situations",
    "start": "3609420",
    "end": "3614520"
  },
  {
    "text": "I'm Hannis I'm the head of Learning and Development and access in Belgium some of my colleagues are here in the front",
    "start": "3614520",
    "end": "3620220"
  },
  {
    "text": "row that's my Twitter handle and my seq number I've been trying for four years",
    "start": "3620220",
    "end": "3625260"
  },
  {
    "text": "to make icq great again um over four years three people have messaged me on the icq app yes they have",
    "start": "3625260",
    "end": "3633240"
  },
  {
    "text": "an app yes it is being maintained yes it still works and you can activate your old icq numbers",
    "start": "3633240",
    "end": "3639359"
  },
  {
    "text": "and that was my story right on time",
    "start": "3639359",
    "end": "3644579"
  },
  {
    "text": "I'm not sure if we're allowed to take some questions before we get coffee",
    "start": "3644579",
    "end": "3649740"
  },
  {
    "text": "I'll tell you this if you want to walk out and grab coffee like walk out otherwise come up and ask the questions",
    "start": "3649740",
    "end": "3655980"
  },
  {
    "text": "over here while I pack up my laptop thank you",
    "start": "3655980",
    "end": "3663200"
  }
]