[
  {
    "text": "hello everybody my name is norm Johansson I am a senior dev at a TBS",
    "start": "2840",
    "end": "8210"
  },
  {
    "text": "Amazon Web Services where I focus on all of the dotnet tooling for AWS and today",
    "start": "8210",
    "end": "15620"
  },
  {
    "text": "what I want to talk about is what about - I was like what is a service in compute environment we're going to",
    "start": "15620",
    "end": "21770"
  },
  {
    "text": "define what that is and then what is the ATS implementation of that and then we're going to do a similar thing with",
    "start": "21770",
    "end": "27650"
  },
  {
    "text": "containers but now containers is a very large subject so what we're really gonna focusing on is enough of containers so",
    "start": "27650",
    "end": "34040"
  },
  {
    "text": "that we can compare that with a service environment so we can learn how those works and again we're gonna look at what",
    "start": "34040",
    "end": "41089"
  },
  {
    "text": "are the ATIS offerings for container environments my ultimate goal though with this talk is to help give you the",
    "start": "41089",
    "end": "47449"
  },
  {
    "text": "information to figuring out which of these technologies to use in your applications as containers and surplice",
    "start": "47449",
    "end": "54319"
  },
  {
    "text": "has gotten more and more mature there's a lot of gray area when you might want to choose one of these and hopefully",
    "start": "54319",
    "end": "59390"
  },
  {
    "text": "this talk will help you out so when it comes to choosing the tech for your",
    "start": "59390",
    "end": "64790"
  },
  {
    "text": "application there's a lot of reasons most of them fall down to two folks does",
    "start": "64790",
    "end": "70579"
  },
  {
    "text": "the technology solve the requirements of my application and the other Volcom is",
    "start": "70579",
    "end": "76130"
  },
  {
    "text": "is what is the cost of this technology and that can be broken down into what is your operational cost and as well just",
    "start": "76130",
    "end": "84079"
  },
  {
    "text": "as important what is the engineering cost we as engineers are often the most expensive resources in our company so",
    "start": "84079",
    "end": "90110"
  },
  {
    "text": "anything we can do to save our time it reduces the cost of their technology so",
    "start": "90110",
    "end": "98180"
  },
  {
    "text": "for service this is what I think is the three main factors when you're defining what a service environment is is if",
    "start": "98180",
    "end": "106039"
  },
  {
    "text": "sports continuous scaling and meaning is always providing the scaling for the applications needs right now it's not",
    "start": "106039",
    "end": "112789"
  },
  {
    "text": "listening to see how it's going and then deciding when to adding more resources there it's just always providing the",
    "start": "112789",
    "end": "118549"
  },
  {
    "text": "contain compute power needed for that moment meaning scaling up and scaling down now",
    "start": "118549",
    "end": "124759"
  },
  {
    "text": "it's called server list but they're really still our servers running in the background it's there's no magic there but again we don't have to manage any of",
    "start": "124759",
    "end": "132200"
  },
  {
    "text": "those servers we're not having to make sure anything is L patched up and running sure they are still up and running that",
    "start": "132200",
    "end": "137459"
  },
  {
    "text": "is all taken care of for us by the service environment and because we're not managing any servers we're not",
    "start": "137459",
    "end": "142950"
  },
  {
    "text": "paying for the cost of having servers up and running we're paying for just how long it takes to run our code so our",
    "start": "142950",
    "end": "149310"
  },
  {
    "text": "cost factor is just on our code now at",
    "start": "149310",
    "end": "155670"
  },
  {
    "text": "ATS we have a diverse lambda that is the main service for the service environment",
    "start": "155670",
    "end": "160680"
  },
  {
    "text": "it provides the compute power you deploy what's called a lambda function to a degress it is an event based system and",
    "start": "160680",
    "end": "167790"
  },
  {
    "text": "that's how it provides that continuous scaling because it's always providing the scaling base off the events that are",
    "start": "167790",
    "end": "174359"
  },
  {
    "text": "coming into your lambda function and those events can be coming either from http events via servers called Amazon",
    "start": "174359",
    "end": "182129"
  },
  {
    "text": "API gateway which allows you to expose your lambda functions to the web also",
    "start": "182129",
    "end": "188670"
  },
  {
    "text": "many many 80-bit services will also send out events for when state changes for",
    "start": "188670",
    "end": "195420"
  },
  {
    "text": "example when Amazon s3 the object storage system or Amazon Dino to be the management of sequel system when the",
    "start": "195420",
    "end": "202230"
  },
  {
    "text": "state changes in those systems it will send off events and you can configure so it a lambda function is going to respond",
    "start": "202230",
    "end": "208950"
  },
  {
    "text": "to those events so this is how you can sort of build applications just based off the events coming from services",
    "start": "208950",
    "end": "214169"
  },
  {
    "text": "without ever having to manage any servers you can also write custom events as well and then invoke those with",
    "start": "214169",
    "end": "221310"
  },
  {
    "text": "invoke your lambda function with those custom events with any of the ADA base SDKs configuration is very minimal there",
    "start": "221310",
    "end": "229169"
  },
  {
    "text": "are a few more settings here but these are the two most important ones memory which also indirectly decides how much",
    "start": "229169",
    "end": "237419"
  },
  {
    "text": "CPU power your lambda function gets and so the memory is really the the vertical slider or the slider for your vertical",
    "start": "237419",
    "end": "244410"
  },
  {
    "text": "scaling of your application and then the other option is time own because lambda",
    "start": "244410",
    "end": "250109"
  },
  {
    "text": "is not meant for long-running processes you're gonna take an event and process",
    "start": "250109",
    "end": "255209"
  },
  {
    "text": "the event and then that function is done so the max time out in lambda is 5",
    "start": "255209",
    "end": "260280"
  },
  {
    "text": "minutes and this is to help guard you in case you accidentally cause an infinite loop and you lambda function runs",
    "start": "260280",
    "end": "266430"
  },
  {
    "text": "forever because remember you're paying or the how long it takes to run your ex year lambda function for lambda we",
    "start": "266430",
    "end": "274830"
  },
  {
    "text": "support net core which is the one I care the most about from the donor team we also have no Jess Go Python and Java so",
    "start": "274830",
    "end": "285750"
  },
  {
    "text": "I want to kind of describe what happens under the under the covers of lambda this isn't the exact science this just",
    "start": "285750",
    "end": "292590"
  },
  {
    "text": "give your approximation what Lam is actually doing when these events coming through so you can understand the lifecycle so the first thing is we'll",
    "start": "292590",
    "end": "302340"
  },
  {
    "text": "get some event maybe this is a service event or a web event it comes into lambda and lambda says oh I don't have a",
    "start": "302340",
    "end": "308580"
  },
  {
    "text": "compute environment for MS I'm gonna go as that event I'm gonna create a compute environment to handle that event and",
    "start": "308580",
    "end": "314849"
  },
  {
    "text": "it's gonna go process out of it so during that cold start it got and procure the compute environment it",
    "start": "314849",
    "end": "320190"
  },
  {
    "text": "started at the done at run time it started up my code and is actually respond to that event once it's done and",
    "start": "320190",
    "end": "327300"
  },
  {
    "text": "there's no more events coming in right now lambda is just gonna freeze that compute environment now when it freezes",
    "start": "327300",
    "end": "333150"
  },
  {
    "text": "it's freezing that whole net runtime so this means like any of the static you",
    "start": "333150",
    "end": "338340"
  },
  {
    "text": "might set up any global initial ations still exist in that frozen compute",
    "start": "338340",
    "end": "343409"
  },
  {
    "text": "environment so when new events come through it'll actually be able to reuse all that stuff so this is how you can",
    "start": "343409",
    "end": "348900"
  },
  {
    "text": "cache information per request but you need to think of these though it's still a stateless compute environment because",
    "start": "348900",
    "end": "355080"
  },
  {
    "text": "there's no guarantee you're gonna go back to the same compute environment so",
    "start": "355080",
    "end": "360719"
  },
  {
    "text": "we'll get our next event in lamp it will just say okay I already have this frozen one so let's just go I saw that one and",
    "start": "360719",
    "end": "367620"
  },
  {
    "text": "process our event there and that's called that warm stir where it doesn't do all that initialization working is just going to easily just execute that",
    "start": "367620",
    "end": "373770"
  },
  {
    "text": "already on that compute environment and once that's done and there's no more",
    "start": "373770",
    "end": "378779"
  },
  {
    "text": "events it'll go and freeze that again now what happens if we get multiple events here we got two events coming into our lambda function so the lemons",
    "start": "378779",
    "end": "386339"
  },
  {
    "text": "gonna take that in and says well I can just saw out the first compute environment but we have no idea is this",
    "start": "386339",
    "end": "392069"
  },
  {
    "text": "gonna take ten seconds at five minutes we don't know and we don't want any of that to bottle up lambda is all about",
    "start": "392069",
    "end": "398849"
  },
  {
    "text": "horizontal scaling so what it does is it's just going to go and create another compute environment so it's gonna do those boats",
    "start": "398849",
    "end": "405210"
  },
  {
    "text": "in parallel and this is where lambda gets that really good horizontal scaling",
    "start": "405210",
    "end": "410760"
  },
  {
    "text": "where it's just by the events coming in it'll do that continuous scaling based off those and when there's no events",
    "start": "410760",
    "end": "416040"
  },
  {
    "text": "it'll just freeze those content compute environments so once those are gone not",
    "start": "416040",
    "end": "421500"
  },
  {
    "text": "being used they'll be frozen and if there's some amount of inactivity lambda is just going to go reclaim those",
    "start": "421500",
    "end": "426840"
  },
  {
    "text": "compute environments now the important thing to think about everything in that group box that is completely extracted",
    "start": "426840",
    "end": "433950"
  },
  {
    "text": "from you in this service environment everything is managed for you you're just sending events for you and you're paying for how long it takes to run your",
    "start": "433950",
    "end": "440190"
  },
  {
    "text": "code the compute environments are all abstracted away for dotnet core in",
    "start": "440190",
    "end": "448560"
  },
  {
    "text": "lambda right now we support down to core 202 one came out a couple weeks ago and we're quickly working on getting that",
    "start": "448560",
    "end": "454560"
  },
  {
    "text": "one out what you do to create a package bundle is basically you could use the",
    "start": "454560",
    "end": "460560"
  },
  {
    "text": "dotnet published command this is on the CLI and that'll create a folder with your DLL and all your dependency dll's",
    "start": "460560",
    "end": "468020"
  },
  {
    "text": "although I would highly recommend using one of our tools to create this deployment package either our Visual",
    "start": "468020",
    "end": "474120"
  },
  {
    "text": "Studio toolkit or we have a new kit package out there called Amazon lambda tools which is a project extension to",
    "start": "474120",
    "end": "482160"
  },
  {
    "text": "the data and CLI so you can still do that same deployment from the command line the reason I recommend doing it",
    "start": "482160",
    "end": "488280"
  },
  {
    "text": "this way is by default dotnet publish is gonna create you a package bundle that's",
    "start": "488280",
    "end": "493710"
  },
  {
    "text": "portable to any platform so it's going to include all your Mac dependencies your windows dependencies and Linux dependencies when you're deploying to",
    "start": "493710",
    "end": "500370"
  },
  {
    "text": "lambda we know this is a linux dependent Linux environment so we will direct on a publish to make sure let's optimize this",
    "start": "500370",
    "end": "506820"
  },
  {
    "text": "package for that Linux environment which will create a smaller package bundle and the smaller the package bundle can",
    "start": "506820",
    "end": "512729"
  },
  {
    "text": "reduce that cold start time now the",
    "start": "512729",
    "end": "518700"
  },
  {
    "text": "programming model is pretty simple for lambda we didn't really want to design any like large frameworks we really",
    "start": "518700",
    "end": "524130"
  },
  {
    "text": "wanted to just keep this as just write your dotnet code so all we really say is",
    "start": "524130",
    "end": "529170"
  },
  {
    "text": "passed us the function handler string that identifies what method to call and that string identified",
    "start": "529170",
    "end": "535860"
  },
  {
    "text": "assembly and the type and the method and it's saying what's the data method which means it can really be any language that",
    "start": "535860",
    "end": "541290"
  },
  {
    "text": "supports that of course C sharp F sharp VB core all those language are fine the",
    "start": "541290",
    "end": "547560"
  },
  {
    "text": "signature of that method is pretty flexible you can't have a method that",
    "start": "547560",
    "end": "552810"
  },
  {
    "text": "takes no parameters maybe you have a lambda function that you just want to call and it with no input it's just like",
    "start": "552810",
    "end": "558240"
  },
  {
    "text": "once a day to go clean up some data so you could have a lemon function that's no parameters there you might take an",
    "start": "558240",
    "end": "564510"
  },
  {
    "text": "you probably will also take one parameter which is the event coming in and in this case it's the s3 event and",
    "start": "564510",
    "end": "570290"
  },
  {
    "text": "optionally you could take in an isle and a context object that context object provides information with a running the",
    "start": "570290",
    "end": "577769"
  },
  {
    "text": "lambda runtime as well as some API is to do some logging methods can also be",
    "start": "577769",
    "end": "583610"
  },
  {
    "text": "asynchronous so in that case you would just return back a task and lambda is essentially gonna wait for when that task is says it's complete to know when",
    "start": "583610",
    "end": "590970"
  },
  {
    "text": "your lambda function is done one of the",
    "start": "590970",
    "end": "596640"
  },
  {
    "text": "interesting things that we've also been working on is the ability to run a service a phonetic or website",
    "start": "596640",
    "end": "602459"
  },
  {
    "text": "we do this by we have a nougat package out there called Amazon lambda a spinner course server which essentially bridges",
    "start": "602459",
    "end": "610050"
  },
  {
    "text": "the gap between Amazon API gateway which is your your rest front end with the ACE",
    "start": "610050",
    "end": "615779"
  },
  {
    "text": "minute core framework so at Marshall's the request is back and forth and so",
    "start": "615779",
    "end": "621029"
  },
  {
    "text": "some of the pros of doing this is least met core is a very powerful framework it's constantly getting new improvement",
    "start": "621029",
    "end": "627529"
  },
  {
    "text": "most of you probably know how to use this framework so there's little too new a little new to learn and it's also easy",
    "start": "627529",
    "end": "635010"
  },
  {
    "text": "to migrate existing applications to this some of the cons are this could produce a larger package bundle although with",
    "start": "635010",
    "end": "642329"
  },
  {
    "text": "dotnet core 200 and yep coming to one the ace minute core dependencies are actually already pre-installed on the",
    "start": "642329",
    "end": "649380"
  },
  {
    "text": "lambda target environment so when you run down that publish it won't actually include any a spinet core dependencies",
    "start": "649380",
    "end": "654930"
  },
  {
    "text": "because it knows they're already on there so your packs run will actually usually isn't gonna be too much bigger",
    "start": "654930",
    "end": "660240"
  },
  {
    "text": "the other economies cost to initialize the a spinet core framework and this is",
    "start": "660240",
    "end": "665880"
  },
  {
    "text": "going to happen every time one of those compute environments is that first time it's created will initialize that framework so this is",
    "start": "665880",
    "end": "673350"
  },
  {
    "text": "where you have to be strategic and how much work you want to actually do in that startup CS class so if you have a",
    "start": "673350",
    "end": "678870"
  },
  {
    "text": "very large monolithic application that has a lot of things going on and I start up this might not be an appropriate use",
    "start": "678870",
    "end": "684360"
  },
  {
    "text": "case if it's a pretty lightweight application with only a few things going on there this can be an easy way to just transition you're a smoker applications",
    "start": "684360",
    "end": "691440"
  },
  {
    "text": "to be a service platform are we so we've",
    "start": "691440",
    "end": "697019"
  },
  {
    "text": "talked about of slides let's we just did some a spinet core talk let's see what it would take to actually do that so if",
    "start": "697019",
    "end": "703680"
  },
  {
    "text": "I'm individual studio this window over here is our eight abyss Explorer from the Avis took it for the studio and",
    "start": "703680",
    "end": "710190"
  },
  {
    "text": "which you can download from the visual studio marketplace and we can create neulander projects by going file new project and under c-sharp we have some",
    "start": "710190",
    "end": "720509"
  },
  {
    "text": "project templates here again we said we have f-sharp support so if we go under a sort of languages we have a blender",
    "start": "720509",
    "end": "729209"
  },
  {
    "text": "under F sharp as well so same project templates so that project is really break down into two different styles",
    "start": "729209",
    "end": "735449"
  },
  {
    "text": "there is the lambda project this is where you want to write a single lambda function deploy it to the lambda service",
    "start": "735449",
    "end": "742290"
  },
  {
    "text": "and then you will manage connecting it up to whatever is your event source the other option is you want to deploy it as",
    "start": "742290",
    "end": "748620"
  },
  {
    "text": "a service application which means you might want to write in number of lambda functions and deploy them all together",
    "start": "748620",
    "end": "755189"
  },
  {
    "text": "as one unit along with other ATIS resources and you do that with what's",
    "start": "755189",
    "end": "760319"
  },
  {
    "text": "called a CloudFormation template it's a JSON or yam will file that says I want to deploy all these together so because",
    "start": "760319",
    "end": "767160"
  },
  {
    "text": "we need to deploy our lambda function and we want to set up API gateway for a spin of clarification we're gonna choose the service and we have some initial",
    "start": "767160",
    "end": "776759"
  },
  {
    "text": "blueprints to help get started one of them being the a spinner core blueprint",
    "start": "776759",
    "end": "783410"
  },
  {
    "text": "so here's our project and this is just a regular basement attic replication there's not very much different about",
    "start": "784459",
    "end": "790709"
  },
  {
    "text": "this application compared to your your new a spinnaker projects you do from",
    "start": "790709",
    "end": "795810"
  },
  {
    "text": "studio the two main differences is typically at a spinner core project has",
    "start": "795810",
    "end": "801689"
  },
  {
    "text": "that program sea filed to do the bootstrapping that just got renamed to local entry point to identify this is the code when you're",
    "start": "801689",
    "end": "808440"
  },
  {
    "text": "when I'm gonna do f5 and just debug this locally this is what's gonna run for debugging locally then there's the",
    "start": "808440",
    "end": "815790"
  },
  {
    "text": "lambda entry point which is essentially is the replacement of that for when you're running service ly so this is the",
    "start": "815790",
    "end": "821460"
  },
  {
    "text": "code that does the same job as that local entry point what it does is it's extending extending from a class from",
    "start": "821460",
    "end": "828090"
  },
  {
    "text": "that nuga package and that package that base class I mean shrink this down",
    "start": "828090",
    "end": "834510"
  },
  {
    "text": "a little bit has this function handler async so",
    "start": "834510",
    "end": "840090"
  },
  {
    "text": "that's the actual lambda the actual donna method that we want landed a call when our vents come in and that's what's",
    "start": "840090",
    "end": "846360"
  },
  {
    "text": "going to take care of initializing the core framework on the first request and in handling all the marshalling of the",
    "start": "846360",
    "end": "852600"
  },
  {
    "text": "requests back and forth between api a a spirit core the only method we actually",
    "start": "852600",
    "end": "857910"
  },
  {
    "text": "have to override here is the anit method to identify what is the startup class so",
    "start": "857910",
    "end": "863340"
  },
  {
    "text": "this is the only code that I have in this project that is specific to lambda everything else in this project is just",
    "start": "863340",
    "end": "869490"
  },
  {
    "text": "standard a spinet core I'm work so I'm gonna just go and head and deploy this",
    "start": "869490",
    "end": "875460"
  },
  {
    "text": "project and then I'll take a look at the CloudFormation template as it's deploying so you can right-click on the",
    "start": "875460",
    "end": "880770"
  },
  {
    "text": "project and there's published a Debus lambda you also might see there's that published it avis elastic Beanstalk",
    "start": "880770",
    "end": "886880"
  },
  {
    "text": "elastic beanstalk is the service you would use to do more the traditional deploy more you want to go deploy this",
    "start": "886880",
    "end": "892440"
  },
  {
    "text": "into an is environment so both those show up because this is a web project we're gonna choose lambda and so with",
    "start": "892440",
    "end": "902460"
  },
  {
    "text": "cloud formation which is our vehicle we're gonna use to do this deployment you have to you create a stack and that",
    "start": "902460",
    "end": "908550"
  },
  {
    "text": "stack represents all the resources so we're gonna name that stack so what calls us NDC 2018 and then we need to",
    "start": "908550",
    "end": "918090"
  },
  {
    "text": "specify an s3 bucket so the reason we set the s3 bucket is when we do",
    "start": "918090",
    "end": "923370"
  },
  {
    "text": "deployment we're gonna build that package bundle upload that package bundle to s3 and then update our",
    "start": "923370",
    "end": "930870"
  },
  {
    "text": "CloudFormation template to say the code for these projects these lambda functions is in that package",
    "start": "930870",
    "end": "936060"
  },
  {
    "text": "we just upload to s3 imma push publish",
    "start": "936060",
    "end": "941390"
  },
  {
    "text": "and so here we're just really running done and published which is gonna create again optimized for the Linux environment it's uploading it to s3 now",
    "start": "941450",
    "end": "955740"
  },
  {
    "text": "and now it's telling CloudFormation go start creating a stack for us and so",
    "start": "955740",
    "end": "963480"
  },
  {
    "text": "that's gonna bring up our cloud formation view here and it there we go so this view is gonna start sending out",
    "start": "963480",
    "end": "968520"
  },
  {
    "text": "events as these resources come online and I could define my whole application this I could define debate databases and",
    "start": "968520",
    "end": "974910"
  },
  {
    "text": "s3 buckets and all those things my confirmation tablet is actually quite simple I just have the one resource here",
    "start": "974910",
    "end": "982140"
  },
  {
    "text": "this is my server list function here and",
    "start": "982140",
    "end": "987660"
  },
  {
    "text": "here is that handler string they talked about that identifies in the package bundle what we're actually going to call",
    "start": "987660",
    "end": "993750"
  },
  {
    "text": "in that method any service function resource is actually a bit of a meta",
    "start": "993750",
    "end": "1000650"
  },
  {
    "text": "resource in CloudFormation because it actually creates it gets converted into other smaller resources in this case",
    "start": "1000650",
    "end": "1007640"
  },
  {
    "text": "it's gonna also set up our API gateway as well so here we sped our runtime but",
    "start": "1007640",
    "end": "1015530"
  },
  {
    "text": "in the event section is where we actually say we're going to set up a REST API so we're gonna have two",
    "start": "1015530",
    "end": "1020810"
  },
  {
    "text": "endpoints here one is for everything coming in at the root of our rest endpoint syn to our lambda function and",
    "start": "1020810",
    "end": "1028449"
  },
  {
    "text": "then the second one is really just covering the other case of anything past the root is we also want to know that me",
    "start": "1028450",
    "end": "1033620"
  },
  {
    "text": "function the reason we're doing this is because we're gonna allow a spinet core to handle the routing to our write code",
    "start": "1033620",
    "end": "1040699"
  },
  {
    "text": "it's gonna figure out what's the controllers and all those so we're gonna take advantage of that so that probably",
    "start": "1040700",
    "end": "1047449"
  },
  {
    "text": "is gonna be we're deployed now and that takes just about in this case it's",
    "start": "1047450",
    "end": "1052520"
  },
  {
    "text": "pretty simple it took about a minute to do we can click on that link and we",
    "start": "1052520",
    "end": "1057560"
  },
  {
    "text": "should see our application here so here is our a spinner core application as a",
    "start": "1057560",
    "end": "1063860"
  },
  {
    "text": "service application running out there on and using EPA gateway as our front him",
    "start": "1063860",
    "end": "1071440"
  },
  {
    "text": "okay so now that we talked about what is",
    "start": "1072340",
    "end": "1079370"
  },
  {
    "text": "the service environment and what is they do its implementation let's switch now to talk about containers and buy containers I'm",
    "start": "1079370",
    "end": "1085039"
  },
  {
    "text": "focusing on docker I know there's other container technologies but I'm just gonna focus on docker and again",
    "start": "1085039",
    "end": "1090440"
  },
  {
    "text": "containers is a very large topic so my goal is to talk about where things are",
    "start": "1090440",
    "end": "1095450"
  },
  {
    "text": "similar and different with a service environment so our benefits for",
    "start": "1095450",
    "end": "1100669"
  },
  {
    "text": "containers is we have a large rich powerful tools that we have the doctor CLI we have our image registries where",
    "start": "1100669",
    "end": "1108019"
  },
  {
    "text": "we can easily push our docker images around and pull them around it's also cloud or on-premise agnostic so this is",
    "start": "1108019",
    "end": "1115279"
  },
  {
    "text": "technology if you want to make sure you're not locked into anything you can containers keep you away from that the",
    "start": "1115279",
    "end": "1122840"
  },
  {
    "text": "application packaging it's creating docker images allow you to make sure you got everything logged to the versions you want including what your application",
    "start": "1122840",
    "end": "1129559"
  },
  {
    "text": "dependencies are your your runtime of your language and your OS all that gets locked in that because that image",
    "start": "1129559",
    "end": "1135500"
  },
  {
    "text": "contains all those dependencies together and docker does also allow you to easily",
    "start": "1135500",
    "end": "1140570"
  },
  {
    "text": "spin up new containers and tear them down so it provides that fast deployment and scaling now the major parts of a",
    "start": "1140570",
    "end": "1148970"
  },
  {
    "text": "container application we have again our container image which is that immutable image of our application we have the",
    "start": "1148970",
    "end": "1154880"
  },
  {
    "text": "docker runtime which takes care of running our containers on our mission on",
    "start": "1154880",
    "end": "1160429"
  },
  {
    "text": "our host machine and having to communicate with that and then we have the orchestration so most likely we're",
    "start": "1160429",
    "end": "1166399"
  },
  {
    "text": "gonna want to be running our containers in a highly scaled environment not just on one machine so we're gonna have",
    "start": "1166399",
    "end": "1171440"
  },
  {
    "text": "orchestration to be able to push our containers across a fleet of machines",
    "start": "1171440",
    "end": "1177760"
  },
  {
    "text": "now if we compare the container images versus the lambda package button again",
    "start": "1178419",
    "end": "1183950"
  },
  {
    "text": "the container image contains all the bits so this is it contains my whole application it contains a dotnet core",
    "start": "1183950",
    "end": "1190880"
  },
  {
    "text": "runtime it contains the Linux dependencies if we're doing a Linux so that image is typically about a hundred",
    "start": "1190880",
    "end": "1197779"
  },
  {
    "text": "to two hundred Meg's for a dynacord linux image now if we compare that to a lambda package bundle",
    "start": "1197779",
    "end": "1205249"
  },
  {
    "text": "that is just a zip file of just your application dependencies and typically",
    "start": "1205249",
    "end": "1210720"
  },
  {
    "text": "that is just a few Meg's in fact if we didn't look if we looked at what are",
    "start": "1210720",
    "end": "1216330"
  },
  {
    "text": "that we just created was here the",
    "start": "1216330",
    "end": "1225289"
  },
  {
    "text": "application I just did was 600 K so that's the whole application bundle for lambdas case I mean you want that to be",
    "start": "1225289",
    "end": "1231389"
  },
  {
    "text": "small for lambdas case so I can give you that really fast cold start in fact lambdas max size for a package",
    "start": "1231389",
    "end": "1240029"
  },
  {
    "text": "bundle is 50 Meg's now orchestration is",
    "start": "1240029",
    "end": "1245279"
  },
  {
    "text": "where are things I think get a little more complicated in the container world versus then the service world we have",
    "start": "1245279",
    "end": "1250679"
  },
  {
    "text": "everything is just being managed for us by the service the orchestrations job is to basically replicate all that same",
    "start": "1250679",
    "end": "1256679"
  },
  {
    "text": "work it takes care of all of our scaling needs adding and removing containers and it's not just doing this based on the",
    "start": "1256679",
    "end": "1262830"
  },
  {
    "text": "events coming in and adding compute environments you have to have some sort of metrics that determine when you want",
    "start": "1262830",
    "end": "1268259"
  },
  {
    "text": "to add and remove your containers whether that's CPU usage or requests you",
    "start": "1268259",
    "end": "1273600"
  },
  {
    "text": "have to make sure that those are set up correctly so that your container your orchestration system knows when to add",
    "start": "1273600",
    "end": "1278700"
  },
  {
    "text": "and remove environments it also make takes care of your durability and placement all right so we might have 10",
    "start": "1278700",
    "end": "1285659"
  },
  {
    "text": "machines set up in our cluster and we start launching an application that says",
    "start": "1285659",
    "end": "1291299"
  },
  {
    "text": "let's have three instances of this container across our cluster the orchestration system is to make sure",
    "start": "1291299",
    "end": "1297029"
  },
  {
    "text": "that you don't just put all three on the same machine giving you a single point of failure and make sure that those",
    "start": "1297029",
    "end": "1302610"
  },
  {
    "text": "containers are spread out across your fleet and because our orchestration",
    "start": "1302610",
    "end": "1307889"
  },
  {
    "text": "system is probably going to have lots of other more orkut micro-services on there you're probably going to need to have",
    "start": "1307889",
    "end": "1313289"
  },
  {
    "text": "some sort of service discovery system to be able to find those and communicate with them so that's the orchestration system job now the orchestration system",
    "start": "1313289",
    "end": "1322919"
  },
  {
    "text": "is relying on your container cluster that remains the actual servers that are going to run your containers in a deist",
    "start": "1322919",
    "end": "1330059"
  },
  {
    "text": "land that would be ec2 instances and you want to make sure that those",
    "start": "1330059",
    "end": "1335150"
  },
  {
    "text": "servers are spread across multiple data centers so if there's ever problem any one data center again things would fall",
    "start": "1335150",
    "end": "1342360"
  },
  {
    "text": "over to the other machines in AWS that would mean you would deploy these each students's and different availability",
    "start": "1342360",
    "end": "1348210"
  },
  {
    "text": "zones so ad bus is broken up into regions and then every region has broken up into several availability zones so",
    "start": "1348210",
    "end": "1354720"
  },
  {
    "text": "you can have that redundancy within a region now most can orchestration",
    "start": "1354720",
    "end": "1360480"
  },
  {
    "text": "systems will have some combination of a managed or unmanaged environment and this is where I think things have gotten",
    "start": "1360480",
    "end": "1366540"
  },
  {
    "text": "more grey area between comparing service and containers was having these managed",
    "start": "1366540",
    "end": "1372030"
  },
  {
    "text": "environments there is that idea you don't have to manage the servers like a service environment but there still are",
    "start": "1372030",
    "end": "1379200"
  },
  {
    "text": "some more differences but you can also do unmanaged if you want to be in complete control of how your machines",
    "start": "1379200",
    "end": "1384900"
  },
  {
    "text": "are set up in your machine and when they're taken on an offline now 80 basis",
    "start": "1384900",
    "end": "1392100"
  },
  {
    "text": "we have a lot of services that rely on containers and we're gonna cover some of them here first one I wanna talk about",
    "start": "1392100",
    "end": "1399150"
  },
  {
    "text": "is a Debus batch I thought this was interesting to talk about because it kind of solves one of the the things",
    "start": "1399150",
    "end": "1405480"
  },
  {
    "text": "that service isn't really nice or great at which is I have some long-lived process that I want to go do maybe a",
    "start": "1405480",
    "end": "1411090"
  },
  {
    "text": "long log dive through through some work so batch processing is not the greatest",
    "start": "1411090",
    "end": "1418560"
  },
  {
    "text": "in a service environment unless you can break up your batch processing into multiple events depends on your system",
    "start": "1418560",
    "end": "1425010"
  },
  {
    "text": "but we can also just use a dispatch to do those processing so badge allows us",
    "start": "1425010",
    "end": "1430320"
  },
  {
    "text": "to essentially define a job and the job just identifies what container you want",
    "start": "1430320",
    "end": "1435510"
  },
  {
    "text": "to run and you could pass in parameters to that container then you would set up queues so I could have here's my normal",
    "start": "1435510",
    "end": "1442470"
  },
  {
    "text": "queue that I've sent everything to but I have my high priority queue so when my boss comes to me on Friday afternoon and",
    "start": "1442470",
    "end": "1447930"
  },
  {
    "text": "says I need some data right now you could submit a job that just goes into the high priority queue so it would jump ahead in line and then you have a",
    "start": "1447930",
    "end": "1454800"
  },
  {
    "text": "compute environment which is what your queues are going to be tied to and again you can have managed compute",
    "start": "1454800",
    "end": "1461310"
  },
  {
    "text": "environments or unmanaged compute environments and the manage compute environments in this case have an interesting feature",
    "start": "1461310",
    "end": "1467180"
  },
  {
    "text": "where they can use either on-demand ec2 instances which means it's just gonna",
    "start": "1467180",
    "end": "1473060"
  },
  {
    "text": "create easy two instances as needed and it's gonna do that with whatever is the current pricing for those ec2 instances",
    "start": "1473060",
    "end": "1479350"
  },
  {
    "text": "or you can say I spot I'm going to use spot instances image spotted this is",
    "start": "1479350",
    "end": "1484700"
  },
  {
    "text": "really good for is when you might have some batch work you want to do you don't necessarily need it right now you just",
    "start": "1484700",
    "end": "1490760"
  },
  {
    "text": "needed to propose at some point so you could say I want to run this batch job and use these spot instance fleets and",
    "start": "1490760",
    "end": "1498050"
  },
  {
    "text": "what ATIS does it says well there's always a varying degree of demand on a region depending on even the time of day",
    "start": "1498050",
    "end": "1504620"
  },
  {
    "text": "right so at 2:00 in the morning when everyone's gone to bed the internet usage goes down so what a Debus does is",
    "start": "1504620",
    "end": "1511280"
  },
  {
    "text": "it's gonna actually have a spot or they call spot instances where they will temporarily lower the prices down and",
    "start": "1511280",
    "end": "1516770"
  },
  {
    "text": "you can take advantage of that so I could say let's use my compute environment compute environment uses",
    "start": "1516770",
    "end": "1523130"
  },
  {
    "text": "spot instances and use these when the price is currently 80 percent of the current on-demand price so it's a way",
    "start": "1523130",
    "end": "1529370"
  },
  {
    "text": "you can run your best jobs and save money on that all right so let's take a",
    "start": "1529370",
    "end": "1535730"
  },
  {
    "text": "break some slides and do another demo so the problem here is for this demo we're",
    "start": "1535730",
    "end": "1542240"
  },
  {
    "text": "gonna say is our boss has come to us and says we need to do an audit I need to know over the past year how many lambda",
    "start": "1542240",
    "end": "1548750"
  },
  {
    "text": "functions you've created and what type of compute and var what run time did you",
    "start": "1548750",
    "end": "1554000"
  },
  {
    "text": "use did you choose net did you choose go Java so we need to go find that out for",
    "start": "1554000",
    "end": "1559520"
  },
  {
    "text": "him now we can do that because some of those lambda functions we've probably",
    "start": "1559520",
    "end": "1564590"
  },
  {
    "text": "deleted so we can't just see what's currently deployed but we can use the service called cloud trail which",
    "start": "1564590",
    "end": "1569810"
  },
  {
    "text": "actually creates an audit trail of all of your ap call API calls for most of",
    "start": "1569810",
    "end": "1575000"
  },
  {
    "text": "the APIs services so record the whole entire log and write that out to an s3 bucket when it writes to an s3 bucket",
    "start": "1575000",
    "end": "1583910"
  },
  {
    "text": "it's gonna write into a file with this file format so s3 you put a file in in",
    "start": "1583910",
    "end": "1589460"
  },
  {
    "text": "there with a key that's how you get it back out and you put it into what's called a bucket and so that key format",
    "start": "1589460",
    "end": "1595160"
  },
  {
    "text": "is going to be a twist logs my account ID trail the region and then there's the",
    "start": "1595160",
    "end": "1601690"
  },
  {
    "text": "date part of the key and then the final file name so the fact that I got the",
    "start": "1601690",
    "end": "1606730"
  },
  {
    "text": "date in there can make it really easy for me to paralyze this work so if I say I want to do this for the past year I",
    "start": "1606730",
    "end": "1612879"
  },
  {
    "text": "can just say well let's run a job for each one of these days based off of that date factor so let's go take a quick",
    "start": "1612879",
    "end": "1620830"
  },
  {
    "text": "look at our code here so here's some",
    "start": "1620830",
    "end": "1625840"
  },
  {
    "text": "code I wrote I did hard code some things I should briefly parameterize it and",
    "start": "1625840",
    "end": "1631029"
  },
  {
    "text": "then here is my s3 bucket cloud trail so you can see here I've got logs I've",
    "start": "1631029",
    "end": "1642999"
  },
  {
    "text": "logged for the last three years of all the API calls I made in this region so",
    "start": "1642999",
    "end": "1649899"
  },
  {
    "text": "what we're gonna basically do in this this code is we're gonna go list all the objects based off some prefix when you",
    "start": "1649899",
    "end": "1656710"
  },
  {
    "text": "do a list objects in s3 you can say give me all the objects where the object key starts with this",
    "start": "1656710",
    "end": "1663340"
  },
  {
    "text": "and so we can determine what that keep your fix is gonna be if we look at that",
    "start": "1663340",
    "end": "1668590"
  },
  {
    "text": "code so when we run things in batch it",
    "start": "1668590",
    "end": "1674860"
  },
  {
    "text": "sets an environment variable for in a rate index because I'm gonna run this",
    "start": "1674860",
    "end": "1680440"
  },
  {
    "text": "job as an array of 365 so one for each day and it's gonna set this index on",
    "start": "1680440",
    "end": "1685509"
  },
  {
    "text": "here and so I can use that as an offset off the current day to just go compute",
    "start": "1685509",
    "end": "1690970"
  },
  {
    "text": "that day and that's how I'm gonna set up my prefix down there so that's how I know each one of my containers is gonna",
    "start": "1690970",
    "end": "1696309"
  },
  {
    "text": "go process one days with the data I'm not gonna go too much through the rest",
    "start": "1696309",
    "end": "1701590"
  },
  {
    "text": "of this code I do have a link at the end that's gonna have the slides in this code if anyone does really get curious",
    "start": "1701590",
    "end": "1706869"
  },
  {
    "text": "about this code but basically it's just gonna go loop through all the objects we're gonna parse all the JSON out of",
    "start": "1706869",
    "end": "1712600"
  },
  {
    "text": "there to find out if it was our actual lambda function and add that to our",
    "start": "1712600",
    "end": "1718869"
  },
  {
    "text": "counter I think just to show as a reference if we went to the cloud trail",
    "start": "1718869",
    "end": "1725169"
  },
  {
    "text": "console",
    "start": "1725169",
    "end": "1727768"
  },
  {
    "text": "so this is the clown so that we can do some diving for us so we can say event",
    "start": "1736130",
    "end": "1741810"
  },
  {
    "text": "name function here",
    "start": "1741810",
    "end": "1747680"
  },
  {
    "text": "so here's some data this is when I was practicing my talk the other day it looks like and we can look at the raw",
    "start": "1756380",
    "end": "1762919"
  },
  {
    "text": "JSON here and except this is what's actually letting my cloud trail for all of API calls so it's gonna identify the",
    "start": "1762919",
    "end": "1770179"
  },
  {
    "text": "user in my account the service that actually did this inside deployed this through cloud formation so I could go",
    "start": "1770179",
    "end": "1775910"
  },
  {
    "text": "identify that this was actually created as part of a CloudFormation template there's identifying the service that",
    "start": "1775910",
    "end": "1782840"
  },
  {
    "text": "this is and the actual method that is on and then here are all the parameters that was set as part of that API call",
    "start": "1782840",
    "end": "1789590"
  },
  {
    "text": "and you can see there's the runtime so that's what I'm gonna go parse on my jason to find that information out at",
    "start": "1789590",
    "end": "1798890"
  },
  {
    "text": "the end of that i'm gonna go write all that data a - i'm gonna persist it out",
    "start": "1798890",
    "end": "1804110"
  },
  {
    "text": "to my diner to be table and so this table is very simple since this is a no",
    "start": "1804110",
    "end": "1811039"
  },
  {
    "text": "sequel system all it is a table with a key of runtimes no no attributes that sweets will create",
    "start": "1811039",
    "end": "1816650"
  },
  {
    "text": "it as for saving the datum so to run this in batch first i need to publish",
    "start": "1816650",
    "end": "1822650"
  },
  {
    "text": "the container image i can do that in visual studio by right-clicking on this and say publish continuative us i'm",
    "start": "1822650",
    "end": "1830539"
  },
  {
    "text": "gonna just leave all this at the default here this is gonna push our image to Amazon Elastic container registry that's",
    "start": "1830539",
    "end": "1837110"
  },
  {
    "text": "the service that we have for your right containers so this is gonna do the whole",
    "start": "1837110",
    "end": "1842690"
  },
  {
    "text": "docker bills for us it's gonna log on to ECR and then it's gonna push that image",
    "start": "1842690",
    "end": "1848240"
  },
  {
    "text": "i've already pushed this a few times in practice so most that image is always there and if you know the doctor doctor",
    "start": "1848240",
    "end": "1854270"
  },
  {
    "text": "is always just pushing the layers that have actually changed between your pushes so now that's there I can go grab",
    "start": "1854270",
    "end": "1861169"
  },
  {
    "text": "my name of that container image and now let's switch to the batch console",
    "start": "1861169",
    "end": "1867940"
  },
  {
    "text": "and so I'm gonna actually skip the getting started wizard because I want to show the components that make this up so",
    "start": "1875090",
    "end": "1882840"
  },
  {
    "text": "here we have we're gonna create our compute environments and here this is",
    "start": "1882840",
    "end": "1888600"
  },
  {
    "text": "where again I can have a manager not unmanaged compute environments I'm gonna call this my NDC ozlowe compute",
    "start": "1888600",
    "end": "1896130"
  },
  {
    "text": "environment so if you never used any bus before one thing you should know is a",
    "start": "1896130",
    "end": "1901710"
  },
  {
    "text": "Tobias will never do anything in your account unless you explicitly give it permission to do it it does this through",
    "start": "1901710",
    "end": "1908340"
  },
  {
    "text": "a vehicle called ID access management roles so in this case the batch service",
    "start": "1908340",
    "end": "1916650"
  },
  {
    "text": "needs to make other calls on my behalf because it needs to go check to see do I",
    "start": "1916650",
    "end": "1921720"
  },
  {
    "text": "need to go adjust the amount of compute power in there and do I need to create new ec2 instances so in order to do that",
    "start": "1921720",
    "end": "1927690"
  },
  {
    "text": "I have to assign a service role that grants it permissions and I in the",
    "start": "1927690",
    "end": "1932790"
  },
  {
    "text": "console file to create new would created this default one but this is what this is is it's always you have to give a",
    "start": "1932790",
    "end": "1938309"
  },
  {
    "text": "permissions to do things for you and also on those ec2 instances there's going to be an agent on there which is",
    "start": "1938309",
    "end": "1945510"
  },
  {
    "text": "gonna go reach out to write log files it's gonna reach down to go pull down our docker image from ECR so that agent",
    "start": "1945510",
    "end": "1952590"
  },
  {
    "text": "needs permission and you do that with assigning an instance profile to your ec2 instances and that's what this is",
    "start": "1952590",
    "end": "1958770"
  },
  {
    "text": "here so I'm going to set that to the default one that they'll create for us and I think all the rest I'm just gonna",
    "start": "1958770",
    "end": "1966630"
  },
  {
    "text": "leave the defaults here so my minimum is going to be zero virtual CPUs so now you",
    "start": "1966630",
    "end": "1972179"
  },
  {
    "text": "have any machines on it now and the max I'm gonna let it at 256 virtual CPUs on",
    "start": "1972179",
    "end": "1977850"
  },
  {
    "text": "there so I can just leave everything else at the defaults so now we have our compute environment which doesn't",
    "start": "1977850",
    "end": "1983790"
  },
  {
    "text": "actually have any machines to it so now let's go create a queue so create our",
    "start": "1983790",
    "end": "1990900"
  },
  {
    "text": "queue this ng c q i will set a priority the",
    "start": "1990900",
    "end": "1997710"
  },
  {
    "text": "higher the priority is the higher the number of the higher priority and then we're just gonna",
    "start": "1997710",
    "end": "2003770"
  },
  {
    "text": "assign compute environment to it so the one we just created so now we have a",
    "start": "2003770",
    "end": "2009799"
  },
  {
    "text": "queue set up so now when you're gonna create our job definition I'm gonna",
    "start": "2009799",
    "end": "2016130"
  },
  {
    "text": "create that so call this trail search",
    "start": "2016130",
    "end": "2023530"
  },
  {
    "text": "now this is gonna be running this is represents are running container and our",
    "start": "2023530",
    "end": "2028610"
  },
  {
    "text": "container has to access s3 to go download those objects and it has to download it has to write you down a DB",
    "start": "2028610",
    "end": "2036350"
  },
  {
    "text": "so this is where we need to assign a role to give permissions to our code running in there so every job could have",
    "start": "2036350",
    "end": "2042679"
  },
  {
    "text": "a different set of permissions there so you're not just gonna create one role for every job that you're running your batch environment so I've set that up",
    "start": "2042679",
    "end": "2049608"
  },
  {
    "text": "again my batch demo role I'm gonna identify the container I'm just gonna call this this is the the docker image",
    "start": "2049609",
    "end": "2057350"
  },
  {
    "text": "that we just published to ECR and then the work that I'm doing in my container my batch is on a per day is",
    "start": "2057350",
    "end": "2064790"
  },
  {
    "text": "pretty minimal because it's really just doing an s3 list and looping through those things so I think I only need one versus EP for that and I only need about",
    "start": "2064790",
    "end": "2072490"
  },
  {
    "text": "256 Meg's for that is my guess so by shrinking that I'm allowing more",
    "start": "2072490",
    "end": "2077840"
  },
  {
    "text": "room on my badge cluster by doing that and all the rest I'm gonna leave",
    "start": "2077840",
    "end": "2083108"
  },
  {
    "text": "defaults I could definitely pass parameters and other things here but my case is pretty simple so now let's go",
    "start": "2083109",
    "end": "2089658"
  },
  {
    "text": "ahead and submit a job and this job",
    "start": "2089659",
    "end": "2097960"
  },
  {
    "text": "looks like their job definition that we just ran there's our cue that we done",
    "start": "2097960",
    "end": "2104180"
  },
  {
    "text": "I'm gonna say I want to run this as an array of 365 so I can have one for every",
    "start": "2104180",
    "end": "2109640"
  },
  {
    "text": "single day of the past year to do all that processing I can also override any of the settings of the batch job",
    "start": "2109640",
    "end": "2116960"
  },
  {
    "text": "definition here but I'm just gonna leave all those at the defaults and submit that and so now that's batch is gonna",
    "start": "2116960",
    "end": "2124010"
  },
  {
    "text": "now take that job it's gonna then eventually go find out we need to go add more compute environments for this",
    "start": "2124010",
    "end": "2131320"
  },
  {
    "text": "and spin those up and run those up so if we clicked on this we should see now we",
    "start": "2131320",
    "end": "2139540"
  },
  {
    "text": "have 365 jobs all in the runnable state they're waiting for a compute",
    "start": "2139540",
    "end": "2145090"
  },
  {
    "text": "environment to become available so they can run so if we were to go look at ec2",
    "start": "2145090",
    "end": "2150180"
  },
  {
    "text": "console this might show those up that",
    "start": "2150180",
    "end": "2155320"
  },
  {
    "text": "might not yet and it takes usually a minute or so for batch to start doing",
    "start": "2155320",
    "end": "2161830"
  },
  {
    "text": "the recomputing so it hasn't done it yet but in about a minute or so it's gonna start spinning up those instances so",
    "start": "2161830",
    "end": "2168160"
  },
  {
    "text": "we'll come back on this demo again to check the results of this demo now we've got everything deployed 80 bits code",
    "start": "2168160",
    "end": "2179710"
  },
  {
    "text": "build so this is our code build service and that is actually built around containers as well when you do a build",
    "start": "2179710",
    "end": "2186400"
  },
  {
    "text": "and 80 us is really spinning up containers for that and you run your build scripts on that we support down",
    "start": "2186400",
    "end": "2193060"
  },
  {
    "text": "that core 200 as one of our managed images down there as well as you can bring your own docker images as well so",
    "start": "2193060",
    "end": "2199900"
  },
  {
    "text": "if you have technology that you know that's like not part of the data core base image you can do that too one will",
    "start": "2199900",
    "end": "2206380"
  },
  {
    "text": "be added to there soon the the difference between using one of our managed containers versus one is if",
    "start": "2206380",
    "end": "2215530"
  },
  {
    "text": "you're pulling one from docker hubs that means the first time you're gonna start up your build environment it has to",
    "start": "2215530",
    "end": "2220540"
  },
  {
    "text": "download the image all the way from docker hub verses from ECR where it's co-located in the same region so the",
    "start": "2220540",
    "end": "2226000"
  },
  {
    "text": "download can be faster you can also use this service to build containers as well",
    "start": "2226000",
    "end": "2232680"
  },
  {
    "text": "now Amazon Elastic container service or ECS this is really the general-purpose",
    "start": "2232830",
    "end": "2238000"
  },
  {
    "text": "orchestration system that we have at AWS it's what other services are actually built in fact when we created our batch",
    "start": "2238000",
    "end": "2244020"
  },
  {
    "text": "compute environment what that really did if I switch back over is it actually",
    "start": "2244020",
    "end": "2251800"
  },
  {
    "text": "created easiest bath you know environment for us is to managing that",
    "start": "2251800",
    "end": "2257950"
  },
  {
    "text": "there so easy s is really sort of the general purpose building one block you do",
    "start": "2257950",
    "end": "2263490"
  },
  {
    "text": "so the way easiest works is you define a cluster and that cluster is made up of",
    "start": "2263490",
    "end": "2269910"
  },
  {
    "text": "container instances these would be easy two instances then you would have a task",
    "start": "2269910",
    "end": "2276030"
  },
  {
    "text": "definition this task definition that identified all of the containers I want to deploy as part of a task along with",
    "start": "2276030",
    "end": "2282900"
  },
  {
    "text": "all the settings that you need for that task definition how much memory how much CPU want to dedicate to each of those",
    "start": "2282900",
    "end": "2288690"
  },
  {
    "text": "things all those settings are set as part of that with a task definition you",
    "start": "2288690",
    "end": "2294750"
  },
  {
    "text": "will go say I want to go run in number of tasks on my cluster with this task",
    "start": "2294750",
    "end": "2301320"
  },
  {
    "text": "definition and ECS is going to take share of you can see in that picture of",
    "start": "2301320",
    "end": "2306360"
  },
  {
    "text": "spreading those also spreading those containers across our machines now when",
    "start": "2306360",
    "end": "2312930"
  },
  {
    "text": "you do this where you're running a test directly on the cluster like this this is more for transitory processes kind of",
    "start": "2312930",
    "end": "2319380"
  },
  {
    "text": "like our batch job like when the process declared in that container image is complete you want your task to end it's",
    "start": "2319380",
    "end": "2325740"
  },
  {
    "text": "not something for when you want to do like a web server or something that's long live we'll talk about that in a",
    "start": "2325740",
    "end": "2331770"
  },
  {
    "text": "second but so once those tasks start up they're going to reach to their",
    "start": "2331770",
    "end": "2337020"
  },
  {
    "text": "container registry whether that's docker hub or ECR and download that image and",
    "start": "2337020",
    "end": "2342060"
  },
  {
    "text": "then start that TAS up now services is",
    "start": "2342060",
    "end": "2347460"
  },
  {
    "text": "the other way you could run a container application on ECS and this is what",
    "start": "2347460",
    "end": "2352860"
  },
  {
    "text": "you'd want to do for your web servers because with a service the service is",
    "start": "2352860",
    "end": "2358290"
  },
  {
    "text": "going to monitor the the health of these containers if the these tasks die it'll",
    "start": "2358290",
    "end": "2364080"
  },
  {
    "text": "go and create new instances of those so the service will go and spawn off a",
    "start": "2364080",
    "end": "2370350"
  },
  {
    "text": "bunch of tasks on there and if these are web servers we don't want five different",
    "start": "2370350",
    "end": "2375420"
  },
  {
    "text": "endpoints for our web for our web application so what we're probably going to do is create a load balancer and the",
    "start": "2375420",
    "end": "2381360"
  },
  {
    "text": "servers will take care of registering all of the healthy can help eat asks to",
    "start": "2381360",
    "end": "2386850"
  },
  {
    "text": "our load balancer and then once those are registered and they're healthy then",
    "start": "2386850",
    "end": "2391920"
  },
  {
    "text": "the load balancer will take send the traffic evenly across all of our deployed tasks for our service",
    "start": "2391920",
    "end": "2398869"
  },
  {
    "text": "now there's actually two ways you can run tests on on ECS the you can run it",
    "start": "2400670",
    "end": "2409290"
  },
  {
    "text": "on ec2 instances so this is when I created my EC my cluster I've created some ec2 instances and I've assigned",
    "start": "2409290",
    "end": "2415530"
  },
  {
    "text": "those ec2 instances to my cluster the other way is with Fargate so when you",
    "start": "2415530",
    "end": "2421050"
  },
  {
    "text": "launch you will launch your task you say I want to launch this as a far gate and far gate will take care of procuring all",
    "start": "2421050",
    "end": "2427890"
  },
  {
    "text": "your compute resources for you so you'll just say I want to launch this as far gate I need this much CPU in this much",
    "start": "2427890",
    "end": "2434760"
  },
  {
    "text": "memory and just go and so it'll actually automatically spin up those resources for us and then once those once you've",
    "start": "2434760",
    "end": "2442980"
  },
  {
    "text": "stopped that service it will go and tear those down so now you get back into that back where there's no servers to manager",
    "start": "2442980",
    "end": "2450150"
  },
  {
    "text": "the servers are managed for you by the service and so the cost is gonna be for",
    "start": "2450150",
    "end": "2457020"
  },
  {
    "text": "this is how is is based on the task duration so unlike you know lambda where",
    "start": "2457020",
    "end": "2463140"
  },
  {
    "text": "you're just basically causing how long your functions run and then if they're not running there's no cost because",
    "start": "2463140",
    "end": "2468840"
  },
  {
    "text": "there's no no cost for ila functions in this case as long as your task is running even if it's not doing anything",
    "start": "2468840",
    "end": "2474510"
  },
  {
    "text": "right now you're still being you're still paying for the time it takes for those containers to be running and it's",
    "start": "2474510",
    "end": "2480120"
  },
  {
    "text": "based off of the CPU and memory you allocated for your Fargate tests now I",
    "start": "2480120",
    "end": "2488550"
  },
  {
    "text": "can't talk about orchestration systems without mention kubernetes kubernetes is definitely quickly becoming the standard",
    "start": "2488550",
    "end": "2495090"
  },
  {
    "text": "across all of the orchestration systems out there seems to be really leading over docker swarm and mesosphere it has",
    "start": "2495090",
    "end": "2502590"
  },
  {
    "text": "the largest community behind it in all the major cloud vendors and in tech",
    "start": "2502590",
    "end": "2508230"
  },
  {
    "text": "industries are basically getting behind it so Google ADB is Microsoft right everyone is contributing to this one it",
    "start": "2508230",
    "end": "2514770"
  },
  {
    "text": "can be quite a bit more challenging to set up there are a lot of tools to help",
    "start": "2514770",
    "end": "2520110"
  },
  {
    "text": "that out you know if you're using AWS and you want to set up your own kubernetes cluster there's the tool cops",
    "start": "2520110",
    "end": "2525660"
  },
  {
    "text": "out there which you can use to get everything set up for you also every major cloud vendor is also",
    "start": "2525660",
    "end": "2531950"
  },
  {
    "text": "working on making a managed kubernetes environment AWS just launched last week",
    "start": "2531950",
    "end": "2536989"
  },
  {
    "text": "the Amazon Elastic container service for kubernetes IKEA PS so that just came out",
    "start": "2536989",
    "end": "2543079"
  },
  {
    "text": "I didn't get a chance to really update my talk based off that because they surprised me with that coming out there's also a nativist workshop for",
    "start": "2543079",
    "end": "2551150"
  },
  {
    "text": "kubernetes if you want to get a better thing of how you can use that that is a workshop based off Python but all the",
    "start": "2551150",
    "end": "2556700"
  },
  {
    "text": "ideas are the same about how you manage your kubernetes now even though I think communities is becoming the standard I",
    "start": "2556700",
    "end": "2562670"
  },
  {
    "text": "don't think that this replaces ECS I think there's a place for both of them it depends on what you want and your and",
    "start": "2562670",
    "end": "2569150"
  },
  {
    "text": "your and your team kubernetes is a very powerful system it's got a lot of plugins for you it's an open-source but",
    "start": "2569150",
    "end": "2576499"
  },
  {
    "text": "it is a bigger thing to get involved with you have more to manage more to setup more to learn",
    "start": "2576499",
    "end": "2582039"
  },
  {
    "text": "ECS is easier system because it's it's a fully managed container or system it can",
    "start": "2582039",
    "end": "2589430"
  },
  {
    "text": "do everything deployment in fact we have toiling inside Visual Studio where here is an",
    "start": "2589430",
    "end": "2595940"
  },
  {
    "text": "application that I deploy to elastic container service by just selecting our published container and we have the",
    "start": "2595940",
    "end": "2603739"
  },
  {
    "text": "option to deploy this as a service to ECS so I could walk through this wizard and go and create my whole cluster and",
    "start": "2603739",
    "end": "2610359"
  },
  {
    "text": "my Fargate class and load balancers and alter this wizard so go from zero to a total ECS cluster deployed out there and",
    "start": "2610359",
    "end": "2621619"
  },
  {
    "text": "when the end result would that be is you will see there'll be a cluster over here",
    "start": "2621619",
    "end": "2627759"
  },
  {
    "text": "which has all of our services this customer only has one I have it this guy's running three tests that I all",
    "start": "2627759",
    "end": "2634789"
  },
  {
    "text": "launched using Fargate I can get with my load balancer this is an application",
    "start": "2634789",
    "end": "2640339"
  },
  {
    "text": "that one of my co-workers writes you find all the concerts near him so we did that deploy that series yes",
    "start": "2640339",
    "end": "2648969"
  },
  {
    "text": "so if we go back now and compare our container environments and surface mines",
    "start": "2652110",
    "end": "2657160"
  },
  {
    "text": "there's there's looks like there's a lot of similarities I think that you keep in mind that like this service environment",
    "start": "2657160",
    "end": "2663160"
  },
  {
    "text": "again everything inside that box though is completely abstracted from you you don't do anything with it you just",
    "start": "2663160",
    "end": "2669250"
  },
  {
    "text": "basically handling the events going into there versus the container environment a lot of this inside that box can be",
    "start": "2669250",
    "end": "2676240"
  },
  {
    "text": "managed for you but you're still gonna want to know what's going on how that's set up for you so it's gonna depend on",
    "start": "2676240",
    "end": "2682060"
  },
  {
    "text": "come back to your engineering costs how much do you want to spend on setting up your clusters versus how much you want",
    "start": "2682060",
    "end": "2688450"
  },
  {
    "text": "to hand off to your cloud provider to just take care of everything for you so",
    "start": "2688450",
    "end": "2695950"
  },
  {
    "text": "then the question is and what is the right tech to use and the set answer is it just depends there is no single",
    "start": "2695950",
    "end": "2702610"
  },
  {
    "text": "technology that's gonna work for every application you just have to figure out what is the right technology based off",
    "start": "2702610",
    "end": "2708460"
  },
  {
    "text": "of what they can do and what your team wants to spend its time on I find that most large applications use multiple",
    "start": "2708460",
    "end": "2716020"
  },
  {
    "text": "technologies you're probably gonna have some parts your application you want to use containers and some you do want to use service in fact that gigs for me",
    "start": "2716020",
    "end": "2723790"
  },
  {
    "text": "application I just showed we use containers to run the front end but when you add new users to it or new concerts",
    "start": "2723790",
    "end": "2730480"
  },
  {
    "text": "to it we need to go do some processing to find out to let users know when there's a new concert coming in and that",
    "start": "2730480",
    "end": "2736119"
  },
  {
    "text": "we use service for that to go do that asynchronous processing and send those events out to people so you can find a",
    "start": "2736119",
    "end": "2742060"
  },
  {
    "text": "combination of how you wanna do these things so to break down what we are",
    "start": "2742060",
    "end": "2750640"
  },
  {
    "text": "comparing these through so service we have our contained or continuous scaling which works really great for spiky or",
    "start": "2750640",
    "end": "2757720"
  },
  {
    "text": "low traffic patterns because it will instantly scale up for those spiky patterns and it also means that you don't get any charges for those low",
    "start": "2757720",
    "end": "2764109"
  },
  {
    "text": "periods where you're not doing anything because it's service you do have reduced",
    "start": "2764109",
    "end": "2769630"
  },
  {
    "text": "DevOps we're not managing any machines making sure they're all patched I'm not trying to say there's no DevOps you do",
    "start": "2769630",
    "end": "2776200"
  },
  {
    "text": "always need to make sure that all your dependencies and everything is still working but it is a reduced DevOps environment it works really great for",
    "start": "2776200",
    "end": "2783130"
  },
  {
    "text": "that asynchronous processing we're just firing off events from our services and we just want that to be taken care of for us",
    "start": "2783130",
    "end": "2789550"
  },
  {
    "text": "and in many cases using service can be an order of magnitude cheaper to run not",
    "start": "2789550",
    "end": "2796060"
  },
  {
    "text": "every case there are definitely cases where service is not the cheapest option but there are many cases depending on",
    "start": "2796060",
    "end": "2801310"
  },
  {
    "text": "your application where it can be significantly cheaper because you're really working with just that spiky or low-level pattern traffic now for",
    "start": "2801310",
    "end": "2810340"
  },
  {
    "text": "containers this works really great if your system requires you that you need complete control of your compute",
    "start": "2810340",
    "end": "2816100"
  },
  {
    "text": "environment if you have some sort of compliances or you just have certain ways you want this set up containers can",
    "start": "2816100",
    "end": "2822970"
  },
  {
    "text": "provide that if your application is demanding that it has to have a low consistency a high consistency low",
    "start": "2822970",
    "end": "2831370"
  },
  {
    "text": "latency where I couldn't you can't deal with those occasional cold starts then",
    "start": "2831370",
    "end": "2837580"
  },
  {
    "text": "containers would be the better fit there also it's cloud agnostic so if you do not want to get logged into any",
    "start": "2837580",
    "end": "2843430"
  },
  {
    "text": "particular cloud vendor you can use containers does not lock you into that",
    "start": "2843430",
    "end": "2849540"
  },
  {
    "text": "it also works well again we talked about if long running processes versus lambda is the case what works for event-driven",
    "start": "2849540",
    "end": "2856390"
  },
  {
    "text": "architecture also with containers there's no restrictions on which runtimes with a service environment you",
    "start": "2856390",
    "end": "2864220"
  },
  {
    "text": "are restricted to what that service environment can actually handle but it's managed runtime you know we support",
    "start": "2864220",
    "end": "2870190"
  },
  {
    "text": "dotnet score Go Java and no Jess but if",
    "start": "2870190",
    "end": "2876130"
  },
  {
    "text": "you wanted other languages you'd have to find another way to do that or you probably would just go use container for",
    "start": "2876130",
    "end": "2881950"
  },
  {
    "text": "that real-time communication like if we're going to use signal R or something like that that's where you'd want to use",
    "start": "2881950",
    "end": "2888280"
  },
  {
    "text": "containers for not service the idea of services is it takes in an event wraps",
    "start": "2888280",
    "end": "2894190"
  },
  {
    "text": "up in its land of function does help it's processing and send it back there's no persistent connection between your",
    "start": "2894190",
    "end": "2899980"
  },
  {
    "text": "client in that compute environment you would want to have something like containers to provide you that force",
    "start": "2899980",
    "end": "2905440"
  },
  {
    "text": "it's a connection all right so let's just finish let's go check our batch",
    "start": "2905440",
    "end": "2911290"
  },
  {
    "text": "demo to see how that worked out so if we go back to badge we should see everything succeeded which",
    "start": "2911290",
    "end": "2919329"
  },
  {
    "text": "is what we always like to see that everything always works and if we went to the ec2 console we will probably see",
    "start": "2919329",
    "end": "2926619"
  },
  {
    "text": "a bunch of terminated ec2 instances so expand up all these ec2 instances did",
    "start": "2926619",
    "end": "2931869"
  },
  {
    "text": "our batch processing and then it determined there's no more work to do and so it took care of deleting those for us so we don't have these",
    "start": "2931869",
    "end": "2938680"
  },
  {
    "text": "perpetually running so then if we go look down it'll be table we scan those",
    "start": "2938680",
    "end": "2946980"
  },
  {
    "text": "we can see that as the done in dev that mostly I create dotnet core lambda",
    "start": "2946980",
    "end": "2952269"
  },
  {
    "text": "functions okay so to recap we talked",
    "start": "2952269",
    "end": "2959980"
  },
  {
    "text": "about service environments how those really work what is the latest version",
    "start": "2959980",
    "end": "2965140"
  },
  {
    "text": "of that and that's using lambda and we really kind of dived into the life cycle of how that works even though you shouldn't have to worry",
    "start": "2965140",
    "end": "2971950"
  },
  {
    "text": "too much what's going in inside there but it's always good to know how that works we're talking about how you used",
    "start": "2971950",
    "end": "2978220"
  },
  {
    "text": "on the core with lambda we also talked what are the major components of containers and how those compare with a",
    "start": "2978220",
    "end": "2984009"
  },
  {
    "text": "service environment we mentioned nativist batch how you can use that as a",
    "start": "2984009",
    "end": "2989049"
  },
  {
    "text": "service that was it managing all your computer esource --is and be able to provide that long-running batch process that maybe wouldn't work so well in a",
    "start": "2989049",
    "end": "2995529"
  },
  {
    "text": "service environment code build is a I kind of think a diverse batch and code",
    "start": "2995529",
    "end": "3001890"
  },
  {
    "text": "builder like a specialized orchestration system they solve a particular running",
    "start": "3001890",
    "end": "3007259"
  },
  {
    "text": "our containers for us and then there's Amazon Elastic containers service which is the general-purpose one that you",
    "start": "3007259",
    "end": "3013109"
  },
  {
    "text": "would use to run all your applications on and hopefully you got a better understanding of when you might use each",
    "start": "3013109",
    "end": "3018750"
  },
  {
    "text": "of these technologies what's the right fit for your applications defense so I",
    "start": "3018750",
    "end": "3024869"
  },
  {
    "text": "didn't get too much to show off these tools but these are the tools that I work on at AWS they can be really useful",
    "start": "3024869",
    "end": "3031670"
  },
  {
    "text": "if you're doing down at an AWS one I want to highlight because I know I do a lot of demos showing off visual studio",
    "start": "3031670",
    "end": "3038160"
  },
  {
    "text": "and deployments and most of you probably thinking who actually does a deployment to production from visual studio at",
    "start": "3038160",
    "end": "3043740"
  },
  {
    "text": "least that's what I'm hoping you're saying I think those are really good tools to show to learn how do",
    "start": "3043740",
    "end": "3049190"
  },
  {
    "text": "use a service but you're gonna probably want to use to some automation so this extensions to the CLI project what this",
    "start": "3049190",
    "end": "3056180"
  },
  {
    "text": "is is all of the deployment features that we add to visual studio we make sure you can use that same code from the",
    "start": "3056180",
    "end": "3062390"
  },
  {
    "text": "command line so you can transition from visual studio deployment and learning how the service works to go and do a",
    "start": "3062390",
    "end": "3068780"
  },
  {
    "text": "deployment from the command line like for example if I wanted to deploy a function I can run this command here to",
    "start": "3068780",
    "end": "3074060"
  },
  {
    "text": "do that same deployment kind in fact when I run my deployment wizard",
    "start": "3074060",
    "end": "3079490"
  },
  {
    "text": "so in that case of my service space this defaults file was written down this is",
    "start": "3079490",
    "end": "3086420"
  },
  {
    "text": "all the settings that were set up in the wizard so I can just go straight to the command line and run the same deployment",
    "start": "3086420",
    "end": "3091910"
  },
  {
    "text": "with all these settings so it allows me to go back and forth so yes we do a lot of visual studio demos which again is",
    "start": "3091910",
    "end": "3098810"
  },
  {
    "text": "good for learning stuff but when you get to your CI system we can use these tools to go to your CD system and with that",
    "start": "3098810",
    "end": "3109310"
  },
  {
    "text": "thank you so much for coming to listen to me talk there's my twitter handle out there I always love to do some dot net",
    "start": "3109310",
    "end": "3114950"
  },
  {
    "text": "so if you ever have any questions feel free to let me know I see somebody taking pictures this link",
    "start": "3114950",
    "end": "3120020"
  },
  {
    "text": "right here is the link to my github repository which has these slides and",
    "start": "3120020",
    "end": "3125270"
  },
  {
    "text": "the demo code that I showed so if you guys want to take a look at that feel free to reach out and there's some other",
    "start": "3125270",
    "end": "3130760"
  },
  {
    "text": "blog hop repositories that I work on there and I also am a big contributor and they did was done a developer blog",
    "start": "3130760",
    "end": "3136040"
  },
  {
    "text": "that's one here so I write a lot about you there with that thanks so much for coming",
    "start": "3136040",
    "end": "3142120"
  },
  {
    "text": "[Applause]",
    "start": "3142120",
    "end": "3146920"
  }
]