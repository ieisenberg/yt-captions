[
  {
    "text": "all right welcome everyone so we're gonna be talking about async",
    "start": "3360",
    "end": "8720"
  },
  {
    "text": "and await and i just want to make it clear this is about c-sharp it's not about javascript even though we have async and awaiting javascript as well",
    "start": "8720",
    "end": "15360"
  },
  {
    "text": "this is about c sharp so we're going to be talking about efficient async and waiting going back",
    "start": "15360",
    "end": "20400"
  },
  {
    "text": "to the basics that efficiency can mean quite a few different things depending on who you're talking to it can mean are",
    "start": "20400",
    "end": "26800"
  },
  {
    "text": "we writing code that's efficient in terms of is it maintainable is the code efficient in terms of performance in",
    "start": "26800",
    "end": "33840"
  },
  {
    "text": "terms of memory allocations are we using async and await and the task parallel library in the way it's supposed to be",
    "start": "33840",
    "end": "40399"
  },
  {
    "text": "used so we'll be answering quite a few of those questions today and hopefully after this talk you'll have a lot of",
    "start": "40399",
    "end": "47440"
  },
  {
    "text": "refactoring to do in your applications and maybe you've learned a thing or two and my name is philip eckberg if you",
    "start": "47440",
    "end": "53520"
  },
  {
    "text": "have any questions after this talk just ping me on twitter if there's anything you want to know about c sharp or async",
    "start": "53520",
    "end": "59440"
  },
  {
    "text": "and await or just talk in general i'm there just pinging on twitter so why would we want to bother",
    "start": "59440",
    "end": "66080"
  },
  {
    "text": "introducing asynchronous principles in an application what's the purpose of making",
    "start": "66080",
    "end": "71520"
  },
  {
    "text": "use of those libraries that we have available in net and uc sharp it really boils down to the fact that we",
    "start": "71520",
    "end": "77520"
  },
  {
    "text": "want to avoid applications that are unreliable now this here is a sample application that i built for android now",
    "start": "77520",
    "end": "84560"
  },
  {
    "text": "i'm not saying that all android applications are unreliable but if i'm the developer in some cases they might",
    "start": "84560",
    "end": "89600"
  },
  {
    "text": "be so we can see here that the operating system is telling us that this very inefficient application is no longer",
    "start": "89600",
    "end": "96079"
  },
  {
    "text": "responding we don't really know if the application is doing something in the background",
    "start": "96079",
    "end": "101840"
  },
  {
    "text": "maybe it's occupying the ui thread to do a lot of work that it shouldn't we want to try and avoid this problem",
    "start": "101840",
    "end": "108240"
  },
  {
    "text": "here by introducing some some asynchronous principles and maybe some parallel programming as well to solve",
    "start": "108240",
    "end": "113759"
  },
  {
    "text": "problems a bit more efficiently this also boils down to improving the user experience we want to use",
    "start": "113759",
    "end": "120479"
  },
  {
    "text": "asynchronous apis and leverage all those different types of apis we have available to make our applications as",
    "start": "120479",
    "end": "127119"
  },
  {
    "text": "fast as possible but we want to consume those apis efficiently and that means consuming",
    "start": "127119",
    "end": "133520"
  },
  {
    "text": "both data as well as maybe web resources or database calls and do that as efficiently as possible",
    "start": "133520",
    "end": "140319"
  },
  {
    "text": "now depending on where you're running your code we have different amount of cpus",
    "start": "140319",
    "end": "145440"
  },
  {
    "text": "available or course available this is my rather powerful workstation at home it's a lot more powerful than what my phone",
    "start": "145440",
    "end": "152160"
  },
  {
    "text": "is today but i can almost guarantee that in 10 years the phone is going to be just as powerful",
    "start": "152160",
    "end": "157599"
  },
  {
    "text": "what's great about net and csharp is that they're going to scale your code so",
    "start": "157599",
    "end": "162720"
  },
  {
    "text": "that it caters for all of these different available resources that means how much cpu can we use how many cores",
    "start": "162720",
    "end": "168720"
  },
  {
    "text": "are there available how can we split up the work to make sure that the application performs as good as possible",
    "start": "168720",
    "end": "175920"
  },
  {
    "text": "and when we're talking about asynchronous principles and how to write really efficient code it boils",
    "start": "175920",
    "end": "181440"
  },
  {
    "text": "down to two things cpu bound operations or i o bound operations",
    "start": "181440",
    "end": "186720"
  },
  {
    "text": "if we want to leverage the cpu and write code that's really fast we want to use",
    "start": "186720",
    "end": "192080"
  },
  {
    "text": "parallel principles that means dividing a problem in smaller pieces where all of them can be solved independently we",
    "start": "192080",
    "end": "199040"
  },
  {
    "text": "don't really care about them finishing in a certain order for io bound operations that's",
    "start": "199040",
    "end": "206080"
  },
  {
    "text": "everything that's querying a database or doing a web call or reading something from your disk",
    "start": "206080",
    "end": "211519"
  },
  {
    "text": "so while we have these two different principles one parallel paradigm and one asynchronous principle they're kind of",
    "start": "211519",
    "end": "217840"
  },
  {
    "text": "work work the same way in dot net but they are a little bit different and we'll talk about that as well",
    "start": "217840",
    "end": "223599"
  },
  {
    "text": "what we really want to do here is that we want to go from an application that's blocking the user interface",
    "start": "223599",
    "end": "229840"
  },
  {
    "text": "to something that's no longer blocking the user interface and to do this we're going to introduce async and await we're",
    "start": "229840",
    "end": "235760"
  },
  {
    "text": "going to introduce the task parallel library and we're going to try write some code that's working really efficiently",
    "start": "235760",
    "end": "242239"
  },
  {
    "text": "that means we want to avoid too much work on the ui thread or the main thread of the application",
    "start": "242239",
    "end": "248720"
  },
  {
    "text": "we may not be working in a ui application but most of the time when we want to introduce the task parallel",
    "start": "248720",
    "end": "254799"
  },
  {
    "text": "library or async and await it really boils down to the fact that we have a ui application that we work in we want to",
    "start": "254799",
    "end": "261040"
  },
  {
    "text": "make the ui a little bit more responsive and allow the user to do more work while we are doing some heavy lifting",
    "start": "261040",
    "end": "267600"
  },
  {
    "text": "now there's one thing i want you to keep in mind and that's to avoid blocking asynchronous calls or asynchronous",
    "start": "267600",
    "end": "273040"
  },
  {
    "text": "operations if you ever have an asynchronous operation running in your application",
    "start": "273040",
    "end": "278320"
  },
  {
    "text": "never try to force that to give you a result without following the best practices and principles",
    "start": "278320",
    "end": "284800"
  },
  {
    "text": "so in terms of that android application that i had earlier that was rather unreliable how do we refactor this to",
    "start": "284800",
    "end": "291600"
  },
  {
    "text": "give the user a little bit of a better experience this will result in is an application",
    "start": "291600",
    "end": "297600"
  },
  {
    "text": "that still sort of blocks the ui but in a rather different manner",
    "start": "297600",
    "end": "303759"
  },
  {
    "text": "to the left hand side here i have an application where the operating system notices that there's a lot of work",
    "start": "303759",
    "end": "308880"
  },
  {
    "text": "happening on the ui thread it cannot determine if it's crashed or no longer",
    "start": "308880",
    "end": "313919"
  },
  {
    "text": "responding due to a deadlock or the fact that we're doing too much work in the wrong place so instead we want to provide the user",
    "start": "313919",
    "end": "320800"
  },
  {
    "text": "with some better user experience with a loading indicator now for an for a web app or for a mobile",
    "start": "320800",
    "end": "326880"
  },
  {
    "text": "application it maybe don't make any sense to allow the user to do more work at the same time while this data is",
    "start": "326880",
    "end": "332960"
  },
  {
    "text": "being processed but for a windows application that's a totally different story",
    "start": "332960",
    "end": "338080"
  },
  {
    "text": "to solve this and approach this problem and get a little bit of a better user experience we're going to introduce the",
    "start": "338080",
    "end": "343759"
  },
  {
    "text": "task para library this has been around for a rather long time",
    "start": "343759",
    "end": "348880"
  },
  {
    "text": "it was first introduced in dot net four so it's been there for a long time but it's still one of those things that",
    "start": "348880",
    "end": "354960"
  },
  {
    "text": "tend to confuse developers even myself learn things like past week i learned something new about the task",
    "start": "354960",
    "end": "361039"
  },
  {
    "text": "parallel library and how to use that in certain situations so there's still a lot to to discuss",
    "start": "361039",
    "end": "367440"
  },
  {
    "text": "around this and how we how we approach this it really means that when we use the task parallel library we",
    "start": "367440",
    "end": "374240"
  },
  {
    "text": "use that to simplify working with both concurrent as well as asynchronous code",
    "start": "374240",
    "end": "379919"
  },
  {
    "text": "so they group both the parallel programming as well as the asynchronous programming into the same library",
    "start": "379919",
    "end": "386400"
  },
  {
    "text": "there are some helpers in dot net that allow us to take a problem and divide that into smaller pieces using something",
    "start": "386400",
    "end": "392800"
  },
  {
    "text": "that they used to call the parallel extensions and that's a part of the task parallel library",
    "start": "392800",
    "end": "398880"
  },
  {
    "text": "now where they are different is where with asynchronous programming we can say that once you have all the",
    "start": "398880",
    "end": "404720"
  },
  {
    "text": "data available and you're done with your work i want to be notified that you have all",
    "start": "404720",
    "end": "409840"
  },
  {
    "text": "all that work done and i want to be able to subscribe to when there's a result available and there's a very nice api in net or",
    "start": "409840",
    "end": "417680"
  },
  {
    "text": "a library using the taskbar library here where we can say that i want to run some",
    "start": "417680",
    "end": "422880"
  },
  {
    "text": "work somewhere else now i'm passing an anonymous and or an anonymous method here using a lambda but this could be",
    "start": "422880",
    "end": "429680"
  },
  {
    "text": "pointing to any method or anything in my application that who responds with that delegate",
    "start": "429680",
    "end": "435199"
  },
  {
    "text": "what this will do is that it will look at do we have any threads available can we schedule this work to run now if not",
    "start": "435199",
    "end": "442400"
  },
  {
    "text": "it's going to be queued up to run a little bit later so there's a lot of smart stuff happening here in the background we",
    "start": "442400",
    "end": "449280"
  },
  {
    "text": "don't have to use the threading manually anymore and we don't have to worry too much about that",
    "start": "449280",
    "end": "454479"
  },
  {
    "text": "so the work is being distributed in a rather efficient manner it knows how many cores are available it knows how to",
    "start": "454479",
    "end": "460960"
  },
  {
    "text": "divide that across the different threads available in the application now",
    "start": "460960",
    "end": "466240"
  },
  {
    "text": "what's interesting with the task parallel library is that it doesn't actually spawn up a new thread always",
    "start": "466240",
    "end": "472479"
  },
  {
    "text": "it will have a pool of available threads and they will be reused among your different tasks that runs for your",
    "start": "472479",
    "end": "478560"
  },
  {
    "text": "different asynchronous operations that means if you're working with static data that may be may be available across",
    "start": "478560",
    "end": "485919"
  },
  {
    "text": "multiple different asynchronous operations so what to take away from that is that you should avoid using static data as",
    "start": "485919",
    "end": "493280"
  },
  {
    "text": "much as possible what it also allows us to do is to say that i want to subscribe to whenever",
    "start": "493280",
    "end": "499680"
  },
  {
    "text": "this work is done if i have this work scheduled on some thread i don't know if it's going to",
    "start": "499680",
    "end": "505280"
  },
  {
    "text": "execute now i don't know when that finishes maybe it's a long running operation that never finishes but i",
    "start": "505280",
    "end": "511039"
  },
  {
    "text": "still want to be notified whenever that succeeds fails or has a result available",
    "start": "511039",
    "end": "516399"
  },
  {
    "text": "that's what we where we introduce something called a continuation and the reason we have to know about",
    "start": "516399",
    "end": "523039"
  },
  {
    "text": "tasks in the task parallel library before we even look at async and await is because internally it all builds on",
    "start": "523039",
    "end": "529920"
  },
  {
    "text": "these principles and the task of course allows us to return data as well it wouldn't make",
    "start": "529920",
    "end": "536000"
  },
  {
    "text": "much sense to just allow us to schedule work somewhere without having something returned",
    "start": "536000",
    "end": "541040"
  },
  {
    "text": "now the the difference between these two different um calls here",
    "start": "541040",
    "end": "546080"
  },
  {
    "text": "is that with the second one here i'm simply saying run some work and when this work is done i want you to return",
    "start": "546080",
    "end": "551600"
  },
  {
    "text": "some data and i and whoever subscribes to whenever this work is done can then get that that string back to them",
    "start": "551600",
    "end": "559279"
  },
  {
    "text": "so let's jump into visual studio and have a little bit of a demo of how tasks work",
    "start": "559279",
    "end": "565200"
  },
  {
    "text": "i have an application a windows application that's not really working as efficiently as",
    "start": "565200",
    "end": "570240"
  },
  {
    "text": "possible if i run this just to show you exactly what the application is doing",
    "start": "570240",
    "end": "575279"
  },
  {
    "text": "you don't have to know anything about wpf really you just it's just a ui application with a button really when i",
    "start": "575279",
    "end": "581440"
  },
  {
    "text": "click run here it locks up i can't move the window it's doing a bit of work on the ui thread and i want to improve this",
    "start": "581440",
    "end": "588320"
  },
  {
    "text": "then it's printing something out to my window here the actual ui interaction isn't as",
    "start": "588320",
    "end": "594000"
  },
  {
    "text": "important as what's going on here so because i'm running some work here when i'm clicking that button i run this",
    "start": "594000",
    "end": "600800"
  },
  {
    "text": "method called do something naming things is hard i try to come up with a better name but",
    "start": "600800",
    "end": "606240"
  },
  {
    "text": "that's what it is so what's happening in here is that we are just updating the text we're then doing some or simulating",
    "start": "606240",
    "end": "613600"
  },
  {
    "text": "some work by introducing a thread.sleep this could be a database called it could be an operation or an algorithm that's",
    "start": "613600",
    "end": "620320"
  },
  {
    "text": "taking a bit of time maybe i'm using bubble sorts to sort a really large array you know i'm not following the",
    "start": "620320",
    "end": "625839"
  },
  {
    "text": "best practices here so what i want to do here is that i want to offload this work to somewhere else",
    "start": "625839",
    "end": "631200"
  },
  {
    "text": "and the first thing that you might try to make this more performant if we just",
    "start": "631200",
    "end": "636640"
  },
  {
    "text": "make that smaller again is that we say that i want to run this work somewhere else",
    "start": "636640",
    "end": "642959"
  },
  {
    "text": "and i can say run all of this this this method somewhere else schedule that work to run on a different thread",
    "start": "642959",
    "end": "649120"
  },
  {
    "text": "if i run this i click run here the application is much better it it doesn't work actually",
    "start": "649120",
    "end": "657120"
  },
  {
    "text": "there's no result that's a little bit odd isn't it so even though when i click run here the",
    "start": "657120",
    "end": "662720"
  },
  {
    "text": "application behaves better it feels more efficient but where's the result that was supposed to come out to my window",
    "start": "662720",
    "end": "668480"
  },
  {
    "text": "here now what's actually happening here is that i i did offload this work so the method is executing",
    "start": "668480",
    "end": "674560"
  },
  {
    "text": "but if i run it with the debugger attached you'll notice here that we are going to",
    "start": "674560",
    "end": "679680"
  },
  {
    "text": "get an exception because i'm trying to update the ui from somewhere where i shouldn't",
    "start": "679680",
    "end": "685360"
  },
  {
    "text": "so we'll see here that i got an exception telling me that you try to change the ui from a thread that doesn't",
    "start": "685360",
    "end": "691760"
  },
  {
    "text": "own the ui and you're not allowed to do cross threading with the ui thread so we have to introduce work to",
    "start": "691760",
    "end": "697440"
  },
  {
    "text": "communicate back to the ui and and this is where it becomes a little bit hard to work with because we have a few",
    "start": "697440",
    "end": "703760"
  },
  {
    "text": "different options here either we go ahead and we",
    "start": "703760",
    "end": "708800"
  },
  {
    "text": "we do update the ui accordingly so we could say that this is very very wpf",
    "start": "708800",
    "end": "713839"
  },
  {
    "text": "specific it's different for xamarin maui and other types of platforms as well but i could say that i want to update the ui",
    "start": "713839",
    "end": "721360"
  },
  {
    "text": "and to do that i have to communicate back to the ui and schedule some work on the ui",
    "start": "721360",
    "end": "726480"
  },
  {
    "text": "thread we can do like this here and then i'll copy this again",
    "start": "726480",
    "end": "734320"
  },
  {
    "text": "and of course this code isn't going to be very efficient to work with because it's not very",
    "start": "734959",
    "end": "741440"
  },
  {
    "text": "it's not very maintainable let's run this here and see if it works better",
    "start": "741440",
    "end": "747600"
  },
  {
    "text": "and look at that after two seconds now hopefully it says hello in dc from philip so i made some changes to the",
    "start": "747600",
    "end": "753440"
  },
  {
    "text": "application i can click run here again and i can move the window and everything feels better i could allow the user to work with other things in the",
    "start": "753440",
    "end": "759519"
  },
  {
    "text": "application but there were a few things that happened here that are",
    "start": "759519",
    "end": "764720"
  },
  {
    "text": "interesting and annoying first of all the application didn't crash i wasn't aware of that exception that i just got",
    "start": "764720",
    "end": "770959"
  },
  {
    "text": "here i tried to update the ui from a place where i was not allowed to but that exception wasn't really bubbled",
    "start": "770959",
    "end": "777120"
  },
  {
    "text": "back to the application so maybe while a tester tests the application they don't notice that",
    "start": "777120",
    "end": "783440"
  },
  {
    "text": "something isn't working accordingly so first thing the task will swallow any",
    "start": "783440",
    "end": "789279"
  },
  {
    "text": "exceptions that you get in order for you to know that there was an exception you have to subscribe or add a",
    "start": "789279",
    "end": "795360"
  },
  {
    "text": "continuation so let me show you what that looked like i can go back here to the top",
    "start": "795360",
    "end": "801360"
  },
  {
    "text": "and say that i want to continue with some work",
    "start": "801360",
    "end": "806079"
  },
  {
    "text": "and in here actually this gets the the task that's just completed",
    "start": "808399",
    "end": "814120"
  },
  {
    "text": "so i'd have to check in here if i got an exception i could say that if the task",
    "start": "816480",
    "end": "822000"
  },
  {
    "text": "is faulted i'm sorry if the task is faulted i can do something with that and now all of a",
    "start": "822000",
    "end": "828880"
  },
  {
    "text": "sudden the application is starting to get much harder to work with and this is the old approach before they introduce",
    "start": "828880",
    "end": "834800"
  },
  {
    "text": "async and await but we still have to understand this because in some cases introducing async at a weight might",
    "start": "834800",
    "end": "841680"
  },
  {
    "text": "introduce unnecessary code but we'll get to that later on when we talk about what actually happens when we introduce those",
    "start": "841680",
    "end": "847360"
  },
  {
    "text": "keywords so if i throw an exception in this method here just to give you an example",
    "start": "847360",
    "end": "853279"
  },
  {
    "text": "bro new exception and we run this here i'll add",
    "start": "853279",
    "end": "858320"
  },
  {
    "text": "a breakpoint i'll click run in the application and",
    "start": "858320",
    "end": "863920"
  },
  {
    "text": "hopefully this is going to throw the exception of course since i have the debugger attached it sees this exception and then",
    "start": "863920",
    "end": "869839"
  },
  {
    "text": "we'll be in this continuation here and it's going to tell us that the thread that we just completed faulted",
    "start": "869839",
    "end": "876480"
  },
  {
    "text": "and there's an exception available and we can subscribe to that and we can handle this okay so what happened when we introduced",
    "start": "876480",
    "end": "883279"
  },
  {
    "text": "this continue with method here let's uh make this smaller and just think about what happened here for a",
    "start": "883279",
    "end": "889519"
  },
  {
    "text": "second so we introduced a continuation to be able to subscribe to when work is done",
    "start": "889519",
    "end": "894720"
  },
  {
    "text": "and that's pretty good but what happens if this continuation fails what happens if we have an exception in",
    "start": "894720",
    "end": "900720"
  },
  {
    "text": "this actual continuation right if i do this through new exception what happens if we do this",
    "start": "900720",
    "end": "908160"
  },
  {
    "text": "will that exception be thrown back to the ui let's give it a go and see what happens",
    "start": "908160",
    "end": "914480"
  },
  {
    "text": "i'll click run here nothing happens in the ui nothing happens in the application we didn't get an exception",
    "start": "914480",
    "end": "919760"
  },
  {
    "text": "thrown here so what happened here is that the continuation is also going to swallow",
    "start": "919760",
    "end": "925920"
  },
  {
    "text": "your exceptions and this is sometimes a bit confusing so how would i capture that",
    "start": "925920",
    "end": "932880"
  },
  {
    "text": "well if we look at what the continuation returns we can see that this also returns a task",
    "start": "932880",
    "end": "939680"
  },
  {
    "text": "so how do i subscribe to when the continuation completes i add another continue with",
    "start": "939680",
    "end": "946880"
  },
  {
    "text": "all right this code is starting to get really efficient",
    "start": "946959",
    "end": "952480"
  },
  {
    "text": "all right so this is going to be the continuation task that just completed and what if that fails",
    "start": "952480",
    "end": "959519"
  },
  {
    "text": "i'll have to add another continue with i don't really want to do that",
    "start": "959519",
    "end": "965839"
  },
  {
    "text": "i don't particularly like that approach so the problem here is that this pattern doesn't allow me to very",
    "start": "965839",
    "end": "972560"
  },
  {
    "text": "efficiently write the type of code that i want to the coder starts to get a little bit hard to maintain and hard to",
    "start": "972560",
    "end": "978160"
  },
  {
    "text": "work with while i still solve my problem and i moved or offloaded some work to somewhere else",
    "start": "978160",
    "end": "984399"
  },
  {
    "text": "it wasn't very efficient now i want to show you an alternative way that we could solve this if we just go back a",
    "start": "984399",
    "end": "989839"
  },
  {
    "text": "little bit here i'll call do do something from this method here and instead of",
    "start": "989839",
    "end": "997040"
  },
  {
    "text": "of offloading that entire method to a different thread i'm going to go into the root of the problem",
    "start": "997040",
    "end": "1002560"
  },
  {
    "text": "i'll get rid of these exceptions and i didn't particularly like this dispatcher.invoke",
    "start": "1002560",
    "end": "1008639"
  },
  {
    "text": "i'll leave that as well the problem was the thread.sleep here this is really the work that i want to offload somewhere",
    "start": "1008639",
    "end": "1014240"
  },
  {
    "text": "else so if i if i just wrap this in a task.run",
    "start": "1014240",
    "end": "1020839"
  },
  {
    "text": "and i run the application it's going to run the next line of code just immediately which is problematic because",
    "start": "1024559",
    "end": "1031120"
  },
  {
    "text": "that's not what i want i'd like to run all of the code whenever that thread.sleep",
    "start": "1031120",
    "end": "1036839"
  },
  {
    "text": "finishes and to do that i'd have to subscribe to whenever that continues or whenever that completes",
    "start": "1036839",
    "end": "1043918"
  },
  {
    "text": "so i could say that i want to continue with all of that",
    "start": "1043919",
    "end": "1048400"
  },
  {
    "text": "after this thread out sleep is completed right",
    "start": "1049440",
    "end": "1054480"
  },
  {
    "text": "looks a little bit better but still it's not the most beautiful approach and i still have the the issue of what happens",
    "start": "1054480",
    "end": "1061280"
  },
  {
    "text": "if there's an exception and that's what we're going to fix when we introduce the async and away keywords we're going to",
    "start": "1061280",
    "end": "1066480"
  },
  {
    "text": "make this a little bit more more pretty and beautiful when i whenever i invoke the ui from a",
    "start": "1066480",
    "end": "1072160"
  },
  {
    "text": "different thread in a task or if i'm using the old threading i always have to go back or or use something called a",
    "start": "1072160",
    "end": "1078640"
  },
  {
    "text": "synchronization context which this here the dispatcher builds on it inherits from something called a synchronization",
    "start": "1078640",
    "end": "1084400"
  },
  {
    "text": "context which is what you use to communicate back to that original context and i still have to use the",
    "start": "1084400",
    "end": "1090840"
  },
  {
    "text": "dispatcher.invoke here even if i'm inside the continuation because with the task parallel library",
    "start": "1090840",
    "end": "1096640"
  },
  {
    "text": "whenever you continue off the finished task you will be on a different thread",
    "start": "1096640",
    "end": "1102160"
  },
  {
    "text": "you never know which thread you are going to execute on maybe if you're lucky enough it would actually reuse the ui thread but that's",
    "start": "1102160",
    "end": "1108880"
  },
  {
    "text": "very unlikely actually it's never going to happen but in theory it could so",
    "start": "1108880",
    "end": "1114480"
  },
  {
    "text": "we want to avoid this here and we have a few more problems that we can we're going to approach when we've introduced",
    "start": "1114480",
    "end": "1120320"
  },
  {
    "text": "the async and away keywords so that's a little bit of background to the the tasks and how you how you work",
    "start": "1120320",
    "end": "1126799"
  },
  {
    "text": "with them there's a few considerations to take away from this here one is that we should be really careful when we wrap",
    "start": "1126799",
    "end": "1133840"
  },
  {
    "text": "code or wrap method calls in a task.run instead we're gonna we should try to do what i did in the second part of this",
    "start": "1133840",
    "end": "1140320"
  },
  {
    "text": "demo here where i went into the root of the problem i found what was causing the application to be slow and that was in",
    "start": "1140320",
    "end": "1146880"
  },
  {
    "text": "this case a thread.sleep so i wrapped that particular call inside my task.run",
    "start": "1146880",
    "end": "1152400"
  },
  {
    "text": "and i try to make my code a bit more asynchronous or or parallelize it if you",
    "start": "1152400",
    "end": "1157520"
  },
  {
    "text": "like and again we didn't look at this but you should keep in mind that whenever you work with",
    "start": "1157520",
    "end": "1162720"
  },
  {
    "text": "thread static data that is very unreliable as you could be reusing threads across the thread pool",
    "start": "1162720",
    "end": "1169440"
  },
  {
    "text": "there's something else you can use and that's async local all right so",
    "start": "1169440",
    "end": "1174880"
  },
  {
    "text": "another thing to to leave you with here is that we should always validate the tasks so as you saw here the task will",
    "start": "1174880",
    "end": "1180640"
  },
  {
    "text": "swallow all your exceptions and you wouldn't know that there was an exception unless you subscribe to it",
    "start": "1180640",
    "end": "1186799"
  },
  {
    "text": "unless you add a continue with you won't know if there was a fault state so we're going to fix this using async",
    "start": "1186799",
    "end": "1192880"
  },
  {
    "text": "and await and before we look at async and wait i i did mention earlier that",
    "start": "1192880",
    "end": "1198720"
  },
  {
    "text": "parallel extensions that are also available in net that we have here",
    "start": "1198720",
    "end": "1204000"
  },
  {
    "text": "so the parallel.4 here this builds on top of the task parallel library what it",
    "start": "1204000",
    "end": "1209440"
  },
  {
    "text": "will do when i run parallel.4 here it will look at how many cores are available or how many threads are",
    "start": "1209440",
    "end": "1214720"
  },
  {
    "text": "available and i can configure that to for instance only use two threads to not consume all my resources if i don't want",
    "start": "1214720",
    "end": "1221120"
  },
  {
    "text": "to do that and the reason this is wrapped in a task.run is because it also uses the",
    "start": "1221120",
    "end": "1226880"
  },
  {
    "text": "current thread to do its operation it's a blocking call so if you use parallel four or parallel",
    "start": "1226880",
    "end": "1232720"
  },
  {
    "text": "for each or parallel dot invoke that's going to block the current thread until that operation completes",
    "start": "1232720",
    "end": "1238960"
  },
  {
    "text": "so this is a way to i would say combine asynchronous and parallel principles",
    "start": "1238960",
    "end": "1244000"
  },
  {
    "text": "so you could say run this parallel process on a different thread or multiple different threads and let me know when there's a result available",
    "start": "1244000",
    "end": "1251280"
  },
  {
    "text": "all right so enough talking about the task parallel library and only using the task the raw state that we've looked at",
    "start": "1251280",
    "end": "1257360"
  },
  {
    "text": "let's now introduce the async and await keywords these are really just synthetic sugar or",
    "start": "1257360",
    "end": "1263600"
  },
  {
    "text": "rather contextual keywords that means that they are looking at your method and looking at where you place the keywords",
    "start": "1263600",
    "end": "1270000"
  },
  {
    "text": "in the code and it's going to rewrite your entire application so to speak or the method that you add it to it's going",
    "start": "1270000",
    "end": "1276400"
  },
  {
    "text": "to add a lot of generated code behind the scenes and depending on who you ask",
    "start": "1276400",
    "end": "1281919"
  },
  {
    "text": "some say that it doesn't really matter and if you're working in iot or really small let's say raspberry pi's or",
    "start": "1281919",
    "end": "1288480"
  },
  {
    "text": "something that's very very or that energy that needs to be energy efficient for those developers it",
    "start": "1288480",
    "end": "1294240"
  },
  {
    "text": "certainly does matter you want to make sure that the application runs efficiently and in some cases that means",
    "start": "1294240",
    "end": "1300080"
  },
  {
    "text": "not introducing async n08 at all because generated code means that it's going to require more cpu power more cpu",
    "start": "1300080",
    "end": "1307679"
  },
  {
    "text": "power means more battery and so forth so async can await really what they're",
    "start": "1307679",
    "end": "1312880"
  },
  {
    "text": "doing or the purpose is to hide complexity i would say that even if this was a very",
    "start": "1312880",
    "end": "1318480"
  },
  {
    "text": "simple example that i showed with the task parallel library it looked a bit complex it looked more complex than it",
    "start": "1318480",
    "end": "1324240"
  },
  {
    "text": "had to i really just wanted to say that take this piece of code or run that somewhere",
    "start": "1324240",
    "end": "1329600"
  },
  {
    "text": "else and then run the rest of it when that's done there has to be a better way to do that and obviously async and await",
    "start": "1329600",
    "end": "1336159"
  },
  {
    "text": "is the answer to that it also is built for readability we want",
    "start": "1336159",
    "end": "1341520"
  },
  {
    "text": "to make sure that the application is maintainable and more readable but that also means that it's going to be more error prone if we don't fully",
    "start": "1341520",
    "end": "1348720"
  },
  {
    "text": "understand the tasks parallel library how it works with the continuation works",
    "start": "1348720",
    "end": "1353760"
  },
  {
    "text": "on a different thread or that it swallows exceptions the async and away keywords is not going",
    "start": "1353760",
    "end": "1359440"
  },
  {
    "text": "to help you it's going to make it even more confusing i've seen many projects or many",
    "start": "1359440",
    "end": "1364640"
  },
  {
    "text": "developers just use async and have it all over the place in some cases it just works it's it works just as they expect",
    "start": "1364640",
    "end": "1371679"
  },
  {
    "text": "to but when it doesn't it's very confusing and can be very hard to understand why",
    "start": "1371679",
    "end": "1377200"
  },
  {
    "text": "it doesn't work as expected let's take this very simple method as an",
    "start": "1377200",
    "end": "1382880"
  },
  {
    "text": "example now the first thing you'll notice here is that i've increased the async keyword",
    "start": "1382880",
    "end": "1388240"
  },
  {
    "text": "when i do that you notice that i don't have to return anything from this method that's",
    "start": "1388240",
    "end": "1393679"
  },
  {
    "text": "automatically taken care of by the compiler and that's to allow me to track the state of the current asynchronous",
    "start": "1393679",
    "end": "1400840"
  },
  {
    "text": "operation but marking this as async doesn't have any impact whatsoever on",
    "start": "1400840",
    "end": "1406799"
  },
  {
    "text": "where the work is being executed or what happens adding async simply just wraps my entire",
    "start": "1406799",
    "end": "1413039"
  },
  {
    "text": "code somewhere else it introduces something known as a state machine that we're going to look at later to fully",
    "start": "1413039",
    "end": "1418400"
  },
  {
    "text": "understand the complexity so always use async and task together",
    "start": "1418400",
    "end": "1424880"
  },
  {
    "text": "and then when you want some asynchronous operation introduced in that method you have the await keyword in front of",
    "start": "1424880",
    "end": "1431120"
  },
  {
    "text": "whatever operation you are waiting to finish or waiting to complete now the await keyword here is is in",
    "start": "1431120",
    "end": "1438320"
  },
  {
    "text": "front of your task this is the task that delay which is kind of equivalent to doing a thread.sleep and wrapping that",
    "start": "1438320",
    "end": "1444480"
  },
  {
    "text": "in a task.run it just simulates that some operation could be a web call could be reading something from disk or some",
    "start": "1444480",
    "end": "1451120"
  },
  {
    "text": "other asynchronous operation the await keyword here when that is introduced it knows how to run the rest",
    "start": "1451120",
    "end": "1458799"
  },
  {
    "text": "of the code after this line and come back to that whenever the asynchronous operation is completed",
    "start": "1458799",
    "end": "1465679"
  },
  {
    "text": "so actually what the away keyword does is that it marks a continuation instead of having to wrap that entire code block",
    "start": "1465679",
    "end": "1471919"
  },
  {
    "text": "in a continue with it just takes care of that for us but i guess what's even more interesting",
    "start": "1471919",
    "end": "1478400"
  },
  {
    "text": "is when it comes to how do we make sure that we validate the tasks and that they complete it successfully",
    "start": "1478400",
    "end": "1484320"
  },
  {
    "text": "this is also handled by the await keyword it will validate that you have a success or failure if there is an",
    "start": "1484320",
    "end": "1490000"
  },
  {
    "text": "exception in any of the tasks that you are waiting for or awaiting it will tell you it will throw that",
    "start": "1490000",
    "end": "1495440"
  },
  {
    "text": "exception back to whoever calls that method and it then returns back to",
    "start": "1495440",
    "end": "1502080"
  },
  {
    "text": "whoever calls method and this is where it becomes a little bit more confusing so whenever it sees the await keyword",
    "start": "1502080",
    "end": "1507840"
  },
  {
    "text": "and it's waiting for an asynchronous operation to complete the control is returned back to whoever called the",
    "start": "1507840",
    "end": "1513360"
  },
  {
    "text": "method that means that they can continue doing some work and then when this asynchronous operation is completed it",
    "start": "1513360",
    "end": "1519279"
  },
  {
    "text": "will schedule that continuation to execute you should always aim to use the async",
    "start": "1519279",
    "end": "1525679"
  },
  {
    "text": "and await keywords together you cannot use the await keyword alone but for some reason you can use the",
    "start": "1525679",
    "end": "1532000"
  },
  {
    "text": "async keyword alone which doesn't make any more any sense at all it simply just introduces complexity",
    "start": "1532000",
    "end": "1539279"
  },
  {
    "text": "so let's have a look at how we can improve the code that we had earlier by introducing async and await",
    "start": "1539279",
    "end": "1545840"
  },
  {
    "text": "so there are a few things that we want to do here to make this a little bit better really i want to get rid of this dispatcher",
    "start": "1545840",
    "end": "1552640"
  },
  {
    "text": "here and i want to make sure that whenever there's an exception i want to be able to validate that that didn't",
    "start": "1552640",
    "end": "1558080"
  },
  {
    "text": "happen so we have a few different options either if we if we go back to",
    "start": "1558080",
    "end": "1564320"
  },
  {
    "text": "we'll remove this continuation because we don't need that anymore the result is what's going to come out of our",
    "start": "1564320",
    "end": "1569520"
  },
  {
    "text": "asynchronous operation let's just imagine that after thread.sleep this here is going to be returned",
    "start": "1569520",
    "end": "1576320"
  },
  {
    "text": "so i'm going to refactor this just slightly to give you an idea of what's going to happen here so let's say return hello from philip",
    "start": "1576320",
    "end": "1584000"
  },
  {
    "text": "and really what i want to do here let's get rid of all of that",
    "start": "1584000",
    "end": "1589919"
  },
  {
    "text": "really what i want to do here is that i want to run this code block here somewhere else and when that is done i'm going to get some data back",
    "start": "1592400",
    "end": "1599279"
  },
  {
    "text": "so i guess the first question is how do we get the data or the result out of that asynchronous operation",
    "start": "1599279",
    "end": "1605760"
  },
  {
    "text": "well i can capture the task that's executing to say that give me the the task",
    "start": "1605760",
    "end": "1612400"
  },
  {
    "text": "and then i could say task.result which is one of the first thing people tend to do and this is",
    "start": "1612400",
    "end": "1617840"
  },
  {
    "text": "where things blow up because this is going to in most cases deadlock it's going to lock the application so it",
    "start": "1617840",
    "end": "1623520"
  },
  {
    "text": "doesn't work anymore and the reason for that is because calling dot result is a blocking operation you should only call a result",
    "start": "1623520",
    "end": "1630799"
  },
  {
    "text": "whenever you know that the asynchronous operation completed which can be tricky",
    "start": "1630799",
    "end": "1636720"
  },
  {
    "text": "so how do we get the result out of this task in fact this is where we can introduce the await keyword",
    "start": "1636720",
    "end": "1643279"
  },
  {
    "text": "so we can say await the task",
    "start": "1643279",
    "end": "1649200"
  },
  {
    "text": "this will do a few things it will validate that the operation completed successfully it will make sure there",
    "start": "1649200",
    "end": "1654399"
  },
  {
    "text": "were no exceptions and it will also give us the result so we can capture this in a local variable",
    "start": "1654399",
    "end": "1661760"
  },
  {
    "text": "and then we can set that to the ui so far this looks much better than what",
    "start": "1661760",
    "end": "1667679"
  },
  {
    "text": "we had earlier and what's going to happen here is that we are starting off as a sequence",
    "start": "1667679",
    "end": "1672880"
  },
  {
    "text": "operation this operation starts off and it runs on a different thread for two seconds after",
    "start": "1672880",
    "end": "1678880"
  },
  {
    "text": "those two seconds are completed we are going to be back at this line here to be able to update the ui",
    "start": "1678880",
    "end": "1684880"
  },
  {
    "text": "so how come i don't need the dispatcher.invoke anymore because what the await keyword also does is ensure",
    "start": "1684880",
    "end": "1691200"
  },
  {
    "text": "that we are back to the original calling thread i can configure that to tell it to just",
    "start": "1691200",
    "end": "1696720"
  },
  {
    "text": "continue working on the other thread by introducing a configure await",
    "start": "1696720",
    "end": "1702480"
  },
  {
    "text": "which is what you might do in apis if you don't care about going back to the original thread",
    "start": "1702480",
    "end": "1708080"
  },
  {
    "text": "but we don't have to talk about that because it gets a little bit confusing so now",
    "start": "1708080",
    "end": "1714320"
  },
  {
    "text": "i've introduced the the the await keyword but i've also already made this async that's quite work um sorry",
    "start": "1714320",
    "end": "1720799"
  },
  {
    "text": "the async keyword should also be be added here at the top",
    "start": "1720799",
    "end": "1725840"
  },
  {
    "text": "so i have the async and the weight keywords together and i did mention earlier that i do want to always have a",
    "start": "1726960",
    "end": "1732880"
  },
  {
    "text": "task here because if i use async void this may cause some issues that we're gonna look at later on as well",
    "start": "1732880",
    "end": "1740240"
  },
  {
    "text": "just trust me that it's not a good idea to do async void so now i've marked this as asynctask we",
    "start": "1740240",
    "end": "1747120"
  },
  {
    "text": "have some asynchronous operation running somewhere else and it's going to return back to the caller whenever those two seconds are up let's actually increase",
    "start": "1747120",
    "end": "1753679"
  },
  {
    "text": "this to five seconds just so i can illustrate exactly what's going to happen here so now whoever's calling this here",
    "start": "1753679",
    "end": "1760720"
  },
  {
    "text": "we are returning a task here automatically which is a way to track the asynchronous operation in reality",
    "start": "1760720",
    "end": "1766159"
  },
  {
    "text": "it's a way for me to track whenever that thread.sleep is completed or that operation that i've offloaded somewhere",
    "start": "1766159",
    "end": "1771760"
  },
  {
    "text": "else so the async keyword introduces a way for me to track this and automatically returns this task for us",
    "start": "1771760",
    "end": "1779039"
  },
  {
    "text": "so in order for us to validate this the the visual studio here will tell us that",
    "start": "1779039",
    "end": "1784080"
  },
  {
    "text": "this here should probably be awaited because it returns a task if we don't we",
    "start": "1784080",
    "end": "1789360"
  },
  {
    "text": "might not want to do this we might want to do a fire and forget and to get oops sorry and to get rid of the the compiler",
    "start": "1789360",
    "end": "1796159"
  },
  {
    "text": "warning we can discard that to simply say that i don't care just run this and i don't really want to track this work",
    "start": "1796159",
    "end": "1802320"
  },
  {
    "text": "at all this is the same as saying i don't care if there's any exceptions just run the",
    "start": "1802320",
    "end": "1807360"
  },
  {
    "text": "task if it completes fine if it doesn't who cares but i care",
    "start": "1807360",
    "end": "1813200"
  },
  {
    "text": "so the way that i need to approach this is i need to introduce the await keyword to await this",
    "start": "1813200",
    "end": "1819200"
  },
  {
    "text": "but to do that i also have to add the async keyword and since this is a delegate that needs",
    "start": "1819200",
    "end": "1824880"
  },
  {
    "text": "to correspond with the click event handler i cannot change this to a task",
    "start": "1824880",
    "end": "1830399"
  },
  {
    "text": "right then my application will no longer work",
    "start": "1830399",
    "end": "1836159"
  },
  {
    "text": "let's keep this as async void for now the only purpose where you would ever use async void is for click event",
    "start": "1836159",
    "end": "1841279"
  },
  {
    "text": "handlers all right so if we if we if we run this actually let's do this",
    "start": "1841279",
    "end": "1847039"
  },
  {
    "text": "for task is equal to this and then let's do debug.text",
    "start": "1847039",
    "end": "1854559"
  },
  {
    "text": "plus equals to updating or loading and then we'll do away task",
    "start": "1854559",
    "end": "1861760"
  },
  {
    "text": "so now we are going to start off do something we're going to grab that task and that's going to run somewhere else then i'm going to update the ui and",
    "start": "1862399",
    "end": "1869039"
  },
  {
    "text": "we'll see what happens when we step through the application",
    "start": "1869039",
    "end": "1873360"
  },
  {
    "text": "i'm going to click the button it's going to get rid of all of this noise here",
    "start": "1874559",
    "end": "1880559"
  },
  {
    "text": "let's go into do something let's click down here now we're going to start off this five",
    "start": "1880559",
    "end": "1885760"
  },
  {
    "text": "second work to run somewhere else and now we see the await keyword and notice what happens when i step to the",
    "start": "1885760",
    "end": "1891440"
  },
  {
    "text": "next line here actually it let's do that again i need another",
    "start": "1891440",
    "end": "1898398"
  },
  {
    "text": "i need another breakpoint",
    "start": "1900480",
    "end": "1903840"
  },
  {
    "text": "let's click run let's go into this method step through this it sees the weight keyword and now what happens is that it's going to go up to run this",
    "start": "1905679",
    "end": "1912320"
  },
  {
    "text": "line in the previous method that called this here so until it sees the await keyword it",
    "start": "1912320",
    "end": "1917600"
  },
  {
    "text": "doesn't wait for that to be done using a weight doesn't mean that it waits in this particular spot until that's done",
    "start": "1917600",
    "end": "1924399"
  },
  {
    "text": "it means that it schedules a continuation behind the scenes it's going to also capture the current thread",
    "start": "1924399",
    "end": "1930159"
  },
  {
    "text": "it's going to use that capture thread to then schedule work back on that original thread so if i press f10 here after",
    "start": "1930159",
    "end": "1937039"
  },
  {
    "text": "about five seconds hopefully after five seconds this is",
    "start": "1937039",
    "end": "1942799"
  },
  {
    "text": "going to complete and it updated with that result as well",
    "start": "1942799",
    "end": "1948600"
  },
  {
    "text": "just to show that again let's click run go into the method run through this here",
    "start": "1949200",
    "end": "1956080"
  },
  {
    "text": "awaits that and then after that is done it goes back and updates the ui and",
    "start": "1956080",
    "end": "1962159"
  },
  {
    "text": "everything worked without any dispatchers and or any cross threading that i had to do at all now if i were to",
    "start": "1962159",
    "end": "1967519"
  },
  {
    "text": "introduce this con configure await method call that you might see a lot of people",
    "start": "1967519",
    "end": "1973039"
  },
  {
    "text": "recommend doing i would have a lot more issues this application wouldn't work as as expected because that would mean that",
    "start": "1973039",
    "end": "1979279"
  },
  {
    "text": "i don't care about which thread i'm coming back to so just keep that in the back of your head that whenever someone",
    "start": "1979279",
    "end": "1985279"
  },
  {
    "text": "recommends you to add configure await that's where you don't care about updating the ui or you don't care about",
    "start": "1985279",
    "end": "1991360"
  },
  {
    "text": "the the original thread when you're back in the continuation so this code here honestly this code",
    "start": "1991360",
    "end": "1997760"
  },
  {
    "text": "looks a lot better than what we had earlier and i also mentioned that this will allow us",
    "start": "1997760",
    "end": "2003600"
  },
  {
    "text": "to validate that there was a wasn't any exceptions so what happens if i throw an exception here",
    "start": "2003600",
    "end": "2009600"
  },
  {
    "text": "throw new exception of course if i run this with the",
    "start": "2009600",
    "end": "2015360"
  },
  {
    "text": "debugger hopefully the application is going to crash",
    "start": "2015360",
    "end": "2021519"
  },
  {
    "text": "click f5 here and we can see here on the await task it knows that this through an exception",
    "start": "2022000",
    "end": "2029200"
  },
  {
    "text": "so it's only when i do a wait that it validates that that operation completed successfully and then here what what",
    "start": "2029200",
    "end": "2035679"
  },
  {
    "text": "happens here is that it's going to be thrown back to whoever called the the click event handler which is the ui",
    "start": "2035679",
    "end": "2041519"
  },
  {
    "text": "which means that the application crashed so could of course now add a dry catch around this and just make it a little",
    "start": "2041519",
    "end": "2047039"
  },
  {
    "text": "bit better and tidier but let's leave it like this for now",
    "start": "2047039",
    "end": "2052638"
  },
  {
    "text": "and let's go into talking about the the state machine i think it's important to understand",
    "start": "2052639",
    "end": "2058320"
  },
  {
    "text": "what happens internally when we introduce these keywords and what happens when we introduce the async keyword is that it generates one of",
    "start": "2058320",
    "end": "2064480"
  },
  {
    "text": "these things called a state machine it's really just a way to ask if we are completed",
    "start": "2064480",
    "end": "2069760"
  },
  {
    "text": "it's not a loop that continuously continuously checks if we are done it's really smart internally because it",
    "start": "2069760",
    "end": "2076079"
  },
  {
    "text": "schedules itself onto the next continuation so it runs in a synchronous operation then adds itself to whenever",
    "start": "2076079",
    "end": "2082638"
  },
  {
    "text": "that is done and then it checks the status and goes on to run the next asynchronous operation in line that",
    "start": "2082639",
    "end": "2088398"
  },
  {
    "text": "means that we could have multiple tasks in the same method we could have multiple awaits all in the same place and the state",
    "start": "2088399",
    "end": "2094800"
  },
  {
    "text": "machine would take care of running all of those at the appropriate time",
    "start": "2094800",
    "end": "2100000"
  },
  {
    "text": "it's also what really handles the potential results and the potential problems so all of that is being handled",
    "start": "2100000",
    "end": "2106320"
  },
  {
    "text": "internally and it also makes sure that the code after the await keyword is executed on the proper thread it makes",
    "start": "2106320",
    "end": "2113040"
  },
  {
    "text": "sure that it executes the proper i guess the proper continuation at the right time",
    "start": "2113040",
    "end": "2118720"
  },
  {
    "text": "so then the async keyword what does that really do well it does generate this",
    "start": "2118720",
    "end": "2123760"
  },
  {
    "text": "state machine which means that it moves the entire method body and it kind of obfuscates that if you",
    "start": "2123760",
    "end": "2129200"
  },
  {
    "text": "would in a completely new class that handles all of these different states so if we again look at this very simple",
    "start": "2129200",
    "end": "2135599"
  },
  {
    "text": "example which is a pre-compilation i haven't compiled the application it's a very simple application it",
    "start": "2135599",
    "end": "2141359"
  },
  {
    "text": "declares a variable called x has a task a delay again could be anything",
    "start": "2141359",
    "end": "2146880"
  },
  {
    "text": "and then in the continuation after the await keyword we are asking to be back at the original thread on the thread on",
    "start": "2146880",
    "end": "2152960"
  },
  {
    "text": "whoever called run async it's that thread that we want to be back on there's nothing in this code here",
    "start": "2152960",
    "end": "2159760"
  },
  {
    "text": "that is running on another thread so even if i have the test of delay that's the first thing",
    "start": "2159760",
    "end": "2165040"
  },
  {
    "text": "that's being spawned off to a different thread and when i compile this we can see here that there's nothing here that starts a",
    "start": "2165040",
    "end": "2171440"
  },
  {
    "text": "thread there's nothing here that's just moving moving work to another place right",
    "start": "2171440",
    "end": "2177920"
  },
  {
    "text": "we have some generated code this is the generated state machine that runs but all of this runs on whoever calls this",
    "start": "2177920",
    "end": "2183760"
  },
  {
    "text": "this method so if you have slow code inside this method here",
    "start": "2183760",
    "end": "2189599"
  },
  {
    "text": "it's still going to be slow even if you add the async and the weight keywords you have to manually move that across to",
    "start": "2189599",
    "end": "2194960"
  },
  {
    "text": "a different thread so this here looks very different from what we had in in that pre-compilation",
    "start": "2194960",
    "end": "2200800"
  },
  {
    "text": "version it generates a state machine look here at the bottom where it says",
    "start": "2200800",
    "end": "2206160"
  },
  {
    "text": "that we can return this state the state machines task which is a kind of a way to track that work",
    "start": "2206160",
    "end": "2212800"
  },
  {
    "text": "so it just takes care of all of that for us and if we drill down into the implementation details of how this works",
    "start": "2212800",
    "end": "2218400"
  },
  {
    "text": "we're not going to be rebuilding the state machine because that doesn't help anyone but we can at least have a little",
    "start": "2218400",
    "end": "2223520"
  },
  {
    "text": "bit of a look at one of the places inside one of the methods that keeps track of this date",
    "start": "2223520",
    "end": "2228640"
  },
  {
    "text": "so we can see here that we have the variable declaration we have the task.delay",
    "start": "2228640",
    "end": "2234480"
  },
  {
    "text": "we have the we have a call here that says if you're not completed just return and it's going to add itself onto the",
    "start": "2234480",
    "end": "2240320"
  },
  {
    "text": "next tasks continuation so really what it's doing is that this task a delay here",
    "start": "2240320",
    "end": "2246960"
  },
  {
    "text": "this here it gets this a waiter and then it adds itself onto that continuation to run the state machine again whenever",
    "start": "2246960",
    "end": "2253920"
  },
  {
    "text": "that is done somewhat like that it works which is very clever and then at the bottom here we can see",
    "start": "2253920",
    "end": "2260079"
  },
  {
    "text": "that we have our debug.writeline which is going to be executed on that original thread",
    "start": "2260079",
    "end": "2265920"
  },
  {
    "text": "so the state machine is really clever it's trying its best and while this is a very simple example we just want a",
    "start": "2265920",
    "end": "2271760"
  },
  {
    "text": "weight keyword if we add more weights if we add more tasks in the same method this here is going to grow quite a lot",
    "start": "2271760",
    "end": "2278880"
  },
  {
    "text": "we can take a look at that soon now i've mentioned that we should avoid async void",
    "start": "2278880",
    "end": "2285920"
  },
  {
    "text": "and it is really bad like i i i can't stress enough how bad it is to use async",
    "start": "2285920",
    "end": "2290960"
  },
  {
    "text": "void in your applications because what happens is that in this case here how would we ever",
    "start": "2290960",
    "end": "2296720"
  },
  {
    "text": "track the work how would we ever know that the application that this this operation completed or",
    "start": "2296720",
    "end": "2302960"
  },
  {
    "text": "not like when i compile this here there's nothing that's returned from this method to allow me to track that the state",
    "start": "2302960",
    "end": "2309520"
  },
  {
    "text": "machine finished properly so what does the state machine do if that asynchronous operation that it's",
    "start": "2309520",
    "end": "2315440"
  },
  {
    "text": "tracking fails well to say the least if i ever drive a car",
    "start": "2315440",
    "end": "2320480"
  },
  {
    "text": "built on.net that uses async void don't put me in that car please because if that fails we're going to end",
    "start": "2320480",
    "end": "2327200"
  },
  {
    "text": "up having a disaster in the application so how do we fix that it's a quite easy fix but it means that we architecturally",
    "start": "2327200",
    "end": "2333839"
  },
  {
    "text": "need to think a little bit more about how we consume those methods because we need to change async void to",
    "start": "2333839",
    "end": "2340240"
  },
  {
    "text": "async task and while this change was rather simple",
    "start": "2340240",
    "end": "2345599"
  },
  {
    "text": "it makes a little bit of a difference in the application because now this might swallow an exception",
    "start": "2345599",
    "end": "2351839"
  },
  {
    "text": "anyone that's using this method now has to track that this work completed successfully so let's look at how bad",
    "start": "2351839",
    "end": "2357760"
  },
  {
    "text": "this is let's have a little bit of a look so if we if we make one simple change in",
    "start": "2357760",
    "end": "2366079"
  },
  {
    "text": "the application let's say that instead of this method do something being asynctask i can change this to async",
    "start": "2366079",
    "end": "2372880"
  },
  {
    "text": "void and while this method still works you'll see here at the top",
    "start": "2372880",
    "end": "2378800"
  },
  {
    "text": "that since this doesn't return anything it doesn't make sense to try and capture the return value",
    "start": "2378800",
    "end": "2384880"
  },
  {
    "text": "and then i can't await that and how would i then",
    "start": "2385359",
    "end": "2390960"
  },
  {
    "text": "know that something that all of that has completed successfully of course if i run the application you",
    "start": "2390960",
    "end": "2396800"
  },
  {
    "text": "might expect that it's going to crash and that's exactly what's going to happen now one of the first things most",
    "start": "2396800",
    "end": "2402320"
  },
  {
    "text": "developers do when they have an exception what's that it's adding a trying catch block",
    "start": "2402320",
    "end": "2409079"
  },
  {
    "text": "if i do that hopefully a pokemon cachamol is going to work",
    "start": "2410000",
    "end": "2419280"
  },
  {
    "text": "is this going to work yes no",
    "start": "2420160",
    "end": "2425280"
  },
  {
    "text": "it didn't work the application still crashes so is that odd is this what we would",
    "start": "2425280",
    "end": "2430319"
  },
  {
    "text": "expect i wrap my entire method call that i know has an exception in it i wrap the name i try and catch block",
    "start": "2430319",
    "end": "2437440"
  },
  {
    "text": "but since all of this code here is sort of changed it doesn't matter that this is async by the way",
    "start": "2437440",
    "end": "2442560"
  },
  {
    "text": "the problem is that the method do something is marked as async void because what happens is that the state",
    "start": "2442560",
    "end": "2448640"
  },
  {
    "text": "machine doesn't have a way to notify anyone that there was an exception so what's the best way to solve that",
    "start": "2448640",
    "end": "2455440"
  },
  {
    "text": "it's just to tear down the application just crash everything that's probably what the developer wants",
    "start": "2455440",
    "end": "2462480"
  },
  {
    "text": "probably not i don't know how to how they would have approached this differently but",
    "start": "2462800",
    "end": "2469680"
  },
  {
    "text": "anyways it's it's it's what it is and this is why we should avoid async void there's no way to recover from this",
    "start": "2469680",
    "end": "2475359"
  },
  {
    "text": "there's no way to capture that i believe we could monitor for unhandled exceptions but the application is still",
    "start": "2475359",
    "end": "2481520"
  },
  {
    "text": "going to crash so the way that we solve this obviously is to change this back to asynctask which then means that we need",
    "start": "2481520",
    "end": "2488560"
  },
  {
    "text": "to introduce the await keyword which means that we need to mark this as",
    "start": "2488560",
    "end": "2494240"
  },
  {
    "text": "async void this is the only place where you are allowed to use async void that will",
    "start": "2494240",
    "end": "2499440"
  },
  {
    "text": "click event handlers or delegates that require that so how do we avoid",
    "start": "2499440",
    "end": "2504640"
  },
  {
    "text": "this problem with that we just had that applications crashes due to unhandled exceptions",
    "start": "2504640",
    "end": "2509760"
  },
  {
    "text": "the easiest way is to write code that doesn't crash but i don't think that's a good idea",
    "start": "2509760",
    "end": "2515680"
  },
  {
    "text": "either because that's not going to happen so avoid having too much code inside your async void methods this is",
    "start": "2515680",
    "end": "2522560"
  },
  {
    "text": "probably the the best approach or the best alternative in this case here is to have",
    "start": "2522560",
    "end": "2528720"
  },
  {
    "text": "a try catch for all of the code inside your async void method ensure that there's nothing that could",
    "start": "2528720",
    "end": "2534000"
  },
  {
    "text": "potentially throw an unhandled exception catch all of it and try to handle all the exceptions in an async void method",
    "start": "2534000",
    "end": "2541119"
  },
  {
    "text": "don't have code that could crash so this here will now allow us to capture",
    "start": "2541119",
    "end": "2546720"
  },
  {
    "text": "this exception and of course if i put a breakpoint in here i can now catch this as we saw earlier",
    "start": "2546720",
    "end": "2552720"
  },
  {
    "text": "just to validate that this works we can see that we are now catching this exception again just by changing it to",
    "start": "2552720",
    "end": "2558319"
  },
  {
    "text": "asynctask but we also changed the way that this is consumed so if you start off building an application or",
    "start": "2558319",
    "end": "2564400"
  },
  {
    "text": "refactoring an old application where some someone introduced async void and you're changing that to asynctask it may",
    "start": "2564400",
    "end": "2570720"
  },
  {
    "text": "now swallow the exceptions so you need to keep that in mind so let's now talk about that state",
    "start": "2570720",
    "end": "2577520"
  },
  {
    "text": "machine right so this here as i mentioned earlier is going to",
    "start": "2577520",
    "end": "2584960"
  },
  {
    "text": "let me just reopen this here we",
    "start": "2584960",
    "end": "2590078"
  },
  {
    "text": "go perfect visual studio doesn't want to work with me i think i have this open here",
    "start": "2590839",
    "end": "2597520"
  },
  {
    "text": "so for every method that you have marked as async it's going to generate one of these state machines now i have a",
    "start": "2597520",
    "end": "2603920"
  },
  {
    "text": "a rather simple console application as of i believe c sharp 7 you're allowed to",
    "start": "2603920",
    "end": "2609839"
  },
  {
    "text": "do async async main which is nice",
    "start": "2609839",
    "end": "2615599"
  },
  {
    "text": "and the reason you would use an asynchronous principles for that in console applications even if there's no ui it's because you might share apis or",
    "start": "2615599",
    "end": "2623280"
  },
  {
    "text": "share frameworks or new get packages where they only expose asynchronous apis",
    "start": "2623280",
    "end": "2628800"
  },
  {
    "text": "so in this case here again naming things is hard but i have a method called run async which is then calling run internal",
    "start": "2628800",
    "end": "2634400"
  },
  {
    "text": "async which is then calling something async which is then calling something internal async now of course this looks",
    "start": "2634400",
    "end": "2641040"
  },
  {
    "text": "silly but it happens quite a lot you have services layers you have factories you have all of these different you know",
    "start": "2641040",
    "end": "2647119"
  },
  {
    "text": "you're on an architecture where you have multiple different layers where each method call is an asynchronous operation",
    "start": "2647119",
    "end": "2653839"
  },
  {
    "text": "and what you do when you see an async or a task return from a method is that you increase the await keyword because",
    "start": "2653839",
    "end": "2660800"
  },
  {
    "text": "you've been told that you should do async all the way which means you should always introduce the await keyword",
    "start": "2660800",
    "end": "2666640"
  },
  {
    "text": "which you shouldn't and i'll show you why in this case here for this uh this method here at the",
    "start": "2666640",
    "end": "2673280"
  },
  {
    "text": "bottom now we could probably improve on this a little bit here we have two things that's that's could",
    "start": "2673280",
    "end": "2679920"
  },
  {
    "text": "be potentially improved here one is that this is the first time we see two awaits being used in the same",
    "start": "2679920",
    "end": "2685599"
  },
  {
    "text": "method and that's totally fine but what happens here is that we are starting off in a synchronous operation",
    "start": "2685599",
    "end": "2691520"
  },
  {
    "text": "and then i have the await keyword which indicates that i'm not starting the second one until the first one completes",
    "start": "2691520",
    "end": "2698000"
  },
  {
    "text": "now in a better way i would want to start these at the same time because these two doesn't have anything to do",
    "start": "2698000",
    "end": "2703599"
  },
  {
    "text": "with each other but i'd still like to wait for them both to complete and this is where i can introduce",
    "start": "2703599",
    "end": "2709280"
  },
  {
    "text": "something called task dot when all",
    "start": "2709280",
    "end": "2714640"
  },
  {
    "text": "you should not confuse this with weight all or wait any because this here will definitely deadlock your application",
    "start": "2714640",
    "end": "2722640"
  },
  {
    "text": "so if i do task.when all this is a way for me to pass a params of tasks",
    "start": "2722640",
    "end": "2728240"
  },
  {
    "text": "they all start at the same time and now what happens here is that i have",
    "start": "2728240",
    "end": "2734640"
  },
  {
    "text": "a way to track that all of these completes before i execute the next line",
    "start": "2734640",
    "end": "2741520"
  },
  {
    "text": "if i do this here so now i'm saying that run both of these the sequence operations at the same time let me know",
    "start": "2741520",
    "end": "2747040"
  },
  {
    "text": "when all of that completes i could also say just let me know when one of them completes but that's for",
    "start": "2747040",
    "end": "2752480"
  },
  {
    "text": "other types of purposes so that's one improvement that i've made now but still i have the async in and",
    "start": "2752480",
    "end": "2759040"
  },
  {
    "text": "await keyword and the question i guess is do we need that in this case here if i compile this application",
    "start": "2759040",
    "end": "2766319"
  },
  {
    "text": "and i go into an application called il spy look look at this here this here",
    "start": "2766319",
    "end": "2772480"
  },
  {
    "text": "generated one state machine per method that is marked as async it's using the await",
    "start": "2772480",
    "end": "2779599"
  },
  {
    "text": "keyword what does that mean well it means that we have quite a lot of code and all of",
    "start": "2779599",
    "end": "2785040"
  },
  {
    "text": "this code here if i just expand on all of this here it doesn't look like it's much but honestly it's more code than",
    "start": "2785040",
    "end": "2791920"
  },
  {
    "text": "what we would need to right this is for each method that's marked as async",
    "start": "2791920",
    "end": "2797680"
  },
  {
    "text": "and for iot devices each each line of code is a lot it's like it's that drains battery and that's",
    "start": "2797680",
    "end": "2804560"
  },
  {
    "text": "true for android phones and ios devices if you're using dot and maui or xamarin right",
    "start": "2804560",
    "end": "2811359"
  },
  {
    "text": "so do we need to introduce a state machine that's kind of a leading question we don't",
    "start": "2811359",
    "end": "2816880"
  },
  {
    "text": "in this case here i'm not doing anything like i can remove this portion of the code here because that's just",
    "start": "2816880",
    "end": "2822240"
  },
  {
    "text": "a reminder and now visual studio crashed what i can do is that i can remove the code at the bottom",
    "start": "2822240",
    "end": "2828160"
  },
  {
    "text": "let's uh let's do this",
    "start": "2828160",
    "end": "2832720"
  },
  {
    "text": "see if that works better yeah whatever",
    "start": "2843599",
    "end": "2849520"
  },
  {
    "text": "all right here we go instead of having the await keyword here",
    "start": "2850400",
    "end": "2856400"
  },
  {
    "text": "i can still follow the same pattern because when this is compiled the async keyword is no longer available",
    "start": "2856400",
    "end": "2863359"
  },
  {
    "text": "in the compile code right so all that i need to do is ensure that i return a task",
    "start": "2863359",
    "end": "2869119"
  },
  {
    "text": "if i replace the await keyword with a return and remove the async keyword i",
    "start": "2869119",
    "end": "2874319"
  },
  {
    "text": "still have the same the same signature for the method i'm still doing the same thing but what i've",
    "start": "2874319",
    "end": "2879680"
  },
  {
    "text": "done now is that i've reduced one state machine and i can do this for for each",
    "start": "2879680",
    "end": "2884839"
  },
  {
    "text": "method where i don't do anything in the continuation and all of a sudden we have quite a lot",
    "start": "2884839",
    "end": "2891599"
  },
  {
    "text": "of code that's that's reduced it's no longer requiring to",
    "start": "2891599",
    "end": "2898240"
  },
  {
    "text": "to generate all of that code and i can even do it in this method that looks a little bit more complex this here is",
    "start": "2898559",
    "end": "2904000"
  },
  {
    "text": "running that run internal async it's then appending a continuation to that and what i could do is that i can can",
    "start": "2904000",
    "end": "2910720"
  },
  {
    "text": "return that like this here now when i had oops sorry",
    "start": "2910720",
    "end": "2917920"
  },
  {
    "text": "here we go when i return that continuation that's actually both the original task and the continuation",
    "start": "2917920",
    "end": "2924720"
  },
  {
    "text": "appended to it so it will ensure that we can track all of that so where do i need the async and await",
    "start": "2924720",
    "end": "2931760"
  },
  {
    "text": "keywords well when someone says you need to use async and await all the way through it's it",
    "start": "2931760",
    "end": "2937040"
  },
  {
    "text": "means that you should use async and await and not don't block your asynchronous operations don't use dot",
    "start": "2937040",
    "end": "2942960"
  },
  {
    "text": "weight or dot result anywhere in the chain of asynchronous operations we should await it at the top level",
    "start": "2942960",
    "end": "2949599"
  },
  {
    "text": "for instance in a click event handler or in this case here in the program we should never do",
    "start": "2949599",
    "end": "2954800"
  },
  {
    "text": "we should never call this and say well just give me the result or wait until all of that is completed",
    "start": "2954800",
    "end": "2959839"
  },
  {
    "text": "because this is going to introduce some problems so instead of doing that we want to use",
    "start": "2959839",
    "end": "2966000"
  },
  {
    "text": "async and await at the top level or when there's something that we want to do in the continuation so this is a slight",
    "start": "2966000",
    "end": "2972640"
  },
  {
    "text": "performance improvement especially for iot devices but it also is good for for mobile",
    "start": "2972640",
    "end": "2977839"
  },
  {
    "text": "phones and so forth so if i compile this if it works to compile this application it says build",
    "start": "2977839",
    "end": "2983040"
  },
  {
    "text": "failed perfect but compile only that part",
    "start": "2983040",
    "end": "2988800"
  },
  {
    "text": "why is this failing all right just trust me it reduced the state",
    "start": "2988800",
    "end": "2993839"
  },
  {
    "text": "machines luckily i think you have a slide for that in just a moment",
    "start": "2993839",
    "end": "2999839"
  },
  {
    "text": "so we looked at async void uh we'll get back to that improved state machine in just a moment",
    "start": "2999839",
    "end": "3006160"
  },
  {
    "text": "but i did mention quite a few times that you could end up having a deadlock and a deadlock doesn't necessarily mean that",
    "start": "3006160",
    "end": "3011920"
  },
  {
    "text": "you wrote some bad a code it just means that you were either unlucky or you have a race condition",
    "start": "3011920",
    "end": "3018559"
  },
  {
    "text": "so i want to avoid this happening where there's no way to turn back from that that happening and a",
    "start": "3018559",
    "end": "3024960"
  },
  {
    "text": "a complex situation where this could happen if we just look through the code here now an issue here",
    "start": "3024960",
    "end": "3031440"
  },
  {
    "text": "i'm just having a task delay just imagine that this is any asynchronous operation i schedule a continuation the",
    "start": "3031440",
    "end": "3037599"
  },
  {
    "text": "continuation is trying to talk to the ui thread which is whatever started this asynchronous operation and then we have",
    "start": "3037599",
    "end": "3043760"
  },
  {
    "text": "this thing at the bottom here the weight keyword or the weight method call that means please block the ui",
    "start": "3043760",
    "end": "3050640"
  },
  {
    "text": "until all of that code is done but how could this ever complete",
    "start": "3050640",
    "end": "3056160"
  },
  {
    "text": "if we are blocking the ui i don't think anyone would write this type of code right",
    "start": "3056160",
    "end": "3062000"
  },
  {
    "text": "this never happens what does happen is that we write code that looks like this",
    "start": "3062000",
    "end": "3067680"
  },
  {
    "text": "which is exactly the same thing so if we have a look at what this would look like in our",
    "start": "3067680",
    "end": "3074400"
  },
  {
    "text": "ui application if visual studio decides to work again",
    "start": "3074400",
    "end": "3080000"
  },
  {
    "text": "now if i were to change this up just slightly to say that well i want to block the ui until this is",
    "start": "3080000",
    "end": "3086559"
  },
  {
    "text": "done let's just wait for this to return a result i don't care that this is going to",
    "start": "3086559",
    "end": "3091680"
  },
  {
    "text": "behave slow i don't care that this is going to be a synchronous call a misconception is that adding weight or",
    "start": "3091680",
    "end": "3097119"
  },
  {
    "text": "dot result means that we're running the code synchronously but that's not really what happens",
    "start": "3097119",
    "end": "3102960"
  },
  {
    "text": "now if i run this i'm going to try and run this with the debugger attached for some reason this project worked so",
    "start": "3102960",
    "end": "3108960"
  },
  {
    "text": "let's click run here",
    "start": "3108960",
    "end": "3111838"
  },
  {
    "text": "sorry i'm just going to get rid of some code",
    "start": "3120319",
    "end": "3125838"
  },
  {
    "text": "i don't think it rebuilt the application",
    "start": "3127440",
    "end": "3131280"
  },
  {
    "text": "now what happens with that when i add weight here is that it's going to block the ui application until this asynchronous operation is done",
    "start": "3132720",
    "end": "3139920"
  },
  {
    "text": "but now that we know i'm sorry it's because of this throw exception here",
    "start": "3139920",
    "end": "3145280"
  },
  {
    "text": "now that we know that all of the code here is going to be moved into a state machine",
    "start": "3145280",
    "end": "3150800"
  },
  {
    "text": "the state machine is in fact running on the ui thread so how can it schedule the call to run",
    "start": "3150800",
    "end": "3157040"
  },
  {
    "text": "the asynchronous operation how can it notify us that the asynchronous operation completed if we are blocking that original",
    "start": "3157040",
    "end": "3164839"
  },
  {
    "text": "thread it can't so hence we're going to have a deadlock let me try and run this again",
    "start": "3164839",
    "end": "3172160"
  },
  {
    "text": "and all of a sudden the application crashed it's not going to recover from this here because now i've blocked the ui the task where the state machine can",
    "start": "3175839",
    "end": "3183119"
  },
  {
    "text": "no longer execute which means it can no longer report that the task completed successfully",
    "start": "3183119",
    "end": "3188319"
  },
  {
    "text": "so of course we don't want to do this but of course there's always a way to",
    "start": "3188319",
    "end": "3194800"
  },
  {
    "text": "fix things that doesn't work so there is a way for us to force this to block the application and behave sort of",
    "start": "3194800",
    "end": "3201359"
  },
  {
    "text": "synchronously and i can think of one really good idea",
    "start": "3201359",
    "end": "3206400"
  },
  {
    "text": "let's let's just imagine it's a good idea because it might not be so what we can do",
    "start": "3206400",
    "end": "3212480"
  },
  {
    "text": "what about we let's move that state machine and let's run the state machine on a different thread",
    "start": "3212480",
    "end": "3219280"
  },
  {
    "text": "let's block the ui and then when that state machine notifies that this task is completed the",
    "start": "3219280",
    "end": "3225520"
  },
  {
    "text": "ui will be notified that that work is done as well so now if i run this",
    "start": "3225520",
    "end": "3232000"
  },
  {
    "text": "we're gonna have more problems but we've still we we removed the dead deadlock so at least they got an exception right",
    "start": "3233119",
    "end": "3239200"
  },
  {
    "text": "that's better than actually deadlocking the application now what i'm doing here",
    "start": "3239200",
    "end": "3245280"
  },
  {
    "text": "some of you might be thinking well now you've moved all the work to a different thread how can we now update the ui from",
    "start": "3245280",
    "end": "3251599"
  },
  {
    "text": "that separate thread well we can't so now we have to go back and refactor that and use the dispatcher and so forth and",
    "start": "3251599",
    "end": "3257359"
  },
  {
    "text": "if we're using the dispatcher again and we have the weight here how would that ever finish",
    "start": "3257359",
    "end": "3263680"
  },
  {
    "text": "so what do we take away from this never use weight never called dot result but now you know that the state machine runs",
    "start": "3263680",
    "end": "3269920"
  },
  {
    "text": "on the thread that runs that asynchronous method before the asynchronous operations starts",
    "start": "3269920",
    "end": "3277440"
  },
  {
    "text": "so nothing in here is asynchronous until it sees the task that run that's what schedules work somewhere else remember",
    "start": "3277440",
    "end": "3284000"
  },
  {
    "text": "all of this code here in the state machine runs on the original caller thread okay",
    "start": "3284000",
    "end": "3290480"
  },
  {
    "text": "so let's see here i have a few more things to go through",
    "start": "3290480",
    "end": "3296160"
  },
  {
    "text": "so to avoid deadlocks never call wait or never use result and please don't confuse weight all with task.when any or",
    "start": "3296960",
    "end": "3304400"
  },
  {
    "text": "when all and another i guess more advanced scenarios when you add locks to",
    "start": "3304400",
    "end": "3310640"
  },
  {
    "text": "your applications you should never share locks across different threads or for different purposes because that is also",
    "start": "3310640",
    "end": "3316480"
  },
  {
    "text": "an easy way to get a deadlock a nested lock is also a way to get deadlocks in an application there's multiple ways to",
    "start": "3316480",
    "end": "3322720"
  },
  {
    "text": "write code that doesn't work it's really much harder to use this properly so again i tried to to show you this but",
    "start": "3322720",
    "end": "3328880"
  },
  {
    "text": "the unnecessary state machines like in this case here we have all of these these methods being called and if",
    "start": "3328880",
    "end": "3334000"
  },
  {
    "text": "there's nothing in the continuation why would we ever need to introduce the async and await keywords",
    "start": "3334000",
    "end": "3339920"
  },
  {
    "text": "so we don't if there's nothing in the continuation we don't need to await that",
    "start": "3339920",
    "end": "3345359"
  },
  {
    "text": "and this is true for most situations it's not true for when you're using entity framework or web calls for",
    "start": "3345359",
    "end": "3352000"
  },
  {
    "text": "instance in those cases you cannot just return that operation or return that call that has to be awaited in that",
    "start": "3352000",
    "end": "3359040"
  },
  {
    "text": "context so then again what does async all the way means",
    "start": "3359040",
    "end": "3364720"
  },
  {
    "text": "we want to avoid the unnecessary state machines but we want to make sure that we can await everything at the top level",
    "start": "3364720",
    "end": "3371280"
  },
  {
    "text": "and that would mean that we for example do it in the click event handler",
    "start": "3371280",
    "end": "3377798"
  },
  {
    "text": "another important topic is cancellations how do we cancel an asynchronous operation sometimes we might have a task",
    "start": "3378079",
    "end": "3384880"
  },
  {
    "text": "that runs for a very long time it might be a long running operation that runs or",
    "start": "3384880",
    "end": "3389920"
  },
  {
    "text": "pulling some data it might be listening for some stream or something like that well one of the first things that people",
    "start": "3389920",
    "end": "3395520"
  },
  {
    "text": "try to do is introduce one of these things called a cancellation token source which you then couple with this thing",
    "start": "3395520",
    "end": "3402000"
  },
  {
    "text": "called a cancellation token the cancellation token can be signaled to be cancelled",
    "start": "3402000",
    "end": "3407440"
  },
  {
    "text": "now this here is a very simple application it's called startasync because it runs or starts an",
    "start": "3407440",
    "end": "3412799"
  },
  {
    "text": "asynchronous operation which is simply putting all of the code inside this long running operation on a",
    "start": "3412799",
    "end": "3419119"
  },
  {
    "text": "different thread now the body of this code here is very very simple it pulls for some data or we can imagine",
    "start": "3419119",
    "end": "3426000"
  },
  {
    "text": "that it does it tries to process some data and then just to have a little bit of backing off on that thread we're doing a thread.sleep",
    "start": "3426000",
    "end": "3433119"
  },
  {
    "text": "so with that in mind if we call cancellationtokensource.cancel",
    "start": "3433119",
    "end": "3438720"
  },
  {
    "text": "how would it know where to cancel all of this work how would it know what to do with all of",
    "start": "3438720",
    "end": "3443760"
  },
  {
    "text": "that could it just tear down the thread would that be appropriate so when we call cancellation token",
    "start": "3443760",
    "end": "3450400"
  },
  {
    "text": "source.cancel nothing happens what we have to do is that we have to listen for this manually we have to",
    "start": "3450400",
    "end": "3456400"
  },
  {
    "text": "handle this inside our code we have to potentially handle rolling back some data as well to ensure that we're not",
    "start": "3456400",
    "end": "3463119"
  },
  {
    "text": "ending up in a situation where we have data that shouldn't be there or half process data so we can add cancellation",
    "start": "3463119",
    "end": "3469440"
  },
  {
    "text": "token source that throw if cancellation is requested that will then exit this loop and when we call this it will",
    "start": "3469440",
    "end": "3474960"
  },
  {
    "text": "notify that task that it failed and whoever's in calling that or awaiting that long running operation will then",
    "start": "3474960",
    "end": "3481520"
  },
  {
    "text": "know that there was a cancellation so we have to manually listen for cancellations",
    "start": "3481520",
    "end": "3488400"
  },
  {
    "text": "and i did just mention this but when it comes to asynchronous database operations entity framework does not support",
    "start": "3488400",
    "end": "3494960"
  },
  {
    "text": "multiple different asynchronous operations at the same time so you have to await each call before you're doing",
    "start": "3494960",
    "end": "3500960"
  },
  {
    "text": "another one and you should do that in the same context as well",
    "start": "3500960",
    "end": "3506240"
  },
  {
    "text": "now as a final piece i want to talk about streaming data and if you went to my c-sharp talk yesterday you saw that",
    "start": "3506240",
    "end": "3512319"
  },
  {
    "text": "that exactly this demo that i'm going to show you here how we can listen for streams of data so imagine that we have",
    "start": "3512319",
    "end": "3518240"
  },
  {
    "text": "this for each loop here that's trying to iterate over a bunch of elements now i",
    "start": "3518240",
    "end": "3523280"
  },
  {
    "text": "can say that i want to retrieve each of the elements asynchronously that means that i could get a stream of bytes a",
    "start": "3523280",
    "end": "3529359"
  },
  {
    "text": "stream of strings a stream of objects into my application and it's really rather simple",
    "start": "3529359",
    "end": "3536000"
  },
  {
    "text": "if you know your way around async and await now i have this method here called get lyrics",
    "start": "3536000",
    "end": "3542240"
  },
  {
    "text": "it's marked as async and it has an i innumerable of string as a return type that's a task-like object so you can use",
    "start": "3542240",
    "end": "3549280"
  },
  {
    "text": "the async keyword together with value tasks together with tasks and together with the i async enumerable what this",
    "start": "3549280",
    "end": "3555359"
  },
  {
    "text": "means here is that we are going to get a stream of strings returned back to our application",
    "start": "3555359",
    "end": "3562720"
  },
  {
    "text": "and then what i have in here is i'm opening a file to disk i'm reading each line asynchronously and then just to",
    "start": "3562720",
    "end": "3568400"
  },
  {
    "text": "show you exactly that this takes a little bit of time i'm just introducing a task.delay and then using yield return",
    "start": "3568400",
    "end": "3574480"
  },
  {
    "text": "to tell the iterator that i have some data available to process and to consume this stream of data i can",
    "start": "3574480",
    "end": "3580480"
  },
  {
    "text": "do await for each or a line in get lyrics",
    "start": "3580480",
    "end": "3587520"
  },
  {
    "text": "this here top level statement isn't giving me a lot of intelligence console.writeline",
    "start": "3587520",
    "end": "3594240"
  },
  {
    "text": "you can write this out to the console and now like if you've seen this in the past or",
    "start": "3594240",
    "end": "3600799"
  },
  {
    "text": "used asynchronous programming in the past normally we have the await in front of git lyrics here but that would mean",
    "start": "3600799",
    "end": "3606400"
  },
  {
    "text": "that we get the entire the entire stream or the entire chunk of data at once now what i want to do is i",
    "start": "3606400",
    "end": "3612720"
  },
  {
    "text": "want to get one string at a time and i don't really want to start reading the next string until i process this",
    "start": "3612720",
    "end": "3619359"
  },
  {
    "text": "completely so if we have a lot of work in here i don't want to start off processing the next one until i actually",
    "start": "3619359",
    "end": "3625200"
  },
  {
    "text": "have everything available so if i save this here and i go to my console here into dot net run",
    "start": "3625200",
    "end": "3631440"
  },
  {
    "text": "hopefully this will stream some some nice lyrics out to the console",
    "start": "3631440",
    "end": "3636640"
  },
  {
    "text": "there we go and it works so this here shows us that we can now",
    "start": "3636799",
    "end": "3642799"
  },
  {
    "text": "subscribe to a stream of data and we get this this very nice stream that i can process",
    "start": "3642799",
    "end": "3648319"
  },
  {
    "text": "it reach each line as it's available in the file all right so",
    "start": "3648319",
    "end": "3654799"
  },
  {
    "text": "with that being said i hope you liked all of the pretty cool things we've looked at with asynchronous programming",
    "start": "3654799",
    "end": "3660240"
  },
  {
    "text": "it is really a complex subject and to write really efficient code when it comes to the task parallel library and",
    "start": "3660240",
    "end": "3666480"
  },
  {
    "text": "async and await it takes time to fully understand all the gotchas around how it works and what happens as we saw here",
    "start": "3666480",
    "end": "3673200"
  },
  {
    "text": "with all the captured exceptions and the unnecessary state machines and so forth",
    "start": "3673200",
    "end": "3678240"
  },
  {
    "text": "if you've got some time over after this i have a four hour course on pluralsight that goes into detail on each of these",
    "start": "3678240",
    "end": "3684240"
  },
  {
    "text": "different topics so hopefully you've enjoyed this and if you have any questions about",
    "start": "3684240",
    "end": "3689599"
  },
  {
    "text": "asynchronous programming or anything like that you can check out my courses or you can just ping me on twitter and i hope you",
    "start": "3689599",
    "end": "3695119"
  },
  {
    "text": "found this useful and now have some tools to write some more efficient async and await using the task parallel",
    "start": "3695119",
    "end": "3701280"
  },
  {
    "text": "library thank you so much my name is philip beckberg have a great conference",
    "start": "3701280",
    "end": "3707318"
  },
  {
    "text": "you",
    "start": "3718400",
    "end": "3720480"
  }
]