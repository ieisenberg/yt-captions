[
  {
    "start": "0",
    "end": "87000"
  },
  {
    "text": "Welcome Friends we're here to talk about Kestrel I am uh Damen Edwards I'm John Galloway",
    "start": "6640",
    "end": "12840"
  },
  {
    "text": "this is not David Fowler I'm not what happened I I I was hoping you wouldn't notice I was going to try and kind of",
    "start": "12840",
    "end": "19480"
  },
  {
    "text": "speak with the J what it what Jamaican Jama don't let him hear you say",
    "start": "19480",
    "end": "25920"
  },
  {
    "text": "that you know I think the beard gave it away um we're going to talk about AET",
    "start": "25920",
    "end": "31080"
  },
  {
    "text": "core kestral which is the fancy web server uh or application web server that",
    "start": "31080",
    "end": "37719"
  },
  {
    "text": "is inside asp.net core or you can use an aset core and we're specifically going to look at a bunch of the things that we",
    "start": "37719",
    "end": "43039"
  },
  {
    "text": "have to do to make it fast um previously aset has been you know it's been okay",
    "start": "43039",
    "end": "49280"
  },
  {
    "text": "it's been fast enough for most people um but there some things that happened over the past few years that have made us",
    "start": "49280",
    "end": "55800"
  },
  {
    "text": "care about these things a little bit uh further before I jump into that just go back back to the first slide for a sec I",
    "start": "55800",
    "end": "61760"
  },
  {
    "text": "just need to call out that I didn't put these slides together John did a little bit of work on these slides last couple",
    "start": "61760",
    "end": "67400"
  },
  {
    "text": "days but most of this has been put together by a couple of the developers on the aset core team Caesar and Stefan",
    "start": "67400",
    "end": "74080"
  },
  {
    "text": "so big shout out to them and the benefit is they've written a lot of this code and they understand it right but then I",
    "start": "74080",
    "end": "80600"
  },
  {
    "text": "don't really I didn't write any of this code and I don't actually understand it but I'm going to I'm going to explain it to you anyway cuz it's fun trying to",
    "start": "80600",
    "end": "86960"
  },
  {
    "text": "explain things that you don't know um so is kol kol is a web server as I mentioned uh for aset core it's",
    "start": "86960",
    "end": "94119"
  },
  {
    "start": "87000",
    "end": "250000"
  },
  {
    "text": "currently based on lib UV and we'll talk a little bit about what libuv is later on um some key points it is open source",
    "start": "94119",
    "end": "100600"
  },
  {
    "text": "like virtually all of ASP net core is and we can prove that because we can look at the repo which we handily have",
    "start": "100600",
    "end": "107000"
  },
  {
    "text": "available already in a tab yeah and you can see that of the top contributors Stephan halter who was one of the guys",
    "start": "107000",
    "end": "112880"
  },
  {
    "text": "who I just called out on the slide uh is the top one but very closely behind who actually has more deletes if that means",
    "start": "112880",
    "end": "120399"
  },
  {
    "text": "anything is Ben and Ben doesn't work for Microsoft he works for lyad games and so",
    "start": "120399",
    "end": "125680"
  },
  {
    "text": "he's one of the chief contributors and he's actually uh just a dude from the community I not just a dude an amazing",
    "start": "125680",
    "end": "132040"
  },
  {
    "text": "uh developer who's done some great work for us I oh look there you are look I did write some with this code I even",
    "start": "132040",
    "end": "138160"
  },
  {
    "text": "deleted 28 lines I was just about to all tab away I'm glad you so yeah it is open",
    "start": "138160",
    "end": "143400"
  },
  {
    "text": "source and we've had some really great contributions to it um and we invite many many more we really want people to",
    "start": "143400",
    "end": "149879"
  },
  {
    "text": "to make this as good as can be it is crossplatform as aset core is crossplatform by default you will always",
    "start": "149879",
    "end": "155360"
  },
  {
    "text": "be using Kestrel when you use an aset core app that is the default server even if you're running on I you are still",
    "start": "155360",
    "end": "160800"
  },
  {
    "text": "using KRL krol is the server that runs in your process and then you may have I",
    "start": "160800",
    "end": "166280"
  },
  {
    "text": "or in genx or ha proxy or whatever your preferred reverse proxying server is in front of that okay we do not host in",
    "start": "166280",
    "end": "172840"
  },
  {
    "text": "process in is uh it is written in managed code okay so it's a managed web server libuv is a",
    "start": "172840",
    "end": "179440"
  },
  {
    "text": "native component it's written in C um but KL itself is all written in C okay",
    "start": "179440",
    "end": "185599"
  },
  {
    "text": "uh doesn't necessarily mean it's easy to understand though I'm a web developer and I've written a lot of C but I haven't written a lot of C that looks",
    "start": "185599",
    "end": "191879"
  },
  {
    "text": "like this C so we're going to have some fun looking at this c um and it is a new get package it's not built in it's not",
    "start": "191879",
    "end": "197360"
  },
  {
    "text": "an XE you don't go to the command line type Cel and then you point it an assembly with as. net core the server is",
    "start": "197360",
    "end": "203560"
  },
  {
    "text": "part of your app You Pull It in as a library I think it's a little bit like how we did stuff with Owen before it",
    "start": "203560",
    "end": "209040"
  },
  {
    "text": "there is a contract aset core has an app Funk and then the server has a has to be",
    "start": "209040",
    "end": "214680"
  },
  {
    "text": "able to call the app Funk it has to be able to uh pass in requests and uh handle responses using a bunch of",
    "start": "214680",
    "end": "220840"
  },
  {
    "text": "contracts and that's pretty much it it's really just C code it's really nothing special you can boot up Kestrel from any",
    "start": "220840",
    "end": "227200"
  },
  {
    "text": "executable um assuming it's net okay just you make a a console app and you say bring in the the Kestrel package yep",
    "start": "227200",
    "end": "234400"
  },
  {
    "text": "and bootstrap it and way it goes and way it goes absolutely so right now though you generally only use it it's facted to",
    "start": "234400",
    "end": "239920"
  },
  {
    "text": "use with aset core you can't really use kol by itself we've talked about whether we make kol available as a standalone",
    "start": "239920",
    "end": "246159"
  },
  {
    "text": "kind of socket server thing but we haven't got there yet right now you use it with aset core so um I talked a",
    "start": "246159",
    "end": "252000"
  },
  {
    "text": "little bit about some things that changed your aset was okay yeah it's it's not slow um",
    "start": "252000",
    "end": "259600"
  },
  {
    "text": "but it wasn't R runs stack Overflow run stack Overflow um with a bunch of other layers in front of it obviously but you",
    "start": "259600",
    "end": "265199"
  },
  {
    "text": "know you can make pretty much any server be fast um but",
    "start": "265199",
    "end": "271000"
  },
  {
    "text": "this was an interesting motivation kie Summers who does a a bunch of wonderful",
    "start": "271000",
    "end": "276039"
  },
  {
    "text": "work in open source in the community she has this uh server she wrote called Haywire which is written in C and she",
    "start": "276039",
    "end": "282560"
  },
  {
    "text": "uses libuv as well which was so it's a nice sort of analogue um and she tweeted",
    "start": "282560",
    "end": "289000"
  },
  {
    "text": "this what a year ago only a year ago it's only 12th of July 2015 so it's not that long ago really and she said oh",
    "start": "289000",
    "end": "294680"
  },
  {
    "text": "look I I rank kro on this Zeon blah blah blah blah blah and I got 750 request Quest per second which is and um",
    "start": "294680",
    "end": "302680"
  },
  {
    "text": "Haywire which was her server on a Raspberry Pie raspberry pie right probably not even version two or version",
    "start": "302680",
    "end": "309120"
  },
  {
    "text": "three probably the original one yeah um she with a hund MAG network was getting 72,000 requests per second so I was like",
    "start": "309120",
    "end": "315840"
  },
  {
    "text": "H that's probably not good we should probably do something about that and when I turned to the team and said you",
    "start": "315840",
    "end": "321600"
  },
  {
    "text": "know why is this so they said we've never really cared too much about perform now there was actually a bunch of reasons why she was that bad why it",
    "start": "321600",
    "end": "328120"
  },
  {
    "text": "was getting that uh bad performance when Kelly wrote ran that test and when she ran some other tests afterwards it",
    "start": "328120",
    "end": "333759"
  },
  {
    "text": "wasn't quite that bad but this was an inspiring tweet and so some things uh beyond that that have happened the",
    "start": "333759",
    "end": "339360"
  },
  {
    "start": "338000",
    "end": "511000"
  },
  {
    "text": "teeken power benchmarks anyone heard of the teeken power benchmarks okay we've talked about them a little bit if you've watched us on the standup um or seen",
    "start": "339360",
    "end": "346840"
  },
  {
    "text": "some of the talks before this is a set of Industry benchmarks that have been run by the teeken Power Group they're up to round 12 now they've done 12 rounds",
    "start": "346840",
    "end": "354120"
  },
  {
    "text": "they have a set of discreet um scenarios that you can see here so this is fortunes which is the name of one of",
    "start": "354120",
    "end": "359880"
  },
  {
    "text": "their scenarios that does database access and HTML rendering but they also have very simple ones like plain text",
    "start": "359880",
    "end": "365000"
  },
  {
    "text": "which is effectively HTTP hello world okay um so but they have data updates",
    "start": "365000",
    "end": "370479"
  },
  {
    "text": "and Json serialization a bunch of other stuff but they're all web benchmarks they benchmarks designed to test the",
    "start": "370479",
    "end": "376599"
  },
  {
    "text": "overhead involved in your HTTP server and or HTTP framework like your web",
    "start": "376599",
    "end": "381759"
  },
  {
    "text": "framework so aspnet isn't in round 12 but if you go back to round nine I think",
    "start": "381759",
    "end": "388240"
  },
  {
    "text": "is the last one we were in so if you go to previous rounds I click all the way to previous rounds and go to round nine",
    "start": "388240",
    "end": "394280"
  },
  {
    "text": "yeah and then you scroll the way down uh PL text we're not at the top we're not",
    "start": "394280",
    "end": "401240"
  },
  {
    "text": "no and we're not in the middle which only leaves one place no we're not that far down well scroll up by there there",
    "start": "401240",
    "end": "408440"
  },
  {
    "text": "we go in red ASN net 71,000 requests per second which equates to 1.1% of the one",
    "start": "408440",
    "end": "413880"
  },
  {
    "text": "that was leading this Benchmark so we are 100 times slower in this scenario as",
    "start": "413880",
    "end": "420000"
  },
  {
    "text": "whatever the one at the top was which was I don't know what it was at that point and high numbers are good in this test High numbers are good in this test",
    "start": "420000",
    "end": "426680"
  },
  {
    "text": "yes this is a measure of requests per second thank you for clarifying that johnp um so we can do better we should",
    "start": "426680",
    "end": "434319"
  },
  {
    "text": "do better um you know benchmarks aren't everything and there are some people who poo poo benchmarks and say well it's",
    "start": "434319",
    "end": "440080"
  },
  {
    "text": "just a benchmark it doesn't equate to real world perf and while yes that is directly or partially true uh this",
    "start": "440080",
    "end": "446560"
  },
  {
    "text": "Benchmark obviously just being hello world does not in any way relate to real world per however in order to do well on",
    "start": "446560",
    "end": "452440"
  },
  {
    "text": "benchmarks you generally have to solve a bunch of the problems that do affect real world per so in net you have to",
    "start": "452440",
    "end": "458560"
  },
  {
    "text": "think about allocations and garbage collections if you think about latency which is if you're a web developer you",
    "start": "458560",
    "end": "464720"
  },
  {
    "text": "generally care about how long it takes for your customers to see stuff painted in the browser right the time between",
    "start": "464720",
    "end": "470720"
  },
  {
    "text": "when they click the link and when you see that happen is latency or time to First Bite solving those things even for",
    "start": "470720",
    "end": "476080"
  },
  {
    "text": "the purpose of benchmarks will have direct impacts on on your reward applications and we have seen as a",
    "start": "476080",
    "end": "481560"
  },
  {
    "text": "result of the work that we're going to talk about and other work we've done in espit core and some of the higher level Stacks like MVC we've seen Real",
    "start": "481560",
    "end": "489319"
  },
  {
    "text": "Performance benefits from people who move from mvc5 to asp.net core both in really big application that guy Ben",
    "start": "489319",
    "end": "495319"
  },
  {
    "text": "Adams they're running a a realtime like gaming server but then also people just like tweet us like hey I just updated my",
    "start": "495319",
    "end": "501639"
  },
  {
    "text": "blog and it's like memory's gone like this and it's way faster and all I did was update you know so I mean there are",
    "start": "501639",
    "end": "507879"
  },
  {
    "text": "benefits even if we're faing what is ultimately a synthetic number okay benchmarks have their purpose they're",
    "start": "507879",
    "end": "513080"
  },
  {
    "start": "511000",
    "end": "845000"
  },
  {
    "text": "not the Dual and end all but they're they're a pretty good driver to to learn some things and to make some stuff faster so some very high level concerns",
    "start": "513080",
    "end": "520200"
  },
  {
    "text": "when it comes to doing net uh web server development anyone who's ever done net",
    "start": "520200",
    "end": "526440"
  },
  {
    "text": "uh performance optimization particularly with servers will run into uh the issue",
    "start": "526440",
    "end": "531959"
  },
  {
    "text": "of garbage collection okay and in asp.net previously there were a lot of different uh tricks that the that net",
    "start": "531959",
    "end": "538959"
  },
  {
    "text": "used use in order to make server applications garbage collect better do it better than say a WPF application a",
    "start": "538959",
    "end": "544880"
  },
  {
    "text": "desktop application because they're very different app profiles right in a web application you have an an app that's",
    "start": "544880",
    "end": "550240"
  },
  {
    "text": "running there for a very long time with lots of discret requests that don't really share anything with anything else um whereas a WPF application you might",
    "start": "550240",
    "end": "557320"
  },
  {
    "text": "have a tree that's alive for a very very very long amount of time and you're not particularly churning that memory over and over and over again the problem with",
    "start": "557320",
    "end": "563920"
  },
  {
    "text": "GC is that when garbage collection takes place it impacts the rest of the application um a lot of the time",
    "start": "563920",
    "end": "569959"
  },
  {
    "text": "net has to freeze things in order to do the bookkeeping associated with memory management so it's good if we can uh",
    "start": "569959",
    "end": "575959"
  },
  {
    "text": "reduce the pressure on net so that the Garb garbage collection happens as little as possible and then when it does",
    "start": "575959",
    "end": "581959"
  },
  {
    "text": "happen it happens as quickly as possible hopefully without any of those uh costly pauses because the last thing you want",
    "start": "581959",
    "end": "587200"
  },
  {
    "text": "is for your application just to stop and not serve requests or hang requests because it's doing a particularly",
    "start": "587200",
    "end": "592920"
  },
  {
    "text": "expensive GC so what do we do we manage a lot of our own memory so rather than just allocating willy-nilly whenever we",
    "start": "592920",
    "end": "598680"
  },
  {
    "text": "need something thing we allocate large blocks of memory up front and then we use those over and over and over again",
    "start": "598680",
    "end": "604360"
  },
  {
    "text": "and we pin them in memory we tell. net please don't move this memory around so that the garbage collector never has to",
    "start": "604360",
    "end": "610000"
  },
  {
    "text": "worry about that move that memory moving around becoming fragmented we reuse known strings",
    "start": "610000",
    "end": "615320"
  },
  {
    "text": "strings are super special in net um there's a lot of things with the way that strings work in net that makes them",
    "start": "615320",
    "end": "620720"
  },
  {
    "text": "useful makes them easy to use makes them interrupt well with other parts of Windows um but they're expensive because",
    "start": "620720",
    "end": "627040"
  },
  {
    "text": "they are uh what's the word I'm looking for um immutable thank you I was say",
    "start": "627040",
    "end": "636480"
  },
  {
    "text": "that's the wrong word they're immutable so once you allocate a string you can't change it which means if you have to change the string you get another one",
    "start": "636480",
    "end": "643720"
  },
  {
    "text": "right and you see this it's one of the first things net developers learn is that oh if you can C any strings use a string Builder right because you don't",
    "start": "643720",
    "end": "648880"
  },
  {
    "text": "want to do all these allocations in a non- performant way and so in a web server unfortunately the web was built",
    "start": "648880",
    "end": "655680"
  },
  {
    "text": "on strings it's just all strings right h P 1.1 is an asy based protocol for the",
    "start": "655680",
    "end": "661959"
  },
  {
    "text": "things of the headers and the dispatching and the protocol version and all that type of stuff you may end up sending bites down if you're downloading",
    "start": "661959",
    "end": "668279"
  },
  {
    "text": "a file but ultimately a lot of the time you're just sending a web page and that's going to be interpreted as utf8",
    "start": "668279",
    "end": "674079"
  },
  {
    "text": "or something like that ultimately it's a string all right so if we're going to give all that to you as an application developer we're going to have to",
    "start": "674079",
    "end": "679440"
  },
  {
    "text": "allocate strings so we need to find smart ways of avoiding allocating the same string over and over and over again",
    "start": "679440",
    "end": "684720"
  },
  {
    "text": "so we reuse known strings um we consume incoming data as soon as it's possible possible so when data is coming in off",
    "start": "684720",
    "end": "691480"
  },
  {
    "text": "the wire we want to make sure that we're going to read that off the wire as quickly as we possibly can maybe even",
    "start": "691480",
    "end": "697040"
  },
  {
    "text": "before your application is ready for it so we will read it so that we don't stall the pipe so that the client can",
    "start": "697040",
    "end": "702600"
  },
  {
    "text": "keep serving us uh data if they're uploading a file or if they're sending a request and then we will do uh the work",
    "start": "702600",
    "end": "709000"
  },
  {
    "text": "in castol to keep that that pipe primed and then give you the memory when you are ready for it and we have some interesting data structures and",
    "start": "709000",
    "end": "714959"
  },
  {
    "text": "algorithms for doing that uh we're not primarily focused on this word that I'd never heard heard of before Stephan gave",
    "start": "714959",
    "end": "720160"
  },
  {
    "text": "me these slides but asymptotic perf which I believe has something to do with like Peak perf or like compai things or",
    "start": "720160",
    "end": "725560"
  },
  {
    "text": "something like that what we really care about I didn't do comps I I grew this beard just for this talk by the way I",
    "start": "725560",
    "end": "731480"
  },
  {
    "text": "have to say because I felt it's not fully a neck beard but it's it's asymptotically approaching a",
    "start": "731480",
    "end": "737760"
  },
  {
    "text": "neck [Laughter] beard the constant per the constant",
    "start": "737760",
    "end": "743440"
  },
  {
    "text": "overhead really matters a lot when we're doing benchmarking when we're looking at a very highly performant web server it sucks if you can do a million requests",
    "start": "743440",
    "end": "750600"
  },
  {
    "text": "and 900,000 of them are really really fast but the other 100,000 take 100 times longer okay we really looking for",
    "start": "750600",
    "end": "756320"
  },
  {
    "text": "consistent performance as much as we can possibly get when you average is that a microsc or a nanc or a picoc or a ftoc",
    "start": "756320",
    "end": "764160"
  },
  {
    "text": "or like which one is that one that's a micro is it microsc okay when you average a microsc per request every nanc",
    "start": "764160",
    "end": "772040"
  },
  {
    "text": "counts okay so some of these things might look like we're going to an awful amount of trouble for very small gains",
    "start": "772040",
    "end": "778240"
  },
  {
    "text": "but when you ampf those gains over millions of requests per second as as it happens in benchmarks they add up and",
    "start": "778240",
    "end": "783880"
  },
  {
    "text": "we'll see some demonstrations of that and you know an interest and we don't cover it in here really but you don't know how they're going to add up a lot",
    "start": "783880",
    "end": "789440"
  },
  {
    "text": "of the time till you perf test it right I mean and you guys have a whole perf rig in the shop that's just does that we",
    "start": "789440",
    "end": "795680"
  },
  {
    "text": "have more than one actually so we have it's like a Dev per frig that we have in our team room that we've automated so",
    "start": "795680",
    "end": "801279"
  },
  {
    "text": "that when we do a pull request we can automatically run you know pergs using the app that you're going to run later",
    "start": "801279",
    "end": "807040"
  },
  {
    "text": "um and we can see the um see the result of you know a particular Branch or particular po request and then we actually have a dedicated per team per",
    "start": "807040",
    "end": "814079"
  },
  {
    "text": "reliability team who have what we call the Big Iron they have like the 48 core servers with the bazillion gigabit",
    "start": "814079",
    "end": "819639"
  },
  {
    "text": "network cards and all the rest of it and we can sort of get them to do more concentrated runs on particular issues",
    "start": "819639",
    "end": "824800"
  },
  {
    "text": "and find things like that so cool all right what we going to look at next memory optimization you know I was just thinking as you were saying this but",
    "start": "824800",
    "end": "830519"
  },
  {
    "text": "those things there that list there we manage manage memory reuse well-known strings and consuming things that really",
    "start": "830519",
    "end": "837920"
  },
  {
    "text": "kind of breaks down to like three different things that we're talking about here we've got memory we've got IO and we've got algorithmic op",
    "start": "837920",
    "end": "844360"
  },
  {
    "text": "optimizations right so starting with memory all right let's look at memory so I talked about the fact that we allocate",
    "start": "844360",
    "end": "850759"
  },
  {
    "start": "845000",
    "end": "1082000"
  },
  {
    "text": "and we manage our own memory okay rather than just allocating memory when we need it before we go out which is what you're",
    "start": "850759",
    "end": "856279"
  },
  {
    "text": "generally taught to do as a net developer when you first start out hey it's garbage collected it's memory manag you have to worry about this stuff well",
    "start": "856279",
    "end": "861600"
  },
  {
    "text": "when you're doing this type of um deep perf analysis which you may have to do on very large applications as well you",
    "start": "861600",
    "end": "867440"
  },
  {
    "text": "need to understand um how memory gets allocated you need to understand how garbage collection works and how the multi Heap generational Heap",
    "start": "867440",
    "end": "874160"
  },
  {
    "text": "Works in net um and so what we do is we pin a very large amount of memory up front when the application starts and we",
    "start": "874160",
    "end": "880839"
  },
  {
    "text": "move it into the large object Heap so in net there are multiple heaps so memory is you know we have a stack which is",
    "start": "880839",
    "end": "887040"
  },
  {
    "text": "where like the the stack frames of the current methods and the variables in those methods are stored then we have the Heap where objects and those sort of",
    "start": "887040",
    "end": "892519"
  },
  {
    "text": "things live and then we have more than one Heap so we have a gen zero Heap a gen one Heap and a gen two Heap that's",
    "start": "892519",
    "end": "897560"
  },
  {
    "text": "what generational heaps right then we have this other magic Heap called the large object Heap for stuff that's just",
    "start": "897560",
    "end": "903079"
  },
  {
    "text": "too big to put in those other ones you generally don't want things to end up over there cuz I don't think it even",
    "start": "903079",
    "end": "908920"
  },
  {
    "text": "gets collected I think it gets optimized occasionally someone will yell out if I'm I'm talking out of my butt but the",
    "start": "908920",
    "end": "914920"
  },
  {
    "text": "large object heat which I think is like over 83 kiloby or something if the object it gets put over in there um it's",
    "start": "914920",
    "end": "921279"
  },
  {
    "text": "very special it's put there so that we don't have large objects stalling up and fragmenting the generational heaps that",
    "start": "921279",
    "end": "927320"
  },
  {
    "text": "generally churn a lot more during application so we allocate a butload on memory we stick it over in the large object heat and we pin it do you know",
    "start": "927320",
    "end": "933279"
  },
  {
    "text": "technically what that buttload is is it is I think if you actually go to um",
    "start": "933279",
    "end": "938880"
  },
  {
    "text": "Urban Dictionary there's a definition for buttload and it's smaller than a crap load but bigger than a ton all",
    "start": "938880",
    "end": "945639"
  },
  {
    "text": "um so I'm not actually kidding go to Urban Dictionary and look at those terms it's hilarious um so I actually don't",
    "start": "945639",
    "end": "952199"
  },
  {
    "text": "know I think we allocate uh like something I can't remember okay",
    "start": "952199",
    "end": "957600"
  },
  {
    "text": "some megabytes and I think it might be configurable if it's not we're working on making it configurable now cool um",
    "start": "957600",
    "end": "963880"
  },
  {
    "text": "and then we reuse that memory over and over and over again okay so this allows us by pinning that memory we allows us",
    "start": "963880",
    "end": "969279"
  },
  {
    "text": "just to use the normal net bite array apis rather than just allocating native memory and trying to do a lots of P",
    "start": "969279",
    "end": "975000"
  },
  {
    "text": "invoke interrupt all the time we just use standard B arrays it's you know normally the idea is you want like net",
    "start": "975000",
    "end": "981440"
  },
  {
    "text": "to manage things for you if it's like yeah I don't know it's probably going to be this or this but in this case you know you've got some very specific",
    "start": "981440",
    "end": "987560"
  },
  {
    "text": "information about what sort of memory you need how long it's going to last how you're going to be pooling it and that's",
    "start": "987560",
    "end": "993079"
  },
  {
    "text": "a good time where you do want to take control yeah and this isn't this isn't uncommon for people who are building servers in net if you're building a",
    "start": "993079",
    "end": "999160"
  },
  {
    "text": "database server like you're actually building a server not just using someone else's right people who build these types of long running server",
    "start": "999160",
    "end": "1005240"
  },
  {
    "text": "applications tend to end up having to do this type of memory management in order to manage the GC that happens and we'll",
    "start": "1005240",
    "end": "1011240"
  },
  {
    "text": "see some impact of that later on so we break this stuff up into slabs each slab containing a memory blocks and these are",
    "start": "1011240",
    "end": "1016480"
  },
  {
    "text": "just like chunks right we break it up into chunks of of memory a bit like this so we have a big memory pool we um we",
    "start": "1016480",
    "end": "1023199"
  },
  {
    "text": "create a bunch of slabs we usually create I think if we create the same number of slabs is the same number of threads or the same it might be the",
    "start": "1023199",
    "end": "1030079"
  },
  {
    "text": "number of pools so we have a number of threads that we use for libuv right for Io and then we create a memory pool for",
    "start": "1030079",
    "end": "1036079"
  },
  {
    "text": "each one of those so that we don't have threads you know trying to hop across different parts of the memory pool and",
    "start": "1036079",
    "end": "1041400"
  },
  {
    "text": "then we we we further break that up into slabs and then we break those slabs up into blocks and we do all the fancy things like trying to align the block",
    "start": "1041400",
    "end": "1047798"
  },
  {
    "text": "size to the CPU cach lines and all the type of stuff that um that we're still you know frankly we're still investigating and we we figure out by",
    "start": "1047799",
    "end": "1054440"
  },
  {
    "text": "doing real world testing um and then what happens is while the application is running these blocks get leased",
    "start": "1054440",
    "end": "1060440"
  },
  {
    "text": "something is done and then we throw them back into the pool yep uh so there we go 128 kilobyte uh size of the slabs we do",
    "start": "1060440",
    "end": "1066760"
  },
  {
    "text": "multiples of those and then we increase those as we need more memory when the application is running and then we do 4K",
    "start": "1066760",
    "end": "1072600"
  },
  {
    "text": "blocks uh to fit in pages and Pages there is meant to be some alignment with you know memory pages",
    "start": "1072600",
    "end": "1079280"
  },
  {
    "text": "CP the so the request cuses all that toess",
    "start": "1079280",
    "end": "1084720"
  },
  {
    "start": "1082000",
    "end": "1220000"
  },
  {
    "text": "it's as soon as the request comes ine and desktop so the question is does",
    "start": "1084720",
    "end": "1090520"
  },
  {
    "text": "any of this change between core and desktop no so this is all castal logic and Castel runs basically exactly the",
    "start": "1090520",
    "end": "1096120"
  },
  {
    "text": "same whether you're running on NET Framework or net core um so we said strings are expensive but they're very",
    "start": "1096120",
    "end": "1102360"
  },
  {
    "text": "handy and they're what HTTP is built on and so we have a bunch of uh code that",
    "start": "1102360",
    "end": "1107400"
  },
  {
    "text": "we use to kind of re reuse known strings so we don't have to allocate them over and over and over again as requests come in these are really common strings that",
    "start": "1107400",
    "end": "1114320"
  },
  {
    "text": "you see in HTTP requests who's ever looked at an HTTP request on The Wire right okay you would have seen these",
    "start": "1114320",
    "end": "1119840"
  },
  {
    "text": "Bites come in over the wire asky bites that represent either like the protocol version down here at the end of the",
    "start": "1119840",
    "end": "1125960"
  },
  {
    "text": "first line or maybe the verb that you're using which is generally on the first is always on the first line along with the",
    "start": "1125960",
    "end": "1131280"
  },
  {
    "text": "path and then you have headers which I'm not showing here these are all verbs at the moment um that you are also",
    "start": "1131280",
    "end": "1138720"
  },
  {
    "text": "wellknown right we have header names that are well known as well but for these particular ones which are generally all involved in passing that",
    "start": "1138720",
    "end": "1144600"
  },
  {
    "text": "first line of the HTTP request there's something fairly interesting about these strings does anyone know what it",
    "start": "1144600",
    "end": "1153000"
  },
  {
    "text": "is they're all capitals that's not well that is actually interesting but we're not going to show the code that makes that interesting there is actually some",
    "start": "1154880",
    "end": "1161039"
  },
  {
    "text": "really interesting do we do we show that code no I mean there's some really interesting code that does a a very fast",
    "start": "1161039",
    "end": "1167840"
  },
  {
    "text": "case a case insensitive comparison um but we're not showing that code it's kind of cool look it up um no these all",
    "start": "1167840",
    "end": "1174840"
  },
  {
    "text": "are what eight characters or less mhm right which means that they all fit in a",
    "start": "1174840",
    "end": "1183759"
  },
  {
    "text": "long all right so what do I mean by that well every one of these characters is an asy bite right which is what eight Bits",
    "start": "1184440",
    "end": "1191480"
  },
  {
    "text": "And if I have eight of them that would give me 64 bits and how big is a long it's a 64 bit integer right so I can",
    "start": "1191480",
    "end": "1198720"
  },
  {
    "text": "represent every one of these strings as a single number in 64 bits which is nice",
    "start": "1198720",
    "end": "1205159"
  },
  {
    "text": "it means I don't have to allocate a string to do a string comparison when I'm looking at the incoming bites in the",
    "start": "1205159",
    "end": "1210480"
  },
  {
    "text": "wire and go well is this hp1 or hp11 or is this a get or is this a post I can just compare um to a particular number",
    "start": "1210480",
    "end": "1217960"
  },
  {
    "text": "so we've got some code I think that shows this right there it is so this is",
    "start": "1217960",
    "end": "1223159"
  },
  {
    "start": "1220000",
    "end": "1270000"
  },
  {
    "text": "actually just getting bites for known strings so there's some of the I talked",
    "start": "1223159",
    "end": "1228679"
  },
  {
    "text": "about there some other ones here which are known headers like connection keep alive and stuff we allocate these strings up front once by calling get",
    "start": "1228679",
    "end": "1236679"
  },
  {
    "text": "bites on them we get them as asky bites we stick them in a static this is the only time you really see Statics in aset",
    "start": "1236679",
    "end": "1242080"
  },
  {
    "text": "core code we avoid Statics like the plague but for things like this it's really good because they just don't change right um and then we use these we",
    "start": "1242080",
    "end": "1249799"
  },
  {
    "text": "even have one for a space look at this bite space bites space that's",
    "start": "1249799",
    "end": "1255520"
  },
  {
    "text": "awesome and we have one for courage return line feed cage return line feed which initi to be one one is how you",
    "start": "1255520",
    "end": "1261400"
  },
  {
    "text": "denote the end of headers before the body starts okay so that's how we can find we're looking at a bunch of bites we need to figure out where the headers",
    "start": "1261400",
    "end": "1267320"
  },
  {
    "text": "end well we need to find those bites okay all right",
    "start": "1267320",
    "end": "1272360"
  },
  {
    "text": "so right so how do we do that so here is the first line of an HTTP request get",
    "start": "1272360",
    "end": "1278679"
  },
  {
    "text": "some URL path protocol version so we read eight bytes at a time now it does",
    "start": "1278679",
    "end": "1284640"
  },
  {
    "text": "change depending on the architecture but for the sake of Simplicity we'll just say it's eight bytes so then we go and check that 8 bytes against the",
    "start": "1284640",
    "end": "1291279"
  },
  {
    "text": "precomputed version of those eight bytes doing that so there's the get aski string is",
    "start": "1291279",
    "end": "1297960"
  },
  {
    "text": "long that I talked about so that is the word get followed by a space followed by",
    "start": "1297960",
    "end": "1305080"
  },
  {
    "text": "four null characters in asy so that's my mask that is what I'm looking for right",
    "start": "1305080",
    "end": "1311120"
  },
  {
    "text": "and then to do the comparison I have my mask four characters which is four nulls",
    "start": "1311120",
    "end": "1316240"
  },
  {
    "text": "at the End plus the the opposite of the other end and then there's my get and so we go back to the other slide all right",
    "start": "1316240",
    "end": "1323919"
  },
  {
    "text": "so I need to figure out whether the string that comes in at the beginning begins with get that's really all I'm",
    "start": "1323919",
    "end": "1330360"
  },
  {
    "text": "trying to figure out okay in as fast as possible uh way as as as I can possibly do and we want to avoid allocating a",
    "start": "1330360",
    "end": "1337480"
  },
  {
    "text": "string in order to do that it would really suck if we had to allocate new memory every single time I just wanted",
    "start": "1337480",
    "end": "1342640"
  },
  {
    "text": "to figure out what type of request it was okay so that's what we do reuse no string so",
    "start": "1342640",
    "end": "1349440"
  },
  {
    "text": "this is effectively the method that does this get known method out of the memory pool iterator so this is the handle on",
    "start": "1349440",
    "end": "1356320"
  },
  {
    "text": "the memory pool remember all the bites are coming from the memory pool they've come in off the socket libuv has put them into the memory pool we pass it",
    "start": "1356320",
    "end": "1363679"
  },
  {
    "text": "into this method saying please see if at the beginning of the memory pool right now this block of memory if there is a",
    "start": "1363679",
    "end": "1369919"
  },
  {
    "text": "known string okay so it uses those pre-allocated bites it uses the mask and if indeed it matches an HB get method",
    "start": "1369919",
    "end": "1377200"
  },
  {
    "text": "then we return turn true so this is obviously shortened you can see where it says dot dot dot this is basically a",
    "start": "1377200",
    "end": "1382960"
  },
  {
    "text": "massive a massive combination of if statements that does it for every single known string that we have and we didn't",
    "start": "1382960",
    "end": "1388600"
  },
  {
    "text": "write a lot of this code by hand we generated this code up front because there's more than 10 of these strings",
    "start": "1388600",
    "end": "1393919"
  },
  {
    "text": "there are literally dozens and dozens and dozens of them and we have some other tricky comparisons that you'll see in a minute that would be a pain to",
    "start": "1393919",
    "end": "1400480"
  },
  {
    "text": "write by hand okay so why do we do this to avoid allocating strings on every single",
    "start": "1400480",
    "end": "1407000"
  },
  {
    "start": "1402000",
    "end": "1766000"
  },
  {
    "text": "request which of um can lead to GC pressure so let's have a look at a demo of what happens if we don't do that all",
    "start": "1407000",
    "end": "1412159"
  },
  {
    "text": "right so I'm going to first of all what I did here is I went and I grabbed the",
    "start": "1412159",
    "end": "1417400"
  },
  {
    "text": "I've got a few things um I've got the repo for which is uh aspet core or",
    "start": "1417400",
    "end": "1423440"
  },
  {
    "text": "aspnet and then Kestrel right so I grab this and then I also grabb The Benchmark",
    "start": "1423440",
    "end": "1428760"
  },
  {
    "text": "code so the he mentioned that they have a a perf rig so The Benchmark",
    "start": "1428760",
    "end": "1434840"
  },
  {
    "text": "repo is the tech and power benchmarks and then it's also got some cool stuff for like infrastructure to run it make",
    "start": "1434840",
    "end": "1441559"
  },
  {
    "text": "it easier to so this is our benchmarks app that we use to do our benchmarking basically y so what I did is I mashed",
    "start": "1441559",
    "end": "1447760"
  },
  {
    "text": "the two of them together I built my own custom version of kestrel because I think I can do better than you guys okay",
    "start": "1447760",
    "end": "1453320"
  },
  {
    "text": "and and I rning job on it is okay well we'll see here's I'm trying out for",
    "start": "1453320",
    "end": "1458960"
  },
  {
    "text": "we'll get to find out in real let's see so what I've done here and my my poll request got denied the first time and I",
    "start": "1458960",
    "end": "1466039"
  },
  {
    "text": "believe that's because of my I'm a Bad Monkey exception so I've commented that out and I'm ready to go",
    "start": "1466039",
    "end": "1472799"
  },
  {
    "text": "now so I'm gonna I'm G to give this another shot so I'm going to run this so",
    "start": "1472799",
    "end": "1478279"
  },
  {
    "text": "I'm going to say net Run Okay so we're running your custom version of The Benchmark app which is using a custom",
    "start": "1478279",
    "end": "1484320"
  },
  {
    "text": "version of krol yes that you have improved yes okay yes okay I have not changed the benchmarks I have improved",
    "start": "1484320",
    "end": "1491120"
  },
  {
    "text": "kol okay right so let's uh so this is what happens when you run the Benchmark app it tells you what scenarios you want to turn on and then it boots up the web",
    "start": "1491120",
    "end": "1498000"
  },
  {
    "text": "server or the application with just those scenarios enabled because we don't want to you know pay for scenarios that we don't want to measure so in the way",
    "start": "1498000",
    "end": "1504120"
  },
  {
    "text": "I've been doing benchmarking is just by refreshing by hand you know you can just hit F5 and hold it down okay and it will",
    "start": "1504120",
    "end": "1510679"
  },
  {
    "text": "do like lots of requests and then but but I also there's there's this app that's going to make it a little bit",
    "start": "1510679",
    "end": "1516080"
  },
  {
    "text": "easier so nettling was an app written by a gentleman in the community who watched a version of this talk in Oslo and then",
    "start": "1516080",
    "end": "1522279"
  },
  {
    "text": "was inspired to go and write a load test generator and he wrote it in WPF and.net it's awesome so now we get pretty visual",
    "start": "1522279",
    "end": "1529240"
  },
  {
    "text": "load generator so we're going to use this to show John's improved kol yes okay so I've got this running I've got",
    "start": "1529240",
    "end": "1535720"
  },
  {
    "text": "that running and one other thing I want to bring up is I want to bring up this cool thing that Matt Warren wrote so",
    "start": "1535720",
    "end": "1542520"
  },
  {
    "text": "Matt Warren wrote a GC visualizer oh nice and this thing anyone use this this",
    "start": "1542520",
    "end": "1548480"
  },
  {
    "text": "is really cool so you can get that here and again I improved it I did not",
    "start": "1548480",
    "end": "1553799"
  },
  {
    "text": "improve this at all I hacked it like crazy to make it run um um specifically",
    "start": "1553799",
    "end": "1559000"
  },
  {
    "text": "for this because the way that the way this is hosted is you've actually",
    "start": "1559000",
    "end": "1565760"
  },
  {
    "text": "got net running inside a net running inside I see a lot of code xes there",
    "start": "1565760",
    "end": "1572120"
  },
  {
    "text": "that's for sure so we're looking at that oh I see that's because you typed net",
    "start": "1572120",
    "end": "1577799"
  },
  {
    "text": "run yes which then La the application you could have you could have compiled it first and did dot net assembly name I",
    "start": "1577799",
    "end": "1583039"
  },
  {
    "text": "knew we' only had one but either is fine all right so let's do this um so I've got",
    "start": "1583039",
    "end": "1588240"
  },
  {
    "text": "this going this is going to show gc's um as I go through and manually",
    "start": "1588240",
    "end": "1594360"
  },
  {
    "text": "refresh I I will see some of them appear so if I go so you've done like hang on how many",
    "start": "1594360",
    "end": "1603000"
  },
  {
    "text": "requests did you do 15 and you've already done two Gen 2 collections well",
    "start": "1603000",
    "end": "1608600"
  },
  {
    "text": "let's see if it goes better if I run the let's give it some more load give it some load oh dear so I'm assuming red",
    "start": "1608600",
    "end": "1615320"
  },
  {
    "text": "isn't good it's not so good okay um so yeah red is gen two so yeah it is doing what throughput",
    "start": "1615320",
    "end": "1622880"
  },
  {
    "text": "are we getting yeah 598 request per second that's not quite as fast that's",
    "start": "1622880",
    "end": "1628360"
  },
  {
    "text": "actually worse than the tweet from Kelly a year ago you've actually regressed castol back to before we did all this",
    "start": "1628360",
    "end": "1634840"
  },
  {
    "text": "work so yeah okay I better back out my changes so what were your changes exactly well okay so here let me I'm",
    "start": "1634840",
    "end": "1643120"
  },
  {
    "text": "going to stop the and and I can look here this is what's allocated yeah",
    "start": "1643120",
    "end": "1648320"
  },
  {
    "text": "oh so it actually tells you how you did a thousand Gen 2 collections okay that okay all right well just a few then so I",
    "start": "1648320",
    "end": "1655760"
  },
  {
    "text": "am allocating some strings here I didn't think that would is that a problem let's",
    "start": "1655760",
    "end": "1664159"
  },
  {
    "text": "let's Okay so I comment it may look ridiculous but if we weren't doing all this that code is effectively what we",
    "start": "1664679",
    "end": "1671279"
  },
  {
    "text": "would be doing when reading head right we be building headers every single time yeah may not be monkey but",
    "start": "1671279",
    "end": "1678720"
  },
  {
    "text": "all right so I did net run because the it's it's rebuilding all that there it is we'll enable Jason again yep all",
    "start": "1678720",
    "end": "1686080"
  },
  {
    "text": "right so now let's I got to rerun this GC",
    "start": "1686080",
    "end": "1691120"
  },
  {
    "text": "visualizer get that one over there we'll get this so again here as I go through",
    "start": "1691120",
    "end": "1696399"
  },
  {
    "text": "and refresh a bit so we hit like a gen two okay not really seeing much happen that's pretty good I don't even see a",
    "start": "1696399",
    "end": "1701760"
  },
  {
    "text": "zero maybe your code was a little better let's run this so there's a zero all",
    "start": "1701760",
    "end": "1708399"
  },
  {
    "text": "is that a one there's a zero one and there's a zero there's a zero okay there's a zero",
    "start": "1708399",
    "end": "1715559"
  },
  {
    "text": "all right okay so that one's a little bit better so that's the impact of not allocating head of strings every single",
    "start": "1715559",
    "end": "1720960"
  },
  {
    "text": "time a request comes in okay um in this case is a combination of headers and like reading that first line doing the",
    "start": "1720960",
    "end": "1727039"
  },
  {
    "text": "dispatching but you can see why we care about this stuff okay and and you know as I was going through I was playing",
    "start": "1727039",
    "end": "1733120"
  },
  {
    "text": "with different values it really was like it takes off pretty quick like as soon as you start get getting those GCS the",
    "start": "1733120",
    "end": "1738279"
  },
  {
    "text": "request just and gen zero is practically free gen one is a little bit slower but",
    "start": "1738279",
    "end": "1743519"
  },
  {
    "text": "doesn't block Gen 2 is the one that will really kill you like Gen 2 when you're not using work uh server GC pauses the",
    "start": "1743519",
    "end": "1749720"
  },
  {
    "text": "process which isn't really good um and then onet framework we have these great things like multicore gen C and",
    "start": "1749720",
    "end": "1755679"
  },
  {
    "text": "background GC and all this type of stuff um we have a lot of that stuff in net core too but if you can avoid Gen 2 you",
    "start": "1755679",
    "end": "1760919"
  },
  {
    "text": "want to avoid gen two so that's good live and learn all right let's go to IO app let's go to IO all right right so",
    "start": "1760919",
    "end": "1767519"
  },
  {
    "start": "1766000",
    "end": "1826000"
  },
  {
    "text": "about libuv libuv so libuv is this crossplatform multi multiplatform and it",
    "start": "1767519",
    "end": "1772720"
  },
  {
    "text": "focuses on it's just IO right it's not really just asynchronous IO so they let you talk to the file system they let you",
    "start": "1772720",
    "end": "1778880"
  },
  {
    "text": "talk to sockets and they have an event loop it's based on like an event Loop model because it was originally built",
    "start": "1778880",
    "end": "1783919"
  },
  {
    "text": "for node which is a single-threaded JavaScript event Loop and so they have a thread that starts up and then you have",
    "start": "1783919",
    "end": "1789840"
  },
  {
    "text": "to schedule work into that thread okay and then when if you give it a socket it will schedule work on that socket on",
    "start": "1789840",
    "end": "1795880"
  },
  {
    "text": "that thread so you have to be very careful that you don't block the thread which is why the async is important",
    "start": "1795880",
    "end": "1801159"
  },
  {
    "text": "because if you do work on that thread you can't read bites off the network card all right and if you're running a server and you've got lots and lots of",
    "start": "1801159",
    "end": "1807159"
  },
  {
    "text": "connections that's bad because now all of your network sockets stall which is why they also say in node you have to be very careful about calling blocking apis",
    "start": "1807159",
    "end": "1814039"
  },
  {
    "text": "and why all their apis are nonblocking yep two other things I learned about lib UV the UV well there's the unicorn and",
    "start": "1814039",
    "end": "1820360"
  },
  {
    "text": "there's the Velociraptor that's what it stands for so that's that's actually their logo their logo",
    "start": "1820360",
    "end": "1826039"
  },
  {
    "start": "1826000",
    "end": "1904000"
  },
  {
    "text": "y so like a T-Rex all right so in order to make this",
    "start": "1826039",
    "end": "1832080"
  },
  {
    "text": "asynchronous so you know we did async net shipped task in net 4 TPL then we in",
    "start": "1832080",
    "end": "1838440"
  },
  {
    "text": "net 45 we introduced asyn or we with C was it five back then or six I can't remember one of them um which is nice",
    "start": "1838440",
    "end": "1845720"
  },
  {
    "text": "right you can do a weit blah something that returns a task um and you get nice sequential looking code that's actually",
    "start": "1845720",
    "end": "1851919"
  },
  {
    "text": "non-blocking under the covers because the C compiler writes all the horrible callback code for you",
    "start": "1851919",
    "end": "1857760"
  },
  {
    "text": "you can also write custom awaiting code so rather than having to have a code that returns a task which means the task",
    "start": "1857760",
    "end": "1864760"
  },
  {
    "text": "has to be allocated you can have a custom awaiter you can Implement a couple of interfaces um so you can do",
    "start": "1864760",
    "end": "1871480"
  },
  {
    "text": "what we're doing here effectively um we map async AWA in net to the Callback",
    "start": "1871480",
    "end": "1877960"
  },
  {
    "text": "model that lib UV uses so libuv uses an async callback model just like node does we want to map that to the nicer C idiom",
    "start": "1877960",
    "end": "1884720"
  },
  {
    "text": "of async weight so we do that by way of a custom a waiter so we call on read it passes data",
    "start": "1884720",
    "end": "1892840"
  },
  {
    "text": "via the async callbacks okay so when incoming complete is called we get a uh",
    "start": "1892840",
    "end": "1900000"
  },
  {
    "text": "a number that tells us how much was read and if there was an error we get that number as well um we could have wrapped the entire",
    "start": "1900000",
    "end": "1907399"
  },
  {
    "text": "thing in a stream which is kind of the other primitive that people use in net for doing IO okay any type of input",
    "start": "1907399",
    "end": "1912919"
  },
  {
    "text": "output over a sequential set of bites um but each a wait call to stream. read",
    "start": "1912919",
    "end": "1919360"
  },
  {
    "text": "async would only give you the last bites from the last call back so there's kind of an impedance mismatch between how",
    "start": "1919360",
    "end": "1925600"
  },
  {
    "text": "stream works and how libuv Works libuv wants to push you data by calling your",
    "start": "1925600",
    "end": "1931799"
  },
  {
    "text": "method that you gave it where a stream wants you to call a method on it when you're ready for data does that make",
    "start": "1931799",
    "end": "1937240"
  },
  {
    "text": "sense so you kind of have this pushpull model so we kind of we kind of inverted it and did a push all the way through",
    "start": "1937240",
    "end": "1942960"
  },
  {
    "text": "and mapped it to asyn we and then the stream doesn't appear until you get the code all the way up in as. core when you",
    "start": "1942960",
    "end": "1949279"
  },
  {
    "text": "go HTTP request. you know body or response. body and we give you a stream API there um the memory would also need",
    "start": "1949279",
    "end": "1955679"
  },
  {
    "text": "to be copied if we did a stream so rather than having libuv push us the bytes we would have to say read a sync",
    "start": "1955679",
    "end": "1961919"
  },
  {
    "text": "and give it a buffer and it would fill it into there and now we're effectively having to allocate a buffer up front all",
    "start": "1961919",
    "end": "1967120"
  },
  {
    "text": "right so we can await this socket input with our customer waiter here it is these are the two thing oh that's really I critical notify completion is what you",
    "start": "1967120",
    "end": "1973320"
  },
  {
    "text": "implement to be able to await your thing and then we we await incoming so in",
    "start": "1973320",
    "end": "1978880"
  },
  {
    "text": "consuming stop we wait that and then that returns as soon as there is data available for us so once that await call",
    "start": "1978880",
    "end": "1985000"
  },
  {
    "text": "that async call has finished we know that there's data in the memory pool now ready for us to read okay so it's",
    "start": "1985000",
    "end": "1990720"
  },
  {
    "start": "1990000",
    "end": "2068000"
  },
  {
    "text": "asynchronous all the way down libuv pushes bites in the memory pool and then tells us when it's finished VI the await call all right and we can skip this this",
    "start": "1990720",
    "end": "1998240"
  },
  {
    "text": "is really isn't that important let's just look at the graphic oh let's look at this okay so what we've got is here's lib UV and it's going to be pushing out",
    "start": "1998240",
    "end": "2004600"
  },
  {
    "text": "bites right so it's filling up that buffer and then eventually Kestrel says Hey I want some bites and it starts",
    "start": "2004600",
    "end": "2010880"
  },
  {
    "text": "reading them right and and the important thing here is that they're really kind of decoupled like lib UV as it gets",
    "start": "2010880",
    "end": "2016760"
  },
  {
    "text": "bites it lays them down and Kestrel whenever it is ready to read it goes and",
    "start": "2016760",
    "end": "2021799"
  },
  {
    "text": "gets some bites and so it's just going to continue pulling and as far as",
    "start": "2021799",
    "end": "2027480"
  },
  {
    "text": "Kestrel knows there's just a bunch of bites there and it reads until they done so here lib UV is done it's hit the end",
    "start": "2027480",
    "end": "2034120"
  },
  {
    "text": "of the stream right Castrol is going to keep reading and now it hits the end of the stream and then it's so we have asynchronous stream reading from castal",
    "start": "2034120",
    "end": "2041080"
  },
  {
    "text": "Reading bites when it's ready cuz we're paing right we're paing HTP we're not just reading bites we have to do work",
    "start": "2041080",
    "end": "2047519"
  },
  {
    "text": "and libuv is solely responsible for getting bites off the network card and sticking them into the buffer Forest our",
    "start": "2047519",
    "end": "2052919"
  },
  {
    "text": "code that's passing HTTP doesn't happen on the libuv thread that's why this is asynchronous libuv is this is literally",
    "start": "2052919",
    "end": "2058839"
  },
  {
    "text": "multi-threaded libuv has a thread that is reading bites off the car putting them in the buffer that we told it to",
    "start": "2058839",
    "end": "2064040"
  },
  {
    "text": "and then we have a net you know worker thread that we just off through the through the the thread pole that's uh",
    "start": "2064040",
    "end": "2069638"
  },
  {
    "start": "2068000",
    "end": "2152000"
  },
  {
    "text": "reading those bites out of the buffer when that awake call returns and then passing them through our passing logic",
    "start": "2069639",
    "end": "2074679"
  },
  {
    "text": "to build up the HTP model before we call your code so we're just moving kind of pointers to the ends of the string we",
    "start": "2074679",
    "end": "2080358"
  },
  {
    "text": "call them like curses right like we have a single contigous pit of memory and remember these blocks could be anywhere",
    "start": "2080359",
    "end": "2086200"
  },
  {
    "text": "we allocated them all up front we allocate more as we need to and as you move from block to block you could be",
    "start": "2086200",
    "end": "2092280"
  },
  {
    "text": "jumping between areas of memory we just make it all look like one continuous stream to the call code so it's very",
    "start": "2092280",
    "end": "2097640"
  },
  {
    "text": "easy to understand so we start reading at incoming start we keep reading castl",
    "start": "2097640",
    "end": "2102960"
  },
  {
    "text": "is the green and blue is kind of where libuv is that right so we keep reading we say incoming complete incoming start",
    "start": "2102960",
    "end": "2108960"
  },
  {
    "text": "again stuff is coming and then we consume up the top and we can read all the way through to the end even though",
    "start": "2108960",
    "end": "2115160"
  },
  {
    "text": "maybe this memory came in off the network card in two discret blocks the calling code doesn't have to know that",
    "start": "2115160",
    "end": "2120240"
  },
  {
    "text": "it just says I'm going to start reading it'll keep reading while there's bites it could be a pause but I'm busy pausing",
    "start": "2120240",
    "end": "2125440"
  },
  {
    "text": "and then I keep reading by the time I get back there there's more bites and then when I'm finished I finish it's kind of like when you're eating at one",
    "start": "2125440",
    "end": "2130760"
  },
  {
    "text": "of those steak houses and they keep bringing you more steak yes and you're just and you don't even care as long they keep showing up and bring great",
    "start": "2130760",
    "end": "2136640"
  },
  {
    "text": "analogy and I'm just eating the steak and of course sometimes what happens is you finish and there's nothing on the table it's more like Yamcha right like",
    "start": "2136640",
    "end": "2142520"
  },
  {
    "text": "you can eat the stuff and maybe they stop and oh there's no food and that's when you have a pause I have to stop now",
    "start": "2142520",
    "end": "2147800"
  },
  {
    "text": "but hopefully they keep bringing food before you finished eating so it's very much like that that's a good analogy actually um right you should use that",
    "start": "2147800",
    "end": "2153560"
  },
  {
    "start": "2152000",
    "end": "2328000"
  },
  {
    "text": "all right socket output right behind buffings that was incoming what about outgoing bites okay what kind of tricks",
    "start": "2153560",
    "end": "2159400"
  },
  {
    "text": "do we have to do there okay who's ever seen a diagram that looks like this most of you have if you're web",
    "start": "2159400",
    "end": "2165720"
  },
  {
    "text": "developers what if you do F12 and look at the network stack right yeah it looks a little bit like this right so this is",
    "start": "2165720",
    "end": "2171040"
  },
  {
    "text": "a diagram that is showing calls of response. right top to bottom and then a",
    "start": "2171040",
    "end": "2177079"
  },
  {
    "text": "lapse time from left to right okay the starting on the left hand side",
    "start": "2177079",
    "end": "2183599"
  },
  {
    "text": "here the yellow Is Us turning you a task that is marked as complete remember",
    "start": "2183599",
    "end": "2190400"
  },
  {
    "text": "writing is asynchronous so we say response. WR 16 kiloby please and we say",
    "start": "2190400",
    "end": "2196720"
  },
  {
    "text": "yeah no problem we give you back a task that's finished now it hasn't really finished because what we did is we wrote",
    "start": "2196720",
    "end": "2202599"
  },
  {
    "text": "it into a part of the memory pool into a buffer the right buffer and we just sit",
    "start": "2202599",
    "end": "2207800"
  },
  {
    "text": "there and wait now it's a little bit like nagling everyone know what nagling is this is Network concept where when you push stuff out over a network card",
    "start": "2207800",
    "end": "2214720"
  },
  {
    "text": "it's not particularly efficient to push every bite if you're sending a bite at a time you usually buffer up a little bit",
    "start": "2214720",
    "end": "2220040"
  },
  {
    "text": "of that stuff down in the driver and then you flush it out over the wire okay there's a lot of overhead with the headers and all that stuff as far like",
    "start": "2220040",
    "end": "2226760"
  },
  {
    "text": "yeah in in moving some bits of data it's better to move a bigger bit at once and like ethernet headers when the there is",
    "start": "2226760",
    "end": "2232800"
  },
  {
    "text": "a there is an overhead involved with sending bites over copper or over fiber right you have to wrap it in other stuff",
    "start": "2232800",
    "end": "2238520"
  },
  {
    "text": "so it's better to kind of Chunk it up a bit so we do that in kestal on your behalf oops um up to about 64 kiloby",
    "start": "2238520",
    "end": "2247520"
  },
  {
    "text": "okay so you call right async you await the task it finishes so you call right async again you do that four times which",
    "start": "2247520",
    "end": "2254319"
  },
  {
    "text": "fills the buffer all right we've started sending it out okay so you can see by",
    "start": "2254319",
    "end": "2259359"
  },
  {
    "text": "like the third call we've already started sending that bites out by the time you get to the fifth call the first",
    "start": "2259359",
    "end": "2265240"
  },
  {
    "text": "one the first task is actually now truly complete we've actually flushed the buff around and we've started filling up the",
    "start": "2265240",
    "end": "2271359"
  },
  {
    "text": "next buffer that we're going to write out so here is that decoupling again it's kind of this a parallelism going on",
    "start": "2271359",
    "end": "2276800"
  },
  {
    "text": "you're calling right we give you back a task that we tell you is actually finished but it it hasn't like we've",
    "start": "2276800",
    "end": "2281960"
  },
  {
    "text": "actually put that in a little bit of memory and then we've got another thread the libuv thread not your thread that it's flushing those bites out over the",
    "start": "2281960",
    "end": "2287800"
  },
  {
    "text": "wire now you can catch up to it you can get to the point where you're eating yum chow and you finish all the food on the",
    "start": "2287800",
    "end": "2292839"
  },
  {
    "text": "table right before they said that is call five and we give you back the orange incomplete task you sent more",
    "start": "2292839",
    "end": "2300280"
  },
  {
    "text": "data than we were able to flush out before it was actually finished so we give you back an incomplete task you should be calling await on that because",
    "start": "2300280",
    "end": "2307599"
  },
  {
    "text": "if you don't you just keep sending data you're just going to make that use more and more and more and more memory until we have a chance to drain it out so well",
    "start": "2307599",
    "end": "2314680"
  },
  {
    "text": "behaved calling code will always await response. WR async so that we you know have a chance to do that back off that",
    "start": "2314680",
    "end": "2320599"
  },
  {
    "text": "throttling all right and then that just completes add infinum right until the end so we have that nice decoupling of",
    "start": "2320599",
    "end": "2326319"
  },
  {
    "text": "the server to the client again cool cool so how about I run this demo I'll do the demo and you explain what's happening so",
    "start": "2326319",
    "end": "2333000"
  },
  {
    "start": "2328000",
    "end": "2415000"
  },
  {
    "text": "that's not good for what for the pipelining oh so let's talk about pipelining yeah okay so as part of the benchmarks uh that we",
    "start": "2333000",
    "end": "2340280"
  },
  {
    "text": "do with tech and power there's this concept of HTTP pipelining so hb11",
    "start": "2340280",
    "end": "2345760"
  },
  {
    "text": "supports something known as h2b pipelining which is effectively the ability for the client to send more than",
    "start": "2345760",
    "end": "2351480"
  },
  {
    "text": "run one request to the server over the same socket all right so remember HTP is",
    "start": "2351480",
    "end": "2356839"
  },
  {
    "text": "just laid on top of TCP I open a fat pipe up to the server and then I use that fat pipe by sending one request at",
    "start": "2356839",
    "end": "2363319"
  },
  {
    "text": "a time that's how wb11 works that's what everyone does right was the diagram on the left pipelining says I can send you",
    "start": "2363319",
    "end": "2370800"
  },
  {
    "text": "n requests before I've received responses from the server and then I'll",
    "start": "2370800",
    "end": "2376040"
  },
  {
    "text": "stop and then the server has to send me back the responses in order you can't like overlap that's what hb2 does which",
    "start": "2376040",
    "end": "2384079"
  },
  {
    "text": "is really nice um but hb11 you can only do that way now no browser today does this okay but if you're building a",
    "start": "2384079",
    "end": "2390240"
  },
  {
    "text": "client like you're doing a web API and you have a chatty console app that's talking to the server you can totally do",
    "start": "2390240",
    "end": "2395560"
  },
  {
    "text": "this right if you have an HTP client library that supports pipelining or like you said HTTP http2 is coming and that",
    "start": "2395560",
    "end": "2402160"
  },
  {
    "text": "will yeah an http2 if you're lucky enough to be able to use it right now it supports an even more advanced version of this called connection multiplexing",
    "start": "2402160",
    "end": "2408680"
  },
  {
    "text": "which effec lets you pipeline out of aut which is just nuts it's basically ethernet over hdp over ethernet right",
    "start": "2408680",
    "end": "2413839"
  },
  {
    "text": "it's just crazy um so the benefit of this in terms of benchmarking is that it",
    "start": "2413839",
    "end": "2419240"
  },
  {
    "text": "allows us to send more request to the server with less latency so we can put more load on the server to see how",
    "start": "2419240",
    "end": "2425079"
  },
  {
    "text": "really really fast it is so again it's not real world but it allows us to get higher synthetic numbers by stressing",
    "start": "2425079",
    "end": "2431119"
  },
  {
    "text": "the server harder if I had to wait for the full latency round trip on an entire",
    "start": "2431119",
    "end": "2436520"
  },
  {
    "text": "socket before I could send the next request I would need more sockets to load up the server for the same amount",
    "start": "2436520",
    "end": "2443000"
  },
  {
    "text": "of requests does that make sense right so if I run if if if uh John runs the same test that he did before so what did",
    "start": "2443000",
    "end": "2449880"
  },
  {
    "text": "you do before you had 11,000 requests per second when you were doing no pipelining Y and then you're going to bump up the pipelining to 10 requests",
    "start": "2449880",
    "end": "2456839"
  },
  {
    "text": "and then you're going to run it again so it sends 10 requests and then it waits for 10 responses then it sends 10 waits for 10 responses and we'll see that our",
    "start": "2456839",
    "end": "2463640"
  },
  {
    "text": "throughput should go up I hope right so now it's nearly four times as high all",
    "start": "2463640",
    "end": "2469760"
  },
  {
    "text": "right which is good it means that we can stress the server and really see how",
    "start": "2469760",
    "end": "2474839"
  },
  {
    "text": "well it speaks HTTP now the way that this really relates to real world perf again doesn't really but it allows us to",
    "start": "2474839",
    "end": "2481359"
  },
  {
    "text": "really stress the server and see it um you let it let it really um sort of stretch its legs",
    "start": "2481359",
    "end": "2487160"
  },
  {
    "text": "um there are a bunch of things that we do in K to make this specific scenario scenario nice and fast you want to avoid",
    "start": "2487160",
    "end": "2492520"
  },
  {
    "text": "like calls out to the kernel in between every request like CIS calls to do this the fact that we have that buffer that's being filled asynchronously by the libuv",
    "start": "2492520",
    "end": "2499119"
  },
  {
    "text": "thread while we read from a net worker thread means that we can effectively on a given socket we can sit in a while",
    "start": "2499119",
    "end": "2505880"
  },
  {
    "text": "loop and just say is there another request is there another request okay call the app Funk is there another request okay call the app Funk and we",
    "start": "2505880",
    "end": "2512440"
  },
  {
    "text": "can sit in a tight Loop without unwinding the stack and just process the 16 the 10 request in this case if we're",
    "start": "2512440",
    "end": "2518200"
  },
  {
    "text": "doing pipelining all right cool especially good in benchmarking also because the requests are generally quite",
    "start": "2518200",
    "end": "2523839"
  },
  {
    "start": "2519000",
    "end": "2581000"
  },
  {
    "text": "small all right we're not we're not doing a lot so we can fit more of them in a single ethernet frame how do we",
    "start": "2523839",
    "end": "2529560"
  },
  {
    "text": "coordinate The libu Ether oh goodness with chocolates and Roses basically um",
    "start": "2529560",
    "end": "2536119"
  },
  {
    "text": "so this is multi-threaded krol is a multi-threaded server it's even multi-threaded in the scope of one connection as we've just talked about",
    "start": "2536119",
    "end": "2542520"
  },
  {
    "text": "right we have the libuv thread and we have net threads doing the actual HTP passing and actually running your code",
    "start": "2542520",
    "end": "2547880"
  },
  {
    "text": "your code never runs on the libu V thread unlike node all the code runs on",
    "start": "2547880",
    "end": "2553160"
  },
  {
    "text": "all the code and the node app runs on the liby V thread right so we used a bunch of C Primitives to do that you",
    "start": "2553160",
    "end": "2558359"
  },
  {
    "text": "know locks monitor trenter we try and avoid locks as much as possible we actually think the thing that's holding us back right now from getting even",
    "start": "2558359",
    "end": "2564119"
  },
  {
    "text": "higher per is mostly contention which is devil to really diagnose getting",
    "start": "2564119",
    "end": "2570720"
  },
  {
    "text": "really getting good data on contention and you know profiles will give you some but like we're talking about all the way down to Kernel level contention",
    "start": "2570720",
    "end": "2576800"
  },
  {
    "text": "um so we're really working hard to try and avoid as much of those lockings as possible it's also the reason we have a",
    "start": "2576800",
    "end": "2582319"
  },
  {
    "start": "2581000",
    "end": "2605000"
  },
  {
    "text": "different memory pool per thread and all that type of stuff so we can avoid locks that we don't have to do all right cool algorithms algorithms yeah so um",
    "start": "2582319",
    "end": "2590359"
  },
  {
    "text": "operations and and so I think here I just want to dig into the sequence want dig into is there anything else you want",
    "start": "2590359",
    "end": "2596800"
  },
  {
    "text": "to say about no there are some methods that these are basically methods that exist on those memory blocks so when we're looking at a block we can say peek",
    "start": "2596800",
    "end": "2603400"
  },
  {
    "text": "take or seek yeah right so look at the memory so look what seek does so seek is",
    "start": "2603400",
    "end": "2608960"
  },
  {
    "start": "2605000",
    "end": "2681000"
  },
  {
    "text": "the method that we call in order to read bites off the incoming wire in order to read HTTP like the stuff we talked about",
    "start": "2608960",
    "end": "2614880"
  },
  {
    "text": "at the beginning so we might have to call that one to four times to consume the beginning line depending on how long your url is right because the URL can be",
    "start": "2614880",
    "end": "2621200"
  },
  {
    "text": "up to a certain size um we have to call it twice per header because we need to get the beginning and we need to get the",
    "start": "2621200",
    "end": "2626760"
  },
  {
    "text": "end and the header can be up to like 4K and it can also be split across lines you know H should be one1 support",
    "start": "2626760",
    "end": "2632400"
  },
  {
    "text": "splitting headers across lines with a continuation character these are the things you learn when to write a web server um and we find the first",
    "start": "2632400",
    "end": "2639800"
  },
  {
    "text": "occurrence of any one to three given characters why is that useful well spaces are very useful in that first",
    "start": "2639800",
    "end": "2646079"
  },
  {
    "text": "line because it says HTTP 1.1 space URL space verb right or the other way around",
    "start": "2646079",
    "end": "2652760"
  },
  {
    "text": "I can't remember I never get it right and then we do courage returns between the starting line and each header or the",
    "start": "2652760",
    "end": "2657880"
  },
  {
    "text": "courage return with the continuation character and then once all the headers are finished we have to find carriage return carriage return so we can then",
    "start": "2657880",
    "end": "2663839"
  },
  {
    "text": "start reading the body we're finished passing HTP now we just need to give you the rest of the request okay so we",
    "start": "2663839",
    "end": "2670400"
  },
  {
    "text": "need really really really fast ways of reading sets of bites at a time to look for patents sounds like a great job for",
    "start": "2670400",
    "end": "2677880"
  },
  {
    "text": "vectorization yeah do you want to bring up the simd if you I don't there's actually a Intel SL Intel website that",
    "start": "2677880",
    "end": "2685880"
  },
  {
    "text": "very briefly anyone use simd or vectorization who's heard of um",
    "start": "2685880",
    "end": "2692640"
  },
  {
    "text": "ABX no who's heard of SSE back from the pen there we go see these these people",
    "start": "2692640",
    "end": "2698359"
  },
  {
    "text": "showing their age I remember when the Pentium came out as well I was there too like it's all right Richard so I'm",
    "start": "2698359",
    "end": "2704160"
  },
  {
    "text": "looking ssse was the something streaming extensions or MMX was the other one multimedia extensions on the Pentium 4 I",
    "start": "2704160",
    "end": "2710520"
  },
  {
    "text": "think it was they're basically extra processor instructions internet I have a bit of",
    "start": "2710520",
    "end": "2717119"
  },
  {
    "text": "what do you want me to look at simd uh if you look up Intel simd okay maybe",
    "start": "2717119",
    "end": "2723280"
  },
  {
    "text": "AVX so streaming simd extension go to these ones uh that one down",
    "start": "2723280",
    "end": "2729079"
  },
  {
    "text": "streaming the overview yeah so they extra CPU instructions that let you",
    "start": "2729079",
    "end": "2734880"
  },
  {
    "text": "operate on numbers of varying lengths depending on what version of the processor you have how much money you",
    "start": "2734880",
    "end": "2740040"
  },
  {
    "text": "paid and how new it is uh that is not the one that I wanted but never mind there is one with a really nice like",
    "start": "2740040",
    "end": "2746000"
  },
  {
    "text": "graph like a really nice diagram that shows you what oh wow let's just like pick all the random graphs so that",
    "start": "2746000",
    "end": "2751680"
  },
  {
    "text": "that's the one right there actually the one on the left one with the with the red and the green and the blue",
    "start": "2751680",
    "end": "2757000"
  },
  {
    "text": "perfect so s and AVX 128 instructions let you operate on numbers of various",
    "start": "2757000",
    "end": "2763359"
  },
  {
    "text": "sizes or blocks of btes right so rather than you having to Loop through 64 bits",
    "start": "2763359",
    "end": "2770200"
  },
  {
    "text": "one by one or bite by bite eight times to look at a bite you can say in one CPU",
    "start": "2770200",
    "end": "2775520"
  },
  {
    "text": "instruction please compare these 64 bits to this 64-bit mask and give me a result",
    "start": "2775520",
    "end": "2781760"
  },
  {
    "text": "in one clock right one clock cycle one very very so this is very common use when you're doing like number crunching",
    "start": "2781760",
    "end": "2787599"
  },
  {
    "text": "obviously if you're doing video card development that sort of stuff parallelization and sing simd is very popular simd stands for single",
    "start": "2787599",
    "end": "2793559"
  },
  {
    "text": "instruction multiple data right single CPU instruction multiple data being done okay so it's basically it's for free",
    "start": "2793559",
    "end": "2799480"
  },
  {
    "text": "you've got to do four comparisons for four header lookups or whatever do them all at once do them all at once if we",
    "start": "2799480",
    "end": "2804520"
  },
  {
    "text": "can brilliant if you're trying to do patent matching over bites okay cool which we are which we are and so we use",
    "start": "2804520",
    "end": "2810280"
  },
  {
    "start": "2809000",
    "end": "3135000"
  },
  {
    "text": "the system. numerics namespace which was released a couple years ago on net it",
    "start": "2810280",
    "end": "2815400"
  },
  {
    "text": "relies on on the Ryu jit the new Jitter that came out with net 46 and is the Jitter that's used in uh net core to be",
    "start": "2815400",
    "end": "2821960"
  },
  {
    "text": "able to turn your I code into machine code that uses these magic instructions",
    "start": "2821960",
    "end": "2827839"
  },
  {
    "text": "we don't write native code we write C and then the Jitter turns it into really nice AMD code uh simd code for us so",
    "start": "2827839",
    "end": "2834559"
  },
  {
    "text": "here's a simplified version I have I'm looking for hello world carriage return line feed okay imagine it's a header and",
    "start": "2834559",
    "end": "2841119"
  },
  {
    "text": "so these are the bites that represent that value okay so what we do",
    "start": "2841119",
    "end": "2846760"
  },
  {
    "text": "is we look one register at a time one CPU register size so depending on your",
    "start": "2846760",
    "end": "2851920"
  },
  {
    "text": "CPU that can be anywhere from 64 bits to 512 bits because and I think there's",
    "start": "2851920",
    "end": "2857400"
  },
  {
    "text": "even they're even going to 10 24 bits on the on the new zons these operations can even be higher than the native register",
    "start": "2857400",
    "end": "2862880"
  },
  {
    "text": "on the CPU because these get their own registers all right we're getting right down to Hardware stuff here so I can say",
    "start": "2862880",
    "end": "2868440"
  },
  {
    "text": "right let me take one registers worth of data and for here we'll 56 here 56 bits here just for convenience so it fits on",
    "start": "2868440",
    "end": "2874400"
  },
  {
    "text": "the slide and then we give it a a vector which is a comparison please compare these btes to these btes it's like a",
    "start": "2874400",
    "end": "2881640"
  },
  {
    "text": "matrix math you know you do Matrix a bit like that right so you do that and you get a result and the result here is",
    "start": "2881640",
    "end": "2887880"
  },
  {
    "text": "equal to zero because every bite is equal to zero so we've done two operations we've done the equ we've done",
    "start": "2887880",
    "end": "2893480"
  },
  {
    "text": "the comparison and we did the equality check only cost us two uh instructions so far we're looking for that carriage",
    "start": "2893480",
    "end": "2899119"
  },
  {
    "text": "return line feed we're looking for carriage return line that's all we care about so then we go to the next one which by the way the carriage return",
    "start": "2899119",
    "end": "2905280"
  },
  {
    "text": "line is here you can see the z d is the",
    "start": "2905280",
    "end": "2910720"
  },
  {
    "text": "courage return that's what we're looking for so we're masking against the courage return so we run it again this time we",
    "start": "2910720",
    "end": "2916079"
  },
  {
    "text": "get a hit aha so this one doesn't equal zero so what we've done four",
    "start": "2916079",
    "end": "2921119"
  },
  {
    "text": "instructions and we've figured out that one of the characters and we know it's in the second half of the string is a",
    "start": "2921119",
    "end": "2927640"
  },
  {
    "text": "carriage of turn so now we have to find out which one it is all right so now we",
    "start": "2927640",
    "end": "2933680"
  },
  {
    "text": "have to find the first equal bite in the little block that we know that it's in so we operated on the register",
    "start": "2933680",
    "end": "2939440"
  },
  {
    "text": "size now we know a particular register size8 bytes let's say up byes has the",
    "start": "2939440",
    "end": "2944520"
  },
  {
    "text": "character we're interested in how do we find that character well the naive thing to do right would be just to Loop through every character we've gone from",
    "start": "2944520",
    "end": "2951280"
  },
  {
    "text": "a whole bunch down to eight let's just Loop no no no that's not fast enough you can do it quicker so we can do a quasi",
    "start": "2951280",
    "end": "2957359"
  },
  {
    "text": "tree search which is a little bit like a a binary search where we effectively compare half at a time until we get down",
    "start": "2957359",
    "end": "2964079"
  },
  {
    "text": "to where it is this is basic basically like I'm thinking of a number between one and 100 well is it greater or less than 50 corre right and then is it",
    "start": "2964079",
    "end": "2970720"
  },
  {
    "text": "greater or less than 75 you're just you're working your way in you're working way down so the worst case here",
    "start": "2970720",
    "end": "2975839"
  },
  {
    "text": "is was it n l or whatever it is I can't who who did com and you can tell me what this is no one see David F usually",
    "start": "2975839",
    "end": "2983240"
  },
  {
    "text": "answered that question for me he would be laughing he'd be laughing at me so in this case it's actually a worst case hit",
    "start": "2983240",
    "end": "2988599"
  },
  {
    "text": "because the character is right down at the end so we have to do an operation on the first half that puts us into the second then we do it there that puts us",
    "start": "2988599",
    "end": "2995280"
  },
  {
    "text": "in the the second half and then we have to do the last one there but instead of taking seven Cycles it took three okay",
    "start": "2995280",
    "end": "3002000"
  },
  {
    "text": "and which is the worst case right so that's kind of nice someone submitted this pull request like this insane",
    "start": "3002000",
    "end": "3007280"
  },
  {
    "text": "turnery operator with the little masks in it to make it work and I I guess you could even like over time you're",
    "start": "3007280",
    "end": "3012640"
  },
  {
    "text": "probably going to have your carriage return is more than four bites in you could even keep tweaking away you know what I mean and second half first and",
    "start": "3012640",
    "end": "3019599"
  },
  {
    "text": "come back whatever yeah or well that's going to be my pull request well if you're doing little Indian versus big",
    "start": "3019599",
    "end": "3024720"
  },
  {
    "text": "Indian as well backwards just don't do that with C it is actually mentioned somewhere in",
    "start": "3024720",
    "end": "3030160"
  },
  {
    "text": "the slides but we will make it work yeah this is actually this is just showing looking for it there we go the last",
    "start": "3030160",
    "end": "3036319"
  },
  {
    "text": "white and then there's something about some Quirk about why that is true I don't know it's some hex MTH all right",
    "start": "3036319",
    "end": "3042799"
  },
  {
    "text": "so at 1 million RPS is this really really worth this seems like an awful lot of trouble to go through just to",
    "start": "3042799",
    "end": "3048680"
  },
  {
    "text": "compare some strings pass them into variables that you can read in your application code right and to manage",
    "start": "3048680",
    "end": "3054119"
  },
  {
    "text": "bites coming off the wire well if we compare um just a raw Benchmark of",
    "start": "3054119",
    "end": "3059799"
  },
  {
    "text": "that one method the method I just showed you find first equal bite we sure it's faster there's the naive version which",
    "start": "3059799",
    "end": "3066160"
  },
  {
    "text": "just Loops over the bites there's the um slow version which I don't know what this I think the slow version was what",
    "start": "3066160",
    "end": "3071839"
  },
  {
    "text": "we had before and then the the one at the top is the one that the dude sent the pull request for okay so what do we",
    "start": "3071839",
    "end": "3078599"
  },
  {
    "text": "got the median is like with the difference between 890 NS versus 654 the standard deviation is much tighter which",
    "start": "3078599",
    "end": "3085160"
  },
  {
    "text": "is nice but you know it's not particularly massive but when you multiply that by a bunch of things I",
    "start": "3085160",
    "end": "3091720"
  },
  {
    "text": "think this next slide yeah most same people would just do that one right so then you go to the next we just Loop",
    "start": "3091720",
    "end": "3096880"
  },
  {
    "text": "over the bites right now when you've got bigger memory blocks now you're operating on 4K of",
    "start": "3096880",
    "end": "3103000"
  },
  {
    "text": "memory because someone sent a bloody huge cookie or something right now it starts to make sense right we've gone",
    "start": "3103000",
    "end": "3108799"
  },
  {
    "text": "from 4,000 NS down to 800 NS in order to find that courage return in that block",
    "start": "3108799",
    "end": "3114920"
  },
  {
    "text": "of memory CU often a single block of memory that we're operating on will contain four headers or maybe three",
    "start": "3114920",
    "end": "3121799"
  },
  {
    "text": "headers and then half of the next header and we have to you know seek through this and Pa them out as we go so we want",
    "start": "3121799",
    "end": "3127240"
  },
  {
    "text": "to do that as fast as possible so yeah it's worth it it makes a big difference when you make these uh implementation uh",
    "start": "3127240",
    "end": "3132440"
  },
  {
    "text": "changes and then you scale it up to larger sets of memory all right quickly finding known headers from bites okay so",
    "start": "3132440",
    "end": "3139559"
  },
  {
    "start": "3135000",
    "end": "3174000"
  },
  {
    "text": "oh we do have this code I thought we took this one out okay so case in sensitive comparison in his few so I talked about we have some code that does",
    "start": "3139559",
    "end": "3145839"
  },
  {
    "text": "case insensitive comparison we want to make sure that we fail as quick as possible because given a block um say",
    "start": "3145839",
    "end": "3151480"
  },
  {
    "text": "we've done what everything we've done so far we have a line we know it's a header and we' found the beginning the header name right we want to figure out is this",
    "start": "3151480",
    "end": "3158400"
  },
  {
    "text": "series of bites that I know to be a header name a header name that I've already seen before it's one that I know about is it connection or what's a",
    "start": "3158400",
    "end": "3165520"
  },
  {
    "text": "common header name user agent or you know one of the the many any common head names whatever except like we don't want",
    "start": "3165520",
    "end": "3171480"
  },
  {
    "text": "to allocate those strings over and over so how do we do that really really quickly and then how do we f if it's one we don't know about and then go off and",
    "start": "3171480",
    "end": "3177000"
  },
  {
    "start": "3174000",
    "end": "3188000"
  },
  {
    "text": "do the slow thing okay well headers are just asky which means you know just to remind you strings are just numbers",
    "start": "3177000",
    "end": "3182200"
  },
  {
    "text": "that's all they really are and so if you want to write incredibly fast string comparison code you do some math y like",
    "start": "3182200",
    "end": "3190400"
  },
  {
    "text": "that this is interns we get a bunch of interns for this code I am not even going to try to",
    "start": "3190400",
    "end": "3197599"
  },
  {
    "text": "explain this and I mean the code is fascinating hopefully one thing that you'll do after this is go and look",
    "start": "3197599",
    "end": "3202799"
  },
  {
    "text": "through like it's not a huge repo and you can look through it online it's fascinating code even just looking through the pull requests there's",
    "start": "3202799",
    "end": "3208640"
  },
  {
    "text": "usually a bunch of active pull requests just to look at Deltas even if you don't want to just dive in just look at some deltas and see the type of changes being",
    "start": "3208640",
    "end": "3214200"
  },
  {
    "text": "made we didn't write this code by hand no this code was generated so we wrote a",
    "start": "3214200",
    "end": "3219799"
  },
  {
    "text": "tool that you feed it a set of known header strings and then it generates you the case insensitive comparison code",
    "start": "3219799",
    "end": "3227119"
  },
  {
    "text": "using bit shifting um for All the known headers that we care about yep okay we'll look at that in a second but this",
    "start": "3227119",
    "end": "3232839"
  },
  {
    "text": "one goes through and shows like how we're doing it right so this is actually looking for cash control right oh right",
    "start": "3232839",
    "end": "3240319"
  },
  {
    "text": "sure I could have read that this is like this is literally like reading the Matrix isn't it yeah so if we",
    "start": "3240319",
    "end": "3248119"
  },
  {
    "text": "we okay so yeah so that is that is it and",
    "start": "3248119",
    "end": "3254000"
  },
  {
    "text": "there's there's long sections that do ex like I got on Twitter because I",
    "start": "3254000",
    "end": "3259480"
  },
  {
    "text": "said I don't know how to do bit I don't do bitwise operations every day like maybe I've done them once in my career",
    "start": "3259480",
    "end": "3265839"
  },
  {
    "text": "congratulations to you if you do this stuff every day good or not or not but like man but this is this is cool this",
    "start": "3265839",
    "end": "3272839"
  },
  {
    "start": "3270000",
    "end": "3374000"
  },
  {
    "text": "is the stuff about how how it was generated so this is the code that generates the code yeah and you can go",
    "start": "3272839",
    "end": "3278119"
  },
  {
    "text": "in let me see I've got that open actually so here there's this known headers thing and so I mean this is like",
    "start": "3278119",
    "end": "3286000"
  },
  {
    "text": "literally just string templ so we're actually using C 6 string interpolation as the templating language for",
    "start": "3286000",
    "end": "3291920"
  },
  {
    "text": "generating C mhm meta yeah so like literally it's just lists of known I",
    "start": "3291920",
    "end": "3298160"
  },
  {
    "text": "mean it's all this is cheating right I mean we know that there well we' every good developer is lazy right why write",
    "start": "3298160",
    "end": "3304079"
  },
  {
    "text": "this code by hand if I can just do it once we know that there's like we've got a a bunch of strings coming in we've got",
    "start": "3304079",
    "end": "3309920"
  },
  {
    "text": "to do some something with it and then turn some strings out yeah but we have this information we know these strings",
    "start": "3309920",
    "end": "3315440"
  },
  {
    "text": "we know what they're going to be most of them anyway like we know the common ones so let's let's optimize the super common",
    "start": "3315440",
    "end": "3320880"
  },
  {
    "text": "ones and then if we get a custom string we'll do the slow thing they'll allocate it stick in a dictionary do all that and speaking of dictionaries like",
    "start": "3320880",
    "end": "3326880"
  },
  {
    "text": "ultimately when you get the headers generally you look them up in a dictionary right that's a special dictionary it's not the dictionary andet",
    "start": "3326880",
    "end": "3332200"
  },
  {
    "text": "turns out the dictionary andet is really great if you have like 10,000 entries if you generally have seven or 12 it's",
    "start": "3332200",
    "end": "3338799"
  },
  {
    "text": "extremely expensive to create one of those on every request when you're doing 5 million requests per second trust me so we have a custom dictionary type that",
    "start": "3338799",
    "end": "3345799"
  },
  {
    "text": "implements our dictionary of string that's optimized for when you have like seven headers right and then it just",
    "start": "3345799",
    "end": "3350839"
  },
  {
    "text": "like has Fields inside of it and then it falls back to a real dictionary behind theen scenes for when you have more than",
    "start": "3350839",
    "end": "3356079"
  },
  {
    "text": "that all right yeah so here's that generated code and it's literally just going through how many lines is it",
    "start": "3356079",
    "end": "3364359"
  },
  {
    "text": "um so close to 10,000 yeah so close I think you should send a p request I get to 10,000 fix the white space yep okay I'll",
    "start": "3366640",
    "end": "3374920"
  },
  {
    "start": "3374000",
    "end": "3389000"
  },
  {
    "text": "I'll resharper it resharper it can you imagine oh can someone please do that",
    "start": "3374920",
    "end": "3380640"
  },
  {
    "text": "can someone open that and just tell me send me a tweet with a screenshot of what Rara does on that file",
    "start": "3380640",
    "end": "3386039"
  },
  {
    "text": "that's awesome so yeah we're using C 6 interpolation to do that so so this is",
    "start": "3386039",
    "end": "3392000"
  },
  {
    "start": "3389000",
    "end": "3427000"
  },
  {
    "text": "fast code that figures out how many ones are in a this is just a random one that we found like there's no story around",
    "start": "3392000",
    "end": "3398599"
  },
  {
    "text": "this other than here's a crazy method that uses bit shifting to figure out how many ones are in along you're",
    "start": "3398599",
    "end": "3405520"
  },
  {
    "text": "welcome take this and use it use it in your MVC yeah",
    "start": "3405520",
    "end": "3412920"
  },
  {
    "text": "yeah yeah and then this I mean I mean this is the extent over time like right measuring things and this is actually",
    "start": "3412920",
    "end": "3418760"
  },
  {
    "text": "looking at the ilil code that shows that it's faster in cases when you're comparing this is I guess we're looking",
    "start": "3418760",
    "end": "3424440"
  },
  {
    "text": "at can you zoom in where it says we got a fixed bite we got a fixed bite array so we got fixed of bite array pointer",
    "start": "3424440",
    "end": "3431640"
  },
  {
    "start": "3427000",
    "end": "3446000"
  },
  {
    "text": "array generates that versus a fixed of a b array pointer of an empty array of a",
    "start": "3431640",
    "end": "3438000"
  },
  {
    "text": "cast AR I don't even know what those instructions mean it's less I so it's probably quicker cuz there less",
    "start": "3438000",
    "end": "3444400"
  },
  {
    "text": "instruction right so I think yeah we we've some",
    "start": "3444400",
    "end": "3449559"
  },
  {
    "start": "3446000",
    "end": "3467000"
  },
  {
    "text": "amazing tweaks found by some very like senior people in theet team said oh I figured out that I could just directly",
    "start": "3449559",
    "end": "3455400"
  },
  {
    "text": "take this part of memory and just cast it to a long with a native pointer and",
    "start": "3455400",
    "end": "3460599"
  },
  {
    "text": "that was three Cycles quicker than just like running it through int or whatever or like casting it naturally like okay great thanks for that that's awesome it",
    "start": "3460599",
    "end": "3467400"
  },
  {
    "start": "3467000",
    "end": "3593000"
  },
  {
    "text": "did show up on a profile we not do doing this randomly so after all this work where do we think we're going to land so",
    "start": "3467400",
    "end": "3473280"
  },
  {
    "text": "we have submitted we've done the pr teen power for the first for the next round of testing and our hope right now is",
    "start": "3473280",
    "end": "3479960"
  },
  {
    "text": "that we're going to land somewhere around there in the very first round that we're going to be on here uh a",
    "start": "3479960",
    "end": "3486280"
  },
  {
    "text": "little bit well probably a little bit lower than netti when we run netti on our Hardware it goes a lot faster than",
    "start": "3486280",
    "end": "3492799"
  },
  {
    "text": "that so I'm not quite sure what was happening when this this test was run um we were getting like 8 million requests per second we're getting about 5 a half",
    "start": "3492799",
    "end": "3499880"
  },
  {
    "text": "million requests per second right now but we think net is going to be faster so I think we're going to be just under undertoe and netti and then in version",
    "start": "3499880",
    "end": "3507680"
  },
  {
    "text": "two we're going to try and make the top five right we're not going to stop like this is really important for us to",
    "start": "3507680",
    "end": "3513440"
  },
  {
    "text": "understand how is it that all of these other Frameworks that are written in uh",
    "start": "3513440",
    "end": "3520079"
  },
  {
    "text": "Java which is good actually because it's a great analog to net it's managed it",
    "start": "3520240",
    "end": "3525440"
  },
  {
    "text": "has GC right it runs on Windows and on Linux and everywhere else so it's actually nice that it's not just a bunch",
    "start": "3525440",
    "end": "3531799"
  },
  {
    "text": "of C++ stuff at the top or something else it's Java so we have no excuse we",
    "start": "3531799",
    "end": "3536880"
  },
  {
    "text": "really should be able to make this stuff as fast and these aren't know BS Frameworks like nedti is used by",
    "start": "3536880",
    "end": "3543039"
  },
  {
    "text": "thousands and thousands and thousands of servers it's packaged inside lots of other servers undertoe um I think is",
    "start": "3543039",
    "end": "3550559"
  },
  {
    "text": "written by a dude from red hat right so these are real servers and undertoe is actually really beautiful if you look at",
    "start": "3550559",
    "end": "3555880"
  },
  {
    "text": "the applications written in under to it looks like apet core it's all functions and lambdas and it's middleware it's",
    "start": "3555880",
    "end": "3561079"
  },
  {
    "text": "it's lovely they managed to get that performance even with nice programming Models All right so we'll see if it's",
    "start": "3561079",
    "end": "3567200"
  },
  {
    "text": "worth it and I think that's I think that's the end it so if you're interested in learning more about this",
    "start": "3567200",
    "end": "3573039"
  },
  {
    "text": "hit the repo on Castrol if this was just a geek out for you for an hour and you never want to see this code again I applaud you that's great that's what",
    "start": "3573039",
    "end": "3580240"
  },
  {
    "text": "we're employed to do is to figure out how to make this stuff this stuff F so you don't have to um but yeah thanks a",
    "start": "3580240",
    "end": "3585799"
  },
  {
    "text": "lot for coming and uh Happy coding on the",
    "start": "3585799",
    "end": "3592760"
  },
  {
    "text": "nose",
    "start": "3592760",
    "end": "3595760"
  }
]