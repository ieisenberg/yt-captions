[
  {
    "text": "thank you okay so it's time to start and then welcome",
    "start": "240",
    "end": "6779"
  },
  {
    "text": "everyone my name is Tobias and my name is Martin and we are from Omega Point",
    "start": "6779",
    "end": "13620"
  },
  {
    "text": "Gutenberg we do with Security reviews and the penetration tests and we also",
    "start": "13620",
    "end": "18660"
  },
  {
    "text": "work as developers the writing and maintaining code and we also help teams",
    "start": "18660",
    "end": "23699"
  },
  {
    "text": "with the application security so our thinking here today is a result",
    "start": "23699",
    "end": "30180"
  },
  {
    "text": "of years of developing applications as well as performing uh Security reviews",
    "start": "30180",
    "end": "37140"
  },
  {
    "text": "and then in the presentation we will talk about how automated tests can help us build secure apis and the code that",
    "start": "37140",
    "end": "43800"
  },
  {
    "text": "we will show is available at GitHub it will be the demos will be in.net c-sharp",
    "start": "43800",
    "end": "50579"
  },
  {
    "text": "but the the concepts that we present are valid for any framework and we also have",
    "start": "50579",
    "end": "56520"
  },
  {
    "text": "a repo in Yoda so uh we rarely see teams writing tests",
    "start": "56520",
    "end": "64680"
  },
  {
    "text": "for security and we believe that's a missed opportunity uh it's both quite",
    "start": "64680",
    "end": "71220"
  },
  {
    "text": "simple and very powerful to write tests that verify that your defenses are",
    "start": "71220",
    "end": "76560"
  },
  {
    "text": "working correctly and we also strongly believe that tests can help you better",
    "start": "76560",
    "end": "83400"
  },
  {
    "text": "understand your domain and its boundaries and today we'll talk about how to choose which test to write and",
    "start": "83400",
    "end": "91560"
  },
  {
    "text": "we'll also show you a bit of code of what that could look like yeah first we",
    "start": "91560",
    "end": "96960"
  },
  {
    "text": "need to talk about why pen tests tend to find the same vulnerabilities over and",
    "start": "96960",
    "end": "102360"
  },
  {
    "text": "over again yeah so this is the WASP top 10 list for",
    "start": "102360",
    "end": "108479"
  },
  {
    "text": "apis we know that it's from 2019 and it's",
    "start": "108479",
    "end": "113640"
  },
  {
    "text": "still very accurate it matches our experiences I think quite well",
    "start": "113640",
    "end": "118880"
  },
  {
    "text": "API security issues and how to deal with them has been known for several years",
    "start": "118880",
    "end": "125040"
  },
  {
    "text": "and there are of course many reasons for that one could be um not enough budget or team resources",
    "start": "125040",
    "end": "131400"
  },
  {
    "text": "to deal with Legacy code which might be hard to address but we often find that",
    "start": "131400",
    "end": "137239"
  },
  {
    "text": "vulnerabilities originate from unclear non-functional requirements and lack of",
    "start": "137239",
    "end": "142680"
  },
  {
    "text": "tests with security in mind so if these issues was found during development or",
    "start": "142680",
    "end": "148800"
  },
  {
    "text": "testing we would simply call them bugs not the vulnerabilities I think it would be great if we could",
    "start": "148800",
    "end": "155459"
  },
  {
    "text": "catch security bugs just as early as any other bugs before the application has",
    "start": "155459",
    "end": "162060"
  },
  {
    "text": "been deployed into production yeah it showed so here we have a pen test report",
    "start": "162060",
    "end": "168599"
  },
  {
    "text": "where we have findings represented by the red yellow and the green lines over",
    "start": "168599",
    "end": "174180"
  },
  {
    "text": "there and we address them or refine them to bugs in in the backlog but um even if",
    "start": "174180",
    "end": "181680"
  },
  {
    "text": "we represent them as bugs that there is an important difference between",
    "start": "181680",
    "end": "187260"
  },
  {
    "text": "functional bugs and those security bugs functional box they will often be",
    "start": "187260",
    "end": "194040"
  },
  {
    "text": "discovered by users so if they end up in production while security bugs they",
    "start": "194040",
    "end": "200400"
  },
  {
    "text": "won't be discovered by users and attackers who exploits them they will",
    "start": "200400",
    "end": "205739"
  },
  {
    "text": "probably not report them as well and and probably not be detected so the",
    "start": "205739",
    "end": "211080"
  },
  {
    "text": "vulnerabilities will stay open for a long time yeah so uh if we think about",
    "start": "211080",
    "end": "218280"
  },
  {
    "text": "vulnerabilities as normal bugs then security is just another non-functional",
    "start": "218280",
    "end": "223980"
  },
  {
    "text": "requirement and should be part of your quality assurance process with backlog",
    "start": "223980",
    "end": "229500"
  },
  {
    "text": "refinement prioritizations and all the other things that the teams do so in this case the TD",
    "start": "229500",
    "end": "238560"
  },
  {
    "text": "math tagged Security banks and we can see that the team has prototyped the two most critical findings for the next",
    "start": "238560",
    "end": "245340"
  },
  {
    "text": "release political hand in hand and how can we as the developers assert",
    "start": "245340",
    "end": "251819"
  },
  {
    "text": "high quality in the applications we build yeah so our industry has some very well",
    "start": "251819",
    "end": "259799"
  },
  {
    "text": "established patterns and practices for quality assurance and one of them is test driven development and we'll try to",
    "start": "259799",
    "end": "267180"
  },
  {
    "text": "show how to apply tdd to application security to help find those security",
    "start": "267180",
    "end": "272759"
  },
  {
    "text": "bugs during development and not off the deployment to production yeah so note",
    "start": "272759",
    "end": "277919"
  },
  {
    "text": "that we are not saying test first but we are saying tests before deployed to production",
    "start": "277919",
    "end": "284120"
  },
  {
    "text": "and that sounds completely obvious and simple but we do find that while most",
    "start": "284120",
    "end": "290699"
  },
  {
    "text": "teams do Implement automated tests these days we rarely see test aimed at",
    "start": "290699",
    "end": "296280"
  },
  {
    "text": "security so well written test cases can help us identify the boundaries of our",
    "start": "296280",
    "end": "302820"
  },
  {
    "text": "functionality and if we find that we have a hard time writing good clean",
    "start": "302820",
    "end": "309180"
  },
  {
    "text": "tests for security then I think there's a high probability that we have problems with understanding the domain that we're",
    "start": "309180",
    "end": "315960"
  },
  {
    "text": "working in yeah however in another way you can't secure what you don't",
    "start": "315960",
    "end": "321540"
  },
  {
    "text": "understand and the tests will help you understand and Define exactly how a function should work not just the happy",
    "start": "321540",
    "end": "328620"
  },
  {
    "text": "case and so now let us look at how we can apply it Theory thinking to our",
    "start": "328620",
    "end": "334199"
  },
  {
    "text": "application security yeah so Elizabeth a context",
    "start": "334199",
    "end": "340380"
  },
  {
    "text": "um we're thinking about for this presentation we will focus on apis obviously so picture A system that",
    "start": "340380",
    "end": "347160"
  },
  {
    "text": "consists of a set of apis and we have a set of callers that is consumed in those",
    "start": "347160",
    "end": "352740"
  },
  {
    "text": "apis some are ordinary uses some are high privileged administrators",
    "start": "352740",
    "end": "358919"
  },
  {
    "text": "and some more services perhaps other apis that are talking to us and we need",
    "start": "358919",
    "end": "365940"
  },
  {
    "text": "to restrict access to these apis in some way so that each caller should get at",
    "start": "365940",
    "end": "373560"
  },
  {
    "text": "the least amount of access possible yeah so if we look at basic requirements",
    "start": "373560",
    "end": "378840"
  },
  {
    "text": "for this context then we could express this in the following way",
    "start": "378840",
    "end": "384479"
  },
  {
    "text": "um callers should be able to consume the apis uh this would meet any functional",
    "start": "384479",
    "end": "391919"
  },
  {
    "text": "requirement and we would typically verify this during testing and development and when it works we'll test",
    "start": "391919",
    "end": "398819"
  },
  {
    "text": "the green we can deploy to production right yeah well um we note that the",
    "start": "398819",
    "end": "403979"
  },
  {
    "text": "requirement here is not perfectly clear it allows for the ordinary users to",
    "start": "403979",
    "end": "409620"
  },
  {
    "text": "access functionality intended for administrators and services and instead",
    "start": "409620",
    "end": "414720"
  },
  {
    "text": "I think that we could express this requirement as the caller should only be able to consume the apis and",
    "start": "414720",
    "end": "421259"
  },
  {
    "text": "functionality needed and we know that this sounds easy and completely obvious",
    "start": "421259",
    "end": "427340"
  },
  {
    "text": "but we often find that teams do not",
    "start": "427340",
    "end": "433259"
  },
  {
    "text": "express negative requirements like this and it",
    "start": "433259",
    "end": "439319"
  },
  {
    "text": "is essential for security that we identify boundaries and our requirements yeah because this is what attackers do",
    "start": "439319",
    "end": "445979"
  },
  {
    "text": "they try to misuse the functionality that we provide and break out of",
    "start": "445979",
    "end": "451740"
  },
  {
    "text": "boundaries and execution contacts but it's hard for teams to switch to the mindset of an attacker and try to misuse",
    "start": "451740",
    "end": "459120"
  },
  {
    "text": "their own system it's more natural for developers to think in terms of",
    "start": "459120",
    "end": "465360"
  },
  {
    "text": "non-functional requirements and the domain rules so if we do that we can limit the tech vectors without being",
    "start": "465360",
    "end": "472440"
  },
  {
    "text": "experts on attacks and so how can we verify this only yeah so I think that",
    "start": "472440",
    "end": "480360"
  },
  {
    "text": "for this uh we typically use negative test cases uh the users should not be",
    "start": "480360",
    "end": "486479"
  },
  {
    "text": "able to consume API 3 that will assert that um we can only reach API one and two",
    "start": "486479",
    "end": "493860"
  },
  {
    "text": "um I think that's another good example of these negative test cases is tenancy isolation perhaps the user should only",
    "start": "493860",
    "end": "501180"
  },
  {
    "text": "be able to access data that belongs to her organization",
    "start": "501180",
    "end": "506300"
  },
  {
    "text": "we rarely find requirements or test cases for tenancy isolation but most",
    "start": "506300",
    "end": "513180"
  },
  {
    "text": "teams that we talk to and work with they identify this threat among their top",
    "start": "513180",
    "end": "518279"
  },
  {
    "text": "concerns and it's also the number one on the OAS top 10 list for apis",
    "start": "518279",
    "end": "524279"
  },
  {
    "text": "yep so yeah so we mean with a secure API",
    "start": "524279",
    "end": "529440"
  },
  {
    "text": "and you can of course implement the secure API in many ways but you need to",
    "start": "529440",
    "end": "534779"
  },
  {
    "text": "handle these six steps in one way or the other for all requests yeah so this is",
    "start": "534779",
    "end": "540000"
  },
  {
    "text": "typically roughly what we are looking for when we review code from a security",
    "start": "540000",
    "end": "545820"
  },
  {
    "text": "perspective and based on experience we believe that you do need to address all",
    "start": "545820",
    "end": "551760"
  },
  {
    "text": "of these steps in order to get a strong solution yeah so in step one we validate that it",
    "start": "551760",
    "end": "559200"
  },
  {
    "text": "is traffic meant for us that is a valid request valid HTTP and we should get",
    "start": "559200",
    "end": "565800"
  },
  {
    "text": "this from the web server and the infrastructure protection step two we need to validate the token for API that",
    "start": "565800",
    "end": "572160"
  },
  {
    "text": "often means that Json web token and this which should do by using a well-established library or component we",
    "start": "572160",
    "end": "579180"
  },
  {
    "text": "should not implement this on ourselves so step one and two should only be",
    "start": "579180",
    "end": "585000"
  },
  {
    "text": "configuration and support from the web framework we use not our own custom",
    "start": "585000",
    "end": "590519"
  },
  {
    "text": "application code and then for step three we transform the access token to",
    "start": "590519",
    "end": "596459"
  },
  {
    "text": "permissions we need to some mechanism to go from authentication method in the",
    "start": "596459",
    "end": "602160"
  },
  {
    "text": "token represented by claims to reach fine-grained permission models and then",
    "start": "602160",
    "end": "608640"
  },
  {
    "text": "we're down to the domain logic and in step four we will validate the data in",
    "start": "608640",
    "end": "614580"
  },
  {
    "text": "the request that is semantically correct and in step 5 we verify that the caller",
    "start": "614580",
    "end": "620820"
  },
  {
    "text": "can perform the operation requested yeah and we should note that this is a",
    "start": "620820",
    "end": "625860"
  },
  {
    "text": "model and the order between step four and five might be different in different",
    "start": "625860",
    "end": "631080"
  },
  {
    "text": "implementations we should do basic",
    "start": "631080",
    "end": "636500"
  },
  {
    "text": "authentication or authorization at the routing level and this could be done in",
    "start": "636500",
    "end": "642000"
  },
  {
    "text": "a Gateway in front of us or a in the API using a controller if you're using.net",
    "start": "642000",
    "end": "649860"
  },
  {
    "text": "and but we should also note that this does not replace any",
    "start": "649860",
    "end": "656300"
  },
  {
    "text": "token validation in the API or authorization in the domain layers",
    "start": "656300",
    "end": "662959"
  },
  {
    "text": "for a strong solution we need to build with multiple defense layers",
    "start": "662959",
    "end": "668640"
  },
  {
    "text": "and the the core business domain layer should not assume that other layers has",
    "start": "668640",
    "end": "674339"
  },
  {
    "text": "done security like input validation or authorization so in the final step five we verify that",
    "start": "674339",
    "end": "683040"
  },
  {
    "text": "the caller has access to the actual data requested that's a very common mistake",
    "start": "683040",
    "end": "688380"
  },
  {
    "text": "to miss which lets us break out of tenancy isolation yeah so how do we find",
    "start": "688380",
    "end": "693839"
  },
  {
    "text": "out what kind of tests we need yeah so um for that a good place to start is of",
    "start": "693839",
    "end": "700560"
  },
  {
    "text": "course the owasp asvs but uh we also like the WASP web security testing guide",
    "start": "700560",
    "end": "708180"
  },
  {
    "text": "and we think that these two resources can be used as a sort of security",
    "start": "708180",
    "end": "713820"
  },
  {
    "text": "testing Baseline and that will help us identify test categories and for these",
    "start": "713820",
    "end": "721140"
  },
  {
    "text": "for this demo we've listed the most relevant ones for us",
    "start": "721140",
    "end": "726380"
  },
  {
    "text": "for your application you might identify additional categories we know for",
    "start": "726380",
    "end": "732779"
  },
  {
    "text": "example that we do not have compliance and regulations part of this list performance might be higher for your",
    "start": "732779",
    "end": "739380"
  },
  {
    "text": "application yep so let's look at how we can use this and here we have the API and we have the",
    "start": "739380",
    "end": "746820"
  },
  {
    "text": "test categories and in the DML we will add tests to verify that we cover these",
    "start": "746820",
    "end": "752760"
  },
  {
    "text": "categories we will use we will have system tests that run against the",
    "start": "752760",
    "end": "758700"
  },
  {
    "text": "instance server API and we will have unit tests where all Integrations are mocked and we will start with the system",
    "start": "758700",
    "end": "766680"
  },
  {
    "text": "tests and they will concern step one and two in our API model and test categories",
    "start": "766680",
    "end": "774000"
  },
  {
    "text": "authentication basic parts of authorization and Transport Security so",
    "start": "774000",
    "end": "780420"
  },
  {
    "text": "we will start by looking at the API let's drop down to some time for demo",
    "start": "780420",
    "end": "785639"
  },
  {
    "text": "time for demo so I've got an API running on my machine here uh it's uh",
    "start": "785639",
    "end": "793920"
  },
  {
    "text": "running on localhost I've got 5000 and please note that it's 2023 I'm running",
    "start": "793920",
    "end": "801660"
  },
  {
    "text": "https only there's no need for HTTP anymore I think even for local",
    "start": "801660",
    "end": "807000"
  },
  {
    "text": "development",
    "start": "807000",
    "end": "809540"
  },
  {
    "text": "so we can look at the controller yeah let's look at the controller",
    "start": "812300",
    "end": "817880"
  },
  {
    "text": "so this is a standard controller in csharp.net we notice that is that big",
    "start": "819839",
    "end": "826920"
  },
  {
    "text": "enough works yeah great so the round bass ramp for the controller is API slash products",
    "start": "826920",
    "end": "834660"
  },
  {
    "text": "I've got a an implementation of a single endpoint uh the endpoint takes a string",
    "start": "834660",
    "end": "841560"
  },
  {
    "text": "from the user part of the route it passes that ID to a repository abstraction and if we",
    "start": "841560",
    "end": "850440"
  },
  {
    "text": "find database entity we map that to a domain object and we return a 200 okay",
    "start": "850440",
    "end": "856740"
  },
  {
    "text": "with the product so uh when we review code uh this can be",
    "start": "856740",
    "end": "862980"
  },
  {
    "text": "a lot more complex than this obviously there can be a lot of things going on in the controller but this is the essence",
    "start": "862980",
    "end": "871019"
  },
  {
    "text": "that we want to lift out and typically what we're looking for as well it is",
    "start": "871019",
    "end": "876360"
  },
  {
    "text": "obviously a weak implementation there are some pretty pretty glaring vulnerabilities here for example",
    "start": "876360",
    "end": "884579"
  },
  {
    "text": "um simply returning the domain object back to the caller when we are leaving a",
    "start": "884579",
    "end": "890399"
  },
  {
    "text": "trust boundary like this for an API we are typically looking for dedicated data",
    "start": "890399",
    "end": "895500"
  },
  {
    "text": "contracts to represent the data we can also see that the input string",
    "start": "895500",
    "end": "901800"
  },
  {
    "text": "here the user input is passed directly to the repository layer that might be",
    "start": "901800",
    "end": "907440"
  },
  {
    "text": "fine the repository implementation could correctly encode this data use",
    "start": "907440",
    "end": "913260"
  },
  {
    "text": "parameterize queries for SQL statements Etc but at this point we simply do not",
    "start": "913260",
    "end": "918720"
  },
  {
    "text": "know that an injection is common so yeah yeah I know where my money is for that",
    "start": "918720",
    "end": "925699"
  },
  {
    "text": "and also perhaps the most obvious one there's a complete lack of Access",
    "start": "925699",
    "end": "930720"
  },
  {
    "text": "Control here perhaps there's 99 other endpoints that are perfectly implemented with full",
    "start": "930720",
    "end": "937500"
  },
  {
    "text": "access control and with just something gone wrong for this endpoint and is simply missing yep and before we move",
    "start": "937500",
    "end": "944760"
  },
  {
    "text": "on we would really want to point out that injection is mitigated with correct output encoding for the given context",
    "start": "944760",
    "end": "952620"
  },
  {
    "text": "and the input validation will only limit attack vectors but we should use both",
    "start": "952620",
    "end": "958079"
  },
  {
    "text": "when we build strong safe implementation of apis and also we could also note that there",
    "start": "958079",
    "end": "965459"
  },
  {
    "text": "were a lot of Overstock turn things here one is excessive data exposure returning too much we had injection and we had we",
    "start": "965459",
    "end": "972899"
  },
  {
    "text": "have different types of broken authorization here as well and um yeah so we can look at some",
    "start": "972899",
    "end": "981300"
  },
  {
    "text": "system tests this yeah so we have a set of system tests that we wrote for this",
    "start": "981300",
    "end": "988199"
  },
  {
    "text": "purpose we should start yeah let's see how it goes yeah",
    "start": "988199",
    "end": "994440"
  },
  {
    "text": "and um yeah well notes no it's not terrible no some some red some green we can start",
    "start": "994440",
    "end": "1001880"
  },
  {
    "text": "looking at the health tests yeah so let's have a look at the health tests so",
    "start": "1001880",
    "end": "1008600"
  },
  {
    "text": "a very important part of any API is availability what we've done here is that in addition",
    "start": "1008600",
    "end": "1016579"
  },
  {
    "text": "to the product standpoint we have two endpoints for availability liveness and readiness and the first System test says",
    "start": "1016579",
    "end": "1024199"
  },
  {
    "text": "that when I have an anonymous HTTP request and request the liveness",
    "start": "1024199",
    "end": "1030620"
  },
  {
    "text": "endpoint I should get a 204 no content back if I do have an anonymous client and try",
    "start": "1030620",
    "end": "1038298"
  },
  {
    "text": "the red in endpoint I expect a 401 and authorized back and",
    "start": "1038299",
    "end": "1044000"
  },
  {
    "text": "if I am authenticated I expect the Readiness endpoint to return a 200 okay",
    "start": "1044000",
    "end": "1050140"
  },
  {
    "text": "the version number of the software that I'm running and some information about",
    "start": "1050140",
    "end": "1055400"
  },
  {
    "text": "the.net runtime that my software is running on top of and here since we are authenticated in this Readiness endpoint",
    "start": "1055400",
    "end": "1062960"
  },
  {
    "text": "we can do deeper system checks like accessing a database or things like that so we often see the example for",
    "start": "1062960",
    "end": "1070640"
  },
  {
    "text": "Readiness endpoint you check that the database is available perhaps you query Downstream Integrations that you use and",
    "start": "1070640",
    "end": "1078500"
  },
  {
    "text": "we often see quite a lot of information being passed back to the caller as a result of that and there is absolutely",
    "start": "1078500",
    "end": "1084799"
  },
  {
    "text": "no need to expose that to an anonymous an anonymous client no because we should because that is quite a common mistake",
    "start": "1084799",
    "end": "1091220"
  },
  {
    "text": "as well that you have an anonymous live that starts out simple as a pinion point and then it grows and returns more and",
    "start": "1091220",
    "end": "1097760"
  },
  {
    "text": "more and maybe you could use this to do a denial of service of the system yep",
    "start": "1097760",
    "end": "1103820"
  },
  {
    "text": "then there's a system test that when we have an invalid token we expect that the",
    "start": "1103820",
    "end": "1109940"
  },
  {
    "text": "endpoint should return a 401 unauthorized uh good examples of invalid tokens is",
    "start": "1109940",
    "end": "1117080"
  },
  {
    "text": "perhaps a previously valid access token but that one that has expired another",
    "start": "1117080",
    "end": "1123200"
  },
  {
    "text": "good example is an ID token that one we see quite often I would say ID tokens",
    "start": "1123200",
    "end": "1129679"
  },
  {
    "text": "should never be useful for API calls the API should only accept access tokens and",
    "start": "1129679",
    "end": "1135799"
  },
  {
    "text": "the another test case would be invalid the signatures like the non issue that",
    "start": "1135799",
    "end": "1142280"
  },
  {
    "text": "is quite common depending on the framework you're working with and then there's a set of assistant",
    "start": "1142280",
    "end": "1148640"
  },
  {
    "text": "testers I'm not running uh while I'm working localhost because they require a",
    "start": "1148640",
    "end": "1154340"
  },
  {
    "text": "reverse proxy in front of them the first one is that I'm not accepting",
    "start": "1154340",
    "end": "1159559"
  },
  {
    "text": "traffic to http the next one is that the TLs version",
    "start": "1159559",
    "end": "1166760"
  },
  {
    "text": "that I'm requiring is version 1.3 and the final one is that all endpoints",
    "start": "1166760",
    "end": "1173900"
  },
  {
    "text": "should return a small set of security headers or wasp guidelines recommends",
    "start": "1173900",
    "end": "1180320"
  },
  {
    "text": "that we do return a set of security headers even if you do write an API they",
    "start": "1180320",
    "end": "1185960"
  },
  {
    "text": "are not that many and they are quite easy to implement so um",
    "start": "1185960",
    "end": "1191020"
  },
  {
    "text": "yeah that's a good good recommendation I think and yeah with that we can look at",
    "start": "1191020",
    "end": "1196880"
  },
  {
    "text": "the error tests yeah right so we have a system test that uh when an endpoint",
    "start": "1196880",
    "end": "1203660"
  },
  {
    "text": "throws an exception we expect a 500 and an empty result with no additional",
    "start": "1203660",
    "end": "1210200"
  },
  {
    "text": "information and for a high quality API it can be quite tricky to make it throw an",
    "start": "1210200",
    "end": "1216919"
  },
  {
    "text": "exception so what we typically do is that we add an error controller whose",
    "start": "1216919",
    "end": "1223039"
  },
  {
    "text": "sole purpose is to throw an exception and that makes it possible to write a simple system test like that please",
    "start": "1223039",
    "end": "1229640"
  },
  {
    "text": "remember to require authentication yeah and verify that you don't leak any data",
    "start": "1229640",
    "end": "1235100"
  },
  {
    "text": "because that's quite common as well that you when error occurs you want to",
    "start": "1235100",
    "end": "1241179"
  },
  {
    "text": "tell the developer what went wrong and then you might give them connection",
    "start": "1241179",
    "end": "1246620"
  },
  {
    "text": "strings and stack traces and a lot of information so be careful the correct",
    "start": "1246620",
    "end": "1252080"
  },
  {
    "text": "way to to figure out why we throw exception is probably a look at logs and not return data back to the user no",
    "start": "1252080",
    "end": "1260120"
  },
  {
    "text": "uh so we can look at the products such as the system for the production so uh",
    "start": "1260120",
    "end": "1266900"
  },
  {
    "text": "we have three test uh simple system tests for the products endpoint uh when I am authenticated and have the correct",
    "start": "1266900",
    "end": "1274039"
  },
  {
    "text": "scope and query for the product I expect a 200 okay back",
    "start": "1274039",
    "end": "1279500"
  },
  {
    "text": "when Anonymous and querying for the same product I expect a 401 on authorized",
    "start": "1279500",
    "end": "1285080"
  },
  {
    "text": "pack and when correctly authenticated but with the wrong scope I expect a rescope here I expect a 403 Forbidden",
    "start": "1285080",
    "end": "1293120"
  },
  {
    "text": "back so we can note here that the happy case works but not the negative case test cases and this shows the importance",
    "start": "1293120",
    "end": "1300140"
  },
  {
    "text": "of the negative test cases because without them we might have deployed this to production with an open endpoint",
    "start": "1300140",
    "end": "1306760"
  },
  {
    "text": "developers rarely test their um or at least manually test their apis",
    "start": "1306760",
    "end": "1312260"
  },
  {
    "text": "without authentication because yeah thanks yep so we can go back to the slides and",
    "start": "1312260",
    "end": "1321500"
  },
  {
    "text": "the test that we have shown them is um as a covered data categories",
    "start": "1321500",
    "end": "1328880"
  },
  {
    "text": "authentication basic parts of authorization and Transport Security of",
    "start": "1328880",
    "end": "1334400"
  },
  {
    "text": "course are you that validating a Json web token isn't authentication it's part of authorization but for this demo it",
    "start": "1334400",
    "end": "1341120"
  },
  {
    "text": "really doesn't matter to distinguish between the toes so we can yeah let's move on and look at the unit tests yep",
    "start": "1341120",
    "end": "1348860"
  },
  {
    "text": "and the first set of unit tests are for the controller and for the",
    "start": "1348860",
    "end": "1354020"
  },
  {
    "text": "responsibilities that the controller has which is to do a basic input validation",
    "start": "1354020",
    "end": "1359320"
  },
  {
    "text": "and handle the result and return the the data and also the correct response codes",
    "start": "1359320",
    "end": "1368500"
  },
  {
    "text": "so we connect this to the test categories the data confidentiality and the integrity and now we will have a",
    "start": "1368500",
    "end": "1375320"
  },
  {
    "text": "look at the test for the product controller yeah so let's close the system test and look",
    "start": "1375320",
    "end": "1382159"
  },
  {
    "text": "at the unit test for the products controller maybe start by running them again yeah yeah that's good",
    "start": "1382159",
    "end": "1389400"
  },
  {
    "text": "[Music] but then we know that we have a weak implementation yeah so uh let's look at",
    "start": "1389400",
    "end": "1397039"
  },
  {
    "text": "what we have chosen to write okay we can note that they have the case works yeah it always works it works it's it's",
    "start": "1397039",
    "end": "1402799"
  },
  {
    "text": "happening yeah so the uh the first test is that when we set up the controller for success I expect saying okay object",
    "start": "1402799",
    "end": "1410659"
  },
  {
    "text": "result back from the controller uh for data not found I expect the 404 file",
    "start": "1410659",
    "end": "1416360"
  },
  {
    "text": "results and when I set up the controller for no access to operation I expect the",
    "start": "1416360",
    "end": "1422299"
  },
  {
    "text": "forbid result back uh maps to 403 and when I have no access to the data",
    "start": "1422299",
    "end": "1429400"
  },
  {
    "text": "we can typically choose between two valid HTTP status codes uh 403 Forbidden",
    "start": "1429400",
    "end": "1436840"
  },
  {
    "text": "which is correct so I mean there's data there but I'm not allowed to use it or",
    "start": "1436840",
    "end": "1442820"
  },
  {
    "text": "the 404 uh if I don't want to reveal the fact that there's data there and",
    "start": "1442820",
    "end": "1448159"
  },
  {
    "text": "for this demo we've selected the not found 404 result and then there's a test that verifies",
    "start": "1448159",
    "end": "1455960"
  },
  {
    "text": "that when I try a few uh samples of invalid product IDs I would expect a 400",
    "start": "1455960",
    "end": "1462919"
  },
  {
    "text": "pound request object result pack and then finally um when I do get a result back I expect",
    "start": "1462919",
    "end": "1469220"
  },
  {
    "text": "to get a dedicated data contract back and not the full domain object and most",
    "start": "1469220",
    "end": "1474740"
  },
  {
    "text": "of that fails so yep and we will address all these red tests later when we go",
    "start": "1474740",
    "end": "1480620"
  },
  {
    "text": "back to the slides and look at the next categories of tests and they will",
    "start": "1480620",
    "end": "1486500"
  },
  {
    "text": "concern step 3 where we transform from the Json web token to permissions and",
    "start": "1486500",
    "end": "1494360"
  },
  {
    "text": "they will verify the permission model that we have for this DMO API which is that you should only have access to",
    "start": "1494360",
    "end": "1502159"
  },
  {
    "text": "products for a given Market so let's start by looking at the permission service yeah so if we look at",
    "start": "1502159",
    "end": "1510200"
  },
  {
    "text": "the permission service so um yeah so so",
    "start": "1510200",
    "end": "1516020"
  },
  {
    "text": "um many Frameworks and net in particular kinds of leads us down a path where we",
    "start": "1516020",
    "end": "1523340"
  },
  {
    "text": "have a principal object a user object injected into the request Pipeline and",
    "start": "1523340",
    "end": "1529520"
  },
  {
    "text": "that user has a set of claims in it represented by dictionary string value",
    "start": "1529520",
    "end": "1535520"
  },
  {
    "text": "key perfect and that's the object that we can query when we to do our access",
    "start": "1535520",
    "end": "1541760"
  },
  {
    "text": "control on top of it doesn't have to be like that uh in this code we've instead selected to",
    "start": "1541760",
    "end": "1548960"
  },
  {
    "text": "declare a permission interface that contains at the top for properties",
    "start": "1548960",
    "end": "1555140"
  },
  {
    "text": "that reveal the identity that we pick up from the incoming access token regarding",
    "start": "1555140",
    "end": "1561380"
  },
  {
    "text": "the user and then here first a set of simple Boolean properties if I can read",
    "start": "1561380",
    "end": "1567919"
  },
  {
    "text": "products and a simple method that with figures out if I can read this",
    "start": "1567919",
    "end": "1575120"
  },
  {
    "text": "particular product and we think that makes for a much better developer experience it's strongly typed you will",
    "start": "1575120",
    "end": "1583159"
  },
  {
    "text": "get intellisense in your IDE and don't have to work with these key value strings",
    "start": "1583159",
    "end": "1588679"
  },
  {
    "text": "and also lends itself perfectly for writing unit tests yeah and we should",
    "start": "1588679",
    "end": "1594500"
  },
  {
    "text": "note that this often involves a service or database lookup where we use those",
    "start": "1594500",
    "end": "1599779"
  },
  {
    "text": "identity properties from the token to look up the permissions at and maybe",
    "start": "1599779",
    "end": "1606500"
  },
  {
    "text": "make authorization decisions like you can read products",
    "start": "1606500",
    "end": "1611600"
  },
  {
    "text": "and this gives us a centralized pattern for for the permissions and and the",
    "start": "1611600",
    "end": "1619100"
  },
  {
    "text": "access control and it can of course be externalized using a service that we",
    "start": "1619100",
    "end": "1625520"
  },
  {
    "text": "share between apis or things like open policy Aliant and so on but but we use",
    "start": "1625520",
    "end": "1632659"
  },
  {
    "text": "an in-memory implementation in in our DMO and and that's often fine as well so",
    "start": "1632659",
    "end": "1637940"
  },
  {
    "text": "it could be yeah so should we run the tests yeah so let's look at those tests",
    "start": "1637940",
    "end": "1643580"
  },
  {
    "text": "and start by running them see what we've got yeah all green strong implementation for",
    "start": "1643580",
    "end": "1651440"
  },
  {
    "text": "once so let's have a look at the test that we selected for the permission service",
    "start": "1651440",
    "end": "1656960"
  },
  {
    "text": "it is that the unauthenticated user represented here by the claims that we",
    "start": "1656960",
    "end": "1662120"
  },
  {
    "text": "would expect to find in the token should properly populate the identity properties of the permission service",
    "start": "1662120",
    "end": "1669320"
  },
  {
    "text": "the second one is the unauthenticated users with the correct scope should be",
    "start": "1669320",
    "end": "1674419"
  },
  {
    "text": "able to read products uh next test is an authenticated user",
    "start": "1674419",
    "end": "1681020"
  },
  {
    "text": "should be able to read products from my market and with that done we can move to",
    "start": "1681020",
    "end": "1689539"
  },
  {
    "text": "the negative test cases the cases that identify and declare the boundaries of",
    "start": "1689539",
    "end": "1695960"
  },
  {
    "text": "my functionality the first and the obvious one perhaps is that if I have an",
    "start": "1695960",
    "end": "1701120"
  },
  {
    "text": "anonymous user that do not have any claims in the token so this is then I",
    "start": "1701120",
    "end": "1707419"
  },
  {
    "text": "expect a an empty identity and I expect not to be able to read products",
    "start": "1707419",
    "end": "1713059"
  },
  {
    "text": "and uh the next one is that an authenticated user but with the wrong scope",
    "start": "1713059",
    "end": "1720080"
  },
  {
    "text": "um I would expect not to be able to reproduct uh the next one is that an authenticated",
    "start": "1720080",
    "end": "1726799"
  },
  {
    "text": "user correctly authenticated should not be able to read products that's not part of my market and I think that those",
    "start": "1726799",
    "end": "1734179"
  },
  {
    "text": "kinds of tests are hugely valuable and nicely documents and uh",
    "start": "1734179",
    "end": "1739659"
  },
  {
    "text": "summarize what we would expect from the information model in particular this last one this is sort of multi-tenancy",
    "start": "1739659",
    "end": "1746299"
  },
  {
    "text": "and either and things like that that's a very very common problem in apis and",
    "start": "1746299",
    "end": "1753260"
  },
  {
    "text": "this kind of pattern of declaring a central permission service or policy service like that enables us to write",
    "start": "1753260",
    "end": "1759440"
  },
  {
    "text": "these kinds of tests in one place it can be quite tricky otherwise to find this uh this documentation across your code",
    "start": "1759440",
    "end": "1766700"
  },
  {
    "text": "yeah so all is green and we can go back to the slides and the final test",
    "start": "1766700",
    "end": "1772100"
  },
  {
    "text": "categories and the final set of tests is for the product the domain or service layer",
    "start": "1772100",
    "end": "1778460"
  },
  {
    "text": "that's step four or five and six in our API model and now we will address the",
    "start": "1778460",
    "end": "1784279"
  },
  {
    "text": "remaining red tests that we have seen and so that we can assert that we have",
    "start": "1784279",
    "end": "1789919"
  },
  {
    "text": "well-defined boundaries and cannot misuse the API and we will cover all",
    "start": "1789919",
    "end": "1795200"
  },
  {
    "text": "test categories except authentication and Transport Security and we will now start fixing the red",
    "start": "1795200",
    "end": "1801980"
  },
  {
    "text": "tests and weaknesses in our controller so we can go back to the controller yeah right and we will start with limit",
    "start": "1801980",
    "end": "1808640"
  },
  {
    "text": "attack vectors for in action by introducing input validation so let's uh",
    "start": "1808640",
    "end": "1814880"
  },
  {
    "text": "let's try a naive approach here and simply start with the fact that I'm not",
    "start": "1814880",
    "end": "1819919"
  },
  {
    "text": "accepting uh noodle data",
    "start": "1819919",
    "end": "1825278"
  },
  {
    "text": "no I will not accept an ID that's too long",
    "start": "1826159",
    "end": "1833299"
  },
  {
    "text": "and I will not accept any input data that is not a",
    "start": "1833299",
    "end": "1840440"
  },
  {
    "text": "letter or did you like that so uh if that happens then I will return",
    "start": "1840440",
    "end": "1846980"
  },
  {
    "text": "I thought no I will not redirect a bad request yeah thank you that's",
    "start": "1846980",
    "end": "1855559"
  },
  {
    "text": "funny valid uh ID yep like that I think yeah looks good uh let's try it out yeah",
    "start": "1855559",
    "end": "1862820"
  },
  {
    "text": "and run and run the controller test again restart the API",
    "start": "1862820",
    "end": "1867860"
  },
  {
    "text": "let's run the controller I want a lot of Red Pass there and if you remember so now let's see if we improved the code",
    "start": "1867860",
    "end": "1874760"
  },
  {
    "text": "anything yeah the input validation tests are green so actually this simple code",
    "start": "1874760",
    "end": "1880820"
  },
  {
    "text": "it captures the requirement we have for the products API but um this kind of",
    "start": "1880820",
    "end": "1886700"
  },
  {
    "text": "code is it's kind of if the if there are a lot of endpoints it's easy to do mistakes with this kind of code so we",
    "start": "1886700",
    "end": "1892640"
  },
  {
    "text": "want to use a stronger pattern and to limit the risk for that and we can use a pattern for from the main river design",
    "start": "1892640",
    "end": "1899179"
  },
  {
    "text": "or domain driven security where we introduce domain Primitives",
    "start": "1899179",
    "end": "1904640"
  },
  {
    "text": "so because our product ID isn't a string that can be can contain any character",
    "start": "1904640",
    "end": "1909919"
  },
  {
    "text": "and it should always be treated like a product ID so so we have a domain",
    "start": "1909919",
    "end": "1915380"
  },
  {
    "text": "perimeter for a product ID implemented it's not big um",
    "start": "1915380",
    "end": "1920779"
  },
  {
    "text": "as you can see uh I got the same validation here that I just implemented",
    "start": "1920779",
    "end": "1927080"
  },
  {
    "text": "in the controller and the Constructor here will assert that that input data",
    "start": "1927080",
    "end": "1933640"
  },
  {
    "text": "conforms to that semantic validation and if it does not it will throw an exception so it's actually not possible",
    "start": "1933640",
    "end": "1941779"
  },
  {
    "text": "for me to create an instance of this domain primitive without also conforming",
    "start": "1941779",
    "end": "1948860"
  },
  {
    "text": "to our rules for what the product ID would look like uh and we have some unit",
    "start": "1948860",
    "end": "1955220"
  },
  {
    "text": "tests very easy to write tests around our class like this such domain Primitives",
    "start": "1955220",
    "end": "1960740"
  },
  {
    "text": "Primitives lend themselves very nicely to unit testing uh of course we've got",
    "start": "1960740",
    "end": "1966020"
  },
  {
    "text": "the happy case uh two valid IDs here that should uh the Constructor should",
    "start": "1966020",
    "end": "1971600"
  },
  {
    "text": "accept and should work properly and then we have again the negative test",
    "start": "1971600",
    "end": "1977120"
  },
  {
    "text": "cases verifying the boundaries of our functionality",
    "start": "1977120",
    "end": "1982240"
  },
  {
    "text": "an obvious invalid ID that contains spaces but then I want to try some some some",
    "start": "1982240",
    "end": "1989000"
  },
  {
    "text": "injection strings so what we often do is that we resort uh to",
    "start": "1989000",
    "end": "1996260"
  },
  {
    "text": "um um a resource that's a lot of resources on internet for injection strings we",
    "start": "1996260",
    "end": "2003100"
  },
  {
    "text": "like the GitHub repository big list of naughty strings they maintain a list of injection",
    "start": "2003100",
    "end": "2009880"
  },
  {
    "text": "strings so that we don't have to figure those out ourselves and I've just",
    "start": "2009880",
    "end": "2015039"
  },
  {
    "text": "selected a few of them that I thought was relevant that repository contains a",
    "start": "2015039",
    "end": "2020740"
  },
  {
    "text": "lot of a lot more information for example some tricky names that tends to crash systems uh that's that's quite fun",
    "start": "2020740",
    "end": "2028899"
  },
  {
    "text": "as well yeah so what we do here is that we try all of these and see if the and we",
    "start": "2028899",
    "end": "2035320"
  },
  {
    "text": "expect in our test that the Constructor would throw a an exception yep so we can",
    "start": "2035320",
    "end": "2042399"
  },
  {
    "text": "apply this and we can go back to the controller yeah so instead of this code then I can",
    "start": "2042399",
    "end": "2049419"
  },
  {
    "text": "simply use my domain primitive so next ID is valid",
    "start": "2049419",
    "end": "2057280"
  },
  {
    "text": "like that and I would then typically quickly move to the products ID doing",
    "start": "2057280",
    "end": "2063940"
  },
  {
    "text": "primitive in my code okay",
    "start": "2063940",
    "end": "2070080"
  },
  {
    "text": "like I think yeah yeah so uh so that's that's good yeah",
    "start": "2070419",
    "end": "2076419"
  },
  {
    "text": "and we should note that using the main Primitives is more than just input validation but we will not cover stage",
    "start": "2076419",
    "end": "2083560"
  },
  {
    "text": "chaining functions and domain Logic for that today and that the same reasoning applies to",
    "start": "2083560",
    "end": "2088780"
  },
  {
    "text": "other domain Primitives like an address or a product name or or something like",
    "start": "2088780",
    "end": "2093820"
  },
  {
    "text": "that so now let's look at authorization and we could of course add code for fine-grained authorization in the",
    "start": "2093820",
    "end": "2100420"
  },
  {
    "text": "controller um like we did with the input validation but",
    "start": "2100420",
    "end": "2106119"
  },
  {
    "text": "um this does not scale well when the API grows in features and we have more and",
    "start": "2106780",
    "end": "2111880"
  },
  {
    "text": "more endpoints and and we don't want that kind of logic here in the application layer so we will introduce a",
    "start": "2111880",
    "end": "2118720"
  },
  {
    "text": "product service yep so um because of my product service here it's a simple",
    "start": "2118720",
    "end": "2123940"
  },
  {
    "text": "interface uh it's a get my ID method as you can see we're only working with",
    "start": "2123940",
    "end": "2129460"
  },
  {
    "text": "domain office now so no strings only domain objects objects from our domain",
    "start": "2129460",
    "end": "2135099"
  },
  {
    "text": "we will return a product and an indication of the results so let's have",
    "start": "2135099",
    "end": "2141700"
  },
  {
    "text": "a look at the implementation and now you we can use the permission service that I",
    "start": "2141700",
    "end": "2149260"
  },
  {
    "text": "showed earlier so instead of working with string claims from the user principle we can instead work with the",
    "start": "2149260",
    "end": "2156040"
  },
  {
    "text": "permission service so if this permission if this calling user cannot read products then we would",
    "start": "2156040",
    "end": "2164800"
  },
  {
    "text": "return a null product and a no access to operation indication",
    "start": "2164800",
    "end": "2170380"
  },
  {
    "text": "and if we do find the product in the repository we will check if this user",
    "start": "2170380",
    "end": "2178060"
  },
  {
    "text": "can read this particular product and if she cannot we will indicate that this is",
    "start": "2178060",
    "end": "2183940"
  },
  {
    "text": "no access to data and otherwise we are all good we return a success and the",
    "start": "2183940",
    "end": "2190839"
  },
  {
    "text": "actual domain object yep and if we go up again yeah to the beginning we want to",
    "start": "2190839",
    "end": "2196240"
  },
  {
    "text": "note that the order is is important because we we want to abort invalid",
    "start": "2196240",
    "end": "2203560"
  },
  {
    "text": "requests early and without consuming system resources or doing complex domain",
    "start": "2203560",
    "end": "2208599"
  },
  {
    "text": "logic so we should always do input validation which we can see from the product ID and access to the operation",
    "start": "2208599",
    "end": "2216220"
  },
  {
    "text": "as early as possible before any domain logic so if we do not have access to the",
    "start": "2216220",
    "end": "2222820"
  },
  {
    "text": "operation we will not even call the report make the call to the database no because verifying access to access",
    "start": "2222820",
    "end": "2229480"
  },
  {
    "text": "access to data might be really complex you might need to work out the relationship between objects and so on",
    "start": "2229480",
    "end": "2236260"
  },
  {
    "text": "maybe like a search function so that will be the last thing you can do here before returning the object",
    "start": "2236260",
    "end": "2242680"
  },
  {
    "text": "and also note that we do we do logging for monitoring and accountability so",
    "start": "2242680",
    "end": "2248619"
  },
  {
    "text": "that is also important to verify in in unit tests that you log when you shoot",
    "start": "2248619",
    "end": "2253839"
  },
  {
    "text": "yeah and we note that we only log with the domain objects as well yeah and also that we note that we that",
    "start": "2253839",
    "end": "2261820"
  },
  {
    "text": "we read the data because yeah for for some systems accessing data can be the",
    "start": "2261820",
    "end": "2268060"
  },
  {
    "text": "most sensitive operation there is yeah so uh let's go back to the",
    "start": "2268060",
    "end": "2273520"
  },
  {
    "text": "controller and use this service yeah right so let's get uh oh sorry let's get",
    "start": "2273520",
    "end": "2279760"
  },
  {
    "text": "rid of the [Music] um vulnerable code and using our new",
    "start": "2279760",
    "end": "2286060"
  },
  {
    "text": "service we can declare the product and data result",
    "start": "2286060",
    "end": "2292380"
  },
  {
    "text": "and let's call our service",
    "start": "2294220",
    "end": "2297780"
  },
  {
    "text": "get my ID and D like that yeah and I think that with that in mind",
    "start": "2299619",
    "end": "2307060"
  },
  {
    "text": "we can now return switch on the data results",
    "start": "2307060",
    "end": "2312420"
  },
  {
    "text": "and let's start with the easiest staircase that is that we've got a",
    "start": "2312880",
    "end": "2318640"
  },
  {
    "text": "success [Music] um in that case I would like to return an",
    "start": "2318640",
    "end": "2324160"
  },
  {
    "text": "okay result with the product the the next obvious uh result is the",
    "start": "2324160",
    "end": "2331540"
  },
  {
    "text": "not found part I would return a 404 not found and then we had the",
    "start": "2331540",
    "end": "2339160"
  },
  {
    "text": "um no access to the operation typically a 403 forbid",
    "start": "2339160",
    "end": "2344380"
  },
  {
    "text": "and then we had the no access to data and we selected the 404 I think yeah",
    "start": "2344380",
    "end": "2353140"
  },
  {
    "text": "that's true correct yeah oh semicolon thank you and in all other",
    "start": "2353140",
    "end": "2360579"
  },
  {
    "text": "cases I will simply throw my hands in the air give up and throw an exception",
    "start": "2360579",
    "end": "2367060"
  },
  {
    "text": "and my exceptional choice is an environment operation exception",
    "start": "2367060",
    "end": "2372700"
  },
  {
    "text": "yeah because this really is an exception you should never get here so um looking good I think I think so",
    "start": "2372700",
    "end": "2381579"
  },
  {
    "text": "it's um it looks good and we can try and run the controller test again and see if",
    "start": "2381579",
    "end": "2386859"
  },
  {
    "text": "we have improved anything with all this restart the API let's hope so",
    "start": "2386859",
    "end": "2392800"
  },
  {
    "text": "yeah and uh yeah almost pretty good uh",
    "start": "2392800",
    "end": "2398140"
  },
  {
    "text": "we've got one failing test and that's the test that we decide that we are using a dedicated data contract which I",
    "start": "2398140",
    "end": "2404680"
  },
  {
    "text": "am not I'm still returning the full domain object so let's uh change that and use the",
    "start": "2404680",
    "end": "2412240"
  },
  {
    "text": "excellent Auto mapper to map with that domain object to a product",
    "start": "2412240",
    "end": "2420579"
  },
  {
    "text": "data contracts like that so uh let's have a look at the data",
    "start": "2420579",
    "end": "2427240"
  },
  {
    "text": "contract itself to see what that would look like so this is typically something uh what we're looking for in our case uh",
    "start": "2427240",
    "end": "2434619"
  },
  {
    "text": "the data contract only consists of two elements I re intend to return the ID",
    "start": "2434619",
    "end": "2440920"
  },
  {
    "text": "and the name of the product of course the domain now we can contain a lot more information and a lot of sensitive",
    "start": "2440920",
    "end": "2447640"
  },
  {
    "text": "information that should not never leave our trust boundary yeah so this is the pattern for mitigating the excessive",
    "start": "2447640",
    "end": "2453880"
  },
  {
    "text": "data exposure vulnerability so let's restart that API let's have a go again",
    "start": "2453880",
    "end": "2461740"
  },
  {
    "text": "see if we're good yeah yeah so um always going there so let's",
    "start": "2461740",
    "end": "2468099"
  },
  {
    "text": "run um the system testing and we can run all the unit tests first yeah we could we",
    "start": "2468099",
    "end": "2473619"
  },
  {
    "text": "could we could but we are what the states yeah they're all green if you noticed uh all of those yeah it's very",
    "start": "2473619",
    "end": "2482380"
  },
  {
    "text": "hard to notice that and now we can run the system test again but we have some realm from before",
    "start": "2482380",
    "end": "2487839"
  },
  {
    "text": "and see how that goes and um no almost almost we have the",
    "start": "2487839",
    "end": "2494260"
  },
  {
    "text": "three left there and if we look at the two in the health controller they are",
    "start": "2494260",
    "end": "2499480"
  },
  {
    "text": "red because the authorization we added it was used for the product service and the product controllers and",
    "start": "2499480",
    "end": "2505560"
  },
  {
    "text": "unfortunately.net does not have a secure default that's part of the templates to",
    "start": "2505560",
    "end": "2511720"
  },
  {
    "text": "have a strong solution we need a mandatory pattern a deny by default and",
    "start": "2511720",
    "end": "2516880"
  },
  {
    "text": "forcing authentication and basic authorization maybe for all requests in other Frameworks like um your Spring",
    "start": "2516880",
    "end": "2524020"
  },
  {
    "text": "Security we get this by default but in.net we need to add some code yeah right so this is the program that hosts",
    "start": "2524020",
    "end": "2531520"
  },
  {
    "text": "our API this is what it looks like in S7 and as you can see I've added",
    "start": "2531520",
    "end": "2536980"
  },
  {
    "text": "authorization but as you said the default is unfortunately to allow",
    "start": "2536980",
    "end": "2542320"
  },
  {
    "text": "anonymous calls we need to change that default and the default is there to ensure that the HEPA case will work from",
    "start": "2542320",
    "end": "2549099"
  },
  {
    "text": "the beginning so this is what it looks like I set a default policy as well as the fallback",
    "start": "2549099",
    "end": "2556359"
  },
  {
    "text": "policy to require an authenticated user and use jvt better defaults and",
    "start": "2556359",
    "end": "2564339"
  },
  {
    "text": "so now we will require the better schema here for authentication yeah for all",
    "start": "2564339",
    "end": "2570460"
  },
  {
    "text": "incoming requests so that's so let's try again try those system tests again yeah and uh",
    "start": "2570460",
    "end": "2577740"
  },
  {
    "text": "now the HEPA case doesn't work anymore so the liveness that way now we need to",
    "start": "2577740",
    "end": "2583060"
  },
  {
    "text": "open up that endpoint because so now we can decorate that we don't allow Anonymous attributes and we have this",
    "start": "2583060",
    "end": "2588339"
  },
  {
    "text": "default by deny yeah so right now so this now requires authentication which",
    "start": "2588339",
    "end": "2594160"
  },
  {
    "text": "was more wanted for the liveness I need to decorate that with uh allow anonymous",
    "start": "2594160",
    "end": "2600099"
  },
  {
    "text": "and now perhaps finally oh yeah let's run again",
    "start": "2600099",
    "end": "2607318"
  },
  {
    "text": "right yeah so we're all green and almost done but for a strong implementation",
    "start": "2608260",
    "end": "2615280"
  },
  {
    "text": "according to best practices and over spare asvs we should also apply authorization of the routing level not",
    "start": "2615280",
    "end": "2622180"
  },
  {
    "text": "just at the resource level and we can do this switch support from the web framework in the controller or we could",
    "start": "2622180",
    "end": "2628660"
  },
  {
    "text": "do this in a Gateway in front of our API or both with.net we will use the policies and attributes with the Java",
    "start": "2628660",
    "end": "2635980"
  },
  {
    "text": "springing security we would use pre-authorized tags so let's add those",
    "start": "2635980",
    "end": "2641200"
  },
  {
    "text": "policies so I just added two policies uh and this is the name of the policy and",
    "start": "2641200",
    "end": "2647619"
  },
  {
    "text": "what it does is that the it requires that the scope products read is present in the token so if I go to the product",
    "start": "2647619",
    "end": "2654460"
  },
  {
    "text": "controller I can now decorate this endpoint with an authorized attribute",
    "start": "2654460",
    "end": "2661319"
  },
  {
    "text": "and say that I want that policy in particular oh not with double yep so",
    "start": "2661319",
    "end": "2667599"
  },
  {
    "text": "this gives us a way to abort the request really early before we enter the",
    "start": "2667599",
    "end": "2673900"
  },
  {
    "text": "controller so the net asp.net pipeline will now if the incoming access token",
    "start": "2673900",
    "end": "2680140"
  },
  {
    "text": "does not contain a price rescope I will not even get into this code so",
    "start": "2680140",
    "end": "2685359"
  },
  {
    "text": "and we add this for it depends in depth it doesn't replace any authorization in",
    "start": "2685359",
    "end": "2691300"
  },
  {
    "text": "the domain or service layer and uh yeah this is it yeah pretty good",
    "start": "2691300",
    "end": "2697119"
  },
  {
    "text": "yeah I like it yeah it's uh we could of course use more features in the web framework or the language to get maybe",
    "start": "2697119",
    "end": "2703540"
  },
  {
    "text": "fewer lines of code and and so on but this is sort of a clean implementation that demonstrates the important security",
    "start": "2703540",
    "end": "2711579"
  },
  {
    "text": "um Concepts that we want to show here for an API and yeah we could not a few more things",
    "start": "2711579",
    "end": "2719020"
  },
  {
    "text": "that we use explicit routing we assert this only accepted the get request and",
    "start": "2719020",
    "end": "2725200"
  },
  {
    "text": "that we get the data from the rotor so we don't have any Mass assignment issues",
    "start": "2725200",
    "end": "2731140"
  },
  {
    "text": "yeah and um yeah so all is green and we can go back to the slides",
    "start": "2731140",
    "end": "2738420"
  },
  {
    "text": "and um yeah in this demo we have showed that with a reasonable effort we can",
    "start": "2740140",
    "end": "2745660"
  },
  {
    "text": "cover basic parts of security testing and apply tdd to application security",
    "start": "2745660",
    "end": "2751740"
  },
  {
    "text": "and that we meet those security requirements and address most of the issues on the ovas the top 10 list yeah",
    "start": "2751740",
    "end": "2758859"
  },
  {
    "text": "and we think that none of the tests that we have shown here are particularly hard to write it might be among the easiest",
    "start": "2758859",
    "end": "2765839"
  },
  {
    "text": "that you have in your system but they are selected with a little bit of care",
    "start": "2765839",
    "end": "2771520"
  },
  {
    "text": "and thought to verify the boundaries of our domain yeah so let's uh summarize yeah",
    "start": "2771520",
    "end": "2780339"
  },
  {
    "text": "um first a note on complexity uh when we do security reviews uh we usually find",
    "start": "2780339",
    "end": "2787240"
  },
  {
    "text": "more vulnerabilities than in more complex systems compared to",
    "start": "2787240",
    "end": "2792520"
  },
  {
    "text": "simple systems and we feel that's not just because of the size of the system where more functionality will give us a",
    "start": "2792520",
    "end": "2800140"
  },
  {
    "text": "larger attack surface but also because it's difficult for a team to keep a",
    "start": "2800140",
    "end": "2807220"
  },
  {
    "text": "system secure over time that they do not fully understand",
    "start": "2807220",
    "end": "2812440"
  },
  {
    "text": "many of the vulnerabilities that we find originates from unclear non-functional requirements and",
    "start": "2812440",
    "end": "2820420"
  },
  {
    "text": "missing test cases allowing an attacker to break out the boundaries and abuse the application so you can't secure what",
    "start": "2820420",
    "end": "2827920"
  },
  {
    "text": "you don't understand so we believe I strongly believe that",
    "start": "2827920",
    "end": "2834880"
  },
  {
    "text": "tests will help you understand and identify these boundaries and we think",
    "start": "2834880",
    "end": "2840400"
  },
  {
    "text": "that automated tests will make sure that your rules and defenses are applied and",
    "start": "2840400",
    "end": "2846700"
  },
  {
    "text": "implemented correctly and we feel that this is absolutely vital for security",
    "start": "2846700",
    "end": "2852220"
  },
  {
    "text": "yeah and the things that we have shown here isn't that hard to do security is hard but the things we have showed isn't",
    "start": "2852220",
    "end": "2858880"
  },
  {
    "text": "that hard to do and uh so if all teams wrote those kind of tests then we as Pam",
    "start": "2858880",
    "end": "2865060"
  },
  {
    "text": "testers will have a much much harder job and the bar for the attacker has risen",
    "start": "2865060",
    "end": "2871240"
  },
  {
    "text": "significantly so uh with this presentation we hope to have inspired",
    "start": "2871240",
    "end": "2876700"
  },
  {
    "text": "some of you to perhaps do more tests with focus on security maybe start with a few system tests that",
    "start": "2876700",
    "end": "2884079"
  },
  {
    "text": "tries the endpoints with an anonymous call uh maybe even run those tests",
    "start": "2884079",
    "end": "2889660"
  },
  {
    "text": "against the production environment um yeah no so uh but um will this really",
    "start": "2889660",
    "end": "2898240"
  },
  {
    "text": "scale wasn't that a lot of tests for such a small API yeah it's just one endpoint",
    "start": "2898240",
    "end": "2903900"
  },
  {
    "text": "one day yeah there was a lot of tests but but it always our investment in",
    "start": "2903900",
    "end": "2909220"
  },
  {
    "text": "security should be proportional to our business and based on our experience the",
    "start": "2909220",
    "end": "2914859"
  },
  {
    "text": "things we have shown here with all the tests are a reasonable level of security for many businesses really no apis",
    "start": "2914859",
    "end": "2922060"
  },
  {
    "text": "should have vulnerabilities from the ovas top 10 list no",
    "start": "2922060",
    "end": "2927240"
  },
  {
    "text": "um so these and many other important patterns are described in this book written by",
    "start": "2927339",
    "end": "2935500"
  },
  {
    "text": "our colleagues Dawn and verdonians and uh you might have seen them present here",
    "start": "2935500",
    "end": "2942160"
  },
  {
    "text": "earlier today and it's a great book which we recommend and if you don't feel like reading the",
    "start": "2942160",
    "end": "2948220"
  },
  {
    "text": "book then island of the doll hella great Back to Basics presentation on NBC",
    "start": "2948220",
    "end": "2953319"
  },
  {
    "text": "security last year demonstrating some of these Concepts which we also recommend watching on YouTube",
    "start": "2953319",
    "end": "2960540"
  },
  {
    "text": "so uh if you want to have a closer look at the code that we presented here today these are the GitHub repository please",
    "start": "2960940",
    "end": "2968500"
  },
  {
    "text": "take a look and uh have a play around and I think that was",
    "start": "2968500",
    "end": "2974500"
  },
  {
    "text": "all from us thanks yeah thank you",
    "start": "2974500",
    "end": "2978540"
  },
  {
    "text": "if you have any questions feel free to speak up",
    "start": "2986140",
    "end": "2991740"
  },
  {
    "text": "yeah and what's your staff um let's be in production so what's what do we feel",
    "start": "2993220",
    "end": "2999099"
  },
  {
    "text": "about testing in production uh we like it you need to be a little bit careful uh",
    "start": "2999099",
    "end": "3005700"
  },
  {
    "text": "what you do to your production environment uh and any test that doesn't require authentication is a great uh",
    "start": "3005700",
    "end": "3013200"
  },
  {
    "text": "candidate for running against production as soon as you require authentication you need to think about what you're",
    "start": "3013200",
    "end": "3019079"
  },
  {
    "text": "doing uh that needs means that there is authentication for production",
    "start": "3019079",
    "end": "3024660"
  },
  {
    "text": "environment somewhere in your cdci pipeline in some way you can do that but",
    "start": "3024660",
    "end": "3030960"
  },
  {
    "text": "you need to pay a little bit attention to the details so the liveness endpoints we will typically like to do to sports",
    "start": "3030960",
    "end": "3037920"
  },
  {
    "text": "production because it's there in the production environment that's availability is important the test",
    "start": "3037920",
    "end": "3043319"
  },
  {
    "text": "environment isn't that useful in that way and we should also test that we",
    "start": "3043319",
    "end": "3048359"
  },
  {
    "text": "don't have Anonymous access by by passing invalid tokens and so on we also",
    "start": "3048359",
    "end": "3053400"
  },
  {
    "text": "can do that but as soon as we succeed in authenticating that then we need to be",
    "start": "3053400",
    "end": "3058559"
  },
  {
    "text": "careful so so System test against production is hugely valuable of course so man and if you want to reach the",
    "start": "3058559",
    "end": "3066300"
  },
  {
    "text": "radian point for instance or the Run point then you should use a dedicated",
    "start": "3066300",
    "end": "3071460"
  },
  {
    "text": "test client with very limited permissions to just do exactly those things so but but you so you need to be",
    "start": "3071460",
    "end": "3079140"
  },
  {
    "text": "a little bit careful but yeah you need testing production because foreign",
    "start": "3079140",
    "end": "3086000"
  },
  {
    "text": "yeah so the question is uh to to instead annotate the classes right uh for fluent",
    "start": "3096800",
    "end": "3104160"
  },
  {
    "text": "annotations instead uh certainly well we had a little coding session here last",
    "start": "3104160",
    "end": "3109260"
  },
  {
    "text": "night doing exactly that uh this code here today was written for clarity and for demo purposes uh yeah but there is",
    "start": "3109260",
    "end": "3117180"
  },
  {
    "text": "also one one point here that if you input validation could be simple like",
    "start": "3117180",
    "end": "3122700"
  },
  {
    "text": "the things that we showed here but it's for some things that gets more complex",
    "start": "3122700",
    "end": "3127980"
  },
  {
    "text": "and that becomes the main logic and you don't want domain logic in your application layer and sort of mixed up",
    "start": "3127980",
    "end": "3135059"
  },
  {
    "text": "with the web framework so so you want to keep the domain logic in the domain so",
    "start": "3135059",
    "end": "3141000"
  },
  {
    "text": "so even if you use those annotation you can do that for basic things you should",
    "start": "3141000",
    "end": "3146339"
  },
  {
    "text": "have complete input validation in your domain so and it's okay to validate things twice like we did with",
    "start": "3146339",
    "end": "3153420"
  },
  {
    "text": "authorization it's the same yeah great thank you",
    "start": "3153420",
    "end": "3158640"
  },
  {
    "text": "yeah just to think about the performance but that's often not a problem yeah",
    "start": "3158640",
    "end": "3166140"
  },
  {
    "text": "okay great so thank you for listening and have a safe journey home",
    "start": "3166140",
    "end": "3171740"
  }
]