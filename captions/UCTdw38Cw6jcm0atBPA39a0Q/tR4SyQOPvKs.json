[
  {
    "text": "hi everybody thank you so much for coming uh if you're watching this on video thank you so much for watching",
    "start": "5600",
    "end": "12360"
  },
  {
    "text": "this really appreciate it really appreciate the NDC uh organizers for having me uh I'm",
    "start": "12360",
    "end": "20240"
  },
  {
    "text": "Scott I work for GitHub although this presentation has nothing to do with my day job uh I do write a bunch of FP and",
    "start": "20240",
    "end": "28720"
  },
  {
    "text": "I have a side project called Grace which is a new source control system that I'm writing in F which also has nothing to",
    "start": "28720",
    "end": "36840"
  },
  {
    "text": "do with my day job and I'm not announcing anything officially on behalf of GitHub but I will show you a little bit of code from Grace I think as we",
    "start": "36840",
    "end": "46239"
  },
  {
    "text": "go so Aaron Stannard who is uh the big mind behind a.net said this a few weeks",
    "start": "46600",
    "end": "52359"
  },
  {
    "text": "ago I thought this was kind of amusing so welcome to philosophy class uh and I'm a philosophy geek of",
    "start": "52359",
    "end": "61280"
  },
  {
    "text": "course I saw that and just cracked up um so in the when I wrote this",
    "start": "61280",
    "end": "67280"
  },
  {
    "text": "proposal for this talk I thought it would be a little more concrete and I started preparing that",
    "start": "67280",
    "end": "72520"
  },
  {
    "text": "and it was kind of boring so I changed it a little bit I did actually add some",
    "start": "72520",
    "end": "78479"
  },
  {
    "text": "philosophy and some category Theory I said I wouldn't but I did couldn't help",
    "start": "78479",
    "end": "83720"
  },
  {
    "text": "it um so goals for today I I just want to give you a sense of functional",
    "start": "83720",
    "end": "89520"
  },
  {
    "text": "programming I I don't and why it's different from object oriented you know it's not a goal to",
    "start": "89520",
    "end": "95360"
  },
  {
    "text": "teach you f in an hour that's not possible or to teach you category theory in an hour because that's not possible",
    "start": "95360",
    "end": "100880"
  },
  {
    "text": "either but I do want to show you some of the things in F that are I think really cool and that that make my code safer",
    "start": "100880",
    "end": "106880"
  },
  {
    "text": "and more elegant and show you how you can use some of those things in C starting today like I hope you can take",
    "start": "106880",
    "end": "113759"
  },
  {
    "text": "some of these things away and apply them to your code base starting right",
    "start": "113759",
    "end": "118840"
  },
  {
    "text": "now so programming languages to me sit on a",
    "start": "118840",
    "end": "127319"
  },
  {
    "text": "spectrum from down to the metal hardware which is actually where I started when I was 11 I",
    "start": "127319",
    "end": "134920"
  },
  {
    "text": "started programming an applesoft basic and then very quickly learned 6502 assembler so for me really",
    "start": "134920",
    "end": "141760"
  },
  {
    "text": "until 7 years ago or so I was always this guy who looked down to the metal",
    "start": "141760",
    "end": "147319"
  },
  {
    "text": "and like thought about my code in terms of how it operated on the CPU and how to make it as fast as possible so I always",
    "start": "147319",
    "end": "153200"
  },
  {
    "text": "thought in that direction and I spent of course all the years in C and I did bb.net way back and",
    "start": "153200",
    "end": "159920"
  },
  {
    "text": "C++ um and then I got interested in category Theory and that got me to the sort of mathematical",
    "start": "159920",
    "end": "165239"
  },
  {
    "text": "functional abstract and and I had the chance to work on an fshp project at Microsoft research which got my fshp",
    "start": "165239",
    "end": "172480"
  },
  {
    "text": "journey going so you know the languages on on the hardware based side obviously start",
    "start": "172480",
    "end": "178800"
  },
  {
    "text": "with assembly and you can think you know and if your favorite language isn't here I",
    "start": "178800",
    "end": "184239"
  },
  {
    "text": "apologize but you know hand wavy you know what I'm talking about um so",
    "start": "184239",
    "end": "189760"
  },
  {
    "text": "there's you know I and I of course is what C compiles to so does f and bite",
    "start": "189760",
    "end": "195799"
  },
  {
    "text": "code from java and you can sort of you know like depending on where you are on the on the",
    "start": "195799",
    "end": "201080"
  },
  {
    "text": "Spectrum um you get more or less control of the",
    "start": "201080",
    "end": "206280"
  },
  {
    "text": "hardware and then of course on this side you have all the mathematical stuff you have have of course F again if you",
    "start": "206280",
    "end": "213400"
  },
  {
    "text": "disagree with where some of these are on the Spectrum hand wavy uh but you know",
    "start": "213400",
    "end": "219080"
  },
  {
    "text": "like all the functional languages get further away from the hardware and more onto the mathematical end where in some",
    "start": "219080",
    "end": "224519"
  },
  {
    "text": "sense you're writing proofs I mean really category theory is about exploring the shapes of functions to to",
    "start": "224519",
    "end": "231640"
  },
  {
    "text": "to just explore mathematical truths so you can translate languages in either",
    "start": "231640",
    "end": "236840"
  },
  {
    "text": "direction either way we're telling computers to do stuff and when we go in when we go from on",
    "start": "236840",
    "end": "243599"
  },
  {
    "text": "this chart from right to left we call that compiling or transpiling if you",
    "start": "243599",
    "end": "249760"
  },
  {
    "text": "don't get all the way to assembly I mean the terms are vague but you know like FP actually has lots of",
    "start": "249760",
    "end": "255519"
  },
  {
    "text": "transpiler projects there's uh Fable which transpiles fshp to JavaScript",
    "start": "255519",
    "end": "261359"
  },
  {
    "text": "there's also Fable rust to rust and there's Fable python to Python and of course typescript is a famous",
    "start": "261359",
    "end": "268479"
  },
  {
    "text": "transpiler and we go the other way we call it decompiling or translating um but either way you can",
    "start": "268479",
    "end": "275160"
  },
  {
    "text": "translate all these things everything is just math So speaking of compilers the first thing I want to do is just if",
    "start": "275160",
    "end": "280240"
  },
  {
    "text": "you've never seen F before I want to just ground you in the idea that f is",
    "start": "280240",
    "end": "285759"
  },
  {
    "text": "just a net language that compiles to iil and looks a lot like C",
    "start": "285759",
    "end": "291320"
  },
  {
    "text": "so so here is your friend and mine sharp",
    "start": "293160",
    "end": "298400"
  },
  {
    "text": "lab uh hope I do have a network connection here",
    "start": "298400",
    "end": "304560"
  },
  {
    "text": "we go um so first let me do some of that so this is an example",
    "start": "304560",
    "end": "312680"
  },
  {
    "text": "in FP of the same class you would write in C uh you know obviously the syntax",
    "start": "312680",
    "end": "318520"
  },
  {
    "text": "looks a little different in C whenever you declare any type it starts with the word type the fact that there's",
    "start": "318520",
    "end": "324479"
  },
  {
    "text": "parentheses here means that it's the same object type that you're that we all know and love from C",
    "start": "324479",
    "end": "330160"
  },
  {
    "text": "and member Val is how you say property and member is how you declare you know",
    "start": "330160",
    "end": "335639"
  },
  {
    "text": "regular member static member and you can see it compiles to a public",
    "start": "335639",
    "end": "341319"
  },
  {
    "text": "class and a property with a getter and a Setter it's all the stuff you know I'm not going to really drill into this too",
    "start": "341319",
    "end": "347440"
  },
  {
    "text": "much one interesting thing here is you'll notice that this class is wrapped in this top level public static class",
    "start": "347440",
    "end": "353960"
  },
  {
    "text": "with this weird looking name and that's because we don't have anything you'll notice that in this F code we're not in",
    "start": "353960",
    "end": "361800"
  },
  {
    "text": "anything it's just a type kind of hanging out so let me just uncomment this name space and you'll notice that that weird",
    "start": "361800",
    "end": "369199"
  },
  {
    "text": "SATA class goes away and we have a namespace just like you would expect now a module is a different concept that we",
    "start": "369199",
    "end": "375039"
  },
  {
    "text": "don't really have in C but you can think of a module as a subname space and how",
    "start": "375039",
    "end": "381000"
  },
  {
    "text": "does that look well that ends up becoming a static class and you'll notice that and F tends to compile to F",
    "start": "381000",
    "end": "387599"
  },
  {
    "text": "to uh lots of static class so here's another",
    "start": "387599",
    "end": "392840"
  },
  {
    "text": "example there we go",
    "start": "394880",
    "end": "399319"
  },
  {
    "text": "um and always want to make sure I've got the right thing so here's a here's just some plain F code that's not a C",
    "start": "400919",
    "end": "408680"
  },
  {
    "text": "class and so what do we have here we have a nam space and a module and then we just have some let statements and",
    "start": "408680",
    "end": "415960"
  },
  {
    "text": "when I first saw this in F my reaction was what are they attached to like",
    "start": "415960",
    "end": "422160"
  },
  {
    "text": "they're just sort of floating out in space it felt weird to me um and it",
    "start": "422160",
    "end": "427560"
  },
  {
    "text": "wasn't until I looked at what they actually compiled to that it made sense to me and you'll notice that we still",
    "start": "427560",
    "end": "432800"
  },
  {
    "text": "have that same name space and static class but now we just have Statics we have a static property with is which is",
    "start": "432800",
    "end": "440000"
  },
  {
    "text": "just a getter and you know part of why it compiles to just a get a property with a getter is because Ryu jit which",
    "start": "440000",
    "end": "448120"
  },
  {
    "text": "is the Jitter for or the adjus in time compiler foret um has all the optimizations one",
    "start": "448120",
    "end": "454840"
  },
  {
    "text": "interesting thing about net is that the C compiler itself doesn't have a ton of optimizations the FP compiler has more",
    "start": "454840",
    "end": "462520"
  },
  {
    "text": "um but a lot of the optimization in net is based on the jit compiler so when you output a property with a getter and no",
    "start": "462520",
    "end": "471240"
  },
  {
    "text": "Setter ruet knows what to do with that to make that as fast as possible and you know this other function here's a get",
    "start": "471240",
    "end": "477000"
  },
  {
    "text": "day of week function takes in a date time and returns a string which is day of week and",
    "start": "477000",
    "end": "484639"
  },
  {
    "text": "uh you know again it just becomes a static method what is a static method in",
    "start": "484639",
    "end": "490120"
  },
  {
    "text": "net it's something that exists only once in the Nam space or in the subname space if you want to think of a module one",
    "start": "490120",
    "end": "496440"
  },
  {
    "text": "cute thing and I'm not going to dive into this but you'll notice that this simple thing where I'm just trying to get the first four bites of a goid into",
    "start": "496440",
    "end": "502319"
  },
  {
    "text": "a string look at how much optimization the do the FSH compiler does to make that insanely fast and again the details",
    "start": "502319",
    "end": "509759"
  },
  {
    "text": "aren't important but I just wanted to sort of point that out so I just wanted to start by saying these weird things",
    "start": "509759",
    "end": "516039"
  },
  {
    "text": "I'm going to show you that seem like they're floating out in space that aren't attached to a class end up compiling in net to static classes",
    "start": "516039",
    "end": "523200"
  },
  {
    "text": "because every ultimately the net runtime is objectoriented the net runtime",
    "start": "523200",
    "end": "529760"
  },
  {
    "text": "understands um this the part where I have to hide",
    "start": "529760",
    "end": "535680"
  },
  {
    "text": "my hide my notifications",
    "start": "535680",
    "end": "541040"
  },
  {
    "text": "there we go um the net compiler understands uh sorry the net runtime",
    "start": "541040",
    "end": "546959"
  },
  {
    "text": "understands objectoriented stuff and so we so F gets translated to object-oriented",
    "start": "546959",
    "end": "553319"
  },
  {
    "text": "Concepts so back to this idea um what the way I think of it is at each point",
    "start": "553720",
    "end": "558880"
  },
  {
    "text": "on the Spectrum there's a different set of language constructs and really a different level of abstraction so the",
    "start": "558880",
    "end": "564959"
  },
  {
    "text": "constructs at each point on the Spectrum make it easier or maybe more difficult to expl express the things you want to",
    "start": "564959",
    "end": "571480"
  },
  {
    "text": "express and that's the beauty of having all these different languages um a few examples like it's really hard to tell",
    "start": "571480",
    "end": "578680"
  },
  {
    "text": "like in has school what CPU register to use to put a value in like that's not what you're supposed to do with the mathematical end at the same time you",
    "start": "578680",
    "end": "586160"
  },
  {
    "text": "can write a dictionary in assembly but it's not easy like it's just challenging it's verbose you wouldn't want to do",
    "start": "586160",
    "end": "592200"
  },
  {
    "text": "that obviously we do it in C and other languages that compiles to it it's possible um and another thing that we do",
    "start": "592200",
    "end": "598600"
  },
  {
    "text": "all the time in function code is we pass functions as parameters now you can totally do that in C++ and C but it's",
    "start": "598600",
    "end": "605959"
  },
  {
    "text": "just more verbose it's not it it's not normal kind of for the",
    "start": "605959",
    "end": "611279"
  },
  {
    "text": "language but it's totally normal in functional code so where does f sit like to me f",
    "start": "611279",
    "end": "618200"
  },
  {
    "text": "Bridges most of the spectrum um it's a little bit to the right of Center here",
    "start": "618200",
    "end": "624480"
  },
  {
    "text": "um but it really sits in the middle of the spectrum it gives you most of the functional constructs you get in the",
    "start": "624480",
    "end": "629720"
  },
  {
    "text": "bigger functional languages I know you don't get higher kinded types and the hasal purists will you know Tutt but",
    "start": "629720",
    "end": "636200"
  },
  {
    "text": "that's okay um and you get a lot of the object and lower level control that you get in C++ and C there's um there's a",
    "start": "636200",
    "end": "643760"
  },
  {
    "text": "Twitter account called Fast FP that's uh written by a guy named Matthew Cruz who's who's brilliant and he does a ton",
    "start": "643760",
    "end": "649720"
  },
  {
    "text": "of work on making FP unbelievably fast as fast or faster than C and in some",
    "start": "649720",
    "end": "656639"
  },
  {
    "text": "cases as fast as C++ so F lets you do that if you really want to dive in but",
    "start": "656639",
    "end": "663360"
  },
  {
    "text": "you get a lot of speed just from being in net I think we all know you know net at this point net 8 is about to be",
    "start": "663360",
    "end": "669560"
  },
  {
    "text": "released it's unbelievably fast it's at the top of the uh Tech and power benchmarks all the time so Timmy FSH is",
    "start": "669560",
    "end": "677399"
  },
  {
    "text": "one of the languages that's got the widest span there are other languages that have a wide span but I think you",
    "start": "677399",
    "end": "683200"
  },
  {
    "text": "know f is right on the top of the list and you get a ton of control of course when you're writing F you want to spend",
    "start": "683200",
    "end": "688519"
  },
  {
    "text": "a bunch of time on the functional side otherwise just use C and ultimately when you're writing",
    "start": "688519",
    "end": "694440"
  },
  {
    "text": "functional constructs because you're letting go of that control I I think when you're write objectoriented at",
    "start": "694440",
    "end": "699800"
  },
  {
    "text": "least my experience is I think about not just the intention of my code but I think very much about how the hardware",
    "start": "699800",
    "end": "705480"
  },
  {
    "text": "is going to execute it and my experience after a few years of writing functional",
    "start": "705480",
    "end": "710560"
  },
  {
    "text": "code a lot is I just have to kind of let go of that now you still have to pick",
    "start": "710560",
    "end": "715760"
  },
  {
    "text": "smart data structures you have to understand Big O notation and make sure you're not picking you know an O of N",
    "start": "715760",
    "end": "720920"
  },
  {
    "text": "squared algorithm and such but if you pick the right data structures and you don't do anything stupid and you trust",
    "start": "720920",
    "end": "726839"
  },
  {
    "text": "the compiler you're going to get unbelievable performance out of FP so I'm going to start with a few",
    "start": "726839",
    "end": "734440"
  },
  {
    "text": "quick things that you can take from F right into your C code start with the easy stuff type Al type aliases so F has",
    "start": "734440",
    "end": "743279"
  },
  {
    "text": "had type aliases like forever um uh I mentioned I'm writing",
    "start": "743279",
    "end": "748959"
  },
  {
    "text": "this Source control system here's like code straight out of my system Here Right From Grace and of course I have",
    "start": "748959",
    "end": "754600"
  },
  {
    "text": "things like repository ID and a repository name and so these are domain nouns if you think about domain driven",
    "start": "754600",
    "end": "760959"
  },
  {
    "text": "design a relative path now if I didn't have these names and I just my functions",
    "start": "760959",
    "end": "766320"
  },
  {
    "text": "just said goid or string or whatever it would be really hard to understand um what's going on",
    "start": "766320",
    "end": "773519"
  },
  {
    "text": "and one thing I want to show you is I have to move this over here there",
    "start": "773519",
    "end": "781839"
  },
  {
    "text": "we go um so I can look at",
    "start": "781839",
    "end": "787880"
  },
  {
    "text": "this that a little bigger and if I go to my where my types are defined no not",
    "start": "789120",
    "end": "798480"
  },
  {
    "text": "you I'm looking at a secondary monitor it's a little awkward so here's where",
    "start": "802240",
    "end": "807560"
  },
  {
    "text": "they're defined and here's like most of my domain nouns for the um for the",
    "start": "807560",
    "end": "814320"
  },
  {
    "text": "system and here's those ones I was talking about now one really beautiful thing about using type aliases is like",
    "start": "814320",
    "end": "820720"
  },
  {
    "text": "let's say we're talking about relative path so relative path is my concept for saying you have a file in your repo let",
    "start": "820720",
    "end": "826240"
  },
  {
    "text": "me think about git and what's the relative path from the rout where you would have your dogit directory in my",
    "start": "826240",
    "end": "831959"
  },
  {
    "text": "case it's a do Grace directory well one of the really nice things I can do with this because I've used a type Alias is I",
    "start": "831959",
    "end": "837759"
  },
  {
    "text": "can say find references and I can actually see do I",
    "start": "837759",
    "end": "843680"
  },
  {
    "text": "have my zoom it on I do not let me run Zoom",
    "start": "843680",
    "end": "849839"
  },
  {
    "text": "it got to have zoom it for your presentations of course so here I can actually find all the places that I use",
    "start": "850800",
    "end": "858000"
  },
  {
    "text": "relative path if I didn't have a type Alias and it was just string this is a search I could not do and I can't tell",
    "start": "858000",
    "end": "864160"
  },
  {
    "text": "you how convenient this is just when day-to-day coding um so that's a",
    "start": "864160",
    "end": "870160"
  },
  {
    "text": "beautiful thing in in F and obviously C has this now it's kind of for the last",
    "start": "870160",
    "end": "876279"
  },
  {
    "text": "couple of releases added this feature C 12 which is about to be released um add",
    "start": "876279",
    "end": "882680"
  },
  {
    "text": "like really filled out this feature very well using instead of type um but I just",
    "start": "882680",
    "end": "888639"
  },
  {
    "text": "want to say like use them that's my takeaway from this slide please use them",
    "start": "888639",
    "end": "894480"
  },
  {
    "text": "start today they're so convenient they're so handy it's going to feel a little awkward if you haven't ever done",
    "start": "894480",
    "end": "900560"
  },
  {
    "text": "it before but as soon as you start writing your domain nouns like this you're going to you're going to like not",
    "start": "900560",
    "end": "905839"
  },
  {
    "text": "remember what it was like before um next quick thing I want to talk about is",
    "start": "905839",
    "end": "912199"
  },
  {
    "text": "link so F has some native collections like list and array and map and they",
    "start": "912199",
    "end": "917560"
  },
  {
    "text": "invite functional composition which I'll show you in a second and you can of course use all the things from net",
    "start": "917560",
    "end": "922600"
  },
  {
    "text": "system doc collection. generic or concurrent or whatever um but link is",
    "start": "922600",
    "end": "927920"
  },
  {
    "text": "one of the best examples of using functional design in C um I use Link all",
    "start": "927920",
    "end": "933360"
  },
  {
    "text": "the time I love link link is great for um for really expressing your intention",
    "start": "933360",
    "end": "940319"
  },
  {
    "text": "as a programmer breaking it down in the same way that I always thought of SQL I used to be a SQL DBA I I actually enjoy",
    "start": "940319",
    "end": "947560"
  },
  {
    "text": "SQL I'm one of those crazy people and uh it turns out that writing SQL statements you really do express your intention",
    "start": "947560",
    "end": "954199"
  },
  {
    "text": "very clearly SQL turns out to be SQL queries anyway are a pure functional",
    "start": "954199",
    "end": "960519"
  },
  {
    "text": "language which kind of blew my mind when I realized it I was writing functional code for 20 plus years and I had no idea",
    "start": "960519",
    "end": "967959"
  },
  {
    "text": "um I also just want to say link is not slow link is not slow",
    "start": "967959",
    "end": "975759"
  },
  {
    "text": "and I will fight anyone who says otherwise um I won't but you know um and",
    "start": "975759",
    "end": "981240"
  },
  {
    "text": "like I know there's the there's the the well actually well actually you know I watched this video from Nick jpsis and",
    "start": "981240",
    "end": "988160"
  },
  {
    "text": "and you know he ran a micro Benchmark with",
    "start": "988160",
    "end": "992519"
  },
  {
    "text": "benchmark.us right um but like link link is so worth it to help you express your",
    "start": "1005639",
    "end": "1012240"
  },
  {
    "text": "your intention and here's like a quick example in F we we have this idea of um",
    "start": "1012240",
    "end": "1019120"
  },
  {
    "text": "of the sequence module sequence is how you say I inumerable in FP um and so you'll see like very",
    "start": "1019120",
    "end": "1025959"
  },
  {
    "text": "clearly what am I saying in this code well I have some list of addresses and I'm going to find the ones where the",
    "start": "1025959",
    "end": "1031079"
  },
  {
    "text": "country is Portugal and I'm going to just get the city field from the address",
    "start": "1031079",
    "end": "1036438"
  },
  {
    "text": "and I'm going to get the distinct list of cities and sort them alphabetically and in the same way in",
    "start": "1036439",
    "end": "1042120"
  },
  {
    "text": "link same thing it's very clear what you're trying to do and like I I feel like any other way of doing this is just",
    "start": "1042120",
    "end": "1047720"
  },
  {
    "text": "less clear it's more prone to bugs it's harder to comprehend when you walk up to it but doing it this one step at a time",
    "start": "1047720",
    "end": "1055000"
  },
  {
    "text": "is very functional it's that idea of I'm just transforming the data I'm transforming the shape of the data one",
    "start": "1055000",
    "end": "1061480"
  },
  {
    "text": "step at a time till I get my result anyway like use Link really do",
    "start": "1061480",
    "end": "1067480"
  },
  {
    "text": "and it drives me nuts when I just see we refuse to use Link we have a rule against",
    "start": "1067480",
    "end": "1073400"
  },
  {
    "text": "link why you know it's really fast um",
    "start": "1073400",
    "end": "1078960"
  },
  {
    "text": "static functions another thing that's great about F now I showed you the",
    "start": "1078960",
    "end": "1084000"
  },
  {
    "text": "compilation of F into static classes with static methods um if in C you can do the same",
    "start": "1084000",
    "end": "1091600"
  },
  {
    "text": "thing so usually in object-oriented code in C you know all the years I did C you",
    "start": "1091600",
    "end": "1098480"
  },
  {
    "text": "think of behavior as methods that hang off the class and and they manipulate",
    "start": "1098480",
    "end": "1103919"
  },
  {
    "text": "State inside of the class inside of the class instance so you know here's like you know I have my ty. do something and",
    "start": "1103919",
    "end": "1109640"
  },
  {
    "text": "I pass in some parameters and and it changes some internal state but in functional code as you saw the functions",
    "start": "1109640",
    "end": "1116200"
  },
  {
    "text": "are separated from the data you don't like hang a function usually off of a type unless you're doing specifically",
    "start": "1116200",
    "end": "1122600"
  },
  {
    "text": "objects um so they just they frequently just take in the type that they're working with and change something and",
    "start": "1122600",
    "end": "1129039"
  },
  {
    "text": "then return the type so here's an example of a function that takes in an order and changes the delivery date so",
    "start": "1129039",
    "end": "1135039"
  },
  {
    "text": "it takes in the order and a new delivery date and it returns a new instance of the order with that",
    "start": "1135039",
    "end": "1140919"
  },
  {
    "text": "data changed so there's an order coming in and an order going out and when you do that you have a really nice way to",
    "start": "1140919",
    "end": "1149960"
  },
  {
    "text": "compose functionality and that's really the you know the key in I'll talk about this",
    "start": "1149960",
    "end": "1155159"
  },
  {
    "text": "quite a bit later but the idea is to think about the shapes of your functions inputs and outputs and compose them um",
    "start": "1155159",
    "end": "1160400"
  },
  {
    "text": "one great example of this by the way is in ASP net core which uh most of us I",
    "start": "1160400",
    "end": "1166520"
  },
  {
    "text": "assume have seen but here's an example of exactly this in in uh in action in um",
    "start": "1166520",
    "end": "1174039"
  },
  {
    "text": "I'm going to show you the F version of of startup this is the this",
    "start": "1174039",
    "end": "1179120"
  },
  {
    "text": "is web startup but it's the same thing as you'd see in C so here's the configure method in startup class which",
    "start": "1179120",
    "end": "1185120"
  },
  {
    "text": "we've all seen and here's app what is app app is an i application Builder and",
    "start": "1185120",
    "end": "1190559"
  },
  {
    "text": "what do all these things do they add obviously they're adding functionality they're building the application up in",
    "start": "1190559",
    "end": "1196080"
  },
  {
    "text": "startup but every single one of these methods takes an i application Builder and returns an i application Builder and",
    "start": "1196080",
    "end": "1202640"
  },
  {
    "text": "so you get to compose you know I mean like on the one hand you could go like well what's the big deal I just don't have to type app",
    "start": "1202640",
    "end": "1208960"
  },
  {
    "text": "dot in the front of every line and sure that's true but it feels very different I mean ultimately like it's not just",
    "start": "1208960",
    "end": "1215880"
  },
  {
    "text": "about the syntax it's kind of about how you feel writing it and and and how you're expressing yourself um one",
    "start": "1215880",
    "end": "1222480"
  },
  {
    "text": "interesting just to just to contrast this um I use Dapper DPR the D APR",
    "start": "1222480",
    "end": "1229760"
  },
  {
    "text": "Dapper um for grace and I use the actor pattern and so here's where I am",
    "start": "1229760",
    "end": "1234919"
  },
  {
    "text": "actually registering all the different types of actors I have in my system and in this case the register actor method",
    "start": "1234919",
    "end": "1241760"
  },
  {
    "text": "doesn't return this actor's object so I have to keep saying actors do actors do",
    "start": "1241760",
    "end": "1247720"
  },
  {
    "text": "actors dot does it work sure is it confusing no I get it it's not but it's",
    "start": "1247720",
    "end": "1253280"
  },
  {
    "text": "just it's not quite as elegant and elegance matters so you know just two different",
    "start": "1253280",
    "end": "1260000"
  },
  {
    "text": "ways of doing the same thing but that idea of um taking in the type and returning the type is really fundamental",
    "start": "1260000",
    "end": "1266159"
  },
  {
    "text": "in fun in functional code so inputs and",
    "start": "1266159",
    "end": "1272240"
  },
  {
    "text": "outputs um I think about inputs and outputs in terms of um functions having",
    "start": "1272240",
    "end": "1278679"
  },
  {
    "text": "conversations so if we're doing composition based on the shapes of our",
    "start": "1278679",
    "end": "1283960"
  },
  {
    "text": "functions then then having functions with meaningful alot types does matter and and the output types um Drive the",
    "start": "1283960",
    "end": "1290080"
  },
  {
    "text": "composition that's possible so so I'm going to run through some examples and these are going to be off of the list",
    "start": "1290080",
    "end": "1297480"
  },
  {
    "text": "type and of course these are going to be link examples but you'll kind of see what I mean so if you look at the if you",
    "start": "1297480",
    "end": "1302720"
  },
  {
    "text": "look at link uh do select if you look at I numer rule. select what's the type of it well you take in a list and you give",
    "start": "1302720",
    "end": "1309480"
  },
  {
    "text": "it a function that converts the type that's coming into some other type which",
    "start": "1309480",
    "end": "1314760"
  },
  {
    "text": "is actually what the select statement in SQL does the select statement in SQL says I'm going to take in in all the columns of the table and only pick these",
    "start": "1314760",
    "end": "1321840"
  },
  {
    "text": "so I'm converting from a type that looks like all the columns to a type that doesn't and so select or map which is",
    "start": "1321840",
    "end": "1328679"
  },
  {
    "text": "another way that it's said in functional code um does this translation and it takes in a list it returns a list um the",
    "start": "1328679",
    "end": "1336360"
  },
  {
    "text": "wear Clause starts with a list and you pass in a function a Lambda function in",
    "start": "1336360",
    "end": "1342039"
  },
  {
    "text": "link that goes from your type to a bull and if it's true it goes to the output",
    "start": "1342039",
    "end": "1347760"
  },
  {
    "text": "list if it's false it get gets dropped that's exactly what the wear Clause always does that's called a predicate um",
    "start": "1347760",
    "end": "1354279"
  },
  {
    "text": "the take function takes in your list and an integer and also returns a list so all of these examples you are getting a",
    "start": "1354279",
    "end": "1359679"
  },
  {
    "text": "list at the other end um the first is a little different the first method takes",
    "start": "1359679",
    "end": "1367159"
  },
  {
    "text": "in your list and that same predicate and just Returns the first one now you'll notice that we've gone from returning",
    "start": "1367159",
    "end": "1373600"
  },
  {
    "text": "the returning a list to a single instance of your type um so that's interesting and then",
    "start": "1373600",
    "end": "1380279"
  },
  {
    "text": "some another example where you pass it a function from your type to some numeric",
    "start": "1380279",
    "end": "1386240"
  },
  {
    "text": "type it could be any numeric type I'm using float here and you're now taking your entire list and and kind of",
    "start": "1386240",
    "end": "1393440"
  },
  {
    "text": "compressing it down to a single number a single float and so you can sort of see as you drop down this list the things",
    "start": "1393440",
    "end": "1400240"
  },
  {
    "text": "you can do in terms of composability as you um as you return these types and",
    "start": "1400240",
    "end": "1407320"
  },
  {
    "text": "want to compose them there's just less you can do because you're returning less data and so like returning returning",
    "start": "1407320",
    "end": "1413840"
  },
  {
    "text": "more data Maybe than you're used to in object-oriented code um you kind of get used to it um one interesting thing at",
    "start": "1413840",
    "end": "1420559"
  },
  {
    "text": "the end is imagine a function that you pass in your I inumerable and it's some whatever other parameter string or",
    "start": "1420559",
    "end": "1427000"
  },
  {
    "text": "whatever and you return void unit is how you say void in",
    "start": "1427000",
    "end": "1432120"
  },
  {
    "text": "f um what do how do you compose that if you return void you're kind of ending",
    "start": "1432120",
    "end": "1437720"
  },
  {
    "text": "the conversation and so what I want to point out about that is um I'm using this sort of void",
    "start": "1437720",
    "end": "1445120"
  },
  {
    "text": "considered weird idea if you if anyone has ever read and I highly recommend you do the uh the famous Edgar",
    "start": "1445120",
    "end": "1451360"
  },
  {
    "text": "dystra paper from 1968 go-to statement considered harmful um and that was where he just",
    "start": "1451360",
    "end": "1458320"
  },
  {
    "text": "it's a quick four-page paper it's really interesting but that was like back in' 68 when people were using goto for their code all over the place and he was like",
    "start": "1458320",
    "end": "1465200"
  },
  {
    "text": "Hey that might not be the best idea that makes it really hard to understand your intention and I just want to kind of",
    "start": "1465200",
    "end": "1471159"
  },
  {
    "text": "like borrow his thinking a little bit and go void's weird um it ends the conversation in",
    "start": "1471159",
    "end": "1478600"
  },
  {
    "text": "functional programming it just it's not wrong it's totally valid but it just feels weird it it it it it's behavior",
    "start": "1478600",
    "end": "1486559"
  },
  {
    "text": "that doesn't have any communication it's a black box",
    "start": "1486559",
    "end": "1491799"
  },
  {
    "text": "and it masks whatever happened so as I've written more farp I've realized",
    "start": "1491799",
    "end": "1499200"
  },
  {
    "text": "that a significant amount of time that I wrote a function in C or even in F that",
    "start": "1499200",
    "end": "1504720"
  },
  {
    "text": "returned void I was being a little lazy in my thinking like I'm I'm masking",
    "start": "1504720",
    "end": "1510399"
  },
  {
    "text": "something and again there are there are totally valid reasons to do it I'm not trying to be dogmatic about it but I",
    "start": "1510399",
    "end": "1516279"
  },
  {
    "text": "just noticed that I didn't I stopped liking it I find it it's almost a code smell I try to avoid it doesn't mean I",
    "start": "1516279",
    "end": "1523120"
  },
  {
    "text": "don't have functions that return void especially if you're just writing to the console or whatever obviously but",
    "start": "1523120",
    "end": "1528919"
  },
  {
    "text": "anyway um the opposite of that is being generous with your return types and and like I was saying with you know with all",
    "start": "1528919",
    "end": "1535200"
  },
  {
    "text": "those functions where you the more data you return the more you can do with it um and the more ways the callers can can",
    "start": "1535200",
    "end": "1542000"
  },
  {
    "text": "continue computation with it you know in object oriented code my at least my experience is that we usually try to",
    "start": "1542000",
    "end": "1549320"
  },
  {
    "text": "return the smallest amount of data from a function we like really reduce it and we want to like it's almost like writing",
    "start": "1549320",
    "end": "1555320"
  },
  {
    "text": "writing jokes for standup comedy you want to get to the nut of the joke they say and that's kind of what you do in",
    "start": "1555320",
    "end": "1560559"
  },
  {
    "text": "object-oriented functions a lot um in functional code you kind of got to free your mind",
    "start": "1560559",
    "end": "1567440"
  },
  {
    "text": "man um uh you've return more than just the result data a lot of times if you want",
    "start": "1567440",
    "end": "1573840"
  },
  {
    "text": "to have that composability like I was you know like we just saw with I application Builder or um I service",
    "start": "1573840",
    "end": "1579520"
  },
  {
    "text": "collection in the configure Services method you keep returning that I application Builder you don't have to",
    "start": "1579520",
    "end": "1586039"
  },
  {
    "text": "but if you do you enable a certain kind of compos ility that makes your intention more clear um and this is one reason the tle",
    "start": "1586039",
    "end": "1593840"
  },
  {
    "text": "is really important in functional code you'll see tupple used a lot uh in a way that that's you don't use it as much in",
    "start": "1593840",
    "end": "1600480"
  },
  {
    "text": "C because it it enables that composability um and it's totally normal to return",
    "start": "1600480",
    "end": "1606880"
  },
  {
    "text": "input values along with your result type in in functional code it's normal in a way that it's not normal in C and that's",
    "start": "1606880",
    "end": "1613039"
  },
  {
    "text": "why when we see it in like I application Builder it's it's like seems special",
    "start": "1613039",
    "end": "1618480"
  },
  {
    "text": "like we don't see it in other places but in functional code you see it a lot so those are the three three quick",
    "start": "1618480",
    "end": "1626039"
  },
  {
    "text": "hits now we're going to do a tiny bit of category Theory we're going to we're going to",
    "start": "1626039",
    "end": "1631440"
  },
  {
    "text": "we're going to get more complex as we go so concept of total and partial functions out of curiosity when I say",
    "start": "1631440",
    "end": "1637600"
  },
  {
    "text": "total and partial functions who knows what that is awesome one person for everyone on video",
    "start": "1637600",
    "end": "1645080"
  },
  {
    "text": "um so um a total function um is a function that's defined that has a",
    "start": "1645080",
    "end": "1651240"
  },
  {
    "text": "defined output value for every input value in the domain domain is what we call the input values the co- domain is",
    "start": "1651240",
    "end": "1657760"
  },
  {
    "text": "what we call the output values I'll show you a little example um but here's one quick example string. isnull or",
    "start": "1657760",
    "end": "1663880"
  },
  {
    "text": "whitespace that function for every string I pass into it I have a return type I will get a",
    "start": "1663880",
    "end": "1670480"
  },
  {
    "text": "true or false out of that function that's a total function I don't have to think about it I don't have to worry about it it works every time a partial",
    "start": "1670480",
    "end": "1677559"
  },
  {
    "text": "function is a function that may or may not have an output value for a value you",
    "start": "1677559",
    "end": "1682640"
  },
  {
    "text": "pass in one example is the square root function which is a function that takes a double and returns a double but what",
    "start": "1682640",
    "end": "1689720"
  },
  {
    "text": "if you return a negative what if you pass in a negative number like what do you get out a square",
    "start": "1689720",
    "end": "1694960"
  },
  {
    "text": "root in that case uh you know unless you're in the complex do number domain you get you get",
    "start": "1694960",
    "end": "1701360"
  },
  {
    "text": "weirdness so so here's a quick little example of get day of week here's a",
    "start": "1701360",
    "end": "1706519"
  },
  {
    "text": "little function the type of get day of week takes in a date time and returns like Monday to Sunday of course forgive",
    "start": "1706519",
    "end": "1712440"
  },
  {
    "text": "me I'm American I'm using English um so every date time I pass into this",
    "start": "1712440",
    "end": "1719240"
  },
  {
    "text": "function will give me a result type in the Cod domain it will give me like I it",
    "start": "1719240",
    "end": "1725720"
  },
  {
    "text": "will never fail this function will work every single time no problem and obviously this is defined on the date",
    "start": "1725720",
    "end": "1731159"
  },
  {
    "text": "time type anyway but here's a slightly different example um what if I'm passing in what if I want to get the day of week",
    "start": "1731159",
    "end": "1737880"
  },
  {
    "text": "for a particular order so I pass in the guid the order ID and I want to get out",
    "start": "1737880",
    "end": "1743799"
  },
  {
    "text": "that same Monday to Sunday string so here's the first the first four work",
    "start": "1743799",
    "end": "1748919"
  },
  {
    "text": "fine and then something goes wrong on the fifth one what I don't know like I get a 404 I",
    "start": "1748919",
    "end": "1756080"
  },
  {
    "text": "get a 500 I get a 429 too many requests I get a network timeout exception I who",
    "start": "1756080",
    "end": "1762799"
  },
  {
    "text": "knows I just get some sort of error something doesn't work and effectively what what this means this is now a",
    "start": "1762799",
    "end": "1768519"
  },
  {
    "text": "partial function and what that means is that this type signature of goid string",
    "start": "1768519",
    "end": "1773600"
  },
  {
    "text": "is a lie like that's really what a partial function is like we think it's as simple",
    "start": "1773600",
    "end": "1778679"
  },
  {
    "text": "as a guid to string but it's totally not what this function actually says is you pass in a guid and sometimes you'll get",
    "start": "1778679",
    "end": "1785559"
  },
  {
    "text": "a string back and sometimes you won't and so when you're dealing with partial",
    "start": "1785559",
    "end": "1790679"
  },
  {
    "text": "functions they're annoying you have to like check your input values and or check your output",
    "start": "1790679",
    "end": "1796960"
  },
  {
    "text": "values every time you use a partial function and and a lot of the errors",
    "start": "1796960",
    "end": "1802360"
  },
  {
    "text": "that we get in our code um are because we forget we don't wrap partial",
    "start": "1802360",
    "end": "1807919"
  },
  {
    "text": "functions in the right checks they're harder to reason about like how many times do you look you you think I just",
    "start": "1807919",
    "end": "1814120"
  },
  {
    "text": "simply have to call a function and then what you end up doing is I have to look at how that function is defined and I have to like read the code and",
    "start": "1814120",
    "end": "1820240"
  },
  {
    "text": "understand what it's doing and you know you shouldn't like with is null or whites space I don't ever have to do",
    "start": "1820240",
    "end": "1826559"
  },
  {
    "text": "that I have never looked at the source code for isol or Whit space I just know it works but a lot of times when I'm you",
    "start": "1826559",
    "end": "1832600"
  },
  {
    "text": "know again you know you're a developer you're on a team there some function you've never called before you're like",
    "start": "1832600",
    "end": "1837799"
  },
  {
    "text": "what does this thing do um and and partial functions just invite more bugs",
    "start": "1837799",
    "end": "1843840"
  },
  {
    "text": "so back to our considered metaphor exception considered perilous like ex",
    "start": "1843840",
    "end": "1850120"
  },
  {
    "text": "part functions that return exceptions or that can return exceptions are partial functions which means they're",
    "start": "1850120",
    "end": "1856919"
  },
  {
    "text": "annoying and and the solution is to convert your partial functions to Total",
    "start": "1856919",
    "end": "1862320"
  },
  {
    "text": "functions um and when you convert to Total functions the caller now has something like has to deal with it so",
    "start": "1862320",
    "end": "1868919"
  },
  {
    "text": "the way that we wrap that is with a result type in F and this exists in csharp there's a great new get package",
    "start": "1868919",
    "end": "1875720"
  },
  {
    "text": "called fluent results it's got like 4.6 million downloads or something um but if",
    "start": "1875720",
    "end": "1881760"
  },
  {
    "text": "you one way to look at the result type and the result type is this thing that either returns an okay or an error or",
    "start": "1881760",
    "end": "1887600"
  },
  {
    "text": "sometimes it's written as a success or failure or an okay or failure but it's that idea um a result type is an adapter",
    "start": "1887600",
    "end": "1895720"
  },
  {
    "text": "over a partial function that turns it into a total function and so this function that we thought was a gooid to",
    "start": "1895720",
    "end": "1901960"
  },
  {
    "text": "string if we use result type what it should be is Aid to a result of okay",
    "start": "1901960",
    "end": "1907200"
  },
  {
    "text": "string or some error type that you define and by doing that and what you",
    "start": "1907200",
    "end": "1912600"
  },
  {
    "text": "really want to do is handle your exceptions where they happen don't let them propagate up the stack minimize the",
    "start": "1912600",
    "end": "1919960"
  },
  {
    "text": "potential problems minimize the um the opportunity that other developers have",
    "start": "1919960",
    "end": "1926679"
  },
  {
    "text": "to forget to wrap your code in checks if you return a result type you force them",
    "start": "1926679",
    "end": "1932039"
  },
  {
    "text": "to deal with it and that's a good thing because the truth is that's the minimum amount of work you really need to",
    "start": "1932039",
    "end": "1939240"
  },
  {
    "text": "do um and again like don't be dogmatic I'm not trying to be dogmatic at all like I love exception structured",
    "start": "1939320",
    "end": "1945240"
  },
  {
    "text": "exception handling is awesome I'm you know I'm I'm not I'm not trying to say like",
    "start": "1945240",
    "end": "1950519"
  },
  {
    "text": "exceptions are evil don't ever have them at all you do have them we do have them in net they're great but deal with them",
    "start": "1950519",
    "end": "1958000"
  },
  {
    "text": "quickly wrap them in result similarly functions that can return a",
    "start": "1958000",
    "end": "1964279"
  },
  {
    "text": "knowable reference type are partial functions now um uh if you want to be",
    "start": "1964279",
    "end": "1970720"
  },
  {
    "text": "dogmatic about category Theory you can argue that uh let's imagine that this",
    "start": "1970720",
    "end": "1976519"
  },
  {
    "text": "function return I'm doing some fun that returns an order and you could argue that well there's a category that",
    "start": "1976519",
    "end": "1982039"
  },
  {
    "text": "includes null that's that includes orders all orders plus null you could totally make that argument in category",
    "start": "1982039",
    "end": "1987679"
  },
  {
    "text": "Theory it's not the that's not helping us I want to argue that null is actually not in that category like there's orders",
    "start": "1987679",
    "end": "1994399"
  },
  {
    "text": "and then there's this other thing called null because that's where we get into problems and we want to think of it like that so in the same way that if you",
    "start": "1994399",
    "end": "2000760"
  },
  {
    "text": "returner an exception you have a partial function if you return null you have a partial function so how do you fix that",
    "start": "2000760",
    "end": "2006760"
  },
  {
    "text": "well and I'm sorry you know this is why we wrap them in into argument null exception this is why we check for them",
    "start": "2006760",
    "end": "2013039"
  },
  {
    "text": "and this is why null reference exception is the number one bug still in C and this is why C has worked so hard on you",
    "start": "2013039",
    "end": "2020080"
  },
  {
    "text": "know adding the question mark and the damit operator right the the exclamation point um and it's great I'm really glad",
    "start": "2020080",
    "end": "2027519"
  },
  {
    "text": "that c has made those moves but still if your function could return a null you have a partial function so what's the",
    "start": "2027519",
    "end": "2034240"
  },
  {
    "text": "solution first of all like use the C functions like use use question mark",
    "start": "2034240",
    "end": "2039679"
  },
  {
    "text": "like use the dam it operator interestingly enough I think um right before this talk um if you're watching",
    "start": "2039679",
    "end": "2045480"
  },
  {
    "text": "videos on YouTube I highly recommend Martin beloo just did a talk about why the damit operator",
    "start": "2045480",
    "end": "2051599"
  },
  {
    "text": "is about the talk was about properly putting all this null checking in your C",
    "start": "2051599",
    "end": "2057158"
  },
  {
    "text": "code and I think in his abstract he said like using the damit operator isn't as simple as you think and he's right um",
    "start": "2057159",
    "end": "2063960"
  },
  {
    "text": "but let pardon me first use the C tools and if that doesn't get the job done if",
    "start": "2063960",
    "end": "2069440"
  },
  {
    "text": "you're still in a situation where you might return null wrap it in an option that can return a sum or a none or wrap",
    "start": "2069440",
    "end": "2075440"
  },
  {
    "text": "it in a result that's got an okay or an error again force your caller to think it through and deal with it and not",
    "start": "2075440",
    "end": "2082800"
  },
  {
    "text": "forget to handle an an error situation not that I not that I've ever done that",
    "start": "2082800",
    "end": "2090280"
  },
  {
    "text": "um discriminated unions who wants discriminated unions",
    "start": "2090440",
    "end": "2096639"
  },
  {
    "text": "everybody if you didn't raise your hand you're lying",
    "start": "2096640",
    "end": "2102920"
  },
  {
    "text": "um so F Shar pasm C",
    "start": "2103800",
    "end": "2109240"
  },
  {
    "text": "doesn't sucks to be you",
    "start": "2109240",
    "end": "2115400"
  },
  {
    "text": "um okay seriously um discriminated unions that",
    "start": "2115400",
    "end": "2121280"
  },
  {
    "text": "just have cases but don't have any data attached to them I'll show you a quick example in a second um there just enums",
    "start": "2121280",
    "end": "2128400"
  },
  {
    "text": "they're the same functionally as enums so like I'm going to wave my hands and",
    "start": "2128400",
    "end": "2133960"
  },
  {
    "text": "go half the time when you use a discriminated Union you're really just writing an enom it's the same thing",
    "start": "2133960",
    "end": "2140280"
  },
  {
    "text": "you're so like half the time you're not missing discriminated unions at all you're totally fine in C half the time",
    "start": "2140280",
    "end": "2145560"
  },
  {
    "text": "they carry data whatever some percentage of the time and that's where the magic of discriminated unions is they'll get",
    "start": "2145560",
    "end": "2153119"
  },
  {
    "text": "there like mad terson will totally put discriminated unions G it'll happen um",
    "start": "2153119",
    "end": "2160520"
  },
  {
    "text": "actually just to show you a quick example of that um here's a little silly thing I cooked",
    "start": "2160520",
    "end": "2166599"
  },
  {
    "text": "up so um imagine that uh I'm an auto auto repair shop and I have certain",
    "start": "2166599",
    "end": "2172280"
  },
  {
    "text": "repairs right a repair order is this thing that's got a customer and a appointment time for the repair and a",
    "start": "2172280",
    "end": "2178319"
  },
  {
    "text": "list of repair items so here's the first three discriminated unions that I have where",
    "start": "2178319",
    "end": "2185280"
  },
  {
    "text": "like which Tire am I fixing or what oil vendor or what weight of oil I",
    "start": "2185280",
    "end": "2191319"
  },
  {
    "text": "don't the these are American measure I don't know if these are international I apologize if they're not but it's how we",
    "start": "2191319",
    "end": "2196880"
  },
  {
    "text": "refer to them in the states um so like all these things they're just enums I",
    "start": "2196880",
    "end": "2202119"
  },
  {
    "text": "mean they're discriminated unions officially and whatever but they work just like enums you're not missing",
    "start": "2202119",
    "end": "2207160"
  },
  {
    "text": "anything is my point if your discriminated unions look like that you're not missing anything in C the magic is here it's with stuff like um",
    "start": "2207160",
    "end": "2215760"
  },
  {
    "text": "where I have like where I'm carrying data with my case um and you know when you don't have",
    "start": "2215760",
    "end": "2223640"
  },
  {
    "text": "discriminated unions this is the part where I have where you'll have an enum and then you'll have all these data fields sitting off to the side and some",
    "start": "2223640",
    "end": "2230319"
  },
  {
    "text": "of them will just be empty and you'll have to keep track of which ones you're actually using depending on the case and",
    "start": "2230319",
    "end": "2235400"
  },
  {
    "text": "so like that's less elegant it totally works we've all been doing it forever it's really nice when you have",
    "start": "2235400",
    "end": "2240920"
  },
  {
    "text": "discriminated unions but like it's okay if you don't um another thing I just",
    "start": "2240920",
    "end": "2246440"
  },
  {
    "text": "wanted to show you that I thought it was interesting is um this is 35 lines of f",
    "start": "2246440",
    "end": "2251680"
  },
  {
    "text": "to express this if you want to think of this as the domain types of an auto",
    "start": "2251680",
    "end": "2257079"
  },
  {
    "text": "repair vendor um 35 lines of f the C over",
    "start": "2257079",
    "end": "2262839"
  },
  {
    "text": "here uh when it deom when it you know compiles to I and then sharp lab decompiles it turned out to be",
    "start": "2262839",
    "end": "2270160"
  },
  {
    "text": "1,878 lines of C for these 35 lines of F and that's",
    "start": "2270160",
    "end": "2275640"
  },
  {
    "text": "because in order to do discrimin ated Union properly inet we are implementing I equatable of",
    "start": "2275640",
    "end": "2283280"
  },
  {
    "text": "T we're implementing I structural equatable we're implementing I",
    "start": "2283280",
    "end": "2288359"
  },
  {
    "text": "comparable of t i comparable and I structural comparable and we're doing that for every",
    "start": "2288359",
    "end": "2294319"
  },
  {
    "text": "single uh uh discriminated Union and I point that out just to say um mads",
    "start": "2294319",
    "end": "2300119"
  },
  {
    "text": "terson being conservative about bringing this into C makes some sense like it's",
    "start": "2300119",
    "end": "2306520"
  },
  {
    "text": "it's it's more going on than it might seem on the surface and by the way it's almost 5,000 lines of",
    "start": "2306520",
    "end": "2312359"
  },
  {
    "text": "iil uh so it's I thought that was interesting um so um the thing I wanted to talk",
    "start": "2312359",
    "end": "2319839"
  },
  {
    "text": "about discriminated unions and enums about though is um this idea of a a match expression in",
    "start": "2319839",
    "end": "2328000"
  },
  {
    "text": "F is how you say switch right and so in F an incomplete match expression if I",
    "start": "2328000",
    "end": "2334200"
  },
  {
    "text": "were to match like on three of the tires but not the fourth one I'd get a warning and the same thing in C sh if you match",
    "start": "2334200",
    "end": "2340760"
  },
  {
    "text": "on some of your enum but not all of it you get a warning and what I want to suggest is that's bad and the only place",
    "start": "2340760",
    "end": "2348680"
  },
  {
    "text": "that I use warnings as errors is this and if you look at my FSR files or CSR",
    "start": "2348680",
    "end": "2355640"
  },
  {
    "text": "files I turn on these settings so I have warnings as errors for that's the F",
    "start": "2355640",
    "end": "2363079"
  },
  {
    "text": "warning and that's the C warning um please do this in your project",
    "start": "2363079",
    "end": "2368800"
  },
  {
    "text": "it is so worth doing um my code will not compile if I miss something in a match",
    "start": "2368800",
    "end": "2375319"
  },
  {
    "text": "statement and I am glad that it I'm glad that it doesn't because I don't want to",
    "start": "2375319",
    "end": "2380400"
  },
  {
    "text": "find out the hard way so like right now with I know you don't have if you don't have discriminated unions yet you do",
    "start": "2380400",
    "end": "2386160"
  },
  {
    "text": "have this please do this okay now we're going to get to the really fun complicated",
    "start": "2386160",
    "end": "2393440"
  },
  {
    "text": "stuff shapes as I said you know we think about the shapes of our functions in in",
    "start": "2393440",
    "end": "2400240"
  },
  {
    "text": "functional code um functional programming doesn't use inheritance for composition or um interface",
    "start": "2400240",
    "end": "2406960"
  },
  {
    "text": "implementations or sequential composition we think about chaining functions together based on their shapes",
    "start": "2406960",
    "end": "2414200"
  },
  {
    "text": "so um because this is a common Concept in FP and other functional languages",
    "start": "2414200",
    "end": "2419280"
  },
  {
    "text": "like I was saying about that spectrum that at different points on the Spectrum some concepts are more elegant easier to",
    "start": "2419280",
    "end": "2425319"
  },
  {
    "text": "express and some concepts are less elant less elegant um in F it's really easy to",
    "start": "2425319",
    "end": "2430359"
  },
  {
    "text": "express the types of functions so here's an example of a cured function with",
    "start": "2430359",
    "end": "2436000"
  },
  {
    "text": "spaces between the parameters like here's a function that takes in an INT and a string and returns a bu and and",
    "start": "2436000",
    "end": "2442160"
  },
  {
    "text": "here's a function that takes in a tuple of intn string which you think of as one type",
    "start": "2442160",
    "end": "2447680"
  },
  {
    "text": "because it's tupple and returns a bu now just one side comment whenever you write a function in C and it's got those",
    "start": "2447680",
    "end": "2454240"
  },
  {
    "text": "parentheses and you have your parameters in there you're right you're effectively mathematically creating a tuple right if",
    "start": "2454240",
    "end": "2461400"
  },
  {
    "text": "you have a c function that takes in two or three or four parameters you're saying I have a tuple of these parameters little mathematical thing um",
    "start": "2461400",
    "end": "2469640"
  },
  {
    "text": "in C it's a little less elegant now granted these are um",
    "start": "2469640",
    "end": "2475119"
  },
  {
    "text": "egregious uh examples um these are uh",
    "start": "2475119",
    "end": "2481119"
  },
  {
    "text": "here's uh where's my type sorry where's my where's my pen pen so this is Select many from link",
    "start": "2481119",
    "end": "2489720"
  },
  {
    "text": "this is aggregate from link these are particularly hard to read I grant you um",
    "start": "2489720",
    "end": "2494960"
  },
  {
    "text": "and you notice that they take functions right here's what the funk is Right Funk",
    "start": "2494960",
    "end": "2500119"
  },
  {
    "text": "is this is how you say the shape of a function in C and it takes in a certain number of type parameters and basically",
    "start": "2500119",
    "end": "2507319"
  },
  {
    "text": "the last type parameter is the return type of a funk if you see an action by",
    "start": "2507319",
    "end": "2512359"
  },
  {
    "text": "the way an action always returns void an action is like a funk except it always returns void um my only point about",
    "start": "2512359",
    "end": "2518480"
  },
  {
    "text": "showing this is that it's just less elegant and C to think about the shapes of your functions you can totally do it",
    "start": "2518480",
    "end": "2524599"
  },
  {
    "text": "and link does it for instance when you have all those lambdas but it's just less elegant so let's run through a few",
    "start": "2524599",
    "end": "2530599"
  },
  {
    "text": "silly examples simple examples just think it through a little bit um simple here's some simple functions function",
    "start": "2530599",
    "end": "2537359"
  },
  {
    "text": "takes in some type returns a different type takes in a string returns an INT whatever takes in a customer returns",
    "start": "2537359",
    "end": "2543680"
  },
  {
    "text": "just the ZIP code now um a function that takes in one type and Returns the same",
    "start": "2543680",
    "end": "2549359"
  },
  {
    "text": "type you can think of that as a special case of the function that takes in one type returns another type you know",
    "start": "2549359",
    "end": "2554720"
  },
  {
    "text": "mathematically kind of the same thing um now here's a slightly different example",
    "start": "2554720",
    "end": "2560480"
  },
  {
    "text": "where that function becomes actually a function you pass in to a larger function so at the bottom uh if we look",
    "start": "2560480",
    "end": "2568079"
  },
  {
    "text": "at um if we look at this function um here's a function that takes",
    "start": "2568079",
    "end": "2574280"
  },
  {
    "text": "in some type t and a function that converts from type T to Type U and then",
    "start": "2574280",
    "end": "2579599"
  },
  {
    "text": "Returns the U whatever that is and an example of this interestingly enough is the switch expression so if we look at",
    "start": "2579599",
    "end": "2586319"
  },
  {
    "text": "the switch switch expression and I have to go back to my",
    "start": "2586319",
    "end": "2591640"
  },
  {
    "text": "hopefully this works am I still how do I get out of pen mode that's hilarious I",
    "start": "2591640",
    "end": "2597520"
  },
  {
    "text": "got into pen mode how do I get out of it do I have to like oh there we go live",
    "start": "2597520",
    "end": "2603000"
  },
  {
    "text": "and learn um so here's a quick example of that um here's an enum right first",
    "start": "2603000",
    "end": "2608520"
  },
  {
    "text": "second third no big deal and here is the switch expression that processes that enum and you'll",
    "start": "2608520",
    "end": "2615920"
  },
  {
    "text": "notice that it takes in the enum think of that as your type T and every single",
    "start": "2615920",
    "end": "2621720"
  },
  {
    "text": "case in this switch expression is a function from from your enum to an INT",
    "start": "2621720",
    "end": "2628720"
  },
  {
    "text": "so this is a function from enum to int a function from En num to int a function from En num to int um and really notice",
    "start": "2628720",
    "end": "2637599"
  },
  {
    "text": "how like it's the same it's the same pattern right so if you ever thought of",
    "start": "2637599",
    "end": "2642920"
  },
  {
    "text": "a switch expression as the strategy pattern like that's actually what it is um and so we we do use it all the",
    "start": "2642920",
    "end": "2650359"
  },
  {
    "text": "time and and um I really give credit to the C team for finding ways to add",
    "start": "2650359",
    "end": "2656680"
  },
  {
    "text": "functional constructs to C but make them feel",
    "start": "2656680",
    "end": "2661800"
  },
  {
    "text": "carpy uh it's really be they do great work I'm it's a great team um",
    "start": "2661800",
    "end": "2668160"
  },
  {
    "text": "okay so that's a simple example um this is called the strategy pattern and you see this in link you see this in lots of",
    "start": "2668160",
    "end": "2674119"
  },
  {
    "text": "places um I highly recommend you think about this like one example I thought of",
    "start": "2674119",
    "end": "2679839"
  },
  {
    "text": "um is like the idea of processing addresses internationally so I might",
    "start": "2679839",
    "end": "2685240"
  },
  {
    "text": "have I might have a function that takes in an address and takes in a different function to create the correct canonical",
    "start": "2685240",
    "end": "2691599"
  },
  {
    "text": "version of that address depending on what country it's from one example that might show up in your code stuff like",
    "start": "2691599",
    "end": "2696920"
  },
  {
    "text": "that that okay now we're going to get a little bit more complex back",
    "start": "2696920",
    "end": "2703520"
  },
  {
    "text": "to oh sorry I meant to say this that's what it looks like in C again can you",
    "start": "2703520",
    "end": "2708960"
  },
  {
    "text": "say it sure is it elegant all right now we're going to",
    "start": "2708960",
    "end": "2715520"
  },
  {
    "text": "have some",
    "start": "2715520",
    "end": "2717839"
  },
  {
    "text": "fun here's a shape here are shapes that come up in functional programming a lot",
    "start": "2722520",
    "end": "2727680"
  },
  {
    "text": "turns out so when I say ta here so imagine here's here's some type we're",
    "start": "2727680",
    "end": "2732760"
  },
  {
    "text": "taking in some value and and a function and returning some modified type right so when I say t of a what what do I mean",
    "start": "2732760",
    "end": "2739559"
  },
  {
    "text": "by that um in functional code like I don't necessarily mean a generic like",
    "start": "2739559",
    "end": "2745440"
  },
  {
    "text": "I've taken out I haven't used angle brackets here because I don't want to say it's just a generic it might be a generic but it might not be um maybe",
    "start": "2745440",
    "end": "2752599"
  },
  {
    "text": "it's a record that this outer type is holding and it's a particular field I'm interested in but there's a lot of times",
    "start": "2752599",
    "end": "2758079"
  },
  {
    "text": "that I'm writing code that I want that it's held by some outer type and I don't",
    "start": "2758079",
    "end": "2763480"
  },
  {
    "text": "really want to compute on the outer type I want to reach into that outer type and compute on the value it's that's it's",
    "start": "2763480",
    "end": "2768520"
  },
  {
    "text": "holding do something to it and keep the outer type but output that new value",
    "start": "2768520",
    "end": "2773599"
  },
  {
    "text": "like that happens an awful lot in functional programming it's something you run into all the time and here's two",
    "start": "2773599",
    "end": "2778960"
  },
  {
    "text": "different ways of getting the output of that function wrapped back in that outer",
    "start": "2778960",
    "end": "2784720"
  },
  {
    "text": "type so in the top one you'll you'll notice that the that this function only converts back to",
    "start": "2784720",
    "end": "2792040"
  },
  {
    "text": "pen um in the top one this function converts the value creates the new value",
    "start": "2792040",
    "end": "2799119"
  },
  {
    "text": "but it's the responsibility of the outer function it's the responsibility of this entire",
    "start": "2799119",
    "end": "2805200"
  },
  {
    "text": "function to wrap it back in that outer type so that's totally it's a valid way to do it that's one way to do it um the",
    "start": "2805200",
    "end": "2813000"
  },
  {
    "text": "select statement for instance in link looks like this this is the shape of the select statement um if you want to think",
    "start": "2813000",
    "end": "2819559"
  },
  {
    "text": "of your outer t as an i inumerable and that a as whatever the type that's being",
    "start": "2819559",
    "end": "2825200"
  },
  {
    "text": "held and select you just sort of pass in that function that goes from the type that's being held to some other some",
    "start": "2825200",
    "end": "2831400"
  },
  {
    "text": "other form well and then and then it's that outer select if you actually look at the source code for link for for",
    "start": "2831400",
    "end": "2837520"
  },
  {
    "text": "links. select that rewraps it in that in the outer ion numerable now another",
    "start": "2837520",
    "end": "2843119"
  },
  {
    "text": "totally valid way to do it is to say well that this function I'm passing in it's this function's job to wrap it in",
    "start": "2843119",
    "end": "2850559"
  },
  {
    "text": "that outer type another again this is totally common this happens all the time in functional programming it doesn't",
    "start": "2850559",
    "end": "2855880"
  },
  {
    "text": "happen as much in objectoriented so like all the stuff I've talked about so far is stuff you can easily do in CP now I'm",
    "start": "2855880",
    "end": "2862680"
  },
  {
    "text": "getting to the part that like f makes your life really much nicer and easier so let me show you um a quick example",
    "start": "2862680",
    "end": "2871319"
  },
  {
    "text": "like here's just a a sample pseudo code thing for defining this outer function right so here's a an example of defining",
    "start": "2871319",
    "end": "2877880"
  },
  {
    "text": "this whole Outer function and that shape has common names in functional",
    "start": "2877880",
    "end": "2883000"
  },
  {
    "text": "programming we it's called map it's called bind I've seen it called",
    "start": "2883000",
    "end": "2889240"
  },
  {
    "text": "apply but like the names are kind of common so so what we're saying in this function when however it is is like this",
    "start": "2889240",
    "end": "2895720"
  },
  {
    "text": "function knows what the outer type is and so when I pseudo code hand wavy go",
    "start": "2895720",
    "end": "2901559"
  },
  {
    "text": "well I'm going to like pass in the function that I'm calling and I'm going to pass in that value and I've reversed",
    "start": "2901559",
    "end": "2909359"
  },
  {
    "text": "the order because that way you can use the pipeline operator in F I'll show you that in a second um but ultimately this",
    "start": "2909359",
    "end": "2915839"
  },
  {
    "text": "this map function just gets the A out of the T whatever that means again is it a generic maybe is it just a record type",
    "start": "2915839",
    "end": "2924200"
  },
  {
    "text": "maybe is it inherited is it something inherited from The Base Class maybe like",
    "start": "2924200",
    "end": "2931280"
  },
  {
    "text": "the ultimate thing what I'm trying to sort of get at here is that um this isn't as this isn't easy to",
    "start": "2931280",
    "end": "2938520"
  },
  {
    "text": "put in an objectoriented straight jacket like it may or may not be one of those",
    "start": "2938520",
    "end": "2943960"
  },
  {
    "text": "forms that we're used to but either way we get the A out and then we take that function and we just pass the value into",
    "start": "2943960",
    "end": "2950240"
  },
  {
    "text": "the function and then we get out of it the b or the wrapped B in the outer type",
    "start": "2950240",
    "end": "2955920"
  },
  {
    "text": "so that's cool here's an example for instance of a function we might pass in",
    "start": "2955920",
    "end": "2961319"
  },
  {
    "text": "uh where like again I'm using pseudo code hand wavy here's a function where we square that a and we wrap it in the T",
    "start": "2961319",
    "end": "2968680"
  },
  {
    "text": "and we pass it back um here's actually some examples from uh from F source code",
    "start": "2968680",
    "end": "2975799"
  },
  {
    "text": "so here is on the result type that we were just talking about this is the",
    "start": "2975799",
    "end": "2981559"
  },
  {
    "text": "actual uh source code for this function in this case it's called bind instead of",
    "start": "2981559",
    "end": "2987160"
  },
  {
    "text": "map and you'll notice that it takes in the function which it's called binder",
    "start": "2987160",
    "end": "2992280"
  },
  {
    "text": "and it takes in that value which I called T and this is called result because it's the this is the result type",
    "start": "2992280",
    "end": "2997720"
  },
  {
    "text": "and in this case because the result type the shape of the result type again this isn't generic it's not inherited from",
    "start": "2997720",
    "end": "3003799"
  },
  {
    "text": "anything but the shape of the result type is it has either an okay or an error well if I'm passing in an error",
    "start": "3003799",
    "end": "3009799"
  },
  {
    "text": "just jet it like the the the value I want to pull out is the thing that's in the okay so if I get the okay I just",
    "start": "3009799",
    "end": "3018400"
  },
  {
    "text": "pass it into that binder function just like I kind of had my pseudo code that's how result does it similarly here's the",
    "start": "3018400",
    "end": "3024799"
  },
  {
    "text": "example for the option",
    "start": "3024799",
    "end": "3029240"
  },
  {
    "text": "type here's bind for the option type it's the same idea where I have a binder function I pass in the option if it's",
    "start": "3033520",
    "end": "3040640"
  },
  {
    "text": "none I don't have a value so I just return none if I have some then I can apply the function to it and and so like",
    "start": "3040640",
    "end": "3047440"
  },
  {
    "text": "how map or bind or apply is written really depends on the structure of that outer type but this happens all the time",
    "start": "3047440",
    "end": "3055480"
  },
  {
    "text": "where I really want to I don't don't care as much about the outer type I want to work on the values that are held",
    "start": "3055480",
    "end": "3060720"
  },
  {
    "text": "inside and so right and so that's kind of fun stuff",
    "start": "3060720",
    "end": "3068200"
  },
  {
    "text": "so you get to say stuff like once you have this map function if I wanted to sort of do a square in this case I'm",
    "start": "3068200",
    "end": "3074119"
  },
  {
    "text": "going to say map I'm going to pass the function square into it I'm going to pass my value that I you know this this",
    "start": "3074119",
    "end": "3081040"
  },
  {
    "text": "whatever this outer T thing that I have but in FSH this is something you can't do in C",
    "start": "3081040",
    "end": "3087200"
  },
  {
    "text": "because we don't have a pipeline operator in C so here's a cool thing you can do you can take the T put it in",
    "start": "3087200",
    "end": "3092599"
  },
  {
    "text": "front and pipe it in and this is how you start to get that composability and if you think back to that example I had",
    "start": "3092599",
    "end": "3099599"
  },
  {
    "text": "back on the link slide right like over here um that's",
    "start": "3099599",
    "end": "3105880"
  },
  {
    "text": "exactly what I'm doing here here's the pipeline operator where I just sort of pack keep going down the line so where was I here",
    "start": "3105880",
    "end": "3115920"
  },
  {
    "text": "so now if I wanted to sort of do Square twice I can just do the pipeline",
    "start": "3115920",
    "end": "3121760"
  },
  {
    "text": "operator again and so this kind of composability if you know back to that concept of um we think about the shapes",
    "start": "3121760",
    "end": "3128200"
  },
  {
    "text": "of our functions we think about inputs and outputs um here's a great example of how that",
    "start": "3128200",
    "end": "3134280"
  },
  {
    "text": "works so wrapping up um I just dumped a bunch",
    "start": "3134280",
    "end": "3141559"
  },
  {
    "text": "of IDE I just dumped a bunch of bunch of thoughts on a few slides um why F first first of all f is effectively just as",
    "start": "3141559",
    "end": "3148079"
  },
  {
    "text": "fast as C it runs through the same jit compiler like the fact that you're kind of it feels like you're letting go of",
    "start": "3148079",
    "end": "3153680"
  },
  {
    "text": "that Hardware control a little bit and going in the functional world you don't lose performance doing that I mean you",
    "start": "3153680",
    "end": "3158839"
  },
  {
    "text": "can certainly find examples where C is a little bit faster than f for this thing",
    "start": "3158839",
    "end": "3164000"
  },
  {
    "text": "or F's a little bit faster for this other thing but basically you know the upper limit of F's performance is",
    "start": "3164000",
    "end": "3170240"
  },
  {
    "text": "exactly the same as the upper limit for C's performance um and I just like want to make the argument if you think about",
    "start": "3170240",
    "end": "3175920"
  },
  {
    "text": "all the things that shown you today um there's a lot of places that bugs can",
    "start": "3175920",
    "end": "3181440"
  },
  {
    "text": "hide or that we don't handle that they can't hide now if we use option if we",
    "start": "3181440",
    "end": "3186799"
  },
  {
    "text": "use result if we're chaining our if we're using composability correctly if we're using link in a way to express our",
    "start": "3186799",
    "end": "3192680"
  },
  {
    "text": "intentions that other programmers can understand it we take away a lot of the places that bugs can hide so you get the",
    "start": "3192680",
    "end": "3199040"
  },
  {
    "text": "simplified syntax that's a little bit more abstract but still runs just as fast you get more explicit return types",
    "start": "3199040",
    "end": "3205319"
  },
  {
    "text": "and this idea of shared State and of course in you know when you're talking about multi-threading we've all gone",
    "start": "3205319",
    "end": "3211599"
  },
  {
    "text": "down this road where multi-threading in shared state is horrible and doing this",
    "start": "3211599",
    "end": "3216760"
  },
  {
    "text": "functional approach helps you avoid that shared State and really like one thing I want to say is",
    "start": "3216760",
    "end": "3222520"
  },
  {
    "text": "like you know I tried fshp and it sucked said no one",
    "start": "3222520",
    "end": "3228079"
  },
  {
    "text": "ever you know like people love FP in a way that I I just haven't seen with other languages I'm I have gray hair",
    "start": "3228079",
    "end": "3235200"
  },
  {
    "text": "I've been around for a while like like I've just never seen a a community that like loved its language as much as I see",
    "start": "3235200",
    "end": "3241280"
  },
  {
    "text": "the F people love love its language um and I just find that it's a clearer way to express my intention so again back to",
    "start": "3241280",
    "end": "3248640"
  },
  {
    "text": "like I'm writing a source control system which you know you think about git which is written in C and and and",
    "start": "3248640",
    "end": "3255680"
  },
  {
    "text": "like I know I'm lucky enough at GitHub I used to be the PM for git systems at at",
    "start": "3255680",
    "end": "3260880"
  },
  {
    "text": "GitHub and so I I know some of the people at GitHub who literally work on on git itself not just the GitHub",
    "start": "3260880",
    "end": "3266960"
  },
  {
    "text": "implementation but git they're brilliant programmers they're some of the best programmers I've ever known in my life",
    "start": "3266960",
    "end": "3273559"
  },
  {
    "text": "um and you think with Git like you think you have to be down to the metal and thinking about bits and bites and",
    "start": "3273559",
    "end": "3280079"
  },
  {
    "text": "compression and I'm going the other way like you can express all these things in functional code and it's just as",
    "start": "3280079",
    "end": "3285559"
  },
  {
    "text": "effective and it's just as fast sort of that's another long story I'm I'm not giving the grace presentation right now",
    "start": "3285559",
    "end": "3291400"
  },
  {
    "text": "even though I want to um and again there's actively maintained transpilers for f so there's beautiful stuff you can",
    "start": "3291400",
    "end": "3297200"
  },
  {
    "text": "do with f and you know there's even F to Blazer right it's called Uh fabulous F",
    "start": "3297200",
    "end": "3303280"
  },
  {
    "text": "to avalonia there's Elish there's all kinds of ways to use f to transpile to other languages and and get that",
    "start": "3303280",
    "end": "3309040"
  },
  {
    "text": "strongly typed functional way to do things um but really YF SHP this is you know",
    "start": "3309040",
    "end": "3317760"
  },
  {
    "text": "I'm an opinion but like I just feel like the industry has hit the ceiling on quality and comprehensibility with large",
    "start": "3317760",
    "end": "3324760"
  },
  {
    "text": "code bases using object object oriented stuff this just been my experience um",
    "start": "3324760",
    "end": "3330240"
  },
  {
    "text": "for small code bases for medium code bases that's fine for really big code bases unless you have a very serious",
    "start": "3330240",
    "end": "3336839"
  },
  {
    "text": "effort doing devx right developer experience like an where you're like spending a",
    "start": "3336839",
    "end": "3343359"
  },
  {
    "text": "certain percent of your developer Cycles just cleaning up old code you're going to get into a big hole with big systems",
    "start": "3343359",
    "end": "3350000"
  },
  {
    "text": "and objectoriented code and writing f for instance writing functional code I",
    "start": "3350000",
    "end": "3355760"
  },
  {
    "text": "just find makes your code have higher quality and last longer and I and like I hope you know",
    "start": "3355760",
    "end": "3363400"
  },
  {
    "text": "like we all feel this trickle of interest in functional constructs whether it's Scola or FP or hll um like",
    "start": "3363400",
    "end": "3371680"
  },
  {
    "text": "there's a reason you really do write better code and it lasts longer um and and it's more beautiful like I I'm into",
    "start": "3371680",
    "end": "3379599"
  },
  {
    "text": "Aesthetics you know part of the title of this talk was you know the Don at runtime anesthetics",
    "start": "3379599",
    "end": "3385240"
  },
  {
    "text": "um beautiful things are beautiful like it matters you know it feels better",
    "start": "3385240",
    "end": "3390720"
  },
  {
    "text": "every day to look at something beautiful instead of looking at you know a bunch of headers in",
    "start": "3390720",
    "end": "3397440"
  },
  {
    "text": "C um so how to be more awesome right um I",
    "start": "3397440",
    "end": "3404440"
  },
  {
    "text": "talked about how F compiles to static classes with static methods um use that",
    "start": "3404440",
    "end": "3409680"
  },
  {
    "text": "like use static functions like don't hang your behavior off your class try to take it out of your class write a static",
    "start": "3409680",
    "end": "3416880"
  },
  {
    "text": "like it's like it's like you do extension methods in C right a static class with a static method take your behavior out of your class put it in a",
    "start": "3416880",
    "end": "3423200"
  },
  {
    "text": "separate class it's static and take the object pass it out you'll get that composability and you'll get much better",
    "start": "3423200",
    "end": "3429839"
  },
  {
    "text": "data manipulation Lambda is by the way your static functions think about the shapes of your functions be generous",
    "start": "3429839",
    "end": "3435799"
  },
  {
    "text": "with your return types right like don't just return the smallest possible thing it's okay I know it's going to feel like",
    "start": "3435799",
    "end": "3442440"
  },
  {
    "text": "it's not as fast or takes more memory it's going to feel weird but it's okay it's okay I promise okay um you know use",
    "start": "3442440",
    "end": "3450119"
  },
  {
    "text": "Link use the strategy pattern use type aliases like use them starting today minimize returning void like don't get",
    "start": "3450119",
    "end": "3457839"
  },
  {
    "text": "lazy in return void and don't think it through like and I'm guilty I'm as guilty of this as anyone um write total",
    "start": "3457839",
    "end": "3465200"
  },
  {
    "text": "functions right convert your partial functions to Total functions with results or options exception functions",
    "start": "3465200",
    "end": "3471200"
  },
  {
    "text": "that return exceptions are partial functions that return nullable types are partial right these are all concrete",
    "start": "3471200",
    "end": "3477559"
  },
  {
    "text": "things that we just talked about set warnings as errors like you can start doing all these things in your C code",
    "start": "3477559",
    "end": "3482920"
  },
  {
    "text": "today and eliminate places that bugs hide but ultimately the how to be more",
    "start": "3482920",
    "end": "3489960"
  },
  {
    "text": "awesome of course is just use FP um one last thing um in my description of the",
    "start": "3489960",
    "end": "3497359"
  },
  {
    "text": "talk I said I wasn't going to talk about category Theory or monads and then I said well it's you know we're all",
    "start": "3497359",
    "end": "3503680"
  },
  {
    "text": "philosophers here right um so remember when I was we were just talking about",
    "start": "3503680",
    "end": "3508760"
  },
  {
    "text": "this slide um one since I'm writing a source control system I just have to say",
    "start": "3508760",
    "end": "3513960"
  },
  {
    "text": "there's a a joke I always kind of come up come up with um as I'm talking to",
    "start": "3513960",
    "end": "3519039"
  },
  {
    "text": "people and I always ask them would you rather teach someone how to use get or how to or what a monad",
    "start": "3519039",
    "end": "3526480"
  },
  {
    "text": "is and it makes people think right um I would rather teach people what a monat",
    "start": "3526480",
    "end": "3532079"
  },
  {
    "text": "is I think that's way easier teaching people how to use like I know I work for GitHub but you know",
    "start": "3532079",
    "end": "3538440"
  },
  {
    "text": "I'm trying to write something new um teaching git is like a hazing ritual that we all go through in this industry",
    "start": "3538440",
    "end": "3545000"
  },
  {
    "text": "right learning git is not not easy um learning monads is actually not that",
    "start": "3545000",
    "end": "3553440"
  },
  {
    "text": "oops is not that hard um this is a",
    "start": "3553440",
    "end": "3560640"
  },
  {
    "text": "monad so congratulations I just taught you what a monad is now it's not necessarily the most interesting",
    "start": "3560640",
    "end": "3566559"
  },
  {
    "text": "shape in category Theory category theory has lots of shapes that are more complex or less complex or whatever but it turns",
    "start": "3566559",
    "end": "3572319"
  },
  {
    "text": "out that this particular shape in functional code is really useful so we all freak out about monads because like",
    "start": "3572319",
    "end": "3577480"
  },
  {
    "text": "we don't understand how to fit it into our object-oriented you know inheritence",
    "start": "3577480",
    "end": "3582520"
  },
  {
    "text": "shapes or whatever but that's all it is it's just a it's just a shape it's just",
    "start": "3582520",
    "end": "3588319"
  },
  {
    "text": "a shape that's really useful so congratulations if you're watching that is a",
    "start": "3588319",
    "end": "3594760"
  },
  {
    "text": "monad and that is me writing really bad things that I will erase now because",
    "start": "3594760",
    "end": "3599799"
  },
  {
    "text": "that was horrible um thank you so much for coming thank you so much for watching this video I really appreciate",
    "start": "3599799",
    "end": "3605520"
  },
  {
    "text": "it that is my",
    "start": "3605520",
    "end": "3609079"
  },
  {
    "text": "talk",
    "start": "3620839",
    "end": "3623839"
  }
]