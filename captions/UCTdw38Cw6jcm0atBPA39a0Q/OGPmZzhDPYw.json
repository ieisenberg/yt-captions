[
  {
    "text": "hello and welcome to how to start a program my name is Anish I work at a",
    "start": "7319",
    "end": "13620"
  },
  {
    "text": "company called zivid we have a stand out in the food areas we want to drop by and say hi later I'll probably be hanging",
    "start": "13620",
    "end": "20160"
  },
  {
    "text": "around that one I also run this C plus quiz site called",
    "start": "20160",
    "end": "25880"
  },
  {
    "text": "cppquiz.org so if you're into that kind of stuff there will be a simple plus quiz a pub quiz at the party tonight so",
    "start": "25880",
    "end": "33660"
  },
  {
    "text": "please join and if you're not into that kind of stuff then please come to the party anyway and just skip the quiz",
    "start": "33660",
    "end": "41760"
  },
  {
    "text": "before I start to talk um if there's anything unclear on the slides please let me know so I can",
    "start": "41760",
    "end": "47280"
  },
  {
    "text": "explain it like during the talk if you have questions more of the kind I would like to know more about this kind of",
    "start": "47280",
    "end": "53100"
  },
  {
    "text": "stuff then please hold those to the end so that we can get through everything and also a disclaimer this is only about",
    "start": "53100",
    "end": "60840"
  },
  {
    "text": "Linux everything here is Linux only so if you're interested in like Windows only or whatever then there's still time",
    "start": "60840",
    "end": "66420"
  },
  {
    "text": "to escape and go see Nico or Robert or something uh yes how to start a program so when I",
    "start": "66420",
    "end": "73860"
  },
  {
    "text": "code I tend to think a lot about the programming language I think about my code and the first thing my code meets",
    "start": "73860",
    "end": "80340"
  },
  {
    "text": "is the compiler so I tend to think quite a lot about the compiler I get like wrong Behavior or compiler errors or",
    "start": "80340",
    "end": "87000"
  },
  {
    "text": "Warnings and I Google that stuff and there's a lot of information because people think a lot about the compiler",
    "start": "87000",
    "end": "93299"
  },
  {
    "text": "and finally my code compiles and the next thing my code meets is the Linker",
    "start": "93299",
    "end": "99000"
  },
  {
    "text": "and I tend to think a whole lot less about the Linker if you think about the Linker often I feel sorry for you really",
    "start": "99000",
    "end": "105900"
  },
  {
    "text": "is there something is not the way it should be and it's often also harder to find",
    "start": "105900",
    "end": "111240"
  },
  {
    "text": "information and people don't talk about the Linker so much but then when the program has compiled it's linked",
    "start": "111240",
    "end": "117299"
  },
  {
    "text": "I tend to think even less about what actually happens when I run the program so I just run it in the terminal Right",
    "start": "117299",
    "end": "123899"
  },
  {
    "text": "double click the icon or whatever and it just starts um but I recently had to find out more",
    "start": "123899",
    "end": "130860"
  },
  {
    "text": "about it and it's pretty fascinating stuff uh and yeah that's what the talk is about",
    "start": "130860",
    "end": "137459"
  },
  {
    "text": "so what kind of things need to happen for a program to start",
    "start": "137459",
    "end": "143300"
  },
  {
    "text": "this is engaging the audience like what's suggestions what do you have to do to start the program",
    "start": "143700",
    "end": "150440"
  },
  {
    "text": "yeah you have to hold your program so I have some points here maybe you",
    "start": "153599",
    "end": "159480"
  },
  {
    "text": "have to start the process maybe maybe not uh you definitely have to load the",
    "start": "159480",
    "end": "165180"
  },
  {
    "text": "program into memory so the code and like maybe there's some data you need to load in",
    "start": "165180",
    "end": "170400"
  },
  {
    "text": "maybe you have to initialize some data so what kind of data would you have to initialize when the program starts",
    "start": "170400",
    "end": "178500"
  },
  {
    "text": "yeah so your your static your globals your variables with static storage duration you have to initialize as part",
    "start": "178500",
    "end": "185220"
  },
  {
    "text": "of a program startup because they live for the entirety of the program so we have globals uh not your stack and",
    "start": "185220",
    "end": "192360"
  },
  {
    "text": "Heap variables of course because you call a function the stack grows and there's your variable you call new and",
    "start": "192360",
    "end": "197760"
  },
  {
    "text": "you get some stuff from the Heap or whatever but your globals have to be initialized somehow",
    "start": "197760",
    "end": "203720"
  },
  {
    "text": "and a lot of us we have to actually find and load some shared objects somewhere",
    "start": "203760",
    "end": "209400"
  },
  {
    "text": "so Dynamic libraries shared objects whatever you want to call them dsos",
    "start": "209400",
    "end": "214519"
  },
  {
    "text": "and then we need to get to Main somehow right so when the program starts we start to We tend to think of like it",
    "start": "214560",
    "end": "219959"
  },
  {
    "text": "starts at Main but how how do you go get to to Main in the first place",
    "start": "219959",
    "end": "226099"
  },
  {
    "text": "and related to all of this is what happens really when the program exits so that's kind of related to the startup",
    "start": "226319",
    "end": "233340"
  },
  {
    "text": "thing so I'll touch briefly on that as well",
    "start": "233340",
    "end": "238400"
  },
  {
    "text": "before we talk about how to start a program it's useful to think about what a program even is",
    "start": "239040",
    "end": "244980"
  },
  {
    "text": "and a program is just a bunch of ones and zeros that's what we tend to say but",
    "start": "244980",
    "end": "250799"
  },
  {
    "text": "but that's of course has some meaning so these ones and zeros there are just a long list of instructions for the CPU",
    "start": "250799",
    "end": "257160"
  },
  {
    "text": "and these instructions are very basic things it's like put these bytes into this register put that registered onto",
    "start": "257160",
    "end": "263639"
  },
  {
    "text": "the stack add these two values it's very simple stuff really",
    "start": "263639",
    "end": "269040"
  },
  {
    "text": "um so no matter if you do like fancy template meta programming or core routines or what have you it's just",
    "start": "269040",
    "end": "274740"
  },
  {
    "text": "simple instructions going one after the other on the CPU at least conceptually",
    "start": "274740",
    "end": "281479"
  },
  {
    "text": "quick thing here we go yeah so here's a short program I will be",
    "start": "283680",
    "end": "291660"
  },
  {
    "text": "using uh in this talk to demonstrate all the things that we'll look at so it's a simple program to compute the answer to",
    "start": "291660",
    "end": "298560"
  },
  {
    "text": "life the universe and everything so we just start with we have some initial estimate of 40 and we figure out",
    "start": "298560",
    "end": "305400"
  },
  {
    "text": "well that's not entirely correct so we we need to add 2 to that estimate and then we have our answer and return that",
    "start": "305400",
    "end": "311699"
  },
  {
    "text": "answer from Main so that's going to be the exit code from this program",
    "start": "311699",
    "end": "317660"
  },
  {
    "text": "and then we just compile and Link that into a program called compute and then we want to look at this compute program",
    "start": "318300",
    "end": "325139"
  },
  {
    "text": "so what does it look like on the inside and on the inside of compute is this long list of machine code instructions",
    "start": "325139",
    "end": "331560"
  },
  {
    "text": "that are going to be run on the CPU and the most useful way to look at those is",
    "start": "331560",
    "end": "336660"
  },
  {
    "text": "to look at the assembly because every CPU instruction has a corresponding assembly instruction so that's kind of",
    "start": "336660",
    "end": "342360"
  },
  {
    "text": "the language we have to look at this stuff so there's going to be some assembly in this talk you don't need to have to know",
    "start": "342360",
    "end": "349199"
  },
  {
    "text": "any assembly from before the details are not really important and I'm gonna explain everything if it is important",
    "start": "349199",
    "end": "355880"
  },
  {
    "text": "if you're interested in getting into this kind of assembly codes then I have a talk from a couple of years ago at",
    "start": "355880",
    "end": "363000"
  },
  {
    "text": "this conference called just enough assembly for compiler Explorer which I'll have a link to at the end",
    "start": "363000",
    "end": "369720"
  },
  {
    "text": "so we want to look at the assembly and then there's a tool called object dump which will allow us to look at what's",
    "start": "369720",
    "end": "376139"
  },
  {
    "text": "inside of our binary we give it D to disassemble and dash Capital C to D",
    "start": "376139",
    "end": "381960"
  },
  {
    "text": "mango and is equal plus names so we get a nice simple first names and not this weird mangled names",
    "start": "381960",
    "end": "388560"
  },
  {
    "text": "I'm going to do Dash M Intel to use the Intel assembly syntax which is I think most commonly used these days it's the",
    "start": "388560",
    "end": "395400"
  },
  {
    "text": "default on compiler Explorer and what I find most readable",
    "start": "395400",
    "end": "400520"
  },
  {
    "text": "and then up jump is going to show us uh the content and the the output is long",
    "start": "400740",
    "end": "406020"
  },
  {
    "text": "but here is some of it here's a disassembly of tech section dot text and",
    "start": "406020",
    "end": "411060"
  },
  {
    "text": "Dot text is where all your code goes there are a bunch of sections in here but the dot text section is where the",
    "start": "411060",
    "end": "416819"
  },
  {
    "text": "code went and I've reducted some stuff here and then you have the addresses to the left and",
    "start": "416819",
    "end": "423360"
  },
  {
    "text": "then the assembly instructions so at address 1129 we have the main function",
    "start": "423360",
    "end": "428639"
  },
  {
    "text": "so there's 1128 other bytes of stuff before but here's where our main ended up",
    "start": "428639",
    "end": "434460"
  },
  {
    "text": "a main is just a long list of instructions so I'm not going to go into what they do but like at 11 29 there's this NBA 64",
    "start": "434460",
    "end": "442319"
  },
  {
    "text": "and there's some stack management stuff going on and then finally we get to this line which actually comes from our",
    "start": "442319",
    "end": "449099"
  },
  {
    "text": "program so this has this value 0x28 that's our value 40 in HEX and it just",
    "start": "449099",
    "end": "455400"
  },
  {
    "text": "says we'll put that into memory somewhere and then we put that memory into some register and then we add to to",
    "start": "455400",
    "end": "462479"
  },
  {
    "text": "that register so the point is these are very simple things so the the CPU has an instruction",
    "start": "462479",
    "end": "468780"
  },
  {
    "text": "pointer which was then initially pointing over here and then it just bumps the instruction",
    "start": "468780",
    "end": "473880"
  },
  {
    "text": "pointer to the next one execute the instruction bump execute bump execute bump all the way through the program and",
    "start": "473880",
    "end": "480060"
  },
  {
    "text": "that's really all the CPU can do",
    "start": "480060",
    "end": "484520"
  },
  {
    "text": "so it just goes like this through the entire function the full output of object jump actually",
    "start": "485400",
    "end": "491580"
  },
  {
    "text": "also includes the actual bytes so these are the actual bytes that are in your",
    "start": "491580",
    "end": "496860"
  },
  {
    "text": "binary on the disk if you were to hex dump it these are the parts you would see and these are the actual bytes that",
    "start": "496860",
    "end": "502500"
  },
  {
    "text": "will be loaded into memory all right so you can actually see uh See the bytes of your program",
    "start": "502500",
    "end": "509840"
  },
  {
    "text": "yes so instructions are simple and I just get executed one after the other",
    "start": "512459",
    "end": "517560"
  },
  {
    "text": "um but I've done um a little refactoring here so I extracted the function to",
    "start": "517560",
    "end": "523320"
  },
  {
    "text": "compute this estimate answer or to compute the initial estimate so it's just called estimate answer it returns",
    "start": "523320",
    "end": "529680"
  },
  {
    "text": "40. um and we have to get here somewhere and",
    "start": "529680",
    "end": "534839"
  },
  {
    "text": "there's a group of instructions that I was going to say are a bit special but they're not really special they just",
    "start": "534839",
    "end": "540360"
  },
  {
    "text": "also modify some data somewhere so they can just change a register it's just a",
    "start": "540360",
    "end": "545459"
  },
  {
    "text": "set of instructions that happen to be able to change the instruction pointer itself so the instruction pointer is",
    "start": "545459",
    "end": "550680"
  },
  {
    "text": "just going like this and then there's an interruption saying actually write these other bytes into the instruction pointer",
    "start": "550680",
    "end": "556200"
  },
  {
    "text": "and suddenly it's pointing over here instead and that's useful if you want to jump somewhere you want to do some",
    "start": "556200",
    "end": "561660"
  },
  {
    "text": "conditional stuff you want to call the function uh whatever like that so we compile link and object dump this",
    "start": "561660",
    "end": "569640"
  },
  {
    "text": "again we'll look at the text section and now we have two functions in the",
    "start": "569640",
    "end": "575160"
  },
  {
    "text": "text section so we have this new estimate answer function and we have the main function itself",
    "start": "575160",
    "end": "581700"
  },
  {
    "text": "and all we can do is still like this execute next execute next thing so how",
    "start": "581700",
    "end": "587220"
  },
  {
    "text": "do you get from Main to estimate answer well here's something that looks",
    "start": "587220",
    "end": "594000"
  },
  {
    "text": "relevant there's a call estimate answer but that's just the object dump output what's actually happening in the binary",
    "start": "594000",
    "end": "600480"
  },
  {
    "text": "here is these bytes here so E8 is the call of code and then e0 ffff that's",
    "start": "600480",
    "end": "608100"
  },
  {
    "text": "minus 1B so the only thing the CPU gets told because the CPU doesn't know what",
    "start": "608100",
    "end": "614040"
  },
  {
    "text": "function names or anything the CPU just gets told please take minus 1B",
    "start": "614040",
    "end": "620399"
  },
  {
    "text": "and their coal mines won't be that's basically it's just going please subtract 1B from the instruction pointer",
    "start": "620399",
    "end": "625800"
  },
  {
    "text": "and the instruction pointer is pointing here at the next instruction and then we just subtract 1B",
    "start": "625800",
    "end": "631740"
  },
  {
    "text": "and suddenly we are at the first instruction of estimate answer um",
    "start": "631740",
    "end": "637980"
  },
  {
    "text": "so then we're here and then we just keep like execute next execute next all the way through that function",
    "start": "637980",
    "end": "643680"
  },
  {
    "text": "um that's really all that happens uh on the CPU kind of",
    "start": "643680",
    "end": "650420"
  },
  {
    "text": "but I did one more refactoring I figured well these adjustments can't just have",
    "start": "655500",
    "end": "660959"
  },
  {
    "text": "it as a local variable let's extract that Global because we love globals right so we have this Global yeah This",
    "start": "660959",
    "end": "667380"
  },
  {
    "text": "Global adjustments value into two so first we call the estimate answer function to get the estimate and then we",
    "start": "667380",
    "end": "672480"
  },
  {
    "text": "can get this adjustment from this global uh and neither of these are good refactorings uh of course but it's just",
    "start": "672480",
    "end": "678420"
  },
  {
    "text": "to demonstrate some stuff so if we compile link and dump it again",
    "start": "678420",
    "end": "685320"
  },
  {
    "text": "here's the disassembly of Main we still have the call to estimate answer just like before",
    "start": "685320",
    "end": "691740"
  },
  {
    "text": "then we have to get at this uh adjustment somewhere so that's how we do that what this does",
    "start": "691740",
    "end": "698459"
  },
  {
    "text": "here it's very similar so it's using this offset so for the call it was just saying like minus 1B from here is where",
    "start": "698459",
    "end": "705480"
  },
  {
    "text": "the function is it's doing exactly the same here so rip is the instruction pointer and",
    "start": "705480",
    "end": "711120"
  },
  {
    "text": "then we say well to Ebe hex from here is where I'm going to find this adjustment",
    "start": "711120",
    "end": "717060"
  },
  {
    "text": "and then Ops jump is just nice enough to sell it well that's going to compute to",
    "start": "717060",
    "end": "722240"
  },
  {
    "text": "4010 and it also says well I can look at a symbol table and I happen to know about that 4010 is where you find the",
    "start": "722240",
    "end": "729000"
  },
  {
    "text": "adjustment variable so down here in the data section which",
    "start": "729000",
    "end": "734760"
  },
  {
    "text": "is a new section so the text section is where all the code goes and then there's a data section where some of our globals",
    "start": "734760",
    "end": "740160"
  },
  {
    "text": "go down here we find our value 2. and objump is again trying to be helpful",
    "start": "740160",
    "end": "746040"
  },
  {
    "text": "because it's a very helpful program it tries to disassemble that data and that of course makes no sense it's just it's",
    "start": "746040",
    "end": "751560"
  },
  {
    "text": "a value too it just happens to disassemble to this stuff so just ignore that part when you're looking at data in",
    "start": "751560",
    "end": "758040"
  },
  {
    "text": "over jump um",
    "start": "758040",
    "end": "763040"
  },
  {
    "text": "yeah so uh in the data section that's only for your Global for anything that's",
    "start": "763980",
    "end": "769320"
  },
  {
    "text": "like visible to the entire program so you don't have your stack or Heap variables or anything in here it's just for the globals",
    "start": "769320",
    "end": "777360"
  },
  {
    "text": "and this is basically all the CPU you can do now you know how to call functions and how to get at this global",
    "start": "777360",
    "end": "783000"
  },
  {
    "text": "data but how do you get to Main in the first place like so far we've just been seeing",
    "start": "783000",
    "end": "789839"
  },
  {
    "text": "like how can Maine get to other functions and do other stuff but how do you get to Main in the first place",
    "start": "789839",
    "end": "797060"
  },
  {
    "text": "on Linux we are using the executable and linkable formats elf and there's a nice",
    "start": "798060",
    "end": "804060"
  },
  {
    "text": "tool called the read elf that will let you inspect object files or shared",
    "start": "804060",
    "end": "809760"
  },
  {
    "text": "objects binary executables uh whatever because the program isn't only called on",
    "start": "809760",
    "end": "816120"
  },
  {
    "text": "data there's a lot of metadata that it's telling kernels and loaders and that",
    "start": "816120",
    "end": "822300"
  },
  {
    "text": "various programs so metadata that's that they need to do in order to to run the program",
    "start": "822300",
    "end": "829260"
  },
  {
    "text": "so uh yeah I give it w for white outputs uh which is always nice and then H to",
    "start": "829260",
    "end": "835560"
  },
  {
    "text": "look at the elf headers so the elf headers are kind of like the main headers of this program telling you the most important stuff",
    "start": "835560",
    "end": "842040"
  },
  {
    "text": "so it has like a magic number and a bunch of architecture stuff and API and whatnot what we're interested in is this",
    "start": "842040",
    "end": "849120"
  },
  {
    "text": "the entry point address and the Linker is the one that wrote all of this stuff and the Linker does not know where the",
    "start": "849120",
    "end": "856200"
  },
  {
    "text": "kernel is going to load your program like it can be loaded anywhere in memory so we can't say here's the entry point",
    "start": "856200",
    "end": "861720"
  },
  {
    "text": "it's this address what you can say is hey Colonel load this wherever you like and then the start of the program is",
    "start": "861720",
    "end": "868860"
  },
  {
    "text": "then 1040 bytes into that memory that you loaded into into memory",
    "start": "868860",
    "end": "876060"
  },
  {
    "text": "so this is enterpoint address 1040 hex so kernel please load stuff and",
    "start": "876060",
    "end": "882420"
  },
  {
    "text": "point the instruction pointer over here and then off you go and then you run the program so it's 1040 where main is then",
    "start": "882420",
    "end": "892519"
  },
  {
    "text": "let's open up our compute program again and look at the outputs and at 1040 is",
    "start": "892620",
    "end": "898079"
  },
  {
    "text": "not where main is at 1040 we find a function called underscore start",
    "start": "898079",
    "end": "904199"
  },
  {
    "text": "and we didn't write this this didn't come from our code this comes from webc and the Linker just added this to our",
    "start": "904199",
    "end": "910800"
  },
  {
    "text": "program and it's doing a bunch of stuff that I'm just gonna skip a lot of like stack",
    "start": "910800",
    "end": "916320"
  },
  {
    "text": "setups like taking stuff from the stack and putting it into various places and yeah let's just skip that for now",
    "start": "916320",
    "end": "922980"
  },
  {
    "text": "um here it starts talking about Main but it doesn't say call Main it says Lea",
    "start": "922980",
    "end": "929399"
  },
  {
    "text": "and Lea is load effective address so what it's doing it's Computing the address of Main and it's doing this in",
    "start": "929399",
    "end": "936240"
  },
  {
    "text": "the SEC the exact same way that we call functions and access data and whatever is just saying well instruction pointer",
    "start": "936240",
    "end": "941820"
  },
  {
    "text": "is currently pointing over here d0 from here is where you will find main",
    "start": "941820",
    "end": "946860"
  },
  {
    "text": "so we're just again doing this relative access address and it's basically taking a function pointer to Main",
    "start": "946860",
    "end": "953880"
  },
  {
    "text": "and sticking it in a register and this register here is going to be the first function argument for some",
    "start": "953880",
    "end": "961139"
  },
  {
    "text": "function and the next function is that function so this is libc start main",
    "start": "961139",
    "end": "966959"
  },
  {
    "text": "so this is a function from webc which is responsible for starting your program",
    "start": "966959",
    "end": "973019"
  },
  {
    "text": "and this then takes the address of main3 gets a function pointer to main so that eventually it can call Main so the start",
    "start": "973019",
    "end": "980279"
  },
  {
    "text": "is the the start it does some stuff then it transfer control to libc start main which can then do a lot more stuff and",
    "start": "980279",
    "end": "986639"
  },
  {
    "text": "at some point you will actually get to Main because there's a lot of stuff going on here in stock a lot lot more stuff going",
    "start": "986639",
    "end": "994199"
  },
  {
    "text": "on in libsy's dark Main so let's see if we can make a minimal example",
    "start": "994199",
    "end": "1000399"
  },
  {
    "text": "yeah so this is just to kind of show that there's no magic kind of it's it's all very simple so this is the minimal",
    "start": "1001880",
    "end": "1008480"
  },
  {
    "text": "program I could think of to return the value 42. it's pure assembly it's three",
    "start": "1008480",
    "end": "1013519"
  },
  {
    "text": "instructions no C no C plus no standard Library not even a main function",
    "start": "1013519",
    "end": "1019759"
  },
  {
    "text": "it's very very tiny program we just say the start symbol is going to",
    "start": "1019759",
    "end": "1025579"
  },
  {
    "text": "be an exported symbol from this object file so you can find it again on the outside then it just says well now I'm going to",
    "start": "1025579",
    "end": "1032839"
  },
  {
    "text": "Output some stuff that needs to go in the text section which where which is where all the code goes",
    "start": "1032839",
    "end": "1038000"
  },
  {
    "text": "and then just a label saying here's the start start of the underscore start symbol",
    "start": "1038000",
    "end": "1044058"
  },
  {
    "text": "and then we're gonna want to return 42. the way we're going to do that is to use",
    "start": "1044059",
    "end": "1049760"
  },
  {
    "text": "assist call so the Cisco is going to tell the kernel to exit with 42.",
    "start": "1049760",
    "end": "1056360"
  },
  {
    "text": "and the the exits is called which we're going to use is Cisco number 60 so we",
    "start": "1056360",
    "end": "1061940"
  },
  {
    "text": "put 60 in Rax and then the return value we want to return is 42 which is the answer to like",
    "start": "1061940",
    "end": "1069200"
  },
  {
    "text": "the universe and everything we put that in RDI and then we just go Cisco",
    "start": "1069200",
    "end": "1074780"
  },
  {
    "text": "and Cisco then transfers control to the kernel so now it's not like our program anymore now it's in the kernel and the",
    "start": "1074780",
    "end": "1080960"
  },
  {
    "text": "kernel can do its job and we don't have to think about what's going on in there my current list I'm gonna say well",
    "start": "1080960",
    "end": "1087260"
  },
  {
    "text": "someone called The Cisco let's look in Rax okay so it's 60 okay that's the exit time there so I'll run the exit Handler",
    "start": "1087260",
    "end": "1093260"
  },
  {
    "text": "and the exit Handler is going to well uh they're probably gonna exit with some value what's in RDI 42 okay and on the",
    "start": "1093260",
    "end": "1100340"
  },
  {
    "text": "current we can just exit the the program so this is then on an entire program so",
    "start": "1100340",
    "end": "1107960"
  },
  {
    "text": "let's see if we compile uh um this is just invoking the assembler",
    "start": "1107960",
    "end": "1113179"
  },
  {
    "text": "uh and linking it into a an executable called Asim start and then we object jump this atom start",
    "start": "1113179",
    "end": "1121580"
  },
  {
    "text": "now this is now the entire text section of that program so there is no main no underscore stock no libc start main oh",
    "start": "1121580",
    "end": "1128960"
  },
  {
    "text": "yeah this there is an underscore socket is ours right we can see it's only doing these three instructions",
    "start": "1128960",
    "end": "1134660"
  },
  {
    "text": "so the program now consists of these three instructions only and we're able to return 42 from the program",
    "start": "1134660",
    "end": "1142340"
  },
  {
    "text": "and then all of this underscore start lips is dark main main C and C plus it's",
    "start": "1142340",
    "end": "1147559"
  },
  {
    "text": "just like adding stuff onto this but this is all that happens so when you do readouts on this one it says entry point",
    "start": "1147559",
    "end": "1154460"
  },
  {
    "text": "uh four hundred and one thousand so then they're currently is going to",
    "start": "1154460",
    "end": "1160039"
  },
  {
    "text": "load this set the instruction pointer to here going to do this this this and then we",
    "start": "1160039",
    "end": "1166220"
  },
  {
    "text": "exit and that's all that happens and the rest is just like added onto that to provide niceness for us as programmers",
    "start": "1166220",
    "end": "1174200"
  },
  {
    "text": "and if you run that and then Echo the exit code we get 42.",
    "start": "1174200",
    "end": "1180940"
  },
  {
    "text": "and even the underscore start symbol is not magic it's just a symbol so we could have called it let's go instead so if",
    "start": "1182360",
    "end": "1189320"
  },
  {
    "text": "you compare it's just changing the name of the symbol and you have to tell the Linker",
    "start": "1189320",
    "end": "1195020"
  },
  {
    "text": "that my start symbol is now underscore let's go so there's a convention to just",
    "start": "1195020",
    "end": "1200120"
  },
  {
    "text": "use the underscore start but you can use any symbol that you like so that's the most magical thing really that goes on",
    "start": "1200120",
    "end": "1205700"
  },
  {
    "text": "otherwise it's just entry points and assembly instructions",
    "start": "1205700",
    "end": "1210940"
  },
  {
    "text": "so this is a complete program that we just saw and we will talk shortly about what happens when you add C and C plus",
    "start": "1212900",
    "end": "1219500"
  },
  {
    "text": "BBC and stuff into the mix um and then you get the underscore start",
    "start": "1219500",
    "end": "1224960"
  },
  {
    "text": "which eventually calls Main but how do you call underscore start",
    "start": "1224960",
    "end": "1230720"
  },
  {
    "text": "okay so we're kind of nesting down here how do you get here there's some stuff that goes on uh even before you go get",
    "start": "1230720",
    "end": "1236419"
  },
  {
    "text": "200 core start so now we're gonna we're like so far only been talking",
    "start": "1236419",
    "end": "1242720"
  },
  {
    "text": "about this program which computes this answer to the life of the Universe and everything so various iterations of our",
    "start": "1242720",
    "end": "1248059"
  },
  {
    "text": "program to just return the value 42. so I'm going to put that to the side and we're going to look at another program",
    "start": "1248059",
    "end": "1253340"
  },
  {
    "text": "which is going to to invoke this one so we have this compute program which returns 42. now another program is going",
    "start": "1253340",
    "end": "1261140"
  },
  {
    "text": "to want to start that program somehow and this is a really short program that",
    "start": "1261140",
    "end": "1268940"
  },
  {
    "text": "starts another program so it's just saying launching compute",
    "start": "1268940",
    "end": "1274039"
  },
  {
    "text": "which is the name of the computation program then we use the exact ve Cisco the XXV e",
    "start": "1274039",
    "end": "1281539"
  },
  {
    "text": "Cisco is just a function in the kernel kind of to launch another program",
    "start": "1281539",
    "end": "1287539"
  },
  {
    "text": "and if you've done this kind of stuff before you might have used the some wrapper so like XXV or xxp or whatever",
    "start": "1287539",
    "end": "1293780"
  },
  {
    "text": "they're called but like they're all well down to the Cisco and it takes two arrays of charge Stars",
    "start": "1293780",
    "end": "1299659"
  },
  {
    "text": "One for uh command line arguments and one for environment variables and we",
    "start": "1299659",
    "end": "1305059"
  },
  {
    "text": "don't have any of those so we just set both to an empty array",
    "start": "1305059",
    "end": "1310340"
  },
  {
    "text": "so then exit V is going to run that program and then eventually we're gonna print compute exited with and then",
    "start": "1310340",
    "end": "1316159"
  },
  {
    "text": "return value from xfpe and we compile link and run this and",
    "start": "1316159",
    "end": "1321440"
  },
  {
    "text": "print the exit code and what's this going to print",
    "start": "1321440",
    "end": "1325960"
  },
  {
    "text": "it prints launching computes and then it echoes the the exit code because of this",
    "start": "1328520",
    "end": "1333620"
  },
  {
    "text": "Echo exit code thing here so so it prints launch in compute and it never prints compute access to the bid and",
    "start": "1333620",
    "end": "1339919"
  },
  {
    "text": "then the return code and that's because xxve actually replaces the current program so we have",
    "start": "1339919",
    "end": "1346940"
  },
  {
    "text": "a process it's currently running this program so yeah I just call this program exec so it",
    "start": "1346940",
    "end": "1352640"
  },
  {
    "text": "runs this exact program and then when you do the exact ve thing the current is actually going to take that entire exit",
    "start": "1352640",
    "end": "1358520"
  },
  {
    "text": "program and just check it out of the process and replace it entirely with this compute program",
    "start": "1358520",
    "end": "1365240"
  },
  {
    "text": "so XXV in fact never returns out here the only time exactly e returns is if it",
    "start": "1365240",
    "end": "1370940"
  },
  {
    "text": "failed to launch this then it sets results to -1 and then you can check or no if you remember to do that",
    "start": "1370940",
    "end": "1379720"
  },
  {
    "text": "so usually we don't want to replace the process like you're in your shell you type LS and then like when LS finishes",
    "start": "1380480",
    "end": "1387740"
  },
  {
    "text": "your shell is gone so you want to preserve the currently running program and then you have to do a fork so Fork",
    "start": "1387740",
    "end": "1395780"
  },
  {
    "text": "will duplicate the process so you call Fork here then you get two copies of",
    "start": "1395780",
    "end": "1401059"
  },
  {
    "text": "this program so if you're in your shell now you have to uh two copies of this",
    "start": "1401059",
    "end": "1407980"
  },
  {
    "text": "in this exact program so we'll be running this program and then after four we now have two processes running the",
    "start": "1408940",
    "end": "1415400"
  },
  {
    "text": "same program and then you have to figure out which one are you in so the return value is zero if you're in the trial",
    "start": "1415400",
    "end": "1422240"
  },
  {
    "text": "process if you're in the parent process you will get the process ID of the child but the",
    "start": "1422240",
    "end": "1428419"
  },
  {
    "text": "return value is zero so we're in the trial process and then we can find safely do the exact ve thing because we're in the trial",
    "start": "1428419",
    "end": "1435380"
  },
  {
    "text": "process we're actually supposed to be the compute program now so now we can just replace ourselves with compute",
    "start": "1435380",
    "end": "1443720"
  },
  {
    "text": "uh and if not then p is the process ID of the child and we can continue in our",
    "start": "1443720",
    "end": "1449480"
  },
  {
    "text": "old program that we wanted to keep running",
    "start": "1449480",
    "end": "1453640"
  },
  {
    "text": "so a full example would be something like this it's full uh except I skipped all the includes and",
    "start": "1458360",
    "end": "1465620"
  },
  {
    "text": "I skipped like all kinds of error handling just to be able to fit stuff on the slide uh first we do Fork",
    "start": "1465620",
    "end": "1472880"
  },
  {
    "text": "if we're the trial process we're gonna sleep for a second just because both processes are gonna print",
    "start": "1472880",
    "end": "1479360"
  },
  {
    "text": "to sit out so we just sleep for a second just so we the output is nicer and then we print launch and compute and",
    "start": "1479360",
    "end": "1487100"
  },
  {
    "text": "then we do the exact ve exactly like we've seen a few times now so now we're going to replace uh the program here",
    "start": "1487100",
    "end": "1493159"
  },
  {
    "text": "with this compute program and then yeah if that succeeds then we're actually not going to print this",
    "start": "1493159",
    "end": "1499280"
  },
  {
    "text": "line right like we saw before because this program is just gone in this process",
    "start": "1499280",
    "end": "1505460"
  },
  {
    "text": "yeah and I also prefixed the output with a c so we can recognize it's the child outfits later",
    "start": "1505460",
    "end": "1512260"
  },
  {
    "text": "if we're in the parents we print waiting for child and then we use weight which",
    "start": "1512299",
    "end": "1518780"
  },
  {
    "text": "is then going to block until a trial process exits and then we do some stuff",
    "start": "1518780",
    "end": "1523820"
  },
  {
    "text": "to get the exit status and print the child return whatever value",
    "start": "1523820",
    "end": "1529539"
  },
  {
    "text": "so if we compile a link and run this it says like first it does fork and then child",
    "start": "1530539",
    "end": "1537740"
  },
  {
    "text": "is going to sleep so the parent has time to write waiting for child then it gets a weight and it blocks",
    "start": "1537740",
    "end": "1544400"
  },
  {
    "text": "another child process can print launch and compute it's going to replace itself with the compute process",
    "start": "1544400",
    "end": "1550039"
  },
  {
    "text": "and then like never continue down here um and then",
    "start": "1550039",
    "end": "1555380"
  },
  {
    "text": "when the child process exits weight on blocks and we can print that the child returned the value 42.",
    "start": "1555380",
    "end": "1562279"
  },
  {
    "text": "and this is kind of what your shell does right when you type LS it Forks off something that can uh do that",
    "start": "1562279",
    "end": "1571179"
  },
  {
    "text": "so if we try to visualize this a bit uh the default call say we have a fork exact process here which is the the",
    "start": "1572120",
    "end": "1578840"
  },
  {
    "text": "program from the previous slide you have a process running the fork exact program it has process ID for instance one two",
    "start": "1578840",
    "end": "1585440"
  },
  {
    "text": "three um it has some metadata in here which is stuff like the program name your user ID",
    "start": "1585440",
    "end": "1592820"
  },
  {
    "text": "and stuff that the kernel needs to know we have the text section which is where the code for fork exec lives and we have",
    "start": "1592820",
    "end": "1600260"
  },
  {
    "text": "the data section where any globals for 4K expect waves and we have a heap and a",
    "start": "1600260",
    "end": "1605900"
  },
  {
    "text": "stack and stuff like that I've tried to kind of draw them as half full over here",
    "start": "1605900",
    "end": "1612740"
  },
  {
    "text": "Nami Fork and then we get another copy and it's still running the fork XI program it's just a new process with a",
    "start": "1612740",
    "end": "1619279"
  },
  {
    "text": "new process ID running the same program and then everything here has been copied",
    "start": "1619279",
    "end": "1625760"
  },
  {
    "text": "so behind the scenes there's probably some copy on right and some reuse and stuff but like from the perspective of the process it's a new copy so I can go",
    "start": "1625760",
    "end": "1633980"
  },
  {
    "text": "and change Global variables in the child without affecting the parent and so on so it basically just duplicates the",
    "start": "1633980",
    "end": "1639500"
  },
  {
    "text": "entire process gives it a new name and a new process ID and that's it",
    "start": "1639500",
    "end": "1646159"
  },
  {
    "text": "and maybe you have some pointers in here right you have some poetry from here to here or some pointers going on and",
    "start": "1646159",
    "end": "1653419"
  },
  {
    "text": "anyone who's tried to copy a data structure which has like pointers to stuff inside notes that well then all",
    "start": "1653419",
    "end": "1658940"
  },
  {
    "text": "your pointers are going to be wrong because now they're they live in different memory but this is a virtual",
    "start": "1658940",
    "end": "1664159"
  },
  {
    "text": "memory right so the address space of this process is exactly the same as this one so all the",
    "start": "1664159",
    "end": "1670279"
  },
  {
    "text": "addresses are still correct the pointers are still correct it's just backed by different physical memory that we don't see uh in user space",
    "start": "1670279",
    "end": "1678520"
  },
  {
    "text": "yes we copy the process get a new process ID duplicate the memory but pointers are the same",
    "start": "1680000",
    "end": "1685700"
  },
  {
    "text": "and after having called Fork we call exactly e",
    "start": "1685700",
    "end": "1691240"
  },
  {
    "text": "and um yes so exactly is a Cisco it's handled",
    "start": "1691600",
    "end": "1697580"
  },
  {
    "text": "by the Linux kernel and the kernel now has a lot of work to do and the kernel has different handlers to do all of that",
    "start": "1697580",
    "end": "1704240"
  },
  {
    "text": "work depending on what kind of program it is but for here it's the elf executable linkable format which is the",
    "start": "1704240",
    "end": "1711320"
  },
  {
    "text": "most common one on on Linux and you have other handlers for like shell scripts and stuff but we're not going to go into",
    "start": "1711320",
    "end": "1716360"
  },
  {
    "text": "that so when you call exactly e then we still have the same process ID",
    "start": "1716360",
    "end": "1721460"
  },
  {
    "text": "here in the channel but now we have new metadata set up so that's like we have a new program name",
    "start": "1721460",
    "end": "1727220"
  },
  {
    "text": "uh maybe you had like set uid sets so it has to update the user ID of the process uh a bit of stuff like that",
    "start": "1727220",
    "end": "1736179"
  },
  {
    "text": "um yeah then it can open the program file so you can actually open the binary file called compute that we saw before",
    "start": "1736940",
    "end": "1744440"
  },
  {
    "text": "you can set up this new memory it's not going to load anything in there yet just like set up the memory",
    "start": "1744440",
    "end": "1752360"
  },
  {
    "text": "yeah and there's nothing nothing in memory yet then we get a stack so we get a little",
    "start": "1752360",
    "end": "1759440"
  },
  {
    "text": "bit of stuff here in the sack so we haven't gotten to start we haven't gotten to Maine we haven't even loaded",
    "start": "1759440",
    "end": "1764720"
  },
  {
    "text": "the program from disk but we already have some stack and on that stack is stuff like the program name again and",
    "start": "1764720",
    "end": "1771500"
  },
  {
    "text": "the environment variables command line arguments stuff like that goes on the stack even before the program is loaded",
    "start": "1771500",
    "end": "1779919"
  },
  {
    "text": "[Music] um yeah next we finally load in the text on the",
    "start": "1779960",
    "end": "1787760"
  },
  {
    "text": "data sections over here so those finally get loaded it all has already opened the compute binary file it maps in these",
    "start": "1787760",
    "end": "1793760"
  },
  {
    "text": "things into memory and then sets the instruction pointer to the entry points which is the underscore",
    "start": "1793760",
    "end": "1799940"
  },
  {
    "text": "start function that we saw um and then we'll return from exactly so",
    "start": "1799940",
    "end": "1806720"
  },
  {
    "text": "all this is stuff that happens in the kernel when you call the exact ve and the cool thing is it was our execute",
    "start": "1806720",
    "end": "1813260"
  },
  {
    "text": "the the fork exec program called XXV we were still the old program we call exactly we do all this stuff in the",
    "start": "1813260",
    "end": "1819679"
  },
  {
    "text": "kernel we return from exactly back to user space but now we're returning into a completely different program",
    "start": "1819679",
    "end": "1826100"
  },
  {
    "text": "okay so the process is still the same it used to be the fork exec program but when we return everything has been",
    "start": "1826100",
    "end": "1831380"
  },
  {
    "text": "replaced and certainly we are in the compute program instead which is kind of cool I think",
    "start": "1831380",
    "end": "1838600"
  },
  {
    "text": "so uh I've talked a lot about sections so uh there's a brief mention of linking",
    "start": "1844399",
    "end": "1850520"
  },
  {
    "text": "here um so imagine you have an object file called file 1.0 maybe it comes from file",
    "start": "1850520",
    "end": "1858260"
  },
  {
    "text": "one.c or whatever it has some text some code and some data",
    "start": "1858260",
    "end": "1864140"
  },
  {
    "text": "and we have another file 2.0 with some other text and some other data and then",
    "start": "1864140",
    "end": "1869600"
  },
  {
    "text": "the link is going to link this into an executable so it first takes all the text sections",
    "start": "1869600",
    "end": "1875539"
  },
  {
    "text": "from all the object files and just stick them after another in one big text section in the new binary",
    "start": "1875539",
    "end": "1881419"
  },
  {
    "text": "uh it's not gonna modify them or like split them up or anything like they're preserved in their entirety just stick",
    "start": "1881419",
    "end": "1888020"
  },
  {
    "text": "together in a larger text section then it takes the two data sections and make",
    "start": "1888020",
    "end": "1893659"
  },
  {
    "text": "one combined data section and so on for all the sections and if you have any like relative calls",
    "start": "1893659",
    "end": "1900740"
  },
  {
    "text": "up here like you jump minus B backwards those are going to be uh still the same",
    "start": "1900740",
    "end": "1906500"
  },
  {
    "text": "here because it didn't change the layout of this it just the link around become like combined sections together",
    "start": "1906500",
    "end": "1913460"
  },
  {
    "text": "and if you have any relative data access here like look at the adjustment value which is like at some offset well that's",
    "start": "1913460",
    "end": "1920600"
  },
  {
    "text": "going to be wrong now because that distance has not been preserved but the Linker is the one that's writing",
    "start": "1920600",
    "end": "1927320"
  },
  {
    "text": "out of the of these sections so the Linker knows where it places things so the Linker can then go and just adjust",
    "start": "1927320",
    "end": "1932720"
  },
  {
    "text": "these values as it's writing them out it's decided the layout and then we can just adjust these values to be correct",
    "start": "1932720",
    "end": "1939799"
  },
  {
    "text": "and that's also how if you have a function called from here to down here the compiler has no ID right what what's",
    "start": "1939799",
    "end": "1946279"
  },
  {
    "text": "the distance here going to be the color doesn't know so the compiler just leaves a note to the Linker saying can you please fill in the actual value when",
    "start": "1946279",
    "end": "1952580"
  },
  {
    "text": "you're writing out the binary and that's handling handled by something called the relocation and that was",
    "start": "1952580",
    "end": "1959740"
  },
  {
    "text": "I covered that in that talk here last year called from program to process what happens after the compiler so I'll have",
    "start": "1959740",
    "end": "1966620"
  },
  {
    "text": "a link to that at the end as well about how linking and relocations work",
    "start": "1966620",
    "end": "1972158"
  },
  {
    "text": "there's a bunch of other section types as well so we have Ro data for read-only",
    "start": "1973220",
    "end": "1978740"
  },
  {
    "text": "globals and BSS for any globals that are initialized to zero or are uninitialized",
    "start": "1978740",
    "end": "1985820"
  },
  {
    "text": "because then they should be automatically initialized to zero and we have SIM Tab and then then SIM",
    "start": "1985820",
    "end": "1991460"
  },
  {
    "text": "for symbol tables and lots of stuff that we're not going to go over uh",
    "start": "1991460",
    "end": "1997700"
  },
  {
    "text": "here but if we look at this program again that we saw earlier but we have the estimate answer function on the main",
    "start": "1997700",
    "end": "2003640"
  },
  {
    "text": "function on this global data thing then this one is going to go in the data section like we saw like it's global",
    "start": "2003640",
    "end": "2009460"
  },
  {
    "text": "data it goes in the data section and all the code goes in the dot text section",
    "start": "2009460",
    "end": "2015539"
  },
  {
    "text": "and then if you want to look at these sections return to read off again so read off is the tool that will allow you",
    "start": "2015880",
    "end": "2022059"
  },
  {
    "text": "to inspect binaries on Linux and elf is a quite complicated format it has lots",
    "start": "2022059",
    "end": "2028179"
  },
  {
    "text": "of metadata so it has information about all the sections where everything is where everything's supposed to be loaded",
    "start": "2028179",
    "end": "2034120"
  },
  {
    "text": "and all sorts of stuff like this so we can say readoff w for white output again and then s for Section headers",
    "start": "2034120",
    "end": "2041500"
  },
  {
    "text": "and read off is then gonna go there are 37 section headers so that means we have 37 different section types here",
    "start": "2041500",
    "end": "2048339"
  },
  {
    "text": "and we're not going to look at all of those but here are some of these so we have the little text the RO data data",
    "start": "2048339",
    "end": "2054099"
  },
  {
    "text": "and BSS that we um so on so these are just information about where",
    "start": "2054099",
    "end": "2059858"
  },
  {
    "text": "to find this stuff so if you look at the headers here it's going to say address",
    "start": "2059859",
    "end": "2066220"
  },
  {
    "text": "like where do I want this loaded so the text section I want that at 10a0 in memory and it also happens to be at 10a0",
    "start": "2066220",
    "end": "2074260"
  },
  {
    "text": "offset in the file itself so in the binary files this is where you find the text section and here is where I want",
    "start": "2074260",
    "end": "2079839"
  },
  {
    "text": "you to load it in memory [Music] um",
    "start": "2079839",
    "end": "2084960"
  },
  {
    "text": "but yeah sections uh is what the Linker thinks a",
    "start": "2085960",
    "end": "2091599"
  },
  {
    "text": "lot about it combines all these sections into combined sections the kernel doesn't think about sections the kernel",
    "start": "2091599",
    "end": "2097540"
  },
  {
    "text": "thinks about segments uh so it groups all like similar sections into a bigger",
    "start": "2097540",
    "end": "2103720"
  },
  {
    "text": "segment so the kernel doesn't have to load in 30 different 37 different sections it has to just load a smaller",
    "start": "2103720",
    "end": "2110200"
  },
  {
    "text": "set of segments which are just combinations of these sections so if you look at the program headers",
    "start": "2110200",
    "end": "2116700"
  },
  {
    "text": "this is the dash L then we can see the segments and then it goes there are 13 program",
    "start": "2116700",
    "end": "2122800"
  },
  {
    "text": "headers so it's taken all of these 37 sections and combined them down into only 13 segments",
    "start": "2122800",
    "end": "2129940"
  },
  {
    "text": "and there's a handy mapping here at the bottom where you can see that map mapping so for instance segment number",
    "start": "2129940",
    "end": "2136180"
  },
  {
    "text": "three has these sections in it among others our text section and then in",
    "start": "2136180",
    "end": "2142480"
  },
  {
    "text": "segment number five we have all of these ones and here's our data section",
    "start": "2142480",
    "end": "2148500"
  },
  {
    "text": "and then up here it's going to say what do you what's the kernel supposed to do with all of these segments",
    "start": "2149020",
    "end": "2155440"
  },
  {
    "text": "um and there are unfortunately not numbered so we have to like count down here manually but here we find the",
    "start": "2155440",
    "end": "2161440"
  },
  {
    "text": "segments that we're interested in number three and number five and again it has these headers so it",
    "start": "2161440",
    "end": "2167859"
  },
  {
    "text": "says well here's here's where in the binary you find these segments and here's where you want them to be loaded",
    "start": "2167859",
    "end": "2175599"
  },
  {
    "text": "so this is what the kernel goes uh because it's doing it looks at these program headers and take these segments",
    "start": "2175599",
    "end": "2181839"
  },
  {
    "text": "and map them in and if you see I have to scroll a bit here",
    "start": "2181839",
    "end": "2186940"
  },
  {
    "text": "oh that was not exploring yeah here here you can see some Flags so this segment is readable and",
    "start": "2186940",
    "end": "2193839"
  },
  {
    "text": "executable because it contains your code you want the like it has to be able to read the code and execute it but you",
    "start": "2193839",
    "end": "2199780"
  },
  {
    "text": "shouldn't be allowed to write to your code you don't want the the process to be able to like buffer overflow and",
    "start": "2199780",
    "end": "2205540"
  },
  {
    "text": "write into your code so this is where the text goes and then our global data goes in the one which is",
    "start": "2205540",
    "end": "2211780"
  },
  {
    "text": "RW which is read and write but not execute so we don't want to have like executable data uh in your program",
    "start": "2211780",
    "end": "2220619"
  },
  {
    "text": "if you want to visualize it a bit so here's our sections they're like down here at various offsets in the file here",
    "start": "2223540",
    "end": "2229540"
  },
  {
    "text": "are the sections they have some Flags and then you combine these into segments so it's all the same data we don't have",
    "start": "2229540",
    "end": "2235839"
  },
  {
    "text": "like duplicated detections and segments it's just here's all the binary stuff in your executable and sections and",
    "start": "2235839",
    "end": "2241780"
  },
  {
    "text": "segments are just like pointers into like logical group of groupings of these things",
    "start": "2241780",
    "end": "2247599"
  },
  {
    "text": "so it's like it's taken all of these sections here combined it into one uh section a segment over here and yeah",
    "start": "2247599",
    "end": "2255940"
  },
  {
    "text": "this one is read and execute and here's some other stuff with our data which is read write",
    "start": "2255940",
    "end": "2261400"
  },
  {
    "text": "and the flags are a bit different so here the flag for executable is X and here is e uh for some reason",
    "start": "2261400",
    "end": "2267520"
  },
  {
    "text": "but this is what's going on just writing out all of these sections and then the segments are just logical views into",
    "start": "2267520",
    "end": "2273339"
  },
  {
    "text": "that so when we looked at our process earlier that had like the metadata the text",
    "start": "2273339",
    "end": "2279099"
  },
  {
    "text": "section data section stack and Heap and so on it would be more accurate to talk about",
    "start": "2279099",
    "end": "2284859"
  },
  {
    "text": "segments so it doesn't have just a text section it has a data segment containing the text section and a segment",
    "start": "2284859",
    "end": "2291760"
  },
  {
    "text": "containing the data section",
    "start": "2291760",
    "end": "2295619"
  },
  {
    "text": "so back to our program again how do you initialize this value here",
    "start": "2299619",
    "end": "2306280"
  },
  {
    "text": "all right whose job is it when the program starts to go and say adjustment equals 2 and with this other values into",
    "start": "2306280",
    "end": "2313900"
  },
  {
    "text": "here and there here are some globals that has to have some other values here's doing that job of like going around and setting all those variables",
    "start": "2313900",
    "end": "2322500"
  },
  {
    "text": "well the object file has this value too in the data section that we just saw",
    "start": "2323020",
    "end": "2328780"
  },
  {
    "text": "earlier and the Linker has then combined all the data sections into one big data",
    "start": "2328780",
    "end": "2334180"
  },
  {
    "text": "section and the current list I'm going to load the segment which contains the data section",
    "start": "2334180",
    "end": "2340359"
  },
  {
    "text": "and all of our code that accesses accesses these globals has just addresses to like where to look for",
    "start": "2340359",
    "end": "2346660"
  },
  {
    "text": "these globals and then the kernel can just take the entire data segment and just Chuck it into memory and then",
    "start": "2346660",
    "end": "2352240"
  },
  {
    "text": "suddenly all of these pointers are now pointing at the actual values that you want so there's",
    "start": "2352240",
    "end": "2357460"
  },
  {
    "text": "there's really any never any active initialization there's no one that has to go and like set this they just get",
    "start": "2357460",
    "end": "2363820"
  },
  {
    "text": "the correct value when that data is mapped into memory but that's for a simple int right this",
    "start": "2363820",
    "end": "2370359"
  },
  {
    "text": "is a very simple see stuff with that constant expression with a fundamental type it's very very simple you can just",
    "start": "2370359",
    "end": "2375760"
  },
  {
    "text": "load the data but I want to refactor my program yet",
    "start": "2375760",
    "end": "2381460"
  },
  {
    "text": "again I want to have an estimator class to get the estimate because I want to be",
    "start": "2381460",
    "end": "2386619"
  },
  {
    "text": "object oriented or something so I have this estimator class it has this estimates public member which a",
    "start": "2386619",
    "end": "2392680"
  },
  {
    "text": "Constructor initializes 240 and then I have a global instance of",
    "start": "2392680",
    "end": "2398440"
  },
  {
    "text": "this one and then the question is yeah I don't can see like when I'm gonna compute this",
    "start": "2398440",
    "end": "2404020"
  },
  {
    "text": "answer I'm gonna look at my Global estimator and then inspected estimate",
    "start": "2404020",
    "end": "2409060"
  },
  {
    "text": "members so here's my Global and I just check this member arrival to get the estimate which is 40. and then we add",
    "start": "2409060",
    "end": "2415780"
  },
  {
    "text": "this other Global which is two and then we return the answer",
    "start": "2415780",
    "end": "2420779"
  },
  {
    "text": "so when is the estimator Global initialized because now it has a Constructor so you can't just put some",
    "start": "2421180",
    "end": "2426940"
  },
  {
    "text": "value in here Maybe actually it could get like inline and stuff but in general this Constructor",
    "start": "2426940",
    "end": "2432520"
  },
  {
    "text": "could be reading a config file or it could like be connecting to a database or whatnot",
    "start": "2432520",
    "end": "2438099"
  },
  {
    "text": "it might not be something that's known at compile time so it has to actually execute",
    "start": "2438099",
    "end": "2444700"
  },
  {
    "text": "so when is it initialized it's actually [Music] um",
    "start": "2444700",
    "end": "2450359"
  },
  {
    "text": "so typically we just say it's going to be initialized before Main and that's kind of true the standard",
    "start": "2450520",
    "end": "2456940"
  },
  {
    "text": "only says it has to be initialized before the first odr use and all the ruse is just standardized for actually",
    "start": "2456940",
    "end": "2463300"
  },
  {
    "text": "being used for something so before you actually use it it has to be initialized so like no later than",
    "start": "2463300",
    "end": "2470140"
  },
  {
    "text": "down here it has been initialized but in practice uh the way it's",
    "start": "2470140",
    "end": "2475480"
  },
  {
    "text": "implemented is just add to it before main because then then you're good I think it's the same on windows at",
    "start": "2475480",
    "end": "2481480"
  },
  {
    "text": "least on Linux you just do everything before Main and it's actually initialized twice",
    "start": "2481480",
    "end": "2487359"
  },
  {
    "text": "and that's not an implementation detail that's the standard saying well this Global it has a dynamic initializer so",
    "start": "2487359",
    "end": "2493000"
  },
  {
    "text": "it's first going to be statically initialized to zero because this lives in uh",
    "start": "2493000",
    "end": "2500859"
  },
  {
    "text": "in some memory that gets zeroed out as the program starts so first you get static initialization it just fills in",
    "start": "2500859",
    "end": "2507160"
  },
  {
    "text": "zeros and then you can just hope that all your members actually like zero actually means something for that that",
    "start": "2507160",
    "end": "2512920"
  },
  {
    "text": "member type and then you do the dynamic initial initialization which is running the",
    "start": "2512920",
    "end": "2518740"
  },
  {
    "text": "Constructor and you can in fact see here that this one doesn't live in the data segment",
    "start": "2518740",
    "end": "2524980"
  },
  {
    "text": "section that we saw before it lives in another section called BSS and this is for everything that has explicitly been",
    "start": "2524980",
    "end": "2531220"
  },
  {
    "text": "said equals zero real globals or anything that you didn't give a value because all your globals are",
    "start": "2531220",
    "end": "2537040"
  },
  {
    "text": "automatically set to zero um like isn't that expensive to do it twice it's not because first of all",
    "start": "2537040",
    "end": "2544900"
  },
  {
    "text": "the BSS section doesn't actually exist in your binary like you could have a global array of one megabyte there is",
    "start": "2544900",
    "end": "2551800"
  },
  {
    "text": "not one megabyte of zeros then in your binary it's just a note saying can you",
    "start": "2551800",
    "end": "2557440"
  },
  {
    "text": "please allocate one megabyte of zeros over here so let's chip in the binary and it's",
    "start": "2557440",
    "end": "2563020"
  },
  {
    "text": "also cheap at runtime you don't have to actually zero out that because anytime you get a page from the operating system",
    "start": "2563020",
    "end": "2568720"
  },
  {
    "text": "it's already filled with zeros so that you can't look at whatever memory the previous process was having it could",
    "start": "2568720",
    "end": "2574720"
  },
  {
    "text": "contain your password or whatever so so from CNC purposes perspective it's",
    "start": "2574720",
    "end": "2580060"
  },
  {
    "text": "kind of free to do the series civilization um yeah for some reason over jump isn't",
    "start": "2580060",
    "end": "2587800"
  },
  {
    "text": "very fond of displaying this stuff so the estimator lives here it would look something like this there's some other",
    "start": "2587800",
    "end": "2593140"
  },
  {
    "text": "Global here as well that I don't really know but here is where it lives it's just object doesn't want to show it for",
    "start": "2593140",
    "end": "2599980"
  },
  {
    "text": "some reason and then later we have to do the dynamic initialization so we have to actually",
    "start": "2599980",
    "end": "2605319"
  },
  {
    "text": "run the Constructor and then okay how how do you do that well how do",
    "start": "2605319",
    "end": "2611140"
  },
  {
    "text": "you get there so what I did I just opened up my compute program again and looked for the",
    "start": "2611140",
    "end": "2617380"
  },
  {
    "text": "estimated Constructor and now here here we have it I found the Constructor so let's just search who's calling this",
    "start": "2617380",
    "end": "2625060"
  },
  {
    "text": "ah there's a call to this one it's in something called Static initialization and destruction zero",
    "start": "2625060",
    "end": "2632319"
  },
  {
    "text": "okay I just kept searching like who calls this one oh here's a call",
    "start": "2632319",
    "end": "2637660"
  },
  {
    "text": "in something called Global sub I estimator yeah I'll just I just kept searching and",
    "start": "2637660",
    "end": "2644020"
  },
  {
    "text": "no one is calling this one so we know that this Global so by estimator is calling static",
    "start": "2644020",
    "end": "2650319"
  },
  {
    "text": "initialization and this direction zero which is calling our Constructor but no one is calling this one so what's going on",
    "start": "2650319",
    "end": "2657000"
  },
  {
    "text": "there's another section called dot init underscore array and there are some suspicious looking bytes down here",
    "start": "2660280",
    "end": "2667119"
  },
  {
    "text": "7A 11. if you look at where this function is it's at 11 7A",
    "start": "2667119",
    "end": "2673900"
  },
  {
    "text": "and since we run x86 it's like backwards this significant Point first so 11 7A",
    "start": "2673900",
    "end": "2679480"
  },
  {
    "text": "the address of this one so down here in some sort of data section called init array there's the",
    "start": "2679480",
    "end": "2686319"
  },
  {
    "text": "address of this so there's basically a function pointer down here",
    "start": "2686319",
    "end": "2691599"
  },
  {
    "text": "um uh yes and there's also some other function pointer to some other thing",
    "start": "2691599",
    "end": "2697780"
  },
  {
    "text": "that's probably coming from like some C or cable stuff the important thing is that we have a functional pointer to whatever calls our",
    "start": "2697780",
    "end": "2704200"
  },
  {
    "text": "Constructor so then someone can look at those",
    "start": "2704200",
    "end": "2709839"
  },
  {
    "text": "function pointers at some point um yeah and what's what's going to",
    "start": "2709839",
    "end": "2714880"
  },
  {
    "text": "happen then is the Linker is going to find an init array in our object file and in",
    "start": "2714880",
    "end": "2720220"
  },
  {
    "text": "some other object files gonna combine them together into one big init array and then suddenly you have a nice data",
    "start": "2720220",
    "end": "2726819"
  },
  {
    "text": "structure containing pointers to everything you need to do to initialize your program dynamically",
    "start": "2726819",
    "end": "2732819"
  },
  {
    "text": "so if we go back to our underscore start function that we saw before this is the one we got from BBC not the custom one",
    "start": "2732819",
    "end": "2739000"
  },
  {
    "text": "it does all of this stuff and then it calls Lipsy start Main and",
    "start": "2739000",
    "end": "2744160"
  },
  {
    "text": "then libc start main can then actually just iterate over all of these fashion pointers and that's how you can",
    "start": "2744160",
    "end": "2749440"
  },
  {
    "text": "initialize your stuff um",
    "start": "2749440",
    "end": "2755220"
  },
  {
    "text": "so let's uh load our compute program up in GDB",
    "start": "2756099",
    "end": "2761380"
  },
  {
    "text": "put a breakpoint in the Constructor run the program and then it breaks at",
    "start": "2761380",
    "end": "2767319"
  },
  {
    "text": "the beginning of the Constructor if you then print the battery so we can see it started here in underscore stock",
    "start": "2767319",
    "end": "2773319"
  },
  {
    "text": "as we saw then it went into webc start Main and here is like our chain of three",
    "start": "2773319",
    "end": "2779200"
  },
  {
    "text": "functions that we found in objump so this call in it is then the one that is responsible for iterating all of these",
    "start": "2779200",
    "end": "2785740"
  },
  {
    "text": "uh over all of these function pointers I'm calling these sorts of chains from all the object files",
    "start": "2785740",
    "end": "2792400"
  },
  {
    "text": "and now we're at the the breakpoint is at the beginning of the Constructor so the Constructor hasn't run yet so we",
    "start": "2792400",
    "end": "2798220"
  },
  {
    "text": "talked about first static initialization to zero then Dynamic initialization so Dynamic initialization is just about to",
    "start": "2798220",
    "end": "2804760"
  },
  {
    "text": "start so if we print now this member of the global it's zero",
    "start": "2804760",
    "end": "2811300"
  },
  {
    "text": "um and that's not some implementation detail or some luck or something that's actually the standards that's it's going",
    "start": "2811300",
    "end": "2816460"
  },
  {
    "text": "to get statically initialized to zero and finish means just to finish running the current function so it finishes The",
    "start": "2816460",
    "end": "2822819"
  },
  {
    "text": "Constructor and now we can print the estimate and it prints",
    "start": "2822819",
    "end": "2829000"
  },
  {
    "text": "40. so uh yeah there's a issue with reveal.s when this screen has a different aspect",
    "start": "2829000",
    "end": "2835480"
  },
  {
    "text": "ratio than this one but I promise this one says exactly the same as this line here except it says to instead now we",
    "start": "2835480",
    "end": "2843339"
  },
  {
    "text": "have 40 instead of zero so we had our linking illustration",
    "start": "2843339",
    "end": "2849280"
  },
  {
    "text": "earlier with the text and data section where it combines the two text sections into one and the two data sections we",
    "start": "2849280",
    "end": "2854859"
  },
  {
    "text": "can do the same exercise now so we have one object file with our estimator Constructor",
    "start": "2854859",
    "end": "2860260"
  },
  {
    "text": "and these two other ones that call it another init array has this address of",
    "start": "2860260",
    "end": "2865780"
  },
  {
    "text": "Global server estimator so we have the uh the function pointer to here which is going to call this",
    "start": "2865780",
    "end": "2870819"
  },
  {
    "text": "which is going to call this and we have another object file with some other global uh and we have another Global Supply",
    "start": "2870819",
    "end": "2878260"
  },
  {
    "text": "other global so it's another function pointer so we can call this which calls this which",
    "start": "2878260",
    "end": "2883300"
  },
  {
    "text": "calls this and then we're gonna need that under first Arc function from webc",
    "start": "2883300",
    "end": "2889180"
  },
  {
    "text": "and the Linker then takes all of these code.text actions combine them into one",
    "start": "2889180",
    "end": "2894280"
  },
  {
    "text": "big section and actually these these two are called the same",
    "start": "2894280",
    "end": "2899500"
  },
  {
    "text": "so the two objects with the same name and apparently that's fine since no one's actually going to use it for anything",
    "start": "2899500",
    "end": "2906040"
  },
  {
    "text": "um yeah and then takes these two sets of function pointers and combines them into that is one big common list of all the",
    "start": "2906040",
    "end": "2912579"
  },
  {
    "text": "function pointers that this binary is going to require you to run on Startup and this is kind of a hint at why we",
    "start": "2912579",
    "end": "2919720"
  },
  {
    "text": "have the static initialization order Fiasco right we don't know the order of when our globals are going to be",
    "start": "2919720",
    "end": "2924819"
  },
  {
    "text": "initialized and that's like well you won't you don't know what the Linker is going to do like if you pass these",
    "start": "2924819",
    "end": "2930220"
  },
  {
    "text": "object files in one order maybe they get like in the same order like who knows so you can't know the order of global",
    "start": "2930220",
    "end": "2937240"
  },
  {
    "text": "initialization um but yeah we have the static initialization order Fiasco so it",
    "start": "2937240",
    "end": "2943359"
  },
  {
    "text": "doesn't try to guarantee it anyway so like we don't care",
    "start": "2943359",
    "end": "2948119"
  },
  {
    "text": "so yeah then start it's going to call Lib say start Main and then libsy start main is going to do like for all of this",
    "start": "2950800",
    "end": "2956500"
  },
  {
    "text": "uh init array thing over here to just call all the dynamic initialization",
    "start": "2956500",
    "end": "2964260"
  },
  {
    "text": "yeah so now we have let's have a quick look at program exit because that's very related to Startup like you start the",
    "start": "2965619",
    "end": "2971200"
  },
  {
    "text": "pro the program and then you exit it and maybe some of the reverse things have to happen",
    "start": "2971200",
    "end": "2977400"
  },
  {
    "text": "what's what you have to do to exit the program what do you have to do with this this Global int",
    "start": "2977500",
    "end": "2984040"
  },
  {
    "text": "nothing right you just stop using the memory and it's like there's no work to you have to do to just not use an INT",
    "start": "2984040",
    "end": "2992319"
  },
  {
    "text": "but if I add a Destructor to my global object here um then the destructor actually has to",
    "start": "2992319",
    "end": "2998859"
  },
  {
    "text": "get called and at program exit and we saw how it calls all the",
    "start": "2998859",
    "end": "3004680"
  },
  {
    "text": "Constructor by just checking function pointers in memory",
    "start": "3004680",
    "end": "3009720"
  },
  {
    "text": "why can't we do that for distractors what prevents us from just doing the same trick and like put function",
    "start": "3009720",
    "end": "3014940"
  },
  {
    "text": "pointers to all the disruptors somewhere and",
    "start": "3014940",
    "end": "3021240"
  },
  {
    "text": "at program startup you have to call all the constructors but you're only supposed to destroy or",
    "start": "3021240",
    "end": "3026940"
  },
  {
    "text": "break objects that were actually constructed so if any of your Global Constructors through an exception you",
    "start": "3026940",
    "end": "3033780"
  },
  {
    "text": "can't go and then call the distractor on that object so you have to like keep track of somehow which objects were actually constructed",
    "start": "3033780",
    "end": "3040440"
  },
  {
    "text": "and even if we have the static initialization order Fiasco we do have one guarantee that in some order you're",
    "start": "3040440",
    "end": "3047880"
  },
  {
    "text": "going to initialize your globals and then they're going to get distracted in the reverse order of that so you don't",
    "start": "3047880",
    "end": "3053460"
  },
  {
    "text": "know which order it is you just know it's actually it's going to be the reverse of the initialization so we can't just have like an array of",
    "start": "3053460",
    "end": "3059579"
  },
  {
    "text": "function pointers but if we look at the op jump again we",
    "start": "3059579",
    "end": "3065760"
  },
  {
    "text": "have this function here called Static initialization and destruction zero it says and disruption so there's",
    "start": "3065760",
    "end": "3071640"
  },
  {
    "text": "something going on here with destruction as well so it's going to call the Constructor",
    "start": "3071640",
    "end": "3077579"
  },
  {
    "text": "and then only if this one actually returns not if it throws but if it actually returns as it should then we",
    "start": "3077579",
    "end": "3085079"
  },
  {
    "text": "can start setting up some Destructor stuff so these instructions are only going to",
    "start": "3085079",
    "end": "3090839"
  },
  {
    "text": "get executed if if it didn't throw um and it's doing something with the DSL",
    "start": "3090839",
    "end": "3096420"
  },
  {
    "text": "handle Let's ignore that and what's interesting most here is it's taking Lea",
    "start": "3096420",
    "end": "3101819"
  },
  {
    "text": "load effective address it's taking the address of the estimator Global so where's the instance where is the this",
    "start": "3101819",
    "end": "3107280"
  },
  {
    "text": "variable living in memory and then it loads the effective address of the estimator Destructor so where's",
    "start": "3107280",
    "end": "3113460"
  },
  {
    "text": "the instance that we want to call the destructor on and where is the destructor that you want to run",
    "start": "3113460",
    "end": "3118500"
  },
  {
    "text": "and then it puts those in as some arguments to cxa at Exit which just",
    "start": "3118500",
    "end": "3124020"
  },
  {
    "text": "registers all of this stuff somewhere so presumably this is going to take then the instance pointer and the function",
    "start": "3124020",
    "end": "3131040"
  },
  {
    "text": "pointer to the destructor put it onto some sort of default structure so we have kind of a stack somewhere that's at",
    "start": "3131040",
    "end": "3137640"
  },
  {
    "text": "Exit you can then like pop off things in the same order they were created but",
    "start": "3137640",
    "end": "3142800"
  },
  {
    "text": "only if they were actually created not if there was an exception",
    "start": "3142800",
    "end": "3148079"
  },
  {
    "text": "so if we load our compute program into GDB again break in the destructor",
    "start": "3148079",
    "end": "3153420"
  },
  {
    "text": "run it and it breaks there we look at the back Trace oh and this is super annoying and I",
    "start": "3153420",
    "end": "3159660"
  },
  {
    "text": "can't fix it on the file I think yeah but you can barely see it like you",
    "start": "3159660",
    "end": "3164880"
  },
  {
    "text": "can see Libs is dark man here so under here it says underscore start so we're still in underscore start at when the",
    "start": "3164880",
    "end": "3170579"
  },
  {
    "text": "program is exiting we're still in underscore start we're still in bibcy start Main and then",
    "start": "3170579",
    "end": "3175800"
  },
  {
    "text": "we're in this Run exit handlers which is an iterating somehow like just popping",
    "start": "3175800",
    "end": "3180839"
  },
  {
    "text": "off all the stuff from the stack and then calling the distractor",
    "start": "3180839",
    "end": "3185780"
  },
  {
    "text": "so that's the entire thing like everything goes on in stock yeah that's how you get to initialize your stuff how",
    "start": "3193260",
    "end": "3198839"
  },
  {
    "text": "to call Main unless you have Dynamic shared objects right Dynamic",
    "start": "3198839",
    "end": "3206040"
  },
  {
    "text": "libraries SOS dlls and windows that's going to complicate stuff a lot so now we know if you have a static linked main",
    "start": "3206040",
    "end": "3212160"
  },
  {
    "text": "we know actually everything that's going on but what's going on with this stuff",
    "start": "3212160",
    "end": "3217559"
  },
  {
    "text": "what's in an so file what's in a dynamic Shard object there is some code",
    "start": "3217559",
    "end": "3223380"
  },
  {
    "text": "there's some data there might be globals with Constructors",
    "start": "3223380",
    "end": "3228420"
  },
  {
    "text": "and the instructors well the so file has to get loaded into memory",
    "start": "3228420",
    "end": "3234480"
  },
  {
    "text": "this is very similar to executables our shared object is extremely similar to an executable it's basically",
    "start": "3234480",
    "end": "3241380"
  },
  {
    "text": "the same thing except it doesn't have a main kind of",
    "start": "3241380",
    "end": "3246420"
  },
  {
    "text": "and it's not at all similar to static libraries so a static library is just a bucket of object files they haven't been",
    "start": "3246420",
    "end": "3252000"
  },
  {
    "text": "linked yet or anything a dynamic shared object like it's already been linked everything is ready",
    "start": "3252000",
    "end": "3257520"
  },
  {
    "text": "it's one binary and it's very similar to an executable",
    "start": "3257520",
    "end": "3262640"
  },
  {
    "text": "so like there's only six minutes left of the talk how are we going to learn everything about shared objects in six minutes uh and that turns out actually",
    "start": "3263880",
    "end": "3270900"
  },
  {
    "text": "to not be a problem I introduced a new Dynamic Library here I want to take this adjustment value I",
    "start": "3270900",
    "end": "3278700"
  },
  {
    "text": "don't want to have this here I want it in a shared object so we can share it among all our programs and make it like even Global and it was uh so I have this",
    "start": "3278700",
    "end": "3287460"
  },
  {
    "text": "exactly the same as estimator here it's just an adjustment member and I just declare it and we have a dynamic.cpp",
    "start": "3287460",
    "end": "3294420"
  },
  {
    "text": "just for the definition and then this turns into the shared object and this turns into our binary as before",
    "start": "3294420",
    "end": "3300780"
  },
  {
    "text": "and now we slightly modify our binary to include the header",
    "start": "3300780",
    "end": "3306059"
  },
  {
    "text": "and then down here instead of using the uh we used to have this",
    "start": "3306059",
    "end": "3311579"
  },
  {
    "text": "adjustment equals two online here so this is now instead getting it here",
    "start": "3311579",
    "end": "3317700"
  },
  {
    "text": "uh from this adjustments Global in the shared object",
    "start": "3317700",
    "end": "3323520"
  },
  {
    "text": "and then the same question is like how do you run the adjuster Constructor how do you do like all the stuff we just did",
    "start": "3323520",
    "end": "3329460"
  },
  {
    "text": "for the main function so if you run object object dump on your shared objects you find the Constructor",
    "start": "3329460",
    "end": "3336960"
  },
  {
    "text": "let's search for that well here's a call it's in something called Static",
    "start": "3336960",
    "end": "3342180"
  },
  {
    "text": "initialization and destruction zero well who calls that well here's a call it's in global Serbia dynamic",
    "start": "3342180",
    "end": "3351180"
  },
  {
    "text": "hook of that no one but there's a section here called dot init array we",
    "start": "3351180",
    "end": "3356760"
  },
  {
    "text": "have some suspicious looking bytes so 11 4C that's this one",
    "start": "3356760",
    "end": "3363119"
  },
  {
    "text": "so this is exactly the same as the executable all right there's just a bunch of function pointers you have to iterate",
    "start": "3363119",
    "end": "3369420"
  },
  {
    "text": "over and then all the stuff we saw for binaries for executables is the same for",
    "start": "3369420",
    "end": "3374460"
  },
  {
    "text": "this shared object just one question is like who iterates over these things all",
    "start": "3374460",
    "end": "3379559"
  },
  {
    "text": "right when we saw that ellipses dark main iterates over the initialization functions in your executable but who",
    "start": "3379559",
    "end": "3386700"
  },
  {
    "text": "does that for the shared object and who loads the shared object is it the kernel the kernel load that are",
    "start": "3386700",
    "end": "3392400"
  },
  {
    "text": "executable is that the kernel reloads the shared object because all of the same work has to be",
    "start": "3392400",
    "end": "3397440"
  },
  {
    "text": "done just slightly um slightly differently",
    "start": "3397440",
    "end": "3403040"
  },
  {
    "text": "so if you look at readoff again for our compute program we can see it's requesting program",
    "start": "3403079",
    "end": "3409680"
  },
  {
    "text": "interpreter LD linux.so and this is the dynamic link around order",
    "start": "3409680",
    "end": "3415800"
  },
  {
    "text": "on Linux and I'm going to skip this slide here um",
    "start": "3415800",
    "end": "3421079"
  },
  {
    "text": "but yeah so what is it requesting it for what does it mean to request this it means that I have linked against",
    "start": "3421079",
    "end": "3427859"
  },
  {
    "text": "something Dynamic so there's some Dynamic initialization going on and that's the responsibility of LD linux.so",
    "start": "3427859",
    "end": "3435599"
  },
  {
    "text": "and it's not the responsibility of the kernel",
    "start": "3435599",
    "end": "3440540"
  },
  {
    "text": "so if you want to run through a full example you want to start our compute program which uses this libdynamic.so",
    "start": "3440760",
    "end": "3447599"
  },
  {
    "text": "someone has called xfv to even start compute so we're in the kernel the kernel is doing exactly e the kernel is",
    "start": "3447599",
    "end": "3454800"
  },
  {
    "text": "now about to replace the previous program with this new program in our process it's going to read the headers like we",
    "start": "3454800",
    "end": "3460680"
  },
  {
    "text": "saw now this is just repetition we're reading all the headers from the compute binary pair the stack",
    "start": "3460680",
    "end": "3466520"
  },
  {
    "text": "we load the program into memory these segments we then also load the",
    "start": "3466520",
    "end": "3473700"
  },
  {
    "text": "loader so now the kernel has loaded our main program and it's also gone unloaded the loader",
    "start": "3473700",
    "end": "3481619"
  },
  {
    "text": "and then the kernel sets the insertion pointer not to the stock that we have",
    "start": "3481619",
    "end": "3486660"
  },
  {
    "text": "seen so many times in our program it sets the instruction pointer to the underscore start inside the loader",
    "start": "3486660",
    "end": "3493380"
  },
  {
    "text": "itself that one also has a stark so this is kind of an executable so to speak shared object it has a start function",
    "start": "3493380",
    "end": "3501839"
  },
  {
    "text": "then uh yeah we return from exit V like we saw",
    "start": "3501839",
    "end": "3507660"
  },
  {
    "text": "before but now we're not returning into our program we're returning into ldso itself",
    "start": "3507660",
    "end": "3513240"
  },
  {
    "text": "ldso itself has its own version of underscore start it now has to do a lot of work according",
    "start": "3513240",
    "end": "3519240"
  },
  {
    "text": "to a long list of complicated rules to figure out which live dynamic.som are actually supposed to load here",
    "start": "3519240",
    "end": "3526200"
  },
  {
    "text": "and it's going to load it it's going to update the global offset table which is just like a table of",
    "start": "3526200",
    "end": "3532500"
  },
  {
    "text": "pointers to all the globals in various shared objects so that's they can all find a global data from each other this",
    "start": "3532500",
    "end": "3539940"
  },
  {
    "text": "was like half an hour and last year's talk so I'm not going to go into the details",
    "start": "3539940",
    "end": "3545220"
  },
  {
    "text": "but then ldlinix.so is responsible for iterating over these initializations of",
    "start": "3545220",
    "end": "3550440"
  },
  {
    "text": "in the shared object so the kernel has called into Linux at the Linux so which is then initializing",
    "start": "3550440",
    "end": "3557640"
  },
  {
    "text": "the shared object so then it has to call into the shared object so now the loader calls into the",
    "start": "3557640",
    "end": "3564119"
  },
  {
    "text": "shared object and finally calls all of the initialization stuff in in our Dynamic Library",
    "start": "3564119",
    "end": "3571319"
  },
  {
    "text": "and when that's done we're back into the loader and now the loader can jump to underscore start in our actual program",
    "start": "3571319",
    "end": "3580140"
  },
  {
    "text": "so now we're in here now we're in the underscore startup we've seen so many times uh it goes like lib say start man",
    "start": "3580140",
    "end": "3586559"
  },
  {
    "text": "and all of that and calls are all our all our initialization stuff which then calls it's off the screen it",
    "start": "3586559",
    "end": "3594240"
  },
  {
    "text": "then calls the estimator Constructor and then finally it gets to main so just imagine it says uh estimator Constructor",
    "start": "3594240",
    "end": "3601740"
  },
  {
    "text": "here and then it says Main and below that and that's the entire story and it",
    "start": "3601740",
    "end": "3606839"
  },
  {
    "text": "was really not much to learn about its shared objects because they are very similar to executables",
    "start": "3606839",
    "end": "3614040"
  },
  {
    "text": "and that's it thank you for coming these are links to the assembly talk and the",
    "start": "3614040",
    "end": "3619140"
  },
  {
    "text": "Linker talk um and yeah you can find me on Twitter uh these accounts if you want to have a",
    "start": "3619140",
    "end": "3626099"
  },
  {
    "text": "chat or I'll probably be at the CV booth in most of the breaks as well",
    "start": "3626099",
    "end": "3632760"
  },
  {
    "text": "um I think we're exactly on time so if you have any very cool questions uh",
    "start": "3632760",
    "end": "3638160"
  },
  {
    "text": "let's do a few if not we can just chat after",
    "start": "3638160",
    "end": "3642500"
  },
  {
    "text": "thank you [Applause]",
    "start": "3643799",
    "end": "3651518"
  }
]