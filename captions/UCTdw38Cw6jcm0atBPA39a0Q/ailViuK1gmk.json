[
  {
    "text": "uh my name is Nico yosotis you might have heard my name",
    "start": "7859",
    "end": "12900"
  },
  {
    "text": "um I'm currently writing a book about C plus 20. it's almost done only 700 pages",
    "start": "12900",
    "end": "19980"
  },
  {
    "text": "just 20. and I have a chance to talk one hour",
    "start": "19980",
    "end": "26699"
  },
  {
    "text": "about my favorite examples other favorite examples always good",
    "start": "26699",
    "end": "32460"
  },
  {
    "text": "so nice no you will also see some traps oh I'm not",
    "start": "32460",
    "end": "38280"
  },
  {
    "text": "allowed to say traps I have to say pitfalls because these traps were not intended",
    "start": "38280",
    "end": "45059"
  },
  {
    "text": "well some things were intended by Design but uh",
    "start": "45059",
    "end": "50760"
  },
  {
    "text": "for a good reason so let's see what we have",
    "start": "50760",
    "end": "56340"
  },
  {
    "text": "let's start with Concepts and ranges",
    "start": "56340",
    "end": "61219"
  },
  {
    "text": "assume you have want to implement a simple function",
    "start": "62579",
    "end": "67920"
  },
  {
    "text": "a simple function that adds a value into collection a generic function so any collection can be used any value",
    "start": "67920",
    "end": "75600"
  },
  {
    "text": "can be used as long as things compile um here we use pushback",
    "start": "75600",
    "end": "81180"
  },
  {
    "text": "so which means it will only work for collections that support pushback so",
    "start": "81180",
    "end": "87720"
  },
  {
    "text": "um calling this for vector and and you push in a value that fits",
    "start": "87720",
    "end": "94140"
  },
  {
    "text": "like here 42 it's a vector of end works fine",
    "start": "94140",
    "end": "101000"
  },
  {
    "text": "good there's a new way to write that the way you can write that as",
    "start": "102119",
    "end": "110100"
  },
  {
    "text": "that you declare the parameters to be Auto this converts a function into a function",
    "start": "110100",
    "end": "117360"
  },
  {
    "text": "template it's not a function anymore it's a function template it's just a new shorter syntax",
    "start": "117360",
    "end": "125820"
  },
  {
    "text": "to implement function templates so it's a it's a shortcut for the thing on the right",
    "start": "125820",
    "end": "132120"
  },
  {
    "text": "except that the thing on the right has a name for t or T1 and T2",
    "start": "132120",
    "end": "139260"
  },
  {
    "text": "y the thing on the left has no name for the type T1 and T2 the type that auto represents",
    "start": "139260",
    "end": "149840"
  },
  {
    "text": "as it is the function templates all rules apply as before for our function templates usually you put that in header",
    "start": "151200",
    "end": "157440"
  },
  {
    "text": "fights also the definition and header height you don't need inline to declare in a header file",
    "start": "157440",
    "end": "163620"
  },
  {
    "text": "yeah that's it good",
    "start": "163620",
    "end": "169099"
  },
  {
    "text": "well this does not work everywhere so let's overload it with another",
    "start": "171720",
    "end": "177780"
  },
  {
    "text": "function template calling inset",
    "start": "177780",
    "end": "183680"
  },
  {
    "text": "um that should be used for containers that don't have pushback but support insert",
    "start": "184620",
    "end": "190440"
  },
  {
    "text": "unfortunately nothing compiles anymore what",
    "start": "190440",
    "end": "197280"
  },
  {
    "text": "overload resolution kicks in overload resolution says um I have to decide what to call there are",
    "start": "197280",
    "end": "204900"
  },
  {
    "text": "two ad functions they don't look the compiler does not look at the body so all it looks at is",
    "start": "204900",
    "end": "211800"
  },
  {
    "text": "um the Declaration the Declarations are the same return type is ignored by the",
    "start": "211800",
    "end": "217920"
  },
  {
    "text": "way so there's no rule to prefer one over the other so the compiler says this is",
    "start": "217920",
    "end": "223260"
  },
  {
    "text": "ambiguous okay how can we solve that well",
    "start": "223260",
    "end": "230220"
  },
  {
    "text": "stop making then ambiguous give them different signatures there were very to do that one of the",
    "start": "230220",
    "end": "237720"
  },
  {
    "text": "most nasty way or nastiest ways we have is enable this was used in Abel if in the past",
    "start": "237720",
    "end": "245400"
  },
  {
    "text": "who likes it you are fired nobody can like it because it creates",
    "start": "245400",
    "end": "252840"
  },
  {
    "text": "unreadable code kidding um",
    "start": "252840",
    "end": "258660"
  },
  {
    "text": "that's a better way now to do that the better way is",
    "start": "258660",
    "end": "264780"
  },
  {
    "text": "place a constraint to the Declaration",
    "start": "264780",
    "end": "271139"
  },
  {
    "text": "so here the constraint we use here is has pushback so the collection",
    "start": "271139",
    "end": "277230"
  },
  {
    "text": "[Music] we pass which is still generic that's why you use Auto here you cannot skip",
    "start": "277230",
    "end": "283020"
  },
  {
    "text": "out here has a type constraint um it has the support push back where it",
    "start": "283020",
    "end": "289080"
  },
  {
    "text": "comes this magically has pushback from where from well this is what we have introduced in",
    "start": "289080",
    "end": "296160"
  },
  {
    "text": "C plus 20 a concept so you can define a concept concept is",
    "start": "296160",
    "end": "302460"
  },
  {
    "text": "not for code generation concept is to decide whether something can be called or not whether something",
    "start": "302460",
    "end": "309720"
  },
  {
    "text": "is available or not so here we Define that has pushback",
    "start": "309720",
    "end": "315919"
  },
  {
    "text": "specifies that has pushback is satisfied are met",
    "start": "315919",
    "end": "322440"
  },
  {
    "text": "if pushback can be called for a value type of this collection so",
    "start": "322440",
    "end": "329400"
  },
  {
    "text": "as you see on the right that's what we call a requirements expression we formalize requirements here",
    "start": "329400",
    "end": "335580"
  },
  {
    "text": "well there's an implicit requirement our type we pass our type",
    "start": "335580",
    "end": "340860"
  },
  {
    "text": "call has to has a member value type um and there's an explicit requirement",
    "start": "340860",
    "end": "348419"
  },
  {
    "text": "for this value type we have to be able to call pushback to put it in the container",
    "start": "348419",
    "end": "356240"
  },
  {
    "text": "so three things work together on the right you have requirements on the left you have a name for these requirements",
    "start": "356460",
    "end": "363060"
  },
  {
    "text": "and you use them to constrain your generic code these three terms",
    "start": "363060",
    "end": "368160"
  },
  {
    "text": "you have to carefully not mix them okay",
    "start": "368160",
    "end": "374460"
  },
  {
    "text": "that's it and you know what it compiles both compile the effect is that",
    "start": "374460",
    "end": "381419"
  },
  {
    "text": "well if a container does not support pushback the first template is not",
    "start": "381419",
    "end": "387360"
  },
  {
    "text": "visible so only the second one is visible so that's the case if we use a set of n",
    "start": "387360",
    "end": "395699"
  },
  {
    "text": "so we call insert but for a vector both are visible because we have not constrained the",
    "start": "395699",
    "end": "401819"
  },
  {
    "text": "second one um but there's a rule the first one is more specialized",
    "start": "401819",
    "end": "408240"
  },
  {
    "text": "than the second one and that uh sorry",
    "start": "408240",
    "end": "413819"
  },
  {
    "text": "and that means that this is preferred for vector so the",
    "start": "413819",
    "end": "419580"
  },
  {
    "text": "vector will call that which is the right thing",
    "start": "419580",
    "end": "424280"
  },
  {
    "text": "again note that this is equivalent that you use a generic code using template",
    "start": "425460",
    "end": "430919"
  },
  {
    "text": "syntax there you could qualify the template parameter directly with has",
    "start": "430919",
    "end": "436020"
  },
  {
    "text": "pushback has the same effect but you have a name now for it",
    "start": "436020",
    "end": "441120"
  },
  {
    "text": "and please note one more thing a little tiny thing here um if you look on the top right",
    "start": "441120",
    "end": "448080"
  },
  {
    "text": "call colon colon value type so what we learned sometimes the hard way is if",
    "start": "448080",
    "end": "453720"
  },
  {
    "text": "there's a template parameter and you have a member that is a type you need type name",
    "start": "453720",
    "end": "458759"
  },
  {
    "text": "do you do you see type name here anymore no because in some places well",
    "start": "458759",
    "end": "465180"
  },
  {
    "text": "everywhere where it's clear that it's member has to be a type",
    "start": "465180",
    "end": "470580"
  },
  {
    "text": "this type name is no longer necessary one place as this",
    "start": "470580",
    "end": "476280"
  },
  {
    "text": "in C plus 20. good",
    "start": "476280",
    "end": "483319"
  },
  {
    "text": "you can write this code in different ways so another way to write it is to",
    "start": "486180",
    "end": "491520"
  },
  {
    "text": "say oh let's uh formulate the requirement not to qualify the",
    "start": "491520",
    "end": "498180"
  },
  {
    "text": "type of the first parameter let's formulate the requirement well this is",
    "start": "498180",
    "end": "504120"
  },
  {
    "text": "not a requirement this is a constraint we use the request keyword for two",
    "start": "504120",
    "end": "509160"
  },
  {
    "text": "things formulate requirements that what we do on the top right",
    "start": "509160",
    "end": "514260"
  },
  {
    "text": "formal light constraints that's what we do in the middle left",
    "start": "514260",
    "end": "520260"
  },
  {
    "text": "so we constrain that the type of collect of call has pushed back",
    "start": "520260",
    "end": "528020"
  },
  {
    "text": "so we can use Auto here oh you can combine this requirement with",
    "start": "529140",
    "end": "534240"
  },
  {
    "text": "other requirements so I require this and that and that and that that is why you can also use this syntax",
    "start": "534240",
    "end": "542459"
  },
  {
    "text": "oh but wait a minute this does not compile for vectors",
    "start": "542459",
    "end": "548940"
  },
  {
    "text": "you get a crazy error message the error messages I cannot call insert for 42 in",
    "start": "548940",
    "end": "555480"
  },
  {
    "text": "a vector which means the first one is not available",
    "start": "555480",
    "end": "562699"
  },
  {
    "text": "foreign",
    "start": "580200",
    "end": "582980"
  },
  {
    "text": "yes so what you call here is Vector reference colon colon value type",
    "start": "586880",
    "end": "594019"
  },
  {
    "text": "that's not valid code well that's not an error because requirements work the way if code is not valid the requirement is",
    "start": "595620",
    "end": "602640"
  },
  {
    "text": "not met so we don't see this template we only see the second one for Vector in this",
    "start": "602640",
    "end": "608459"
  },
  {
    "text": "case yeah okay well things are not that easy",
    "start": "608459",
    "end": "614220"
  },
  {
    "text": "well and one way to remove that is to fix that is to say let's remove constant referenceness from this type we have a",
    "start": "614220",
    "end": "620880"
  },
  {
    "text": "new type trade for that a type function um because so often we just needed that remove referenceness and Constance and",
    "start": "620880",
    "end": "627779"
  },
  {
    "text": "maybe volatan as that's a new one and then it works fine but maybe it's",
    "start": "627779",
    "end": "633300"
  },
  {
    "text": "better to do the work to make the concept more flexible and to do that",
    "start": "633300",
    "end": "640140"
  },
  {
    "text": "um you can put it in the concept so you can cite and say instead of qualifying",
    "start": "640140",
    "end": "645240"
  },
  {
    "text": "the type and then going to the member value type",
    "start": "645240",
    "end": "650660"
  },
  {
    "text": "let's use a helper function a new helper function of C plus 20. that helps to",
    "start": "650660",
    "end": "656880"
  },
  {
    "text": "deal with ranges and there are types which has stood rangeless value type which will even deal with references for",
    "start": "656880",
    "end": "665160"
  },
  {
    "text": "that you need edify can be formulate this differently yes of",
    "start": "665160",
    "end": "671399"
  },
  {
    "text": "course everything you can form like in 1000 ways in C plus plus even simple examples so instead of doing that because this",
    "start": "671399",
    "end": "679380"
  },
  {
    "text": "requires that the type on the right the type of the value we'll put in has",
    "start": "679380",
    "end": "685079"
  },
  {
    "text": "the same type as the collection so that would mean we don't support support implicit type conversions",
    "start": "685079",
    "end": "691260"
  },
  {
    "text": "uh let's do something better let's use not has pushback let's use can pushback",
    "start": "691260",
    "end": "699899"
  },
  {
    "text": "can push back now takes two template parameters one is a collection one is a",
    "start": "699899",
    "end": "706019"
  },
  {
    "text": "template parameter the type of the value and um here we don't need any references",
    "start": "706019",
    "end": "711240"
  },
  {
    "text": "because we can directly formulate it what we want to have we want to have support that you can push back the value",
    "start": "711240",
    "end": "717540"
  },
  {
    "text": "into the collection please note again a requirement a constraint a concept is",
    "start": "717540",
    "end": "723420"
  },
  {
    "text": "not generated code so there's no need to declare the parameters in the required expression",
    "start": "723420",
    "end": "730140"
  },
  {
    "text": "with be a reference yeah it's fine to make them values",
    "start": "730140",
    "end": "735779"
  },
  {
    "text": "because nothing this is only to clarify whether things should other things should compile",
    "start": "735779",
    "end": "743180"
  },
  {
    "text": "good again if you if you if you really like to you to use Auto you can do it that",
    "start": "744839",
    "end": "751680"
  },
  {
    "text": "way you can also put the requires Clause after or at the end of a declaration by",
    "start": "751680",
    "end": "757740"
  },
  {
    "text": "the way this even works for member functions in class templates",
    "start": "757740",
    "end": "763700"
  },
  {
    "text": "and that way here you can say give me the type of the collection give me the type of the value",
    "start": "765180",
    "end": "770820"
  },
  {
    "text": "we already have names for them so we pass them over and formulate this thing",
    "start": "770820",
    "end": "776820"
  },
  {
    "text": "we can formulate this thing with with other constraints which we um add",
    "start": "776820",
    "end": "782160"
  },
  {
    "text": "by combining and also in the requires clause",
    "start": "782160",
    "end": "787320"
  },
  {
    "text": "different ways to formal light requirements perform like constraints I should say but also different ways to form light",
    "start": "787320",
    "end": "793860"
  },
  {
    "text": "requirements and Concepts so forget that don't do that",
    "start": "793860",
    "end": "800579"
  },
  {
    "text": "don't do that this is a bad example",
    "start": "800579",
    "end": "806540"
  },
  {
    "text": "you should not use the concept for each and every member function you use in your code",
    "start": "806760",
    "end": "814380"
  },
  {
    "text": "if we would do that we would have requirements for big functions where we",
    "start": "814380",
    "end": "819480"
  },
  {
    "text": "have oh does it support pushback does it support size does it support and the star operator does it support that the",
    "start": "819480",
    "end": "827040"
  },
  {
    "text": "star operator Returns the Boolean value and so on you would uh just more or less",
    "start": "827040",
    "end": "832200"
  },
  {
    "text": "mirror all the statements in your requires class so as a constraint",
    "start": "832200",
    "end": "838440"
  },
  {
    "text": "so don't do that just",
    "start": "838440",
    "end": "843600"
  },
  {
    "text": "create more cost grained concept",
    "start": "843600",
    "end": "849019"
  },
  {
    "text": "we've done that in the C plus standard for you so you can benefit from that we will see that in a moment but as I said",
    "start": "849060",
    "end": "855180"
  },
  {
    "text": "do do that what you see here but this is so cool",
    "start": "855180",
    "end": "861120"
  },
  {
    "text": "if pushback is supported that's called pushback otherwise let's call insert",
    "start": "861120",
    "end": "867120"
  },
  {
    "text": "so do we have an alternative yes",
    "start": "867120",
    "end": "871800"
  },
  {
    "text": "formulate the requirement at Hawk where you need the constraint either as a constraint this is funny this is",
    "start": "872820",
    "end": "880320"
  },
  {
    "text": "requires requires in your code but please remember what you learned One",
    "start": "880320",
    "end": "885720"
  },
  {
    "text": "requirement is for class for an expression for a defines a requirement that the inner",
    "start": "885720",
    "end": "893040"
  },
  {
    "text": "requires us to formulate the requirement and the other request is to say I want",
    "start": "893040",
    "end": "899519"
  },
  {
    "text": "to have this as a constraint for my code",
    "start": "899519",
    "end": "904160"
  },
  {
    "text": "now it makes sense you just read the example you say we are all silly no we are not",
    "start": "904620",
    "end": "911579"
  },
  {
    "text": "and we like to reuse keywords for different things because each new keyword breaks code",
    "start": "911579",
    "end": "919399"
  },
  {
    "text": "is there a better way to do that well remember that the signature is the",
    "start": "921120",
    "end": "927480"
  },
  {
    "text": "same for both ads so the difference is only in the body of the function",
    "start": "927480",
    "end": "933079"
  },
  {
    "text": "so um there are some rules the a rule is a",
    "start": "933079",
    "end": "938339"
  },
  {
    "text": "requirement is a Boolean value a compile time Boolean value",
    "start": "938339",
    "end": "944820"
  },
  {
    "text": "a constraint checks for compile time Boolean value a concept is a name for compile time Boolean value you can use",
    "start": "944820",
    "end": "951660"
  },
  {
    "text": "it like a cons expert Google so we can do the following",
    "start": "951660",
    "end": "958560"
  },
  {
    "text": "we have a compiled time is so in the body we say if the pushback is",
    "start": "958560",
    "end": "964920"
  },
  {
    "text": "supported call it otherwise call insert nice",
    "start": "964920",
    "end": "970139"
  },
  {
    "text": "it's almost reflection not really but it's okay I know how often I have I want",
    "start": "970139",
    "end": "978240"
  },
  {
    "text": "things like that good",
    "start": "978240",
    "end": "984440"
  },
  {
    "text": "um yeah oh let's let's make something wrong let's pass a string",
    "start": "984480",
    "end": "993380"
  },
  {
    "text": "oh let's declare that the elements are strings and passing it you see the arrow on the bottom",
    "start": "995940",
    "end": "1002779"
  },
  {
    "text": "so you have so far seen that concepts are used um to decide which function should be",
    "start": "1002779",
    "end": "1009620"
  },
  {
    "text": "used to fix overload resolution whether a function is available but there's another reason we have that and that is",
    "start": "1009620",
    "end": "1016579"
  },
  {
    "text": "to make error messages more readable because you find problems in your code",
    "start": "1016579",
    "end": "1024380"
  },
  {
    "text": "when you call it not deep in the Deep darkness of your code so um if you do things like that you get",
    "start": "1024380",
    "end": "1033438"
  },
  {
    "text": "a crazy Arrow message yeah there's something broken well oh yeah in line 500 or 600 of the",
    "start": "1033439",
    "end": "1042678"
  },
  {
    "text": "implementation of a set we have a problem",
    "start": "1042679",
    "end": "1047678"
  },
  {
    "text": "um we have no known conversion from constant to const yeah",
    "start": "1047720",
    "end": "1053480"
  },
  {
    "text": "okay so yeah I I'm pretty sure you have seen",
    "start": "1053480",
    "end": "1059480"
  },
  {
    "text": "error messages when using templates which are not understandable or what you understand once you have",
    "start": "1059480",
    "end": "1065380"
  },
  {
    "text": "once you have found the error it should be the other way around",
    "start": "1065380",
    "end": "1070960"
  },
  {
    "text": "um so can we can we benefit from that",
    "start": "1071419",
    "end": "1077840"
  },
  {
    "text": "well here's the error message sorry I'm always a little bit behind because I I see the next slide here and I forget",
    "start": "1077840",
    "end": "1085340"
  },
  {
    "text": "that you not see the next slide yet okay",
    "start": "1085340",
    "end": "1091960"
  },
  {
    "text": "good yes final light constraint",
    "start": "1093620",
    "end": "1099799"
  },
  {
    "text": "formulate the constraint that the value we want to insert with pushback or",
    "start": "1099799",
    "end": "1105380"
  },
  {
    "text": "insert is convertible to the element type of the container that's it and here you use a standard",
    "start": "1105380",
    "end": "1111860"
  },
  {
    "text": "concept by the way we also use here cut style of the concept to say the collection has to",
    "start": "1111860",
    "end": "1117080"
  },
  {
    "text": "be arranged so that we don't call it for an end and that we get early error messages",
    "start": "1117080",
    "end": "1122660"
  },
  {
    "text": "here here in the Declaration in the Declaration we see that some precondition is broken",
    "start": "1122660",
    "end": "1128960"
  },
  {
    "text": "and so the error message could now be something like this yes there's a problem with that but the candidate",
    "start": "1128960",
    "end": "1136580"
  },
  {
    "text": "template is ignored because the constraint is not satisfied and the constraint that is not satisfied is that",
    "start": "1136580",
    "end": "1142400"
  },
  {
    "text": "convertible to um evaluated to false by the way compilers are working on good",
    "start": "1142400",
    "end": "1149360"
  },
  {
    "text": "error messages with broken constraints currently in visual C plus the messages a constraint is broken",
    "start": "1149360",
    "end": "1158019"
  },
  {
    "text": "you have no idea which you have no idea why they are working on that",
    "start": "1158120",
    "end": "1164419"
  },
  {
    "text": "so if you see this video later than in summer 2022 it's not a",
    "start": "1164419",
    "end": "1171320"
  },
  {
    "text": "problem anymore I promise I hope I can promise",
    "start": "1171320",
    "end": "1176260"
  },
  {
    "text": "good you might even find some details good okay what time is it",
    "start": "1177679",
    "end": "1183380"
  },
  {
    "text": "good favorite examples let's now use these examples so",
    "start": "1183380",
    "end": "1188840"
  },
  {
    "text": "um now let's use this benefit from that in ranges and Views a library we can use",
    "start": "1188840",
    "end": "1195620"
  },
  {
    "text": "um to uh that uses Concepts a lot and here's what the library can do",
    "start": "1195620",
    "end": "1203240"
  },
  {
    "text": "instead of calling sort for begin and end you can now do what you have dreamed",
    "start": "1203240",
    "end": "1209299"
  },
  {
    "text": "about for 20 years you can call past your collection as a whole to sort",
    "start": "1209299",
    "end": "1215840"
  },
  {
    "text": "and unfortunately you need a different namespace for some conflicts we have",
    "start": "1215840",
    "end": "1221000"
  },
  {
    "text": "yeah back for compatibility as a nightmare and it gets worse and worse and um",
    "start": "1221000",
    "end": "1226940"
  },
  {
    "text": "yeah but now um you can pass the thing as a whole and the good thing is",
    "start": "1226940",
    "end": "1233120"
  },
  {
    "text": "this library that now takes the range as a whole uses Concepts",
    "start": "1233120",
    "end": "1239480"
  },
  {
    "text": "so the Declaration of this sort says for example the range must be a random",
    "start": "1239480",
    "end": "1245000"
  },
  {
    "text": "access range so a range where we can jump back and forth to modify the elements and that uh the",
    "start": "1245000",
    "end": "1253460"
  },
  {
    "text": "iterators of this type have to support sortability however this is supported for example",
    "start": "1253460",
    "end": "1260299"
  },
  {
    "text": "less than has to be so oh they the the Sorting has to be able to be used for",
    "start": "1260299",
    "end": "1266419"
  },
  {
    "text": "these elements so you get here again better error messages when you now use",
    "start": "1266419",
    "end": "1273679"
  },
  {
    "text": "this libraries",
    "start": "1273679",
    "end": "1278259"
  },
  {
    "text": "so let's Implement print takes an input range we want to iterate once of all the elements that's the way",
    "start": "1279440",
    "end": "1286760"
  },
  {
    "text": "we can write it now we can pass a vector we can print the collection awesome",
    "start": "1286760",
    "end": "1293679"
  },
  {
    "text": "well here it is here's a code",
    "start": "1294620",
    "end": "1300200"
  },
  {
    "text": "it's an input range declared",
    "start": "1300200",
    "end": "1305480"
  },
  {
    "text": "with input range Auto Vector print call and if you want to",
    "start": "1305480",
    "end": "1311299"
  },
  {
    "text": "pass a set of end it works",
    "start": "1311299",
    "end": "1315759"
  },
  {
    "text": "with Rangers there comes another nice feature which is views",
    "start": "1316820",
    "end": "1322159"
  },
  {
    "text": "so that's the part now to deal with a part of a collection or",
    "start": "1322159",
    "end": "1327919"
  },
  {
    "text": "with the elements or the values transferred somehow",
    "start": "1327919",
    "end": "1333380"
  },
  {
    "text": "so you can say for example um let's print only the first three elements of this",
    "start": "1333380",
    "end": "1339320"
  },
  {
    "text": "collection we have a view for that well we have a function that creates a view for that",
    "start": "1339320",
    "end": "1345020"
  },
  {
    "text": "that says just go to the collection take the first three elements that's it",
    "start": "1345020",
    "end": "1350840"
  },
  {
    "text": "and it works for both great there's an alternative syntax you will",
    "start": "1350840",
    "end": "1357799"
  },
  {
    "text": "like it it looks like that",
    "start": "1357799",
    "end": "1362980"
  },
  {
    "text": "take the collection pipe it into a take View so let the take view filters the",
    "start": "1363799",
    "end": "1371299"
  },
  {
    "text": "elements that only the first three of them are taken and it works for both",
    "start": "1371299",
    "end": "1376700"
  },
  {
    "text": "awesome a lot of filters we have",
    "start": "1376700",
    "end": "1381740"
  },
  {
    "text": "we can filter and not just drop some elements but elements that",
    "start": "1381740",
    "end": "1388159"
  },
  {
    "text": "don't fulfill a certain Criterion or we filter them out or you can do that take",
    "start": "1388159",
    "end": "1394100"
  },
  {
    "text": "the first three elements take the value we then have transform it to convert it",
    "start": "1394100",
    "end": "1399860"
  },
  {
    "text": "to a string append an s and that should be printed to a generic print function",
    "start": "1399860",
    "end": "1406940"
  },
  {
    "text": "nice who has done that already we've seen",
    "start": "1406940",
    "end": "1412400"
  },
  {
    "text": "that already oh only a few yeah",
    "start": "1412400",
    "end": "1417879"
  },
  {
    "text": "we even support Sentinels Sentinels is iterators and",
    "start": "1421640",
    "end": "1427159"
  },
  {
    "text": "iterators and these in the end iterators can have different types now so you can do",
    "start": "1427159",
    "end": "1433580"
  },
  {
    "text": "something like this you can say um look at that I have a vector",
    "start": "1433580",
    "end": "1439100"
  },
  {
    "text": "and I want to print all elements from the first from the",
    "start": "1439100",
    "end": "1444320"
  },
  {
    "text": "second element so I initialize this is also a view a sub ring with the second the position of the",
    "start": "1444320",
    "end": "1451039"
  },
  {
    "text": "second element and the end should be an end value the end value is -1",
    "start": "1451039",
    "end": "1457539"
  },
  {
    "text": "what the hell is that well you can now print it and you get these",
    "start": "1459080",
    "end": "1464659"
  },
  {
    "text": "elements you can pass this to take and transform and you get these elements up",
    "start": "1464659",
    "end": "1471140"
  },
  {
    "text": "to minus uh one as as printed",
    "start": "1471140",
    "end": "1477020"
  },
  {
    "text": "the output is wrong is it there's an there's an 11 missing",
    "start": "1477020",
    "end": "1485059"
  },
  {
    "text": "back on the slide so 11s is missing",
    "start": "1485059",
    "end": "1491860"
  },
  {
    "text": "um what is end element this is end element this is all you need yeah",
    "start": "1493580",
    "end": "1501520"
  },
  {
    "text": "oh it's not missing because of the takes three yeah you're right thank you yeah I'm I'm Ill yeah thank you I just wanted to",
    "start": "1502880",
    "end": "1510980"
  },
  {
    "text": "find out whether somebody sees it",
    "start": "1510980",
    "end": "1514780"
  },
  {
    "text": "um are you so end value um",
    "start": "1516500",
    "end": "1522260"
  },
  {
    "text": "has a surprising short implementation it's a it's an end value uh where we we",
    "start": "1522260",
    "end": "1528919"
  },
  {
    "text": "can pass a value that ends the iteration and it has only a comparison operator so",
    "start": "1528919",
    "end": "1536659"
  },
  {
    "text": "we can compare it with and the thing that is a parameter is a is a iterator",
    "start": "1536659",
    "end": "1541880"
  },
  {
    "text": "so we can compare with the parameter by looking at the value of this iterator",
    "start": "1541880",
    "end": "1548120"
  },
  {
    "text": "and looking at our value and if both are equal then yes",
    "start": "1548120",
    "end": "1554419"
  },
  {
    "text": "we have a value equal to what we were initialized with well what we were declared with",
    "start": "1554419",
    "end": "1560600"
  },
  {
    "text": "because our value is declared part of it's a template parameter",
    "start": "1560600",
    "end": "1566059"
  },
  {
    "text": "so that is enough why is that enough well look at how the range space follow",
    "start": "1566059",
    "end": "1572059"
  },
  {
    "text": "works the range space follow initializes to begin with what we passed initializes",
    "start": "1572059",
    "end": "1578360"
  },
  {
    "text": "the end with what we pass these two things have different types and then it iterates from begin to end",
    "start": "1578360",
    "end": "1585740"
  },
  {
    "text": "and it always compares the current position with the end against the end but using not equals hey we did we",
    "start": "1585740",
    "end": "1593360"
  },
  {
    "text": "didn't Define not equal we only defined equally equal and the Order of the operands is also wrong",
    "start": "1593360",
    "end": "1599299"
  },
  {
    "text": "but that's a new rule in C plus plus 20 and the C plus 20 rule says if a",
    "start": "1599299",
    "end": "1605000"
  },
  {
    "text": "compiler finds an expression like that plus not equal end it will rewrite and it it cannot resolve",
    "start": "1605000",
    "end": "1612860"
  },
  {
    "text": "it then it the call will be Rewritten now so we will use equal equal maybe with",
    "start": "1612860",
    "end": "1620659"
  },
  {
    "text": "the opposite order of the uh operands and then apply not to that and that's why this compiles",
    "start": "1620659",
    "end": "1628159"
  },
  {
    "text": "so he had another feature of C plus plus 11 at 20.",
    "start": "1628159",
    "end": "1635620"
  },
  {
    "text": "oh a little bit of a side note um I used auto here as when I declared n value",
    "start": "1635720",
    "end": "1644000"
  },
  {
    "text": "um and we have a new feature that is auto so template parameters cannot be data structures as long as they are",
    "start": "1644000",
    "end": "1650720"
  },
  {
    "text": "public so we can say okay here um let's use a coordinate a data type",
    "start": "1650720",
    "end": "1656419"
  },
  {
    "text": "that has X Y and Z coordinate and let's create a sub-range that goes from begin",
    "start": "1656419",
    "end": "1661460"
  },
  {
    "text": "to the end value with which is the default initialize coordinate so with the value of zero zero zero and that",
    "start": "1661460",
    "end": "1667940"
  },
  {
    "text": "works fine",
    "start": "1667940",
    "end": "1670419"
  },
  {
    "text": "enough enough of this",
    "start": "1674059",
    "end": "1677860"
  },
  {
    "text": "okay nope I want to skip something so everything",
    "start": "1691580",
    "end": "1697820"
  },
  {
    "text": "is great isn't it great [Music]",
    "start": "1697820",
    "end": "1705190"
  },
  {
    "text": "we can use begin and end of different type we can use the novel containers we",
    "start": "1705320",
    "end": "1710600"
  },
  {
    "text": "can print them out we can take the first three elements uh and yes there are",
    "start": "1710600",
    "end": "1716960"
  },
  {
    "text": "other views we can drop the first three elements of course and we can drop the first three elements of a set of a list",
    "start": "1716960",
    "end": "1724039"
  },
  {
    "text": "and oh",
    "start": "1724039",
    "end": "1728500"
  },
  {
    "text": "what this does not compile",
    "start": "1729140",
    "end": "1735039"
  },
  {
    "text": "what the hell is going on here why does this not compile we have 4",
    "start": "1736220",
    "end": "1742640"
  },
  {
    "text": "million programmers two millions of them will run into this trap this it works as design",
    "start": "1742640",
    "end": "1751299"
  },
  {
    "text": "I was one of the first",
    "start": "1754120",
    "end": "1757840"
  },
  {
    "text": "maybe I try this oh that works what so I can call drop",
    "start": "1764419",
    "end": "1771500"
  },
  {
    "text": "but I cannot call drop as a parameter to print",
    "start": "1771500",
    "end": "1777140"
  },
  {
    "text": "but I can call drop for different container",
    "start": "1777140",
    "end": "1781779"
  },
  {
    "text": "what the [ __ ] sorry in the US if you see that there",
    "start": "1783080",
    "end": "1789380"
  },
  {
    "text": "no it's not allowed to say that",
    "start": "1789380",
    "end": "1793240"
  },
  {
    "text": "that's the problem drop",
    "start": "1797899",
    "end": "1803360"
  },
  {
    "text": "has an implementation detail the implementation detail is caches began",
    "start": "1803360",
    "end": "1811480"
  },
  {
    "text": "if again may become expensive well begin for",
    "start": "1812240",
    "end": "1819200"
  },
  {
    "text": "a vector is not expensive well the beginning of the drop so drop has to ignore three elements so to",
    "start": "1819200",
    "end": "1827059"
  },
  {
    "text": "compute the begin of the drop yeah if the underlying range is a vector we jump",
    "start": "1827059",
    "end": "1832580"
  },
  {
    "text": "to the fourth element easy but if we have",
    "start": "1832580",
    "end": "1837860"
  },
  {
    "text": "something like a list we have to iterate over all the leading",
    "start": "1837860",
    "end": "1842960"
  },
  {
    "text": "elements oh that's expensive maybe maybe we need this view once again",
    "start": "1842960",
    "end": "1851659"
  },
  {
    "text": "well usually we do not but maybe we do then begin should not iterate once again",
    "start": "1851659",
    "end": "1861500"
  },
  {
    "text": "to the to the first element that is fits this View",
    "start": "1861500",
    "end": "1866600"
  },
  {
    "text": "so we can begin cash and begin means while we are",
    "start": "1866600",
    "end": "1871640"
  },
  {
    "text": "iterating we are modifying The View",
    "start": "1871640",
    "end": "1876799"
  },
  {
    "text": "so it cannot be const the problem is that print takes and",
    "start": "1876799",
    "end": "1882919"
  },
  {
    "text": "makes the view const because it declares a const reference",
    "start": "1882919",
    "end": "1889720"
  },
  {
    "text": "okay what can we do",
    "start": "1889820",
    "end": "1895640"
  },
  {
    "text": "I want to pass it by reference so well if you um remove cons you can no longer",
    "start": "1895640",
    "end": "1902360"
  },
  {
    "text": "pass temporary objects anymore but we have another thing which is this",
    "start": "1902360",
    "end": "1908779"
  },
  {
    "text": "thing out to to ampersands or template parameter to Ampersand which is called a",
    "start": "1908779",
    "end": "1913880"
  },
  {
    "text": "universal reference because it can universally refer to um different L",
    "start": "1913880",
    "end": "1920659"
  },
  {
    "text": "values and R values temporary objects and not in temporary objects objects with a name and it does not make the",
    "start": "1920659",
    "end": "1927440"
  },
  {
    "text": "arguments const by the way the standard committee decided to name this forwarding reference which was a huge",
    "start": "1927440",
    "end": "1933500"
  },
  {
    "text": "mistake because they thought it's only for forwarding in move semantics but",
    "start": "1933500",
    "end": "1939620"
  },
  {
    "text": "this is not for forwarding this is because we need a reference that can",
    "start": "1939620",
    "end": "1945200"
  },
  {
    "text": "universally refer to everything the term Universal reference was coined by Scott Myers",
    "start": "1945200",
    "end": "1950840"
  },
  {
    "text": "I have no idea why the standard committee was not happy with that term it was better than forwarding reference",
    "start": "1950840",
    "end": "1957020"
  },
  {
    "text": "sometimes things like that happen okay so this can universally refer to",
    "start": "1957020",
    "end": "1963919"
  },
  {
    "text": "everything not making it constant suddenly it compacts yay so um that means for all your generic",
    "start": "1963919",
    "end": "1971539"
  },
  {
    "text": "code if you want to pass containers and the end views",
    "start": "1971539",
    "end": "1976880"
  },
  {
    "text": "switch from const reference constellar reference counts with one Ampersand to",
    "start": "1976880",
    "end": "1982279"
  },
  {
    "text": "cons to non-cons and two Ampersand easy just take all your code and bake this",
    "start": "1982279",
    "end": "1987620"
  },
  {
    "text": "adoption that's the question is the view expensive to copy",
    "start": "1987620",
    "end": "1994460"
  },
  {
    "text": "oh we could have passed it by value and what is with the first two statements",
    "start": "1994460",
    "end": "1999700"
  },
  {
    "text": "I want to use this function to print containers so if I want to pass a container",
    "start": "1999919",
    "end": "2007018"
  },
  {
    "text": "I have a problem so um",
    "start": "2007419",
    "end": "2012940"
  },
  {
    "text": "well there's a caveat here if you do that if you make this fix because they cache",
    "start": "2012940",
    "end": "2020679"
  },
  {
    "text": "that means that and this caching of begin is not threat safe",
    "start": "2020679",
    "end": "2027700"
  },
  {
    "text": "if this function would use multiple threats to iterate over the elements",
    "start": "2027700",
    "end": "2033159"
  },
  {
    "text": "don't do that",
    "start": "2033159",
    "end": "2036059"
  },
  {
    "text": "awesome design I think is it worth it no it's not worth it it's just about caching and most of the times we know",
    "start": "2040600",
    "end": "2047260"
  },
  {
    "text": "need to Cache the begin because we use review only once foreign",
    "start": "2047260",
    "end": "2053398"
  },
  {
    "text": "so yes we can use by value you propose that but that would make calling print",
    "start": "2054520",
    "end": "2060760"
  },
  {
    "text": "for containers expensive there's another workaround the workaround is um require that it's an it is a cheap range a view",
    "start": "2060760",
    "end": "2071560"
  },
  {
    "text": "so and if you do that um but then you can no longer pass a container well there's a way to make a",
    "start": "2071560",
    "end": "2078339"
  },
  {
    "text": "container a reference to a container which is also a view we have which says take all the",
    "start": "2078339",
    "end": "2085839"
  },
  {
    "text": "elements of this container and give some reference semantics and that is here though that is what you would have to do",
    "start": "2085839",
    "end": "2092080"
  },
  {
    "text": "then choose your best bad choice",
    "start": "2092080",
    "end": "2098099"
  },
  {
    "text": "I don't think this is good design we come back to this in a in a moment",
    "start": "2099460",
    "end": "2106900"
  },
  {
    "text": "let's talk about threats multi-threading different topic so this was one example we come back",
    "start": "2106900",
    "end": "2115000"
  },
  {
    "text": "um let's randomly initially eyes some values that are in a vector",
    "start": "2115000",
    "end": "2121300"
  },
  {
    "text": "so let's write this function um it takes all the values as a template",
    "start": "2121300",
    "end": "2128079"
  },
  {
    "text": "parameter so this is code before C plus plus 20. we have to initialize a random device to have random numbers and then",
    "start": "2128079",
    "end": "2135640"
  },
  {
    "text": "we iterate all the values and we add a random value to them awesome will work",
    "start": "2135640",
    "end": "2142960"
  },
  {
    "text": "so what we can improve now in C plus 20 is a few things first of all we can say this code does not make sense if you can",
    "start": "2142960",
    "end": "2150760"
  },
  {
    "text": "only iterate once over this range because you need to do it twice because",
    "start": "2150760",
    "end": "2155800"
  },
  {
    "text": "you want to deal with the values in the vector then so let's declare that the requirement is that what you pass here",
    "start": "2155800",
    "end": "2163240"
  },
  {
    "text": "as an argument is a range you can iterate over multiple times which is a forward break",
    "start": "2163240",
    "end": "2169119"
  },
  {
    "text": "then we can also say there's a requirement that the values are integral because we",
    "start": "2169119",
    "end": "2176560"
  },
  {
    "text": "compute an integral random value which we add so um that is a better requirement unless",
    "start": "2176560",
    "end": "2182320"
  },
  {
    "text": "so we avoid that error messages in the middle of this code",
    "start": "2182320",
    "end": "2187960"
  },
  {
    "text": "good let's use multiple threads",
    "start": "2187960",
    "end": "2196200"
  },
  {
    "text": "okay the first thing we do we make this",
    "start": "2196900",
    "end": "2202480"
  },
  {
    "text": "iteration Alanda a helper function locally declared so we",
    "start": "2202480",
    "end": "2209619"
  },
  {
    "text": "use a Lambda then let's create a vector of threads",
    "start": "2209619",
    "end": "2214660"
  },
  {
    "text": "and each thread calls this Lambda you push it into the vector",
    "start": "2214660",
    "end": "2219760"
  },
  {
    "text": "and yeah that's it using stood thread which we have standardized in C plus 11.",
    "start": "2219760",
    "end": "2225400"
  },
  {
    "text": "well almost everybody of you if they have views to thread know that you can't do it that way there are several issues",
    "start": "2225400",
    "end": "2232180"
  },
  {
    "text": "here the most important issue is you get a column without calling join",
    "start": "2232180",
    "end": "2237760"
  },
  {
    "text": "before the destructor of the threats is called so you have at the end to add a",
    "start": "2237760",
    "end": "2243400"
  },
  {
    "text": "loop that iterates over all the threads and waits for the end",
    "start": "2243400",
    "end": "2248099"
  },
  {
    "text": "that by the way is a violation of the raii principle that we should automatically clean",
    "start": "2248859",
    "end": "2255460"
  },
  {
    "text": "things up in the destructor for some good reason but not the perfect",
    "start": "2255460",
    "end": "2261700"
  },
  {
    "text": "reason so the problem is this code is still broken for a couple of reasons one is if",
    "start": "2261700",
    "end": "2269740"
  },
  {
    "text": "there's an exception in the middle we will not call come to the point where we call join for each",
    "start": "2269740",
    "end": "2275500"
  },
  {
    "text": "threat so this will have a quarter then it might be better to be able if",
    "start": "2275500",
    "end": "2282640"
  },
  {
    "text": "there is an exception to stop all these threats maybe they run a long time and then of course the worst thing is",
    "start": "2282640",
    "end": "2291099"
  },
  {
    "text": "you can't write hey we have multiple threats that modify the same elements in the past collection",
    "start": "2291099",
    "end": "2298540"
  },
  {
    "text": "that don't do that don't do that so let's fix this up",
    "start": "2298540",
    "end": "2306359"
  },
  {
    "text": "first thing is use J thread that's a new thread type in C plus 20 J stands for",
    "start": "2308740",
    "end": "2314500"
  },
  {
    "text": "joining the destructor will automatically join if you haven't done it yet",
    "start": "2314500",
    "end": "2322720"
  },
  {
    "text": "so that means this code has become more exception safe but there's more J thread has an option",
    "start": "2322720",
    "end": "2331480"
  },
  {
    "text": "um you can in your startup function or Lambda add an parameter which is called",
    "start": "2331480",
    "end": "2338619"
  },
  {
    "text": "a stop token and if you do that then the destructor will signal you stop",
    "start": "2338619",
    "end": "2346540"
  },
  {
    "text": "and you can process that in your code you see in the loop where we iterate over the values before we do something",
    "start": "2346540",
    "end": "2353500"
  },
  {
    "text": "we check our it was a stop requested and if there is we stop processing",
    "start": "2353500",
    "end": "2359800"
  },
  {
    "text": "because the problem is if we have an exception we won't have immediate reaction",
    "start": "2359800",
    "end": "2366640"
  },
  {
    "text": "and that is done now with this code because automatically the distractor",
    "start": "2366640",
    "end": "2371859"
  },
  {
    "text": "will not only call join it will also be fought called join called request stop which you can also",
    "start": "2371859",
    "end": "2379420"
  },
  {
    "text": "do manually by the way so that makes your code safer",
    "start": "2379420",
    "end": "2386800"
  },
  {
    "text": "but we still have concurrent rights to the elements how do we fix that or do we",
    "start": "2386800",
    "end": "2392079"
  },
  {
    "text": "have to introduce new taxes Etc oh no that's something",
    "start": "2392079",
    "end": "2397540"
  },
  {
    "text": "nice in C plus 20. introduce a temporary Atomic make your",
    "start": "2397540",
    "end": "2404740"
  },
  {
    "text": "values temporarily Atomic by using what we call an atomic reference",
    "start": "2404740",
    "end": "2411000"
  },
  {
    "text": "so here in this context this is a context where we need",
    "start": "2411460",
    "end": "2416859"
  },
  {
    "text": "atomicity of the values when we access them we make the values Atomic before we",
    "start": "2416859",
    "end": "2424420"
  },
  {
    "text": "modify them and after that um yeah and all threads all a concurrent",
    "start": "2424420",
    "end": "2432099"
  },
  {
    "text": "access has to do that otherwise it does not work but it does not mean that the values are Atomic in general it's just",
    "start": "2432099",
    "end": "2439420"
  },
  {
    "text": "temporarily atomic nice I think so everything is fine",
    "start": "2439420",
    "end": "2447820"
  },
  {
    "text": "what time is it okay that was second example we come back",
    "start": "2447820",
    "end": "2454740"
  },
  {
    "text": "calendar is in time zones we have the Chrono Library since C plus plus 11.",
    "start": "2458200",
    "end": "2465420"
  },
  {
    "text": "and now we have added some extensions most extensions are about dates",
    "start": "2465420",
    "end": "2471040"
  },
  {
    "text": "calendars weekdays time zones Etc so the next higher level of time points and",
    "start": "2471040",
    "end": "2477520"
  },
  {
    "text": "durations so here's the code you can do",
    "start": "2477520",
    "end": "2483400"
  },
  {
    "text": "let's initialize the first day with the 31st of January in 2021",
    "start": "2483400",
    "end": "2489820"
  },
  {
    "text": "and the last day and these are all different types this is using the operator slash to combine for example a",
    "start": "2489820",
    "end": "2496119"
  },
  {
    "text": "year with an end and you but you get out as a year month and if you then combine",
    "start": "2496119",
    "end": "2502180"
  },
  {
    "text": "it with an end you get a year month day so it's a fully typed system here that makes sure that you don't do",
    "start": "2502180",
    "end": "2509500"
  },
  {
    "text": "something not useful and the same as with the last day here",
    "start": "2509500",
    "end": "2514720"
  },
  {
    "text": "and then that we can iterate from first date to last day incrementing the month",
    "start": "2514720",
    "end": "2520060"
  },
  {
    "text": "and let's have a party oh this is the output",
    "start": "2520060",
    "end": "2526780"
  },
  {
    "text": "oh there's no party uh because um",
    "start": "2526780",
    "end": "2532300"
  },
  {
    "text": "um February 31st that's not a valid date we blindly add increment the month",
    "start": "2532300",
    "end": "2539500"
  },
  {
    "text": "that's how for year month day adding a month works",
    "start": "2539500",
    "end": "2547060"
  },
  {
    "text": "so um can we do it better yes well first of all",
    "start": "2547060",
    "end": "2552300"
  },
  {
    "text": "you can write code that decides what to do so",
    "start": "2552300",
    "end": "2557800"
  },
  {
    "text": "um if the data is not okay if the data is not valid this Library supports that you say oh in that case let's take the",
    "start": "2557800",
    "end": "2564160"
  },
  {
    "text": "first of the next one the first day of the next month here's how you program that",
    "start": "2564160",
    "end": "2569920"
  },
  {
    "text": "um the else part take the year of the month",
    "start": "2569920",
    "end": "2575200"
  },
  {
    "text": "and but use one and increment the whole date by one month and let's have the",
    "start": "2575200",
    "end": "2581859"
  },
  {
    "text": "party then there good there's another way to do it",
    "start": "2581859",
    "end": "2587740"
  },
  {
    "text": "let's iterate from the last day of January 21",
    "start": "2587740",
    "end": "2594960"
  },
  {
    "text": "so that's a different type that's not a year month day that's a year month day last",
    "start": "2595119",
    "end": "2601980"
  },
  {
    "text": "so in that case the logic is if we then increment things",
    "start": "2602260",
    "end": "2607660"
  },
  {
    "text": "um then the month we increment to the last day of the next month and the next month",
    "start": "2607660",
    "end": "2613359"
  },
  {
    "text": "so now we have that easier oh and you don't like the output format",
    "start": "2613359",
    "end": "2620319"
  },
  {
    "text": "well we have a formatting Library use it that way",
    "start": "2620319",
    "end": "2626220"
  },
  {
    "text": "if you want you can apply time zones so you can say assume this is a local time",
    "start": "2628839",
    "end": "2634720"
  },
  {
    "text": "local date or with local time at um 18 hours and 30 minutes use account time",
    "start": "2634720",
    "end": "2641079"
  },
  {
    "text": "zone to print it out and maybe invite the people in LA and so apply this to",
    "start": "2641079",
    "end": "2647680"
  },
  {
    "text": "another time zone and print it out and you have but you see what you have",
    "start": "2647680",
    "end": "2655200"
  },
  {
    "text": "could I like this Library yeah I didn't show you all the traps",
    "start": "2656260",
    "end": "2661900"
  },
  {
    "text": "that no not traps pitfalls there are a few things you have to know if you use it but in principle this is a great",
    "start": "2661900",
    "end": "2668800"
  },
  {
    "text": "Library Howard Hina the designer of Chrono it's an awesome guy hard",
    "start": "2668800",
    "end": "2676318"
  },
  {
    "text": "what time is it okay let's combine everything that was that's",
    "start": "2677619",
    "end": "2683140"
  },
  {
    "text": "nice let's combine everything so Concepts",
    "start": "2683140",
    "end": "2691078"
  },
  {
    "text": "Rangers views oh the Chrono Library oh multiple",
    "start": "2691119",
    "end": "2696280"
  },
  {
    "text": "threads using J thread and atomic references",
    "start": "2696280",
    "end": "2702400"
  },
  {
    "text": "let's combine everything",
    "start": "2702400",
    "end": "2705359"
  },
  {
    "text": "so at the end this is a talk about one about the favorite C plus 20 example I",
    "start": "2708160",
    "end": "2714880"
  },
  {
    "text": "have not the multiple",
    "start": "2714880",
    "end": "2718859"
  },
  {
    "text": "foreign",
    "start": "2720160",
    "end": "2722760"
  },
  {
    "text": "a minute you remember",
    "start": "2725700",
    "end": "2730680"
  },
  {
    "text": "so we take a forward range we require that the values are integral",
    "start": "2733200",
    "end": "2739359"
  },
  {
    "text": "uh um and then we have an init HIPAA function locally so it's a it's a",
    "start": "2739359",
    "end": "2747640"
  },
  {
    "text": "Lambda for um I don't have enough size on this slide so that's DOTA dot for some",
    "start": "2747640",
    "end": "2753460"
  },
  {
    "text": "so the code that initializes a random number generator because multiple threats use that we use",
    "start": "2753460",
    "end": "2760839"
  },
  {
    "text": "Atomic references when we apply our modification and then we use this",
    "start": "2760839",
    "end": "2766480"
  },
  {
    "text": "initialization in a loop that iterates over multiple threads",
    "start": "2766480",
    "end": "2772480"
  },
  {
    "text": "no join is necessary at the end once all the threads are done we call",
    "start": "2772480",
    "end": "2777640"
  },
  {
    "text": "the destructors and they will call join and that's it",
    "start": "2777640",
    "end": "2782400"
  },
  {
    "text": "whoa let's create a map and in this map",
    "start": "2785920",
    "end": "2791079"
  },
  {
    "text": "we have dates so year month day and",
    "start": "2791079",
    "end": "2796599"
  },
  {
    "text": "um numbers how many items did we sell",
    "start": "2796599",
    "end": "2802359"
  },
  {
    "text": "that day whatever this number means how many visitors did we have in our",
    "start": "2802359",
    "end": "2809079"
  },
  {
    "text": "Cinema I don't know yeah",
    "start": "2809079",
    "end": "2814540"
  },
  {
    "text": "so your key it's a day your value is",
    "start": "2814540",
    "end": "2821500"
  },
  {
    "text": "the value that applies to this day makes sense huh I hope say yes please",
    "start": "2821500",
    "end": "2830440"
  },
  {
    "text": "good uh let's initialize it with some values oh yeah we learned how to do that",
    "start": "2830440",
    "end": "2836619"
  },
  {
    "text": "um let's start with the last day of January um and let's just take all the last days of the year so start with the last day",
    "start": "2836619",
    "end": "2844599"
  },
  {
    "text": "um up for all the whole year 2021 for each month and in place a new value",
    "start": "2844599",
    "end": "2852040"
  },
  {
    "text": "there with this date and the starting value is zero so let's initialize this",
    "start": "2852040",
    "end": "2859540"
  },
  {
    "text": "container and now yeah let's",
    "start": "2859540",
    "end": "2865599"
  },
  {
    "text": "more let's uh simulate selling so we call random in it",
    "start": "2865599",
    "end": "2871599"
  },
  {
    "text": "and there is a view that takes from a pair",
    "start": "2871599",
    "end": "2878079"
  },
  {
    "text": "the value so from a key value pair the value this",
    "start": "2878079",
    "end": "2883119"
  },
  {
    "text": "view is called values so we pipe the elements we take all the",
    "start": "2883119",
    "end": "2889240"
  },
  {
    "text": "elements we take only the values of them and but this is an error",
    "start": "2889240",
    "end": "2894760"
  },
  {
    "text": "oh too bad I thought this it would be have been cool if this would have worked",
    "start": "2894760",
    "end": "2903060"
  },
  {
    "text": "what is the Arrow by the way do they know that",
    "start": "2903520",
    "end": "2907740"
  },
  {
    "text": "I have 10 minutes left to see error laughs",
    "start": "2909700",
    "end": "2915220"
  },
  {
    "text": "yeah thank you um what is the era",
    "start": "2915280",
    "end": "2920940"
  },
  {
    "text": "so we don't wait 10 minutes um",
    "start": "2923020",
    "end": "2928599"
  },
  {
    "text": "this creates a temporary object and what we take it's a",
    "start": "2928599",
    "end": "2935380"
  },
  {
    "text": "Auto reference",
    "start": "2935380",
    "end": "2938460"
  },
  {
    "text": "it's not allowed to have a non-conscious reference refer to a temporary object or to an R value",
    "start": "2941680",
    "end": "2949900"
  },
  {
    "text": "but anyway we have",
    "start": "2949900",
    "end": "2953160"
  },
  {
    "text": "when we iterate about something that might be a view or container",
    "start": "2955119",
    "end": "2960339"
  },
  {
    "text": "yeah so make it a universal reference and it compines yes",
    "start": "2960339",
    "end": "2967980"
  },
  {
    "text": "so here's the output when we iterate only over the values again using",
    "start": "2968740",
    "end": "2974020"
  },
  {
    "text": "this um a view so yeah we can also now iterate over the",
    "start": "2974020",
    "end": "2979780"
  },
  {
    "text": "elements printing the date and the values here we only print the values that's okay using",
    "start": "2979780",
    "end": "2986560"
  },
  {
    "text": "this pipe semantics for views",
    "start": "2986560",
    "end": "2990420"
  },
  {
    "text": "let's um oh um can we skip the initialization of the first two elements",
    "start": "2995380",
    "end": "3002838"
  },
  {
    "text": "what do I have to do",
    "start": "3003420",
    "end": "3006500"
  },
  {
    "text": "hmm",
    "start": "3009780",
    "end": "3012319"
  },
  {
    "text": "drop yeah call drop",
    "start": "3015599",
    "end": "3020300"
  },
  {
    "text": "does it work yes awesome done thank you for your",
    "start": "3022140",
    "end": "3028380"
  },
  {
    "text": "attention oh wait a minute there was something",
    "start": "3028380",
    "end": "3032780"
  },
  {
    "text": "it works with components it runs",
    "start": "3036300",
    "end": "3041780"
  },
  {
    "text": "do you know what this is a runtime error",
    "start": "3042660",
    "end": "3048078"
  },
  {
    "text": "so who can tell me about the runtime error is",
    "start": "3049859",
    "end": "3055400"
  },
  {
    "text": "too many elements now",
    "start": "3060540",
    "end": "3063800"
  },
  {
    "text": "this is a runtime error and we did a designed",
    "start": "3066380",
    "end": "3071940"
  },
  {
    "text": "C plus was 20 that this kind of these errors can occur",
    "start": "3071940",
    "end": "3077520"
  },
  {
    "text": "those who think this is a good design say that they don't see a problem here but this",
    "start": "3077520",
    "end": "3084420"
  },
  {
    "text": "is this is the consequence that this code is broken",
    "start": "3084420",
    "end": "3090140"
  },
  {
    "text": "why Timo you know that you don't you have standardized that",
    "start": "3094260",
    "end": "3101599"
  },
  {
    "text": "yeah nobody in the salad committee knew what they were voting on when they accepted the proposal of Rangers and",
    "start": "3105119",
    "end": "3111599"
  },
  {
    "text": "views it's a view problem",
    "start": "3111599",
    "end": "3115700"
  },
  {
    "text": "what did I tell you about that there is a danger when you pass A View to a",
    "start": "3116640",
    "end": "3122700"
  },
  {
    "text": "universal reference don't use multiple threats then",
    "start": "3122700",
    "end": "3131300"
  },
  {
    "text": "why because the view is cache",
    "start": "3132839",
    "end": "3138740"
  },
  {
    "text": "so what you have here is you create a view",
    "start": "3138740",
    "end": "3143760"
  },
  {
    "text": "this view is passed to rent a minute",
    "start": "3143760",
    "end": "3149359"
  },
  {
    "text": "run a minute starts three threads five threads they",
    "start": "3149400",
    "end": "3155520"
  },
  {
    "text": "all call For the First Time begin and that is not threat safe",
    "start": "3155520",
    "end": "3161900"
  },
  {
    "text": "because it cash we cash the result of begin in The View",
    "start": "3162480",
    "end": "3167839"
  },
  {
    "text": "so this code is broken I have complained",
    "start": "3176040",
    "end": "3182940"
  },
  {
    "text": "the standard committee does not see my complaint",
    "start": "3182940",
    "end": "3187400"
  },
  {
    "text": "let's make a threat saved version well the problem is",
    "start": "3190859",
    "end": "3196099"
  },
  {
    "text": "you use a thread safe version of something if you know that there's a problem",
    "start": "3196380",
    "end": "3201480"
  },
  {
    "text": "ordinary programs will say yeah take Works drop Works where's the problem where is the problem",
    "start": "3201480",
    "end": "3208380"
  },
  {
    "text": "well we only have that because we cash begin",
    "start": "3208380",
    "end": "3213558"
  },
  {
    "text": "and the price is that code like this is broken and we almost never need a cash to begin",
    "start": "3214140",
    "end": "3221640"
  },
  {
    "text": "because we should use views at Hawk only",
    "start": "3221640",
    "end": "3226680"
  },
  {
    "text": "once if we would not cash",
    "start": "3226680",
    "end": "3233339"
  },
  {
    "text": "we could iterate overviews with const if we would not cash we would not have",
    "start": "3233339",
    "end": "3239160"
  },
  {
    "text": "undefined Behavior if somebody calls begin",
    "start": "3239160",
    "end": "3245040"
  },
  {
    "text": "why anotherly does that",
    "start": "3245040",
    "end": "3249079"
  },
  {
    "text": "is this the right design decision I think not so how can we fix this code",
    "start": "3250800",
    "end": "3257960"
  },
  {
    "text": "no I want to know something",
    "start": "3257960",
    "end": "3262460"
  },
  {
    "text": "my best advice to fix this code it's absolutely ridiculous",
    "start": "3267599",
    "end": "3275599"
  },
  {
    "text": "because the problem of multiple threats is inside",
    "start": "3276359",
    "end": "3281720"
  },
  {
    "text": "random in it make sure we don't have a problem there",
    "start": "3283020",
    "end": "3289020"
  },
  {
    "text": "how do we do that at the beginning of this function we",
    "start": "3289020",
    "end": "3295559"
  },
  {
    "text": "once call values dot begin [Laughter]",
    "start": "3295559",
    "end": "3301640"
  },
  {
    "text": "and we don't have a problem anymore",
    "start": "3301640",
    "end": "3305779"
  },
  {
    "text": "yeah there are a lot of people who hate me because it looks like I make the",
    "start": "3307740",
    "end": "3314220"
  },
  {
    "text": "standard committee look like a bunch of idiots no they're not",
    "start": "3314220",
    "end": "3321000"
  },
  {
    "text": "they are smart people but sometimes we make mistakes and the problem is I think",
    "start": "3321000",
    "end": "3326880"
  },
  {
    "text": "caching in views was the severe mistake and here you see why you might not agree",
    "start": "3326880",
    "end": "3334200"
  },
  {
    "text": "with me we can discuss that today or over over the sale in the evening I'm happy",
    "start": "3334200",
    "end": "3340680"
  },
  {
    "text": "to get some input but I fear that problems like this we will happen",
    "start": "3340680",
    "end": "3347339"
  },
  {
    "text": "I think this is not good design maybe not very likely",
    "start": "3347339",
    "end": "3353400"
  },
  {
    "text": "but I I see the price of caching and Views it's not worth",
    "start": "3353400",
    "end": "3359900"
  },
  {
    "text": "the benefit of caching begin and Views is not worth the price",
    "start": "3360300",
    "end": "3366540"
  },
  {
    "text": "yep is it possible to remove that caching well",
    "start": "3366540",
    "end": "3372240"
  },
  {
    "text": "um strictly speaking we might break existing programs because um you can also do things like",
    "start": "3372240",
    "end": "3378960"
  },
  {
    "text": "um um count on that that begin was cash",
    "start": "3378960",
    "end": "3385260"
  },
  {
    "text": "then insert on the underlying range new elements at the front and then know that",
    "start": "3385260",
    "end": "3391200"
  },
  {
    "text": "drop now no longer works on the second but on the third element I would consider a code like that evil",
    "start": "3391200",
    "end": "3400079"
  },
  {
    "text": "but so I think yes we can fix that because we would allow things that were",
    "start": "3400079",
    "end": "3405780"
  },
  {
    "text": "otherwise undefined Behavior I'm not sure I want to propose that",
    "start": "3405780",
    "end": "3410819"
  },
  {
    "text": "because the standard committee is not still not willing to fix the broken range base for Loop",
    "start": "3410819",
    "end": "3416400"
  },
  {
    "text": "so they don't care for broken stuff if they don't have the problem and they",
    "start": "3416400",
    "end": "3421559"
  },
  {
    "text": "don't have the problem because they are experts they know well they know but Timo did you know",
    "start": "3421559",
    "end": "3427680"
  },
  {
    "text": "that would you make this mistake okay",
    "start": "3427680",
    "end": "3433819"
  },
  {
    "text": "that's it you have seen a lot of great things Concepts",
    "start": "3435359",
    "end": "3440579"
  },
  {
    "text": "that help you to um decide which code is called Concepts",
    "start": "3440579",
    "end": "3446220"
  },
  {
    "text": "to uh get early error messages ranges and View support",
    "start": "3446220",
    "end": "3452640"
  },
  {
    "text": "views that helps you deal with sub-ranges um the Chrono library and improve the",
    "start": "3452640",
    "end": "3458760"
  },
  {
    "text": "fixed threat class and temporarily Atomic types",
    "start": "3458760",
    "end": "3464839"
  },
  {
    "text": "what else have you seen oh the equality operator can now be used for not equal",
    "start": "3464839",
    "end": "3471480"
  },
  {
    "text": "um data structures can be template parameters now non-type template",
    "start": "3471480",
    "end": "3477720"
  },
  {
    "text": "parameters probably I missed a few things",
    "start": "3477720",
    "end": "3483000"
  },
  {
    "text": "so that's all what we have seen oh yeah and Chrono calendar and time zones what time zones yeah oh",
    "start": "3483000",
    "end": "3489720"
  },
  {
    "text": "no we saw time zones formatted output with the format function",
    "start": "3489720",
    "end": "3495680"
  },
  {
    "text": "you have not seen everything but that's it and that's why this is my favorite example because it's both",
    "start": "3496440",
    "end": "3504440"
  },
  {
    "text": "really nice but also a little bit frightening well you can say that's good tradition",
    "start": "3505020",
    "end": "3511980"
  },
  {
    "text": "in C plus maybe it is",
    "start": "3511980",
    "end": "3517520"
  },
  {
    "text": "thank you very much [Applause]",
    "start": "3518579",
    "end": "3529789"
  }
]