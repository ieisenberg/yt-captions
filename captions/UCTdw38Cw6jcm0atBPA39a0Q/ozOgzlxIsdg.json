[
  {
    "start": "0",
    "end": "160000"
  },
  {
    "text": "morning morning all right well uh who here has been at my talk of",
    "start": "5000",
    "end": "11280"
  },
  {
    "text": "yesterday all right did you like it all right I got some good feedback one of",
    "start": "11280",
    "end": "16480"
  },
  {
    "text": "them was um can Andre can you ever give a talk",
    "start": "16480",
    "end": "23080"
  },
  {
    "text": "that is not revolutionary the answer is yes and the proof is this talk that's",
    "start": "23080",
    "end": "28599"
  },
  {
    "text": "coming right now so uh if you want something new go for that if you want uh",
    "start": "28599",
    "end": "34320"
  },
  {
    "text": "something ah nice come here otherwise you can go right now um another piece of",
    "start": "34320",
    "end": "40559"
  },
  {
    "text": "feedback I got was very nice um somebody told me Andre you are the master of",
    "start": "40559",
    "end": "47000"
  },
  {
    "text": "uncomfortable silences because you ask a question and you have the guts to wait",
    "start": "47000",
    "end": "52640"
  },
  {
    "text": "until somebody answers until everybody in the audience feels hot in their seat like huh he's asking me probably so he's",
    "start": "52640",
    "end": "60199"
  },
  {
    "text": "looking at me right now this is going to happen today so be prepared how about we build the slides how about we build the",
    "start": "60199",
    "end": "67040"
  },
  {
    "text": "slides so uh Mak sid. PS and uh SCP sid. PS uh to my site and SSH into my site",
    "start": "67040",
    "end": "75360"
  },
  {
    "text": "and call PS2 PDF because I don't have it on Mac for some reason the Mac doesn't have PS2 PDF and then I'm going to SCP",
    "start": "75360",
    "end": "83000"
  },
  {
    "text": "the PDF back to my um to my computer here and uh let's see if it works",
    "start": "83000",
    "end": "91840"
  },
  {
    "text": "huh 100% oh now it's processing so we got to wait for it to be copied back and",
    "start": "92640",
    "end": "98479"
  },
  {
    "text": "there we go all right that was a hurdle so now we have them nicely built",
    "start": "98479",
    "end": "105680"
  },
  {
    "text": "and fresh and I'm going to talk about the",
    "start": "105680",
    "end": "110960"
  },
  {
    "text": "topic for which I'm not the most qualified in the room for the simple reason that you guys are awesome and",
    "start": "110960",
    "end": "117320"
  },
  {
    "text": "that uh awesomeness includes two particular ular folks Anthony who has",
    "start": "117320",
    "end": "122640"
  },
  {
    "text": "been uh giving a great talk yesterday and the tutorial the days the two days before that um and U Mr Hubert",
    "start": "122640",
    "end": "131400"
  },
  {
    "text": "thundering voice Matthew at least not to mention Mark and",
    "start": "131400",
    "end": "137160"
  },
  {
    "text": "other folks in the audience who I know for a fact are very good at this kind of stuff um that being said I'm going to",
    "start": "137160",
    "end": "145120"
  },
  {
    "text": "discuss code that is actually used in production at Facebook uh kind of you know on a regular basis it essentially",
    "start": "145120",
    "end": "152879"
  },
  {
    "text": "it is literally used every time you use the site so that's pretty nice right I",
    "start": "152879",
    "end": "158800"
  },
  {
    "text": "call it I call the topic generic locking uh to give you a bit of a background of",
    "start": "158800",
    "end": "163879"
  },
  {
    "text": "uh of how this came about um there's a there's a story to this so in the early",
    "start": "163879",
    "end": "170120"
  },
  {
    "text": "2000s there's a huge Battle of concurrent paradigms so huge competition going",
    "start": "170120",
    "end": "175640"
  },
  {
    "text": "on uh and there like a number of contenders um contain like patterns",
    "start": "175640",
    "end": "181000"
  },
  {
    "text": "let's say message passing Lock Free work stealing automated paralyzation thatl",
    "start": "181000",
    "end": "186640"
  },
  {
    "text": "gave a great talk about this yesterday comparing and defining properly and comparing all of these uh ways of doing",
    "start": "186640",
    "end": "193040"
  },
  {
    "text": "things in a way now nobody won right although clearly before that",
    "start": "193040",
    "end": "199959"
  },
  {
    "text": "you had some sort of lock based program was the dominant Paradigm and everything else was new right now it's not lock",
    "start": "199959",
    "end": "207280"
  },
  {
    "text": "based program kind of disappeared and then um kind of it's not there anymore it Still Remains a very important",
    "start": "207280",
    "end": "213519"
  },
  {
    "text": "Paradigm and it's actually better than luck than Luck free uh approaches in certain situations such as when you want",
    "start": "213519",
    "end": "220640"
  },
  {
    "text": "to set priorities for things uh and they need to be different Luck free is like",
    "start": "220640",
    "end": "225879"
  },
  {
    "text": "entirely all too Democratic if you wish so lock based programming turns out",
    "start": "225879",
    "end": "231560"
  },
  {
    "text": "it remains hugely important for c+s programs uh do we have agreement on this",
    "start": "231560",
    "end": "236959"
  },
  {
    "text": "do you agree against against again again oh no so that was a a bit of a latency",
    "start": "236959",
    "end": "242959"
  },
  {
    "text": "there um obstain like ah I don't care yeah I would I'll take off right now go",
    "start": "242959",
    "end": "248439"
  },
  {
    "text": "to that Angular JS talk all right so",
    "start": "248439",
    "end": "253560"
  },
  {
    "start": "253000",
    "end": "372000"
  },
  {
    "text": "um now actually um in uh 2001 I wrote a",
    "start": "253560",
    "end": "258759"
  },
  {
    "text": "very controversial article so I'm kind of building a waving together a story here right so in 200 I wrote probably my",
    "start": "258759",
    "end": "267360"
  },
  {
    "text": "most controversial article on on in the C+ world uh volatile",
    "start": "267360",
    "end": "272440"
  },
  {
    "text": "the you know this is actually a this is actually a typo but it's very interesting because it was autocorrected",
    "start": "272440",
    "end": "279720"
  },
  {
    "text": "it was multi-threaded I'm not kidding the editor fixed that for me and it's the",
    "start": "279720",
    "end": "287479"
  },
  {
    "text": "first time I'm noticing it because you know it's like I I'm I'm reading the slides I'm kind of rehearsing and I'm",
    "start": "287479",
    "end": "293120"
  },
  {
    "text": "like ah I know the Styles I'm just my eyes are going to skip over it and at this moment I was like uh maltreated",
    "start": "293120",
    "end": "299880"
  },
  {
    "text": "which is actually kind of um Whimsical it's interesting that uh that",
    "start": "299880",
    "end": "305680"
  },
  {
    "text": "autoc correct happened it's a Visionary right the maltreated program's best",
    "start": "305680",
    "end": "311600"
  },
  {
    "text": "friend yep multi-threading is maltreating all right so um that article",
    "start": "311600",
    "end": "318520"
  },
  {
    "text": "def uses a trick it uses the volatiles connection to the C++ type system which",
    "start": "318520",
    "end": "324160"
  },
  {
    "text": "is it's a qualifier like const or any other I mean that's it like const or any other or console itself it's a qualifier",
    "start": "324160",
    "end": "331919"
  },
  {
    "text": "and you can use it for overloading and for sort of defining um methods that",
    "start": "331919",
    "end": "337160"
  },
  {
    "text": "apply to um threaded or non-threaded objects and it introduced a a nice um",
    "start": "337160",
    "end": "344479"
  },
  {
    "text": "intr a nice idiom which was you know whenever you have volatile you can't use uh you can't use the uh the object and",
    "start": "344479",
    "end": "352360"
  },
  {
    "text": "in order to get rid of volatile you would need to lock the object so it would use the volatile qualifier as an",
    "start": "352360",
    "end": "358360"
  },
  {
    "text": "indicator that the object is locked or not so um it did not rely on volatile",
    "start": "358360",
    "end": "365800"
  },
  {
    "text": "semantics anyhow uh moving forward in 2011 C++ introduced uh multi-threading",
    "start": "365800",
    "end": "372000"
  },
  {
    "start": "372000",
    "end": "562000"
  },
  {
    "text": "rules for containers and the way they work is the following in",
    "start": "372000",
    "end": "377599"
  },
  {
    "text": "C++ uh um as of year 2008 uh this particular proposal was introduced and",
    "start": "377599",
    "end": "384280"
  },
  {
    "text": "let me kind of summarize it for you if you have a container an STL",
    "start": "384280",
    "end": "390919"
  },
  {
    "text": "container you can call cons methods from different threads literally",
    "start": "390919",
    "end": "397720"
  },
  {
    "text": "simultaneously if you want to modify it then you can't do that but as long as",
    "start": "397720",
    "end": "403000"
  },
  {
    "text": "there are multiple calls into const methods you can do it simultaneously",
    "start": "403000",
    "end": "410759"
  },
  {
    "text": "okay to continue the story I'm going to go back a couple of slides to continue the story lck based programming has also",
    "start": "410759",
    "end": "417840"
  },
  {
    "text": "made progress even even though as competition had intensified right even though there are",
    "start": "417840",
    "end": "424759"
  },
  {
    "text": "new paradigms coming lock base kind of followed suit and um just got better um",
    "start": "424759",
    "end": "431639"
  },
  {
    "text": "to wait only yesterday I was talking to Hubert and he said actually there's uh",
    "start": "431639",
    "end": "436680"
  },
  {
    "text": "new new implementations of readers multiple readers one writer locks which",
    "start": "436680",
    "end": "442080"
  },
  {
    "text": "are very good they're just very good quality and you know kind of very refined and very subtle so um there's been of",
    "start": "442080",
    "end": "449599"
  },
  {
    "text": "improvements in CPUs operating systems API is better Kel level mutex is better user space mutex is better spin locks",
    "start": "449599",
    "end": "457120"
  },
  {
    "text": "better reader readers writer mutexes so again just to Define terms a bit could",
    "start": "457120",
    "end": "462680"
  },
  {
    "text": "someone tell us what the multiple many readers one writer mutex is what is that",
    "start": "462680",
    "end": "468560"
  },
  {
    "text": "yes",
    "start": "468560",
    "end": "470800"
  },
  {
    "text": "please so right so you can have many readers",
    "start": "475960",
    "end": "481039"
  },
  {
    "text": "accessing the uh the entering the the critical section at any time but if a",
    "start": "481039",
    "end": "486560"
  },
  {
    "text": "writer comes it would have to wait for our readers to go away right and once it",
    "start": "486560",
    "end": "492639"
  },
  {
    "text": "acquires the lock nobody can either read no or right okay uh question uh if a",
    "start": "492639",
    "end": "501400"
  },
  {
    "text": "writer is waiting and a reader is waiting who should get",
    "start": "501400",
    "end": "506400"
  },
  {
    "text": "priority somebody else so if a reader if if I have like so",
    "start": "508240",
    "end": "515000"
  },
  {
    "text": "any number of a million readers can read be simultaneously you know acquiring the",
    "start": "515000",
    "end": "520080"
  },
  {
    "text": "lock the mutex right so then if a writer wants to wait and there's other readers",
    "start": "520080",
    "end": "525279"
  },
  {
    "text": "waiting who should get priority yes the writer why the writer why otherwise he will start otherwise it's very easy to",
    "start": "525279",
    "end": "532720"
  },
  {
    "text": "start the writer for the simple reason that new readers can come at any time on the in the door at no C to them and",
    "start": "532720",
    "end": "540480"
  },
  {
    "text": "essentially it they would starve the wrer away um of course there's more refined ways to uh to do this",
    "start": "540480",
    "end": "546480"
  },
  {
    "text": "prioritization but in essence you got to be careful with uh with this kind of starvation so okay great so allow we can",
    "start": "546480",
    "end": "555959"
  },
  {
    "text": "do one right access that precludes or other reads or wres but we can do any number of read",
    "start": "555959",
    "end": "561120"
  },
  {
    "text": "accesses excellent so uh C++ 1X is serious about lock based programming we",
    "start": "561120",
    "end": "567760"
  },
  {
    "start": "562000",
    "end": "609000"
  },
  {
    "text": "already have a bunch of stuff in there such as mutex time mutex Anthony knows all about it is the list",
    "start": "567760",
    "end": "573600"
  },
  {
    "text": "even complete probably not recursive mutex return recursive time mutex",
    "start": "573600",
    "end": "580279"
  },
  {
    "text": "um and uh then we have Shar mutex shared time mutex so these would be uh uh these",
    "start": "580279",
    "end": "586120"
  },
  {
    "text": "would be readers writers and you have only in C++ starting with 17 you have uh",
    "start": "586120",
    "end": "591720"
  },
  {
    "text": "the multiple readers one writer lock but it's available today in boost Etc now",
    "start": "591720",
    "end": "596839"
  },
  {
    "text": "here's the interesting part here's what I'm kind of get so there's a punchline to this kind of building a story here",
    "start": "596839",
    "end": "602680"
  },
  {
    "text": "and there's a punchline which is the STD containers were designed for readers and writer and let me explain why so you",
    "start": "602680",
    "end": "610000"
  },
  {
    "start": "609000",
    "end": "759000"
  },
  {
    "text": "have this right you have multiple readers one writer and",
    "start": "610000",
    "end": "616000"
  },
  {
    "text": "then you have STL containers and the STL container says Ah for cons method you can have many readers for non-con method",
    "start": "616000",
    "end": "623399"
  },
  {
    "text": "that means you're assuming you're writing to the object and uh you know there could be no reason ERS or other",
    "start": "623399",
    "end": "630920"
  },
  {
    "text": "writers now uh let me ask you this practically",
    "start": "630920",
    "end": "635959"
  },
  {
    "text": "to implement such a container what rules would you need to",
    "start": "635959",
    "end": "641600"
  },
  {
    "text": "observe so to implement a container that can have in cons methods any number of",
    "start": "641600",
    "end": "646639"
  },
  {
    "text": "readers any number of threads can enter the cons methods of the",
    "start": "646639",
    "end": "651680"
  },
  {
    "text": "container uh what what like if you implement such a container what would you need to uh be careful with",
    "start": "651680",
    "end": "660639"
  },
  {
    "text": "yes not use mutable members no mutable members thank",
    "start": "660639",
    "end": "665720"
  },
  {
    "text": "you anything else there's another thing so no mutable members because mutable",
    "start": "665720",
    "end": "672279"
  },
  {
    "text": "allows you to cheat const essentially and change the object surreptitiously right and there's one more",
    "start": "672279",
    "end": "679600"
  },
  {
    "text": "yes iterators will be problematic because they kind of kind of look into",
    "start": "679600",
    "end": "684639"
  },
  {
    "text": "the Container but they're they have their own life but there's one more simple thing that you need to avoid yes",
    "start": "684639",
    "end": "691279"
  },
  {
    "text": "no Global function no global data no Global mutable data so you can't have",
    "start": "691279",
    "end": "696760"
  },
  {
    "text": "Global State kind of uh kind of manipulated in because again Global sort",
    "start": "696760",
    "end": "703000"
  },
  {
    "text": "of in a way allow you to cheat con right so if You observe these two simple rules you can say well my container basically",
    "start": "703000",
    "end": "710680"
  },
  {
    "text": "is uh uh you know is obeying this particular this particular rule",
    "start": "710680",
    "end": "716440"
  },
  {
    "text": "um you know no iio which is also for sort of a global thing so you don't have",
    "start": "716440",
    "end": "721639"
  },
  {
    "text": "to have like hidden mutation inside your cons functions right so now let me ask",
    "start": "721639",
    "end": "726720"
  },
  {
    "text": "you this so we have two things we have",
    "start": "726720",
    "end": "731800"
  },
  {
    "text": "this rule which says you have if you have a container uh as long as it's con many you know many people can call it",
    "start": "731800",
    "end": "738480"
  },
  {
    "text": "but if it's nonc nobody can nobody else can call can use that container and then",
    "start": "738480",
    "end": "743560"
  },
  {
    "text": "you have the readers writer lock which goes you can have many readers for the",
    "start": "743560",
    "end": "748600"
  },
  {
    "text": "subject but one right there aren't these two uh isn't there Eerie similarity",
    "start": "748600",
    "end": "755839"
  },
  {
    "text": "between these two things right so it's you know had a wait",
    "start": "755839",
    "end": "761000"
  },
  {
    "text": "minute wait a minute moment here right we have a wait wait a minute moment which is well how about then I kind of",
    "start": "761000",
    "end": "768480"
  },
  {
    "text": "make the two doveet tail so you have multiple simultaneous C to cons methods",
    "start": "768480",
    "end": "773800"
  },
  {
    "text": "no call to cons methods concurrent with call to noncon methods and you have user serial C to noncon methods and this is",
    "start": "773800",
    "end": "780959"
  },
  {
    "text": "the same exact thing for the right reader right writer it's almost the same",
    "start": "780959",
    "end": "786079"
  },
  {
    "text": "you know almost the same bullets here which is amazing right so that's kind of",
    "start": "786079",
    "end": "792839"
  },
  {
    "text": "the nice thing that uh is noticeable so you're looking at this one",
    "start": "792839",
    "end": "800040"
  },
  {
    "text": "to one correspondence am I making sense here am I gaining your trust here so I",
    "start": "800040",
    "end": "807440"
  },
  {
    "text": "can trick you into using template and something and you know I'm going to even pull a macro on you if I",
    "start": "807440",
    "end": "814800"
  },
  {
    "text": "feel like it right so okay one TR correspondence",
    "start": "814800",
    "end": "821079"
  },
  {
    "text": "readers writer and con non const amazing so whenever I call a cons method I need",
    "start": "821079",
    "end": "826240"
  },
  {
    "text": "to enter read acquire and whenever I enter a non-con method I need to enter a",
    "start": "826240",
    "end": "831279"
  },
  {
    "text": "write acquire for the same lock for the same mutex same synchronization object and it just works by that rule",
    "start": "831279",
    "end": "839880"
  },
  {
    "text": "so it works like today with the STL just do it so that's the idea now we want to",
    "start": "839880",
    "end": "846600"
  },
  {
    "start": "844000",
    "end": "910000"
  },
  {
    "text": "encapsulate all of this good stuff and because of this Rule and because of this",
    "start": "846600",
    "end": "852600"
  },
  {
    "text": "uh uh this rule in the language it becomes very easy to encapsulate and put",
    "start": "852600",
    "end": "857800"
  },
  {
    "text": "together a little library and we have it so this is the idea let's keep a",
    "start": "857800",
    "end": "863480"
  },
  {
    "text": "reader reader sler lock outside the guarded object and issue a read Locker",
    "start": "863480",
    "end": "868759"
  },
  {
    "text": "around each cons method isue a right lock around each noncon",
    "start": "868759",
    "end": "873800"
  },
  {
    "text": "method so now okay uh in order to this this kind of stuff what which of c++'s",
    "start": "873800",
    "end": "881279"
  },
  {
    "text": "encapsulation mechanisms can you think of I want to hook every const and every",
    "start": "881279",
    "end": "887199"
  },
  {
    "text": "non-const method of any",
    "start": "887199",
    "end": "892399"
  },
  {
    "text": "object uh there is a type uh that does the same exact thing which is smart",
    "start": "892399",
    "end": "897800"
  },
  {
    "text": "pointer shared PTR a smart point a smart pointer essentially hooks every method",
    "start": "897800",
    "end": "903839"
  },
  {
    "text": "by defining operator arrow and then it allows you to do things right so let's",
    "start": "903839",
    "end": "909880"
  },
  {
    "text": "do that how about the following all right let's get ready here",
    "start": "909880",
    "end": "916560"
  },
  {
    "text": "okay have a sip of coffee there all right let's see so we have a",
    "start": "916560",
    "end": "922199"
  },
  {
    "text": "template of any type and any mutex type not any mutex but a special kind of",
    "start": "922199",
    "end": "927759"
  },
  {
    "text": "readers right right mutex so you know by default it's going to be a shared mutex or whatnot and we have Define a a struct",
    "start": "927759",
    "end": "934440"
  },
  {
    "text": "synchronized which is going to hold the datam right and the datam is not mutable",
    "start": "934440",
    "end": "941639"
  },
  {
    "text": "you don't cheat on the data and it has a mutable mutex because you're going to manipulate it even in",
    "start": "941639",
    "end": "947399"
  },
  {
    "text": "con methods and I'm going to define a little class locked",
    "start": "947399",
    "end": "953839"
  },
  {
    "text": "pointer which defines operator arrow and I'm going to Define for this very class",
    "start": "953839",
    "end": "958880"
  },
  {
    "text": "synchronized I'm going to Define its own operator Arrow which returns lock pointer",
    "start": "958880",
    "end": "965600"
  },
  {
    "text": "similarly for con synchronized object I Define a different operator Arrow which returns a cons lock pointer which is has",
    "start": "965600",
    "end": "972519"
  },
  {
    "text": "its own definition has its own definition which is very similar to this guy now explain",
    "start": "972519",
    "end": "978920"
  },
  {
    "text": "to me please if I have a synchronized object like this and I say object Arrow",
    "start": "978920",
    "end": "984600"
  },
  {
    "text": "method what uh what's what functions are going to invoked and in what order yes",
    "start": "984600",
    "end": "992480"
  },
  {
    "text": "please so the arrow operator is going to call be called recursively notice the",
    "start": "996440",
    "end": "1001519"
  },
  {
    "text": "completely incorrect use of recursive I'm kidding so it's indeed it's going to",
    "start": "1001519",
    "end": "1006600"
  },
  {
    "text": "be called for as transitively for as long as it it's Returns on UNP pointer",
    "start": "1006600",
    "end": "1012440"
  },
  {
    "text": "right excellent thank you very much so um I'm going to call first the operator",
    "start": "1012440",
    "end": "1017560"
  },
  {
    "text": "arrow on this guy on the synchronized object and that's going to return a lock pointer and the C++ compare is going to",
    "start": "1017560",
    "end": "1023399"
  },
  {
    "text": "be like wait a minute I didn't get a pointer yet for the operator Arrow so let me continue it's going to invoke the",
    "start": "1023399",
    "end": "1029918"
  },
  {
    "text": "operator arrow for this guy the lock pointer and then I'm going to get a t",
    "start": "1029919",
    "end": "1036319"
  },
  {
    "text": "star and finally the compar is going to be happy it's going to stop the the recursion right it's going to stop",
    "start": "1036319",
    "end": "1042558"
  },
  {
    "text": "transitively invoking the operator arrow and it's going to call the method against that pointer but but there is",
    "start": "1042559",
    "end": "1049880"
  },
  {
    "text": "one more thing that's happening because there this object is returned by value it's an R value so if I call Operator",
    "start": "1049880",
    "end": "1057760"
  },
  {
    "text": "Arrow against a synchronized object several other things are going to happen so why don't you continue telling us",
    "start": "1057760",
    "end": "1064320"
  },
  {
    "text": "what's happening so first thing that happens is so I call this",
    "start": "1064320",
    "end": "1070240"
  },
  {
    "text": "guy it would call The Constructor of log PTR whatever the hell that does right you don't know I mean I'm kind of I'm",
    "start": "1072240",
    "end": "1078760"
  },
  {
    "text": "saving that",
    "start": "1078760",
    "end": "1081480"
  },
  {
    "text": "right you don't know yet so you know don't be don't don't get ahead of me what I'm saying is that this object is",
    "start": "1084080",
    "end": "1089919"
  },
  {
    "text": "going to be first constructed returned from the operator Arrow the comp is going to invoke",
    "start": "1089919",
    "end": "1096320"
  },
  {
    "text": "operator around this guy and is going to finally get the pointer after which the invocation occurs whatever you invoked",
    "start": "1096320",
    "end": "1102600"
  },
  {
    "text": "it for and then somebody else what's what's going to happen after",
    "start": "1102600",
    "end": "1108039"
  },
  {
    "text": "a Returns the destructor of lck pointer is going to be invoked and I'm done with",
    "start": "1108039",
    "end": "1114840"
  },
  {
    "text": "the call so by just writing object Arrow method I create an object invoke a",
    "start": "1114840",
    "end": "1120280"
  },
  {
    "text": "function destroy an object in this order right so you see I'm very",
    "start": "1120280",
    "end": "1127559"
  },
  {
    "text": "deliberately here setting you up for a lock method call unlock",
    "start": "1127559",
    "end": "1134000"
  },
  {
    "text": "sequence better yet in the case I in case I have a con synchronized object",
    "start": "1134000",
    "end": "1140480"
  },
  {
    "text": "huh I'm going to return a different type here so I'm going to go through the same motions except I'm going to create a",
    "start": "1140480",
    "end": "1146280"
  },
  {
    "text": "destroy different type of object which you know you can see where I'm going with this this is invoking the reader",
    "start": "1146280",
    "end": "1152480"
  },
  {
    "text": "lock and this is invoking the right the the wrer",
    "start": "1152480",
    "end": "1157320"
  },
  {
    "text": "lock and all of a sudden with essenti like this code",
    "start": "1158200",
    "end": "1164159"
  },
  {
    "text": "only I got um one to one mapping between everything non const and the writer lock",
    "start": "1164159",
    "end": "1171440"
  },
  {
    "text": "and everything const and the reader lock all right so let's see a bit of the",
    "start": "1171440",
    "end": "1178440"
  },
  {
    "start": "1176000",
    "end": "1201000"
  },
  {
    "text": "implementation here there's of course a lot of details to fill so we have um I",
    "start": "1178440",
    "end": "1184520"
  },
  {
    "text": "have a Constructor here that's private we don't need it we have the default um",
    "start": "1184520",
    "end": "1190480"
  },
  {
    "text": "we have uh synchronize that takes a copy by um you know by cons reference and and by",
    "start": "1190480",
    "end": "1198200"
  },
  {
    "text": "our value reference these are sort of The Usual Suspects um ah one nice trick here is",
    "start": "1198200",
    "end": "1206120"
  },
  {
    "start": "1201000",
    "end": "1363000"
  },
  {
    "text": "you we have the conditional no except going on uh which goes like this whenever you copy a synchronized object",
    "start": "1206120",
    "end": "1213280"
  },
  {
    "text": "it's going to be no except if and only if the uh the value itself is no throw",
    "start": "1213280",
    "end": "1218640"
  },
  {
    "text": "copy constructible so that's a nice example of using a bit of introspection there to make sure that we propagate Pro",
    "start": "1218640",
    "end": "1225440"
  },
  {
    "text": "properly the uh the you know the the capabilities of T which is our generic",
    "start": "1225440",
    "end": "1232360"
  },
  {
    "text": "argument into the capabilities of synchronized makes did you know about",
    "start": "1232360",
    "end": "1238320"
  },
  {
    "text": "this like no except no except so you have a few folks who don't so it's very nice sort of no except is um is an is a",
    "start": "1238320",
    "end": "1247120"
  },
  {
    "text": "is an attribute of of the function is um um is part of the signature and it takes",
    "start": "1247120",
    "end": "1253240"
  },
  {
    "text": "a Boolean it takes a Boolean as an argument you can write no except and put",
    "start": "1253240",
    "end": "1258840"
  },
  {
    "text": "no PR and no Boolean and that means it's never going to throw um that's not entirely true but",
    "start": "1258840",
    "end": "1266080"
  },
  {
    "text": "anyhow um so it's uh the user makes a a vow a pledge to not throw that's",
    "start": "1266080",
    "end": "1274159"
  },
  {
    "text": "probably more like it right like you know in C++ never is uh it means almost",
    "start": "1274159",
    "end": "1280120"
  },
  {
    "text": "never and always means almost always except for this long list of exceptions and this is no exception g wow three",
    "start": "1280120",
    "end": "1287559"
  },
  {
    "text": "meanings of the word in one sentence unless statistically almost never you",
    "start": "1287559",
    "end": "1292679"
  },
  {
    "text": "have to disagree on yeah never say almost never except okay so um so no",
    "start": "1292679",
    "end": "1300159"
  },
  {
    "text": "just say no accept it means I'm I'm you know making a vow here to never throw but if you put no except and op put a",
    "start": "1300159",
    "end": "1306600"
  },
  {
    "text": "Boolean constant in there it's going to be no except or not depending on the Boolean if it's true you know and in",
    "start": "1306600",
    "end": "1313440"
  },
  {
    "text": "this case it turns out there there's this EAS no throw move constructible um um um standard introspection facility",
    "start": "1313440",
    "end": "1322320"
  },
  {
    "text": "which cannot be implemented in standard C++ it's um It's",
    "start": "1322320",
    "end": "1328320"
  },
  {
    "text": "Magic so you can't you can't sit down and implement it the compiler has to Define it for",
    "start": "1328320",
    "end": "1333799"
  },
  {
    "text": "you and the compile side is going to is going to use some you know underscore underscore things to to implement it uh",
    "start": "1333799",
    "end": "1341120"
  },
  {
    "text": "but it's not implementable in Us in user code it's uh it's introspection primitive and the same goes about no",
    "start": "1341120",
    "end": "1347600"
  },
  {
    "text": "throw constructible uh which is also magic provided by the",
    "start": "1347600",
    "end": "1353000"
  },
  {
    "text": "compiler so by this I'm saying well if the original type was uh copy",
    "start": "1353000",
    "end": "1358039"
  },
  {
    "text": "constructible without exception then I'm going to not throw from the synchronized Constructor as well which is as",
    "start": "1358039",
    "end": "1364520"
  },
  {
    "start": "1363000",
    "end": "1388000"
  },
  {
    "text": "expected um when you uh build from a piece of",
    "start": "1364520",
    "end": "1370640"
  },
  {
    "text": "data you actually don't need to lock anything cuz it's just you know just building the object a new so there's no",
    "start": "1370640",
    "end": "1377480"
  },
  {
    "text": "there's no need for locking there's no multiple threads accessing this Constructor so again there's this whole",
    "start": "1377480",
    "end": "1383520"
  },
  {
    "text": "uh no except trick again so with assignment uh we have an",
    "start": "1383520",
    "end": "1391080"
  },
  {
    "start": "1388000",
    "end": "1599000"
  },
  {
    "text": "interesting uh we have an interesting uh thing here to worry about who's been in Anthony's",
    "start": "1391080",
    "end": "1397400"
  },
  {
    "text": "stock yesterday okay um Anthony made a very",
    "start": "1397400",
    "end": "1403320"
  },
  {
    "text": "good point yesterday which was if you want to if you have any piece of code that needs to lock needs to acquire more",
    "start": "1403320",
    "end": "1410159"
  },
  {
    "text": "than one lock they need to be acquiring the same order in all",
    "start": "1410159",
    "end": "1416240"
  },
  {
    "text": "threads because if not what's going to happen somebody who hasn't been in Anthony to let's think real time here so",
    "start": "1416240",
    "end": "1423320"
  },
  {
    "text": "if you acquire if one function acquires lock one lck two and the other function acquires loog two lock one what's going",
    "start": "1423320",
    "end": "1428799"
  },
  {
    "text": "to happen yes deadlock how is it occurring someone in the front because it's easier for me",
    "start": "1428799",
    "end": "1435159"
  },
  {
    "text": "to hear how is it happening how's the deadlock occurring",
    "start": "1435159",
    "end": "1440278"
  },
  {
    "text": "yes right so it just happens it doesn't always happen it only happens when one thread got so far as acquiring one of",
    "start": "1443360",
    "end": "1451120"
  },
  {
    "text": "the two locks and the other also has gotten to acquire the other of the two locks and then they both wait for each",
    "start": "1451120",
    "end": "1456559"
  },
  {
    "text": "other and now they never release so what is the obvious solution to that yes",
    "start": "1456559",
    "end": "1462679"
  },
  {
    "text": "cycle detection cycle detection uh there's an easier solution actually to that",
    "start": "1462679",
    "end": "1468559"
  },
  {
    "text": "which is here locking increasing order of the the address because the address is unique and ordered for the whole",
    "start": "1468559",
    "end": "1475559"
  },
  {
    "text": "application you don't care what the order is it just has to be the same so",
    "start": "1475559",
    "end": "1481080"
  },
  {
    "text": "so that's the clever thing here right so uh to be like more Catholic than the pope himself I just um I just say STD",
    "start": "1481080",
    "end": "1489919"
  },
  {
    "text": "less of void star which is a guarantee that I can compare pointers for inequality regardless where they come",
    "start": "1489919",
    "end": "1495840"
  },
  {
    "text": "from this is the stand away of saying I want to compare two pointers they're not in the same array they're not in the",
    "start": "1495840",
    "end": "1501679"
  },
  {
    "text": "same object did you know this this is is like this should be common everybody should",
    "start": "1501679",
    "end": "1507520"
  },
  {
    "text": "know this and everybody knows it's starting like as of a second ago awesome",
    "start": "1507520",
    "end": "1513320"
  },
  {
    "text": "great so you know it just use this L thing and uh on you on on these flat",
    "start": "1513320",
    "end": "1518840"
  },
  {
    "text": "memory systems of today it works so it's just works automatically but remember",
    "start": "1518840",
    "end": "1524360"
  },
  {
    "text": "when you were kids there's a thing called segmented memor",
    "start": "1524360",
    "end": "1529799"
  },
  {
    "text": "architecture does didn't anybody work with this okay some of us do have the",
    "start": "1529799",
    "end": "1535360"
  },
  {
    "text": "gray hair to prove it uh and in huh or no hair or no hair at all well you know",
    "start": "1535360",
    "end": "1542200"
  },
  {
    "text": "the Bol thing is in inv vog right now so I should try it so um essentially like",
    "start": "1542200",
    "end": "1547960"
  },
  {
    "text": "in those days you would need to do some pointer adjustment so the comparison would be more complicated and more costly uh so therefore you would need to",
    "start": "1547960",
    "end": "1554799"
  },
  {
    "text": "use this list thing all right so all I'm saying is that if the uh if this",
    "start": "1554799",
    "end": "1561760"
  },
  {
    "text": "is at a lower address than rhs you lock in the order of this and the other guy otherwise you lock in the the other",
    "start": "1561760",
    "end": "1568080"
  },
  {
    "text": "order and uh that way the assignment of two synchronized objects proceeds",
    "start": "1568080",
    "end": "1575320"
  },
  {
    "text": "nicely right and we have a number of other uh",
    "start": "1575320",
    "end": "1581640"
  },
  {
    "text": "Usual Suspects such as move assignment Swap and such right awesome",
    "start": "1581640",
    "end": "1589000"
  },
  {
    "text": "question so far okay let Let's uh let's recap the basic plot here let me see what uh okay",
    "start": "1589000",
    "end": "1595279"
  },
  {
    "text": "excellent so before get into the implementation of the operator Arrow let me uh let me share again the uh the",
    "start": "1595279",
    "end": "1601480"
  },
  {
    "start": "1599000",
    "end": "1715000"
  },
  {
    "text": "basic plot I'm following here just to make sure we are on the same",
    "start": "1601480",
    "end": "1606799"
  },
  {
    "text": "page so we we built this synchronized um",
    "start": "1606799",
    "end": "1611880"
  },
  {
    "text": "type around the following realization which",
    "start": "1611880",
    "end": "1619799"
  },
  {
    "text": "is the new C++ 11 rule guarantees that I",
    "start": "1619799",
    "end": "1625760"
  },
  {
    "text": "can call any I can enter from any number of threads the const methods of a",
    "start": "1625760",
    "end": "1632840"
  },
  {
    "text": "container right at the same time if the method is non-const I could allow no",
    "start": "1632840",
    "end": "1639760"
  },
  {
    "text": "other const or non-con method to be executed concurrently so I need to do locking taking the yes",
    "start": "1639760",
    "end": "1649520"
  },
  {
    "text": "ass um no go ahead ass",
    "start": "1650840",
    "end": "1658320"
  },
  {
    "text": "yes yes uh no because you create objects",
    "start": "1664399",
    "end": "1672440"
  },
  {
    "text": "here so you create actually named objects which are going to to be through the end of the scope okay so the",
    "start": "1672440",
    "end": "1679399"
  },
  {
    "text": "Lo yeah so these G1 and G2 are these lock PTR types and they're going to",
    "start": "1679399",
    "end": "1686080"
  },
  {
    "text": "exist until the end of the scope okay actually I did have a moment when I thought oh my God this may be all",
    "start": "1686080",
    "end": "1692960"
  },
  {
    "text": "wrong but then I thought you know so I you know I was uh it's this type is used",
    "start": "1692960",
    "end": "1699559"
  },
  {
    "text": "a lot inside Facebook so if there was there's a a big mistake like this I'm sure it would have been discovered by",
    "start": "1699559",
    "end": "1704840"
  },
  {
    "text": "now or not and you know so you know that when Facebook like fails people call 911 and there's this",
    "start": "1704840",
    "end": "1712200"
  },
  {
    "text": "uh you know this issue get um moving on with u sort of the the the recap so my",
    "start": "1712200",
    "end": "1719640"
  },
  {
    "start": "1715000",
    "end": "1821000"
  },
  {
    "text": "plan here is to say well we have cons methods many many readers so the con would the con methods would be the many",
    "start": "1719640",
    "end": "1726039"
  },
  {
    "text": "readers and the non-con M mutating methods would be the writers and then I",
    "start": "1726039",
    "end": "1731080"
  },
  {
    "text": "have this nice correspondence so I can use const as my trigger my indicator for",
    "start": "1731080",
    "end": "1736679"
  },
  {
    "text": "whether I want to to lock the object for reading or writing so that's my that's my plot that's my basic uh this is sort",
    "start": "1736679",
    "end": "1744600"
  },
  {
    "text": "of the the discovery we've made that allows us to implement the substraction without that particular",
    "start": "1744600",
    "end": "1750799"
  },
  {
    "text": "rule in C++ you can't and actually let me tell you",
    "start": "1750799",
    "end": "1756360"
  },
  {
    "text": "this this was the case before C++ 11 all C++ implementations I know of had",
    "start": "1756360",
    "end": "1764840"
  },
  {
    "text": "containers that obeyed this rule so this was just simply enacting into",
    "start": "1764840",
    "end": "1772320"
  },
  {
    "text": "law what was the facto true which was STL containers never use mutable data",
    "start": "1772320",
    "end": "1778480"
  },
  {
    "text": "and never use globals because people notice a number of issues with those related to thread",
    "start": "1778480",
    "end": "1784840"
  },
  {
    "text": "or not to threads or not so there's actually in the 94 there's kind of a transient issue with that and people",
    "start": "1784840",
    "end": "1791240"
  },
  {
    "text": "going like you know what no globals no mutable data in STL so uh this was kind",
    "start": "1791240",
    "end": "1796320"
  },
  {
    "text": "of the case before this and I'm very happy it became law because and it allows us to do this so all right so we",
    "start": "1796320",
    "end": "1803679"
  },
  {
    "text": "have this uh this operator Arrow which is going to be overloaded for constant uncon objects and this this little thing",
    "start": "1803679",
    "end": "1810960"
  },
  {
    "text": "here allows me to choose whether I use read locking or right locking by means",
    "start": "1810960",
    "end": "1816000"
  },
  {
    "text": "of the return type and then the return type has its own um Arrow",
    "start": "1816000",
    "end": "1822279"
  },
  {
    "text": "great all right so moving on with the implementation of operator Arrow",
    "start": "1822279",
    "end": "1828440"
  },
  {
    "text": "the Locking pointer which is kind of inside the synchronized holds a pointer to its parent and it does not have a a",
    "start": "1828440",
    "end": "1836000"
  },
  {
    "text": "default Constructor it's you wouldn't it doesn't make sense to create",
    "start": "1836000",
    "end": "1841840"
  },
  {
    "text": "an a default locking pointer object it's just its only uh it's only uh reson that",
    "start": "1841840",
    "end": "1848760"
  },
  {
    "text": "is to just be created as a temporary from operator Arrow from uh from the synchronized guy so you know simply",
    "start": "1848760",
    "end": "1855919"
  },
  {
    "text": "locking pointer synchronized start parent stores the parent and mutex lock",
    "start": "1855919",
    "end": "1862240"
  },
  {
    "text": "boom so that's my locking pointer what do you think the con locking pointer Constructor looks",
    "start": "1862240",
    "end": "1870080"
  },
  {
    "text": "like yes sh ahuh so it's going to be a share lock here a different call this is the",
    "start": "1870080",
    "end": "1877799"
  },
  {
    "text": "acquiring the lock in right mode and this other guy is going to acquire the lock",
    "start": "1877799",
    "end": "1883760"
  },
  {
    "text": "in uh yeah uh uh come on ah okay ah oh man I didn't write that",
    "start": "1883760",
    "end": "1894240"
  },
  {
    "text": "okay well I'm I'm missing a slide here which was uh very nicely so the the the",
    "start": "1894240",
    "end": "1900960"
  },
  {
    "text": "next slide should have been The Identical code except the name locking pointer would be cons locking pointer",
    "start": "1900960",
    "end": "1906320"
  },
  {
    "text": "and this would be a called to Shar lock shared lock right okay so um as a small",
    "start": "1906320",
    "end": "1913360"
  },
  {
    "start": "1910000",
    "end": "1943000"
  },
  {
    "text": "details you should know that readers writer mutex are recursive so you can log the same thing multiple",
    "start": "1913360",
    "end": "1920639"
  },
  {
    "text": "times which is nice and uh you kind of you know it's",
    "start": "1920639",
    "end": "1925799"
  },
  {
    "text": "convenient um when you assigned a log pointer to",
    "start": "1925799",
    "end": "1931039"
  },
  {
    "text": "another you just have to make sure it's uh it's there's no uh self assignment",
    "start": "1931039",
    "end": "1936480"
  },
  {
    "text": "Etc so it's uh this is just for optimization you could actually acquire it",
    "start": "1936480",
    "end": "1942960"
  },
  {
    "start": "1943000",
    "end": "2023000"
  },
  {
    "text": "twice all right so um",
    "start": "1943200",
    "end": "1948559"
  },
  {
    "text": "for efficiency you also want to implement a move Constructor which takes a r value reference to the other locked",
    "start": "1948559",
    "end": "1954840"
  },
  {
    "text": "pointer and again you compare you make sure you don't self self move assign",
    "start": "1954840",
    "end": "1960120"
  },
  {
    "text": "which would be very very bad but it's still legal is that right can you self",
    "start": "1960120",
    "end": "1966200"
  },
  {
    "text": "move a sign are you allowed to I'm seeing some raised eyebrows I up",
    "start": "1966200",
    "end": "1971760"
  },
  {
    "text": "to the ceiling there I'm seeing a sad nod from deadlift in the back and just",
    "start": "1971760",
    "end": "1977039"
  },
  {
    "text": "just like telling you people what's happening in the room right now so yeah yeah it's very bad but it does happen",
    "start": "1977039",
    "end": "1983080"
  },
  {
    "text": "people kind of do it they shouldn't uh but just for this is like code for bad people it's going to support them it's",
    "start": "1983080",
    "end": "1990159"
  },
  {
    "text": "going to make them uh happy all right so um",
    "start": "1990159",
    "end": "1997919"
  },
  {
    "text": "awesome and um what else oh oh yeah you can't move construct an object into",
    "start": "1999399",
    "end": "2005039"
  },
  {
    "text": "itself that you're not allowed to although syntactically",
    "start": "2005039",
    "end": "2010600"
  },
  {
    "text": "can you can move from a non-existing object into",
    "start": "2010639",
    "end": "2015919"
  },
  {
    "text": "itself well this is C++ for you right as always you can construct these sentences",
    "start": "2015919",
    "end": "2021399"
  },
  {
    "text": "that kind of parse and then like H well that it can't be right so okay so in the",
    "start": "2021399",
    "end": "2026559"
  },
  {
    "start": "2023000",
    "end": "2042000"
  },
  {
    "text": "destructor obviously you're going to unlock the mutex if the parent was not null and that sort of you know completes",
    "start": "2026559",
    "end": "2033240"
  },
  {
    "text": "the locked pointer so you know it's all boiler plate and it's so simple code the",
    "start": "2033240",
    "end": "2038320"
  },
  {
    "text": "nice thing is that it's uh it's it's highly reusable so okay um the whole point of",
    "start": "2038320",
    "end": "2046720"
  },
  {
    "text": "um of the lock pointer was to implement this operator Arrow which simply just Returns the data no problem of course if",
    "start": "2046720",
    "end": "2055000"
  },
  {
    "text": "you create a lock pointer and you move from it or something and it gets to the null pointer if you try to to invoke the",
    "start": "2055000",
    "end": "2060960"
  },
  {
    "text": "operator Arrow you're going to get a SE segmentation fault which is you know pretty much what you deserve",
    "start": "2060960",
    "end": "2068520"
  },
  {
    "text": "right excellent um we pop out of log pointer",
    "start": "2068520",
    "end": "2073919"
  },
  {
    "text": "and that synchronized level as I promised we have an operator Arrow non const which Returns on our value of type",
    "start": "2073919",
    "end": "2081440"
  },
  {
    "text": "loog pointer and this completes the lock pointer part so whenever I use some sptr",
    "start": "2081440",
    "end": "2089358"
  },
  {
    "text": "Arrow XYZ you have three invocations of operator Arrow one for the synchronized object the next for the lock pointer and",
    "start": "2089359",
    "end": "2096000"
  },
  {
    "text": "then you get the object and then the lock pointer gets destroyed and the whole locking unlocking mechanism is",
    "start": "2096000",
    "end": "2102640"
  },
  {
    "start": "2102000",
    "end": "2122000"
  },
  {
    "text": "automatic C lock pointer looks a lot like and it's essentially the same code as I said um it's pretty much just the",
    "start": "2102640",
    "end": "2110160"
  },
  {
    "text": "same except you're going to call parent mutex lock unlock",
    "start": "2110160",
    "end": "2115480"
  },
  {
    "text": "shared right so you're going to call different methods",
    "start": "2115480",
    "end": "2121520"
  },
  {
    "text": "right all right um who who can tell us what's C",
    "start": "2121520",
    "end": "2127040"
  },
  {
    "start": "2122000",
    "end": "2236000"
  },
  {
    "text": "begin and C end do in C++ 11 C begin C end",
    "start": "2127040",
    "end": "2133599"
  },
  {
    "text": "yes they return a constant iterator for a mutable",
    "start": "2133599",
    "end": "2139079"
  },
  {
    "text": "object right for a like non-con you know regular container they return const",
    "start": "2139079",
    "end": "2145440"
  },
  {
    "text": "iterators uh could you could you do you need them are they",
    "start": "2145440",
    "end": "2151559"
  },
  {
    "text": "necessary are they NE can I you know are they necessary or are they",
    "start": "2152119",
    "end": "2159279"
  },
  {
    "text": "convenience well they are convenience and I'll tell you",
    "start": "2160720",
    "end": "2166160"
  },
  {
    "text": "why you could take the container cast it into a reference to a cons container and",
    "start": "2166160",
    "end": "2171560"
  },
  {
    "text": "then take begin from that and that's my C begin but it will be through two",
    "start": "2171560",
    "end": "2176760"
  },
  {
    "text": "lines and a new variable it would be ridiculous right insert a cons cast like an idiot there and I put like you know",
    "start": "2176760",
    "end": "2183119"
  },
  {
    "text": "cast container and then I make a m typo and I cast to something that I shouldn't be casting to and you know you don't",
    "start": "2183119",
    "end": "2189680"
  },
  {
    "text": "want all that so CB is a convenience function that says Ah even though I I could mutate this container if I so",
    "start": "2189680",
    "end": "2196440"
  },
  {
    "text": "wanted ah I'll be good today I'm not going to mutate it so let me call C begin C end is that",
    "start": "2196440",
    "end": "2204440"
  },
  {
    "text": "right so for the same reason sometimes I want to be nice to to an object I could",
    "start": "2204440",
    "end": "2210720"
  },
  {
    "text": "mutate and say actually I want as const I want to look at the subject as if it were a const object so then you can say",
    "start": "2210720",
    "end": "2217720"
  },
  {
    "text": "sp. ASC const Arrow method and that's going to acquire which kind of",
    "start": "2217720",
    "end": "2223760"
  },
  {
    "text": "lock which lock the reader lock or the writer lock the reader lock right the multiple",
    "start": "2223760",
    "end": "2229640"
  },
  {
    "text": "readers because it's a con object is going to invoke the method so that's a nice convenience",
    "start": "2229640",
    "end": "2235480"
  },
  {
    "text": "function so now it gets to the fun part so whenever I give uh talk about anything really at some point if I have",
    "start": "2235480",
    "end": "2242839"
  },
  {
    "start": "2236000",
    "end": "2282000"
  },
  {
    "text": "a macro in variable there's going to be like three dudes at the end of The Talk saying you know that macro let me ask",
    "start": "2242839",
    "end": "2248720"
  },
  {
    "text": "you a few questions about it I'm not kidding like every it fascinates people",
    "start": "2248720",
    "end": "2253880"
  },
  {
    "text": "it's like I don't know it's like people are weird like that this is like that is the I don't know adults only section of",
    "start": "2253880",
    "end": "2260640"
  },
  {
    "text": "my talk it's like you know what I have to ask you in private a few questions about that macro because I found it very",
    "start": "2260640",
    "end": "2268000"
  },
  {
    "text": "interesting and uh dignified with uh you know I I think it's good to talk about",
    "start": "2268000",
    "end": "2273720"
  },
  {
    "text": "it and I'm going to use this for the rest of my life life right so um this is",
    "start": "2273720",
    "end": "2280079"
  },
  {
    "text": "going to be fun so you know here's the thing I'm going to do something",
    "start": "2280079",
    "end": "2286040"
  },
  {
    "start": "2282000",
    "end": "2419000"
  },
  {
    "text": "stupid here's something stupid I'm going to do who can spot the huge mistake I'm making",
    "start": "2286040",
    "end": "2292960"
  },
  {
    "text": "here yes",
    "start": "2293319",
    "end": "2296599"
  },
  {
    "text": "please yeah this is kind of a rookie mistake so SV like a synchronized Vector",
    "start": "2301720",
    "end": "2308079"
  },
  {
    "text": "right very nice well let me test if it's empty uh SV acquire a reader lock call",
    "start": "2308079",
    "end": "2315160"
  },
  {
    "text": "empty get back from the reader lock unlock uh and let's say it returns it's not it's not empty Bo okay so then I uh",
    "start": "2315160",
    "end": "2324200"
  },
  {
    "text": "I open a a scope here and I'm going to say oh if it's not empty I can access the front right now because I'm so smart",
    "start": "2324200",
    "end": "2330760"
  },
  {
    "text": "so good right and this is going to acquire another luck and of course in the meantime between",
    "start": "2330760",
    "end": "2337160"
  },
  {
    "text": "uh between the closing of this particular parenthesis and the opening of this guy like this there's an eon",
    "start": "2337160",
    "end": "2342720"
  },
  {
    "text": "here there's an infinite amount of time in thre like in theory you could think",
    "start": "2342720",
    "end": "2347920"
  },
  {
    "text": "an unbounded amount of time could occur in there and you know the other threads may have a party right then they're like",
    "start": "2347920",
    "end": "2355359"
  },
  {
    "text": "you know this is awesome I'm going to lock and unlock the object and manipulate it any way we want including make it it empty how about that so then",
    "start": "2355359",
    "end": "2363440"
  },
  {
    "text": "I'm going to uh take front of an empty vector so you can't use the object that way and",
    "start": "2363440",
    "end": "2370880"
  },
  {
    "text": "actually I've been criticized by people at Facebook who said ah you made it too",
    "start": "2370880",
    "end": "2375920"
  },
  {
    "text": "easy to do this because you just people just write an arrow and then whenever they write an arrow there's a lock and a",
    "start": "2375920",
    "end": "2381319"
  },
  {
    "text": "lock happening and I'm like well WR red theine manual rtfm right red theine",
    "start": "2381319",
    "end": "2390560"
  },
  {
    "text": "manual so um all right what's the cure for this yes what is the cure for this",
    "start": "2390560",
    "end": "2398680"
  },
  {
    "text": "yes please right so I need some sort of uh I",
    "start": "2398680",
    "end": "2404240"
  },
  {
    "text": "need a mechanism to be able to lock the whole SV thing and then use it in you",
    "start": "2404240",
    "end": "2410000"
  },
  {
    "text": "know inside the critical section and then be done with it so you know I've been thinking about this for a while and",
    "start": "2410000",
    "end": "2415400"
  },
  {
    "text": "I I found something that's very nice except it uses a macro here's what uh here's what the",
    "start": "2415400",
    "end": "2422280"
  },
  {
    "start": "2419000",
    "end": "2502000"
  },
  {
    "text": "trick is I Define a pseudo statement which is called obviously",
    "start": "2422280",
    "end": "2427599"
  },
  {
    "text": "synchronized in all caps because we like to shout when we write macros synchronize this",
    "start": "2427599",
    "end": "2435160"
  },
  {
    "text": "V and uh this is the use so it's it's almost like magic because inside synchronized it's a critical section and",
    "start": "2435160",
    "end": "2441599"
  },
  {
    "text": "I can use this v as a vector so I can write SV dot mty instead of SV Arrow",
    "start": "2441599",
    "end": "2448599"
  },
  {
    "text": "mty so inside the pseudo statement I have an already locked vector and if it",
    "start": "2448599",
    "end": "2454440"
  },
  {
    "text": "was mutable it's going to be a for right and if it was not if it was con it's going to be synchronized for for reads",
    "start": "2454440",
    "end": "2461400"
  },
  {
    "text": "only so now I can call inside the synchronized section I can call any method on the vector because SV was",
    "start": "2461400",
    "end": "2469359"
  },
  {
    "text": "mutable so inside SV is is an L value of type Vector",
    "start": "2469359",
    "end": "2474880"
  },
  {
    "text": "end and luck is in effect I can use this Vector notice something interesting this",
    "start": "2474880",
    "end": "2480839"
  },
  {
    "text": "macro not only does the locky and the all that stuff but also",
    "start": "2480839",
    "end": "2487280"
  },
  {
    "text": "it changes the type of the name s v from synchronized Vector to",
    "start": "2487280",
    "end": "2494880"
  },
  {
    "text": "Vector do you want to see the definition are you up for it all right do you have",
    "start": "2494880",
    "end": "2500839"
  },
  {
    "text": "that blood running through your veins right now all right this is",
    "start": "2500839",
    "end": "2506160"
  },
  {
    "start": "2502000",
    "end": "2707000"
  },
  {
    "text": "it I'm not kidding this is it oh man it looks ugly it's only now",
    "start": "2506160",
    "end": "2513000"
  },
  {
    "text": "kind of oh bam man this looks really bad here all right so um all right this next section is like",
    "start": "2513000",
    "end": "2520119"
  },
  {
    "text": "Andre tricks for writing macros and the trick number one is you want you want to inject things into a new scope then you",
    "start": "2520119",
    "end": "2527280"
  },
  {
    "text": "have these uh if statements and these four statements that all they do is kind of inject names into the upcoming scope",
    "start": "2527280",
    "end": "2535240"
  },
  {
    "text": "so first um I I Define an if bull underscore one equals z like an idiot",
    "start": "2535240",
    "end": "2540359"
  },
  {
    "text": "and I do nothing and I say else and that made available for me a Boolean variable",
    "start": "2540359",
    "end": "2546880"
  },
  {
    "text": "because I want to play with it and then I have a four that does pretty much nothing because you know",
    "start": "2546880",
    "end": "2552680"
  },
  {
    "text": "it's going to last until like notore one it's going to run exactly once so I have",
    "start": "2552680",
    "end": "2558200"
  },
  {
    "text": "a four and it says Auto underscore 2 equals x which is my argument operator",
    "start": "2558200",
    "end": "2563960"
  },
  {
    "text": "Arrow huh so at this point I'm acquiring the lock uh and then I'm going to do",
    "start": "2563960",
    "end": "2569640"
  },
  {
    "text": "this uh you know this you know stupid thing that essentially makes the loop run exactly once and then I'm going to",
    "start": "2569640",
    "end": "2576160"
  },
  {
    "text": "to take so here I'm taking the Locking pointer and at this point I'm taking the vector which is an L value and I'm",
    "start": "2576160",
    "end": "2583559"
  },
  {
    "text": "calling starcore 2 which is my locking pointer operator Arrow so I need to call by hand those I make by hand those two",
    "start": "2583559",
    "end": "2590359"
  },
  {
    "text": "calls to operator arrow that we are talking about they're done automatically by the compiler otherwise in the macro",
    "start": "2590359",
    "end": "2596280"
  },
  {
    "text": "I'll do that by hand so at this point notice that I introduced X which is",
    "start": "2596280",
    "end": "2602640"
  },
  {
    "text": "a template oh sorry a macro parameter and effect effectively X is going to",
    "start": "2602640",
    "end": "2610599"
  },
  {
    "text": "Shadow the name X in the scope that's above",
    "start": "2610599",
    "end": "2615680"
  },
  {
    "text": "it and I redefine X to be this time on a reference to in our case a",
    "start": "2615680",
    "end": "2622839"
  },
  {
    "text": "vector yes the compiler",
    "start": "2622839",
    "end": "2627319"
  },
  {
    "text": "not the comp does the compiler not do that trick for you",
    "start": "2628720",
    "end": "2634599"
  },
  {
    "text": "um no because because what I want to get is not uh the pointer I want to get the",
    "start": "2634599",
    "end": "2639640"
  },
  {
    "text": "reference so if I want to get the reference I need to do them by hand",
    "start": "2639640",
    "end": "2645400"
  },
  {
    "text": "right all right so all this guy does one is limit Loop Loops to One path as you",
    "start": "2645400",
    "end": "2652240"
  },
  {
    "text": "see there's the not one and one gets like there should be true here just to be nice but I didn't have room on the",
    "start": "2652240",
    "end": "2657400"
  },
  {
    "text": "slide this should be true I'm not kidding actually there's no room on the side so ah I could use one right it",
    "start": "2657400",
    "end": "2664559"
  },
  {
    "text": "compiles and runs so uh it gets actually I checked it does get optimized away all that Boolean",
    "start": "2664559",
    "end": "2671800"
  },
  {
    "text": "nonsense the compar is like ah this guy must be an idiot so okay let me compile",
    "start": "2671800",
    "end": "2678240"
  },
  {
    "text": "this better for him because I'm not sure what's wrong with uh that code but I don't care so okay fine uh first gr",
    "start": "2678240",
    "end": "2686800"
  },
  {
    "text": "creates a locking pointer the second is going to um uh take from the Locking pointer the L value and is going to",
    "start": "2686800",
    "end": "2692680"
  },
  {
    "text": "Shadow the object with an object by the same name name and this macro actually",
    "start": "2692680",
    "end": "2697800"
  },
  {
    "text": "does everything all of the all of that that allows me to do this",
    "start": "2697800",
    "end": "2703240"
  },
  {
    "text": "cleanly very nice all right there's an issue",
    "start": "2703240",
    "end": "2709839"
  },
  {
    "start": "2707000",
    "end": "2765000"
  },
  {
    "text": "though what if I have an careful here it's not a synchronized Vector it's a",
    "start": "2709839",
    "end": "2715119"
  },
  {
    "text": "vector of synchronized so the synchronized is inside the each Vector element is synchronized has a lock right",
    "start": "2715119",
    "end": "2723599"
  },
  {
    "text": "so not the whole Vector is synchronized but only uh what's inside and now I want to say",
    "start": "2723599",
    "end": "2728800"
  },
  {
    "text": "oh I want to synchronize on this Vector front what's going to happen there when",
    "start": "2728800",
    "end": "2734400"
  },
  {
    "text": "you expand the macro who can tell us",
    "start": "2734400",
    "end": "2741680"
  },
  {
    "text": "yes uhhuh so remember I said this x here is a macro parameter it's going to",
    "start": "2741680",
    "end": "2747720"
  },
  {
    "text": "Shadow whatever but in this case I called synchronize with an expression it's not a it's not a name it's an",
    "start": "2747720",
    "end": "2754280"
  },
  {
    "text": "expression so the compar is going to be like you are an idiot because you're trying not to define a name but you're",
    "start": "2754280",
    "end": "2760400"
  },
  {
    "text": "trying to Define an expression as equals something which is ridiculous right you're not you can't do that so this is",
    "start": "2760400",
    "end": "2767000"
  },
  {
    "start": "2765000",
    "end": "2785000"
  },
  {
    "text": "not going to work as soon as you have an expression here that's not just exactly one",
    "start": "2767000",
    "end": "2772079"
  },
  {
    "text": "name you can't use this so you know I lost a few nights of sleep over that",
    "start": "2772079",
    "end": "2778119"
  },
  {
    "text": "because I ah so I need to kind of create like a temporary here and H it's not pleasant um here's what I came up with",
    "start": "2778119",
    "end": "2787559"
  },
  {
    "start": "2785000",
    "end": "3056000"
  },
  {
    "text": "well when one argument is not enough I'm going to Define two so synchronize with",
    "start": "2787559",
    "end": "2792920"
  },
  {
    "text": "two arguments and this is my name first and I'm assigning it from vwf Front and",
    "start": "2792920",
    "end": "2800800"
  },
  {
    "text": "inside I'm going to use the name first now anybody who's ever written one",
    "start": "2800800",
    "end": "2806800"
  },
  {
    "text": "macro is going to know that we're entering dangerous territory here because we have the same macroon name",
    "start": "2806800",
    "end": "2813480"
  },
  {
    "text": "used with one argument or two arguments arents and you kind of got to",
    "start": "2813480",
    "end": "2819559"
  },
  {
    "text": "distinguish the situations do you think it's doable",
    "start": "2819559",
    "end": "2826760"
  },
  {
    "text": "honest because I thought it's not doable for a long time and then I don't know one day I had the divine inspiration so",
    "start": "2826760",
    "end": "2833440"
  },
  {
    "text": "I did it so here is how it",
    "start": "2833440",
    "end": "2837558"
  },
  {
    "text": "works I'll start innocently Define AR one of a and any other number of",
    "start": "2839640",
    "end": "2845040"
  },
  {
    "text": "parameters a that gives me the first argument of any number of arguments nothing on my",
    "start": "2845040",
    "end": "2851960"
  },
  {
    "text": "sleeves Define AR two or one so if I call arc2 or one with two arguments is",
    "start": "2851960",
    "end": "2857440"
  },
  {
    "text": "going to give me the second argument but if I call it with one argument it's going to be give me the first argument and here's how it works",
    "start": "2857440",
    "end": "2864720"
  },
  {
    "text": "r21 V ARS comma V",
    "start": "2864720",
    "end": "2869920"
  },
  {
    "text": "ARs and R2 RPL of a b and any other argument is going to return B",
    "start": "2870079",
    "end": "2877599"
  },
  {
    "text": "so now let's see if you call ar2 or one with um one",
    "start": "2877599",
    "end": "2883559"
  },
  {
    "text": "argument uh X it's going to expand into r21 X comma",
    "start": "2883559",
    "end": "2891119"
  },
  {
    "text": "X and then is AR one to run of X comma X is",
    "start": "2891119",
    "end": "2897440"
  },
  {
    "text": "going to expand to AR you know it's going to expand to X comma X it's going to return X so that's what I wanted and",
    "start": "2897440",
    "end": "2904839"
  },
  {
    "text": "I'm done how about we call this guy ar21 with X comma y two arguments right in",
    "start": "2904839",
    "end": "2911359"
  },
  {
    "text": "that case I'm going to expand it to X comma y comma X comma Y X Y X Y right",
    "start": "2911359",
    "end": "2919119"
  },
  {
    "text": "because I'm doubling the veric arguments here and in this",
    "start": "2919119",
    "end": "2924200"
  },
  {
    "text": "case it's going to go into R2 or1 PL of X comma y comma X comma y so it's going",
    "start": "2924200",
    "end": "2931880"
  },
  {
    "text": "to give me y so if I call it with one argument it's going going to be me give me that argument if I call it with two",
    "start": "2931880",
    "end": "2939240"
  },
  {
    "text": "arguments it's going to be give me the second argument so I have two macros give me",
    "start": "2939240",
    "end": "2946200"
  },
  {
    "text": "the first argument give me the second or first argument are",
    "start": "2946200",
    "end": "2953359"
  },
  {
    "text": "ready ready for the next level here all right so uh we're there because we get",
    "start": "2953359",
    "end": "2961000"
  },
  {
    "text": "R2 or1 of V ARs and I'm getting ar1 here and it turns out it just works that way",
    "start": "2961000",
    "end": "2968280"
  },
  {
    "text": "so if you invoke this guy with synchronize with one argument you're going to get just like before but if you",
    "start": "2968280",
    "end": "2974319"
  },
  {
    "text": "invoke it with two arguments this operator arrow is going to be the second argument call against the second",
    "start": "2974319",
    "end": "2981079"
  },
  {
    "text": "argument and in this case I'm always seeing I'm always picking the first argument to define the variable so this",
    "start": "2981079",
    "end": "2987319"
  },
  {
    "text": "very macro is going to be usable with this EDM and that",
    "start": "2987319",
    "end": "2994520"
  },
  {
    "text": "EDM which is awesome I'm very happy I got to tell you this is one of those dirty",
    "start": "2994520",
    "end": "3001079"
  },
  {
    "text": "pleasures of life right it's you know I felt very satisfied in in a kind of in a",
    "start": "3001079",
    "end": "3007480"
  },
  {
    "text": "shameful way I should add by having written this okay great so now you know",
    "start": "3007480",
    "end": "3017880"
  },
  {
    "text": "um so recall C begin C end we sometimes want to specify even though this",
    "start": "3017880",
    "end": "3023440"
  },
  {
    "text": "particular expression is mutable I'm just I just want a const um a con lock a",
    "start": "3023440",
    "end": "3030400"
  },
  {
    "text": "reader lock so in that that case it's good to define a new macro which fortunately can reuse the existing",
    "start": "3030400",
    "end": "3036319"
  },
  {
    "text": "macros so we're good we just use this as con method here and uh whenever I say",
    "start": "3036319",
    "end": "3042640"
  },
  {
    "text": "synchronize con you know that inside you're going to have a reader lock and you'll be able only to call the con methods of that",
    "start": "3042640",
    "end": "3050359"
  },
  {
    "text": "guy so terrific",
    "start": "3050359",
    "end": "3057440"
  },
  {
    "start": "3056000",
    "end": "3241000"
  },
  {
    "text": "all right",
    "start": "3057440",
    "end": "3060200"
  },
  {
    "text": "so this code ex yes is this macro used in Facebook this macro is used at",
    "start": "3062720",
    "end": "3069599"
  },
  {
    "text": "Facebook and actually like there's uh 7,000 something uses of it is that right",
    "start": "3069599",
    "end": "3076680"
  },
  {
    "text": "it's it's in the thousands of us of course the code Bas is much larger but you know it's it's used",
    "start": "3076680",
    "end": "3082920"
  },
  {
    "text": "intensively sh you don't get shadowing warnings all the time no actually um I'm",
    "start": "3082920",
    "end": "3088720"
  },
  {
    "text": "not sure if that warning is explicitly suppressed or if uh it's just do you",
    "start": "3088720",
    "end": "3094400"
  },
  {
    "text": "know okay well I got to get back to you on that so um I remember there's a there's a discussion about that and",
    "start": "3094400",
    "end": "3100520"
  },
  {
    "text": "people are like you know what I like shadowing things all the time so I'm not going to oh and actually I remember the problem um there are some globals that",
    "start": "3100520",
    "end": "3107640"
  },
  {
    "text": "people defined and uh you know those these shadowing warnings were too many false positives and people didn't like",
    "start": "3107640",
    "end": "3113960"
  },
  {
    "text": "it so they didn't enable that warning I remember um Jim mying a former coworker he really wanted to introduce this",
    "start": "3113960",
    "end": "3120280"
  },
  {
    "text": "warning and everybody protested so it didn't you know it didn't take",
    "start": "3120280",
    "end": "3127319"
  },
  {
    "text": "yes can you implement this as a function taken Lambda I think you can implement this as a function taken Lambda instead",
    "start": "3130559",
    "end": "3136559"
  },
  {
    "text": "of a macro right uh yes it would be a bit more quirky syntactically but you",
    "start": "3136559",
    "end": "3141880"
  },
  {
    "text": "can do it you can say lock this subject call this Lambda unlock the object yes",
    "start": "3141880",
    "end": "3148359"
  },
  {
    "text": "Anthony so there is so it's it's not there yet it's uh",
    "start": "3154079",
    "end": "3161000"
  },
  {
    "text": "it's going to be like Year 3,000 or something okay awesome thank you that's great",
    "start": "3161000",
    "end": "3169599"
  },
  {
    "text": "yes in did I have any argument of using volatile no actually this works better",
    "start": "3173240",
    "end": "3179440"
  },
  {
    "text": "because like I noticed that um people have um like people have like a very",
    "start": "3179440",
    "end": "3185200"
  },
  {
    "text": "strong emotional reaction when they see volatile uh they like oh this can't possibly work and they stop there it's",
    "start": "3185200",
    "end": "3192000"
  },
  {
    "text": "it's like a psychological barrier that I found it's unpassable so I'm very happy that this whole constant mutable thing",
    "start": "3192000",
    "end": "3198480"
  },
  {
    "text": "works properly with uh with STL containers and it actually works with a lot of userdefined data to be honest I",
    "start": "3198480",
    "end": "3204400"
  },
  {
    "text": "you know you don't use mutable data every day and you don't use uh you know static state every day right so um I'm",
    "start": "3204400",
    "end": "3211760"
  },
  {
    "text": "happy with the State of Affairs and I kind of redge that uh that old article",
    "start": "3211760",
    "end": "3219240"
  },
  {
    "text": "yes as long as you don't have operator",
    "start": "3221000",
    "end": "3225640"
  },
  {
    "text": "dot uh is the macro confusing by the use of the arrow if you want to lock the",
    "start": "3230480",
    "end": "3236839"
  },
  {
    "text": "object on the Fly versus dot if you don't lock the object on the Fly um this",
    "start": "3236839",
    "end": "3242599"
  },
  {
    "start": "3241000",
    "end": "3245000"
  },
  {
    "text": "common came a couple of times so let me kind of make sure I understood what you mean um same mean this like Arrow here",
    "start": "3242599",
    "end": "3250200"
  },
  {
    "start": "3245000",
    "end": "3377000"
  },
  {
    "text": "right and",
    "start": "3250200",
    "end": "3252799"
  },
  {
    "text": "here yeah so that's a so here you use the dot and if you don't use a synchronized pseudo stat mon you just",
    "start": "3259920",
    "end": "3265799"
  },
  {
    "text": "use the arrow um people mention that actually let me add this you it's easy",
    "start": "3265799",
    "end": "3271200"
  },
  {
    "text": "to implement a macro to force you to use the arrow in both cases um I chose to",
    "start": "3271200",
    "end": "3277280"
  },
  {
    "text": "allow people to use the dot because the that pointer can never be null so um I'm",
    "start": "3277280",
    "end": "3282640"
  },
  {
    "text": "not you know I don't think it's a huge problem I think people just you know get used to",
    "start": "3282640",
    "end": "3288680"
  },
  {
    "text": "it in of magic would it be possible to",
    "start": "3288680",
    "end": "3293838"
  },
  {
    "text": "have",
    "start": "3294079",
    "end": "3297079"
  },
  {
    "text": "can you use an acquir method in the object that returns a",
    "start": "3303440",
    "end": "3308400"
  },
  {
    "text": "lock um well I got to take this softline because I'm not sure I understand how how this would work so it would be",
    "start": "3310400",
    "end": "3316280"
  },
  {
    "text": "instead of the arrow there would be an explicit",
    "start": "3316280",
    "end": "3320078"
  },
  {
    "text": "call which you can use I guess you could um so just to make",
    "start": "3324000",
    "end": "3331799"
  },
  {
    "text": "sure I understand so essentially instead of the synchronized macro you would uh have a method and you would it would",
    "start": "3331799",
    "end": "3338440"
  },
  {
    "text": "return an object and then you use that object and then get rid of that object and is that you would get a reference to",
    "start": "3338440",
    "end": "3345039"
  },
  {
    "text": "you get an an a reference to ah yeah",
    "start": "3345039",
    "end": "3350160"
  },
  {
    "text": "uh um yeah I got to look at it to make sure how but anyhow you you open you",
    "start": "3350160",
    "end": "3356280"
  },
  {
    "text": "open with instead of a magic macro at that point my brain stopped because like no instead of magic macro it was nothing",
    "start": "3356280",
    "end": "3362839"
  },
  {
    "text": "else I would use a magic macro period thank you very much so um a magic macro",
    "start": "3362839",
    "end": "3369359"
  },
  {
    "text": "is like kind of cool and you know I have the suspicion that the C+ standardization committee defined app PL",
    "start": "3369359",
    "end": "3375280"
  },
  {
    "text": "just because they didn't know how to do this ARS one and two this thing how about",
    "start": "3375280",
    "end": "3381160"
  },
  {
    "start": "3377000",
    "end": "3387000"
  },
  {
    "text": "that all right so um further reading are getting",
    "start": "3381160",
    "end": "3387559"
  },
  {
    "start": "3387000",
    "end": "3600000"
  },
  {
    "text": "there all right further reading so um just Google for f synchronize you're",
    "start": "3387559",
    "end": "3394119"
  },
  {
    "text": "going to find it on GitHub in Facebook repository it's um I I'm very happy to report that it's uh it's been used uh",
    "start": "3394119",
    "end": "3401319"
  },
  {
    "text": "it's been used quite a bit um there's like you know there's a number of uh other methods that I didn't discuss",
    "start": "3401319",
    "end": "3407559"
  },
  {
    "text": "because they're trivial there's time locking there's an interesting other magic macro unsynchronized which inside",
    "start": "3407559",
    "end": "3414079"
  },
  {
    "text": "the synchronized St just what happens sometimes you want to get rid of it so you have synchronized you open a scope",
    "start": "3414079",
    "end": "3420119"
  },
  {
    "text": "you do and you're like ah at this point I'm kind of tired of being synchronized so let me UNS synchronize the following",
    "start": "3420119",
    "end": "3426280"
  },
  {
    "text": "operations so you open a new scope with unsynchronized and then you write some unsynchronized code and you close that",
    "start": "3426280",
    "end": "3432039"
  },
  {
    "text": "guy you're back to synchronization it turns out it's necess it's good to have and synchronized dual is a macro that",
    "start": "3432039",
    "end": "3439760"
  },
  {
    "text": "allows you to synchronize on two objects at the same time by doing that trick of locking them ining increasing order of",
    "start": "3439760",
    "end": "3445839"
  },
  {
    "text": "of the address right so I can take a few more",
    "start": "3445839",
    "end": "3450920"
  },
  {
    "text": "questions yes when so easy to Dr down interface concurrently like this can it",
    "start": "3450920",
    "end": "3458559"
  },
  {
    "text": "easily happen that you do make concurrency errors using the",
    "start": "3458559",
    "end": "3465759"
  },
  {
    "text": "API do you make uh do you allow concurrency errors by using this uh",
    "start": "3467839",
    "end": "3475200"
  },
  {
    "text": "things like",
    "start": "3475200",
    "end": "3477558"
  },
  {
    "text": "this um I so you're asking I'm making it too easy to okay um that argument can be",
    "start": "3481640",
    "end": "3490359"
  },
  {
    "text": "made and has been made so on the other hand this is C++ I mean you're you're trusting what the people know what",
    "start": "3490359",
    "end": "3496599"
  },
  {
    "text": "they're doing to some extent and uh it turns out very often for highly granular",
    "start": "3496599",
    "end": "3501640"
  },
  {
    "text": "objects you do want to lock the object colum method unlock the object quite often um so you know um I'll let it to",
    "start": "3501640",
    "end": "3509760"
  },
  {
    "text": "you to decide the argument can be made I I do agree um I I could be more",
    "start": "3509760",
    "end": "3515559"
  },
  {
    "text": "difficult like just say SV do you know um make sure what you're doing open",
    "start": "3515559",
    "end": "3521480"
  },
  {
    "text": "close for you know that kind of function yes there's another other",
    "start": "3521480",
    "end": "3528359"
  },
  {
    "text": "questions yes how's debugging how's debugging stepping through all these mag",
    "start": "3528359",
    "end": "3534319"
  },
  {
    "text": "Macos stuff is that you know I'm having difficulty answering this question because um like how's debugging going",
    "start": "3534319",
    "end": "3541200"
  },
  {
    "text": "with like stepbystep debugging and stuff um I have difficulty with this question because um I I never need to debug my",
    "start": "3541200",
    "end": "3548350"
  },
  {
    "text": "[Laughter] programs it's like it's an unknown territory to me all my programs work",
    "start": "3548350",
    "end": "3554559"
  },
  {
    "text": "from the first go so I have no idea",
    "start": "3554559",
    "end": "3559640"
  },
  {
    "text": "um I suspect debugging goes just uh you know macros have have the usual issues",
    "start": "3559640",
    "end": "3565559"
  },
  {
    "text": "debugging um step by step is going to keep the object locked inside the synchronous method so it's probably the",
    "start": "3565559",
    "end": "3570760"
  },
  {
    "text": "usual suspects um but I don't think there's anything",
    "start": "3570760",
    "end": "3575839"
  },
  {
    "text": "sort of new or interesting in the debugging space brought about by uh by this uh the use of these functions and",
    "start": "3575839",
    "end": "3582920"
  },
  {
    "text": "macros yes remember the original lock pass away",
    "start": "3582920",
    "end": "3588400"
  },
  {
    "text": "Vol",
    "start": "3588400",
    "end": "3591400"
  },
  {
    "text": "yes",
    "start": "3593640",
    "end": "3596640"
  },
  {
    "text": "so getting back to the lock pointer that use volatile and nonvolatile and you yes",
    "start": "3602240",
    "end": "3607319"
  },
  {
    "text": "so what is the what's the question question is you could",
    "start": "3607319",
    "end": "3612359"
  },
  {
    "text": "use yeah you could so if you could take uh sort of a temporary object and use it",
    "start": "3617839",
    "end": "3623079"
  },
  {
    "text": "in knowledge that that's a locked object object um yes definitely there I think there are a number of other edms that",
    "start": "3623079",
    "end": "3629000"
  },
  {
    "text": "you could use um around this uh this C+ standard rule uh about STL containers so",
    "start": "3629000",
    "end": "3636480"
  },
  {
    "text": "um I happen to like this one it's uh it's very it's very convenient and very thirst but definitely you can make it",
    "start": "3636480",
    "end": "3642920"
  },
  {
    "text": "more explicit if you so wanted all right last",
    "start": "3642920",
    "end": "3649760"
  },
  {
    "text": "question all right you've been awesome thank you so much thank you",
    "start": "3649760",
    "end": "3656520"
  },
  {
    "text": "it's fun to see thank you thank you very much thank",
    "start": "3663119",
    "end": "3668480"
  },
  {
    "text": "you",
    "start": "3671000",
    "end": "3674000"
  }
]