[
  {
    "start": "0",
    "end": "191000"
  },
  {
    "text": "hey looks like we are live i'm just gonna take a step back because when i can actually see you guys there's",
    "start": "8240",
    "end": "14400"
  },
  {
    "text": "so much bright light coming at me thank you very much for showing up under these circumstances i'm really happy to see uh",
    "start": "14400",
    "end": "20560"
  },
  {
    "text": "people here i was a bit afraid um and let me get something off my chest right",
    "start": "20560",
    "end": "26400"
  },
  {
    "text": "away i might have lured you here on the false pretenses so who can claim best practices in this world",
    "start": "26400",
    "end": "33280"
  },
  {
    "text": "i think maybe if you have a certain fowler you can get away with that um so",
    "start": "33280",
    "end": "39120"
  },
  {
    "text": "what i hopefully will give you here is good ideas right they're not going to be dogmatic i'm not",
    "start": "39120",
    "end": "45520"
  },
  {
    "text": "going to go and tell you this is what you always must do this is good ideas for inspiration i hope they're good ideas",
    "start": "45520",
    "end": "51440"
  },
  {
    "text": "and i hope you will enjoy them and if you don't give me feedback right or",
    "start": "51440",
    "end": "57600"
  },
  {
    "text": "if you have some input i i want to learn like everybody here right so",
    "start": "57600",
    "end": "63520"
  },
  {
    "text": "with expectations sufficiently lowered i hope we can get going and maybe i can get you from a red card over to a green",
    "start": "63520",
    "end": "69439"
  },
  {
    "text": "card by the end of this talk so who am i uh well my name is eagle and i'm from denmark i",
    "start": "69439",
    "end": "76159"
  },
  {
    "text": "live in iceland so and now we're here in norway so we have almost just missing sweden in there",
    "start": "76159",
    "end": "81520"
  },
  {
    "text": "somehow and then we have the whole scandinavia almost you can find me on twitter at eaglehensen and if you uh",
    "start": "81520",
    "end": "89040"
  },
  {
    "text": "are watching this from the future or just from your hotel room right now feel free to tweet at me i love to answer questions and help out so that's okay",
    "start": "89040",
    "end": "96640"
  },
  {
    "text": "i am a developer at this great company uh delegate danish i.t consultancy we",
    "start": "96640",
    "end": "101840"
  },
  {
    "text": "specialize in in mice the microsoft ecosystem so everything from low code solutions all the way to you know big",
    "start": "101840",
    "end": "108320"
  },
  {
    "text": "custom solutions in asia and and you know building on the newest news latest.net tech",
    "start": "108320",
    "end": "114320"
  },
  {
    "text": "we have a bunch of these diggers on our website i'm not sure what they exactly mean but if some of this sounds interesting to you we always looking",
    "start": "114320",
    "end": "120399"
  },
  {
    "text": "like everybody else i guess uh for for a new talent for great talent uh so if if any of this sounded something",
    "start": "120399",
    "end": "126880"
  },
  {
    "text": "interesting to you feel free to reach out to me and and and let's talk right anyway",
    "start": "126880",
    "end": "132879"
  },
  {
    "text": "i'm also microsoft mvp but more importantly for this talk i am the creator of b units the testing library",
    "start": "132879",
    "end": "138560"
  },
  {
    "text": "we will cover here if you um for some reason or another would like to see more of me you can do",
    "start": "138560",
    "end": "144560"
  },
  {
    "text": "so uh i try to be very very regular live streaming on twitch just coding on b unit or other open source things and",
    "start": "144560",
    "end": "151760"
  },
  {
    "text": "feel free to come and hang out and ask your questions or just you know make",
    "start": "151760",
    "end": "156879"
  },
  {
    "text": "fun of me everything is valid there quick disclaimer i don't know how many",
    "start": "156879",
    "end": "162160"
  },
  {
    "text": "of you attended chris sainz's workshop earlier this week or just have a general knowledge of blazer",
    "start": "162160",
    "end": "167440"
  },
  {
    "text": "and testing in general but i won't cover those concepts here so it's not a beginner",
    "start": "167440",
    "end": "172480"
  },
  {
    "text": "talk of covering blazer or just testing so if you're completely new to that that's",
    "start": "172480",
    "end": "177680"
  },
  {
    "text": "going to be some words today that you might not understand that's okay you can ask afterwards if you like",
    "start": "177680",
    "end": "183280"
  },
  {
    "text": "okay so let's start with the first question what is b unit and why do i need it",
    "start": "183280",
    "end": "189120"
  },
  {
    "text": "and well the first question would be what is b unit so",
    "start": "189120",
    "end": "194319"
  },
  {
    "start": "191000",
    "end": "191000"
  },
  {
    "text": "b unit is a is a library a library obviously for testing basic components but",
    "start": "194319",
    "end": "200800"
  },
  {
    "text": "the reason why i sort of underline library is because it's not a testing framework like you would normally use",
    "start": "200800",
    "end": "207200"
  },
  {
    "text": "for writing your test like you would use x unit or n unit or ms test those are test frameworks be units library that",
    "start": "207200",
    "end": "212879"
  },
  {
    "text": "you add on top of that similarly to what you do when you add something like a fluent assertions library or",
    "start": "212879",
    "end": "220000"
  },
  {
    "text": "or a mocking library so beyond something that we add on top of our testing frameworks in a similar way it's a",
    "start": "220000",
    "end": "226080"
  },
  {
    "text": "library that enables us to test laser components obviously that also means that b units",
    "start": "226080",
    "end": "233120"
  },
  {
    "text": "will well b unit tests will sort of look and behave exactly the same as your regular unit test right so because it's",
    "start": "233120",
    "end": "240239"
  },
  {
    "text": "just something we add on top of our existing testing library that also means that we can reuse all the goods patterns",
    "start": "240239",
    "end": "246080"
  },
  {
    "text": "and practices we have around structuring our tests you can write you can basically continue writing your tests",
    "start": "246080",
    "end": "251200"
  },
  {
    "text": "like you would normally in in b unit one thing i do want to highlight that",
    "start": "251200",
    "end": "256639"
  },
  {
    "text": "might surprise people that have maybe done some selenium testing or similar",
    "start": "256639",
    "end": "262079"
  },
  {
    "text": "front-end testing previously in the net ecosystem where you have a browser involved where",
    "start": "262079",
    "end": "268400"
  },
  {
    "text": "maybe selenium is sort of it will spin up a browser in the background and it will hook into that and instrument that",
    "start": "268400",
    "end": "273919"
  },
  {
    "text": "and look at what the markup is being generated and you can sort of interact with your application on the",
    "start": "273919",
    "end": "279520"
  },
  {
    "text": "test through selenium but b unit doesn't do any of that and that also means it doesn't run any of your javascript so",
    "start": "279520",
    "end": "287520"
  },
  {
    "text": "it runs entirely under the for example x unit runner and everything in there will",
    "start": "287520",
    "end": "294240"
  },
  {
    "text": "there's no javascript engine in that so if you have a component or an application blaze application that uses",
    "start": "294240",
    "end": "300720"
  },
  {
    "text": "some javascript well your javascript won't be tested with b unit while you are testing your components",
    "start": "300720",
    "end": "306880"
  },
  {
    "text": "what we do have in b unit is a way for you to set up those expectations",
    "start": "306880",
    "end": "312080"
  },
  {
    "text": "very much like a mocking library where you can say well i expect my component to make this call to javascript to the",
    "start": "312080",
    "end": "317360"
  },
  {
    "text": "ijs runtime and that way you can sort of test the expected interaction",
    "start": "317360",
    "end": "322880"
  },
  {
    "text": "and i think most place applications actually don't have too complex javascript most",
    "start": "322880",
    "end": "327919"
  },
  {
    "text": "of the javascript we will have in our applications it's not application logic it's more like enabling us to call maybe",
    "start": "327919",
    "end": "334479"
  },
  {
    "text": "some browser apis so for the most part that's not going to be a problem uh but if you have complexion",
    "start": "334479",
    "end": "341120"
  },
  {
    "text": "text maybe you're building a complex uh component library where you do have a need to sort of do that in trend testing",
    "start": "341120",
    "end": "346720"
  },
  {
    "text": "maybe look at at uh what it's not storytelling but the the new thing that microsoft is also coming",
    "start": "346720",
    "end": "353440"
  },
  {
    "text": "out with for instance website testing that's going to be the option you want to go with",
    "start": "353440",
    "end": "358560"
  },
  {
    "text": "and um but the advantage of bu not running any",
    "start": "358560",
    "end": "363680"
  },
  {
    "text": "browser under the hood and not doing any of the usual end-to-end browser front-end testing is that the test runs",
    "start": "363680",
    "end": "369600"
  },
  {
    "text": "just like regular unit tests they run fast like we're talking milliseconds here on a regular pc so you get the",
    "start": "369600",
    "end": "376000"
  },
  {
    "text": "speed and benefit and you also get we also have fairly deep hooks into the blazer render which means that we can",
    "start": "376000",
    "end": "382080"
  },
  {
    "text": "make the tests quite a bit more stable and predictable so but let's get",
    "start": "382080",
    "end": "387919"
  },
  {
    "text": "let's see just what i mean by that so here we have a regular x unit cs project file from",
    "start": "387919",
    "end": "393919"
  },
  {
    "text": "the.net 6 error and we need to make a few modifications so that to enable b unit so the first thing we want to do is",
    "start": "393919",
    "end": "400000"
  },
  {
    "text": "we want to add the change the sdk to to be the microsoft.net sdk razer type because",
    "start": "400000",
    "end": "407680"
  },
  {
    "text": "we need to write razor files in our test library so that's all we need to do and although obviously we need to add b unit",
    "start": "407680",
    "end": "413440"
  },
  {
    "text": "as well as a packet reference and that's all you need to do the next question we might quickly want",
    "start": "413440",
    "end": "418960"
  },
  {
    "text": "to cover is why do we actually need b units so a blazer component itself is just when",
    "start": "418960",
    "end": "425599"
  },
  {
    "text": "you look at the generated markup from a blazer component or just create one manually just to see in the sharp class",
    "start": "425599",
    "end": "431599"
  },
  {
    "text": "it's actually just a c-sharp class right so when i before i built b unit i wanted to test my blazer components and i was",
    "start": "431599",
    "end": "437680"
  },
  {
    "text": "like let me just new that thing up and try to test it from just the next unit chest phone but",
    "start": "437680",
    "end": "443440"
  },
  {
    "text": "you quite quickly realize when you attempt that that well you need a few things",
    "start": "443440",
    "end": "448880"
  },
  {
    "text": "so components have life cycle methods and sort of to to be truthful to the",
    "start": "448880",
    "end": "454880"
  },
  {
    "text": "environment that a component would be used in in production you have to emulate that life cycle and and call",
    "start": "454880",
    "end": "460800"
  },
  {
    "text": "them methods at the right time under the right circumstances right so we have to do that that's something",
    "start": "460800",
    "end": "466319"
  },
  {
    "text": "beard will help you with another thing but helps you help you with is passing parameters and injecting services into",
    "start": "466319",
    "end": "471759"
  },
  {
    "text": "your components at the right time in the right way that the laser runtime does it as well another thing the unit does is",
    "start": "471759",
    "end": "478479"
  },
  {
    "text": "allow you to call event handlers so event handlers can sometimes just be public methods on your components",
    "start": "478479",
    "end": "484000"
  },
  {
    "text": "sometimes they are actually just inline lambdas on the markup itself that's going to make them a bit harder to call",
    "start": "484000",
    "end": "489919"
  },
  {
    "text": "most of the time i would assume they're going to be private methods that you have in your components so again it's",
    "start": "489919",
    "end": "495039"
  },
  {
    "text": "kind of hard to call them in a test spirit will help you with that as well and",
    "start": "495039",
    "end": "501280"
  },
  {
    "text": "when you think about it the architecture of blazer works such that a laser component doesn't actually",
    "start": "501280",
    "end": "508080"
  },
  {
    "text": "know how to render markup output it sort of contains this description of",
    "start": "508080",
    "end": "513839"
  },
  {
    "text": "what we want to produce through the razer language which is a template language and then we need something else",
    "start": "513839",
    "end": "519360"
  },
  {
    "text": "to turn that template into markup that we can show on screen to the users and that is also something that that is also",
    "start": "519360",
    "end": "526160"
  },
  {
    "text": "why we need actually a real blazer runtime underneath the hood to do that for us and luckily that is basically",
    "start": "526160",
    "end": "531360"
  },
  {
    "text": "what being you know this being it builds on the existing laser run time and the blazer renderer but just instead of",
    "start": "531360",
    "end": "538240"
  },
  {
    "text": "sending that output to a browser well we capture that so that you can inspect and work with that output from the component",
    "start": "538240",
    "end": "544240"
  },
  {
    "text": "we capture the instance of the component so you can inspect that as well if you need to so that is why being used is",
    "start": "544240",
    "end": "549920"
  },
  {
    "text": "necessary so what does the hello world of the unit look like so we've all seen this component i i is there any blazer",
    "start": "549920",
    "end": "556800"
  },
  {
    "start": "552000",
    "end": "552000"
  },
  {
    "text": "developers in here that haven't seen this component before this is the counter component and in case you've forgotten what it looks like you have",
    "start": "556800",
    "end": "563040"
  },
  {
    "text": "that button and you click it on the counter increment so what is the test for this how does this test look",
    "start": "563040",
    "end": "569040"
  },
  {
    "text": "well to begin with uh obviously we are going to go into eraser file so this is a",
    "start": "569040",
    "end": "574320"
  },
  {
    "start": "570000",
    "end": "570000"
  },
  {
    "text": "counter test.razer file and and uh",
    "start": "574320",
    "end": "579920"
  },
  {
    "text": "the first thing we need to do is obviously have a x unit i'm using x unit in this case so we have an actual test",
    "start": "579920",
    "end": "585200"
  },
  {
    "text": "here and the first thing we need to do in that test is to new up a test context so the test context you're going to see",
    "start": "585200",
    "end": "590240"
  },
  {
    "text": "that all through this talk it's a b unit thing that's the thing that allows you to do things with a razor component so",
    "start": "590240",
    "end": "596080"
  },
  {
    "text": "when we have one of those well we can call its render method and we pass in the counter component tell it",
    "start": "596080",
    "end": "602000"
  },
  {
    "text": "to render the counter component the result of that is an eye rendered fragment and it's abbreviated the variable is re",
    "start": "602000",
    "end": "608000"
  },
  {
    "text": "abbreviated cut for component under test so if you know uh regular testing nomenclature that",
    "start": "608000",
    "end": "613839"
  },
  {
    "text": "would be system under test normally but i sort of changed that to big components that makes sense to me so now we have",
    "start": "613839",
    "end": "619360"
  },
  {
    "text": "the component now we need to click that button and how do we do that well we can go ahead and actually use a css selector",
    "start": "619360",
    "end": "626480"
  },
  {
    "text": "through the find method to go and walk into the document object model so we actually have a full document object",
    "start": "626480",
    "end": "632560"
  },
  {
    "text": "model through the angle sharp library that we're using under the hood to go in and and find",
    "start": "632560",
    "end": "638240"
  },
  {
    "text": "elements document objects in the dom tree that was produced by the counter component and we're going to",
    "start": "638240",
    "end": "643839"
  },
  {
    "text": "look for the button component and then we will call the click method click method is a",
    "start": "643839",
    "end": "649200"
  },
  {
    "text": "event trigger method that will go ahead and trigger that unclick event handler method that was on the button",
    "start": "649200",
    "end": "656320"
  },
  {
    "text": "component in in the class in the components and once we've done that well now we go",
    "start": "656320",
    "end": "661839"
  },
  {
    "text": "ahead and find the paragraph component the p tag in our component and then we use this method here called markup",
    "start": "661839",
    "end": "667920"
  },
  {
    "text": "matches it's a custom assertion method in p unit that will allow us to pass in some magnum that we now expect the",
    "start": "667920",
    "end": "673760"
  },
  {
    "text": "paragraph component to contain in this case we want the we want the the one uh to be incremented from zero",
    "start": "673760",
    "end": "681279"
  },
  {
    "text": "to one so now we should set current count as one and and so if you haven't seen a b unit test before you might sort",
    "start": "681279",
    "end": "687920"
  },
  {
    "text": "of wonder what are these things i've highlighted in red here uh and it's",
    "start": "687920",
    "end": "693600"
  },
  {
    "text": "inline render and it's a weird it's a mouthful ringline render fragment i think it's",
    "start": "693600",
    "end": "698720"
  },
  {
    "text": "actually have a more official name but i call it inline render fragments so this is sort of amazing that you can in",
    "start": "698720",
    "end": "705120"
  },
  {
    "text": "in blazer you can actually have a razer file where you start out with an eraser context then you add the code block and",
    "start": "705120",
    "end": "710800"
  },
  {
    "text": "then you go into c-sharp context but then from the code block in physicians from c-sharp content you can actually get in the back into razer context and",
    "start": "710800",
    "end": "717519"
  },
  {
    "text": "write markup just like you would with code and you have syntax highlighting you have intellisense on the html so",
    "start": "717519",
    "end": "723680"
  },
  {
    "text": "that makes it much easier to to to sort of describe the component you want to test pass",
    "start": "723680",
    "end": "728880"
  },
  {
    "text": "parameters to it and also provide markup that you want to verify against and you can obviously run and write your test in",
    "start": "728880",
    "end": "735760"
  },
  {
    "text": "c sharp then you don't get access to this notation then you have to use sort of a builder pattern i have around that for example to pass parameters and you",
    "start": "735760",
    "end": "742480"
  },
  {
    "text": "have to use strings when you want to verify markup like this and that can be a little tedious if you want to escape so attributes for example that that's",
    "start": "742480",
    "end": "749200"
  },
  {
    "text": "things like you you have to escape in that case so now that we have a test how do you run it so running a b unit test is just like",
    "start": "749200",
    "end": "755839"
  },
  {
    "start": "753000",
    "end": "753000"
  },
  {
    "text": "running any other dot net test basically if you can run from the test you can run",
    "start": "755839",
    "end": "761200"
  },
  {
    "text": "b unit test i've added a extra argument here to get us a better a little bit of better logging output so when we run the",
    "start": "761200",
    "end": "767600"
  },
  {
    "text": "test we get that one and then you can see the test run and everything is happy and everything is green that's good so",
    "start": "767600",
    "end": "775839"
  },
  {
    "text": "now that you know how to do build b unit tests the next",
    "start": "776720",
    "end": "781760"
  },
  {
    "text": "question you might want to answer or ask is what do i actually verify do i look at the markup",
    "start": "781760",
    "end": "787760"
  },
  {
    "text": "or do i test a component functionality or something completely different",
    "start": "787760",
    "end": "793200"
  },
  {
    "text": "so let's cover that",
    "start": "793200",
    "end": "797000"
  },
  {
    "text": "so let's start by what i would call functionality testing or component logic testing",
    "start": "802880",
    "end": "808480"
  },
  {
    "start": "804000",
    "end": "804000"
  },
  {
    "text": "i don't know how many of you have seen the blazing pizza workshop before a few of",
    "start": "808480",
    "end": "814079"
  },
  {
    "text": "you okay if you haven't uh there are some urls at the bottom of the slide here you can you can go and",
    "start": "814079",
    "end": "819440"
  },
  {
    "text": "check that out it's uh it's if if you fell in youtube blazer it's a great workshop to work through you would see",
    "start": "819440",
    "end": "824480"
  },
  {
    "text": "those two urls up there one of them is uh to a not a new version of the workshop but",
    "start": "824480",
    "end": "829760"
  },
  {
    "text": "it's sort of it has a version of the workshop where i've added tests for for all the components and there's also a",
    "start": "829760",
    "end": "836079"
  },
  {
    "text": "whole video series and did online on twitch where i go through the full workshop it's like a 12 uh like 24 hours",
    "start": "836079",
    "end": "841760"
  },
  {
    "text": "something total so you might want to fast forward through some of the bits but anyway in this case we just have a",
    "start": "841760",
    "end": "848639"
  },
  {
    "text": "dialogue box so my user has selected a pizza they want to buy the buffalo chicken and now they have the option of",
    "start": "848639",
    "end": "854800"
  },
  {
    "text": "adding extra toppings so that is sort of the component on the test we want to test so how would we test the",
    "start": "854800",
    "end": "860160"
  },
  {
    "text": "functionality of that component so first obviously we need our tests so",
    "start": "860160",
    "end": "866240"
  },
  {
    "text": "selecting toppings from drop down adds it to pizza so what do we want to add here well first we need a test context",
    "start": "866240",
    "end": "873680"
  },
  {
    "text": "and then we add a p then we need a new pizza and now we can go ahead and render our",
    "start": "873680",
    "end": "878720"
  },
  {
    "text": "component and then configure the configure pizza dialog and we pass in the pizza",
    "start": "878720",
    "end": "885120"
  },
  {
    "text": "so it might look like i'm actually passing in the string pizza here but it actually",
    "start": "885120",
    "end": "890639"
  },
  {
    "text": "works just like it works in real race or markup it's actually that pizza variable there is pointing all the way up to the",
    "start": "890639",
    "end": "897279"
  },
  {
    "text": "pizza we have instantiated just on the line above so the next thing we need to do is we need to go into again using the find",
    "start": "897279",
    "end": "903920"
  },
  {
    "text": "method and passing in the css selector that will allow us to find the select drop-down list and then we just call the",
    "start": "903920",
    "end": "910959"
  },
  {
    "text": "change method on that that is a callback that will trigger the unchanged event",
    "start": "910959",
    "end": "916079"
  },
  {
    "text": "handler that is bound to the list drop-down or sorry of the drop-down list and that will change it to a topping",
    "start": "916079",
    "end": "923360"
  },
  {
    "text": "value and now our assertion would be well now we assure that the pizza toppings list is no longer empty so the",
    "start": "923360",
    "end": "929440"
  },
  {
    "text": "key thing here about the functionality testing is that we have very little tie into the marker that is actually rendered by the component the only thing",
    "start": "929440",
    "end": "936079"
  },
  {
    "text": "we really focus on is the we have a bit we're a little bit tired",
    "start": "936079",
    "end": "941600"
  },
  {
    "text": "to to the markup in a way that we have a selecting so a select there uh where we go and pick out something from the dom",
    "start": "941600",
    "end": "947920"
  },
  {
    "text": "but all the other markup that's been generated all the drop down and everything inside of that we don't really care about that so that means",
    "start": "947920",
    "end": "954399"
  },
  {
    "text": "that our component sorry this test for the component is likely going to keep",
    "start": "954399",
    "end": "959680"
  },
  {
    "text": "working and keep being green even if we go and change around a few things in the markup add another attribute or something to the",
    "start": "959680",
    "end": "966000"
  },
  {
    "text": "drop down list or change the styling for example so this is sort of what you get with functionality testing you poke at",
    "start": "966000",
    "end": "971920"
  },
  {
    "text": "the thing and you watch it react to what you do another thing we can do this week if",
    "start": "971920",
    "end": "977199"
  },
  {
    "start": "976000",
    "end": "976000"
  },
  {
    "text": "it's important you can go and verify markup and and you might want to do that",
    "start": "977199",
    "end": "983120"
  },
  {
    "text": "if you for example have a designer or you are the designer of the company that told you that this css and this markup",
    "start": "983120",
    "end": "988320"
  },
  {
    "text": "goes together and if they know if the markup isn't exactly like this well then we have a problem because when things",
    "start": "988320",
    "end": "993920"
  },
  {
    "text": "don't work as expected out in the browser so sometimes it actually makes sense to go ahead and",
    "start": "993920",
    "end": "999360"
  },
  {
    "text": "verify markup that is produced and historically that has been a bit",
    "start": "999360",
    "end": "1004480"
  },
  {
    "text": "hard and because if you take a string of html and compared to another string of html",
    "start": "1004480",
    "end": "1010480"
  },
  {
    "text": "you can do a lot of things to that original string of html that will still make it semantically the",
    "start": "1010480",
    "end": "1015839"
  },
  {
    "text": "same but will not really actually be",
    "start": "1015839",
    "end": "1021120"
  },
  {
    "text": "if the string equals won't work it will like break the test even though the markup is actually still fine so",
    "start": "1021120",
    "end": "1027280"
  },
  {
    "text": "the point here i want to make is if you want to verify markup do it semantically and b unit has a semantic compare that",
    "start": "1027280",
    "end": "1032880"
  },
  {
    "text": "we can help that can help us do that so semantic comparison means that two html bits are the same",
    "start": "1032880",
    "end": "1039199"
  },
  {
    "text": "if they actually look the same to the user on the browser the opposite is obviously what i told you before is that",
    "start": "1039199",
    "end": "1044240"
  },
  {
    "text": "well if you use string comparison well then you're going to have a harder time making that test stay green every time",
    "start": "1044240",
    "end": "1049840"
  },
  {
    "text": "you do a little bit of refactoring move around white space let's look at an example so sort of to get the point across",
    "start": "1049840",
    "end": "1055840"
  },
  {
    "text": "so suppose we have this button style dialogues buttons uh razor component with this simple markup in it and we",
    "start": "1055840",
    "end": "1062480"
  },
  {
    "start": "1056000",
    "end": "1056000"
  },
  {
    "text": "have this test that ver that verifies that the markup is correct and the the three the key here is is the markup",
    "start": "1062480",
    "end": "1069360"
  },
  {
    "text": "matches method that's built into b unit that is the semantic comparator that is built into the unit so",
    "start": "1069360",
    "end": "1075840"
  },
  {
    "text": "if i go ahead and change my dialogue button just do a control kd maybe in visual studio and reformat it well this",
    "start": "1075840",
    "end": "1082320"
  },
  {
    "text": "test will still pass because these things these two this markup we had before in the dialogue button and then one we have now",
    "start": "1082320",
    "end": "1088640"
  },
  {
    "text": "they will look the same to the user in the on on screen we can also go ahead and change the all",
    "start": "1088640",
    "end": "1094480"
  },
  {
    "text": "of attributes in that component and the test will still pass because they work the same for the use on the browser",
    "start": "1094480",
    "end": "1100799"
  },
  {
    "text": "we can even go ahead and change the order of the classes in the class attribute and the test will still pass",
    "start": "1100799",
    "end": "1106080"
  },
  {
    "text": "it won't care another thing we could do is well maybe we have an id attribute in this",
    "start": "1106080",
    "end": "1112080"
  },
  {
    "start": "1109000",
    "end": "1109000"
  },
  {
    "text": "case where some of it is generated or it's and it's good or something well that's going to be quite hard to test",
    "start": "1112080",
    "end": "1118080"
  },
  {
    "text": "because it would change every time you render the component right it's sort of like a you want a unique ud id for",
    "start": "1118080",
    "end": "1123520"
  },
  {
    "text": "example well we have in in b units cement and compare we have what i call comparison modifiers in this",
    "start": "1123520",
    "end": "1130000"
  },
  {
    "text": "case we have the the i we have the regex modifier that's highlighted on screen now where you can pass in the red red x",
    "start": "1130000",
    "end": "1137039"
  },
  {
    "text": "regex and instead of using just straight up comparison it will use a regex comparison so that allows you to sort of",
    "start": "1137039",
    "end": "1144320"
  },
  {
    "text": "again handle that scenario where you don't want the chest to break there's many more another one that is",
    "start": "1144320",
    "end": "1150559"
  },
  {
    "text": "quite common to use is this more general div ignore modifier that basically says i know that's supposed to be an element",
    "start": "1150559",
    "end": "1156240"
  },
  {
    "text": "here but just ignore it we don't care about that so",
    "start": "1156240",
    "end": "1161440"
  },
  {
    "text": "now we know sort of different different approaches to what we can test and and",
    "start": "1161520",
    "end": "1166559"
  },
  {
    "text": "and how to do that but let's talk a bit let's change gears a bit and talk about what is a testable component and how do",
    "start": "1166559",
    "end": "1172720"
  },
  {
    "text": "we write maintainable chests and um i don't know how many of you in here like chester and development i'm",
    "start": "1172720",
    "end": "1178720"
  },
  {
    "text": "personally that's sort of something that suits the way i work and it makes me feel comfortable that makes me feel like i",
    "start": "1178720",
    "end": "1184320"
  },
  {
    "text": "can you know better get to a state where things are done but that's not really the point of this so",
    "start": "1184320",
    "end": "1190400"
  },
  {
    "text": "you can do test first the test after either way but um the point of us writing tests in the",
    "start": "1190400",
    "end": "1197120"
  },
  {
    "text": "first place is to be able to maintain our code",
    "start": "1197120",
    "end": "1202240"
  },
  {
    "text": "in the future obviously also to verify that the thing we are building right now is working as intended and so if writing",
    "start": "1202240",
    "end": "1208480"
  },
  {
    "text": "tests doesn't make necessarily make sense if you're just doing a quick prototype of something uh unless of",
    "start": "1208480",
    "end": "1213840"
  },
  {
    "text": "course you're prototyping with b unit and trying things out with b and so but",
    "start": "1213840",
    "end": "1219360"
  },
  {
    "start": "1218000",
    "end": "1218000"
  },
  {
    "text": "i want to talk a bit about what it means for me to create testable maintainable components because that's sort of where we start and",
    "start": "1219360",
    "end": "1226400"
  },
  {
    "text": "again i want to what i iterate this is just my approach and it's definitely not",
    "start": "1226400",
    "end": "1231440"
  },
  {
    "text": "necessarily the right approach for everybody and for every fall scenario so take this as good ideas i'm not um dark",
    "start": "1231440",
    "end": "1236799"
  },
  {
    "text": "matter right so i think a component should do one thing well and what does one thing mean well",
    "start": "1236799",
    "end": "1244080"
  },
  {
    "text": "it's sort of perhaps hard to define but that could be a few code smells or",
    "start": "1244080",
    "end": "1250400"
  },
  {
    "text": "component smells i guess that we could look for to sort of identify when a component doesn't do that one thing so",
    "start": "1250400",
    "end": "1256080"
  },
  {
    "text": "one one thing i would like to like to look for in my components is if there's",
    "start": "1256080",
    "end": "1261280"
  },
  {
    "text": "a mix of abstraction levels and even the term itself abstraction levels is abstract so i'll show an",
    "start": "1261280",
    "end": "1266880"
  },
  {
    "text": "example in a little bit so we can sort of see what i mean by that another thing would be uh the level of cohesion and generally",
    "start": "1266880",
    "end": "1273679"
  },
  {
    "text": "if the component has low cohesion again an abstract term will i'll show you an example then that might be an indication",
    "start": "1273679",
    "end": "1280400"
  },
  {
    "text": "that the component is more complex than it needs to be and one thing i see and i even see that",
    "start": "1280400",
    "end": "1286480"
  },
  {
    "text": "and i see that a lot of demos maybe i can't even remember if they still do that in the hello world when you sort of find a new project blazer",
    "start": "1286480",
    "end": "1293360"
  },
  {
    "text": "they inject http client directly in a component that's not super ideal",
    "start": "1293360",
    "end": "1298480"
  },
  {
    "text": "especially for testing but it also sort of limits you that you basically have your http code directly in your",
    "start": "1298480",
    "end": "1304640"
  },
  {
    "text": "component you might want to move that into a service so in general don't have infrastructure in your components put",
    "start": "1304640",
    "end": "1310799"
  },
  {
    "text": "that outside similar to what we do when we're building business logic this is component logic keep service keep",
    "start": "1310799",
    "end": "1316559"
  },
  {
    "text": "infrastructure keep databases and http clients and what have you out of your components and work with transactions",
    "start": "1316559",
    "end": "1321919"
  },
  {
    "text": "instead so to sort of have something to look at",
    "start": "1321919",
    "end": "1327440"
  },
  {
    "start": "1325000",
    "end": "1325000"
  },
  {
    "text": "let's let's create a dynamic data table component so this is the like the the the grid test uh that we've all seen a",
    "start": "1327440",
    "end": "1334720"
  },
  {
    "text": "few times so our dynamic data table component will work like this here at the bottom of the screen we have a",
    "start": "1334720",
    "end": "1340400"
  },
  {
    "text": "dataset component we pass in some movies to it and uh the movies are defined above right now but that could come from",
    "start": "1340400",
    "end": "1346400"
  },
  {
    "text": "anywhere and when the data table component renders it figures out based on the based on the movie type what",
    "start": "1346400",
    "end": "1353600"
  },
  {
    "text": "headers to add and it also figures out you know how to render each of the reach",
    "start": "1353600",
    "end": "1360080"
  },
  {
    "text": "each of the columns each of the rows in the table uh based on the data we passed into it so this is sort of a very",
    "start": "1360080",
    "end": "1367120"
  },
  {
    "text": "dynamic very i'll figure it out for you kind of a component so how do we build something like this",
    "start": "1367120",
    "end": "1372240"
  },
  {
    "text": "well the first thing we need we need some system dot reflection because this is clearly gonna use reflection to figure",
    "start": "1372240",
    "end": "1378080"
  },
  {
    "text": "all that stuff out we also need it to be a generic component so that's why we have the type program on top and then we need a",
    "start": "1378080",
    "end": "1384159"
  },
  {
    "text": "parameter where we can pass our items into then we need some reflection magic",
    "start": "1384159",
    "end": "1390480"
  },
  {
    "text": "this is going to go and find the items property info",
    "start": "1390480",
    "end": "1395520"
  },
  {
    "text": "and it will only find the ones the problem the public properties of our item that is public and that is instance",
    "start": "1395520",
    "end": "1401520"
  },
  {
    "text": "and that we can actually read and then we need a helper method to be able to get the names of the columns so",
    "start": "1401520",
    "end": "1409360"
  },
  {
    "text": "that is this method here it will go and get the names of each of the properties that we can read and we can that our instance are part of the item finally we",
    "start": "1409360",
    "end": "1416320"
  },
  {
    "text": "need a little bit helpful method that can go ahead and fetch out the data for each row it looks like this",
    "start": "1416320",
    "end": "1421520"
  },
  {
    "text": "and if we scroll down a little bit we will see that obviously we need a table and",
    "start": "1421520",
    "end": "1426799"
  },
  {
    "text": "we need the table head it looks like this we have a for each over the column name and we print out",
    "start": "1426799",
    "end": "1432559"
  },
  {
    "text": "in a table row we print out the table header cells and with the name of that and finally in our tea body we have a",
    "start": "1432559",
    "end": "1438799"
  },
  {
    "text": "for each again over the items and then in a table row we for each over each of",
    "start": "1438799",
    "end": "1443919"
  },
  {
    "text": "the cells in in that table row and print that out so this is the total of that component that would do that thing so",
    "start": "1443919",
    "end": "1450000"
  },
  {
    "text": "quite simple but still this is the things that we can do to make this more testable maintainable in",
    "start": "1450000",
    "end": "1456159"
  },
  {
    "text": "the future is there any code spells that you are thinking that even this simple",
    "start": "1456159",
    "end": "1461679"
  },
  {
    "text": "component i think maybe it's 30 lines is there something that actually could make this more easy to work with",
    "start": "1461679",
    "end": "1467600"
  },
  {
    "text": "in the future well if we go back to the examiners we had before",
    "start": "1467600",
    "end": "1473600"
  },
  {
    "text": "sort of my recommendations the first thing i've sort of skipped away a few things here but the first thing is the",
    "start": "1473600",
    "end": "1479520"
  },
  {
    "text": "mix of abstraction levels so what does i what do i actually mean by abstraction levels so an abstraction level is",
    "start": "1479520",
    "end": "1485360"
  },
  {
    "text": "like in this case we have a component that works uh this part of",
    "start": "1485360",
    "end": "1490720"
  },
  {
    "text": "the component sort of deals with the items with plural that sort of a higher level abstraction we're working with multiple items",
    "start": "1490720",
    "end": "1497520"
  },
  {
    "text": "whereas this bit of the code works on the individual item and that is sort of a",
    "start": "1497520",
    "end": "1503279"
  },
  {
    "text": "mix of abstraction level that's two things that that you might sort of indicate that maybe there's something here i can pull into sub components",
    "start": "1503279",
    "end": "1510559"
  },
  {
    "text": "and another thing we talked about was the cohesion so",
    "start": "1510559",
    "end": "1516000"
  },
  {
    "text": "we want to eliminate low cohesion so low cohesion what does that mean well let me illustrate that by saying well",
    "start": "1516000",
    "end": "1522159"
  },
  {
    "text": "these two bits here that are red now they clearly are dependent on each other there's a there's a coupling between",
    "start": "1522159",
    "end": "1527760"
  },
  {
    "text": "them because the the margaret is using the method up there but the blue bits here",
    "start": "1527760",
    "end": "1533760"
  },
  {
    "text": "they don't have any relation to the red bits they could exist somewhere else and the red bits wouldn't",
    "start": "1533760",
    "end": "1540320"
  },
  {
    "text": "care so that is sort of an example of low cohesion and the concept low cohesion is something that also applies to classes",
    "start": "1540320",
    "end": "1546559"
  },
  {
    "text": "and and just regular plain old c sharp objects in that you can have an object that grows too large and one of the",
    "start": "1546559",
    "end": "1552480"
  },
  {
    "text": "indicators of that is that it have parts of the parts of the class that deals with things that only they",
    "start": "1552480",
    "end": "1559440"
  },
  {
    "text": "don't use a subset of the fields for example only use this option of the properties there so the same thing here",
    "start": "1559440",
    "end": "1564559"
  },
  {
    "text": "that also is an indicator that we have things that don't necessarily need to be in the same component and we can simplify things so",
    "start": "1564559",
    "end": "1571600"
  },
  {
    "text": "let's do some refactoring the first thing we would like to do is probably to take that thing that they",
    "start": "1571600",
    "end": "1577919"
  },
  {
    "text": "have in common that item property info property i realize that name is going to be a mouthful and just refactor that",
    "start": "1577919",
    "end": "1584960"
  },
  {
    "text": "into um into a helper class so we have a data helper uh type now that has that",
    "start": "1584960",
    "end": "1591440"
  },
  {
    "text": "functionality in it so that we can reuse that across components and let me just show you that what looks what that looks like so you can see we just moved that",
    "start": "1591440",
    "end": "1598400"
  },
  {
    "text": "property into a class and now it's a method and we can call it and we get that information out",
    "start": "1598400",
    "end": "1604000"
  },
  {
    "text": "so the next thing we would always want to do is get rid of that header stuff so",
    "start": "1604000",
    "end": "1609200"
  },
  {
    "text": "let's pull that out and add in instead a data table header component and the only",
    "start": "1609200",
    "end": "1615520"
  },
  {
    "text": "thing that data table header component needs is actually the type the t item type because that's all it needs to",
    "start": "1615520",
    "end": "1621120"
  },
  {
    "text": "actually render out the the header columns so and here we have a data table header",
    "start": "1621120",
    "end": "1626400"
  },
  {
    "text": "component and you can see this is a nice concise component that's easy to understand what it does and",
    "start": "1626400",
    "end": "1632240"
  },
  {
    "text": "you know let's jump let's go uh go forward with the next thing so the next thing and i'm probably you guessed that",
    "start": "1632240",
    "end": "1637919"
  },
  {
    "text": "by now is that we have the row bits we move out and",
    "start": "1637919",
    "end": "1644559"
  },
  {
    "text": "we end up with a data table row where we for each of the data double rows we pass in an item so this data table row",
    "start": "1644559",
    "end": "1651360"
  },
  {
    "text": "component is now responsible for rendering a single row out and and",
    "start": "1651360",
    "end": "1656799"
  },
  {
    "text": "as you can see it's also very simple and now this is the final refactor data",
    "start": "1656799",
    "end": "1662880"
  },
  {
    "text": "table component again focus simple that is sort of one abstraction level here",
    "start": "1662880",
    "end": "1668000"
  },
  {
    "text": "we're only working on items the items pro level and and we sort of delegate the responsibility of the individual",
    "start": "1668000",
    "end": "1674880"
  },
  {
    "text": "item of the header down to child components of the datatype component",
    "start": "1674880",
    "end": "1680320"
  },
  {
    "text": "and i guess one argument you would say well this was so simple why do you need to take that step",
    "start": "1681039",
    "end": "1687279"
  },
  {
    "text": "well this is also very rudimentary it's not going to go not going to take",
    "start": "1687279",
    "end": "1692640"
  },
  {
    "text": "many many many weeks before your manager comes and says can we get some sorting in here can we and we then you start",
    "start": "1692640",
    "end": "1698720"
  },
  {
    "text": "adding logic where you can click on the header for example that should do something and then it should start sorting somewhere else and maybe you",
    "start": "1698720",
    "end": "1705200"
  },
  {
    "text": "want some editing in the cells and all of a sudden you have a component that went from a nice 30 lines to",
    "start": "1705200",
    "end": "1710559"
  },
  {
    "text": "very big instead now you can move that logic out into the different child components and still have fairly clean",
    "start": "1710559",
    "end": "1717440"
  },
  {
    "text": "cohesive code so it might seem overkill but i actually think there are some some",
    "start": "1717440",
    "end": "1722640"
  },
  {
    "start": "1720000",
    "end": "1720000"
  },
  {
    "text": "meaning to the madness in this case so now that we have something we can we want to test so how do we create",
    "start": "1722640",
    "end": "1728960"
  },
  {
    "text": "maintainable tests it turns out when i was doing this sort of for building the",
    "start": "1728960",
    "end": "1735440"
  },
  {
    "text": "slides of this talk many of many of the recommendations i'm going to give here now in terms of building maintainable tests are actually going to be",
    "start": "1735440",
    "end": "1741679"
  },
  {
    "text": "generalized to unit testing in general and not be specific to to blazer components that's going to be some",
    "start": "1741679",
    "end": "1747279"
  },
  {
    "text": "obviously but in general i like even in my just regular test to avoid duplicated code within tests so i don't mind duplication",
    "start": "1747279",
    "end": "1754799"
  },
  {
    "text": "across tests necessarily test classes sorry test classes but i i would like to",
    "start": "1754799",
    "end": "1760399"
  },
  {
    "text": "avoid duplicated code within a test class so all tests in a test class should sort of be very",
    "start": "1760399",
    "end": "1765600"
  },
  {
    "text": "they should have the same uh the same sort of uh tight target they",
    "start": "1765600",
    "end": "1771120"
  },
  {
    "text": "should have the same system on a test or same component on the test in this case and and and but but you might have",
    "start": "1771120",
    "end": "1777360"
  },
  {
    "text": "components that exist or other tests that might have some similar setup logic",
    "start": "1777360",
    "end": "1782399"
  },
  {
    "text": "for example but they then you might end up with if you have too much yet code between test",
    "start": "1782399",
    "end": "1787440"
  },
  {
    "text": "classes then you might be in a situation where you can't change the test logging in one class without actually breaking another assist so i i i don't follow",
    "start": "1787440",
    "end": "1794640"
  },
  {
    "text": "that no duplicated code religiously but at least within a test class it's very always a good idea i think",
    "start": "1794640",
    "end": "1799760"
  },
  {
    "text": "so how can you get around that well use sort of move common arrange code",
    "start": "1799760",
    "end": "1805360"
  },
  {
    "text": "or setup code into the constructor of its x unit or into the appropriate setup methods in your testing library so you",
    "start": "1805360",
    "end": "1812480"
  },
  {
    "text": "sort of have that duplicated code moved somewhere else i also like to use creational patterns",
    "start": "1812480",
    "end": "1818640"
  },
  {
    "text": "to create input for tests and i've also uh i also",
    "start": "1818640",
    "end": "1823840"
  },
  {
    "text": "enjoy using tools like auto fixed or bogus to generate test data that is not really specific to the test but just",
    "start": "1823840",
    "end": "1829919"
  },
  {
    "text": "data that needs to be there and and if you are if i'm building um using",
    "start": "1829919",
    "end": "1836240"
  },
  {
    "text": "creators creational patterns to create test data that is actually test specific i like to try to use the business",
    "start": "1836240",
    "end": "1841600"
  },
  {
    "text": "domains in wording because that's again going to make my test easier to read and understand if i have sort of high level",
    "start": "1841600",
    "end": "1847039"
  },
  {
    "text": "language that explains with this input something is going to happen this is a obviously a specific point but",
    "start": "1847039",
    "end": "1854960"
  },
  {
    "text": "only verify markup that belongs to the component on the test so if you have a component that has",
    "start": "1854960",
    "end": "1860720"
  },
  {
    "text": "multiple child components use for example the the difficult to ignore subparts of the markup that you",
    "start": "1860720",
    "end": "1867200"
  },
  {
    "text": "are from the component on the test that belongs to the child components because you don't want your component on assist to break just",
    "start": "1867200",
    "end": "1873919"
  },
  {
    "text": "because a child component changes the way it renders output you don't want that you don't want one test breaking",
    "start": "1873919",
    "end": "1879679"
  },
  {
    "text": "when there's no reason to and finally i've heard people talk about this before",
    "start": "1879679",
    "end": "1885919"
  },
  {
    "text": "but i like to say stick to one logical assertion per test you can have multiple assertion statements in your test but a",
    "start": "1885919",
    "end": "1892799"
  },
  {
    "text": "test should primarily have one logical assertion so that means one sort of business business rule and",
    "start": "1892799",
    "end": "1900080"
  },
  {
    "text": "one thing i like to do and i'm a big fan of fluent assertions is to actually create custom assertion methods if i",
    "start": "1900080",
    "end": "1906000"
  },
  {
    "text": "have multiple assertion statements so that i'm getting down to one assertion line again just to make my test readable",
    "start": "1906000",
    "end": "1911440"
  },
  {
    "text": "more maintainable more easy to understand when i look at my code again in half a year or god forbid somebody else does",
    "start": "1911440",
    "end": "1917760"
  },
  {
    "text": "so let's do some testing let's look at uh testing the data table component and",
    "start": "1917760",
    "end": "1923440"
  },
  {
    "text": "the first refactoring we can do from the first examples is to well let's have our test class our test component in this",
    "start": "1923440",
    "end": "1930000"
  },
  {
    "text": "case inherit from date from b units test context then we don't have to move that up in every single test so that's a little bit of",
    "start": "1930000",
    "end": "1935840"
  },
  {
    "text": "niceness there that allows us to just call the test context methods directly so now we can go ahead and write the",
    "start": "1935840",
    "end": "1941519"
  },
  {
    "text": "first test and the test is going to be the most simple thing we can come up with data table renders basic table of",
    "start": "1941519",
    "end": "1946640"
  },
  {
    "text": "head and body so this is our verification of the marker produced by the data table that it owns and the only thing we do is we call the render method",
    "start": "1946640",
    "end": "1953039"
  },
  {
    "text": "we pass in the data table and we don't pass any items because that would be a more complex scenario we just pass in an",
    "start": "1953039",
    "end": "1959200"
  },
  {
    "text": "object as the generic type so that we get the most basic test we can do and now we just use the markup matches",
    "start": "1959200",
    "end": "1966559"
  },
  {
    "text": "to verify that the markup is indeed right and here we're using the div ignore children",
    "start": "1966559",
    "end": "1972080"
  },
  {
    "text": "because we know there should be a t hat there but we don't care about what the data table header component the child",
    "start": "1972080",
    "end": "1978720"
  },
  {
    "text": "component is generating so we are just telling it to ignore the child content of the table head",
    "start": "1978720",
    "end": "1985039"
  },
  {
    "text": "the next test we might want to write would be to sort of test that composition that interaction between the",
    "start": "1985039",
    "end": "1990320"
  },
  {
    "text": "data table and the data table header component so even though we're not going to test the",
    "start": "1990320",
    "end": "1995760"
  },
  {
    "text": "markup output from the data sample component in a data table testing class we might we want to test",
    "start": "1995760",
    "end": "2001519"
  },
  {
    "text": "that we are passing the right stuff down to the data table header component so it's like what you do with testing that's that",
    "start": "2001519",
    "end": "2007840"
  },
  {
    "text": "sort of interaction testing between them so how does that look well now that we've rendered the datasheet component",
    "start": "2007840",
    "end": "2013519"
  },
  {
    "text": "what we can do also with bu is we can go and inspect the not the dom tree then produce marker but we can go in and",
    "start": "2013519",
    "end": "2019679"
  },
  {
    "text": "split the component tree and we do that with the find component method and we tell it to go ahead and find the child",
    "start": "2019679",
    "end": "2024799"
  },
  {
    "text": "component of type data table header uh with a generic type of object and if it doesn't return anything it will for an",
    "start": "2024799",
    "end": "2031039"
  },
  {
    "text": "exception so at this point we could actually stop and say well as we certainly did add the right child component into the into the component",
    "start": "2031039",
    "end": "2038399"
  },
  {
    "text": "tree um but if we want to go one step deeper we can go and say well let me find the t hat",
    "start": "2038399",
    "end": "2044320"
  },
  {
    "text": "in our component on the test the data table find the child nodes and say those child nodes should match whatever the",
    "start": "2044320",
    "end": "2049919"
  },
  {
    "text": "data table header component produced and this might it's i'm sort of have this an example i",
    "start": "2049919",
    "end": "2056079"
  },
  {
    "text": "probably wouldn't do this in in in practice but what we are actually doing here is even though the data table header component changes its output this",
    "start": "2056079",
    "end": "2064000"
  },
  {
    "text": "test would still pass because we're basically just saying whatever you have it should be in that t-head and that's it",
    "start": "2064000",
    "end": "2071200"
  },
  {
    "text": "okay so i'm going to skip showing you a test of data table beta because it's not going",
    "start": "2071359",
    "end": "2076480"
  },
  {
    "text": "to be very interesting let's jump a little bit further down and do a test of",
    "start": "2076480",
    "end": "2082000"
  },
  {
    "text": "the data how the data table uses the data table row so again an interaction test a composition test so first we need",
    "start": "2082000",
    "end": "2088800"
  },
  {
    "text": "a couple of views to pass into our data table to have something otherwise we won't get anything rendered out",
    "start": "2088800",
    "end": "2096079"
  },
  {
    "text": "by the data table header we won't get any iterating over and adding data tables to a component so we render our data table component again",
    "start": "2096079",
    "end": "2102480"
  },
  {
    "text": "and here now we can use again we can use the find components and that's you can might see",
    "start": "2102480",
    "end": "2108079"
  },
  {
    "text": "that there's this is there so it's a plural thing and we find all the data table row components that was added to",
    "start": "2108079",
    "end": "2114240"
  },
  {
    "text": "the component tree and now well there's a little bit of magic we",
    "start": "2114240",
    "end": "2120240"
  },
  {
    "text": "can do so uh the result we get out of that that contains an instance that references the actual data table row",
    "start": "2120240",
    "end": "2126800"
  },
  {
    "text": "component and then we can go to the item of that data table row and we can see this is the item that was passed in so",
    "start": "2126800",
    "end": "2132720"
  },
  {
    "text": "now i have an innumerable of movies and those are the moves that were added to the rows in our data table and here i'm",
    "start": "2132720",
    "end": "2139680"
  },
  {
    "text": "using fluent assertion it has a fairly magical and fantastic method called b equivalent too so now i can say all the",
    "start": "2139680",
    "end": "2145200"
  },
  {
    "text": "movies in my rows they should be equivalent to the original movies and this will verify that the thing that the individual",
    "start": "2145200",
    "end": "2151599"
  },
  {
    "text": "movies are if that's the same amount and they're in the same order so this is sort of a test way to test an",
    "start": "2151599",
    "end": "2157040"
  },
  {
    "text": "integration of between the data table and digital component so let's look at a test of a data table component",
    "start": "2157040",
    "end": "2163839"
  },
  {
    "text": "the first test is just the empty test again",
    "start": "2163839",
    "end": "2169040"
  },
  {
    "text": "to to make sure that it works in the basic test this is not very interesting but you might want to have those like",
    "start": "2169040",
    "end": "2174880"
  },
  {
    "text": "the start when you do test and development just kind of start with the most basic test and then you're writing something like this the next test is a",
    "start": "2174880",
    "end": "2181119"
  },
  {
    "text": "bit more interesting here we pass in because the data probe is only responsible for one movie here we pass in a single movie and now we can",
    "start": "2181119",
    "end": "2188240"
  },
  {
    "text": "do a markup matches again and verify that it does the right thing with that movie we don't have really we don't have any functionality at this point in our",
    "start": "2188240",
    "end": "2194079"
  },
  {
    "text": "data table row we just rent out output but as you can see here this is actually kind of great feature you have you can",
    "start": "2194079",
    "end": "2199359"
  },
  {
    "text": "even use that uh so as you can see we're building our radar render fragment that we passed to markup matches and that",
    "start": "2199359",
    "end": "2205119"
  },
  {
    "text": "actually uh points back to the movie we originally uh movie variable a few lines above so",
    "start": "2205119",
    "end": "2211359"
  },
  {
    "text": "this again will verify that data table row if passed a movie or past",
    "start": "2211359",
    "end": "2217760"
  },
  {
    "text": "any object will do the right thing or at least with a movie i guess so",
    "start": "2217760",
    "end": "2223119"
  },
  {
    "start": "2223000",
    "end": "2223000"
  },
  {
    "text": "to summarize what have we done with this testing well we have verified the component markup and isolation of the",
    "start": "2223119",
    "end": "2229839"
  },
  {
    "text": "different components well we skipped the data table header but you i think you get the point and and that allows us to evolve the",
    "start": "2229839",
    "end": "2236079"
  },
  {
    "text": "data table row and the data table header and the data table component individually without having their their",
    "start": "2236079",
    "end": "2242880"
  },
  {
    "text": "own tests breaking um and that's important you don't want test breaking in general in your unit testing",
    "start": "2242880",
    "end": "2249040"
  },
  {
    "text": "because something else changed right another thing we also did was we verified the i",
    "start": "2249040",
    "end": "2255760"
  },
  {
    "text": "call it component composition might be a fancy word the way the components work together and that is something that we",
    "start": "2255760",
    "end": "2262079"
  },
  {
    "text": "do want to verify uh especially from a data table to the to the child foot to his child components because that's part",
    "start": "2262079",
    "end": "2267599"
  },
  {
    "text": "of the contract they have like a public contract and we want to make sure that we're passing in the right things and",
    "start": "2267599",
    "end": "2272720"
  },
  {
    "text": "maybe getting the right callbacks so",
    "start": "2272720",
    "end": "2278400"
  },
  {
    "text": "let's look at another approach to sort of work around the issue",
    "start": "2278560",
    "end": "2284400"
  },
  {
    "start": "2279000",
    "end": "2279000"
  },
  {
    "text": "of the dependencies that are between components so isolating the component under test so",
    "start": "2284400",
    "end": "2292079"
  },
  {
    "text": "in this very basic example i have a foo component that's my component on a chest and it has a char component",
    "start": "2292079",
    "end": "2297680"
  },
  {
    "text": "well you can ask the question should changing bar break through's test sometimes maybe",
    "start": "2297680",
    "end": "2304320"
  },
  {
    "text": "it's going to be a it depends kind of an answer but if we answer no to that question then we might",
    "start": "2304320",
    "end": "2310160"
  },
  {
    "text": "want to not have barb be part of our chest but how can we do that well let's get back to that another question we",
    "start": "2310160",
    "end": "2315280"
  },
  {
    "text": "might might ask is is bar a third party component maybe and i know it's quite common that",
    "start": "2315280",
    "end": "2321119"
  },
  {
    "text": "we will take a third-party component with some great components in there and use them in our blaze application because that makes us go faster and we",
    "start": "2321119",
    "end": "2328240"
  },
  {
    "text": "don't have to do all that hard logic perhaps but we don't want to test the third-party components in our test right",
    "start": "2328240",
    "end": "2334800"
  },
  {
    "text": "because that's not our code it's not our responsibility and that will also help bind a",
    "start": "2334800",
    "end": "2340480"
  },
  {
    "text": "lock our tightly coupled our tests to third-party components in a way we probably don't want to so",
    "start": "2340480",
    "end": "2348160"
  },
  {
    "text": "not only when we upgrade to the latest version of that third party component we have test breaking but we might also have other different issues there so",
    "start": "2348160",
    "end": "2355119"
  },
  {
    "text": "so sometimes you want to actually pull away the thing we don't unfortunately we can't just remove things from the",
    "start": "2355119",
    "end": "2360880"
  },
  {
    "text": "component sweep because that's sort of something you steadily code it into your razor files but we can substitute",
    "start": "2360880",
    "end": "2366160"
  },
  {
    "text": "components and that's sort of down to how blazer works so what do i mean by substitution so let's look at an example",
    "start": "2366160",
    "end": "2374160"
  },
  {
    "text": "so if fu doesn't have a bar that's our test and we render foo",
    "start": "2374160",
    "end": "2379920"
  },
  {
    "text": "we want to have an assertion that looks a bit like this we can use the health component that's a b method where we can",
    "start": "2379920",
    "end": "2385119"
  },
  {
    "text": "ask do you have do the component test have this child component and the answer to do you have a bar component that",
    "start": "2385119",
    "end": "2391599"
  },
  {
    "text": "should be false but do you have a bar substitute well that should be true and how do we get around that so",
    "start": "2391599",
    "end": "2397520"
  },
  {
    "text": "that's uh it's sort of it's been around since 1.2 of b unit a concept of component factories a component factory",
    "start": "2397520",
    "end": "2404480"
  },
  {
    "text": "is the way that b unit allows us to control uh what",
    "start": "2404480",
    "end": "2410400"
  },
  {
    "text": "instance of a component actually is so blazer will ask bns component factories",
    "start": "2410400",
    "end": "2417680"
  },
  {
    "text": "can you create the please create me this instance and then b and it will ask all the component factories can you create",
    "start": "2417680",
    "end": "2423040"
  },
  {
    "text": "this and the first component factor even says yes gets the chance to return an instance of what was asked for but",
    "start": "2423040",
    "end": "2428800"
  },
  {
    "text": "blazer actually for the most part doesn't care that the instance is the right type so that is where the",
    "start": "2428800",
    "end": "2434400"
  },
  {
    "text": "component factors type come in so let me just show you what this particular bar substitute component",
    "start": "2434400",
    "end": "2440720"
  },
  {
    "text": "factor look like so it's just a thing that implements i component factory it has the two methods it tells can you create this type and in this case we say",
    "start": "2440720",
    "end": "2447680"
  },
  {
    "text": "yes if the type is a type of bar and then the great method gets called and we",
    "start": "2447680",
    "end": "2453359"
  },
  {
    "text": "just return a bar substitute because that's how we roll and the bar substitute is just a very",
    "start": "2453359",
    "end": "2458880"
  },
  {
    "text": "boring laser component that's the only right thing it is so how can we use this well",
    "start": "2458880",
    "end": "2465599"
  },
  {
    "text": "this is the test we had before where we had to use that difficult children um",
    "start": "2465599",
    "end": "2470720"
  },
  {
    "text": "diff modifier well what if we can do this instead so",
    "start": "2470720",
    "end": "2476800"
  },
  {
    "text": "to save you from writing a whole bunch of i component factories there are",
    "start": "2476800",
    "end": "2482160"
  },
  {
    "text": "obviously some some of them built into b units to make it a bit easier to work with this is sort of the very basic one",
    "start": "2482160",
    "end": "2488480"
  },
  {
    "text": "that is available through this ad method that has two generic parameters the first generic parameter is the",
    "start": "2488480",
    "end": "2493680"
  },
  {
    "text": "type of the component you want to remove from the dom tree or substitute out and the second generic parameter is the",
    "start": "2493680",
    "end": "2499200"
  },
  {
    "text": "parameter of it is the type of the component you want to substitute with so and again the",
    "start": "2499200",
    "end": "2504319"
  },
  {
    "text": "the header substitute just looks like this and now we have a more clean markup matches call where we just specify the",
    "start": "2504319",
    "end": "2510720"
  },
  {
    "text": "marker that is relevant for the component on the test so there are a few rules for creating",
    "start": "2510720",
    "end": "2516000"
  },
  {
    "start": "2514000",
    "end": "2514000"
  },
  {
    "text": "substitute components and the first rule is that well it has to be a component maybe not surprising but all laser",
    "start": "2516000",
    "end": "2522880"
  },
  {
    "text": "components have to inherit from i component that happens by default if you inherit if you",
    "start": "2522880",
    "end": "2528800"
  },
  {
    "text": "if you build on uh component base but at the very minimum a component has to",
    "start": "2528800",
    "end": "2534240"
  },
  {
    "text": "inherit from i component they also have to a substitute also helps to implement or have the same",
    "start": "2534240",
    "end": "2541280"
  },
  {
    "text": "parameters as the component is substituting all and this is a super neat trick that was just perfect for this use case",
    "start": "2541280",
    "end": "2549599"
  },
  {
    "text": "it can also have just the capture unmatched values type of parameter so",
    "start": "2549599",
    "end": "2555359"
  },
  {
    "text": "imagine we have a component with a bunch of parameters and if we return a different component to blazer blazer",
    "start": "2555359",
    "end": "2561200"
  },
  {
    "text": "we'll then at that point try to uh bind all the parameters to the properties it",
    "start": "2561200",
    "end": "2566720"
  },
  {
    "text": "is it is expecting to find there but if they aren't known it will use look for the captured unmatched values and we",
    "start": "2566720",
    "end": "2572960"
  },
  {
    "text": "find one of those it'll just drop all the parameters into that so that means we can make valid generic substitute",
    "start": "2572960",
    "end": "2578400"
  },
  {
    "text": "components better reusable there is one thing that can make things a bit more complex if you have code like",
    "start": "2578400",
    "end": "2585119"
  },
  {
    "text": "this where you have a child component that you have and",
    "start": "2585119",
    "end": "2590160"
  },
  {
    "text": "use the adrev keyword with where you re reference the the component well in that case your substitute must actually",
    "start": "2590160",
    "end": "2596640"
  },
  {
    "text": "inherit from the thing it's substituting otherwise blazer will not able to assign",
    "start": "2596640",
    "end": "2601680"
  },
  {
    "text": "that substitute component to the variable we have in this case here the private bar variable",
    "start": "2601680",
    "end": "2608160"
  },
  {
    "start": "2608000",
    "end": "2608000"
  },
  {
    "text": "but it would kind of suck if you had to create substitute components for all the",
    "start": "2608640",
    "end": "2614560"
  },
  {
    "text": "components you want to replace in your blazer test so part of the preview package that is out",
    "start": "2614560",
    "end": "2620400"
  },
  {
    "text": "right now for for for being it uh we do have uh stop so anybody familiar with",
    "start": "2620400",
    "end": "2626880"
  },
  {
    "text": "testing nomenclature might know that we have you have a we have box but stops is sort of a more lightweight market doesn't you can't really set up",
    "start": "2626880",
    "end": "2633200"
  },
  {
    "text": "expectations but it's just something where you can say go and behave sort of like this so we have built-in stops uh component",
    "start": "2633200",
    "end": "2639680"
  },
  {
    "text": "and the stop component is a stop of the type of component you're you're substituting and it sort of it is a",
    "start": "2639680",
    "end": "2646960"
  },
  {
    "text": "blazer component obviously so so so we get a thumbs up for the rule number one that it should be a blazing component",
    "start": "2646960",
    "end": "2652079"
  },
  {
    "text": "it's also have that captures all parameters features with a little extra sprinkle on top so it makes it easier for you to get at those parameters you",
    "start": "2652079",
    "end": "2658640"
  },
  {
    "text": "captured so you can insert against those so rule number two also checks out rule number three however we can't really do",
    "start": "2658640",
    "end": "2664960"
  },
  {
    "text": "that because stop of t isn't t so we don't get to use ad ref uh when uh on",
    "start": "2664960",
    "end": "2673359"
  },
  {
    "text": "on the tar components if and stop them out with this this approach here but it makes things a",
    "start": "2673359",
    "end": "2679359"
  },
  {
    "text": "whole lot easier in many cases so again if you look at the bar and and food test well now we can just",
    "start": "2679359",
    "end": "2685760"
  },
  {
    "text": "do component factories that add stop off bar and then it will stop out bar and",
    "start": "2685760",
    "end": "2690800"
  },
  {
    "text": "this is our test and it looks almost the same as before now we just find a stuff of bar in our component tree when we go",
    "start": "2690800",
    "end": "2696720"
  },
  {
    "text": "and search you can also do this sometimes maybe you want to have a stop that actually",
    "start": "2696720",
    "end": "2702640"
  },
  {
    "text": "produces some output some markup in the dom tree and the approach to doing this is basically",
    "start": "2702640",
    "end": "2709359"
  },
  {
    "text": "to pass in in a in a render template like we see here and and give it some markup and",
    "start": "2709359",
    "end": "2715599"
  },
  {
    "text": "then you will find that markup in the render tree you can see the markup matches here it's probably not the best",
    "start": "2715599",
    "end": "2721040"
  },
  {
    "text": "example i could have come up with because this sort of assumes that food doesn't render any markup but",
    "start": "2721040",
    "end": "2726079"
  },
  {
    "text": "if you bear with me you can sort of see what's going on here another thing we can do is well maybe i",
    "start": "2726079",
    "end": "2732000"
  },
  {
    "text": "want to stop out everything from a namespace or if i have that third party component and",
    "start": "2732000",
    "end": "2737040"
  },
  {
    "text": "what you can simply do is you can pass in that you can pass in a type predicate a a",
    "start": "2737040",
    "end": "2743920"
  },
  {
    "text": "a i guess it's a predicate that takes a typos input and returns a boolean right so if whenever you return true from from",
    "start": "2743920",
    "end": "2750720"
  },
  {
    "text": "this predicate the the component type is going to be stopped out so this could be something like this where anything that",
    "start": "2750720",
    "end": "2757359"
  },
  {
    "text": "is that this is an installation starts with third party component is going to be replaced and just moved out of the",
    "start": "2757359",
    "end": "2762640"
  },
  {
    "text": "way and you can even take it one step further i don't know how many of you have heard of",
    "start": "2762640",
    "end": "2768000"
  },
  {
    "text": "shadow render before shadow renders sort of a concept that exists in in other front end frameworks like like react and",
    "start": "2768000",
    "end": "2773599"
  },
  {
    "text": "similar where it basically says share a render of this component and that will basically effectively only render the component and ignore all the child",
    "start": "2773599",
    "end": "2779599"
  },
  {
    "text": "components but we can emulate that quite easily we can just say add stop and stop out everything that isn't the type i'm",
    "start": "2779599",
    "end": "2785520"
  },
  {
    "text": "rendering that my component on interest in this case foo and then you only get to render foo no matter how many child",
    "start": "2785520",
    "end": "2791040"
  },
  {
    "text": "components you have now or in the future so it's sort of a lightweight",
    "start": "2791040",
    "end": "2796079"
  },
  {
    "text": "way of doing shadow rendering another thing",
    "start": "2796079",
    "end": "2801119"
  },
  {
    "start": "2799000",
    "end": "2799000"
  },
  {
    "text": "that we might want to do to sort of get that third rule uh is to do mocking and it turns out",
    "start": "2801119",
    "end": "2808000"
  },
  {
    "text": "that you can actually mock a component using your most likely using your favorite mocking library so if you're",
    "start": "2808000",
    "end": "2813680"
  },
  {
    "text": "using i've tested with moq and in substitute i'm quite sure that terarex just mark will work quite well with this",
    "start": "2813680",
    "end": "2820720"
  },
  {
    "text": "as well it might actually even work better than the two because it also has at least on the paid version ability to do things with field types and with",
    "start": "2820720",
    "end": "2827440"
  },
  {
    "text": "non-virtual things but you can actually just mock a concrete type in using embarking tools",
    "start": "2827440",
    "end": "2833760"
  },
  {
    "text": "so you can say mock off foo or walk off bar and that will mock the component and why",
    "start": "2833760",
    "end": "2839359"
  },
  {
    "text": "does that work well mox inherits from the thing they mock",
    "start": "2839359",
    "end": "2844400"
  },
  {
    "text": "so that is the first thumb up we have for rule number three uh lifecycle methods on a standard",
    "start": "2844400",
    "end": "2851280"
  },
  {
    "text": "blazer component a component that inherits from the component base type which is the",
    "start": "2851280",
    "end": "2856800"
  },
  {
    "text": "default you get in blazer well all of those are virtual and virtual methods when mocked",
    "start": "2856800",
    "end": "2863440"
  },
  {
    "text": "they just get you know they just do nothing unless you go and configure them through the usual mocking setup logic",
    "start": "2863440",
    "end": "2869920"
  },
  {
    "text": "so basically the component gets neutered it doesn't do anything now because all the all the",
    "start": "2869920",
    "end": "2875839"
  },
  {
    "text": "lifecycle methods uh basically don't do anything so it's so it's like having a an empty component that only inherits",
    "start": "2875839",
    "end": "2882079"
  },
  {
    "text": "from component base the only exception is that if the component you are marking has a constructor that isn't virtual it",
    "start": "2882079",
    "end": "2889680"
  },
  {
    "text": "isn't soft it can't be sort of neutered so the constructor will still run that also means if you have any field",
    "start": "2889680",
    "end": "2895359"
  },
  {
    "text": "initializers or if you have any property initializers those will also run unless",
    "start": "2895359",
    "end": "2900640"
  },
  {
    "text": "the properties are virtual um and if you have any disposal dispose async they will also run again unless",
    "start": "2900640",
    "end": "2907040"
  },
  {
    "text": "they are virtual so that's something to be aware of so this is sort of a this might not work in all cases but it",
    "start": "2907040",
    "end": "2913359"
  },
  {
    "text": "will definitely work in most cases i think and there's one little trick we have to remember and that is that mocking",
    "start": "2913359",
    "end": "2920559"
  },
  {
    "text": "uh sometimes you can't use the same mock instance for muslims so if you have multiple bars in the same foo you have",
    "start": "2920559",
    "end": "2926720"
  },
  {
    "text": "to actually pass in two different mocks mock instances you can't reuse blazer doesn't allow us to have two instances",
    "start": "2926720",
    "end": "2934000"
  },
  {
    "text": "of the same component different places in the in in the component tree so that's basically what that rule is",
    "start": "2934000",
    "end": "2939200"
  },
  {
    "text": "so let's look at an example so marking a single component instance how does that look so again we have the",
    "start": "2939200",
    "end": "2946319"
  },
  {
    "text": "foo and the bar example and now i'm here i hear i'm using mock but you know like i said most mocking",
    "start": "2946319",
    "end": "2952319"
  },
  {
    "text": "frameworks will probably work quite well with this so we're just creating a mark of bar and we're using the add method uh to",
    "start": "2952319",
    "end": "2959040"
  },
  {
    "text": "pass in the mock object and say whenever you see when you see one bar in the component tree use this mark object",
    "start": "2959040",
    "end": "2966000"
  },
  {
    "text": "instead and then again we render our component and now we can actually go and",
    "start": "2966000",
    "end": "2971520"
  },
  {
    "text": "find bar in our component tree and why can we do that because we because the mark is actually a bar",
    "start": "2971520",
    "end": "2977440"
  },
  {
    "text": "so and that's actually what we want because if we have that reference we want a proper bar in our component tree",
    "start": "2977440",
    "end": "2983839"
  },
  {
    "text": "so that's also why we can go ahead and find that component and the component tree of type bar and now we can actually",
    "start": "2983839",
    "end": "2989839"
  },
  {
    "text": "go and look at the bar the in real instance of the bark render component and we can actually verify that it is",
    "start": "2989839",
    "end": "2995680"
  },
  {
    "text": "indeed the same instance as our unbox component so this just shows that it actually does the right thing it actually replaces the insta the the",
    "start": "2995680",
    "end": "3002160"
  },
  {
    "text": "original bar with the with the mach bar so the next example would obviously be well if we have two bars and a foo",
    "start": "3002160",
    "end": "3009040"
  },
  {
    "text": "kind of sounds like a joke right speaking of a joke two bars walks into a foo now um",
    "start": "3009040",
    "end": "3014880"
  },
  {
    "text": "we can use in at least an moku type i'm not expert in the immoke in mock the mocking framework but i found something",
    "start": "3014880",
    "end": "3022160"
  },
  {
    "text": "called mock repository and that's sort of a way for you to configure um",
    "start": "3022160",
    "end": "3027839"
  },
  {
    "text": "this sort of have the same mock configuration for a whole bunch of mocks you create through the repository so we",
    "start": "3027839",
    "end": "3032880"
  },
  {
    "text": "create one of those and here we instead of passing the instance we pass in a i",
    "start": "3032880",
    "end": "3039359"
  },
  {
    "text": "guess a component factory function uh basically an action that when it's",
    "start": "3039359",
    "end": "3044880"
  },
  {
    "text": "called it should return and mock instance of bar and that's what we do here with mock repository and now in our",
    "start": "3044880",
    "end": "3051359"
  },
  {
    "text": "verification well we go and use find components plural to find all the bars and now we can just use the mark.get to",
    "start": "3051359",
    "end": "3058079"
  },
  {
    "text": "verify that the found instances of the bars are actually mocked components the",
    "start": "3058079",
    "end": "3063359"
  },
  {
    "text": "mock.get method would throw an exception if if if uh if it failed uh like if it",
    "start": "3063359",
    "end": "3070319"
  },
  {
    "text": "felt if it wasn't actually an unlocked instance so there's definitely some potential here",
    "start": "3070319",
    "end": "3075760"
  },
  {
    "text": "uh these bits here the the add method that allows you to pass in instances of",
    "start": "3075760",
    "end": "3082079"
  },
  {
    "text": "of bars of marked instances or just instances you create yourself if you like uh this is still sort of preview",
    "start": "3082079",
    "end": "3088000"
  },
  {
    "text": "bits for b units so if you want to play with that that's uh you go you have to go check the get the",
    "start": "3088000",
    "end": "3093359"
  },
  {
    "text": "previous versions in your nougat package explore to get that i would love if you could come and join",
    "start": "3093359",
    "end": "3098640"
  },
  {
    "text": "the discussion on the github issues list for v-unit if you have any feedback suggestions for how we can",
    "start": "3098640",
    "end": "3104559"
  },
  {
    "text": "prove this this is potentially very good from creating you know stable tests for your components",
    "start": "3104559",
    "end": "3110800"
  },
  {
    "text": "but uh and i'm trying to sort of make it generic so you can use your existing blocking libraries and don't have to",
    "start": "3110800",
    "end": "3116319"
  },
  {
    "text": "basically build the marketing library that would be a huge undertaking so if you have any input or you may be an",
    "start": "3116319",
    "end": "3121920"
  },
  {
    "text": "experienced user of moq or insubstitute or just block or something and you have some tips and tricks you want to share",
    "start": "3121920",
    "end": "3127839"
  },
  {
    "text": "please come and hang out and share with us so what did we see today well we started by",
    "start": "3127839",
    "end": "3135280"
  },
  {
    "text": "looking at why and what the unit is you also saw the hello world of b units with",
    "start": "3135280",
    "end": "3140319"
  },
  {
    "text": "the counter test and then we whoops that was a bit too fast there and then",
    "start": "3140319",
    "end": "3147200"
  },
  {
    "text": "we looked at what we can test like should we use markup testing or verify markup or should we verify component",
    "start": "3147200",
    "end": "3153359"
  },
  {
    "text": "logic or and when should you switch between the two we also discuss techniques for creating",
    "start": "3153359",
    "end": "3158480"
  },
  {
    "text": "maintainable components and again techniques for creating maintainable tests and",
    "start": "3158480",
    "end": "3163839"
  },
  {
    "text": "this is my next slide so thank you very much for for coming and hanging out in this you know these special",
    "start": "3163839",
    "end": "3169359"
  },
  {
    "text": "circumstances and before we get to questions i want to give a quick shout out sort of a pet peeve of mine but i i have been have had uh progress trailer",
    "start": "3169359",
    "end": "3177119"
  },
  {
    "text": "against fusion sponsors sponsoring uh it for quite a while and it's it's just great to have companies coming into open",
    "start": "3177119",
    "end": "3183599"
  },
  {
    "text": "source and and giving back and supporting open source so if you out there uh",
    "start": "3183599",
    "end": "3190480"
  },
  {
    "text": "you know have any influence on your company go go have a look at what open source you're using and and maybe see if",
    "start": "3190480",
    "end": "3197119"
  },
  {
    "text": "there's any way you can support that open source it makes a huge difference as an open source container to get support from from companies from from",
    "start": "3197119",
    "end": "3203119"
  },
  {
    "text": "the community i would rather have it from companies because they in all fairness have most likely have more deeper pockets than",
    "start": "3203119",
    "end": "3209280"
  },
  {
    "text": "than the rest of us but it's it's a huge help to the open source community and helps keep motivation going so so if you",
    "start": "3209280",
    "end": "3214319"
  },
  {
    "text": "have any influence over your boss or you are the boss consider you know figuring to figure out another way you can support open source and there's many",
    "start": "3214319",
    "end": "3219920"
  },
  {
    "text": "great open source libraries out there that don't really have any support so so please help out if you can focus or sick",
    "start": "3219920",
    "end": "3225520"
  },
  {
    "text": "but yeah thank you very much and if you have any questions now's the time otherwise hear my here's my contact info",
    "start": "3225520",
    "end": "3231119"
  },
  {
    "text": "and you can go and find me online if you want to ask questions later",
    "start": "3231119",
    "end": "3237480"
  },
  {
    "text": "thank you",
    "start": "3238480",
    "end": "3240880"
  },
  {
    "text": "i can also say that i'm probably going to hang out on the slack channel afterwards for this room so if anybody",
    "start": "3244559",
    "end": "3249839"
  },
  {
    "text": "is watching online you can just ask your questions in the slack channel that's also okay",
    "start": "3249839",
    "end": "3255920"
  },
  {
    "text": "otherwise i wish you a very great rest of the conference",
    "start": "3255920",
    "end": "3262200"
  },
  {
    "text": "you",
    "start": "3269599",
    "end": "3271680"
  }
]