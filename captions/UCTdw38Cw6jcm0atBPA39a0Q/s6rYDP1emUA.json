[
  {
    "start": "0",
    "end": "188000"
  },
  {
    "text": "hello everyone welcome to this last session of the day for the people in the back standing up you can always there's",
    "start": "9919",
    "end": "16800"
  },
  {
    "text": "a couple of seats there as well welcome for being here at this last session of",
    "start": "16800",
    "end": "22560"
  },
  {
    "text": "the day session about indexing and searching new get the dork which at your functions in search now the idea of this",
    "start": "22560",
    "end": "28919"
  },
  {
    "text": "talk is to walk you through a couple of things that we've been building at JetBrains and have been experimenting",
    "start": "28919",
    "end": "34800"
  },
  {
    "text": "with on Azure functions it's gonna be mainly how nougat works how we can fetch",
    "start": "34800",
    "end": "40680"
  },
  {
    "text": "data from nougat and how we can use either functions with custom bindings to make it more easy for ourselves to index",
    "start": "40680",
    "end": "48239"
  },
  {
    "text": "all of the public types that are available on nougat and map them into new kit packages that are available so",
    "start": "48239",
    "end": "54000"
  },
  {
    "text": "let's go find this type on Nikita dork for those of you who have been using resharper or writer you may have seen",
    "start": "54000",
    "end": "61710"
  },
  {
    "text": "this thing when you start typing some class or some type that you are using in your codes you will see that of course",
    "start": "61710",
    "end": "67950"
  },
  {
    "text": "it turns out Reds because it's no not yet referenced in your project but what",
    "start": "67950",
    "end": "73649"
  },
  {
    "text": "will happen is if you alt enter resharper and writer will suggest you that you can actually find this type on",
    "start": "73649",
    "end": "79109"
  },
  {
    "text": "new quito dork it will do a search search for that public type and will actually install that nigut package into",
    "start": "79109",
    "end": "84779"
  },
  {
    "text": "your into your project so that's a really easy workflow to just start working with unsupported types or",
    "start": "84779",
    "end": "90389"
  },
  {
    "text": "unreferenced types and easily add the nougat reference into your projects now",
    "start": "90389",
    "end": "95459"
  },
  {
    "text": "of course this has to work somehow somehow we have to store the data on what public types are available and to",
    "start": "95459",
    "end": "101310"
  },
  {
    "text": "which new get packaged a map and that's what's the session gonna be about so back in 2013 we were thinking about",
    "start": "101310",
    "end": "108119"
  },
  {
    "text": "building something like this and I think in 2015 I will release this thing and once we start building this of course we",
    "start": "108119",
    "end": "115319"
  },
  {
    "text": "needed the resharper side of things to integrate with alt enter and make sure that you can actually install whenever",
    "start": "115319",
    "end": "120749"
  },
  {
    "text": "you search on the API and so on but we also decided we needed a service to provide all that data for the clients so",
    "start": "120749",
    "end": "127499"
  },
  {
    "text": "that you can actually install those things now back in 2015 Asher was not the azure of today and we",
    "start": "127499",
    "end": "134640"
  },
  {
    "text": "basically built another cloud service with a web role and a worker role running the API doing some of the",
    "start": "134640",
    "end": "140160"
  },
  {
    "text": "indexing and so on storing all of that stuff on I think even on a VM disk and",
    "start": "140160",
    "end": "145340"
  },
  {
    "text": "somewhere in the database that we could query afterwards building up that index we did based on the OData feeds that",
    "start": "145340",
    "end": "152400"
  },
  {
    "text": "nuke it has available for those of you don't know Oh data it's the graph QL from the last decades",
    "start": "152400",
    "end": "158040"
  },
  {
    "text": "it's basically a way to query databases over HTTP shape the result format that",
    "start": "158040",
    "end": "164220"
  },
  {
    "text": "you want to have run a query get the data based on whatever parameters that you pass in there and then start working",
    "start": "164220",
    "end": "170370"
  },
  {
    "text": "on that so the query you see on the slides there is basically the query that we used to fetch the latest packages",
    "start": "170370",
    "end": "176130"
  },
  {
    "text": "from a certain dates and index them in our service now nuke it over time in",
    "start": "176130",
    "end": "182970"
  },
  {
    "text": "2015 nuke it was a little bit different from what nougat is today nougat over",
    "start": "182970",
    "end": "188280"
  },
  {
    "start": "188000",
    "end": "188000"
  },
  {
    "text": "time has been growing actually Alexander here I've shown the tweets off he built",
    "start": "188280",
    "end": "194670"
  },
  {
    "text": "a service and he looked at the disk space that was available and he noticed that back in 2015 the repo of nougat was",
    "start": "194670",
    "end": "203040"
  },
  {
    "text": "pretty small and it grew over time so Nick it has becoming more popular and there's more packages there so more",
    "start": "203040",
    "end": "209280"
  },
  {
    "text": "indexing work for us to do as well also nougats has announced last year that",
    "start": "209280",
    "end": "215070"
  },
  {
    "text": "they would start signing all the packages that are on liggett's and basically what that means is they have",
    "start": "215070",
    "end": "220200"
  },
  {
    "text": "at some points open up all of the new kit packages added a signature in those new kit packages stored them again and",
    "start": "220200",
    "end": "227340"
  },
  {
    "text": "basically added them to the nougat org feed again so basically that means that",
    "start": "227340",
    "end": "232500"
  },
  {
    "text": "even when the repo was two terabytes approximately it would mean that's all of a sudden after this package signing",
    "start": "232500",
    "end": "239790"
  },
  {
    "text": "happens all of those packages would reappear on the feet and we would have to read next them even though nothing",
    "start": "239790",
    "end": "245310"
  },
  {
    "text": "really changed apart from that signature so a couple of things also we wanted to think about yeah changing changing the",
    "start": "245310",
    "end": "253020"
  },
  {
    "text": "way we were actually doing the indexing so let's talk about the nougat server-side API for a little bit so you",
    "start": "253020",
    "end": "258600"
  },
  {
    "text": "can imagine how you could start working with it and fetch data from it's so new",
    "start": "258600",
    "end": "263670"
  },
  {
    "start": "262000",
    "end": "262000"
  },
  {
    "text": "gates as you know talks to a repository can be a network share can be some HTTP or HTTPS server out there and you query",
    "start": "263670",
    "end": "271140"
  },
  {
    "text": "that server or you query that API and you can install packages into your project right",
    "start": "271140",
    "end": "276250"
  },
  {
    "text": "it has to api's the v2 API which is that Oh data based one that works pretty well",
    "start": "276250",
    "end": "282400"
  },
  {
    "text": "and pretty much all of the nougat servers out there support that protocol but new get the dork also has a v3",
    "start": "282400",
    "end": "288400"
  },
  {
    "text": "protocol which is JSON based and has been rethought after all data proved to",
    "start": "288400",
    "end": "294280"
  },
  {
    "text": "be not the best way of managing packages or fetching packages on nikita dork so that v3 protocol is actually pretty",
    "start": "294280",
    "end": "301510"
  },
  {
    "text": "interesting but the time when we wrote our indexer that protocol was not yet available but it is now that v2 protocol",
    "start": "301510",
    "end": "309880"
  },
  {
    "start": "308000",
    "end": "308000"
  },
  {
    "text": "was interesting because it basically provided oh data over HTTP to link to",
    "start": "309880",
    "end": "315220"
  },
  {
    "text": "entities on the server at nougats so basically any query you make against at",
    "start": "315220",
    "end": "320320"
  },
  {
    "text": "OData endpoints results in a database query that is custom to you and run some query on the database so you can imagine",
    "start": "320320",
    "end": "326980"
  },
  {
    "text": "if Nick it grows it becomes a little bit slower and so on and they added some optimizations but for us all we wanted",
    "start": "326980",
    "end": "333760"
  },
  {
    "text": "was like give us the latest packages since the last time we ran this indexer and we found that after a while these",
    "start": "333760",
    "end": "340510"
  },
  {
    "text": "queries became slower and slower and slower because of course it translates into a database that has to skip lots of",
    "start": "340510",
    "end": "346450"
  },
  {
    "text": "Records to only provide you with the latest packages that are in that database so it works but you get",
    "start": "346450",
    "end": "352630"
  },
  {
    "text": "realized it's not the best protocol and also for our use case it was also not the best protocol the v3 protocol is",
    "start": "352630",
    "end": "360160"
  },
  {
    "text": "more interesting the v3 protocol is first of all JSON based which is not bad also not good it's basically not XML",
    "start": "360160",
    "end": "368680"
  },
  {
    "text": "which is always nice so it's less bloated and so on but the v3 protocol is also interesting because they built it",
    "start": "368680",
    "end": "374950"
  },
  {
    "text": "based on resources they discovered that fornicated work there were a couple of",
    "start": "374950",
    "end": "380530"
  },
  {
    "text": "use cases to query the API is that they had so they came up with different resources that you could target",
    "start": "380530",
    "end": "385810"
  },
  {
    "text": "depending on what you want to achieve so for example there's a catalog which is an append-only",
    "start": "385810",
    "end": "390880"
  },
  {
    "text": "event log of every package edition or every package deletion that happened on negative work your nukid client in",
    "start": "390880",
    "end": "397480"
  },
  {
    "text": "visual studio or in writer will probably not be using that one but if you want to do something like we do indexing you get",
    "start": "397480",
    "end": "403720"
  },
  {
    "text": "that catalog is actually quite interesting there's the registration blocks that's basically whenever open up the nougat dialog in Visual",
    "start": "403720",
    "end": "410280"
  },
  {
    "text": "Studio you query some packages and you look at the details like the icon description etc that typically comes",
    "start": "410280",
    "end": "416220"
  },
  {
    "text": "from the registration when you do a package restore that typically comes from the flat container which is a by",
    "start": "416220",
    "end": "421830"
  },
  {
    "text": "convention sort of disk drive where a nougat can find packages and download the binaries and install them so that's",
    "start": "421830",
    "end": "427920"
  },
  {
    "text": "a really nice API and really nice to have all those different resources to do certain things and actually on get up",
    "start": "427920",
    "end": "434580"
  },
  {
    "text": "you can find codes that uses that API that you can use to work against any of",
    "start": "434580",
    "end": "439620"
  },
  {
    "text": "these resources that are available in that protocol so how does NuGet work you",
    "start": "439620",
    "end": "444660"
  },
  {
    "text": "see all these different resources that are available now when you upload a package to nougats actually what happens",
    "start": "444660",
    "end": "450300"
  },
  {
    "text": "is your data gets added to a database all the metadata who owns the package what's the package version package ID",
    "start": "450300",
    "end": "455970"
  },
  {
    "text": "etc then that data is also added into that append-only catalog and i'm based",
    "start": "455970",
    "end": "461610"
  },
  {
    "text": "on that catalog new kit itself provisions its search service make sure that that Flatts container is there that",
    "start": "461610",
    "end": "467460"
  },
  {
    "text": "the registrations are there and so on so we thought okay if they can run whatever infrastructure they have based on off of",
    "start": "467460",
    "end": "473820"
  },
  {
    "text": "the catalog maybe we can do the same as well for our resharper service there so the catalog seemed really interesting",
    "start": "473820",
    "end": "480420"
  },
  {
    "start": "478000",
    "end": "478000"
  },
  {
    "text": "and in fact if you go and look at that catalog it's really one stream since the beginning of nougats where you see all",
    "start": "480420",
    "end": "486390"
  },
  {
    "text": "of the packages that have been added over time with the timestamp in their states at the time of that timestamp so",
    "start": "486390",
    "end": "493020"
  },
  {
    "text": "what that means is that that catalog is chronological if you fetch from a certain date or until a certain date you",
    "start": "493020",
    "end": "499380"
  },
  {
    "text": "actually have the nougat States of that certain dates that you were targeting on so it allows you to do like a point in",
    "start": "499380",
    "end": "505830"
  },
  {
    "text": "time restore of nougats but also allows you to query all the packages after X dates for example the structure of that",
    "start": "505830",
    "end": "513150"
  },
  {
    "text": "catalog and I'll show you that in a bit in a browser is basically you have a route that route points to several pages",
    "start": "513150",
    "end": "519330"
  },
  {
    "text": "that are available and then every page has Leafs that points to a certain package version with a description in",
    "start": "519330",
    "end": "526110"
  },
  {
    "text": "the title and so on I know this doesn't say a lot but I will show you what it looks like so if you look at the catalog",
    "start": "526110",
    "end": "533250"
  },
  {
    "text": "and basically if you go to the new gets the doric API an API dot negated org",
    "start": "533250",
    "end": "538560"
  },
  {
    "text": "victory in X Jason you will see all of these resources that are less so if you do a query in Visual Studio in",
    "start": "538560",
    "end": "545439"
  },
  {
    "text": "writer you probably run against one of these query endpoints if you do an autocomplete while you are editing your",
    "start": "545439",
    "end": "551409"
  },
  {
    "text": "project file you will probably hit one of these endpoints whenever you do",
    "start": "551409",
    "end": "556979"
  },
  {
    "text": "whenever you for example need all the package details you'll probably use this URL as the base to discover all those",
    "start": "556979",
    "end": "562899"
  },
  {
    "text": "package details and so on but somewhere hidden in this metadata file there should be the catalog there we go and if",
    "start": "562899",
    "end": "571749"
  },
  {
    "text": "you open the catalog you will see that is a giant JSON file that simply contains nothing accepts let's wait for",
    "start": "571749",
    "end": "578979"
  },
  {
    "text": "it to loads there we are nothing accepts IDs which points to a page in the catalog with a commits",
    "start": "578979",
    "end": "586749"
  },
  {
    "text": "timestamp and a commits ID now this is interesting because if I want to fetch for example the packages that have been",
    "start": "586749",
    "end": "593379"
  },
  {
    "text": "added in the last two days I can scan this page or I can scan this route documents and just fetch the pages that",
    "start": "593379",
    "end": "600339"
  },
  {
    "text": "I need for that time range that I want to support in my my service if we go to",
    "start": "600339",
    "end": "605859"
  },
  {
    "text": "one of these pages you will see that such a page also contains much more data",
    "start": "605859",
    "end": "612220"
  },
  {
    "text": "it contains items and every item is a package that has an ID a type which is",
    "start": "612220",
    "end": "617979"
  },
  {
    "text": "either package details which means something happened to this package but it's still available or a package delete",
    "start": "617979",
    "end": "623589"
  },
  {
    "text": "which means that the package should be removed from search and from databases and so on we get the ID and we get the",
    "start": "623589",
    "end": "629619"
  },
  {
    "text": "version and if we go to one of those ID URLs that are in there you will see that you actually get back the author the",
    "start": "629619",
    "end": "636039"
  },
  {
    "text": "description the language last is a timestamp and so on for every package so by navigating all these endpoints we can",
    "start": "636039",
    "end": "642279"
  },
  {
    "text": "actually fetch all the data without hitting the new catalog database over all data and making sure that we're",
    "start": "642279",
    "end": "649029"
  },
  {
    "text": "stressing their database a little bit so that's a little bit how the catalog works in there now find this type on",
    "start": "649029",
    "end": "656079"
  },
  {
    "text": "Nikita dork we have it still running on that cloud service but we are refactoring it from using ah data to",
    "start": "656079",
    "end": "663309"
  },
  {
    "text": "using this v3 API now we also were thinking like should we continue",
    "start": "663309",
    "end": "668799"
  },
  {
    "text": "building on that thing or should we rethink what we are doing so we decided to also work with a serverless approach",
    "start": "668799",
    "end": "675339"
  },
  {
    "text": "which is the stocke basically to rebuild whatever we had from scratch using that server less",
    "start": "675339",
    "end": "681279"
  },
  {
    "text": "approach so welcome to this talk that's what we're gonna talk about for the rest of the talk so building a new version of",
    "start": "681279",
    "end": "687790"
  },
  {
    "text": "that indexer what would we need to do that we would need a couple of things first of all we would need something",
    "start": "687790",
    "end": "693670"
  },
  {
    "start": "688000",
    "end": "688000"
  },
  {
    "text": "that watches that new guitar dork catalog that scans for new packages that have been added and so on then for every",
    "start": "693670",
    "end": "700929"
  },
  {
    "text": "package that we discover on that catalog we will have to first of all download it extract it look at all the assemblies",
    "start": "700929",
    "end": "707259"
  },
  {
    "text": "that are in there and somehow store the mapping between all those public types in there as well as the package ID in",
    "start": "707259",
    "end": "713589"
  },
  {
    "text": "the package version and ideally also an API that is compatible with the current versions and previous versions of",
    "start": "713589",
    "end": "719829"
  },
  {
    "text": "resharper so we don't have to ship updates to to actually the clients of our API that we have so that's pretty",
    "start": "719829",
    "end": "725739"
  },
  {
    "text": "much what we needs and bonus points for an easy way to read next there's always cases where you have to reenact whatever",
    "start": "725739",
    "end": "732489"
  },
  {
    "text": "you have so as a site's each case of some requirement that we wanted to have",
    "start": "732489",
    "end": "737679"
  },
  {
    "text": "there we would like to be able to read next fests by copying the NuGet binaries and dumping everything into some JSON",
    "start": "737679",
    "end": "743980"
  },
  {
    "text": "blob and we could really load quite quickly now watching the new cathode or",
    "start": "743980",
    "end": "749499"
  },
  {
    "text": "catalog could be a periodic check for example every hour we could check the catalog for new packages in the past",
    "start": "749499",
    "end": "755410"
  },
  {
    "text": "hour and do something there you already feel that doing that check we could also push some messages into a queue",
    "start": "755410",
    "end": "761709"
  },
  {
    "text": "somewhere and for every package that gets added we would add a message to a queue somewhere then process that",
    "start": "761709",
    "end": "767199"
  },
  {
    "text": "message and do whatever we have to do to make that indexing happen and then of course we have our API but that could be",
    "start": "767199",
    "end": "772629"
  },
  {
    "text": "just any API that just provides Jason over wire sounds a bit like functions",
    "start": "772629",
    "end": "778569"
  },
  {
    "start": "777000",
    "end": "777000"
  },
  {
    "text": "because if you look at the marketing slide techs that a lot of Microsoft people will give you you will see that this is at your functions you have input",
    "start": "778569",
    "end": "785259"
  },
  {
    "text": "processing and outputs that's really nice because pretty much all the software out there does this but the",
    "start": "785259",
    "end": "791679"
  },
  {
    "text": "really cool thing is that the inputs is basically truing triggering the fact that some code has to run your code will",
    "start": "791679",
    "end": "798189"
  },
  {
    "text": "do its thing and when that code has finished it will provide some outputs that is then processed by the functions",
    "start": "798189",
    "end": "804339"
  },
  {
    "text": "runtime so basically what this runtime gives you is codes that will run when",
    "start": "804339",
    "end": "809620"
  },
  {
    "text": "something happens event-driven codes basically but also conventions to get",
    "start": "809620",
    "end": "814750"
  },
  {
    "text": "inputs and write output from that function so basically what it promises is that we write our codes the inputs we",
    "start": "814750",
    "end": "821650"
  },
  {
    "text": "can use a collection of whatever we want to use as the inputs and when we have output from our functions we write the",
    "start": "821650",
    "end": "827500"
  },
  {
    "text": "output to the output binding in as your functions as well so we decided okay",
    "start": "827500",
    "end": "833110"
  },
  {
    "text": "let's think in functions and what functions do we need well of course we need one function that watches the",
    "start": "833110",
    "end": "838779"
  },
  {
    "text": "catalog one that watches new get the door for new packages then we would have a couple of queues or a queue",
    "start": "838779",
    "end": "845110"
  },
  {
    "text": "subscriptions where we would put indexing commands as well as downloading commands what we wanted to do was mirror",
    "start": "845110",
    "end": "851020"
  },
  {
    "text": "all the binaries on nikita torque so that we could easily remix whenever needed without stressing new catalogue",
    "start": "851020",
    "end": "856990"
  },
  {
    "text": "itself but also the indexing itself so we would have two other functions one for indexing and one for downloading",
    "start": "856990",
    "end": "863710"
  },
  {
    "text": "then we would have a search service which would contain the entire catalog of public types and whatever package ID",
    "start": "863710",
    "end": "870670"
  },
  {
    "text": "and version they map to and our API may be as a function as well so let's let's see if we can build this so collecting",
    "start": "870670",
    "end": "877630"
  },
  {
    "text": "from catalogue let's start there if we look at how the catalog is structured you you have these time",
    "start": "877630",
    "end": "884110"
  },
  {
    "text": "stamps and these pages and so on what we can actually do is make use of some of",
    "start": "884110",
    "end": "889209"
  },
  {
    "text": "the new github proto lock protocol that catalog libraries that nigut has on github to loop over that catalog and if",
    "start": "889209",
    "end": "897670"
  },
  {
    "text": "we would do that and let's look at the code here what do you get from that new get package and actually reference the",
    "start": "897670",
    "end": "903550"
  },
  {
    "text": "sources but you can also use this as a new get package what you get there is that you have concept of a cursor you",
    "start": "903550",
    "end": "910150"
  },
  {
    "text": "have a time stamp that you follow while reading that's that catalog you also have a batch catalog processor which is",
    "start": "910150",
    "end": "916750"
  },
  {
    "text": "something that reads from this catalog that makes use of this cursor to see which packages have been added or",
    "start": "916750",
    "end": "923320"
  },
  {
    "text": "deleted at some point in time that has a clients to that catalog and then some processing whenever a package is added",
    "start": "923320",
    "end": "929529"
  },
  {
    "text": "or whenever a package is deleted so using nothing but everything that is",
    "start": "929529",
    "end": "934570"
  },
  {
    "text": "standard in that nougat package that nougat itself provides we can simply write something like this where we write",
    "start": "934570",
    "end": "940060"
  },
  {
    "text": "the adds to the console for example so say we want to fetch the packages from",
    "start": "940060",
    "end": "946839"
  },
  {
    "text": "the last hour on nougats we can do that and say okay give me the last 1 hour",
    "start": "946839",
    "end": "954279"
  },
  {
    "text": "on widgets if we would run this you would see nothing will happen for a while because we are reading that index",
    "start": "954279",
    "end": "960339"
  },
  {
    "text": "page and all of those catalog leaves that are available but at some point you will see that we start out putting all",
    "start": "960339",
    "end": "966399"
  },
  {
    "text": "the package IDs in package versions from the last hour so really easy to write but also very fast because it's just",
    "start": "966399",
    "end": "972670"
  },
  {
    "text": "downloading Jason from a CDN somewhere and making that happen and since Norway has really good internet speeds this was",
    "start": "972670",
    "end": "978939"
  },
  {
    "text": "really fast and I'm actually pleasantly surprised about the speed of this so these are the packages from the last",
    "start": "978939",
    "end": "984519"
  },
  {
    "text": "hour life from the catalog so that's nice nice to do now what we can do is we",
    "start": "984519",
    "end": "992920"
  },
  {
    "text": "could make this into a function as well so what we can do is write a function",
    "start": "992920",
    "end": "997959"
  },
  {
    "text": "that triggers for example every 15 minutes and runs pretty much this code and adds things to some cue so that's",
    "start": "997959",
    "end": "1004920"
  },
  {
    "text": "basically what we can do here let's add a new timer trigger let's do that that's",
    "start": "1004920",
    "end": "1012629"
  },
  {
    "text": "it fine and let's let's keep the defaults let's run it every every 5 minutes and then we can say we want to",
    "start": "1012629",
    "end": "1019259"
  },
  {
    "text": "run that trigger pretty much the same codes with a couple of differences one",
    "start": "1019259",
    "end": "1025020"
  },
  {
    "text": "difference would be that in this case our cursor would be based on the timer",
    "start": "1025020",
    "end": "1030178"
  },
  {
    "text": "that we have here so my timer because that timer that we get from every functions gives us the last time the",
    "start": "1030179",
    "end": "1035909"
  },
  {
    "text": "timer run but also the next time the timer will run and since we are querying this catalog based on time stamps that's",
    "start": "1035909",
    "end": "1042058"
  },
  {
    "text": "perfect because we have the exact window for this timer in the next occurrence of the timer in the next occurrence of the",
    "start": "1042059",
    "end": "1048298"
  },
  {
    "text": "timer our to run it so when we do this we can basically use the same codes and",
    "start": "1048299",
    "end": "1053490"
  },
  {
    "text": "lock something for example to the console in this case and see if that runs or doesn't run obviously instead of",
    "start": "1053490",
    "end": "1061710"
  },
  {
    "text": "logging you would in here add something to a queue and make sure that we can process that queue but just to give you",
    "start": "1061710",
    "end": "1067529"
  },
  {
    "text": "the idea it's taking the same code from our console app and running it in an azure function that we can use so let's",
    "start": "1067529",
    "end": "1073710"
  },
  {
    "text": "let's try that let's start my storage emulator as well so we can actually run",
    "start": "1073710",
    "end": "1081690"
  },
  {
    "text": "it and when we run this one I still have something going on yes I should make this an async task as well so once we",
    "start": "1081690",
    "end": "1091740"
  },
  {
    "text": "have this and we run this you will see basically exactly the same demo that I had before only this time I'm already",
    "start": "1091740",
    "end": "1097980"
  },
  {
    "text": "serverless I have a timer function trigger triggering that thing every 5 minutes let's allow the firewall here",
    "start": "1097980",
    "end": "1104400"
  },
  {
    "text": "security is overrated anyway there we go our function should run and at some point you will see the output",
    "start": "1104400",
    "end": "1110460"
  },
  {
    "text": "starting to come in from the last 5 minutes for example now I know I set 5 minutes here so that means if nothing",
    "start": "1110460",
    "end": "1117540"
  },
  {
    "text": "happened in the past five minutes on nuke it we will not see anything but you get the idea this will run this will",
    "start": "1117540",
    "end": "1122790"
  },
  {
    "text": "create a catalog in every 5 minutes we will see items appear in the log there ok so yeah let's not wait for it trust",
    "start": "1122790",
    "end": "1130380"
  },
  {
    "text": "me it will show up eventually when someone uploads a package if you have a package feel free to publish and you",
    "start": "1130380",
    "end": "1135540"
  },
  {
    "text": "will see it come by their rights so",
    "start": "1135540",
    "end": "1140640"
  },
  {
    "text": "collecting from the catalogue is easy we can use the timer function to do that write something into a queue or do",
    "start": "1140640",
    "end": "1146640"
  },
  {
    "start": "1141000",
    "end": "1141000"
  },
  {
    "text": "something like the indexing immediately init function but that's not ideal if",
    "start": "1146640",
    "end": "1152040"
  },
  {
    "text": "you've heard about Paul B Johnston that's actually the guy who worked on lambda at at Amazon and he wrote a",
    "start": "1152040",
    "end": "1159030"
  },
  {
    "text": "series of best practices for functions and there's a couple that are really important when you start looking at",
    "start": "1159030",
    "end": "1164820"
  },
  {
    "text": "functions and one of those is that every function should only do one thing of course there's always going to be",
    "start": "1164820",
    "end": "1170340"
  },
  {
    "text": "exceptions and so on but I yearly your function should only do one thing and do one thing well why well it makes error",
    "start": "1170340",
    "end": "1178290"
  },
  {
    "text": "handling easy it makes scaling easy because you can just scale one function in your application instead of an entire",
    "start": "1178290",
    "end": "1184380"
  },
  {
    "text": "functionality in your application and by doing this you also immediately have to",
    "start": "1184380",
    "end": "1189660"
  },
  {
    "text": "think about starting to split up your architecture into using something messaging bastes so let's see if we can",
    "start": "1189660",
    "end": "1195570"
  },
  {
    "text": "make this better instead of having that timer to do things come up with something else so let's create a better",
    "start": "1195570",
    "end": "1203040"
  },
  {
    "text": "version of this so what I did and I'm going to go through existing code right",
    "start": "1203040",
    "end": "1209340"
  },
  {
    "text": "now what I did was I created the in cure function here which does exactly what I",
    "start": "1209340",
    "end": "1215520"
  },
  {
    "text": "have been doing using that same catalog client going over the catalog and so on",
    "start": "1215520",
    "end": "1220590"
  },
  {
    "text": "but instead of adding things into my search index manually and doing all",
    "start": "1220590",
    "end": "1226140"
  },
  {
    "text": "those things what I'm doing here is adding things to a queue what I'm adding is a package operation with a package ID",
    "start": "1226140",
    "end": "1232140"
  },
  {
    "text": "package version and so on so that afterwards I can start processing whatever is in there",
    "start": "1232140",
    "end": "1238560"
  },
  {
    "text": "next I will have an indexer function that listens to this queue based on a queue trigger and then does something",
    "start": "1238560",
    "end": "1244320"
  },
  {
    "text": "with it for now we will only let it log the fact that a package was that it's a little dork but you get the idea one",
    "start": "1244320",
    "end": "1250740"
  },
  {
    "text": "will in queue things and the other one will actually do the processing of these messages now what is interesting is this",
    "start": "1250740",
    "end": "1257340"
  },
  {
    "text": "queue trigger binding you already also see that in the end key where we have the queue as an output there I told you",
    "start": "1257340",
    "end": "1264420"
  },
  {
    "text": "that a function has inputs does some processing and then has outputs this is where that comes into play whenever you",
    "start": "1264420",
    "end": "1270990"
  },
  {
    "text": "want to trigger something based on a message you may have a queue trigger that provides you with the run command",
    "start": "1270990",
    "end": "1277440"
  },
  {
    "text": "for your function but also with the input for your function so we get from our queue with a specific name we get",
    "start": "1277440",
    "end": "1283860"
  },
  {
    "text": "data that we can work with namely a package operation on the inside instead",
    "start": "1283860",
    "end": "1290040"
  },
  {
    "text": "of writing to the queue manually what we do is simply add an elements to this queue collector and this queue collector",
    "start": "1290040",
    "end": "1296760"
  },
  {
    "text": "will rights to a queue with the name indexing queue in this case so that's what we are doing here leveraging Azure",
    "start": "1296760",
    "end": "1302610"
  },
  {
    "text": "functions do not manually fetch data and write data into some some output storage",
    "start": "1302610",
    "end": "1308220"
  },
  {
    "text": "that we want to use we are actually leveraging the fact that the runtime gives you this this data if you want to",
    "start": "1308220",
    "end": "1314610"
  },
  {
    "text": "do Nets so we started thinking would there be a better version of building",
    "start": "1314610",
    "end": "1320280"
  },
  {
    "start": "1319000",
    "end": "1319000"
  },
  {
    "text": "our own system and actually if you start looking at the different bindings that are available there could be a better",
    "start": "1320280",
    "end": "1325980"
  },
  {
    "text": "way of building things out of the box function ships with the timer trigger the fact that a message appears on a",
    "start": "1325980",
    "end": "1331920"
  },
  {
    "text": "queue maybe something happens on event grid or an event up and so on and those things can trigger your function and can",
    "start": "1331920",
    "end": "1337860"
  },
  {
    "text": "give your function inputs there's a couple of bindings that can take output from your function and write it into",
    "start": "1337860",
    "end": "1343500"
  },
  {
    "text": "some backing store now the interesting thing is that those bindings you can build them yourself I have seen sequel server",
    "start": "1343500",
    "end": "1349900"
  },
  {
    "text": "bindings there's a cent grid binding to send emails whenever something completes in a function there's a Dropbox binding",
    "start": "1349900",
    "end": "1356890"
  },
  {
    "text": "that I have seen so what if we could create like a new gate catalog binding to move all of that catalog collecting",
    "start": "1356890",
    "end": "1363880"
  },
  {
    "text": "logic outside of the code of our function and in there only do whatever we have to do which is the thing that we",
    "start": "1363880",
    "end": "1369700"
  },
  {
    "text": "want to do well the only thing now for that catalog that would be an ideal case",
    "start": "1369700",
    "end": "1374980"
  },
  {
    "text": "to have a trigger binding a custom trigger binding why well because we have",
    "start": "1374980",
    "end": "1381010"
  },
  {
    "text": "that catalog and we only want to do something when a new package appears on Nikita dork so that's an ideal queue",
    "start": "1381010",
    "end": "1386590"
  },
  {
    "text": "trigger or trigger binding because it triggers our function logic but also provides input to our function now the",
    "start": "1386590",
    "end": "1393790"
  },
  {
    "text": "problem with custom trigger bindings is that they are not officially supported yet yet we thought well let's build one anyway",
    "start": "1393790",
    "end": "1401080"
  },
  {
    "text": "and up till now it's been running for two months now we only have to restart the function app twice so far because",
    "start": "1401080",
    "end": "1408760"
  },
  {
    "text": "the trigger stopped working so it's not officially supported but it works pretty well if you have some monitoring enabled",
    "start": "1408760",
    "end": "1415210"
  },
  {
    "text": "so let's see if we can create our custom trigger binding there right second",
    "start": "1415210",
    "end": "1422650"
  },
  {
    "text": "approach in this case our nquing function is now much simpler we still",
    "start": "1422650",
    "end": "1429580"
  },
  {
    "text": "have our cue to which we will write the outputs we still add our output to a",
    "start": "1429580",
    "end": "1434620"
  },
  {
    "text": "queue where we will process the logic but instead of having all that catalog reading codes in our function now we",
    "start": "1434620",
    "end": "1441070"
  },
  {
    "text": "have a binding called new gate catalog trigger that keeps some blob somewhere to keep track basically if the cursor of",
    "start": "1441070",
    "end": "1448180"
  },
  {
    "text": "where we are in the catalog reading packages and whenever that thing triggers we get a package operation and",
    "start": "1448180",
    "end": "1454180"
  },
  {
    "text": "all we do in our function is forward it into a queue so we can process it later",
    "start": "1454180",
    "end": "1459240"
  },
  {
    "text": "okay let's look at that new gate catalog trigger because that's of course the custom code in which we wanted to do the",
    "start": "1459240",
    "end": "1465760"
  },
  {
    "text": "custom triggering based on the new gate catalog so that attribute is basically a",
    "start": "1465760",
    "end": "1471250"
  },
  {
    "text": "data class to which we can provide some options for our trigger in this case we",
    "start": "1471250",
    "end": "1476380"
  },
  {
    "text": "give it the service index URL where is new gets the dogs API located so we can change that if he",
    "start": "1476380",
    "end": "1481550"
  },
  {
    "text": "wants a connection and some place where we want to store the cursor of our",
    "start": "1481550",
    "end": "1486740"
  },
  {
    "text": "application as well that cursor is important because that cursor and let me quickly show you in our starch accounts",
    "start": "1486740",
    "end": "1493130"
  },
  {
    "text": "if you look at if you want to keep track of where you are in the catalog you have",
    "start": "1493130",
    "end": "1498320"
  },
  {
    "text": "to store somewhere where you are in the catalog which would be a timestamp so what we did was we added pets and we now",
    "start": "1498320",
    "end": "1505640"
  },
  {
    "text": "have a cursor where we can store that timestamp so that's why we need that cursor property in there as well and we",
    "start": "1505640",
    "end": "1512360"
  },
  {
    "text": "can give it a name so we can run multiple of these bindings if we want and so on but basically we want to store",
    "start": "1512360",
    "end": "1517520"
  },
  {
    "text": "a timestamp of when the last package was retrieved from nougats so that's that",
    "start": "1517520",
    "end": "1523450"
  },
  {
    "text": "right so nothing special here in that binding attribute what is special though is the fact that we say okay this is a",
    "start": "1523450",
    "end": "1530630"
  },
  {
    "text": "binding now if you read the documentation on the azure functions custom binding stuff you will see that",
    "start": "1530630",
    "end": "1538460"
  },
  {
    "text": "this is all you have to do well it's not all you have to do so you have to add this attribute called binding but what",
    "start": "1538460",
    "end": "1545600"
  },
  {
    "text": "you also have to do is creates first of all we quickly first of all you have to",
    "start": "1545600",
    "end": "1553670"
  },
  {
    "text": "create a configuration which is a config provider where you say ok I have an extension to the functions runtime",
    "start": "1553670",
    "end": "1560090"
  },
  {
    "text": "called nougat catalog I have something that provides a trigger extension configuration very long name but the",
    "start": "1560090",
    "end": "1567260"
  },
  {
    "text": "name has to match with the fact with the name of your trigger as well so it's kind of by convention and you have to",
    "start": "1567260",
    "end": "1573200"
  },
  {
    "text": "add a binding rule so basically what we say is functions runtime whenever you see this new gate catalog trigger",
    "start": "1573200",
    "end": "1579410"
  },
  {
    "text": "attribute I want you to bind it to a trigger that is created by this trigger binding provider which is of course",
    "start": "1579410",
    "end": "1586130"
  },
  {
    "text": "another class that we have to implement now to get everything registered this is not yet enough you also have to add a",
    "start": "1586130",
    "end": "1592850"
  },
  {
    "text": "startup class and in that startup class basically registered effects that you have a migit catalog trigger extension",
    "start": "1592850",
    "end": "1599750"
  },
  {
    "text": "provider because otherwise the runtime will not pick it up but once you have this you can start creating your own",
    "start": "1599750",
    "end": "1605570"
  },
  {
    "text": "binding so what does that binding look like our binding has this",
    "start": "1605570",
    "end": "1611250"
  },
  {
    "text": "tribute of course which provides the options it has this thing that basically binds the fact that you can have a",
    "start": "1611250",
    "end": "1616530"
  },
  {
    "text": "parameter to the fact that you can have a binding and then we have this binding provider which will do some some more",
    "start": "1616530",
    "end": "1622679"
  },
  {
    "text": "work so what this one will do is whenever the function runtime decides it has to create a binding for you or an",
    "start": "1622679",
    "end": "1629760"
  },
  {
    "text": "instance of this binding it will go through these codes fetch the attributes so we can set some options and so on if",
    "start": "1629760",
    "end": "1637200"
  },
  {
    "text": "the binding is support for a specific parameter type if not which Oh an exception if it is we start creating",
    "start": "1637200",
    "end": "1643830"
  },
  {
    "text": "whatever you want to have so you want to have a reference to a blob client where we can store that cursor in blob storage",
    "start": "1643830",
    "end": "1650210"
  },
  {
    "text": "we want to create it if it doesn't exist yet and then we really want to create our catalog trigger binding itself the",
    "start": "1650210",
    "end": "1658320"
  },
  {
    "text": "binding is where the cool things start to happen so the binding itself has a",
    "start": "1658320",
    "end": "1663840"
  },
  {
    "text": "listener because you have an input binding that listens for something and then triggers the fact that your",
    "start": "1663840",
    "end": "1669600"
  },
  {
    "text": "function has to run you have to create this listener as well and create an instance of something that listens for data I will go to this one later on",
    "start": "1669600",
    "end": "1677520"
  },
  {
    "text": "because that's the more the most important one that we have here but I also also go to the fact that you have",
    "start": "1677520",
    "end": "1683190"
  },
  {
    "text": "to or at least you can provide additional data contracts for binding",
    "start": "1683190",
    "end": "1688440"
  },
  {
    "text": "the data that you will provide from your binding if you're only doing that net code this doesn't matter at all because",
    "start": "1688440",
    "end": "1695159"
  },
  {
    "text": "dotnet will do strong typing it will use JSON D serialization and everything will magically work but if you want to use a",
    "start": "1695159",
    "end": "1702270"
  },
  {
    "text": "new gates catalog trigger binding that we are creating here written in dotnet s-- but process everything using a no",
    "start": "1702270",
    "end": "1708600"
  },
  {
    "text": "J's function for example what you will have to do is basically provide the shape of your JSON that you will push",
    "start": "1708600",
    "end": "1714630"
  },
  {
    "text": "into that no J's function that you are writing if you want to do a PowerShell base function same thing you will have",
    "start": "1714630",
    "end": "1720570"
  },
  {
    "text": "to add all this stuff to basically give it the shape of the data that you will pass in there so when we have that we",
    "start": "1720570",
    "end": "1727860"
  },
  {
    "text": "can create our new gate catalog listener and this is where everything that we've seen so far starts to happen so what we",
    "start": "1727860",
    "end": "1734130"
  },
  {
    "text": "have there is again we have our batch catalog processor we have a cloud blob cursor which uses that blob to store the",
    "start": "1734130",
    "end": "1740909"
  },
  {
    "text": "timestamp of where we are in the entire catalog of negates we have our catalog clients and then",
    "start": "1740909",
    "end": "1746340"
  },
  {
    "text": "something that handles package edits and package deleted these two are quite important because they will trigger",
    "start": "1746340",
    "end": "1753059"
  },
  {
    "text": "first of all the fact that our function has to run but second of all they will give the data to the functions run time",
    "start": "1753059",
    "end": "1759510"
  },
  {
    "text": "that will be passed into the function that we are actually running so what will happen is if my package added this",
    "start": "1759510",
    "end": "1766830"
  },
  {
    "text": "cults I call own executor a try execute async I give my trigger value",
    "start": "1766830",
    "end": "1772919"
  },
  {
    "text": "all the data that it has to have and then that's pretty much it this is",
    "start": "1772919",
    "end": "1778080"
  },
  {
    "text": "basically telling the Asscher functions run time whenever I have data run this function and give it this JSON blob of",
    "start": "1778080",
    "end": "1785070"
  },
  {
    "text": "data that it can work with as a binding so that's what's happening here once we have all that let's see if we",
    "start": "1785070",
    "end": "1791400"
  },
  {
    "text": "can actually make it run I was in this one right I have added an option",
    "start": "1791400",
    "end": "1798600"
  },
  {
    "text": "especially for demos like this where I can say previous hours equals one so I",
    "start": "1798600",
    "end": "1804270"
  },
  {
    "text": "can get the data from the last one hour and if all is well let's quickly see if",
    "start": "1804270",
    "end": "1809520"
  },
  {
    "text": "I still have that blob in my local storage accounts I don't think I have but just in case let's check when we run",
    "start": "1809520",
    "end": "1818700"
  },
  {
    "text": "this we will get the data from the last hour in functions so if we look at our blob containers we have our triggers and",
    "start": "1818700",
    "end": "1825650"
  },
  {
    "text": "just to make sure I'll remove all of them there we go so when we run our",
    "start": "1825650",
    "end": "1830880"
  },
  {
    "text": "second approach you should see at some point packages start to come in and items being added to a queue and of",
    "start": "1830880",
    "end": "1837630"
  },
  {
    "text": "course still locked to the console that we have here so everything starts to run our functions are triggering something",
    "start": "1837630",
    "end": "1844260"
  },
  {
    "text": "is happening and you see it is already executing based on packages that are",
    "start": "1844260",
    "end": "1849630"
  },
  {
    "text": "coming in from new yet so you see that a new message was detected on the indexing queue that has a package ID and so on so",
    "start": "1849630",
    "end": "1857460"
  },
  {
    "text": "you see that we have some slack package with some version ID that was apparently",
    "start": "1857460",
    "end": "1862770"
  },
  {
    "text": "added to Nikita work in the past hour and we can start processing that one right so it's still running so a couple",
    "start": "1862770",
    "end": "1870090"
  },
  {
    "text": "of packages in the last hour but we have our trigger working it's pushing data into our function and we can then push",
    "start": "1870090",
    "end": "1875610"
  },
  {
    "text": "it into a queue and start processing that queue and do the actual indexing of packages that we want to do right so this is running",
    "start": "1875610",
    "end": "1883920"
  },
  {
    "text": "I'm gonna not keep it running it's not super important but you get the idea now we have a very clean function where we",
    "start": "1883920",
    "end": "1890130"
  },
  {
    "text": "bind to data that we want to monitor we get the data into our function we then process whatever data comes in and make",
    "start": "1890130",
    "end": "1897180"
  },
  {
    "text": "sure things happen and that our application can actually run writes good",
    "start": "1897180",
    "end": "1904370"
  },
  {
    "text": "now we're making progress we already have something that is now watching the catalog and adding those elements into",
    "start": "1904370",
    "end": "1911280"
  },
  {
    "start": "1905000",
    "end": "1905000"
  },
  {
    "text": "queues that we can then process to do both downloading as well as the indexing now let's look at the next steps in the",
    "start": "1911280",
    "end": "1917580"
  },
  {
    "text": "pipeline that we are building and let's start with the easy one which is downloading packages from nikka 20 peers",
    "start": "1917580",
    "end": "1924210"
  },
  {
    "text": "in the queue so downloading packages to download packages let's go into this one",
    "start": "1924210",
    "end": "1933390"
  },
  {
    "text": "I have a download to storage function it is called and it listens on a queue that",
    "start": "1933390",
    "end": "1939690"
  },
  {
    "text": "is called my downloading queue so whenever a package is added by the thing that we just wrote by that binding that",
    "start": "1939690",
    "end": "1945540"
  },
  {
    "text": "we just wrote this queue will trigger because there's a new message in that queue and instead of writing to a blob",
    "start": "1945540",
    "end": "1953310"
  },
  {
    "text": "ourselves we bind to input from that queue but also to output towards a blob as you can see this output binding can",
    "start": "1953310",
    "end": "1960930"
  },
  {
    "text": "also use parameters in the name of that blob that we have from the incoming message so we get an incoming package",
    "start": "1960930",
    "end": "1968400"
  },
  {
    "text": "operation that package operation has a property called ID and version normalized while we're actually using",
    "start": "1968400",
    "end": "1974130"
  },
  {
    "text": "that input data to generate a file name a file name for our output data so again",
    "start": "1974130",
    "end": "1979950"
  },
  {
    "text": "not writing the blob access code ourselves but instead making use of those bindings to have that inputs have",
    "start": "1979950",
    "end": "1985770"
  },
  {
    "text": "that output and concentrate really on the processing that we have in the application so for downloading I have",
    "start": "1985770",
    "end": "1992520"
  },
  {
    "text": "two things I can have an add operation or a delete operation the delete is pretty simple for the package blob that",
    "start": "1992520",
    "end": "1999270"
  },
  {
    "text": "I just bind it to I run a delete if exists and that's pretty much it delete the package from storage rights whenever",
    "start": "1999270",
    "end": "2007940"
  },
  {
    "text": "an add happens I do a little bit more what I do is connect / HTV clients - the package URL that I'm",
    "start": "2007940",
    "end": "2014330"
  },
  {
    "text": "trying to download and then uploads to a stream on that package output plop where",
    "start": "2014330",
    "end": "2020269"
  },
  {
    "text": "I want to write this so not super complex I'm fetching input fetching output and/or a fetching input and",
    "start": "2020269",
    "end": "2025610"
  },
  {
    "text": "writing it to the outputs and making sure that things appear in in blob storage so that's all there's - it's now",
    "start": "2025610",
    "end": "2032240"
  },
  {
    "text": "I do want to give you one additional hint which is if you do a tree functions",
    "start": "2032240",
    "end": "2037940"
  },
  {
    "text": "and you don't use like a static HTTP client or use the HTTP client factories",
    "start": "2037940",
    "end": "2043669"
  },
  {
    "text": "and so on you will quickly face TCP port starvation because every single time when you new up an HTTP clients in a",
    "start": "2043669",
    "end": "2050960"
  },
  {
    "text": "function the port will be reserved for awhile and you will see things failing so quick tip if you need an HTTP client",
    "start": "2050960",
    "end": "2058010"
  },
  {
    "text": "in your function always make it static or make use of the appropriate approaches instead of mooing up one for",
    "start": "2058010",
    "end": "2064128"
  },
  {
    "text": "every single function execution that you are doing right cool so the downloading",
    "start": "2064129",
    "end": "2071510"
  },
  {
    "text": "is done that was easy because it's just fetching data from one URL and copying it into another URL now let's look at",
    "start": "2071510",
    "end": "2077658"
  },
  {
    "text": "indexing packages making sure that we can actually crack open that package get those public types and map it somewhere",
    "start": "2077659",
    "end": "2084290"
  },
  {
    "text": "to the package ID in the package version that we can install into resharper or using resharper the indexing there's a",
    "start": "2084290",
    "end": "2092210"
  },
  {
    "text": "couple of things that we want to note there a nougat package I don't know if you've ever done this but a nougat",
    "start": "2092210",
    "end": "2097460"
  },
  {
    "text": "package is just a sip file that you can open and in that zip file you will see all of the different assemblies that are",
    "start": "2097460",
    "end": "2103400"
  },
  {
    "text": "shipped and being added to the projects where you add them to now the last thing we want to do in the functions that we",
    "start": "2103400",
    "end": "2109430"
  },
  {
    "text": "are running is use reflection and assembly dot load from because that would mean that for every single nukid",
    "start": "2109430",
    "end": "2115790"
  },
  {
    "text": "package we are really loading the assembly into memory in theory it would",
    "start": "2115790",
    "end": "2120800"
  },
  {
    "text": "mean that the Epis emily could be executed or something could happen with it and there's also no guarantee that the assembly will ever leave our runtime",
    "start": "2120800",
    "end": "2127550"
  },
  {
    "text": "host again so we don't want to do that we don't want to use traditional reflection we simply want to access the",
    "start": "2127550",
    "end": "2134390"
  },
  {
    "text": "file get the public types and be done with it and have no trace of that file anymore in memory in our function turns",
    "start": "2134390",
    "end": "2141170"
  },
  {
    "text": "out there's a nice nougat package that you can use for this system that reflection of May and that really only opens a file",
    "start": "2141170",
    "end": "2148099"
  },
  {
    "text": "pointer to the assembly that you're interested in cracks open the headers that are in there that are describing",
    "start": "2148099",
    "end": "2153589"
  },
  {
    "text": "the assembly and you can then use those headers to work with and get the public types that are in there so we could use",
    "start": "2153589",
    "end": "2160849"
  },
  {
    "text": "that library to fetch all that data and then store it into Asher's database or into Azure search or into a Redis cache",
    "start": "2160849",
    "end": "2167569"
  },
  {
    "text": "or whatever we want to use as the store now this system that reflection metadata",
    "start": "2167569",
    "end": "2172940"
  },
  {
    "start": "2170000",
    "end": "2170000"
  },
  {
    "text": "is of course a nougat package but if you use one of the D compilers that are out there you can actually also see what is",
    "start": "2172940",
    "end": "2179119"
  },
  {
    "text": "in PE headers of an assembly enough nets so if you open up any assembly you will",
    "start": "2179119",
    "end": "2184940"
  },
  {
    "text": "find that there are some headers in those headers you will see that there is a dictionary called type definitions or",
    "start": "2184940",
    "end": "2191359"
  },
  {
    "text": "type def in that dictionary called type definitions you will find all of the public types that are available not as a",
    "start": "2191359",
    "end": "2199160"
  },
  {
    "text": "name and a namespace but as pointers to something else so you'll see all these numbers in the decompiler there those",
    "start": "2199160",
    "end": "2205759"
  },
  {
    "text": "numbers reference to some string in another dictionary in that header and that header is in strings so those names",
    "start": "2205759",
    "end": "2213140"
  },
  {
    "text": "we can fetch from strings so what we will have to do is crack open the assembly look at the headers get those",
    "start": "2213140",
    "end": "2219230"
  },
  {
    "text": "pointers to what the public type names are and then read the strings that represents what those type names are in",
    "start": "2219230",
    "end": "2225440"
  },
  {
    "text": "codes it's pretty much the same we have our portable executable reader from that's library on liggett's we can",
    "start": "2225440",
    "end": "2232099"
  },
  {
    "text": "then read the metadata from that portable executable reader for every type definition that we find in there",
    "start": "2232099",
    "end": "2238220"
  },
  {
    "text": "we will then loop over them gets the pointer to the namespace get a pointer",
    "start": "2238220",
    "end": "2244099"
  },
  {
    "text": "to the name and then use that get string methods to actually get the name and get the namespace and process that as well",
    "start": "2244099",
    "end": "2249890"
  },
  {
    "text": "so if you ever need to fetch public types or do whatever you want to do with an assembly where you don't really have",
    "start": "2249890",
    "end": "2256099"
  },
  {
    "text": "to use reflection use something like this because following pointers is easy it takes a while to get used to it but",
    "start": "2256099",
    "end": "2262190"
  },
  {
    "text": "it's quite easy to do you get all that data it's super fast it doesn't have to load the assembly into memory and your",
    "start": "2262190",
    "end": "2268099"
  },
  {
    "text": "runtime is not really polluted by the fact that you are loading that assembly then when we have those namespaces and",
    "start": "2268099",
    "end": "2275930"
  },
  {
    "text": "types and we already have the package ID in the version we of course to store it somewhere we chose to go",
    "start": "2275930",
    "end": "2282020"
  },
  {
    "start": "2282000",
    "end": "2282000"
  },
  {
    "text": "with at research I don't know if it's ever gonna be something that we will keep using or nuts but for now it works",
    "start": "2282020",
    "end": "2287690"
  },
  {
    "text": "quite well because it's an actual search engine which means we can do some additional filtering to what's a stupid",
    "start": "2287690",
    "end": "2295640"
  },
  {
    "text": "blob storage or key value pair our database would do in search we can define one index that will hold",
    "start": "2295640",
    "end": "2302690"
  },
  {
    "text": "documents and those documents will contain fields that are searchable which means we can search in them that are",
    "start": "2302690",
    "end": "2309170"
  },
  {
    "text": "acceptable which means we can filter on them that are filterable which means we",
    "start": "2309170",
    "end": "2314480"
  },
  {
    "text": "can filter on them or we have group buy on them sortable so we can give the",
    "start": "2314480",
    "end": "2320150"
  },
  {
    "text": "newest results first or the oldest results first etc and really important retrievable if you're using Azure search",
    "start": "2320150",
    "end": "2327200"
  },
  {
    "text": "you have to think about what a specific field should support because that's what your index is going to support if you",
    "start": "2327200",
    "end": "2333380"
  },
  {
    "text": "only want to be able to search on a type name but not retrieve the type name to",
    "start": "2333380",
    "end": "2338540"
  },
  {
    "text": "display it in your API your field can be searchable but not retrievable but if you still want to be able to fetch the",
    "start": "2338540",
    "end": "2344869"
  },
  {
    "text": "type name from your index you will also have to make it retrievable so that's something to think about upfront and",
    "start": "2344869",
    "end": "2351170"
  },
  {
    "text": "it's really difficult to change it afterwards unless you do a remix of your entire documents now what we will do",
    "start": "2351170",
    "end": "2358460"
  },
  {
    "text": "since as your search also has a way of indexing data based on either manually",
    "start": "2358460",
    "end": "2363829"
  },
  {
    "text": "adding its true data API but also true uploading JSON blobs to a storage account we will also in our function",
    "start": "2363829",
    "end": "2370609"
  },
  {
    "text": "right data to JSON files so that whenever we have to do a remix we can point as a either search to a blob",
    "start": "2370609",
    "end": "2377359"
  },
  {
    "text": "container so they can do the import for us which is our sites requirements of rien Xing that has to be fast as well",
    "start": "2377359",
    "end": "2384260"
  },
  {
    "text": "right so let's go into that and let's see how we can index our packages so",
    "start": "2384260",
    "end": "2390770"
  },
  {
    "text": "again we still get the incoming stream of packages from our nucleate catalogue trigger binding and we also have the",
    "start": "2390770",
    "end": "2397369"
  },
  {
    "text": "package index running and the package indexer will actually do the indexing in Azure search so what the indexer will do",
    "start": "2397369",
    "end": "2404299"
  },
  {
    "text": "is first of all whenever it launches it will create a new search service clients and create the index on either search",
    "start": "2404299",
    "end": "2412190"
  },
  {
    "text": "this one can be done by convention so all I have to do is create a package document class and a package mint",
    "start": "2412190",
    "end": "2418789"
  },
  {
    "text": "package document class will contain all of the properties that I want to have in my search index and also whatever they",
    "start": "2418789",
    "end": "2425150"
  },
  {
    "text": "should support so for example we want to be able to search on package ID sort on package ID group on package ID and",
    "start": "2425150",
    "end": "2432170"
  },
  {
    "text": "retrieve the package ID as well so those things we want to be able to do with this and now when we create index based",
    "start": "2432170",
    "end": "2438230"
  },
  {
    "text": "on this class we can simply use this class as a data transfer object into the API of either search now our function",
    "start": "2438230",
    "end": "2446900"
  },
  {
    "text": "will run at some point based on the Q trigger again the indexing queue that I am populating with data that I want to",
    "start": "2446900",
    "end": "2452630"
  },
  {
    "text": "index and as I told you we also want to write to a blob a JSON file that",
    "start": "2452630",
    "end": "2457970"
  },
  {
    "text": "contains the data that we just indexed why because of the faster indexing in case we have to read next the interest",
    "start": "2457970",
    "end": "2464809"
  },
  {
    "text": "as your search thing deletes are quite easy because a delete will first of all",
    "start": "2464809",
    "end": "2470359"
  },
  {
    "text": "delete my JSON blob and second of all from my index documents fetch the package by ID and by version and then",
    "start": "2470359",
    "end": "2477740"
  },
  {
    "text": "delete the documents deleting is very easy the adding is slightly more complex",
    "start": "2477740",
    "end": "2482750"
  },
  {
    "text": "but still very doable so whenever we get a package add what we do is again we",
    "start": "2482750",
    "end": "2489799"
  },
  {
    "text": "fetch the package from nougats so we have the zip file containing all of the assemblies and so on then we open up the",
    "start": "2489799",
    "end": "2496309"
  },
  {
    "text": "stream we use this package archive reader to get access to all of the assemblies but also to the metadata of",
    "start": "2496309",
    "end": "2502279"
  },
  {
    "text": "our nigut package so we get the identity description package ID package version title authors tags etc and we already",
    "start": "2502279",
    "end": "2510349"
  },
  {
    "text": "add that into eight package documents which is eventually the entity that we want to index on Azure search next thing",
    "start": "2510349",
    "end": "2517700"
  },
  {
    "text": "we do is for every target framework supported by our nigut package we will find all of the assemblies that are in",
    "start": "2517700",
    "end": "2524720"
  },
  {
    "text": "there and at some points open them up using this PE reader a library that we",
    "start": "2524720",
    "end": "2530809"
  },
  {
    "text": "have then we check if the type definition is public because that's the",
    "start": "2530809",
    "end": "2536299"
  },
  {
    "text": "only thing that we're interested in rights if that's public we get the namespace pointer and get the string for",
    "start": "2536299",
    "end": "2542059"
  },
  {
    "text": "it so we have a type namespace but also the type name then we do some additional filtering because there's always some generated",
    "start": "2542059",
    "end": "2548300"
  },
  {
    "text": "classes in public that are public in you get packages like generate its link",
    "start": "2548300",
    "end": "2553640"
  },
  {
    "text": "classes in and so on so we want to filter them out so we not were not interested in those but if we don't hit",
    "start": "2553640",
    "end": "2560480"
  },
  {
    "text": "that filter and we still want to index this type we add it into a type names collection containing the namespace dot",
    "start": "2560480",
    "end": "2566840"
  },
  {
    "text": "type name just so we have all the public types and public namespaces in one basically hash sets of strings once we",
    "start": "2566840",
    "end": "2577610"
  },
  {
    "text": "have that one once we have all of the public types that are available in the package that we are trying to index what",
    "start": "2577610",
    "end": "2582920"
  },
  {
    "text": "we will do is add it into our package to index documents that will ship off to search then add it to our index actions",
    "start": "2582920",
    "end": "2590410"
  },
  {
    "text": "dictionary that we have as well so we want to say okay we want to add this into Azure search and then at some point",
    "start": "2590410",
    "end": "2596900"
  },
  {
    "text": "we're also going to and actually uncomment this comment to this what",
    "start": "2596900",
    "end": "2602330"
  },
  {
    "text": "we're also going to do is create a new index batch to talk to at your search and to upload data in our index and when",
    "start": "2602330",
    "end": "2610160"
  },
  {
    "text": "something goes wrong we deal with that and so on so a lot of codes to basically take the document that we just created",
    "start": "2610160",
    "end": "2616100"
  },
  {
    "text": "and push it off into Azure search now I",
    "start": "2616100",
    "end": "2621490"
  },
  {
    "text": "already mentioned that functions should do one thing and do one thing well and our function in my opinion shouldn't",
    "start": "2621490",
    "end": "2629660"
  },
  {
    "start": "2623000",
    "end": "2623000"
  },
  {
    "text": "really care about the fact that is using Azure search and what the index operation should look like and all of",
    "start": "2629660",
    "end": "2635840"
  },
  {
    "text": "the air handling related to indexing things in a tree search and so on so a better way of doing things would be to",
    "start": "2635840",
    "end": "2642620"
  },
  {
    "text": "again leverage that concept of bindings and create our own output binding so at this time we could simply say okay",
    "start": "2642620",
    "end": "2649190"
  },
  {
    "text": "whatever function run time here's the package that I want to index or this is a document that I want to add into Azure",
    "start": "2649190",
    "end": "2654980"
  },
  {
    "text": "search deal with it that's what I want to be able to do so let's create our custom output binding this time the",
    "start": "2654980",
    "end": "2663140"
  },
  {
    "text": "codes that I will have is roughly the same as what I just showed you so when a package add happens we will index and",
    "start": "2663140",
    "end": "2669680"
  },
  {
    "text": "all of that code is still the same but instead of doing all that boilerplates adding things into the",
    "start": "2669680",
    "end": "2675200"
  },
  {
    "text": "nougats or into the azure search service what we will do is use of this documents ad collector and",
    "start": "2675200",
    "end": "2681589"
  },
  {
    "text": "that document ad collector will make use of our newly to create a sure search",
    "start": "2681589",
    "end": "2686989"
  },
  {
    "text": "index binding again we will have an attribute where we specify the name of the search service the access key to its",
    "start": "2686989",
    "end": "2693140"
  },
  {
    "text": "the index name the index document type etc etc but still instead of manually",
    "start": "2693140",
    "end": "2698509"
  },
  {
    "text": "adding everything to the index we want to simply say ok documents add collector here's a package metadata that I want",
    "start": "2698509",
    "end": "2705529"
  },
  {
    "text": "you to it to add to as your search and index for me so let's look at how we can",
    "start": "2705529",
    "end": "2710539"
  },
  {
    "text": "do this the azure search index attributes again is something very simple that simply contains all of the",
    "start": "2710539",
    "end": "2716930"
  },
  {
    "text": "data that we want to have as configuration values to our binding again we have to annotate it with a",
    "start": "2716930",
    "end": "2722900"
  },
  {
    "text": "binding at attribute there the other thing that we have to do is again at a",
    "start": "2722900",
    "end": "2728509"
  },
  {
    "text": "either search extension config provider that is also an extension and again in",
    "start": "2728509",
    "end": "2733849"
  },
  {
    "text": "our startup we have to say ok we are registering this thing as an extension to the actual runtime once we have that",
    "start": "2733849",
    "end": "2740089"
  },
  {
    "text": "we can start working with our binding and start creating the output binding that we want to have so result boot",
    "start": "2740089",
    "end": "2747200"
  },
  {
    "text": "binding in the configuration we are saying ok I want to add a binding rule for everything that has the azure search",
    "start": "2747200",
    "end": "2753319"
  },
  {
    "text": "index attributes this time we're not creating a trigger binding we are creating a collector which means we",
    "start": "2753319",
    "end": "2759559"
  },
  {
    "text": "collect data and ship it off to the Asscher functions runtime and we bind to a collector for OpenType I'll cover that",
    "start": "2759559",
    "end": "2766069"
  },
  {
    "text": "in a bit and we create an error search a sync collector builder for that OpenType",
    "start": "2766069",
    "end": "2771609"
  },
  {
    "text": "now this open type is kind of interesting what I could do if I wanted",
    "start": "2771609",
    "end": "2776690"
  },
  {
    "text": "to quickly create this would be creating something that in my binding would not",
    "start": "2776690",
    "end": "2783680"
  },
  {
    "text": "say that that just ships a package document what I could do is here also put package documents and my binding",
    "start": "2783680",
    "end": "2791960"
  },
  {
    "text": "would be much easier to write now by using open type we can basically pass in",
    "start": "2791960",
    "end": "2797029"
  },
  {
    "text": "anything we want into this binding and that's important because maybe we want to reuse this a sure search binding to",
    "start": "2797029",
    "end": "2803210"
  },
  {
    "text": "index other shapes and other types of documents so we want to use this open type that's an azure functions runtime",
    "start": "2803210",
    "end": "2809420"
  },
  {
    "text": "internal type to basically specify either know the type yet it's something than a McKee we then create our edge research a",
    "start": "2809420",
    "end": "2818090"
  },
  {
    "text": "sink collector builder and that one will perform the conversion from the open type to the actual type so what it will",
    "start": "2818090",
    "end": "2824930"
  },
  {
    "text": "ask for is the functions runtime we'll see that I want to write into an async",
    "start": "2824930",
    "end": "2830930"
  },
  {
    "text": "collector that writes packaged documents what will happen is the runtime will call into this collector builder and say",
    "start": "2830930",
    "end": "2837050"
  },
  {
    "text": "ok based on this attribute give me an actual collector for an actual type instead of this open type that I just",
    "start": "2837050",
    "end": "2843500"
  },
  {
    "text": "registered for then my search collector will be the thing that actually handles",
    "start": "2843500",
    "end": "2848600"
  },
  {
    "text": "searching so what it does is it creates a search service client so I can talk to a tree search it connects to it using",
    "start": "2848600",
    "end": "2855800"
  },
  {
    "text": "credentials it gets the index clients and then will create the index as well",
    "start": "2855800",
    "end": "2860830"
  },
  {
    "text": "in my attribute I also specify whether I want to add merge or deletes items in my",
    "start": "2860830",
    "end": "2866600"
  },
  {
    "text": "index and based on that I will call a different methods in this collector that I have now whenever in my function let's",
    "start": "2866600",
    "end": "2875390"
  },
  {
    "text": "go back there whenever in my function I run on adds and my add rights to my",
    "start": "2875390",
    "end": "2882170"
  },
  {
    "text": "where is it should be here somewhere",
    "start": "2882170",
    "end": "2889270"
  },
  {
    "text": "anyway at some point it will rights to my collector what will happen is that in",
    "start": "2889270",
    "end": "2894290"
  },
  {
    "text": "this class my add a sink is being called and what I will do is do the next thing there for my function my function",
    "start": "2894290",
    "end": "2900380"
  },
  {
    "text": "doesn't have to care the function simply gives me the documents and I will handle the indexing and make sure that all of",
    "start": "2900380",
    "end": "2906200"
  },
  {
    "text": "that happens I also do some error handling there so for example when the index doesn't create I will recreate the",
    "start": "2906200",
    "end": "2911780"
  },
  {
    "text": "index and things like that so the function no longer has to care about it and the function will only have to index",
    "start": "2911780",
    "end": "2917900"
  },
  {
    "text": "the package or creates the documents to index and the document that I will adds into a tree search good so with that out",
    "start": "2917900",
    "end": "2927140"
  },
  {
    "text": "of the way we're almost there all we need now is the the actual API is that resharper will talk to and those",
    "start": "2927140",
    "end": "2934280"
  },
  {
    "start": "2934000",
    "end": "2934000"
  },
  {
    "text": "API I will create using the standard trigger binding inertia function or the standard HTTP trigger basically this is",
    "start": "2934280",
    "end": "2941420"
  },
  {
    "text": "a trigger that again provides inputs to my function in this case it will give me an H the requests that will live at a certain",
    "start": "2941420",
    "end": "2948470"
  },
  {
    "text": "routes at the endpoint of my era functions and then will do whatever I write in that function to do things we",
    "start": "2948470",
    "end": "2954860"
  },
  {
    "text": "could have written this as a simple web API as well but really said okay we're doing functions anyway maybe you want to",
    "start": "2954860",
    "end": "2961460"
  },
  {
    "text": "be able to scale that HTTP service as well so let's let's use HTTP triggers there right so let's see if we can make",
    "start": "2961460",
    "end": "2968540"
  },
  {
    "text": "this work with resharper and writer so we have the indexing out of the way we have the downloading out of the way and",
    "start": "2968540",
    "end": "2974840"
  },
  {
    "text": "what we now want to do is provide something on the web that works as my",
    "start": "2974840",
    "end": "2981710"
  },
  {
    "text": "fine type API now there's a lot of code in there and most of it is specific to",
    "start": "2981710",
    "end": "2987260"
  },
  {
    "text": "just formatting to the format that we Sharper expects but I'm just going to quickly cover a couple of things we have",
    "start": "2987260",
    "end": "2993620"
  },
  {
    "text": "two AP ice want to find types and want to find namespaces so I created two functions function name fine type and",
    "start": "2993620",
    "end": "3000760"
  },
  {
    "text": "function name fine name space and both of them listen to an HTTP trigger which",
    "start": "3000760",
    "end": "3006190"
  },
  {
    "text": "means my function gets triggered when HB call comes in it will give me my request where I have all of the query parameters",
    "start": "3006190",
    "end": "3013000"
  },
  {
    "text": "that are passed in and then I can run whatever I want to do in my run internal",
    "start": "3013000",
    "end": "3018700"
  },
  {
    "text": "I think what I do is fetch all of the other parameters build my search query",
    "start": "3018700",
    "end": "3023710"
  },
  {
    "text": "that I will launch against a tree search then actually launch that search against",
    "start": "3023710",
    "end": "3029710"
  },
  {
    "text": "a tree search and then fetch all of these documents do some filtering and so on and in the end return results there",
    "start": "3029710",
    "end": "3036730"
  },
  {
    "text": "now I have that API running and if you hit new get type search - - your website's Nets you will actually see",
    "start": "3036730",
    "end": "3043270"
  },
  {
    "text": "this API where you can search for example for Jason convert or if you search for J objects you will find based",
    "start": "3043270",
    "end": "3051400"
  },
  {
    "text": "on that your search based on the index that we have all of the types that are in there so using all of this code",
    "start": "3051400",
    "end": "3056560"
  },
  {
    "text": "indexing everything we now have an API that gives us back jason that we can then use in in the actual tool as well",
    "start": "3056560",
    "end": "3063120"
  },
  {
    "text": "so if we look at a resharper here we could write something that uses a J",
    "start": "3063120",
    "end": "3068230"
  },
  {
    "text": "object so let's say if our jayob equals nu J objects",
    "start": "3068230",
    "end": "3075150"
  },
  {
    "text": "there we go you will see that this object is not yet referenced we now get the alt-enter quick fix to find this",
    "start": "3075769",
    "end": "3082739"
  },
  {
    "text": "type on Nikita dork and actually configure to resharper to reach out to the customer API that we",
    "start": "3082739",
    "end": "3087899"
  },
  {
    "text": "built using functions and you will see that even in resharper this works we get the package we can install it and make",
    "start": "3087899",
    "end": "3094259"
  },
  {
    "text": "sure that we can start working with whatever we wanted to start working with so quite nice very nice workflow we can",
    "start": "3094259",
    "end": "3100890"
  },
  {
    "text": "scale everything separately we have the Web API there where if we have no users there will be no Web API running anyway",
    "start": "3100890",
    "end": "3106829"
  },
  {
    "text": "if there's a lot of users all of a sudden we can scale up and get more API functions running in the functions",
    "start": "3106829",
    "end": "3113640"
  },
  {
    "text": "runtime rights now there's one issue left that I didn't cover if you look at",
    "start": "3113640",
    "end": "3120829"
  },
  {
    "text": "the details here in resharper you will",
    "start": "3120829",
    "end": "3126089"
  },
  {
    "text": "see that we also have a download cans there to be fair this data is fake our",
    "start": "3126089",
    "end": "3132749"
  },
  {
    "text": "API is simply returning a random number as the download counts it would be nice to be able to use the download count for",
    "start": "3132749",
    "end": "3139889"
  },
  {
    "text": "the actual indexing and to provide better sorting and filtering and so on but there is one issue nucleates doesn't",
    "start": "3139889",
    "end": "3146759"
  },
  {
    "start": "3146000",
    "end": "3146000"
  },
  {
    "text": "have an api to give us that download data so what we could do is again use",
    "start": "3146759",
    "end": "3152069"
  },
  {
    "text": "either the search service that they have or use the OData API to fetch the downloads count for every package that",
    "start": "3152069",
    "end": "3158579"
  },
  {
    "text": "we are indexing but it would mean that we would have to read next every week for example all of those downloads",
    "start": "3158579",
    "end": "3164189"
  },
  {
    "text": "counts and really stress nougats which fetching data for millions of packages so we don't want to do that we've opened",
    "start": "3164189",
    "end": "3171569"
  },
  {
    "text": "up an issue with them like can you please give us an API with the download cans for all the package IDs and",
    "start": "3171569",
    "end": "3176880"
  },
  {
    "text": "versions that you have so if that ever comes to fruition and and appears on the",
    "start": "3176880",
    "end": "3182369"
  },
  {
    "text": "Internet's how would we update our index our search index with all those download counts well ideally in our worlds that",
    "start": "3182369",
    "end": "3189689"
  },
  {
    "text": "download counts data is simply a hash of package ID package version and the",
    "start": "3189689",
    "end": "3195659"
  },
  {
    "text": "download counts and what we can do on as your search is do a package downloads or",
    "start": "3195659",
    "end": "3201809"
  },
  {
    "text": "sorry documents merge so what we can do is query the existing document in search",
    "start": "3201809",
    "end": "3207599"
  },
  {
    "text": "and simply update one property and turns out that's actually a really simple API you simply",
    "start": "3207599",
    "end": "3213010"
  },
  {
    "text": "pass its the properties that you take as the identifier which will be package ID and package version and give it whatever",
    "start": "3213010",
    "end": "3219640"
  },
  {
    "text": "properties you want to update and it will touch just those properties and reindex just those properties so that's",
    "start": "3219640",
    "end": "3225700"
  },
  {
    "text": "the one issue that we have left for this one and I do hope that the API will appear at some points so we're done",
    "start": "3225700",
    "end": "3231700"
  },
  {
    "text": "right we have something that indexes nougat we have something that downloads the packages we have something adding",
    "start": "3231700",
    "end": "3238390"
  },
  {
    "text": "data to an azure search index and we have an API that consumes it so the entire story is covered we took this",
    "start": "3238390",
    "end": "3244569"
  },
  {
    "text": "existing feature and built it in a server this way that we can now scale so",
    "start": "3244569",
    "end": "3250150"
  },
  {
    "text": "we have all of those and we also decided to build those trigger functions to reach out to the catalog and see what is",
    "start": "3250150",
    "end": "3256630"
  },
  {
    "text": "happening on the catalog and also an output binding to write into as research to really make the programming model",
    "start": "3256630",
    "end": "3262359"
  },
  {
    "text": "much easier to work with instead of having to think about how do I write data to add research I just say okay",
    "start": "3262359",
    "end": "3268809"
  },
  {
    "text": "runtime here's the documents that I want you to index for me using that custom binding all of our functions can scale",
    "start": "3268809",
    "end": "3277030"
  },
  {
    "text": "and also fail independently which means if all of a sudden indexing fails there's no issue the API will still keep",
    "start": "3277030",
    "end": "3284049"
  },
  {
    "text": "working and so on we just don't get any new packages we can scale the API",
    "start": "3284049",
    "end": "3289630"
  },
  {
    "text": "independently if there's all of a sudden a lot of requests coming in we can scale that one independently we don't have to",
    "start": "3289630",
    "end": "3295089"
  },
  {
    "text": "add more function runtime workers to index packages for example to give you",
    "start": "3295089",
    "end": "3301960"
  },
  {
    "text": "some backgrounds are current so data based resharper search that we have takes a good two weeks to index the",
    "start": "3301960",
    "end": "3308770"
  },
  {
    "text": "entirety of nougats using a pretty beefy machine a good connection and probably stresses may get quite a bit using that",
    "start": "3308770",
    "end": "3315099"
  },
  {
    "text": "all data API this one we ran it for at the start of May on to be one instances",
    "start": "3315099",
    "end": "3322470"
  },
  {
    "text": "passing along all those messages and passing along all those indexing tasks and so on and took us 12 hours which is",
    "start": "3322470",
    "end": "3329349"
  },
  {
    "text": "a giant wind coming from those two weeks in the in the currents approach that we have but also I think if we scale it to",
    "start": "3329349",
    "end": "3335859"
  },
  {
    "text": "bigger instances that have better throughput and so on we can even bring that time down and do a full remix of",
    "start": "3335859",
    "end": "3341619"
  },
  {
    "text": "nigut every six hours for example I don't think we need it twelve hours is probably okay but just to give you an",
    "start": "3341619",
    "end": "3347869"
  },
  {
    "text": "idea this actually you really improved the true put of indexing nougats we also",
    "start": "3347869",
    "end": "3353960"
  },
  {
    "text": "found that nougat is lying to you if you go to the nucleotide org homepage you will see there's like 1.7 or 1.8 by now",
    "start": "3353960",
    "end": "3360920"
  },
  {
    "text": "million packages listed according to Nikita dork according to the catalog that we scanned",
    "start": "3360920",
    "end": "3366260"
  },
  {
    "text": "entirely there's 2.1 million packages on nougat so there's a slight discrepancy there no idea what it is but there's",
    "start": "3366260",
    "end": "3372500"
  },
  {
    "text": "more packages to be found on nougats in that catalog we discovered 8400 package",
    "start": "3372500",
    "end": "3378470"
  },
  {
    "text": "our catalog pages with about four million two hundred thousands catalog Leafs which is roughly the double of the",
    "start": "3378470",
    "end": "3385549"
  },
  {
    "text": "amount of packages that are available on nougats and that also explains the fact that they reapplied at all of the",
    "start": "3385549",
    "end": "3391700"
  },
  {
    "text": "packages with that nougat package signing a signature feature at the start of this year so basically every package",
    "start": "3391700",
    "end": "3397789"
  },
  {
    "text": "is in there twice for now some closing thoughts before we all can leave when we",
    "start": "3397789",
    "end": "3405980"
  },
  {
    "start": "3401000",
    "end": "3401000"
  },
  {
    "text": "would deploy this and we would take this to production we would probably take separate function apps not only for",
    "start": "3405980",
    "end": "3412549"
  },
  {
    "text": "costs but also for scalability and making sure that those functions don't interact with each other in terms of",
    "start": "3412549",
    "end": "3418880"
  },
  {
    "text": "memory and CPU usage on the azure functions runtime so what we would do is probably put search separately put the",
    "start": "3418880",
    "end": "3425990"
  },
  {
    "text": "next thing separately and put the web api separately because search sorry because the catalog trigger can run on a",
    "start": "3425990",
    "end": "3432980"
  },
  {
    "text": "very simple instance and only one because there's only the catalog and that's quite quite an easy task the next",
    "start": "3432980",
    "end": "3439339"
  },
  {
    "text": "thing we would run separately because we can scale that independently if all of a sudden all of the packages have to be",
    "start": "3439339",
    "end": "3444950"
  },
  {
    "text": "reindex we can scale that separately from all of the other things and the web api we can also scale separately if you",
    "start": "3444950",
    "end": "3451309"
  },
  {
    "text": "deploy it separately as well because if all of sudden we get a lot of requests coming in we don't want the indexing to",
    "start": "3451309",
    "end": "3458029"
  },
  {
    "text": "suffer from the fact that requests are coming in to the web api one thought on",
    "start": "3458029",
    "end": "3464180"
  },
  {
    "text": "bindings we did like working with those trigger bindings and those output bindings as well but we also found that",
    "start": "3464180",
    "end": "3471079"
  },
  {
    "text": "the more deeper you go into working with those custom bindings and writing those custom by",
    "start": "3471079",
    "end": "3476299"
  },
  {
    "text": "the more coupling you have to the framework that is your functions runtime so if you ever think of moving this to",
    "start": "3476299",
    "end": "3483190"
  },
  {
    "text": "lambda or using an open fast or something else to run your functions you probably want to do it slightly",
    "start": "3483190",
    "end": "3488900"
  },
  {
    "text": "different and abstract away those bindings as well because with those bindings are really locking yourself into the azure functions runtime on that",
    "start": "3488900",
    "end": "3497240"
  },
  {
    "text": "note I don't care because the actual functions runtime is really nice if you have those custom bindings because your",
    "start": "3497240",
    "end": "3503690"
  },
  {
    "text": "function can really do one thing which is process whatever comes in and write it to wherever you want to write it to",
    "start": "3503690",
    "end": "3510410"
  },
  {
    "text": "using such binding so with that thanks for being here and I hope you enjoyed the rest of NEC thanks",
    "start": "3510410",
    "end": "3517100"
  },
  {
    "text": "[Applause]",
    "start": "3517100",
    "end": "3522199"
  }
]