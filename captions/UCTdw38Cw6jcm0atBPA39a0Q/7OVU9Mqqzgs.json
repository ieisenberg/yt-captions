[
  {
    "start": "0",
    "end": "316000"
  },
  {
    "text": "you",
    "start": "4090",
    "end": "6150"
  },
  {
    "text": "anyone wanna do any form of distributed application any form of application that",
    "start": "9610",
    "end": "16250"
  },
  {
    "text": "involves more than one user right I",
    "start": "16250",
    "end": "21439"
  },
  {
    "text": "think we colored the room right so success what does that look like success",
    "start": "21439",
    "end": "28099"
  },
  {
    "text": "is when you can actually satisfy every user that wants to use your system and",
    "start": "28099",
    "end": "33250"
  },
  {
    "text": "in some sense that's really the problem we want to add we want to have the problem of scale we won't add lots of",
    "start": "33250",
    "end": "39230"
  },
  {
    "text": "users and we want to successfully satisfy the request that they put it right what success is actually also",
    "start": "39230",
    "end": "48800"
  },
  {
    "text": "double it so because in many cases the applications that we build when they start getting successful land up falling",
    "start": "48800",
    "end": "56750"
  },
  {
    "text": "over because they're so popular and scale is really both the friend we",
    "start": "56750",
    "end": "62120"
  },
  {
    "text": "wanted the party in the monster that we want to display at the same time and over the over the years we've had many",
    "start": "62120",
    "end": "69590"
  },
  {
    "text": "ways of trying to battle this problem right so we've got rules of thumb different platforms returning usually is",
    "start": "69590",
    "end": "77060"
  },
  {
    "text": "this tool of that just in writing cold this don't don't follow this pattern",
    "start": "77060",
    "end": "84099"
  },
  {
    "text": "this is kind of the evolved sort of knowledge that we've picked up over the last few decades of how to build",
    "start": "84099",
    "end": "91550"
  },
  {
    "text": "scalable systems now we are still having a problem you select college again solve",
    "start": "91550",
    "end": "99080"
  },
  {
    "text": "it and I think there's a way of actually approaching the solution approaching the",
    "start": "99080",
    "end": "106160"
  },
  {
    "text": "scales problem a little differently and that's kind of what we're gonna be talking about over here my name is John",
    "start": "106160",
    "end": "112849"
  },
  {
    "text": "Ezra I work for Microsoft as a software engineer in the LGI division and she'll",
    "start": "112849",
    "end": "118729"
  },
  {
    "text": "give work a fire for Microsoft as lead of the project frantic down leads right",
    "start": "118729",
    "end": "123950"
  },
  {
    "text": "so we hear Darlene's always has now been in in the wild for some time now it's an",
    "start": "123950",
    "end": "130160"
  },
  {
    "text": "open source project and all of that so a fairly successful in the sense that halo runs on it and we end up having quite a",
    "start": "130160",
    "end": "138680"
  },
  {
    "text": "bit of a scale issues and we found that as we we go forward",
    "start": "138680",
    "end": "147680"
  },
  {
    "text": "you know we see this very simplistic diagram it gives us an idea what what",
    "start": "147680",
    "end": "153980"
  },
  {
    "text": "the kind of issues that we solve that at different levels so when you talk about single cell type applications we tend to",
    "start": "153980",
    "end": "161120"
  },
  {
    "text": "write application particular way there is going to be simple to try it simple",
    "start": "161120",
    "end": "166460"
  },
  {
    "text": "to read simple reason about but they don't scale and then as you go up you",
    "start": "166460",
    "end": "171890"
  },
  {
    "text": "take different approaches going higher and higher to different environments so",
    "start": "171890",
    "end": "178610"
  },
  {
    "text": "by the time we get to the point where we're dealing with situations like halo where you have to provide low latency",
    "start": "178610",
    "end": "185840"
  },
  {
    "text": "services across the globe a very highly to speak the scale problems you're going",
    "start": "185840",
    "end": "191180"
  },
  {
    "text": "to solve over there are quite different from the scale problems you have when you have a single server so it also",
    "start": "191180",
    "end": "197570"
  },
  {
    "text": "means that the approach that we're taking is going to be varied across the spectrum also you think we'd like to",
    "start": "197570",
    "end": "204950"
  },
  {
    "text": "think that going forward we should probably find a way to have the same way",
    "start": "204950",
    "end": "214880"
  },
  {
    "text": "of thinking and allow some other system like the platform to be lifting for us",
    "start": "214880",
    "end": "220550"
  },
  {
    "text": "and in some sense that's kind of where Orleans fits in so which are what it's",
    "start": "220550",
    "end": "229580"
  },
  {
    "text": "just me or everybody else but sometimes I find it more difficult to explain something simple than rather explain",
    "start": "229580",
    "end": "236390"
  },
  {
    "text": "some complex concepts I know that engineering the brain is wired this way",
    "start": "236390",
    "end": "242270"
  },
  {
    "text": "that's easy to explain complexities and distill it down to something very basic so I'll try it here so there are",
    "start": "242270",
    "end": "252170"
  },
  {
    "text": "different opinions of the object-oriented programming right but I think the truth is that probably 90% of",
    "start": "252170",
    "end": "257269"
  },
  {
    "text": "software is done this way so the essence of object oriented the right object-oriented approach is that you",
    "start": "257270",
    "end": "263750"
  },
  {
    "text": "have encapsulation of entities in objects incapsulate their state and",
    "start": "263750",
    "end": "269270"
  },
  {
    "text": "their behavior so they expose functionalities or inner cases and the process income in the request we",
    "start": "269270",
    "end": "276720"
  },
  {
    "text": "method calls a yield hold the reference to the object is maybe call some factory class get the references object make a",
    "start": "276720",
    "end": "282960"
  },
  {
    "text": "call and if there is some exceptional case you know to put try catch and",
    "start": "282960",
    "end": "288120"
  },
  {
    "text": "handle it I'm not going to get into argument with the functional people and this is the reality of how most people",
    "start": "288120",
    "end": "293340"
  },
  {
    "text": "write code this is all possible and very simple very straightforward when the",
    "start": "293340",
    "end": "299699"
  },
  {
    "text": "iran is a single process of the single machine single server application because you have access to memory it's a",
    "start": "299699",
    "end": "307260"
  },
  {
    "text": "shared memory space we can have direct memory references which underneath the covers is a pointer so this nice model",
    "start": "307260",
    "end": "315330"
  },
  {
    "text": "breaks down when we go beyond the machine the single server no matter how DC machine you put has limited capacity",
    "start": "315330",
    "end": "321539"
  },
  {
    "start": "316000",
    "end": "316000"
  },
  {
    "text": "in terms of CPU memory throughput so the moment we go into multiple machines we",
    "start": "321539",
    "end": "328650"
  },
  {
    "text": "don't have access to direct direct access to memory another machine we cannot have the reference to an object",
    "start": "328650",
    "end": "333660"
  },
  {
    "text": "on difference or we cannot easily coordinate and decide what to do so what we've been told and what we've",
    "start": "333660",
    "end": "341520"
  },
  {
    "text": "been doing is switch the stateless model it's going to forget all we've been doing all these nice object references",
    "start": "341520",
    "end": "348090"
  },
  {
    "text": "method calls now we do differently so to request the rights to the server it",
    "start": "348090",
    "end": "354240"
  },
  {
    "text": "usually goes to storage to fetch data for whatever item the request is concerned with it may be a user profile",
    "start": "354240",
    "end": "361110"
  },
  {
    "text": "it may be shopping car that may be inventory item order doesn't matter we need to go and read the state because we",
    "start": "361110",
    "end": "367650"
  },
  {
    "text": "cannot have it in memory and every server so we're in the state and if it's",
    "start": "367650",
    "end": "372810"
  },
  {
    "text": "read request just return it like for example give me user address if it's the",
    "start": "372810",
    "end": "379260"
  },
  {
    "text": "right request if we need to apply a change for example update user address then we try to write it to storage",
    "start": "379260",
    "end": "386449"
  },
  {
    "text": "try try it because in reality we potentially competing with other requests coming to other servers that",
    "start": "386449",
    "end": "393330"
  },
  {
    "text": "may be concerned with the same item for example if you're trying to update inventory on some popular inventory item",
    "start": "393330",
    "end": "400440"
  },
  {
    "text": "you may have requests been randomly distributed across multiple servers they all trying to update",
    "start": "400440",
    "end": "406410"
  },
  {
    "text": "say numbers inventory numbers on the same item and that's not really a",
    "start": "406410",
    "end": "411620"
  },
  {
    "text": "pleasant thing to deal with so we lost all the benefits of the object-oriented",
    "start": "411620",
    "end": "417570"
  },
  {
    "text": "programming we learn this new stuff and it's inefficient in addition to that because I process the requests I just",
    "start": "417570",
    "end": "424800"
  },
  {
    "text": "got this data from say sequel sorter which is an expensive operation and I throw the state away even though in the",
    "start": "424800",
    "end": "430500"
  },
  {
    "text": "next second I may receive requests for the same item because it's popular so it's very inefficient to go in storage every time so if if I wanted to explain",
    "start": "430500",
    "end": "440160"
  },
  {
    "start": "440000",
    "end": "440000"
  },
  {
    "text": "Arlene's in five or six lines of code it's really about this it's getting back",
    "start": "440160",
    "end": "446070"
  },
  {
    "text": "to object oriented view of the world because that's how our brain I believe works we see entities we see",
    "start": "446070",
    "end": "451920"
  },
  {
    "text": "interactions we have different levels of abstractions so no liens you get back",
    "start": "451920",
    "end": "457110"
  },
  {
    "text": "interfaces and objects that we call grades that implement those interfaces and you get back method calls so an",
    "start": "457110",
    "end": "464490"
  },
  {
    "text": "object grain can hold the reference to another object and make a call and that",
    "start": "464490",
    "end": "471120"
  },
  {
    "text": "just works if there is an exception so if there is some error situation",
    "start": "471120",
    "end": "477560"
  },
  {
    "text": "unexpected situation on the kali side you get an exception you can put try-catch around it just like in a",
    "start": "477560",
    "end": "483270"
  },
  {
    "text": "single server code the difference is that this code that looks very similar",
    "start": "483270",
    "end": "489090"
  },
  {
    "text": "to what we have before now transparently run it can run on the cluster of servers so you can ants on a single machine as",
    "start": "489090",
    "end": "496290"
  },
  {
    "text": "is no problem but if you add more machines if you add more servers they will automatically form a cluster and",
    "start": "496290",
    "end": "502680"
  },
  {
    "text": "this object can leave anywhere in the cluster you don't have to really deal with that you just program as if it's",
    "start": "502680",
    "end": "509730"
  },
  {
    "text": "still a single memory space but now it's scalable and because this objects are",
    "start": "509730",
    "end": "515460"
  },
  {
    "text": "isolated they encapsulate their state and we don't see any physical address",
    "start": "515460",
    "end": "521400"
  },
  {
    "text": "here we can easily scale out we add more hardware we linearly get higher",
    "start": "521400",
    "end": "527520"
  },
  {
    "text": "throughput so in fact this model has even more benefits than the original",
    "start": "527520",
    "end": "534000"
  },
  {
    "text": "model in the original model if you shut down the application all your references a lot because the physical reference remember",
    "start": "534000",
    "end": "539440"
  },
  {
    "text": "in this case we have logical references that none of the covers gets resolved so",
    "start": "539440",
    "end": "544899"
  },
  {
    "text": "we can save these references to storage read them a month later and those still",
    "start": "544899",
    "end": "550509"
  },
  {
    "text": "work so in fact I would argue this model even more powerful than the traditional one and there's this interesting",
    "start": "550509",
    "end": "557620"
  },
  {
    "text": "conundrum when there is something is that simple that our gut reaction as engineers is that if it's simple it's",
    "start": "557620",
    "end": "564819"
  },
  {
    "text": "probably too good to be true and I've seen this reaction like for years when we started we started showing in work",
    "start": "564819",
    "end": "570100"
  },
  {
    "text": "the initial reaction was this probably toy because it's something like you writing a few lines of code and the scales in the works and it's performant",
    "start": "570100",
    "end": "577319"
  },
  {
    "text": "you fooling me somewhere that was kind of explicitly or implicitly stated",
    "start": "577319",
    "end": "582629"
  },
  {
    "text": "response but like John mentioned we've proven that by writing very demanding workloads like anybody who knows what or",
    "start": "582629",
    "end": "590920"
  },
  {
    "text": "least knows what hello because they were the first Markey customer dear on services for tens of millions of users",
    "start": "590920",
    "end": "598810"
  },
  {
    "text": "and hundreds of thousands requests per second a process so it cannot be joy if it runs that way at that scale and we",
    "start": "598810",
    "end": "607540"
  },
  {
    "text": "have properties like sky 4 or ash or some services in Azure trying it at a very good scale so it's not a toy so it",
    "start": "607540",
    "end": "615310"
  },
  {
    "text": "is kind of something that takes time for",
    "start": "615310",
    "end": "620829"
  },
  {
    "text": "for engineers to get to believe that it's actually true because of the simplicity but it's",
    "start": "620829",
    "end": "627759"
  },
  {
    "text": "simple and it's very basic but it enables a number of scenarios the number of patterns on top of it and that's what",
    "start": "627759",
    "end": "633579"
  },
  {
    "text": "we're mostly going to be talking about different patterns that emerged over the years because at least been used in",
    "start": "633579",
    "end": "639490"
  },
  {
    "text": "production for more than five years now and it's been available outside of Microsoft for about three years it was",
    "start": "639490",
    "end": "645970"
  },
  {
    "text": "open source two years ago so what I notice that once developers go with a",
    "start": "645970",
    "end": "652720"
  },
  {
    "text": "hump of disbelief and see ok this actually works to get the other sometimes go to the other direction and",
    "start": "652720",
    "end": "659559"
  },
  {
    "text": "they so enthusiastic they don't apply it everywhere and sometimes that's you kind of curb their enthusiasm saying well you",
    "start": "659559",
    "end": "664839"
  },
  {
    "text": "probably don't want to put this code onto your mobile device because we didn't care about power efficiency",
    "start": "664839",
    "end": "669880"
  },
  {
    "text": "that's not the good place but with the simplicity and ability to",
    "start": "669880",
    "end": "675490"
  },
  {
    "text": "create many different pattern generators enthusiasm but what actually you get",
    "start": "675490",
    "end": "680770"
  },
  {
    "text": "from it is you have to write less code by some conservative estimate so we've",
    "start": "680770",
    "end": "686650"
  },
  {
    "text": "seen it's like three times in some cases five times some people claim ten times less code and it's simpler code because",
    "start": "686650",
    "end": "693640"
  },
  {
    "text": "you get things like single thread guarantees and done the entrance fee by default so you write less and simpler",
    "start": "693640",
    "end": "701140"
  },
  {
    "text": "code so you get developed for the Qt same developer can produce a lot more functionality and focus on actual the",
    "start": "701140",
    "end": "707020"
  },
  {
    "text": "main problems not on the plumbing on sending messages on handling machine failures and things like that and as I",
    "start": "707020",
    "end": "713770"
  },
  {
    "text": "mentioned it scales by default because of the model because this objects can be isolated that is message passing on the colors so the model is simple there is",
    "start": "713770",
    "end": "720850"
  },
  {
    "text": "this complex machinery under the covers and all these runtimes it enables it but the program model is kind of scary",
    "start": "720850",
    "end": "727630"
  },
  {
    "text": "sometimes simple so this kind of",
    "start": "727630",
    "end": "734710"
  },
  {
    "text": "December already covered so we open source the project two years ago and it",
    "start": "734710",
    "end": "740380"
  },
  {
    "text": "created it attracted interesting set of people so it's the interesting community of people all around the world it's one",
    "start": "740380",
    "end": "747640"
  },
  {
    "text": "of the probably friendly is the most Vulcan economy that's what we're hearing that these people are so so awesome just",
    "start": "747640",
    "end": "752860"
  },
  {
    "text": "you kind of spend time virtually and make it a chat so we did they keep",
    "start": "752860",
    "end": "759660"
  },
  {
    "text": "producing features and give feedback and seeks bugs and do a lot of good stuff but we never actually look at the number",
    "start": "759660",
    "end": "766270"
  },
  {
    "text": "so we've never really cared or had time to look at the github and then enough",
    "start": "766270",
    "end": "771370"
  },
  {
    "text": "known this guy Matt Warren he few weeks ago ran this analysis across all repos",
    "start": "771370",
    "end": "777310"
  },
  {
    "text": "in that net foundation organization for the last two years and now a nice",
    "start": "777310",
    "end": "783160"
  },
  {
    "text": "surprise to our so these came up at the topic number two on issues number one on pull requests in terms of percentage of",
    "start": "783160",
    "end": "789040"
  },
  {
    "text": "contribution by the community GT me it's a sign of very healthy community and",
    "start": "789040",
    "end": "794890"
  },
  {
    "text": "then very good progress I think we strike good balance there because there is constant investment from the",
    "start": "794890",
    "end": "801310"
  },
  {
    "text": "corporate side which is given by internal priorities and our collaboration with Mike research and steady stream of",
    "start": "801310",
    "end": "807640"
  },
  {
    "text": "contributions ideas implementations extensions from the community so the case is healthy balance of kind of on",
    "start": "807640",
    "end": "814760"
  },
  {
    "text": "both sides so now we'll actually look to wish to the patterns that yes I'm sorry",
    "start": "814760",
    "end": "821180"
  },
  {
    "text": "Thanks so so let Circuit pointed out the",
    "start": "821180",
    "end": "829190"
  },
  {
    "text": "whole idea of the traditional way of looking at objects you know back and cs101 when they introduced objects to",
    "start": "829190",
    "end": "835370"
  },
  {
    "text": "you and you started talking about encapsulation abstraction the ability to hype data and provide controlled access",
    "start": "835370",
    "end": "842779"
  },
  {
    "text": "to modify it so on and so forth that benefit kind of went away when we went",
    "start": "842779",
    "end": "848240"
  },
  {
    "text": "to the stateless world we try and reclaim it and bring it back so what exactly are we trying to do if you look",
    "start": "848240",
    "end": "854240"
  },
  {
    "text": "at a single object there are three kind of key pieces in you know in the object",
    "start": "854240",
    "end": "861560"
  },
  {
    "text": "Italy attributes of the object of your life specs of the object that you want to think about of course there's the",
    "start": "861560",
    "end": "867709"
  },
  {
    "text": "initial piece which is the encapsulation part of it right we hide data and we",
    "start": "867709",
    "end": "873890"
  },
  {
    "text": "allow controlled access to it but the objects are basically centered around",
    "start": "873890",
    "end": "879680"
  },
  {
    "text": "some form of data so you can store later and there there's an object piece and",
    "start": "879680",
    "end": "885980"
  },
  {
    "text": "then of course there's operations on the data and the object allows you to sort of make sure that all the related",
    "start": "885980",
    "end": "891920"
  },
  {
    "text": "operations on the data are present in the same place and so there's and then",
    "start": "891920",
    "end": "897350"
  },
  {
    "text": "there's communication between objects over objects a can talk to object B by by budging method call and that's so if",
    "start": "897350",
    "end": "905570"
  },
  {
    "text": "you look at the structure of an object the three facets to it is the state Placid which could be a passive the",
    "start": "905570",
    "end": "911870"
  },
  {
    "text": "communication pattern taking modeling and applying the object-oriented",
    "start": "911870",
    "end": "917180"
  },
  {
    "text": "paradigm you will find that there are several applications and still get pointed out that have been developed and",
    "start": "917180",
    "end": "923709"
  },
  {
    "text": "one of the things we notice when we look at the kind of application that are developed is that their patterns that",
    "start": "923709",
    "end": "929630"
  },
  {
    "text": "emerge from each of the different conferences so there are data centric",
    "start": "929630",
    "end": "935209"
  },
  {
    "text": "patterns that you can apply there's compute centric patterns that keep in place and there is a class of",
    "start": "935209",
    "end": "941469"
  },
  {
    "text": "letters that come from the fact that objects can communicate with each other so I'll talk about the state centric",
    "start": "941469",
    "end": "947979"
  },
  {
    "text": "ones first the first and most basic thing that you can do with a piece of data is to store it and Orlean allows",
    "start": "947979",
    "end": "956319"
  },
  {
    "text": "you to basically encapsulate a piece of data in a green give it an address a way",
    "start": "956319",
    "end": "962259"
  },
  {
    "text": "of identifying it persistently over time and store it somewhere this is quite",
    "start": "962259",
    "end": "969849"
  },
  {
    "text": "useful and for example if you want to write Facebook and you want to have a",
    "start": "969849",
    "end": "975789"
  },
  {
    "text": "profile per user that profile is kind of an object it has an address which is",
    "start": "975789",
    "end": "981669"
  },
  {
    "text": "some form of the user's name and you want to be able to store it and retrieve it so a common pattern would be to",
    "start": "981669",
    "end": "988689"
  },
  {
    "text": "create an object for that profile and effectively use the or means going to search so one of the things we've done",
    "start": "988689",
    "end": "995019"
  },
  {
    "text": "is we've been able to come up with a commonly used set of patterns and pieces",
    "start": "995019",
    "end": "1003989"
  },
  {
    "text": "of code that you can just download as a library and you'll get that for free at",
    "start": "1003989",
    "end": "1009599"
  },
  {
    "text": "this point please because we haven't really talked about Orleans in some detail how it actually works I'm going",
    "start": "1009599",
    "end": "1016169"
  },
  {
    "text": "to talk a little bit about what it means to store an object normally right so if",
    "start": "1016169",
    "end": "1023579"
  },
  {
    "start": "1018000",
    "end": "1018000"
  },
  {
    "text": "you think about a persistent object you have some model you have some amount of",
    "start": "1023579",
    "end": "1030779"
  },
  {
    "text": "working space memory spaces then you have a whole bunch of disk space somewhere database so as your storage or",
    "start": "1030779",
    "end": "1037918"
  },
  {
    "text": "whatever it is some persistent storage in some working memory so the way all",
    "start": "1037919",
    "end": "1043499"
  },
  {
    "text": "these works is you never a new up anything you ask a factory to give you a reference to this grain which could",
    "start": "1043499",
    "end": "1049980"
  },
  {
    "text": "basically live somewhere else but you get a reference to it locally and what",
    "start": "1049980",
    "end": "1055019"
  },
  {
    "text": "that means is that grains effectively are eternal they always exist because if",
    "start": "1055019",
    "end": "1060929"
  },
  {
    "text": "if you don't if the system doesn't have a grain with that address already it'll",
    "start": "1060929",
    "end": "1065970"
  },
  {
    "text": "create it when you ask for it and it will store storage where you tell it to store it",
    "start": "1065970",
    "end": "1071039"
  },
  {
    "text": "so the lifecycle of grain kind of looks like this either see you have persisted",
    "start": "1071039",
    "end": "1076299"
  },
  {
    "text": "or it's not non-existent when you ask for it we will the system will activate",
    "start": "1076299",
    "end": "1082960"
  },
  {
    "text": "it and give you an active version of it so that the point where the grain is active there's a machine somewhere in",
    "start": "1082960",
    "end": "1088539"
  },
  {
    "text": "the cluster that has this thing in memory with an address on it that you can actually talk to it it and so when",
    "start": "1088539",
    "end": "1095380"
  },
  {
    "text": "you call use it or do something what actually is happening is a call is being made that machine with the message being",
    "start": "1095380",
    "end": "1103870"
  },
  {
    "text": "sent to go and do something with those arguments and then you await on that and you get by the response so you have",
    "start": "1103870",
    "end": "1111640"
  },
  {
    "text": "persisted grains that are effectively in cold storage and you can have no limit to them so it's not like it's not like a",
    "start": "1111640",
    "end": "1118299"
  },
  {
    "text": "toy database or anything of that you can literally have terabytes of grains lying around you activate the ones you need",
    "start": "1118299",
    "end": "1126100"
  },
  {
    "text": "and the system takes care of bring it into being and giving you a reference to",
    "start": "1126100",
    "end": "1131559"
  },
  {
    "text": "it it becomes active in memory and when you stop using it for some time and the",
    "start": "1131559",
    "end": "1137169"
  },
  {
    "text": "system decides that you know long ways there is no longer needs to keep the day in memory it will be activated and put",
    "start": "1137169",
    "end": "1143200"
  },
  {
    "text": "it back into storage for you so in some sense it's like virtual memory but virtual memory across a cluster hilarity",
    "start": "1143200",
    "end": "1152770"
  },
  {
    "text": "might be you don't really care which speak of RAM in your machine has the",
    "start": "1152770",
    "end": "1159460"
  },
  {
    "text": "memory that a single object lives in you don't care about that there's something",
    "start": "1159460",
    "end": "1164799"
  },
  {
    "text": "that labs like wait at a higher level or liens abstracts away which machine in",
    "start": "1164799",
    "end": "1170320"
  },
  {
    "text": "the cluster has this object that you're talking to you just deal with it as if it was always this right so pattern like",
    "start": "1170320",
    "end": "1178299"
  },
  {
    "text": "that fairly straightforward to use so let's assume that we were writing some form of the e-commerce thing and this is",
    "start": "1178299",
    "end": "1184179"
  },
  {
    "start": "1179000",
    "end": "1179000"
  },
  {
    "text": "the object I want to store and I create one of these things and make it serializable and then we have this",
    "start": "1184179",
    "end": "1194860"
  },
  {
    "text": "cached item grain like a set of grain improve interfaces that are already",
    "start": "1194860",
    "end": "1199870"
  },
  {
    "text": "available that you can just leverage and what that they give you two methods on it once within an item and the other",
    "start": "1199870",
    "end": "1206409"
  },
  {
    "text": "one is to set it and effectively this is how you'd use it can I do and see the",
    "start": "1206409",
    "end": "1212230"
  },
  {
    "text": "scold is it too small no I'll just give",
    "start": "1212230",
    "end": "1217389"
  },
  {
    "text": "you an idea the first four lines the big block is basically just creating the grain state itself that's that's the",
    "start": "1217389",
    "end": "1223659"
  },
  {
    "text": "instance of the object I want to store the data that I want to store and I try to get the grain and then set it and I'm",
    "start": "1223659",
    "end": "1230620"
  },
  {
    "text": "done and when I want to read it I just asked for it by ID and it's blaze so effectively this way of doing it means",
    "start": "1230620",
    "end": "1238269"
  },
  {
    "text": "that I don't have to write any ordinance left behind if the stuff even the even",
    "start": "1238269",
    "end": "1243309"
  },
  {
    "text": "the interaction with your lean systems abstract away by the pattern which is kind of useful if that is so popular",
    "start": "1243309",
    "end": "1249850"
  },
  {
    "text": "that it is it more or less become something that you can use right out of",
    "start": "1249850",
    "end": "1255549"
  },
  {
    "text": "the library itself another thing that might be useful is to keep track of a",
    "start": "1255549",
    "end": "1261399"
  },
  {
    "start": "1257000",
    "end": "1257000"
  },
  {
    "text": "set of grains so in the case of an e-commerce thing say you wanted to get",
    "start": "1261399",
    "end": "1266820"
  },
  {
    "text": "you know you're running a shoe shop and you've got different models so you have",
    "start": "1266820",
    "end": "1273399"
  },
  {
    "text": "a grain associated with this model and it keeps like how many Abbie's you have but then you also want to keep track of",
    "start": "1273399",
    "end": "1279429"
  },
  {
    "text": "all the shoes that belong to children all the tools that are for women and all",
    "start": "1279429",
    "end": "1285399"
  },
  {
    "text": "the shoes they're for men and in some sense it's a registry of grades and when",
    "start": "1285399",
    "end": "1292360"
  },
  {
    "text": "you want to keep track of a bunch of items that are of the same type you can",
    "start": "1292360",
    "end": "1297580"
  },
  {
    "text": "use the registry pattern again the the code I'm showing you here is actually the stuff in the library is already one",
    "start": "1297580",
    "end": "1303820"
  },
  {
    "text": "there you can just call it a registry grain and use it effectively the same way if you look at what's happening over",
    "start": "1303820",
    "end": "1311559"
  },
  {
    "text": "here the grain that we first start with is a standard it's an object storage",
    "start": "1311559",
    "end": "1318610"
  },
  {
    "text": "brain and that one is being registered with something else so effectively the",
    "start": "1318610",
    "end": "1323830"
  },
  {
    "text": "state of the second grain is actually the list of grains that it needs to keep",
    "start": "1323830",
    "end": "1329080"
  },
  {
    "text": "track of and it doesn't mean that you have to only interact with the",
    "start": "1329080",
    "end": "1334120"
  },
  {
    "text": "registered Green's through the greens and through the register evening you can actually interact directly in the grain itself",
    "start": "1334120",
    "end": "1339430"
  },
  {
    "text": "which is kind of useful if you think about the orange that you've dealt with",
    "start": "1339430",
    "end": "1344890"
  },
  {
    "text": "in the past when you get back a set of things from the database you can't",
    "start": "1344890",
    "end": "1350620"
  },
  {
    "text": "really interact the individual objects themselves and expect them to persist or have a life cycle of their own you",
    "start": "1350620",
    "end": "1356800"
  },
  {
    "text": "effectively get something as a result of a query that is equivalent to the register claim but additionally every",
    "start": "1356800",
    "end": "1364330"
  },
  {
    "text": "row that you would have gotten back is equivalent to a grain that lives by itself and has its own way of managing",
    "start": "1364330",
    "end": "1370360"
  },
  {
    "text": "so you can talk to the grain independent layer of the registry both these these",
    "start": "1370360",
    "end": "1378940"
  },
  {
    "text": "patterns together allow you to set up groups of things that you want to keep",
    "start": "1378940",
    "end": "1385750"
  },
  {
    "text": "track of and one of the places where that becomes very very useful is in a",
    "start": "1385750",
    "end": "1391780"
  },
  {
    "text": "caching layer so having a system like memcache D allows you to keep a bunch of",
    "start": "1391780",
    "end": "1398740"
  },
  {
    "text": "cash items in memory right in many cases we can do similar things with our means",
    "start": "1398740",
    "end": "1405610"
  },
  {
    "text": "and in fact there's a whole pattern of a smart case that that still gets my talk",
    "start": "1405610",
    "end": "1411730"
  },
  {
    "text": "about so first why do we need caching so",
    "start": "1411730",
    "end": "1418570"
  },
  {
    "start": "1416000",
    "end": "1416000"
  },
  {
    "text": "we need for caching comes from the same challenge I talked about a few minutes ago because we're stateless when we go",
    "start": "1418570",
    "end": "1425350"
  },
  {
    "text": "to storage the storage has a limit in capacity and go in there to read that",
    "start": "1425350",
    "end": "1430480"
  },
  {
    "text": "for when you have a lot of read requests go into storage every time is indecision when you have high scale as your storage",
    "start": "1430480",
    "end": "1436480"
  },
  {
    "text": "cannot keep up or it's very expensive so of course we put cache layer like memcache de or Redis in front so that we",
    "start": "1436480",
    "end": "1444070"
  },
  {
    "text": "read input data in cache and then we leverage data toting in memory it all",
    "start": "1444070",
    "end": "1450490"
  },
  {
    "text": "sounds nice except for now we need to talk to two storage systems very different semantics and give them very",
    "start": "1450490",
    "end": "1455590"
  },
  {
    "text": "different characteristics whenever there is a right we need to write the cold storage like this clickable database or",
    "start": "1455590",
    "end": "1461410"
  },
  {
    "text": "key value store and we also need to either update or invalidate cache because we've just changed value",
    "start": "1461410",
    "end": "1468000"
  },
  {
    "text": "and there's this a famous saying that there are two hardest problem in distributed systems it's naming things",
    "start": "1468000",
    "end": "1473970"
  },
  {
    "text": "and cache invalidation this is not an easy thing to do to coordinate a little richer and outdated data but also either",
    "start": "1473970",
    "end": "1481890"
  },
  {
    "text": "on the separate layer so you need to deploy a cluster of memcache de or reddish and or use separate service and",
    "start": "1481890",
    "end": "1488850"
  },
  {
    "text": "which may not be as obvious you moving data between machines so your data is in memory which is great but then you send",
    "start": "1488850",
    "end": "1495270"
  },
  {
    "text": "it over the network to another set of machines for each operation so it's much better than going to storage but still",
    "start": "1495270",
    "end": "1500910"
  },
  {
    "text": "sending data over the wire so the Lynch",
    "start": "1500910",
    "end": "1505950"
  },
  {
    "text": "rinse approach is very simple there's really no approach because by itself",
    "start": "1505950",
    "end": "1511620"
  },
  {
    "start": "1506000",
    "end": "1506000"
  },
  {
    "text": "grains our initial cache when grain gets activated it state gets loaded from storage and it just naturally cached in",
    "start": "1511620",
    "end": "1518550"
  },
  {
    "text": "memory there is no separate statement or effort at the line of codes right it's only cache there so we eliminate the",
    "start": "1518550",
    "end": "1526860"
  },
  {
    "text": "need for extra layer next week here right away but we also get more benefits",
    "start": "1526860",
    "end": "1533130"
  },
  {
    "text": "unlike in say memcache D with key value based cache where I just write some",
    "start": "1533130",
    "end": "1538500"
  },
  {
    "text": "bytes of data or strings here we have semantic operations so when request arrives to update user address it may",
    "start": "1538500",
    "end": "1546060"
  },
  {
    "text": "arrive as a move with new address and I can the process that way or there's a",
    "start": "1546060",
    "end": "1552480"
  },
  {
    "text": "community operation one which could change in the last name of the person so this operations can be expressed in",
    "start": "1552480",
    "end": "1558930"
  },
  {
    "text": "natural way instead of just saying overwrite whatever we have there with these bytes of data of the string so",
    "start": "1558930",
    "end": "1565520"
  },
  {
    "text": "that's good you have semantic operations but also now we're shipping functions so",
    "start": "1565520",
    "end": "1571590"
  },
  {
    "text": "we never request the rise we don't move data we don't send data over the wire data sits in the membrane the machine",
    "start": "1571590",
    "end": "1577410"
  },
  {
    "text": "and the function to request the right to to that piece of data that piece of state and actually this is the most",
    "start": "1577410",
    "end": "1585990"
  },
  {
    "text": "popular pattern altogether I think over all the applications we've seen so there are different variations the simplest is",
    "start": "1585990",
    "end": "1591840"
  },
  {
    "start": "1590000",
    "end": "1590000"
  },
  {
    "text": "read-only so when we need to serve video files any files any kind of items",
    "start": "1591840",
    "end": "1598080"
  },
  {
    "text": "catalog items or descriptions data that kind of never changes it's immutable we just cash it in memory",
    "start": "1598080",
    "end": "1604039"
  },
  {
    "text": "it's very easy so grain gets activated lo it states once there's only one round-trip to storage and after that you",
    "start": "1604039",
    "end": "1610880"
  },
  {
    "text": "can serve this data as long as you want until that item becomes cold and if it's not used for extended period of time and",
    "start": "1610880",
    "end": "1616760"
  },
  {
    "text": "doesn't exactly keep it in memory we can remove it from memory and next time there is a request for it will activate",
    "start": "1616760",
    "end": "1622850"
  },
  {
    "text": "it again and do another round trip to storage the most popular one is right",
    "start": "1622850",
    "end": "1628610"
  },
  {
    "text": "through so in addition to read the mail you see right and because right go",
    "start": "1628610",
    "end": "1635059"
  },
  {
    "text": "through the grain they don't go directly to storage and doesn't go to two places like storage and cache you go to this",
    "start": "1635059",
    "end": "1641630"
  },
  {
    "text": "grain which has data in memory and then grain rice into storage you have this very important property that your right",
    "start": "1641630",
    "end": "1648740"
  },
  {
    "text": "to serialize they would never compete with each other you eliminate this situation when two servers can dry to a",
    "start": "1648740",
    "end": "1655190"
  },
  {
    "text": "single line and storage like and in table and again you get semantic",
    "start": "1655190",
    "end": "1661970"
  },
  {
    "text": "operations all I can is with normal rice and you would think that your Eliza's right may not be a big deal because you",
    "start": "1661970",
    "end": "1668990"
  },
  {
    "text": "have protection you have each arc support and in most modern storage systems but in fact that may be very",
    "start": "1668990",
    "end": "1676370"
  },
  {
    "text": "significant performance books a couple of years ago maybe three years ago some",
    "start": "1676370",
    "end": "1682429"
  },
  {
    "text": "people in Skype create a service which was probably like a hundred lines maybe 200 lines of code",
    "start": "1682429",
    "end": "1688309"
  },
  {
    "text": "because it's very simple very trivial a grain class but all it did receive telemetry which is routed to specific",
    "start": "1688309",
    "end": "1695299"
  },
  {
    "text": "identity so all rights to a single line in storage was they all were going",
    "start": "1695299",
    "end": "1701240"
  },
  {
    "text": "through a single grade which eliminated all right conflicts very simple",
    "start": "1701240",
    "end": "1706700"
  },
  {
    "text": "application but because of that because of elimination of storage conflicts right conflicts they received four times",
    "start": "1706700",
    "end": "1713890"
  },
  {
    "text": "throughput improvements or if you flip it around they reduce their cost by four times which is merely eliminating a",
    "start": "1713890",
    "end": "1721159"
  },
  {
    "text": "contention on storage so even simpler parents can pay back pretty well on if",
    "start": "1721159",
    "end": "1730640"
  },
  {
    "text": "if you don't have to write necessarily every item reliable the storage for example you are writing a",
    "start": "1730640",
    "end": "1737870"
  },
  {
    "text": "performance information performance counters and you can afford to lose some of the readings like once in the blue",
    "start": "1737870",
    "end": "1743090"
  },
  {
    "text": "moon or you login there is then you can batch your rights in this case you can write",
    "start": "1743090",
    "end": "1748130"
  },
  {
    "text": "behind you can receive requests but don't write them immediately your storage you can accumulate either a",
    "start": "1748130",
    "end": "1754580"
  },
  {
    "text": "number of them or for theories of time and then right from the grain it's very easy to implement because there is",
    "start": "1754580",
    "end": "1759919"
  },
  {
    "text": "support for timers you can set timer for every minute or count number a lot days or combination of both any code is",
    "start": "1759919",
    "end": "1768740"
  },
  {
    "text": "simple because you don't do anything special so there is if you use declarative persistence here you have a",
    "start": "1768740",
    "end": "1775000"
  },
  {
    "text": "state object you can declare separate interfaces for reader and writer so you",
    "start": "1775000",
    "end": "1780380"
  },
  {
    "text": "can give retention case or grained reference that implements the redundant case to the reader and different one to",
    "start": "1780380",
    "end": "1787640"
  },
  {
    "text": "write or you can combine them and give it to some other entity in the system so",
    "start": "1787640",
    "end": "1793309"
  },
  {
    "text": "you can do all the same except eration of concerns and this is kind of trivial",
    "start": "1793309",
    "end": "1798380"
  },
  {
    "text": "example we get a reference for particular industries reader alright and then you do either operation define an interface and when you implemented it's",
    "start": "1798380",
    "end": "1806779"
  },
  {
    "text": "that simple because you have your state object and then user updated or recurrent and when you update you just",
    "start": "1806779",
    "end": "1813080"
  },
  {
    "text": "call this base class method to write state storage and there's persistent",
    "start": "1813080",
    "end": "1818750"
  },
  {
    "text": "provider the kind of plug-in system there so you can do that this is the",
    "start": "1818750",
    "end": "1825100"
  },
  {
    "text": "built-in default but it operates with declarative persistence but you can write any code you like",
    "start": "1825100",
    "end": "1833139"
  },
  {
    "start": "1839000",
    "end": "1839000"
  },
  {
    "text": "what's important here from",
    "start": "1840210",
    "end": "1844080"
  },
  {
    "text": "from a performance perspective it's important to come partition you stay yeah they gotta go yeah yeah",
    "start": "1854200",
    "end": "1861880"
  },
  {
    "text": "so basically if you have reasonable persistence and you can pretty much just",
    "start": "1861880",
    "end": "1867760"
  },
  {
    "text": "use this out of the box and I'll move on to the event sourcing one because this",
    "start": "1867760",
    "end": "1872830"
  },
  {
    "text": "is the one that seems to be the one that causes a lot of confusion with people",
    "start": "1872830",
    "end": "1878200"
  },
  {
    "text": "and it's one of the living at the moment persistence is you write whatever you",
    "start": "1878200",
    "end": "1884530"
  },
  {
    "text": "want to through the right all right strategy so grain is associated with the class this is that is the kind of data that it",
    "start": "1884530",
    "end": "1892059"
  },
  {
    "text": "stores and you can actually use that to right now Sergey mentioned semantic",
    "start": "1892059",
    "end": "1899049"
  },
  {
    "text": "operations which is actually just a",
    "start": "1899049",
    "end": "1903899"
  },
  {
    "start": "1901000",
    "end": "1901000"
  },
  {
    "text": "second mentioning semantic operations which is kind of the same as sending",
    "start": "1906840",
    "end": "1913150"
  },
  {
    "text": "element to in order to declare what you want to do love and mutating something",
    "start": "1913150",
    "end": "1919929"
  },
  {
    "text": "in things of it right so the concept for example of updating somebody's home",
    "start": "1919929",
    "end": "1926320"
  },
  {
    "text": "address can be done using a semantic operation saying update the address which then becomes a kind of event that",
    "start": "1926320",
    "end": "1932650"
  },
  {
    "text": "you can log on the side saying I updated the address with this now I doing that",
    "start": "1932650",
    "end": "1938730"
  },
  {
    "text": "you get a couple of interesting benefits you for example keep track of all of the",
    "start": "1938730",
    "end": "1946120"
  },
  {
    "text": "things that mutate the object in an immutable stores so you have an append-only store so you have a list of",
    "start": "1946120",
    "end": "1953110"
  },
  {
    "text": "all the things that cause the object to become what it was which is a different from traditional relational stores where",
    "start": "1953110",
    "end": "1959710"
  },
  {
    "text": "you call update on something and because you are updating that something you lose",
    "start": "1959710",
    "end": "1965950"
  },
  {
    "text": "to piece of information immediately and you gain a problem the two piece of information is losers why did this thing",
    "start": "1965950",
    "end": "1973059"
  },
  {
    "text": "change right what caused this change to happen because all you're saving is the",
    "start": "1973059",
    "end": "1978790"
  },
  {
    "text": "fact that it's changed and the context",
    "start": "1978790",
    "end": "1984070"
  },
  {
    "text": "in which the change has happened lecture so our changes apply and accumulate you",
    "start": "1984070",
    "end": "1989250"
  },
  {
    "text": "lost the history of the things that have caused the change to take place additionally because you are mutating an",
    "start": "1989250",
    "end": "1997139"
  },
  {
    "text": "existing object you have welcomed in very unwelcome guests which is the issue",
    "start": "1997139",
    "end": "2003559"
  },
  {
    "text": "of concurrency you now have to do things like do optimistic concurrency or some",
    "start": "2003559",
    "end": "2009769"
  },
  {
    "text": "form of strategy to make sure two people aren't overwriting each other's changes right",
    "start": "2009769",
    "end": "2016960"
  },
  {
    "text": "the third thing because also one way to solve that problem is to basically keep",
    "start": "2016960",
    "end": "2022250"
  },
  {
    "text": "track of the intent of the change rather than the change itself and we can do",
    "start": "2022250",
    "end": "2028010"
  },
  {
    "text": "that by storing that in a green - so rather than just so when we have",
    "start": "2028010",
    "end": "2035809"
  },
  {
    "text": "semantic operations taking place we will store the sequence of the operations",
    "start": "2035809",
    "end": "2042139"
  },
  {
    "text": "that took place apply those operations to keep track of an aggregate which is kind of the updated version if you want",
    "start": "2042139",
    "end": "2050300"
  },
  {
    "text": "to think of it that way but at any point in time we could throw away the updated version and replay all the events to get",
    "start": "2050300",
    "end": "2056450"
  },
  {
    "text": "to this state again so the important piece is actually the sequence events and you can then talk about is like",
    "start": "2056450",
    "end": "2064158"
  },
  {
    "text": "eventual consistency because you don't have a concurrency problem there is no",
    "start": "2064159",
    "end": "2069408"
  },
  {
    "text": "even if two people try to make the change and make changes at the same time they will get serialized into a log and",
    "start": "2069409",
    "end": "2075530"
  },
  {
    "text": "you'll find that somebody change the home address and somebody change their phone number and they didn't collaborate",
    "start": "2075530",
    "end": "2082608"
  },
  {
    "text": "as exchanges they just get applied one on top of the other so by doing this you",
    "start": "2082609",
    "end": "2088730"
  },
  {
    "text": "can vastly improve the architecture the scalable architecture of your application itself because you are not",
    "start": "2088730",
    "end": "2094878"
  },
  {
    "text": "now bound to some form of two-phase commit atrocities to build system or anything this you can actually just keep",
    "start": "2094879",
    "end": "2101750"
  },
  {
    "text": "pluggin eastery in this run with that so with that model we actually have we",
    "start": "2101750",
    "end": "2108140"
  },
  {
    "text": "have a pattern that actually keeps track of times x values and all you have to do",
    "start": "2108140",
    "end": "2113329"
  },
  {
    "text": "is provide the semantics set of operations that you can apply to",
    "start": "2113329",
    "end": "2119910"
  },
  {
    "text": "the service so the tea event over there is effectively equivalent to the set of",
    "start": "2119910",
    "end": "2125369"
  },
  {
    "text": "operations that you have such as you know change address or change phone",
    "start": "2125369",
    "end": "2130619"
  },
  {
    "text": "number or change shipping address or whatever it is that you want to do and then this object the events of grain",
    "start": "2130619",
    "end": "2138150"
  },
  {
    "text": "will automatically keep track of the history of the event and their flight and then you can provide so let's give",
    "start": "2138150",
    "end": "2147630"
  },
  {
    "text": "an example before let's say that I have a bank account name up there so that's",
    "start": "2147630",
    "end": "2154560"
  },
  {
    "text": "an eye bank account grain I can show the account state which is the current",
    "start": "2154560",
    "end": "2159810"
  },
  {
    "text": "balance of the account and then I'm going to call credit amount on it but what happens neat colors on credit",
    "start": "2159810",
    "end": "2167220"
  },
  {
    "text": "amount is that that gets converted into a message an object that can be stored so rather than just update the value in",
    "start": "2167220",
    "end": "2175230"
  },
  {
    "text": "an in a standard object-oriented way we create an object called credit amount",
    "start": "2175230",
    "end": "2182089"
  },
  {
    "text": "with that value store that and then apply that object to the total to the",
    "start": "2182089",
    "end": "2189060"
  },
  {
    "text": "aggregate know what that's what will end up happening is that the balance will",
    "start": "2189060",
    "end": "2194190"
  },
  {
    "text": "still get updated but you kept track of the fact that you've updated you've now",
    "start": "2194190",
    "end": "2200069"
  },
  {
    "text": "created the amount of and run it or whatever so all of the score by the way is live code it's there on get up if you",
    "start": "2200069",
    "end": "2207900"
  },
  {
    "text": "get it down and play with it and it'll actually you run it you'll actually see the sequence of it going up to $100 and",
    "start": "2207900",
    "end": "2214170"
  },
  {
    "text": "then $50 and then a 150 dollars because you credited debited and credited again",
    "start": "2214170",
    "end": "2220609"
  },
  {
    "text": "the value will continue to be a hardened will be just as you expect it to be but I will also be able to tell you first",
    "start": "2220609",
    "end": "2228810"
  },
  {
    "text": "you cuz it's me on our dollars then debited 50 and then credited a another 50 on top of it so you I'm sorry so it",
    "start": "2228810",
    "end": "2236849"
  },
  {
    "text": "will go back to being on $2 right my match is not great anyway",
    "start": "2236849",
    "end": "2245269"
  },
  {
    "text": "right so the other key thing is to realize in this whole thing is that this",
    "start": "2245630",
    "end": "2251290"
  },
  {
    "text": "has all the hard work already done for you so the library pattern that has this",
    "start": "2251290",
    "end": "2259640"
  },
  {
    "text": "thing already has even something built in so all you have to do is provide",
    "start": "2259640",
    "end": "2265160"
  },
  {
    "text": "event and the other type arguments and you're done you can actually just go",
    "start": "2265160",
    "end": "2273380"
  },
  {
    "text": "ahead and use it right right aggregates",
    "start": "2273380",
    "end": "2279250"
  },
  {
    "text": "so as we start looking at various patterns one of the things that you'll",
    "start": "2279250",
    "end": "2284780"
  },
  {
    "text": "realize is that you can form bigger patterns from littler ones and they",
    "start": "2284780",
    "end": "2290000"
  },
  {
    "text": "become patterns too so when we talk about say for example objects tools",
    "start": "2290000",
    "end": "2295040"
  },
  {
    "text": "what's the first question you're going to ask me and it is how do I keep track",
    "start": "2295040",
    "end": "2302300"
  },
  {
    "text": "of a total right so you're giving me all of the stuff about the eventual",
    "start": "2302300",
    "end": "2308330"
  },
  {
    "text": "consistency and all of that how do I get a report how do I get a set how do I get",
    "start": "2308330",
    "end": "2315230"
  },
  {
    "text": "a total of something and one way of doing that is to keep track of the things that is going to affect the",
    "start": "2315230",
    "end": "2323330"
  },
  {
    "text": "aggregate and then keep a registry of",
    "start": "2323330",
    "end": "2328930"
  },
  {
    "text": "your total always in place so an aggregate basically allows you to bring",
    "start": "2328930",
    "end": "2337460"
  },
  {
    "text": "events from a whole sociality you have a bunch of bank accounts you keep a",
    "start": "2337460",
    "end": "2344540"
  },
  {
    "text": "registry will keep you a bunch of bank accounts and aggregate can listen to the events from each of those grains so that",
    "start": "2344540",
    "end": "2351710"
  },
  {
    "text": "you can now keep a set of events that come from all of the grains into the one",
    "start": "2351710",
    "end": "2357200"
  },
  {
    "text": "place so if you think about why total is",
    "start": "2357200",
    "end": "2362450"
  },
  {
    "text": "formed from us from a data set it's effectively what you're doing you're able to reduce across a whole bunch of",
    "start": "2362450",
    "end": "2368510"
  },
  {
    "text": "grains into the one thing and you provide the function that does the reducing in the aggregate grain and then",
    "start": "2368510",
    "end": "2375770"
  },
  {
    "text": "in a very general way you've solved the idea of being able to run a query but even",
    "start": "2375770",
    "end": "2382380"
  },
  {
    "text": "that terminology is wrong we don't run a query anymore because running the query",
    "start": "2382380",
    "end": "2387890"
  },
  {
    "text": "assumes that the data is basically useless the moment you finish cleaning something may obtain this one is",
    "start": "2387890",
    "end": "2394740"
  },
  {
    "text": "actually going to aggregate and keep qualifying it's a standing query every time an event takes place you can",
    "start": "2394740",
    "end": "2400650"
  },
  {
    "text": "actually collect the event and then apply the event the set of events to get",
    "start": "2400650",
    "end": "2406259"
  },
  {
    "text": "you the result that you want so you can basically ask for an aggregate on demand",
    "start": "2406259",
    "end": "2411779"
  },
  {
    "text": "in which case you don't actually let the event do anything other than say hey I",
    "start": "2411779",
    "end": "2416970"
  },
  {
    "text": "happen and then go away and then when somebody's interested in the total that's when you go and play all the",
    "start": "2416970",
    "end": "2422970"
  },
  {
    "text": "events together to get the total that you want and then you can get it back or you can do a title based thing I used to",
    "start": "2422970",
    "end": "2429299"
  },
  {
    "text": "in a past life work for an accounting company end of day is always useful because the end of day reports is what",
    "start": "2429299",
    "end": "2435210"
  },
  {
    "text": "you kind of need so I can quite easily keep track of all the transactions that took place during the day and at the end",
    "start": "2435210",
    "end": "2441990"
  },
  {
    "text": "of the day automatically computes a transaction now if you think about that that I think makes a lot of sense",
    "start": "2441990",
    "end": "2447839"
  },
  {
    "text": "because everything is immutable because",
    "start": "2447839",
    "end": "2452849"
  },
  {
    "text": "the events once they happen never change so the reports that happen in the",
    "start": "2452849",
    "end": "2459750"
  },
  {
    "text": "aggregate as of a given time is also immutable and so you can run it you know",
    "start": "2459750",
    "end": "2465299"
  },
  {
    "text": "very efficiently and never have to pay the cost of running the same query query twice and then of course you can have",
    "start": "2465299",
    "end": "2472410"
  },
  {
    "text": "any kind of strategy that you want to actually bring the aggregation to pieces so here's where you do the get aggregate",
    "start": "2472410",
    "end": "2479250"
  },
  {
    "text": "value and effectively you can see that the functions at the bottom tell you how",
    "start": "2479250",
    "end": "2487230"
  },
  {
    "start": "2481000",
    "end": "2481000"
  },
  {
    "text": "to deal with the credit and a debit the basic these lambdas they allow you to",
    "start": "2487230",
    "end": "2493049"
  },
  {
    "text": "plug in whatever functionality that you want but all the plumbing associated with keeping the grains in a single",
    "start": "2493049",
    "end": "2502980"
  },
  {
    "text": "registry getting the events to be propagated to the aggregate Lane",
    "start": "2502980",
    "end": "2508640"
  },
  {
    "text": "and then applying all the events at the time when you need them all of that comes for you automatically",
    "start": "2508640",
    "end": "2514100"
  },
  {
    "text": "so Bank eyes are on the aggregate balance will now keep track of a whole bunch of bank accounts and be able to",
    "start": "2514100",
    "end": "2521200"
  },
  {
    "text": "apply the events as they come come to the pipeline right so let's see right",
    "start": "2521200",
    "end": "2532660"
  },
  {
    "text": "this is actually an example of how this would be used so this is actually the",
    "start": "2532660",
    "end": "2538040"
  },
  {
    "text": "internal structure of what the bank account aggregate balance would be because you have to provide me the fact",
    "start": "2538040",
    "end": "2544190"
  },
  {
    "text": "that there is a credit and a debit and what is grab it in credit and debit mean if you can provide that information from",
    "start": "2544190",
    "end": "2551390"
  },
  {
    "text": "here then I can let you write code like this and then I'm going to create a",
    "start": "2551390",
    "end": "2556400"
  },
  {
    "text": "bunch of accounts right go to the account grains I'm going to register",
    "start": "2556400",
    "end": "2562220"
  },
  {
    "text": "them all in the aggregate grain and then take the first in accounts and credit",
    "start": "2562220",
    "end": "2568010"
  },
  {
    "text": "$100 to each of them and when I do that I expect the B aggregate effectively",
    "start": "2568010",
    "end": "2575060"
  },
  {
    "text": "should be 10 times 100 so if I were running a bank it means 10 accounts I'd $100.00 32 then",
    "start": "2575060",
    "end": "2582500"
  },
  {
    "text": "I jolly will have $1000 somewhere I should and then you can take it and add",
    "start": "2582500",
    "end": "2588320"
  },
  {
    "text": "another 100 and you'll get Banga at 200 at the end of it and effectively the",
    "start": "2588320",
    "end": "2593840"
  },
  {
    "text": "programming model if you notice it's still very object oriented he says that we've started composing more more",
    "start": "2593840",
    "end": "2600230"
  },
  {
    "text": "complex objects together to give us quite useful functionality from that",
    "start": "2600230",
    "end": "2606470"
  },
  {
    "text": "point of view it should be said that you can then go the aggregate grain and then look at what caused the value to be $200",
    "start": "2606470",
    "end": "2614510"
  },
  {
    "text": "and it can report to you that it is that way because these accounts have a $1",
    "start": "2614510",
    "end": "2622280"
  },
  {
    "text": "reach and then these are concise credit $100 each over a period of time and",
    "start": "2622280",
    "end": "2627860"
  },
  {
    "text": "you'll get a timestamp list of all of the things that you can work with so it",
    "start": "2627860",
    "end": "2633770"
  },
  {
    "text": "also means that you can build up totals out-of-band you can delay building the",
    "start": "2633770",
    "end": "2640010"
  },
  {
    "text": "total until the end of day it's all depends on your computational strategy the other cool thing about",
    "start": "2640010",
    "end": "2646930"
  },
  {
    "text": "event sourcing which works out after your system has been in place for some",
    "start": "2646930",
    "end": "2652390"
  },
  {
    "text": "time is that you can build aggregates on data that you can build aggregates on",
    "start": "2652390",
    "end": "2658930"
  },
  {
    "text": "old data that weren't there when the data was being formed so let's say that",
    "start": "2658930",
    "end": "2664720"
  },
  {
    "text": "I'm interested in new piece of",
    "start": "2664720",
    "end": "2670599"
  },
  {
    "text": "information when was a critic when when do people most actively credit money I",
    "start": "2670599",
    "end": "2676650"
  },
  {
    "text": "could create a new aggregate that actually filters everything and the same",
    "start": "2676650",
    "end": "2681849"
  },
  {
    "text": "time of day on them and then run it on all the historical data and get back the",
    "start": "2681849",
    "end": "2686890"
  },
  {
    "text": "information I haven't lost anything from that point of view and so the this event",
    "start": "2686890",
    "end": "2692440"
  },
  {
    "text": "sourcing approach is fully supported in Orleans and it's as native as you can expect any other form of books to be if",
    "start": "2692440",
    "end": "2701829"
  },
  {
    "start": "2700000",
    "end": "2700000"
  },
  {
    "text": "you think about that we have actually kind of created a full-blown object store I had we sold individual objects",
    "start": "2701829",
    "end": "2708970"
  },
  {
    "text": "and got them back we kept track of groups of objects we were able to get standing queries at up and we were able",
    "start": "2708970",
    "end": "2717250"
  },
  {
    "text": "to do event based semantics operation tracking right and in many cases that's",
    "start": "2717250",
    "end": "2726069"
  },
  {
    "text": "pretty much what you use your database for so if you squint a little you can",
    "start": "2726069",
    "end": "2731380"
  },
  {
    "text": "potentially get by quite a far way and",
    "start": "2731380",
    "end": "2736839"
  },
  {
    "text": "get rid of your separate relational store by keeping a stateful set of objects in memory and be able to handle",
    "start": "2736839",
    "end": "2744250"
  },
  {
    "text": "everything that you want in fact in the roadmap is Sergey will point out future",
    "start": "2744250",
    "end": "2750550"
  },
  {
    "text": "of still spans on how the people in Mike's of research that are actually",
    "start": "2750550",
    "end": "2755950"
  },
  {
    "text": "talking about putting transactions in play for this so now when we want to do up and and sending information across",
    "start": "2755950",
    "end": "2763240"
  },
  {
    "text": "it's not just let's just make one thing happen we can actually give you a guarantee that",
    "start": "2763240",
    "end": "2769140"
  },
  {
    "text": "all of these will happen or none will happen at the same time at that point you've actually converted this thing",
    "start": "2769140",
    "end": "2776010"
  },
  {
    "text": "into a kind of object database now there's a whole bunch of baggage",
    "start": "2776010",
    "end": "2781710"
  },
  {
    "text": "associated with the place so let's not go there the reality is that in in more than one occasion it is entirely",
    "start": "2781710",
    "end": "2788099"
  },
  {
    "text": "possible to write a full-blown scalable web application without using a database",
    "start": "2788099",
    "end": "2794519"
  },
  {
    "text": "at all just using the all names middle-tier to keep track of just the",
    "start": "2794519",
    "end": "2799619"
  },
  {
    "text": "data side of things I think we've done a little bit about data I was happy to",
    "start": "2799619",
    "end": "2806010"
  },
  {
    "text": "take questions but we can we also have time for questions later I think we're",
    "start": "2806010",
    "end": "2811140"
  },
  {
    "text": "going to talk about the communication side now we remember we talked about the",
    "start": "2811140",
    "end": "2816510"
  },
  {
    "text": "three different aspects of objects the data storage piece is what we just covered there's an patterns around",
    "start": "2816510",
    "end": "2822720"
  },
  {
    "text": "communication that Sylvia is going to get into but if anyone has a question I have to answer it now seems to me that",
    "start": "2822720",
    "end": "2844019"
  },
  {
    "text": "you multiplied the risk of a machine dying and then all of a sudden you've lost some some amounts of grains and how",
    "start": "2844019",
    "end": "2852509"
  },
  {
    "text": "does the system cope with that how does a kiss' system cope with failure sure let me repeat the question and I've been",
    "start": "2852509",
    "end": "2859200"
  },
  {
    "text": "eking analyst yeah so the question asked was now that you've actually taken your",
    "start": "2859200",
    "end": "2865619"
  },
  {
    "text": "objects and put them on multiple machines how do you deal with the fact one of them may fail and take some of",
    "start": "2865619",
    "end": "2870869"
  },
  {
    "text": "the Greens video well this simple simple the answer is grains never fail because",
    "start": "2870869",
    "end": "2876660"
  },
  {
    "text": "they're logical they have their state persisted so if one machine blew up the",
    "start": "2876660",
    "end": "2882059"
  },
  {
    "text": "the released runtime will recognize it remove that machine from the cluster and reactivate grains are needed on other",
    "start": "2882059",
    "end": "2889410"
  },
  {
    "text": "machines and reload their state there and because you've completely location transparency don't only carry those",
    "start": "2889410",
    "end": "2895380"
  },
  {
    "text": "grains moved a slightly higher latency when whenever",
    "start": "2895380",
    "end": "2901310"
  },
  {
    "text": "you're talking to those particular grains that have now oh you know we're living in memory on a machine that has",
    "start": "2901310",
    "end": "2908330"
  },
  {
    "text": "now died although we in memory another machine and latency between machines is",
    "start": "2908330",
    "end": "2913550"
  },
  {
    "text": "under milliseconds so you will not see any latency just think of it as the cluster reconfigured and it keeps going",
    "start": "2913550",
    "end": "2921400"
  },
  {
    "text": "okay thanks can you your events say you",
    "start": "2921400",
    "end": "2932300"
  },
  {
    "text": "you Division you event and then you would like to actually apply them to your two grains can you do that sure I",
    "start": "2932300",
    "end": "2938810"
  },
  {
    "text": "mean it said red and green is just an extended version of a the standard event",
    "start": "2938810",
    "end": "2944840"
  },
  {
    "text": "right so you can potentially extend these patterns however you want but",
    "start": "2944840",
    "end": "2950290"
  },
  {
    "text": "remember that none of the stuff if we are talking about building patterns to make stuff useful the primitives that",
    "start": "2950290",
    "end": "2955850"
  },
  {
    "text": "we're talking about are effectively object-oriented programming so they'll be coming back to the same thing if you",
    "start": "2955850",
    "end": "2963170"
  },
  {
    "text": "can do it with an object somewhere we can do it is all names and usually with",
    "start": "2963170",
    "end": "2968810"
  },
  {
    "text": "not much more difficulty so the versioning is exactly the same story you think you can revise you write the",
    "start": "2968810",
    "end": "2974540"
  },
  {
    "text": "history basically on the grain if you want to here you can sorry yeah so the next pattern",
    "start": "2974540",
    "end": "2986510"
  },
  {
    "start": "2985000",
    "end": "2985000"
  },
  {
    "text": "is the object graph so it's kind of tattered and not at the same time when people hear about graphs they think",
    "start": "2986510",
    "end": "2992630"
  },
  {
    "text": "about graph databases immediately or what face book was the graph of whatever",
    "start": "2992630",
    "end": "2997820"
  },
  {
    "text": "billion plus users but in reality a lot of things are like graphs so like in the",
    "start": "2997820",
    "end": "3003850"
  },
  {
    "text": "gaming example you have this players that form a short term relations you're in the game session when they",
    "start": "3003850",
    "end": "3009880"
  },
  {
    "text": "participate in the same game and then the game ends those relations end but they also have long term relations if",
    "start": "3009880",
    "end": "3015880"
  },
  {
    "text": "they're part of a clan or a friends so you can communicate that way as well for example they chat with each other",
    "start": "3015880",
    "end": "3021760"
  },
  {
    "text": "send messages invites to each other and so for that inner lease you don't even need",
    "start": "3021760",
    "end": "3027880"
  },
  {
    "text": "a pattern because you can have these references you can hold them you can store them which you cannot do with",
    "start": "3027880",
    "end": "3033519"
  },
  {
    "text": "objects and have just lists of your prints faith and database and anytime you need to send the message you just",
    "start": "3033519",
    "end": "3039910"
  },
  {
    "text": "make a call if that grain is not a memory will be activated but it's a look",
    "start": "3039910",
    "end": "3045609"
  },
  {
    "text": "at this picture it's intentionally the same but instead of gaming there is IOT",
    "start": "3045609",
    "end": "3051420"
  },
  {
    "start": "3046000",
    "end": "3046000"
  },
  {
    "text": "scenario here 53 devices and rooms and control objects",
    "start": "3051420",
    "end": "3057630"
  },
  {
    "text": "or something else for example the popular pattern is with tracking vehicles you divide your geographic area",
    "start": "3057630",
    "end": "3065440"
  },
  {
    "text": "into trials as vehicle moves and reports its position of a cellphone reports its",
    "start": "3065440",
    "end": "3070450"
  },
  {
    "text": "position this vehicle grain or avatar that gets updated with position and can",
    "start": "3070450",
    "end": "3078279"
  },
  {
    "text": "we register itself with different tiles as that moves on so we need to send",
    "start": "3078279",
    "end": "3083410"
  },
  {
    "text": "notification to all the grains where they put all vehicles in a particular tile just need to talk about tile grain",
    "start": "3083410",
    "end": "3089589"
  },
  {
    "text": "like would aggregate pattern or with registry patterns say they update all this vehicles in the reverse was also",
    "start": "3089589",
    "end": "3097329"
  },
  {
    "text": "possible you can analyze data inquiry it across the geographic hotels for traffic optimizations they think that but the",
    "start": "3097329",
    "end": "3104650"
  },
  {
    "text": "program model is exactly the same to use references into the dynamic relations that you establish for a short term or",
    "start": "3104650",
    "end": "3110170"
  },
  {
    "text": "long term that's what it's about so we'll go through streaming quickly so we",
    "start": "3110170",
    "end": "3119289"
  },
  {
    "start": "3117000",
    "end": "3117000"
  },
  {
    "text": "introduced a lean streaming about two years ago and assuming is a very overloaded term including video streams",
    "start": "3119289",
    "end": "3125890"
  },
  {
    "text": "and data streams and Kafka in Arlene's what she means is the logical",
    "start": "3125890",
    "end": "3131739"
  },
  {
    "text": "obstruction of a named entity so just like grains have identity unique",
    "start": "3131739",
    "end": "3137619"
  },
  {
    "text": "identity genes early in streams have identities and how long do you know the identity of a stream you can always",
    "start": "3137619",
    "end": "3143980"
  },
  {
    "text": "either produce in Malaysia the stream or subscribe to consume messages from the stream so they kind of always exist just",
    "start": "3143980",
    "end": "3151029"
  },
  {
    "text": "like grains at the logical level but physically they're multiplexed over some",
    "start": "3151029",
    "end": "3157089"
  },
  {
    "text": "physical cues usually for example if you have hundreds of millions of users with individual /",
    "start": "3157089",
    "end": "3163210"
  },
  {
    "text": "users genes you will have a hard time finding a streaming and queueing solution I would support hundreds of",
    "start": "3163210",
    "end": "3169150"
  },
  {
    "text": "millions of individual cues but they get automatically as logical streams",
    "start": "3169150",
    "end": "3174460"
  },
  {
    "text": "multiplex / physical cue so you may multiple like this 300 million users or work say a thousand queues because your",
    "start": "3174460",
    "end": "3181240"
  },
  {
    "text": "events are infrequent per user and it's a matter of event frequency and then",
    "start": "3181240",
    "end": "3187750"
  },
  {
    "text": "this logical seems they can easily be mapped to grains that are interested in processing them and the mapping can be",
    "start": "3187750",
    "end": "3194860"
  },
  {
    "text": "done either through explicit subscription say I'm interested in events on the stream with this idea or",
    "start": "3194860",
    "end": "3199990"
  },
  {
    "text": "even implicitly like in this example by merely putting an attribute implicit",
    "start": "3199990",
    "end": "3205690"
  },
  {
    "text": "subscription I'm declaring that grains of that class whose identity matches to",
    "start": "3205690",
    "end": "3213580"
  },
  {
    "text": "the stream identity within the namespace device alerts they should automatically",
    "start": "3213580",
    "end": "3219280"
  },
  {
    "text": "receive events of those streams so by just putting that you eliminate the need and we need to install a handler pointer",
    "start": "3219280",
    "end": "3226090"
  },
  {
    "text": "to a method to handle the message and those stream messages are delivered to the same exact mechanism just like",
    "start": "3226090",
    "end": "3232420"
  },
  {
    "text": "method invocation so in terms of writing code and implementing grain and handles messages delivered through one and more",
    "start": "3232420",
    "end": "3239650"
  },
  {
    "text": "streams it's the same as processing and eppley an ethical their various",
    "start": "3239650",
    "end": "3246910"
  },
  {
    "text": "scenarios for that this enables one that I wanted to point out the key detection",
    "start": "3246910",
    "end": "3252690"
  },
  {
    "start": "3247000",
    "end": "3247000"
  },
  {
    "text": "in gaming tears can be very poisonous if you find somebody who misbehaves or find",
    "start": "3252690",
    "end": "3258550"
  },
  {
    "text": "a way to exploit the system you want to shut them down as soon as possible it then temporarily or forever so it",
    "start": "3258550",
    "end": "3264310"
  },
  {
    "text": "automatically detected somebody is doing that for example if somebody exited multiplayer again more than five times",
    "start": "3264310",
    "end": "3270100"
  },
  {
    "text": "over the course of 10 minutes that's a sign of a cheating one pattern but",
    "start": "3270100",
    "end": "3275170"
  },
  {
    "text": "interested enough another customer Allah leans was using game patterns for detecting credit card fraud transactions",
    "start": "3275170",
    "end": "3281800"
  },
  {
    "text": "because you receive the dancer and you look for patterns if somebody did a couple of gas-station transaction and",
    "start": "3281800",
    "end": "3289240"
  },
  {
    "text": "then once your shoe store that suspicious are interested in the us that they block the cars immediately so by subscribing",
    "start": "3289240",
    "end": "3296200"
  },
  {
    "text": "to enhance input in this logic and very simple pattern matching you can do it",
    "start": "3296200",
    "end": "3301650"
  },
  {
    "text": "the most advanced state the most advanced pattern is a state machine pattern and actually we're not going to",
    "start": "3301650",
    "end": "3307900"
  },
  {
    "start": "3303000",
    "end": "3303000"
  },
  {
    "text": "talk about it today in this talk but later today John will be talking about",
    "start": "3307900",
    "end": "3313440"
  },
  {
    "text": "just that pattern in one and the tooling he created for it so they can define the",
    "start": "3313440",
    "end": "3320079"
  },
  {
    "text": "state machine within the grain with a simple declarative definition of a state machine so it's going to be very",
    "start": "3320079",
    "end": "3327010"
  },
  {
    "text": "interesting talk I promise you we didn't talk much about the cross-cutting",
    "start": "3327010",
    "end": "3333670"
  },
  {
    "start": "3331000",
    "end": "3331000"
  },
  {
    "text": "benefits of our lives but it's worth mentioning them because because the questions of what happens in case of a",
    "start": "3333670",
    "end": "3339849"
  },
  {
    "text": "failure naturally emerge or liens candles all of that so it handles the",
    "start": "3339849",
    "end": "3346240"
  },
  {
    "text": "cluster state and understands if machines go down if Network partition happens there is physical sending of",
    "start": "3346240",
    "end": "3353619"
  },
  {
    "text": "messages over the network to ping and check that the machines are available the messages to go through so it release",
    "start": "3353619",
    "end": "3361150"
  },
  {
    "text": "runtime by itself automatically detects failures like if you have network cable failure and will automatically readjust",
    "start": "3361150",
    "end": "3367960"
  },
  {
    "text": "so that grains will get recreated on the machines that are still part of the cluster one thing that is not",
    "start": "3367960",
    "end": "3375279"
  },
  {
    "text": "immediately obvious that the fact that Arleen's deactivate grains that are not",
    "start": "3375279",
    "end": "3380349"
  },
  {
    "text": "no longer used actually that gives you complete automatic resource management",
    "start": "3380349",
    "end": "3387240"
  },
  {
    "text": "so you just ask give me a reference to grain with this idea give me a reference to getting release ID and they get",
    "start": "3387240",
    "end": "3392859"
  },
  {
    "text": "activated automatically but you never need to do anything to clean it up because they get collected garbage",
    "start": "3392859",
    "end": "3398440"
  },
  {
    "text": "collected effectively at a specified time you can say keep them in memory for",
    "start": "3398440",
    "end": "3403990"
  },
  {
    "text": "two hours or for five minutes you can specify it by type and can even programmatically tell so that eliminates",
    "start": "3403990",
    "end": "3409660"
  },
  {
    "text": "a lot of the concerns of resource management and it's very efficient quickly what is on the horizon we",
    "start": "3409660",
    "end": "3418809"
  },
  {
    "text": "published the end of the year the does not tech review of dotnet core compatible version",
    "start": "3418809",
    "end": "3425460"
  },
  {
    "text": "there's a lot of interest rying or liens on Linux and docker and things like that",
    "start": "3425460",
    "end": "3431170"
  },
  {
    "text": "we recently enabled this very interesting feature of support for do distributed Multi cluster were in",
    "start": "3431170",
    "end": "3438310"
  },
  {
    "text": "addition to being able to run a single cluster of servers like today you can also run multiple clusters that are",
    "start": "3438310",
    "end": "3444910"
  },
  {
    "text": "logically combining to distribute do DC with clusters are they aware of each other so you keep the same probably",
    "start": "3444910",
    "end": "3451000"
  },
  {
    "text": "model of the single grain when a cluster but now it can be anywhere within this sort of constellation of clusters they",
    "start": "3451000",
    "end": "3458890"
  },
  {
    "text": "can deploy to multiple data centers for availability or for latency so you can have grains automatically activated near",
    "start": "3458890",
    "end": "3465580"
  },
  {
    "text": "the user were the requests are from the user company so the Australian user doesn't need to talk to Dennis and the",
    "start": "3465580",
    "end": "3471640"
  },
  {
    "text": "US can talk to Darren in Australia but if that same user happened to travel to",
    "start": "3471640",
    "end": "3476710"
  },
  {
    "text": "in DC London he's grain if he launches an application we activated the news data center or",
    "start": "3476710",
    "end": "3483390"
  },
  {
    "text": "automatically routed to we also continued collaboration when MSR",
    "start": "3483390",
    "end": "3489520"
  },
  {
    "text": "actually for the project adult lives originated in Microsoft Research now it's in the Prada group for a couple of",
    "start": "3489520",
    "end": "3495970"
  },
  {
    "text": "years but we continue to work on other interesting extensions like for example",
    "start": "3495970",
    "end": "3501120"
  },
  {
    "text": "support for full asset transactions that John mentioned indices so you could",
    "start": "3501120",
    "end": "3506740"
  },
  {
    "text": "query and say finally all the users with such-and-such characteristics or in this",
    "start": "3506740",
    "end": "3513520"
  },
  {
    "text": "geographic code and some other interesting stuff so we have links to",
    "start": "3513520",
    "end": "3520090"
  },
  {
    "text": "the resources here the code base which is obviously on github we originally",
    "start": "3520090",
    "end": "3525190"
  },
  {
    "text": "started the blog we have this chat and gather where the community leaves them",
    "start": "3525190",
    "end": "3531400"
  },
  {
    "text": "it's very nice to kind of look what people are talking about and participate",
    "start": "3531400",
    "end": "3537720"
  },
  {
    "text": "we have a stage in repo Orleans can see for things that are not ready yet but",
    "start": "3537720",
    "end": "3542950"
  },
  {
    "text": "kind of being incubated and as John mentioned code so this talk is available",
    "start": "3542950",
    "end": "3548940"
  },
  {
    "text": "thank you very much any question just come to us yes option",
    "start": "3548940",
    "end": "3558730"
  },
  {
    "text": "any questions with little the time limit on the knowledge itself yes",
    "start": "3558760",
    "end": "3568900"
  },
  {
    "text": "similarly to answer correctly that it if you compare with akka streams that you",
    "start": "3571300",
    "end": "3577130"
  },
  {
    "text": "can define your process workflow and then you can materialize it in a similar",
    "start": "3577130",
    "end": "3582830"
  },
  {
    "text": "way without explicitly getting your grain so it will be created for you or",
    "start": "3582830",
    "end": "3588680"
  },
  {
    "text": "is it something else it is kind of decouple there allows it to be decoupled like for example your",
    "start": "3588680",
    "end": "3595070"
  },
  {
    "text": "ingestion layer that ingest data into queues like in the event hub or so Azure",
    "start": "3595070",
    "end": "3601280"
  },
  {
    "text": "queues may have nothing to do with the consumption cluster it doesn't even have to be part of the cluster so you have",
    "start": "3601280",
    "end": "3607790"
  },
  {
    "text": "this because of the queues you have separation of concerns on the processing",
    "start": "3607790",
    "end": "3613400"
  },
  {
    "text": "side you just define declaratively or programmatically what streams logical",
    "start": "3613400",
    "end": "3618680"
  },
  {
    "text": "streams your your grains which should be subscribed to and whatever data comes in were either from grains of form or",
    "start": "3618680",
    "end": "3625369"
  },
  {
    "text": "leaves or from outside will get yet process and this declares the definitions they don't need to deal with",
    "start": "3625369",
    "end": "3632869"
  },
  {
    "text": "grains explicitly they sort of on a function level or you need to do some grain processing but they're done on the",
    "start": "3632869",
    "end": "3642170"
  },
  {
    "text": "grain like a class definition layer if you use implicit subscription so it Eclair this class needs to be subscribed",
    "start": "3642170",
    "end": "3649160"
  },
  {
    "text": "to such as such stream namespaces check in to that but it can also be very explicit thank you I think we should",
    "start": "3649160",
    "end": "3655910"
  },
  {
    "text": "take it offline now it just just comes out because come talk to us is very available also please come to the 540",
    "start": "3655910",
    "end": "3663349"
  },
  {
    "text": "talk because it's really all about the whole state machine problem and we'll",
    "start": "3663349",
    "end": "3670130"
  },
  {
    "text": "talk about how to write safe scalable access that embody state machines and in",
    "start": "3670130",
    "end": "3677060"
  },
  {
    "text": "the cloud thank you yes hmm",
    "start": "3677060",
    "end": "3683200"
  }
]