[
  {
    "text": "all right hello everybody welcome to my session on analyzing source code using roswell",
    "start": "1040",
    "end": "6560"
  },
  {
    "text": "um first of all let me start by appreciating that you've all come to my session for some of you it might be very early",
    "start": "6560",
    "end": "13120"
  },
  {
    "text": "in the morning or very late in the evening but still you've taken time to join the session of which i'm very grateful",
    "start": "13120",
    "end": "19680"
  },
  {
    "text": "so let's get cracked because we've got a lot of stuff to work with um my name is eric schweber",
    "start": "19680",
    "end": "27359"
  },
  {
    "text": "i work for exorcism i'm a.net foundation member and i love learning new languages so the",
    "start": "27359",
    "end": "33680"
  },
  {
    "text": "image that you see is a very apt description of me and it's also how i got to know exorcism",
    "start": "33680",
    "end": "40160"
  },
  {
    "text": "most of the talk will be done in live coding except for the first few slides which",
    "start": "40160",
    "end": "45280"
  },
  {
    "text": "give a little bit of a background on what is the actual issue that i'm trying to solve",
    "start": "45280",
    "end": "51120"
  },
  {
    "text": "so what is exorcism exorcism.io is a website it's a free and open source website with the aim of",
    "start": "51120",
    "end": "57760"
  },
  {
    "text": "helping people improve fluency in a language so if you're a c-sharp developer and you",
    "start": "57760",
    "end": "62800"
  },
  {
    "text": "want to become better in c-sharp you can do that but if you want to learn a new language there's also",
    "start": "62800",
    "end": "67920"
  },
  {
    "text": "a very uh plausible path to take on exorcism and that is also how i got to",
    "start": "67920",
    "end": "72960"
  },
  {
    "text": "know it the way that ectism goes about helping you improve your fluency in a language",
    "start": "72960",
    "end": "78720"
  },
  {
    "text": "is by having tiny exercises which are like small puzzles that you need to solve",
    "start": "78720",
    "end": "84240"
  },
  {
    "text": "so the student downloads an exercise and what gets downloaded is a test suite so a set of tests",
    "start": "84240",
    "end": "90240"
  },
  {
    "text": "and the goal for the student is to develop an implementation that passes all the tests",
    "start": "90240",
    "end": "95759"
  },
  {
    "text": "the thing that sets exorcism apart from other websites is that once you're done and you have all the tests passing you submit your solution",
    "start": "95759",
    "end": "102799"
  },
  {
    "text": "to the website and then a code review is done by a person that's familiar with the language",
    "start": "102799",
    "end": "108320"
  },
  {
    "text": "so there's an actual human being reviewing your code so this human",
    "start": "108320",
    "end": "114560"
  },
  {
    "text": "interaction is great at improving your skills in the length because he can he or she can point out all the",
    "start": "114560",
    "end": "120479"
  },
  {
    "text": "finer details of the language with the current version of exorcism though there are some issues that we",
    "start": "120479",
    "end": "126560"
  },
  {
    "text": "have the biggest issue that we have is that sometimes there are so many more students than there are mentors",
    "start": "126560",
    "end": "133360"
  },
  {
    "text": "um that it can take quite a while before the student gets feedback on the",
    "start": "133360",
    "end": "138560"
  },
  {
    "text": "solution that was submitted so that's obviously a pain point for us another is that if 10 students submit",
    "start": "138560",
    "end": "145599"
  },
  {
    "text": "the exact same solution it does require mentoring it 10 times instead of being able to mentor it once",
    "start": "145599",
    "end": "152160"
  },
  {
    "text": "and then have to apply everywhere and finally um is great for learning a",
    "start": "152160",
    "end": "157920"
  },
  {
    "text": "new language but as ecosystem requires to to run things locally on your machine",
    "start": "157920",
    "end": "163200"
  },
  {
    "text": "it means that you have to get everything set up locally like an sdk or possibly an ide so",
    "start": "163200",
    "end": "169920"
  },
  {
    "text": "there's quite a barrier for you to get started so that's also one issue that we have",
    "start": "169920",
    "end": "176239"
  },
  {
    "text": "all right um we've come up with some solutions for that and one is that many students will have",
    "start": "176239",
    "end": "181440"
  },
  {
    "text": "the same sort of issues with their solutions so mentors will recognize these parents",
    "start": "181440",
    "end": "188640"
  },
  {
    "text": "and say hey this is a student that's using an if statement but a switch would be more idiomatic",
    "start": "188640",
    "end": "194400"
  },
  {
    "text": "so those are all rules that are in the mentor's head but what we try to do is encode those rules in code and the",
    "start": "194400",
    "end": "201519"
  },
  {
    "text": "analyzers is a tool that takes a code that was submitted by a student and then looks for patterns and",
    "start": "201519",
    "end": "207120"
  },
  {
    "text": "automatically analyze it similarly another thing that we try to do is uh for the ten",
    "start": "207120",
    "end": "213599"
  },
  {
    "text": "identical solutions to come up with the way that we only have to mentor them once and um they don't have to be identical",
    "start": "213599",
    "end": "222000"
  },
  {
    "text": "so if they're identical except they're not identical but they are just different in white space for example or",
    "start": "222000",
    "end": "228080"
  },
  {
    "text": "the placing of their kerdi braces um we could reuse the same comments so we're trying to work",
    "start": "228080",
    "end": "234159"
  },
  {
    "text": "with the system to have that uh work efficiently and finally um as the students will be",
    "start": "234159",
    "end": "241120"
  },
  {
    "text": "able to do in-browser coding they won't be able to run the tests because they won't run in browsing and we have",
    "start": "241120",
    "end": "247920"
  },
  {
    "text": "to have some way of executing them on a server and there are some nice things that we do there too",
    "start": "247920",
    "end": "254959"
  },
  {
    "text": "so um in this session we'll look at how the c sharp track of hexazine",
    "start": "254959",
    "end": "260720"
  },
  {
    "text": "has implemented the aforementioned tools and for all three tools we've used roslan you probably know",
    "start": "260720",
    "end": "268479"
  },
  {
    "text": "russian as the name of the c-sharp compiler however rosen is far more than just the c-sharp compiler",
    "start": "268479",
    "end": "275040"
  },
  {
    "text": "in fact rosin is the name of the net compiler platform and the thing that rossing gives us that",
    "start": "275040",
    "end": "281600"
  },
  {
    "text": "we are interested is not the compiler but it's the parsing of c-sharp source code",
    "start": "281600",
    "end": "287280"
  },
  {
    "text": "so russian gives us a way of taking c-sharp source code parsing it and it will then return a",
    "start": "287280",
    "end": "294560"
  },
  {
    "text": "syntax tree which is a fully typed way of working with c chart code",
    "start": "294560",
    "end": "299600"
  },
  {
    "text": "so we can parse the sharp code and then work with it in c sharp code a syntax tree contains up two",
    "start": "299600",
    "end": "306400"
  },
  {
    "text": "types of elements the leaf nodes are syntax tokens and tokens are just",
    "start": "306400",
    "end": "312320"
  },
  {
    "text": "a direct mapping to a little bit of text in the source code for example a keyword or a string on numeric literal",
    "start": "312320",
    "end": "319840"
  },
  {
    "text": "and tokens have possibly trivia associated with them and trivia are things that are ignored by the",
    "start": "319840",
    "end": "325840"
  },
  {
    "text": "compiler but they are in the source but for example white space and comments",
    "start": "325840",
    "end": "331280"
  },
  {
    "text": "the notes in the tree are syntax nodes and they correspond to language constructs for example",
    "start": "331280",
    "end": "338560"
  },
  {
    "text": "classes or namespaces so they are a bit more high level representation and their children will",
    "start": "338560",
    "end": "344479"
  },
  {
    "text": "be other notes or tokens okay the best way to um to get",
    "start": "344479",
    "end": "350720"
  },
  {
    "text": "a bit of a grasp of what a syntax tree is is to either use visual studio which has a",
    "start": "350720",
    "end": "357120"
  },
  {
    "text": "very nice plugin that you can install it's built in and uh it allows us to give a visual",
    "start": "357120",
    "end": "363440"
  },
  {
    "text": "representation of what a syntax free looks like so i've opened visual studio here and if we",
    "start": "363440",
    "end": "370639"
  },
  {
    "text": "go to view other windows and then to syntax visualizer a window pops up",
    "start": "370639",
    "end": "378080"
  },
  {
    "text": "and if we click somewhere in the source code it will populate this window with the syntax tree",
    "start": "378080",
    "end": "383759"
  },
  {
    "text": "so this is the actual rostline syntax tree that visual studio is using underneath you can see that it has a",
    "start": "383759",
    "end": "391199"
  },
  {
    "text": "tree structure so there is a root node in this case the compilation unit and the compilation units children are",
    "start": "391199",
    "end": "397680"
  },
  {
    "text": "all the top level elements and in this case there are two one is the using statement so if i click on this",
    "start": "397680",
    "end": "404479"
  },
  {
    "text": "using directive it gets highlighted and the using directive itself",
    "start": "404479",
    "end": "409840"
  },
  {
    "text": "contains sub nodes so there is a sub node identify name and it has a token using keyword",
    "start": "409840",
    "end": "416479"
  },
  {
    "text": "this is a token and it corresponds to this bit of text this specific token also has white space",
    "start": "416479",
    "end": "422400"
  },
  {
    "text": "trivia offered so it's trailing and it's just a single white space so you can see that",
    "start": "422400",
    "end": "427840"
  },
  {
    "text": "the tree representation is a direct mapping of your c sharp source",
    "start": "427840",
    "end": "433039"
  },
  {
    "text": "code and each node will have a class that's associated with it so the",
    "start": "433039",
    "end": "438319"
  },
  {
    "text": "using directive has a type using directive syntax which is a class that we can use later on",
    "start": "438319",
    "end": "445120"
  },
  {
    "text": "if you don't have visual studio for example because you're working on a mac or whatever and you have another option it's",
    "start": "445120",
    "end": "452319"
  },
  {
    "text": "slightly less fancy but still nice um and that is the rustling quota which is a website made",
    "start": "452319",
    "end": "458639"
  },
  {
    "text": "by kyo osenkov and on that website you can enter some",
    "start": "458639",
    "end": "464720"
  },
  {
    "text": "text just some c sharp source code and click on get rospin api calls to generate this",
    "start": "464720",
    "end": "470400"
  },
  {
    "text": "code and then it gets a complete listing of all the different elements it's less pretty",
    "start": "470400",
    "end": "478479"
  },
  {
    "text": "um but it's functional and uh it helps a lot instead of having to",
    "start": "478479",
    "end": "484080"
  },
  {
    "text": "drill through all the code okay so now it's time for",
    "start": "484080",
    "end": "491039"
  },
  {
    "text": "the demo which will be the rest of the talk and we'll be doing our demos in writer",
    "start": "491039",
    "end": "496560"
  },
  {
    "text": "because that's my preferred ide and also to show that you don't have to do these things in visual studio",
    "start": "496560",
    "end": "502240"
  },
  {
    "text": "so let's switch to writer first tool that we will be building is",
    "start": "502240",
    "end": "507919"
  },
  {
    "text": "the analyzer and the analyzer is the tool that encodes the rules that the mentor had in his head",
    "start": "507919",
    "end": "513680"
  },
  {
    "text": "or her head so it's just a regular.net core tool",
    "start": "513680",
    "end": "519039"
  },
  {
    "text": "so nothing fancy there and and the student has worked on an exercise and that exercise contains of two",
    "start": "519039",
    "end": "526080"
  },
  {
    "text": "bits of code so there are the tests and there are only two because the",
    "start": "526080",
    "end": "532160"
  },
  {
    "text": "functionality that the student is expected to implement is a greeting method that can be called either",
    "start": "532160",
    "end": "537920"
  },
  {
    "text": "without any parameters in which case hello you exclamation mark is returned or it can",
    "start": "537920",
    "end": "543519"
  },
  {
    "text": "be called with a name parameter in which case hello name exclamation mark is returned so very",
    "start": "543519",
    "end": "550560"
  },
  {
    "text": "simple the solution that the student came up with and submitted is this one um it uses method",
    "start": "550560",
    "end": "556480"
  },
  {
    "text": "overloading and a little bit of string concatenation so it looks okay um but let's see if we can build a",
    "start": "556480",
    "end": "563360"
  },
  {
    "text": "little bit of logic in our analyzer to guide the student towards a somewhat more concise and hopefully more",
    "start": "563360",
    "end": "569440"
  },
  {
    "text": "idiomatic solution so to do so i've stepped two things",
    "start": "569440",
    "end": "575279"
  },
  {
    "text": "already which one is the the path to the file of the student the exercise file and the other is",
    "start": "575279",
    "end": "581680"
  },
  {
    "text": "reading that file into a string so the first thing that we need to do is",
    "start": "581680",
    "end": "587040"
  },
  {
    "text": "well we want to use rosland's c-sharp parsing functionality so we need to install a nuget package",
    "start": "587040",
    "end": "593279"
  },
  {
    "text": "and the package that we need to install is microsoft.codeanalysis.csharp",
    "start": "593279",
    "end": "599279"
  },
  {
    "text": "so let's install that into our local project great and then we are",
    "start": "599279",
    "end": "606240"
  },
  {
    "text": "we are ready to parse c sharp source code so the way that you do that is you do c star c sharp syntax tree",
    "start": "606240",
    "end": "615040"
  },
  {
    "text": "dot parse text and then you can parse it yeah there are many overloads but for now we'll just parse the text that we",
    "start": "615040",
    "end": "621360"
  },
  {
    "text": "just uh that we had already stopped and this will return a syntax tree so we'll call that tree",
    "start": "621360",
    "end": "629839"
  },
  {
    "text": "the tree itself is nice and it has lots of properties but we are mostly interested in the",
    "start": "629839",
    "end": "637519"
  },
  {
    "text": "three nodes because the three nodes contain the actual source code structure so there's one thing that we also need",
    "start": "637519",
    "end": "642720"
  },
  {
    "text": "to do which is to get at the root so we'll call that root and let's",
    "start": "642720",
    "end": "650800"
  },
  {
    "text": "debug this and see what the root is",
    "start": "650800",
    "end": "654800"
  },
  {
    "text": "right one two three here we go so let's go over this one",
    "start": "658839",
    "end": "666560"
  },
  {
    "text": "and we can see here that the root is of type completion unit syntax and as you might recall that's the exact",
    "start": "666560",
    "end": "672959"
  },
  {
    "text": "same note that we saw in the visual studio in syntax visual life",
    "start": "672959",
    "end": "678079"
  },
  {
    "text": "so that's nice we now have access to the c-sharp source code we won't go into all the properties but",
    "start": "678079",
    "end": "684480"
  },
  {
    "text": "we'll be discovering them while we're developing the analyzers so what should we have as a rule so",
    "start": "684480",
    "end": "692079"
  },
  {
    "text": "one thing that i don't like about this is that it uses method overloading whereas it could be using a default",
    "start": "692079",
    "end": "698240"
  },
  {
    "text": "parameter so let's try and build an analyzer for that so if it uses method overloading and",
    "start": "698240",
    "end": "705440"
  },
  {
    "text": "then we'll pass in the root we'll write out please use an",
    "start": "705440",
    "end": "710480"
  },
  {
    "text": "optional parameter instead of method overloaded let's remove the",
    "start": "710480",
    "end": "718079"
  },
  {
    "text": "step and create the method",
    "start": "718079",
    "end": "723519"
  },
  {
    "text": "all right so we have the root so how do we detect if method overloading",
    "start": "723519",
    "end": "728800"
  },
  {
    "text": "is used at this point it's usually good to have a real firm grasp in your head",
    "start": "728800",
    "end": "734880"
  },
  {
    "text": "of what the syntax looks like in the tree so one thing that we can do is we",
    "start": "734880",
    "end": "741040"
  },
  {
    "text": "can parse this code put it here and then we can see",
    "start": "741040",
    "end": "747200"
  },
  {
    "text": "that it's a method declaration uh and the type of the method declaration is method declaration syntax",
    "start": "747200",
    "end": "754240"
  },
  {
    "text": "all right and we can use that so the way that we do that is that we can ask the route for all of",
    "start": "754240",
    "end": "760000"
  },
  {
    "text": "its children so all of its nodes and then we can filter those nodes on",
    "start": "760000",
    "end": "765680"
  },
  {
    "text": "a type so in this case uh it's a method declaration syntax so the result of this will be all the",
    "start": "765680",
    "end": "772320"
  },
  {
    "text": "children that are of this specific type and then we can",
    "start": "772320",
    "end": "778240"
  },
  {
    "text": "do a count of all the methods where the identifier and the identifier",
    "start": "778240",
    "end": "784079"
  },
  {
    "text": "is the bit of the tree that describes the name it has a text property",
    "start": "784079",
    "end": "789600"
  },
  {
    "text": "and this is just the method name so this will return all the number of the count of the number of methods where",
    "start": "789600",
    "end": "796160"
  },
  {
    "text": "the name is equal to greeting if that is greater than one um",
    "start": "796160",
    "end": "801440"
  },
  {
    "text": "method overloading must be used so if we run this again we should get a",
    "start": "801440",
    "end": "807360"
  },
  {
    "text": "comment that the student uses method overloading but that an optional parameter can be used and",
    "start": "807360",
    "end": "813200"
  },
  {
    "text": "indeed that's what we see here so we gotta first analyze him relatively quick",
    "start": "813200",
    "end": "819199"
  },
  {
    "text": "at this point the student will get a message that there was a comment from a mentor or from an automated analyzer and",
    "start": "819199",
    "end": "826240"
  },
  {
    "text": "usually the student then fixes the issue so the way this this student decided to fix",
    "start": "826240",
    "end": "831839"
  },
  {
    "text": "it is by making the name parameter optional and adding the null as the default value and then adding",
    "start": "831839",
    "end": "839120"
  },
  {
    "text": "this check so this becomes like this and student moved this",
    "start": "839120",
    "end": "846079"
  },
  {
    "text": "to here and this removes the method overloading bit so running it",
    "start": "846079",
    "end": "851519"
  },
  {
    "text": "again would not trigger the method again the message all right nice",
    "start": "851519",
    "end": "858000"
  },
  {
    "text": "so the second thing that i would suggest uh to the student here is that instead of using no the default",
    "start": "858000",
    "end": "863600"
  },
  {
    "text": "value is actually you so it's a string lateral that you can use so if users know as default",
    "start": "863600",
    "end": "872240"
  },
  {
    "text": "value let's output another message please use a string",
    "start": "872240",
    "end": "880399"
  },
  {
    "text": "literal as the default value and let's see how we can detect that",
    "start": "880399",
    "end": "888560"
  },
  {
    "text": "um we know at this point i could be doing a return here but i want for just for gravity that",
    "start": "888560",
    "end": "896000"
  },
  {
    "text": "the method has a greeting method because we are guaranteed that before this analyzer runs",
    "start": "896000",
    "end": "901120"
  },
  {
    "text": "all the tests are passing so we can make some assumptions there and the beginning is thus very similar",
    "start": "901120",
    "end": "909440"
  },
  {
    "text": "we'll look for the greeting method so once again we find all the methods and then we find",
    "start": "909440",
    "end": "914480"
  },
  {
    "text": "the one method which name oops method.identifier.text",
    "start": "914480",
    "end": "923360"
  },
  {
    "text": "equals greeting so this finds the one method declaration that has the name greeting",
    "start": "923360",
    "end": "929839"
  },
  {
    "text": "so let's call this greeting method and as i said we are interested in",
    "start": "929839",
    "end": "935759"
  },
  {
    "text": "looking at the default value so what we can do is we can go back to the",
    "start": "935759",
    "end": "941440"
  },
  {
    "text": "syntax visualizer but we can also start by just looking at the properties of the class and there are lots of things here",
    "start": "941440",
    "end": "948959"
  },
  {
    "text": "and some of them you will probably recognize like body um or expression but there's also a",
    "start": "948959",
    "end": "954480"
  },
  {
    "text": "parameter list and we are we're interested in parameters so let's look into that property it itself has um",
    "start": "954480",
    "end": "962079"
  },
  {
    "text": "the opening in the closing parenthesis but it also has parameters and we can do get access by them by",
    "start": "962079",
    "end": "968720"
  },
  {
    "text": "index so this is the first parameter and then what's there hey there's a default and this of type equals value",
    "start": "968720",
    "end": "975839"
  },
  {
    "text": "clause syntax oh now things are getting a little bit complex so what we sorry what we can do is we can parse",
    "start": "975839",
    "end": "982720"
  },
  {
    "text": "this back here and see what the representation is of the name equals",
    "start": "982720",
    "end": "990160"
  },
  {
    "text": "null bit so we have a parameter this is the equals failure clause hey and this is a null literal",
    "start": "990160",
    "end": "996800"
  },
  {
    "text": "expression this looks like the thing that we're looking for um it's type is a literal expression",
    "start": "996800",
    "end": "1002240"
  },
  {
    "text": "syntax so what this means is you don't just have no literal expressions you can also have string",
    "start": "1002240",
    "end": "1008000"
  },
  {
    "text": "literal expression etc and they are described by the same clause the way that you can differentiate between them is by",
    "start": "1008000",
    "end": "1014880"
  },
  {
    "text": "looking at their kind and the kind is just a big enum with all the different options so we have to find check if it's a",
    "start": "1014880",
    "end": "1021519"
  },
  {
    "text": "literal expression syntax where the kind is a null literal expression so let's do that we can go back",
    "start": "1021519",
    "end": "1029839"
  },
  {
    "text": "so we can do if the default is a literal",
    "start": "1029839",
    "end": "1036079"
  },
  {
    "text": "expression syntax and we'll assign it to the value literal and the literals kind",
    "start": "1036079",
    "end": "1043280"
  },
  {
    "text": "is equal to syntax kind dot no literal expression",
    "start": "1043280",
    "end": "1049520"
  },
  {
    "text": "then it must be using as its parameters default value sorry dot value",
    "start": "1049520",
    "end": "1057440"
  },
  {
    "text": "and no literal expression so if we run this the second case should hit it so let's see that",
    "start": "1057440",
    "end": "1065360"
  },
  {
    "text": "all right please use a string literal as a default value all right we're being a good citizen",
    "start": "1065360",
    "end": "1071039"
  },
  {
    "text": "again and we'll just do this and already the student is really happy because it's starting to look very",
    "start": "1071039",
    "end": "1077039"
  },
  {
    "text": "nice and concise and usually my next point would be to look into using string interpolation because i",
    "start": "1077039",
    "end": "1084799"
  },
  {
    "text": "personally really like it and i think it makes it a little bit more concise um if does not use",
    "start": "1084799",
    "end": "1092400"
  },
  {
    "text": "string interpolation",
    "start": "1092400",
    "end": "1096640"
  },
  {
    "text": "please use string interpolation to format the return string",
    "start": "1097520",
    "end": "1106880"
  },
  {
    "text": "all right we'll do a little bit of copy pasting",
    "start": "1106880",
    "end": "1113600"
  },
  {
    "text": "here uh we won't do any refactoring or whatever we can do later if we would like that and we'll grab the same method reference",
    "start": "1113600",
    "end": "1120240"
  },
  {
    "text": "and now what we want is to see if any of the we can we can make this as fancy as we would like but we'll do it very simple",
    "start": "1120240",
    "end": "1126799"
  },
  {
    "text": "check we'll just check any of its descended nodes or any of its the children of the",
    "start": "1126799",
    "end": "1132000"
  },
  {
    "text": "method so any of its statements um is of type and then we have to find out",
    "start": "1132000",
    "end": "1138320"
  },
  {
    "text": "the type we could go back to the syntax visualizer or to the russell encoder",
    "start": "1138320",
    "end": "1143919"
  },
  {
    "text": "but you can also just try what if i just do interpolated o there are several um",
    "start": "1143919",
    "end": "1151360"
  },
  {
    "text": "you can try you can just also debug and see what the descendant notes are",
    "start": "1151360",
    "end": "1156640"
  },
  {
    "text": "in this case i know it's a interpolated string expression syntax it's a long name and if there aren't",
    "start": "1156640",
    "end": "1164240"
  },
  {
    "text": "if there are not any so this method returns true if there aren't",
    "start": "1164240",
    "end": "1169280"
  },
  {
    "text": "any uh notes in the tree in the tree of the greeting method which",
    "start": "1169280",
    "end": "1174720"
  },
  {
    "text": "itself is subtree and that have the type interpolated string it will return true",
    "start": "1174720",
    "end": "1180080"
  },
  {
    "text": "so if we run this it won't detect any of the string interpolation types because there",
    "start": "1180080",
    "end": "1185360"
  },
  {
    "text": "aren't any and it will return the message so fixing this we can do it really",
    "start": "1185360",
    "end": "1191200"
  },
  {
    "text": "easily because there is built-in conversion um like this",
    "start": "1191200",
    "end": "1196799"
  },
  {
    "text": "and this fixes the issue yep and oh",
    "start": "1196799",
    "end": "1204640"
  },
  {
    "text": "and i say oh i did the wrong thing sorry there i meant to do this so there was a little",
    "start": "1204640",
    "end": "1210400"
  },
  {
    "text": "spoiler for the next session all right",
    "start": "1210400",
    "end": "1215440"
  },
  {
    "text": "and it works so i you probably have guessed the final thing that i would like to detect is using an expression body because i",
    "start": "1217280",
    "end": "1223760"
  },
  {
    "text": "really like that it's a single line method um not everybody likes them if",
    "start": "1223760",
    "end": "1229600"
  },
  {
    "text": "you can use expression body so i'll have to be i'll be a little bit gentle in my",
    "start": "1229600",
    "end": "1235200"
  },
  {
    "text": "message so consider using an expression body",
    "start": "1235200",
    "end": "1240480"
  },
  {
    "text": "this is i found that people get really religious about this so um i'll try and make it a suggestion",
    "start": "1240480",
    "end": "1247600"
  },
  {
    "text": "more than the rest so let's copy paste this again and then we can just drill into the",
    "start": "1247600",
    "end": "1255039"
  },
  {
    "text": "properties again and see what it looks like so tons of properties here um the thing",
    "start": "1255039",
    "end": "1260240"
  },
  {
    "text": "that we are interested in is either a body or an expression body and the way that the wrestling works is",
    "start": "1260240",
    "end": "1267280"
  },
  {
    "text": "that a method can have either curly braces and then the body is set an expression body is null or it can be",
    "start": "1267280",
    "end": "1273200"
  },
  {
    "text": "an expression body and expression body is said and body is now so in this case",
    "start": "1273200",
    "end": "1278240"
  },
  {
    "text": "what we want to check if the body is not known so it has a body and if you might recall",
    "start": "1278240",
    "end": "1285840"
  },
  {
    "text": "expression bodies only are allowed when there is a single statement so let's see",
    "start": "1285840",
    "end": "1290880"
  },
  {
    "text": "what we can do there and um the thing that i'm trying to get across is that just by dotting into the",
    "start": "1290880",
    "end": "1298240"
  },
  {
    "text": "the classes and the instance of the class you are probably really getting along with uh",
    "start": "1298240",
    "end": "1304559"
  },
  {
    "text": "with the tree so the there is a statements list and we can just do if the count",
    "start": "1304559",
    "end": "1311440"
  },
  {
    "text": "equals one and this speaks to how well designed",
    "start": "1311440",
    "end": "1316640"
  },
  {
    "text": "rosman is because i find this relatively intuitive body.statement.com",
    "start": "1316640",
    "end": "1323120"
  },
  {
    "text": "this almost reads like pros so let's run it it's also good that it's",
    "start": "1323120",
    "end": "1332000"
  },
  {
    "text": "very nicely designed because the documentation can sometimes be a little bit lagging",
    "start": "1332000",
    "end": "1337520"
  },
  {
    "text": "and now let's use this refactoring and run it again and we shouldn't have any comments all",
    "start": "1337520",
    "end": "1345840"
  },
  {
    "text": "right so um with relatively little code um there's a lot of duplication here",
    "start": "1345840",
    "end": "1351360"
  },
  {
    "text": "that we could eliminate we were able to guide the students from a solution that used",
    "start": "1351360",
    "end": "1357360"
  },
  {
    "text": "10-ish 12-ish lines to a single line solution that i think is really pretty and concise and",
    "start": "1357360",
    "end": "1364480"
  },
  {
    "text": "we can apply this to more complex scenarios too but for this case something relatively easy would also be",
    "start": "1364480",
    "end": "1371919"
  },
  {
    "text": "very helpful to us and that mentors wouldn't have to comment on them again",
    "start": "1371919",
    "end": "1377440"
  },
  {
    "text": "so this is the first tool and that we've done so i'm gonna unload this project",
    "start": "1377440",
    "end": "1383120"
  },
  {
    "text": "and move on to the next one and the next tool is the representer and the goal of the",
    "start": "1383120",
    "end": "1389760"
  },
  {
    "text": "representer is to take a student's solution and to somehow create a representation",
    "start": "1389760",
    "end": "1394960"
  },
  {
    "text": "of it that and we can then look at the representation to compare solutions so if 10 solutions",
    "start": "1394960",
    "end": "1402240"
  },
  {
    "text": "that are identical they should have the identical representation and if 10 solutions are",
    "start": "1402240",
    "end": "1408159"
  },
  {
    "text": "almost identical for example they're only different in white space they should still have the same representation and this will allow us to",
    "start": "1408159",
    "end": "1415760"
  },
  {
    "text": "comment on the representation once and then have it applied to all the solutions so this is a big win",
    "start": "1415760",
    "end": "1421600"
  },
  {
    "text": "for us the way this exercise works is it's slightly different it's a test about",
    "start": "1421600",
    "end": "1427440"
  },
  {
    "text": "a leap year and we're not really interested in the test now so let's just open the solution that the",
    "start": "1427440",
    "end": "1433440"
  },
  {
    "text": "students submitted so this is the solution it's a completely working solution it",
    "start": "1433440",
    "end": "1439520"
  },
  {
    "text": "passes all the tests and only the formatting is a bit inconsistent so there are two",
    "start": "1439520",
    "end": "1445360"
  },
  {
    "text": "spaces here there are lots of empty lines here the curly brace is on the same line here the opening and the opening is on the",
    "start": "1445360",
    "end": "1451200"
  },
  {
    "text": "new line here so lots of things here that if we didn't do anything about the code will",
    "start": "1451200",
    "end": "1457440"
  },
  {
    "text": "mean that they won't be equal so the representative is very",
    "start": "1457440",
    "end": "1463520"
  },
  {
    "text": "similar to the analyzer at its core so we have the same package reference and it's also just a",
    "start": "1463520",
    "end": "1468720"
  },
  {
    "text": "console application and i've stopped out a little bit and",
    "start": "1468720",
    "end": "1473919"
  },
  {
    "text": "it's the same basically as the previous one where i read the the contents of the implementation file",
    "start": "1473919",
    "end": "1480480"
  },
  {
    "text": "so that's the exercise and i parse it to a tree and get it root so we have",
    "start": "1480480",
    "end": "1486400"
  },
  {
    "text": "the root here and the next step we have is to somehow write this to a representation a",
    "start": "1486400",
    "end": "1493200"
  },
  {
    "text": "representation you can think of also as a hash so i have a path representation is a",
    "start": "1493200",
    "end": "1498799"
  },
  {
    "text": "single file and we'll just name it representation.txt so how do we",
    "start": "1498799",
    "end": "1504400"
  },
  {
    "text": "uh put our root into the file well as it turns out rosslyn has a",
    "start": "1504400",
    "end": "1509520"
  },
  {
    "text": "really interesting and nice feature where it not only allows you to parse c-sharp source code to",
    "start": "1509520",
    "end": "1515520"
  },
  {
    "text": "an in-memory representation of that but it can also convert back to source code so any node you have in your tree you",
    "start": "1515520",
    "end": "1522480"
  },
  {
    "text": "can convert back to c-sharp source code not every compiler does this but rosin does and that's really",
    "start": "1522480",
    "end": "1528720"
  },
  {
    "text": "nice and i can show you how it works by doing file.right alt text representation",
    "start": "1528720",
    "end": "1535039"
  },
  {
    "text": "file so we'll write into the file and it will be here in a minute and then what we can do is we have the root node and the root",
    "start": "1535039",
    "end": "1541200"
  },
  {
    "text": "node is a syntax node of type compilation unit syntax although we don't care about that",
    "start": "1541200",
    "end": "1546880"
  },
  {
    "text": "and if we do to string it's basically a back and forth so we're now parsing it to rosin's representation and",
    "start": "1546880",
    "end": "1553200"
  },
  {
    "text": "back to source code and if we run this application we should be seeing a representation created here",
    "start": "1553200",
    "end": "1560880"
  },
  {
    "text": "and we do and you are probably not surprised that if i open this it is the exact same contents",
    "start": "1564400",
    "end": "1572240"
  },
  {
    "text": "except for the ide hints as the source because we didn't do anything but this in itself is already really",
    "start": "1572240",
    "end": "1578240"
  },
  {
    "text": "useful and this is also why roslyn stores the trivia the white space etc",
    "start": "1578240",
    "end": "1584159"
  },
  {
    "text": "because many syntax trees for other languages don't include the trivia and that means that you can't go back to",
    "start": "1584159",
    "end": "1590640"
  },
  {
    "text": "where you're from because you're losing knowledge so um let's try and fix some things",
    "start": "1590640",
    "end": "1596960"
  },
  {
    "text": "about the representation try and normalize it so the first thing that i would like to do is because i'm ocd i would really like to",
    "start": "1596960",
    "end": "1602960"
  },
  {
    "text": "normalize everything so white space usage etc placing of curly braces",
    "start": "1602960",
    "end": "1608000"
  },
  {
    "text": "and you might be thinking that this could be the rest of the talk but you've been mistaken because it's",
    "start": "1608000",
    "end": "1613520"
  },
  {
    "text": "just a single method any syntax node you can call normalize white space and let's just run it and",
    "start": "1613520",
    "end": "1619760"
  },
  {
    "text": "see what it does to our representation",
    "start": "1619760",
    "end": "1625919"
  },
  {
    "text": "isn't that great so with just a single method called roslyn was able to normalize the code according to its",
    "start": "1625919",
    "end": "1632080"
  },
  {
    "text": "built-in standards coding styles so already it's looking much better",
    "start": "1632080",
    "end": "1637520"
  },
  {
    "text": "and the next thing that i would like to remove from the representation is the using statements",
    "start": "1637520",
    "end": "1644159"
  },
  {
    "text": "students could use could have opened using statements that are unused etc and normally we are not in the habit of",
    "start": "1644159",
    "end": "1650240"
  },
  {
    "text": "commenting on using statements and we already know that solution passes the test so it's",
    "start": "1650240",
    "end": "1655279"
  },
  {
    "text": "all good let's just remove them from the representation how would we go about doing it um well",
    "start": "1655279",
    "end": "1663279"
  },
  {
    "text": "what we can do is there is a property on the root that's called remove nodes and then we",
    "start": "1663279",
    "end": "1668960"
  },
  {
    "text": "pass in a an innumerable node so we can reuse what we just learned about",
    "start": "1668960",
    "end": "1675600"
  },
  {
    "text": "having a descended nodes property and then filtering by type and the type",
    "start": "1675600",
    "end": "1681840"
  },
  {
    "text": "of using statement let's just do a quick",
    "start": "1681840",
    "end": "1686000"
  },
  {
    "text": "let's put this here whoops sorry so let's put this here save it and then",
    "start": "1687520",
    "end": "1695279"
  },
  {
    "text": "dig into this a little bit so we can see that it's a using directive and the class is using directed syntax",
    "start": "1695279",
    "end": "1702080"
  },
  {
    "text": "okay so going back it has the type using directive syntax and then we have",
    "start": "1702080",
    "end": "1709840"
  },
  {
    "text": "to supply a second parameter and there are many options here which i won't bother you with but let's just do the first one because it works",
    "start": "1709840",
    "end": "1716399"
  },
  {
    "text": "well and let's run it and see what happens to our representation",
    "start": "1716399",
    "end": "1725840"
  },
  {
    "text": "oh nothing happened so why is that this is actually expected so one really",
    "start": "1726640",
    "end": "1732960"
  },
  {
    "text": "interesting property of rosin is that it's completely immutable the whole tree every note is immutable",
    "start": "1732960",
    "end": "1738960"
  },
  {
    "text": "which means that once a tree is created it can never mutate it's immutable you cannot change things",
    "start": "1738960",
    "end": "1745440"
  },
  {
    "text": "except by creating a new tree with modifications so removing the nodes did remove nodes",
    "start": "1745440",
    "end": "1752000"
  },
  {
    "text": "but it didn't remove them in the source it actually returned a new tree so",
    "start": "1752000",
    "end": "1757520"
  },
  {
    "text": "if we call the new tree representation and then use that to write out our code again then we",
    "start": "1757520",
    "end": "1764960"
  },
  {
    "text": "shall be seeing results",
    "start": "1764960",
    "end": "1768240"
  },
  {
    "text": "so this is a very important property uh in roslin that you should really be aware of you cannot just mutate a bit of the tree",
    "start": "1771120",
    "end": "1779360"
  },
  {
    "text": "you have to create a new instance of the tree and the reason for this is um for concurrency issues mostly",
    "start": "1779360",
    "end": "1787840"
  },
  {
    "text": "because if everything's immutable you don't have logging because you can't have multiple threads accessing the same notes at the same",
    "start": "1787840",
    "end": "1794080"
  },
  {
    "text": "time which makes it great for the ide itself because it will be doing in things in the background",
    "start": "1794080",
    "end": "1799440"
  },
  {
    "text": "etc so it's really it's a tough to implement you have to be",
    "start": "1799440",
    "end": "1805200"
  },
  {
    "text": "very diligent about it but the end result is something that's really nice i mean the performance is",
    "start": "1805200",
    "end": "1810559"
  },
  {
    "text": "also still good so um something that's immutable doesn't have to be bad performing but it's something that",
    "start": "1810559",
    "end": "1817039"
  },
  {
    "text": "you always have to keep in mind when working with roslin and syntax trees they are immutable all right",
    "start": "1817039",
    "end": "1823919"
  },
  {
    "text": "so while this works um there is a nicer way to do these uh i want to modify some parts of",
    "start": "1823919",
    "end": "1831279"
  },
  {
    "text": "the syntax tree functionality so the way that you can also do this",
    "start": "1831279",
    "end": "1836399"
  },
  {
    "text": "is by having a class and we'll call it remove usings and have it inherit from c-sharp syntax",
    "start": "1836399",
    "end": "1843200"
  },
  {
    "text": "rewriter so the idea of the c-sharp syntax rewriter is that for every type of node or token",
    "start": "1843200",
    "end": "1850240"
  },
  {
    "text": "that you have in the tree you have a method that you can override and you can basically say hey i want to do something special",
    "start": "1850240",
    "end": "1856880"
  },
  {
    "text": "with this node.token and the c syntax rewriter will automatically",
    "start": "1856880",
    "end": "1862080"
  },
  {
    "text": "visit the tree in the right order etc it will do all sorts of things from you and will return the correct",
    "start": "1862080",
    "end": "1867760"
  },
  {
    "text": "tree so th this example we can rewrite as follows",
    "start": "1867760",
    "end": "1873120"
  },
  {
    "text": "so we start with overriding that's always the case with the c sharp syntax rewriter and then it's visit and then it's the",
    "start": "1873120",
    "end": "1879279"
  },
  {
    "text": "type of the syntax node now we were using a using directive",
    "start": "1879279",
    "end": "1885200"
  },
  {
    "text": "so we'll overwrite this method and instead of doing just the built-in functionality we can",
    "start": "1885200",
    "end": "1891919"
  },
  {
    "text": "return no and you can see that the syntax node is nullable so if we do",
    "start": "1891919",
    "end": "1899039"
  },
  {
    "text": "new remove using and then you do visit so you can call uh",
    "start": "1899039",
    "end": "1905760"
  },
  {
    "text": "tons of methods if you have a specific node but we now have the root node which is just of type",
    "start": "1905760",
    "end": "1911039"
  },
  {
    "text": "syntax node so if we pass in the root here we get back uh a new root node",
    "start": "1911039",
    "end": "1919200"
  },
  {
    "text": "with the updated representation so let's run this again and it should still remove the using",
    "start": "1919200",
    "end": "1927518"
  },
  {
    "text": "and it works that's nice and personally i really like this feature um it's a little bit more chord now but",
    "start": "1929039",
    "end": "1936080"
  },
  {
    "text": "if you try to do more complex things this method really shines and let's try to do some more",
    "start": "1936080",
    "end": "1942159"
  },
  {
    "text": "and we'll use this method for the rest of the the case um one obvious thing to remove are the",
    "start": "1942159",
    "end": "1948799"
  },
  {
    "text": "comments so we have xml documentation code we have multi-line comments and single",
    "start": "1948799",
    "end": "1953919"
  },
  {
    "text": "line comments so let's do class remove comments",
    "start": "1953919",
    "end": "1961760"
  },
  {
    "text": "and also have it inherit from the syntax rewriter and if you remember from the slides",
    "start": "1961760",
    "end": "1968720"
  },
  {
    "text": "uh comments are things that are not compiled so they're only there in the source code but not for compilation purposes and everything",
    "start": "1968720",
    "end": "1975440"
  },
  {
    "text": "that's not for compilation purposes like white space and comments is named trivia",
    "start": "1975440",
    "end": "1980640"
  },
  {
    "text": "so what we can do is we can overwrite visit trivia and we can't just return no",
    "start": "1980640",
    "end": "1987600"
  },
  {
    "text": "because well for two cases for two reasons syntax trivia is a struct so we can't return now and if it was uh",
    "start": "1987600",
    "end": "1994559"
  },
  {
    "text": "we would also be removing all of the white space which i don't want i'll just want to remove the",
    "start": "1994559",
    "end": "2001120"
  },
  {
    "text": "syntax of the comments so what we can do is trivia dot is kind this is a syntax",
    "start": "2001120",
    "end": "2008880"
  },
  {
    "text": "uh token and they also have the kind property that we saw before so we can do syntax",
    "start": "2008880",
    "end": "2015279"
  },
  {
    "text": "kind and then we can just do comments and we find several things",
    "start": "2015279",
    "end": "2020320"
  },
  {
    "text": "um let's try single line comment trivia and if that is the case well we can't",
    "start": "2020320",
    "end": "2026559"
  },
  {
    "text": "return null but we can return just default and here we can do base dots",
    "start": "2026559",
    "end": "2032240"
  },
  {
    "text": "visit trivia and this will just do the regular uh functionality we only have a special",
    "start": "2032240",
    "end": "2038480"
  },
  {
    "text": "case for the single line comments so we'll just duplicate this line",
    "start": "2038480",
    "end": "2044799"
  },
  {
    "text": "add the call to the remove methods rewrite it run it again and we should be seeing",
    "start": "2044799",
    "end": "2050240"
  },
  {
    "text": "that this single line comment is removed",
    "start": "2050240",
    "end": "2054398"
  },
  {
    "text": "and like that it's gone so adding the others is very simple and",
    "start": "2055599",
    "end": "2062960"
  },
  {
    "text": "you've probably already guessed parts of it so this is a multi-line comment trivia",
    "start": "2062960",
    "end": "2070480"
  },
  {
    "text": "and there is also um sing online documentation comment trivia",
    "start": "2070480",
    "end": "2078960"
  },
  {
    "text": "so it's quite for both but it does specify well what it's doing so run it again",
    "start": "2078960",
    "end": "2086960"
  },
  {
    "text": "and we'll get rid of all the comments",
    "start": "2086960",
    "end": "2090960"
  },
  {
    "text": "all right very nice um another thing that struck me when i looked at this code was",
    "start": "2093280",
    "end": "2098960"
  },
  {
    "text": "that some of the variables are defined using the var keyword and others just by the type",
    "start": "2098960",
    "end": "2105520"
  },
  {
    "text": "so um what we can do is we can just use var everywhere so let's try that",
    "start": "2105520",
    "end": "2112640"
  },
  {
    "text": "i'm a huge far fan too so that suits my purposes use var as type",
    "start": "2112640",
    "end": "2120960"
  },
  {
    "text": "in this case it might be useful to see what is the syntax for variables oh sorry that was",
    "start": "2121119",
    "end": "2128560"
  },
  {
    "text": "the wrong and we'll go here and we'll click on the bool and examine what its tree looks like so",
    "start": "2128560",
    "end": "2136720"
  },
  {
    "text": "bull is part of the variable declaration and the variable declaration is of type variable declaration syntax all right so",
    "start": "2136720",
    "end": "2144880"
  },
  {
    "text": "we can work with that and the difference between a bull the fire declaration of var is",
    "start": "2144880",
    "end": "2150960"
  },
  {
    "text": "that in for avar the type is an identifier name and identify name is just a bit of",
    "start": "2150960",
    "end": "2156640"
  },
  {
    "text": "string in this case so far so let's see if we can work with that",
    "start": "2156640",
    "end": "2163680"
  },
  {
    "text": "go back to our rewriting overrides variable declaration and then",
    "start": "2163680",
    "end": "2170800"
  },
  {
    "text": "we'll look at the node dot and type so you might be thinking",
    "start": "2170800",
    "end": "2177599"
  },
  {
    "text": "hey let's do node.type equals and then do something so we can do that because well roslyn is",
    "start": "2177599",
    "end": "2184480"
  },
  {
    "text": "immutable so there is no way to set a property on the node so for everything that you",
    "start": "2184480",
    "end": "2190000"
  },
  {
    "text": "can modify roslyn has withers so there are methods that starting with",
    "start": "2190000",
    "end": "2195440"
  },
  {
    "text": "width and then the property that you can modify so there is a way that we can",
    "start": "2195440",
    "end": "2200480"
  },
  {
    "text": "change the node and have it use a different type all right so we can pass in a type",
    "start": "2200480",
    "end": "2206079"
  },
  {
    "text": "syntax there um you might be thinking",
    "start": "2206079",
    "end": "2210880"
  },
  {
    "text": "oh sorry [Music] so you might be thinking how can we",
    "start": "2212000",
    "end": "2218240"
  },
  {
    "text": "create that um and it's actually not done by just doing this just moving up",
    "start": "2218240",
    "end": "2226400"
  },
  {
    "text": "things so what you do is there is a syntax factory and the syntax factory is",
    "start": "2226400",
    "end": "2233680"
  },
  {
    "text": "just a static class with many many many uh properties and there",
    "start": "2233680",
    "end": "2238960"
  },
  {
    "text": "are types everywhere so let's just for to see what it looks like",
    "start": "2238960",
    "end": "2247839"
  },
  {
    "text": "do a little debugging",
    "start": "2247839",
    "end": "2250880"
  },
  {
    "text": "just to give you an idea of what all the properties are so variable declaration syntax and you",
    "start": "2253520",
    "end": "2260000"
  },
  {
    "text": "can see here that the the two string method also works on individual notes so this is a nice way of declaring the",
    "start": "2260000",
    "end": "2267599"
  },
  {
    "text": "boolean and there are many many properties and we can see here that there is the type",
    "start": "2267599",
    "end": "2274160"
  },
  {
    "text": "which is the predefined type syntax and if we continue the type is oops",
    "start": "2274160",
    "end": "2282240"
  },
  {
    "text": "where is the type yeah the type is here and now it's identifier name syntax",
    "start": "2282240",
    "end": "2287359"
  },
  {
    "text": "so that's the one we want so the type should be identifier name syntax so with type syntax factory",
    "start": "2287359",
    "end": "2296160"
  },
  {
    "text": "dot a name and then we can just pass in the string so just to make it",
    "start": "2296160",
    "end": "2302560"
  },
  {
    "text": "very clear what's happening this is a new variable declaration type so",
    "start": "2302560",
    "end": "2311760"
  },
  {
    "text": "we basically create a copy of the existing one and then have one property modified",
    "start": "2311760",
    "end": "2316880"
  },
  {
    "text": "in this case the type property is modified to the identifier name and if we now run this",
    "start": "2316880",
    "end": "2324079"
  },
  {
    "text": "we should be changing our boolean variable to avar",
    "start": "2324079",
    "end": "2329280"
  },
  {
    "text": "all right so i guess i right oh i have a slight mistake here",
    "start": "2332880",
    "end": "2340400"
  },
  {
    "text": "let's fix that my bad easy fix and now",
    "start": "2340400",
    "end": "2347040"
  },
  {
    "text": "the comments should be moving the virus all right yeah so this is nice um let's look at another thing that we",
    "start": "2347040",
    "end": "2353119"
  },
  {
    "text": "can do this if statement uses curly braces and this statement doesn't so",
    "start": "2353119",
    "end": "2360079"
  },
  {
    "text": "functionality wise there is no difference but syntax wise it will result in two different representations for us if we",
    "start": "2360079",
    "end": "2366640"
  },
  {
    "text": "just upload this so let's add a add curly braces if there aren't any",
    "start": "2366640",
    "end": "2372400"
  },
  {
    "text": "so we're doing that with another rewriter and if add braces",
    "start": "2372400",
    "end": "2379280"
  },
  {
    "text": "to if for else statements make a c-sharp syntax",
    "start": "2379280",
    "end": "2385200"
  },
  {
    "text": "rewriter and well let's just do visit if and there are just a couple of",
    "start": "2385200",
    "end": "2392240"
  },
  {
    "text": "matches so usually this is just enough to figure out where you got to go and then",
    "start": "2392240",
    "end": "2398800"
  },
  {
    "text": "let's see what we can do so if we go back to visual studio and we'll look at what the",
    "start": "2398800",
    "end": "2405760"
  },
  {
    "text": "format is of this if statement so this is an if statement and it has a block",
    "start": "2405760",
    "end": "2411440"
  },
  {
    "text": "and if we go back here we can see that the block itself is the bit between",
    "start": "2411440",
    "end": "2416480"
  },
  {
    "text": "curly braces and if we go to here we can see it doesn't have a block it's just directly a return statement",
    "start": "2416480",
    "end": "2423680"
  },
  {
    "text": "so we check for the node and if you don't know which property you",
    "start": "2423680",
    "end": "2430560"
  },
  {
    "text": "can also do with just to get a grasp of the things that you can change and in this case it's not the condition",
    "start": "2430560",
    "end": "2436880"
  },
  {
    "text": "because that's the boolean part it is the statement so if the statement",
    "start": "2436880",
    "end": "2442480"
  },
  {
    "text": "is a block syntax that means it's an if statement that",
    "start": "2442480",
    "end": "2447839"
  },
  {
    "text": "already has the curly braces we can just continue in the other case",
    "start": "2447839",
    "end": "2453440"
  },
  {
    "text": "it doesn't have block statements so how can we add those well we can modify it directly so we",
    "start": "2453440",
    "end": "2459839"
  },
  {
    "text": "have to use one of the width methods we can do with statement and the we want to basically wrap the",
    "start": "2459839",
    "end": "2466079"
  },
  {
    "text": "existing statement in a block so we do syntax factory dot",
    "start": "2466079",
    "end": "2472720"
  },
  {
    "text": "block and the block can take any statement so we can pass the existing nodes statement so we're",
    "start": "2472720",
    "end": "2479200"
  },
  {
    "text": "basically wrapping the existing statement in a block and then using that as the statement for the new node",
    "start": "2479200",
    "end": "2485040"
  },
  {
    "text": "and let's see what that looks like",
    "start": "2485040",
    "end": "2489520"
  },
  {
    "text": "and we should be seeing something here and now it has braces so you can see",
    "start": "2492560",
    "end": "2498240"
  },
  {
    "text": "very little code for things that might look complex um let's do the else just to",
    "start": "2498240",
    "end": "2506000"
  },
  {
    "text": "get it out of the way and to show you that russian is really well designed and it",
    "start": "2506000",
    "end": "2511359"
  },
  {
    "text": "has lots of symmetry where you expect it to be so we can we use the exact same code and",
    "start": "2511359",
    "end": "2517680"
  },
  {
    "text": "russian doesn't go overboard with inheritance so many things that you might think are inheriting from each",
    "start": "2517680",
    "end": "2522800"
  },
  {
    "text": "other aren't which is a good a good thing i uh i feel so in this case the else clause doesn't",
    "start": "2522800",
    "end": "2529440"
  },
  {
    "text": "have anything to do with the if step except for some very higher base class",
    "start": "2529440",
    "end": "2534720"
  },
  {
    "text": "and you just have to do a bit of code of copying but that works nicely i think",
    "start": "2534720",
    "end": "2541200"
  },
  {
    "text": "all right and the else is added to so let me be very quick for the last one",
    "start": "2543680",
    "end": "2550800"
  },
  {
    "text": "so one obvious thing that we found that students do is change variable names or parameter names",
    "start": "2550800",
    "end": "2556800"
  },
  {
    "text": "so if we supply them with the gear parameter they might rename it but renaming the parameter doesn't have",
    "start": "2556800",
    "end": "2562319"
  },
  {
    "text": "any influence on the actual representation because this was the exact same code",
    "start": "2562319",
    "end": "2567599"
  },
  {
    "text": "except for the name so let's see if we can normalize that normalize identifiers",
    "start": "2567599",
    "end": "2574800"
  },
  {
    "text": "and this time we need a little bit of state so what we want is that each time we have a parameter definition um we have to do",
    "start": "2574960",
    "end": "2583280"
  },
  {
    "text": "something with it so let's start with overriding the visit parameter method a",
    "start": "2583280",
    "end": "2588960"
  },
  {
    "text": "parameter has an identifier line property which is the name of the parameter and that has a text property",
    "start": "2588960",
    "end": "2596160"
  },
  {
    "text": "so let's keep track of the there's a dictionary of string of",
    "start": "2596160",
    "end": "2602800"
  },
  {
    "text": "string that maps the old identifier so the original parameter name and maps it to a normalized one",
    "start": "2602800",
    "end": "2610160"
  },
  {
    "text": "called this mapping dictionary so we can do mapping dot try add",
    "start": "2610160",
    "end": "2618079"
  },
  {
    "text": "and then copy in the original name of the parameter and then as the",
    "start": "2618079",
    "end": "2623359"
  },
  {
    "text": "new value we can do something like identifier and just well make it easy",
    "start": "2623359",
    "end": "2628960"
  },
  {
    "text": "and do the number of existing ones in it and then",
    "start": "2628960",
    "end": "2634480"
  },
  {
    "text": "we can this doesn't really do anything except keep track of it and so we want to modify the parameter",
    "start": "2634480",
    "end": "2640560"
  },
  {
    "text": "itself too so we can do nodes with identify and then do syntax factory",
    "start": "2640560",
    "end": "2646880"
  },
  {
    "text": "dot identifying name and then passing oh this is not identifying name this is an",
    "start": "2646880",
    "end": "2652079"
  },
  {
    "text": "identifier and then we have to do mapping",
    "start": "2652079",
    "end": "2657839"
  },
  {
    "text": "so basically what we're getting here is the new version of the parameter name the normalized one which is equal to this",
    "start": "2658880",
    "end": "2666000"
  },
  {
    "text": "so if we run this and we have to add it here",
    "start": "2666000",
    "end": "2671599"
  },
  {
    "text": "let's see what the representation does and it has changed the parameter um well this doesn't really do much",
    "start": "2674319",
    "end": "2680640"
  },
  {
    "text": "except uh now we didn't change the actual usage of the parameter so we have to change that",
    "start": "2680640",
    "end": "2687440"
  },
  {
    "text": "too and the way we can do that is by overwriting anytime a an identifier is",
    "start": "2687440",
    "end": "2695680"
  },
  {
    "text": "found visit identify name so we can then do mapping dot",
    "start": "2695680",
    "end": "2702400"
  },
  {
    "text": "try get value to see if there is a map identifier for this identifier's",
    "start": "2702400",
    "end": "2709520"
  },
  {
    "text": "name and if there is we can i'll put it in the map identifier",
    "start": "2709520",
    "end": "2715119"
  },
  {
    "text": "property and return node dot with identifier",
    "start": "2715119",
    "end": "2723359"
  },
  {
    "text": "and do syntax recreate identify a name map property same mistake sorry",
    "start": "2723359",
    "end": "2732560"
  },
  {
    "text": "so this is now the ordering is really important because the parameter is",
    "start": "2732560",
    "end": "2737599"
  },
  {
    "text": "visited first and um this parameter has a",
    "start": "2737599",
    "end": "2743040"
  },
  {
    "text": "an identifier in it so it's really important that the c-sharp syntax rewrite first calls visit",
    "start": "2743040",
    "end": "2749119"
  },
  {
    "text": "parameter and then calls visit identify name which it all handles for us and",
    "start": "2749119",
    "end": "2754160"
  },
  {
    "text": "that being built in i don't have to do anything with it so let's run it",
    "start": "2754160",
    "end": "2761838"
  },
  {
    "text": "all right and that's now completely uh makes the normalized identify the one that's used",
    "start": "2765200",
    "end": "2771040"
  },
  {
    "text": "inside the method and it would be trivial to add it to uh the class decoration and whatever",
    "start": "2771040",
    "end": "2776960"
  },
  {
    "text": "so uh but i'm running out of time a little bit so let's just do that later if somebody",
    "start": "2776960",
    "end": "2782400"
  },
  {
    "text": "would like to see that and let's move on to the last one the last two",
    "start": "2782400",
    "end": "2787680"
  },
  {
    "text": "so that is the test runner the test runner has two projects",
    "start": "2787680",
    "end": "2794800"
  },
  {
    "text": "it has the test runner itself and it has a student solution the student solution is the same as",
    "start": "2795760",
    "end": "2801359"
  },
  {
    "text": "the previous one just as a lot of tests and an implementation that passes the test which is admittedly much nicer than",
    "start": "2801359",
    "end": "2807839"
  },
  {
    "text": "the previous one i'm going to unload this project and i'm going to remove",
    "start": "2807839",
    "end": "2813040"
  },
  {
    "text": "its bin object directories because writer will have done some magic in the",
    "start": "2813040",
    "end": "2818480"
  },
  {
    "text": "background already and we don't want that and i'll show you later why so the test runner um it will be",
    "start": "2818480",
    "end": "2825760"
  },
  {
    "text": "different from the previous tools because now we will be working with a project because we want to run all the tests that are in a project",
    "start": "2825760",
    "end": "2833119"
  },
  {
    "text": "and the goal of the test runner is to take a student's solution and have it run against the test suite and then detect if there are failing or",
    "start": "2833119",
    "end": "2840160"
  },
  {
    "text": "passing tests and for the failing and the passing test write out the json report",
    "start": "2840160",
    "end": "2845200"
  },
  {
    "text": "so we could have done dotnet testing parsing the the text output but i don't like parsing",
    "start": "2845200",
    "end": "2850960"
  },
  {
    "text": "text output because it's well brittle and um just because it might be cool to do something",
    "start": "2850960",
    "end": "2856960"
  },
  {
    "text": "like in-memory stuff i wanted to try and do this all with some nuget packages instead of doing",
    "start": "2856960",
    "end": "2863760"
  },
  {
    "text": "just shelling out to the cli so the first thing that we need is we",
    "start": "2863760",
    "end": "2869599"
  },
  {
    "text": "need some new packages so what we need is instead of using microsoft.codeanalysis.csharp",
    "start": "2869599",
    "end": "2876160"
  },
  {
    "text": "we need micro.codens.cshar.workspaces and this bit is required",
    "start": "2876160",
    "end": "2883119"
  },
  {
    "text": "to be able to work with cs approach files um it's not enough though um because we",
    "start": "2883119",
    "end": "2889520"
  },
  {
    "text": "also need the ms build code investor.workspace.msbuild",
    "start": "2889520",
    "end": "2895680"
  },
  {
    "text": "package and the combination of those two will allow us to work with cs approach files",
    "start": "2895680",
    "end": "2901839"
  },
  {
    "text": "so let's get started first thing to do we i have a reference to the exercises",
    "start": "2901839",
    "end": "2907680"
  },
  {
    "text": "project file and we have to create a workspace and a workspace is like an environment where you can",
    "start": "2907680",
    "end": "2915839"
  },
  {
    "text": "keep track of your solutions and your projects etc so when you're working with projects and",
    "start": "2915839",
    "end": "2922640"
  },
  {
    "text": "solutions you always create a workspace first the workspace has a method that's called",
    "start": "2922640",
    "end": "2929920"
  },
  {
    "text": "open project async and we can pass it a path to a project",
    "start": "2929920",
    "end": "2935280"
  },
  {
    "text": "file so i have that already stopped out and we can then await it and this will",
    "start": "2935280",
    "end": "2940640"
  },
  {
    "text": "be a project representation so this is an in-memory representation of what the project file looks like",
    "start": "2940640",
    "end": "2947040"
  },
  {
    "text": "let's just run this and see what happens",
    "start": "2947040",
    "end": "2951599"
  },
  {
    "text": "it does compile so that's good whoops um we got an exception could not load file or",
    "start": "2953599",
    "end": "2959359"
  },
  {
    "text": "assembly microsoft.build um the thing here is that when working with the imagebuild workspace",
    "start": "2959359",
    "end": "2966000"
  },
  {
    "text": "nuka package it will under the hood use ms build and for different versions of the net",
    "start": "2966000",
    "end": "2972559"
  },
  {
    "text": "framework on tournament or um there will be in different os's there will be different places where ms build",
    "start": "2972559",
    "end": "2977839"
  },
  {
    "text": "is located so there is a package that you can use um it's called microsoft dot",
    "start": "2977839",
    "end": "2986240"
  },
  {
    "text": "build.locator let's install it and its sole purpose",
    "start": "2989000",
    "end": "2996240"
  },
  {
    "text": "is to somehow make it known where ms build is located so you do miss build locator dot",
    "start": "2996240",
    "end": "3002400"
  },
  {
    "text": "register defaults you have to make sure that you call that before the first call to",
    "start": "3002400",
    "end": "3007599"
  },
  {
    "text": "an ms build api method and um let's run it and debug it to see if it",
    "start": "3007599",
    "end": "3013040"
  },
  {
    "text": "now works",
    "start": "3013040",
    "end": "3015599"
  },
  {
    "text": "and indeed we now don't have an error so hooray let's see what the project looks like so",
    "start": "3020480",
    "end": "3026480"
  },
  {
    "text": "there are many many properties here um one of them that's important to us is",
    "start": "3026480",
    "end": "3032000"
  },
  {
    "text": "documents so it contains all the files that are in the project in this case we have two",
    "start": "3032000",
    "end": "3037440"
  },
  {
    "text": "a test file and an implementation file so let's stop that we'll remove this",
    "start": "3037440",
    "end": "3043280"
  },
  {
    "text": "message next step is how do we run x unit in",
    "start": "3043280",
    "end": "3048640"
  },
  {
    "text": "memory for that we need another two packages the first one is just a regular",
    "start": "3048640",
    "end": "3054079"
  },
  {
    "text": "x unit package so let's install that and the second one that we need is",
    "start": "3054079",
    "end": "3059599"
  },
  {
    "text": "something that's called an x unit terms a runner is found in xunit.runner.utility",
    "start": "3059599",
    "end": "3065359"
  },
  {
    "text": "and the runner is something that is able to run the tests so let's install those",
    "start": "3065359",
    "end": "3072160"
  },
  {
    "text": "and then we have access to a type that's called the assembly runner",
    "start": "3072160",
    "end": "3078470"
  },
  {
    "text": "[Music] so one thing that we can do",
    "start": "3078470",
    "end": "3084640"
  },
  {
    "text": "is the assembly runner uh sorry i get the wrong so assembly runner we have",
    "start": "3084640",
    "end": "3090079"
  },
  {
    "text": "to create it like this sorry it has to be passed in an assembly file and we don't yet have an assembly",
    "start": "3090079",
    "end": "3096400"
  },
  {
    "text": "we do have a project though and projects can be compiled to assembly so how do we get from a project to an",
    "start": "3096400",
    "end": "3101680"
  },
  {
    "text": "assembly to do that the first thing that you need to do is you have to get",
    "start": "3101680",
    "end": "3106960"
  },
  {
    "text": "the project's compilation so our compilation equals compilation acing",
    "start": "3106960",
    "end": "3113520"
  },
  {
    "text": "and a compilation is an in-memory representation of well an assembly or something that",
    "start": "3113520",
    "end": "3119599"
  },
  {
    "text": "you can compile it isn't compiled yet it's just in a representation and when working with compilation the",
    "start": "3119599",
    "end": "3126319"
  },
  {
    "text": "first thing that you should always do is check its diagnostics so the diagnostics are the things that",
    "start": "3126319",
    "end": "3131680"
  },
  {
    "text": "you will be seeing if you do rebuild warnings errors etc so let's",
    "start": "3131680",
    "end": "3138160"
  },
  {
    "text": "do a little bit digging on to see if there are any errors",
    "start": "3138160",
    "end": "3143440"
  },
  {
    "text": "so diet.severity equals error and this will be",
    "start": "3143440",
    "end": "3150839"
  },
  {
    "text": "errors so the first thing i did is get the diagnosis and then i filtered them where the severity is",
    "start": "3150839",
    "end": "3156720"
  },
  {
    "text": "error and let's output the number of errors and see if everything works well here is",
    "start": "3156720",
    "end": "3164240"
  },
  {
    "text": "dot count let's run it",
    "start": "3164240",
    "end": "3168559"
  },
  {
    "text": "and let's see if that's working nicely oops 123 errors",
    "start": "3171359",
    "end": "3179599"
  },
  {
    "text": "ouch so one thing that we can do is see just what the errors are because",
    "start": "3179599",
    "end": "3186800"
  },
  {
    "text": "well we have an in-memory representation of those so errors let's see what they are",
    "start": "3186800",
    "end": "3195280"
  },
  {
    "text": "a little bit of waiting and whoa predefined type system object is",
    "start": "3195280",
    "end": "3200640"
  },
  {
    "text": "not defined or imported um how can we fix that and what is the issue here",
    "start": "3200640",
    "end": "3206160"
  },
  {
    "text": "well the issue is actually that um we didn't do a dotnet restore and dotnet restore has some properties",
    "start": "3206160",
    "end": "3213359"
  },
  {
    "text": "that it creates a file that contains all the assemblies that need to be loaded and um this is also why i unloaded the",
    "start": "3213359",
    "end": "3220240"
  },
  {
    "text": "project because if i didn't do it writer would have done it in the background so um one thing to do to fix",
    "start": "3220240",
    "end": "3226319"
  },
  {
    "text": "that is to do process dot start and we'll just shell out to the.net",
    "start": "3226319",
    "end": "3232160"
  },
  {
    "text": "cli here [Music] and we do dotnet restore and then use",
    "start": "3232160",
    "end": "3237359"
  },
  {
    "text": "the project file path so this will do a restore in the background and we'll wait for it to exit",
    "start": "3237359",
    "end": "3243200"
  },
  {
    "text": "run it again see how many errors we have hopefully less",
    "start": "3243200",
    "end": "3251839"
  },
  {
    "text": "and no we we actually have more how is that possible so um it turns out that this is actually",
    "start": "3252800",
    "end": "3259680"
  },
  {
    "text": "a bug that i found out last week um and the thing is that you are that we are missing",
    "start": "3259680",
    "end": "3265200"
  },
  {
    "text": "an assembly reference and the assembly web is not automatically added but we can add it manually it's called",
    "start": "3265200",
    "end": "3271960"
  },
  {
    "text": "nuget.project model and if we install that into our project",
    "start": "3271960",
    "end": "3277119"
  },
  {
    "text": "and then run it again we should be having a errorless compilation",
    "start": "3277119",
    "end": "3286078"
  },
  {
    "text": "fingers crossed all right so now what we did is actually we are",
    "start": "3286880",
    "end": "3292640"
  },
  {
    "text": "sorting doing dot net build in memory we still aren't there what we",
    "start": "3292640",
    "end": "3298000"
  },
  {
    "text": "want to be because the assembly runner needs an assembly file name so how can we have a compilation output",
    "start": "3298000",
    "end": "3305200"
  },
  {
    "text": "and assembly file and that's actually very easy there is an emit method",
    "start": "3305200",
    "end": "3310480"
  },
  {
    "text": "and that emit method takes lots of overloads and but one of them is just the file path",
    "start": "3310480",
    "end": "3315760"
  },
  {
    "text": "and we could hard code it just run a.dll or whatever but there is also a nice property",
    "start": "3315760",
    "end": "3322520"
  },
  {
    "text": "compilation.sourcemodule.name that contains the dll name as the project would be output so this will output the dll to",
    "start": "3322520",
    "end": "3330720"
  },
  {
    "text": "this location and then we can open we can create this assembly runner so now",
    "start": "3330720",
    "end": "3338960"
  },
  {
    "text": "we're almost ready to really run the test so let's see what the assembly runner has for its properties um it has tons of",
    "start": "3338960",
    "end": "3347599"
  },
  {
    "text": "callbacks actions and the thing that we are interested in is whether the test is",
    "start": "3347599",
    "end": "3353040"
  },
  {
    "text": "passing or failing so we can do a little",
    "start": "3353040",
    "end": "3358559"
  },
  {
    "text": "console logging here and we'll just do this is a failing test and then output the test display name so",
    "start": "3358559",
    "end": "3366240"
  },
  {
    "text": "you can see here that the properties of the the info callback parameter are matching them of the domain of x",
    "start": "3366240",
    "end": "3373599"
  },
  {
    "text": "units so this is really an x unit internal specification so let's use that and",
    "start": "3373599",
    "end": "3381440"
  },
  {
    "text": "just to have us be complete also add callbacks for the other two",
    "start": "3381440",
    "end": "3387920"
  },
  {
    "text": "possible statuses that x-unit supports which are skipping and passing tests",
    "start": "3387920",
    "end": "3394400"
  },
  {
    "text": "and then finally let's see if we can run the assembly runner not array segment and there is a method",
    "start": "3394400",
    "end": "3401280"
  },
  {
    "text": "and the method is called start alright so let's run this and see what it does",
    "start": "3401280",
    "end": "3408480"
  },
  {
    "text": "no errors good but there is also no output so this is weird um it took me a little",
    "start": "3416799",
    "end": "3424000"
  },
  {
    "text": "time but if you go to the documentation of start it says this call returns immediately so",
    "start": "3424000",
    "end": "3431200"
  },
  {
    "text": "it doesn't wait for the test to finish there is a callback on execution",
    "start": "3431200",
    "end": "3437520"
  },
  {
    "text": "completed so but what can we do here",
    "start": "3437520",
    "end": "3443200"
  },
  {
    "text": "um the excellent documentation suggests using what's called the manual reset events",
    "start": "3443200",
    "end": "3449359"
  },
  {
    "text": "link and you can sort of see this as a flag so",
    "start": "3449359",
    "end": "3454400"
  },
  {
    "text": "we call this finished and when it starts it has a flag down so you can actually do you can't pass it",
    "start": "3454400",
    "end": "3460799"
  },
  {
    "text": "but you have a method that goes that makes the flag go up and if you do finish dot wait",
    "start": "3460799",
    "end": "3468640"
  },
  {
    "text": "it will wait for the flag to go up and initially it won't be um once the execution is complete and we",
    "start": "3468640",
    "end": "3474960"
  },
  {
    "text": "get here we can just set the flag and it will go up and this blocking call will then continue so",
    "start": "3474960",
    "end": "3483040"
  },
  {
    "text": "let's run it again",
    "start": "3483040",
    "end": "3489839"
  },
  {
    "text": "all right it doesn't work and it doesn't work because there are there is an issue with loading",
    "start": "3496640",
    "end": "3502880"
  },
  {
    "text": "the assembly and the way this is working is that as xunit will try to look for the assembly",
    "start": "3502880",
    "end": "3508640"
  },
  {
    "text": "in the current assembly load context and our dynamically compiled executable isn't in",
    "start": "3508640",
    "end": "3513839"
  },
  {
    "text": "that and the fix is relatively easy we can load the assembly",
    "start": "3513839",
    "end": "3518880"
  },
  {
    "text": "and just use this name and then run it again",
    "start": "3518880",
    "end": "3525760"
  },
  {
    "text": "let's do it very quickly because i'm running out of time",
    "start": "3529520",
    "end": "3534160"
  },
  {
    "text": "and all right it now actually run all the tests in memory and we've got our calling callbacks called so it does say",
    "start": "3536160",
    "end": "3543440"
  },
  {
    "text": "skip a lot and that's because our tests are except for the first one all marked with skip and um",
    "start": "3543440",
    "end": "3551040"
  },
  {
    "text": "this is because we want to encourage tdd where students solve a bit of the implementation one at a time and",
    "start": "3551040",
    "end": "3558000"
  },
  {
    "text": "let's see if we can fix that because we now have syntax the test runner syntax and we can do",
    "start": "3558000",
    "end": "3564000"
  },
  {
    "text": "something with it first let's grab hold of project dot documents so these are all",
    "start": "3564000",
    "end": "3571040"
  },
  {
    "text": "the documents that are in the project and we do a single drop down name equals",
    "start": "3571040",
    "end": "3576319"
  },
  {
    "text": "test runner exercise success dot cs so this is our document",
    "start": "3576319",
    "end": "3583440"
  },
  {
    "text": "and um for that sorry for the document we can get its syntax",
    "start": "3583440",
    "end": "3588960"
  },
  {
    "text": "rootness this is a different way of getting the center root instead of calling the parse method",
    "start": "3588960",
    "end": "3594480"
  },
  {
    "text": "so we now have the root of the test and we can just write a syntax rewriter that",
    "start": "3594480",
    "end": "3600480"
  },
  {
    "text": "we just did so unskipped says i'm going to make this a bit quick because i'm running out of time",
    "start": "3600480",
    "end": "3606480"
  },
  {
    "text": "we'll override the visit attribute because we are interested in the fact attribute we can check that by",
    "start": "3606480",
    "end": "3613760"
  },
  {
    "text": "doing node.name. to string equals",
    "start": "3613760",
    "end": "3619200"
  },
  {
    "text": "fact and we can then do we have to modify the",
    "start": "3619200",
    "end": "3626319"
  },
  {
    "text": "node so we can do a wither and we can say that this argument list we don't want any arguments so we're",
    "start": "3626319",
    "end": "3631839"
  },
  {
    "text": "effectively removing the skip bit and then we can apply that to our route",
    "start": "3631839",
    "end": "3637359"
  },
  {
    "text": "so this is root we'll just reassign it for the moment",
    "start": "3637359",
    "end": "3643440"
  },
  {
    "text": "this doesn't do anything yet because remember everything is immutable so this will return a new root and the",
    "start": "3643440",
    "end": "3649200"
  },
  {
    "text": "document won't be updated but what we can do is we can do document. with syntax root and again not only the",
    "start": "3649200",
    "end": "3656880"
  },
  {
    "text": "syntax trees are immutable the documents are two so let's reassign the document and to",
    "start": "3656880",
    "end": "3662240"
  },
  {
    "text": "make things even stress it a little bit more and this won't work actually",
    "start": "3662240",
    "end": "3667440"
  },
  {
    "text": "so let's run it and see that this doesn't do anything",
    "start": "3667440",
    "end": "3672799"
  },
  {
    "text": "except for running the test as it did previously and already explain why because the",
    "start": "3672880",
    "end": "3678640"
  },
  {
    "text": "document.with syntax would return not only a new document but it also returned a new project",
    "start": "3678640",
    "end": "3684000"
  },
  {
    "text": "so um everything is immutable including the project and the fix is easy we'll just reference the project from",
    "start": "3684000",
    "end": "3689599"
  },
  {
    "text": "the document and now we run it",
    "start": "3689599",
    "end": "3694000"
  },
  {
    "text": "it should all work",
    "start": "3694799",
    "end": "3699839"
  },
  {
    "text": "and now it's all passing so we used rosslyn to get everything working and we did a",
    "start": "3703520",
    "end": "3708960"
  },
  {
    "text": "little bit of the syntax rewriting etc i have a different version where i don't write to an assembly but it's",
    "start": "3708960",
    "end": "3715280"
  },
  {
    "text": "it's relatively involved so i didn't have any time to incorporate this into the slide but it will be in the source",
    "start": "3715280",
    "end": "3720640"
  },
  {
    "text": "code so that's the demo i want to thank you all for coming i",
    "start": "3720640",
    "end": "3725680"
  },
  {
    "text": "really enjoyed doing this and the slides are all up the source codes too if you like exorcism go to the website",
    "start": "3725680",
    "end": "3732160"
  },
  {
    "text": "xsin.io if you want to help us build these kinds of tooling or for other languages go to github.com v3",
    "start": "3732160",
    "end": "3740240"
  },
  {
    "text": "and i don't know if we have any time for a question because it's quite late but uh if not uh thank you very much and",
    "start": "3740240",
    "end": "3746160"
  },
  {
    "text": "hope to see you again a different time hi eric",
    "start": "3746160",
    "end": "3752160"
  },
  {
    "text": "so let me put on my earplugs i'm sorry all right do you hear me",
    "start": "3752559",
    "end": "3760240"
  },
  {
    "text": "yeah i can hear you i think it's a lot of questions on the slack channel so you might want to scoot over there",
    "start": "3760240",
    "end": "3766720"
  },
  {
    "text": "and answer people all right um you kind of have a five minutes",
    "start": "3766720",
    "end": "3771920"
  },
  {
    "text": "five seven minutes all right yeah so if you are able to answer those questions by",
    "start": "3771920",
    "end": "3777200"
  },
  {
    "text": "then oh yeah all right um i'm seeing some message",
    "start": "3777200",
    "end": "3782240"
  },
  {
    "text": "about uh using linkpad for syntax visualizing and which is really helpful and linkpad",
    "start": "3782240",
    "end": "3787440"
  },
  {
    "text": "is a really nice tool so thanks for that richard um can we get the hands on the source code",
    "start": "3787440",
    "end": "3794000"
  },
  {
    "text": "yeah so um i'll post it in the in the reply soon",
    "start": "3794000",
    "end": "3799119"
  },
  {
    "text": "so um that source code will have a master branch that contains all the the source that i just built uh it also",
    "start": "3799119",
    "end": "3805760"
  },
  {
    "text": "contains an initial branch if you want to build it all yourself let's see if you can work it out yourselves",
    "start": "3805760",
    "end": "3811119"
  },
  {
    "text": "and there isn't something with x unit that does everything completely in memory if you like that",
    "start": "3811119",
    "end": "3816240"
  },
  {
    "text": "um guillermo ferreira as if ms build workspace is available on a non-winner's runtime",
    "start": "3816240",
    "end": "3821359"
  },
  {
    "text": "and it is and this used to be a real issue it used to even not be possible to do this on.net core",
    "start": "3821359",
    "end": "3827680"
  },
  {
    "text": "um it was tied to dotnet framework but over the last year or so it has been made fully open source so uh",
    "start": "3827680",
    "end": "3834799"
  },
  {
    "text": "i actually develop most of this tooling on my mac machine so yes it is fully non-windows supported",
    "start": "3834799",
    "end": "3842559"
  },
  {
    "text": "source will be great we'll be doing if you try to run tests in memory loading the assembly to",
    "start": "3842559",
    "end": "3848720"
  },
  {
    "text": "assembly load contacts yes i tried to do that and you can definitely do that",
    "start": "3848720",
    "end": "3854160"
  },
  {
    "text": "but it was a little bit much for to do this in this presentation",
    "start": "3854160",
    "end": "3859599"
  },
  {
    "text": "or if it's asked the example that used if an else statement would help if statements being nested",
    "start": "3859920",
    "end": "3867200"
  },
  {
    "text": "no i don't think so um i'm not sure if i completely understand what's saying but",
    "start": "3867200",
    "end": "3872640"
  },
  {
    "text": "we can go into that later perhaps um thomas thank you for the compliments also call",
    "start": "3872640",
    "end": "3879599"
  },
  {
    "text": "for the source code yeah definitely everything that i do is open source so i'll put it up for you",
    "start": "3879599",
    "end": "3885680"
  },
  {
    "text": "um status says i can't think of anything i can use this for but it was really cool i'll take it as a huge compliment we're",
    "start": "3885680",
    "end": "3892319"
  },
  {
    "text": "all programmers so it's just fun to play with this and i started playing with this before it's",
    "start": "3892319",
    "end": "3897920"
  },
  {
    "text": "actually thought of a use case so maybe getting started with this then leads to possible use cases later",
    "start": "3897920",
    "end": "3904559"
  },
  {
    "text": "on cyrus says things that was useful okay thank you very much justin says the same",
    "start": "3904559",
    "end": "3910000"
  },
  {
    "text": "oh somebody has already found the the link to the source code so yeah if you want to find me on the interwebs i'm always",
    "start": "3910000",
    "end": "3916880"
  },
  {
    "text": "named the same just extreme just my name my twitter my linkedin my get up it's really easy thanks for the",
    "start": "3916880",
    "end": "3925280"
  },
  {
    "text": "possibility with roslyn my pleasure my pleasure everybody's doing",
    "start": "3925280",
    "end": "3930400"
  },
  {
    "text": "lots of things that i really enjoy seeing everybody's really happy cool presentation interested in topping",
    "start": "3930400",
    "end": "3936880"
  },
  {
    "text": "all right brilliant um let me see there's also some in the chat somebody says there are checkered parts",
    "start": "3936880",
    "end": "3942720"
  },
  {
    "text": "in the window probably to hiding something oh sorry using our bacteria correct it",
    "start": "3942720",
    "end": "3948079"
  },
  {
    "text": "was a little bit of a coding mistake for myself are else if statements are separate type",
    "start": "3948079",
    "end": "3954319"
  },
  {
    "text": "of will it be braced uh they are separate type elses and ifs so um that was one of the points that i",
    "start": "3954319",
    "end": "3961280"
  },
  {
    "text": "tried to make is that you might be thinking that it would be an if statement but it's actually an if statement that",
    "start": "3961280",
    "end": "3967760"
  },
  {
    "text": "has an else clause and the else clause is a different type again so um",
    "start": "3967760",
    "end": "3973039"
  },
  {
    "text": "almost every little bit of syntax that you have has a special dedicated class for them and all right simone says great",
    "start": "3973039",
    "end": "3980799"
  },
  {
    "text": "work at exorcism and with this presentation thank you some people are talking so just just",
    "start": "3980799",
    "end": "3986799"
  },
  {
    "text": "wait um i think yeah i can grab a link to the source code in",
    "start": "3986799",
    "end": "3993440"
  },
  {
    "text": "between and oops let's move this here [Music]",
    "start": "3993440",
    "end": "3999359"
  },
  {
    "text": "github so i'll just post it again just to make",
    "start": "3999359",
    "end": "4005280"
  },
  {
    "text": "sure that everybody all right thank you guyana uh it's great",
    "start": "4005280",
    "end": "4011760"
  },
  {
    "text": "to see so many people show up i was a little bit anxious that people might think brosnan",
    "start": "4011760",
    "end": "4017200"
  },
  {
    "text": "that's just the compiler how can be ever be interesting but apparently people found it interesting so great to hear",
    "start": "4017200",
    "end": "4026000"
  },
  {
    "text": "all right you're welcome i'm not sure if i pronounced that correctly but well i'm just dutch so",
    "start": "4026319",
    "end": "4035200"
  },
  {
    "text": "all right i don't see anybody typing again",
    "start": "4035200",
    "end": "4040400"
  },
  {
    "text": "oh uh a dutch donkey bell and that was for us duchy sorry for the",
    "start": "4040400",
    "end": "4048000"
  },
  {
    "text": "rest just saying thank you in dutch",
    "start": "4048000",
    "end": "4053359"
  }
]