[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "everybody so you should know that I didn't want to give this talk so I seen",
    "start": "4060",
    "end": "9230"
  },
  {
    "text": "people going away from the door right now oh then I can go see it something else I didn't mean to give this talk I",
    "start": "9230",
    "end": "16340"
  },
  {
    "text": "prepared this talk for a different audience but all they wrote me email all the model one of the organizers and he's",
    "start": "16340",
    "end": "24590"
  },
  {
    "text": "not here he doesn't care but at any rate so all they wrote an email and said you know we want to talk about comparisons",
    "start": "24590",
    "end": "32119"
  },
  {
    "text": "between programming languages and be as controversial as it as you can as",
    "start": "32119",
    "end": "37610"
  },
  {
    "text": "controversies you can not knowing who he's dealing with here",
    "start": "37610",
    "end": "43880"
  },
  {
    "text": "we here we go so I'm going to talk about the most average function there is the most",
    "start": "43880",
    "end": "50300"
  },
  {
    "text": "average function in the world and please give me red cards only I only want the",
    "start": "50300",
    "end": "56120"
  },
  {
    "text": "red card I'm gonna measure my performance of red cards so you know",
    "start": "56120",
    "end": "62660"
  },
  {
    "start": "60000",
    "end": "60000"
  },
  {
    "text": "starting with a simple question what is a good language for getting work done well I say work I mean computation I",
    "start": "62660",
    "end": "69080"
  },
  {
    "text": "mean you know actual verifiable computation that does something useful",
    "start": "69080",
    "end": "75920"
  },
  {
    "text": "for humankind and I'm sure each of us has a few ideas about what what some",
    "start": "75920",
    "end": "84170"
  },
  {
    "text": "criteria would be and mine are the following I would like a language that is algorithmically inclined it makes it",
    "start": "84170",
    "end": "91250"
  },
  {
    "text": "easy to take an algorithm from a book and translate it into code I'm seeing a",
    "start": "91250",
    "end": "96590"
  },
  {
    "text": "few nods thank you very much I feel better already I also want the language that keeps it real and by that",
    "start": "96590",
    "end": "102320"
  },
  {
    "text": "I mean acknowledges the realities of the hardware it runs on ok so it's kind of",
    "start": "102320",
    "end": "110240"
  },
  {
    "text": "well yeah we don't want to implement algorithms but we don't implement algorithms on an abstract machine we",
    "start": "110240",
    "end": "116210"
  },
  {
    "text": "want to implement on an actual machine that you know Huff's and puffs and hell you know it gets hot and you know dirty",
    "start": "116210",
    "end": "121549"
  },
  {
    "text": "and you know leaks oil and that kind of stuff right number three my criteria is",
    "start": "121549",
    "end": "128750"
  },
  {
    "text": "allows you to do what you want to do this is a bit solemn and I find very interesting whenever I find my I you",
    "start": "128750",
    "end": "136069"
  },
  {
    "text": "know I want to do X I know it's part Cybil there's no loss of physics preventing it yet my environment does",
    "start": "136069",
    "end": "142700"
  },
  {
    "text": "not allow me to do it that's a red flag right you want to be allowed to do what",
    "start": "142700",
    "end": "147800"
  },
  {
    "text": "you want to do and after you've done it code reads like it does what you want it",
    "start": "147800",
    "end": "155510"
  },
  {
    "text": "to do and that's a test that some languages such as Perl don't quite pass",
    "start": "155510",
    "end": "163420"
  },
  {
    "text": "right so you know that they're contest like what's what's the longest sequence of random characters that Perl is gonna",
    "start": "163420",
    "end": "169550"
  },
  {
    "text": "consider a valid program in that kind of stuff right so you know you do want to",
    "start": "169550",
    "end": "175730"
  },
  {
    "text": "have such a language that you can read because code is more read and written all the time and that kind of stuff so",
    "start": "175730",
    "end": "180890"
  },
  {
    "text": "no surprise here now you know just just",
    "start": "180890",
    "end": "188270"
  },
  {
    "text": "for kicks I totally agreed that URIs might be different you may be looking for",
    "start": "188270",
    "end": "193970"
  },
  {
    "text": "different abstractions different things that are that matter to you and that's totally fine there's no contest there",
    "start": "193970",
    "end": "200410"
  },
  {
    "text": "but Baku before because all they wrote me I'm the guy with a really loud",
    "start": "200410",
    "end": "205640"
  },
  {
    "text": "microphone so I get to say what I think please feel free to interrupt me and say",
    "start": "205640",
    "end": "211990"
  },
  {
    "text": "you know that's the stupidest thing I've ever heard so everything inclined I can",
    "start": "211990",
    "end": "218150"
  },
  {
    "text": "take an algorithm from math book or write my own and it's going to translate somewhat naturally into code and if you",
    "start": "218150",
    "end": "230300"
  },
  {
    "text": "do look at at any algorithms book you're going to see that most algorithms and tell mutation or at least many of them",
    "start": "230300",
    "end": "239469"
  },
  {
    "text": "I'm sure you know this function of pure function languages that do not allow mutation and all of a sudden I have a",
    "start": "239500",
    "end": "244970"
  },
  {
    "text": "problem it's like well that means I can't do what I want to do so I want mutation as an option of course I think",
    "start": "244970",
    "end": "253010"
  },
  {
    "text": "that the answer of functional Probie there isn't there are ways to allow mutation even within functional context",
    "start": "253010",
    "end": "259910"
  },
  {
    "text": "etc etc but you know pretty much against a by one mutation and I want to have",
    "start": "259910",
    "end": "266510"
  },
  {
    "text": "things like a race and I want to have referential data structures for lists and trees and hash tables and whatnot so these are",
    "start": "266510",
    "end": "273530"
  },
  {
    "text": "things that you would want to have algorithmic incline of course you know",
    "start": "273530",
    "end": "278900"
  },
  {
    "start": "277000",
    "end": "277000"
  },
  {
    "text": "it's not only algorithms you want to do because there's a lot of second-order issues you need to worry about such as",
    "start": "278900",
    "end": "284180"
  },
  {
    "text": "you know you want to maintain your code you want to eliminate a variety of classes of bugs by doing type checking",
    "start": "284180",
    "end": "290600"
  },
  {
    "text": "you know even unit testing you should be able to pass for function to another in a higher order function manner so you",
    "start": "290600",
    "end": "298280"
  },
  {
    "text": "know before long you the list gets quite long right and to there handling and",
    "start": "298280",
    "end": "304880"
  },
  {
    "text": "stuff kymmie keeping it real I think there",
    "start": "304880",
    "end": "313250"
  },
  {
    "text": "should be some honest protocol between your language and the machine a machine",
    "start": "313250",
    "end": "319310"
  },
  {
    "text": "is going to have fixed sized numbers",
    "start": "319310",
    "end": "325150"
  },
  {
    "text": "it's going to have fixed size numbers it's going to have mutation memory is",
    "start": "325600",
    "end": "331880"
  },
  {
    "text": "going to be mutable right it's going to have contiguous loosely typed arrays",
    "start": "331880",
    "end": "337910"
  },
  {
    "text": "because the entire memory is like a large array so this would be sort of the",
    "start": "337910",
    "end": "343370"
  },
  {
    "text": "simplest data structure that is one by one representing a computer that would",
    "start": "343370",
    "end": "348500"
  },
  {
    "text": "be an array addresses of things are things you can load the point into",
    "start": "348500",
    "end": "353840"
  },
  {
    "text": "register and that's a thing right it's a word that you get to load and interpret different way than you would interpret",
    "start": "353840",
    "end": "359570"
  },
  {
    "text": "an integer you want layout control you want to put your data in memory by hand",
    "start": "359570",
    "end": "365000"
  },
  {
    "text": "as you wish right you want to have control over how data gets placed in",
    "start": "365000",
    "end": "371930"
  },
  {
    "text": "memory and you shouldn't be you shouldn't be of find yourself in the need to rewrite from prototype to",
    "start": "371930",
    "end": "378470"
  },
  {
    "text": "production as it happens with many languages that ignore these realities right so you know all of a sudden we're",
    "start": "378470",
    "end": "388640"
  },
  {
    "text": "looking here and you know it's I I came",
    "start": "388640",
    "end": "396080"
  },
  {
    "text": "in peace I mean I don't want to antagonize anybody but their language is that like first order of business",
    "start": "396080",
    "end": "401990"
  },
  {
    "text": "there's no fixed size numbers and first of all there's no erase",
    "start": "401990",
    "end": "407240"
  },
  {
    "text": "everything is an associative array or is a list and this doesn't quite vibe with",
    "start": "407240",
    "end": "416180"
  },
  {
    "text": "me does it vibe with you didn't I was just",
    "start": "416180",
    "end": "424160"
  },
  {
    "text": "saying darn languages that decide from day one they're not going to have fixed sized integers they're not going to have",
    "start": "424160",
    "end": "430220"
  },
  {
    "text": "contiguous erase this you know the way we're all on this machine that has a",
    "start": "430220",
    "end": "435740"
  },
  {
    "text": "fixed size integers and a race is we're not we're gonna ignore that we're not gonna accept that at all yes",
    "start": "435740",
    "end": "442880"
  },
  {
    "text": "please so the point was well you say you",
    "start": "442880",
    "end": "471950"
  },
  {
    "text": "you know memories contiguous and sort of flattened and mice but actually current",
    "start": "471950",
    "end": "477830"
  },
  {
    "text": "machines they have multiple levels of cache hierarchies and they have out of",
    "start": "477830",
    "end": "483620"
  },
  {
    "text": "order execution right I would not mind primitives for expressing that within a",
    "start": "483620",
    "end": "489470"
  },
  {
    "text": "language but what machines do with these cache allocation and such is they they",
    "start": "489470",
    "end": "496310"
  },
  {
    "text": "make this model fast like for example the cache memory that you know if you're",
    "start": "496310",
    "end": "501500"
  },
  {
    "text": "like let's say you know one gigabyte of cache memory that's not going to be",
    "start": "501500",
    "end": "507500"
  },
  {
    "text": "added to your capacity it's just going to be used to repetitiously without even knowing by the by the machine to emulate",
    "start": "507500",
    "end": "515270"
  },
  {
    "text": "for you a contiguous block of memory yes question ok all right",
    "start": "515270",
    "end": "522590"
  },
  {
    "text": "he's here ok",
    "start": "522590",
    "end": "527230"
  },
  {
    "start": "528000",
    "end": "528000"
  },
  {
    "text": "so you know that made that great issues with ideological languages an",
    "start": "528300",
    "end": "533579"
  },
  {
    "text": "ideological language is one that creates a sweeping uh you know has a sweeping of",
    "start": "533579",
    "end": "539220"
  },
  {
    "text": "first order decision that's going to affect the entire dis the entire design",
    "start": "539220",
    "end": "544990"
  },
  {
    "text": "of the rest of the language for example everything an object because you know on",
    "start": "544990",
    "end": "551290"
  },
  {
    "text": "a machine not everything is an object there are things that are not objects and this is the way it is I mean you",
    "start": "551290",
    "end": "557499"
  },
  {
    "text": "can't escape it so once you claim everything Islam is an object you lose the ability to represent with fidelity",
    "start": "557499",
    "end": "566850"
  },
  {
    "text": "things that are not objects everything",
    "start": "566850",
    "end": "572139"
  },
  {
    "text": "is a function church numerals are the",
    "start": "572139",
    "end": "577779"
  },
  {
    "text": "most terrifying thing in the universe the notion that I need you know I can represent a number by just taking the",
    "start": "577779",
    "end": "584350"
  },
  {
    "text": "steps from number zero all the way to that number is to me very scary",
    "start": "584350",
    "end": "590790"
  },
  {
    "text": "everything is a list what happened to a race so let's choose the slowest data",
    "start": "592829",
    "end": "602470"
  },
  {
    "text": "structure that works and use that for everything you know we make that our",
    "start": "602470",
    "end": "611529"
  },
  {
    "text": "this is our first business decision you know first our business ladies and gentlemen everybody please in line we're",
    "start": "611529",
    "end": "618579"
  },
  {
    "text": "gonna use the list from now on as everything represented in our machine no thank you everything is immutable",
    "start": "618579",
    "end": "625990"
  },
  {
    "text": "I love functional programming I love email ability I love purity in public",
    "start": "625990",
    "end": "632709"
  },
  {
    "text": "we're going to private I'm I love purity I love these are good principles to live",
    "start": "632709",
    "end": "638620"
  },
  {
    "text": "by and not to live by to to live in to to aspire to in a way are synthetically",
    "start": "638620",
    "end": "645339"
  },
  {
    "text": "if you wish but to have that as an imposition to not give me the option",
    "start": "645339",
    "end": "650889"
  },
  {
    "text": "that that's a bit of a problem because you know the machine does have mutable data and actually he made a good point",
    "start": "650889",
    "end": "658689"
  },
  {
    "text": "earlier actually the you know mutation on the machine is be 10 years nowadays because whenever",
    "start": "658689",
    "end": "663850"
  },
  {
    "text": "you take and make that cash dirty which is already kind of a bad word you make the cash dirty and you need to write it",
    "start": "663850",
    "end": "669970"
  },
  {
    "text": "back and there needs to be protocols for ensuring things are maintained synchrony",
    "start": "669970",
    "end": "676270"
  },
  {
    "text": "you know synchronized across threads and all that nonsense so mutability is already kind of a tenuous proposition in current machines",
    "start": "676270",
    "end": "683020"
  },
  {
    "text": "however MIT ability of registers is great works awesomely and registers are",
    "start": "683020",
    "end": "689440"
  },
  {
    "text": "local and generally you know why is in a while I do want to meet eight things and",
    "start": "689440",
    "end": "696550"
  },
  {
    "text": "you know everything somehow I'm gonna let you fill out the blanks I don't think everything is somehow is the",
    "start": "696550",
    "end": "703330"
  },
  {
    "text": "appropriate way of thinking of contemporary machine there of course",
    "start": "703330",
    "end": "710710"
  },
  {
    "text": "second order issues here we have things like dependency management famous code from Uncle Bob all the techniques in",
    "start": "710710",
    "end": "717580"
  },
  {
    "text": "software engineering are something you know have something to do with dependency management and I thought",
    "start": "717580",
    "end": "725080"
  },
  {
    "text": "that's kind of a stupid thing to say and then I fears later I thought yeah he",
    "start": "725080",
    "end": "730480"
  },
  {
    "text": "was right he was right here he was right there he was right there he was right there so dependency match is kind of an",
    "start": "730480",
    "end": "736180"
  },
  {
    "text": "important topic for for us debugging unit testing maintenance and all of these higher-order issues are good to",
    "start": "736180",
    "end": "743200"
  },
  {
    "text": "have in a good language who knows about",
    "start": "743200",
    "end": "749410"
  },
  {
    "text": "these two fine gentlemen what did they write famously",
    "start": "749410",
    "end": "756390"
  },
  {
    "text": "the structure interpretation of computer programs famous book and they have a",
    "start": "759439",
    "end": "764449"
  },
  {
    "text": "very nice pull out code programs must be written for humans to look at and only",
    "start": "764449",
    "end": "769819"
  },
  {
    "text": "incidentally for machines to execute an anonymous reply to that would be the",
    "start": "769819",
    "end": "775009"
  },
  {
    "text": "fact that you show the same foreign to the human in the machine is an abomination",
    "start": "775009",
    "end": "780369"
  },
  {
    "text": "it is tragically flawed it's as if you",
    "start": "780369",
    "end": "786289"
  },
  {
    "text": "know there's no there's no interface between the language and you as a reader",
    "start": "786289",
    "end": "793539"
  },
  {
    "text": "versus the language and the machine through the compiler it's like you're using like you're driving a car but",
    "start": "793539",
    "end": "800539"
  },
  {
    "text": "instead of having like a nice you know a nice car and it's inside it's all i can't covered and you need to kind of",
    "start": "800539",
    "end": "805879"
  },
  {
    "text": "hold you know the engine there you know with your hand and it just sparked the",
    "start": "805879",
    "end": "812329"
  },
  {
    "text": "plugs yourself with a you know with a lighter and all that kind of stuff so it's you know what the machine uses for",
    "start": "812329",
    "end": "818149"
  },
  {
    "text": "running you know it presents the same interface to you that's a bit extreme however we have no idea how to do better",
    "start": "818149",
    "end": "824919"
  },
  {
    "text": "people have tried they've tried graphical programming it works for up to",
    "start": "824919",
    "end": "831229"
  },
  {
    "text": "15 liners programs up to 15 lines we know how to do with graphics and all the",
    "start": "831229",
    "end": "838459"
  },
  {
    "text": "squares and all the squiggles and all the you know it can look clouds and all the good things you can draw in up to 15",
    "start": "838459",
    "end": "844939"
  },
  {
    "text": "lines it scales perfectly we tried with business logic you know let's write the",
    "start": "844939",
    "end": "851539"
  },
  {
    "text": "business rules you know nicely in like COBOL and then we have a program that is",
    "start": "851539",
    "end": "857089"
  },
  {
    "text": "like it works etcetera 50 lines of code these represent like 150 lines of COBOL",
    "start": "857089",
    "end": "863109"
  },
  {
    "text": "right so that didn't quite work so people try the number of things Microsoft has done has a project that is",
    "start": "863109",
    "end": "870439"
  },
  {
    "text": "aimed at non programs to write business rules and it's a kind of a long going",
    "start": "870439",
    "end": "876349"
  },
  {
    "text": "research project I'm not sure does not know what the status is of that project I haven't heard of it in a while so I",
    "start": "876349",
    "end": "883399"
  },
  {
    "text": "assume they kind of dropped it I think I'm gonna get hate mail for this",
    "start": "883399",
    "end": "891128"
  },
  {
    "text": "anyhow I do think that this is kind of an interesting disconnect between",
    "start": "891740",
    "end": "897890"
  },
  {
    "text": "between you know the fact that you are looking at the same code that's going to make up exactly the on the substrate I",
    "start": "897890",
    "end": "904290"
  },
  {
    "text": "think it's kind of there's a problem here anyhow remember doing what you want",
    "start": "904290",
    "end": "909630"
  },
  {
    "start": "907000",
    "end": "907000"
  },
  {
    "text": "to do we want to do things like want to implement algorithms and the algorithms",
    "start": "909630",
    "end": "917250"
  },
  {
    "text": "may be just a bit different depending on particulars of the machine and whatnot and you know end up implementing I",
    "start": "917250",
    "end": "924029"
  },
  {
    "text": "noticed the same algorithm over and over again I'm sure many of you have written your own things that do searching or",
    "start": "924029",
    "end": "931410"
  },
  {
    "text": "that do some insertion is something or that do computer unique something in",
    "start": "931410",
    "end": "936510"
  },
  {
    "text": "somewhere or that you know do a lot of classic tasks yet once again just because the setup is just a bit",
    "start": "936510",
    "end": "942959"
  },
  {
    "text": "different right and those of you who worked at more than one company I'm sure",
    "start": "942959",
    "end": "949290"
  },
  {
    "text": "you kind of take your your little tool chest or like you know your C or C++ code or Python scripts and stuff you",
    "start": "949290",
    "end": "954930"
  },
  {
    "text": "just take them with you it's not illegal because just a few hundreds thousands all or millions of lines it's you know",
    "start": "954930",
    "end": "962430"
  },
  {
    "text": "what's a few million lines of code between friends you just take your little tool chain and say I have this little function here that verifies that",
    "start": "962430",
    "end": "968130"
  },
  {
    "text": "and does this and that does the other and it works for me really nice and it provides for me some nice tools",
    "start": "968130",
    "end": "976190"
  },
  {
    "text": "otherwise just end up writing them yourself and that's the way the cookie crumbles so I claim that we are dealing",
    "start": "976190",
    "end": "986430"
  },
  {
    "text": "with an elusive form of duplication in our daily life in code that it's so",
    "start": "986430",
    "end": "993959"
  },
  {
    "text": "pervasive that we kind of trained ourselves not even see it anymore I'm seeing nods",
    "start": "993959",
    "end": "1001569"
  },
  {
    "text": "so by means of example we're going to write together the average function",
    "start": "1003270",
    "end": "1011760"
  },
  {
    "text": "literally like the average function that computes the average of a few numbers",
    "start": "1012270",
    "end": "1017980"
  },
  {
    "text": "and if you google for you know what is the average of numbers you find add up",
    "start": "1017980",
    "end": "1025089"
  },
  {
    "text": "all the numbers and then divide by how many numbers they are you can explain that to a six-year-old okay if you crack",
    "start": "1025089",
    "end": "1035770"
  },
  {
    "text": "up on any math book you're gonna find this notation which is X with a bar which means average of X's and that's",
    "start": "1035770",
    "end": "1043270"
  },
  {
    "text": "going to be one by n the summation of all X's so I have the notion of",
    "start": "1043270",
    "end": "1049450"
  },
  {
    "text": "summation I have I'm iterating through things right and kind of doing a few",
    "start": "1049450",
    "end": "1055240"
  },
  {
    "text": "motions that are my algorithm it's really simple right if you want more",
    "start": "1055240",
    "end": "1061540"
  },
  {
    "text": "complicated should go back in time and go in my talk this morning which was a bit more complicated than this but",
    "start": "1061540",
    "end": "1067030"
  },
  {
    "text": "here's stuck right this is the algorithm we're going to look at and we want to do",
    "start": "1067030",
    "end": "1073240"
  },
  {
    "start": "1071000",
    "end": "1071000"
  },
  {
    "text": "a few simple things to make sure we don't screw up a few details",
    "start": "1073240",
    "end": "1079290"
  },
  {
    "text": "number one we should not walk our input twice do you agree hands up if you agree",
    "start": "1079290",
    "end": "1085140"
  },
  {
    "text": "we don't want to go once to sum the numbers and once again to count the",
    "start": "1085140",
    "end": "1091480"
  },
  {
    "text": "numbers agreed this is an important",
    "start": "1091480",
    "end": "1098590"
  },
  {
    "text": "point thank you yes and thank you yes I'm just saying like that for the camera",
    "start": "1098590",
    "end": "1105070"
  },
  {
    "text": "because nobody's doing anything okay so we want to not I mean imagine mathematicians don't do this you know",
    "start": "1105070",
    "end": "1112179"
  },
  {
    "text": "there's a joke with a mathematician the physician and you know the the programmer who have the you know the water in the coffee and the programs",
    "start": "1112179",
    "end": "1118600"
  },
  {
    "text": "throws away the water and applies the routine that he has already which is filler thing with new water so not good",
    "start": "1118600",
    "end": "1126340"
  },
  {
    "text": "I mean a mathematician would laugh at this would be like hey Jack guess what I",
    "start": "1126340",
    "end": "1132490"
  },
  {
    "text": "spoke to this programmer and guess how they do average they go once through the numbers they",
    "start": "1132490",
    "end": "1137510"
  },
  {
    "text": "add them and then they go once again and count them and then they do the",
    "start": "1137510",
    "end": "1142520"
  },
  {
    "text": "operation so you don't want to do that it's just goofy we also want to be",
    "start": "1142520",
    "end": "1148549"
  },
  {
    "text": "generic and this is sort of word that kind of this is our machine part we want",
    "start": "1148549",
    "end": "1153890"
  },
  {
    "text": "to work with all reasonably applicable types that means things like small",
    "start": "1153890",
    "end": "1158900"
  },
  {
    "text": "integers large integers single precision floating point numbers blood you know double precision large floating-point",
    "start": "1158900",
    "end": "1165890"
  },
  {
    "text": "numbers are limited precision be integers unlimited precision floating",
    "start": "1165890",
    "end": "1174169"
  },
  {
    "text": "point unlimited precision real numbers numbers that you have not seen yet they",
    "start": "1174169",
    "end": "1181280"
  },
  {
    "text": "have not been invented yet you want to be able to compute the average of things that you haven't seen yet and be",
    "start": "1181280",
    "end": "1191809"
  },
  {
    "text": "recognizable you want the algorithm to look a bit like this you don't to go",
    "start": "1191809",
    "end": "1199010"
  },
  {
    "text": "wildly away from the notion that you're summing some numbers in you're making one division here kind of home-free we",
    "start": "1199010",
    "end": "1206360"
  },
  {
    "text": "have agreement on that ladies and gentlemen thank you so what's the best",
    "start": "1206360",
    "end": "1214490"
  },
  {
    "text": "language in the world has go so I swear to God first I chose that this is not",
    "start": "1214490",
    "end": "1221299"
  },
  {
    "text": "cherry picked I chose the function and then I googled Haskell average function",
    "start": "1221299",
    "end": "1226789"
  },
  {
    "text": "it turns out it's a research project has called types this is kind of copy and",
    "start": "1226789",
    "end": "1233270"
  },
  {
    "text": "paste or maybe though I couldn't even parse the sentence Haskell theis frustrating maybe are frustrating water",
    "start": "1233270",
    "end": "1240440"
  },
  {
    "text": "a simple average function it seems like the simplest thing in the world right wrong so this program you know Stack",
    "start": "1240440",
    "end": "1249140"
  },
  {
    "text": "Overflow couldn't figure out how to implement the average in Haskell by the",
    "start": "1249140",
    "end": "1255470"
  },
  {
    "text": "way list also has I couldn't find any",
    "start": "1255470",
    "end": "1260480"
  },
  {
    "text": "average function in list that doesn't want the input twice I just it doesn't exist it's against the unwritten laws of",
    "start": "1260480",
    "end": "1269059"
  },
  {
    "text": "Lisp you can't write it if you write you can explode okay that's it's the loft I",
    "start": "1269059",
    "end": "1275300"
  },
  {
    "text": "didn't make the rules in Haskell however it can but it's just difficult so",
    "start": "1275300",
    "end": "1282470"
  },
  {
    "start": "1282000",
    "end": "1282000"
  },
  {
    "text": "finally so there's you know there's discussion on Stack Overflow people kind of going up and down or whatever and they say well here's the thing you say",
    "start": "1282470",
    "end": "1289040"
  },
  {
    "text": "average axis sequels real to fraction some X's / generate length and axis well",
    "start": "1289040",
    "end": "1298990"
  },
  {
    "text": "that's kind of who knows what the difference between generic length and",
    "start": "1299290",
    "end": "1304310"
  },
  {
    "text": "length is does the wrong variance but",
    "start": "1304310",
    "end": "1309320"
  },
  {
    "text": "general length is able to compute the length of a list of integrals in the list of floating-point numbers or",
    "start": "1309320",
    "end": "1315410"
  },
  {
    "text": "fractional rational numbers or whatever so it's drinking two things so you can express with the same code the average",
    "start": "1315410",
    "end": "1322490"
  },
  {
    "text": "of rational numbers and integers cool also have this real to frac very nice however the problem is it walks the",
    "start": "1322490",
    "end": "1330410"
  },
  {
    "text": "input twice so it still walks the input",
    "start": "1330410",
    "end": "1337160"
  },
  {
    "text": "twice even though it looks already kind of elaborate fine",
    "start": "1337160",
    "end": "1342830"
  },
  {
    "text": "any ideas on how to improve that yes please",
    "start": "1342830",
    "end": "1349750"
  },
  {
    "text": "you make it a function where I accumulate the sum and you accumulate that simultaneously and the nd have both right in my case I have a different",
    "start": "1351080",
    "end": "1359790"
  },
  {
    "text": "slightly different solution just a bit I googled again I could like you know",
    "start": "1359790",
    "end": "1366720"
  },
  {
    "text": "Haskell average function walks the input just once that sound like that I even forgot and that took us to this solution",
    "start": "1366720",
    "end": "1374360"
  },
  {
    "text": "of course the X Bank patterns good friend of course you gotta use that it's",
    "start": "1377780",
    "end": "1384570"
  },
  {
    "text": "obvious I did not write this code and this is not a joke this is a serious",
    "start": "1384570",
    "end": "1390210"
  },
  {
    "text": "it's actually a blog post it's a blog post on how to write the average function in Haskell it's part of a",
    "start": "1390210",
    "end": "1398430"
  },
  {
    "text": "series of blog posts on how to write the average function in Haskell I am not",
    "start": "1398430",
    "end": "1404220"
  },
  {
    "text": "kidding I think it does what he said it does you walk the list you accumulate",
    "start": "1404220",
    "end": "1411030"
  },
  {
    "text": "things because I can see here you some a plus B and if some C plus one because",
    "start": "1411030",
    "end": "1416340"
  },
  {
    "text": "you want to accumulate a guy like an idiot and then you apply to zero zero",
    "start": "1416340",
    "end": "1422070"
  },
  {
    "text": "and you know magic happens and boom you got it yay all right well I gotta give",
    "start": "1422070",
    "end": "1432030"
  },
  {
    "text": "it to Haskell it looks almost exactly like like this it looks like very like",
    "start": "1432030",
    "end": "1437100"
  },
  {
    "text": "amazingly similar I can look at this you know I can tell the difference is just",
    "start": "1437100",
    "end": "1442110"
  },
  {
    "text": "the font that's it there's no substantive difference here that I can",
    "start": "1442110",
    "end": "1449480"
  },
  {
    "text": "I'm gonna get hidden hate mail for that I'm gonna be destroyed",
    "start": "1449480",
    "end": "1455750"
  },
  {
    "text": "alright so let's take a look at the implementation in the different language",
    "start": "1455750",
    "end": "1461790"
  },
  {
    "start": "1458000",
    "end": "1458000"
  },
  {
    "text": "and it's a simple modest function that",
    "start": "1461790",
    "end": "1466980"
  },
  {
    "text": "says average sequence and it does a loop and pretty much what you'd expect",
    "start": "1466980",
    "end": "1472850"
  },
  {
    "text": "there is this notation so for those of you who use C++ this is this way of",
    "start": "1474260",
    "end": "1480799"
  },
  {
    "text": "writing this is a template function in templatized by seq writes a sequence so",
    "start": "1480799",
    "end": "1486950"
  },
  {
    "text": "this means this is a generic parameter and this is a regular parameter to the function so I'm going to have a sequence",
    "start": "1486950",
    "end": "1492679"
  },
  {
    "text": "of anything and I'm going to sum them up and of course for this to work the you",
    "start": "1492679",
    "end": "1497750"
  },
  {
    "text": "know the sum must be edible from from X and must be divisible by X is that",
    "start": "1497750",
    "end": "1502850"
  },
  {
    "text": "length and stuff like that this is no matter start because it doesn't satisfy",
    "start": "1502850",
    "end": "1508760"
  },
  {
    "text": "many of our requirements for example it doesn't work with anything that summable let's fix that just to preempt a",
    "start": "1508760",
    "end": "1521830"
  },
  {
    "text": "possible protest people say recursion is better and recursion in this case does",
    "start": "1521830",
    "end": "1534740"
  },
  {
    "text": "not work you must do non tail recursion non tail recursion means it's going to",
    "start": "1534740",
    "end": "1542210"
  },
  {
    "text": "consume linear time linear heap linear stack in the size of the input right if",
    "start": "1542210",
    "end": "1550520"
  },
  {
    "text": "you say sum if you say here sum plus sequel average of X's without the first",
    "start": "1550520",
    "end": "1557030"
  },
  {
    "text": "element right so that would be the recursive solution which is taught in all functional programming courses and",
    "start": "1557030",
    "end": "1563450"
  },
  {
    "text": "that's actually not tail recursive which means it kind of it violates an",
    "start": "1563450",
    "end": "1568610"
  },
  {
    "text": "important law of whatever which is well we don't a function that consumes linear memory just to come just to compute",
    "start": "1568610",
    "end": "1575330"
  },
  {
    "text": "something that should be done in constant space I find it quite interesting that in the same I was at",
    "start": "1575330",
    "end": "1581090"
  },
  {
    "text": "the university taking classes and in one one class they literally dislike a 10:00 a.m. we teach us complexity and you know",
    "start": "1581090",
    "end": "1589630"
  },
  {
    "text": "constant space is better than linear space and whatever polynomial space and so there's this hierarchy of P spaces",
    "start": "1589630",
    "end": "1596720"
  },
  {
    "text": "and whatnot right and then you're like okay fine wow that's cool so we want constant space all the algorithms that",
    "start": "1596720",
    "end": "1602929"
  },
  {
    "text": "matter should be done in as little space as possible and then that means break and then there's a function of",
    "start": "1602929",
    "end": "1608780"
  },
  {
    "text": "paren quest ah yes space we don't care yeah we this is not something we do so I",
    "start": "1608780",
    "end": "1616580"
  },
  {
    "text": "find this quite hypocritical but there is a version that does not require",
    "start": "1616580",
    "end": "1623740"
  },
  {
    "text": "linear stack space it's a function that defines a function inside as an",
    "start": "1623740",
    "end": "1628850"
  },
  {
    "text": "accumulator and just because you could have any name I called it Hitler you can",
    "start": "1628850",
    "end": "1636890"
  },
  {
    "text": "tell my feelings about this approach so the way Hitler works is you pass it the",
    "start": "1636890",
    "end": "1648740"
  },
  {
    "text": "seed of computation this would be my sum and this would be my count and it's",
    "start": "1648740",
    "end": "1654320"
  },
  {
    "text": "going to invoke itself recursively in a tail manner and then we're kind of nicely done right okay I forgot to",
    "start": "1654320",
    "end": "1665450"
  },
  {
    "text": "divide here something oh yeah no it's okay so anyway this kind of approach is",
    "start": "1665450",
    "end": "1673340"
  },
  {
    "text": "not something that I would condone definitely not and again it doesn't look",
    "start": "1673340",
    "end": "1678590"
  },
  {
    "text": "like anything close to the nice math formula which does one iteration is done",
    "start": "1678590",
    "end": "1685300"
  },
  {
    "text": "fine how about this recurrence it",
    "start": "1685300",
    "end": "1693020"
  },
  {
    "text": "doesn't take a Ramanujan to write this formula which is computes the average of",
    "start": "1693020",
    "end": "1699740"
  },
  {
    "text": "n plus 1 numbers given the average of n numbers in the next number agreed",
    "start": "1699740",
    "end": "1710050"
  },
  {
    "text": "think it over it takes a few seconds because this a n would be the average of the previous numbers and you multiply by",
    "start": "1710050",
    "end": "1716300"
  },
  {
    "text": "n the N goes away so you have all of the numbers summed and n divided by n plus 1 you get the average of n plus 1 what's",
    "start": "1716300",
    "end": "1724250"
  },
  {
    "text": "the trouble with this function what's the trouble with this recurrence formula please you're going to lose precision I",
    "start": "1724250",
    "end": "1733040"
  },
  {
    "text": "love it because it's not on the slide so you risk to accumulators because you do a bunch of multiplications and divisions",
    "start": "1733040",
    "end": "1739340"
  },
  {
    "text": "and you going to slowly go insane right it's",
    "start": "1739340",
    "end": "1744770"
  },
  {
    "text": "like you eat a bit of lead every day I think it slowly kind of mercury insane right what are the disadvantages it's on",
    "start": "1744770",
    "end": "1754370"
  },
  {
    "text": "the slide for every you know to get to the average of n numbers you're gonna have to do n multiplications and",
    "start": "1754370",
    "end": "1760190"
  },
  {
    "text": "divisions and two n additions no thank you bye miss of race hands who agrees",
    "start": "1760190",
    "end": "1768950"
  },
  {
    "text": "that this is not an effective way to do things thank you very much I call unanimity",
    "start": "1768950",
    "end": "1775640"
  },
  {
    "text": "except for the people who are sleeping however people do this",
    "start": "1775640",
    "end": "1782330"
  },
  {
    "text": "I found it done in a public library of a",
    "start": "1782330",
    "end": "1790700"
  },
  {
    "text": "programming language standard library of a programming language and when I",
    "start": "1790700",
    "end": "1796190"
  },
  {
    "text": "pointed that out I was destroyed",
    "start": "1796190",
    "end": "1805870"
  },
  {
    "text": "and I read it please help me define the",
    "start": "1814120",
    "end": "1819400"
  },
  {
    "text": "most average function there is so I posted this on the rust reddit group",
    "start": "1819400",
    "end": "1826870"
  },
  {
    "text": "I love rust don't get me wrong I love it",
    "start": "1826870",
    "end": "1832090"
  },
  {
    "text": "great marketing I love it so I wrote pretty much what I told you how did it",
    "start": "1832090",
    "end": "1838299"
  },
  {
    "text": "go about this and it's etc well I didn't get a lot of votes all right",
    "start": "1838299",
    "end": "1846570"
  },
  {
    "text": "and then I was you know my glasses so there we go alright so here's what I",
    "start": "1846570",
    "end": "1856600"
  },
  {
    "text": "write when I discovered so this is actually in the rust standard library top line do you guys see from the back",
    "start": "1856600",
    "end": "1864059"
  },
  {
    "text": "Paul can you see okay let me make just a bit bigger so I found this in in the",
    "start": "1864059",
    "end": "1873010"
  },
  {
    "text": "rust and a library it has a statistics package which is you know professional written it's kind of a thing and I said",
    "start": "1873010",
    "end": "1883240"
  },
  {
    "text": "that's sorry",
    "start": "1883240",
    "end": "1887070"
  },
  {
    "text": "and the road that's a terrible way of computing the mean of anything grossly",
    "start": "1896330",
    "end": "1901700"
  },
  {
    "text": "inefficient and Mar by accumulating errors so bad in fact I am melody from a review of solutions I found on a net in",
    "start": "1901700",
    "end": "1908180"
  },
  {
    "text": "a recent talk a better way to go would be to keep the accumulated some and do the division upon the mean being",
    "start": "1908180",
    "end": "1914210"
  },
  {
    "text": "requested of course the for the sorry Dom the",
    "start": "1914210",
    "end": "1920330"
  },
  {
    "text": "right formula one here the right recurrence is with the sum you keep the",
    "start": "1920330",
    "end": "1926000"
  },
  {
    "text": "sum as a running recurrence and whenever you ask for the average of course I give you the sum divided by the number so you",
    "start": "1926000",
    "end": "1932900"
  },
  {
    "text": "do only one division when asked like as things go like like right now you do a",
    "start": "1932900",
    "end": "1938120"
  },
  {
    "text": "division for each iteration so I don't know you know is this foul language who",
    "start": "1938120",
    "end": "1946610"
  },
  {
    "text": "thinks this is offensive I mean I'm a bit insecure right now because here's",
    "start": "1946610",
    "end": "1952490"
  },
  {
    "text": "what happened first of all I my post got like minus 18 points which is kind of a",
    "start": "1952490",
    "end": "1959270"
  },
  {
    "text": "negative record and then you ask someone",
    "start": "1959270",
    "end": "1965900"
  },
  {
    "text": "you know I see a bunch of downloads I ask which which parts of what I wrote were uncool by community standards",
    "start": "1965900",
    "end": "1972860"
  },
  {
    "text": "Thanks well I will happily download people who I think are obnoxious the problem is I",
    "start": "1972860",
    "end": "1980780"
  },
  {
    "text": "touched the sacred cow the moment you criticize the standard library of the Ross program language you're gonna have",
    "start": "1980780",
    "end": "1988190"
  },
  {
    "text": "a bad day and so I did I was like well",
    "start": "1988190",
    "end": "1993560"
  },
  {
    "text": "there's no more there's not nothing significant in this thread except that I was left out the door nobody one has -",
    "start": "1993560",
    "end": "1999080"
  },
  {
    "text": "not what I wanted to do nobody cared I didn't get any advice I didn't get any any light I did get a lot of heat though",
    "start": "1999080",
    "end": "2008400"
  },
  {
    "text": "all right so now let's actually do the right thing and look at a few problems",
    "start": "2010620",
    "end": "2016870"
  },
  {
    "text": "that kind of take us from the nice algorithms world into the concrete bits and pieces world well first of all like",
    "start": "2016870",
    "end": "2025150"
  },
  {
    "text": "how do you deal with averaging integrals consider this you have",
    "start": "2025150",
    "end": "2030220"
  },
  {
    "text": "an image and you want to compute the average pixel whatever intensity color",
    "start": "2030220",
    "end": "2035980"
  },
  {
    "text": "or not and you're averaging 8 bit numbers how would you go about it",
    "start": "2035980",
    "end": "2045059"
  },
  {
    "text": "what types do you use for your summation and what types do use for division so",
    "start": "2050820",
    "end": "2057908"
  },
  {
    "text": "we're starting with unsigned car yes please double our float do you want to",
    "start": "2057909",
    "end": "2065530"
  },
  {
    "text": "sum using double or float or divide using double or float or both",
    "start": "2065530",
    "end": "2071280"
  },
  {
    "text": "well the summation is double is a bit more expensive than summation in long integers so maybe I want to do something",
    "start": "2071280",
    "end": "2079030"
  },
  {
    "text": "like this I summed up bytes in a long integer because that's one cycle per iteration and then when I do the",
    "start": "2079030",
    "end": "2085330"
  },
  {
    "text": "division I definitely don't want to do the integral division because either I get your average pics is like 8 right I",
    "start": "2085330",
    "end": "2091810"
  },
  {
    "text": "want the fractional number I want the full information so I do the division in double sole of a Sun we are encountering",
    "start": "2091810",
    "end": "2099250"
  },
  {
    "text": "this complicated world in which integrals must be stunned another integral type but different than the",
    "start": "2099250",
    "end": "2105099"
  },
  {
    "text": "original integral potentially and the division should occur in a kind of some fractional type right so this is the",
    "start": "2105099",
    "end": "2113260"
  },
  {
    "text": "right way to average integrals I don't think you want to average intercourse and truncate like you know like an idiot",
    "start": "2113260",
    "end": "2118270"
  },
  {
    "text": "in the last step you of course I'm going to throw away all of this information I don't care no you do want the",
    "start": "2118270",
    "end": "2123400"
  },
  {
    "text": "information otherwise use some by hand right then we have things like custom",
    "start": "2123400",
    "end": "2128680"
  },
  {
    "text": "numerix big integer ok I thought this is",
    "start": "2128680",
    "end": "2135280"
  },
  {
    "text": "fancy you really bought it big integer things like if infinite precision reals and all that stuff and",
    "start": "2135280",
    "end": "2142230"
  },
  {
    "text": "worst of all there are sequences of which I don't know the lengths in advance they're singly linked lists as",
    "start": "2142230",
    "end": "2148119"
  },
  {
    "text": "filters on other sequences there file streams etc anything that comes as a stream does it don't know the length in",
    "start": "2148119",
    "end": "2154630"
  },
  {
    "text": "advance right however there are things",
    "start": "2154630",
    "end": "2160180"
  },
  {
    "text": "that you know the length in advance of and for those you don't want to do this extra work of",
    "start": "2160180",
    "end": "2165560"
  },
  {
    "text": "plus plus plus plus plus plus right you don't add all these additions because they take time so all of a sudden we're",
    "start": "2165560",
    "end": "2171770"
  },
  {
    "text": "looking at two classes of algorithms we have summation of things that are countable into that I know the size of",
    "start": "2171770",
    "end": "2178520"
  },
  {
    "text": "and I'm looking at summation of things that I don't know the size of in advance so I need to keep a track of it myself",
    "start": "2178520",
    "end": "2184270"
  },
  {
    "text": "so remember I mentioned in the very beginning there's a style of form of duplication that we trained ourselves to",
    "start": "2184270",
    "end": "2190220"
  },
  {
    "text": "ignore there is and this is it it's a",
    "start": "2190220",
    "end": "2195320"
  },
  {
    "text": "manifestation of it right another thing is all real numerix",
    "start": "2195320",
    "end": "2205030"
  },
  {
    "text": "should use the wrong element type for summon division every that's floating point or whatever infinite Persinger",
    "start": "2205030",
    "end": "2211400"
  },
  {
    "text": "real you name it should use its own element type for summation and division all buildings signed the integrals",
    "start": "2211400",
    "end": "2218360"
  },
  {
    "text": "should carry their sum as longer you long for efficiency as I said it would",
    "start": "2218360",
    "end": "2223430"
  },
  {
    "text": "be silly to sum all by Tina's bite but division goes out goes as double and all",
    "start": "2223430",
    "end": "2229970"
  },
  {
    "text": "custom integrals should carry the sum as their own type but if I to divide to double this is contentious maybe it's",
    "start": "2229970",
    "end": "2235580"
  },
  {
    "text": "not the best decision but I couldn't find a better one so with these two slides this guy and the previous guy we",
    "start": "2235580",
    "end": "2243620"
  },
  {
    "text": "are having a specification that we need to implement so we are looking at I",
    "start": "2243620",
    "end": "2251630"
  },
  {
    "text": "don't know let's let's say maybe 30 lines of specification right so you",
    "start": "2251630",
    "end": "2259010"
  },
  {
    "text": "should you know whenever the type is a you know small integer put in a long whenever it's a small integers on sign",
    "start": "2259010",
    "end": "2264710"
  },
  {
    "text": "Poona sign long divided by double if it's custom whatever so we have a number of decisions that inform our simple loop",
    "start": "2264710",
    "end": "2271970"
  },
  {
    "text": "here so let's proceed and implement that specification and in the D language it",
    "start": "2271970",
    "end": "2279320"
  },
  {
    "text": "turns out it's it's simple to express what we want to do so first of like",
    "start": "2279320",
    "end": "2289100"
  },
  {
    "text": "alias would be undefined this name to to supplant this guy so we alias e to be",
    "start": "2289100",
    "end": "2296720"
  },
  {
    "start": "2294000",
    "end": "2294000"
  },
  {
    "text": "the element type of the sequence if if it's an array of doubles that would be double if it's",
    "start": "2296720",
    "end": "2301940"
  },
  {
    "text": "another vintages that will be int and so on so it would be my element type now I'm",
    "start": "2301940",
    "end": "2308210"
  },
  {
    "text": "gonna do something interesting I do a query on the capability of type II",
    "start": "2308210",
    "end": "2313270"
  },
  {
    "text": "static if is typeof e of 0.0 what do you",
    "start": "2313270",
    "end": "2320960"
  },
  {
    "text": "think this guy does yes please thank you",
    "start": "2320960",
    "end": "2336290"
  },
  {
    "text": "exactly so this is a capability test I'm trying to initialize an object of type",
    "start": "2336290",
    "end": "2342559"
  },
  {
    "text": "II with the constant 0.0 which is a floating-point constant if that works",
    "start": "2342559",
    "end": "2347990"
  },
  {
    "text": "the result is going to have a valid type ie II and the study give queries whether",
    "start": "2347990",
    "end": "2357589"
  },
  {
    "text": "that type exists whether the expression is correct and compatible if is an int",
    "start": "2357589",
    "end": "2365690"
  },
  {
    "text": "in the D language you cannot initialize an int from a floating point value you",
    "start": "2365690",
    "end": "2371030"
  },
  {
    "text": "cannot and it shouldn't it shouldn't be in C even but that's side story right so",
    "start": "2371030",
    "end": "2377599"
  },
  {
    "text": "you can't stay floating point number and cram it into an integer it doesn't fit",
    "start": "2377599",
    "end": "2382660"
  },
  {
    "text": "Sense and Sensibility so therefore if is int and you're trying to create an int from 0.0 it's just not",
    "start": "2382660",
    "end": "2390020"
  },
  {
    "text": "going to work so the static if is going to return false which means here I have",
    "start": "2390020",
    "end": "2399470"
  },
  {
    "text": "all of my fractional types user-defined built in double float 80-bit double",
    "start": "2399470",
    "end": "2407780"
  },
  {
    "text": "unlimited precision real point number you name it if it can initiate if I can",
    "start": "2407780",
    "end": "2412970"
  },
  {
    "text": "initialize it from a floating point number it's a floating point number okay",
    "start": "2412970",
    "end": "2418990"
  },
  {
    "text": "in that case I'm going to say that's this my summation type is going to be exactly the element and I'm calling",
    "start": "2418990",
    "end": "2425510"
  },
  {
    "text": "unqualified on it because I don't want to be like immutable or cons I just wanted to be mutable so I'm",
    "start": "2425510",
    "end": "2431980"
  },
  {
    "text": "unqualified the type I'm removing the potential qualifies that to prevent me from changing it and this is the",
    "start": "2431980",
    "end": "2438490"
  },
  {
    "text": "division type that is going to be the exact same element otherwise so this is",
    "start": "2438490",
    "end": "2445210"
  },
  {
    "text": "all of my fractional numbers everything that's real well the second capability",
    "start": "2445210",
    "end": "2452350"
  },
  {
    "text": "test are you an integral type so I'm looking at by the way this Bank here",
    "start": "2452350",
    "end": "2459090"
  },
  {
    "text": "this the C++ translation would look like that right that's not the love sign it's",
    "start": "2459090",
    "end": "2467410"
  },
  {
    "text": "just angle brackets I'm sorry to be prosaic here so whenever it's like bang",
    "start": "2467410",
    "end": "2473530"
  },
  {
    "text": "in the D language it means it's like a template instantiation right so if the",
    "start": "2473530",
    "end": "2482110"
  },
  {
    "text": "type is integral then we we do some more digging because we want to choose signed",
    "start": "2482110",
    "end": "2489010"
  },
  {
    "text": "types versus unsigned types for the",
    "start": "2489010",
    "end": "2494470"
  },
  {
    "text": "summation and you test well is the the smallest representable e is it less than",
    "start": "2494470",
    "end": "2499690"
  },
  {
    "text": "zero if it's less than zero that's a number that can be both negative and positive otherwise it's unsigned because",
    "start": "2499690",
    "end": "2505330"
  },
  {
    "text": "unsigned numbers don't have negative can't represent negative numbers and",
    "start": "2505330",
    "end": "2515200"
  },
  {
    "text": "finally you know the default case I'm going to go if this must be something user-defined and I'm going to go with on",
    "start": "2515200",
    "end": "2520570"
  },
  {
    "text": "quali and double so this implementation implements the specification that we",
    "start": "2520570",
    "end": "2525850"
  },
  {
    "text": "just thought about right what happens here what happens there at this point I",
    "start": "2525850",
    "end": "2532750"
  },
  {
    "text": "have two types one is s and one is D s is the summation type D is the division type and what's left to do is to proceed",
    "start": "2532750",
    "end": "2541960"
  },
  {
    "text": "with the algorithm remember we had two algorithms one was for things I know the",
    "start": "2541960",
    "end": "2548830"
  },
  {
    "text": "length of in advance one was for things I have no idea about the length in advance in a traditional",
    "start": "2548830",
    "end": "2555370"
  },
  {
    "text": "approach I would implement two the two algorithms separately I would duplicate",
    "start": "2555370",
    "end": "2560710"
  },
  {
    "text": "the code in here we're going to do something much simpler and more compact which is innum",
    "start": "2560710",
    "end": "2575470"
  },
  {
    "text": "has length equals these type of items dot length what is this",
    "start": "2575470",
    "end": "2582838"
  },
  {
    "text": "thank you so it queries whether this expression has a type ie",
    "start": "2586440",
    "end": "2592210"
  },
  {
    "text": "it exists it's compatible it type checks it it's correct so it's essentially I'm asking do you",
    "start": "2592210",
    "end": "2598480"
  },
  {
    "text": "have a method called length and in the",
    "start": "2598480",
    "end": "2603700"
  },
  {
    "text": "CI in the D language the way it goes is if you implement length you're required to implement it to mean actually the",
    "start": "2603700",
    "end": "2609309"
  },
  {
    "text": "length of a sequence you could of course you could be perverse and implement",
    "start": "2609309",
    "end": "2614859"
  },
  {
    "text": "length to not do that into the return a string what the health right but that would you know you can subvert any type",
    "start": "2614859",
    "end": "2621490"
  },
  {
    "text": "system and any introspection system yes",
    "start": "2621490",
    "end": "2625260"
  },
  {
    "text": "what if the container has a method that's called length but is slow it",
    "start": "2627869",
    "end": "2632920"
  },
  {
    "text": "solvent that would be a program mistake there'll be a mistake in the D language",
    "start": "2632920",
    "end": "2639099"
  },
  {
    "text": "there's a method called walk length which is oven and best-effort so it",
    "start": "2639099",
    "end": "2645280"
  },
  {
    "text": "solve an oreo of anything if you can but this is not best effort this is if you implement it ever you must call it if",
    "start": "2645280",
    "end": "2653799"
  },
  {
    "text": "you implement it ever it must be all one otherwise use walk length so length",
    "start": "2653799",
    "end": "2659619"
  },
  {
    "text": "means of one length and again I'm doing a capability test well in him has length equals is this guy so has length is sort",
    "start": "2659619",
    "end": "2666970"
  },
  {
    "text": "of a compile-time boolean value right it means this guy is telling me during",
    "start": "2666970",
    "end": "2672369"
  },
  {
    "text": "compilation not at runtime not dynamically it's telling me during compilation what are the type I got",
    "start": "2672369",
    "end": "2678839"
  },
  {
    "text": "knows its length or not so at this point I can say okay sure so if it has length",
    "start": "2678839",
    "end": "2685480"
  },
  {
    "text": "then I know the length so I'm initializing and from items length otherwise I'm going in Eliza's",
    "start": "2685480",
    "end": "2691750"
  },
  {
    "text": "with zero and not going to it compute it and of course inside the loop",
    "start": "2691750",
    "end": "2697720"
  },
  {
    "text": "I have another study gift because I want to increment it conditionally now the",
    "start": "2697720",
    "end": "2705760"
  },
  {
    "text": "nice thing is that I get to reuse a lot of the you know a lot of the other things in this function instead of",
    "start": "2705760",
    "end": "2712390"
  },
  {
    "text": "writing to artifacts that are completely sort of separate independent mostly",
    "start": "2712390",
    "end": "2718570"
  },
  {
    "text": "duplicate the nice thing is that this does scale I've looked at many code",
    "start": "2718570",
    "end": "2724240"
  },
  {
    "text": "bases in the D language starting from the standard library and there's hedge funds using the D language and there's a",
    "start": "2724240",
    "end": "2730770"
  },
  {
    "text": "networking companies using it and that's such like that it's static if occurs",
    "start": "2730770",
    "end": "2737020"
  },
  {
    "text": "with the same frequency as if I carry eight lines every eight lines you make a",
    "start": "2737020",
    "end": "2745630"
  },
  {
    "text": "design decision every eight lines you fork you fork what you do you don't",
    "start": "2745630",
    "end": "2754870"
  },
  {
    "text": "forget runtime you fork in design space",
    "start": "2754870",
    "end": "2760200"
  },
  {
    "text": "so this is what I think is really remarkable that that you get this",
    "start": "2761910",
    "end": "2766990"
  },
  {
    "text": "Fourier transform of the if statement which is in time domain because if means",
    "start": "2766990",
    "end": "2772000"
  },
  {
    "text": "like I'm going to go through different paths during runtime with static if and going through different paths during",
    "start": "2772000",
    "end": "2778870"
  },
  {
    "text": "compilation I decide to do different things to generate code different ways",
    "start": "2778870",
    "end": "2784350"
  },
  {
    "text": "so this is going to generate different functions for different types and it's going to generate the best function for",
    "start": "2784350",
    "end": "2790270"
  },
  {
    "text": "each type so you know there's there'll be like there's a lot of aftermath here",
    "start": "2790270",
    "end": "2799030"
  },
  {
    "text": "like what do we do then T inputs we return nan here you can handle it outside some I don't see this as an",
    "start": "2799030",
    "end": "2806260"
  },
  {
    "text": "important problem",
    "start": "2806260",
    "end": "2808890"
  },
  {
    "text": "who knows about the kahan algorithm thank you okay the Bloomberg first folks right",
    "start": "2812599",
    "end": "2818539"
  },
  {
    "text": "you're not that Bloomberg okay for that the folks would do real math okay so",
    "start": "2818539",
    "end": "2823880"
  },
  {
    "text": "these it turns out that if you sum any doubles you're going to consider this you have some very large numbers and you",
    "start": "2823880",
    "end": "2831410"
  },
  {
    "text": "have a lot of small numbers and if you sum increasingly the small numbers you",
    "start": "2831410",
    "end": "2836839"
  },
  {
    "text": "some two very large numbers the large number is going to kind of say oh this is too small I'm not going to modify",
    "start": "2836839",
    "end": "2842029"
  },
  {
    "text": "myself so you're going to get even though you have a very long tail of small numbers those are not going to",
    "start": "2842029",
    "end": "2847669"
  },
  {
    "text": "count for the actual average and so you get this propagating error problem",
    "start": "2847669",
    "end": "2852969"
  },
  {
    "text": "fortunately there are some very clever algorithms which i recommend you google for these are interesting exercises in",
    "start": "2852969",
    "end": "2859039"
  },
  {
    "text": "algorithm design you they cancel it they canceled the the error progressively as",
    "start": "2859039",
    "end": "2864799"
  },
  {
    "text": "they some numbers and they're very interesting and of course you want to do",
    "start": "2864799",
    "end": "2870410"
  },
  {
    "text": "that for floating-point numbers because you get much better results at a small cost inefficiency",
    "start": "2870410",
    "end": "2878079"
  },
  {
    "start": "2880000",
    "end": "2880000"
  },
  {
    "text": "so you know I have a few second-order insights after we looked at this this",
    "start": "2885680",
    "end": "2892079"
  },
  {
    "text": "definition here so what's cool about OOP",
    "start": "2892079",
    "end": "2900530"
  },
  {
    "text": "he defined interfaces and classes and the override methods to account for the differences between interfaces and",
    "start": "2903079",
    "end": "2910200"
  },
  {
    "text": "classes who thinks woop is awesome one",
    "start": "2910200",
    "end": "2917910"
  },
  {
    "text": "yes yes one okay this is the right audience you can go so you know OOP has",
    "start": "2917910",
    "end": "2927329"
  },
  {
    "text": "its limitations I mean many people thought is going to be like amazing in the 90s and early 2000s and then kind of",
    "start": "2927329",
    "end": "2934410"
  },
  {
    "text": "wait a second we can't do all these things we want to do with OOP right and then one yeah we have in C++",
    "start": "2934410",
    "end": "2941130"
  },
  {
    "text": "in the c-plus Emil year we have the journey programming notion is like ah let's define generic algorithms we devise data requirements we specialize",
    "start": "2941130",
    "end": "2948180"
  },
  {
    "text": "across this thing a BTS and etc etc and it looks like neither of these fundamental approaches is doing the",
    "start": "2948180",
    "end": "2955710"
  },
  {
    "text": "right thing by our you know but I won't want to do we want to implement code",
    "start": "2955710",
    "end": "2961109"
  },
  {
    "text": "without application that expresses what we want to do it doesn't seem to cut",
    "start": "2961109",
    "end": "2967470"
  },
  {
    "text": "just right the proverbial pie and I",
    "start": "2967470",
    "end": "2972930"
  },
  {
    "text": "think what happens is in in OOP we have type information wastage the typing",
    "start": "2972930",
    "end": "2981420"
  },
  {
    "text": "range is thrown away is like are just renowned virtuals and you're good yeah they're gonna be seven times of slow but",
    "start": "2981420",
    "end": "2986670"
  },
  {
    "text": "you're good who cares what seven times between friends so you know you lose the",
    "start": "2986670",
    "end": "2992400"
  },
  {
    "text": "type information by inheritance and type II erasure or you can overuse types by",
    "start": "2992400",
    "end": "2998339"
  },
  {
    "text": "doing a lot of type based meta programming like in in several circles you would do a lot of complicated type",
    "start": "2998339",
    "end": "3004569"
  },
  {
    "text": "base meta programming to do actually pretty trivial things that are easy should be easy should be simple should",
    "start": "3004569",
    "end": "3011030"
  },
  {
    "text": "be trivial and I think the key to the",
    "start": "3011030",
    "end": "3016190"
  },
  {
    "text": "kingdom here is introspection you should be able to",
    "start": "3016190",
    "end": "3022670"
  },
  {
    "text": "look at the type while you compile your code and make decisions depending on",
    "start": "3022670",
    "end": "3029960"
  },
  {
    "text": "what that type is knows what to do you",
    "start": "3029960",
    "end": "3036200"
  },
  {
    "text": "can consider a pipe at the the most basic level as a as an advertisement for",
    "start": "3036200",
    "end": "3043670"
  },
  {
    "text": "what he can do you know we're coding are like Java Java",
    "start": "3043670",
    "end": "3050680"
  },
  {
    "text": "JavaScript okay so anyway in these",
    "start": "3050680",
    "end": "3056030"
  },
  {
    "text": "languages it's quite common to open a class you know look at a class and look",
    "start": "3056030",
    "end": "3062089"
  },
  {
    "text": "at its methods and treat them as capabilities oh this guy knows how to do bark and hardens or to eat not knows how",
    "start": "3062089",
    "end": "3068539"
  },
  {
    "text": "to do meow so therefore I can use these methods in a specific manner so the type",
    "start": "3068539",
    "end": "3074780"
  },
  {
    "text": "is you know the methods of a type the interface of a type is a is really an advertisement for other type is able to",
    "start": "3074780",
    "end": "3080900"
  },
  {
    "text": "do and why not I ask why not open the",
    "start": "3080900",
    "end": "3087140"
  },
  {
    "text": "type during compilation ask the type what he can do and generate code",
    "start": "3087140",
    "end": "3092210"
  },
  {
    "text": "depending on those this is what I think",
    "start": "3092210",
    "end": "3097400"
  },
  {
    "text": "is going to be big in the next decade in programming introspection reflection and",
    "start": "3097400",
    "end": "3104049"
  },
  {
    "text": "static code generation and I noticed",
    "start": "3104049",
    "end": "3112640"
  },
  {
    "start": "3108000",
    "end": "3108000"
  },
  {
    "text": "that a lot of programmers consider code size some sort of a measure of their",
    "start": "3112640",
    "end": "3118930"
  },
  {
    "text": "prowess as programmers especially like when you you know when I began and we",
    "start": "3118930",
    "end": "3124039"
  },
  {
    "text": "were like to this day when I write first 1,000 lines of seeing it was awesome",
    "start": "3124039",
    "end": "3131510"
  },
  {
    "text": "it was a single function by the way it does just mean like oh yeah I have a main that's 1,000 lines worth and if you",
    "start": "3131510",
    "end": "3138470"
  },
  {
    "text": "feel it's like oh it means it's you know I'm a good programmer I wrote a lot of code it must be that I saw something",
    "start": "3138470",
    "end": "3144470"
  },
  {
    "text": "interesting and sadly this kind of stayed with me for a while so I and I",
    "start": "3144470",
    "end": "3150740"
  },
  {
    "text": "think that impede my development as a programmer because actually the the amount of code ridden",
    "start": "3150740",
    "end": "3156410"
  },
  {
    "text": "is cost is not profit like a good",
    "start": "3156410",
    "end": "3162290"
  },
  {
    "text": "manager who asked you know what the d-team plan that feature yes how many lines did that cost you what was the",
    "start": "3162290",
    "end": "3168410"
  },
  {
    "text": "price of that feature yeah it cuz like you know six thousand lines of code",
    "start": "3168410",
    "end": "3174740"
  },
  {
    "text": "maybe that's too much you we pay too much for this let's scrap it loud and",
    "start": "3174740",
    "end": "3187060"
  },
  {
    "text": "pay extra to yeah pay extra to scrap actually you know on on github they show",
    "start": "3187060",
    "end": "3192800"
  },
  {
    "text": "you the numbers of the lines you add and the numbers the lines you do eat right",
    "start": "3192800",
    "end": "3197930"
  },
  {
    "text": "so you know I would pay people on the the sum of the absolute of the tomb like",
    "start": "3197930",
    "end": "3205970"
  },
  {
    "text": "if you had some lines and delete some lines I'm taking at the you know the absolute value of the lines deleted and",
    "start": "3205970",
    "end": "3211370"
  },
  {
    "text": "I would add it to the lines here and it's like actually actually not I would put minus in front of the lines added put minus so that I said put plus on the",
    "start": "3211370",
    "end": "3218360"
  },
  {
    "text": "lines deleted and pay people based on that awesome concert where do we start",
    "start": "3218360",
    "end": "3223730"
  },
  {
    "text": "okay so like I like to count lines because I want every line to count to be",
    "start": "3223730",
    "end": "3230000"
  },
  {
    "text": "meaningful so average can average anything average of all the most average function there is it has 26 lines of",
    "start": "3230000",
    "end": "3237650"
  },
  {
    "text": "code three lines are support imports and naming thirteen lines are the design specification which from the slides it",
    "start": "3237650",
    "end": "3244550"
  },
  {
    "text": "comes to about just as much time lines our time domain sweat of the broad",
    "start": "3244550",
    "end": "3249560"
  },
  {
    "text": "that's my computation so ten lines is the actual effort and most lines should",
    "start": "3249560",
    "end": "3258530"
  },
  {
    "text": "matter you know you should push computation for they should make progress in your computation you should have every line in your code just push",
    "start": "3258530",
    "end": "3265580"
  },
  {
    "text": "the goddamn thing forward sadly I'm seeing code at one time I was",
    "start": "3265580",
    "end": "3272870"
  },
  {
    "text": "like I'll look at the red black tree implementation in C++ as long as I had a simple thing do they store the boolean",
    "start": "3272870",
    "end": "3279800"
  },
  {
    "text": "to them massage it in a pointer to restoring it separately the read-back tree has some pointers has a",
    "start": "3279800",
    "end": "3285200"
  },
  {
    "text": "boolean some implementations take the boolean and stick it in one the last the",
    "start": "3285200",
    "end": "3290510"
  },
  {
    "text": "least significant bit of a pointer you know talking about for size right for",
    "start": "3290510",
    "end": "3298820"
  },
  {
    "text": "size purposes so how difficult it can be you look at the red black tree",
    "start": "3298820",
    "end": "3304640"
  },
  {
    "text": "implementation in C++ you see whether the boolean is massaged in there or not I gave myself 15 minutes I could not do",
    "start": "3304640",
    "end": "3313490"
  },
  {
    "text": "it you don't you don't know where work is being done crack open boost",
    "start": "3313490",
    "end": "3320329"
  },
  {
    "text": "crack up on GCC like you know the standard library crack open anything it's all good oh my goodness",
    "start": "3320329",
    "end": "3326450"
  },
  {
    "text": "they send you from one you don't know where things are that we don't know where work is being done I want work to",
    "start": "3326450",
    "end": "3333770"
  },
  {
    "text": "be visibly done in code not scaffolding it's not like scaffolding that this one",
    "start": "3333770",
    "end": "3339650"
  },
  {
    "text": "line in 100 equals a plus one you got it",
    "start": "3339650",
    "end": "3345369"
  },
  {
    "text": "right I don't like that so it's essential that we have all of this kind",
    "start": "3345369",
    "end": "3351500"
  },
  {
    "text": "of making decisions for design and are making decisions about computation I'm pushing the goddamn computation forward",
    "start": "3351500",
    "end": "3357980"
  },
  {
    "text": "they should go together in harmony I mentioned this there's a bunch of use",
    "start": "3357980",
    "end": "3367700"
  },
  {
    "text": "of static if I think it's the the best construct in the deprogram language and it it changes the wasting quite quite",
    "start": "3367700",
    "end": "3376040"
  },
  {
    "text": "dramatically symmetry project as",
    "start": "3376040",
    "end": "3382160"
  },
  {
    "text": "symmetries is a hedge fund in London and Weka is a networking company a network",
    "start": "3382160",
    "end": "3388130"
  },
  {
    "text": "storage company in Tel Aviv so I've kind of was curious to look at their code and",
    "start": "3388130",
    "end": "3393710"
  },
  {
    "text": "they'd simply be using static if about as frequently as if itself you can see a",
    "start": "3393710",
    "end": "3400040"
  },
  {
    "text": "page of D language code without a design domain decision this should be the way things should go in all programming",
    "start": "3400040",
    "end": "3407180"
  },
  {
    "text": "languages",
    "start": "3407180",
    "end": "3409780"
  },
  {
    "text": "what do you think should be filling the dot-dot-dot in there most traders in the",
    "start": "3413749",
    "end": "3422099"
  },
  {
    "text": "stock market think in terms of profit and loss Zen traders think in terms of",
    "start": "3422099",
    "end": "3427819"
  },
  {
    "text": "Bloomberg fees that's brutal",
    "start": "3427819",
    "end": "3433289"
  },
  {
    "text": "I didn't mean that so good trader will think in terms of risk actually you know",
    "start": "3433289",
    "end": "3441599"
  },
  {
    "text": "their core risk manager so they all they do is risk management so if something is makes much much money less money it has",
    "start": "3441599",
    "end": "3448289"
  },
  {
    "text": "you know you gotta just say what's my risk here what am i Reese how much am i risking and how do I manage that risk so",
    "start": "3448289",
    "end": "3454739"
  },
  {
    "text": "this is the most important thing in in trading in the stock market is figuring out what your risk is what the exposure",
    "start": "3454739",
    "end": "3460619"
  },
  {
    "text": "is and going from there beginners tend to think oh make you so much money I'm losing so much money it's not about the",
    "start": "3460619",
    "end": "3465869"
  },
  {
    "text": "money it's about the risk and I would contend that today most program things",
    "start": "3465869",
    "end": "3472799"
  },
  {
    "text": "in terms of things like data structures and algorithms or interfaces and objects",
    "start": "3472799",
    "end": "3477929"
  },
  {
    "text": "or lists and functions pick your language pick your favorites maybe even",
    "start": "3477929",
    "end": "3485549"
  },
  {
    "text": "over ownership if you're a Ross programmer I think programmers should be",
    "start": "3485549",
    "end": "3492900"
  },
  {
    "text": "thinking in terms of introspection and computation I look at types I figure out",
    "start": "3492900",
    "end": "3498630"
  },
  {
    "text": "what they can do and I push computation forward using this information that I",
    "start": "3498630",
    "end": "3504089"
  },
  {
    "text": "gain don't forget a good language should",
    "start": "3504089",
    "end": "3509789"
  },
  {
    "text": "be in my opinion algorithmically inclined keeping it real allows you to",
    "start": "3509789",
    "end": "3517229"
  },
  {
    "text": "do what you want to do and the code reads like it does do what you want it",
    "start": "3517229",
    "end": "3522420"
  },
  {
    "text": "to do and your opinion may be different and that's brilliant",
    "start": "3522420",
    "end": "3528029"
  },
  {
    "text": "thank you very much [Applause]",
    "start": "3528029",
    "end": "3537709"
  }
]