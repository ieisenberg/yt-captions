[
  {
    "text": "all right hello after lunch break to the first C++ joke",
    "start": "9330",
    "end": "15570"
  },
  {
    "text": "today my name is Andreas fetish my work is software developer as a trainer and",
    "start": "15570",
    "end": "21450"
  },
  {
    "text": "speaker I'm also happen to be the creator of C++ insights even that it's",
    "start": "21450",
    "end": "29369"
  },
  {
    "text": "really hard for me to see you so if everyone storms out before this presentation is over please give me a",
    "start": "29369",
    "end": "35489"
  },
  {
    "text": "heads up because I can barely see you but let's try this anyway who here by a show of hands has heard of C++ insights",
    "start": "35489",
    "end": "43760"
  },
  {
    "text": "are as fantastic ok and not a question who has heard of compiled a Explorer",
    "start": "43760",
    "end": "49530"
  },
  {
    "text": "format got bold excellent alright for others who have not heard of C++",
    "start": "49530",
    "end": "55109"
  },
  {
    "text": "insights I will introduce it to you topic of today is C++ and lambdas",
    "start": "55109",
    "end": "61379"
  },
  {
    "text": "demystified so we are talking about the language and because we are talking about language I like to take the",
    "start": "61379",
    "end": "68460"
  },
  {
    "text": "opportunity to take to talk a little bit about the different language about the",
    "start": "68460",
    "end": "73680"
  },
  {
    "text": "German language in particular man name my last name is fatik and this is a",
    "start": "73680",
    "end": "80220"
  },
  {
    "text": "meaningful word in chairman because it's an adjective and translated to English it roughly means something like finished",
    "start": "80220",
    "end": "88500"
  },
  {
    "text": "already complete or completed this is an excellent name to be in someone's team because everybody sings down the team is",
    "start": "88500",
    "end": "95940"
  },
  {
    "text": "always finished it's not true but they try it's also an a fortunate fact that",
    "start": "95940",
    "end": "103680"
  },
  {
    "text": "in German it's an adjective and an as an adjective it's spelled with the lower F at the beginning however as a name it's",
    "start": "103680",
    "end": "111360"
  },
  {
    "text": "spelt with a capital F so I'm constantly fighting with stewed spellchecker which version is the right one and so",
    "start": "111360",
    "end": "118470"
  },
  {
    "text": "far we cannot agree I'm telling the story about my name though for a couple",
    "start": "118470",
    "end": "125130"
  },
  {
    "text": "of times and every time I can add another piece to it so I know know that",
    "start": "125130",
    "end": "130950"
  },
  {
    "text": "it's also a term known in yiddish the",
    "start": "130950",
    "end": "137250"
  },
  {
    "text": "sadder part about my own name is that for roughly 30 years",
    "start": "137250",
    "end": "142860"
  },
  {
    "text": "I mispronounced my own name all right I'm still today and not able to",
    "start": "142860",
    "end": "149460"
  },
  {
    "text": "pronounce it the right way at least in proper German because in proper German it is pronounced fear T SH is he at the",
    "start": "149460",
    "end": "157470"
  },
  {
    "text": "end you to my hometown where I come from it's a hard G ok at the end so I say",
    "start": "157470",
    "end": "165120"
  },
  {
    "text": "fair tick well there is no such word in German so everybody gets what I'm",
    "start": "165120",
    "end": "170880"
  },
  {
    "text": "telling so but back to C++ and lambdas this is a chart illustrating the",
    "start": "170880",
    "end": "179880"
  },
  {
    "text": "evolution of lambdas it goes through all the standards and from left to the right we have the",
    "start": "179880",
    "end": "186600"
  },
  {
    "text": "capture list and in C++ 11 we were able to capture by copy by reference by name",
    "start": "186600",
    "end": "193590"
  },
  {
    "text": "copy by named reference we were able to capture this and of course packs",
    "start": "193590",
    "end": "199190"
  },
  {
    "text": "parameter packs with C++ 11 we get got",
    "start": "199190",
    "end": "205530"
  },
  {
    "text": "something like in it capture so we can introduce a new name from a captured",
    "start": "205530",
    "end": "211739"
  },
  {
    "text": "variable we will look in this later again by copy or by reference we C++ 17",
    "start": "211739",
    "end": "220050"
  },
  {
    "text": "we got the ability to capture something which is written star this we will also",
    "start": "220050",
    "end": "226230"
  },
  {
    "text": "look into this next to the capture list with C++ 20 if my class Bowl is right we",
    "start": "226230",
    "end": "234690"
  },
  {
    "text": "will have the ankle brackets and in that angle brackets we can write something like type name so we will have templated",
    "start": "234690",
    "end": "243930"
  },
  {
    "text": "Landers in C++ 20 I will show a couple of examples for that next in parenthesis",
    "start": "243930",
    "end": "251940"
  },
  {
    "text": "we have the parameter the lambda itself takes with C++ 11 we can pass in a type",
    "start": "251940",
    "end": "259079"
  },
  {
    "text": "like int or our own type class whatsoever with C++ 14 we got generic",
    "start": "259080",
    "end": "267390"
  },
  {
    "text": "lambdas and now we can say Auto at this place this is the only place where we",
    "start": "267390",
    "end": "272640"
  },
  {
    "text": "can say Auto in a parameter list so far next to this we have these specifiers",
    "start": "272640",
    "end": "279780"
  },
  {
    "text": "we C++ 11 mutable to tell that the lambda is capable of changing the values",
    "start": "279780",
    "end": "287190"
  },
  {
    "text": "captured we C++ 17 we got Const exper so",
    "start": "287190",
    "end": "292410"
  },
  {
    "text": "lambdas are implicitly Const X but they're I will show you examples for that and with C++ 20 we will get Const",
    "start": "292410",
    "end": "300780"
  },
  {
    "text": "evil and as I'm not a native speaker I'm still unsure if I'm pronounced this right because it's not evil its",
    "start": "300780",
    "end": "307800"
  },
  {
    "text": "evaluation at compile time it's little bit different than Const",
    "start": "307800",
    "end": "312840"
  },
  {
    "text": "exper it has more guarantees next we can",
    "start": "312840",
    "end": "318090"
  },
  {
    "text": "have the exception specification with no except around with C++ 20 in the ankle",
    "start": "318090",
    "end": "324630"
  },
  {
    "text": "brackets we will have expects and ensures coming form contracts so we can",
    "start": "324630",
    "end": "330900"
  },
  {
    "text": "also apply contracts to our Landers then there is the optional trailing return",
    "start": "330900",
    "end": "335970"
  },
  {
    "text": "type in case we like or we have to specify the return type of the lambda we",
    "start": "335970",
    "end": "341610"
  },
  {
    "text": "can say in there or any AB return type we like ant with C++ 20 as concepts will",
    "start": "341610",
    "end": "348750"
  },
  {
    "text": "be in C++ 20 there is now requires clause so we can apply concepts to",
    "start": "348750",
    "end": "354840"
  },
  {
    "text": "lambdas in C++ 2010 in the curly braces",
    "start": "354840",
    "end": "360720"
  },
  {
    "text": "below there is the body of the lambda and after they are in parentheses there go the actual parameters if you invoke",
    "start": "360720",
    "end": "367620"
  },
  {
    "text": "the lambda either directly or later so that's a brief overview about lambdas",
    "start": "367620",
    "end": "375480"
  },
  {
    "text": "and wizard overview I believe you can see that lambdas are constantly changed",
    "start": "375480",
    "end": "380910"
  },
  {
    "text": "from standard to standard so there are under active development I",
    "start": "380910",
    "end": "386550"
  },
  {
    "text": "would say now we are talking about",
    "start": "386550",
    "end": "392670"
  },
  {
    "text": "active development have a look at this piece of code in my question to you is",
    "start": "392670",
    "end": "399960"
  },
  {
    "text": "and I try to see you but you can shout it out is this well it or not in C++",
    "start": "399960",
    "end": "409610"
  },
  {
    "text": "any guesses well it in 20 so the correct",
    "start": "409990",
    "end": "417680"
  },
  {
    "text": "answer would be it depends it is well it in 20 so far I read mail on the WG 21",
    "start": "417680",
    "end": "424760"
  },
  {
    "text": "mailing list that they are thinking about disallowing this so what it",
    "start": "424760",
    "end": "430610"
  },
  {
    "text": "essentially does is it declares a default constructible MD lambda which is their default initialized of course what",
    "start": "430610",
    "end": "438650"
  },
  {
    "text": "else so let's go to the lambdas",
    "start": "438650",
    "end": "444080"
  },
  {
    "text": "internals here I have a more meaningful code example I have a conscience string",
    "start": "444080",
    "end": "451460"
  },
  {
    "text": "array which contains the string hello and you see Oslo and then I have a",
    "start": "451460",
    "end": "461000"
  },
  {
    "text": "lambda which captures the string and takes care of printing it out alright so",
    "start": "461000",
    "end": "467270"
  },
  {
    "text": "far nothing special now let's peek behind the scenes what's",
    "start": "467270",
    "end": "472610"
  },
  {
    "text": "going on there so for all those who are new to C++ insights to the C++ insights",
    "start": "472610",
    "end": "479270"
  },
  {
    "text": "as a website you can go to on the left you can enter the source code in C++ you",
    "start": "479270",
    "end": "486890"
  },
  {
    "text": "like to get more knowledge about it and then if you hit the Run button you get",
    "start": "486890",
    "end": "494210"
  },
  {
    "text": "on the right an enriched version enriched by what a compiler does for us",
    "start": "494210",
    "end": "501020"
  },
  {
    "text": "internally or adds to our code to make it compile you will see for example implicit conversion template",
    "start": "501020",
    "end": "507830"
  },
  {
    "text": "instantiation and all that kind of things for example here now we can see",
    "start": "507830",
    "end": "513880"
  },
  {
    "text": "how a lambda works this here is cylinder from the internal",
    "start": "513880",
    "end": "520640"
  },
  {
    "text": "view of the compiler what the compiler generates from us from the code on the",
    "start": "520640",
    "end": "525710"
  },
  {
    "text": "left is essentially a class it's from standards perspective either a class or",
    "start": "525710",
    "end": "532490"
  },
  {
    "text": "struct tool is provide or powered by clearing and clang choose to make it a",
    "start": "532490",
    "end": "537740"
  },
  {
    "text": "class so here it is a class and it has one specialty and this is the call operator",
    "start": "537740",
    "end": "546140"
  },
  {
    "text": "and the coal operators thing we invoke",
    "start": "546140",
    "end": "551630"
  },
  {
    "text": "or call if we call or invoke our lambda",
    "start": "551630",
    "end": "556870"
  },
  {
    "text": "so essentially we are able to write",
    "start": "556870",
    "end": "561890"
  },
  {
    "text": "lambda in C++ 98 so it's nothing new it's a class it's a call operator balls",
    "start": "561890",
    "end": "567680"
  },
  {
    "text": "have been there in C++ 98 but we C++ 11",
    "start": "567680",
    "end": "574670"
  },
  {
    "text": "the compiler is now able to transform this small and nice version of code into",
    "start": "574670",
    "end": "583720"
  },
  {
    "text": "this internal version so internally it's just syntactic sugar the compiler also",
    "start": "583720",
    "end": "591500"
  },
  {
    "text": "takes care of course of the captures we are requesting so there are members of",
    "start": "591500",
    "end": "596840"
  },
  {
    "text": "the class in this case I have a",
    "start": "596840",
    "end": "601930"
  },
  {
    "text": "reference to an array of size 15 here which is the string hello and you see",
    "start": "601930",
    "end": "609650"
  },
  {
    "text": "Oslo and this call operator I have the body from my lambda nice and easy and",
    "start": "609650",
    "end": "618910"
  },
  {
    "text": "later on as you can see the call operator invokes this lambda so this is",
    "start": "618910",
    "end": "626300"
  },
  {
    "text": "the basics about lenders internally",
    "start": "626300",
    "end": "631310"
  },
  {
    "text": "their classes they have members and the compiler just transforms this for us if",
    "start": "631310",
    "end": "637760"
  },
  {
    "text": "you have any questions feel free to ask them now or later I have a question for",
    "start": "637760",
    "end": "649760"
  },
  {
    "text": "you while developing C++ insides I tried carefully to find places where lambdas",
    "start": "649760",
    "end": "655790"
  },
  {
    "text": "can appear such as I can see that my transformation is correct and once I stumbled over this example",
    "start": "655790",
    "end": "664400"
  },
  {
    "text": "and it made missing in how many places can lambdas appear there and it",
    "start": "664400",
    "end": "674520"
  },
  {
    "text": "doesn't mean that it has to be meaningful or code your daily right it's",
    "start": "674520",
    "end": "680700"
  },
  {
    "text": "just a question we're in this piece of code can lambdas be appear just give me",
    "start": "680700",
    "end": "686640"
  },
  {
    "text": "a number we are not talking about",
    "start": "686640",
    "end": "693060"
  },
  {
    "text": "recursive lambdas would be another story",
    "start": "693060",
    "end": "698240"
  },
  {
    "text": "any guesses one one is correct but not",
    "start": "699980",
    "end": "706740"
  },
  {
    "text": "enough for is close it's five yeah 5 is",
    "start": "706740",
    "end": "723540"
  },
  {
    "text": "the correct answer you nice unlimited",
    "start": "723540",
    "end": "730830"
  },
  {
    "text": "would be a nice different answer but I take five here and the five places are I can use a lambda to initialize X not",
    "start": "730830",
    "end": "741120"
  },
  {
    "text": "really meaningful but I can do it I will show an example later which has more meaning to it I can use it in the full",
    "start": "741120",
    "end": "747930"
  },
  {
    "text": "loop in the initializing part to print out something like started then of",
    "start": "747930",
    "end": "754140"
  },
  {
    "text": "course I can use it again in the full loop for comparing or evaluating if the",
    "start": "754140",
    "end": "761160"
  },
  {
    "text": "full loop has to end so Derek and Ikram and X and invoke the lambda directly of",
    "start": "761160",
    "end": "766980"
  },
  {
    "text": "course and then I can do in the last part of the full loop to another printf",
    "start": "766980",
    "end": "773070"
  },
  {
    "text": "so that after each loop iteration it prints out after and of course I can",
    "start": "773070",
    "end": "778590"
  },
  {
    "text": "wrap up this whole printf in the lambda to invoke it so lambdas essentially can",
    "start": "778590",
    "end": "785910"
  },
  {
    "text": "be appear everywhere where an expression can appear yes",
    "start": "785910",
    "end": "792770"
  },
  {
    "text": "yes that would be possible as well so that was the the case before as the",
    "start": "798709",
    "end": "803730"
  },
  {
    "text": "printf takes a variable number of arguments in theory the number would be",
    "start": "803730",
    "end": "809270"
  },
  {
    "text": "probably not infinite because the compiler has a limit I believe but a large number yeah let's talk a little",
    "start": "809270",
    "end": "822149"
  },
  {
    "text": "bit about capturing and in this case capturing global variables the stick",
    "start": "822149",
    "end": "836880"
  },
  {
    "text": "code from the slide so what I have here is have a global variable a X if my main function and I have a lambda here which",
    "start": "836880",
    "end": "846149"
  },
  {
    "text": "increments X and sometimes when I showed this example I got two responses one is",
    "start": "846149",
    "end": "853470"
  },
  {
    "text": "this code does not compile because the lambda doesn't capture anything there is inator capture by copy nor capture by",
    "start": "853470",
    "end": "860220"
  },
  {
    "text": "reference and in addition the lambda is not able to increment X because it's not",
    "start": "860220",
    "end": "865709"
  },
  {
    "text": "mutable and this is partially true because it would be true if it's not a",
    "start": "865709",
    "end": "872850"
  },
  {
    "text": "global variable but for a global variable a global variable is always",
    "start": "872850",
    "end": "878940"
  },
  {
    "text": "there it's reachable so there is no need to capture it and as the compiler is a",
    "start": "878940",
    "end": "885240"
  },
  {
    "text": "good friend of us it does the best it can do for us so if we transform this we",
    "start": "885240",
    "end": "890910"
  },
  {
    "text": "can see there is no member X and by the way if I can transform the code it means",
    "start": "890910",
    "end": "896790"
  },
  {
    "text": "that it compiles also there's a little output here saying that it compiles so",
    "start": "896790",
    "end": "903510"
  },
  {
    "text": "this totally wallet code and first of all I think it's great that we know do",
    "start": "903510",
    "end": "910829"
  },
  {
    "text": "not have to worry that things are captured with this all the need but on",
    "start": "910829",
    "end": "917190"
  },
  {
    "text": "the other hand sometimes it can be the case that we like to capture X to",
    "start": "917190",
    "end": "923100"
  },
  {
    "text": "preserve to state from the past or something like this so and if it comes",
    "start": "923100",
    "end": "928170"
  },
  {
    "text": "to such a case for global variables we can use in it I will show you later what you need",
    "start": "928170",
    "end": "933880"
  },
  {
    "text": "captures our questions today out so far",
    "start": "933880",
    "end": "939120"
  },
  {
    "text": "all right yes it specified that a lambda",
    "start": "939180",
    "end": "961930"
  },
  {
    "text": "is either a class or struct I'm not sure if you are hinting to something a little",
    "start": "961930",
    "end": "967180"
  },
  {
    "text": "bit more special so I would say I'm not sure let's talk about this later",
    "start": "967180",
    "end": "975420"
  },
  {
    "text": "bless you so if we have capsular slammers as before in the example of",
    "start": "977940",
    "end": "984420"
  },
  {
    "text": "capturing a global variable we can also assign them to ordinary function",
    "start": "984420",
    "end": "990430"
  },
  {
    "text": "pointers coming from C which is nice if we have to deal with legacy API or C API",
    "start": "990430",
    "end": "996100"
  },
  {
    "text": "where we cannot pass classes in or something like this so in this case I",
    "start": "996100",
    "end": "1002550"
  },
  {
    "text": "initialize my function pointer FP was lambda which captures nothing it just",
    "start": "1002550",
    "end": "1009380"
  },
  {
    "text": "returns a plus B and if you look in C++",
    "start": "1009380",
    "end": "1014940"
  },
  {
    "text": "insides what's happening there",
    "start": "1014940",
    "end": "1019070"
  },
  {
    "text": "the C code from the slide and if I transform it we can see that in this",
    "start": "1024530",
    "end": "1030140"
  },
  {
    "text": "case I have two additional methods one is called invoke the name is free to",
    "start": "1030140",
    "end": "1037699"
  },
  {
    "text": "choose from the implementation and does invoke has the same body as our lambdas",
    "start": "1037699",
    "end": "1044240"
  },
  {
    "text": "body of course I have the ecole operator and then I have this method here which",
    "start": "1044240",
    "end": "1052370"
  },
  {
    "text": "is called a conversion operator and it ensures that it returns this in walk",
    "start": "1052370",
    "end": "1058220"
  },
  {
    "text": "function such that this lambda is assignable to this function pointer",
    "start": "1058220",
    "end": "1063980"
  },
  {
    "text": "because of this conversion operator so it's a static member function and because this is a capitalist lambda it",
    "start": "1063980",
    "end": "1071000"
  },
  {
    "text": "only works for capitalist lambdas it doesn't have the need to use anything",
    "start": "1071000",
    "end": "1077000"
  },
  {
    "text": "from the class because there are no members so it can just return the static member function this is how it works",
    "start": "1077000",
    "end": "1085909"
  },
  {
    "text": "assigning lambdas to function pointers",
    "start": "1085909",
    "end": "1090909"
  },
  {
    "text": "I'm working mostly in the embedded domain this domain where size matters",
    "start": "1096789",
    "end": "1103130"
  },
  {
    "text": "and despite what you may read in the internet for different things the small size matters more than the",
    "start": "1103130",
    "end": "1109760"
  },
  {
    "text": "larger one often so I care about size and my question is I have this code here",
    "start": "1109760",
    "end": "1115880"
  },
  {
    "text": "I have int main I have three variables a B and C a and C being of type char while",
    "start": "1115880",
    "end": "1124190"
  },
  {
    "text": "B is of type int and then I have my lambda F which captures everything by copy and I just use a B and C inside of",
    "start": "1124190",
    "end": "1133130"
  },
  {
    "text": "the lambda the clearing or are using them with a semicolon is enough for the lambda to capture them for the following",
    "start": "1133130",
    "end": "1141169"
  },
  {
    "text": "question assume that we are talking about an x 64-bit platform and the",
    "start": "1141169",
    "end": "1146870"
  },
  {
    "text": "question is what is the size of this lambda if you would apply a size off to it",
    "start": "1146870",
    "end": "1153639"
  },
  {
    "text": "night at where 10 nor 24 now 10 is",
    "start": "1160950",
    "end": "1166240"
  },
  {
    "text": "closer 12 its 12 because when we are",
    "start": "1166240",
    "end": "1171700"
  },
  {
    "text": "talking about an X 64-bit platform our int is roughly 4 bytes or 8 bytes 4",
    "start": "1171700",
    "end": "1182830"
  },
  {
    "text": "bytes of size and if you then add the two jars which are 1 byte we would be",
    "start": "1182830",
    "end": "1188140"
  },
  {
    "text": "having 6 bytes but due to the alignment rules we're getting up to 12 so we are",
    "start": "1188140",
    "end": "1194530"
  },
  {
    "text": "essentially from my perspective wasting bytes it's not what I like what can we",
    "start": "1194530",
    "end": "1203740"
  },
  {
    "text": "do have you seen the change this",
    "start": "1203740",
    "end": "1209710"
  },
  {
    "text": "original version does the changed version all I did it changed the order I",
    "start": "1209710",
    "end": "1216250"
  },
  {
    "text": "use two variables in my lambda instead of having it a B and C it's now a C and",
    "start": "1216250",
    "end": "1222760"
  },
  {
    "text": "B we start I'm able to reordering the",
    "start": "1222760",
    "end": "1228100"
  },
  {
    "text": "captures and as with every struct the order of the variables",
    "start": "1228100",
    "end": "1234690"
  },
  {
    "text": "it makes the size if you like so we're changing it like this I get down to 8",
    "start": "1234690",
    "end": "1242860"
  },
  {
    "text": "bytes so it's just saved 4 bytes which is great however let's talk a little bit",
    "start": "1242860",
    "end": "1254320"
  },
  {
    "text": "about the standard so what the standard says here is an implementation may",
    "start": "1254320",
    "end": "1259390"
  },
  {
    "text": "defying the closure type differently from what it is described below provided",
    "start": "1259390",
    "end": "1265870"
  },
  {
    "text": "this does not alter the observable behavior of the program other than the",
    "start": "1265870",
    "end": "1272740"
  },
  {
    "text": "size and/or alignment of the closure time so what I've just shown you is",
    "start": "1272740",
    "end": "1278260"
  },
  {
    "text": "technically undefined behavior it works currently in all the major",
    "start": "1278260",
    "end": "1283570"
  },
  {
    "text": "compilers if they are gutting getting smarter with lambdas may",
    "start": "1283570",
    "end": "1289720"
  },
  {
    "text": "at some point they are able to do this little trick for us and reducing the",
    "start": "1289720",
    "end": "1295060"
  },
  {
    "text": "size automatically as of today I am not aware that they are doing this so but be aware it's technically not the best idea",
    "start": "1295060",
    "end": "1303250"
  },
  {
    "text": "at least not without knowing that it's undefined if you are using in it",
    "start": "1303250",
    "end": "1316210"
  },
  {
    "text": "captures then it's the same thing to my knowledge today compilers just take the",
    "start": "1316210",
    "end": "1323920"
  },
  {
    "text": "variables as they are used so if you're doing it was the in it captures it's the",
    "start": "1323920",
    "end": "1329200"
  },
  {
    "text": "same they are then going through the in it captures and making up the fields of",
    "start": "1329200",
    "end": "1334270"
  },
  {
    "text": "the class and from my reading they would be able to change this as well because",
    "start": "1334270",
    "end": "1339760"
  },
  {
    "text": "we are practically observing the size and the alignment of the lambda so they are allowed to change this later",
    "start": "1339760",
    "end": "1346240"
  },
  {
    "text": "even for ended captures I believe but that would be the better way because not always you are free to choose in the",
    "start": "1346240",
    "end": "1353710"
  },
  {
    "text": "body of the lambda where you use the variable so when let's switch to C++ 14",
    "start": "1353710",
    "end": "1363160"
  },
  {
    "text": "and look into generic lambdas generic Randers lambdas which have auto in their",
    "start": "1363160",
    "end": "1370690"
  },
  {
    "text": "parameter list this allows us to write even more generic code because now we do",
    "start": "1370690",
    "end": "1378490"
  },
  {
    "text": "not have to say our lambda type takes an end or and float we can just say it",
    "start": "1378490",
    "end": "1384940"
  },
  {
    "text": "takes something a type auto and if you",
    "start": "1384940",
    "end": "1395050"
  },
  {
    "text": "look and how generic lambda I",
    "start": "1395050",
    "end": "1400060"
  },
  {
    "text": "implemented once again the stick code from the slides and if I transform this",
    "start": "1400060",
    "end": "1406420"
  },
  {
    "text": "you can see this piece of code here which is again d call operator but this",
    "start": "1406420",
    "end": "1413860"
  },
  {
    "text": "time was the template keyword in front of it so this time we are looking and an",
    "start": "1413860",
    "end": "1421270"
  },
  {
    "text": "operator template this is how auto works if you are writing audio for a generic lambda the",
    "start": "1421270",
    "end": "1429470"
  },
  {
    "text": "call operator becomes a template and with that we were down to the basic",
    "start": "1429470",
    "end": "1434810"
  },
  {
    "text": "rules we know for templates so all this was added just with the compiler writers",
    "start": "1434810",
    "end": "1441770"
  },
  {
    "text": "may not agree to this but just was a little change to the parsing and then",
    "start": "1441770",
    "end": "1448040"
  },
  {
    "text": "generating the syntactic sugar after it making it classic C++ code with their",
    "start": "1448040",
    "end": "1463490"
  },
  {
    "text": "knowledge we can think a little bit about what we can do with that and if we",
    "start": "1463490",
    "end": "1469190"
  },
  {
    "text": "are having C++ 17 on our hands we can now say well as we now know that every",
    "start": "1469190",
    "end": "1476450"
  },
  {
    "text": "parameter in a generic lambda we declared with Auto is essentially a template parameter we can apply concepts",
    "start": "1476450",
    "end": "1484550"
  },
  {
    "text": "brief and deckle type to it to say in the body of the lambda well let's check",
    "start": "1484550",
    "end": "1492200"
  },
  {
    "text": "if our type which is passed in is of type double if so let's multiply we by",
    "start": "1492200",
    "end": "1500900"
  },
  {
    "text": "times 2.0 and in all other cases just multiply it with two you can do other",
    "start": "1500900",
    "end": "1511820"
  },
  {
    "text": "things to that but it's one thing you can do with context brief because you",
    "start": "1511820",
    "end": "1516920"
  },
  {
    "text": "need a template parameter for context brief there's a nursing I call the",
    "start": "1516920",
    "end": "1530390"
  },
  {
    "text": "dangling reference trap and I believe most of you probably have heard of this or seen of this or have bitten by it so",
    "start": "1530390",
    "end": "1538790"
  },
  {
    "text": "what I have here is a function func which has an end in it index which is",
    "start": "1538790",
    "end": "1544940"
  },
  {
    "text": "initialized with 22 and it has a lambda L which captured by reference and it",
    "start": "1544940",
    "end": "1552470"
  },
  {
    "text": "returns x times X and then there follows a bunch of code",
    "start": "1552470",
    "end": "1557620"
  },
  {
    "text": "I'm not showing you here and then I return on this lambda this is alright",
    "start": "1557620",
    "end": "1567600"
  },
  {
    "text": "axis on the stacked correct so the moment I returned this lambda it",
    "start": "1571770",
    "end": "1577270"
  },
  {
    "text": "internally points to something on the stack which is no longer well it so",
    "start": "1577270",
    "end": "1582630"
  },
  {
    "text": "pointing to something on the stack which is no longer well it is technically undefined behavior so you shouldn't do",
    "start": "1582630",
    "end": "1589960"
  },
  {
    "text": "that and for the talk I looked it up in the standard and this may be my famous",
    "start": "1589960",
    "end": "1596470"
  },
  {
    "text": "quote on my yeah most famous quote so far so what does then it says if if a",
    "start": "1596470",
    "end": "1603220"
  },
  {
    "text": "non reference entity is implicitly or explicitly captured by reference in",
    "start": "1603220",
    "end": "1608320"
  },
  {
    "text": "walking a function call operator of the corresponding lambda expression after",
    "start": "1608320",
    "end": "1613660"
  },
  {
    "text": "the lifetime of the entity has ended is likely to result in undefined behavior",
    "start": "1613660",
    "end": "1621720"
  },
  {
    "text": "isn't it nice one thing of undefined behavior is that we don't know if it works for the right",
    "start": "1621720",
    "end": "1627820"
  },
  {
    "text": "reason of not so it can work but it can stop in the future what does now mean likely undefined",
    "start": "1627820",
    "end": "1635740"
  },
  {
    "text": "behavior if it works it's alright I don't know",
    "start": "1635740",
    "end": "1641290"
  },
  {
    "text": "where this this word comes from and why is it there but it's funny so to fix",
    "start": "1641290",
    "end": "1648910"
  },
  {
    "text": "this code of course the fix is very simple instead of capturing by reference we capture by copy and we return that",
    "start": "1648910",
    "end": "1655960"
  },
  {
    "text": "thing and everything is fine nice and easy this is the fix you",
    "start": "1655960",
    "end": "1661270"
  },
  {
    "text": "normally get if you show this code and ask anybody to fix it and then you",
    "start": "1661270",
    "end": "1669220"
  },
  {
    "text": "happen to have a new colleague male of female and he or she has to change that",
    "start": "1669220",
    "end": "1675580"
  },
  {
    "text": "code and due to that course apply to the bunch of code that follows my int now",
    "start": "1675580",
    "end": "1682480"
  },
  {
    "text": "becomes an int pointer it's allocated with new and initialized as before and",
    "start": "1682480",
    "end": "1688990"
  },
  {
    "text": "and the lambda is also adjusted so now it is a DV reference version of x times",
    "start": "1688990",
    "end": "1694030"
  },
  {
    "text": "X everything as before and then I return it nice and easy",
    "start": "1694030",
    "end": "1701130"
  },
  {
    "text": "do you see the problem it's a memory",
    "start": "1704220",
    "end": "1710290"
  },
  {
    "text": "leak so somebody came up with that it's a memory leak so of course we need to add a delete statement here oh boy",
    "start": "1710290",
    "end": "1718860"
  },
  {
    "text": "yeah it was partially okay but now I'm still returning or again returning",
    "start": "1718860",
    "end": "1725230"
  },
  {
    "text": "something which is no longer well it because it's deleted so to make it right",
    "start": "1725230",
    "end": "1732420"
  },
  {
    "text": "see a pointer would be appropriate here it's not always that easy to say that if",
    "start": "1732420",
    "end": "1741010"
  },
  {
    "text": "you capture by copy you're safe okay that's the point here let's talk a",
    "start": "1741010",
    "end": "1746890"
  },
  {
    "text": "little bit more about captures here's an example I have a class test which has an",
    "start": "1746890",
    "end": "1752530"
  },
  {
    "text": "constructor takes one argument into X and it has a member a also of type int",
    "start": "1752530",
    "end": "1759040"
  },
  {
    "text": "and in its constructors body I have a lambda L 1 which captures my copy and",
    "start": "1759040",
    "end": "1767970"
  },
  {
    "text": "returns a plus 2 so a is the member of",
    "start": "1767970",
    "end": "1773020"
  },
  {
    "text": "tests then I invoke this lambda and print a result out just because I can i",
    "start": "1773020",
    "end": "1781090"
  },
  {
    "text": "increment a by 1 and I do the printing again what's the output of the to print",
    "start": "1781090",
    "end": "1789970"
  },
  {
    "text": "FS and let me make this easy for you 2 times 2 is 4 okay yes we are right",
    "start": "1789970",
    "end": "1798550"
  },
  {
    "text": "after lunch break what's the output twice for anybody agrees with twice for",
    "start": "1798550",
    "end": "1811049"
  },
  {
    "text": "someone objects to it I do",
    "start": "1812100",
    "end": "1818130"
  },
  {
    "text": "course the output is four and five and why is that it's because when I say",
    "start": "1818130",
    "end": "1826590"
  },
  {
    "text": "capture by copy and I capture a member",
    "start": "1826590",
    "end": "1831750"
  },
  {
    "text": "of the class internally it captures the dis pointer by copy and that this is a",
    "start": "1831750",
    "end": "1838890"
  },
  {
    "text": "pointer I just have a pointer inside my lambda pointing to the disappoint and",
    "start": "1838890",
    "end": "1844940"
  },
  {
    "text": "this is why I'm seeing the effect that a is incremented so if I say capture by",
    "start": "1844940",
    "end": "1855720"
  },
  {
    "text": "copy in a class it captures to this point I can fix this in c++ 17 by saying",
    "start": "1855720",
    "end": "1866280"
  },
  {
    "text": "I like to capture dereferenced this or starters however you like to read it and",
    "start": "1866280",
    "end": "1873030"
  },
  {
    "text": "that means that now a real copy of this a deep copy of this is captured and if I",
    "start": "1873030",
    "end": "1881820"
  },
  {
    "text": "now print this out again as you can see the output is four and four so twice for as you expected before as I said I care",
    "start": "1881820",
    "end": "1894600"
  },
  {
    "text": "about size I've now shown you a version to fix this problem this is a reduced",
    "start": "1894600",
    "end": "1902160"
  },
  {
    "text": "version I'm still capturing a and returning it just with a little bit less",
    "start": "1902160",
    "end": "1908250"
  },
  {
    "text": "boilerplate code the thing is what does this lambda capture now and if we look",
    "start": "1908250",
    "end": "1916440"
  },
  {
    "text": "at this in C++ insides",
    "start": "1916440",
    "end": "1919879"
  },
  {
    "text": "if I transform this you can now see of course as I said it's capturing a copy",
    "start": "1925880",
    "end": "1932190"
  },
  {
    "text": "of test so a copy of the disk pointer but this also means that now I do not",
    "start": "1932190",
    "end": "1941220"
  },
  {
    "text": "capture just a as requested no I'm capturing a and B so the size of",
    "start": "1941220",
    "end": "1949590"
  },
  {
    "text": "my lambda is now the size of test which is maybe not what I wanted because I",
    "start": "1949590",
    "end": "1955770"
  },
  {
    "text": "specifically requested eight and they do not use anything else than a I can fix",
    "start": "1955770",
    "end": "1970559"
  },
  {
    "text": "this by using so called in it captures this is this part any captures came in",
    "start": "1970559",
    "end": "1978929"
  },
  {
    "text": "with C++ 14 and there can now say that I like to capture the variable a by copy",
    "start": "1978929",
    "end": "1986940"
  },
  {
    "text": "and give it a new name internally in the",
    "start": "1986940",
    "end": "1992070"
  },
  {
    "text": "lambda a one I use a one here to make it less confusing I can also say a doesn't",
    "start": "1992070",
    "end": "2000200"
  },
  {
    "text": "matter and now there's the question before probably you're right it's not",
    "start": "2000200",
    "end": "2026510"
  },
  {
    "text": "okay yeah yeah you're right and I check that yes",
    "start": "2026510",
    "end": "2035080"
  },
  {
    "text": "yeah it would be a deep copy of this so it's it's it's one reason why it's not",
    "start": "2036980",
    "end": "2043140"
  },
  {
    "text": "always probably okay because if my dis has a I don't know a large stood string",
    "start": "2043140",
    "end": "2049230"
  },
  {
    "text": "megabyte or so then I capturing this and copying it in the lambda without even",
    "start": "2049230",
    "end": "2054600"
  },
  {
    "text": "referring to it so that's why the in it captures are better if you're care for",
    "start": "2054600",
    "end": "2062368"
  },
  {
    "text": "the size and for your resources because now you can see okay it's just capturing the end I did like to capture and as I",
    "start": "2062369",
    "end": "2070408"
  },
  {
    "text": "said I can remove the a1 and can just",
    "start": "2070409",
    "end": "2075628"
  },
  {
    "text": "say it's a that's fine as well it's up to you to decide which one is more",
    "start": "2075629",
    "end": "2081720"
  },
  {
    "text": "readable for you having two variables with name a or giving the one another",
    "start": "2081720",
    "end": "2088590"
  },
  {
    "text": "name still talking about the size of a",
    "start": "2088590",
    "end": "2100950"
  },
  {
    "text": "lambda here's one more example maybe",
    "start": "2100950",
    "end": "2106560"
  },
  {
    "text": "still undefined behavior because I'm doing it in the constructor there's a little change now my constructor has a",
    "start": "2106560",
    "end": "2113760"
  },
  {
    "text": "Const int variable named size which is initialized with 2 and then I have my",
    "start": "2113760",
    "end": "2121020"
  },
  {
    "text": "lambda L 2 which again captures by copy and decide from as before returning a",
    "start": "2121020",
    "end": "2126240"
  },
  {
    "text": "plus to it now a declares an int array named X in it and initializes it with",
    "start": "2126240",
    "end": "2135090"
  },
  {
    "text": "the default and the size of this array comes from the variable size so my",
    "start": "2135090",
    "end": "2144330"
  },
  {
    "text": "question is does this increase the size of the lambda does this add another",
    "start": "2144330",
    "end": "2153359"
  },
  {
    "text": "capture size to lambda",
    "start": "2153359",
    "end": "2159170"
  },
  {
    "text": "guesses you don't think so because it's",
    "start": "2172540",
    "end": "2178869"
  },
  {
    "text": "Const let's see so far you're right it's",
    "start": "2178869",
    "end": "2191830"
  },
  {
    "text": "not captured in the lambda because it's not ODR used so the one definition rules",
    "start": "2191830",
    "end": "2196990"
  },
  {
    "text": "so it doesn't need to be captured here so it's once again a case where the compiler if you are caring about the",
    "start": "2196990",
    "end": "2205300"
  },
  {
    "text": "size is a good friend and what does not need to be captured is not captured here",
    "start": "2205300",
    "end": "2211030"
  },
  {
    "text": "so it's a special case because it's not only are used if I would have used it for other things in the lambda it would",
    "start": "2211030",
    "end": "2218500"
  },
  {
    "text": "have been captured a blur size for example yeah so like this no I'm wrong",
    "start": "2218500",
    "end": "2234640"
  },
  {
    "text": "it's still it's still cons so it's it's still under DoD our rules my apologies",
    "start": "2234640",
    "end": "2245430"
  },
  {
    "text": "here's one more example ayah give you a complete example it's a function main it",
    "start": "2251490",
    "end": "2256869"
  },
  {
    "text": "had a stood string in it with the name foo and then I have a couple of lambdas",
    "start": "2256869",
    "end": "2262510"
  },
  {
    "text": "a12 which all capture either by reference by copy by named copy or so",
    "start": "2262510",
    "end": "2269170"
  },
  {
    "text": "and they some of them do print elf the",
    "start": "2269170",
    "end": "2274720"
  },
  {
    "text": "value of foo if you look closely at this example you can see that none of these",
    "start": "2274720",
    "end": "2282369"
  },
  {
    "text": "lambdas is invoked right they are just",
    "start": "2282369",
    "end": "2289540"
  },
  {
    "text": "there they are practically unused the",
    "start": "2289540",
    "end": "2294600"
  },
  {
    "text": "question to you is how many unused variables will I get from a compiler",
    "start": "2294600",
    "end": "2302340"
  },
  {
    "text": "just to allow the number or the time I heard probably all versions yes 0 no",
    "start": "2305460",
    "end": "2318840"
  },
  {
    "text": "more than 0 3 3 is the right number so I",
    "start": "2318840",
    "end": "2327130"
  },
  {
    "text": "get an unused variable warning for B E and F I walk you through this so in case",
    "start": "2327130",
    "end": "2334300"
  },
  {
    "text": "of a I asked to capture by copy and the lambda requires to copy a stood string",
    "start": "2334300",
    "end": "2342490"
  },
  {
    "text": "and a stood string of copied thus allocate memory for the new string and",
    "start": "2342490",
    "end": "2350700"
  },
  {
    "text": "copies over from the source to the destination the compiler is not allowed to optimize this away it's the so-called",
    "start": "2350700",
    "end": "2358450"
  },
  {
    "text": "side effect if it would be okay for the compiler to optimize it away would have",
    "start": "2358450",
    "end": "2363820"
  },
  {
    "text": "no copies of stood strings but in a moment the compiler copies something there it",
    "start": "2363820",
    "end": "2369250"
  },
  {
    "text": "is used B on the other hand we say that we like to capture by copy but we don't",
    "start": "2369250",
    "end": "2376180"
  },
  {
    "text": "use anything so that's basically an empty lambda unused variable warning just nice and easy C is equivalent to 2a",
    "start": "2376180",
    "end": "2386400"
  },
  {
    "text": "there more interesting parts down is D because indeed are specifically a",
    "start": "2386400",
    "end": "2392380"
  },
  {
    "text": "request for being captured by copy but I don't use it this is one of the cases",
    "start": "2392380",
    "end": "2398320"
  },
  {
    "text": "where the compiler does what I tell it to do I asked specifically to capture",
    "start": "2398320",
    "end": "2405790"
  },
  {
    "text": "foo by copy regardless if it is used or not and if I do so I do get a copy so",
    "start": "2405790",
    "end": "2413920"
  },
  {
    "text": "this lambda even if it doesn't use it has foo captured inside of it and that's",
    "start": "2413920",
    "end": "2419740"
  },
  {
    "text": "why it is not optimized a way for E and",
    "start": "2419740",
    "end": "2425500"
  },
  {
    "text": "F it's easy because they are captured by reference so the compiler can through it that it's not used why I'm telling you",
    "start": "2425500",
    "end": "2432220"
  },
  {
    "text": "this because I've seen code like this smaller pieces less lamb there's just a single one with",
    "start": "2432220",
    "end": "2438550"
  },
  {
    "text": "IRS therefore debug purposes or you have some if they have target something in",
    "start": "2438550",
    "end": "2444730"
  },
  {
    "text": "your code and the lambda is only it's globally there but it's only invoked if if there are triggers so if it's for",
    "start": "2444730",
    "end": "2451930"
  },
  {
    "text": "debug or for your specific target and the impression then often is well this is that code it will be optimized away",
    "start": "2451930",
    "end": "2458880"
  },
  {
    "text": "so I don't have to do anything about this lambda are sticking around there and this impression is wrong because",
    "start": "2458880",
    "end": "2464800"
  },
  {
    "text": "every time you pass this lambda you will get a copy of that stood string and if",
    "start": "2464800",
    "end": "2470080"
  },
  {
    "text": "that stood string would be of size of hundred megabytes or so then I hope that",
    "start": "2470080",
    "end": "2479260"
  },
  {
    "text": "you can see that it makes a difference of capturing this or not I once told",
    "start": "2479260",
    "end": "2486370"
  },
  {
    "text": "that to some windows programmers and they looked a little bit non",
    "start": "2486370",
    "end": "2493090"
  },
  {
    "text": "understanding at me and they said well and I said yeah isn't that something for",
    "start": "2493090",
    "end": "2498850"
  },
  {
    "text": "you know we just ask the customer to buy a bigger PC problem solved so not",
    "start": "2498850",
    "end": "2504520"
  },
  {
    "text": "everybody cares about things like that let's talk a little bit about C++ 17",
    "start": "2504520",
    "end": "2509590"
  },
  {
    "text": "there we have context parameters and with that they are now usable in context",
    "start": "2509590",
    "end": "2515260"
  },
  {
    "text": "per contexts and what you can do with them is like I've shown you or showing",
    "start": "2515260",
    "end": "2522850"
  },
  {
    "text": "you in main there I have a context where in the array called are of size 5 then I",
    "start": "2522850",
    "end": "2531010"
  },
  {
    "text": "have a context bool named all 11 and I play an all go apply an algorithm to it",
    "start": "2531010",
    "end": "2537340"
  },
  {
    "text": "all off which walks through all the elements in my array and applies a lambda to it and this lambda has to be",
    "start": "2537340",
    "end": "2544240"
  },
  {
    "text": "context / because I'm invoking it in a context / context and it only checks if",
    "start": "2544240",
    "end": "2550540"
  },
  {
    "text": "it's an even or an odd number into transit and then I can return turn all",
    "start": "2550540",
    "end": "2556060"
  },
  {
    "text": "even and this whole block in main is now evaluated at compile time which is very",
    "start": "2556060",
    "end": "2561730"
  },
  {
    "text": "nice and some of you may know I asked well and why are you giving me this",
    "start": "2561730",
    "end": "2567580"
  },
  {
    "text": "boilerplate code above of main I know that error since to the algorithm to do that and that's",
    "start": "2567580",
    "end": "2574450"
  },
  {
    "text": "exactly the version of the stood algorithm from cpp reference I copied it",
    "start": "2574450",
    "end": "2579849"
  },
  {
    "text": "from there with one exception and that's why I have to show you it to you in C++",
    "start": "2579849",
    "end": "2585759"
  },
  {
    "text": "17 in C++ 17 we got context parameters but unfortunately the algorithms header",
    "start": "2585759",
    "end": "2591960"
  },
  {
    "text": "functions in there and not constic sperm so I had to add the context keyword in",
    "start": "2591960",
    "end": "2596979"
  },
  {
    "text": "front of the two functions here all off and find if not with C++ 26 get better",
    "start": "2596979",
    "end": "2605910"
  },
  {
    "text": "there we have contacts per functions in the algorithms header so I can remove",
    "start": "2605910",
    "end": "2612069"
  },
  {
    "text": "this boilerplate code and the example looks like this in addition we have constructs for begin and end functions",
    "start": "2612069",
    "end": "2618819"
  },
  {
    "text": "so I can now if you prefer this you stood array instead of a plain old",
    "start": "2618819",
    "end": "2624069"
  },
  {
    "text": "in the rain how can we apply lambdas",
    "start": "2624069",
    "end": "2631140"
  },
  {
    "text": "this is one example from C++ insights there I have multiple places where I",
    "start": "2631140",
    "end": "2640509"
  },
  {
    "text": "have to wrap something in either parents or Curly's because I'm making",
    "start": "2640509",
    "end": "2646680"
  },
  {
    "text": "initialization I am printing out the function call or function itself things",
    "start": "2646680",
    "end": "2653349"
  },
  {
    "text": "like that and of course I all the time I have to check whether it's a brace or",
    "start": "2653349",
    "end": "2658660"
  },
  {
    "text": "curly parenthesis I have to open it the end there is some code which is in",
    "start": "2658660",
    "end": "2664420"
  },
  {
    "text": "between and then I have to close to sing with Landers and templates are now able",
    "start": "2664420",
    "end": "2670450"
  },
  {
    "text": "to have this wrap in parents or Curly's functions function which just inserts",
    "start": "2670450",
    "end": "2676119"
  },
  {
    "text": "the opening part before invoking the lender and then closing with the correct",
    "start": "2676119",
    "end": "2684160"
  },
  {
    "text": "matching brace part this cleaned out the code by a lot and it made a call side",
    "start": "2684160",
    "end": "2693339"
  },
  {
    "text": "look more beautiful because I have now a more meaningful function to call there and I just pass in the lambda which does",
    "start": "2693339",
    "end": "2700869"
  },
  {
    "text": "the actual job but I reduced the boilerplate code a variation of this is this example",
    "start": "2700869",
    "end": "2708100"
  },
  {
    "text": "again from C++ insights I have to make up argument lists and argument lists",
    "start": "2708100",
    "end": "2714070"
  },
  {
    "text": "help that sing that the first argument has no comma before it and after it if",
    "start": "2714070",
    "end": "2719380"
  },
  {
    "text": "it's the only parameter but the second parameter then has to have a comma before it but the last one does not have",
    "start": "2719380",
    "end": "2726790"
  },
  {
    "text": "to have comma after it so basic rules writing functions or function calls",
    "start": "2726790",
    "end": "2732810"
  },
  {
    "text": "twisted up I have now a dysfunction for each argument which goes through an",
    "start": "2732810",
    "end": "2738520"
  },
  {
    "text": "argument list and thus insert a comma if required and this once again dropped my",
    "start": "2738520",
    "end": "2746770"
  },
  {
    "text": "call side code by a lot just by using or applying lenders here another pattern",
    "start": "2746770",
    "end": "2754440"
  },
  {
    "text": "coming I believe from JavaScript is the immediately invoked function expressions",
    "start": "2754440",
    "end": "2760330"
  },
  {
    "text": "I like this pattern I use it a lot this is again an example from C++ insights I",
    "start": "2760330",
    "end": "2766690"
  },
  {
    "text": "use it to make more variables constant in this case I have a variable name",
    "start": "2766690",
    "end": "2774690"
  },
  {
    "text": "which I initialized was directly invoke lambda which returns a stood string and",
    "start": "2774690",
    "end": "2780100"
  },
  {
    "text": "that stood string is either the name of the class if the normal class or my own",
    "start": "2780100",
    "end": "2788710"
  },
  {
    "text": "made-up name if it's a lambda without the directly invoked lambda I would have",
    "start": "2788710",
    "end": "2797170"
  },
  {
    "text": "either decide to default initialize name empty or with the class name because",
    "start": "2797170",
    "end": "2802720"
  },
  {
    "text": "it's the probably more often case and then my name would not have been Const",
    "start": "2802720",
    "end": "2808020"
  },
  {
    "text": "was that it can be constant I like these things here's another place where",
    "start": "2808020",
    "end": "2816130"
  },
  {
    "text": "lambdas can be very helpful it's a small code fragment it imagines a POSIX API I",
    "start": "2816130",
    "end": "2824650"
  },
  {
    "text": "have my open call they are which returns a file descriptor which is saved in the",
    "start": "2824650",
    "end": "2829720"
  },
  {
    "text": "variable FD I then check whether FD is equal to minus 1",
    "start": "2829720",
    "end": "2839630"
  },
  {
    "text": "sorry for the buck in the slide here equal to minus one if so I return zero",
    "start": "2839630",
    "end": "2846569"
  },
  {
    "text": "because it was not able to read anything then I try to read into the buffer up to",
    "start": "2846569",
    "end": "2851789"
  },
  {
    "text": "the buffer size from the file and once again check that operation was successful if not I return if so I",
    "start": "2851789",
    "end": "2859589"
  },
  {
    "text": "truncate the file a close the file descriptor and I return the size red do",
    "start": "2859589",
    "end": "2867660"
  },
  {
    "text": "you see the bug",
    "start": "2867660",
    "end": "2870380"
  },
  {
    "text": "it's not the file is not closed in line",
    "start": "2876210",
    "end": "2881860"
  },
  {
    "text": "13 when I leave there it's a common",
    "start": "2881860",
    "end": "2887020"
  },
  {
    "text": "mistake current kernels allow you 40 4096 file",
    "start": "2887020",
    "end": "2892540"
  },
  {
    "text": "descriptors I believe so it can take a while until the problem really emerges we can fix this very easily in the",
    "start": "2892540",
    "end": "2900940"
  },
  {
    "text": "guideline support library the GSL there's a function called finally init",
    "start": "2900940",
    "end": "2907360"
  },
  {
    "text": "which uses a class template called final action and I'm just showing you final",
    "start": "2907360",
    "end": "2913990"
  },
  {
    "text": "action here so I use final action the class template here I make a variable",
    "start": "2913990",
    "end": "2921430"
  },
  {
    "text": "out of it it was the name clean and I pass a lambda into it with care with which captures by reference and it does",
    "start": "2921430",
    "end": "2930310"
  },
  {
    "text": "my if my file descriptor R equals minus",
    "start": "2930310",
    "end": "2935380"
  },
  {
    "text": "1 check and then they have to close the file if it's not equal to minus 1 now I",
    "start": "2935380",
    "end": "2943780"
  },
  {
    "text": "can remove the close statement the remaining closed statements from the code and each and every time I return",
    "start": "2943780",
    "end": "2949990"
  },
  {
    "text": "from this function my file descriptor will be closed if it is open and the",
    "start": "2949990",
    "end": "2956860"
  },
  {
    "text": "code behind this is fairly simple this is the class template called final",
    "start": "2956860",
    "end": "2962860"
  },
  {
    "text": "action it has one member of type T M action in the constructor it takes the",
    "start": "2962860",
    "end": "2970480"
  },
  {
    "text": "lambda and stores it in the member mhm that's it and then if I leave the scope",
    "start": "2970480",
    "end": "2980200"
  },
  {
    "text": "the destructor is invoked and it calls the lambda that's the trick very easy",
    "start": "2980200",
    "end": "2987580"
  },
  {
    "text": "very very helpful for cleaning up resources",
    "start": "2987580",
    "end": "2994470"
  },
  {
    "text": "let's speak a little bit into c plus plus 20 and what's coming there so where c plus plus 20 we will have lambda",
    "start": "2996350",
    "end": "3004040"
  },
  {
    "text": "capture Peck expansions capture and apply functions",
    "start": "3004040",
    "end": "3010130"
  },
  {
    "text": "to it for example move or forward so have a look at the invoke later it's a",
    "start": "3010130",
    "end": "3017360"
  },
  {
    "text": "very attic template function which returns a lambda and this lambda",
    "start": "3017360",
    "end": "3023050"
  },
  {
    "text": "captures the entire peck named arcs with",
    "start": "3023050",
    "end": "3030980"
  },
  {
    "text": "using in it captures so inside a lambda it's called a marks and we see plus plus",
    "start": "3030980",
    "end": "3038780"
  },
  {
    "text": "20 I'm now able to apply stood forward to the arcs Peck coming from the invoke",
    "start": "3038780",
    "end": "3046910"
  },
  {
    "text": "later function and with that forwarding",
    "start": "3046910",
    "end": "3051980"
  },
  {
    "text": "my captured variables efficiently so if",
    "start": "3051980",
    "end": "3057260"
  },
  {
    "text": "it's a stood string as in my case temporary I can now forward and was",
    "start": "3057260",
    "end": "3062720"
  },
  {
    "text": "there move it into the lambda such that I have is less copies as possible this",
    "start": "3062720",
    "end": "3069470"
  },
  {
    "text": "was not possible before I could have could capture pecks Priya C++ 20 but I cannot apply the",
    "start": "3069470",
    "end": "3077390"
  },
  {
    "text": "functions to it we will also have templated lambdas and let me first make",
    "start": "3077390",
    "end": "3086600"
  },
  {
    "text": "a point why they can be good aware bear that can't be good so this is c plus plus 14 code generic lambdas i have the",
    "start": "3086600",
    "end": "3094130"
  },
  {
    "text": "implementation of a max function it takes two parameters X and epsilon and",
    "start": "3094130",
    "end": "3099320"
  },
  {
    "text": "it returns which one of both of them is to greater one very easy I can invoke it",
    "start": "3099320",
    "end": "3106850"
  },
  {
    "text": "as in line seven and eight with 2 comma 3 and as Ally date with two",
    "start": "3106850",
    "end": "3115010"
  },
  {
    "text": "commas 3.0 I'm fine with the first one I'm not so fine with the second one",
    "start": "3115010",
    "end": "3121430"
  },
  {
    "text": "because on this in the second one I'm mixing types I'm comparing now on end",
    "start": "3121430",
    "end": "3128150"
  },
  {
    "text": "wasn't float and there is no easy way in C++ 14 or 17",
    "start": "3128150",
    "end": "3134990"
  },
  {
    "text": "to say that both variables have be of the same type in C++ 20 was templated",
    "start": "3134990",
    "end": "3145940"
  },
  {
    "text": "lambdas we can now say in the angle brackets that this lambda expects a type",
    "start": "3145940",
    "end": "3151640"
  },
  {
    "text": "named t and that both my parameters X and epsilon are of type T so it's now",
    "start": "3151640",
    "end": "3160070"
  },
  {
    "text": "the same thing we would do with lambda with with a usual function template now",
    "start": "3160070",
    "end": "3167000"
  },
  {
    "text": "we can apply it to lambdas which means that the second invocation with 2 comma",
    "start": "3167000",
    "end": "3173390"
  },
  {
    "text": "3.0 will now no longer compile because there are no implicit conversion when it",
    "start": "3173390",
    "end": "3178550"
  },
  {
    "text": "comes to templates we can do other things with the template lambdas we can",
    "start": "3178550",
    "end": "3184490"
  },
  {
    "text": "now say that our lambda takes a stud vector of type T before that we can only",
    "start": "3184490",
    "end": "3191930"
  },
  {
    "text": "say it takes Auto but now I can say okay this lambda takes a stood vector of any",
    "start": "3191930",
    "end": "3198619"
  },
  {
    "text": "type and this type T is a template parameter so it just let the compiler",
    "start": "3198619",
    "end": "3204320"
  },
  {
    "text": "figure it out but it has to be used to direct err I",
    "start": "3204320",
    "end": "3208990"
  },
  {
    "text": "can also apply non-type template parameters to it in the example below by",
    "start": "3209470",
    "end": "3217400"
  },
  {
    "text": "saying okay my lambda takes us to the Ray of type int but I let the compiler",
    "start": "3217400",
    "end": "3224570"
  },
  {
    "text": "that use the sighs it's like templates",
    "start": "3224570",
    "end": "3230619"
  },
  {
    "text": "and there's one thing when doing trainings I have this one exercise where",
    "start": "3230619",
    "end": "3238599"
  },
  {
    "text": "the students get a piece of code C++ ninety-eight code and they shall",
    "start": "3238599",
    "end": "3244520"
  },
  {
    "text": "transform it into C++ 11 by applying Auto to it it's just to get a feeling",
    "start": "3244520",
    "end": "3250490"
  },
  {
    "text": "for them if they are knew how to work with Auto and the exercise is just apply",
    "start": "3250490",
    "end": "3257060"
  },
  {
    "text": "Auto in all the cases where it feels good or looks right for you",
    "start": "3257060",
    "end": "3263069"
  },
  {
    "text": "and one of or one piece of code is a half a function called square taking an",
    "start": "3263069",
    "end": "3270029"
  },
  {
    "text": "in parameter and through story in each and every class I'm doing this there's",
    "start": "3270029",
    "end": "3276900"
  },
  {
    "text": "at least one person which has in the square function Auto replacing the int",
    "start": "3276900",
    "end": "3285029"
  },
  {
    "text": "by Auto and where I'm seeing this I ask",
    "start": "3285029",
    "end": "3290390"
  },
  {
    "text": "does it compile yes yes it does then I",
    "start": "3290390",
    "end": "3296849"
  },
  {
    "text": "ask do you know what you're doing I applied order to it that's right but",
    "start": "3296849",
    "end": "3303089"
  },
  {
    "text": "which compiler are you using I'm guessing and betting as GCC right yes it's GCC have you tried out clan yet",
    "start": "3303089",
    "end": "3310920"
  },
  {
    "text": "no please oh it doesn't compile anymore I don't know if it's a feature or bug",
    "start": "3310920",
    "end": "3318859"
  },
  {
    "text": "but jesusí allows you to have Auto",
    "start": "3318859",
    "end": "3323989"
  },
  {
    "text": "everywhere as a function parameter Prius C + + 20 I believe it came in as a",
    "start": "3323989",
    "end": "3330140"
  },
  {
    "text": "probably buck with C++ 14 with generic lambdas when Auto is possible in a",
    "start": "3330140",
    "end": "3337920"
  },
  {
    "text": "parameter list of lambda and they just didn't restrict it enough so it's",
    "start": "3337920",
    "end": "3343890"
  },
  {
    "text": "possible in every function making that function a template essentially it's",
    "start": "3343890",
    "end": "3352069"
  },
  {
    "text": "always funny and this is why this code compiles in GCC in C++ 14 mode can have",
    "start": "3352069",
    "end": "3361880"
  },
  {
    "text": "partially what we will get in C++ 20 but not that good we will also have in C++ trendy default",
    "start": "3361880",
    "end": "3369930"
  },
  {
    "text": "constructible lambdas which we can use in a deco type expression and to this",
    "start": "3369930",
    "end": "3376559"
  },
  {
    "text": "day I'm not really sure if I'm comfortable this dad or not so here's the C++ 14 version assume we have a",
    "start": "3376559",
    "end": "3384660"
  },
  {
    "text": "student map which is of type stood string an int and we like to have a",
    "start": "3384660",
    "end": "3390660"
  },
  {
    "text": "custom compare function for it then what we can do is come up with lamb",
    "start": "3390660",
    "end": "3396900"
  },
  {
    "text": "our capture it in a variable named compare and this lambda does the",
    "start": "3396900",
    "end": "3402270"
  },
  {
    "text": "comparison Dan Wendy clearing the stood map we say it's of type stood string and",
    "start": "3402270",
    "end": "3409500"
  },
  {
    "text": "end and deckle type compare that works",
    "start": "3409500",
    "end": "3415470"
  },
  {
    "text": "of course it's great we have also the compare function lingering around",
    "start": "3415470",
    "end": "3420690"
  },
  {
    "text": "without being used anywhere else and we maybe can like to narrow the scope down",
    "start": "3420690",
    "end": "3430500"
  },
  {
    "text": "a little bit more and this is possible with C++ 20 because now we can have our",
    "start": "3430500",
    "end": "3438620"
  },
  {
    "text": "default constructible lambda are in the deckle type expression directly so no",
    "start": "3438620",
    "end": "3443730"
  },
  {
    "text": "need to declare variable before come up with a name having that sing lingering",
    "start": "3443730",
    "end": "3450450"
  },
  {
    "text": "around there no now we can place it exactly where it belongs to I like this",
    "start": "3450450",
    "end": "3455610"
  },
  {
    "text": "I am not sure how good it is that I now can write hundreds of lines of codes in",
    "start": "3455610",
    "end": "3462030"
  },
  {
    "text": "a deco type expression because it's a lambda but we will see what fun things",
    "start": "3462030",
    "end": "3469560"
  },
  {
    "text": "appear with them to conclude this a little bit can be overuse lambdas of",
    "start": "3469560",
    "end": "3476580"
  },
  {
    "text": "course this is my own example coming from C++ insights if you look a little",
    "start": "3476580",
    "end": "3483360"
  },
  {
    "text": "bit at this two liner you may wonder what sends that lambda makes there I",
    "start": "3483360",
    "end": "3492110"
  },
  {
    "text": "cannot tell you why it put it there in first place either I refactored",
    "start": "3492110",
    "end": "3497400"
  },
  {
    "text": "something or had something different in mind but honestly it's enough to have it",
    "start": "3497400",
    "end": "3504620"
  },
  {
    "text": "with just in a lot initializing the bool",
    "start": "3504620",
    "end": "3511560"
  },
  {
    "text": "with the value because the lamb that didn't do anything good so I don't know",
    "start": "3511560",
    "end": "3517680"
  },
  {
    "text": "what the idea initially was but yes we can overuse lambdas as good as they may be if you are more",
    "start": "3517680",
    "end": "3527569"
  },
  {
    "text": "interested in lambdas because the time was too short to tell you everything",
    "start": "3527569",
    "end": "3532759"
  },
  {
    "text": "about them there are a lot of work of others it's an incomplete list here and",
    "start": "3532759",
    "end": "3538969"
  },
  {
    "text": "it would fill more than one slide so there's a meeting c++ torque from peon",
    "start": "3538969",
    "end": "3544549"
  },
  {
    "text": "follower who appears to be also here called higher of functions for ordinary developers real create tog if you like",
    "start": "3544549",
    "end": "3551449"
  },
  {
    "text": "to see more how lambdas can be applied to your code and how they still ensure that you have just the tiniest code you",
    "start": "3551449",
    "end": "3560329"
  },
  {
    "text": "can write yourself there is a blog post I believe from Vittorio Romero talking a",
    "start": "3560329",
    "end": "3566959"
  },
  {
    "text": "little bit about compile time iteration with C++ 20 Landers there are a bunch of",
    "start": "3566959",
    "end": "3572539"
  },
  {
    "text": "C++ weekly episodes from Jason Turner and there is another blog post going",
    "start": "3572539",
    "end": "3578269"
  },
  {
    "text": "through the evolution of Landers from C++ 11 to 20 that's it so far from my",
    "start": "3578269",
    "end": "3587239"
  },
  {
    "text": "side I will be here until Friday so if you have any questions after that feel free to reach out to me I have just",
    "start": "3587239",
    "end": "3593719"
  },
  {
    "text": "three more words to say and that's I am fetish thank you",
    "start": "3593719",
    "end": "3601050"
  },
  {
    "text": "[Applause]",
    "start": "3601050",
    "end": "3607619"
  }
]