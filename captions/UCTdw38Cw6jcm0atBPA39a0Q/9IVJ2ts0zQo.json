[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "slowly start hello everyone in this pretty niche topic like mobius the title",
    "start": "6399",
    "end": "12080"
  },
  {
    "text": "is mobius writing your own.net runtime running on.net core or maybe.net 5 as it",
    "start": "12080",
    "end": "19279"
  },
  {
    "text": "is called today so this is a pretty nice thing i really hope you will enjoy it",
    "start": "19279",
    "end": "25119"
  },
  {
    "text": "and i will enjoy the recording if you are watching the recording now so my name is conrad kolkosa just a few",
    "start": "25119",
    "end": "31359"
  },
  {
    "text": "words about me i'm a dot net related guy which is",
    "start": "31359",
    "end": "36480"
  },
  {
    "start": "33000",
    "end": "33000"
  },
  {
    "text": "freelancer trainer consultant speaker doing many things related to advanced.net stuff like",
    "start": "36480",
    "end": "43320"
  },
  {
    "text": "investigating various diagnostic problems in dot net world also really liking the topic of dot net",
    "start": "43320",
    "end": "50960"
  },
  {
    "text": "internals how the dot net is really working underneath so we are providing",
    "start": "50960",
    "end": "56079"
  },
  {
    "text": "also as a dot dotnetos initiative uh premium.net content about stuff which is let's say advanced",
    "start": "56079",
    "end": "64239"
  },
  {
    "text": "in the dot net ecosystem and for example if you like dotnet internals and you would like to",
    "start": "64239",
    "end": "70080"
  },
  {
    "text": "know how though those are working i recently started this dot net gc internals",
    "start": "70080",
    "end": "75520"
  },
  {
    "text": "mini series on youtube for free totally once a week every wednesday i'm just describing",
    "start": "75520",
    "end": "82400"
  },
  {
    "text": "you how the dotnet this is implementing phase by face i will be describing this",
    "start": "82400",
    "end": "89040"
  },
  {
    "text": "in detail so if you like that just google for dotnet gc internals probably you will",
    "start": "89040",
    "end": "94960"
  },
  {
    "text": "find it on youtube so and that's about me and regarding the topic",
    "start": "94960",
    "end": "102560"
  },
  {
    "text": "one question the very first question for you is for example have you ever wondered how dotnet",
    "start": "102560",
    "end": "108479"
  },
  {
    "text": "runtime really works underneath maybe you did maybe you was wondering but it was pretty",
    "start": "108479",
    "end": "115360"
  },
  {
    "text": "uh hard to find a good motivation to do something with that maybe to read about it because it is not",
    "start": "115360",
    "end": "122159"
  },
  {
    "text": "super practical thing so maybe you have wondered but not necessarily you have read anything about",
    "start": "122159",
    "end": "128160"
  },
  {
    "text": "that another question maybe even more advanced is whether you ever dreamed of a contributing to dotnet",
    "start": "128160",
    "end": "135200"
  },
  {
    "text": "runtime and this is even more sophisticated question like okay and probably maybe you have dream",
    "start": "135200",
    "end": "141920"
  },
  {
    "text": "about it but it was really afraid of doing so because it is so huge complex code and c plus plus code",
    "start": "141920",
    "end": "149920"
  },
  {
    "text": "so why i have why i would ever imagine contributing to such huge and uh",
    "start": "149920",
    "end": "156480"
  },
  {
    "text": "popular thing like dot net runtime so i will answer those questions at the end",
    "start": "156480",
    "end": "162400"
  },
  {
    "text": "and uh why the whole idea of the mobius and the mobius is as a title says",
    "start": "162400",
    "end": "169200"
  },
  {
    "text": "the runtime which is running on the anode around time so before answering why i need",
    "start": "169200",
    "end": "174400"
  },
  {
    "text": "maybe not need but why i have imagined something like that let's just have a few words about the",
    "start": "174400",
    "end": "180560"
  },
  {
    "text": "dotnet itself so i wouldn't like to overwhelm you with",
    "start": "180560",
    "end": "185840"
  },
  {
    "start": "182000",
    "end": "182000"
  },
  {
    "text": "the super sophisticated low-level stuff during this talk because probably it would be too boring",
    "start": "185840",
    "end": "191680"
  },
  {
    "text": "but mostly describe some high-level concepts about this mobius idea thing",
    "start": "191680",
    "end": "197680"
  },
  {
    "text": "and to have the dotnet runtime implementation first of all we need an answer to a question what the dotnet",
    "start": "197680",
    "end": "203920"
  },
  {
    "text": "is in the end and from formal perspective it is just a specification.net we can",
    "start": "203920",
    "end": "210640"
  },
  {
    "text": "say is an open specification a technical standard developed by microsoft obviously",
    "start": "210640",
    "end": "216959"
  },
  {
    "text": "that is standardized in iso ecma documents saying what it is in the end describing",
    "start": "216959",
    "end": "223440"
  },
  {
    "text": "executable code in the runtime environment and all this stuff that needs to be implemented to say that",
    "start": "223440",
    "end": "230480"
  },
  {
    "text": "you have an implementation of dotnet and this specification",
    "start": "230480",
    "end": "235599"
  },
  {
    "text": "name is common language infrastructure so you can meet this name also pretty often",
    "start": "235599",
    "end": "241200"
  },
  {
    "text": "and it is specified in this ekma 335 document so if you would like to investigate a",
    "start": "241200",
    "end": "248560"
  },
  {
    "text": "little bit what this.net thing is defined you can investigate this document",
    "start": "248560",
    "end": "254319"
  },
  {
    "text": "do not mislead it with another one ekma 354 which is only about c sharp and this is",
    "start": "254319",
    "end": "260799"
  },
  {
    "text": "not the story that we will cover today we are covering the whole runtime",
    "start": "260799",
    "end": "266080"
  },
  {
    "text": "ecosystem part which is common language infrastructure and if you'd like to take a look there",
    "start": "266080",
    "end": "272720"
  },
  {
    "text": "is also a great article from matt warren that is just kind of overview what's inside this ecma document okay so",
    "start": "272720",
    "end": "280400"
  },
  {
    "text": "we have this ecma-free free five document describing our common language",
    "start": "280400",
    "end": "285919"
  },
  {
    "text": "infrastructure and then it contains mostly of four elements",
    "start": "285919",
    "end": "290960"
  },
  {
    "text": "building blocks the common type system that will describe what set of data types we are available",
    "start": "290960",
    "end": "296720"
  },
  {
    "text": "so there will be in description that we have integers doubles and other types",
    "start": "296720",
    "end": "302080"
  },
  {
    "text": "that should be exposed by this dotnet ecosystem then there we have metadata",
    "start": "302080",
    "end": "308880"
  },
  {
    "text": "which is information about the program structure and data as you probably know and the description how this metadata",
    "start": "308880",
    "end": "315440"
  },
  {
    "text": "should be described and stored the common language specification something a little bit less popular with",
    "start": "315440",
    "end": "322960"
  },
  {
    "text": "which is a kind of subset of rules that should be met to say that your language is serial as",
    "start": "322960",
    "end": "329759"
  },
  {
    "text": "compliant and it is a set of i said subset because we are getting we are used to",
    "start": "329759",
    "end": "337039"
  },
  {
    "text": "more uh superset let's say because for example c sharp is not by default cls compliant",
    "start": "337039",
    "end": "344000"
  },
  {
    "text": "there are some possibilities that makes uh the default c-sharp compilation not cls compliant",
    "start": "344000",
    "end": "350479"
  },
  {
    "text": "that was from the times that microsoft was designing all this thing",
    "start": "350479",
    "end": "357039"
  },
  {
    "text": "for having multiple various languages but now we have c-sharp f-sharp and we should not",
    "start": "357039",
    "end": "363039"
  },
  {
    "text": "really care about cs compliancy so much but this is also not the topic for today",
    "start": "363039",
    "end": "368720"
  },
  {
    "text": "because we have the the last building block here the virtual execution system and this is",
    "start": "368720",
    "end": "374560"
  },
  {
    "text": "the fancy name for the runtime so virtual execution system loads and",
    "start": "374560",
    "end": "379759"
  },
  {
    "text": "executes a program that is cli compliant cli it's it matched all this",
    "start": "379759",
    "end": "388560"
  },
  {
    "text": "i think required and specified in ecma standard so we need something like that and in",
    "start": "388560",
    "end": "395199"
  },
  {
    "text": "the end this virtual execution system which we can also simply say runtime is just a piece of code",
    "start": "395199",
    "end": "402880"
  },
  {
    "start": "396000",
    "end": "396000"
  },
  {
    "text": "executing this uh cil code common intermediate language which is",
    "start": "402880",
    "end": "409120"
  },
  {
    "text": "also defined in ecma which is kind of by code and simply saying what your application is doing obviously",
    "start": "409120",
    "end": "416880"
  },
  {
    "text": "it needs to do that knowing all the other stuff so it is aware of common type system of metadata",
    "start": "416880",
    "end": "422800"
  },
  {
    "text": "and we might ignore the compile compliancy of the language subsystem because it's not necessary",
    "start": "422800",
    "end": "430240"
  },
  {
    "text": "so we have this virtual execution system we have the standard and we have various implementations",
    "start": "430240",
    "end": "436000"
  },
  {
    "text": "of it currently pretty a lot you can say obviously we are aware of dotnet",
    "start": "436000",
    "end": "442280"
  },
  {
    "text": "framework.netcore.net5.this is a.net based uh sorry.net based config",
    "start": "442280",
    "end": "448880"
  },
  {
    "text": "conference so we all are using those runtimes which is awesome and then we have also mono which",
    "start": "448880",
    "end": "456000"
  },
  {
    "text": "is uh getting more and more popular for example mainly because it starts to run pretty important things",
    "start": "456000",
    "end": "462960"
  },
  {
    "text": "like blazer web assembly xamarin unity game engine they are all based on mono",
    "start": "462960",
    "end": "469039"
  },
  {
    "text": "then we have less popular ones like dot net compact framework dot net micro framework for small devices",
    "start": "469039",
    "end": "476000"
  },
  {
    "text": "we have even before the opensourcing.net core we had the rotor which was shared source",
    "start": "476000",
    "end": "482960"
  },
  {
    "text": "common language infrastructure and academical initiative to provide open source",
    "start": "482960",
    "end": "488960"
  },
  {
    "text": "version of the runtime mostly for just learning how it works and there was",
    "start": "488960",
    "end": "494879"
  },
  {
    "text": "also pretty awesome.net anywhere uh implementation of ecma created by the",
    "start": "494879",
    "end": "500560"
  },
  {
    "text": "one guy chris bacon from the google that just made it and it was able to produce",
    "start": "500560",
    "end": "507120"
  },
  {
    "text": "something that was working to the extent it was working so good that the initial blazer web assembly was",
    "start": "507120",
    "end": "513760"
  },
  {
    "text": "based on this runtime which is currently postponed and frozen",
    "start": "513760",
    "end": "519919"
  },
  {
    "text": "but it works you can look at it it is open sourced and even more exotic ones like dotnet",
    "start": "519919",
    "end": "526720"
  },
  {
    "text": "gnu or portable.net which was mostly for running",
    "start": "526720",
    "end": "531760"
  },
  {
    "text": "multi-platform things on linux and it all happens that all this is obviously",
    "start": "531760",
    "end": "538080"
  },
  {
    "text": "written in cc plus plus in unmanaged languages which is pretty understandable because",
    "start": "538080",
    "end": "543839"
  },
  {
    "text": "obviously the runtime needs to run fast it is unmanaged thing it is unmanaged application that is not",
    "start": "543839",
    "end": "551760"
  },
  {
    "text": "it should run uh using the system calls and it should be as close to the hardware as",
    "start": "551760",
    "end": "558080"
  },
  {
    "text": "possible probably which is our intuition however uh the part of the",
    "start": "558080",
    "end": "564959"
  },
  {
    "start": "563000",
    "end": "563000"
  },
  {
    "text": "runtime which is c plus plus based is not so obvious like it is not that",
    "start": "564959",
    "end": "570560"
  },
  {
    "text": "the whole runtime needs to be written in c plus plus and it we are seeing it currently",
    "start": "570560",
    "end": "577200"
  },
  {
    "text": "for example in dot net core dot net five and we can see that more and more parts",
    "start": "577200",
    "end": "582959"
  },
  {
    "text": "of it are being poured to c sharp which may be pretty surprising so it is not",
    "start": "582959",
    "end": "588160"
  },
  {
    "text": "that the whole part of the runtime is currently written in c plus plus it has some benefits",
    "start": "588160",
    "end": "594480"
  },
  {
    "text": "to take a code from the runtime written in c plus and port it to c sharp one of the let's say soft",
    "start": "594480",
    "end": "602320"
  },
  {
    "text": "based soft skill based is that this has a better maintain an ability because it is",
    "start": "602320",
    "end": "608160"
  },
  {
    "text": "just as c-sharp so more developers will be able to maintain it and for example to contribute to it",
    "start": "608160",
    "end": "616079"
  },
  {
    "text": "moreover it is out of the box multi-platform so if you have a code that is written in c plus plus",
    "start": "616079",
    "end": "622399"
  },
  {
    "text": "there are big chances it is somehow per platform based and then if you port",
    "start": "622399",
    "end": "628959"
  },
  {
    "text": "it to c-sharp you have out-of-the-box multi-platform code that will be just cheated by the runtime",
    "start": "628959",
    "end": "634480"
  },
  {
    "text": "and there are also performance benefits so if you have a code in c plus in the runtime and your",
    "start": "634480",
    "end": "641200"
  },
  {
    "text": "application needs to call it it needs to make this manage to unmanage transition",
    "start": "641200",
    "end": "647279"
  },
  {
    "text": "which is just an overhead it reduces the flexibility of the gc powers for example",
    "start": "647279",
    "end": "653440"
  },
  {
    "text": "so having no transition at all is just profitable of also from the",
    "start": "653440",
    "end": "660480"
  },
  {
    "text": "performance perspective and that's why we will see that direction of porting some parts of",
    "start": "660480",
    "end": "667360"
  },
  {
    "text": "it there is an open issue uh to port the whole g10 gc to c-sharp which is",
    "start": "667360",
    "end": "674320"
  },
  {
    "text": "kind of dreaming off and it will probably not happen in the full run time but some parts are indeed",
    "start": "674320",
    "end": "681040"
  },
  {
    "text": "ported like some helpers used by the jit are indeed recently ported to c-sharp like the",
    "start": "681040",
    "end": "689600"
  },
  {
    "text": "helper which is used for the unbox operation or when we store or read a reference between objects so we",
    "start": "689600",
    "end": "696640"
  },
  {
    "text": "see this that even so low-level stuff like jit is starting to use some c-sharp code",
    "start": "696640",
    "end": "702640"
  },
  {
    "text": "even there is a pretty huge project now to port the whole thread pool from the c-plus",
    "start": "702640",
    "end": "709440"
  },
  {
    "text": "plus code inside the runtime to make it multi-platform better well implemented",
    "start": "709440",
    "end": "715200"
  },
  {
    "text": "in c-sharp some sorting primitives were recently ported to c-sharp",
    "start": "715200",
    "end": "720320"
  },
  {
    "text": "and we can read about it in this famous um dot-net performance improvements by",
    "start": "720320",
    "end": "725920"
  },
  {
    "text": "stephen tope that it just gives us real benefits in terms of performance or comparing",
    "start": "725920",
    "end": "732160"
  },
  {
    "text": "animals were imported so yes this is the direction we will see probably",
    "start": "732160",
    "end": "737200"
  },
  {
    "text": "so this is not so obvious that everything should be in c plus plus moreover there are always some projects",
    "start": "737200",
    "end": "744000"
  },
  {
    "text": "to make almost everything in c sharp like we have this core rt project and when the goal was to",
    "start": "744000",
    "end": "751120"
  },
  {
    "text": "write as much part of it in c sharp as possible the whole type system",
    "start": "751120",
    "end": "756839"
  },
  {
    "text": "was written in c-sharp for example that was like another run-time",
    "start": "756839",
    "end": "762560"
  },
  {
    "text": "implementation just to be kind of managed one obviously",
    "start": "762560",
    "end": "767600"
  },
  {
    "text": "maybe obviously but the the goal was here to write it as much as possible but still such",
    "start": "767600",
    "end": "772880"
  },
  {
    "text": "low level parts like gc or jit were still written in c c plus plus",
    "start": "772880",
    "end": "779440"
  },
  {
    "text": "so it is kind of in the middle between writing something managed and unmanaged so i thought",
    "start": "779440",
    "end": "787279"
  },
  {
    "text": "what if the manage runtime itself is managed so to make these assumptions even further and make everything managed",
    "start": "787279",
    "end": "794480"
  },
  {
    "text": "so there will be no literally no native c plus plus code inside the runtime",
    "start": "794480",
    "end": "800000"
  },
  {
    "text": "and i was wondering has anyone tried to do such a crazy thing just to validate by the craziness of the",
    "start": "800000",
    "end": "807120"
  },
  {
    "text": "idea and then i started investigations as typically on the platform field",
    "start": "807120",
    "end": "814000"
  },
  {
    "text": "and the runtimes field a lot of interesting research is happening in the jvm area and around",
    "start": "814000",
    "end": "821440"
  },
  {
    "text": "so for example there is a grall avm runtime which is just something very",
    "start": "821440",
    "end": "828079"
  },
  {
    "text": "similar to color t in the end so a lot of this runtime is written in java even jit is written in java in it so it",
    "start": "828079",
    "end": "835600"
  },
  {
    "text": "seems that okay that that idea was validated and the correct t direction is",
    "start": "835600",
    "end": "842959"
  },
  {
    "text": "valid but also i meet the gyx rvm and giax rvm is even going further it is",
    "start": "842959",
    "end": "849760"
  },
  {
    "text": "a jvm virtual machine written entirely in java only some small",
    "start": "849760",
    "end": "855360"
  },
  {
    "text": "c based bootstrapping is happening inside so because of that um we we",
    "start": "855360",
    "end": "862399"
  },
  {
    "text": "have some very small unmanaged part that starts everything but everything else is",
    "start": "862399",
    "end": "867920"
  },
  {
    "text": "written in java including jit for example and the other parts",
    "start": "867920",
    "end": "873279"
  },
  {
    "text": "so it seems pretty encouraging like okay if jvm is doing such thing let's try to port",
    "start": "873279",
    "end": "881279"
  },
  {
    "text": "the whole idea to the dotnet ecosystem simply to write something like jxrvm in dotnet",
    "start": "881279",
    "end": "889040"
  },
  {
    "text": "and as the home page of the of this whole project says um",
    "start": "889040",
    "end": "895839"
  },
  {
    "text": "jive's rvm was provided as and was designed as a flexible open",
    "start": "895839",
    "end": "901360"
  },
  {
    "text": "testbed for experiments to prototype various virtual machine technologies",
    "start": "901360",
    "end": "906720"
  },
  {
    "text": "and this goal has been achieved so it is noticed as a useful vehicle for research",
    "start": "906720",
    "end": "913680"
  },
  {
    "text": "a lot of scientific papers and publications were around jake's rvm because it is so convenient",
    "start": "913680",
    "end": "920639"
  },
  {
    "text": "to in java world to have the runtime written in java it just opens and triggers and encourages",
    "start": "920639",
    "end": "928399"
  },
  {
    "text": "we can save drives and just experiments on the field of the runtime itself if it",
    "start": "928399",
    "end": "933600"
  },
  {
    "text": "is written in java so uh in the end why the idea of the",
    "start": "933600",
    "end": "939120"
  },
  {
    "start": "935000",
    "end": "935000"
  },
  {
    "text": "whole mobius the crazy idea of having mobius the first of all to make something very",
    "start": "939120",
    "end": "945279"
  },
  {
    "text": "similar so to have something that is for research and experiments",
    "start": "945279",
    "end": "950399"
  },
  {
    "text": "and it will be much easier and faster to prototype various parts if you have everything in",
    "start": "950399",
    "end": "956800"
  },
  {
    "text": "c-sharp so you can for example write your own gc or just fine-tune some parts of the",
    "start": "956800",
    "end": "962560"
  },
  {
    "text": "current gc or the current dit obviously for me personally it is also for learning so",
    "start": "962560",
    "end": "968880"
  },
  {
    "text": "i have a possibility to learn a lot about the structure of the runtime and its internal dependencies which then i can",
    "start": "968880",
    "end": "976079"
  },
  {
    "text": "teach about so it is a let's say dual benefit for everyone and also for abusing",
    "start": "976079",
    "end": "982320"
  },
  {
    "text": "as i'm saying or just learning c-sharp and its newest low-level stuff so such a code like the runtime written in",
    "start": "982320",
    "end": "989600"
  },
  {
    "text": "c sharp sounds like a good piece and field for and playground for testing all these spans",
    "start": "989600",
    "end": "997519"
  },
  {
    "text": "stackalogs unsafe class and all the low-level stuff that we can have in c-sharp",
    "start": "997519",
    "end": "1002959"
  },
  {
    "text": "and even discovering some bugs that i am able to to meet",
    "start": "1002959",
    "end": "1010800"
  },
  {
    "text": "because i'm doing crazy stuff in the round in the c-sharp itself for fun obviously this is awful fun also",
    "start": "1010800",
    "end": "1018959"
  },
  {
    "text": "the more problematic thing is whether it is for performance and",
    "start": "1018959",
    "end": "1024240"
  },
  {
    "text": "the very first um let's say a fault that you can have when you see",
    "start": "1024240",
    "end": "1031199"
  },
  {
    "text": "that i was designing mobius as a runtime running on another runtime that it should be until probably be",
    "start": "1031199",
    "end": "1038319"
  },
  {
    "text": "super super slow and i will just elaborate about it",
    "start": "1038319",
    "end": "1043360"
  },
  {
    "text": "in a minute so the whole idea of mobius has been coined and now just by saying",
    "start": "1043360",
    "end": "1050160"
  },
  {
    "text": "a few sentences about how sorry about why now let's move to the how part so how it",
    "start": "1050160",
    "end": "1056559"
  },
  {
    "text": "is designed some design fundamentals of doing such crazy thing",
    "start": "1056559",
    "end": "1061919"
  },
  {
    "text": "so first of all we can see about we can elaborate about two vari two levels of",
    "start": "1061919",
    "end": "1068559"
  },
  {
    "text": "runtimes now first we need uh our application obviously that we would like to",
    "start": "1068559",
    "end": "1074720"
  },
  {
    "text": "compile and run so it is any application in the world there any dot net applications that you",
    "start": "1074720",
    "end": "1080000"
  },
  {
    "text": "would like to run and then typically you run it on.net core on.net 5 runtime but in my case",
    "start": "1080000",
    "end": "1086960"
  },
  {
    "text": "you will run it on mobius runtime which is managed so this runtime will run on.net core so",
    "start": "1086960",
    "end": "1092720"
  },
  {
    "text": "we have this sandwich here two levels of runtimes and including",
    "start": "1092720",
    "end": "1098000"
  },
  {
    "text": "my own mobius one so it seems like pretty mind blowing and we",
    "start": "1098000",
    "end": "1104240"
  },
  {
    "text": "have two layers of everything like two layers of gted code to run times to dc's",
    "start": "1104240",
    "end": "1109440"
  },
  {
    "text": "and everything is doubled how it may all work so this is an",
    "start": "1109440",
    "end": "1115760"
  },
  {
    "text": "and whether it would be so slow that you can imagine that everything will be twice slower or even",
    "start": "1115760",
    "end": "1121200"
  },
  {
    "text": "more times slower because of all that not necessarily because uh we need to understand what the",
    "start": "1121200",
    "end": "1128720"
  },
  {
    "text": "runtime really does in terms of running your application it is taking the il code and it is",
    "start": "1128720",
    "end": "1134880"
  },
  {
    "text": "jitting it into the native code in the end your application runs as a native",
    "start": "1134880",
    "end": "1140400"
  },
  {
    "text": "application it runs executing binary code of your machine so",
    "start": "1140400",
    "end": "1147039"
  },
  {
    "text": "obviously the jit quality matters how the good code is emitted by the jit",
    "start": "1147039",
    "end": "1152640"
  },
  {
    "text": "itself but then it mostly runs as a native speed because it is just executing the",
    "start": "1152640",
    "end": "1158480"
  },
  {
    "text": "native application called the binary code so um in these terms we can say that",
    "start": "1158480",
    "end": "1167280"
  },
  {
    "text": "the mobius jit quality will be the most important one uh whether the whole thing will run very",
    "start": "1167280",
    "end": "1173679"
  },
  {
    "text": "fast or very slow not the idea and by default so when you have something like that uh",
    "start": "1173679",
    "end": "1180799"
  },
  {
    "text": "you can imagine that okay i'm having my application it is just compiled from c sharp to il",
    "start": "1180799",
    "end": "1188799"
  },
  {
    "text": "and then when i running it the mobius as the my runtime will jit compile it and it will be just",
    "start": "1188799",
    "end": "1196080"
  },
  {
    "text": "running as a native code because my jit has emitted the native code of your",
    "start": "1196080",
    "end": "1202240"
  },
  {
    "text": "application and 90 80 percent of the time it will be just that it will be",
    "start": "1202240",
    "end": "1208240"
  },
  {
    "text": "just executing the native jited code and it will be not matter whether it's what",
    "start": "1208240",
    "end": "1214000"
  },
  {
    "text": "was emitted by mobius.net core or anything else it is just a native jitted code to be executed",
    "start": "1214000",
    "end": "1221360"
  },
  {
    "text": "obviously sometimes this code needs to ask the runtime for something the very typical thing is allocation so",
    "start": "1221360",
    "end": "1228640"
  },
  {
    "text": "if you are newing up something here in your app then the jit will emit the allocator code",
    "start": "1228640",
    "end": "1235919"
  },
  {
    "text": "that will make a call to the runtime asking for the place for your object so",
    "start": "1235919",
    "end": "1241200"
  },
  {
    "text": "allocations will be one of the most typical ways how the jitted code",
    "start": "1241200",
    "end": "1246799"
  },
  {
    "text": "of your application will call back my runtime my mobius and then obviously",
    "start": "1246799",
    "end": "1254159"
  },
  {
    "text": "because my runtime code is managed in c-sharp it will be also cheated but now it will be cheated by net core",
    "start": "1254159",
    "end": "1261520"
  },
  {
    "text": "so the allocator code will be cheated and will be now executed as a native code",
    "start": "1261520",
    "end": "1267200"
  },
  {
    "text": "just because it has been dated by dot net core or five so yes we have two levels of jits but i",
    "start": "1267200",
    "end": "1274480"
  },
  {
    "text": "would say 90 or 80 percent of the application will be just here executing the native code with some",
    "start": "1274480",
    "end": "1282159"
  },
  {
    "text": "occasional not so frequent calls to the mobius code which then will have even less frequent calls to",
    "start": "1282159",
    "end": "1289120"
  },
  {
    "text": "the regular.net core code of the runtime so it",
    "start": "1289120",
    "end": "1295200"
  },
  {
    "text": "make sense like it for sure not be so fast as the regular.net application",
    "start": "1295200",
    "end": "1302000"
  },
  {
    "text": "running on the regular.net core but the difference doesn't have to be so so big that it will not make any",
    "start": "1302000",
    "end": "1308880"
  },
  {
    "text": "sense to run anything or that and also remember it is all for experiments and research so in the end",
    "start": "1308880",
    "end": "1315200"
  },
  {
    "text": "the performance maybe is not so so important here but still it may be",
    "start": "1315200",
    "end": "1320240"
  },
  {
    "text": "valid to run something on it not to just wait as it will be not 10 times slower for",
    "start": "1320240",
    "end": "1326880"
  },
  {
    "text": "example than a regular application running on the regular runtime so we have this two levels and",
    "start": "1326880",
    "end": "1334880"
  },
  {
    "text": "conceptually the all what that matters is the jit that will produce some code",
    "start": "1334880",
    "end": "1340320"
  },
  {
    "text": "that will be run as your application and then some fundamental questions for",
    "start": "1340320",
    "end": "1347600"
  },
  {
    "start": "1344000",
    "end": "1344000"
  },
  {
    "text": "example if i have two runtimes what i will share between them like jake's rvm is sharing something",
    "start": "1347600",
    "end": "1353679"
  },
  {
    "text": "the java is running on itself and in case of mobius i could also think",
    "start": "1353679",
    "end": "1359679"
  },
  {
    "text": "about sharing some information like for example i could reuse the whole type system at runtime from the dotnet core or i can",
    "start": "1359679",
    "end": "1367200"
  },
  {
    "text": "think about sharing some memory and share some gc maintenance of the memory",
    "start": "1367200",
    "end": "1372480"
  },
  {
    "text": "between the those runtimes but it would introduce some limitations",
    "start": "1372480",
    "end": "1377840"
  },
  {
    "text": "and i was really thinking about introducing and enforcing encouraging",
    "start": "1377840",
    "end": "1383200"
  },
  {
    "text": "experiments so i didn't want to have any constraints so the obvious choice was",
    "start": "1383200",
    "end": "1390080"
  },
  {
    "text": "just not to share enough i was sure nothing and to have the totally new thing",
    "start": "1390080",
    "end": "1396720"
  },
  {
    "text": "that you will be able to implement so there is totally nothing to be shared between the mobius and the dotnet core",
    "start": "1396720",
    "end": "1403039"
  },
  {
    "text": "everything needs to be written from scratch which is nice and because now you can",
    "start": "1403039",
    "end": "1408960"
  },
  {
    "text": "write anything that you can imagine and moreover by replacing things",
    "start": "1408960",
    "end": "1415360"
  },
  {
    "text": "so everything should be defined in a way that you can easily place the jit or you can replace",
    "start": "1415360",
    "end": "1421440"
  },
  {
    "text": "the dc and it will still run with your own implementations so",
    "start": "1421440",
    "end": "1428640"
  },
  {
    "text": "if the mobius runtime is written in an efficient way like not so aloki and not so allocating",
    "start": "1428640",
    "end": "1435200"
  },
  {
    "text": "way of doing things typically it will be pretty rarely calling the dotnet core",
    "start": "1435200",
    "end": "1443200"
  },
  {
    "text": "because it will be not in needing no it will not need to call it so it sounds like a valid idea still",
    "start": "1443200",
    "end": "1452080"
  },
  {
    "text": "and while still having own implementations of everything so literally there was a point in time",
    "start": "1452080",
    "end": "1458720"
  },
  {
    "text": "when i was just clicking file new solution and creating a new solution for the whole idea",
    "start": "1458720",
    "end": "1464480"
  },
  {
    "text": "and i needed to think about the structure so obviously there is a host which would be a console application",
    "start": "1464480",
    "end": "1470960"
  },
  {
    "text": "taking your dll and you're executing asking the runtime to execute it there",
    "start": "1470960",
    "end": "1476559"
  },
  {
    "text": "will be some core part of the library of the whole idea that will",
    "start": "1476559",
    "end": "1482000"
  },
  {
    "text": "contain let's say the putting all the pieces together the type system inside then the gc",
    "start": "1482000",
    "end": "1489279"
  },
  {
    "text": "and the jit has the two most important blocks that i would like to treat as plugins so no",
    "start": "1489279",
    "end": "1496240"
  },
  {
    "text": "constraints no any assumptions about the gc and the g so you can replace it with your own",
    "start": "1496240",
    "end": "1502640"
  },
  {
    "text": "implementation which obviously makes a really big trouble from the perspective of the api",
    "start": "1502640",
    "end": "1508080"
  },
  {
    "text": "design because the runtime really relies typically on some assumptions between the gc the jit",
    "start": "1508080",
    "end": "1514559"
  },
  {
    "text": "and other stuff so it is not so trivial to make an api that will make all those",
    "start": "1514559",
    "end": "1519840"
  },
  {
    "text": "things plug enable but still it is one of the main research areas here",
    "start": "1519840",
    "end": "1525360"
  },
  {
    "text": "um one of the most important thing that i need to find out how to do",
    "start": "1525360",
    "end": "1532640"
  },
  {
    "text": "that and some auxiliary projects for for helpers and other stuff so",
    "start": "1532640",
    "end": "1538000"
  },
  {
    "text": "having all these uh i must say maybe you have seen my talk last year or maybe you have just heard",
    "start": "1538000",
    "end": "1544960"
  },
  {
    "text": "about the idea that you can replace the gc in the current.net core so there is this",
    "start": "1544960",
    "end": "1550640"
  },
  {
    "text": "local gc nearshit initiative and i started to implement my own custom gc",
    "start": "1550640",
    "end": "1556400"
  },
  {
    "text": "and i started to do that but i postponed this project a little because i've met a lot of important",
    "start": "1556400",
    "end": "1563440"
  },
  {
    "text": "limitations between the dc and the runtime so the api introduced",
    "start": "1563440",
    "end": "1568640"
  },
  {
    "text": "there is pretty limited uh which forced me to stop the work because that's was not something that was",
    "start": "1568640",
    "end": "1575760"
  },
  {
    "text": "encouraging a lot to make the uh further development so here are the totally different thing",
    "start": "1575760",
    "end": "1582400"
  },
  {
    "text": "i would like to see uh api is so flexible that you can change",
    "start": "1582400",
    "end": "1587919"
  },
  {
    "text": "anything and you write any algorithm you want some design fundamental choices like",
    "start": "1587919",
    "end": "1594320"
  },
  {
    "text": "whether the code should be asking or not the decision was pretty simple it should be not asking because",
    "start": "1594320",
    "end": "1599679"
  },
  {
    "text": "the runtime itself is not asking that this is no i o bound so much it is typically just the jit",
    "start": "1599679",
    "end": "1606159"
  },
  {
    "text": "which is the cpu bound code and then important a decision what about the jeet",
    "start": "1606159",
    "end": "1612240"
  },
  {
    "text": "that i will cover in a moment unfortunately when writing your own runtime there is this",
    "start": "1612240",
    "end": "1617600"
  },
  {
    "text": "pretty blocking pretty boring part that you need to",
    "start": "1617600",
    "end": "1624480"
  },
  {
    "text": "overcome the type system metadata type system the whole thing which is takes",
    "start": "1624480",
    "end": "1630080"
  },
  {
    "text": "a lot of space in the ecma standard needs to be your friend and you need to read all of that and",
    "start": "1630080",
    "end": "1636480"
  },
  {
    "text": "need to implement it it's not rocket science it is like operational bits and bytes",
    "start": "1636480",
    "end": "1642480"
  },
  {
    "text": "but you need to support the type system obviously to make uh execution your application the dc itself",
    "start": "1642480",
    "end": "1650640"
  },
  {
    "text": "is super interesting so obviously i like that this topic it is my beloved topic and then a lot of",
    "start": "1650640",
    "end": "1657120"
  },
  {
    "text": "decisions how the gc should be implemented but this is a second level decision",
    "start": "1657120",
    "end": "1662399"
  },
  {
    "text": "because i in mobius everything is a plugin so the gcu is also a plugin so it doesn't matter a lot",
    "start": "1662399",
    "end": "1669039"
  },
  {
    "text": "how the current gc is implemented and what it has a as a functionality it is just",
    "start": "1669039",
    "end": "1676080"
  },
  {
    "text": "the api between the runtime and the gc important not the the wc itself so this",
    "start": "1676080",
    "end": "1683440"
  },
  {
    "text": "decision how the gc should be implemented is a little bit postponed by me uh but there is a second um thing to",
    "start": "1683440",
    "end": "1691039"
  },
  {
    "text": "think uh which is super important object memory layout this is something not a trivial because",
    "start": "1691039",
    "end": "1698000"
  },
  {
    "text": "every runtime in the world assume there is kind of there is a some object",
    "start": "1698000",
    "end": "1703480"
  },
  {
    "text": "memorylayout.net core expect some object number layout mono expects some so we have",
    "start": "1703480",
    "end": "1709440"
  },
  {
    "text": "there for example information what is the how we store the identifier of the type",
    "start": "1709440",
    "end": "1716080"
  },
  {
    "text": "whether there are some reference counters before and after or maybe not uh what are the representation of",
    "start": "1716080",
    "end": "1722320"
  },
  {
    "text": "represent and so on and so on so object memory layout is pretty important thing",
    "start": "1722320",
    "end": "1728559"
  },
  {
    "text": "that other pieces are heavily relying on so this is uh another thing that i",
    "start": "1728559",
    "end": "1735360"
  },
  {
    "text": "should really make it plug enable and this is a lot of free this is pretty",
    "start": "1735360",
    "end": "1740399"
  },
  {
    "text": "pretty um let's say the hardest thing that i'm currently thinking of how to make it plug enable",
    "start": "1740399",
    "end": "1748240"
  },
  {
    "text": "and customizable for experiments and so okay but even before that we need",
    "start": "1748240",
    "end": "1755520"
  },
  {
    "start": "1752000",
    "end": "1752000"
  },
  {
    "text": "something that will execute our application so we need kind of jit and now we need a decision whether it",
    "start": "1755520",
    "end": "1762480"
  },
  {
    "text": "should be whether it should be in just a regular jit or maybe we can just",
    "start": "1762480",
    "end": "1768000"
  },
  {
    "text": "use an interpreter interpreter is a simple idea in the end it is just a huge",
    "start": "1768000",
    "end": "1774640"
  },
  {
    "text": "while with a huge suite inside which will just read your memory byte by byte",
    "start": "1774640",
    "end": "1780159"
  },
  {
    "text": "op code by opcode and we'll just react to the particular op codes",
    "start": "1780159",
    "end": "1785200"
  },
  {
    "text": "something that was described two days ago when there was a talk about the game boy and",
    "start": "1785200",
    "end": "1792159"
  },
  {
    "text": "later we just uh read a memory from the some place and then interpret okay",
    "start": "1792159",
    "end": "1799120"
  },
  {
    "text": "this is this particular instruction so just let's execute this particular method that will",
    "start": "1799120",
    "end": "1804640"
  },
  {
    "text": "handle it so and this is a pretty easy concept",
    "start": "1804640",
    "end": "1809679"
  },
  {
    "text": "uh we just interpret byte by byte op code by op code the whole program",
    "start": "1809679",
    "end": "1815520"
  },
  {
    "text": "which sounds like a slow thing and it is in the end slow thing it's just a huge switch",
    "start": "1815520",
    "end": "1821279"
  },
  {
    "text": "inside the loop so there are some advantages uh still like it is super easy to",
    "start": "1821279",
    "end": "1827120"
  },
  {
    "start": "1823000",
    "end": "1823000"
  },
  {
    "text": "implement you are just implementing op code by op code the reaction to every op code",
    "start": "1827120",
    "end": "1832960"
  },
  {
    "text": "and then bigger even advantage it requires no executable memory region",
    "start": "1832960",
    "end": "1839039"
  },
  {
    "text": "you can just take a memory read from it and you are just doing some actions based on it you don't",
    "start": "1839039",
    "end": "1844880"
  },
  {
    "text": "need to emit any native code so dotnet anywhere was using it for",
    "start": "1844880",
    "end": "1850080"
  },
  {
    "text": "example as a one of the modes and there are some platforms that",
    "start": "1850080",
    "end": "1855919"
  },
  {
    "text": "does not allow you to emit executable memory regions like iot uh sorry apple",
    "start": "1855919",
    "end": "1862960"
  },
  {
    "text": "uh i operating system on ios doesn't allow you to do that so",
    "start": "1862960",
    "end": "1868960"
  },
  {
    "text": "you need to interpret something if you'd like to execute there so interpreters have their own use cases",
    "start": "1868960",
    "end": "1877120"
  },
  {
    "text": "but they also disadvantages like first of all it is super slow it's just a loop with a huge brand",
    "start": "1877120",
    "end": "1885200"
  },
  {
    "text": "with a huge switch inside so the branch predictor on the cpu is just screaming because it",
    "start": "1885200",
    "end": "1890720"
  },
  {
    "text": "doesn't allow you to optimize anything and also it is not so fancy for learning",
    "start": "1890720",
    "end": "1896880"
  },
  {
    "text": "how the jit should be implemented it is just interpreter we are just writing this interpreter and that's",
    "start": "1896880",
    "end": "1902480"
  },
  {
    "text": "all so nothing super interesting uh so there are some examples mono has",
    "start": "1902480",
    "end": "1908559"
  },
  {
    "text": "interpreter mode and this is one of the reasons why mono is used in the blazer web assembly",
    "start": "1908559",
    "end": "1914480"
  },
  {
    "text": "because web assembly currently also is in in sandboxes mode it doesn't allow you to emit the code to",
    "start": "1914480",
    "end": "1921679"
  },
  {
    "text": "be executed so it needs to run in an interpreter mode and mono has",
    "start": "1921679",
    "end": "1926799"
  },
  {
    "text": "much better interpreter than the very experimental one in dotnet",
    "start": "1926799",
    "end": "1932159"
  },
  {
    "text": "core so the mono has been chosen here uh and dotnet anywhere was interpreter",
    "start": "1932159",
    "end": "1938399"
  },
  {
    "text": "based also but okay so if not interpreter let's write the real jit and",
    "start": "1938399",
    "end": "1944399"
  },
  {
    "start": "1941000",
    "end": "1941000"
  },
  {
    "text": "it has obvious advantages like it may be super fast the sky is the limit how you will optimize",
    "start": "1944399",
    "end": "1951440"
  },
  {
    "text": "the code that is emitted by the jit and obviously it allows you to",
    "start": "1951440",
    "end": "1956640"
  },
  {
    "text": "learn how to write a real jit but the problem is you need to the sky is the limit in terms of",
    "start": "1956640",
    "end": "1963279"
  },
  {
    "text": "implementation so it may take a lot of time to write a",
    "start": "1963279",
    "end": "1968320"
  },
  {
    "text": "really good jit this like for a lot of people for a lot of years probably to write something that",
    "start": "1968320",
    "end": "1975279"
  },
  {
    "text": "will be sophisticated enough to be production ready",
    "start": "1975279",
    "end": "1980640"
  },
  {
    "text": "and uh yes and it has this disadvantage it requires executable memory region",
    "start": "1980640",
    "end": "1986240"
  },
  {
    "text": "because we exec we emit some instructions that then will be executed",
    "start": "1986240",
    "end": "1991279"
  },
  {
    "text": "as a regular application and almost every dotnet runtime is using this approach",
    "start": "1991279",
    "end": "1997120"
  },
  {
    "text": "so it sounds like i should follow this direction but there is something in the middle and",
    "start": "1997120",
    "end": "2003200"
  },
  {
    "start": "2002000",
    "end": "2002000"
  },
  {
    "text": "there is something more which is called threaded code you can look at the wikipedia edit threaded code",
    "start": "2003200",
    "end": "2010720"
  },
  {
    "text": "is a concept a programming technique where the code has a form of s",
    "start": "2010720",
    "end": "2016960"
  },
  {
    "text": "consists of subroutine calls and so instead of making very",
    "start": "2016960",
    "end": "2022559"
  },
  {
    "text": "sophisticated code our threaded code is just a long list of subroutine calls",
    "start": "2022559",
    "end": "2028640"
  },
  {
    "text": "and those subroutine calls may be reactions to our cop code",
    "start": "2028640",
    "end": "2034000"
  },
  {
    "text": "so in this threaded code mode we are doing something like did because jit is is in the end we are",
    "start": "2034000",
    "end": "2040720"
  },
  {
    "text": "emitting some code so there will be no interpretation phase and the jit in this mode will just emit",
    "start": "2040720",
    "end": "2049200"
  },
  {
    "text": "a long list of calls for every cll cll instruction",
    "start": "2049200",
    "end": "2056000"
  },
  {
    "text": "and and what's even more nice here it may directly implement the cli",
    "start": "2056000",
    "end": "2062638"
  },
  {
    "text": "stack based machine because if you look at the how the underneath the",
    "start": "2062639",
    "end": "2068878"
  },
  {
    "text": "cal a code looks like it is operating on so-called evaluation stack",
    "start": "2068879",
    "end": "2074638"
  },
  {
    "text": "so let's just not having a lot of words about it just let's show you an example",
    "start": "2074639",
    "end": "2080240"
  },
  {
    "text": "imagine that you have a code in c sharp that adds two numbers and in case of c sharp you will write",
    "start": "2080240",
    "end": "2086720"
  },
  {
    "text": "write obviously a plus b and that's all then it will be compiled to the il code that looks like that",
    "start": "2086720",
    "end": "2094000"
  },
  {
    "text": "and because it is stacked based it is just translated to an operation on this",
    "start": "2094000",
    "end": "2099520"
  },
  {
    "text": "virtual evaluation stack saying that okay so let's push a number a on the",
    "start": "2099520",
    "end": "2106960"
  },
  {
    "text": "stack let's push the number b on the stack and then the instruction add is taking the",
    "start": "2106960",
    "end": "2114480"
  },
  {
    "text": "two numbers from the top of the stack adding them and replacing the result of this",
    "start": "2114480",
    "end": "2120960"
  },
  {
    "text": "addition to and putting the result of this addition on the stack so in the end we",
    "start": "2120960",
    "end": "2127599"
  },
  {
    "text": "replace the numbers n a a and b from the top of the stack by the result of the addition this is",
    "start": "2127599",
    "end": "2134960"
  },
  {
    "text": "how the whole your application is looking from the il perspective and this now can be admitted",
    "start": "2134960",
    "end": "2142880"
  },
  {
    "text": "to a super sophisticated jit code using for example registers and so on and so",
    "start": "2142880",
    "end": "2148320"
  },
  {
    "text": "on but in case of the threaded jit it may be jitted to something",
    "start": "2148320",
    "end": "2153440"
  },
  {
    "text": "as easy as here unlike in the pseudo assembly code we are just converting every instruction",
    "start": "2153440",
    "end": "2161119"
  },
  {
    "text": "in the il code to a call to a subrat routine doing what",
    "start": "2161119",
    "end": "2166160"
  },
  {
    "text": "should be done so for example if we have a called to a subroutine responsible for",
    "start": "2166160",
    "end": "2173359"
  },
  {
    "text": "pushing something on the stack and this is an evaluation stack in the ielts terminology",
    "start": "2173359",
    "end": "2179119"
  },
  {
    "text": "but we now using the real stack for this evaluation stack so we are just putting",
    "start": "2179119",
    "end": "2184880"
  },
  {
    "text": "this number on the stack then we are putting the second number on the stack and the",
    "start": "2184880",
    "end": "2189920"
  },
  {
    "text": "call to the add instruction will be just taking those two numbers adding them and putting the",
    "start": "2189920",
    "end": "2196720"
  },
  {
    "text": "result on the stack so we can we can have this pretty nice one-to-one mapping",
    "start": "2196720",
    "end": "2202240"
  },
  {
    "text": "between every il instruction and we can emit some real native code that will execute",
    "start": "2202240",
    "end": "2209760"
  },
  {
    "text": "this this is beneficial because it knows it is now just a regular native code that",
    "start": "2209760",
    "end": "2215839"
  },
  {
    "text": "will be executed by the cpu without no interpretation so",
    "start": "2215839",
    "end": "2222240"
  },
  {
    "text": "it is something exactly in the middle a perfect middle ground it has a tolerable difficulty because it",
    "start": "2222240",
    "end": "2229040"
  },
  {
    "text": "is good for start i am able to mark to map the one to one",
    "start": "2229040",
    "end": "2234079"
  },
  {
    "text": "every il instruction to some subroutines so the logic",
    "start": "2234079",
    "end": "2241119"
  },
  {
    "text": "looks like almost like the normal interpreter but in the end it is emitting a native code okay it will consist of a",
    "start": "2241119",
    "end": "2248960"
  },
  {
    "text": "lot of calls but calls are extremely optimist optimized nowadays so",
    "start": "2248960",
    "end": "2256160"
  },
  {
    "text": "it is not so super slow as we may expect and moreover it requires the executable",
    "start": "2256160",
    "end": "2262640"
  },
  {
    "text": "memory region still so it behaves like a normal jit it has the same limitations so it is a perfect",
    "start": "2262640",
    "end": "2268960"
  },
  {
    "text": "ground for learning also so okay so this is the fundamental decision",
    "start": "2268960",
    "end": "2275440"
  },
  {
    "text": "the current gt implementation in the mobius is a threaded one obviously it needs to be written in a",
    "start": "2275440",
    "end": "2282160"
  },
  {
    "text": "plug-able way so in the future you may change something you may replace it totally",
    "start": "2282160",
    "end": "2288079"
  },
  {
    "text": "or you can fine-tune fine-tune something in the current implementation",
    "start": "2288079",
    "end": "2293119"
  },
  {
    "text": "so those those were the design decisions how all this is uh working from the",
    "start": "2293119",
    "end": "2299680"
  },
  {
    "start": "2299000",
    "end": "2299000"
  },
  {
    "text": "code level just a few examples because it would be pretty boring to cover",
    "start": "2299680",
    "end": "2305200"
  },
  {
    "text": "everything and so just a few examples and the metadata i'm just reading with the help",
    "start": "2305200",
    "end": "2310880"
  },
  {
    "text": "of the pe net library nothing super sophisticated so there is a pretty nice library that is",
    "start": "2310880",
    "end": "2317359"
  },
  {
    "text": "just able for reading for example windows portable executable headers and from there i can read addresses",
    "start": "2317359",
    "end": "2325200"
  },
  {
    "text": "where the metadata are to the point when i'm able to find",
    "start": "2325200",
    "end": "2330400"
  },
  {
    "text": "every method address and its size uh in terms of il code obviously so",
    "start": "2330400",
    "end": "2337359"
  },
  {
    "text": "pe net helps me here just to find the method with the given for example the entry",
    "start": "2337359",
    "end": "2343440"
  },
  {
    "text": "point of our assembly and just read it from the memory so",
    "start": "2343440",
    "end": "2348480"
  },
  {
    "text": "nothing super sophisticated the more important the more interesting part is the jit implementation so",
    "start": "2348480",
    "end": "2356560"
  },
  {
    "start": "2352000",
    "end": "2352000"
  },
  {
    "text": "i'm allocating pages that will be used to populate the",
    "start": "2356560",
    "end": "2363599"
  },
  {
    "text": "code that is emitted by the jit and what's important i'm using this execute rights so i will be then able to",
    "start": "2363599",
    "end": "2371280"
  },
  {
    "text": "call matters from there they will be able to execute because they have this execute rights",
    "start": "2371280",
    "end": "2377200"
  },
  {
    "text": "and obviously i need also to have the right rights because i will emit the code there and then i had only to write the",
    "start": "2377200",
    "end": "2384800"
  },
  {
    "text": "jit emit method like okay so in assuming that i have an address of the method body",
    "start": "2384800",
    "end": "2390800"
  },
  {
    "text": "in terms of the il code and the region when it should be emitted",
    "start": "2390800",
    "end": "2396240"
  },
  {
    "text": "let's just implement the jit the simple thing just to do that at this stage",
    "start": "2396240",
    "end": "2401599"
  },
  {
    "text": "of the development and when i will just emit it i know that under this pointer",
    "start": "2401599",
    "end": "2408400"
  },
  {
    "text": "under this address i have a method that can be executed so i need some magic",
    "start": "2408400",
    "end": "2414480"
  },
  {
    "text": "in c sharp that will be able to call now from the managed code the unmanaged",
    "start": "2414480",
    "end": "2420640"
  },
  {
    "text": "method that just has been emitted under the given address",
    "start": "2420640",
    "end": "2426560"
  },
  {
    "text": "this is all supported in secret what is luckily for me so for example if",
    "start": "2426560",
    "end": "2433280"
  },
  {
    "text": "you have an address in a memory and you would like to call it it sounds like a super low level stuff",
    "start": "2433280",
    "end": "2439440"
  },
  {
    "text": "and in the end it is there is il instruction for that it is called koli",
    "start": "2439440",
    "end": "2445119"
  },
  {
    "text": "and it is just the instruction that is just taking an address and it is just assuming you are really",
    "start": "2445119",
    "end": "2451440"
  },
  {
    "text": "know what you are doing and will start to execute a code under the given address so",
    "start": "2451440",
    "end": "2458960"
  },
  {
    "text": "if i would like to do something like that i can and this is an example in the il",
    "start": "2458960",
    "end": "2466800"
  },
  {
    "text": "uh you have a let's say managed method you are just taking an address of it and",
    "start": "2466800",
    "end": "2472400"
  },
  {
    "text": "using this instruction to call it all this is for managed code and all this is also recently exposed in",
    "start": "2472400",
    "end": "2480480"
  },
  {
    "text": "c sharp nine as the function pointers so if you have mad this that the c sharp nine into this",
    "start": "2480480",
    "end": "2486560"
  },
  {
    "text": "is function pointers it is nothing else like exposing those two instructions the kohli and ld ftn",
    "start": "2486560",
    "end": "2495359"
  },
  {
    "text": "which takes an address of a method and it is now exposed to c sharp so delegates will start now to",
    "start": "2495359",
    "end": "2502000"
  },
  {
    "text": "have stars as an address of a method that may be taken",
    "start": "2502000",
    "end": "2507359"
  },
  {
    "text": "with this operator that's nice and it's nice that it is exposed to",
    "start": "2507359",
    "end": "2513040"
  },
  {
    "text": "c-sharp but unfortunately i cannot use this approach",
    "start": "2513040",
    "end": "2518400"
  },
  {
    "text": "because as you see the pointer to the method needs to be strongly typed",
    "start": "2518400",
    "end": "2525359"
  },
  {
    "text": "so i and this is fortunate obviously for the perspective of the regular code",
    "start": "2525359",
    "end": "2531599"
  },
  {
    "text": "because i know that i have a pointer to a method that accepts an integer and returns an",
    "start": "2531599",
    "end": "2537040"
  },
  {
    "text": "integer as a result this is a type safety on the c-sharp level which is super nice",
    "start": "2537040",
    "end": "2542640"
  },
  {
    "text": "but reimagined and remember i'm getting a code from the external application",
    "start": "2542640",
    "end": "2549359"
  },
  {
    "text": "and i totally have no idea at this point whether what are the return types and",
    "start": "2549359",
    "end": "2556000"
  },
  {
    "text": "arguments of this method it comes from the external code from the application that you are running so",
    "start": "2556000",
    "end": "2561680"
  },
  {
    "text": "i don't know at the compilation level what are the types what is the signature",
    "start": "2561680",
    "end": "2567680"
  },
  {
    "text": "of it because of that i need to make some il emitting on the level of the runtime",
    "start": "2567680",
    "end": "2575119"
  },
  {
    "text": "that will call and use this kodi instruction directly i'm not showing this not to scare you",
    "start": "2575119",
    "end": "2581280"
  },
  {
    "text": "enough but it is working so in the end i'm able to take an address of every method",
    "start": "2581280",
    "end": "2588480"
  },
  {
    "text": "and call it with the help of the il amit function nullity in the",
    "start": "2588480",
    "end": "2594880"
  },
  {
    "text": "c-sharp and standard libraries so this looks like that having a method",
    "start": "2594880",
    "end": "2602720"
  },
  {
    "text": "pointer so imagine that i'm saying this okay i have a method that i would like to",
    "start": "2602720",
    "end": "2608000"
  },
  {
    "text": "call and this method is under this given address i'm using the dynamic method and it's",
    "start": "2608000",
    "end": "2614160"
  },
  {
    "text": "possibility to emit il code maybe you have seen this before maybe not we have such low level things in",
    "start": "2614160",
    "end": "2620960"
  },
  {
    "text": "dotnet so you can just in time by the use of the reflection emit your",
    "start": "2620960",
    "end": "2628319"
  },
  {
    "text": "own methods dynamically and i'm just doing that here i'm just using it to emit the",
    "start": "2628319",
    "end": "2634480"
  },
  {
    "text": "calling instruction to call a function under the given address",
    "start": "2634480",
    "end": "2640400"
  },
  {
    "text": "still with that strongly typed signatures so this method is the first iteration",
    "start": "2640400",
    "end": "2646400"
  },
  {
    "text": "the second one which looks much more scarier is using the dynamically",
    "start": "2646400",
    "end": "2653200"
  },
  {
    "text": "created signatures but i will not show you that not to scare you totally so but believe me i'm able to jit and i'm",
    "start": "2653200",
    "end": "2661040"
  },
  {
    "text": "able to i'll emit a code that will call a given method with the dynamic signature so we have",
    "start": "2661040",
    "end": "2668560"
  },
  {
    "text": "all these pieces in place almost and because",
    "start": "2668560",
    "end": "2675119"
  },
  {
    "text": "obviously uh this is what the jit will be doing but did as the name states is that this",
    "start": "2675119",
    "end": "2682240"
  },
  {
    "text": "just in time compiler so it does not compile everything in advance it is just in time",
    "start": "2682240",
    "end": "2688960"
  },
  {
    "text": "compiler so it is not that we are given an assembly and then we are",
    "start": "2688960",
    "end": "2694160"
  },
  {
    "text": "compiling everything to native code because we don't know what will be called in the end so just in time means",
    "start": "2694160",
    "end": "2700480"
  },
  {
    "text": "we are only calling in a lazy manner so only if someone calls a given method only",
    "start": "2700480",
    "end": "2707119"
  },
  {
    "text": "then jit kicks in jit make the jit compilation and",
    "start": "2707119",
    "end": "2712240"
  },
  {
    "text": "now we start to execute the jitted code the native one so this is lazy and we i need to make",
    "start": "2712240",
    "end": "2719760"
  },
  {
    "text": "this laziness um feature into the mobius obviously because it needs to be jit it needs to",
    "start": "2719760",
    "end": "2725760"
  },
  {
    "text": "be just in time so similarly to the approach of the",
    "start": "2725760",
    "end": "2730800"
  },
  {
    "text": "real run times instead of um when you have when i have a method the",
    "start": "2730800",
    "end": "2735920"
  },
  {
    "text": "managed one um i'm putting some kind of stop that is just for the starting",
    "start": "2735920",
    "end": "2743920"
  },
  {
    "text": "and for any initial initialization of the jiting cover method so in the end every method address in",
    "start": "2743920",
    "end": "2751119"
  },
  {
    "text": "your application if you have an assembly and you have a method inside a type",
    "start": "2751119",
    "end": "2756800"
  },
  {
    "text": "it including the main method of the given program static class",
    "start": "2756800",
    "end": "2763839"
  },
  {
    "text": "all those methods points to some did stop and this this step is there only waiting uh to be called and if you",
    "start": "2763839",
    "end": "2771920"
  },
  {
    "text": "will call it it will start deleting the method under the given address and replace the result",
    "start": "2771920",
    "end": "2778720"
  },
  {
    "text": "and then we'll execute it so in the end we will have the method",
    "start": "2778720",
    "end": "2785119"
  },
  {
    "text": "address pointing to the jitted code so the did stop will be replaced with",
    "start": "2785119",
    "end": "2790160"
  },
  {
    "text": "the jitted code this is how it is working in every document runtime including the i including the",
    "start": "2790160",
    "end": "2798400"
  },
  {
    "text": "mobius runtime so exactly the same approach has been taken by me",
    "start": "2798400",
    "end": "2803440"
  },
  {
    "text": "in mobius and this probably is not a moving piece so it should be like that",
    "start": "2803440",
    "end": "2808640"
  },
  {
    "text": "in the core part of the mobius so it shouldn't be plug-enabled because it is",
    "start": "2808640",
    "end": "2814400"
  },
  {
    "text": "on so level part that i will be really afraid of even allowing replacing that so we will",
    "start": "2814400",
    "end": "2820079"
  },
  {
    "text": "have nothing fixed in our structure of the code so in the end",
    "start": "2820079",
    "end": "2826079"
  },
  {
    "text": "if you have uh our application the unmanaged code that you uh are",
    "start": "2826079",
    "end": "2832640"
  },
  {
    "text": "executing uh the part for example you are just getting the",
    "start": "2832640",
    "end": "2838079"
  },
  {
    "text": "main method and at some point port point in time you are executing an",
    "start": "2838079",
    "end": "2843520"
  },
  {
    "text": "order a method it will hit this stop and this stop will hit the call to the jit method",
    "start": "2843520",
    "end": "2852319"
  },
  {
    "text": "and this is the one that will be responsible for treating the whole application the whole method",
    "start": "2852319",
    "end": "2858400"
  },
  {
    "text": "and executing it so some handle magic to take just a metadata of the given method",
    "start": "2858400",
    "end": "2866800"
  },
  {
    "text": "and then we are accessing the il body of the method and we are in place so we are",
    "start": "2866800",
    "end": "2872720"
  },
  {
    "text": "inside the runtime in the managed code as we see in the c-sharp code we are just",
    "start": "2872720",
    "end": "2878160"
  },
  {
    "text": "having the il body as a span of bytes to be interpreted and we the only thing we need now is to",
    "start": "2878160",
    "end": "2885119"
  },
  {
    "text": "emit the assembly the native code for this based on the il of the method for doing that",
    "start": "2885119",
    "end": "2892480"
  },
  {
    "text": "i'm using the super nice ice library which is a high performance",
    "start": "2892480",
    "end": "2898160"
  },
  {
    "text": "instruction decoder disassembler and assembler that can be used from c-sharp",
    "start": "2898160",
    "end": "2903520"
  },
  {
    "text": "so with the help of it and it exposes a special type of writer that",
    "start": "2903520",
    "end": "2910240"
  },
  {
    "text": "allows you to use those kind of methods so if you have ever written something in the assembly",
    "start": "2910240",
    "end": "2915920"
  },
  {
    "text": "and that's exactly that every assembly instruction is there exposed as",
    "start": "2915920",
    "end": "2922240"
  },
  {
    "text": "a method so you are writing your code like assembly but from c-sharp and this",
    "start": "2922240",
    "end": "2929760"
  },
  {
    "text": "all instructions are just building here assembly and then you are writing it and",
    "start": "2929760",
    "end": "2936079"
  },
  {
    "text": "assembling it as a binary code that can be later on executed so with",
    "start": "2936079",
    "end": "2942800"
  },
  {
    "text": "the help of this ice library i'm able to emit a native code from c",
    "start": "2942800",
    "end": "2948319"
  },
  {
    "text": "sharp to a given memory region and then later on it can be executed as a method",
    "start": "2948319",
    "end": "2954240"
  },
  {
    "text": "for example here super simple method that is just having some prolog and epilogue",
    "start": "2954240",
    "end": "2960240"
  },
  {
    "text": "which are not so important and it is setting the result of a method to 44",
    "start": "2960240",
    "end": "2965680"
  },
  {
    "text": "because the x register is the register when we expect a result of a matter so it is a hard",
    "start": "2965680",
    "end": "2972000"
  },
  {
    "text": "coded method that always returns 44. pretty pretty nice that it is all",
    "start": "2972000",
    "end": "2977599"
  },
  {
    "text": "working and then only one thing",
    "start": "2977599",
    "end": "2982800"
  },
  {
    "text": "one more thing to to to have in place to make all those pieces",
    "start": "2982800",
    "end": "2988559"
  },
  {
    "text": "working together we need uh to have um possibility to call back the mobius",
    "start": "2988559",
    "end": "2995520"
  },
  {
    "text": "itself like the allocator if i'm hitting the il instruction called new object which",
    "start": "2995520",
    "end": "3001680"
  },
  {
    "text": "means the code new wants to have a new object then i need to emit code that will call",
    "start": "3001680",
    "end": "3009920"
  },
  {
    "text": "a allocator and an allocator is a code from mobius so it is the",
    "start": "3009920",
    "end": "3016720"
  },
  {
    "text": "reverse call from the unmanaged code to the managed code which is my mobius code",
    "start": "3016720",
    "end": "3022960"
  },
  {
    "text": "it's from the perspective of the code it is a magic like i'm showing this because i'm really super",
    "start": "3022960",
    "end": "3029359"
  },
  {
    "text": "happy that the dotnet runtime and all this infrastructure is supporting it out of",
    "start": "3029359",
    "end": "3034800"
  },
  {
    "text": "the box so imagine that i have a pointer and this pointer is just an",
    "start": "3034800",
    "end": "3040000"
  },
  {
    "text": "address of something that is responsible for calling my allocator which is a code in",
    "start": "3040000",
    "end": "3046880"
  },
  {
    "text": "c sharp so if you have ever written something in assembly it is as easy as",
    "start": "3046880",
    "end": "3052880"
  },
  {
    "text": "calling the using the call instruction with a proper address here stored in the rlx register",
    "start": "3052880",
    "end": "3059760"
  },
  {
    "text": "so this is something that from your native code will now start to execute the managed code",
    "start": "3059760",
    "end": "3068240"
  },
  {
    "text": "and how it is happening because it looks like a magic imagine you have a totally native application",
    "start": "3068240",
    "end": "3073520"
  },
  {
    "text": "and you are executing a jitted code native one and now the sudden it starts to call an",
    "start": "3073520",
    "end": "3080240"
  },
  {
    "text": "address which should come back to the managed code which should be cheated and this is all",
    "start": "3080240",
    "end": "3088160"
  },
  {
    "text": "because the reverse pane vault magic inside the clr so if i will be if i convert an address of",
    "start": "3088160",
    "end": "3096400"
  },
  {
    "text": "a managed code with the help of this special instruction which is called get function",
    "start": "3096400",
    "end": "3101920"
  },
  {
    "text": "pointer for delegate it will wrap everything around and all connect all the pieces",
    "start": "3101920",
    "end": "3108400"
  },
  {
    "text": "in so in the end you have on a pointer that we responsible for the whole",
    "start": "3108400",
    "end": "3113440"
  },
  {
    "text": "martial link so now you can do exactly what i said you have a method inside",
    "start": "3113440",
    "end": "3121839"
  },
  {
    "text": "instance of the gc class for example the instance method allocate and if you will provide an address of it",
    "start": "3121839",
    "end": "3129599"
  },
  {
    "text": "to this get function pointer for delegate and then you have an appointer and then",
    "start": "3129599",
    "end": "3135200"
  },
  {
    "text": "you will use the call instruction on this pointer out of the sudden",
    "start": "3135200",
    "end": "3140319"
  },
  {
    "text": "you come back to the native code and you will start to execute this sorry you will come back to managed",
    "start": "3140319",
    "end": "3145839"
  },
  {
    "text": "code and you will be starting to execute this particular method you can even set breakpoints theory and",
    "start": "3145839",
    "end": "3151440"
  },
  {
    "text": "so on and so on because you really start to execute this code which is in c sharp if you are",
    "start": "3151440",
    "end": "3159520"
  },
  {
    "text": "aware of some details here you can wonder about what is about what about the instance because",
    "start": "3159520",
    "end": "3165119"
  },
  {
    "text": "here i have just a pointer that i'm calling and when the runtime knows that it is this",
    "start": "3165119",
    "end": "3171839"
  },
  {
    "text": "particular instance it knows because this function is responsible for some magic marshaling",
    "start": "3171839",
    "end": "3178640"
  },
  {
    "text": "that stores the pointer to this instance so mind-blowing things happening here",
    "start": "3178640",
    "end": "3184160"
  },
  {
    "text": "that allows us to make the call from the runtime to the managed code and back so in the",
    "start": "3184160",
    "end": "3190880"
  },
  {
    "text": "end a lot of such very interesting stuff that you totally will not use in your everyday life",
    "start": "3190880",
    "end": "3196319"
  },
  {
    "text": "probably but if you are interested in internals they are mind-blowing and really nice to have knowledge of",
    "start": "3196319",
    "end": "3205040"
  },
  {
    "text": "which i hope will be useful for all those experiment and research that i described",
    "start": "3205040",
    "end": "3211599"
  },
  {
    "text": "previously so now the question because it is slowly good time to end",
    "start": "3211599",
    "end": "3216880"
  },
  {
    "text": "when all this will happen if that you will for example be able to play around with",
    "start": "3216880",
    "end": "3222319"
  },
  {
    "start": "3222000",
    "end": "3222000"
  },
  {
    "text": "it so obviously the amount of code needed to be written when you would like to",
    "start": "3222319",
    "end": "3228559"
  },
  {
    "text": "implement your own.net runtime is around infinity so a single guy as me is not able to write",
    "start": "3228559",
    "end": "3236240"
  },
  {
    "text": "your own dot and run time even dotnet anywhere by crease was",
    "start": "3236240",
    "end": "3241520"
  },
  {
    "text": "limited as far as remember it doesn't support generics and other stuff",
    "start": "3241520",
    "end": "3247280"
  },
  {
    "text": "but it is possible to write some vertical proof of concept so something that is having all the",
    "start": "3247280",
    "end": "3253280"
  },
  {
    "text": "pieces all together working and giving some super slow",
    "start": "3253280",
    "end": "3259520"
  },
  {
    "text": "piece of functionality that will allow to execute for example hello world application",
    "start": "3259520",
    "end": "3265200"
  },
  {
    "text": "so i'm slowly getting there the vertical proof of concept with some did with some gc and",
    "start": "3265200",
    "end": "3272559"
  },
  {
    "text": "i 0 dc because it is something that will only allocate but well it is plugin so you can always",
    "start": "3272559",
    "end": "3279200"
  },
  {
    "text": "write your own gc and without threading support which i'm be afraid of adding at this point",
    "start": "3279200",
    "end": "3286559"
  },
  {
    "text": "because it adds another level of complexity so it will be single threaded",
    "start": "3286559",
    "end": "3291839"
  },
  {
    "text": "all this should happen on github because currently mobius is private repository which is really a pain for me because it",
    "start": "3291839",
    "end": "3299040"
  },
  {
    "text": "is not so super secret code that i really like to keep on my own but it needs some refactoring let's say",
    "start": "3299040",
    "end": "3306480"
  },
  {
    "text": "because because because before making the public so i'm waiting for this because obviously this",
    "start": "3306480",
    "end": "3312480"
  },
  {
    "text": "is a super low priority pet project so i don't have so many time for it so this time when i",
    "start": "3312480",
    "end": "3320400"
  },
  {
    "text": "will open source it slowly comes i hope it will come very soon",
    "start": "3320400",
    "end": "3325440"
  },
  {
    "text": "and for sure this year having without any uh general um promises",
    "start": "3325440",
    "end": "3332079"
  },
  {
    "text": "for sure this year should be the one when i will open source it with some functionalities and then i",
    "start": "3332079",
    "end": "3338000"
  },
  {
    "text": "hope some people it will get interested maybe they will contribute",
    "start": "3338000",
    "end": "3344160"
  },
  {
    "text": "so just uh closing up have you ever wondered how the dot network runtime works",
    "start": "3344160",
    "end": "3350400"
  },
  {
    "text": "if you were and now you will have a pretty c-sharp base runtime at hand so you will",
    "start": "3350400",
    "end": "3356240"
  },
  {
    "text": "be able to analyze everything debug everything and i haven't even mentioned that but",
    "start": "3356240",
    "end": "3361760"
  },
  {
    "text": "you know debugging the full.net runtime is pain because this c plus plus code and",
    "start": "3361760",
    "end": "3368400"
  },
  {
    "text": "it is not so convenient sometimes to do that imagine that you have the whole id support for debugging you can use the",
    "start": "3368400",
    "end": "3375280"
  },
  {
    "text": "buggers from visual studio or the fancy stuff all the diagnostics",
    "start": "3375280",
    "end": "3380319"
  },
  {
    "text": "to analyze the dotnet runtime written in c sharp this is super nice for learning and also super nice for",
    "start": "3380319",
    "end": "3387440"
  },
  {
    "text": "contributing so if you have a c sharp based runtime at",
    "start": "3387440",
    "end": "3392720"
  },
  {
    "text": "hand you can easily add something you can easily experiment try to modify something",
    "start": "3392720",
    "end": "3398799"
  },
  {
    "text": "analyze the results contribute obviously no one will use it at least on production so you will be",
    "start": "3398799",
    "end": "3405119"
  },
  {
    "text": "not afraid of destroying anyone's business because it is",
    "start": "3405119",
    "end": "3410160"
  },
  {
    "text": "only for research and experiments so i have a fingers crossed all the time to make it working and",
    "start": "3410160",
    "end": "3417440"
  },
  {
    "text": "public available publicly available on github and having said all that this is there",
    "start": "3417440",
    "end": "3423920"
  },
  {
    "start": "3423000",
    "end": "3423000"
  },
  {
    "text": "all there is a single link when i'm describing almost the same things i as i described",
    "start": "3423920",
    "end": "3429839"
  },
  {
    "text": "today so nothing super more advanced there and this still private repository that",
    "start": "3429839",
    "end": "3437760"
  },
  {
    "text": "eventually should be opened i really i really hope sooner or",
    "start": "3437760",
    "end": "3442960"
  },
  {
    "text": "later even if it will be not complete for sure it will be not complete so done is better than perfect",
    "start": "3442960",
    "end": "3450880"
  },
  {
    "text": "i will open source something at least for you soon and that's all thank you thank you",
    "start": "3450880",
    "end": "3457280"
  },
  {
    "text": "for staying with this crazy idea of low level stuff and all these assembly based slides which are not so",
    "start": "3457280",
    "end": "3465280"
  },
  {
    "text": "common on.net conference and if you have any questions i don't know if you have any time for questions",
    "start": "3465280",
    "end": "3472559"
  },
  {
    "text": "and i will be still on track number five on slack so maybe then we can move with any discussions or",
    "start": "3472559",
    "end": "3480960"
  },
  {
    "text": "questions that you have",
    "start": "3480960",
    "end": "3489838"
  },
  {
    "text": "you",
    "start": "3495440",
    "end": "3497520"
  }
]