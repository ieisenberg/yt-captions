[
  {
    "text": "all right welcome to the first session of the second day of NC portal I hope",
    "start": "6000",
    "end": "12000"
  },
  {
    "text": "you had great dinner yes yesterday and today I'm going to talk about common",
    "start": "12000",
    "end": "18760"
  },
  {
    "text": "mistakes in EF core and this talk is going to be focused on some of the",
    "start": "18760",
    "end": "24920"
  },
  {
    "text": "common mistakes that I have seen in production a couple of horror stories",
    "start": "24920",
    "end": "30720"
  },
  {
    "text": "uh that I have experienced as trying to uh fix some of the applications where",
    "start": "30720",
    "end": "37440"
  },
  {
    "text": "the main takeaway from the developers was EFC is horrible and then I looked at",
    "start": "37440",
    "end": "45640"
  },
  {
    "text": "it spend an hour on it things started to run 100 times faster and it's like how",
    "start": "45640",
    "end": "51280"
  },
  {
    "text": "did you do that and I was like I just did do these few things you know how you",
    "start": "51280",
    "end": "56640"
  },
  {
    "text": "do SQL queries if you think a little bit in in that regard you can do really good",
    "start": "56640",
    "end": "63360"
  },
  {
    "text": "queres so this are a few things that I'm going to show you as well as very e",
    "start": "63360",
    "end": "69119"
  },
  {
    "text": "course and net specific things so first off I am Yan kova",
    "start": "69119",
    "end": "76560"
  },
  {
    "text": "originally from Slovenia now living in Australia but you can call me",
    "start": "76560",
    "end": "81759"
  },
  {
    "text": "JK and you can uh follow me on all of these socials I'm also a host at uh",
    "start": "81759",
    "end": "89479"
  },
  {
    "text": "global AI the podcast and several different uh Australian and Brisbane uh",
    "start": "89479",
    "end": "95759"
  },
  {
    "text": "user groups I'm predominantly a net and EF core developer um specializing in uh",
    "start": "95759",
    "end": "104600"
  },
  {
    "text": "building web applications uh console applications and whatever the clients need me to build uh",
    "start": "104600",
    "end": "112560"
  },
  {
    "text": "but I'm also a Microsoft AI MVP and I do lots of chat GPT so if anyone here is to",
    "start": "112560",
    "end": "120079"
  },
  {
    "text": "have one good advice on CH GPT you're",
    "start": "120079",
    "end": "125640"
  },
  {
    "text": "covered all right so let's go into intro then I'll uh go for the seven deadly",
    "start": "125960",
    "end": "133200"
  },
  {
    "text": "senses the the seven things that I seen most commonly in production and has big",
    "start": "133200",
    "end": "140800"
  },
  {
    "text": "impacts on uh how your application runs and a couple of many best practices",
    "start": "140800",
    "end": "146879"
  },
  {
    "text": "because I just doesn't don't want to give you hey here some common issues here's how to fix them but also here are",
    "start": "146879",
    "end": "153800"
  },
  {
    "text": "some really good advice that you probably should follow all right so one thing that you",
    "start": "153800",
    "end": "162280"
  },
  {
    "text": "might all of you know is uh there are a lot of databases",
    "start": "162280",
    "end": "169400"
  },
  {
    "text": "nowadays and for anyone who's not too familiar with ef core um one of the",
    "start": "169400",
    "end": "175519"
  },
  {
    "text": "reasons why you might want to use EF core is because it don't always want to decide which uh database you want to go",
    "start": "175519",
    "end": "183159"
  },
  {
    "text": "for and it kind of alleviates that decision because you can start developing the application with DF core",
    "start": "183159",
    "end": "189799"
  },
  {
    "text": "and decide later what specific database engine you want to",
    "start": "189799",
    "end": "196480"
  },
  {
    "text": "use and there's also various orms there's just couple of over here like EF",
    "start": "196480",
    "end": "203480"
  },
  {
    "text": "Dapper is technically a SQL builder plus mapper uh then we have Mar and Cosmos DB",
    "start": "203480",
    "end": "210799"
  },
  {
    "text": "and there's lots more of them um but the main reason why I usually choose EFC and",
    "start": "210799",
    "end": "218159"
  },
  {
    "text": "why I uh recommend people to use EF core as one of the first",
    "start": "218159",
    "end": "224080"
  },
  {
    "text": "options is because it gives you a great balance between features flexibility and",
    "start": "224080",
    "end": "231239"
  },
  {
    "text": "performance and it's one of the orms that gives you the most choice between",
    "start": "231239",
    "end": "239280"
  },
  {
    "text": "these uh three options so if you need more performance there is a way to",
    "start": "239280",
    "end": "245480"
  },
  {
    "text": "increase performance if you need more flexibility you have an option to have",
    "start": "245480",
    "end": "250519"
  },
  {
    "text": "more flexibility usually it comes at the cost of the other",
    "start": "250519",
    "end": "256840"
  },
  {
    "text": "two and it's really really awesome for relational databases so if your database",
    "start": "256840",
    "end": "263160"
  },
  {
    "text": "is relational um EF core if you're doing uh net is really awesome",
    "start": "263160",
    "end": "270199"
  },
  {
    "text": "for non relational EF core is getting better and better and I'm seeing more",
    "start": "270199",
    "end": "275960"
  },
  {
    "text": "people now using EF core for non-relational as well especially with ef core",
    "start": "275960",
    "end": "281960"
  },
  {
    "text": "8 and one of the big things is the builtin migration and DB scaffolding",
    "start": "281960",
    "end": "288280"
  },
  {
    "text": "along with other tools because how many of you are doing uh",
    "start": "288280",
    "end": "294280"
  },
  {
    "text": "database migrations quite a lot for how many database migration are",
    "start": "294280",
    "end": "302280"
  },
  {
    "text": "painful okay pretty good crowd usually for a lot of people database migrations",
    "start": "302280",
    "end": "308960"
  },
  {
    "text": "is a big pain and with ef core it's usually just one command line you check",
    "start": "308960",
    "end": "314720"
  },
  {
    "text": "that everything is fine and just run the migration and DB scaffolding if you need",
    "start": "314720",
    "end": "319880"
  },
  {
    "text": "to use the existing database there's a CLI command where can just generate the entire efco context for you you make",
    "start": "319880",
    "end": "328160"
  },
  {
    "text": "just a couple of tweaks and you done and another thing if you have seen",
    "start": "328160",
    "end": "334479"
  },
  {
    "text": "yesterday's keynote what EF Co also uh pretty nicely represents is the theory",
    "start": "334479",
    "end": "341400"
  },
  {
    "text": "of corop uh Cooperative principles um basically what that means is when you uh",
    "start": "341400",
    "end": "350080"
  },
  {
    "text": "want to have a cult for instance that concisely message what it wants to do",
    "start": "350080",
    "end": "356800"
  },
  {
    "text": "does only what you ask it to do uh and various other things if you're more",
    "start": "356800",
    "end": "362000"
  },
  {
    "text": "interested in this Eli done a talk about uh Lang language games and I really",
    "start": "362000",
    "end": "368639"
  },
  {
    "text": "recommend this because adopting these principles I think will make you a",
    "start": "368639",
    "end": "374080"
  },
  {
    "text": "better developer in terms of how youve write the code and how it's understood by other",
    "start": "374080",
    "end": "380560"
  },
  {
    "text": "people all right so the main part of this talk is",
    "start": "380560",
    "end": "385919"
  },
  {
    "text": "to avoid pain that sometimes come with ef core so how many of you have",
    "start": "385919",
    "end": "392599"
  },
  {
    "text": "developed EF core and you had some pain with it that's quite a like half of the room",
    "start": "392599",
    "end": "400440"
  },
  {
    "text": "well hopefully I'm going to show you how not to have that pain how to actually enjoy",
    "start": "400440",
    "end": "405720"
  },
  {
    "text": "Eco um one of the things is I've seen a lot of really badly written EF in terms",
    "start": "405720",
    "end": "412720"
  },
  {
    "text": "of here's 200 lines uh query and you're like what does it do that's like I don't",
    "start": "412720",
    "end": "421479"
  },
  {
    "text": "know um then I'm going to Benchmark the uh the uh queries because a lot of",
    "start": "421479",
    "end": "428360"
  },
  {
    "text": "people don't understand what um impact certain lines of code may have and I'm",
    "start": "428360",
    "end": "434520"
  },
  {
    "text": "going to show you not just by running the uh the code once I'm going to load",
    "start": "434520",
    "end": "440240"
  },
  {
    "text": "test it so I can show you the consequences of certain uh certain",
    "start": "440240",
    "end": "446599"
  },
  {
    "text": "pattern when the server is already on the load because your SQL Server as well",
    "start": "446599",
    "end": "452199"
  },
  {
    "text": "as your net server might behave differently on the load than when you",
    "start": "452199",
    "end": "457240"
  },
  {
    "text": "just run it once and lastly the horrors I have",
    "start": "457240",
    "end": "464840"
  },
  {
    "text": "seen and you will be able to do this on your own if you like to because I'm",
    "start": "465280",
    "end": "471319"
  },
  {
    "text": "using benchmark.us and time differences and",
    "start": "471319",
    "end": "476879"
  },
  {
    "text": "bomb Ander for load testing now now this is not the best way to do load testing",
    "start": "476879",
    "end": "482960"
  },
  {
    "text": "as overall application load testing but it's really good way to basically test",
    "start": "482960",
    "end": "489800"
  },
  {
    "text": "how a single endpoint behaves with or without",
    "start": "489800",
    "end": "495879"
  },
  {
    "text": "load and also just for reference this is my uh uh machine just so that you if you",
    "start": "496120",
    "end": "503879"
  },
  {
    "text": "get really different numbers that might be one of the reasons",
    "start": "503879",
    "end": "509599"
  },
  {
    "text": "uh RAM actually uh will have a big impact on performance so if you don't",
    "start": "509599",
    "end": "514800"
  },
  {
    "text": "have enough RAM you may get vastly different uh results than I have and",
    "start": "514800",
    "end": "520760"
  },
  {
    "text": "most of the tests are done with Net 7 EF core uh I haven't updated yet to EF core",
    "start": "520760",
    "end": "526760"
  },
  {
    "text": "8 but I have ran the test to verify that uh the things that I'm talking to here",
    "start": "526760",
    "end": "532920"
  },
  {
    "text": "is still reant relevant with ef core",
    "start": "532920",
    "end": "538200"
  },
  {
    "text": "8 and the test data is 7 million sales so",
    "start": "538200",
    "end": "543440"
  },
  {
    "text": "we have a table with 7 million records 54 products with don't use 23 employees",
    "start": "543440",
    "end": "550600"
  },
  {
    "text": "and 20,000 customers and this is important because sometimes what happens",
    "start": "550600",
    "end": "556640"
  },
  {
    "text": "in production is your application runs really really well really smoothly 3",
    "start": "556640",
    "end": "562680"
  },
  {
    "text": "months later everything is on fire and this is why I'm took 7 million",
    "start": "562680",
    "end": "568320"
  },
  {
    "text": "sales to show show you that fire all right seven nly scenes so first",
    "start": "568320",
    "end": "575760"
  },
  {
    "text": "off I carable to I inumerable I'll show you this is one of the",
    "start": "575760",
    "end": "583360"
  },
  {
    "text": "biggest performance and stability issues you'll encounter uh then as not tracking uh",
    "start": "583360",
    "end": "591360"
  },
  {
    "text": "it's really good uh explicit joins so how many of you are doing joins manually",
    "start": "591360",
    "end": "599160"
  },
  {
    "text": "like you've write the actual code not many okay uh getting all of the columns no",
    "start": "599160",
    "end": "606279"
  },
  {
    "text": "pagination that is something that when it happens in production it slows down",
    "start": "606279",
    "end": "611959"
  },
  {
    "text": "your server considerably if not done properly uh non-cancellable queries and",
    "start": "611959",
    "end": "619240"
  },
  {
    "text": "inefficient updates and deletes which will uh which came with ef course",
    "start": "619240",
    "end": "625680"
  },
  {
    "text": "7 just went one second over there",
    "start": "625680",
    "end": "630800"
  },
  {
    "text": "uh I'll will also provide the slides uh later all right so first",
    "start": "630800",
    "end": "638120"
  },
  {
    "text": "off how bad can uh can it be right writing a little bit of bad code here or",
    "start": "638120",
    "end": "644880"
  },
  {
    "text": "there or uh just doing um efco without thinking about what actually might",
    "start": "644880",
    "end": "651000"
  },
  {
    "text": "happen this is usually a question you never want to ask or at least you never want the answer to and I'm going to show",
    "start": "651000",
    "end": "658560"
  },
  {
    "text": "you why iable to I inumerable so here we have one code and some of you",
    "start": "658560",
    "end": "666399"
  },
  {
    "text": "may spot the problem here right away and then we have",
    "start": "666399",
    "end": "672760"
  },
  {
    "text": "this this a little bit different code right some of you might spot something out over",
    "start": "672760",
    "end": "679079"
  },
  {
    "text": "here and then we have this code this is something that they have seen very",
    "start": "679079",
    "end": "684680"
  },
  {
    "text": "commonly uh on a lot of client uh projects so what do they have all in",
    "start": "684680",
    "end": "692240"
  },
  {
    "text": "common technically they're all the same so this one that does two list and",
    "start": "692240",
    "end": "700399"
  },
  {
    "text": "then count is technically the same as this one this is will get all of your data",
    "start": "700399",
    "end": "708760"
  },
  {
    "text": "from the uh table and the reason why this happens is",
    "start": "708760",
    "end": "714800"
  },
  {
    "text": "when we do an HTTP request and at the moment we we are uh casting it to I",
    "start": "714800",
    "end": "721040"
  },
  {
    "text": "inumerable what happens in EFC end is says Ah we casting to I inumerable I'll",
    "start": "721040",
    "end": "729120"
  },
  {
    "text": "evaluate everything up to that point which in this case means a select stuff",
    "start": "729120",
    "end": "735880"
  },
  {
    "text": "from sales that means it will get all 7 million records with all of the",
    "start": "735880",
    "end": "741800"
  },
  {
    "text": "columns uh from the database then it's going to pass all of the data in its",
    "start": "741800",
    "end": "748399"
  },
  {
    "text": "full Lory only to check how many of them are there and then it's going to dispose",
    "start": "748399",
    "end": "756199"
  },
  {
    "text": "all of the data never actually looking into",
    "start": "756199",
    "end": "761040"
  },
  {
    "text": "it so what you should be doing is you should always use I variable now this",
    "start": "763040",
    "end": "769000"
  },
  {
    "text": "particular case we have a private method in used inside a service or command",
    "start": "769000",
    "end": "775240"
  },
  {
    "text": "query or uh wherever you would uh want to use that I have seen where developers",
    "start": "775240",
    "end": "782000"
  },
  {
    "text": "try to be uh following good practices use inumerable whereever they can and",
    "start": "782000",
    "end": "787839"
  },
  {
    "text": "they use uh I inumerable in Services where they should be actually using I",
    "start": "787839",
    "end": "793760"
  },
  {
    "text": "quable now if you use clean architecture you might actually have different methods to avoid this",
    "start": "793760",
    "end": "802079"
  },
  {
    "text": "issue and what happens behind the scenes is you can see here we have a full",
    "start": "802519",
    "end": "808320"
  },
  {
    "text": "statement we have sales. count and efco evaluates the whole query with the count",
    "start": "808320",
    "end": "816360"
  },
  {
    "text": "and then generates select count staff from",
    "start": "816360",
    "end": "822480"
  },
  {
    "text": "sales which then sorry which then only returns a single integer that's it",
    "start": "822480",
    "end": "829720"
  },
  {
    "text": "doesn't return 7 million records just a single integer so what is if there's anything",
    "start": "829720",
    "end": "837360"
  },
  {
    "text": "that you remember from this St talk is this part but don't worry we get for",
    "start": "837360",
    "end": "842839"
  },
  {
    "text": "anyone getting bought we're getting to a more fun part soon",
    "start": "842839",
    "end": "850279"
  },
  {
    "text": "benchmarks so the first one was about million times took million",
    "start": "850279",
    "end": "858240"
  },
  {
    "text": "times more memory just imagine just counting how many uh rows we have in a",
    "start": "858240",
    "end": "866440"
  },
  {
    "text": "table taks about 2 GB FR on net side not on SQL service",
    "start": "866440",
    "end": "874320"
  },
  {
    "text": "side and it's 64 times slower and yeah it's about three uh 3 and a half seconds",
    "start": "874320",
    "end": "881519"
  },
  {
    "text": "slow uh uh slower so that's a really huge impact and keep in mind in couple",
    "start": "881519",
    "end": "889279"
  },
  {
    "text": "of years you might not have 7 million uh sales you might have 10 15 35 Millions",
    "start": "889279",
    "end": "897279"
  },
  {
    "text": "this is going to skip scale this is going to be bigger and bigger",
    "start": "897279",
    "end": "903440"
  },
  {
    "text": "problem and if your manager says well users can wait three and a half",
    "start": "903440",
    "end": "910079"
  },
  {
    "text": "seconds this is why we have low tests though because this is a very",
    "start": "910079",
    "end": "917079"
  },
  {
    "text": "small load but under very small load those 3 and 1 half seconds now become 33",
    "start": "917079",
    "end": "925600"
  },
  {
    "text": "seconds with the same data we just put a little load on",
    "start": "925600",
    "end": "931079"
  },
  {
    "text": "it whereas if we do it properly with the uh I variable it stays 130",
    "start": "931079",
    "end": "940040"
  },
  {
    "text": "milliseconds so now we are having a difference of 260 times faster and this is sometimes",
    "start": "940040",
    "end": "948160"
  },
  {
    "text": "the cost of not understanding what happens behind the scenes and then say",
    "start": "948160",
    "end": "955880"
  },
  {
    "text": "well it sucks because it doesn't work well",
    "start": "955880",
    "end": "960600"
  },
  {
    "text": "uh but also another uh thing here is after run this test my computer was",
    "start": "960920",
    "end": "968480"
  },
  {
    "text": "unresponsive for 10 minutes and this test only ran 16 seconds so 60 seconds",
    "start": "968480",
    "end": "975120"
  },
  {
    "text": "was enough that I wasn't able to move my mouse for 10 minutes just to give you a",
    "start": "975120",
    "end": "980839"
  },
  {
    "text": "perspective of how bad this is to be frank I did Run net and SQL",
    "start": "980839",
    "end": "987880"
  },
  {
    "text": "server on the same machine but still now the other one uh that some of",
    "start": "987880",
    "end": "995680"
  },
  {
    "text": "you might not know how many of you know asot tracking a lot awesome so I'll just",
    "start": "995680",
    "end": "1002040"
  },
  {
    "text": "quickly skip through because some of you might know quite a lot uh about",
    "start": "1002040",
    "end": "1007279"
  },
  {
    "text": "EF so asot tracking basically what allows you to do is it allows you to not",
    "start": "1007279",
    "end": "1014199"
  },
  {
    "text": "track changes and why this is important is think of it I would almost prefer",
    "start": "1014199",
    "end": "1020880"
  },
  {
    "text": "that this would be called as read only because that what effectively uh you get",
    "start": "1020880",
    "end": "1027438"
  },
  {
    "text": "is data from the database that is read only uh and that the consequence of that",
    "start": "1027439",
    "end": "1035678"
  },
  {
    "text": "is by default when we are get fetching data from the",
    "start": "1035679",
    "end": "1042360"
  },
  {
    "text": "database we generating the query we get the SQL Server to respond back the data",
    "start": "1042360",
    "end": "1049080"
  },
  {
    "text": "we pass we map the data in EF core uh and then EF core adds additional",
    "start": "1049080",
    "end": "1055679"
  },
  {
    "text": "properties to track uh all of your columns and all of your rows so when you",
    "start": "1055679",
    "end": "1061320"
  },
  {
    "text": "do save changes it knows what changed and with the as not",
    "start": "1061320",
    "end": "1067280"
  },
  {
    "text": "tracking that doesn't happen so whatever changes you do it's not um when you do",
    "start": "1067280",
    "end": "1074440"
  },
  {
    "text": "save changes uh they won't be saved",
    "start": "1074440",
    "end": "1079520"
  },
  {
    "text": "now the result of that is you get four times less memory usage in this",
    "start": "1079520",
    "end": "1086880"
  },
  {
    "text": "particular case this is going to vary a lot in some of cases it's going to be",
    "start": "1086880",
    "end": "1092919"
  },
  {
    "text": "20% in some of the cases is going to be way more than that um but on average I",
    "start": "1092919",
    "end": "1099640"
  },
  {
    "text": "found about 50% less memory usage and also about 50% faster on average from",
    "start": "1099640",
    "end": "1109120"
  },
  {
    "text": "the testing I did and what is very important here is",
    "start": "1109120",
    "end": "1115760"
  },
  {
    "text": "this is very dependent on the DB provider you use so at least in EF",
    "start": "1115760",
    "end": "1121559"
  },
  {
    "text": "course 7 and I think that was a bug um asot tracking had no effect so if you",
    "start": "1121559",
    "end": "1129799"
  },
  {
    "text": "used asot tracking or not you got the same",
    "start": "1129799",
    "end": "1134559"
  },
  {
    "text": "numbers and when we start to load test we're getting about same performance",
    "start": "1135080",
    "end": "1140760"
  },
  {
    "text": "gain so that's mostly because with this kind of load testing we're not",
    "start": "1140760",
    "end": "1146600"
  },
  {
    "text": "overloading the system enough where this code would run significantly faster than",
    "start": "1146600",
    "end": "1152320"
  },
  {
    "text": "this one usually when you have big disparity between the unoptimized and",
    "start": "1152320",
    "end": "1157600"
  },
  {
    "text": "optimized code is because the unoptimized overuse so much resources that the system is not able to keep up",
    "start": "1157600",
    "end": "1165280"
  },
  {
    "text": "giving and destroying the resources",
    "start": "1165280",
    "end": "1170240"
  },
  {
    "text": "and for explicit includes how many use do include nice almost the entire",
    "start": "1170880",
    "end": "1178880"
  },
  {
    "text": "room should have prepared a much more advanced talk uh so basically they are",
    "start": "1178880",
    "end": "1186640"
  },
  {
    "text": "um when you use that include what that allows you to do is",
    "start": "1186640",
    "end": "1192039"
  },
  {
    "text": "just uh do a a join behind the scenes and but there are a few issues",
    "start": "1192039",
    "end": "1199880"
  },
  {
    "text": "with do include so if you do do include but you're no longer need that",
    "start": "1199880",
    "end": "1208120"
  },
  {
    "text": "in the mappings you're not using this custom anymore it will still do a join",
    "start": "1208120",
    "end": "1213559"
  },
  {
    "text": "to that table so some of you may know that joins in SQL can be very expensive",
    "start": "1213559",
    "end": "1221600"
  },
  {
    "text": "and now you doing a join and you do nothing with it so this is why uh",
    "start": "1221600",
    "end": "1227240"
  },
  {
    "text": "explicit includes can be um many times quite problematic",
    "start": "1227240",
    "end": "1232640"
  },
  {
    "text": "sometimes they're necessary especially if you need to track it and then save it but if you can try to avoid it so for",
    "start": "1232640",
    "end": "1240000"
  },
  {
    "text": "instance here I have one that has dot include and here I have one that does uh",
    "start": "1240000",
    "end": "1247200"
  },
  {
    "text": "mapping over here and you can see that you can just directly map x. sales.",
    "start": "1247200",
    "end": "1252400"
  },
  {
    "text": "first name and what it's going to do behind the scenes is it's going to uh",
    "start": "1252400",
    "end": "1258360"
  },
  {
    "text": "join the table sales and the salesperson for you you don't have to",
    "start": "1258360",
    "end": "1263679"
  },
  {
    "text": "think about it and the advantage here is if you no longer need these two",
    "start": "1263679",
    "end": "1270799"
  },
  {
    "text": "lines the that uh join no longer exist that join only exists if you use it and",
    "start": "1270799",
    "end": "1278880"
  },
  {
    "text": "this this is the difference so if I would put uh do include excels persons",
    "start": "1278880",
    "end": "1285520"
  },
  {
    "text": "here it will do join uh join no matter what and of course you can use other uh",
    "start": "1285520",
    "end": "1293679"
  },
  {
    "text": "uh libraries like ult mappa to do the mapping uh I usually like to do it manually just because it gives you a",
    "start": "1293679",
    "end": "1301760"
  },
  {
    "text": "really good view on what data you're fetching and everyone can look at the",
    "start": "1301760",
    "end": "1307159"
  },
  {
    "text": "code and understand ah okay we're getting sales with salesperson and all of this data is that we need for",
    "start": "1307159",
    "end": "1314640"
  },
  {
    "text": "whatever uh we're going to do with this data and here uh again the performance is",
    "start": "1314640",
    "end": "1322760"
  },
  {
    "text": "going to uh vary uh significantly between one and the other queries how",
    "start": "1322760",
    "end": "1328000"
  },
  {
    "text": "complex the joints are but generally speaking you will almost always get a",
    "start": "1328000",
    "end": "1333400"
  },
  {
    "text": "little bit faster performance if you do manual projections especially if you",
    "start": "1333400",
    "end": "1339360"
  },
  {
    "text": "skip couple of columns then we have common pagination",
    "start": "1339360",
    "end": "1345799"
  },
  {
    "text": "issues now how many of you are confident that you know how to do",
    "start": "1345799",
    "end": "1353080"
  },
  {
    "text": "pagination okay we have only four hands okay I'm not too surprised because this",
    "start": "1354080",
    "end": "1362000"
  },
  {
    "text": "is one of the things where I commonly saw as like s you know you did the right",
    "start": "1362000",
    "end": "1370640"
  },
  {
    "text": "steps you just flip them a little bit wrong and what usually happens is",
    "start": "1370640",
    "end": "1378520"
  },
  {
    "text": "you know they fetching all of the data with the uh with the filter they need to",
    "start": "1378520",
    "end": "1385039"
  },
  {
    "text": "apply and I was like why they doing that because they're trying to count uh",
    "start": "1385039",
    "end": "1391720"
  },
  {
    "text": "the entire how how many items there are and then they apply uh pagination in",
    "start": "1391720",
    "end": "1399480"
  },
  {
    "text": "memory now if you have a few 100 or few thousand rows you know you probably",
    "start": "1399480",
    "end": "1406520"
  },
  {
    "text": "won't bother with the performance s it's it works fine with 7 million",
    "start": "1406520",
    "end": "1412279"
  },
  {
    "text": "records this is horrible and this is why software gets",
    "start": "1412279",
    "end": "1418080"
  },
  {
    "text": "slower over time is because of small things like this it's what they call uh",
    "start": "1418080",
    "end": "1425360"
  },
  {
    "text": "um death by million Cuts instead what you can do is you can",
    "start": "1425360",
    "end": "1431159"
  },
  {
    "text": "use iable over here and even though it feels a little bit wrong to do",
    "start": "1431159",
    "end": "1438480"
  },
  {
    "text": "to ask SQL Server hey give me a account for this and then do pagination on the",
    "start": "1438480",
    "end": "1445039"
  },
  {
    "text": "the original query and then get the results back but it turns out this is",
    "start": "1445039",
    "end": "1452080"
  },
  {
    "text": "almost consistently faster even on a smaller uh size um uh uh smaller results",
    "start": "1452080",
    "end": "1461400"
  },
  {
    "text": "now if you have under the page you can do a little bit more optimizations like you don't need to do",
    "start": "1461400",
    "end": "1467640"
  },
  {
    "text": "uh um pagination if the count is less than page size and stuff like that you can squeeze out a little bit more",
    "start": "1467640",
    "end": "1474679"
  },
  {
    "text": "performance out of this but generally speaking this is uh a pattern that you",
    "start": "1474679",
    "end": "1481080"
  },
  {
    "text": "can use for most of the pagination um problems now you have another one some",
    "start": "1481080",
    "end": "1487120"
  },
  {
    "text": "of you might know is the cursor index in SQL which is great for infinite",
    "start": "1487120",
    "end": "1492799"
  },
  {
    "text": "scrolling and is one of the most performing rates uh for paginations um",
    "start": "1492799",
    "end": "1497880"
  },
  {
    "text": "but usually when you have paged um paged list uh sorry paged tables um they",
    "start": "1497880",
    "end": "1507960"
  },
  {
    "text": "don't work really well because the way it works is you need to know the last",
    "start": "1507960",
    "end": "1515159"
  },
  {
    "text": "item from the previous page but if the table can change over time or somebody",
    "start": "1515159",
    "end": "1522039"
  },
  {
    "text": "can just modify the number of page they are on um it just doesn't work",
    "start": "1522039",
    "end": "1528919"
  },
  {
    "text": "anymore um because it's really tightly connected to how you order in the",
    "start": "1528919",
    "end": "1535720"
  },
  {
    "text": "database and knowing what was the last item from the previous",
    "start": "1535720",
    "end": "1541440"
  },
  {
    "text": "page but in most of the cases this is good enough performance for most of the",
    "start": "1541440",
    "end": "1546559"
  },
  {
    "text": "cases but if you really need even more there's cursor",
    "start": "1546559",
    "end": "1552279"
  },
  {
    "text": "index and this of course massive performance differences uh obviously and",
    "start": "1552279",
    "end": "1558720"
  },
  {
    "text": "also here um because I didn't want to wait for my machine to be available for the next 10 uh unavailable for the next",
    "start": "1558720",
    "end": "1565799"
  },
  {
    "text": "10 minutes uh this is a smaller size that this is not 7 million I think it",
    "start": "1565799",
    "end": "1570960"
  },
  {
    "text": "was uh 50,000 or something in that ballp Park and you can see it struggled a lot",
    "start": "1570960",
    "end": "1578760"
  },
  {
    "text": "but when we implemented pagination uh properly uh we were under 100",
    "start": "1578760",
    "end": "1584000"
  },
  {
    "text": "milliseconds which is really good all right now this one I think a",
    "start": "1584000",
    "end": "1590760"
  },
  {
    "text": "lot of people did not know either who knows uh cancellation",
    "start": "1590760",
    "end": "1597600"
  },
  {
    "text": "tokens who actually used them okay but okay almost entire room",
    "start": "1597600",
    "end": "1603760"
  },
  {
    "text": "for knowing them and half a room are using them how many of you are using it for EF",
    "start": "1603760",
    "end": "1610720"
  },
  {
    "text": "core about the quarter okay I think I'll make you use more often in EF as well",
    "start": "1610720",
    "end": "1618360"
  },
  {
    "text": "so what's the problem well let's say somebody Doss you",
    "start": "1618360",
    "end": "1623559"
  },
  {
    "text": "for whatever reason or you have just cranky users that smashes F5 a lot or",
    "start": "1623559",
    "end": "1630200"
  },
  {
    "text": "you get a lot of say your business becomes really popular and you get lots of requests what may happen is we get",
    "start": "1630200",
    "end": "1638919"
  },
  {
    "text": "here HTTP request EF C does its thing send a query to SQL server but then you have here a cancel",
    "start": "1638919",
    "end": "1646720"
  },
  {
    "text": "request now this cancer request can actually happen if you have like an angular application a SP application and",
    "start": "1646720",
    "end": "1654559"
  },
  {
    "text": "you switch from one page to another and the user just switched from the page away before the request finished so this",
    "start": "1654559",
    "end": "1662480"
  },
  {
    "text": "can happen more frequently than you may think but what happens is this is still",
    "start": "1662480",
    "end": "1670200"
  },
  {
    "text": "happening behind the scenes and not just that um it looks is",
    "start": "1670200",
    "end": "1677399"
  },
  {
    "text": "it is it cancelled well okay no just do the thing normally but if it is",
    "start": "1677399",
    "end": "1684600"
  },
  {
    "text": "cancelled it will process your code until the first cancellation token it",
    "start": "1684600",
    "end": "1690480"
  },
  {
    "text": "will hit or it will basically complete the entire request and then ip.net cor",
    "start": "1690480",
    "end": "1697840"
  },
  {
    "text": "will be like you know what I actually don't need your response and then just discard your response so basically you",
    "start": "1697840",
    "end": "1704919"
  },
  {
    "text": "done all of this work for nothing and if you under attack or you you're",
    "start": "1704919",
    "end": "1712159"
  },
  {
    "text": "basically having lots of reports that takes 30 seconds to generate and uh a",
    "start": "1712159",
    "end": "1717760"
  },
  {
    "text": "manager is very cranky and uh smashes refresh button lots of times you're",
    "start": "1717760",
    "end": "1723600"
  },
  {
    "text": "going to have bad time and SQL Server is going to have a bad time as well so what you can do is on all of the",
    "start": "1723600",
    "end": "1733159"
  },
  {
    "text": "request you can do canellation uh token and then pass it over here in two list",
    "start": "1733159",
    "end": "1739519"
  },
  {
    "text": "Asing to First of default Asing uh any Asing Max ASN almost all of the",
    "start": "1739519",
    "end": "1746720"
  },
  {
    "text": "operations that return something from uh SQL Server will have an acing uh uh",
    "start": "1746720",
    "end": "1754440"
  },
  {
    "text": "option with a constellation token now what happens is when we're",
    "start": "1754440",
    "end": "1760880"
  },
  {
    "text": "doing hdp request it generates a SQL Server um query it uh sends it to SQL",
    "start": "1760880",
    "end": "1769279"
  },
  {
    "text": "Server the user cancels request we have here uh a request to cancel um the SQL",
    "start": "1769279",
    "end": "1780519"
  },
  {
    "text": "query and that gets sent to the SQL server and SQL Server stops and also the",
    "start": "1780519",
    "end": "1789080"
  },
  {
    "text": "ip.net core stops it's th a I think a task canell uh exception and it it stops",
    "start": "1789080",
    "end": "1798640"
  },
  {
    "text": "uh from where you actually done the query so the the exception bubbles up",
    "start": "1798640",
    "end": "1803919"
  },
  {
    "text": "and you then stop uh processing uh all of uh the",
    "start": "1803919",
    "end": "1809120"
  },
  {
    "text": "request and the benefit of this is for instance here we have we have a",
    "start": "1809120",
    "end": "1815600"
  },
  {
    "text": "similar uh test here where we just tried to count and if I remember uh from the",
    "start": "1815600",
    "end": "1822640"
  },
  {
    "text": "first example the count was about 130 milliseconds or something like that",
    "start": "1822640",
    "end": "1828120"
  },
  {
    "text": "was much much faster than 10 seconds and this is what happens when we do the same",
    "start": "1828120",
    "end": "1833960"
  },
  {
    "text": "request on the load where we cancel uh the request uh every second so I think",
    "start": "1833960",
    "end": "1841559"
  },
  {
    "text": "i' actually done this uh yeah I actually use the bad",
    "start": "1841559",
    "end": "1847480"
  },
  {
    "text": "example where it takes 3.5 seconds sorry um just to make it so that it takes more",
    "start": "1847480",
    "end": "1854880"
  },
  {
    "text": "than one second to complete",
    "start": "1854880",
    "end": "1859240"
  },
  {
    "text": "now when we using cancellation tokens what you might notice is it's only half",
    "start": "1860039",
    "end": "1867880"
  },
  {
    "text": "it should have been 3 and a half seconds roughly from the first example and it's still not 3 and a half",
    "start": "1867880",
    "end": "1875880"
  },
  {
    "text": "seconds and that's because when we do canellation there's still some cleanup",
    "start": "1875880",
    "end": "1881360"
  },
  {
    "text": "to do there still the survey is still overloaded with data like in in this",
    "start": "1881360",
    "end": "1887720"
  },
  {
    "text": "case I'm doing 12 requests um in parallel whereas in all",
    "start": "1887720",
    "end": "1893320"
  },
  {
    "text": "of the other test it was five but the important part here",
    "start": "1893320",
    "end": "1898919"
  },
  {
    "text": "is this part here was responsive a lot faster than this one so even when your",
    "start": "1898919",
    "end": "1907360"
  },
  {
    "text": "server can handle the L for instance the cleanup the garbage collection and all",
    "start": "1907360",
    "end": "1912480"
  },
  {
    "text": "of that stuff will make your server uh more unresponsive and it will take",
    "start": "1912480",
    "end": "1918480"
  },
  {
    "text": "longer for it to recover from that bigger load than if you use cancellation",
    "start": "1918480",
    "end": "1925440"
  },
  {
    "text": "token so there's several different um benefits to having cancellation",
    "start": "1925440",
    "end": "1932519"
  },
  {
    "text": "token and last common mistakes that I saw and this one to be fair is very very",
    "start": "1932519",
    "end": "1939480"
  },
  {
    "text": "recent with ef core 7 actually now I think they're calling it ef7 I'll need",
    "start": "1939480",
    "end": "1945279"
  },
  {
    "text": "to check the official name I think they use sometimes EF core7 sometime ef7",
    "start": "1945279",
    "end": "1951120"
  },
  {
    "text": "sometime ef8 EF core 8 bit mixed now",
    "start": "1951120",
    "end": "1958000"
  },
  {
    "text": "traditionally what we did if we wanted to update uh say all of the employees",
    "start": "1958000",
    "end": "1964159"
  },
  {
    "text": "and here just just for fun what I did is just swwa the first name and last name uh of the employee imagine that we're",
    "start": "1964159",
    "end": "1971200"
  },
  {
    "text": "trying to just set everyone to be active or we want to uh update something for",
    "start": "1971200",
    "end": "1979000"
  },
  {
    "text": "all of the employees the way we need to do uh",
    "start": "1979000",
    "end": "1984480"
  },
  {
    "text": "nowadays the way we do it nowadays is well we had to do until now was get all",
    "start": "1988240",
    "end": "1995760"
  },
  {
    "text": "of the employees we want to update and then we need to do a full loop update",
    "start": "1995760",
    "end": "2001080"
  },
  {
    "text": "them or you know whatever we want to do with the data we need to update need them like that and what we results is",
    "start": "2001080",
    "end": "2009080"
  },
  {
    "text": "here is the initial query that gets all of the data and over here is US updating",
    "start": "2009080",
    "end": "2016279"
  },
  {
    "text": "one employee at a time which can take a while especially",
    "start": "2016279",
    "end": "2022000"
  },
  {
    "text": "if you have hundreds of employees imagine if we're trying to update all 7 million",
    "start": "2022000",
    "end": "2028120"
  },
  {
    "text": "sales say that we want to just say okay these 7 million sales are uh in that",
    "start": "2028120",
    "end": "2034840"
  },
  {
    "text": "text um text period and we just want to take off that we have a that audited all",
    "start": "2034840",
    "end": "2041600"
  },
  {
    "text": "of them that will take a lot of time if you do this",
    "start": "2041600",
    "end": "2046679"
  },
  {
    "text": "approach now what you can do now with ef core 7 and EF core 8 you can now just uh",
    "start": "2046679",
    "end": "2054040"
  },
  {
    "text": "say uh execute update and then say set",
    "start": "2054040",
    "end": "2059079"
  },
  {
    "text": "this property to last name and last name the first name now you could uh use an",
    "start": "2059079",
    "end": "2065280"
  },
  {
    "text": "actual string over here or your own variable this is just me uh trying to",
    "start": "2065280",
    "end": "2071200"
  },
  {
    "text": "run a test that it can uh run repeatedly uh but this what allows you",
    "start": "2071200",
    "end": "2077878"
  },
  {
    "text": "to do is if you already know how you're going to update a specific record in the",
    "start": "2077879",
    "end": "2083919"
  },
  {
    "text": "database you no longer need to uh fetch the data and then uh update it manually",
    "start": "2083919",
    "end": "2092599"
  },
  {
    "text": "in the net and then you save changes which also is a lot more Cod and what is",
    "start": "2092599",
    "end": "2099240"
  },
  {
    "text": "also important here you can do we over here and another thing is uh you can",
    "start": "2099240",
    "end": "2106680"
  },
  {
    "text": "also use uh the global query filters so if you don't want to update um employees",
    "start": "2106680",
    "end": "2114320"
  },
  {
    "text": "that were self- deleted that is all built in you don't have to think about",
    "start": "2114320",
    "end": "2120280"
  },
  {
    "text": "it it just works and if you wonder what is tag withd if you want to know in sec",
    "start": "2120280",
    "end": "2128480"
  },
  {
    "text": "server um from where that request is coming from this tag width uh is",
    "start": "2128480",
    "end": "2135560"
  },
  {
    "text": "included in the SQL query uh that means that if you use SQL profile use",
    "start": "2135560",
    "end": "2141359"
  },
  {
    "text": "application insights seek uh console logging file logging whatever and you're",
    "start": "2141359",
    "end": "2148200"
  },
  {
    "text": "logging uh your queries you have now a string that you can",
    "start": "2148200",
    "end": "2154240"
  },
  {
    "text": "directly um point to that specific code that executes it and from EF core 7",
    "start": "2154240",
    "end": "2161240"
  },
  {
    "text": "onwards for the first time now you can actually also tag with uh execute",
    "start": "2161240",
    "end": "2167119"
  },
  {
    "text": "updates and deletes which before wasn't",
    "start": "2167119",
    "end": "2172400"
  },
  {
    "text": "possible and the performance uh gains here is this is only 23 um uh Records",
    "start": "2172400",
    "end": "2179720"
  },
  {
    "text": "but we still get fre times faster performance now you can imagine how much",
    "start": "2179720",
    "end": "2185240"
  },
  {
    "text": "more that would be if we do saf for with seven 7 million uh",
    "start": "2185240",
    "end": "2191880"
  },
  {
    "text": "Records all right we got 20 minutes so I have time to talk about uh more advanced",
    "start": "2191880",
    "end": "2199680"
  },
  {
    "text": "stuff now uh we have done some of the common mistakes that I have seen uh in",
    "start": "2199680",
    "end": "2205520"
  },
  {
    "text": "EF core and how many of you found so far useful that the the",
    "start": "2205520",
    "end": "2211040"
  },
  {
    "text": "advice okay practically the entire room now we're going to go a little bit",
    "start": "2211040",
    "end": "2217359"
  },
  {
    "text": "more advanced a little bit off track of common mistakes so the bonus tips that I have",
    "start": "2217359",
    "end": "2225280"
  },
  {
    "text": "is the other issues that I have seen other horror stories and one of them I seen it last",
    "start": "2225280",
    "end": "2235839"
  },
  {
    "text": "week like I have no words for it but yeah um and it was kind of like this but",
    "start": "2235839",
    "end": "2245400"
  },
  {
    "text": "yeah uh at least it was an old code base um so what's happening here is this",
    "start": "2245400",
    "end": "2253160"
  },
  {
    "text": "happens more often that I uh want to admit is when somebody does a two",
    "start": "2253160",
    "end": "2260160"
  },
  {
    "text": "list and then checks if it's more than zero if you really want to do",
    "start": "2260160",
    "end": "2267599"
  },
  {
    "text": "inefficient but not too horrible at least use first of default and then",
    "start": "2267599",
    "end": "2272680"
  },
  {
    "text": "check if it's not null uh or just use do end that's even",
    "start": "2272680",
    "end": "2278920"
  },
  {
    "text": "better but yet I I actually seen that and then we have uh get sales now",
    "start": "2278920",
    "end": "2286920"
  },
  {
    "text": "this is an interesting thing because I didn't know why uh some people done that",
    "start": "2286920",
    "end": "2292400"
  },
  {
    "text": "until I was trying to talk to them and what I realized is they didn't know that",
    "start": "2292400",
    "end": "2298440"
  },
  {
    "text": "you could use I quable to build a query over time so what they did is they B",
    "start": "2298440",
    "end": "2306640"
  },
  {
    "text": "basically tried to fetch all of the data that they know they they might need and",
    "start": "2306640",
    "end": "2312880"
  },
  {
    "text": "then they in memory filtered them out right because they didn't know they can",
    "start": "2312880",
    "end": "2317920"
  },
  {
    "text": "just uh build the query over time and by the way um some people use sale ID not",
    "start": "2317920",
    "end": "2327400"
  },
  {
    "text": "equals in the W CLW and then they use if",
    "start": "2327400",
    "end": "2332839"
  },
  {
    "text": "it's not uh not null then do this comparison which is perfectly",
    "start": "2332839",
    "end": "2338800"
  },
  {
    "text": "fine but if you want to maximize performance you can also do this and",
    "start": "2338800",
    "end": "2346240"
  },
  {
    "text": "what that happens is this condition never even reach a SQL",
    "start": "2346240",
    "end": "2351839"
  },
  {
    "text": "Server which gives you a slight performance boost and another thing that",
    "start": "2351839",
    "end": "2357680"
  },
  {
    "text": "can also be a benefit is if this uh wake Closs happens to have say um let's say",
    "start": "2357680",
    "end": "2366640"
  },
  {
    "text": "that it would be uh x. salesperson do",
    "start": "2366640",
    "end": "2371680"
  },
  {
    "text": "name equals to this name right if this is in the Wake loss it will",
    "start": "2371680",
    "end": "2378720"
  },
  {
    "text": "implicitly join the salesperson table but you don't want that to happen if you",
    "start": "2378720",
    "end": "2385800"
  },
  {
    "text": "not even want if you don't want to filter um by a person's name but if you",
    "start": "2385800",
    "end": "2393319"
  },
  {
    "text": "do that baked it in that will always happen happen so instead you can do this",
    "start": "2393319",
    "end": "2399960"
  },
  {
    "text": "and not have that condition sent to SQL server at all and it will only to uh",
    "start": "2399960",
    "end": "2406800"
  },
  {
    "text": "join when you need it all right how many of you know DB",
    "start": "2406800",
    "end": "2414599"
  },
  {
    "text": "context pool only a handful of hands now DB",
    "start": "2414599",
    "end": "2420640"
  },
  {
    "text": "context pool is really cool now Microsoft realized that most people don't know about be context pool and",
    "start": "2420640",
    "end": "2427960"
  },
  {
    "text": "they moved a lot of the features uh to the actual uh DB providers so DB",
    "start": "2427960",
    "end": "2436640"
  },
  {
    "text": "providers uh have connection pulled behind the scenes what that means is",
    "start": "2436640",
    "end": "2442200"
  },
  {
    "text": "when you do a query uh it makes a connection to SQL server and when it's done with a SQL",
    "start": "2442200",
    "end": "2449640"
  },
  {
    "text": "Server it does not terminate the connection it keeps that connection warm",
    "start": "2449640",
    "end": "2455640"
  },
  {
    "text": "so the next next time you ask something uh from SQL Server you already have that connection established so that's what",
    "start": "2455640",
    "end": "2462680"
  },
  {
    "text": "we're getting uh I think from efco 3.1 uh for free but what DB context allows",
    "start": "2462680",
    "end": "2469400"
  },
  {
    "text": "us on top of that is for the DB context also be recycled they basically just",
    "start": "2469400",
    "end": "2477319"
  },
  {
    "text": "reset all of the DB context uh properties variables so you you",
    "start": "2477319",
    "end": "2484079"
  },
  {
    "text": "basically get even more performance gain and you get more memory uh efficiency",
    "start": "2484079",
    "end": "2489520"
  },
  {
    "text": "Microsoft also uh recommends this and what it allows you to do is you can",
    "start": "2489520",
    "end": "2496280"
  },
  {
    "text": "become more scalable uh because the your memory usage doesn't grow as fast with",
    "start": "2496280",
    "end": "2504079"
  },
  {
    "text": "theb context pool one thing to uh just keep in mind",
    "start": "2504079",
    "end": "2509760"
  },
  {
    "text": "if anyone uses dependency injection on DB context pool uh this may break it or",
    "start": "2509760",
    "end": "2516839"
  },
  {
    "text": "if you have anything uh that is stateful now one trick that I do",
    "start": "2516839",
    "end": "2523200"
  },
  {
    "text": "is I use this and I hide the DB context",
    "start": "2523200",
    "end": "2528359"
  },
  {
    "text": "behind an interface and I do manual resolving of",
    "start": "2528359",
    "end": "2533560"
  },
  {
    "text": "that interface by fetching the cell DB and then populating uh the injected services in",
    "start": "2533560",
    "end": "2542040"
  },
  {
    "text": "it that's one way I'm dealing with it so that I can still get the DB context pool",
    "start": "2542040",
    "end": "2549200"
  },
  {
    "text": "features but if I have anything stateful I can control it at the time I need uh",
    "start": "2549200",
    "end": "2556520"
  },
  {
    "text": "the recycle DB context just something to keep in mind now I have shown you get tweets",
    "start": "2556520",
    "end": "2563760"
  },
  {
    "text": "sorry a tag WID this is really cool because you get it into the log um I",
    "start": "2563760",
    "end": "2571200"
  },
  {
    "text": "fortunately didn't have access to VPN um and also my log AG was lost and I",
    "start": "2571200",
    "end": "2577599"
  },
  {
    "text": "couldn't get my battery running and all of that stuff uh I actually have built now reports where I can just have a",
    "start": "2577599",
    "end": "2587720"
  },
  {
    "text": "Columns of different tag width queries and it gives me a chart which of the",
    "start": "2587720",
    "end": "2594800"
  },
  {
    "text": "queries are most problematic and because I have this comment over here I know exactly which",
    "start": "2594800",
    "end": "2602559"
  },
  {
    "text": "file uh to blame I can just say ah this",
    "start": "2602559",
    "end": "2607680"
  },
  {
    "text": "get tweets is uh okay but there's couple of other queries I can just copy this",
    "start": "2607680",
    "end": "2614720"
  },
  {
    "text": "segment over here control shift F and I get exactly to this query and then I can",
    "start": "2614720",
    "end": "2621520"
  },
  {
    "text": "address this query specifically this is very important especially if you have",
    "start": "2621520",
    "end": "2627920"
  },
  {
    "text": "like random bursts of performance issues",
    "start": "2627920",
    "end": "2633200"
  },
  {
    "text": "and the performance issues are not too clear uh with this you can try to identify if SQL one of the SQL Server",
    "start": "2633200",
    "end": "2641400"
  },
  {
    "text": "queries is actually making the SQL Server super busy uh and then you can",
    "start": "2641400",
    "end": "2647079"
  },
  {
    "text": "start diagnosing that particular query from the",
    "start": "2647079",
    "end": "2653000"
  },
  {
    "text": "get-go also how many of you are using CH GPT about a half of room three",
    "start": "2653000",
    "end": "2661240"
  },
  {
    "text": "quarters so there's a lot of tips I can give you for ch P but the simplest one",
    "start": "2661240",
    "end": "2667800"
  },
  {
    "text": "for sake of time um if you in EF core exp sorry you are an EF core expert and",
    "start": "2667800",
    "end": "2676079"
  },
  {
    "text": "clean code developer this part here is quite nice you generally get slightly",
    "start": "2676079",
    "end": "2682559"
  },
  {
    "text": "better code um and you can then write your uh instructions over here you can",
    "start": "2682559",
    "end": "2689760"
  },
  {
    "text": "optionally paste DB context now your DB context might be big so you can just uh",
    "start": "2689760",
    "end": "2696559"
  },
  {
    "text": "uh paste a snapshot of that just small Snippets that are important for uh this",
    "start": "2696559",
    "end": "2703880"
  },
  {
    "text": "uh prompt uh you might want to also add entities sometimes it's not necessary to",
    "start": "2703880",
    "end": "2711200"
  },
  {
    "text": "have entities because uh it can deduce from uh what you want and also the",
    "start": "2711200",
    "end": "2718480"
  },
  {
    "text": "return types because I I like the um I like most of the data that I get from",
    "start": "2718480",
    "end": "2723760"
  },
  {
    "text": "the database to be already mapped and what I have here is get all",
    "start": "2723760",
    "end": "2730440"
  },
  {
    "text": "employees details for each uh get statistics on how many products they",
    "start": "2730440",
    "end": "2736559"
  },
  {
    "text": "sold how much they earned and list of sales they did all",
    "start": "2736559",
    "end": "2743200"
  },
  {
    "text": "paginated now this is when you piece together all of the things that I have",
    "start": "2743200",
    "end": "2749079"
  },
  {
    "text": "talked today this is not too difficult to make but it may take an hour you know",
    "start": "2749079",
    "end": "2755400"
  },
  {
    "text": "you've write the thing you run it you figure out that oh wait I actually uh",
    "start": "2755400",
    "end": "2760440"
  },
  {
    "text": "misunderstood how to do that or um you know uh I need to join with this table",
    "start": "2760440",
    "end": "2766079"
  },
  {
    "text": "not with that and it take can take an hour to build this or you can just ask chat GPT and in",
    "start": "2766079",
    "end": "2774000"
  },
  {
    "text": "5 minutes you get a pretty good code uh in this particular case in page",
    "start": "2774000",
    "end": "2783319"
  },
  {
    "text": "yeah so in this particular cage it doesn't actually do counts but it would take you a minute to",
    "start": "2783319",
    "end": "2790960"
  },
  {
    "text": "just make a small refactor to also do the counting but the cool thing is you",
    "start": "2790960",
    "end": "2797119"
  },
  {
    "text": "don't have to think about how to build this thing here uh this thing here and",
    "start": "2797119",
    "end": "2802800"
  },
  {
    "text": "all of that stuff it just just does it for you um so if you're looking for",
    "start": "2802800",
    "end": "2808520"
  },
  {
    "text": "great CH GPT prompts and you're like you don't want to remember lots and lots of things",
    "start": "2808520",
    "end": "2817319"
  },
  {
    "text": "this small snippet here is usually good enough I would recommend that you run",
    "start": "2817319",
    "end": "2824480"
  },
  {
    "text": "three times because some of the code might be",
    "start": "2824480",
    "end": "2829520"
  },
  {
    "text": "bad but in within three runs it usually uh it usually gives you a pretty good",
    "start": "2829520",
    "end": "2837280"
  },
  {
    "text": "code and before we end um this I have done this talk and",
    "start": "2837280",
    "end": "2844079"
  },
  {
    "text": "I've seen some people uh on YouTube comments saying you shouldn't do premature optimizations and stuff like",
    "start": "2844079",
    "end": "2851319"
  },
  {
    "text": "that uh and I added the segments just for that part and the reason why I wanted to give",
    "start": "2851319",
    "end": "2858599"
  },
  {
    "text": "this is to basically explain when you should actually think about performance because yes this talk",
    "start": "2858599",
    "end": "2866440"
  },
  {
    "text": "is focused a lot on performance but it's focused on",
    "start": "2866440",
    "end": "2872319"
  },
  {
    "text": "performance on a very bad casis where you can very clearly see hey it's not",
    "start": "2872319",
    "end": "2878800"
  },
  {
    "text": "just that the code looks a little bit bad and doesn't really do what you intended to do it actually has Major",
    "start": "2878800",
    "end": "2885760"
  },
  {
    "text": "Performance um uh side effect but you know if you follow best",
    "start": "2885760",
    "end": "2894599"
  },
  {
    "text": "practices that's not premature optimization that's just smart programming um when you expect High",
    "start": "2894599",
    "end": "2904640"
  },
  {
    "text": "load you should talk with your product owner and say hey this should be part of",
    "start": "2904640",
    "end": "2910280"
  },
  {
    "text": "acceptance criteria because if you know there's going to be 7 million sales and",
    "start": "2910280",
    "end": "2915319"
  },
  {
    "text": "you don't have pagination that's something that is",
    "start": "2915319",
    "end": "2920599"
  },
  {
    "text": "missing in the task you're doing that's not trying to prematurely",
    "start": "2920599",
    "end": "2926280"
  },
  {
    "text": "optimize this is something missing in the",
    "start": "2926280",
    "end": "2931040"
  },
  {
    "text": "specs uh and when there's something that already C causes performance",
    "start": "2931400",
    "end": "2937119"
  },
  {
    "text": "issues you should at least make a comment on it have it in your backlog",
    "start": "2937119",
    "end": "2944200"
  },
  {
    "text": "know that it exists because a lot of time what happens is people just accept that it's",
    "start": "2944200",
    "end": "2951240"
  },
  {
    "text": "low and then years pass along a lot of data accumulates and at some point",
    "start": "2951240",
    "end": "2957799"
  },
  {
    "text": "there's a Tipping Point where the server no longer can handle that much scale",
    "start": "2957799",
    "end": "2963480"
  },
  {
    "text": "maybe there's some added features or you know you just start to um to reach the",
    "start": "2963480",
    "end": "2969240"
  },
  {
    "text": "maximum RAM and all of the sudden that thing starts to become super",
    "start": "2969240",
    "end": "2977119"
  },
  {
    "text": "slow so what you want to do is basically treat it as technical that",
    "start": "2977119",
    "end": "2983119"
  },
  {
    "text": "have it in the backlog and never say we'll fix it later",
    "start": "2983119",
    "end": "2989280"
  },
  {
    "text": "with no action it is fine to say we'll fix it later as long as you you comment",
    "start": "2989280",
    "end": "2996280"
  },
  {
    "text": "the code saying here is a problem we need to fix it and then put it into",
    "start": "2996280",
    "end": "3001640"
  },
  {
    "text": "backlog too often I have seen where it's like we'll fix it later and nothing",
    "start": "3001640",
    "end": "3007079"
  },
  {
    "text": "happened and then 2 years later it's like oh yeah we said we're going to fix",
    "start": "3007079",
    "end": "3012359"
  },
  {
    "text": "that usually when it's way too late to fix",
    "start": "3012359",
    "end": "3017880"
  },
  {
    "text": "it and also premature optimization is not an excuse for bad code if you write",
    "start": "3017880",
    "end": "3026119"
  },
  {
    "text": "the bad code and we all do I also",
    "start": "3026119",
    "end": "3031680"
  },
  {
    "text": "do you should at least mark it to be fixed later there's no excuse to have a",
    "start": "3031680",
    "end": "3040040"
  },
  {
    "text": "bad code in your code base on a long term yes there might be deadlines where",
    "start": "3040040",
    "end": "3046200"
  },
  {
    "text": "hey we will lose million dollars if this does not get fixed today and you",
    "start": "3046200",
    "end": "3052520"
  },
  {
    "text": "basically don't do the best practices that day but that means that you have a",
    "start": "3052520",
    "end": "3058839"
  },
  {
    "text": "task in your backlog that you fixed that problem because you don't want to have a",
    "start": "3058839",
    "end": "3065200"
  },
  {
    "text": "problem that will haunt you sometimes 15 years later that's what I'm dealing with",
    "start": "3065200",
    "end": "3071920"
  },
  {
    "text": "today with current client problems done 5 10 years",
    "start": "3071920",
    "end": "3076960"
  },
  {
    "text": "ago so please fix that and here are a couple of resources",
    "start": "3076960",
    "end": "3083040"
  },
  {
    "text": "you can find all of the uh tests that I done in EF course sample stability and",
    "start": "3083040",
    "end": "3089359"
  },
  {
    "text": "performance uh if anyone wants to dig in I actually done some SQL versus EF tests",
    "start": "3089359",
    "end": "3098160"
  },
  {
    "text": "and if you're interested in it's about 50% difference in EF course 6 so if",
    "start": "3098160",
    "end": "3106119"
  },
  {
    "text": "you which you know if you want to optimize a quy that runs 80",
    "start": "3106119",
    "end": "3111880"
  },
  {
    "text": "milliseconds um reducing to 40 millisecond seconds that's not really a",
    "start": "3111880",
    "end": "3117000"
  },
  {
    "text": "huge gain especially because you lose on maintainability refactoring uh the code is a bit harder",
    "start": "3117000",
    "end": "3124280"
  },
  {
    "text": "to read and stuff like that but there are some cases with that 50% means the",
    "start": "3124280",
    "end": "3129799"
  },
  {
    "text": "difference between running it for 30 seconds or 15 seconds that's where you",
    "start": "3129799",
    "end": "3135400"
  },
  {
    "text": "want to uh use say raw SQL uh then we have also uh Microsoft",
    "start": "3135400",
    "end": "3143200"
  },
  {
    "text": "resources they done an amaz job with this most of the tips are over there",
    "start": "3143200",
    "end": "3149240"
  },
  {
    "text": "when I started doing this almost none of this was there so I'm really proud of",
    "start": "3149240",
    "end": "3155000"
  },
  {
    "text": "Microsoft to uh take initiative the only problem very few know about this Ling",
    "start": "3155000",
    "end": "3161079"
  },
  {
    "text": "how many of you knew that only a few",
    "start": "3161079",
    "end": "3166960"
  },
  {
    "text": "hint then we also have as ssw rules the better Entity framework as well as link",
    "start": "3166960",
    "end": "3173680"
  },
  {
    "text": "uh and uh I also got an inspired a bit from Nick chaps on how to do you know",
    "start": "3173680",
    "end": "3180079"
  },
  {
    "text": "the performance test and stuff like that to show um actual impact of decisions so",
    "start": "3180079",
    "end": "3187400"
  },
  {
    "text": "it's not just use this code it's better but saying hey use this code because",
    "start": "3187400",
    "end": "3193960"
  },
  {
    "text": "this stats over here this is this is what happens if you don't and I really",
    "start": "3193960",
    "end": "3199079"
  },
  {
    "text": "like that uh format so key takeaway innumerable is very dangerous",
    "start": "3199079",
    "end": "3207040"
  },
  {
    "text": "use it only when it's intended to be used when you use EF core for everything",
    "start": "3207040",
    "end": "3213400"
  },
  {
    "text": "else I inumerable is awesome just not for EF cor uh as not tracking you can get",
    "start": "3213400",
    "end": "3221839"
  },
  {
    "text": "almost free performance boost as long the data that you're getting is supposed",
    "start": "3221839",
    "end": "3227520"
  },
  {
    "text": "to be read only if it's not you'll end up with",
    "start": "3227520",
    "end": "3232559"
  },
  {
    "text": "bugs uh and simple codes can result in better performance how many of you seen",
    "start": "3232559",
    "end": "3239559"
  },
  {
    "text": "the code from the bad code and good code and felt the more performing code is looks a",
    "start": "3239559",
    "end": "3247040"
  },
  {
    "text": "little bit better we have a couple of hands but you know even if it didn't look a bit uh a",
    "start": "3247040",
    "end": "3254680"
  },
  {
    "text": "bit better as long it's not worse than the original and you're getting all of these benefits uh it is a big win and I",
    "start": "3254680",
    "end": "3263599"
  },
  {
    "text": "really like to do queres that the concise performance uh and still gives me the",
    "start": "3263599",
    "end": "3269720"
  },
  {
    "text": "flexibility to refactor uh them and if I",
    "start": "3269720",
    "end": "3275160"
  },
  {
    "text": "need to Common them now I use Tag WID which now serves not only for me to find",
    "start": "3275160",
    "end": "3282400"
  },
  {
    "text": "the queries in the SQL profiler but if I had to do a more complex query it kind",
    "start": "3282400",
    "end": "3288599"
  },
  {
    "text": "of also s serves as a comment as well so it now uh works as a double duty",
    "start": "3288599",
    "end": "3297079"
  },
  {
    "text": "you'll be able to find the presentation over here uh I'll also make sure that uh",
    "start": "3297680",
    "end": "3303200"
  },
  {
    "text": "is on the snack wait just a",
    "start": "3303200",
    "end": "3309119"
  },
  {
    "text": "second thank [Applause]",
    "start": "3311079",
    "end": "3318489"
  },
  {
    "text": "you now we have five minutes for questions",
    "start": "3321240",
    "end": "3327000"
  },
  {
    "text": "yes question uh can can somebody bring a",
    "start": "3327039",
    "end": "3336400"
  },
  {
    "text": "mic I uh [Music]",
    "start": "3336520",
    "end": "3343269"
  },
  {
    "text": "yeah so who do we need to call if we have manual projection as no tracking as",
    "start": "3346000",
    "end": "3352720"
  },
  {
    "text": "no tracking so when you're doing manual projection as no tracking is implicit",
    "start": "3352720",
    "end": "3359240"
  },
  {
    "text": "but there is a caveat um but there is a",
    "start": "3359240",
    "end": "3364880"
  },
  {
    "text": "caveat to the uh manual mapping um let me try to find one where we have",
    "start": "3364880",
    "end": "3373720"
  },
  {
    "text": "uh I think it's no not that one uh come on yeah so here so what happens is if we",
    "start": "3373720",
    "end": "3384760"
  },
  {
    "text": "do instead of sers first name if you do s person equals x s",
    "start": "3384760",
    "end": "3391280"
  },
  {
    "text": "person now I thought that if you don't do asot",
    "start": "3391280",
    "end": "3396880"
  },
  {
    "text": "tracking and you do select um you good right but what I",
    "start": "3396880",
    "end": "3403599"
  },
  {
    "text": "learned is if you don't do as not tracking over here all of this part here",
    "start": "3403599",
    "end": "3410119"
  },
  {
    "text": "would be untracked but if you do sell person equals X X Sil person this Sil person is",
    "start": "3410119",
    "end": "3418079"
  },
  {
    "text": "actually tracked",
    "start": "3418079",
    "end": "3423240"
  },
  {
    "text": "yes uh which is why I ALS I usually add",
    "start": "3423240",
    "end": "3428559"
  },
  {
    "text": "as not tracking even if it's technically not required just in case now in this",
    "start": "3428559",
    "end": "3436280"
  },
  {
    "text": "particular case yes asno tracking is a bit redundant but it might not be and if you",
    "start": "3436280",
    "end": "3444920"
  },
  {
    "text": "have a big developer team sometimes it happens that they get entire table and",
    "start": "3444920",
    "end": "3450720"
  },
  {
    "text": "you know it's not necessarily wrong uh especially if it's a list and they",
    "start": "3450720",
    "end": "3456599"
  },
  {
    "text": "basically need almost all of the data and it's not something they return back is just something they need to do for",
    "start": "3456599",
    "end": "3463559"
  },
  {
    "text": "processing uh it's fine um but yeah it's",
    "start": "3463559",
    "end": "3468680"
  },
  {
    "text": "basically causes a problem uh that it can be tracked and you can accidentally",
    "start": "3468680",
    "end": "3474240"
  },
  {
    "text": "change s person when you didn't intend to any other",
    "start": "3474240",
    "end": "3480280"
  },
  {
    "text": "questions uh we have over",
    "start": "3480280",
    "end": "3484319"
  },
  {
    "text": "there uh I want to know your uh view on",
    "start": "3488520",
    "end": "3493720"
  },
  {
    "text": "the lazy loading uh perspective like uh when I'm doing many ques as you were",
    "start": "3493720",
    "end": "3500599"
  },
  {
    "text": "testing uh if we can benefit from this CU I had some troubles with uh lazy",
    "start": "3500599",
    "end": "3506400"
  },
  {
    "text": "loading in the past yes and I want to know your thoughts about this uh if it's",
    "start": "3506400",
    "end": "3513160"
  },
  {
    "text": "worth or not uh and if how how do you see this like in a critical environment",
    "start": "3513160",
    "end": "3521200"
  },
  {
    "text": "uh of production so the question here is how I look lazy loading uh yeah I want",
    "start": "3521200",
    "end": "3528200"
  },
  {
    "text": "to know if you if you think like is more recommended to work with lazy loading or",
    "start": "3528200",
    "end": "3533839"
  },
  {
    "text": "if yeah yeah to answer question try not to use lazy loading ever um in fact e",
    "start": "3533839",
    "end": "3542039"
  },
  {
    "text": "gets out of the way to make lazy adding lazy loading a bit painful and I'm grateful for",
    "start": "3542039",
    "end": "3548280"
  },
  {
    "text": "that um because um we are currently migrating an",
    "start": "3548280",
    "end": "3553880"
  },
  {
    "text": "application if anyone is interested in a lot more complex scenarios we moving",
    "start": "3553880",
    "end": "3560240"
  },
  {
    "text": "from Entity framework 6 to entity uh to EF core 3.1 because we're moving from NET",
    "start": "3560240",
    "end": "3567720"
  },
  {
    "text": "Framework to net 8 but we cannot move 8 right away we can use fre one",
    "start": "3567720",
    "end": "3575160"
  },
  {
    "text": "first the original code had lazy loading we had so many issues and when we fix up",
    "start": "3575160",
    "end": "3581880"
  },
  {
    "text": "the lazy loading we haven't moved to net 8 yet and people think we have because the",
    "start": "3581880",
    "end": "3589280"
  },
  {
    "text": "application is so much faster and it was because there is no",
    "start": "3589280",
    "end": "3595640"
  },
  {
    "text": "way to know what thing is lazy loaded and what is not now if you have to deal",
    "start": "3595640",
    "end": "3601599"
  },
  {
    "text": "with a um old uh thing uh where tag withd um when you",
    "start": "3601599",
    "end": "3610599"
  },
  {
    "text": "have to deal with old uh databases this thing here tag Rd can",
    "start": "3610599",
    "end": "3616319"
  },
  {
    "text": "help uh can save you because what happens is if you have um sorry if you",
    "start": "3616319",
    "end": "3623440"
  },
  {
    "text": "have a lazy loading or if it has split queries or things like",
    "start": "3623440",
    "end": "3629559"
  },
  {
    "text": "that that tag width will be in all of the queries related to this so no matter",
    "start": "3629559",
    "end": "3638480"
  },
  {
    "text": "how many queries EF uh core will generate as a result of that uh query",
    "start": "3638480",
    "end": "3645680"
  },
  {
    "text": "all of them will have the same tag width and when you have multiple",
    "start": "3645680",
    "end": "3651839"
  },
  {
    "text": "queries with same tag width with same comment over here but they're all",
    "start": "3651839",
    "end": "3657000"
  },
  {
    "text": "different you have a problem it means that either you have lazy loading or you have um uh query",
    "start": "3657000",
    "end": "3665920"
  },
  {
    "text": "splitting and include the sorry not include the select kind of works as lazy",
    "start": "3665920",
    "end": "3673039"
  },
  {
    "text": "loading because it does implicitly uh load uh data",
    "start": "3673039",
    "end": "3678720"
  },
  {
    "text": "I yeah I'll need to click through to that go that but if anyone is interested",
    "start": "3678720",
    "end": "3683760"
  },
  {
    "text": "yeah when you do dot select that can be your alternative to Lazy loading because",
    "start": "3683760",
    "end": "3689760"
  },
  {
    "text": "you can just specify all of the data you want ahead of time uh and E EF core",
    "start": "3689760",
    "end": "3696520"
  },
  {
    "text": "figures out uh how to build a single aquarium I hope that answers the",
    "start": "3696520",
    "end": "3702400"
  },
  {
    "text": "question very good all right yeah we have one more question and probably then we'll have to",
    "start": "3702400",
    "end": "3708559"
  },
  {
    "text": "go for break yeah could you more information",
    "start": "3708559",
    "end": "3715440"
  },
  {
    "text": "queries uh so uh the question is about split queries so the same way we do ASN",
    "start": "3715440",
    "end": "3722440"
  },
  {
    "text": "tracking we can also do uh s split query now this I didn't include that because",
    "start": "3722440",
    "end": "3730079"
  },
  {
    "text": "usually this is a more complex problem um where uh imagine you have a uh select",
    "start": "3730079",
    "end": "3737599"
  },
  {
    "text": "statement where you have a complex mapping and that's the way Jo coins",
    "start": "3737599",
    "end": "3745839"
  },
  {
    "text": "Works say that you have one too many the one say uh s person have say 100 S uh",
    "start": "3745839",
    "end": "3756000"
  },
  {
    "text": "sales what happens is that one uh salers gets repeated 100",
    "start": "3756000",
    "end": "3763960"
  },
  {
    "text": "times because that one s person have 100 sales that's what you're getting that's",
    "start": "3763960",
    "end": "3770480"
  },
  {
    "text": "the raw data you're getting back from SQL Server and EF cor basically hides",
    "start": "3770480",
    "end": "3777119"
  },
  {
    "text": "that fact um but what you can achieve with if you just add uh as split query",
    "start": "3777119",
    "end": "3784119"
  },
  {
    "text": "is it can query separately uh the S person and separately uh sales now in",
    "start": "3784119",
    "end": "3792599"
  },
  {
    "text": "this particular case the performance gains are minimum but for instance if you have a",
    "start": "3792599",
    "end": "3799520"
  },
  {
    "text": "slow connection or things like that you can still benefit from lower package but",
    "start": "3799520",
    "end": "3805799"
  },
  {
    "text": "there are cases where you have complex query where splitting the query have",
    "start": "3805799",
    "end": "3812200"
  },
  {
    "text": "massive uh massive improvements but generally speaking you want to split",
    "start": "3812200",
    "end": "3818640"
  },
  {
    "text": "queres when you need to uh most of the time because EF core is not the best",
    "start": "3818640",
    "end": "3824839"
  },
  {
    "text": "judge of on when to split the query it's a little bit of Science and a",
    "start": "3824839",
    "end": "3831720"
  },
  {
    "text": "little bit of magic to figure out uh went to spit query thank you all right uh with that",
    "start": "3831720",
    "end": "3840240"
  },
  {
    "text": "if you have any questions I'll be around and uh thank you for uh",
    "start": "3840240",
    "end": "3845420"
  },
  {
    "text": "[Applause] listening",
    "start": "3845420",
    "end": "3851200"
  }
]