[
  {
    "start": "0",
    "end": "769000"
  },
  {
    "text": "hi everyone my name is Michael and I work in a company called hibernating",
    "start": "9090",
    "end": "15910"
  },
  {
    "text": "rhinos yeah rhinos that sleep we create",
    "start": "15910",
    "end": "21250"
  },
  {
    "text": "profilers for ramps but our main business is this this is a no sequel",
    "start": "21250",
    "end": "27730"
  },
  {
    "text": "document database that we created from scratch and I work on it for quite some",
    "start": "27730",
    "end": "34960"
  },
  {
    "text": "time now on internals I do low-level stuff just some disability algorithms",
    "start": "34960",
    "end": "40090"
  },
  {
    "text": "and also as part of my job I do support calls and post-mortem analysis so in",
    "start": "40090",
    "end": "48730"
  },
  {
    "text": "this talk I will I will share some some interesting issues I've seen over the",
    "start": "48730",
    "end": "55179"
  },
  {
    "text": "years that our clients do not only with no sequel databases but also with",
    "start": "55179",
    "end": "60819"
  },
  {
    "text": "relational databases and but in general what I've seen people do with databases",
    "start": "60819",
    "end": "67380"
  },
  {
    "text": "but before the interesting stuff I have",
    "start": "67380",
    "end": "73060"
  },
  {
    "text": "a question for you how much queries do you think typically a website would do",
    "start": "73060",
    "end": "79390"
  },
  {
    "text": "for page load anyone wants to guess estimation how much nine five yeah",
    "start": "79390",
    "end": "91329"
  },
  {
    "text": "sometimes and sometimes more and sometimes it's a lot more now this is by",
    "start": "91329",
    "end": "99820"
  },
  {
    "text": "the way this is from several months ago this is not something old and yeah if this is an edge case but I've seen",
    "start": "99820",
    "end": "106210"
  },
  {
    "text": "websites do dozens of queries per page load easily and there are not really",
    "start": "106210",
    "end": "111340"
  },
  {
    "text": "large sites so this is the problem",
    "start": "111340",
    "end": "119859"
  },
  {
    "text": "obviously one of the reasons why it's a problem because each query and people",
    "start": "119859",
    "end": "125770"
  },
  {
    "text": "often do not think about it each query has very large overhead a from",
    "start": "125770",
    "end": "133000"
  },
  {
    "text": "infrastructure point of view but also from computational point of view now",
    "start": "133000",
    "end": "140850"
  },
  {
    "text": "in general this often comes to modeling",
    "start": "140850",
    "end": "148350"
  },
  {
    "text": "in relational databases modeling is simple you just do normalize and there",
    "start": "148350",
    "end": "153460"
  },
  {
    "text": "is one true way of doing things and you get end up with what you end up right so",
    "start": "153460",
    "end": "159960"
  },
  {
    "text": "all you can do is optimize and try to you to use less queries in relation no",
    "start": "159960",
    "end": "165550"
  },
  {
    "text": "sequel databases usually it's about how you approach the problem and how do you model data this is something very",
    "start": "165550",
    "end": "172300"
  },
  {
    "text": "important that I often see in people that migrate from using relational",
    "start": "172300",
    "end": "178570"
  },
  {
    "text": "databases to non relation that which is not necessarily our database is they say they stay in a mindset of normalizing of",
    "start": "178570",
    "end": "187060"
  },
  {
    "text": "treating the data in the same way they did in relational databases this is I",
    "start": "187060",
    "end": "192460"
  },
  {
    "text": "think one of the biggest mistakes you can do because you often you can make it",
    "start": "192460",
    "end": "198400"
  },
  {
    "text": "work what the performance will be a blue small at best so what about it in",
    "start": "198400",
    "end": "207280"
  },
  {
    "text": "general that data modeling in no sequel is something for a workshop at least one",
    "start": "207280",
    "end": "213790"
  },
  {
    "text": "full day workshop so I will try to make it sure because I have lots of things to say in a 60 plus slice to show and I",
    "start": "213790",
    "end": "221080"
  },
  {
    "text": "hope I will finish it all so the normalization no sequel is not is not",
    "start": "221080",
    "end": "227560"
  },
  {
    "text": "something bad it is often expected and why it's expected especially in document",
    "start": "227560",
    "end": "233650"
  },
  {
    "text": "graph databases that the principles of modeling and in terms of supporting",
    "start": "233650",
    "end": "239170"
  },
  {
    "text": "features and functionality you cannot do quote unquote joins easily so usually",
    "start": "239170",
    "end": "246550"
  },
  {
    "text": "you won't be able to treat relationships the same way you're doing relational",
    "start": "246550",
    "end": "253540"
  },
  {
    "text": "databases and in general know in no sequel but bed or incorrect data",
    "start": "253540",
    "end": "259989"
  },
  {
    "text": "modeling that does not fit your problem domain means more queries because you",
    "start": "259989",
    "end": "265480"
  },
  {
    "text": "need to make up for it now what should you do would you should analyze your",
    "start": "265480",
    "end": "272590"
  },
  {
    "text": "problem domain and plan your queries and your indexes and",
    "start": "272590",
    "end": "277600"
  },
  {
    "text": "what so on but I'm getting ahead of myself also there is another thing about",
    "start": "277600",
    "end": "283930"
  },
  {
    "text": "the normalization it's about point in time that's what I usually call it and there is an",
    "start": "283930",
    "end": "289900"
  },
  {
    "text": "interesting story that I can tell that highlights this the by the way this is",
    "start": "289900",
    "end": "294940"
  },
  {
    "text": "an actual story that happen in Israel where I live in work young woman after",
    "start": "294940",
    "end": "301990"
  },
  {
    "text": "getting shortly after getting married went with her husband to get a mortgage they wanted to buy a house and the bank",
    "start": "301990",
    "end": "309880"
  },
  {
    "text": "said as you would expect please bring us for payment slips to see what kind of",
    "start": "309880",
    "end": "315580"
  },
  {
    "text": "salary we'll get and we'll decide okay they did they brought the the needed",
    "start": "315580",
    "end": "322300"
  },
  {
    "text": "papers and they see that her last name she had her new supposedly last name for",
    "start": "322300",
    "end": "329919"
  },
  {
    "text": "the last five years what do you think has happened and she was married couple",
    "start": "329919",
    "end": "335710"
  },
  {
    "text": "of months before this event what do you think has happened normalize data there was a bug in a",
    "start": "335710",
    "end": "344530"
  },
  {
    "text": "payment system that the the personal details was normalized and as soon as",
    "start": "344530",
    "end": "350710"
  },
  {
    "text": "she changed her last name it was retroactively Li changed all the way since she started working there so",
    "start": "350710",
    "end": "357940"
  },
  {
    "text": "essentially when you think about Neda normalization you can think about it as",
    "start": "357940",
    "end": "363009"
  },
  {
    "text": "kind of snapshot of the situation you had during that specific time and more often than not this is welcome",
    "start": "363009",
    "end": "369669"
  },
  {
    "text": "especially for financial information for example if you think about invoices and",
    "start": "369669",
    "end": "374800"
  },
  {
    "text": "are in pretty much all countries there is a retention policy how much time you",
    "start": "374800",
    "end": "380530"
  },
  {
    "text": "need to keep the invoices and let's say invoice has is on the name of a company",
    "start": "380530",
    "end": "386199"
  },
  {
    "text": "named X right and let's say that two years after the invoice was created the",
    "start": "386199",
    "end": "393789"
  },
  {
    "text": "company is bought and sold and changes name so you does not make sense to",
    "start": "393789",
    "end": "399070"
  },
  {
    "text": "change the company name with the invoice right so the normalization as you can",
    "start": "399070",
    "end": "405849"
  },
  {
    "text": "see is not always the best thing to do so a couple of things that could also a",
    "start": "405849",
    "end": "412360"
  },
  {
    "text": "couple things that we can do about it this is something I've seen oft often",
    "start": "412360",
    "end": "417820"
  },
  {
    "text": "over overlooked various realms and various database such as ours a",
    "start": "417820",
    "end": "423790"
  },
  {
    "text": "shameless plug I know have an ability to do something that usually called future",
    "start": "423790",
    "end": "431230"
  },
  {
    "text": "queries which essentially accumulate several queries and group them in one",
    "start": "431230",
    "end": "436900"
  },
  {
    "text": "request this will sound using something like this will allow you to drastically",
    "start": "436900",
    "end": "442510"
  },
  {
    "text": "and often very drastically less than the amount of queries you do when you send",
    "start": "442510",
    "end": "452800"
  },
  {
    "text": "them to a database now let's see",
    "start": "452800",
    "end": "459520"
  },
  {
    "text": "something else let's think let's assume we have a simple task we want to fetch",
    "start": "459520",
    "end": "466500"
  },
  {
    "text": "stuff that was ordered let's say for last week right so we use entity",
    "start": "466500",
    "end": "472030"
  },
  {
    "text": "framework we open our Northwind model I'm pretty sure anyone hasn't seen it",
    "start": "472030",
    "end": "478570"
  },
  {
    "text": "can you raise the hand anyone didn't see the northen model okay so it's a demo",
    "start": "478570",
    "end": "485020"
  },
  {
    "text": "microsoft's demo database to just play around this microphone sequel server",
    "start": "485020",
    "end": "490650"
  },
  {
    "text": "essentially it's data set of a something like online store right so we fetch the",
    "start": "490650",
    "end": "498790"
  },
  {
    "text": "orders in fairly obvious manner and then if we take a look at the things we see",
    "start": "498790",
    "end": "506590"
  },
  {
    "text": "something like this again lots of queries just for relatively simple tasks",
    "start": "506590",
    "end": "512229"
  },
  {
    "text": "right what happened if you take a look",
    "start": "512229",
    "end": "517360"
  },
  {
    "text": "at the code we fetched for each order we iterate for essentially we are supposed",
    "start": "517360",
    "end": "523840"
  },
  {
    "text": "to do a left join that would to do what what you do that's what would you do if you create the database directly right",
    "start": "523840",
    "end": "532500"
  },
  {
    "text": "so essentially what we did we fetched each order separately and then query it",
    "start": "532500",
    "end": "540639"
  },
  {
    "text": "over and over again this is something called select and plus one problem it's",
    "start": "540639",
    "end": "546829"
  },
  {
    "text": "actually an on T pattern and this is another mistake that I've seen come over",
    "start": "546829",
    "end": "553430"
  },
  {
    "text": "and over again what exactly a mistake it's about the more an anti-pattern but",
    "start": "553430",
    "end": "558939"
  },
  {
    "text": "it's directly related to the huge amount of queries that we see quite often the",
    "start": "558939",
    "end": "566329"
  },
  {
    "text": "large amount of queries is something like you fetch all the categories and then fetch all the numbers in each",
    "start": "566329",
    "end": "572420"
  },
  {
    "text": "category you know this for example in Amazon website you have a amount of",
    "start": "572420",
    "end": "577459"
  },
  {
    "text": "items for each category or something like that iíve seen implementations that do",
    "start": "577459",
    "end": "583759"
  },
  {
    "text": "exactly that they do four for each loop and query the database in each loop right so if you take a look closer at",
    "start": "583759",
    "end": "592069"
  },
  {
    "text": "entity framework features this can be easily fixed you just tell the entity",
    "start": "592069",
    "end": "597620"
  },
  {
    "text": "for work that you want to fetch all the details so together with an order alright so if you take a look at the",
    "start": "597620",
    "end": "604160"
  },
  {
    "text": "traffic it will do something like this so instead of n queries where n is amount of orders you'll to make two",
    "start": "604160",
    "end": "610579"
  },
  {
    "text": "queries so essentially it's best to",
    "start": "610579",
    "end": "622209"
  },
  {
    "text": "invest time when you're dealing with databases in general to take a look at",
    "start": "622209",
    "end": "627709"
  },
  {
    "text": "the features that aimed at preventing antipatterns like select n plus 1 that's",
    "start": "627709",
    "end": "634639"
  },
  {
    "text": "not the only on T pattern so for sequel",
    "start": "634639",
    "end": "639889"
  },
  {
    "text": "servers is fairly it's it's it's fairly understandable just do a left join and",
    "start": "639889",
    "end": "645709"
  },
  {
    "text": "you make sure not to do too much queries for relational data for non-relational databases it's a bit more complicated as",
    "start": "645709",
    "end": "653120"
  },
  {
    "text": "and as I said it's about the questions you want to ask so such solutions depend",
    "start": "653120",
    "end": "658939"
  },
  {
    "text": "heavily on how do you model data for example this is a JSON document and by",
    "start": "658939",
    "end": "665209"
  },
  {
    "text": "document databases by the way I don't mean Word and PDFs I mean JSON files because that's the JSON document because",
    "start": "665209",
    "end": "673250"
  },
  {
    "text": "that's usually how you represent a variation of JSON or Beason for example it's how you represent",
    "start": "673250",
    "end": "679310"
  },
  {
    "text": "documents so this is an example of how you would model an order if you knew",
    "start": "679310",
    "end": "685880"
  },
  {
    "text": "that you will have to make something like that queries I've shown you earlier you just embed a collection of order",
    "start": "685880",
    "end": "693649"
  },
  {
    "text": "details inside of the document as I said the normalization right and if you think",
    "start": "693649",
    "end": "700790"
  },
  {
    "text": "about it it makes sense because joints and splitting the data during",
    "start": "700790",
    "end": "706490"
  },
  {
    "text": "normalization and in general the whole relational database till it was invented",
    "start": "706490",
    "end": "712370"
  },
  {
    "text": "back then when storage was extremely extremely expensive and developers time",
    "start": "712370",
    "end": "720350"
  },
  {
    "text": "was nothing in relation to hardware costs so relational model in general was",
    "start": "720350",
    "end": "727790"
  },
  {
    "text": "invented to solve problems that were that developed software had about 50",
    "start": "727790",
    "end": "733820"
  },
  {
    "text": "years ago so what do you expect in general the first thing that we should",
    "start": "733820",
    "end": "743089"
  },
  {
    "text": "remember when we look at databases the database API Sandow Rams and when you",
    "start": "743089",
    "end": "748550"
  },
  {
    "text": "talk about databases and think about that way functionality it's only facade",
    "start": "748550",
    "end": "753740"
  },
  {
    "text": "and very thin facade that behind it it has lots of moving parts and if you and",
    "start": "753740",
    "end": "761600"
  },
  {
    "text": "if you do not take into account some of the moving parts there are maybe gocha's",
    "start": "761600",
    "end": "768310"
  },
  {
    "text": "here is an example of a Gocha that is not in relational database let's take",
    "start": "768310",
    "end": "774440"
  },
  {
    "start": "769000",
    "end": "1019000"
  },
  {
    "text": "him on got that MongoDB so if we have a order like that and we want to you know",
    "start": "774440",
    "end": "781760"
  },
  {
    "text": "we need to query by city or by country in if anywhere close right we want to",
    "start": "781760",
    "end": "786860"
  },
  {
    "text": "filter by city over by country right so that's that's nice so what do we do we",
    "start": "786860",
    "end": "793640"
  },
  {
    "text": "take a look at and we see that we can make indexes by by this certain",
    "start": "793640",
    "end": "799970"
  },
  {
    "text": "fields right make sense so we create an index that will cover both of those",
    "start": "799970",
    "end": "807290"
  },
  {
    "text": "fields and then require it by city that's how",
    "start": "807290",
    "end": "813150"
  },
  {
    "text": "MongoDB quarry look like looks like quiet by city and we see that some that",
    "start": "813150",
    "end": "819390"
  },
  {
    "text": "it's go okay queries by index and everything is fine then we query by",
    "start": "819390",
    "end": "824810"
  },
  {
    "text": "country and then we see something like this now this is bad but before I",
    "start": "824810",
    "end": "833820"
  },
  {
    "text": "explain why this is bad let's take a look at this in some databases and I",
    "start": "833820",
    "end": "839790"
  },
  {
    "text": "mean no sequel databases index terms essentially prefixes so if you take to",
    "start": "839790",
    "end": "847290"
  },
  {
    "text": "make five fields by the way in relational databases is roughly the same if you take a look at the indexes you",
    "start": "847290",
    "end": "855030"
  },
  {
    "text": "will see that all the terms that you add the fields to so we index it in country",
    "start": "855030",
    "end": "860700"
  },
  {
    "text": "this this will be one one large key that that it's fields essentially just to each other so if we queried by city it",
    "start": "860700",
    "end": "869130"
  },
  {
    "text": "was a prefix everything was fine right and if we worried by the last part we",
    "start": "869130",
    "end": "874350"
  },
  {
    "text": "cannot find it because it's the last part so the MongoDB was forced to source by collection in other types of",
    "start": "874350",
    "end": "881910"
  },
  {
    "text": "databases and leucine leucine is a very",
    "start": "881910",
    "end": "888390"
  },
  {
    "text": "good example of such storage and it's routine it's not exactly databases storage engine by the way can you raise",
    "start": "888390",
    "end": "894480"
  },
  {
    "text": "the hand who heard about leucine leucine dotnet oh okay nice more people and",
    "start": "894480",
    "end": "901860"
  },
  {
    "text": "thought because we've seen is relatively unknown internet space leucine is",
    "start": "901860",
    "end": "907610"
  },
  {
    "text": "originated from Java actually in.net there is a port that's called as you",
    "start": "907610",
    "end": "913470"
  },
  {
    "text": "would expect to seen dotnet is a very good and very efficient querying engines indexing engine and if you have heard",
    "start": "913470",
    "end": "921090"
  },
  {
    "text": "about elasticsearch and solar they all usually seen behind the scenes rev in DB",
    "start": "921090",
    "end": "926370"
  },
  {
    "text": "also uses it but free v DB database so there is another type of index that",
    "start": "926370",
    "end": "932910"
  },
  {
    "text": "stores the indie feel separately and in this way for example in leucine based",
    "start": "932910",
    "end": "938610"
  },
  {
    "text": "query if you make an index by on those two fields it won't",
    "start": "938610",
    "end": "944630"
  },
  {
    "text": "matter if you query one or the another on both because it just fetches first",
    "start": "944630",
    "end": "951500"
  },
  {
    "text": "one then two then whatever fields and intersects or dozen is any needed set",
    "start": "951500",
    "end": "958070"
  },
  {
    "text": "based operations in them so in general collections collection",
    "start": "958070",
    "end": "963650"
  },
  {
    "text": "table scan it's a linear operation right so if you have a huge amount of data it",
    "start": "963650",
    "end": "970880"
  },
  {
    "text": "will cost you and it will be cost you a lot of time in production because that's",
    "start": "970880",
    "end": "976610"
  },
  {
    "text": "where you have lots of data Joel Spolsky one of the founders stock overflow",
    "start": "976610",
    "end": "983800"
  },
  {
    "text": "summarized it pretty well because abstractions and database is just an",
    "start": "983800",
    "end": "990170"
  },
  {
    "text": "abstraction for a bunch of algorithms for indexing and storing in querying there are all leaky and some abstraction",
    "start": "990170",
    "end": "999170"
  },
  {
    "text": "leaks can cause performance problems and often that's the des the root cause of",
    "start": "999170",
    "end": "1004650"
  },
  {
    "text": "when when when software roles do not take into account abstraction leaks that",
    "start": "1004650",
    "end": "1012130"
  },
  {
    "text": "that's when performance problems start with databases in general but not but",
    "start": "1012130",
    "end": "1019060"
  },
  {
    "start": "1019000",
    "end": "1292000"
  },
  {
    "text": "implementation details such as how indexes work is not the only thing I will talk about so another question take",
    "start": "1019060",
    "end": "1028270"
  },
  {
    "text": "a look at those queries and anyone wants to say if they are different or know",
    "start": "1028270",
    "end": "1034020"
  },
  {
    "text": "anyone under the hood I mean I know the",
    "start": "1034020",
    "end": "1039790"
  },
  {
    "text": "syntax is different anyone wants to try",
    "start": "1039790",
    "end": "1045010"
  },
  {
    "text": "and guess",
    "start": "1045010",
    "end": "1047400"
  },
  {
    "text": "very different databases okay so the",
    "start": "1053270",
    "end": "1060890"
  },
  {
    "text": "answer is no they are not really different because they all go to index ideally unless of course it's a table",
    "start": "1060890",
    "end": "1069650"
  },
  {
    "text": "scan but it's an edge case which should not happen in any case so in general",
    "start": "1069650",
    "end": "1075170"
  },
  {
    "text": "indexes work like this so if you have some data to index so you just",
    "start": "1075170",
    "end": "1081550"
  },
  {
    "text": "essentially write for each search term you each you write a pointer where it happens right of course essentially very",
    "start": "1081550",
    "end": "1091970"
  },
  {
    "text": "very simple idea sometimes it's called reverse index I'm not sure why but anyway and indexes are usually",
    "start": "1091970",
    "end": "1102050"
  },
  {
    "text": "implemented as a three typically because",
    "start": "1102050",
    "end": "1107180"
  },
  {
    "text": "sometimes it's other data structures are such astray and looking up the indexes",
    "start": "1107180",
    "end": "1114260"
  },
  {
    "text": "logarithm complexity why do I try is a key length complexity so if you need",
    "start": "1114260",
    "end": "1120680"
  },
  {
    "text": "something more how high-performance is a nice thing to use and if we take into",
    "start": "1120680",
    "end": "1126740"
  },
  {
    "text": "account a relatively simple query like this and this is a revenue bigquery for",
    "start": "1126740",
    "end": "1131930"
  },
  {
    "text": "those who and you most likely don't recognize the syntax is serving the bigquery yeah the complexity even for",
    "start": "1131930",
    "end": "1140390"
  },
  {
    "text": "such trivial query and in any database this will be trivial query is not so",
    "start": "1140390",
    "end": "1146330"
  },
  {
    "text": "trivial right so we search for one field",
    "start": "1146330",
    "end": "1151520"
  },
  {
    "text": "write that search for another then we need to intersect them right so essentially it's a linear operation",
    "start": "1151520",
    "end": "1156800"
  },
  {
    "text": "intersection so it's about the size of the query and for relational databases",
    "start": "1156800",
    "end": "1162920"
  },
  {
    "text": "this is even more interesting because in addition to where clauses you add a cost",
    "start": "1162920",
    "end": "1169610"
  },
  {
    "text": "of joins which I mentioned already they were costly but are very very costly",
    "start": "1169610",
    "end": "1174740"
  },
  {
    "text": "especially especially for large databases and in production you only have a lot of databases if you don't",
    "start": "1174740",
    "end": "1182960"
  },
  {
    "text": "then you don't care about performance it will be fast anyway now and usually queries in production",
    "start": "1182960",
    "end": "1193110"
  },
  {
    "text": "look like this can you think about the",
    "start": "1193110",
    "end": "1198620"
  },
  {
    "text": "complexity of something like this and I'm not talking about where clauses which only add to complexity so",
    "start": "1198620",
    "end": "1207080"
  },
  {
    "text": "essentially will have a complexity usually Oh too much so what what can we",
    "start": "1207080",
    "end": "1217320"
  },
  {
    "text": "do about it usually and the best thing to do is proper indexing in relational databases is more because they are more",
    "start": "1217320",
    "end": "1224970"
  },
  {
    "text": "prevalent so it's more more understandable what we should do we should properly set up indexes we should",
    "start": "1224970",
    "end": "1232050"
  },
  {
    "text": "optimize queries we should not do any unnecessary joints that's and in",
    "start": "1232050",
    "end": "1238530"
  },
  {
    "text": "non-sequel except for proper modeling which we talk about indexing planning is",
    "start": "1238530",
    "end": "1246720"
  },
  {
    "text": "extremely important because if you don't plan indexes properly you either you can",
    "start": "1246720",
    "end": "1251730"
  },
  {
    "text": "end up for example whose collection scans for databases was it were indexes our sensually search by prefix or you",
    "start": "1251730",
    "end": "1259230"
  },
  {
    "text": "can have inefficient indexes for databases that run indexes in a background for example CouchDB fanned",
    "start": "1259230",
    "end": "1265170"
  },
  {
    "text": "mistake and then they run indexes synchronously in separate threads so i've seen data and we also do that in",
    "start": "1265170",
    "end": "1271890"
  },
  {
    "text": "ravi DB so for example I've seen indexes and sorry I have seen databases with 300",
    "start": "1271890",
    "end": "1278340"
  },
  {
    "text": "indexes that run in the background and and considering that thread pools are",
    "start": "1278340",
    "end": "1284460"
  },
  {
    "text": "finite what's the performance they think of indexing was not very good so we can",
    "start": "1284460",
    "end": "1292980"
  },
  {
    "start": "1292000",
    "end": "1379000"
  },
  {
    "text": "conclude that complexity is also something that obstructed by databases and complexity is you should at least",
    "start": "1292980",
    "end": "1302510"
  },
  {
    "text": "invest some thought about complexity of queries and what you do is databases because more often than not just",
    "start": "1302510",
    "end": "1310920"
  },
  {
    "text": "reducing ten joins to three join can improve order of magnitude I remember on",
    "start": "1310920",
    "end": "1317490"
  },
  {
    "text": "my first job I had a Hugh a huge sequel query with about",
    "start": "1317490",
    "end": "1323610"
  },
  {
    "text": "30-something joins which was running about four minutes and I reduced it to",
    "start": "1323610",
    "end": "1330150"
  },
  {
    "text": "three joins and it was running in 300 milliseconds so that's quite a change",
    "start": "1330150",
    "end": "1336590"
  },
  {
    "text": "yeah after some index optimizations also but you understand what I mean now let's",
    "start": "1336590",
    "end": "1345180"
  },
  {
    "text": "take a look at another interesting thing",
    "start": "1345180",
    "end": "1349610"
  },
  {
    "text": "this is an actually this is an actual support call that they took a client had",
    "start": "1350390",
    "end": "1359060"
  },
  {
    "text": "multiple tenants or databases on one server right I had no issue with",
    "start": "1359060",
    "end": "1364970"
  },
  {
    "text": "hardware so no limits on memory and stuff like that and it took for a very",
    "start": "1364970",
    "end": "1372420"
  },
  {
    "text": "long time to load the process and the client thought it was hanging up so a",
    "start": "1372420",
    "end": "1379320"
  },
  {
    "start": "1379000",
    "end": "1442000"
  },
  {
    "text": "question is can you think what what what will be the root cause of something like this anyone wants to try no one well the",
    "start": "1379320",
    "end": "1392250"
  },
  {
    "text": "answer is very simple when you have lots of databases and you start up the server",
    "start": "1392250",
    "end": "1399410"
  },
  {
    "text": "they all start reading from the hard drive because they need to do some memory mapping some fetching from from",
    "start": "1399410",
    "end": "1406260"
  },
  {
    "text": "database and memory mapping which is usually what databases use starts",
    "start": "1406260",
    "end": "1412650"
  },
  {
    "text": "fetching pages to memory and obviously you saturate I'll Drive",
    "start": "1412650",
    "end": "1418950"
  },
  {
    "text": "and the client had it's a bit more than 200 databases on the same storage which",
    "start": "1418950",
    "end": "1426150"
  },
  {
    "text": "usually usually works fine because they were accessed constantly but for a very short period of time but during load up",
    "start": "1426150",
    "end": "1432960"
  },
  {
    "text": "all of them in the same time started loading so you can imagine the house",
    "start": "1432960",
    "end": "1442560"
  },
  {
    "start": "1442000",
    "end": "1864000"
  },
  {
    "text": "storage was worse straining another thing that more often than not people",
    "start": "1442560",
    "end": "1451140"
  },
  {
    "text": "when they look at the databases they do not take into account",
    "start": "1451140",
    "end": "1458600"
  },
  {
    "text": "environment environmental constraints such as storage such as Network such as",
    "start": "1459710",
    "end": "1467990"
  },
  {
    "text": "even memory or or CPU threads whatever is finite and databases are not magic",
    "start": "1467990",
    "end": "1478490"
  },
  {
    "text": "magic black boxes and they will struggle",
    "start": "1478490",
    "end": "1483530"
  },
  {
    "text": "so here's another riddle why do you",
    "start": "1483530",
    "end": "1489780"
  },
  {
    "text": "think this would happen query that has not much results core results right and it takes very long",
    "start": "1489780",
    "end": "1497970"
  },
  {
    "text": "time to complete let's say five seconds I don't remember the numbers exactly but 500 looks like a very good number so",
    "start": "1497970",
    "end": "1507350"
  },
  {
    "text": "anyone wants to try and guess the answer is very simple",
    "start": "1508160",
    "end": "1513630"
  },
  {
    "text": "actually yes the what good guess but",
    "start": "1513630",
    "end": "1521220"
  },
  {
    "text": "it's even simpler than that anyone else",
    "start": "1521220",
    "end": "1526669"
  },
  {
    "text": "no no it was it was the equivalent of a select top hundred no scanning",
    "start": "1531290",
    "end": "1538350"
  },
  {
    "text": "whatsoever was involved in this anyone else what yep",
    "start": "1538350",
    "end": "1546770"
  },
  {
    "text": "did it was a document database and each document was tens of megabytes of size",
    "start": "1546770",
    "end": "1553620"
  },
  {
    "text": "and to be more exact network bandwidth but that's the right idea network",
    "start": "1553620",
    "end": "1562710"
  },
  {
    "text": "bandwidth so as you can imagine hundred documents each one each between five and",
    "start": "1562710",
    "end": "1569700"
  },
  {
    "text": "ten megabytes of JSON would would cost",
    "start": "1569700",
    "end": "1576120"
  },
  {
    "text": "something like this because the time that was spent on the server actually fetching the query was in the in the",
    "start": "1576120",
    "end": "1582840"
  },
  {
    "text": "milliseconds that dozens sometimes in the hundreds milliseconds now regarding large",
    "start": "1582840",
    "end": "1592140"
  },
  {
    "text": "document sizes there is one more thing that usually when you take a look at no",
    "start": "1592140",
    "end": "1597180"
  },
  {
    "text": "sequel database which is a document or graphs because graphs are usually document databases with relationships",
    "start": "1597180",
    "end": "1603330"
  },
  {
    "text": "that are first-class citizen but under the hood usually graph databases have document that the basis is how they do",
    "start": "1603330",
    "end": "1611940"
  },
  {
    "text": "they do serialization it may sound trivial but serialization",
    "start": "1611940",
    "end": "1618060"
  },
  {
    "text": "actually is a very big problem to tackle think about like this you have a",
    "start": "1618060",
    "end": "1623790"
  },
  {
    "text": "document which is of unknown form or shape right JSON with a known form shape",
    "start": "1623790",
    "end": "1631140"
  },
  {
    "text": "need to go over all its fields recursively right you need to do lots of",
    "start": "1631140",
    "end": "1636360"
  },
  {
    "text": "allocations you need to do lots of you need to do lots of recursion because",
    "start": "1636360",
    "end": "1643740"
  },
  {
    "text": "sometimes the recursion is very deep right so I have seen and in our database",
    "start": "1643740",
    "end": "1652920"
  },
  {
    "text": "for example before we changed how we do things I've seen just the server's Asian",
    "start": "1652920",
    "end": "1659460"
  },
  {
    "text": "self take about between 30 and 40 percent of application time all right this is a lot and I'm not talking about",
    "start": "1659460",
    "end": "1666600"
  },
  {
    "text": "garbage collection pauses that are caused by excessive allocations and we were using json dot net which is variant",
    "start": "1666600",
    "end": "1673680"
  },
  {
    "text": "well-known a very performant library but it makes lots of allocations I mean lots",
    "start": "1673680",
    "end": "1678720"
  },
  {
    "text": "of them so one of the solutions that usually database vendors take they use",
    "start": "1678720",
    "end": "1685950"
  },
  {
    "text": "some sort of pointer arithmetic to get to the point so for example we implemented our own JSON format that",
    "start": "1685950",
    "end": "1693120"
  },
  {
    "text": "uses that stores JSON with special table kind of like fire allocation table but",
    "start": "1693120",
    "end": "1699480"
  },
  {
    "text": "stores the offsets of each property each field inside the JSON and this way we",
    "start": "1699480",
    "end": "1705300"
  },
  {
    "text": "can access the fields without allocating memory in our databases that are doing",
    "start": "1705300",
    "end": "1710880"
  },
  {
    "text": "something similar from what I've seen is MongoDB for example so size does matter",
    "start": "1710880",
    "end": "1717360"
  },
  {
    "text": "also for document document sizes not only for net but also for how databases do things and",
    "start": "1717360",
    "end": "1725480"
  },
  {
    "text": "sir ization from what I've seen is something that not many people think",
    "start": "1725480",
    "end": "1731159"
  },
  {
    "text": "about it and quite quite often it's critical for any any application so this",
    "start": "1731159",
    "end": "1740999"
  },
  {
    "text": "is something that I've seen do a lot of good when you deal with databases with",
    "start": "1740999",
    "end": "1747989"
  },
  {
    "text": "any database what I will usually do I take a look at its traffic's at certain",
    "start": "1747989",
    "end": "1754019"
  },
  {
    "text": "times during stress testing do a load testing if possible also during",
    "start": "1754019",
    "end": "1759210"
  },
  {
    "text": "production because there is no way around it database is a application that has a",
    "start": "1759210",
    "end": "1765899"
  },
  {
    "text": "client in a server right and again usage patterns of databases are very and",
    "start": "1765899",
    "end": "1773929"
  },
  {
    "text": "usually I'd mistrust any bench for example I usually mistrust by any benchmarking benchmarking that compare",
    "start": "1773929",
    "end": "1781950"
  },
  {
    "text": "between databases because some databases perform well in certain use case another",
    "start": "1781950",
    "end": "1788460"
  },
  {
    "text": "use case the dark rap and vice-versa so don't believe benchmarks don't believe",
    "start": "1788460",
    "end": "1796039"
  },
  {
    "text": "even your eyes use tools to prove to prove that you are doing good things",
    "start": "1796039",
    "end": "1802559"
  },
  {
    "text": "that you have known any inefficiency that your queries are doing fine because",
    "start": "1802559",
    "end": "1809029"
  },
  {
    "text": "for example databases that use HTTP I can change this plug but I work on the",
    "start": "1809029",
    "end": "1816749"
  },
  {
    "text": "database so I'm biased reven DB has uses REST API so you can you can debug latencies and what what",
    "start": "1816749",
    "end": "1825210"
  },
  {
    "text": "the client-side sends your fiddler but other databases have profilers or other",
    "start": "1825210",
    "end": "1830460"
  },
  {
    "text": "database I have tools to inspect both the queries and latencies and",
    "start": "1830460",
    "end": "1835590"
  },
  {
    "text": "performance of network based component so this is something that I cannot",
    "start": "1835590",
    "end": "1840720"
  },
  {
    "text": "stress enough this I realize it may sound trivial but I've seen often people",
    "start": "1840720",
    "end": "1846570"
  },
  {
    "text": "just don't do this and usually I will even sing couple of times people do not",
    "start": "1846570",
    "end": "1853320"
  },
  {
    "text": "set up even monitoring to see if there I have problems or inefficiencies in the network which I",
    "start": "1853320",
    "end": "1859049"
  },
  {
    "text": "cannot understand why but anyway another",
    "start": "1859049",
    "end": "1865500"
  },
  {
    "start": "1864000",
    "end": "2230000"
  },
  {
    "text": "thing that I have mentioned it before but resources this is something that we",
    "start": "1865500",
    "end": "1873600"
  },
  {
    "text": "need to mention explicitly and I will explain as by an example how does it how",
    "start": "1873600",
    "end": "1882000"
  },
  {
    "text": "does it work so for example we have very nice feature which is where m 11 DB so",
    "start": "1882000",
    "end": "1891480"
  },
  {
    "text": "you can get real-time notifications to data that you subscribe on so if some",
    "start": "1891480",
    "end": "1896760"
  },
  {
    "text": "data changes the subscriber client will get notification that something was that",
    "start": "1896760",
    "end": "1904049"
  },
  {
    "text": "something happened right so this sounds nice and you can implement lots of nice",
    "start": "1904049",
    "end": "1909120"
  },
  {
    "text": "things with something like this and we're not the only database that has something like this for example again",
    "start": "1909120",
    "end": "1916049"
  },
  {
    "text": "MongoDB has something similar and such",
    "start": "1916049",
    "end": "1921570"
  },
  {
    "text": "feature unfortunately gets overlooked a lot and I'm sure you can even now see",
    "start": "1921570",
    "end": "1929160"
  },
  {
    "text": "how it can help you with implementing",
    "start": "1929160",
    "end": "1934410"
  },
  {
    "text": "stuff but this this is a real case that we have seen there is a support call a",
    "start": "1934410",
    "end": "1943160"
  },
  {
    "text": "production website was opening once per",
    "start": "1943160",
    "end": "1948480"
  },
  {
    "text": "page load a subscription so what do you",
    "start": "1948480",
    "end": "1954480"
  },
  {
    "text": "think happened what what what's the consequence of using something like this until rate that's nice right you have a",
    "start": "1954480",
    "end": "1960780"
  },
  {
    "text": "mechanism that will notify you in real time that something happens and you can update your UI and we will and you can",
    "start": "1960780",
    "end": "1969390"
  },
  {
    "text": "to notification something has changed right what do you think and can you try",
    "start": "1969390",
    "end": "1975150"
  },
  {
    "text": "to guess what would happen if something opens once per page load",
    "start": "1975150",
    "end": "1982669"
  },
  {
    "text": "one of the things socket exhaustion that's actually what happened with that client but that's not the only thing",
    "start": "1984290",
    "end": "1991190"
  },
  {
    "text": "depending on load some more things that can happen it was soaking exhaustion",
    "start": "1991190",
    "end": "1998570"
  },
  {
    "text": "because because it opens TCP socket from the client to the server opens",
    "start": "1998570",
    "end": "2004300"
  },
  {
    "text": "persistent TCP socket which is constantly kept alive right and on the server side it opens a special thread",
    "start": "2004300",
    "end": "2010980"
  },
  {
    "text": "when the subscription is activated because it's not active all the time",
    "start": "2010980",
    "end": "2016470"
  },
  {
    "text": "that that and the thread listens to the changes sounds simple right but thread",
    "start": "2016470",
    "end": "2023710"
  },
  {
    "text": "pool threads are also something that is finite and thread pool trades are used",
    "start": "2023710",
    "end": "2029020"
  },
  {
    "text": "depending on a database can be used for example for accepting requests so a database would exhaust the thread pool",
    "start": "2029020",
    "end": "2035590"
  },
  {
    "text": "can just refuse to get to request to accept queries right and it can happen",
    "start": "2035590",
    "end": "2042310"
  },
  {
    "text": "just because under some load spike and then under very bad scenario it can even",
    "start": "2042310",
    "end": "2049080"
  },
  {
    "text": "trigger some other failures and stuff start time mounting and it will be very",
    "start": "2049080",
    "end": "2055720"
  },
  {
    "text": "nice calling 3m now in general special",
    "start": "2055720",
    "end": "2063790"
  },
  {
    "text": "care should be taken to look at Ted pool connections of sockets so whatever",
    "start": "2063790",
    "end": "2070139"
  },
  {
    "text": "communication protocol your database had with the client and bottlenecks",
    "start": "2070140",
    "end": "2077860"
  },
  {
    "text": "environmental bottlenecks as well we have mentioned was storage and network bottlenecks those usually pop up with",
    "start": "2077860",
    "end": "2084570"
  },
  {
    "text": "support calls and usually pop up when you have inefficiencies in in",
    "start": "2084570",
    "end": "2089740"
  },
  {
    "text": "performance so things for example here",
    "start": "2089740",
    "end": "2095020"
  },
  {
    "text": "here's a nice example of a storage bottleneck what it was it wasn't apparent right we had a client that had",
    "start": "2095020",
    "end": "2103450"
  },
  {
    "text": "a cluster of databases and the cluster of databases was using son SSD drives",
    "start": "2103450",
    "end": "2111100"
  },
  {
    "text": "very fast it was nice right and the we",
    "start": "2111100",
    "end": "2116650"
  },
  {
    "text": "implemented cluster using protocol and this means that and this",
    "start": "2116650",
    "end": "2123570"
  },
  {
    "text": "means that when there is there is a need for for some storage capacity when",
    "start": "2123570",
    "end": "2129180"
  },
  {
    "text": "writing because it stores a state machine because consider protocol is a protocol to is a way to propagate a",
    "start": "2129180",
    "end": "2137520"
  },
  {
    "text": "state over the cluster and so all the cluster agrees on certain state right so",
    "start": "2137520",
    "end": "2144360"
  },
  {
    "text": "and this state is persisted and the cluster was failing for at random times",
    "start": "2144360",
    "end": "2153750"
  },
  {
    "text": "right and then the interesting thing is that they usually did everything was",
    "start": "2153750",
    "end": "2162120"
  },
  {
    "text": "very fast right and during peak times the cluster sometimes failed during peak",
    "start": "2162120",
    "end": "2168390"
  },
  {
    "text": "traffic what happened was the Sun drive all the cluster all sitting on shared",
    "start": "2168390",
    "end": "2174000"
  },
  {
    "text": "SSDs so when one of the nodes was overloaded all the other nodes had much",
    "start": "2174000",
    "end": "2180450"
  },
  {
    "text": "less storage capacity to work with and disk latency fell fell fell momentarily",
    "start": "2180450",
    "end": "2187530"
  },
  {
    "text": "and that caused the race condition to make stuff fail now if I didn't know",
    "start": "2187530",
    "end": "2195390"
  },
  {
    "text": "what happens under the hood if I didn't know for example how the clustering protocol worked and if I didn't know how",
    "start": "2195390",
    "end": "2201720"
  },
  {
    "text": "the underlying things worked I I'm not so sure if I could have found the",
    "start": "2201720",
    "end": "2208200"
  },
  {
    "text": "solution to and at least the root cause to do this issue so it's it's very",
    "start": "2208200",
    "end": "2215190"
  },
  {
    "text": "important to take a look at those resources to take a look at how they're used by by your database whatever",
    "start": "2215190",
    "end": "2221400"
  },
  {
    "text": "database you use and just invest some time into peeking under the hood of",
    "start": "2221400",
    "end": "2227880"
  },
  {
    "text": "databases now there is another finite",
    "start": "2227880",
    "end": "2234780"
  },
  {
    "start": "2230000",
    "end": "2531000"
  },
  {
    "text": "resource it's not really a resource right but it's finite already",
    "start": "2234780",
    "end": "2241820"
  },
  {
    "text": "concurrency now about concurrency there",
    "start": "2241820",
    "end": "2247920"
  },
  {
    "text": "is some times I sometimes see people who just not so sure what it",
    "start": "2247920",
    "end": "2255600"
  },
  {
    "text": "means so I will at least explain a little bit before optimistic concurrency",
    "start": "2255600",
    "end": "2260880"
  },
  {
    "text": "is very simple you assume that you won't have too much contention on your data so",
    "start": "2260880",
    "end": "2266610"
  },
  {
    "text": "you have very small log duration only and if you even have logs all you do it",
    "start": "2266610",
    "end": "2273300"
  },
  {
    "text": "with kind x time pro version or whatever buzz word / term your database users and",
    "start": "2273300",
    "end": "2281070"
  },
  {
    "text": "essentially it's it comes down to update this record if nobody has updated the",
    "start": "2281070",
    "end": "2288690"
  },
  {
    "text": "CSI since I've taken it to update right so a a update request comes takes the",
    "start": "2288690",
    "end": "2298410"
  },
  {
    "text": "query takes the record does whatever needs to do with it transaction for",
    "start": "2298410",
    "end": "2303510"
  },
  {
    "text": "example and then tries to write it down and sees if nobody has updated it in the",
    "start": "2303510",
    "end": "2309120"
  },
  {
    "text": "in the meantime right so that's until very nice but what with what if we have",
    "start": "2309120",
    "end": "2320730"
  },
  {
    "text": "several transactions and one transactions very very short and we have",
    "start": "2320730",
    "end": "2326790"
  },
  {
    "text": "lots of other transactions which edit the same data or try to edit and are",
    "start": "2326790",
    "end": "2332910"
  },
  {
    "text": "longer what do you think will happen it",
    "start": "2332910",
    "end": "2340050"
  },
  {
    "text": "del just gets all big right and now multiply it by thousand let's say you",
    "start": "2340050",
    "end": "2345510"
  },
  {
    "text": "have thousands requests per second it's reasonable load for for for a website",
    "start": "2345510",
    "end": "2351290"
  },
  {
    "text": "and you will see why optimistic concurrency is optimized only when you",
    "start": "2351290",
    "end": "2358140"
  },
  {
    "text": "have very small contention to the data right if you have lots of contention",
    "start": "2358140",
    "end": "2367320"
  },
  {
    "text": "then you should go to pessimistic concurrency which is essentially what",
    "start": "2367320",
    "end": "2373770"
  },
  {
    "text": "often happened in relational databases you have a transaction that changes some row so it locks the row you have",
    "start": "2373770",
    "end": "2380940"
  },
  {
    "text": "sometimes the lock is escalates on table for example so it's more geared towards lots of",
    "start": "2380940",
    "end": "2388960"
  },
  {
    "text": "contention and rolling back and retry and transaction is much much much more",
    "start": "2388960",
    "end": "2394840"
  },
  {
    "text": "expensive than just waiting for it to win decide the database now the interesting part that each such query is",
    "start": "2394840",
    "end": "2402760"
  },
  {
    "text": "a thread usually it's taken from tadpole now what will happen if you have exhausted your thread pool for example",
    "start": "2402760",
    "end": "2409300"
  },
  {
    "text": "by using some other feature that is also straight pool you'll get very interesting things were very interesting",
    "start": "2409300",
    "end": "2416230"
  },
  {
    "text": "balance because tried Foley's as I mentioned used by several multiple",
    "start": "2416230",
    "end": "2422760"
  },
  {
    "text": "features of single database so",
    "start": "2422760",
    "end": "2428670"
  },
  {
    "text": "essentially I like chart to chart stuff",
    "start": "2428670",
    "end": "2433810"
  },
  {
    "text": "so this is something that can summarize this to meet pessimistic and optimistic concurrency it's a trade-off and there",
    "start": "2433810",
    "end": "2442960"
  },
  {
    "text": "is no correct way of going about concurrency or thinking about it it all depends on your use cases and on stuff",
    "start": "2442960",
    "end": "2451930"
  },
  {
    "text": "that that you do on how do you need to query database how did you do updates so",
    "start": "2451930",
    "end": "2459240"
  },
  {
    "text": "in general you shouldn't keep transaction open for too long because",
    "start": "2459240",
    "end": "2465570"
  },
  {
    "text": "very long transaction they will either keep other or lock data and keep others",
    "start": "2465570",
    "end": "2471190"
  },
  {
    "text": "from updating it or they will cause others to increase the change that they",
    "start": "2471190",
    "end": "2476589"
  },
  {
    "text": "will get rolled back because because of the whatever other short transaction",
    "start": "2476589",
    "end": "2483220"
  },
  {
    "text": "updated the data so this is it and I'll I'd love to answer some",
    "start": "2483220",
    "end": "2491770"
  },
  {
    "text": "questions",
    "start": "2491770",
    "end": "2493800"
  },
  {
    "text": "yeah there is a link to open to our source code if you be curious again you're invited to take a look - rayvin",
    "start": "2501869",
    "end": "2509309"
  },
  {
    "text": "DB source code anyone questions",
    "start": "2509309",
    "end": "2515299"
  },
  {
    "text": "so I go this is it thank you",
    "start": "2524380",
    "end": "2529650"
  }
]