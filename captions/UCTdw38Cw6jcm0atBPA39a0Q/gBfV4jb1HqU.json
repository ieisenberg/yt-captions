[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "all right it's a time I think there's still people coming in just come on come",
    "start": "1250",
    "end": "7109"
  },
  {
    "text": "on in there's still room for everyone but thank you all for coming my name is Mark seaman and if you want",
    "start": "7109",
    "end": "13980"
  },
  {
    "text": "to know more about me there's information they unblocked uploaded DK and you can follow me on Twitter if you're interested in figuring out what I",
    "start": "13980",
    "end": "20609"
  },
  {
    "text": "have to say so what I'm going to do today is that I'm going to try to answer",
    "start": "20609",
    "end": "25619"
  },
  {
    "start": "24000",
    "end": "127000"
  },
  {
    "text": "a couple of frequently asked questions and I'm gonna ask answer two different frequently asked questions and it turns",
    "start": "25619",
    "end": "32550"
  },
  {
    "text": "out at first glance if you see both of those questions you know side by side it's not entirely clear you know why",
    "start": "32550",
    "end": "39780"
  },
  {
    "text": "they're related but it turns out that they are right but what am I going to do here I'm gonna give the talk in three",
    "start": "39780",
    "end": "45840"
  },
  {
    "text": "parts so in the first act of this three-part talk I'm gonna talk about the",
    "start": "45840",
    "end": "52559"
  },
  {
    "text": "first frequently asked question and sort of try to explain why it makes sense to ask that question but then I'm not gonna",
    "start": "52559",
    "end": "59820"
  },
  {
    "text": "answer the question because we need some more we need to learn some more stuff before we can actually you know sensibly",
    "start": "59820",
    "end": "65610"
  },
  {
    "text": "ask that answer that question so in part 2 I'm gonna put aside the first question",
    "start": "65610",
    "end": "71189"
  },
  {
    "text": "for a while and then look at a different question and then we go all the way through and try to figure out how to",
    "start": "71189",
    "end": "77189"
  },
  {
    "text": "address that question and then then in part three we've learned enough so that we can come back to the first question",
    "start": "77189",
    "end": "83040"
  },
  {
    "text": "from part one and answer that in a satisfactory manner so that's the that's",
    "start": "83040",
    "end": "89070"
  },
  {
    "text": "the plan so three three acts of the talk if you will so the first frequently asked",
    "start": "89070",
    "end": "94259"
  },
  {
    "text": "question that I'll try to address here is how do I combine dependency injection with a sink and a weight and that seems",
    "start": "94259",
    "end": "103439"
  },
  {
    "text": "easy enough but then with a little extra qualification here without leaky",
    "start": "103439",
    "end": "108899"
  },
  {
    "text": "abstractions and in order to I explain you know why this even is interesting to",
    "start": "108899",
    "end": "114570"
  },
  {
    "text": "talk about will will need to look at some code examples in order to figure out okay what do I even mean by this so",
    "start": "114570",
    "end": "121880"
  },
  {
    "text": "whenever I want to show you code examples one of my favorite scenarios is that you have to imagine that you want",
    "start": "121880",
    "end": "129149"
  },
  {
    "text": "to develop an online restaurant reservation system this is sort of my favorite scenario I",
    "start": "129149",
    "end": "134780"
  },
  {
    "text": "know all of these you know services already exist out there but we could just pretend that the world needs",
    "start": "134780",
    "end": "140000"
  },
  {
    "text": "another one of those so it's one of those things where you know you want to make a reservation at a restaurant so",
    "start": "140000",
    "end": "145909"
  },
  {
    "text": "you fill in a form on the website or whatever and you know once you filled in all the all the details you press the",
    "start": "145909",
    "end": "152150"
  },
  {
    "text": "submit button and the UI creates a little JSON document and that JSON document gets you know HTTP posted",
    "start": "152150",
    "end": "158239"
  },
  {
    "text": "against the web server somewhere and the code that we're gonna look at is the server-side code that handles that",
    "start": "158239",
    "end": "165349"
  },
  {
    "text": "incoming requests for a reservation so we'll start at the domain model and at",
    "start": "165349",
    "end": "171680"
  },
  {
    "start": "169000",
    "end": "796000"
  },
  {
    "text": "the domain model the central decision is embodied in a method that looks like this so it's called try accept and it",
    "start": "171680",
    "end": "179269"
  },
  {
    "text": "takes a reservation as input so the reservation is just that JSON document or the data from that JSON document you",
    "start": "179269",
    "end": "185030"
  },
  {
    "text": "know the the dates the quantity the name the email address and the return value",
    "start": "185030",
    "end": "190489"
  },
  {
    "text": "is an honorable int so what does that mean well if it's an int that's a reservation ID and if you have a",
    "start": "190489",
    "end": "197569"
  },
  {
    "text": "reservation ID that means you have a reservation you can use that reservation ID to cancel your reservation or make",
    "start": "197569",
    "end": "203239"
  },
  {
    "text": "changes to it or whatever so that means you have a reservation if you don't have an ID if that's null it means you don't",
    "start": "203239",
    "end": "210379"
  },
  {
    "text": "have a reservation so that's pretty obvious I suppose so there are reasons",
    "start": "210379",
    "end": "215989"
  },
  {
    "text": "why sometimes we can't accept a request for a reservation and we'll look at that in a moment now if we're using",
    "start": "215989",
    "end": "221750"
  },
  {
    "text": "dependency injection we could you know inject various different dependencies on the class that has a method like this so",
    "start": "221750",
    "end": "229310"
  },
  {
    "text": "for example we could inject a repository and just make it available as a as a",
    "start": "229310",
    "end": "234680"
  },
  {
    "text": "read-only property like this so on you notice that I'm showing you members of classes and I'll show you some",
    "start": "234680",
    "end": "241400"
  },
  {
    "text": "implementation code in a moment for the try/except method but I'm not showing you the surrounding class and that's",
    "start": "241400",
    "end": "247250"
  },
  {
    "text": "basically just because I don't have space for that also I'm not showing you the constructor that receives that",
    "start": "247250",
    "end": "252709"
  },
  {
    "text": "repository and saves send property for later use its 2019 and I somehow naively",
    "start": "252709",
    "end": "260389"
  },
  {
    "text": "expect that people understand how constructor injection looks you know now in 2019 so I'm not showing",
    "start": "260389",
    "end": "266960"
  },
  {
    "text": "you that but we if we have a repository like this we can query it so we can say",
    "start": "266960",
    "end": "272930"
  },
  {
    "text": "let me know give me all the reservations for that reservation date and that's just some some reservations and we can",
    "start": "272930",
    "end": "278840"
  },
  {
    "text": "do a sum over all the quantities and that gives me a number of reserved seats so that those are all the seats that are",
    "start": "278840",
    "end": "284990"
  },
  {
    "text": "already reserved for that particular date and if we also know that capacity",
    "start": "284990",
    "end": "290120"
  },
  {
    "text": "of the restaurant we can make a business decision so if we if the remaining capacity is too little we have to return",
    "start": "290120",
    "end": "297020"
  },
  {
    "text": "null so this is the scenario where we have to say well sorry we really like to accept your reservation but we can't",
    "start": "297020",
    "end": "303260"
  },
  {
    "text": "because we're sold out or we at least we've sold out of the tables of the size that you need but if we get past this",
    "start": "303260",
    "end": "311600"
  },
  {
    "text": "though we can you know core repository create and that will you know create the",
    "start": "311600",
    "end": "316910"
  },
  {
    "text": "reservation in the database and repository create also returns an integer and we're just gonna return that",
    "start": "316910",
    "end": "322550"
  },
  {
    "text": "int so right now there's no asynchrony anywhere to be seen and all I'm just",
    "start": "322550",
    "end": "328370"
  },
  {
    "text": "gonna go through you know the standard scenario first and then we'll look at you know what what would what would it",
    "start": "328370",
    "end": "334160"
  },
  {
    "text": "look like to add asynchrony to this so so this is our you know basic domain",
    "start": "334160",
    "end": "340789"
  },
  {
    "text": "model and if we want to you know in embody that in some sort of type we could create an interface called Maitre",
    "start": "340789",
    "end": "347450"
  },
  {
    "text": "D' that's sort of a half that defines this method now Maitre D' is basically just restaurant jargon for the head",
    "start": "347450",
    "end": "353210"
  },
  {
    "text": "waiter and it's a it's a role in typical restaurants that sort of makes decision on you know making sure that everyone is",
    "start": "353210",
    "end": "360050"
  },
  {
    "text": "at the right table and stuff like that so it's just you know domain driven design if you will once we have that we",
    "start": "360050",
    "end": "367190"
  },
  {
    "text": "also need to write the code that actually receives the HTTP request and creates a response so that's typically",
    "start": "367190",
    "end": "373940"
  },
  {
    "text": "something you put in a controller and in this case we have a method called post that gets called whenever we have an",
    "start": "373940",
    "end": "380449"
  },
  {
    "text": "HTTP POST against this sort of resource and we receive that reservation as input and then we return something called an",
    "start": "380449",
    "end": "386810"
  },
  {
    "text": "action we solve this output and if you don't know what that is it's not really important it's just an interface that",
    "start": "386810",
    "end": "393409"
  },
  {
    "text": "models an HTTP response and you'll see you know how we return things like that in a moment now if",
    "start": "393409",
    "end": "400460"
  },
  {
    "text": "we're doing dependency injection we typically do it all the way so we could inject that I'm HIV interface that I",
    "start": "400460",
    "end": "405710"
  },
  {
    "text": "just showed you and if I have an independancy on that I can just calm HUD",
    "start": "405710",
    "end": "410780"
  },
  {
    "text": "to try except and that returns a knowable int and then I can do a little check on whether or not that's no and if",
    "start": "410780",
    "end": "417319"
  },
  {
    "text": "it's no I'll call the helper method so internal server error is a little helper method probably on the base class and it",
    "start": "417319",
    "end": "425389"
  },
  {
    "text": "returns one of those action results so in this case and that just means that the action result represents a 500",
    "start": "425389",
    "end": "432740"
  },
  {
    "text": "internal server error HTTP response on the other hand if the try accept method",
    "start": "432740",
    "end": "439969"
  },
  {
    "text": "succeeded I return 200 okay so that's another one of those action results and",
    "start": "439969",
    "end": "445370"
  },
  {
    "text": "notice that in the response body I pull out the integer from that knowledge int",
    "start": "445370",
    "end": "450529"
  },
  {
    "text": "so ID dot value is now safe to ACTU access so in the response body on that",
    "start": "450529",
    "end": "456889"
  },
  {
    "text": "200 okay responds is the integer that you know reservation ID and that's the",
    "start": "456889",
    "end": "464169"
  },
  {
    "text": "protocol that's the contract that we have with all the callers of our API that we need to make sure that that",
    "start": "464169",
    "end": "470360"
  },
  {
    "text": "reservation ID remains in the body if if the response is a 200 ok response now",
    "start": "470360",
    "end": "475819"
  },
  {
    "text": "this new async stuff going on at all but if we look at the repository here we",
    "start": "475819",
    "end": "481159"
  },
  {
    "text": "would say well ok really if we want to implement this this is something that",
    "start": "481159",
    "end": "487490"
  },
  {
    "text": "talks to a database you know typically this is a just a relational database and then you know you'd say well it'd be",
    "start": "487490",
    "end": "494960"
  },
  {
    "text": "nice if we could make that access asynchronous because that might actually improve our performance in various ways",
    "start": "494960",
    "end": "500330"
  },
  {
    "text": "at least it's worth a try so how do we make stuff like this asynchronous well the way that's done are you supposed to",
    "start": "500330",
    "end": "507289"
  },
  {
    "text": "do this in c-sharp is that you have to change the return types so right now they're just normal objects and you have",
    "start": "507289",
    "end": "513260"
  },
  {
    "text": "to make them tasks instead all right so it's not a big big change code wise but",
    "start": "513260",
    "end": "520250"
  },
  {
    "text": "we've now just allowed an implementation details to leak through into the definition of what the abstraction looks",
    "start": "520250",
    "end": "527390"
  },
  {
    "text": "like you know abstraction should be defined by but the caller of the methods need and",
    "start": "527390",
    "end": "534540"
  },
  {
    "text": "that's that try except you know domain model and it didn't need those things to",
    "start": "534540",
    "end": "539730"
  },
  {
    "text": "be asynchronous that's what's known as the dependency inversion principle but",
    "start": "539730",
    "end": "544980"
  },
  {
    "text": "now we've allowed some implementation detail to leak through into the definition of our interface and then",
    "start": "544980",
    "end": "553560"
  },
  {
    "text": "you'd say well okay is it a big deal everyone sort of knows that a repository is really just a database so you say",
    "start": "553560",
    "end": "561000"
  },
  {
    "text": "well okay so it's always gonna be some sort of our process resource at least so isn't that okay and you can decide to",
    "start": "561000",
    "end": "567690"
  },
  {
    "text": "say well okay let's let's see where this gets us because maybe that's okay I can sort of you know get with that argument",
    "start": "567690",
    "end": "573630"
  },
  {
    "text": "that's fine so how do we how do we then resolve you know are there any problems",
    "start": "573630",
    "end": "579180"
  },
  {
    "text": "here and it turns out that we need to make some changes to try accept but they're quite you know a few we just",
    "start": "579180",
    "end": "585269"
  },
  {
    "text": "have to add async in a wait and also we need to change the return type of the try accept method to a task but apart",
    "start": "585269",
    "end": "591959"
  },
  {
    "text": "from that this is all the changes that we need to implement it that's not too",
    "start": "591959",
    "end": "597089"
  },
  {
    "text": "bad but you know I change the type of try except that that means it's no",
    "start": "597089",
    "end": "603209"
  },
  {
    "text": "longer gonna compile on this I also change the type of the try accept method that the interface defines because",
    "start": "603209",
    "end": "609360"
  },
  {
    "text": "otherwise I'm no longer implementing that interface so this is where I think",
    "start": "609360",
    "end": "615050"
  },
  {
    "text": "I'm beginning to get a little annoyed with this because I can sort of accept that well yeah okay a repository is",
    "start": "615050",
    "end": "621690"
  },
  {
    "text": "really not a process resource so it should be asynchronous but this thing here this is my domain model and I see",
    "start": "621690",
    "end": "629190"
  },
  {
    "text": "absolutely no compelling reason why my domain model has to be asynchronous but",
    "start": "629190",
    "end": "634589"
  },
  {
    "text": "now it it does because of an implementation detail so now that's you know this bothers me but let's just move",
    "start": "634589",
    "end": "642240"
  },
  {
    "text": "on and see if there's more work to do and there is a little bit more but it's it's be almost done you know since we",
    "start": "642240",
    "end": "648720"
  },
  {
    "text": "Maitre D' to try except is now asynchronous i also need to add a weight and async and return a task instead here",
    "start": "648720",
    "end": "655230"
  },
  {
    "text": "but again very you know a few changes they're easy to implement those changes so it's not a big deal and at this point",
    "start": "655230",
    "end": "662160"
  },
  {
    "text": "we are done I'm annoyed about the leaky abstraction but apart from that it's not that it's",
    "start": "662160",
    "end": "668570"
  },
  {
    "text": "you know it's not that it's hard work to make this change this is fairly easy to",
    "start": "668570",
    "end": "673670"
  },
  {
    "text": "do but as other people have pointed out before me once you go async you have to",
    "start": "673670",
    "end": "679010"
  },
  {
    "text": "go acing all the way and you know this is not a talk that tries to drive home that point it's basically just to say",
    "start": "679010",
    "end": "684830"
  },
  {
    "text": "well this we know already there's no other way and I'm always like you know",
    "start": "684830",
    "end": "690830"
  },
  {
    "text": "whenever people say something like that there's no other way I'm my reaction is tip of you oh really because you know I",
    "start": "690830",
    "end": "698540"
  },
  {
    "text": "just need to come up with one counter example to say well yeah there is another way and that means that you were",
    "start": "698540",
    "end": "704600"
  },
  {
    "text": "wrong there is another way and there is now to be clear I'm gonna show you what",
    "start": "704600",
    "end": "710210"
  },
  {
    "text": "that other way is and I'm not I'm not here to sell you on that other way I'm",
    "start": "710210",
    "end": "715520"
  },
  {
    "text": "not trying to I'm not trying to convince you that the way that I'm gonna show you now is better I believe that sometimes",
    "start": "715520",
    "end": "722630"
  },
  {
    "text": "it's better and I believe sometimes you know what I've just shown you is a pragmatic solution that's probably going",
    "start": "722630",
    "end": "727940"
  },
  {
    "text": "to be better for you but I believe in you've given you alternatives so if you",
    "start": "727940",
    "end": "733790"
  },
  {
    "text": "don't know about the other way you wouldn't know that it exists and that means you don't have a choice now if when you know when when the talk is over",
    "start": "733790",
    "end": "740420"
  },
  {
    "text": "you know that there's another way and now you have a choice and then you can make a decision so it's just to raise of an awareness I'm not trying to sell you",
    "start": "740420",
    "end": "747050"
  },
  {
    "text": "on doing one thing or another but this is where part one ends because in order",
    "start": "747050",
    "end": "752960"
  },
  {
    "text": "to figure out what the other way looks like we need to learn some other stuff first so I'm going to put aside the",
    "start": "752960",
    "end": "760370"
  },
  {
    "text": "dependency injection and the async/await stuff a little bit and instead talk about a completely unrelated question it",
    "start": "760370",
    "end": "767600"
  },
  {
    "text": "would look like but it turns out that they're actually quite related so the other question is how do I get the value out of my monad and first of all I'm not",
    "start": "767600",
    "end": "775550"
  },
  {
    "text": "expecting you to know what a monad is I'll go through that so once we're done",
    "start": "775550",
    "end": "781400"
  },
  {
    "text": "here you also know what a monad is so this is really gonna be a lot of stuff to learn here and it's super fun and",
    "start": "781400",
    "end": "788000"
  },
  {
    "text": "super easy not to be worried about at all now the short answer to this",
    "start": "788000",
    "end": "794450"
  },
  {
    "text": "question is Moo okay yeah so assuming everyone understands Japanese right now but",
    "start": "794450",
    "end": "800990"
  },
  {
    "start": "796000",
    "end": "859000"
  },
  {
    "text": "there's this there's this interpretation of this character and the the word mu in",
    "start": "800990",
    "end": "807470"
  },
  {
    "text": "Zen Buddhist philosophy and if you want a Western perspective on that you",
    "start": "807470",
    "end": "813199"
  },
  {
    "text": "couldn't always consider reading the sin and the art of motorcycle maintenance because it's a good book or you could",
    "start": "813199",
    "end": "819290"
  },
  {
    "text": "read a good lesha Bach that's maybe a little bit more programming oriented but both of those books talk about this way",
    "start": "819290",
    "end": "825769"
  },
  {
    "text": "of sometimes asking or responding to a question when people are asking a",
    "start": "825769",
    "end": "831199"
  },
  {
    "text": "question you say Moo and basically it means on ask the question so the idea",
    "start": "831199",
    "end": "836689"
  },
  {
    "text": "here is that this is a response that basically tells you the question doesn't",
    "start": "836689",
    "end": "842509"
  },
  {
    "text": "make any sense we should now talk about you know why you would ask that question and then you know once you've understood",
    "start": "842509",
    "end": "850069"
  },
  {
    "text": "that the question doesn't make any sense you will become enlightened there's always a lot of enlightenment in in Zen",
    "start": "850069",
    "end": "855560"
  },
  {
    "text": "Buddhism I suppose it's very closely related to another thing there's more maybe a little bit more down-to-earth",
    "start": "855560",
    "end": "865029"
  },
  {
    "start": "859000",
    "end": "967000"
  },
  {
    "text": "DXY problem now the x-y problem is something that often happens when you when you're trying to learn something",
    "start": "865029",
    "end": "872029"
  },
  {
    "text": "new something that you don't know how to do yet and you're trying to learn it and it's such a common thing that there's",
    "start": "872029",
    "end": "877459"
  },
  {
    "text": "actually a stack overflow flat a fact that talks about the XY problem but basically it's this thing where you're",
    "start": "877459",
    "end": "883310"
  },
  {
    "text": "trying to learn something new so a new library a new language a new way of doing things and you well you're",
    "start": "883310",
    "end": "891470"
  },
  {
    "text": "struggling with things because it's hard to learn new stuff and that's completely natural so if we could try to illustrate",
    "start": "891470",
    "end": "897649"
  },
  {
    "text": "that by saying you have a goal you're trying to accomplish the goal why and you have either implicitly or explicitly",
    "start": "897649",
    "end": "904990"
  },
  {
    "text": "formulated yourself a plan to how to achieve the goal and you say well I'll go through a series of steps and that",
    "start": "904990",
    "end": "912649"
  },
  {
    "text": "will enable me to reach the goal and one of those steps will call X and then when you try to execute on your plan it turns",
    "start": "912649",
    "end": "918170"
  },
  {
    "text": "out that you're stuck on X you can't figure out how to do X and then you go and ask on stackoverflow and the friendly people on sock Stack Overflow",
    "start": "918170",
    "end": "924500"
  },
  {
    "text": "will you know immediately tell you oh yeah that was me really making sense that you're really trying to do so if",
    "start": "924500",
    "end": "931800"
  },
  {
    "text": "you engage into such you know in a conversation like that you know someone who really knows what it is that you're",
    "start": "931800",
    "end": "938370"
  },
  {
    "text": "trying to learn will understand that it doesn't make sense to try to do X that's a nonsensical question but once you",
    "start": "938370",
    "end": "946829"
  },
  {
    "text": "figure out you know by conversing with an expert that you're really trying to do Y that's your goal the expert will",
    "start": "946829",
    "end": "954029"
  },
  {
    "text": "say oh if that's what you're trying to do you should do Z and Zed will enable you to do X to the Y sorry so it's a",
    "start": "954029",
    "end": "961800"
  },
  {
    "text": "completely different way of thinking about things and that happens a lot and this happens often when monads are",
    "start": "961800",
    "end": "968810"
  },
  {
    "start": "967000",
    "end": "1077000"
  },
  {
    "text": "involved as well so we often see lots of very specific questions about specific monads but I've sort of just try to",
    "start": "968810",
    "end": "975540"
  },
  {
    "text": "generalize the question to this so how do we get the value out of my monad well you don't let this make any sense that question is nonsensical and but I think",
    "start": "975540",
    "end": "982589"
  },
  {
    "text": "it's worthwhile to just look at you know why would you ask that question but first we'll have to figure out what's a",
    "start": "982589",
    "end": "989579"
  },
  {
    "text": "monad because I'm not not assuming that you know is and it's one of those things where there's a lot of there's a lot of",
    "start": "989579",
    "end": "997829"
  },
  {
    "text": "Bath's around a word and a lot of people find it intimidating but it's really not",
    "start": "997829",
    "end": "1003500"
  },
  {
    "text": "you so if you forget about all the image intimidation for a moment interesting this is just a friendly practical thing",
    "start": "1003500",
    "end": "1008720"
  },
  {
    "text": "it is then just I'll teach you and it'll take 15 minutes and then you'll know what a monad is so just you know just go",
    "start": "1008720",
    "end": "1016100"
  },
  {
    "text": "to this with an open mind and it'll be fine now what's a monad okay a little bit more jargon here it's a function you can",
    "start": "1016100",
    "end": "1021589"
  },
  {
    "text": "flatten and then you go okay that's not very helpful what's a functor so we'll need that so I'll go through that so",
    "start": "1021589",
    "end": "1027949"
  },
  {
    "text": "actually turns out that what's hard to explain but not so hard but just the hardest part of these two things is to",
    "start": "1027949",
    "end": "1033650"
  },
  {
    "text": "explain what a functor is why don't you understand that a monad is just a practical thing that enables you to work",
    "start": "1033650",
    "end": "1038839"
  },
  {
    "text": "with functors so they start there so a functor is a container well not",
    "start": "1038839",
    "end": "1044058"
  },
  {
    "text": "that kind of container also not a dependency injection container also not",
    "start": "1044059",
    "end": "1049340"
  },
  {
    "text": "a shipping container it's more it's just a data structure it's a container of values so we could try to illustrate",
    "start": "1049340",
    "end": "1056299"
  },
  {
    "text": "that by just saying well it's just sort of you know some rectangle and you can imagine that there are some data inside that",
    "start": "1056299",
    "end": "1062030"
  },
  {
    "text": "so typically in a language like C sharp this would be a generic type so this would be some sort of container of tea",
    "start": "1062030",
    "end": "1068210"
  },
  {
    "text": "something like that so one thing we know about it is that it contains values of",
    "start": "1068210",
    "end": "1073610"
  },
  {
    "text": "the generic type tea and it supports what we call a structure preserving map and what that means is that you can",
    "start": "1073610",
    "end": "1079460"
  },
  {
    "start": "1077000",
    "end": "1298000"
  },
  {
    "text": "change whatever is inside the container without actually changing you know the outside look and feel of the container",
    "start": "1079460",
    "end": "1085550"
  },
  {
    "text": "if you will and that sounds abstract I know so let's look at an example now the the most intuitive way to think about",
    "start": "1085550",
    "end": "1092390"
  },
  {
    "text": "this is just think about it as a collection so here's a collection of numbers what is just what is the structure preserving map well you can",
    "start": "1092390",
    "end": "1098540"
  },
  {
    "text": "add one to each of the numbers and now you have a new collection of numbers and since it's a generically typed container",
    "start": "1098540",
    "end": "1104480"
  },
  {
    "text": "and not only do you have to you don't have to translate numbers to numbers you can translate numbers to string so you",
    "start": "1104480",
    "end": "1109520"
  },
  {
    "text": "can translate numbers to boolean values or whatever you would like so this idea",
    "start": "1109520",
    "end": "1114680"
  },
  {
    "text": "of this translation being structure preserving means that it preserves the structure of the input container",
    "start": "1114680",
    "end": "1120110"
  },
  {
    "text": "whatever it is and the structure depends a little bit on what type of container we have so this is just an example you",
    "start": "1120110",
    "end": "1126290"
  },
  {
    "text": "know collections are just one example of this overall abstract concept of a functor but for collections the",
    "start": "1126290",
    "end": "1132830"
  },
  {
    "text": "structure is something like the size so you know the input collection here has the size of six elements or all the",
    "start": "1132830",
    "end": "1138440"
  },
  {
    "text": "outputs all also have that same size and there's an order to a collection and that means the order of all the outputs",
    "start": "1138440",
    "end": "1145430"
  },
  {
    "text": "here is determined by the order of the input collection as well so that's the structure of typical collections in a",
    "start": "1145430",
    "end": "1150740"
  },
  {
    "text": "list of T arrays you know any irony mobile of T stuff like that what's just",
    "start": "1150740",
    "end": "1156230"
  },
  {
    "text": "one example of a functor now one is another thing we might learn about",
    "start": "1156230",
    "end": "1162020"
  },
  {
    "text": "functors is that the output is still the same type of container so you know a",
    "start": "1162020",
    "end": "1168680"
  },
  {
    "text": "collection maps to another collection and that means you can you can keep on doing this so you can say let's map that",
    "start": "1168680",
    "end": "1174650"
  },
  {
    "text": "to something else so you can sort of compose those things together so that's that's a pretty nice ability to have so",
    "start": "1174650",
    "end": "1181190"
  },
  {
    "text": "in c-sharp this looks something like this so well let's create an array of numbers and then to reform the first",
    "start": "1181190",
    "end": "1187700"
  },
  {
    "text": "structure for serving map we call this selects method so most other languages call that structure preserving map map",
    "start": "1187700",
    "end": "1195710"
  },
  {
    "text": "or maybe F map but in c-sharp it's called select for reasons now this is",
    "start": "1195710",
    "end": "1203179"
  },
  {
    "text": "the first step it just corresponds to the first step that I showed you on the diagram and this is just adding one to",
    "start": "1203179",
    "end": "1208700"
  },
  {
    "text": "each of the numbers and that produces a new array or new ienumerable at least and then you can move on and do this you",
    "start": "1208700",
    "end": "1216350"
  },
  {
    "text": "know another select and that turns all the the numbers into strings and now you have yourself an array of strings so you",
    "start": "1216350",
    "end": "1222830"
  },
  {
    "text": "know this already you know you've if you've ever done c-sharp programming you've you've been doing this for more than 10 years link has been around for a",
    "start": "1222830",
    "end": "1229130"
  },
  {
    "text": "long time so you'd say well okay so we if that is an example of a functor and and it is why would anyone ever ask the",
    "start": "1229130",
    "end": "1237380"
  },
  {
    "text": "question how do I get the value out of my functor because it's sort of like why would you ask something like how do I",
    "start": "1237380",
    "end": "1242659"
  },
  {
    "text": "get the value out of my collection it's not a very reasonable question to ask because we know that there's more than",
    "start": "1242659",
    "end": "1249230"
  },
  {
    "text": "one value and what's even worse sometimes there's no value in an array or in our lists so it doesn't make sense",
    "start": "1249230",
    "end": "1256640"
  },
  {
    "text": "to ask the question how do I get the value out of a collection particularly if that collection is empty so people",
    "start": "1256640",
    "end": "1263809"
  },
  {
    "text": "don't ask questions in you know just like that so you'd say well why why do",
    "start": "1263809",
    "end": "1270049"
  },
  {
    "text": "people ask you know well how do I get the value out of my monad if you knew this already but the problem is that",
    "start": "1270049",
    "end": "1275570"
  },
  {
    "text": "most people actually don't realize that this is a functor because if you read the documentation of what a functor but",
    "start": "1275570",
    "end": "1282260"
  },
  {
    "text": "selector does it doesn't tell you that it's a functor even though it is so I don't know why Microsoft chooses to keep",
    "start": "1282260",
    "end": "1289010"
  },
  {
    "text": "keep the truth from you but I know you can handle the truth so now I'm telling",
    "start": "1289010",
    "end": "1294049"
  },
  {
    "text": "you alright so I think the reason why that question keeps coming up is that",
    "start": "1294049",
    "end": "1300320"
  },
  {
    "start": "1298000",
    "end": "1334000"
  },
  {
    "text": "you know you've been using and and working with link for yes but you don't realize that you're working with",
    "start": "1300320",
    "end": "1305510"
  },
  {
    "text": "functors so the first time you actually gets introduced to the concept of functors and monads is in a different",
    "start": "1305510",
    "end": "1311270"
  },
  {
    "text": "context and if you're unlucky maybe that context is what I call a unit container so the word unit containers just my",
    "start": "1311270",
    "end": "1317419"
  },
  {
    "text": "invention but I use that to describe a set of very specific functors that have",
    "start": "1317419",
    "end": "1325789"
  },
  {
    "text": "one thing in common and that is that they contain exactly one value so guarantee to contain one value and for",
    "start": "1325789",
    "end": "1331399"
  },
  {
    "text": "those it makes sense to ask that question so lazy of tea for example again a time that's been around in the",
    "start": "1331399",
    "end": "1337519"
  },
  {
    "start": "1334000",
    "end": "1522000"
  },
  {
    "text": "dotnet library for like 15 years this is guaranteed to contain a single value of",
    "start": "1337519",
    "end": "1343159"
  },
  {
    "text": "the type T and that it's always kind of it contain exactly one value it's just a",
    "start": "1343159",
    "end": "1350210"
  },
  {
    "text": "lazy computation so it's already generically typed is it a factor then well again for reasons that I don't",
    "start": "1350210",
    "end": "1357710"
  },
  {
    "text": "understand it doesn't come with a select method but we can add 1 so we can write as you know an extension method so we'll",
    "start": "1357710",
    "end": "1363919"
  },
  {
    "text": "say let's write a method called selects that returns a lacy of T the solved if the input is a lacy of T and which is",
    "start": "1363919",
    "end": "1369980"
  },
  {
    "text": "going to need a function that translates T to t result and the implementation is basically just a one-liner it's just",
    "start": "1369980",
    "end": "1375440"
  },
  {
    "text": "that line of code and this preserves this the structure of what it means by being a lazy computation and I'll give",
    "start": "1375440",
    "end": "1381710"
  },
  {
    "text": "you an example here so imagine that you create a lazy of end and you'll notice that inside the lazy computation it'll",
    "start": "1381710",
    "end": "1388759"
  },
  {
    "text": "block the thread for 10 seconds but even so this code couldn't you know it",
    "start": "1388759",
    "end": "1394070"
  },
  {
    "text": "immediately completes because it's a lazy computation so it's actually not running yet you have a lazy of int so",
    "start": "1394070",
    "end": "1400070"
  },
  {
    "text": "it's sort of like a promise to calculate an int at a later time but not right now so you can take that select method that",
    "start": "1400070",
    "end": "1407659"
  },
  {
    "text": "we just added that extension method and you can call it on X to produce a lazy of string and this still completes",
    "start": "1407659",
    "end": "1415850"
  },
  {
    "text": "immediately so that means you know whatever you expect from a lazy computation is still true not only does",
    "start": "1415850",
    "end": "1423889"
  },
  {
    "text": "this still complete immediately now if you now force evaluation and say y dot value that's gonna block for 10 seconds",
    "start": "1423889",
    "end": "1429950"
  },
  {
    "text": "and if you do it again it's gonna return immediately because it remembers the result from the first time you forced",
    "start": "1429950",
    "end": "1435440"
  },
  {
    "text": "evaluation and this is just how you expect lazy of T to behave so the Select",
    "start": "1435440",
    "end": "1440720"
  },
  {
    "text": "method just preserves your expectations it just you know stays intuitive if you",
    "start": "1440720",
    "end": "1446059"
  },
  {
    "text": "will so that's a structure preserving map in your if it preserves the invariance of what it means to be a lazy",
    "start": "1446059",
    "end": "1451489"
  },
  {
    "text": "computation so all that takes is just an extension method called select and we",
    "start": "1451489",
    "end": "1457369"
  },
  {
    "text": "can do the same thing for task of T so the implementation is a little bit different",
    "start": "1457369",
    "end": "1462620"
  },
  {
    "text": "it works the same way so you can say let's create a task of int and again that completes immediately even though",
    "start": "1462620",
    "end": "1469250"
  },
  {
    "text": "it starts the task on a background thread somewhere and that means you can take your X in your task of Ind and call",
    "start": "1469250",
    "end": "1475940"
  },
  {
    "text": "select on that to turn it into a task of string and again that's gonna complete immediately because select preserves the",
    "start": "1475940",
    "end": "1483380"
  },
  {
    "text": "structure of what it means to be an asynchronous computation even and even",
    "start": "1483380",
    "end": "1489350"
  },
  {
    "text": "more you know if you try to await Y then it's gonna block until the task is completed but then again if you try to",
    "start": "1489350",
    "end": "1495770"
  },
  {
    "text": "do it again that's gonna complete immediately so again selects doesn't change your expectations you know the",
    "start": "1495770",
    "end": "1501710"
  },
  {
    "text": "task of string behaves just like you would expect a task to behave doesn't change anything so it's a structure for",
    "start": "1501710",
    "end": "1507500"
  },
  {
    "text": "serving map so now you've seen a couple of examples of functors you've seen",
    "start": "1507500",
    "end": "1513410"
  },
  {
    "text": "collections you've seen Lacey of tea you've seen tasks of tea those are all functors because they have structure for",
    "start": "1513410",
    "end": "1519080"
  },
  {
    "text": "serving maps and in Sharpe we call those select alright we can actually do more",
    "start": "1519080",
    "end": "1525770"
  },
  {
    "text": "with this so so far you've seen me use this syntax but we could also rewrite all the expressions that you've seen so",
    "start": "1525770",
    "end": "1532940"
  },
  {
    "text": "far to query syntax and this is the syntax most people associated with database queries but this works on you",
    "start": "1532940",
    "end": "1538520"
  },
  {
    "text": "know if X is any ienumerable of int then Y is inferred to be any ienumerable of string but it turns out that now we've",
    "start": "1538520",
    "end": "1545300"
  },
  {
    "text": "added those select methods this also works for lazy of T and it also works for tasks of T so it might be a little",
    "start": "1545300",
    "end": "1551840"
  },
  {
    "text": "bit surprising that the this language feature works for your custom types but",
    "start": "1551840",
    "end": "1558050"
  },
  {
    "text": "the reason why it works is because that language feature is designed around the abstraction of a functor and if the",
    "start": "1558050",
    "end": "1566540"
  },
  {
    "text": "compiler can see that you have created a functor then this syntax compiles so",
    "start": "1566540",
    "end": "1572750"
  },
  {
    "text": "they knew what they were doing when they were creating that sort of syntax even if you can disagree with the namings",
    "start": "1572750",
    "end": "1578300"
  },
  {
    "text": "naming conventions they chose so that's basically a functor it's some sort of",
    "start": "1578300",
    "end": "1584000"
  },
  {
    "text": "generically typed as a container that supports the structure preserving map so now we just need to figure out what a monad is and I would say you know just",
    "start": "1584000",
    "end": "1592010"
  },
  {
    "text": "getting your head around that is a very very abstract you know sort of fossa concept that a function it's not an interface that you",
    "start": "1592010",
    "end": "1598410"
  },
  {
    "text": "implement it's just sort of you know if you're if your data looks in a particular way then it's a funk term now",
    "start": "1598410",
    "end": "1604350"
  },
  {
    "text": "if you can get that you know figuring out what a monad is is easy because just that is just solving a practical problem",
    "start": "1604350",
    "end": "1610080"
  },
  {
    "text": "with functors and basically what I told you is it's a function you can flatten so let's just have a look at what does",
    "start": "1610080",
    "end": "1616890"
  },
  {
    "text": "it mean to flatten a functor we haven't really seen something that doesn't look flat already so we'll probably have to",
    "start": "1616890",
    "end": "1623910"
  },
  {
    "text": "just briefly go through that so and we'll go back to collections for a little moment so here's a string it's a",
    "start": "1623910",
    "end": "1630960"
  },
  {
    "start": "1627000",
    "end": "1737000"
  },
  {
    "text": "it's a string of food coma bar but it's just one string and there's an instance method on string called split and that",
    "start": "1630960",
    "end": "1637170"
  },
  {
    "text": "enables you to split on a character so in this case we're going to split on the comma and the result of that is just a",
    "start": "1637170",
    "end": "1642870"
  },
  {
    "text": "you know an array of strings foo and bar so that's fine and you probably knew",
    "start": "1642870",
    "end": "1648450"
  },
  {
    "text": "this already now what if you have a collection of comma separated strings like this foo bar and bass and cukes now",
    "start": "1648450",
    "end": "1656190"
  },
  {
    "text": "if you want to do a pro structure preserving map over those two strings but you also want to split each of those",
    "start": "1656190",
    "end": "1663000"
  },
  {
    "text": "comma separated strings now what's going to happen now is split it's going to produce a race in itself so you now you",
    "start": "1663000",
    "end": "1669060"
  },
  {
    "text": "get a nested array you can under ray of a race so that's what I mean by a nested",
    "start": "1669060",
    "end": "1675150"
  },
  {
    "text": "container sometimes this is what you want but sometimes you just want you know the just a flat array instead of",
    "start": "1675150",
    "end": "1681540"
  },
  {
    "text": "this array of arrays so what you can do instead is you can call a method called select many you've probably tried this",
    "start": "1681540",
    "end": "1687300"
  },
  {
    "text": "already and the reason why it's called select many is exactly because it addresses this problem and it says well",
    "start": "1687300",
    "end": "1693330"
  },
  {
    "text": "you're going to select for each of the comma separated strings but the operation that I'm gonna you know",
    "start": "1693330",
    "end": "1698600"
  },
  {
    "text": "execute inside that lambda expression split will produce many values so for",
    "start": "1698600",
    "end": "1703980"
  },
  {
    "text": "each of the input elements I'm gonna produce many values so I'm gonna select",
    "start": "1703980",
    "end": "1709080"
  },
  {
    "text": "many and now I've kind of flattened as I go and then I just have a nice flat on",
    "start": "1709080",
    "end": "1714330"
  },
  {
    "text": "nested container so this is just an array of strings instead of up being an array of array of strings so that's what",
    "start": "1714330",
    "end": "1720210"
  },
  {
    "text": "I mean by flattening a functor if you have select many and it's well-behaved then it's a monad that's basically what",
    "start": "1720210",
    "end": "1726720"
  },
  {
    "text": "makes it a monad it's just solving that practical problem that sometimes you need to remove levels of nesting from a",
    "start": "1726720",
    "end": "1732990"
  },
  {
    "text": "generically type container that's all it is all right so would you ever run into",
    "start": "1732990",
    "end": "1738929"
  },
  {
    "start": "1737000",
    "end": "1834000"
  },
  {
    "text": "that situation with other site types of functors what about tasks well what if",
    "start": "1738929",
    "end": "1744090"
  },
  {
    "text": "you define a task of index and another task of into why and then you say well I'd like to add them together but I'd",
    "start": "1744090",
    "end": "1750150"
  },
  {
    "text": "like to do it in the functor style so I'll call select and I'll try to do something like this now if you do this",
    "start": "1750150",
    "end": "1756870"
  },
  {
    "text": "this compiles but you'll notice that the output Z is a task of a task of an IND now how do you get the int out of that",
    "start": "1756870",
    "end": "1764280"
  },
  {
    "text": "task by the way well you can actually await a wait Zed it's not of funny that",
    "start": "1764280",
    "end": "1769980"
  },
  {
    "text": "you can do that but that actually works pretty well but it's it's it's a little odd isn't it so and instead what you can",
    "start": "1769980",
    "end": "1776460"
  },
  {
    "text": "do is you can add just like you added a select extension method you can add a select many extension methods and that",
    "start": "1776460",
    "end": "1782490"
  },
  {
    "text": "means it's just gonna flatten as it goes and now Z is just a normal task of in that you only have to await at once in",
    "start": "1782490",
    "end": "1789210"
  },
  {
    "text": "order to actually get it get the value out of it and not only that you know with the appropriate select many methods",
    "start": "1789210",
    "end": "1794640"
  },
  {
    "text": "you could also just rewrite everything in query syntax you know and it would look like this so it's it's because you",
    "start": "1794640",
    "end": "1803669"
  },
  {
    "text": "know task of end is a monad that this is possible to do the compiler understands",
    "start": "1803669",
    "end": "1808919"
  },
  {
    "text": "monads as well as functors so so that's another example of a monad you can just flatten things as you go and then that's",
    "start": "1808919",
    "end": "1815340"
  },
  {
    "text": "a monad now there are definitely examples where it makes sense to ask the",
    "start": "1815340",
    "end": "1820770"
  },
  {
    "text": "question how do I get the value out of the data container for a lacy of string you can get the string out of it by",
    "start": "1820770",
    "end": "1825840"
  },
  {
    "text": "forcing evaluation the same thing goes for you no task you have to weight them",
    "start": "1825840",
    "end": "1831299"
  },
  {
    "text": "but you can then get at the string and this is not only true for c-sharp this you know you run into the same situation",
    "start": "1831299",
    "end": "1838080"
  },
  {
    "text": "in in F sharp there's something very similar called async of string and even in Haskell you have those unit",
    "start": "1838080",
    "end": "1843480"
  },
  {
    "text": "containers that are guaranteed to contain just one value and you can access that value by run a function on",
    "start": "1843480",
    "end": "1849330"
  },
  {
    "text": "on the container not all of them but a lot of them this is just the simplest one that exists so",
    "start": "1849330",
    "end": "1855450"
  },
  {
    "text": "if this is your introduction to functions and monads and your brain is",
    "start": "1855450",
    "end": "1860880"
  },
  {
    "text": "trying to pattern match on and you sort of have forgotten that collections are also functors and monads",
    "start": "1860880",
    "end": "1867290"
  },
  {
    "text": "maybe you reach that wrong conclusion that you can always get the value out of the monad because for these containers",
    "start": "1867290",
    "end": "1874950"
  },
  {
    "text": "it's true but there's lots of other Monet's let's not lots of other containers where that's not true and",
    "start": "1874950",
    "end": "1880910"
  },
  {
    "start": "1877000",
    "end": "1907000"
  },
  {
    "text": "people often run into problems with what I call semi containers so unit",
    "start": "1880910",
    "end": "1887160"
  },
  {
    "text": "containers were the ones that were guaranteed to contain exactly one value now so I just you know name the other",
    "start": "1887160",
    "end": "1893460"
  },
  {
    "text": "ones here semi containers because they're not guaranteed to contain one value they may contain a value but maybe",
    "start": "1893460",
    "end": "1898500"
  },
  {
    "text": "they don't so on average if you will they contain half a value semi stupid I",
    "start": "1898500",
    "end": "1905040"
  },
  {
    "text": "know anyways and the most famous one in C sharp is probably novel of T and you",
    "start": "1905040",
    "end": "1910919"
  },
  {
    "start": "1907000",
    "end": "2281000"
  },
  {
    "text": "know novel of T already so if you have you know inaudible the int we we looked at that already",
    "start": "1910919",
    "end": "1916230"
  },
  {
    "text": "that's an ID here's a slightly different example you could make a check on ID and",
    "start": "1916230",
    "end": "1921960"
  },
  {
    "text": "see if it's not no and if it's not null you know that it's safe to access ID but value and then you have this customer",
    "start": "1921960",
    "end": "1927809"
  },
  {
    "text": "object here that requires a you know a proper int so that would be some sort of customer in a identity customer ID and",
    "start": "1927809",
    "end": "1934679"
  },
  {
    "text": "you can only create a customer if you have an int that you can pass to the to the constructor there so you can say",
    "start": "1934679",
    "end": "1941250"
  },
  {
    "text": "well if that's possible if it's safe to access ID that value I can create a new customer and I can return that but",
    "start": "1941250",
    "end": "1947309"
  },
  {
    "text": "whenever you're returning something you also have to deal with the case where there's nothing there so what do you",
    "start": "1947309",
    "end": "1954600"
  },
  {
    "text": "write in the il's front here and I know what lots of people do they do this",
    "start": "1954600",
    "end": "1961730"
  },
  {
    "text": "and it is you know this should not be allowed according to the Geneva",
    "start": "1964360",
    "end": "1970660"
  },
  {
    "text": "Convention because it's it's what you're doing here is you're leaving behind a mine you know you creating a little",
    "start": "1970660",
    "end": "1977380"
  },
  {
    "text": "helper method there that says well you know here's something where you know the return value is a customer and and then",
    "start": "1977380",
    "end": "1983260"
  },
  {
    "text": "you keep you know you you give that you know helper method to me and you say well just call this method and you will have a customer and I'll say oh gee I'll",
    "start": "1983260",
    "end": "1989890"
  },
  {
    "text": "have a customer I'll start you know calling your method and you know do things with the customer and everything compiles and all is fine and then I you",
    "start": "1989890",
    "end": "1996580"
  },
  {
    "text": "know put my code into production and everything just explodes so if you structure your code like this that's",
    "start": "1996580",
    "end": "2002010"
  },
  {
    "text": "just sort of like creating a minefield it is really really hard to navigate code that is structured like this so",
    "start": "2002010",
    "end": "2007800"
  },
  {
    "text": "please don't but you know it's hard if you don't know what else to do so the",
    "start": "2007800",
    "end": "2014310"
  },
  {
    "text": "question is then since I'm talking about functions and monads can they help you so let's let's have a look at that so is",
    "start": "2014310",
    "end": "2020700"
  },
  {
    "text": "is normal of T a functor well it's again it's not but we can make it a functor by",
    "start": "2020700",
    "end": "2027720"
  },
  {
    "text": "creating it's an extension method and called select but there's one catch on that that is this only compiles if we",
    "start": "2027720",
    "end": "2034860"
  },
  {
    "text": "add those generic type constraints here T must be a struct T results must be a",
    "start": "2034860",
    "end": "2042060"
  },
  {
    "text": "struct and the reason for that is that novel of T itself is defined it's only defined for T's where T is a struct so",
    "start": "2042060",
    "end": "2049350"
  },
  {
    "text": "you can only map between you know value types but then you know it's a functor overall value value types but not",
    "start": "2049350",
    "end": "2055860"
  },
  {
    "text": "overall types in general but you can if you want write something like this where",
    "start": "2055860",
    "end": "2060960"
  },
  {
    "text": "you can say well let's start with an AA level of int and then you know transform that into an all above a bool and that works and so that's that's quite useful",
    "start": "2060960",
    "end": "2069149"
  },
  {
    "text": "so you'd say well okay so there's the nice thing about you know doing those you know structure preserving maps with",
    "start": "2069150",
    "end": "2075750"
  },
  {
    "text": "select is that you don't have to check for null you don't have to check whether the values there or not you can just say",
    "start": "2075750",
    "end": "2081419"
  },
  {
    "text": "well you know well just compose my is even method with I dot select and you",
    "start": "2081419",
    "end": "2087270"
  },
  {
    "text": "know all H cases are actually being taken care of here so that's really nice",
    "start": "2087270",
    "end": "2092429"
  },
  {
    "text": "can can I do something like this with my ID you know I had I had to create that customer we've",
    "start": "2092429",
    "end": "2098040"
  },
  {
    "text": "before it'd be really nice if we could do something like this and and that would be safe so I could say ID dot select and then say you know if ID is a",
    "start": "2098040",
    "end": "2106200"
  },
  {
    "text": "value there's an integer inside of it and then that I in the lambda expression",
    "start": "2106200",
    "end": "2111240"
  },
  {
    "text": "would be the integer and then I could create a new customer that really really nice yeah but doesn't compile sorry and",
    "start": "2111240",
    "end": "2117630"
  },
  {
    "text": "the reason for that is that you know customer is a reference type and we had that type constraint saying t can only",
    "start": "2117630",
    "end": "2123480"
  },
  {
    "text": "be a value type so sorry that's c-sharp 8th made may do something",
    "start": "2123480",
    "end": "2129300"
  },
  {
    "text": "about c-sharp 8th will do lots of things so let's just pretend that she saw it's not happened yet because it hasn't and",
    "start": "2129300",
    "end": "2134520"
  },
  {
    "text": "we don't really know exactly how it's going to work out anyway so we'll just pretend that what we can do though is",
    "start": "2134520",
    "end": "2143010"
  },
  {
    "text": "that we can say well okay so it'd be nice if nah level of T just lifted that constraint and until c-sharp",
    "start": "2143010",
    "end": "2149640"
  },
  {
    "text": "Eights and then we can't really make that happen magically but we can just",
    "start": "2149640",
    "end": "2155069"
  },
  {
    "text": "make our own functor so we'll make our own functor and we'll call it something and we'll have to come up with a good name and we'll just think about calling",
    "start": "2155069",
    "end": "2161609"
  },
  {
    "text": "it maybe of T because that's what everyone else calls it so I didn't come up with that idea and there's lots of",
    "start": "2161609",
    "end": "2167549"
  },
  {
    "text": "ways you can implement this but here I'm just using a flag and a value and then there's two constructor overload",
    "start": "2167549",
    "end": "2173220"
  },
  {
    "text": "there's one constructor that doesn't take any arguments and it just sets that has item flag to false and there's",
    "start": "2173220",
    "end": "2179369"
  },
  {
    "text": "another constructor overloading an item of the type T as input and you know saves it in a class field and sets the",
    "start": "2179369",
    "end": "2186089"
  },
  {
    "text": "flag to true so these are now enables you to to the to model you know a",
    "start": "2186089",
    "end": "2191670"
  },
  {
    "text": "generically type container that may or may not contain a value so it's already generically typed is it a functor well",
    "start": "2191670",
    "end": "2199440"
  },
  {
    "text": "not surprisingly it is we just have to implement the Select method so it doesn't have to be an extension method",
    "start": "2199440",
    "end": "2206430"
  },
  {
    "text": "this is an instance method on maybe of T and the output of that should be a may",
    "start": "2206430",
    "end": "2211770"
  },
  {
    "text": "be of T result so how do we implement this that's pretty straightforward just",
    "start": "2211770",
    "end": "2216859"
  },
  {
    "text": "ask you know is has item true or false if it's true we know that item is",
    "start": "2216859",
    "end": "2222420"
  },
  {
    "text": "available we know that item is of the type T the selector that function that",
    "start": "2222420",
    "end": "2227910"
  },
  {
    "text": "is being passed in is a function that can take a value of the type T and turn it into a value of type T result and we have a value of",
    "start": "2227910",
    "end": "2235059"
  },
  {
    "text": "type T that's items that we call selector with item that produces a value of T result and then we just package",
    "start": "2235059",
    "end": "2240640"
  },
  {
    "text": "that in a populated maybe of T result do that works what do we do in the other",
    "start": "2240640",
    "end": "2246430"
  },
  {
    "text": "case do we throw an exception now we don't have to we just return an empty maybe maybe of T result that doesn't",
    "start": "2246430",
    "end": "2252099"
  },
  {
    "text": "contain anything and that's all good so again this is a structure preserving map because we are taking populated maybes",
    "start": "2252099",
    "end": "2259180"
  },
  {
    "text": "and translating them to other populated maybes and we're taking empty maybes and translating them to other empty maybes",
    "start": "2259180",
    "end": "2264760"
  },
  {
    "text": "so we preserve the structure of whatever the original maybe was we're not changing things around and we can do the",
    "start": "2264760",
    "end": "2271630"
  },
  {
    "text": "same thing with the Select mini so with this flattening operation and it just looks a little bit different but you",
    "start": "2271630",
    "end": "2277420"
  },
  {
    "text": "know the concept is the same so I'm just gonna skip over this briefly now what",
    "start": "2277420",
    "end": "2282609"
  },
  {
    "start": "2281000",
    "end": "2356000"
  },
  {
    "text": "you can do with the maybe of T is that you can create some nice composable helper functions so you could write",
    "start": "2282609",
    "end": "2289059"
  },
  {
    "text": "something like try pass IND and then you'd say well that's got a return or maybe event but why do we need this we already have you know interests",
    "start": "2289059",
    "end": "2295809"
  },
  {
    "text": "a try pass in the base class library so why is this necessary and it's but this",
    "start": "2295809",
    "end": "2301359"
  },
  {
    "text": "is composable you know because what's often the problem when you use you know in to try pass is that you have to check",
    "start": "2301359",
    "end": "2308290"
  },
  {
    "text": "whether it returns true or false and you normally don't have a problem when the",
    "start": "2308290",
    "end": "2313329"
  },
  {
    "text": "return value is true because then you have yet the integer that you were looking for and all is good and in this",
    "start": "2313329",
    "end": "2318640"
  },
  {
    "text": "case we just put that into a maybe event but often then again you run into this problem what do I do in the else branch",
    "start": "2318640",
    "end": "2325200"
  },
  {
    "text": "if I didn't you know I'd look for an integer and I didn't find one so what do I do and this is again where you know in",
    "start": "2325200",
    "end": "2332140"
  },
  {
    "text": "many other cases people would throw exceptions but no no just return an empty one and that's that's gonna solve",
    "start": "2332140",
    "end": "2338770"
  },
  {
    "text": "your problem now this is safe and you can do the same thing with with passing dates and it's exactly the same template",
    "start": "2338770",
    "end": "2345040"
  },
  {
    "text": "here so if you imagine that you have to write a little application that says you",
    "start": "2345040",
    "end": "2351549"
  },
  {
    "text": "know enables you to rent a car what you can do is you could say well the first thing you want to ask you about is you",
    "start": "2351549",
    "end": "2358990"
  },
  {
    "start": "2356000",
    "end": "2867000"
  },
  {
    "text": "know you have a little method there called collect state and when you call that it's gonna ask user okay please input the date on which",
    "start": "2358990",
    "end": "2365310"
  },
  {
    "text": "you want to start your rental and then the user types in a date and that's a string and then you pass the string to",
    "start": "2365310",
    "end": "2371400"
  },
  {
    "text": "try past date and now you have a maybe at a time and then you ask the user okay so for how many days would you like to",
    "start": "2371400",
    "end": "2377700"
  },
  {
    "text": "rent the car and the user types in the answer and that's an a string and then you pass that into a maybe event and",
    "start": "2377700",
    "end": "2384030"
  },
  {
    "text": "then you ask some more questions and once you have asked all the questions you'd like to ask you can start to you",
    "start": "2384030",
    "end": "2390510"
  },
  {
    "text": "know compile all or compose all of those values into a maybe of contract so you",
    "start": "2390510",
    "end": "2395610"
  },
  {
    "text": "can use query syntax and you say from D and MD so D is now because of the way",
    "start": "2395610",
    "end": "2401040"
  },
  {
    "text": "query syntax works D is just a date/time value and you can say from I in MI and",
    "start": "2401040",
    "end": "2406070"
  },
  {
    "text": "is just an IND and then finally you can say select contract and then you could just pass in all those various different",
    "start": "2406070",
    "end": "2412770"
  },
  {
    "text": "primitive values there so what you end up with is a maybe of contract that may",
    "start": "2412770",
    "end": "2418020"
  },
  {
    "text": "or may not actually contain a contract but it's safe no exceptions will be",
    "start": "2418020",
    "end": "2423510"
  },
  {
    "text": "thrown here it's either gonna be there or it's not gonna be there but it's just quite explicit that you have to deal",
    "start": "2423510",
    "end": "2429780"
  },
  {
    "text": "with both cases so so far so good now this is fine but then this is where",
    "start": "2429780",
    "end": "2435630"
  },
  {
    "text": "people start to run into problems because they say well okay contract is a",
    "start": "2435630",
    "end": "2441000"
  },
  {
    "text": "class and it contains some methods that I'd like to call because there's for",
    "start": "2441000",
    "end": "2447180"
  },
  {
    "text": "example a calculate price method and I need to call the calculate price method because I want to show a quote to the",
    "start": "2447180",
    "end": "2454230"
  },
  {
    "text": "user and say this is what that rental is going to cost you so people start doing stuff like this where they say let's",
    "start": "2454230",
    "end": "2460140"
  },
  {
    "text": "declare a decimal called qq4 quote and then we test whether the item is there and if it's there we'll try to you know",
    "start": "2460140",
    "end": "2467100"
  },
  {
    "text": "actually you know get at the item inside and call calculate price on that and again yeah that doesn't compile and I",
    "start": "2467100",
    "end": "2474810"
  },
  {
    "text": "very deliberately designed the API for maybe so that this doesn't compile I hit those you know it has item and item as",
    "start": "2474810",
    "end": "2482910"
  },
  {
    "text": "private fields because you're not supposed to do this because it's brittle you know again what's gonna happen if",
    "start": "2482910",
    "end": "2489300"
  },
  {
    "text": "that boolean expression is false it's gonna it's not gonna leave Q as 0",
    "start": "2489300",
    "end": "2495680"
  },
  {
    "text": "do you want to run the risk of accidentally ending up showing a quote to a user with a price of zero this is",
    "start": "2495680",
    "end": "2504890"
  },
  {
    "text": "what error handling and you know complicated branching will often lead to you know 20 years ago I was doing",
    "start": "2504890",
    "end": "2511270"
  },
  {
    "text": "e-commerce websites and there was actually a bug on this site that did exactly that you know because we would",
    "start": "2511270",
    "end": "2517910"
  },
  {
    "text": "we did something wrong and instead of actually you know pulling prices out of the database or whatever",
    "start": "2517910",
    "end": "2523220"
  },
  {
    "text": "everything was just you know initialized and what's the default value of an integer well that's 0 so everything was",
    "start": "2523220",
    "end": "2529280"
  },
  {
    "text": "just free on the what web shop no it's not a good problem to have",
    "start": "2529280",
    "end": "2534460"
  },
  {
    "text": "so yeah not not a good way to structure your code what should we do instead",
    "start": "2534460",
    "end": "2539690"
  },
  {
    "text": "let's let's try it again we know that maybe of T is a functor so that means we",
    "start": "2539690",
    "end": "2545180"
  },
  {
    "text": "it's a pause a structure preserving map so what if instead we just did something like this where we say let's just it",
    "start": "2545180",
    "end": "2551150"
  },
  {
    "text": "call select on MC and that means inside of that we'll pass a lambda expression that calls see to calculate price and",
    "start": "2551150",
    "end": "2557860"
  },
  {
    "text": "the output of that of that is a maybe of decimal and this is a structure preserving map you know if maybe if",
    "start": "2557860",
    "end": "2563960"
  },
  {
    "text": "contract was populated then the may be of decimals you're also gonna be populated if it was empty then the",
    "start": "2563960",
    "end": "2569030"
  },
  {
    "text": "result is gonna be empty as well but it's safe you don't need to do it then any if else checking it doesn't throw",
    "start": "2569030",
    "end": "2576080"
  },
  {
    "text": "exceptions this is always safe to do so um it's basically answers the question",
    "start": "2576080",
    "end": "2581750"
  },
  {
    "text": "you know how do I get the value out of my monad well you don't you inject the desired behavior into the monad and",
    "start": "2581750",
    "end": "2587270"
  },
  {
    "text": "that's basically what we did you know I just took that calculate price and said it's gonna happen inside the maybe",
    "start": "2587270",
    "end": "2592790"
  },
  {
    "text": "container I'm not taking it out of maybe I'm just putting the behavior inside the",
    "start": "2592790",
    "end": "2598550"
  },
  {
    "text": "container and just you know transforming the the context as I go along if you will so this is safe and that's the way",
    "start": "2598550",
    "end": "2606080"
  },
  {
    "text": "you're supposed to work with monads and I know what you're going to say now I always say well yeah but you know",
    "start": "2606080",
    "end": "2611990"
  },
  {
    "text": "ultimately I need to produce a result and I need to put you know I can't you know display a maybe of decimal on the",
    "start": "2611990",
    "end": "2618530"
  },
  {
    "text": "screen I need to you know give the user price yeah but again you know if you don't have a price you don't want to",
    "start": "2618530",
    "end": "2625100"
  },
  {
    "text": "display zero then you want to display an error message or something like that and that's that's another thing you don't want to",
    "start": "2625100",
    "end": "2630920"
  },
  {
    "text": "get the value out you need to figure out how to arrive at a final result it's not",
    "start": "2630920",
    "end": "2636530"
  },
  {
    "text": "quite the same problem so let's go back to the collections again and see what how do we solve the problem here now",
    "start": "2636530",
    "end": "2643280"
  },
  {
    "text": "sometimes you can just say well okay I have a collection of numbers let's just put all the numbers back you know to on",
    "start": "2643280",
    "end": "2648440"
  },
  {
    "text": "the screen because that's what the user wants but often it's not but then the",
    "start": "2648440",
    "end": "2653480"
  },
  {
    "text": "next question is if if you just want to produce one result after out of an array like this is there a you know ubiquitous",
    "start": "2653480",
    "end": "2660859"
  },
  {
    "text": "single result that you should always produce from an array like this no it",
    "start": "2660859",
    "end": "2666770"
  },
  {
    "text": "depends on what you're trying to do maybe you want the sum and you can call you know a specific method on that that",
    "start": "2666770",
    "end": "2672079"
  },
  {
    "text": "calculates the sum and that's that number then maybe you want the average and I believe there's also a specific",
    "start": "2672079",
    "end": "2677589"
  },
  {
    "text": "method that you need that calculates the average but maybe you want to do something where there's no you know",
    "start": "2677589",
    "end": "2683180"
  },
  {
    "text": "built-in method for it maybe you want to multiply all the numbers together so in",
    "start": "2683180",
    "end": "2690140"
  },
  {
    "text": "order to address all the situations where there's no specialized method for it there's something called aggregate",
    "start": "2690140",
    "end": "2696040"
  },
  {
    "text": "and I'm using an overload here that takes a seed so I set the seat to one",
    "start": "2696040",
    "end": "2701540"
  },
  {
    "text": "and the reason why I do that is it's not really necessary here but if the input array is empty aggregate can't work",
    "start": "2701540",
    "end": "2709250"
  },
  {
    "text": "unless it knows where to start so if the input was empty it would just return the",
    "start": "2709250",
    "end": "2714710"
  },
  {
    "text": "seed the seat and that would be one otherwise that lambda expression to the",
    "start": "2714710",
    "end": "2719780"
  },
  {
    "text": "to the right there is gonna run pairwise for each of the elements starting with the seed in the first element and and in",
    "start": "2719780",
    "end": "2726559"
  },
  {
    "text": "this case I'm just gonna multiply all the values together and the result here is not very interesting because it's zero because one of the numbers inside",
    "start": "2726559",
    "end": "2733309"
  },
  {
    "text": "of that array is zero so not so interesting but the concept of being able to you know produce a single value",
    "start": "2733309",
    "end": "2740750"
  },
  {
    "text": "a single aggregate with the lambda expression and maybe a little seed we can take that concept and also apply",
    "start": "2740750",
    "end": "2746960"
  },
  {
    "text": "that concept to maybe and we can make it annexed in an instance method and I'm",
    "start": "2746960",
    "end": "2752089"
  },
  {
    "text": "gonna call it match so this is an instance method on maybe of T that returns a T result so I'm keeping things",
    "start": "2752089",
    "end": "2759260"
  },
  {
    "text": "flexible here I'm not saying that we should return you know even though this is a maybe of tea I'm not saying we should return a tea we can",
    "start": "2759260",
    "end": "2766600"
  },
  {
    "text": "you know transform as we go and that turns that keeps things flexible so basically it's just you know using the",
    "start": "2766600",
    "end": "2773020"
  },
  {
    "text": "ternary operator it's just a one-liner if has item if that flag is true we know that item is available but item is of",
    "start": "2773020",
    "end": "2780280"
  },
  {
    "text": "the type T we need to transform it into T result because that's the return value",
    "start": "2780280",
    "end": "2785500"
  },
  {
    "text": "that we need and we have a function called just and don't worry about why it's called that is that's just the name",
    "start": "2785500",
    "end": "2791080"
  },
  {
    "text": "that it's called that's a function from T to T results so we can just call that on item and if has item is false if that",
    "start": "2791080",
    "end": "2798910"
  },
  {
    "text": "flag is false we don't have anything but then we have that fallback you know nothing value of the type T we solve",
    "start": "2798910",
    "end": "2804340"
  },
  {
    "text": "them we can return that that's sort of like the seed from the aggregate function there and so this enables us to",
    "start": "2804340",
    "end": "2810970"
  },
  {
    "text": "always aggregate or collapse you know a maybe value into a single value so now",
    "start": "2810970",
    "end": "2817150"
  },
  {
    "text": "we can return to the third part of the talk how do I combine the impotency",
    "start": "2817150",
    "end": "2822580"
  },
  {
    "text": "injection with a sink and a weight without leaky abstractions so we sort of left off by saying well you know when",
    "start": "2822580",
    "end": "2828280"
  },
  {
    "text": "you do a sink it needs to be a sink all the way and then I said well but wait there is an alternative so let's see",
    "start": "2828280",
    "end": "2833650"
  },
  {
    "text": "what that is so what I'm going to do now isn't gonna move the impure operations to the boundary of the system and I'm",
    "start": "2833650",
    "end": "2840100"
  },
  {
    "text": "gonna explain what that means but basically the idea is that you have some interactions with the real world and",
    "start": "2840100",
    "end": "2845500"
  },
  {
    "text": "they tend to be what we call impure and just gonna move those to the boundary of the system and in object-oriented",
    "start": "2845500",
    "end": "2851950"
  },
  {
    "text": "programming terminology we would just say that that supports an adaptive application architecture so this is",
    "start": "2851950",
    "end": "2857950"
  },
  {
    "text": "something that's been a been around for decades and it's a well-known well-respected object oriented",
    "start": "2857950",
    "end": "2863310"
  },
  {
    "text": "architecture so we should be in good hands here now what's an impure",
    "start": "2863310",
    "end": "2868480"
  },
  {
    "start": "2867000",
    "end": "3013000"
  },
  {
    "text": "operation well it's basically just something that interacts with an environment and we have two examples here so I'm I'm just going to explain",
    "start": "2868480",
    "end": "2874270"
  },
  {
    "text": "what impure is but you know by way of example so when you call read reservations you are querying a database",
    "start": "2874270",
    "end": "2880900"
  },
  {
    "text": "so that's probably what you're doing and that is basically a non-deterministic operation because you can query a",
    "start": "2880900",
    "end": "2887590"
  },
  {
    "text": "database with you know let's say I want the I want all the reservations for this",
    "start": "2887590",
    "end": "2892600"
  },
  {
    "text": "Sunday and then you query the database you get some reservations and then ten minutes later you say I want all the reservations for this",
    "start": "2892600",
    "end": "2898780"
  },
  {
    "text": "Sunday so the same input argument but now you get you know a new result back because the state of the database",
    "start": "2898780",
    "end": "2904180"
  },
  {
    "text": "changed and we don't consider the state of the database to be part of the function itself so you know just viewed",
    "start": "2904180",
    "end": "2910599"
  },
  {
    "text": "from the perspective of the code that basically looked random even even though it's not random it is determined by the",
    "start": "2910599",
    "end": "2916539"
  },
  {
    "text": "state of the database we still consider that to be non-deterministic so it's",
    "start": "2916539",
    "end": "2921760"
  },
  {
    "text": "it's things that we'd like to happen you know at the boundary of the system and not inside the domain logic now another",
    "start": "2921760",
    "end": "2929619"
  },
  {
    "text": "problem here is repository create this is problematic for a different reason because it creates a side effect it",
    "start": "2929619",
    "end": "2936400"
  },
  {
    "text": "creates a record in the database it changes the state of the database so everything that has a side effects it's",
    "start": "2936400",
    "end": "2942130"
  },
  {
    "text": "also sometimes in something that well we want this to happen but we just won't don't want to have it to happen deep",
    "start": "2942130",
    "end": "2947680"
  },
  {
    "text": "within our business logic because it makes it difficult to write the appropriate business logic so we'll we",
    "start": "2947680",
    "end": "2953289"
  },
  {
    "text": "want to move both of those things to the boundary of the system so let's start with the first one this is the easiest",
    "start": "2953289",
    "end": "2959170"
  },
  {
    "text": "one to do will them look at repository reservations and we'll notice that this",
    "start": "2959170",
    "end": "2964240"
  },
  {
    "text": "method is always being invoked unconditionally so you could say well",
    "start": "2964240",
    "end": "2969670"
  },
  {
    "text": "why should this try/except method even have this responsibility to call",
    "start": "2969670",
    "end": "2975299"
  },
  {
    "text": "repositories read reservations isn't that just making things more complicated than they have to be why why",
    "start": "2975299",
    "end": "2982059"
  },
  {
    "text": "shouldn't we just say well if you want you know try except to do its work you should tell it how many reservations",
    "start": "2982059",
    "end": "2987819"
  },
  {
    "text": "that are already in the system and we can do that by just saying well instead of calling the method we just make that",
    "start": "2987819",
    "end": "2993250"
  },
  {
    "text": "a requirement for calling the the method for calling the try/except method and",
    "start": "2993250",
    "end": "2998589"
  },
  {
    "text": "that we do that by saying let's promote this to a method document this is a",
    "start": "2998589",
    "end": "3005309"
  },
  {
    "text": "fairly easy change but well sometimes things have to get worse before they get better this is not you know this leaves",
    "start": "3005309",
    "end": "3011220"
  },
  {
    "text": "us a little bit of a bad place because we need to go and change the IMH of the interface in order to make everything compile and then you'd probably say well",
    "start": "3011220",
    "end": "3018690"
  },
  {
    "start": "3013000",
    "end": "3057000"
  },
  {
    "text": "okay so you made a specific implementation change in the try/except method and now you have to change the",
    "start": "3018690",
    "end": "3024210"
  },
  {
    "text": "interface as well at that point you'd probably say well okay that's if that's a leak you know this is",
    "start": "3024210",
    "end": "3030830"
  },
  {
    "text": "a leaky abstraction if I ever saw one that's much worse than the other things that I've talked about so um how can you",
    "start": "3030830",
    "end": "3036710"
  },
  {
    "text": "defend that and I say well you know if I had to stop here I don't think that I could defend it but this is just the",
    "start": "3036710",
    "end": "3044090"
  },
  {
    "text": "first in a series of refactorings that I'm going to do and when I'm done with all the refactorings things are gonna be",
    "start": "3044090",
    "end": "3050300"
  },
  {
    "text": "good so you're just gonna have to trust me for now that this will all end well even though it doesn't look so good",
    "start": "3050300",
    "end": "3055850"
  },
  {
    "text": "right now so going back to the post method on the controller we we have already injected",
    "start": "3055850",
    "end": "3063440"
  },
  {
    "start": "3057000",
    "end": "3166000"
  },
  {
    "text": "the I'm A to D dependency what we can do now is we can just say this also take a dependency on the repository because if",
    "start": "3063440",
    "end": "3069440"
  },
  {
    "text": "we do that we can just call read reservations here instead of inside the mate the maitre d to try accept method",
    "start": "3069440",
    "end": "3074990"
  },
  {
    "text": "and then we can pass those reservations to the try accept method and then all",
    "start": "3074990",
    "end": "3080630"
  },
  {
    "text": "the rest of the code is just the same as before so this is a fairly easy change to make I'm just literally just moving a",
    "start": "3080630",
    "end": "3086930"
  },
  {
    "text": "method call to another place in the code and then I'm done with that so that that",
    "start": "3086930",
    "end": "3092090"
  },
  {
    "text": "wasn't too hard the other change here is a little bit harder because the problem",
    "start": "3092090",
    "end": "3097250"
  },
  {
    "text": "here is that repository to create is not getting executed unconditionally there's",
    "start": "3097250",
    "end": "3104030"
  },
  {
    "text": "a branch a little bit further off that returns null and when that happens you know repository create never gets cold",
    "start": "3104030",
    "end": "3111400"
  },
  {
    "text": "so how do we how do we deal with that problem well if we want to move",
    "start": "3111400",
    "end": "3117860"
  },
  {
    "text": "repository create to the cloning site we sort of have to figure out a way to",
    "start": "3117860",
    "end": "3124720"
  },
  {
    "text": "communicate the decision that we made so that the caller can then act upon that",
    "start": "3124720",
    "end": "3129830"
  },
  {
    "text": "decision so one way we could do that we could say well we already know how to",
    "start": "3129830",
    "end": "3134900"
  },
  {
    "text": "communicate our decision to the caller because we were returning that known honorable int and we talked about how",
    "start": "3134900",
    "end": "3140120"
  },
  {
    "text": "you know a proper integer means you have a reservation ID and that means the X you know the reservation was accepted",
    "start": "3140120",
    "end": "3145640"
  },
  {
    "text": "and null meant that it wasn't so we could do something like that but the problem is that the end potentially if",
    "start": "3145640",
    "end": "3153140"
  },
  {
    "text": "we have an integer that comes from calling repository create because that's the return value from calling repository",
    "start": "3153140",
    "end": "3158510"
  },
  {
    "text": "create so if I move repository create to the all side i no longer have an integer to",
    "start": "3158510",
    "end": "3163730"
  },
  {
    "text": "return so instead of having an integer to return i need something else than an",
    "start": "3163730",
    "end": "3168740"
  },
  {
    "text": "integer I'd like to return you know something like no level of reservation instead but now I'm running into this",
    "start": "3168740",
    "end": "3174890"
  },
  {
    "text": "type constraint unknowable of T that T must be a struct so if instead of using",
    "start": "3174890",
    "end": "3181730"
  },
  {
    "text": "novel of T I'd use maybe of T I can lift that constraint I can get rid of that so the first refactoring I'd like to do",
    "start": "3181730",
    "end": "3189020"
  },
  {
    "text": "is to change my novel of int to inaudible of to a maybe event because",
    "start": "3189020",
    "end": "3194180"
  },
  {
    "text": "that's going to set me up for making another refactoring afterwards so if you just keep your eye on the top line of",
    "start": "3194180",
    "end": "3200840"
  },
  {
    "start": "3199000",
    "end": "3311000"
  },
  {
    "text": "code there where it says nullable int I'm just going to change that to a maybe event and the changes to the code itself",
    "start": "3200840",
    "end": "3206870"
  },
  {
    "text": "are fairly minimal I'm just instead of returning null I'm returning a maybe of in that is empty",
    "start": "3206870",
    "end": "3213590"
  },
  {
    "text": "and instead of returning these integers directly I'm gonna package that integer",
    "start": "3213590",
    "end": "3218840"
  },
  {
    "text": "that comes from repository key trade I'm just gonna package that in a populated maybe so again I'm have to change the",
    "start": "3218840",
    "end": "3224720"
  },
  {
    "text": "OMH of the interface but apart from that but post method I'm still gonna call",
    "start": "3224720",
    "end": "3231500"
  },
  {
    "text": "Maitre D' to try except what I have now though is a maybe event and you saw before that you can't do this check",
    "start": "3231500",
    "end": "3238040"
  },
  {
    "text": "where you say is it populated or not and then sort of do an if-else bronze here by design you're not allowed to do that",
    "start": "3238040",
    "end": "3244730"
  },
  {
    "text": "but what you can do is you can say let's call the match method and if you use argument named arguments you can say",
    "start": "3244730",
    "end": "3251990"
  },
  {
    "text": "well the first argument needs to be the nothing case and that's in that case we kind of return internal server error in",
    "start": "3251990",
    "end": "3257990"
  },
  {
    "text": "the just case we'll need to supply a little function that can turn an integer",
    "start": "3257990",
    "end": "3263020"
  },
  {
    "text": "into an action results so I'm just going to write a little lambda expression that receives the integer ID and just you",
    "start": "3263020",
    "end": "3269660"
  },
  {
    "text": "know returns okay of ID so ID is now guaranteed to be an integer it is not",
    "start": "3269660",
    "end": "3275210"
  },
  {
    "text": "you know something that could be not there it is guaranteed to be there so it's safe to just do that and you don't",
    "start": "3275210",
    "end": "3280760"
  },
  {
    "text": "have to do all sorts of Defense encoding around this because that's part of how functors and monads work right",
    "start": "3280760",
    "end": "3289850"
  },
  {
    "text": "okay so now we're in the position where we can finally move repository create to the boundary of the system so I'm",
    "start": "3289850",
    "end": "3296450"
  },
  {
    "text": "basically just going to take it away but if I do that I don't have an int to return so what I'm going to do instead is I'm gonna return a maybe of",
    "start": "3296450",
    "end": "3303170"
  },
  {
    "text": "reservation so either an empty one or one that that is just the reservation",
    "start": "3303170",
    "end": "3308720"
  },
  {
    "text": "that I just accepted and again I have to change the maitre d interface but that's",
    "start": "3308720",
    "end": "3313850"
  },
  {
    "start": "3311000",
    "end": "3339000"
  },
  {
    "text": "okay it's gonna be okay and if I do that I now have a maybe of reservation and",
    "start": "3313850",
    "end": "3319480"
  },
  {
    "text": "remember that the the contract that I have with my HTTP client is that in the",
    "start": "3319480",
    "end": "3325850"
  },
  {
    "text": "case where I returned 200 okay I should return an integer which is the reservation ID and right now I don't",
    "start": "3325850",
    "end": "3332840"
  },
  {
    "text": "have an integer how do i turn my maybe a reservation into a maybe of int I call",
    "start": "3332840",
    "end": "3338810"
  },
  {
    "text": "the Select method so I'll just do that and I say well I'm just gonna you know take whatever reservation is inside if",
    "start": "3338810",
    "end": "3345110"
  },
  {
    "text": "there is one and I'm gonna call repository create and repository create returns an int so now I have a maybe",
    "start": "3345110",
    "end": "3351950"
  },
  {
    "text": "event but not quite I actually have a maybe of a task of an int because this is asynchronous but it's okay",
    "start": "3351950",
    "end": "3358820"
  },
  {
    "text": "you know task is a monad maybe as a monad and that combination also turns out to be a monad so all is good still",
    "start": "3358820",
    "end": "3367390"
  },
  {
    "text": "the match method looks a little bit awkward right now we'll fix it up and make it prettier later on but it's",
    "start": "3367390",
    "end": "3373250"
  },
  {
    "start": "3368000",
    "end": "3381000"
  },
  {
    "text": "because we have this combination of maybe and tasks it looks a little bit odd with the task from resolves and stuff like that but don't worry about",
    "start": "3373250",
    "end": "3379310"
  },
  {
    "text": "that that's got to be pretty as well but we have a compiler warning now if we go",
    "start": "3379310",
    "end": "3384650"
  },
  {
    "start": "3381000",
    "end": "3408000"
  },
  {
    "text": "back to try except it says this async method lacks await operators and yeah it",
    "start": "3384650",
    "end": "3391250"
  },
  {
    "text": "does it says async but there's no weight because I deliberately try to get rid of those and I actually succeeded now so",
    "start": "3391250",
    "end": "3397490"
  },
  {
    "text": "yes a you know bang just away with that you know no reason to make this asynchronous this was what bothered me",
    "start": "3397490",
    "end": "3403490"
  },
  {
    "text": "originally and now I've solved my problem Maitre D' now looks like this it",
    "start": "3403490",
    "end": "3409490"
  },
  {
    "start": "3408000",
    "end": "3432000"
  },
  {
    "text": "still looks leaky will still solve that problem but the only change we have to",
    "start": "3409490",
    "end": "3416240"
  },
  {
    "text": "make to the post method is that Maitre D' two tracks have used to be asynchronous it's not anymore so we'll just remove the wait keyword",
    "start": "3416240",
    "end": "3423470"
  },
  {
    "text": "I'll just do it one more time if you weren't paying attention you know it says I wait there now it doesn't say you're wait that's the only change cool",
    "start": "3423470",
    "end": "3432460"
  },
  {
    "start": "3432000",
    "end": "3450000"
  },
  {
    "text": "one more thing we can do it just gets it just gets better and better once you sort of crack the not just you you guess",
    "start": "3432460",
    "end": "3438230"
  },
  {
    "text": "you could just keep improving these things because now we go back to the maitre d object here again and we say",
    "start": "3438230",
    "end": "3443630"
  },
  {
    "text": "well gee that you know repository dependency it's not being used a weight",
    "start": "3443630",
    "end": "3450950"
  },
  {
    "start": "3450000",
    "end": "3498000"
  },
  {
    "text": "with that you know that just simplifies things as well so what we have now is pretty much close to what we could call",
    "start": "3450950",
    "end": "3457820"
  },
  {
    "text": "a pure function well it's in quotes because there is saying this is state mutation happening on the penultimate",
    "start": "3457820",
    "end": "3463640"
  },
  {
    "text": "line there and says it's except it's it's that's true so we could address",
    "start": "3463640",
    "end": "3469700"
  },
  {
    "text": "that concern if we were concerned with that but the major point here is that this is now entirely deterministic you",
    "start": "3469700",
    "end": "3477050"
  },
  {
    "text": "know the way that this code is going to execute only depends on the input arguments and nothing else there are no",
    "start": "3477050",
    "end": "3483500"
  },
  {
    "text": "other dependencies involved that will in you know influence how this code executes and them easy completely",
    "start": "3483500",
    "end": "3489920"
  },
  {
    "text": "deterministic we can control exactly what happens just by making sure that it gets the appropriate input values so if",
    "start": "3489920",
    "end": "3498140"
  },
  {
    "text": "we go back and look at the post method we'd say well why do we have that I Maitre D' dependency there and some of",
    "start": "3498140",
    "end": "3507109"
  },
  {
    "text": "you may say well it's it's really there because we need to be able to unit test the controller and then you know with",
    "start": "3507109",
    "end": "3513260"
  },
  {
    "text": "unit testing we can create a test double you know a mock or stop and then we can control how Maitre D' depends but then I",
    "start": "3513260",
    "end": "3520520"
  },
  {
    "text": "say well yeah but you know with the maitre d the way that I've implemented that now you can control how it behaves",
    "start": "3520520",
    "end": "3527330"
  },
  {
    "text": "you just make have to make sure that it receives the appropriate input values so this is just as deterministic as hiding",
    "start": "3527330",
    "end": "3533480"
  },
  {
    "text": "it behind a mock or stop so if you make that change you've removed the IMHO d",
    "start": "3533480",
    "end": "3539050"
  },
  {
    "start": "3539000",
    "end": "3549000"
  },
  {
    "text": "dependency and if you do this consistently you don't lead the interface anymore so you can just get",
    "start": "3539050",
    "end": "3544220"
  },
  {
    "text": "rid of it so that's why you know in the end it doesn't matter because that that's now gone I'm running out of time",
    "start": "3544220",
    "end": "3550070"
  },
  {
    "start": "3549000",
    "end": "3556000"
  },
  {
    "text": "so I'm just going to wrap up here this still looks a little bit odd but we can",
    "start": "3550070",
    "end": "3555859"
  },
  {
    "text": "make it prettier if you're interested in exactly how you get from that you know previous example",
    "start": "3555859",
    "end": "3563339"
  },
  {
    "start": "3556000",
    "end": "3600000"
  },
  {
    "text": "to this I have a blog post and a lot of all the source code is on github so you can sort of read through this but you'll",
    "start": "3563339",
    "end": "3569279"
  },
  {
    "text": "notice that we start out by calling repository to read reservations and then we go select select many and stuff like",
    "start": "3569279",
    "end": "3575249"
  },
  {
    "text": "that so since we can call select many less there must be a monad somewhere and",
    "start": "3575249",
    "end": "3580529"
  },
  {
    "text": "which one is that well it's the task of team monad or the async monad if you will so you'll notice that everything",
    "start": "3580529",
    "end": "3587759"
  },
  {
    "text": "that needs to be asynchronous is still asynchronous you know read reservations on the top line or the first line there",
    "start": "3587759",
    "end": "3594869"
  },
  {
    "text": "that's an asynchronous operation and I just continued that asynchronous operation by going select on the tasks",
    "start": "3594869",
    "end": "3601200"
  },
  {
    "text": "of T and then you know I also had a little bit further down I have you know repository create this is also an e",
    "start": "3601200",
    "end": "3607979"
  },
  {
    "text": "synchronous method and it needs to be asynchronous and it is so that's all fine and the post way that itself is",
    "start": "3607979",
    "end": "3614849"
  },
  {
    "text": "asynchronous because it returns a task of async result of action result so",
    "start": "3614849",
    "end": "3620190"
  },
  {
    "text": "everything that needs to be asynchronous is asynchronous but the domain model I just injected that into the asynchronous",
    "start": "3620190",
    "end": "3627059"
  },
  {
    "text": "context but it's actually synchronous but it's just sitting there in the asynchronous context and doesn't know",
    "start": "3627059",
    "end": "3632400"
  },
  {
    "text": "that it's now being part of an asynchronous workflow it's just doing whatever it's designed to do so how do",
    "start": "3632400",
    "end": "3639719"
  },
  {
    "text": "we combine asing in a weight without leaky abstractions well you inject the desired behavior into the async monad or",
    "start": "3639719",
    "end": "3645539"
  },
  {
    "text": "the task of T monad and this is just a specialization of the answer that we",
    "start": "3645539",
    "end": "3650880"
  },
  {
    "text": "already arrive that with monads you just inject the desired behavior into the monad so we should have known this",
    "start": "3650880",
    "end": "3655950"
  },
  {
    "text": "already so behavior injection not dependency injection so if you want to",
    "start": "3655950",
    "end": "3663690"
  },
  {
    "text": "know more I have articles that run you through all of the code that I've shown you here and there's a link to github as",
    "start": "3663690",
    "end": "3669779"
  },
  {
    "text": "well with all the code there and right now if you're concerned about the that I",
    "start": "3669779",
    "end": "3677309"
  },
  {
    "text": "remove that I'm a 2d interface and say well but the implementation is deterministic I'm currently in the",
    "start": "3677309",
    "end": "3683759"
  },
  {
    "text": "process of publishing articles that talk about that problem as well so",
    "start": "3683759",
    "end": "3689510"
  },
  {
    "text": "I've written them but they're not all published yet so if you follow me on Twitter or if you subscribe to the blog",
    "start": "3689510",
    "end": "3694940"
  },
  {
    "text": "then you'll get notified when those are available as well and with that I'm I'm",
    "start": "3694940",
    "end": "3700490"
  },
  {
    "text": "a little bit over time and I apologize for that so I'm not gonna take any questions but I'm gonna hang around in",
    "start": "3700490",
    "end": "3706430"
  },
  {
    "text": "the conference and I'll be happy to talk to you if you have questions for me but those of you who just want to get out",
    "start": "3706430",
    "end": "3711619"
  },
  {
    "text": "you're welcome to just run away in right now but thank you for coming [Applause]",
    "start": "3711619",
    "end": "3726219"
  },
  {
    "text": "Hey [Music]",
    "start": "3727470",
    "end": "3734449"
  }
]