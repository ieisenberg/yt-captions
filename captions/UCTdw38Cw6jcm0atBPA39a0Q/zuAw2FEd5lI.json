[
  {
    "text": "[Music] uh okay guys I think we can start uh do you hear me all right good okay good",
    "start": "3230",
    "end": "10880"
  },
  {
    "text": "morning everyone I hope you're having a great day the first day of this incredible conference in Porto and I'm",
    "start": "10880",
    "end": "16520"
  },
  {
    "text": "excited to be here today to be speaking about react server components so this Talk's topic is react",
    "start": "16520",
    "end": "23160"
  },
  {
    "text": "Serv components first why should you care about them obviously react and JavaScript is ever relevant and with RSC",
    "start": "23160",
    "end": "31039"
  },
  {
    "text": "we have a completely new way to build react apps so react server components",
    "start": "31039",
    "end": "36160"
  },
  {
    "text": "allow us to fade the boundary between the server and the client um to create Rich user interfaces with minimal client",
    "start": "36160",
    "end": "43160"
  },
  {
    "text": "side code while still maintaining interactivity and performance so my goal today is to introduce and motivate and",
    "start": "43160",
    "end": "50199"
  },
  {
    "text": "provide resources about RSC as a nonfrontal developer you will be able to get an understanding of um",
    "start": "50199",
    "end": "57160"
  },
  {
    "text": "what's happening on the frontend side of things and as a frontend developer you will get the tools needed to start",
    "start": "57160",
    "end": "62879"
  },
  {
    "text": "building apps with RSC and consider them for your next project before I start let me introduce",
    "start": "62879",
    "end": "69520"
  },
  {
    "text": "myself my name is Aurora Walberg I'm from Norway and I work as a consultant at ineta in Alo I'm a fullstack",
    "start": "69520",
    "end": "76720"
  },
  {
    "text": "developer but I work mostly on web these days and I'm active actively building with RC in my current consultancy",
    "start": "76720",
    "end": "83759"
  },
  {
    "text": "project and I bring to you today uh my view as a developer joining the cunning Edge web world and howar learning and",
    "start": "83759",
    "end": "90280"
  },
  {
    "text": "working with modern technology so the talking points of",
    "start": "90280",
    "end": "95799"
  },
  {
    "text": "today will be first rendering strategies then we'll get to react Ser components what they are how they work and what are",
    "start": "95799",
    "end": "103280"
  },
  {
    "text": "the benefits and the drawbacks and then we'll go through nextjs 13 and the app",
    "start": "103280",
    "end": "108439"
  },
  {
    "text": "router then on to best practices and patterns when using RSC in nextjs and",
    "start": "108439",
    "end": "114200"
  },
  {
    "text": "then afterwards I'll show you some examples of RC in a demo app that I've made and finally um give my thoughts on",
    "start": "114200",
    "end": "120880"
  },
  {
    "text": "working with RC in a real project as well as the future of react server",
    "start": "120880",
    "end": "126438"
  },
  {
    "text": "[Applause] components let's begin with rendering",
    "start": "129220",
    "end": "134640"
  },
  {
    "text": "strategies you can't have a talk about web development without mentioning them it's a crucial prerequisite and I won't",
    "start": "134640",
    "end": "140920"
  },
  {
    "text": "mention every type of rendering strategy and the history of the web here but I will pick and explain some relevant topics and this stuff will probably be",
    "start": "140920",
    "end": "147760"
  },
  {
    "text": "familiar to a lot of you so first static website rendering it's the most basic",
    "start": "147760",
    "end": "153040"
  },
  {
    "text": "rendering pattern where all web pages are assembled beforehand and uploaded as static files to a storage bucket and it",
    "start": "153040",
    "end": "159440"
  },
  {
    "text": "can be built with plain HTML or um combined with CSS and JavaScript and it's delivered exactly the way it's",
    "start": "159440",
    "end": "165280"
  },
  {
    "text": "stored meaning uh nothing will change unless the code is changed and although quite simple and efficient it doesn't",
    "start": "165280",
    "end": "171680"
  },
  {
    "text": "handle Dynamic data or interactive websites well and it's imprac impractical to maintain a use case for",
    "start": "171680",
    "end": "178800"
  },
  {
    "text": "this could be an information website for a business multi-page applications on the",
    "start": "178800",
    "end": "184840"
  },
  {
    "text": "other hand uh can handle Dynamic data in an MPA HTML and data is merged on the",
    "start": "184840",
    "end": "190480"
  },
  {
    "text": "server per request and the user will open a browser and be served the merge result and the",
    "start": "190480",
    "end": "196720"
  },
  {
    "text": "entire page will reload uh per request or navigation to a new page they can be",
    "start": "196720",
    "end": "201799"
  },
  {
    "text": "created with for example the asp.net MVC pattern or with PHP or Ruby on Rails use",
    "start": "201799",
    "end": "208360"
  },
  {
    "text": "case would typically be an e commer app for example Amazon is an NPA so what are the pros of npas firstly",
    "start": "208360",
    "end": "217120"
  },
  {
    "text": "all the page content can be read and indexed by search engines because it's render HTML allowing them to appear in",
    "start": "217120",
    "end": "223480"
  },
  {
    "text": "search results and be optimized for it then there is no restriction on the number of pages that you can add",
    "start": "223480",
    "end": "229560"
  },
  {
    "text": "performance will be the same meaning they have unlimited scalability and last they can provide more website insights",
    "start": "229560",
    "end": "236360"
  },
  {
    "text": "for example Google analytics can create reports for each page",
    "start": "236360",
    "end": "241680"
  },
  {
    "text": "and the cons they have slower overall performance because they reload on every navigation and they also require more",
    "start": "241879",
    "end": "248560"
  },
  {
    "text": "effort to create features and they can be harder to maintain because each page needs to be maintained",
    "start": "248560",
    "end": "255879"
  },
  {
    "text": "separately then we have the single page application or Spa the spa will",
    "start": "256560",
    "end": "261600"
  },
  {
    "text": "typically be a react app of create react app or VD or an angular app VJs app Etc",
    "start": "261600",
    "end": "267479"
  },
  {
    "text": "it's been the most common way to build an application for many years and in a spa the bundle.js file includes",
    "start": "267479",
    "end": "274440"
  },
  {
    "text": "everything you need to build the app and the entire HTML is created on the client when a user opens the browser on the",
    "start": "274440",
    "end": "280520"
  },
  {
    "text": "apps URL and the page will be blank until the JavaScript is downloaded parsed and executed and then react",
    "start": "280520",
    "end": "286960"
  },
  {
    "text": "starts building uh inside the root div and finally loads the data and after it's loaded only data in Json format is",
    "start": "286960",
    "end": "293800"
  },
  {
    "text": "needed to update the UI the use case for a single page application can be any web app that",
    "start": "293800",
    "end": "299280"
  },
  {
    "text": "needs to be highly interactive so what are the pros of s",
    "start": "299280",
    "end": "304960"
  },
  {
    "text": "Spas first they're fast they're noow lag they've got smooth Transitions and instant information present after the",
    "start": "304960",
    "end": "311479"
  },
  {
    "text": "initial load second they're easy to debug because everything can be logged in the browser because it's browser only",
    "start": "311479",
    "end": "318039"
  },
  {
    "text": "such as data page elements and network operations third they use less bandwidth",
    "start": "318039",
    "end": "323319"
  },
  {
    "text": "because pages are only loaded once and fourth since everything is downloaded initially they can work offline",
    "start": "323319",
    "end": "328960"
  },
  {
    "text": "afterwards cach data and then update when possible but there are some significant",
    "start": "328960",
    "end": "334919"
  },
  {
    "text": "cons most importantly they have a slow initial load which is increased with everything that is built on top such as",
    "start": "334919",
    "end": "341479"
  },
  {
    "text": "libraries and meanwhile the user is just looking at a blank screen and then afterwards a bunch of loading",
    "start": "341479",
    "end": "346720"
  },
  {
    "text": "Spinners next search engines like Google cannot know what's on the page because crawlers read strings like HTML and so",
    "start": "346720",
    "end": "354319"
  },
  {
    "text": "typically a spa won't sh show up in the search results un unless they're optimized in certain ways",
    "start": "354319",
    "end": "360160"
  },
  {
    "text": "they also need JavaScript to function and therefore they cannot be progressively enhanced and furthermore",
    "start": "360160",
    "end": "365720"
  },
  {
    "text": "they require tools existent in modern browsers and they use a lot of resources and finally they cannot hide information",
    "start": "365720",
    "end": "372440"
  },
  {
    "text": "from the client because the data only exists there meaning things such as API Keys cannot be stored in a spa for that",
    "start": "372440",
    "end": "378520"
  },
  {
    "text": "they need a backend or a servess function so the key difference between",
    "start": "378520",
    "end": "383960"
  },
  {
    "text": "an SBA and an NPA in an SBA everything loads initially and then only data in Json format is required from making",
    "start": "383960",
    "end": "389880"
  },
  {
    "text": "updates whereas in an MPA the entire page reloads per",
    "start": "389880",
    "end": "395319"
  },
  {
    "text": "request this brings us to SSR which combines the advantages of MPA and an",
    "start": "404160",
    "end": "409680"
  },
  {
    "text": "Spa so instead of generating the entire application on the client from the JavaScript bundle server side rendering",
    "start": "409680",
    "end": "415759"
  },
  {
    "text": "means that you can pre-render the initial pages on the server and then send them on demand so this lets the",
    "start": "415759",
    "end": "421440"
  },
  {
    "text": "user go to URL and instantly see a fully formed page with components and then the JavaScript required to interact with a",
    "start": "421440",
    "end": "427680"
  },
  {
    "text": "page is sent alongside the HTML in relation to SSR we also have something called Static site generation",
    "start": "427680",
    "end": "434560"
  },
  {
    "text": "or SSG which lets us pre-render pages in The build process of the app and upload them to a storage bucket the result of",
    "start": "434560",
    "end": "441960"
  },
  {
    "text": "SSG is the same as with quick and simple static website rendering but we can generate the pages from for example",
    "start": "441960",
    "end": "448199"
  },
  {
    "text": "react code a problem with SSG is that the build time scales linearly with the number of",
    "start": "448199",
    "end": "453800"
  },
  {
    "text": "pages meaning if you have a lot of pages you could be waiting a long time for your app to build and also you have to",
    "start": "453800",
    "end": "459960"
  },
  {
    "text": "rebuild and redeploy your site whenever data changes server side rendering is",
    "start": "459960",
    "end": "466520"
  },
  {
    "text": "implemented in so-called meta Frameworks which are Frameworks around other JavaScript Frameworks such as remix and",
    "start": "466520",
    "end": "472240"
  },
  {
    "text": "next per react spell kit for spell next for View and these Frameworks are full stack implementations of a web app",
    "start": "472240",
    "end": "478879"
  },
  {
    "text": "meaning they they have their own server with things happening on and they support both SSR and SSG and can decide",
    "start": "478879",
    "end": "485759"
  },
  {
    "text": "when to use what for example an app has a couple of pages which one has data that is changing in the build process",
    "start": "485759",
    "end": "492120"
  },
  {
    "text": "all the static pages are rendered and when the user opens the app only the page that has Dynamic data will be",
    "start": "492120",
    "end": "497680"
  },
  {
    "text": "rendered at request time and these meta Frameworks typically also include include things that um like",
    "start": "497680",
    "end": "504039"
  },
  {
    "text": "file based routing apis to handle data fetching on the server uh caching capabilities and image optimization",
    "start": "504039",
    "end": "511760"
  },
  {
    "text": "features let's get back to that JavaScript that is sent along with the pre-rendered pages in SSR we still need",
    "start": "511760",
    "end": "518479"
  },
  {
    "text": "JavaScript to run on the client to handle any interactivity so instead of conjuring all the dumb nodes from",
    "start": "518479",
    "end": "524039"
  },
  {
    "text": "scratch the framework like react will adopt the existing HTML and this process",
    "start": "524039",
    "end": "529279"
  },
  {
    "text": "is known as hydration the framework will attach the event handlers and for example fire effects and AD State and",
    "start": "529279",
    "end": "535880"
  },
  {
    "text": "afterwards the page is fully interactive however it is essentially has to rebuild the entire tree and",
    "start": "535880",
    "end": "541519"
  },
  {
    "text": "compare with the existing one to know what to hydrate this quote by react cor team",
    "start": "541519",
    "end": "547440"
  },
  {
    "text": "member Dan abov explains it well hydration is like watering the dry HTML with the water of interactivity and",
    "start": "547440",
    "end": "553640"
  },
  {
    "text": "event handlers so there you have SSR in a nutshell done by modern Frameworks like",
    "start": "553640",
    "end": "560360"
  },
  {
    "text": "nextjs it lets you load the initial page quickly yet still have an interactive",
    "start": "560360",
    "end": "566639"
  },
  {
    "text": "Spa now this sounds great however SSR isn't perfect first after the initial",
    "start": "568120",
    "end": "574160"
  },
  {
    "text": "fetch of the HML can the browser uh download the JS code pars it and then execute it and this causes the",
    "start": "574160",
    "end": "579920"
  },
  {
    "text": "pre-rendered HML to look interactive but in fact it doesn't contain any JavaScript yet so the user is stuck in a",
    "start": "579920",
    "end": "586680"
  },
  {
    "text": "place often referent as uncanny valley where they will click a button but nothing happens and the time until they",
    "start": "586680",
    "end": "593000"
  },
  {
    "text": "can interact with the app might even be longer for a plain Spa version of the app why why does this happen first you",
    "start": "593000",
    "end": "601240"
  },
  {
    "text": "have to fetch everything before you can load anything all the HTML with the data fetch must be processed on the server",
    "start": "601240",
    "end": "607200"
  },
  {
    "text": "before it can be sent to the client secondly you have to load everything before you can hydrate everything",
    "start": "607200",
    "end": "613120"
  },
  {
    "text": "anything that's because react needs to match the three browser with the one from the server third you have to",
    "start": "613120",
    "end": "619640"
  },
  {
    "text": "hydrate everything before you can interact with everything um react starts the hydration and then it doesn't stop",
    "start": "619640",
    "end": "625120"
  },
  {
    "text": "until it's done there are many techniques being utilized in different Frameworks to",
    "start": "625120",
    "end": "630880"
  },
  {
    "text": "solve the hydration problem partial hydration can be used to define that only certain components need to have Js",
    "start": "630880",
    "end": "637519"
  },
  {
    "text": "attached to them for example in Astro you can define components to hydrate with the direct directive client load",
    "start": "637519",
    "end": "644160"
  },
  {
    "text": "and you will also see this in reary components later with Progressive hydration you can lazily load components",
    "start": "644160",
    "end": "650600"
  },
  {
    "text": "JavaScript for example with Astros client visible or with suspense in react",
    "start": "650600",
    "end": "656040"
  },
  {
    "text": "18 selective hydration lets you prioritize which which component to make interactive first based on user",
    "start": "656040",
    "end": "661880"
  },
  {
    "text": "interaction and this can also be done with suspense and there are a bunch of ways being implemented another framework",
    "start": "661880",
    "end": "667680"
  },
  {
    "text": "such as with resum ability and quick let's also mention the concept of",
    "start": "667680",
    "end": "673240"
  },
  {
    "text": "streaming it's a part of the fetch API of es6 and it's available in react 18",
    "start": "673240",
    "end": "678880"
  },
  {
    "text": "and it's a big part of react server components performance streaming allows you to break down a request into smaller",
    "start": "678880",
    "end": "684800"
  },
  {
    "text": "chunks and progressively send those chunks from the server to the client then render each chunk as it's streamed",
    "start": "684800",
    "end": "690639"
  },
  {
    "text": "in we can use it to send components down to the client as soon as they've been",
    "start": "690639",
    "end": "696440"
  },
  {
    "text": "generated finally with all this knowledge we can move to react surf components and how they solve the",
    "start": "697279",
    "end": "703079"
  },
  {
    "text": "problems we saw earlier what if we could decide when we needed the behavior of a spa or an MPA or SSR all in the same",
    "start": "703079",
    "end": "710959"
  },
  {
    "text": "stack I'm going to be using some simplified examples of code from my demo app in this section",
    "start": "710959",
    "end": "717839"
  },
  {
    "text": "here so what are they react server components are components that run exclusively on the server and are then",
    "start": "717959",
    "end": "725040"
  },
  {
    "text": "streamed to the client server components never reender they earn once on the server to generate the UI and their",
    "start": "725040",
    "end": "731720"
  },
  {
    "text": "JavaScript is never sent to the client and when I say render on the",
    "start": "731720",
    "end": "737560"
  },
  {
    "text": "server I mean the server that is part of the full stack framework uh such as nextjs or during the build process of",
    "start": "737560",
    "end": "743839"
  },
  {
    "text": "the app Nots net backend API this is the front end's own backend which in cases",
    "start": "743839",
    "end": "749440"
  },
  {
    "text": "eliminate the need for writing a net",
    "start": "749440",
    "end": "753160"
  },
  {
    "text": "API server components differ from serverside rendering because they are never hydrated meaning the resulting app",
    "start": "759199",
    "end": "766040"
  },
  {
    "text": "is partially hydrated hydration to non RC components can happen concurrently",
    "start": "766040",
    "end": "771480"
  },
  {
    "text": "with RC streaming in since the compute load is shared between the client and the",
    "start": "771480",
    "end": "777079"
  },
  {
    "text": "server and since our Es are run exclusively on the server we can write database queries right inside our",
    "start": "777079",
    "end": "783320"
  },
  {
    "text": "components here's an example of a simple server component called jokes list I can query my database uh through an orm like",
    "start": "783320",
    "end": "790160"
  },
  {
    "text": "Prisma and have the data available and fully rendered before it's sent to the client server components introduce async",
    "start": "790160",
    "end": "797720"
  },
  {
    "text": "components basically an async function that can asynchronously fetch data on the server without causing any issues",
    "start": "797720",
    "end": "804399"
  },
  {
    "text": "for the client side and you can do any kind of data fetching in here such as calling your API",
    "start": "804399",
    "end": "810760"
  },
  {
    "text": "because react server components only render on the server this means that a big chunk of react API is incompatible",
    "start": "811600",
    "end": "818000"
  },
  {
    "text": "with them for example we can't use State because State can change but server components can't reender and we can't",
    "start": "818000",
    "end": "824800"
  },
  {
    "text": "use effects because effects only run after the render and on the client and the server components never make it to",
    "start": "824800",
    "end": "830040"
  },
  {
    "text": "the client we also can't use any browser specific API such as window.location uh because they don't",
    "start": "830040",
    "end": "836399"
  },
  {
    "text": "exist on the server and we can't use onclick and on change because they require JavaScript server components themselves",
    "start": "836399",
    "end": "843959"
  },
  {
    "text": "are simple but the react server component world is more complex because we still want to have interactive",
    "start": "843959",
    "end": "850199"
  },
  {
    "text": "components that include State and effects and event handlers so because of this distinction",
    "start": "850199",
    "end": "856519"
  },
  {
    "text": "there are now two types of react components server components and client components client components are the",
    "start": "856519",
    "end": "863120"
  },
  {
    "text": "normal react components that you can do whatever you want you're used to inside note that there are still pre-render",
    "start": "863120",
    "end": "869000"
  },
  {
    "text": "during uh the build and then hydrated on the client as with pre-existing",
    "start": "869000",
    "end": "874560"
  },
  {
    "text": "SSR however client components must be marked with use client this allows us to",
    "start": "875160",
    "end": "880759"
  },
  {
    "text": "use things like State and effects and on click as",
    "start": "880759",
    "end": "885279"
  },
  {
    "text": "normal here's an explanation from the nextjs app router docs on the limitations in server and client",
    "start": "886440",
    "end": "892160"
  },
  {
    "text": "components if you need to fetch data access backend resources Keem sensitive information off uh on the server or keep",
    "start": "892160",
    "end": "898680"
  },
  {
    "text": "keep large dependencies on the server use a server component and then if you need to add interactivity like on click",
    "start": "898680",
    "end": "904959"
  },
  {
    "text": "on change or state or effects or browser only apis use a client",
    "start": "904959",
    "end": "910920"
  },
  {
    "text": "component how do they work uh what happens is that react server components",
    "start": "910920",
    "end": "916399"
  },
  {
    "text": "are rendered into a special format called the RC payload it's a streamable format that uh represents the Dom and",
    "start": "916399",
    "end": "923880"
  },
  {
    "text": "it's like a Serial serialized version of a reactory the RSC payload contains the",
    "start": "923880",
    "end": "929759"
  },
  {
    "text": "rendered server components with holes of references to client components and the props they pass down to them it's used",
    "start": "929759",
    "end": "937240"
  },
  {
    "text": "uh both to generate the pre-render HTML on the server and to update the Dom on the client without a need for",
    "start": "937240",
    "end": "945160"
  },
  {
    "text": "JavaScript here's what it looks like in the console we have the service side render jokes HTML as well as the RC",
    "start": "945440",
    "end": "951600"
  },
  {
    "text": "payload and multiple clients side JS bundles they are used together to create the interactive page since since the",
    "start": "951600",
    "end": "958880"
  },
  {
    "text": "jokes this component is defined as server only it doesn't need to be hydrated at all and this JavaScript",
    "start": "958880",
    "end": "964639"
  },
  {
    "text": "isn't chipped as with everything it's quite complex when you start digging so let's leave it at that for",
    "start": "964639",
    "end": "971199"
  },
  {
    "text": "now when an RC needs to be rendered due to data change it refreshes on the",
    "start": "971199",
    "end": "977079"
  },
  {
    "text": "server and then seamlessly merges into the existing Dom without a hard refresh",
    "start": "977079",
    "end": "982279"
  },
  {
    "text": "updating only the parts that have changed as a result the client state is preserved even as parts of The View is",
    "start": "982279",
    "end": "989040"
  },
  {
    "text": "updated from the server and this is possible because the RC payload only contains references to client components",
    "start": "989040",
    "end": "995480"
  },
  {
    "text": "and can leave them untouched what are the benefits of using",
    "start": "995480",
    "end": "1000880"
  },
  {
    "text": "R react server components firstly data fetching data",
    "start": "1000880",
    "end": "1006399"
  },
  {
    "text": "fetching can happen before they are sent to the client uh and will be faster since RC's can call the apri database in",
    "start": "1006399",
    "end": "1012639"
  },
  {
    "text": "proximity to the resource as we saw in the jokes list example with Prisma and",
    "start": "1012639",
    "end": "1017680"
  },
  {
    "text": "inside RSC you have access to all your backend resources next they can increase",
    "start": "1017680",
    "end": "1023839"
  },
  {
    "text": "security by keeping sensitive data and logic like API keys on the server and never risk exposing",
    "start": "1023839",
    "end": "1029918"
  },
  {
    "text": "them then caching by rendering on the server the result can be cached and reused on subsequent requests and across",
    "start": "1029919",
    "end": "1037798"
  },
  {
    "text": "users and bundle size server components allow you to keep large dependencies on the server meaning you can exclude all",
    "start": "1037799",
    "end": "1044760"
  },
  {
    "text": "that JS for those components from the bundle without restricting your user them for example a library like low Dash",
    "start": "1044760",
    "end": "1052080"
  },
  {
    "text": "uh which leads to more performant application server components can",
    "start": "1052080",
    "end": "1057200"
  },
  {
    "text": "furthermore be streamed meaning they can be sent in chunks and then viewed as they become ready therefore they",
    "start": "1057200",
    "end": "1062960"
  },
  {
    "text": "integrate naturally with react 18 suspense finally developer experience",
    "start": "1062960",
    "end": "1069840"
  },
  {
    "text": "there's a lot less hassle on the client side with effects and keeping data on the state just fetch it async off the",
    "start": "1069840",
    "end": "1077200"
  },
  {
    "text": "client RC however comes with some drawbacks firstly they need a framework",
    "start": "1077400",
    "end": "1084520"
  },
  {
    "text": "in practice you will only be using them in Frameworks like SNS which is per now the only reasonable way to use",
    "start": "1084520",
    "end": "1091640"
  },
  {
    "text": "them they also create increase complexity as a web developer you now",
    "start": "1091640",
    "end": "1096799"
  },
  {
    "text": "need to understand a lot more Concepts such as um what you can't do what you can and can't do on the server which you",
    "start": "1096799",
    "end": "1102720"
  },
  {
    "text": "didn't have to think about when you were just making a spa uh with create react app next it can be hard to onboard new",
    "start": "1102720",
    "end": "1110360"
  },
  {
    "text": "developers because the learning curve is a lot steeper when aiming to write quality apps and finally it's still relatively",
    "start": "1110360",
    "end": "1118120"
  },
  {
    "text": "new and not everything has been figured out such as testing and comp compatibility with other Frameworks uh",
    "start": "1118120",
    "end": "1123440"
  },
  {
    "text": "sorry libraries which I will get back to and you risk having to refactor things or write specific workarounds for",
    "start": "1123440",
    "end": "1130240"
  },
  {
    "text": "example material youi just recently became",
    "start": "1130240",
    "end": "1134640"
  },
  {
    "text": "compatible how can you get started with RSD as mentioned the only reasonable way",
    "start": "1135280",
    "end": "1140960"
  },
  {
    "text": "right now is with the nextjs 13 app router so nextjs is made by versel and",
    "start": "1140960",
    "end": "1146600"
  },
  {
    "text": "is Battle tested and Enterprise ready and react server components are part of react 18 but they've been developed",
    "start": "1146600",
    "end": "1152880"
  },
  {
    "text": "closely with versel and next 13 which is good for building apps with them because everything is optimized and working",
    "start": "1152880",
    "end": "1159000"
  },
  {
    "text": "smoothly and as well as having the entire react ecosystem follow to make your next js13 app run",
    "start": "1159000",
    "end": "1167039"
  },
  {
    "text": "this npx create command and define whether you want typescript and tailwind and such and you will need the app",
    "start": "1167039",
    "end": "1172559"
  },
  {
    "text": "router option set to yes to use RC that will generate the boiler plate",
    "start": "1172559",
    "end": "1178039"
  },
  {
    "text": "for you and you can start using RC there's not a lot of files to confuse you it's mostly standard files such as",
    "start": "1178039",
    "end": "1184360"
  },
  {
    "text": "package.json and TS config and some config for tailwind and Es lint what",
    "start": "1184360",
    "end": "1189600"
  },
  {
    "text": "matters is everything inside the app directory so in the app router you will be coding server first meaning",
    "start": "1189600",
    "end": "1196240"
  },
  {
    "text": "everything you do is a server component and less specified otherwise which means that the layout and the uh page files",
    "start": "1196240",
    "end": "1203520"
  },
  {
    "text": "are server components by default I won't spend too much time on the pages riter today but basically you",
    "start": "1203520",
    "end": "1209440"
  },
  {
    "text": "don't have to use functions like get server side props anymore uh as the pages are server side by default and you",
    "start": "1209440",
    "end": "1215400"
  },
  {
    "text": "can fetch data just by calling for example your API inside the component it's a lot more",
    "start": "1215400",
    "end": "1220440"
  },
  {
    "text": "straightforward there are also a lot of changes to the file based routing uh compared to the pages router but I will",
    "start": "1220440",
    "end": "1226039"
  },
  {
    "text": "just explain the new app router way now in the app router you define routes by",
    "start": "1226039",
    "end": "1232159"
  },
  {
    "text": "making folders containing a page. TSX that makes it a valid route I have some",
    "start": "1232159",
    "end": "1237640"
  },
  {
    "text": "routes here SL jokes and then a SL new and joke ID sub route which is a dynamic",
    "start": "1237640",
    "end": "1243120"
  },
  {
    "text": "route meaning it's parameterized then you can also use files with reserved names such as not",
    "start": "1243120",
    "end": "1249080"
  },
  {
    "text": "found. TSX and error. TSX um which are air boundaries that render inside the",
    "start": "1249080",
    "end": "1255440"
  },
  {
    "text": "layout of their route as well as loading TSX which creates a suspense boundary around the page all of these can be",
    "start": "1255440",
    "end": "1262640"
  },
  {
    "text": "ganized by the way you can add them to the rout or to sub routes or to anywhere you want and there are also a lot more",
    "start": "1262640",
    "end": "1268480"
  },
  {
    "text": "features like ignoring folders from routes with underscore or griping them with",
    "start": "1268480",
    "end": "1274039"
  },
  {
    "text": "parentheses you can also Define AP routes in here like in the pages router the route. TS file is a reserved name",
    "start": "1274960",
    "end": "1281520"
  },
  {
    "text": "and will allow you to create API endpoints then there is the port for SEO",
    "start": "1281520",
    "end": "1289000"
  },
  {
    "text": "with for example meta tags they can be added to any page or layout and can also be created uh generated dynamically for",
    "start": "1289000",
    "end": "1296440"
  },
  {
    "text": "example using the route params with nextjs comes a lot of",
    "start": "1296440",
    "end": "1302039"
  },
  {
    "text": "optimization such as caching all pages generated in the build are cached on verell CDN if you host it there and",
    "start": "1302039",
    "end": "1309039"
  },
  {
    "text": "nextjs will also optimize your images if you use the image tag will do things like pre-load your pages on hover if you",
    "start": "1309039",
    "end": "1315120"
  },
  {
    "text": "use their link component so how do we use react server components",
    "start": "1315120",
    "end": "1321720"
  },
  {
    "text": "in nextjs the right way what are the best practices and development patterns to get the most out of",
    "start": "1321720",
    "end": "1328039"
  },
  {
    "text": "them the best practice is going to be to move your client code to the leaves of the component Tree in this way you",
    "start": "1328039",
    "end": "1335159"
  },
  {
    "text": "ensure that you do not ship any unnecessary JavaScript to the client react will hydrate only these client",
    "start": "1335159",
    "end": "1341039"
  },
  {
    "text": "leaves as we know as partial hydration you could in theory just put use client on your route and code",
    "start": "1341039",
    "end": "1347200"
  },
  {
    "text": "however you want but that just means that all your components will have their J ship and uh which just takes us back",
    "start": "1347200",
    "end": "1352480"
  },
  {
    "text": "to standard service head rendering to use a component uh sorry to",
    "start": "1352480",
    "end": "1358440"
  },
  {
    "text": "use a client component in a server component you simply import it here's the uh the delete functionality has been",
    "start": "1358440",
    "end": "1365400"
  },
  {
    "text": "extracted to a component the delete joke button with used client because it needs",
    "start": "1365400",
    "end": "1370520"
  },
  {
    "text": "an onclick event handler however when going the other way around you cannot do",
    "start": "1370520",
    "end": "1375880"
  },
  {
    "text": "the same without turning the server component into a client",
    "start": "1375880",
    "end": "1380919"
  },
  {
    "text": "[Applause] component you instead need to slot them",
    "start": "1384840",
    "end": "1391840"
  },
  {
    "text": "as props and they will fit as separate chunks into the client tree the client",
    "start": "1391840",
    "end": "1396919"
  },
  {
    "text": "component does not know what is being passed down and this can be referred to as the doughnut",
    "start": "1396919",
    "end": "1403360"
  },
  {
    "text": "pattern this means that our tree can look like anything we want we can add client ey logic and the parent",
    "start": "1404760",
    "end": "1410880"
  },
  {
    "text": "components as well only the green components are hydrated and contain JavaScript here the rest is just just",
    "start": "1410880",
    "end": "1419200"
  },
  {
    "text": "HTML with this pattern we can furthermore Implement things like State Management by providing a wrapper client",
    "start": "1419200",
    "end": "1426120"
  },
  {
    "text": "component with state for example using react context which only works client side um we can use the state in the",
    "start": "1426120",
    "end": "1432320"
  },
  {
    "text": "leaves without converting the server components in between for example we can make an error message provid provider or",
    "start": "1432320",
    "end": "1438480"
  },
  {
    "text": "theme provider when combined this allows us to make apps that are extremely performant",
    "start": "1438480",
    "end": "1444720"
  },
  {
    "text": "due to their large amount of static content while still being fully interactive you could have a doughnut",
    "start": "1444720",
    "end": "1450120"
  },
  {
    "text": "pattern collapsible sidebar a theme toggle provider a search and buttons and on the client side and then the rest can",
    "start": "1450120",
    "end": "1456240"
  },
  {
    "text": "be static and you can share your State uh between components however you",
    "start": "1456240",
    "end": "1462278"
  },
  {
    "text": "need when building an RSC component Tre there will be some limitations between",
    "start": "1462600",
    "end": "1467840"
  },
  {
    "text": "client and server components for example since the client exists on the client uh",
    "start": "1467840",
    "end": "1473279"
  },
  {
    "text": "sorry the client components exist on the client and the server components on the server props need to be",
    "start": "1473279",
    "end": "1478720"
  },
  {
    "text": "serializable this means that we cannot pass functions through the server boundary instead we must create API",
    "start": "1478720",
    "end": "1485840"
  },
  {
    "text": "endpoints to communicate between them when we can't use props or nextjs 13",
    "start": "1485840",
    "end": "1491200"
  },
  {
    "text": "server actions which will simplify the process and I'll explain that",
    "start": "1491200",
    "end": "1496440"
  },
  {
    "text": "later how do do we manage data with RC and the app router I already showed you that you can",
    "start": "1496440",
    "end": "1503720"
  },
  {
    "text": "make database queries through an orm like Prisma and you can of course use the fetch API and there are a bunch of",
    "start": "1503720",
    "end": "1509440"
  },
  {
    "text": "parameters you can add here such as cach duration tag for revalidating the data headers and more so here's an example of",
    "start": "1509440",
    "end": "1516960"
  },
  {
    "text": "showing what you could potentially do for example getting a cookie and making a authenticated request to an API and",
    "start": "1516960",
    "end": "1524120"
  },
  {
    "text": "getting data this way into your server components is very efficient because on the server you have this privileged",
    "start": "1524120",
    "end": "1529360"
  },
  {
    "text": "environment with everything you need",
    "start": "1529360",
    "end": "1532840"
  },
  {
    "text": "accessible if you use the same data in multiple components in a tree you do not have to fetch it globally and pass it",
    "start": "1534880",
    "end": "1541000"
  },
  {
    "text": "down you can fetch it in each component where it's required because it's automatically memorized you can compare",
    "start": "1541000",
    "end": "1547320"
  },
  {
    "text": "this pattern to for example react query where you will call your hooks wherever they are needed and then they will all",
    "start": "1547320",
    "end": "1552679"
  },
  {
    "text": "call the same cache data plus you can pass it down to client components when you you need it for",
    "start": "1552679",
    "end": "1558840"
  },
  {
    "text": "example as the options of an autocomplete component what about data mutation I",
    "start": "1558840",
    "end": "1566279"
  },
  {
    "text": "mentioned that you can create API endpoints like in the pages router but let's skip that for now and look at something way better called server",
    "start": "1566279",
    "end": "1572559"
  },
  {
    "text": "actions they're not stable yet they're moving towards stability but they're going to be the preferred way to mutate",
    "start": "1572559",
    "end": "1578640"
  },
  {
    "text": "data when they're stable so I want to show you what they are it's simple you mark a function or a",
    "start": "1578640",
    "end": "1585320"
  },
  {
    "text": "file with use server and next s will make a hidden API endpoint for you",
    "start": "1585320",
    "end": "1590679"
  },
  {
    "text": "allowing you to call it from anywhere like from a client component solving the problem of passing functions between the",
    "start": "1590679",
    "end": "1596960"
  },
  {
    "text": "server and the client in addition this gives you type safety between the server and the client through RPC or remote",
    "start": "1596960",
    "end": "1603520"
  },
  {
    "text": "procedure call here I have a file with a function",
    "start": "1603520",
    "end": "1609799"
  },
  {
    "text": "marked with us server turning it into a server action I can now call it from a client component and that's it however I",
    "start": "1609799",
    "end": "1617679"
  },
  {
    "text": "also need to tell nextjs that I have changed something inside the data uh in in rsc's and that it needs to revalidate",
    "start": "1617679",
    "end": "1624640"
  },
  {
    "text": "The View and fetch new data from the database so I then call revalidate path with my relevant",
    "start": "1624640",
    "end": "1632278"
  },
  {
    "text": "route server action also works seamlessly with form submissions so here I have a form and a function mark with",
    "start": "1641080",
    "end": "1647760"
  },
  {
    "text": "you server uh note that it's inside the component here and with submitting the form it can without JavaScript call the",
    "start": "1647760",
    "end": "1654520"
  },
  {
    "text": "server action and add a joke to the database and again I need to tell nextjs",
    "start": "1654520",
    "end": "1659559"
  },
  {
    "text": "that I um changed something and it has to revalidate the view that's just some quick examples there's so many",
    "start": "1659559",
    "end": "1666080"
  },
  {
    "text": "possibilities here and it's extremely eff efficient to develop with so there you have it react server",
    "start": "1666080",
    "end": "1672840"
  },
  {
    "text": "components in the app router allow you to uh do whatever you need to do whether it's NP a functionality or interactive",
    "start": "1672840",
    "end": "1679120"
  },
  {
    "text": "Spa stuff uh and include SSR or SEO or any kind of functionality you need all",
    "start": "1679120",
    "end": "1684399"
  },
  {
    "text": "in the same stack optimized amazing so hopefully you remember some of these terms by now it's a lot react sery",
    "start": "1684399",
    "end": "1692519"
  },
  {
    "text": "components bring a new mental model and architecture so um oh yeah and there's a",
    "start": "1692519",
    "end": "1698000"
  },
  {
    "text": "lot more to say about RSC that I haven't included here let's get into a demo of the joke",
    "start": "1698000",
    "end": "1704600"
  },
  {
    "text": "app it's a remake of a tutorial from the mix documentation but of course very different because it uses RC and",
    "start": "1704600",
    "end": "1711360"
  },
  {
    "text": "tailwind and server actions it's also containing very simple implementations to not clog the code with",
    "start": "1711360",
    "end": "1718919"
  },
  {
    "text": "complexity [Music] um so this is the",
    "start": "1722240",
    "end": "1729679"
  },
  {
    "text": "app it has some basic oh sorry it's not mirrored anymore good thing you're",
    "start": "1729679",
    "end": "1735640"
  },
  {
    "text": "telling me is this",
    "start": "1735640",
    "end": "1742159"
  },
  {
    "text": "okay good so it's a simple app",
    "start": "1742159",
    "end": "1749759"
  },
  {
    "text": "to uh display a list of jokes and add jokes and delete jokes so you can view",
    "start": "1750000",
    "end": "1755480"
  },
  {
    "text": "jokes here and then you can add your",
    "start": "1755480",
    "end": "1760440"
  },
  {
    "text": "own for example why was the developer unhappy with their job that they wanted AR raay",
    "start": "1761320",
    "end": "1769320"
  },
  {
    "text": "so then it's added and then you can also delete",
    "start": "1770880",
    "end": "1776799"
  },
  {
    "text": "them that's the main functionality of the app here let's look at the code for",
    "start": "1777919",
    "end": "1785760"
  },
  {
    "text": "this oh sorry I forgot to mention this is uh deployed on verell",
    "start": "1785760",
    "end": "1791679"
  },
  {
    "text": "and it uses tailwind and um Prisma and an Azure SQL database for the database",
    "start": "1791679",
    "end": "1798320"
  },
  {
    "text": "through",
    "start": "1798320",
    "end": "1800518"
  },
  {
    "text": "Prisma so this is the files that you may be recognized from the boiler plate inside here you have well you first have",
    "start": "1806720",
    "end": "1813960"
  },
  {
    "text": "some basic stuff like eent and prier and then you have the source folder with the",
    "start": "1813960",
    "end": "1819519"
  },
  {
    "text": "app router folder which is the most important one here then there's some validations for the forms and some",
    "start": "1819519",
    "end": "1826279"
  },
  {
    "text": "database utils and components and server actions in",
    "start": "1826279",
    "end": "1831480"
  },
  {
    "text": "here and inside the operater we have the root",
    "start": "1831480",
    "end": "1836519"
  },
  {
    "text": "layout is this okay yes yes",
    "start": "1836519",
    "end": "1842720"
  },
  {
    "text": "okay uh which is not important and then the root page which is this page here so this is",
    "start": "1842720",
    "end": "1850279"
  },
  {
    "text": "just some nexts links not interesting um then there is the jokes",
    "start": "1850279",
    "end": "1856919"
  },
  {
    "text": "route and in here we have the root layout which is containing a header a",
    "start": "1856919",
    "end": "1864120"
  },
  {
    "text": "phoo and a sidebar and in the header we have some links well just actually one",
    "start": "1864120",
    "end": "1869559"
  },
  {
    "text": "link with the logo in the footer also some links and the sidebar is containing the",
    "start": "1869559",
    "end": "1877360"
  },
  {
    "text": "jokes so in here we have a random joke button and the jokes list and nav button",
    "start": "1877360",
    "end": "1883559"
  },
  {
    "text": "to add your own so let's look at the jokes first this is using the um database call",
    "start": "1883559",
    "end": "1892799"
  },
  {
    "text": "like this Prisma joke find many and then just sorts them and Maps",
    "start": "1892799",
    "end": "1898919"
  },
  {
    "text": "them into links and then there's an NA button it's",
    "start": "1898919",
    "end": "1904200"
  },
  {
    "text": "just a button that uh routes you to this new page and the random joke button which is",
    "start": "1904200",
    "end": "1911600"
  },
  {
    "text": "just refreshing the page",
    "start": "1911600",
    "end": "1918679"
  },
  {
    "text": "then we have the new joke page which is",
    "start": "1918679",
    "end": "1925080"
  },
  {
    "text": "here in here there's a form and this is actually a server action create joke and",
    "start": "1925639",
    "end": "1932200"
  },
  {
    "text": "which is bound to the action prop which is the way you can use them without JavaScript and there's a submit button",
    "start": "1932200",
    "end": "1938120"
  },
  {
    "text": "here so inside create joke this is a server action because it has us",
    "start": "1938120",
    "end": "1943360"
  },
  {
    "text": "server um there's just some very simple r um validating of the content and then",
    "start": "1943360",
    "end": "1950039"
  },
  {
    "text": "Prisma adding it to the database and revalidating the path so when I add",
    "start": "1950039",
    "end": "1955120"
  },
  {
    "text": "something here it's going to call the server action and then add it to the database and revalidate the path and",
    "start": "1955120",
    "end": "1961919"
  },
  {
    "text": "redirect me to the new joke that has been created um this submit button could have",
    "start": "1961919",
    "end": "1970159"
  },
  {
    "text": "been just a basic button but I've added some visual uh feedback here that it's submitting using this hook called called",
    "start": "1970159",
    "end": "1977279"
  },
  {
    "text": "use form status which is just giving me the state of the form that it's used inside and displays adding if it's",
    "start": "1977279",
    "end": "1986360"
  },
  {
    "text": "pending let's also look at the joke ID which is what's being displayed",
    "start": "1986360",
    "end": "1993840"
  },
  {
    "text": "here in here I have an error. TSX which is going to be uh triggered when",
    "start": "1993840",
    "end": "1999760"
  },
  {
    "text": "something goes wrong and a not found which H is going to be called when the",
    "start": "1999760",
    "end": "2006360"
  },
  {
    "text": "joke is inval so it's an air boundary it's going to be rendered inside the route that it's",
    "start": "2006360",
    "end": "2012919"
  },
  {
    "text": "in and in the page I'm getting a joke here from",
    "start": "2013840",
    "end": "2021159"
  },
  {
    "text": "Prisma with the param um joke ID which is up",
    "start": "2021159",
    "end": "2026200"
  },
  {
    "text": "here and then if the joke isn't if it didn't find anything it throws not found",
    "start": "2026200",
    "end": "2031960"
  },
  {
    "text": "and then there is a link to the joke and the delete joke button with which is passing in the ID",
    "start": "2031960",
    "end": "2038159"
  },
  {
    "text": "of the joke so this delete joke button is also using a server action delete",
    "start": "2038159",
    "end": "2044320"
  },
  {
    "text": "joke which just deletes the joke and revalidates the path and redirects",
    "start": "2044320",
    "end": "2050760"
  },
  {
    "text": "back and this is actually a react 18 feature called start transition or use",
    "start": "2050760",
    "end": "2056560"
  },
  {
    "text": "transition and there's a lot of these react 18 features inside the app r that you don't think about that is being used",
    "start": "2056560",
    "end": "2063118"
  },
  {
    "text": "by nextjs but you can also use them explicitly like here it basically will Mark a state update in",
    "start": "2063119",
    "end": "2070320"
  },
  {
    "text": "this case delete joke as U non-blocking allowing you to cancel the action by",
    "start": "2070320",
    "end": "2075878"
  },
  {
    "text": "clicking around the page and it also gives you the pending so I'm using the pending status here to display delete",
    "start": "2075879",
    "end": "2082800"
  },
  {
    "text": "when I delete it or deleting when I delete",
    "start": "2082800",
    "end": "2087440"
  },
  {
    "text": "it that's all for this app here but I have added a bunch of other",
    "start": "2089159",
    "end": "2095599"
  },
  {
    "text": "routes to to display Concepts in RSC so I'm going to go through those also",
    "start": "2095599",
    "end": "2103640"
  },
  {
    "text": "quickly [Music] um and I want to show you well not yet",
    "start": "2104560",
    "end": "2112720"
  },
  {
    "text": "actually oh yeah here is this okay",
    "start": "2112720",
    "end": "2119800"
  },
  {
    "text": "okay so first nesting so as I mentioned you can put server comp components",
    "start": "2121240",
    "end": "2127200"
  },
  {
    "text": "inside client components if you slot them like this so the server component is rendered on the server and the client",
    "start": "2127200",
    "end": "2133520"
  },
  {
    "text": "component doesn't need to know what's happening it just gets some some content",
    "start": "2133520",
    "end": "2138599"
  },
  {
    "text": "here which is also rented on the server and the client component is interactive",
    "start": "2138599",
    "end": "2143960"
  },
  {
    "text": "and this is rendered on the server then revalidate so as I mentioned",
    "start": "2143960",
    "end": "2150920"
  },
  {
    "text": "you can update the state um or the server components from the server and then keep the client state",
    "start": "2150920",
    "end": "2158200"
  },
  {
    "text": "and that looks like this this is not very important actually the point is that I'm adding some State and then",
    "start": "2158200",
    "end": "2165760"
  },
  {
    "text": "adding oh yeah this is fine and it will then update and refresh",
    "start": "2165760",
    "end": "2171200"
  },
  {
    "text": "the view um without uh changing the client State here it's still just maintaining",
    "start": "2171200",
    "end": "2177880"
  },
  {
    "text": "the state even though this part is server side then I mentioned that you can make",
    "start": "2177880",
    "end": "2185720"
  },
  {
    "text": "providers which is how you're going to be sharing your state so let's say you have a",
    "start": "2185720",
    "end": "2191760"
  },
  {
    "text": "server component containing a client component and a client component over here so they're in different parts of the tree so they can't really",
    "start": "2191760",
    "end": "2198440"
  },
  {
    "text": "communicate but you can make this theme provider um with react context and then",
    "start": "2198440",
    "end": "2204680"
  },
  {
    "text": "set the theme from a client component with the context and then use the theme",
    "start": "2204680",
    "end": "2210040"
  },
  {
    "text": "from a context and you can could be adding this theme provider to the root of your app",
    "start": "2210040",
    "end": "2215160"
  },
  {
    "text": "so that you can use this anywhere and it will just be shared like a normal Global",
    "start": "2215160",
    "end": "2221640"
  },
  {
    "text": "State then there's a bunch of different way you can make forms",
    "start": "2221640",
    "end": "2228839"
  },
  {
    "text": "um so I have here a server form and it's using a server action and",
    "start": "2230920",
    "end": "2238000"
  },
  {
    "text": "inside This Server action I'm using Zod to Safe pars validate the data which you",
    "start": "2238000",
    "end": "2245640"
  },
  {
    "text": "know has to be this long contain this many uh characters and if it doesn't validate it",
    "start": "2245640",
    "end": "2253040"
  },
  {
    "text": "will return a server error so what happens is I add this did something",
    "start": "2253040",
    "end": "2259280"
  },
  {
    "text": "happen there",
    "start": "2259280",
    "end": "2265240"
  },
  {
    "text": "um let's try oh yeah that's because I'm not on the local that's",
    "start": "2269640",
    "end": "2274760"
  },
  {
    "text": "why um yeah let's get get back to",
    "start": "2274760",
    "end": "2279040"
  },
  {
    "text": "this so as you can see it's now failing on the server",
    "start": "2279800",
    "end": "2285200"
  },
  {
    "text": "side then we can also client side",
    "start": "2285200",
    "end": "2289640"
  },
  {
    "text": "validate um so this is also using a server action",
    "start": "2291000",
    "end": "2296960"
  },
  {
    "text": "but here it's parsing the joke in the beginning so what happens here is if if it",
    "start": "2296960",
    "end": "2302599"
  },
  {
    "text": "fails it's going to give me the validation message here",
    "start": "2302599",
    "end": "2308319"
  },
  {
    "text": "because this is on the client and you can combine this uh to make for example a react form using",
    "start": "2308319",
    "end": "2315079"
  },
  {
    "text": "optimistic update and then have both client side and server side",
    "start": "2315079",
    "end": "2320480"
  },
  {
    "text": "validation so here I have a form it's giving me error messages using reactive",
    "start": "2321079",
    "end": "2327599"
  },
  {
    "text": "form I can also open this um",
    "start": "2327599",
    "end": "2334440"
  },
  {
    "text": "yes um and it will optimistically up uh add",
    "start": "2335520",
    "end": "2343040"
  },
  {
    "text": "a joke so it's going to be quick and then it's going to optimistically added and then check later if it was added so",
    "start": "2343040",
    "end": "2350240"
  },
  {
    "text": "I have just added some validation on the server here that's going to be stricter so when it's failing it adds and then it",
    "start": "2350240",
    "end": "2356839"
  },
  {
    "text": "removes it again so you can make really smooth um interfaces here by using for",
    "start": "2356839",
    "end": "2362839"
  },
  {
    "text": "example reactor form and ser actions combined I also have an example of using react",
    "start": "2362839",
    "end": "2369520"
  },
  {
    "text": "query you probably won't need to because you want to be fetching data only on the server but it's possible so check that",
    "start": "2369520",
    "end": "2377200"
  },
  {
    "text": "out if you want to see how it's done and then",
    "start": "2377200",
    "end": "2382440"
  },
  {
    "text": "finally uh I don't know how much you know about suspense but basically it lets you stream content as it becomes",
    "start": "2382440",
    "end": "2389079"
  },
  {
    "text": "ready so here and this is also react 18 feature",
    "start": "2389079",
    "end": "2395160"
  },
  {
    "text": "that nextjs uses um as a part of their built-in functionality that you can use",
    "start": "2395160",
    "end": "2402400"
  },
  {
    "text": "explicitly um suspense so first of all I don't know if",
    "start": "2403680",
    "end": "2411599"
  },
  {
    "text": "you saw this but was displaying loading page this is the nexts suspense boundary",
    "start": "2411599",
    "end": "2417400"
  },
  {
    "text": "loading. TSX so this is creating a suspense boundary telling react that you",
    "start": "2417400",
    "end": "2424000"
  },
  {
    "text": "want to see this content while um something else is",
    "start": "2424000",
    "end": "2430000"
  },
  {
    "text": "loading and then inside the page I have some more suspens so here um the jokes well first",
    "start": "2430000",
    "end": "2437119"
  },
  {
    "text": "of all there's a Timeout on this page on of one second then inside this jokes header 2 seconds and uh this",
    "start": "2437119",
    "end": "2445240"
  },
  {
    "text": "jok's uh call has 4 seconds so basically I want to display data while other data",
    "start": "2445240",
    "end": "2451680"
  },
  {
    "text": "is loading so I can add suspens and add different fallbacks letting me stream",
    "start": "2451680",
    "end": "2458280"
  },
  {
    "text": "the data that takes longer while I'm displaying the data that is is done let's just look at that again so it's",
    "start": "2458280",
    "end": "2465440"
  },
  {
    "text": "loading this part this part doesn't know this yet and then it's finally loading this last long call from the",
    "start": "2465440",
    "end": "2472920"
  },
  {
    "text": "server this is very useful when you want to display something while something else is",
    "start": "2472920",
    "end": "2478079"
  },
  {
    "text": "loading and what happens is this counter if this is important for the user I can click it even though the data is still",
    "start": "2478079",
    "end": "2485240"
  },
  {
    "text": "loading I think that's it for the",
    "start": "2485240",
    "end": "2492160"
  },
  {
    "text": "demo so let's get back to the presentation here",
    "start": "2492160",
    "end": "2497839"
  },
  {
    "text": "oh hold on",
    "start": "2497839",
    "end": "2503720"
  },
  {
    "text": "yes so this is the lighthouse score of my app it's unoptimized I just followed the patterns mentioned and of course",
    "start": "2503720",
    "end": "2510040"
  },
  {
    "text": "this is very small app but you get the point and all in all you can build very performant apps by default with and and",
    "start": "2510040",
    "end": "2516680"
  },
  {
    "text": "the limitations of RC kind of make your code better unlike in react where you can do wherever you",
    "start": "2516680",
    "end": "2522119"
  },
  {
    "text": "want here's also the badge for the app when sharing a link to a joke as you can see the dynamic meta metadata is",
    "start": "2522119",
    "end": "2529000"
  },
  {
    "text": "creating a badge so I have real world experience",
    "start": "2529000",
    "end": "2535560"
  },
  {
    "text": "with RSC because I'm using it in my current consultancy project building a",
    "start": "2535560",
    "end": "2540920"
  },
  {
    "text": "medium scale production app um so let me just mention my requirements and my experience with that",
    "start": "2540920",
    "end": "2547640"
  },
  {
    "text": "I'm working on a project set to last one year it's a rewrite of an existing MVC",
    "start": "2547640",
    "end": "2553200"
  },
  {
    "text": "app that has a lot of technical dep and I've been lucky enough to be given the responsibility to pick the technology",
    "start": "2553200",
    "end": "2559559"
  },
  {
    "text": "for the front end of this new solution the app uh will contain",
    "start": "2559559",
    "end": "2565640"
  },
  {
    "text": "interactive dashboards complex forms articles through a CMS and a lot of CTIC data and a need for SEO it also needs to",
    "start": "2565640",
    "end": "2573720"
  },
  {
    "text": "be mobile friendly and support multiple language and use custom authentication so a big part of this app",
    "start": "2573720",
    "end": "2580880"
  },
  {
    "text": "and something that I made sure to proof of concept with RC before choosing framework is the customer design system",
    "start": "2580880",
    "end": "2587720"
  },
  {
    "text": "component Library this app is great case for RC because it can service side render a lot",
    "start": "2587720",
    "end": "2593760"
  },
  {
    "text": "of content but also be highly interactive where it needs to be I'm finding it to work very well so far",
    "start": "2593760",
    "end": "2600800"
  },
  {
    "text": "however I've had to do quite a bit of trial and error uh to build functionality that is non-standard",
    "start": "2600800",
    "end": "2608079"
  },
  {
    "text": "for example I've had to create wrapper components for the customer specific component library to be able to use them",
    "start": "2608559",
    "end": "2614680"
  },
  {
    "text": "in my project and put server components inside them I've also had to pick my next um sorry my internationalization",
    "start": "2614680",
    "end": "2621440"
  },
  {
    "text": "library without much guidance from nextjs it's working well but there are certainly",
    "start": "2621440",
    "end": "2627440"
  },
  {
    "text": "complexities and finally testing RC is not covered properly anywhere and to",
    "start": "2627440",
    "end": "2632599"
  },
  {
    "text": "test ASN components with react testing Library you have to use a workr as for",
    "start": "2632599",
    "end": "2639839"
  },
  {
    "text": "now but all in all it's going well there was a learning curve but I'm enjoying every day my app is performant it",
    "start": "2639960",
    "end": "2646359"
  },
  {
    "text": "fulfills the requirement it's maintainable it enforces best practices and the developer experience experience",
    "start": "2646359",
    "end": "2652720"
  },
  {
    "text": "is great the nextjs app router with RSC provides so many tools to let me focus",
    "start": "2652720",
    "end": "2659079"
  },
  {
    "text": "on building my app to finish this off what is going to",
    "start": "2659079",
    "end": "2666119"
  },
  {
    "text": "be the future of RSC there's no doubt that this is the way react is going now uh it's not just",
    "start": "2666119",
    "end": "2672440"
  },
  {
    "text": "some hype cycle that is going to die out is the result of many years of work of the react",
    "start": "2672440",
    "end": "2678160"
  },
  {
    "text": "team and it's likely that other Frameworks will Implement their own versions of these RSC or uh Implement",
    "start": "2678160",
    "end": "2684440"
  },
  {
    "text": "RSC such as with remix who recently announced that they will and there are so many solutions",
    "start": "2684440",
    "end": "2690839"
  },
  {
    "text": "being proposed um to improve improve the performance of web apps with the goal of",
    "start": "2690839",
    "end": "2696880"
  },
  {
    "text": "finding the optimal uh balance between ux and DX and this is react take",
    "start": "2696880",
    "end": "2703920"
  },
  {
    "text": "nonetheless there's still a lot of things yet to be figured out as react server components are being battle",
    "start": "2703920",
    "end": "2710599"
  },
  {
    "text": "tested here's the repo for my joke app you can use it how you want everything is there as well as the reference demo",
    "start": "2711640",
    "end": "2720240"
  },
  {
    "text": "[Applause] pages",
    "start": "2721210",
    "end": "2727880"
  },
  {
    "text": "here's also some more resources that I've been using during my learning experience and when making this",
    "start": "2729720",
    "end": "2735119"
  },
  {
    "text": "talk uh versel has a bunch of template apps to reference for example examples",
    "start": "2735119",
    "end": "2740520"
  },
  {
    "text": "of Integrations with different libraries and the verel docs is amazing you can find anything there just make sure to",
    "start": "2740520",
    "end": "2746960"
  },
  {
    "text": "select the app router version of the docs when you're on the page also bite grad on YouTube has high",
    "start": "2746960",
    "end": "2753640"
  },
  {
    "text": "quality RSC stuff and he's launching a full full course next month and code with Antonio has a lot of",
    "start": "2753640",
    "end": "2760040"
  },
  {
    "text": "public projects on GitHub as well as full YouTube walkthroughs for example um",
    "start": "2760040",
    "end": "2765119"
  },
  {
    "text": "making a notion clone like seven hours of uh seven hours making notion clone",
    "start": "2765119",
    "end": "2770440"
  },
  {
    "text": "it's really good and of course I have a lot of code that I can't share directly from my",
    "start": "2770440",
    "end": "2775839"
  },
  {
    "text": "current customer project but you can reach out and I will send you examples or explain how I've done",
    "start": "2775839",
    "end": "2782599"
  },
  {
    "text": "things thanks for listening I hope we're as excited as I [Applause]",
    "start": "2782640",
    "end": "2789689"
  },
  {
    "text": "am as excited as I am and ready to try it and this is my social media I'm trying to get there and I'm going to",
    "start": "2796800",
    "end": "2803319"
  },
  {
    "text": "post my slides on Twitter and you can contact me there and I have a Blog I have some resources about testing RSC",
    "start": "2803319",
    "end": "2810240"
  },
  {
    "text": "there uh thank you do you have any questions",
    "start": "2810240",
    "end": "2817800"
  },
  {
    "text": "[Applause] yes yeah for if you have component let's",
    "start": "2818240",
    "end": "2826720"
  },
  {
    "text": "say navigation C that's includ on all the pages and then you",
    "start": "2826720",
    "end": "2833800"
  },
  {
    "text": "have you can the thing is with caching sorry I can repeat the question first",
    "start": "2837599",
    "end": "2842839"
  },
  {
    "text": "can you control the caching behavior for example if you have a part that is not changing and then some parts that is",
    "start": "2842839",
    "end": "2849400"
  },
  {
    "text": "changing can you control the way this cache works that's correct so it's specific to deploying onell that",
    "start": "2849400",
    "end": "2856319"
  },
  {
    "text": "everything is cached but they have these um like basically you write on the top",
    "start": "2856319",
    "end": "2861640"
  },
  {
    "text": "of the file like export const and then Define what type of caching Behavior you want for a route so you can say okay",
    "start": "2861640",
    "end": "2868559"
  },
  {
    "text": "this route is dynamic then you put this cons on top it's going to keep this one Al um always rendered on the server and",
    "start": "2868559",
    "end": "2875920"
  },
  {
    "text": "then the rest is just cached by default so there are these specific kind of cons that you can put to to control the",
    "start": "2875920",
    "end": "2882440"
  },
  {
    "text": "caching it's still Ur sorry it's still",
    "start": "2882440",
    "end": "2887760"
  },
  {
    "text": "Ur B uh URL based um not really because",
    "start": "2887760",
    "end": "2893160"
  },
  {
    "text": "this RC payload is kind of in chunks",
    "start": "2893160",
    "end": "2898760"
  },
  {
    "text": "well it's file based I guess you can say it's file based because for example in this sus my jokes list I'm using uh I'm",
    "start": "2898800",
    "end": "2907720"
  },
  {
    "text": "defining Dynamic cache but that's not a component that's just a that's not a",
    "start": "2907720",
    "end": "2913119"
  },
  {
    "text": "route that's a component but I",
    "start": "2913119",
    "end": "2916558"
  },
  {
    "text": "can yes at the back got a mic um hi uh so I'm going to",
    "start": "2918760",
    "end": "2925960"
  },
  {
    "text": "take advantage of the fact that you've built like a clone of the remix Jokes",
    "start": "2925960",
    "end": "2931799"
  },
  {
    "text": "app to ask um your opinion in terms of difference of using the remix remix's",
    "start": "2931799",
    "end": "2941599"
  },
  {
    "text": "loader um compared to well RSC yeah okay so the question was what's my experience",
    "start": "2941599",
    "end": "2948920"
  },
  {
    "text": "um using the remix loaders compared to RSC yeah so in remix you have these loaders it's it's kind of like uh",
    "start": "2948920",
    "end": "2956200"
  },
  {
    "text": "getting data in a server component and I only made this re I only used remix in",
    "start": "2956200",
    "end": "2961880"
  },
  {
    "text": "this this remix tutorial app but my initial thought is that it you can get",
    "start": "2961880",
    "end": "2967160"
  },
  {
    "text": "it very structured when you can put your data fetching for example in its own actions folder you don't have to link it",
    "start": "2967160",
    "end": "2974079"
  },
  {
    "text": "to a route you can use it wherever you need like just put them in the actions folder then pick them so it feels more",
    "start": "2974079",
    "end": "2980880"
  },
  {
    "text": "organized maybe yeah less code in each file you just call somewhere else thank",
    "start": "2980880",
    "end": "2989119"
  },
  {
    "text": "you anything else okay thank you thank",
    "start": "2989119",
    "end": "2996250"
  },
  {
    "text": "[Applause] [Music]",
    "start": "2996250",
    "end": "3002219"
  },
  {
    "text": "you",
    "start": "3002880",
    "end": "3005880"
  }
]