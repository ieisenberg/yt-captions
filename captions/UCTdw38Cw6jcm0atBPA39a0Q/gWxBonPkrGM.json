[
  {
    "text": "hey everyone to start this presentation we're going",
    "start": "11040",
    "end": "16800"
  },
  {
    "text": "to go back to the beginning of the world",
    "start": "16800",
    "end": "22160"
  },
  {
    "text": "at the beginning of the world but at very specific world the world of connections",
    "start": "22640",
    "end": "30320"
  },
  {
    "text": "at the beginning of time that well that was nothing",
    "start": "30320",
    "end": "35280"
  },
  {
    "text": "there was nothing to work with the collections in c plus plus and then",
    "start": "40239",
    "end": "47760"
  },
  {
    "text": "at some point in time there was four and this lasted for a long period of",
    "start": "47760",
    "end": "54559"
  },
  {
    "text": "time and that was before we realized that ncl algorithms",
    "start": "54559",
    "end": "59840"
  },
  {
    "text": "were a thing and then there were there was the error sc algorithms",
    "start": "59840",
    "end": "66798"
  },
  {
    "text": "and we were very happy with s algorithms until we move into",
    "start": "66880",
    "end": "73600"
  },
  {
    "text": "modern class plots and the following step after screen relevance",
    "start": "73600",
    "end": "79280"
  },
  {
    "text": "plus in the standard c plus plus 20 is ranges if we",
    "start": "79280",
    "end": "86159"
  },
  {
    "text": "zoom in a little uh on the transition between sc algorithms and ranges",
    "start": "86159",
    "end": "93520"
  },
  {
    "text": "so um let's take a very basic use case to do",
    "start": "93920",
    "end": "98960"
  },
  {
    "text": "data um let's apply a function on every element",
    "start": "99200",
    "end": "104560"
  },
  {
    "text": "collection do that with um its algorithms we can use transform with this code that's that's",
    "start": "104560",
    "end": "113360"
  },
  {
    "text": "why the basics of that server another task we can do that's quite",
    "start": "113360",
    "end": "118399"
  },
  {
    "text": "common is to apply a filter to that we can use copy if that will",
    "start": "118399",
    "end": "123920"
  },
  {
    "text": "transfer data from one collection to another one based in a predicament now",
    "start": "123920",
    "end": "132080"
  },
  {
    "text": "what if we want to do both as in applying a function only on the elements",
    "start": "132080",
    "end": "137760"
  },
  {
    "text": "that say that satisfy the predicate if that was if if it were to be an",
    "start": "137760",
    "end": "143840"
  },
  {
    "text": "algorithm that would be named house transform if there's nothing probably if",
    "start": "143840",
    "end": "149200"
  },
  {
    "text": "uh transforms applying function on it data but there's no such thing in",
    "start": "149200",
    "end": "156400"
  },
  {
    "text": "estr which means that to compose um to compose algorithms um",
    "start": "156400",
    "end": "164319"
  },
  {
    "text": "it's it's not easy now to achieve that with ranges this is",
    "start": "164319",
    "end": "172480"
  },
  {
    "text": "extremely easy right um this is um",
    "start": "172480",
    "end": "178159"
  },
  {
    "text": "like the perhaps one of the most basic use cases of using um",
    "start": "178159",
    "end": "185280"
  },
  {
    "text": "we have data in the vector that goes through several pipes so",
    "start": "185280",
    "end": "191519"
  },
  {
    "text": "all several adapters for lenses when it's filled",
    "start": "191519",
    "end": "196959"
  },
  {
    "text": "filter and this data will only um",
    "start": "196959",
    "end": "202560"
  },
  {
    "text": "let the data from inputs that satisfy the predicate",
    "start": "202560",
    "end": "207840"
  },
  {
    "text": "that that's today's how that control will let go through to transform that will apply a function",
    "start": "207840",
    "end": "213040"
  },
  {
    "text": "and we can get the results into the um container so that's a fantastic",
    "start": "213040",
    "end": "220080"
  },
  {
    "text": "um progress from scratch to rangers to be able to write this kind",
    "start": "220080",
    "end": "225920"
  },
  {
    "text": "of code which is simple and to write it in a very simple way we can as walk around the adapters",
    "start": "225920",
    "end": "233599"
  },
  {
    "text": "there's no there's no imposed order for the adapters we can start by transforming and then filtering",
    "start": "233599",
    "end": "240319"
  },
  {
    "text": "which might give different results based on these gates but we didn't put them in any way",
    "start": "240319",
    "end": "246720"
  },
  {
    "text": "it's extremely powerful now um if we focus on on",
    "start": "246720",
    "end": "253120"
  },
  {
    "text": "this piece of code and if you try and see what's going on uh when this code",
    "start": "253120",
    "end": "260320"
  },
  {
    "text": "gets executed for example let's add a bit of blogging",
    "start": "260320",
    "end": "266479"
  },
  {
    "text": "um just to monitor what's going on um um just take a second to think",
    "start": "266479",
    "end": "274560"
  },
  {
    "text": "what this code is going to take out",
    "start": "274560",
    "end": "278479"
  },
  {
    "text": "i would expect it to print all the numbers because since transform is at the beginning of",
    "start": "280880",
    "end": "286320"
  },
  {
    "text": "pipeline it's going to receive everything from inputs so i'm expecting to see one two three four five six",
    "start": "286320",
    "end": "293759"
  },
  {
    "text": "so if we run this code what we see is that we do see one two three four five six",
    "start": "294080",
    "end": "301600"
  },
  {
    "text": "except there is a little more uh two times three and two times",
    "start": "301600",
    "end": "308080"
  },
  {
    "text": "six just a bit surprising and quite frankly i don't think that we",
    "start": "308080",
    "end": "314720"
  },
  {
    "text": "can guess what's going on just the way this goes it doesn't make sense do you understand",
    "start": "314720",
    "end": "322560"
  },
  {
    "text": "what what's going on for it to make sense we have to um dig a little deeper in the behavior",
    "start": "322560",
    "end": "329919"
  },
  {
    "text": "of ranges",
    "start": "329919",
    "end": "332720"
  },
  {
    "text": "if we go if we do it step back step we have the inputs that that are adapted with transform and the",
    "start": "335840",
    "end": "342240"
  },
  {
    "text": "result is that that will build up when we",
    "start": "342240",
    "end": "347600"
  },
  {
    "text": "create this this that range uh when filter is",
    "start": "347600",
    "end": "353680"
  },
  {
    "text": "initialized it's it's going to try and move um over to the first value that satisfies",
    "start": "353680",
    "end": "360880"
  },
  {
    "text": "us pretty good to know what when you satisfy the predicate it's going to ask transform to give it a value",
    "start": "360880",
    "end": "369120"
  },
  {
    "text": "transform will ask and turn interest to the value by a function on it",
    "start": "369120",
    "end": "376319"
  },
  {
    "text": "in our example the first the first example doesn't say it's like pretty good so it puts the moves on",
    "start": "376319",
    "end": "381440"
  },
  {
    "text": "the second one doesn't say cyber predicate one the third and third one it does satisfy",
    "start": "381440",
    "end": "387919"
  },
  {
    "text": "the predicate so ulta is ready to be used now we start the actual iteration which",
    "start": "387919",
    "end": "395919"
  },
  {
    "text": "is a um a succession of a dereferencing operator and the increment",
    "start": "395919",
    "end": "402400"
  },
  {
    "text": "operator so we start by dereferencing the first elements and we we asked future the current",
    "start": "402400",
    "end": "411039"
  },
  {
    "text": "element and it asks transforming term which applies functionality which fights to transport and as you can",
    "start": "411039",
    "end": "418319"
  },
  {
    "text": "see we have two chords so m this element and then we start",
    "start": "418319",
    "end": "426240"
  },
  {
    "text": "uh incrementing obamacare until we find something that's",
    "start": "426240",
    "end": "433520"
  },
  {
    "text": "satisfied predicate which happens in the last element and then we de-reference it and again",
    "start": "433520",
    "end": "439360"
  },
  {
    "text": "there's the second point f which is why we say one two three",
    "start": "439360",
    "end": "444400"
  },
  {
    "text": "three four five six six",
    "start": "444400",
    "end": "450960"
  },
  {
    "text": "now um ranges are great i think um i do i do",
    "start": "450960",
    "end": "458800"
  },
  {
    "text": "now in this particular case um it's it has some it's a surprising",
    "start": "458800",
    "end": "464479"
  },
  {
    "text": "behavior especially if f um is slow for example and it takes up a",
    "start": "464479",
    "end": "472240"
  },
  {
    "text": "lot of resources to run or if it has side effects for example it doesn't behave the",
    "start": "472240",
    "end": "478960"
  },
  {
    "text": "it's not to become ranges really but ranges have a design like most",
    "start": "491120",
    "end": "497599"
  },
  {
    "text": "things which means that they have trade-offs which means that they are very good at some things",
    "start": "497599",
    "end": "503599"
  },
  {
    "text": "and perhaps not as good as other things this is a trade-off now um",
    "start": "503599",
    "end": "510879"
  },
  {
    "text": "the the design of rangers that causes",
    "start": "510879",
    "end": "517680"
  },
  {
    "text": "this trade-off is that ranges are based on a pool mod which means that every um component",
    "start": "517680",
    "end": "525279"
  },
  {
    "text": "in this pipeline um pulls data from the one before it pulls up to the",
    "start": "525279",
    "end": "532080"
  },
  {
    "text": "data from platform and transform data from inputs",
    "start": "532080",
    "end": "536640"
  },
  {
    "text": "what if what if we would design the library differently what if instead",
    "start": "537680",
    "end": "544880"
  },
  {
    "text": "of using a control model we would use a push mode as in inputs would provide actively provide",
    "start": "544880",
    "end": "552160"
  },
  {
    "text": "data transform which would apply a function on the data and and pushes this result",
    "start": "552160",
    "end": "560000"
  },
  {
    "text": "over filter which would um either not do anything or push it to the next",
    "start": "560000",
    "end": "565600"
  },
  {
    "text": "one the purpose of this thought is to",
    "start": "565600",
    "end": "571680"
  },
  {
    "text": "explore this other possibility which is not just",
    "start": "571680",
    "end": "576959"
  },
  {
    "text": "and we'll see what advantages the push model brings and what drawback",
    "start": "578080",
    "end": "584399"
  },
  {
    "text": "brings and how we can use ranges and this other model together to have um best of both",
    "start": "584399",
    "end": "592080"
  },
  {
    "text": "worlds if we um try and represent",
    "start": "592080",
    "end": "600080"
  },
  {
    "text": "this push model i think that pipes as in like the plumbing that surrounds",
    "start": "600080",
    "end": "605680"
  },
  {
    "text": "you in your phone ceiling or behind your walls uh actual plumbing where it walks up and",
    "start": "605680",
    "end": "611519"
  },
  {
    "text": "flows through um i think it's a good analogy because it's like input sense stuff like data or",
    "start": "611519",
    "end": "619760"
  },
  {
    "text": "drops of water so you transform which does its stuff and then pushes data to the next five the next",
    "start": "619760",
    "end": "627040"
  },
  {
    "text": "five down the pipeline and so on so far it's just drawing",
    "start": "627040",
    "end": "632480"
  },
  {
    "text": "it's not codes we're going to code",
    "start": "632480",
    "end": "636320"
  },
  {
    "text": "um now if we if we imagine this push model with eyes and we go back to",
    "start": "639120",
    "end": "646000"
  },
  {
    "text": "our example of starting with the transform and then builds up then this would behave like that and and",
    "start": "646000",
    "end": "654399"
  },
  {
    "text": "we have to put something at the end because filter has to push data for something let's let's call this thing push back",
    "start": "654399",
    "end": "661680"
  },
  {
    "text": "and let's say that pushback is tied to container vector for example and just push back on",
    "start": "661680",
    "end": "667200"
  },
  {
    "text": "the data it receives it seems to to add it to the container",
    "start": "667200",
    "end": "673120"
  },
  {
    "text": "so let's see what's happening we have one that goes to transform that has flight on it that goes to filter",
    "start": "673440",
    "end": "679200"
  },
  {
    "text": "that doesn't come out because there's a satisfied predator same thing f2 and three comes in comes",
    "start": "679200",
    "end": "684959"
  },
  {
    "text": "out of transform and that's this one satisfies pretty good and it goes through",
    "start": "684959",
    "end": "690079"
  },
  {
    "text": "pushback and ends up in the container full doesn't satisfy pretty good now",
    "start": "690079",
    "end": "695920"
  },
  {
    "text": "that does five and six um just so it's very pretty good",
    "start": "695920",
    "end": "701519"
  },
  {
    "text": "has the function applied on it and it ends up in side of the container so this is",
    "start": "701519",
    "end": "709360"
  },
  {
    "text": "the idea of this bush hives model",
    "start": "709360",
    "end": "717600"
  },
  {
    "text": "now um let's see some code how how do we write that in code um",
    "start": "717600",
    "end": "724240"
  },
  {
    "text": "well the purpose is to write code that looks as much as possible like uh",
    "start": "724240",
    "end": "731360"
  },
  {
    "text": "like like the drawing right so in code we have inputs that um",
    "start": "731360",
    "end": "737600"
  },
  {
    "text": "send status transforms data sets data",
    "start": "737600",
    "end": "742720"
  },
  {
    "text": "looks a bit like ranges really but it's it's working with a push model as opposed to a pool",
    "start": "743040",
    "end": "750160"
  },
  {
    "text": "um this is like um fundamental notion of this talk so if if you have a doubt",
    "start": "750160",
    "end": "755519"
  },
  {
    "text": "it's not 100 sure to know what i mean between pushing forward just let me know how you",
    "start": "755519",
    "end": "762320"
  },
  {
    "text": "can unuse",
    "start": "762320",
    "end": "765120"
  },
  {
    "text": "this is actual code right there's a library that connects that this is he got first it's available",
    "start": "769600",
    "end": "775040"
  },
  {
    "text": "um github now if we",
    "start": "775040",
    "end": "781120"
  },
  {
    "text": "do the same test and add some vlogging and check what",
    "start": "781120",
    "end": "787120"
  },
  {
    "text": "[Music]",
    "start": "789520",
    "end": "792559"
  },
  {
    "text": "now as you can notice this is not the type operator even though this is for",
    "start": "797839",
    "end": "803200"
  },
  {
    "text": "the pi library um surprising so why this",
    "start": "803200",
    "end": "811600"
  },
  {
    "text": "greater greater equal operator well if you look at the pipes and imagine",
    "start": "811600",
    "end": "818399"
  },
  {
    "text": "data flowing in um then the equal sign sort of like it looks like",
    "start": "818399",
    "end": "824160"
  },
  {
    "text": "right so this is uh",
    "start": "824160",
    "end": "829440"
  },
  {
    "text": "coming through well this is uh actually this is the reason that i found out the original reason is it's more",
    "start": "829440",
    "end": "837360"
  },
  {
    "text": "technical it's because of the associated zoom in on that",
    "start": "837360",
    "end": "843160"
  },
  {
    "text": "[Music] this greater great equal operator is",
    "start": "843160",
    "end": "849680"
  },
  {
    "text": "right associated which means that when there's an expression worth without several of them",
    "start": "849680",
    "end": "855600"
  },
  {
    "text": "you can kind of start by considering the one on the right hand side right this one",
    "start": "855600",
    "end": "862639"
  },
  {
    "text": "so this um gets some results let's call that",
    "start": "862639",
    "end": "868399"
  },
  {
    "text": "pipeline one for example and five by one gets associated with transport this is uh available so for example",
    "start": "868399",
    "end": "876560"
  },
  {
    "text": "and uh the data inside of inputs get pushed into pipeline two",
    "start": "876560",
    "end": "884240"
  },
  {
    "text": "now if we have an n value as inputs this were okay and if we have an",
    "start": "884240",
    "end": "891600"
  },
  {
    "text": "r value this will purchase the same way now if we um have right associated",
    "start": "891600",
    "end": "900480"
  },
  {
    "text": "that means that we have we have either n value of r values as inputs",
    "start": "900480",
    "end": "907040"
  },
  {
    "text": "now if you consider the type of writeout",
    "start": "908320",
    "end": "912880"
  },
  {
    "text": "and this one is left left associated which means that when we start with the expression compiler start",
    "start": "914800",
    "end": "921120"
  },
  {
    "text": "considering the expression on the left hand side this produces a resource",
    "start": "921120",
    "end": "927600"
  },
  {
    "text": "and since this result has to be associated with the other the other components down the line for example futa",
    "start": "927600",
    "end": "934320"
  },
  {
    "text": "it has to um somehow keep a reference to the data inside of",
    "start": "934320",
    "end": "940880"
  },
  {
    "text": "the inputs if this is an n value this is okay",
    "start": "940880",
    "end": "947839"
  },
  {
    "text": "this is easy to do we can just keep reference if it's an r value then we have to keep",
    "start": "947839",
    "end": "954160"
  },
  {
    "text": "reference to the um temporary objects that's represented by",
    "start": "954160",
    "end": "959600"
  },
  {
    "text": "the power bank and this is not as simple",
    "start": "959600",
    "end": "964880"
  },
  {
    "text": "it's a bit complicated actually now rangers have this question because",
    "start": "964880",
    "end": "970560"
  },
  {
    "text": "branches uses the type of writers how do they manage to handle our values",
    "start": "970560",
    "end": "977839"
  },
  {
    "text": "the answer is um they don't french",
    "start": "977839",
    "end": "983839"
  },
  {
    "text": "greater greater equal operator even though he doesn't have such a a great name um hello is handling our",
    "start": "992639",
    "end": "999759"
  },
  {
    "text": "values so it's trade-off",
    "start": "999759",
    "end": "1004720"
  },
  {
    "text": "now we've we've had some intuition for pipes um the rest of the talk is to discover",
    "start": "1006000",
    "end": "1014240"
  },
  {
    "text": "what types are going to do as in what the push model allows to do specifically",
    "start": "1014240",
    "end": "1020320"
  },
  {
    "text": "that we can't do with any other model we start with",
    "start": "1020320",
    "end": "1025520"
  },
  {
    "text": "looking inside the pipes and the property of pipes being able to",
    "start": "1025520",
    "end": "1031678"
  },
  {
    "text": "branch out and then we see what we get into a",
    "start": "1031679",
    "end": "1037199"
  },
  {
    "text": "pipeline and then what can come out of the pipeline and then um the interest of a pipeline",
    "start": "1037199",
    "end": "1045678"
  },
  {
    "text": "to make things come out of it with some specific project",
    "start": "1045679",
    "end": "1050799"
  },
  {
    "text": "the whole purpose of that is to have expressive fault uh every every day",
    "start": "1050799",
    "end": "1058480"
  },
  {
    "text": "so we've seen transform we've seen thoughts out but um",
    "start": "1059600",
    "end": "1065120"
  },
  {
    "text": "do you um what you expect um to take um just the first thing once you send",
    "start": "1065200",
    "end": "1071039"
  },
  {
    "text": "them away or to join as well um now let's zoom in into one let's see",
    "start": "1071039",
    "end": "1079039"
  },
  {
    "text": "what's inside what the code inside of the pipe looks like and to do that we're going to",
    "start": "1079039",
    "end": "1088160"
  },
  {
    "text": "code up the transform pipe",
    "start": "1088160",
    "end": "1095039"
  },
  {
    "text": "so um this is uh some this is the code of the library where where i took out",
    "start": "1095039",
    "end": "1100240"
  },
  {
    "text": "the code of the transform part this is transform.htpp normally there's a good transform right here i've taken it out",
    "start": "1100240",
    "end": "1107120"
  },
  {
    "text": "and we have a unit test transform that does uh what we would expect that we have networks that gets typed",
    "start": "1107120",
    "end": "1114640"
  },
  {
    "text": "into transform with with a function the result is fighting to a collection",
    "start": "1114640",
    "end": "1121600"
  },
  {
    "text": "and we expect the results to be uh twice the input function",
    "start": "1121600",
    "end": "1128480"
  },
  {
    "text": "so we're going to call that very transform well if we look at the",
    "start": "1129840",
    "end": "1137840"
  },
  {
    "text": "syntax using transform we pass it a function anything that can be called",
    "start": "1137840",
    "end": "1145120"
  },
  {
    "text": "in its um structure so let's let's do just that so we have a glass transform",
    "start": "1145120",
    "end": "1154480"
  },
  {
    "text": "with a constructor [Music]",
    "start": "1156559",
    "end": "1161679"
  },
  {
    "text": "that takes some",
    "start": "1161679",
    "end": "1164960"
  },
  {
    "text": "[Music]",
    "start": "1167510",
    "end": "1170650"
  },
  {
    "text": "and it sounds",
    "start": "1174960",
    "end": "1179840"
  },
  {
    "text": "[Music]",
    "start": "1180420",
    "end": "1185509"
  },
  {
    "text": "[Music]",
    "start": "1190470",
    "end": "1195869"
  },
  {
    "text": "and it has to be integrated integrated with the poor library we're gonna go through various features",
    "start": "1204000",
    "end": "1210080"
  },
  {
    "text": "of the library and there are quite a few the first one is just passable with the creator pointer",
    "start": "1210080",
    "end": "1216720"
  },
  {
    "text": "granted whether it writes down there are plenty of other features so um",
    "start": "1216720",
    "end": "1222480"
  },
  {
    "text": "we're just going to let the library know that transform is applicable to do that we're going to inherit from",
    "start": "1222480",
    "end": "1228559"
  },
  {
    "text": "the title dates um if you want to have a look at pi bays it's not too",
    "start": "1228559",
    "end": "1234559"
  },
  {
    "text": "complicated this is more attack",
    "start": "1234559",
    "end": "1241760"
  },
  {
    "text": "based class it's just the tanks like that this is the fight so should be",
    "start": "1242159",
    "end": "1248480"
  },
  {
    "text": "treated right now we need to make transform um",
    "start": "1248480",
    "end": "1253840"
  },
  {
    "text": "do its job of applying the function to do that we have just one interface or",
    "start": "1253840",
    "end": "1259919"
  },
  {
    "text": "functions",
    "start": "1259919",
    "end": "1262320"
  },
  {
    "text": "and it takes a value say value",
    "start": "1266559",
    "end": "1277840"
  },
  {
    "text": "and there is we transformed it who to push",
    "start": "1279440",
    "end": "1286480"
  },
  {
    "text": "its value so it's going to push",
    "start": "1286720",
    "end": "1290960"
  },
  {
    "text": "style",
    "start": "1302840",
    "end": "1305840"
  },
  {
    "text": "[Music]",
    "start": "1308930",
    "end": "1314159"
  },
  {
    "text": "wants to apply the function on value and send that to the wi-fi",
    "start": "1314159",
    "end": "1322960"
  },
  {
    "text": "there's a function provided by the arrival firewall which is good sends a free function",
    "start": "1322960",
    "end": "1329600"
  },
  {
    "text": "the",
    "start": "1330880",
    "end": "1333120"
  },
  {
    "text": "[Music] function [Music]",
    "start": "1341760",
    "end": "1349349"
  },
  {
    "text": "folks [Music]",
    "start": "1358840",
    "end": "1364268"
  },
  {
    "text": "it's failed why is it found actually it's going because the library",
    "start": "1366960",
    "end": "1372320"
  },
  {
    "text": "is compatible with c plus plus 14. and back then in 0.42",
    "start": "1372320",
    "end": "1379919"
  },
  {
    "text": "you have to specify the temperatures",
    "start": "1379919",
    "end": "1384158"
  },
  {
    "text": "it's a design choice as possible because i think that it's a",
    "start": "1386159",
    "end": "1393120"
  },
  {
    "text": "fairly reasonable trade-off between that",
    "start": "1393120",
    "end": "1399520"
  },
  {
    "text": "today but that's okay we'll just have the um classic trench of returning",
    "start": "1400840",
    "end": "1408830"
  },
  {
    "text": "[Music] the template object with the help out",
    "start": "1408830",
    "end": "1417840"
  },
  {
    "text": "and that returns a transform object so this should have a different name",
    "start": "1425919",
    "end": "1431840"
  },
  {
    "text": "and we can transform",
    "start": "1436720",
    "end": "1445840"
  },
  {
    "text": "[Music]",
    "start": "1449340",
    "end": "1452419"
  },
  {
    "text": "[Music]",
    "start": "1457010",
    "end": "1460119"
  },
  {
    "text": "what i'm going to run the tests",
    "start": "1462240",
    "end": "1467840"
  },
  {
    "text": "it's new page",
    "start": "1468880",
    "end": "1473840"
  },
  {
    "text": "is [Music]",
    "start": "1484840",
    "end": "1489290"
  },
  {
    "text": "[Music]",
    "start": "1493620",
    "end": "1496680"
  },
  {
    "text": "is",
    "start": "1512840",
    "end": "1515840"
  },
  {
    "text": "so we've seen what's inside of the type and how it is",
    "start": "1522480",
    "end": "1528640"
  },
  {
    "text": "now there's a an interesting property is to be able to branch out if we go back to the plumbing world from",
    "start": "1528640",
    "end": "1536480"
  },
  {
    "text": "your world if you have a pipeline you can you can easily imagine",
    "start": "1536480",
    "end": "1541600"
  },
  {
    "text": "that and have something that goes into certain directions",
    "start": "1541600",
    "end": "1546559"
  },
  {
    "text": "right on your team and you can think of a t as in",
    "start": "1546640",
    "end": "1553840"
  },
  {
    "text": "the t program in unix that forwards the incoming data",
    "start": "1553840",
    "end": "1561279"
  },
  {
    "text": "to the next program down the line but that also dumps that data to a5",
    "start": "1561279",
    "end": "1571840"
  },
  {
    "text": "we can we can have the same thing with a pipeline numbing and we can have the same thing with a",
    "start": "1572640",
    "end": "1578240"
  },
  {
    "text": "point line and we could look them",
    "start": "1578240",
    "end": "1585840"
  },
  {
    "text": "so this is just drawing if we look at codes this could look like this so we have",
    "start": "1589440",
    "end": "1595200"
  },
  {
    "text": "inputs like five states to transform that state down to t and c",
    "start": "1595200",
    "end": "1600400"
  },
  {
    "text": "has a new branch that's just to push back this case that um sends data",
    "start": "1600400",
    "end": "1606799"
  },
  {
    "text": "is the temperature results container and then the pipeline continues afterwards",
    "start": "1606799",
    "end": "1614400"
  },
  {
    "text": "if we um try and think about how this is going to happen all the data that comes out of transport",
    "start": "1614880",
    "end": "1622480"
  },
  {
    "text": "gets into t comes down into a pushback at the bottom",
    "start": "1622480",
    "end": "1628000"
  },
  {
    "text": "and also on the right to the filter i will either let it go through",
    "start": "1628000",
    "end": "1635200"
  },
  {
    "text": "so this is a slightly more complex pipeline and it's um the nice thing about",
    "start": "1635760",
    "end": "1643279"
  },
  {
    "text": "it is that it the code looks like forward looks like",
    "start": "1643279",
    "end": "1649278"
  },
  {
    "text": "t branches out in two direction and for the purpose of logging now we",
    "start": "1652000",
    "end": "1658480"
  },
  {
    "text": "can imagine to branch off into any number of directions",
    "start": "1658480",
    "end": "1664159"
  },
  {
    "text": "into several directions right um and then each branch of the fork could have",
    "start": "1664640",
    "end": "1670399"
  },
  {
    "text": "another pipeline applied to it which could have any anything in it",
    "start": "1670399",
    "end": "1678640"
  },
  {
    "text": "this this is a more complex pipeline [Music] and in code it will look like that",
    "start": "1679279",
    "end": "1688240"
  },
  {
    "text": "we have transformed that type into four and four takes several arguments each of which",
    "start": "1690559",
    "end": "1697760"
  },
  {
    "text": "is and if we send uh some some data to trunks in fact",
    "start": "1697760",
    "end": "1704720"
  },
  {
    "text": "at the beginning of the program it would go all the way and be duplicated",
    "start": "1704720",
    "end": "1711840"
  },
  {
    "text": "another way to branch out is to unzip the repair",
    "start": "1719360",
    "end": "1725840"
  },
  {
    "text": "further a typical use case for that is to work with the map which is a",
    "start": "1736840",
    "end": "1742000"
  },
  {
    "text": "collection of pairs and we can break down",
    "start": "1742000",
    "end": "1748000"
  },
  {
    "text": "a production of keys any collection of values with with the code that just said that",
    "start": "1748000",
    "end": "1756159"
  },
  {
    "text": "this information nothing more than to say just break the talk break the power",
    "start": "1756159",
    "end": "1766000"
  },
  {
    "text": "so this this capacity of branching out into several directions i think it's",
    "start": "1766000",
    "end": "1772000"
  },
  {
    "text": "unique to the push model i think you need to find obviously",
    "start": "1772000",
    "end": "1777840"
  },
  {
    "text": "and this is useful to uh represents fairly complex pipelines with fairly",
    "start": "1777919",
    "end": "1785120"
  },
  {
    "text": "simple or at least very that doesn't doesn't say much more than just departure",
    "start": "1785120",
    "end": "1795840"
  },
  {
    "text": "okay now let's let's see what we can get into the pipeline",
    "start": "1797279",
    "end": "1804320"
  },
  {
    "text": "so far we've seen all our examples with vectors a vector is an ester",
    "start": "1804399",
    "end": "1812000"
  },
  {
    "text": "container um when uh when anything that has a beginning and an end such a vector is uh associated with",
    "start": "1812000",
    "end": "1821600"
  },
  {
    "text": "then the library iterates over that lecture and sends every element one by",
    "start": "1821600",
    "end": "1828080"
  },
  {
    "text": "one to the pipeline now it just needs a beginning and end which means it doesn't have to be",
    "start": "1828080",
    "end": "1833279"
  },
  {
    "text": "a necessary container means that we can use anything from ranges library and i think",
    "start": "1833279",
    "end": "1841279"
  },
  {
    "text": "that this is how rangers and pipes can collaborate to use the strength of",
    "start": "1841279",
    "end": "1848399"
  },
  {
    "text": "both of them have uh getting people powerful and more expressive than just",
    "start": "1848399",
    "end": "1855120"
  },
  {
    "text": "to think only one of them",
    "start": "1855120",
    "end": "1858960"
  },
  {
    "text": "now since uh the data that gets into a pipeline is",
    "start": "1861120",
    "end": "1868080"
  },
  {
    "text": "pushed it can be pushed from any source one example is the output of an ester",
    "start": "1868080",
    "end": "1874559"
  },
  {
    "text": "variable so when you think about it necessary algorithm takes data",
    "start": "1874559",
    "end": "1879679"
  },
  {
    "text": "and produces its results through an output equator which is some sort of like exit door",
    "start": "1879679",
    "end": "1885840"
  },
  {
    "text": "where where data gets pushed if we could connect somehow",
    "start": "1885840",
    "end": "1892080"
  },
  {
    "text": "the results of the algorithm with the pipeline could pick up the results",
    "start": "1892080",
    "end": "1899840"
  },
  {
    "text": "from the algorithm directly into the pipeline to apply complex treatments on the results of",
    "start": "1899840",
    "end": "1905440"
  },
  {
    "text": "vanessa algorithm without allocating a",
    "start": "1905440",
    "end": "1911200"
  },
  {
    "text": "an intermediary lecture to store the results and then work on that which would incur some",
    "start": "1911200",
    "end": "1917760"
  },
  {
    "text": "posts caused by",
    "start": "1917760",
    "end": "1920960"
  },
  {
    "text": "[Music] it just works to do that we can",
    "start": "1929360",
    "end": "1937039"
  },
  {
    "text": "put a pipeline in the position of an output transfer",
    "start": "1937039",
    "end": "1942960"
  },
  {
    "text": "pipelines have the same interface as output traders",
    "start": "1942960",
    "end": "1949120"
  },
  {
    "text": "this is one of the things that get free when when inheriting from the",
    "start": "1959440",
    "end": "1965760"
  },
  {
    "text": "five base uh plants you think that's about the vice",
    "start": "1965760",
    "end": "1972240"
  },
  {
    "text": "with this fight then library",
    "start": "1973039",
    "end": "1977840"
  },
  {
    "text": "now this gets perhaps more interesting if the algorithm has several outputs",
    "start": "1986080",
    "end": "1992799"
  },
  {
    "text": "in the in the yes yeah there are not many algorithm perhaps there's just one",
    "start": "1992799",
    "end": "1998480"
  },
  {
    "text": "actually that's partitioned properly um but if you if you think",
    "start": "1998480",
    "end": "2004880"
  },
  {
    "text": "a bit a bit better than the stl uh there's one algorithm that",
    "start": "2004880",
    "end": "2010399"
  },
  {
    "text": "i think is quite useful on nearly daily basis that's my every day",
    "start": "2010399",
    "end": "2016840"
  },
  {
    "text": "but it's um the possibility to when you have two",
    "start": "2016840",
    "end": "2022320"
  },
  {
    "text": "connections two sorts of collections to separate somehow to segregate um",
    "start": "2022320",
    "end": "2028559"
  },
  {
    "text": "the elements of the islands in the first one and not in the second one and the one that i in the second one but not in",
    "start": "2028559",
    "end": "2033600"
  },
  {
    "text": "the first one and those that i'm both sort of like a set difference from both sides and the set union all at",
    "start": "2033600",
    "end": "2041360"
  },
  {
    "text": "the same time just one track it's not tremendously difficult to grow it up it's not the",
    "start": "2041360",
    "end": "2047519"
  },
  {
    "text": "topic of today but let's imagine that we have such that's called set segregation",
    "start": "2047519",
    "end": "2053919"
  },
  {
    "text": "or you can easily imagine that sugarcoat has three output iterators",
    "start": "2053919",
    "end": "2060079"
  },
  {
    "text": "and that we can um plug each one of them into a poi point",
    "start": "2060079",
    "end": "2067040"
  },
  {
    "text": "and the code just looks like the drawing",
    "start": "2069359",
    "end": "2075440"
  },
  {
    "text": "as you can see it takes two ranges as a foot",
    "start": "2075440",
    "end": "2080720"
  },
  {
    "text": "and has three at three output parameters you",
    "start": "2080720",
    "end": "2088960"
  },
  {
    "text": "so far every pipeline has just one source of data",
    "start": "2095200",
    "end": "2100880"
  },
  {
    "text": "what if we wanted to work with several sources of sources of data at the same time the most basic use case",
    "start": "2101119",
    "end": "2108640"
  },
  {
    "text": "for that is to sieve them together as in have two um two collections like",
    "start": "2108640",
    "end": "2113760"
  },
  {
    "text": "input one input two and we want to",
    "start": "2113760",
    "end": "2118720"
  },
  {
    "text": "traverse them in lockstep and taking the first elements of both and do something with those two errors",
    "start": "2118800",
    "end": "2124240"
  },
  {
    "text": "and then second both functions those two second elements and so",
    "start": "2124240",
    "end": "2130960"
  },
  {
    "text": "zip um puts together two collections into a collection of tools",
    "start": "2143359",
    "end": "2150720"
  },
  {
    "text": "right so we have um zip that will produce football filter and filter",
    "start": "2152000",
    "end": "2160160"
  },
  {
    "text": "reads those circle and apply the predicate to decide whether or not to do that",
    "start": "2160160",
    "end": "2166240"
  },
  {
    "text": "available transfer applies a function on this on this um",
    "start": "2166240",
    "end": "2173839"
  },
  {
    "text": "to not say much but this is the end that you can prevent it as an auto showing",
    "start": "2183680",
    "end": "2190880"
  },
  {
    "text": "and we can use trucks to not show your game functions right so",
    "start": "2190880",
    "end": "2197359"
  },
  {
    "text": "this gets much",
    "start": "2197359",
    "end": "2201838"
  },
  {
    "text": "now still we don't see the the two separate arguments in",
    "start": "2208240",
    "end": "2214960"
  },
  {
    "text": "if we go back to pipes uh we can imagine a pipe where we provide data from two collections and",
    "start": "2219040",
    "end": "2225040"
  },
  {
    "text": "this by sends those those pieces of data independent",
    "start": "2225040",
    "end": "2230160"
  },
  {
    "text": "i'll show you in codes but just first with the drawing with an",
    "start": "2230160",
    "end": "2236560"
  },
  {
    "text": "intuition uh data comes in this part that's called marks because it puts it",
    "start": "2236560",
    "end": "2242960"
  },
  {
    "text": "[Music]",
    "start": "2243950",
    "end": "2247130"
  },
  {
    "text": "the um important difference here with the previous code is that there is no football this is",
    "start": "2253839",
    "end": "2261599"
  },
  {
    "text": "just regular functions and this this comes from this is made possible by the push",
    "start": "2261599",
    "end": "2267280"
  },
  {
    "text": "model because the push model just cause functions it it calls the next pipe when you call",
    "start": "2267280",
    "end": "2274960"
  },
  {
    "text": "the function you don't you can pass as many arguments at once you don't have to pass just one foot past argument seven",
    "start": "2274960",
    "end": "2283119"
  },
  {
    "text": "which means that there is no toolbar showing up you don't have to open up a table and you can see the parameters inside of",
    "start": "2283119",
    "end": "2289920"
  },
  {
    "text": "their prototypes and we've transformed this particular code",
    "start": "2289920",
    "end": "2295680"
  },
  {
    "text": "used to multiplies because this is the function that takes the prime results and",
    "start": "2295680",
    "end": "2301119"
  },
  {
    "text": "just pass them together how we code that let's go back to the code",
    "start": "2301119",
    "end": "2309599"
  },
  {
    "text": "let's add a use case max",
    "start": "2310320",
    "end": "2315280"
  },
  {
    "text": "in this test case we have two connections this one input one number two and we mix them",
    "start": "2318720",
    "end": "2325599"
  },
  {
    "text": "together and we would like transform to be able to cope with several pieces of data coming its",
    "start": "2325599",
    "end": "2332400"
  },
  {
    "text": "way at the same time then transform would do something with",
    "start": "2332400",
    "end": "2338480"
  },
  {
    "text": "them and and send the results",
    "start": "2338480",
    "end": "2343200"
  },
  {
    "text": "if i try and compile this code it fails because transform does not handle that",
    "start": "2343760",
    "end": "2351280"
  },
  {
    "text": "because transform receives only one value to make it receive several values well",
    "start": "2351280",
    "end": "2358960"
  },
  {
    "text": "we can just make it we see [Music]",
    "start": "2358960",
    "end": "2366190"
  },
  {
    "text": "so i just add rules and talk about",
    "start": "2367359",
    "end": "2373599"
  },
  {
    "text": "[Music] that's fine let's try and build this",
    "start": "2376490",
    "end": "2382079"
  },
  {
    "text": "directory",
    "start": "2382079",
    "end": "2384640"
  },
  {
    "text": "and it passes so it's it's it's because",
    "start": "2388240",
    "end": "2396800"
  },
  {
    "text": "we are sending we are we are receiving",
    "start": "2396800",
    "end": "2401839"
  },
  {
    "text": "previous files which is nice just sends data separately to",
    "start": "2402160",
    "end": "2408720"
  },
  {
    "text": "a",
    "start": "2408720",
    "end": "2410880"
  },
  {
    "text": "to draw on it",
    "start": "2417839",
    "end": "2425839"
  },
  {
    "text": "let's see uh um an example uh just to get some impression of how to use pipes with uh",
    "start": "2428800",
    "end": "2435599"
  },
  {
    "text": "tweets use gates let's let's use an example uh based in biology this is",
    "start": "2435599",
    "end": "2443920"
  },
  {
    "text": "just like any domain i think it's fascinating um i don't know anything about biology",
    "start": "2443920",
    "end": "2449839"
  },
  {
    "text": "so you will be able to understand everything in this example",
    "start": "2449839",
    "end": "2456720"
  },
  {
    "text": "so um from what i understand the chromosomes of a person so let's",
    "start": "2456800",
    "end": "2462400"
  },
  {
    "text": "let's say that this is the chromosome of the chromosomes of someone called",
    "start": "2462400",
    "end": "2468078"
  },
  {
    "text": "they go by hair and and john has every bad one chromosome",
    "start": "2468160",
    "end": "2474800"
  },
  {
    "text": "coming from stats and one chromosome",
    "start": "2474800",
    "end": "2481200"
  },
  {
    "text": "now um we're going to create new chromosomes the children of",
    "start": "2481200",
    "end": "2487599"
  },
  {
    "text": "john how does that happen so so john has two chromosomes over there",
    "start": "2487599",
    "end": "2494079"
  },
  {
    "text": "and then um there is some sort of like mixing of the two chromosomes together",
    "start": "2494079",
    "end": "2499520"
  },
  {
    "text": "which is called crossing over uh this is taken of wikipedia",
    "start": "2499520",
    "end": "2506079"
  },
  {
    "text": "easy stuff the two chromosomes bend around each other",
    "start": "2506560",
    "end": "2513359"
  },
  {
    "text": "and and then this splits which means that at each segment of the chromosome let's say",
    "start": "2513359",
    "end": "2520480"
  },
  {
    "text": "at each",
    "start": "2520480",
    "end": "2522960"
  },
  {
    "text": "for each g one of the two resulting chromosome has",
    "start": "2533760",
    "end": "2539440"
  },
  {
    "text": "either version of john's dad or the version of john",
    "start": "2539440",
    "end": "2544640"
  },
  {
    "text": "right and then this creates two new unique chromosomes that are neighbor",
    "start": "2545200",
    "end": "2551440"
  },
  {
    "text": "like john's or john stazz of transparency two new potential thousands this is how",
    "start": "2551440",
    "end": "2559520"
  },
  {
    "text": "john makes its dna",
    "start": "2559520",
    "end": "2564800"
  },
  {
    "text": "now should we code that into plus plus",
    "start": "2564800",
    "end": "2573680"
  },
  {
    "text": "generate new chromosomes let's say that we have um two strings",
    "start": "2573680",
    "end": "2581839"
  },
  {
    "text": "for example chromosome is a string and a g is a character and it can be either",
    "start": "2581839",
    "end": "2590240"
  },
  {
    "text": "a d or",
    "start": "2590240",
    "end": "2593040"
  },
  {
    "text": "we have two collections the first one is the second one is mmfm and we want to",
    "start": "2595680",
    "end": "2601920"
  },
  {
    "text": "have two collections with either some of these excellent ends and um we want um",
    "start": "2601920",
    "end": "2609920"
  },
  {
    "text": "if one is d one chromosome the other one uh responding from the corresponding",
    "start": "2609920",
    "end": "2615839"
  },
  {
    "text": "gene just like before right how would we code that how would we code that was",
    "start": "2615839",
    "end": "2624640"
  },
  {
    "text": "advice well first there is clearly",
    "start": "2624640",
    "end": "2630400"
  },
  {
    "text": "two collections that needs to be associated and then somehow operated",
    "start": "2630400",
    "end": "2637520"
  },
  {
    "text": "you can associate them with mux then marx sends every pair of genes",
    "start": "2638640",
    "end": "2647599"
  },
  {
    "text": "next step do something sounds like applying your function which sounds it sounds like a job to transform",
    "start": "2650079",
    "end": "2656720"
  },
  {
    "text": "so the the thing to do with those two chromosomes is either have to invert them",
    "start": "2656720",
    "end": "2662720"
  },
  {
    "text": "or to loot them the way they are and this is random so the function to do that would either",
    "start": "2662720",
    "end": "2671200"
  },
  {
    "text": "swap them or leave them alone and then it would produce",
    "start": "2671200",
    "end": "2676560"
  },
  {
    "text": "with those two genes and unzip will break them off into two separate genes",
    "start": "2676560",
    "end": "2682650"
  },
  {
    "text": "[Music] the crossover function um",
    "start": "2682650",
    "end": "2690319"
  },
  {
    "text": "draws a number randomly with two possibilities and either sort",
    "start": "2690319",
    "end": "2695839"
  },
  {
    "text": "of genes or just the way they are and if we assemble the pipeline and code",
    "start": "2695839",
    "end": "2702960"
  },
  {
    "text": "it up it looks like this have two strings about one and we must them",
    "start": "2702960",
    "end": "2711040"
  },
  {
    "text": "transform them across over and unzip them push them back into the two tubes",
    "start": "2711040",
    "end": "2716640"
  },
  {
    "text": "children we run that program on one runs",
    "start": "2716640",
    "end": "2726240"
  },
  {
    "text": "as some randomness so it doesn't do the same thing at every regard",
    "start": "2726240",
    "end": "2732640"
  },
  {
    "text": "and if we think if we think in terms of vibes then this goes describes",
    "start": "2735680",
    "end": "2742880"
  },
  {
    "text": "the problem it's quite the domain problem",
    "start": "2742880",
    "end": "2747838"
  },
  {
    "text": "with not too much code [Music]",
    "start": "2749040",
    "end": "2755019"
  },
  {
    "text": "another way to work with several collections is to work with every possible combination between the",
    "start": "2755200",
    "end": "2760319"
  },
  {
    "text": "elements of the question to do that we can use",
    "start": "2760319",
    "end": "2766880"
  },
  {
    "text": "[Music] you can use the cartesian product which will mix",
    "start": "2767340",
    "end": "2773200"
  },
  {
    "text": "all the all the possible elements of the collection together send them to transform and just the",
    "start": "2773200",
    "end": "2779760"
  },
  {
    "text": "purpose of displaying something inside we send them to another file we haven't talked about which is called interspace",
    "start": "2779760",
    "end": "2785680"
  },
  {
    "text": "which includes uh something between every uh executive element receives example",
    "start": "2785680",
    "end": "2794000"
  },
  {
    "text": "and then it sends that to the final five which is",
    "start": "2794000",
    "end": "2798960"
  },
  {
    "text": "from uh but the interesting bit here i want to focus on is that quantity product it combines all the possible elements",
    "start": "2800839",
    "end": "2809760"
  },
  {
    "text": "of all the multiplications and still no doubt",
    "start": "2809760",
    "end": "2814800"
  },
  {
    "text": "like not it just sends data another way to",
    "start": "2814800",
    "end": "2822560"
  },
  {
    "text": "associate several sources of data is to associate a collection of itself by having all the",
    "start": "2822960",
    "end": "2828480"
  },
  {
    "text": "possible combinations inside of the picture",
    "start": "2828480",
    "end": "2832400"
  },
  {
    "text": "and finally you associate connection with itself by having by working on on two",
    "start": "2834160",
    "end": "2841680"
  },
  {
    "text": "successive elements this way ranges do that as well",
    "start": "2841680",
    "end": "2848800"
  },
  {
    "text": "but it's so much easier than advising them",
    "start": "2848800",
    "end": "2854078"
  },
  {
    "text": "so this guy would um do one two two three",
    "start": "2856559",
    "end": "2861839"
  },
  {
    "text": "[Music] right now moving on to the final part of",
    "start": "2862330",
    "end": "2867520"
  },
  {
    "text": "this how how",
    "start": "2867520",
    "end": "2873119"
  },
  {
    "text": "take advantage of this position",
    "start": "2880720",
    "end": "2887838"
  },
  {
    "text": "for example if we if you can sit down there stood inside that i'll put it right down which is sl there's something a bit weird about",
    "start": "2912559",
    "end": "2920559"
  },
  {
    "text": "it is that it has to you have to pass it two values the first one is the output",
    "start": "2920559",
    "end": "2926839"
  },
  {
    "text": "collections the correction which makes sense and the second value is the position where you would like to insert",
    "start": "2926839",
    "end": "2933119"
  },
  {
    "text": "this output collection if it's a vector for example it makes sense well",
    "start": "2933119",
    "end": "2938559"
  },
  {
    "text": "if you want to insert it into a set for example and specifying",
    "start": "2938559",
    "end": "2943599"
  },
  {
    "text": "the position makes less sense it can be a hint at test or it can be",
    "start": "2943599",
    "end": "2953359"
  },
  {
    "text": "something misleading for the platform and in most cases you just don't want to",
    "start": "2953599",
    "end": "2961200"
  },
  {
    "text": "say anything just like to insult stuff and then it's a good job of having a",
    "start": "2961200",
    "end": "2966720"
  },
  {
    "text": "sort of sort of data inside so this is not really useful so um",
    "start": "2966720",
    "end": "2975040"
  },
  {
    "text": "[Music] now if some reason there is one branch of the fight that we want to",
    "start": "2978190",
    "end": "2984640"
  },
  {
    "text": "ignore one more point the branch that would like to ignore we can",
    "start": "2984640",
    "end": "2991359"
  },
  {
    "text": "just cut it off with the devil eye which is a",
    "start": "2991359",
    "end": "2996960"
  },
  {
    "text": "very simple and supplied uh it's like there's no",
    "start": "2996960",
    "end": "3003838"
  },
  {
    "text": "data but if you don't care about the data that's okay and this allows to implement",
    "start": "3004640",
    "end": "3013760"
  },
  {
    "text": "some algorithms",
    "start": "3013760",
    "end": "3016720"
  },
  {
    "text": "or you can do um anything really for example you can",
    "start": "3019280",
    "end": "3027599"
  },
  {
    "text": "this is particularly useful um to work with legacy",
    "start": "3032240",
    "end": "3037280"
  },
  {
    "text": "because in in legacy code sometimes you have some homemade collections that don't have uh",
    "start": "3037280",
    "end": "3045119"
  },
  {
    "text": "sending space like yesterday they don't have a pushback they have some weird stuff um",
    "start": "3045119",
    "end": "3055119"
  },
  {
    "text": "so you can just plug the legacy function at the end of the pipeline so that you",
    "start": "3055119",
    "end": "3062000"
  },
  {
    "text": "can at least use fives or the",
    "start": "3062000",
    "end": "3068880"
  },
  {
    "text": "[Music] now something that's um also",
    "start": "3071390",
    "end": "3076559"
  },
  {
    "text": "specific to the bush model pipelines pipes is that",
    "start": "3076559",
    "end": "3083440"
  },
  {
    "text": "you can write code at the end right there is an end every",
    "start": "3083440",
    "end": "3090319"
  },
  {
    "text": "piece of data is going to somehow come out to an end it doesn't doesn't go into the",
    "start": "3090319",
    "end": "3095359"
  },
  {
    "text": "point um so you could write code at this end and and pick up the data and do",
    "start": "3095359",
    "end": "3102720"
  },
  {
    "text": "something let's see an interesting example let's say that we have",
    "start": "3102720",
    "end": "3108319"
  },
  {
    "text": "um a map or something that looks like a map for example",
    "start": "3108319",
    "end": "3115119"
  },
  {
    "text": "it's similar it's dropped overnight and we have a second one",
    "start": "3115599",
    "end": "3120880"
  },
  {
    "text": "right and um they have some keys in common and they also have some key styles",
    "start": "3120880",
    "end": "3127280"
  },
  {
    "text": "specific this example two and three are in common between the two collections",
    "start": "3127280",
    "end": "3132720"
  },
  {
    "text": "and let's say that we would like to add the data new entries into",
    "start": "3132720",
    "end": "3139200"
  },
  {
    "text": "the data of that of the first app",
    "start": "3139200",
    "end": "3144078"
  },
  {
    "text": "then it would be nice if we could aggregate the values on the because similar keys",
    "start": "3144480",
    "end": "3151760"
  },
  {
    "text": "stl you have two choices either if you have the same key either you keep",
    "start": "3151760",
    "end": "3156960"
  },
  {
    "text": "the existing one or you replace it with the big one but quite often we would like to",
    "start": "3156960",
    "end": "3166079"
  },
  {
    "text": "to have a bit of both like to aggregate the new one the existing one this is what",
    "start": "3166079",
    "end": "3172720"
  },
  {
    "text": "map aggregator which is an n5 guards because of its position it's at the",
    "start": "3172720",
    "end": "3178400"
  },
  {
    "text": "right application to do this draw",
    "start": "3178400",
    "end": "3183599"
  },
  {
    "text": "so if you have this function concatenate string which is essentially the plus operator you can just uh just cancellate the",
    "start": "3183599",
    "end": "3190640"
  },
  {
    "text": "values in those apps so at the beginning my map i'm sorry at the end might not",
    "start": "3190640",
    "end": "3197040"
  },
  {
    "text": "contain this with the keys two and three with aggravated values",
    "start": "3197040",
    "end": "3204800"
  },
  {
    "text": "now we've seen a lot of uh advantages of fives and um of the push model but",
    "start": "3207280",
    "end": "3214960"
  },
  {
    "text": "this wouldn't be a fair analysis if we have a look at the limitations because",
    "start": "3214960",
    "end": "3221119"
  },
  {
    "text": "hives have a design that they have they have some trailers and there are things that they do well",
    "start": "3221119",
    "end": "3227200"
  },
  {
    "text": "things that don't do so well so what are those limitations",
    "start": "3227200",
    "end": "3234160"
  },
  {
    "text": "some of them at least those that i've encountered so far and i guess there are more uh include",
    "start": "3234160",
    "end": "3239839"
  },
  {
    "text": "that i just don't know what's coming next right if you if you think about how we",
    "start": "3239839",
    "end": "3247359"
  },
  {
    "text": "implemented transform we have this on receive function that receive",
    "start": "3247359",
    "end": "3253359"
  },
  {
    "text": "one value at a time and that doesn't know if it is the last one",
    "start": "3253359",
    "end": "3259280"
  },
  {
    "text": "right as opposed to ranges that have a beginning and an end right",
    "start": "3259280",
    "end": "3265520"
  },
  {
    "text": "so you know when this is the end i don't know that which makes it difficult to implement",
    "start": "3265520",
    "end": "3272319"
  },
  {
    "text": "some functionality such as that for example because don't know if it's finished then",
    "start": "3272319",
    "end": "3278160"
  },
  {
    "text": "you start if you should start reversing i don't at least i don't know how to",
    "start": "3278160",
    "end": "3283520"
  },
  {
    "text": "implement that i want any idea to do that",
    "start": "3283520",
    "end": "3290400"
  },
  {
    "text": "same thing with problems don't know what it's like um they don't store data",
    "start": "3290720",
    "end": "3299200"
  },
  {
    "text": "because um they can accept any kind of data remember our on receive function",
    "start": "3299200",
    "end": "3307760"
  },
  {
    "text": "it um had a template parameter because it was banning and and this value",
    "start": "3307760",
    "end": "3315920"
  },
  {
    "text": "i could change every time which makes it very powerful but at the",
    "start": "3315920",
    "end": "3321839"
  },
  {
    "text": "same time it means that we can't store that data because we don't know the type",
    "start": "3321839",
    "end": "3326880"
  },
  {
    "text": "of value and we don't know what type should we should put into the data manga or transform people",
    "start": "3326880",
    "end": "3334799"
  },
  {
    "text": "um as opposed to rangers that know the child the type of uh what's in there right",
    "start": "3337760",
    "end": "3344319"
  },
  {
    "text": "all the elements of a wrench like thing are always at the same time and you know that's why um so there are",
    "start": "3344319",
    "end": "3352160"
  },
  {
    "text": "some things that i don't know such as clip for example",
    "start": "3352160",
    "end": "3357200"
  },
  {
    "text": "another limitation is that we can't just send something to a fight it has to be a pipeline with",
    "start": "3360000",
    "end": "3366160"
  },
  {
    "text": "an end uh like it says uh the data on the pipeline doesn't end in two volumes right has to end up",
    "start": "3366160",
    "end": "3373920"
  },
  {
    "text": "somewhere so when we build a pipeline we have to when we sorry when we send data from sources by",
    "start": "3373920",
    "end": "3382640"
  },
  {
    "text": "a a fully built id we can build the pipeline step by step and pass",
    "start": "3382640",
    "end": "3388480"
  },
  {
    "text": "it pass it on to functions or return it from functions but at the end when we",
    "start": "3388480",
    "end": "3395200"
  },
  {
    "text": "send data to it and as you noticed in code examples um",
    "start": "3395200",
    "end": "3402079"
  },
  {
    "text": "we have to create the resulting container beforehand for um before sending data",
    "start": "3402079",
    "end": "3410319"
  },
  {
    "text": "separate segments because if you have for example pushback it has to be tied to something",
    "start": "3410319",
    "end": "3418880"
  },
  {
    "text": "and if we create it on the spot as a temporary then obviously",
    "start": "3418880",
    "end": "3425599"
  },
  {
    "text": "now the trade-off of the library um allows to have some",
    "start": "3426799",
    "end": "3432799"
  },
  {
    "text": "strengths like we've seen if we go back to the",
    "start": "3432799",
    "end": "3438240"
  },
  {
    "text": "first example we went to transform filter and had one two three three four five six",
    "start": "3438240",
    "end": "3443599"
  },
  {
    "text": "six remember um we don't have this problem with pipes and we can accept our values",
    "start": "3443599",
    "end": "3452000"
  },
  {
    "text": "because of the rate of rate while points out",
    "start": "3452000",
    "end": "3457010"
  },
  {
    "text": "[Music] and there's this specific feature of branching out certain direction we can",
    "start": "3457010",
    "end": "3465200"
  },
  {
    "text": "pick up data coming out of anything like there are them for example",
    "start": "3465200",
    "end": "3471760"
  },
  {
    "text": "we can have multiple values without tools",
    "start": "3471760",
    "end": "3477040"
  },
  {
    "text": "and we have um we have a um some sort of entry point at the end of",
    "start": "3480319",
    "end": "3487200"
  },
  {
    "text": "the pipeline at the integration with these resulting containers so we can",
    "start": "3487200",
    "end": "3492880"
  },
  {
    "text": "write some code there for example map aggregate",
    "start": "3492880",
    "end": "3497759"
  },
  {
    "text": "and finally um as",
    "start": "3498960",
    "end": "3503119"
  },
  {
    "text": "need my old contributions are welcome it happens full request now i have a",
    "start": "3515040",
    "end": "3521359"
  },
  {
    "text": "question for you in terms of contributions design of the library first one is",
    "start": "3521359",
    "end": "3531520"
  },
  {
    "text": "in the examples that we've seen um we had for example pushback",
    "start": "3531520",
    "end": "3538480"
  },
  {
    "text": "of something inside of what would you think about allowing",
    "start": "3538480",
    "end": "3548000"
  },
  {
    "text": "to not say anything and do the obvious thing as in if r is a vector or if r",
    "start": "3548000",
    "end": "3555359"
  },
  {
    "text": "has a pushback method",
    "start": "3555359",
    "end": "3558558"
  },
  {
    "text": "the first expression would uh still be alone but the question is should we allow",
    "start": "3563599",
    "end": "3569359"
  },
  {
    "text": "second expression justified because it's shorter and less explicit",
    "start": "3569359",
    "end": "3574400"
  },
  {
    "text": "what do you think and second question what's the demand for this one because",
    "start": "3574400",
    "end": "3580160"
  },
  {
    "text": "create a phrase that equal equal is is not the most catchy name",
    "start": "3580160",
    "end": "3587839"
  },
  {
    "text": "that's it for me um if um if you have any um opinion",
    "start": "3591599",
    "end": "3598400"
  },
  {
    "text": "about the previous two questions i'd be glad to read them in the slack channel and",
    "start": "3598400",
    "end": "3605119"
  },
  {
    "text": "if you have any questions now about the talk or about five subscribers i'd be also",
    "start": "3605119",
    "end": "3611359"
  },
  {
    "text": "very happy to have them now snapchat thank you",
    "start": "3611359",
    "end": "3624319"
  }
]