[
  {
    "text": "okay so let's get started hello and uh welcome everyone thank you",
    "start": "1040",
    "end": "6480"
  },
  {
    "text": "for joining us in this session it's a polyglot world enabling every developer to build",
    "start": "6480",
    "end": "11920"
  },
  {
    "text": "distributed applications my name is shelinda singh johan i work as cloud solution architect in",
    "start": "11920",
    "end": "17600"
  },
  {
    "text": "microsoft and i'm co-presenting this session with my colleague mark fussell who works as",
    "start": "17600",
    "end": "23600"
  },
  {
    "text": "principal pm manager in azure incubations team",
    "start": "23600",
    "end": "31840"
  },
  {
    "text": "so in today's session first we'll talk about cloud native applications like what are",
    "start": "32239",
    "end": "38960"
  },
  {
    "text": "cloud native applications why we should use cloud native application or why should we",
    "start": "38960",
    "end": "45039"
  },
  {
    "text": "build our application in the cloud native way then we'll talk about uh some challenges",
    "start": "45039",
    "end": "51199"
  },
  {
    "text": "associated with uh building cloud native applications we'll talk about different elements of cloud",
    "start": "51199",
    "end": "56719"
  },
  {
    "text": "native like microservices devops and other things",
    "start": "56719",
    "end": "62480"
  },
  {
    "text": "then we'll talk about the distributed application runtime dapper we'll talk about that what is",
    "start": "62480",
    "end": "70080"
  },
  {
    "text": "dapper why should we use dapper why should you use dapper for building your micro services application",
    "start": "70080",
    "end": "76799"
  },
  {
    "text": "then we'll talk about the sidecar architecture of dapper and then we'll talk about building",
    "start": "76799",
    "end": "82720"
  },
  {
    "text": "blocks of dapper and we'll show you some components each building blocks have",
    "start": "82720",
    "end": "88320"
  },
  {
    "text": "i will also show you a lot of demos and then in the end last 10 to 15",
    "start": "88320",
    "end": "94640"
  },
  {
    "text": "minutes we'll take q a session do let me know if i go very fast or very",
    "start": "94640",
    "end": "101360"
  },
  {
    "text": "slow or if there is something which you don't understand there is this slack channel where you can post your",
    "start": "101360",
    "end": "106640"
  },
  {
    "text": "questions",
    "start": "106640",
    "end": "109040"
  },
  {
    "text": "so let's first talk about what is cloud native you might have heard this cloud native",
    "start": "113280",
    "end": "119840"
  },
  {
    "text": "so much in last few years like cloud native applications cloud native architectures or",
    "start": "119840",
    "end": "125840"
  },
  {
    "text": "platforms or processes so what what is this cloud native so with this slide i'm trying to you know have a",
    "start": "125840",
    "end": "132640"
  },
  {
    "text": "common understanding because this understanding is what we are going to use going forward so",
    "start": "132640",
    "end": "138080"
  },
  {
    "text": "cloud native is an approach for building application and services",
    "start": "138080",
    "end": "143520"
  },
  {
    "text": "specifically for cloud environments like public cloud private cloud or hybrid cloud it's an",
    "start": "143520",
    "end": "149680"
  },
  {
    "text": "adjective which describes application architectures",
    "start": "149680",
    "end": "155840"
  },
  {
    "text": "processes which together makes possible for us to quickly respond to changing user",
    "start": "155840",
    "end": "162720"
  },
  {
    "text": "needs and business requirements in simple terms as shown in this slide cloud native",
    "start": "162720",
    "end": "170239"
  },
  {
    "text": "is application code and dependencies packages containers deployed as microservices and exposes",
    "start": "170239",
    "end": "177519"
  },
  {
    "text": "their apis and this pretty much you can manage with devops tools and processes",
    "start": "177519",
    "end": "185840"
  },
  {
    "text": "now i have defined what is cloud native but why should i care about cloud native why should i build my applications in",
    "start": "186000",
    "end": "192319"
  },
  {
    "text": "the cloud native way so there are three main advantage i get out of building my application in the",
    "start": "192319",
    "end": "199200"
  },
  {
    "text": "cloud native way first i get the speed of innovation by use of techniques like devops or containers i",
    "start": "199200",
    "end": "206959"
  },
  {
    "text": "can quickly take an idea build an application deploy it to production give it to my users",
    "start": "206959",
    "end": "213200"
  },
  {
    "text": "and with the transparent feedback loop i can see how my applications are doing i can learn something from it and change",
    "start": "213200",
    "end": "220879"
  },
  {
    "text": "my further course as i explain that cloud native",
    "start": "220879",
    "end": "226799"
  },
  {
    "text": "heavily relies on cloud so it makes most of the benefits provided by the",
    "start": "226799",
    "end": "232319"
  },
  {
    "text": "cloud like scalability resiliency see availability and so on so when you",
    "start": "232319",
    "end": "238000"
  },
  {
    "text": "build this cloud native application you get a lot of reliability which is provided by the underlying platform",
    "start": "238000",
    "end": "244000"
  },
  {
    "text": "and by making use of platform services like a databases or identity store you get",
    "start": "244000",
    "end": "251599"
  },
  {
    "text": "more guarantee that your application will be always up and running",
    "start": "251599",
    "end": "256879"
  },
  {
    "text": "because cloud is secure at its core you automatically get these benefits in",
    "start": "256880",
    "end": "263440"
  },
  {
    "text": "your applications and cloud native is the new way for",
    "start": "263440",
    "end": "269040"
  },
  {
    "text": "building applications specifically when public private and hybrid cloud",
    "start": "269040",
    "end": "274720"
  },
  {
    "text": "are at um rise",
    "start": "274720",
    "end": "279040"
  },
  {
    "text": "now i've spoken about what is cloud native why should we use it let me show you some scenarios where cloud native",
    "start": "279759",
    "end": "287280"
  },
  {
    "text": "application architecture can be useful first is you can utilize it when you want to",
    "start": "287280",
    "end": "293600"
  },
  {
    "text": "modernize your business critical applications you can use it when you want to build",
    "start": "293600",
    "end": "298880"
  },
  {
    "text": "sas solutions you can use building real-time telemetry solutions where you want to",
    "start": "298880",
    "end": "304720"
  },
  {
    "text": "ingest data from devices on the field one very good scenario is the edge devices or edge computing",
    "start": "304720",
    "end": "310880"
  },
  {
    "text": "and then the last you can use cloud native approach to build geo-distributed applications",
    "start": "310880",
    "end": "318319"
  },
  {
    "text": "now i have spoken about cloud native cloud natives benefits and some scenarios let's talk",
    "start": "320240",
    "end": "326160"
  },
  {
    "text": "about one of the very important pillar of cloud native which is the micro services application or architectures",
    "start": "326160",
    "end": "332479"
  },
  {
    "text": "so what is this uh microservices you might have heard a lot about microservices in",
    "start": "332479",
    "end": "338080"
  },
  {
    "text": "in last few years but there is a reason why it is so popular now so let's let's try to explain what is",
    "start": "338080",
    "end": "344240"
  },
  {
    "text": "microservices microservices is a software architecture style where you build the system",
    "start": "344240",
    "end": "351600"
  },
  {
    "text": "in form of small independent services which are very much decoupled from each",
    "start": "351600",
    "end": "356639"
  },
  {
    "text": "other meaning that if you change one of the surveys and as long as you keep the",
    "start": "356639",
    "end": "362960"
  },
  {
    "text": "interfaces by which these services talk to each other consistent other services are not going to be",
    "start": "362960",
    "end": "368319"
  },
  {
    "text": "affected even if you introduce new changes in interfaces it's going to be control then",
    "start": "368319",
    "end": "374479"
  },
  {
    "text": "you will you are good to deploy your application one of the big advantage of this",
    "start": "374479",
    "end": "379759"
  },
  {
    "text": "microservices application is that all these services can be independently versioned",
    "start": "379759",
    "end": "386000"
  },
  {
    "text": "can be independently deployed and scaled so if you see this monolith diagram over",
    "start": "386000",
    "end": "392160"
  },
  {
    "text": "here an app which consists of modules or services over here when it has to scale its scales as a",
    "start": "392160",
    "end": "399759"
  },
  {
    "text": "single unit like this it will go same but in case of a microservices",
    "start": "399759",
    "end": "405840"
  },
  {
    "text": "application which is now composed of sorry which is now composed of different",
    "start": "405840",
    "end": "411280"
  },
  {
    "text": "services when it has to scale different part of the application which are services can scale so for example if",
    "start": "411280",
    "end": "417919"
  },
  {
    "text": "i'm building an e-commerce application and suddenly i have a lot of orders my order service can",
    "start": "417919",
    "end": "424240"
  },
  {
    "text": "scale up or down depending upon the load",
    "start": "424240",
    "end": "428240"
  },
  {
    "text": "i'm talking about microservices but there is a reason also comes from so much market research that why we should",
    "start": "431199",
    "end": "437440"
  },
  {
    "text": "care about microservices application as you can see that from idc they say",
    "start": "437440",
    "end": "442720"
  },
  {
    "text": "that ninety percent of new apps will feature microservices architecture by 2022. they also say that 35 percent",
    "start": "442720",
    "end": "451840"
  },
  {
    "text": "of all the production apps are cloud native um as compare will be cloud native by",
    "start": "451840",
    "end": "458880"
  },
  {
    "text": "2020 as compared to 10 less than 10 percent as of today",
    "start": "458880",
    "end": "464400"
  },
  {
    "text": "second thing is that if you if you hear about any new startup or any new new project they might be considering",
    "start": "464400",
    "end": "471199"
  },
  {
    "text": "this microservices architecture so that's why building your application in",
    "start": "471199",
    "end": "477120"
  },
  {
    "text": "microservices way so that your application become cloud native is a very good approach",
    "start": "477120",
    "end": "484720"
  },
  {
    "text": "now let me show you one example of microservices application so when i started my career i was part of",
    "start": "485120",
    "end": "492080"
  },
  {
    "text": "building some web applications and at that time i built all those application as layered architecture or",
    "start": "492080",
    "end": "497919"
  },
  {
    "text": "actually now we call them monolith and i i still remember that everybody when you",
    "start": "497919",
    "end": "503199"
  },
  {
    "text": "whenever i go for a new job interview they were asking me about this layered architecture and its benefit",
    "start": "503199",
    "end": "508720"
  },
  {
    "text": "but that was very valid at that time i have developed those ecommerce",
    "start": "508720",
    "end": "514240"
  },
  {
    "text": "application pretty much layered you know the presentation layer the business layer and the database layer",
    "start": "514240",
    "end": "520000"
  },
  {
    "text": "but there was a problem with it when i have to do changes or if i have to do new deployment i have to",
    "start": "520000",
    "end": "526240"
  },
  {
    "text": "deploy pretty much everything again and again and when i have to scale i have to scale as a single unit",
    "start": "526240",
    "end": "532320"
  },
  {
    "text": "of course i could have done like distributed monoliths but still it was very difficult to do and combined with processes like devops",
    "start": "532320",
    "end": "540160"
  },
  {
    "text": "which never used to be exist at that time you know things become things can become quite",
    "start": "540160",
    "end": "546000"
  },
  {
    "text": "difficult for me and that's why microservices application is the way you build your application wherever it",
    "start": "546000",
    "end": "551920"
  },
  {
    "text": "is possible so as you can see in this example e-commerce application we have",
    "start": "551920",
    "end": "557519"
  },
  {
    "text": "divided the system in different services like this front-end service which is handling",
    "start": "557519",
    "end": "562880"
  },
  {
    "text": "all the requests from internet then it has a stateful card service which is speaking to this",
    "start": "562880",
    "end": "568959"
  },
  {
    "text": "stateless payment service and the shipping service",
    "start": "568959",
    "end": "573440"
  },
  {
    "text": "and it is storing its status in the cosmos db and listening to some kafka messages so this",
    "start": "574160",
    "end": "580320"
  },
  {
    "text": "is the new way of building applications the microservices way one of the beauty of this",
    "start": "580320",
    "end": "585680"
  },
  {
    "text": "approach as you can see that this is a high level representation of a system i can",
    "start": "585680",
    "end": "592000"
  },
  {
    "text": "implement each service with a different technology stack i can use from react for front-end",
    "start": "592000",
    "end": "597920"
  },
  {
    "text": "service i can use asp.net core for payment i can i can i can choose any server any",
    "start": "597920",
    "end": "605040"
  },
  {
    "text": "language or programming model or framework wherever it makes sense so that's what i get out of microservices",
    "start": "605040",
    "end": "612320"
  },
  {
    "text": "now we we we spoke about uh micro services we spoke about cloud",
    "start": "616320",
    "end": "622160"
  },
  {
    "text": "native but it's not that easy all these new um things they bring a lot of",
    "start": "622160",
    "end": "630079"
  },
  {
    "text": "challenges for us as developers so the first challenge is that we are always asked to build this",
    "start": "630079",
    "end": "636800"
  },
  {
    "text": "resilient scalable microservices-based application which is not that easy we need to",
    "start": "636800",
    "end": "643600"
  },
  {
    "text": "utilize multiple languages and frameworks during developing these applications",
    "start": "643600",
    "end": "649839"
  },
  {
    "text": "last be as developer we want to focus on our application we want to focus on",
    "start": "649839",
    "end": "655920"
  },
  {
    "text": "building the application on the business logic and our development instead of focusing on infrastructure",
    "start": "655920",
    "end": "663680"
  },
  {
    "text": "so we spoke about microservices microservices can really help us but it's not that easy",
    "start": "666160",
    "end": "672399"
  },
  {
    "text": "there are there are some challenges in building microservices application so i have listed down top three",
    "start": "672399",
    "end": "679519"
  },
  {
    "text": "challenges with this approach so the first one is that it's very hard to incrementally migrate from",
    "start": "679519",
    "end": "686320"
  },
  {
    "text": "existing source code to the microservices architecture meaning if i'm one of the",
    "start": "686320",
    "end": "693360"
  },
  {
    "text": "pattern you will find out there is that people are converting their existing layered architecture or monoliths to",
    "start": "693360",
    "end": "698880"
  },
  {
    "text": "microservices and that transition is not that easy you need to really be master in this",
    "start": "698880",
    "end": "704399"
  },
  {
    "text": "transition patterns i as a developer would like to utilize",
    "start": "704399",
    "end": "709839"
  },
  {
    "text": "as much as my existing code and wrap it up wrap it inside the service",
    "start": "709839",
    "end": "716240"
  },
  {
    "text": "second thing is that there are programming models and frameworks which have very narrow",
    "start": "716240",
    "end": "723440"
  },
  {
    "text": "language support plus they have limited set of features so for example if i'm targeting an",
    "start": "723440",
    "end": "728880"
  },
  {
    "text": "environment or if i'm using a programming model or a framework which does not give me",
    "start": "728880",
    "end": "733920"
  },
  {
    "text": "say a feature like event driven or state management then i'm very much limited what i can do with",
    "start": "733920",
    "end": "739040"
  },
  {
    "text": "my service or my application the third thing is that these runtimes",
    "start": "739040",
    "end": "745680"
  },
  {
    "text": "or programming models they pretty much target a specific infrastructure and one of the thing because of this",
    "start": "745680",
    "end": "753200"
  },
  {
    "text": "thing happens is that i have very limited core portability i cannot take my",
    "start": "753200",
    "end": "758240"
  },
  {
    "text": "my code and run it in cloud and in edge devices or anywhere else",
    "start": "758240",
    "end": "765440"
  },
  {
    "text": "so now we have spoken about all these challenges now i'll jump into the next part of the presentation where i'll show",
    "start": "766000",
    "end": "773040"
  },
  {
    "text": "you the solution for all these problems a possible solution which you can consider to build your application",
    "start": "773040",
    "end": "780399"
  },
  {
    "text": "so for the most part of this session i would like to focus more on the distributed application",
    "start": "780959",
    "end": "786720"
  },
  {
    "text": "runtime also known as dapper so let's uh start talking about dapper",
    "start": "786720",
    "end": "793680"
  },
  {
    "text": "dapper is a portable event driven runtime that makes easy for us developers to",
    "start": "794639",
    "end": "801519"
  },
  {
    "text": "build microservices application and in a way distributed application",
    "start": "801519",
    "end": "806800"
  },
  {
    "text": "and i can take this application and run it on any cloud say azure or aws or google",
    "start": "806800",
    "end": "813519"
  },
  {
    "text": "and i can also take it to edge devices also",
    "start": "813519",
    "end": "818160"
  },
  {
    "text": "now before i go and tell you about like how dapper is built or what are the components and and",
    "start": "821360",
    "end": "827760"
  },
  {
    "text": "features it provides to you i would like to tell you some goals the principles dapper follows",
    "start": "827760",
    "end": "837279"
  },
  {
    "text": "all these microservices application they have some common set of challenges like state management",
    "start": "838560",
    "end": "844160"
  },
  {
    "text": "secret management pop sub and others and what dapper does for you is that",
    "start": "844160",
    "end": "852160"
  },
  {
    "text": "it takes all these uh common scenarios take the best practices and codifies it",
    "start": "852160",
    "end": "858880"
  },
  {
    "text": "so when we will talk about the building blocks of dapper like state management pub sub",
    "start": "858880",
    "end": "863920"
  },
  {
    "text": "other things these all building blocks are actually built based on the best",
    "start": "863920",
    "end": "869680"
  },
  {
    "text": "practices of the respective area dapper works with any language or any",
    "start": "869680",
    "end": "876720"
  },
  {
    "text": "framework that's the beauty of dapper because it exposed the functionality over",
    "start": "876720",
    "end": "883120"
  },
  {
    "text": "standard protocols like http and grpc you can use it in any language or any",
    "start": "883120",
    "end": "888320"
  },
  {
    "text": "framework the dapper team together with community has created so many sdks for you to get",
    "start": "888320",
    "end": "894079"
  },
  {
    "text": "started but if you are using a language where the sdk is not available you can still",
    "start": "894079",
    "end": "901600"
  },
  {
    "text": "the standard way for calling dapper functionality",
    "start": "901600",
    "end": "906639"
  },
  {
    "text": "dapper is a project started by azure incubations team in last october with collaboration with the",
    "start": "907120",
    "end": "914480"
  },
  {
    "text": "community so it's not very old project it's fairly young and as of this tuesday it's in release 0.8.0",
    "start": "914480",
    "end": "923040"
  },
  {
    "text": "and if you can see that most of the functionality which is there in dapper comes from community",
    "start": "923040",
    "end": "928240"
  },
  {
    "text": "i think it's it has as of today's like 150 color contributors and it's very much vendor",
    "start": "928240",
    "end": "935600"
  },
  {
    "text": "neutral it's not owned by one company it's purely community driven",
    "start": "935600",
    "end": "942800"
  },
  {
    "text": "wherever possible we have adopted uh standards for building dappers so like open",
    "start": "944000",
    "end": "949839"
  },
  {
    "text": "telemetry or cloud events we have followed this sender so that you get an application which is",
    "start": "949839",
    "end": "956240"
  },
  {
    "text": "quite portable dapper provides consistent portable and",
    "start": "956240",
    "end": "962240"
  },
  {
    "text": "open apis they work same across cloud and edge",
    "start": "962240",
    "end": "967519"
  },
  {
    "text": "it's platform agnostic it does not target any specific environment or any specific orchestrator",
    "start": "967600",
    "end": "976160"
  },
  {
    "text": "and last but the most important part of dapper is that it is pretty much extensible and it has a",
    "start": "976399",
    "end": "982399"
  },
  {
    "text": "pluggable component model so when i will show you different blocks of dapper i'll show you that",
    "start": "982399",
    "end": "989360"
  },
  {
    "text": "each block is backed up by one or more components which you can swap",
    "start": "989360",
    "end": "997839"
  },
  {
    "text": "so this is a high level picture of dapper as you can see in at the bottom of the slide these are",
    "start": "999360",
    "end": "1006160"
  },
  {
    "text": "the clouds or edge infrastructure where the dapper can run it can run pretty much on all the public clouds",
    "start": "1006160",
    "end": "1012320"
  },
  {
    "text": "it can run on your own on-prem it can run on any orchestrator like service fabric or kubernetes or on the edge",
    "start": "1012320",
    "end": "1020000"
  },
  {
    "text": "the middle part shows the features of dapper including its building block like",
    "start": "1020000",
    "end": "1025038"
  },
  {
    "text": "service to service invocation state management publish and sub subscribe scenario",
    "start": "1025039",
    "end": "1030240"
  },
  {
    "text": "bindings the virtual active model it provides you distributed tracing with the observable",
    "start": "1030240",
    "end": "1036199"
  },
  {
    "text": "observability block and then it gives you a fast opportunity for secret management also",
    "start": "1036199",
    "end": "1042160"
  },
  {
    "text": "and as you can see that pretty much all this functionality is exposed in form of http or grpc api",
    "start": "1042160",
    "end": "1050480"
  },
  {
    "text": "that's why you can use dapper functionality in any any language or any framework",
    "start": "1050480",
    "end": "1058720"
  },
  {
    "text": "one of the thing is that if i'm using dapper in my application or in my service",
    "start": "1058720",
    "end": "1064160"
  },
  {
    "text": "i can choose which uh blocks i would like to use so i can i can choose to use just",
    "start": "1064160",
    "end": "1069520"
  },
  {
    "text": "service to service invocation and state management so in one of the demo later today when i will show a first",
    "start": "1069520",
    "end": "1075600"
  },
  {
    "text": "demo i'll be only using the service to service invocation and state management",
    "start": "1075600",
    "end": "1080960"
  },
  {
    "text": "and you can mix and match these functionality and that's why dapper plays very nice with other things like service meshes",
    "start": "1080960",
    "end": "1087039"
  },
  {
    "text": "or any other software out there",
    "start": "1087039",
    "end": "1094000"
  },
  {
    "text": "now before i jump into talking more about the building blocks i would like to show a conceptual diagram that how",
    "start": "1094000",
    "end": "1100559"
  },
  {
    "text": "a building block operates so each building blocks is exposed as",
    "start": "1100559",
    "end": "1108480"
  },
  {
    "text": "http or grpc api and it is backed up by one or more components so for example",
    "start": "1108480",
    "end": "1114640"
  },
  {
    "text": "when i'll show you in the next slide is that one of the block is like state management and",
    "start": "1114640",
    "end": "1120480"
  },
  {
    "text": "the component which is providing functionality for that block can be radius it can be azure cosmos db",
    "start": "1120480",
    "end": "1126640"
  },
  {
    "text": "it can be sql or dynamic db with just few lines of change",
    "start": "1126640",
    "end": "1131679"
  },
  {
    "text": "of the code in configuration i can plug i can swap the component",
    "start": "1131679",
    "end": "1138559"
  },
  {
    "text": "now how you use this dapper building blocks um in your services so dapper runs as a side car process",
    "start": "1140640",
    "end": "1148960"
  },
  {
    "text": "or a container and it is exposed to your code as a local",
    "start": "1148960",
    "end": "1154799"
  },
  {
    "text": "endpoint so as you can see here",
    "start": "1154799",
    "end": "1158559"
  },
  {
    "text": "zapper runs as a sidecar and pretty much you can exp uh",
    "start": "1159919",
    "end": "1166320"
  },
  {
    "text": "get all the functionality of out of dapper with this local post call so as you can see here",
    "start": "1166320",
    "end": "1174080"
  },
  {
    "text": "i'm doing a local host call on port 3500 where my dapper sidecar is running and i'm doing",
    "start": "1174080",
    "end": "1180400"
  },
  {
    "text": "some operation like state or service to service invocation",
    "start": "1180400",
    "end": "1185600"
  },
  {
    "text": "dapper runs in two mode one is the self-hosted mode and another is the kubernetes mode in",
    "start": "1188320",
    "end": "1195360"
  },
  {
    "text": "self-hosted mode this is your application code which is talking to its stepper side car and this",
    "start": "1195360",
    "end": "1202000"
  },
  {
    "text": "sub diaper site car is running as the process and you can see that it is exposing the",
    "start": "1202000",
    "end": "1208720"
  },
  {
    "text": "functionality of these building blocks by standard http or grpc api",
    "start": "1208720",
    "end": "1215120"
  },
  {
    "text": "the same service when when executed in a orchestrator like",
    "start": "1215200",
    "end": "1220480"
  },
  {
    "text": "kubernetes it runs as a sidecar container so you can see that in this",
    "start": "1220480",
    "end": "1226320"
  },
  {
    "text": "pod my application code is running in the container and the dapper sidecar is running as",
    "start": "1226320",
    "end": "1233120"
  },
  {
    "text": "another container in um in the same pod",
    "start": "1233120",
    "end": "1238320"
  },
  {
    "text": "now let's talk about what happens when i run dapper as a signed car in the",
    "start": "1241120",
    "end": "1246640"
  },
  {
    "text": "self-hosted mode so this slide shows that i have two services services service a",
    "start": "1246640",
    "end": "1251919"
  },
  {
    "text": "and service b this is the sidecar for service a and",
    "start": "1251919",
    "end": "1258080"
  },
  {
    "text": "i'm accessing all the functionality provided by dapper by making calls to my local endpoint",
    "start": "1258080",
    "end": "1265039"
  },
  {
    "text": "and save for this service now you can see that this service is making use of the state management",
    "start": "1265039",
    "end": "1272400"
  },
  {
    "text": "building block where you can use any state store say redis cassandra",
    "start": "1272400",
    "end": "1277679"
  },
  {
    "text": "dynamodb or cosmos db i can use any publisher subscript store like netserve",
    "start": "1277679",
    "end": "1284400"
  },
  {
    "text": "or rabbitmq service bus or read this in the same way",
    "start": "1284400",
    "end": "1289760"
  },
  {
    "text": "i can also subscribe to events input events input bindings and output bindings i can",
    "start": "1289760",
    "end": "1295760"
  },
  {
    "text": "subscribe to event hubs kafka messages aws sqs",
    "start": "1295760",
    "end": "1301120"
  },
  {
    "text": "or gcp pub sub and many more so all as you can see that this is building",
    "start": "1301120",
    "end": "1306159"
  },
  {
    "text": "block and these are the backing components most of these components come from",
    "start": "1306159",
    "end": "1312159"
  },
  {
    "text": "community contribution",
    "start": "1312159",
    "end": "1318240"
  },
  {
    "text": "a very important thing to see here in the slide is that if this service needs to talk to this",
    "start": "1318240",
    "end": "1324960"
  },
  {
    "text": "service i don't need to follow this path i can pretty much make the call to my diaper side car and",
    "start": "1324960",
    "end": "1332000"
  },
  {
    "text": "then this diaper side car will speak to this diaper side car on behalf of my service",
    "start": "1332000",
    "end": "1339600"
  },
  {
    "text": "now when you run dapper in the kubernetes mode it utilizes the kubernetes operator model",
    "start": "1342880",
    "end": "1349039"
  },
  {
    "text": "and you can see that um this is the operator uh kubernetes",
    "start": "1349039",
    "end": "1354960"
  },
  {
    "text": "adapter operator running in kubernetes like operator sentry sitecore injector and",
    "start": "1354960",
    "end": "1360000"
  },
  {
    "text": "actor placement and whenever i do deployment just by putting some annotations in my",
    "start": "1360000",
    "end": "1367679"
  },
  {
    "text": "deployment i can make this service dapper enabled",
    "start": "1367679",
    "end": "1375840"
  },
  {
    "text": "and then i these components running in these services running in kubernetes",
    "start": "1375840",
    "end": "1383039"
  },
  {
    "text": "environment can pretty much use of any component this can run in aks this can run on aws",
    "start": "1383039",
    "end": "1389440"
  },
  {
    "text": "this can run any gcp",
    "start": "1389440",
    "end": "1392720"
  },
  {
    "text": "now let's talk about few building blocks so the first and the most simple one is",
    "start": "1397760",
    "end": "1404080"
  },
  {
    "text": "the state management any microservices application whether um it would like to use",
    "start": "1404080",
    "end": "1411200"
  },
  {
    "text": "make use of state management in form of key value pair so as i show you in this slide i have",
    "start": "1411200",
    "end": "1416559"
  },
  {
    "text": "one application called my app which is posting data",
    "start": "1416559",
    "end": "1421679"
  },
  {
    "text": "to the state store and it's doing it by dapper so here i make i'm posting data",
    "start": "1421679",
    "end": "1428640"
  },
  {
    "text": "to my state store as you can see that this part of the",
    "start": "1428640",
    "end": "1433600"
  },
  {
    "text": "url i'm making a sidecar call to my preside card and i'm telling that i",
    "start": "1435679",
    "end": "1441200"
  },
  {
    "text": "would like to utilize the state block and then i will give the name of a store",
    "start": "1441200",
    "end": "1446720"
  },
  {
    "text": "and i will pass on the data what dapper will do on my behalf is that it will check in the configuration that",
    "start": "1446720",
    "end": "1453679"
  },
  {
    "text": "what is the chosen state store let's suppose in case this is redis",
    "start": "1453679",
    "end": "1459039"
  },
  {
    "text": "it will take that store and store my data to it next time when i will",
    "start": "1459039",
    "end": "1466640"
  },
  {
    "text": "retrieve the data i will just issue a http get come on and i'll say",
    "start": "1466640",
    "end": "1473279"
  },
  {
    "text": "that see this pattern that i would like to again utilize state and this is the",
    "start": "1473279",
    "end": "1480799"
  },
  {
    "text": "state store name and this is the key i would like to get and then tapper will return you the data",
    "start": "1480799",
    "end": "1488720"
  },
  {
    "text": "the next scenario i would like to speak or the building block is service to service invocation",
    "start": "1495600",
    "end": "1501120"
  },
  {
    "text": "so in this scenario there is a front-end application and there is a court application the front-end application want to do",
    "start": "1501120",
    "end": "1507919"
  },
  {
    "text": "checkout and look at this url it is invoking a method called checkout",
    "start": "1507919",
    "end": "1514720"
  },
  {
    "text": "on my card service look at this one i'm posting a message",
    "start": "1514720",
    "end": "1520720"
  },
  {
    "text": "to my diaper side car and i'm telling that hey i would like to",
    "start": "1520720",
    "end": "1525760"
  },
  {
    "text": "execute this checkout method on my call service and this is the data",
    "start": "1525760",
    "end": "1533840"
  },
  {
    "text": "this is the parameter for the checkout this this call will flow from this sub dapper",
    "start": "1533840",
    "end": "1540559"
  },
  {
    "text": "side car will go to this diaper side car and ultimately to the service",
    "start": "1540559",
    "end": "1545600"
  },
  {
    "text": "and it will perform the action",
    "start": "1545600",
    "end": "1548960"
  },
  {
    "text": "so i have done a enough talk now i would like to jump to a demo where i would like to show you",
    "start": "1553520",
    "end": "1559039"
  },
  {
    "text": "that how these things are done in practical way so i'm showing you",
    "start": "1559039",
    "end": "1564080"
  },
  {
    "text": "an example over here",
    "start": "1564080",
    "end": "1571840"
  },
  {
    "text": "this is my this is a source code i'm using from the dapper samples repository which we have used in our",
    "start": "1572320",
    "end": "1578720"
  },
  {
    "text": "dapper workshop yesterday you can freely get it from github now if i i would just like to show you",
    "start": "1578720",
    "end": "1585360"
  },
  {
    "text": "two parts of this application",
    "start": "1585360",
    "end": "1589200"
  },
  {
    "text": "so i have two services over here one is the node application which is",
    "start": "1590880",
    "end": "1596400"
  },
  {
    "text": "accepting the order and one is the python application which is posting the order",
    "start": "1596400",
    "end": "1602240"
  },
  {
    "text": "to this note service now i will be demonstrating two",
    "start": "1602240",
    "end": "1608080"
  },
  {
    "text": "scenarios in this demo is one is the service to service invocation and state management",
    "start": "1608080",
    "end": "1614720"
  },
  {
    "text": "so let me show you",
    "start": "1615360",
    "end": "1618240"
  },
  {
    "text": "go here",
    "start": "1620960",
    "end": "1627840"
  },
  {
    "text": "and i will start my node application which accepts the order",
    "start": "1630720",
    "end": "1641840"
  },
  {
    "text": "as you can see that i'm running my application with dapper so when i execute look at",
    "start": "1645679",
    "end": "1651440"
  },
  {
    "text": "this command dapper run the app id is node app the port for the application is 300",
    "start": "1651440",
    "end": "1657919"
  },
  {
    "text": "and the port for the sidecar is 3500 and this is the command to run node.app.js so it's starting as i can",
    "start": "1657919",
    "end": "1665520"
  },
  {
    "text": "show you here it's starting it's starting a web server so this is the code",
    "start": "1665520",
    "end": "1673120"
  },
  {
    "text": "express application and look at this part of the code when the dapper runs",
    "start": "1673440",
    "end": "1682799"
  },
  {
    "text": "it injects the dapper http port if there is nothing it will try to default it to 3500",
    "start": "1682799",
    "end": "1689520"
  },
  {
    "text": "now i'm choosing a state store and then i'm preparing a url where i can make my",
    "start": "1689520",
    "end": "1696080"
  },
  {
    "text": "my request and then i'm creating three endpoints",
    "start": "1696080",
    "end": "1701919"
  },
  {
    "text": "http gets for order for http post for posting a new order and for",
    "start": "1702000",
    "end": "1708320"
  },
  {
    "text": "deleting the order so now my application is running as you",
    "start": "1708320",
    "end": "1714320"
  },
  {
    "text": "can see it's now ready together with dapper sidecar",
    "start": "1714320",
    "end": "1720240"
  },
  {
    "text": "and let me show you something so if you do dapper list it will show me the application",
    "start": "1720240",
    "end": "1727440"
  },
  {
    "text": "or the side cards which are running so as you can see that now my net node app is running now i'll try to post",
    "start": "1727440",
    "end": "1734880"
  },
  {
    "text": "some orders to this application so i'll go here i'll open this sample http file",
    "start": "1734880",
    "end": "1741919"
  },
  {
    "text": "and i'll go on the console over here so that you can see the messages i'm using by the way i'm using a visual",
    "start": "1744480",
    "end": "1751120"
  },
  {
    "text": "studio plugin called rest line and now i'm going to make a post request",
    "start": "1751120",
    "end": "1757840"
  },
  {
    "text": "as you can see that i successfully posted an order to my node application",
    "start": "1759200",
    "end": "1766320"
  },
  {
    "text": "and it stored it in the redis cache i have configured redis as the state store for my node",
    "start": "1766320",
    "end": "1772320"
  },
  {
    "text": "application now one thing i would like to show you here that look at here this is my redis",
    "start": "1772320",
    "end": "1777919"
  },
  {
    "text": "local release cache and i'll look at the order and i have the order",
    "start": "1777919",
    "end": "1785120"
  },
  {
    "text": "over here so i posted order idea 43 and it's now",
    "start": "1785120",
    "end": "1792240"
  },
  {
    "text": "stored over here now what i will do is that because this",
    "start": "1792240",
    "end": "1798799"
  },
  {
    "text": "is an example of that i'm directly pasting a order to my node application",
    "start": "1798799",
    "end": "1805039"
  },
  {
    "text": "i'm going to start the next part of this thing this application the python",
    "start": "1805039",
    "end": "1812480"
  },
  {
    "text": "application",
    "start": "1812480",
    "end": "1815039"
  },
  {
    "text": "again open going to open this",
    "start": "1817520",
    "end": "1823840"
  },
  {
    "text": "and i'm going to start my python app and before i start my python app i used",
    "start": "1827279",
    "end": "1833840"
  },
  {
    "text": "just like to show you the code for python app this is a very simple flask application",
    "start": "1833840",
    "end": "1839120"
  },
  {
    "text": "where you just prepare a message like data order id and start posting it to",
    "start": "1839120",
    "end": "1846000"
  },
  {
    "text": "the dapper url so as you can see over here same thing what was happening in the node application it is getting the dapper http port",
    "start": "1846000",
    "end": "1852480"
  },
  {
    "text": "environment or actually trying to find out where the sidecar is running and then once it's notice",
    "start": "1852480",
    "end": "1857840"
  },
  {
    "text": "once it has access to its sidecar its invoke is invoking the",
    "start": "1857840",
    "end": "1864960"
  },
  {
    "text": "method on node app the new order one i shown you a few minutes back so let's",
    "start": "1864960",
    "end": "1871679"
  },
  {
    "text": "start this application",
    "start": "1871679",
    "end": "1879840"
  },
  {
    "text": "so the python app is up and running and the site car is listing on 5510",
    "start": "1883440",
    "end": "1892240"
  },
  {
    "text": "i can go here and i can check that list",
    "start": "1892240",
    "end": "1897600"
  },
  {
    "text": "and i have two applications the node application and the python application now look at the node application which",
    "start": "1900000",
    "end": "1907600"
  },
  {
    "text": "is receiving the order as you can see that it is receiving the order five six seven eight because i'm",
    "start": "1907600",
    "end": "1915039"
  },
  {
    "text": "uh making this thread to sleep for a few seconds so it's receiving the order and let me",
    "start": "1915039",
    "end": "1922399"
  },
  {
    "text": "go and see my redis cache",
    "start": "1922399",
    "end": "1926240"
  },
  {
    "text": "and i have order 11 and i have ordered 12. so as you can see that's so",
    "start": "1927440",
    "end": "1933440"
  },
  {
    "text": "simple i'm using dappers functionality for state management and service to service",
    "start": "1933440",
    "end": "1939600"
  },
  {
    "text": "invocation and keep moving that heavy lifting out of my code",
    "start": "1939600",
    "end": "1945919"
  },
  {
    "text": "i would just stop this wait let me sorry once again because i would",
    "start": "1946080",
    "end": "1951600"
  },
  {
    "text": "like to show you something okay it's running if you go over here",
    "start": "1951600",
    "end": "1958080"
  },
  {
    "text": "and just do get process",
    "start": "1958080",
    "end": "1963840"
  },
  {
    "text": "dapper you can see that i have two dapper process cli's running and then i have",
    "start": "1966399",
    "end": "1972559"
  },
  {
    "text": "two dipper side cars these two side cars are for my node and the python app",
    "start": "1972559",
    "end": "1979518"
  },
  {
    "text": "now i will stop this application and i'll switch back to my",
    "start": "1980880",
    "end": "1986960"
  },
  {
    "text": "demo or actually to my slide drag now i have covered service to service on",
    "start": "1986960",
    "end": "1992000"
  },
  {
    "text": "location and state management let's talk about the next building block the next building block is",
    "start": "1992000",
    "end": "1998120"
  },
  {
    "text": "observability so when you build this my micro services application where your",
    "start": "1998120",
    "end": "2003760"
  },
  {
    "text": "application is built of these so many services let's take the example of this e-commerce application",
    "start": "2003760",
    "end": "2010399"
  },
  {
    "text": "now if you have to do distributed tracing of the calls like somebody posting an order and",
    "start": "2010399",
    "end": "2016799"
  },
  {
    "text": "checking it out what is happening it's very difficult in a micro service",
    "start": "2016799",
    "end": "2022320"
  },
  {
    "text": "application if you try to implement it by yourself what dapper does",
    "start": "2022320",
    "end": "2027600"
  },
  {
    "text": "if you remember i told you that one of the building block is observability block and it follows open telemetry or",
    "start": "2027600",
    "end": "2035360"
  },
  {
    "text": "actually open sensors which is now part of open telemetry and by using this you can do distributed",
    "start": "2035360",
    "end": "2041519"
  },
  {
    "text": "tracing and export the metrics and logs and data to any of um open source software like prometheus or",
    "start": "2041519",
    "end": "2049280"
  },
  {
    "text": "zipkin or jagger or application inside anything which follows open telemetry so",
    "start": "2049280",
    "end": "2055919"
  },
  {
    "text": "i just would like to go back to my",
    "start": "2055919",
    "end": "2061358"
  },
  {
    "text": "demo the same demo",
    "start": "2061359",
    "end": "2065919"
  },
  {
    "text": "and just would like to do some changes",
    "start": "2066639",
    "end": "2071039"
  },
  {
    "text": "here so i'll go here and this time",
    "start": "2072960",
    "end": "2079040"
  },
  {
    "text": "i'm going to pass on a new parameter",
    "start": "2079760",
    "end": "2088480"
  },
  {
    "text": "to my node application and this is this config parameter and i'm saying that turn on tracing by",
    "start": "2088480",
    "end": "2094878"
  },
  {
    "text": "this tracing ml file",
    "start": "2094879",
    "end": "2098639"
  },
  {
    "text": "i'm saying that please turn on tracing and this is the sampling rate",
    "start": "2101520",
    "end": "2108880"
  },
  {
    "text": "i will turn it on",
    "start": "2109839",
    "end": "2117839"
  },
  {
    "text": "and i will do the same thing for my python app so i'll just hit the top arrow button and i will just",
    "start": "2118720",
    "end": "2126400"
  },
  {
    "text": "add a new parameter config components",
    "start": "2126400",
    "end": "2135680"
  },
  {
    "text": "tracing.ml the moment this python app starts it",
    "start": "2142839",
    "end": "2148800"
  },
  {
    "text": "will start posting again messages to or orders to my my node application yes i'm getting it",
    "start": "2148800",
    "end": "2159839"
  },
  {
    "text": "now let me show you something i have already configured zipkin so for this uh demo i'm using zipkin so i have zipkin",
    "start": "2161280",
    "end": "2168160"
  },
  {
    "text": "installed you can check more about zip code on internet but zipkin is a software where you can",
    "start": "2168160",
    "end": "2174000"
  },
  {
    "text": "collect and analyze your logs so as you can see that",
    "start": "2174000",
    "end": "2178640"
  },
  {
    "text": "here because i have turned on tracing i'll see those logs",
    "start": "2179359",
    "end": "2187599"
  },
  {
    "text": "and as you can see that i can see these logs and i can also see the depends on c1",
    "start": "2187599",
    "end": "2196640"
  },
  {
    "text": "let me just change it for a minute",
    "start": "2196640",
    "end": "2201838"
  },
  {
    "text": "and it is showing how my python application has spoken",
    "start": "2208880",
    "end": "2215838"
  },
  {
    "text": "to the to my node application",
    "start": "2216880",
    "end": "2221119"
  },
  {
    "text": "and this will go on",
    "start": "2224720",
    "end": "2229838"
  },
  {
    "text": "so it's showing me the traces of everything happening between my two applications all just by turning on tracing just by a",
    "start": "2231040",
    "end": "2238800"
  },
  {
    "text": "yaml configuration file now as a as a more complex scenario what",
    "start": "2238800",
    "end": "2244320"
  },
  {
    "text": "i have done in the morning that i created a distributed calculator where",
    "start": "2244320",
    "end": "2249599"
  },
  {
    "text": "the calculator has ad service subtract service multiplication service and an um a",
    "start": "2249599",
    "end": "2256720"
  },
  {
    "text": "front-end react calculator and i have turned on tracing onto them",
    "start": "2256720",
    "end": "2262640"
  },
  {
    "text": "and i'll go and i'll show you that how turn how it looks like",
    "start": "2262640",
    "end": "2271838"
  },
  {
    "text": "so you can see that my front end application just disregard this one sorry let me",
    "start": "2273440",
    "end": "2279760"
  },
  {
    "text": "change this time frame just to be",
    "start": "2279760",
    "end": "2285839"
  },
  {
    "text": "so i built a distributed calculator over here",
    "start": "2289359",
    "end": "2293760"
  },
  {
    "text": "you can see that this front-end calculator is making calls to add app multiplier divide up and subtract app",
    "start": "2295119",
    "end": "2301599"
  },
  {
    "text": "and it's showing me the all the information how the calls are happening between these services",
    "start": "2301599",
    "end": "2312079"
  },
  {
    "text": "go back and i will stop my",
    "start": "2312079",
    "end": "2327839"
  },
  {
    "text": "let's talk about other building blocks the publish and subscribe um building",
    "start": "2333839",
    "end": "2340720"
  },
  {
    "text": "blocks so one of the scenario visit this micro service application is pop and sub where there is a publisher",
    "start": "2340720",
    "end": "2347680"
  },
  {
    "text": "and a number of a subscriber so as you can see that for publish and subscript scenario i'm again using dapper so",
    "start": "2347680",
    "end": "2355680"
  },
  {
    "text": "when my application runs i'm publishing the orders and then there are multiple subscribes",
    "start": "2355680",
    "end": "2362880"
  },
  {
    "text": "over over here which have subscribes to subscribe to my service and as you can see that once i publish",
    "start": "2362880",
    "end": "2369280"
  },
  {
    "text": "an order it goes to my shipping or email service if you remember the example i have shown you before",
    "start": "2369280",
    "end": "2375520"
  },
  {
    "text": "and as you can see that the component which is actually backing up this pops up scenario is radius but you can",
    "start": "2375520",
    "end": "2381359"
  },
  {
    "text": "pretty much change it with anything else like net serve or service bus or anything else with just",
    "start": "2381359",
    "end": "2387920"
  },
  {
    "text": "change of view configuration parameters you can quickly change the underlying component for a",
    "start": "2387920",
    "end": "2393680"
  },
  {
    "text": "building block",
    "start": "2393680",
    "end": "2397838"
  },
  {
    "text": "i hope i make sense",
    "start": "2399760",
    "end": "2402720"
  },
  {
    "text": "now let's talk about the next building block which is bindings bindings are very important",
    "start": "2408800",
    "end": "2414319"
  },
  {
    "text": "because you want to build a system which is even driven meaning is that i would like to react when something",
    "start": "2414319",
    "end": "2420560"
  },
  {
    "text": "happens outside of my system or i would like somebody else or some other service or",
    "start": "2420560",
    "end": "2425760"
  },
  {
    "text": "code to react when something is happening in my service so",
    "start": "2425760",
    "end": "2431200"
  },
  {
    "text": "this is the building block the the bindings provides you two kind of",
    "start": "2431200",
    "end": "2436960"
  },
  {
    "text": "bindings input and output and actually yesterday they also released bi-directional",
    "start": "2436960",
    "end": "2442319"
  },
  {
    "text": "binding so you have input bindings where your code get executed",
    "start": "2442319",
    "end": "2448720"
  },
  {
    "text": "based on some event coming from these external system and optionally you can have a payload",
    "start": "2448720",
    "end": "2454880"
  },
  {
    "text": "and metadata in the similar way",
    "start": "2454880",
    "end": "2460880"
  },
  {
    "text": "so as you can see that once i get the any information for like as i told you that this is cloudy events",
    "start": "2461200",
    "end": "2469040"
  },
  {
    "text": "and in a similar way output i would like to execute um i would like somebody else so that",
    "start": "2471520",
    "end": "2477520"
  },
  {
    "text": "people out like services out of my system can also subscribe to events happening inside me so you",
    "start": "2477520",
    "end": "2485119"
  },
  {
    "text": "dapper gives you functionality of both input and output binding",
    "start": "2485119",
    "end": "2494000"
  },
  {
    "text": "the next building block is secret management so as you can see that uh here my application code is requesting",
    "start": "2494000",
    "end": "2502720"
  },
  {
    "text": "to its the press that i would like to do something with the secrets this is the wall i'm using and you can",
    "start": "2502720",
    "end": "2508960"
  },
  {
    "text": "choose any component you can use azure keyboard or google key management or hashicorp or anything",
    "start": "2508960",
    "end": "2516160"
  },
  {
    "text": "so all with the change of a few configuration parameter i can change the underlying secret store",
    "start": "2516160",
    "end": "2524560"
  },
  {
    "text": "one of the very strong programming model these days for building microservices is virtual actor an actor is a stateful",
    "start": "2531440",
    "end": "2539680"
  },
  {
    "text": "object of storage and compute dapper provides you full features for helping",
    "start": "2539680",
    "end": "2546400"
  },
  {
    "text": "and building this virtual actor model so it helps you with distribution and failover of these actors it helps",
    "start": "2546400",
    "end": "2553920"
  },
  {
    "text": "you with turn-based concurrency it helps you for state management and also these these provide you high",
    "start": "2553920",
    "end": "2559920"
  },
  {
    "text": "level of resiliency",
    "start": "2559920",
    "end": "2565838"
  },
  {
    "text": "as you can see that one host uh failed then dapper changed the placement and",
    "start": "2571359",
    "end": "2576720"
  },
  {
    "text": "moved all this actors to a different host or pod",
    "start": "2576720",
    "end": "2582000"
  },
  {
    "text": "now i would like to show you that if you if you take because i have shown you all my demos in",
    "start": "2585440",
    "end": "2590960"
  },
  {
    "text": "in self-hosted mode but you can still take these these application and deploy it to any",
    "start": "2590960",
    "end": "2597680"
  },
  {
    "text": "containers like kubernetes so as you can see that here my application code is running in",
    "start": "2597680",
    "end": "2604640"
  },
  {
    "text": "in a kubernetes pod and then it's speaking to its side core",
    "start": "2604640",
    "end": "2609680"
  },
  {
    "text": "um over http and grpc api and all i do is by just",
    "start": "2609680",
    "end": "2616720"
  },
  {
    "text": "a small amount of annotation so whenever i do and deployment i just have to make some",
    "start": "2616720",
    "end": "2621920"
  },
  {
    "text": "annotation where i have to say that this is dapper enabled what is the dapper port and what is the name of my application or service",
    "start": "2621920",
    "end": "2630720"
  },
  {
    "text": "now one very important thing is that you will see a rise of g or pc api and that's the reason dapper",
    "start": "2633599",
    "end": "2639920"
  },
  {
    "text": "also provides um a fee a way that you can also use the",
    "start": "2639920",
    "end": "2646160"
  },
  {
    "text": "grpc api you get this out of the box line by grpc",
    "start": "2646160",
    "end": "2652160"
  },
  {
    "text": "proto-generated sdks but when you look for sdks available",
    "start": "2652160",
    "end": "2657839"
  },
  {
    "text": "for dapper there are some very well crafted lines also",
    "start": "2657839",
    "end": "2665119"
  },
  {
    "text": "and these very well integrate with this application framework like virtual actors functions logic apps asp.net core or",
    "start": "2665200",
    "end": "2672640"
  },
  {
    "text": "spring booth and many more are coming as i told you dapper is uh initiative done very much",
    "start": "2672640",
    "end": "2681200"
  },
  {
    "text": "with help of community and that's the true beauty of open source lies",
    "start": "2681200",
    "end": "2686480"
  },
  {
    "text": "and most of these contributions come from community and we see a lot of traction in coming days and if",
    "start": "2686480",
    "end": "2692240"
  },
  {
    "text": "you just see that in just last six months the number of components and contribution has",
    "start": "2692240",
    "end": "2697839"
  },
  {
    "text": "increased tremendously",
    "start": "2697839",
    "end": "2704000"
  },
  {
    "text": "i want to show you something uh as last demo of this presentation",
    "start": "2704000",
    "end": "2709760"
  },
  {
    "text": "i would like to show you that how i am using the.net core sdk for dapper in my asp.net core applications",
    "start": "2709760",
    "end": "2719838"
  },
  {
    "text": "so i'll start my",
    "start": "2720400",
    "end": "2723838"
  },
  {
    "text": "so here i have cloned the.net sdk repo on my machine",
    "start": "2725520",
    "end": "2734880"
  },
  {
    "text": "and i'm into the sample folder but you can get this source code also for this sdk over here you can see that there are there are",
    "start": "2734880",
    "end": "2741200"
  },
  {
    "text": "some high level wrappers for actors for asp.net core clients and other things and one of the",
    "start": "2741200",
    "end": "2747440"
  },
  {
    "text": "demo which i would like to show you as part of this session is",
    "start": "2747440",
    "end": "2752960"
  },
  {
    "text": "asp.net routing sample so i'm going to use an asp.net core example",
    "start": "2755920",
    "end": "2763119"
  },
  {
    "text": "and i'm using an example for routing this application is a not so secure",
    "start": "2763119",
    "end": "2770160"
  },
  {
    "text": "banking application where i will be depositing money i will be extracting money and i will be",
    "start": "2770160",
    "end": "2777040"
  },
  {
    "text": "checking my balance let me start this application",
    "start": "2777040",
    "end": "2789838"
  },
  {
    "text": "i'm opening a new terminal",
    "start": "2807440",
    "end": "2817838"
  },
  {
    "text": "so what i'm doing is that i'm starting an application an asp.net core application and the source code for this",
    "start": "2821200",
    "end": "2826480"
  },
  {
    "text": "application is here so i'll start explaining this so this is an asp.net core application which is a",
    "start": "2826480",
    "end": "2832880"
  },
  {
    "text": "new lean framework for building web applications and i'm utilizing the dapper",
    "start": "2832880",
    "end": "2839200"
  },
  {
    "text": "sdk over here and as you can see from this call i'm",
    "start": "2839200",
    "end": "2845599"
  },
  {
    "text": "enabling my application for being a doppler client and this is where all the magic happening and once i have this thing",
    "start": "2845599",
    "end": "2852319"
  },
  {
    "text": "available i'm mapping my endpoints like the get endpoint",
    "start": "2852319",
    "end": "2857359"
  },
  {
    "text": "and the post endpoint and then i'm calling this function deposit withdraw so let me first start this application",
    "start": "2857359",
    "end": "2862720"
  },
  {
    "text": "and show how it works and then i'll i'll come back to the code",
    "start": "2862720",
    "end": "2873839"
  },
  {
    "text": "so i have started this web application with dapper it has started",
    "start": "2881680",
    "end": "2901838"
  },
  {
    "text": "okay there's a error okay now it has found application",
    "start": "2912079",
    "end": "2919359"
  },
  {
    "text": "application discovered on port 500 5000",
    "start": "2919359",
    "end": "2929838"
  },
  {
    "text": "i have an error",
    "start": "2930640",
    "end": "2933359"
  },
  {
    "text": "let me check it so this uh by showing you an error i'm showing you the hard",
    "start": "2939119",
    "end": "2944559"
  },
  {
    "text": "hard it is the for the developers to build the",
    "start": "2944559",
    "end": "2948559"
  },
  {
    "text": "application hope i'm on the right track",
    "start": "2954839",
    "end": "2960880"
  },
  {
    "text": "kill this terminal",
    "start": "2966079",
    "end": "2971839"
  },
  {
    "text": "just building the application once more",
    "start": "3010240",
    "end": "3013839"
  },
  {
    "text": "lin any uh feedback on why i'm not finding the application",
    "start": "3056480",
    "end": "3062720"
  },
  {
    "text": "oops okay so this application is not helping",
    "start": "3064160",
    "end": "3070000"
  },
  {
    "text": "me maybe i'll run to my different",
    "start": "3070000",
    "end": "3075280"
  },
  {
    "text": "application",
    "start": "3080839",
    "end": "3083839"
  },
  {
    "text": "okay so my another uh demo which is again with the dapper client the controller application is working",
    "start": "3109839",
    "end": "3116240"
  },
  {
    "text": "sorry for apologies for not rooting the application working but as you can see over here my controller",
    "start": "3116240",
    "end": "3122800"
  },
  {
    "text": "application and in this application i'm",
    "start": "3122800",
    "end": "3128960"
  },
  {
    "text": "i'm making this application dapper enabled so what i'm telling is",
    "start": "3134640",
    "end": "3140640"
  },
  {
    "text": "that the moment you add the controllers you add um make it dapper enabled",
    "start": "3140640",
    "end": "3147119"
  },
  {
    "text": "and once i have this i'm enabling the end points and i'm actually subscribe i'm adding",
    "start": "3147119",
    "end": "3152960"
  },
  {
    "text": "and handlers for pub and sub scenarios and i'm also adding controllers",
    "start": "3152960",
    "end": "3158240"
  },
  {
    "text": "and one of the sample controller for this application is over here i have built applications",
    "start": "3158240",
    "end": "3167839"
  },
  {
    "text": "as you can see that i have these controllers and these methods so i have created one for http get",
    "start": "3170079",
    "end": "3177119"
  },
  {
    "text": "account and i have a topic for deposit which is one of the scenario for pub and sub",
    "start": "3177119",
    "end": "3182880"
  },
  {
    "text": "and then i have for withdraw so let's play with this application",
    "start": "3182880",
    "end": "3188240"
  },
  {
    "text": "so what i will do is that i have a sample http file over here and i will post messages to this",
    "start": "3189680",
    "end": "3196160"
  },
  {
    "text": "application at the same time i would like to",
    "start": "3196160",
    "end": "3201200"
  },
  {
    "text": "keep my console window on so you can see what is happening so first what i'm going to do is that i'm going",
    "start": "3201200",
    "end": "3206800"
  },
  {
    "text": "to post a message to deposit an amount",
    "start": "3206800",
    "end": "3212000"
  },
  {
    "text": "and because i already had some balance in my account from before",
    "start": "3215200",
    "end": "3220720"
  },
  {
    "text": "now i have added 12 to it and now the total count is 26.",
    "start": "3220720",
    "end": "3227200"
  },
  {
    "text": "in the same way i can go back and i can post request",
    "start": "3227200",
    "end": "3232480"
  },
  {
    "text": "and i select withdraw some money and as you can see it's 26 i'll withdraw all of it i need money i",
    "start": "3232480",
    "end": "3239520"
  },
  {
    "text": "need a faster machine",
    "start": "3239520",
    "end": "3242480"
  },
  {
    "text": "and balance is zero again i'm going to deposit some money",
    "start": "3246720",
    "end": "3253920"
  },
  {
    "text": "and now that this thing now i would like to check my balance and again i'm issuing um",
    "start": "3255119",
    "end": "3262079"
  },
  {
    "text": "a get come on and i have it swell now i would like to show you one more",
    "start": "3262079",
    "end": "3269040"
  },
  {
    "text": "scenario because this is this is what i am doing is that i'm directly calling my functions",
    "start": "3269040",
    "end": "3274240"
  },
  {
    "text": "uh directly the end points and taking the value there is another way also is that",
    "start": "3274240",
    "end": "3280640"
  },
  {
    "text": "i can go and actually post messages",
    "start": "3280640",
    "end": "3286000"
  },
  {
    "text": "in form of topics",
    "start": "3286240",
    "end": "3293839"
  },
  {
    "text": "just come here start my command problem because powershell does not respect the",
    "start": "3296000",
    "end": "3301599"
  },
  {
    "text": "codes and see this i'm publishing a message and i'm saying withdraw money",
    "start": "3301599",
    "end": "3307040"
  },
  {
    "text": "and how much 15 i ho no it will give me zero but let's try it",
    "start": "3307040",
    "end": "3313359"
  },
  {
    "text": "and then at the same time i'll see i would like i hope to see some menu so",
    "start": "3313359",
    "end": "3318559"
  },
  {
    "text": "this time i'm showing a different functionality which is called as pub sub",
    "start": "3318559",
    "end": "3324000"
  },
  {
    "text": "i have requested give me my money and i hope so see",
    "start": "3328400",
    "end": "3337200"
  },
  {
    "text": "it has deducted the money so i i've drawn 15 so now i have credit so i need to give",
    "start": "3337200",
    "end": "3342480"
  },
  {
    "text": "back so by this i have shown you scenario that i can not only call an application by",
    "start": "3342480",
    "end": "3349760"
  },
  {
    "text": "calling the standard http endpoints but i can also publish topics",
    "start": "3349760",
    "end": "3354880"
  },
  {
    "text": "i can okay it's because it's too low i need to deposit some money back i",
    "start": "3354880",
    "end": "3361839"
  },
  {
    "text": "don't want to keep thanks money and i'm going to do a next topic and this time i'm saying",
    "start": "3361839",
    "end": "3368079"
  },
  {
    "text": "deposit and i'll show you in the code how does it work",
    "start": "3368079",
    "end": "3377839"
  },
  {
    "text": "i have deposited 15 and i hope it's deposited into my bank",
    "start": "3377920",
    "end": "3383680"
  },
  {
    "text": "so yes i have again 12 as deposit",
    "start": "3383680",
    "end": "3389040"
  },
  {
    "text": "i hope it makes sense and everything the topics and everything is mapping in the sample controller so",
    "start": "3389040",
    "end": "3398000"
  },
  {
    "text": "you will see over here that in this controller i'm also subscribing",
    "start": "3398640",
    "end": "3406720"
  },
  {
    "text": "to the topic so you see just by decorating this controller function with deposit",
    "start": "3406720",
    "end": "3413200"
  },
  {
    "text": "and this one with withdraw i'm automatically mapping",
    "start": "3413200",
    "end": "3418640"
  },
  {
    "text": "a request to an action",
    "start": "3418640",
    "end": "3421838"
  },
  {
    "text": "so yeah that's all i have to show you for dapper as i told you before dapper is pretty",
    "start": "3427920",
    "end": "3433280"
  },
  {
    "text": "much a community effort we would like to join you on our",
    "start": "3433280",
    "end": "3438319"
  },
  {
    "text": "community and help us to take dapper to the next level and and grow it yeah that's all thank you",
    "start": "3438319",
    "end": "3444480"
  },
  {
    "text": "very much and let's start with some q a",
    "start": "3444480",
    "end": "3451599"
  }
]