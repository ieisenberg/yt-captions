[
  {
    "text": "uh so uh I'm Sean parent I am a principal scientist at Adobe Systems out",
    "start": "10400",
    "end": "16600"
  },
  {
    "text": "in California um I've been at Adobe now depending on how you count about 22",
    "start": "16600",
    "end": "24080"
  },
  {
    "text": "years I started my career there on Photoshop and now I'm actually back working on Photoshop again uh but I did",
    "start": "24080",
    "end": "30720"
  },
  {
    "text": "run a a research team at the company for about 8 years uh uh with uh uh Alexander",
    "start": "30720",
    "end": "36800"
  },
  {
    "text": "stenov on the team uh for people who who know who Alex is he's the person who created",
    "start": "36800",
    "end": "43000"
  },
  {
    "text": "STL uh um uh this is one of my favorite talks that I give on on runtime",
    "start": "43000",
    "end": "50840"
  },
  {
    "text": "polymorphism but with five people in the audience here if you guys want to hear about something else just raise your",
    "start": "50840",
    "end": "57480"
  },
  {
    "text": "hand and I'll talk about anything uh uh I'm here for you guys",
    "start": "57480",
    "end": "64640"
  },
  {
    "text": "so uh uh a while ago uh let's see I guess it",
    "start": "64640",
    "end": "70400"
  },
  {
    "text": "was about three years ago now at the going native conference at Microsoft I gave a talk called C+ plus seasoning and",
    "start": "70400",
    "end": "77240"
  },
  {
    "text": "I got a lot of requests after that talk to write a book so my agreement has been",
    "start": "77240",
    "end": "82960"
  },
  {
    "text": "that uh uh uh as I get asked to do additional talks I try to flush out a",
    "start": "82960",
    "end": "89000"
  },
  {
    "text": "chapter from the book book uh so this is kind of the outline of the book and this talk fits in about here uh it doesn't",
    "start": "89000",
    "end": "96240"
  },
  {
    "text": "matter if you haven't seen seen the other talks uh I'll give you the background",
    "start": "96240",
    "end": "101479"
  },
  {
    "text": "information um uh this just gives you a little bit of background now all my",
    "start": "101479",
    "end": "107680"
  },
  {
    "text": "talks have a goal the goal for this talk is to write code without",
    "start": "107680",
    "end": "114079"
  },
  {
    "text": "inheritance uh the reason why I State the goals in the negative they're non-prescriptive",
    "start": "114399",
    "end": "120439"
  },
  {
    "text": "right I'm not trying to tell you what to do instead although I'll present some Alternatives here uh but I'm going to",
    "start": "120439",
    "end": "127000"
  },
  {
    "text": "present the problems that inheritance cause causes and and",
    "start": "127000",
    "end": "133360"
  },
  {
    "text": "it's as a goal it's an open-ended issue so it's like it's like strive hard to",
    "start": "133360",
    "end": "140440"
  },
  {
    "text": "not use inheritance but if for the problem you're trying to solve it's the best tool you've got in your toolbx then",
    "start": "140440",
    "end": "146640"
  },
  {
    "text": "use it right so it's not a rule it's not a guideline line it's a",
    "start": "146640",
    "end": "152920"
  },
  {
    "text": "goal so what is inheritance right so inheritance is a",
    "start": "155160",
    "end": "161080"
  },
  {
    "text": "mechanism to implement runtime polymorphism where one class is derived from another class uh but overrides all",
    "start": "161080",
    "end": "168000"
  },
  {
    "text": "are part of that implementation okay now here we're talking about class inheritance there's",
    "start": "168000",
    "end": "174200"
  },
  {
    "text": "other forms of inheritance there's protocol inheritance but in this talk we're talking about class inheritance",
    "start": "174200",
    "end": "181640"
  },
  {
    "text": "a quick disclaimer uh in my example code to keep the code readable I I leave out",
    "start": "182800",
    "end": "189040"
  },
  {
    "text": "uh header files inline function name spaces things like that they're just ignored for",
    "start": "189040",
    "end": "196400"
  },
  {
    "text": "clarity so I've got a little IDE here for my slides so we can write Main and",
    "start": "196440",
    "end": "203640"
  },
  {
    "text": "this will output hello world that's the idea here so we're",
    "start": "203640",
    "end": "208760"
  },
  {
    "text": "going to develop a little Library library in our library we've got some object type which for now is just an",
    "start": "208760",
    "end": "215040"
  },
  {
    "text": "integer okay and we've got a function that can draw our objects by just",
    "start": "215040",
    "end": "221239"
  },
  {
    "text": "streaming out our integers okay we've got a document type which is just a vector of",
    "start": "221239",
    "end": "227720"
  },
  {
    "text": "integers Vector of our objects and we've got a draw function to",
    "start": "227720",
    "end": "233720"
  },
  {
    "text": "draw to draw our objects right so fairly simple that's my",
    "start": "233720",
    "end": "240920"
  },
  {
    "text": "Library some client code might look like this we create a document we add four",
    "start": "240920",
    "end": "247040"
  },
  {
    "text": "objects to it and we draw the document and that will output",
    "start": "247040",
    "end": "253879"
  },
  {
    "text": "this okay so some quick guidelines here write",
    "start": "253879",
    "end": "260320"
  },
  {
    "text": "all code as if it were a library right right reuse of your code increases",
    "start": "260320",
    "end": "266680"
  },
  {
    "text": "productivity for you and your entire team and writing unit tests is simplified if",
    "start": "266680",
    "end": "272479"
  },
  {
    "text": "things are factored out into a separate Library so what happens if we want our",
    "start": "272479",
    "end": "280000"
  },
  {
    "text": "document though to hold any drawable object how do we go about solving that right right now it's just holding one",
    "start": "280000",
    "end": "286520"
  },
  {
    "text": "type of object well the traditional way is we say okay for any type of object we'll",
    "start": "286520",
    "end": "293120"
  },
  {
    "text": "make object be a base class and it'll have a v table under the hood okay",
    "start": "293120",
    "end": "298919"
  },
  {
    "text": "that's going to point to a virtual Destructor and our our virtual we're going to virtualize our draw",
    "start": "298919",
    "end": "304560"
  },
  {
    "text": "function okay and now our document can hold multiple objects right my class",
    "start": "304560",
    "end": "311800"
  },
  {
    "text": "type T some other type T right but I can't store them directly in my document",
    "start": "311800",
    "end": "317400"
  },
  {
    "text": "because they're variable size now right the different instances of different types of of my objects in my document",
    "start": "317400",
    "end": "324080"
  },
  {
    "text": "are different sizes so what I'm going to store in my document are Pointers of some kind",
    "start": "324080",
    "end": "331120"
  },
  {
    "text": "right so my library now looks like this okay so I've got a base class for my",
    "start": "331800",
    "end": "336960"
  },
  {
    "text": "object type I've got my virtual Destructor okay I've got my document",
    "start": "336960",
    "end": "342319"
  },
  {
    "text": "type to manage the memory I'm going to use a shared pointer right that's what most people",
    "start": "342319",
    "end": "348960"
  },
  {
    "text": "do right right there and so my client code now I can",
    "start": "350120",
    "end": "356440"
  },
  {
    "text": "write a subass and I can output my doc document right I can put in my own type right",
    "start": "356440",
    "end": "362720"
  },
  {
    "text": "there and I can draw it okay so everybody following the code",
    "start": "362720",
    "end": "369080"
  },
  {
    "text": "fairly simple so how many people see the",
    "start": "369080",
    "end": "373599"
  },
  {
    "text": "bug anybody",
    "start": "375599",
    "end": "382120"
  },
  {
    "text": "no no it's an override I don't have to declare it virtual because it's in the base class it's virtual",
    "start": "382120",
    "end": "390319"
  },
  {
    "text": "yeah it works I can run it but there's a bug there's a bug right",
    "start": "390720",
    "end": "398400"
  },
  {
    "text": "there okay so what happens is I come along and I knew my object I call imp",
    "start": "398400",
    "end": "404840"
  },
  {
    "text": "Place back to put this into my document the document has to grow its size growing its size can fail that would",
    "start": "404840",
    "end": "411560"
  },
  {
    "text": "throw an exception okay I already allocated my new my class it's not yet held by a",
    "start": "411560",
    "end": "417759"
  },
  {
    "text": "shared pointer and it leaks okay so there's a small bug right",
    "start": "417759",
    "end": "425599"
  },
  {
    "text": "there so that's why most people in the C++ Community will tell",
    "start": "425599",
    "end": "433199"
  },
  {
    "text": "you never call new directly okay just don't okay instead call make",
    "start": "433199",
    "end": "441000"
  },
  {
    "text": "shared okay so this is a actually also more efficient for another reason uh if",
    "start": "441000",
    "end": "447240"
  },
  {
    "text": "I call make shared then make shared is going to allocate the reference count",
    "start": "447240",
    "end": "452680"
  },
  {
    "text": "for that pointer along with the object in a single block as opposed to putting the reference count in a separate block",
    "start": "452680",
    "end": "458720"
  },
  {
    "text": "if I just Ned the object okay so I have two wins there that's exception safe and",
    "start": "458720",
    "end": "464199"
  },
  {
    "text": "it saved me a little bit of memory in a little bit of time okay but there's a deeper problem",
    "start": "464199",
    "end": "471360"
  },
  {
    "text": "with this piece of code right what happens here is I change the semantics of what it means to for copy and",
    "start": "471360",
    "end": "477919"
  },
  {
    "text": "assignment and equality of my document okay before when I had my",
    "start": "477919",
    "end": "484159"
  },
  {
    "text": "document and it just contained integers I could copy it it copied all",
    "start": "484159",
    "end": "489479"
  },
  {
    "text": "the contents now it's copying pointers to all the",
    "start": "489479",
    "end": "494800"
  },
  {
    "text": "contents so I've got shared data",
    "start": "494800",
    "end": "500639"
  },
  {
    "text": "okay so in C++ and in programming in general we Define an operation in terms of the",
    "start": "500639",
    "end": "507720"
  },
  {
    "text": "operation semantics so assignment is a procedure taking two objects of the same type that makes the first object equal",
    "start": "507720",
    "end": "514760"
  },
  {
    "text": "to the second without modifying the second that's the definition of what assignment",
    "start": "514760",
    "end": "520680"
  },
  {
    "text": "means if I look at the structure I've created I have shared pointers in in my",
    "start": "520680",
    "end": "526399"
  },
  {
    "text": "document now pointing to a single instance of T and if I think of those as the individual",
    "start": "526399",
    "end": "533040"
  },
  {
    "text": "types right I can copy my shared pointer that obeys the rules for assignment",
    "start": "533040",
    "end": "540880"
  },
  {
    "text": "okay but what I fail to account to is the relationships the arrows that those pointers point to",
    "start": "540880",
    "end": "546600"
  },
  {
    "text": "something and so if I take those into account then I have intersecting",
    "start": "546600",
    "end": "553519"
  },
  {
    "text": "objects okay those intersecting objects can interfere with each",
    "start": "553560",
    "end": "560040"
  },
  {
    "text": "other so really I have a single object that's",
    "start": "560040",
    "end": "566040"
  },
  {
    "text": "this that's all instan of of the shared pointer and what they're pointing",
    "start": "566040",
    "end": "571360"
  },
  {
    "text": "to okay so the structure still copiable and",
    "start": "572079",
    "end": "577560"
  },
  {
    "text": "assignable but we have to do it through other means the shared structure also breaks our real our ability to reason",
    "start": "577560",
    "end": "583920"
  },
  {
    "text": "about code right anytime I'm reading a piece of code and I see a shared pointer",
    "start": "583920",
    "end": "589320"
  },
  {
    "text": "and if you're coming from a JavaScript world or a Java world or or a net world",
    "start": "589320",
    "end": "594959"
  },
  {
    "text": "this drives me nuts and what I I refer to as the reference semantic languages right which is all of those those",
    "start": "594959",
    "end": "600760"
  },
  {
    "text": "languages every time I see an object I do not know who else is sharing that object right so I don't know when I call",
    "start": "600760",
    "end": "609000"
  },
  {
    "text": "a function what other effects that function is going to have on the object that that I'm hanging on",
    "start": "609000",
    "end": "615839"
  },
  {
    "text": "to so I always say a shared pointer is as good as a global variable",
    "start": "615839",
    "end": "623360"
  },
  {
    "text": "right so we want to choose the same syntax to have the same semantics that",
    "start": "624120",
    "end": "629800"
  },
  {
    "text": "enables code reuse and avoids combinatorial interfaces this is what the entire STL is built upon is this",
    "start": "629800",
    "end": "637160"
  },
  {
    "text": "principle okay so if a type has a proper set of basis operations",
    "start": "637160",
    "end": "644839"
  },
  {
    "text": "right then it can be adapted to an alternate set of basis operations regardless of the syntax right so if I",
    "start": "644839",
    "end": "651600"
  },
  {
    "text": "have if I have the ability to copy an object then I have the ability to to map",
    "start": "651600",
    "end": "658040"
  },
  {
    "text": "that copy into Assignment or into a copy",
    "start": "658040",
    "end": "663120"
  },
  {
    "text": "Constructor right now C++ has defined semantics for operations I'm built in types including assignment copy equality",
    "start": "663920",
    "end": "670639"
  },
  {
    "text": "and address of okay okay now it's interesting uh copy Constructors are",
    "start": "670639",
    "end": "678440"
  },
  {
    "text": "actually things that I see abused the most I actually had an engineer walking in my office one time and said so I'm",
    "start": "678440",
    "end": "685079"
  },
  {
    "text": "writing this class and I want to be able to copy the class so what do I call the member function that does copy and I",
    "start": "685079",
    "end": "691959"
  },
  {
    "text": "said well that would be the copy Constructor and he said no no no I'm already using the copy Constructor for",
    "start": "691959",
    "end": "697279"
  },
  {
    "text": "something else this is a horrible situation",
    "start": "697279",
    "end": "702440"
  },
  {
    "text": "because the compiler understands the semantics of the copy Constructor and the compiler can alide your copies so if",
    "start": "702440",
    "end": "708639"
  },
  {
    "text": "you're using your copy Constructor to do something without copying then you really don't know what's going on in",
    "start": "708639",
    "end": "714560"
  },
  {
    "text": "your code okay",
    "start": "714560",
    "end": "721079"
  },
  {
    "text": "okay so in the book elements of programming we say this there is a set",
    "start": "721079",
    "end": "727680"
  },
  {
    "text": "of procedures whose inclusion in the computational basis of a type lets us Place objects in data structures and use",
    "start": "727680",
    "end": "733320"
  },
  {
    "text": "algorithms to copy objects from one data structure to another we call types having such a basis regular since their",
    "start": "733320",
    "end": "739000"
  },
  {
    "text": "use guarantees regularity of behavior and therefore interoperability right so a regular type",
    "start": "739000",
    "end": "745079"
  },
  {
    "text": "where the regular operations are implemented with the standard names are said to have value Antics copy",
    "start": "745079",
    "end": "750480"
  },
  {
    "text": "assignment equality right th those are our standard basis operations when objects are",
    "start": "750480",
    "end": "756399"
  },
  {
    "text": "referenced to indirectly through a shared reference or a pointer the objects are said to have reference semantics right so shared pointer is",
    "start": "756399",
    "end": "764079"
  },
  {
    "text": "reference semantics an object in JavaScript is reference semantics an object in in Java or or in C to",
    "start": "764079",
    "end": "773920"
  },
  {
    "text": "reference semantics okay the next deep problem",
    "start": "773920",
    "end": "780519"
  },
  {
    "text": "with our code here when we went to the shared pointers is that call to draw in my class T are often indirected through",
    "start": "780519",
    "end": "785600"
  },
  {
    "text": "virtual calls including the destructor even when it's not necessary",
    "start": "785600",
    "end": "792480"
  },
  {
    "text": "okay I'm always Heap allocating my class T and access to my class T must be",
    "start": "792480",
    "end": "798360"
  },
  {
    "text": "synchronized now if you're programming in Java uh uh uh some of this the compiler",
    "start": "798360",
    "end": "804079"
  },
  {
    "text": "is able to optimize around from you because the compiler actually understands reference semantics so it's",
    "start": "804079",
    "end": "809320"
  },
  {
    "text": "able to do things like d virtualization and move things into into scoped memory",
    "start": "809320",
    "end": "815399"
  },
  {
    "text": "uh uh uh if it understands your code in C++ it cannot the compiler does not",
    "start": "815399",
    "end": "821360"
  },
  {
    "text": "understand reference semantics and nor can it under the current rules of the language uh uh so the compiler uh uh uh",
    "start": "821360",
    "end": "830240"
  },
  {
    "text": "cannot avoid the Heap allocation sometimes the compiler can Dev virtualize the calls right",
    "start": "830240",
    "end": "838480"
  },
  {
    "text": "another problem here polymorphism is intrusive right the document that we",
    "start": "840759",
    "end": "846040"
  },
  {
    "text": "created here now that holds our object T Bas class I can no longer put in a",
    "start": "846040",
    "end": "851800"
  },
  {
    "text": "simple integer right right I can know right before I could so even if I have a draw",
    "start": "851800",
    "end": "860120"
  },
  {
    "text": "function on my integer right my in my integer is a drawable thing but it would have to inherit from",
    "start": "860120",
    "end": "866720"
  },
  {
    "text": "object T and that means that if I want to use somebody else's class from their Library I have to put some wrapper",
    "start": "866720",
    "end": "874079"
  },
  {
    "text": "around their class to turn it into a drawable",
    "start": "874079",
    "end": "879279"
  },
  {
    "text": "object right in large systems this becomes a huge problem right what you start to see is every header file",
    "start": "879279",
    "end": "886440"
  },
  {
    "text": "includes a ton of header files and every object inherits from a whole bunch of",
    "start": "886440",
    "end": "892600"
  },
  {
    "text": "things and the problem stems from our use of the notion of the term polymorphic type",
    "start": "894079",
    "end": "899600"
  },
  {
    "text": "types right all of these problems the requirements of a polymorphic type by definition comes from where you use the",
    "start": "899600",
    "end": "906959"
  },
  {
    "text": "type okay not from the type itself right",
    "start": "906959",
    "end": "912320"
  },
  {
    "text": "so an integer is not a polymorphic type okay",
    "start": "912320",
    "end": "918759"
  },
  {
    "text": "my integer might be drawable okay what I'm saying is there is a piece of code",
    "start": "918759",
    "end": "924639"
  },
  {
    "text": "within which I want to deal with a set of types such as integer and my object T",
    "start": "924639",
    "end": "930360"
  },
  {
    "text": "based class and whatever else I create okay that share a particular attribute",
    "start": "930360",
    "end": "937160"
  },
  {
    "text": "so I want to handle those objects as if they were the same that's what we mean",
    "start": "937160",
    "end": "942680"
  },
  {
    "text": "by a polymorphic type so when I use inheritance to represent that relationship what I'm saying is I'm",
    "start": "942680",
    "end": "949000"
  },
  {
    "text": "building the use of my objects into my objects okay and what I want to do is",
    "start": "949000",
    "end": "954800"
  },
  {
    "text": "separate the use of my objects from my objects themselves",
    "start": "954800",
    "end": "960120"
  },
  {
    "text": "so there are no polymorphic types only polymorphic use of similar",
    "start": "960120",
    "end": "965720"
  },
  {
    "text": "types exactly what I said we're tightly coupling components inheritance implies",
    "start": "966040",
    "end": "971440"
  },
  {
    "text": "variable size which implies Heap allocation Heap allocation forcers of a further burden to manage the object",
    "start": "971440",
    "end": "977839"
  },
  {
    "text": "Lifetime and shared pointer unique pointer all these things indirection",
    "start": "977839",
    "end": "982959"
  },
  {
    "text": "Heap allocation and virtualization end up impacting my performance object lifetime management",
    "start": "982959",
    "end": "988440"
  },
  {
    "text": "leads to to garbage collection or reference counting this encourages shared ownership and the pro",
    "start": "988440",
    "end": "993759"
  },
  {
    "text": "proliferation of incidental data structures what's an inci incidental data structure it's when I have have a",
    "start": "993759",
    "end": "1000279"
  },
  {
    "text": "data structure within my code where I have no single object that points to it so if I have two shared pointers within",
    "start": "1000279",
    "end": "1006560"
  },
  {
    "text": "my code holding on to some element somewhere else that is a data structure",
    "start": "1006560",
    "end": "1012279"
  },
  {
    "text": "but there is no collection of shared pointers that represents that that's an incidental data",
    "start": "1012279",
    "end": "1017839"
  },
  {
    "text": "structure shared ownership leads to synchronization issues right right if I'm start trying to share these things",
    "start": "1017839",
    "end": "1023959"
  },
  {
    "text": "across threads it breaks my real ability to local reason there as good as a global variable and further impacts",
    "start": "1023959",
    "end": "1032918"
  },
  {
    "text": "performance which leads me to this line inheritance is the base class of",
    "start": "1032919",
    "end": "1038678"
  },
  {
    "text": "evil so let's do something instead let's take our library here and let's start",
    "start": "1038799",
    "end": "1045520"
  },
  {
    "text": "mutating it okay this is back to the original where our object is just an",
    "start": "1045520",
    "end": "1051200"
  },
  {
    "text": "INT okay so the First Transformation we're going to do is we're going to wrap that int into a",
    "start": "1051200",
    "end": "1057559"
  },
  {
    "text": "class okay so all we did here is we've got our object T and int self down there",
    "start": "1057559",
    "end": "1063600"
  },
  {
    "text": "at the bottom holds onto it we're going to have a draw function up on top that just knows how to draw",
    "start": "1063600",
    "end": "1069720"
  },
  {
    "text": "integers okay and we'll declare a friend function for drawing our object type that just knows that in order to draw",
    "start": "1069720",
    "end": "1076280"
  },
  {
    "text": "this object you're really just going to draw the integer it contains okay so all we did was we put a wrapper",
    "start": "1076280",
    "end": "1081880"
  },
  {
    "text": "around the int okay that was",
    "start": "1081880",
    "end": "1087200"
  },
  {
    "text": "it okay we're going to let the compiler Supply our copy and assignment operators which it perfectly happy to do in this",
    "start": "1087200",
    "end": "1095799"
  },
  {
    "text": "case and that means that we can still write the same code and it still outputs the same thing",
    "start": "1095919",
    "end": "1103120"
  },
  {
    "text": "right transformation number one so by writing a class that behaves",
    "start": "1103120",
    "end": "1109080"
  },
  {
    "text": "like a regular object we can increase its",
    "start": "1109080",
    "end": "1113200"
  },
  {
    "text": "reuse okay so next transformation let's take our object now",
    "start": "1115360",
    "end": "1121880"
  },
  {
    "text": "with our int and let's Heap allocate the int okay so we're just going to add a",
    "start": "1121880",
    "end": "1129440"
  },
  {
    "text": "level of indirection we'll store it in a unique pointer we'll use make unique so we",
    "start": "1129440",
    "end": "1134480"
  },
  {
    "text": "don't have a memory management issue okay so we're still just holding now instead of holding an INT we're holding",
    "start": "1134480",
    "end": "1139799"
  },
  {
    "text": "a pointer to an INT simple enough okay do your own",
    "start": "1139799",
    "end": "1145880"
  },
  {
    "text": "memory management don't create garbage for your clients right this all the management of this this pointer is",
    "start": "1145880",
    "end": "1151600"
  },
  {
    "text": "inside of our class that's where we want it right",
    "start": "1151600",
    "end": "1158080"
  },
  {
    "text": "now we do have to add our own copy Constructor here now we can't rely on the compilers okay so we'll add a copy",
    "start": "1158080",
    "end": "1166760"
  },
  {
    "text": "Constructor and we make sure that actually copies copy copied objects are",
    "start": "1166760",
    "end": "1172080"
  },
  {
    "text": "equal and disjoint that's what copy means okay we're going to add an",
    "start": "1172080",
    "end": "1178080"
  },
  {
    "text": "assignment operator okay so we're going to write our assignment operator in terms of",
    "start": "1178080",
    "end": "1185159"
  },
  {
    "text": "making a copy okay and then stealing the guts of that copy right we're moving it",
    "start": "1185159",
    "end": "1192400"
  },
  {
    "text": "here this is kind of a stn standard pattern even though it's just an integer move is the same as as as copy for just",
    "start": "1192400",
    "end": "1199559"
  },
  {
    "text": "that int oh I'm sorry that's not true because we've got a a unique pointer at this",
    "start": "1199559",
    "end": "1205440"
  },
  {
    "text": "point so we're moving the unique pointer over and stealing the guts from the",
    "start": "1205440",
    "end": "1210840"
  },
  {
    "text": "copy okay so assignment is consistent with copy generally if I create an",
    "start": "1210840",
    "end": "1216840"
  },
  {
    "text": "object and then assign to it it's equivalent to if I copy construct it",
    "start": "1216840",
    "end": "1224039"
  },
  {
    "text": "okay so this assignment satisfies the strong exception guarantee that's a nice",
    "start": "1224039",
    "end": "1229679"
  },
  {
    "text": "property what do I mean by that I mean if we throw in the middle of trying to make this copy we end up leaving the",
    "start": "1229679",
    "end": "1235760"
  },
  {
    "text": "object in the state it was in originally okay basic exception guarantee is that the object is is still",
    "start": "1235760",
    "end": "1244799"
  },
  {
    "text": "satisfies its invariance okay but it's in an unknown State that's a whole separate",
    "start": "1244799",
    "end": "1252320"
  },
  {
    "text": "talk okay assignment like all other operations must satisfy the basic",
    "start": "1252320",
    "end": "1257640"
  },
  {
    "text": "exception guarantee and if you notice we don't optimize for",
    "start": "1257640",
    "end": "1262960"
  },
  {
    "text": "rare cases like self- assignment right sometimes people will say say you know if this thing is really if I'm assigning",
    "start": "1262960",
    "end": "1270480"
  },
  {
    "text": "it to itself right because that can happen through a reference then don't do anything okay so this would actually go",
    "start": "1270480",
    "end": "1278000"
  },
  {
    "text": "ahead and make make the additional copy but self- assignment is incredibly rare and so the check to see whether or not",
    "start": "1278000",
    "end": "1284240"
  },
  {
    "text": "you're doing a self assignment and your system is slowing down the 99 9999 case",
    "start": "1284240",
    "end": "1291080"
  },
  {
    "text": "in favor of optimizing the 001 case so don't do things like",
    "start": "1291080",
    "end": "1297799"
  },
  {
    "text": "that okay so our code now same code",
    "start": "1297799",
    "end": "1303080"
  },
  {
    "text": "still works",
    "start": "1303080",
    "end": "1308480"
  },
  {
    "text": "right so doing this kind of Separation sometimes you want to do it in code it's referred to as a pimple pimple pattern",
    "start": "1308480",
    "end": "1315440"
  },
  {
    "text": "or a handle body idiom okay this can be useful for separating the implementation",
    "start": "1315440",
    "end": "1322080"
  },
  {
    "text": "of your class uh from the interface so sometimes you can have a private implementation here our implementation",
    "start": "1322080",
    "end": "1329000"
  },
  {
    "text": "is just an integer but that could be some class sitting in a CPP file and I want to keep all those guts out of the",
    "start": "1329000",
    "end": "1334640"
  },
  {
    "text": "header files right structuring my code this way putting an extra level of indirection is one way to do",
    "start": "1334640",
    "end": "1341880"
  },
  {
    "text": "that okay let's take a look at something here we're going to decorate our code",
    "start": "1341880",
    "end": "1347960"
  },
  {
    "text": "just so it tell tells us when we're doing construction and when we're doing",
    "start": "1347960",
    "end": "1355400"
  },
  {
    "text": "copies now here's a little piece of code so what's going on here we've got a",
    "start": "1357200",
    "end": "1363799"
  },
  {
    "text": "function that constructs an object assigns it the value five returns it as",
    "start": "1363799",
    "end": "1369360"
  },
  {
    "text": "the result okay and then down here we have object X which we assign from function",
    "start": "1369360",
    "end": "1378919"
  },
  {
    "text": "okay so our assignment remember is written in terms of copy so what is this",
    "start": "1378919",
    "end": "1386120"
  },
  {
    "text": "going to print Constructor only anybody",
    "start": "1386120",
    "end": "1395000"
  },
  {
    "text": "else so he's correct in almost every compiler this will print this it's not",
    "start": "1396559",
    "end": "1405080"
  },
  {
    "text": "guaranteed in the current standard but it will be guaranteed in C++ + 17 okay so right now this is called uh a",
    "start": "1405080",
    "end": "1415320"
  },
  {
    "text": "return value optimization and the way it works is",
    "start": "1415320",
    "end": "1421679"
  },
  {
    "text": "that because I'm constructing object X here my function",
    "start": "1421679",
    "end": "1428159"
  },
  {
    "text": "res well my object T the result of a function actually lives in the scope",
    "start": "1428159",
    "end": "1434400"
  },
  {
    "text": "outside of that function and so the compiler knows that if it's constructing a result and and that result is going to",
    "start": "1434400",
    "end": "1440279"
  },
  {
    "text": "be used to do the return okay that's a named value that it can construct it directly in place in the object T this",
    "start": "1440279",
    "end": "1447240"
  },
  {
    "text": "is what I mean by the compiler understands what copy means and so the compiler can alide copies so if you have",
    "start": "1447240",
    "end": "1453720"
  },
  {
    "text": "your copy Constructor doing something else you don't know what your code is doing because you don't know when the",
    "start": "1453720",
    "end": "1459200"
  },
  {
    "text": "when the compiler is going to call it or not okay so let's change our code just a",
    "start": "1459200",
    "end": "1466159"
  },
  {
    "text": "little bit we'll construct an object with X and then we'll assign it from function",
    "start": "1466159",
    "end": "1474000"
  },
  {
    "text": "question",
    "start": "1479320",
    "end": "1482320"
  },
  {
    "text": "yes that's correct so which we couldn't be because result is a local variable",
    "start": "1487880",
    "end": "1496480"
  },
  {
    "text": "so okay okay so what will this",
    "start": "1497200",
    "end": "1503760"
  },
  {
    "text": "print anybody c tour twice and then copy very",
    "start": "1506960",
    "end": "1514200"
  },
  {
    "text": "good so where' that copy come",
    "start": "1514200",
    "end": "1518278"
  },
  {
    "text": "from the last line right where we did assignment the copy came from right here",
    "start": "1519480",
    "end": "1524760"
  },
  {
    "text": "we actually wrote that copy right the first statement in our assignment operator is make a copy so that's our",
    "start": "1524760",
    "end": "1532000"
  },
  {
    "text": "copy okay okay so we're going to rewrite our",
    "start": "1532000",
    "end": "1538840"
  },
  {
    "text": "assignment in this form okay what we want to do is say",
    "start": "1538840",
    "end": "1543919"
  },
  {
    "text": "don't take our assignment in terms of a const reference take our assignment by",
    "start": "1543919",
    "end": "1549120"
  },
  {
    "text": "value that actually hoists that out of the scope okay and then we'll just move",
    "start": "1549120",
    "end": "1555399"
  },
  {
    "text": "it into place okay the general guideline here is to",
    "start": "1555399",
    "end": "1561440"
  },
  {
    "text": "pass sync arguments what's a sync argument a sync argument is is is an argument which is going to be stored or",
    "start": "1561440",
    "end": "1568760"
  },
  {
    "text": "is going to be returned from the function uh uh that we're",
    "start": "1568760",
    "end": "1574000"
  },
  {
    "text": "passing it to okay so if we're taking something and we want to to basically",
    "start": "1574000",
    "end": "1579520"
  },
  {
    "text": "move it somewhere else or return it which is a form of moving it somewhere else we want to pass it by",
    "start": "1579520",
    "end": "1587080"
  },
  {
    "text": "value okay okay the argument to assignment is a sync",
    "start": "1587080",
    "end": "1593159"
  },
  {
    "text": "argument so now that will print ctor seor okay we got rid of the copy why",
    "start": "1593159",
    "end": "1602799"
  },
  {
    "text": "because we lifted okay so in our assignment we",
    "start": "1602799",
    "end": "1609279"
  },
  {
    "text": "lifted out the argument and now the compiler is able to return value optimization from the value coming out",
    "start": "1609279",
    "end": "1616320"
  },
  {
    "text": "of there into the argument of x get moved into",
    "start": "1616320",
    "end": "1621960"
  },
  {
    "text": "place okay so now let's go back to our document like this and we want to uh",
    "start": "1624320",
    "end": "1632240"
  },
  {
    "text": "Reserve right right just so that we're we're not seeing copies from our document growing and then we're going to",
    "start": "1632240",
    "end": "1639320"
  },
  {
    "text": "reverse the document right and reverse is going to do pairwise Swap all the way",
    "start": "1639320",
    "end": "1646080"
  },
  {
    "text": "down so what's this going to print anybody so we're going to do two",
    "start": "1646080",
    "end": "1654320"
  },
  {
    "text": "pairwise",
    "start": "1654320",
    "end": "1656880"
  },
  {
    "text": "swaps here we go so we got our four Constructors copy copy copy copy copy",
    "start": "1661240",
    "end": "1666279"
  },
  {
    "text": "copy copy right all of those copies are are copy to a temporary and then copy",
    "start": "1666279",
    "end": "1676120"
  },
  {
    "text": "across in our pairwise swap SW",
    "start": "1676120",
    "end": "1682320"
  },
  {
    "text": "right so the problem there we didn't provide our own Swap and we didn't provide now a move Constructor for the",
    "start": "1682320",
    "end": "1691760"
  },
  {
    "text": "compiler so what we want is a move Constructor right which is the double Amper sand there so we're taking an R",
    "start": "1691760",
    "end": "1699679"
  },
  {
    "text": "value reference right an R value is a temporary swap in C++ 11 and 14 is",
    "start": "1699679",
    "end": "1706440"
  },
  {
    "text": "written in terms of moves so with move since we know that the",
    "start": "1706440",
    "end": "1712880"
  },
  {
    "text": "value being passed to us is a temporary so or the users cast it to a temporary",
    "start": "1712880",
    "end": "1718760"
  },
  {
    "text": "with a move expression which is what move does then we can just steal the guts of",
    "start": "1718760",
    "end": "1724880"
  },
  {
    "text": "it now that implementation to just move all of our members is actually the default so all we have to do is say",
    "start": "1726440",
    "end": "1734480"
  },
  {
    "text": "this okay so now C++ 11 and 14 this will get",
    "start": "1735240",
    "end": "1741360"
  },
  {
    "text": "picked up by Swap and that will print",
    "start": "1741360",
    "end": "1747080"
  },
  {
    "text": "that okay so we got rid of all those",
    "start": "1747080",
    "end": "1751320"
  },
  {
    "text": "copies now here's a tricky one what does this thing print okay all",
    "start": "1752440",
    "end": "1758519"
  },
  {
    "text": "we did is we took our object T and we wrapped it into a struct okay and so now our our",
    "start": "1758519",
    "end": "1765640"
  },
  {
    "text": "construction we construct it with zero and then we",
    "start": "1765640",
    "end": "1771000"
  },
  {
    "text": "assign through our function there okay so same code as before it's",
    "start": "1771080",
    "end": "1779120"
  },
  {
    "text": "just wrapped one level in a struct our copies",
    "start": "1779120",
    "end": "1785720"
  },
  {
    "text": "back okay this one drives me nuts this is because of what I consider",
    "start": "1785720",
    "end": "1792320"
  },
  {
    "text": "a language defect okay for the move assignment operator a non-static data member direct",
    "start": "1792320",
    "end": "1797760"
  },
  {
    "text": "base with a type that does not have a move assignment operator and is not trivial okay so the compiler will not",
    "start": "1797760",
    "end": "1806320"
  },
  {
    "text": "provide a move assignment operator okay on our some type T unless",
    "start": "1806320",
    "end": "1813240"
  },
  {
    "text": "all of its members are move have a move assignment operator now the reason why that's a",
    "start": "1813240",
    "end": "1821039"
  },
  {
    "text": "flaw is if that sentence there said said in of",
    "start": "1821039",
    "end": "1828159"
  },
  {
    "text": "saying does not have a move assignment operator said said is not move",
    "start": "1828159",
    "end": "1834159"
  },
  {
    "text": "assignable then our copy would go away okay so because our code is move",
    "start": "1834159",
    "end": "1841240"
  },
  {
    "text": "assignable it just doesn't have a move assignment operator which has a very particular",
    "start": "1841240",
    "end": "1847240"
  },
  {
    "text": "signature so we can't quite get away with that so instead we need to put back our",
    "start": "1847919",
    "end": "1854480"
  },
  {
    "text": "copy Constructor and default our move",
    "start": "1854480",
    "end": "1859760"
  },
  {
    "text": "assignment operator which will just move all of our members which is a uh unique pointer so that's going to work",
    "start": "1859760",
    "end": "1866960"
  },
  {
    "text": "fine okay okay so we want to pass so we're",
    "start": "1866960",
    "end": "1872039"
  },
  {
    "text": "going to amend our rule here we want to pass sync arguments by value and swap or move into place the sync argument is in",
    "start": "1872039",
    "end": "1877519"
  },
  {
    "text": "the argument ConEd to return for the function the argument to assignment is a sync argument however because of a language defect you must write a write a",
    "start": "1877519",
    "end": "1884760"
  },
  {
    "text": "move assignment operator okay now our copy Constructor now that",
    "start": "1884760",
    "end": "1892360"
  },
  {
    "text": "we have a move assignment operator we can actually shorten our copy Constructor to that which is make a copy",
    "start": "1892360",
    "end": "1900039"
  },
  {
    "text": "which is an R value and assign it into",
    "start": "1900039",
    "end": "1904240"
  },
  {
    "text": "place okay so we fixed",
    "start": "1907440",
    "end": "1912440"
  },
  {
    "text": "that okay so returning objects from functions passing read only argument and passing R values as sync arguments do",
    "start": "1914279",
    "end": "1919840"
  },
  {
    "text": "not require copy understanding this can greatly improve the efficiency of your application okay so if you didn't know",
    "start": "1919840",
    "end": "1926360"
  },
  {
    "text": "all of this these are kind of important things to learn so let's get rid of",
    "start": "1926360",
    "end": "1933919"
  },
  {
    "text": "that and what should we do next here okay the observation here is that",
    "start": "1935519",
    "end": "1943840"
  },
  {
    "text": "our Constructors before they were taking const int X but Constructors are frequently sync",
    "start": "1943840",
    "end": "1951240"
  },
  {
    "text": "arguments okay or the arguments to Constructors are frequently sync arguments and so we're going to go ahead",
    "start": "1951240",
    "end": "1958080"
  },
  {
    "text": "even though they're just integers and it's going to copy we're going to pass them by value and move them into place",
    "start": "1958080",
    "end": "1963880"
  },
  {
    "text": "just to follow our own rule",
    "start": "1963880",
    "end": "1971399"
  },
  {
    "text": "okay now we want to make this polymorphic so up till this point it's",
    "start": "1971399",
    "end": "1977200"
  },
  {
    "text": "we've only held string or we've only held integers now we want it to hold strings so we can construct our object",
    "start": "1977200",
    "end": "1983799"
  },
  {
    "text": "with a string we'll do it the same",
    "start": "1983799",
    "end": "1989919"
  },
  {
    "text": "way but we can't store an INT model anymore right so what we're going to",
    "start": "1989919",
    "end": "1995960"
  },
  {
    "text": "store is a pointer to a concept right in this case our concept is drawable object",
    "start": "1995960",
    "end": "2002320"
  },
  {
    "text": "right so we want a concept for a drawable object",
    "start": "2002320",
    "end": "2007240"
  },
  {
    "text": "so our concept for a drawable object is just going to be a base class for our implementation here okay so we've got a",
    "start": "2008440",
    "end": "2015600"
  },
  {
    "text": "base class which is our concept it's got a defaulted",
    "start": "2015600",
    "end": "2021240"
  },
  {
    "text": "Destructor and our string model and our int model inherit from",
    "start": "2021240",
    "end": "2027679"
  },
  {
    "text": "it okay we're going to virtualize draw on it so there's our virtual draw",
    "start": "2028799",
    "end": "2034360"
  },
  {
    "text": "function",
    "start": "2034360",
    "end": "2037360"
  },
  {
    "text": "okay and we're going to provide a base way to draw a",
    "start": "2039840",
    "end": "2045159"
  },
  {
    "text": "string okay so fairly simple set of Transformations but our code's getting a little messy and a little",
    "start": "2045480",
    "end": "2052158"
  },
  {
    "text": "long oh we also have to worry about copy",
    "start": "2052159",
    "end": "2057560"
  },
  {
    "text": "right so before we could just copy our int model now we have to virtualize",
    "start": "2057560",
    "end": "2064240"
  },
  {
    "text": "copy Okay so so we'll go down here to our",
    "start": "2064240",
    "end": "2069760"
  },
  {
    "text": "concept and we'll add a virtual copy and we will Implement virtual copy for our string model and our int",
    "start": "2069760",
    "end": "2077520"
  },
  {
    "text": "model but now we can do this we can put a string in",
    "start": "2079320",
    "end": "2085280"
  },
  {
    "text": "here and this will work so we've got a little polymorphism but we've got a pretty big",
    "start": "2085280",
    "end": "2091679"
  },
  {
    "text": "class at this point right but we didn't allow our polymorphism to comp ate the client code",
    "start": "2091679",
    "end": "2099240"
  },
  {
    "text": "and we're working with integers and strings which don't inherit from anything so that's pretty good so far",
    "start": "2099240",
    "end": "2105119"
  },
  {
    "text": "the polymorphism is an implementation detail and that's where where polymorphism should",
    "start": "2105119",
    "end": "2110920"
  },
  {
    "text": "be okay but we have a lot of redundant code here right so what can we do with",
    "start": "2110920",
    "end": "2117960"
  },
  {
    "text": "redundant code like this right we've got two draw functions that are almost identical right do we have a language",
    "start": "2117960",
    "end": "2124680"
  },
  {
    "text": "facility to just write that once anybody the",
    "start": "2124680",
    "end": "2131240"
  },
  {
    "text": "template right so we're going to templa our draw and we're going to templa our",
    "start": "2131240",
    "end": "2140079"
  },
  {
    "text": "construction okay now down here we have two model",
    "start": "2140079",
    "end": "2148280"
  },
  {
    "text": "implementations almost identical one for Strings and one for integers",
    "start": "2148280",
    "end": "2153839"
  },
  {
    "text": "right well that could be a template just a model",
    "start": "2153839",
    "end": "2159640"
  },
  {
    "text": "okay so now look what I can do I can write my own class and I can provide a",
    "start": "2161240",
    "end": "2167960"
  },
  {
    "text": "draw function I could also just make my class serialized to to a standard stream",
    "start": "2167960",
    "end": "2174839"
  },
  {
    "text": "and it would pick up my default draw function okay so I can provide a custom draw function or I can just provide a",
    "start": "2174839",
    "end": "2180560"
  },
  {
    "text": "stream out for it and now I can store my class T inside of my document",
    "start": "2180560",
    "end": "2189200"
  },
  {
    "text": "okay my class T inherits from nothing it's whatever I want it to",
    "start": "2189200",
    "end": "2196720"
  },
  {
    "text": "be okay it's called the runtime concept idiom it allows polymorphism when is",
    "start": "2197280",
    "end": "2202640"
  },
  {
    "text": "needed without inheritance the client isn't burdened with interfaces factories or class delegations okay so I can adapt",
    "start": "2202640",
    "end": "2210280"
  },
  {
    "text": "anybody's third party code all I have to do is is is provide a draw method a draw",
    "start": "2210280",
    "end": "2215640"
  },
  {
    "text": "function Standalone function and I can throw it in and use it with this type okay in fact since I started this",
    "start": "2215640",
    "end": "2224640"
  },
  {
    "text": "whole thing my document which is a vector of my objects itself I have a",
    "start": "2224640",
    "end": "2230800"
  },
  {
    "text": "draw function because I'm calling draw a document see out right right there the last line we've been calling that all along so I can put my document into my",
    "start": "2230800",
    "end": "2238400"
  },
  {
    "text": "document okay and that's going to work right and it's not going to explode because it recurses forever it puts the",
    "start": "2238400",
    "end": "2245040"
  },
  {
    "text": "document into the document at the state the document was in in at the time that I copied it into the document okay so",
    "start": "2245040",
    "end": "2251440"
  },
  {
    "text": "now I can have a document that contains zero hello another document contain in zero and hello end of that document my",
    "start": "2251440",
    "end": "2257560"
  },
  {
    "text": "class T end of the second document",
    "start": "2257560",
    "end": "2262880"
  },
  {
    "text": "okay so we want to shift polymorphic use we",
    "start": "2262880",
    "end": "2267960"
  },
  {
    "text": "want to make sure we're using regular semantics for all of our operations that way everything works with containers promotes interoperability and",
    "start": "2267960",
    "end": "2275720"
  },
  {
    "text": "there's no per performance penalty this code is as efficient as the Base Class mechanism is that's exactly what it is",
    "start": "2275720",
    "end": "2282599"
  },
  {
    "text": "under the hood okay so but there is potential performance wins because I",
    "start": "2282599",
    "end": "2287800"
  },
  {
    "text": "don't have to wrap integers into objects okay or strings into objects or",
    "start": "2287800",
    "end": "2294520"
  },
  {
    "text": "third-party Library things into objects and lug those things around my",
    "start": "2294520",
    "end": "2300078"
  },
  {
    "text": "system now let me flip to a demo here",
    "start": "2300760",
    "end": "2306079"
  },
  {
    "text": "so mirror my",
    "start": "2313400",
    "end": "2317078"
  },
  {
    "text": "display so this is Photoshop for anybody who hasn't seen",
    "start": "2321440",
    "end": "2327640"
  },
  {
    "text": "Photoshop or hasn't seen Photoshop in a while um I'm actually back on the Photoshop team when I first joined Adobe",
    "start": "2327640",
    "end": "2334079"
  },
  {
    "text": "like 22 years ago I worked on Photoshop for a number of years and now I'm working on Photoshop again",
    "start": "2334079",
    "end": "2342520"
  },
  {
    "text": "um uh uh so this is a shot that I took of",
    "start": "2342520",
    "end": "2347880"
  },
  {
    "text": "the at the Beach in California um some people think the",
    "start": "2347880",
    "end": "2353839"
  },
  {
    "text": "uh seagull looks like it only has one leg there so let's fix",
    "start": "2353839",
    "end": "2360240"
  },
  {
    "text": "that uh",
    "start": "2360240",
    "end": "2364240"
  },
  {
    "text": "there we go so now the seagull doesn't look like it has one leg",
    "start": "2368319",
    "end": "2374079"
  },
  {
    "text": "anymore um uh let's do something horrible with",
    "start": "2374079",
    "end": "2380280"
  },
  {
    "text": "this image right I wanted a blue or sky so let's paint in some Bluer",
    "start": "2380280",
    "end": "2388520"
  },
  {
    "text": "sky and magenta is my favorite color",
    "start": "2388520",
    "end": "2397880"
  },
  {
    "text": "so let's paint in some magenta there okay so why am I doing this it's certainly not to uh uh display my great",
    "start": "2399400",
    "end": "2407200"
  },
  {
    "text": "artistic talent um uh but over",
    "start": "2407200",
    "end": "2413040"
  },
  {
    "text": "here I have open What's called the Photoshop history panel okay and even if",
    "start": "2413040",
    "end": "2420599"
  },
  {
    "text": "I went and did something like said take this entire document and say",
    "start": "2420599",
    "end": "2427760"
  },
  {
    "text": "let's just revert it all the way back to where it was okay my history panel is still",
    "start": "2427760",
    "end": "2433280"
  },
  {
    "text": "there and what does that mean that means that I can back up through every step of",
    "start": "2433280",
    "end": "2439680"
  },
  {
    "text": "this document all the way back to when I opened it okay",
    "start": "2439680",
    "end": "2445280"
  },
  {
    "text": "so up through Photoshop 4 Photoshop had undo but it only had one level of",
    "start": "2445280",
    "end": "2453640"
  },
  {
    "text": "undo okay now",
    "start": "2454280",
    "end": "2459040"
  },
  {
    "text": "during Photoshop 5 we said we want multiple level undo but we had a problem and that photoshop was written using",
    "start": "2459560",
    "end": "2465640"
  },
  {
    "text": "something called Mac app which is a framework that Apple used to ship and it had these command objects and the way it",
    "start": "2465640",
    "end": "2471359"
  },
  {
    "text": "would work is a command object would Implement a bunch of member functions for do it Undo It redo it commit it",
    "start": "2471359",
    "end": "2478839"
  },
  {
    "text": "that's the basic model so you would write a command you would Implement those things and then you would get undo",
    "start": "2478839",
    "end": "2484480"
  },
  {
    "text": "well the problem was over for the initial Photoshop development is is",
    "start": "2484480",
    "end": "2490680"
  },
  {
    "text": "people were storing the data that they needed in order to to undo",
    "start": "2490680",
    "end": "2496800"
  },
  {
    "text": "redo okay prior to commit hanging out in fields of the document right well where",
    "start": "2496800",
    "end": "2503680"
  },
  {
    "text": "would I put this I would put that there so if you did two commands back to back the second command might clobber the",
    "start": "2503680",
    "end": "2509119"
  },
  {
    "text": "undue history for the first command okay and this was kind of strewn throughout the code right because you had to put",
    "start": "2509119",
    "end": "2516640"
  },
  {
    "text": "the data some some place in order to implement redo so where do you do it you hang it off some member of the do of the",
    "start": "2516640",
    "end": "2523240"
  },
  {
    "text": "document and this was a problem the code base even at that time was big enough where it was like how in the world do we",
    "start": "2523240",
    "end": "2528920"
  },
  {
    "text": "even find all of these places and one of my colleagues Mark Hamburg said I have",
    "start": "2528920",
    "end": "2534400"
  },
  {
    "text": "this great idea let's get rid of that model entirely all we're going to have is do",
    "start": "2534400",
    "end": "2540280"
  },
  {
    "text": "it just do it and between each do it we're just going to make a copy of the",
    "start": "2540280",
    "end": "2545839"
  },
  {
    "text": "entire document everything okay now Photoshop can handle massive documents",
    "start": "2545839",
    "end": "2551200"
  },
  {
    "text": "right like you know we've worked with JPL to create documents that are the",
    "start": "2551200",
    "end": "2556559"
  },
  {
    "text": "surface of Mars to a one meter resolution like the entire surface of Mars to a one meter resolution has one",
    "start": "2556559",
    "end": "2562920"
  },
  {
    "text": "Photoshop image okay okay and our model",
    "start": "2562920",
    "end": "2568040"
  },
  {
    "text": "is just make a copy make a copy okay so that gives you undo it gives you",
    "start": "2568040",
    "end": "2575599"
  },
  {
    "text": "the ability to step in and out out okay so but it also gives you more",
    "start": "2575599",
    "end": "2582240"
  },
  {
    "text": "because I have this handy tool where is my tool is right",
    "start": "2582240",
    "end": "2588440"
  },
  {
    "text": "here called my history brush so I can come along here and say well I kind of liked a little more of",
    "start": "2588440",
    "end": "2595920"
  },
  {
    "text": "the blue there so I will anchor my history brush there and come down here",
    "start": "2595920",
    "end": "2601839"
  },
  {
    "text": "and say well I'll just put back a little bit of that blue",
    "start": "2601839",
    "end": "2607760"
  },
  {
    "text": "now I'm not if you see I'm not painting blue I'm painting in the state document",
    "start": "2607760",
    "end": "2613880"
  },
  {
    "text": "was in when I put the blue there okay and if I say well no I want a",
    "start": "2613880",
    "end": "2620520"
  },
  {
    "text": "little less blue I can paint back in the document in",
    "start": "2620520",
    "end": "2626000"
  },
  {
    "text": "its original state maybe I didn't want the blue over the seagull's head okay so this feature came along for",
    "start": "2626000",
    "end": "2634160"
  },
  {
    "text": "free because Photoshop already had a clone tool that clone from one document to another document and it could clone",
    "start": "2634160",
    "end": "2640359"
  },
  {
    "text": "from one point within a document to another Point within a document and so if we have a whole stack of documents",
    "start": "2640359",
    "end": "2646559"
  },
  {
    "text": "right that's all our history is is a whole stack of documents then I can clone from one document into another",
    "start": "2646559",
    "end": "2653359"
  },
  {
    "text": "document so what does this have to do with our talk well let's take a",
    "start": "2653359",
    "end": "2660000"
  },
  {
    "text": "look let me turn off my mirroring",
    "start": "2660400",
    "end": "2668039"
  },
  {
    "text": "okay so this is what Photoshop does right right when we make a copy of the",
    "start": "2672599",
    "end": "2678119"
  },
  {
    "text": "document it's a very lightweight copy right because most of the structure is actually",
    "start": "2678119",
    "end": "2683200"
  },
  {
    "text": "shared okay so when we lay down a paint stroke the only thing that's new is the",
    "start": "2683200",
    "end": "2689000"
  },
  {
    "text": "tiles of the image with the paint stroke right Photoshop busts the entire image into a whole bunch of relatively small",
    "start": "2689000",
    "end": "2695400"
  },
  {
    "text": "tiles and that that lets us just modify portions of",
    "start": "2695400",
    "end": "2700839"
  },
  {
    "text": "it so let's write an undo",
    "start": "2702800",
    "end": "2707079"
  },
  {
    "text": "here okay so what we want is our history",
    "start": "2708800",
    "end": "2713839"
  },
  {
    "text": "which is a vector of documents and we're going to add the following commands commit undo and current which just",
    "start": "2713839",
    "end": "2721240"
  },
  {
    "text": "Returns the top of that Vector okay so all commit does is does a push back of",
    "start": "2721240",
    "end": "2727520"
  },
  {
    "text": "our document state push back of back that's actually legal C++ and undo where we can do a pop",
    "start": "2727520",
    "end": "2736040"
  },
  {
    "text": "back okay so we're going to write that now let's go all the way back up here we",
    "start": "2737640",
    "end": "2743040"
  },
  {
    "text": "don't need to document our uh SE tour but we're going to look at",
    "start": "2743040",
    "end": "2749559"
  },
  {
    "text": "copies and we're going to take this code and we're going to change it so we",
    "start": "2749559",
    "end": "2755200"
  },
  {
    "text": "create a history state and we do right which is we take our current",
    "start": "2755200",
    "end": "2762000"
  },
  {
    "text": "document and we put in zero and hello then we draw our current document we'll draw a line and then we'll commit that",
    "start": "2762000",
    "end": "2768000"
  },
  {
    "text": "change into our history and then we're going to take the now current document we're going to put 42",
    "start": "2768000",
    "end": "2775319"
  },
  {
    "text": "world uh put the document into itself input in my class draw it put a",
    "start": "2775319",
    "end": "2782440"
  },
  {
    "text": "line and then we're going to undo which will be back to our commit State and draw the the document one more",
    "start": "2782440",
    "end": "2788720"
  },
  {
    "text": "time okay so that's what this is going to print construct our document copy",
    "start": "2788720",
    "end": "2795119"
  },
  {
    "text": "copy copy okay and then we're going",
    "start": "2795119",
    "end": "2800680"
  },
  {
    "text": "to uh display our document like that and then we're going to put it back to the state it was in",
    "start": "2800680",
    "end": "2807240"
  },
  {
    "text": "initially okay so each of those copies come in",
    "start": "2807240",
    "end": "2812440"
  },
  {
    "text": "because of course we're copying our document to put it back onto itself and that's going to copy all the objects within the document and if you haven't",
    "start": "2812440",
    "end": "2819400"
  },
  {
    "text": "figured this out yet I don't like copies so what are we going to",
    "start": "2819400",
    "end": "2825400"
  },
  {
    "text": "do well this is where all of our copies are coming from they're coming from our copy and assignment operator and I don't",
    "start": "2825400",
    "end": "2832800"
  },
  {
    "text": "like that so get rid of it okay which means we don't need to",
    "start": "2832800",
    "end": "2839000"
  },
  {
    "text": "virtualize it so get rid of that but we do have to make a change",
    "start": "2839000",
    "end": "2845480"
  },
  {
    "text": "here right right now our object would just be movable with a unique",
    "start": "2845480",
    "end": "2851280"
  },
  {
    "text": "pointer so let's put a shared pointer in there okay but at the start of this talk",
    "start": "2851280",
    "end": "2857680"
  },
  {
    "text": "I told you about how evil shared pointers were so let's fix that it's a shared pointer to a",
    "start": "2857680",
    "end": "2865480"
  },
  {
    "text": "const no place in this piece of code do we actually modify this object",
    "start": "2865480",
    "end": "2873480"
  },
  {
    "text": "the internals of it right and an observation is that for",
    "start": "2873480",
    "end": "2880079"
  },
  {
    "text": "polymorphic use cases of objects having mutable objects is the extreme extreme",
    "start": "2880079",
    "end": "2886000"
  },
  {
    "text": "exception where there is benefit for that and there's a good reason why",
    "start": "2886000",
    "end": "2891720"
  },
  {
    "text": "so if I have a virtual function that's mutating my object okay then what I am",
    "start": "2891720",
    "end": "2901440"
  },
  {
    "text": "doing one of two things I'm either saying that my",
    "start": "2901440",
    "end": "2908480"
  },
  {
    "text": "subclasses can provide a different implementation okay which that's very",
    "start": "2908480",
    "end": "2914480"
  },
  {
    "text": "problematic because that's going to change the performance guarantees of those of that operation and potentially",
    "start": "2914480",
    "end": "2920640"
  },
  {
    "text": "a bunch of other operations on my object or I'm saying that my subclasses",
    "start": "2920640",
    "end": "2927760"
  },
  {
    "text": "want to observe when this thing is set but they're not actually mutating it so rather than let having them override my",
    "start": "2927760",
    "end": "2936040"
  },
  {
    "text": "my mutating virtual functions what I should do is provide an observer",
    "start": "2936040",
    "end": "2941440"
  },
  {
    "text": "function where I will call them when I have changed things",
    "start": "2941440",
    "end": "2948160"
  },
  {
    "text": "okay so what we're going to do is make shared",
    "start": "2948720",
    "end": "2956280"
  },
  {
    "text": "like that and now we got rid of all of our",
    "start": "2956280",
    "end": "2964160"
  },
  {
    "text": "copies okay and the code still works and the code still has value",
    "start": "2964160",
    "end": "2970760"
  },
  {
    "text": "semantics okay there a side benefit here if I wanted to come along and say in the",
    "start": "2975559",
    "end": "2981319"
  },
  {
    "text": "middle of some transaction the user hits command s and I save this document I can just peel off a copy of",
    "start": "2981319",
    "end": "2988920"
  },
  {
    "text": "my document right I've got document there in my async Lambda bound to my",
    "start": "2988920",
    "end": "2994359"
  },
  {
    "text": "current H let just make a copy of this document so I can peel off a copy of this document throw it into a thread and",
    "start": "2994359",
    "end": "3000760"
  },
  {
    "text": "draw it from the thread right and if you saw I had to",
    "start": "3000760",
    "end": "3007520"
  },
  {
    "text": "sleep for 3 seconds there that's just so it didn't come over and that's what this would print okay which is the state of",
    "start": "3007520",
    "end": "3013280"
  },
  {
    "text": "the document at the time that I said save it okay there's no race conditions",
    "start": "3013280",
    "end": "3020599"
  },
  {
    "text": "there I'm getting clean so this is thread safe as well okay so compared to inherent space",
    "start": "3020599",
    "end": "3028240"
  },
  {
    "text": "design is more flexible it's non-intrusive it's more",
    "start": "3028240",
    "end": "3033280"
  },
  {
    "text": "efficient the polymorphism is only paid for when needed so which is a huge",
    "start": "3033280",
    "end": "3038400"
  },
  {
    "text": "benefit so I find if you if I look at most class hierarchies people don't know they just like making everything virtual",
    "start": "3038400",
    "end": "3045559"
  },
  {
    "text": "right right right they're like they're like well I needed or I needed this to be",
    "start": "3045559",
    "end": "3051680"
  },
  {
    "text": "virtual in this one case so it's virtual everywhere okay um",
    "start": "3051680",
    "end": "3058559"
  },
  {
    "text": "uh uh it turns out that if you write code this way that you'll find that you",
    "start": "3058559",
    "end": "3065000"
  },
  {
    "text": "need actual polymorphic behavior in just a few set of cases right instead of all",
    "start": "3065000",
    "end": "3070440"
  },
  {
    "text": "over in your code base it's less a prone the clients don't have to worry about Heap allocation they",
    "start": "3070440",
    "end": "3076880"
  },
  {
    "text": "don't have to worry about object lifetimes or ownerships it's exception safe and it's thread",
    "start": "3076880",
    "end": "3083359"
  },
  {
    "text": "safe so we created think about what we did here we cre created a little",
    "start": "3083359",
    "end": "3089119"
  },
  {
    "text": "Library where we have an object type that holds any drawable object where",
    "start": "3089119",
    "end": "3094680"
  },
  {
    "text": "where drawable is defined as has a stream out operator or its own draw function okay a document of",
    "start": "3094680",
    "end": "3103400"
  },
  {
    "text": "those a history state with undo and commit and we did that in less than two",
    "start": "3103400",
    "end": "3110119"
  },
  {
    "text": "slides worth of code okay",
    "start": "3110119",
    "end": "3117599"
  },
  {
    "text": "so as we increasingly move to heavily threaded systems using Futures and reactive programming and task cues value",
    "start": "3117599",
    "end": "3124640"
  },
  {
    "text": "semantics becomes critical to avoid locking and to allow us to reason about code right if you looked in my save I",
    "start": "3124640",
    "end": "3131839"
  },
  {
    "text": "didn't have any MW Texas I didn't have to lock my document just peel off a copy and send it",
    "start": "3131839",
    "end": "3137359"
  },
  {
    "text": "away it's my hope that languages and libraries will evolve to make creating polymorphic types in this format easier",
    "start": "3137359",
    "end": "3145000"
  },
  {
    "text": "uh if you look at like the Lang language go has this built in um uh the language",
    "start": "3145000",
    "end": "3151839"
  },
  {
    "text": "Swift has this built in and I'll take some credit for for influencing Swift uh",
    "start": "3151839",
    "end": "3157440"
  },
  {
    "text": "I gave this talk the first time over a decade ago at",
    "start": "3157440",
    "end": "3163640"
  },
  {
    "text": "uh uh boostcon which was Dave Abrams conference which is now C++",
    "start": "3163640",
    "end": "3169400"
  },
  {
    "text": "now uh it was a keynote there and Dave Abrams is is one of the the key",
    "start": "3169400",
    "end": "3175760"
  },
  {
    "text": "designers on the Swift language and so go watch his talk from WWDC and you'll see it's",
    "start": "3175760",
    "end": "3184839"
  },
  {
    "text": "very much a copy of this talk just cast into Swift right some thanks there uh to Alex",
    "start": "3184839",
    "end": "3192760"
  },
  {
    "text": "stenov Howard hinnen and Dave Abrahams who have all provided input into this a link there to where you'll find",
    "start": "3192760",
    "end": "3199960"
  },
  {
    "text": "my papers and presentations uh talks from this conference the today's version",
    "start": "3199960",
    "end": "3206119"
  },
  {
    "text": "of this talk isn't yet up but it will be before this conference is over and uh I cited uh uh Alex and",
    "start": "3206119",
    "end": "3215240"
  },
  {
    "text": "Paul's book elements of programming a few times in this talk so that's the actual reference for that",
    "start": "3215240",
    "end": "3221480"
  },
  {
    "text": "book so it's a good book a difficult read if you haven't read it",
    "start": "3221480",
    "end": "3227599"
  },
  {
    "text": "before so any",
    "start": "3227720",
    "end": "3231240"
  },
  {
    "text": "questions what's that",
    "start": "3233520",
    "end": "3237760"
  },
  {
    "text": "what are the drawbacks to this approach uh so",
    "start": "3238559",
    "end": "3244200"
  },
  {
    "text": "the uh yeah uh so the drawbacks it's a little difficult uh with this approach",
    "start": "3244200",
    "end": "3251880"
  },
  {
    "text": "if you uh uh uh have the equivalent of of",
    "start": "3251880",
    "end": "3259000"
  },
  {
    "text": "uh multi- inheritance where you have a polymorphic use case where you want to handle things that are kind of of a",
    "start": "3259000",
    "end": "3265319"
  },
  {
    "text": "variant they either satisfy concept A or concept b um uh it can be difficult to encode",
    "start": "3265319",
    "end": "3271960"
  },
  {
    "text": "things this way uh there are some ways around it but they tend to get so ver boast that I usually say if you are",
    "start": "3271960",
    "end": "3278040"
  },
  {
    "text": "really in that situation probably multiple inheritance is is the way to go",
    "start": "3278040",
    "end": "3283559"
  },
  {
    "text": "um another drawback uh uh because this is not intrusive also means that it's not",
    "start": "3283559",
    "end": "3290160"
  },
  {
    "text": "self-documenting right so when I have my class type that doesn't inherit from",
    "start": "3290160",
    "end": "3298240"
  },
  {
    "text": "anything but yet in order to use it correctly it has to satisfy the requirements of",
    "start": "3298240",
    "end": "3303960"
  },
  {
    "text": "drawable right so it's just got this Standalone draw function um uh there's",
    "start": "3303960",
    "end": "3309280"
  },
  {
    "text": "nothing in the code that tells you hey the reason why that function is there is so that this can",
    "start": "3309280",
    "end": "3314839"
  },
  {
    "text": "interoperate in this other place right so there's a there's a proon there",
    "start": "3314839",
    "end": "3321039"
  },
  {
    "text": "um uh the plus side is I can just lift up my drawable object and drop it into",
    "start": "3321039",
    "end": "3326319"
  },
  {
    "text": "into another system that has different polymorphic requirements and I don't have to carry some whole class hierarchy",
    "start": "3326319",
    "end": "3332559"
  },
  {
    "text": "along with it that's just extra baggage it's tradeoff",
    "start": "3332559",
    "end": "3338370"
  },
  {
    "text": "[Music] um uh other than that I don't don't",
    "start": "3338370",
    "end": "3344000"
  },
  {
    "text": "don't really know of any so other than it can be a little verbose to type like I said I'd like to see a little more",
    "start": "3344000",
    "end": "3350559"
  },
  {
    "text": "reflection in the language to get rid of the boiler plate",
    "start": "3350559",
    "end": "3355520"
  },
  {
    "text": "yeah",
    "start": "3361359",
    "end": "3364359"
  },
  {
    "text": "yeah will it conflict uh so the question there is I have my draw if a library",
    "start": "3368480",
    "end": "3374599"
  },
  {
    "text": "implements their own draw will it conflict um uh uh potentially this is",
    "start": "3374599",
    "end": "3380039"
  },
  {
    "text": "one of the downsides of of using ADL for for name lookup uh which is argument",
    "start": "3380039",
    "end": "3386000"
  },
  {
    "text": "depend lookup um uh uh which we want to use in this",
    "start": "3386000",
    "end": "3391839"
  },
  {
    "text": "case because we want to call draw and pick up the draw that they Implement uh so the idea there is is choose your",
    "start": "3391839",
    "end": "3400079"
  },
  {
    "text": "names carefully um uh and know that they're hook point and sometimes that might mean",
    "start": "3400079",
    "end": "3406760"
  },
  {
    "text": "manually uh uh prefixing your names like you know my class underscore draw",
    "start": "3406760",
    "end": "3413839"
  },
  {
    "text": "whatever or or my library underscore draw uh so that you're clear that I mean draw",
    "start": "3413839",
    "end": "3419520"
  },
  {
    "text": "with the semantics if it's a common name that's probably a good thing to",
    "start": "3419520",
    "end": "3425078"
  },
  {
    "text": "do so so that leads into a whole discussion of why I think you know ADL",
    "start": "3425200",
    "end": "3430280"
  },
  {
    "text": "was the wrong solution to the problem it tries to solve and and a different",
    "start": "3430280",
    "end": "3437599"
  },
  {
    "text": "thing any other questions any questions outside the talk",
    "start": "3437599",
    "end": "3447558"
  },
  {
    "text": "okay thanks hear the rest of the conference",
    "start": "3449160",
    "end": "3454559"
  }
]