[
  {
    "start": "0",
    "end": "184000"
  },
  {
    "text": "my name is Bob Curley and we're gonna cover and quite a bit this morning so",
    "start": "5730",
    "end": "11290"
  },
  {
    "text": "first off how many people are using graph QL in production in the room few",
    "start": "11290",
    "end": "18100"
  },
  {
    "text": "hands cool maybe other people who just had a play nice what we'll do for the",
    "start": "18100",
    "end": "23980"
  },
  {
    "text": "first 15 or 20 minutes of this talk is just get a rough grounding in the basis of graph QL from there what we're gonna",
    "start": "23980",
    "end": "30790"
  },
  {
    "text": "do is move beyond request response type architectures then move to push based so",
    "start": "30790",
    "end": "36250"
  },
  {
    "text": "how do we get real-time data interactions with the server and the client what we're going to do there is a",
    "start": "36250",
    "end": "42399"
  },
  {
    "text": "video Tale of Two Cities we're gonna see what it actually takes to do that on the server side and then on the client as",
    "start": "42399",
    "end": "48820"
  },
  {
    "text": "well and finally with a lot of these data intensive systems it's how do we actually tune them how do we make them",
    "start": "48820",
    "end": "55059"
  },
  {
    "text": "performance so we'll then look at a number of tips and tricks to actually get the most out of these when you go to",
    "start": "55059",
    "end": "60129"
  },
  {
    "text": "implement them as well so a little bit about myself my name is Rob Crowley I am a principal",
    "start": "60129",
    "end": "65408"
  },
  {
    "text": "consultant at ratify previous to that I was the tech lead for api's and",
    "start": "65409",
    "end": "70810"
  },
  {
    "text": "authentication of Bank West for a number of years so the best amount of my experience is our distributed systems",
    "start": "70810",
    "end": "76240"
  },
  {
    "text": "design and architecture and to be honest I'm a bit of an architecture tragic",
    "start": "76240",
    "end": "81280"
  },
  {
    "text": "I'm also the co-organizers of DD deep earth which is Western Australia's",
    "start": "81280",
    "end": "86500"
  },
  {
    "text": "largest IT conference and I'm also available on the socials on the right",
    "start": "86500",
    "end": "92280"
  },
  {
    "text": "confession I absolutely love graph QL but I also love arrests so this isn't",
    "start": "92280",
    "end": "99700"
  },
  {
    "text": "gonna be a talk where I'm bagging out rest we're gonna try to be quite objective and as we come across certain",
    "start": "99700",
    "end": "104770"
  },
  {
    "text": "scenarios we're actually going to highlight well maybe some things are actually easier in a rest-based",
    "start": "104770",
    "end": "109990"
  },
  {
    "text": "architecture and that's some of the things that we have to apply to graphically well to get the same sort of characteristics so also love arrest and",
    "start": "109990",
    "end": "117159"
  },
  {
    "text": "I'm absolutely fine with that so when we build api's today what we're really",
    "start": "117159",
    "end": "123460"
  },
  {
    "text": "building is products for other developers so developers being our consumers and developing api's today is",
    "start": "123460",
    "end": "131470"
  },
  {
    "text": "what a complicated landscape with many different types of clients that interact with our data we've got voice which is",
    "start": "131470",
    "end": "138280"
  },
  {
    "text": "just emerging od interfaces we have 1d interfaces with chat and text with traditional 2d",
    "start": "138280",
    "end": "145460"
  },
  {
    "text": "interfaces what web and we also have emerging a or and v-- or hololens apps as well and each one of these clients",
    "start": "145460",
    "end": "151840"
  },
  {
    "text": "demands very different amounts of data from our systems there are different types of the different manners so the",
    "start": "151840",
    "end": "158780"
  },
  {
    "text": "challenge process of building a compelling API experience today is far more complicated than even a couple of",
    "start": "158780",
    "end": "164480"
  },
  {
    "text": "years ago and so the question arises how can we efficiently send the data that",
    "start": "164480",
    "end": "171500"
  },
  {
    "text": "each one of these clients needs so do we have single purpose endpoints like what",
    "start": "171500",
    "end": "177650"
  },
  {
    "text": "we might do in rest and just every client gets the same data but that could be incredibly wasteful so what we can do",
    "start": "177650",
    "end": "185090"
  },
  {
    "start": "184000",
    "end": "184000"
  },
  {
    "text": "from there is we're always trading off so do we send too much data to the client well that's wasteful again or do we send",
    "start": "185090",
    "end": "192860"
  },
  {
    "text": "too little and then force them to make repeated calls so typically like a hyper media driven flow with the REST API",
    "start": "192860",
    "end": "198380"
  },
  {
    "text": "that's an example of under fetching but what we really want to do is not just",
    "start": "198380",
    "end": "203720"
  },
  {
    "text": "efficiently send the data to the client we want to send exactly the data that",
    "start": "203720",
    "end": "209780"
  },
  {
    "text": "each client needs in one round-trip to the server that's what success looks",
    "start": "209780",
    "end": "216110"
  },
  {
    "text": "like in this and what we're gonna do is we're gonna take a quick look at graph QL in action though and I don't think",
    "start": "216110",
    "end": "222620"
  },
  {
    "text": "there's any better way to can I get an understanding of how it hangs together than just test that issuing you a few",
    "start": "222620",
    "end": "228800"
  },
  {
    "text": "queries to it so what I've just opened up here is graphical playground so if",
    "start": "228800",
    "end": "234709"
  },
  {
    "text": "anyone's played with graphical it's a very similar idea so this is just an updated version from prism which has",
    "start": "234709",
    "end": "241400"
  },
  {
    "text": "support for some of the real-time capabilities which we'll look at as well so you can really think of this as an",
    "start": "241400",
    "end": "247130"
  },
  {
    "text": "IDE for graph QL where you could start composing queries so what we're going to start from the left hand side is a very",
    "start": "247130",
    "end": "253550"
  },
  {
    "text": "very simple query where we're just gonna return a little bit of data about a film",
    "start": "253550",
    "end": "260660"
  },
  {
    "text": "and and our domain today is pretty typical so we're gonna have films we've got have actors and actors that appear",
    "start": "260660",
    "end": "268130"
  },
  {
    "text": "in certain films as well but what we've just got to say I'm requesting a film with the idea of to the title and the description and",
    "start": "268130",
    "end": "276520"
  },
  {
    "text": "that's pretty damn basic right now but you can you can already see sobbing they're sort of flavor for it so in",
    "start": "276520",
    "end": "282699"
  },
  {
    "text": "graph QL what we have with denotes between these curly brackets is called a selection set and then each one of the",
    "start": "282699",
    "end": "288939"
  },
  {
    "text": "Isis within it I called a field and you'll also see that the shape of the data which I get on the right hand side",
    "start": "288939",
    "end": "294789"
  },
  {
    "text": "mirrors that of the query on the left and of course you're in the room thinking I could just do that with a",
    "start": "294789",
    "end": "300939"
  },
  {
    "text": "RESTful API already so let's keep digging so right now we're then gonna say okay well let me look at the cast",
    "start": "300939",
    "end": "308469"
  },
  {
    "text": "for today so I want to see a little bit more about the actors that have appeared in this movie and from here we can say",
    "start": "308469",
    "end": "316479"
  },
  {
    "text": "okay for this particular actor get me the actor's name so right now I could still see in one query I can get not",
    "start": "316479",
    "end": "323139"
  },
  {
    "text": "only top level details about the film but I could start getting a list of all the actors within that and likewise I",
    "start": "323139",
    "end": "329830"
  },
  {
    "text": "might say from there is I'd actually like to know what Paris that actor played so again I can just go in and",
    "start": "329830",
    "end": "337599"
  },
  {
    "text": "just arbitrarily build up these queries on the left but as I go through as well I might then say well for each one of",
    "start": "337599",
    "end": "345639"
  },
  {
    "text": "these actors maybe I want to get all of the movies that they entered appear did",
    "start": "345639",
    "end": "352919"
  },
  {
    "text": "so in this case now I've just arbitrarily built that so now I'm having not only the film details but for each",
    "start": "359889",
    "end": "366740"
  },
  {
    "text": "one of the actors that appeared as that the role they were cast at and any other films that they were casted or period as",
    "start": "366740",
    "end": "375229"
  },
  {
    "text": "well so what you could see is we have a complete inversion of responsibilities",
    "start": "375229",
    "end": "381590"
  },
  {
    "text": "here with a RESTful API we declare inputs that define how our consumers",
    "start": "381590",
    "end": "386630"
  },
  {
    "text": "interact with our api's with graph QL all of that power goes to the client so",
    "start": "386630",
    "end": "391669"
  },
  {
    "text": "that that super defines the shape of the data that it requires and then the server infers that and then queries that",
    "start": "391669",
    "end": "398660"
  },
  {
    "text": "data but you'll also see as I go through that graphical or playground seems to",
    "start": "398660",
    "end": "406400"
  },
  {
    "text": "know what a valid field is so I'm not just typing in randomly this does this",
    "start": "406400",
    "end": "412280"
  },
  {
    "text": "type-ahead so some people in the room there are probably starting to think there's some sort of schema involved",
    "start": "412280",
    "end": "418880"
  },
  {
    "text": "here it's defied strongly typed and you're absolutely right that's the fundamental or one of the fundamental",
    "start": "418880",
    "end": "424220"
  },
  {
    "text": "building blocks of graph QL and likewise what we could do from here is we can",
    "start": "424220",
    "end": "430970"
  },
  {
    "text": "actually do a little bit more complex queries as well so in this particular case we here's an example of alva search",
    "start": "430970",
    "end": "437570"
  },
  {
    "text": "web I'm not just looking for one particular type I'm actually then saying",
    "start": "437570",
    "end": "443060"
  },
  {
    "text": "if it's a fill return this sort of data if it's a John return this type of data",
    "start": "443060",
    "end": "450169"
  },
  {
    "text": "so again we're using this concept here denoted by the three dots looks quite",
    "start": "450169",
    "end": "457370"
  },
  {
    "text": "like a spread in JavaScript it's exactly the same concept but what we're going to do here is when we execute this query",
    "start": "457370",
    "end": "462700"
  },
  {
    "text": "we're then seeing that I get different return sets based on each one of the",
    "start": "462700",
    "end": "469430"
  },
  {
    "text": "components on the right so this is using a feature called unions in graph QL it's",
    "start": "469430",
    "end": "475099"
  },
  {
    "text": "not vital to get that concept but what you can what you can start seeing up now is this is an incredibly rich and",
    "start": "475099",
    "end": "481070"
  },
  {
    "text": "powerful query language that you can start doing really amazing things to pull out",
    "start": "481070",
    "end": "486430"
  },
  {
    "text": "bits of data for each client experience",
    "start": "486430",
    "end": "490350"
  },
  {
    "text": "so there is a schema the fundamental building block of a graph QL API are its",
    "start": "491760",
    "end": "498640"
  },
  {
    "text": "types and this is an example type remote domain and this is defined in a notation",
    "start": "498640",
    "end": "504640"
  },
  {
    "text": "called SDL or schema definition language and what you can see from here is that there's again a number of properties on",
    "start": "504640",
    "end": "512409"
  },
  {
    "text": "it there's an ID and it has type ID so I paid identifier typically rendered as string and it has an exclamation mark on",
    "start": "512410",
    "end": "520270"
  },
  {
    "text": "the right hand side that basically means it's required or not inaudible such that",
    "start": "520270",
    "end": "525460"
  },
  {
    "text": "if the client requests this field it will either be guaranteed to have a value or the server will throw an error",
    "start": "525460",
    "end": "532420"
  },
  {
    "text": "so you can make an assumption that as parent of the contract you will always get a value or an error the next field",
    "start": "532420",
    "end": "538330"
  },
  {
    "text": "down its type string so that's another primitive in graph QL there's also floats boolean x' a number of others you",
    "start": "538330",
    "end": "544060"
  },
  {
    "text": "can also create your own scalar types if you wanted as well so you might have an example of a date you might want to",
    "start": "544060",
    "end": "551050"
  },
  {
    "text": "represent that as an ISO 8601 date so absolutely you can take that string and then apply those formatting rules to it",
    "start": "551050",
    "end": "557440"
  },
  {
    "text": "a little bit more interesting as this is this appeared in so the square brackets",
    "start": "557440",
    "end": "562690"
  },
  {
    "text": "denote a collection but this is another custom object within our schema or a domain so what you can now see is this",
    "start": "562690",
    "end": "569410"
  },
  {
    "text": "is how we actually linked our types together so once I couldn't navigate in the query I could go from this the film",
    "start": "569410",
    "end": "576070"
  },
  {
    "text": "and then go down to the actors this is how we define it in our schema and then",
    "start": "576070",
    "end": "581440"
  },
  {
    "text": "again network that's just an example of another custom object with it there but again it doesn't have an exclamation",
    "start": "581440",
    "end": "588520"
  },
  {
    "text": "mark on the right hand side so the client may get a value or may get a dull and the convention in graph key well if",
    "start": "588520",
    "end": "594730"
  },
  {
    "text": "you are they don't have permission to see a field of there's not a value you will get a dull and then it gets each",
    "start": "594730",
    "end": "600760"
  },
  {
    "text": "one of these fields we then associate an arbitrary piece of code called a resolver so up at the the root level of",
    "start": "600760",
    "end": "608290"
  },
  {
    "text": "the query which we would have seen in the example before we have this piece of code and it's gonna take in a number of",
    "start": "608290",
    "end": "614830"
  },
  {
    "text": "parameters in this case there's a root value there's any arguments that",
    "start": "614830",
    "end": "620010"
  },
  {
    "text": "get passed into it there's context objects so anything you want to associate it with the pipeline",
    "start": "620010",
    "end": "625590"
  },
  {
    "text": "of that request and then there's also a fourth argument which we'll cover a little bit later for some other scenarios as well but all we're doing",
    "start": "625590",
    "end": "632670"
  },
  {
    "text": "here is graph QL is absolutely agnostic of the data source I don't want to move",
    "start": "632670",
    "end": "641450"
  },
  {
    "text": "so what we can do here is it could be a database it could be another another",
    "start": "641450",
    "end": "648450"
  },
  {
    "text": "service it could be an mq p topic it could be anything graph QL does not care and then against",
    "start": "648450",
    "end": "655470"
  },
  {
    "text": "each field on those types we then associate another resolver so in this particular case we're gonna say the",
    "start": "655470",
    "end": "661140"
  },
  {
    "text": "title field on the film object basically it's gonna take a film object in and",
    "start": "661140",
    "end": "666150"
  },
  {
    "text": "it's just gonna extract that title field and then pass it back so what we're",
    "start": "666150",
    "end": "671790"
  },
  {
    "start": "671000",
    "end": "671000"
  },
  {
    "text": "gonna look at now I know its first thing on a Friday so I do apologize but we're going to cover the absolute minimum we",
    "start": "671790",
    "end": "677130"
  },
  {
    "text": "need to know to have to land in a vocabulary that's suitable for kind of discussing some of the concepts in graph",
    "start": "677130",
    "end": "682770"
  },
  {
    "text": "QL so first of all we have this concept of a tree and the egalité among you might say this really represents the",
    "start": "682770",
    "end": "689220"
  },
  {
    "text": "query that we had on the left-hand side so you can really think of a query as a",
    "start": "689220",
    "end": "694770"
  },
  {
    "text": "tree structure where each of the nodes in the field will either resolve to another type or be a leaf node and",
    "start": "694770",
    "end": "701880"
  },
  {
    "text": "respond to a primitive data type and we know the query is complete what each one of the leaf nodes are pointing at a",
    "start": "701880",
    "end": "707640"
  },
  {
    "text": "basic field for instance like title in film and what that query is then",
    "start": "707640",
    "end": "714210"
  },
  {
    "text": "projects onto the a portion of object",
    "start": "714210",
    "end": "719910"
  },
  {
    "text": "graph so we really think to engraft you well to move away from thinking in terms of like relations that we would in a",
    "start": "719910",
    "end": "726270"
  },
  {
    "text": "database but rather project a viewer data as a set of interrelated nodes or graph and what we could actually see",
    "start": "726270",
    "end": "733680"
  },
  {
    "text": "from here in this example is we have a couple of types of objects we have films",
    "start": "733680",
    "end": "739440"
  },
  {
    "text": "of actors and for any item that appears within a graph this is referred to as a",
    "start": "739440",
    "end": "745380"
  },
  {
    "text": "node and then the relationship between two nodes is called an edge and you",
    "start": "745380",
    "end": "751610"
  },
  {
    "text": "might have seen in the queries that I was typing it had edges and nodes in there and that's where the language came",
    "start": "751610",
    "end": "757640"
  },
  {
    "text": "from and I'll explain why we model our schemas like that in a moment and then for each one of the edges between them",
    "start": "757640",
    "end": "763640"
  },
  {
    "text": "we can then associate particular information so in this case we can see each one of the films is connected by a",
    "start": "763640",
    "end": "769700"
  },
  {
    "text": "franchise relation and again if you've been playing with graph QL for some time you might have also heard the word",
    "start": "769700",
    "end": "775570"
  },
  {
    "text": "connection and a connection is a group of edges related to a certain piece of",
    "start": "775570",
    "end": "785000"
  },
  {
    "text": "metadata so for instance for a film franchise connection for this film would return all of these edges to its",
    "start": "785000",
    "end": "791870"
  },
  {
    "text": "connected neighbors okay so let's see",
    "start": "791870",
    "end": "797510"
  },
  {
    "text": "how that I will actually work in practice so once graph QL receives a query from the client how do we actually",
    "start": "797510",
    "end": "804380"
  },
  {
    "text": "start processing it on the server so first off we will have a query resolver",
    "start": "804380",
    "end": "809390"
  },
  {
    "text": "so this will take the ID of two and it will then execute any arbitrary piece of code that we define to return that",
    "start": "809390",
    "end": "816410"
  },
  {
    "text": "object what it's then gonna do is it's gonna pass the result of that off to the",
    "start": "816410",
    "end": "823850"
  },
  {
    "text": "resolvers on the film object so the query we'll know how to return or how to",
    "start": "823850",
    "end": "829310"
  },
  {
    "text": "retrieve a film from the underlying data store but not how to format it back to",
    "start": "829310",
    "end": "835280"
  },
  {
    "text": "the client so what then does is it calls another resolver and this was over will then return title but then also",
    "start": "835280",
    "end": "841970"
  },
  {
    "text": "characters and again that resolver would then return the characters for that associated with their film but again it",
    "start": "841970",
    "end": "848630"
  },
  {
    "text": "doesn't know how to retrieve names and actors so again that resolver will call the resolver Zod the characters object I",
    "start": "848630",
    "end": "855890"
  },
  {
    "text": "returned name and actors absolutely the same when it comes down to the actors",
    "start": "855890",
    "end": "862010"
  },
  {
    "text": "object which will then return the name property at at this point we have traversed down to the last leaf node in",
    "start": "862010",
    "end": "867560"
  },
  {
    "text": "our query such that we know we are completed with a package of the responses send it to the server so what",
    "start": "867560",
    "end": "873530"
  },
  {
    "text": "I hope you can see though is that there's absolutely no magic with graph QL at all even though it's incredibly",
    "start": "873530",
    "end": "879350"
  },
  {
    "text": "powerful and flexible for the client it actually gets executed in quite a simple manner on the server so",
    "start": "879350",
    "end": "887420"
  },
  {
    "text": "wrapping up that gradual query language for your API it allows us to craft",
    "start": "887420",
    "end": "893210"
  },
  {
    "text": "strongly typed queries so we actually know a compile-time whether a query is valid or not so you won't have any",
    "start": "893210",
    "end": "899480"
  },
  {
    "text": "mismatches at runtime the massively powerful thing with it particularly have",
    "start": "899480",
    "end": "906350"
  },
  {
    "text": "to support multiple clients with very different data needs is that it facilitates retrieving exactly the data",
    "start": "906350",
    "end": "912230"
  },
  {
    "text": "you require and it also has powerful features such as introspection so you can actually query the schema itself to",
    "start": "912230",
    "end": "920210"
  },
  {
    "text": "see what a valid type is and we've already seen an example of that with in graphical / playground where we could",
    "start": "920210",
    "end": "927470"
  },
  {
    "text": "actually retrieve the valid fields for a type so this is incredible as well because it opens up a whole host of",
    "start": "927470",
    "end": "933620"
  },
  {
    "text": "possibilities around well if you already know the shape of your query why can't you co generate a view model for that as",
    "start": "933620",
    "end": "939680"
  },
  {
    "text": "well so there's a lot of really powerful things so on the whole I do think it's pretty cool but request/response only",
    "start": "939680",
    "end": "949190"
  },
  {
    "text": "gets us so far so why do we need real-time in a lot of our applications",
    "start": "949190",
    "end": "958250"
  },
  {
    "start": "955000",
    "end": "955000"
  },
  {
    "text": "we simply send a request wait for the response but think about what we do",
    "start": "958250",
    "end": "964700"
  },
  {
    "text": "today we have a whole bunch of real world examples as well so we have 1d",
    "start": "964700",
    "end": "970700"
  },
  {
    "text": "interfaces so chat BOTS as well that's inherently bi-directional we want to send data but we also retrieve data we",
    "start": "970700",
    "end": "976430"
  },
  {
    "text": "wanted to feel live we want us build snappy we want to have push",
    "start": "976430",
    "end": "981830"
  },
  {
    "start": "979000",
    "end": "979000"
  },
  {
    "text": "notifications and a whole bunch of other dynamic data coming through so really a lot of the experiences that we build",
    "start": "981830",
    "end": "987980"
  },
  {
    "text": "today our customers already expect real-time interactions with the server and we need to catch up with how we're",
    "start": "987980",
    "end": "994790"
  },
  {
    "text": "building our API so typically we might have done that through signal or before or another approach and again in the",
    "start": "994790",
    "end": "1002440"
  },
  {
    "start": "1002000",
    "end": "1002000"
  },
  {
    "text": "banking scenario so I'm with comm Bank so whenever my pay goes into my account",
    "start": "1002440",
    "end": "1008590"
  },
  {
    "text": "this is wonderful push notification to say I'm now rich again comparatively and I can go",
    "start": "1008590",
    "end": "1013610"
  },
  {
    "text": "that's absolutely amazing so again I don't have to request that data it's just again that value add that the",
    "start": "1013610",
    "end": "1020190"
  },
  {
    "text": "servic and then say here's this information that's valid so again if you have other examples like stock market",
    "start": "1020190",
    "end": "1025380"
  },
  {
    "text": "trackers as well you don't got to have a certain example there where you know you query at the page is stale again any",
    "start": "1025380",
    "end": "1031800"
  },
  {
    "text": "updates you have a push back to the client so what options or approaches do",
    "start": "1031800",
    "end": "1037530"
  },
  {
    "text": "we have for supporting real-time experiences in graph QL well a pretty",
    "start": "1037530",
    "end": "1044520"
  },
  {
    "text": "much mainstay to date across any of these experiences is polling simply we",
    "start": "1044520",
    "end": "1050070"
  },
  {
    "text": "will just have the client asset intervals ask the server the same question as the server the same question",
    "start": "1050070",
    "end": "1055790"
  },
  {
    "text": "and this is actually not a bad approach in a couple of circumstances so if the",
    "start": "1055790",
    "end": "1060990"
  },
  {
    "text": "data refresh trace is known in so far as an example from a banking domain the",
    "start": "1060990",
    "end": "1066720"
  },
  {
    "text": "product rates will get updated once per day so that's absolutely fine literally from there call it once per day call it",
    "start": "1066720",
    "end": "1073680"
  },
  {
    "text": "the same time tomorrow that's absolutely fine if that cadence was then once every hour that's still fine because it's",
    "start": "1073680",
    "end": "1078990"
  },
  {
    "text": "known if you don't know what the update rate is non-deterministic then you have",
    "start": "1078990",
    "end": "1084300"
  },
  {
    "text": "to balance freshness with chattiness so are you willing for the data to be a little bit stale or do you risk sending",
    "start": "1084300",
    "end": "1091590"
  },
  {
    "text": "quite a lot of traffic across the network another approach that's been talked",
    "start": "1091590",
    "end": "1097920"
  },
  {
    "start": "1096000",
    "end": "1096000"
  },
  {
    "text": "about quite a bit in the graphical space is that of live queries so a live query",
    "start": "1097920",
    "end": "1104340"
  },
  {
    "text": "you can really think of it as infinitely fast polling from the client so you would send a query to the server and if",
    "start": "1104340",
    "end": "1111270"
  },
  {
    "text": "anything happens to any of the fields that you requested you just want to get an updated version and what we could do",
    "start": "1111270",
    "end": "1119940"
  },
  {
    "text": "for that is the clients can denote that they want a live query by putting on this declarative marker on the right",
    "start": "1119940",
    "end": "1127020"
  },
  {
    "text": "hand side but what it sounds like a very attractive option it's awesome for",
    "start": "1127020",
    "end": "1135840"
  },
  {
    "text": "consumers so basically from there you just anything changes send the data back to us it is absolutely a nightmare for",
    "start": "1135840",
    "end": "1143550"
  },
  {
    "text": "the provider side though to try to scale this build-it effectively any of the resolvers change trying to identify that",
    "start": "1143550",
    "end": "1150490"
  },
  {
    "text": "particular scenarios and push data back to the client so there's really only a few companies that I'm aware of who have",
    "start": "1150490",
    "end": "1156550"
  },
  {
    "text": "actually now built live queries for Facebook was obviously one and a number of others as well but this is a not",
    "start": "1156550",
    "end": "1162460"
  },
  {
    "text": "actually part of the formal spec as yet you don't got a lot of support for this out of the box so over the last year the",
    "start": "1162460",
    "end": "1168190"
  },
  {
    "text": "community has mainly landed on a different approach and that's called subscriptions so subscriptions are based",
    "start": "1168190",
    "end": "1175990"
  },
  {
    "start": "1171000",
    "end": "1171000"
  },
  {
    "text": "on events so whereas with request/response so in a query like we",
    "start": "1175990",
    "end": "1181240"
  },
  {
    "text": "saw earlier there was one query and you get one response what we're doing with a subscription is registering our interest",
    "start": "1181240",
    "end": "1190870"
  },
  {
    "text": "in zero or more occurrences of some event at some point in the future so we",
    "start": "1190870",
    "end": "1199480"
  },
  {
    "text": "don't get a response back instantly but we will get it back potentially at some point in the future so to be clear these",
    "start": "1199480",
    "end": "1206590"
  },
  {
    "text": "are really powerful they're not a replacement for queries but as you'll see when used appropriately they can",
    "start": "1206590",
    "end": "1212140"
  },
  {
    "text": "really give that liveness to the interactions with our users but there's actually quite a bit of plumbing that",
    "start": "1212140",
    "end": "1218650"
  },
  {
    "text": "needs to go into supporting these so on the left hand side we would have the typical pipeline we would have four",
    "start": "1218650",
    "end": "1224520"
  },
  {
    "text": "mutations and queries so request comes in it will then go down to your graph QL",
    "start": "1224520",
    "end": "1231130"
  },
  {
    "text": "server which will then delegate through its resolvers down to a business domain so that can either run in process or",
    "start": "1231130",
    "end": "1238030"
  },
  {
    "text": "cross process graph QL doesn't care but of course now if we're going to have",
    "start": "1238030",
    "end": "1243150"
  },
  {
    "text": "persistent connections with the client we have to introduce Stace and typically in graph QL this is done",
    "start": "1243150",
    "end": "1250390"
  },
  {
    "text": "through WebSockets so that's the bi-directional transport well we also introduce is this subscription manager",
    "start": "1250390",
    "end": "1257560"
  },
  {
    "text": "that will then hold all of the subscriptions that have been requested by the clients the subscription manager",
    "start": "1257560",
    "end": "1264070"
  },
  {
    "text": "will also interrogate the subscription type on each one of the graph QL schemas",
    "start": "1264070",
    "end": "1269410"
  },
  {
    "text": "and then keep a mapping between the two so all that happen is your business",
    "start": "1269410",
    "end": "1275290"
  },
  {
    "text": "domain can raise an event that might be an example of payment",
    "start": "1275290",
    "end": "1280340"
  },
  {
    "text": "received or any other business development that's your typical in the",
    "start": "1280340",
    "end": "1285620"
  },
  {
    "text": "area what you work and then the subscription manager will listen for an occurrence of that based on that",
    "start": "1285620",
    "end": "1293630"
  },
  {
    "text": "subscription then call in to graph QL to retrieve the requested data and then stream that back to the client so let's",
    "start": "1293630",
    "end": "1300230"
  },
  {
    "text": "look at an example so we might have a user and the user will connect to the subscriptions end point on the graph QL",
    "start": "1300230",
    "end": "1306590"
  },
  {
    "text": "a peon so you'll notice here that this is WS is the protocol so WebSockets of",
    "start": "1306590",
    "end": "1311840"
  },
  {
    "text": "course you can use W SS as well if you just wanted it authenticated in production and that's the stateful",
    "start": "1311840",
    "end": "1316880"
  },
  {
    "text": "connection between the user and the server so what they can then do is subscribe to an advertised event so in",
    "start": "1316880",
    "end": "1326090"
  },
  {
    "text": "this particular case the server exposes a review added subscription and the",
    "start": "1326090",
    "end": "1334130"
  },
  {
    "text": "client then for the structure says when this particular event happens I want to",
    "start": "1334130",
    "end": "1339440"
  },
  {
    "text": "retrieve the review and I before that review I want to retrieve the rating item but I also want to grab the film",
    "start": "1339440",
    "end": "1345740"
  },
  {
    "text": "title as well and then what could happen is another user can come into the system",
    "start": "1345740",
    "end": "1351800"
  },
  {
    "text": "and add that particular review and what will then happen that's the event that's",
    "start": "1351800",
    "end": "1357530"
  },
  {
    "text": "being fired and then you will see that the server will then push that",
    "start": "1357530",
    "end": "1363440"
  },
  {
    "text": "notification directly back to the client the client didn't have to do anything",
    "start": "1363440",
    "end": "1369380"
  },
  {
    "text": "else the data just gets pushed back to it so let's take a quick look at that",
    "start": "1369380",
    "end": "1377590"
  },
  {
    "text": "so again I'm getting type-ahead here so we're going to say review added and in",
    "start": "1382640",
    "end": "1389220"
  },
  {
    "text": "this particular case I'll grab the review and in this particular case again I just want the content of that review",
    "start": "1389220",
    "end": "1395460"
  },
  {
    "text": "and this time when I click play what I'm having is we're at the point now where",
    "start": "1395460",
    "end": "1400530"
  },
  {
    "text": "the WebSocket connection is live between these two servers going back over to",
    "start": "1400530",
    "end": "1407070"
  },
  {
    "text": "adding a review then what we can now see is the first one of those events has",
    "start": "1407070",
    "end": "1414300"
  },
  {
    "text": "been pushed and appears on the stream on the right hand side and you can see down the end that we're still listening so if",
    "start": "1414300",
    "end": "1420060"
  },
  {
    "text": "we were then to create additional reviews that data will keep being pushed as a stream back to the client",
    "start": "1420060",
    "end": "1428120"
  },
  {
    "start": "1432000",
    "end": "1432000"
  },
  {
    "text": "the most powerful thing about graph QL subscriptions is the fact that they",
    "start": "1433530",
    "end": "1438660"
  },
  {
    "text": "provide a consistent interface typically with advanced driven systems you need to",
    "start": "1438660",
    "end": "1444420"
  },
  {
    "text": "comply with the shape of the event itself with graph QL each client can",
    "start": "1444420",
    "end": "1450720"
  },
  {
    "text": "still describe the shape of the data they want to receive when and the currents of that event happens that is",
    "start": "1450720",
    "end": "1460530"
  },
  {
    "text": "incredibly powerful and I have to confess the first time I saw this I was I that's a massive game-changer because",
    "start": "1460530",
    "end": "1467520"
  },
  {
    "text": "what that allows me to do is I can have my initial query to fill up my page with",
    "start": "1467520",
    "end": "1472770"
  },
  {
    "text": "the shape of data that I want and then what I can do is I could then subscribe for updates to that in the same shape",
    "start": "1472770",
    "end": "1479490"
  },
  {
    "text": "such that when that data comes through I can just merge directly on to that page",
    "start": "1479490",
    "end": "1484560"
  },
  {
    "text": "and refresh it I don't have to do any massaging or translation from that",
    "start": "1484560",
    "end": "1490530"
  },
  {
    "text": "domain event back into the view model to display or by client okay so real time",
    "start": "1490530",
    "end": "1499590"
  },
  {
    "text": "graph QL you have a number of options realistically today we're looking at",
    "start": "1499590",
    "end": "1504810"
  },
  {
    "text": "either polling or subscriptions choose polling if you know the rate at which",
    "start": "1504810",
    "end": "1510210"
  },
  {
    "text": "your data will refresh you could avoid a lot of the additional bi-directional plumbing you need to support",
    "start": "1510210",
    "end": "1516060"
  },
  {
    "text": "subscriptions if you do need that live this through events or have a more ad",
    "start": "1516060",
    "end": "1521670"
  },
  {
    "text": "hoc data refresh scenario then subscriptions are massively powerful",
    "start": "1521670",
    "end": "1527030"
  },
  {
    "text": "best thing about them the consistent interface across push and pull it's incredibly powerful graph QL allows you",
    "start": "1527030",
    "end": "1534270"
  },
  {
    "text": "to support both paradigms seamlessly through one standard interface so again if you have any teams at work as well",
    "start": "1534270",
    "end": "1540240"
  },
  {
    "text": "you don't have to support I'll learn another approach for dealing with this so it simplifies the landscape quite a",
    "start": "1540240",
    "end": "1546000"
  },
  {
    "text": "bit and again massively powerful when used appropriately so the first thing I would always look at is can I just make",
    "start": "1546000",
    "end": "1552300"
  },
  {
    "text": "this a query then will poling be suitable for what I need if both of those are no then you start looking at",
    "start": "1552300",
    "end": "1559170"
  },
  {
    "text": "subscriptions okay so so far we've been really looking",
    "start": "1559170",
    "end": "1566109"
  },
  {
    "text": "at graph QL sort of baseline and how we actually look at it on the server and",
    "start": "1566109",
    "end": "1571149"
  },
  {
    "text": "support some of these pieces of behavior what will now look at is a couple of the options that we have for the client-side",
    "start": "1571149",
    "end": "1578590"
  },
  {
    "text": "Peris of this story and again coming",
    "start": "1578590",
    "end": "1583749"
  },
  {
    "text": "back to the fact that api's are really products for other developers we build",
    "start": "1583749",
    "end": "1590139"
  },
  {
    "text": "them and we want to have make sure that the consumption of that is as seamless as possible and there's this rule of",
    "start": "1590139",
    "end": "1596049"
  },
  {
    "text": "threes that I really like about api's and it's the three seconds on the left is a developer should be able to",
    "start": "1596049",
    "end": "1602979"
  },
  {
    "text": "understand the purpose of your API in about three seconds they should be able",
    "start": "1602979",
    "end": "1608619"
  },
  {
    "text": "to gain access to your API within 30 seconds and they should be able to make a call to that API within three minutes",
    "start": "1608619",
    "end": "1614820"
  },
  {
    "text": "that's what you're really looking at as an excellent onboarding experience for your API so if you're working internally",
    "start": "1614820",
    "end": "1621700"
  },
  {
    "text": "at your organization and with internal developers maybe you have a bit of a captive audience but again if you put an",
    "start": "1621700",
    "end": "1626919"
  },
  {
    "text": "api product out there when you're looking for people to consume your service then focusing on the developer",
    "start": "1626919",
    "end": "1632139"
  },
  {
    "text": "experience is absolutely key and developer experience really comprised",
    "start": "1632139",
    "end": "1637299"
  },
  {
    "text": "two main parts first of all you have documentation so again this a test who can actually people understand what the",
    "start": "1637299",
    "end": "1644769"
  },
  {
    "text": "purpose of your API is in that three seconds and graph your has a very powerful story",
    "start": "1644769",
    "end": "1650889"
  },
  {
    "text": "around documentation because you have a fully formed schema you can do really nice documentation on the back of that",
    "start": "1650889",
    "end": "1657330"
  },
  {
    "text": "and you actually get a huge amount of this out of the box as well so if you go to github v4 API which is based on graph",
    "start": "1657330",
    "end": "1664629"
  },
  {
    "text": "QL as well you can actually have the documentation and explore through graphical and playgrounds as well so you",
    "start": "1664629",
    "end": "1671710"
  },
  {
    "text": "get this IDE where you can start interacting with the API very seamlessly and the other part of developer",
    "start": "1671710",
    "end": "1678369"
  },
  {
    "text": "experience is then the SDK so if you're building an API for consumed by other",
    "start": "1678369",
    "end": "1684489"
  },
  {
    "text": "teams you can often know a lot of your time has actually spent on building these system development kits so again",
    "start": "1684489",
    "end": "1690549"
  },
  {
    "text": "if you support clients that use Java you'll have one that the JVM if you have clients that use",
    "start": "1690549",
    "end": "1697190"
  },
  {
    "text": "dotnet again you'll have one from there and maybe many other languages as well by moving to graph QL you'll notice that",
    "start": "1697190",
    "end": "1705250"
  },
  {
    "text": "you get all of this work done for you there's all of these clients available out of the box so again with github x'",
    "start": "1705250",
    "end": "1711770"
  },
  {
    "text": "example with v3 they had client libraries for many many different languages before they don't they don't",
    "start": "1711770",
    "end": "1718309"
  },
  {
    "text": "need to that work is done by working off a standard interface with graph QL there is a huge community around that will",
    "start": "1718309",
    "end": "1725240"
  },
  {
    "text": "build these clients for you so again another massive win of graph QL is most",
    "start": "1725240",
    "end": "1730730"
  },
  {
    "text": "of this equation is solved for you documentation you get a massive head start on and there's graph to L",
    "start": "1730730",
    "end": "1737659"
  },
  {
    "text": "libraries for practically every language out there now so most of you clients",
    "start": "1737659",
    "end": "1744289"
  },
  {
    "text": "that I'll be looking at today based on JavaScript so the reference implementation of graph QL is based on",
    "start": "1744289",
    "end": "1750470"
  },
  {
    "text": "JavaScript as well there are implementations across many different languages as well I'll show you a link",
    "start": "1750470",
    "end": "1755929"
  },
  {
    "text": "on the reference slide at the end which will then point to where you can find what the appropriate implementation is for you",
    "start": "1755929",
    "end": "1761140"
  },
  {
    "text": "but in the JavaScript space literally the simplest client you could possibly imagine is graphical request and this is",
    "start": "1761140",
    "end": "1768710"
  },
  {
    "text": "actually great for scripting and all we do is again imported write our query and",
    "start": "1768710",
    "end": "1776630"
  },
  {
    "text": "then it's a one-liner to send it to the server so if you only need to do really basic calls from a client then start as",
    "start": "1776630",
    "end": "1783890"
  },
  {
    "text": "simply as you can so that's a simple end",
    "start": "1783890",
    "end": "1789880"
  },
  {
    "text": "relay from Facebook is absolutely at the other end of the continuum so relay is",
    "start": "1789880",
    "end": "1795679"
  },
  {
    "start": "1790000",
    "end": "1790000"
  },
  {
    "text": "Facebook's solution for building data-driven applications with graph QL",
    "start": "1795679",
    "end": "1801820"
  },
  {
    "text": "but it is massively complicated so the",
    "start": "1801820",
    "end": "1806840"
  },
  {
    "text": "graphical spec is about this big the relay spec is about this big so my",
    "start": "1806840",
    "end": "1813230"
  },
  {
    "text": "advice really from there is unless performance is absolutely key to your",
    "start": "1813230",
    "end": "1819650"
  },
  {
    "text": "requirements like it's a fundamental differentiator for the apps that you're building I really can see the payoff for",
    "start": "1819650",
    "end": "1827600"
  },
  {
    "text": "relay most teams it has all of this pre compilation phase whereby will then do",
    "start": "1827600",
    "end": "1834200"
  },
  {
    "text": "fragment aggregation as well so it's really about optimizing the network portion which again makes a lot of sense",
    "start": "1834200",
    "end": "1839720"
  },
  {
    "text": "for Facebook with massive geographically dispersed users and huge volumes of data so by all means be aware of it",
    "start": "1839720",
    "end": "1846710"
  },
  {
    "text": "but I would be surprised if that would be your default best choice we do need",
    "start": "1846710",
    "end": "1853460"
  },
  {
    "text": "to be aware of it though so if you're building a public graph QL API decide early on whether you're going",
    "start": "1853460",
    "end": "1860239"
  },
  {
    "text": "to support relay clients because relay is incredibly opinionated and it will force a certain shape on your schema so",
    "start": "1860239",
    "end": "1869149"
  },
  {
    "text": "again any connection to a list of other objects can't be models they're just a",
    "start": "1869149",
    "end": "1875119"
  },
  {
    "text": "simple array you have to build these connection objects and they're actually quite complicated as well so you have to",
    "start": "1875119",
    "end": "1881659"
  },
  {
    "text": "it forces you to model edges and nodes and page information and then explicitly",
    "start": "1881659",
    "end": "1887749"
  },
  {
    "text": "map each edge as well so there's actually quite a lot of overhead or",
    "start": "1887749",
    "end": "1892759"
  },
  {
    "text": "complexity that you need to introduce into your schema but really only wants to do pagination with a cursor based",
    "start": "1892759",
    "end": "1899029"
  },
  {
    "text": "model using connections so therefore you have to support it so the advice is from",
    "start": "1899029",
    "end": "1904669"
  },
  {
    "text": "there if you're building a public graph QL API to be consumed by other people think strongly about supporting relay",
    "start": "1904669",
    "end": "1912220"
  },
  {
    "text": "simply otherwise that Europe making choices or employ choices on your users that they then can't use that library if",
    "start": "1912220",
    "end": "1918980"
  },
  {
    "text": "it's for internal use within your company itself then measure for yourself in the example codes that I've used here",
    "start": "1918980",
    "end": "1926570"
  },
  {
    "text": "I have used connections and I'll share the link for that at the end of the application but then you can see some of the helper methods that you get from",
    "start": "1926570",
    "end": "1932720"
  },
  {
    "text": "graph QL relay as well to help you build some of the connection objects that the backward as well but you'll also see",
    "start": "1932720",
    "end": "1938419"
  },
  {
    "text": "that there's quite a lot of code still to make that work in the gervais with",
    "start": "1938419",
    "end": "1943909"
  },
  {
    "start": "1942000",
    "end": "1942000"
  },
  {
    "text": "space my personal favorite is the Apollo client so again massively feature full",
    "start": "1943909",
    "end": "1950350"
  },
  {
    "text": "great great great feature set really flexible not tied to react it also",
    "start": "1950350",
    "end": "1956989"
  },
  {
    "text": "supports view member Annie a number of public libraries as well",
    "start": "1956989",
    "end": "1962380"
  },
  {
    "text": "it's community driven which I absolutely love so what we can look at now is a",
    "start": "1962380",
    "end": "1968530"
  },
  {
    "text": "quick demo app that actually instead of using playground well actually they and have a simple react app that will allow",
    "start": "1968530",
    "end": "1975130"
  },
  {
    "text": "us to do similar functionalities to the demo that we saw previously okay so",
    "start": "1975130",
    "end": "1986200"
  },
  {
    "text": "first of all I will apologize for the horrendous color choices but there we go is that still clear for everyone at the back cool so the first thing that were",
    "start": "1986200",
    "end": "1993580"
  },
  {
    "text": "actually going to do is we go to login so this is another this is still going",
    "start": "1993580",
    "end": "1998919"
  },
  {
    "text": "to a graph QL API so that's sending a mutation so what I've done here is send",
    "start": "1998919",
    "end": "2004230"
  },
  {
    "text": "that to the to the server and then it's gonna return with an access token that I've stored in session storage and then",
    "start": "2004230",
    "end": "2011610"
  },
  {
    "text": "it allows us to query for again any director's film's actors characters that",
    "start": "2011610",
    "end": "2018510"
  },
  {
    "text": "match that particular scenario so in this case is fraud for the letter A I will be called",
    "start": "2018510",
    "end": "2024450"
  },
  {
    "text": "bridging both so again what a classic so we're getting clicking on this we can now get the list of reviews for this",
    "start": "2024450",
    "end": "2032250"
  },
  {
    "text": "particular movie but what I've done on this page as well is I've also set up a subscription so this is now listening",
    "start": "2032250",
    "end": "2038789"
  },
  {
    "text": "for any new reviews that could add it to this film so I then going back into",
    "start": "2038789",
    "end": "2044039"
  },
  {
    "text": "playground I can do the same thing as I did before and create a new subscription",
    "start": "2044039",
    "end": "2050100"
  },
  {
    "text": "from there and instantly the client has been pushed with an update here but",
    "start": "2050100",
    "end": "2056220"
  },
  {
    "text": "we're also seeing that the data has appeared in this query here so I actually have two subscriptions on this",
    "start": "2056220",
    "end": "2061980"
  },
  {
    "text": "page I have a subscriptions object itself which you can see in the code here which again has a particular query",
    "start": "2061980",
    "end": "2071658"
  },
  {
    "text": "so quite simple so it just says for for anytime but we have this subscription I want to retrieve the review and some",
    "start": "2071659",
    "end": "2078570"
  },
  {
    "text": "data about the movie itself and then going down will see the query component",
    "start": "2078570",
    "end": "2084330"
  },
  {
    "text": "itself so Apollo client or Apollo react with the react specific parent the next",
    "start": "2084330",
    "end": "2091500"
  },
  {
    "text": "number of these components are one for subscriptions one for mutations and one for queries and these follow the render",
    "start": "2091500",
    "end": "2097890"
  },
  {
    "text": "prop pattern so again for each one of these queries we will then have the section of data so in this case I'm",
    "start": "2097890",
    "end": "2103620"
  },
  {
    "text": "getting data and loading as props passed into my method and all I'm doing from there is issuing a div with that data",
    "start": "2103620",
    "end": "2111230"
  },
  {
    "text": "what I'm also saying is I'm Reese absque reiben to future occurrences of that event as well",
    "start": "2111230",
    "end": "2119150"
  },
  {
    "text": "so while I showed you render props there and I don't kill you with code this will all be available afterwards so you can",
    "start": "2125990",
    "end": "2132270"
  },
  {
    "text": "drill through it in your own time and work through these demos as well but you",
    "start": "2132270",
    "end": "2137340"
  },
  {
    "text": "can also use higher-order components if you wanted as well so as with Apollo v1 it shipped with a graph QL hoc so you",
    "start": "2137340",
    "end": "2143880"
  },
  {
    "text": "can absolutely still use that for composing functionality if you choose as well as of release 2.0 they've really",
    "start": "2143880",
    "end": "2151200"
  },
  {
    "text": "been pushing the the red to prop queries mutations and subscription components but again the choice is yours",
    "start": "2151200",
    "end": "2157170"
  },
  {
    "text": "so use both okay so performance so you can obviously",
    "start": "2157170",
    "end": "2165030"
  },
  {
    "text": "imagine if we have a lot of data flying back and forth between our systems we",
    "start": "2165030",
    "end": "2170460"
  },
  {
    "text": "can op we can either build quite chatty or potentially do we have a lot of visibility in those how those are performing in production and also you",
    "start": "2170460",
    "end": "2177119"
  },
  {
    "text": "want to notice how fast is fast enough so one thing that you will also get out-of-the-box with graph QL is with",
    "start": "2177119",
    "end": "2185610"
  },
  {
    "text": "Apollo's with the Apollo server is quite fine tracing along how long each resolver takes to execute such that you",
    "start": "2185610",
    "end": "2192840"
  },
  {
    "text": "can highlight performance bottlenecks within your system as well but one of",
    "start": "2192840",
    "end": "2198000"
  },
  {
    "text": "the got use with this is with one response to the server our response is",
    "start": "2198000",
    "end": "2204869"
  },
  {
    "text": "constrained by the slowest resolver so if I have one piece of data that takes a",
    "start": "2204869",
    "end": "2210540"
  },
  {
    "text": "long time to retrieve the entire response is delayed that doesn't sound",
    "start": "2210540",
    "end": "2217290"
  },
  {
    "start": "2211000",
    "end": "2211000"
  },
  {
    "text": "that great and in fact in in the rest space with the advent of HTTP 2 we can now have",
    "start": "2217290",
    "end": "2222990"
  },
  {
    "text": "streams and server push so what we could still do is have very fine-grained resources but then push all of the",
    "start": "2222990",
    "end": "2228810"
  },
  {
    "text": "related resources with that as well and that we can have different cached volatilities for each one of those",
    "start": "2228810",
    "end": "2234150"
  },
  {
    "text": "resources as well in case appropriately so again we can decouple ourselves from the slowest piece of data so how would",
    "start": "2234150",
    "end": "2240300"
  },
  {
    "text": "we tackle that so Apollo supports in the",
    "start": "2240300",
    "end": "2245609"
  },
  {
    "start": "2242000",
    "end": "2242000"
  },
  {
    "text": "alpha release know I'm a deferred directive so similar that we saw the live directive before for live queries",
    "start": "2245609",
    "end": "2251550"
  },
  {
    "text": "this this deferred directive allows us to Tate certain parents of our schema and",
    "start": "2251550",
    "end": "2258210"
  },
  {
    "text": "when we annotate it what it's actually gonna then be inferred is we're going to delay sending that response back on the",
    "start": "2258210",
    "end": "2265440"
  },
  {
    "text": "initial response and then send a patch later so we can do this either at the",
    "start": "2265440",
    "end": "2270840"
  },
  {
    "text": "type level itself or individual fields within that type so again let's see an",
    "start": "2270840",
    "end": "2277619"
  },
  {
    "text": "example of how that might work so what we have is the client will send an initial query to the server and in this",
    "start": "2277619",
    "end": "2283470"
  },
  {
    "text": "case again quite simple we're retrieving the title and then back on the reviews we're also retrieving then all the",
    "start": "2283470",
    "end": "2290609"
  },
  {
    "text": "reviews for that and the contents you would have seen in the previous example that we have a defer directive both at",
    "start": "2290609",
    "end": "2296430"
  },
  {
    "text": "the review object itself which again using a graph in the miniature is now a node in the query and on the content",
    "start": "2296430",
    "end": "2303450"
  },
  {
    "text": "field itself so what the server will then do is send back an initial response",
    "start": "2303450",
    "end": "2310020"
  },
  {
    "text": "without any of the different fields so in this case you can see that the entire",
    "start": "2310020",
    "end": "2315510"
  },
  {
    "text": "edges for review connection is no what",
    "start": "2315510",
    "end": "2320670"
  },
  {
    "text": "the server will then do is process all of those other requests and when they when the resolver has",
    "start": "2320670",
    "end": "2327359"
  },
  {
    "text": "completed pushed a patch using multi-part HTTP back to the clients Fe",
    "start": "2327359",
    "end": "2332430"
  },
  {
    "text": "browser doesn't support reading streams then it will fall back to just standard blocking response behavior for the query",
    "start": "2332430",
    "end": "2340560"
  },
  {
    "text": "but what we'll now see is the initial rating object has been resolved but",
    "start": "2340560",
    "end": "2347640"
  },
  {
    "text": "content is still no and you'll see that this has a slightly different format to",
    "start": "2347640",
    "end": "2353790"
  },
  {
    "text": "the previous response what we have in the top section is the path so how do we",
    "start": "2353790",
    "end": "2359330"
  },
  {
    "text": "uniquely identify where in that response tree this data should go and from here",
    "start": "2359330",
    "end": "2365430"
  },
  {
    "text": "we have a rating of nine but again content is still no because we also max that is being deferred so what will then",
    "start": "2365430",
    "end": "2372359"
  },
  {
    "text": "have I get what we'll see is that content has now been appended onto the path list and we now have the content",
    "start": "2372359",
    "end": "2379260"
  },
  {
    "text": "field and finally when all the patch has been returned to the server to the client then we have all of the data",
    "start": "2379260",
    "end": "2387030"
  },
  {
    "text": "but this introduces of interesting the whole conundrum because we just said earlier that if the field is either",
    "start": "2387030",
    "end": "2392400"
  },
  {
    "text": "missing or you don't have access to it you'll retrieve a null we're now using nulls for pending values",
    "start": "2392400",
    "end": "2399180"
  },
  {
    "text": "as well so is there ambiguity there how will the client know well shall I actually expect data or is there just nothing there so what we could also have",
    "start": "2399180",
    "end": "2407190"
  },
  {
    "text": "is another prop that can get passed into our render prop function and in this",
    "start": "2407190",
    "end": "2413040"
  },
  {
    "text": "particular time is called loading state and loading state is the same structure as the data tree so what I can do here",
    "start": "2413040",
    "end": "2420420"
  },
  {
    "text": "is I can query for loading state check the review and then check the content exists for us if it does then if that",
    "start": "2420420",
    "end": "2429180"
  },
  {
    "text": "resolves the truth then retrieve that particular contents we know at that point that the patch has been received",
    "start": "2429180",
    "end": "2434880"
  },
  {
    "text": "for the client if it's not then we say it's still review pending so what we can",
    "start": "2434880",
    "end": "2441450"
  },
  {
    "text": "now do is determine the city identify for each one of those different fields which ones will I receive a value for or",
    "start": "2441450",
    "end": "2447360"
  },
  {
    "text": "which ones are always going to be dull so that's a really powerful technique that are quite simple I think as well",
    "start": "2447360",
    "end": "2454790"
  },
  {
    "start": "2454000",
    "end": "2454000"
  },
  {
    "text": "another pretty cool feature that we can use as well is persistent queries so",
    "start": "2454790",
    "end": "2460430"
  },
  {
    "text": "another concern that you might have is that the client sends a lot of data to the server every time like each one of",
    "start": "2460430",
    "end": "2466470"
  },
  {
    "text": "these queries as well and that can result in quite high traffic volumes so then we could also say well you know",
    "start": "2466470",
    "end": "2473490"
  },
  {
    "text": "what's the pointer that can we do something a little bit better with rest I have this really nice little URL that can describe that you know the canonical",
    "start": "2473490",
    "end": "2479970"
  },
  {
    "text": "URL to the resource on the server so what can we do about this so again in the graphic UL community and we've",
    "start": "2479970",
    "end": "2486990"
  },
  {
    "text": "actually then landed on this concept called persistent queries and what we do from here is this is an example of the",
    "start": "2486990",
    "end": "2492660"
  },
  {
    "text": "config in the Apollo server where we have this configuration about persistent queries and what we introduce is another",
    "start": "2492660",
    "end": "2499200"
  },
  {
    "text": "key value store which will then in this particular case I've chosen Redis but there's options for medication as well",
    "start": "2499200",
    "end": "2505560"
  },
  {
    "text": "and again we just link the two so what will then happen in a scenario where the",
    "start": "2505560",
    "end": "2512610"
  },
  {
    "text": "client wants to not send the entire query but just send a hash so again this is a share two five six",
    "start": "2512610",
    "end": "2518760"
  },
  {
    "text": "hash that it sends to the server and it generates this hash space and the query contents itself and it sends it to the",
    "start": "2518760",
    "end": "2524099"
  },
  {
    "text": "server what the server will then do is look at the key value store and say does a query",
    "start": "2524099",
    "end": "2530550"
  },
  {
    "text": "exist for this particular hash this is an example of the very first time that a",
    "start": "2530550",
    "end": "2536400"
  },
  {
    "text": "query has been introduced and the key value store says no haven't seen it before the server will respond with a",
    "start": "2536400",
    "end": "2541470"
  },
  {
    "text": "validation error at this point the client will then send the hash but also the body of the query itself so it's",
    "start": "2541470",
    "end": "2549420"
  },
  {
    "text": "going to execute that query it's going to store the query for that hash and then return the response to the client",
    "start": "2549420",
    "end": "2555900"
  },
  {
    "text": "so this is a flow that will ever only happen once for the first time you see that query on subsequent runs through is",
    "start": "2555900",
    "end": "2562829"
  },
  {
    "text": "what we'll see is the optimistic request again from the client goes straight to the server this time we actually",
    "start": "2562829",
    "end": "2569190"
  },
  {
    "text": "retrieve the stored query for this we execute it and we pass it back directly",
    "start": "2569190",
    "end": "2575250"
  },
  {
    "text": "to the client so what you can see from here as well",
    "start": "2575250",
    "end": "2580339"
  },
  {
    "text": "is on the top here I have an example of",
    "start": "2580339",
    "end": "2587040"
  },
  {
    "text": "the initial request that the server would send so we're gonna local for localhost 4000 within the extensions",
    "start": "2587040",
    "end": "2594260"
  },
  {
    "text": "field of the query and I'm asking for retrieve the query for this hash and of",
    "start": "2594260",
    "end": "2601859"
  },
  {
    "text": "course what we see now is that the query doesn't exist yet so I've got a persistent query not found so in the",
    "start": "2601859",
    "end": "2607470"
  },
  {
    "text": "example below what I've actually done is included the body of the query as well so in this case it's just a really",
    "start": "2607470",
    "end": "2613500"
  },
  {
    "text": "simple query just retrieving the type names but what I can do then is once I",
    "start": "2613500",
    "end": "2618720"
  },
  {
    "text": "actually persist this once you go back now to the client up here which is exact",
    "start": "2618720",
    "end": "2624089"
  },
  {
    "text": "same process as the Apollo client we'll use what we're then seeing is that the query gets executed directly so that's",
    "start": "2624089",
    "end": "2632040"
  },
  {
    "text": "just a concrete example of showing what the if you unpick what the o'clock what the Apollo client code does is pretty",
    "start": "2632040",
    "end": "2637829"
  },
  {
    "text": "much this and there's benefits of doing this as",
    "start": "2637829",
    "end": "2644869"
  },
  {
    "text": "well so one of the things that always worked to me about graph QL is if",
    "start": "2644869",
    "end": "2650060"
  },
  {
    "text": "treated htdp as a dumb pipe everything was a post so you didn't get any of the",
    "start": "2650060",
    "end": "2655640"
  },
  {
    "text": "benefit of of caching or all the other value that HTTP provides and you could",
    "start": "2655640",
    "end": "2661820"
  },
  {
    "text": "possibly argue that the more customized your queries get the less value you will get from caching . but i think there's",
    "start": "2661820",
    "end": "2667190"
  },
  {
    "text": "still you know like a lot of improvement we can make there so a really nice thing now that we have a very simple structure",
    "start": "2667190",
    "end": "2673490"
  },
  {
    "text": "anymore hashed query we can now turn all of those posts to get so on the on the",
    "start": "2673490",
    "end": "2682100"
  },
  {
    "text": "apollo side it's this logic is held within the apollo linked persistent queries module and again quite simple to",
    "start": "2682100",
    "end": "2690710"
  },
  {
    "text": "set up so again link is a structure within the apollo stack it's like a programmable network layer and you can and then you",
    "start": "2690710",
    "end": "2698090"
  },
  {
    "text": "can chain multiple links together so in this purse IX's query link what we're going this is which is responsible for",
    "start": "2698090",
    "end": "2703369"
  },
  {
    "text": "the same interaction that I just showed you with the API calls earlier and then we just set the property of use get for",
    "start": "2703369",
    "end": "2709130"
  },
  {
    "text": "our hashed queries and from then on now all of our queries will then be sent as gets for the words that I have been",
    "start": "2709130",
    "end": "2715130"
  },
  {
    "text": "persisted now we can start getting value",
    "start": "2715130",
    "end": "2720200"
  },
  {
    "text": "from cashing so we have this application control director for in this case I can",
    "start": "2720200",
    "end": "2725750"
  },
  {
    "text": "say store for 60 seconds and I can do this either as the type level itself or any of the individual fields so you",
    "start": "2725750",
    "end": "2733340"
  },
  {
    "text": "probably get the initial feeling of persisted queries can help with just an initial traffic from the client to the server but now you're seeing that again",
    "start": "2733340",
    "end": "2740630"
  },
  {
    "text": "a lot of the investment you might prove these are made in proxy tools like squid awareness suddenly start paying off again boss with great power comes great",
    "start": "2740630",
    "end": "2751580"
  },
  {
    "start": "2747000",
    "end": "2747000"
  },
  {
    "text": "responsibility so now that we've given all of our users this power to craft whatever queries we love and whatever",
    "start": "2751580",
    "end": "2758240"
  },
  {
    "text": "queries they if they want what happens if they do pathological queries are their malicious or again just queries",
    "start": "2758240",
    "end": "2765590"
  },
  {
    "text": "that would be horrendously expensive to execute on the server so you might notice that we can't",
    "start": "2765590",
    "end": "2771730"
  },
  {
    "text": "completely avoid this issue if we only use persistent queries such that we will",
    "start": "2771730",
    "end": "2776770"
  },
  {
    "text": "know a compile-time all of the valid queries that could hit our server and we can actually do performance analysis or",
    "start": "2776770",
    "end": "2782020"
  },
  {
    "text": "as ahead of time but again that's quite restrictive and if you've got to have public consumers of your graph QL API",
    "start": "2782020",
    "end": "2788380"
  },
  {
    "text": "not really an option so how could we protect our api's from these queries so",
    "start": "2788380",
    "end": "2795430"
  },
  {
    "text": "we looked at the structure of a resolver previously and we looked at the first three arguments but there's also a",
    "start": "2795430",
    "end": "2800560"
  },
  {
    "text": "fourth argument that gets passed into it called info and this represents the abstract syntax tree for that particular",
    "start": "2800560",
    "end": "2806200"
  },
  {
    "text": "query so again all of the the fields that you're going to see so we're getting that in that example that we",
    "start": "2806200",
    "end": "2811630"
  },
  {
    "text": "shoulder like traversing out down to the nodes you get that structure such that you can interrogate it and that allows",
    "start": "2811630",
    "end": "2818020"
  },
  {
    "start": "2817000",
    "end": "2817000"
  },
  {
    "text": "us to do a couple of things so we might have one control based on purely the depth of the query and there's a package",
    "start": "2818020",
    "end": "2826210"
  },
  {
    "text": "for this as well called graph QL depth limit and what we can then say is for this particular query I can say only",
    "start": "2826210",
    "end": "2831700"
  },
  {
    "text": "support queries that have a depth of less or say three and then it will",
    "start": "2831700",
    "end": "2837130"
  },
  {
    "text": "traverse through down to the query so at this stage we're at depth 0 with in that film objects it so for a depth of one",
    "start": "2837130",
    "end": "2843550"
  },
  {
    "text": "down review step two and then a grazing depth tree so any other queries that are",
    "start": "2843550",
    "end": "2848590"
  },
  {
    "text": "deeper than that you would just say no reject them and it's pretty brute force but I can be effective so I wouldn't",
    "start": "2848590",
    "end": "2855430"
  },
  {
    "text": "start in day one with this so put your queries in and then see over time what",
    "start": "2855430",
    "end": "2860770"
  },
  {
    "text": "the maximum depth of one of your queries is typically the largest I've had is about eight to nine depth so I set the",
    "start": "2860770",
    "end": "2867010"
  },
  {
    "text": "depth at a max of ten but you can see yourself that that will probably vary based on your debate that the complexity",
    "start": "2867010",
    "end": "2873340"
  },
  {
    "text": "of the queries that you're crafting a slightly more nuanced approach then is",
    "start": "2873340",
    "end": "2878830"
  },
  {
    "start": "2875000",
    "end": "2875000"
  },
  {
    "text": "this concept of query cost analysis and what this says is really based on that",
    "start": "2878830",
    "end": "2883930"
  },
  {
    "text": "all fields don't have the same cost associated with them in the same way that we might want to defer the slow to",
    "start": "2883930",
    "end": "2889930"
  },
  {
    "text": "render fields we might also say that well that's a more cost of the operation for the server so again we have a",
    "start": "2889930",
    "end": "2895600"
  },
  {
    "text": "package called graph QL cost analysis and what that lets us to do through another directive associate certain",
    "start": "2895600",
    "end": "2901960"
  },
  {
    "text": "complexity values with the fields so in the same way as with reversing down through that structure to execute",
    "start": "2901960",
    "end": "2908549"
  },
  {
    "text": "the resolvers what we could also do is traverse that tree and keep a running total of the cost of this and then we",
    "start": "2908549",
    "end": "2916260"
  },
  {
    "text": "could put an average ebuddy let's just say the max cost is 50 if you've worked out that it would cost more to resolve",
    "start": "2916260",
    "end": "2922020"
  },
  {
    "text": "the query than that then you just fail as a product and this is incredibly flexible so I've just sent a like a",
    "start": "2922020",
    "end": "2928230"
  },
  {
    "text": "hard-coded value of two there you can also define multiplicative values so if it appears within a collection you can",
    "start": "2928230",
    "end": "2934950"
  },
  {
    "text": "then say that maybe each value is worth two times that depending on the depth as well if you get an exponential growth to",
    "start": "2934950",
    "end": "2941549"
  },
  {
    "text": "your query see huge amount of flexibility there so if you're doing a like building a production graph you",
    "start": "2941549",
    "end": "2947640"
  },
  {
    "text": "labr I would strongly encourage you to look at both of these techniques and persistent queries if applicable as well",
    "start": "2947640",
    "end": "2953160"
  },
  {
    "text": "for your use case okay so main takeaways",
    "start": "2953160",
    "end": "2958940"
  },
  {
    "start": "2955000",
    "end": "2955000"
  },
  {
    "text": "graph QL supports both synchronous reads and writes but also real-time",
    "start": "2958940",
    "end": "2964829"
  },
  {
    "text": "interactions through subscriptions the magic of this is that it's entirely through one interface so if you're",
    "start": "2964829",
    "end": "2971819"
  },
  {
    "text": "working with your teams you don't have to introduce a new set of techniques or a new technology to support those",
    "start": "2971819",
    "end": "2978119"
  },
  {
    "text": "different scenarios so you could integrate them seamlessly with any of",
    "start": "2978119",
    "end": "2984030"
  },
  {
    "text": "these things as well we want to keep the surface area of our API so tight so if you can use features like persisted",
    "start": "2984030",
    "end": "2991349"
  },
  {
    "text": "queries absolutely do it it will not only give you a performance boom but also tighten up some of the edge cases",
    "start": "2991349",
    "end": "2997230"
  },
  {
    "text": "or performance cases odd you might see on the server as well and Apollo client",
    "start": "2997230",
    "end": "3002990"
  },
  {
    "text": "I'm convinced is the best all-round client for most of the business applications that will rise and",
    "start": "3002990",
    "end": "3009230"
  },
  {
    "text": "absolutely worth your attention so thanks a million I really appreciate you making out this morning",
    "start": "3009230",
    "end": "3016900"
  },
  {
    "text": "so I'll put up a reference slide at the end this is the demo app from the talk",
    "start": "3022290",
    "end": "3028540"
  },
  {
    "text": "I'll also tweet out my slides a little bit later this morning but this covers",
    "start": "3028540",
    "end": "3033700"
  },
  {
    "text": "both the graph QL client so goes through subscriptions mutations so any of the",
    "start": "3033700",
    "end": "3040150"
  },
  {
    "text": "functionality that you've seen before and then also the service side as well so we do have about four minutes for for",
    "start": "3040150",
    "end": "3048430"
  },
  {
    "start": "3046000",
    "end": "3046000"
  },
  {
    "text": "questions so hi",
    "start": "3048430",
    "end": "3053369"
  },
  {
    "text": "yeah it's a really good question so so an example of an example of a mutation",
    "start": "3072329",
    "end": "3078369"
  },
  {
    "text": "for for anyone else here is this an example of how I've done login in this",
    "start": "3078369",
    "end": "3084099"
  },
  {
    "text": "app so again it's just mutation and we'll take a login input object which I pass then to query variables and in this",
    "start": "3084099",
    "end": "3090520"
  },
  {
    "text": "particular case you'll see the password that's in the code that I would have just NDC kampf in 2017 I use the same",
    "start": "3090520",
    "end": "3097420"
  },
  {
    "text": "database from last year's presentation I do know what year it is and then that will get minted over on the right hand",
    "start": "3097420",
    "end": "3102700"
  },
  {
    "text": "side as an access token which they then just pop in the authorization header but the question was so when you do",
    "start": "3102700",
    "end": "3108910"
  },
  {
    "text": "mutations and you're and you're not retrieving the full object structures that you would have from a query as well",
    "start": "3108910",
    "end": "3114579"
  },
  {
    "text": "how does that affect re fetching and yeah you're absolutely right then you will have you will have warnings",
    "start": "3114579",
    "end": "3120460"
  },
  {
    "text": "throughout if you look at the Apollo tooling again this is a this is another",
    "start": "3120460",
    "end": "3125589"
  },
  {
    "text": "piece that I would recommend everyone to look at if your so there's Apollo dev",
    "start": "3125589",
    "end": "3133240"
  },
  {
    "text": "tools and then you'll see down in the case structure as well on console your start seeing all of the objects that I",
    "start": "3133240",
    "end": "3138849"
  },
  {
    "text": "have in the case from here but you will start seeing warnings then around reef",
    "start": "3138849",
    "end": "3143980"
  },
  {
    "text": "etching if those particular properties or titles you know for any of those don't exist within those objects themselves as well so a key structure",
    "start": "3143980",
    "end": "3150700"
  },
  {
    "text": "from here as well is I always look to keep the shape consistent across those queries and if you're doing multiple queries return like an ID and the type",
    "start": "3150700",
    "end": "3157510"
  },
  {
    "text": "name as well as such that you can differentiate within the case itself",
    "start": "3157510",
    "end": "3162810"
  },
  {
    "text": "hi",
    "start": "3165240",
    "end": "3168240"
  },
  {
    "text": "yeah you can absolutely have you can have a recursive structure so like I've shown in that query as well where you",
    "start": "3174450",
    "end": "3180190"
  },
  {
    "text": "can go from actors to the films that they that they appeared in and then back to films as well but because it's a tree",
    "start": "3180190",
    "end": "3185740"
  },
  {
    "text": "structure and we will always start at the root and we only fan out then you will never have a case where you get an",
    "start": "3185740",
    "end": "3192309"
  },
  {
    "text": "infinite loop from there because we're just parsing that the tree straight down but obviously from there then I was",
    "start": "3192309",
    "end": "3198789"
  },
  {
    "text": "playing in with like the complexity of that and the amount of like recursive structures of the other or the",
    "start": "3198789",
    "end": "3203950"
  },
  {
    "text": "server-side and complexity of querying that data one of the things that's a really powerful part for that is this",
    "start": "3203950",
    "end": "3211660"
  },
  {
    "text": "concept of data loaders so data loaders",
    "start": "3211660",
    "end": "3216730"
  },
  {
    "text": "here are a library that you can download as well for it but what they do is per",
    "start": "3216730",
    "end": "3222549"
  },
  {
    "text": "require per request batching and caching so if you looked at some of the queries that come through even if I'm requesting",
    "start": "3222549",
    "end": "3228460"
  },
  {
    "text": "the same object let's just say act up with ID 1 and that appears multiple times without that graph what we'll do",
    "start": "3228460",
    "end": "3234880"
  },
  {
    "text": "is data load will actually listen to all of the requests for that objects but don't execute them directly actually",
    "start": "3234880",
    "end": "3240849"
  },
  {
    "text": "execute them on process net tick and then it will actually send one query",
    "start": "3240849",
    "end": "3245920"
  },
  {
    "text": "downstream and they're all subsequent calls will actually retrieve that same object from the data loader request",
    "start": "3245920",
    "end": "3251380"
  },
  {
    "text": "cache and then the trick with data loaders is I pass the main on that context parameter for each query such",
    "start": "3251380",
    "end": "3257890"
  },
  {
    "text": "that it then gets refreshed each request so again it's like prayer request batching occasion but that helps a huge",
    "start": "3257890",
    "end": "3264880"
  },
  {
    "text": "amount on reducing bandwidth or producing calls downstream that's it ok",
    "start": "3264880",
    "end": "3272349"
  },
  {
    "text": "last question",
    "start": "3272349",
    "end": "3274589"
  },
  {
    "text": "excellent question okay so the trick with graph QL is don't push business",
    "start": "3280170",
    "end": "3286420"
  },
  {
    "text": "logic in graph QL itself so the resolver layer should be incredibly thin so the",
    "start": "3286420",
    "end": "3292869"
  },
  {
    "text": "resolver layer itself should just call down to another business logically",
    "start": "3292869",
    "end": "3297880"
  },
  {
    "text": "either in process so I wrote a lot of NPM modules then has that business logic layer so again in this particular",
    "start": "3297880",
    "end": "3303729"
  },
  {
    "text": "example I've put them all together within the same solution but I always look to build so just in the case of a",
    "start": "3303729",
    "end": "3311049"
  },
  {
    "text": "film-like one one access point to retrieve those data from any of the",
    "start": "3311049",
    "end": "3316599"
  },
  {
    "text": "resolver so this place the only way that I can retrieve a problem is through this one function so that's where idea B",
    "start": "3316599",
    "end": "3322690"
  },
  {
    "text": "business rules go so for let's just say you had a business rule that you can only return you can only see your own",
    "start": "3322690",
    "end": "3328479"
  },
  {
    "text": "record so I think we have an example here so if I wanted to retrieve a user",
    "start": "3328479",
    "end": "3335170"
  },
  {
    "text": "object basically the login has to match the login user as well so you can only see your own record so the trick is not",
    "start": "3335170",
    "end": "3340960"
  },
  {
    "text": "putting that in the resolver layer at all so that's the first step but then what that allows you to do is",
    "start": "3340960",
    "end": "3347019"
  },
  {
    "text": "use a function to pin the user feature called schema stitching so what you can then do is have separate portions of",
    "start": "3347019",
    "end": "3353200"
  },
  {
    "text": "your schema modeled a separate graph QL service and then have a graphic ul gateway above that which will aggregate",
    "start": "3353200",
    "end": "3360160"
  },
  {
    "text": "all of those disparate schema fragments and tie them together to what cohesive whole so if you're actually querying it",
    "start": "3360160",
    "end": "3367299"
  },
  {
    "text": "from the client perspective it's invisible to you but then you've moved away from having a centralized",
    "start": "3367299",
    "end": "3372789"
  },
  {
    "text": "architecture to decentralized around particular functions so again as one of",
    "start": "3372789",
    "end": "3380200"
  },
  {
    "text": "our clients that we will work yet we ended up splitting the schema across Gary's like five or six different so we",
    "start": "3380200",
    "end": "3386680"
  },
  {
    "text": "had what about products customers yeah yeah and then we'll have the client that",
    "start": "3386680",
    "end": "3392829"
  },
  {
    "text": "probably Skiba stitching perspective then tie that together the trick with that though is you can still do all of",
    "start": "3392829",
    "end": "3397930"
  },
  {
    "text": "the linking between objects within the individual schema fragments themselves the same as you were before but you want",
    "start": "3397930",
    "end": "3404680"
  },
  {
    "text": "to keep the amount of code to kind of glue separate fragments together pretty pretty minimal so you have to use",
    "start": "3404680",
    "end": "3411210"
  },
  {
    "text": "to say are these really tightly coupled like do they live together do they change together probably stick that in the same schema fragment because",
    "start": "3411210",
    "end": "3417690"
  },
  {
    "text": "otherwise you're actually just bolting in glue code up the top to allow traversing between it separately these",
    "start": "3417690",
    "end": "3422820"
  },
  {
    "text": "different sub trees but the feature you're looking for is schema stitching there's two main options for you can",
    "start": "3422820",
    "end": "3429450"
  },
  {
    "text": "either use Gramps which Jason lang Dorf gave the keynote scruffy us about last year on so that takes a slightly",
    "start": "3429450",
    "end": "3435300"
  },
  {
    "text": "different approach that uses data connectors but same you know same same outcome different way to get there or",
    "start": "3435300",
    "end": "3441080"
  },
  {
    "text": "schema stitching which seems to be the predominant way of doing it though but",
    "start": "3441080",
    "end": "3446130"
  },
  {
    "text": "again I wouldn't start there like if you're gonna say stats simple get value",
    "start": "3446130",
    "end": "3452820"
  },
  {
    "text": "out see how see how you can operate it then if you've seen that the rate at which you could change is being constrained by certain portions of the",
    "start": "3452820",
    "end": "3458400"
  },
  {
    "text": "schema then look to divided up but in the same way you would have start building a Bunco services system add a word right you've gotta have to",
    "start": "3458400",
    "end": "3464370"
  },
  {
    "text": "understand well where would make sense to make logical splits within that schema and then you know so in other",
    "start": "3464370",
    "end": "3469380"
  },
  {
    "text": "words you can make an informed decision at some point in the future okay we're out of time thank you so much for coming",
    "start": "3469380",
    "end": "3474450"
  },
  {
    "text": "[Applause]",
    "start": "3474450",
    "end": "3477160"
  }
]