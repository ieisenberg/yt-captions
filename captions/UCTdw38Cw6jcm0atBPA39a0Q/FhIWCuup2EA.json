[
  {
    "text": "okay hey everyone and let's begin thank you for coming to the stock sorry for",
    "start": "7040",
    "end": "12840"
  },
  {
    "text": "being a little late uh but let's move on now my name is Adam furmanek and for the",
    "start": "12840",
    "end": "18060"
  },
  {
    "text": "next one hour we are going to talk a little bit about locks and they are tricky so we are going to see",
    "start": "18060",
    "end": "26160"
  },
  {
    "text": "um some theory of concurrency parallelism and how it's used throughout the computer science we are also to see",
    "start": "26160",
    "end": "32220"
  },
  {
    "text": "going to see multiple practical examples of where locks might be hidden from you",
    "start": "32220",
    "end": "37440"
  },
  {
    "text": "where logs are like stored where they are used which mechanisms in the operating system and the cloud in the",
    "start": "37440",
    "end": "43379"
  },
  {
    "text": "databases use them and where they might be hidden from us but yet still affecting",
    "start": "43379",
    "end": "49620"
  },
  {
    "text": "our code base so that's the plan for the next hour the QR code points you to the slide that will be available at the very",
    "start": "49620",
    "end": "55260"
  },
  {
    "text": "end as well so feel free to to download that and before moving on couple words about me I'm a software engineer for",
    "start": "55260",
    "end": "61800"
  },
  {
    "text": "over a decade now working recently a lot with machine learning also and author of these two books one of them being",
    "start": "61800",
    "end": "67799"
  },
  {
    "text": "about.net internals the other one being about maths so feel free to take a look at and and also visit my blog if you are",
    "start": "67799",
    "end": "74340"
  },
  {
    "text": "interested in like computer science in general.net jvm internals some math some",
    "start": "74340",
    "end": "80460"
  },
  {
    "text": "other stuff dropping a line in my Twitter whatever works for you and being that set let's begin so the",
    "start": "80460",
    "end": "87420"
  },
  {
    "text": "agenda for today's talk is we're going to start with some general concepts so we want to understand the Locking",
    "start": "87420",
    "end": "94259"
  },
  {
    "text": "concurrency parallelism set some definitions straight and all that stuff see the basic concurrency Primitives we",
    "start": "94259",
    "end": "101100"
  },
  {
    "text": "can use then we'll focus on some real life examples like inside the operating system maybe inside the databases you",
    "start": "101100",
    "end": "108060"
  },
  {
    "text": "use maybe in the languages we are using a real quick row of hands how many of you use dotnet okay majority of the room",
    "start": "108060",
    "end": "115740"
  },
  {
    "text": "that's good I'll be showing examples mostly in.net however they are applicable to nearly any language you",
    "start": "115740",
    "end": "122280"
  },
  {
    "text": "might be using so feel free to generalize those and think about how they can apply to other languages very",
    "start": "122280",
    "end": "128340"
  },
  {
    "text": "similar to data like Java or maybe a little more for friends like python or maybe Husker or other things you might",
    "start": "128340",
    "end": "135000"
  },
  {
    "text": "be using ultimately we'll go through some algorithms and end up with custom implementation so we'll see one example",
    "start": "135000",
    "end": "142200"
  },
  {
    "text": "of a very nice lock which I'm using in production for some time showing how we can solve a particular problem which",
    "start": "142200",
    "end": "148680"
  },
  {
    "text": "seems to be super trivial to solve but our operating systems do not solve that unfortunately so let's begin so general",
    "start": "148680",
    "end": "155879"
  },
  {
    "text": "concepts first thing let's get some definitions straight okay so concurrency and parallelism they are often mixed up",
    "start": "155879",
    "end": "163500"
  },
  {
    "text": "but they are actually two completely different concepts right concurrency is about being able to cut your application",
    "start": "163500",
    "end": "169560"
  },
  {
    "text": "in parts and be able to execute those parts in basically any order and it does",
    "start": "169560",
    "end": "175680"
  },
  {
    "text": "not apply to your application only this applies to everything you're running on",
    "start": "175680",
    "end": "180959"
  },
  {
    "text": "a single machine or maybe on multiple machines or maybe on multiple computers around the planet right if we are",
    "start": "180959",
    "end": "188280"
  },
  {
    "text": "talking about one single particular workflow we want to cut it in pieces and execute those pieces out of order so the",
    "start": "188280",
    "end": "196319"
  },
  {
    "text": "the most important or the most common example we can think of is how we are actually dealing with like multiple",
    "start": "196319",
    "end": "201659"
  },
  {
    "text": "applications running on one single CPU right what do we do we do some code Type sharing right so we let one app run for",
    "start": "201659",
    "end": "208800"
  },
  {
    "text": "like couple of milliseconds then we pause it we run another app etc etc so this concept of concurrency is actually",
    "start": "208800",
    "end": "216060"
  },
  {
    "text": "coming straight down to like resource access sharing resources and this",
    "start": "216060",
    "end": "221099"
  },
  {
    "text": "resource can be of multiple forms this could be for instance CPU top Utah this could be an",
    "start": "221099",
    "end": "226980"
  },
  {
    "text": "critical section this could be an access to memory or multiple other things we can think of but generally concurrency",
    "start": "226980",
    "end": "233580"
  },
  {
    "text": "is about controlling and access to some particular specific resource parallelism",
    "start": "233580",
    "end": "240120"
  },
  {
    "text": "on the other hand is about being able to run multiple things at the same time in",
    "start": "240120",
    "end": "246840"
  },
  {
    "text": "parallel we are not cheating we are not pretending that we run multiple applications on one CPU and they run",
    "start": "246840",
    "end": "252720"
  },
  {
    "text": "like parallel even though we we juggle them constantly we actually have",
    "start": "252720",
    "end": "258180"
  },
  {
    "text": "physical ability to run multiple things at once meaning that most likely we need to have multiple cores multiple CPUs or",
    "start": "258180",
    "end": "265680"
  },
  {
    "text": "maybe multiple machines okay and the interesting part about that is you can actually get a mix of these two in any",
    "start": "265680",
    "end": "272639"
  },
  {
    "text": "way you wish you may have application which is like parallel but not concurrent something which is a bit",
    "start": "272639",
    "end": "279120"
  },
  {
    "text": "problematic when we think about that but generally for every single like mix of those we can get an example for instance",
    "start": "279120",
    "end": "285240"
  },
  {
    "text": "concurrent parallel this is the thing which we are typically used to nowadays right we have multiple cores in our",
    "start": "285240",
    "end": "291720"
  },
  {
    "text": "computers multiple applications are running at the same time multiple threads are executing and yet inside our",
    "start": "291720",
    "end": "298199"
  },
  {
    "text": "single application we sometimes need to make sure that we execute things like with critical sections so we lock access",
    "start": "298199",
    "end": "304560"
  },
  {
    "text": "to a resource and still we have both concurrency and parallelism non-concurrent and non-parallel systems",
    "start": "304560",
    "end": "311759"
  },
  {
    "text": "are long gone they were available like 60 years ago when we had batch modes",
    "start": "311759",
    "end": "317639"
  },
  {
    "text": "batch systems so the only thing we had is we were putting in some card like punch card with the source code and it",
    "start": "317639",
    "end": "325020"
  },
  {
    "text": "was executed like straight from top down to bottom okay that was it we couldn't stop it we couldn't pause it I mean the",
    "start": "325020",
    "end": "331740"
  },
  {
    "text": "cute computer couldn't pause itself to run some other application and this is",
    "start": "331740",
    "end": "337139"
  },
  {
    "text": "something we could also see in like very early days of Dos operating system hands up if you ever use dos NEOS oh yeah",
    "start": "337139",
    "end": "344699"
  },
  {
    "text": "there are some dinosaurs in the room hello to all of you generally it allowed for something which was like upper mode",
    "start": "344699",
    "end": "351360"
  },
  {
    "text": "extended mode there are multiple names of that for that right but you have like a limited amount of memory for which you",
    "start": "351360",
    "end": "357960"
  },
  {
    "text": "could put another kind of application which was like running in the background",
    "start": "357960",
    "end": "363300"
  },
  {
    "text": "right so it tried to be concurrent in the sense that there were two things allowed to run in a concurrently but",
    "start": "363300",
    "end": "370139"
  },
  {
    "text": "still it was more of this this batch mode thingy however then we get something which is not concurrent and",
    "start": "370139",
    "end": "376139"
  },
  {
    "text": "parallel what is that this is something that we are for instance running in our CPUs we have vectored instructions right",
    "start": "376139",
    "end": "382620"
  },
  {
    "text": "we have bit level parallelism right so what we do is we can have a CPU instruction which adds multiple integers",
    "start": "382620",
    "end": "390300"
  },
  {
    "text": "at once so pairs of integers right so it operates on something like 256 bits or",
    "start": "390300",
    "end": "396360"
  },
  {
    "text": "whatever else bigger values maybe and it just adds them independently from each other but still in parallel does that",
    "start": "396360",
    "end": "403620"
  },
  {
    "text": "like in one go and the other thing is well concurrent not parallel one CPU and",
    "start": "403620",
    "end": "409620"
  },
  {
    "text": "we are doing context switching over and over again so those are examples of any mix of these two we can have now the",
    "start": "409620",
    "end": "417180"
  },
  {
    "text": "other big area when it comes to concurrency locking and all that stuff is shared memory versus message passing",
    "start": "417180",
    "end": "423900"
  },
  {
    "text": "charging memory is when well multiple cores or multiple machines physically",
    "start": "423900",
    "end": "429180"
  },
  {
    "text": "access exactly the same part of the memory and we are talking physical memory here right and this thingy means",
    "start": "429180",
    "end": "436319"
  },
  {
    "text": "that both of them want to access the same literal thing so they need to control how they are doing that so they",
    "start": "436319",
    "end": "442500"
  },
  {
    "text": "do not break the state this is something we typically cannot use between machines well because they they probably most of",
    "start": "442500",
    "end": "449819"
  },
  {
    "text": "the times have their own independent memory sometimes even with one machine",
    "start": "449819",
    "end": "455400"
  },
  {
    "text": "when we are talking about the Numa non-uniform memory access it may be that multiple cores are trying to access the",
    "start": "455400",
    "end": "462060"
  },
  {
    "text": "same memory even though physically there's like distant to each other but this is a bit different typically shared",
    "start": "462060",
    "end": "468300"
  },
  {
    "text": "memory is just used within one single machine and this is where we are dealing with that it requires some critical",
    "start": "468300",
    "end": "474419"
  },
  {
    "text": "sections some controlling how we access that memory but the advantage of that is",
    "start": "474419",
    "end": "479819"
  },
  {
    "text": "generally this is this thing is generally faster than message passing okay obviously that's not a benchmark",
    "start": "479819",
    "end": "485819"
  },
  {
    "text": "your mileage may vary but however the general rule of thumb is this should be faster message passing on the other hand",
    "start": "485819",
    "end": "493020"
  },
  {
    "text": "is when we are just sending messages between like two whatever components we can think of those could be threats and",
    "start": "493020",
    "end": "500039"
  },
  {
    "text": "those could be processes with IPC interprocess communication those could be nodes across the world that could be",
    "start": "500039",
    "end": "505319"
  },
  {
    "text": "internet connection whatever else this requires some way of communication most",
    "start": "505319",
    "end": "511020"
  },
  {
    "text": "likely this is like wire with sockets however this is also this could be also like common storage or maybe message",
    "start": "511020",
    "end": "518159"
  },
  {
    "text": "queue service bus yada yada we can obviously use this in multiple scenarios typically this is slower but the",
    "start": "518159",
    "end": "524580"
  },
  {
    "text": "ultimate part is that this message passing allows us to control things a little easier when we are talking about",
    "start": "524580",
    "end": "530399"
  },
  {
    "text": "us being programmers how do we control all these things the message passing tends to be easier to control so this is",
    "start": "530399",
    "end": "538320"
  },
  {
    "text": "generally something we probably or at least multiple languages and Technologies like pushes nowadays that",
    "start": "538320",
    "end": "543839"
  },
  {
    "text": "we want to go to the message passing interface instead of having this certain memory but it's slower so keep that in",
    "start": "543839",
    "end": "549839"
  },
  {
    "text": "mind if you're writing high performance code and now we will be focusing on",
    "start": "549839",
    "end": "556100"
  },
  {
    "text": "or if we are trying to do something without logs then we may have multiple issues now the question is why do we",
    "start": "559860",
    "end": "565740"
  },
  {
    "text": "even need locks what can go wrong and the frame like most important parts of",
    "start": "565740",
    "end": "571680"
  },
  {
    "text": "framework is important like Concepts which can go wrong are here on the slide and first one being like lost right this",
    "start": "571680",
    "end": "578580"
  },
  {
    "text": "is probably also in the University you try to add some money use and transfer between banking accounts yeah cliche",
    "start": "578580",
    "end": "584820"
  },
  {
    "text": "typical example right so what we do is we actually have two operations which",
    "start": "584820",
    "end": "589860"
  },
  {
    "text": "for us programmers seem to be just like one single Atomic right we represent this in the code AS variable plus plus",
    "start": "589860",
    "end": "596459"
  },
  {
    "text": "okay just line one line of code seems to be one operation but under the hood actually it's two different operations",
    "start": "596459",
    "end": "603060"
  },
  {
    "text": "or actually three of them we read the memory we increment it in like register",
    "start": "603060",
    "end": "608519"
  },
  {
    "text": "CP registers and then we write it back to the RAM memory right and this can go wrong because once we read something the",
    "start": "608519",
    "end": "615120"
  },
  {
    "text": "other thread also reads the same value we both increase and try writing the value bank one right is lost okay this",
    "start": "615120",
    "end": "621360"
  },
  {
    "text": "is the typical example of what can go wrong but the others the other one is word tearing this is something when we",
    "start": "621360",
    "end": "628140"
  },
  {
    "text": "our computers in order to be fast they want to work on like bigger amount of",
    "start": "628140",
    "end": "634560"
  },
  {
    "text": "data they do not work on particular bits what they want to do is they want to",
    "start": "634560",
    "end": "639600"
  },
  {
    "text": "work on things like integer which is 32-bit long okay typically or long value",
    "start": "639600",
    "end": "645060"
  },
  {
    "text": "which is 64-bit long actually we should be talking about octets not not like",
    "start": "645060",
    "end": "651360"
  },
  {
    "text": "bytes so this is 64 bits meaning eight octets and generally this is how CPU",
    "start": "651360",
    "end": "656519"
  },
  {
    "text": "work nowadays okay but what happens if you would like to you know toggle just one bit inside the integer what happens",
    "start": "656519",
    "end": "663839"
  },
  {
    "text": "if we allow multiple threads to toggle different bits inside the same integer",
    "start": "663839",
    "end": "668940"
  },
  {
    "text": "well we get the thing which is called word tearing and this means that we are",
    "start": "668940",
    "end": "674700"
  },
  {
    "text": "trying to modify just one piece of this integer but we need to write actually a",
    "start": "674700",
    "end": "680100"
  },
  {
    "text": "whole lot of it like all 32 bits or 64 bits or whatever else okay and this",
    "start": "680100",
    "end": "685800"
  },
  {
    "text": "means that by doing that if we do not control our access correctly then we may",
    "start": "685800",
    "end": "690959"
  },
  {
    "text": "be overriding changes which someone else done in different parts of the of this",
    "start": "690959",
    "end": "696600"
  },
  {
    "text": "integer okay so this is worth tearing so this is when we are trying to access like a very little portion of bigger",
    "start": "696600",
    "end": "702839"
  },
  {
    "text": "data structure and the other one is quite the opposite we are trying to access much bigger structure but we can",
    "start": "702839",
    "end": "708899"
  },
  {
    "text": "only write a part of it at the same time like in atomicity okay when we are talking about having atomic structures",
    "start": "708899",
    "end": "715440"
  },
  {
    "text": "which are like one kilobyte long we would need to be writing every single integer of it and obviously this may",
    "start": "715440",
    "end": "721920"
  },
  {
    "text": "break so how can we do with that and this is where we go to the thing which is called critical section and critical",
    "start": "721920",
    "end": "728459"
  },
  {
    "text": "section is a code which can be executed by one execution unit at a time and",
    "start": "728459",
    "end": "734339"
  },
  {
    "text": "normal words meaning that we have one for which we have part of the code which if threat only one fret can execute at",
    "start": "734339",
    "end": "741899"
  },
  {
    "text": "the time and this was a super important problem in early days of computer science it's pretty common for us",
    "start": "741899",
    "end": "747540"
  },
  {
    "text": "nowadays because we first know how to solve it and have all the tools for solving it but when the computers",
    "start": "747540",
    "end": "753660"
  },
  {
    "text": "emerged it wasn't that trivial to solve it because we just didn't know what to do but still there are multiple issues",
    "start": "753660",
    "end": "760620"
  },
  {
    "text": "we may not be thinking of but they are still appearing today what happens if you are running your critical section in",
    "start": "760620",
    "end": "767639"
  },
  {
    "text": "your social language or whatever else and you just die in the middle like you have 10 line of codes inside the lock",
    "start": "767639",
    "end": "774180"
  },
  {
    "text": "and what happens if someone stops you in the middle after Fifth Line okay how can you proceed and this is something",
    "start": "774180",
    "end": "780360"
  },
  {
    "text": "computer science is not solving for us because that's a business problem actually we need to understand whether",
    "start": "780360",
    "end": "785820"
  },
  {
    "text": "it's safe to proceed because we don't know whether we are in a consistent State whether we broke we broke some",
    "start": "785820",
    "end": "792420"
  },
  {
    "text": "data structures or not whether it be broke transactions or not and computer science won't just solve that there is",
    "start": "792420",
    "end": "798000"
  },
  {
    "text": "not no structure like log business process make sure customers are happy that's enough not something like this",
    "start": "798000",
    "end": "803639"
  },
  {
    "text": "right but we need to make sure we are doing that and this is why logs are tricky because locking a part of the",
    "start": "803639",
    "end": "810180"
  },
  {
    "text": "code well is super trivial nowadays look keyword in C sharp synchronizing Java Bank it just works right but what",
    "start": "810180",
    "end": "816420"
  },
  {
    "text": "happens when things go wrong and this is what will be discussing uh after we",
    "start": "816420",
    "end": "822000"
  },
  {
    "text": "figure out how to actually do this locking so we'll go through a couple of basic primitive concurrency mechanisms",
    "start": "822000",
    "end": "828000"
  },
  {
    "text": "really quick to understand what we are dealing with and the first thing is called mutex the name comes from Mutual",
    "start": "828000",
    "end": "835560"
  },
  {
    "text": "exclusion and uh depending on whether we are dealing with like single CPU system multiple CPU systems this can be",
    "start": "835560",
    "end": "842399"
  },
  {
    "text": "implemented like with disabling Hardware interrupts or maybe synchronizing CPUs",
    "start": "842399",
    "end": "847500"
  },
  {
    "text": "or maybe just with support on the of the CPU special instructions for locking so",
    "start": "847500",
    "end": "852839"
  },
  {
    "text": "your CPU to implement basically a mutex or to allow you to implement a mutex",
    "start": "852839",
    "end": "858240"
  },
  {
    "text": "actually or you your CPUs they need to provide some physical machine instructions for locking something and",
    "start": "858240",
    "end": "865079"
  },
  {
    "text": "there's something in early days was typically uh like a bus address so you had bus connecting components of your",
    "start": "865079",
    "end": "870720"
  },
  {
    "text": "computer and the CPU was locking a particular set of bits on this bus",
    "start": "870720",
    "end": "875940"
  },
  {
    "text": "addressing nowadays it's a little different but still goes down to the same concept we are locking a memory",
    "start": "875940",
    "end": "881519"
  },
  {
    "text": "address and we are doing that with the help of CPU so now CPU needs to be our of your login how CPUs Implement that we",
    "start": "881519",
    "end": "889260"
  },
  {
    "text": "won't be getting that low level today but in for us enough is that we need to have the CPU uh CPU support for that",
    "start": "889260",
    "end": "898440"
  },
  {
    "text": "typically we just use those things from the operating system meaning that",
    "start": "898440",
    "end": "903720"
  },
  {
    "text": "operating system provides us some way of having having mutex right it may be even",
    "start": "903720",
    "end": "909540"
  },
  {
    "text": "that this mutex is optimized for user mode kernel mode and multiple other scenarios but generally we just rely on",
    "start": "909540",
    "end": "916260"
  },
  {
    "text": "things which are provided by the operating system so if Windows if you are running on Windows and you do use",
    "start": "916260",
    "end": "921660"
  },
  {
    "text": "any mutex or critical section actually.net uses the same mechans which are provided by the OS itself the other",
    "start": "921660",
    "end": "929279"
  },
  {
    "text": "mechanism oh when it comes to the API those are the the names of the functions we are just using in.net is just mutex",
    "start": "929279",
    "end": "935459"
  },
  {
    "text": "the other mechanism which is pretty common is counting semaphore so we want",
    "start": "935459",
    "end": "941040"
  },
  {
    "text": "to generalize the idea of controlling access to something previously we were",
    "start": "941040",
    "end": "946199"
  },
  {
    "text": "just making sure that only one fret can access the critical section now we want",
    "start": "946199",
    "end": "951660"
  },
  {
    "text": "to allow potentially multiple threads but limited number of them so we want to count how many Frets can enter the",
    "start": "951660",
    "end": "958560"
  },
  {
    "text": "critical section and this is called uh called a counting semaphore and Counting",
    "start": "958560",
    "end": "963600"
  },
  {
    "text": "SEMA for primitive provides two operations V and K and their names come from Dutch so this is very Hogan and pro",
    "start": "963600",
    "end": "971220"
  },
  {
    "text": "Baron so they either increase or decrease the counter and there is one pretty common uh interview question you",
    "start": "971220",
    "end": "978420"
  },
  {
    "text": "may have I have heard that or maybe ask yourselves is what's the difference between like mutex and between",
    "start": "978420",
    "end": "984839"
  },
  {
    "text": "accounting semaphore which counts only zero and one so allows just one thread to enter the critical section and we",
    "start": "984839",
    "end": "991920"
  },
  {
    "text": "call that SEMA for a binary semaphore so what's the difference there are actually multiple of those even though they do",
    "start": "991920",
    "end": "999180"
  },
  {
    "text": "not seem to be like that obvious first thing is like generally mutex",
    "start": "999180",
    "end": "1005300"
  },
  {
    "text": "shares and trucks the ownership meaning that mutex knows who took it who locked",
    "start": "1005300",
    "end": "1011839"
  },
  {
    "text": "it who owns the mutex currently and who in this particular case means which thread running in the operating system",
    "start": "1011839",
    "end": "1018259"
  },
  {
    "text": "okay semaphore doesn't dug it like semaphore doesn't share it doesn't track the ownership it just blindly increases",
    "start": "1018259",
    "end": "1025880"
  },
  {
    "text": "or decreases the counter okay that's it and this poses multiple issues when we",
    "start": "1025880",
    "end": "1030980"
  },
  {
    "text": "are talking about our thread dying in the middle of critical section because if we are protecting a critical section",
    "start": "1030980",
    "end": "1037220"
  },
  {
    "text": "with mutex and the threat dies then you know that the critical section is now",
    "start": "1037220",
    "end": "1043220"
  },
  {
    "text": "abandoned there is no thread running inside because well the threat died but if you are doing that with semaphore",
    "start": "1043220",
    "end": "1049760"
  },
  {
    "text": "then you don't know whether critical section is abandoned or not similarly",
    "start": "1049760",
    "end": "1055039"
  },
  {
    "text": "you can text take mutex recursively if you have a recursive function and you are doing lock something inside this",
    "start": "1055039",
    "end": "1061760"
  },
  {
    "text": "function then you can do it many times you can do it recursively with mutex you",
    "start": "1061760",
    "end": "1067940"
  },
  {
    "text": "can't do that with semaphore because well semaphore doesn't know it is you who is holding the semaphore because it",
    "start": "1067940",
    "end": "1073520"
  },
  {
    "text": "just counts right similarly this also blocks the application from terminating",
    "start": "1073520",
    "end": "1078799"
  },
  {
    "text": "for instance if we have a critical section and we know someone is there",
    "start": "1078799",
    "end": "1083840"
  },
  {
    "text": "then the this mutex can blocks or stop the application from terminating we",
    "start": "1083840",
    "end": "1089240"
  },
  {
    "text": "cannot do that with semaphores we cannot control priorities because we don't know who holds that right so we just know",
    "start": "1089240",
    "end": "1096380"
  },
  {
    "text": "someone might be there but we have no sure we are not sure about that and another thing the most important one is",
    "start": "1096380",
    "end": "1102860"
  },
  {
    "text": "actually if you are trying to take a mutex like or use a lock keyword in in",
    "start": "1102860",
    "end": "1108919"
  },
  {
    "text": "c-sharp or just do mutex the Loca choir or whatever and the threat owning it",
    "start": "1108919",
    "end": "1114620"
  },
  {
    "text": "dies then you are notified about that right.net froze an exception of UK there",
    "start": "1114620",
    "end": "1120080"
  },
  {
    "text": "was an abandoned mutex so feel free to take it but you need to know whether the data structures are Mouse incorrect",
    "start": "1120080",
    "end": "1126200"
  },
  {
    "text": "State okay with semaphore for Freight dice then bang you're done SEMA 4 just",
    "start": "1126200",
    "end": "1131840"
  },
  {
    "text": "won't let you know that that it's been abandoned so generally a rule of thumb is if you are using semaphores be",
    "start": "1131840",
    "end": "1138799"
  },
  {
    "text": "careful because they may be way harder to use than it's they seem to be obviously some API and one interesting",
    "start": "1138799",
    "end": "1146120"
  },
  {
    "text": "thing about semaforce.net provides actually two implementations of them one of them the semaphore is backed by the",
    "start": "1146120",
    "end": "1152900"
  },
  {
    "text": "operating system construct so it's typically slower because it goes through the kernel mode switch from user lens to",
    "start": "1152900",
    "end": "1158900"
  },
  {
    "text": "Kernel land Etc some are for slim try fixing that or maybe improving on that a",
    "start": "1158900",
    "end": "1164299"
  },
  {
    "text": "little bit by also doing a spin looping so before entering the kernel mode Auto",
    "start": "1164299",
    "end": "1169700"
  },
  {
    "text": "does is it first tries to spin for a little and then it makes it a little faster okay so generally the",
    "start": "1169700",
    "end": "1176299"
  },
  {
    "text": "recommendation is if you generally you should know what you're doing when you are using locking Primitives but",
    "start": "1176299",
    "end": "1181700"
  },
  {
    "text": "recommendation might be that consider SEMA for slim instead of the semaphore and now we are actually entering a very",
    "start": "1181700",
    "end": "1188240"
  },
  {
    "text": "interesting world how should we tag a concurrency primitive okay how should we lock it and there are two typical",
    "start": "1188240",
    "end": "1194179"
  },
  {
    "text": "approaches first of them is go to sleep so ask the operating system hey I'd like",
    "start": "1194179",
    "end": "1200179"
  },
  {
    "text": "to take this a concurrency primitive I'd like to acquire it but it's being taken",
    "start": "1200179",
    "end": "1205520"
  },
  {
    "text": "now I'm going to sleep please do wake me up when it's ready okay so operating system will keep the track of of the",
    "start": "1205520",
    "end": "1212720"
  },
  {
    "text": "concurrency primitive for you and will wake you up when it's available and you'll be given this lock or whatever",
    "start": "1212720",
    "end": "1218299"
  },
  {
    "text": "else right however this is expensive because operating system needs to take care of that expensive as in transition",
    "start": "1218299",
    "end": "1225440"
  },
  {
    "text": "from user mode to the kernel mode takes a significant amount of time significant",
    "start": "1225440",
    "end": "1230840"
  },
  {
    "text": "number of milliseconds so generally if we are doing this hundreds or thousands of time a second then generally it will",
    "start": "1230840",
    "end": "1238520"
  },
  {
    "text": "it will hit us it's like a performance hit and more importantly but this is something for operating system",
    "start": "1238520",
    "end": "1245179"
  },
  {
    "text": "implementation and writing drivers and all that stuff we can't sleep in all",
    "start": "1245179",
    "end": "1250280"
  },
  {
    "text": "circumstances we can't sleep for instance if we are writing driver kernel drivers because well operating system",
    "start": "1250280",
    "end": "1256640"
  },
  {
    "text": "cannot just go to sleep some or in all the cases so this is something we'll need to think about that but that's a",
    "start": "1256640",
    "end": "1263240"
  },
  {
    "text": "whole different story the other approach is let's just do a spin weight so we might want to hog the CPU so we will be",
    "start": "1263240",
    "end": "1270440"
  },
  {
    "text": "constantly checking hey log are you available to be acquired I am not okay I'll sleep for a second just wait or",
    "start": "1270440",
    "end": "1276440"
  },
  {
    "text": "maybe I'm just looping without sleeping okay and then you hear your fans going on your computer becomes loud your CPU",
    "start": "1276440",
    "end": "1283280"
  },
  {
    "text": "spikes up and you're just doing that over and over again okay so this is the so-called spin weighting it's generally",
    "start": "1283280",
    "end": "1290120"
  },
  {
    "text": "something we should avoid but still if you are spinning for like short amount of time for instance a couple of",
    "start": "1290120",
    "end": "1295820"
  },
  {
    "text": "milliseconds because we know that the the lock or the concurrency primitive we",
    "start": "1295820",
    "end": "1301159"
  },
  {
    "text": "are using is going to be released very soon then it's actually pretty often used and for instance your Google Chrome",
    "start": "1301159",
    "end": "1308240"
  },
  {
    "text": "browser ever use Google Chrome and your laptop was like crazy uh well Google",
    "start": "1308240",
    "end": "1313460"
  },
  {
    "text": "Chrome implemented their own spin locks and their own concurrency Primitives and all that stuff under the hood running in",
    "start": "1313460",
    "end": "1319220"
  },
  {
    "text": "user mode they claim it's much faster but maybe it's the cost of your fans going bus as well so generally computers",
    "start": "1319220",
    "end": "1326480"
  },
  {
    "text": "do that multiple upper applications are doing that and this is sometimes in kernel programming this is the only",
    "start": "1326480",
    "end": "1332360"
  },
  {
    "text": "thing we can actually do but generally we probably want to avoid that when we are writing just a regular business line",
    "start": "1332360",
    "end": "1339020"
  },
  {
    "text": "of business applications the other interesting um concurrency primitive is called",
    "start": "1339020",
    "end": "1345620"
  },
  {
    "text": "monitor so what do we do is we always or pretty often we have this um this",
    "start": "1345620",
    "end": "1353600"
  },
  {
    "text": "pattern that we would like to lock some primitive like mutex then check some",
    "start": "1353600",
    "end": "1358880"
  },
  {
    "text": "condition hey is it safe to proceed because I want to do something specific and if it's not then what do I want to",
    "start": "1358880",
    "end": "1366440"
  },
  {
    "text": "do well I want to release this mutex and wait for a bit and then try again if the",
    "start": "1366440",
    "end": "1373159"
  },
  {
    "text": "condition is now true okay so what do I do well I just spin in the loop I spin in the loop and the question is how do I",
    "start": "1373159",
    "end": "1379820"
  },
  {
    "text": "do that well do I exit the log and take a sleep do I spin weight for a couple of minutes and all that stuff and generally",
    "start": "1379820",
    "end": "1386240"
  },
  {
    "text": "the solution for that is the monitor with condition variable so monitor with",
    "start": "1386240",
    "end": "1391940"
  },
  {
    "text": "condition variable is a concept which does exactly this code under the hood",
    "start": "1391940",
    "end": "1397220"
  },
  {
    "text": "for you but takes care of the operating system so in this point in this if condition do work sorry in the other and",
    "start": "1397220",
    "end": "1405080"
  },
  {
    "text": "this Branch else loop again operating system would put us to sleep and wait for the condition condition to be true",
    "start": "1405080",
    "end": "1412460"
  },
  {
    "text": "and then wake up us again and this is another primitive we should be using so if we see p pattern like this then let's",
    "start": "1412460",
    "end": "1419299"
  },
  {
    "text": "just go for it and obviously some API for that now the important thing how we are using that in",
    "start": "1419299",
    "end": "1426320"
  },
  {
    "text": "dotnet the API for that is Monitor pulls plus monitor weight if we are doing that",
    "start": "1426320",
    "end": "1431600"
  },
  {
    "text": "it's super crucial and there's a source of common bugs that we are trying to do lock sync and then we are doing monitor",
    "start": "1431600",
    "end": "1438200"
  },
  {
    "text": "weight inside this if Branch okay and the thing here is this should never be",
    "start": "1438200",
    "end": "1444200"
  },
  {
    "text": "if because someone might call monitor pulls all or maybe a driver might wake",
    "start": "1444200",
    "end": "1449539"
  },
  {
    "text": "you up or maybe operating system might wake your thread so this is called a spurious wake up meaning that even",
    "start": "1449539",
    "end": "1456500"
  },
  {
    "text": "though you went to sleep in this monitor wait line some think woke you up before",
    "start": "1456500",
    "end": "1461900"
  },
  {
    "text": "this condition was true so before you could safely proceed so what you need to do is instead of having F here you need",
    "start": "1461900",
    "end": "1468679"
  },
  {
    "text": "to have a while and you might go to sleep multiple times uh that's it for like the most basic uh",
    "start": "1468679",
    "end": "1476539"
  },
  {
    "text": "Primitives now we are talking about entering the word how do we synchronize across multiple applications multiple",
    "start": "1476539",
    "end": "1483799"
  },
  {
    "text": "computers multiple nodes across the world so we have this distinction between local Primitives like mutex",
    "start": "1483799",
    "end": "1491179"
  },
  {
    "text": "which is held only in the user land and works only for your application or maybe we have Primitives which are now",
    "start": "1491179",
    "end": "1497840"
  },
  {
    "text": "becoming Global maybe they are Global for the operating system so they are typically named mutexes or named",
    "start": "1497840",
    "end": "1503419"
  },
  {
    "text": "semaphores or whatever else or maybe we are just using even something different for instance Cloud lock to synchronize",
    "start": "1503419",
    "end": "1509360"
  },
  {
    "text": "between clouds or between machines around the world okay so the important part around that is well obviously those",
    "start": "1509360",
    "end": "1515900"
  },
  {
    "text": "global locks they are much slower depending whether we are talking about inter process logs this is just a bit",
    "start": "1515900",
    "end": "1523340"
  },
  {
    "text": "slower however if we're talking about cross machine locks well they are way way slower so we need to keep that in",
    "start": "1523340",
    "end": "1529820"
  },
  {
    "text": "mind and we need to understand that if we want to get the high highest possible performance then we should avoid that",
    "start": "1529820",
    "end": "1535640"
  },
  {
    "text": "then there is a fancy bag around that this example actually shows you how you should be patient and careful when you",
    "start": "1535640",
    "end": "1542539"
  },
  {
    "text": "are reading stack Overflow ever heard about stack Overflow yeah okay so if you want to have a like a global lock for a",
    "start": "1542539",
    "end": "1549980"
  },
  {
    "text": "dll if you Google something like this and and go obviously it shows you a",
    "start": "1549980",
    "end": "1555140"
  },
  {
    "text": "stack Overflow answer which tells you well do this something like dll get good yeah and this answer was wrong",
    "start": "1555140",
    "end": "1562580"
  },
  {
    "text": "a meaning wrong in this sense that it wasn't getting a unique identifier but",
    "start": "1562580",
    "end": "1567620"
  },
  {
    "text": "something which was pre-compiled and a common value and then two different applications from two completely",
    "start": "1567620",
    "end": "1574580"
  },
  {
    "text": "different developers implemented exactly the same code snippet from stack Overflow and someone was tweeting on on",
    "start": "1574580",
    "end": "1581960"
  },
  {
    "text": "Twitter about that that hey if you installed this application and like everything got crashed to deadlock or",
    "start": "1581960",
    "end": "1588020"
  },
  {
    "text": "whatever he started debugging both of them because the guy was a programmer and he found out yep they are using the",
    "start": "1588020",
    "end": "1593720"
  },
  {
    "text": "same code from stack Overflow so generally if you're coughing blindly we never do that obviously but if you",
    "start": "1593720",
    "end": "1600679"
  },
  {
    "text": "happen to see someone doing that keep in mind that well those things may actually cause multiple problems from distant",
    "start": "1600679",
    "end": "1607580"
  },
  {
    "text": "applications it's not only that you are affecting your business code but maybe someone else's code as well moving on",
    "start": "1607580",
    "end": "1614960"
  },
  {
    "text": "when we need to go with truly Global locks so locks between machines they",
    "start": "1614960",
    "end": "1620419"
  },
  {
    "text": "need to be discoverable in some way so they need to be named they need to have like a global unique identifiers or some",
    "start": "1620419",
    "end": "1627679"
  },
  {
    "text": "well-known names or some well-known patterns and they typically require network communication so notice how fast",
    "start": "1627679",
    "end": "1634279"
  },
  {
    "text": "we were before and how slow we are getting now how long does it take to get from Australia to let's say the United",
    "start": "1634279",
    "end": "1641659"
  },
  {
    "text": "States and I mean about the wire now but about the plane and if you can't like",
    "start": "1641659",
    "end": "1646940"
  },
  {
    "text": "calculate the speed of light and how many kilometers it is from here to there you'll quickly realize that just one",
    "start": "1646940",
    "end": "1654799"
  },
  {
    "text": "single round trip will take you tens and hundreds of milliseconds one round trip",
    "start": "1654799",
    "end": "1660740"
  },
  {
    "text": "and if we are talking about getting a lock between multiple machines then we are probably talking about like",
    "start": "1660740",
    "end": "1666919"
  },
  {
    "text": "two-phase Comet which has what four round trips you go there and ask hey can you do this yep I can okay do this here",
    "start": "1666919",
    "end": "1673700"
  },
  {
    "text": "if I did that we have four round trips lovely and and then what and we are now",
    "start": "1673700",
    "end": "1679100"
  },
  {
    "text": "talking about like hundreds of milliseconds that's why distributed logs will kill your performance immediately",
    "start": "1679100",
    "end": "1685039"
  },
  {
    "text": "so generally avoid doing that and only use them if you are know what you're doing if you know what you're doing and",
    "start": "1685039",
    "end": "1690919"
  },
  {
    "text": "if you are sure that's the that's the right solution now we come to some problems with locks",
    "start": "1690919",
    "end": "1696559"
  },
  {
    "text": "well there are multiple things when what happens when something dies if we are",
    "start": "1696559",
    "end": "1701840"
  },
  {
    "text": "running inside a critical section and we die is it safe to proceed how do we know",
    "start": "1701840",
    "end": "1707000"
  },
  {
    "text": "if it's safe to proceed how do we know if we died if we are running a semaphore",
    "start": "1707000",
    "end": "1712940"
  },
  {
    "text": "we don't know that but if we are just running a lock in between machine sorry",
    "start": "1712940",
    "end": "1718640"
  },
  {
    "text": "not between machines between multiple applications on the same machine how do we know whether the other threat in this",
    "start": "1718640",
    "end": "1725480"
  },
  {
    "text": "other machine this other application died or not because we don't get an",
    "start": "1725480",
    "end": "1730520"
  },
  {
    "text": "exception right we may not get an exception not get enough notification how do we check who owns the lock to",
    "start": "1730520",
    "end": "1737059"
  },
  {
    "text": "just ping that guy how do we know if we are talking about multiple machines that",
    "start": "1737059",
    "end": "1742279"
  },
  {
    "text": "the other guy died and is not like running super slow or maybe our internet connection got super slow and we just",
    "start": "1742279",
    "end": "1749240"
  },
  {
    "text": "cannot reach the other end right how do we get to that and the most important thing if there was one sentence you",
    "start": "1749240",
    "end": "1755840"
  },
  {
    "text": "remember memorized from this talk it's this one always acquire your locks with",
    "start": "1755840",
    "end": "1761720"
  },
  {
    "text": "timeouts this can be crazy high timeout something like 24 hours right because",
    "start": "1761720",
    "end": "1767419"
  },
  {
    "text": "our process is finishing milliseconds so 24 hours seems like should never happen and then one day you might be surprised",
    "start": "1767419",
    "end": "1774799"
  },
  {
    "text": "that it does never acquire a log without the timeout which means actually you might now fit might now think if you are",
    "start": "1774799",
    "end": "1781580"
  },
  {
    "text": "c-sharp developers and most of you are about two things you use commonly in",
    "start": "1781580",
    "end": "1787039"
  },
  {
    "text": "your code base first of them being lock keyword how do you put a timeout in lock",
    "start": "1787039",
    "end": "1792080"
  },
  {
    "text": "keyword does this word support the timeout and second more importantly because how many of you ever use lock",
    "start": "1792080",
    "end": "1798559"
  },
  {
    "text": "like this year okay a couple of hands how many of you ever used a weight this year ah how do",
    "start": "1798559",
    "end": "1806179"
  },
  {
    "text": "you put a timeout in a weight and this is exactly the same issue if you are using async in a weight you are risking",
    "start": "1806179",
    "end": "1812480"
  },
  {
    "text": "you have a timeout and like you deadlock and you have no time out inside the wait so well that look will just be there",
    "start": "1812480",
    "end": "1819200"
  },
  {
    "text": "think about that when you are writing your code and now we come to the question okay logs seem to be terrible",
    "start": "1819200",
    "end": "1825020"
  },
  {
    "text": "this goddess stage is telling us well this is worst thing what can we do instead we can use uh and we'll just",
    "start": "1825020",
    "end": "1832159"
  },
  {
    "text": "briefly touch on it there is an operation which is like not considered to be locking operation which is called",
    "start": "1832159",
    "end": "1837620"
  },
  {
    "text": "compar and swap cast for short and this comparing swap operation does something",
    "start": "1837620",
    "end": "1843080"
  },
  {
    "text": "like this code snippet on the left which basically is taking a lock then getting",
    "start": "1843080",
    "end": "1848840"
  },
  {
    "text": "some value from the memory comparing it to the new value we would like to have stored in the memory and if this value",
    "start": "1848840",
    "end": "1856760"
  },
  {
    "text": "was as we expected to be then we override it and then we just return where is it useful and how can this be",
    "start": "1856760",
    "end": "1863299"
  },
  {
    "text": "useful well instead of doing a lock and going with something we can now return",
    "start": "1863299",
    "end": "1869899"
  },
  {
    "text": "to this issue we had in like one of the first slide which was variable plus plus okay we can now do this explicitly read",
    "start": "1869899",
    "end": "1877340"
  },
  {
    "text": "the variable value increment it in our CPU registers and now call compare and",
    "start": "1877340",
    "end": "1883159"
  },
  {
    "text": "swap operation so this operation will do this we'll do go and say hey if the",
    "start": "1883159",
    "end": "1888620"
  },
  {
    "text": "value in the memory is still this which we read then please override it with",
    "start": "1888620",
    "end": "1894200"
  },
  {
    "text": "this value which we have here and this will be done atomically meaning it either succeeds or fails and CPUs will",
    "start": "1894200",
    "end": "1901940"
  },
  {
    "text": "take care of making sure that it doesn't break anything and we can just use it without holding the lock potentially we",
    "start": "1901940",
    "end": "1908600"
  },
  {
    "text": "need to do this in a loop meaning that because if the value was changed in the meantime then we just repeat this",
    "start": "1908600",
    "end": "1914000"
  },
  {
    "text": "operation okay over and over again but this way we are avoiding logs and if we are going with log free programming then",
    "start": "1914000",
    "end": "1920240"
  },
  {
    "text": "obviously this is the like the most important primitive for lock free code and there are multiple instructions for",
    "start": "1920240",
    "end": "1926779"
  },
  {
    "text": "instance on x86 so CPUs probably most of you use it's CMP exchange okay so this",
    "start": "1926779",
    "end": "1933140"
  },
  {
    "text": "is supported by the operating not by the operating system itself but the by the CPU itself and exposed to for instance",
    "start": "1933140",
    "end": "1940159"
  },
  {
    "text": "in.net business class interlocked compare exchange so this is how we do that to avoid logs and based on that we",
    "start": "1940159",
    "end": "1946340"
  },
  {
    "text": "build more and more sophisticated concurrency Primitives now getting down to some real life scenarios so where can",
    "start": "1946340",
    "end": "1953899"
  },
  {
    "text": "things really go wrong even though we might not even be using logs at all or",
    "start": "1953899",
    "end": "1959240"
  },
  {
    "text": "not be aware that we are using them first thing is finalizers ever seen a",
    "start": "1959240",
    "end": "1965179"
  },
  {
    "text": "disposable interface I guess you have okay so now I'm going to show you something which is first this is a demo",
    "start": "1965179",
    "end": "1972020"
  },
  {
    "text": "so beware it may fail as with all demos running out running like life however",
    "start": "1972020",
    "end": "1977600"
  },
  {
    "text": "this is also something which is a a bit tricky so first things first",
    "start": "1977600",
    "end": "1983179"
  },
  {
    "text": "if we are running a finalizer let me get to a code like this what if we are",
    "start": "1983179",
    "end": "1989179"
  },
  {
    "text": "running a finalizer so if we are running any code which implements eye disposable we should dispose it that's obvious",
    "start": "1989179",
    "end": "1996440"
  },
  {
    "text": "right but now comes the trick if you do terminate your application by calling",
    "start": "1996440",
    "end": "2001480"
  },
  {
    "text": "environment exit or by just clicking x button in top right corner then.net",
    "start": "2001480",
    "end": "2006880"
  },
  {
    "text": "platform doesn't guarantee you that it will call your finalizers but thus lets",
    "start": "2006880",
    "end": "2012399"
  },
  {
    "text": "you know that it might try calling them meaning that meaning that when you exit",
    "start": "2012399",
    "end": "2018100"
  },
  {
    "text": "your application your finalizers may be called by the.net platform itself okay",
    "start": "2018100",
    "end": "2023740"
  },
  {
    "text": "not guaranteed that it will be done but this is possible now what comes now",
    "start": "2023740",
    "end": "2029019"
  },
  {
    "text": "comes the thing this is like a seemingly safe piece of code we are just opening",
    "start": "2029019",
    "end": "2034480"
  },
  {
    "text": "the file stream writing some content to it and that's it and we are using the using keywords so it should clear clean",
    "start": "2034480",
    "end": "2041320"
  },
  {
    "text": "things up right now let's see what might go wrong if it doesn't break this time then I have a video showing that so",
    "start": "2041320",
    "end": "2047500"
  },
  {
    "text": "hopefully we are good so what we are going to do is we are just running trying to write a ABC content to the",
    "start": "2047500",
    "end": "2053980"
  },
  {
    "text": "file and this application runs in stew mode like the first mode is just constantly like while true constantly",
    "start": "2053980",
    "end": "2061839"
  },
  {
    "text": "running itself again and the other mode we are just trying to print something to",
    "start": "2061839",
    "end": "2067060"
  },
  {
    "text": "the file so we create two threads one of them is printing and the other one of",
    "start": "2067060",
    "end": "2072280"
  },
  {
    "text": "them is terminating the application with environment exit right so what happens if we now write a try running this code",
    "start": "2072280",
    "end": "2079000"
  },
  {
    "text": "we have the content here which is just ABC okay so this is what we are trying to write and now let's run it and",
    "start": "2079000",
    "end": "2086260"
  },
  {
    "text": "because I'm presenting well you might be seeing the screen flickering right it's constantly running application in the",
    "start": "2086260",
    "end": "2092200"
  },
  {
    "text": "background so let's run it for a while and see if it breaks it did break many times earlier this morning when I was",
    "start": "2092200",
    "end": "2097839"
  },
  {
    "text": "trying it but what's going on under the hood we have two Frets one of them is printing and using this uh this using",
    "start": "2097839",
    "end": "2104380"
  },
  {
    "text": "keyword so it will call dispose method on the stream okay and inside this",
    "start": "2104380",
    "end": "2110020"
  },
  {
    "text": "dispose method under the hood it will be flashing the stream down the line so printing the content to the file okay",
    "start": "2110020",
    "end": "2117040"
  },
  {
    "text": "but the other thread is terminating the application and when we are terminating",
    "start": "2117040",
    "end": "2122260"
  },
  {
    "text": "the application.net might call your finalizers finalizer might call what dispose method and then we go to the",
    "start": "2122260",
    "end": "2129820"
  },
  {
    "text": "file content and Bank there you go we have ABC ABC it was flashed twice okay",
    "start": "2129820",
    "end": "2135220"
  },
  {
    "text": "this is something all your apps all your.net apps well there is a risk you",
    "start": "2135220",
    "end": "2140859"
  },
  {
    "text": "are doing something like this generally exiting your application is not trivial guys it's not just environment.exit",
    "start": "2140859",
    "end": "2147460"
  },
  {
    "text": "right folks this is much harder than this so all your applications are actually multi-threaded by design by",
    "start": "2147460",
    "end": "2154660"
  },
  {
    "text": "default and you need to deal with that and more importantly well the question is is this a bargain.net it's not",
    "start": "2154660",
    "end": "2161320"
  },
  {
    "text": "because us if you are doing something like this you should control the concurrency primitive so in my case the",
    "start": "2161320",
    "end": "2168579"
  },
  {
    "text": "solution to that was something like this just let let the garbage collector know that it should not call the dispose on",
    "start": "2168579",
    "end": "2176260"
  },
  {
    "text": "my behalf that I'll be doing that on my own so I'm I'm registering those this",
    "start": "2176260",
    "end": "2181480"
  },
  {
    "text": "stream and this writer from the garbage collector so now when someone calls environment exit it doesn't code that it",
    "start": "2181480",
    "end": "2188079"
  },
  {
    "text": "doesn't call the uh the dispose method on the other hand uh today I also",
    "start": "2188079",
    "end": "2193359"
  },
  {
    "text": "noticed and let's try it again maybe we'll get similar issue again if you are doing something like this like double",
    "start": "2193359",
    "end": "2199599"
  },
  {
    "text": "flush is not the only erroring oh sorry I just fixed it and I don't want to fix",
    "start": "2199599",
    "end": "2205240"
  },
  {
    "text": "it the like the the double flash is not the error you might get the other error",
    "start": "2205240",
    "end": "2212260"
  },
  {
    "text": "we might get and let's wait for it for a couple of seconds is actually some internal document structures may get",
    "start": "2212260",
    "end": "2218320"
  },
  {
    "text": "broken so sometimes I am getting a completely different exception here let's see if we got it telling that it",
    "start": "2218320",
    "end": "2224200"
  },
  {
    "text": "tried to obtain some safe handle from the windows platform operating system nope the same error as before but",
    "start": "2224200",
    "end": "2230140"
  },
  {
    "text": "generally there are multiple issues here which we are going uh which we might see so generally this is the first um the",
    "start": "2230140",
    "end": "2237160"
  },
  {
    "text": "first thingy whenever we are doing any like finalizers or any uh objects which",
    "start": "2237160",
    "end": "2243280"
  },
  {
    "text": "need to be disposed be aware that may break those for you the other exception",
    "start": "2243280",
    "end": "2248680"
  },
  {
    "text": "we might be getting is a common common pattern you might have seen at your uni",
    "start": "2248680",
    "end": "2254020"
  },
  {
    "text": "or anywhere else which is you acquire the lock then you enter the try block and try releasing it and finally right",
    "start": "2254020",
    "end": "2260940"
  },
  {
    "text": "what could go wrong and the answer is if there is an exception between acquire",
    "start": "2260940",
    "end": "2266740"
  },
  {
    "text": "and try then you never release this lock and this is something actually dotnet",
    "start": "2266740",
    "end": "2272140"
  },
  {
    "text": "solved or because it did have this bug with your lock keyword it was doing exactly this before.net 4.5 so they did",
    "start": "2272140",
    "end": "2280060"
  },
  {
    "text": "have this bug and they fix it now they this acquire lock is inside the try block but if you go to other platforms",
    "start": "2280060",
    "end": "2286480"
  },
  {
    "text": "Java python anywhere else you pretty often see exactly the same pattern being shown as the one right pattern to use",
    "start": "2286480",
    "end": "2293140"
  },
  {
    "text": "and the question is well do you have any guarantees there will be no exception in between okay another issue yet another",
    "start": "2293140",
    "end": "2300160"
  },
  {
    "text": "thing is double check lock so this is also pattern you probably learned at your University which seemed to be",
    "start": "2300160",
    "end": "2306820"
  },
  {
    "text": "amazing right what is the problem with like initializing a Singleton we entered the uh the synchronized section or log",
    "start": "2306820",
    "end": "2314020"
  },
  {
    "text": "section this code comes from java same can be or same as possible in c-sharp so",
    "start": "2314020",
    "end": "2319480"
  },
  {
    "text": "we enter the lock lock section and we check whether our Singleton object is null if it's now meaning it wasn't",
    "start": "2319480",
    "end": "2326020"
  },
  {
    "text": "initialized yet okay so we just initialize it and then we return the instance problem with that is it's super",
    "start": "2326020",
    "end": "2332200"
  },
  {
    "text": "slow because every single time we take this Singleton we want to get this Singleton instance we are accessing this",
    "start": "2332200",
    "end": "2339760"
  },
  {
    "text": "log entering the critical section right so we should avoid that because it's slow so someone figured out why not",
    "start": "2339760",
    "end": "2345640"
  },
  {
    "text": "check before entering the critical section if the object is initialized or not Sims doable seems possible the",
    "start": "2345640",
    "end": "2352060"
  },
  {
    "text": "problem is your platform does not guarantee you that it's some",
    "start": "2352060",
    "end": "2357520"
  },
  {
    "text": "optimizations down on the CPU level are allowed to improve the code performance and your platform specifically jvm in",
    "start": "2357520",
    "end": "2364720"
  },
  {
    "text": "this case allows you or allows for your code to first store this new helper",
    "start": "2364720",
    "end": "2371079"
  },
  {
    "text": "instance inside the helper variable and then call the Constructor",
    "start": "2371079",
    "end": "2376180"
  },
  {
    "text": "so with this possible that you already have the helper like handle to the object initialized but the object is not",
    "start": "2376180",
    "end": "2383140"
  },
  {
    "text": "done initializing itself then the other thread comes in checks if helper is now it's not okay I'm going I'm going I'm",
    "start": "2383140",
    "end": "2389980"
  },
  {
    "text": "doing that and use this uninitialized object dot net seemingly uh like doesn't",
    "start": "2389980",
    "end": "2395740"
  },
  {
    "text": "tell us that this problem is real in dotted platform however there is no guarantee that it's not meaning that we",
    "start": "2395740",
    "end": "2402700"
  },
  {
    "text": "should be avoiding double check lock and probably just using lazy from.net platform if we want to have a single tone another issue if you are allocating",
    "start": "2402700",
    "end": "2410619"
  },
  {
    "text": "anything you're like you are allocating new new object right it's allocated in",
    "start": "2410619",
    "end": "2416320"
  },
  {
    "text": "the Heap okay and the Heap because it's used by multiple threads typically needs",
    "start": "2416320",
    "end": "2421480"
  },
  {
    "text": "to be locked as well so there is a lock inside your hip okay so when you go new object.net platform and the operating",
    "start": "2421480",
    "end": "2428140"
  },
  {
    "text": "system takes the lock so other thread cannot change the Heap modify the hip pointers when you are doing that this",
    "start": "2428140",
    "end": "2435280"
  },
  {
    "text": "means that if you just passed some other threat or killed some other threat and",
    "start": "2435280",
    "end": "2441040"
  },
  {
    "text": "that other threat was right in the middle of allocation then you'd effectively kill this lock it's acquired",
    "start": "2441040",
    "end": "2447820"
  },
  {
    "text": "it would never be released okay so what happens is you will get a deadlock",
    "start": "2447820",
    "end": "2452980"
  },
  {
    "text": "pretty soon because even seemingly safe a console.writeline will probably try",
    "start": "2452980",
    "end": "2458380"
  },
  {
    "text": "allocating some string under the hood and you'll get a deadlock okay never kill your threads never even pause your",
    "start": "2458380",
    "end": "2464260"
  },
  {
    "text": "Frets if you pass some other fret and then do logger print I paused you you",
    "start": "2464260",
    "end": "2469900"
  },
  {
    "text": "get a location and you may get an error okay so multiple platforms deal with that in multiple ways for instance they",
    "start": "2469900",
    "end": "2475960"
  },
  {
    "text": "have different hip for different Frets so each fret has its own hip but generally you never know what you're",
    "start": "2475960",
    "end": "2481359"
  },
  {
    "text": "dealing with or maybe you can tell me how does it work in Python JavaScript C plus plus on any other language you",
    "start": "2481359",
    "end": "2487300"
  },
  {
    "text": "probably used last week and if you don't do not pause your Frets that's the rule of thumb the other thing is dll main",
    "start": "2487300",
    "end": "2494560"
  },
  {
    "text": "lock in Windows when you're loading some new library inside your process space a",
    "start": "2494560",
    "end": "2500500"
  },
  {
    "text": "lock is being taken meaning that if you do something like from your main",
    "start": "2500500",
    "end": "2505540"
  },
  {
    "text": "function which would cause another Library being loaded then you get a",
    "start": "2505540",
    "end": "2510579"
  },
  {
    "text": "deadlock okay yet another situation we probably won't hit that with c-sharp easily because we very rarely Implement",
    "start": "2510579",
    "end": "2517300"
  },
  {
    "text": "our own dll main function but this is pretty common what we were doing with like regular dlls with C plus and this",
    "start": "2517300",
    "end": "2524380"
  },
  {
    "text": "lock is pretty pretty common another example is something touching more like a Linux or Mac OS or generally Unix",
    "start": "2524380",
    "end": "2531339"
  },
  {
    "text": "operating systems if you do fork and you don't do exact you risk another deadlock",
    "start": "2531339",
    "end": "2537700"
  },
  {
    "text": "how does it work when you have multiple threads in your application and one of the thread is forking the process okay",
    "start": "2537700",
    "end": "2545220"
  },
  {
    "text": "the child process gets only this one single thread audio other friends which",
    "start": "2545220",
    "end": "2552880"
  },
  {
    "text": "were running in parent do not get to the child process when you Fork so if any of",
    "start": "2552880",
    "end": "2558280"
  },
  {
    "text": "those other threats held a lock then you get another case for deadlock because",
    "start": "2558280",
    "end": "2564099"
  },
  {
    "text": "this will lock will never be released in the child okay so if you fork and then",
    "start": "2564099",
    "end": "2569800"
  },
  {
    "text": "for instance try printing out hey I did Fork then what you get is someone might",
    "start": "2569800",
    "end": "2575500"
  },
  {
    "text": "be taking a look for your hip and you again get allocation in the middle which is locked and you get again your then",
    "start": "2575500",
    "end": "2582520"
  },
  {
    "text": "your deadlock again okay so never call Fork without exec column being called immediately after the folk no logging in",
    "start": "2582520",
    "end": "2590500"
  },
  {
    "text": "between no anything just fork and exec always and this one will skip because this is",
    "start": "2590500",
    "end": "2597579"
  },
  {
    "text": "for counter programming so we'll just skip that the other things which we are using is for instance and for instance",
    "start": "2597579",
    "end": "2603940"
  },
  {
    "text": "SQL databases if we are dealing with SQL database or any other database it",
    "start": "2603940",
    "end": "2609099"
  },
  {
    "text": "actually provides two different types of logs you need to be aware of one of them is called Latch and this is like the",
    "start": "2609099",
    "end": "2615640"
  },
  {
    "text": "actual lock primitive SQL Server uses to protect its own like memory Pages etc",
    "start": "2615640",
    "end": "2621160"
  },
  {
    "text": "etc but the other kind of lock is the lock we use for our transactions so the",
    "start": "2621160",
    "end": "2627220"
  },
  {
    "text": "isolation level heads up if you know what your isolation level is on your DB",
    "start": "2627220",
    "end": "2633160"
  },
  {
    "text": "context you are using with your database what's the default right and there is there is one hand congrats to the",
    "start": "2633160",
    "end": "2639700"
  },
  {
    "text": "gentleman the thing is this default depends on the technology you are using for instance if you are connecting with",
    "start": "2639700",
    "end": "2646000"
  },
  {
    "text": "DB context from NTT framework I might be wrong here but I think it was going with serialized however it was not okay",
    "start": "2646000",
    "end": "2653260"
  },
  {
    "text": "apparently I was wrong uh but some other Technologies were going with not even",
    "start": "2653260",
    "end": "2658300"
  },
  {
    "text": "with the repeatable read but we've read committed okay so there are multiple isolation levels in play and if you",
    "start": "2658300",
    "end": "2665260"
  },
  {
    "text": "don't know which isolation level you are dealing with then you may get some issues did you for instance know that",
    "start": "2665260",
    "end": "2670420"
  },
  {
    "text": "with read committed isolation level when you are reading like records from the table you do select star from table it",
    "start": "2670420",
    "end": "2677079"
  },
  {
    "text": "may be that it has like multiple rows then you may read the same row twice just with read committed this is",
    "start": "2677079",
    "end": "2684460"
  },
  {
    "text": "something you might get and this is default for multiple Technologies so if you are dealing with that well that's",
    "start": "2684460",
    "end": "2689740"
  },
  {
    "text": "another source of locking issues you may hit and yet another is any Cloud leases",
    "start": "2689740",
    "end": "2695440"
  },
  {
    "text": "you are using right if you are accessing Azure blob skills zookeepers anything",
    "start": "2695440",
    "end": "2700900"
  },
  {
    "text": "else those things they do use some lock because they do list those mechanisms",
    "start": "2700900",
    "end": "2706300"
  },
  {
    "text": "and actually what we need to do is we need to use timeouts for locking those things most of them have timeouts by",
    "start": "2706300",
    "end": "2713140"
  },
  {
    "text": "default meaning that you try acquire hiring some some resource in the cloud it will be by default on a lease way so",
    "start": "2713140",
    "end": "2719980"
  },
  {
    "text": "you need to refresh the list every minute and this is what we are used to seems to be okay but there is another",
    "start": "2719980",
    "end": "2725020"
  },
  {
    "text": "problem what if we took this lease and we need to refresh it every minute but",
    "start": "2725020",
    "end": "2731260"
  },
  {
    "text": "we maybe not forget but we are too busy doing something and we do not refresh it",
    "start": "2731260",
    "end": "2737079"
  },
  {
    "text": "what if we are like waiting for something inside our application and it",
    "start": "2737079",
    "end": "2742480"
  },
  {
    "text": "took a little longer than a minute what if it's not just taking a look but even seemingly safe Loop performing some",
    "start": "2742480",
    "end": "2749260"
  },
  {
    "text": "calculations and we just can't get it right on time then the lease will be",
    "start": "2749260",
    "end": "2754420"
  },
  {
    "text": "released okay someone else might come take the resource acquire it and then we",
    "start": "2754420",
    "end": "2760000"
  },
  {
    "text": "are doing something believing that we still own the resource even though we do not so this is actually quite the",
    "start": "2760000",
    "end": "2766720"
  },
  {
    "text": "opposite example of what we were talking before right it's not about we cannot acquire the log or cannot acquire the",
    "start": "2766720",
    "end": "2772540"
  },
  {
    "text": "resource forever it's about that we did acquire it but it was taken out from us and we are not aware of that keep in",
    "start": "2772540",
    "end": "2778900"
  },
  {
    "text": "mind you need to refresh your leases constantly and make sure that you do that even if you are very busy doing",
    "start": "2778900",
    "end": "2784119"
  },
  {
    "text": "something else and ultimately is yet another example of Lisa's logs concurrency primitive",
    "start": "2784119",
    "end": "2790240"
  },
  {
    "text": "something which computer science will never solve for us and this is the business log we need to take what if we",
    "start": "2790240",
    "end": "2796540"
  },
  {
    "text": "want to book a ticket for a play for for a game or whatever right we want to",
    "start": "2796540",
    "end": "2801700"
  },
  {
    "text": "choose a seed so we book this seat for 15 minutes but what if the the payment doesn't go through what happens right we",
    "start": "2801700",
    "end": "2808599"
  },
  {
    "text": "need to release this lock after 15 minutes we need to have those logical business logs in some way and actually",
    "start": "2808599",
    "end": "2816280"
  },
  {
    "text": "this is something we should be considering because if we are now talking about multiple people coming at",
    "start": "2816280",
    "end": "2822280"
  },
  {
    "text": "the same time like we open uh booking tickets like midnight and there is",
    "start": "2822280",
    "end": "2827800"
  },
  {
    "text": "thousands of people waiting in line just trying to book a ticket they will just kill our application not because well we",
    "start": "2827800",
    "end": "2834099"
  },
  {
    "text": "don't have enough CPU power but because we are like locking all those seats right and they then got abandoned and",
    "start": "2834099",
    "end": "2840579"
  },
  {
    "text": "all that stuff so think about that how can we solve that on a business level do we need locks up tall okay so this is",
    "start": "2840579",
    "end": "2847420"
  },
  {
    "text": "the thingy and now moving on we will quickly run through algorithms to see how those things can be implemented on",
    "start": "2847420",
    "end": "2852940"
  },
  {
    "text": "the hood and then we will get to our unlock so the first algorithm which is which was super important for the",
    "start": "2852940",
    "end": "2858579"
  },
  {
    "text": "computer science is called Deckers algorithm and it did work did solve the critical section problem for two for two",
    "start": "2858579",
    "end": "2865720"
  },
  {
    "text": "processes or for two Frets only it was later generalized to think code",
    "start": "2865720",
    "end": "2870880"
  },
  {
    "text": "Patterson's algorithm which is now or which was able to run on multiple threads or end Frets and there were",
    "start": "2870880",
    "end": "2877900"
  },
  {
    "text": "obviously other algorithms generalizations of these ideas and even though now we think okay locking a",
    "start": "2877900",
    "end": "2883839"
  },
  {
    "text": "resource is Trivial what's hard then right then actually if you read history",
    "start": "2883839",
    "end": "2888940"
  },
  {
    "text": "of those things it was actually a very interesting problem and people were thinking for a long time how do I like",
    "start": "2888940",
    "end": "2894579"
  },
  {
    "text": "juggle with two variables to log this resource so these were actual breakthroughs in the computer science",
    "start": "2894579",
    "end": "2900359"
  },
  {
    "text": "now how can we reason about locks because let's say that we have those",
    "start": "2900359",
    "end": "2905619"
  },
  {
    "text": "logs and now we would like to make sure that okay do I get them right I need to use lock I need to use synchronize I",
    "start": "2905619",
    "end": "2912400"
  },
  {
    "text": "need to use mutexes how do I get them right and there is obviously multiple different mathematical approaches for",
    "start": "2912400",
    "end": "2918579"
  },
  {
    "text": "instance calculus of communicating systems or sequential process or maybe Pi calculus typical spaces other things",
    "start": "2918579",
    "end": "2925599"
  },
  {
    "text": "you can read about them on computer science Pages this is like University think but the one which is actually used",
    "start": "2925599",
    "end": "2932079"
  },
  {
    "text": "like out there in real world is called a TLA plus so TLA plus source code you see",
    "start": "2932079",
    "end": "2939220"
  },
  {
    "text": "on your right this is something in which you basically get your code this could be C plus plus code C sharp code or",
    "start": "2939220",
    "end": "2945940"
  },
  {
    "text": "whatever C sharpest code you have and you translate it to some different sentence like this one and there are",
    "start": "2945940",
    "end": "2952060"
  },
  {
    "text": "even like translators which do that automatically for you and then you have",
    "start": "2952060",
    "end": "2957280"
  },
  {
    "text": "a solver which is trying to prove all the assumptions spread conditions and",
    "start": "2957280",
    "end": "2962800"
  },
  {
    "text": "post conditions and show you that this code is not correct and for instance AWS",
    "start": "2962800",
    "end": "2967839"
  },
  {
    "text": "when they are implementing their dynamodb they do verify correctness of their locking algorithms with TLA plus",
    "start": "2967839",
    "end": "2974980"
  },
  {
    "text": "so if you want to make sure that your code works then unit tests will never give you that but things like TLA plus",
    "start": "2974980",
    "end": "2980980"
  },
  {
    "text": "will prove that your code Works prove to the extent that there are obviously",
    "start": "2980980",
    "end": "2986140"
  },
  {
    "text": "things like cosmic ray or some inferior interference from other cables you have like other wires but generally if we",
    "start": "2986140",
    "end": "2993339"
  },
  {
    "text": "assume computers do their job right then you can prove that your algorithms are correct the other important thing we",
    "start": "2993339",
    "end": "3000119"
  },
  {
    "text": "need to talk about is caches and memory model right now if you are trying to",
    "start": "3000119",
    "end": "3005220"
  },
  {
    "text": "read some memory some value from memory you are actually never going to the RAM memory directly never it's all cached by",
    "start": "3005220",
    "end": "3012540"
  },
  {
    "text": "L1 L2 L3 caches in your CPU okay this means that if there is a variable in RAM",
    "start": "3012540",
    "end": "3019020"
  },
  {
    "text": "memory okay and they have two Frets accessing it it means that now we have exactly two different copies of the same",
    "start": "3019020",
    "end": "3025440"
  },
  {
    "text": "variable one in Cache one of CPU one and the other in Cache of the cpu2 how are",
    "start": "3025440",
    "end": "3031380"
  },
  {
    "text": "those things synchronized and this is a thing called messy Illinois protocol so this protocol code gets its name from",
    "start": "3031380",
    "end": "3037740"
  },
  {
    "text": "four different states like modified exclusive shirt and valid and it's taking care of sharing your memory and",
    "start": "3037740",
    "end": "3044099"
  },
  {
    "text": "we get another issue with things like this because we already mentioned that computers are dealing with much bigger",
    "start": "3044099",
    "end": "3051059"
  },
  {
    "text": "amount of memory than like just one byte so imagine what happens if we are allocating an array of 17 integers and",
    "start": "3051059",
    "end": "3060359"
  },
  {
    "text": "we create two threads first of them is trying to constantly modify element at",
    "start": "3060359",
    "end": "3065640"
  },
  {
    "text": "index 0 of that array and then another thread is constantly trying to allocate",
    "start": "3065640",
    "end": "3070800"
  },
  {
    "text": "or modify element at index 1. what can go wrong with this finger there are two different Frets two different integers",
    "start": "3070800",
    "end": "3077700"
  },
  {
    "text": "they should be completely separate the problem with this is because integers",
    "start": "3077700",
    "end": "3082980"
  },
  {
    "text": "are four byte long and because those two integers are next in line they fell into",
    "start": "3082980",
    "end": "3088740"
  },
  {
    "text": "the same cache line of your CPU which is 64 bytes long nowadays will get longer",
    "start": "3088740",
    "end": "3094200"
  },
  {
    "text": "probably in near future meaning that those two integers are constantly getting to the same cache line so if red",
    "start": "3094200",
    "end": "3101880"
  },
  {
    "text": "one on cpu1 tries to modify the first integer then the Fret 2 on cpu2 will",
    "start": "3101880",
    "end": "3108540"
  },
  {
    "text": "need to synchronize with this CPU one to ask hey give me your cache line because you modified it okay so this is way",
    "start": "3108540",
    "end": "3115079"
  },
  {
    "text": "slower and the solution for that is we need to implement think called stride so",
    "start": "3115079",
    "end": "3120359"
  },
  {
    "text": "instead of changing the integer at index 0 here and one here we should be",
    "start": "3120359",
    "end": "3125700"
  },
  {
    "text": "changing in the integer at index 16. So This falls into different cache line yet",
    "start": "3125700",
    "end": "3131520"
  },
  {
    "text": "another source of issue we may get in our applications uh kernel thinks we",
    "start": "3131520",
    "end": "3136980"
  },
  {
    "text": "will just skip for now so now the rule of thumb or the outcome of this whole discussion is",
    "start": "3136980",
    "end": "3143040"
  },
  {
    "text": "super tricky to get this right generally use already available mechanisms which",
    "start": "3143040",
    "end": "3148200"
  },
  {
    "text": "are there for instance blocking collection and dotnet task run any concurrent synchronization or cons or",
    "start": "3148200",
    "end": "3155760"
  },
  {
    "text": "like a structured concurrency Primitives executor service MPI other things avoid",
    "start": "3155760",
    "end": "3162300"
  },
  {
    "text": "building those on your own because there are multiple layers which can go wrong",
    "start": "3162300",
    "end": "3167339"
  },
  {
    "text": "other Solutions include event changing the way you reason about applications do",
    "start": "3167339",
    "end": "3173160"
  },
  {
    "text": "not Implement things just like that with threats go with agents go with actors go with models which actually take care of",
    "start": "3173160",
    "end": "3179940"
  },
  {
    "text": "that do not Implement your own solution and what about async you might ask is",
    "start": "3179940",
    "end": "3187020"
  },
  {
    "text": "there any problem with async well the problem with async it's not about concurrency but async actually changes",
    "start": "3187020",
    "end": "3192839"
  },
  {
    "text": "the world significantly for you because in async you do not know where is your",
    "start": "3192839",
    "end": "3198480"
  },
  {
    "text": "continuation running on so if you try unlocking something and then try",
    "start": "3198480",
    "end": "3203520"
  },
  {
    "text": "awaiting then hey you may have a problem because you don't know whether the continuation which is here is it running",
    "start": "3203520",
    "end": "3210180"
  },
  {
    "text": "on the same thread of no or not and if it's not then actually it's different Fred who owns this lock so compiler",
    "start": "3210180",
    "end": "3217020"
  },
  {
    "text": "won't let you do that but we can be smarter than a compiler and why not go with monitor enter monitor exit right",
    "start": "3217020",
    "end": "3223500"
  },
  {
    "text": "this obviously compiles and then throws its exception on you why because you tried exiting and releasing the lock",
    "start": "3223500",
    "end": "3229380"
  },
  {
    "text": "from a different thread so if you go with async all the stuff I just told you you just can't use it easily but but you",
    "start": "3229380",
    "end": "3237240"
  },
  {
    "text": "can't use it but all the libraries you use they do use it because they have no idea that you're running a in async code",
    "start": "3237240",
    "end": "3243720"
  },
  {
    "text": "okay so this can break a lot just be aware of that and now we'll quickly run through a",
    "start": "3243720",
    "end": "3250079"
  },
  {
    "text": "couple of custom implementations just to show you one big lock how implementing a lock may look like and it gets crazy but",
    "start": "3250079",
    "end": "3257460"
  },
  {
    "text": "before doing that I told you semaphores are crazy because they don't let you know that who owned that and whether",
    "start": "3257460",
    "end": "3264780"
  },
  {
    "text": "it's abandoned or not instead of using semaphores you need to go with new textures okay so the solution for using",
    "start": "3264780",
    "end": "3271980"
  },
  {
    "text": "semaforce is you get mutexes like an array of mutexes and you try waiting any",
    "start": "3271980",
    "end": "3277740"
  },
  {
    "text": "of them in your dotnet application and then you get the ID of the mutex which",
    "start": "3277740",
    "end": "3283020"
  },
  {
    "text": "you acquired or you get the exception with the ID of mutex which was abandoned so this is probably something you could",
    "start": "3283020",
    "end": "3289920"
  },
  {
    "text": "be using instead of semaphores because semaphores are super dangerous just go with mute access in case the other",
    "start": "3289920",
    "end": "3297359"
  },
  {
    "text": "example of let's Implement a locking in like least amount of code we can and",
    "start": "3297359",
    "end": "3302520"
  },
  {
    "text": "that's it you just use a file you open the file and you ask operating system hey please do lock this file for me okay",
    "start": "3302520",
    "end": "3309180"
  },
  {
    "text": "and this operating system will lock the file for you and you are good this is mutex like well working mutex it even",
    "start": "3309180",
    "end": "3315780"
  },
  {
    "text": "works between multiple machines if you have like Network file system which supports locking files and some",
    "start": "3315780",
    "end": "3323220"
  },
  {
    "text": "implementations do then you can use this even to like lock between machines",
    "start": "3323220",
    "end": "3328500"
  },
  {
    "text": "around the globe obviously will be slow very slow but generally will work and",
    "start": "3328500",
    "end": "3335220"
  },
  {
    "text": "now let's move on to an actual mutex okay let's Implement something for you so if you ever ask operating system like",
    "start": "3335220",
    "end": "3341940"
  },
  {
    "text": "Linux Windows whatever hey who owns this mutex those operating systems will never",
    "start": "3341940",
    "end": "3347520"
  },
  {
    "text": "tell you that there is no way of finding out who owns the mutex okay and now if",
    "start": "3347520",
    "end": "3353760"
  },
  {
    "text": "you are dealing with locking something I told you always acquire a lock with a timeout",
    "start": "3353760",
    "end": "3359579"
  },
  {
    "text": "so the timeout passed 24 hours passed and you realize okay I can't acquire",
    "start": "3359579",
    "end": "3364740"
  },
  {
    "text": "this mutex because probably some other ants some other threat some other process died and I don't know about that",
    "start": "3364740",
    "end": "3371640"
  },
  {
    "text": "right because I wasn't notified how can I deal with that and we are going to implement a mutex with an ownership",
    "start": "3371640",
    "end": "3378720"
  },
  {
    "text": "tracking so my mutex which will be capable of telling us who owns it which Fred and we in which process so we can",
    "start": "3378720",
    "end": "3385859"
  },
  {
    "text": "later kill that threat kill that processor just do something fancy in it okay so that's the idea so how are we",
    "start": "3385859",
    "end": "3392099"
  },
  {
    "text": "going to implement that uh so we are going to use uh interlock compare",
    "start": "3392099",
    "end": "3398220"
  },
  {
    "text": "exchange so Cast Operation compare and Swap and we are going to we are going to",
    "start": "3398220",
    "end": "3403319"
  },
  {
    "text": "have one long field 64 bits of memory which we'll be sharing between threads",
    "start": "3403319",
    "end": "3410040"
  },
  {
    "text": "and between processes and inside this one single long we will store a 32 bits",
    "start": "3410040",
    "end": "3417240"
  },
  {
    "text": "of the process identifier and and then 32 bits of the thread identifier okay so",
    "start": "3417240",
    "end": "3424260"
  },
  {
    "text": "this is what we store in the memory one long variable eight octets storing both",
    "start": "3424260",
    "end": "3429359"
  },
  {
    "text": "process ID and the thread ID and the magic is we'll just show you how long it takes it's something like 200 lines of",
    "start": "3429359",
    "end": "3435900"
  },
  {
    "text": "code to implement all of that and what we are doing is first we get this identifier of ourselves I check my",
    "start": "3435900",
    "end": "3442680"
  },
  {
    "text": "process ID my thread ID I create an F value I calculate for how long I should be trying to acquire this lock and then",
    "start": "3442680",
    "end": "3449220"
  },
  {
    "text": "throwing exception telling hey I cannot get this you deal with that I open a",
    "start": "3449220",
    "end": "3454500"
  },
  {
    "text": "memory mapped file so I open shared memory between threads between processes inside the operating system I get",
    "start": "3454500",
    "end": "3460980"
  },
  {
    "text": "obviously dangerous get handle I need to get an actual pointer for that memory and what I'm doing now is I'm spin",
    "start": "3460980",
    "end": "3468540"
  },
  {
    "text": "looping and I'm trying to do compare and swap operation on this memory so I",
    "start": "3468540",
    "end": "3474000"
  },
  {
    "text": "assume if the variable is set to zero it's zeroed out meaning that the lock is not acquired it's free to be taken okay",
    "start": "3474000",
    "end": "3481140"
  },
  {
    "text": "so I told the operating system hey please try doing that use this memory",
    "start": "3481140",
    "end": "3486960"
  },
  {
    "text": "and if the memory is still zero then please store my identifier so my process",
    "start": "3486960",
    "end": "3493559"
  },
  {
    "text": "ID my thread ID inside this memory and return me the current value of the memory okay and this thingy will be done",
    "start": "3493559",
    "end": "3501059"
  },
  {
    "text": "atomically without synchronizing anything around etc etc and then I check okay if the lock was Zero before I came",
    "start": "3501059",
    "end": "3507660"
  },
  {
    "text": "then it means I now acquired it I can do my action which is my Lambda which I",
    "start": "3507660",
    "end": "3513119"
  },
  {
    "text": "pass here which is basically anything I want to do with this lock okay but if it wasn't zero then now I have the current",
    "start": "3513119",
    "end": "3520440"
  },
  {
    "text": "owner of this lock I can extract the the the holder of the thread ID of the owner",
    "start": "3520440",
    "end": "3528660"
  },
  {
    "text": "the process ID of the owner and I can do magic with it I can now start getting",
    "start": "3528660",
    "end": "3533700"
  },
  {
    "text": "process ID and well if it fails I ignore the exception here because I'll just",
    "start": "3533700",
    "end": "3539220"
  },
  {
    "text": "carry on if it doesn't exist I am trying to clear the lock because if the process",
    "start": "3539220",
    "end": "3545220"
  },
  {
    "text": "died in the middle well I'm trying to clear the lock so it's usable now okay so I'm using comparent swap again but in",
    "start": "3545220",
    "end": "3552180"
  },
  {
    "text": "the meantime someone might have changed this thingy so I cannot lock again and cannot just clear it out because I will",
    "start": "3552180",
    "end": "3557819"
  },
  {
    "text": "release someone else's lock so I shouldn't be doing that but if it does exist then I check if it's not running",
    "start": "3557819",
    "end": "3564059"
  },
  {
    "text": "for too long I call it self healing time so I let it like 30 minutes to run if you're holding this lock for more than",
    "start": "3564059",
    "end": "3569819"
  },
  {
    "text": "30 minutes then I'm terrible person I'm trying to well kill you okay so I go there and I try you know getting the the",
    "start": "3569819",
    "end": "3577140"
  },
  {
    "text": "process ID then I'm trying to run cdb to dump a memory of it so get a memory dump",
    "start": "3577140",
    "end": "3582960"
  },
  {
    "text": "so I know what was happening in that process probably it had some deadlocking scenario so I want to debug it later and",
    "start": "3582960",
    "end": "3589380"
  },
  {
    "text": "then what I'm doing at the very end is I'm just killing this thingy okay after killing it finally I spin loop again",
    "start": "3589380",
    "end": "3596640"
  },
  {
    "text": "come back to the beginning of this Loop and try acquiring this lock again if",
    "start": "3596640",
    "end": "3602339"
  },
  {
    "text": "something broke in the middle there is an issue obviously so we log it and there is also an in trying interesting",
    "start": "3602339",
    "end": "3608520"
  },
  {
    "text": "thing that I might be at some point trying to release this lock which I was",
    "start": "3608520",
    "end": "3614280"
  },
  {
    "text": "not the owner of meaning that something really bad happened because I took the",
    "start": "3614280",
    "end": "3619619"
  },
  {
    "text": "lock I believed I'm the owner and don'ts happened that someone took this lock away from me and I'm not the owner of",
    "start": "3619619",
    "end": "3626400"
  },
  {
    "text": "this one okay so if you get to this line you have another probably 200 lines of code figuring out how to fix that right",
    "start": "3626400",
    "end": "3632940"
  },
  {
    "text": "so this is how you do this thingy obviously it's not trivial and there are multiple other with this We There are",
    "start": "3632940",
    "end": "3639480"
  },
  {
    "text": "multiple other issues with that there is no furnace right if multiple threats are trying to acquire this lock there is no",
    "start": "3639480",
    "end": "3645240"
  },
  {
    "text": "queue who should be the first one to take it okay so we may starve other processes taking memory dump of some",
    "start": "3645240",
    "end": "3651599"
  },
  {
    "text": "other process while super useful it's also super risky why because when to take memory dump you",
    "start": "3651599",
    "end": "3658380"
  },
  {
    "text": "need to have a debugger connect to that process what if debugger dies then you",
    "start": "3658380",
    "end": "3664020"
  },
  {
    "text": "can't even kill this process because it's protea operating system who protects it now so this is the way how",
    "start": "3664020",
    "end": "3669540"
  },
  {
    "text": "to create a process which cannot be terminated at all just attach debugger to it and don't let debugger like or",
    "start": "3669540",
    "end": "3674819"
  },
  {
    "text": "kill the debugger okay so ideally we are also we are doing a spin weight here so",
    "start": "3674819",
    "end": "3680700"
  },
  {
    "text": "we are hugging the CPU like hundred percent of the usage like crazy obviously but it just works so that's a",
    "start": "3680700",
    "end": "3686160"
  },
  {
    "text": "proof of concept kinda but I'm using this in production as well with some other Tunes the other thing is I am",
    "start": "3686160",
    "end": "3691799"
  },
  {
    "text": "storing 32 bits of the identifiers right what if the process ID is a little",
    "start": "3691799",
    "end": "3697140"
  },
  {
    "text": "bigger than this right we should store 128 bits like 64 bits of process ID 64",
    "start": "3697140",
    "end": "3703799"
  },
  {
    "text": "bits of Fred ID right but then we need to have a CPU support for comparent swap",
    "start": "3703799",
    "end": "3709079"
  },
  {
    "text": "operation of 128 bits and this is something you your CPUs may not support",
    "start": "3709079",
    "end": "3714480"
  },
  {
    "text": "out of the box meaning that this approach won't work with such a big amount of memory again another issue",
    "start": "3714480",
    "end": "3720839"
  },
  {
    "text": "here is we do not support re-entrancy at all so if I try getting this log and then try getting this lock again then",
    "start": "3720839",
    "end": "3727020"
  },
  {
    "text": "it's re-entrancy and what should I do well I can assume okay I have this log",
    "start": "3727020",
    "end": "3732960"
  },
  {
    "text": "so I can take it again right but then how do you track the count how many times you you got this lock you need to",
    "start": "3732960",
    "end": "3739859"
  },
  {
    "text": "because you cannot have more than 64 bits with this approach and you need to atomically have more than 64 bits so you",
    "start": "3739859",
    "end": "3746220"
  },
  {
    "text": "get you know chicken and egg problem however generally approach like this works so this is how you can see how to",
    "start": "3746220",
    "end": "3752099"
  },
  {
    "text": "implement your sort of user land locking Primitives which do the which which do",
    "start": "3752099",
    "end": "3758160"
  },
  {
    "text": "work for you summary avoid blocks when possible use some",
    "start": "3758160",
    "end": "3764040"
  },
  {
    "text": "other things like tasks like executor services like generally fret pools like",
    "start": "3764040",
    "end": "3770760"
  },
  {
    "text": "blocking collections you think which things which are implemented for you in the starter Library obviously you may",
    "start": "3770760",
    "end": "3777000"
  },
  {
    "text": "still have issues with those for instance a friend of mine when we were at the uni like 10 years ago he found an",
    "start": "3777000",
    "end": "3783059"
  },
  {
    "text": "issue in concurrent dictionary and reported that it was fixed got fixed obviously but we just don't know how",
    "start": "3783059",
    "end": "3788819"
  },
  {
    "text": "many applications got a problem because of that concurrent dictionary not working properly so generally those",
    "start": "3788819",
    "end": "3794040"
  },
  {
    "text": "things may be broken this is like normal but use them as much as possible instead",
    "start": "3794040",
    "end": "3799140"
  },
  {
    "text": "of writing your own logs right another thing you keep your critical sections keep your like resource leases keep your",
    "start": "3799140",
    "end": "3807299"
  },
  {
    "text": "any synchronization Primitives as short as possible because if you make them",
    "start": "3807299",
    "end": "3812579"
  },
  {
    "text": "longer then first you decrease the performance second you risk that you die in the middle and if you die in the",
    "start": "3812579",
    "end": "3819000"
  },
  {
    "text": "middle there is a problem because as State consistent or not think about that from the business perspective as well",
    "start": "3819000",
    "end": "3825000"
  },
  {
    "text": "also when you're refreshing cloudleases make sure you do refresh them on time and you do not get blocked for any",
    "start": "3825000",
    "end": "3832380"
  },
  {
    "text": "particular reason think about situations when you call some external application while holding a lock because you don't",
    "start": "3832380",
    "end": "3839760"
  },
  {
    "text": "know what this external application is doing and how long it will take for it to finish avoid semaphores they are",
    "start": "3839760",
    "end": "3847200"
  },
  {
    "text": "nasty obviously that's not like a official production ready rule of thumb you would have probably multiple use",
    "start": "3847200",
    "end": "3853079"
  },
  {
    "text": "cases where some efforts are just good but be aware of them that they may post some issues it caused some issues for",
    "start": "3853079",
    "end": "3859319"
  },
  {
    "text": "you and if you are going with async keep in mind async brakes locking Primitives",
    "start": "3859319",
    "end": "3864540"
  },
  {
    "text": "a lot this is probably not an issue for you if you are using just a c-sharp code but once you start doing interrupts be",
    "start": "3864540",
    "end": "3872760"
  },
  {
    "text": "invoke calling maybe some code which is not async enabled like code from even vb.net right or maybe some C plus plus",
    "start": "3872760",
    "end": "3880200"
  },
  {
    "text": "code give keep in mind those things are not aware of your async enabled code and",
    "start": "3880200",
    "end": "3885240"
  },
  {
    "text": "may use those locking Primitives and you'll get them broken by that and being all of that said it's time to",
    "start": "3885240",
    "end": "3892260"
  },
  {
    "text": "ask questions and we are shortly after time so we'll probably take this offline",
    "start": "3892260",
    "end": "3897660"
  },
  {
    "text": "couple of resources for you are also at the very end of this slide that if you are interested in Reading More and being",
    "start": "3897660",
    "end": "3904619"
  },
  {
    "text": "all of that said and also some like links to the internet if you don't fancy reading books and being all of that said",
    "start": "3904619",
    "end": "3910799"
  },
  {
    "text": "there is a QR code for the slides and I'd like to thank you for coming to this talk hope you enjoyed it hope you liked",
    "start": "3910799",
    "end": "3916440"
  },
  {
    "text": "it have a great afternoon and thank you",
    "start": "3916440",
    "end": "3920180"
  }
]