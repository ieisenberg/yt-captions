[
  {
    "text": "all right everybody I think we're ready to start thank you for coming to NDC",
    "start": "4290",
    "end": "11100"
  },
  {
    "text": "Oslo this is the first talk of the day there's going to be functional programming talks in this room all day",
    "start": "11100",
    "end": "17279"
  },
  {
    "text": "long and tomorrow as well and Friday as well so if you're interested in functional programming just stay in this room all day long and there is also a",
    "start": "17279",
    "end": "24540"
  },
  {
    "text": "functional lab which i think is going to be in room 10 kind of going outside and",
    "start": "24540",
    "end": "30180"
  },
  {
    "text": "then going up where we're gonna launch time so if you have any questions about functional programming you can come and",
    "start": "30180",
    "end": "35579"
  },
  {
    "text": "talk to people like me and Tomas and Matthias and so on right let's start so",
    "start": "35579",
    "end": "43440"
  },
  {
    "text": "this talk is the power of composition it's a talk for beginners in functional",
    "start": "43440",
    "end": "49920"
  },
  {
    "text": "programming so if you're already familiar with function programming this is probably not very interesting to you I have a website f-sharp on a profit so",
    "start": "49920",
    "end": "58350"
  },
  {
    "text": "I'm very into a sharp and we have an f-sharp consulting business if your interest is and that's so thought",
    "start": "58350",
    "end": "64588"
  },
  {
    "text": "beginners an FP I'm going to be using F sharp which is a functional language but the concepts will work in most",
    "start": "64589",
    "end": "71040"
  },
  {
    "text": "programming languages except maybe COBOL or something so it's really about the principles behind functional programming",
    "start": "71040",
    "end": "77190"
  },
  {
    "text": "and composition in particular people who took going about composition a lot in functional programming and I just",
    "start": "77190",
    "end": "82440"
  },
  {
    "text": "thought I'd have a talk which tells you what they mean so I'm going to start off",
    "start": "82440",
    "end": "88260"
  },
  {
    "text": "by talking about the philosophy of composition and then I'll talk about functional programming principles",
    "start": "88260",
    "end": "93780"
  },
  {
    "text": "because this is a beginners tour so functions and how to compose them types and how to compose them and then we'll",
    "start": "93780",
    "end": "100320"
  },
  {
    "text": "actually get into some meat and we'll actually look at composition in practice we'll start with two really simple",
    "start": "100320",
    "end": "105600"
  },
  {
    "text": "examples and then we'll do fizzbuzz we'll do a kind of really complicated",
    "start": "105600",
    "end": "110880"
  },
  {
    "text": "version of fizzbuzz just for fun and then we'll talk about the whole monad",
    "start": "110880",
    "end": "115920"
  },
  {
    "text": "things and then I'll demonstrate how you can actually build a web service using",
    "start": "115920",
    "end": "120960"
  },
  {
    "text": "composition so no objects anywhere no objects were harmed in this talk so",
    "start": "120960",
    "end": "127039"
  },
  {
    "text": "let's start with philosophy okay so in order to understand composition you have",
    "start": "127039",
    "end": "133709"
  },
  {
    "text": "to have been a child at some point and the reason is because you have to played with a lego and hopefully everyone here has played",
    "start": "133709",
    "end": "140430"
  },
  {
    "text": "with Lego and hopefully everyone here is also playing with toy trains so this is going to be very important and you'll",
    "start": "140430",
    "end": "146040"
  },
  {
    "text": "see why in a minute and in fact you actually don't have to have been a child at some point because it turns out there's a lot of adults who",
    "start": "146040",
    "end": "151709"
  },
  {
    "text": "really like playing with Lego too so if you google a foal eagle adult Friends of Lego there's a whole world of adult Lego",
    "start": "151709",
    "end": "159810"
  },
  {
    "text": "people there so what is the lego philosophy so Lego philosophy all pieces",
    "start": "159810",
    "end": "167879"
  },
  {
    "text": "are designed to be connected to each other and if you connect any two pieces",
    "start": "167879",
    "end": "173010"
  },
  {
    "text": "you get another kind of piece that could be connected to other kinds of pieces and the pieces are reusable in many",
    "start": "173010",
    "end": "180329"
  },
  {
    "text": "different contexts so let's go into that a bit more here's some Lego and you can",
    "start": "180329",
    "end": "185910"
  },
  {
    "text": "see every single piece a little bumps on it alright they're all design every piece is designed to be connected right",
    "start": "185910",
    "end": "191250"
  },
  {
    "text": "there's no pieces which you can't connect and if you connect two pieces",
    "start": "191250",
    "end": "196470"
  },
  {
    "text": "together you get another kind of piece so you start off with one thing and you put a piece on it and that gives you another kind of bigger piece that you",
    "start": "196470",
    "end": "202769"
  },
  {
    "text": "can glue things on top of and then you can take that bigger piece and glue things on top of that and so on and so on until you've made something and",
    "start": "202769",
    "end": "209720"
  },
  {
    "text": "what's cool is you don't need a special kind of adapter to glue things to",
    "start": "209720",
    "end": "214859"
  },
  {
    "text": "connect things you can just they're designed to be connected inherently you can just literally touch things together",
    "start": "214859",
    "end": "221669"
  },
  {
    "text": "you know put things together and they work and you can keep adding and adding",
    "start": "221669",
    "end": "227030"
  },
  {
    "text": "until you make a really big thing like this okay so this is a giant piece of",
    "start": "227030",
    "end": "232079"
  },
  {
    "text": "Lego and it's not finished you can add things to this too if you had enough pieces you know alright so this thing of",
    "start": "232079",
    "end": "238079"
  },
  {
    "text": "adding and adding and making bigger things out of small things that is the whole principle of composition now",
    "start": "238079",
    "end": "244349"
  },
  {
    "text": "there's something else important which is if the pieces are reusable what they don't just make one kind of thing you",
    "start": "244349",
    "end": "251129"
  },
  {
    "text": "know you can build a plane out of them and then you can take the same pieces apart and we use them in a different context okay they're designed to be",
    "start": "251129",
    "end": "258510"
  },
  {
    "text": "reusable they're not designed you can't just make a plane and then never use them for anything else okay they're",
    "start": "258510",
    "end": "263940"
  },
  {
    "text": "designed to be generic reusable pieces and that means they have no strings",
    "start": "263940",
    "end": "269280"
  },
  {
    "text": "attached because if they had little strings attached you know you wouldn't be able",
    "start": "269280",
    "end": "274819"
  },
  {
    "text": "to like take them apart and reuse them because they'd be the strings would get tangled together literally right so mean",
    "start": "274819",
    "end": "280129"
  },
  {
    "text": "if Lego if each Lego piece had a power cable you know you'd end up with some sort of horrible mess like this so the very fact",
    "start": "280129",
    "end": "287000"
  },
  {
    "text": "that LEGO pieces don't have power cables they don't have strings they don't depend on anything outside the piece the",
    "start": "287000",
    "end": "293090"
  },
  {
    "text": "pieces are completely self-contained all right there's a really important principle because if they weren't",
    "start": "293090",
    "end": "298250"
  },
  {
    "text": "self-contained they wouldn't be reusable they wouldn't be composable so there's the power composition with Lego now we",
    "start": "298250",
    "end": "307400"
  },
  {
    "text": "can do the same thing with wooden railway tracks so I'm sure you've all played with Brio or something like this",
    "start": "307400",
    "end": "313430"
  },
  {
    "text": "again all the pieces are designed to be connected you can connect pieces together and they're reusable so here's",
    "start": "313430",
    "end": "320240"
  },
  {
    "text": "some wooden railway track and they're designed to be connected because every single piece has a little bump in it",
    "start": "320240",
    "end": "325580"
  },
  {
    "text": "just like Lego right and you can literally glue them together you get a bigger piece of track okay you don't",
    "start": "325580",
    "end": "331370"
  },
  {
    "text": "need special adapters you just literally do that no special adapters needed and because of that you can keep adding and",
    "start": "331370",
    "end": "338300"
  },
  {
    "text": "adding and adding until you make a really big thing so there's a big thing made some smaller things and there's the",
    "start": "338300",
    "end": "346940"
  },
  {
    "text": "power of composition this whole thing of gluing things makings starting with small things gluing them together to",
    "start": "346940",
    "end": "351979"
  },
  {
    "text": "make bigger things I'm going to go on and on and on the power curbs I'm going to say that over and over because that's the title of this talk the power of",
    "start": "351979",
    "end": "358580"
  },
  {
    "text": "composition compels me to say the power of composition alright again they're",
    "start": "358580",
    "end": "365270"
  },
  {
    "text": "reusable you can make one little layer and then you can take it apart and make another layer okay this is obvious I",
    "start": "365270",
    "end": "371210"
  },
  {
    "text": "mean if you couldn't do this these toys wouldn't be fun right the whole reason why these toys are fun to play with why",
    "start": "371210",
    "end": "377150"
  },
  {
    "text": "Lego is great and one way wouldn't wear always of great is because they're fun you can like you know do something and",
    "start": "377150",
    "end": "382940"
  },
  {
    "text": "take it apart do something else all right let's move on to programming so",
    "start": "382940",
    "end": "388849"
  },
  {
    "text": "the UNIX philosophy is actually very very similar and I stole this form the",
    "start": "388849",
    "end": "394400"
  },
  {
    "text": "Wikipedia article so don't blame me you notice if I don't get this right so white programs that do one thing well",
    "start": "394400",
    "end": "401419"
  },
  {
    "text": "that's one of the philosophies and if you need to do something new start a new piece you don't complicate",
    "start": "401419",
    "end": "408920"
  },
  {
    "text": "old programs by adding new features each piece is a little small thing that does one thing well and then you write",
    "start": "408920",
    "end": "415490"
  },
  {
    "text": "programs to work together which means that you design your programs to expect",
    "start": "415490",
    "end": "421340"
  },
  {
    "text": "input from programs you don't even know about you expect them to be working in a bigger system so you designed to work",
    "start": "421340",
    "end": "427280"
  },
  {
    "text": "with input and output and then finally you make them use text streams because",
    "start": "427280",
    "end": "435530"
  },
  {
    "text": "that's the universal interface well that's maybe not the best universal interface but it's a pretty good",
    "start": "435530",
    "end": "440630"
  },
  {
    "text": "interface here certainly was pretty good for the 1970s when UNIX was design so",
    "start": "440630",
    "end": "447770"
  },
  {
    "text": "this Maps very well to our composition philosophy you know the pieces are reusable the pieces are designed to be",
    "start": "447770",
    "end": "454130"
  },
  {
    "text": "connected and they don't need any adapters you don't need a special kind of adapter when you're piping things",
    "start": "454130",
    "end": "459470"
  },
  {
    "text": "between unix components all right no special adapters needs so this is the",
    "start": "459470",
    "end": "465320"
  },
  {
    "text": "UNIX philosophy is a philosophy all about composition which is why again it's very very popular okay so that's",
    "start": "465320",
    "end": "472940"
  },
  {
    "text": "enough philosophy let's talk about functional programming so functional programming and I can say this is but",
    "start": "472940",
    "end": "479840"
  },
  {
    "text": "you know things I'm just going to go through some very basic stuff about functional programming a couple of core",
    "start": "479840",
    "end": "485030"
  },
  {
    "text": "principles so the first core principle of functional programming is it's all about functions functions or things and I'm going to use the analogy of a little",
    "start": "485030",
    "end": "491840"
  },
  {
    "text": "bit of railway track like this the second important principle of functional programming is to use composition",
    "start": "491840",
    "end": "497810"
  },
  {
    "text": "everywhere so you don't have objects you don't have variables you don't have all that so if you just have functions and",
    "start": "497810",
    "end": "504620"
  },
  {
    "text": "you glue them together composition just like Lego and the final thing is if",
    "start": "504620",
    "end": "511100"
  },
  {
    "text": "you're coming from a an oo background the types in a statically typed",
    "start": "511100",
    "end": "517099"
  },
  {
    "text": "functional programming language like F sharp or Haskell or Scala or something types are not the same thing of classes",
    "start": "517099",
    "end": "522140"
  },
  {
    "text": "okay they're sort of more like sets and arias I'll demonstrate well then what I",
    "start": "522140",
    "end": "527630"
  },
  {
    "text": "mean by that in a minute so let's start with functions so a function like I say",
    "start": "527630",
    "end": "534440"
  },
  {
    "text": "is I like to think of it as a little bit of railway track and it transforms inputs to outputs there's a little tunnel on this and",
    "start": "534440",
    "end": "541200"
  },
  {
    "text": "there's railway track and it's the tunnel of transformation so something comes in one side like an apple and it",
    "start": "541200",
    "end": "546900"
  },
  {
    "text": "comes out the other side and it gets turned into a banana okay so this is a very simple function that turns apples",
    "start": "546900",
    "end": "552480"
  },
  {
    "text": "into bananas and in functional programming you tend to write this Apple our banana that's how I would indicate",
    "start": "552480",
    "end": "558660"
  },
  {
    "text": "what the function does so very important",
    "start": "558660",
    "end": "563820"
  },
  {
    "text": "that functions are standalone things they're not attached to a class they're not methods they're standalone things",
    "start": "563820",
    "end": "569040"
  },
  {
    "text": "and what's it why that's really important is that by the way and",
    "start": "569040",
    "end": "576030"
  },
  {
    "text": "standalone is just another word for reusable right stand-alone means you can reuse it so there's no strings attached",
    "start": "576030",
    "end": "583370"
  },
  {
    "text": "so because it's a standalone thing it can be used as inputs and outputs of",
    "start": "583370",
    "end": "588660"
  },
  {
    "text": "other functions and let's look at some examples of that so here is a here's a function with an",
    "start": "588660",
    "end": "594330"
  },
  {
    "text": "input and here is the output being another function or here is a standalone",
    "start": "594330",
    "end": "601050"
  },
  {
    "text": "function and it's got a regular output but the input is another function",
    "start": "601050",
    "end": "606170"
  },
  {
    "text": "alright that okay or here is a standalone function and it's got a regular input now but but there's a",
    "start": "606170",
    "end": "612270"
  },
  {
    "text": "parameter which is a function and that parameter can be used to control how the function works for example",
    "start": "612270",
    "end": "618590"
  },
  {
    "text": "so having functions as inputs and functions and outputs and functions and parameters that's a very simple",
    "start": "618590",
    "end": "625170"
  },
  {
    "text": "principle but you can actually build really complicated systems from that a way of doing things for example you can",
    "start": "625170",
    "end": "631710"
  },
  {
    "text": "have a function that returns a function that generates other functions that have passed a promise that you know you can",
    "start": "631710",
    "end": "636900"
  },
  {
    "text": "really big complex things but the fundamental principle is pretty straightforward and we'll see an example",
    "start": "636900",
    "end": "642300"
  },
  {
    "text": "of a function that returns of functions surely so that's the first principle",
    "start": "642300",
    "end": "647460"
  },
  {
    "text": "functions these things so we haven't talked about classes we haven't talked about objects all we've got is functions",
    "start": "647460",
    "end": "653450"
  },
  {
    "text": "now the second thing is you've got all these functions how do you build things from the functions well the answer is",
    "start": "653450",
    "end": "660090"
  },
  {
    "text": "composition so here's how a function composition works you have two functions one that takes an apple to a banana",
    "start": "660090",
    "end": "667230"
  },
  {
    "text": "one that takes a banana to a cherry say and you want to glue them together to",
    "start": "667230",
    "end": "672240"
  },
  {
    "text": "make a bigger function well I think it's pretty obvious how you glue them together you literally take the output",
    "start": "672240",
    "end": "677880"
  },
  {
    "text": "of one and you stick it into the end put the other right so you take these two things and you kind of smush them together and now you have a new function",
    "start": "677880",
    "end": "684540"
  },
  {
    "text": "all right that's before that's after hopefully that's kind of common sense it's really obvious how you do this it's",
    "start": "684540",
    "end": "690930"
  },
  {
    "text": "just like the the model railway track what's interesting about this new function though is that you can't tell",
    "start": "690930",
    "end": "697620"
  },
  {
    "text": "that it was built from small functions there's no seams in particular where did",
    "start": "697620",
    "end": "702960"
  },
  {
    "text": "the banana go right the other work functions had bananas this function doesn't have any bananas anywhere so you",
    "start": "702960",
    "end": "709080"
  },
  {
    "text": "kind of you've got data hiding you've got abstraction already so when I'm giving you this function you don't you",
    "start": "709080",
    "end": "716010"
  },
  {
    "text": "don't know about bananas all you care is about apples and cherries and you can repeat you know you can take this thing and glue it to another function that",
    "start": "716010",
    "end": "722010"
  },
  {
    "text": "uses cherries and hide the cherries so you know the fact that the level of the",
    "start": "722010",
    "end": "728640"
  },
  {
    "text": "function doesn't matter you don't know where this is a high-level function of a small level think they're all exactly the same functions just functions so a",
    "start": "728640",
    "end": "735720"
  },
  {
    "text": "very important point though is an order for function composition to work they",
    "start": "735720",
    "end": "741090"
  },
  {
    "text": "have to be self-contained functions with no strings attached just like a Lego right if they've got strings attached",
    "start": "741090",
    "end": "748140"
  },
  {
    "text": "you can't glue them together because they get tangled up so what does strings attached mean in terms of programming",
    "start": "748140",
    "end": "754310"
  },
  {
    "text": "well it means that data has to be immutable because if you change the data inside a function you know you're",
    "start": "754310",
    "end": "761640"
  },
  {
    "text": "messing with stuff it's a function minor ways the order of the functions they used makes a difference for example",
    "start": "761640",
    "end": "766940"
  },
  {
    "text": "there's no side-effects that's another way of saying us it's not changing anything in the outside world there's no",
    "start": "766940",
    "end": "772860"
  },
  {
    "text": "input or output that you're not writing to the file system you're not writing to a database you're not messing there with",
    "start": "772860",
    "end": "778230"
  },
  {
    "text": "global variables so that does restrict the kinds of things you can do with pure",
    "start": "778230",
    "end": "784440"
  },
  {
    "text": "functions there are ways around this which we'll talk about but in basically if you have these friends of pure functions you can compose them really",
    "start": "784440",
    "end": "791190"
  },
  {
    "text": "nicely right this no strings will attached will is really important and",
    "start": "791190",
    "end": "796590"
  },
  {
    "text": "Fat Joe Armstrong who created Erlang has a whole famous quote about this he said",
    "start": "796590",
    "end": "802480"
  },
  {
    "text": "I think the lack of reusability comes in object oriented languages not in functional languages why is that the",
    "start": "802480",
    "end": "808810"
  },
  {
    "text": "prom with object languages they've got all this implicit environment they carry around with them you wanted a banana but",
    "start": "808810",
    "end": "816399"
  },
  {
    "text": "what you got was the gorilla holding the Minar and you got the entire jungle so this is the thing if you've ever tried",
    "start": "816399",
    "end": "822399"
  },
  {
    "text": "to refax refactor a complex object you know you can't just pull the method out because",
    "start": "822399",
    "end": "827500"
  },
  {
    "text": "the method depends on a local variable and the local variable depends on something that was dependency injected",
    "start": "827500",
    "end": "833620"
  },
  {
    "text": "and the thing that was a dependency injected depends on something else is like yes sometimes it's really hard to refactor because there's all this",
    "start": "833620",
    "end": "839070"
  },
  {
    "text": "implicit things going on in objects and in in functions there's no implicit",
    "start": "839070",
    "end": "844510"
  },
  {
    "text": "everything is explicitly passed in and explicitly comes out there's no kind of mysterious side-effects there's no",
    "start": "844510",
    "end": "850089"
  },
  {
    "text": "strings attached alright so that's competition let's look at a real example let's say we have an add one function",
    "start": "850089",
    "end": "857199"
  },
  {
    "text": "and a double function okay in an f-sharp would write like this add 1 equals x plus 1 double equals x plus 6 very",
    "start": "857199",
    "end": "864699"
  },
  {
    "text": "simple and we just use this little double angle bracket that's the",
    "start": "864699",
    "end": "870190"
  },
  {
    "text": "composition thing so I just take these two functions like smush them together and I get a new function add one and then double it so in pictures we've",
    "start": "870190",
    "end": "877120"
  },
  {
    "text": "gauged we've taken these two things we've smush them together we have a new function and we can just call it like it",
    "start": "877120",
    "end": "883420"
  },
  {
    "text": "was not any other function we just say if we pass 5 to it we get 12 for example so we can't tell that this function was",
    "start": "883420",
    "end": "889720"
  },
  {
    "text": "built from smaller functions and if we have three functions we can smash them",
    "start": "889720",
    "end": "895180"
  },
  {
    "text": "all together add 1 then double it then square it when the iteration machine put together with a composition and then we've got a",
    "start": "895180",
    "end": "901449"
  },
  {
    "text": "new function we just call it if we call it with 5 we get 144 so that's",
    "start": "901449",
    "end": "908709"
  },
  {
    "text": "composition in practice is pretty simple now there's another way of doing composition which is actually much more",
    "start": "908709",
    "end": "914079"
  },
  {
    "text": "common in F sharp and it's called piping and the reason why piping is this is",
    "start": "914079",
    "end": "921730"
  },
  {
    "text": "because calling functions with parameters can often get really messy so let's say we call add 1 with 5 ok but",
    "start": "921730",
    "end": "929949"
  },
  {
    "text": "then we want to double it and then we want to square it we end up with this kind of nested parentheses",
    "start": "929949",
    "end": "936760"
  },
  {
    "text": "you know and it's very hard sometimes when it's really nested to find out where exactly to start from you know you",
    "start": "936760",
    "end": "942970"
  },
  {
    "text": "have to start from the middle and what kind of work your way up so that can be kind of confusing so an alternative way",
    "start": "942970",
    "end": "951370"
  },
  {
    "text": "of doing this is that you kind of start with one thing it's the piping model",
    "start": "951370",
    "end": "956650"
  },
  {
    "text": "just like UNIX piping you start with one thing you take five and you pass it to add one and that gives you six and you",
    "start": "956650",
    "end": "963130"
  },
  {
    "text": "take the output of add one and you pass it a double and that gives 12 and you take the output of double and you pass it to",
    "start": "963130",
    "end": "970060"
  },
  {
    "text": "square and that makes 144 so you're just taking this number and you're taking it",
    "start": "970060",
    "end": "975730"
  },
  {
    "text": "into one function taking the output passing the next one taking the output posting this on exactly like UNIX pipes and this is actually a lot easy to",
    "start": "975730",
    "end": "983260"
  },
  {
    "text": "understand and you'll see this all the time and in functional programming and so an f-sharp we have this pipe symbol",
    "start": "983260",
    "end": "988780"
  },
  {
    "text": "which is a vertical bar with an angle bracket the vertical bar is on its own is used for something else so it's it's",
    "start": "988780",
    "end": "994180"
  },
  {
    "text": "almost like the UNIX pipe symbol but not exactly the same okay so we're going to",
    "start": "994180",
    "end": "999250"
  },
  {
    "text": "be using pipes every time you see that in the Reston's talk that's what it is it's the pipe symbol pipes everywhere",
    "start": "999250",
    "end": "1007040"
  },
  {
    "text": "alright so now that we've got composition of two functions let's see how it can build an entire application",
    "start": "1007040",
    "end": "1012350"
  },
  {
    "text": "from functions okay its composition all the way up so let's say we have a couple",
    "start": "1012350",
    "end": "1018840"
  },
  {
    "text": "of low-level operations like you know upper casing a string so application your string is a pure function you pass",
    "start": "1018840",
    "end": "1024569"
  },
  {
    "text": "in a string and you get another string back so you know it's pretty obvious",
    "start": "1024570",
    "end": "1032040"
  },
  {
    "text": "it's a function now if you take these low-level operations and you glue them together you might get a kind of a",
    "start": "1032040",
    "end": "1039060"
  },
  {
    "text": "bigger set of things called maybe a service okay so address validation service for example and you pass in an",
    "start": "1039060",
    "end": "1045750"
  },
  {
    "text": "address and you get backers on a validation result and for people under",
    "start": "1045750",
    "end": "1050970"
  },
  {
    "text": "30 I just have to explain what services it's just like a micro service but without service in front yeah the",
    "start": "1050970",
    "end": "1058170"
  },
  {
    "text": "services of our old-fashioned words right so we got these services we're",
    "start": "1058170",
    "end": "1064710"
  },
  {
    "text": "glue them together and we do them they're there in two sawsan are you or a use case or whatever you want to call it they say",
    "start": "1064710",
    "end": "1070980"
  },
  {
    "text": "update your customer data or whatever you're passing a requests you get back a result and by the way this is not the",
    "start": "1070980",
    "end": "1077730"
  },
  {
    "text": "quest response this is input/output this is a subtly different approach then oh oh so you're",
    "start": "1077730",
    "end": "1085140"
  },
  {
    "text": "not you're not passing you're not sending a message and getting a message back you have an input and output the railway track model okay you take all",
    "start": "1085140",
    "end": "1093270"
  },
  {
    "text": "these use cases and you build them into a web application so the web application has some sort of HTTP input has some",
    "start": "1093270",
    "end": "1101460"
  },
  {
    "text": "sort of outputs and inside the web application you basically have a controller or a dispatcher or whatever",
    "start": "1101460",
    "end": "1108420"
  },
  {
    "text": "you want to call it that decides which one of these things to run based on the request that comes in and will actually",
    "start": "1108420",
    "end": "1115440"
  },
  {
    "text": "see an example of how to do this at the end of this talk and notice I haven't",
    "start": "1115440",
    "end": "1120870"
  },
  {
    "text": "had there's no objects all right you say well how can I do this without objects they weren't any object you'll see in",
    "start": "1120870",
    "end": "1126060"
  },
  {
    "text": "the in the final example there there's no objects anywhere it's all just functions say what's interesting about",
    "start": "1126060",
    "end": "1132540"
  },
  {
    "text": "this thing about composition is it's a kind of fractal self-similar kind of thing you know that you use exactly the",
    "start": "1132540",
    "end": "1140550"
  },
  {
    "text": "same techniques to compose big things as you used to compose small things it's just like the Lego again gluing to beat",
    "start": "1140550",
    "end": "1145980"
  },
  {
    "text": "LEGO pieces together and gluing to massive Lego things together it's the same exactly the same kind of principle",
    "start": "1145980",
    "end": "1152900"
  },
  {
    "text": "and if you had a kind of a complex web app this is what it would look like there'd be all these little functions",
    "start": "1152900",
    "end": "1158940"
  },
  {
    "text": "inside and that'd be you know routed or routed through through those functions based on the the request on the response",
    "start": "1158940",
    "end": "1166610"
  },
  {
    "text": "so this is what a functional app looks like and that is the power of",
    "start": "1166610",
    "end": "1172770"
  },
  {
    "text": "composition I have to say it again right so power composition with with the",
    "start": "1172770",
    "end": "1180200"
  },
  {
    "text": "railway power composition with Lego and you know all the other kinds of power composition we're going to talk about",
    "start": "1180200",
    "end": "1187400"
  },
  {
    "text": "now functional programs love composition so much that they have all this jog and around it and there's a lot of jharkhand",
    "start": "1187400",
    "end": "1196200"
  },
  {
    "text": "that you'll hear which is really if you think about it just ways of making composition easier it will make a lot",
    "start": "1196200",
    "end": "1201630"
  },
  {
    "text": "more sense so if you sample you'll hear the word noise and that is really just a way of",
    "start": "1201630",
    "end": "1206970"
  },
  {
    "text": "combining things like strings and lists and functions even you combine two",
    "start": "1206970",
    "end": "1212370"
  },
  {
    "text": "things to make another one of the same kinds there's typically called amyloid monads another big buzzword in",
    "start": "1212370",
    "end": "1218820"
  },
  {
    "text": "functional programming and monads is all about how can you compose things which",
    "start": "1218820",
    "end": "1224790"
  },
  {
    "text": "have effects not necessarily side-effects but that happen that have more than one output and we'll actually",
    "start": "1224790",
    "end": "1230850"
  },
  {
    "text": "see an example with the fizzbuzz later on and finally category theory functional programmers love to talk",
    "start": "1230850",
    "end": "1236730"
  },
  {
    "text": "about category theory and one of the reasons is because you can sort of think of category theory as composition",
    "start": "1236730",
    "end": "1242309"
  },
  {
    "text": "theories it's like what happens if I take this thing and I connected this thing is that the same thing as if I connect this things of this thing you",
    "start": "1242309",
    "end": "1248340"
  },
  {
    "text": "know it's about composition it's not really about composition Burton and when I'm going to hope no mathematicians",
    "start": "1248340",
    "end": "1254370"
  },
  {
    "text": "actually listening to this I apologized other mathematicians but it's good enough for it for you right okay final",
    "start": "1254370",
    "end": "1264840"
  },
  {
    "text": "principle for functional programming is that types are not classes okay more like sets so if a type isn't a class",
    "start": "1264840",
    "end": "1272340"
  },
  {
    "text": "what is it so if you think of our function it has an input and output and",
    "start": "1272340",
    "end": "1278730"
  },
  {
    "text": "the type is just a name for a set of things so here's all the set of valid inputs for this function and here's the",
    "start": "1278730",
    "end": "1285450"
  },
  {
    "text": "set of valid outputs for this function so we just give these set of valid inputs instead of an A now just give it",
    "start": "1285450",
    "end": "1290760"
  },
  {
    "text": "a name so for example if this function can take any possible integer oh these set of numbers we call that that set",
    "start": "1290760",
    "end": "1297720"
  },
  {
    "text": "type integer go into 32 whatever if it can return any you know sequence of",
    "start": "1297720",
    "end": "1304380"
  },
  {
    "text": "characters we say that's type string if we can take it any kind of person we say",
    "start": "1304380",
    "end": "1310350"
  },
  {
    "text": "this of type person but it's lit it's not the same thing as they as a class it's just a literally a list of all the",
    "start": "1310350",
    "end": "1316650"
  },
  {
    "text": "people in the world conceptually list of all the people in the world that's give that set a named person okay there's no",
    "start": "1316650",
    "end": "1322800"
  },
  {
    "text": "behavior it's just a set and here's an example of a set of fruits and it",
    "start": "1322800",
    "end": "1328860"
  },
  {
    "text": "because it's just a set of course you can have a set of functions so this is a set of functions which turn food into",
    "start": "1328860",
    "end": "1334860"
  },
  {
    "text": "fruits this is the fruit - fruit functions and we give that a name we call it food to fruit functions you know so because",
    "start": "1334860",
    "end": "1342509"
  },
  {
    "text": "it's just a set it's nothing special now because they're just sets types can be",
    "start": "1342509",
    "end": "1348330"
  },
  {
    "text": "composed and we call this an algebraic type system or I'd rather call it a",
    "start": "1348330",
    "end": "1354929"
  },
  {
    "text": "composable type system because you can glue types together to make bigger types and that is only possible because types",
    "start": "1354929",
    "end": "1362759"
  },
  {
    "text": "don't have behavior right behavior is done separately from from the types and",
    "start": "1362759",
    "end": "1368490"
  },
  {
    "text": "because it's just sets of things you can do set Union you can do set intersection you can do what kind of thing these new",
    "start": "1368490",
    "end": "1373679"
  },
  {
    "text": "sets and make bigger sets so in an algebraic type system you build new",
    "start": "1373679",
    "end": "1379590"
  },
  {
    "text": "types some smaller types to possible ways one is you add them together and the other is C or them together so what",
    "start": "1379590",
    "end": "1387090"
  },
  {
    "text": "do I mean by that so when you add things together you might say well you know to",
    "start": "1387090",
    "end": "1392580"
  },
  {
    "text": "make a fruit salad I need an apple and a banana and a cherry so those are the",
    "start": "1392580",
    "end": "1398759"
  },
  {
    "text": "three things I need and and I need all of them and this is typically called you",
    "start": "1398759",
    "end": "1404370"
  },
  {
    "text": "know record who are tuple so an f-sharp would write like this we say a fruit salad here's an apple and a banana and a",
    "start": "1404370",
    "end": "1411629"
  },
  {
    "text": "cherry and this is you know so you can see it's kind of got feel sort of like JavaScript and that the type of Apple is",
    "start": "1411629",
    "end": "1418769"
  },
  {
    "text": "an apple varieties of itself is a type of all the possible apples in the world so that's a record type in their shop",
    "start": "1418769",
    "end": "1425809"
  },
  {
    "text": "with curly braces now the other kind of way of composing types together is",
    "start": "1425809",
    "end": "1430889"
  },
  {
    "text": "something you don't get in c-sharp and Java which is oaring them together so if I want a snack I could say well I want",
    "start": "1430889",
    "end": "1437669"
  },
  {
    "text": "an apple or a banana or cherry just one not not all of them at the same time just pick one of those three so this is",
    "start": "1437669",
    "end": "1444509"
  },
  {
    "text": "a kind of thing you can't really do is sort of like an e none in c-sharp and java is not exactly the same and in F",
    "start": "1444509",
    "end": "1450960"
  },
  {
    "text": "sharp would write like this a snack is either apple or banana or cherry and of course with each thing there's a type",
    "start": "1450960",
    "end": "1457049"
  },
  {
    "text": "that goes on if it's an Apple is the set of all possible apples it could be if it's banana is set for Bernard as it",
    "start": "1457049",
    "end": "1462690"
  },
  {
    "text": "could be so I call that a choice type in F sharp is called a discriminated union",
    "start": "1462690",
    "end": "1468240"
  },
  {
    "text": "you sometimes hear them called some types and so on so that's very very important type and",
    "start": "1468240",
    "end": "1473860"
  },
  {
    "text": "we'll see why it's really useful the minute so here's a real-world example let's say that you have some sort of",
    "start": "1473860",
    "end": "1480549"
  },
  {
    "text": "payment processing system and you accept three kinds of payment like cash checks",
    "start": "1480549",
    "end": "1485950"
  },
  {
    "text": "and credit cards now for cash there's no extra information associated with it the",
    "start": "1485950",
    "end": "1491169"
  },
  {
    "text": "checks we need a check number and for credit cards we need a credit card type and a card number right so how would you",
    "start": "1491169",
    "end": "1497799"
  },
  {
    "text": "implement this in your language of choice well if you were using an oo",
    "start": "1497799",
    "end": "1503619"
  },
  {
    "text": "language like C sharp or Java you'd probably kind of start with an interface like a payment method interface would have some methods on it",
    "start": "1503619",
    "end": "1511330"
  },
  {
    "text": "or something and then you'd say well cash is a kind of subclass or in you know inherits or implements that",
    "start": "1511330",
    "end": "1516730"
  },
  {
    "text": "interface and then you'd have another subclass or check and you'd have another subclass for credit cards and so on so",
    "start": "1516730",
    "end": "1522730"
  },
  {
    "text": "that all implement a particular interface or would inherit from a particular abstract base class that's",
    "start": "1522730",
    "end": "1528789"
  },
  {
    "text": "kind of our way of doing it's all about the behavior each interface has its own behavior now in F sharply pulley",
    "start": "1528789",
    "end": "1536740"
  },
  {
    "text": "wouldn't do it this way we would compose types like this so it start off with some primitive types like a check number",
    "start": "1536740",
    "end": "1542289"
  },
  {
    "text": "is just an INT a card number is just a string and so on so forth we take these",
    "start": "1542289",
    "end": "1547809"
  },
  {
    "text": "basic concepts and we build bigger ones from the smaller ones so we'd say a card",
    "start": "1547809",
    "end": "1554019"
  },
  {
    "text": "type is a choice this is a choice type between a Visa and MasterCard and a credit card information is a is a record",
    "start": "1554019",
    "end": "1561100"
  },
  {
    "text": "it's an and so we say it's a card type and a card number okay so it's a record",
    "start": "1561100",
    "end": "1566499"
  },
  {
    "text": "so there's a choice type to make a bigger thing and a record type to make a bigger thing okay now we've got these",
    "start": "1566499",
    "end": "1573639"
  },
  {
    "text": "things now we build stuff on top of that we say welcome payment method is a",
    "start": "1573639",
    "end": "1579159"
  },
  {
    "text": "choice it's a choice between cash and check and if it's cheque we need the information from the check number we",
    "start": "1579159",
    "end": "1585490"
  },
  {
    "text": "define above and if it's a credit card we need the information from the credit card that we define above so we're",
    "start": "1585490",
    "end": "1590710"
  },
  {
    "text": "building on top of the types you defined earlier and that's a choice type and then we can build on top of that and we",
    "start": "1590710",
    "end": "1597129"
  },
  {
    "text": "can say well okay a payment mount is a decimal that's a primitive currency is a choice between euros and dollars say",
    "start": "1597129",
    "end": "1604050"
  },
  {
    "text": "okay another choice type another primitive type and then we can build an even bigger type say your payment's is",
    "start": "1604050",
    "end": "1609960"
  },
  {
    "text": "an amount it's a record is an amount and it's a currency and it has a method so it's a",
    "start": "1609960",
    "end": "1616740"
  },
  {
    "text": "payment and and each one of those in turn the amount is a payment amount or the payment amount was defined earlier",
    "start": "1616740",
    "end": "1621930"
  },
  {
    "text": "the payment method was defined as the choice type so we've building a bigger and bigger set of types from a very small initial",
    "start": "1621930",
    "end": "1630060"
  },
  {
    "text": "set of primitives and you can keep going going you can now make the payment part of an order or an invoice or something",
    "start": "1630060",
    "end": "1636240"
  },
  {
    "text": "and you can then make the order by no because you can just keep building building bigger and bigger types from",
    "start": "1636240",
    "end": "1641400"
  },
  {
    "text": "this basic process okay so record types",
    "start": "1641400",
    "end": "1646610"
  },
  {
    "text": "which are an types and choice types which are all types so bigger type some",
    "start": "1646610",
    "end": "1654510"
  },
  {
    "text": "smaller types that's the power of composition okay you've heard it before now what's cool about doing this with",
    "start": "1654510",
    "end": "1661560"
  },
  {
    "text": "the types is you get kind of executable documentation which is something we kind of always go forward to to have the",
    "start": "1661560",
    "end": "1666900"
  },
  {
    "text": "documentation as part of the code so if I showed you this codes if suit is a",
    "start": "1666900",
    "end": "1673200"
  },
  {
    "text": "club or a diamond or a spade or heart and a rank is a 2 or 3 or 4 or so on a card is a suit and a rank a hand is a",
    "start": "1673200",
    "end": "1681930"
  },
  {
    "text": "list of cards a deck is as cards a player is a name and a hand and a game is a deck and a list a place so this is",
    "start": "1681930",
    "end": "1690840"
  },
  {
    "text": "all executable code but it's you know I think you can guess what I'm talking",
    "start": "1690840",
    "end": "1696660"
  },
  {
    "text": "about here without having to look in 20 different files we look at we know the doc 200 200 page requirements",
    "start": "1696660",
    "end": "1703170"
  },
  {
    "text": "documenting something this is very nice so we've got using types here to represent nouns but we can also put",
    "start": "1703170",
    "end": "1709320"
  },
  {
    "text": "function types in there so we can say to deal you start with a deck that's the input and you output a new pair you bout",
    "start": "1709320",
    "end": "1716490"
  },
  {
    "text": "put a new deck because the deck is immutable so when you've taken a card off the dick you have a different deck with one less card and now you also have",
    "start": "1716490",
    "end": "1723480"
  },
  {
    "text": "a card on the table so the output is a card on the table and a smaller deck or to pick up a card off the table",
    "start": "1723480",
    "end": "1729810"
  },
  {
    "text": "you start off with your hand and there's a card on the table that's the input and after you've picked up your card you now",
    "start": "1729810",
    "end": "1736020"
  },
  {
    "text": "have a bigger hand and there's card on the table so you can actually represent verbs with types as well so",
    "start": "1736020",
    "end": "1744419"
  },
  {
    "text": "this is pretty cool we've actually represented the entire domain on one screen so it's not scattered around in",
    "start": "1744419",
    "end": "1751440"
  },
  {
    "text": "20 different files like you might have an inner in c-sharp achar it's literally on one screen which is very useful if",
    "start": "1751440",
    "end": "1757019"
  },
  {
    "text": "you're trying to do domain driven design and you want a domain expert to kind of go through this with you because if it's a main expert looks as this thicket",
    "start": "1757019",
    "end": "1762509"
  },
  {
    "text": "actually even though they're not a program where they could look at this they actually you missed out you know I kind of seat maybe you need Joker in",
    "start": "1762509",
    "end": "1768450"
  },
  {
    "text": "there or something and you forgot about it so here's a more real-world example",
    "start": "1768450",
    "end": "1773929"
  },
  {
    "text": "if I show some of this code and I say what payment methods do we take can you guess what payment methods we",
    "start": "1773929",
    "end": "1779909"
  },
  {
    "text": "take it's pretty obvious you just look down this list yeah we take three you don't have to look in the documentation",
    "start": "1779909",
    "end": "1786179"
  },
  {
    "text": "that sort of dig down to the coders is really obvious so typically in a functional program you'd have something",
    "start": "1786179",
    "end": "1792359"
  },
  {
    "text": "like this as the sort of first file in your program and if define the domain for the rest of the system and so this",
    "start": "1792359",
    "end": "1798269"
  },
  {
    "text": "is code but it's also documentation if you change this the rest of the code won't compile and you'll have to fix it",
    "start": "1798269",
    "end": "1804179"
  },
  {
    "text": "up so this is a massive topic if you're",
    "start": "1804179",
    "end": "1809999"
  },
  {
    "text": "interested in DDD and designing the types I have a whole talk on that on my website and I also have a whole book",
    "start": "1809999",
    "end": "1815580"
  },
  {
    "text": "about this if you're interested domain modeling made functional which is available in the bookstore right here and if you want to get a signed copy",
    "start": "1815580",
    "end": "1821070"
  },
  {
    "text": "come and grab me right okay so that's enough theory let's talk about some real",
    "start": "1821070",
    "end": "1828659"
  },
  {
    "text": "codes so start with a very very simple example which is think of a number so",
    "start": "1828659",
    "end": "1833789"
  },
  {
    "text": "this is the children's game think of a number where you say think of a number add one square it subtract 1 divided by",
    "start": "1833789",
    "end": "1840869"
  },
  {
    "text": "than we first thought of subtract the number you first thought of and the answer is 2 it's not amazing absolutely",
    "start": "1840869",
    "end": "1846450"
  },
  {
    "text": "incredible I don't know how this works so anyway so this is let's implement",
    "start": "1846450",
    "end": "1851820"
  },
  {
    "text": "this ok so we're going to use this composition idea we're going to have each little piece is going to be a",
    "start": "1851820",
    "end": "1857129"
  },
  {
    "text": "little bit of well we track you and we're gonna glue the well we try together so we're going to start with a number you thought of going to feed into",
    "start": "1857129",
    "end": "1862590"
  },
  {
    "text": "the first one which adds one and we're taking the output of that and feed it into the track 1 take the output of that feed it into square it and so on and so",
    "start": "1862590",
    "end": "1869309"
  },
  {
    "text": "forth until we get the final answer okay so this is the design we're going to use so let's actually look at the",
    "start": "1869309",
    "end": "1875370"
  },
  {
    "text": "code so we're going to define little helper functions for each step so to add",
    "start": "1875370",
    "end": "1880470"
  },
  {
    "text": "one we just add one to square it we square it you subtract one you know we subtract 1 2 divided by number you",
    "start": "1880470",
    "end": "1886860"
  },
  {
    "text": "thought off we do that so we're going to define all these little helper functions these are the fill bits of railway track and then once we've got the help of",
    "start": "1886860",
    "end": "1893340"
  },
  {
    "text": "functions we can just do the piping thing we start with a number we feed it into add 1 we take the app put a bad one",
    "start": "1893340",
    "end": "1900330"
  },
  {
    "text": "and feed into square it we take the output a square it feed it into the tracks or take the output of that and so on and so on",
    "start": "1900330",
    "end": "1905850"
  },
  {
    "text": "and that gives us the final answer which is 2 so this is a complete little program written using nothing but",
    "start": "1905850",
    "end": "1912690"
  },
  {
    "text": "functions ok it's object free code alright ok this is a very kind of",
    "start": "1912690",
    "end": "1918179"
  },
  {
    "text": "trivial example so we'll look at some more complicate but it gives you an idea of how you might write something using",
    "start": "1918179",
    "end": "1923580"
  },
  {
    "text": "nothing but functions and composition so I hope this makes sense all right",
    "start": "1923580",
    "end": "1930440"
  },
  {
    "text": "ok it's not always that easy of course it's a very trivial example so what we've got here is we've got got two",
    "start": "1930440",
    "end": "1936539"
  },
  {
    "text": "functions each with one input and one output and we glue them together and we get a new function and everything is",
    "start": "1936539",
    "end": "1943139"
  },
  {
    "text": "good and everything is very easy and there's no problems but of course the",
    "start": "1943139",
    "end": "1948570"
  },
  {
    "text": "real world is never that easy so let's look at a couple of challenges the first thing is what happens if you",
    "start": "1948570",
    "end": "1953820"
  },
  {
    "text": "have a function with two outputs right instead of one output all right some",
    "start": "1953820",
    "end": "1958950"
  },
  {
    "text": "functions more complicating that some functions have two inputs right they're not always one input one output so if",
    "start": "1958950",
    "end": "1966240"
  },
  {
    "text": "you have a function with one output and two inputs how can you believe them together all right it's like it seems",
    "start": "1966240",
    "end": "1972090"
  },
  {
    "text": "like it'd be impossible to do that so that's our first challenge what happens if it's got two outputs and one input",
    "start": "1972090",
    "end": "1977940"
  },
  {
    "text": "how do you glue those together that seems pretty hard as well so that'll be",
    "start": "1977940",
    "end": "1983700"
  },
  {
    "text": "our second challenge and we'll look at both of these challenges in the rest of the talk so let's start with the first",
    "start": "1983700",
    "end": "1989220"
  },
  {
    "text": "one composing multiple inputs with Roman numerals so two Roman numerals to make",
    "start": "1989220",
    "end": "1994409"
  },
  {
    "text": "something into Roman numerals this is our little task we take an integer like 5 and we turn it into Roman numerals",
    "start": "1994409",
    "end": "2001460"
  },
  {
    "text": "which we and to me is a V and so you know 12 would be x11 or whatever like that okay so hopefully",
    "start": "2001460",
    "end": "2007580"
  },
  {
    "text": "everyone's familiar with how this works so that here's the design with any years",
    "start": "2007580",
    "end": "2012920"
  },
  {
    "text": "we're gonna face the design on the fact that Roman numerals are based on a tally system you might make four marks and",
    "start": "2012920",
    "end": "2018350"
  },
  {
    "text": "when you have the fifth mark you put a line through all right and hopefully maybe that's where the V came from I'm",
    "start": "2018350",
    "end": "2024380"
  },
  {
    "text": "not sure but it's a tally system so we're going to do is if you want to convert say 17 into Roman numerals we're",
    "start": "2024380",
    "end": "2031700"
  },
  {
    "text": "gonna make 17 copies of what of the I bet alerted I okay 17 eyes and then",
    "start": "2031700",
    "end": "2038990"
  },
  {
    "text": "every time you see five eyes in a row we will paste it with a V and every time you see two V 0 will face with an X and",
    "start": "2038990",
    "end": "2046550"
  },
  {
    "text": "every time we see five X's Noel will place it with an L and every time you see two L's we replace it with a c so",
    "start": "2046550",
    "end": "2053120"
  },
  {
    "text": "this is a very very simple implementation nothing complicated about it and I want to say it's highly",
    "start": "2053120",
    "end": "2060350"
  },
  {
    "text": "performant but it's probably good enough for what we need but it's a really simple model for for the design okay and",
    "start": "2060350",
    "end": "2068360"
  },
  {
    "text": "we keep going and going going depending how high you want to get so again we have these little bits of rail will the",
    "start": "2068360",
    "end": "2074300"
  },
  {
    "text": "way we're going to do it is a little bit of railway track we're gonna start by replicating it however many times and then we're going to replace five eyes",
    "start": "2074300",
    "end": "2081110"
  },
  {
    "text": "with a V and a place to visa the X and place five X's with an L and so on and so forth all right so that's the design",
    "start": "2081110",
    "end": "2088149"
  },
  {
    "text": "here's the problem is through a place function that we use it has three inputs",
    "start": "2088150",
    "end": "2094220"
  },
  {
    "text": "you have the original input string and you have the old value on the new value and that gives you your new output so a",
    "start": "2094220",
    "end": "2099470"
  },
  {
    "text": "place is a three input function all right and that's a problem because we",
    "start": "2099470",
    "end": "2105290"
  },
  {
    "text": "can't compose you know something with one output with something wishes with three inputs all right so this is this",
    "start": "2105290",
    "end": "2112100"
  },
  {
    "text": "is not good so all the all the composition patterns we talked about really only work for functions which",
    "start": "2112100",
    "end": "2118430"
  },
  {
    "text": "have one parameter if you have more than one parameter they don't work so that's that's like bad news right well the good",
    "start": "2118430",
    "end": "2123950"
  },
  {
    "text": "news is that every function can be turned into one parameter function it's one of the key things about functional programming you can always do this and",
    "start": "2123950",
    "end": "2130960"
  },
  {
    "text": "this is a technique called currying named after Haskell curry and carrying sounds really complicated",
    "start": "2130960",
    "end": "2138250"
  },
  {
    "text": "but what it really is is just taking a a two parameter function and turning it",
    "start": "2138250",
    "end": "2143530"
  },
  {
    "text": "into a one parameter function that returns another one parameter function so after carrying we have our function",
    "start": "2143530",
    "end": "2150610"
  },
  {
    "text": "which has one input not two and instead of spitting out the answer it spits out another function this is this whole",
    "start": "2150610",
    "end": "2156940"
  },
  {
    "text": "thing of functions as inputs and outputs so the output of this thing is another function with one input so now we have a",
    "start": "2156940",
    "end": "2164380"
  },
  {
    "text": "series of one input functions the first function takes one input spits out a new function the second function also takes",
    "start": "2164380",
    "end": "2170500"
  },
  {
    "text": "one input and spits out the final result so by having a two parameter function we've now turned it into a series of",
    "start": "2170500",
    "end": "2177910"
  },
  {
    "text": "every single thing is are now one parameter function it's a really important point in getting your head",
    "start": "2177910",
    "end": "2183760"
  },
  {
    "text": "around functional programming it sounds more complicated is it's actually pretty straightforward",
    "start": "2183760",
    "end": "2188880"
  },
  {
    "text": "but there you go so let's actually look at it in practice so because of carrying",
    "start": "2188880",
    "end": "2194620"
  },
  {
    "text": "every function can be turned into a one argument function and which means we can",
    "start": "2194620",
    "end": "2199660"
  },
  {
    "text": "use these composition techniques so here's a replace which is three parameters so here's the original",
    "start": "2199660",
    "end": "2206440"
  },
  {
    "text": "version we have three parameters and naught when we return it and so three inputs in there three inputs in the code",
    "start": "2206440",
    "end": "2212710"
  },
  {
    "text": "all right so that's how you might write it in something like c-sharp and we just",
    "start": "2212710",
    "end": "2218020"
  },
  {
    "text": "return the string but what instead what we're going to do is do this we're going to have a two input function and it's",
    "start": "2218020",
    "end": "2224710"
  },
  {
    "text": "going to return a lambda okay so it's got two inputs and the lamp is going to",
    "start": "2224710",
    "end": "2230020"
  },
  {
    "text": "be returns and the lambda sort of has the the old value in the user list of baked into it right so the lambda is a",
    "start": "2230020",
    "end": "2237100"
  },
  {
    "text": "one parameter function so there's two inputs for the thing right there's only",
    "start": "2237100",
    "end": "2243070"
  },
  {
    "text": "two inputs in the actual code and the lounder itself is now one parameter function so by doing this we can get at",
    "start": "2243070",
    "end": "2249100"
  },
  {
    "text": "one parameter function which we can then compose together okay so once you have",
    "start": "2249100",
    "end": "2254590"
  },
  {
    "text": "these curried functions you can sort do the opposite and do something called partial application very important",
    "start": "2254590",
    "end": "2260260"
  },
  {
    "text": "technique in functional programming so that kind of think of it it's not the same thing as caring at all it's of the opposite so we have this",
    "start": "2260260",
    "end": "2266990"
  },
  {
    "text": "to parameter function and what we're going to do is pass in those two",
    "start": "2266990",
    "end": "2272000"
  },
  {
    "text": "parameters but not the last parameter all right so the the replace function",
    "start": "2272000",
    "end": "2277460"
  },
  {
    "text": "has three inputs originally we're gonna pass in two of them and bake them in and",
    "start": "2277460",
    "end": "2283210"
  },
  {
    "text": "the final input we're not gonna pass in all right so for example if we want to replace 3/5",
    "start": "2283210",
    "end": "2291350"
  },
  {
    "text": "eyes with a V we're gonna say replace five eyes with a V but the actual final",
    "start": "2291350",
    "end": "2296450"
  },
  {
    "text": "third parameter we're not going to pass in right now we're going to pass that in later on when we actually know it is we",
    "start": "2296450",
    "end": "2301520"
  },
  {
    "text": "don't know what the actual input string is but we know that the two of the parameters but we don't know the third",
    "start": "2301520",
    "end": "2306560"
  },
  {
    "text": "one so we're passing two of them for now and we'll leave the third one for later so that's a function so when you call",
    "start": "2306560",
    "end": "2312350"
  },
  {
    "text": "this we're getting a function now which is all it's missing is one extra parameter similarly if we say replace two reasons",
    "start": "2312350",
    "end": "2319010"
  },
  {
    "text": "an X we can pass in the two V's and we can pass in the X the final parameter which is the string we want to replace",
    "start": "2319010",
    "end": "2325460"
  },
  {
    "text": "we don't know where that is but now we have a function that we can actually use later one okay so only two parameters",
    "start": "2325460",
    "end": "2333320"
  },
  {
    "text": "are being passed in like that so if we go back to our design each of our steps",
    "start": "2333320",
    "end": "2339890"
  },
  {
    "text": "is now one parameter function and the to the things we're going to replace with us often are baked in to our steps okay",
    "start": "2339890",
    "end": "2346340"
  },
  {
    "text": "each little bit of railway track has the has the replaced parameter sort baked into it so now we do have a series of one parameter functions and we can",
    "start": "2346340",
    "end": "2353030"
  },
  {
    "text": "compose them so here we go we're going to define our helper functions right and",
    "start": "2353030",
    "end": "2359119"
  },
  {
    "text": "then once we've got our helper functions we can say replicate it however many times do the replace do the replaced is",
    "start": "2359119",
    "end": "2365450"
  },
  {
    "text": "of a place to the place and so on and again with our helper functions we're passing in two out of the three",
    "start": "2365450",
    "end": "2370910"
  },
  {
    "text": "parameters and the third parameter is going to be passed in as part of this piping process all right now one thing",
    "start": "2370910",
    "end": "2378170"
  },
  {
    "text": "is just rather than defining all these helper functions and it's much more common just to like define them in line so if we something if I want to add two",
    "start": "2378170",
    "end": "2384920"
  },
  {
    "text": "to something you know add is a two parameter function but I can say just add one you know part in one parameter",
    "start": "2384920",
    "end": "2390980"
  },
  {
    "text": "and then have this second parameter passed in through piping so for example when I say add two",
    "start": "2390980",
    "end": "2396610"
  },
  {
    "text": "it's missing a parameter that extra parameter is gonna be passed in through the pipe which is five in this case so",
    "start": "2396610",
    "end": "2402520"
  },
  {
    "text": "this is going to be five plus two and then we're going to pass that in to multiply now multiply again is a two",
    "start": "2402520",
    "end": "2407950"
  },
  {
    "text": "parameter function we're going to give it one of the parameters which is the two and the second parameter is going to",
    "start": "2407950",
    "end": "2413170"
  },
  {
    "text": "be coming from the pipe so that goes there's a same as five a two is 10 or a 5 out of 7 times 2 is 14 or okay so if",
    "start": "2413170",
    "end": "2423100"
  },
  {
    "text": "we look at our code we don't have to have all this helper functions we literally just inline the replace like",
    "start": "2423100",
    "end": "2429160"
  },
  {
    "text": "this so this is our final example and how we really promote it what's cool",
    "start": "2429160",
    "end": "2434410"
  },
  {
    "text": "about writing code like this is that you might have noticed that we actually don't have a very complete implementation because in modern Roman",
    "start": "2434410",
    "end": "2440650"
  },
  {
    "text": "numerals you know if you don't you don't have five eye for eyes in a row you",
    "start": "2440650",
    "end": "2445750"
  },
  {
    "text": "place it with one V and you don't have V one one one one one you have one x so we",
    "start": "2445750",
    "end": "2451300"
  },
  {
    "text": "can easily add new segments so we can just say okay every time you see V 1 1 1 I'm just placing 1 X every time you see",
    "start": "2451300",
    "end": "2456760"
  },
  {
    "text": "four ones just replace it with one V and so on so this is our final this is our",
    "start": "2456760",
    "end": "2461920"
  },
  {
    "text": "final implementation this this pipeline pressure is really nice spoon so you can slot things in and out of the pipeline",
    "start": "2461920",
    "end": "2468220"
  },
  {
    "text": "you can add things you can move things you can add new features at the end just like the UNIX philosophy okay so that's",
    "start": "2468220",
    "end": "2475240"
  },
  {
    "text": "this challenge of how do you deal with two inputs that was our challenge and I think we have dealt with that",
    "start": "2475240",
    "end": "2480670"
  },
  {
    "text": "successfully using partial application so this is why partial application is really important as a way of helping",
    "start": "2480670",
    "end": "2487240"
  },
  {
    "text": "with composition all right another one fist buzz ok so Fitz buzz for people who",
    "start": "2487240",
    "end": "2493930"
  },
  {
    "text": "aren't familiar with it print the numbers from 1 200 but if it's a multiple 3 print fizz if it's multiple",
    "start": "2493930",
    "end": "2499000"
  },
  {
    "text": "fine print buzz and if it's both print fizzbuzz multiple 15 okay so here's a",
    "start": "2499000",
    "end": "2504330"
  },
  {
    "text": "basic implementation if the number students by 15 print fizzbuzz if it's",
    "start": "2504330",
    "end": "2509650"
  },
  {
    "text": "divisible by 3 print fears mister visible by 5 print buzz and so on and so forth otherwise",
    "start": "2509650",
    "end": "2515560"
  },
  {
    "text": "you print the original number and we have this little helper function call is divisible by it's just as if it's",
    "start": "2515560",
    "end": "2520780"
  },
  {
    "text": "divisible by you know that's good well this is a perfectly good implementation but it's not good enough for us today",
    "start": "2520780",
    "end": "2527920"
  },
  {
    "text": "because I want to do it in a different way completely I want to make it a lot complicated and the way I'm going to",
    "start": "2527920",
    "end": "2532990"
  },
  {
    "text": "make it more complicated and when he is a functional approach using a pipeline so what we're going to do is we're going",
    "start": "2532990",
    "end": "2538299"
  },
  {
    "text": "to have all these little bits of track and each one does one case so we're gonna handle the 15 case we're going to",
    "start": "2538299",
    "end": "2544059"
  },
  {
    "text": "handle the three case we're gonna handle the five case and anything that we didn't handle will be in the final remaining case so how do we implement",
    "start": "2544059",
    "end": "2552789"
  },
  {
    "text": "each of these cases well we're going to handle the case there's two possible",
    "start": "2552789",
    "end": "2558039"
  },
  {
    "text": "choices for the output either it's what we call uncarbonated which means nothing happens right like you passed in two and",
    "start": "2558039",
    "end": "2564640"
  },
  {
    "text": "nothing happened oh it's carbonated where you get back a string you get back up fears of a buzz right so how can you",
    "start": "2564640",
    "end": "2571599"
  },
  {
    "text": "represent a - two different choices for the output right two different choices",
    "start": "2571599",
    "end": "2578289"
  },
  {
    "text": "for the output how we're going to represent that well we're going to represent it with a little bit of railway track but this time we're going",
    "start": "2578289",
    "end": "2585130"
  },
  {
    "text": "to have two outputs in the well we track okay so it's going to be an input and there's going to be two possible outputs",
    "start": "2585130",
    "end": "2590500"
  },
  {
    "text": "one is the uncarbonated case and the other is the carbonator case so we're",
    "start": "2590500",
    "end": "2596980"
  },
  {
    "text": "going to create a new type to represent these choices it's going to have two choices going to be choice type with two",
    "start": "2596980",
    "end": "2601990"
  },
  {
    "text": "cases the first case is is uncarbonated in which case we have the original integer or it's carbonated and we have a",
    "start": "2601990",
    "end": "2608950"
  },
  {
    "text": "string like fizz or bars or something I am so it's an unprocessed case and a processed case so that's our type server",
    "start": "2608950",
    "end": "2616359"
  },
  {
    "text": "we modeling our domain with a choice type and then we're going to have our",
    "start": "2616359",
    "end": "2621880"
  },
  {
    "text": "actual handle each case our particular I'm going to call this function carbonate okay and if it's divisible by",
    "start": "2621880",
    "end": "2628210"
  },
  {
    "text": "the thing it's going to be carbonated and we're going to give it a label and if it's not divisible by the thing it's",
    "start": "2628210",
    "end": "2633940"
  },
  {
    "text": "uncarbonated and we just leave it alone okay so there's the carbonated case and",
    "start": "2633940",
    "end": "2639099"
  },
  {
    "text": "there's the uncarbonated case all right so that's our complete design right",
    "start": "2639099",
    "end": "2644980"
  },
  {
    "text": "there that's everything we need and if you think this is particularly complicated it is and this is actually",
    "start": "2644980",
    "end": "2653160"
  },
  {
    "text": "Ragan wold use this as an example of how not to do an interview question so if",
    "start": "2653160",
    "end": "2659289"
  },
  {
    "text": "they ask you to do fizzes an interview don't give them this answer but I for technical talk it's kind of a fun",
    "start": "2659289",
    "end": "2664930"
  },
  {
    "text": "way of showing how to do functional programming right notice this has three",
    "start": "2664930",
    "end": "2671320"
  },
  {
    "text": "parameters it has the number like three the label like frizz and the actual number that you're going to try not work",
    "start": "2671320",
    "end": "2677140"
  },
  {
    "text": "with all right three proud of function pay attention to that all right so let's",
    "start": "2677140",
    "end": "2682720"
  },
  {
    "text": "actually see this in use so let's say we take 12 and we pass it into carbonate three with fins now carbonate three with",
    "start": "2682720",
    "end": "2689170"
  },
  {
    "text": "phases it's really passing into the extra parameter is going to come from the 12 that we've passed in through the",
    "start": "2689170",
    "end": "2694540"
  },
  {
    "text": "pipeline okay so if you pass 12 into that it says yes that's differs by three I'm going to give you a fizz if we pass",
    "start": "2694540",
    "end": "2701530"
  },
  {
    "text": "10 into that it's going to say no no no that's not divisible by three I'm going to give you an uncommon age of ten but",
    "start": "2701530",
    "end": "2708970"
  },
  {
    "text": "if I say if I pass it into carbonate with five so yeah that does that it does",
    "start": "2708970",
    "end": "2714100"
  },
  {
    "text": "work and I'm gonna give you a carbonated buzz okay so there's our little code you",
    "start": "2714100",
    "end": "2719200"
  },
  {
    "text": "know a little testing our code to make sure it works okay all right now we have",
    "start": "2719200",
    "end": "2724840"
  },
  {
    "text": "a problem how do we compose these things these railway tracks they don't fit",
    "start": "2724840",
    "end": "2731080"
  },
  {
    "text": "right so what we want to do is if it's uncarbonated we didn't process that we",
    "start": "2731080",
    "end": "2737050"
  },
  {
    "text": "want to go on to the next one if it was Carleton natives we want to bypass we want to go all the way down once we've got it carbonated we all go all the way",
    "start": "2737050",
    "end": "2743320"
  },
  {
    "text": "to the end and not do anything else all right so here's the problem how do we compose",
    "start": "2743320",
    "end": "2748900"
  },
  {
    "text": "these things well the answer is like this if you've ever played with a toy",
    "start": "2748900",
    "end": "2754060"
  },
  {
    "text": "train you'll know that you can actually make two tracks like this so I call this",
    "start": "2754060",
    "end": "2759760"
  },
  {
    "text": "the two-track model of programming otherwise known as a railway oriented programming and I have a whole talk on",
    "start": "2759760",
    "end": "2764770"
  },
  {
    "text": "this if you're interested and it's a nice idea in theory but let's see what",
    "start": "2764770",
    "end": "2771430"
  },
  {
    "text": "the problems are because if you want to compose one track functions it's really easy you just take the output of one and feed it to the input the next one and if",
    "start": "2771430",
    "end": "2778510"
  },
  {
    "text": "you have to track functions they're easy to compose too because you take the output of one thing and connect to that",
    "start": "2778510",
    "end": "2784119"
  },
  {
    "text": "and you take the output of the second one and connect to that so that works fine - no problem composing - to track",
    "start": "2784119",
    "end": "2789400"
  },
  {
    "text": "functions like this but what we have is we have a function with one input and two outputs and they don't compose all right so this",
    "start": "2789400",
    "end": "2797600"
  },
  {
    "text": "is our problem this is our challenge so let's look at our first implementation",
    "start": "2797600",
    "end": "2803260"
  },
  {
    "text": "we're going to take the result from 15 and if it's carbonated we're done",
    "start": "2803260",
    "end": "2808610"
  },
  {
    "text": "it was uncarbonated we have to go to the next step which is try three if we get three if it's carbonated we're",
    "start": "2808610",
    "end": "2814970"
  },
  {
    "text": "done if it's uncarbonated we have it to try five and if that's done if it's",
    "start": "2814970",
    "end": "2820610"
  },
  {
    "text": "carbonated that works if it's uncarbonated then we get the final result so this is an implementation but it's really really ugly I mean this is a",
    "start": "2820610",
    "end": "2827210"
  },
  {
    "text": "horrible ugly code but there's a pan we can make this code a lot simpler if we",
    "start": "2827210",
    "end": "2832490"
  },
  {
    "text": "notice there's a pattern and the pan is that every time we have an uncarbonated case we do something if it's",
    "start": "2832490",
    "end": "2838250"
  },
  {
    "text": "uncarbonated do something if it's uncarbonated do something if it's uncarbonated do something that's the",
    "start": "2838250",
    "end": "2843500"
  },
  {
    "text": "pattern so let's take that pan and run with it so if it's carbonated we're done but if",
    "start": "2843500",
    "end": "2850700"
  },
  {
    "text": "it's uncarbonated we do something if that's the pattern we're going to try and turn into code so we're going to",
    "start": "2850700",
    "end": "2856910"
  },
  {
    "text": "parameterize what is it we're going to do what it depends we don't know so let's write the code if it's uncool this",
    "start": "2856910",
    "end": "2863900"
  },
  {
    "text": "function if uncarbonated do okay so if it's a carbon natives we say it's done if it's uncarbonated we're going to do",
    "start": "2863900",
    "end": "2870859"
  },
  {
    "text": "something with a number but we don't know what it is we're going to call the function with that number where does",
    "start": "2870859",
    "end": "2876680"
  },
  {
    "text": "that function come from it's going to come from a parameter so this is parameterize all the things we don't",
    "start": "2876680",
    "end": "2881780"
  },
  {
    "text": "know exactly we want to do so we're going to pass it as a parameter it's a function parameter fine so it's a function as a parameter now with this if",
    "start": "2881780",
    "end": "2890300"
  },
  {
    "text": "uncarbonated do function our code is actually a lot simpler because we start with carbonated by 15 if it's",
    "start": "2890300",
    "end": "2896119"
  },
  {
    "text": "uncarbonated we do we use the carbonate function with the next one if you're",
    "start": "2896119",
    "end": "2901160"
  },
  {
    "text": "still on carbonated we do the next one and if you're still on carbonated that we do the last step which is slightly",
    "start": "2901160",
    "end": "2906859"
  },
  {
    "text": "different because we have to do some special case with other but otherwise we can keep chaining these steps over and",
    "start": "2906859",
    "end": "2912530"
  },
  {
    "text": "over and over again so this code is a lot cleaner it's a lot more linear now",
    "start": "2912530",
    "end": "2917930"
  },
  {
    "text": "obviously this in if uncommon need to do is a really weird way of doing fizzbuzz but you'll see in a minute that is quite",
    "start": "2917930",
    "end": "2923420"
  },
  {
    "text": "important now one thing one more thing we said is that we've fizzbuzz for one number and we wanted it",
    "start": "2923420",
    "end": "2929520"
  },
  {
    "text": "to work for numbers from one to hundred now in functional program you're not allowed to use loops or you can use",
    "start": "2929520",
    "end": "2935340"
  },
  {
    "text": "loops but generally you don't that won't work you can't pass a list of numbers into a functional front with one number",
    "start": "2935340",
    "end": "2941610"
  },
  {
    "text": "so here we have a function with one number and what we do is we use another",
    "start": "2941610",
    "end": "2946710"
  },
  {
    "text": "there's a special thing called a function transformer which turns functions into other kinds of functions and that in this case it's going to be",
    "start": "2946710",
    "end": "2953370"
  },
  {
    "text": "lists mapped so list map turns a normal function into functions that work with lists so after we've done list map we",
    "start": "2953370",
    "end": "2960390"
  },
  {
    "text": "now have a fizzbuzz that work with lists and now we can pass in a list of things as input and get a list of things output",
    "start": "2960390",
    "end": "2966920"
  },
  {
    "text": "so that's an interesting way of think about lists map or select in link if you in fusee shop and you'd use it like this",
    "start": "2966920",
    "end": "2973740"
  },
  {
    "text": "you say fizzbuzz for list is list map or fizzbuzz so this map is oh is a function transformer so here's our final code",
    "start": "2973740",
    "end": "2981170"
  },
  {
    "text": "carbonate it if I'm company to do this if I can they do this otherwise do the last step and to do it from once 100 we",
    "start": "2981170",
    "end": "2987540"
  },
  {
    "text": "say is 100 we feed it into we feed that list of numbers into the mapped version of fizzbuzz and then it gives us another",
    "start": "2987540",
    "end": "2993960"
  },
  {
    "text": "list of things and then finally we print those things out so what's another way and what's interesting about this is",
    "start": "2993960",
    "end": "2999990"
  },
  {
    "text": "we're only doing the i/o or any printing things at the very end everything else is a pure function with no side effects",
    "start": "2999990",
    "end": "3007300"
  },
  {
    "text": "unlike they're very the first example I showed you a it printed right in the middle of the loop this is a much more",
    "start": "3007300",
    "end": "3012740"
  },
  {
    "text": "reusable kind of code all right and that brings us to the M word so there's a",
    "start": "3012740",
    "end": "3018710"
  },
  {
    "text": "general solution to handling functions like this and the answer is yes and the answer is bind bind is the answer",
    "start": "3018710",
    "end": "3025520"
  },
  {
    "text": "bind all the things FP people like the word bind a lot so we have a very common",
    "start": "3025520",
    "end": "3032480"
  },
  {
    "text": "problem in function program we have these kinds of two parameters two things with two outputs and and they're not",
    "start": "3032480",
    "end": "3037760"
  },
  {
    "text": "suitable for composition if we could can turn them into these kind of to track things they would be suitable for composition because these things are",
    "start": "3037760",
    "end": "3044090"
  },
  {
    "text": "very easy to work with all right so that's good so we have a general problem of turning the top kind of thing into",
    "start": "3044090",
    "end": "3050990"
  },
  {
    "text": "the bottom kind of thing and that's what binders by there's a kind of adapter",
    "start": "3050990",
    "end": "3056390"
  },
  {
    "text": "block if you think of the Model Railway again you can kind of have a big block and you kind of slot the that the points functional the switch",
    "start": "3056390",
    "end": "3063200"
  },
  {
    "text": "function into it and you get a new two-track function see there's a kind of a slot for a function you pass in the",
    "start": "3063200",
    "end": "3069350"
  },
  {
    "text": "points and you get back a to track that's what mind is so here's the",
    "start": "3069350",
    "end": "3074720"
  },
  {
    "text": "implementation of bind for carbonated so we pass in two things okay if the input",
    "start": "3074720",
    "end": "3080240"
  },
  {
    "text": "is uncarbonated then we call this carbonation function and if the input",
    "start": "3080240",
    "end": "3087050"
  },
  {
    "text": "was already carbonated then we just bypass we never call the function okay and this is exactly what our if",
    "start": "3087050",
    "end": "3093680"
  },
  {
    "text": "uncarbonated he was right that's exactly this is exactly the same implementation as uh if I'm coming in to except this",
    "start": "3093680",
    "end": "3100280"
  },
  {
    "text": "time we're calling it bind so this brings us to monads so monad sounds",
    "start": "3100280",
    "end": "3105710"
  },
  {
    "text": "scary but it's really not as scary as you might think it's really a monad is just a datatype and an associated bind",
    "start": "3105710",
    "end": "3112910"
  },
  {
    "text": "function and a couple of other stuff which is really not important right now so is this a datatype in a bind function",
    "start": "3112910",
    "end": "3118060"
  },
  {
    "text": "so in our case the datatype was the carbonation results which is that little thing with the two choices and the bind",
    "start": "3118060",
    "end": "3125060"
  },
  {
    "text": "function was the if on Carboni to do so we just created our own monad in the last few minutes and sometimes you hear",
    "start": "3125060",
    "end": "3131630"
  },
  {
    "text": "the word monadic function which is a switch or a points function and then",
    "start": "3131630",
    "end": "3136760"
  },
  {
    "text": "again used by in to compose them so there's carbonate the carbonate function like that that was our monadic functions",
    "start": "3136760",
    "end": "3143030"
  },
  {
    "text": "that we were working with okay so that's what a monad is is unfortunately unfortunate terminology but there you go",
    "start": "3143030",
    "end": "3148880"
  },
  {
    "text": "that's what we have alright so there's two outputs one inputs and that was our",
    "start": "3148880",
    "end": "3154490"
  },
  {
    "text": "challenge number to do how can we close them we said we've proposed them with monads all right",
    "start": "3154490",
    "end": "3160700"
  },
  {
    "text": "one more example of using binds so async tasks async futures promises tasks",
    "start": "3160700",
    "end": "3167090"
  },
  {
    "text": "whatever II want to call them you often will connect them when the task completes do the next thing otherwise you're done let's look at some",
    "start": "3167090",
    "end": "3175940"
  },
  {
    "text": "codes so typically you might say start a task when it's finished do the next thing and when it's finished do the next",
    "start": "3175940",
    "end": "3181640"
  },
  {
    "text": "thing when it's finished do the next thing and so on so forth you get this thing called the Pyramid of doom which is pretty ugly so let's see how monads",
    "start": "3181640",
    "end": "3189920"
  },
  {
    "text": "can solve this problem so we're going to have a bind function for task and it says when finished do something",
    "start": "3189920",
    "end": "3197040"
  },
  {
    "text": "okay and this thing that you do is a parameter you don't really care what it is it's just a function parameter that",
    "start": "3197040",
    "end": "3202290"
  },
  {
    "text": "you can a person just like we did with the if I'm culminated so if you take once we've got this is a bind helper",
    "start": "3202290",
    "end": "3208260"
  },
  {
    "text": "function we can rewrite that code as start the task and then bind it to start",
    "start": "3208260",
    "end": "3213360"
  },
  {
    "text": "another term and bind it to another start another toss so now instead of having this kind of pyramidal going",
    "start": "3213360",
    "end": "3219420"
  },
  {
    "text": "further and further out you just have a nice linear line of things to do this is why functional people like monads for",
    "start": "3219420",
    "end": "3225960"
  },
  {
    "text": "this kind of thing one more example error generating functions so you often",
    "start": "3225960",
    "end": "3232860"
  },
  {
    "text": "have a situation way you might have a website and you have some some inputs you validate request you canonicalize",
    "start": "3232860",
    "end": "3238290"
  },
  {
    "text": "the email make it lower case for example effect your record from the database update a record in the database and so",
    "start": "3238290",
    "end": "3243630"
  },
  {
    "text": "on but the problem is there's all sorts of errors like that the name might not be there my name might be blank you",
    "start": "3243630",
    "end": "3249450"
  },
  {
    "text": "might not find the user in the database you might get an authorization error there's all these things and go wrong right so it's not a nice linear thing",
    "start": "3249450",
    "end": "3256620"
  },
  {
    "text": "you have to have all this error handling stuff so to model this in functional away we'd have all these different steps",
    "start": "3256620",
    "end": "3263520"
  },
  {
    "text": "so the validation step might or might not work is that it's a kind of a to two outputs the lower casing an email is",
    "start": "3263520",
    "end": "3270090"
  },
  {
    "text": "always going to work so there's a one input one output fetching something from the database might a mine at work it",
    "start": "3270090",
    "end": "3276330"
  },
  {
    "text": "might give an error so that's a there's the two possible outputs and updating something in the database and might not return anything at all it just does it",
    "start": "3276330",
    "end": "3283650"
  },
  {
    "text": "and never returns so these kinds of functions are not composable the way they stand so one of the things that",
    "start": "3283650",
    "end": "3291420"
  },
  {
    "text": "functional programmers do spend a lot of time making kind these things into comparable functions since is where the monads come in so we miss matched as",
    "start": "3291420",
    "end": "3298620"
  },
  {
    "text": "they are right now but if we use a map function and we use a bind function and we use various other things to you know",
    "start": "3298620",
    "end": "3305130"
  },
  {
    "text": "transform functions into other functions once we've done the transformation like this we transform our original functions",
    "start": "3305130",
    "end": "3311730"
  },
  {
    "text": "into new functions like that and then once they've been transformed into new functions these new functions can be",
    "start": "3311730",
    "end": "3317490"
  },
  {
    "text": "composed so by turning for example turning the DB fetch in to bind we've",
    "start": "3317490",
    "end": "3322740"
  },
  {
    "text": "turned it into a two-track function by using map on the lower case in the email we've turned it into function and so on and so forth and once",
    "start": "3322740",
    "end": "3329549"
  },
  {
    "text": "you've got all these two-track functions it's really obvious how to clear them together so again all these things like Mona's and stuff is really to make about",
    "start": "3329549",
    "end": "3336180"
  },
  {
    "text": "making composition easier all right final thing web service so that's one",
    "start": "3336180",
    "end": "3343829"
  },
  {
    "text": "kind of composition we've talked about two tracks but another kind of composition these these monadic functions these like one track input to",
    "start": "3343829",
    "end": "3350160"
  },
  {
    "text": "track out but this happen all the time and there's another way of composing them other than the two-track model it's",
    "start": "3350160",
    "end": "3356220"
  },
  {
    "text": "called Heisley composition and what happens is you take two of these things and you glue them together",
    "start": "3356220",
    "end": "3361410"
  },
  {
    "text": "and you get another one of the same kind so this is just like adding two numbers together and get another number adding",
    "start": "3361410",
    "end": "3367950"
  },
  {
    "text": "you know concatenate another list composing these two kinds of functions",
    "start": "3367950",
    "end": "3373380"
  },
  {
    "text": "and get another function of the same kind that's closely a composition okay very important that's the same kind of",
    "start": "3373380",
    "end": "3378809"
  },
  {
    "text": "thing this is where this whole concert of monoids comes in making two glowing two things together and get the same",
    "start": "3378809",
    "end": "3384299"
  },
  {
    "text": "kind of thing back so there's this library called swath IO which is an f-sharp web library and it has a concept",
    "start": "3384299",
    "end": "3390480"
  },
  {
    "text": "of a web part and a web part has an input which is an HTTP context",
    "start": "3390480",
    "end": "3396119"
  },
  {
    "text": "everything you need to know about the HTTP the requests and the cookies and all that stuff okay and the output is an",
    "start": "3396119",
    "end": "3401849"
  },
  {
    "text": "async of an optional HTTP context so it's async because it's might not really",
    "start": "3401849",
    "end": "3407130"
  },
  {
    "text": "know it returns not immediately and it's optional because you might not handle it you might say I can't handle this thing",
    "start": "3407130",
    "end": "3412349"
  },
  {
    "text": "you've given me a get like I can only do posts so it's got two possible outputs",
    "start": "3412349",
    "end": "3417450"
  },
  {
    "text": "okay so it might fail right so there's a whole bunch of things let's look at how",
    "start": "3417450",
    "end": "3422579"
  },
  {
    "text": "this works in practice so the way you glue these things in in suave is you have this composition it supplies the",
    "start": "3422579",
    "end": "3427829"
  },
  {
    "text": "composition symbol which is an angle equals an angle you glue two thumbs together you get another one of the same",
    "start": "3427829",
    "end": "3433020"
  },
  {
    "text": "kind of thing just like Lego all right and because it's another thing kind of thing you can repeat you can add things",
    "start": "3433020",
    "end": "3439020"
  },
  {
    "text": "to that and then you can take those things and add things to that and make bigger and bigger bigger things so here",
    "start": "3439020",
    "end": "3444809"
  },
  {
    "text": "is a web part called path and it checks the path and if it works",
    "start": "3444809",
    "end": "3449880"
  },
  {
    "text": "it succeeds and if it doesn't it fails okay so there's success or failure if it",
    "start": "3449880",
    "end": "3454890"
  },
  {
    "text": "matches or it doesn't match and then here is a thing called okay that's a web part and all it does is set the sponsor",
    "start": "3454890",
    "end": "3460650"
  },
  {
    "text": "that all works okay now if you take two of those things in you glue them together you",
    "start": "3460650",
    "end": "3466109"
  },
  {
    "text": "check the path and if the path matches hello then you return hello okay so we're just going to glue this two things",
    "start": "3466109",
    "end": "3472170"
  },
  {
    "text": "together and now we get a new web part so now we have a web part that matches the path and returns something okay so",
    "start": "3472170",
    "end": "3479040"
  },
  {
    "text": "that's a new web part and there's another one called choose and a choose web part takes a bunch of these things",
    "start": "3479040",
    "end": "3484770"
  },
  {
    "text": "and it picks the first one that works all right so all it does is pick the first one that works and that whatever",
    "start": "3484770",
    "end": "3490560"
  },
  {
    "text": "turns it okay so for example we could say choose between these two things if the path is",
    "start": "3490560",
    "end": "3497460"
  },
  {
    "text": "hello return okay hello if the path is goodbye return okay goodbye so if the",
    "start": "3497460",
    "end": "3503160"
  },
  {
    "text": "path is goodbye the first one's going to fail and the second one's going to succeed if the path is hello are the",
    "start": "3503160",
    "end": "3508680"
  },
  {
    "text": "first ones - the seed if the path is neither those the whole thing's going to fail so the choose itself is going to",
    "start": "3508680",
    "end": "3513900"
  },
  {
    "text": "fail it's going to be the bad side of the output okay and then we have a web",
    "start": "3513900",
    "end": "3519540"
  },
  {
    "text": "part called get which only succeeds if the request is a get request and then we can take that get and we can connect it",
    "start": "3519540",
    "end": "3526020"
  },
  {
    "text": "to the choose and now what we have is something that will only succeed if it's a get request and if it's one of those",
    "start": "3526020",
    "end": "3531480"
  },
  {
    "text": "two paths all right so now we've built up a more complex thing and we can build",
    "start": "3531480",
    "end": "3536880"
  },
  {
    "text": "up a complete web app the same way so we say if it's a get choose between these paths if it's a post choose between",
    "start": "3536880",
    "end": "3543060"
  },
  {
    "text": "these paths okay and then we just assign that whole thing we choose between the gate and the post",
    "start": "3543060",
    "end": "3548820"
  },
  {
    "text": "and now we have a complete web app so this web app is obviously it's a really simple really simple web app but I mean",
    "start": "3548820",
    "end": "3555180"
  },
  {
    "text": "it's a web app there's no objects it's all functions composed together and we",
    "start": "3555180",
    "end": "3561180"
  },
  {
    "text": "just say start the web server with that app and then your so the web parts are",
    "start": "3561180",
    "end": "3566670"
  },
  {
    "text": "connected and they're reusable just like the Lego so it's a really nice way of",
    "start": "3566670",
    "end": "3572670"
  },
  {
    "text": "doing web design because each of these things is testable in isolation you don't have to set up a whole complicated server to test this thing each part is",
    "start": "3572670",
    "end": "3579270"
  },
  {
    "text": "individual there's no strings attached so each part is testable individually so",
    "start": "3579270",
    "end": "3584580"
  },
  {
    "text": "this is what a web app looks like in you have your request coming in you have all digital functions you choose between which one based on you don't really have",
    "start": "3584580",
    "end": "3590970"
  },
  {
    "text": "a route or a dispatch you just have these juice webparts okay no classes no loops just",
    "start": "3590970",
    "end": "3598420"
  },
  {
    "text": "pure functions just composition just input and output the power of composition right so let's just look at",
    "start": "3598420",
    "end": "3607060"
  },
  {
    "text": "what we covered philosophy of composition always connectable no adapters needed reusable parts we looked",
    "start": "3607060",
    "end": "3614200"
  },
  {
    "text": "at principles composable functions and composable types everything's composable and the final",
    "start": "3614200",
    "end": "3620320"
  },
  {
    "text": "composition types of composition we looked at basic composition just gluing track together with that we looked at",
    "start": "3620320",
    "end": "3625930"
  },
  {
    "text": "piping we looked at partial application we looked at monads yuck we neither to bind and we looked at",
    "start": "3625930",
    "end": "3632260"
  },
  {
    "text": "supplies the composition so that really is everything if you if you understand this talk which you can always go and review it later on the video but this is",
    "start": "3632260",
    "end": "3638770"
  },
  {
    "text": "really everything you need to know about functional programming right here if you understand this you know you really there's nothing stopping you going ahead",
    "start": "3638770",
    "end": "3645490"
  },
  {
    "text": "and doing stuff so thanks very much this talk will be on my website F sharp on",
    "start": "3645490",
    "end": "3651430"
  },
  {
    "text": "the profits there'll be a slides there I have other videos there I have books including my domain modeling book and if",
    "start": "3651430",
    "end": "3658330"
  },
  {
    "text": "you want to contact me on Twitter and it's got the Russian so thank you very much [Applause]",
    "start": "3658330",
    "end": "3672500"
  }
]