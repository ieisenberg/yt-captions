[
  {
    "text": "so how's everyone doing today cool welcome that was uh very",
    "start": "60",
    "end": "5700"
  },
  {
    "text": "unenthusiastic but I'll forgive you it's three o'clock on a Friday it's close to uh well I won't say what",
    "start": "5700",
    "end": "12780"
  },
  {
    "text": "time I tend to say because I'm being recorded and it's got an F-bomb in it but uh",
    "start": "12780",
    "end": "18420"
  },
  {
    "text": "actually it's got another bad word on it too so anyhow um so welcome everyone uh to understanding",
    "start": "18420",
    "end": "24900"
  },
  {
    "text": "probabilistic data structures with a hundred and twelve thousand and 92 UFO sightings",
    "start": "24900",
    "end": "30900"
  },
  {
    "text": "my name is Guy Royce I'm a developer Advocate at redis there's really not much on this slide that matters uh",
    "start": "30900",
    "end": "37559"
  },
  {
    "text": "there's something on there that will matter to you there's something that matters to me and there's something that matters to my",
    "start": "37559",
    "end": "43440"
  },
  {
    "text": "boss any guess which thing matters to my boss that uh come on point or get over there",
    "start": "43440",
    "end": "50579"
  },
  {
    "text": "that redis logo right there my job is to go out and say hey redis is",
    "start": "50579",
    "end": "55980"
  },
  {
    "text": "cool and it does things like that you might not be aware of how many here have used redis before",
    "start": "55980",
    "end": "61260"
  },
  {
    "text": "a lot of you how many have used it for something other than a cash",
    "start": "61260",
    "end": "66420"
  },
  {
    "text": "more than all usual uh most people it's the cash it's got",
    "start": "66420",
    "end": "71460"
  },
  {
    "text": "getting sets well I'm going to talk about today uh probabilistic data structures which is the thing that redis does as well I'm going to talk about the",
    "start": "71460",
    "end": "77520"
  },
  {
    "text": "data structures really more than the redis but I'll show you how to do it in redis as well so that's the part that matters to my boss the part that matters",
    "start": "77520",
    "end": "83880"
  },
  {
    "text": "to me is are those social media links there well maybe the Twitter account doesn't matter as much as it used to but",
    "start": "83880",
    "end": "90900"
  },
  {
    "text": "um but you know kind of matters to me a little bit I guess but I I sort of Judge my value as a human based on how many",
    "start": "90900",
    "end": "96600"
  },
  {
    "text": "people follow me on social media and so uh please do me a favor and give me a follow the part that matters to you the",
    "start": "96600",
    "end": "103020"
  },
  {
    "text": "important part is that github.com guy Royce URL uh there's lots of code and",
    "start": "103020",
    "end": "108960"
  },
  {
    "text": "repositories all my all my talks are archived out there so if you want to go check stuff out afterwards and play with",
    "start": "108960",
    "end": "114659"
  },
  {
    "text": "this that is a good place to go I will point out that yes I do have a domain name of guy.dev",
    "start": "114659",
    "end": "120920"
  },
  {
    "text": "which I think is probably the most badass thing that I've ever done in my entire life",
    "start": "120920",
    "end": "126659"
  },
  {
    "text": "for the low low price of 180 a month a year not a month a month well that'd be a lot wouldn't it 180 U.S a year so",
    "start": "126659",
    "end": "134760"
  },
  {
    "text": "um but yeah so 112 092.",
    "start": "134760",
    "end": "139860"
  },
  {
    "text": "this is kind of a surprising number it's a surprisingly large number it's a surprisingly precise number this is the",
    "start": "139860",
    "end": "147120"
  },
  {
    "text": "number of UFO sightings I have in this wonderful data set uh called that I I",
    "start": "147120",
    "end": "152580"
  },
  {
    "text": "pulled off the internet 112 000 and 92 UFO sightings in North America from",
    "start": "152580",
    "end": "157680"
  },
  {
    "text": "about 1950 to about five-ish years ago uh this data is glorious and wonderful",
    "start": "157680",
    "end": "164220"
  },
  {
    "text": "I've got I got it off off this website called data.world and it was screen scraped from the",
    "start": "164220",
    "end": "170340"
  },
  {
    "text": "National UFO Research Center um by this wonderful user of that website",
    "start": "170340",
    "end": "176519"
  },
  {
    "text": "named Tim Renner and he scrapes uh UFOs sightings from their website made a big",
    "start": "176519",
    "end": "181800"
  },
  {
    "text": "CSV file with 112 092 lines in it a 93 count in the header and um he that's what he does he likes",
    "start": "181800",
    "end": "189300"
  },
  {
    "text": "weird data he scrapes the stuff and he does data science against it he did it with Bigfoot sightings he did it with",
    "start": "189300",
    "end": "194400"
  },
  {
    "text": "UFO sightings he did it with haunted places he even did it with dog Man sightings I didn't even know Dogman was",
    "start": "194400",
    "end": "201120"
  },
  {
    "text": "a thing I I guess he's a dog man",
    "start": "201120",
    "end": "206340"
  },
  {
    "text": "and um what he likes to do with them is do data science and do interesting uh discoveries he used the Bigfoot sighting",
    "start": "206340",
    "end": "214140"
  },
  {
    "text": "data and to try and figure out where Bigfoot tends to be found and he did some clustering on it to find",
    "start": "214140",
    "end": "220080"
  },
  {
    "text": "out geographically where it's at and you get these unusual structures these clumps of Bigfoot sightings and then he",
    "start": "220080",
    "end": "226739"
  },
  {
    "text": "realized that you could find Bigfoot in the woods",
    "start": "226739",
    "end": "231560"
  },
  {
    "text": "um because those sites corresponded to densely pot densely forested areas he",
    "start": "232080",
    "end": "237840"
  },
  {
    "text": "did a bunch of things to figure out where the UFO sightings tended to happen any guess where UFO sightings tended to",
    "start": "237840",
    "end": "244500"
  },
  {
    "text": "happen the most often within 50 miles of U.S Air Force bases",
    "start": "244500",
    "end": "251159"
  },
  {
    "text": "shocking right the number one day for UFO sightings in",
    "start": "251159",
    "end": "256199"
  },
  {
    "text": "this data set it's a North America mind you July 4th",
    "start": "256199",
    "end": "261419"
  },
  {
    "text": "Independence Day you know with all the fireworks dad is that a firework uh no son that's",
    "start": "261419",
    "end": "268380"
  },
  {
    "text": "a UFO the second place by the way was New Year's Eve so",
    "start": "268380",
    "end": "274740"
  },
  {
    "text": "yeah he does important important work and so he has made all these ridiculous talks that I do possible because he",
    "start": "274740",
    "end": "280440"
  },
  {
    "text": "screen scraped some silly sites to do some silly data science and so now I'm going to use this data to show teach you",
    "start": "280440",
    "end": "286080"
  },
  {
    "text": "about probabilistic data structures the data's got it's not particularly",
    "start": "286080",
    "end": "291720"
  },
  {
    "text": "brilliant you've got a summary it's just text describing the UFO side citing briefly three saucer shaped ships",
    "start": "291720",
    "end": "300540"
  },
  {
    "text": "easy for me to say a high in the sky metallic but no shine rather dull gray they hovered overhead",
    "start": "300540",
    "end": "307680"
  },
  {
    "text": "in a V formation yep sounds like a UFO sighting we've got the city and state that happened in the",
    "start": "307680",
    "end": "314220"
  },
  {
    "text": "U.S so this one happened in Salem Oregon the date and time in ISO 8601 format so",
    "start": "314220",
    "end": "320100"
  },
  {
    "text": "this happened in September the 15th of 1950.",
    "start": "320100",
    "end": "326160"
  },
  {
    "text": "uh the shape of the UFO sighting uh some there's a whole bunch of shapes that",
    "start": "326160",
    "end": "332039"
  },
  {
    "text": "they can be in and disk is one of them and triangle is another and and light apparently is a shape that",
    "start": "332039",
    "end": "338639"
  },
  {
    "text": "they use to classify UFO sightings get your duration which is just this little thing expressed for humans it's not a",
    "start": "338639",
    "end": "345840"
  },
  {
    "text": "precise minute seconds it's just 15 minutes or about 20 minutes that sort of thing the link to the site at",
    "start": "345840",
    "end": "352740"
  },
  {
    "text": "thenewfork.org where you can read the reports the full text of the sighting",
    "start": "352740",
    "end": "359060"
  },
  {
    "text": "by the the eyewitness account and a latitude and longitude of the city where it happened",
    "start": "359060",
    "end": "364560"
  },
  {
    "text": "so this is fun data you can do all kinds of fun stuff like with this",
    "start": "364560",
    "end": "369900"
  },
  {
    "text": "so this is the data we're going to use to explore probabilistic data structures um",
    "start": "369900",
    "end": "376259"
  },
  {
    "text": "but what the hex probabilistic data structure has anyone here ever used or heard of a probabilistic data structure",
    "start": "376259",
    "end": "381840"
  },
  {
    "text": "before show hands exactly right I did a survey to find out",
    "start": "381840",
    "end": "387660"
  },
  {
    "text": "on Twitter this is very scientific 119 people voted",
    "start": "387660",
    "end": "393240"
  },
  {
    "text": "and I asked uh who all have you heard of probabilistic data structures",
    "start": "393240",
    "end": "398460"
  },
  {
    "text": "and he's doing this when I was putting together this talk because I wanted to get a feel for just how well known they were about 60 percent three out of five had",
    "start": "398460",
    "end": "405780"
  },
  {
    "text": "never heard of them at all so you're in good company about a fifth of them had heard the term",
    "start": "405780",
    "end": "413280"
  },
  {
    "text": "I suspect most of them had heard that term in the question we're sometimes literally minded aren't",
    "start": "413280",
    "end": "419819"
  },
  {
    "text": "we uh 10 roughly knew what they were and ten percent had used them so we're",
    "start": "419819",
    "end": "425520"
  },
  {
    "text": "looking at like one out of five people had any idea what a probabilistic data structure was and only half of them had used it",
    "start": "425520",
    "end": "431460"
  },
  {
    "text": "so if you don't know what one is you're in the right place you're in the right company this is pretty normal",
    "start": "431460",
    "end": "437819"
  },
  {
    "text": "so you're ignorant that's great that's why you're here um",
    "start": "437819",
    "end": "443160"
  },
  {
    "text": "and so did this Define what a probabilistic data structure is I'm going to go to their evil opposite their",
    "start": "443160",
    "end": "448500"
  },
  {
    "text": "the evil twin deterministic data structures now you all know what deterministic data",
    "start": "448500",
    "end": "454199"
  },
  {
    "text": "structures are may not have called them this but you've used these before these are the linked lists and the sets and",
    "start": "454199",
    "end": "459780"
  },
  {
    "text": "the arrays and the hash tables and the graphs and the trees and the cues and and all those structures that we use all",
    "start": "459780",
    "end": "465300"
  },
  {
    "text": "the time probably the one you've used the most is Hash table and list because almost every language has some variation",
    "start": "465300",
    "end": "472080"
  },
  {
    "text": "of of that um and they're called deterministic data structures because",
    "start": "472080",
    "end": "478259"
  },
  {
    "text": "they do what you tell them to if I put something into a list I know that when I ask for it it will be",
    "start": "478259",
    "end": "484620"
  },
  {
    "text": "there I think I can get it back out if I put something in a hash table I know that it will be there if I delete it it",
    "start": "484620",
    "end": "489780"
  },
  {
    "text": "will be gone that's what it makes it deterministic",
    "start": "489780",
    "end": "495240"
  },
  {
    "text": "does what you would expect I'm going to look at",
    "start": "495240",
    "end": "500520"
  },
  {
    "text": "hash tables in particular and the reason I'm going to do that is because a not",
    "start": "500520",
    "end": "505560"
  },
  {
    "text": "all of you have taken computer science courses I I hadn't B the ideas behind a hash",
    "start": "505560",
    "end": "511139"
  },
  {
    "text": "table are actually uh very useful for understanding probabilistic data",
    "start": "511139",
    "end": "516180"
  },
  {
    "text": "structures because they take advantage of hashing algorithms quite a bit as well and so we've all used a hash table right",
    "start": "516180",
    "end": "522899"
  },
  {
    "text": "we might not know that we've used a hash table if we took computer science and data structures class we wrote a hash",
    "start": "522899",
    "end": "528660"
  },
  {
    "text": "table but it's our basic key value pair if you're say a.net developer which I",
    "start": "528660",
    "end": "534300"
  },
  {
    "text": "suspect is a good majority of the room we call these dictionaries if you're a python developer it's",
    "start": "534300",
    "end": "540120"
  },
  {
    "text": "dictionaries if you're a Java developer you have my sympathy",
    "start": "540120",
    "end": "545399"
  },
  {
    "text": "and we would call these hash Maps and if you're a JavaScript developer",
    "start": "545399",
    "end": "550680"
  },
  {
    "text": "like me this is pretty much everything everything's just a hash table in",
    "start": "550680",
    "end": "556620"
  },
  {
    "text": "JavaScript and it's just your basic key value pair right you yeah you put a key in and say",
    "start": "556620",
    "end": "561899"
  },
  {
    "text": "I want my city and then it's got a value associated with them this key is associated with another value we've used these",
    "start": "561899",
    "end": "567899"
  },
  {
    "text": "but why are they called hash tables well because they use a hashing function",
    "start": "567899",
    "end": "574440"
  },
  {
    "text": "and we've all heard of hashing functions probably as well but lots of times we're thinking of them in terms of cryptographic hashes so you know I need",
    "start": "574440",
    "end": "582120"
  },
  {
    "text": "to create a hash of my uh my blockchain blah blah blah nfts something something right uh you use a like a Shaw 256 to",
    "start": "582120",
    "end": "591140"
  },
  {
    "text": "encode something and get a cryptographically secure hash but all hashing function does is it",
    "start": "591140",
    "end": "597779"
  },
  {
    "text": "takes data and turns it into a number it can take a little bit of data it can",
    "start": "597779",
    "end": "603420"
  },
  {
    "text": "take a lot of data some hashing functions require some sort of seed or salt",
    "start": "603420",
    "end": "608700"
  },
  {
    "text": "here I'm showing here you've got on the left some data here and a randomly generated",
    "start": "608700",
    "end": "614100"
  },
  {
    "text": "seed and if you put that data with that seed you will always get this number on",
    "start": "614100",
    "end": "619800"
  },
  {
    "text": "the right ouch this data up here is the bytes making up the name Scully in utf-8",
    "start": "619800",
    "end": "626220"
  },
  {
    "text": "and that's sort of hashing function do they they turn a pile of data into a number",
    "start": "626220",
    "end": "631440"
  },
  {
    "text": "of a fixed width and then we can consistently always get that number when we run that data",
    "start": "631440",
    "end": "638220"
  },
  {
    "text": "through there so it's deterministic and this is useful if you want to get a signature without having to store",
    "start": "638220",
    "end": "644820"
  },
  {
    "text": "the entire document you there used to be way back in the day you would store all your passwords this way and like your Etsy password file or",
    "start": "644820",
    "end": "651600"
  },
  {
    "text": "whatever it was and I think it was using md5 at the time but and so hash table then uses these by",
    "start": "651600",
    "end": "659579"
  },
  {
    "text": "creating a an array of linked lists so on on the right here",
    "start": "659579",
    "end": "664680"
  },
  {
    "text": "we've got an array I've got 10 items in that array each of each of those items in the array is a linked list",
    "start": "664680",
    "end": "671820"
  },
  {
    "text": "and when we want to add a value to the hash table we take the key that we want to use the",
    "start": "671820",
    "end": "677399"
  },
  {
    "text": "city we run it through a hashing function get out a number we",
    "start": "677399",
    "end": "683220"
  },
  {
    "text": "get the modulus of that number equal to our index how wide our index is so we've",
    "start": "683220",
    "end": "688620"
  },
  {
    "text": "got 10 items so we have modules at 10 and that gives us an index for us to put that value into",
    "start": "688620",
    "end": "693959"
  },
  {
    "text": "so when we add City we want to add this Salem the value Salem to the city property on a hash table we go through",
    "start": "693959",
    "end": "701880"
  },
  {
    "text": "that process and shove it in there and we add that Salem to that linked list",
    "start": "701880",
    "end": "707339"
  },
  {
    "text": "that's how we add to a hash table we're going to add another thing here we've added to the state of Oregon",
    "start": "707339",
    "end": "713820"
  },
  {
    "text": "and so we hash State we get the number four and set when we hatch City we've got the number one and so we put Oregon",
    "start": "713820",
    "end": "720240"
  },
  {
    "text": "in position four etc etc occasionally",
    "start": "720240",
    "end": "726420"
  },
  {
    "text": "you will get a collision there's only 10 items here we will probably won't put more than 10 things",
    "start": "726420",
    "end": "732060"
  },
  {
    "text": "in our hash table and so this is why these buckets are linked lists this is why this is an array of linked lists so what we do is",
    "start": "732060",
    "end": "739140"
  },
  {
    "text": "we just add it to the next item in the linked list and then we walk that linked list to find it",
    "start": "739140",
    "end": "745740"
  },
  {
    "text": "so if we read from this hash table if we want to read the city we hash the city",
    "start": "745740",
    "end": "750779"
  },
  {
    "text": "get the index go to the linked list walk that linked list until we find the city",
    "start": "750779",
    "end": "756300"
  },
  {
    "text": "and then we return the value make sense for those who I did this really fast and",
    "start": "756300",
    "end": "764220"
  },
  {
    "text": "so those who've taken data structures classes like yeah this is review and then the rest of you are like I kind of",
    "start": "764220",
    "end": "769560"
  },
  {
    "text": "get it don't worry it's fine the key thing is is that we're hashing these key names and we're hashing data",
    "start": "769560",
    "end": "775920"
  },
  {
    "text": "and then we're using that as an index that's a property you'll see over and over in the probabilistic data structures",
    "start": "775920",
    "end": "782639"
  },
  {
    "text": "so when we pick our deterministic data structures we uh we're often making trade-offs",
    "start": "782639",
    "end": "789540"
  },
  {
    "text": "between the time complexity of that data structure and the space complexity of that data structure",
    "start": "789540",
    "end": "796019"
  },
  {
    "text": "so if you uh for example want to use a linked list linked lists are great because they're",
    "start": "796019",
    "end": "801120"
  },
  {
    "text": "very compact they store they use exactly how much memory they need to use no more no less",
    "start": "801120",
    "end": "807000"
  },
  {
    "text": "however if you want to find something in a linked list you have to walk that linked list to find it and so they have",
    "start": "807000",
    "end": "813660"
  },
  {
    "text": "good space complexity but they have bad time complexity their time complexity is O of n for reads and is O of one to",
    "start": "813660",
    "end": "822899"
  },
  {
    "text": "update whereas something like a hash table tends to have you've got this array and",
    "start": "822899",
    "end": "829200"
  },
  {
    "text": "it's got empty pointers that aren't pointing to anything and so it's got a little bit of wasted",
    "start": "829200",
    "end": "834300"
  },
  {
    "text": "space but finding things in a hash table is an O of one operation and so the lookups are fast uh but it's wastes a",
    "start": "834300",
    "end": "842100"
  },
  {
    "text": "little bit of space whereas an array or a linked list the lookups are slow but it's very Compact and so we make these",
    "start": "842100",
    "end": "849420"
  },
  {
    "text": "sorts of trade-offs when we pick our data structures all the time um",
    "start": "849420",
    "end": "854459"
  },
  {
    "text": "but it's not the only trade-off we're making because there's capabilities in these data structures as well so like",
    "start": "854459",
    "end": "860639"
  },
  {
    "text": "the arraylist is actually really quick to add things to so if I want to add something to the tail of a linked list",
    "start": "860639",
    "end": "867060"
  },
  {
    "text": "it's very fast it's very easy if I use an array arrays have o of one for",
    "start": "867060",
    "end": "873360"
  },
  {
    "text": "modifying values they're fixed size so they just take up what they take but if you need to resize them that's difficult",
    "start": "873360",
    "end": "879540"
  },
  {
    "text": "and so we don't just choose time and space we also are choosing the capabilities of these data structures like some data structures work well",
    "start": "879540",
    "end": "887639"
  },
  {
    "text": "for certain scenarios and others work well for other things that I want to do",
    "start": "887639",
    "end": "892940"
  },
  {
    "text": "and it's but it's not just time and space there's another option we can have when we're looking at our data",
    "start": "893160",
    "end": "898440"
  },
  {
    "text": "structures of ways that we can uh another trade-off we can make other than just size and speed",
    "start": "898440",
    "end": "904860"
  },
  {
    "text": "and that's accuracy so a probabilistic data structure is a data structure that's making a",
    "start": "904860",
    "end": "910800"
  },
  {
    "text": "compromise against accuracy we are saying I want something that's really small and really fast",
    "start": "910800",
    "end": "917639"
  },
  {
    "text": "but that lies to me sometimes that sounds crazy right why would I want",
    "start": "917639",
    "end": "924180"
  },
  {
    "text": "my data structures to lie to me well because I need to count really big numbers maybe or um",
    "start": "924180",
    "end": "931680"
  },
  {
    "text": "well basically because you you need a scale and the accuracy just doesn't matter",
    "start": "931680",
    "end": "938220"
  },
  {
    "text": "let's say uh you're a video streaming service or video hosting",
    "start": "938220",
    "end": "943500"
  },
  {
    "text": "service whose name ends in tube and you uh",
    "start": "943500",
    "end": "949800"
  },
  {
    "text": "you want to count how many unique visitors unique users have watched a video",
    "start": "949800",
    "end": "954839"
  },
  {
    "text": "how would you solve that with a deterministic data structure you would have to put all the usernames",
    "start": "954839",
    "end": "961019"
  },
  {
    "text": "in a set oh what if it has a million views a million unique users viewing it or 10",
    "start": "961019",
    "end": "967620"
  },
  {
    "text": "million or 100 million what if it's Gangnam Style it's got like how many it had like a",
    "start": "967620",
    "end": "973320"
  },
  {
    "text": "billion views or something like that they weren't all unique but I know I at least watched it four times",
    "start": "973320",
    "end": "979519"
  },
  {
    "text": "well that structure is not going to work but you don't need to know that you had exactly 10 million 917 305 views you",
    "start": "980820",
    "end": "991560"
  },
  {
    "text": "could be off by a couple percentage points and it's still going to be perfectly usable because that exact count isn't",
    "start": "991560",
    "end": "997380"
  },
  {
    "text": "really the important part this is the kind of trade-off you're making when you're making an accuracy trade-off and",
    "start": "997380",
    "end": "1002779"
  },
  {
    "text": "so that's the idea behind a probabilistic data structure I'll get something that's less accurate but I can",
    "start": "1002779",
    "end": "1008420"
  },
  {
    "text": "get a couple of order of magnitudes in time and space savings it's a good trade-off",
    "start": "1008420",
    "end": "1014000"
  },
  {
    "text": "and this is a trade-off that you've made before even if you haven't used probabilistic data structures this is a jpeg",
    "start": "1014000",
    "end": "1021380"
  },
  {
    "text": "of of the Devil's Tower in Wyoming in the Badlands in the U.S",
    "start": "1021380",
    "end": "1026678"
  },
  {
    "text": "those of you who are old enough to uh remember this scene from uh with Richard",
    "start": "1026679",
    "end": "1032178"
  },
  {
    "text": "Dreyfuss and mashed potatoes may remember why I picked known why I picked this image",
    "start": "1032179",
    "end": "1037660"
  },
  {
    "text": "it's a really cool place and it was very prominent in Close Encounters of the Third Kind",
    "start": "1037660",
    "end": "1044178"
  },
  {
    "text": "and this pixel right up here that one right there the blue one",
    "start": "1044179",
    "end": "1049700"
  },
  {
    "text": "you see it yeah it's actually the wrong color",
    "start": "1049700",
    "end": "1054760"
  },
  {
    "text": "why well because jpegs are lossy that's that's something compressible and they make them smaller",
    "start": "1055160",
    "end": "1060200"
  },
  {
    "text": "and then in the process of making them smaller we lose a little bit of the data we lose a little bit of fidelity a",
    "start": "1060200",
    "end": "1065240"
  },
  {
    "text": "little bit of accuracy in the original image but it still just looks like a blue sky",
    "start": "1065240",
    "end": "1070760"
  },
  {
    "text": "and so probability probabilistic data structures are a little bit lossy but good enough that's that's when you use",
    "start": "1070760",
    "end": "1076880"
  },
  {
    "text": "them that's when they make sense a lot of probabilistic data structures",
    "start": "1076880",
    "end": "1082220"
  },
  {
    "text": "can be thought of as unusual sets with limited capabilities",
    "start": "1082220",
    "end": "1087580"
  },
  {
    "text": "and when I say sets I mean the Venn diagram things right you can get the union and the intersection and the",
    "start": "1089600",
    "end": "1095419"
  },
  {
    "text": "difference and test for membership and cardinality and all that kind of stuff uh and the ones I'm going to talk to",
    "start": "1095419",
    "end": "1101600"
  },
  {
    "text": "today are all about all can be thought of as sets with limited capabilities",
    "start": "1101600",
    "end": "1107720"
  },
  {
    "text": "you can test a set for membership so here we have a set of star square",
    "start": "1107720",
    "end": "1113900"
  },
  {
    "text": "circle and triangle these are totally not all the shapes in the redis logo",
    "start": "1113900",
    "end": "1119179"
  },
  {
    "text": "foreign and the question is is the square in the set well yes yes it is",
    "start": "1119179",
    "end": "1124940"
  },
  {
    "text": "is the Pentagon in the set no it's in Washington DC",
    "start": "1124940",
    "end": "1131299"
  },
  {
    "text": "and so that's a question of membership is this thing in the cider knot",
    "start": "1131299",
    "end": "1138520"
  },
  {
    "text": "you can have a probabilistic data structure that's optimized for cardinality for counting how many unique things are in a set this",
    "start": "1139340",
    "end": "1145940"
  },
  {
    "text": "would be the fill in the blank tube example I gave earlier I've added a bunch of things to the set",
    "start": "1145940",
    "end": "1151520"
  },
  {
    "text": "there are only unique items in the set how many unique items are there in the set so we've got a star Square Circle a",
    "start": "1151520",
    "end": "1157700"
  },
  {
    "text": "triangle there are four items in the set so it's cardinality of four",
    "start": "1157700",
    "end": "1163299"
  },
  {
    "text": "I could have a probability data probabilistic data structure that is good at telling me the frequency of",
    "start": "1165500",
    "end": "1171080"
  },
  {
    "text": "items in a set within a certain degree of accuracy and this is where the set analogy breaks in",
    "start": "1171080",
    "end": "1176360"
  },
  {
    "text": "ever so slightly because I know that sets technically only have unique members and I'm saying here that it has",
    "start": "1176360",
    "end": "1182240"
  },
  {
    "text": "five stars four squares six circles and three triangles but the idea is there's a numeric value associated with each",
    "start": "1182240",
    "end": "1188960"
  },
  {
    "text": "entry in the set and increments as you add items add duplicated items to it and",
    "start": "1188960",
    "end": "1194539"
  },
  {
    "text": "this can count at the frequency and so you can get an idea of well how many squares are there in this set or how many how many circles are there in the",
    "start": "1194539",
    "end": "1201860"
  },
  {
    "text": "set and if you can do frequency you can also do uh ranking and this is similar in the",
    "start": "1201860",
    "end": "1209360"
  },
  {
    "text": "idea that you can say well give me the top so many things in the set or this item what's its position in the set and",
    "start": "1209360",
    "end": "1216440"
  },
  {
    "text": "you can do that probabilistically without necessarily knowing the count so frequency is about knowing the counts of things",
    "start": "1216440",
    "end": "1222440"
  },
  {
    "text": "probabilistically ranking is about knowing the Order of Things",
    "start": "1222440",
    "end": "1227900"
  },
  {
    "text": "and the accounting we don't have accurate counts but we know the order so these are things you can do with",
    "start": "1227900",
    "end": "1234080"
  },
  {
    "text": "these sets you can also compare sets of data",
    "start": "1234080",
    "end": "1240440"
  },
  {
    "text": "we're going to look at similarity later on when we look at minhash and we can say how much a set is like another set",
    "start": "1240440",
    "end": "1248780"
  },
  {
    "text": "and can I just say I absolutely love this photo it's probably my favorite photo in the entire set of random photos here",
    "start": "1248780",
    "end": "1256000"
  },
  {
    "text": "so uh there are a lot of choices of probabilistic data structures I just kind of went out to Google and found a",
    "start": "1257120",
    "end": "1262460"
  },
  {
    "text": "collection of them out there and and to populate a list here and looked into",
    "start": "1262460",
    "end": "1267500"
  },
  {
    "text": "what the basic ones are but there's a lot of options out there we've got this little list here the ones that are",
    "start": "1267500",
    "end": "1274220"
  },
  {
    "text": "highlighted in blue are the ones we're going to be talking about today so we're going to talk about Bloom filters heavy Keepers and Min hash",
    "start": "1274220",
    "end": "1282160"
  },
  {
    "text": "uh the ones in Gray we won't be talking about the ones with the little um",
    "start": "1282620",
    "end": "1288860"
  },
  {
    "text": "Red Cross dagger thing right up here like that thing right there those are",
    "start": "1288860",
    "end": "1295640"
  },
  {
    "text": "part of retta's Stack which is redis with a bunch of extra data structures and I'll mention that in",
    "start": "1295640",
    "end": "1302659"
  },
  {
    "text": "the next slide and then the one with the little double dagger here a hyper log log is part of vanilla redis",
    "start": "1302659",
    "end": "1311779"
  },
  {
    "text": "so balloon filters and cuckoo filters I'll let you check for membership a hyper log log counts things it does",
    "start": "1312380",
    "end": "1319280"
  },
  {
    "text": "cardinality hyper log logs actually particularly cool because it's 12 kilobytes and you can count the number",
    "start": "1319280",
    "end": "1324980"
  },
  {
    "text": "of unique atoms in the universe with it which is kind of neat and uh within like a I think a 97 point",
    "start": "1324980",
    "end": "1332000"
  },
  {
    "text": "there's like a fixed accuracy for it count sketch and count Min sketch are",
    "start": "1332000",
    "end": "1337880"
  },
  {
    "text": "about getting the frequency things Q digest and T digest I haven't looked at Qi digest that closely T digest is",
    "start": "1337880",
    "end": "1344900"
  },
  {
    "text": "like a probabilistic Time series and so it can fill in it can interpolate",
    "start": "1344900",
    "end": "1350000"
  },
  {
    "text": "values that might be missing uh heavy keeper is uh part of top K",
    "start": "1350000",
    "end": "1355159"
  },
  {
    "text": "which we'll look at later it's all about tracking uh how big a data coming in and how it",
    "start": "1355159",
    "end": "1362960"
  },
  {
    "text": "flows over time so you can use it to find things like uh trending topics or like which IP addresses are engaged in a",
    "start": "1362960",
    "end": "1370520"
  },
  {
    "text": "dial service attack against my uh my server that sort of thing and the Min hash and Sim hash will do similarity",
    "start": "1370520",
    "end": "1377900"
  },
  {
    "text": "where you can do uh you can do like a document similarity comparison and I'm I think minhash was",
    "start": "1377900",
    "end": "1383840"
  },
  {
    "text": "created by Google back in the 90s maybe early 2000s I can't remember they were using it to determine whether they",
    "start": "1383840",
    "end": "1388880"
  },
  {
    "text": "should crawl a page again or not if it changed enough so we're gonna look at three of these the two that have redis capability I'll",
    "start": "1388880",
    "end": "1396020"
  },
  {
    "text": "go ahead and demo some Reddit stuff with them for minhash it's not part of redis it's just kind of cool so I won't demo",
    "start": "1396020",
    "end": "1401720"
  },
  {
    "text": "that but these probabilistic data structures are available as part of redis Stack",
    "start": "1401720",
    "end": "1408440"
  },
  {
    "text": "right a stack is the redis that you know and love with extra capabilities modules that are",
    "start": "1408440",
    "end": "1414860"
  },
  {
    "text": "plugged into extend it and so they add new data types and new commands there's a Json one to do Json data types search",
    "start": "1414860",
    "end": "1423620"
  },
  {
    "text": "lets you search those Json redisgraph which is a graph database in a key",
    "start": "1423620",
    "end": "1428960"
  },
  {
    "text": "redis time series which stores time series database in a redis key and the one we're going to talk about today a",
    "start": "1428960",
    "end": "1434900"
  },
  {
    "text": "bit is redisbloom which adds probabilistic data structures to redis you can get to redis.i read a stack at",
    "start": "1434900",
    "end": "1441860"
  },
  {
    "text": "redisley it's honestly easier to Google write a stack than it is to type that in that's what I always do",
    "start": "1441860",
    "end": "1448840"
  },
  {
    "text": "so advertisement done Let's uh let's take a look at Bloom",
    "start": "1449120",
    "end": "1454340"
  },
  {
    "text": "filter and hopefully I have enough time to get through all these so a bloom filter tests for membership",
    "start": "1454340",
    "end": "1463039"
  },
  {
    "text": "it can say no and probably so I can add all kinds of things to a",
    "start": "1463039",
    "end": "1469700"
  },
  {
    "text": "bloom filter and then I can say is this thing in the bloom filter and it will say no it is",
    "start": "1469700",
    "end": "1475580"
  },
  {
    "text": "not or yeah it probably is Bloom filters are fast they're really",
    "start": "1475580",
    "end": "1482360"
  },
  {
    "text": "fast everything's over one and they are of a fixed size when you create them so they don't grow at all so",
    "start": "1482360",
    "end": "1489679"
  },
  {
    "text": "I guess they have a size complexity equal to O of one as well and you would use a bloom filter to um",
    "start": "1489679",
    "end": "1497059"
  },
  {
    "text": "it's two big use cases for Bloom filters that I can think of that I thought of when I was rehearsing this an hour ago",
    "start": "1497059",
    "end": "1503600"
  },
  {
    "text": "um one is if you wanted to get unique usernames for a website let's say you've got a website with a lot of users",
    "start": "1503600",
    "end": "1510799"
  },
  {
    "text": "I mean maybe something like Twitter or something I don't know and you want to see if that username is taken",
    "start": "1510799",
    "end": "1516620"
  },
  {
    "text": "well you can't exactly do select star from users where username equals username I'd like to use that's not",
    "start": "1516620",
    "end": "1522620"
  },
  {
    "text": "going to work with you know tens or hundreds of millions of users but you could shove all the usernames",
    "start": "1522620",
    "end": "1528020"
  },
  {
    "text": "into a bloom filter and then ask the bloom filter is this username used yet or not",
    "start": "1528020",
    "end": "1533419"
  },
  {
    "text": "and if it says no then you're good to go you use it if it says maybe",
    "start": "1533419",
    "end": "1538700"
  },
  {
    "text": "then you just don't let anyone have that username and now you've got a nice fast way to determine whether",
    "start": "1538700",
    "end": "1546020"
  },
  {
    "text": "username can be used or not you can also use this for data deduplication if you've got say uh imagine a file full of",
    "start": "1546020",
    "end": "1552919"
  },
  {
    "text": "you know thousands of documents you could run them all into a boom filter and if it says I haven't seen this",
    "start": "1552919",
    "end": "1558679"
  },
  {
    "text": "before then if it says no when you add it I have not",
    "start": "1558679",
    "end": "1565520"
  },
  {
    "text": "seen this before then you can say this one's good if I have seen this before then I should look at it and see if it's",
    "start": "1565520",
    "end": "1572900"
  },
  {
    "text": "a duplicate or not so you can use it to dedupe data as well",
    "start": "1572900",
    "end": "1578200"
  },
  {
    "text": "a bloom filter's got two main parts it's got some hash functions with their corresponding seeds again these are not",
    "start": "1579799",
    "end": "1586340"
  },
  {
    "text": "cryptographic hashes these are probably murmur filters or something like that and it's got",
    "start": "1586340",
    "end": "1592880"
  },
  {
    "text": "a bit array of a fixed width when I add something to a bloom filter",
    "start": "1592880",
    "end": "1600860"
  },
  {
    "text": "for example I want to see whether I've heard this UFO sighting before or not Megatron in the bushes this is great",
    "start": "1600860",
    "end": "1608120"
  },
  {
    "text": "story about these uh I'm going to say kids but they were probably in their 20s",
    "start": "1608120",
    "end": "1613720"
  },
  {
    "text": "who were driving along the highway I think in New Mexico and it's it's in the data set I actually",
    "start": "1613720",
    "end": "1619220"
  },
  {
    "text": "pulled these out of the data set and they just pulled off to the side of the road",
    "start": "1619220",
    "end": "1624679"
  },
  {
    "text": "because they needed to take care of an important and necessary bodily function probably because they had too much beer",
    "start": "1624679",
    "end": "1631340"
  },
  {
    "text": "to drink and they're going back behind one of the the sagebrush there and they hear a",
    "start": "1631340",
    "end": "1637880"
  },
  {
    "text": "weird sound they hear like the a Transformer transforming they hear Megatron in the bushes and he goes like",
    "start": "1637880",
    "end": "1645580"
  },
  {
    "text": "and they freak out and they hop in their car and they take off and then lights chase them from behind the mountains for",
    "start": "1645919",
    "end": "1651440"
  },
  {
    "text": "60 miles and I'm sure they totally weren't High",
    "start": "1651440",
    "end": "1657580"
  },
  {
    "text": "these sightings are so much fun to go looking through I can't recommend it enough anyhow so we want to see if we've",
    "start": "1658120",
    "end": "1663620"
  },
  {
    "text": "seen this one before so we're going to add it to the bloom filter because we've just received it and we can check later to see if we've seen it so we add it",
    "start": "1663620",
    "end": "1669980"
  },
  {
    "text": "there we take the data and we run it through our hashing functions and we get a number because that's what",
    "start": "1669980",
    "end": "1676520"
  },
  {
    "text": "hashing functions do we modulus that number with the width of our Bloom filter which in this case is",
    "start": "1676520",
    "end": "1682340"
  },
  {
    "text": "10 because it fits on the screen and then everywhere we have we now have",
    "start": "1682340",
    "end": "1687980"
  },
  {
    "text": "indexes into that array and we set them to one so we set it zero five and six are now",
    "start": "1687980",
    "end": "1693380"
  },
  {
    "text": "set to one we've added something to the bloom filter the data is gone it's all hashed",
    "start": "1693380",
    "end": "1699620"
  },
  {
    "text": "away but we we have like the Fingerprints of the data in the bloom filter now if we want to say have we",
    "start": "1699620",
    "end": "1705500"
  },
  {
    "text": "seen Megatron in the bushes before we go through that same process we get the same indices and then we look and say",
    "start": "1705500",
    "end": "1711559"
  },
  {
    "text": "are these all ones if they're all ones then probably",
    "start": "1711559",
    "end": "1716960"
  },
  {
    "text": "if there's a zero in there we've definitely not seen it because otherwise",
    "start": "1716960",
    "end": "1722059"
  },
  {
    "text": "that would have been set I'm going to add another one I seen a",
    "start": "1722059",
    "end": "1728120"
  },
  {
    "text": "UFO when I was about 13 years old the yelly case was in the original data",
    "start": "1728120",
    "end": "1734480"
  },
  {
    "text": "file so this actually happened in my hometown of Columbus Ohio",
    "start": "1734480",
    "end": "1739700"
  },
  {
    "text": "which is was totally random I just saw honestly I was just scrolling through the list of UFO sightings and I saw the",
    "start": "1739700",
    "end": "1745100"
  },
  {
    "text": "one in all uppercase and then it got my attention and so I put it in the slide but then I found out they were in Columbus and that was extra funny so in",
    "start": "1745100",
    "end": "1752240"
  },
  {
    "text": "this case we run this through the same process we get different indices but one of them is the same",
    "start": "1752240",
    "end": "1757640"
  },
  {
    "text": "I've circled it up there in in green right there and so we set positions one and two to",
    "start": "1757640",
    "end": "1763520"
  },
  {
    "text": "one where they were zero before and six sweet don't do anything to because it's already set to one",
    "start": "1763520",
    "end": "1768559"
  },
  {
    "text": "so we've added another item now if we go and read this we get all ones back if we",
    "start": "1768559",
    "end": "1774140"
  },
  {
    "text": "go and read Megatron in the bushes we get all ones back and so the balloon filter is still",
    "start": "1774140",
    "end": "1780440"
  },
  {
    "text": "telling us correct things we've got a set in 10 bits",
    "start": "1780440",
    "end": "1785600"
  },
  {
    "text": "that's telling us this I've seen this before I've seen this before",
    "start": "1785600",
    "end": "1791380"
  },
  {
    "text": "now where it starts to break down is when you get Collision this is where it gets probabilistic so we've added",
    "start": "1791600",
    "end": "1798679"
  },
  {
    "text": "another sighting here investigators for the Bigfoot field researchers organization I just happen to know",
    "start": "1798679",
    "end": "1804260"
  },
  {
    "text": "that's what that stands for observe a glowing green blue sphere",
    "start": "1804260",
    "end": "1809539"
  },
  {
    "text": "and this one completely intersects with where there are ones already some of those ones are from Megatron in the",
    "start": "1809539",
    "end": "1816620"
  },
  {
    "text": "bushes some of those ones are from icina UFO but this doesn't change the state of",
    "start": "1816620",
    "end": "1822980"
  },
  {
    "text": "the bloom filter so if we add it and then query it and say have you seen",
    "start": "1822980",
    "end": "1829100"
  },
  {
    "text": "this one before the Bloomfield is going to say probably if we don't add it",
    "start": "1829100",
    "end": "1834679"
  },
  {
    "text": "and ask the bloom filter have you seen this one before it's going to say probably and so whether we've seen this",
    "start": "1834679",
    "end": "1840380"
  },
  {
    "text": "or not is kind of well it's probabilistic if we had done this in other orders",
    "start": "1840380",
    "end": "1845960"
  },
  {
    "text": "it would change the nature of this because it's probabilistic and so um",
    "start": "1845960",
    "end": "1852140"
  },
  {
    "text": "this is pretty much how a bloom Filter Works is that is that resonating with everyone any questions so far yeah",
    "start": "1852140",
    "end": "1860000"
  },
  {
    "text": "that's a phantom way yeah that's actually a fantastic",
    "start": "1863840",
    "end": "1869840"
  },
  {
    "text": "question it was a point I meant to make and forgot so thank you he's a plant [Laughter]",
    "start": "1869840",
    "end": "1875480"
  },
  {
    "text": "now um yeah that's actually the trade-off so um the more hashing functions you have the less impactful",
    "start": "1875480",
    "end": "1882260"
  },
  {
    "text": "occlusion will be because you're not going to get 100 overall you're less likely to get 100 overlap on that Collision",
    "start": "1882260",
    "end": "1888440"
  },
  {
    "text": "um but then the wider you need to make your bid array so the more hashing functions you have",
    "start": "1888440",
    "end": "1894919"
  },
  {
    "text": "the wider you want your bit array the smaller your bid array the fewer hashing functions you need but then the impact",
    "start": "1894919",
    "end": "1900140"
  },
  {
    "text": "of that Collision is more significant there's actually a formula for figuring out the optimal thing for this just use",
    "start": "1900140",
    "end": "1906679"
  },
  {
    "text": "this easy math I didn't take a lot of math in school so",
    "start": "1906679",
    "end": "1911779"
  },
  {
    "text": "I actually wouldn't know how to do this but it's not as awful as it looks what you can do if you want to do this manually is you can just uh pick you",
    "start": "1911779",
    "end": "1920539"
  },
  {
    "text": "know how many items you want to store in your Bloom filter by the way it's worth mentioning here if you look here",
    "start": "1920539",
    "end": "1925580"
  },
  {
    "text": "if you keep adding things to this eventually this will fill up and it will be all ones",
    "start": "1925580",
    "end": "1931820"
  },
  {
    "text": "and then it will be full of lies it will always just tell you",
    "start": "1931820",
    "end": "1938539"
  },
  {
    "text": "it's like yeah that's probably in there yeah it's probably in there it's it's like an American it's just",
    "start": "1938539",
    "end": "1943580"
  },
  {
    "text": "always says yeah sure",
    "start": "1943580",
    "end": "1946480"
  },
  {
    "text": "right yeah so if you have more hash functions you've got to have more bits to compensate for it or there's capacity",
    "start": "1950299",
    "end": "1956120"
  },
  {
    "text": "for total number of items you want to store is greatly diminished",
    "start": "1956120",
    "end": "1960398"
  },
  {
    "text": "um well that's what this calculation is for actually um in redis we actually will keep track",
    "start": "1963860",
    "end": "1968899"
  },
  {
    "text": "of it see if it gets too full and then we'll create another one and another one and another one and then it impacts the",
    "start": "1968899",
    "end": "1974000"
  },
  {
    "text": "performance because then you have a second Bloom filter check uh but but you know but it keeps it from",
    "start": "1974000",
    "end": "1979760"
  },
  {
    "text": "it being a problem if you're coding one of these up yourself you just need to well you just use this math here so what",
    "start": "1979760",
    "end": "1986000"
  },
  {
    "text": "you do is you pick like a number of items like I think I need to store a billion things in my Bloomfield or 100 things whatever",
    "start": "1986000",
    "end": "1991340"
  },
  {
    "text": "and uh and then you guess at a number of bits and then you compute the number of",
    "start": "1991340",
    "end": "1997220"
  },
  {
    "text": "hashes for K down here using the bottom formula and that will give you a and then you",
    "start": "1997220",
    "end": "2003700"
  },
  {
    "text": "use that to solve for p to give you a false positivity rate and then you say is that good enough or",
    "start": "2003700",
    "end": "2008740"
  },
  {
    "text": "not and then you adjust so that's how you can do it if you just want to use pen and paper and do the",
    "start": "2008740",
    "end": "2014620"
  },
  {
    "text": "hard way there's websites that will calculate this for you which is the better way um",
    "start": "2014620",
    "end": "2020320"
  },
  {
    "text": "and um if we use redis it will just like I said take care of it I'm going to do a quick",
    "start": "2020320",
    "end": "2025480"
  },
  {
    "text": "demo here with redis just to show that this stuff is real",
    "start": "2025480",
    "end": "2032140"
  },
  {
    "text": "okay here's redis I'm gonna go here I'm using a tool called redis Insight so",
    "start": "2032140",
    "end": "2037919"
  },
  {
    "text": "I'm going to say BF that's for bloomfilter DOT add or no I'm going to",
    "start": "2037919",
    "end": "2043840"
  },
  {
    "text": "set one up Reserve and then I want to give it a key we'll call it bloom because I have imagination",
    "start": "2043840",
    "end": "2051898"
  },
  {
    "text": "then we'll set an acceptable error rate so I'm going to go with 0.001 so I want one in a thousand so",
    "start": "2052240",
    "end": "2060040"
  },
  {
    "text": "99.9 accuracy and then I need to say how many items let's add let's say this is going to be for a thousand items",
    "start": "2060040",
    "end": "2066820"
  },
  {
    "text": "I now have a bloom filter Retta said okay",
    "start": "2066820",
    "end": "2072878"
  },
  {
    "text": "and so I can do bf.add bloom",
    "start": "2072879",
    "end": "2077919"
  },
  {
    "text": "and then I can add what should let's just do food bar Bass now we'll do alpha bravo charlie that",
    "start": "2077919",
    "end": "2083618"
  },
  {
    "text": "feels more ufoe so do Bravo",
    "start": "2083619",
    "end": "2089220"
  },
  {
    "text": "and then let's let's let's do a a check then so once we've added things we can say bf.exists",
    "start": "2093760",
    "end": "2100660"
  },
  {
    "text": "Bloom and if we put in Alpha we get back a one down here saying that",
    "start": "2100660",
    "end": "2107680"
  },
  {
    "text": "hey that does exist if we do something that doesn't exist",
    "start": "2107680",
    "end": "2112859"
  },
  {
    "text": "we get back it should be a zero this thing renders zeros as nil so if we go",
    "start": "2113140",
    "end": "2118480"
  },
  {
    "text": "down to here we can see the same thing",
    "start": "2118480",
    "end": "2121920"
  },
  {
    "text": "exists Bloom Charlie here integer zero",
    "start": "2125339",
    "end": "2131920"
  },
  {
    "text": "so that's a super quick Reddit demo of using a Bloomfield and redis I have a",
    "start": "2131920",
    "end": "2137200"
  },
  {
    "text": "sample code for Bloom filter out in the GitHub repo for this this talk uh there's not a lot they're actually",
    "start": "2137200",
    "end": "2142960"
  },
  {
    "text": "really easy to code up I mean you literally have I did it in JavaScript so it's inefficient and I actually",
    "start": "2142960",
    "end": "2148060"
  },
  {
    "text": "literally use an array of booleans which is like the worst way you could possibly do this but but it was just to show how",
    "start": "2148060",
    "end": "2155079"
  },
  {
    "text": "it worked so let's get this back up",
    "start": "2155079",
    "end": "2162299"
  },
  {
    "text": "okay and this is just showing you the syntax I just showed you it's not complicated",
    "start": "2165040",
    "end": "2170578"
  },
  {
    "text": "sure absolutely",
    "start": "2172420",
    "end": "2175200"
  },
  {
    "text": "so all that was doing was using that calculation that was here",
    "start": "2190240",
    "end": "2195838"
  },
  {
    "text": "but yeah it will over time and and so it's at a particular capacity or below",
    "start": "2201220",
    "end": "2206260"
  },
  {
    "text": "on average it's going to be that accurate but it's not it's not an absolute thing but all redis is doing behind the",
    "start": "2206260",
    "end": "2212859"
  },
  {
    "text": "scenes there is this takes that error rate and then uses and plugs it into here and figure and does the algebra",
    "start": "2212859",
    "end": "2219780"
  },
  {
    "text": "let's see can I",
    "start": "2219820",
    "end": "2225119"
  },
  {
    "text": "so balloon filters are cool uh we're going to talk about Min hash next",
    "start": "2225940",
    "end": "2231720"
  },
  {
    "text": "uh minhash is used to determine how similar documents are",
    "start": "2232359",
    "end": "2237660"
  },
  {
    "text": "using set similarity so set similarity",
    "start": "2237660",
    "end": "2242740"
  },
  {
    "text": "itself is something I want to talk about before I talk about turning documents into sets and before I talk about",
    "start": "2242740",
    "end": "2248079"
  },
  {
    "text": "getting the similarity of documents and so you can get the similarity of any two sets of data using a simple calculation",
    "start": "2248079",
    "end": "2255280"
  },
  {
    "text": "called the jaccard similarity all you're doing here is you're taking the cardinality of the intersection",
    "start": "2255280",
    "end": "2261040"
  },
  {
    "text": "that'd be how many things are in the intersection and dividing it by how many things are in the union or divided by",
    "start": "2261040",
    "end": "2266500"
  },
  {
    "text": "the total number of things so here I've got scalder and Molly face swapped friends from the X-Files",
    "start": "2266500",
    "end": "2273720"
  },
  {
    "text": "and we have states in the United States in which they've seen UFOs skalder has seen them in a California Nevada Oregon",
    "start": "2273720",
    "end": "2280780"
  },
  {
    "text": "Wyoming New Mexico and Ohio Molly has seen them in Florida Kansas",
    "start": "2280780",
    "end": "2286900"
  },
  {
    "text": "South Carolina West by God Virginia New Mexico and Ohio",
    "start": "2286900",
    "end": "2292480"
  },
  {
    "text": "the intersection is New Mexico and Ohio Area 51 Hangar 18 sounds legit",
    "start": "2292480",
    "end": "2299380"
  },
  {
    "text": "and so there's two in the intersection there's ten total these sets are 20",
    "start": "2299380",
    "end": "2304660"
  },
  {
    "text": "similar that's it basic math",
    "start": "2304660",
    "end": "2311220"
  },
  {
    "text": "um but we can't apply this to documents usually like how could we do this with the document can we take all the words",
    "start": "2311680",
    "end": "2317560"
  },
  {
    "text": "of a document and just make a set of all the words in one document and all the a set of all the words in another documents and their",
    "start": "2317560",
    "end": "2324280"
  },
  {
    "text": "similarity is going to be really high because they're both written in English and so that's not going to tell us",
    "start": "2324280",
    "end": "2329680"
  },
  {
    "text": "anything to let us compare documents and so uh to turn documents into sets so that we can see how similar they are and",
    "start": "2329680",
    "end": "2336760"
  },
  {
    "text": "then to do it probabilistically after that um we need to do a process called shingling",
    "start": "2336760",
    "end": "2342640"
  },
  {
    "text": "shingling takes trigrams sets of three words overlapping",
    "start": "2342640",
    "end": "2348579"
  },
  {
    "text": "and makes a set out of those so here we have we notice two notice 2R",
    "start": "2348579",
    "end": "2354760"
  },
  {
    "text": "to our left and so on until we get a set of all the trigrams that overlapping programs in",
    "start": "2354760",
    "end": "2361720"
  },
  {
    "text": "that document so we noticed to our left further off in the mountains a bright glow this is from Megatron in the bushes",
    "start": "2361720",
    "end": "2369480"
  },
  {
    "text": "and so if we do this to documents we can now compare these sets of trigrams and",
    "start": "2371200",
    "end": "2376540"
  },
  {
    "text": "see how similar they are and those will give us an actual meaningful similarity with our documents and so here we're",
    "start": "2376540",
    "end": "2382660"
  },
  {
    "text": "doing that we've got skelter's report and Molly's report both going to Skinner to find out uh you know how you know",
    "start": "2382660",
    "end": "2390220"
  },
  {
    "text": "compare the results of what they found in the field and if we do uh the Jacquard similarity calculation on these sets uh we get an",
    "start": "2390220",
    "end": "2397839"
  },
  {
    "text": "intersection of seven a union of 11 and these have a jaccard similarity of 63.63",
    "start": "2397839",
    "end": "2403480"
  },
  {
    "text": "repeating percent so this is more useful but this has a",
    "start": "2403480",
    "end": "2410380"
  },
  {
    "text": "problem too any any guess what it is performance",
    "start": "2410380",
    "end": "2415960"
  },
  {
    "text": "uh you are storing a lot of strings these these sets are bigger than the",
    "start": "2415960",
    "end": "2421960"
  },
  {
    "text": "documents were originally and uh and comparing all these sets together is really intensive",
    "start": "2421960",
    "end": "2428500"
  },
  {
    "text": "and so Google came up with a better way to do this using a Min hash",
    "start": "2428500",
    "end": "2435400"
  },
  {
    "text": "so the Min hash is calculated once again using a hashing function with a seed",
    "start": "2435400",
    "end": "2441880"
  },
  {
    "text": "and we take every single trigram in the report there so all these here going",
    "start": "2441880",
    "end": "2447040"
  },
  {
    "text": "down are fed through a hashing function up here and across to create a set of numbers",
    "start": "2447040",
    "end": "2454119"
  },
  {
    "text": "for each trigram so number 325 in this first set here right there is we notice too 489 is",
    "start": "2454119",
    "end": "2462460"
  },
  {
    "text": "notice 2R all the way down to 312 which is the mountains a",
    "start": "2462460",
    "end": "2467500"
  },
  {
    "text": "and then we do this for each hash and so we end up with a set of numbers for each hash function for all the trigrams",
    "start": "2467500",
    "end": "2476579"
  },
  {
    "text": "that we then take for each of those sets the smallest value in each one which is why it's called Min hash",
    "start": "2478540",
    "end": "2485619"
  },
  {
    "text": "and so the minimum hash for each hash function for the set of trigrams in the document",
    "start": "2485619",
    "end": "2491619"
  },
  {
    "text": "and we end up with and since we use three hashing functions we end up with three numbers 233 143 and 102. this is",
    "start": "2491619",
    "end": "2499900"
  },
  {
    "text": "much smaller and tidier than easier to work with than the big giant",
    "start": "2499900",
    "end": "2506440"
  },
  {
    "text": "bunch of text we do the same thing for malt for Molly Smith hash and calculate a similar value",
    "start": "2506440",
    "end": "2511720"
  },
  {
    "text": "and then we can take these sets and they act like document signatures and we can compare them using jaccard",
    "start": "2511720",
    "end": "2517540"
  },
  {
    "text": "similarity and get a number now this number is 50 similar and that's mostly",
    "start": "2517540",
    "end": "2523180"
  },
  {
    "text": "because I picked three things I have three hashing functions you probably want to use more um",
    "start": "2523180",
    "end": "2529060"
  },
  {
    "text": "but this will show you how much how similar something is probabilistically it's not as accurate as you're going to",
    "start": "2529060",
    "end": "2534400"
  },
  {
    "text": "get by actually counting the trigrams but it'll give you a good feel for how similar these are you could use this for",
    "start": "2534400",
    "end": "2540040"
  },
  {
    "text": "detecting plagiarism and saying well these are have a high similarity",
    "start": "2540040",
    "end": "2545079"
  },
  {
    "text": "uh you could use this for doing what should I bother to recrawl this web page",
    "start": "2545079",
    "end": "2551200"
  },
  {
    "text": "because has it changed enough for me to justify re-indexing it um and the nice thing is is that you can",
    "start": "2551200",
    "end": "2558280"
  },
  {
    "text": "just you don't have to store the documents that you use to generate your Min hash you can just store them in hash and then you go to another document",
    "start": "2558280",
    "end": "2564579"
  },
  {
    "text": "generate another Min hash that using the same seeds and compare them and so you don't you can you know if",
    "start": "2564579",
    "end": "2571240"
  },
  {
    "text": "you're Google you don't have to store the entire internet to in to know whether you've indexed the page or not",
    "start": "2571240",
    "end": "2577500"
  },
  {
    "text": "so Min hashes are kind of neat I actually ran into someone at a conference uh late last year who said we",
    "start": "2578440",
    "end": "2584440"
  },
  {
    "text": "were doing this other thing where we were just picking random parts of the document to see if they'd changed or not it's like I should probably be using",
    "start": "2584440",
    "end": "2589720"
  },
  {
    "text": "this like wow that's the first time anyone's ever actually needed this",
    "start": "2589720",
    "end": "2595960"
  },
  {
    "text": "kind of neat but it's a little you know esoteric uh I used to work for an insurance company and you know you don't",
    "start": "2595960",
    "end": "2602200"
  },
  {
    "text": "really need to do this when you're working in an insurance company right but it's still pretty cool stuff",
    "start": "2602200",
    "end": "2608880"
  },
  {
    "text": "so that's uh Min hash I don't have a demo for men hash I do have an implementation out of my GitHub repo",
    "start": "2609160",
    "end": "2614319"
  },
  {
    "text": "that you can go check out last but certainly not least we've got top K which is",
    "start": "2614319",
    "end": "2619780"
  },
  {
    "text": "um I say it's actually a heavy keeper it's called top K and redis but it's using a data structure called a heavy",
    "start": "2619780",
    "end": "2625599"
  },
  {
    "text": "keeper combined with a Min Heap and uh what top K does is it ranks items",
    "start": "2625599",
    "end": "2631060"
  },
  {
    "text": "and so and and it stores them in a way that can erode so you could use this for I mentioned",
    "start": "2631060",
    "end": "2638500"
  },
  {
    "text": "this earlier for IP addresses that are hitting your server so you you know you get the top five most common common IP",
    "start": "2638500",
    "end": "2645280"
  },
  {
    "text": "addresses that are hitting my server and those are going to change over time as you know someone stops hitting my server",
    "start": "2645280",
    "end": "2650800"
  },
  {
    "text": "with that IP address it needs to fall down the ranks as newer ones come in or trending topics where trending topics",
    "start": "2650800",
    "end": "2658180"
  },
  {
    "text": "are coming in different hashtags and over time they get mentioned less and less and so",
    "start": "2658180",
    "end": "2664359"
  },
  {
    "text": "they drop down through the ranks and more current topics uh bubble up",
    "start": "2664359",
    "end": "2669940"
  },
  {
    "text": "and so uh top K is great for this I already mentioned it it's a Min Heap",
    "start": "2669940",
    "end": "2675339"
  },
  {
    "text": "and a heavy keeper I'm not going to go into how a Min Heap works uh but we'll talk about a heavy keeper",
    "start": "2675339",
    "end": "2680980"
  },
  {
    "text": "a heavy keeper this is probably the most complicated of the data structures I've talked about so far I think it's",
    "start": "2680980",
    "end": "2686560"
  },
  {
    "text": "probably the most complicated and the ones that redis offers in redis bloom um",
    "start": "2686560",
    "end": "2691599"
  },
  {
    "text": "but a heavy keeper has once again unsurprisingly a bunch of hash functions with seeds",
    "start": "2691599",
    "end": "2698200"
  },
  {
    "text": "right right over here so we got three because three fits on the screen",
    "start": "2698200",
    "end": "2703420"
  },
  {
    "text": "and on the the actual structure that stores all the data is a",
    "start": "2703420",
    "end": "2710140"
  },
  {
    "text": "an array an array of just two values the",
    "start": "2710140",
    "end": "2715200"
  },
  {
    "text": "array of buckets I guess we could say and that bucket has a hash a place for a hash value and a count so it's just got",
    "start": "2715200",
    "end": "2721540"
  },
  {
    "text": "two integers and we have a number of these arrays equal to the number of hashing functions",
    "start": "2721540",
    "end": "2728460"
  },
  {
    "text": "and when we create a new one everything's empty so the hash is null or zero the count is zero",
    "start": "2728920",
    "end": "2736480"
  },
  {
    "text": "and the uh the hash functions have newly created seeds",
    "start": "2736480",
    "end": "2742260"
  },
  {
    "text": "and this is going to count how often whatever you've added to it is in there",
    "start": "2743200",
    "end": "2748900"
  },
  {
    "text": "it will count and it will keep incrementing those counts but things can come in and erode those counts and",
    "start": "2748900",
    "end": "2754540"
  },
  {
    "text": "reduce them and so this will always give you then the correct number or less",
    "start": "2754540",
    "end": "2761619"
  },
  {
    "text": "so this this is actually kind of a bad counting algorithm but that's not what it's for it's there",
    "start": "2761619",
    "end": "2766960"
  },
  {
    "text": "to support ranking and so we want older stuff to get eroded well I'll show you how it works and this",
    "start": "2766960",
    "end": "2772359"
  },
  {
    "text": "will make a little more sense so we're going to put words that are used to describe the shapes of UFOs into",
    "start": "2772359",
    "end": "2778240"
  },
  {
    "text": "here and so object is a popular description of a",
    "start": "2778240",
    "end": "2783819"
  },
  {
    "text": "shape of a UFO perhaps the least useful one I saw an object in the sky what was its",
    "start": "2783819",
    "end": "2789520"
  },
  {
    "text": "shape it was an object and so we're going to add the word object we put it into those hashing",
    "start": "2789520",
    "end": "2796000"
  },
  {
    "text": "functions and we get a hash value out we modulus that with",
    "start": "2796000",
    "end": "2801819"
  },
  {
    "text": "the width of our buckets of that array we get an index here we",
    "start": "2801819",
    "end": "2807760"
  },
  {
    "text": "get 2 1 and 2. and then we make a decision we look at the position of the index",
    "start": "2807760",
    "end": "2815020"
  },
  {
    "text": "and if there is a zero which all of us have for the count and the hash is not populated if it's null",
    "start": "2815020",
    "end": "2822040"
  },
  {
    "text": "then we can claim ownership of it and so the word object with a hash valve of",
    "start": "2822040",
    "end": "2828900"
  },
  {
    "text": "4062 or 5062 can claim spot 2 in that array and so it puts its value in there",
    "start": "2828900",
    "end": "2835540"
  },
  {
    "text": "increments the count from zero to one and we do that with all those hmm",
    "start": "2835540",
    "end": "2841780"
  },
  {
    "text": "if we're adding something and there's something there already then we make another decision we we come",
    "start": "2841780",
    "end": "2847180"
  },
  {
    "text": "in we add object a second time and we look there and say well is the hash value that I stored in this bucket",
    "start": "2847180",
    "end": "2852940"
  },
  {
    "text": "the same as the hash value I just generated yes okay well that's mine increment the",
    "start": "2852940",
    "end": "2858339"
  },
  {
    "text": "count so now we've added object to here twice and so it reflects two it reflects that",
    "start": "2858339",
    "end": "2865420"
  },
  {
    "text": "counts when we go to read this All We Do",
    "start": "2865420",
    "end": "2871240"
  },
  {
    "text": "is we go through the same process we give it the word object it creates the hashes it finds the indices and it looks",
    "start": "2871240",
    "end": "2877540"
  },
  {
    "text": "and says find all the the rows where the hash matches the hash",
    "start": "2877540",
    "end": "2882700"
  },
  {
    "text": "and then give me the biggest number so here object matches all three of",
    "start": "2882700",
    "end": "2887920"
  },
  {
    "text": "those all right over here and they all have a two so",
    "start": "2887920",
    "end": "2894040"
  },
  {
    "text": "the count is two",
    "start": "2894040",
    "end": "2896819"
  },
  {
    "text": "let's add something else to it so we add the word light also a popular UFO shape",
    "start": "2900099",
    "end": "2908560"
  },
  {
    "text": "and this goes through here and gives us different hash values for the different hash functions and gives us different",
    "start": "2908560",
    "end": "2916000"
  },
  {
    "text": "indices for the first two rows so in row number one uh it finds an unclaimed spot and so it",
    "start": "2916000",
    "end": "2922060"
  },
  {
    "text": "claims and increments it by one row two finds an unclaimed spot increments it by one but in row three there's something",
    "start": "2922060",
    "end": "2928359"
  },
  {
    "text": "there already and the hash numbers the hash values don't match so what happens",
    "start": "2928359",
    "end": "2934780"
  },
  {
    "text": "does it take it over well what happens is it's going to decrement",
    "start": "2934780",
    "end": "2940180"
  },
  {
    "text": "Maybe so um we will do some math to determine a",
    "start": "2940180",
    "end": "2946540"
  },
  {
    "text": "probability as to whether we will reduce that count by one without changing the hash if we reduce",
    "start": "2946540",
    "end": "2953200"
  },
  {
    "text": "it to zero we've got a new empty slot that someone might claim later and so uh the way we calculate that",
    "start": "2953200",
    "end": "2961060"
  },
  {
    "text": "is uh taking B which is a magic number that we use when we create our data structure",
    "start": "2961060",
    "end": "2968200"
  },
  {
    "text": "and the count to the power of negative of the count so in our case negative two",
    "start": "2968200",
    "end": "2973540"
  },
  {
    "text": "B needs to be a number that's greater than one but really close to one",
    "start": "2973540",
    "end": "2978819"
  },
  {
    "text": "so I picked 1.05 you can do 1.01 whatever whatever you want uh the bigger that number",
    "start": "2978819",
    "end": "2985359"
  },
  {
    "text": "uh the more the more easily things will decay",
    "start": "2985359",
    "end": "2990900"
  },
  {
    "text": "I think I may actually I may have just said that backwards don't don't take that to the bank",
    "start": "2991000",
    "end": "2997319"
  },
  {
    "text": "um so here we we got a magic number of 1.05 to the power of negative two that gives us a 90.7 chance of it being",
    "start": "2997839",
    "end": "3004920"
  },
  {
    "text": "decayed if there was a lot of things in there let's say we had 10 000 as our count",
    "start": "3004920",
    "end": "3011300"
  },
  {
    "text": "1.05 to the power of negative 10 000 is a very small number and so the likelihood of decaying would",
    "start": "3011300",
    "end": "3018359"
  },
  {
    "text": "be really low but it would Decay over time and so we're going to say that 90.7",
    "start": "3018359",
    "end": "3025740"
  },
  {
    "text": "might as well be 100 and we're going to go ahead and Decay this what this means is that the counts can be eroded over",
    "start": "3025740",
    "end": "3031980"
  },
  {
    "text": "time and this is why it works for like a trending topic because as I add topics into here",
    "start": "3031980",
    "end": "3037500"
  },
  {
    "text": "uh as topics are not mentioned anymore they slowly get eroded away over time and",
    "start": "3037500",
    "end": "3043500"
  },
  {
    "text": "then the new ones come in and start replacing them so it keeps the heavy things and then and then throws away the",
    "start": "3043500",
    "end": "3049859"
  },
  {
    "text": "little things and that's that's why it's called a heavy keeper so uh here what decay has occurred light",
    "start": "3049859",
    "end": "3056099"
  },
  {
    "text": "has not claimed to that position it's still associated with object but we can query it and still get",
    "start": "3056099",
    "end": "3061859"
  },
  {
    "text": "accurate numbers so let's query uh the word lights and we find the count for",
    "start": "3061859",
    "end": "3067380"
  },
  {
    "text": "light it matches in two rows in the third row we don't have a match and so we take the largest number there",
    "start": "3067380",
    "end": "3073680"
  },
  {
    "text": "that's a one so we've added light two at one time which is correct",
    "start": "3073680",
    "end": "3079740"
  },
  {
    "text": "for object we have a match on all three of them but we have",
    "start": "3079740",
    "end": "3085380"
  },
  {
    "text": "different numbers we've got two two and one now two is the largest so we return the two and so its count is still accurate and whenever this happens",
    "start": "3085380",
    "end": "3092160"
  },
  {
    "text": "whenever we add something to it we update A Min Heap which is the thing that actually stores",
    "start": "3092160",
    "end": "3097859"
  },
  {
    "text": "these strings that we're carrying about the IP addresses or the uh whatever whatever the value is that",
    "start": "3097859",
    "end": "3103559"
  },
  {
    "text": "we're trying to get the top K of and so the Min Heap is updated and resorted each time and so if we want to say just give me the top five items then it just",
    "start": "3103559",
    "end": "3110280"
  },
  {
    "text": "goes into surrogates them in Heap we're going to get the counts then we can use the heavy keeper",
    "start": "3110280",
    "end": "3115579"
  },
  {
    "text": "there's some redis commands around this you can call Top K dot Reserve I'm going to skip this here",
    "start": "3115579",
    "end": "3120619"
  },
  {
    "text": "top k.reserve lets you set one up and say I want to keep track of three things",
    "start": "3120619",
    "end": "3125880"
  },
  {
    "text": "100 wide five hashing functions and the Decay right there is the in the reciprocal of",
    "start": "3125880",
    "end": "3132420"
  },
  {
    "text": "the one I used in my example you can add things it does what you think it does you can",
    "start": "3132420",
    "end": "3138660"
  },
  {
    "text": "query things which will say is it in the top K and it'll say yes or no you can count that will give the count",
    "start": "3138660",
    "end": "3144000"
  },
  {
    "text": "from the heavy keeper it's almost always wrong and you can do a list to get the things that are in the Heap",
    "start": "3144000",
    "end": "3151079"
  },
  {
    "text": "so I have built a silly thing that uses this in redis",
    "start": "3151079",
    "end": "3156359"
  },
  {
    "text": "and I've got this data set that I mentioned earlier with all these probabilistic data structures in it it is right here new forkreports.csv watch",
    "start": "3156359",
    "end": "3164940"
  },
  {
    "text": "it crash there we go um yeah 112 000",
    "start": "3164940",
    "end": "3171800"
  },
  {
    "text": "101. I must have something wrong maybe I got my number wrong on my presentation so those are all the sightings these are",
    "start": "3171800",
    "end": "3178740"
  },
  {
    "text": "out here in a zip file in the git repo actually and I've got two little python programs one reads through all these uh",
    "start": "3178740",
    "end": "3186540"
  },
  {
    "text": "see the CSV files pulls out the shapes most commonly used shapes and the most commonly or the shapes that are in here",
    "start": "3186540",
    "end": "3192839"
  },
  {
    "text": "in the CSV and the summary and then parses them out and adds them to a heavy",
    "start": "3192839",
    "end": "3198780"
  },
  {
    "text": "keeper I'm not going to go through all the code because I'm getting a little short on time but you can go check it out later",
    "start": "3198780",
    "end": "3205020"
  },
  {
    "text": "if you like this basically is using uh nltk to pull out stop words so the top",
    "start": "3205020",
    "end": "3210420"
  },
  {
    "text": "10 words aren't a and the or that kind of stuff so you get more interesting words and then I got and it just and it",
    "start": "3210420",
    "end": "3218280"
  },
  {
    "text": "uses a uh pandas to do a lot of the CSV parsing so and then I've got app.pi which is",
    "start": "3218280",
    "end": "3226260"
  },
  {
    "text": "just a simple little flask app which exposes some endpoints to um to return",
    "start": "3226260",
    "end": "3231599"
  },
  {
    "text": "uh what the top 10 shapes and the top 10 words are with corresponding counts so",
    "start": "3231599",
    "end": "3236819"
  },
  {
    "text": "it's not complicated code you can go check it out and see I'll do this from python there are examples of some of these probability data structures in",
    "start": "3236819",
    "end": "3242460"
  },
  {
    "text": "JavaScript and c-sharp and Java and in the repo as well what I'm going to do is I'm going to go ahead and run this",
    "start": "3242460",
    "end": "3247859"
  },
  {
    "text": "so we'll do python python we'll say build.pi",
    "start": "3247859",
    "end": "3254760"
  },
  {
    "text": "and this is going to start reading that CSV file and it's now it's adding to the balloon filter or to the uh the heavy keeper the",
    "start": "3254760",
    "end": "3260940"
  },
  {
    "text": "top k over here not going to turn my Bluetooth off we'll do python app.pi",
    "start": "3260940",
    "end": "3268440"
  },
  {
    "text": "and that is listening on Port 5000. so if we got to redis",
    "start": "3268440",
    "end": "3274500"
  },
  {
    "text": "insights here go to the Keys and refresh it",
    "start": "3274500",
    "end": "3279720"
  },
  {
    "text": "me in big in this a little bit close the CLI here we see that we've got",
    "start": "3279720",
    "end": "3287160"
  },
  {
    "text": "uh there's my Bloom filter from earlier here's the UFO words and UFO shapes if I go over here and I can do a command I",
    "start": "3287160",
    "end": "3292800"
  },
  {
    "text": "can see like uh uh top K dot list UFO shapes",
    "start": "3292800",
    "end": "3300859"
  },
  {
    "text": "and then it spits out what are currently the top KU top 10 UFO shapes white circle triangle disk sphere other",
    "start": "3301020",
    "end": "3308059"
  },
  {
    "text": "unknown formation oval and Fireball those are all shapes I believe right",
    "start": "3308059",
    "end": "3315740"
  },
  {
    "text": "and I've got a little website here that is Let me refresh it oh come on",
    "start": "3315740",
    "end": "3323119"
  },
  {
    "text": "127.0.0.1 this totally worked the last time I did",
    "start": "3323700",
    "end": "3329339"
  },
  {
    "text": "it okay",
    "start": "3329339",
    "end": "3334559"
  },
  {
    "text": "we'll use Firefox",
    "start": "3334559",
    "end": "3337460"
  },
  {
    "text": "no just run Firefox dammit",
    "start": "3339660",
    "end": "3344119"
  },
  {
    "text": "I literally rehearsed this right before I came here skip this step I no no I",
    "start": "3350339",
    "end": "3357660"
  },
  {
    "text": "skip this step this is exciting demo isn't it just let me browse damage",
    "start": "3357660",
    "end": "3365520"
  },
  {
    "text": "okay 127.0.0.1",
    "start": "3365520",
    "end": "3369180"
  },
  {
    "text": "there we go so I got a little web app it's just pulling that server and it's going out and and uh getting the latest count",
    "start": "3371940",
    "end": "3379440"
  },
  {
    "text": "every second so stupid useless and fun that's what that's how my wife describes",
    "start": "3379440",
    "end": "3386160"
  },
  {
    "text": "me so",
    "start": "3386160",
    "end": "3390440"
  },
  {
    "text": "let's go ahead and get back to the slides there so this part of this is to show this",
    "start": "3391260",
    "end": "3397980"
  },
  {
    "text": "stuff is real that's really why I tend to do the demos um if you want to check out some of these",
    "start": "3397980",
    "end": "3403440"
  },
  {
    "text": "resources all the stuff's out in the GitHub repository there's a bloom filters by example uh blog post that was",
    "start": "3403440",
    "end": "3409500"
  },
  {
    "text": "fantastic helped me understand them and the little calculators out there as well there's a Min hash tutorial which is uh",
    "start": "3409500",
    "end": "3415980"
  },
  {
    "text": "honestly the bulk of where I learned how minhash has worked he did a great job heavy keeper there's a white paper out",
    "start": "3415980",
    "end": "3422520"
  },
  {
    "text": "there I translated that into code and slides so that you don't have to the UFO data settings data set sightings",
    "start": "3422520",
    "end": "3429059"
  },
  {
    "text": "data sets out there the newfork.org is a real website um I didn't make it up I to have the",
    "start": "3429059",
    "end": "3435660"
  },
  {
    "text": "patience to type in 112 092 UFO sightings uh we got a blog post on on redis.com by my co-worker Ariel who",
    "start": "3435660",
    "end": "3443760"
  },
  {
    "text": "wrote the uh actually wrote the data structure for top K and then redis Bloom",
    "start": "3443760",
    "end": "3449099"
  },
  {
    "text": "is at redisbloom dot IO and you can get redis insight at redis.com redisinsight",
    "start": "3449099",
    "end": "3454980"
  },
  {
    "text": "um if you haven't figured it out yet I work for redis we've got a Discord server so if you",
    "start": "3454980",
    "end": "3460980"
  },
  {
    "text": "have redis questions you can hit us up on discord.gg redis usually I'll be the person answering the question but there",
    "start": "3460980",
    "end": "3466440"
  },
  {
    "text": "are others uh and uh there's about I think we got about five or six thousand people on the Discord server already so",
    "start": "3466440",
    "end": "3471780"
  },
  {
    "text": "it's pretty active free classes on redis at university.redditis.com",
    "start": "3471780",
    "end": "3477599"
  },
  {
    "text": "and you can sign up for a cloud version of redis that has all these probabilistic data structures baked in at redis.com try free and if you use",
    "start": "3477599",
    "end": "3485700"
  },
  {
    "text": "code stack 200 my boss will know that you saw my talk uh for those who uh didn't get and want",
    "start": "3485700",
    "end": "3492599"
  },
  {
    "text": "to get all the code slides there's a QR code it will never give you up it will never let you down",
    "start": "3492599",
    "end": "3499400"
  },
  {
    "text": "and that's pretty much what I've got I always try to leave it up there for a bit for everyone to grab the picture and",
    "start": "3502020",
    "end": "3507240"
  },
  {
    "text": "so I'm stalling",
    "start": "3507240",
    "end": "3510260"
  }
]