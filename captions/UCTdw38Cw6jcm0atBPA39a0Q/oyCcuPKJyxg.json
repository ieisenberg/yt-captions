[
  {
    "start": "0",
    "end": "155000"
  },
  {
    "text": "all right cool well i'm going to go ahead and get started because it is 40 after wherever you're at um welcome everybody",
    "start": "13519",
    "end": "21279"
  },
  {
    "text": "my name is scott and today i'm going to be talking to you about the background on background tasks in",
    "start": "21279",
    "end": "28640"
  },
  {
    "text": "net core i have already posted these slides both on my blog which is just my first and",
    "start": "28640",
    "end": "34320"
  },
  {
    "text": "last name dot com scottsdaler.com as well as i've dropped them in the room two slack channel",
    "start": "34320",
    "end": "39920"
  },
  {
    "text": "as well if you want to grab the slides now or and i've also posted a link to the code",
    "start": "39920",
    "end": "45680"
  },
  {
    "text": "that i'll be using as well so just to level set expectations really",
    "start": "45680",
    "end": "50960"
  },
  {
    "text": "quick about some assumptions i had when i made this talk primarily i'm targeting.net core",
    "start": "50960",
    "end": "57199"
  },
  {
    "text": "developers as the title suggests or people who are just familiar with the.net core asp.net core ecosystem",
    "start": "57199",
    "end": "65040"
  },
  {
    "text": "and need to run a background task but are maybe unsure which options to choose from or",
    "start": "65040",
    "end": "71200"
  },
  {
    "text": "maybe you know all the different options that are out there but aren't quite sure when you should pick one or the other",
    "start": "71200",
    "end": "76880"
  },
  {
    "text": "so those are all things we're going to talk about today and get those questions answered we're going to talk about what",
    "start": "76880",
    "end": "84240"
  },
  {
    "text": "are background tasks and jobs like when do you use those exactly what options are out there",
    "start": "84240",
    "end": "89920"
  },
  {
    "text": "why would i choose one over the other and we'll do a deep dive into each of these and understand really how",
    "start": "89920",
    "end": "96960"
  },
  {
    "text": "they work and i'll do demos all throughout and i'll also pay attention to questions in the slack",
    "start": "96960",
    "end": "103520"
  },
  {
    "text": "channel as best i can or at the very least i'll hit them all at the end as well",
    "start": "103520",
    "end": "110240"
  },
  {
    "text": "so by the end of this hopefully you know all your different options for running background tasks",
    "start": "110240",
    "end": "115680"
  },
  {
    "text": "inside of net core as well as why you would choose one option over another",
    "start": "115680",
    "end": "122880"
  },
  {
    "text": "so quick who am i i'm a software consultant based in des moines iowa which is in the",
    "start": "122880",
    "end": "128640"
  },
  {
    "text": "center of the u.s and currently my wife is corralling my three and five-year-old daughters",
    "start": "128640",
    "end": "134000"
  },
  {
    "text": "upstairs so we'll see how well she does but if you hear any laughing crying screaming that may be what that is but",
    "start": "134000",
    "end": "140959"
  },
  {
    "text": "hopefully my mic doesn't pick all that up i am also the a co-organizer of the",
    "start": "140959",
    "end": "147760"
  },
  {
    "text": "iowa.net user group i'm a friend of redgate and i blog as well as i mentioned earlier",
    "start": "147760",
    "end": "154959"
  },
  {
    "start": "155000",
    "end": "155000"
  },
  {
    "text": "so before we talk about what options there are for running background tasks let's just first level set real quick on",
    "start": "155200",
    "end": "162160"
  },
  {
    "text": "why what problems do background tasks solve and what would you use them for",
    "start": "162160",
    "end": "168400"
  },
  {
    "text": "so the prototypical example is some sort of cron job some sort of uh job that kicks off",
    "start": "168400",
    "end": "174239"
  },
  {
    "text": "on some sort of timer so you may pop messages off from a queue every five minutes",
    "start": "174239",
    "end": "180159"
  },
  {
    "text": "or clean up your database or file system every so often or maybe every minute you want to check",
    "start": "180159",
    "end": "187040"
  },
  {
    "text": "should i send a payment reminder email or sms to my customers or maybe you want to",
    "start": "187040",
    "end": "193840"
  },
  {
    "text": "refresh some distributed cash every so often and we'll actually look at an example",
    "start": "193840",
    "end": "199599"
  },
  {
    "text": "of using these different background task runners to refresh a redis cache or maybe you want to check",
    "start": "199599",
    "end": "207440"
  },
  {
    "text": "for updates to a database every so often and push those updates out through signalr whatever it is there's a million",
    "start": "207440",
    "end": "213040"
  },
  {
    "text": "different scenarios for cron jobs that you could be doing out there and i'm sure many of you have similar",
    "start": "213040",
    "end": "219440"
  },
  {
    "text": "operations such as these you may also just want to perform some cpu intensive",
    "start": "219440",
    "end": "225519"
  },
  {
    "text": "work that's outside of the normal request response pipeline in asp.net core so for instance if you",
    "start": "225519",
    "end": "233120"
  },
  {
    "text": "need to generate a million pdfs you probably don't want to generate those right when somebody clicks",
    "start": "233120",
    "end": "238879"
  },
  {
    "text": "the button you probably want to just send them back a message saying hey we got your message and we'll notify you",
    "start": "238879",
    "end": "244000"
  },
  {
    "text": "when that work is done and spin up real quickly run all that work and then spin it right back down",
    "start": "244000",
    "end": "250799"
  },
  {
    "text": "another example of what background tasks solve is let's say you're doing some machine learning stuff",
    "start": "250799",
    "end": "256320"
  },
  {
    "text": "and you need to retrain your machine learning models you could also do that on a background",
    "start": "256320",
    "end": "262800"
  },
  {
    "text": "task as well and if anybody else has any other examples dropping them in the chat either in webex or slack i'm sure",
    "start": "262800",
    "end": "270960"
  },
  {
    "text": "that could spark some ideas for other people of things that they could be using background tasks for that maybe",
    "start": "270960",
    "end": "276400"
  },
  {
    "text": "they're not today so we're going to talk about the top",
    "start": "276400",
    "end": "281440"
  },
  {
    "text": "four options here we're going to talk about i hosted services background services worker services and hang fire and go into real",
    "start": "281440",
    "end": "290160"
  },
  {
    "text": "go deep into all four of those i will touch on some of the various cloud options",
    "start": "290160",
    "end": "295759"
  },
  {
    "text": "that are out there but i'm not going to go into in depth about those",
    "start": "295759",
    "end": "300800"
  },
  {
    "text": "because ultimately you may be running on azure and another person may be running on aws",
    "start": "300800",
    "end": "306479"
  },
  {
    "text": "or gcp so if i focus on one particular cloud offering that may not make sense and may",
    "start": "306479",
    "end": "312639"
  },
  {
    "text": "segment the market and some of the audience members may not have that be applicable to them so",
    "start": "312639",
    "end": "319280"
  },
  {
    "text": "i'm going to target those top four that you see there because you can take those to any sort of cloud",
    "start": "319280",
    "end": "324639"
  },
  {
    "text": "or run it on-prem if that's your scenario",
    "start": "324639",
    "end": "329520"
  },
  {
    "text": "so before we dive into the four options i just kind of want to get this mental model brewing",
    "start": "329759",
    "end": "335280"
  },
  {
    "text": "in people's heads and in my opinion these options are kind of like baking cookies",
    "start": "335280",
    "end": "340560"
  },
  {
    "text": "on one end of the spectrum you have making your own recipe where you just have the raw ingredients thrown in front",
    "start": "340560",
    "end": "346800"
  },
  {
    "text": "of you and it's up to you to decide how you want to assemble them how you want to cook them",
    "start": "346800",
    "end": "352479"
  },
  {
    "text": "and you just have full control over how you want to bake cookies you can decide to make individual cookies if you want or you can decide to",
    "start": "352479",
    "end": "359199"
  },
  {
    "text": "just make one monster cookie cake it's kind of up to you but ultimately you have full control but that means",
    "start": "359199",
    "end": "365600"
  },
  {
    "text": "also there's more burden on you as well on the other end of the spectrum",
    "start": "365600",
    "end": "370639"
  },
  {
    "text": "you have going to the grocery store the supermarket and buying cookies directly right off",
    "start": "370639",
    "end": "376319"
  },
  {
    "text": "the shelf obviously that's way more convenient but you have a lot less control over how those cookies are made how they're",
    "start": "376319",
    "end": "382400"
  },
  {
    "text": "packaged all that kind of stuff but depending on your requirements you may choose to grab something right off the shelf or",
    "start": "382400",
    "end": "388800"
  },
  {
    "text": "you may choose to assemble your own cookie recipe it's kind of up to you",
    "start": "388800",
    "end": "394160"
  },
  {
    "text": "so that's the mental model i'm going to present when i talk about these four options so the first one we're going to",
    "start": "394160",
    "end": "401919"
  },
  {
    "text": "talk about is i hosted service and in my opinion i hosted service is kind of one of those",
    "start": "401919",
    "end": "408560"
  },
  {
    "text": "make your own recipe uh examples where you're going to have",
    "start": "408560",
    "end": "413680"
  },
  {
    "text": "the raw ingredients thrown out in front of you but the cookie jar is included and what i mean by that",
    "start": "413680",
    "end": "419120"
  },
  {
    "text": "is the cookie jar is like the container for your cookies or for your code and in this case the",
    "start": "419120",
    "end": "425280"
  },
  {
    "text": "cookie jar represents asp.net core and there's a little bit of a nuance there of technically you can host",
    "start": "425280",
    "end": "431440"
  },
  {
    "text": "i hosted services outside of asp.net core but we'll talk about that nuance a little bit later",
    "start": "431440",
    "end": "438639"
  },
  {
    "start": "438000",
    "end": "438000"
  },
  {
    "text": "so what is an ihosted service exactly well it lets you host a background job",
    "start": "438639",
    "end": "445199"
  },
  {
    "text": "inside of an asp.net core app where again asp.net core the asp.net",
    "start": "445199",
    "end": "450479"
  },
  {
    "text": "core app is your cookie jar as the name suggests it is simply just",
    "start": "450479",
    "end": "455919"
  },
  {
    "text": "an interface and that interface exposes two methods that you need to implement",
    "start": "455919",
    "end": "461440"
  },
  {
    "text": "start async and stop async and i bet you can guess what those two do",
    "start": "461440",
    "end": "466960"
  },
  {
    "text": "the way to think about i hosted service is it's just this raw low-level fundamental building block",
    "start": "466960",
    "end": "473280"
  },
  {
    "text": "that other options and other components of asp.net core itself build upon",
    "start": "473280",
    "end": "478639"
  },
  {
    "text": "including kestrel and we'll talk about that a little bit later you can register i hosted services",
    "start": "478639",
    "end": "484960"
  },
  {
    "text": "through dependency injection using services dot add hosted of t",
    "start": "484960",
    "end": "490160"
  },
  {
    "text": "where t is the class that implements the i hosted service interface we'll take a look at that here",
    "start": "490160",
    "end": "497440"
  },
  {
    "text": "right now so i'm going to do a demo of i hosted service",
    "start": "497440",
    "end": "504000"
  },
  {
    "text": "but before i do that i'm just going to talk about what this project that i have here contains so if i zoom",
    "start": "504000",
    "end": "511280"
  },
  {
    "text": "in here a little bit i have the shared project that is going",
    "start": "511280",
    "end": "516800"
  },
  {
    "text": "to be used by multiple different multiple projects multiple examples here",
    "start": "516800",
    "end": "522000"
  },
  {
    "text": "and there's not much code in here there's just a few different pieces that i want to call out specifically",
    "start": "522000",
    "end": "528640"
  },
  {
    "text": "so there's this cache service and i'll zoom in if that's not good enough please let me know in the chat",
    "start": "528640",
    "end": "534800"
  },
  {
    "text": "and i've got this cache service and it's pretty simple all it does is it takes in some",
    "start": "534800",
    "end": "540240"
  },
  {
    "text": "dependencies the i distributed cache interface which comes off of microsoft.extensions.distributed",
    "start": "540240",
    "end": "546640"
  },
  {
    "text": "and that package and then i'm just implementing also injecting in a logger",
    "start": "546640",
    "end": "552080"
  },
  {
    "text": "and i've got this method here called refresh dashboard cache async and the idea behind this method is it",
    "start": "552080",
    "end": "558959"
  },
  {
    "text": "will just generate some random data here simulating like i'm making a database call",
    "start": "558959",
    "end": "564320"
  },
  {
    "text": "so i've got this dashboard result class that i'm going to be sticking into cash and all that has is your average sale",
    "start": "564320",
    "end": "571279"
  },
  {
    "text": "the last time this was updated and the number of sales so if i look at that",
    "start": "571279",
    "end": "577279"
  },
  {
    "text": "as pretty simple poco and then we've also got the total sales which is just a calculation of the number of sales",
    "start": "577279",
    "end": "582880"
  },
  {
    "text": "times the average sale so you can think of this as like simulating a very expensive database",
    "start": "582880",
    "end": "589279"
  },
  {
    "text": "operation or maybe api calls where you're aggregating data from a lot of different",
    "start": "589279",
    "end": "594640"
  },
  {
    "text": "sources and you don't want to make this call every time somebody visits your dashboard page",
    "start": "594640",
    "end": "599839"
  },
  {
    "text": "you just want to make it once every time your cache refreshes and then you just",
    "start": "599839",
    "end": "605120"
  },
  {
    "text": "stick it in cache and then your api serves up that data from that cache",
    "start": "605120",
    "end": "610560"
  },
  {
    "text": "and here i'm just serializing the results and then i'm clicking it in",
    "start": "610560",
    "end": "619839"
  },
  {
    "text": "sorry can you okay sorry i think my headset just cut out there for a little bit uh so then in here we're just going to",
    "start": "620560",
    "end": "628240"
  },
  {
    "text": "set it to the cache the local redis instance that i have running locally",
    "start": "628240",
    "end": "633680"
  },
  {
    "text": "and then we're going to log out some information saying that hey i've refreshed the cache and everything's good to go",
    "start": "633680",
    "end": "640160"
  },
  {
    "text": "and then i just have a method here that's removing that cache key and purging whatever's in",
    "start": "640160",
    "end": "646399"
  },
  {
    "text": "my redis cache from redis itself so that's pretty much all you need to",
    "start": "646399",
    "end": "652399"
  },
  {
    "text": "know from that oh sorry one other thing we have this service collections",
    "start": "652399",
    "end": "658000"
  },
  {
    "text": "extension here where i'm just registering that cache service that i talked about and then i'm setting up some logging",
    "start": "658000",
    "end": "664160"
  },
  {
    "text": "to format the logger to echo out the timestamp in a specific way",
    "start": "664160",
    "end": "670160"
  },
  {
    "text": "so then we can read the logs and see how often the cache is refreshing and then i'm just hooking up my local",
    "start": "670160",
    "end": "676560"
  },
  {
    "text": "redis instance here that again i'm just running locally inside of docker and i'm connecting it that way so then i",
    "start": "676560",
    "end": "683040"
  },
  {
    "text": "can reference this add demo services method in all of my projects",
    "start": "683040",
    "end": "689519"
  },
  {
    "text": "all right so if i go to my hosted service example let's just go ahead and start looking at",
    "start": "689519",
    "end": "696000"
  },
  {
    "text": "the startup first so you don't really have to worry about this configure method we're not really doing anything crazy with",
    "start": "696000",
    "end": "702000"
  },
  {
    "text": "the asp.net core middleware pipeline itself all we're doing is registered risk",
    "start": "702000",
    "end": "707279"
  },
  {
    "text": "registering a hosted service here using a services.ad hosted service",
    "start": "707279",
    "end": "712800"
  },
  {
    "text": "and then giving it the implementation of my i hosted service and if we actually dive into what this",
    "start": "712800",
    "end": "718720"
  },
  {
    "text": "ad hosted service is doing it's basically just doing a try ad singleton",
    "start": "718720",
    "end": "724480"
  },
  {
    "text": "where triad singleton will guarantee that you only register one instance",
    "start": "724480",
    "end": "730000"
  },
  {
    "text": "of that singleton so if you accidentally call this ad hosted service method multiple",
    "start": "730000",
    "end": "736000"
  },
  {
    "text": "times for the same hosted service then you will actually only register one single instance and not multiple",
    "start": "736000",
    "end": "742560"
  },
  {
    "text": "so that's all it's doing under the hood it's just a convenience method for try at singleton we're adding our",
    "start": "742560",
    "end": "749519"
  },
  {
    "text": "controllers not too much crazy there if you've been familiar with aspi core and then we're registering the demo",
    "start": "749519",
    "end": "755600"
  },
  {
    "text": "services that i mentioned earlier so let's go ahead and look at the hosted",
    "start": "755600",
    "end": "762079"
  },
  {
    "text": "service itself you can see i'm just implementing the i hosted service interface with this long",
    "start": "762079",
    "end": "769279"
  },
  {
    "text": "name of dashboard cache refresher hosted service i bet you can't guess what my background",
    "start": "769279",
    "end": "775040"
  },
  {
    "text": "service is called the exact same thing minus background service and we'll get to that here in a little bit",
    "start": "775040",
    "end": "781040"
  },
  {
    "text": "but you can see here i'm just injecting in some resources here the logger and that cache service we looked at and then i've got",
    "start": "781040",
    "end": "789040"
  },
  {
    "text": "the start async method that's just logging saying hey i've started the app and then i'm",
    "start": "789040",
    "end": "795040"
  },
  {
    "text": "calling this refresh cache async method which we'll look at here in a second but",
    "start": "795040",
    "end": "800560"
  },
  {
    "text": "the other method i need to implement being in i hosted service is stop async where",
    "start": "800560",
    "end": "806800"
  },
  {
    "text": "i'm just logging saying hey i'm stopping this job and then i'm performing",
    "start": "806800",
    "end": "812000"
  },
  {
    "text": "performing some cleanup where i'm just clearing the cache in this case but you can imagine plugging in whatever cleanup that you",
    "start": "812000",
    "end": "818399"
  },
  {
    "text": "need to do here in stop async inside of refresh cache async not too",
    "start": "818399",
    "end": "825120"
  },
  {
    "text": "much code here either it's just saying hey while my application is running so while",
    "start": "825120",
    "end": "830480"
  },
  {
    "text": "the application is not notified that i am stopping go ahead and try to refresh the cache",
    "start": "830480",
    "end": "837440"
  },
  {
    "text": "otherwise log out an error and then wait five seconds and do it all over again for eternity until the application",
    "start": "837440",
    "end": "844639"
  },
  {
    "text": "notifies that i am stopping so that's a lot of talking let's go ahead",
    "start": "844639",
    "end": "851600"
  },
  {
    "text": "and just run the app and see what it's doing under the hood and i want you to note one thing i am not awaiting this here and we'll",
    "start": "851600",
    "end": "858880"
  },
  {
    "text": "talk about why i'm not doing that here in a second",
    "start": "858880",
    "end": "863360"
  },
  {
    "text": "so the application is booting and let's just zoom in here on",
    "start": "864320",
    "end": "871519"
  },
  {
    "text": "the logs oh sorry one other thing i forgot to mention i do have a controller here it's pretty",
    "start": "871519",
    "end": "877839"
  },
  {
    "text": "simple controller all i'm doing is grabbing the values from the cache",
    "start": "877839",
    "end": "882880"
  },
  {
    "text": "and then returning them out so nothing too crazy going on there at all",
    "start": "882880",
    "end": "888079"
  },
  {
    "text": "but if we go back to the logs from when my application booted you can see here that it's saying start",
    "start": "888079",
    "end": "894160"
  },
  {
    "text": "starting this hosted service and you can see here i'm saying starting this hosted service",
    "start": "894160",
    "end": "900639"
  },
  {
    "text": "and then you'll notice you'll notice that says dashboard cache was refreshed which is coming from this log statement",
    "start": "900639",
    "end": "908000"
  },
  {
    "text": "here so my redis cache has been populated and then you'll notice a little bit later that now i'm",
    "start": "908000",
    "end": "913440"
  },
  {
    "text": "listening for requests and we'll talk about why this happens after the hosted service has been registered",
    "start": "913440",
    "end": "919760"
  },
  {
    "text": "or after the hosted service has started and then you'll notice every five",
    "start": "919760",
    "end": "925040"
  },
  {
    "text": "seconds it's simply refreshing the cache here so if i pull up my dashboard endpoint",
    "start": "925040",
    "end": "930560"
  },
  {
    "text": "you'll notice i've got this piece of data here my refresh my random data will then change",
    "start": "930560",
    "end": "936240"
  },
  {
    "text": "i refresh again notice it's the same for about five seconds and then the data updates so you can see",
    "start": "936240",
    "end": "944160"
  },
  {
    "text": "there it just changed so this is an example of how you may use background services to",
    "start": "944160",
    "end": "949680"
  },
  {
    "text": "refresh some distributed cache or maybe just an in-memory cache if you've only got a single instance of",
    "start": "949680",
    "end": "955279"
  },
  {
    "text": "your application running and this is also showing how you would use hosted services that are kind of",
    "start": "955279",
    "end": "962399"
  },
  {
    "text": "like a raw fundamental building block for the rest of this",
    "start": "962399",
    "end": "967680"
  },
  {
    "text": "all right so how does ada how does ihosted service",
    "start": "967680",
    "end": "973600"
  },
  {
    "start": "971000",
    "end": "971000"
  },
  {
    "text": "work under the hood well again you just register it with uh dependency injection using the services.add hosted service",
    "start": "973600",
    "end": "982720"
  },
  {
    "text": "there is a bit of a gacha with stop async so stop async's cancellation token by",
    "start": "982720",
    "end": "989600"
  },
  {
    "text": "default gives you five seconds to shut down gracefully now this is assuming that there is a",
    "start": "989600",
    "end": "996320"
  },
  {
    "text": "great graceful shutdown initiated so something like the app pools recycling or something like that",
    "start": "996320",
    "end": "1003279"
  },
  {
    "text": "however you shouldn't rely on stop async to get called because uh",
    "start": "1003279",
    "end": "1010399"
  },
  {
    "text": "rohan is asking to annotate i'm going to say no sorry sorry rohan um not really sure if",
    "start": "1010399",
    "end": "1016959"
  },
  {
    "text": "that would show up for everybody or how that would work but so stop async might not get called",
    "start": "1016959",
    "end": "1023120"
  },
  {
    "text": "if the app shuts down in some unexpected way so you should not be building your",
    "start": "1023120",
    "end": "1028558"
  },
  {
    "text": "hosted services assuming that star stop async always gets called because",
    "start": "1028559",
    "end": "1034160"
  },
  {
    "text": "again there's no guarantee that it actually gets called",
    "start": "1034160",
    "end": "1039839"
  },
  {
    "text": "so how does i and i hosted service work then exactly well you can see here kind of in the",
    "start": "1041600",
    "end": "1047438"
  },
  {
    "text": "center when aspiring core boots up it's going to boot up all of your i hosted services one after another and it",
    "start": "1047439",
    "end": "1054240"
  },
  {
    "text": "will actually do that in the order that you register them in your di container",
    "start": "1054240",
    "end": "1060320"
  },
  {
    "text": "but one thing that you'll note is at the very end after all the start async is complete",
    "start": "1060320",
    "end": "1066400"
  },
  {
    "text": "that's when kestrel actually boots and starts listening for requests so what this means is start async can",
    "start": "1066400",
    "end": "1074160"
  },
  {
    "text": "actually block the rest of your app from starting so in general you probably want to push",
    "start": "1074160",
    "end": "1080640"
  },
  {
    "text": "your blocking long-running work outside of start async and this goes for background service which we'll talk",
    "start": "1080640",
    "end": "1086480"
  },
  {
    "text": "about a little bit later as well so in general you probably want to do what you see on",
    "start": "1086480",
    "end": "1092720"
  },
  {
    "text": "the left which is you're not awaiting your long running thing async and",
    "start": "1092720",
    "end": "1098480"
  },
  {
    "text": "on the right you're waiting for that long running async to finish and the rest of your application will",
    "start": "1098480",
    "end": "1104080"
  },
  {
    "text": "not serve any requests if you're co-locating your i-hosted service with an api for instance your api or your",
    "start": "1104080",
    "end": "1111360"
  },
  {
    "text": "razer pages app or whatever what whatever it is that your asp.net core app does will not be able to serve",
    "start": "1111360",
    "end": "1117440"
  },
  {
    "text": "that traffic until all of your i hosted services complete start async now maybe this is actually what you want",
    "start": "1117440",
    "end": "1124160"
  },
  {
    "text": "it to do so an example of this would be maybe you want to run your database migrations",
    "start": "1124160",
    "end": "1130240"
  },
  {
    "text": "inside of an i hosted service and so you want your database migrations to apply before your",
    "start": "1130240",
    "end": "1135679"
  },
  {
    "text": "application actually finishes booting because maybe you don't want those two to be out of sync although you",
    "start": "1135679",
    "end": "1142240"
  },
  {
    "text": "could argue you should probably be making your application be able be fault tolerant to like your",
    "start": "1142240",
    "end": "1148720"
  },
  {
    "text": "database version -1 but we won't get into any of that but like an example in my case maybe",
    "start": "1148720",
    "end": "1154880"
  },
  {
    "text": "i don't want the rest of my application to boot unless that redis cache has been",
    "start": "1154880",
    "end": "1160480"
  },
  {
    "text": "populated so i could do something like that but with my current implementation if i",
    "start": "1160480",
    "end": "1165520"
  },
  {
    "text": "go back to this code and say hey i actually want to await",
    "start": "1165520",
    "end": "1171200"
  },
  {
    "text": "this guy and i'll make that async get rid of this and",
    "start": "1171200",
    "end": "1176320"
  },
  {
    "text": "i'll rerun the application what will happen here is i'm going to wait for this to finish",
    "start": "1176320",
    "end": "1182320"
  },
  {
    "text": "but it will actually never finish because my while loop is saying only finish when the application is",
    "start": "1182320",
    "end": "1188720"
  },
  {
    "text": "starting to shut down so what will actually happen here is i'm",
    "start": "1188720",
    "end": "1193760"
  },
  {
    "text": "starting my hosted service oops let me zoom in on that a little bit i'm starting my hosted service but my",
    "start": "1193760",
    "end": "1200880"
  },
  {
    "text": "application never actually starts listening for requests to comment or starts listing for requests because kestrel's not booting because i've never",
    "start": "1200880",
    "end": "1207679"
  },
  {
    "text": "finished uh the work for my i hosted service so if i try and make this api call again",
    "start": "1207679",
    "end": "1214320"
  },
  {
    "text": "i'm gonna get a timeout because again my hosted service has not finished so this is something that that i see",
    "start": "1214320",
    "end": "1222799"
  },
  {
    "text": "a lot and my headset kind of went out again for a second there this is something i see people get",
    "start": "1222799",
    "end": "1228000"
  },
  {
    "text": "tripped up on a lot where they think that they can just await or wait something",
    "start": "1228000",
    "end": "1233280"
  },
  {
    "text": "long running inside of start async but that is actually not the case and then they wonder why the rest of",
    "start": "1233280",
    "end": "1238320"
  },
  {
    "text": "their application is not booting so that is a gotcha to look out for",
    "start": "1238320",
    "end": "1244720"
  },
  {
    "text": "so when do i use i hosted service well you will use it implicitly with background services and worker services",
    "start": "1245120",
    "end": "1251840"
  },
  {
    "text": "and actually hang fire as well and you're actually using it implicitly if you're using kestrel inside of asp.net core",
    "start": "1251840",
    "end": "1258720"
  },
  {
    "text": "which i'm assuming all of you are and but i don't think you should really use",
    "start": "1258720",
    "end": "1264799"
  },
  {
    "text": "it directly unless you need full control over starting and stopping of your background job and you don't",
    "start": "1264799",
    "end": "1271440"
  },
  {
    "text": "want to use the base background service implementation which we'll talk about a little bit a little bit later",
    "start": "1271440",
    "end": "1278880"
  },
  {
    "text": "so when do i not use this in my opinion you should be using something else such as background services or worker",
    "start": "1278880",
    "end": "1284799"
  },
  {
    "text": "services 95 plus percent of the time other reasons not to use it would be",
    "start": "1284799",
    "end": "1290000"
  },
  {
    "text": "the same as background service which we'll talk about a little bit er actually right now",
    "start": "1290000",
    "end": "1297120"
  },
  {
    "text": "so background services background services if we go back to the",
    "start": "1297280",
    "end": "1302640"
  },
  {
    "text": "cookie analogy are kind of like a follow the recipe example",
    "start": "1302640",
    "end": "1308159"
  },
  {
    "text": "where you don't have the raw ingredients laid out from in front of you and you have to decide what recipe",
    "start": "1308159",
    "end": "1315039"
  },
  {
    "text": "you're going to follow and you're just going to make one up on the fly background service gives you a recipe to follow",
    "start": "1315039",
    "end": "1320080"
  },
  {
    "text": "and the cookie jar is included where again the cookie jar is your asp.net core app so again",
    "start": "1320080",
    "end": "1326000"
  },
  {
    "start": "1323000",
    "end": "1323000"
  },
  {
    "text": "background services just lets you host a background task runner inside of an asp.net core app",
    "start": "1326000",
    "end": "1332400"
  },
  {
    "text": "and all a background service is is an abstract class that implements the i hosted service interface",
    "start": "1332400",
    "end": "1339440"
  },
  {
    "text": "and it exposes an execute async abstract method to you to put your custom code in",
    "start": "1339440",
    "end": "1346320"
  },
  {
    "text": "and background service handles some of the starting and stopping logic with cancellation tokens which we'll look at",
    "start": "1346320",
    "end": "1351440"
  },
  {
    "text": "here in a second so you don't have to worry about dealing with cancellation tokens if you're unfamiliar with how",
    "start": "1351440",
    "end": "1356960"
  },
  {
    "text": "all those cancellation tokens and everything work",
    "start": "1356960",
    "end": "1361840"
  },
  {
    "text": "so let's do a demo of background service here i'm just going to go ahead and close",
    "start": "1364000",
    "end": "1369360"
  },
  {
    "text": "that and open up the background service again i'll start with the startup method",
    "start": "1369360",
    "end": "1375840"
  },
  {
    "text": "which looks almost identical except the only change is instead of the dashboard cache refresher",
    "start": "1375840",
    "end": "1382799"
  },
  {
    "text": "hosted service i'm i'm registering the dashboard cache refresher background",
    "start": "1382799",
    "end": "1388320"
  },
  {
    "text": "service so there's no add background service method i've seen people",
    "start": "1388320",
    "end": "1393520"
  },
  {
    "text": "wonder about that as well but technically a background service is a hosted service because it implements that interface",
    "start": "1393520",
    "end": "1400240"
  },
  {
    "text": "so let's go ahead and look at this code here so you can see a big difference is i'm",
    "start": "1400240",
    "end": "1405280"
  },
  {
    "text": "inheriting from the background service abstract class i'm still injecting in the exact same",
    "start": "1405280",
    "end": "1410720"
  },
  {
    "text": "dependencies as before but now i've got this start or this execute async method",
    "start": "1410720",
    "end": "1416559"
  },
  {
    "text": "where when the job's starting i'm saying hey i'm going to log out i'm starting the",
    "start": "1416559",
    "end": "1421600"
  },
  {
    "text": "job and then i'll continue to do some work until the application shuts down the",
    "start": "1421600",
    "end": "1427120"
  },
  {
    "text": "exact same work i was doing earlier where i was trying to refresh the cache and then wait another five seconds and",
    "start": "1427120",
    "end": "1434000"
  },
  {
    "text": "then when the job ends i stop i log out that i'm stopping and then i remove",
    "start": "1434000",
    "end": "1440080"
  },
  {
    "text": "the or i purge the cache so if i pull up the old code",
    "start": "1440080",
    "end": "1446559"
  },
  {
    "text": "and kind of look at these side by side you can see the code is pretty similar",
    "start": "1446559",
    "end": "1452960"
  },
  {
    "text": "there's just a little bit less code so we have 46 lines here on the left and 57 on the right",
    "start": "1452960",
    "end": "1458320"
  },
  {
    "text": "so there's a little bit less code because there's a little less spoiler plate that background service is actually",
    "start": "1458320",
    "end": "1464400"
  },
  {
    "text": "handling for us but you can see here the start async method this is identical to this",
    "start": "1464400",
    "end": "1470559"
  },
  {
    "text": "and then this code is all identical to this and this code right here and stop async",
    "start": "1470559",
    "end": "1476640"
  },
  {
    "text": "is identical to this so if i go ahead and stop the old hosted",
    "start": "1476640",
    "end": "1481840"
  },
  {
    "text": "service and launch my background service we will see the exact same behavior",
    "start": "1481840",
    "end": "1487760"
  },
  {
    "text": "as the hosted service where it will just refresh the cache on a five second interval",
    "start": "1487760",
    "end": "1495120"
  },
  {
    "text": "and see here it says it says starting up",
    "start": "1495120",
    "end": "1500159"
  },
  {
    "text": "uh it's starting up and then it's refreshed the cache now i'm listening for castrol's booted up for me",
    "start": "1500159",
    "end": "1506080"
  },
  {
    "text": "and now i'm just refreshing that cache every five seconds so again it's the exact same behavior that we saw before",
    "start": "1506080",
    "end": "1512320"
  },
  {
    "text": "where my cache stays up-to-date for five seconds so exact same code just implemented in a",
    "start": "1512320",
    "end": "1519440"
  },
  {
    "text": "slightly different way using background services so how does a background service work",
    "start": "1519440",
    "end": "1526840"
  },
  {
    "start": "1523000",
    "end": "1523000"
  },
  {
    "text": "exactly so background service works uh largely the same way",
    "start": "1526840",
    "end": "1532400"
  },
  {
    "text": "you register it with the add hosted service just like you do with the hosted service",
    "start": "1532400",
    "end": "1537600"
  },
  {
    "text": "but then it exposes that execute async abstract method that we just looked at but you can still override start async",
    "start": "1537600",
    "end": "1544720"
  },
  {
    "text": "and stop async if you need to do something super custom so if i come back over here",
    "start": "1544720",
    "end": "1550080"
  },
  {
    "text": "i can still say hey override and i'll get the options for start async",
    "start": "1550080",
    "end": "1555840"
  },
  {
    "text": "and stop async so if you don't like the implementation of what background service is doing or you just need to hook into it in some",
    "start": "1555840",
    "end": "1562159"
  },
  {
    "text": "way you can still override that if you want",
    "start": "1562159",
    "end": "1566320"
  },
  {
    "text": "so just to break down this code here real quick because there's actually not much code here that background service is doing it's just kind of a convenience",
    "start": "1569200",
    "end": "1575840"
  },
  {
    "text": "class for you so as you can see here there's not too much code but let's go ahead and zoom in",
    "start": "1575840",
    "end": "1582320"
  },
  {
    "text": "on that real quick so it's got the it's creating a",
    "start": "1582320",
    "end": "1588880"
  },
  {
    "text": "cancellation token source and then it's also giving you that abstract execute async method that you",
    "start": "1588880",
    "end": "1594559"
  },
  {
    "text": "need to implement and then inside of start async it's saying hey i'm going to store off the task that you",
    "start": "1594559",
    "end": "1601760"
  },
  {
    "text": "have created here with execute async and i'm going to pass the cancellation token from this cancellation token",
    "start": "1601760",
    "end": "1607600"
  },
  {
    "text": "source and we'll we'll take a look at how that all works together here in a second",
    "start": "1607600",
    "end": "1613360"
  },
  {
    "text": "if the task is already completed go ahead and bubble that up otherwise it's starting to run so just",
    "start": "1613360",
    "end": "1618799"
  },
  {
    "text": "return a completed task inside of stop async if the task has",
    "start": "1618799",
    "end": "1625679"
  },
  {
    "text": "not actually been called so if this line here didn't actually execute because it called stop before it",
    "start": "1625679",
    "end": "1631679"
  },
  {
    "text": "even called start then go ahead and return out otherwise tell that cancellation token source to cancel",
    "start": "1631679",
    "end": "1640159"
  },
  {
    "text": "and you can see here that's the same that stopping cts field is the exact same field in both",
    "start": "1640159",
    "end": "1646159"
  },
  {
    "text": "spots so this is what's notifying your execute async method that hey the application is starting to stop and",
    "start": "1646159",
    "end": "1653039"
  },
  {
    "text": "then down here we essentially have a race where it's saying hey when any of these tasks complete go ahead and",
    "start": "1653039",
    "end": "1660240"
  },
  {
    "text": "finish stopping so either the executing task or the cancellation token itself",
    "start": "1660240",
    "end": "1665279"
  },
  {
    "text": "that'll give you about five seconds to stop if either of those complete then go ahead and finish the method and",
    "start": "1665279",
    "end": "1671520"
  },
  {
    "text": "continue bubbling up and move on to the next hosted service that then has to stop and on and on and on and then finally",
    "start": "1671520",
    "end": "1679200"
  },
  {
    "text": "just some cleanup in the dispose method here so not too much going on in the background service and it actually takes",
    "start": "1679200",
    "end": "1686159"
  },
  {
    "text": "away some of the boilerplate so you don't have to worry about it so when do you use background service if",
    "start": "1686159",
    "end": "1693200"
  },
  {
    "start": "1690000",
    "end": "1690000"
  },
  {
    "text": "you need a very simple background task runner either as part of your asp.net core",
    "start": "1693200",
    "end": "1698480"
  },
  {
    "text": "application like some existing api that you have or if you want to run it by itself you",
    "start": "1698480",
    "end": "1703520"
  },
  {
    "text": "absolutely can it's got a few less foot guns than i hosted service does",
    "start": "1703520",
    "end": "1709440"
  },
  {
    "text": "so you can't accidentally prevent the rest of your app from from booting unless you override start async and",
    "start": "1709440",
    "end": "1716480"
  },
  {
    "text": "it handles the cancellation tokens for you because a lot of times we as developers may not do too much",
    "start": "1716480",
    "end": "1723600"
  },
  {
    "text": "with cancellation tokens so that may be an unfamiliar concept to some people so it kind of handles some of that orchestration for you",
    "start": "1723600",
    "end": "1731440"
  },
  {
    "text": "another reason to use a background service is if you want some sort of asp.net core health check endpoint to",
    "start": "1731440",
    "end": "1737840"
  },
  {
    "text": "check how your background task is doing this would be a benefit of background services",
    "start": "1737840",
    "end": "1743600"
  },
  {
    "text": "over worker services which we'll talk about here in a little bit",
    "start": "1743600",
    "end": "1748799"
  },
  {
    "start": "1749000",
    "end": "1749000"
  },
  {
    "text": "when do i not use background services well if you want to co-locate a background",
    "start": "1749279",
    "end": "1756240"
  },
  {
    "text": "service with an existing app or an api if you register too many background services that can get a little",
    "start": "1756240",
    "end": "1763120"
  },
  {
    "text": "unruly at times and can outweigh the convenience of co-locating because if you co-locate it with an",
    "start": "1763120",
    "end": "1769919"
  },
  {
    "text": "existing app or like web app like a razer pages app or an api then you're going to be sharing the same",
    "start": "1769919",
    "end": "1776000"
  },
  {
    "text": "process you're going to be sharing the same cpu memory network all that kind of stuff so you could end",
    "start": "1776000",
    "end": "1781200"
  },
  {
    "text": "up in a noisy neighbor situation where your background service is going a",
    "start": "1781200",
    "end": "1786480"
  },
  {
    "text": "little haywire which impact negatively impacts the performance of your api or vice versa if your api is getting",
    "start": "1786480",
    "end": "1792399"
  },
  {
    "text": "slammed it could negatively impact the resources of the background service now",
    "start": "1792399",
    "end": "1798720"
  },
  {
    "text": "i'm not necessarily advocating for putting background services in their own process just it's an it depends scenario of",
    "start": "1798720",
    "end": "1805919"
  },
  {
    "text": "which hurts less putting them together and having one deployable or separating them and having two",
    "start": "1805919",
    "end": "1812480"
  },
  {
    "text": "different deployables that maybe you need to maintain together",
    "start": "1812480",
    "end": "1817679"
  },
  {
    "text": "or deploy together or something like that another another thing",
    "start": "1817679",
    "end": "1824640"
  },
  {
    "text": "just went out again sorry my headset went out on my side i'm not sure if that's happening to you guys or not but um anyway continuing on",
    "start": "1825840",
    "end": "1833760"
  },
  {
    "text": "my another thing that i've seen people struggle with is when they scale out it can be a",
    "start": "1833760",
    "end": "1839520"
  },
  {
    "text": "problem if your code isn't item potent because say you scale out you have multiple instances of the same",
    "start": "1839520",
    "end": "1844960"
  },
  {
    "text": "application running you're now multiple instances of the same background service running so if your code is an item potent or",
    "start": "1844960",
    "end": "1852320"
  },
  {
    "text": "it's got some sort of locking mechanism to ensure that only one is running out of time or",
    "start": "1852320",
    "end": "1858000"
  },
  {
    "text": "you're popping messages off of a queue that that if you had a some sort of message",
    "start": "1858000",
    "end": "1864880"
  },
  {
    "text": "queue that guaranteed only once delivery you could avoid this as well",
    "start": "1864880",
    "end": "1869919"
  },
  {
    "text": "or you could just make your application not allow scale out um another situation where you can make",
    "start": "1869919",
    "end": "1876000"
  },
  {
    "text": "your code item potent is you could check to see if the message has already been processed before you actually do the work that way",
    "start": "1876000",
    "end": "1882320"
  },
  {
    "text": "if you're like firing off emails from your background service uh if you fire off emails from your",
    "start": "1882320",
    "end": "1887840"
  },
  {
    "text": "background services you're not emailing multiple times i've seen people get tripped up on that",
    "start": "1887840",
    "end": "1892960"
  },
  {
    "text": "before with background services so just a word of caution thinking about think about scale out when you're creating",
    "start": "1892960",
    "end": "1899039"
  },
  {
    "text": "these things so the next one we're going to talk",
    "start": "1899039",
    "end": "1904640"
  },
  {
    "text": "about is worker services so what is a worker service",
    "start": "1904640",
    "end": "1910480"
  },
  {
    "start": "1910000",
    "end": "1910000"
  },
  {
    "text": "a worker service essentially all it is is an enhanced net core console app template",
    "start": "1910480",
    "end": "1916480"
  },
  {
    "text": "that gives you a few more nice things out of the box so you can just go to the command line and say dot net new worker",
    "start": "1916480",
    "end": "1922240"
  },
  {
    "text": "dash o and give it the folder name you want it to spit that code out to and it'll wire up a few",
    "start": "1922240",
    "end": "1929360"
  },
  {
    "text": "different things for you when you do that it allows you to have an eye host so the same host that's used inside of",
    "start": "1929360",
    "end": "1936559"
  },
  {
    "text": "asp.net core so things like configuration dependency injection logging all that good stuff that you",
    "start": "1936559",
    "end": "1943360"
  },
  {
    "text": "know with asp.net core the worker service already has pre-hooked up for you",
    "start": "1943360",
    "end": "1948960"
  },
  {
    "text": "on top of that it also creates a registers a worker class as a hosted service so it hooks it up to",
    "start": "1948960",
    "end": "1956000"
  },
  {
    "text": "di as i mentioned earlier so all you have to do from this point is just plug in your custom code",
    "start": "1956000",
    "end": "1961360"
  },
  {
    "text": "and you're good to go now what's different about a worker service than some of these other things",
    "start": "1961360",
    "end": "1968240"
  },
  {
    "text": "is it does not take an opinion on how to host a console app so a worker service is kind of like a",
    "start": "1968240",
    "end": "1975440"
  },
  {
    "text": "follow the recipe scenario but it's got no cookie jar it has no",
    "start": "1975440",
    "end": "1980720"
  },
  {
    "text": "opinion on how you want to run your worker service your console app",
    "start": "1980720",
    "end": "1986000"
  },
  {
    "text": "you could either call the console app from a scheduler like a window scheduled task or",
    "start": "1986000",
    "end": "1991120"
  },
  {
    "text": "kubernetes cron job or something like that or you could hook it up as a windows",
    "start": "1991120",
    "end": "1996640"
  },
  {
    "text": "service if you're on windows or system d if you're on linux it's kind of up to you",
    "start": "1996640",
    "end": "2003120"
  },
  {
    "text": "so let's do a demo of worker services real quick i'm just going to declare bankruptcy on my tabs here",
    "start": "2003120",
    "end": "2010000"
  },
  {
    "text": "and go into the worker service so the first thing i'm going to look at",
    "start": "2010000",
    "end": "2015039"
  },
  {
    "text": "is the program and as i as you might expect with the console app you just have a static void main oops static void main",
    "start": "2015039",
    "end": "2022799"
  },
  {
    "text": "that's creating your app and then running it and you'll notice this probably looks very familiar if",
    "start": "2022799",
    "end": "2028720"
  },
  {
    "text": "you've done asp.net core stuff you're creating a host and let's just ignore these two lines here for a second",
    "start": "2028720",
    "end": "2035279"
  },
  {
    "text": "but you're also configuring services and i'm registering my demo services and then i'm saying hey add me a hosted",
    "start": "2035279",
    "end": "2041360"
  },
  {
    "text": "service of this worker class which is all pre-configured for you",
    "start": "2041360",
    "end": "2048480"
  },
  {
    "text": "now these two lines here you can say that you want to host this inside of a",
    "start": "2048480",
    "end": "2054079"
  },
  {
    "text": "windows service or inside of systemd and i've laid out these package names here",
    "start": "2054079",
    "end": "2059280"
  },
  {
    "text": "with microsoft.extensions.hosting.windowsservice.systemd",
    "start": "2059280",
    "end": "2064320"
  },
  {
    "text": "you can leave both of these here if you're on linux this one will no op and if you're on windows this one will no op",
    "start": "2064320",
    "end": "2070878"
  },
  {
    "text": "so if you're hosting it in this sort of way if you have developers on multiple os's",
    "start": "2070879",
    "end": "2077599"
  },
  {
    "text": "you can leave both of these here and it'll work when any developer pulls down the code",
    "start": "2077599",
    "end": "2082638"
  },
  {
    "text": "whether they're running on windows or linux so if i go in here and look at this",
    "start": "2082639",
    "end": "2089839"
  },
  {
    "text": "background server or this worker class i you'll notice that this is",
    "start": "2089839",
    "end": "2095599"
  },
  {
    "text": "the exact same code as i had in my other background service and just to prove it to you i look up",
    "start": "2095599",
    "end": "2102160"
  },
  {
    "text": "the background service and go ahead and push that off to the side this code minus i was overriding",
    "start": "2102160",
    "end": "2109040"
  },
  {
    "text": "the start async is 100 identical so this is what i was mentioning earlier",
    "start": "2109040",
    "end": "2114960"
  },
  {
    "text": "when i said background services and i hosted services can technically run outside of",
    "start": "2114960",
    "end": "2120240"
  },
  {
    "text": "asp.net core they can definitely run inside of things like a worker service",
    "start": "2120240",
    "end": "2125599"
  },
  {
    "text": "but in general if you hear somebody say hey i'm running a worker service they probably mean inside of a console",
    "start": "2125599",
    "end": "2133040"
  },
  {
    "text": "app and if they say i'm running a background service or an i-hosted service they probably mean asp.net core although",
    "start": "2133040",
    "end": "2139599"
  },
  {
    "text": "that one's a little bit fuzzier but the cool thing is you could plug in",
    "start": "2139599",
    "end": "2144800"
  },
  {
    "text": "this background service into an asp.i core app and then decide later actually you know what i need to bring that out",
    "start": "2144800",
    "end": "2151119"
  },
  {
    "text": "to its own process because maybe it's causing some noisy neighbor situations",
    "start": "2151119",
    "end": "2156560"
  },
  {
    "text": "and literally you don't really have to change any code you can just take this code and drop it into this worker template",
    "start": "2156560",
    "end": "2162320"
  },
  {
    "text": "and everything else is kind of hooked up for you you just need to decide where am i going to host this how am i",
    "start": "2162320",
    "end": "2167839"
  },
  {
    "text": "going to kick this off how am i going to install that all that kind of stuff so that",
    "start": "2167839",
    "end": "2172960"
  },
  {
    "text": "abstraction is pretty powerful so how does a worker service work",
    "start": "2172960",
    "end": "2179280"
  },
  {
    "start": "2177000",
    "end": "2177000"
  },
  {
    "text": "exactly well in your cs proj the sdk type is of type worker instead of",
    "start": "2179280",
    "end": "2186720"
  },
  {
    "text": "web and the other thing to note is it automatically adds a package reference to",
    "start": "2186720",
    "end": "2194440"
  },
  {
    "text": "microsoft.extensions.hosting so that you get the whole i host create default builder stuff",
    "start": "2194440",
    "end": "2199760"
  },
  {
    "text": "for you out of the box there's not too much magic going on there behind the scenes",
    "start": "2199760",
    "end": "2206480"
  },
  {
    "start": "2206000",
    "end": "2206000"
  },
  {
    "text": "so how do i host worker services then if it's not an asp.net core app well you could do something like a",
    "start": "2206960",
    "end": "2213599"
  },
  {
    "text": "scheduler calls your exe directly so using something like windows schedule",
    "start": "2213599",
    "end": "2218800"
  },
  {
    "text": "tasks azure logic apps kubernetes cron jobs aws scheduled tasks",
    "start": "2218800",
    "end": "2224000"
  },
  {
    "text": "or gcp cloud scheduler or as i mentioned earlier you could run it as a windows service if",
    "start": "2224000",
    "end": "2230480"
  },
  {
    "text": "you're on windows or systemd if you're on linux it's kind of up to you on how you want to host your worker",
    "start": "2230480",
    "end": "2235760"
  },
  {
    "text": "services when should i use worker services if you",
    "start": "2235760",
    "end": "2241520"
  },
  {
    "start": "2237000",
    "end": "2237000"
  },
  {
    "text": "want some sort of out-of-proc way of running a background task so if you don't want to co-locate it with your",
    "start": "2241520",
    "end": "2247119"
  },
  {
    "text": "existing asp.net core app a worker service is a great option",
    "start": "2247119",
    "end": "2252400"
  },
  {
    "text": "as well as if you just prefer hosting background services outside of the whole web app life cycle because you can get",
    "start": "2252400",
    "end": "2258400"
  },
  {
    "text": "into some weird scenarios where you know maybe an app pool recycles in the middle of your background task",
    "start": "2258400",
    "end": "2266000"
  },
  {
    "text": "running and just making sure that your code can handle that scenario you can just get into some weird",
    "start": "2266000",
    "end": "2271839"
  },
  {
    "text": "scenarios with kind of sticking a background task runner inside of",
    "start": "2271839",
    "end": "2277200"
  },
  {
    "text": "a web app which is more about like returning responses from a request",
    "start": "2277200",
    "end": "2283599"
  },
  {
    "text": "i also think worker services are a natural migration for anybody who's got an existing",
    "start": "2283599",
    "end": "2289520"
  },
  {
    "text": "like.net 45 full framework windows service you can obviously like if you're happy with that hosting model you can",
    "start": "2289520",
    "end": "2295760"
  },
  {
    "text": "obviously just port the code over to a worker service and hook it up to a windows service and",
    "start": "2295760",
    "end": "2302400"
  },
  {
    "text": "using a worker service and you'll be good to go",
    "start": "2302400",
    "end": "2307280"
  },
  {
    "text": "when do i not use worker services well if your team in general is more",
    "start": "2307839",
    "end": "2313280"
  },
  {
    "start": "2308000",
    "end": "2308000"
  },
  {
    "text": "comfortable deploying and maintaining web apps and you're not really too keen on having like windows services or system d",
    "start": "2313280",
    "end": "2320079"
  },
  {
    "text": "or something like that maybe then you would lean towards more something like a background service",
    "start": "2320079",
    "end": "2325440"
  },
  {
    "text": "or hang fire which we'll talk about here in a little bit another reason not to use it would be is",
    "start": "2325440",
    "end": "2332320"
  },
  {
    "text": "if you wanted to co-locate your worker service or your background service with an existing",
    "start": "2332320",
    "end": "2337680"
  },
  {
    "text": "web app or api so maybe you don't want to have multiple deployables you just want like have something really",
    "start": "2337680",
    "end": "2343599"
  },
  {
    "text": "simple and you just want to host it with your existing app you can totally do that with a background service not so much with a",
    "start": "2343599",
    "end": "2349920"
  },
  {
    "text": "worker service another thing as if you want some sort of health check endpoint",
    "start": "2349920",
    "end": "2356240"
  },
  {
    "text": "so obviously with an api you could add a health check endpoint saying hey is my worker is my background",
    "start": "2356240",
    "end": "2362000"
  },
  {
    "text": "service healthy is it processing messages all that kind of stuff with a worker service you really can't do that because",
    "start": "2362000",
    "end": "2368160"
  },
  {
    "text": "it's just a console app so for that you would have to do something like monitoring the behavior of the application",
    "start": "2368160",
    "end": "2374640"
  },
  {
    "text": "so if you're popping messages off of a queue for instance you would have to monitor how many",
    "start": "2374640",
    "end": "2380000"
  },
  {
    "text": "message messages are piling up on the queue and do some sort of alerting or whatever you want to do on the health check",
    "start": "2380000",
    "end": "2386960"
  },
  {
    "text": "based off of that so this next one we're going to talk",
    "start": "2386960",
    "end": "2392400"
  },
  {
    "text": "about is hang fire which i equate this to buying pre-packaged cookies",
    "start": "2392400",
    "end": "2397680"
  },
  {
    "text": "and where they kind of made the decision of how the cookies are assembled how they're packaged and all that kind of stuff",
    "start": "2397680",
    "end": "2403440"
  },
  {
    "text": "you just have to decide how are you going to eat the cookies are you going to use milk or however you're going to eat the cookies that you",
    "start": "2403440",
    "end": "2410240"
  },
  {
    "text": "buy off the shelf so hang fire's a open source library and",
    "start": "2410240",
    "end": "2416240"
  },
  {
    "start": "2412000",
    "end": "2412000"
  },
  {
    "text": "for running jobs in asp.net core it is free for commute commercial use",
    "start": "2416240",
    "end": "2421359"
  },
  {
    "text": "but if you want support or some extra features you'll have to pay rent ranging from",
    "start": "2421359",
    "end": "2428720"
  },
  {
    "text": "oh i think i'd drop there again sorry about that uh as i mentioned it's free for",
    "start": "2434960",
    "end": "2441359"
  },
  {
    "text": "commercial use but paid if you want some sort of support such as 500 uh you'll have to pay",
    "start": "2441359",
    "end": "2446800"
  },
  {
    "text": "ranging from 500 a year to 4 500 a year",
    "start": "2446800",
    "end": "2452000"
  },
  {
    "text": "it comes with a ui for monitoring and history so you can see how your jobs are doing as well as how they've",
    "start": "2452000",
    "end": "2458160"
  },
  {
    "text": "well they've done in the past take a look at that here in a second it supports cron jobs so running things",
    "start": "2458160",
    "end": "2465040"
  },
  {
    "text": "on a timer or just ad hoc running of jobs and we'll take a look at that here in a second",
    "start": "2465040",
    "end": "2470160"
  },
  {
    "text": "if you just want to do a one-off job and chuck some custom code into a job and",
    "start": "2470160",
    "end": "2475200"
  },
  {
    "text": "hang fire it also allows for things called continuations",
    "start": "2475200",
    "end": "2480480"
  },
  {
    "text": "where let's say you have step one step two and step three and you need to coordinate those steps and have that happen in a particular order",
    "start": "2480480",
    "end": "2487760"
  },
  {
    "text": "it will allow you to set up these continuations where it'll guarantee step one runs before step two and step two runs",
    "start": "2487760",
    "end": "2494160"
  },
  {
    "text": "before step three it also supports automatic retries so you can",
    "start": "2494160",
    "end": "2500079"
  },
  {
    "text": "it'll retry ten times by default but you can also configure that how you like",
    "start": "2500079",
    "end": "2505440"
  },
  {
    "text": "and it supports concurrency limiting so you can guarantee that a job only runs one one instance of the job is",
    "start": "2505440",
    "end": "2512240"
  },
  {
    "text": "running instead of multiple instances and it also persists the job state to a",
    "start": "2512240",
    "end": "2517280"
  },
  {
    "text": "database and so you can we'll talk a little bit later about how all that works",
    "start": "2517280",
    "end": "2524319"
  },
  {
    "text": "let's do a quick demo with hang fire and i'm just going to declare bankruptcy",
    "start": "2524319",
    "end": "2529440"
  },
  {
    "text": "on my tabs again and let's actually let's first open the",
    "start": "2529440",
    "end": "2535040"
  },
  {
    "text": "cs proj and so you can see see how what packages i brought in",
    "start": "2535040",
    "end": "2542640"
  },
  {
    "text": "so these are the three packages uh i brought in for hang fire so there's hangfire.asp.net core",
    "start": "2542800",
    "end": "2549599"
  },
  {
    "text": "and this hooks hang fire up to the rest of the asp.net core pipeline",
    "start": "2549599",
    "end": "2554720"
  },
  {
    "text": "and hang fire itself is actually implemented as a i hosted service so again yet another thing that builds",
    "start": "2554720",
    "end": "2560720"
  },
  {
    "text": "on top of i-hosted service and then this is like the shared library with all the common interfaces that hang",
    "start": "2560720",
    "end": "2567040"
  },
  {
    "text": "fire has because you can actually run hang fire on top of a full framework asp.net",
    "start": "2567040",
    "end": "2573200"
  },
  {
    "text": "like we were talking about before the talks started and then this is my persistence uh",
    "start": "2573200",
    "end": "2579760"
  },
  {
    "text": "package where i'm saying i want to persist it to sql server i could also persist it to redis",
    "start": "2579760",
    "end": "2585680"
  },
  {
    "text": "or msmq or i believe are the other two options",
    "start": "2585680",
    "end": "2590880"
  },
  {
    "text": "so let's go ahead and look at my startup for this um i'm just registering some services",
    "start": "2591280",
    "end": "2597040"
  },
  {
    "text": "with hang fire thing to note here's i'm saying i want to use sql server and again i'm just running sql server locally inside of",
    "start": "2597040",
    "end": "2603520"
  },
  {
    "text": "docker so i'm saying hey this is my connection string and then there's a bunch of things that you can configure",
    "start": "2603520",
    "end": "2609920"
  },
  {
    "text": "uh if you want with hang fire i'm registering the hang fire server to",
    "start": "2609920",
    "end": "2616079"
  },
  {
    "text": "do all the job processing and then down here i'm hooking up some",
    "start": "2616079",
    "end": "2621599"
  },
  {
    "text": "of the middleware so i'm saying hey i want to use the hang fire dashboard and let's go ahead and map the hang fire dashboard as well",
    "start": "2621599",
    "end": "2629200"
  },
  {
    "text": "and so if you want to kick off a or set up some sort of cron job you can do that a",
    "start": "2629200",
    "end": "2635520"
  },
  {
    "text": "few different ways but here's one of the ways so you can say recurring job dot add or update and just give it an inline method",
    "start": "2635520",
    "end": "2642160"
  },
  {
    "text": "saying hey i'm just going to call console.writeline and i'm going to run that every single minute or you can and so",
    "start": "2642160",
    "end": "2650640"
  },
  {
    "text": "when this persists to hang fire and shows you in the ui it doesn't really know anything about this method so all it's going to tell",
    "start": "2650640",
    "end": "2657119"
  },
  {
    "text": "you is hey you ran a console.writeline method so it just takes the method name as the job name alternatively you can",
    "start": "2657119",
    "end": "2663599"
  },
  {
    "text": "give it a specific job name so you just do that with an attribute saying hey here's the",
    "start": "2663599",
    "end": "2669200"
  },
  {
    "text": "job i want to display inside of hang fire let's go",
    "start": "2669200",
    "end": "2674240"
  },
  {
    "text": "ahead and launch hang fire here",
    "start": "2674240",
    "end": "2679760"
  },
  {
    "text": "and so while that's coming up what this will do is it will launch the hang fire",
    "start": "2686400",
    "end": "2691760"
  },
  {
    "text": "dashboard so you can see uh what's going on with all of your different crown jobs",
    "start": "2691760",
    "end": "2697520"
  },
  {
    "text": "and monitor them so you can see like the his history graph of how many times these",
    "start": "2697520",
    "end": "2703599"
  },
  {
    "text": "jobs have run and whether they've succeeded or failed you get a real-time graph showing you how much or how many times",
    "start": "2703599",
    "end": "2710079"
  },
  {
    "text": "they've succeeded or failed you can see what recurring jobs you set up so you can see i've got this one",
    "start": "2710079",
    "end": "2716319"
  },
  {
    "text": "that's console right line which was that inline one that i showed a bit ago and then i've got",
    "start": "2716319",
    "end": "2722079"
  },
  {
    "text": "this one here as well and you can see it's got the custom name of custom job name so i can actually go",
    "start": "2722079",
    "end": "2728079"
  },
  {
    "text": "ahead and trigger these ad hoc if i want and the console rightline one finished",
    "start": "2728079",
    "end": "2734240"
  },
  {
    "text": "immediately but you can see this one took at least five seconds because i had",
    "start": "2734240",
    "end": "2739599"
  },
  {
    "text": "a five second delay here and then we can go look at the history and see",
    "start": "2739599",
    "end": "2744720"
  },
  {
    "text": "okay this custom job name took 5.2 seconds approximately to run and this console",
    "start": "2744720",
    "end": "2750960"
  },
  {
    "text": "write line one took about 200 milliseconds i can dive into the details they're kind of telling me hey here's",
    "start": "2750960",
    "end": "2757440"
  },
  {
    "text": "what triggered it here the different parameters how long it took what server it ran on all that kind of",
    "start": "2757440",
    "end": "2764319"
  },
  {
    "text": "stuff another piece of code i have in here is in the hang",
    "start": "2764319",
    "end": "2770000"
  },
  {
    "text": "this hang fire controller i've got a way to kick off a background job just kind of ad hoc so",
    "start": "2770000",
    "end": "2778240"
  },
  {
    "text": "if you have something like hey i want to fire off an email you can use this in queue method say",
    "start": "2778240",
    "end": "2785839"
  },
  {
    "text": "i want you to create a job and in this case i'm saying hey this is uh i'm passing the parameters of",
    "start": "2785839",
    "end": "2792079"
  },
  {
    "text": "hello from controller and i'm actually using that inside of the job name so this curly brace 0",
    "start": "2792079",
    "end": "2798560"
  },
  {
    "text": "is kind of like a string.format where it's going to place in the parameters that i passed to this",
    "start": "2798560",
    "end": "2803920"
  },
  {
    "text": "method so you'll see it'll say hello from controller with dash hello trigger from controller with",
    "start": "2803920",
    "end": "2811280"
  },
  {
    "text": "hello from the controller so if i come over here and make this api call to hang fire",
    "start": "2811280",
    "end": "2820720"
  },
  {
    "text": "simulate that api call you can see now it's processing it's saying hey triggered from controller hello from the",
    "start": "2820720",
    "end": "2826160"
  },
  {
    "text": "controller and go look at how i performed and see what the parameters were",
    "start": "2826160",
    "end": "2831839"
  },
  {
    "text": "and then how long it took and all that same good stuff you can also do things like deleting",
    "start": "2831839",
    "end": "2837520"
  },
  {
    "text": "jobs not sure why you would set up a job just to delete it from a recurring perspective but you totally can",
    "start": "2837520",
    "end": "2845280"
  },
  {
    "text": "if you wanted to like stop a job in the middle technically when it's processing you could also check the box and say delete job as well",
    "start": "2845280",
    "end": "2853359"
  },
  {
    "text": "but let's say i throw an exception here and just say oops something happened",
    "start": "2853359",
    "end": "2860800"
  },
  {
    "text": "right i'm just going to rerun the app and i'll show you kind of how the retries work",
    "start": "2860800",
    "end": "2865839"
  },
  {
    "text": "within hang fire",
    "start": "2865839",
    "end": "2868880"
  },
  {
    "text": "and writer's yelling at me saying i've got some unreachable code which is fine because i want that to happen",
    "start": "2871119",
    "end": "2878000"
  },
  {
    "text": "so my app speeded up if i refresh this you can see immediately it chucked it",
    "start": "2879040",
    "end": "2885440"
  },
  {
    "text": "into this retry queue and so it'll actually do an exponential back off but i'll just keep",
    "start": "2885440",
    "end": "2891119"
  },
  {
    "text": "enqueuing it and then it'll keep failing and you'll see the back off will continue increasing so now it's retrying in a",
    "start": "2891119",
    "end": "2897760"
  },
  {
    "text": "minute instead of a second i enqueue it again it'll enqueue uh in three minutes and",
    "start": "2897760",
    "end": "2904480"
  },
  {
    "text": "it'll just keep going on and on and on eventually if these all fail it'll end up into this failed",
    "start": "2904480",
    "end": "2910319"
  },
  {
    "text": "like dead letter queue essentially saying hey this job failed and it never succeeded",
    "start": "2910319",
    "end": "2916960"
  },
  {
    "text": "so that is a quick overview of hang fire you could probably do a whole hour-long talk on a hang fire if you",
    "start": "2917760",
    "end": "2923520"
  },
  {
    "text": "wanted but that's a quick overview of some of the features so how does it work as we were kind of",
    "start": "2923520",
    "end": "2928880"
  },
  {
    "start": "2927000",
    "end": "2927000"
  },
  {
    "text": "talking about earlier before this talk started uh it's saying fire serializes the method call and all of its arguments",
    "start": "2928880",
    "end": "2935760"
  },
  {
    "text": "so it'll take those and it'll create a background job based on that info and then save that job to its persistent",
    "start": "2935760",
    "end": "2942559"
  },
  {
    "text": "storage so in my case that was sql server so the arguments to that and queue method will actually go",
    "start": "2942559",
    "end": "2948559"
  },
  {
    "text": "into the database so in general you don't want to put a lot of data in there because that will end up in the database",
    "start": "2948559",
    "end": "2954559"
  },
  {
    "text": "you might want to just put like an id or something like that into your argument and then it'll start",
    "start": "2954559",
    "end": "2961119"
  },
  {
    "text": "the background job immediately if it's like an enqueue situation where you want to start the background job immediately and",
    "start": "2961119",
    "end": "2967520"
  },
  {
    "text": "not delay it or be on some sort of crown job so when should you use hang fire if you",
    "start": "2967520",
    "end": "2974240"
  },
  {
    "start": "2971000",
    "end": "2971000"
  },
  {
    "text": "want to host jobs inside of asp.net core and you need some of the features that hang fire offers and you don't want to",
    "start": "2974240",
    "end": "2980960"
  },
  {
    "text": "write that plumbing code yourself as well as if you're okay relying on a third-party open source library",
    "start": "2980960",
    "end": "2987760"
  },
  {
    "text": "whereas the other three options that we talked about were kind of baked into the dot-net core",
    "start": "2987760",
    "end": "2993599"
  },
  {
    "text": "framework itself when should you not use hang fire if you do not want to host your jobs in",
    "start": "2993599",
    "end": "2999920"
  },
  {
    "start": "2996000",
    "end": "2996000"
  },
  {
    "text": "asp.net core and you want to use something like a worker service because you want to avoid the uh likes",
    "start": "2999920",
    "end": "3006559"
  },
  {
    "text": "web server lifecycle then you would use something like worker services over",
    "start": "3006559",
    "end": "3012160"
  },
  {
    "text": "hang fire and asp.net core if you just have really basic needs and",
    "start": "3012160",
    "end": "3017280"
  },
  {
    "text": "you don't need hang fire's features that would be another reason not to use hang fire as well as if you don't want",
    "start": "3017280",
    "end": "3023440"
  },
  {
    "text": "to rely on a third library and you want to just use something more built into the",
    "start": "3023440",
    "end": "3029520"
  },
  {
    "text": "box like background service so",
    "start": "3029520",
    "end": "3036720"
  },
  {
    "start": "3034000",
    "end": "3034000"
  },
  {
    "text": "sorry sorry i think i'm back now i'm not sure why my headset keeps doing that but um another some other options that",
    "start": "3037520",
    "end": "3045359"
  },
  {
    "text": "you have that i didn't really want to cover are some of your cloud options so",
    "start": "3045359",
    "end": "3052240"
  },
  {
    "text": "i didn't want to cover these again because in case you're on aws if i cover azure functions that might",
    "start": "3052240",
    "end": "3057520"
  },
  {
    "text": "not apply to you as well as there's a lot of talks here at ndc sydney on serverless options so but some of",
    "start": "3057520",
    "end": "3065119"
  },
  {
    "text": "these options if they apply to you would be something like azure functions triggering off of a timer or an event",
    "start": "3065119",
    "end": "3072720"
  },
  {
    "text": "or azure web jobs same with aws lambdas you can trigger those off of",
    "start": "3072720",
    "end": "3078000"
  },
  {
    "text": "some sort of cron schedule or off of an event happening a gcp cloud scheduler combined with",
    "start": "3078000",
    "end": "3085760"
  },
  {
    "text": "cloud functions could also do similar things to what i've shown here with hosted services background services",
    "start": "3085760",
    "end": "3093359"
  },
  {
    "text": "worker services and hang fire but again i didn't want to cover these to get very cloud specific",
    "start": "3093359",
    "end": "3100400"
  },
  {
    "start": "3100000",
    "end": "3100000"
  },
  {
    "text": "so some takeaways hopefully i've brought some awareness to the options that are available to you",
    "start": "3100400",
    "end": "3106000"
  },
  {
    "text": "and maybe one of those resonated more with you so you can make the best decision for you and your company or your client",
    "start": "3106000",
    "end": "3112880"
  },
  {
    "text": "and choose the best option that makes sense for your scenarios",
    "start": "3112880",
    "end": "3117920"
  },
  {
    "text": "we've got some resources here so the official microsoft documentation has a bunch",
    "start": "3117920",
    "end": "3123839"
  },
  {
    "start": "3119000",
    "end": "3119000"
  },
  {
    "text": "of examples using background services and hosted services and worker services the official hang",
    "start": "3123839",
    "end": "3130720"
  },
  {
    "text": "fire docs are at hangfire.io and then steve gordon who's a prolific.net",
    "start": "3130720",
    "end": "3137200"
  },
  {
    "text": "blogger he has a plural site on worker services and hosted services",
    "start": "3137200",
    "end": "3142559"
  },
  {
    "text": "which by the way that pluralsight is free this week so you can go ahead and check that out",
    "start": "3142559",
    "end": "3147920"
  },
  {
    "text": "it's about a two hour long course where he kind of dives into how all this works under the hood",
    "start": "3147920",
    "end": "3155520"
  },
  {
    "text": "so with that i'll take any questions people may have we've got about eight minutes left if you want to drop them",
    "start": "3155520",
    "end": "3161760"
  },
  {
    "text": "into slack or it looks like we've got a few in the chat here on webex",
    "start": "3161760",
    "end": "3169440"
  },
  {
    "text": "uh looks like okay when your headset drops",
    "start": "3169839",
    "end": "3176559"
  },
  {
    "text": "out the audio stops for a second for the audience but every time it start started against all good okay cool out of both the",
    "start": "3176559",
    "end": "3182160"
  },
  {
    "text": "implementations which one is good for executing poly retries",
    "start": "3182160",
    "end": "3187280"
  },
  {
    "text": "so um it kind of depends on how you're using poly like i've used poly for use for",
    "start": "3187280",
    "end": "3194480"
  },
  {
    "text": "retrying like api calls and stuff like that so to me that's kind of irrelevant to running background tasks",
    "start": "3194480",
    "end": "3202000"
  },
  {
    "text": "themselves it would just poly would be kind of implemented inside of my code and then i would still have like",
    "start": "3202000",
    "end": "3208319"
  },
  {
    "text": "a while loop uh running on a timer or something like that inside of a background service",
    "start": "3208319",
    "end": "3214559"
  },
  {
    "text": "where i just uh you know can try catch i guess you could wrap the whole thing inside of a poly policy",
    "start": "3214559",
    "end": "3221520"
  },
  {
    "text": "but um you just want to make sure that your policy is obviously set up correctly so then you can retry",
    "start": "3221520",
    "end": "3228240"
  },
  {
    "text": "appropriately or kind of do what i did and just have a try catch and just retry on some sort of",
    "start": "3228240",
    "end": "3234839"
  },
  {
    "text": "interval when to go hang fire over web job",
    "start": "3234839",
    "end": "3240720"
  },
  {
    "text": "i'm guessing you're talking about azure web jobs um so a reason to use hang fire over azure",
    "start": "3240720",
    "end": "3247200"
  },
  {
    "text": "web jobs obviously if you're on prem you would probably choose hang fire since you",
    "start": "3247200",
    "end": "3252480"
  },
  {
    "text": "can't go to azure um to be honest i haven't really used azure web jobs in a while",
    "start": "3252480",
    "end": "3259520"
  },
  {
    "text": "so i'm not really sure why i would choose web jobs over hang fire i'm trying to think of a reason but in general i would probably lean",
    "start": "3259520",
    "end": "3267760"
  },
  {
    "text": "towards using hang fire over web jobs or lean towards like having an azure",
    "start": "3267760",
    "end": "3273200"
  },
  {
    "text": "function trigger on some event like uh some blob storage uh item getting added",
    "start": "3273200",
    "end": "3281440"
  },
  {
    "text": "or on some sort of schedule or um something getting dropped into a",
    "start": "3281440",
    "end": "3287440"
  },
  {
    "text": "queue something like that so i'd probably lean that over web jobs in general if you want to host something on azure and you don't",
    "start": "3287440",
    "end": "3294000"
  },
  {
    "text": "really want to go all in on hang fire",
    "start": "3294000",
    "end": "3298078"
  },
  {
    "text": "if we are interested in doing something for failed background tasks could we hang handle those exceptions in",
    "start": "3300880",
    "end": "3306799"
  },
  {
    "text": "hang fire uh yes so by default if it throws an exception it will retry",
    "start": "3306799",
    "end": "3313760"
  },
  {
    "text": "those 10 times but i've also written code before where",
    "start": "3313760",
    "end": "3318960"
  },
  {
    "text": "hey if it's some sort of transient failure like the database is down or the api is down",
    "start": "3318960",
    "end": "3324160"
  },
  {
    "text": "uh i'll just go ahead and keep retrying but otherwise if it's some unexpected error like i've just got a bug in my code you",
    "start": "3324160",
    "end": "3331839"
  },
  {
    "text": "don't really want to retry that 10 times because it's just going to fail 10 times in a row and if you have notifications hooked up to",
    "start": "3331839",
    "end": "3338720"
  },
  {
    "text": "your jobs failing you're not going to find out for four or five hours when that exponential back",
    "start": "3338720",
    "end": "3343839"
  },
  {
    "text": "off happens so there's i can't remember the name of it now there's a filter",
    "start": "3343839",
    "end": "3349280"
  },
  {
    "text": "that you can implement in hang fire to say hey um just bypass the failed state",
    "start": "3349280",
    "end": "3356559"
  },
  {
    "text": "or just immediately go to the failed state and bypass the retry policy so if you want to handle those certain",
    "start": "3356559",
    "end": "3363040"
  },
  {
    "text": "types of exceptions in a certain way you can completely bypass the retry policy and fail",
    "start": "3363040",
    "end": "3368480"
  },
  {
    "text": "fail hard and fail fast",
    "start": "3368480",
    "end": "3376480"
  },
  {
    "text": "and i'll try i'll i'll get the interface for that and i'll post an example in slack",
    "start": "3376480",
    "end": "3383200"
  },
  {
    "text": "which would be best for reading messages from a queue and sending it to a stream processor like kafka um",
    "start": "3383440",
    "end": "3391440"
  },
  {
    "text": "again it just kind of depends on whether you want to host inside of asp.net core if you want that",
    "start": "3391440",
    "end": "3397920"
  },
  {
    "text": "inside of a worker service it kind of depends on what your load constraints are if you",
    "start": "3397920",
    "end": "3403680"
  },
  {
    "text": "prefer having a health check endpoint i don't know that there's really a best one it's kind of",
    "start": "3403680",
    "end": "3409839"
  },
  {
    "text": "it depends on your various scenarios sorry i know that answer isn't exactly",
    "start": "3409839",
    "end": "3415440"
  },
  {
    "text": "straightforward but it is as always it depends in a microservice",
    "start": "3415440",
    "end": "3421119"
  },
  {
    "text": "architecture would you recommend hang fire running on each microservice would you have them share the same sql",
    "start": "3421119",
    "end": "3426640"
  },
  {
    "text": "database or each microservice have their own hang fire database",
    "start": "3426640",
    "end": "3432000"
  },
  {
    "text": "this is going to be another it depends scenario um basically it depends on hosting multiple",
    "start": "3432000",
    "end": "3439119"
  },
  {
    "text": "hang fire instances would you want them to be unified under like a single dashboard",
    "start": "3439119",
    "end": "3444480"
  },
  {
    "text": "or would you want them under multiple dashboards what's the load that you would have",
    "start": "3444480",
    "end": "3450799"
  },
  {
    "text": "those are the kind of questions that i would ask of what kind of load would we have maybe if you have high load you would separate",
    "start": "3450799",
    "end": "3457200"
  },
  {
    "text": "those out into separate hang fire instances but i'd definitely run some sort of load tests to",
    "start": "3457200",
    "end": "3462720"
  },
  {
    "text": "understand what my constraints were there in general i lean towards making it easy",
    "start": "3462720",
    "end": "3468880"
  },
  {
    "text": "to operate so i would lean towards unifying it under one dashboard you can",
    "start": "3468880",
    "end": "3474720"
  },
  {
    "text": "have multiple servers and workers running on hang fire so if you want need to distribute the",
    "start": "3474720",
    "end": "3481359"
  },
  {
    "text": "load you could add multiple servers but then have them roll up under the same dashboard",
    "start": "3481359",
    "end": "3487520"
  },
  {
    "text": "and they have documentation on how to do all that and if you have questions later you can",
    "start": "3487520",
    "end": "3494240"
  },
  {
    "text": "always reach out to me through slack or hit me up on twitter or you can go to my blog i've got a contact",
    "start": "3494240",
    "end": "3500960"
  },
  {
    "text": "page there too you can reach out to me there as well",
    "start": "3500960",
    "end": "3514558"
  }
]