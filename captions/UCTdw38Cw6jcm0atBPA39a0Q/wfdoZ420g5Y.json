[
  {
    "text": "uh hello okay good afternoon uh I hope you're having a good time here at NDC Oslo and enjoying the conference so far",
    "start": "7960",
    "end": "15559"
  },
  {
    "text": "so I'm excited to be speaking to present the topic of react server components and okay react server",
    "start": "15559",
    "end": "22320"
  },
  {
    "text": "components why should you care about them uh obviously react and JavaScript is ever relevant and with react Ser",
    "start": "22320",
    "end": "28640"
  },
  {
    "text": "components we have an entire new way to build react apps so react server components will allow us to fade the",
    "start": "28640",
    "end": "34800"
  },
  {
    "text": "boundary between the client and the server to create Rich user interfaces while uh will with minimal client side",
    "start": "34800",
    "end": "41559"
  },
  {
    "text": "code while still maintaining interactivity and performance so my goal today is to introduce motivate and",
    "start": "41559",
    "end": "47800"
  },
  {
    "text": "provide resources about RSC and before I start let me introduce myself my name is Aurora I'm from Norway",
    "start": "47800",
    "end": "54359"
  },
  {
    "text": "and I work as a consultant at ineta here in Oslo and I'm a fullstack developer but I work mostly on web these days uh",
    "start": "54359",
    "end": "61079"
  },
  {
    "text": "and I'm actively building with react server components in my current consultancy project and I bring to you",
    "start": "61079",
    "end": "66680"
  },
  {
    "text": "my view as a developer joining The Cutting Edge web world and how I'm working and uh learning with modern",
    "start": "66680",
    "end": "72720"
  },
  {
    "text": "technology so the talking points of today will be first rendering strategies then we'll get to react server",
    "start": "72720",
    "end": "78360"
  },
  {
    "text": "components what they are how they work the benefits and the drawbacks then we'll go through the nextjs app brouter",
    "start": "78360",
    "end": "85240"
  },
  {
    "text": "onto best practices and patterns when using RC in nextjs and then afterwards I'm going to show you a demo app that",
    "start": "85240",
    "end": "91640"
  },
  {
    "text": "I've made uh with some examples and then I'll give my thoughts on working with RC in a real project and uh the future of",
    "start": "91640",
    "end": "98840"
  },
  {
    "text": "re Sur components so let's begin with rendering strategies you can't really have a talk",
    "start": "98840",
    "end": "104640"
  },
  {
    "text": "about web development without mentioning them is a crucial prerequisite so I won't mention every type of rendering",
    "start": "104640",
    "end": "111159"
  },
  {
    "text": "and um the history of the web here but I will pick and explain some relevant topics and this stuff will probably be",
    "start": "111159",
    "end": "117320"
  },
  {
    "text": "familiar to a lot of you so static website rendering is the most basic rendering pattern where all web pages",
    "start": "117320",
    "end": "124119"
  },
  {
    "text": "are assembled beforehand and uploaded as a stat static files to a storage bucket and it can be built with plain HTML and",
    "start": "124119",
    "end": "130720"
  },
  {
    "text": "CSS or combined with JavaScript and it's delivered exactly the way it's stored meaning nothing will change unless the",
    "start": "130720",
    "end": "137120"
  },
  {
    "text": "code is changed and although quite simple and efficient it doesn't handle Dynamic data or interactive website well",
    "start": "137120",
    "end": "143599"
  },
  {
    "text": "and is Impractical to maintain a use case for this could be an informational website for a business and",
    "start": "143599",
    "end": "150000"
  },
  {
    "text": "you could say that this is the old way of making websites and it's not used very much anymore multipage applications on the",
    "start": "150000",
    "end": "156840"
  },
  {
    "text": "other hand can handle Dynamic data so in npas HTML and data is merged on the server per request and sent as one",
    "start": "156840",
    "end": "164080"
  },
  {
    "text": "package to the client so the user will open the browser and is serve the merge result and the entire page reloads and",
    "start": "164080",
    "end": "171599"
  },
  {
    "text": "uh per request or navigation to a new page and npas can be created for example",
    "start": "171599",
    "end": "176640"
  },
  {
    "text": "with the esp.net MVC pattern or with PHP or Ruby on Rails use cases could",
    "start": "176640",
    "end": "182599"
  },
  {
    "text": "typically be uh an e-commerce app for example Amazon is an NPA so what are the pros of npas firstly",
    "start": "182599",
    "end": "190799"
  },
  {
    "text": "all page content can be read and indexed by search engines because it's rendered HTML allowing them to appear in search",
    "start": "190799",
    "end": "197280"
  },
  {
    "text": "results and be optimized for it then there is no restriction on the number of pages you can add performance is going",
    "start": "197280",
    "end": "203440"
  },
  {
    "text": "to be the same meaning they have unlimited scalability and last they can provide more website insights uh so for example",
    "start": "203440",
    "end": "210200"
  },
  {
    "text": "Google analytics can create reports for each page uh and the cons they have a slower",
    "start": "210200",
    "end": "216959"
  },
  {
    "text": "overall performance because they fetch each page as a package of HTML CSS and JavaScript from the server as it's being",
    "start": "216959",
    "end": "223280"
  },
  {
    "text": "navigated to and next since every navigation causes a full page refresh it",
    "start": "223280",
    "end": "228560"
  },
  {
    "text": "can be hard to add realtime interactivity and they can be harder to maintain because each page needs to be",
    "start": "228560",
    "end": "234640"
  },
  {
    "text": "maintained separately then we have the single page application or SP",
    "start": "234640",
    "end": "240239"
  },
  {
    "text": "also known as client side rendering a spa will typically be a react app of create react app or a UJS app angular",
    "start": "240239",
    "end": "247480"
  },
  {
    "text": "app um this has been the most common way to build an application for many years",
    "start": "247480",
    "end": "252840"
  },
  {
    "text": "and in a spa the bundle.js file includes everything needed to build the app the entire HTML is created on the client",
    "start": "252840",
    "end": "260000"
  },
  {
    "text": "when the user opens the URL and the page is blank until the JavaScript is downloaded pared and executed and then",
    "start": "260000",
    "end": "266759"
  },
  {
    "text": "the framework like react will start building it inside the the root div and finally load the data and after it's",
    "start": "266759",
    "end": "272840"
  },
  {
    "text": "loaded only data in Json format is needed to update the UI the use cases for a single page",
    "start": "272840",
    "end": "279080"
  },
  {
    "text": "application can be any web app that needs to be highly interactive so what are the proves of",
    "start": "279080",
    "end": "284520"
  },
  {
    "text": "using as Spa first they're fast there's no lag they've got instant information present and smooth transitions after the",
    "start": "284520",
    "end": "291160"
  },
  {
    "text": "initial load and this is because everything is loaded initially and not requested per page as with an",
    "start": "291160",
    "end": "297400"
  },
  {
    "text": "MPA second they're easy to de bog because everything can be logged in the browser because it's browser only such",
    "start": "297400",
    "end": "304039"
  },
  {
    "text": "as data page element and network operations and third since everything is downloaded initially they can work",
    "start": "304039",
    "end": "310400"
  },
  {
    "text": "offline afterwards cach data and then update when possible but there are some significant",
    "start": "310400",
    "end": "316039"
  },
  {
    "text": "cons most importantly they have a slow initial load which is increased with everything that is built on top such as",
    "start": "316039",
    "end": "322639"
  },
  {
    "text": "uh um libraries because it is all added to the JavaScript bundle and meanwhile",
    "start": "322639",
    "end": "328039"
  },
  {
    "text": "the user is just looking at a blank scpt screen and then afterwards a bunch of loading Spinners next uh search engines like",
    "start": "328039",
    "end": "334479"
  },
  {
    "text": "Google cannot know what's on the page because the Crawlers typically read strings like HTML and your spa won't",
    "start": "334479",
    "end": "340240"
  },
  {
    "text": "show up in the Google search results unless it's optimized in certain ways they also need JavaScript to",
    "start": "340240",
    "end": "346440"
  },
  {
    "text": "function and therefore they cannot be progressively enhanced and they also run poorly on devices with a lower",
    "start": "346440",
    "end": "352000"
  },
  {
    "text": "processing power and finally they cannot hide information from the client because the",
    "start": "352000",
    "end": "357520"
  },
  {
    "text": "data only exists there meaning such as as AP if you're going to have API Keys you need to store them somewhere else",
    "start": "357520",
    "end": "363240"
  },
  {
    "text": "like a backend or a serverless function so the key difference between a spa and an MPA in a spa everything Lads",
    "start": "363240",
    "end": "370560"
  },
  {
    "text": "initially and only data in Json format is requested for making updates whereas in an MPA the entire page reloads per",
    "start": "370560",
    "end": "379599"
  },
  {
    "text": "request this bring access to SSR which combines the advantages of an NPA and an",
    "start": "388160",
    "end": "393800"
  },
  {
    "text": "sbaa so instead of generating the entire application on the client from the JavaScript bundle server side rendering",
    "start": "393800",
    "end": "399960"
  },
  {
    "text": "means that you pre-render the initial plages on the server and then send them on demand and this lets the user go to a",
    "start": "399960",
    "end": "406599"
  },
  {
    "text": "URL and instantly see a fully formed page with components and they can start reading the content immediately without",
    "start": "406599",
    "end": "412919"
  },
  {
    "text": "waiting for react to build the page and then the JavaScript required to interact with the page is sent alongside the HTML",
    "start": "412919",
    "end": "420680"
  },
  {
    "text": "and in relation to SSR we also have something called Static site generation or SSG which lets us pre-render pages in",
    "start": "420680",
    "end": "426960"
  },
  {
    "text": "The build process of the app and then upload them to a storage bucket so the result of SSG is the same as with a",
    "start": "426960",
    "end": "433759"
  },
  {
    "text": "quick and simple static website rendering but now you can generate the pages from for example react",
    "start": "433759",
    "end": "438879"
  },
  {
    "text": "code a problem with SSG is that the build time scales literally with a number of pages meaning if you have a",
    "start": "438879",
    "end": "444599"
  },
  {
    "text": "lot of pages you could be waiting a long time for your app to build and you have to rebuild and redeploy the site",
    "start": "444599",
    "end": "450479"
  },
  {
    "text": "whenever the data changes server side rendering is implemented in the so-called meta",
    "start": "450479",
    "end": "456319"
  },
  {
    "text": "Frameworks which are Frameworks around other JavaScript Frameworks such as remix and NEX for react spel kit for",
    "start": "456319",
    "end": "462560"
  },
  {
    "text": "spelt and N for View and these Frameworks are full stack implementations of a web app meaning",
    "start": "462560",
    "end": "468039"
  },
  {
    "text": "they have their own server with things happening they support both SSR and SSG",
    "start": "468039",
    "end": "474039"
  },
  {
    "text": "and can decide when to use what so for example an app has a couple of pages which of one of them it has data that is",
    "start": "474039",
    "end": "480360"
  },
  {
    "text": "changing in the build process all the static pages are rendered and then when the user opens the app only the page",
    "start": "480360",
    "end": "486639"
  },
  {
    "text": "that has Dynamic data will be requested uh at or rendered at request time and these meta Frameworks also",
    "start": "486639",
    "end": "493400"
  },
  {
    "text": "typically include things such as file-based routing apis to handle data fetching on the server caching",
    "start": "493400",
    "end": "498479"
  },
  {
    "text": "capabilities and image optimization features so let's get back to that",
    "start": "498479",
    "end": "504159"
  },
  {
    "text": "JavaScript that is sent along with the pre-rendered pages in SSR we still need JavaScript to run on the client to",
    "start": "504159",
    "end": "510520"
  },
  {
    "text": "handle any interactivity so instead of conjuring all the dumb nodes from scratch the framework like react will",
    "start": "510520",
    "end": "517080"
  },
  {
    "text": "adopt the existing HTML and this process is known as hydration so the framework will attach",
    "start": "517080",
    "end": "523560"
  },
  {
    "text": "the event handlers and for example fire effects and add State and afterwards the page is fully",
    "start": "523560",
    "end": "529320"
  },
  {
    "text": "interactive however it essentially has to rebuild the entire tree and then compare with the existing one to know",
    "start": "529320",
    "end": "535040"
  },
  {
    "text": "what to hydrate so this quote by react cord team them uh Team Member Dan abov explains it",
    "start": "535040",
    "end": "541959"
  },
  {
    "text": "well hydration is like watering the dry HTML with a water of interactivity and event",
    "start": "541959",
    "end": "548519"
  },
  {
    "text": "handlers so there you have SSR in a nutshell done by modern Frameworks like nextjs it lets you load the initial page",
    "start": "548519",
    "end": "555519"
  },
  {
    "text": "quickly yet still have an interactive",
    "start": "555519",
    "end": "559680"
  },
  {
    "text": "Spa now this sounds great however SSR isn't perfect first after the initial",
    "start": "568360",
    "end": "573920"
  },
  {
    "text": "fetch of the HTML the browser will download the JS code pars it and then execute it and this causes the",
    "start": "573920",
    "end": "579320"
  },
  {
    "text": "pre-rendered HTML to look fully interactive but in fact it doesn't contain any JavaScript yet so the user",
    "start": "579320",
    "end": "585279"
  },
  {
    "text": "is stuck in a place often reference as uncanny valley where there will click a button but nothing happens and the time",
    "start": "585279",
    "end": "591560"
  },
  {
    "text": "until they can interact with the page might even be longer than it would have what it would have been for a plain Spa",
    "start": "591560",
    "end": "596600"
  },
  {
    "text": "version of the app so why does the happen first you have to fetch everything before you can",
    "start": "596600",
    "end": "602959"
  },
  {
    "text": "show anything all the HTML with the data fetched must be processed on the server",
    "start": "602959",
    "end": "608000"
  },
  {
    "text": "before it can be sent to the client second you have to load everything before you can hydrate everything that's",
    "start": "608000",
    "end": "614360"
  },
  {
    "text": "because react needs to match the tree in the browser with the one from the server third you have to hydrate everything",
    "start": "614360",
    "end": "620720"
  },
  {
    "text": "before you can interact with anything react will start the hydration and then won't stop until it's",
    "start": "620720",
    "end": "627000"
  },
  {
    "text": "done so there are many techniques being used utilized in different Frameworks to solve the hydration problem partial",
    "start": "627000",
    "end": "633399"
  },
  {
    "text": "hydration can be used to define that only certain components need to have Js attached to them for example in Astro",
    "start": "633399",
    "end": "639839"
  },
  {
    "text": "you can Define which components to hydrate with a directive client load and you will also see this in react Ser",
    "start": "639839",
    "end": "645920"
  },
  {
    "text": "components later with Progressive hydration you can lazily load components",
    "start": "645920",
    "end": "651040"
  },
  {
    "text": "JavaScript for example with uh asro client visible or with react",
    "start": "651040",
    "end": "656160"
  },
  {
    "text": "suspense selective hydration will let you prioritize which component to make interactive first based on user",
    "start": "656160",
    "end": "662279"
  },
  {
    "text": "interaction and this is also possible to do with suspense and there are a bunch of other",
    "start": "662279",
    "end": "667440"
  },
  {
    "text": "uh techniques being implemented in other framework such as with resum ability in quick let's also mention the concept of",
    "start": "667440",
    "end": "674600"
  },
  {
    "text": "streaming it's a part of the fetch API of es6 and it's available in react 18 and a big part of react server",
    "start": "674600",
    "end": "680600"
  },
  {
    "text": "components performance so streaming allows you to break down our request into smaller chunks and then",
    "start": "680600",
    "end": "685639"
  },
  {
    "text": "progressively send those chunks from the server to the client and render each chunk as it's streamed in and we can use",
    "start": "685639",
    "end": "692320"
  },
  {
    "text": "it to send components down to the client as soon as they've been generated so finally with all that",
    "start": "692320",
    "end": "698720"
  },
  {
    "text": "knowledge we can move to react components and how they solve the problems that we saw earlier what if we",
    "start": "698720",
    "end": "704360"
  },
  {
    "text": "could decide when we needed the behavior of an spa or an MP MPA all in the same stack and I'm going to be using some",
    "start": "704360",
    "end": "711040"
  },
  {
    "text": "simplified examples of code from the de demo app coming up later here in this section so what are they react Ser",
    "start": "711040",
    "end": "718839"
  },
  {
    "text": "components are components that run exclusively on the server server components never re render they run once",
    "start": "718839",
    "end": "724800"
  },
  {
    "text": "on the server to generate the UI and their JavaScript is never sent to the client and when I say rendered on the",
    "start": "724800",
    "end": "731480"
  },
  {
    "text": "server I mean the server that is part of the full stack framework such as nexts or during the build process of the app",
    "start": "731480",
    "end": "738160"
  },
  {
    "text": "not some. net rest API so this is the front end's on backend which in many",
    "start": "738160",
    "end": "743320"
  },
  {
    "text": "cases eliminate the need for writing a rest API and server components differ from",
    "start": "743320",
    "end": "749560"
  },
  {
    "text": "server side rendering because they are never hydrated meaning the resulting app is partially hydrated hydration to non",
    "start": "749560",
    "end": "757160"
  },
  {
    "text": "RC components can then happen concurrently while RC's are streaming in since the compute load is shared between",
    "start": "757160",
    "end": "762639"
  },
  {
    "text": "the client and the server and since RCS are run exclusively on the server we can write database",
    "start": "762639",
    "end": "769079"
  },
  {
    "text": "queries right inside our components so here's an example of simple server component called jokes list I can create",
    "start": "769079",
    "end": "775760"
  },
  {
    "text": "my database through an omm like Prisma and have the data available and component fully rendered before it sent",
    "start": "775760",
    "end": "781440"
  },
  {
    "text": "to the client server components also introduce async components which is basically an",
    "start": "781440",
    "end": "786600"
  },
  {
    "text": "async function that can asynchronously fetch data on the server without causing any issues for the client side and you",
    "start": "786600",
    "end": "793399"
  },
  {
    "text": "can do any kind of data fetching in here such as calling your",
    "start": "793399",
    "end": "798040"
  },
  {
    "text": "API because react Ser components only render on the server this means that a big chunk of react a API is now",
    "start": "806440",
    "end": "813320"
  },
  {
    "text": "incompatible with them for example we can't use State because State can change but server components can't reender and",
    "start": "813320",
    "end": "820440"
  },
  {
    "text": "we can use effects because effects only run after the render on the client and server components never make it to the",
    "start": "820440",
    "end": "826399"
  },
  {
    "text": "client we also can't use any brows any browser specific API such as um window",
    "start": "826399",
    "end": "831759"
  },
  {
    "text": "know location because it doesn't exist there on the server and we can't use on click or on change because that requires",
    "start": "831759",
    "end": "837800"
  },
  {
    "text": "client side JavaScript so server components themselves are simple but the react server component",
    "start": "837800",
    "end": "843839"
  },
  {
    "text": "world is more complex we still want to have interactive components that include State and effect and event",
    "start": "843839",
    "end": "850360"
  },
  {
    "text": "handlers so because of this distinction there are now two types of react components server components and client",
    "start": "850360",
    "end": "856720"
  },
  {
    "text": "components and client components are the normal react components that you're uh used to that you can do whatever you",
    "start": "856720",
    "end": "862279"
  },
  {
    "text": "want to inside note that they are still pre-rendered on the server during the build and hydrated such as with the",
    "start": "862279",
    "end": "869120"
  },
  {
    "text": "pre-existing SSR however client components must be marked with use client that allows us to",
    "start": "869120",
    "end": "876399"
  },
  {
    "text": "use things like State and effects and on click as normal so here's an explanation from the",
    "start": "876399",
    "end": "882920"
  },
  {
    "text": "nextjs app router docs on the limitations in server and client components if you need to fetch data",
    "start": "882920",
    "end": "888920"
  },
  {
    "text": "access backend resources keep sensitive information on the server or keep large dependencies on the server use a server",
    "start": "888920",
    "end": "894560"
  },
  {
    "text": "component if you need to add interactivity like onclick or onchange or use state or or effects or use",
    "start": "894560",
    "end": "900560"
  },
  {
    "text": "browser only apis use a client component so how do react server",
    "start": "900560",
    "end": "906560"
  },
  {
    "text": "components work what happens is that react renders uh surf components into a special format called the RC payload so",
    "start": "906560",
    "end": "914440"
  },
  {
    "text": "this is a streamable format that represents the Dom like a serializable uh serialized version of a react",
    "start": "914440",
    "end": "921000"
  },
  {
    "text": "tree and the RC payload contains the rendered server components with holes of references to client components and the",
    "start": "921000",
    "end": "928000"
  },
  {
    "text": "props they pass down to them so it is used both on the um both on in",
    "start": "928000",
    "end": "933959"
  },
  {
    "text": "the build to generate the pre-rendered HTML excuse me it's used both to generate the Prem HTML on the server and",
    "start": "933959",
    "end": "939480"
  },
  {
    "text": "then to update the Dom on the client without a need for JavaScript so here's what it looks like",
    "start": "939480",
    "end": "945639"
  },
  {
    "text": "in the console we have the initial service had rendered HTML of the",
    "start": "945639",
    "end": "950839"
  },
  {
    "text": "page as well as the RC payloads which is identifiable by theore RC",
    "start": "950839",
    "end": "956839"
  },
  {
    "text": "name and multiple clients side JS bundles so these are all used together to build the interactive",
    "start": "956839",
    "end": "963360"
  },
  {
    "text": "page and since this jokes list component is defined as server only it doesn't",
    "start": "963360",
    "end": "968399"
  },
  {
    "text": "need to be hydrated at all and its JavaScript is never shipped to the client and as with everything it's quite",
    "start": "968399",
    "end": "974720"
  },
  {
    "text": "complex when we start digging so uh let's just leave at that for now when an RC needs to be rendered due",
    "start": "974720",
    "end": "982040"
  },
  {
    "text": "to a data change it refreshes on the server and seamlessly merges into the existing Dom without a hard to refresh",
    "start": "982040",
    "end": "989079"
  },
  {
    "text": "updating only the parts that have changed so as a result the client State can be preserved even as parts of the",
    "start": "989079",
    "end": "995600"
  },
  {
    "text": "view are updated from the server and this is possible because the RC pain load contains references to client",
    "start": "995600",
    "end": "1001720"
  },
  {
    "text": "components and can leave them untouched what are the benefits of using react server",
    "start": "1001720",
    "end": "1008399"
  },
  {
    "text": "components firstly data fetching data fetching can happen in components before they are sent to the client and will be",
    "start": "1008399",
    "end": "1014880"
  },
  {
    "text": "faster since the call of or uh they can call the API or database in proximity to",
    "start": "1014880",
    "end": "1020160"
  },
  {
    "text": "the resource and in s RC's you have access to all your backend",
    "start": "1020160",
    "end": "1025199"
  },
  {
    "text": "resources next they can ensure security by keeping sensitive data and logic like API Keys uh on the server and never risk",
    "start": "1025199",
    "end": "1032079"
  },
  {
    "text": "exposing them then caching by rendering on the server the result can be cached and",
    "start": "1032079",
    "end": "1038240"
  },
  {
    "text": "reused on subsequent requests and across users and bundle size server components",
    "start": "1038240",
    "end": "1044120"
  },
  {
    "text": "allow you to keep large dependencies on the server meaning you can exclude all that JS for the components from the",
    "start": "1044120",
    "end": "1049600"
  },
  {
    "text": "bundle without restricting your use of them for example a common Library like low Dash which overall will lead to a",
    "start": "1049600",
    "end": "1056360"
  },
  {
    "text": "more performing application server components can furthermore be streamed meaning they can",
    "start": "1056360",
    "end": "1061840"
  },
  {
    "text": "be sent in chunks and viewed as they become ready therefore they integrate naturally with react 18",
    "start": "1061840",
    "end": "1068120"
  },
  {
    "text": "suspense and finally developer experience there's a lot less hassle on the client with the effects and keeping",
    "start": "1068120",
    "end": "1074039"
  },
  {
    "text": "data in the state just fetch it Asing off the client RSC however comes with some",
    "start": "1074039",
    "end": "1081600"
  },
  {
    "text": "drawbacks firstly they require a framework in practice you will only be using them in meta Frameworks like",
    "start": "1081600",
    "end": "1087640"
  },
  {
    "text": "nextjs due to their need for a certain bundler and router setup you become",
    "start": "1087640",
    "end": "1092679"
  },
  {
    "text": "bound to the framework's way of doing things second they create create an",
    "start": "1092679",
    "end": "1098280"
  },
  {
    "text": "increased complexity so as a web developer you now need to understand a lot more Concepts than before when you",
    "start": "1098280",
    "end": "1103880"
  },
  {
    "text": "were just making a spa with create react app such as what you can and can't do on the Sur",
    "start": "1103880",
    "end": "1110760"
  },
  {
    "text": "next it can be hard to onboard new developers because the learning curve is a lot steeper to uh when you're aiming",
    "start": "1110799",
    "end": "1115960"
  },
  {
    "text": "to write quality apps and finally it's still relatively new and not everything has been figured",
    "start": "1115960",
    "end": "1121159"
  },
  {
    "text": "out such as testing and compatibility with other libraries for example many CSS in JS libraries like emotion and sty",
    "start": "1121159",
    "end": "1128520"
  },
  {
    "text": "components do not work with RC's so for that you need to use Alternatives like linaria Panda CSS or material UI pigment",
    "start": "1128520",
    "end": "1136039"
  },
  {
    "text": "CSS there have also been a lot of bugs since the app router was marked as stable but it seems to finally be",
    "start": "1136039",
    "end": "1141559"
  },
  {
    "text": "settling down now so how can you get started with rsc's the most reasonable way right now",
    "start": "1141559",
    "end": "1148720"
  },
  {
    "text": "is with the nextjs app router available from version 13.4 and onwards so nextjs",
    "start": "1148720",
    "end": "1155039"
  },
  {
    "text": "is made by versel and is Battle tested and Enterprise ready react server components are actually a part of react",
    "start": "1155039",
    "end": "1161400"
  },
  {
    "text": "19 uh but developed closely with versel and nextjs which is good for bu building apps with them because everything is",
    "start": "1161400",
    "end": "1168120"
  },
  {
    "text": "optimized and working smoothly and the entire react ecosystem follows to make an xjs 14 app run this",
    "start": "1168120",
    "end": "1175840"
  },
  {
    "text": "MPX create command and define whether you want a typescript and tailwind and such and you will need the app router",
    "start": "1175840",
    "end": "1181679"
  },
  {
    "text": "option set to yes to use RC's that will generate the boiler plate",
    "start": "1181679",
    "end": "1187080"
  },
  {
    "text": "for you and you can start using them so there's not a lot of files to confuse you here it's mostly standard files such",
    "start": "1187080",
    "end": "1192919"
  },
  {
    "text": "as package Json TS config and some config for tailwind and Es so what matters here is everything",
    "start": "1192919",
    "end": "1199480"
  },
  {
    "text": "inside the app directory in the app router you will be coding server first meaning everything you do is a server",
    "start": "1199480",
    "end": "1206039"
  },
  {
    "text": "component unless specified otherwise which means here that the layout and the page file are server components by",
    "start": "1206039",
    "end": "1214320"
  },
  {
    "text": "default in the app router you define routes by making folders containing a page. TSX that makes a valid route and I",
    "start": "1221799",
    "end": "1230280"
  },
  {
    "text": "have some routes here / jokes and then a SL new and/ joke ID sub route which is a",
    "start": "1230280",
    "end": "1235919"
  },
  {
    "text": "dynamic route because it is parameterized and then you can use files with reserved names such as not found.",
    "start": "1235919",
    "end": "1242919"
  },
  {
    "text": "TSX error TSX which are air boundaries that will render inside the layout of the route as well as loading TSX which",
    "start": "1242919",
    "end": "1249880"
  },
  {
    "text": "create a creates a suspense boundary around the page and all of these can be graned so you can add them to the rout",
    "start": "1249880",
    "end": "1256400"
  },
  {
    "text": "or to sub routes or wherever you want and there are also more features like ignoring folder from routes with",
    "start": "1256400",
    "end": "1261760"
  },
  {
    "text": "underscore or grouping them with parenthesis you can also Define API routes here like in the pages router and",
    "start": "1261760",
    "end": "1268960"
  },
  {
    "text": "the route. TS file is a reserve name and will allow you to create API",
    "start": "1268960",
    "end": "1274000"
  },
  {
    "text": "endpoints then there is support for SEO with for example metat tags so they can be added to any page or layout and can",
    "start": "1274000",
    "end": "1280919"
  },
  {
    "text": "also be generated dynamically uh for example using the r",
    "start": "1280919",
    "end": "1285720"
  },
  {
    "text": "prams with nextjs comes a lot of optimization such as caching all pages",
    "start": "1286120",
    "end": "1291320"
  },
  {
    "text": "generated in the build uh are cach on vers lcdn if you host it there and they will optimize your images if you use the",
    "start": "1291320",
    "end": "1298120"
  },
  {
    "text": "image tag and will do things like preload your pages when a user hovers a link and it has built-in font",
    "start": "1298120",
    "end": "1305720"
  },
  {
    "text": "optimization so how do you use react server components in xgs the right way what are the best practices and",
    "start": "1305720",
    "end": "1312039"
  },
  {
    "text": "development patterns to get the most out of them the best practice is going to be to",
    "start": "1312039",
    "end": "1317440"
  },
  {
    "text": "move your client code to the leaves of the component Tree in this way you ensure you do not ship any asnecessary",
    "start": "1317440",
    "end": "1323720"
  },
  {
    "text": "JavaScript to the client and then will react will hydrate only these client leaves as we know as partial",
    "start": "1323720",
    "end": "1330480"
  },
  {
    "text": "hydration you could in theory just put use client on your route and then code however you want but that means all your",
    "start": "1330480",
    "end": "1336400"
  },
  {
    "text": "components will have their their JS chipped and be hydrated which just takes us back to standard service",
    "start": "1336400",
    "end": "1342559"
  },
  {
    "text": "rendering but don't be afraid of afraid of using client components it's normal to have bigger client uh component",
    "start": "1342559",
    "end": "1349000"
  },
  {
    "text": "sections because there are sections that are going to be very interactive to use a client component in",
    "start": "1349000",
    "end": "1356200"
  },
  {
    "text": "a sering component you simply import it so here the delete functionality has been extracted to a component with used",
    "start": "1356200",
    "end": "1362840"
  },
  {
    "text": "client because it needs an onclick event handler however when going the other way",
    "start": "1362840",
    "end": "1368880"
  },
  {
    "text": "around you cannot do the same without turning the server component into a client",
    "start": "1368880",
    "end": "1374240"
  },
  {
    "text": "component instead you need to slot them as props and they will fit as separate chunks into the client tree so the",
    "start": "1374240",
    "end": "1381559"
  },
  {
    "text": "client component here does not know what is being passed down and this can be referred to as the donut",
    "start": "1381559",
    "end": "1388600"
  },
  {
    "text": "pattern so this means that our tree can look like anything we want and we can add client side logic in the parent",
    "start": "1397279",
    "end": "1403679"
  },
  {
    "text": "components as well so in this graph only the green components are hydrated contain JS and the rest is just uh",
    "start": "1403679",
    "end": "1412720"
  },
  {
    "text": "HTML with this pattern we can furthermore Implement things like State Management by providing a wrapper client",
    "start": "1412720",
    "end": "1419159"
  },
  {
    "text": "component with state for example using react context which only works on client side we can use this state in the leaves",
    "start": "1419159",
    "end": "1425760"
  },
  {
    "text": "without converting the server components in between when combined this allows us to",
    "start": "1425760",
    "end": "1431480"
  },
  {
    "text": "make apps that are extremely performant due to their large amount of nonhydrated content while still being fully",
    "start": "1431480",
    "end": "1437320"
  },
  {
    "text": "Interactive you could have a donut pattern collapsible sidebar think to provider uh search and buttons on the",
    "start": "1437320",
    "end": "1443880"
  },
  {
    "text": "client side and then you can share your state between your components however you",
    "start": "1443880",
    "end": "1448960"
  },
  {
    "text": "want when building an RC componentry there will be some limitations between the client and the server components so",
    "start": "1448960",
    "end": "1456279"
  },
  {
    "text": "for example since the client component exists on the client and server component on the server props need to be",
    "start": "1456279",
    "end": "1461799"
  },
  {
    "text": "serial serializable so that means that we cannot pass functions through the server",
    "start": "1461799",
    "end": "1466960"
  },
  {
    "text": "boundary instead we must create API endpoints to communicate between them when we can't",
    "start": "1466960",
    "end": "1473279"
  },
  {
    "text": "use props or react uh 19's server actions which I'm going to talk about",
    "start": "1473279",
    "end": "1478480"
  },
  {
    "text": "also later so how do we manage uh data with RC and the app",
    "start": "1478480",
    "end": "1485440"
  },
  {
    "text": "router I already showed you showed you that you can make database queries through an omm like Prisma and you can",
    "start": "1485440",
    "end": "1490960"
  },
  {
    "text": "of course also use the fetch API and there are a bunch of parameters you can add here such as cach duration tags for",
    "start": "1490960",
    "end": "1496559"
  },
  {
    "text": "re revalidating the data and more and here's an example showing you what you could potentially do for example",
    "start": "1496559",
    "end": "1502480"
  },
  {
    "text": "getting a cookie and making an authenticated request to an",
    "start": "1502480",
    "end": "1507000"
  },
  {
    "text": "API uh yes so if you use the same data in multiple components in a tree you do",
    "start": "1516039",
    "end": "1521799"
  },
  {
    "text": "not have to fetch it in the root and then pass it down you can fetch it in each component where it's required",
    "start": "1521799",
    "end": "1527080"
  },
  {
    "text": "because it's automatically D duped uh or you can compare like to man memorization",
    "start": "1527080",
    "end": "1533000"
  },
  {
    "text": "almost and you can compare this pattern to react query where you will call your hooks wherever they are needed and they",
    "start": "1533000",
    "end": "1538200"
  },
  {
    "text": "will all call the same cache data plus you can pass down to a client component when you need it for example",
    "start": "1538200",
    "end": "1544919"
  },
  {
    "text": "like the options of an aut complete component what about data mutation so I",
    "start": "1544919",
    "end": "1550919"
  },
  {
    "text": "mentioned that you can create API and points like in the pages router but let's skip that for now and look at something way better called server",
    "start": "1550919",
    "end": "1557120"
  },
  {
    "text": "actions so server actions just became stable with the release of next1 14 and",
    "start": "1557120",
    "end": "1562320"
  },
  {
    "text": "they are the preferred way to mutate data they kind of complete the whole react server component",
    "start": "1562320",
    "end": "1568440"
  },
  {
    "text": "story it's simple you mark a function or file with us server and the nextjs will",
    "start": "1568440",
    "end": "1573640"
  },
  {
    "text": "make a hidden API endpoint for you allowing you to call it from anywhere like from a client",
    "start": "1573640",
    "end": "1579039"
  },
  {
    "text": "component which solves the problem of passing functions between the server and the client and in addition it will give",
    "start": "1579039",
    "end": "1585200"
  },
  {
    "text": "you type safety uh between the server and and the client using our PC so here I have a file marked with use",
    "start": "1585200",
    "end": "1593080"
  },
  {
    "text": "server turning the function inside it into a server action I can now call this",
    "start": "1593080",
    "end": "1598240"
  },
  {
    "text": "from for example a client component and that's all I need to do however I also need to tell n that I have changed",
    "start": "1598240",
    "end": "1605000"
  },
  {
    "text": "something inside the data uh in the re server component and it needs to purge the cache and revalidate the view and",
    "start": "1605000",
    "end": "1611440"
  },
  {
    "text": "fetch new data from the database so I'm going to call revalidate path with the route",
    "start": "1611440",
    "end": "1618440"
  },
  {
    "text": "looking at our data management graph the server action seamlessly takes us back from the client and the server",
    "start": "1618440",
    "end": "1626039"
  },
  {
    "text": "again server actions also integrate nicely with form submissions so here I have a form and a function marked with",
    "start": "1626440",
    "end": "1632960"
  },
  {
    "text": "us server and when submitting the form the action uh with the action property",
    "start": "1632960",
    "end": "1638039"
  },
  {
    "text": "it can without JavaScript call the server action and add a joke to the database and again I have to tell nextjs",
    "start": "1638039",
    "end": "1644360"
  },
  {
    "text": "to revalidate my view and there's so many possibilities here and it's extremely efficient to",
    "start": "1644360",
    "end": "1649480"
  },
  {
    "text": "develop with so here's an example of something I have made for my current consultancy",
    "start": "1649480",
    "end": "1655240"
  },
  {
    "text": "project where we use RC in this example there's a client component collapsible container server component uh fetching",
    "start": "1655240",
    "end": "1662559"
  },
  {
    "text": "data mapping to server component messages then an interactive client component input field submitting with",
    "start": "1662559",
    "end": "1668080"
  },
  {
    "text": "server actions and finally a client component wrap around the messages to handle the automatic",
    "start": "1668080",
    "end": "1673519"
  },
  {
    "text": "scrolling so by weaving the server and the client together like this everything that does does not need to be client",
    "start": "1673519",
    "end": "1679360"
  },
  {
    "text": "side will be server only so there you have it react server",
    "start": "1679360",
    "end": "1684559"
  },
  {
    "text": "components in the app router allow you to do whatever you need to do whether it's MPA functionality or interactive",
    "start": "1684559",
    "end": "1690039"
  },
  {
    "text": "Spa stuff and include SSR or SEO or any kind of functionality you need all in the same stack so that's quite amazing",
    "start": "1690039",
    "end": "1698279"
  },
  {
    "text": "and hopefully you remember some of these terms by now it's a lot and react server components definitely bring a a new",
    "start": "1698279",
    "end": "1704720"
  },
  {
    "text": "mental model and architecture so let's get into a demo of this joke",
    "start": "1704720",
    "end": "1710640"
  },
  {
    "text": "app it's a remake of a tutorial app from the remix docs and but of course it's",
    "start": "1710640",
    "end": "1716080"
  },
  {
    "text": "very different because I'm going to be using RC and tailwind and server actions and it's also containing very simple",
    "start": "1716080",
    "end": "1722240"
  },
  {
    "text": "implementations to not clog the code with",
    "start": "1722240",
    "end": "1726480"
  },
  {
    "text": "complexity so uh my setup here is the nextjs app router uses Tailwind um and",
    "start": "1730000",
    "end": "1735760"
  },
  {
    "text": "Prisma as an orm and it's using also and Azure SQL database um so let's have a look at what",
    "start": "1735760",
    "end": "1742440"
  },
  {
    "text": "it does uh yeah so there's a button here to get a random joke there's a list with",
    "start": "1742440",
    "end": "1751279"
  },
  {
    "text": "jokes I'm y there we go uh and uh there's a button to add your own",
    "start": "1751279",
    "end": "1757519"
  },
  {
    "text": "joke and I can say uh for example arrays why was the developer unhappy",
    "start": "1757519",
    "end": "1763519"
  },
  {
    "text": "with their job they wanted arrays so let's add this one",
    "start": "1763519",
    "end": "1769960"
  },
  {
    "text": "um so now it's added and we can also delete this joke",
    "start": "1770760",
    "end": "1775840"
  },
  {
    "text": "so I'm just going to delete that and that's pretty much it for this simple app so let's head over to the",
    "start": "1775840",
    "end": "1782640"
  },
  {
    "text": "code and look at that so I'm just going to my uh local",
    "start": "1782640",
    "end": "1789360"
  },
  {
    "text": "version here um and this is now the nextjs app",
    "start": "1789360",
    "end": "1794760"
  },
  {
    "text": "router you recognize this from the slides earlier there's some validation stuff for my uh schemas Prisma for",
    "start": "1794760",
    "end": "1801480"
  },
  {
    "text": "database I have a lib data access layer here with actions and services for fetching and mutating data components",
    "start": "1801480",
    "end": "1809039"
  },
  {
    "text": "and UI components then there's the app router and the jokes um uh route",
    "start": "1809039",
    "end": "1817399"
  },
  {
    "text": "here so there's a layout for this and this is now a server component because",
    "start": "1817399",
    "end": "1822519"
  },
  {
    "text": "there's no Ed client here and there's a header footer and this is all service",
    "start": "1822519",
    "end": "1828120"
  },
  {
    "text": "side we don't need any client side um code for this then there is a",
    "start": "1828120",
    "end": "1834080"
  },
  {
    "text": "sidebar which contains a random joke button which is this one so this button",
    "start": "1834080",
    "end": "1839360"
  },
  {
    "text": "is extracted into component because it's a client component and we're going to use the router uh API which is client",
    "start": "1839360",
    "end": "1846200"
  },
  {
    "text": "side to uh refresh the page then there is a nav button here",
    "start": "1846200",
    "end": "1853799"
  },
  {
    "text": "which is just a link that takes us to the this page",
    "start": "1853799",
    "end": "1858880"
  },
  {
    "text": "um and a jokes list component so this is the one that I showed in my slides it's an async component because it's asyn",
    "start": "1858880",
    "end": "1866320"
  },
  {
    "text": "fetching data inside the component from the database so we can do this now and then",
    "start": "1866320",
    "end": "1872480"
  },
  {
    "text": "mapping them to uh links um then there is the new joke route here",
    "start": "1872480",
    "end": "1881000"
  },
  {
    "text": "which I'm currently on um did I show this oh yeah",
    "start": "1881000",
    "end": "1888399"
  },
  {
    "text": "and this is the form so here I'm using the form component with an action property which is it's actually kind of",
    "start": "1888399",
    "end": "1894960"
  },
  {
    "text": "the old way of doing things with like um web standard stuff but it's now been enhanced by react so that we can call a",
    "start": "1894960",
    "end": "1901440"
  },
  {
    "text": "server action here so this is server action it has use server it receives a",
    "start": "1901440",
    "end": "1906880"
  },
  {
    "text": "form data object from the form and can now add this to the database uh with only that code and then",
    "start": "1906880",
    "end": "1913120"
  },
  {
    "text": "revalidate the path to regenerate the server component so that when I add something here",
    "start": "1913120",
    "end": "1918919"
  },
  {
    "text": "here it will uh re add it and revalidate the",
    "start": "1918919",
    "end": "1923960"
  },
  {
    "text": "view and then there's an add button because maybe you saw that it was like saying adding here and the reason for",
    "start": "1923960",
    "end": "1930519"
  },
  {
    "text": "that is because I'm using a client component and a react 19 hook called use",
    "start": "1930519",
    "end": "1935799"
  },
  {
    "text": "form status to say adding as the action is underway and there's a lot of react",
    "start": "1935799",
    "end": "1941279"
  },
  {
    "text": "19 hooks that I don't have time to talk about today but they work really well with react Serv components to give you",
    "start": "1941279",
    "end": "1948399"
  },
  {
    "text": "uh feedback on the client side uh let's also look at the joke",
    "start": "1948399",
    "end": "1955080"
  },
  {
    "text": "route which is now this one and inside here I'm generating some",
    "start": "1955080",
    "end": "1960480"
  },
  {
    "text": "Dynamic uh metadata metadata and then asy getting a joke here based on the rep",
    "start": "1960480",
    "end": "1967600"
  },
  {
    "text": "Rams which is the one I'm here on here excuse",
    "start": "1967600",
    "end": "1973279"
  },
  {
    "text": "me here based on the ID uh and then uh displaying it and also showing a delete",
    "start": "1973279",
    "end": "1980320"
  },
  {
    "text": "joke button so this is now also a client component the reason for that is because",
    "start": "1980320",
    "end": "1985960"
  },
  {
    "text": "I want to use the onclick property which is available only on the client side to delete a joke and I'm using a start uh transition",
    "start": "1985960",
    "end": "1994080"
  },
  {
    "text": "here which is a react 19 18 feature now possible to use with asnc functions in",
    "start": "1994080",
    "end": "1999320"
  },
  {
    "text": "react 19 to delete a joke and get the pending state of this action so that I",
    "start": "1999320",
    "end": "2005080"
  },
  {
    "text": "can see that it's deleting uh I think that's it but I also have",
    "start": "2005080",
    "end": "2012200"
  },
  {
    "text": "made some demo routes here so that I can talk some more about the concepts I've",
    "start": "2012200",
    "end": "2017760"
  },
  {
    "text": "been uh explaining uh and maybe you encounter some of these problems and you can use",
    "start": "2017760",
    "end": "2022960"
  },
  {
    "text": "this in the future so uh first I've uh talked about",
    "start": "2022960",
    "end": "2028240"
  },
  {
    "text": "that you can Nest server components in client components so here I have a server component a client component and",
    "start": "2028240",
    "end": "2033639"
  },
  {
    "text": "server component again and this is now Interactive and um this is possible because I'm",
    "start": "2033639",
    "end": "2040720"
  },
  {
    "text": "nesting it as a children property so CL component is receiving children doesn't",
    "start": "2040720",
    "end": "2046480"
  },
  {
    "text": "have to know what it is it's just doing its uh stateful thing and then rendering whatever it's received so if I look",
    "start": "2046480",
    "end": "2053760"
  },
  {
    "text": "inside the console the client is printed on the client and the server is printed",
    "start": "2053760",
    "end": "2059079"
  },
  {
    "text": "on the server here there you go server uh",
    "start": "2059079",
    "end": "2065599"
  },
  {
    "text": "yeah then I also mentioned validation so I can add client State here and",
    "start": "2065599",
    "end": "2072280"
  },
  {
    "text": "revalidate my server component without losing my client State and that's possible because of uh the server",
    "start": "2072280",
    "end": "2079240"
  },
  {
    "text": "components being having references to client components then uh making state so",
    "start": "2079240",
    "end": "2087358"
  },
  {
    "text": "making for example a global state with a react context so I have a um theme context",
    "start": "2087359",
    "end": "2095079"
  },
  {
    "text": "here which is now wrapping server content then there's a server component",
    "start": "2095079",
    "end": "2100720"
  },
  {
    "text": "here a set theme component which is a client component which is using this theme provider to set some",
    "start": "2100720",
    "end": "2107320"
  },
  {
    "text": "State then a use theme component which is using the state also on the client",
    "start": "2107320",
    "end": "2112839"
  },
  {
    "text": "side and still these server components in between are not being converted into client side",
    "start": "2112839",
    "end": "2119838"
  },
  {
    "text": "code uh there's a lot you can do with forms now so you can for example",
    "start": "2120320",
    "end": "2125400"
  },
  {
    "text": "validate on the server so let's just see what it looks",
    "start": "2125400",
    "end": "2131078"
  },
  {
    "text": "like um so I'm doing uh binding to an action which is doing some service at validation and logging an error if I'm",
    "start": "2131520",
    "end": "2138240"
  },
  {
    "text": "not validate um making a Content that's long enough so it's going to now say",
    "start": "2138240",
    "end": "2143520"
  },
  {
    "text": "server error then I can also do validation on the client",
    "start": "2143520",
    "end": "2149119"
  },
  {
    "text": "side so I'm doing the same here just uh validating on this client side ensuring",
    "start": "2149119",
    "end": "2154359"
  },
  {
    "text": "a certain number of um characters and it will now give me a error on the",
    "start": "2154359",
    "end": "2160160"
  },
  {
    "text": "client side and when I combine this I can for example uh make a react hook form if I",
    "start": "2160160",
    "end": "2166720"
  },
  {
    "text": "want to do that which will have the standard client side validated react hook form",
    "start": "2166720",
    "end": "2172640"
  },
  {
    "text": "functionality um but I'm also going to validate on the server for security reasons and I'm actually requiring one",
    "start": "2172640",
    "end": "2178920"
  },
  {
    "text": "more character there so this is going to fail and now it's optimistically uh updating this and then failing because",
    "start": "2178920",
    "end": "2185720"
  },
  {
    "text": "the server didn't actually approve this add another one and now it's added and",
    "start": "2185720",
    "end": "2191319"
  },
  {
    "text": "this is now uh using an another RAC 19 hook which is really useful for making optimistic updates so check that",
    "start": "2191319",
    "end": "2197960"
  },
  {
    "text": "out finally more react 19 stuff um I'm using a new hook use action",
    "start": "2197960",
    "end": "2205480"
  },
  {
    "text": "state to allow me to get response from the server without JavaScript so now my",
    "start": "2205480",
    "end": "2211920"
  },
  {
    "text": "server is returning the validation and I can display it on uh to the user here",
    "start": "2211920",
    "end": "2217760"
  },
  {
    "text": "and when it works all is well and this now works without JavaScript because of this uh action property combined with",
    "start": "2217760",
    "end": "2224880"
  },
  {
    "text": "the use action State uh next up um we're going to be",
    "start": "2224880",
    "end": "2230760"
  },
  {
    "text": "streaming server components so you're doing something on the server you have to display something while it's",
    "start": "2230760",
    "end": "2235800"
  },
  {
    "text": "happening and you can use suspense for this so if you saw that hold on I'm going to show it again I have some",
    "start": "2235800",
    "end": "2241680"
  },
  {
    "text": "different components with timeouts that are now resolving I'm going to show you what it looks like",
    "start": "2241680",
    "end": "2249519"
  },
  {
    "text": "um so this suspense page is now slow the jokes header is slow and the slow",
    "start": "2250280",
    "end": "2256960"
  },
  {
    "text": "function Just resolves A aits A Promise by the way jokes header is slow and this",
    "start": "2256960",
    "end": "2263160"
  },
  {
    "text": "jokes component has a slow function so this could be happening and the way we",
    "start": "2263160",
    "end": "2268400"
  },
  {
    "text": "solve that is by using this suspense to uh kind of piece it into parts and display fallbacks for each of the slow",
    "start": "2268400",
    "end": "2275240"
  },
  {
    "text": "um things happening so now um I have a loading to handle this first loading",
    "start": "2275240",
    "end": "2281720"
  },
  {
    "text": "here then I have another suspense uh explicitly here and then finally one for",
    "start": "2281720",
    "end": "2287480"
  },
  {
    "text": "the jokes and while this is happening I can still click this button even though the server is giving me we're waiting",
    "start": "2287480",
    "end": "2293800"
  },
  {
    "text": "for the server here and I'm not going to show the react query but it's good to know that if you want to use uh client side fetching you",
    "start": "2293800",
    "end": "2300960"
  },
  {
    "text": "can but typically you won't need to unless you uh really want to or you're",
    "start": "2300960",
    "end": "2306040"
  },
  {
    "text": "going to be polling data so this is now ref fetching where is this ref retching",
    "start": "2306040",
    "end": "2312040"
  },
  {
    "text": "at an interval so that's useful for with requery refetch",
    "start": "2312040",
    "end": "2318200"
  },
  {
    "text": "refetch yeah and as a final one here uh you can also use server actions to for",
    "start": "2318200",
    "end": "2324760"
  },
  {
    "text": "example um respond to some on blur on change event so here I'm calling a",
    "start": "2324760",
    "end": "2330960"
  },
  {
    "text": "server action umbler to save a joke like that I think that's it for the demo",
    "start": "2330960",
    "end": "2339400"
  },
  {
    "text": "so I'm going to jump back to my sides here uh let's see if all this while",
    "start": "2340200",
    "end": "2347560"
  },
  {
    "text": "here there we",
    "start": "2347560",
    "end": "2350880"
  },
  {
    "text": "go so this is the lighthouse score of my joke app and I didn't really try very",
    "start": "2356520",
    "end": "2361720"
  },
  {
    "text": "hard to optimize this I just follow the patterns I've been mentioning and of course this is a very small app but it",
    "start": "2361720",
    "end": "2367760"
  },
  {
    "text": "still proves the point and all in all you can build very performant apps by default and the limitations of RC will",
    "start": "2367760",
    "end": "2374319"
  },
  {
    "text": "make your code better unlike in play react where you can just do whatever you want and here's also a badge for the app",
    "start": "2374319",
    "end": "2381599"
  },
  {
    "text": "when sharing a link to a joke as you can see the dynamic U metat tags creat a",
    "start": "2381599",
    "end": "2386839"
  },
  {
    "text": "badge so next I have real world experience with RC's such because I'm building a medium scale production app",
    "start": "2386839",
    "end": "2393680"
  },
  {
    "text": "with it so let me mention my requirements and my experience I'm working on a project set to last at",
    "start": "2393680",
    "end": "2399560"
  },
  {
    "text": "least one year and it's a rewrite of an existing MVC app that has a lot of technical debt so I was lucky enough to",
    "start": "2399560",
    "end": "2406599"
  },
  {
    "text": "be given the responsibility of picking the technology for the front end of this new solution and the app would would contain",
    "start": "2406599",
    "end": "2413800"
  },
  {
    "text": "interactive dashboards complex forms articles through a CMS and a lot of static data and a need for SEO it also",
    "start": "2413800",
    "end": "2421480"
  },
  {
    "text": "needs to be mobile friendly and accessible and support multiple languages so a big part of the app and",
    "start": "2421480",
    "end": "2427160"
  },
  {
    "text": "some something I made sure to proof of concept with RC before I chose next as my framework was the customers design",
    "start": "2427160",
    "end": "2433520"
  },
  {
    "text": "system component library and this app is a great case for RC because it can server render a lot of",
    "start": "2433520",
    "end": "2439760"
  },
  {
    "text": "content but still be highly interactive when it needs to be and I'm finding it to work very well so far however I have",
    "start": "2439760",
    "end": "2447640"
  },
  {
    "text": "had to do quite a lot of trial and error and research to Bill functionality that is",
    "start": "2447640",
    "end": "2453319"
  },
  {
    "text": "non-standard for example I had to create wrapper components for the customer specific component Library uh components",
    "start": "2453319",
    "end": "2461000"
  },
  {
    "text": "to use them in my project and put server components inside them I've also had to",
    "start": "2461000",
    "end": "2466079"
  },
  {
    "text": "pick my internationalization library without much guidance from nextjs and it's working very well now but uh there",
    "start": "2466079",
    "end": "2472359"
  },
  {
    "text": "were comp complexities in the beginning and finally testing RC is not covered properly anywhere and to test",
    "start": "2472359",
    "end": "2479240"
  },
  {
    "text": "ASN components uh with react testing Library there's currently a need for a",
    "start": "2479240",
    "end": "2484680"
  },
  {
    "text": "workaround but all in all it's going really well the app is performant fulfills requirements it's maintainable",
    "start": "2484680",
    "end": "2490680"
  },
  {
    "text": "enforces best practices and the developer experience is great so the nextjs app rouder with rsc's inside",
    "start": "2490680",
    "end": "2497160"
  },
  {
    "text": "provides so many tools to let me focus on building my app to finish this off what is going to",
    "start": "2497160",
    "end": "2504079"
  },
  {
    "text": "be the future of RC there's no doubt that this is the way react is going now",
    "start": "2504079",
    "end": "2510160"
  },
  {
    "text": "it's not just some hik hype cycle that will die out is the result of many years of work from the react team",
    "start": "2510160",
    "end": "2518119"
  },
  {
    "text": "for example versel is actually in the progress of migrating their own dashboard to the app router so in this",
    "start": "2518119",
    "end": "2524480"
  },
  {
    "text": "tweet the co of forel talks about the significant performance benefits they are",
    "start": "2524480",
    "end": "2530480"
  },
  {
    "text": "seeing multiple other Frameworks are also implementing RC such as just recently remix with the announcement of",
    "start": "2537680",
    "end": "2544559"
  },
  {
    "text": "react rer V7 the framework with JS and most recently Expo for mobile",
    "start": "2544559",
    "end": "2550400"
  },
  {
    "text": "development so overall big things are happening here and there are so many solutions",
    "start": "2550400",
    "end": "2556240"
  },
  {
    "text": "being proposed to improve the performance of web apps uh with the goal of finding the optimal uh balance",
    "start": "2556240",
    "end": "2562079"
  },
  {
    "text": "between ux n DX and this is react take nonetheless there are still a lot of",
    "start": "2562079",
    "end": "2567400"
  },
  {
    "text": "things to be figured out as react server components are battle tested so here's the repo for the joke",
    "start": "2567400",
    "end": "2575000"
  },
  {
    "text": "app uh everything is there um as well as the reference demo",
    "start": "2575000",
    "end": "2580760"
  },
  {
    "text": "pages and here's also some more resources that I used during my RSC learning experience um so the react docs",
    "start": "2582359",
    "end": "2589800"
  },
  {
    "text": "are very good focusing more on um the details of server actions uh server",
    "start": "2589800",
    "end": "2595280"
  },
  {
    "text": "components and the new hooks the next share stocks also they contain a lot of things and you need to know about",
    "start": "2595280",
    "end": "2600760"
  },
  {
    "text": "caching there it's going to it's going to be in those docs and they have a bunch of template",
    "start": "2600760",
    "end": "2605839"
  },
  {
    "text": "apps uh and they also have a newly released free course called learn nextjs",
    "start": "2605839",
    "end": "2611160"
  },
  {
    "text": "where you will build a dashboard app from scratch and deployed to verell for YouTube bat does a lot of",
    "start": "2611160",
    "end": "2617839"
  },
  {
    "text": "thorough RC content and cod with Antonio build some incredible clones of apps like twitch and Miro with full code",
    "start": "2617839",
    "end": "2625920"
  },
  {
    "text": "alongs on YouTube he recently made the corresponding code paid unfortunately",
    "start": "2625920",
    "end": "2631599"
  },
  {
    "text": "but the videos are still good for learning about the patterns that he's using in these clones so I recommend",
    "start": "2631599",
    "end": "2636800"
  },
  {
    "text": "these channels and in addition I do have real world experience as mentioned so I",
    "start": "2636800",
    "end": "2642200"
  },
  {
    "text": "felt the struggles and the wins I don't have time to talk about it more but um you can chat me with me later about that",
    "start": "2642200",
    "end": "2648760"
  },
  {
    "text": "if you have something that you're experiencing so thank you for listening I hope you're as excited as I am and",
    "start": "2648760",
    "end": "2655000"
  },
  {
    "text": "ready to try this this is my social media links and you can contact me on Twitter and I have a Blog with multiple",
    "start": "2655000",
    "end": "2661079"
  },
  {
    "text": "posts about RC and the new react 19 hooks like for building a reusable submit button testing inting Ser server",
    "start": "2661079",
    "end": "2668119"
  },
  {
    "text": "actions with reactor form and more so thank",
    "start": "2668119",
    "end": "2672920"
  },
  {
    "text": "you do you have any questions okay I'm turned off",
    "start": "2678319",
    "end": "2683400"
  },
  {
    "text": "now okay questions if I'm going to be able to see anything",
    "start": "2683400",
    "end": "2688720"
  },
  {
    "text": "here I guess we can do it just come down if you have a question I guess thank",
    "start": "2688720",
    "end": "2695800"
  },
  {
    "text": "you e",
    "start": "2696040",
    "end": "2700040"
  }
]