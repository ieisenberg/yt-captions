[
  {
    "text": "good morning everyone how's everyone doing good all right yes",
    "start": "2040",
    "end": "8820"
  },
  {
    "text": "um my name is Jamie um I hail from Detroit Michigan in the states and",
    "start": "8820",
    "end": "15420"
  },
  {
    "text": "um I'm running on about three hours of sleep over the last 30 minutes",
    "start": "15420",
    "end": "21960"
  },
  {
    "text": "um and it's entirely um my fault I had a layover in uh Paris and I put my",
    "start": "21960",
    "end": "29279"
  },
  {
    "text": "passport in my bag got to customs I was like oh I'm gonna make this because my flight's leaving",
    "start": "29279",
    "end": "35820"
  },
  {
    "text": "Detroit was late I only had an hour layover in Paris and I get up to customs and I was like",
    "start": "35820",
    "end": "42540"
  },
  {
    "text": "oh I got my passport and I pulled out my field notes 48-page memo book which",
    "start": "42540",
    "end": "49320"
  },
  {
    "text": "is not my passport nor does this work uh so I missed my flight anyway got here got on time we're here so thank you for",
    "start": "49320",
    "end": "56520"
  },
  {
    "text": "coming um we're gonna talk about websockets and apis and elixir who's here for the",
    "start": "56520",
    "end": "64500"
  },
  {
    "text": "Elixir content all right all right um",
    "start": "64500",
    "end": "69780"
  },
  {
    "text": "there's not much elixir content here so I'm happy I'm happy that uh you are here for that I am also giving an Elixir",
    "start": "69780",
    "end": "76280"
  },
  {
    "text": "Workshop uh tomorrow if you're interested and elixir um okay so this talk is based on my",
    "start": "76280",
    "end": "84180"
  },
  {
    "text": "experience building a real-time websocket API uh with a friend of mine",
    "start": "84180",
    "end": "90680"
  },
  {
    "text": "and building this over the past year and a half and this talk kind of summarizes all the",
    "start": "90680",
    "end": "98040"
  },
  {
    "text": "findings that that we've we found so if you're looking to build a real-time websocket API this may have some of your",
    "start": "98040",
    "end": "105960"
  },
  {
    "text": "answers for you um not really on Twitter anymore these days for obvious reasons but you can",
    "start": "105960",
    "end": "113159"
  },
  {
    "text": "find me there sometimes when I need my fix or you can find me on GitHub at",
    "start": "113159",
    "end": "118320"
  },
  {
    "text": "jright if you don't uh do the Twitter thing there's my email address also",
    "start": "118320",
    "end": "124040"
  },
  {
    "text": "this talk is online so if there's going to be a lot of code in this talk so if",
    "start": "124040",
    "end": "129599"
  },
  {
    "text": "you guys want a copy of this code it is here or you can go to speakerdeck.com J",
    "start": "129599",
    "end": "135660"
  },
  {
    "text": "right and you will find it there okay a little bit about some background how",
    "start": "135660",
    "end": "143160"
  },
  {
    "text": "we got here um I wanted to build a um",
    "start": "143160",
    "end": "149280"
  },
  {
    "text": "an enhanced Pomodoro application um if you guys are not familiar with Pomodoro applications basically it's how",
    "start": "149280",
    "end": "156840"
  },
  {
    "text": "I need to work it's how I've worked for the past couple decades I suffer from add so I",
    "start": "156840",
    "end": "163500"
  },
  {
    "text": "need like little spurts of work followed by some breaks so that's what a Pomodoro",
    "start": "163500",
    "end": "169319"
  },
  {
    "text": "is it's um 25 minute of work followed by five minute break and you repeat those Cycles",
    "start": "169319",
    "end": "175500"
  },
  {
    "text": "every day and that's how I work and I've tried every single Pomodoro app out there I",
    "start": "175500",
    "end": "181739"
  },
  {
    "text": "tried physical timers everything and they all lack something that I want so",
    "start": "181739",
    "end": "189180"
  },
  {
    "text": "um a buddy and I built sent out to build um chronic um it's a chronic.io if",
    "start": "189180",
    "end": "195300"
  },
  {
    "text": "you're um if you're into Pomodoro apps it's not live yet it's going to be called chronic",
    "start": "195300",
    "end": "202260"
  },
  {
    "text": "until Dr Dre sues us maybe um okay this is the wonderful well it's",
    "start": "202260",
    "end": "208560"
  },
  {
    "text": "not anymore but this is the wonderful UI that we were working with and the reason it's so hideous is because we didn't",
    "start": "208560",
    "end": "214140"
  },
  {
    "text": "care about this UI right now we just wanted a test harness to kind of um test our API in",
    "start": "214140",
    "end": "222360"
  },
  {
    "text": "um and the idea is we wanted to build",
    "start": "222360",
    "end": "227760"
  },
  {
    "text": "um that's not supposed to yeah we wanted to",
    "start": "227760",
    "end": "233519"
  },
  {
    "text": "build an application that had a lot of uh that worked on all platforms so you didn't",
    "start": "233519",
    "end": "239159"
  },
  {
    "text": "have to be at your desk when you used it so we're on the desktop app a mobile app uh Amazon app Echo app slack app was",
    "start": "239159",
    "end": "247680"
  },
  {
    "text": "probably the worst idea ever um but we wanted to try it so uh",
    "start": "247680",
    "end": "254340"
  },
  {
    "text": "because of that we had a few this is what led us to websockets",
    "start": "254340",
    "end": "260040"
  },
  {
    "text": "um we wanted the server to actually be the timer the server is the gold copy and then the",
    "start": "260040",
    "end": "265259"
  },
  {
    "text": "server pushes events to the clients and then all the clients need to do because we had we wanted many of them all they",
    "start": "265259",
    "end": "273479"
  },
  {
    "text": "had to do was display the events on that payload and I'm going to show you",
    "start": "273479",
    "end": "280139"
  },
  {
    "text": "um oh the other reason was we wanted to integrate with a uh several Integrations",
    "start": "280139",
    "end": "287100"
  },
  {
    "text": "we wanted Integrations with time keeping apps so that we could automatically log our time after the Pomodoro was up we",
    "start": "287100",
    "end": "293340"
  },
  {
    "text": "wanted um uh Spotify integration so you could if",
    "start": "293340",
    "end": "298860"
  },
  {
    "text": "you're pairing with somebody on the same Pomodoro you could uh listen to the same music same stuff like that so we we had",
    "start": "298860",
    "end": "305280"
  },
  {
    "text": "all these have all these Integrations planned and these events need to happen in real time we need to know where the",
    "start": "305280",
    "end": "312540"
  },
  {
    "text": "Spotify time sync is so that we can um give your your partner on your palm",
    "start": "312540",
    "end": "318060"
  },
  {
    "text": "their Pomodoro the same sort of experience demo this is a horrible uh UI",
    "start": "318060",
    "end": "326039"
  },
  {
    "text": "but here it is in Mobile and all I have down there I'm going to let this play through a couple times but I just have",
    "start": "326039",
    "end": "332580"
  },
  {
    "text": "the web inspector down below and you'll see events come through you'll see a started event and then a",
    "start": "332580",
    "end": "339240"
  },
  {
    "text": "tick event and then every tick event",
    "start": "339240",
    "end": "343099"
  },
  {
    "text": "every tick event has the payload of what that time is so it's not like we started a JavaScript timer and we're just",
    "start": "347880",
    "end": "355020"
  },
  {
    "text": "counting down from there and pushing it back to the server we're going the other way",
    "start": "355020",
    "end": "360380"
  },
  {
    "text": "okay we're gonna get into that payload and all that in a little bit",
    "start": "361080",
    "end": "366020"
  },
  {
    "text": "okay so in order to all make this all work we need to know about websockets but what",
    "start": "366900",
    "end": "372780"
  },
  {
    "text": "the hell is a websocket well we went to go find out because I heard",
    "start": "372780",
    "end": "378419"
  },
  {
    "text": "about them I didn't know um fully what they are so the first thing a",
    "start": "378419",
    "end": "384060"
  },
  {
    "text": "websocket is is a protocol",
    "start": "384060",
    "end": "388100"
  },
  {
    "text": "okay a protocol um it's a a full duplex connection and",
    "start": "389479",
    "end": "397020"
  },
  {
    "text": "what that means is um it's similar to uh if you",
    "start": "397020",
    "end": "402300"
  },
  {
    "text": "think of HTML or it's a full duplex connection and both sides can chat at",
    "start": "402300",
    "end": "408120"
  },
  {
    "text": "the same time so I can chat and the server can chat in the client can chat and nobody gets um interrupted if you",
    "start": "408120",
    "end": "415440"
  },
  {
    "text": "compare that with HTTP protocol um that is a Simplex connection meaning",
    "start": "415440",
    "end": "421100"
  },
  {
    "text": "once I can chat and the other side can respond one side can chat and the other side and respond so I liken that to a",
    "start": "421100",
    "end": "427020"
  },
  {
    "text": "walkie-talkie so websockets more of a phone a phone call conversation",
    "start": "427020",
    "end": "432479"
  },
  {
    "text": "a websocket or HTTP more like a um",
    "start": "432479",
    "end": "438000"
  },
  {
    "text": "walkie-talkie uh the other thing that came out of that protocol is this RFC and this RFC was created in December of",
    "start": "438000",
    "end": "446819"
  },
  {
    "text": "2011 and RC is just requests for comments it's like a proposal hey this",
    "start": "446819",
    "end": "451979"
  },
  {
    "text": "is what we think uh websocket should look like and out of that um came the w3c spec now this originally was bundled",
    "start": "451979",
    "end": "460740"
  },
  {
    "text": "in with like a HTML5 spec but because that became gigantic they broke it out",
    "start": "460740",
    "end": "465800"
  },
  {
    "text": "CSS websockets um and and all that into this w3c spec",
    "start": "465800",
    "end": "471599"
  },
  {
    "text": "and what you got from that is that browser support a websocket",
    "start": "471599",
    "end": "477539"
  },
  {
    "text": "um object and JavaScript and basically how it works it's a pretty simple object",
    "start": "477539",
    "end": "482880"
  },
  {
    "text": "you give it a websocket URL that starts with WS calling slash slash instead of",
    "start": "482880",
    "end": "488340"
  },
  {
    "text": "HTTP it has three callbacks on on open so when the socket gets open uh when you",
    "start": "488340",
    "end": "495780"
  },
  {
    "text": "get a message so any sort of data that comes by you get an on message call back and the data is inside that event args",
    "start": "495780",
    "end": "504300"
  },
  {
    "text": "and then you get it on close so if the socket if the client or the server closes the connection you will get that",
    "start": "504300",
    "end": "509340"
  },
  {
    "text": "callback and then if you want to send something from the client to the server there's a send and if the client wants to close",
    "start": "509340",
    "end": "516060"
  },
  {
    "text": "the connection there's a close pretty simple right",
    "start": "516060",
    "end": "521180"
  },
  {
    "text": "um but the cool thing with websockets um is this part I think it starts with a",
    "start": "521339",
    "end": "528360"
  },
  {
    "text": "handshake via http so the server starts off our client",
    "start": "528360",
    "end": "534300"
  },
  {
    "text": "starts off and and does a get request and",
    "start": "534300",
    "end": "539640"
  },
  {
    "text": "um with the header of upgrade websockets so that's all that that looks like",
    "start": "539640",
    "end": "545360"
  },
  {
    "text": "and then the um and then underneath",
    "start": "546180",
    "end": "551480"
  },
  {
    "text": "the server says okay can I support this version of websockets what are some other plugins that this websocket needs",
    "start": "551480",
    "end": "557700"
  },
  {
    "text": "do I have all those if that is great the server sends back uh an",
    "start": "557700",
    "end": "563580"
  },
  {
    "text": "um HTTP 101 switching protocols with a connection upgrade header",
    "start": "563580",
    "end": "570720"
  },
  {
    "text": "and then this is the best slide of the whole thing so um so the cool thing is the the single",
    "start": "570720",
    "end": "578820"
  },
  {
    "text": "connection the single TCP connection starts out as HTTP and then gets converted into web sockets which is cool",
    "start": "578820",
    "end": "586800"
  },
  {
    "text": "that's how it gets around uh proxies and firewalls and all that stuff you don't need any special",
    "start": "586800",
    "end": "592980"
  },
  {
    "text": "um you know installs on your browsers anything like that I think I think that's cool",
    "start": "592980",
    "end": "598860"
  },
  {
    "text": "so we chose uh websockets because they're more real time we don't have to wait for",
    "start": "598860",
    "end": "605160"
  },
  {
    "text": "a response um we can just fire and forget um it's very eventful so websockets have",
    "start": "605160",
    "end": "612899"
  },
  {
    "text": "fire off of events our server fires off events everything is based on an event and that's really nice in the",
    "start": "612899",
    "end": "620339"
  },
  {
    "text": "architecture of the code has it as it on both the client and the server",
    "start": "620339",
    "end": "626160"
  },
  {
    "text": "um okay so that's why we chose websockets",
    "start": "626160",
    "end": "632040"
  },
  {
    "text": "um for the clients um the server we we chose Phoenix Now Phoenix is",
    "start": "632040",
    "end": "638100"
  },
  {
    "text": "um is the web framework for Elixir it's the rails to Ruby it's the asp.net2.net",
    "start": "638100",
    "end": "646079"
  },
  {
    "text": "um and it was originally actually built around websockets it was originally a",
    "start": "646079",
    "end": "652740"
  },
  {
    "text": "library for simply websockets before it came a full-blown um HTTP or HTML MVC framework",
    "start": "652740",
    "end": "662160"
  },
  {
    "text": "um so it supports websockets on the out of the box it's a very",
    "start": "662160",
    "end": "667440"
  },
  {
    "text": "um it's a very websocket friendly uh",
    "start": "667440",
    "end": "673140"
  },
  {
    "text": "um framework it has a lot of templates that build up to have those those websockets building and it's built on",
    "start": "673140",
    "end": "679620"
  },
  {
    "text": "Elixir if you're not familiar with Elixir elixir uh is a fairly new language I guess I can't say that",
    "start": "679620",
    "end": "686519"
  },
  {
    "text": "anymore I used to say that back in the like before the pandemic um but it was built in a",
    "start": "686519",
    "end": "693680"
  },
  {
    "text": "2011 was when it first started it was released in 2012",
    "start": "693680",
    "end": "699019"
  },
  {
    "text": "and is built on the erlang virtual machine the erlang virtual machine is",
    "start": "699019",
    "end": "704640"
  },
  {
    "text": "older it's from the 90s it was built by Erickson and um",
    "start": "704640",
    "end": "711120"
  },
  {
    "text": "Elixir takes advantage of erlang's virtual machine so it compiles down into",
    "start": "711120",
    "end": "716160"
  },
  {
    "text": "erlang bytecode and it runs on the erlang virtual machine",
    "start": "716160",
    "end": "722160"
  },
  {
    "text": "um and it's very if you've ever looked at erlang it's not so uh developer happiness",
    "start": "722160",
    "end": "730260"
  },
  {
    "text": "friendly Elixir it came comes from Jose villain who's from the Ruby community so",
    "start": "730260",
    "end": "736440"
  },
  {
    "text": "it's got ruby-like syntax but it's functional um and it's very very fast",
    "start": "736440",
    "end": "743279"
  },
  {
    "text": "um I'm not coming from the Ruby world I wasn't used to all this fastness",
    "start": "743279",
    "end": "748440"
  },
  {
    "text": "um but it's it's nice and it's very concurrent and it's stateful so there's a cool",
    "start": "748440",
    "end": "754560"
  },
  {
    "text": "feature of erling called the OTP which is open Telecom protocol",
    "start": "754560",
    "end": "759600"
  },
  {
    "text": "and this was built by Erickson like I said and it needed to",
    "start": "759600",
    "end": "765899"
  },
  {
    "text": "um what it is is uh processes tiny little Elixir processes not like uh what",
    "start": "765899",
    "end": "771959"
  },
  {
    "text": "you would think of normal threaded processes but these are Elixir processes they're really I'm sorry the erlang",
    "start": "771959",
    "end": "777300"
  },
  {
    "text": "processes they're really fast to spin up and they can talk to each other so you can have like all these little",
    "start": "777300",
    "end": "784200"
  },
  {
    "text": "um black boxes that are um that can send and receive messages so",
    "start": "784200",
    "end": "789839"
  },
  {
    "text": "our timers are all OTP processes so anytime you start up a process that",
    "start": "789839",
    "end": "795660"
  },
  {
    "text": "timer starts in an OTP process so every user has a timer which is nice because then if it fails",
    "start": "795660",
    "end": "803339"
  },
  {
    "text": "it only affects that one user um",
    "start": "803339",
    "end": "808800"
  },
  {
    "text": "OTP is also uh it has this idea of hot code reloading so you can actually",
    "start": "808800",
    "end": "814920"
  },
  {
    "text": "deploy code without losing the OTP process in the in the in the process of",
    "start": "814920",
    "end": "821579"
  },
  {
    "text": "deploying which is nice because every time we deployed we all the users would lose their timers which is not a good",
    "start": "821579",
    "end": "827940"
  },
  {
    "text": "thing so there's a way to deploy in Phoenix um",
    "start": "827940",
    "end": "832980"
  },
  {
    "text": "with no no downtime which is amazing um these uh websocket apis we went and",
    "start": "832980",
    "end": "842339"
  },
  {
    "text": "took some inspiration from from others that have done this before and I want to call out slack has a very well they",
    "start": "842339",
    "end": "848639"
  },
  {
    "text": "don't really support this anymore but they used to have a real-time Library",
    "start": "848639",
    "end": "853920"
  },
  {
    "text": "that you could send and receive messages from in a channel you can receive team events",
    "start": "853920",
    "end": "859459"
  },
  {
    "text": "receive user presence so if a user left or came back and those are all things",
    "start": "859459",
    "end": "864600"
  },
  {
    "text": "that that we wanted our app to have Pusher if you're familiar with Pusher allows you to kind of build these apis",
    "start": "864600",
    "end": "871440"
  },
  {
    "text": "using a service um that they have their own service so you don't have to worry about the server",
    "start": "871440",
    "end": "877019"
  },
  {
    "text": "side of of of uptime and things so they have some really good docs and",
    "start": "877019",
    "end": "883260"
  },
  {
    "text": "uh there's another um API called get stream that just has a read only",
    "start": "883260",
    "end": "889199"
  },
  {
    "text": "API that's really nice if you like building like a timeline type feature and you want to always update your",
    "start": "889199",
    "end": "895740"
  },
  {
    "text": "timeline with uh with real time information so how does this work",
    "start": "895740",
    "end": "903000"
  },
  {
    "text": "so let's look at some code okay the first thing that a client needs",
    "start": "903000",
    "end": "909000"
  },
  {
    "text": "to do in our API is connect right and we",
    "start": "909000",
    "end": "914519"
  },
  {
    "text": "um we want to control that websocket address we don't want to",
    "start": "914519",
    "end": "920100"
  },
  {
    "text": "go to our docs and say and have people say hey put in WS colon chronic.io slash",
    "start": "920100",
    "end": "926639"
  },
  {
    "text": "whatever we want to give that to people so that you know Dr Dre sues us we can change",
    "start": "926639",
    "end": "932880"
  },
  {
    "text": "the url or whatever we need more capacity we can change that URL",
    "start": "932880",
    "end": "939180"
  },
  {
    "text": "so we built a graphql API on top of that where you can um",
    "start": "939180",
    "end": "946019"
  },
  {
    "text": "where's a mutation uh and you called connect and",
    "start": "946019",
    "end": "953160"
  },
  {
    "text": "what you do the the um client sends to the server",
    "start": "953160",
    "end": "958199"
  },
  {
    "text": "oh sorry",
    "start": "958199",
    "end": "961040"
  },
  {
    "text": "yeah okay so that's just a regular graphql endpoint and the server sends back",
    "start": "967079",
    "end": "972240"
  },
  {
    "text": "a token for authentication and a URL that that then the client needs to use",
    "start": "972240",
    "end": "979320"
  },
  {
    "text": "that as a websocket URL so this gives clients a starting point",
    "start": "979320",
    "end": "985860"
  },
  {
    "text": "they always know how to connect to your service um it's a way to",
    "start": "985860",
    "end": "992240"
  },
  {
    "text": "identify events that come from that so when a client connects we take a",
    "start": "992240",
    "end": "998759"
  },
  {
    "text": "fingerprint of the of the device that they're using or the the agent that",
    "start": "998759",
    "end": "1004160"
  },
  {
    "text": "they're using and um and that's how we know uh what client",
    "start": "1004160",
    "end": "1009740"
  },
  {
    "text": "goes what user is using what devices and this is a good opportunity to",
    "start": "1009740",
    "end": "1014779"
  },
  {
    "text": "authenticate so if a user cannot authenticate if they cannot connect you don't need to give them any information",
    "start": "1014779",
    "end": "1019940"
  },
  {
    "text": "so I'd highly suggest everybody um everybody uh have this in their API kind",
    "start": "1019940",
    "end": "1028339"
  },
  {
    "text": "of a regular rest or graphql API endpoint",
    "start": "1028339",
    "end": "1033040"
  },
  {
    "text": "okay so this is some JavaScript code um some simplified JavaScript code of",
    "start": "1035240",
    "end": "1040459"
  },
  {
    "text": "how we connect on the uh client side using graphql client",
    "start": "1040459",
    "end": "1047000"
  },
  {
    "text": "um and then once we get this uh URL we put",
    "start": "1047000",
    "end": "1053120"
  },
  {
    "text": "that into the websocket and now we can use our websocket just like normal",
    "start": "1053120",
    "end": "1059380"
  },
  {
    "text": "um this is the test that we wrote for the server side so we're going to do a little uh tdd on the Elixir side",
    "start": "1061520",
    "end": "1069440"
  },
  {
    "text": "um Elixir comes with uh I'm going to explain this Elixir code a little bit for those that are not familiar but",
    "start": "1069440",
    "end": "1076160"
  },
  {
    "text": "Elixir comes with a testing framework called X unit um",
    "start": "1076160",
    "end": "1081679"
  },
  {
    "text": "and elixir is functional so there is no State you have to pass the state through",
    "start": "1081679",
    "end": "1088340"
  },
  {
    "text": "functions to transform that state and you get a new state out and so in functional Link in in Elixir a",
    "start": "1088340",
    "end": "1097640"
  },
  {
    "text": "module you can think of it like a class but it's not a class it's not an object because it doesn't have any state so",
    "start": "1097640",
    "end": "1103880"
  },
  {
    "text": "modules are just collection of functions in elixir and so this module is a test module this describe is a is a some",
    "start": "1103880",
    "end": "1111980"
  },
  {
    "text": "special DSL stuff that is basically a method and so here we're",
    "start": "1111980",
    "end": "1118760"
  },
  {
    "text": "um connecting in the test and we're um we're getting the last uh connection so",
    "start": "1118760",
    "end": "1126559"
  },
  {
    "text": "we have a uh database called connection where we uh where we just hold the",
    "start": "1126559",
    "end": "1132799"
  },
  {
    "text": "tokens and the URLs for the users and so we just want to ensure that that gets",
    "start": "1132799",
    "end": "1140240"
  },
  {
    "text": "created when a user uh connects and this is the simple",
    "start": "1140240",
    "end": "1147860"
  },
  {
    "text": "um connect on the server side so this is using in Phoenix there's a",
    "start": "1147860",
    "end": "1156740"
  },
  {
    "text": "graphql um library that is slipping my mind right now",
    "start": "1156740",
    "end": "1165320"
  },
  {
    "text": "web absence thank you absinthe it's awesome it's a it's like I've used",
    "start": "1165320",
    "end": "1170480"
  },
  {
    "text": "several graphql libraries it's it's amazing it's really really nice um so but these are just a a resolver so",
    "start": "1170480",
    "end": "1178940"
  },
  {
    "text": "for your mutations you just have resolver so all we do is connect here and this connection.create down",
    "start": "1178940",
    "end": "1185539"
  },
  {
    "text": "here is really the heart of it all",
    "start": "1185539",
    "end": "1190299"
  },
  {
    "text": "um in Elixir a pattern that is followed in this case statements so it's calling is",
    "start": "1191660",
    "end": "1198740"
  },
  {
    "text": "create down here with the user and that connection.create is going to return a tuple either an okay Tuple or an error",
    "start": "1198740",
    "end": "1206780"
  },
  {
    "text": "Tuple and if it's an error Tuple you're going to have the errors that are that are not making that valid",
    "start": "1206780",
    "end": "1213740"
  },
  {
    "text": "or if it's okay then you'll get that connection back and that's a standard pattern that is",
    "start": "1213740",
    "end": "1219919"
  },
  {
    "text": "followed in Elixir using these tuples followed by these little braces you see",
    "start": "1219919",
    "end": "1225820"
  },
  {
    "text": "um and then this in Phoenix is the",
    "start": "1226940",
    "end": "1234860"
  },
  {
    "text": "websocket integration so anytime you create a new Phoenix project you get this Phoenix socket",
    "start": "1234860",
    "end": "1242559"
  },
  {
    "text": "module and it it has channels which we're going to get in into next and",
    "start": "1242559",
    "end": "1250820"
  },
  {
    "text": "um and then you have a connect function that this supports so when a",
    "start": "1250820",
    "end": "1258200"
  },
  {
    "text": "user connects to your server it'll call this and this is actually creating an OTP",
    "start": "1258200",
    "end": "1264260"
  },
  {
    "text": "process behind the scenes so every connection every websocket",
    "start": "1264260",
    "end": "1269960"
  },
  {
    "text": "connection in Phoenix is an OTP process which is pretty cool so all this is doing is assigning some state to that",
    "start": "1269960",
    "end": "1276980"
  },
  {
    "text": "websocket and it's assigning the token that that",
    "start": "1276980",
    "end": "1283760"
  },
  {
    "text": "the user got this is the uh the the token that we use to identify the user",
    "start": "1283760",
    "end": "1290419"
  },
  {
    "text": "all right let's talk about channels all right so what are channels channels",
    "start": "1290419",
    "end": "1296780"
  },
  {
    "text": "are not like a thing they're not like a w3c spec they're not like uh uh you know",
    "start": "1296780",
    "end": "1302360"
  },
  {
    "text": "a standardized thing it's a custom protocol that's built into Phoenix actually and it's Multiplex it it allows",
    "start": "1302360",
    "end": "1310400"
  },
  {
    "text": "you uh a single connection to talk to multiple different clients",
    "start": "1310400",
    "end": "1318020"
  },
  {
    "text": "it allows things like uh Pub sub so when you when the client or server publish a message uh somebody else can subscribe",
    "start": "1318020",
    "end": "1325640"
  },
  {
    "text": "to and get and receive those messages and in Phoenix it's like I said it's built in",
    "start": "1325640",
    "end": "1331760"
  },
  {
    "text": "and to be honest we didn't want this we didn't want this in Phoenix",
    "start": "1331760",
    "end": "1338059"
  },
  {
    "text": "um Phoenix comes with a JavaScript library",
    "start": "1338059",
    "end": "1343640"
  },
  {
    "text": "as well so you can load on the client that you can see that",
    "start": "1343640",
    "end": "1349880"
  },
  {
    "text": "um it says socket here not websocket it's a socket that is a",
    "start": "1349880",
    "end": "1355700"
  },
  {
    "text": "phoenix socket and it just wraps a regular JavaScript websocket but it gives you this channel",
    "start": "1355700",
    "end": "1362720"
  },
  {
    "text": "stuff and so when a user first connects to a",
    "start": "1362720",
    "end": "1367940"
  },
  {
    "text": "socket the first thing that they have to do is join a channel and we just have",
    "start": "1367940",
    "end": "1373340"
  },
  {
    "text": "one channel defined that has all the events um for that given user",
    "start": "1373340",
    "end": "1381640"
  },
  {
    "text": "okay um I'm not going to get into this too much",
    "start": "1381860",
    "end": "1387799"
  },
  {
    "text": "but this is how the server handles uh the channels I'm going to tell you why",
    "start": "1387799",
    "end": "1393200"
  },
  {
    "text": "I'm not getting into this but basically there's a subscribe and",
    "start": "1393200",
    "end": "1398960"
  },
  {
    "text": "subscribe and join feed um function that",
    "start": "1398960",
    "end": "1405679"
  },
  {
    "text": "assigns that webs that user to that websocket that OTP process in Phoenix and",
    "start": "1405940",
    "end": "1413539"
  },
  {
    "text": "this is a channel an event this this is a in Phoenix there's these things called",
    "start": "1413539",
    "end": "1419840"
  },
  {
    "text": "channels uh that are um that you can just create so we only have one channel",
    "start": "1419840",
    "end": "1425240"
  },
  {
    "text": "called The Event Channel and when somebody uses it this uh join and events",
    "start": "1425240",
    "end": "1430400"
  },
  {
    "text": "and then you see this crazy little uh you know um",
    "start": "1430400",
    "end": "1435820"
  },
  {
    "text": "operator there that can actually take out the token so it's a vents colon and",
    "start": "1435820",
    "end": "1441200"
  },
  {
    "text": "then the user's token but in Elixir you can actually take that out in the definition and so it's going to be put",
    "start": "1441200",
    "end": "1447980"
  },
  {
    "text": "into that token variable and so all we're going to do is look for that connection for that token and then just",
    "start": "1447980",
    "end": "1454100"
  },
  {
    "text": "assign that token back to the channel if the user is not not authorized for",
    "start": "1454100",
    "end": "1460039"
  },
  {
    "text": "that like if we don't find that token then we don't allow them to join that channel",
    "start": "1460039",
    "end": "1465860"
  },
  {
    "text": "okay the problem with channels this is a real picture on the internet by the way",
    "start": "1465860",
    "end": "1471140"
  },
  {
    "text": "I found um okay uh so the problem is because it's a custom",
    "start": "1471140",
    "end": "1477620"
  },
  {
    "text": "protocol in Phoenix we didn't want our clients to have to say okay now you have",
    "start": "1477620",
    "end": "1484940"
  },
  {
    "text": "to send this PHX underscore join event um and because we don't want people to",
    "start": "1484940",
    "end": "1491480"
  },
  {
    "text": "know that's Phoenix and you can't change that it's stuck at PHX join and then the",
    "start": "1491480",
    "end": "1497900"
  },
  {
    "text": "server comes back and and gives um the client the the payload",
    "start": "1497900",
    "end": "1504380"
  },
  {
    "text": "um because that's so custom and it doesn't follow the rest of our websocket API",
    "start": "1504380",
    "end": "1510919"
  },
  {
    "text": "flow which you'll see in a little bit we didn't want this way so if you are",
    "start": "1510919",
    "end": "1516860"
  },
  {
    "text": "um doing web sockets in in Phoenix you can do this as well so you don't have to",
    "start": "1516860",
    "end": "1523039"
  },
  {
    "text": "have channels but we want to remove the complicated setup from clients",
    "start": "1523039",
    "end": "1528620"
  },
  {
    "text": "this does in Phoenix provide some functionality there's reconnection logic",
    "start": "1528620",
    "end": "1533659"
  },
  {
    "text": "there's a heartbeat logic to make sure that the websocket connection doesn't disconnect because if a websocket does",
    "start": "1533659",
    "end": "1541039"
  },
  {
    "text": "not see any traffic after um a time limit it'll close",
    "start": "1541039",
    "end": "1546860"
  },
  {
    "text": "and this is not it's easy to do but it's not straightforward to do so if you're",
    "start": "1546860",
    "end": "1552860"
  },
  {
    "text": "interested in doing something like this there's um I put the code out there to kind of",
    "start": "1552860",
    "end": "1558320"
  },
  {
    "text": "remove channels from elixir so all right messages",
    "start": "1558320",
    "end": "1565700"
  },
  {
    "text": "so these are the messages that are sent from to and from our our um",
    "start": "1565700",
    "end": "1570919"
  },
  {
    "text": "our API and we wanted these to be very well defined because this is the meat of",
    "start": "1570919",
    "end": "1576740"
  },
  {
    "text": "our API and so what we came up with was this",
    "start": "1576740",
    "end": "1582320"
  },
  {
    "text": "kind of shape of message where you have an event name inside of an array and",
    "start": "1582320",
    "end": "1588860"
  },
  {
    "text": "Then followed by event data the event name we wanted to have like a model",
    "start": "1588860",
    "end": "1596480"
  },
  {
    "text": "and an action so all the events are some sort of noun followed by a a verb",
    "start": "1596480",
    "end": "1606220"
  },
  {
    "text": "and we time stamp everything every message that comes through every time stamp because you want to add",
    "start": "1607340",
    "end": "1615620"
  },
  {
    "text": "um metrics to those so incoming messages these are messages",
    "start": "1615620",
    "end": "1621320"
  },
  {
    "text": "that are um coming from the server to the client",
    "start": "1621320",
    "end": "1626600"
  },
  {
    "text": "um so this handle Stark on start click is just",
    "start": "1626600",
    "end": "1632779"
  },
  {
    "text": "some JavaScript um Handler however you do this in your JavaScript",
    "start": "1632779",
    "end": "1639820"
  },
  {
    "text": "you know if you're using react then you would have this as an onstart click",
    "start": "1639820",
    "end": "1647720"
  },
  {
    "text": "um which is what we're using on our our client so all we're doing is when they",
    "start": "1647720",
    "end": "1654740"
  },
  {
    "text": "click Start the play button on the timer we just send a timer start",
    "start": "1654740",
    "end": "1661220"
  },
  {
    "text": "we give it the duration in seconds so this is 25 minutes 1500 seconds",
    "start": "1661220",
    "end": "1668299"
  },
  {
    "text": "and we give it a time stamp and that's what that looks like",
    "start": "1668299",
    "end": "1674299"
  },
  {
    "text": "to the server the server comes in and this is the test",
    "start": "1674299",
    "end": "1679580"
  },
  {
    "text": "that we made for it so we already inserted this connection that the user you know previously",
    "start": "1679580",
    "end": "1686419"
  },
  {
    "text": "connected with us over the graphql API um",
    "start": "1686419",
    "end": "1691960"
  },
  {
    "text": "and like I said all the timers are OTP processes",
    "start": "1691960",
    "end": "1698240"
  },
  {
    "text": "so um we want to make sure that that OTP process received the message to start",
    "start": "1698240",
    "end": "1706279"
  },
  {
    "text": "the timer and we just want the system timer is uh",
    "start": "1706279",
    "end": "1711740"
  },
  {
    "text": "the timer the countdown timer that is running on the server and it's an OTP process and we're just",
    "start": "1711740",
    "end": "1718640"
  },
  {
    "text": "getting a status of that and we want to make sure that it is running",
    "start": "1718640",
    "end": "1723980"
  },
  {
    "text": "so how we actually Implement that is we have this module timers events",
    "start": "1723980",
    "end": "1730940"
  },
  {
    "text": "um and uh on the receive Elixir supports something called pattern",
    "start": "1730940",
    "end": "1738260"
  },
  {
    "text": "matching other languages have this I think.net is getting it or has it now not sure but it",
    "start": "1738260",
    "end": "1745880"
  },
  {
    "text": "is uh the coolest feature ever um all it allows you to do is really",
    "start": "1745880",
    "end": "1752059"
  },
  {
    "text": "redefine the same method over but give it a different signature based on the",
    "start": "1752059",
    "end": "1760100"
  },
  {
    "text": "data that's coming in so you can have multiple receive events with the timer start",
    "start": "1760100",
    "end": "1766220"
  },
  {
    "text": "is um it could be something different so we want to make sure that we get this",
    "start": "1766220",
    "end": "1771860"
  },
  {
    "text": "message and we want to make sure that we have a duration so if we if neither of those match",
    "start": "1771860",
    "end": "1778360"
  },
  {
    "text": "Elixir will just bomb out and say hey we don't have a function to call for you and so that's kind of like a way to",
    "start": "1778360",
    "end": "1785539"
  },
  {
    "text": "defend against you know bad data um and so all we do is we call this",
    "start": "1785539",
    "end": "1791860"
  },
  {
    "text": "systemtimer.start we give it duration and this FN state is uh we'll get back",
    "start": "1791860",
    "end": "1798860"
  },
  {
    "text": "to that but every time there's a tick message that happens every time there's a second countdown we broadcast that",
    "start": "1798860",
    "end": "1807080"
  },
  {
    "text": "tick message within there um then we get a response uh so basically",
    "start": "1807080",
    "end": "1813860"
  },
  {
    "text": "we have a wrapper around our API that gets the state of that system timer as",
    "start": "1813860",
    "end": "1820159"
  },
  {
    "text": "it is like how many seconds are left um or how many seconds did you start with what's the id of that time or all",
    "start": "1820159",
    "end": "1827360"
  },
  {
    "text": "that stuff and that gets sent back to the client and so the client would",
    "start": "1827360",
    "end": "1833240"
  },
  {
    "text": "um get that message which is an outgoing message um so these are messages that the client",
    "start": "1833240",
    "end": "1838940"
  },
  {
    "text": "gets and they follow the same pattern except",
    "start": "1838940",
    "end": "1844279"
  },
  {
    "text": "um we wanted the client to get kind of the past we use kind of the the past notation of",
    "start": "1844279",
    "end": "1851720"
  },
  {
    "text": "the verb um that matches the the verb that the client sent in and this this data that's",
    "start": "1851720",
    "end": "1858320"
  },
  {
    "text": "below is all the data that's from the actual OTP process this doesn't hit the database at all",
    "start": "1858320",
    "end": "1864200"
  },
  {
    "text": "this uh this all this information is stored in that OTP process",
    "start": "1864200",
    "end": "1870640"
  },
  {
    "text": "um okay so this is what happens on the client when they get a message from the from the server",
    "start": "1872960",
    "end": "1879320"
  },
  {
    "text": "so we look for uh the timers started",
    "start": "1879320",
    "end": "1884840"
  },
  {
    "text": "event here and all we do is like change the uh update the view so we change it",
    "start": "1884840",
    "end": "1891500"
  },
  {
    "text": "from a play button to a pause button because it's now running the state is now running uh we change uh",
    "start": "1891500",
    "end": "1897980"
  },
  {
    "text": "the seconds start counting the seconds down all that stuff and we just do it kind of inside there where I'm Council",
    "start": "1897980",
    "end": "1904159"
  },
  {
    "text": "logging it um okay so broadcasting a tick event",
    "start": "1904159",
    "end": "1913480"
  },
  {
    "text": "um I'm sorry this is uh broadcasting the actual timer started event",
    "start": "1914179",
    "end": "1919700"
  },
  {
    "text": "so when the when the OTP process receives a timer start and once we want",
    "start": "1919700",
    "end": "1925760"
  },
  {
    "text": "to make sure that we return a timer started event um",
    "start": "1925760",
    "end": "1932059"
  },
  {
    "text": "yes so this is the same code as before then the receive for timer start except we've",
    "start": "1932059",
    "end": "1939140"
  },
  {
    "text": "I filled in the function for uh click there so every time we get a click we",
    "start": "1939140",
    "end": "1947419"
  },
  {
    "text": "broadcast to that ID for that user that their timer is ticked",
    "start": "1947419",
    "end": "1953240"
  },
  {
    "text": "so if that user is connected on their iPhone and connected on their Mac they",
    "start": "1953240",
    "end": "1959840"
  },
  {
    "text": "will see the exact same times ticking down",
    "start": "1959840",
    "end": "1964299"
  },
  {
    "text": "Okay so we connected",
    "start": "1967580",
    "end": "1972980"
  },
  {
    "text": "and we just use regular http and graphql we use graphql",
    "start": "1972980",
    "end": "1979039"
  },
  {
    "text": "um feel free to use rest or whatever you're comfortable with although graphql is awesome",
    "start": "1979039",
    "end": "1985640"
  },
  {
    "text": "um and then we send back then the server sends back that URL and a token for the user that identifies that user",
    "start": "1985640",
    "end": "1994100"
  },
  {
    "text": "then the client sends um to the server they'll send a timer start event for the duration",
    "start": "1994100",
    "end": "2002019"
  },
  {
    "text": "and then the websocket will send back hey I got the message the timer started here is",
    "start": "2002019",
    "end": "2008200"
  },
  {
    "text": "all the data associated with your timer",
    "start": "2008200",
    "end": "2012419"
  },
  {
    "text": "so that I want to reserve a lot of time for questions",
    "start": "2014799",
    "end": "2020440"
  },
  {
    "text": "um yeah does anybody have any questions on the actual implementation",
    "start": "2020440",
    "end": "2025720"
  },
  {
    "text": "or maybe details that they would have of their own implementation that questions",
    "start": "2025720",
    "end": "2031480"
  },
  {
    "text": "yes",
    "start": "2031480",
    "end": "2034200"
  },
  {
    "text": "yes yeah so the question is around the Elixir ecosystem",
    "start": "2038860",
    "end": "2045399"
  },
  {
    "text": "um okay uh The Elixir ecosystem is is really",
    "start": "2045399",
    "end": "2051520"
  },
  {
    "text": "um vibrant right now um so in terms of tooling you know",
    "start": "2051520",
    "end": "2057220"
  },
  {
    "text": "everybody uses Phoenix for the web framework stuff um",
    "start": "2057220",
    "end": "2063780"
  },
  {
    "text": "uh um there's several hosts that will support the hot code",
    "start": "2064540",
    "end": "2071200"
  },
  {
    "text": "reloading there's a host called gig Elixir so you that will support the hot",
    "start": "2071200",
    "end": "2076720"
  },
  {
    "text": "code reloading there's also a a really good Elixir host",
    "start": "2076720",
    "end": "2082179"
  },
  {
    "text": "um pass host uh called fly.io and they're",
    "start": "2082179",
    "end": "2087460"
  },
  {
    "text": "really nice because they will bro they'll put their actual Elixir code near your users however they can't do",
    "start": "2087460",
    "end": "2093580"
  },
  {
    "text": "that and support hot code reloading so if you don't need hot code reloading then uh that's that's an amazing choice",
    "start": "2093580",
    "end": "2101320"
  },
  {
    "text": "um and then recently Elixir has been getting into um the AI space uh trying to kind of I",
    "start": "2101320",
    "end": "2109540"
  },
  {
    "text": "think what they're doing is kind of trying to pry away uh users from python and start using Elixir so they've",
    "start": "2109540",
    "end": "2115780"
  },
  {
    "text": "released a lot of new stuff that's kind of amazing there's a numeric numerical",
    "start": "2115780",
    "end": "2121180"
  },
  {
    "text": "Elixir NX which supports running complex mathematical queries on the GPU",
    "start": "2121180",
    "end": "2128859"
  },
  {
    "text": "for uh for AI stuff they released uh a thing called live book which is a",
    "start": "2128859",
    "end": "2134260"
  },
  {
    "text": "programming notebook which is really helpful you'll see it if you go in the workshop tomorrow use live",
    "start": "2134260",
    "end": "2141099"
  },
  {
    "text": "book and uh they released Bumblebee which allows you to take um models",
    "start": "2141099",
    "end": "2147820"
  },
  {
    "text": "AI models from hugging face and other places and actually run those inside of",
    "start": "2147820",
    "end": "2153160"
  },
  {
    "text": "Elixir and there's a demo where he's just using live book there's actually a demo from Chris McCord the creator of",
    "start": "2153160",
    "end": "2159700"
  },
  {
    "text": "Phoenix who brings in uh whisper he puts in a podcast brings in whisper model",
    "start": "2159700",
    "end": "2166720"
  },
  {
    "text": "does live transcripts right within Phoenix and I think it takes 15 minutes",
    "start": "2166720",
    "end": "2171820"
  },
  {
    "text": "so like the ecosystem around Elixir is very very um",
    "start": "2171820",
    "end": "2177720"
  },
  {
    "text": "vibrant yes I can say did I answer your question is there any",
    "start": "2178180",
    "end": "2184300"
  },
  {
    "text": "other ecosystem things",
    "start": "2184300",
    "end": "2189720"
  },
  {
    "text": "um no there's language server stuff so vs code it has Elixir plugins for all",
    "start": "2191740",
    "end": "2196900"
  },
  {
    "text": "that um I'm a Vim user so I don't really know sorry anything else but there's no real",
    "start": "2196900",
    "end": "2204400"
  },
  {
    "text": "like code editor that like the Elixir Community uses a lot of vs code a lot of",
    "start": "2204400",
    "end": "2209800"
  },
  {
    "text": "Vim emacs yes so you have questions yeah restarts",
    "start": "2209800",
    "end": "2216700"
  },
  {
    "text": "how are you are you resilient to restore yes um that is uh there is uh some logic",
    "start": "2216700",
    "end": "2224320"
  },
  {
    "text": "around uh both the client side and the server side around restarts",
    "start": "2224320",
    "end": "2231099"
  },
  {
    "text": "the cool um and we just basically ripped out the code that Phoenix does with the um",
    "start": "2231099",
    "end": "2238660"
  },
  {
    "text": "connection reconnecting kind of stuff in the in the websocket world",
    "start": "2238660",
    "end": "2244180"
  },
  {
    "text": "um on the server side um Elixir has this philosophy of like Let It fail",
    "start": "2244180",
    "end": "2250260"
  },
  {
    "text": "and the reason is like OTP those OTP processes can and will fail",
    "start": "2250260",
    "end": "2256300"
  },
  {
    "text": "but there's a supervisor that you can build upon above that that will watch if",
    "start": "2256300",
    "end": "2262240"
  },
  {
    "text": "these shut down they'll tell you tell other parts of the system that they'll shut down they can shut down nodes that",
    "start": "2262240",
    "end": "2269320"
  },
  {
    "text": "are close next to them or their parents all the stuff that's um really easily configurable",
    "start": "2269320",
    "end": "2276460"
  },
  {
    "text": "so when a node fails it'll just come back up and we rehydrate that with stuff",
    "start": "2276460",
    "end": "2283119"
  },
  {
    "text": "from the database so that's really the only time we touch the databases when",
    "start": "2283119",
    "end": "2288220"
  },
  {
    "text": "um we need to sync the state which we don't which we do every now and then and then",
    "start": "2288220",
    "end": "2293380"
  },
  {
    "text": "um and then when we rehydrate the processes",
    "start": "2293380",
    "end": "2298480"
  },
  {
    "text": "so reconnects um are pretty resilient in the system so",
    "start": "2298480",
    "end": "2303880"
  },
  {
    "text": "far that we have to answer your question",
    "start": "2303880",
    "end": "2310260"
  },
  {
    "text": "yeah so the um so the question is uh do we need to",
    "start": "2315160",
    "end": "2321040"
  },
  {
    "text": "worry about out of order messages being received either on the client and server",
    "start": "2321040",
    "end": "2328000"
  },
  {
    "text": "um I don't know because uh we don't care because uh the next message will just",
    "start": "2328000",
    "end": "2333280"
  },
  {
    "text": "have the new time if that makes sense so um",
    "start": "2333280",
    "end": "2338740"
  },
  {
    "text": "like we're not building like you know a banking system the other thing is though",
    "start": "2338740",
    "end": "2343780"
  },
  {
    "text": "we do time stamp everything so there you can um worry about that but I didn't I don't",
    "start": "2343780",
    "end": "2350619"
  },
  {
    "text": "have any sort of tooling or um tracing to find out if that is",
    "start": "2350619",
    "end": "2356980"
  },
  {
    "text": "happening in our system good question though because I I know that that will",
    "start": "2356980",
    "end": "2364720"
  },
  {
    "text": "and can happen based on how you're architecting your your system especially in non-functional I could see it",
    "start": "2364720",
    "end": "2371440"
  },
  {
    "text": "happening in Ruby a lot so yeah it's probably something you need to defend against",
    "start": "2371440",
    "end": "2378359"
  },
  {
    "text": "any other questions yes",
    "start": "2379119",
    "end": "2382260"
  },
  {
    "text": "um I'm not sure about um the Amazon Alexa stuff",
    "start": "2392920",
    "end": "2398859"
  },
  {
    "text": "because we didn't build that yet but iPhone Android",
    "start": "2398859",
    "end": "2405160"
  },
  {
    "text": "no we haven't really found a client that doesn't support slack does",
    "start": "2405160",
    "end": "2410920"
  },
  {
    "text": "network issues not that we've we're not there we have",
    "start": "2410920",
    "end": "2416740"
  },
  {
    "text": "found um I have seen I have seen websockets being",
    "start": "2416740",
    "end": "2422859"
  },
  {
    "text": "blocked on on you know other applications when I'm like you know connected to Hotel Wi-Fi or things like",
    "start": "2422859",
    "end": "2429400"
  },
  {
    "text": "that I've seen like packet drops and things like that but",
    "start": "2429400",
    "end": "2434680"
  },
  {
    "text": "yeah I haven't ran like we don't have any users that are like hey I can't connect so",
    "start": "2434680",
    "end": "2440700"
  },
  {
    "text": "yes [Music]",
    "start": "2441579",
    "end": "2446699"
  },
  {
    "text": "going quite",
    "start": "2454980",
    "end": "2458220"
  },
  {
    "text": "strive um",
    "start": "2460359",
    "end": "2467400"
  },
  {
    "text": "so the question I don't know if I'm understanding your question so the the fact that we send",
    "start": "2467440",
    "end": "2473079"
  },
  {
    "text": "um ticks every second like can it support a lower or a higher",
    "start": "2473079",
    "end": "2479440"
  },
  {
    "text": "frequency of messages yeah yeah there's other messages like we",
    "start": "2479440",
    "end": "2486280"
  },
  {
    "text": "don't just send one every second to users um and we have tested this actually uh the",
    "start": "2486280",
    "end": "2493960"
  },
  {
    "text": "throughput using Blaze um but I uh",
    "start": "2493960",
    "end": "2500800"
  },
  {
    "text": "it's nothing like spectacular uh in terms of um throughput",
    "start": "2500800",
    "end": "2506920"
  },
  {
    "text": "kind of what you would expect but we do send other messages to other services",
    "start": "2506920",
    "end": "2512020"
  },
  {
    "text": "and we get messages from other services so we kind of do support that we're not",
    "start": "2512020",
    "end": "2517300"
  },
  {
    "text": "just sending every message every second so um but I don't know how to I don't know",
    "start": "2517300",
    "end": "2523480"
  },
  {
    "text": "besides that I can't comment on timing or anything like that I was just based on my experience",
    "start": "2523480",
    "end": "2531780"
  },
  {
    "text": "any other questions yes",
    "start": "2532480",
    "end": "2538140"
  },
  {
    "text": "longer yeah yes um",
    "start": "2544500",
    "end": "2550000"
  },
  {
    "text": "connection reconnecting um can it was kind of a pain to deal with",
    "start": "2550000",
    "end": "2558599"
  },
  {
    "text": "the reason being is like um when your iPhone goes to sleep or",
    "start": "2558599",
    "end": "2564579"
  },
  {
    "text": "you're uh they they close the app out or they just switch apps you lose your",
    "start": "2564579",
    "end": "2571300"
  },
  {
    "text": "connection then you can lose your connection um",
    "start": "2571300",
    "end": "2576400"
  },
  {
    "text": "and web clients if you know hcp goes out or if your connection goes out so",
    "start": "2576400",
    "end": "2583900"
  },
  {
    "text": "um yes you do have to support a lot of reconnect oh a heartbeat logic as well",
    "start": "2583900",
    "end": "2590380"
  },
  {
    "text": "where there's uh heartbeat logic in the client that so it sends a heartbeat message to the server that the server",
    "start": "2590380",
    "end": "2597460"
  },
  {
    "text": "just ignores it just needs to happen to keep that connection open I think it's I",
    "start": "2597460",
    "end": "2602920"
  },
  {
    "text": "want to say 30 seconds that could be completely wrong but the default on how long a websocket",
    "start": "2602920",
    "end": "2610660"
  },
  {
    "text": "keeps its Connection open is something like that so you do have to have some sort of heartbeat logic in your",
    "start": "2610660",
    "end": "2617800"
  },
  {
    "text": "websocket connections and then reconnecting um",
    "start": "2617800",
    "end": "2624520"
  },
  {
    "text": "if the user has that token we can identify that user and get them back to the state that they were in if they if",
    "start": "2624520",
    "end": "2631480"
  },
  {
    "text": "we lose their token on the client side then we kind of just log them out say sorry they have to re-log in so um",
    "start": "2631480",
    "end": "2640480"
  },
  {
    "text": "yeah that's how we that's how we deal with them",
    "start": "2640480",
    "end": "2644579"
  },
  {
    "text": "any other questions yes",
    "start": "2645819",
    "end": "2650578"
  },
  {
    "text": "uh it's not it's won't be because we only send back the seconds up to the second",
    "start": "2656980",
    "end": "2664119"
  },
  {
    "text": "um but uh yes we have a lot of we did a lot",
    "start": "2664119",
    "end": "2670000"
  },
  {
    "text": "of testing around making sure that what it is saying on the client is kind of consistent across",
    "start": "2670000",
    "end": "2676359"
  },
  {
    "text": "all the devices and you can kind of see like you know things switching exactly",
    "start": "2676359",
    "end": "2682060"
  },
  {
    "text": "the same time it's pretty cool on the web and you know mobile and things like that so besides like those kinds of tests",
    "start": "2682060",
    "end": "2689200"
  },
  {
    "text": "those are spotting tests like yeah and we don't care about millisecond like down a millisecond so",
    "start": "2689200",
    "end": "2696339"
  },
  {
    "text": "yes do you support like multiple server instances and how do you sync the uh",
    "start": "2696339",
    "end": "2704140"
  },
  {
    "text": "not yet um so the good thing with elixir is it's very easy to kind of do that",
    "start": "2704140",
    "end": "2709839"
  },
  {
    "text": "nodes can talk to other nodes wherever they're at on the internet so you can spin up a new instance I have done that",
    "start": "2709839",
    "end": "2715240"
  },
  {
    "text": "on other applications not with web sockets um so so I can't comment on that but I know",
    "start": "2715240",
    "end": "2722800"
  },
  {
    "text": "that um elixir does support that pretty easily and that was another decision why",
    "start": "2722800",
    "end": "2728079"
  },
  {
    "text": "the fact that all the timers are just their own single OTP processes is because then those OTP processes can",
    "start": "2728079",
    "end": "2735700"
  },
  {
    "text": "talk wherever they're wherever they're at",
    "start": "2735700",
    "end": "2739619"
  },
  {
    "text": "any other questions thank you guys for your time I appreciate it enjoy the rest of your",
    "start": "2741640",
    "end": "2747700"
  },
  {
    "text": "conference thank you",
    "start": "2747700",
    "end": "2751440"
  }
]