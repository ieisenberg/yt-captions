[
  {
    "text": "all right lovely um I checked this morning and realized that I actually forgot to write the",
    "start": "2919",
    "end": "9160"
  },
  {
    "text": "abstract so hopefully uh um I will deliver on on what was there which was",
    "start": "9160",
    "end": "16720"
  },
  {
    "text": "granted very sparse um but we'll talk about path coverage in",
    "start": "16720",
    "end": "23199"
  },
  {
    "text": "GCC so um this is me this is my company and this is what I do I write p",
    "start": "23199",
    "end": "31039"
  },
  {
    "text": "so path coverage this is the next step in",
    "start": "31039",
    "end": "37120"
  },
  {
    "text": "structural coverage and talk a little bit about that and I would argue it's the next",
    "start": "37120",
    "end": "44520"
  },
  {
    "text": "generation of structural coverage um it's a new feature",
    "start": "44520",
    "end": "51160"
  },
  {
    "text": "we're aiming for GCC 15 which is probably going to be",
    "start": "51160",
    "end": "56320"
  },
  {
    "text": "released in May next year so hopefully we'll be in there and for this talk I",
    "start": "56320",
    "end": "62640"
  },
  {
    "text": "did a little bit of digging in the lineage of coverage support in in GCC uh in GCC 3.4 released in",
    "start": "62640",
    "end": "72600"
  },
  {
    "text": "1997 we got Branch coverage statement coverage and then in",
    "start": "72600",
    "end": "80439"
  },
  {
    "text": "2024 uh gcc1 14 got mcdc support and then hopefully now in 2025",
    "start": "80439",
    "end": "87880"
  },
  {
    "text": "NG GCC 15 will'll have path coverage this is what funding does to a",
    "start": "87880",
    "end": "95200"
  },
  {
    "text": "project um this is driven by the needs of space",
    "start": "95200",
    "end": "101040"
  },
  {
    "text": "flight um it's currently NASA that are funding this for their needs it turns out",
    "start": "101040",
    "end": "107399"
  },
  {
    "text": "software has to be pretty correct if you want to run it in space and hopefully the flights W crash",
    "start": "107399",
    "end": "114479"
  },
  {
    "text": "and I will be able to watch that and be a little bit part of it which is pretty neat so let's do a quick summary over",
    "start": "114479",
    "end": "121280"
  },
  {
    "text": "the over structural coverage I need to stop using this space bar structural",
    "start": "121280",
    "end": "127520"
  },
  {
    "text": "coverage um it's probably even more familiar if you do the examples you have",
    "start": "127520",
    "end": "133400"
  },
  {
    "text": "your statement and line coverage which is pretty obvious uh have you executed every",
    "start": "133400",
    "end": "139879"
  },
  {
    "text": "statement you say line coverage colloquially but it's kind of poor because you can have more statements per",
    "start": "139879",
    "end": "145920"
  },
  {
    "text": "line and you can have statements that span lines so statement is is the",
    "start": "145920",
    "end": "151040"
  },
  {
    "text": "correct one you have your branch coverage which is sometimes called decision",
    "start": "151040",
    "end": "156120"
  },
  {
    "text": "coverage um and then you have condition coverage which is then sometimes called Branch coverage depending on your",
    "start": "156120",
    "end": "161360"
  },
  {
    "text": "perspective and finally you have the most mysterious one I would say the",
    "start": "161360",
    "end": "167480"
  },
  {
    "text": "modified condition decision coverage is a bit of a mouthful so from now on I will say mcdc or that um The Rundown has every",
    "start": "167480",
    "end": "176519"
  },
  {
    "text": "statement in the program being executed if the statement hasn't been executed you haven't tested it",
    "start": "176519",
    "end": "183599"
  },
  {
    "text": "obviously um decision coverage has every decision in the program been made at",
    "start": "183599",
    "end": "188879"
  },
  {
    "text": "least once during testing this corresponds roughly true or",
    "start": "188879",
    "end": "197159"
  },
  {
    "text": "false to that question means did you take the then and the else like has both the den and else of a branch been",
    "start": "197159",
    "end": "205799"
  },
  {
    "text": "taken then you have condition coverage um where you ask the question has every",
    "start": "205799",
    "end": "212280"
  },
  {
    "text": "condition uh that is Boolean variable that you are evaluating been seen as both true and",
    "start": "212280",
    "end": "219360"
  },
  {
    "text": "false this is called Branch coverage sometimes because if you look at this from a graph perspective these are all",
    "start": "219360",
    "end": "225239"
  },
  {
    "text": "branches in the graph that's where the mixup happens an example of that is the",
    "start": "225239",
    "end": "231120"
  },
  {
    "text": "expression A and B and C right so in this case you have um you",
    "start": "231120",
    "end": "238799"
  },
  {
    "text": "have to evaluate C to true and false and by extension in order to even evaluate",
    "start": "238799",
    "end": "244280"
  },
  {
    "text": "it in the short circuiting semantics you need to evaluate A and B to true and",
    "start": "244280",
    "end": "249920"
  },
  {
    "text": "then finally well I mean we've all on that right the other one here is modified",
    "start": "249920",
    "end": "258639"
  },
  {
    "text": "condition decision coverage which states that or which asked the question has every condition taken on both true and",
    "start": "258639",
    "end": "266639"
  },
  {
    "text": "false while having independent decisive power over the",
    "start": "266639",
    "end": "272440"
  },
  {
    "text": "outcome if you want to learn all about or more about mcdc I did a talk on it",
    "start": "274199",
    "end": "280720"
  },
  {
    "text": "two years ago last year maybe there's a bit of material out there a few papers but the just of it is this so in this",
    "start": "280720",
    "end": "288479"
  },
  {
    "text": "case um we are evaluating A and B to true and",
    "start": "288479",
    "end": "294440"
  },
  {
    "text": "F sorry C2 false and the question is",
    "start": "294440",
    "end": "300479"
  },
  {
    "text": "A and B do they have uh any decisive power of the outcome and the",
    "start": "300479",
    "end": "307400"
  },
  {
    "text": "answer uh is no they're dominated by C because if you flip either of A and B to",
    "start": "307400",
    "end": "313720"
  },
  {
    "text": "false the outcome is still false so that's what we're testing",
    "start": "313720",
    "end": "319880"
  },
  {
    "text": "there now what's interesting is all of the metrics so far are what I would call",
    "start": "319880",
    "end": "324960"
  },
  {
    "text": "block oriented okay I'm going to expend on that in now cuz I I made up this term",
    "start": "324960",
    "end": "330680"
  },
  {
    "text": "and I have no idea if it's ever going to catch on but it's very limit they're they're Limited in scope they're focus on very much individual",
    "start": "330680",
    "end": "338680"
  },
  {
    "text": "units uh and we compose our programs of these individual units and",
    "start": "338680",
    "end": "344520"
  },
  {
    "text": "it's very important to to ensure that they're tested and and covered um you have your individual",
    "start": "344520",
    "end": "351319"
  },
  {
    "text": "statements your individual decisions and your individual conditions expanded to mcdc conditions",
    "start": "351319",
    "end": "358600"
  },
  {
    "text": "of individual decision i",
    "start": "358600",
    "end": "361840"
  },
  {
    "text": "s data flow data flows through the program it's a data is a river this is",
    "start": "366199",
    "end": "373479"
  },
  {
    "text": "really the art of uh analysis on data",
    "start": "373479",
    "end": "379560"
  },
  {
    "text": "dependence we want to understand how our program interacts depending on the data",
    "start": "380120",
    "end": "386319"
  },
  {
    "text": "that we're pushing through it breaking it down a little bit data",
    "start": "386319",
    "end": "392720"
  },
  {
    "text": "dependence tries to answer question like when a variable is used here where does",
    "start": "392720",
    "end": "398080"
  },
  {
    "text": "it come from is it used is it initialized is this obviously a common problem in in C and",
    "start": "398080",
    "end": "405479"
  },
  {
    "text": "C++ uh what is affected when I write to a variable right those are the",
    "start": "405479",
    "end": "412479"
  },
  {
    "text": "questions that we want to answer when we talk about data flow data flow analysis is a huge huge bit of static and dynamic",
    "start": "412479",
    "end": "417919"
  },
  {
    "text": "analysis and mcdc in particular unlike the other",
    "start": "417919",
    "end": "423280"
  },
  {
    "text": "criteria is a data flow problem because the interaction of data will actually",
    "start": "423280",
    "end": "428680"
  },
  {
    "text": "cancel out what would otherwise be an observable",
    "start": "428680",
    "end": "433360"
  },
  {
    "text": "effect this bleeds into coverage",
    "start": "434319",
    "end": "439440"
  },
  {
    "text": "right it bleeds into coverage through things like the definition use",
    "start": "439440",
    "end": "444840"
  },
  {
    "text": "pairs um this is the definition I found online I don't remember if it was",
    "start": "444840",
    "end": "449879"
  },
  {
    "text": "Wikipedia or not but it probably was uh it's the associations of definition uh",
    "start": "449879",
    "end": "455400"
  },
  {
    "text": "definitions and uses capture the flow of information through the",
    "start": "455400",
    "end": "461360"
  },
  {
    "text": "program okay I cannot follow that at",
    "start": "461360",
    "end": "466639"
  },
  {
    "text": "all um but if you break it down a bit it gets a little bit clearer definitions occur when variables",
    "start": "466639",
    "end": "475240"
  },
  {
    "text": "are declared initialized assigned or received as",
    "start": "475240",
    "end": "482039"
  },
  {
    "text": "parameters it's when you say a variable is defined this has a sort of temporal",
    "start": "482039",
    "end": "488360"
  },
  {
    "text": "component definitions are used when they appear in Expressions conditional",
    "start": "488360",
    "end": "494000"
  },
  {
    "text": "statements returns or pastas parameters that's that's when you consider using",
    "start": "494000",
    "end": "501360"
  },
  {
    "text": "them so here's an example program this this a it's a binary search",
    "start": "501400",
    "end": "510800"
  },
  {
    "text": "we're going to spend a little bit of time with this program because it's going to appear later in the presentation uh but we Define our Min",
    "start": "511960",
    "end": "518159"
  },
  {
    "text": "and Max there is even a bug in the slide look at that it says use Min uh on the",
    "start": "518159",
    "end": "524480"
  },
  {
    "text": "second line which is not supposed to I'm sorry it should just Define Max uh but when it calculates the mid it defines",
    "start": "524480",
    "end": "531360"
  },
  {
    "text": "the mid it uses the Min and Max to do it so that's an example of definition use pair likewise uh in the in in the check",
    "start": "531360",
    "end": "539760"
  },
  {
    "text": "for the Y Loop you will use both a mid X Min and Max and you can see how this goes",
    "start": "539760",
    "end": "547760"
  },
  {
    "text": "right so definition use or definition use pair coverage requires you to ensure that",
    "start": "549760",
    "end": "557240"
  },
  {
    "text": "every pair of definition uses are executed going back to this",
    "start": "557240",
    "end": "563120"
  },
  {
    "text": "example um when you define Max at n you're using it um in the calculation of",
    "start": "563120",
    "end": "573399"
  },
  {
    "text": "mid um and which also defines Max which is used in the top of the while loop",
    "start": "573440",
    "end": "579160"
  },
  {
    "text": "it's also used uh inside the while loop and then redefined again in lse so you need to um",
    "start": "579160",
    "end": "587240"
  },
  {
    "text": "test that both the max is used in the top of the Y Loop in the mid calculation",
    "start": "587240",
    "end": "593040"
  },
  {
    "text": "there and then likewise when you go through the loop from the Max and all kinds of pairs this grows very fast",
    "start": "593040",
    "end": "601320"
  },
  {
    "text": "the thing is definition use is it's kind of awkward but it has the power to",
    "start": "602560",
    "end": "607959"
  },
  {
    "text": "detect longer range effects because we're now not focused on on single blocks but we're focused on the",
    "start": "607959",
    "end": "613760"
  },
  {
    "text": "relationship between data when it's read and when it's written um John",
    "start": "613760",
    "end": "620720"
  },
  {
    "text": "Reger uh he was here last year actually he created this example on his blog so",
    "start": "620720",
    "end": "626720"
  },
  {
    "text": "John lives in the desert and breaks compilers for living uh if there was ever a more",
    "start": "626720",
    "end": "633320"
  },
  {
    "text": "perfect job description I I would like to know so this is a bit silly because",
    "start": "633320",
    "end": "638839"
  },
  {
    "text": "it's four lines long right uh but in this case you have a pointer and you can just assume that X here is just a global",
    "start": "638839",
    "end": "646440"
  },
  {
    "text": "integer um and if you take the a larger than 10 it will be set to",
    "start": "646440",
    "end": "652839"
  },
  {
    "text": "null and if you take the at the same time a is less than 20 you will return a",
    "start": "652839",
    "end": "658959"
  },
  {
    "text": "the reference pointer is obviously undefined Behavior right because you're der referencing an old pointer it's very",
    "start": "658959",
    "end": "664680"
  },
  {
    "text": "bad if a is uh less than sorry larger than less than 10 or um what is",
    "start": "664680",
    "end": "674000"
  },
  {
    "text": "it comparisons are difficult anyway you need to take both of these then for this to be a problem but it's perfectly",
    "start": "674000",
    "end": "681000"
  },
  {
    "text": "possible to achieve line statement and condition coverage for this without actually triggering the bug in your",
    "start": "681000",
    "end": "688079"
  },
  {
    "text": "tests now now definition use would catch that and you think ah I mean obviously",
    "start": "688079",
    "end": "694760"
  },
  {
    "text": "that's the thing right everyone's going to catch that um how about now I added",
    "start": "694760",
    "end": "700480"
  },
  {
    "text": "some line numbers if there's some 110 lines in between the definition of this",
    "start": "700480",
    "end": "706600"
  },
  {
    "text": "and the use would you now detect it right problem with slideware is that",
    "start": "706600",
    "end": "712079"
  },
  {
    "text": "it's it's all artificial right definition use would detect this",
    "start": "712079",
    "end": "719320"
  },
  {
    "text": "because you're defining uh p in line three and you're using it in Line 120 and you have to",
    "start": "719320",
    "end": "726680"
  },
  {
    "text": "test that pair in order to satisfy definition",
    "start": "726680",
    "end": "731480"
  },
  {
    "text": "use let's talk about graphs we represent the",
    "start": "732959",
    "end": "740880"
  },
  {
    "text": "structure of a program as a graph I'm stating that as a fact that's what compilers do but all kinds of tooling do",
    "start": "740880",
    "end": "748160"
  },
  {
    "text": "this and really how we think about it most of the time and the graph is actually very powerful",
    "start": "748160",
    "end": "754959"
  },
  {
    "text": "obstruction for structural analysis very very powerful um in this graph we have our",
    "start": "754959",
    "end": "763639"
  },
  {
    "text": "nodes they're called basic blocks I might use these terms interchangeably uh and a basic block is",
    "start": "763639",
    "end": "769720"
  },
  {
    "text": "just an uninterruptible stream of instructions it's really what it is so if you enter the basic block you are",
    "start": "769720",
    "end": "775680"
  },
  {
    "text": "going to execute all of those execution uh instructions sorry until you reach the end of the basic block at which",
    "start": "775680",
    "end": "780760"
  },
  {
    "text": "point there will be a decision on what to do next and your edges represent the",
    "start": "780760",
    "end": "786120"
  },
  {
    "text": "control uh the transfer of control between basic blocks um this is a bit much but a",
    "start": "786120",
    "end": "795959"
  },
  {
    "text": "cartoon goes a long way so here's the same program represented with basic blocks",
    "start": "795959",
    "end": "801839"
  },
  {
    "text": "with edges in between them uh and here you can see a very good",
    "start": "801839",
    "end": "809680"
  },
  {
    "text": "example of why condition coverage and Branch coverage are sometimes conflated because the second and third block from",
    "start": "809680",
    "end": "816320"
  },
  {
    "text": "the top is the the loop condition broken into two right one one per decision or",
    "start": "816320",
    "end": "824320"
  },
  {
    "text": "one per condition",
    "start": "824320",
    "end": "827000"
  },
  {
    "text": "rather this is how the compiler breaks on your program and this is where the analysis happens in a structure like",
    "start": "836000",
    "end": "844440"
  },
  {
    "text": "this okay we're going to simplify this cartoon by just giving them numbers and",
    "start": "845560",
    "end": "852519"
  },
  {
    "text": "hopefully if you can't tell then please trust me these are the same except I replaced the the code",
    "start": "852519",
    "end": "858199"
  },
  {
    "text": "contents uh with",
    "start": "858199",
    "end": "861639"
  },
  {
    "text": "numbers right now that we're all compiler Engineers path coverage is different from these block oriented",
    "start": "863800",
    "end": "870120"
  },
  {
    "text": "metrics because this works at a function level definition use works at a function",
    "start": "870120",
    "end": "875720"
  },
  {
    "text": "level right we're now not longer concerned with sort of addressable units we're concerned with with data flow",
    "start": "875720",
    "end": "882800"
  },
  {
    "text": "through this which is at a much larger unit so let's look an",
    "start": "882800",
    "end": "888680"
  },
  {
    "text": "example if you have a program um where you have two sequential decisions if x",
    "start": "888680",
    "end": "896040"
  },
  {
    "text": "then something else something if y something else something else if you",
    "start": "896040",
    "end": "902560"
  },
  {
    "text": "represent this as a graph it looks like this",
    "start": "902560",
    "end": "909360"
  },
  {
    "text": "okay through this program we have four",
    "start": "912519",
    "end": "918959"
  },
  {
    "text": "paths you have the first path where you take both dens the second path you take",
    "start": "918959",
    "end": "925360"
  },
  {
    "text": "the first then and the second else uh the third path is the uh first else and",
    "start": "925360",
    "end": "932040"
  },
  {
    "text": "the second then and finally you have both",
    "start": "932040",
    "end": "936839"
  },
  {
    "text": "elses some more computer science a walk is a sequence of edges which joins the",
    "start": "938480",
    "end": "944199"
  },
  {
    "text": "sequence of veres",
    "start": "944199",
    "end": "949000"
  },
  {
    "text": "okay hopefully this is all familiar from from uni uh whereas a path is the sequence of",
    "start": "950519",
    "end": "957800"
  },
  {
    "text": "edges in which which joins a sequence of vertices in which all of the vertices are distinct I just realized now I use",
    "start": "957800",
    "end": "965279"
  },
  {
    "text": "node earlier in vert vertex and vertices now they're synonyms mean the same thing",
    "start": "965279",
    "end": "971440"
  },
  {
    "text": "so okay a path is a sequence of edges which joins a sequence of nodes in which all nodes are",
    "start": "971440",
    "end": "979959"
  },
  {
    "text": "distinct the goal of path coverage is to ensure that your test Suite executes",
    "start": "983240",
    "end": "989120"
  },
  {
    "text": "every path there is in the program which gives us two immediate problems it gives us the problem of",
    "start": "989120",
    "end": "996480"
  },
  {
    "text": "loops and it gives us the problem of path explosion and we'll explore both of",
    "start": "996480",
    "end": "1001680"
  },
  {
    "text": "those so the problem with loops is that n iterations is different from n+",
    "start": "1001680",
    "end": "1007120"
  },
  {
    "text": "one right so 10 iterations is a different path than 11 iterations and",
    "start": "1007120",
    "end": "1013279"
  },
  {
    "text": "this has the unfortunate property of going to Infinity it's a pretty big space to",
    "start": "1013279",
    "end": "1021040"
  },
  {
    "text": "cover in this space there have been different strategies for different areas",
    "start": "1022079",
    "end": "1027959"
  },
  {
    "text": "so in the 1970s the goal was to execute all of the loops at least once in the 80s uh we talked about",
    "start": "1027959",
    "end": "1035880"
  },
  {
    "text": "exactly once in the '90s we're at more than once and finally in the 2000s which",
    "start": "1035880",
    "end": "1043520"
  },
  {
    "text": "is approaching on some 10 20 years uh we're talking about prime path",
    "start": "1043520",
    "end": "1050840"
  },
  {
    "text": "the other problem is the path explosion problem is that even very",
    "start": "1053280",
    "end": "1058640"
  },
  {
    "text": "small graphs can have a very very large number of",
    "start": "1058640",
    "end": "1063679"
  },
  {
    "text": "paths so we want to tune our definition a bit to overcome these practical",
    "start": "1063679",
    "end": "1070120"
  },
  {
    "text": "limitations one is we want to introduce a simple path which is a path where all",
    "start": "1070120",
    "end": "1075360"
  },
  {
    "text": "of the nodes are distinct except for possibly the first and the last the first and the last thing helps us",
    "start": "1075360",
    "end": "1081799"
  },
  {
    "text": "with loops that means you have you can execute the the full",
    "start": "1081799",
    "end": "1086759"
  },
  {
    "text": "loop and that gives us a useful definition of simple path coverage has",
    "start": "1087440",
    "end": "1092919"
  },
  {
    "text": "every simple path in the program been taken at least once that's what we want to figure",
    "start": "1092919",
    "end": "1101159"
  },
  {
    "text": "out going back to this if um well double if",
    "start": "1103039",
    "end": "1110320"
  },
  {
    "text": "program uh this program has 41 simple paths you might want to double",
    "start": "1110320",
    "end": "1119360"
  },
  {
    "text": "check that but I have twice and I might still get it wrong but it's bad simple",
    "start": "1119360",
    "end": "1125080"
  },
  {
    "text": "path goes very fast because uh path one two is distinct from 1 12",
    "start": "1125080",
    "end": "1131960"
  },
  {
    "text": "3 and 1 2 35 is distinct from 1 two 3 so this grows you know desly fast one thing",
    "start": "1132159",
    "end": "1140480"
  },
  {
    "text": "you can notice here is that in order to",
    "start": "1140480",
    "end": "1145559"
  },
  {
    "text": "um take one two and three in sequence can I already do one and",
    "start": "1145559",
    "end": "1150679"
  },
  {
    "text": "two so there's not really a need to track it so what we do is this we pick",
    "start": "1150679",
    "end": "1155880"
  },
  {
    "text": "out in this case four paths and by taking these paths so 1 2 3 5 6 8 1 2 3",
    "start": "1155880",
    "end": "1163559"
  },
  {
    "text": "5 6 8 is all left taking all left leaning branches",
    "start": "1163559",
    "end": "1169320"
  },
  {
    "text": "um we sort of cover everything uh by doing so remember with",
    "start": "1169320",
    "end": "1174360"
  },
  {
    "text": "the Bal where we had um four sets of paths that you could take through because you can take both both then both",
    "start": "1174360",
    "end": "1181120"
  },
  {
    "text": "El's and either or in either direction or sorry in either order uh which sums up to four so we",
    "start": "1181120",
    "end": "1187840"
  },
  {
    "text": "really have four interesting Parts there and 37 not so interesting",
    "start": "1187840",
    "end": "1195519"
  },
  {
    "text": "paths which gives us a good definition of the prime path which is a simple path",
    "start": "1195919",
    "end": "1201120"
  },
  {
    "text": "that is not a sub path of any other simple path for the same",
    "start": "1201120",
    "end": "1207679"
  },
  {
    "text": "graph okay Prime paths and Loops so Loops must be taken skipped and",
    "start": "1208200",
    "end": "1217760"
  },
  {
    "text": "exited that's our goal and what this goal gives us is it gives",
    "start": "1217760",
    "end": "1224039"
  },
  {
    "text": "us pretty decent coverage over the behavior of loops while at the same time keeping um the",
    "start": "1224039",
    "end": "1231520"
  },
  {
    "text": "number or keeping the growth of paths somewhat in",
    "start": "1231520",
    "end": "1237158"
  },
  {
    "text": "check so let's go back to our our binary search because it actually has a loop unlike the double",
    "start": "1237360",
    "end": "1242600"
  },
  {
    "text": "if now this graph has 20 Prime",
    "start": "1242600",
    "end": "1250679"
  },
  {
    "text": "paths Which is less than infinite if we would do all the Loops n plus one and",
    "start": "1251080",
    "end": "1256840"
  },
  {
    "text": "these are all of them notice especially the ones that start",
    "start": "1256840",
    "end": "1262760"
  },
  {
    "text": "with four is by the middle of the list there so four five 7 2 3 4 4 5 7 2",
    "start": "1262760",
    "end": "1270039"
  },
  {
    "text": "38 um is an example of both um taking",
    "start": "1270039",
    "end": "1275679"
  },
  {
    "text": "the loop and coming back to the loop header in the other case it's taking the loop",
    "start": "1275679",
    "end": "1281480"
  },
  {
    "text": "and going to the exit of the function um you have was it 46",
    "start": "1281480",
    "end": "1289400"
  },
  {
    "text": "2 3 4 which is taking the loop and taking the other decision in",
    "start": "1289400",
    "end": "1294880"
  },
  {
    "text": "it so this is an example path where you go from the top of the function directly",
    "start": "1300320",
    "end": "1305520"
  },
  {
    "text": "to the exit and you skip the loop obviously that has to be covered",
    "start": "1305520",
    "end": "1311440"
  },
  {
    "text": "under this because you really have four interesting variations here this is the",
    "start": "1311440",
    "end": "1317159"
  },
  {
    "text": "case where you start at the top and you go through the loop what happens after seven we don't care for this path",
    "start": "1317159",
    "end": "1323080"
  },
  {
    "text": "because in practice this is probably going to Loop a bazillion more times right but we now have the path that goes",
    "start": "1323080",
    "end": "1329480"
  },
  {
    "text": "from the top all the way to the end of the loop uh and then it would now start repeating so this is taking entering the",
    "start": "1329480",
    "end": "1338640"
  },
  {
    "text": "loop we have this case uh where we start in the middle of",
    "start": "1338640",
    "end": "1344559"
  },
  {
    "text": "the loop counting we take the loop and we re-enter the loop",
    "start": "1344559",
    "end": "1350480"
  },
  {
    "text": "so you're going around the loop and finally somewhere where you",
    "start": "1352279",
    "end": "1357400"
  },
  {
    "text": "exit the loop right so we now have the case where we skip the loop we enter the",
    "start": "1357400",
    "end": "1363559"
  },
  {
    "text": "loop and we exit the loop and we exit the program from the loop so path coverage sorry Prime path",
    "start": "1363559",
    "end": "1370279"
  },
  {
    "text": "coverage strikes a pretty good balance between the quality of the coverage in terms of what defects you can expect to",
    "start": "1370279",
    "end": "1375960"
  },
  {
    "text": "find the growth and the number of tests and loot",
    "start": "1375960",
    "end": "1381360"
  },
  {
    "text": "Behavior so what we have is a little bit of a demo and uh low demos are great",
    "start": "1382320",
    "end": "1387960"
  },
  {
    "text": "because they never work uh I have to find my shell okay",
    "start": "1387960",
    "end": "1393520"
  },
  {
    "text": "it's there",
    "start": "1393520",
    "end": "1398880"
  },
  {
    "text": "it's there we go there we do not",
    "start": "1399480",
    "end": "1405120"
  },
  {
    "text": "go where is it oh okay my",
    "start": "1405120",
    "end": "1410840"
  },
  {
    "text": "apologies there we go make it this bit bigger so I have a",
    "start": "1412120",
    "end": "1418000"
  },
  {
    "text": "program here um which you might",
    "start": "1418000",
    "end": "1424559"
  },
  {
    "text": "recognize so I've had to clean this up a bit in order to make it actually run",
    "start": "1424559",
    "end": "1429600"
  },
  {
    "text": "because the slide one don't I've also mixed it up a bit by adding uh a Turner at the end",
    "start": "1429600",
    "end": "1438919"
  },
  {
    "text": "because we need to return right and then what I have is a very",
    "start": "1438919",
    "end": "1445120"
  },
  {
    "text": "nice Hy stack of well anyone recognize",
    "start": "1445120",
    "end": "1450919"
  },
  {
    "text": "it yeah it's the Fibonacci except I had to skip the first one because I don't",
    "start": "1450919",
    "end": "1457559"
  },
  {
    "text": "want repeated numbers in my sorted sequence for the binary search and then",
    "start": "1457559",
    "end": "1462760"
  },
  {
    "text": "a Mainer just does it so what we're going to do is we're",
    "start": "1462760",
    "end": "1469200"
  },
  {
    "text": "going to compile it and",
    "start": "1469200",
    "end": "1476000"
  },
  {
    "text": "um this is a development build of GCC 15 so this is",
    "start": "1476880",
    "end": "1483640"
  },
  {
    "text": "not yet available unless you pull some patches from a mailing",
    "start": "1483640",
    "end": "1488559"
  },
  {
    "text": "list you pass a coverage and the new flag fpath coverage",
    "start": "1493159",
    "end": "1499159"
  },
  {
    "text": "and it builds",
    "start": "1499159",
    "end": "1504279"
  },
  {
    "text": "um and what this will produce is this gcn file which is a notes which is gcov format for describing the",
    "start": "1504440",
    "end": "1512880"
  },
  {
    "text": "program and then we're going to run it and I forgot to make a note of the input we want to give it so let's there we",
    "start": "1512880",
    "end": "1521080"
  },
  {
    "text": "go so um we take our gcov uh and give give",
    "start": "1521080",
    "end": "1528399"
  },
  {
    "text": "it a new flag Prime let's do standard out always I cannot",
    "start": "1528399",
    "end": "1534640"
  },
  {
    "text": "type Prime path this was much harder than I",
    "start": "1534640",
    "end": "1540320"
  },
  {
    "text": "expected it to be okay and just give it BS okay can I make it a bit smaller how",
    "start": "1540320",
    "end": "1545799"
  },
  {
    "text": "is it to read back there Jason it's okay is this okay",
    "start": "1545799",
    "end": "1551279"
  },
  {
    "text": "still okay well and here we're actually uh getting",
    "start": "1551279",
    "end": "1557640"
  },
  {
    "text": "a report um Prime",
    "start": "1557640",
    "end": "1565840"
  },
  {
    "text": "paths we're getting a report uh on the number of",
    "start": "1565840",
    "end": "1571679"
  },
  {
    "text": "paths 0 out of 24 so uh we got another four pass",
    "start": "1571679",
    "end": "1577159"
  },
  {
    "text": "because of the Turner this is why it differs from what was on the slide on top of that uh job here actually tells",
    "start": "1577159",
    "end": "1585240"
  },
  {
    "text": "us what is missing I might actually have an old build",
    "start": "1585240",
    "end": "1590880"
  },
  {
    "text": "here pardon yeah I haven't run the program yet no I have not run the",
    "start": "1593320",
    "end": "1598520"
  },
  {
    "text": "program yet so this is what we're getting 0 out of 24",
    "start": "1598520",
    "end": "1604200"
  },
  {
    "text": "right um since GCC 14 I think it be made for 14 we can",
    "start": "1604320",
    "end": "1610399"
  },
  {
    "text": "exclude main because we don't care about Main and only get the BS",
    "start": "1610399",
    "end": "1616520"
  },
  {
    "text": "one just makes a little bit need to",
    "start": "1616520",
    "end": "1621720"
  },
  {
    "text": "okay we run it and we search for five and we get three because it's a",
    "start": "1622960",
    "end": "1629440"
  },
  {
    "text": "position three which is not the uh it's the fourth Fibonacci number but we're",
    "start": "1629440",
    "end": "1635679"
  },
  {
    "text": "going to be one off here as is tradition in computer science and if we run it",
    "start": "1635679",
    "end": "1643279"
  },
  {
    "text": "again uh let's do head actually",
    "start": "1643279",
    "end": "1649919"
  },
  {
    "text": "the number of PA cover has changed from 0 to 12 so here's thing even though there are",
    "start": "1650360",
    "end": "1656840"
  },
  {
    "text": "bazillion paths uh a lot of them will overlap in actual execution so you don't necessarily need 24 test cases to have",
    "start": "1656840",
    "end": "1663600"
  },
  {
    "text": "whole path coverage for this",
    "start": "1663600",
    "end": "1670919"
  },
  {
    "text": "okay uh let's run it again and not find the element that we care about so we run",
    "start": "1670919",
    "end": "1676480"
  },
  {
    "text": "it with six should be not found lovely 13 out of 24 so that test case",
    "start": "1676480",
    "end": "1684159"
  },
  {
    "text": "gave us one more path but it gave us one more path so we're very happy about that Prime path sorry I'm going to use",
    "start": "1684159",
    "end": "1691000"
  },
  {
    "text": "path and Prime path interchangeably here thank you now it I it's Prime",
    "start": "1691000",
    "end": "1698240"
  },
  {
    "text": "path all right so if you",
    "start": "1698320",
    "end": "1705799"
  },
  {
    "text": "um ask this about branches you can tell that all of the branches in this program have been taken at least",
    "start": "1705799",
    "end": "1712360"
  },
  {
    "text": "once but we're still nowhere near of achieving path coverage so obviously this is much stronger",
    "start": "1712360",
    "end": "1718919"
  },
  {
    "text": "right to enter that point the the branches it reports here are only for",
    "start": "1723559",
    "end": "1728919"
  },
  {
    "text": "the branches in this W Loop which is just an example of how sort of block local this is or statement local this is",
    "start": "1728919",
    "end": "1736159"
  },
  {
    "text": "expression local but path coverage works at a function",
    "start": "1736159",
    "end": "1742360"
  },
  {
    "text": "level so it has to be reported at a function level now that report was pretty dense and we want to report for",
    "start": "1742360",
    "end": "1749679"
  },
  {
    "text": "humans and you know occasionally machines",
    "start": "1749679",
    "end": "1756279"
  },
  {
    "text": "so I thought of something that when I figured it out it felt so um obvious and",
    "start": "1756279",
    "end": "1761480"
  },
  {
    "text": "inevitable that it has to be which is this format here uh Prime if you give it Prime path",
    "start": "1761480",
    "end": "1768880"
  },
  {
    "text": "Source you will get a bunch of these paths that you haven't covered and it will list you the lines that you H in",
    "start": "1768880",
    "end": "1776519"
  },
  {
    "text": "the order you need to execute them in order to cover that path so in this case path zero we need",
    "start": "1776519",
    "end": "1784200"
  },
  {
    "text": "to cover a path from the start of the function",
    "start": "1784200",
    "end": "1790000"
  },
  {
    "text": "where the middle element is not the one we're looking",
    "start": "1790000",
    "end": "1795919"
  },
  {
    "text": "for and the um minimal or the lower element the",
    "start": "1795919",
    "end": "1801720"
  },
  {
    "text": "lower range of the this um input that we're searching is still",
    "start": "1801720",
    "end": "1809360"
  },
  {
    "text": "less than the maximum and finally while the x is larger than the element we're",
    "start": "1809360",
    "end": "1814559"
  },
  {
    "text": "looking for okay the needle must be shown to be",
    "start": "1814559",
    "end": "1820559"
  },
  {
    "text": "larger than the middle element on the first iteration is what that path translates",
    "start": "1820559",
    "end": "1826720"
  },
  {
    "text": "to and here go actually tells us it tells us exactly",
    "start": "1826720",
    "end": "1832320"
  },
  {
    "text": "that so we figure it out okay let's try",
    "start": "1832320",
    "end": "1838480"
  },
  {
    "text": "it well that would cover that would cover it can even confirm by doing here",
    "start": "1839679",
    "end": "1846559"
  },
  {
    "text": "Prime paths source and here's the let's make head a",
    "start": "1846559",
    "end": "1853760"
  },
  {
    "text": "little bit bigger shall we right pad zero true true true so and",
    "start": "1853760",
    "end": "1861159"
  },
  {
    "text": "this is the decision you need to make at every condition in order to do the",
    "start": "1861159",
    "end": "1866960"
  },
  {
    "text": "path so we run BS with 700 not",
    "start": "1866960",
    "end": "1872120"
  },
  {
    "text": "found and now path zero is covered and we're up at path two that's the first one we haven't covered",
    "start": "1872120",
    "end": "1880600"
  },
  {
    "text": "lovely at this point it list this is a quick way of just listing all of the",
    "start": "1884880",
    "end": "1890039"
  },
  {
    "text": "paths you have yet to cover this is quite a big bunch so let's do an",
    "start": "1890039",
    "end": "1896080"
  },
  {
    "text": "experiment um let's do a for",
    "start": "1896080",
    "end": "1900760"
  },
  {
    "text": "Loop does that look okay let's give it a go so it there's a lot of elements you",
    "start": "1906200",
    "end": "1912159"
  },
  {
    "text": "can't find which is Maybe unsurprising",
    "start": "1912159",
    "end": "1916039"
  },
  {
    "text": "this case let's give it to a less so we gave it the input 0 through",
    "start": "1921399",
    "end": "1927159"
  },
  {
    "text": "5,000 which should both hit and miss every element in the list on either side",
    "start": "1927159",
    "end": "1932840"
  },
  {
    "text": "and there are 16 out of 24 paths we still haven't covered okay what's going",
    "start": "1932840",
    "end": "1939880"
  },
  {
    "text": "on so let's look at this program for a bit oh there we go let's look at this path okay so in",
    "start": "1939880",
    "end": "1947159"
  },
  {
    "text": "this case we need to uh start from the top not find the",
    "start": "1947159",
    "end": "1952919"
  },
  {
    "text": "first element uh in the middle or at the same time uh we have to fail the check where",
    "start": "1952919",
    "end": "1960519"
  },
  {
    "text": "we're still in range and at the same time find the",
    "start": "1960519",
    "end": "1966120"
  },
  {
    "text": "element so really what we're asking here",
    "start": "1966960",
    "end": "1973000"
  },
  {
    "text": "is we want both of these to be true at the same time we want both the the middle element to be X and the middle",
    "start": "1973000",
    "end": "1980240"
  },
  {
    "text": "element to not be X at the same time I think that's going to be very",
    "start": "1980240",
    "end": "1988679"
  },
  {
    "text": "difficult okay so let's uh before we move on let's look at some reports from",
    "start": "1988679",
    "end": "1993799"
  },
  {
    "text": "machines and maybe some humans Some Humans this is the one you saw the lines",
    "start": "1993799",
    "end": "2002639"
  },
  {
    "text": "one this reports the exact same information as the one that printed the source this one is better for machines",
    "start": "2002639",
    "end": "2008519"
  },
  {
    "text": "because it's line oriented so what it does here is it prints out the lines the last line of the block that you need to",
    "start": "2008519",
    "end": "2014679"
  },
  {
    "text": "run in order to cover that path and it includes the decision you need to make this is much denser and it's useful when",
    "start": "2014679",
    "end": "2021159"
  },
  {
    "text": "you're iterating on this because you can grab and you can just sort of pay attention to how that set moves because",
    "start": "2021159",
    "end": "2027799"
  },
  {
    "text": "it's denser so you have a a neater working set this is not so great for figuring out what the path is and how it",
    "start": "2027799",
    "end": "2034159"
  },
  {
    "text": "behaves and and trying to understand the relationship uh relationship that you have in your program but it's very",
    "start": "2034159",
    "end": "2040519"
  },
  {
    "text": "useful",
    "start": "2040519",
    "end": "2043519"
  },
  {
    "text": "regardless here's a comparison of the two outputs so this is for the same path you",
    "start": "2056520",
    "end": "2063560"
  },
  {
    "text": "can tell it's path two not covered uh you list the decision on lines 9 and 17",
    "start": "2063560",
    "end": "2070520"
  },
  {
    "text": "as uh true true and false and you can tell it's true true and false on 99 and",
    "start": "2070520",
    "end": "2076158"
  },
  {
    "text": "17 so it's all the same information it's just in a much more denser format which is useful when you want to like monitor",
    "start": "2076159",
    "end": "2083079"
  },
  {
    "text": "it with machines let's talk about subsumption so",
    "start": "2083079",
    "end": "2091800"
  },
  {
    "text": "who here has not programmed C++ No Hands lovely all of you know what",
    "start": "2091800",
    "end": "2097880"
  },
  {
    "text": "subsumption means right because it's in the standard which you have",
    "start": "2097880",
    "end": "2102520"
  },
  {
    "text": "read to subsume means to include something or someone as a part of a",
    "start": "2104880",
    "end": "2109960"
  },
  {
    "text": "larger group I looked that up in the Cambridge English dictionary which is an authority on",
    "start": "2109960",
    "end": "2115359"
  },
  {
    "text": "C++ and what that means for coverage is that",
    "start": "2115359",
    "end": "2120440"
  },
  {
    "text": "a coverage Criterion one will subsume the coverage Criterion",
    "start": "2120440",
    "end": "2126440"
  },
  {
    "text": "two if satisfying one also guarantees satisfying two",
    "start": "2126440",
    "end": "2133000"
  },
  {
    "text": "right because the question some this is why care well condition coverage implies",
    "start": "2134560",
    "end": "2140240"
  },
  {
    "text": "decision coverage if you have guaranteed or shown that every input to a Boolean",
    "start": "2140240",
    "end": "2146079"
  },
  {
    "text": "function has been taken or evaluated then obviously you have evaluated both",
    "start": "2146079",
    "end": "2152000"
  },
  {
    "text": "outcomes unless it's a topology in which case you've proven that it's a toy",
    "start": "2152000",
    "end": "2159079"
  },
  {
    "text": "likewise condition coverage implies statement coverage because the only way you could not cover a statement is if",
    "start": "2161280",
    "end": "2166800"
  },
  {
    "text": "you're not taking the branch that statement is a part of and by covering",
    "start": "2166800",
    "end": "2172480"
  },
  {
    "text": "all of the conditions you cover all the decisions and by extension all the",
    "start": "2172480",
    "end": "2178078"
  },
  {
    "text": "statements and here's the kicker who by now",
    "start": "2178800",
    "end": "2184000"
  },
  {
    "text": "remembers definition use one um maybe two maybe two um definition",
    "start": "2184000",
    "end": "2195160"
  },
  {
    "text": "use catches it's a data flow analysis that catches just a remarkable set of",
    "start": "2195160",
    "end": "2201480"
  },
  {
    "text": "bugs It's very effective at that over long ranges because it has to track these pairs right but I cannot for the",
    "start": "2201480",
    "end": "2209440"
  },
  {
    "text": "life of me remember it and analyzing it by hand is just miserable and tools don't really do that very",
    "start": "2209440",
    "end": "2216160"
  },
  {
    "text": "well but path coverage has been shown to subsume statement coverage Branch",
    "start": "2216160",
    "end": "2222000"
  },
  {
    "text": "coverage condition coverage roundtrip coverage and definition use now what",
    "start": "2222000",
    "end": "2227800"
  },
  {
    "text": "that gives you is a much simpler metric because we",
    "start": "2227800",
    "end": "2233040"
  },
  {
    "text": "can all relate to paths to our program it gives us a very simple metric that at",
    "start": "2233040",
    "end": "2238440"
  },
  {
    "text": "the same time you can throw away the measurement of all of these things because they're sort of implied by the time you get to the condition cover uh",
    "start": "2238440",
    "end": "2243920"
  },
  {
    "text": "sorry the the prime path coverage on top on top of that it is very sensitive to dependent conditionals",
    "start": "2243920",
    "end": "2250760"
  },
  {
    "text": "and infeasible paths and both of those and especially in the context of of",
    "start": "2250760",
    "end": "2256200"
  },
  {
    "text": "safety or yeah safety critical systems knowing about dependent conditions",
    "start": "2256200",
    "end": "2262040"
  },
  {
    "text": "knowing about infusible path is incredibly important to make statements on the operation of your",
    "start": "2262040",
    "end": "2269839"
  },
  {
    "text": "software combined with mcdc you now have a very strong set of metrics that are",
    "start": "2269839",
    "end": "2275839"
  },
  {
    "text": "pretty easy to understand Maybe mcdc less so than Prime path coverage um sort of for",
    "start": "2275839",
    "end": "2283720"
  },
  {
    "text": "free right and the good thing is it's it's still simple to reason",
    "start": "2283720",
    "end": "2290240"
  },
  {
    "text": "about so let's talk about effective coverage because I've done all of this",
    "start": "2291599",
    "end": "2298200"
  },
  {
    "text": "talk sort of under the assumption that you care about coverage in the first",
    "start": "2298200",
    "end": "2303400"
  },
  {
    "text": "place which I know can be a bit of a mixbag",
    "start": "2303400",
    "end": "2307760"
  },
  {
    "text": "the most important tests you do are derived directly from your functional",
    "start": "2309520",
    "end": "2315040"
  },
  {
    "text": "requirements like what does this software need to do have you verified that it does what it needs to do in the",
    "start": "2315040",
    "end": "2320720"
  },
  {
    "text": "circumstances it needs to do it these are tests that are derived from",
    "start": "2320720",
    "end": "2328960"
  },
  {
    "text": "from properties they could be handrolled driven by stories bug reports fuzzing bunch of sources and the thing",
    "start": "2328960",
    "end": "2336720"
  },
  {
    "text": "is coverage on it own is pretty worthless but it does complement testing so this this is a strategy for",
    "start": "2336720",
    "end": "2343440"
  },
  {
    "text": "evaluating how well your functional test Su how your um functional Pro sorry",
    "start": "2343440",
    "end": "2349720"
  },
  {
    "text": "testing processes map onto your requirements and onto the behaviors that you",
    "start": "2349720",
    "end": "2354960"
  },
  {
    "text": "want so coverage is kind of about understanding the tests right you're",
    "start": "2354960",
    "end": "2360280"
  },
  {
    "text": "you're not writing a test to satisfy coverage you're uh using coverage to figure out what tests or sorry what",
    "start": "2360280",
    "end": "2366880"
  },
  {
    "text": "functions are AR properly tested I would actually go a bit of a",
    "start": "2366880",
    "end": "2372440"
  },
  {
    "text": "limb and say what you're reallying is trying to understand the spec right because if you have functional test it's",
    "start": "2372440",
    "end": "2379240"
  },
  {
    "text": "reasonable to assume that you have pretty good coverage because either way uh if you don't you have either a bug in",
    "start": "2379240",
    "end": "2386000"
  },
  {
    "text": "your test in your program or in your",
    "start": "2386000",
    "end": "2391040"
  },
  {
    "text": "spec now remember that the first 90% of the testing accounts from",
    "start": "2391079",
    "end": "2396599"
  },
  {
    "text": "about 90% % of the bugs and the remaining 90% of the testing will account for the other",
    "start": "2396599",
    "end": "2403279"
  },
  {
    "text": "90% there are some practical limitations to this still there is a problem we can't get away from which is the path",
    "start": "2406040",
    "end": "2412440"
  },
  {
    "text": "explosion the problem is that the number of paths grows exponentially with the",
    "start": "2412440",
    "end": "2418280"
  },
  {
    "text": "complexity of your program so what this does do is it forces you into a specific style of programming if you want to",
    "start": "2418280",
    "end": "2425160"
  },
  {
    "text": "satisfy Prime path coverage that's kind of okay in a way because",
    "start": "2425160",
    "end": "2430720"
  },
  {
    "text": "your goal here is to have code that is easy to reason about and easy to reason the functionality about and maybe this",
    "start": "2430720",
    "end": "2436160"
  },
  {
    "text": "sort of goes a long way for that heuristics will control when the instrumentation gives",
    "start": "2436160",
    "end": "2441839"
  },
  {
    "text": "up um the goal with that is we we we need to avoid uh ballooning compile times and",
    "start": "2441839",
    "end": "2449520"
  },
  {
    "text": "object sizes and I have an example of that in a old school C program called",
    "start": "2449520",
    "end": "2454960"
  },
  {
    "text": "tree which is an alternative to LS sometimes to dump the names in directories we might have used it so if",
    "start": "2454960",
    "end": "2463200"
  },
  {
    "text": "you check out Unix stre to5 or whatever the latest version is",
    "start": "2463200",
    "end": "2469480"
  },
  {
    "text": "206 205 maybe you will find the tree. C program has",
    "start": "2469480",
    "end": "2476359"
  },
  {
    "text": "1,429 lines um over 31 functions and then if",
    "start": "2476359",
    "end": "2481960"
  },
  {
    "text": "you build it with coverage enabled um it takes on my machine about",
    "start": "2481960",
    "end": "2489160"
  },
  {
    "text": "well slightly less than 200 milliseconds and produ it and this is with just",
    "start": "2489160",
    "end": "2494440"
  },
  {
    "text": "Branch coverage um and produces a 104k",
    "start": "2494440",
    "end": "2500599"
  },
  {
    "text": "executable if you run it with path coverage it takes just over half a second so roughly",
    "start": "2500599",
    "end": "2506760"
  },
  {
    "text": "3x a little bit more and produces a 264k",
    "start": "2506760",
    "end": "2513920"
  },
  {
    "text": "object B when you compile this with an",
    "start": "2514520",
    "end": "2521760"
  },
  {
    "text": "effectively infinite limit to the number of paths before instrumentation gives up the picture is a bit different it looks",
    "start": "2521760",
    "end": "2527760"
  },
  {
    "text": "like this it will compile for 2 minutes and 26 seconds produce an object file of 32",
    "start": "2527760",
    "end": "2535240"
  },
  {
    "text": "megabytes and when you strip it you're done at 28 megabytes this is the little source file that",
    "start": "2535240",
    "end": "2542720"
  },
  {
    "text": "could two functions account for all of that there are about a million paths",
    "start": "2543520",
    "end": "2550480"
  },
  {
    "text": "each so this whole process in GCC is built on",
    "start": "2550920",
    "end": "2556079"
  },
  {
    "text": "computer science uh sometimes I hear Engineers say that computer science doesn't matter it does um I implemented",
    "start": "2556079",
    "end": "2563760"
  },
  {
    "text": "an algorithm most of an algorithm described by uh a few fellows called",
    "start": "2563760",
    "end": "2568920"
  },
  {
    "text": "fley and aashi I'm probably not pronouncing that right but my my FY is pretty terrible uh which is describing a",
    "start": "2568920",
    "end": "2576520"
  },
  {
    "text": "paper called the time and space efficient compositional method um for Prime and test path",
    "start": "2576520",
    "end": "2583040"
  },
  {
    "text": "generation so in there what we do is we compute the component graph of of the",
    "start": "2583040",
    "end": "2588640"
  },
  {
    "text": "CFG of the control flow graph that we saw earlier we find the prime paths in",
    "start": "2588640",
    "end": "2593800"
  },
  {
    "text": "the components and we find the prime paths uh of the component graph by brute",
    "start": "2593800",
    "end": "2599200"
  },
  {
    "text": "forcing and then we do some clever merging of those",
    "start": "2599200",
    "end": "2606319"
  },
  {
    "text": "so remember subsumption subsumption is a nice word because you can also apply to this idea of subpaths that aren't to be",
    "start": "2607920",
    "end": "2615160"
  },
  {
    "text": "included because they orange Prime right what we need uh well actually so",
    "start": "2615160",
    "end": "2621000"
  },
  {
    "text": "before we get to that we use a very compact set representation so what's nice about Parts is that parts are",
    "start": "2621000",
    "end": "2626680"
  },
  {
    "text": "essentially strings where the alphabet is drawn from node IDs that you can just distribute of",
    "start": "2626680",
    "end": "2632200"
  },
  {
    "text": "the blocks by lexicographically ordering that you can use the the path index",
    "start": "2632200",
    "end": "2639000"
  },
  {
    "text": "which is what you're actually seeing in the G covve as an index in a large large bit set which we use to very quickly",
    "start": "2639000",
    "end": "2645720"
  },
  {
    "text": "record paths both as we're going and uh when we have them",
    "start": "2645720",
    "end": "2651720"
  },
  {
    "text": "covered to eliminate subpaths my goodness to eliminate subpaths we use uh",
    "start": "2652119",
    "end": "2657839"
  },
  {
    "text": "suffix tree uh I haven't seen that described by",
    "start": "2657839",
    "end": "2663040"
  },
  {
    "text": "anyone that tries to tackle the problem of of prime path generation uh honestly this is a pretty",
    "start": "2663040",
    "end": "2670920"
  },
  {
    "text": "brilliant idea because suffix tree naturally has all of the properties where it will eliminate sameness in an",
    "start": "2670920",
    "end": "2677640"
  },
  {
    "text": "effective way so I use a okay algorithm which is uh",
    "start": "2677640",
    "end": "2684640"
  },
  {
    "text": "Square um I think that can be approved upon but",
    "start": "2684640",
    "end": "2690400"
  },
  {
    "text": "this also gives me a very compact implementation which turns out to be very fast in practice because I can I",
    "start": "2690400",
    "end": "2695440"
  },
  {
    "text": "can store shared paths very densely so I only need to store our pass",
    "start": "2695440",
    "end": "2701520"
  },
  {
    "text": "deviate and finally when we do the the uh there is some optimization where we",
    "start": "2701520",
    "end": "2707800"
  },
  {
    "text": "try and reduce the uh the amount of instructions we emit by doing some folding and redundant code elimination",
    "start": "2707800",
    "end": "2714920"
  },
  {
    "text": "that to turn out to be a pretty interesting problem so go try it out go go cover",
    "start": "2714920",
    "end": "2721280"
  },
  {
    "text": "some paths um this is how the sausage is made um would you like to see how to",
    "start": "2721280",
    "end": "2727119"
  },
  {
    "text": "improve the binary search to improve path coverage yes lovely I'd be very",
    "start": "2727119",
    "end": "2732760"
  },
  {
    "text": "embarrassing if you said no I don't know why I gave you the choice there we go okay so the problem",
    "start": "2732760",
    "end": "2739880"
  },
  {
    "text": "here is that if you look at this might even",
    "start": "2739880",
    "end": "2745400"
  },
  {
    "text": "go so actually the the implementation of the binary search I stole from some",
    "start": "2746960",
    "end": "2752400"
  },
  {
    "text": "Swedish guys um lecture notes and what's great about that is that the implementation is terrible because",
    "start": "2752400",
    "end": "2759319"
  },
  {
    "text": "binary research is hard and what you will notice here is that you have all of",
    "start": "2759319",
    "end": "2764680"
  },
  {
    "text": "these interdependencies between data that gives you literally 10 15 parts that you can't",
    "start": "2764680",
    "end": "2772079"
  },
  {
    "text": "cover because you have your Mutual exclusion you you have these contradictions that you saw right was",
    "start": "2772079",
    "end": "2778480"
  },
  {
    "text": "that the slide after no it wasn't so the here for example too uh",
    "start": "2778480",
    "end": "2785640"
  },
  {
    "text": "you're using the mid which you're kind of deciding upon in the loop header and then you're Computing mid again and it's",
    "start": "2785640",
    "end": "2791319"
  },
  {
    "text": "just a lot of dependencies and what's nice is that uh",
    "start": "2791319",
    "end": "2797280"
  },
  {
    "text": "if you saw from the report after running literally every",
    "start": "2797280",
    "end": "2802599"
  },
  {
    "text": "input that makes sense you're running 5,000 inputs 5,000 integers that you're searching for here you're you're still",
    "start": "2802599",
    "end": "2809000"
  },
  {
    "text": "left with what is that eight paths that you literally cannot cover right so you",
    "start": "2809000",
    "end": "2815400"
  },
  {
    "text": "have eight paths that are just dead and just eliminating them and making sort of the qualified decision is this a",
    "start": "2815400",
    "end": "2821440"
  },
  {
    "text": "problem yes or no and obviously this program is borderline trivial and I say it's trivial but it's super bad and",
    "start": "2821440",
    "end": "2827200"
  },
  {
    "text": "actually the lecture notes had a bug it used the wrong comparison you can now actually make a",
    "start": "2827200",
    "end": "2833800"
  },
  {
    "text": "qualified decision is this a problem or not all you need to do to fix",
    "start": "2833800",
    "end": "2839319"
  },
  {
    "text": "this um because I mentioned you this kind of forces you into specific style",
    "start": "2839319",
    "end": "2845319"
  },
  {
    "text": "is",
    "start": "2845319",
    "end": "2848319"
  },
  {
    "text": "bs2 all right there we go do you see the",
    "start": "2852200",
    "end": "2858599"
  },
  {
    "text": "difference so I moved the computation of mid into the loop and I don't compare to",
    "start": "2858599",
    "end": "2865280"
  },
  {
    "text": "did we already find the element in the top of the loop I push that down into the body which doesn't reduce the number",
    "start": "2865280",
    "end": "2872440"
  },
  {
    "text": "of comparisons we have at all and then I immediately return",
    "start": "2872440",
    "end": "2877599"
  },
  {
    "text": "the index of the element if we found it and only when falling through you return",
    "start": "2877599",
    "end": "2882680"
  },
  {
    "text": "to minus one that's it right I would say that this is much",
    "start": "2882680",
    "end": "2889680"
  },
  {
    "text": "better and much easier to understand because you now don't have to deal with two things in the loop it's just better",
    "start": "2889680",
    "end": "2897318"
  },
  {
    "text": "right yeah which is terrible rule right so but yeah so some he points",
    "start": "2898480",
    "end": "2906000"
  },
  {
    "text": "out that there are um coding standards where this is not permitted because you have multiple returns my not so humble opinion throw",
    "start": "2906000",
    "end": "2913520"
  },
  {
    "text": "those manuals in the garbage right this is why you want multiple returns one of the reasons",
    "start": "2913520",
    "end": "2920760"
  },
  {
    "text": "why um so let's build that do let's do coverage F path coverage",
    "start": "2920760",
    "end": "2929760"
  },
  {
    "text": "bs2 C obs2 and to save ourselves some time we're going to do the for loop again",
    "start": "2929760",
    "end": "2935280"
  },
  {
    "text": "just immediately and do bs2 so semant like semantically these",
    "start": "2935280",
    "end": "2942240"
  },
  {
    "text": "programs are supposed to be the same right they find all the same values they they operate the same they're equivalent",
    "start": "2942240",
    "end": "2947760"
  },
  {
    "text": "for pretty much all intents and purposes but if you now uh look for the uh",
    "start": "2947760",
    "end": "2953520"
  },
  {
    "text": "coverage on that so let's do less there we go bs2 there is only one path that we",
    "start": "2953520",
    "end": "2960559"
  },
  {
    "text": "haven't covered and we also removed some past because we got rid of the stupid Turner",
    "start": "2960559",
    "end": "2967160"
  },
  {
    "text": "and which one is that the only path we haven't covered is the one where our search range starts at",
    "start": "2967280",
    "end": "2976319"
  },
  {
    "text": "being empty which ideally is an impossible",
    "start": "2976319",
    "end": "2982240"
  },
  {
    "text": "path but it's user controlled so there has to be a check for that thank",
    "start": "2982240",
    "end": "2987440"
  },
  {
    "text": "you I think we have some time for questions 10 minutes",
    "start": "2987440",
    "end": "2992559"
  },
  {
    "text": "yes uh if you can remove the yeah",
    "start": "2994599",
    "end": "3002079"
  },
  {
    "text": "M possibly it should be possible if anything this is a pretty good hint uh",
    "start": "3003960",
    "end": "3009359"
  },
  {
    "text": "but this has to be input driven and some parts are only impossible because I mean this path exists in the graph but it's",
    "start": "3009359",
    "end": "3016280"
  },
  {
    "text": "only made Impossible by data right uh so if you want to test that your precondition checks at the top of a",
    "start": "3016280",
    "end": "3022480"
  },
  {
    "text": "function for example work properly running it through this is a pretty good way of empirically showing that it's",
    "start": "3022480",
    "end": "3028799"
  },
  {
    "text": "okay you might be able to remove uh some impossible paths programmatically GCC",
    "start": "3028799",
    "end": "3034160"
  },
  {
    "text": "will definitely do it in some cases under optimization um so I suppose yes there might be uh",
    "start": "3034160",
    "end": "3042040"
  },
  {
    "text": "some of them you can't know because you don't know the if the range of inputs have been",
    "start": "3042040",
    "end": "3048520"
  },
  {
    "text": "verified yes so this might be an unfair question but the the hardest problem I I",
    "start": "3048520",
    "end": "3055079"
  },
  {
    "text": "deal with is uh how do you do mcdc in in con expert code so the hardest problem",
    "start": "3055079",
    "end": "3062079"
  },
  {
    "text": "he deals with how do you mcdc in con expert code I've had that fight for a",
    "start": "3062079",
    "end": "3067280"
  },
  {
    "text": "year uh my opinion is you don't because this should be concerned",
    "start": "3067280",
    "end": "3075359"
  },
  {
    "text": "with what you do with runtime mcds is a data flow problem and you can verify",
    "start": "3075359",
    "end": "3081240"
  },
  {
    "text": "what happens in the Conex per by looking at the compiled output",
    "start": "3081240",
    "end": "3086680"
  },
  {
    "text": "unless the con exper turns out to be actual runtime code in which case you already got",
    "start": "3086680",
    "end": "3092838"
  },
  {
    "text": "it so the yeah so the extension that is but Conex per is a different type of runtime sure but your pro your compil",
    "start": "3094599",
    "end": "3101040"
  },
  {
    "text": "program won't ever exhibit the behavior that you discarded during your compile time computation and especially the way",
    "start": "3101040",
    "end": "3108799"
  },
  {
    "text": "the this is by the way in the context or derived from the context of the automotive in which case what you are",
    "start": "3108799",
    "end": "3114520"
  },
  {
    "text": "concerned about is the runtime Behavior so but there has been a debate for that forever and I've so far been unconvinced",
    "start": "3114520",
    "end": "3121119"
  },
  {
    "text": "that the compile time argument holds because what you're concerned about is failure at",
    "start": "3121119",
    "end": "3127359"
  },
  {
    "text": "runtime just very weird because you have 100, lines of code and then you say we have three test cases 100% test coverage",
    "start": "3128280",
    "end": "3135480"
  },
  {
    "text": "No One Believes you sure yeah but I mean you can prove",
    "start": "3135480",
    "end": "3141200"
  },
  {
    "text": "that so there are then cases with 100,000 lines of code and three test cases that has 100 % coverage which how",
    "start": "3141200",
    "end": "3147760"
  },
  {
    "text": "is that possible and with context Bridge certainly might be but then you've shown that these are the paths that the",
    "start": "3147760",
    "end": "3153559"
  },
  {
    "text": "program might actually do at run time okay does work with exceptions does",
    "start": "3153559",
    "end": "3161799"
  },
  {
    "text": "this work with exceptions yes it does uh it works with exceptions and you see",
    "start": "3161799",
    "end": "3167079"
  },
  {
    "text": "this false here if this is an exceptional Edge uh it will throw it will show throw uh I don't do C+ for",
    "start": "3167079",
    "end": "3174319"
  },
  {
    "text": "these demos because it's complicated so what I'm less sure about is what",
    "start": "3174319",
    "end": "3179520"
  },
  {
    "text": "happens when you do exceptions that are handled in a parent function without the oh in the parent scope with the",
    "start": "3179520",
    "end": "3186240"
  },
  {
    "text": "unwinding if uh the paths you've seen are properly committed I think they are because we commit as soon as we can but",
    "start": "3186240",
    "end": "3193359"
  },
  {
    "text": "there is a risk of a I don't think there is but there might be a risk of a function in the middle of a basic block",
    "start": "3193359",
    "end": "3199480"
  },
  {
    "text": "a call that will then throw in the middle of the block but then and then be on wound",
    "start": "3199480",
    "end": "3207760"
  },
  {
    "text": "um sorry do you need to change operator must",
    "start": "3211680",
    "end": "3218240"
  },
  {
    "text": "be yeah in a new block and I think so um I think GCC already does that that",
    "start": "3218240",
    "end": "3224160"
  },
  {
    "text": "everything that has some throwing Behavior will be in its own Block in which case they should do just fine",
    "start": "3224160",
    "end": "3230119"
  },
  {
    "text": "because we we flush everything on the entrance to a block before the call",
    "start": "3230119",
    "end": "3235720"
  },
  {
    "text": "happens so it should work I've never seen a case where it doesn't work but you know we give it to the world and",
    "start": "3235720",
    "end": "3241920"
  },
  {
    "text": "have them break in okay yes I'm not",
    "start": "3241920",
    "end": "3249720"
  },
  {
    "text": "very",
    "start": "3251280",
    "end": "3254280"
  },
  {
    "text": "this so the question is is this exclusive to GCC with coverage no so llbm has coverage but it does it on",
    "start": "3258240",
    "end": "3265720"
  },
  {
    "text": "clang it does it on the source level whereas this is at the object level uh clang has mcdc with a slightly different",
    "start": "3265720",
    "end": "3272400"
  },
  {
    "text": "flavor starting from 18 18 uh path covers as far as I'm aware",
    "start": "3272400",
    "end": "3279119"
  },
  {
    "text": "it's a GCC exclusive feature currently um but you know here's my number if you",
    "start": "3279119",
    "end": "3285599"
  },
  {
    "text": "want it in clang Jason yes",
    "start": "3285599",
    "end": "3291720"
  },
  {
    "text": "so is there a known effort to use this information to generate fuzzing test cases or other novel inputs right uh not",
    "start": "3299680",
    "end": "3307559"
  },
  {
    "text": "as far as I'm aware but this is new and not merged yet uh this is perfect by the way in combination with fuzzing because",
    "start": "3307559",
    "end": "3313040"
  },
  {
    "text": "it allows you to actually explore and and show what fuzzing uh has covered or",
    "start": "3313040",
    "end": "3319400"
  },
  {
    "text": "not right so it could be a good hint for what to throw it atols that are driven by some sort of yeah so the the other",
    "start": "3319400",
    "end": "3327280"
  },
  {
    "text": "aspect is that the fuzing instrumentation already does some of this internally as a way to drive it and",
    "start": "3327280",
    "end": "3333839"
  },
  {
    "text": "you can drive a lot of paths by inspecting jumps in the instructions so you can use that one too in theory but I",
    "start": "3333839",
    "end": "3340000"
  },
  {
    "text": "don't know to what extent they do it uh but sure this is perfect match with fuzzing property testing all kinds of",
    "start": "3340000",
    "end": "3346480"
  },
  {
    "text": "randomization stuff and especially if you want to show if something is actually uh an invisible path if you can",
    "start": "3346480",
    "end": "3353400"
  },
  {
    "text": "take the path or not because if you run a fuzzer for 15 hours on this and you still haven't taken a path it's a pretty",
    "start": "3353400",
    "end": "3358920"
  },
  {
    "text": "good chance there is a contradiction in there somewhere and you're actually guarding properly really dumb",
    "start": "3358920",
    "end": "3366000"
  },
  {
    "text": "question the path cover subsumes the mcdc or no so the question is does prime",
    "start": "3366000",
    "end": "3371559"
  },
  {
    "text": "path coverage subsume mcdc no it does not so you need both but together there a superpower",
    "start": "3371559",
    "end": "3378880"
  },
  {
    "text": "because it subsumes all of the other ones including very powerful ones like definition use right unfortunately if you need to",
    "start": "3378880",
    "end": "3387480"
  },
  {
    "text": "use both uh you can do oh my",
    "start": "3387480",
    "end": "3393520"
  },
  {
    "text": "goodness turns yeah if if I was only able to type",
    "start": "3393520",
    "end": "3398920"
  },
  {
    "text": "luckily that's not what I'm being paid for condition coverage oh there we go so",
    "start": "3398920",
    "end": "3404640"
  },
  {
    "text": "that's mcdc uh but no it does not subsume mcdc",
    "start": "3404640",
    "end": "3411359"
  },
  {
    "text": "you need both this a you can do a pretty simple example with uh",
    "start": "3411359",
    "end": "3416760"
  },
  {
    "text": "um be and this comes back to path coverage unlike definition use which is",
    "start": "3416760",
    "end": "3422240"
  },
  {
    "text": "a data flow problem is actually a structural um analysis on its own it",
    "start": "3422240",
    "end": "3427280"
  },
  {
    "text": "just happens to also subsume definition use so you don't you can actually throw away the data analysis because you do it",
    "start": "3427280",
    "end": "3432839"
  },
  {
    "text": "structurally which is quite neat um mcdc is a pure data flow problem because you",
    "start": "3432839",
    "end": "3438280"
  },
  {
    "text": "have this cancelling effect",
    "start": "3438280",
    "end": "3444240"
  },
  {
    "text": "here time um say I'm I'm shipping with clang and I",
    "start": "3444240",
    "end": "3450400"
  },
  {
    "text": "I run this on GCC are those results",
    "start": "3450400",
    "end": "3456319"
  },
  {
    "text": "bevel actual yeah that is not a dumb question so the question is if you're building with if you're shipping with a",
    "start": "3456960",
    "end": "3464599"
  },
  {
    "text": "c and uh you're doing this test on on GCC are the observations",
    "start": "3464599",
    "end": "3470640"
  },
  {
    "text": "valid it's complicated the the short answer is no this is at object level and",
    "start": "3470640",
    "end": "3475960"
  },
  {
    "text": "the GCC might change the layout of the control FL graph between versions",
    "start": "3475960",
    "end": "3481039"
  },
  {
    "text": "between especially optimization Flags throw a wrench right in this the thing is every transformation the compiler is",
    "start": "3481039",
    "end": "3487720"
  },
  {
    "text": "permitted to do has to preserve semantics so even if this is done at uh",
    "start": "3487720",
    "end": "3493599"
  },
  {
    "text": "no well debug and then no optimization if you trust that optimization will not",
    "start": "3493599",
    "end": "3499319"
  },
  {
    "text": "change semantics you you're well covered even with the object one um and then whether or not you want",
    "start": "3499319",
    "end": "3506839"
  },
  {
    "text": "to trust that is a different discussion but uh but no so they're not compatible",
    "start": "3506839",
    "end": "3512280"
  },
  {
    "text": "still though this does capture the semantics of flow so the exact paths might change but the relationships",
    "start": "3512280",
    "end": "3518559"
  },
  {
    "text": "between you know your data and your structural blocks they really don't change that much because they're driven by the semantics of the language yes",
    "start": "3518559",
    "end": "3528359"
  },
  {
    "text": "after the object yes well no so uh the question is is this happening after",
    "start": "3529520",
    "end": "3535400"
  },
  {
    "text": "source code and then something on your object no this is before the object is generated so this is uh where in the pH",
    "start": "3535400",
    "end": "3543400"
  },
  {
    "text": "where GCC does all of the other data flow analysis uh where it um you know",
    "start": "3543400",
    "end": "3549680"
  },
  {
    "text": "before it does things like",
    "start": "3549680",
    "end": "3553160"
  },
  {
    "text": "um well no so it's a part of the GCC internals uh so you can't use it on an",
    "start": "3556520",
    "end": "3561599"
  },
  {
    "text": "object file that has been generated although there is a probably a way to do that if you then do the where you",
    "start": "3561599",
    "end": "3566640"
  },
  {
    "text": "reconstruct a path from just in a second J uh where you reconstruct a path from",
    "start": "3566640",
    "end": "3572880"
  },
  {
    "text": "the object file but this works with GCC internals",
    "start": "3572880",
    "end": "3578400"
  },
  {
    "text": "Jason correct so the question is is there uh",
    "start": "3585920",
    "end": "3593839"
  },
  {
    "text": "value in running the coverage at different optimization for this I would say yes um simply because you're concerned",
    "start": "3593839",
    "end": "3601400"
  },
  {
    "text": "with parts here and especially the control SL graph will change drastically between optimization levels the problem",
    "start": "3601400",
    "end": "3607240"
  },
  {
    "text": "is that GCC recommends generally to run coverage on ozero because of that and",
    "start": "3607240",
    "end": "3612960"
  },
  {
    "text": "because mapping it back to the source code is just not possible at that point but if we care about things like unreachable paths existing or you want",
    "start": "3612960",
    "end": "3620440"
  },
  {
    "text": "to see if there are relationships there that you think but you actually want to verify with data that's still very much",
    "start": "3620440",
    "end": "3625520"
  },
  {
    "text": "a valid approach but the guarantees just go down you're out of time I'm out of time",
    "start": "3625520",
    "end": "3632799"
  },
  {
    "text": "but I'm I'll Stick Around for questions thank you very much",
    "start": "3632799",
    "end": "3637838"
  }
]