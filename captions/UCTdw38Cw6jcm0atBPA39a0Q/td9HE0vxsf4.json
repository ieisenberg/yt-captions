[
  {
    "text": "all right we good cool I think people are still trickling in a little bit but I'm going to go ahead and get",
    "start": "240",
    "end": "6240"
  },
  {
    "text": "started this is no more sqlite how to write tests with ef core using test containers my talk title is so long I",
    "start": "6240",
    "end": "13440"
  },
  {
    "text": "can't remember it um I'm Daniel Ward if you are curious about downloading the",
    "start": "13440",
    "end": "19039"
  },
  {
    "text": "slides yourself or looking at the repo I use in this talk that's what the QR code takes you to if you prefer to take",
    "start": "19039",
    "end": "25359"
  },
  {
    "text": "pictures of your slide of the slides yourself you can still do that but just so you know this QR code will let you",
    "start": "25359",
    "end": "30599"
  },
  {
    "text": "download them this will be on the ending slide as well and to sort of explain what the",
    "start": "30599",
    "end": "38000"
  },
  {
    "text": "mouthful of a title is I want to start with a short story",
    "start": "38000",
    "end": "45360"
  },
  {
    "text": "and so stop me if you've heard this one before I'm uh a couple years ago I was on a team and we are making a web API",
    "start": "45360",
    "end": "53559"
  },
  {
    "text": "and c and we have a postgress database for our backend that we",
    "start": "53559",
    "end": "58719"
  },
  {
    "text": "hit and and we're making new features everything's going good and one day",
    "start": "58719",
    "end": "63920"
  },
  {
    "text": "we're making a new feature and like any good obedient team of devs we have a test Suite right and well first is",
    "start": "63920",
    "end": "71040"
  },
  {
    "text": "everyone here writing tests Jo hands is anyone here not writing tests don't admit that that's",
    "start": "71040",
    "end": "77240"
  },
  {
    "text": "embarrassing but okay so we're all we're all writing tests right we have our test weite including integration tests and",
    "start": "77240",
    "end": "84720"
  },
  {
    "text": "for that we use sqlite the sqlite provider um just cuz I think it's what we were all familiar with",
    "start": "84720",
    "end": "90680"
  },
  {
    "text": "uh which what we had experience with it's easy to get up and running so there wasn't a whole lot of thought and discussion put into that we just use a",
    "start": "90680",
    "end": "97360"
  },
  {
    "text": "SQL light provider to get up and running with our integration tests and this new feature we're making where we finish and",
    "start": "97360",
    "end": "104000"
  },
  {
    "text": "all the tests pass everything looks good and then of course once we get into production what happens we get an error",
    "start": "104000",
    "end": "111600"
  },
  {
    "text": "in the logs eventually and this was we fixed it eventually this was very confusing and",
    "start": "111600",
    "end": "117640"
  },
  {
    "text": "very frustrating if you've ever come across one of these errors ultimately it was because there was some difference",
    "start": "117640",
    "end": "124200"
  },
  {
    "text": "between sqlite and postgress that whatever query that EF core generated just didn't work the same between them",
    "start": "124200",
    "end": "131160"
  },
  {
    "text": "so it worked fine on SQL light and then when we poured it over to postgress it did not work the same so we got an error",
    "start": "131160",
    "end": "136959"
  },
  {
    "text": "in production and it's sort of like um you know that's saying people don't",
    "start": "136959",
    "end": "142480"
  },
  {
    "text": "remember how you treated them they just remember how you made them feel it was sort of like this I don't even remember what the query was anymore I just",
    "start": "142480",
    "end": "149120"
  },
  {
    "text": "remember how you have course made me feel and it made me feel bad I didn't like it uh we're we're on good terms",
    "start": "149120",
    "end": "154720"
  },
  {
    "text": "again but we sort of have a mediator here and this is test containers so ultimately the problem was uh postgress",
    "start": "154720",
    "end": "162280"
  },
  {
    "text": "or whatever database you're using in production SQL Server my SQL whatever and SQL light have a large amount of",
    "start": "162280",
    "end": "168840"
  },
  {
    "text": "overlap right I would not be surprised if it was 80 or 90% but the danger is when you get into",
    "start": "168840",
    "end": "175280"
  },
  {
    "text": "these no man's lands over here and postgress has a feature feature that sqlite doesn't maybe they have the same",
    "start": "175280",
    "end": "182360"
  },
  {
    "text": "feature but they just work differently between them what's really confusing is if one has a bug and the other doesn't",
    "start": "182360",
    "end": "188760"
  },
  {
    "text": "and somehow you just don't have feature parody between them and I think this took us about two",
    "start": "188760",
    "end": "194599"
  },
  {
    "text": "days to figure out what was going on these are very confusing a bunch of searching just error messages until you",
    "start": "194599",
    "end": "200239"
  },
  {
    "text": "finally stumble across something that says oh this just isn't in SQL light or this is in postgress but it works",
    "start": "200239",
    "end": "206400"
  },
  {
    "text": "differently there and then finally you can start to address that and then even then you have to decide well I'm going",
    "start": "206400",
    "end": "212000"
  },
  {
    "text": "to have a if state if statement in my code if I'm in the test or not so it runs differently and then really I'm",
    "start": "212000",
    "end": "218439"
  },
  {
    "text": "testing something else at that point right so we have this whole problem with false positives and false negatives",
    "start": "218439",
    "end": "224519"
  },
  {
    "text": "where in our case our test was passing but really it was the wrong like it was",
    "start": "224519",
    "end": "230239"
  },
  {
    "text": "a lie it was not working in production you can have the inverse too your test on SQL light can fail when really maybe",
    "start": "230239",
    "end": "236000"
  },
  {
    "text": "you would have been fine to deploy and it would have worked just fine on your production uh database",
    "start": "236000",
    "end": "241760"
  },
  {
    "text": "engine and ultimately the problem is if you only take one thing away from this talk if",
    "start": "241760",
    "end": "247879"
  },
  {
    "text": "you remember one thing I want it to be this slide is that if you are using another SQL engine in your tests than",
    "start": "247879",
    "end": "254519"
  },
  {
    "text": "what you're using in production you're testing another system it might be a similar system it might be pretty close",
    "start": "254519",
    "end": "261639"
  },
  {
    "text": "but it's not the same thing you're testing something else so it' be like me saying if I'm manufacturing a car is it",
    "start": "261639",
    "end": "268280"
  },
  {
    "text": "all right we're almost we just got to do the crash test now and instead of doing the crash tests with my car I take a car",
    "start": "268280",
    "end": "276479"
  },
  {
    "text": "frame and not even the same car frame something similar and I do crash tests with that I say all right everything",
    "start": "276479",
    "end": "282160"
  },
  {
    "text": "looks good we're all good to go that's kind of that's basically what we're doing with SQL light and I have the",
    "start": "282160",
    "end": "288400"
  },
  {
    "text": "crash dummy over here on the right because that's what I felt like for doing that um okay and ultimately why does",
    "start": "288400",
    "end": "295240"
  },
  {
    "text": "this matter why do we care about all this debugging our tests getting things wrong",
    "start": "295240",
    "end": "300360"
  },
  {
    "text": "any want take a guess starts with m ends with",
    "start": "300360",
    "end": "306039"
  },
  {
    "text": "h it's expensive right uh I would say the vast majority of the time maybe",
    "start": "306039",
    "end": "311680"
  },
  {
    "text": "there's exceptions the most expensive part of any software system is going to be you it's going to be the developer so",
    "start": "311680",
    "end": "318479"
  },
  {
    "text": "if we say on average if you're 100K a year salary you get paid 50 an hour",
    "start": "318479",
    "end": "323520"
  },
  {
    "text": "that's going to be vastly more than any single cloud service or anything that your little app uses probably",
    "start": "323520",
    "end": "330319"
  },
  {
    "text": "so the longer it takes for the dev team to diagnose debug something it costs the company exponentially more money not to",
    "start": "330319",
    "end": "337199"
  },
  {
    "text": "mention these specifically are just extremely frustrating to figure out so",
    "start": "337199",
    "end": "342400"
  },
  {
    "text": "I've kind of given you the problem here but not the solution yet I'm going to talk about me for about 30 seconds uh",
    "start": "342400",
    "end": "349800"
  },
  {
    "text": "I'm a software developer and consultant for a company called lean techniques based in Iowa I'm uh Microsoft MVP andet",
    "start": "349800",
    "end": "357360"
  },
  {
    "text": "I'm the co-organizer of the San Antonio and a.net user group so if you're ever down in that area hit us up uh and you",
    "start": "357360",
    "end": "364400"
  },
  {
    "text": "can find me online on the socials and I have a technical blog at Dan and aan.com so especially if you found this talk",
    "start": "364400",
    "end": "370280"
  },
  {
    "text": "useful if you have any feedback or anything please hit me up on any of those I'd love to hear from people who found me from stuff like",
    "start": "370280",
    "end": "376639"
  },
  {
    "text": "this okay so you might say cool Daniel but I'm not actually using sqlite maybe",
    "start": "376639",
    "end": "382240"
  },
  {
    "text": "I'm using an inmemory provider or I'm using a real database out there or something and I think this pretty much",
    "start": "382240",
    "end": "388160"
  },
  {
    "text": "covers these four things the traditional options you usually see when integration",
    "start": "388160",
    "end": "394680"
  },
  {
    "text": "testing and so we talked about the sqlite provider I think the EF and memory provider is like the sqlite",
    "start": "394680",
    "end": "400840"
  },
  {
    "text": "provider but worse I think on the MSD indox they even straight up tell you uh please don't use this I'm not sure why",
    "start": "400840",
    "end": "407240"
  },
  {
    "text": "it's there honestly uh it has the same advantage of the sqlite provider in that it's easy to set up and get up and going",
    "start": "407240",
    "end": "413120"
  },
  {
    "text": "and write tests but it has the disadvantage of it's not even a relational database it can't support raw",
    "start": "413120",
    "end": "418479"
  },
  {
    "text": "SQL or transaction it's basically sqlite but with less stuff uh and then sqlite obviously has",
    "start": "418479",
    "end": "424840"
  },
  {
    "text": "the problem of not being the real thing uh something I've seen before also is to use a real database out there and",
    "start": "424840",
    "end": "432960"
  },
  {
    "text": "this works the good thing is you are actually using the same database engine as your production app the disadvantage",
    "start": "432960",
    "end": "440479"
  },
  {
    "text": "is you're essentially setting up an entire environment you now have to maintain just to run integration tests",
    "start": "440479",
    "end": "445960"
  },
  {
    "text": "and you have to figure out you know you can't run more than one uh Suite of integration tests against this at a time",
    "start": "445960",
    "end": "452160"
  },
  {
    "text": "or else you get duplicate data you have to make sure the data gets cleaned up correctly you have to make sure if it's a whole separate database you have to",
    "start": "452160",
    "end": "459080"
  },
  {
    "text": "make sure it gets the schema changes that that real one does at the same time and you can get around all these things",
    "start": "459080",
    "end": "465879"
  },
  {
    "text": "but if it sounds like a lot it's because it is it's a lot to maintain and keep up when running and make sure it's",
    "start": "465879",
    "end": "472639"
  },
  {
    "text": "working and finally there's Docker and I think this is a pretty good option honestly uh it has the advantage as the",
    "start": "472639",
    "end": "479840"
  },
  {
    "text": "last one and that it's the same engine right but you don't have to worry about cleaning the data it just spins down",
    "start": "479840",
    "end": "486520"
  },
  {
    "text": "when your tests are finished really the the main issue with this is that you have to maintain a Docker file in your",
    "start": "486520",
    "end": "492360"
  },
  {
    "text": "repo and you do have to maintain the container life cycle a little bit make",
    "start": "492360",
    "end": "497520"
  },
  {
    "text": "sure it does spin down correctly when your tests are done things like that and that's basically how test container",
    "start": "497520",
    "end": "504240"
  },
  {
    "text": "started it started in Java about 8 years ago I think and they said we are using",
    "start": "504240",
    "end": "509639"
  },
  {
    "text": "for integration tests and this is awesome it's working but there's kind of a common set of tasks we're doing almost",
    "start": "509639",
    "end": "515800"
  },
  {
    "text": "every time because we're addressing the same problems every time so can we kind of you know take this and automate it",
    "start": "515800",
    "end": "523279"
  },
  {
    "text": "and boil it up as an API instead of having to manage a Docker file and all this uh so you just don't have to do",
    "start": "523279",
    "end": "530399"
  },
  {
    "text": "this every time we can shorten the workflow and that's what test containers is",
    "start": "530399",
    "end": "536720"
  },
  {
    "text": "so I think databases is probably the most common use case you're going to see for this and that's what I'm going to",
    "start": "536720",
    "end": "542200"
  },
  {
    "text": "show in the coding demo but it's basically anything you can containerize will work with this so this is not an",
    "start": "542200",
    "end": "548440"
  },
  {
    "text": "exhaustive list I've just thrown some icons up on here it works with CFA you can set up a Rus cluster with this with",
    "start": "548440",
    "end": "553959"
  },
  {
    "text": "rabbit mq we're going to use it with postgress but it works with all types of databases you can give it a custom image",
    "start": "553959",
    "end": "560279"
  },
  {
    "text": "if you want if you have something else already running in production that's super custom uh same thing with the",
    "start": "560279",
    "end": "565880"
  },
  {
    "text": "languages on the left it's not an exist exhaustive list of them but the nice thing about this being written all these",
    "start": "565880",
    "end": "571920"
  },
  {
    "text": "languages is that it's transferable knowledge you can bring with you through your career so if you go to a different",
    "start": "571920",
    "end": "577760"
  },
  {
    "text": "team or company and you're not on net or whatever anymore you can still use this",
    "start": "577760",
    "end": "583360"
  },
  {
    "text": "and maybe try to pitch it at your your next job so this is straight from the test",
    "start": "583360",
    "end": "589480"
  },
  {
    "text": "containers documentation the whole process for how it functions is pretty straight forward you have setup you run",
    "start": "589480",
    "end": "595399"
  },
  {
    "text": "the test and it closes down when you set up it spins up containers with whatever you've requested in the demo we're just",
    "start": "595399",
    "end": "602440"
  },
  {
    "text": "going to do postgress container that's it but you might set up multiple things depending on how complicated and how",
    "start": "602440",
    "end": "608240"
  },
  {
    "text": "involved your integration tests are you might want to put the Que in there you might want to put this has elastic",
    "start": "608240",
    "end": "614360"
  },
  {
    "text": "search and then it runs the test against those containers and when the cleanup when the tests are finished and the",
    "start": "614360",
    "end": "620040"
  },
  {
    "text": "cleanup happens it just automatically spins them down and gets rid of the volumes networks and all that stuff for",
    "start": "620040",
    "end": "625200"
  },
  {
    "text": "you so one of the things with SQL an e",
    "start": "625200",
    "end": "630399"
  },
  {
    "text": "and memory provider that I mentioned is that they are very easy to get up and running that's what people like about them and that's true that's why I used",
    "start": "630399",
    "end": "637360"
  },
  {
    "text": "to use it and with test containers especially compared to Docker it's",
    "start": "637360",
    "end": "642720"
  },
  {
    "text": "pretty simple because this is what it takes to get it up and running in your tests it's one line to set it up one",
    "start": "642720",
    "end": "649120"
  },
  {
    "text": "line to start it and one line to throw it away and that's pretty much all you have to do obviously there'll be a",
    "start": "649120",
    "end": "654360"
  },
  {
    "text": "little more setup if you're using more images or something but this really is pretty much it and that's what we'll see",
    "start": "654360",
    "end": "659920"
  },
  {
    "text": "in the demo as well which we will go ahead and go over",
    "start": "659920",
    "end": "666399"
  },
  {
    "text": "to so I've got a pretty basic app here it's just an API for if you imagine like",
    "start": "666760",
    "end": "674000"
  },
  {
    "text": "a fictional bookstore is this text big enough for everyone to see by the way good",
    "start": "674000",
    "end": "680320"
  },
  {
    "text": "cool and we've just given people the ability to you can like a book and you can leave a review on a",
    "start": "680320",
    "end": "686920"
  },
  {
    "text": "book and you can get a book as well and all this logic is stored in this book service which is really not very much",
    "start": "686920",
    "end": "694079"
  },
  {
    "text": "logic all we really say is when you like a book well you can't like a book more than once right so if you try to like a",
    "start": "694079",
    "end": "701000"
  },
  {
    "text": "book twice don't fail just don't do anything right and then reviewing a book is the same thing but we do allow you to",
    "start": "701000",
    "end": "708040"
  },
  {
    "text": "update the review content if the record exists there already and that's really all we're going to be testing here the",
    "start": "708040",
    "end": "714880"
  },
  {
    "text": "database project it's kind of even more simple we only have three tabl and they're all very small and I would say",
    "start": "714880",
    "end": "722480"
  },
  {
    "text": "also don't use these tables as a example for for good entity design these are",
    "start": "722480",
    "end": "730120"
  },
  {
    "text": "very simple just to Showcase test containers really all I've done is put a primary key on them I don't even have foring keys on",
    "start": "730120",
    "end": "736279"
  },
  {
    "text": "them and I think they only have three three or",
    "start": "736279",
    "end": "741639"
  },
  {
    "text": "four uh columns each in them and the way I kind of structur this project is I",
    "start": "741639",
    "end": "747720"
  },
  {
    "text": "have three testing projects and we'll go through them one by one what they each build on the other so we'll start with",
    "start": "747720",
    "end": "753360"
  },
  {
    "text": "one improve it a little in two and then improve that a little more in three and this will not be this this",
    "start": "753360",
    "end": "761079"
  },
  {
    "text": "assumes some integration testing knowledge so we're not going to go over how to do everything about that in C but",
    "start": "761079",
    "end": "768760"
  },
  {
    "text": "I think a pretty common way to do your integration tests is you'll make right a",
    "start": "768760",
    "end": "775199"
  },
  {
    "text": "custom web application Factory something with that and in here we remove our",
    "start": "775199",
    "end": "780880"
  },
  {
    "text": "actual production database context add our test database context and we'll go over this more and then in your tests",
    "start": "780880",
    "end": "788760"
  },
  {
    "text": "you'll use an iclass fixture which just says hey whatever is an integration test Factory do this setup once for the whole",
    "start": "788760",
    "end": "795360"
  },
  {
    "text": "class don't do it once for every test because an integration test the setup is usually a little more expensive and we",
    "start": "795360",
    "end": "800560"
  },
  {
    "text": "just don't really gain anything by it right it just takes up more time so that's what we're doing here and the",
    "start": "800560",
    "end": "806399"
  },
  {
    "text": "important thing we want to look at here is that custom test test Factory so here's",
    "start": "806399",
    "end": "813560"
  },
  {
    "text": "our test containers line that I showed from the slide earlier and this is all we need this will spin up a container",
    "start": "813560",
    "end": "820040"
  },
  {
    "text": "and you can put other stuff in here because it's a builder pattern so I can say with database with password there's",
    "start": "820040",
    "end": "825639"
  },
  {
    "text": "a whole bunch of stuff in here you can give it a specific image you have you can give it a different weight strategy",
    "start": "825639",
    "end": "832240"
  },
  {
    "text": "to use to so it knows how to know when the container is ready to be used but",
    "start": "832240",
    "end": "837920"
  },
  {
    "text": "thankfully with test containers we don't have to do all that it has this concept of sensible defaults for the pre-made",
    "start": "837920",
    "end": "844360"
  },
  {
    "text": "modules so this POC SQL Builder we can find out if I go to the source code for",
    "start": "844360",
    "end": "849720"
  },
  {
    "text": "postare SQL Builder and the test container is repo we can see it will set",
    "start": "849720",
    "end": "855079"
  },
  {
    "text": "these things whether I give them or not so these values at the top here will be the defaults for those so if I don't",
    "start": "855079",
    "end": "862600"
  },
  {
    "text": "specify them that's what it's going to set for them anyway and for a test database I really don't care what the",
    "start": "862600",
    "end": "867639"
  },
  {
    "text": "username and password and database we're going to be right the only two things of note here are the port one on the docker",
    "start": "867639",
    "end": "875920"
  },
  {
    "text": "side this will be randomized for every container so that you don't run into Port conflicts when your tests run",
    "start": "875920",
    "end": "881240"
  },
  {
    "text": "that's another thing that would be you know you have to roll a custom yourself if you're using Docker or something else",
    "start": "881240",
    "end": "887440"
  },
  {
    "text": "and the image when you run this for real I'm not going to do it for the demo but you probably want to specify the image",
    "start": "887440",
    "end": "894600"
  },
  {
    "text": "so you can specify the major or minor version of your database that production is actually used using just so to you",
    "start": "894600",
    "end": "900600"
  },
  {
    "text": "ensure parity but really this is all we need",
    "start": "900600",
    "end": "905680"
  },
  {
    "text": "and it will work and then our initialize async which is when this class starts up we'll say",
    "start": "905680",
    "end": "912079"
  },
  {
    "text": "hey start the container and we can get the connection string out of that container to give to",
    "start": "912079",
    "end": "917800"
  },
  {
    "text": "our test database context here so cool let's actually see that in",
    "start": "917800",
    "end": "923839"
  },
  {
    "text": "action right so this first test pretty simple we're",
    "start": "923839",
    "end": "929560"
  },
  {
    "text": "actually let's go to the like book tests we're",
    "start": "929560",
    "end": "934759"
  },
  {
    "text": "saying if the book like doesn't exist if that record doesn't exist in the database and we call this path then",
    "start": "934759",
    "end": "942319"
  },
  {
    "text": "there should be a record in the database afterwards of that book like right so let's run this and I'm going to",
    "start": "942319",
    "end": "949759"
  },
  {
    "text": "put a break point in here just so it's easier to catch this in action before it closes down and again you will need",
    "start": "949759",
    "end": "956440"
  },
  {
    "text": "Docker on your computer or the pipeline the GitHub Runner whatever is actually running this it is actually spinning up",
    "start": "956440",
    "end": "963399"
  },
  {
    "text": "containers I think I ran it and not debugged it and I'll pull up my Docker desktop",
    "start": "963399",
    "end": "971160"
  },
  {
    "text": "here so here's what it's made you can actually see the containers",
    "start": "971160",
    "end": "976319"
  },
  {
    "text": "here oh it wasn't done I actually spun up two instances so this is two test",
    "start": "976319",
    "end": "981680"
  },
  {
    "text": "inces running so it's really made two containers per test instance so why did",
    "start": "981680",
    "end": "987079"
  },
  {
    "text": "it make two containers is what I want to address we see the postgress one here and then there's another one called the",
    "start": "987079",
    "end": "992639"
  },
  {
    "text": "reuk container we didn't ask for that one but this is something test containers makes every time it runs and",
    "start": "992639",
    "end": "999639"
  },
  {
    "text": "he's just it's called the resource Reaper container he's just in charge of when the test is done deleting all the",
    "start": "999639",
    "end": "1005079"
  },
  {
    "text": "other containers and then he deletes himself as well and if you are wondering",
    "start": "1005079",
    "end": "1010360"
  },
  {
    "text": "yes this is named after the ryuk from Death Note because he's in charge of killing everything else and if you look",
    "start": "1010360",
    "end": "1016839"
  },
  {
    "text": "at the uh this doesn't matter it's just if you look at the ryuk source code they",
    "start": "1016839",
    "end": "1023120"
  },
  {
    "text": "actually name it keeps a dictionary of labels and the for the containers to know what to close down it calls that",
    "start": "1023120",
    "end": "1028160"
  },
  {
    "text": "variable the Death Note no it is named after him so let's let our test",
    "start": "1028160",
    "end": "1035480"
  },
  {
    "text": "continue that break point and you'll see them the buest ones close down and then",
    "start": "1035480",
    "end": "1041199"
  },
  {
    "text": "ryuk will delete himself as well he's still running",
    "start": "1041199",
    "end": "1049720"
  },
  {
    "text": "Stop Those just because I accidentally created two instances of the test okay and that is a good example actually",
    "start": "1053480",
    "end": "1059080"
  },
  {
    "text": "because let's say something goes wrong and we don't hit",
    "start": "1059080",
    "end": "1064240"
  },
  {
    "text": "our dispose a sync method in our web web",
    "start": "1064240",
    "end": "1069440"
  },
  {
    "text": "application Factory so this would be something you have to address in Docker if you're using that You' have to okay now I need to address cleaning things up",
    "start": "1069440",
    "end": "1076919"
  },
  {
    "text": "cuz something happened your test process crashed es IDE crashes something doesn't happen it doesn't close right so ryuk",
    "start": "1076919",
    "end": "1083440"
  },
  {
    "text": "still takes care of that cu the way he works is he establishes a TCP connection",
    "start": "1083440",
    "end": "1088840"
  },
  {
    "text": "with the test process when that starts up and all it he does is hold on to that connection and if that connection is",
    "start": "1088840",
    "end": "1094520"
  },
  {
    "text": "ever severed it gives it a few seconds to make sure it's not coming back but if it doesn't come back then it it says",
    "start": "1094520",
    "end": "1101080"
  },
  {
    "text": "okay I guess we're done and it closes down all the containers and then himself so even if something goes wrong you",
    "start": "1101080",
    "end": "1107320"
  },
  {
    "text": "don't have to worry about clean up test container still takes care of all that for you now we have a second test in here",
    "start": "1107320",
    "end": "1115200"
  },
  {
    "text": "which does basically just the inverse it says if this book like already does exist in the database then when we call",
    "start": "1115200",
    "end": "1120880"
  },
  {
    "text": "the path you know it shouldn't fail out it just shouldn't add a second record so to do that we have to insert a record",
    "start": "1120880",
    "end": "1126840"
  },
  {
    "text": "first right and then call this method and make sure there's still only one in there so that's fine let's run the whole",
    "start": "1126840",
    "end": "1135159"
  },
  {
    "text": "class both the tests together and see what",
    "start": "1135159",
    "end": "1141120"
  },
  {
    "text": "happens and we see one of them failed the second one worked but the first one",
    "start": "1144520",
    "end": "1150120"
  },
  {
    "text": "failed and the reason for this is they are both ex expecting one record in",
    "start": "1150120",
    "end": "1157480"
  },
  {
    "text": "there by the end that's what they're asserting on but they also both insert a record so whatever test goes second",
    "start": "1157480",
    "end": "1164840"
  },
  {
    "text": "there will be two records in there and it will fail so this is what we call State bleed between tests",
    "start": "1164840",
    "end": "1171400"
  },
  {
    "text": "right and with integration tests it's usually a little more difficult to reset",
    "start": "1171400",
    "end": "1177360"
  },
  {
    "text": "this state it's more expensive it takes longer it's just a harder problem and ideally we would like all of our tests",
    "start": "1177360",
    "end": "1184080"
  },
  {
    "text": "to be run in isolation and together and to uh not bleed their state all over the",
    "start": "1184080",
    "end": "1190200"
  },
  {
    "text": "place still just to work correctly so normally there's a few ways to address this you can try using transactions and",
    "start": "1190200",
    "end": "1196240"
  },
  {
    "text": "your integration tests it's a little more work and uh that still has some of its own problems you can try to reset",
    "start": "1196240",
    "end": "1203320"
  },
  {
    "text": "the database yourself with some scripts or something and that's usually slower what I'm going to do is I'll go to my",
    "start": "1203320",
    "end": "1211720"
  },
  {
    "text": "stage two project here I'm going to use a library called respawn and this is by",
    "start": "1211720",
    "end": "1217799"
  },
  {
    "text": "Jimmy Bogard uh the same guy who wrote automapper and mediator if you know those uh more important to me is that",
    "start": "1217799",
    "end": "1224200"
  },
  {
    "text": "we're both from Texas so that's why I use it um this is also is super clean to",
    "start": "1224200",
    "end": "1229480"
  },
  {
    "text": "use and the only purpose this library has is to clear out a test database and",
    "start": "1229480",
    "end": "1234880"
  },
  {
    "text": "you don't need to really know the internals of how that works but basically it does it super quickly by creating a graph of the foreign keys and",
    "start": "1234880",
    "end": "1241080"
  },
  {
    "text": "then using deletes instead of truncates so all you have to do is give it schemas",
    "start": "1241080",
    "end": "1246159"
  },
  {
    "text": "to include that you want to wipe out and schemas to exclude that you don't want that you want to keep the data in and in",
    "start": "1246159",
    "end": "1252840"
  },
  {
    "text": "this case we only have one schema and it's the public schema and it's about the same amount of effort to set these",
    "start": "1252840",
    "end": "1257919"
  },
  {
    "text": "up I create a respaw here in my uh web application Factory and down in my initialize a sync",
    "start": "1257919",
    "end": "1265039"
  },
  {
    "text": "I say hey respaw create me a respaw here's the connection from my uh container database and I'm using the",
    "start": "1265039",
    "end": "1271760"
  },
  {
    "text": "postgress adapter it's got a few others on here and I believe you can roll your own as well if it yours isn't listed but",
    "start": "1271760",
    "end": "1278840"
  },
  {
    "text": "it's got those out of the box using the postgress adapter and please wipe out the public schema and that's basically",
    "start": "1278840",
    "end": "1284360"
  },
  {
    "text": "it now whatever we want to wipe it out we just call reset async on our responder object",
    "start": "1284360",
    "end": "1289720"
  },
  {
    "text": "and the way I do this is I just made this as you can see a public method on",
    "start": "1289720",
    "end": "1295320"
  },
  {
    "text": "the reset uh on the integration test Factory and I sort of bubble this up to my tests so if I go to the like book",
    "start": "1295320",
    "end": "1302080"
  },
  {
    "text": "test again I just assign him to a variable right",
    "start": "1302080",
    "end": "1308760"
  },
  {
    "text": "and we use xunit I async Lifetime and you sort of need to know how xunit",
    "start": "1308760",
    "end": "1315159"
  },
  {
    "text": "execution contexts work so these dispose a sync and initialize async methods will",
    "start": "1315159",
    "end": "1320480"
  },
  {
    "text": "happen after every test run and these class fixtures will make it so that the setup",
    "start": "1320480",
    "end": "1328039"
  },
  {
    "text": "in integration test Factory only happens once for the entire class so we're not going to go everything with integration",
    "start": "1328039",
    "end": "1334039"
  },
  {
    "text": "test but it does help to know how xunit Works a little bit and we will also change this in the",
    "start": "1334039",
    "end": "1340240"
  },
  {
    "text": "next integration test project so I just assign the reset database to a variable here and then in",
    "start": "1340240",
    "end": "1347720"
  },
  {
    "text": "my dispose a sync after every test I call reset database which will wipe the",
    "start": "1347720",
    "end": "1353159"
  },
  {
    "text": "database out after every test so it sounds expensive but it helps to see it in action to show that it almost takes",
    "start": "1353159",
    "end": "1359600"
  },
  {
    "text": "no time at all we also get this initialized async method for free we really don't need it so we just return a",
    "start": "1359600",
    "end": "1365080"
  },
  {
    "text": "completed task so to test this out let's just run",
    "start": "1365080",
    "end": "1370240"
  },
  {
    "text": "the test class again and see what happens",
    "start": "1370240",
    "end": "1376200"
  },
  {
    "text": "and they both passed here and that's because we have this these are the exact same test as before",
    "start": "1381640",
    "end": "1387559"
  },
  {
    "text": "in the first project but now we are completely clearing out the database between each test right so we can make",
    "start": "1387559",
    "end": "1392840"
  },
  {
    "text": "some assumptions about what our database looks like and you can still seed the database with some initial stuff if you",
    "start": "1392840",
    "end": "1399600"
  },
  {
    "text": "want to and that will still work but we do have a reliable state to go back to",
    "start": "1399600",
    "end": "1405159"
  },
  {
    "text": "that's very quick to get there so respawn is not you know tied to test containers but I",
    "start": "1405159",
    "end": "1410960"
  },
  {
    "text": "think they go together very well and kind of a natural",
    "start": "1410960",
    "end": "1416960"
  },
  {
    "text": "fit and these review book and get book tests I suppose I'll show them and run",
    "start": "1416960",
    "end": "1422240"
  },
  {
    "text": "them just for completeness sake but they're they're pretty much more the same review book tests are going to do",
    "start": "1422240",
    "end": "1429320"
  },
  {
    "text": "the same thing make sure there's a record in there by the end of it and the getbook tests those pass the getbook",
    "start": "1429320",
    "end": "1435320"
  },
  {
    "text": "tests I think there's only one test in here he just says if there's a book then you should return him",
    "start": "1435320",
    "end": "1442840"
  },
  {
    "text": "right and then the last test project here we're just going to sort of clean things up a little bit show you what I",
    "start": "1442840",
    "end": "1449520"
  },
  {
    "text": "think are maybe some nice practices to really get a clean test project",
    "start": "1449520",
    "end": "1455320"
  },
  {
    "text": "right so",
    "start": "1455320",
    "end": "1460480"
  },
  {
    "text": "cool and I don't think I have changed integration test Factory in this third project",
    "start": "1462279",
    "end": "1469520"
  },
  {
    "text": "he should still be the same but I've made this class called database test and this is you can see he",
    "start": "1469520",
    "end": "1477240"
  },
  {
    "text": "inherits from isync Lifetime and he is implementing these methods now right and",
    "start": "1477240",
    "end": "1483640"
  },
  {
    "text": "this is kind of just to keep things clean keep everything in one place now my all my tests don't have to each",
    "start": "1483640",
    "end": "1489440"
  },
  {
    "text": "implement this I'm putting the HTTP client and the reset database and the DB",
    "start": "1489440",
    "end": "1495399"
  },
  {
    "text": "context in here just cuz probably all my integration tests are going to use this right it's a common shared thing and now",
    "start": "1495399",
    "end": "1502399"
  },
  {
    "text": "my tests if I go to the like book test here can all just inherit from database test right and they'll still",
    "start": "1502399",
    "end": "1510919"
  },
  {
    "text": "work now the other thing you may have noticed is that these are using",
    "start": "1510919",
    "end": "1516120"
  },
  {
    "text": "collection fixtures here so collection fixtures is an xunit thing the way xunit works by default is",
    "start": "1516120",
    "end": "1523320"
  },
  {
    "text": "that it just considers each class its own collection and how xunit runs tests",
    "start": "1523320",
    "end": "1528760"
  },
  {
    "text": "is within a class within a collection each test will run sequentially not in parallel but collections will run in",
    "start": "1528760",
    "end": "1535600"
  },
  {
    "text": "parallel to each other so this may matter for how you want to run your database",
    "start": "1535600",
    "end": "1540760"
  },
  {
    "text": "tests here I'm show showcasing it just to show you can just fine run multiple",
    "start": "1540760",
    "end": "1546520"
  },
  {
    "text": "containers for your test and it there's not really any problem with this and it's probably good to know because if",
    "start": "1546520",
    "end": "1552679"
  },
  {
    "text": "you just stuck with ie class fixture eventually you might have you know I",
    "start": "1552679",
    "end": "1558480"
  },
  {
    "text": "don't know a 100 test classes maybe and you're spinning up a 100 containers in your pipeline that might be a little",
    "start": "1558480",
    "end": "1564159"
  },
  {
    "text": "much I haven't tested that far but you can let me know in that case you might want to use collection fixtures you can",
    "start": "1564159",
    "end": "1570240"
  },
  {
    "text": "say hey we'll just share you know 10 collections throughout all the integration tests and they spin up 10",
    "start": "1570240",
    "end": "1576640"
  },
  {
    "text": "containers that run in parallel uh and it just uses less resources overall and it's still just as",
    "start": "1576640",
    "end": "1583000"
  },
  {
    "text": "fast so here I've made two test collections to sort of show how this is working two",
    "start": "1583000",
    "end": "1588760"
  },
  {
    "text": "test collections across three classes and the way these work is you just say you need a class for the database",
    "start": "1588760",
    "end": "1595919"
  },
  {
    "text": "collection it doesn't need to have anything as you can see and then you tag it with this collection definition",
    "start": "1595919",
    "end": "1601600"
  },
  {
    "text": "attribute and just name it whatever you want and then the actual test class you tag it with collection so is now part of",
    "start": "1601600",
    "end": "1609520"
  },
  {
    "text": "database test collection so I've done that there and I've done the same thing on these two I just made a second one",
    "start": "1609520",
    "end": "1615799"
  },
  {
    "text": "and tagged them with the second one so all in all we have two collections",
    "start": "1615799",
    "end": "1621039"
  },
  {
    "text": "running for our test suite and let's go ahead and run the whole Suite so we can",
    "start": "1621039",
    "end": "1626360"
  },
  {
    "text": "see that in our containers and they'll probably close",
    "start": "1626360",
    "end": "1632159"
  },
  {
    "text": "down pretty quick but I think we'll be able to see them so there's ryuk and there's our two",
    "start": "1632159",
    "end": "1637840"
  },
  {
    "text": "postgress containers they're running side by side they'll close down in a moment and then ruk will close down and",
    "start": "1637840",
    "end": "1645720"
  },
  {
    "text": "I think at least for me the first reaction when I saw this is cool but how",
    "start": "1645720",
    "end": "1650960"
  },
  {
    "text": "fast is this and in my experience it's pretty darn fast with respawn and",
    "start": "1650960",
    "end": "1656320"
  },
  {
    "text": "everything there seems to be some initial overhead spinning up the container which is not surprising but it",
    "start": "1656320",
    "end": "1662279"
  },
  {
    "text": "kind of seems to depend on how much my laptop was doing at any given moment so I've seen that overhead you can see",
    "start": "1662279",
    "end": "1668480"
  },
  {
    "text": "these tests took about seven and a half seconds for nine tests and three",
    "start": "1668480",
    "end": "1673840"
  },
  {
    "text": "containers I've seen that overhead be less than a less than two seconds and I've seen it be like 5 seconds so I",
    "start": "1673840",
    "end": "1680760"
  },
  {
    "text": "still think that's pretty good for spinning up multiple containers managing them for you destroying them at the",
    "start": "1680760",
    "end": "1686600"
  },
  {
    "text": "end and I believe Docker even comes",
    "start": "1686600",
    "end": "1692320"
  },
  {
    "text": "pre-installed on GitHub action Runners now so you don't have to worry about",
    "start": "1692320",
    "end": "1698320"
  },
  {
    "text": "that and obviously like I'm using EF core for this example but if your team",
    "start": "1698320",
    "end": "1703760"
  },
  {
    "text": "is using something different maybe you're using Dapper or ado . net",
    "start": "1703760",
    "end": "1708960"
  },
  {
    "text": "hopefully nobody's using that still um it just works as long as you're using a database it'll work with it",
    "start": "1708960",
    "end": "1715399"
  },
  {
    "text": "right so EF core is in the name and SQL light is in the name but really the",
    "start": "1715399",
    "end": "1721399"
  },
  {
    "text": "problem is you're using you're talking to a database somehow and it's not your production system so remember that okay",
    "start": "1721399",
    "end": "1729360"
  },
  {
    "text": "so that's the coding that's really the meat uh that that's how test containers is",
    "start": "1729360",
    "end": "1735080"
  },
  {
    "text": "working and",
    "start": "1735080",
    "end": "1739080"
  },
  {
    "text": "back to the beginning on me so there are two things I want to",
    "start": "1740399",
    "end": "1747600"
  },
  {
    "text": "talk about explicitly because I think there's probably at least one person in the room thinking does this work with",
    "start": "1747600",
    "end": "1753440"
  },
  {
    "text": "podman and it depends from what I've seen on the language you're working with because it's open source the the",
    "start": "1753440",
    "end": "1761000"
  },
  {
    "text": "different language versions are maintained all by different people so for instance with go test containers I",
    "start": "1761000",
    "end": "1767640"
  },
  {
    "text": "know for sure podman does work and in theory uh it just needs any Docker",
    "start": "1767640",
    "end": "1773640"
  },
  {
    "text": "compatible API so it should work in net as well that being said I don't know if there's some kind of support that it",
    "start": "1773640",
    "end": "1779919"
  },
  {
    "text": "needs explicitly to be added I have seen a GitHub issue where one guy said well I'm on Mac and I just had to write add",
    "start": "1779919",
    "end": "1786679"
  },
  {
    "text": "an environment variable and podman worked and atomic jar has also since acquired test container",
    "start": "1786679",
    "end": "1793000"
  },
  {
    "text": "so I don't know if that plays into it at all but theoretically it should it",
    "start": "1793000",
    "end": "1798159"
  },
  {
    "text": "should be fine and reusable containers this is a pretty cool thing in my",
    "start": "1798159",
    "end": "1803559"
  },
  {
    "text": "opinion this is an experimental feature of test containers but basically when",
    "start": "1803559",
    "end": "1809240"
  },
  {
    "text": "ryuk would normally spin down the containers it doesn't it just keeps them around and it reuses them on the next test run and to do this it's pretty",
    "start": "1809240",
    "end": "1818200"
  },
  {
    "text": "simple you just say where you would create your test container which",
    "start": "1818200",
    "end": "1824399"
  },
  {
    "text": "is here before you your build I think there's just a with",
    "start": "1824399",
    "end": "1830240"
  },
  {
    "text": "reuse",
    "start": "1830240",
    "end": "1833240"
  },
  {
    "text": "and you set that to true and that's it and you'll get reusable containers I have not tested this myself but I could",
    "start": "1835360",
    "end": "1842799"
  },
  {
    "text": "see this being useful if you have maybe some very complicated and time consuming",
    "start": "1842799",
    "end": "1848200"
  },
  {
    "text": "test setup lots of containers maybe you're setting up a redus cluster or something or maybe you have a base set",
    "start": "1848200",
    "end": "1854840"
  },
  {
    "text": "of data that you w't don't want to be deleted from your database cuz it's a lot or something I could definitely see",
    "start": "1854840",
    "end": "1859919"
  },
  {
    "text": "that coming in handy and just to recap sometimes I walk",
    "start": "1859919",
    "end": "1865200"
  },
  {
    "text": "out of a talk and all the knowledge walks out of the talk with me so so hopefully that doesn't happen uh we kind",
    "start": "1865200",
    "end": "1872240"
  },
  {
    "text": "of went over traditional options for what you see in integration test a lot it's not just SQL light it's a few other",
    "start": "1872240",
    "end": "1878919"
  },
  {
    "text": "things and really the problem is as long as you're not using postgress or whatever you're using production it's",
    "start": "1878919",
    "end": "1884600"
  },
  {
    "text": "not the same system you're tested against right and and if there even if",
    "start": "1884600",
    "end": "1889799"
  },
  {
    "text": "it is there might be maintainability issues like a real database something like",
    "start": "1889799",
    "end": "1895080"
  },
  {
    "text": "that and talked about what test containers is what it offers how to use it they saw the en coding demo we saw it",
    "start": "1895080",
    "end": "1900720"
  },
  {
    "text": "in action and I have done a test with a couple hundred tests with",
    "start": "1900720",
    "end": "1907559"
  },
  {
    "text": "test containers and it didn't seem to take any longer it still took I think it was like 5 Seconds to run a couple",
    "start": "1907559",
    "end": "1914039"
  },
  {
    "text": "hundred tests using a container so that spinning up and spinning down really it it seems to be pretty seamless in my",
    "start": "1914039",
    "end": "1921320"
  },
  {
    "text": "experience and we also talked about respawn which is a whole separate library but very relevant to",
    "start": "1921320",
    "end": "1926600"
  },
  {
    "text": "this where it will help you reset your database back to a clean slate so tests don't bump into each other right and you",
    "start": "1926600",
    "end": "1933600"
  },
  {
    "text": "have that clean slate every run and that's it so this is the QR code",
    "start": "1933600",
    "end": "1940200"
  },
  {
    "text": "again for the you can find the repo and the slides here and you can hit me up at",
    "start": "1940200",
    "end": "1946519"
  },
  {
    "text": "all the three things listed here and if there's any questions I would love that you can come up to the podium",
    "start": "1946519",
    "end": "1952000"
  },
  {
    "text": "and ask oh thank you [Applause]",
    "start": "1952000",
    "end": "1960740"
  }
]