[
  {
    "text": "I have a few hands how many of you are active doet",
    "start": "3719",
    "end": "9040"
  },
  {
    "text": "developers lots of hands nice so how many of you came here for",
    "start": "9040",
    "end": "16278"
  },
  {
    "text": "Advan EF cor we have a few hands now this talk is",
    "start": "16279",
    "end": "23039"
  },
  {
    "text": "aimed a little bit toward uh common mistakes which a lot of them might not",
    "start": "23039",
    "end": "29320"
  },
  {
    "text": "seem advance but what you might not have learned before is the consequences of",
    "start": "29320",
    "end": "35600"
  },
  {
    "text": "those mistakes but toward the end I'm going through a little bit some of the",
    "start": "35600",
    "end": "41800"
  },
  {
    "text": "best practices and some of the deadly sins that I'm going to show",
    "start": "41800",
    "end": "47840"
  },
  {
    "text": "actually might be pretty helpful um and yeah before we officially",
    "start": "47840",
    "end": "54640"
  },
  {
    "text": "start the motivation of this talk was to",
    "start": "54640",
    "end": "61000"
  },
  {
    "text": "I actually seen a lot of people work through weekends or long nights and stuff like that because you know an",
    "start": "61000",
    "end": "68759"
  },
  {
    "text": "application that worked perfectly fine yesterday or you know a month",
    "start": "68759",
    "end": "74000"
  },
  {
    "text": "ago suddenly it doesn't work well anymore you know it's Works slow it's",
    "start": "74000",
    "end": "80799"
  },
  {
    "text": "crashes and stuff like that and a lot of things that I'm going to show you here",
    "start": "80799",
    "end": "86720"
  },
  {
    "text": "what the reasons for that now some of them them you'll be like ah that would never happen to me",
    "start": "86720",
    "end": "93560"
  },
  {
    "text": "for that as well and it did and it actually took uh some of the",
    "start": "93560",
    "end": "99439"
  },
  {
    "text": "teams a weekend off because we didn't know what was",
    "start": "99439",
    "end": "105640"
  },
  {
    "text": "wrong and hopefully with what I'm going to show you you're not only going to",
    "start": "105640",
    "end": "110719"
  },
  {
    "text": "learn more best practices for EF core but also avoid those weekends where",
    "start": "110719",
    "end": "116000"
  },
  {
    "text": "you're trying to fix production for a bug that you don't know how or where it",
    "start": "116000",
    "end": "122759"
  },
  {
    "text": "come from and instead just enjoy the",
    "start": "122759",
    "end": "128718"
  },
  {
    "text": "weekend think I have just one more minute I'll try to do do not",
    "start": "130120",
    "end": "135680"
  },
  {
    "text": "disturb ah here we go just in",
    "start": "135680",
    "end": "141200"
  },
  {
    "text": "case bit also jet lacked I traveled like 30 hours arrived just",
    "start": "145840",
    "end": "152840"
  },
  {
    "text": "yesterday yeah I just don't know who to watch for",
    "start": "154920",
    "end": "161080"
  },
  {
    "text": "the go time can somebody raise the hand that",
    "start": "161080",
    "end": "166440"
  },
  {
    "text": "will give me the go time minutes you okay I just watch",
    "start": "166440",
    "end": "171560"
  },
  {
    "text": "you that's good yeah there was one time where I was",
    "start": "171560",
    "end": "176840"
  },
  {
    "text": "doing presentation and uh this said uh the person that going to do thumbs up um",
    "start": "176840",
    "end": "184239"
  },
  {
    "text": "will tell you when the presentation is going to start it's going to go live they forgot to tell me who that was so I",
    "start": "184239",
    "end": "192720"
  },
  {
    "text": "was looking someone for thumbs up like that that things alive so hi everyone",
    "start": "192720",
    "end": "198720"
  },
  {
    "text": "and welcome to NC London uh and I am going to show you some common mistakes",
    "start": "198720",
    "end": "205120"
  },
  {
    "text": "in EF core and one of those mistakes some of those mistakes that they're going to show you today actually",
    "start": "205120",
    "end": "212319"
  },
  {
    "text": "happened to some of the client projects and the consequences of those",
    "start": "212319",
    "end": "218120"
  },
  {
    "text": "mistakes SS is that uh a team had to stay at work and",
    "start": "218120",
    "end": "225400"
  },
  {
    "text": "do over time to fix those issues and you might also have heard",
    "start": "225400",
    "end": "231040"
  },
  {
    "text": "forance um government uh rolling out a new service which then couples toples",
    "start": "231040",
    "end": "238239"
  },
  {
    "text": "over in an hour some of the things that I'm going to show you could have been the things that",
    "start": "238239",
    "end": "245560"
  },
  {
    "text": "actually happened when they roll out the system so hopefully what you're going to",
    "start": "245560",
    "end": "251200"
  },
  {
    "text": "learn is that sometimes small things can have big",
    "start": "251200",
    "end": "256560"
  },
  {
    "text": "impact and with that I am Yan kavka and I know it's easy",
    "start": "256560",
    "end": "262680"
  },
  {
    "text": "to pronounce so you can just call me JK and you can follow me on all of these socials GitHub Twitter I mean x uh",
    "start": "262680",
    "end": "271800"
  },
  {
    "text": "blocks uh I come from Australia uh so over there I'm doing a",
    "start": "271800",
    "end": "277479"
  },
  {
    "text": "brisban full stack user group and I'm also one of the hosts of global AI the",
    "start": "277479",
    "end": "284080"
  },
  {
    "text": "podcast I'm mainly a net uh and EF code developer I forgot to mention I am from",
    "start": "284080",
    "end": "291440"
  },
  {
    "text": "ssw solution architect and um as a side gig I do",
    "start": "291440",
    "end": "298000"
  },
  {
    "text": "Microsoft uh I do AI a lot uh and I'm also a Microsoft AI",
    "start": "298000",
    "end": "304240"
  },
  {
    "text": "MVP all right so start off I'm going to show you a little bit of what is my",
    "start": "304240",
    "end": "311680"
  },
  {
    "text": "setup because the point of all of the things that I'm going to show you is",
    "start": "311680",
    "end": "317199"
  },
  {
    "text": "that you can try it yourself and if EF core 9 comes out or",
    "start": "317199",
    "end": "322240"
  },
  {
    "text": "EF Core 10 12 14 you can go back to this code Maze and",
    "start": "322240",
    "end": "329039"
  },
  {
    "text": "check if that is still true um I'm giving you that power and I'm also going to show",
    "start": "329039",
    "end": "335759"
  },
  {
    "text": "you the the the things that I used so you can replicate that then I'm going to",
    "start": "335759",
    "end": "342160"
  },
  {
    "text": "move to seven deadly sins which basically is I tried to find seven",
    "start": "342160",
    "end": "347919"
  },
  {
    "text": "things that I seen in production that was quite",
    "start": "347919",
    "end": "353280"
  },
  {
    "text": "terrible and how to fix it but I'm not just going to show you what's what can can cause issues I'm",
    "start": "353280",
    "end": "361560"
  },
  {
    "text": "also going to show you consequences of that because I think people remember",
    "start": "361560",
    "end": "367919"
  },
  {
    "text": "better um the things how you should do when you understand what goes wrong if",
    "start": "367919",
    "end": "374440"
  },
  {
    "text": "you don't do that and that's why I decided to show you uh both what happens when you do the",
    "start": "374440",
    "end": "382800"
  },
  {
    "text": "good thing as well as the bad thing and some many best practices that",
    "start": "382800",
    "end": "388280"
  },
  {
    "text": "I couldn't uh in in any of the slides just to give you some uh good best",
    "start": "388280",
    "end": "395240"
  },
  {
    "text": "practices for you to take away all right so first off why I uh",
    "start": "395240",
    "end": "402479"
  },
  {
    "text": "chose EF goare I love to work with it one of the great reasons for that is because we have right now lots of",
    "start": "402479",
    "end": "409919"
  },
  {
    "text": "different SE uh different different database engines and all of these",
    "start": "409919",
    "end": "415879"
  },
  {
    "text": "engines over here are supported by uh EF core and one of the issues that we sometimes",
    "start": "415879",
    "end": "423120"
  },
  {
    "text": "encounter is especially at the beginning of the project uh what database engine",
    "start": "423120",
    "end": "428919"
  },
  {
    "text": "we have to pick now if you do raw SQL if you change database engine you need to",
    "start": "428919",
    "end": "435080"
  },
  {
    "text": "now rewrite your SQL queries with ef core you can actually just regenerate",
    "start": "435080",
    "end": "441520"
  },
  {
    "text": "migrations and maybe adjust a little bit your uh how you create your database DB",
    "start": "441520",
    "end": "448879"
  },
  {
    "text": "context and also there's a lot of various different ORS not just for different",
    "start": "448879",
    "end": "456479"
  },
  {
    "text": "languages also for C uh obviously EF core we have Dapper technically more of",
    "start": "456479",
    "end": "463879"
  },
  {
    "text": "a mappa uh library but you can use it to generate SQL crus with it Martin is a",
    "start": "463879",
    "end": "471039"
  },
  {
    "text": "pretty popular one if you like post grass uh and also Cosmos DB which right",
    "start": "471039",
    "end": "477960"
  },
  {
    "text": "now IFCO is pretty good with Cosmos DB",
    "start": "477960",
    "end": "483000"
  },
  {
    "text": "but uh as much testing as we have done I we still kind of prefer to have Cosmos",
    "start": "483000",
    "end": "488840"
  },
  {
    "text": "DB as decay for uh Cosmos DB specifically just because we can have a",
    "start": "488840",
    "end": "494840"
  },
  {
    "text": "bit better control for the main reasons why we pick Cosmos",
    "start": "494840",
    "end": "500960"
  },
  {
    "text": "DB and that's the major thing that I love about EF core it gives me that",
    "start": "500960",
    "end": "507599"
  },
  {
    "text": "flexibility between features flexibility and performance uh it's kind of the",
    "start": "507599",
    "end": "514080"
  },
  {
    "text": "triangle where I can choose in which uh part of the tri",
    "start": "514080",
    "end": "519479"
  },
  {
    "text": "triangle I want to be uh and it's really awesome for",
    "start": "519479",
    "end": "524800"
  },
  {
    "text": "relational databases which most of my clients want to have so it's 90% of the",
    "start": "524800",
    "end": "532880"
  },
  {
    "text": "time the do the uh orm to choose um and another thing thing that",
    "start": "532880",
    "end": "539800"
  },
  {
    "text": "is really awesome is the built-in migration and datab based scaffolding",
    "start": "539800",
    "end": "545600"
  },
  {
    "text": "among of other tools uh built-in migrations allows you to do purely code",
    "start": "545600",
    "end": "551040"
  },
  {
    "text": "first without needing to ever generate and run a SQL uh scripts whereas DB",
    "start": "551040",
    "end": "557959"
  },
  {
    "text": "scaffolding allows me to actually take an existing database and generate a DB",
    "start": "557959",
    "end": "563560"
  },
  {
    "text": "context in EF core that allows me then to use that database so I don't have",
    "start": "563560",
    "end": "569440"
  },
  {
    "text": "have to uh not use EF core if the client",
    "start": "569440",
    "end": "574519"
  },
  {
    "text": "tells me not to go code first with that database all right so one of the other",
    "start": "574519",
    "end": "583519"
  },
  {
    "text": "motivators for this talk was also excuse",
    "start": "583519",
    "end": "588600"
  },
  {
    "text": "me when I talk with a lot of different um developers especially people who have",
    "start": "588600",
    "end": "595040"
  },
  {
    "text": "a lot of sequel of experience uh and done a lot of raw SQL they always tell",
    "start": "595040",
    "end": "602120"
  },
  {
    "text": "me well you know it would have been better if you written this in raw",
    "start": "602120",
    "end": "607880"
  },
  {
    "text": "SQL uh and you know instead of looking at the problem why something is slow in",
    "start": "607880",
    "end": "614360"
  },
  {
    "text": "EF cor they just say well let's write this in raw SQL uh which doesn't solve",
    "start": "614360",
    "end": "620640"
  },
  {
    "text": "any problems it's just avoids the problem and try a different solution um and another thing that",
    "start": "620640",
    "end": "629839"
  },
  {
    "text": "uh I also noticed is if you don't understand your tool you",
    "start": "629839",
    "end": "635040"
  },
  {
    "text": "end up with a lot more complex code than it is necessary and I hope what I'm",
    "start": "635040",
    "end": "640279"
  },
  {
    "text": "going to show you is that most of the code that you'll see is actually fairly",
    "start": "640279",
    "end": "646000"
  },
  {
    "text": "easy to read and understand what it does while also maintaining a very good",
    "start": "646000",
    "end": "654560"
  },
  {
    "text": "performance and we rarely Benchmark how code we just",
    "start": "654880",
    "end": "660959"
  },
  {
    "text": "say hey this is slow or we say hey this feels fast or this thing is faster than",
    "start": "660959",
    "end": "666920"
  },
  {
    "text": "that thing and there's no data behind it and this is why I wanted to show you",
    "start": "666920",
    "end": "673920"
  },
  {
    "text": "also the numbers behind uh all of the changes that we're going to",
    "start": "673920",
    "end": "679279"
  },
  {
    "text": "do and you know you know developers especially senior developers they love to share the horrors they have seen",
    "start": "679279",
    "end": "687120"
  },
  {
    "text": "obviously all of the names are reductive now before we start just uh again",
    "start": "687120",
    "end": "695120"
  },
  {
    "text": "quickly how many of you are net developers just to get a feel okay pretty much the entire room",
    "start": "695120",
    "end": "701959"
  },
  {
    "text": "how many of you have used EF core okay pretty much entire room and",
    "start": "701959",
    "end": "707560"
  },
  {
    "text": "how many of you are actively using EF core okay about half a room and how many",
    "start": "707560",
    "end": "714279"
  },
  {
    "text": "of you have gotten the comment just right in SQL",
    "start": "714279",
    "end": "720360"
  },
  {
    "text": "okay about fifth okay that's good well",
    "start": "720440",
    "end": "726600"
  },
  {
    "text": "what I'm going to show you today is we can actually squeeze out a lot from EF core and I'm going to use",
    "start": "726600",
    "end": "735199"
  },
  {
    "text": "benchmark.us bombia which is going to allow us to do like a very simple uh",
    "start": "746240",
    "end": "753120"
  },
  {
    "text": "load testing scenario basically we're just going to load up one URL and we're",
    "start": "753120",
    "end": "758360"
  },
  {
    "text": "just going to smash it and just in case you're interested in",
    "start": "758360",
    "end": "764760"
  },
  {
    "text": "you know you run the test and see the numbers being very different um most of",
    "start": "764760",
    "end": "770040"
  },
  {
    "text": "the numbers here are going to be still from Net 7 in EF core 7 uh I tried to",
    "start": "770040",
    "end": "775560"
  },
  {
    "text": "get it from EF core 8 the some complications and then the old numbers don't match up quite because I don't",
    "start": "775560",
    "end": "782040"
  },
  {
    "text": "have the same machine anymore um and this is my ryzen 9 5,900",
    "start": "782040",
    "end": "788839"
  },
  {
    "text": "x with lots of frats and decent amount of Ram uh this is important because even",
    "start": "788839",
    "end": "795959"
  },
  {
    "text": "though my laptop has more RAM and actually runs some of the tests better",
    "start": "795959",
    "end": "801480"
  },
  {
    "text": "than uh this machine lots of them um it's unable to match and the test",
    "start": "801480",
    "end": "808600"
  },
  {
    "text": "results not actually that useful uh mostly because it isn't powerful",
    "start": "808600",
    "end": "815199"
  },
  {
    "text": "enough and the test data uh I'm using a database with 7 million cells the reason",
    "start": "815199",
    "end": "823839"
  },
  {
    "text": "why is simple most of the time we have an application that starts off with very",
    "start": "823839",
    "end": "831800"
  },
  {
    "text": "little data and then over time that data set",
    "start": "831800",
    "end": "836920"
  },
  {
    "text": "grows and this is where the problem ends up being is once there's a Tipping Point your",
    "start": "836920",
    "end": "844480"
  },
  {
    "text": "application suddenly become slow uh and this is why I choose seven Millions because that kind of simulates",
    "start": "844480",
    "end": "852160"
  },
  {
    "text": "a database that have lived for 10 years and now everything is slow and they",
    "start": "852160",
    "end": "857519"
  },
  {
    "text": "complain about how it used to be fast and all that good stuff and I'm going to",
    "start": "857519",
    "end": "862720"
  },
  {
    "text": "show you a few tricks how to make this work uh very fast with seven million",
    "start": "862720",
    "end": "870120"
  },
  {
    "text": "rows also show you how bad it works if you don't filter out those",
    "start": "870120",
    "end": "877000"
  },
  {
    "text": "things um also if you use this database",
    "start": "877000",
    "end": "882040"
  },
  {
    "text": "or if you use any other old the databases with ef core 8 you will need",
    "start": "882040",
    "end": "887959"
  },
  {
    "text": "to uh set your compatibility level to 150 or SQL Server",
    "start": "887959",
    "end": "894279"
  },
  {
    "text": "2019 um you can put it to well 130 Plus",
    "start": "894279",
    "end": "899320"
  },
  {
    "text": "uh SQL Server 2016 or more uh because EF",
    "start": "899320",
    "end": "904399"
  },
  {
    "text": "core 8 has dropped the support for all the databases so technically you can still",
    "start": "904399",
    "end": "912480"
  },
  {
    "text": "run them but some of the queres will fail because they are no longer supported on those SQL",
    "start": "912480",
    "end": "919399"
  },
  {
    "text": "servers all right finally the fun stuff the seven deadly",
    "start": "919399",
    "end": "926199"
  },
  {
    "text": "sents we're going to start off with I credible to I innumerable how many of",
    "start": "926199",
    "end": "931880"
  },
  {
    "text": "you suspect what's going to happen here we have just a couple of hands",
    "start": "931880",
    "end": "939120"
  },
  {
    "text": "which makes me happy and sad at the same time not your fault just you might be",
    "start": "939120",
    "end": "946040"
  },
  {
    "text": "surprised about some of the Data asot Tracking how many of you have heard asot",
    "start": "946040",
    "end": "951839"
  },
  {
    "text": "tracking okay that's about a third that's good how how many of you know that you",
    "start": "951839",
    "end": "959000"
  },
  {
    "text": "don't need to use do include to join multiple tables in EF core just a few hands that's",
    "start": "959000",
    "end": "967279"
  },
  {
    "text": "awesome uh getting all columns that's a little bit obvious I kind of Squish them",
    "start": "967279",
    "end": "972839"
  },
  {
    "text": "together with the number three uh how many of you have used",
    "start": "972839",
    "end": "978000"
  },
  {
    "text": "pagination with TF core ah awesome you might learn some good",
    "start": "978000",
    "end": "983639"
  },
  {
    "text": "stuff how many of you are using cancellation tokens",
    "start": "983639",
    "end": "989120"
  },
  {
    "text": "with ef core okay we had very few hands and then",
    "start": "989120",
    "end": "994279"
  },
  {
    "text": "a few dropped down when I mentioned EF core and how many of you are using the",
    "start": "994279",
    "end": "1000120"
  },
  {
    "text": "latest and greatest of EF core when it comes to updates and",
    "start": "1000120",
    "end": "1006720"
  },
  {
    "text": "deletes okay we had one hand over there so that number my S7 might be the lucky",
    "start": "1006839",
    "end": "1015639"
  },
  {
    "text": "one all right one thing you should never ask yourself how bad can it",
    "start": "1015639",
    "end": "1022240"
  },
  {
    "text": "be do not ever ask that you don't want the answer all right let's start easy I",
    "start": "1022240",
    "end": "1029918"
  },
  {
    "text": "curable to I inumerable how bad can it be well let's try to see what the",
    "start": "1029919",
    "end": "1035720"
  },
  {
    "text": "problem actually is uh so here we have uh sales table we",
    "start": "1035720",
    "end": "1042120"
  },
  {
    "text": "convert it into a list and then we count it some of you might probably look at it",
    "start": "1042120",
    "end": "1047798"
  },
  {
    "text": "and it's like oh yeah the problem is pretty uh obvious and then we have this",
    "start": "1047799",
    "end": "1053320"
  },
  {
    "text": "one see here we having the sales table uh and we put it in I inumerable",
    "start": "1053320",
    "end": "1060400"
  },
  {
    "text": "um variable and then we count it you might suspect some problems here but you",
    "start": "1060400",
    "end": "1067000"
  },
  {
    "text": "know it does look kind of reasonable and then we have a method",
    "start": "1067000",
    "end": "1072360"
  },
  {
    "text": "that does basically the same thing just when you call it you don't actually see that",
    "start": "1072360",
    "end": "1080640"
  },
  {
    "text": "well the problem is they're all the same so if you thought this was bad the first",
    "start": "1080640",
    "end": "1085720"
  },
  {
    "text": "one well everything else is actually the very same thing uh I'm seeing some people taking",
    "start": "1085720",
    "end": "1092320"
  },
  {
    "text": "pictures I'll wait for a few seconds so what's going on here well",
    "start": "1092320",
    "end": "1097799"
  },
  {
    "text": "first off we have the HTTP request over here and then we have this I enable uh",
    "start": "1097799",
    "end": "1103799"
  },
  {
    "text": "this sales table gets casted into a inumerable and what happens s next is it",
    "start": "1103799",
    "end": "1110200"
  },
  {
    "text": "actually gets evaluated up to the point it got casted to I inumerable and it got get converted",
    "start": "1110200",
    "end": "1118919"
  },
  {
    "text": "into Select Staff from sales now remember this is a 7 million Row",
    "start": "1118919",
    "end": "1126080"
  },
  {
    "text": "Records but you know things get worse from here because SQL Server is like",
    "start": "1126080",
    "end": "1132120"
  },
  {
    "text": "yeah sure I'll give you 7 million rows and then what does then happen is",
    "start": "1132120",
    "end": "1137679"
  },
  {
    "text": "EF core dig passes every single row every single column and even adds",
    "start": "1137679",
    "end": "1145640"
  },
  {
    "text": "tracking to it which I'm going to go back uh to it later and then in memory when you have",
    "start": "1145640",
    "end": "1154200"
  },
  {
    "text": "everything loaded in Ram counts them which basically does nothing else",
    "start": "1154200",
    "end": "1161960"
  },
  {
    "text": "than just check one memory allocation in Ram because that count already is",
    "start": "1161960",
    "end": "1167039"
  },
  {
    "text": "calculated by that time and then it disposes the 7 million",
    "start": "1167039",
    "end": "1173760"
  },
  {
    "text": "rows now the the the structure of net sales is very small but the impact is",
    "start": "1173760",
    "end": "1183320"
  },
  {
    "text": "Big so here is what you should do use I quable and I'm going to show",
    "start": "1183320",
    "end": "1190280"
  },
  {
    "text": "you why because over here we have",
    "start": "1190280",
    "end": "1196480"
  },
  {
    "text": "sales. and that gets converted into select count star from sales and we only",
    "start": "1196960",
    "end": "1204039"
  },
  {
    "text": "get a single integer back so basically we have almost nothing uh that we need",
    "start": "1204039",
    "end": "1210320"
  },
  {
    "text": "to garbage collect so basically the only difference here is adding I",
    "start": "1210320",
    "end": "1216200"
  },
  {
    "text": "variable but you know the question here is how bad can it get you",
    "start": "1216200",
    "end": "1223120"
  },
  {
    "text": "know how bad is using inumerable",
    "start": "1223120",
    "end": "1228799"
  },
  {
    "text": "instead of I iable in the wrong place",
    "start": "1228799",
    "end": "1234159"
  },
  {
    "text": "well this is a million times more memory usage than using I quable you know not",
    "start": "1234159",
    "end": "1241840"
  },
  {
    "text": "big deal and it's only 64 times slower also not too much of a big deal",
    "start": "1241840",
    "end": "1249360"
  },
  {
    "text": "right uh it takes 3.5 seconds to run compared to 60",
    "start": "1249360",
    "end": "1255799"
  },
  {
    "text": "milliseconds you know a little bit different there uh but you know I like to low test",
    "start": "1255799",
    "end": "1263039"
  },
  {
    "text": "things with the question how bad can it be gets even",
    "start": "1263039",
    "end": "1268760"
  },
  {
    "text": "worse and here this is the only test you might here see the number of connections",
    "start": "1268760",
    "end": "1275600"
  },
  {
    "text": "is five in most of the test I have 10 or more with this one my machine was",
    "start": "1275600",
    "end": "1282880"
  },
  {
    "text": "unresponsive for 15 minutes for 15 minutes I wasn't able to",
    "start": "1282880",
    "end": "1289320"
  },
  {
    "text": "move my mouse before I was able to run the next one so at that stage I was saying I'm",
    "start": "1289320",
    "end": "1296679"
  },
  {
    "text": "going to reduce it to five because that is only about 8 minutes of my machine",
    "start": "1296679",
    "end": "1302440"
  },
  {
    "text": "not being responsive that's better so I'm not showing you the the",
    "start": "1302440",
    "end": "1307880"
  },
  {
    "text": "absolute worst case because my machine I like to use my machine uh and you know this is a 64",
    "start": "1307880",
    "end": "1316919"
  },
  {
    "text": "gigabyte machine here and I basically ran this on my laptop just you know for",
    "start": "1316919",
    "end": "1322640"
  },
  {
    "text": "sake of showing you how this looks like on machine that can actually allocate",
    "start": "1322640",
    "end": "1327760"
  },
  {
    "text": "that much memory you can see there's a pretty good chunk of 64 GB I think it",
    "start": "1327760",
    "end": "1333720"
  },
  {
    "text": "was about 30 gbt which means if you have a 32 gab uh machine you probably won't",
    "start": "1333720",
    "end": "1342600"
  },
  {
    "text": "be able to see that it's just going to end at 99% of RAM and then it's going to",
    "start": "1342600",
    "end": "1347840"
  },
  {
    "text": "start the trash hard drive or SSD so yeah that's this is how bad it",
    "start": "1347840",
    "end": "1353799"
  },
  {
    "text": "can go this could have gone even worse if I wouldn't have that much",
    "start": "1353799",
    "end": "1359640"
  },
  {
    "text": "memory but if I load test with I credible we're getting respectable 130",
    "start": "1359640",
    "end": "1366640"
  },
  {
    "text": "milliseconds to count 7 million cells and this is against exactly the",
    "start": "1366640",
    "end": "1373520"
  },
  {
    "text": "same um exactly the same circumstances you can see here we have 38 request per",
    "start": "1373520",
    "end": "1382919"
  },
  {
    "text": "second opposed to 0.09 request per",
    "start": "1382919",
    "end": "1389080"
  },
  {
    "text": "second just one little type change so if you take anything out of",
    "start": "1389080",
    "end": "1395159"
  },
  {
    "text": "here is if you you cast in Iron innumerable in EF core in the wrong",
    "start": "1395159",
    "end": "1401520"
  },
  {
    "text": "place your performance can drop by hundreds of times I have seen tens of",
    "start": "1401520",
    "end": "1408039"
  },
  {
    "text": "thousands of times it was very good when I fixed it I",
    "start": "1408039",
    "end": "1415480"
  },
  {
    "text": "could go for early lunch and then you know for 3 hours I was making a blog",
    "start": "1415480",
    "end": "1422480"
  },
  {
    "text": "post about it and things like that because I had the full day to solve that",
    "start": "1422480",
    "end": "1428200"
  },
  {
    "text": "problem and I solved it in five minutes and the client was like the",
    "start": "1428200",
    "end": "1433880"
  },
  {
    "text": "happiest ever because the application just started to run like rocket",
    "start": "1433880",
    "end": "1440440"
  },
  {
    "text": "ah also you might be able to see uh this is where it finishes over here I think you",
    "start": "1440600",
    "end": "1447880"
  },
  {
    "text": "might be able to see uh that uh I know it's very visible over here this there's",
    "start": "1447880",
    "end": "1454400"
  },
  {
    "text": "a little little dip over there that that's the difference so if if there's anything you",
    "start": "1454400",
    "end": "1461960"
  },
  {
    "text": "take away is that um all right as not tracking so not",
    "start": "1461960",
    "end": "1468440"
  },
  {
    "text": "many know about this so what Asal tracking does is when we add this into",
    "start": "1468440",
    "end": "1475000"
  },
  {
    "text": "the query over there for the sales it makes it non-tracking I prefer the",
    "start": "1475000",
    "end": "1481600"
  },
  {
    "text": "phrase it makes it read only because that way uh it makes more logical sense",
    "start": "1481600",
    "end": "1488720"
  },
  {
    "text": "it's like hey I'm getting data and I'm not going to do anything with it that will impact the",
    "start": "1488720",
    "end": "1495000"
  },
  {
    "text": "database I think read only would be better but if you struggle with what snot tracking",
    "start": "1495000",
    "end": "1501279"
  },
  {
    "text": "means just think of it as with only and what that means because some",
    "start": "1501279",
    "end": "1507440"
  },
  {
    "text": "people on YouTube said hey don't teach that they'll use it everywhere and then",
    "start": "1507440",
    "end": "1512520"
  },
  {
    "text": "we'll have problems the things that you get back are not tracked that means that",
    "start": "1512520",
    "end": "1518720"
  },
  {
    "text": "if you do safe changes those changes will not be tracked and not be saved in your",
    "start": "1518720",
    "end": "1525039"
  },
  {
    "text": "database but why is it important for you to know as not tracking well in traditional workflow we",
    "start": "1525039",
    "end": "1532640"
  },
  {
    "text": "have EF core generate the query we get results from EF core we passed and maap",
    "start": "1532640",
    "end": "1537679"
  },
  {
    "text": "the data and what happens over here we have ADD tracking",
    "start": "1537679",
    "end": "1543200"
  },
  {
    "text": "properties and those properties it cost a bit of memory and CPU to set them up",
    "start": "1543200",
    "end": "1549919"
  },
  {
    "text": "but this is how you can then call Save changes and it will figure out on its",
    "start": "1549919",
    "end": "1556240"
  },
  {
    "text": "own what you have changed from the data that you got back now the difference if you do s not",
    "start": "1556240",
    "end": "1564080"
  },
  {
    "text": "without s not track well if you do with as not tracking this part gets skipped",
    "start": "1564080",
    "end": "1570520"
  },
  {
    "text": "now this doesn't sound too much but when we look at the",
    "start": "1570520",
    "end": "1575559"
  },
  {
    "text": "data well we use up four times less memory for the same amount of uh query",
    "start": "1575559",
    "end": "1582559"
  },
  {
    "text": "now here the caveat is every single query that you're going to do you are",
    "start": "1582559",
    "end": "1589520"
  },
  {
    "text": "going to have vastly different results because it depends on how big uh those",
    "start": "1589520",
    "end": "1595679"
  },
  {
    "text": "data structures are it depends on how much data you actually get from SQL Server it depends on a lot of different",
    "start": "1595679",
    "end": "1603960"
  },
  {
    "text": "things but what I have seen is about at least",
    "start": "1603960",
    "end": "1610480"
  },
  {
    "text": "25% to 100% on average uh better memory",
    "start": "1610480",
    "end": "1616240"
  },
  {
    "text": "uh less memory usage and about 50% uh faster execution in this",
    "start": "1616240",
    "end": "1622760"
  },
  {
    "text": "particular case we got five times which is awesome uh and you know it's almost free",
    "start": "1622760",
    "end": "1629200"
  },
  {
    "text": "performance you just add one line and if you don't need to change anything that's almost free",
    "start": "1629200",
    "end": "1635960"
  },
  {
    "text": "performance and yeah what you should be",
    "start": "1635960",
    "end": "1641039"
  },
  {
    "text": "uh considering is this has been done with SQL Server provider SQL",
    "start": "1641039",
    "end": "1648840"
  },
  {
    "text": "provider um at least in EF core 7 I need to double check that with ef core 8 did",
    "start": "1648840",
    "end": "1655000"
  },
  {
    "text": "not had any impact on this so you should verify if performance is the main reason",
    "start": "1655000",
    "end": "1662360"
  },
  {
    "text": "you're doing this you should verify that you actually gain any performance gains",
    "start": "1662360",
    "end": "1667559"
  },
  {
    "text": "because in sqlite as far as I heard from others you you might get a little bit of",
    "start": "1667559",
    "end": "1673960"
  },
  {
    "text": "performance uh hit because of as not tracking",
    "start": "1673960",
    "end": "1679000"
  },
  {
    "text": "but I still prefer to use asot tracking because for me this tells to other",
    "start": "1679000",
    "end": "1684320"
  },
  {
    "text": "developers that I do not intend to change that data it's kind of telling",
    "start": "1684320",
    "end": "1690039"
  },
  {
    "text": "the developers this is read only do not change this it is not meant to be",
    "start": "1690039",
    "end": "1697960"
  },
  {
    "text": "changed and if we load test this we're getting a little bit better um results",
    "start": "1697960",
    "end": "1704960"
  },
  {
    "text": "and we get a little bit better results mostly because the garbage collector has",
    "start": "1704960",
    "end": "1710039"
  },
  {
    "text": "to work a little bit less and if anyone looks at net",
    "start": "1710039",
    "end": "1718360"
  },
  {
    "text": "performance usually if you allocate less memory results on longterm better",
    "start": "1718360",
    "end": "1724760"
  },
  {
    "text": "performance might not give you the the benefits right away but might give you",
    "start": "1724760",
    "end": "1731200"
  },
  {
    "text": "benefits down the line all right so explicit includes usually what we do if we want",
    "start": "1731200",
    "end": "1738679"
  },
  {
    "text": "to add another uh table to the current uh T table is we use do include and we",
    "start": "1738679",
    "end": "1746399"
  },
  {
    "text": "say which property we want to include we can also do dot join and do more",
    "start": "1746399",
    "end": "1753559"
  },
  {
    "text": "old-fashion join that's very similar just more manual um but the issue with that",
    "start": "1753559",
    "end": "1762159"
  },
  {
    "text": "is and I have seen that where somebody writes a method which returns an M",
    "start": "1762159",
    "end": "1768360"
  },
  {
    "text": "variable say to sales and then inside this they just do include Dot customer",
    "start": "1768360",
    "end": "1775799"
  },
  {
    "text": "dot include uh something else then dot then include something something",
    "start": "1775799",
    "end": "1782240"
  },
  {
    "text": "else and then that method is used into something",
    "start": "1782240",
    "end": "1787919"
  },
  {
    "text": "else which uses none of that now how many of you think",
    "start": "1787919",
    "end": "1794440"
  },
  {
    "text": "that those includes that we don't use won't be used won't be uh won't be",
    "start": "1794440",
    "end": "1800600"
  },
  {
    "text": "generated and we won't get any uh SQL in the joints and stuff like",
    "start": "1800600",
    "end": "1806960"
  },
  {
    "text": "that okay everyone believes that that's a terrible idea uh so yeah efq when you tell it",
    "start": "1806960",
    "end": "1817240"
  },
  {
    "text": "specifically include this it will no longer check whether it makes sense for",
    "start": "1817240",
    "end": "1824640"
  },
  {
    "text": "that to be included you told it that you need it and it's up to you that you",
    "start": "1824640",
    "end": "1830679"
  },
  {
    "text": "actually need it but there is a solution for that so",
    "start": "1830679",
    "end": "1836600"
  },
  {
    "text": "instead of using uh do include and salesperson what you can do instead is",
    "start": "1836600",
    "end": "1842919"
  },
  {
    "text": "over here I have a select and what I'm doing is I'm directly accessing the data",
    "start": "1842919",
    "end": "1850440"
  },
  {
    "text": "that I want at the end that will implicitly uh include uh this stable and",
    "start": "1850440",
    "end": "1858120"
  },
  {
    "text": "do the join behind the scenes now what is incredible about this is if we change",
    "start": "1858120",
    "end": "1864559"
  },
  {
    "text": "this sales uh with a salesperson and not include these two um",
    "start": "1864559",
    "end": "1871519"
  },
  {
    "text": "Properties or if we add more of them the SQL will reflect that change so you now",
    "start": "1871519",
    "end": "1879880"
  },
  {
    "text": "no longer need to manually track whether or not you still need that include that",
    "start": "1879880",
    "end": "1885919"
  },
  {
    "text": "is done for you and here this is a bit uh a combination",
    "start": "1885919",
    "end": "1892519"
  },
  {
    "text": "also with selecting The Columns uh performance the performance here is 2.5",
    "start": "1892519",
    "end": "1900120"
  },
  {
    "text": "times faster in this particular case but uh think of it this that uh the more",
    "start": "1900120",
    "end": "1906960"
  },
  {
    "text": "joins that you do the more penalty you'll have to pay on the SQL service",
    "start": "1906960",
    "end": "1913559"
  },
  {
    "text": "end uh and the more uh joins you can get rid of the faster things will run and",
    "start": "1913559",
    "end": "1922200"
  },
  {
    "text": "this will allow you to automatically track that EF core is doing that for",
    "start": "1922200",
    "end": "1929720"
  },
  {
    "text": "you all right we also mentioned about pagination",
    "start": "1929760",
    "end": "1935440"
  },
  {
    "text": "and we didn't have too many uh Ro uh hands uh in the air for",
    "start": "1935440",
    "end": "1941240"
  },
  {
    "text": "paginations so what here happens is and that this is what I believe is why a lot",
    "start": "1941240",
    "end": "1948159"
  },
  {
    "text": "of system crashes uh after they gone in production or they run in production for a few",
    "start": "1948159",
    "end": "1954159"
  },
  {
    "text": "weeks is because they don't do pigeon there's a drastically different",
    "start": "1954159",
    "end": "1959720"
  },
  {
    "text": "performance when you run a query that returns thousand results or when it",
    "start": "1959720",
    "end": "1964760"
  },
  {
    "text": "starts to return hundreds of thousand results uh and a lot of websites what",
    "start": "1964760",
    "end": "1970840"
  },
  {
    "text": "they do is they just return everything it's not page paginated and over time",
    "start": "1970840",
    "end": "1977519"
  },
  {
    "text": "say it Gres to 7 million uh somehow the users suffer for the software enough to",
    "start": "1977519",
    "end": "1984720"
  },
  {
    "text": "get to that number which is a miracle on its own uh but that causes huge",
    "start": "1984720",
    "end": "1991320"
  },
  {
    "text": "problems but what we can do here ah so here is how you that usually",
    "start": "1991320",
    "end": "1998320"
  },
  {
    "text": "happens so what you can see here is what often happens",
    "start": "1998320",
    "end": "2005159"
  },
  {
    "text": "is they uh most of the developers don't know how to deal with this part so what",
    "start": "2005159",
    "end": "2011600"
  },
  {
    "text": "they do is they fetch all of the information not",
    "start": "2011600",
    "end": "2018080"
  },
  {
    "text": "paginated and they do uh do count and the only reason why they fetch",
    "start": "2018080",
    "end": "2024679"
  },
  {
    "text": "all of the information is because they don't know how to get this dot count",
    "start": "2024679",
    "end": "2030440"
  },
  {
    "text": "after they pagate so the simplest thing is just get all of the stuff and then deal everything in",
    "start": "2030440",
    "end": "2036600"
  },
  {
    "text": "memory uh and that's that's terrible thing to do uh and I'll see you I show you why",
    "start": "2036600",
    "end": "2044480"
  },
  {
    "text": "that is and here we have Skip and we have take in",
    "start": "2044480",
    "end": "2050520"
  },
  {
    "text": "memory now what you should do is you can actually create an i quel",
    "start": "2050520",
    "end": "2058079"
  },
  {
    "text": "over here and you have this query over here and you do whatever you need to do",
    "start": "2058079",
    "end": "2064560"
  },
  {
    "text": "before you need to paginate so you apply your way Clauses you apply everything",
    "start": "2064560",
    "end": "2070919"
  },
  {
    "text": "that is necessary right up to the order buy you can also skip or sting at at this point",
    "start": "2070919",
    "end": "2078000"
  },
  {
    "text": "anything that would not impact the count and then what you do is you do",
    "start": "2078000",
    "end": "2083919"
  },
  {
    "text": "query. count now here I did a sync because I want to be cancelable and what",
    "start": "2083919",
    "end": "2090800"
  },
  {
    "text": "this happens is this is going to ask SQL Server hey if I run this query how many",
    "start": "2090800",
    "end": "2097839"
  },
  {
    "text": "um results I'll get now what is amazing is we can then",
    "start": "2097839",
    "end": "2104040"
  },
  {
    "text": "update the query to include Skip and take uh and then run it and we can then",
    "start": "2104040",
    "end": "2110400"
  },
  {
    "text": "get just that one page from SQL server and this is a lot faster than the pre uh",
    "start": "2110400",
    "end": "2118000"
  },
  {
    "text": "previous uh example the only time this is not faster is when the results are",
    "start": "2118000",
    "end": "2123680"
  },
  {
    "text": "less than one page and the difference is very imaginable it's",
    "start": "2123680",
    "end": "2129720"
  },
  {
    "text": "negligible so you can see here that we have a pretty Stark difference like 18",
    "start": "2129720",
    "end": "2135359"
  },
  {
    "text": "times faster on average when we load test this and this is again 7 million",
    "start": "2135359",
    "end": "2141119"
  },
  {
    "text": "rows so it takes about 1.3 seconds now this is not the same number that you",
    "start": "2141119",
    "end": "2146839"
  },
  {
    "text": "have seen earlier which was 3.5 seconds I actually had to reduce the data set uh",
    "start": "2146839",
    "end": "2153040"
  },
  {
    "text": "so this is a little bit cheating this is not the worst case with 7 million I think it was a bit over one million",
    "start": "2153040",
    "end": "2159880"
  },
  {
    "text": "because as I said I want to use my machine I didn't want to wait 10 minutes",
    "start": "2159880",
    "end": "2165920"
  },
  {
    "text": "every single time when I run this so you can see here the performance",
    "start": "2165920",
    "end": "2171680"
  },
  {
    "text": "difference is very uh is a lot better but the major difference between the one",
    "start": "2171680",
    "end": "2178000"
  },
  {
    "text": "below that use uh pagination correctly and the one above is that the silver is",
    "start": "2178000",
    "end": "2185480"
  },
  {
    "text": "literally not responding when it's trying to process this because it just is overwhelmed by data and it's unable",
    "start": "2185480",
    "end": "2193400"
  },
  {
    "text": "to get any free time to do anything else whereas this one this one uh below can",
    "start": "2193400",
    "end": "2199200"
  },
  {
    "text": "still handle other requests uh all right so the next one",
    "start": "2199200",
    "end": "2207599"
  },
  {
    "text": "that we're going to look up is non-cancelable queries now this is one very interesting one how many of you",
    "start": "2207599",
    "end": "2214000"
  },
  {
    "text": "have been dsed we have two hands how many have users",
    "start": "2214000",
    "end": "2221359"
  },
  {
    "text": "accidentally clicking F5 a lot of times to point with the server was no longer",
    "start": "2221359",
    "end": "2226960"
  },
  {
    "text": "responding okay we have about 10ish hands",
    "start": "2226960",
    "end": "2232359"
  },
  {
    "text": "nice so what's the problem what is the problem if we don't use cancelable uh",
    "start": "2232359",
    "end": "2239119"
  },
  {
    "text": "tokens well usually when HTTP request comes in uh efco sends the query to SQL",
    "start": "2239119",
    "end": "2245800"
  },
  {
    "text": "Server SQL Server um process the SEC request then the user cancels the",
    "start": "2245800",
    "end": "2252680"
  },
  {
    "text": "request and if could and net just happily does its",
    "start": "2252680",
    "end": "2258359"
  },
  {
    "text": "thing and at the end it just says uh was this cancelled by the way this is like",
    "start": "2258359",
    "end": "2264560"
  },
  {
    "text": "at the very end if no it basically returns all of the results everything is",
    "start": "2264560",
    "end": "2270200"
  },
  {
    "text": "Happy uh if not it discards everything it has done like everything that it's",
    "start": "2270200",
    "end": "2277200"
  },
  {
    "text": "happened just gone now if you're updating something",
    "start": "2277200",
    "end": "2282240"
  },
  {
    "text": "that might be something that you actually want if it's something where user just smashes F5 because the page is",
    "start": "2282240",
    "end": "2289400"
  },
  {
    "text": "too slow this will make it even slower uh so what happens over here",
    "start": "2289400",
    "end": "2297480"
  },
  {
    "text": "is we add this cancellation token I just like it to call CT because it's short",
    "start": "2297480",
    "end": "2303920"
  },
  {
    "text": "and nice and over here what we do is to link casing and that is going to pass",
    "start": "2303920",
    "end": "2310319"
  },
  {
    "text": "down the cancellation token to EF core and when the user cancels the web",
    "start": "2310319",
    "end": "2317319"
  },
  {
    "text": "request or if there's any other uh cancellation um uh",
    "start": "2317319",
    "end": "2322920"
  },
  {
    "text": "trigger this is going to cancel not just on the net site not just in EF cosine",
    "start": "2322920",
    "end": "2330160"
  },
  {
    "text": "but also on the SQL Server end so the SQL Server will also stop doing the",
    "start": "2330160",
    "end": "2337480"
  },
  {
    "text": "query and that's very important because it's not just the net application that",
    "start": "2337480",
    "end": "2343880"
  },
  {
    "text": "can get overwhelmed you can also overwhel overwhelm SQL",
    "start": "2343880",
    "end": "2349200"
  },
  {
    "text": "server and then your application is really slow because the SQL Server is really",
    "start": "2349200",
    "end": "2355160"
  },
  {
    "text": "slow so what happens over here now is everything is the same up to this",
    "start": "2355160",
    "end": "2360880"
  },
  {
    "text": "pointment the user cancels now this is now being passed to C server which stops",
    "start": "2360880",
    "end": "2369280"
  },
  {
    "text": "processing the query and it also stops the net end it",
    "start": "2369280",
    "end": "2375400"
  },
  {
    "text": "kills it it does the task cancellation exception and also here it kills the SQL",
    "start": "2375400",
    "end": "2383480"
  },
  {
    "text": "Server it finishes the query so obviously this is not testing",
    "start": "2383480",
    "end": "2390760"
  },
  {
    "text": "the absolute worst case scenario because I want to use my computer and what you might be surprised",
    "start": "2390760",
    "end": "2397079"
  },
  {
    "text": "is it's only two times faster over here but what is important to note",
    "start": "2397079",
    "end": "2404680"
  },
  {
    "text": "is not only the down below managed to process more of the requests it was also",
    "start": "2404680",
    "end": "2411880"
  },
  {
    "text": "more uh it was uh more responses faster a full 40 seconds faster than above so",
    "start": "2411880",
    "end": "2419720"
  },
  {
    "text": "it's not only about being able to process more request it's also about",
    "start": "2419720",
    "end": "2425000"
  },
  {
    "text": "being able to recover from a huge Spike or from an",
    "start": "2425000",
    "end": "2431960"
  },
  {
    "text": "attack and last sin is how we update uh our entities",
    "start": "2432160",
    "end": "2438319"
  },
  {
    "text": "nowadays now back in the day uh this was very inefficient we used",
    "start": "2438319",
    "end": "2445079"
  },
  {
    "text": "uh efcore tracking which they're very great for certain scenarios and back",
    "start": "2445079",
    "end": "2451359"
  },
  {
    "text": "then it was the only scenario unless you want to write raw SQL",
    "start": "2451359",
    "end": "2457680"
  },
  {
    "text": "but nowadays uh first the example over here back in the day what we had to do",
    "start": "2457680",
    "end": "2465119"
  },
  {
    "text": "is we actually if we wanted to update all of the employees and just for fun",
    "start": "2465119",
    "end": "2470680"
  },
  {
    "text": "switch the first name with their last name uh we had to write all of this",
    "start": "2470680",
    "end": "2476160"
  },
  {
    "text": "thing it was a lot of work to just do that Shenanigans and when you get uh SQL out",
    "start": "2476160",
    "end": "2485520"
  },
  {
    "text": "you'll see that it updates one after another so that's quite efficient isn't",
    "start": "2485520",
    "end": "2491319"
  },
  {
    "text": "it but what happens with ef course 7 is now we can just use execute update and",
    "start": "2491319",
    "end": "2499960"
  },
  {
    "text": "we can just say set the property first name to be last name and set the property last name to be first name",
    "start": "2499960",
    "end": "2507040"
  },
  {
    "text": "simples right you can write easy codes to do some Shenanigans like changing",
    "start": "2507040",
    "end": "2512800"
  },
  {
    "text": "first name and last name perfect for uh April 1st um um but what is important",
    "start": "2512800",
    "end": "2518839"
  },
  {
    "text": "here is you can change this last name to be a string for instance or a variable",
    "start": "2518839",
    "end": "2527040"
  },
  {
    "text": "you can actually also add a way Clause behind execute update you can do execute",
    "start": "2527040",
    "end": "2533920"
  },
  {
    "text": "delete as well you can do execute delete so first way um and then we have where",
    "start": "2533920",
    "end": "2543520"
  },
  {
    "text": "uh employees are not active and then you can do execute delete and you delete all",
    "start": "2543520",
    "end": "2549559"
  },
  {
    "text": "of the uh nonactive employees with one simple query and this is the query that",
    "start": "2549559",
    "end": "2556240"
  },
  {
    "text": "you get at the end it's just an update uh this table",
    "start": "2556240",
    "end": "2562319"
  },
  {
    "text": "and here we have the set to do the swap that's",
    "start": "2562319",
    "end": "2568480"
  },
  {
    "text": "it it's very easy to understand uh SQL uh which makes it a lot easier to debug",
    "start": "2568480",
    "end": "2575440"
  },
  {
    "text": "when things go wrong and over here this is like a really",
    "start": "2575440",
    "end": "2581280"
  },
  {
    "text": "small uh set over here we have only 23 records but one of the reasons why I",
    "start": "2581280",
    "end": "2586760"
  },
  {
    "text": "wanted to show you this even with just 23 records it is a very noticeable",
    "start": "2586760",
    "end": "2595640"
  },
  {
    "text": "difference three times for just 23 records imagine if we do uh fiscal uh",
    "start": "2595640",
    "end": "2604160"
  },
  {
    "text": "here um processing of sales and and we want to set all of the sales to be",
    "start": "2604160",
    "end": "2609920"
  },
  {
    "text": "processed all 7 million records that that's going to take",
    "start": "2609920",
    "end": "2617400"
  },
  {
    "text": "several minutes not just a few seconds all",
    "start": "2617400",
    "end": "2623280"
  },
  {
    "text": "right so how many of you have learned something new",
    "start": "2623280",
    "end": "2628400"
  },
  {
    "text": "today pretty much all hands nice now for",
    "start": "2628400",
    "end": "2633760"
  },
  {
    "text": "the ones that wants to have a little bit more advanced knowledge or just looking",
    "start": "2633760",
    "end": "2639240"
  },
  {
    "text": "for some extra uh best practices this is uh the slides for you so first off this",
    "start": "2639240",
    "end": "2647800"
  },
  {
    "text": "is more like you know senior developers like to share Horror Stories the other things that I have",
    "start": "2647800",
    "end": "2653760"
  },
  {
    "text": "seen in practice is this thing and you would say ah this is the same as did the",
    "start": "2653760",
    "end": "2660160"
  },
  {
    "text": "first sin right well you can see that did did doom and",
    "start": "2660160",
    "end": "2666800"
  },
  {
    "text": "if the do con is greater than zero then return true and I was like I I understand from",
    "start": "2666800",
    "end": "2674599"
  },
  {
    "text": "where you come from but please use any this is really",
    "start": "2674599",
    "end": "2680880"
  },
  {
    "text": "fast I don't have the numbers but I hope I don't need to show them that this is really fast and another thing that I",
    "start": "2680880",
    "end": "2688119"
  },
  {
    "text": "noticed which I actually very well understand why this is happening is when",
    "start": "2688119",
    "end": "2693760"
  },
  {
    "text": "we have conditional um when we're doing conditional um filtering like for",
    "start": "2693760",
    "end": "2701559"
  },
  {
    "text": "instance we want to filter by sales ID only if it's not null there's kind of",
    "start": "2701559",
    "end": "2707040"
  },
  {
    "text": "two different codes that I have seen one is this one where they get all of the uh",
    "start": "2707040",
    "end": "2712480"
  },
  {
    "text": "all of the information they need all of the rows before the optional filter and then they filter in memory and there's",
    "start": "2712480",
    "end": "2719400"
  },
  {
    "text": "another one where they do we and then in brackets they say if sales ID is not",
    "start": "2719400",
    "end": "2726000"
  },
  {
    "text": "null then uh compared with that uh I propose a much more uh cleaner approach",
    "start": "2726000",
    "end": "2733599"
  },
  {
    "text": "because we already know that sales ID uh if it's null we don't need to search for",
    "start": "2733599",
    "end": "2739000"
  },
  {
    "text": "it SQL Server doesn't need to know that we even ever a intended to search by it",
    "start": "2739000",
    "end": "2745839"
  },
  {
    "text": "so what here does is similar as pagination we are constructing the query",
    "start": "2745839",
    "end": "2751960"
  },
  {
    "text": "as we go and this is the most optimal way of uh doing the queries because if",
    "start": "2751960",
    "end": "2760119"
  },
  {
    "text": "SQL Server never needs to understand that ah you actually don't need the cells",
    "start": "2760119",
    "end": "2765440"
  },
  {
    "text": "ID I don't have to worry about that or actually wor even worse for instance if",
    "start": "2765440",
    "end": "2772079"
  },
  {
    "text": "you use something like SQ light or other SQL engines where they are unable to",
    "start": "2772079",
    "end": "2778440"
  },
  {
    "text": "optimize your query before they run it they'll actually run all of that stuff but here you don't have to worry",
    "start": "2778440",
    "end": "2785079"
  },
  {
    "text": "about it because they will never even know know that you wanted to optionally do",
    "start": "2785079",
    "end": "2790280"
  },
  {
    "text": "that and I think this is a very important concept to know you can",
    "start": "2790280",
    "end": "2795920"
  },
  {
    "text": "construct queries as you go another one is DB context pool now",
    "start": "2795920",
    "end": "2803359"
  },
  {
    "text": "this is very interesting especially if you want your database to scale because what this does is when you request for",
    "start": "2803359",
    "end": "2811040"
  },
  {
    "text": "ADB context it may recycle an existing one and now",
    "start": "2811040",
    "end": "2817520"
  },
  {
    "text": "for SQL Server the SQL Server provider is already recycling connections for you",
    "start": "2817520",
    "end": "2824200"
  },
  {
    "text": "but what this one does it also recycles DB context and if you use a provider um",
    "start": "2824200",
    "end": "2831960"
  },
  {
    "text": "probably SQL light um maybe my SQL where the",
    "start": "2831960",
    "end": "2837200"
  },
  {
    "text": "connections might not be recycled behind the scenes these de uh these uh recycle",
    "start": "2837200",
    "end": "2843160"
  },
  {
    "text": "DB context will keep that connection alive because establishing and destroying",
    "start": "2843160",
    "end": "2849359"
  },
  {
    "text": "connections takes time creating and destroying DB contextes takes time the",
    "start": "2849359",
    "end": "2855119"
  },
  {
    "text": "only caveat here is the DB context uh must be",
    "start": "2855119",
    "end": "2860400"
  },
  {
    "text": "stateless now if you do smart architecturing you can actually meet it",
    "start": "2860400",
    "end": "2866359"
  },
  {
    "text": "stateful with uses of interfaces and smart uses of dependency",
    "start": "2866359",
    "end": "2872319"
  },
  {
    "text": "injection but generally speaking just think of it as stateless",
    "start": "2872319",
    "end": "2877640"
  },
  {
    "text": "now tag Rd this is my favorite thing to talk about and",
    "start": "2877640",
    "end": "2882720"
  },
  {
    "text": "if you want after the talk you can ask me all about tagrid what this allows me",
    "start": "2882720",
    "end": "2887880"
  },
  {
    "text": "to do is to add this little thing into the generated sequel now how many of you",
    "start": "2887880",
    "end": "2895920"
  },
  {
    "text": "think this is like",
    "start": "2895920",
    "end": "2901400"
  },
  {
    "text": "mindblowing we have a few hands okay now let me tell you",
    "start": "2901400",
    "end": "2908520"
  },
  {
    "text": "this this can save you sometimes a full week why especially if you have very",
    "start": "2908520",
    "end": "2916880"
  },
  {
    "text": "complicated queries and say that you have dozens of them maybe about 56 of",
    "start": "2916880",
    "end": "2923160"
  },
  {
    "text": "them that number is definitely nothing related to real life and then you have",
    "start": "2923160",
    "end": "2929559"
  },
  {
    "text": "to figure out which one of those is the problem now the problem",
    "start": "2929559",
    "end": "2935119"
  },
  {
    "text": "is 30 of those are identical and they look like it could have been",
    "start": "2935119",
    "end": "2942240"
  },
  {
    "text": "generated by the query that causes the problem and then you generate the thing",
    "start": "2942240",
    "end": "2949119"
  },
  {
    "text": "all 30 of them and then you realize that on the production it's just a little bit",
    "start": "2949119",
    "end": "2955680"
  },
  {
    "text": "differently generated the SQL and it's not quite the same as locally and now",
    "start": "2955680",
    "end": "2960960"
  },
  {
    "text": "you're going through line by line in SQL",
    "start": "2960960",
    "end": "2966240"
  },
  {
    "text": "the figure out which of those 30 sequels are the same only to realize that you're",
    "start": "2966240",
    "end": "2974240"
  },
  {
    "text": "using EF C 2.2 which can sometimes spit queries which then resulted that none of",
    "start": "2974240",
    "end": "2980839"
  },
  {
    "text": "those 56 uh queries were actually related to that one and it was a super",
    "start": "2980839",
    "end": "2987040"
  },
  {
    "text": "massive one that included one of the 56 uh queries and we wasted all our time",
    "start": "2987040",
    "end": "2994640"
  },
  {
    "text": "finding that thing because none of them actually fit because it was a split query that in if C 2.2 was done for",
    "start": "2994640",
    "end": "3004760"
  },
  {
    "text": "you which I think Engineers back then was say saying developers will be H very",
    "start": "3004760",
    "end": "3011160"
  },
  {
    "text": "happy about it not in that case now what this thing did is it added",
    "start": "3011160",
    "end": "3020119"
  },
  {
    "text": "that little comment and you know what we did we put every single query this little little",
    "start": "3020119",
    "end": "3027799"
  },
  {
    "text": "comment and then we found not one but three queries that had",
    "start": "3027799",
    "end": "3036599"
  },
  {
    "text": "the same comment now in E uh",
    "start": "3036599",
    "end": "3041839"
  },
  {
    "text": "3.1 and efco 8 the queres are not being split by default so you generally get",
    "start": "3041839",
    "end": "3049720"
  },
  {
    "text": "one query for one link St statement simple but in E to uh 2.2",
    "start": "3049720",
    "end": "3057280"
  },
  {
    "text": "times and earlier than that that wasn't the case so for every time the C was",
    "start": "3057280",
    "end": "3062359"
  },
  {
    "text": "split it actually got the same tag and now we were able to find that query and",
    "start": "3062359",
    "end": "3068480"
  },
  {
    "text": "finally fix it and it took us one week to find that but once we implemented",
    "start": "3068480",
    "end": "3076040"
  },
  {
    "text": "this it took us five minutes most of the time was just",
    "start": "3076040",
    "end": "3083000"
  },
  {
    "text": "deploying and this is the power this little thing Plus you can now do PowerPoint uh powerbi reports and stuff",
    "start": "3083000",
    "end": "3090359"
  },
  {
    "text": "like that if anyone is interested this this is a big thing in very small",
    "start": "3090359",
    "end": "3097720"
  },
  {
    "text": "package and lastly how many of you like Chad GPT we have a couple of hands now if you",
    "start": "3097720",
    "end": "3106680"
  },
  {
    "text": "want to create a query uh sorry if you want to generate a query with help of",
    "start": "3106680",
    "end": "3111799"
  },
  {
    "text": "chpt this is roughly what I do uh and find to have have good results saying",
    "start": "3111799",
    "end": "3118640"
  },
  {
    "text": "you are an EF core expert and clean code developer now I have a much bigger uh",
    "start": "3118640",
    "end": "3125520"
  },
  {
    "text": "prompt for that but this one gave good results still by also being still",
    "start": "3125520",
    "end": "3131920"
  },
  {
    "text": "compact you can then write instructions over here uh here you can do like a",
    "start": "3131920",
    "end": "3137799"
  },
  {
    "text": "small DB context only what it's necessary uh here you can specify all of",
    "start": "3137799",
    "end": "3143240"
  },
  {
    "text": "the entities and if you want to map this into a type you can also specify the",
    "start": "3143240",
    "end": "3150400"
  },
  {
    "text": "return type that you want to map to and this is one of the examples that I did over here uh basically I just",
    "start": "3150400",
    "end": "3157720"
  },
  {
    "text": "wanted to have pagination with some stats for the salese and it actually done a pretty",
    "start": "3157720",
    "end": "3166400"
  },
  {
    "text": "good job generating this like I could do this in 5 10 minutes",
    "start": "3166400",
    "end": "3172079"
  },
  {
    "text": "but uh a novice tried to do that even after after watching my talk they took",
    "start": "3172079",
    "end": "3178440"
  },
  {
    "text": "an hour to write a similar quy and wasn't quite right and this one was uh",
    "start": "3178440",
    "end": "3184240"
  },
  {
    "text": "right after generating it like three times uh don't don't always take the",
    "start": "3184240",
    "end": "3189839"
  },
  {
    "text": "first one try to regenerate uh and try to see how good the coat is this is one",
    "start": "3189839",
    "end": "3196000"
  },
  {
    "text": "of the reasons why right here clean coat because",
    "start": "3196000",
    "end": "3202240"
  },
  {
    "text": "it tries to make it better all right now before we end now",
    "start": "3202240",
    "end": "3209640"
  },
  {
    "text": "how many of you have heard the term do not do premature",
    "start": "3209640",
    "end": "3215720"
  },
  {
    "text": "optimization now that is generally a good advice but there's a caveat to that",
    "start": "3215720",
    "end": "3222520"
  },
  {
    "text": "because following besta best uh best practices for the given scenario that's",
    "start": "3222520",
    "end": "3230319"
  },
  {
    "text": "that's an emphasis now just take a random best practice and follow it for a scenario",
    "start": "3230319",
    "end": "3236319"
  },
  {
    "text": "that that wasn't made for that is not premature uh optimization that is just you following",
    "start": "3236319",
    "end": "3243599"
  },
  {
    "text": "the best practices for what we know is a good pattern to follow when you know that a certain",
    "start": "3243599",
    "end": "3252000"
  },
  {
    "text": "query a certain endpoint is going to have high load do not say hey it's a",
    "start": "3252000",
    "end": "3258799"
  },
  {
    "text": "premature optimization go talk to your product owner and say this endpoint is going to",
    "start": "3258799",
    "end": "3265880"
  },
  {
    "text": "have perform performance issue it should be part of the specification that it",
    "start": "3265880",
    "end": "3271000"
  },
  {
    "text": "needs to be fast this should be part of your acceptance criteria for for uh",
    "start": "3271000",
    "end": "3278359"
  },
  {
    "text": "completing that end point and for things that already causes",
    "start": "3278359",
    "end": "3284119"
  },
  {
    "text": "uh performance issues now if it doesn't impact many people at least make it as a",
    "start": "3284119",
    "end": "3290359"
  },
  {
    "text": "technical that and document that but what you don't want is just have this",
    "start": "3290359",
    "end": "3296400"
  },
  {
    "text": "lying around and then uh your users complaining why the application is constantly slow why they nothing do",
    "start": "3296400",
    "end": "3303200"
  },
  {
    "text": "about it when you know you have performance issues and you know that you can solve",
    "start": "3303200",
    "end": "3308880"
  },
  {
    "text": "them also what you should not do is we'll fix it later with no",
    "start": "3308880",
    "end": "3316880"
  },
  {
    "text": "follow-ups so what you do is what I recommend is put a comment in your code",
    "start": "3316880",
    "end": "3324400"
  },
  {
    "text": "and ideally link it to the buck or issue or PBI uh that says hey this needs to be",
    "start": "3324400",
    "end": "3333000"
  },
  {
    "text": "fixed so when a developer um stumbles upon that line of code they can look",
    "start": "3333000",
    "end": "3339240"
  },
  {
    "text": "into that and say ah okay that's an issue we should fix it let's see if we",
    "start": "3339240",
    "end": "3344680"
  },
  {
    "text": "have time now premature is optimization as an excuse for bad code a bad code is a bad",
    "start": "3344680",
    "end": "3354359"
  },
  {
    "text": "code do I need to say more if you really don't have time to deal",
    "start": "3354359",
    "end": "3361920"
  },
  {
    "text": "with bad code at least comment and make a PBI GitHub issue and",
    "start": "3361920",
    "end": "3370960"
  },
  {
    "text": "saying hey discode is terrible we need to fix it don't just say hey this is b c",
    "start": "3370960",
    "end": "3377960"
  },
  {
    "text": "we'll fix it later and then uh five months later it's like oh",
    "start": "3377960",
    "end": "3383720"
  },
  {
    "text": "yeah I I remember something about it but I have no idea where it is well I guess",
    "start": "3383720",
    "end": "3389000"
  },
  {
    "text": "we'll find it sometimes and then it never does but the users find it by",
    "start": "3389000",
    "end": "3394400"
  },
  {
    "text": "using the application and asking why it's so slow so with",
    "start": "3394400",
    "end": "3400920"
  },
  {
    "text": "that here we have some great resources uh I hope you find this talk uh really",
    "start": "3400920",
    "end": "3407119"
  },
  {
    "text": "great I'll wait for uh for some of the photos over there",
    "start": "3407119",
    "end": "3413520"
  },
  {
    "text": "I'll put the slides back on uh later what I want you to take away the most is",
    "start": "3413520",
    "end": "3420319"
  },
  {
    "text": "I inumerable it's great in net it's terrible in EF core avoid it when using",
    "start": "3420319",
    "end": "3427599"
  },
  {
    "text": "with ef core asot tracking awesome it can gives you free",
    "start": "3427599",
    "end": "3433880"
  },
  {
    "text": "performance but as the name suggest it basically it becomes read only so don't",
    "start": "3433880",
    "end": "3439720"
  },
  {
    "text": "try to change it and then save it and then uh be puzzled why it's not modified",
    "start": "3439720",
    "end": "3445920"
  },
  {
    "text": "in the database and sometimes simple code can",
    "start": "3445920",
    "end": "3451240"
  },
  {
    "text": "result in better performance so how many of you uh seen the code and said ah okay",
    "start": "3451240",
    "end": "3456880"
  },
  {
    "text": "that looks simpler than the original code we have a couple of f yeah we have a couple of",
    "start": "3456880",
    "end": "3462480"
  },
  {
    "text": "F and I think that's the point that I want to also take is more performant",
    "start": "3462480",
    "end": "3469000"
  },
  {
    "text": "code doesn't always necessarily mean you know a code that is less maintainable",
    "start": "3469000",
    "end": "3474920"
  },
  {
    "text": "the code that is harder to read you can actually be concise concise maintainable",
    "start": "3474920",
    "end": "3482720"
  },
  {
    "text": "and performant at the same time a nice balance that you can reach with ef",
    "start": "3482720",
    "end": "3489440"
  },
  {
    "text": "core and if you're interested in SQL and happen to be in Sydney although most of",
    "start": "3489440",
    "end": "3495880"
  },
  {
    "text": "the talk eventually end up in on YouTube I'm doing a sequel to this talk where",
    "start": "3495880",
    "end": "3501200"
  },
  {
    "text": "I'm also involving SQL Server you'll find the presentation over",
    "start": "3501200",
    "end": "3507039"
  },
  {
    "text": "here uh I'll share the link now and thank",
    "start": "3507039",
    "end": "3511920"
  },
  {
    "text": "you hi any",
    "start": "3516400",
    "end": "3520160"
  },
  {
    "text": "questions got one question over there we wait I'll make a quick sip of",
    "start": "3521480",
    "end": "3529880"
  },
  {
    "text": "water thank you much hi uh my question is about the DB contexts uh yes what do",
    "start": "3531119",
    "end": "3538480"
  },
  {
    "text": "you think about having multiple DB contexts in your application instead of One DB context uh it's it's great",
    "start": "3538480",
    "end": "3547119"
  },
  {
    "text": "especially if it's connected to different databases if it's connected to one database uh multiple DB contexts",
    "start": "3547119",
    "end": "3555839"
  },
  {
    "text": "it's also okay uh you just have to be a bit careful with the migrations you can",
    "start": "3555839",
    "end": "3562240"
  },
  {
    "text": "actually change the schema of um uh the the SCH not schema the the first part",
    "start": "3562240",
    "end": "3569799"
  },
  {
    "text": "the name of the I forgot the name unfortunately you",
    "start": "3569799",
    "end": "3575240"
  },
  {
    "text": "know when you have DB uh dbo dots and the table name you can change that",
    "start": "3575240",
    "end": "3580799"
  },
  {
    "text": "in uh in EF core uh if you're worried about conflicts uh using uh different",
    "start": "3580799",
    "end": "3588160"
  },
  {
    "text": "tables but what I generally do when I have scenario like that I have one uh DB",
    "start": "3588160",
    "end": "3594799"
  },
  {
    "text": "context that does Dem migrations and then I have small DB contexts that uh",
    "start": "3594799",
    "end": "3601359"
  },
  {
    "text": "just have a uh view of a particular just",
    "start": "3601359",
    "end": "3606480"
  },
  {
    "text": "adds uh those particular uh tables okay and another question then uh uh would",
    "start": "3606480",
    "end": "3613440"
  },
  {
    "text": "you recommend or or uh querying views instead of going straight to the",
    "start": "3613440",
    "end": "3620079"
  },
  {
    "text": "tables that also highly depends um I do occasionally doew use uh if I do need to",
    "start": "3620079",
    "end": "3628079"
  },
  {
    "text": "do a raw SQL I just do raw SQL but sometimes what happens either the views",
    "start": "3628079",
    "end": "3635119"
  },
  {
    "text": "already exist for you uh like for the reports so I use uh those views and in",
    "start": "3635119",
    "end": "3641960"
  },
  {
    "text": "some cases you need to use that multiple times in DB context can make it look",
    "start": "3641960",
    "end": "3647480"
  },
  {
    "text": "like a regular uh DB set so from code perspective it looks like like a table",
    "start": "3647480",
    "end": "3653880"
  },
  {
    "text": "exactly yeah if that's uh results in better performance go for",
    "start": "3653880",
    "end": "3660520"
  },
  {
    "text": "it thank you anyone",
    "start": "3660520",
    "end": "3665839"
  },
  {
    "text": "else yeah we have one hand on V also if you do leave a little early just please vote remember to vote when you go",
    "start": "3665839",
    "end": "3672760"
  },
  {
    "text": "out okay I imagine you",
    "start": "3672760",
    "end": "3677680"
  },
  {
    "text": "would sorry uh I imagine you would recommend always using the tag name for",
    "start": "3678000",
    "end": "3683760"
  },
  {
    "text": "almost all queries then and yeah and also are you able to to put in",
    "start": "3683760",
    "end": "3690480"
  },
  {
    "text": "variables so you can put in like a customer ID or something so you would make it more traceable so if we go",
    "start": "3690480",
    "end": "3698160"
  },
  {
    "text": "quickly back to I believe it was bonus three yes so what you can do here",
    "start": "3698160",
    "end": "3706520"
  },
  {
    "text": "is I would not recommend the first one the tag withd to uh to have variables I",
    "start": "3706520",
    "end": "3713599"
  },
  {
    "text": "would have something that is uniquely identified ible to that query but that being said you can actually do multiple",
    "start": "3713599",
    "end": "3720160"
  },
  {
    "text": "tag width so the the next tag WID could include the client ID for instance which",
    "start": "3720160",
    "end": "3727720"
  },
  {
    "text": "might not be the best idea because uh when you execute this",
    "start": "3727720",
    "end": "3734079"
  },
  {
    "text": "um and it includes the client ID that client ID if you set up your logs uh to",
    "start": "3734079",
    "end": "3741920"
  },
  {
    "text": "have sensitive information will also include that client ID now if you add client ID with tag WID",
    "start": "3741920",
    "end": "3750119"
  },
  {
    "text": "you lose that control of whether you want to enable or disable sensitive information so before",
    "start": "3750119",
    "end": "3758640"
  },
  {
    "text": "yes you can do that but before you putting any sensitive information client ID should be fine but in some systems",
    "start": "3758640",
    "end": "3765960"
  },
  {
    "text": "it's not um you should uh consider those uh",
    "start": "3765960",
    "end": "3771039"
  },
  {
    "text": "factors thank you anyone else",
    "start": "3771039",
    "end": "3777000"
  },
  {
    "text": "yeah and if anyone is interested I actually written my own version of tech with uh it's Tech with context and I can",
    "start": "3777000",
    "end": "3784640"
  },
  {
    "text": "share you my code where uh it automatically populates the uh this part",
    "start": "3784640",
    "end": "3791920"
  },
  {
    "text": "you don't need to put any anything any strings in it with the class name from where it's been called well actually",
    "start": "3791920",
    "end": "3798200"
  },
  {
    "text": "file name uh because we don't get the class name unfortunately from compiler",
    "start": "3798200",
    "end": "3804200"
  },
  {
    "text": "and the uh the the function the that it called the method uh so I have written",
    "start": "3804200",
    "end": "3812640"
  },
  {
    "text": "that my myself plus if you add an addition uh if you add a parameter like",
    "start": "3812640",
    "end": "3817880"
  },
  {
    "text": "here um mine basically that adds on top of that an additional uh",
    "start": "3817880",
    "end": "3824839"
  },
  {
    "text": "part so you can then if you have multiple queries you can have it's",
    "start": "3824839",
    "end": "3830279"
  },
  {
    "text": "almost like commenting what those qu is supposed to do we have one question over",
    "start": "3830279",
    "end": "3835480"
  },
  {
    "text": "there sir to cutting um question specifically regarding the use of include or maybe actually not using",
    "start": "3835480",
    "end": "3842119"
  },
  {
    "text": "include explicitly is uh lazy loading of navigation properties still something",
    "start": "3842119",
    "end": "3847599"
  },
  {
    "text": "that we have to be concerned about uh the uh the answer is no because uh",
    "start": "3847599",
    "end": "3855359"
  },
  {
    "text": "Microsoft thankfully uh made it so that you can enable lazy loading but it",
    "start": "3855359",
    "end": "3862200"
  },
  {
    "text": "involves quite a bit of effort cool so by by default it's navigation properties",
    "start": "3862200",
    "end": "3867599"
  },
  {
    "text": "will just be null basically cool thank you they can enable it but uh luckily",
    "start": "3867599",
    "end": "3876279"
  },
  {
    "text": "you know the harder Microsoft makes it uh the feature to be enabled the",
    "start": "3876279",
    "end": "3882400"
  },
  {
    "text": "better cool thanks very much uh I have to end it here but if you want to go ask",
    "start": "3882400",
    "end": "3887760"
  },
  {
    "text": "a question after please go for it I'm happy to do uh any questions thank you",
    "start": "3887760",
    "end": "3893720"
  },
  {
    "text": "very much please remember to vote so we can work out if you like the talks or not uh it helps us plan next year",
    "start": "3893720",
    "end": "3903160"
  }
]