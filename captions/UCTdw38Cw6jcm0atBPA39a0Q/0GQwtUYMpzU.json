[
  {
    "text": "perfect thank you so much for coming this is awesome like i was saying it's way not the smallest crowd i ever spoke",
    "start": "7919",
    "end": "14320"
  },
  {
    "text": "to but we have everybody on the stream so thank you so much for joining online today and hopefully you're going to",
    "start": "14320",
    "end": "19920"
  },
  {
    "text": "enjoy this presentation my name is lauren bruno i'm a cloud advocate for microsoft i work for azure and we're",
    "start": "19920",
    "end": "25920"
  },
  {
    "text": "going to take a deep dive in durable functions so i want to warn you in advance if you have never heard about azure",
    "start": "25920",
    "end": "32160"
  },
  {
    "text": "functions this session is probably not for you and i'm not offended if you decide to leave right",
    "start": "32160",
    "end": "38399"
  },
  {
    "text": "however if you have heard we are still going to do a quick recap just so that we understand what durable functions",
    "start": "38399",
    "end": "43920"
  },
  {
    "text": "bring to the landscape that you cannot fulfill with normal with normal functions all right",
    "start": "43920",
    "end": "50079"
  },
  {
    "text": "cool so on the agenda today we are going to start with a brief recap like i said about normal azure functions",
    "start": "50079",
    "end": "56640"
  },
  {
    "text": "if you want and then after that we'll understand why we want to use durable functions to solve certain scenarios",
    "start": "56640",
    "end": "64320"
  },
  {
    "text": "we'll check how those durable functions even work all right and then we'll check also some patterns",
    "start": "64320",
    "end": "71439"
  },
  {
    "text": "that you can fulfill using those functions that's going to be more or less roughly the first half of the",
    "start": "71439",
    "end": "76560"
  },
  {
    "text": "presentation but then after that we'll go into tips and tricks and i've been using durable functions",
    "start": "76560",
    "end": "82479"
  },
  {
    "text": "for about a year to solve some problems that could be very difficult to",
    "start": "82479",
    "end": "87920"
  },
  {
    "text": "solve otherwise at microsoft specifically to build some web some",
    "start": "87920",
    "end": "93439"
  },
  {
    "text": "parts of microsoft.com so i'm going to show you that and in the process of this year i made a",
    "start": "93439",
    "end": "98720"
  },
  {
    "text": "lot of mistakes and i'm really want you to not make those mistakes so i'm going to show you what i did and why it didn't",
    "start": "98720",
    "end": "104960"
  },
  {
    "text": "work and then the workaround cool so azure functions",
    "start": "104960",
    "end": "110000"
  },
  {
    "text": "you know before i said in the you were there right i said that my favorite service is probably static web apps in",
    "start": "110000",
    "end": "116399"
  },
  {
    "text": "azure sati web apps can actually use azure function and azure function is probably",
    "start": "116399",
    "end": "121840"
  },
  {
    "text": "if not my second favorite service on azure but it's i mean it's very close right like first second i really love",
    "start": "121840",
    "end": "128640"
  },
  {
    "text": "azure functions i use them all the time and azure functions essentially are a",
    "start": "128640",
    "end": "134000"
  },
  {
    "text": "part of the serverless offerings that we have at microsoft all jokes serverless doesn't mean there is no server it means",
    "start": "134000",
    "end": "140239"
  },
  {
    "text": "there is less server you have to worry less about the server so essentially you don't have to",
    "start": "140239",
    "end": "146319"
  },
  {
    "text": "worry about deploying the server about maintaining the server about putting an anti-virus",
    "start": "146319",
    "end": "151680"
  },
  {
    "text": "on it about updating the operating system when you need to you don't worry about all that we take",
    "start": "151680",
    "end": "157120"
  },
  {
    "text": "care of that for you okay that's kind of the idea so you're going to worry only about your code",
    "start": "157120",
    "end": "162239"
  },
  {
    "text": "deploying your code adding features to your code and that's pretty much it it's also going to scale on demand what",
    "start": "162239",
    "end": "168879"
  },
  {
    "text": "it means is that if you're a startup and you have just like two users per week",
    "start": "168879",
    "end": "174160"
  },
  {
    "text": "you're pretty much going to pay nothing because you're still into the free tier of the azure function so it's very good",
    "start": "174160",
    "end": "179920"
  },
  {
    "text": "to experiment and to try things out but if suddenly let's say that you have a celebrity retweeting a tweet of yours",
    "start": "179920",
    "end": "185840"
  },
  {
    "text": "and then suddenly you have millions of users no problem we are just going to throw web virtual machines at you and",
    "start": "185840",
    "end": "191200"
  },
  {
    "text": "then we are going to scale out and we are going to just handle those requests then you're going to",
    "start": "191200",
    "end": "196560"
  },
  {
    "text": "start paying but it's okay because you're also going to start selling so you know it's only fair that at some point",
    "start": "196560",
    "end": "202400"
  },
  {
    "text": "you give us back a little bit money i have kids who needs to eat right so",
    "start": "202400",
    "end": "207599"
  },
  {
    "text": "it still means that those functions are going to be cheap to run because when especially in the serverless model in",
    "start": "207599",
    "end": "213920"
  },
  {
    "text": "the consumption model when you don't use them you're not paying for them those functions go to sleep and keep that in",
    "start": "213920",
    "end": "219920"
  },
  {
    "text": "mind because we are going to use that later to illustrate wide variable functions those functions go to sleep",
    "start": "219920",
    "end": "225760"
  },
  {
    "text": "and you don't pay for them you're going to pay a little bit for the azure storage basically while your code is",
    "start": "225760",
    "end": "231200"
  },
  {
    "text": "stored but this is really like cents per month it's really not very much and the runtime itself we are going to be on you",
    "start": "231200",
    "end": "238159"
  },
  {
    "text": "by the second so if the function runs for uh you know one hour and 55 seconds",
    "start": "238159",
    "end": "243840"
  },
  {
    "text": "we are not going to believe you for two hours we build you for that time so on the long term they are really cheaper to",
    "start": "243840",
    "end": "249599"
  },
  {
    "text": "run than other comparable services now azure functions are not the only serverless offerings that we have on",
    "start": "249599",
    "end": "255519"
  },
  {
    "text": "azure we have tons of services that are either serverless by nature or can run in a serverless mode",
    "start": "255519",
    "end": "261600"
  },
  {
    "text": "for example we have logic apps logic apps are a serverless workflow that you can build using a building block so it's",
    "start": "261600",
    "end": "268240"
  },
  {
    "text": "a no code or low code scenario we have kubernetes services aks which",
    "start": "268240",
    "end": "274240"
  },
  {
    "text": "can run in a serverless mode azure cosmos db as well also has a serverless mode so when i say serverless mode",
    "start": "274240",
    "end": "280160"
  },
  {
    "text": "essentially what it means is that when you don't use it you don't pay for it that's kind of what it means okay",
    "start": "280160",
    "end": "285199"
  },
  {
    "text": "we have signal r that i just demonstrated earlier on uh which is a service that you can also deploy in",
    "start": "285199",
    "end": "290720"
  },
  {
    "text": "in consumption mode in serverless mode a static web app is also a serverless offering etc etc",
    "start": "290720",
    "end": "296960"
  },
  {
    "text": "and so why do we want to use durable functions in certain scenarios well it's",
    "start": "296960",
    "end": "302240"
  },
  {
    "text": "basically to answer cases that normal functions cannot fulfill okay",
    "start": "302240",
    "end": "308000"
  },
  {
    "text": "so the issues that you have with normal azure function in consumption mode in serverless mode",
    "start": "308000",
    "end": "314800"
  },
  {
    "text": "are pretty well known these days first of all because we don't blue when you don't use them what it means is that",
    "start": "314800",
    "end": "320960"
  },
  {
    "text": "we're going to put them to sleep in quotation marks all right and when they wake up it takes a little",
    "start": "320960",
    "end": "327440"
  },
  {
    "text": "bit like just a few seconds to rehydrate to to wake up if you want now our engineers have worked really hard in",
    "start": "327440",
    "end": "334240"
  },
  {
    "text": "reducing that time and these days it's actually pretty good but still if you want to do some absolutely real",
    "start": "334240",
    "end": "340560"
  },
  {
    "text": "you know real time observation for example of a of an iot landscape of devices",
    "start": "340560",
    "end": "346240"
  },
  {
    "text": "this small rehydration time can be a problem okay so you need to take that into account another thing is the time",
    "start": "346240",
    "end": "353440"
  },
  {
    "text": "out functions after a while they give they give up so if you have a long running operation and by the way this",
    "start": "353440",
    "end": "360160"
  },
  {
    "text": "timeout in consumption mode is between five and ten minutes all right if you take an another plan",
    "start": "360160",
    "end": "367600"
  },
  {
    "text": "like we have a premium plan then it's a little bit higher it can go up to half an hour but if you have some operations",
    "start": "367600",
    "end": "373120"
  },
  {
    "text": "which take longer than that at some point the function is going to give up okay so you need to keep that in mind when you architect your system also",
    "start": "373120",
    "end": "380319"
  },
  {
    "text": "another thing is that functions essentially are stateless you never know what machine they are going to run on all right",
    "start": "380319",
    "end": "386479"
  },
  {
    "text": "you cannot take advantage of local files or anything also if a function has an",
    "start": "386479",
    "end": "391840"
  },
  {
    "text": "error that can be tricky to handle okay especially if you want multiple functions if you want to run multiple",
    "start": "391840",
    "end": "397919"
  },
  {
    "text": "functions uh in a chain for example and then one of them has an error it's kind of hard to",
    "start": "397919",
    "end": "403440"
  },
  {
    "text": "notify the next one that you know maybe it shouldn't run for example so that is a little bit tricky to coordinate",
    "start": "403440",
    "end": "410639"
  },
  {
    "text": "so what is the scenario that i used where i first decided okay i'm going to",
    "start": "410639",
    "end": "416160"
  },
  {
    "text": "try durable functions now so if you go to docs.microsoft.even a doc.microsoft.com",
    "start": "416160",
    "end": "422000"
  },
  {
    "text": "event sorry this is a new part of microsoft.com that we built to host all",
    "start": "422000",
    "end": "428240"
  },
  {
    "text": "of our first party events uh ignite build etc",
    "start": "428240",
    "end": "433599"
  },
  {
    "text": "and essentially this is where we archive all the videos on demand so if you go",
    "start": "433599",
    "end": "439039"
  },
  {
    "text": "there you're going to find for example the videos from ignite march now if you go to the official ignite",
    "start": "439039",
    "end": "445039"
  },
  {
    "text": "website the videos from march are not there anymore okay so this is the place where we archive them we and we plan on",
    "start": "445039",
    "end": "451759"
  },
  {
    "text": "continuing to archive uh videos and essentially if you go to um to our video website you can still see",
    "start": "451759",
    "end": "458560"
  },
  {
    "text": "video from 2006 from mix for example the first conferences we had etc because those videos really have value right so",
    "start": "458560",
    "end": "465199"
  },
  {
    "text": "we decided to keep them so my boss came to me and said hey we have about three weeks until ignite",
    "start": "465199",
    "end": "470879"
  },
  {
    "text": "march 2021 we want to build that thing and we want to use the docs infrastructure so all of",
    "start": "470879",
    "end": "478080"
  },
  {
    "text": "our documentation at microsoft runs on docs.microsoft.com and the way that it's built is actually",
    "start": "478080",
    "end": "483680"
  },
  {
    "text": "pretty clever it is all backed backed by some github repository",
    "start": "483680",
    "end": "488879"
  },
  {
    "text": "and in there you also your pages using markdown or yaml and then you push you commit to uh to",
    "start": "488879",
    "end": "496560"
  },
  {
    "text": "github and that's going to start a build process which is going to take all that and then build a private version",
    "start": "496560",
    "end": "503520"
  },
  {
    "text": "of your page that only you with your your well basically any microsoft employee can see",
    "start": "503520",
    "end": "510479"
  },
  {
    "text": "and then when you merge when you do a pull request and you merge into a branch which we call live",
    "start": "510479",
    "end": "516640"
  },
  {
    "text": "that's going to be pushed to public okay we merge with a review typically so",
    "start": "516640",
    "end": "522000"
  },
  {
    "text": "that means that we have some security we have a foreign principle where at least two people need to see the page before",
    "start": "522000",
    "end": "527760"
  },
  {
    "text": "it goes live so that allows you to build new websites new web pages on microsoft very fast",
    "start": "527760",
    "end": "535600"
  },
  {
    "text": "and also it opens the door to a lot of automation right which is very interesting so what i decided to do in the three weeks that",
    "start": "535600",
    "end": "542399"
  },
  {
    "text": "i had i built an automation system which is using the github rest api to go",
    "start": "542399",
    "end": "548640"
  },
  {
    "text": "and create a new branch and commit to that new branch that creates a private version of the pages",
    "start": "548640",
    "end": "554560"
  },
  {
    "text": "and then it allows me to check them out quickly and then merge into live to go public okay the last step the last merge",
    "start": "554560",
    "end": "561360"
  },
  {
    "text": "i still do it manually i could do it automatically as well but i do it manually because i like to have a last",
    "start": "561360",
    "end": "566399"
  },
  {
    "text": "verification before i push things to microsoft.com right that's kind of a bad carrier move depending what you do okay",
    "start": "566399",
    "end": "573279"
  },
  {
    "text": "so this is cool but the problems that i have is that those changes to the to the flow of events",
    "start": "573279",
    "end": "579920"
  },
  {
    "text": "that i get from the api where you have all the all the sessions defined that happens approximately every half an",
    "start": "579920",
    "end": "586320"
  },
  {
    "text": "hour because the average duration of a session at ignite is half an hour so",
    "start": "586320",
    "end": "591519"
  },
  {
    "text": "every half an hour i need to go and pull the api which gives me a big json file",
    "start": "591519",
    "end": "596800"
  },
  {
    "text": "with everything that i have then i need to build those markdown pages and then compare with github to check if there",
    "start": "596800",
    "end": "603600"
  },
  {
    "text": "are some changes if there are some changes i'm going to commit and then i'm going to send notifications to team and",
    "start": "603600",
    "end": "609040"
  },
  {
    "text": "to my phone to tell me hey we have 10 new pages that or 10 pages that change that you need to go and check all right",
    "start": "609040",
    "end": "615680"
  },
  {
    "text": "and the problem of course at ignite we can have up to 300 sessions okay so i have 300 pages that i need to",
    "start": "615680",
    "end": "621920"
  },
  {
    "text": "build every half an hour okay so this is a lot of stuff and and it could be way worse right i could have",
    "start": "621920",
    "end": "628000"
  },
  {
    "text": "thousands of pages etc so this is the problem i wanted to solve this is another view of the pages that",
    "start": "628000",
    "end": "633839"
  },
  {
    "text": "i'm building so for every video i have also helper pages like landing pages and",
    "start": "633839",
    "end": "638959"
  },
  {
    "text": "and others and the ways that i decided to make this work or the way that durable functions",
    "start": "638959",
    "end": "645680"
  },
  {
    "text": "work really is that you're going to have a trigger and this trigger is going to be an azure function",
    "start": "645680",
    "end": "651120"
  },
  {
    "text": "okay it could be an http function could be a timer function in my case every",
    "start": "651120",
    "end": "656320"
  },
  {
    "text": "half an hour i'm running that and this trigger function is going to start another function which is a",
    "start": "656320",
    "end": "661839"
  },
  {
    "text": "special function called an orchestrator this special function and we are going",
    "start": "661839",
    "end": "666880"
  },
  {
    "text": "to see all that in code later this special function orchestrator is then going to start an activity function the",
    "start": "666880",
    "end": "673200"
  },
  {
    "text": "one that actually does the work it's going to wait until the activity completes",
    "start": "673200",
    "end": "678480"
  },
  {
    "text": "then when the activity completes the orchestrator is going to be called again and is going to start the next activity",
    "start": "678480",
    "end": "685519"
  },
  {
    "text": "and then when it's completed it's going to go back to the orchestrator and then start the next activity",
    "start": "685519",
    "end": "691040"
  },
  {
    "text": "right i made this slide yesterday in the plane it's pretty right because before i had everything handwritten so it's",
    "start": "691040",
    "end": "697120"
  },
  {
    "text": "better this way and then after that the orchestrator starts again the last time to basically",
    "start": "697120",
    "end": "702320"
  },
  {
    "text": "check if everything was done in cleanup and then return the result okay so that's how those durable",
    "start": "702320",
    "end": "709200"
  },
  {
    "text": "functions work so i want to also mention that it's not the",
    "start": "709200",
    "end": "714639"
  },
  {
    "text": "only way to run workflows on azure or at microsoft.com for that matter use power automate or if you use logic apps this",
    "start": "714639",
    "end": "722399"
  },
  {
    "text": "is also some workflow coordination some workflow orchestration but those use a block programming",
    "start": "722399",
    "end": "728480"
  },
  {
    "text": "language which essentially you don't have code there all right it's aimed at other people not necessarily developers",
    "start": "728480",
    "end": "735519"
  },
  {
    "text": "so if you want to use code to orchestrate your workflow then the durable functions are probably a good choice",
    "start": "735519",
    "end": "741120"
  },
  {
    "text": "okay good so let's understand those patterns",
    "start": "741120",
    "end": "746639"
  },
  {
    "text": "and what you can solve using those durable functions so imagine that you have this problem you want to start a",
    "start": "746639",
    "end": "752880"
  },
  {
    "text": "function f1 then when f1 is finished you want to save the state somewhere and then you",
    "start": "752880",
    "end": "758399"
  },
  {
    "text": "want to start another function f2 save the state function f3 etc etc",
    "start": "758399",
    "end": "764160"
  },
  {
    "text": "now that is something that you can actually solve using normal functions you can use a normal function with a",
    "start": "764160",
    "end": "769360"
  },
  {
    "text": "system of qs and then the queue trigger another function etc and then you save the state but if you do that with a",
    "start": "769360",
    "end": "775519"
  },
  {
    "text": "normal function let's imagine that f2 suddenly has an error it's kind of hard to notify f3 that something happened",
    "start": "775519",
    "end": "783120"
  },
  {
    "text": "right so you need to really think very carefully about your about your scenario so this is very easy to use with durable",
    "start": "783120",
    "end": "790720"
  },
  {
    "text": "function and we are going to see a demo in a few seconds the other scenario which is very very",
    "start": "790720",
    "end": "795839"
  },
  {
    "text": "popular is what we call fan out fan in all right so basically it means the orchestrator is going to prepare a set",
    "start": "795839",
    "end": "802639"
  },
  {
    "text": "of functions think about my 300 function instances that i want to run to",
    "start": "802639",
    "end": "807680"
  },
  {
    "text": "create websites to create web pages and then it's going to run them all together",
    "start": "807680",
    "end": "812959"
  },
  {
    "text": "and literally we are going to throw 300 300 instances of functions to you right",
    "start": "812959",
    "end": "818880"
  },
  {
    "text": "of course we are going to bill you accordingly as well you will bill you for wednesday run and then after that the orchestrator is",
    "start": "818880",
    "end": "825040"
  },
  {
    "text": "going to wait until typical scenario until all functions are completed but since it's code you can",
    "start": "825040",
    "end": "831120"
  },
  {
    "text": "wait for any event you can say i want to wait until the first is complete for example and then i want to move on",
    "start": "831120",
    "end": "836880"
  },
  {
    "text": "and the cool thing is that you can combine your you know your function chaining with",
    "start": "836880",
    "end": "842320"
  },
  {
    "text": "your fan-out fan-in and of course you can say all right first i want to do something then i want to do 300 things at the same time then i want to finish",
    "start": "842320",
    "end": "848959"
  },
  {
    "text": "with something else and that all works one thing which is interesting to know is that",
    "start": "848959",
    "end": "854959"
  },
  {
    "text": "because we want to optimize the cost when the orchestrator starts an activity",
    "start": "854959",
    "end": "860320"
  },
  {
    "text": "the orchestrator is going to go to sleep and that's important to understand some of the tricks that i'm going to show you",
    "start": "860320",
    "end": "865680"
  },
  {
    "text": "later it can be very confusing when you debug all right what it means is that you pay only for the function which is running",
    "start": "865680",
    "end": "872800"
  },
  {
    "text": "so the orchestrator goes to sleep you don't pay for that when the activity is finished your orchestrator is starting starting again you're going to be built",
    "start": "872800",
    "end": "879120"
  },
  {
    "text": "for that time and then it starts the other activity it goes back to sleep and then you don't pay for the orchestrator so you don't pay twice which is a nice",
    "start": "879120",
    "end": "886240"
  },
  {
    "text": "scenario but also a very confusing scenario like we will see in the demo",
    "start": "886240",
    "end": "891680"
  },
  {
    "text": "okay so let's take a look at the demo no google i didn't talk to you",
    "start": "891680",
    "end": "899760"
  },
  {
    "text": "all right so let's take a look at the demo and what i did is that i prepared here a solution and by the way",
    "start": "899760",
    "end": "905199"
  },
  {
    "text": "everything i'm going to show you today is in.net because this is a language that i know and love i've been using.net for more than 20 years now but",
    "start": "905199",
    "end": "912079"
  },
  {
    "text": "everything i tell you or most of what i tell you also applies to a java to javascript basically to the other",
    "start": "912079",
    "end": "918240"
  },
  {
    "text": "frameworks that you can use for durable functions right so keep that in mind so here i have this solution and by the",
    "start": "918240",
    "end": "923839"
  },
  {
    "text": "way you'll get the repo at the end and let's start with the function chaining",
    "start": "923839",
    "end": "929680"
  },
  {
    "text": "and what we're going to do is explore a little bit how this works and this is pretty much out of the box what you get",
    "start": "929680",
    "end": "936079"
  },
  {
    "text": "when you create a new durable function okay so let's understand how this works so first of all we are going to enter",
    "start": "936079",
    "end": "942480"
  },
  {
    "text": "here this function which i call function chaining http start so typically i use a naming",
    "start": "942480",
    "end": "949199"
  },
  {
    "text": "convention where the orchestrator function which is up here i give it the same name",
    "start": "949199",
    "end": "956000"
  },
  {
    "text": "as the class because this is really the function that can fulfill the whole thing",
    "start": "956000",
    "end": "961519"
  },
  {
    "text": "then my activity functions usually i give them the name of the class and a unique name because you you",
    "start": "961519",
    "end": "969360"
  },
  {
    "text": "don't want to have confusions right you don't want to have two functions in the same application with the same name",
    "start": "969360",
    "end": "974720"
  },
  {
    "text": "and then my http start or my whatever start i gave it an again the name of the class and",
    "start": "974720",
    "end": "981120"
  },
  {
    "text": "end http start or whatever start that is at least it allows me to find them easily when i look at the list of",
    "start": "981120",
    "end": "986800"
  },
  {
    "text": "functions okay so this is a start which this is what's going to trigger the whole workflow",
    "start": "986800",
    "end": "992480"
  },
  {
    "text": "it's an http call it's going to use a root zero one so i'm going to say slash api zero one okay to get",
    "start": "992480",
    "end": "999920"
  },
  {
    "text": "and you see that it gets here and i durable orchestration client from the framework",
    "start": "999920",
    "end": "1004959"
  },
  {
    "text": "and using this orchestrator it's going to start here",
    "start": "1004959",
    "end": "1010399"
  },
  {
    "text": "the orchestrator function and then it's going to return it's going to go to sleep",
    "start": "1010399",
    "end": "1017360"
  },
  {
    "text": "now in the orchestrator function what i'm going to do is that i'm going to prepare a list of outputs which is a",
    "start": "1017360",
    "end": "1022720"
  },
  {
    "text": "list of string in that case could be a list of anything really and then i'm going to say all right i'm",
    "start": "1022720",
    "end": "1027839"
  },
  {
    "text": "going to add to this output the result of an activity",
    "start": "1027839",
    "end": "1034240"
  },
  {
    "text": "which is called function chaining say hello and which uses this parameter and again the parameter could be anything",
    "start": "1034240",
    "end": "1040720"
  },
  {
    "text": "small coverts anything that you can serialize we'll come back to that in a moment",
    "start": "1040720",
    "end": "1046480"
  },
  {
    "text": "so here because i have an await it's going to wait for the result",
    "start": "1046480",
    "end": "1051760"
  },
  {
    "text": "and then only it's going to execute the second function with a different parameter",
    "start": "1051760",
    "end": "1057280"
  },
  {
    "text": "and that's the chaining that i was saying before it's going to wait for the result and then it's going to run the third one",
    "start": "1057280",
    "end": "1063760"
  },
  {
    "text": "so this is here the activity function it's going to just written hello and then the name and then do some log",
    "start": "1063760",
    "end": "1070640"
  },
  {
    "text": "so let's run this and let's see what happens so this is starting here",
    "start": "1070640",
    "end": "1075919"
  },
  {
    "text": "the function application i'm going to try to put this side by side on this small screen and here i'm going to trigger the",
    "start": "1075919",
    "end": "1082480"
  },
  {
    "text": "function from vs code using an extension called rest client it's a pretty cool extension which allows me to just define",
    "start": "1082480",
    "end": "1088320"
  },
  {
    "text": "the request like that okay so now i have some break point so if i start the function chaining",
    "start": "1088320",
    "end": "1094559"
  },
  {
    "text": "you see that i am into my http trigger okay i'm going to press f5 to go",
    "start": "1094559",
    "end": "1101840"
  },
  {
    "text": "and that's going to execute the orchestrator the orchestrator is going to call the",
    "start": "1101840",
    "end": "1107280"
  },
  {
    "text": "first activity function here i am into the first activity function and now if i press f5 what do",
    "start": "1107280",
    "end": "1114080"
  },
  {
    "text": "you think will happen you see i have a breakpoint here on line 28",
    "start": "1114080",
    "end": "1119440"
  },
  {
    "text": "that's where i should jump right that's kind of the next step but don't forget the orchestrator is",
    "start": "1119440",
    "end": "1124799"
  },
  {
    "text": "sleeping right now because you don't want to pay for it so if i press f5 you jump back at the beginning",
    "start": "1124799",
    "end": "1130400"
  },
  {
    "text": "that's super confusing the first time you do durable function the orchestrator runs again but this time",
    "start": "1130400",
    "end": "1137679"
  },
  {
    "text": "it's going to go to the first call and the first call has a unique signature it has a name here and then",
    "start": "1137679",
    "end": "1143200"
  },
  {
    "text": "the parameter and then it's not going to run that function because i already ran it",
    "start": "1143200",
    "end": "1148480"
  },
  {
    "text": "the result has been sterilized somewhere i get it and then i'm going to run the second",
    "start": "1148480",
    "end": "1154000"
  },
  {
    "text": "activity function this time with a parameter cl let's press f5 i go back in the",
    "start": "1154000",
    "end": "1161039"
  },
  {
    "text": "orchestrator in the beginning i'm going to check the result of the first one i",
    "start": "1161039",
    "end": "1167200"
  },
  {
    "text": "already ran it that's fine check the result of the second one i already ran it that's fine and now i'm going to run the third one",
    "start": "1167200",
    "end": "1174080"
  },
  {
    "text": "and then i go back in the beginning again and then",
    "start": "1174080",
    "end": "1179440"
  },
  {
    "text": "now i have run everything and so i can return my output okay you see the flow",
    "start": "1179440",
    "end": "1184480"
  },
  {
    "text": "so again because we put the orchestrator to sleep to save you money that's a little bit of a weird flow that",
    "start": "1184480",
    "end": "1190080"
  },
  {
    "text": "you need to keep in mind and there is some serialization happening which is another thing you need to keep in mind",
    "start": "1190080",
    "end": "1195120"
  },
  {
    "text": "okay so to understand what happened a little bit better here",
    "start": "1195120",
    "end": "1201280"
  },
  {
    "text": "i have the same thing except that here i sleep 10 seconds in each activity function",
    "start": "1201280",
    "end": "1207200"
  },
  {
    "text": "because i want to show you something which is pretty cool if i go here you see i get a 202",
    "start": "1207200",
    "end": "1214080"
  },
  {
    "text": "accepted that's the response that i get from the http start i get that immediately",
    "start": "1214080",
    "end": "1220400"
  },
  {
    "text": "and then the http starts goes to sleep but i also get some urls",
    "start": "1220400",
    "end": "1225760"
  },
  {
    "text": "and so let's try to run the second one which is going to sleep a little bit",
    "start": "1225760",
    "end": "1230799"
  },
  {
    "text": "okay so here it started now it's sleeping and now i can go here and in my response",
    "start": "1230799",
    "end": "1236559"
  },
  {
    "text": "i can take this url which is called status query get uri and i'm going to open it in a web",
    "start": "1236559",
    "end": "1242880"
  },
  {
    "text": "browser and here i i get an information about the flow and it says runtime",
    "start": "1242880",
    "end": "1248240"
  },
  {
    "text": "status running it's not done yet okay you can interrogate that as many",
    "start": "1248240",
    "end": "1254080"
  },
  {
    "text": "times as you want and if i go back here to my floor i have tokyo i have seattle i'm still waiting",
    "start": "1254080",
    "end": "1260080"
  },
  {
    "text": "for london now i have london now i can go back here and now it is completed and it's going to give me back",
    "start": "1260080",
    "end": "1267120"
  },
  {
    "text": "the result okay now typically this is not how you obtain the result typically what durable",
    "start": "1267120",
    "end": "1273840"
  },
  {
    "text": "functions do is that they go and serialize something somewhere to a database to a",
    "start": "1273840",
    "end": "1279840"
  },
  {
    "text": "blob storage to github to wherever okay that's typically what you expect but it is interesting that you have this",
    "start": "1279840",
    "end": "1286480"
  },
  {
    "text": "api which allows you to interrogate the other thing you can do in the api here in the response that you get",
    "start": "1286480",
    "end": "1293840"
  },
  {
    "text": "you can send an event to your function application and do stuff so that's going to be added",
    "start": "1293840",
    "end": "1298880"
  },
  {
    "text": "to a queue and then you can trigger stuff so that can be interesting if you want to influence the way that your",
    "start": "1298880",
    "end": "1304080"
  },
  {
    "text": "application is running you can terminate the execution so if you have something which is not working",
    "start": "1304080",
    "end": "1309280"
  },
  {
    "text": "fine and then you want to terminate it you can use this url you can also go and purge the history",
    "start": "1309280",
    "end": "1316400"
  },
  {
    "text": "now keep that in mind because later i'll show you that functions durable functions have a history and that can be tricky to solve",
    "start": "1316400",
    "end": "1324159"
  },
  {
    "text": "okay so here by clicking here you can go and purge that and then you can also restart the",
    "start": "1324159",
    "end": "1329520"
  },
  {
    "text": "execution of a function application okay so that is the normal flow of a function",
    "start": "1329520",
    "end": "1337919"
  },
  {
    "text": "chaining now let's see how the fan out fanning works",
    "start": "1337919",
    "end": "1343919"
  },
  {
    "text": "so for fan art and fanning in the orchestrator here i'm going to create a new list of tasks of string and again",
    "start": "1343919",
    "end": "1351280"
  },
  {
    "text": "this string here could be anything it just needs to be the same as the parameter of the call activity i",
    "start": "1351280",
    "end": "1357120"
  },
  {
    "text": "think and it needs to be the same than the written value of the activity function",
    "start": "1357120",
    "end": "1363039"
  },
  {
    "text": "anything that is serializable can be used so i'm going to do this",
    "start": "1363039",
    "end": "1368159"
  },
  {
    "text": "list of task off and here i'm going to add and notice that this time i don't have any weight",
    "start": "1368159",
    "end": "1374720"
  },
  {
    "text": "i just call context.call activity asking that's going to give me back a task which is not executed yet",
    "start": "1374720",
    "end": "1381679"
  },
  {
    "text": "and i'm going to save that with the name tokyo here then i'm going to add another one and another one and those activities",
    "start": "1381679",
    "end": "1388880"
  },
  {
    "text": "here they don't have to be the same activities they can have any activity that you have as long as the written value matches so in my",
    "start": "1388880",
    "end": "1396880"
  },
  {
    "text": "case where i'm building different websites different web pages i'm saying okay so i have one activity which is going to",
    "start": "1396880",
    "end": "1403039"
  },
  {
    "text": "create the landing page the index and then i have another activity which is going to create all the uh all the the",
    "start": "1403039",
    "end": "1408960"
  },
  {
    "text": "particular web pages with the video player okay and then when i'm ready i'm going to call task",
    "start": "1408960",
    "end": "1416400"
  },
  {
    "text": "i'm going to await task.when all and again here i do when all but i could do when any which is going to wait for",
    "start": "1416400",
    "end": "1423279"
  },
  {
    "text": "the first one to complete and then continue here i'm waiting for all of them to complete",
    "start": "1423279",
    "end": "1428720"
  },
  {
    "text": "that make sense so to make things interesting here i added a random so i'm saying all right",
    "start": "1428720",
    "end": "1436000"
  },
  {
    "text": "for each execution here i'm going to wait between 5 and 10 seconds in a random manner",
    "start": "1436000",
    "end": "1442159"
  },
  {
    "text": "so now if i run this and actually it's already running",
    "start": "1442159",
    "end": "1447440"
  },
  {
    "text": "and i go here and start the fan out fan in so now we",
    "start": "1447840",
    "end": "1452960"
  },
  {
    "text": "see what's going on right i have the the three tasks are being executed but right now they are waiting for a random time",
    "start": "1452960",
    "end": "1460480"
  },
  {
    "text": "and then i'm going to have hello to seattle hello to tokyo hello to london seattle tokyo london",
    "start": "1460480",
    "end": "1466400"
  },
  {
    "text": "if i run again again they are all executing they are",
    "start": "1466400",
    "end": "1472080"
  },
  {
    "text": "waiting for random time so before i had seattle tokyo london and now i'm going to have",
    "start": "1472080",
    "end": "1478080"
  },
  {
    "text": "seattle london tokyo so different result okay but it doesn't matter my orchestrator is just going to wait for",
    "start": "1478080",
    "end": "1483919"
  },
  {
    "text": "all three to complete whatever time they need not quite true they need to stay in the timeout period this is still an",
    "start": "1483919",
    "end": "1489919"
  },
  {
    "text": "azure function between five and ten minutes but it means that i can break my problem in small pcs",
    "start": "1489919",
    "end": "1496320"
  },
  {
    "text": "and i can run all those tasks simultaneously and if you need one million of those who",
    "start": "1496320",
    "end": "1501760"
  },
  {
    "text": "are going to give you one million of those you're also going to pay for those one millions right so you need to keep that in mind but it is running in a very",
    "start": "1501760",
    "end": "1508320"
  },
  {
    "text": "efficient manner for the small story when i run my 300 pages on my local machine it takes about half an hour to",
    "start": "1508320",
    "end": "1514960"
  },
  {
    "text": "complete because it's going to run in a serialized my machine only has a number of core and it cannot multi-thread as",
    "start": "1514960",
    "end": "1521520"
  },
  {
    "text": "much as the servers we have on azure but if i run this on azure it takes about two minutes to complete so i go from 30",
    "start": "1521520",
    "end": "1528400"
  },
  {
    "text": "minutes to two minutes which is a really nice gain right and keep in mind that my half an hour long task i need to run it",
    "start": "1528400",
    "end": "1535200"
  },
  {
    "text": "every half an hour so basically my machine could not do anything else during that time okay so that's a nice scenario",
    "start": "1535200",
    "end": "1542640"
  },
  {
    "text": "good so let's go back to the slides because actually we have also other",
    "start": "1542640",
    "end": "1547760"
  },
  {
    "text": "patterns that you can implement using functions but to be honest the two that i showed you are probably the ones you're going to use the most i think",
    "start": "1547760",
    "end": "1554320"
  },
  {
    "text": "because this is really where it makes sense when you want to workflow but you can also use durable functions for",
    "start": "1554320",
    "end": "1559919"
  },
  {
    "text": "things like when you want to monitor like to have a long running task and you want to monitor the status you want to",
    "start": "1559919",
    "end": "1565039"
  },
  {
    "text": "check from time to time what are you doing what are you doing etc so you can absolutely have your function serialize",
    "start": "1565039",
    "end": "1570400"
  },
  {
    "text": "some state have another function get that state and return that to the caller and see what's going on",
    "start": "1570400",
    "end": "1576480"
  },
  {
    "text": "another scenario we have is basically monitoring stuff right so you have something in the",
    "start": "1576480",
    "end": "1582480"
  },
  {
    "text": "field which is happening you want to get this information build a dashboard that's a great scenario for a durable",
    "start": "1582480",
    "end": "1587760"
  },
  {
    "text": "function when you have a human interaction this is an interesting one because you don't know how long the human is going to take",
    "start": "1587760",
    "end": "1593760"
  },
  {
    "text": "to answer and you don't want to pay for the time that you're waiting so that's a good scenario for a for an orchestrator like",
    "start": "1593760",
    "end": "1600320"
  },
  {
    "text": "that as well when you have some aggregation of state right you're you're basically gathering",
    "start": "1600320",
    "end": "1606960"
  },
  {
    "text": "a whole lot of things and if you go to the page at the end i'll give you the link to the documentation page we are",
    "start": "1606960",
    "end": "1612720"
  },
  {
    "text": "detailing all those patterns a little bit there in detail so that you understand but essentially what i want to say durable functions are great when",
    "start": "1612720",
    "end": "1619120"
  },
  {
    "text": "you have a long-running task that you want to break in smaller portions or when you have a lot of things that",
    "start": "1619120",
    "end": "1625520"
  },
  {
    "text": "you want to execute in parallel or every time you want to monitor something and you don't exactly know",
    "start": "1625520",
    "end": "1631360"
  },
  {
    "text": "when the events are going to arrive this is how the scenarios in which variable functions make a lot of sense",
    "start": "1631360",
    "end": "1638080"
  },
  {
    "text": "so let's go into the tips and tricks and talk a little bit about those",
    "start": "1638880",
    "end": "1645039"
  },
  {
    "text": "mistakes i made and how hopefully you're not going to do the same so we are going to talk about a few",
    "start": "1645039",
    "end": "1651200"
  },
  {
    "text": "things the first thing is non-deterministic execution essentially each function is running",
    "start": "1651200",
    "end": "1658880"
  },
  {
    "text": "i'm going to say trendy buzzword as a microservice right it is completely isolated from the",
    "start": "1658880",
    "end": "1664640"
  },
  {
    "text": "others and it needs to run this way which means that there are a few things that you shouldn't do",
    "start": "1664640",
    "end": "1671039"
  },
  {
    "text": "another thing you keep you have to keep in mind which is important to understand what's going on here is that again the",
    "start": "1671039",
    "end": "1676480"
  },
  {
    "text": "orchestrator goes to sleep but because of the way that the the azure function applications are architected when it",
    "start": "1676480",
    "end": "1683279"
  },
  {
    "text": "wakes up again there is absolutely zero guarantee that is going to be on the same machine in fact it could be in the totally",
    "start": "1683279",
    "end": "1689679"
  },
  {
    "text": "different building it could even potentially be depending on how you architect you're seeing in a",
    "start": "1689679",
    "end": "1694880"
  },
  {
    "text": "different country okay you don't know so you can't rely on stuff which is local",
    "start": "1694880",
    "end": "1700480"
  },
  {
    "text": "okay then the other thing is what happens when you have errors in your application",
    "start": "1700480",
    "end": "1706720"
  },
  {
    "text": "and also how do you handle the history and that is really something that can be super super confusing when you debug",
    "start": "1706720",
    "end": "1714159"
  },
  {
    "text": "and i don't know if it's going to happen today it's kind of random the way that it happens but an orchestrator hates",
    "start": "1714159",
    "end": "1720000"
  },
  {
    "text": "when a task is not complete it wants to finish it and it's going to remember because when",
    "start": "1720000",
    "end": "1726000"
  },
  {
    "text": "you break the execution of an activity function and that's typically what you do when you debug right you debug press",
    "start": "1726000",
    "end": "1732080"
  },
  {
    "text": "f you know f5 f5 f10 f10 then suddenly you're like oh wait i did uh oopsie here",
    "start": "1732080",
    "end": "1737919"
  },
  {
    "text": "i need to to fix it you stop then you go and then you start the game what is your orchestrator going to be to",
    "start": "1737919",
    "end": "1744240"
  },
  {
    "text": "do it's going to go and check the queues you can just say oh you didn't finish before let's run again right where you were and",
    "start": "1744240",
    "end": "1751279"
  },
  {
    "text": "this is like extremely confusing when you debug i'm going to show you how you can clear that up",
    "start": "1751279",
    "end": "1756799"
  },
  {
    "text": "another thing is serialization so this is really a keyword in azure functions and when you use javascript",
    "start": "1756799",
    "end": "1763600"
  },
  {
    "text": "it's kind of easier because you know javascript json is kind of you know",
    "start": "1763600",
    "end": "1769120"
  },
  {
    "text": "native to to javascript if you want but if you use any other language which is using a json serializer then there are",
    "start": "1769120",
    "end": "1775600"
  },
  {
    "text": "some things that you need to you know keep in mind and that can be tricky and so the serialization is what happens",
    "start": "1775600",
    "end": "1782399"
  },
  {
    "text": "every time that the function goes to sleep it's going to serialize its state in azure storage i'm going to show you",
    "start": "1782399",
    "end": "1788799"
  },
  {
    "text": "that in a second and then when the function starts it's going to get its state from the same azure storage and",
    "start": "1788799",
    "end": "1794480"
  },
  {
    "text": "this is all in json format another another thing you shouldn't do",
    "start": "1794480",
    "end": "1799760"
  },
  {
    "text": "is wait in the orchestrator but you're going to tell me oh but you just waited on the execution of the function in the",
    "start": "1799760",
    "end": "1805360"
  },
  {
    "text": "orchestrator yes but that function was special that task was created by the orchestrator context that's okay but if",
    "start": "1805360",
    "end": "1813279"
  },
  {
    "text": "you await something else like an http client your application is going to crash i'm going to show you how you can",
    "start": "1813279",
    "end": "1818799"
  },
  {
    "text": "work around that and then debugging because it can be very difficult to debug who has ever",
    "start": "1818799",
    "end": "1825039"
  },
  {
    "text": "debugged multi-threaded applications raise your hand yeah did you like it it's really fun now",
    "start": "1825039",
    "end": "1832159"
  },
  {
    "text": "yeah yeah that's exactly what happens essentially you have everything happening at the same time and then keeping track is really tricky so i'm",
    "start": "1832159",
    "end": "1838640"
  },
  {
    "text": "going to show you a small trick i use to make things a little bit easier when i debug",
    "start": "1838640",
    "end": "1843840"
  },
  {
    "text": "all right so let's go back to the demo we have half an hour for that more or less it's absolutely perfect so let's go back to our",
    "start": "1843840",
    "end": "1851840"
  },
  {
    "text": "application here and the first thing i want to show you is a",
    "start": "1851840",
    "end": "1857080"
  },
  {
    "text": "non-deterministic thing so here i have my orchestrator",
    "start": "1857080",
    "end": "1863039"
  },
  {
    "text": "and my orchestrator is going to get an environment variable name username that's the use that's my username on",
    "start": "1863039",
    "end": "1869440"
  },
  {
    "text": "this windows machine and then i'm going to use that to call my activity function",
    "start": "1869440",
    "end": "1875360"
  },
  {
    "text": "okay so if i run this here",
    "start": "1875360",
    "end": "1881840"
  },
  {
    "text": "i'm going to get here the variable my username is album that's good that's my layers",
    "start": "1881840",
    "end": "1888159"
  },
  {
    "text": "then i'm going to call the the activity function",
    "start": "1888159",
    "end": "1893760"
  },
  {
    "text": "when the activity function is complete i'm going to go back into the orchestrator in the beginning",
    "start": "1893760",
    "end": "1899039"
  },
  {
    "text": "then i'm going to get the environment variable again and here because i'm running this on my",
    "start": "1899039",
    "end": "1904559"
  },
  {
    "text": "local machine the username is the same but if you run this on azure there is absolutely zero guarantee that is going",
    "start": "1904559",
    "end": "1910640"
  },
  {
    "text": "to be the same username could be anything really okay if you're getting things which are time dependent",
    "start": "1910640",
    "end": "1917039"
  },
  {
    "text": "that's going to be a different value and then what's going to happen if you try to call the activity i think with a",
    "start": "1917039",
    "end": "1922880"
  },
  {
    "text": "different value well it's going to start a new activity because it's going to say oh that's a totally different state",
    "start": "1922880",
    "end": "1928320"
  },
  {
    "text": "right so you don't want to do that in fact in some scenarios you're going to get a",
    "start": "1928320",
    "end": "1933519"
  },
  {
    "text": "warning in the output telling you you shouldn't do that but let's face it who reads those",
    "start": "1933519",
    "end": "1941600"
  },
  {
    "text": "another thing you don't want to do is this and it may sound logical after everything i",
    "start": "1941600",
    "end": "1947039"
  },
  {
    "text": "told you but this is actually a line taken from a code review that i gave to someone you know a few weeks ago",
    "start": "1947039",
    "end": "1953279"
  },
  {
    "text": "in a function you don't file dot append alt text or you don't file dot write all or you don't do anything with local",
    "start": "1953279",
    "end": "1959360"
  },
  {
    "text": "files because you don't know the machine is going to run on this machine as soon as the function is",
    "start": "1959360",
    "end": "1964799"
  },
  {
    "text": "done it's going to be discarded and we are going to use it for something else right don't save stuff locally what you",
    "start": "1964799",
    "end": "1970559"
  },
  {
    "text": "want to do is save stuff in a well-known place which is remote could be a database could be whatever",
    "start": "1970559",
    "end": "1977200"
  },
  {
    "text": "so if i run this i'm going to have some actually it's going to run but i'm going to have some issue i'm going to stop it",
    "start": "1977200",
    "end": "1982240"
  },
  {
    "text": "because it might help me to illustrate another point i want to make now i'm going to restart",
    "start": "1982240",
    "end": "1989640"
  },
  {
    "text": "okay and then i'm going to show you the deterministic code so the deterministic code here this is a",
    "start": "1990240",
    "end": "1996799"
  },
  {
    "text": "way that you can actually code these kind of things in a safe way",
    "start": "1996799",
    "end": "2001840"
  },
  {
    "text": "is that the first thing you're going to be to do in the uh in the starter all right",
    "start": "2001840",
    "end": "2007919"
  },
  {
    "text": "in the in the trigger you're going to get the information that you want to get and here it's safe to do",
    "start": "2007919",
    "end": "2013320"
  },
  {
    "text": "environment.environment variable i kind of question the usage of username on azure but you know if you want you can",
    "start": "2013320",
    "end": "2019760"
  },
  {
    "text": "do that then you're going to save that into a class which i'm going to give to",
    "start": "2019760",
    "end": "2025120"
  },
  {
    "text": "my orchestrator as a parameter that's going to be serialized and then the orchestrator every time",
    "start": "2025120",
    "end": "2032159"
  },
  {
    "text": "that the orchestrator starts it's going to obtain this value from the",
    "start": "2032159",
    "end": "2037519"
  },
  {
    "text": "context the serialization but the value is always going to be the same because it",
    "start": "2037519",
    "end": "2042880"
  },
  {
    "text": "has been obtained only once okay so that makes sense the other thing here is that when you save stuff you should",
    "start": "2042880",
    "end": "2049280"
  },
  {
    "text": "save to an online storage somewhere could be a database could be an azure table it could be a blob storage it",
    "start": "2049280",
    "end": "2054638"
  },
  {
    "text": "could be github it could be whatever you want but don't save things locally on your machine okay",
    "start": "2054639",
    "end": "2061358"
  },
  {
    "text": "good so that's the deterministic example that the first example",
    "start": "2061359",
    "end": "2066560"
  },
  {
    "text": "now let's move on to this fun thing the error case so here i have a case for example where",
    "start": "2066560",
    "end": "2072480"
  },
  {
    "text": "you see i'm throwing an exception here which essentially means i'm going to i'm not going to finish my task i'm going to",
    "start": "2072480",
    "end": "2079358"
  },
  {
    "text": "interrupt the task before it goes on right so let's go and run this",
    "start": "2079359",
    "end": "2085919"
  },
  {
    "text": "here we go so now i jump into the orchestrator okay the first time it's calling with tokyo i",
    "start": "2087440",
    "end": "2093679"
  },
  {
    "text": "say the exception should be thrown only if it's seattle so the first time it's going to run fine",
    "start": "2093679",
    "end": "2100079"
  },
  {
    "text": "now it comes back i'm going to go to the second time and now i'm going to have this exception which is thrown",
    "start": "2100079",
    "end": "2106720"
  },
  {
    "text": "so here typically what i do is that i i say okay i'm going to stop the execution and solve the problem when i debug",
    "start": "2106720",
    "end": "2112800"
  },
  {
    "text": "but then when i restart like i said it's very possible that my orchestrator is going to say hey you had something going",
    "start": "2112800",
    "end": "2118480"
  },
  {
    "text": "on let's restart here which means that essentially even though i don't call the http start it's still going to trigger",
    "start": "2118480",
    "end": "2125440"
  },
  {
    "text": "anyway okay so the way that it works is because when you create a new durable",
    "start": "2125440",
    "end": "2132400"
  },
  {
    "text": "function application you need to provide a storage account and that's true for any function",
    "start": "2132400",
    "end": "2137839"
  },
  {
    "text": "application really because we need some place to store the code at the very least but here in addition we are going",
    "start": "2137839",
    "end": "2143599"
  },
  {
    "text": "to store some cues and those queues here they have a specific name they are",
    "start": "2143599",
    "end": "2150240"
  },
  {
    "text": "called in that case test hub name it could be another name dash control dash",
    "start": "2150240",
    "end": "2155359"
  },
  {
    "text": "and then you see that you have a number of those those cues are what the runtime is using to coordinate the orchestration",
    "start": "2155359",
    "end": "2162400"
  },
  {
    "text": "okay so again it's a stateless thing the orchestrator when it starts it gets some state from the runtime when it goes back",
    "start": "2162400",
    "end": "2168240"
  },
  {
    "text": "to sleep it saves stuff it says hey i'm here in the execution and then it goes to sleep and then it",
    "start": "2168240",
    "end": "2173839"
  },
  {
    "text": "forgets right and then it is rehydrated and then it needs to start again getting the state that's the first thing that we",
    "start": "2173839",
    "end": "2179920"
  },
  {
    "text": "create the other thing is that here in the container so in the blob service",
    "start": "2179920",
    "end": "2185520"
  },
  {
    "text": "we also get here those two which are applies and liz's okay that's where the state is stored",
    "start": "2185520",
    "end": "2191359"
  },
  {
    "text": "that's where the json objects are being stored all right so",
    "start": "2191359",
    "end": "2196560"
  },
  {
    "text": "when you run your code it's going to go there it's going to take it and say oh now i'm going to jump",
    "start": "2196560",
    "end": "2202000"
  },
  {
    "text": "back and then i'm going to execute again and this is quite confusing so i'm going to show you a quick trick",
    "start": "2202000",
    "end": "2207839"
  },
  {
    "text": "if you go into your host.json and now depending on what",
    "start": "2207839",
    "end": "2214800"
  },
  {
    "text": "what framework you implement your function with it's going to be a different place but this is always a place where you can configure your",
    "start": "2214800",
    "end": "2220400"
  },
  {
    "text": "application all right here i can actually add a configuration",
    "start": "2220400",
    "end": "2225839"
  },
  {
    "text": "which is going to say all right the name of the hub should be and here you see i'm using percent which",
    "start": "2225839",
    "end": "2232480"
  },
  {
    "text": "means it should be an environment variable that you're going to get from the environment okay so that means that this host.json",
    "start": "2232480",
    "end": "2239920"
  },
  {
    "text": "is going to be deployed to azure that you cannot change it when it's deployed but what i can change is the",
    "start": "2239920",
    "end": "2246400"
  },
  {
    "text": "configuration and so in the configuration i can say all right the generate document task hub",
    "start": "2246400",
    "end": "2252720"
  },
  {
    "text": "and i'm going to give it a name and here you see i have zero zero three let's go back to zero zero one",
    "start": "2252720",
    "end": "2258880"
  },
  {
    "text": "and essentially when i run when i debug my code but don't do that in production right when i debug my code",
    "start": "2258880",
    "end": "2265280"
  },
  {
    "text": "sometimes when i see oh i need to interrupt a long running operation in the middle i'm going to go and then i'm",
    "start": "2265280",
    "end": "2271040"
  },
  {
    "text": "going to change that name like this i know that i have a fresh slate i restart fresh",
    "start": "2271040",
    "end": "2276640"
  },
  {
    "text": "another way which is actually supposed to be a cleaner way is to use this purge history delete uri",
    "start": "2276640",
    "end": "2283920"
  },
  {
    "text": "that you get when you execute but i can guarantee you that you're not going to save those",
    "start": "2283920",
    "end": "2290400"
  },
  {
    "text": "you're going to forget and then when you actually need it it's too late and also i had some cases where this uri",
    "start": "2290400",
    "end": "2297680"
  },
  {
    "text": "actually didn't work so it i clicked and then nothing happens you know it's tricky right so the other way is a safe way where you",
    "start": "2297680",
    "end": "2305520"
  },
  {
    "text": "can go and you can say all right so now i'm going to use another hub name so now if i run this",
    "start": "2305520",
    "end": "2313839"
  },
  {
    "text": "and go and execute one of the function execution all right so i'm just going to wait that",
    "start": "2314800",
    "end": "2320480"
  },
  {
    "text": "it starts okay it's funny because when i when i",
    "start": "2320480",
    "end": "2327599"
  },
  {
    "text": "actually rehearsed that presentation it kept jumping in the middle of an interrupted task and i wanted to show you that and now it doesn't so of course",
    "start": "2327599",
    "end": "2334000"
  },
  {
    "text": "that's the demo effect but believe me it will happen right when you debug so now i started the application again i'm",
    "start": "2334000",
    "end": "2339680"
  },
  {
    "text": "going to execute one of the functions let's execute one which is the function chaining because it's a safe one to run",
    "start": "2339680",
    "end": "2345359"
  },
  {
    "text": "okay here it has run and now if i go back to my",
    "start": "2345359",
    "end": "2350800"
  },
  {
    "text": "container storage i see that now i have a new one which is called test generate",
    "start": "2350800",
    "end": "2356560"
  },
  {
    "text": "documents task hub zero zero one dash and then apple's and lizzie's and if i go in the queue",
    "start": "2356560",
    "end": "2362880"
  },
  {
    "text": "i see that i have this one if now i have the problem again that it's jumping left and right and i don't",
    "start": "2362880",
    "end": "2368079"
  },
  {
    "text": "understand what's happening no problem i can go back to my visual studio i can say in the",
    "start": "2368079",
    "end": "2374880"
  },
  {
    "text": "configuration and by the way you can do that in the staging slot as well don't do that in production really right",
    "start": "2374880",
    "end": "2380079"
  },
  {
    "text": "because then you're going to lose state but if you are in the in the testing slot you can also do that here i mean",
    "start": "2380079",
    "end": "2385359"
  },
  {
    "text": "local settings.json on azure it would be in the configuration of the function application",
    "start": "2385359",
    "end": "2390640"
  },
  {
    "text": "i can change the name i can run again",
    "start": "2390640",
    "end": "2395559"
  },
  {
    "text": "okay",
    "start": "2396160",
    "end": "2398559"
  },
  {
    "text": "and when it runs again if i go back here and refresh",
    "start": "2401520",
    "end": "2406800"
  },
  {
    "text": "now i should see that i have zero zero two and now at this point i can safely say",
    "start": "2406800",
    "end": "2412000"
  },
  {
    "text": "oh i can clean up i'm going to remove everything which is 0 0 1. okay be careful when you delete stuff",
    "start": "2412000",
    "end": "2418880"
  },
  {
    "text": "because if you delete stuff but you didn't change the name then your function is going to fail and you can search for a long time what happened now",
    "start": "2418880",
    "end": "2425599"
  },
  {
    "text": "okay so this can be tricky but essentially now i say all right so my cues and my container the ones that are",
    "start": "2425599",
    "end": "2431920"
  },
  {
    "text": "zero zero one i'm not using them anymore i can clean up and again please don't do that in production that can be really",
    "start": "2431920",
    "end": "2437359"
  },
  {
    "text": "tricky so when you when you deploy to production and you have a hub name please stick to that hub name it's very",
    "start": "2437359",
    "end": "2443920"
  },
  {
    "text": "easy to break an application function uh function application sorry using this kind of things where you're going to",
    "start": "2443920",
    "end": "2449440"
  },
  {
    "text": "delete stuff that you shouldn't all right so be careful okay",
    "start": "2449440",
    "end": "2454960"
  },
  {
    "text": "so hopefully that illustrates a little bit better how those functions work so let's go and see the serialization",
    "start": "2454960",
    "end": "2461200"
  },
  {
    "text": "thing so serialization again what i'm showing you here in javascript might not happen because json is kind of native to",
    "start": "2461200",
    "end": "2468480"
  },
  {
    "text": "javascript so it's a little bit easier if you java and use the serializer then most probably you're going to have this",
    "start": "2468480",
    "end": "2474720"
  },
  {
    "text": "kind of issue so i'm going to put a breakpoint here so what i'm doing is that instead of passing the name directly i'm passing a",
    "start": "2474720",
    "end": "2481599"
  },
  {
    "text": "class which has a property called name and this is typically what you do you pass a",
    "start": "2481599",
    "end": "2487040"
  },
  {
    "text": "you know a set of information to your activity function and then after that inside the activity",
    "start": "2487040",
    "end": "2493440"
  },
  {
    "text": "function i'm going to i'm going to shout at the user in",
    "start": "2493440",
    "end": "2499599"
  },
  {
    "text": "uppercase so i'm going to call info.name the two upper okay",
    "start": "2499599",
    "end": "2504720"
  },
  {
    "text": "so let's try and run this in that case is also one case that i had",
    "start": "2504720",
    "end": "2510720"
  },
  {
    "text": "to scratch my head a little bit and when the function is ready",
    "start": "2510720",
    "end": "2517839"
  },
  {
    "text": "here the function is ready i'm going to call here serialization",
    "start": "2518160",
    "end": "2523839"
  },
  {
    "text": "okay so i jump into my code i have my info class i can go and inspect the name",
    "start": "2524640",
    "end": "2532000"
  },
  {
    "text": "property it's tokyo i'm going to execute i jump into my activity function and what happens oh no",
    "start": "2532000",
    "end": "2538960"
  },
  {
    "text": "i have a null reference exception because my name is null well if you have ever done anything with",
    "start": "2538960",
    "end": "2544520"
  },
  {
    "text": "serialization.net you probably know what happened what happened here is that",
    "start": "2544520",
    "end": "2551280"
  },
  {
    "text": "my setter is internal and you cannot do that if you serialize",
    "start": "2551280",
    "end": "2556720"
  },
  {
    "text": "json in javas.net everything needs to be public internal means that the seller can be",
    "start": "2556720",
    "end": "2563119"
  },
  {
    "text": "called by classes which are inside the same assembly the serializer is not in the same",
    "start": "2563119",
    "end": "2568160"
  },
  {
    "text": "assembly so what it's going to do it's going to serialize properly because the getter is public but then when it writes",
    "start": "2568160",
    "end": "2574319"
  },
  {
    "text": "back to the object the seller being internal it's not going to find it it's going to give up without any warning by",
    "start": "2574319",
    "end": "2580079"
  },
  {
    "text": "the way and then it's just not going to set it i can tell you i scratch my head a little bit on that one",
    "start": "2580079",
    "end": "2586720"
  },
  {
    "text": "okay so of course obviously the fix is to do that public",
    "start": "2586720",
    "end": "2593119"
  },
  {
    "text": "but if here i decide hey i'm going to be a very efficient programmer and i want to",
    "start": "2593119",
    "end": "2599359"
  },
  {
    "text": "add a new property and this property doesn't exist but it's",
    "start": "2599359",
    "end": "2604720"
  },
  {
    "text": "fine because i'm going to get some refactoring tool and i'm going to generate this property",
    "start": "2604720",
    "end": "2610319"
  },
  {
    "text": "awesome but when visual studio generates property it generates then as internal by default",
    "start": "2610319",
    "end": "2617200"
  },
  {
    "text": "and so you can really get beaten by that especially when you're in the zone right and you're coding and you're refactoring",
    "start": "2617200",
    "end": "2622319"
  },
  {
    "text": "and you're adding your stuff and then you forget to go and change it to public and that's only nothing works so that is the thing to be careful about",
    "start": "2622319",
    "end": "2629200"
  },
  {
    "text": "so it's one of the serialization gotchas now the other one is a little bit",
    "start": "2629200",
    "end": "2634560"
  },
  {
    "text": "clearer and this is a scenario that i do all the time so i'm running this show called learn",
    "start": "2634560",
    "end": "2640640"
  },
  {
    "text": "live on microsoft learn tv okay it's a thing i started and because i'm running",
    "start": "2640640",
    "end": "2646319"
  },
  {
    "text": "and my assignment was i need to scale things up i was like oh cool scale up means durable function i'm going to",
    "start": "2646319",
    "end": "2652240"
  },
  {
    "text": "generate tons of stuff using automation and durable functions so i have a learn live series",
    "start": "2652240",
    "end": "2658480"
  },
  {
    "text": "and this learn live series has a list of learn life modules which you are doing of episodes if you want",
    "start": "2658480",
    "end": "2665040"
  },
  {
    "text": "and typically when i do that because those learn live modules they are going to create some documents like some",
    "start": "2665040",
    "end": "2670480"
  },
  {
    "text": "markdown some emails some meeting requests some stuff it's really easier if i have a link",
    "start": "2670480",
    "end": "2676800"
  },
  {
    "text": "a reference to the parent to the series because i'm going to want to get some information from the series now in",
    "start": "2676800",
    "end": "2682319"
  },
  {
    "text": "dotnet this is no problem at all because it's all by reference okay it doesn't cost me anything it just",
    "start": "2682319",
    "end": "2687839"
  },
  {
    "text": "cost me a reference pointer essentially but when you try",
    "start": "2687839",
    "end": "2693200"
  },
  {
    "text": "to run this serialization the serializer is not going to be very happy because i have a",
    "start": "2693200",
    "end": "2699599"
  },
  {
    "text": "learn module who has a link to a parent who has a link to all the learn modules who have a link to a parent who have a",
    "start": "2699599",
    "end": "2704960"
  },
  {
    "text": "link to all their own modules who have a link to the parent and you know i'm not going to bore you and continue until the end but essentially",
    "start": "2704960",
    "end": "2711040"
  },
  {
    "text": "you see the problem right so if i go and run here the serialization recursion",
    "start": "2711040",
    "end": "2717119"
  },
  {
    "text": "okay now i am inside my thing so i'm going to uh where is f10 here i'm going to",
    "start": "2717119",
    "end": "2723200"
  },
  {
    "text": "instantiate my series and then i'm going to call that and oops it's not jumping anywhere and in",
    "start": "2723200",
    "end": "2729760"
  },
  {
    "text": "fact i have a whole lot of red and the red is newtons of the json so",
    "start": "2729760",
    "end": "2735440"
  },
  {
    "text": "i'm using basically the durable functions are using json.net in the background",
    "start": "2735440",
    "end": "2741359"
  },
  {
    "text": "and then it says where is it now",
    "start": "2741359",
    "end": "2746078"
  },
  {
    "text": "self-referencing loop detected for property parent with type blah blah blah",
    "start": "2746760",
    "end": "2752240"
  },
  {
    "text": "so essentially it says oh there is a recursion happening i cannot do that because that's going to generate an",
    "start": "2752240",
    "end": "2757440"
  },
  {
    "text": "endlessly big json file so you cannot do that so instead",
    "start": "2757440",
    "end": "2763200"
  },
  {
    "text": "what you're going to do is go inside your learn live module here",
    "start": "2763200",
    "end": "2770560"
  },
  {
    "text": "i'm going to say the parent i'm going to mark it as jason ignore i'm going to say don't",
    "start": "2770560",
    "end": "2776240"
  },
  {
    "text": "serialize that okay which means that in my",
    "start": "2776240",
    "end": "2783359"
  },
  {
    "text": "um oops sorry let's go back in my thing here in the",
    "start": "2783760",
    "end": "2790720"
  },
  {
    "text": "activity function before i do work i'm going to have to say oh for each module in the series",
    "start": "2790720",
    "end": "2796640"
  },
  {
    "text": "module the parent equal series here there is no serialization within the function until unless you write it",
    "start": "2796640",
    "end": "2802800"
  },
  {
    "text": "yourself so that is safe to do but you need to keep that in mind because otherwise you're not going to be able to serialize your objects okay so those are",
    "start": "2802800",
    "end": "2809839"
  },
  {
    "text": "kind of the smaller chars which are caused by the fact that because the function go to sleep there is a",
    "start": "2809839",
    "end": "2815839"
  },
  {
    "text": "serialization system happening in the azure storage and then when it's rehydrated it needs to run and that's",
    "start": "2815839",
    "end": "2822720"
  },
  {
    "text": "going to be an issue unless you do these kind of tricks",
    "start": "2822720",
    "end": "2827440"
  },
  {
    "text": "okay so what else do we have a weight in orchestrator now this one is a good one",
    "start": "2828000",
    "end": "2833839"
  },
  {
    "text": "so the orchestrator is a little bit of a special type of function it's going to orchestrate a bunch of things but it",
    "start": "2833839",
    "end": "2839920"
  },
  {
    "text": "needs to do it in a specific manner so here i have an orchestrator where i happily create an http client",
    "start": "2839920",
    "end": "2847200"
  },
  {
    "text": "and i'm going to call an api and then i'm going to use the result to run an activity function",
    "start": "2847200",
    "end": "2854400"
  },
  {
    "text": "okay now the problem here is that if i run this",
    "start": "2854400",
    "end": "2860079"
  },
  {
    "text": "if i run this it's actually going to work but it's going to protest a lot and this is really not something you want to",
    "start": "2867680",
    "end": "2873520"
  },
  {
    "text": "do okay so my function hey yay see what happened i didn't press anything",
    "start": "2873520",
    "end": "2879119"
  },
  {
    "text": "okay straighter remember hey you didn't finish then it jumped back that's what i wanted to demonstrate i should probably go and",
    "start": "2879119",
    "end": "2885040"
  },
  {
    "text": "clean that state okay sorry totally not linked to the demo that i wanted to show you but this is",
    "start": "2885040",
    "end": "2891359"
  },
  {
    "text": "what i was hoping would happen at some point because again this is like super confusing and by the way this is causing",
    "start": "2891359",
    "end": "2896880"
  },
  {
    "text": "an exception remember so that is a problem right so at some point i would probably have to go back oh and you see",
    "start": "2896880",
    "end": "2902960"
  },
  {
    "text": "now it's jumping here again i didn't touch anything right it's just the orchestrator saying hey you didn't finish this you didn't finish that that",
    "start": "2902960",
    "end": "2908960"
  },
  {
    "text": "doesn't work oh no okay i just press f5 in that case because it should run okay",
    "start": "2908960",
    "end": "2916000"
  },
  {
    "text": "let's go back to the demo forget everything that you just saw in the past 15 seconds we go back to the problem",
    "start": "2916000",
    "end": "2921599"
  },
  {
    "text": "which is i'm going to await in my orchestrator okay so",
    "start": "2921599",
    "end": "2927359"
  },
  {
    "text": "let's go here now i'm inside my orchestrator i'm going to go and call this api using",
    "start": "2927359",
    "end": "2934240"
  },
  {
    "text": "the client using the http client that actually works fine but",
    "start": "2934240",
    "end": "2941280"
  },
  {
    "text": "here i'm okay but when i try the next away which is this time oh wait context",
    "start": "2941520",
    "end": "2948640"
  },
  {
    "text": "then all hell will break loose and essentially what it says here it says",
    "start": "2948640",
    "end": "2954240"
  },
  {
    "text": "multi-threaded execution was detected this can happen if the orchestrator function code awaits on a task that was",
    "start": "2954240",
    "end": "2961920"
  },
  {
    "text": "not created by a durable orchestrating orchestration context method",
    "start": "2961920",
    "end": "2967920"
  },
  {
    "text": "that's a long error message but let's give credit to the guys who wrote that it's actually very descriptive you know",
    "start": "2967920",
    "end": "2973760"
  },
  {
    "text": "what happened you cannot wait on something else in the context tasks okay",
    "start": "2973760",
    "end": "2980720"
  },
  {
    "text": "so instead what do you want to do well what you want to do is here",
    "start": "2980720",
    "end": "2987119"
  },
  {
    "text": "the first in my orchestrator on the first run i'm going to call another activity",
    "start": "2987119",
    "end": "2993119"
  },
  {
    "text": "and in this other activity called call get random names that's where i'm going to call my http client and wait for the",
    "start": "2993119",
    "end": "3000079"
  },
  {
    "text": "result that's fine i can wait on anything i want in the activity functions okay",
    "start": "3000079",
    "end": "3005839"
  },
  {
    "text": "when it returns i'm going to run the orchestrator again this time i'm going to have a safe",
    "start": "3005839",
    "end": "3012400"
  },
  {
    "text": "call to the storage to get the serialized value and then i can pass that to my activity function",
    "start": "3012400",
    "end": "3019760"
  },
  {
    "text": "the other advantage of doing things this way is that this await here is going to be executed",
    "start": "3019760",
    "end": "3027119"
  },
  {
    "text": "only once the first time that the activity function is called",
    "start": "3027119",
    "end": "3032240"
  },
  {
    "text": "okay and then the next time that the orchestrator arrives at this line it's",
    "start": "3032240",
    "end": "3037599"
  },
  {
    "text": "going to get some serialized state from the storage and then the await is not going to be called again so it's also an",
    "start": "3037599",
    "end": "3043520"
  },
  {
    "text": "optimization okay so it makes sense to do things this way and plus you're not going to crash",
    "start": "3043520",
    "end": "3049599"
  },
  {
    "text": "your application with a lot of red which is not my favorite color in a console application",
    "start": "3049599",
    "end": "3055119"
  },
  {
    "text": "all right good",
    "start": "3055119",
    "end": "3059520"
  },
  {
    "text": "last example i want to show you now this one is really fun when you try",
    "start": "3060400",
    "end": "3065920"
  },
  {
    "text": "to run stuff so i noticed my breakpoints are messed up so i'm going to put them back",
    "start": "3065920",
    "end": "3071119"
  },
  {
    "text": "so here what i'm going to do i'm going to create 10 tasks",
    "start": "3071119",
    "end": "3076880"
  },
  {
    "text": "notice that there is no weight here so i'm going to just create those tasks and then i'm going to run them all in",
    "start": "3076880",
    "end": "3082480"
  },
  {
    "text": "parallel and then i'm going to try to understand what happens",
    "start": "3082480",
    "end": "3088720"
  },
  {
    "text": "well you know the two hardest things in programming are multi-threaded execution and naming stuff",
    "start": "3090079",
    "end": "3095680"
  },
  {
    "text": "right so here we are in the first scenario which is really hard okay so let's uh",
    "start": "3095680",
    "end": "3102559"
  },
  {
    "text": "trigger that so i'm going to go into the debugging all right now i have created my 10 tasks notice",
    "start": "3102559",
    "end": "3109920"
  },
  {
    "text": "that those tasks are in state waiting for activation all",
    "start": "3109920",
    "end": "3115200"
  },
  {
    "text": "right they are not executed yet they are waiting it's a little bit small but this is what it says here and now if i run f5",
    "start": "3115200",
    "end": "3122079"
  },
  {
    "text": "now i jump into my activity function very cool i press f5 again oh no i'm in",
    "start": "3122079",
    "end": "3128079"
  },
  {
    "text": "the same location but for another function i press f5 again and oh no i'm in the same place but in another function and",
    "start": "3128079",
    "end": "3135040"
  },
  {
    "text": "so if i really want to debug pressing f5 at some point i'm going to jump in the end oh now i'm here but is it the first",
    "start": "3135040",
    "end": "3143119"
  },
  {
    "text": "function that was executed or is it the third one well i have no clue basically right maybe you can find out according to the",
    "start": "3143119",
    "end": "3149359"
  },
  {
    "text": "name but in that case the name is null that's not going to help me a lot and essentially it's really hard to debug these kind of things",
    "start": "3149359",
    "end": "3155839"
  },
  {
    "text": "so what i recommend when you debug when you create your stuff try to run one at a time or else",
    "start": "3155839",
    "end": "3162000"
  },
  {
    "text": "you're going to lose your sanity so essentially what i do is that here i would put a nice commands",
    "start": "3162000",
    "end": "3168559"
  },
  {
    "text": "and then i would probably deploy to production and forget to remove it so don't do that either that's why we have two ice cone you know two eyes oh sorry",
    "start": "3168559",
    "end": "3175760"
  },
  {
    "text": "four eyes two two people four eyes uh concept where basically don't forget to remove that because that's going to mess",
    "start": "3175760",
    "end": "3181440"
  },
  {
    "text": "everything up but at least if i run this code now it's going to run just one call",
    "start": "3181440",
    "end": "3186480"
  },
  {
    "text": "of my activity function and then it allows me to really understand what's going on when i'm happy then i go back",
    "start": "3186480",
    "end": "3192319"
  },
  {
    "text": "and then i remove that before i deploy to production okay so be careful with these kind of things but",
    "start": "3192319",
    "end": "3198240"
  },
  {
    "text": "really that can be really tricky to develop and to debug",
    "start": "3198240",
    "end": "3203119"
  },
  {
    "text": "all right so that's pretty much what i wanted to show you today",
    "start": "3203359",
    "end": "3208520"
  },
  {
    "text": "so we talked about functions and wow",
    "start": "3208720",
    "end": "3214400"
  },
  {
    "text": "we did a brief recapitulation about azure function we understand we understood",
    "start": "3214400",
    "end": "3219599"
  },
  {
    "text": "where do functions come from but also some of the limitations that they have and then we understood why do we want to",
    "start": "3219599",
    "end": "3225599"
  },
  {
    "text": "use durable functions to overcome those limitations we understood how those",
    "start": "3225599",
    "end": "3231040"
  },
  {
    "text": "durable functions work by the way i didn't mention that but it's actually pretty clever how it's done it's an",
    "start": "3231040",
    "end": "3236240"
  },
  {
    "text": "extension component that you add to your function application so initially when they were first released",
    "start": "3236240",
    "end": "3242720"
  },
  {
    "text": "your function applications didn't have the durable function part but you could add it now it's pretty much there from",
    "start": "3242720",
    "end": "3248960"
  },
  {
    "text": "the start when you create a new function application in visual studio it's going to be already configured to run your able function so it's way easier",
    "start": "3248960",
    "end": "3255839"
  },
  {
    "text": "then we saw those patterns all right the function chaining the fan out fanning those two patterns that you're going to",
    "start": "3255839",
    "end": "3262000"
  },
  {
    "text": "use a lot but you can also monitor things or wait on things using this and then we saw those tips and tricks errors",
    "start": "3262000",
    "end": "3268640"
  },
  {
    "text": "i made and that i hope you never make if you want to learn more about azure",
    "start": "3268640",
    "end": "3274480"
  },
  {
    "text": "function this is a place where you can go it's our learn space on microsoft you don't need an",
    "start": "3274480",
    "end": "3280960"
  },
  {
    "text": "azure account to go there it doesn't cost you anything we give you some sandbox where you can actually deploy",
    "start": "3280960",
    "end": "3286640"
  },
  {
    "text": "your azure function it's going to last for two hours and then after that we discard everything so it's a good place",
    "start": "3286640",
    "end": "3292559"
  },
  {
    "text": "don't try to go and use that for bitcoin mining we actually detect that and we prevent that from happening",
    "start": "3292559",
    "end": "3297599"
  },
  {
    "text": "just to be clear but if you want to learn this is really a great place to go so you can absolutely go and use that",
    "start": "3297599",
    "end": "3303839"
  },
  {
    "text": "and finally this is uh what you need so this is where you get the slides and all the resource codes so this is really the",
    "start": "3303839",
    "end": "3310720"
  },
  {
    "text": "url that you want the one saying durable functions pattern at the at the bottom there this is where you can go and see",
    "start": "3310720",
    "end": "3317119"
  },
  {
    "text": "all those other patterns the monitor one the human interaction one etc etc",
    "start": "3317119",
    "end": "3322559"
  },
  {
    "text": "and finally this is me so if you want to come and talk to me say hi please do so i'm going to be here the whole day i'm",
    "start": "3322559",
    "end": "3328799"
  },
  {
    "text": "going to flying back home tomorrow and hopefully this was useful for you my name is omino i'm a cloud advocate for",
    "start": "3328799",
    "end": "3334720"
  },
  {
    "text": "microsoft thank you so much for your attention and have a great day",
    "start": "3334720",
    "end": "3339520"
  },
  {
    "text": "so i guess i did finish a little bit early so if you have a question i can take it and i'm going to repeat it for",
    "start": "3341920",
    "end": "3347200"
  },
  {
    "text": "the people i just said stories that i didn't have question but you know i sometimes i'm like this any questions",
    "start": "3347200",
    "end": "3354880"
  },
  {
    "text": "yes what's the difference between a function that runs for two",
    "start": "3354880",
    "end": "3362960"
  },
  {
    "text": "no i mean yes sorry sorry basically we bill you by the execution",
    "start": "3370400",
    "end": "3376160"
  },
  {
    "text": "time okay and by the second so if you run a function for two seconds it's going to be cheaper to run than if you if they",
    "start": "3376160",
    "end": "3382799"
  },
  {
    "text": "run for two minutes but however we do have in the oh by the way the question for my online audience was what is the",
    "start": "3382799",
    "end": "3389680"
  },
  {
    "text": "difference between those functions if they run for two seconds or two minutes is there a difference well yeah",
    "start": "3389680",
    "end": "3394799"
  },
  {
    "text": "obviously the two minute one is going to cost more we view you by the second um however um there is also a generous",
    "start": "3394799",
    "end": "3401440"
  },
  {
    "text": "free tier and there is there are good chances that a lot of what you do especially during the development part",
    "start": "3401440",
    "end": "3406880"
  },
  {
    "text": "but also during the startup phase of your application when you don't have so many users it's going to fall into that",
    "start": "3406880",
    "end": "3412880"
  },
  {
    "text": "free tier so you're not going to pay we start billing i can't remember exactly but there is a there is a number of",
    "start": "3412880",
    "end": "3418559"
  },
  {
    "text": "execution where we start billing if you want to have more information about that we have the uh the keyword is",
    "start": "3418559",
    "end": "3424240"
  },
  {
    "text": "azure pricing calculator where you can go but essentially there is no difference in the way that those are",
    "start": "3424240",
    "end": "3429599"
  },
  {
    "text": "handled the differences that the ones that last longer are going to cost more that's really what it is plus we build",
    "start": "3429599",
    "end": "3435599"
  },
  {
    "text": "you a little bit for the storage so if you use storage uh to store the state like in that case or to store just the",
    "start": "3435599",
    "end": "3441680"
  },
  {
    "text": "code of your function then it's going to cost you a little bit this is cents per month so it's not much okay",
    "start": "3441680",
    "end": "3447359"
  },
  {
    "text": "cool i guess we have one more question maybe well everything was clear so time for",
    "start": "3447359",
    "end": "3453680"
  },
  {
    "text": "coffee after two sessions in a row thank you so much for coming and hopefully it was useful thank you",
    "start": "3453680",
    "end": "3461640"
  }
]