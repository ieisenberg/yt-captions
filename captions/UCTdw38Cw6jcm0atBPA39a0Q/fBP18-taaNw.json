[
  {
    "start": "0",
    "end": "460000"
  },
  {
    "text": "um my name is Ed Thompson today I'm going to talk a little bit about git the Version Control System take a little",
    "start": "3199",
    "end": "8200"
  },
  {
    "text": "Deep dive into it can I see a show hands how many people are using git right now maybe at yeah that's absolutely",
    "start": "8200",
    "end": "13639"
  },
  {
    "text": "everybody okay keep your hand up if you've been confused by git at some point in time yeah again absolutely",
    "start": "13639",
    "end": "22240"
  },
  {
    "text": "everybody um so let's try to take a little bit of the edge off if we can um",
    "start": "22240",
    "end": "28840"
  },
  {
    "text": "again about myself my name is Edward Thompson I'm a program manager at Microsoft um which means I don't",
    "start": "28840",
    "end": "34239"
  },
  {
    "text": "actually write code anymore I just kind of stay in Excel word PowerPoint and of course",
    "start": "34239",
    "end": "42000"
  },
  {
    "text": "Outlook um at least at my day job I do also uh act as the maintainer of the",
    "start": "42000",
    "end": "47600"
  },
  {
    "text": "libg 2 project if you're not familiar with libg 2 it's kind of a reimplementation of git as a library so",
    "start": "47600",
    "end": "53640"
  },
  {
    "text": "that you can host it in your own application and it's used by people like GitHub gitlab and of course Microsoft",
    "start": "53640",
    "end": "59239"
  },
  {
    "text": "Visual studi team services to actually twiddle the bits and the repositories that you host there and do the lowlevel",
    "start": "59239",
    "end": "65080"
  },
  {
    "text": "kind of stuff so that's why I have to understand kind of how git works at at a",
    "start": "65080",
    "end": "70759"
  },
  {
    "text": "deep down level but why should you understand um my friend Emma talks a lot about uh teaching git and learning git",
    "start": "70759",
    "end": "78040"
  },
  {
    "text": "really the very getting started Basics and she tells people that the worst way to educate people about git is to start",
    "start": "78040",
    "end": "84720"
  },
  {
    "text": "out by talking about how it's just a directed ayylic graph right cuz who on Earth knows what that means um not me I",
    "start": "84720",
    "end": "92960"
  },
  {
    "text": "actually failed graph theory in college whoops but you can still be successful using git even not having graph",
    "start": "92960",
    "end": "101360"
  },
  {
    "text": "Theory um but it is kind of the next level up to start talking about how git works on the inside and and in its",
    "start": "101360",
    "end": "108600"
  },
  {
    "text": "internals um because what you really find um is that knowing git helps you",
    "start": "108600",
    "end": "115719"
  },
  {
    "text": "use git if you if you rewind a bit and look at how git came about if you look at its",
    "start": "115719",
    "end": "122159"
  },
  {
    "text": "Genesis it was invented by a guy named lonus tals if that name sounds familiar to you I hope it does he invented a",
    "start": "122159",
    "end": "127640"
  },
  {
    "text": "thing called the Linux kernel first and he invented git to help him manage the development of the Linux kernel he was",
    "start": "127640",
    "end": "134239"
  },
  {
    "text": "frustrated with the Version Control tools he was using and he set out to do something a little bit different and when he created git he set out four",
    "start": "134239",
    "end": "140720"
  },
  {
    "text": "goals first of all it has to be fast second of all it has to support a distributed workflow there are people",
    "start": "140720",
    "end": "146760"
  },
  {
    "text": "working on Linux kernel from all over the world third it has to provide safeguards against accidental data corruption and",
    "start": "146760",
    "end": "154319"
  },
  {
    "text": "if there's ever a doubt as to the direction the project should take you should look at CVS the concurrent version system it's the the version",
    "start": "154319",
    "end": "161879"
  },
  {
    "text": "control system that he was using as an example of what not to",
    "start": "161879",
    "end": "166920"
  },
  {
    "text": "do there are four things on this list and one thing is missing noticeably",
    "start": "166920",
    "end": "172080"
  },
  {
    "text": "absent is easy to use and it's not it's so in fact",
    "start": "172080",
    "end": "180480"
  },
  {
    "text": "challenging to use that XKCD has gone and made fun of it and this is totally honest like this",
    "start": "180480",
    "end": "186959"
  },
  {
    "text": "is an accurate portrayal of the state of git today because git is really hard to",
    "start": "186959",
    "end": "192400"
  },
  {
    "text": "use it has some weird commands the checkout command does four different things you know the first first time",
    "start": "192400",
    "end": "198799"
  },
  {
    "text": "it's listed there it checks out a branch the second time it creates a new Branch the third time it checks out a file in",
    "start": "198799",
    "end": "205440"
  },
  {
    "text": "your current branch and the fourth time it checks out a different file in a different branch so really challenging",
    "start": "205440",
    "end": "212040"
  },
  {
    "text": "and if you use it wrong it it pokes back at you right there are some really strange error messages like you're in a",
    "start": "212040",
    "end": "218720"
  },
  {
    "text": "detached head State who on Earth knows what that means by the end of this session you",
    "start": "218720",
    "end": "224239"
  },
  {
    "text": "will um and if you try to figure out how to use it if you want to go read The Man pages um those are hard to understand",
    "start": "224239",
    "end": "231599"
  },
  {
    "text": "too because it contains sentences like forward Port local commits to the updated Upstream",
    "start": "231599",
    "end": "237040"
  },
  {
    "text": "head I I swear to God I read that like three or four times before I realized they were talking about",
    "start": "237040",
    "end": "242920"
  },
  {
    "text": "rebase the most fun get command of all um so I want to pause real quick uh",
    "start": "242920",
    "end": "250280"
  },
  {
    "text": "I think Honesty between you and I is really important in the short 60 minutes we have together and I'm telling you a",
    "start": "250280",
    "end": "256000"
  },
  {
    "text": "lie on this slide one of these things is actually not in the git Man pages the gitman pages are so dense and hard to",
    "start": "256000",
    "end": "263080"
  },
  {
    "text": "understand that somebody has created a fake get man page generator which is tons of fun they fed all the existing",
    "start": "263080",
    "end": "269720"
  },
  {
    "text": "Man pages into a marov chain generator and out pops random things that sound",
    "start": "269720",
    "end": "275600"
  },
  {
    "text": "like get Man",
    "start": "275600",
    "end": "278320"
  },
  {
    "text": "pages I created this slide a while ago so I'm actually not sure which one's which I think it's the the third one",
    "start": "280639",
    "end": "285680"
  },
  {
    "text": "reveal all Downstream commits below the scent Upstream paths I think that's the fake one but how on Earth is that any",
    "start": "285680",
    "end": "292160"
  },
  {
    "text": "different than the first I don't I don't remember so you know go",
    "start": "292160",
    "end": "297720"
  },
  {
    "text": "check that out have some fun it won't conf confuse you any more than the actual",
    "start": "297720",
    "end": "303160"
  },
  {
    "text": "documentation so it turns out you know we talk about how G is really powerful and",
    "start": "303880",
    "end": "309280"
  },
  {
    "text": "important and this this notion that it's really hard to use doesn't exactly Jag",
    "start": "309280",
    "end": "314400"
  },
  {
    "text": "with that and it turns out that the git commands are just really the thinnest abstraction over the data",
    "start": "314400",
    "end": "321000"
  },
  {
    "text": "model so if you understand the data model you understand a lot better about how git actually works so let's let's",
    "start": "321000",
    "end": "329160"
  },
  {
    "text": "actually re start at the very beginning what is a distributed Version Control System well distributed Version Control",
    "start": "329160",
    "end": "335199"
  },
  {
    "text": "Systems came about uh in particular in the open source world you know lonus invented it to work on the Linux kernel",
    "start": "335199",
    "end": "342479"
  },
  {
    "text": "and in the open source world people are spread out all across the globe working",
    "start": "342479",
    "end": "347880"
  },
  {
    "text": "on the projects I mean that's not always true but often it is true and the thing",
    "start": "347880",
    "end": "353800"
  },
  {
    "text": "about working in a very distributed team is that you don't want to have one",
    "start": "353800",
    "end": "359240"
  },
  {
    "text": "Central server cuz where where would you put it you know I I work with I live in",
    "start": "359240",
    "end": "365440"
  },
  {
    "text": "the UK right now and I work with people in Germany in the US and Australia you know I mean if we kind of average that",
    "start": "365440",
    "end": "371680"
  },
  {
    "text": "out we'd probably put our Central server somewhere floating on an island out there in the Pacific and that's not",
    "start": "371680",
    "end": "377680"
  },
  {
    "text": "going to work for anybody so um having a the idea of having to use a central",
    "start": "377680",
    "end": "383599"
  },
  {
    "text": "server is really problematic in open source and so the idea of a distributed",
    "start": "383599",
    "end": "389599"
  },
  {
    "text": "system kind of flips that on its head in a classic centralized server of course you have to talk to the server to do",
    "start": "389599",
    "end": "396319"
  },
  {
    "text": "almost anything some really like take it to the next level and make it so that if you want to just edit a file that you've",
    "start": "396319",
    "end": "402599"
  },
  {
    "text": "already got locally you've got to run checkout and talk to the server and ask it if you can edit the file and there",
    "start": "402599",
    "end": "409400"
  },
  {
    "text": "are good reasons for that but not if you are working on an open source project",
    "start": "409400",
    "end": "415800"
  },
  {
    "text": "and with people all around the globe okay so the idea of a distributed system",
    "start": "415800",
    "end": "422240"
  },
  {
    "text": "brings the entire repository locally so you have everything local including all of the history so that means everything",
    "start": "422240",
    "end": "429240"
  },
  {
    "text": "you do is local even when you commit and it's not until you actually go and share",
    "start": "429240",
    "end": "435000"
  },
  {
    "text": "that commit the changes that you've made with your co-workers that you actually hit the network and this notion this idea really",
    "start": "435000",
    "end": "444000"
  },
  {
    "text": "underlines and defines how git actually operates and it it it informs the entire",
    "start": "444000",
    "end": "449199"
  },
  {
    "text": "data model right so the repository is actually architected in order to support",
    "start": "449199",
    "end": "455240"
  },
  {
    "text": "this type of a workflow and it's very very different than a centralized Version Control System okay so we often",
    "start": "455240",
    "end": "462840"
  },
  {
    "text": "talk about the repository and now it's it's time to talk about what it actually looks like this is where um where we go",
    "start": "462840",
    "end": "469240"
  },
  {
    "text": "a little bit more advanced and we do start talking about the fact that it's a directed as cyclic graph so we can we",
    "start": "469240",
    "end": "475960"
  },
  {
    "text": "can actually just take a look at what history looks like let's say I'm working on a project with my cooworker",
    "start": "475960",
    "end": "482680"
  },
  {
    "text": "Alice and we've both cloned the repository we've gotten it from the server and we've both gotten the the",
    "start": "482680",
    "end": "488400"
  },
  {
    "text": "three commits there it's a real simple repository you know it's something like Hello World um I don't know why you need",
    "start": "488400",
    "end": "494280"
  },
  {
    "text": "three commits to do hello world but let's say I don't know maybe we internationalized here um so we both",
    "start": "494280",
    "end": "500080"
  },
  {
    "text": "clone this repository and we get the three commits and so that means in this",
    "start": "500080",
    "end": "506000"
  },
  {
    "text": "distributed system if I make a change and check it in and Alice makes a change and check it in",
    "start": "506000",
    "end": "512640"
  },
  {
    "text": "we both are only checking into our local repositories we don't actually see each",
    "start": "512640",
    "end": "518080"
  },
  {
    "text": "other's changes until such time as I figure out a way to get Alice's change from her maybe she opens a poll request",
    "start": "518080",
    "end": "524880"
  },
  {
    "text": "pushes it up to vsts or GitHub um maybe she sends it to me in a patch over email",
    "start": "524880",
    "end": "531040"
  },
  {
    "text": "because that's a thing get supports because it's important if you're a Linux Kel developer and it's 1995 um but anyway somehow I get her",
    "start": "531040",
    "end": "538959"
  },
  {
    "text": "commit and bring it into my uh my repository and then I merge her commit",
    "start": "538959",
    "end": "544320"
  },
  {
    "text": "and mine and I get the result very straightforward this is",
    "start": "544320",
    "end": "550640"
  },
  {
    "text": "tends to be how we visualize git working as this sort of graph that kind",
    "start": "550640",
    "end": "555800"
  },
  {
    "text": "of diverges and comes back together and it turns out that that's exactly how git history is",
    "start": "555800",
    "end": "562279"
  },
  {
    "text": "stored so here we are in our little repository very straightforward um and",
    "start": "562279",
    "end": "569000"
  },
  {
    "text": "if I run git log I can see that in fact I have brought Alice's change into",
    "start": "569000",
    "end": "575440"
  },
  {
    "text": "mine but when you run git log it's it's not exactly showing you exactly how git",
    "start": "575440",
    "end": "580839"
  },
  {
    "text": "is storing this information you know you're just seeing like this flat list of changes without any sort of structure",
    "start": "580839",
    "end": "587600"
  },
  {
    "text": "to them right just commit after commit",
    "start": "587600",
    "end": "592959"
  },
  {
    "text": "after commit so the nice thing about git is you can run git log D- graph and it",
    "start": "592959",
    "end": "599640"
  },
  {
    "text": "will show you the actual structure that the repository is taking and so you can see commit 1 2 3",
    "start": "599640",
    "end": "607079"
  },
  {
    "text": "and then it kind of branches off into Allison's change and then branches off in a different direction in a mine and",
    "start": "607079",
    "end": "613399"
  },
  {
    "text": "then it actually comes back together so this is actually the way history is stored as this graph",
    "start": "613399",
    "end": "619600"
  },
  {
    "text": "structure right so there are actually a lot of tools",
    "start": "619600",
    "end": "625839"
  },
  {
    "text": "that'll show you this besides just get graph actually you know we've got like I think I've got get Kraken running",
    "start": "625839",
    "end": "633760"
  },
  {
    "text": "somewhere this is a really good example of a visual tool that'll also show you",
    "start": "633760",
    "end": "639480"
  },
  {
    "text": "this I I like to see the graph I like to actually look at the graph and see how it's changing over time in most of my",
    "start": "639480",
    "end": "645920"
  },
  {
    "text": "projects it's not actually it's not actually perfect in every project because depending on like",
    "start": "645920",
    "end": "652240"
  },
  {
    "text": "the sort of branching and merging structure you use you can get into a bit of a a headache if you look at get",
    "start": "652240",
    "end": "661240"
  },
  {
    "text": "itself they really like their branches so you can see each of these little",
    "start": "662360",
    "end": "668160"
  },
  {
    "text": "lines over on the left is an actual branch that eventually gets merged and",
    "start": "668160",
    "end": "673959"
  },
  {
    "text": "they go a little bit crazy so um so I like to look at the graph I",
    "start": "673959",
    "end": "679720"
  },
  {
    "text": "like to use git log D- graph to see the gra to see the way the structure has changed over time but uh it gets a",
    "start": "679720",
    "end": "686720"
  },
  {
    "text": "little problematic on a really really giant rep repository",
    "start": "686720",
    "end": "693160"
  },
  {
    "text": "okay so again this is uh the graph or the dag um what does that actually mean",
    "start": "693279",
    "end": "699680"
  },
  {
    "start": "694000",
    "end": "1065000"
  },
  {
    "text": "what does it mean to be a quote unquote directed ayylic graph well uh there is some direction to the graph that means",
    "start": "699680",
    "end": "707000"
  },
  {
    "text": "it's it's moving in a certain direction I like to model it as moving forward in time um again I don't want to lie to you",
    "start": "707000",
    "end": "714680"
  },
  {
    "text": "too much um these arrows don't actually flow this way in the git object model",
    "start": "714680",
    "end": "721079"
  },
  {
    "text": "we'll talk about that in a minute I swear to God one of the hardest things when you've decided to start writing a distributed version control system is",
    "start": "721079",
    "end": "727720"
  },
  {
    "text": "figure out how to draw the arrows on the Whiteboard when you're talking about things I've spent countless hours of my",
    "start": "727720",
    "end": "733920"
  },
  {
    "text": "life in these discussions well so we'll get there in a second um but there is a",
    "start": "733920",
    "end": "739079"
  },
  {
    "text": "direction to the graph and we often model it as moving forward in time and it's acyclic meaning you can't",
    "start": "739079",
    "end": "746399"
  },
  {
    "text": "have a cycle in the graph meaning that one commit can't point back to a previous commit",
    "start": "746399",
    "end": "753240"
  },
  {
    "text": "so it's moving forward in time you you know commit three can't have been the parent of commit one that doesn't make a",
    "start": "753240",
    "end": "760079"
  },
  {
    "text": "lot of sense as far as we know time moves forward so you can't kind of go back and and change the directionality",
    "start": "760079",
    "end": "766680"
  },
  {
    "text": "of time okay that's all we'll talk about the fact that it's directed or a cyclic",
    "start": "766680",
    "end": "772120"
  },
  {
    "text": "now we'll just call it the graph okay",
    "start": "772120",
    "end": "779000"
  },
  {
    "text": "I think this is the last lie um there's something wrong with this slide um it's not so easy to go 1 2 3 4 5 in a",
    "start": "779240",
    "end": "787399"
  },
  {
    "text": "centralized Version Control System that's the way your commit IDs work um but that's not actually the way",
    "start": "787399",
    "end": "795000"
  },
  {
    "text": "this works in git um the reason being they can't if",
    "start": "795000",
    "end": "801399"
  },
  {
    "text": "I'm working on on my repository and I've cloned down the repo and I have three commits and it's at commit ID3 and I go",
    "start": "801399",
    "end": "808480"
  },
  {
    "text": "and make a change in and check it in and Alice goes and change goes and makes a change and checks it into her repository",
    "start": "808480",
    "end": "814199"
  },
  {
    "text": "how do we know who gets commit id4 and who gets commit id5 right we'd have to have some way to talk to the server and",
    "start": "814199",
    "end": "821360"
  },
  {
    "text": "get that commit ID so that's not actually how git Works um I think most",
    "start": "821360",
    "end": "826920"
  },
  {
    "text": "of you have probably seen this git stores its commit IDs is a 40 character long heximal string um what that is is",
    "start": "826920",
    "end": "834320"
  },
  {
    "text": "actually the shaw one hash of the commit um and it's it's set up that way",
    "start": "834320",
    "end": "841079"
  },
  {
    "text": "you know it could have been like a a random number or a guid u but using a sha one hash uh actually makes a lot of",
    "start": "841079",
    "end": "848079"
  },
  {
    "text": "sense this was an idea inspired by the monotone Version Control System who really set the groundwork for the way",
    "start": "848079",
    "end": "854040"
  },
  {
    "text": "git Works in a lot of ways so we take the commit and we hash",
    "start": "854040",
    "end": "859839"
  },
  {
    "text": "it we run it through Shaw one and the resulting hash ID becomes the commit",
    "start": "859839",
    "end": "865720"
  },
  {
    "text": "ID and so you get things like and thankfully we only have to talk about like the first seven or so characters so",
    "start": "865720",
    "end": "871160"
  },
  {
    "text": "you get commit IDs like 1 C 6B 2011 so it's a little bit of a bummer",
    "start": "871160",
    "end": "876920"
  },
  {
    "text": "but um you know you usually only have to talk about like the first seven characters and on a big like I don't",
    "start": "876920",
    "end": "884079"
  },
  {
    "text": "know tfbc like centralized Version Control System you'll get change set IDs into the seven digits so it's not too",
    "start": "884079",
    "end": "890279"
  },
  {
    "text": "much of a stretch um but it is a little bit of an annoyance right so what does it mean when I say A",
    "start": "890279",
    "end": "898480"
  },
  {
    "text": "we take a a hash of the commit what what do I mean when I say of the commit so a",
    "start": "898480",
    "end": "904240"
  },
  {
    "text": "commit represents the entire repository so it's a snapshot of the entire repository at any state in time that's",
    "start": "904240",
    "end": "910920"
  },
  {
    "text": "not always so obvious because if you run get log or if you run get show for instance what it'll show you on a",
    "start": "910920",
    "end": "918480"
  },
  {
    "text": "commit is just the changes it'll show you the diff of how how that commit",
    "start": "918480",
    "end": "924519"
  },
  {
    "text": "changed from its parent so it's really easy to start thinking that that's what get is is actually storing um just the",
    "start": "924519",
    "end": "931199"
  },
  {
    "text": "diff how something has changed in a new commit it's not it's KN a snap it's storing a snapshot of the entire",
    "start": "931199",
    "end": "937240"
  },
  {
    "text": "repository so when it's Computing that diff it's actually doing the diff every single time you run get",
    "start": "937240",
    "end": "943639"
  },
  {
    "text": "show okay so to make that structure to make that snapshot a commit is made up",
    "start": "943639",
    "end": "949600"
  },
  {
    "text": "of trees and blobs trees are directory objects they represent you know file",
    "start": "949600",
    "end": "955480"
  },
  {
    "text": "system entries and blobs represent an actual file so you have a bunch of blobs",
    "start": "955480",
    "end": "960880"
  },
  {
    "text": "one for each file in your git repository and they are organized into trees and then a commit points to the the root",
    "start": "960880",
    "end": "968279"
  },
  {
    "text": "tree the root of your git repository it looks something like this so if I have one file just file 1. text um it'll be",
    "start": "968279",
    "end": "976079"
  },
  {
    "text": "stored as a blob and it's hashed also so we take the shaw one hash of the file",
    "start": "976079",
    "end": "981800"
  },
  {
    "text": "that you're checking in um and we put that into a tree this is the root tree um and we take the shaw one hash of that",
    "start": "981800",
    "end": "989600"
  },
  {
    "text": "tree and then a commit points to that tree okay a lot of people seem to think",
    "start": "989600",
    "end": "996560"
  },
  {
    "text": "that git is inefficient because it stores a snapshot of the entire repository at every state in time but",
    "start": "996560",
    "end": "1002000"
  },
  {
    "text": "it's not actually this is where the shaw one hash as your ID starts to make a lot",
    "start": "1002000",
    "end": "1008519"
  },
  {
    "text": "of sense so if I have one file in my repository file one. text we take the hash of that let's say I add another",
    "start": "1008519",
    "end": "1015399"
  },
  {
    "text": "file and I want to check that in I want to create a new snapshot that's got file 1. text and something else I don't put",
    "start": "1015399",
    "end": "1024199"
  },
  {
    "text": "another copy of file 1. text into the repository because when I hash it the hash is the same hasn't changed I'm only",
    "start": "1024199",
    "end": "1032400"
  },
  {
    "text": "adding file 2. text so I get a lot of space saving benefits I'm I'm just compressing the repository without even",
    "start": "1032400",
    "end": "1039558"
  },
  {
    "text": "trying because I don't need to add another copy of file 1. text when it hasn't changed so to add a new file we",
    "start": "1039559",
    "end": "1046918"
  },
  {
    "text": "just put a second entry into our file 2. text the tree entry it does",
    "start": "1046919",
    "end": "1052600"
  },
  {
    "text": "change right it's a different tree now so it's sha one ID changes and then we create a commit on top of that so um we",
    "start": "1052600",
    "end": "1061559"
  },
  {
    "text": "don't have to uh duplicate that at all um I think so I've said you know",
    "start": "1061559",
    "end": "1067320"
  },
  {
    "text": "this is what a commit is it's a it's a copy of the content let's actually take a look at what it's storing on disk um",
    "start": "1067320",
    "end": "1074160"
  },
  {
    "text": "again let's get back to my actual Repository um so this is my",
    "start": "1074160",
    "end": "1081000"
  },
  {
    "text": "working directory I've got a bunch of files in it I've also got this folder up top dogit that's where git actually",
    "start": "1081000",
    "end": "1088159"
  },
  {
    "text": "stores all the metadata that's where my git repository lives I don't know if you've taken a",
    "start": "1088159",
    "end": "1093640"
  },
  {
    "text": "bother to go look inside it's got a bunch of files and folders in it this is actually the metadata of your",
    "start": "1093640",
    "end": "1100440"
  },
  {
    "text": "repository um and the commits the trees the blobs the things that make up our",
    "start": "1100440",
    "end": "1106000"
  },
  {
    "text": "repository we call those objects so they're in the the dogit objects directory we'll talk about a couple more",
    "start": "1106000",
    "end": "1111400"
  },
  {
    "text": "of these files in a little bit and if I look ingit objects I see a",
    "start": "1111400",
    "end": "1117200"
  },
  {
    "text": "bunch of hex characters these are uh where my objects",
    "start": "1117200",
    "end": "1122559"
  },
  {
    "text": "are stored when I first start creating objects they're stored in here as loose",
    "start": "1122559",
    "end": "1127640"
  },
  {
    "text": "objects they're called and it's basically just one object per file on",
    "start": "1127640",
    "end": "1132679"
  },
  {
    "text": "dis later G will come along and pack these up into an archive which allows it to be a little bit more efficient in the",
    "start": "1132679",
    "end": "1138880"
  },
  {
    "text": "way it accesses objects but when you first start creating them they're stored as loose pack files I'm sorry loose",
    "start": "1138880",
    "end": "1144760"
  },
  {
    "text": "objects on disk and if I actually just go and read one of these I'll see my",
    "start": "1144760",
    "end": "1151039"
  },
  {
    "text": "file oh no I won't actually I'm really disappointed turns out that git compresses it but git does give us a",
    "start": "1151039",
    "end": "1157400"
  },
  {
    "text": "bunch of Handy utilities to actually look and inspect the objects that that live there um this I know happens to be",
    "start": "1157400",
    "end": "1165080"
  },
  {
    "text": "a commit so I can run get cap file commit give it the the ID that I'm interested",
    "start": "1165080",
    "end": "1171080"
  },
  {
    "text": "in and it'll show me so this this is what I mean when I say we take a Shaw one of the contents of a Commit This is",
    "start": "1171080",
    "end": "1179000"
  },
  {
    "text": "that commit so a commit contains some metadata about when I made the change it",
    "start": "1179000",
    "end": "1184840"
  },
  {
    "text": "was me on this date uh it gives me the commit message and then up top I see the tree",
    "start": "1184840",
    "end": "1191799"
  },
  {
    "text": "so this is actually pointing to the root tree the snapshot of my G repository when I ran this commit and it's also",
    "start": "1191799",
    "end": "1198799"
  },
  {
    "text": "pointing to a parent so that is how git builds its tree structure how it builds",
    "start": "1198799",
    "end": "1204919"
  },
  {
    "text": "the graph in memory it starts at one commit and then it can walk backwards through the parents okay so that's what I meant when",
    "start": "1204919",
    "end": "1211600"
  },
  {
    "text": "I said that we get into arguments over which way the arrow should go it actually points backwards it points to the previous",
    "start": "1211600",
    "end": "1219039"
  },
  {
    "text": "commits in time okay and we can look at these other objects we can look at the",
    "start": "1219039",
    "end": "1224080"
  },
  {
    "text": "tree uh if you run git cat file tree is what you would expect to happen like get",
    "start": "1224080",
    "end": "1229200"
  },
  {
    "text": "cat file commit if you do that you're really bummed out because it's also in binary turns out that git stores trees",
    "start": "1229200",
    "end": "1236960"
  },
  {
    "text": "in a binary format in order to save a little bit of uh make it a little bit more efficient uh instead I can run get",
    "start": "1236960",
    "end": "1244400"
  },
  {
    "text": "LS tree and give it the ID and then I'll actually see what my tree looks",
    "start": "1244400",
    "end": "1250799"
  },
  {
    "text": "like um again I've got file 1. text and file 2. text at this revision at those",
    "start": "1250799",
    "end": "1257799"
  },
  {
    "text": "um at those IDs and I can run git cat file on a blob blob being a file of",
    "start": "1257799",
    "end": "1264640"
  },
  {
    "text": "course and see the actual contents of the file at this point in time okay so",
    "start": "1264640",
    "end": "1269919"
  },
  {
    "text": "all C file really does is kind of just uncompresses the the object or finds it",
    "start": "1269919",
    "end": "1275279"
  },
  {
    "text": "in the pack file if if git has stored it in the archive and just dumps it to screen so it's really handy for",
    "start": "1275279",
    "end": "1280520"
  },
  {
    "text": "inspecting your git",
    "start": "1280520",
    "end": "1284200"
  },
  {
    "text": "repository so that's how objects are stored that's kind of the minimum thing you need to be a version control system",
    "start": "1287279",
    "end": "1292760"
  },
  {
    "text": "is to be able to um take copies of files and store them at a particular",
    "start": "1292760",
    "end": "1299840"
  },
  {
    "text": "version but it's not so helpful if that's all your version control system does you also really need the ability to",
    "start": "1299840",
    "end": "1306279"
  },
  {
    "text": "make branches because if I'm working on some like long running feature let's say I'm hacking something in and it's not",
    "start": "1306279",
    "end": "1312840"
  },
  {
    "text": "quite ready to ship and my coworker Alice needs to fix a bug we need to be able to separate our workflows I need to",
    "start": "1312840",
    "end": "1319640"
  },
  {
    "text": "be able to keep working on that development feature that isn't ready to ship so that Alice can you know get her",
    "start": "1319640",
    "end": "1325080"
  },
  {
    "text": "code into production fix that critical bug and so that's the you know kind of",
    "start": "1325080",
    "end": "1330159"
  },
  {
    "text": "function that branches perform branches work a little bit differently in git than they do in most centralized Version",
    "start": "1330159",
    "end": "1336080"
  },
  {
    "text": "Control Systems like subversion or tfvc in those sort of Version Control Systems",
    "start": "1336080",
    "end": "1341279"
  },
  {
    "text": "you have a folder and you Branch a folder so in tfvc you'll often see it",
    "start": "1341279",
    "end": "1347360"
  },
  {
    "text": "called uh name I think it's been a long time since I've used it apparently in SVN you tend to talk about trunk um as",
    "start": "1347360",
    "end": "1354840"
  },
  {
    "text": "your main folder where everything's integrated and next to trunk if you look in your repository you'll see other",
    "start": "1354840",
    "end": "1361919"
  },
  {
    "text": "branches you'll see feature branches you'll see release branches that's not the way get storage",
    "start": "1361919",
    "end": "1368039"
  },
  {
    "start": "1367000",
    "end": "1697000"
  },
  {
    "text": "branches get actually storage branches at the repository level so you Branch the entire git repository um when you",
    "start": "1368039",
    "end": "1375159"
  },
  {
    "text": "create a new branch and that's actually really really economical in git so um",
    "start": "1375159",
    "end": "1382720"
  },
  {
    "text": "we've talked a little bit about the graph why does git store branches this way well it turns out that instead of",
    "start": "1382720",
    "end": "1389760"
  },
  {
    "text": "actually branching folders inside the repository git can store a branch really",
    "start": "1389760",
    "end": "1395200"
  },
  {
    "text": "really economically just as a pointer into this graph so um if I have my",
    "start": "1395200",
    "end": "1401960"
  },
  {
    "text": "branch in this repository that we've been working on what GS actually doing is just storing a pointer to the commit",
    "start": "1401960",
    "end": "1408559"
  },
  {
    "text": "that my branch is currently referring to and the same with Alice's Branch so that it's it's a pointer into the",
    "start": "1408559",
    "end": "1416640"
  },
  {
    "text": "graph and the nice thing about this is that since it's lightweight since it's",
    "start": "1416640",
    "end": "1422039"
  },
  {
    "text": "easy to you know just make a pointer right you just kind of write a file on",
    "start": "1422039",
    "end": "1428200"
  },
  {
    "text": "disk we'll see what that looks like in a second but because this is so lightweight it encourages you to Branch",
    "start": "1428200",
    "end": "1433880"
  },
  {
    "text": "more in so working at Microsoft I worked on tfbc and we worked in a really big",
    "start": "1433880",
    "end": "1441039"
  },
  {
    "text": "repository um the the tfbc code base is pretty large it's not huge it's not",
    "start": "1441039",
    "end": "1446679"
  },
  {
    "text": "windows it's not office but it's pretty big and so to create a branch on our centralized Version Control System would",
    "start": "1446679",
    "end": "1453039"
  },
  {
    "text": "take I don't know an hour to like copy bits around and and line everything up",
    "start": "1453039",
    "end": "1459159"
  },
  {
    "text": "and so you had to do it you know only when you needed it and you had to get an administrator to do it because there was",
    "start": "1459159",
    "end": "1464720"
  },
  {
    "text": "so much overhead yada y yada terrible system um for uh for the idea of topic",
    "start": "1464720",
    "end": "1472120"
  },
  {
    "text": "branching right if I just want to fix a bug I can create a branch to do that you would never do that in tfbc on a big",
    "start": "1472120",
    "end": "1478480"
  },
  {
    "text": "repository it would just take too long in git it's super easy because a branch is really just a",
    "start": "1478480",
    "end": "1486919"
  },
  {
    "text": "pointer what do I mean when I say that so let's go back into our git repository into the doget folder where all the",
    "start": "1486919",
    "end": "1493679"
  },
  {
    "text": "metadata is stored um and right below the objects folder is a folder called rep",
    "start": "1493679",
    "end": "1498960"
  },
  {
    "text": "and in git terminology a ref is a branch or a tag and again in get terminology um it's",
    "start": "1498960",
    "end": "1508679"
  },
  {
    "text": "actually not called a branch it's called a head um so I apologize for that but if",
    "start": "1508679",
    "end": "1514360"
  },
  {
    "text": "you look inside your git refs heads folder you'll actually see the branches and so they're actually named on disk",
    "start": "1514360",
    "end": "1522480"
  },
  {
    "text": "the files on disk are named the the name of the branch so it's really super easy to inspect these and I can look at",
    "start": "1522480",
    "end": "1529000"
  },
  {
    "text": "what's inside the fact that it's 41 characters might give some of you a hint as to",
    "start": "1529000",
    "end": "1535200"
  },
  {
    "text": "what's in there um it's the it's the shaw one it's the commit ID that this",
    "start": "1535200",
    "end": "1541279"
  },
  {
    "text": "branch is currently pointing to um and I can look at mine and I'll",
    "start": "1541279",
    "end": "1547320"
  },
  {
    "text": "see that it's pointing to a different Shaw one and if we look in our",
    "start": "1547320",
    "end": "1555000"
  },
  {
    "text": "log and we the decorate flag this time um we can see",
    "start": "1556880",
    "end": "1562640"
  },
  {
    "text": "that in fact my Branch the one on top is 9969",
    "start": "1562640",
    "end": "1568840"
  },
  {
    "text": "whatever which corresponds to the contents of the file Alice's branch is 1C 66 so it stores these branches just",
    "start": "1568840",
    "end": "1576760"
  },
  {
    "text": "on disk um in these files so it's really easy to manipulate these it's really",
    "start": "1576760",
    "end": "1581880"
  },
  {
    "text": "easy to create a new Branch all git has to do is write 41 characters to dis and boom you have a new Branch way different",
    "start": "1581880",
    "end": "1588399"
  },
  {
    "text": "than needing an administrator taking hours to set something up so it really encourages you to create more branches",
    "start": "1588399",
    "end": "1595279"
  },
  {
    "text": "even just to fix a bug I create a",
    "start": "1595279",
    "end": "1598960"
  },
  {
    "text": "branch so it's great that we have branches but usually you have the notion of being on a branch I'm working on some",
    "start": "1600919",
    "end": "1608320"
  },
  {
    "text": "Branch when I check in changes they go into my Branch when Alice checks in changes they go into hers git uses",
    "start": "1608320",
    "end": "1615240"
  },
  {
    "text": "another type of Branch for this it's called a a symbolic reference and the important one is head",
    "start": "1615240",
    "end": "1621399"
  },
  {
    "text": "in all upper case if you've ever been in that dreaded detached head State this is what it's talking about this is we're",
    "start": "1621399",
    "end": "1627559"
  },
  {
    "text": "starting to get into that so head stores the current branch that you're on um and again it's also just a pointer",
    "start": "1627559",
    "end": "1635159"
  },
  {
    "text": "but instead of being a pointer to a commit now it's a pointer to a branch",
    "start": "1635159",
    "end": "1642320"
  },
  {
    "text": "and I can look at my head file in all caps in my git repository and it says",
    "start": "1642320",
    "end": "1647679"
  },
  {
    "text": "ref's head mine so this is telling me that I'm on the mine Branch right now and if I run",
    "start": "1647679",
    "end": "1654159"
  },
  {
    "text": "get Branch indeed I am right get so get to tell you what branch youron just",
    "start": "1654159",
    "end": "1659960"
  },
  {
    "text": "looks at the head file says ref's head's mine it can then figure out which commit that is by looking at that file the mine",
    "start": "1659960",
    "end": "1666039"
  },
  {
    "text": "file if I switch branches if I switch branches uh say to",
    "start": "1666039",
    "end": "1674200"
  },
  {
    "text": "Alice's all it's going to do is update that head file okay so super straightforward to change",
    "start": "1674200",
    "end": "1681840"
  },
  {
    "text": "branches obviously it'll also check out the differences between Alice's branch and my Branch um that's the timec",
    "start": "1681840",
    "end": "1687120"
  },
  {
    "text": "consuming part but switching branches is really straightforward let's go back to",
    "start": "1687120",
    "end": "1694679"
  },
  {
    "text": "mine so branching is great we need to be able to Branch so that Alice can fix her",
    "start": "1695440",
    "end": "1700919"
  },
  {
    "text": "bug while I'm working on my feature but branches are pretty pointless unless you can actually converge at some point in",
    "start": "1700919",
    "end": "1707360"
  },
  {
    "text": "time and of course in get that is merging so in our",
    "start": "1707360",
    "end": "1714399"
  },
  {
    "text": "repository if we if we think Look Back to Before I had actually brought Alice's change into mine what happens um is to",
    "start": "1714399",
    "end": "1723480"
  },
  {
    "text": "to figure out how to get these changes in first we have to find the common ancestor and in a centralized Version",
    "start": "1723480",
    "end": "1730080"
  },
  {
    "text": "Control System when you create a branch that information gets stored in some database somewhere um and when you do",
    "start": "1730080",
    "end": "1736000"
  },
  {
    "text": "emerge that information gets recorded too and that and then the centralized system can figure out how these branches",
    "start": "1736000",
    "end": "1742240"
  },
  {
    "text": "diverged over time and where your common ancestor is it's not always easy",
    "start": "1742240",
    "end": "1747519"
  },
  {
    "text": "especially if you have some Advanced merging capabilities to to figure that out in git it's super simple you can",
    "start": "1747519",
    "end": "1753760"
  },
  {
    "text": "look at the graph and see it right Alice's change is there my",
    "start": "1753760",
    "end": "1759240"
  },
  {
    "text": "change is there let's just walk backwards until we find the first Common commit the first commit that we both",
    "start": "1759240",
    "end": "1765440"
  },
  {
    "text": "have in our repository and boom that's our common answer tester easy Once git finds that then it",
    "start": "1765440",
    "end": "1773000"
  },
  {
    "text": "can figure out how to do the merge so it looks at the common ancestor it looks at",
    "start": "1773000",
    "end": "1778039"
  },
  {
    "text": "the files that are inside of them and then it looks at each of the",
    "start": "1778039",
    "end": "1783760"
  },
  {
    "text": "branches and it just just goes straight down the list enumerating them um what",
    "start": "1783760",
    "end": "1789000"
  },
  {
    "text": "file is in my common ancestor has it changed in my Branch okay what about",
    "start": "1789000",
    "end": "1794360"
  },
  {
    "text": "their Branch okay so for files that have changed on one side but not the other it's super easy to just take them you",
    "start": "1794360",
    "end": "1800880"
  },
  {
    "text": "just take the changes if if file one changed on my branch and didn't change on their Branch",
    "start": "1800880",
    "end": "1806679"
  },
  {
    "text": "we'll just take file one into the new repository into the new merge result same with file two over here file four",
    "start": "1806679",
    "end": "1813519"
  },
  {
    "text": "changed on their Branch but not on mine we'll take that file three hasn't changed anywhere it just stays the same",
    "start": "1813519",
    "end": "1820480"
  },
  {
    "text": "so merge is actually very straightforward until you merge this until both uh both branches change the",
    "start": "1820480",
    "end": "1826360"
  },
  {
    "text": "same file that's when it gets a little trickier but at at its root it works the",
    "start": "1826360",
    "end": "1831640"
  },
  {
    "text": "same way you look at the file and the common ancestor you look at the file on each side and you just go line by line",
    "start": "1831640",
    "end": "1839279"
  },
  {
    "text": "did this line change in one branch if so let's take that line did this file",
    "start": "1839279",
    "end": "1845120"
  },
  {
    "text": "change in the other Branch if so let's take that line this works most of the time right",
    "start": "1845120",
    "end": "1850640"
  },
  {
    "text": "this is really pretty naive because if one branch changes uh the way a variable",
    "start": "1850640",
    "end": "1856080"
  },
  {
    "text": "that's declared changes its name but doesn't touch any of the other you know maybe it doesn't change the bottom of",
    "start": "1856080",
    "end": "1861919"
  },
  {
    "text": "the file so it changes the name of a variable and it it updates that variable every time it's used but then somebody",
    "start": "1861919",
    "end": "1868559"
  },
  {
    "text": "in another Branch appends a new function at the very bottom of the file that references the old variable name",
    "start": "1868559",
    "end": "1873639"
  },
  {
    "text": "obviously Auto merge can't sort that out for you it'll take the changes from one branch and it'll take the new use in the",
    "start": "1873639",
    "end": "1880320"
  },
  {
    "text": "other so you still need to check your auto merge when it's done you need to you know run your unit tests and",
    "start": "1880320",
    "end": "1886679"
  },
  {
    "text": "obviously this is just a best practice in devops these days I probably don't need to tell you this um but for the",
    "start": "1886679",
    "end": "1892360"
  },
  {
    "text": "most part Auto merge despite being really naive works really well of course",
    "start": "1892360",
    "end": "1898000"
  },
  {
    "text": "if both people change the same region of a file you'll get a conflict I'm sure",
    "start": "1898000",
    "end": "1903159"
  },
  {
    "text": "we've all seen this um there are good merge tools of course um I like Source Gear diff merge",
    "start": "1903159",
    "end": "1910559"
  },
  {
    "text": "um but you know find a merge tool that you like unless you really like using VI and cleaning up arrows all the time and",
    "start": "1910559",
    "end": "1918279"
  },
  {
    "text": "if you do please do yourself a favor and turn on merge. conflict style diff3",
    "start": "1918279",
    "end": "1923840"
  },
  {
    "text": "because at least you get to see the common ancestor then um it'll provide you a little bit more context when you're suffering in VI trying to figure",
    "start": "1923840",
    "end": "1931000"
  },
  {
    "text": "out how this this file changed and where these conflicts came from okay this is this is actually what",
    "start": "1931000",
    "end": "1937480"
  },
  {
    "text": "I use most of the time is VI yeah whoops",
    "start": "1937480",
    "end": "1942880"
  },
  {
    "text": "um little haveit die hard I guess so once that gets computed once all the",
    "start": "1942880",
    "end": "1947919"
  },
  {
    "text": "miles are Auto merged and the new tree is computed once you've resolved any conflicts when you run git commit what",
    "start": "1947919",
    "end": "1954760"
  },
  {
    "text": "git will do is actually create a commit a new commit with two",
    "start": "1954760",
    "end": "1961080"
  },
  {
    "text": "parents we saw um earlier how um how git encodes the parent in the commit when",
    "start": "1961480",
    "end": "1968360"
  },
  {
    "text": "you do a merge git records two parents let's take a look so let's go back in time to before we had merged Alice's",
    "start": "1968360",
    "end": "1975480"
  },
  {
    "text": "change into our Repository um and I can run get log D-",
    "start": "1975480",
    "end": "1982399"
  },
  {
    "text": "graph-- one line D- decorate and we can see that right now I",
    "start": "1982399",
    "end": "1988440"
  },
  {
    "text": "don't have any of Alice's changes I'm getting really tired of typing git log D- graph-- one line it's super useful um",
    "start": "1988440",
    "end": "1995360"
  },
  {
    "text": "I've got it Alias um get LOL log on line it also comes in handy when you're",
    "start": "1995360",
    "end": "2000720"
  },
  {
    "text": "working in a source tree that doesn't make any sense you get to run get LOL and give yourself a little smile every",
    "start": "2000720",
    "end": "2005919"
  },
  {
    "text": "time you're like what happened in this history um but if I I can also add the branches",
    "start": "2005919",
    "end": "2011880"
  },
  {
    "text": "flag to get log d-1 line uh and I'll see uh all the branches that exist and how",
    "start": "2011880",
    "end": "2017639"
  },
  {
    "text": "they relate to history so I can see right now that Alice's change um is built on Commit 3 and so is mine but we",
    "start": "2017639",
    "end": "2023760"
  },
  {
    "text": "haven't merged it yet um so let's actually do that",
    "start": "2023760",
    "end": "2028679"
  },
  {
    "text": "merge okay like I said I really do spend a lot of time in",
    "start": "2028880",
    "end": "2034360"
  },
  {
    "text": "VI um so once I've done that uh I can run get LOL and boom we've got uh our",
    "start": "2034360",
    "end": "2041840"
  },
  {
    "text": "our branches diverging and then coming back together and if I get cat file commit the new commit we'll just run use",
    "start": "2041840",
    "end": "2049720"
  },
  {
    "text": "head uh I can see I've got two parents so this is actually how git builds this",
    "start": "2049720",
    "end": "2055839"
  },
  {
    "text": "this graph structure right it it starts at head and it starts walking you know",
    "start": "2055839",
    "end": "2061320"
  },
  {
    "text": "finds the Tree finds the commit information rather that um that head refers to and then it opens up the",
    "start": "2061320",
    "end": "2066839"
  },
  {
    "text": "parents and it just keeps walking down that list to build the graph so when I run get log that's actually what it's",
    "start": "2066839",
    "end": "2072560"
  },
  {
    "text": "doing it opens the head file and then keeps going down that list",
    "start": "2072560",
    "end": "2079000"
  },
  {
    "text": "okay um that's the typical merge case you may have seen something called a fast forward merge um this happens",
    "start": "2079000",
    "end": "2085760"
  },
  {
    "start": "2080000",
    "end": "2100000"
  },
  {
    "text": "especially if you um if you only create topic branches off of Master your master stays in sync with um your your server",
    "start": "2085760",
    "end": "2094040"
  },
  {
    "text": "the master on your server um when you run get PLL in that situation from Master you'll see this was a fast",
    "start": "2094040",
    "end": "2100760"
  },
  {
    "start": "2100000",
    "end": "2226000"
  },
  {
    "text": "forward so what does that actually mean if we look at gits graphing we can see that really quickly",
    "start": "2100760",
    "end": "2108200"
  },
  {
    "text": "um let's say uh I'm let's say Alice has made a change here and I haven't made a change right I cloned the git repository",
    "start": "2108200",
    "end": "2114800"
  },
  {
    "text": "I haven't done anything and there's a new commit maybe on the server when I run git merge in this scenario by",
    "start": "2114800",
    "end": "2121440"
  },
  {
    "text": "default it'll be a fast forward all it does is update the pointers",
    "start": "2121440",
    "end": "2128200"
  },
  {
    "text": "uh so again let's go",
    "start": "2129920",
    "end": "2133960"
  },
  {
    "text": "back um and so what we can see now is that if we look at Alice's Branch it's",
    "start": "2137920",
    "end": "2143839"
  },
  {
    "text": "on top my branch is right below it so we have a linear history to Alice right we're not on Alice's Branch yet we don't",
    "start": "2143839",
    "end": "2150079"
  },
  {
    "text": "have any of that change she's uh a commit ahead of us if we just look at our history we'll see that um but what",
    "start": "2150079",
    "end": "2156480"
  },
  {
    "text": "we don't see this time time despite using the Das Das graph is any sort of",
    "start": "2156480",
    "end": "2162480"
  },
  {
    "text": "graphical Divergence because there isn't it's a straight line and so if I run git",
    "start": "2162480",
    "end": "2167520"
  },
  {
    "text": "merge Alice it tells me that it's a fast forward so literally all git has done",
    "start": "2167520",
    "end": "2174680"
  },
  {
    "text": "here is update my Branch to point to the new",
    "start": "2174680",
    "end": "2181880"
  },
  {
    "text": "commit that Alice is on and head of course hasn't changed I'm still on my Branch uh and if I run get log I can see",
    "start": "2181880",
    "end": "2187839"
  },
  {
    "text": "that all it's done is update these pointers so fast forward merges are super efficient in git all it has to do",
    "start": "2187839",
    "end": "2193280"
  },
  {
    "text": "is calculate that it can do it it'll set the new pointer up you can if you don't want a fast forward you can pass a no",
    "start": "2193280",
    "end": "2199720"
  },
  {
    "text": "fast forward option to merge that's that's the way if you've ever seen like maybe GitHub or vsts when",
    "start": "2199720",
    "end": "2206839"
  },
  {
    "text": "you click commit poll request it will turn on that option it will not do a fast forward intentionally so that you",
    "start": "2206839",
    "end": "2212960"
  },
  {
    "text": "can see the information of when the poll request was committed okay so you can",
    "start": "2212960",
    "end": "2218400"
  },
  {
    "text": "turn this off but I don't know why you would it's a great",
    "start": "2218400",
    "end": "2223680"
  },
  {
    "start": "2226000",
    "end": "2660000"
  },
  {
    "text": "feature so that's merging that's the probably the most common way people take",
    "start": "2226599",
    "end": "2231680"
  },
  {
    "text": "two branches and and join them up there's also another feature which is",
    "start": "2231680",
    "end": "2237079"
  },
  {
    "text": "the subject of much much sort of religious debate if you will and that's",
    "start": "2237079",
    "end": "2243000"
  },
  {
    "text": "rebasing um and a lot of people are frightened about rebasing",
    "start": "2243000",
    "end": "2248319"
  },
  {
    "text": "um it's not at its heart it's not all that",
    "start": "2248319",
    "end": "2253680"
  },
  {
    "text": "challenging the idea is and this is where the name comes from you have some",
    "start": "2253680",
    "end": "2258880"
  },
  {
    "text": "commit my commit and I want to integrate it into Alice's but instead of instead",
    "start": "2258880",
    "end": "2264800"
  },
  {
    "text": "of merging it so that I have a new you know a join in the in the graph where I",
    "start": "2264800",
    "end": "2270680"
  },
  {
    "text": "have two parents I want to just pluck this this commit off and I want to base",
    "start": "2270680",
    "end": "2276079"
  },
  {
    "text": "it off of Alice commit I want to change how it exists in history hence the name",
    "start": "2276079",
    "end": "2281839"
  },
  {
    "text": "rebase and at its heart all we do is we again find the common ancestor we find",
    "start": "2281839",
    "end": "2287880"
  },
  {
    "text": "the set of changes that that were uniquely introduced in this commit and",
    "start": "2287880",
    "end": "2293240"
  },
  {
    "text": "we just replay them right on top of Alice's Branch it sounds pretty straightforward",
    "start": "2293240",
    "end": "2300000"
  },
  {
    "text": "it is pretty straightforward um the problem comes when you've got a lot of commits when you've diverged a lot and",
    "start": "2300000",
    "end": "2307119"
  },
  {
    "text": "uh you end up with conflicts you since you're replaying every commit back on top of Alice's Branch you end up trying",
    "start": "2307119",
    "end": "2314640"
  },
  {
    "text": "to solve the same conflicts over and over again um quite often so it's not perfect but in in theory in the graph",
    "start": "2314640",
    "end": "2322400"
  },
  {
    "text": "it's it's really quite straight forward so let's take a look at what that looks like if we had rebased",
    "start": "2322400",
    "end": "2329160"
  },
  {
    "text": "Alice's change instead of merging it",
    "start": "2329160",
    "end": "2333838"
  },
  {
    "text": "okay so yeah we've got Alice's change diverging from our change and uh let's",
    "start": "2338119",
    "end": "2344839"
  },
  {
    "text": "let's do something a little bit different here let's actually um create a conflict so we can see exactly what's",
    "start": "2344839",
    "end": "2351119"
  },
  {
    "text": "going on um we can see by running get diff that Alice has added a new file called alice. text let's also create a",
    "start": "2351119",
    "end": "2358640"
  },
  {
    "text": "file called alice. text we don't have one right now if we look",
    "start": "2358640",
    "end": "2364039"
  },
  {
    "text": "okay so now we've got a file alice. text indeed we will have a conflict let's add it to our",
    "start": "2368720",
    "end": "2375880"
  },
  {
    "text": "repository and rebase so when you when you actually",
    "start": "2377400",
    "end": "2384119"
  },
  {
    "text": "stop and look at the the messages that rebase is giving you it gives some insight into the process first it says",
    "start": "2384119",
    "end": "2389960"
  },
  {
    "text": "applying my change okay so what it's actually done is uh in this case created",
    "start": "2389960",
    "end": "2395240"
  },
  {
    "text": "a patch file um of Alice's uh sorry of my change and if",
    "start": "2395240",
    "end": "2403240"
  },
  {
    "text": "I if we look in our rebase folder we can actually see these patches that get",
    "start": "2403240",
    "end": "2410040"
  },
  {
    "text": "constructed you know I don't I don't think you should never ever need to do this but it does illustrate the way",
    "start": "2410839",
    "end": "2416000"
  },
  {
    "text": "rebase works um it creates a new patch file and then it's going to apply this patch and commit the",
    "start": "2416000",
    "end": "2422079"
  },
  {
    "text": "changes so that is the first commit in the gra in the in the rebase um the",
    "start": "2422079",
    "end": "2427640"
  },
  {
    "text": "second one we introduced are conflicting alice. text file and that's where it stopped if we",
    "start": "2427640",
    "end": "2433119"
  },
  {
    "text": "scroll back up um it tells us that we had an add add",
    "start": "2433119",
    "end": "2440040"
  },
  {
    "text": "conflict so Alice added the file alice. text I also added the file alice. text",
    "start": "2440040",
    "end": "2447520"
  },
  {
    "text": "and so it's just left us in this indeterminate state if I look uh I do",
    "start": "2447520",
    "end": "2453760"
  },
  {
    "text": "have an alice. text and I have both of",
    "start": "2453760",
    "end": "2459240"
  },
  {
    "text": "um both sides with the fun arrows and the conflict markers so at this point I",
    "start": "2459640",
    "end": "2465440"
  },
  {
    "text": "need to uh edit alice. text I'll take both changes and then I",
    "start": "2465440",
    "end": "2472480"
  },
  {
    "text": "can get add and get uh rebase continue if we let's scroll up",
    "start": "2472480",
    "end": "2481400"
  },
  {
    "text": "again we skipped over the the very first line in rebases output it says first",
    "start": "2481599",
    "end": "2487319"
  },
  {
    "text": "rewinding head to replay your work on top of it so what it what it means there is it's taken our head file and it's",
    "start": "2487319",
    "end": "2493880"
  },
  {
    "text": "pointed to uh the the common ancestor sorry it hasn't it's pointed to Alice's",
    "start": "2493880",
    "end": "2499319"
  },
  {
    "text": "change and then we're going to apply each one on top of that and the way it does that instead of checking out",
    "start": "2499319",
    "end": "2505680"
  },
  {
    "text": "Alice's branch is by checking out the actual commit what do I mean by that if I look",
    "start": "2505680",
    "end": "2512760"
  },
  {
    "text": "at my head file I'm not pointing to a branch anymore I'm not not pointing to Alice's",
    "start": "2512760",
    "end": "2518119"
  },
  {
    "text": "Branch I'm pointing straight to a commit ID as if head were just a regular Old Branch this is what a detached head is",
    "start": "2518119",
    "end": "2526800"
  },
  {
    "text": "it's when you somehow have gotten into a state where your head file isn't on a",
    "start": "2526800",
    "end": "2532359"
  },
  {
    "text": "branch anymore you are detached from a branch you are in a detached head state",
    "start": "2532359",
    "end": "2538520"
  },
  {
    "text": "so if I were to just do something crazy like try to get out of this rebase right",
    "start": "2538520",
    "end": "2543680"
  },
  {
    "text": "I've decided that these conflicts are terrible I don't want to deal with them anymore I should have merged instead I want to",
    "start": "2543680",
    "end": "2549599"
  },
  {
    "text": "get out of this the right way to do that is to run get rebase Das Das",
    "start": "2549599",
    "end": "2555079"
  },
  {
    "text": "abort that'll just stop everything and it'll it'll get you back on the branch that you were on to begin with it'll",
    "start": "2555079",
    "end": "2560720"
  },
  {
    "text": "just undo all of this this crazy state if I don't do this if I don't",
    "start": "2560720",
    "end": "2566319"
  },
  {
    "text": "abort my rebase and try to kind of keep going and try to figure out a way to to live life as if I had never gotten into",
    "start": "2566319",
    "end": "2573000"
  },
  {
    "text": "this mess I will still be in a detached head State you can stay in a detached head State um so let's I don't know",
    "start": "2573000",
    "end": "2580960"
  },
  {
    "text": "let's do something crazy in our git repository and",
    "start": "2580960",
    "end": "2586160"
  },
  {
    "text": "uh we're not rebasing anymore we're just blowing away metadata now right so oh my God if I run get status it says",
    "start": "2586160",
    "end": "2593839"
  },
  {
    "text": "head detached and I can I can pretend to keep",
    "start": "2593839",
    "end": "2601280"
  },
  {
    "text": "going and get log seems to work but ultimately I'm not on a branch so don't",
    "start": "2602200",
    "end": "2608680"
  },
  {
    "text": "don't go down this road you can also do this if you check out a commit by its ID and I know this is probably the most",
    "start": "2608680",
    "end": "2614440"
  },
  {
    "text": "common way to do it because checkout is a confusing command there's like four different ways to invoke it um if I just",
    "start": "2614440",
    "end": "2621200"
  },
  {
    "text": "check",
    "start": "2621200",
    "end": "2623440"
  },
  {
    "text": "out sorry let me type that right then you can also get into it attached upsite",
    "start": "2626960",
    "end": "2632040"
  },
  {
    "text": "it's getting better about warning you about what's going on and what this means U But ultimately it's it's still",
    "start": "2632040",
    "end": "2637680"
  },
  {
    "text": "rather easy to get into this case so don't do this stay on a branch always check out",
    "start": "2637680",
    "end": "2643960"
  },
  {
    "text": "branches",
    "start": "2646680",
    "end": "2649680"
  },
  {
    "text": "cool so that's where we ended up",
    "start": "2653240",
    "end": "2658599"
  },
  {
    "text": "right so we've talked a lot about uh the actual dogit folder and what's inside",
    "start": "2659559",
    "end": "2665079"
  },
  {
    "start": "2660000",
    "end": "2894000"
  },
  {
    "text": "what your repository kind of looks like on under the under the hood what we haven't talked about is the way that you",
    "start": "2665079",
    "end": "2671319"
  },
  {
    "text": "tend to actually interact with your git repository on a day-to-day basis you don't spend most of your time in a folder called dogit you spend most of",
    "start": "2671319",
    "end": "2677920"
  },
  {
    "text": "your time with your source code in your working directory and the working directory",
    "start": "2677920",
    "end": "2683240"
  },
  {
    "text": "itself doesn't have much interesting going on about it um I mean your source code of course is interesting but from",
    "start": "2683240",
    "end": "2689400"
  },
  {
    "text": "gits perspective they're just files there and it manages them what's interesting to get is a file called the",
    "start": "2689400",
    "end": "2696520"
  },
  {
    "text": "index that maybe you've heard of it's also it's got three names like everything in git has it's confusingly",
    "start": "2696520",
    "end": "2702559"
  },
  {
    "text": "named it's called the index or the stage or the cash what do these things actually",
    "start": "2702559",
    "end": "2710558"
  },
  {
    "text": "mean so from gets perspective the stage is what's going to be your next",
    "start": "2711400",
    "end": "2718200"
  },
  {
    "text": "commit um if you were to run git commit at that very moment everything in the index would become that next commit and",
    "start": "2718200",
    "end": "2726480"
  },
  {
    "text": "again get doesn't store differences it doesn't store how your files changed from commit to commit it stores a",
    "start": "2726480",
    "end": "2733640"
  },
  {
    "text": "snapshot of the commit and you can run get diff to figure out how things changed but it's a snapshot and just",
    "start": "2733640",
    "end": "2739640"
  },
  {
    "text": "like a commit is a snapshot the staging area is a snapshot",
    "start": "2739640",
    "end": "2745400"
  },
  {
    "text": "so when you run get ad it puts files into the index when you run get RM it removes files from the index and",
    "start": "2745400",
    "end": "2752520"
  },
  {
    "text": "otherwise everything in the index is what's going to be committed",
    "start": "2752520",
    "end": "2758680"
  },
  {
    "text": "so I can so remember LS3 that's what told us",
    "start": "2758680",
    "end": "2763800"
  },
  {
    "text": "what is in our here I'll put this on top so it's easier to see we used get LS3 to tell us what was",
    "start": "2763800",
    "end": "2772000"
  },
  {
    "text": "in the tree at a specific time I can pass head to it and it'll tell me what's in my what's in head right now what's in",
    "start": "2772000",
    "end": "2779920"
  },
  {
    "text": "my repository that was checked in at the last commit and if I run get s St you'll see",
    "start": "2779920",
    "end": "2787520"
  },
  {
    "text": "that I haven't changed anything in my working directory I can also run get LS files-- stage and it'll tell me what's",
    "start": "2787520",
    "end": "2794960"
  },
  {
    "text": "in the staging area what's in my index and they're identical at this",
    "start": "2794960",
    "end": "2800119"
  },
  {
    "text": "point because I haven't made any changes my status is clean so you'll see that",
    "start": "2800119",
    "end": "2805800"
  },
  {
    "text": "all those files exist in both places and they're at the same IDs okay so what gets actually doing is",
    "start": "2805800",
    "end": "2812040"
  },
  {
    "text": "just diffing these two things to show me status and if I make a change to a",
    "start": "2812040",
    "end": "2818599"
  },
  {
    "text": "file I wasn't suitably excited when I wrote this file let's change that to an exclamation",
    "start": "2818599",
    "end": "2824838"
  },
  {
    "text": "point uh and if I run get add we can look at the staging",
    "start": "2824960",
    "end": "2831720"
  },
  {
    "text": "area and file 3. text now has a new ID",
    "start": "2831720",
    "end": "2837280"
  },
  {
    "text": "so when I ran get ad it's actually Computing the ID of the new file and",
    "start": "2837280",
    "end": "2842480"
  },
  {
    "text": "putting that new ID into the index and if I run get status it will actually",
    "start": "2842480",
    "end": "2848760"
  },
  {
    "text": "compare what's in head to what's in my index and that's how it determines what",
    "start": "2848760",
    "end": "2854040"
  },
  {
    "text": "I've",
    "start": "2854040",
    "end": "2856400"
  },
  {
    "text": "modified and now once I run get commit I can run get sorry LS tree head and it's",
    "start": "2862000",
    "end": "2869359"
  },
  {
    "text": "updated head now with that new commit so um if I want to see what's changed",
    "start": "2869359",
    "end": "2875640"
  },
  {
    "text": "between my my current version and my previous commit I can run get diff what that's",
    "start": "2875640",
    "end": "2882880"
  },
  {
    "text": "going to do is inspect the trees find the file three has a different ID in one",
    "start": "2882880",
    "end": "2888040"
  },
  {
    "text": "and just show me that difference so git actually does store in",
    "start": "2888040",
    "end": "2895559"
  },
  {
    "text": "the index a whole snapshot of the files that will be committed and when you run get status",
    "start": "2895559",
    "end": "2902559"
  },
  {
    "text": "it's actually comparing everything so it Compares what's in the working directory",
    "start": "2902559",
    "end": "2908200"
  },
  {
    "text": "to what's in the index and those are your unstaged changes those are the changes that you've made that you",
    "start": "2908200",
    "end": "2913240"
  },
  {
    "text": "haven't yet run get addon and if you ran get commit those would just stay behind right because the index is what will be",
    "start": "2913240",
    "end": "2919839"
  },
  {
    "text": "the next commit if I compare my index to my head those are my stage changes those",
    "start": "2919839",
    "end": "2925040"
  },
  {
    "text": "are the things that I've run get ad and get RM on and those will be the next",
    "start": "2925040",
    "end": "2930400"
  },
  {
    "text": "commit so G just basically is a big diff engine it just diffs everything against",
    "start": "2930400",
    "end": "2935599"
  },
  {
    "text": "everything to show you what's going on um and especially when it comes to the working directory that sounds really",
    "start": "2935599",
    "end": "2942079"
  },
  {
    "text": "inefficient right I've I've got to crawl the entire working directory comparing it to what's in the index to tell me",
    "start": "2942079",
    "end": "2948160"
  },
  {
    "text": "what's unstaged that is where the index gets its other name the",
    "start": "2948160",
    "end": "2953960"
  },
  {
    "text": "cache so what actually is stored in the index is metadata about what's in the",
    "start": "2953960",
    "end": "2959720"
  },
  {
    "start": "2954000",
    "end": "3164000"
  },
  {
    "text": "working directory and that allows G to not have to open every single file and compare it to the index CU remember the",
    "start": "2959720",
    "end": "2966480"
  },
  {
    "text": "index just has the the shaw one of The Blob and so to do a comparison against",
    "start": "2966480",
    "end": "2973000"
  },
  {
    "text": "that you would have to Shaw one your entire working directory that sounds terrible and in fact it it is and that's",
    "start": "2973000",
    "end": "2980079"
  },
  {
    "text": "not at all what git does that's what allows it to stay fast um we used LS files-- stage before",
    "start": "2980079",
    "end": "2988359"
  },
  {
    "text": "to show us what's in the index we can show use LS files-- debug and that will",
    "start": "2988359",
    "end": "2994319"
  },
  {
    "text": "actually show us all of the bits um that are stored inside the index for every",
    "start": "2994319",
    "end": "2999880"
  },
  {
    "text": "file and you'll see things like C time and M time you'll see the inode number",
    "start": "2999880",
    "end": "3004960"
  },
  {
    "text": "you'll see the size of the file so what git can do is just open",
    "start": "3004960",
    "end": "3011440"
  },
  {
    "text": "your your working directory and it can compare the Tim stamp that it's got in",
    "start": "3011440",
    "end": "3017200"
  },
  {
    "text": "the index against the time stamp that it has uh on disk and if that time stamp",
    "start": "3017200",
    "end": "3023119"
  },
  {
    "text": "hasn't changed if the size hasn't changed the iode number hasn't changed nothing has changed git can just skip it",
    "start": "3023119",
    "end": "3030240"
  },
  {
    "text": "it will know that you don't have any unstaged change there so it can just keep going doesn't have to actually open",
    "start": "3030240",
    "end": "3037559"
  },
  {
    "text": "the file or calculate it if I change the",
    "start": "3037559",
    "end": "3042440"
  },
  {
    "text": "timestamp and I don't actually uh change the file so now file 1. text has a new",
    "start": "3042640",
    "end": "3049559"
  },
  {
    "text": "timestamp from what it had before uh now git will actually have to open up the file hash it see if it's changed and and",
    "start": "3049559",
    "end": "3057520"
  },
  {
    "text": "actually do the comparison against the index but until I do that until I make some change git can just skip right over",
    "start": "3057520",
    "end": "3064839"
  },
  {
    "text": "it it's really handy um one thing that you tend to do so when",
    "start": "3064839",
    "end": "3073440"
  },
  {
    "text": "you run get ad you add a file to the",
    "start": "3073440",
    "end": "3077119"
  },
  {
    "text": "index um so right now I'm at 5 C11 and I'm",
    "start": "3080440",
    "end": "3086839"
  },
  {
    "text": "I haven't actually made a change um so if I make a change and add",
    "start": "3086839",
    "end": "3092240"
  },
  {
    "text": "it one thing that you can do is if I run get add so it's going to Hash this and",
    "start": "3096880",
    "end": "3102079"
  },
  {
    "text": "get's not going to go bother hashing the file to get the ID and not also save a copy right so when you run get commit",
    "start": "3102079",
    "end": "3109640"
  },
  {
    "text": "it's already prepared all the objects that it'll store it just writes a new commit",
    "start": "3109640",
    "end": "3116319"
  },
  {
    "text": "and if I run LS files-- stage I can see that new ID it's O e2f",
    "start": "3117280",
    "end": "3123240"
  },
  {
    "text": "744 the thing",
    "start": "3123240",
    "end": "3126839"
  },
  {
    "text": "is what happens if I run get ad again that file is gone now right it's",
    "start": "3129760",
    "end": "3137200"
  },
  {
    "text": "not in my working directory for sure if I run LS files-- stage file one.",
    "start": "3137200",
    "end": "3144319"
  },
  {
    "text": "text is at a new ID what happened to Z",
    "start": "3144319",
    "end": "3150359"
  },
  {
    "text": "e2f so it turns out that this is now garbage in the get lexicon and eventually get will garbage collect it",
    "start": "3151119",
    "end": "3158119"
  },
  {
    "text": "but until it does it's still in my it's still in my object database if only I",
    "start": "3158119",
    "end": "3163599"
  },
  {
    "text": "had a way to get to it there is uh I actually just whipped this up the last time I I gave this talk",
    "start": "3163599",
    "end": "3169920"
  },
  {
    "start": "3164000",
    "end": "3304000"
  },
  {
    "text": "somebody asked well what happens to those files and I said well I guess you could figure out a way to get them um",
    "start": "3169920",
    "end": "3175559"
  },
  {
    "text": "and so finally I I came up with a little script it's called get recover if you",
    "start": "3175559",
    "end": "3181040"
  },
  {
    "text": "run get recover uh it will show you the garbage that you've recently added to your repository but that isn't there",
    "start": "3181040",
    "end": "3186799"
  },
  {
    "text": "anymore so it'll find the unreferenced blobs the unreferenced objects and show them to you and allow you to recover",
    "start": "3186799",
    "end": "3192880"
  },
  {
    "text": "them it's like if you're old like me you might remember Norton unerase it's like that for dos only for your git",
    "start": "3192880",
    "end": "3201319"
  },
  {
    "text": "repository uh so I can run get recover and it'll show me all the",
    "start": "3201319",
    "end": "3208040"
  },
  {
    "text": "recently uh changed files um that are no longer in my G repository um and it",
    "start": "3208040",
    "end": "3213240"
  },
  {
    "text": "sorts them in date order so I'm guessing that the one on top is that file that I just",
    "start": "3213240",
    "end": "3220760"
  },
  {
    "text": "added if I type it's ID WR 0 e2f 744 oh right sorry get cat file",
    "start": "3220760",
    "end": "3230000"
  },
  {
    "text": "blob right so that's the change that I didn't in fact lose it's still hanging",
    "start": "3230000",
    "end": "3235160"
  },
  {
    "text": "out in my object database um and I can get recover",
    "start": "3235160",
    "end": "3240720"
  },
  {
    "text": "it and it will just put it on dis for me so I can get these files back after I",
    "start": "3240720",
    "end": "3246480"
  },
  {
    "text": "thought I'd lost them I can also uh use a quick interactive mode and it'll just show me",
    "start": "3246480",
    "end": "3252799"
  },
  {
    "text": "all of the changes um that I've made that I run get add on and that I don't",
    "start": "3252799",
    "end": "3259119"
  },
  {
    "text": "have currently pointing through by a commit so you can get your lost blobs back really easily no I don't want that",
    "start": "3259119",
    "end": "3265599"
  },
  {
    "text": "one and let's take that one and it'll it'll just write it to disk so super",
    "start": "3265599",
    "end": "3270839"
  },
  {
    "text": "straightforward um nice way to uh to be able to recover things that you've lost",
    "start": "3270839",
    "end": "3276559"
  },
  {
    "text": "so just run remember to run get add on things you know the the Mantra of git is",
    "start": "3276559",
    "end": "3282520"
  },
  {
    "text": "commit often but even more so add often if you're ever at a at a point where you",
    "start": "3282520",
    "end": "3287880"
  },
  {
    "text": "have a snapshot of a change that you want to save run get ad on it it'll throw it in the object database you can",
    "start": "3287880",
    "end": "3293799"
  },
  {
    "text": "come back and get it later if you if you need it",
    "start": "3293799",
    "end": "3298318"
  },
  {
    "text": "okay cool uh so remember the git commands are",
    "start": "3299400",
    "end": "3306160"
  },
  {
    "start": "3304000",
    "end": "3599000"
  },
  {
    "text": "really just a simple abstraction over the data storage mechanism so once you",
    "start": "3306160",
    "end": "3312760"
  },
  {
    "text": "understand how that data storage mechanism works you can be much more effective using git all of a sudden when you have to type head in all caps now",
    "start": "3312760",
    "end": "3320200"
  },
  {
    "text": "you'll know why um it'll give you a lot of insight into the way it works um I I",
    "start": "3320200",
    "end": "3326440"
  },
  {
    "text": "think I've still got five minutes uh are there any questions and went up quick yeah",
    "start": "3326440",
    "end": "3334920"
  },
  {
    "text": "show thing with when you get how does that compare to stash oh so the question",
    "start": "3334920",
    "end": "3341839"
  },
  {
    "text": "was how does get ad compared to get stash that is a great question so what stash actually does so I I'm not a stash",
    "start": "3341839",
    "end": "3349799"
  },
  {
    "text": "user so I may screw this all up we'll see um so what get stash actually does",
    "start": "3349799",
    "end": "3355799"
  },
  {
    "text": "is it takes a copy of the index and creates a commit from it but it doesn't put it in the graph right it doesn't",
    "start": "3355799",
    "end": "3361079"
  },
  {
    "text": "create a new Branch it actually stows it away in a file called uh stashes so uh",
    "start": "3361079",
    "end": "3366920"
  },
  {
    "text": "let's see file one. text make a change get add it um I don't",
    "start": "3366920",
    "end": "3374559"
  },
  {
    "text": "have to add everything to my stashes because I can stash uh unstaged changes",
    "start": "3374559",
    "end": "3379880"
  },
  {
    "text": "as well which is kind of a clever feature so let's call it new file",
    "start": "3379880",
    "end": "3386200"
  },
  {
    "text": "get status okay so now I've got oh and in fact I had that recovered garbage uh",
    "start": "3387640",
    "end": "3393240"
  },
  {
    "text": "from before um so I've got a couple of files that are unstaged I've got one file that is staged uh yeah I'm sorry I I've got to",
    "start": "3393240",
    "end": "3401960"
  },
  {
    "text": "read the man page on this one uh there I know there's a way to create",
    "start": "3401960",
    "end": "3409240"
  },
  {
    "text": "a stage with aha include untracked so I can get",
    "start": "3409240",
    "end": "3416280"
  },
  {
    "text": "Dash save D- include untracked uh and what's happened is that",
    "start": "3416280",
    "end": "3423000"
  },
  {
    "text": "git has now cleaned up my changes so I can use the stash command um if I am",
    "start": "3423000",
    "end": "3429079"
  },
  {
    "text": "ready to if I'm if I'm working on something I get interrupted uh and I need to make some",
    "start": "3429079",
    "end": "3435079"
  },
  {
    "text": "critical bug fix but I don't want to lose what I was working on one thing you can do is just run get commit uh on your",
    "start": "3435079",
    "end": "3440599"
  },
  {
    "text": "branch that is almost always what I do instead but you can also run get stash it's just which one you prefer um what",
    "start": "3440599",
    "end": "3448520"
  },
  {
    "text": "get actually has done here if we go into the git directory",
    "start": "3448520",
    "end": "3455160"
  },
  {
    "text": "uh now we have a get ref's stash it's not get ref's heads that was our our",
    "start": "3456520",
    "end": "3462640"
  },
  {
    "text": "branches we've got to get ref's stash and so it's made a special commit",
    "start": "3462640",
    "end": "3469319"
  },
  {
    "text": "for us um that has multiple parents even though it's not a merge it uses the",
    "start": "3469319",
    "end": "3475280"
  },
  {
    "text": "parents to figure out what was unstaged what was staged and what the the true",
    "start": "3475280",
    "end": "3480359"
  },
  {
    "text": "parent of our commit would have been",
    "start": "3480359",
    "end": "3485240"
  },
  {
    "text": "um uh so we see things like that that's our true",
    "start": "3487760",
    "end": "3493680"
  },
  {
    "text": "parent uh and then it's made this sort of we call it a synthetic commit um and",
    "start": "3493680",
    "end": "3499039"
  },
  {
    "text": "it's it stay uh keeps the actual contents of the index as it was when I",
    "start": "3499039",
    "end": "3504640"
  },
  {
    "text": "ran get stash um and I can even look at",
    "start": "3504640",
    "end": "3510440"
  },
  {
    "text": "that uh and I'll see this should be my stage",
    "start": "3510440",
    "end": "3517400"
  },
  {
    "text": "changes yep so file 1. text is actually different it has a different blob ID took me a while to actually find that um",
    "start": "3521839",
    "end": "3528799"
  },
  {
    "text": "and so if I unstash what will happen is it will take this tree and turn it into my index and put anything that was uh",
    "start": "3528799",
    "end": "3536200"
  },
  {
    "text": "the untracked files list which is the other tree that's up there uh it'll put that",
    "start": "3536200",
    "end": "3542400"
  },
  {
    "text": "back on disk get stash Pop I think yep",
    "start": "3542400",
    "end": "3549559"
  },
  {
    "text": "wow uh I'm surprised I got that right to tell you the truth um so yeah so stash",
    "start": "3549559",
    "end": "3554720"
  },
  {
    "text": "uh is a little bit different it is uh kind of a a you know like I said it's",
    "start": "3554720",
    "end": "3560599"
  },
  {
    "text": "not something I actually use I think the best practice is just to create commits on branches and then you can switch back",
    "start": "3560599",
    "end": "3566520"
  },
  {
    "text": "and forth between those branches um but you can't commit untracked files that's",
    "start": "3566520",
    "end": "3571760"
  },
  {
    "text": "the advantage the big Advantage I see to stash so um I don't want to keep you all",
    "start": "3571760",
    "end": "3578880"
  },
  {
    "text": "I'm actually out of time if you do have other questions uh I am super happy to answer them I get a sick pleasure out of",
    "start": "3578880",
    "end": "3586319"
  },
  {
    "text": "talking about Git it turns out um you can find me on Twitter I'm that's the best way to reach me I'm at e Thompson",
    "start": "3586319",
    "end": "3594079"
  },
  {
    "text": "um I'll also be at the Microsoft Booth right after this um you can you can grab",
    "start": "3594079",
    "end": "3600559"
  },
  {
    "text": "a a shiny git sticker or a git for Windows sticker even more shiny um so",
    "start": "3600559",
    "end": "3607640"
  },
  {
    "text": "yeah grab a sticker or ask me questions I'll be at the Microsoft Booth so thanks so much I appreciate you coming out",
    "start": "3607640",
    "end": "3616440"
  }
]