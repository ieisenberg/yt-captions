[
  {
    "text": "on are you on I think I'm on yeah hello hi friends how are",
    "start": "6279",
    "end": "13719"
  },
  {
    "text": "you I was very lame for bun of Australians must have been a drinking party last night cool uh thanks for",
    "start": "13719",
    "end": "21320"
  },
  {
    "text": "coming by uh this is called playby play this is something that I think Rob conry",
    "start": "21320",
    "end": "26679"
  },
  {
    "text": "uh kind of started uh we were going to have actually a slightly larger panel uh we're going to try to get Rachel ree to",
    "start": "26679",
    "end": "32238"
  },
  {
    "text": "join us she's off doing fshp at an FP Meetup uh so you're going to have to uh",
    "start": "32239",
    "end": "38280"
  },
  {
    "text": "settle on John Ski who uh happens to be uh what is this this is your over is",
    "start": "38280",
    "end": "46160"
  },
  {
    "text": "my profile page profile page you have a meager uh 884 th000 reputation putting",
    "start": "46160",
    "end": "52280"
  },
  {
    "text": "you as the number one contributor on stack Overflow if you died God forbid",
    "start": "52280",
    "end": "58800"
  },
  {
    "text": "how many years would you Remain the top person on stack Overflow as a des a corpse uh so I think I would probably",
    "start": "58800",
    "end": "66000"
  },
  {
    "text": "hit the rep cap during the week you would still be hitting the reputation cap while Dead uh for a while at least",
    "start": "66000",
    "end": "72920"
  },
  {
    "text": "yeah dur during the week um so yeah I get a load of votes even if I don't post",
    "start": "72920",
    "end": "78159"
  },
  {
    "text": "stuff because I have a lot of old I've got 33,000 answers so that kind of gets",
    "start": "78159",
    "end": "83840"
  },
  {
    "text": "you've lapped everyone else you're basic you look far behind but you've actually got in Mario Kart your several",
    "start": "83840",
    "end": "90040"
  },
  {
    "text": "Labs ahead already I I think over the weekends within a year I wouldn't rep cap that is brilliant but I've I've",
    "start": "90040",
    "end": "96159"
  },
  {
    "text": "certainly hit the rep cap every day since June 2010 excellent so I would encourage you to go out and Google for",
    "start": "96159",
    "end": "103320"
  },
  {
    "text": "Scott John Ski uh uh jokes facts facts John Ski facts yeah um you know you're",
    "start": "103320",
    "end": "110439"
  },
  {
    "text": "familiar with Chuck Norris right our greatest American hero uh yeah there we",
    "start": "110439",
    "end": "115560"
  },
  {
    "text": "go Chuck Norris is one of those great Heroes where they tell jokes like you know when when Chuck Norris does his",
    "start": "115560",
    "end": "121280"
  },
  {
    "text": "push-ups he's not pushing himself up he's pushing the Earth down there are a series of those around",
    "start": "121280",
    "end": "128640"
  },
  {
    "text": "John SK as well these ones I wrote users do not",
    "start": "128640",
    "end": "136040"
  },
  {
    "text": "Mark John sk's Answer says accepted the universe accepts them out of a sense of",
    "start": "136040",
    "end": "142319"
  },
  {
    "text": "justice I think we should switch to K Scott so K Scott changed his name to",
    "start": "143480",
    "end": "148920"
  },
  {
    "text": "Scott to be successful in the Microsoft World a number of years ago but it turns out that it's worked",
    "start": "148920",
    "end": "155480"
  },
  {
    "text": "out really great for him because he is a top plural site author and the author of",
    "start": "155480",
    "end": "160519"
  },
  {
    "text": "a very popular blog called o to code and many of us learned asp.net from o to",
    "start": "160519",
    "end": "166440"
  },
  {
    "text": "code and from K Scott Allen so big round of applause for John Ski and K Scott",
    "start": "166440",
    "end": "173400"
  },
  {
    "text": "Allen definitely go and check out their stuff as well as uh great uh was it an article or was an ebook on the on what",
    "start": "176319",
    "end": "182680"
  },
  {
    "text": "you need to know about ecmascript that you did yes uh ebook it's ebook basically just for the Kindle so a",
    "start": "182680",
    "end": "188959"
  },
  {
    "text": "Kindle book that he recently did on what every developer needs to know about ecmascript so check that out okay so the",
    "start": "188959",
    "end": "194920"
  },
  {
    "text": "idea here is that Rob connory who is who's usually the the person that plays my role uh goes to stack Overflow and",
    "start": "194920",
    "end": "202319"
  },
  {
    "text": "picks hard questions and then asks these kind people on the panel uh to answer",
    "start": "202319",
    "end": "209360"
  },
  {
    "text": "those question questions and what they think about them so uh and then wackiness ensues so we have a whole",
    "start": "209360",
    "end": "216080"
  },
  {
    "text": "series of questions why don't we bring up the uh the first question and we'll see how each of these individuals go",
    "start": "216080",
    "end": "221159"
  },
  {
    "text": "ahead and zoom in on that real tight okay little light reading for us here so what is the difference between running I",
    "start": "221159",
    "end": "228439"
  },
  {
    "text": "queriable of t uh versus I enumerable of T and then there's a very nicely written",
    "start": "228439",
    "end": "235319"
  },
  {
    "text": "uh example there and will both include deferred execution right there's that thing in l where it doesn't really",
    "start": "235319",
    "end": "240799"
  },
  {
    "text": "happen until it happens there's a bit of a schinger cat aspect to link that can be a little bit confusing uh who wants",
    "start": "240799",
    "end": "246480"
  },
  {
    "text": "to go first can I go first with a a change to the question I'm not actually I'll edit this I won't you're going to",
    "start": "246480",
    "end": "252439"
  },
  {
    "text": "actually edit the highly voted question just to show you that's exactly",
    "start": "252439",
    "end": "258400"
  },
  {
    "text": "how I wanted to start this show was you just going into admin mode on stack Overflow going actually the question is",
    "start": "258400",
    "end": "268240"
  },
  {
    "text": "wrong the question is right but uh this is not how you should write either of",
    "start": "268240",
    "end": "273880"
  },
  {
    "text": "these queries basically um so this is these are written as query expressions in C introduced in C 3 um and you know",
    "start": "273880",
    "end": "282560"
  },
  {
    "text": "that's three lines long and the equivalent of the first one I love that you're doing it in a text box without",
    "start": "282560",
    "end": "288720"
  },
  {
    "text": "syntax highlighting thereby increasing the",
    "start": "288720",
    "end": "293360"
  },
  {
    "text": "legend one of the great things about C about stack Overflow is you get much better at being able to write code that",
    "start": "294400",
    "end": "301520"
  },
  {
    "text": "will just work first time really without yeah I sometimes there are typos what is the little thingy the little thingy that",
    "start": "301520",
    "end": "307400"
  },
  {
    "text": "goes C and then an arrow is that an Anders operator or what is that called Lambda expression that's called a Lambda",
    "start": "307400",
    "end": "312560"
  },
  {
    "text": "a Lambda expression here it's not a Lambda expression if you have C 6 stuff if you have",
    "start": "312560",
    "end": "320479"
  },
  {
    "text": "uh um so say we were in write a whole app",
    "start": "320479",
    "end": "326639"
  },
  {
    "text": "here uh is that called a hash rocket or is that another thing no idea about you heard of",
    "start": "327800",
    "end": "334720"
  },
  {
    "text": "a hash rocket I think that's a thing that may be a completely different thing how do you pronounce that public bull is",
    "start": "334720",
    "end": "339759"
  },
  {
    "text": "even length blah blah blah so I would just say goes to or goes to me it's you",
    "start": "339759",
    "end": "345360"
  },
  {
    "text": "take but importantly this is not a Lambda expression it's the same uh same",
    "start": "345360",
    "end": "350800"
  },
  {
    "text": "syntax as for lambdas and likewise if we did public bull equals oh is that a",
    "start": "350800",
    "end": "356199"
  },
  {
    "text": "shortcut for curly curly braces and stuff um yeah it's a shortcut for curly",
    "start": "356199",
    "end": "361479"
  },
  {
    "text": "braces with a return so um X as string for example all right cool just they look",
    "start": "361479",
    "end": "368599"
  },
  {
    "text": "the same they they're different based on Contex yeah so Lambda expressions are for delegates and expression trees and",
    "start": "368599",
    "end": "376000"
  },
  {
    "text": "this is really just a shortcut a short hand for declaring a property or declaring a but we all know though that",
    "start": "376000",
    "end": "381400"
  },
  {
    "text": "if you do that in your code it makes you look smarter to your co-workers so you say that but it's actually true um so",
    "start": "381400",
    "end": "391560"
  },
  {
    "text": "hang on I just want so you said that slightly fous the way you said that was",
    "start": "392360",
    "end": "397400"
  },
  {
    "text": "that you said that we thought it was going to be wrong but it actually is",
    "start": "397400",
    "end": "402479"
  },
  {
    "text": "true I think that's a kind of a compliment you said that jokingly and",
    "start": "402479",
    "end": "408360"
  },
  {
    "text": "yet it is true so um when I was looking at C 6 for the first time uh with no",
    "start": "408360",
    "end": "413960"
  },
  {
    "text": "time I'm going to let you say something soon h i uh I I went through ice cream",
    "start": "413960",
    "end": "420960"
  },
  {
    "text": "delivered I went through and found everywhere that I could use expression body members and got rid of half of the",
    "start": "420960",
    "end": "426800"
  },
  {
    "text": "return stat expression body expression bodied members that was a Beyonce",
    "start": "426800",
    "end": "432360"
  },
  {
    "text": "Single uh this is uh this is an expression and it's the entire body of",
    "start": "432360",
    "end": "437560"
  },
  {
    "text": "the member which is a property here and a method here um so that's why it's called expression bodied members um so I",
    "start": "437560",
    "end": "444319"
  },
  {
    "text": "got rid of everywhere that I could that had a return statement in not time and about half of my properties and methods",
    "start": "444319",
    "end": "450840"
  },
  {
    "text": "I managed to make expression body members and the great thing is it makes you feel like a functional programmer",
    "start": "450840",
    "end": "457120"
  },
  {
    "text": "and this is why yeah this looks like I'm glad Rachel Reese is not here to call you out on that indeed bold statement",
    "start": "457120",
    "end": "463560"
  },
  {
    "text": "this feels like it's hcll now honest um but no it it makes it feel a bit more",
    "start": "463560",
    "end": "469360"
  },
  {
    "text": "functional and if you're a fan of functional programing but still writing C rather than F shop it just it feels a",
    "start": "469360",
    "end": "475199"
  },
  {
    "text": "bit better okay so that's hence the it it looks a bit smarter okay so delete",
    "start": "475199",
    "end": "480360"
  },
  {
    "text": "those go back to judging the person that wrote the so those are wrong the these",
    "start": "480360",
    "end": "485919"
  },
  {
    "text": "are these are a waste of space when you could just use um you know dot notation",
    "start": "485919",
    "end": "492159"
  },
  {
    "text": "people call it or Lambda notation these these compiled to exactly the same code but I find those to be kind of cooler",
    "start": "492159",
    "end": "498120"
  },
  {
    "text": "because it feels like you switched into another world and you're writing SQL but not right so there's there's nothing",
    "start": "498120",
    "end": "504199"
  },
  {
    "text": "actually wrong with it it's just it feels a bit of a waste um if you just have a wear or just a select or even",
    "start": "504199",
    "end": "511520"
  },
  {
    "text": "awar and a select I would typically use uh this notation okay as soon as you use",
    "start": "511520",
    "end": "516719"
  },
  {
    "text": "joins or let uh let Clauses or anything that uses what's called a transparent",
    "start": "516719",
    "end": "523200"
  },
  {
    "text": "identifier um where the the compiler starts building up Anonymous types for",
    "start": "523200",
    "end": "528360"
  },
  {
    "text": "you and doing cunning stuff so that you can have multiple this is called a range variable okay if we anytime you have",
    "start": "528360",
    "end": "535279"
  },
  {
    "text": "multiple range variables in scope at the same time usually from joins also from you know",
    "start": "535279",
    "end": "540720"
  },
  {
    "text": "from J in db. jobs um you know the compiler is doing",
    "start": "540720",
    "end": "546839"
  },
  {
    "text": "stuff so you can access C and J at the same time even though it's one sequence",
    "start": "546839",
    "end": "551880"
  },
  {
    "text": "um at that point it's a pain if you're doing it in undere expression format it all works because the compiler is just",
    "start": "551880",
    "end": "558079"
  },
  {
    "text": "doing a syntactic transformation from this to the other format um but it's",
    "start": "558079",
    "end": "564320"
  },
  {
    "text": "definitely worth being familiar with link in both notations okay so you you draw like that it makes a better",
    "start": "564320",
    "end": "570839"
  },
  {
    "text": "question so now I'll just cancel this what is the difference right so back to I quable and",
    "start": "570839",
    "end": "576720"
  },
  {
    "text": "I numerable why don't you take it from here okay okay switch we brought this uh",
    "start": "576720",
    "end": "583040"
  },
  {
    "text": "this main frame here to uh help us understand John Ski it's",
    "start": "583040",
    "end": "589480"
  },
  {
    "text": "Advanced the first thing I want to do is drill into what is the difference between I enumerable and I quable really",
    "start": "589480",
    "end": "597079"
  },
  {
    "text": "and so let me back up for a second I have once I zoom out some movies here",
    "start": "597079",
    "end": "603240"
  },
  {
    "text": "that are from an i inumerable data source an i inumerable data source just being a list of movies and I just want",
    "start": "603240",
    "end": "609200"
  },
  {
    "text": "to show you how the link operators work two good movies two good movie well yeah I threw that one in and then swordfish",
    "start": "609200",
    "end": "614959"
  },
  {
    "text": "because very glad you said that thank you I I knew you had blogged about it years ago as one of those movies that",
    "start": "614959",
    "end": "620959"
  },
  {
    "text": "had questionable technology in it it was not Mr Robot let's just",
    "start": "620959",
    "end": "626279"
  },
  {
    "text": "say if I can get this on the screen what I'm trying to show you is that the link extension methods the link operators",
    "start": "627000",
    "end": "632959"
  },
  {
    "text": "they're composed of a series of extension methods that are extension methods for either I inumerable of t or",
    "start": "632959",
    "end": "638880"
  },
  {
    "text": "I queriable of T So if I have an i something that's an i inumerable data source and I go up and do a DOT on it",
    "start": "638880",
    "end": "645360"
  },
  {
    "text": "trying to get this all on the screen at once there you go that looks okay we can see that uh I'm working against",
    "start": "645360",
    "end": "650480"
  },
  {
    "text": "something that takes a funk of t- source and int or sorry let's do the first one",
    "start": "650480",
    "end": "655880"
  },
  {
    "text": "a funk of t- source and returns a bull so basically the we operator I to take some incoming Source return a",
    "start": "655880",
    "end": "662240"
  },
  {
    "text": "bull from that function has to return a bull and then the wear operator itself returns an i inumerable and just to",
    "start": "662240",
    "end": "668440"
  },
  {
    "text": "switch that over real quick that was really confusing by the way yeah well I I'll make this more",
    "start": "668440",
    "end": "673519"
  },
  {
    "text": "concrete the important part here is that if I go to movies and make them queriable so this is kind of magically",
    "start": "673519",
    "end": "680200"
  },
  {
    "text": "making them queryable for a second so you're looking to be clear I make sure I understand cuz I don't understand you",
    "start": "680200",
    "end": "685720"
  },
  {
    "text": "were looking at an i enumerable thing yes and then you were looking at the wear and what wear needed we being an",
    "start": "685720",
    "end": "691480"
  },
  {
    "text": "extension method that gets spot welded onto an i numerable and now you're looking at the same wear on I queriable",
    "start": "691480",
    "end": "698480"
  },
  {
    "text": "and I noticed that it's got more stuff more stuff and the most important part part here to notice is that now I no",
    "start": "698480",
    "end": "705680"
  },
  {
    "text": "longer take I can no longer take just a funk of tsource and bu I can take an expression of funk and that's the key",
    "start": "705680",
    "end": "712519"
  },
  {
    "text": "part it's Funk versus expression of funk that's one of the key differences between I inumerable and I queriable you",
    "start": "712519",
    "end": "719639"
  },
  {
    "text": "say funk I don't feel smart yeah well so let me let me show you a funk is a type let's do this let's",
    "start": "719639",
    "end": "729000"
  },
  {
    "text": "run some code if I build a funk I just need to know if it's okay to not feel smart or if I need to know this funk was",
    "start": "729000",
    "end": "734680"
  },
  {
    "text": "introduced to C is an easy way to um describe a delegate so Funk takes from 1",
    "start": "734680",
    "end": "740480"
  },
  {
    "text": "to 16 generic type parameters M so the intellisense is beautiful right but",
    "start": "740480",
    "end": "745920"
  },
  {
    "text": "basically with the fun you're talking about yeah that seems way better generic type",
    "start": "745920",
    "end": "751199"
  },
  {
    "text": "parameters any type that's so I'm going to declare a variable that's going to point to a method let's call it Fu the",
    "start": "751199",
    "end": "757720"
  },
  {
    "text": "last generic type parameter always describes what that has to return so I have to return an in and all the type",
    "start": "757720",
    "end": "764199"
  },
  {
    "text": "parameters that come before that describe the parameters that I'm going to receive so I have to take two integers okay so hang on let me see if I",
    "start": "764199",
    "end": "770079"
  },
  {
    "text": "understand so the last one is always the return type let's make that a string so we can easily tell that so the so this",
    "start": "770079",
    "end": "776079"
  },
  {
    "text": "is any function yes that takes two in yes and returns a string that's correct",
    "start": "776079",
    "end": "781600"
  },
  {
    "text": "and it can be called whatever yep call it anything okay yep it's kind of like an interface but",
    "start": "781600",
    "end": "788839"
  },
  {
    "text": "it's not it's just an agreement that you hand me a function that does two ins and returns a string and that's our",
    "start": "788839",
    "end": "794639"
  },
  {
    "text": "agreement it's many ways a delegate is like a single method interface so single method interface um yeah they have a few",
    "start": "794639",
    "end": "801360"
  },
  {
    "text": "other funky things like being able to do funky",
    "start": "801360",
    "end": "806120"
  },
  {
    "text": "things sorry so you can do begin inoke and stuff and",
    "start": "806600",
    "end": "812839"
  },
  {
    "text": "you can combine delegates together but the the guts of it is it's a single method interface so if you imagine that",
    "start": "812839",
    "end": "819760"
  },
  {
    "text": "funk were I Funk of t0 T1 T result it would have a method saying invoke that",
    "start": "819760",
    "end": "826440"
  },
  {
    "text": "took a t0 and a T1 and returned a result I think that that we the normally brained uh feel overwhelmed when we hear",
    "start": "826440",
    "end": "834600"
  },
  {
    "text": "people talking I don't know in the hallways or whatever at work and they're like oh yeah you just take a funk a funk of an expression of tea and you return a",
    "start": "834600",
    "end": "840199"
  },
  {
    "text": "tea of what it's like whoa I I know I'm not the only one that thinks that I'm just the only one that says it out",
    "start": "840199",
    "end": "846320"
  },
  {
    "text": "loud everyone else just wants to keep their jobs I think that being generic doesn't",
    "start": "846320",
    "end": "852160"
  },
  {
    "text": "help on that front as well so you know all the generic type parameters okay so that that makes a lot of sense I think",
    "start": "852160",
    "end": "857320"
  },
  {
    "text": "that right there that's the kind of like take a screenshot and go home and study that you know what I mean that's a",
    "start": "857320",
    "end": "862880"
  },
  {
    "text": "really great example that one right there your ad so thank you for that and and that's using a Lambda expression to sort of sort declare a method in line",
    "start": "862880",
    "end": "871040"
  },
  {
    "text": "but equally Scott could have created a method that that had the same body and",
    "start": "871040",
    "end": "877240"
  },
  {
    "text": "say hey create me a delegate that points to this method okay yeah I could have",
    "start": "877240",
    "end": "883040"
  },
  {
    "text": "pointed it to so some method the wear that comes off of or hangs off of I",
    "start": "883040",
    "end": "888720"
  },
  {
    "text": "queriable is a lot more sophisticated lot allows a lot more flexibility than the one that hangs off of I inumerable so they're sort of Duels of each other",
    "start": "888720",
    "end": "896560"
  },
  {
    "text": "okay we we've talked about the one from inumerable which is is a delegate mhm so that's I've got some code I can execute",
    "start": "896560",
    "end": "903360"
  },
  {
    "text": "the code okay yes then there's expression of some delegate type like funk in this case yeah um and and that's",
    "start": "903360",
    "end": "910880"
  },
  {
    "text": "an expression tree okay which is not the code but a description of the code so",
    "start": "910880",
    "end": "917360"
  },
  {
    "text": "it's code as data yeah so what's important here is if I have a funk called the in a variable called ad this",
    "start": "917360",
    "end": "925079"
  },
  {
    "text": "is still compiled into code that will execute without me doing anything so I can just inv and the compiler will have generated I",
    "start": "925079",
    "end": "932480"
  },
  {
    "text": "directly into the assembly it will be there as if you've written the method yourself so to be clear the the",
    "start": "932480",
    "end": "939079"
  },
  {
    "text": "instructions that represent the adding or the in this case the concatenating of those two things is compiled and it's",
    "start": "939079",
    "end": "945319"
  },
  {
    "text": "compiled ahead of time and it's available to be called like any other function out there in the world absolutely okay it's not being def",
    "start": "945319",
    "end": "952279"
  },
  {
    "text": "execution of that thing isn't being deferred it's just simply a funky way of describing a function right although",
    "start": "952279",
    "end": "959920"
  },
  {
    "text": "execution is sort of deferred in that you're declaring the method yeah you're not executing it immediately until until",
    "start": "959920",
    "end": "965880"
  },
  {
    "text": "Scott calls ad you're not calling the method understood um so we'll talk more about deferred execution in terms of",
    "start": "965880",
    "end": "971880"
  },
  {
    "text": "Link stuff in a minute okay um yes but the difference here is where Scott's got",
    "start": "971880",
    "end": "976959"
  },
  {
    "text": "an expression of that in fact why don't you add a console. right line add",
    "start": "976959",
    "end": "982839"
  },
  {
    "text": "e yes and then we can see the difference so let me comment out the",
    "start": "982839",
    "end": "988399"
  },
  {
    "text": "slide yeah you see we can no longer you're doing a console. right line which does a implied two string on a an",
    "start": "988399",
    "end": "995560"
  },
  {
    "text": "expression fun can you do a a right line on the",
    "start": "995560",
    "end": "1001920"
  },
  {
    "text": "funk or just the expression so yeah you can you can and it will give you the name of the method that the compiler has",
    "start": "1001920",
    "end": "1009199"
  },
  {
    "text": "generated for you behind the scenes maybe do that right line on each one let me just call it let's just go back to",
    "start": "1009199",
    "end": "1014600"
  },
  {
    "text": "add for a second okay and I'll show how we can get both here so you've got a funk that t takes two in and returns a",
    "start": "1014600",
    "end": "1020600"
  },
  {
    "text": "string he does a two string on the thing right oh and actually yeah sorry it looks like a yeah and we that's the kind",
    "start": "1020600",
    "end": "1026558"
  },
  {
    "text": "of stuff that we see in the call stack sometimes so it's not Funk doesn't override to string so it gets the exact",
    "start": "1026559",
    "end": "1033600"
  },
  {
    "text": "thing that object do to string gives you which is just the name of the that kind of makes sense though because that that looks like a function signature that",
    "start": "1033600",
    "end": "1040438"
  },
  {
    "text": "takes uh those two things there's no information about what it's going to do right ah there's no information about",
    "start": "1040439",
    "end": "1047120"
  },
  {
    "text": "what it's going to do and that's really really important and the important part is when you wrap when you wrap a funk with expression",
    "start": "1047120",
    "end": "1052440"
  },
  {
    "text": "you're no longer generating executable code you can think of the C compiler creating a data structure that describes",
    "start": "1052440",
    "end": "1057720"
  },
  {
    "text": "the code so I can no longer at this point invoke ad that's not going to work can I I",
    "start": "1057720",
    "end": "1065559"
  },
  {
    "text": "can't invoke it not yet not yet not directly what I one so one so and this is how Technologies like uh Entity",
    "start": "1065559",
    "end": "1072240"
  },
  {
    "text": "framework and link to SQL word right you feed them expressions and they look at the data structure and see that oh you",
    "start": "1072240",
    "end": "1078400"
  },
  {
    "text": "were calling Weare and orderby and select let me translate that into SQL",
    "start": "1078400",
    "end": "1083480"
  },
  {
    "text": "it's an easy way for them to do that but one thing I could do here is I could strip off the expression part of this",
    "start": "1083480",
    "end": "1089080"
  },
  {
    "text": "and get back a funk of int and int and string once my fingers",
    "start": "1089080",
    "end": "1095120"
  },
  {
    "text": "start working let's call it ad e it's ad executable by walking up to add and",
    "start": "1095120",
    "end": "1100440"
  },
  {
    "text": "telling it to compile itself compile that expression and that would actually give me code out so now then a funk pops",
    "start": "1100440",
    "end": "1107240"
  },
  {
    "text": "out of compile yes exactly so if we console. R Linea intell sense yeah CW for console.",
    "start": "1107240",
    "end": "1115400"
  },
  {
    "text": "rate line CW there we go let's right line both of those let's",
    "start": "1115400",
    "end": "1120919"
  },
  {
    "text": "go ahead and execute you know that's legal code run this so an expression gives you a very",
    "start": "1120919",
    "end": "1128559"
  },
  {
    "text": "rich description of the code that you wrote yeah basically gives you the code back almost right y whereas just a",
    "start": "1128559",
    "end": "1134480"
  },
  {
    "text": "having a funk is a is an opaque block of compiled code you know all know it's a function that takes two integers and it",
    "start": "1134480",
    "end": "1140679"
  },
  {
    "text": "returns a string so you can't go in the other direction you can't take a funk and build an expression tree from it and",
    "start": "1140679",
    "end": "1146280"
  },
  {
    "text": "you could you could build an expression tree that just calls the method but that doesn't give any information about",
    "start": "1146280",
    "end": "1151799"
  },
  {
    "text": "what's in there so let me see if I've been paying attention because I may get this wrong does that mean that I queriable can take funks then and I I",
    "start": "1151799",
    "end": "1159080"
  },
  {
    "text": "inumerable takes funks and I queriable takes Expressions it big that's the big difference and the reason that we saw",
    "start": "1159080",
    "end": "1165000"
  },
  {
    "text": "when Scott showed intellisense of where on an i queriable you saw four four things instead of two that's because I",
    "start": "1165000",
    "end": "1171080"
  },
  {
    "text": "queriable of T inherits from I enumerable of T so you still get to see the ones that take",
    "start": "1171080",
    "end": "1176799"
  },
  {
    "text": "Funk but you can kind of ignore them for the moment you if you're using I queriable you want to be using",
    "start": "1176799",
    "end": "1181919"
  },
  {
    "text": "expression trees and in fact if you don't use expression trees if you uh if you have let me edit this",
    "start": "1181919",
    "end": "1191159"
  },
  {
    "text": "again yeah so uh if we had um I",
    "start": "1191520",
    "end": "1197799"
  },
  {
    "text": "queriable customer all customers I don't know why it's scrolling down that's very very",
    "start": "1197799",
    "end": "1203840"
  },
  {
    "text": "weird suspect that's your company browser so it's your company's hardware and your",
    "start": "1203840",
    "end": "1210360"
  },
  {
    "text": "company's operating system",
    "start": "1210360",
    "end": "1214080"
  },
  {
    "text": "um uh so if we did uh Funk",
    "start": "1215679",
    "end": "1220960"
  },
  {
    "text": "customer uh predicate is predicate a familiar word",
    "start": "1220960",
    "end": "1226600"
  },
  {
    "text": "to folks I know it's English it's something that uh judges whether or not",
    "start": "1226600",
    "end": "1232720"
  },
  {
    "text": "it's like a filter let's call it filter it's a it's the where what equals what part right exactly yeah uh so it's",
    "start": "1232720",
    "end": "1239600"
  },
  {
    "text": "something that you say does this match the predicate or not right right right yeah um it's a matchy expression it's a",
    "start": "1239600",
    "end": "1246840"
  },
  {
    "text": "matchy expression thing the um I really feel like I'm providing",
    "start": "1246840",
    "end": "1252760"
  },
  {
    "text": "value the the downside about using the term filter I found when writing code is",
    "start": "1252760",
    "end": "1257840"
  },
  {
    "text": "a filter sounds sounds like it's something that removes things whereas a matchy expression thing is something",
    "start": "1257840",
    "end": "1263280"
  },
  {
    "text": "that matches things it's a more positive thing and we want to include everything where um it is better to be more",
    "start": "1263280",
    "end": "1269520"
  },
  {
    "text": "positive yeah um that's why I say affirmative at work",
    "start": "1269520",
    "end": "1275960"
  },
  {
    "text": "it's much more positive so if we if we have uh suppose",
    "start": "1275960",
    "end": "1282919"
  },
  {
    "text": "we weren't caring and we just did matches equals all customers Dot uh",
    "start": "1282919",
    "end": "1289080"
  },
  {
    "text": "where matchy expression thing ah okay so that's where you would ordinarily put",
    "start": "1289080",
    "end": "1294840"
  },
  {
    "text": "that thing and then you just broke up what could have been one line two right and my reason for doing that is to show",
    "start": "1294840",
    "end": "1301279"
  },
  {
    "text": "something that's bad so the fact that I queriable of T extends I numerable of t",
    "start": "1301279",
    "end": "1306400"
  },
  {
    "text": "means that this code works yeah but it's not doing the same thing as uh what we",
    "start": "1306400",
    "end": "1313799"
  },
  {
    "text": "if I had the expression version",
    "start": "1313799",
    "end": "1320519"
  },
  {
    "text": "they behave radically differently right cuz that one the you've you've pulled back you haven't released the arrow yet",
    "start": "1321200",
    "end": "1327480"
  },
  {
    "text": "you've kind of had it held there in both cases they're held so these are both deferred so executing either of these",
    "start": "1327480",
    "end": "1334559"
  },
  {
    "text": "bits of code will do nothing it will not hit the database uh until you start",
    "start": "1334559",
    "end": "1340559"
  },
  {
    "text": "using them so far counts you're saying even at the point where you say where and you pass it in it's still waiting",
    "start": "1340559",
    "end": "1345919"
  },
  {
    "text": "for you to go to the first one exactly this is creating a query okay um and it's not until you need some",
    "start": "1345919",
    "end": "1352679"
  },
  {
    "text": "results link is lazy it will wait until you need some results before it does anything so if we do matches.",
    "start": "1352679",
    "end": "1360039"
  },
  {
    "text": "count and matches. count there okay so these now look these These are no longer",
    "start": "1360039",
    "end": "1366279"
  },
  {
    "text": "deferred are they identical in their behavior no this one is really nice this one will uh Entity framework I'm",
    "start": "1366279",
    "end": "1372960"
  },
  {
    "text": "assuming this is Entity framework or something similar we'll say do you know what you want to do you want to call execute scaler",
    "start": "1372960",
    "end": "1379039"
  },
  {
    "text": "of uh from customers where customer. City equals whatever and it will do all",
    "start": "1379039",
    "end": "1385440"
  },
  {
    "text": "the work on the database and return you an integer this version will say ah okay",
    "start": "1385440",
    "end": "1392760"
  },
  {
    "text": "you've given me a funk a delegate mhm I will fetch all the customers from the",
    "start": "1392760",
    "end": "1398919"
  },
  {
    "text": "database all the way to your local machine and check whether each of them matches against the predicate you've",
    "start": "1398919",
    "end": "1404480"
  },
  {
    "text": "given because hey you've only given it to me as a delegate I don't know what that means I can call it but that's all",
    "start": "1404480",
    "end": "1410159"
  },
  {
    "text": "I can do with it um and I will count how many match so clearly this is bad news",
    "start": "1410159",
    "end": "1416159"
  },
  {
    "text": "you don't want to call um the innumerable stuff on I",
    "start": "1416159",
    "end": "1421960"
  },
  {
    "text": "queriable usually but that sounds like the kind of thing that people do all the time and then they complain about net",
    "start": "1421960",
    "end": "1430640"
  },
  {
    "text": "sucking I would say not all the time because normally you're using one of these or you're doing it all in if you",
    "start": "1430640",
    "end": "1438799"
  },
  {
    "text": "if I did where C goes to uh C do City",
    "start": "1438799",
    "end": "1444480"
  },
  {
    "text": "equals that would the right thing then that would do the right thing because overload resolution would say hey it's",
    "start": "1444480",
    "end": "1449679"
  },
  {
    "text": "an iable of T there's something in I queriable that works with this I can convert so interesting slightly nerdy",
    "start": "1449679",
    "end": "1457799"
  },
  {
    "text": "interesting thing about this this expression has no type okay it's a lambar expression it doesn't have a type",
    "start": "1457799",
    "end": "1464640"
  },
  {
    "text": "it is convertible to a funk or an expression of funk depending on your",
    "start": "1464640",
    "end": "1470360"
  },
  {
    "text": "needs indeed and overload resolution says can I do anything with I queriable",
    "start": "1470360",
    "end": "1475799"
  },
  {
    "text": "if I can't I'll go up to inumerable but hey we can do this will work with I",
    "start": "1475799",
    "end": "1481120"
  },
  {
    "text": "queriable because uh I can convert this to an expression tree yes it will then do the right things um in other cases if",
    "start": "1481120",
    "end": "1489919"
  },
  {
    "text": "if we had something in this case it will look and",
    "start": "1489919",
    "end": "1495480"
  },
  {
    "text": "say is there an i queriable method that takes a funk no and I can't convert from Funk to expression of funk so okay I'll",
    "start": "1495480",
    "end": "1502919"
  },
  {
    "text": "look at the ones the extension methods on I I'll do it the only way I know how which is bad exactly I'm going to cancel",
    "start": "1502919",
    "end": "1509520"
  },
  {
    "text": "again before I accidentally save the changes do you have the power to do that like are you like a super is there like",
    "start": "1509520",
    "end": "1514679"
  },
  {
    "text": "a super user world that you live in it's over it's not that super user I think I you said you can't hit save because",
    "start": "1514679",
    "end": "1520320"
  },
  {
    "text": "it'll be bad well that means you have the power to change that question and rewrite history most",
    "start": "1520320",
    "end": "1526000"
  },
  {
    "text": "people it's like 3,000 or something something to uh to edit without anyone can try to edit this and then someone",
    "start": "1526000",
    "end": "1533000"
  },
  {
    "text": "else would say oh no do not think so I just broke I just",
    "start": "1533000",
    "end": "1538679"
  },
  {
    "text": "broke 3,000 well there we go so you could probably edit without without anyone uh looking other people can roll",
    "start": "1538679",
    "end": "1545840"
  },
  {
    "text": "it back of course all right cool I I'm not sure whether we've answered this or not I have no idea yeah",
    "start": "1545840",
    "end": "1552720"
  },
  {
    "text": "what the the way that I think of of of I enumerable though is that if you're just going forward",
    "start": "1552720",
    "end": "1559279"
  },
  {
    "text": "then use I enumerable and if you really have to ask hard questions use I queriable uh if you just want to go",
    "start": "1559279",
    "end": "1566559"
  },
  {
    "text": "forward and want to look at everything that you get and look at everything that you get then yes I inumerable is is the",
    "start": "1566559",
    "end": "1572880"
  },
  {
    "text": "way forward um but it depends there can be times where you want to split",
    "start": "1572880",
    "end": "1578039"
  },
  {
    "text": "something and do some work because it's work that can be expressed in SQL MH um",
    "start": "1578039",
    "end": "1584000"
  },
  {
    "text": "with i i queriable and then you can have an called as innumerable halfway down to",
    "start": "1584000",
    "end": "1589679"
  },
  {
    "text": "say right don't even try to convert the rest of this into um expression trees",
    "start": "1589679",
    "end": "1595640"
  },
  {
    "text": "because sql's not going to handle it so say you wanted to find all the customers who have a hash code of zero he well get",
    "start": "1595640",
    "end": "1602960"
  },
  {
    "text": "hash code doesn't exist in SQL it's a fairly meaningless question right but you would do it you have to run it on",
    "start": "1602960",
    "end": "1608520"
  },
  {
    "text": "every single one right so there you you might want to do all customers where the city is City and has a hash code of zero",
    "start": "1608520",
    "end": "1617360"
  },
  {
    "text": "so you would do wear the stuff with the city do as innumerable run the rest of",
    "start": "1617360",
    "end": "1622399"
  },
  {
    "text": "it locally and then wear again for the second pass of the filter gotcha last",
    "start": "1622399",
    "end": "1628159"
  },
  {
    "text": "question who is stack Overflow user oh I know he's got 6,000 rep is",
    "start": "1628159",
    "end": "1634320"
  },
  {
    "text": "that a person yeah or is this someone who got deleted uh no they're just someone without much",
    "start": "1634320",
    "end": "1640640"
  },
  {
    "text": "imagination but how come they're in the top 6% of stack Overflow but they haven't been seen in four years uh",
    "start": "1640640",
    "end": "1646399"
  },
  {
    "text": "because they asked 50 they asked 109 questions some of which are I suspect that means that in the context of stack",
    "start": "1646399",
    "end": "1652760"
  },
  {
    "text": "Overflow reputation long tail is long long tail so the question that we're looking at has 635 votes ah this",
    "start": "1652760",
    "end": "1659919"
  },
  {
    "text": "question that's 3,000 rep to start with it's booing them all these years later oh yeah yeah yeah I the the question",
    "start": "1659919",
    "end": "1665960"
  },
  {
    "text": "that has I don't know how much repit actually Ned me the best question on stagl the best question we can search by",
    "start": "1665960",
    "end": "1673679"
  },
  {
    "text": "of all questions of all time why is it faster to process a sorted array than an unsorted array because it's already",
    "start": "1673679",
    "end": "1680840"
  },
  {
    "text": "sorted but process as in so all they're doing is summing",
    "start": "1681399",
    "end": "1687600"
  },
  {
    "text": "it did I get reputation just then",
    "start": "1687600",
    "end": "1692158"
  },
  {
    "text": "or okay do do you want to answer that question or do you want no no no no hell no no no no it's been answered with",
    "start": "1693120",
    "end": "1699720"
  },
  {
    "text": "something that's got 21 this is this is Eric lipet I think it's long enough it keep gr",
    "start": "1699720",
    "end": "1706200"
  },
  {
    "text": "pictures of kittens or something Eric's got some fantastic ansers Eric liard yeah yeah all right cool right so that",
    "start": "1706200",
    "end": "1712120"
  },
  {
    "text": "was one question in a half an hour and I still had one more thing to say please if you don't mind we'll just have the",
    "start": "1712120",
    "end": "1717279"
  },
  {
    "text": "whole thing be the one question so in a way I thought the question was kind of uh the wrong question to ask also not",
    "start": "1717279",
    "end": "1722519"
  },
  {
    "text": "because of the difference between I inumerable and I queriable which we just spent what 45 minutes on and we have",
    "start": "1722519",
    "end": "1728240"
  },
  {
    "text": "five more questions to go or something uh but it really uh depends on the operators that you're using so",
    "start": "1728240",
    "end": "1733480"
  },
  {
    "text": "iqueryable I inumerable they can both offer you lazy evaluation or deferred ution it really comes down to what",
    "start": "1733480",
    "end": "1739519"
  },
  {
    "text": "operators you're using against those interfaces so if you go to the MSD on documentation every single link operator",
    "start": "1739519",
    "end": "1745799"
  },
  {
    "text": "will have a description of its behavior and it will say this operator offers deferred execution if it's a lazy type",
    "start": "1745799",
    "end": "1752320"
  },
  {
    "text": "of operator or not so just to demonstrate that I just want to show you I have a link query here that's going",
    "start": "1752320",
    "end": "1757600"
  },
  {
    "text": "against inumerable and I'm using three arbitrary operators none of them really have to be there but I'm going to I'm",
    "start": "1757600",
    "end": "1763600"
  },
  {
    "text": "going to filter something I'm going to take just 10 results and I'm going to do an identity projection right so three",
    "start": "1763600",
    "end": "1768799"
  },
  {
    "text": "different link operators but I just want to find out when is this work actually being done when is the ID of a movie",
    "start": "1768799",
    "end": "1775519"
  },
  {
    "text": "actually being interrogated to see if it's less than 100 and I'll do that just",
    "start": "1775519",
    "end": "1780640"
  },
  {
    "text": "by having a console. right line hey we're reading the ID right so now back out in the program let's just get all",
    "start": "1780640",
    "end": "1787120"
  },
  {
    "text": "the movies and here's the key if if I see start four each execute if I see",
    "start": "1787120",
    "end": "1792200"
  },
  {
    "text": "that output before I see that I read the first movie read the second movie read the third movie right that means none of",
    "start": "1792200",
    "end": "1798679"
  },
  {
    "text": "that work was actually done when I called get all so get all was just again pulling back on the Arrow but didn't",
    "start": "1798679",
    "end": "1804840"
  },
  {
    "text": "actually let exactly it's not going to happen until I for each so if I run the program real quick I can see yes I'm",
    "start": "1804840",
    "end": "1810840"
  },
  {
    "text": "starting for each and then I interrogated ID of one that was Star Wars id2 ID3 so get all didn't really do",
    "start": "1810840",
    "end": "1817960"
  },
  {
    "text": "anything other than get ready to get all in a sense it's also sort of building a data structure it's building a state",
    "start": "1817960",
    "end": "1823240"
  },
  {
    "text": "machine that's going to execute when I start trying to pull things through release the arrow and notice how that put is inner leaves so we looked at the",
    "start": "1823240",
    "end": "1829480"
  },
  {
    "text": "first movie's identifier and that movie got to go the whole way through the processing pipeline I got to write it",
    "start": "1829480",
    "end": "1834600"
  },
  {
    "text": "out and then we looked at the second movie and it passed the filter and all of that we wrote it out but then things",
    "start": "1834600",
    "end": "1840399"
  },
  {
    "text": "change so I can still return I inumerable here but if I use an operator like two",
    "start": "1840399",
    "end": "1847120"
  },
  {
    "text": "list to list if you look in the documentation it does not offer deferred execution into what we call a greedy",
    "start": "1847120",
    "end": "1852720"
  },
  {
    "text": "operator it has to produce a concrete list result so or materializes the result another thing you may here so the",
    "start": "1852720",
    "end": "1860799"
  },
  {
    "text": "output here is greedily we went through we looked at every single movie put everything together and then built a list in memory and handed that back to",
    "start": "1860799",
    "end": "1867960"
  },
  {
    "text": "iterator over so does that mean that if we were using any framework or something like it and we were not thinking and in",
    "start": "1867960",
    "end": "1873360"
  },
  {
    "text": "some place we put dead two list and some place we didn't yes we would affect our performance and might not even realize",
    "start": "1873360",
    "end": "1878639"
  },
  {
    "text": "it you absolutely could yeah and I've run into that problem in big web applications where developers will do a two list because they know they'll force",
    "start": "1878639",
    "end": "1885720"
  },
  {
    "text": "it to execute but then they'll do a two list and pass it to someone else who does a two list and just kind of carries",
    "start": "1885720",
    "end": "1890919"
  },
  {
    "text": "on the other thing to be careful of is there's another category of operators so let's get rid of the two list and I can",
    "start": "1890919",
    "end": "1897039"
  },
  {
    "text": "see that I'm doing sort of the least amount of work possible here I start the four each and then I",
    "start": "1897039",
    "end": "1903880"
  },
  {
    "text": "look at the movies but let me add an order by and let's say we want to order by given a",
    "start": "1903880",
    "end": "1910000"
  },
  {
    "text": "movie We'll order by the movie title the default asending order MH and the output",
    "start": "1910000",
    "end": "1915360"
  },
  {
    "text": "now would be slightly different before so we're still the it had to go and read everything to do this exactly we we still didn't do",
    "start": "1915360",
    "end": "1922799"
  },
  {
    "text": "anything until the four each tried to execute but once we started once we tried to pull that first item back order by is known as a uh non-streaming",
    "start": "1922799",
    "end": "1930159"
  },
  {
    "text": "operator it's not allowed to stream data out it has to go through the whole thing which would explain why it's faster to",
    "start": "1930159",
    "end": "1935559"
  },
  {
    "text": "process a sorted list exactly call back and with that I'm done",
    "start": "1935559",
    "end": "1943480"
  },
  {
    "text": "I was going to very very quickly um just demonst time he was talking John SK",
    "start": "1943480",
    "end": "1949799"
  },
  {
    "text": "wrote an entire program yeah so uh it was just Scott was",
    "start": "1949799",
    "end": "1955880"
  },
  {
    "text": "demonstrating doing a bit of diagnostic work putting a console. right line in the um property in in a property I was",
    "start": "1955880",
    "end": "1962960"
  },
  {
    "text": "thinking there's there's a nicer way of doing that um no",
    "start": "1962960",
    "end": "1968360"
  },
  {
    "text": "not that takes a little bit more work once but it's only the once I'm going to go to stack Overflow to do",
    "start": "1968360",
    "end": "1975600"
  },
  {
    "text": "this um soite extension yeah exactly um so just to",
    "start": "1975600",
    "end": "1981039"
  },
  {
    "text": "demonstrate how nice um link is uh you mentioned you you've got I queriable of",
    "start": "1981039",
    "end": "1987720"
  },
  {
    "text": "T and I inumerable of te and there's stuff on there but there's also parallel query there's I async inumerable from",
    "start": "1987720",
    "end": "1993360"
  },
  {
    "text": "system do um extensions. async or whatever it is um you can you can write your own link like operators or wherever",
    "start": "1993360",
    "end": "2001279"
  },
  {
    "text": "you like um and this is just a a sort a log method people don't do",
    "start": "2001279",
    "end": "2007559"
  },
  {
    "text": "this enough like you just said you just said kind of casually with a flip of the",
    "start": "2007559",
    "end": "2012720"
  },
  {
    "text": "hand you can write your own link operators yep and and everyone else in the audience said well you",
    "start": "2012720",
    "end": "2020519"
  },
  {
    "text": "can but no it is it's relatively easy but you do need to sort of know what",
    "start": "2021440",
    "end": "2027440"
  },
  {
    "text": "you're doing in terms of the um uh you took the photo before I put static",
    "start": "2027440",
    "end": "2034039"
  },
  {
    "text": "um so uh you do need to know what you're doing in terms of aoid voiding uh Being",
    "start": "2034039",
    "end": "2039880"
  },
  {
    "text": "Greedy when you don't need to be um and documenting sort of whether it will be",
    "start": "2039880",
    "end": "2044960"
  },
  {
    "text": "greedy or not so um we now have the the main part of the program is we have a",
    "start": "2044960",
    "end": "2051040"
  },
  {
    "text": "get all that Returns movies we've got Forest Gump big I've got a a wear filter",
    "start": "2051040",
    "end": "2057079"
  },
  {
    "text": "then I'm just going to log what we get to in this pipeline so I always think of link as a big pipe but to his point he",
    "start": "2057079",
    "end": "2063240"
  },
  {
    "text": "said well this is a greedy operator and this is a non- streamable operator what did you make so this is a streaming",
    "start": "2063240",
    "end": "2069040"
  },
  {
    "text": "operator okay uh so uh this doesn't do anything this is using yield return so",
    "start": "2069040",
    "end": "2074839"
  },
  {
    "text": "iterables in uh in C so this creates a new sequence so even though this method",
    "start": "2074839",
    "end": "2082839"
  },
  {
    "text": "will be called when this method gets called it won't do anything it will prepare another arrow MH and uh when it",
    "start": "2082839",
    "end": "2090240"
  },
  {
    "text": "gets asked for its first item it will run just until the first yield return",
    "start": "2090240",
    "end": "2095720"
  },
  {
    "text": "and then say hey I'm done for the moment here's some data kind of put me on PA in the middle of the four Loop in the",
    "start": "2095720",
    "end": "2100960"
  },
  {
    "text": "middle of the four each loop it's it's returning stuff on each iteration yes and it sort of Dives back into the",
    "start": "2100960",
    "end": "2106280"
  },
  {
    "text": "middle of it okay um and I don't know whether we're going to have time to get to await but await does exactly the same",
    "start": "2106280",
    "end": "2112680"
  },
  {
    "text": "kind of thing it's actually building up a state machine behind the scenes yeah it feels unlikely at this point ah it's",
    "start": "2112680",
    "end": "2117720"
  },
  {
    "text": "fine we're only on question one um so if I run this uh what I'm",
    "start": "2117720",
    "end": "2123839"
  },
  {
    "text": "expecting to see is uh that we'll let's put something to make it obvious um that",
    "start": "2123839",
    "end": "2131240"
  },
  {
    "text": "we're uh L yeah that you're in there okay so logged comes out of your",
    "start": "2131240",
    "end": "2138240"
  },
  {
    "text": "your operator yeah so we expect to see logged from this what if you put in uh a console. right line in the the way that",
    "start": "2138240",
    "end": "2145560"
  },
  {
    "text": "he did it in the property as well in name do in the name yeah to see which to",
    "start": "2145560",
    "end": "2150599"
  },
  {
    "text": "see what happens when right so then we would see uh oh this is okay H are you upset it",
    "start": "2150599",
    "end": "2160200"
  },
  {
    "text": "means I can't use an auto anymore yes that's true you really like those I",
    "start": "2160200",
    "end": "2167000"
  },
  {
    "text": "do um especially now they can be readon in C 6 I've only been asking for that feature for like 12 years um along with",
    "start": "2167000",
    "end": "2174839"
  },
  {
    "text": "using static to be fair everyone knew that having a readon autoprop would be a good",
    "start": "2174839",
    "end": "2180200"
  },
  {
    "text": "idea it's just they hadn't got around to it okay so okay so now we're expecting so let's write prop name so",
    "start": "2180200",
    "end": "2188240"
  },
  {
    "text": "I predict that we will see um prop Forest Gump then prop big logging",
    "start": "2188240",
    "end": "2198359"
  },
  {
    "text": "big and then just big when we get to and nothing will",
    "start": "2198359",
    "end": "2204359"
  },
  {
    "text": "happen I predict this is the first line of the",
    "start": "2204359",
    "end": "2209440"
  },
  {
    "text": "output okay so I predict this first line of output prop Forest Gump prop big",
    "start": "2209440",
    "end": "2215680"
  },
  {
    "text": "logging big big and why and you don't get logging on I don't get logging on",
    "start": "2215680",
    "end": "2221800"
  },
  {
    "text": "Forest Gump because yeah okay so let's see whether I'm actually",
    "start": "2221800",
    "end": "2227480"
  },
  {
    "text": "right he has to ask that if he's",
    "start": "2227480",
    "end": "2232599"
  },
  {
    "text": "right we have bangers what [Music] [Laughter]",
    "start": "2232599",
    "end": "2242000"
  },
  {
    "text": "uh name equals value that may be the only time that that ever happens there we go",
    "start": "2242680",
    "end": "2248720"
  },
  {
    "text": "right uh so ah and I've got I've done done conso uh I uh Windows plus oh",
    "start": "2248720",
    "end": "2256880"
  },
  {
    "text": "Windows plus Windows plus Windows [Laughter]",
    "start": "2256880",
    "end": "2262720"
  },
  {
    "text": "minus it's lost the I think to back to it okay Windows",
    "start": "2262720",
    "end": "2269640"
  },
  {
    "text": "plus you can all tab did you not stop running it it",
    "start": "2269640",
    "end": "2275800"
  },
  {
    "text": "stopped running it when I hit when Windows Plus for some reason that's super weird that is kind of weird well it's okay we'll just do it in our minds",
    "start": "2275800",
    "end": "2282680"
  },
  {
    "text": "yeah um oh cuz it's reading the key that you push you said read key and not read line I didn't do either actually um why",
    "start": "2282680",
    "end": "2291040"
  },
  {
    "text": "did it stop oh it's a press any key end yeah because it's a conso I'm just have a",
    "start": "2291040",
    "end": "2297119"
  },
  {
    "text": "couple of those when in doubt AB more that's the",
    "start": "2297119",
    "end": "2302280"
  },
  {
    "text": "right number fine right uh so oh just minimize that magnifier no just yeah",
    "start": "2302280",
    "end": "2307880"
  },
  {
    "text": "that's fine right there is that now readable okay so uh that would say big",
    "start": "2307880",
    "end": "2314440"
  },
  {
    "text": "it ask for four SC three times yeah I do you know what I put the the wear operator the wrong way around I meant to",
    "start": "2314440",
    "end": "2320319"
  },
  {
    "text": "make it only do short ones it's done only big ones but not big because that's",
    "start": "2320319",
    "end": "2326119"
  },
  {
    "text": "short this whole doing things off the cuff is still you were right if we do less than five and if I change it to not",
    "start": "2327119",
    "end": "2334200"
  },
  {
    "text": "print Windows minus uh right instead of query we should print name uh in",
    "start": "2334200",
    "end": "2342520"
  },
  {
    "text": "Loop obviously I would normally use interpolated strings I knew you were thinking that as he plus I was like well",
    "start": "2345079",
    "end": "2354119"
  },
  {
    "text": "yeah shouldn't you use a string Builder that's old school no no you wouldn't want was a",
    "start": "2354119",
    "end": "2360359"
  },
  {
    "text": "joke I know it was a joke I was trying to make C humor but it didn't work so yeah uh so predict first line of output",
    "start": "2360359",
    "end": "2368160"
  },
  {
    "text": "we get the property call for Forest Gump uh we get the property call for big twice in fact because the logging bit",
    "start": "2368160",
    "end": "2374560"
  },
  {
    "text": "needs to fetch the name in order to log it um or the to string does yeah um and",
    "start": "2374560",
    "end": "2381119"
  },
  {
    "text": "then we fetch the property again because in the loop we need to call to name name to get that um and",
    "start": "2381119",
    "end": "2389119"
  },
  {
    "text": "we're there so the main point of all of this which I think we somewhat lost um",
    "start": "2389119",
    "end": "2394720"
  },
  {
    "text": "was that you can write your own extension methods yes [Laughter]",
    "start": "2394720",
    "end": "2400040"
  },
  {
    "text": "I have a segue not not sort of a zooming around segue I have a segue to the next question into the stack no but uh",
    "start": "2400040",
    "end": "2407839"
  },
  {
    "text": "another extension method that you can write that but that I won't write now um is a static T yeah don't write",
    "start": "2407839",
    "end": "2417359"
  },
  {
    "text": "random so you can write this so that it returns you a random element of the",
    "start": "2418440",
    "end": "2425400"
  },
  {
    "text": "source uh whilst only read feing it once and without taking any more uh just",
    "start": "2425400",
    "end": "2432280"
  },
  {
    "text": "taking a size of one uh by you you keep the idea of my current thing that I'm",
    "start": "2432280",
    "end": "2438240"
  },
  {
    "text": "going to return and you keep a track of how many you've already read and then",
    "start": "2438240",
    "end": "2444560"
  },
  {
    "text": "yield on the random one no no you don't oh oh darn it I got to write the whole",
    "start": "2444560",
    "end": "2449800"
  },
  {
    "text": "thing",
    "start": "2449800",
    "end": "2452079"
  },
  {
    "text": "now I won't get this absolutely right but um I'm using a double here because",
    "start": "2455200",
    "end": "2461160"
  },
  {
    "text": "I'm going to be um checking against the random so default T says give me the default value or the standard value",
    "start": "2461160",
    "end": "2467119"
  },
  {
    "text": "whatever T is might be yeah exactly does that make sense yall okay so this is",
    "start": "2467119",
    "end": "2474160"
  },
  {
    "text": "something you would not normally do I'd normally pass in a random",
    "start": "2474160",
    "end": "2479480"
  },
  {
    "text": "um so we're going to keep track of what we're going to return at the end and there's our return statement and we say",
    "start": "2479480",
    "end": "2486000"
  },
  {
    "text": "the probability of replacing what we're currently looking at what we would currently return with um the one that",
    "start": "2486000",
    "end": "2493720"
  },
  {
    "text": "we've got in our hands so are we going to do Curren is item um and we do that",
    "start": "2493720",
    "end": "2501079"
  },
  {
    "text": "if the next Double out of the random number",
    "start": "2501079",
    "end": "2506280"
  },
  {
    "text": "generator uh is greater that I want say uh make",
    "start": "2506280",
    "end": "2514359"
  },
  {
    "text": "it less than one overcount so it becomes for some reason slash how",
    "start": "2514359",
    "end": "2522400"
  },
  {
    "text": "about that you lost the slash I've lost my slash key go to window run type your",
    "start": "2522400",
    "end": "2528040"
  },
  {
    "text": "slash copy it in no copy okay the slash key itself into the clipboard and then",
    "start": "2528040",
    "end": "2533640"
  },
  {
    "text": "paste it there okay uh so who who knew uh so I have no idea why",
    "start": "2533640",
    "end": "2540440"
  },
  {
    "text": "you lost slash yeah that's that's very odd one of your extensions wants it really bad yeah it's probably that quick",
    "start": "2540440",
    "end": "2546280"
  },
  {
    "text": "launch um yeah it's possible so this is very cool uh as a way of iterating over",
    "start": "2546280",
    "end": "2554760"
  },
  {
    "text": "the whole sequence and taking uh less uh taking no more space than it needs um a",
    "start": "2554760",
    "end": "2561720"
  },
  {
    "text": "bad way of doing this would be to call Source dot to array or to list and then saying all right I I have to pick out",
    "start": "2561720",
    "end": "2568480"
  },
  {
    "text": "all 10 things yeah and that would be terrible if you had a 100,000 things in that this is actually a good segue huh",
    "start": "2568480",
    "end": "2576160"
  },
  {
    "text": "let's skip over that one dumb question and go to the random question and zoom in on this for me",
    "start": "2576160",
    "end": "2582559"
  },
  {
    "text": "okay and um by the way did you know that there's a feature in I'm going to push",
    "start": "2582559",
    "end": "2588599"
  },
  {
    "text": "John out of the way um there's a feature called larger",
    "start": "2588599",
    "end": "2594559"
  },
  {
    "text": "Touch where you can say use darker larger larger feedback so then when your",
    "start": "2594559",
    "end": "2599720"
  },
  {
    "text": "finger is up there they can actually see where your fingers are when you're giving a presentation nice cool what's",
    "start": "2599720",
    "end": "2605480"
  },
  {
    "text": "this stuff over there that was what I haven't seen this is this anniversary edition stuff no no that is the",
    "start": "2605480",
    "end": "2611000"
  },
  {
    "text": "magnifier thing all right okay so it's gone now if you all right we're good cool all right so this person is saying",
    "start": "2611000",
    "end": "2618559"
  },
  {
    "text": "hey I'm migrating a method from net11 to net 4 and they feel that the",
    "start": "2618559",
    "end": "2624920"
  },
  {
    "text": "implementation of random change so they pass in a seed value and given that same",
    "start": "2624920",
    "end": "2631119"
  },
  {
    "text": "seed random. byes is coming back with a different result so if you scroll down a little bit on net11 they get those four",
    "start": "2631119",
    "end": "2637839"
  },
  {
    "text": "numbers and on net 4 they get these ones and they want to know how to solve the problem apparently to make",
    "start": "2637839",
    "end": "2646520"
  },
  {
    "text": "random reliable predictable make random reliable so out",
    "start": "2646520",
    "end": "2653839"
  },
  {
    "text": "of Interest before we say anything more uh how many of you think it is a",
    "start": "2653839",
    "end": "2659040"
  },
  {
    "text": "reasonable expectation that you know that this person had a reasonable expectation",
    "start": "2659040",
    "end": "2666960"
  },
  {
    "text": "okay um Al just on Java I think this would be guaranteed okay to not be",
    "start": "2667559",
    "end": "2673559"
  },
  {
    "text": "random to to be not random in a particular way so neither of these are random",
    "start": "2673559",
    "end": "2679760"
  },
  {
    "text": "they're both pseudo random but they're differently pseudo random but pseudo so pseudo means not at all pseudo",
    "start": "2679760",
    "end": "2687839"
  },
  {
    "text": "means if you squinted it in the right way so like the way I squinted",
    "start": "2687839",
    "end": "2695160"
  },
  {
    "text": "Java pseudo random not at all random so a pseudo random number generator uh",
    "start": "2695160",
    "end": "2702119"
  },
  {
    "text": "provides a stream of numbers or whatever that looks random to the naked eye but",
    "start": "2702119",
    "end": "2708440"
  },
  {
    "text": "is actually um there's a word that I'm not at all predict predictable based on",
    "start": "2708440",
    "end": "2714920"
  },
  {
    "text": "it it's um it's coming out of a mathematical algorithm so it it cannot be too random right isn't there enough",
    "start": "2714920",
    "end": "2721000"
  },
  {
    "text": "Randomness in the world that they can just pluck it out of the air I mean it's there's like Quantum stuff right and if",
    "start": "2721000",
    "end": "2728200"
  },
  {
    "text": "you use secure random sorry no secure random Java it's uh crypto random RNG",
    "start": "2728200",
    "end": "2733920"
  },
  {
    "text": "crypto service provider right what switch over did you say orang yeah oh",
    "start": "2733920",
    "end": "2740160"
  },
  {
    "text": "random number generator crypto service provider I you said orang random this is what you want to use to impress your",
    "start": "2740160",
    "end": "2745440"
  },
  {
    "text": "co-workers who still use just random RNG crypto service provider you tell them",
    "start": "2745440",
    "end": "2750559"
  },
  {
    "text": "this is legitimately random yes and wouldn't it be nice if those two implemented the same kind of interface",
    "start": "2750559",
    "end": "2756079"
  },
  {
    "text": "is this really random is this the kind of Randomness we can't export to other countries uh yeah probably so that that",
    "start": "2756079",
    "end": "2762359"
  },
  {
    "text": "will use a different that can use different um random number generators",
    "start": "2762359",
    "end": "2767559"
  },
  {
    "text": "depending on your Hardware so some Hardware has like a radiation detector in it like mini Geer counter that it can",
    "start": "2767559",
    "end": "2773520"
  },
  {
    "text": "use to get genuinely random stuff back backing away from the",
    "start": "2773520",
    "end": "2779319"
  },
  {
    "text": "possibly radioactive machines others might look at sort of heat signatures of the Chip and try to get things yeah",
    "start": "2779319",
    "end": "2784800"
  },
  {
    "text": "serly you're not playing with me no no no not at all I mean it looks at the heat signatures of the you breathe on it",
    "start": "2784800",
    "end": "2790440"
  },
  {
    "text": "and it be like and now it's differently random right yeah so um how many of you",
    "start": "2790440",
    "end": "2796160"
  },
  {
    "text": "use putty out of Interest Putty Putty yeah so a friend of mine wrote putty um let's see a friend of yours wrote putty",
    "start": "2796160",
    "end": "2803760"
  },
  {
    "text": "yeah a chat called Simon taam who works on Works in arm in Cambridge uh he was",
    "start": "2803760",
    "end": "2809319"
  },
  {
    "text": "my best friend at University of course he was so if we want to generate if if I",
    "start": "2809319",
    "end": "2816960"
  },
  {
    "text": "remember rightly so look at this please generate some let me use my new found skills with Windows magier please",
    "start": "2816960",
    "end": "2824160"
  },
  {
    "text": "generate some Randomness by moving the mouse over the bar so you do that and it's generating entropy so random random",
    "start": "2824160",
    "end": "2830880"
  },
  {
    "text": "bits because no one would ever go and spin the thing right in a predictable counterclockwise Circle it doesn't How",
    "start": "2830880",
    "end": "2836920"
  },
  {
    "text": "likely is it that it'll be exactly the circle and a little bit of difference on exactly where it is will be huge in",
    "start": "2836920",
    "end": "2843160"
  },
  {
    "text": "terms of the result um so you generate enough and it comes up with some some",
    "start": "2843160",
    "end": "2848280"
  },
  {
    "text": "stuff um and so that's human generated Randomness but yeah there are various sources of entropy within right but a",
    "start": "2848280",
    "end": "2855079"
  },
  {
    "text": "server you have to go and figure out what's random around us so back to Scott's machine RNG crypto service",
    "start": "2855079",
    "end": "2861599"
  },
  {
    "text": "provider will use a good source of Randomness why doesn't random just do that because it's expensive yeah this is",
    "start": "2861599",
    "end": "2867880"
  },
  {
    "text": "like an or at least an order of magnitude slower than just using random yeah okay so should we just not what do",
    "start": "2867880",
    "end": "2875920"
  },
  {
    "text": "we not use random and also why does this person care like why do they care that the number changed like they must be",
    "start": "2875920",
    "end": "2881520"
  },
  {
    "text": "doing something wrong if if they noticed no so it's what they're doing is they're",
    "start": "2881520",
    "end": "2888760"
  },
  {
    "text": "providing a seed to random uh so there's still this word that I can't think that's like predictable but fancier um",
    "start": "2888760",
    "end": "2897200"
  },
  {
    "text": "sorry deterministic yes right so system. Random is deterministic you give it the same input it will give you the same",
    "start": "2897200",
    "end": "2902920"
  },
  {
    "text": "output um and that can be very useful in tests so say you have a golden",
    "start": "2902920",
    "end": "2909240"
  },
  {
    "text": "implementation you you're confident that something is right okay and it uses",
    "start": "2909240",
    "end": "2914480"
  },
  {
    "text": "random numbers okay and that makes it really hard to write unit tests for it you know I want to check that if I",
    "start": "2914480",
    "end": "2919720"
  },
  {
    "text": "change the implementation I still get the same output so I need a predictable source of random numbers and system.",
    "start": "2919720",
    "end": "2925640"
  },
  {
    "text": "random gives you that by H having here's a seed it will give you the same results every time so if I run that person's app",
    "start": "2925640",
    "end": "2932640"
  },
  {
    "text": "if I run that person's app on my system and give the same seed I'll get the same random numbers on un certain so it",
    "start": "2932640",
    "end": "2938119"
  },
  {
    "text": "depends should we see what then it's like well wait a second are we generating random numbers are we",
    "start": "2938119",
    "end": "2943920"
  },
  {
    "text": "just like counting up through Pi you know what I mean where just like start marching forward a Million numbers and",
    "start": "2943920",
    "end": "2948960"
  },
  {
    "text": "we'll all get the same values So system. Random uh will take it the seed that you give it and probably expand it into a",
    "start": "2948960",
    "end": "2956280"
  },
  {
    "text": "bit more state so it's I think it only takes a long and I think random has like 128 bits or 256 bits of state and then",
    "start": "2956280",
    "end": "2964480"
  },
  {
    "text": "every time you call next Double or next in or whatever it spits out a number and moves on to another state and um yeah we",
    "start": "2964480",
    "end": "2971440"
  },
  {
    "text": "should all get the same results from at least the same version of net the way I think about it is that there's this",
    "start": "2971440",
    "end": "2976960"
  },
  {
    "text": "universe of a series of numbers and your seed picks one of those series okay and",
    "start": "2976960",
    "end": "2982760"
  },
  {
    "text": "is this for lack of a better word is this okay like because I see people",
    "start": "2982760",
    "end": "2987799"
  },
  {
    "text": "complaining whe complaining about net or about Java complain about whatever about behaviors like this because they think",
    "start": "2987799",
    "end": "2994000"
  },
  {
    "text": "that the the class called random should return random stuff that how these things work it is okay thats",
    "start": "2994000",
    "end": "3001680"
  },
  {
    "text": "that that programing langues computers work this way right uh depending on what you're building if you are building a",
    "start": "3001680",
    "end": "3006760"
  },
  {
    "text": "betting site do not use random right okay if you're doing anything where um",
    "start": "3006760",
    "end": "3013640"
  },
  {
    "text": "someone has Financial or security gain from being able to predict the next",
    "start": "3013640",
    "end": "3019680"
  },
  {
    "text": "number then you do not use random you use RNG crypto service provider and I",
    "start": "3019680",
    "end": "3025160"
  },
  {
    "text": "presume that there are probably I'm I'm extrapolating here since you already made up that whole story about how the",
    "start": "3025160",
    "end": "3031040"
  },
  {
    "text": "heat of the thing which I believe but still I don't believe you um I that means that there's probably like random",
    "start": "3031040",
    "end": "3036839"
  },
  {
    "text": "number generating cards that I could buy for my my my casino that would be like",
    "start": "3036839",
    "end": "3042119"
  },
  {
    "text": "Hardware accelerated random number generator thing AB or that must exist right because now that I've learned all",
    "start": "3042119",
    "end": "3048000"
  },
  {
    "text": "about how random works I think so and and random if you don't provide a seed it will just take the current time does",
    "start": "3048000",
    "end": "3053720"
  },
  {
    "text": "that mean that their seed could be better could you is there a seed that you could pull out of thin air that would be better if you had like a sensor",
    "start": "3053720",
    "end": "3058920"
  },
  {
    "text": "or something uh so you could get a different seed but the point of something like RNG crypto service provider is it doesn't use a seed and",
    "start": "3058920",
    "end": "3065839"
  },
  {
    "text": "then a predictable sequence it says each time I will do something cunning to to get genuinely times or more yeah you can",
    "start": "3065839",
    "end": "3073040"
  },
  {
    "text": "genuinely not predict the next one from the previous one and it's a lot slower yeah um so it turns out msdn confirms",
    "start": "3073040",
    "end": "3080000"
  },
  {
    "text": "this this uh this is the Constructor taking a seed and this is often done when testing apps that rely on random",
    "start": "3080000",
    "end": "3085960"
  },
  {
    "text": "number generators they are would that be fair to say then that really no one should be using random except in their",
    "start": "3085960",
    "end": "3091079"
  },
  {
    "text": "tests no no no because you would use random for something if you've got some",
    "start": "3091079",
    "end": "3096599"
  },
  {
    "text": "little game that you're that you're writing that really doesn't matter too much um you see how you're not just",
    "start": "3096599",
    "end": "3103160"
  },
  {
    "text": "saying yes Scott you're right you're you're saying it all depends and the",
    "start": "3103160",
    "end": "3108319"
  },
  {
    "text": "examples that you're giving are if you're doing something trivial that Randomness doesn't really matter use random if you're serious about",
    "start": "3108319",
    "end": "3114000"
  },
  {
    "text": "Randomness use something else like r the randomness has a really important effect",
    "start": "3114000",
    "end": "3120880"
  },
  {
    "text": "so anything to do with security haven't help us anything to do with safety although safety and Randomness don't",
    "start": "3120880",
    "end": "3126880"
  },
  {
    "text": "tend to go together um and definitely anything to do with money then yeah you",
    "start": "3126880",
    "end": "3132559"
  },
  {
    "text": "do not use random um but for a game so games are interesting so people do put",
    "start": "3132559",
    "end": "3138640"
  },
  {
    "text": "money into games uh so Pokemon go I would probably not use random",
    "start": "3138640",
    "end": "3145359"
  },
  {
    "text": "mhm he he catching them as we're this is just disgraceful I know um no I'm not",
    "start": "3145359",
    "end": "3151119"
  },
  {
    "text": "really catching them it's all it's all zubats around here we had to we had to go catch him before we could get him",
    "start": "3151119",
    "end": "3156640"
  },
  {
    "text": "into the room pretty true how many things did we throw at him before finally H um but yeah so if you've got a",
    "start": "3156640",
    "end": "3164200"
  },
  {
    "text": "single player game and there's no inapp purchases and no one's going to be trying to game it as it were then sure",
    "start": "3164200",
    "end": "3170480"
  },
  {
    "text": "random is fine MH um and certainly if you're if you're trying to uh say load",
    "start": "3170480",
    "end": "3177480"
  },
  {
    "text": "test something that's another interesting example if you want to write a load test and uh",
    "start": "3177480",
    "end": "3184000"
  },
  {
    "text": "you're the input to your algorithm May well affect the output uh May well",
    "start": "3184000",
    "end": "3189280"
  },
  {
    "text": "affect how long it takes to do something so for example if we generated a random",
    "start": "3189280",
    "end": "3196000"
  },
  {
    "text": "array and then tried to process it then as we know it would be faster if it's",
    "start": "3196000",
    "end": "3201079"
  },
  {
    "text": "already sorted exactly so if you happen to get a random sequence that's already sorted or most sorted then you could get",
    "start": "3201079",
    "end": "3207920"
  },
  {
    "text": "different results out so again if you provide a seed then it may not matter",
    "start": "3207920",
    "end": "3213400"
  },
  {
    "text": "what the what that sequence is so long as you get the same one next time you run the test do you do you all want to",
    "start": "3213400",
    "end": "3219280"
  },
  {
    "text": "see if we can do the tail call question in the last five minutes here yeah let's let's wrap this up by saying it's it's",
    "start": "3219280",
    "end": "3226359"
  },
  {
    "text": "slightly unusual that random changeed Behavior between net 1.1 and net4 um but",
    "start": "3226359",
    "end": "3231960"
  },
  {
    "text": "maybe we don't know if they went from 32 bit to 64bit we don't know if that's a it's sort of it that's an implementation",
    "start": "3231960",
    "end": "3237480"
  },
  {
    "text": "detail the code too we could indeed well we could look at the code now we",
    "start": "3237480",
    "end": "3242599"
  },
  {
    "text": "couldn't look at the net 1.1 well I yeah you can uh isn't it at source of.net uh what all the previous versions",
    "start": "3242599",
    "end": "3250319"
  },
  {
    "text": "yeah isn't it I don't know anyway let's let's move on it was all Source opened",
    "start": "3250319",
    "end": "3255680"
  },
  {
    "text": "before remember like there's there was a reference source but that wasn't yeah that that was here's a version that we",
    "start": "3255680",
    "end": "3260760"
  },
  {
    "text": "could have shipped but we actually shipped the version over here could be to be clear reference source is the real source they stri they stripped out the",
    "start": "3260760",
    "end": "3267400"
  },
  {
    "text": "swear words and the comments but it's the real start okay there was definitely a version that shipped like there was",
    "start": "3267400",
    "end": "3273160"
  },
  {
    "text": "there wasn't a cleaned up version 10 years ago but this is not which I think they also called reference source just there's a website called Source",
    "start": "3273160",
    "end": "3279680"
  },
  {
    "text": "of.net that's got the real source and they update it right cool yeah we could either do that or just we only have what",
    "start": "3279680",
    "end": "3286520"
  },
  {
    "text": "three minutes left we have four minutes three minutes what do you want to do let's do tail call is that okay you want do one",
    "start": "3286520",
    "end": "3293920"
  },
  {
    "text": "more question okay unless you want do you need to go no is that okay no no no all right let's",
    "start": "3293920",
    "end": "3300280"
  },
  {
    "text": "bring up uh that one y so why doesn't net or C optimize for tail call",
    "start": "3300280",
    "end": "3307960"
  },
  {
    "text": "recursion the of course that begs the other question what is tail call",
    "start": "3307960",
    "end": "3314000"
  },
  {
    "text": "recursion now to find out what tail call recursion is you call something that gives you tail call",
    "start": "3314000",
    "end": "3321559"
  },
  {
    "text": "recursion that's like that episode of Star Trek where they're like I cannot tell a lie yeah I'm",
    "start": "3323280",
    "end": "3329520"
  },
  {
    "text": "lying this is why I didn't want to do this we're never going to get out of the room so right here they've got a",
    "start": "3329520",
    "end": "3334799"
  },
  {
    "text": "function called food that does some stuff and then calls itself so this is a classic kind of recursive uh uh Quest",
    "start": "3334799",
    "end": "3343599"
  },
  {
    "text": "recursive function and then you would expect to look at the call stack and it would go super deep and 15 20 years ago",
    "start": "3343599",
    "end": "3349599"
  },
  {
    "text": "I would blow the stack because I've gone too deep and you probably would know how how how deep can the stack go now",
    "start": "3349599",
    "end": "3357359"
  },
  {
    "text": "I suspect not that de I think it's a four megabyte stack by default I think which would be just about right for this",
    "start": "3357359",
    "end": "3364119"
  },
  {
    "text": "particular when I was doing uh Palm Pilot we had a 2K",
    "start": "3364119",
    "end": "3369160"
  },
  {
    "text": "stack mach are bigger today fortunately what's that machines are bigger today fortunately right so uh let's call Fu",
    "start": "3369160",
    "end": "3377039"
  },
  {
    "text": "zero she just pasted that code directly from stack Overflow into production that's what I do all the",
    "start": "3377039",
    "end": "3383559"
  },
  {
    "text": "time uh right so this is going to call F Zer so it's going to recurse a million times so if we have a four Meg stack",
    "start": "3384359",
    "end": "3390960"
  },
  {
    "text": "given that all it needs on the stack is an integer I know it might need a it might need two in one for the result of",
    "start": "3390960",
    "end": "3397359"
  },
  {
    "text": "I plus one who knows um and we're going to see if we can blow the stack here",
    "start": "3397359",
    "end": "3404160"
  },
  {
    "text": "building bang stack Overflow exception yeah the irony that you just pasted from",
    "start": "3404160",
    "end": "3409960"
  },
  {
    "text": "stack Overflow that's actually pretty awesome",
    "start": "3409960",
    "end": "3416359"
  },
  {
    "text": "okay so tail calls mean that that won't blow are we done so hang on uh tail call optimizing",
    "start": "3416359",
    "end": "3425440"
  },
  {
    "text": "tail call recursion would that not mean that we didn't need to go and go deeper",
    "start": "3425440",
    "end": "3430680"
  },
  {
    "text": "in the stack we could just kind of go sideways it should be the C compiler being able to look at that function and",
    "start": "3430680",
    "end": "3436400"
  },
  {
    "text": "saying ah I see the last thing you're doing is making a function call to yourself again so let me just reuse the",
    "start": "3436400",
    "end": "3442400"
  },
  {
    "text": "same stack frame that I just created mhm um thereby not continually allocating stack frames so",
    "start": "3442400",
    "end": "3449720"
  },
  {
    "text": "so thinking of Stack from the bottom this time you can think either way so here we have F of zero and then F of one",
    "start": "3449720",
    "end": "3457200"
  },
  {
    "text": "F of two four of three four of four Etc something it can be optimized with tail",
    "start": "3457200",
    "end": "3462400"
  },
  {
    "text": "calls if you can say right four of zero calls four of one but I'm bored with this stack I'll just put four of one on",
    "start": "3462400",
    "end": "3467640"
  },
  {
    "text": "the same thing four of two four of three four or four and then so this is a method that returns void we could return",
    "start": "3467640",
    "end": "3476480"
  },
  {
    "text": "I and either way you can just say well do you know what we don't need to come",
    "start": "3476480",
    "end": "3481880"
  },
  {
    "text": "back we can just return the same thing",
    "start": "3481880",
    "end": "3487119"
  },
  {
    "text": "um and a smart either compiler or runtime or both can notice that it can",
    "start": "3487119",
    "end": "3493839"
  },
  {
    "text": "do this switch and just sort of overlay the new stack on top of the old stack um which is typically the case if either",
    "start": "3493839",
    "end": "3500160"
  },
  {
    "text": "you don't return anything or if you return just the result of the recursion",
    "start": "3500160",
    "end": "3505559"
  },
  {
    "text": "um possibly with some constant things but right I'll give you an example that",
    "start": "3505559",
    "end": "3510680"
  },
  {
    "text": "doesn't work with this this ex this is not doing tail call optimization but it but it could be it",
    "start": "3510680",
    "end": "3518520"
  },
  {
    "text": "could they're saying why doesn't net support it as if it doesn't at all well I I think the CLR supports it but the C",
    "start": "3518520",
    "end": "3525440"
  },
  {
    "text": "compellor doesn't do it uh or it can do it in certain instances so this there's",
    "start": "3525440",
    "end": "3530520"
  },
  {
    "text": "interesting stuff here uh are you I'm sorry are you banging out the Fibonacci sequence for memory yes he is",
    "start": "3530520",
    "end": "3536680"
  },
  {
    "text": "just checking uh you know this isn't how I would normally write it but just for the sake of oh this isn't how you would",
    "start": "3536680",
    "end": "3542280"
  },
  {
    "text": "ordinarily write the Fibonacci sequence for memory I would normally validate my arguments and handle the I I would",
    "start": "3542280",
    "end": "3549520"
  },
  {
    "text": "ordinarily Google it and pick the first up option but that's okay so the reason",
    "start": "3549520",
    "end": "3555599"
  },
  {
    "text": "that so you do you John SK you do you while Fu uh can be tail call optimized",
    "start": "3555599",
    "end": "3562000"
  },
  {
    "text": "FIB can't because but who wasn't though no it it wasn't but it ially can be I",
    "start": "3562000",
    "end": "3567319"
  },
  {
    "text": "see okay FIB can't be using this implementation because we make some calls and then we make some other calls",
    "start": "3567319",
    "end": "3574359"
  },
  {
    "text": "and add the two together so if you've replaced you we need to keep remembering it's a tree of recursion and at every",
    "start": "3574359",
    "end": "3581400"
  },
  {
    "text": "point you sort of recurse down and then you've got to add the results together and it's the fact that you need both of the results that make it hard there are",
    "start": "3581400",
    "end": "3588000"
  },
  {
    "text": "other ways that you can Implement Fibonacci that and Fibonacci ends",
    "start": "3588000",
    "end": "3593039"
  },
  {
    "text": "theoretically right but could you still blow the stack if it needed to go big enough yeah so if if I call FIB a",
    "start": "3593039",
    "end": "3598559"
  },
  {
    "text": "thousand here it would probably actually take a uh yeah it would um it would",
    "start": "3598559",
    "end": "3604359"
  },
  {
    "text": "eventually go down and certainly FIB a million would so does Net support tail",
    "start": "3604359",
    "end": "3609400"
  },
  {
    "text": "recursion or not or just depends so uh the CLR supports a tail do",
    "start": "3609400",
    "end": "3616000"
  },
  {
    "text": "call operation um operator um but as far",
    "start": "3616000",
    "end": "3622039"
  },
  {
    "text": "as I'm aware the C compiler never emits that but also the CLR can in certain",
    "start": "3622039",
    "end": "3628520"
  },
  {
    "text": "situations spot that it can do a tail call even if you haven't asked it",
    "start": "3628520",
    "end": "3633720"
  },
  {
    "text": "to um and sometimes if you ask it to it doesn't anyway so um I think they fixed",
    "start": "3633720",
    "end": "3640680"
  },
  {
    "text": "it in net 4 so that it would always it's kind of like CSS",
    "start": "3640680",
    "end": "3646559"
  },
  {
    "text": "development um so I think F basically forced the CLR to do it properly so so",
    "start": "3646559",
    "end": "3653119"
  },
  {
    "text": "I'm looking at uh another question here that's says that there are different levels at which tail call optimization",
    "start": "3653119",
    "end": "3659599"
  },
  {
    "text": "is supported right the jit is responsible for the optimizations the C compile could use tail call the IL op",
    "start": "3659599",
    "end": "3667400"
  },
  {
    "text": "code uh but no version of the C compile does this it is the Jitter who is",
    "start": "3667400",
    "end": "3672640"
  },
  {
    "text": "permitted to make those optimizations so you're saying the C compiler doesn't do that right really it's up to the jit it",
    "start": "3672640",
    "end": "3679599"
  },
  {
    "text": "could do that but in the chain of responsibility as they see it now the Jitter ultimately it's always up to the",
    "start": "3679599",
    "end": "3685599"
  },
  {
    "text": "jit right well ultimately it is the C compiler makes a hint the C compiler could give a Hint it doesn't at the",
    "start": "3685599",
    "end": "3692319"
  },
  {
    "text": "moment the F compiler definitely does so it says that the jit compiler is permitted to make optimizations whenever it sees fit but only the 64-bit Jitter",
    "start": "3692319",
    "end": "3699480"
  },
  {
    "text": "does it right and then there is a uh it only happens in release build yep could",
    "start": "3699480",
    "end": "3705000"
  },
  {
    "text": "you go in release I'm just going to go in release build and and there is a blog post in Exquisite detail called tail",
    "start": "3705000",
    "end": "3711440"
  },
  {
    "text": "called jit conditions from 2007 that literally has page after page of all the",
    "start": "3711440",
    "end": "3717319"
  },
  {
    "text": "different scenarios where if everything's perfect it'll do it otherwise it won't so still in debug mode uh but 64-bit this is still going",
    "start": "3717319",
    "end": "3724319"
  },
  {
    "text": "Bang all right um in release mode Let's see woo oh no",
    "start": "3724319",
    "end": "3730839"
  },
  {
    "text": "it says got twice as far it permits it says permit it says um I thought I could have sworn I did",
    "start": "3730839",
    "end": "3738079"
  },
  {
    "text": "that oh I did it for debug but not for release don't look at",
    "start": "3738079",
    "end": "3743480"
  },
  {
    "text": "that hey look tail the CLR implementations but yeah it",
    "start": "3743480",
    "end": "3749160"
  },
  {
    "text": "works so it does work yeah so we should go and edit that second overload question and tell that person that they",
    "start": "3749160",
    "end": "3755480"
  },
  {
    "text": "suck well it's saying that it can it it's it's exactly right well hang on the Microsoft Connect let's just go into the",
    "start": "3756559",
    "end": "3763000"
  },
  {
    "text": "belly of the Beast uh answers should answer your question what is the thanks for your",
    "start": "3763000",
    "end": "3769079"
  },
  {
    "text": "suggestion we will continue to look but but they already did it though no so oh this is 2013",
    "start": "3769079",
    "end": "3776680"
  },
  {
    "text": "uh why didn't they just say do it this way and it would have worked are you going to write it at the",
    "start": "3776680",
    "end": "3783200"
  },
  {
    "text": "command line now no I'm going to see what the what the is you're looking at the I yeah",
    "start": "3783200",
    "end": "3790559"
  },
  {
    "text": "so right so it's still just using call it's not using tail the call so how did it work then because the jit can still",
    "start": "3790559",
    "end": "3796520"
  },
  {
    "text": "decide to optimize it it's a hint more than a but I guess what I'm saying is it feels like the stack Overflow question",
    "start": "3796520",
    "end": "3803799"
  },
  {
    "text": "makes it look like it didn't actually happen no that's the right one okay um",
    "start": "3803799",
    "end": "3810520"
  },
  {
    "text": "so are you rning oh you yeah you method sorry uh f f no it's still a coal yeah",
    "start": "3810520",
    "end": "3817799"
  },
  {
    "text": "so to be clear that makes sense though because you're you're by looking in there you're seeing if the C compiler",
    "start": "3817799",
    "end": "3823520"
  },
  {
    "text": "output it that doesn't say that it works the fact that it ran to completion says that it works exactly yeah so that",
    "start": "3823520",
    "end": "3830279"
  },
  {
    "text": "proves that the jit is able to optimize it even without tail. call right I believe that legit in 2.0 uh sometimes",
    "start": "3830279",
    "end": "3839000"
  },
  {
    "text": "even if you make a tail do call it won't yeah it's possible that tail do call is still advisory but it",
    "start": "3839000",
    "end": "3846119"
  },
  {
    "text": "now uh is more but it also has a I think that another way to think about this is that it's a very visceral example of",
    "start": "3846119",
    "end": "3852839"
  },
  {
    "text": "64-bit being a good thing in this case where usually I do things in 32-bit for like web apps but release versus debug",
    "start": "3852839",
    "end": "3859680"
  },
  {
    "text": "right there's all these optimizations that happen because if you're in debug um and I suspect if we'd attached the",
    "start": "3859680",
    "end": "3866480"
  },
  {
    "text": "debugger even to the release build it would still you when you're debugging you really want to see what has",
    "start": "3866480",
    "end": "3872400"
  },
  {
    "text": "logically gone on yep which is hey I've got these things on the stack um so you",
    "start": "3872400",
    "end": "3877760"
  },
  {
    "text": "wouldn't want it to do the tail call thing there unless you were trying to determine whether or not it was going to do tailal cool we are now six minutes",
    "start": "3877760",
    "end": "3884960"
  },
  {
    "text": "over we are no no uh let's give a big hand to K Scott Allen and",
    "start": "3884960",
    "end": "3890680"
  },
  {
    "text": "John and uh many uh many thank yous to Rob conry who",
    "start": "3894079",
    "end": "3899960"
  },
  {
    "text": "has this idea and continues to do it and to NDC for allowing us to waste your time for the last hour thank you enjoy",
    "start": "3899960",
    "end": "3906680"
  },
  {
    "text": "your lunch thank you",
    "start": "3906680",
    "end": "3910480"
  }
]