[
  {
    "text": "good morning my name is Andreas fetish and I work as an independent trainer",
    "start": "4610",
    "end": "10379"
  },
  {
    "text": "consultant and occasional speaker I'm also the crater of C++ insights and",
    "start": "10379",
    "end": "18240"
  },
  {
    "text": "I'm very happy that I will have own talk on this tool tomorrow",
    "start": "18240",
    "end": "24270"
  },
  {
    "text": "I will use it today and if you don't know it I will introduce it to you briefly the topic of today is C++ and",
    "start": "24270",
    "end": "31740"
  },
  {
    "text": "lambdas demystified before we start with",
    "start": "31740",
    "end": "37050"
  },
  {
    "text": "C++ let's talk about another language German my last name is German because",
    "start": "37050",
    "end": "43170"
  },
  {
    "text": "I'm from Germany and Fatih has quite a few meanings in English it's like finish",
    "start": "43170",
    "end": "49410"
  },
  {
    "text": "finished complete or completed that's a really excellent name to be on someone's project and you can pay me a",
    "start": "49410",
    "end": "56820"
  },
  {
    "text": "fortune to find out that the name doesn't make you project finish in time other things depend on that than my last",
    "start": "56820",
    "end": "64378"
  },
  {
    "text": "name but I'm happy to take your money really what I'm having started to talk",
    "start": "64379",
    "end": "71220"
  },
  {
    "text": "about my last name to introduce it I collected a couple of stories about it I",
    "start": "71220",
    "end": "77250"
  },
  {
    "text": "wasn't aware before so I can now tell you that Gian astroscope is able to at",
    "start": "77250",
    "end": "82530"
  },
  {
    "text": "least read German because he understands my last name I also learned when I",
    "start": "82530",
    "end": "88799"
  },
  {
    "text": "presented at NBC Oslo they had in Norwegian Kurdish is also word spelt and",
    "start": "88799",
    "end": "96409"
  },
  {
    "text": "spoken slightly different if I get it right it's fatty-fatty in Norwegian so",
    "start": "96409",
    "end": "104040"
  },
  {
    "text": "close that's cool I'm very unhappy it we",
    "start": "104040",
    "end": "109530"
  },
  {
    "text": "have to tell you that nonetheless it's a very common German word because we use",
    "start": "109530",
    "end": "114990"
  },
  {
    "text": "it often I must pronounce my own name for about 30 years in proper German it's",
    "start": "114990",
    "end": "121680"
  },
  {
    "text": "pronounced Fiat ish idiot well this dialect where I come from I pronounce it",
    "start": "121680",
    "end": "128100"
  },
  {
    "text": "most of the time thetic was a heart carrion it's wrong but there is no such",
    "start": "128100",
    "end": "133500"
  },
  {
    "text": "word in German so all the people get what I'm talking about",
    "start": "133500",
    "end": "139370"
  },
  {
    "text": "alright enough German lessons let's talk about lambdas and the evolution of",
    "start": "139370",
    "end": "145740"
  },
  {
    "text": "lambdas if you look at this picture from the left to the right we have first the",
    "start": "145740",
    "end": "152520"
  },
  {
    "text": "so-called CAPTCHA list and in C++ 11 we are able to capture by copy by reference",
    "start": "152520",
    "end": "161000"
  },
  {
    "text": "by name copy by named reference we can also capture this and we can capture",
    "start": "161000",
    "end": "174750"
  },
  {
    "text": "parameter packs in C++ for T in the end that God extended we can now have",
    "start": "174750",
    "end": "181140"
  },
  {
    "text": "something called in it captures we will have a look on that later it's the first",
    "start": "181140",
    "end": "187260"
  },
  {
    "text": "version in the C++ 14 line we can introduce a new name while capturing a",
    "start": "187260",
    "end": "192900"
  },
  {
    "text": "variable in the lambda and we can do this again why a copy or by a reference",
    "start": "192900",
    "end": "202250"
  },
  {
    "text": "in C++ 17 we got the ability to capture this star or star this or dereference",
    "start": "202250",
    "end": "210180"
  },
  {
    "text": "this we will also look into this and very can help you next to the capture",
    "start": "210180",
    "end": "217170"
  },
  {
    "text": "list we can now see ankle brackets and ankle prakit give us a hint that we are",
    "start": "217170",
    "end": "224940"
  },
  {
    "text": "now seeing something which is related to a template and in fact we are looking at a C++ 20 feature the class ball is right",
    "start": "224940",
    "end": "232590"
  },
  {
    "text": "for me then we will have templated lambdas in C++ 20 we will also look at",
    "start": "232590",
    "end": "240209"
  },
  {
    "text": "this next to the angle brackets we have to parent the C's and in that",
    "start": "240209",
    "end": "246690"
  },
  {
    "text": "parentheses we can specify the parameters the lambda takes in C++ 11",
    "start": "246690",
    "end": "252720"
  },
  {
    "text": "that could be an arbitrary type like end or our own class type whatsoever in C++",
    "start": "252720",
    "end": "260970"
  },
  {
    "text": "14 this once again got extended we can now say they are Auto it's a parameter",
    "start": "260970",
    "end": "267870"
  },
  {
    "text": "type and concepts not current this is the only",
    "start": "267870",
    "end": "274340"
  },
  {
    "text": "part where you can say Auto as a parameter type in a parameter list we",
    "start": "274340",
    "end": "282960"
  },
  {
    "text": "are talking then about generic lambdas I will show them to you next to the",
    "start": "282960",
    "end": "289650"
  },
  {
    "text": "parentheses we have the specify us like",
    "start": "289650",
    "end": "295440"
  },
  {
    "text": "mutable in C++ 11 already we can say that the lambda can modify it's captured",
    "start": "295440",
    "end": "302310"
  },
  {
    "text": "contents if copied by if captured by copy and then we need mutable to allow",
    "start": "302310",
    "end": "308940"
  },
  {
    "text": "this lambda to change the captured variable in C++ 17 we got Const exper so",
    "start": "308940",
    "end": "318360"
  },
  {
    "text": "context for all the things also apply to lambdas now we have implicit context per",
    "start": "318360",
    "end": "325169"
  },
  {
    "text": "lambdas I will show some examples about that to you as well with C++ 20 we will",
    "start": "325169",
    "end": "333120"
  },
  {
    "text": "get something in addition which is called Const",
    "start": "333120",
    "end": "338310"
  },
  {
    "text": "evil and as I'm not a native speaker I hope I do not say it's evil it comes",
    "start": "338310",
    "end": "343860"
  },
  {
    "text": "from evaluated and it means that this function then in fact will be evaluated",
    "start": "343860",
    "end": "349740"
  },
  {
    "text": "at compile time period it's a new thing it's a little bit related or it's",
    "start": "349740",
    "end": "356580"
  },
  {
    "text": "related to reflection coming probably this 23 so this is the first sign of it",
    "start": "356580",
    "end": "364190"
  },
  {
    "text": "next to day out we can have the exception specifier with no accept and",
    "start": "364190",
    "end": "369930"
  },
  {
    "text": "unfortunately I had to cross out the insurer and expect because there are no",
    "start": "369930",
    "end": "375030"
  },
  {
    "text": "contracts in C++ 20 anymore I hope you've heard of that if not it's",
    "start": "375030",
    "end": "380100"
  },
  {
    "text": "an entire discussion of its own after that we have the trailing return type where we can specify our return type off",
    "start": "380100",
    "end": "389940"
  },
  {
    "text": "the lambda can again be an INT or any arbitrary type we can omit it usually",
    "start": "389940",
    "end": "395640"
  },
  {
    "text": "but sometimes we need to be specific there after that once again",
    "start": "395640",
    "end": "403340"
  },
  {
    "text": "+20 appears there we can say requires because we have concepts in c plus plus",
    "start": "403340",
    "end": "409250"
  },
  {
    "text": "20 and lambdas will also work this concept then below that in the curly",
    "start": "409250",
    "end": "418250"
  },
  {
    "text": "braces we have the lambda body and after that in the parenthesis we can pass the",
    "start": "418250",
    "end": "425120"
  },
  {
    "text": "parameters to the lambda when we invoke it so it's roughly the evolution of",
    "start": "425120",
    "end": "431300"
  },
  {
    "text": "lambdas we can see the day in fact got changed and updated with every standard",
    "start": "431300",
    "end": "437389"
  },
  {
    "text": "so they are still hot now I have a question for you looking at this piece",
    "start": "437389",
    "end": "443690"
  },
  {
    "text": "of code only four lines it's a complete program well it or not",
    "start": "443690",
    "end": "451900"
  },
  {
    "text": "if you'd like to take just one thing from this talk then the right answer is",
    "start": "461430",
    "end": "466979"
  },
  {
    "text": "always it depends it depends NC + 1 + 20",
    "start": "466979",
    "end": "472740"
  },
  {
    "text": "as far as it goes now this is in fact valid it's an empty lambda which",
    "start": "472740",
    "end": "478110"
  },
  {
    "text": "captures nothing and is default initialized because it's default constructible there is discussion to",
    "start": "478110",
    "end": "485729"
  },
  {
    "text": "disallow it because it's well it's nice to show it on a slide but more than that",
    "start": "485729",
    "end": "491520"
  },
  {
    "text": "maybe no use let's have a look at",
    "start": "491520",
    "end": "497400"
  },
  {
    "text": "lambdas in the internals here I have JA string saying hello NDC tag down and",
    "start": "497400",
    "end": "506240"
  },
  {
    "text": "then I have a lambda below which captures the string by reference and has",
    "start": "506240",
    "end": "512370"
  },
  {
    "text": "a printf in it to print out the string now what what does this really do or",
    "start": "512370",
    "end": "519180"
  },
  {
    "text": "mean",
    "start": "519180",
    "end": "521990"
  },
  {
    "text": "and this part where I switch to C++ insights Chris heard of C++ insights",
    "start": "528480",
    "end": "536310"
  },
  {
    "text": "already all right great",
    "start": "536310",
    "end": "541400"
  },
  {
    "text": "C++ insights is heavily inspired by met God builds compiled explore so the",
    "start": "541400",
    "end": "547650"
  },
  {
    "text": "second question is who has heard of met got balls compiled explore okay who",
    "start": "547650",
    "end": "553230"
  },
  {
    "text": "hasn't heard of it go check it out got balls the dog anyway what you can do",
    "start": "553230",
    "end": "558960"
  },
  {
    "text": "here in C++ inside is type your source code into the left and at the right you",
    "start": "558960",
    "end": "565230"
  },
  {
    "text": "will get a transformed version and enriched version and this version will show you all the great things most of",
    "start": "565230",
    "end": "573540"
  },
  {
    "text": "the time the compiler does for us and in this case I can visualize what a",
    "start": "573540",
    "end": "580350"
  },
  {
    "text": "compiler does for this lambda what we can see here is alright it first starts",
    "start": "580350",
    "end": "587820"
  },
  {
    "text": "with the compiler generating a class for us because the closure type of a lambda",
    "start": "587820",
    "end": "593190"
  },
  {
    "text": "is a class next the compiler takes care",
    "start": "593190",
    "end": "600980"
  },
  {
    "text": "that all the variables I like to capture are in this class they become class",
    "start": "601040",
    "end": "607320"
  },
  {
    "text": "members in this case it's an array of references of type char con star and",
    "start": "607320",
    "end": "615930"
  },
  {
    "text": "then we have this part and this is where our our lambdas body goes into so it's a",
    "start": "615930",
    "end": "623880"
  },
  {
    "text": "little bit of syntactic sugar what we've written on the left the printf now goes",
    "start": "623880",
    "end": "629460"
  },
  {
    "text": "into the call operator of our closure type and there are in the coal operator",
    "start": "629460",
    "end": "636660"
  },
  {
    "text": "and that's why we can now below here",
    "start": "636660",
    "end": "642200"
  },
  {
    "text": "invoke this call operator and was that call the lambda which is essentially",
    "start": "642200",
    "end": "648510"
  },
  {
    "text": "what I'm doing here on the left with the parenthesis so it's basically",
    "start": "648510",
    "end": "659209"
  },
  {
    "text": "syntactic sugar the compiler does for us to transform the lambda into an already",
    "start": "659209",
    "end": "665100"
  },
  {
    "text": "existing feature set of C++ so there may be new at the top and they may have cost",
    "start": "665100",
    "end": "672629"
  },
  {
    "text": "compiler vendors a lot of work but internally they use just the things we",
    "start": "672629",
    "end": "679139"
  },
  {
    "text": "already had which i think is praying",
    "start": "679139",
    "end": "683870"
  },
  {
    "text": "now while I developed C++ insides I had",
    "start": "690830",
    "end": "695970"
  },
  {
    "text": "to work with a couple of strange examples and lambdas were the hottest",
    "start": "695970",
    "end": "702390"
  },
  {
    "text": "topic the things people are interested the most and so I try to get them right",
    "start": "702390",
    "end": "708930"
  },
  {
    "text": "and it took me several times and I'm not sure if I've succeeded or finished there",
    "start": "708930",
    "end": "714630"
  },
  {
    "text": "and there's something I came up with when trying to figure out their lambdas",
    "start": "714630",
    "end": "721890"
  },
  {
    "text": "can appear and the question to you is in",
    "start": "721890",
    "end": "728339"
  },
  {
    "text": "how many places here can I have a lambda I am NOT saying that senseful or that's",
    "start": "728339",
    "end": "734490"
  },
  {
    "text": "code you write on daily basis I really hope not it's just a question how many",
    "start": "734490",
    "end": "740940"
  },
  {
    "text": "can appear yeah how many places if you do not do a recursive lambda in lambda",
    "start": "740940",
    "end": "746820"
  },
  {
    "text": "stuff just give me a number let's say from zero to eight or so",
    "start": "746820",
    "end": "755120"
  },
  {
    "text": "I have five anybody willing to a Creed with lower number or higher number five",
    "start": "766660",
    "end": "776590"
  },
  {
    "text": "is in fact the correct number because I can have a lambda to initialize my",
    "start": "776590",
    "end": "781950"
  },
  {
    "text": "variable X makes no sense but I can do it next in the full loop I can have a",
    "start": "781950",
    "end": "789970"
  },
  {
    "text": "lambda in the initializer just printing out something and then of course a can",
    "start": "789970",
    "end": "797050"
  },
  {
    "text": "use the lambda to decrement X in the condition of the full loop and in the",
    "start": "797050",
    "end": "805330"
  },
  {
    "text": "end I can have another lambda in the full loop doing what we usually do when",
    "start": "805330",
    "end": "811810"
  },
  {
    "text": "we increment it just prints out after and then of course in the body of the",
    "start": "811810",
    "end": "817000"
  },
  {
    "text": "full loop I can have another lambda wrapping the printf as I said doesn't",
    "start": "817000",
    "end": "823780"
  },
  {
    "text": "make much sense but these are all the places where lambdas can appear in this example which is a lot",
    "start": "823780",
    "end": "832079"
  },
  {
    "text": "let's look at another example what happens if we capture a global variable",
    "start": "836200",
    "end": "843399"
  },
  {
    "text": "like here I have my index which is initialized with 2 and then I have main",
    "start": "843399",
    "end": "850560"
  },
  {
    "text": "where I use a lambda to capture X and",
    "start": "850560",
    "end": "855670"
  },
  {
    "text": "increment it and some feedback I'm getting sometimes is the code does not",
    "start": "855670",
    "end": "862570"
  },
  {
    "text": "compile because I'm incrementing X without having that that this lambda is",
    "start": "862570",
    "end": "869680"
  },
  {
    "text": "mutable let's use C++ and science once more",
    "start": "869680",
    "end": "876089"
  },
  {
    "text": "and let's inform this thing now we see once again okay compiler generates a",
    "start": "882910",
    "end": "889010"
  },
  {
    "text": "class for us and in fact in the",
    "start": "889010",
    "end": "894130"
  },
  {
    "text": "co-operators body it increments X by one",
    "start": "894130",
    "end": "898990"
  },
  {
    "text": "as a side note all the time I can transform this code means that it",
    "start": "899470",
    "end": "904970"
  },
  {
    "text": "compiles okay so that code compiles what",
    "start": "904970",
    "end": "911210"
  },
  {
    "text": "I can see here or what we cannot see here is this lambda captures nothing X",
    "start": "911210",
    "end": "920150"
  },
  {
    "text": "is not captured in this lambda and that's the reason why I can increment X",
    "start": "920150",
    "end": "927230"
  },
  {
    "text": "the compiler is smart and on our side there is no need to capture X and to",
    "start": "927230",
    "end": "934700"
  },
  {
    "text": "increase the size of this lambda because it's a global variable you can access it",
    "start": "934700",
    "end": "940700"
  },
  {
    "text": "from everywhere in this compilation unit in the compiler knows that sometimes",
    "start": "940700",
    "end": "946640"
  },
  {
    "text": "despite us because we overlook the fact that it's a global and we incremented",
    "start": "946640",
    "end": "951950"
  },
  {
    "text": "and we see side effects outside of the lambda or things like that so that's feedback I got in the past but in",
    "start": "951950",
    "end": "958460"
  },
  {
    "text": "general the compiler is on our side and tries to provide us with small and fast",
    "start": "958460",
    "end": "964220"
  },
  {
    "text": "code",
    "start": "964220",
    "end": "966550"
  },
  {
    "text": "we can also use lambdas together with function pointers so we have here the",
    "start": "982000",
    "end": "988480"
  },
  {
    "text": "signature of a function pointer returning an int taking an indignant char as arguments and we can assign a",
    "start": "988480",
    "end": "996009"
  },
  {
    "text": "lambda to that function pointer an application area for that can be a",
    "start": "996009",
    "end": "1001980"
  },
  {
    "text": "legacy API is where you have to deal with regular function pointers and now",
    "start": "1001980",
    "end": "1007139"
  },
  {
    "text": "you can still pass or can use a lambda to initialize them and you do not have",
    "start": "1007139",
    "end": "1012480"
  },
  {
    "text": "to change the legacy API if we once",
    "start": "1012480",
    "end": "1019889"
  },
  {
    "text": "again look on the internals",
    "start": "1019889",
    "end": "1023329"
  },
  {
    "text": "then the question is how does this work and this works because it's a capitalist lambda this only works with capitalist",
    "start": "1030420",
    "end": "1037750"
  },
  {
    "text": "Lambros because for capitalist lambdas the compiler creates as dysfunction which is called and woke compilers are",
    "start": "1037750",
    "end": "1045010"
  },
  {
    "text": "free to choose a name for that and if you look at this then you see that the",
    "start": "1045010",
    "end": "1051790"
  },
  {
    "text": "body of this invoke function is in fact the same as for a lambda can prove this",
    "start": "1051790",
    "end": "1060190"
  },
  {
    "text": "because it's right here and then there's a second thing it's a conversion operator we are looking at here and that",
    "start": "1060190",
    "end": "1068230"
  },
  {
    "text": "returns this static invoke function and",
    "start": "1068230",
    "end": "1074140"
  },
  {
    "text": "if you now look down here while initializing this function pointer then we can see that in fact in this whole",
    "start": "1074140",
    "end": "1081490"
  },
  {
    "text": "call chain this conversion operator is called returning dead static function of",
    "start": "1081490",
    "end": "1087880"
  },
  {
    "text": "the lambda and with that we can assign it to a function pointer that's again nothing magic we can do this by hand we",
    "start": "1087880",
    "end": "1095410"
  },
  {
    "text": "could have done this before just how lambdas interoperate with our code and",
    "start": "1095410",
    "end": "1101500"
  },
  {
    "text": "with the existing features by the way if",
    "start": "1101500",
    "end": "1107230"
  },
  {
    "text": "you have any questions feel free to write them",
    "start": "1107230",
    "end": "1111600"
  },
  {
    "text": "because I have a question maybe multiple questions here have some example code",
    "start": "1117390",
    "end": "1125920"
  },
  {
    "text": "are three variables a b and c of type char in the jar and then below I have my",
    "start": "1125920",
    "end": "1132910"
  },
  {
    "text": "variable F which initialized with lambda which captures by copy and it uses two",
    "start": "1132910",
    "end": "1140020"
  },
  {
    "text": "variables a B and C and for the following questions assume that we are",
    "start": "1140020",
    "end": "1145030"
  },
  {
    "text": "talking about an X 60 X 64 bit platform",
    "start": "1145030",
    "end": "1151140"
  },
  {
    "text": "the question is what is the size of this lambda in bytes",
    "start": "1151140",
    "end": "1162419"
  },
  {
    "text": "20 we have 20 24 24 20",
    "start": "1163930",
    "end": "1175870"
  },
  {
    "text": "know the size of the slammer so far as 12 bytes it's 12 bytes we have the usual",
    "start": "1177900",
    "end": "1190510"
  },
  {
    "text": "pairing rules our end is 4 byte long and our 2 chars",
    "start": "1190510",
    "end": "1197169"
  },
  {
    "text": "are also extended to full byte so we have 3 times 4 bytes that sums up to 12",
    "start": "1197169",
    "end": "1207720"
  },
  {
    "text": "so these are rules I'm not sure if I",
    "start": "1207720",
    "end": "1224860"
  },
  {
    "text": "understand the question right so oh",
    "start": "1224860",
    "end": "1228480"
  },
  {
    "text": "pardon me it's not 3 ins it's an int",
    "start": "1232320",
    "end": "1237700"
  },
  {
    "text": "initialized mr. value 3 so there that's why okay that's why you came up with 20-year ok now I can see it's just 1 in",
    "start": "1237700",
    "end": "1244570"
  },
  {
    "text": "its two chars so okay that's 12 bytes and I were",
    "start": "1244570",
    "end": "1252880"
  },
  {
    "text": "mostly work in the embedded domain with really small memory systems",
    "start": "1252880",
    "end": "1258399"
  },
  {
    "text": "so the pairing wastes me a couple of",
    "start": "1258399",
    "end": "1263770"
  },
  {
    "text": "bites and if I have to use to sing over and over it may disturb me earlier or",
    "start": "1263770",
    "end": "1271299"
  },
  {
    "text": "later so what can I do about this I can",
    "start": "1271299",
    "end": "1276580"
  },
  {
    "text": "slightly rearrange my captors have you seen it just a previous version just a",
    "start": "1276580",
    "end": "1283270"
  },
  {
    "text": "new version I switched the order I used",
    "start": "1283270",
    "end": "1290289"
  },
  {
    "text": "them instead of a B and C I'm now saying a C and B and with that I reduced the",
    "start": "1290289",
    "end": "1300130"
  },
  {
    "text": "size of SLAM there to 8 bytes now it's really a simple example and in",
    "start": "1300130",
    "end": "1307210"
  },
  {
    "text": "your code it may not be that simple just reordering the things you're using you can use in it captures",
    "start": "1307210",
    "end": "1315340"
  },
  {
    "text": "to specify the order you like the variables to be captured if you are not",
    "start": "1315340",
    "end": "1321830"
  },
  {
    "text": "able to restructure things in your lambdas body having said all that please",
    "start": "1321830",
    "end": "1331700"
  },
  {
    "text": "be aware this is what a standard tells us about what I've just shown you an",
    "start": "1331700",
    "end": "1338110"
  },
  {
    "text": "implementation may define the closure type differently from what is described",
    "start": "1338110",
    "end": "1343580"
  },
  {
    "text": "below provided this does not alter the observable behavior of the program other",
    "start": "1343580",
    "end": "1350690"
  },
  {
    "text": "than by changing the size and all alignment of the closure type so",
    "start": "1350690",
    "end": "1356570"
  },
  {
    "text": "basically what I've shown you works today and all the compilers I've checked",
    "start": "1356570",
    "end": "1362170"
  },
  {
    "text": "but compilers are free to change this behavior because you're not supposed to observe this behavior so it's up to you",
    "start": "1362170",
    "end": "1369770"
  },
  {
    "text": "if you have to save but it may be valid to do it currently but it may fall down",
    "start": "1369770",
    "end": "1379280"
  },
  {
    "text": "later C++ 14 gave us generic lambdas and",
    "start": "1379280",
    "end": "1386179"
  },
  {
    "text": "generic Landers the one place where I can write auto in a parameter as a",
    "start": "1386179",
    "end": "1392540"
  },
  {
    "text": "parameter type parameter list under",
    "start": "1392540",
    "end": "1397760"
  },
  {
    "text": "state I can now say okay I have this lambda which has an auto parameter we",
    "start": "1397760",
    "end": "1403550"
  },
  {
    "text": "and I now can call it with double or with an int how does this work",
    "start": "1403550",
    "end": "1413440"
  },
  {
    "text": "once again I'm looking behind the scenes we can see that again of course compiler",
    "start": "1419110",
    "end": "1426350"
  },
  {
    "text": "created the class for us this is the interesting part our call operator it's",
    "start": "1426350",
    "end": "1433180"
  },
  {
    "text": "now a template and our auto parameter we",
    "start": "1433180",
    "end": "1441490"
  },
  {
    "text": "it's just a template parameter it's how",
    "start": "1442540",
    "end": "1449570"
  },
  {
    "text": "generic lambdas work and below here we can see ok these are the instantiations",
    "start": "1449570",
    "end": "1455540"
  },
  {
    "text": "we got one for double we equals double now and we got another one for INT once",
    "start": "1455540",
    "end": "1467870"
  },
  {
    "text": "again I'm impressed really simple using existing stuff",
    "start": "1467870",
    "end": "1476500"
  },
  {
    "text": "what's the type of L is the question the type of L is not known it's the type of",
    "start": "1476860",
    "end": "1486790"
  },
  {
    "text": "the lambda the closure type so I have to make the name up and C++ insides because",
    "start": "1486790",
    "end": "1493070"
  },
  {
    "text": "we don't know the type as programmers that's why we need Auto to capture the",
    "start": "1493070",
    "end": "1499580"
  },
  {
    "text": "type of a lambda start your question",
    "start": "1499580",
    "end": "1503950"
  },
  {
    "text": "then let's chat later bought it",
    "start": "1504850",
    "end": "1508870"
  },
  {
    "text": "what can we do with generic lambdas one thing we can do now that we've learned",
    "start": "1515000",
    "end": "1521730"
  },
  {
    "text": "that the parameter type is in fact the",
    "start": "1521730",
    "end": "1526740"
  },
  {
    "text": "template parameter we can apply C++ 70 in features like context brief to do in",
    "start": "1526740",
    "end": "1537210"
  },
  {
    "text": "1 lambda something like figuring out what is the type and what is the right",
    "start": "1537210",
    "end": "1543330"
  },
  {
    "text": "thing to do so if the type is a double I like to return we times 2.0 the type is",
    "start": "1543330",
    "end": "1551850"
  },
  {
    "text": "not undone I assume it's down on it I return we times 2 so maintaining the",
    "start": "1551850",
    "end": "1562610"
  },
  {
    "text": "category of the type I'm not multiplying double words and here these are things",
    "start": "1562610",
    "end": "1570510"
  },
  {
    "text": "we can do because we can use this context brief together ways to store the same because we are in a template",
    "start": "1570510",
    "end": "1577799"
  },
  {
    "text": "effectively looking at another example",
    "start": "1577799",
    "end": "1586070"
  },
  {
    "text": "the dangling reference strap how I call it you may have come across something",
    "start": "1586490",
    "end": "1591780"
  },
  {
    "text": "like this we have our variable X in n we have our lambda L which captures X by",
    "start": "1591780",
    "end": "1599159"
  },
  {
    "text": "reference in the lambdas body it returns the result of X times X and at the end a",
    "start": "1599159",
    "end": "1606740"
  },
  {
    "text": "lot of code is in between return this lambda question what's happening",
    "start": "1606740",
    "end": "1616549"
  },
  {
    "text": "it's undefined behavior you say have you checked the standard because the",
    "start": "1617859",
    "end": "1623330"
  },
  {
    "text": "standard has a really nice wording for this it says if a non reference entity",
    "start": "1623330",
    "end": "1629239"
  },
  {
    "text": "is implicitly or explicitly captured by reference in walking the function call",
    "start": "1629239",
    "end": "1634940"
  },
  {
    "text": "operator of the corresponding lambda expression after the lifetime of the entity has ended is likely to result in",
    "start": "1634940",
    "end": "1643399"
  },
  {
    "text": "undefined behavior so unfortunately we don't know if you're right but usually",
    "start": "1643399",
    "end": "1650840"
  },
  {
    "text": "aggression and it is undefined behavior I have no idea what likely has to mean",
    "start": "1650840",
    "end": "1656960"
  },
  {
    "text": "here because we cannot detect undefined behavior and if it's likely then whether",
    "start": "1656960",
    "end": "1662419"
  },
  {
    "text": "or not it works you cannot depend on it so yes you're right it's it's an affiant behavior and we can fix this as shown on",
    "start": "1662419",
    "end": "1670220"
  },
  {
    "text": "this slide easily by capturing X with AZ",
    "start": "1670220",
    "end": "1676159"
  },
  {
    "text": "copy that fixes the problem that's good now let's say over the course of our",
    "start": "1676159",
    "end": "1683179"
  },
  {
    "text": "development we change this example slightly because now we need our end to",
    "start": "1683179",
    "end": "1689539"
  },
  {
    "text": "be allocated on the heap so we have a new here we also fix the rest of the lambda T referencing X and so on okay",
    "start": "1689539",
    "end": "1699639"
  },
  {
    "text": "works sort of you know the situation",
    "start": "1699639",
    "end": "1706279"
  },
  {
    "text": "something works for a couple of time and then someone figures out Oh know that there's a memory leak in it I know how",
    "start": "1706279",
    "end": "1712309"
  },
  {
    "text": "to fix this that's easy we have to delete this memory of course right",
    "start": "1712309",
    "end": "1718509"
  },
  {
    "text": "calling you and delete always together ouch",
    "start": "1718509",
    "end": "1724539"
  },
  {
    "text": "now I'm returning in this lambda something which got deleted so capturing",
    "start": "1724539",
    "end": "1731690"
  },
  {
    "text": "by copy may not always be that safe of course you can again fix this by using",
    "start": "1731690",
    "end": "1737419"
  },
  {
    "text": "SharePoint us the end of things work as expected beware of these traps let's",
    "start": "1737419",
    "end": "1746809"
  },
  {
    "text": "talk a little bit more about captures ERF a class called test and in the",
    "start": "1746809",
    "end": "1754690"
  },
  {
    "text": "constructor of this class for some reason I have a lambda which captures",
    "start": "1754690",
    "end": "1760090"
  },
  {
    "text": "one of the class members a and returns the result of a plus two it does so by",
    "start": "1760090",
    "end": "1768160"
  },
  {
    "text": "capturing my copy and just because I can",
    "start": "1768160",
    "end": "1774460"
  },
  {
    "text": "I once print the result of the lambda arm then I'm invoking a in the context",
    "start": "1774460",
    "end": "1782350"
  },
  {
    "text": "of test and after they are they do not have printf using the lambda question is",
    "start": "1782350",
    "end": "1790780"
  },
  {
    "text": "and I make it easy for you it's initialized with two two plus two is",
    "start": "1790780",
    "end": "1796780"
  },
  {
    "text": "four so the question is what is the output of the program",
    "start": "1796780",
    "end": "1803580"
  },
  {
    "text": "four four four four we have something other than four four high five no it's",
    "start": "1809350",
    "end": "1821780"
  },
  {
    "text": "four five of course it's four five",
    "start": "1821780",
    "end": "1826240"
  },
  {
    "text": "because what he captured here is not a",
    "start": "1829250",
    "end": "1837039"
  },
  {
    "text": "it's the dis pointer and that refers to",
    "start": "1837039",
    "end": "1842240"
  },
  {
    "text": "ale and that's why we see the effect of changing a outside of the lambda inside",
    "start": "1842240",
    "end": "1848659"
  },
  {
    "text": "of the lambda okay and it's an unfortunate trap we can get into once",
    "start": "1848659",
    "end": "1858679"
  },
  {
    "text": "again there are ways to fix this this is the starters I introduced earlier to you or dereference this with that we can say",
    "start": "1858679",
    "end": "1866690"
  },
  {
    "text": "that we like to capture a copy of this or a deep copy that means it's expensive",
    "start": "1866690",
    "end": "1874400"
  },
  {
    "text": "probably depending on your class and with this the output is 4 4 is hoped or",
    "start": "1874400",
    "end": "1881539"
  },
  {
    "text": "expected",
    "start": "1881539",
    "end": "1883570"
  },
  {
    "text": "we can once again use C++ science to pick a little bit behind this and here's",
    "start": "1889740",
    "end": "1898140"
  },
  {
    "text": "the example reduced version I use here",
    "start": "1898140",
    "end": "1904710"
  },
  {
    "text": "left to star this for capturing then we can see you're on the ride that in fact",
    "start": "1904710",
    "end": "1911820"
  },
  {
    "text": "the lambda now contains the member of",
    "start": "1911820",
    "end": "1917040"
  },
  {
    "text": "type test was the name on the line on the Landis name is also made up compiled",
    "start": "1917040",
    "end": "1924120"
  },
  {
    "text": "on has other ways to do that if I omit this and just capture by copy then we",
    "start": "1924120",
    "end": "1932910"
  },
  {
    "text": "can see in fact what we capturing then is a copy of this pointer because this",
    "start": "1932910",
    "end": "1940260"
  },
  {
    "text": "is what we usually get when we copy a pointer copy of the pointer there's not",
    "start": "1940260",
    "end": "1948240"
  },
  {
    "text": "a way to approach this if you like and that c++ for teens in it captures you",
    "start": "1948240",
    "end": "1956100"
  },
  {
    "text": "can say here a1 equals a and we now",
    "start": "1956100",
    "end": "1964620"
  },
  {
    "text": "transform this then we can see that we have introduced a new variable in our",
    "start": "1964620",
    "end": "1969750"
  },
  {
    "text": "lambda a1 and this the one which is used and down here it's initialized with the",
    "start": "1969750",
    "end": "1977340"
  },
  {
    "text": "original a and that's interesting for me because once again it came down or comes",
    "start": "1977340",
    "end": "1984600"
  },
  {
    "text": "down to size capturing this as a copy",
    "start": "1984600",
    "end": "1989790"
  },
  {
    "text": "can be expensive because it's a deep copy you have to copy every member of",
    "start": "1989790",
    "end": "1995750"
  },
  {
    "text": "the object you're just capturing or copying so we don't know large stood",
    "start": "1995750",
    "end": "2002390"
  },
  {
    "text": "string or something like this plus in my simple example here i captured two int",
    "start": "2002390",
    "end": "2007990"
  },
  {
    "text": "while I'm just needing one and in the",
    "start": "2007990",
    "end": "2013580"
  },
  {
    "text": "world I live in that's a waste of resources so I'm more happy with this in it captures you can if you like use the",
    "start": "2013580",
    "end": "2022190"
  },
  {
    "text": "same name again then we have a new and variable called a",
    "start": "2022190",
    "end": "2030790"
  },
  {
    "text": "is used inside of the lambda it's what",
    "start": "2030790",
    "end": "2036170"
  },
  {
    "text": "you prefer to introduce a new name to make it more distinguishable or to use",
    "start": "2036170",
    "end": "2041840"
  },
  {
    "text": "the existing name to give it the meaning that still a we are talking about",
    "start": "2041840",
    "end": "2049600"
  },
  {
    "text": "once more talking about the size of lambda we have here our class test and",
    "start": "2058470",
    "end": "2067550"
  },
  {
    "text": "it's a reduced version it has just one member of type int a and we capture",
    "start": "2067550",
    "end": "2074280"
  },
  {
    "text": "again a copy so that means that we captured this by copy but now we capture",
    "start": "2074280",
    "end": "2082710"
  },
  {
    "text": "something more a Const in called size to declare an array of ins to size size",
    "start": "2082710",
    "end": "2091648"
  },
  {
    "text": "within the lambda and the question is once again what is the size of this",
    "start": "2091649",
    "end": "2098069"
  },
  {
    "text": "lambda",
    "start": "2098069",
    "end": "2100430"
  },
  {
    "text": "let me add asked differently his size part of the lambda size captured in the",
    "start": "2115150",
    "end": "2122810"
  },
  {
    "text": "lambda yes or no no why no you're right",
    "start": "2122810",
    "end": "2133640"
  },
  {
    "text": "so the answer is it's not captured in the lambda",
    "start": "2133640",
    "end": "2138670"
  },
  {
    "text": "I can prove it also as my tools or may",
    "start": "2143840",
    "end": "2149210"
  },
  {
    "text": "not be the best proof but it's open source you can check it because what we",
    "start": "2149210",
    "end": "2156290"
  },
  {
    "text": "are looking at here is so-called OD are used you want definition rule use and we",
    "start": "2156290",
    "end": "2161540"
  },
  {
    "text": "don't need size within the lambda because the as you said correctly size",
    "start": "2161540",
    "end": "2169430"
  },
  {
    "text": "is constant so we do not need to capture it in the lambda that's nice",
    "start": "2169430",
    "end": "2177010"
  },
  {
    "text": "more examples it's what I call the sleeping Landers we have six lambdas",
    "start": "2183230",
    "end": "2188849"
  },
  {
    "text": "here a 12 they all do basically either capture a",
    "start": "2188849",
    "end": "2194160"
  },
  {
    "text": "stood string and print it out stood string called foo or just do nothing and",
    "start": "2194160",
    "end": "2200359"
  },
  {
    "text": "there are different versions of it some capture by copy is some by named copy",
    "start": "2200359",
    "end": "2205589"
  },
  {
    "text": "and some by named reference if you look really closely at this small piece of",
    "start": "2205589",
    "end": "2212880"
  },
  {
    "text": "code then you will find out that none of these Landers is in fact invoked there",
    "start": "2212880",
    "end": "2220619"
  },
  {
    "text": "are dead code it's a complete example its main how many unused variables will",
    "start": "2220619",
    "end": "2229980"
  },
  {
    "text": "I get from a compiler let's say give me",
    "start": "2229980",
    "end": "2236220"
  },
  {
    "text": "a number from 0 to 7 F 1 you say at 6 7",
    "start": "2236220",
    "end": "2245940"
  },
  {
    "text": "ok more numbers the surprising number is",
    "start": "2245940",
    "end": "2255359"
  },
  {
    "text": "3 I get 3 unused variables that's B E",
    "start": "2255359",
    "end": "2261059"
  },
  {
    "text": "and F and why is there a name I cop the",
    "start": "2261059",
    "end": "2267960"
  },
  {
    "text": "I capture by copy the stoat string called foo capturing by copy means that",
    "start": "2267960",
    "end": "2275369"
  },
  {
    "text": "this stood string gets copied copying a stood string has side effects because it needs to allocate memory it needs to",
    "start": "2275369",
    "end": "2281849"
  },
  {
    "text": "copy memory from A to B it's what we like that thing to do because otherwise",
    "start": "2281849",
    "end": "2287369"
  },
  {
    "text": "we cannot copy your stood string but this side effect causes the compiler to see oh that thing is used",
    "start": "2287369",
    "end": "2294660"
  },
  {
    "text": "I cannot optimize this way because to construct the dot something here so a is",
    "start": "2294660",
    "end": "2302279"
  },
  {
    "text": "not an unused variable B on the other hand of course it's namely lambda capturing by copy but it doesn't capture",
    "start": "2302279",
    "end": "2309510"
  },
  {
    "text": "anything so that gets an unused variable warning C is",
    "start": "2309510",
    "end": "2317240"
  },
  {
    "text": "more or less equivalent to a so that's easy these the more interesting thing",
    "start": "2318920",
    "end": "2324960"
  },
  {
    "text": "because they're half lambda with an empty body but I specifically say in the",
    "start": "2324960",
    "end": "2332760"
  },
  {
    "text": "capitalist as I like to capture food and if I tell the compiler to capture food",
    "start": "2332760",
    "end": "2339420"
  },
  {
    "text": "the compiler will do so and was there I'm in the same area as a I will get a",
    "start": "2339420",
    "end": "2347790"
  },
  {
    "text": "copy of that stood string and then left are the two reference captures which are",
    "start": "2347790",
    "end": "2354270"
  },
  {
    "text": "easy to the compiler in still will see through and will figure out that they are unused in fact why I'm telling you",
    "start": "2354270",
    "end": "2360900"
  },
  {
    "text": "this because this code may look very innocent and because the Impressionists",
    "start": "2360900",
    "end": "2366090"
  },
  {
    "text": "you're not using this lambda it will do nothing but it will copy on each and",
    "start": "2366090",
    "end": "2372660"
  },
  {
    "text": "every time you pass it a for example C and T will copy even if you do not use",
    "start": "2372660",
    "end": "2380280"
  },
  {
    "text": "this lambda from one point of view is understandable but I've seen code where",
    "start": "2380280",
    "end": "2388050"
  },
  {
    "text": "the lambda is used to print out some debug message and the assumption was because we are not invoking this lambda",
    "start": "2388050",
    "end": "2394070"
  },
  {
    "text": "it will not do anything to our runtime or to our resources that's unfortunately",
    "start": "2394070",
    "end": "2400560"
  },
  {
    "text": "not true looking at c++ 17 we've got",
    "start": "2400560",
    "end": "2408260"
  },
  {
    "text": "implicitly context pearl anders and was implicitly context parameters I can do",
    "start": "2408260",
    "end": "2415920"
  },
  {
    "text": "sing as shown here in Maine I have an",
    "start": "2415920",
    "end": "2421530"
  },
  {
    "text": "array of ends and then I have this all",
    "start": "2421530",
    "end": "2428280"
  },
  {
    "text": "off algorithm which checks with the",
    "start": "2428280",
    "end": "2433860"
  },
  {
    "text": "lambda or if all of the name numbers passed in our even and thanks to C++ 17",
    "start": "2433860",
    "end": "2441720"
  },
  {
    "text": "and context per this code is evaluated at compile time so we you will not pay",
    "start": "2441720",
    "end": "2448440"
  },
  {
    "text": "any runtime over for that now one question may appear",
    "start": "2448440",
    "end": "2453720"
  },
  {
    "text": "that's why I'm having to show you so much lines of code while I am just",
    "start": "2453720",
    "end": "2458910"
  },
  {
    "text": "trying to show you three to four because I'm really cool and I can show you how",
    "start": "2458910",
    "end": "2464670"
  },
  {
    "text": "the algorithm is implemented can do it on my own no unfortunately in C++ 17 we",
    "start": "2464670",
    "end": "2471270"
  },
  {
    "text": "have implicitly income tax parameters but about all of the items are not all concepts per so the all even are all off",
    "start": "2471270",
    "end": "2479930"
  },
  {
    "text": "algorithm here is not constable in C++ 17 it will be in 20 and this will make",
    "start": "2479930",
    "end": "2487260"
  },
  {
    "text": "this code much simpler and 20 because I do not have to show you all the boilerplate code I can just show you",
    "start": "2487260",
    "end": "2494130"
  },
  {
    "text": "what I like you to show now we are down to three or four lines there can we",
    "start": "2494130",
    "end": "2504360"
  },
  {
    "text": "apply or how can we apply Lambros these are examples from C++ in sides they are",
    "start": "2504360",
    "end": "2509670"
  },
  {
    "text": "a half a function called rap in parents or Curly's and what it is essentially I",
    "start": "2509670",
    "end": "2516480"
  },
  {
    "text": "have a lot of code which needs to be wrapped either in parenthesis or in",
    "start": "2516480",
    "end": "2522630"
  },
  {
    "text": "Curly's if you make up and initialize a list or a function call then there are",
    "start": "2522630",
    "end": "2529050"
  },
  {
    "text": "parentheses or Curly's involved involved and there is some code before and some",
    "start": "2529050",
    "end": "2535170"
  },
  {
    "text": "code after to generate these phrases in the correct type of the prices so before",
    "start": "2535170",
    "end": "2541860"
  },
  {
    "text": "I used to write this function I had this well is it a parenthesis or",
    "start": "2541860",
    "end": "2547440"
  },
  {
    "text": "is it a curly all over the place opening and closing so it was duplicated code",
    "start": "2547440",
    "end": "2554190"
  },
  {
    "text": "all over the place using a lambda I can now say okay I have this weapon Curly's",
    "start": "2554190",
    "end": "2559950"
  },
  {
    "text": "a parenthesis function which I tell whether it's security or parenthesis I",
    "start": "2559950",
    "end": "2564990"
  },
  {
    "text": "need and then I pass the lambda and this lambda can now fill the space between",
    "start": "2564990",
    "end": "2571490"
  },
  {
    "text": "the parenthesis or the Curly's so what I really need so that dropped a lot of",
    "start": "2571490",
    "end": "2577380"
  },
  {
    "text": "lines of code and implementation another thing I have",
    "start": "2577380",
    "end": "2583030"
  },
  {
    "text": "is for each argument so often if you write programs we have parameter lists",
    "start": "2583030",
    "end": "2590590"
  },
  {
    "text": "when you call a function when you write a function and I have to make that up again so I have to come a separate these",
    "start": "2590590",
    "end": "2597700"
  },
  {
    "text": "lists and this is a function which does this for me and it's once again I do",
    "start": "2597700",
    "end": "2603370"
  },
  {
    "text": "some code before and then I loop over a list of an array and I either insert a",
    "start": "2603370",
    "end": "2612400"
  },
  {
    "text": "comma invoke the function or do not insert a comma because for the first element no comma is needed and so on so",
    "start": "2612400",
    "end": "2622420"
  },
  {
    "text": "this again dropped some lines of code",
    "start": "2622420",
    "end": "2626280"
  },
  {
    "text": "one thing I also like is what I can do with lambdas is make more variables",
    "start": "2627600",
    "end": "2633910"
  },
  {
    "text": "constant I'll like cons really much and I like my variables to be constant yeah",
    "start": "2633910",
    "end": "2641070"
  },
  {
    "text": "this is an example how I use it to make a stud string cons because this stood",
    "start": "2647370",
    "end": "2653620"
  },
  {
    "text": "string is either initialized with a",
    "start": "2653620",
    "end": "2659100"
  },
  {
    "text": "global value or with something made up so it depends whether it's an lambda we",
    "start": "2660180",
    "end": "2668470"
  },
  {
    "text": "are looking at then I have to say operator in front and do things a little",
    "start": "2668470",
    "end": "2673840"
  },
  {
    "text": "different or if it's a regular class method then I can just return the name",
    "start": "2673840",
    "end": "2679540"
  },
  {
    "text": "of this method there are different approaches I can initialize my stud string either empty or with the more",
    "start": "2679540",
    "end": "2686980"
  },
  {
    "text": "likely if branch but then it's not Const",
    "start": "2686980",
    "end": "2692050"
  },
  {
    "text": "wrapping that whole thing in a lambda and returning either A or B from the",
    "start": "2692050",
    "end": "2698530"
  },
  {
    "text": "lambda enables me to have the stud string being constant that's I believe",
    "start": "2698530",
    "end": "2706410"
  },
  {
    "text": "partially taken from maybe JavaScript where it's called immediately invoked function expression so it's not so new",
    "start": "2706410",
    "end": "2714490"
  },
  {
    "text": "technique if you program on the linux or with the",
    "start": "2714490",
    "end": "2723540"
  },
  {
    "text": "POSIX API you may have come across code like this I have a read data function",
    "start": "2723540",
    "end": "2729780"
  },
  {
    "text": "here which opens a file that open returns a file descriptor which I check",
    "start": "2729780",
    "end": "2734970"
  },
  {
    "text": "where as minus 1 so operation failed and I return 0 or not then I can read from",
    "start": "2734970",
    "end": "2741210"
  },
  {
    "text": "this file I can check whether this read was successful then I can truncate this",
    "start": "2741210",
    "end": "2747000"
  },
  {
    "text": "file because I've already read it and then I close this file and I return the",
    "start": "2747000",
    "end": "2753180"
  },
  {
    "text": "length probably cast it was an error cost do you see the buck please I have a",
    "start": "2753180",
    "end": "2764580"
  },
  {
    "text": "file descriptor leak in Lyon was it 13 because they are returning 0 without",
    "start": "2764580",
    "end": "2771120"
  },
  {
    "text": "closing the file descriptor excellently spotted what can I do about this well I can be more careful of course but I can",
    "start": "2771120",
    "end": "2780330"
  },
  {
    "text": "also use a couple of utilities I can say ok I have here a class called final",
    "start": "2780330",
    "end": "2787410"
  },
  {
    "text": "action and I create a variable out of it called cleanup and to that class I pass",
    "start": "2787410",
    "end": "2793770"
  },
  {
    "text": "a lambda and this lambda checks whether FTE is equal is not equal to minus 1 and",
    "start": "2793770",
    "end": "2802170"
  },
  {
    "text": "if so it closes the file descriptor now",
    "start": "2802170",
    "end": "2808290"
  },
  {
    "text": "what's the implementation of final action this is the rough implementation",
    "start": "2808290",
    "end": "2813840"
  },
  {
    "text": "of final action it's not from me if you heard about the guideline support library you can check it out it's in",
    "start": "2813840",
    "end": "2819780"
  },
  {
    "text": "there much more verbose and suited for more use cases than that simple one but",
    "start": "2819780",
    "end": "2825330"
  },
  {
    "text": "it boils down to being a class template which has only one member and that's of",
    "start": "2825330",
    "end": "2833520"
  },
  {
    "text": "type T the type you instantiate the template this last template with it's",
    "start": "2833520",
    "end": "2839430"
  },
  {
    "text": "called M action and in the constructor this thing you pass in to the",
    "start": "2839430",
    "end": "2845970"
  },
  {
    "text": "constructor is moved in to M action in to the member variable and that's it so",
    "start": "2845970",
    "end": "2851910"
  },
  {
    "text": "essentially I'm storing the lambda R in this class and the previous thing is I mean walking it in the destructor so",
    "start": "2851910",
    "end": "2859170"
  },
  {
    "text": "every time I leave scope the destructor kicks in and my lambda is called and can",
    "start": "2859170",
    "end": "2866880"
  },
  {
    "text": "clean up stuff and I like that much more than being really great at spotting to",
    "start": "2866880",
    "end": "2874559"
  },
  {
    "text": "things where misty close because now I cannot miss a close anymore it's not",
    "start": "2874559",
    "end": "2883290"
  },
  {
    "text": "something that the question is it's something I wrote myself I may have wrote it before but it's publicly",
    "start": "2883290",
    "end": "2891059"
  },
  {
    "text": "available as the guidelines support library if you have heard of that and I'm Microsoft has an implementation on",
    "start": "2891059",
    "end": "2896490"
  },
  {
    "text": "get up so it's there it's much more both suited for more use cases than this one",
    "start": "2896490",
    "end": "2902190"
  },
  {
    "text": "but it's not part of the standard library now looking at C++ 20 we can now",
    "start": "2902190",
    "end": "2914280"
  },
  {
    "text": "have lambda captures that capture pack in spare expansions and apply move to it",
    "start": "2914280",
    "end": "2922140"
  },
  {
    "text": "and that's new because we can now efficiently capture a pack in a lambdas",
    "start": "2922140",
    "end": "2929970"
  },
  {
    "text": "in it capture list and move it to save resources I have an example here to show",
    "start": "2929970",
    "end": "2936630"
  },
  {
    "text": "what it can do I have to invoke later function which appears the stood string",
    "start": "2936630",
    "end": "2941819"
  },
  {
    "text": "two three stood strings he'll space world and to invoke later function is a",
    "start": "2941819",
    "end": "2950069"
  },
  {
    "text": "very big template which inside returns just a lambda which captures all the",
    "start": "2950069",
    "end": "2957599"
  },
  {
    "text": "variable arguments and marks here the muriatic pack and the plies stood",
    "start": "2957599",
    "end": "2963599"
  },
  {
    "text": "forward to them to each of the arguments passed in to forward them preserving the",
    "start": "2963599",
    "end": "2971190"
  },
  {
    "text": "value category inside of the lambda and the lambda later on then if you invoke",
    "start": "2971190",
    "end": "2977099"
  },
  {
    "text": "it calls foo passing once again the arguments",
    "start": "2977099",
    "end": "2982960"
  },
  {
    "text": "now inside the lambda and was there'd we can move that stood string efficiently",
    "start": "2982960",
    "end": "2989140"
  },
  {
    "text": "into the lambda without having to copy it when it is captured and that's new",
    "start": "2989140",
    "end": "2994360"
  },
  {
    "text": "and c++ similar twenty you before they had were able to capture parameter packs",
    "start": "2994360",
    "end": "3000390"
  },
  {
    "text": "but you could not apply functions likes that move or stood forward to each of",
    "start": "3000390",
    "end": "3005430"
  },
  {
    "text": "the captured barrels arguments we will",
    "start": "3005430",
    "end": "3015060"
  },
  {
    "text": "also have templated lambdas and the question is what are good for I mean in",
    "start": "3015060",
    "end": "3022560"
  },
  {
    "text": "c++ 14 we have generic lambdas so I can write the max lambda which figures out",
    "start": "3022560",
    "end": "3029040"
  },
  {
    "text": "where our XO epsilon is the greater one and returns that one so I can call it",
    "start": "3029040",
    "end": "3035610"
  },
  {
    "text": "max with two comma three it works and I can call max with two comma 3.0 that",
    "start": "3035610",
    "end": "3044910"
  },
  {
    "text": "also works but it's not correct because now I'm either returning an end or on",
    "start": "3044910",
    "end": "3050790"
  },
  {
    "text": "double so I have some cast some implicit cars to compile at us from you and was",
    "start": "3050790",
    "end": "3060720"
  },
  {
    "text": "template of lambdas in C++ xx I can fix the thing I can now say okay if a type",
    "start": "3060720",
    "end": "3068160"
  },
  {
    "text": "name teeth that lambda takes and my both parameters X and epsilon are of that type teeth and with that I'm in the same",
    "start": "3068160",
    "end": "3076440"
  },
  {
    "text": "road as we can go with usual templates or function templates I can now say that",
    "start": "3076440",
    "end": "3082260"
  },
  {
    "text": "both parameters are of the same type that something I cannot do in C++ 40m is",
    "start": "3082260",
    "end": "3089640"
  },
  {
    "text": "order I can also use this to for example say",
    "start": "3089640",
    "end": "3097310"
  },
  {
    "text": "okay my lambda takes the stood vector of type T so we can use it as a regular",
    "start": "3097310",
    "end": "3105369"
  },
  {
    "text": "template and I can also say okay my",
    "start": "3105369",
    "end": "3111850"
  },
  {
    "text": "parameter type can also be an on type parameter type for example size T saying",
    "start": "3111850",
    "end": "3120920"
  },
  {
    "text": "okay this lambda takes the stood array of type int and was the size N and the",
    "start": "3120920",
    "end": "3127730"
  },
  {
    "text": "sizes n is determined by the compiler through the template so this enables us",
    "start": "3127730",
    "end": "3134840"
  },
  {
    "text": "to do a lot of new things and now one can I come up and can say but I can do",
    "start": "3134840",
    "end": "3144230"
  },
  {
    "text": "this in C++ 14 already with audio",
    "start": "3144230",
    "end": "3151540"
  },
  {
    "text": "doesn't compile",
    "start": "3162570",
    "end": "3165680"
  },
  {
    "text": "once again the answer is it depends in jesusí it does in clang it doesn't as",
    "start": "3173839",
    "end": "3183109"
  },
  {
    "text": "far it goes I know that there is something either a feature or a buck in",
    "start": "3183109",
    "end": "3189499"
  },
  {
    "text": "GCC because in GCC you can apply Auto to every function not just two templates",
    "start": "3189499",
    "end": "3196069"
  },
  {
    "text": "I'm not sure if that's because we are looking at concepts and there is some",
    "start": "3196069",
    "end": "3201799"
  },
  {
    "text": "check missing and this is why and cheese's see this example compiles I",
    "start": "3201799",
    "end": "3206869"
  },
  {
    "text": "believe it's not well it's C++ I trust clang more on that side once again we",
    "start": "3206869",
    "end": "3215569"
  },
  {
    "text": "see plus plus 20 we will have default constructible lambdas which can be used",
    "start": "3215569",
    "end": "3221209"
  },
  {
    "text": "in a deco type expression and that makes things really funny so imagine having",
    "start": "3221209",
    "end": "3227890"
  },
  {
    "text": "that stood map which you like to equip with a custom comparison operation so in",
    "start": "3227890",
    "end": "3236989"
  },
  {
    "text": "C++ 17 I have to write compare I created lambda which compares a X and epsilon",
    "start": "3236989",
    "end": "3244670"
  },
  {
    "text": "and then I have to say that my stood map is of type stood string of end and of",
    "start": "3244670",
    "end": "3251479"
  },
  {
    "text": "deco type of compare it works of course",
    "start": "3251479",
    "end": "3256719"
  },
  {
    "text": "saying is now 1/2 this compare variable leaking around it leaks in adjacent",
    "start": "3256719",
    "end": "3263299"
  },
  {
    "text": "scope is accessible after the stood map and the only reason it's there is for",
    "start": "3263299",
    "end": "3268959"
  },
  {
    "text": "this stood map so what more like to have",
    "start": "3268959",
    "end": "3274249"
  },
  {
    "text": "it where it belongs to together with steps to the map and that's something I",
    "start": "3274249",
    "end": "3280640"
  },
  {
    "text": "can do with C++ 20 because I cannot move this lambda into the deco type",
    "start": "3280640",
    "end": "3287299"
  },
  {
    "text": "expression saving me coming up to the name that's always good because naming",
    "start": "3287299",
    "end": "3295189"
  },
  {
    "text": "is hard and it's now together where it",
    "start": "3295189",
    "end": "3300349"
  },
  {
    "text": "belongs to comparison operation this lambda now is directly couple",
    "start": "3300349",
    "end": "3306410"
  },
  {
    "text": "withstood map after all that examples of",
    "start": "3306410",
    "end": "3313760"
  },
  {
    "text": "lambdas when question may remain can be overused slam doors I mean they are",
    "start": "3313760",
    "end": "3319340"
  },
  {
    "text": "crate they are interesting and oh boy here we can that's an example I written",
    "start": "3319340",
    "end": "3324470"
  },
  {
    "text": "on my own in C++ in sides I stumbled over it when preparing the talk F al and",
    "start": "3324470",
    "end": "3331700"
  },
  {
    "text": "are here to initialize a pool and all that lambda does is essentially a returning a value applying a lander here",
    "start": "3331700",
    "end": "3344600"
  },
  {
    "text": "is nonsense I had something else in mind or a refactor that example in the past day I do not remember but just this",
    "start": "3344600",
    "end": "3351890"
  },
  {
    "text": "statement it makes no sense to have a lambda here I can just return that value",
    "start": "3351890",
    "end": "3357650"
  },
  {
    "text": "and initialize this variable as usual so yes we can overuse them and as far as I",
    "start": "3357650",
    "end": "3363560"
  },
  {
    "text": "know there is no check from the compiler telling me well that's a little nice that you try to apply lambdas here but",
    "start": "3363560",
    "end": "3369860"
  },
  {
    "text": "also a little stupid maybe that will come so I can just write",
    "start": "3369860",
    "end": "3375830"
  },
  {
    "text": "this that way and everything is fine if you understood more in the topic there",
    "start": "3375830",
    "end": "3382340"
  },
  {
    "text": "is a lot of work of others so there's a great talk by pure and Fowler who has talked today or tomorrow also here about",
    "start": "3382340",
    "end": "3389870"
  },
  {
    "text": "high order functions for meeting C++ and there are a lot of C++ weekly episodes",
    "start": "3389870",
    "end": "3395810"
  },
  {
    "text": "from Jason Turner who is also here there is an excellent blog post by Vittorio",
    "start": "3395810",
    "end": "3403910"
  },
  {
    "text": "Romero and there are a bunch of other things so totally incomplete list feel",
    "start": "3403910",
    "end": "3410210"
  },
  {
    "text": "free to look at that so far it's been a pleasure giving a talk to you today now",
    "start": "3410210",
    "end": "3416480"
  },
  {
    "text": "I will be around for questions we have a couple of minutes left or later the conference that remains three words to",
    "start": "3416480",
    "end": "3423560"
  },
  {
    "text": "be said I am fetish [Applause]",
    "start": "3423560",
    "end": "3436060"
  }
]