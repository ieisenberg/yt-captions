[
  {
    "start": "0",
    "end": "46000"
  },
  {
    "text": "all right all right here we are final session of the day",
    "start": "8080",
    "end": "14799"
  },
  {
    "text": "i hope you're all as excited and filled with energy as i am",
    "start": "14799",
    "end": "20880"
  },
  {
    "text": "i only joke of course i am super excited to be here on this slightly wobbly stage",
    "start": "22000",
    "end": "27439"
  },
  {
    "text": "i'm not gonna try to think about that too much about the pit below",
    "start": "27439",
    "end": "32800"
  },
  {
    "text": "alright so i'm here to talk about web components what they are how to use them",
    "start": "32800",
    "end": "39360"
  },
  {
    "text": "and what role they will play in the future of web development",
    "start": "39360",
    "end": "45840"
  },
  {
    "text": "my name is tobias and i am from gothenburg in the west of sweden uh here i work as a web developer",
    "start": "45840",
    "end": "53680"
  },
  {
    "start": "46000",
    "end": "46000"
  },
  {
    "text": "consultant and also part-time as a front-end evangelist at the company squead",
    "start": "53680",
    "end": "60160"
  },
  {
    "text": "and i will also of course take this opportunity to mention that we do have oslo offices and indeed we are actively",
    "start": "60160",
    "end": "67680"
  },
  {
    "text": "hiring right now but i am here today to evangelize then",
    "start": "67680",
    "end": "73520"
  },
  {
    "text": "as we say about web components first though let's take a little step",
    "start": "73520",
    "end": "79119"
  },
  {
    "text": "back and i want to talk about an amazing invention that makes our lives so much",
    "start": "79119",
    "end": "85360"
  },
  {
    "text": "easier every day i am talking about ice delivery",
    "start": "85360",
    "end": "91040"
  },
  {
    "text": "what a fantastic service right you get ice right to your door you can put it in",
    "start": "91040",
    "end": "96400"
  },
  {
    "text": "your icebox to keep your food cold so it doesn't spoil if it's a hot day you can",
    "start": "96400",
    "end": "101439"
  },
  {
    "text": "grab the old ice pick and chop off some pieces and put them in your drink",
    "start": "101439",
    "end": "106799"
  },
  {
    "text": "what would we do without ice delivery except of course no one has ice delivery",
    "start": "106799",
    "end": "113280"
  },
  {
    "text": "anymore everyone has refrigerators of course and the reason why is obvious",
    "start": "113280",
    "end": "119840"
  },
  {
    "text": "a fridge is in every way more convenient it's cheaper for the customers in the long run",
    "start": "119840",
    "end": "126000"
  },
  {
    "text": "electricity is a lot easier to deliver than big blocks of ice",
    "start": "126000",
    "end": "131039"
  },
  {
    "text": "uh when you buy a house or an apartment the fridge is usually there already",
    "start": "131039",
    "end": "136080"
  },
  {
    "text": "waiting for you you might even call the electricity a built-in or maybe a native feature of",
    "start": "136080",
    "end": "143040"
  },
  {
    "text": "the house so even though a lot of ice delivery people unfortunately had to find new",
    "start": "143040",
    "end": "149520"
  },
  {
    "text": "jobs moving to refrigerators was clearly an upgrade for everyone involved",
    "start": "149520",
    "end": "157760"
  },
  {
    "text": "and you know what else upgrades the web all the time",
    "start": "157760",
    "end": "164239"
  },
  {
    "start": "160000",
    "end": "160000"
  },
  {
    "text": "sometimes it feels like hardly a day goes by without some new web tech being announced and hyped up",
    "start": "164239",
    "end": "172000"
  },
  {
    "text": "but one of the most amazing things about the web i think is it's backwards compatibility",
    "start": "172000",
    "end": "178239"
  },
  {
    "text": "even though new things are added to the specifications all the time the old stuff still works",
    "start": "178239",
    "end": "185120"
  },
  {
    "text": "if it didn't then suddenly a lot of old web pages would just stop working everyone would have to constantly",
    "start": "185120",
    "end": "191599"
  },
  {
    "text": "upgrade and maintain their existing sites nothing else would get done",
    "start": "191599",
    "end": "197200"
  },
  {
    "text": "so the backwards compatibility of the web is truly an amazing feature",
    "start": "197200",
    "end": "202560"
  },
  {
    "text": "let's take a look at another technology jquery what a fantastic library am i",
    "start": "202560",
    "end": "208159"
  },
  {
    "text": "right when it came around a few years ago in 2006 it was a tremendous upgrade from",
    "start": "208159",
    "end": "214879"
  },
  {
    "text": "the way we used to query and manipulate the dom it made web development easier and in",
    "start": "214879",
    "end": "221599"
  },
  {
    "text": "the end it allowed us to create better experiences for our users",
    "start": "221599",
    "end": "227680"
  },
  {
    "text": "but not many people use jquery anymore while it's still in use a lot it exists",
    "start": "227680",
    "end": "233760"
  },
  {
    "text": "in a lot of places but it's hardly the first thing you reach for when you're starting a new project these days",
    "start": "233760",
    "end": "240640"
  },
  {
    "text": "like you would have done maybe 10 years ago and this is because many of the features",
    "start": "240640",
    "end": "246799"
  },
  {
    "start": "244000",
    "end": "244000"
  },
  {
    "text": "and good practices that estab was established by jquery made it into the javascript and css specifications and",
    "start": "246799",
    "end": "254159"
  },
  {
    "text": "thus became native browser features the functionality that jquery provided",
    "start": "254159",
    "end": "260400"
  },
  {
    "text": "became obsolete now we're able to do many of the things jquery did but without having to ship a",
    "start": "260400",
    "end": "266880"
  },
  {
    "text": "bundle of jquery code to the users they already have everything they need natively in their web browsers",
    "start": "266880",
    "end": "273280"
  },
  {
    "text": "and so while the transition away from jquery to new things may have been a little cumbersome in the end",
    "start": "273280",
    "end": "279600"
  },
  {
    "text": "it was an upgrade for everyone involved a little bit like how ice delivery was",
    "start": "279600",
    "end": "285840"
  },
  {
    "text": "replaced by built-in electricity now let's talk about a technology that many of us probably use quite a lot",
    "start": "285840",
    "end": "292960"
  },
  {
    "text": "javascript frameworks what fantastic technology am i right and i'm talking here about the mostly",
    "start": "292960",
    "end": "299520"
  },
  {
    "start": "293000",
    "end": "293000"
  },
  {
    "text": "client-side frameworks like react or view etc these programs do so much for us and",
    "start": "299520",
    "end": "306080"
  },
  {
    "text": "they enable us to build so many cool things and there are many problems that these",
    "start": "306080",
    "end": "311360"
  },
  {
    "text": "frameworks help us solve like they help us keep state and ui in sync we update the state the framework",
    "start": "311360",
    "end": "318800"
  },
  {
    "text": "automatically updates the ui we never have to write a dom modifying",
    "start": "318800",
    "end": "324080"
  },
  {
    "text": "line of code again the frameworks do all this for us and they do it very well they also help us with another important",
    "start": "324080",
    "end": "330720"
  },
  {
    "text": "thing componentization as good programmers we want to",
    "start": "330720",
    "end": "335919"
  },
  {
    "text": "structure our code by speed splitting it splitting it up into logical reusable chunks of code",
    "start": "335919",
    "end": "343520"
  },
  {
    "text": "i'm sure you know all about the advantages of this but since there hasn't been a native solution for this on the web we've had",
    "start": "343520",
    "end": "350560"
  },
  {
    "text": "to resort to things like template engines and javascript tooling to be able to write componentized code on our",
    "start": "350560",
    "end": "357199"
  },
  {
    "text": "end and then the browser receives a packaged and bundled and transpiled",
    "start": "357199",
    "end": "363759"
  },
  {
    "text": "version of this code that the browser can run and",
    "start": "363759",
    "end": "368800"
  },
  {
    "text": "this puts a distance between the code that we write and the code that the user runs",
    "start": "368800",
    "end": "375360"
  },
  {
    "text": "and the bigger this distance the less control and understanding we actually have of what happens in our applications",
    "start": "375360",
    "end": "382400"
  },
  {
    "text": "and the harder it becomes to ship reliable code but as long as the tools are reliable",
    "start": "382400",
    "end": "388400"
  },
  {
    "text": "and they are reliable we still benefit greatly from the componentization that these frameworks",
    "start": "388400",
    "end": "394319"
  },
  {
    "text": "enable us and then there are also additional uh problems solved by the frameworks like",
    "start": "394319",
    "end": "401120"
  },
  {
    "text": "css encapsulation or single page routing and so on",
    "start": "401120",
    "end": "406319"
  },
  {
    "start": "406000",
    "end": "406000"
  },
  {
    "text": "the front-end frame frameworks are not without the drawbacks of course uh there can be a lot of domain-specific",
    "start": "406319",
    "end": "411599"
  },
  {
    "text": "knowledge that you need to acquire in order to understand and work efficiently with your framework",
    "start": "411599",
    "end": "417840"
  },
  {
    "text": "and while rare they can of course have ship bugs of their own which you have very little control over",
    "start": "417840",
    "end": "425280"
  },
  {
    "text": "and then on the user side we have to include the framework runtime along with our application specific code",
    "start": "425280",
    "end": "432080"
  },
  {
    "text": "which increases the total amount of data that needs to be downloaded and so on this has its own set of negative",
    "start": "432080",
    "end": "437919"
  },
  {
    "text": "consequences i'm not going to get into that now some frameworks minimize or mitigate",
    "start": "437919",
    "end": "444000"
  },
  {
    "text": "this in different ways but we always have to ship something extra",
    "start": "444000",
    "end": "450120"
  },
  {
    "text": "enter then web components web components are not a magical",
    "start": "450479",
    "end": "456960"
  },
  {
    "text": "solution to every aspect of web development but we will be able to leverage the",
    "start": "456960",
    "end": "462400"
  },
  {
    "text": "power of componentization on a native level this means that in some circumstances",
    "start": "462400",
    "end": "468960"
  },
  {
    "text": "front-end frameworks might not be necessary at all sometimes you might find that a combination of technologies produce the",
    "start": "468960",
    "end": "475840"
  },
  {
    "text": "best results but i'll talk more about the use cases later let's take a closer look at what web",
    "start": "475840",
    "end": "481680"
  },
  {
    "text": "components actually are",
    "start": "481680",
    "end": "485440"
  },
  {
    "text": "web components are not actually just one thing but it is a collection of browser",
    "start": "489680",
    "end": "495360"
  },
  {
    "text": "apis that we collectively call web components the first of these apis that we'll take",
    "start": "495360",
    "end": "500800"
  },
  {
    "text": "a look at is html templates so let's imagine we have uh say a news page",
    "start": "500800",
    "end": "508240"
  },
  {
    "text": "right uh and we want to display news news articles on this one and every little article follows the",
    "start": "508240",
    "end": "514240"
  },
  {
    "text": "same pattern and has the same markup uh it might look like uh might look like this",
    "start": "514240",
    "end": "520959"
  },
  {
    "text": "a list of news articles and they're wrapped in article tags and each of these has a header and some",
    "start": "520959",
    "end": "527200"
  },
  {
    "text": "content and we repeat this for each news item we want to display nothing weird there",
    "start": "527200",
    "end": "533279"
  },
  {
    "text": "but of course when there is new news we don't want to go in and manually edit",
    "start": "533279",
    "end": "539040"
  },
  {
    "text": "this html document so what we do we would do is maybe render this page on the server",
    "start": "539040",
    "end": "544800"
  },
  {
    "text": "the server would get the news articles from somewhere a database or cms or something",
    "start": "544800",
    "end": "549839"
  },
  {
    "text": "and then calculate the resulting html and send it back to the requesting user uh works great even though there's some",
    "start": "549839",
    "end": "556320"
  },
  {
    "text": "extra calculating time on the server and you have to do this for each individual page",
    "start": "556320",
    "end": "563040"
  },
  {
    "text": "another thing we could do is to pre-calculate the html document so that there is no extra time spent on the",
    "start": "563040",
    "end": "568800"
  },
  {
    "text": "server at all and the user gets a full complete document right away this is usually",
    "start": "568800",
    "end": "573839"
  },
  {
    "text": "achieved with some form of static site generator",
    "start": "573839",
    "end": "578880"
  },
  {
    "text": "and requires one kind of templating language or other",
    "start": "578880",
    "end": "584080"
  },
  {
    "text": "also whenever there is a new new news article new news to display we would have to regenerate these",
    "start": "585839",
    "end": "591760"
  },
  {
    "text": "documents uh before the users can request them so this is not the best strategy if the data updates very",
    "start": "591760",
    "end": "598240"
  },
  {
    "text": "frequently like if there's only seconds between updates or maybe even faster",
    "start": "598240",
    "end": "604160"
  },
  {
    "text": "and of course we can solve it with front-end frameworks that we've already mentioned we send a minimal html page",
    "start": "604160",
    "end": "610000"
  },
  {
    "text": "and a script bundle and then the script fetches the data doing a loading",
    "start": "610000",
    "end": "615120"
  },
  {
    "text": "animation in the meantime and then when the data arrives it renders itself",
    "start": "615120",
    "end": "621279"
  },
  {
    "text": "so these are different ways to solve this little problem but with html templates we now have an additional",
    "start": "621360",
    "end": "626640"
  },
  {
    "text": "option here's how we can do it with html templates",
    "start": "626640",
    "end": "632720"
  },
  {
    "text": "right here in our html we can wrap a bunch of markup in the template tag",
    "start": "632720",
    "end": "638560"
  },
  {
    "text": "everything between these tags will not be displayed on the page but they will still be available in the dom",
    "start": "638560",
    "end": "645680"
  },
  {
    "text": "so what we've wrapped in the template tag here is the repeating part of our news page the the list item and the",
    "start": "645680",
    "end": "651040"
  },
  {
    "text": "article in order to repeat and populate the page with these items we now have to use a",
    "start": "651040",
    "end": "656800"
  },
  {
    "text": "little bit of javascript here's a script on the same page",
    "start": "656800",
    "end": "663120"
  },
  {
    "text": "these first two lines just gets two elements the list which we will be putting the news articles into",
    "start": "663120",
    "end": "670160"
  },
  {
    "text": "and the template element we then take our data which in a real",
    "start": "670160",
    "end": "675600"
  },
  {
    "text": "scenario would come from a backend somewhere and then for each news item in the data we do the following",
    "start": "675600",
    "end": "681600"
  },
  {
    "text": "first of all we clone the template because there is a clone of this kind that we can append to the dom so that it",
    "start": "681600",
    "end": "688480"
  },
  {
    "text": "becomes visible but before we make it visible we modify it by finding the header and paragraph",
    "start": "688480",
    "end": "696160"
  },
  {
    "text": "and inserting some content a title and some text and then finally we append the clone to",
    "start": "696160",
    "end": "703200"
  },
  {
    "text": "the list we do this for each data item and we get",
    "start": "703200",
    "end": "708320"
  },
  {
    "text": "a news page with individual news articles",
    "start": "708320",
    "end": "713519"
  },
  {
    "text": "using html templates we can reuse html code using only native browser apis",
    "start": "713920",
    "end": "720320"
  },
  {
    "text": "we could have done the same without templates some of you might be thinking this by just directly inserting creating and",
    "start": "720320",
    "end": "727839"
  },
  {
    "text": "inserting dom nodes for every iteration but a html template is",
    "start": "727839",
    "end": "733920"
  },
  {
    "text": "one more performant and two it makes use of the declarative",
    "start": "733920",
    "end": "739120"
  },
  {
    "text": "nature of html making the code more easily readable and what you write is closer to what",
    "start": "739120",
    "end": "746079"
  },
  {
    "text": "will be what will be rendered in the dom in the end",
    "start": "746079",
    "end": "751120"
  },
  {
    "start": "751000",
    "end": "751000"
  },
  {
    "text": "custom elements is the second of the apis that make up web components",
    "start": "754079",
    "end": "761120"
  },
  {
    "text": "if you take a html document and write a tag that doesn't exist like this tag here coder greeting",
    "start": "761600",
    "end": "768720"
  },
  {
    "text": "you get nothing if you put some text content in the contents in it the browser might treat",
    "start": "768720",
    "end": "774240"
  },
  {
    "text": "it like a div or a span or something i think it depends on the browser i'm actually not sure",
    "start": "774240",
    "end": "779760"
  },
  {
    "text": "but it's invalid html and should not be used like that however with custom elements we can make",
    "start": "779760",
    "end": "786639"
  },
  {
    "text": "this code valid creating a custom element is done with",
    "start": "786639",
    "end": "793040"
  },
  {
    "text": "the custom elements registry to define a new custom element",
    "start": "793040",
    "end": "798560"
  },
  {
    "text": "which is what we do down at the end here we give the define method a name",
    "start": "798560",
    "end": "803600"
  },
  {
    "text": "that will later allow us to write an html tag with that name we also give it a class which contains",
    "start": "803600",
    "end": "810320"
  },
  {
    "text": "all the inner workings of the element because it is with javascript's class syntax that we",
    "start": "810320",
    "end": "816800"
  },
  {
    "text": "specify what our custom elements shall do we create a class that first of all",
    "start": "816800",
    "end": "821920"
  },
  {
    "text": "extends the built-in class html element this is required for all custom elements",
    "start": "821920",
    "end": "828320"
  },
  {
    "text": "and then in the constructor here we set the the element's inner text to hello world",
    "start": "828320",
    "end": "833920"
  },
  {
    "text": "and that's that now we can write a coder greeting tag here in the html and we get",
    "start": "833920",
    "end": "840000"
  },
  {
    "text": "our greeting on the screen and that's how simple it can be to create your own custom element",
    "start": "840000",
    "end": "845760"
  },
  {
    "text": "in fact it might not be possible to do it any simpler",
    "start": "845760",
    "end": "850639"
  },
  {
    "text": "let's also take a quick look at attributes any attribute put on the html tag can be retrieved in the code with the get",
    "start": "853040",
    "end": "860160"
  },
  {
    "text": "attribute method and then used in the element so if we put the attribute name on the",
    "start": "860160",
    "end": "865440"
  },
  {
    "text": "html tag here we can then retrieve it in the component clause and in this case we make it part of the",
    "start": "865440",
    "end": "871440"
  },
  {
    "text": "element's inner text and so we get hello ndc",
    "start": "871440",
    "end": "877199"
  },
  {
    "text": "and there's tons more you can do with these and we'll actually get more into that in a minute but just remember that the api for a",
    "start": "877199",
    "end": "883680"
  },
  {
    "text": "custom element is the same like that of a regular element things like get attribute set",
    "start": "883680",
    "end": "889120"
  },
  {
    "text": "attributes all these things they're all there",
    "start": "889120",
    "end": "893920"
  },
  {
    "text": "finally the third api that powers web components is the shadow dom",
    "start": "895839",
    "end": "901120"
  },
  {
    "text": "now i don't know if it's the name of it or what but i've gotten the impression that this is like the most",
    "start": "901120",
    "end": "907199"
  },
  {
    "text": "the scariest and most difficult thing about web components to grasp but i",
    "start": "907199",
    "end": "912480"
  },
  {
    "text": "don't think it is very complicated really so let's take a look here we have a visualization of a very",
    "start": "912480",
    "end": "919519"
  },
  {
    "text": "small document tree we got an html node at the root and then some html elements nested below",
    "start": "919519",
    "end": "926800"
  },
  {
    "text": "nothing strange about this all is normal perfectly ordinary website now you know that we can use javascript",
    "start": "926800",
    "end": "933040"
  },
  {
    "text": "to attach new nodes to this tree that's nothing new but what we can do is",
    "start": "933040",
    "end": "938560"
  },
  {
    "text": "we can take one of these elements and attach a so-called shadow root to it",
    "start": "938560",
    "end": "944160"
  },
  {
    "text": "attaching a shadow root to the body element would make a tree look like this",
    "start": "944160",
    "end": "949680"
  },
  {
    "text": "this doesn't affect the tree in any way yet but we can now attach more regular nodes to the shadow root",
    "start": "949680",
    "end": "957279"
  },
  {
    "text": "like this and what we have here is actually a new separate tree",
    "start": "957279",
    "end": "963199"
  },
  {
    "text": "just like the regular tree has the html node as its root this new tree has the shadow root node",
    "start": "963199",
    "end": "970000"
  },
  {
    "text": "as its root and what the shadow root also does is that it acts like a kind of gatekeeper",
    "start": "970000",
    "end": "976399"
  },
  {
    "text": "between the shadow tree and the light tree the shadow world and the light world we got a gate between those two",
    "start": "976399",
    "end": "984240"
  },
  {
    "text": "let's say for instance that we put a style tag somewhere in the in the light tree",
    "start": "984240",
    "end": "989440"
  },
  {
    "text": "uh a regular style tag for some styling this styling does not penetrate through",
    "start": "989440",
    "end": "994480"
  },
  {
    "text": "the shadow roots nothing within the shadow world can be targeted by that css",
    "start": "994480",
    "end": "1001040"
  },
  {
    "text": "and the same goes for styling decide defined inside the shadow world nothing in the light world will be able",
    "start": "1001040",
    "end": "1007120"
  },
  {
    "text": "to be targeted you also can't query for elements across the border if you use",
    "start": "1007120",
    "end": "1013880"
  },
  {
    "text": "documents.queryselector you will not find anything that exists on the other side of the",
    "start": "1013880",
    "end": "1019120"
  },
  {
    "text": "shadow root you will have to find the shadow root itself and then use",
    "start": "1019120",
    "end": "1025079"
  },
  {
    "text": "shadowroot.queryselector if you want to find things inside the shadowboard",
    "start": "1025079",
    "end": "1030558"
  },
  {
    "text": "there are ways to pierce the shadow boundary and have things like styling come through but we'll talk more about",
    "start": "1030640",
    "end": "1036640"
  },
  {
    "text": "that in a little while for now just know that the shadow dom is a separate document tree that encapsulates its",
    "start": "1036640",
    "end": "1043678"
  },
  {
    "text": "behavior and does not affect the rest of the document",
    "start": "1043679",
    "end": "1048959"
  },
  {
    "text": "okay now we we have looked at html templates custom",
    "start": "1050840",
    "end": "1056080"
  },
  {
    "text": "elements and the shadow dom and so with our powers combined we now have the",
    "start": "1056080",
    "end": "1061919"
  },
  {
    "text": "ability to create web components so let's do exactly that",
    "start": "1061919",
    "end": "1068960"
  },
  {
    "start": "1065000",
    "end": "1065000"
  },
  {
    "text": "the component that we will be coding is a custom checkbox something you might often find in",
    "start": "1070000",
    "end": "1076080"
  },
  {
    "text": "component libraries since native checkboxes are notoriously hard to style",
    "start": "1076080",
    "end": "1081200"
  },
  {
    "text": "uh it's actually got gotten a little easier recently but to make them truly custom you still have to do all the work",
    "start": "1081200",
    "end": "1086720"
  },
  {
    "text": "yourself so the first thing we'll do is create our custom element",
    "start": "1086720",
    "end": "1093200"
  },
  {
    "text": "we'll call it cool checkbox because obviously it's going to be really cool and we'll extend html element just like",
    "start": "1093200",
    "end": "1099600"
  },
  {
    "text": "we're supposed to next we'll define a function called",
    "start": "1099600",
    "end": "1104720"
  },
  {
    "text": "connectedcallback you might remember before we specified",
    "start": "1104720",
    "end": "1109840"
  },
  {
    "text": "the component's content in the constructor now a problem with doing that is that it",
    "start": "1109840",
    "end": "1115039"
  },
  {
    "text": "won't work if the element is appended to the dom before it has been defined",
    "start": "1115039",
    "end": "1120559"
  },
  {
    "text": "and this is something that you might want to avoid anyway but just to be safe and to follow best practices it is best",
    "start": "1120559",
    "end": "1127360"
  },
  {
    "text": "to do all of the initial dominant manipulation and setup in the connected callback function",
    "start": "1127360",
    "end": "1133360"
  },
  {
    "text": "because this function runs right after the element has been both defined and then placed in the dom so it is the",
    "start": "1133360",
    "end": "1139520"
  },
  {
    "text": "ideal place for setting up everything that the component needs uh its initial",
    "start": "1139520",
    "end": "1144960"
  },
  {
    "text": "state so to speak so in this function we set the elements",
    "start": "1144960",
    "end": "1151280"
  },
  {
    "text": "inner html to be an input of type checkbox and the corresponding label",
    "start": "1151280",
    "end": "1157679"
  },
  {
    "text": "and then finally we define our element in the custom elements registry and it's ready to use",
    "start": "1157679",
    "end": "1164799"
  },
  {
    "text": "we can now put it in our html file like so and we get a perfectly ordinary checkbox",
    "start": "1164799",
    "end": "1171520"
  },
  {
    "text": "awesome so uh let's make this web component a",
    "start": "1171520",
    "end": "1176880"
  },
  {
    "text": "little cooler let's use a html template for the content of our component",
    "start": "1176880",
    "end": "1183760"
  },
  {
    "start": "1178000",
    "end": "1178000"
  },
  {
    "text": "before we defined a template declaratively in the html file",
    "start": "1183760",
    "end": "1189120"
  },
  {
    "text": "like this you remember but we can also do it imperatively with javascript",
    "start": "1189120",
    "end": "1194160"
  },
  {
    "text": "so that's what we do here we use document.createelement to create a template element",
    "start": "1194160",
    "end": "1200000"
  },
  {
    "text": "and then we set its inner html and then down in the connected callback",
    "start": "1200000",
    "end": "1206320"
  },
  {
    "text": "we clone the template content using document.import node and append it to our element",
    "start": "1206320",
    "end": "1214240"
  },
  {
    "text": "and voila it looks exactly the same as before",
    "start": "1214240",
    "end": "1219280"
  },
  {
    "text": "however the advantage is that if we put multiple instances of our component on a page",
    "start": "1219280",
    "end": "1224559"
  },
  {
    "text": "the template will only have to be parsed once and then it can be reused via cloning",
    "start": "1224559",
    "end": "1230480"
  },
  {
    "text": "so the more copies you have on a page and the more complex they are the bigger the performance gain will be",
    "start": "1230480",
    "end": "1238640"
  },
  {
    "start": "1239000",
    "end": "1239000"
  },
  {
    "text": "all right so this was going to be a cool shake box and since there's nothing cooler than being dark and mysterious so",
    "start": "1239919",
    "end": "1245200"
  },
  {
    "text": "i've been told let's add a shadow dom this is done in the constructor",
    "start": "1245200",
    "end": "1251679"
  },
  {
    "text": "and it's no harder than taking our element and calling attach shadow on it and there now we have a shadow root on",
    "start": "1251679",
    "end": "1258799"
  },
  {
    "text": "our custom element you can we also pass an options object that contains mode open",
    "start": "1258799",
    "end": "1266000"
  },
  {
    "text": "and this is so that the shadow root will allow us to access it with javascript from the outside uh you will probably always do this",
    "start": "1266000",
    "end": "1273679"
  },
  {
    "text": "set it to open when you create your shadow roots because it is by accessing it with javascript that we can",
    "start": "1273679",
    "end": "1279200"
  },
  {
    "text": "manipulate its content and that's actually something that we immediately do here in the connected",
    "start": "1279200",
    "end": "1285039"
  },
  {
    "text": "callback function here instead of appending the cloned template content to the element itself we append",
    "start": "1285039",
    "end": "1292559"
  },
  {
    "text": "it to the shadow root instead and now we have a shadow dom all of the html content from the",
    "start": "1292559",
    "end": "1298799"
  },
  {
    "text": "template that was appended to the shadow root is now living in its own little shadow world",
    "start": "1298799",
    "end": "1304799"
  },
  {
    "text": "having a good old time if we take a look at the page structure",
    "start": "1304799",
    "end": "1310320"
  },
  {
    "text": "in the browser dev tools this is from firefox we can see the shadow root clearly on",
    "start": "1310320",
    "end": "1316159"
  },
  {
    "text": "display pretty much like a regular node in the tree we can expand it",
    "start": "1316159",
    "end": "1321440"
  },
  {
    "text": "and under each node is a copy of our template with this with this it within its own",
    "start": "1321440",
    "end": "1326960"
  },
  {
    "text": "little shadow dome",
    "start": "1326960",
    "end": "1331080"
  },
  {
    "text": "some styles to the checkbox is as easy as adding it to the template we can put a style tag here and some css",
    "start": "1332159",
    "end": "1339600"
  },
  {
    "text": "inside that makes the label pink and as you may notice we're using a very",
    "start": "1339600",
    "end": "1344880"
  },
  {
    "text": "broad selector here just label right if this was in the light on we might not",
    "start": "1344880",
    "end": "1350880"
  },
  {
    "text": "want to use such broad selectors but instead use classes and ids and things",
    "start": "1350880",
    "end": "1356720"
  },
  {
    "text": "to be more specific and target specific elements but since the styles inside the shadow",
    "start": "1356720",
    "end": "1363760"
  },
  {
    "text": "dom only affects the elements inside the shadow dom",
    "start": "1363760",
    "end": "1368960"
  },
  {
    "text": "we don't have to make it more complicated than this we only have two elements as you can see the input and the label",
    "start": "1369440",
    "end": "1376720"
  },
  {
    "text": "also note that the id on the checkbox is super generic just checkbox",
    "start": "1377600",
    "end": "1383200"
  },
  {
    "text": "ids are also encapsulated in the shadow rom so there will be no id conflicts if",
    "start": "1383200",
    "end": "1389679"
  },
  {
    "text": "elements in the light dome or in other shadow domes have the same id",
    "start": "1389679",
    "end": "1394799"
  },
  {
    "text": "this allows us to write css that is this simple we rarely have to bother with",
    "start": "1394799",
    "end": "1401200"
  },
  {
    "text": "classes and you know naming methodologies css strategies",
    "start": "1401200",
    "end": "1406480"
  },
  {
    "text": "if we can keep the markup in our template simple we can keep css simple",
    "start": "1406480",
    "end": "1412799"
  },
  {
    "text": "and keeping things simple is pretty much half our jobs right",
    "start": "1412799",
    "end": "1418559"
  },
  {
    "text": "so here is the effect very pink just like the css set",
    "start": "1420400",
    "end": "1426080"
  },
  {
    "text": "okay so a webcam component can do a lot when it comes to deciding its own content",
    "start": "1427360",
    "end": "1432960"
  },
  {
    "text": "but it wouldn't be very versatile if the user couldn't affect the content and appearance of the component",
    "start": "1432960",
    "end": "1439840"
  },
  {
    "text": "and there are multiple ways to achieve this one way is using slots",
    "start": "1439840",
    "end": "1446640"
  },
  {
    "text": "this is a concept that will be very familiar to you if you've worked with vue",
    "start": "1446640",
    "end": "1452159"
  },
  {
    "text": "it's also not unlike the concept of children in react what a slot is is a place in the",
    "start": "1452159",
    "end": "1458640"
  },
  {
    "text": "template that we allow the user to fill with content we place the slot tags anywhere we want",
    "start": "1458640",
    "end": "1465039"
  },
  {
    "text": "in the template like right there and then we put something between the tags of our custom element it can be",
    "start": "1465039",
    "end": "1473120"
  },
  {
    "text": "text like this but it can also be any valid html so there's really no limit to this",
    "start": "1473120",
    "end": "1479919"
  },
  {
    "text": "and the result is that whatever we put between the element tags ends up inside inside the slot tax",
    "start": "1479919",
    "end": "1486320"
  },
  {
    "text": "so it's pretty simple right it's also possible to have multiple slots and then the user needs to",
    "start": "1486320",
    "end": "1493760"
  },
  {
    "text": "or then you have to give the slots names and then the user must use the corresponding names to",
    "start": "1493760",
    "end": "1500080"
  },
  {
    "text": "place different pieces of content into different slots so that's also possible",
    "start": "1500080",
    "end": "1506559"
  },
  {
    "start": "1506000",
    "end": "1506000"
  },
  {
    "text": "the next way to give data to our component is by using attributes and properties",
    "start": "1508400",
    "end": "1513760"
  },
  {
    "text": "important to know the difference between an attribute and a property to understand this an attribute is what we set on an html",
    "start": "1513760",
    "end": "1521360"
  },
  {
    "text": "tag we can then access this attribute with javascript but it will always be a",
    "start": "1521360",
    "end": "1527279"
  },
  {
    "text": "string a property is what we have on a javascript object",
    "start": "1527279",
    "end": "1533679"
  },
  {
    "text": "and as you may know when it comes to the dom the document object model each element in html is represented by a",
    "start": "1533679",
    "end": "1541600"
  },
  {
    "text": "javascript object and this is what we what we get when we use things like a query selector",
    "start": "1541600",
    "end": "1547679"
  },
  {
    "text": "and this object has properties that we can access and change just like any other javascript object and then the",
    "start": "1547679",
    "end": "1554400"
  },
  {
    "text": "html is also updated so let's say we want to set the text of",
    "start": "1554400",
    "end": "1560799"
  },
  {
    "text": "a label via an attribute instead of a slot uh this makes sense in a way because",
    "start": "1560799",
    "end": "1566799"
  },
  {
    "text": "a label should probably just be a piece of text right well if we set the attributes on the cool checkbox tags in",
    "start": "1566799",
    "end": "1573200"
  },
  {
    "text": "the html like this that doesn't mean we automatically get a property on the corresponding js object",
    "start": "1573200",
    "end": "1581440"
  },
  {
    "text": "we actually have to do that ourselves so that's what we do here in the connected callback function",
    "start": "1581440",
    "end": "1587279"
  },
  {
    "text": "we get the attribute and we set it on the element so that was pretty easy",
    "start": "1587279",
    "end": "1594720"
  },
  {
    "text": "but remember the connected callback function only runs once when the element is inserted into the dom",
    "start": "1595039",
    "end": "1601600"
  },
  {
    "text": "what if the user changes the attribute that's where this next lifecycle method",
    "start": "1601600",
    "end": "1607279"
  },
  {
    "text": "comes into play attribute changed callback as the name implies this method fires",
    "start": "1607279",
    "end": "1613520"
  },
  {
    "text": "anytime one of our attributes is changed and we can then update the property accordingly",
    "start": "1613520",
    "end": "1620320"
  },
  {
    "text": "uh it's actually not quite the whole truth i should say this method runs whenever one of our",
    "start": "1620320",
    "end": "1625600"
  },
  {
    "text": "observed attributes change and the observed attributes are the ones returned by the getter function that you",
    "start": "1625600",
    "end": "1631679"
  },
  {
    "text": "see here static get observed attributes if any attribute in this list changes",
    "start": "1631679",
    "end": "1638880"
  },
  {
    "text": "then the attribute changed callback will run and this is because there is you know no",
    "start": "1638880",
    "end": "1644960"
  },
  {
    "text": "no limit to what attributes you can put on an html html element",
    "start": "1644960",
    "end": "1650320"
  },
  {
    "text": "you could put whatever you want so this ensures that we don't run a bunch of code just because of a change",
    "start": "1650320",
    "end": "1655919"
  },
  {
    "text": "to something that we don't even care about all right so now whenever the label",
    "start": "1655919",
    "end": "1662320"
  },
  {
    "text": "attribute is set or changed the property will be updated sync achieved",
    "start": "1662320",
    "end": "1668399"
  },
  {
    "text": "but what about the other direction if we use javascript to change the",
    "start": "1668399",
    "end": "1674000"
  },
  {
    "text": "property directly we also want the attribute in the html to update right",
    "start": "1674000",
    "end": "1679440"
  },
  {
    "text": "and even more importantly which is which we haven't done yet we want the actual text on the page to change",
    "start": "1679440",
    "end": "1686000"
  },
  {
    "text": "this is not something that happens automatically either so let's make it happen",
    "start": "1686000",
    "end": "1691600"
  },
  {
    "text": "the easiest way to accomplish this i think is to use a custom getter and setter for our property this is all part of the",
    "start": "1691600",
    "end": "1698320"
  },
  {
    "text": "class syntax probably familiar to you the getter for the property is very simple it just returns the value of the",
    "start": "1698320",
    "end": "1704960"
  },
  {
    "text": "attribute and then the setter does a little more whenever we set the property label",
    "start": "1704960",
    "end": "1710799"
  },
  {
    "text": "this code is going to run and the first thing it does is it checks if the new value of label exists at all",
    "start": "1710799",
    "end": "1717039"
  },
  {
    "text": "if not then we reflect that change by removing the attribute from the html altogether",
    "start": "1717039",
    "end": "1722720"
  },
  {
    "text": "but if the property does indeed have a value then we set the label attribute to this value and we also update the inner",
    "start": "1722720",
    "end": "1730799"
  },
  {
    "text": "html so that the change appears visually in the browser",
    "start": "1730799",
    "end": "1735919"
  },
  {
    "text": "now the label attribute and property are all wired up they stay in sync and they",
    "start": "1736240",
    "end": "1741679"
  },
  {
    "text": "behave as expected we use it like this with a couple of different labels there and it appears",
    "start": "1741679",
    "end": "1749039"
  },
  {
    "text": "just the way we want all right so the final way of letting",
    "start": "1749039",
    "end": "1756240"
  },
  {
    "start": "1753000",
    "end": "1753000"
  },
  {
    "text": "the user affect the content and behavior of our web component is by piercing the shadow boundary",
    "start": "1756240",
    "end": "1764600"
  },
  {
    "text": "i mentioned this earlier the shadow dom and the light on are separate but there are controlled ways to let information",
    "start": "1768559",
    "end": "1775039"
  },
  {
    "text": "slip through and that's what we're going to explore now",
    "start": "1775039",
    "end": "1780240"
  },
  {
    "text": "first of all i'll just add a bunch of css here to make the checkboxes really custom we won't go closer into this because",
    "start": "1780240",
    "end": "1787360"
  },
  {
    "text": "because how to style the checkbox that's pretty much a session in its own but there is one interesting part of",
    "start": "1787360",
    "end": "1793440"
  },
  {
    "text": "these css that you won't find in the light world the host sudo selector",
    "start": "1793440",
    "end": "1799279"
  },
  {
    "text": "this selector targets the host element that is in our case the actual cool",
    "start": "1799279",
    "end": "1804320"
  },
  {
    "text": "checkbox element itself the container for the whole custom element really",
    "start": "1804320",
    "end": "1810159"
  },
  {
    "text": "one reason for targeting this can be to avoid having to use unnecessary wrappers on the top level because the element is",
    "start": "1810159",
    "end": "1817039"
  },
  {
    "text": "a wrapper in itself anyway this is what it looks like um now",
    "start": "1817039",
    "end": "1823200"
  },
  {
    "text": "the checkboxes are truly cool uh especially when compared to this sad little regular old checkbox hanging out",
    "start": "1823200",
    "end": "1828960"
  },
  {
    "text": "beside so notice the text color black right",
    "start": "1828960",
    "end": "1835039"
  },
  {
    "text": "well take a look at this css declaration here we set the text color of the label",
    "start": "1835039",
    "end": "1842399"
  },
  {
    "text": "to that of a css custom property but this property isn't declared anywhere so the color just",
    "start": "1842399",
    "end": "1850480"
  },
  {
    "text": "reverts to its default state and when it comes to text color it is an",
    "start": "1850480",
    "end": "1855919"
  },
  {
    "text": "inherited value meaning it is set to the computed value",
    "start": "1855919",
    "end": "1861120"
  },
  {
    "text": "of its parent and that's why we only have to set things like color and um",
    "start": "1861120",
    "end": "1867600"
  },
  {
    "text": "and font family uh once usually up on the body element right and then this is inherited throughout",
    "start": "1867600",
    "end": "1874880"
  },
  {
    "text": "our entire document and the reason why i bring this up is because inheritance",
    "start": "1874880",
    "end": "1880720"
  },
  {
    "text": "is one way to pierce the shadow boundary inherited values inherit through to the",
    "start": "1880720",
    "end": "1887120"
  },
  {
    "text": "shadow dom so if your page uses a certain typeface your web component will automatically",
    "start": "1887120",
    "end": "1893600"
  },
  {
    "text": "get the same typeface applied to them without the need to specify this for each and every component",
    "start": "1893600",
    "end": "1901039"
  },
  {
    "text": "but what about this custom property then why is it there at all well custom properties are another way",
    "start": "1901679",
    "end": "1908159"
  },
  {
    "text": "to pierce the shadow boundary and it's a very controlled one the custom properties that we use in our",
    "start": "1908159",
    "end": "1914559"
  },
  {
    "text": "internal css here in our component they become the api for the users if they want to change and",
    "start": "1914559",
    "end": "1921679"
  },
  {
    "text": "affect the internal styling of the component so we can do it like this",
    "start": "1921679",
    "end": "1927919"
  },
  {
    "text": "this is out in the light world somewhere in the top of the document and we have some styling here that sets",
    "start": "1927919",
    "end": "1934799"
  },
  {
    "text": "this custom property cool checkbox label color and when we set it out here in the light",
    "start": "1934799",
    "end": "1940720"
  },
  {
    "text": "world it is then picked up by the css inside the shadow world and the text",
    "start": "1940720",
    "end": "1946000"
  },
  {
    "text": "turns green and since custom properties can be",
    "start": "1946000",
    "end": "1951120"
  },
  {
    "text": "they can represent you know pretty much any value in css big or small and they can be reused in",
    "start": "1951120",
    "end": "1958000"
  },
  {
    "text": "many ways custom properties provide a quite powerful api that we can expose to our",
    "start": "1958000",
    "end": "1964799"
  },
  {
    "text": "users allowing them to customize pretty much anything we want",
    "start": "1964799",
    "end": "1970398"
  },
  {
    "text": "okay so we've looked at how a user can send data into the web component to affect things",
    "start": "1973039",
    "end": "1978399"
  },
  {
    "text": "and now the final thing i want to show you is how to send data from the web component back up to the user",
    "start": "1978399",
    "end": "1984799"
  },
  {
    "text": "and this is done using the good old browser api events it might look like this for",
    "start": "1984799",
    "end": "1991360"
  },
  {
    "text": "instance in the connected callback function uh we find something to react to in this case it's our checkboxes",
    "start": "1991360",
    "end": "1997360"
  },
  {
    "text": "change event but you know it could be like it could be a bottom press it could be a network call",
    "start": "1997360",
    "end": "2002840"
  },
  {
    "text": "completion anything really and then what we do is we dispatch a new",
    "start": "2002840",
    "end": "2008240"
  },
  {
    "text": "event on the custom element notice that it's not on the shadow root but we dispatch the event on the element",
    "start": "2008240",
    "end": "2015760"
  },
  {
    "text": "itself and then the user can then attach event listeners to the custom",
    "start": "2015760",
    "end": "2023039"
  },
  {
    "text": "element and react to these to these elements being dispatched",
    "start": "2023039",
    "end": "2030159"
  },
  {
    "text": "and it's it's really that simple that's how we send data back up uh if you're not 100 familiar with the",
    "start": "2030159",
    "end": "2036559"
  },
  {
    "text": "the event api uh know that in this in addition to dispatching an event with a name you can",
    "start": "2036559",
    "end": "2042720"
  },
  {
    "text": "also include any kind of data that the listener can make use of",
    "start": "2042720",
    "end": "2048320"
  },
  {
    "text": "so we can send both notified that something has happened and we can send complementary data up to the user",
    "start": "2048320",
    "end": "2056480"
  },
  {
    "text": "okay so this concludes the creation of our checkbox web component",
    "start": "2057679",
    "end": "2062720"
  },
  {
    "text": "we're using a custom element with a shadow dom that encapsulates styles",
    "start": "2062720",
    "end": "2068320"
  },
  {
    "text": "we're accepting user data via attributes and css custom properties and we're",
    "start": "2068320",
    "end": "2073760"
  },
  {
    "text": "sending data back up with custom events there are of course loads more advanced",
    "start": "2073760",
    "end": "2080000"
  },
  {
    "text": "stuff you can do with your web components but this pretty much covers the basics",
    "start": "2080000",
    "end": "2085760"
  },
  {
    "text": "i think the main thing to take away is that it is all native browser apis and",
    "start": "2085760",
    "end": "2092000"
  },
  {
    "text": "many of these you are probably already familiar with so hopefully that will make the step to",
    "start": "2092000",
    "end": "2097440"
  },
  {
    "text": "start using web components a little smaller",
    "start": "2097440",
    "end": "2102760"
  },
  {
    "start": "2101000",
    "end": "2101000"
  },
  {
    "text": "so now that we've talked about how to create web component let's talk a little bit about how to use them in different",
    "start": "2103599",
    "end": "2110480"
  },
  {
    "text": "environments and scenarios",
    "start": "2110480",
    "end": "2114359"
  },
  {
    "start": "2117000",
    "end": "2117000"
  },
  {
    "text": "putting a web component in a regular website is as easy as running its registration script once and then",
    "start": "2117760",
    "end": "2123920"
  },
  {
    "text": "placing it in the html this is what we've done a couple of times already in this presentation using web components inside",
    "start": "2123920",
    "end": "2131920"
  },
  {
    "text": "client-side frameworks is also incredibly straightforward as long as you run the registration code",
    "start": "2131920",
    "end": "2138000"
  },
  {
    "text": "once uh then you can just use them like you would regular html elements it's",
    "start": "2138000",
    "end": "2143520"
  },
  {
    "text": "super easy and straightforward the only major exception is actually react",
    "start": "2143520",
    "end": "2149119"
  },
  {
    "text": "which cullen currently requires a thin wrapper around the components in order",
    "start": "2149119",
    "end": "2154400"
  },
  {
    "text": "for listeners and attributes to work correctly but this is being worked on and it will",
    "start": "2154400",
    "end": "2160800"
  },
  {
    "text": "probably be fixed in the next release of react but other than that in most major",
    "start": "2160800",
    "end": "2166079"
  },
  {
    "text": "frameworks it just works",
    "start": "2166079",
    "end": "2171240"
  },
  {
    "start": "2171000",
    "end": "2171000"
  },
  {
    "text": "as you've seen throughout this talk the apis that we use to create our web components are fairly low level right",
    "start": "2173200",
    "end": "2180720"
  },
  {
    "text": "uh there are many things that need to be wired up manually and this leads to a lot of boilerplate",
    "start": "2180720",
    "end": "2185920"
  },
  {
    "text": "code wouldn't it be easier then if we could make an abstract class that takes care",
    "start": "2185920",
    "end": "2192160"
  },
  {
    "text": "of all this boilerplate code and then we can inherit from that instead of inheriting directly from html element",
    "start": "2192160",
    "end": "2200400"
  },
  {
    "text": "well yes it would be and luckily there are already many clever people who have thought of",
    "start": "2200400",
    "end": "2205440"
  },
  {
    "text": "this and made such classes that we can use some have gone even further than that",
    "start": "2205440",
    "end": "2211599"
  },
  {
    "text": "and made a really complicated solutions for creating web components but i think it's safe to call all of",
    "start": "2211599",
    "end": "2218560"
  },
  {
    "text": "these web component frameworks because they make it so much easier and",
    "start": "2218560",
    "end": "2225440"
  },
  {
    "text": "cleaner to write web components but underneath they use all of the",
    "start": "2225440",
    "end": "2230640"
  },
  {
    "text": "technology that we've looked at here today so having that understanding will make it easier for you",
    "start": "2230640",
    "end": "2237119"
  },
  {
    "text": "to understand and use the frameworks here are a couple of the most popular",
    "start": "2237119",
    "end": "2243200"
  },
  {
    "text": "web component frameworks right now uh lit is a very competent base class that you can inherit from",
    "start": "2243200",
    "end": "2249599"
  },
  {
    "text": "it only uses native javascript syntax and yet manages to make the api very",
    "start": "2249599",
    "end": "2254880"
  },
  {
    "text": "streamlined it's a sort of continuation of the polymer project which you may have heard of",
    "start": "2254880",
    "end": "2260560"
  },
  {
    "text": "so i highly recommend checking this out it's probably the most popular web component framework right now",
    "start": "2260560",
    "end": "2266880"
  },
  {
    "text": "stencil includes tooling that makes it easy to write collections or libraries of web",
    "start": "2266880",
    "end": "2273040"
  },
  {
    "text": "components they also use jsx in their syntax so if you're coming from react you might feel",
    "start": "2273040",
    "end": "2279440"
  },
  {
    "text": "comfortable there and if you're going to create the whole library of web components this is definitely a library a framework you can consider",
    "start": "2279440",
    "end": "2288560"
  },
  {
    "text": "and there are also many others out there like solid or lightning or hybrids for example and many more",
    "start": "2288560",
    "end": "2296560"
  },
  {
    "text": "there are also uh some of our should i call them traditional",
    "start": "2297040",
    "end": "2302160"
  },
  {
    "text": "client-side javascript frameworks that can actually compile their components into web components uh such as vue or",
    "start": "2302160",
    "end": "2309119"
  },
  {
    "text": "svelt i will admit that i haven't actually explored this very much myself uh but",
    "start": "2309119",
    "end": "2314800"
  },
  {
    "text": "the possibility is there just so you know in conclusion when it comes to web",
    "start": "2314800",
    "end": "2320880"
  },
  {
    "text": "component frameworks you will probably want to use one of these when you write web components",
    "start": "2320880",
    "end": "2327359"
  },
  {
    "text": "at least if you need a moderate amount of complexity or more they do make things a lot easier and",
    "start": "2327359",
    "end": "2333920"
  },
  {
    "text": "they don't add a lot of overhead but again having an understanding of how",
    "start": "2333920",
    "end": "2338960"
  },
  {
    "text": "web components work on a fundamental level will make it easier to understand what the frameworks do and it will make",
    "start": "2338960",
    "end": "2345040"
  },
  {
    "text": "you a better developer in the long run i dare say",
    "start": "2345040",
    "end": "2349599"
  },
  {
    "start": "2349000",
    "end": "2349000"
  },
  {
    "text": "okay we are nearing the end of this talk so let's take a moment to look to the",
    "start": "2351599",
    "end": "2357520"
  },
  {
    "text": "future and ask ourselves what role will web components play in the future of web",
    "start": "2357520",
    "end": "2363599"
  },
  {
    "text": "development",
    "start": "2363599",
    "end": "2366599"
  },
  {
    "text": "web components are mature enough and has enough browser support to be used in production today",
    "start": "2370400",
    "end": "2376960"
  },
  {
    "text": "and they are being used in production in many places some people already use web components",
    "start": "2376960",
    "end": "2382560"
  },
  {
    "text": "to build entire complex web apps other use them to build single",
    "start": "2382560",
    "end": "2389359"
  },
  {
    "text": "universally usable components that can be distributed and used in any context",
    "start": "2389359",
    "end": "2395440"
  },
  {
    "text": "i'd like to show you a couple of examples actually of standalone web components that are really quite extraordinary and i know",
    "start": "2395440",
    "end": "2402079"
  },
  {
    "text": "they would have taken me a long time to build this is a component by github called",
    "start": "2402079",
    "end": "2408720"
  },
  {
    "text": "relative time you give it a timestamp and it outputs a nice relative time like five minutes ago or two hours from now",
    "start": "2408720",
    "end": "2416400"
  },
  {
    "text": "yeah you've all seen this amazingly reusable i love this component",
    "start": "2416400",
    "end": "2422800"
  },
  {
    "text": "and this one two up you give it two html elements and they can then be compared with a",
    "start": "2423280",
    "end": "2429200"
  },
  {
    "text": "sliding overlay effect so it's perfect for you know before and after photos or",
    "start": "2429200",
    "end": "2434319"
  },
  {
    "text": "other kinds of comparisons uh anything you can think of really cool stuff and how about this one model viewer you",
    "start": "2434319",
    "end": "2441599"
  },
  {
    "text": "give it the url to a 3d file and bam just like that you've got an interactive",
    "start": "2441599",
    "end": "2446800"
  },
  {
    "text": "3d model right there in the browser how amazing is that i don't even know how amazing it is",
    "start": "2446800",
    "end": "2452560"
  },
  {
    "text": "because i wouldn't know where to start with something like this but this is all encapsulated in a single web component",
    "start": "2452560",
    "end": "2458720"
  },
  {
    "text": "super cool another popular use for web components",
    "start": "2458720",
    "end": "2464319"
  },
  {
    "start": "2461000",
    "end": "2461000"
  },
  {
    "text": "is as i've already mentioned to build ui libraries with them possibly as part of a larger design system",
    "start": "2464319",
    "end": "2471440"
  },
  {
    "text": "this makes the library components universal and doesn't force any specific technology on the users of the library",
    "start": "2471440",
    "end": "2479520"
  },
  {
    "text": "this is especially useful in very large organizations where multiple tech stacks already exist",
    "start": "2479520",
    "end": "2488400"
  },
  {
    "text": "or where experimentation with new technologies are allowed and encouraged",
    "start": "2488480",
    "end": "2494880"
  },
  {
    "text": "so you won't have to throw away your entire code base or avoid using the library",
    "start": "2494880",
    "end": "2500720"
  },
  {
    "text": "because the technologies don't match or if you want to do you know a side project with svelte instead of react",
    "start": "2500720",
    "end": "2507680"
  },
  {
    "text": "at your at your job if the ui library is made with web components you can use them anyway",
    "start": "2507680",
    "end": "2516640"
  },
  {
    "start": "2516000",
    "end": "2516000"
  },
  {
    "text": "a question i hear asked is will web components replace javascript client",
    "start": "2517839",
    "end": "2523920"
  },
  {
    "text": "frameworks some might claim that web components are",
    "start": "2523920",
    "end": "2528960"
  },
  {
    "text": "here to completely replace or distort the javascript ecosystem",
    "start": "2528960",
    "end": "2534960"
  },
  {
    "text": "will it be so well not very soon i don't think there are still a lot of problems that these",
    "start": "2534960",
    "end": "2542560"
  },
  {
    "text": "frameworks solve that web components in and of themselves do not",
    "start": "2542560",
    "end": "2548480"
  },
  {
    "text": "not to mention the huge communities and ecosystems that surround these frameworks",
    "start": "2548720",
    "end": "2555040"
  },
  {
    "text": "but you could ask yourself this will react and similar frameworks",
    "start": "2555040",
    "end": "2562400"
  },
  {
    "text": "last and be popular forever like forever ever",
    "start": "2562400",
    "end": "2568240"
  },
  {
    "text": "probably not uh so what will replace them and when",
    "start": "2568240",
    "end": "2575520"
  },
  {
    "text": "well regardless of what mine or your predictions are the fact is",
    "start": "2575520",
    "end": "2580800"
  },
  {
    "text": "that web components are part of the web specification and that's not going away",
    "start": "2580800",
    "end": "2586640"
  },
  {
    "text": "because remember the web is backwards compatible in fact the specification will only keep",
    "start": "2586640",
    "end": "2592960"
  },
  {
    "text": "evolving and improving as time goes by so sooner or later it might be time for",
    "start": "2592960",
    "end": "2598960"
  },
  {
    "text": "you to to upgrade thank you",
    "start": "2598960",
    "end": "2606680"
  },
  {
    "text": "if you want to get in touch with me uh my website is there to be assumingstrom.net and you can find me on",
    "start": "2611839",
    "end": "2618240"
  },
  {
    "text": "twitter as well yeah that's it it's been a delight thank you so much",
    "start": "2618240",
    "end": "2625160"
  }
]