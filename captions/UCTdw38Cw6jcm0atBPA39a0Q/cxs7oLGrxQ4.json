[
  {
    "text": "welcome everyone thank you thank you all for coming um I'm I've really been looking forward to give this talk so I'm",
    "start": "8800",
    "end": "14559"
  },
  {
    "text": "happy that so many of you actually made it here um welc come in if you want to stand up there's room in the back but I'm afraid we actually out of of out of",
    "start": "14559",
    "end": "22039"
  },
  {
    "text": "chairs there are two chairs there and you can probably take them and and pull them down there if you want to um so my",
    "start": "22039",
    "end": "28240"
  },
  {
    "text": "name is Mark Seaman and if you want to know more about me there's a you know you can go to blog. DK there's an about",
    "start": "28240",
    "end": "34160"
  },
  {
    "text": "me page there and you can read all about me so I'm not going to spend your time with that I'm on on Twitter at plur um",
    "start": "34160",
    "end": "41120"
  },
  {
    "text": "and as you can tell this talk is uh has the title from dependency injection to dependency rejection um so like five six",
    "start": "41120",
    "end": "48879"
  },
  {
    "text": "years ago I wrote a book called dependency injection Inn net um it was published in",
    "start": "48879",
    "end": "53960"
  },
  {
    "text": "2011 and since there is this word rejection in the title of this talk you may be expecting that this is going to",
    "start": "53960",
    "end": "60719"
  },
  {
    "text": "be some sort of um Talk where I finally realize the errors of my ways and do you",
    "start": "60719",
    "end": "66000"
  },
  {
    "text": "know repentance here and you know retract everything I wrote in a 500 pages book there it's not going to",
    "start": "66000",
    "end": "72280"
  },
  {
    "text": "happen um I'm actually pretty happy with the book I think it was a a good U book for the topic surely there were things",
    "start": "72280",
    "end": "78840"
  },
  {
    "text": "that I would change today but overall I'm pretty happy with this book and I think um it talks about dependen",
    "start": "78840",
    "end": "84240"
  },
  {
    "text": "injection and I think uh if you are doing object oriented programming in shab or even in Java or",
    "start": "84240",
    "end": "90400"
  },
  {
    "text": "or something like that you know dependency injection is a well-known well understood and well described way",
    "start": "90400",
    "end": "95880"
  },
  {
    "text": "to deal with issues of coupling and code maintainability and so on uh so I'm not",
    "start": "95880",
    "end": "101360"
  },
  {
    "text": "really going to retract retract any of those things uh but also since basically",
    "start": "101360",
    "end": "106479"
  },
  {
    "text": "that time frame I've become increasingly interested in functional programming I started with FP and I'm also now looking",
    "start": "106479",
    "end": "112320"
  },
  {
    "text": "into haskill and other programming you know functional programming languages so sometimes people ask me you know in",
    "start": "112320",
    "end": "117439"
  },
  {
    "text": "functional programming how do you do dependency injection and functional programming so that's actually what this",
    "start": "117439",
    "end": "122640"
  },
  {
    "text": "talk is trying uh to describe and trying to answer that particular question so um",
    "start": "122640",
    "end": "128640"
  },
  {
    "text": "there's going to be some some you know back and forth and I'm going to tell you what other people tell you and then I'm going to tell you that that may not not",
    "start": "128640",
    "end": "134599"
  },
  {
    "text": "always apply uh so I think it's safest to actually start with the conclusion up front so that there will be no confusion",
    "start": "134599",
    "end": "141080"
  },
  {
    "text": "so just to reiterate if you're doing object-oriented code you know defin injection is still a perfectly valid way",
    "start": "141080",
    "end": "147319"
  },
  {
    "text": "to deal with coupling and uh maintainability issues if you're doing functional programming if you're working",
    "start": "147319",
    "end": "153040"
  },
  {
    "text": "with a you know non-strict functional programming language like for example if Shar that enables you to do impure stuff",
    "start": "153040",
    "end": "160200"
  },
  {
    "text": "uh just mixed in with with pure stuff as well lots of people will tell you that the appropriate approach to dependent",
    "start": "160200",
    "end": "166000"
  },
  {
    "text": "injection in languages like that is something called partial function application and I'll I'll tell you what",
    "start": "166000",
    "end": "171959"
  },
  {
    "text": "that is when I get there so if you've never heard about that before don't worry I'll I'll cover that as well um",
    "start": "171959",
    "end": "177400"
  },
  {
    "text": "and it turns out that it's it's true these two things are almost exactly equivalent to each other it also turns",
    "start": "177400",
    "end": "184519"
  },
  {
    "text": "out though that it's actually not a functional thing to do so just to be absolutely clear I'm not saying partial",
    "start": "184519",
    "end": "190959"
  },
  {
    "text": "application is not functional but using partial application to do dependency injection turns out not to be functional",
    "start": "190959",
    "end": "198280"
  },
  {
    "text": "uh so I'll tell you why that is as well and then I'll you know since I tell you that that's not functional I'll also",
    "start": "198280",
    "end": "204760"
  },
  {
    "text": "need to tell you so what is the functional way and it's basically just a way to compose function so that you keep",
    "start": "204760",
    "end": "210760"
  },
  {
    "text": "the pure and the impure stuff decoupled and still talking to each other though so I'll I'll show you how to do that as",
    "start": "210760",
    "end": "217439"
  },
  {
    "text": "well so that's basically the agenda uh for the next um 55 minutes um so um I",
    "start": "217439",
    "end": "225519"
  },
  {
    "text": "think it's it's reasonable just to start to to think about you know before we get into the functional stuff just do a A",
    "start": "225519",
    "end": "231239"
  },
  {
    "text": "Brief Review of you know what does it actually mean dependency injection in object oriented code so Runa bison gave",
    "start": "231239",
    "end": "237760"
  },
  {
    "text": "a talk at a Scala conference a couple of years ago he says well dependenc injection is really just a pretentious way to take taking an argument and",
    "start": "237760",
    "end": "245159"
  },
  {
    "text": "there's actually quite a bit of Truth to that um but I want to talk about you know why on a certain level he's",
    "start": "245159",
    "end": "250879"
  },
  {
    "text": "absolutely correct and then also on another level uh there's a little bit it's a little bit more involved and then",
    "start": "250879",
    "end": "256400"
  },
  {
    "text": "you can write a 500 pages book about how it's more involved um but I'm not going to do that here it's it's pretty simple",
    "start": "256400",
    "end": "263639"
  },
  {
    "text": "stuff actually but it's we need to modify that statement a little bit uh so I'll show you that first just to do a re",
    "start": "263639",
    "end": "269919"
  },
  {
    "text": "of what do I mean when I talk about dependency injection and then we'll look at how to do this in functional programming instead so um in order to do",
    "start": "269919",
    "end": "277680"
  },
  {
    "text": "that I think it's important to start with an example so we have some code to look at so I'll look at the same",
    "start": "277680",
    "end": "283000"
  },
  {
    "text": "scenario all the way through but I'll write it in different languages in different styles um so the scenario is",
    "start": "283000",
    "end": "290720"
  },
  {
    "text": "my favorite scenario which is suppose you're being asked to develop an online",
    "start": "290720",
    "end": "295759"
  },
  {
    "text": "restaurant reservation system and I know these things already exist but just bear with me for the sake of the example and",
    "start": "295759",
    "end": "301520"
  },
  {
    "text": "imagine that you have to develop yet another one of those and you know what what they work like you go into an app",
    "start": "301520",
    "end": "306680"
  },
  {
    "text": "or website or whatever and you pick a restaurant and you pick a date and you fill in a form with your information and",
    "start": "306680",
    "end": "312720"
  },
  {
    "text": "then you press the submit button and what's going to happen then is that some the application is going to post a Json",
    "start": "312720",
    "end": "318120"
  },
  {
    "text": "document to some HTTP based web service somewhere and your specific task right",
    "start": "318120",
    "end": "323720"
  },
  {
    "text": "now or our specific task you could imagine is to develop a HTTP based web",
    "start": "323720",
    "end": "329759"
  },
  {
    "text": "service that accepts one of those Json documents and handles this request for a new",
    "start": "329759",
    "end": "336080"
  },
  {
    "text": "reservation um so just to keep the example simple we'll go through uh five steps so the first thing we'll need to",
    "start": "336080",
    "end": "342319"
  },
  {
    "text": "do is we we need to validate the incoming document because it's Json it might be malformed but if we understand",
    "start": "342319",
    "end": "348479"
  },
  {
    "text": "what the Json document says we can now we we we understand which time slot is it's asking about so now we can go and",
    "start": "348479",
    "end": "355520"
  },
  {
    "text": "query our database of existing reservations to figure out you know how many how many reservations do we actually have for that particular time",
    "start": "355520",
    "end": "361759"
  },
  {
    "text": "slot and once we have that information we can make a decision do we accept the reservation or do we reject it if we",
    "start": "361759",
    "end": "367680"
  },
  {
    "text": "accept it we'll save it into the database otherwise uh we'll not do that and then you know we'll return an a",
    "start": "367680",
    "end": "373599"
  },
  {
    "text": "response you know an HTTP response back um to the caller and we might shortcut",
    "start": "373599",
    "end": "379080"
  },
  {
    "text": "in various ways here for example if validation fails we'll just return a response right away and not do the other things and also if we decide to reject",
    "start": "379080",
    "end": "386080"
  },
  {
    "text": "the reservation uh we'll we there's no need to save the res a if we reject it but we'll still need to create an HTTP",
    "start": "386080",
    "end": "392479"
  },
  {
    "text": "response so that's basically what I want to do here so I'll start with a little review of what would that look like in",
    "start": "392479",
    "end": "399199"
  },
  {
    "text": "objectoriented code and I'll use C for my example but I suppose the Java would be sort of you know similar to this so",
    "start": "399199",
    "end": "407039"
  },
  {
    "text": "um this example will sort of teach us a little bit about you know why does dependency injection look like look the",
    "start": "407039",
    "end": "412680"
  },
  {
    "text": "way that it does and why is it not just taking an argument but it's taking an argument in a very specific way so so",
    "start": "412680",
    "end": "419479"
  },
  {
    "text": "I'll start since this is objectoriented you know C code I'll start with a class uh and I'm using a framework here called",
    "start": "419479",
    "end": "425560"
  },
  {
    "text": "asp.net web API and if you have never seen that before that's not you don't worry about that it's not really important for this talk you can just",
    "start": "425560",
    "end": "432319"
  },
  {
    "text": "imagine that this is it's some web framework and that's basically all you need to know um so the first thing I'm",
    "start": "432319",
    "end": "437759"
  },
  {
    "text": "going to do here is I'm going to create a method called post and post takes something called reservation request dto",
    "start": "437759",
    "end": "443919"
  },
  {
    "text": "so dto is a data transfer object just like in Martin Fowler's you know patterns of Enterprise application AR",
    "start": "443919",
    "end": "449360"
  },
  {
    "text": "architecture and it's just the C view on this Json document so it's just you know a representation of the data that's",
    "start": "449360",
    "end": "456080"
  },
  {
    "text": "coming in as as Json and it's just turned into an object instead right um so the first thing we",
    "start": "456080",
    "end": "462240"
  },
  {
    "text": "want to do is we want to validate the input so um if you do this the object oriented way maybe you have some sort of",
    "start": "462240",
    "end": "468240"
  },
  {
    "text": "validator objects and you can call validator do validate and then it'll return a message and in this case the",
    "start": "468240",
    "end": "474800"
  },
  {
    "text": "design is such that if the you know validation message is anything but empty we consider that to be a validation",
    "start": "474800",
    "end": "481360"
  },
  {
    "text": "failure and we'll just return you know 400 bad request and you'll notice that there's a",
    "start": "481360",
    "end": "486680"
  },
  {
    "text": "validator object there that I'm calling and you wonder you know where does that object come from and this is where we",
    "start": "486680",
    "end": "492960"
  },
  {
    "text": "what we need to figure out okay what where does that object actually come from we'll figure that out in a moment",
    "start": "492960",
    "end": "498240"
  },
  {
    "text": "I'll just talk you through the rest of the implementation it's pretty straightforward now if you're into domain driven design the next thing you",
    "start": "498240",
    "end": "504319"
  },
  {
    "text": "might want to to say is now that I know it's valid I'll map the dto into my domain object and you you know I was a",
    "start": "504319",
    "end": "510759"
  },
  {
    "text": "little bit lazy there so I just called it R but R stands for reservation so that's my reservation domain model if",
    "start": "510759",
    "end": "516560"
  },
  {
    "text": "you will and if you're really into domain driven design um you may want to use this ubiquitous language where",
    "start": "516560",
    "end": "523518"
  },
  {
    "text": "you're talking the same language as your domain experts and in the restaurant business you know if you go into a real",
    "start": "523519",
    "end": "528920"
  },
  {
    "text": "restaurant and ask if they have a table for four people um you'll be interacting with a person called the matred at least",
    "start": "528920",
    "end": "535360"
  },
  {
    "text": "in more fancy restaurants um it's it probably that was the American pronunciation of a French word so I",
    "start": "535360",
    "end": "541959"
  },
  {
    "text": "apologize to the French people in here um so you could have a matrid object and you could ask it whether it can accept",
    "start": "541959",
    "end": "548640"
  },
  {
    "text": "the reservation and in this design here what we basically do is we get an ID back so that's the ID of the newly cre",
    "start": "548640",
    "end": "554959"
  },
  {
    "text": "created reservation but if that's null we'll return you a 403 Forbidden so",
    "start": "554959",
    "end": "560000"
  },
  {
    "text": "there are various issues with this this design like it violates command query separation and it uses nulls for real",
    "start": "560000",
    "end": "566320"
  },
  {
    "text": "values which is you know not a nice thing to do um but lots of people do this in ch so I thought I'd just keep",
    "start": "566320",
    "end": "572240"
  },
  {
    "text": "the example realistic there but otherwise if we get past that point as well we can just return 200",
    "start": "572240",
    "end": "578200"
  },
  {
    "text": "okay so what we have here is we have three dependencies we have a validator we have a mapper and we have a matrid",
    "start": "578200",
    "end": "585480"
  },
  {
    "text": "which are three dependencies so now we're wondering you know where do these three dependencies come from can we make",
    "start": "585480",
    "end": "593920"
  },
  {
    "text": "post the method post there can we can't we just make them make the post method takes those three dependent as arguments",
    "start": "593920",
    "end": "600200"
  },
  {
    "text": "to the to the post method and unfortunately it turns out not to be possible because the post method is",
    "start": "600200",
    "end": "605800"
  },
  {
    "text": "being called This is being called by convention by our web framework and you know most web Frameworks are perfectly",
    "start": "605800",
    "end": "612079"
  },
  {
    "text": "happy to pull data out of URLs uh so in this case the URL is just you know SL",
    "start": "612079",
    "end": "617440"
  },
  {
    "text": "reservations but if it had been like SL reservations SL one23 uh and the one two3 would have been some sort of ID you",
    "start": "617440",
    "end": "624000"
  },
  {
    "text": "know web framework would be perfectly happy to pull that information out of the URL as well and it's also perfect be",
    "start": "624000",
    "end": "629480"
  },
  {
    "text": "you know happy to give me the data that was actually part of the body of the HTTP request there but apart from that",
    "start": "629480",
    "end": "636160"
  },
  {
    "text": "you know you can't really have any other you know values or arguments that go into this sort of method called there",
    "start": "636160",
    "end": "642240"
  },
  {
    "text": "because otherwise you know the web framework wouldn't know how to wire those things up um so we'll need to",
    "start": "642240",
    "end": "648800"
  },
  {
    "text": "figure out another way to pass those dependencies in as arguments and we can't pass them as arguments to the post",
    "start": "648800",
    "end": "655040"
  },
  {
    "text": "method so we'll need to pass them as arguments to the Constructor because where else would would we do that so",
    "start": "655040",
    "end": "660760"
  },
  {
    "text": "this is basically dependen injection in a nutshell this is called Constructor injection and it's pretty well described",
    "start": "660760",
    "end": "666639"
  },
  {
    "text": "and it's not difficult to follow at all uh it's fairly straightforward but then you might say",
    "start": "666639",
    "end": "672560"
  },
  {
    "text": "but this is a special case because this is where your code is interfacing with the framework and there are rules that",
    "start": "672560",
    "end": "678399"
  },
  {
    "text": "the framework framework enforces um or restrictions so surely if we go a level",
    "start": "678399",
    "end": "683720"
  },
  {
    "text": "deeper and look at just the matrid object for example now here we can control what the you know the methods",
    "start": "683720",
    "end": "690279"
  },
  {
    "text": "look like so surely we can just pass you know dependencies as arguments all can we so I'll start with",
    "start": "690279",
    "end": "697240"
  },
  {
    "text": "a tri accept method here and you'll notice that it's a it's a method that just takes reservation as input and returns an a nullable int as output so",
    "start": "697240",
    "end": "704720"
  },
  {
    "text": "so the sort of the contract here is that it Returns the ID of the reservation if that reservation was saved into the",
    "start": "704720",
    "end": "710240"
  },
  {
    "text": "database and if it returns null it means that we couldn't accept the reservation so the way we might implement this is",
    "start": "710240",
    "end": "716639"
  },
  {
    "text": "we'll say something like we'll call A reservation repository read the reservations for that particular date",
    "start": "716639",
    "end": "722959"
  },
  {
    "text": "and do a sum of over uh over all the quantities and that gives by me a number of reserved seeds for that particular",
    "start": "722959",
    "end": "729600"
  },
  {
    "text": "time slot and then I can make a decision and that's pretty straightforward I can say well if the number of already",
    "start": "729600",
    "end": "735040"
  },
  {
    "text": "Reserve seeds plus the reservation quantity if that's less than or equal to some capacity which is another number um",
    "start": "735040",
    "end": "741959"
  },
  {
    "text": "I can accept the reservation and I can call reservation repository um create and that creates a new row in the",
    "start": "741959",
    "end": "748360"
  },
  {
    "text": "database and it Returns the ID of that new row and I can return that ID and otherwise",
    "start": "748360",
    "end": "753680"
  },
  {
    "text": "I'll just return null something like that so you might say well all right so I have at least one dependency there a",
    "start": "753680",
    "end": "759800"
  },
  {
    "text": "reservations repository can can I just make try accept take that as an",
    "start": "759800",
    "end": "765320"
  },
  {
    "text": "argument and it turns out unfortunately I can't because you know majd implements this interface called IM majd and it",
    "start": "765320",
    "end": "771880"
  },
  {
    "text": "defines tricept to have this particular shape so I can't just go willy-nilly and add more arguments to that method",
    "start": "771880",
    "end": "778160"
  },
  {
    "text": "because uh uh then it wouldn't compile and then you can say well but couldn't you just add you know those extra",
    "start": "778160",
    "end": "783800"
  },
  {
    "text": "arguments to the interface as well and uh that would be a leaky abstraction you",
    "start": "783800",
    "end": "788839"
  },
  {
    "text": "know because it's an implementation detail that this particular implementation talks to a reservation repository and I could have implemented",
    "start": "788839",
    "end": "795120"
  },
  {
    "text": "this in a lots of other ways maybe I want to add a decorator that does locking or I want to add a decorator uh",
    "start": "795120",
    "end": "800680"
  },
  {
    "text": "that does caching so if I want to do caching for example maybe I want to have a caching object that I read and write",
    "start": "800680",
    "end": "805800"
  },
  {
    "text": "to so should I pass that as an argument to the function to the method as well so it's sort of like if if I did it like",
    "start": "805800",
    "end": "811959"
  },
  {
    "text": "that you know the argument list would just grow and grow and I'd be violating the dependency inversion principle I'd be violate the open close principle and",
    "start": "811959",
    "end": "818600"
  },
  {
    "text": "a lot of other things so I sort of need to be able to say this is the abstraction you know I take a",
    "start": "818600",
    "end": "824240"
  },
  {
    "text": "reservation I want to get an ID back if if the reservation was accepted that's the abstraction and all the other stuff",
    "start": "824240",
    "end": "830800"
  },
  {
    "text": "is just an implementation detail so again you know I just need to do Constructor injection uh because that's",
    "start": "830800",
    "end": "836199"
  },
  {
    "text": "that's the only thing I can really do so it sort of goes like that all the way",
    "start": "836199",
    "end": "841279"
  },
  {
    "text": "through and it's pretty consistent pattern and you can apply it over and over again and that's you know basically how dependency injection",
    "start": "841279",
    "end": "847759"
  },
  {
    "text": "works so so that's just a little bit of review of you know what does it usually look like in objectoriented",
    "start": "847759",
    "end": "853920"
  },
  {
    "text": "code and before I continue on I just want you to remember a couple of things because I'm going to rewrite this code",
    "start": "853920",
    "end": "859399"
  },
  {
    "text": "in different languages now um so this is a class called matro and it has a first",
    "start": "859399",
    "end": "864680"
  },
  {
    "text": "of all it has a primitive dependency on the capacity so you'll see capacity just an integer it's just the number of",
    "start": "864680",
    "end": "870880"
  },
  {
    "text": "people who can eat at the restaurant at the same time and then I have this res reservations repository but if we break",
    "start": "870880",
    "end": "877199"
  },
  {
    "text": "down the interaction with the repository you'll notice that I call two methods on that repository I call read reservations",
    "start": "877199",
    "end": "883759"
  },
  {
    "text": "to get the reservations for a particular date and I call create in order to create a new row in the database so this",
    "start": "883759",
    "end": "891040"
  },
  {
    "text": "repository may have lots of other methods as well we don't really know I'm only using those two methods you know so",
    "start": "891040",
    "end": "897519"
  },
  {
    "text": "in practice I'm sort of have you know you know conceptually I have three dependencies the capacity and those two methods that's basically what I have to",
    "start": "897519",
    "end": "904720"
  },
  {
    "text": "deal with here right so that's a rearview of you know what it normally looks like in in",
    "start": "904720",
    "end": "910480"
  },
  {
    "text": "objectoriented programming and you know this is what you can read all about in the book that I wrote and so on so I",
    "start": "910480",
    "end": "915519"
  },
  {
    "text": "don't really have any particular problems with that if you're doing object-oriented code so how do you do",
    "start": "915519",
    "end": "921639"
  },
  {
    "text": "dependency injection and functional programming you know how do you this comic talks about Scala but it could be anything you don't because as a",
    "start": "921639",
    "end": "929000"
  },
  {
    "text": "functional language fine it's functional how do I inject independencies you write",
    "start": "929000",
    "end": "934319"
  },
  {
    "text": "a free mo ad which allows you to build a moad over from any funter did you just ask me to go myself I believe I did",
    "start": "934319",
    "end": "942560"
  },
  {
    "text": "BB yeah you will find functional programmers who will actually give you",
    "start": "942560",
    "end": "949720"
  },
  {
    "text": "that answer that you have to use a free moan ad in order to do dependent injection and functional programming and",
    "start": "949720",
    "end": "955199"
  },
  {
    "text": "it's not wrong it's you absolutely can do that but but you know when we get into monads and particular free monads",
    "start": "955199",
    "end": "962279"
  },
  {
    "text": "stuff Things become complicated quite fast so fortunately in most cases I've",
    "start": "962279",
    "end": "967600"
  },
  {
    "text": "found in practice there's a much simpler much small straightforward solution than using a free Monet I'm not going to talk",
    "start": "967600",
    "end": "974240"
  },
  {
    "text": "about free monets at all although it is a a thing you can do I'm going to tell you how to do things in a much more and",
    "start": "974240",
    "end": "980639"
  },
  {
    "text": "you know much Les much less complicated way um so if you ask a lot of people who",
    "start": "980639",
    "end": "986240"
  },
  {
    "text": "are already you know experts in if sh for example so if you ask them you know how do I do dependen injection in FP",
    "start": "986240",
    "end": "991959"
  },
  {
    "text": "they'll tell you to use something called partial function application and um as as we will see I",
    "start": "991959",
    "end": "998440"
  },
  {
    "text": "sort of told you this already at the beginning this is a perfectly um it's a",
    "start": "998440",
    "end": "1005000"
  },
  {
    "text": "perfect it's almost a Perfect Analogy to dependency injection in C um there's a",
    "start": "1005000",
    "end": "1010560"
  },
  {
    "text": "very near correspondence between those two but it also turns out not really to be functional but it works and you know",
    "start": "1010560",
    "end": "1016440"
  },
  {
    "text": "it does what you wanted to do so if you can live with it not being functional it's a perfectly valid thing to do so",
    "start": "1016440",
    "end": "1021959"
  },
  {
    "text": "I'll show you what that looks like first and then I'll show you why it's not functional and then I'll show you you know what to do",
    "start": "1021959",
    "end": "1027360"
  },
  {
    "text": "instead so now we'll shift uh we'll go move away from C and I'll start using",
    "start": "1027360",
    "end": "1032720"
  },
  {
    "text": "writing some f instead I'm not assuming that you can read if sharp already so I'm sort of walk you through the",
    "start": "1032720",
    "end": "1038160"
  },
  {
    "text": "important parts of this uh so here's the beginning of a function uh this doesn't compile at the moment because I haven't",
    "start": "1038160",
    "end": "1043798"
  },
  {
    "text": "actually written the function I'm just sort of written the Declaration of it um so um so let's just stop here and talk",
    "start": "1043799",
    "end": "1050440"
  },
  {
    "text": "about it um so you'll see that there are three lines of code here the top ones the green ones are just comments uh so",
    "start": "1050440",
    "end": "1056919"
  },
  {
    "text": "the only line of code that we actually have is the one that starts with let and it has all white letters for the rest of",
    "start": "1056919",
    "end": "1062240"
  },
  {
    "text": "it so Tri accept is the name of the function and then there are four other words capacity read reservations create",
    "start": "1062240",
    "end": "1068640"
  },
  {
    "text": "reservation and um reservation those are arguments to the function so this is a function that takes four arguments which",
    "start": "1068640",
    "end": "1075120"
  },
  {
    "text": "is you know a bit at the high end I think um but maybe we can live with that",
    "start": "1075120",
    "end": "1080400"
  },
  {
    "text": "and then I've you know tried in the comments to describe what are the types of all of these things and uh the way",
    "start": "1080400",
    "end": "1086280"
  },
  {
    "text": "that if SHP works that once you've actually written your implementation then the compiler infers what the types",
    "start": "1086280",
    "end": "1092240"
  },
  {
    "text": "are so at the moment the the compile since this doesn't compile it doesn't really make sense to talk about the the",
    "start": "1092240",
    "end": "1097960"
  },
  {
    "text": "type of the function as it is at the moment but this is the type of the function as it will be once I've written all the code so the way that we read",
    "start": "1097960",
    "end": "1105120"
  },
  {
    "text": "this is you can tell on the first um on the first line there is says int after the two slashes and that's the type of",
    "start": "1105120",
    "end": "1111880"
  },
  {
    "text": "the capacity argument because you you just read it by position so capacity is just an integer and it corresponds to",
    "start": "1111880",
    "end": "1118280"
  },
  {
    "text": "that capacity that I injected into the matrid object before if you remember the C you know um example now the next thing",
    "start": "1118280",
    "end": "1125840"
  },
  {
    "text": "I have there is bracket begin datetime offset Arrow reservation list bracket",
    "start": "1125840",
    "end": "1131039"
  },
  {
    "text": "end the reason why it's in Brackets is because it's a function so this this is one argument but the argument is a",
    "start": "1131039",
    "end": "1137400"
  },
  {
    "text": "function it's a function fun that takes a daytime offset as input and returns a reservation list as output and the same",
    "start": "1137400",
    "end": "1143200"
  },
  {
    "text": "goes for the other bracketed one that says reservation to int that's also a function now these two functions",
    "start": "1143200",
    "end": "1149480"
  },
  {
    "text": "together play the same role as the repository in that Mator D you know example that I showed you before I just",
    "start": "1149480",
    "end": "1156080"
  },
  {
    "text": "instead of defining an interface I just broke out broke them out into two functions because it's a more you know",
    "start": "1156080",
    "end": "1161919"
  },
  {
    "text": "lightweight way of you know approaching the problem you don't have to declare a new type I can just say these are two",
    "start": "1161919",
    "end": "1167240"
  },
  {
    "text": "functions and then the last argument the last input argument is the reservation we're trying to figure out whether we can",
    "start": "1167240",
    "end": "1173240"
  },
  {
    "text": "accept that or not and then on the next line you can see the return type of this function is going to be int option which",
    "start": "1173240",
    "end": "1179440"
  },
  {
    "text": "is um sort of you can think of it as the same as a nullable int um but just options in in F is a much more sane",
    "start": "1179440",
    "end": "1187159"
  },
  {
    "text": "approach to uh to to model you know values that may or may not be there",
    "start": "1187159",
    "end": "1192200"
  },
  {
    "text": "because they're actually type safe whereas null is not null doesn't have a type um so um it's a it's a way to state",
    "start": "1192200",
    "end": "1198480"
  },
  {
    "text": "Saye and still think about values that may or may not be be present right okay so the implementation is pretty",
    "start": "1198480",
    "end": "1204280"
  },
  {
    "text": "straightforward it basically follows the same steps as you saw in in G first",
    "start": "1204280",
    "end": "1209559"
  },
  {
    "text": "we'll try to figure out what's the number of already reserved seeds so we do that by calling the function that was",
    "start": "1209559",
    "end": "1215320"
  },
  {
    "text": "passed in as an argument with the reservation date and then we do a sum over the quantities now if you've never",
    "start": "1215320",
    "end": "1221440"
  },
  {
    "text": "seen this vertical bar and the greater than sign before it's a pipe it works as",
    "start": "1221440",
    "end": "1226880"
  },
  {
    "text": "just like pipes work in or in Powershell so if you ever done scripting like that it's basically the same thing it means",
    "start": "1226880",
    "end": "1233120"
  },
  {
    "text": "take the value on the left hand side of the pipe and use that as an input value",
    "start": "1233120",
    "end": "1239919"
  },
  {
    "text": "uh on the on the right hand side of the pipe so in this case I'm calling read reservation with the reservation date that returns a reservation list and then",
    "start": "1239919",
    "end": "1246679"
  },
  {
    "text": "I use the reservation list as input argument into list. some bu that's basically what it means and you'll see",
    "start": "1246679",
    "end": "1252679"
  },
  {
    "text": "this over and over and over again in F this is something you know it's basically the the symbol of f",
    "start": "1252679",
    "end": "1258840"
  },
  {
    "text": "um almost so that gives me reserved seats that's an integer now I can make the same decision as I did in in G where",
    "start": "1258840",
    "end": "1266320"
  },
  {
    "text": "I just say well you know if the reserve seeds plus the the reservation quantity if that's less than or equal to the capacity I can accept it so I'll just",
    "start": "1266320",
    "end": "1273400"
  },
  {
    "text": "said is is accepted to true and I call create reservation which is the other function argument and that returns an",
    "start": "1273400",
    "end": "1280320"
  },
  {
    "text": "integer and I just pipe the integer into sum which is one of the cases that options can have if I decide not to",
    "start": "1280320",
    "end": "1286720"
  },
  {
    "text": "accept the reservation I just just return none so that's an INT option and",
    "start": "1286720",
    "end": "1291799"
  },
  {
    "text": "that's really all there is to it and then you may say well but that's not really that's not really equivalent to",
    "start": "1291799",
    "end": "1298320"
  },
  {
    "text": "the matrid object because how do we implement or how do we tell you know if we have a real application how do we",
    "start": "1298320",
    "end": "1304360"
  },
  {
    "text": "actually connect that with a real you know some code that actually talks to a real database so let's try to look at",
    "start": "1304360",
    "end": "1310840"
  },
  {
    "text": "what that looks like so if you remember the interface the IMD interface that I showed you before defined a method",
    "start": "1310840",
    "end": "1317320"
  },
  {
    "text": "called uh try accept that takes a reservation as input returned aable in as output so I'm aiming for the same",
    "start": "1317320",
    "end": "1324360"
  },
  {
    "text": "shape of abstraction here I want to take a reservation as input return an INT option as output so what I want to do",
    "start": "1324360",
    "end": "1331000"
  },
  {
    "text": "here is I you know I write a new function called try accept composition because it's just a function that composes the other stuff so first I need",
    "start": "1331000",
    "end": "1338400"
  },
  {
    "text": "a read function so if you imagine that I have a DB module that contains real you",
    "start": "1338400",
    "end": "1344400"
  },
  {
    "text": "know code that con connects to my SQL server or Oracle or whatever that might be um you know that's that's actually a",
    "start": "1344400",
    "end": "1351159"
  },
  {
    "text": "function and this this function takes a connection string as input it takes a datetime offset as input it queries into",
    "start": "1351159",
    "end": "1357159"
  },
  {
    "text": "the database identified by the connection string it queries my reservations table for that you know all",
    "start": "1357159",
    "end": "1362760"
  },
  {
    "text": "the reservations in that date time offset and returns all the reservations that that are in the table there so",
    "start": "1362760",
    "end": "1369000"
  },
  {
    "text": "you'll notice that this is a function that takes two arguments and returns a reservation list now what I can do is I",
    "start": "1369000",
    "end": "1374080"
  },
  {
    "text": "can call this function with one of the arguments I can call it with the connection string and the return value",
    "start": "1374080",
    "end": "1379520"
  },
  {
    "text": "of that is another function that is waiting for the remaining arguments this",
    "start": "1379520",
    "end": "1384760"
  },
  {
    "text": "is function applic that this is partial application this is all partial application is you just instead of not",
    "start": "1384760",
    "end": "1391600"
  },
  {
    "text": "this is not really possible to do in C but here you can do this you just call it with some of the arguments and you",
    "start": "1391600",
    "end": "1397039"
  },
  {
    "text": "just get a new function back that's waiting for the arguments you didn't Supply so that's another function and",
    "start": "1397039",
    "end": "1402320"
  },
  {
    "text": "this function has the shape that we want it to have and you can do the same thing with the create uh function you can say",
    "start": "1402320",
    "end": "1407600"
  },
  {
    "text": "you can par apply DB or create reservation and you get a function that takes reservation and Returns the ID of",
    "start": "1407600",
    "end": "1413480"
  },
  {
    "text": "the new row that it created and it actually talks to a real database and",
    "start": "1413480",
    "end": "1418640"
  },
  {
    "text": "now you have all the information almost if you hardcode the capacity you have all the information you need and you can",
    "start": "1418640",
    "end": "1423760"
  },
  {
    "text": "call try accept so I just hardcoded the capacities of the restaurant to be 10 because 10 is an easy number to think",
    "start": "1423760",
    "end": "1429679"
  },
  {
    "text": "about this would obviously mean that it's a very small and intimate restaurant but you know that's besides the",
    "start": "1429679",
    "end": "1435279"
  },
  {
    "text": "point so this is a call to to try accept with all four arguments passed in and",
    "start": "1435279",
    "end": "1441799"
  },
  {
    "text": "this is the last expression in my function and that just means that that becomes the return value of the function",
    "start": "1441799",
    "end": "1447240"
  },
  {
    "text": "so try accept returns an in option which means that this function also returns an in option so that's basically how I can",
    "start": "1447240",
    "end": "1453919"
  },
  {
    "text": "compose those things together now one of the things we might notice though is that try accept composition this",
    "start": "1453919",
    "end": "1460720"
  },
  {
    "text": "function takes a reservation as input and it passes the reservation as the last argument to try accept now if we",
    "start": "1460720",
    "end": "1469000"
  },
  {
    "text": "have that situation where we have the same value or the same argument on both sides of the equal sign and they're both",
    "start": "1469000",
    "end": "1475440"
  },
  {
    "text": "in the last position we can perform something called an eer reduction which means we can remove them this is just",
    "start": "1475440",
    "end": "1482320"
  },
  {
    "text": "almost like when you do equations in mathematics you can also sometimes you know cancel things out if they appear on",
    "start": "1482320",
    "end": "1487559"
  },
  {
    "text": "both sides of the equal sign so now it looks like the tri composition is not really a function anymore it looks like",
    "start": "1487559",
    "end": "1492799"
  },
  {
    "text": "it's a value but if you look at what the value is it's a parti applied function",
    "start": "1492799",
    "end": "1498640"
  },
  {
    "text": "because it's the function called into Tri accept with only three of the four arguments that Tri accept needs so the",
    "start": "1498640",
    "end": "1504919"
  },
  {
    "text": "return value of that is a function that is still waiting for you to supply the the reservation so this is exactly",
    "start": "1504919",
    "end": "1511679"
  },
  {
    "text": "equivalent to what you saw before now the reason why it's interesting to perform an e to reduction",
    "start": "1511679",
    "end": "1517279"
  },
  {
    "text": "in this case is because f is a net language and it means that it compiles",
    "start": "1517279",
    "end": "1522480"
  },
  {
    "text": "to iil which is you know the intermediary language or the Intermediate Language that that net uses",
    "start": "1522480",
    "end": "1528720"
  },
  {
    "text": "and um what you can do with the ilil is you can decompile it into C if you want to understand what's going on so if you",
    "start": "1528720",
    "end": "1535080"
  },
  {
    "text": "do that you get something back that pretty much looks like this I had to clean it up a little bit because it came back with lots of attributes uh also uh",
    "start": "1535080",
    "end": "1542559"
  },
  {
    "text": "but basically what you get back is something like this you'll notice it comp it's a class the class has a weird",
    "start": "1542559",
    "end": "1548440"
  },
  {
    "text": "name U it's actually not valid it's not a valid C name but it is a valid ilil",
    "start": "1548440",
    "end": "1553679"
  },
  {
    "text": "name so so this actually works it's a class the class has has class fields",
    "start": "1553679",
    "end": "1559440"
  },
  {
    "text": "that corresponds to the capacity and the create reservation on the read reservation functions the class has a",
    "start": "1559440",
    "end": "1565880"
  },
  {
    "text": "Constructor that takes those three arguments and assigns them to the fields and then it has an evoke method down",
    "start": "1565880",
    "end": "1571679"
  },
  {
    "text": "there in the button that composes all of those things together it's Constructor injection you",
    "start": "1571679",
    "end": "1577240"
  },
  {
    "text": "know partial application is the same as dependency injection in net it even sort of compiles to the same sort of code so",
    "start": "1577240",
    "end": "1584320"
  },
  {
    "text": "the people who tell you that in order to do dependency injection in in F you just use partial application are absolutely",
    "start": "1584320",
    "end": "1591200"
  },
  {
    "text": "correct because it is the same thing now the only thing that remains to",
    "start": "1591200",
    "end": "1596679"
  },
  {
    "text": "to investigate then is you know is it functional so you might stop right here and just say well you know I don't",
    "start": "1596679",
    "end": "1602600"
  },
  {
    "text": "really care about that I just want it to work and this works so you can absolutely go and just keep it at that",
    "start": "1602600",
    "end": "1609720"
  },
  {
    "text": "and then start using fun you know F sh and do dependency injection with partial application and all will be you know in",
    "start": "1609720",
    "end": "1615679"
  },
  {
    "text": "general as good as you know it was Inc sharp dependent injection um so that's fine but if you're really interested in",
    "start": "1615679",
    "end": "1622399"
  },
  {
    "text": "sometimes in learning you know whether it's really functional um because if if you want to learn you know what does it",
    "start": "1622399",
    "end": "1628320"
  },
  {
    "text": "actually mean to write functional code um we you might be interested in investigating whether this is the case",
    "start": "1628320",
    "end": "1634559"
  },
  {
    "text": "or not so in order to answer this question first and foremost we'll need to establish you know what do we mean by",
    "start": "1634559",
    "end": "1641000"
  },
  {
    "text": "something being functional and it's sort of like when you ask people about you know please give me a definition of unit",
    "start": "1641000",
    "end": "1646799"
  },
  {
    "text": "testing you get all sorts of different answers and and some people will always you will always find someone who you",
    "start": "1646799",
    "end": "1652120"
  },
  {
    "text": "know violently disagree with uh what most people you know agree on so you can't really get any sort of consensus",
    "start": "1652120",
    "end": "1658760"
  },
  {
    "text": "and I think it's a little bit the same with functional programming you can't really get you know everyone to agree on a common um definition of of um of of",
    "start": "1658760",
    "end": "1666960"
  },
  {
    "text": "functional programming but I think a pretty mainstream one is that functional programming must have an emphasis on",
    "start": "1666960",
    "end": "1672279"
  },
  {
    "text": "something we call Pure functions because pure functions have lots of good qualities uh that we that we like them",
    "start": "1672279",
    "end": "1677799"
  },
  {
    "text": "for they are easily composable they're easy to reason about they're easy to unit test actually and lots of other",
    "start": "1677799",
    "end": "1683080"
  },
  {
    "text": "things so um so first of all we need to talk about okay what does it mean that a function is a pure function and it means",
    "start": "1683080",
    "end": "1688720"
  },
  {
    "text": "it has to have two qualities or two properties the first of them uh the first of these properties is that it",
    "start": "1688720",
    "end": "1694559"
  },
  {
    "text": "must return the same value for the same input in other words it must be deterministic and all you know if you've",
    "start": "1694559",
    "end": "1700480"
  },
  {
    "text": "ever looked at you well all of you know basic math so you know that you know 2 plus 2 is always four it's deterministic",
    "start": "1700480",
    "end": "1707919"
  },
  {
    "text": "and 2 plus 3 is always five and so on you know Ma mathematics tend to be deterministic but it doesn't have to be",
    "start": "1707919",
    "end": "1714360"
  },
  {
    "text": "constrained to mathematics you know if you want to reverse a string you know if you take the string Fu and reverse it",
    "start": "1714360",
    "end": "1719600"
  },
  {
    "text": "you always get oof back it would be strange if sometimes you know something else happened that's a deterministic",
    "start": "1719600",
    "end": "1724880"
  },
  {
    "text": "operation as well but just to be absolutely clear when we're talking about functions being deterministic we",
    "start": "1724880",
    "end": "1731159"
  },
  {
    "text": "we're talking about that they always return the same input or the same output for the same input so if you imagine for",
    "start": "1731159",
    "end": "1738159"
  },
  {
    "text": "example that you have a function where you give it a file name and then you ask it to read the contents of a text file",
    "start": "1738159",
    "end": "1744840"
  },
  {
    "text": "and you know turn it into upper case for example that function wouldn't be pure",
    "start": "1744840",
    "end": "1750360"
  },
  {
    "text": "because even You' say well that's it's deterministic because I know what's in the file but you could change the",
    "start": "1750360",
    "end": "1756559"
  },
  {
    "text": "contents of the file name between two function calls and then the output would be different so we consider files to be",
    "start": "1756559",
    "end": "1763080"
  },
  {
    "text": "external to the function so such an operation is not considered to be pure also if you read from a database that is",
    "start": "1763080",
    "end": "1769880"
  },
  {
    "text": "not considered to be pure because it's non-deterministic for the same reason the other quality that a pure",
    "start": "1769880",
    "end": "1775919"
  },
  {
    "text": "function must have is that it must have no side effects side effects are all sorts of things that happen you know as",
    "start": "1775919",
    "end": "1782080"
  },
  {
    "text": "a well as a side effect so um you know if you if you you know call the function",
    "start": "1782080",
    "end": "1788000"
  },
  {
    "text": "and it sends an email sending an email is a side effect if you call a function and it writes into a database that's a",
    "start": "1788000",
    "end": "1793960"
  },
  {
    "text": "side effect if if it deletes a file that's a side effect if it puts a pixel on your screen that is a side",
    "start": "1793960",
    "end": "1801880"
  },
  {
    "text": "effect so basically what we covered now is that all the things you'd ever want",
    "start": "1801880",
    "end": "1808679"
  },
  {
    "text": "to do in order to have a valuable piece of software is impure you want to read and",
    "start": "1808679",
    "end": "1815039"
  },
  {
    "text": "write for databases that's impure you want to put things on the screen that's impure you want to send emails that's impure you know basically all the",
    "start": "1815039",
    "end": "1821799"
  },
  {
    "text": "reasons why you would ever develop sof software you can't do that with pure functions pure function functions in",
    "start": "1821799",
    "end": "1827840"
  },
  {
    "text": "themselves are utterly useless and it's one of the reasons why um you know sometimes functional programmers have",
    "start": "1827840",
    "end": "1833840"
  },
  {
    "text": "this tendency to be regarded as you know Ivory Tower astronauts that really have no connection to the real world but you",
    "start": "1833840",
    "end": "1840559"
  },
  {
    "text": "know functional programmers are not stupid um we absolutely understand oh did you notice how I said we and with",
    "start": "1840559",
    "end": "1847240"
  },
  {
    "text": "the functional programs sort of including myself and people who are not stupid well anyway um we absolutely",
    "start": "1847240",
    "end": "1853399"
  },
  {
    "text": "understand that we need impure stuff to happen as well because we want to be able to put pi pixels on a screen and send emails and all that stuff so we do",
    "start": "1853399",
    "end": "1860279"
  },
  {
    "text": "realize that we have need to have impure functions so basically the um the design",
    "start": "1860279",
    "end": "1866159"
  },
  {
    "text": "um ether of functional programming if you will is that we say we want to maximize the amount of pure code that we",
    "start": "1866159",
    "end": "1871679"
  },
  {
    "text": "have in our code bases and we want to minimize the amount of impure code that we have in our code bases and if we do",
    "start": "1871679",
    "end": "1877279"
  },
  {
    "text": "that we are probably doing something that is functional so so that's basically the",
    "start": "1877279",
    "end": "1883120"
  },
  {
    "text": "the design ideal now there's a couple of rules that relates to how those two groups of",
    "start": "1883120",
    "end": "1889840"
  },
  {
    "text": "functions relate to each other you know if you have a p pure function and you want to call another pure function from",
    "start": "1889840",
    "end": "1895000"
  },
  {
    "text": "that pure function that's possible because you know one function being non",
    "start": "1895000",
    "end": "1900960"
  },
  {
    "text": "one function being deterministic and having no side effects it's okay to call that if you if you want to be",
    "start": "1900960",
    "end": "1906639"
  },
  {
    "text": "deterministic and have no side effects for yourself also if you are impure if you're an impure function you can call",
    "start": "1906639",
    "end": "1912279"
  },
  {
    "text": "another impure function because there are no rules for impure functions and that means you can do all everything you",
    "start": "1912279",
    "end": "1917399"
  },
  {
    "text": "want including also calling pure functions so you can call Pure functions from impure functions that's not a",
    "start": "1917399",
    "end": "1923240"
  },
  {
    "text": "problem at all but you cannot go the other way you know you can't call an impure function from a pure function",
    "start": "1923240",
    "end": "1930519"
  },
  {
    "text": "because if you did you just hypothetically if you could that would make your pure function impure because",
    "start": "1930519",
    "end": "1937000"
  },
  {
    "text": "either you would have you know had you know invoked a side effect or you would you know have introduced non-determinism",
    "start": "1937000",
    "end": "1942799"
  },
  {
    "text": "into your pure function so that would not that's not possible so that's sort",
    "start": "1942799",
    "end": "1947960"
  },
  {
    "text": "of the rule so basically if you really want to you know just have a high level idea whether the the the whether the the",
    "start": "1947960",
    "end": "1956600"
  },
  {
    "text": "software that you're writing whether it's functional or not you have to ask yourself the question does my code",
    "start": "1956600",
    "end": "1962639"
  },
  {
    "text": "adhere to that rule that you can't call impure functions from Pure functions so so people sometimes ask me",
    "start": "1962639",
    "end": "1969960"
  },
  {
    "text": "you know how do I know that I write functional FSH f is this multi paradigmatic language uh that where you",
    "start": "1969960",
    "end": "1976519"
  },
  {
    "text": "can write function code but you can also write objectoriented code and you can do all sorts of impure stuff and and",
    "start": "1976519",
    "end": "1982840"
  },
  {
    "text": "basically unfortunately in this case the answer is you don't really know whether you're writing functional F or not",
    "start": "1982840",
    "end": "1989159"
  },
  {
    "text": "because you know f is such a friendly language that it it it'll allow you to lots to do lots of things it it tries",
    "start": "1989159",
    "end": "1995799"
  },
  {
    "text": "not to get in your way it tries not to be restrictive but it also means that it doesn't really tell you whether what",
    "start": "1995799",
    "end": "2001080"
  },
  {
    "text": "you're doing is actually you know functional or if it isn't functional so sometimes in order to figure out you",
    "start": "2001080",
    "end": "2006360"
  },
  {
    "text": "know how to answer this question I need to do a little bit of a sanity check and I need to have some sort of tool that",
    "start": "2006360",
    "end": "2012120"
  },
  {
    "text": "can tell me whether or not my my design is actually functional or not and if sharp unfortunately cannot really answer",
    "start": "2012120",
    "end": "2017600"
  },
  {
    "text": "that question um but Haskell can Haskell actually enforces that rule and",
    "start": "2017600",
    "end": "2024519"
  },
  {
    "text": "fortunately ifsh and hcll are languages that are similar enough so that if you avoid the objectoriented parts of F and",
    "start": "2024519",
    "end": "2031519"
  },
  {
    "text": "actually try to write something in F that is functional it's fairly easy to Port your F code to so we can try to do",
    "start": "2031519",
    "end": "2038080"
  },
  {
    "text": "that here so here's the tri accept function ported to hll and I'm not going",
    "start": "2038080",
    "end": "2043679"
  },
  {
    "text": "to walk you through the the implementation body of the function itself but you if you just look at the top two lines that's the type of the",
    "start": "2043679",
    "end": "2050878"
  },
  {
    "text": "function and you'll see it looks a lot like what we already saw before it's just that daytime offset is now called",
    "start": "2050879",
    "end": "2057000"
  },
  {
    "text": "Zone time and a reservation list is not called reservation space list it's just called it's just called reservation with",
    "start": "2057000",
    "end": "2063320"
  },
  {
    "text": "square brackets around it and that means it's a list and it's not called an option it's called maybe in but apart",
    "start": "2063320",
    "end": "2069358"
  },
  {
    "text": "from that it's it's basically the same thing it's Mays are exactly the same thing as options this compiles um and uh",
    "start": "2069359",
    "end": "2077560"
  },
  {
    "text": "and does whatever we think it should do so so far so good that's actually not so much a problem but one of the things we",
    "start": "2077560",
    "end": "2083040"
  },
  {
    "text": "need to realize about this function is that this function is pure how do we know that well we know",
    "start": "2083040",
    "end": "2090000"
  },
  {
    "text": "that because all functions in hll are pure by default unless explicitly declared to be",
    "start": "2090000",
    "end": "2096398"
  },
  {
    "text": "impure U and this one is not explicitly declared to be impure I'll show you what that looks like in a moment so this",
    "start": "2096399",
    "end": "2102079"
  },
  {
    "text": "function is pure not only is it pure but the two in you know function arguments there are also pure for the same reason",
    "start": "2102079",
    "end": "2110520"
  },
  {
    "text": "that they are not explicitly declared to be impure um so those two functions are pure and this is the only thing they",
    "start": "2110520",
    "end": "2117119"
  },
  {
    "text": "could be because if they were impure remember we couldn't call them from a pure function because you know you can't",
    "start": "2117119",
    "end": "2123359"
  },
  {
    "text": "call an impure function from a pure function so so they have to be pure because otherwise this wouldn't compile",
    "start": "2123359",
    "end": "2129640"
  },
  {
    "text": "so fortunately they are pure all right fair enough so how do we compose this with something that actually talks to a",
    "start": "2129640",
    "end": "2135880"
  },
  {
    "text": "database now I as I always that as I already covered talking to a database is impure",
    "start": "2135880",
    "end": "2144839"
  },
  {
    "text": "it's it's either non-deterministic or has side effects and may even do both things at at the same time so if we want",
    "start": "2144839",
    "end": "2151560"
  },
  {
    "text": "to compose these things together we realize that that's going to be one of those impure functions that we know that",
    "start": "2151560",
    "end": "2157599"
  },
  {
    "text": "we need to have so that's fair enough so let's declare our composition of these things to be impure so that looks like",
    "start": "2157599",
    "end": "2165160"
  },
  {
    "text": "this Tri accept composition is a function that takes a reservation this input and it returns IO of maybe of int",
    "start": "2165160",
    "end": "2172880"
  },
  {
    "text": "as output and that type IO there that's the way that you explicitly declare that",
    "start": "2172880",
    "end": "2178440"
  },
  {
    "text": "a function is impure in half and there's a lot of theory that goes around that and I'm not going to bore you with that",
    "start": "2178440",
    "end": "2184680"
  },
  {
    "text": "with those details just accept that this means it's pure all right so if we want",
    "start": "2184680",
    "end": "2190160"
  },
  {
    "text": "to do the same thing as we did in in F I'll first Define read to be the",
    "start": "2190160",
    "end": "2195240"
  },
  {
    "text": "partially applied db. read reservations with a connection string the type of that is Zone time to IO of list of",
    "start": "2195240",
    "end": "2202520"
  },
  {
    "text": "reservations IO because it's impure likewise create is also the",
    "start": "2202520",
    "end": "2209040"
  },
  {
    "text": "partially applied DB create reservation function and the value of that or the type of that is reservation to IO of in",
    "start": "2209040",
    "end": "2216359"
  },
  {
    "text": "again IO because it's impure it it Returns the ID of the newly created Row",
    "start": "2216359",
    "end": "2221520"
  },
  {
    "text": "in the database but it's impure because it it was a side effect so we can try to call try accept",
    "start": "2221520",
    "end": "2228720"
  },
  {
    "text": "with all the the arguments just like we had before and we can do something like this try accept 10 read create",
    "start": "2228720",
    "end": "2235359"
  },
  {
    "text": "reservations but if you if you recall and you probably don't so I'll I'll help you here read ought to have the type",
    "start": "2235359",
    "end": "2242119"
  },
  {
    "text": "Zone time to reservation list create had to have the type",
    "start": "2242119",
    "end": "2247560"
  },
  {
    "text": "had to have the type reservation to int these types are not the same you",
    "start": "2247560",
    "end": "2253200"
  },
  {
    "text": "know a reservation list is not the same as an IO reservation list these are different types and you can't really",
    "start": "2253200",
    "end": "2259560"
  },
  {
    "text": "reconcile those two things this doesn't compile it doesn't compile exactly for the reason that I told you that you",
    "start": "2259560",
    "end": "2265440"
  },
  {
    "text": "can't pass an impure function to a pure function because that would make it impure as well and hasle enforces that",
    "start": "2265440",
    "end": "2273599"
  },
  {
    "text": "rule so it's not functional you know yes partial application is exactly the same",
    "start": "2273680",
    "end": "2279040"
  },
  {
    "text": "thing as dependency injection when used with dependencies but it's not functional again I have to stress that",
    "start": "2279040",
    "end": "2284560"
  },
  {
    "text": "I'm not saying partial application in general is not functional but used for dependency injection it works in in FP",
    "start": "2284560",
    "end": "2291160"
  },
  {
    "text": "and all but it's not functional you can't make this to you you can't make this compile in",
    "start": "2291160",
    "end": "2296560"
  },
  {
    "text": "hasal so let's try to understand why that is at at a more intuitive level if you're looking at dependency injection",
    "start": "2296560",
    "end": "2302960"
  },
  {
    "text": "what you often end up with is is a graph of objects and the graph is always always a directed acyclic graph so in",
    "start": "2302960",
    "end": "2309400"
  },
  {
    "text": "this case what I'm trying to to picture here is that you have a root object that has two dependencies so the root object",
    "start": "2309400",
    "end": "2315240"
  },
  {
    "text": "is the object on the left hand side and then it has two dependencies and then the top one of those has two",
    "start": "2315240",
    "end": "2320520"
  },
  {
    "text": "dependencies and the other the bottom one only has one dependency and so forth and so forth uh until you have a graph",
    "start": "2320520",
    "end": "2325880"
  },
  {
    "text": "with Leaf nodes now the leaf nodes are typically where you have all your impure stuff happening this is where these are",
    "start": "2325880",
    "end": "2332640"
  },
  {
    "text": "the dependencies that actually talk to databases and send out emails and all sorts of things and they are almost by definition impure",
    "start": "2332640",
    "end": "2340359"
  },
  {
    "text": "so if you have something that is impure and you have it have another object that contains and calls into the impure code",
    "start": "2340359",
    "end": "2348319"
  },
  {
    "text": "that means that that caller must also be impure as well so impurity is totally infectious you know dependency injection",
    "start": "2348319",
    "end": "2355760"
  },
  {
    "text": "makes everything impure and that's why it's not functional",
    "start": "2355760",
    "end": "2361520"
  },
  {
    "text": "okay so if we want to be functional we have to reject the notion of dependency",
    "start": "2361520",
    "end": "2366960"
  },
  {
    "text": "and sort of find a different way to deal with the fact that we have impure stuff happening and we sort of want to",
    "start": "2366960",
    "end": "2373000"
  },
  {
    "text": "decouple the impure and the pure stuff that's happening in a sane way um but we",
    "start": "2373000",
    "end": "2378200"
  },
  {
    "text": "can't really do it in um with the way that we're used to do in objectoriented programming so what do what do we do",
    "start": "2378200",
    "end": "2384720"
  },
  {
    "text": "instead so I'll walk you through that as well right okay so um so in order to",
    "start": "2384720",
    "end": "2391599"
  },
  {
    "text": "understand what to do let's go back to basic stuff so back when you learned how to program the first thing you probably",
    "start": "2391599",
    "end": "2397760"
  },
  {
    "text": "Learned was to do some sort of hello world or something like that and fairly early on into your programming 101 or",
    "start": "2397760",
    "end": "2404160"
  },
  {
    "text": "whatever whichever way you learn to program you probably learned that um it's a good idea to factor common code",
    "start": "2404160",
    "end": "2410200"
  },
  {
    "text": "out into some sort of operation you know a procedure a subprocedure a method a function whatever you want to call it",
    "start": "2410200",
    "end": "2416200"
  },
  {
    "text": "we'll just call it a unit a unit of operation and and such units you know",
    "start": "2416200",
    "end": "2421359"
  },
  {
    "text": "operations procedures functions methods they take they take input in the form of",
    "start": "2421359",
    "end": "2426839"
  },
  {
    "text": "an argument list and they return output in the form of your return values so",
    "start": "2426839",
    "end": "2431880"
  },
  {
    "text": "that's input and output everyone knows that procedures or units have input and output but if you start to look at you",
    "start": "2431880",
    "end": "2439319"
  },
  {
    "text": "know dependency injection and object oriented design you have dependencies and you want to have data",
    "start": "2439319",
    "end": "2446319"
  },
  {
    "text": "in and out of those dependencies as well so if you think about the matrid object that I showed you you know up until now",
    "start": "2446319",
    "end": "2452839"
  },
  {
    "text": "you know the Mator D queries its repository of qu queries it's it's you",
    "start": "2452839",
    "end": "2458160"
  },
  {
    "text": "know function argument to get data from a database and in order to make some decisions based on that data that's also",
    "start": "2458160",
    "end": "2466280"
  },
  {
    "text": "input but we call it indirect input because it's not part of your argument list but it's still input into the unit",
    "start": "2466280",
    "end": "2472800"
  },
  {
    "text": "and also if you want to put data out into your dependencies if you want to save the reservation for example that's",
    "start": "2472800",
    "end": "2479079"
  },
  {
    "text": "indirect output so now you have direct input and output and you have indirect input and",
    "start": "2479079",
    "end": "2484319"
  },
  {
    "text": "output and basically the problem is that we've now learned the dependencies are tend to be impure so we want to get rid",
    "start": "2484319",
    "end": "2490839"
  },
  {
    "text": "of those so we need to figure out a way to get rid of indirect input and output",
    "start": "2490839",
    "end": "2496280"
  },
  {
    "text": "so let's start with indirect output now why do we do indirect output in C or",
    "start": "2496280",
    "end": "2501680"
  },
  {
    "text": "Java of things like that well why don't we just return the indirect output as",
    "start": "2501680",
    "end": "2507359"
  },
  {
    "text": "normal output couldn't we do that and the reason why people tend not to do",
    "start": "2507359",
    "end": "2512800"
  },
  {
    "text": "that is because often that indirect output must not not always be you know",
    "start": "2512800",
    "end": "2518400"
  },
  {
    "text": "put out if you will must not always be returned uh it's it's conditional on of",
    "start": "2518400",
    "end": "2523480"
  },
  {
    "text": "on some sort of condition for example in the tri accept example that we' seen here the indirect output is that we save",
    "start": "2523480",
    "end": "2529200"
  },
  {
    "text": "the reservation into the database but we only want to save the reservation into the database if we decided that we had",
    "start": "2529200",
    "end": "2536040"
  },
  {
    "text": "enough capacity in order to accept the reservation and otherwise we don't want to do that and it's difficult in G and Java to",
    "start": "2536040",
    "end": "2544280"
  },
  {
    "text": "decouple the decision from the effect because these languages are statement based uh so you have if then statements",
    "start": "2544280",
    "end": "2551079"
  },
  {
    "text": "and then you have more statements that sort of you know achieve some sort of effect like saving into a database so",
    "start": "2551079",
    "end": "2557640"
  },
  {
    "text": "I'm not saying it's impossible uh but it it requires a fairly um sophisticated objectoriented developer to you know",
    "start": "2557640",
    "end": "2564640"
  },
  {
    "text": "decouple decisions from effects in C or in Java it's it can be done but it's",
    "start": "2564640",
    "end": "2569800"
  },
  {
    "text": "sort of not the easiest thing in the world so Mo most people just resort to this thing where they say well if I can",
    "start": "2569800",
    "end": "2575720"
  },
  {
    "text": "accept it then I'm just calling my repository and otherwise I'm not calling my repository and then that becomes indirect output but it turns out that in",
    "start": "2575720",
    "end": "2582800"
  },
  {
    "text": "in functional programming languages you know decoupling decisions from effects is one of the easiest thing you can do",
    "start": "2582800",
    "end": "2587920"
  },
  {
    "text": "so we can take that indirect output and refactor it to be direct output instead and in F it's going to look like",
    "start": "2587920",
    "end": "2594240"
  },
  {
    "text": "this so this is where we left off before I have my try accept function there and it takes four arguments now the argument",
    "start": "2594240",
    "end": "2601800"
  },
  {
    "text": "that produces direct output or indirect output sorry is this argument called create reservation here which is a",
    "start": "2601800",
    "end": "2608040"
  },
  {
    "text": "function it's a function that takes reservation as input and that's actually the direct output and then it it returns",
    "start": "2608040",
    "end": "2614280"
  },
  {
    "text": "int and then we take that int and return that instead what I want to do now is that I don't want to call this function",
    "start": "2614280",
    "end": "2621359"
  },
  {
    "text": "anymore so I don't even want to pass in this function as an argument anymore which also means I can't return an INT",
    "start": "2621359",
    "end": "2627000"
  },
  {
    "text": "anymore because I don't know what the ID is going to be I just want to return my decision and then someone uh some some",
    "start": "2627000",
    "end": "2634920"
  },
  {
    "text": "other function that comp poses these things together can make the decision on you know for example you know writing",
    "start": "2634920",
    "end": "2640440"
  },
  {
    "text": "into the database so instead of returning an in option I just want to make the decision as returning and",
    "start": "2640440",
    "end": "2647079"
  },
  {
    "text": "reservation option like that by removing that you know function argument all by itself and just do this instead so I",
    "start": "2647079",
    "end": "2655480"
  },
  {
    "text": "I've removed an argument so this is now a function that only takes three arguments and uh that also means I can",
    "start": "2655480",
    "end": "2660760"
  },
  {
    "text": "move things around because it's actually it can fit on one line now so",
    "start": "2660760",
    "end": "2666640"
  },
  {
    "text": "the implementation of this needs to change a little bit as well I start by basically do doing the same thing",
    "start": "2666640",
    "end": "2671760"
  },
  {
    "text": "getting the number of resered seats from my reservations read reservations argument uh function there and then all",
    "start": "2671760",
    "end": "2677880"
  },
  {
    "text": "sorts of other things but when I decide to accept the reservation instead of calling a function which is no longer",
    "start": "2677880",
    "end": "2684079"
  },
  {
    "text": "there I just take reservation set is accepted to true and then pipe that into sum and that becomes a you know sum",
    "start": "2684079",
    "end": "2691839"
  },
  {
    "text": "reservation and if I decide not to accept the reservation I just return none so I've pretty you know clearly",
    "start": "2691839",
    "end": "2698359"
  },
  {
    "text": "encoded my decision in the return value and then you know someone else a caller",
    "start": "2698359",
    "end": "2703960"
  },
  {
    "text": "can decide what to do with that decision so if we look at the try accept composition that we saw before I'll need",
    "start": "2703960",
    "end": "2710839"
  },
  {
    "text": "to refactor this one as well so you'll notice that the type is still the same so this is a true refactoring I'm not",
    "start": "2710839",
    "end": "2716760"
  },
  {
    "text": "changing the behavior I'm also not changing the API the these things stay the same but I'm changing the",
    "start": "2716760",
    "end": "2723800"
  },
  {
    "text": "implementation so what I need to do is I need I need to call try accept with the",
    "start": "2723800",
    "end": "2729160"
  },
  {
    "text": "three arguments that it now takes and get the value back from that so I call it with the argument the hardcoded",
    "start": "2729160",
    "end": "2734440"
  },
  {
    "text": "argument 10 with the partially applied function DB read reservations with the connection string and with the",
    "start": "2734440",
    "end": "2740000"
  },
  {
    "text": "reservation th that's all the three arguments that it takes now and it returns a reservation option and you'll",
    "start": "2740000",
    "end": "2745960"
  },
  {
    "text": "notice that I've surrounded that you know function called with match width and that means I can now do pattern",
    "start": "2745960",
    "end": "2752079"
  },
  {
    "text": "matching on the return value of calling that function and if it's none I'm just going to return none if it's sum I can",
    "start": "2752079",
    "end": "2760160"
  },
  {
    "text": "pull the reservation that was accepted out of the sum case and then I can pass it as an argument to DB create",
    "start": "2760160",
    "end": "2767400"
  },
  {
    "text": "reservation and that is a function that creates the the reservation as a record in the database Returns the ID you know",
    "start": "2767400",
    "end": "2775119"
  },
  {
    "text": "the row ID of the new row that was created and then I can take that ID that integer and pass into a sum case so that",
    "start": "2775119",
    "end": "2781839"
  },
  {
    "text": "is why this function still returns an in option this behaves just like the previous example that you saw but now",
    "start": "2781839",
    "end": "2788760"
  },
  {
    "text": "I've refactored it to not have direct output anymore or indirect output it's only direct output so I've decoupled the",
    "start": "2788760",
    "end": "2795200"
  },
  {
    "text": "decision from the effect which is a an easy thing to do in F sh and it's also easy to do in hascol for the same",
    "start": "2795200",
    "end": "2801280"
  },
  {
    "text": "reason and this sort of branching here is such a common thing to do on an option that it's built into the language",
    "start": "2801280",
    "end": "2807720"
  },
  {
    "text": "or built into theab Library it's just called option map um so this does",
    "start": "2807720",
    "end": "2813000"
  },
  {
    "text": "exactly the option map is just saying well we always map none to none and then we take a function that in the some case",
    "start": "2813000",
    "end": "2819599"
  },
  {
    "text": "we can invoke that function so this this is exactly the same as before and you'll notice now",
    "start": "2819599",
    "end": "2825440"
  },
  {
    "text": "that I have R sitting there on both sides of that arrow and that arrow in inside this Lambda expression um has the",
    "start": "2825440",
    "end": "2831559"
  },
  {
    "text": "same role as a as an equal sign in a lbound function so I can do the same sort of ether reduction as I did before",
    "start": "2831559",
    "end": "2837520"
  },
  {
    "text": "it's not really important but it just makes the code a little bit nicer so it looks like this and I can also take and move the reservation around that's also",
    "start": "2837520",
    "end": "2843920"
  },
  {
    "text": "not really important but yeah I just thought it would looked cool to move things around right okay so um so that",
    "start": "2843920",
    "end": "2850559"
  },
  {
    "text": "was a refactoring that took um that got rid of the indirect output now can we",
    "start": "2850559",
    "end": "2855640"
  },
  {
    "text": "also get rid of the indirect input that's even easier in most cases because",
    "start": "2855640",
    "end": "2861079"
  },
  {
    "text": "why do we actually need to call a function or call a method from within the unit why don't we just say I need",
    "start": "2861079",
    "end": "2868040"
  },
  {
    "text": "that information instead of calling a function that returns a reservation list why don't we just say I need a",
    "start": "2868040",
    "end": "2874240"
  },
  {
    "text": "reservation list in order to make the decision someone else you know gather fetch that reservation list from wherever you want",
    "start": "2874240",
    "end": "2880599"
  },
  {
    "text": "to and give it to me um so if I do that I can just say well indirect outp input",
    "start": "2880599",
    "end": "2886319"
  },
  {
    "text": "should be direct input and you'll notice what happened now there are no more arrows between the",
    "start": "2886319",
    "end": "2892280"
  },
  {
    "text": "unit and the dependencies so now we have rejected dependencies as a notion and this puts us in a position where this",
    "start": "2892280",
    "end": "2899240"
  },
  {
    "text": "unit can actually be pure it's not quite there yet but we're really really close",
    "start": "2899240",
    "end": "2904559"
  },
  {
    "text": "I just need to make this factoring then it becomes becomes pure all right so at the moment where we left it off it's it",
    "start": "2904559",
    "end": "2911119"
  },
  {
    "text": "wasn't pure but I'm I'm going to make it pure by removing uh the indirect uh input and moving the indirect input to",
    "start": "2911119",
    "end": "2918760"
  },
  {
    "text": "direct input so the indirect input is in this um remaining function argument",
    "start": "2918760",
    "end": "2925319"
  },
  {
    "text": "there um and I should say as just as a side uh comment here I'm not saying that",
    "start": "2925319",
    "end": "2931680"
  },
  {
    "text": "passing function arguments to other functions is not a functional thing to do it's one of the most functional",
    "start": "2931680",
    "end": "2937440"
  },
  {
    "text": "things you can do uh you know in general in functional programming but what I'm saying is when the implied you know",
    "start": "2937440",
    "end": "2945359"
  },
  {
    "text": "behavior of a function is that it's almost always going to be impure then it doesn't work because that would make the",
    "start": "2945359",
    "end": "2950880"
  },
  {
    "text": "the other function also impure uh so in general I have no problem with with function arguments uh but in this case",
    "start": "2950880",
    "end": "2957040"
  },
  {
    "text": "the problem with this one is that it's implied to be impure uh so that's why we don't want to have it so what I'm really",
    "start": "2957040",
    "end": "2962839"
  },
  {
    "text": "interested in in that that you know read reservations function is not so much the input uh but the output that it creates",
    "start": "2962839",
    "end": "2969599"
  },
  {
    "text": "that reservation list so I can get the reservation list if I just you know change it from being a function to",
    "start": "2969599",
    "end": "2976920"
  },
  {
    "text": "just being a value that's just a reservation list and if it's a value I don't need the brackets around it also",
    "start": "2976920",
    "end": "2982319"
  },
  {
    "text": "if it's a value uh it doesn't really make sense to call the argument read reservation so I'll just rename it to",
    "start": "2982319",
    "end": "2987559"
  },
  {
    "text": "reservations like this all right so this version of Tri accept now looks like",
    "start": "2987559",
    "end": "2994760"
  },
  {
    "text": "this I just just take the reservations I do a sum over the quantities and I do all the stuff that I did before and this",
    "start": "2994760",
    "end": "3000799"
  },
  {
    "text": "is also now simpler so that can actually move things into one line so it just becomes simpler and simpler the more I",
    "start": "3000799",
    "end": "3006520"
  },
  {
    "text": "move it towards something that is a pure which is one of the reasons why we like pure functions because they're simple",
    "start": "3006520",
    "end": "3012280"
  },
  {
    "text": "this they they it's really difficult actually to write a complicated pure function yeah well that's a catchphrase",
    "start": "3012280",
    "end": "3017720"
  },
  {
    "text": "that's and it's a lie but never mind just believe me um right okay so we'll",
    "start": "3017720",
    "end": "3022920"
  },
  {
    "text": "go back to try accept composition and see if we can ref to that one more time in order to still you know keep the API",
    "start": "3022920",
    "end": "3029599"
  },
  {
    "text": "keep the behavior but do it in a different way so what I want what I want to do now is I I'll start with the",
    "start": "3029599",
    "end": "3034880"
  },
  {
    "text": "reservation date and I'll pipe that into db. read reservations so if you remember",
    "start": "3034880",
    "end": "3040359"
  },
  {
    "text": "DB read reservations partially applied with a connection string is a function that takes a date as input and I'm",
    "start": "3040359",
    "end": "3047119"
  },
  {
    "text": "piping the date as input so that's actually the same as just calling it with the as you know a second argument",
    "start": "3047119",
    "end": "3053359"
  },
  {
    "text": "now this returns a reservation list which is exactly what I need so I'll pipe that reservation list which is the",
    "start": "3053359",
    "end": "3059599"
  },
  {
    "text": "output of this expression so far into a new function and this case the function is a Lambda expression for now anyway so",
    "start": "3059599",
    "end": "3066960"
  },
  {
    "text": "you'll see the Lambda expression here is a function that takes reservations a reservation list as input which is the",
    "start": "3066960",
    "end": "3072760"
  },
  {
    "text": "output of the previous step and then I just called try accept 10 reservations",
    "start": "3072760",
    "end": "3078520"
  },
  {
    "text": "reservation that's just a a complete um call to try accept the function that I",
    "start": "3078520",
    "end": "3084040"
  },
  {
    "text": "just refactored and you know that it returns a reservation option so I can just do option map just like I showed",
    "start": "3084040",
    "end": "3089359"
  },
  {
    "text": "you before that that hasn't really changed now the first time you see Lambda expressions in shab or in which",
    "start": "3089359",
    "end": "3096599"
  },
  {
    "text": "other language you you originally saw them you think Lambda expressions are really cool and then you know when",
    "start": "3096599",
    "end": "3102160"
  },
  {
    "text": "you've seen like a thousand of them you begin to think that they actually look a little bit awkward so you're looking for ways to refactor them so that they look",
    "start": "3102160",
    "end": "3108720"
  },
  {
    "text": "nicer for some definition of nice um and in this case you may be wondering",
    "start": "3108720",
    "end": "3114079"
  },
  {
    "text": "whether we could make it look nicer so you'll notice that it says reservations on both sides of that Arrow but",
    "start": "3114079",
    "end": "3120119"
  },
  {
    "text": "unfortunately we can't do an eer reduction in this this case at this time because reservations need to be in the",
    "start": "3120119",
    "end": "3126960"
  },
  {
    "text": "last position on both sides of the arrow in order for us to be able to do an eer reduction and reservations at the moment",
    "start": "3126960",
    "end": "3133599"
  },
  {
    "text": "is the second to last argument and not not the last argument so I can't really do that sometimes when when I encounter",
    "start": "3133599",
    "end": "3139440"
  },
  {
    "text": "a problem like that I just go back to the imple the code that implements the function and just change the order of the arguments there because often it",
    "start": "3139440",
    "end": "3145640"
  },
  {
    "text": "doesn't really matter in this case I think it actually you know it makes more sense to to think about Tri accept as",
    "start": "3145640",
    "end": "3152040"
  },
  {
    "text": "having this particular order of arguments so I don't I'm not really um I'm not really interested in going back",
    "start": "3152040",
    "end": "3157160"
  },
  {
    "text": "and changing the U the function itself but there's a little trick I can use now in Haso for example in the core library",
    "start": "3157160",
    "end": "3164119"
  },
  {
    "text": "of Hask there's a function called flip and it's not an F SHP core because Don Sim doesn't like it but I do um and it's",
    "start": "3164119",
    "end": "3170799"
  },
  {
    "text": "super super easy to implement yourself it's just one line of code here it is flip and I'm not going to try to talk",
    "start": "3170799",
    "end": "3176839"
  },
  {
    "text": "you through this because that's typically where people's brains explode um but flip is a function that takes",
    "start": "3176839",
    "end": "3183839"
  },
  {
    "text": "another function as input and the function that it takes as input is a function that takes two arguments and it",
    "start": "3183839",
    "end": "3190000"
  },
  {
    "text": "returns a new function that does exactly the same things but with the arguments flipped around and this is what I need to do I",
    "start": "3190000",
    "end": "3196680"
  },
  {
    "text": "want to flip the arguments of this but the only problem that I have is try accept is a function that takes three",
    "start": "3196680",
    "end": "3202799"
  },
  {
    "text": "arguments and flip only works for two argument functions that's not a problem either",
    "start": "3202799",
    "end": "3208440"
  },
  {
    "text": "because I can partially apply tricept with the number 10 and if I do that I'll have a function that that takes two",
    "start": "3208440",
    "end": "3214440"
  },
  {
    "text": "arguments and then I can flip them okay so that that looks like this yay um so",
    "start": "3214440",
    "end": "3219960"
  },
  {
    "text": "now I have reservations on both sides uh you know in the last position in both sides and then I can do an eer reduction",
    "start": "3219960",
    "end": "3225200"
  },
  {
    "text": "and that looks much nicer yeah this has nothing to do with dependency injection or anything but it I just thought it was cool and I have the time so",
    "start": "3225200",
    "end": "3232400"
  },
  {
    "text": "whatever um all right okay so um so does this compile in hasal okay here's the",
    "start": "3232400",
    "end": "3238160"
  },
  {
    "text": "our sanity check and you can sort of probably sense where this is going right it's not going to be particularly surprising but let's just look at it",
    "start": "3238160",
    "end": "3244200"
  },
  {
    "text": "anyway so here's the port of try accept and again you know I'm just not going to",
    "start": "3244200",
    "end": "3249520"
  },
  {
    "text": "you know cover all the nasty Hy implementation details but we see that the um the function is still pure",
    "start": "3249520",
    "end": "3256319"
  },
  {
    "text": "because it doesn't say IO anywhere in the function type so that's that's good",
    "start": "3256319",
    "end": "3261480"
  },
  {
    "text": "now what about try accept composition that composition where we try to compose it well it looks like this and you'll",
    "start": "3261480",
    "end": "3267480"
  },
  {
    "text": "notice that it has all sorts of weird looking arrows and dollar signs and weird looking stuff uh but you can",
    "start": "3267480",
    "end": "3273760"
  },
  {
    "text": "probably see some things that are a little bit familiar like for example that flip Tri except 10 there in the middle actually looks like it didn't in",
    "start": "3273760",
    "end": "3280200"
  },
  {
    "text": "in f as well but the important message here is",
    "start": "3280200",
    "end": "3285319"
  },
  {
    "text": "that yay this actually compiles it works this is the functional",
    "start": "3285319",
    "end": "3290440"
  },
  {
    "text": "way to do it and if we want to if we if we try to extract some sort of pattern out of what",
    "start": "3290440",
    "end": "3297079"
  },
  {
    "text": "happened I've seen this happening over and over again when I play around with hll is that what happens is that at the",
    "start": "3297079",
    "end": "3304000"
  },
  {
    "text": "boundary of the system I tend to have some sort of call of pure functions but",
    "start": "3304000",
    "end": "3309359"
  },
  {
    "text": "then around the pure function you know before and after I have some impure stuff going on so in this case you know",
    "start": "3309359",
    "end": "3315799"
  },
  {
    "text": "I have some I prepare some input data that I pull from various impure sources",
    "start": "3315799",
    "end": "3321480"
  },
  {
    "text": "and then I pass that data to my pure functions and my pure function then return some some pure data and then I do",
    "start": "3321480",
    "end": "3327920"
  },
  {
    "text": "some impure stuff with that data as well so it sort of almost becomes like a sandwich I don't know if you know the",
    "start": "3327920",
    "end": "3334240"
  },
  {
    "text": "story about you know how sandwiches was invented but there was this noble man here in England called The Earl of",
    "start": "3334240",
    "end": "3340319"
  },
  {
    "text": "Sandwich or was it the Duke of s this is the Earl of Sandwich right yeah and he was a notorious Gambler there's probably",
    "start": "3340319",
    "end": "3345359"
  },
  {
    "text": "been more than one Earl of Sandwich but one of them was a notorious Gambler he was playing cards and he was playing",
    "start": "3345359",
    "end": "3350520"
  },
  {
    "text": "cards so much that he didn't want to break for lunch or dinner or anything so he asked his servants whether whether he",
    "start": "3350520",
    "end": "3356680"
  },
  {
    "text": "could come up with something that he could eat while playing cards without you know he he wanted to be able to eat",
    "start": "3356680",
    "end": "3361839"
  },
  {
    "text": "it with one hand and he wanted to be able to read eat eat in such a way that his his fingers didn't become too",
    "start": "3361839",
    "end": "3367760"
  },
  {
    "text": "greased so that he could actually still handle the cards so they came up of this idea of of giving her two slices of",
    "start": "3367760",
    "end": "3373200"
  },
  {
    "text": "bread with a piece of meat in between and this is basically you know how the sandwich was invented because it sort of",
    "start": "3373200",
    "end": "3378839"
  },
  {
    "text": "um you know full you know um address that problem and it's sort of the same thing",
    "start": "3378839",
    "end": "3384319"
  },
  {
    "text": "that happens here you know just like the good part of the sandwich is actually actually the meat in the middle but it's greasy so we can't really handle it so",
    "start": "3384319",
    "end": "3390960"
  },
  {
    "text": "we put you know bread around it it's sort of the same thing that's happening here the good parts all your logic all",
    "start": "3390960",
    "end": "3397400"
  },
  {
    "text": "the business logic or whatever it is that you're trying to do is in pure functions it's in the middle but you",
    "start": "3397400",
    "end": "3403280"
  },
  {
    "text": "can't handle it because you can't see the output of it because seeing the output of a pure function would you know",
    "start": "3403280",
    "end": "3409559"
  },
  {
    "text": "require you to print you know pixels to a screen and that's an impure operation and you could you can't put data inside",
    "start": "3409559",
    "end": "3415720"
  },
  {
    "text": "you know into the P pure function because that's IO so you need to to have some impure stuff around in order to be",
    "start": "3415720",
    "end": "3421000"
  },
  {
    "text": "sort of be able to handle the pure stuff um so so hascal code always tend to look",
    "start": "3421000",
    "end": "3426240"
  },
  {
    "text": "like this and by the way I have another talk that talks about why this actually turns out to be uh the ports and",
    "start": "3426240",
    "end": "3433240"
  },
  {
    "text": "adapters architecture all by itself it's sort of enforced by the hasle compiler but if you ask a compiler if you tell",
    "start": "3433240",
    "end": "3439440"
  },
  {
    "text": "that to high schol if you tell that to high school programmer did you know that high school programs tend to follow the POR adaps architect",
    "start": "3439440",
    "end": "3445520"
  },
  {
    "text": "they they'll look at you and say the what they've never heard about the port and adapter architecture because they don't need to have a name for something",
    "start": "3445520",
    "end": "3451240"
  },
  {
    "text": "that just that the language does by itself it's just just it's just hcal right okay so um we'll get back to where",
    "start": "3451240",
    "end": "3458039"
  },
  {
    "text": "we started I'll just reiterate the slide that you already seen if you're doing object-oriented programming and you want",
    "start": "3458039",
    "end": "3463359"
  },
  {
    "text": "to address you know problems of of coupling and you know code that's hard",
    "start": "3463359",
    "end": "3469079"
  },
  {
    "text": "to maintain dependency injection is a well-known way to do that there's other ways to do that in object-oriented",
    "start": "3469079",
    "end": "3474480"
  },
  {
    "text": "programming as well but dependency injection is well described well known and so on so you can I that still makes",
    "start": "3474480",
    "end": "3480240"
  },
  {
    "text": "sense but in functional programming you know if you're an impure functional programming language like for example F",
    "start": "3480240",
    "end": "3486880"
  },
  {
    "text": "but it might be uh well I don't know about closure it's it is you know not it's not impure it's non-strict sorry if",
    "start": "3486880",
    "end": "3493520"
  },
  {
    "text": "you're in a non-strict functional programming language like if sharp for example you can use partial application and I showed you why that is actually",
    "start": "3493520",
    "end": "3500240"
  },
  {
    "text": "equivalent to dependency injection but also I showed you why it's not functional so in said in if you really",
    "start": "3500240",
    "end": "3506079"
  },
  {
    "text": "want to be functional you need to go with this sandwich model instead where you say impure pure impure uh and",
    "start": "3506079",
    "end": "3511960"
  },
  {
    "text": "compose functions like that so with that I'm I'm pretty much at the end of the talk um I'm I'm also at the end of my",
    "start": "3511960",
    "end": "3520160"
  },
  {
    "text": "time so I don't really have time for questions uh but I'll be happy to talk to any of you who have who might have",
    "start": "3520160",
    "end": "3525200"
  },
  {
    "text": "questions you know either here or out in the hallway or wherever I'm going to be around today and tomorrow and if I don't",
    "start": "3525200",
    "end": "3530960"
  },
  {
    "text": "look totally stressed out you're always welcome to just you know come and talk to me and ask me questions there's one",
    "start": "3530960",
    "end": "3536640"
  },
  {
    "text": "question that I predict some of you will have and that is can we get the code you can just uh stay tuned I I have you know",
    "start": "3536640",
    "end": "3544079"
  },
  {
    "text": "I've actually already written four articles that uses all of this and sort of you know dives into the details of it",
    "start": "3544079",
    "end": "3550000"
  },
  {
    "text": "I just need to poish them off when I get back from the conference so if either if you subscribe to plpl DK if you just",
    "start": "3550000",
    "end": "3555880"
  },
  {
    "text": "follow me on Twitter um you'll know when it's published and I'll probably do that late next week I think I'll start doing",
    "start": "3555880",
    "end": "3561680"
  },
  {
    "text": "that um so you will be able to get all the Dem code that I showed you here or at least the if sharpen the has versions",
    "start": "3561680",
    "end": "3567799"
  },
  {
    "text": "of it so with that I'll I'm out of time and I hope you enjoyed the talk and you I hope you enjoy the um the conference",
    "start": "3567799",
    "end": "3574880"
  },
  {
    "text": "and that you have a good couple of days here so thank you all for coming",
    "start": "3574880",
    "end": "3580720"
  }
]