[
  {
    "start": "0",
    "end": "161000"
  },
  {
    "text": "hello and good morning hope everyone's enjoyed the uh fantastic",
    "start": "9200",
    "end": "14799"
  },
  {
    "text": "keynote that we've just heard from melissa my name's brian oliver",
    "start": "14799",
    "end": "21439"
  },
  {
    "text": "and um hope everyone's enjoying ndc so far so let's make a star",
    "start": "21439",
    "end": "28720"
  },
  {
    "text": "before we go go too far if you wish to ask any questions",
    "start": "28720",
    "end": "34800"
  },
  {
    "text": "please just put that in the room two slack channel and i'm able to see that that's why i'm",
    "start": "34800",
    "end": "42160"
  },
  {
    "text": "glancing away every so often is to see whether anyone's been asking questions",
    "start": "42160",
    "end": "47600"
  },
  {
    "text": "okay so let's make a start so i'm going to talk today about how we",
    "start": "47600",
    "end": "53760"
  },
  {
    "text": "can do very fast transactions in using cosmos db and redis",
    "start": "53760",
    "end": "63198"
  },
  {
    "text": "so first a little bit about myself my name's brian oliver i'm a solution architect at ssw",
    "start": "65360",
    "end": "74240"
  },
  {
    "text": "you can check out my linkedin profile if you're interested and there's a few um open source repos on my github",
    "start": "74240",
    "end": "83200"
  },
  {
    "text": "i've worked with azure since it launched just over 10 years ago",
    "start": "83200",
    "end": "89040"
  },
  {
    "text": "i'm two inches shorter than i was last year after an unfortunate trampolining accident",
    "start": "89040",
    "end": "96799"
  },
  {
    "text": "i've got 20 years of experience in database performance and i know an enormous amount about",
    "start": "96799",
    "end": "103759"
  },
  {
    "text": "azure scale particularly cosmos so talking about these the sort of",
    "start": "103759",
    "end": "110720"
  },
  {
    "text": "millions of values a second type scale",
    "start": "110720",
    "end": "115840"
  },
  {
    "text": "all right so let's have a quick look at what we're going to talk about today first i'll",
    "start": "116399",
    "end": "121680"
  },
  {
    "text": "introduce what problem we're trying to solve and then",
    "start": "121680",
    "end": "126880"
  },
  {
    "text": "we'll have a quick primer on how to lock databases and what database locking is",
    "start": "126880",
    "end": "133760"
  },
  {
    "text": "and then we'll look at implementing some of the things that you see in database",
    "start": "133760",
    "end": "140840"
  },
  {
    "text": "locking the cosmos using a redis cache",
    "start": "140840",
    "end": "146400"
  },
  {
    "text": "and then we'll go and have a look at some code and then see how it performs",
    "start": "146640",
    "end": "152319"
  },
  {
    "text": "and what we could do with this stuff",
    "start": "152319",
    "end": "156760"
  },
  {
    "start": "161000",
    "end": "161000"
  },
  {
    "text": "sorry so what problem are we solving at the moment cosmos doesn't support",
    "start": "161040",
    "end": "168000"
  },
  {
    "text": "locking at all and that's an entirely deliberate thing from their point of view",
    "start": "168000",
    "end": "174400"
  },
  {
    "text": "but that means that multiple updates on a record can happen at once and this is really bad where the updates",
    "start": "174400",
    "end": "181840"
  },
  {
    "text": "rely on reading a value and then updating it so",
    "start": "181840",
    "end": "186959"
  },
  {
    "text": "i'll show you how we can implement logging for cosmos",
    "start": "186959",
    "end": "192560"
  },
  {
    "text": "so the demo i'm going to do walk you through is i've been thinking a lot about the",
    "start": "193440",
    "end": "199120"
  },
  {
    "text": "zombie apocalypse since covet started and how that might affect australia",
    "start": "199120",
    "end": "205599"
  },
  {
    "text": "so in thinking about that i was reminded of a um",
    "start": "205599",
    "end": "211680"
  },
  {
    "text": "something that happened on australian children's television almost 40 years ago i suspect",
    "start": "211680",
    "end": "218720"
  },
  {
    "text": "so if you look up marty monster versus kangaroo on youtube you'll be able to see this and basically",
    "start": "218720",
    "end": "226080"
  },
  {
    "text": "a kangaroo was brought into a australian children's television program live",
    "start": "226080",
    "end": "232400"
  },
  {
    "text": "and it had two hosts a human and a",
    "start": "232400",
    "end": "237439"
  },
  {
    "text": "person in a monster suit and the kangaroo took to the monster",
    "start": "237439",
    "end": "243200"
  },
  {
    "text": "so that led me to the conclusion that you've actually got",
    "start": "243200",
    "end": "248959"
  },
  {
    "text": "quite an odd population dynamic here once the zombies arrive will happen is the zombies will kill the",
    "start": "248959",
    "end": "255040"
  },
  {
    "text": "humans humans lead kangaroos because everything else is now dead",
    "start": "255040",
    "end": "260799"
  },
  {
    "text": "so kangaroos is the only food and the kangaroos will kill the zombies for us",
    "start": "260799",
    "end": "269440"
  },
  {
    "start": "269000",
    "end": "269000"
  },
  {
    "text": "so i've designed a really complicated population model that works on the",
    "start": "269440",
    "end": "275199"
  },
  {
    "text": "population of the kangaroos the humans and the zombies in a particular city",
    "start": "275199",
    "end": "281600"
  },
  {
    "text": "and while i do the enormous and complex calculations i need to be very sure that another process doesn't modify",
    "start": "281600",
    "end": "289520"
  },
  {
    "text": "the population information for that city so i need to lock it",
    "start": "289520",
    "end": "296680"
  },
  {
    "start": "295000",
    "end": "295000"
  },
  {
    "text": "so we we want to be able to lock the data for a given city so the demo code",
    "start": "297600",
    "end": "304560"
  },
  {
    "text": "i've produced will show a sql server solution to this problem",
    "start": "304560",
    "end": "310800"
  },
  {
    "text": "and then a cosmos solution for those days you really need a nosql solution",
    "start": "310800",
    "end": "316639"
  },
  {
    "text": "that happens to use cosmos sql and this is really",
    "start": "316639",
    "end": "322320"
  },
  {
    "text": "about those days where you don't want a highly relational database",
    "start": "322320",
    "end": "327919"
  },
  {
    "text": "or maybe you've just got a tiny piece of stuff that you require locked and most of your documents are fine",
    "start": "327919",
    "end": "336160"
  },
  {
    "text": "so this is really um",
    "start": "336160",
    "end": "341280"
  },
  {
    "text": "a slightly unusual use case but the solution presented here you can use",
    "start": "341280",
    "end": "346560"
  },
  {
    "text": "for anything not just cosmos so let's have a talk about database",
    "start": "346560",
    "end": "352800"
  },
  {
    "text": "locking now because consistency is a really",
    "start": "352800",
    "end": "359039"
  },
  {
    "start": "356000",
    "end": "356000"
  },
  {
    "text": "important feature of databases we really get angry when the data is inconsistent",
    "start": "359039",
    "end": "364240"
  },
  {
    "text": "there are lots of different locks and the locks are used to ensure that consistency",
    "start": "364240",
    "end": "370880"
  },
  {
    "text": "and those locks can be applied to lots of different resources",
    "start": "370880",
    "end": "377039"
  },
  {
    "text": "and different types of locks have different effects so first of all let's have a look",
    "start": "377120",
    "end": "385039"
  },
  {
    "text": "at the locking hierarchy in sql server so sql server allows you to lock things",
    "start": "385120",
    "end": "392880"
  },
  {
    "text": "at four levels of granularity so you can lock a whole database",
    "start": "392880",
    "end": "398160"
  },
  {
    "text": "you can lock a table you can lock just a page in a table",
    "start": "398160",
    "end": "403360"
  },
  {
    "text": "which might be a data page or an index page so that's typically if you're having to split the page",
    "start": "403360",
    "end": "410479"
  },
  {
    "text": "that's the obvious example there you need to lock the whole page while you're splitting it",
    "start": "410479",
    "end": "415759"
  },
  {
    "text": "because you've you're inserting a new row in it and suddenly it doesn't fit in the page anymore",
    "start": "415759",
    "end": "421599"
  },
  {
    "text": "and then you can just lock a row and in sql server if you've got a lock",
    "start": "421599",
    "end": "426960"
  },
  {
    "text": "on a a low level um item you can escalate it to a higher",
    "start": "426960",
    "end": "434319"
  },
  {
    "text": "type so you can escalate from a row lock to a page lock a page lock to a table",
    "start": "434319",
    "end": "439360"
  },
  {
    "text": "lock and even to a full database lock if you really need to",
    "start": "439360",
    "end": "446960"
  },
  {
    "start": "448000",
    "end": "448000"
  },
  {
    "text": "okay so as well as i'm being able to lock different things",
    "start": "448960",
    "end": "454880"
  },
  {
    "text": "we've got different types of locks as well and they achieve different things",
    "start": "454880",
    "end": "461199"
  },
  {
    "text": "and they're used to get the consistency and performance balance right because",
    "start": "461199",
    "end": "466720"
  },
  {
    "text": "sometimes you performance is more important than consistency or",
    "start": "466720",
    "end": "473840"
  },
  {
    "text": "if you're reading it doesn't really matter if someone else is writing for instance or if there's 10 people",
    "start": "473840",
    "end": "480560"
  },
  {
    "text": "reading that's fine so sql server has lots of different types of locks",
    "start": "480560",
    "end": "486960"
  },
  {
    "text": "more than 10 and there may be even be more these days i haven't looked that recently",
    "start": "486960",
    "end": "494639"
  },
  {
    "text": "for now we'll just discuss the two most important types for day-to-day use",
    "start": "494639",
    "end": "501360"
  },
  {
    "text": "so the first one is an exclusive lock so that makes the resource only",
    "start": "501440",
    "end": "507759"
  },
  {
    "text": "available for the holder of that transaction so what does that mean that means no one",
    "start": "507759",
    "end": "514159"
  },
  {
    "text": "else can read from that record or write to that record until the",
    "start": "514159",
    "end": "520719"
  },
  {
    "text": "transaction that's currently in progress has finished so that's quite a an onerous",
    "start": "520719",
    "end": "527680"
  },
  {
    "text": "lock in a database you don't want to have exclusive locks very often",
    "start": "527680",
    "end": "533279"
  },
  {
    "text": "so what about if we just want to be sure um that we're the only person writing to",
    "start": "533279",
    "end": "540240"
  },
  {
    "text": "a record don't really care about whether someone else is reading it while we're writing it",
    "start": "540240",
    "end": "546720"
  },
  {
    "text": "we just care about whether it's being written so for that we can use what's called a",
    "start": "546720",
    "end": "553680"
  },
  {
    "text": "shared lock so this lock will make the resource only available for reading",
    "start": "553680",
    "end": "560160"
  },
  {
    "text": "so others can read but we're the only one that can write if we're the holder of that transaction",
    "start": "560160",
    "end": "567200"
  },
  {
    "text": "and that's commonly what you get while a single row is updated in the database",
    "start": "567200",
    "end": "573519"
  },
  {
    "text": "you're allowed to read that row but and you'll get the old value",
    "start": "573519",
    "end": "580240"
  },
  {
    "text": "but current no one else can write to it while you're",
    "start": "580240",
    "end": "585519"
  },
  {
    "text": "writing to it and then the key thing here is that sql",
    "start": "585519",
    "end": "591920"
  },
  {
    "start": "589000",
    "end": "589000"
  },
  {
    "text": "server does most of this under the hood and there are query hints where you can",
    "start": "591920",
    "end": "599200"
  },
  {
    "text": "try and force sql server into using different locks other than what it wants to",
    "start": "599200",
    "end": "606079"
  },
  {
    "text": "okay so let's talk about transactions which are really",
    "start": "607680",
    "end": "612720"
  },
  {
    "text": "trying to bundle up a whole bunch of different statements into one big item",
    "start": "612720",
    "end": "619440"
  },
  {
    "text": "and therefore the locks become longer so how do we control the locking",
    "start": "619440",
    "end": "626320"
  },
  {
    "text": "the isolation level on a transaction is what gives us contr more control on what",
    "start": "626320",
    "end": "631600"
  },
  {
    "text": "types of locks are taken so let's take a look at the four mains",
    "start": "631600",
    "end": "636720"
  },
  {
    "text": "types of transaction isolation levels",
    "start": "636720",
    "end": "642640"
  },
  {
    "text": "there's read uncommitted so a transaction can read changes that haven't been committed yet",
    "start": "642640",
    "end": "649600"
  },
  {
    "text": "so there is no transaction isolation at all so that means if i've",
    "start": "649600",
    "end": "655040"
  },
  {
    "text": "got a statement that updates a record in the first",
    "start": "655040",
    "end": "660640"
  },
  {
    "text": "statement in the transaction and then there's say a 10 second wait",
    "start": "660640",
    "end": "667040"
  },
  {
    "text": "other transactions will see that update that i've done in the first row of the transaction",
    "start": "667040",
    "end": "674160"
  },
  {
    "text": "and even if i roll it back they'll have read that",
    "start": "674160",
    "end": "679360"
  },
  {
    "text": "read my update that so that's not necessarily the world's greatest",
    "start": "679360",
    "end": "685760"
  },
  {
    "text": "um isolation level it's i believe it's relatively rarely used",
    "start": "685760",
    "end": "692240"
  },
  {
    "text": "read committed is similar except that any data read",
    "start": "692240",
    "end": "699040"
  },
  {
    "text": "must have been committed so it must have gone past the commit",
    "start": "699040",
    "end": "704160"
  },
  {
    "text": "in a transaction this is the most common one",
    "start": "704160",
    "end": "712160"
  },
  {
    "text": "repeatable read so it will create red locks on all records that have been read",
    "start": "714000",
    "end": "720560"
  },
  {
    "text": "and also write locks on any updates so this avoids non-repeatable reads",
    "start": "720560",
    "end": "726079"
  },
  {
    "text": "because the right lock prevents any reading so if you go and update something",
    "start": "726079",
    "end": "731760"
  },
  {
    "text": "someone else has to wait until your transaction has finished to be able to read it",
    "start": "731760",
    "end": "738720"
  },
  {
    "text": "and then serializable the highest isolation level it guarantees that transactions appear",
    "start": "740320",
    "end": "747040"
  },
  {
    "text": "to be executing serially so it'll take out locks",
    "start": "747040",
    "end": "752880"
  },
  {
    "text": "that make sure that if two transactions touch the same piece of data they will",
    "start": "752880",
    "end": "758639"
  },
  {
    "text": "appear as if they have be locked so it looks like they have executed one",
    "start": "758639",
    "end": "765120"
  },
  {
    "text": "after another so that that one can cause quite a bit of contention in your database",
    "start": "765120",
    "end": "773399"
  },
  {
    "text": "okay so now we've been through a quick primer on",
    "start": "774880",
    "end": "780720"
  },
  {
    "text": "database locking let's look at what we how we might implement some locks for cosmos we definitely don't",
    "start": "780720",
    "end": "788000"
  },
  {
    "text": "want to do anything as complicated as implementing all of the",
    "start": "788000",
    "end": "793440"
  },
  {
    "text": "locking available on sql server so what might we do",
    "start": "793440",
    "end": "798959"
  },
  {
    "text": "so remember cosmos deliberately doesn't support locking that's why cosmos is so fast",
    "start": "799680",
    "end": "807040"
  },
  {
    "text": "and so simple and it replicates across regions really well because it doesn't have to worry",
    "start": "807040",
    "end": "812240"
  },
  {
    "text": "about the fact that sql server if you locked a record in region one",
    "start": "812240",
    "end": "818959"
  },
  {
    "text": "you would also have to lock it in region two so that would then up the complexity in cosmos enormously",
    "start": "818959",
    "end": "826560"
  },
  {
    "text": "if you want wanted to do that but sometimes you just want to lock",
    "start": "826560",
    "end": "832000"
  },
  {
    "text": "something and maybe it's only a single record in your data in your cosmos or a few records but",
    "start": "832000",
    "end": "839279"
  },
  {
    "text": "sometimes you really just need that to be able to lock stuff and that becomes a problem when you're using cosmos",
    "start": "839279",
    "end": "846160"
  },
  {
    "text": "so how can we get blocks well redis cache",
    "start": "846160",
    "end": "852560"
  },
  {
    "text": "provides fantastic distributed locks they're really fast really easy",
    "start": "852560",
    "end": "859760"
  },
  {
    "text": "to implement and they're they're great to use so we can still",
    "start": "859920",
    "end": "865600"
  },
  {
    "text": "have our scalable stateless pi as well which is great",
    "start": "865600",
    "end": "873360"
  },
  {
    "text": "okay so riddus so how are we going to architect this so",
    "start": "874160",
    "end": "879760"
  },
  {
    "text": "the demonstration i'm going to do in a short while uses as your",
    "start": "879760",
    "end": "885120"
  },
  {
    "text": "functions for the compute but you can substitute that for whatever code you like it could be javascript could be as",
    "start": "885120",
    "end": "891120"
  },
  {
    "text": "your functions could be an app service really the possibilities there are endless",
    "start": "891120",
    "end": "896800"
  },
  {
    "text": "but what we're going to use is redis cache for the logs and some data stored in cosmos so that's",
    "start": "896800",
    "end": "904560"
  },
  {
    "text": "where the records are so how do we code it",
    "start": "904560",
    "end": "910399"
  },
  {
    "text": "so what is what are things look like the order of operations well first we're going to go to redis",
    "start": "910399",
    "end": "917839"
  },
  {
    "text": "and obtain a lock then we're going to do some stuff",
    "start": "917839",
    "end": "924079"
  },
  {
    "text": "and then once we've done the stuff we've got to call readers back and release that lock",
    "start": "924079",
    "end": "929360"
  },
  {
    "text": "and then we can enjoy our fun and profit afterwards after everything's been done",
    "start": "929360",
    "end": "935279"
  },
  {
    "text": "okay so let's see some code",
    "start": "936800",
    "end": "944399"
  },
  {
    "text": "we'll discuss a bit we'll work through some bits of code as we go here",
    "start": "944399",
    "end": "950320"
  },
  {
    "start": "948000",
    "end": "948000"
  },
  {
    "text": "okay so one of the things when we're working with all this locking is the timings are critical and having a really good view",
    "start": "950320",
    "end": "958240"
  },
  {
    "text": "of timings in sql server is really hard but we're building our own locking so we're really going to need to know",
    "start": "958240",
    "end": "965759"
  },
  {
    "text": "what the timings look like and when i was building this i really really did need to know this because at one point i",
    "start": "965759",
    "end": "972560"
  },
  {
    "text": "accidentally had the cosmos client connecting inside every one of my locks",
    "start": "972560",
    "end": "980079"
  },
  {
    "text": "so i was able to fight using the technique i'm about to show you i was able to find that fact really quickly",
    "start": "980079",
    "end": "988399"
  },
  {
    "start": "989000",
    "end": "989000"
  },
  {
    "text": "so we're going to use application insights to do that because application insights tracks timings beautifully it's",
    "start": "989279",
    "end": "996560"
  },
  {
    "text": "super easy to understand what happens inside a request and it's super easy to extend so to add",
    "start": "996560",
    "end": "1003920"
  },
  {
    "text": "our own telemetry so if you you look at this",
    "start": "1003920",
    "end": "1011279"
  },
  {
    "text": "example here it's very easy to tell that a calculate cosmos function was called",
    "start": "1011279",
    "end": "1019199"
  },
  {
    "text": "and that it took 374 milliseconds and then we've got another call to a another function",
    "start": "1019199",
    "end": "1026319"
  },
  {
    "text": "we'll calculate cosmos and then",
    "start": "1026319",
    "end": "1031120"
  },
  {
    "text": "after that we come to",
    "start": "1036400",
    "end": "1040399"
  },
  {
    "text": "uh these ones and these are all because they've got the word other",
    "start": "1041760",
    "end": "1047120"
  },
  {
    "text": "they're extended telemetry that we've added ourselves",
    "start": "1047120",
    "end": "1052640"
  },
  {
    "text": "so as you can see in here we've got one of the things where i'm trying to do",
    "start": "1052640",
    "end": "1058559"
  },
  {
    "text": "the locking because you can see it was locked for 38 milliseconds took four milliseconds to acquire the",
    "start": "1058559",
    "end": "1064640"
  },
  {
    "text": "lock and then it was doing something but let's move on",
    "start": "1064640",
    "end": "1071000"
  },
  {
    "start": "1081000",
    "end": "1081000"
  },
  {
    "text": "so let's add a new class that extends the application insights dependency collection",
    "start": "1081520",
    "end": "1087520"
  },
  {
    "text": "and the reason we're going to do this is there's a fair amount of boilerplate in that",
    "start": "1087520",
    "end": "1093360"
  },
  {
    "text": "dependency stuff if you're doing it yourself so",
    "start": "1093360",
    "end": "1098960"
  },
  {
    "text": "um if we make this implement our disposable then we can let the dependency magically to",
    "start": "1098960",
    "end": "1105440"
  },
  {
    "text": "finish up for us and let's go and have a look at that",
    "start": "1105440",
    "end": "1110559"
  },
  {
    "text": "okay so here's my brand new dependency class so you'll see what it does",
    "start": "1113760",
    "end": "1122559"
  },
  {
    "text": "is when you start the dependency it just creates a dependency telemetry",
    "start": "1122559",
    "end": "1129520"
  },
  {
    "text": "item and just holds",
    "start": "1129520",
    "end": "1134080"
  },
  {
    "text": "it and fills in all the details so we've got a an object type",
    "start": "1134840",
    "end": "1140880"
  },
  {
    "text": "so that was the cosmos in my thing the operation i commonly",
    "start": "1140880",
    "end": "1146880"
  },
  {
    "text": "put the function name in there or what the operation i'm trying to do is and then i've optionally got an id so",
    "start": "1146880",
    "end": "1153520"
  },
  {
    "text": "i can know exactly which thing i was trying to block or which thing i was trying to do",
    "start": "1153520",
    "end": "1159039"
  },
  {
    "text": "this operation on but quite often you don't want to put that in and so",
    "start": "1159039",
    "end": "1165440"
  },
  {
    "text": "in many applications that would be can be considered a security risk so",
    "start": "1165440",
    "end": "1170880"
  },
  {
    "text": "you may not want to fill an idea and then the first thing we do is we do",
    "start": "1170880",
    "end": "1176720"
  },
  {
    "text": "this start operation here and what does start operation achieve start operation in",
    "start": "1176720",
    "end": "1184480"
  },
  {
    "text": "application insights dependency telemetry starts the timing",
    "start": "1184480",
    "end": "1190160"
  },
  {
    "text": "and then in our dispose down here you'll see we do the stop operation and that",
    "start": "1190160",
    "end": "1195679"
  },
  {
    "text": "terminates the timing so it's run a nice little timing which gives you that nice gantt chart",
    "start": "1195679",
    "end": "1204159"
  },
  {
    "text": "and the second piece of funkies we've got here is well we've also got a",
    "start": "1204960",
    "end": "1210000"
  },
  {
    "text": "success property where we just set the success on the telemetry which means you can say",
    "start": "1210000",
    "end": "1215760"
  },
  {
    "text": "whether it was whether this dependency worked or it didn't",
    "start": "1215760",
    "end": "1221520"
  },
  {
    "text": "so let's have a quick look at how you would use this",
    "start": "1221520",
    "end": "1227840"
  },
  {
    "text": "so here we have a nice using statement at the top we're",
    "start": "1228480",
    "end": "1234000"
  },
  {
    "text": "taking a dependency and we're just going to call we're saying it's our functions",
    "start": "1234000",
    "end": "1240799"
  },
  {
    "text": "and the operation we're doing is getting a handler you'll see the only other reference to my",
    "start": "1240799",
    "end": "1247200"
  },
  {
    "text": "dependency is i've just decided for this contrived example to to tell it that it",
    "start": "1247200",
    "end": "1253840"
  },
  {
    "text": "failed and then once we get to the end of this function here the timing stops so it'll time how long",
    "start": "1253840",
    "end": "1260640"
  },
  {
    "text": "it took to do all of this and that's what you'll see in the app insights",
    "start": "1260640",
    "end": "1266000"
  },
  {
    "text": "again for you",
    "start": "1266000",
    "end": "1268720"
  },
  {
    "text": "okay so now we're able to track some stuff",
    "start": "1274840",
    "end": "1280000"
  },
  {
    "text": "please i'm just having a bit of trouble with powerpoint there next we want something to be able to do",
    "start": "1283679",
    "end": "1290720"
  },
  {
    "start": "1288000",
    "end": "1288000"
  },
  {
    "text": "the locks because that's the the cracks of what we're trying to do here so",
    "start": "1290720",
    "end": "1296480"
  },
  {
    "text": "there's a great nuget package that wraps the locking the distributed lock stuff in",
    "start": "1296480",
    "end": "1303120"
  },
  {
    "text": "redis cage called redlock.net and that's what we're going to use for that",
    "start": "1303120",
    "end": "1309200"
  },
  {
    "text": "and it wraps it really really nicely all we need to do is set up a redlock factory in our dependency injection so",
    "start": "1309200",
    "end": "1317440"
  },
  {
    "text": "let's go and have a quick look at that dependency injection so you'll see here",
    "start": "1317440",
    "end": "1323360"
  },
  {
    "text": "there is a bit of um stuff to get it started so i need to read the connection string",
    "start": "1323360",
    "end": "1330400"
  },
  {
    "text": "for redis from the from configuration create a redis connection multiplexer",
    "start": "1330400",
    "end": "1339120"
  },
  {
    "text": "and then make a list of them and then that's what i passed to this redlock factory create",
    "start": "1339120",
    "end": "1346559"
  },
  {
    "text": "and because you only want one ever want one cache instance in your application we're doing an ad singleton here so",
    "start": "1346559",
    "end": "1354480"
  },
  {
    "text": "we're constructing it at um here and it's just added as a singleton",
    "start": "1354480",
    "end": "1362000"
  },
  {
    "text": "our locking service that we're going to use a bit later is added as a transient",
    "start": "1362000",
    "end": "1370320"
  },
  {
    "text": "and everything else is pretty much standard sort of stuff",
    "start": "1370799",
    "end": "1376158"
  },
  {
    "start": "1386000",
    "end": "1386000"
  },
  {
    "text": "okay so how do we use it in a transaction using redlock we can take a distributed",
    "start": "1386799",
    "end": "1393600"
  },
  {
    "text": "lock really easily all we need to do is",
    "start": "1393600",
    "end": "1399360"
  },
  {
    "text": "await redlockfactory.create lock async",
    "start": "1399360",
    "end": "1405360"
  },
  {
    "text": "and provide an id and some other parameters and to release the lock",
    "start": "1405360",
    "end": "1410720"
  },
  {
    "text": "all we do is call the dispose method on the lock or we can use it in a using statement",
    "start": "1410720",
    "end": "1416080"
  },
  {
    "text": "just like we did with the dependency",
    "start": "1416080",
    "end": "1419760"
  },
  {
    "text": "so let's have a quick chat about what those expiry weight and retry parameters",
    "start": "1423440",
    "end": "1429440"
  },
  {
    "text": "mean because they actually are very important in using these locks",
    "start": "1429440",
    "end": "1436080"
  },
  {
    "text": "so expiry describes how long a lock should be held without any further interaction from the",
    "start": "1436400",
    "end": "1443120"
  },
  {
    "text": "holder so this means if your app crashes or you get an exception the lock will be automatically released",
    "start": "1443120",
    "end": "1450000"
  },
  {
    "text": "after that expiry time so it will call redis will just automatically",
    "start": "1450000",
    "end": "1456320"
  },
  {
    "text": "unlock this is potentially different to what you'll get in sql server where the server can end up locked for very long",
    "start": "1456840",
    "end": "1463440"
  },
  {
    "text": "periods but you can do the same sort of thing here and have this locked for extremely long periods as",
    "start": "1463440",
    "end": "1470400"
  },
  {
    "text": "well what about weight",
    "start": "1470400",
    "end": "1476000"
  },
  {
    "start": "1472000",
    "end": "1472000"
  },
  {
    "text": "that weight parameter defines how long the caller is prepared to wait to obtain a lock",
    "start": "1476000",
    "end": "1481840"
  },
  {
    "text": "and this needs to be tuned to your use case so if you can wait if your",
    "start": "1481840",
    "end": "1488880"
  },
  {
    "text": "operation can take 30 seconds then that's how long you're prepared to wait",
    "start": "1488880",
    "end": "1495279"
  },
  {
    "text": "that doesn't mean you will wait that long that's just if someone else has already got the lock",
    "start": "1495279",
    "end": "1501279"
  },
  {
    "text": "how long am i prepared to wait until i get that",
    "start": "1501279",
    "end": "1506240"
  },
  {
    "start": "1508000",
    "end": "1508000"
  },
  {
    "text": "and retry this defines how often to try and get the lock so what",
    "start": "1509120",
    "end": "1514720"
  },
  {
    "text": "where this lock the red lock is doing underneath is it tries to get the lock",
    "start": "1514720",
    "end": "1520320"
  },
  {
    "text": "if it fails it waits for a while",
    "start": "1520320",
    "end": "1525840"
  },
  {
    "text": "and then retries and it waits and retries so this retry parameter says how often",
    "start": "1525840",
    "end": "1532000"
  },
  {
    "text": "that retry should occur and it'll do that until it hits that wait time which was the previous",
    "start": "1532000",
    "end": "1537679"
  },
  {
    "text": "parameter so if the resource was already locked actually so this should be tuned based on the",
    "start": "1537679",
    "end": "1544799"
  },
  {
    "text": "normal amount of time a lock should be held because what you don't want to do is",
    "start": "1544799",
    "end": "1550799"
  },
  {
    "text": "just keep repeating balls",
    "start": "1550799",
    "end": "1557240"
  },
  {
    "text": "so it's important to be careful if you expect high contention for a particular",
    "start": "1557440",
    "end": "1562799"
  },
  {
    "text": "resource remember that each resources lock is separate so if you're blocking an",
    "start": "1562799",
    "end": "1568480"
  },
  {
    "text": "individual document in cosmos we're not too worried if there's going to be lots of requests for locks we're",
    "start": "1568480",
    "end": "1574880"
  },
  {
    "text": "just caring if there's going to be lots of requests for locks for this record",
    "start": "1574880",
    "end": "1581679"
  },
  {
    "text": "so in most systems a lot collision is relatively unlikely you know you really",
    "start": "1581679",
    "end": "1587279"
  },
  {
    "text": "get the same record being read or written at the same time",
    "start": "1587279",
    "end": "1592400"
  },
  {
    "text": "in these sort of scenarios the retry times should be a bit more than half the typical lock length meaning a lock will",
    "start": "1592400",
    "end": "1599039"
  },
  {
    "text": "probably be obtained straight after your competing caller completes so",
    "start": "1599039",
    "end": "1605520"
  },
  {
    "text": "there's a sort of 50 50 chance that the next time you call it'll be unlocked",
    "start": "1605520",
    "end": "1612520"
  },
  {
    "start": "1613000",
    "end": "1613000"
  },
  {
    "text": "however in cases where you do expect high contention on an individual resource",
    "start": "1613840",
    "end": "1620240"
  },
  {
    "text": "care should be taken to handle the case where a lock was not obtainable within the wait time i what should happen if i",
    "start": "1620240",
    "end": "1626400"
  },
  {
    "text": "can't get control of the resource fast enough so where might you see this",
    "start": "1626400",
    "end": "1632799"
  },
  {
    "text": "well if you're running say an internet sales business",
    "start": "1632799",
    "end": "1637919"
  },
  {
    "text": "and one of your items goes viral then you're going to be processing",
    "start": "1637919",
    "end": "1643600"
  },
  {
    "text": "millions potentially millions of transactions over that one item which means that one",
    "start": "1643600",
    "end": "1650799"
  },
  {
    "text": "item is going to be consistently locked and there's a good chance that",
    "start": "1650799",
    "end": "1656320"
  },
  {
    "text": "one customer who wants to buy it can't because what you'd like why and why why",
    "start": "1656320",
    "end": "1663360"
  },
  {
    "text": "do we care about locking that record well that's so that if we're keeping an inventory of how many of",
    "start": "1663360",
    "end": "1669120"
  },
  {
    "text": "these items we've got one person takes a lot",
    "start": "1669120",
    "end": "1674240"
  },
  {
    "text": "subtracts one from the number of items that remain as they buy one and then unlock",
    "start": "1674240",
    "end": "1680880"
  },
  {
    "text": "so it is critical to be able to lock",
    "start": "1680880",
    "end": "1685360"
  },
  {
    "text": "in that situation and the high contention will mean that we've got to have some way of",
    "start": "1686399",
    "end": "1692799"
  },
  {
    "text": "telling a user that the lock wasn't obtainable",
    "start": "1692799",
    "end": "1697840"
  },
  {
    "text": "okay so let's see this in action",
    "start": "1699679",
    "end": "1705679"
  },
  {
    "text": "so just switch back to visual studio",
    "start": "1706559",
    "end": "1711840"
  },
  {
    "text": "okay so if we go up just a touch",
    "start": "1714399",
    "end": "1720480"
  },
  {
    "text": "as you can see what we do is right redlock factory dot create locker",
    "start": "1720480",
    "end": "1725919"
  },
  {
    "text": "async so there's us creating our lock",
    "start": "1725919",
    "end": "1730799"
  },
  {
    "text": "and in my example here i'm checking how long it took us to get that",
    "start": "1731120",
    "end": "1737840"
  },
  {
    "text": "lock and just logging that if it takes a bit long",
    "start": "1737840",
    "end": "1744559"
  },
  {
    "text": "so if it took more than one of the weights then pocket we then check whether we got the",
    "start": "1748480",
    "end": "1755200"
  },
  {
    "text": "lock and with us stopwatch has elapsed and say whether it was successful based on that",
    "start": "1755200",
    "end": "1763520"
  },
  {
    "text": "and then have a look at this dependency so this is this dependency here",
    "start": "1763760",
    "end": "1769600"
  },
  {
    "text": "is on the acquire so as soon as i've finished all of that i can say i've acquired the lock",
    "start": "1769600",
    "end": "1775279"
  },
  {
    "text": "or i failed to acquire the lock i've but i finished trying so i dispose of that and that means the",
    "start": "1775279",
    "end": "1781919"
  },
  {
    "text": "timings for that dependency up there finish we have got another dependency which is",
    "start": "1781919",
    "end": "1787600"
  },
  {
    "text": "around the whole thing but we'll come to that later so if redlock is acquired i'm going to",
    "start": "1787600",
    "end": "1795039"
  },
  {
    "text": "go and do some stuff otherwise i'm going to log an error",
    "start": "1795039",
    "end": "1800640"
  },
  {
    "text": "and here you might want to raise an exception or whatever",
    "start": "1800640",
    "end": "1806559"
  },
  {
    "text": "and then once we've finished with it we're going to do a redlock dispose and",
    "start": "1806559",
    "end": "1812320"
  },
  {
    "text": "we've got another dependency around that but if you look at all of these",
    "start": "1812320",
    "end": "1817919"
  },
  {
    "text": "there's quite a bit of boilerplate here isn't there",
    "start": "1817919",
    "end": "1822919"
  },
  {
    "text": "so let's make that a bit nicer it really was a big block of code that",
    "start": "1829440",
    "end": "1836799"
  },
  {
    "text": "i don't want to use every time i want to have a lock and maybe we want to just run a block of",
    "start": "1836799",
    "end": "1842640"
  },
  {
    "text": "code while locked maybe with a return value so how do we do that",
    "start": "1842640",
    "end": "1851000"
  },
  {
    "text": "so i've extracted that out into an eye lock service where we",
    "start": "1851440",
    "end": "1858559"
  },
  {
    "text": "take a look at it you just have a method called perform while locked and it'll go and do some",
    "start": "1858559",
    "end": "1865840"
  },
  {
    "text": "stuff and come back",
    "start": "1865840",
    "end": "1869600"
  },
  {
    "start": "1871000",
    "end": "1871000"
  },
  {
    "text": "so you saw in that previous um slide we had a lock token what's that",
    "start": "1871039",
    "end": "1877279"
  },
  {
    "text": "for so the idea of the lock token is to wrap the id of the resource we've got locked",
    "start": "1877279",
    "end": "1884240"
  },
  {
    "text": "that means our code can check that we've got the correct resource locked before doing it right so this is",
    "start": "1884240",
    "end": "1890880"
  },
  {
    "text": "great if your top level code is taking out the lock but it then calls through several",
    "start": "1890880",
    "end": "1897919"
  },
  {
    "text": "objects to actually do the update the update method can take the lock token",
    "start": "1897919",
    "end": "1905200"
  },
  {
    "text": "and you can pass that all the way down and it can be very sure that you've actually got the right",
    "start": "1905200",
    "end": "1910960"
  },
  {
    "text": "record locked because that would be really bad if you'd locked the wrong record and then",
    "start": "1910960",
    "end": "1916000"
  },
  {
    "text": "updated another one or updated 10 records it only locked one",
    "start": "1916000",
    "end": "1922320"
  },
  {
    "text": "so that gives us a bit of protection against that",
    "start": "1922320",
    "end": "1926399"
  },
  {
    "text": "and that do stuff what's that for that's the method that we're going to call",
    "start": "1927760",
    "end": "1935760"
  },
  {
    "text": "so that we've got a nice isolated bit of code to execute inside the lock",
    "start": "1935760",
    "end": "1942000"
  },
  {
    "text": "so let's go and um have a look at the whole lock service",
    "start": "1942399",
    "end": "1949440"
  },
  {
    "text": "piece so this is one of those methods so first of all we take the id out of",
    "start": "1949440",
    "end": "1955279"
  },
  {
    "text": "the lock token and that's what we use as",
    "start": "1955279",
    "end": "1961039"
  },
  {
    "text": "and i'm passing it into the dependency but optionally maybe you wouldn't",
    "start": "1961039",
    "end": "1967759"
  },
  {
    "text": "uh then we do the acquire but that id that we got out of the lock token is what we pass to the create lock",
    "start": "1968080",
    "end": "1974720"
  },
  {
    "text": "async so with cosmos documents i was typically using the id out of the",
    "start": "1974720",
    "end": "1980720"
  },
  {
    "text": "document because that's supposed to be a unique thing that identifies that document",
    "start": "1980720",
    "end": "1986240"
  },
  {
    "text": "because i was wanting to block documents and then we've",
    "start": "1986240",
    "end": "1992640"
  },
  {
    "text": "already passed to this lock service the expiry weight and",
    "start": "1992640",
    "end": "1997760"
  },
  {
    "text": "retries that we're happy with on an application level alternatively you may decide that on",
    "start": "1997760",
    "end": "2003440"
  },
  {
    "text": "each call you want to specify those values just adjust the code as needed",
    "start": "2003440",
    "end": "2010000"
  },
  {
    "text": "just a reminder all of this code is available in a github repository that's on the last",
    "start": "2010000",
    "end": "2016000"
  },
  {
    "text": "slide so you will be able to use this",
    "start": "2016000",
    "end": "2020960"
  },
  {
    "text": "okay so that's i mean that's how we do the",
    "start": "2022080",
    "end": "2027919"
  },
  {
    "text": "log how does that come out in the wash",
    "start": "2027919",
    "end": "2033120"
  },
  {
    "text": "so here's a um an example of",
    "start": "2033120",
    "end": "2038240"
  },
  {
    "text": "using this so i happen to put a dependency around it again",
    "start": "2038240",
    "end": "2043840"
  },
  {
    "text": "a bit of a pattern here that i like using that application insights",
    "start": "2043840",
    "end": "2048878"
  },
  {
    "text": "telemetry to be able to know what's going on and then i just need to await a perform while",
    "start": "2048879",
    "end": "2056079"
  },
  {
    "text": "locked what i'm doing is i'm updating one of those cities based on",
    "start": "2056079",
    "end": "2062320"
  },
  {
    "text": "someone telling me how much the population is changing based on the population model being updated",
    "start": "2062320",
    "end": "2068398"
  },
  {
    "text": "they just work out how many more kangaroo more or less kangaroos there are how many more or",
    "start": "2068399",
    "end": "2073839"
  },
  {
    "text": "less humans and how many more or less zombies and we're about to write that back to the database",
    "start": "2073839",
    "end": "2080158"
  },
  {
    "text": "so what do we do we go and get the city so we read it then we go and make the adjustments",
    "start": "2080159",
    "end": "2087520"
  },
  {
    "text": "and then at the end we update the city and we pass in a lock token",
    "start": "2087520",
    "end": "2094560"
  },
  {
    "text": "and you'll notice this is just a nice little method inline method",
    "start": "2094560",
    "end": "2100880"
  },
  {
    "text": "if you're doing something big maybe that wouldn't be what you would want to do okay so let's",
    "start": "2100880",
    "end": "2107200"
  },
  {
    "text": "have a look at what we do to check the with that lock token",
    "start": "2107200",
    "end": "2113760"
  },
  {
    "text": "so again i've got a dependency the nice little bit here is",
    "start": "2113760",
    "end": "2119520"
  },
  {
    "text": "i do an if logtoken.getid equalscity.name so in other words i know the id is",
    "start": "2119520",
    "end": "2126079"
  },
  {
    "text": "supposed to be the name of the city so if i'm given a lock token that doesn't match the city i've been told to",
    "start": "2126079",
    "end": "2133040"
  },
  {
    "text": "update i throw a locking exception saying you tried to write to the wrong city",
    "start": "2133040",
    "end": "2138720"
  },
  {
    "text": "effectively and otherwise i just upset the item in cosmos",
    "start": "2138720",
    "end": "2145640"
  },
  {
    "text": "okay so let's come back",
    "start": "2149760",
    "end": "2155280"
  },
  {
    "start": "2155000",
    "end": "2155000"
  },
  {
    "text": "let's compare that to sql server in sql server you do this in a transaction",
    "start": "2155920",
    "end": "2161760"
  },
  {
    "text": "and you have to set the isolation level correctly or things won't work as you expect so let's go back to the code and",
    "start": "2161760",
    "end": "2169119"
  },
  {
    "text": "have a quick look at the exact same code but written in sql server",
    "start": "2169119",
    "end": "2176640"
  },
  {
    "text": "so you'll see i've got a bin transaction that looks very much like the the",
    "start": "2176640",
    "end": "2182079"
  },
  {
    "text": "code i wrote to do the log so it's basically a transaction",
    "start": "2182079",
    "end": "2188000"
  },
  {
    "text": "and a try catch and we just step through until we get to",
    "start": "2188000",
    "end": "2194640"
  },
  {
    "text": "the commit and we're doing this with ef cores so we",
    "start": "2194640",
    "end": "2200320"
  },
  {
    "text": "we've got a save changes in there and then commit them",
    "start": "2200320",
    "end": "2205440"
  },
  {
    "text": "so i think this code is probably about as readable as what",
    "start": "2207920",
    "end": "2215200"
  },
  {
    "text": "we ended up with in the cosmos example where back one",
    "start": "2215200",
    "end": "2221359"
  },
  {
    "text": "whoops here it looks we've just got a",
    "start": "2222560",
    "end": "2229599"
  },
  {
    "text": "wrapper and then we go and do the the work and then it magically works",
    "start": "2229599",
    "end": "2234800"
  },
  {
    "text": "if we were concerned we might put a a um an exception handle around this",
    "start": "2234800",
    "end": "2241200"
  },
  {
    "text": "just in case the transaction takes too long",
    "start": "2241200",
    "end": "2246240"
  },
  {
    "text": "okay so we're about to finish up that section um",
    "start": "2250720",
    "end": "2257119"
  },
  {
    "text": "so i've just noticed chris has a question in the chat so i'll just answer",
    "start": "2257119",
    "end": "2262560"
  },
  {
    "text": "that so the question is for a simple plus minus operation on a document like that",
    "start": "2262560",
    "end": "2268720"
  },
  {
    "text": "does cosmos tv not offering an isolated and atomic addition subtraction like",
    "start": "2268720",
    "end": "2274720"
  },
  {
    "text": "that i don't remember that it does basically",
    "start": "2274720",
    "end": "2280320"
  },
  {
    "text": "um cosmos is a document db it's not a um a traditional database",
    "start": "2280320",
    "end": "2287280"
  },
  {
    "text": "which is why it wouldn't support that there may be operations in the javascript library",
    "start": "2287280",
    "end": "2294000"
  },
  {
    "text": "the [Music] server side stuff that lets you do so",
    "start": "2294000",
    "end": "2299359"
  },
  {
    "text": "but that's a really contrived example that i'm doing there that if you're wanting to do something far",
    "start": "2299359",
    "end": "2305760"
  },
  {
    "text": "more complicated as in the example where with a client where were you",
    "start": "2305760",
    "end": "2312240"
  },
  {
    "text": "doing something much more complicated than that we couldn't do that on the server side",
    "start": "2312240",
    "end": "2320160"
  },
  {
    "text": "does that answer the question chris",
    "start": "2321119",
    "end": "2325960"
  },
  {
    "text": "okay so let's see how this performed",
    "start": "2330800",
    "end": "2336720"
  },
  {
    "text": "so what i've got here is a few of the the um app insights",
    "start": "2337920",
    "end": "2343680"
  },
  {
    "text": "i've done a chart over because i've left this running under load for a few days",
    "start": "2343680",
    "end": "2351520"
  },
  {
    "text": "so what are we seeing here so this is the top level calculate and what it's telling me is",
    "start": "2351520",
    "end": "2358480"
  },
  {
    "text": "for the 100 cities i've picked how long did it take to execute",
    "start": "2358480",
    "end": "2364720"
  },
  {
    "text": "and what we're seeing here is that for sql server it actually took quite a long time",
    "start": "2364960",
    "end": "2371040"
  },
  {
    "text": "but for that simple cosmos code we've written it was pretty quick it took about 300",
    "start": "2371040",
    "end": "2378160"
  },
  {
    "text": "milliseconds president was taking about two and a half seconds",
    "start": "2378160",
    "end": "2384320"
  },
  {
    "text": "to execute on um sql server now",
    "start": "2384320",
    "end": "2390320"
  },
  {
    "text": "let we can drill down a bit but let's have a look at each of this one now",
    "start": "2390320",
    "end": "2398560"
  },
  {
    "text": "is looking at the individual city level so now we're looking",
    "start": "2398560",
    "end": "2403839"
  },
  {
    "text": "at a little bit more detail so we're looking at each individual item in that as we are walking through that list",
    "start": "2403839",
    "end": "2412240"
  },
  {
    "text": "and you'll see that the sequel one is consistently pretty",
    "start": "2412240",
    "end": "2418079"
  },
  {
    "text": "fast the trick is that if core",
    "start": "2418079",
    "end": "2423119"
  },
  {
    "text": "makes it very hard to parallelize them",
    "start": "2423119",
    "end": "2428160"
  },
  {
    "text": "you have to write quite a bit of code and use a db context factory to to create separate contexts",
    "start": "2428160",
    "end": "2436240"
  },
  {
    "text": "for each one of these so it is a slightly",
    "start": "2436240",
    "end": "2442800"
  },
  {
    "text": "more complicated it becomes much more convoluted whereas the cosmos code",
    "start": "2442800",
    "end": "2448720"
  },
  {
    "text": "we're very consistently taking about 200 milliseconds which for that sort of",
    "start": "2448720",
    "end": "2454400"
  },
  {
    "text": "operation is pretty good really",
    "start": "2454400",
    "end": "2458160"
  },
  {
    "text": "so looking in app insights what's happening and",
    "start": "2460960",
    "end": "2466800"
  },
  {
    "text": "app insights convinces us that what i was um",
    "start": "2466800",
    "end": "2471839"
  },
  {
    "text": "suggesting is probably correct so here we are we're doing the cosmos calculate which is what we were graphing there the",
    "start": "2471839",
    "end": "2479599"
  },
  {
    "text": "milliseconds and what it does is it goes and gets the",
    "start": "2479599",
    "end": "2484720"
  },
  {
    "text": "cities it takes about 13 milliseconds to do that so reads the whole list up front",
    "start": "2484720",
    "end": "2492720"
  },
  {
    "text": "then you can calculate for a city",
    "start": "2492720",
    "end": "2497359"
  },
  {
    "text": "and the entire calculate city seems to take",
    "start": "2497760",
    "end": "2503280"
  },
  {
    "text": "the same length of time as the lock that's pretty much expected everything",
    "start": "2503280",
    "end": "2508560"
  },
  {
    "text": "we're doing in that method is inside the lock so it takes us two milliseconds to",
    "start": "2508560",
    "end": "2513680"
  },
  {
    "text": "acquire it three milliseconds to release it and that's pretty consistent if we look over",
    "start": "2513680",
    "end": "2520720"
  },
  {
    "text": "a number of things and that was pretty consistent across all of the data",
    "start": "2520720",
    "end": "2527119"
  },
  {
    "text": "so it's really fast to acquire a lock and it's really fast to release a lock",
    "start": "2527119",
    "end": "2533119"
  },
  {
    "text": "you can also tell that there wasn't that much contention even though there was",
    "start": "2533119",
    "end": "2539839"
  },
  {
    "text": "the occasional collision you really didn't blow out the execution time at all",
    "start": "2539839",
    "end": "2547440"
  },
  {
    "text": "uh so i get cities the read from cosmos takes about 50 milliseconds and it takes",
    "start": "2547440",
    "end": "2553359"
  },
  {
    "text": "about 90 milliseconds to write stuff back so i mean it's reasonable performance",
    "start": "2553359",
    "end": "2559280"
  },
  {
    "text": "it's not earth shattering performance but good solid performance for a document",
    "start": "2559280",
    "end": "2565359"
  },
  {
    "text": "database like cosmos whereas let's look at the sql server",
    "start": "2565359",
    "end": "2573359"
  },
  {
    "text": "and you can see very clearly from this that we've got something that's not",
    "start": "2573359",
    "end": "2579040"
  },
  {
    "text": "occurring in parallel it's taking about 24 milliseconds",
    "start": "2579040",
    "end": "2585520"
  },
  {
    "text": "to do each city and",
    "start": "2585520",
    "end": "2590640"
  },
  {
    "text": "but it's having to do them one after another and that's why it's slower",
    "start": "2590839",
    "end": "2597520"
  },
  {
    "text": "so reading that i would be thinking well do i care about it taking that long or",
    "start": "2598240",
    "end": "2606240"
  },
  {
    "text": "am i happy to wait and you know keep my code simple",
    "start": "2606240",
    "end": "2612640"
  },
  {
    "text": "at least with the cosmos one i didn't even have to think about it it was just dead simple to write",
    "start": "2612640",
    "end": "2619200"
  },
  {
    "text": "in parallel",
    "start": "2619200",
    "end": "2621838"
  },
  {
    "text": "okay so what can we do next so",
    "start": "2624880",
    "end": "2630800"
  },
  {
    "text": "to start with all of the code from this demo is available in that",
    "start": "2630800",
    "end": "2636319"
  },
  {
    "text": "github repository and i'll drop that in the room 2 chat just after this session",
    "start": "2636319",
    "end": "2645520"
  },
  {
    "start": "2647000",
    "end": "2647000"
  },
  {
    "text": "but let's talk about locking in general the example here",
    "start": "2647760",
    "end": "2653280"
  },
  {
    "text": "which was contrived is cosmos but it does that is based on a real-life",
    "start": "2653280",
    "end": "2659119"
  },
  {
    "text": "use case of needing to lock records in cosmos but there are many many more use cases",
    "start": "2659119",
    "end": "2666240"
  },
  {
    "text": "for distributed locking like this and the demo here just shows how you can",
    "start": "2666240",
    "end": "2673280"
  },
  {
    "text": "extract that and make it very easy to execute stuff with locking",
    "start": "2673280",
    "end": "2680400"
  },
  {
    "text": "and do it nicely so you don't have large amounts of boilerplate because the the real problem i saw with",
    "start": "2680400",
    "end": "2686960"
  },
  {
    "text": "this was that there was so much boilerplate writing all of this and then",
    "start": "2686960",
    "end": "2692880"
  },
  {
    "text": "i hope you can learn a bit about making this very debuggable using application insights",
    "start": "2692880",
    "end": "2699920"
  },
  {
    "text": "and then this is a plug for two of the other talks today um",
    "start": "2700079",
    "end": "2706160"
  },
  {
    "text": "jk or jennifer kafka is doing a talk on ef core i think that's in the session after",
    "start": "2706160",
    "end": "2713040"
  },
  {
    "text": "this so he would what he'll show you is how you could",
    "start": "2713040",
    "end": "2718960"
  },
  {
    "text": "improve that sql server performance there by knowing some of the the tips and techniques",
    "start": "2718960",
    "end": "2725760"
  },
  {
    "text": "and then from the all of the deployment for this",
    "start": "2725760",
    "end": "2731280"
  },
  {
    "text": "application here was done in bicep and william liebenberg",
    "start": "2731280",
    "end": "2736800"
  },
  {
    "text": "is doing a talk on how to get started with bicep and i think you hope you'll all find that very",
    "start": "2736800",
    "end": "2742880"
  },
  {
    "text": "interesting as well so it looks like there's not too many questions i will hang around in case",
    "start": "2742880",
    "end": "2748000"
  },
  {
    "text": "anyone wants to ask a question regardless of whether it's about",
    "start": "2748000",
    "end": "2753839"
  },
  {
    "text": "this or more detail about cosmos or whatever and thank you for your time",
    "start": "2753839",
    "end": "2761839"
  }
]