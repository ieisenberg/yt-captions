[
  {
    "start": "0",
    "end": "442000"
  },
  {
    "text": "it's 11 40. let's get started uh welcome everyone thank you for joining this session",
    "start": "80",
    "end": "6160"
  },
  {
    "text": "about git let's just jump into it because i have a lot of",
    "start": "6160",
    "end": "12320"
  },
  {
    "text": "stuff to show you guys so first my name is enrico campidoglio i'm a freelancer here is me freelancing from",
    "start": "12320",
    "end": "20080"
  },
  {
    "text": "home i also do a fair bit of training like yeah workshops conference conference",
    "start": "20080",
    "end": "25599"
  },
  {
    "text": "talks pre-outside courses stuff like that and these days everything is done from home who would have thought",
    "start": "25599",
    "end": "32320"
  },
  {
    "text": "the other thing to know about me is that i am really passionate about git of all things and i'm also",
    "start": "32320",
    "end": "40320"
  },
  {
    "text": "really passionate about keywords but that's another story for our time however feel free to ping me if you also",
    "start": "40320",
    "end": "47360"
  },
  {
    "text": "share this interest in either git or keyboards anyway so let's talk about it about it",
    "start": "47360",
    "end": "55760"
  },
  {
    "text": "shall we by the way everything that i do that has to do with git",
    "start": "55760",
    "end": "61199"
  },
  {
    "text": "i tend to write on my website which i'll give you a link for",
    "start": "61199",
    "end": "66479"
  },
  {
    "text": "afterwards okay so the thing with git is everybody is using",
    "start": "66479",
    "end": "73200"
  },
  {
    "text": "it these days uh that's no surprise it has become the de facto standard version control for everyone however",
    "start": "73200",
    "end": "81520"
  },
  {
    "text": "um you may or may not have noticed that while everyone including me is busy",
    "start": "81520",
    "end": "88320"
  },
  {
    "text": "telling you how git works um internally nobody is really focusing on how you",
    "start": "88320",
    "end": "96000"
  },
  {
    "text": "should actually use it on your day-to-day work so to give you a",
    "start": "96000",
    "end": "101280"
  },
  {
    "text": "metaphor imagine if you are learning to play an instrument like for example the piano",
    "start": "101280",
    "end": "106960"
  },
  {
    "text": "and you know everything about how the piano works everything from the ground up and you",
    "start": "106960",
    "end": "113759"
  },
  {
    "text": "maybe know each individual note but then you don't know how to play a full song",
    "start": "113759",
    "end": "118880"
  },
  {
    "text": "with it so yeah that doesn't really cut it so what we need is guidance",
    "start": "118880",
    "end": "126479"
  },
  {
    "text": "okay guidance on how to use this fantastic tool called git but wait a minute you say and",
    "start": "126479",
    "end": "133280"
  },
  {
    "text": "i can almost hear you from here do i need guidance to use a source",
    "start": "133280",
    "end": "139200"
  },
  {
    "text": "control system i mean i'm a software developer i know how to check in and check out code",
    "start": "139200",
    "end": "144560"
  },
  {
    "text": "and yeah you will be right after all if you've been using any of the many other source control",
    "start": "144560",
    "end": "151360"
  },
  {
    "text": "systems out there like for example cvs perforce or everybody's favorite tfs you should",
    "start": "151360",
    "end": "159360"
  },
  {
    "text": "pretty much know how to use a source control system so why in the world would you need guidance",
    "start": "159360",
    "end": "165280"
  },
  {
    "text": "on how to use git which after all is a source control system or",
    "start": "165280",
    "end": "170800"
  },
  {
    "text": "is it because the thing with git is that git is actually not",
    "start": "170800",
    "end": "177519"
  },
  {
    "text": "a source control system from the beginning if you look in the manual git is",
    "start": "177519",
    "end": "185200"
  },
  {
    "text": "actually a content tracker also a stupid one because it's embarrassing simple",
    "start": "185200",
    "end": "192560"
  },
  {
    "text": "so git is all about tracking the changes that happen to files on your hard disk",
    "start": "192560",
    "end": "200640"
  },
  {
    "text": "it's not really a source control system it looks and acts like one but it's not really it",
    "start": "200640",
    "end": "206799"
  },
  {
    "text": "at the at the basic level so it also means that git doesn't really",
    "start": "206799",
    "end": "213519"
  },
  {
    "text": "have an opinion on how you use it while all the other source control systems before by virtue of how they were",
    "start": "213519",
    "end": "220879"
  },
  {
    "text": "designed they were pretty much forcing you to be to use them in a certain way",
    "start": "220879",
    "end": "227760"
  },
  {
    "text": "git is more like uh lego in the sense that it's whatever you make",
    "start": "227760",
    "end": "233519"
  },
  {
    "text": "of it there is no one true way to use git like there is no true one way",
    "start": "233519",
    "end": "239599"
  },
  {
    "text": "to use lego i mean after you've gone after after you learn the basics of putting two pieces together",
    "start": "239599",
    "end": "245120"
  },
  {
    "text": "it's whatever you make of it so git is a very flexible tool which also means that you can use it",
    "start": "245120",
    "end": "252799"
  },
  {
    "text": "however it fits you and here is where the other problem lies",
    "start": "252799",
    "end": "258320"
  },
  {
    "text": "okay so you are telling me that git is can be used in pretty much any way i want but how do i know",
    "start": "258320",
    "end": "266080"
  },
  {
    "text": "which way i want to use it and here is where things get a bit",
    "start": "266080",
    "end": "271120"
  },
  {
    "text": "tricky so what you can do is observe how",
    "start": "271120",
    "end": "276560"
  },
  {
    "text": "other people are using git how it's working for them both individually",
    "start": "276560",
    "end": "283199"
  },
  {
    "text": "as well as in their projects like working with other people so how how are other teams using git",
    "start": "283199",
    "end": "291120"
  },
  {
    "text": "and what works and what doesn't work and once you observe all these things you",
    "start": "291120",
    "end": "297040"
  },
  {
    "text": "write them down which is exactly what i've been doing and you up so i applied that knowledge to",
    "start": "297040",
    "end": "303600"
  },
  {
    "text": "your own experience and in that way you sort of grow the way to use git that fits your needs",
    "start": "303600",
    "end": "311280"
  },
  {
    "text": "and the needs of your team and the project so with all that out of the way what",
    "start": "311280",
    "end": "319039"
  },
  {
    "text": "is this talk about this stock is a collection of",
    "start": "319039",
    "end": "325520"
  },
  {
    "text": "git habits so to speak that are aimed at improving your",
    "start": "325520",
    "end": "331840"
  },
  {
    "text": "development workflow and these habits i have collected them by many years now of observing how",
    "start": "331840",
    "end": "339759"
  },
  {
    "text": "people are using git and what works and what works maybe",
    "start": "339759",
    "end": "344880"
  },
  {
    "text": "less and these habits they apply on two levels because",
    "start": "344880",
    "end": "351759"
  },
  {
    "text": "git you i'm sure you know is a distributed source control system which means it has always two dimensions",
    "start": "351759",
    "end": "360080"
  },
  {
    "text": "you use with you use it on your own computer individually and that's one dimension and and then",
    "start": "360080",
    "end": "366400"
  },
  {
    "text": "you use it in the context of a development project and that that's when you use it inside of a team when you're collaborating with",
    "start": "366400",
    "end": "373199"
  },
  {
    "text": "others so all these habits they start with you",
    "start": "373199",
    "end": "378319"
  },
  {
    "text": "sitting on your computer and then they expand and they expand into the collaboration",
    "start": "378319",
    "end": "384080"
  },
  {
    "text": "aspect so that's how i organized all everything that i'm going to show you in this stock",
    "start": "384080",
    "end": "390400"
  },
  {
    "text": "falls in either one of those two categories so let's get started shall we",
    "start": "390400",
    "end": "397600"
  },
  {
    "text": "i talk way too much so i told you that there is an individual dimension for",
    "start": "397600",
    "end": "403600"
  },
  {
    "text": "using it and i call that dimension personal workflows the collaboration aspect of git i call",
    "start": "403600",
    "end": "410880"
  },
  {
    "text": "them team workflows so these are the two main pillars for this talk and to give you a little bit more",
    "start": "410880",
    "end": "417120"
  },
  {
    "text": "structure i organized my content in three categories of workflows that you can use",
    "start": "417120",
    "end": "425199"
  },
  {
    "text": "individually and three categories of workflows that apply to your team and they sort of",
    "start": "425199",
    "end": "432080"
  },
  {
    "text": "build on each other so without further ado let's get started with the first one",
    "start": "432080",
    "end": "439039"
  },
  {
    "text": "and for that i'm gonna jump right over into dem mode so what you see",
    "start": "439039",
    "end": "446080"
  },
  {
    "start": "442000",
    "end": "766000"
  },
  {
    "text": "on the uh left side which is here which might as well be your right side",
    "start": "446080",
    "end": "452560"
  },
  {
    "text": "i'm not really sure how this mirroring works anyway on one side there is a console terminal and",
    "start": "452560",
    "end": "460560"
  },
  {
    "text": "on the other side is where i'm going to show you the text for what i'm trying to tell you so",
    "start": "460560",
    "end": "468080"
  },
  {
    "text": "keep an eye on both those two and so what somebody wondering are you telling me",
    "start": "468080",
    "end": "474240"
  },
  {
    "text": "that everything that i'm going to look at today is applies only",
    "start": "474240",
    "end": "479280"
  },
  {
    "text": "to the command line well no what i'm going to show you up most of it applies just as well to",
    "start": "479280",
    "end": "486639"
  },
  {
    "text": "both the command line as well as the if you're using it through any of the many",
    "start": "486639",
    "end": "492639"
  },
  {
    "text": "graphical user interfaces out there and if there is something that just applies to the command line i'm going to",
    "start": "492639",
    "end": "499199"
  },
  {
    "text": "highlight it for you so let's get started with the first category",
    "start": "499199",
    "end": "504319"
  },
  {
    "text": "of a personal workflows and that is get comfortable",
    "start": "504319",
    "end": "510479"
  },
  {
    "text": "so what does this mean this means that you should configure git exactly to make it a more",
    "start": "510479",
    "end": "518479"
  },
  {
    "text": "comfortable tool to work with and in this first category and this",
    "start": "518479",
    "end": "524159"
  },
  {
    "text": "applies just if you're using it on the command prompt is to install a git aware prompt now",
    "start": "524159",
    "end": "531200"
  },
  {
    "text": "what in the world is that a gitaware prompt is simply an a script or a some kind of",
    "start": "531200",
    "end": "539200"
  },
  {
    "text": "utility that enriches your command line",
    "start": "539200",
    "end": "544880"
  },
  {
    "text": "and and adds information that is git specific so for example you see over here",
    "start": "544880",
    "end": "551040"
  },
  {
    "text": "that i'm for example here i'm looking at the name of the branch i'm on",
    "start": "551040",
    "end": "556080"
  },
  {
    "text": "and as you see later throughout this talk um that information is updated as i modify",
    "start": "556080",
    "end": "562080"
  },
  {
    "text": "files and i pull changes and push changes and stuff like that so having that information",
    "start": "562080",
    "end": "567839"
  },
  {
    "text": "right in front of you at all times certainly helps now what prompt should",
    "start": "567839",
    "end": "572880"
  },
  {
    "text": "you install well that depends on which operating system you're on if you're using windows and maybe you're",
    "start": "572880",
    "end": "580480"
  },
  {
    "text": "using the new windows terminal and you're using powershell as your",
    "start": "580480",
    "end": "585760"
  },
  {
    "text": "shell then i highly recommend that you install poshgit which is a gitaware prompt",
    "start": "585760",
    "end": "590959"
  },
  {
    "text": "for of course a powershell if you're using linux then there is bash git prompt which is",
    "start": "590959",
    "end": "597839"
  },
  {
    "text": "everything is open source of course and then there is my personal favorite starship which is the one",
    "start": "597839",
    "end": "604160"
  },
  {
    "text": "you are looking at over here and starship is cross-platform so you can use it",
    "start": "604160",
    "end": "609600"
  },
  {
    "text": "everywhere so that's the first one the second one is i call it pretty diffs",
    "start": "609600",
    "end": "617600"
  },
  {
    "text": "now and this also applies only to the command line because if you're using a gui then that's the the thing that's going to",
    "start": "617600",
    "end": "624480"
  },
  {
    "text": "show you the diffs so um when you use git you're going to",
    "start": "624480",
    "end": "630079"
  },
  {
    "text": "look at a lot of patches differences between two versions of the same file",
    "start": "630079",
    "end": "636560"
  },
  {
    "text": "now there is no reason why you shouldn't make it as pretty as possible so for example",
    "start": "636560",
    "end": "643760"
  },
  {
    "text": "let let me um well let's go let's go ahead and i'm going to tell you right away what what it is i",
    "start": "644079",
    "end": "650399"
  },
  {
    "text": "want to say so there is an mpm module which is called diff so fancy",
    "start": "650399",
    "end": "658079"
  },
  {
    "text": "which you can install like but like say by saying npn install does g diff so fancy g for global",
    "start": "658079",
    "end": "665839"
  },
  {
    "text": "once you've done that you need to tell git to pipe all the diff information through diffs",
    "start": "665839",
    "end": "672480"
  },
  {
    "text": "of fancy before it gets printed on the screen and the way you do that is by setting the core dot",
    "start": "672480",
    "end": "678320"
  },
  {
    "text": "pager option so here you're basically saying to git all diff information should",
    "start": "678320",
    "end": "684880"
  },
  {
    "text": "be piped through dips of fancy and then of course it pipes it to less to give you paging and the",
    "start": "684880",
    "end": "691040"
  },
  {
    "text": "ability to scroll up and down now once you've done that your divs are",
    "start": "691040",
    "end": "696079"
  },
  {
    "text": "going to look much better than before so to demonstrate this to you let me first compare",
    "start": "696079",
    "end": "703920"
  },
  {
    "text": "the commit that came before the one i'm currently on",
    "start": "703920",
    "end": "709600"
  },
  {
    "text": "with the one i'm on right now and now i have already gives configured fancy so",
    "start": "709600",
    "end": "715760"
  },
  {
    "text": "i'm going to take it to ignore the pager right now to just show me how a regular diff would",
    "start": "715760",
    "end": "721279"
  },
  {
    "text": "look like and of course you know you recognize this format you have a bunch of other information",
    "start": "721279",
    "end": "728720"
  },
  {
    "text": "over here and then you have the classic plus and minus for modified lines now this is",
    "start": "728720",
    "end": "735360"
  },
  {
    "text": "fine for most cases but we can do better so here is how it looks like",
    "start": "735360",
    "end": "742800"
  },
  {
    "text": "once you have diffs of fancy activated which of course i mean it's obviously",
    "start": "742800",
    "end": "749680"
  },
  {
    "text": "much better it also shows you exactly which part of a line",
    "start": "749680",
    "end": "755440"
  },
  {
    "text": "has been modified between two versions by highlighting it for you over here",
    "start": "755440",
    "end": "762240"
  },
  {
    "text": "so yeah definitely prettier divs moving on speaking of making your",
    "start": "762240",
    "end": "769760"
  },
  {
    "start": "766000",
    "end": "905000"
  },
  {
    "text": "environment comfortable is to let git handle white space for you",
    "start": "769760",
    "end": "775120"
  },
  {
    "text": "now as programmers will know that white space matters while it turns out that git has built-in",
    "start": "775120",
    "end": "781680"
  },
  {
    "text": "features to make sure that your team once you're agreed upon how you want to",
    "start": "781680",
    "end": "788480"
  },
  {
    "text": "for example handle indentation to make sure that everybody on your team is conforming to the agreed upon",
    "start": "788480",
    "end": "795760"
  },
  {
    "text": "white space handling rules so how do you do that well there is an",
    "start": "795760",
    "end": "800959"
  },
  {
    "text": "option called core dot white space and in this option you are basically telling it what it",
    "start": "800959",
    "end": "808240"
  },
  {
    "text": "should consider to be invalid white space so in this case core",
    "start": "808240",
    "end": "816720"
  },
  {
    "text": "dot white space in this case i'm telling it that i don't want any white space at the end of a line",
    "start": "816720",
    "end": "825519"
  },
  {
    "text": "and i don't want any white space at the end of a file either and of course my favorite one is that i",
    "start": "825519",
    "end": "832160"
  },
  {
    "text": "don't want to see any tabs used for indentation only spaces",
    "start": "832160",
    "end": "837199"
  },
  {
    "text": "which of course everybody knows is the correct way to do indentation right so once you've done that you can",
    "start": "837199",
    "end": "844480"
  },
  {
    "text": "basically every time you modify your files you can do a quick check using the check",
    "start": "844480",
    "end": "850240"
  },
  {
    "text": "option of git tiff and git will tell you if you are breaking any of those rules",
    "start": "850240",
    "end": "855680"
  },
  {
    "text": "so for example let me open up this this is just a c-sharp program that does basically nothing so",
    "start": "855680",
    "end": "862320"
  },
  {
    "text": "let's change something and add a bunch of white space so maybe i'm adding a comment over here and then",
    "start": "862320",
    "end": "870240"
  },
  {
    "text": "at the end of the line i add a bunch of white space in the end so let's save this",
    "start": "870240",
    "end": "878160"
  },
  {
    "text": "and if i now say git if check git is telling me hey you have trailing",
    "start": "878160",
    "end": "884880"
  },
  {
    "text": "white space and it even tells me on which line so with this gives me",
    "start": "884880",
    "end": "891360"
  },
  {
    "text": "the option to fix it before i commit it and as you're gonna see later on you can",
    "start": "891360",
    "end": "897040"
  },
  {
    "text": "also automate this step so and you don't have to remember to uh every time run div check",
    "start": "897040",
    "end": "904959"
  },
  {
    "start": "905000",
    "end": "1131000"
  },
  {
    "text": "so the next one is conflict handling now of course if you",
    "start": "905199",
    "end": "910880"
  },
  {
    "text": "are working in a team you are sooner or later gonna run into",
    "start": "910880",
    "end": "916639"
  },
  {
    "text": "merge conflicts they are just a fact of life now git is famous for being very good at handling",
    "start": "916639",
    "end": "924079"
  },
  {
    "text": "merge conflicts and why what because it's a distributed source control system",
    "start": "924079",
    "end": "929279"
  },
  {
    "text": "where everybody is working asynchronously so the chances that you are going to have merge conflicts",
    "start": "929279",
    "end": "934959"
  },
  {
    "text": "are even higher than if you had a traditional centralized source control system where",
    "start": "934959",
    "end": "940079"
  },
  {
    "text": "for example you have exclusive checkout rules where only one person at a time can modify a",
    "start": "940079",
    "end": "946320"
  },
  {
    "text": "file so let me just get rid of the change so",
    "start": "946320",
    "end": "954000"
  },
  {
    "text": "what can you do well uh the default way of showing you merge",
    "start": "954000",
    "end": "960160"
  },
  {
    "text": "conflict and this applies both to the command line and as well as if you're using a gui is",
    "start": "960160",
    "end": "965680"
  },
  {
    "text": "to show you each side of the of the merge conflict so in this example i have a another branch called feature",
    "start": "965680",
    "end": "974240"
  },
  {
    "text": "and i know for a fact that this branch contains a merge conflict so let's go ahead and try to merge",
    "start": "974240",
    "end": "981839"
  },
  {
    "text": "feature into master and here we go we are having a merge conflict so let's take a look",
    "start": "981839",
    "end": "990480"
  },
  {
    "text": "at how the diff looks like and of course you recognize this you see how the conflicting line looks like on",
    "start": "990480",
    "end": "998079"
  },
  {
    "text": "one side of the of the conflict and then you see it how it looks like on the other side",
    "start": "998079",
    "end": "1005199"
  },
  {
    "text": "sometimes this is enough to be able to decide what the final line should look like however",
    "start": "1005199",
    "end": "1013519"
  },
  {
    "text": "git can do better than that there is an option which is called conflict style and if",
    "start": "1013680",
    "end": "1020079"
  },
  {
    "text": "you set it to diff 3 git is going to activate its three-way merge feature",
    "start": "1020079",
    "end": "1028319"
  },
  {
    "text": "which is absolutely the best so let's do it config merge dot i don't",
    "start": "1028319",
    "end": "1034319"
  },
  {
    "text": "know why this is not the default by the way beats me conflict style",
    "start": "1034319",
    "end": "1040000"
  },
  {
    "text": "you set it to d3 and now let's do the same merge again",
    "start": "1040000",
    "end": "1047438"
  },
  {
    "text": "oh sorry i was in the middle of the other merge so let's abort that and let's merge feature again",
    "start": "1048559",
    "end": "1056320"
  },
  {
    "text": "of course we're getting the same conflict so let's take a look at how the div looks like and now i have three versions of the",
    "start": "1056320",
    "end": "1064160"
  },
  {
    "text": "line i have the one side and the other side like i did before but now i have the common ancestor",
    "start": "1064160",
    "end": "1073360"
  },
  {
    "text": "which is how did this line look like before either one of those two commits so this",
    "start": "1073360",
    "end": "1079919"
  },
  {
    "text": "is really helpful in deciding okay how did the common parent of those two commits how did the line",
    "start": "1079919",
    "end": "1086080"
  },
  {
    "text": "look like in that one and how how was it modified in the two conflict in um",
    "start": "1086080",
    "end": "1093280"
  },
  {
    "text": "commits so this is information that is going to help you",
    "start": "1093280",
    "end": "1099280"
  },
  {
    "text": "resolve the merge conflict so really awesome stuff enable it",
    "start": "1099280",
    "end": "1106080"
  },
  {
    "text": "because yeah it's it's great",
    "start": "1106080",
    "end": "1111039"
  },
  {
    "text": "the uh this concludes the first part of category of",
    "start": "1111200",
    "end": "1117919"
  },
  {
    "text": "personal workflow of configuring these are just a few of the options there are many more",
    "start": "1117919",
    "end": "1123360"
  },
  {
    "text": "but these are just few of the options that you can enable to make git a more effective tool to",
    "start": "1123360",
    "end": "1129280"
  },
  {
    "text": "work with let's switch gear and talk about the second",
    "start": "1129280",
    "end": "1135440"
  },
  {
    "start": "1131000",
    "end": "1291000"
  },
  {
    "text": "thing regarding personal workflows which is craft your history now",
    "start": "1135440",
    "end": "1142640"
  },
  {
    "text": "this is regardless if you are working on a project by yourself or you're working in a team however if",
    "start": "1142640",
    "end": "1148320"
  },
  {
    "text": "it's on a team it's even more important is to take care of ensuring that your",
    "start": "1148320",
    "end": "1154799"
  },
  {
    "text": "the history of your source code is readable not only by you but of course by your",
    "start": "1154799",
    "end": "1160880"
  },
  {
    "text": "teammates and future generations of programmers are gonna have to work on the code base now",
    "start": "1160880",
    "end": "1168080"
  },
  {
    "text": "what does it mean to have a good looking history again by observing uh how many different",
    "start": "1168080",
    "end": "1175440"
  },
  {
    "text": "teams work with git and in different kinds of projects i have identified four",
    "start": "1175440",
    "end": "1182400"
  },
  {
    "text": "traits of a good looking history",
    "start": "1182400",
    "end": "1188240"
  },
  {
    "text": "and those four traits make up the acronym acid so is nice and easy to remember",
    "start": "1188880",
    "end": "1196480"
  },
  {
    "text": "so the first one the a stands for autonomous and this means that each commit",
    "start": "1196480",
    "end": "1203679"
  },
  {
    "text": "should make one logical change doesn't mean that it's one physical change i mean of course you can have",
    "start": "1203679",
    "end": "1210080"
  },
  {
    "text": "many modified files in a commit but all those changes must be related",
    "start": "1210080",
    "end": "1215440"
  },
  {
    "text": "to the same thing to the same goal and that should be independent from what",
    "start": "1215440",
    "end": "1221600"
  },
  {
    "text": "other commits do now to do this you can there are two",
    "start": "1221600",
    "end": "1228159"
  },
  {
    "text": "ways to do this way number one is that as you're working on your source code",
    "start": "1228159",
    "end": "1234159"
  },
  {
    "text": "you are really disciplined and you do just one thing at a time for example",
    "start": "1234159",
    "end": "1239600"
  },
  {
    "text": "if you are fixing a bug you are not also making a refactoring you fix the bug and then you create a",
    "start": "1239600",
    "end": "1245840"
  },
  {
    "text": "commit and then you go back and do the refactoring so by being really disciplined at all times",
    "start": "1245840",
    "end": "1251120"
  },
  {
    "text": "that's one way to make sure that every committee does one thing that's a lot to ask the other way is",
    "start": "1251120",
    "end": "1258320"
  },
  {
    "text": "you work just the way you prefer you do your own thing and then at the",
    "start": "1258320",
    "end": "1264000"
  },
  {
    "text": "time of commit you split your changes so that they are compar",
    "start": "1264000",
    "end": "1269440"
  },
  {
    "text": "they are in different compartments uh so you isolate each logical change from",
    "start": "1269440",
    "end": "1275919"
  },
  {
    "text": "the others how do you do that so let me just change to a different directory here we",
    "start": "1275919",
    "end": "1282559"
  },
  {
    "text": "have the same plot project with the uh the so one source code file code program",
    "start": "1282559",
    "end": "1291840"
  },
  {
    "start": "1291000",
    "end": "1498000"
  },
  {
    "text": "so the first way to do that is by doing a so-called patch commit now",
    "start": "1292000",
    "end": "1299200"
  },
  {
    "text": "and this is something that you can do either on the command line and a lot of the better you get",
    "start": "1299200",
    "end": "1306080"
  },
  {
    "text": "you guys they also let you to let you do this graphically so how do",
    "start": "1306080",
    "end": "1312320"
  },
  {
    "text": "you think on the command line let's say that i'm opening up this source code file which is the same as before and now i",
    "start": "1312320",
    "end": "1319760"
  },
  {
    "text": "am looking at it and i'm seeing that right over here",
    "start": "1319760",
    "end": "1325360"
  },
  {
    "text": "there is a syntax well there is a this doesn't even compile so that was one hell of a bug so there",
    "start": "1325360",
    "end": "1332320"
  },
  {
    "text": "is an error here however while i'm looking at this error i'm also noticing that hey maybe this",
    "start": "1332320",
    "end": "1338320"
  },
  {
    "text": "using statement is and is unused of course i'm not going to let it be there i'm going to remove it so",
    "start": "1338320",
    "end": "1346159"
  },
  {
    "text": "i want to make these two changes and those are two logical different logically different changes",
    "start": "1346159",
    "end": "1351600"
  },
  {
    "text": "because one is a functional change this one over here and the other",
    "start": "1351600",
    "end": "1356960"
  },
  {
    "text": "one is more of a you can call it a refactory i'm removing an unused line of code",
    "start": "1356960",
    "end": "1364640"
  },
  {
    "text": "so i'm not going to do it one at a time i'm going to do both at the same time",
    "start": "1364640",
    "end": "1370240"
  },
  {
    "text": "since i'm working in this file so let's go up to line 10 let's remove this and then let's go to",
    "start": "1370240",
    "end": "1377200"
  },
  {
    "text": "line 9 and let's add the the i that's missing in red line",
    "start": "1377200",
    "end": "1384720"
  },
  {
    "text": "so now if i do git if i see that i have two different changes now i want",
    "start": "1384720",
    "end": "1390559"
  },
  {
    "text": "to commit them separately from each other now if this was any other source control system",
    "start": "1390559",
    "end": "1395679"
  },
  {
    "text": "i will have no choice but commit everything at once in git ike instead of saying git add and",
    "start": "1395679",
    "end": "1401679"
  },
  {
    "text": "then the path of the file i can add the patch option and what kit does it it looks at",
    "start": "1401679",
    "end": "1409840"
  },
  {
    "text": "the total number of changes to diff and it splits them up and it's asking me hey do you want to",
    "start": "1409840",
    "end": "1417360"
  },
  {
    "text": "stage this hunk and here the word hunk doesn't mean what you think it means",
    "start": "1417360",
    "end": "1422559"
  },
  {
    "text": "it means hank in in the universal div format which is a standard a hank is",
    "start": "1422559",
    "end": "1429120"
  },
  {
    "text": "just a section of a patch file so do you want to stage this and then i'm",
    "start": "1429120",
    "end": "1436000"
  },
  {
    "text": "going to say no n for no and then it goes on to the next one and say do you want to stage",
    "start": "1436000",
    "end": "1442480"
  },
  {
    "text": "this hunk and then you say yes with the y and once you've done that you see that",
    "start": "1442480",
    "end": "1448880"
  },
  {
    "text": "my starship git prompt is showing me that i have",
    "start": "1448880",
    "end": "1453919"
  },
  {
    "text": "one staged file and one modified file on my working directory",
    "start": "1453919",
    "end": "1459520"
  },
  {
    "text": "so if i do git status i see that the same file is simultaneously staged and on stage",
    "start": "1459520",
    "end": "1467360"
  },
  {
    "text": "so how do i how can i look like how can i look at what's about to be committed i say giptif states",
    "start": "1467360",
    "end": "1475600"
  },
  {
    "text": "and this is showing me the stuff that i've staged which is the bug fix",
    "start": "1475600",
    "end": "1481039"
  },
  {
    "text": "and if i say just kid if it's showing me what's left in the working directory which is not going to be",
    "start": "1481039",
    "end": "1487279"
  },
  {
    "text": "committed so pretty useful stuff and as i said you can do this through",
    "start": "1487279",
    "end": "1493200"
  },
  {
    "text": "many of the the better the more powerful git gui's out there",
    "start": "1493200",
    "end": "1499440"
  },
  {
    "start": "1498000",
    "end": "1764000"
  },
  {
    "text": "the next one in the acid acronym is correct now what does it mean it means that",
    "start": "1499440",
    "end": "1505279"
  },
  {
    "text": "every individual commit should not break the state of your project",
    "start": "1505279",
    "end": "1510640"
  },
  {
    "text": "that means you should not add any compilation errors nor should it add any failing tests",
    "start": "1510640",
    "end": "1518640"
  },
  {
    "text": "but how do you ensure that every individual commit doesn't break things and by the way why",
    "start": "1518640",
    "end": "1525520"
  },
  {
    "text": "would you want to do that well if you imagine a scenario where in your team you have people working on",
    "start": "1525520",
    "end": "1531520"
  },
  {
    "text": "multiple branches and maybe one of your co-workers has working on a is working on a feature branch and is",
    "start": "1531520",
    "end": "1539360"
  },
  {
    "text": "also at the same time fixing a bug that you also have on your branch",
    "start": "1539360",
    "end": "1544880"
  },
  {
    "text": "maybe you want to just pick that one commit because every commit is",
    "start": "1544880",
    "end": "1550400"
  },
  {
    "text": "autonomous you want to pick that one commit that fixes the bug and none of the other commits that add",
    "start": "1550400",
    "end": "1557360"
  },
  {
    "text": "the feature and you want to apply that on your own branch so that you can",
    "start": "1557360",
    "end": "1562400"
  },
  {
    "text": "you know continue working now in order to be able to do that reliably you need to have this",
    "start": "1562400",
    "end": "1569760"
  },
  {
    "text": "common trust in your team that everyone's commits you can apply them to any branch",
    "start": "1569760",
    "end": "1577600"
  },
  {
    "text": "and you won't have to deal with compilation errors or failing tests that's a basic assumption",
    "start": "1577600",
    "end": "1584000"
  },
  {
    "text": "for this to work and if everybody agrees on this then you'll be able to exchange commits with each other and",
    "start": "1584000",
    "end": "1592799"
  },
  {
    "text": "keep on working in a more effective way so the that every committee is correct",
    "start": "1592799",
    "end": "1599039"
  },
  {
    "text": "is a a um is fundamental to being effective when working with others but how do you",
    "start": "1599039",
    "end": "1606960"
  },
  {
    "text": "ensure that every commit by itself doesn't break anything so one way to do it",
    "start": "1606960",
    "end": "1612799"
  },
  {
    "text": "is to use the stash now if you may or may not know about the stash the stash is a third place the other two being the",
    "start": "1612799",
    "end": "1620720"
  },
  {
    "text": "index the staging area and the commits it's a third place where you can save modified files",
    "start": "1620720",
    "end": "1628880"
  },
  {
    "text": "now there is one lesser known feature in the stash that's called keep index what this does",
    "start": "1628880",
    "end": "1636960"
  },
  {
    "text": "is well let me just show you now i have um i have staged a change and then i",
    "start": "1636960",
    "end": "1644720"
  },
  {
    "text": "have another change that's not going to be committed however it's still on my working directory now i",
    "start": "1644720",
    "end": "1651760"
  },
  {
    "text": "want to make sure that this change by itself is correct without and also exclude",
    "start": "1651760",
    "end": "1659440"
  },
  {
    "text": "anything else from my working directory so the way to do that is to say get git",
    "start": "1659440",
    "end": "1665279"
  },
  {
    "text": "stash save and then i tell git you know what stash everything that i have in my working",
    "start": "1665279",
    "end": "1671679"
  },
  {
    "text": "directory but keep the index untouched so when i do that and i say git stash",
    "start": "1671679",
    "end": "1679760"
  },
  {
    "text": "list now i have a stash with the change however if i look at the",
    "start": "1679760",
    "end": "1687520"
  },
  {
    "text": "index that my my state change is still there",
    "start": "1687520",
    "end": "1693039"
  },
  {
    "text": "which means and that's all i have so if i look at the status you see i",
    "start": "1693039",
    "end": "1698559"
  },
  {
    "text": "don't i no longer have anything modified in my working directory because that's been stashed away",
    "start": "1698559",
    "end": "1704640"
  },
  {
    "text": "so what you can do now is that you can run your build script in this case adjustable.net build",
    "start": "1704640",
    "end": "1711039"
  },
  {
    "text": "and verify that what's about to be committed indeed doesn't break anything",
    "start": "1711039",
    "end": "1717679"
  },
  {
    "text": "so now i can go ahead and say commit m fixes debug compilation",
    "start": "1717679",
    "end": "1725520"
  },
  {
    "text": "error but then i want to get back my changes from the stash of course so at this",
    "start": "1725520",
    "end": "1731679"
  },
  {
    "text": "point i say git stash pop and it's",
    "start": "1731679",
    "end": "1737200"
  },
  {
    "text": "being dropped from the stash so because you don't want to accumulate",
    "start": "1737200",
    "end": "1742480"
  },
  {
    "text": "too much stuff in the stash it's like the attic everything you put there stays there forever",
    "start": "1742480",
    "end": "1748080"
  },
  {
    "text": "so um you want to remove it from that however you want to put it back in your working directory so now",
    "start": "1748080",
    "end": "1753840"
  },
  {
    "text": "if i do the status i have my change back so that's that's great",
    "start": "1753840",
    "end": "1761600"
  },
  {
    "text": "let's get rid of that another thing you can do is that when",
    "start": "1761600",
    "end": "1767039"
  },
  {
    "text": "you're working on a feature branch you're gonna be making a bunch of commits now maybe you have forgot to um",
    "start": "1767039",
    "end": "1775679"
  },
  {
    "text": "to run this skip index step because it is an extra step you know on your workflow of course so",
    "start": "1775679",
    "end": "1781919"
  },
  {
    "text": "how can you ensure that what the commits you have right now in your branch individually don't break",
    "start": "1781919",
    "end": "1787120"
  },
  {
    "text": "anything and this is where the rebase command come in all things now the rebase command is",
    "start": "1787120",
    "end": "1794559"
  },
  {
    "text": "probably the most infamous one in in among all git commands and that's",
    "start": "1794559",
    "end": "1800880"
  },
  {
    "text": "probably because it does too much it doesn't follow the single responsibility rule the git rebase does a bunch of things",
    "start": "1800880",
    "end": "1809279"
  },
  {
    "text": "and one of the thing it does is it allows you to run a command after",
    "start": "1809279",
    "end": "1816159"
  },
  {
    "text": "each commit in a sequence so let me show you what i mean what so if i look at the history of my",
    "start": "1816159",
    "end": "1822960"
  },
  {
    "text": "branch and i'm working in master but if i look at the history of my branch",
    "start": "1822960",
    "end": "1828080"
  },
  {
    "text": "i know that at some point one of these commits broke things because right now before i",
    "start": "1828080",
    "end": "1834799"
  },
  {
    "text": "fix the compilation error i had it in my in my branch so one of these commits over here is",
    "start": "1834799",
    "end": "1840640"
  },
  {
    "text": "breaking things now how do i know which one breaks this is where git rebase comes in if i",
    "start": "1840640",
    "end": "1847440"
  },
  {
    "text": "say git rebase and then in this case i want to go back all the way at the beginning of history so i say",
    "start": "1847440",
    "end": "1854640"
  },
  {
    "text": "root otherwise you can specify what is the starting commit that you want to check",
    "start": "1854640",
    "end": "1862559"
  },
  {
    "text": "and then you say exact and then you specify which command do you want to run for each of those commit",
    "start": "1862559",
    "end": "1868880"
  },
  {
    "text": "commits and of course if you have a build script you will run your build script in this case i'm just going to",
    "start": "1868880",
    "end": "1874080"
  },
  {
    "text": "run dotnet build and you don't have to do it interactive but i'm just",
    "start": "1874080",
    "end": "1880640"
  },
  {
    "text": "gonna add it so to to show you what what it does interactive",
    "start": "1880640",
    "end": "1887120"
  },
  {
    "text": "so here are the commits included in the sequence and you see for each one of them git has",
    "start": "1887120",
    "end": "1893039"
  },
  {
    "text": "added the command that i specified so this means that",
    "start": "1893039",
    "end": "1898159"
  },
  {
    "text": "git is going to go back to the first commit and run dotnet build for with the changes",
    "start": "1898159",
    "end": "1904640"
  },
  {
    "text": "included there and if the dot that build command exits with zero which means everything went fine",
    "start": "1904640",
    "end": "1910399"
  },
  {
    "text": "it's gonna move on to the next one and so on until the last if the command you run x is with",
    "start": "1910399",
    "end": "1916480"
  },
  {
    "text": "something other than zero which mean this means that something went wrong and the rebase command is",
    "start": "1916480",
    "end": "1921840"
  },
  {
    "text": "going to stop right at the commit that broke things just like it will stop if you",
    "start": "1921840",
    "end": "1927039"
  },
  {
    "text": "encountered a merge conflict so let's just go ahead and run and this is",
    "start": "1927039",
    "end": "1934159"
  },
  {
    "text": "running for the first one everything is fine and now it stopped and it said",
    "start": "1934159",
    "end": "1941200"
  },
  {
    "text": "execution failed and here is also where having a",
    "start": "1941760",
    "end": "1948159"
  },
  {
    "text": "gitaware prompt really helps it's telling me i'm at commit 4 of 10 and then i can inspect",
    "start": "1948159",
    "end": "1957519"
  },
  {
    "text": "the committee time i'm at right now and indeed this is the commit that introduced the",
    "start": "1957519",
    "end": "1964480"
  },
  {
    "text": "failing line and now i have a chance to fix it and continue the rebase",
    "start": "1964480",
    "end": "1971600"
  },
  {
    "text": "pretty awesome stuff if you ask me so let's move on to the",
    "start": "1972559",
    "end": "1980000"
  },
  {
    "start": "1977000",
    "end": "2191000"
  },
  {
    "text": "i in acid that means incremental what does it mean it means that as you",
    "start": "1980000",
    "end": "1986640"
  },
  {
    "text": "are building up the commits in your branch in your feature brands or bug fix brands or whatever it is you",
    "start": "1986640",
    "end": "1993120"
  },
  {
    "text": "want those commit to show your logical the logical progression",
    "start": "1993120",
    "end": "1998960"
  },
  {
    "text": "your thought process so to speak that went into those changes why do you do you ask well because if",
    "start": "1998960",
    "end": "2006000"
  },
  {
    "text": "someone is going to look at your history they're going to look at a sequence of",
    "start": "2006000",
    "end": "2011440"
  },
  {
    "text": "commits and if those commits are in the order",
    "start": "2011440",
    "end": "2016480"
  },
  {
    "text": "in which things that in in order to make sense for example if i'm going to",
    "start": "2016480",
    "end": "2021760"
  },
  {
    "text": "do a refactoring i'm going to do it first and if i add a feature i'm going to do it afterwards not the other way around",
    "start": "2021760",
    "end": "2028240"
  },
  {
    "text": "it's going to help to understand how the code transformed from one stage to the other",
    "start": "2028240",
    "end": "2033679"
  },
  {
    "text": "but how do you do that you ask well meet rebase again in this case in this case",
    "start": "2033679",
    "end": "2040000"
  },
  {
    "text": "we we're just using the in rebase interactive like we just did to reorder",
    "start": "2040000",
    "end": "2048320"
  },
  {
    "text": "the commits in a branch or possibly if two commits are actually making the",
    "start": "2048320",
    "end": "2053760"
  },
  {
    "text": "same change which means they are not autonomous if you remember",
    "start": "2053760",
    "end": "2059280"
  },
  {
    "text": "you can squash them together and turn two commits or more into this into one so in this case",
    "start": "2059280",
    "end": "2067118"
  },
  {
    "text": "we know that we just run git rebase xx so we know that the second commit broke the code however we fixed it",
    "start": "2067119",
    "end": "2076000"
  },
  {
    "text": "over here now we haven't shared this history with",
    "start": "2076000",
    "end": "2081200"
  },
  {
    "text": "anyone yet it just exists on our computer well on my computer and",
    "start": "2081200",
    "end": "2087520"
  },
  {
    "text": "so you have we have a chance to go back and rewrite history so that this commit never actually broke",
    "start": "2087520",
    "end": "2095200"
  },
  {
    "text": "anything so we want to take this one and make it so that it becomes part of the",
    "start": "2095200",
    "end": "2102560"
  },
  {
    "text": "first commit and how do you do that well you say git rebase",
    "start": "2102560",
    "end": "2107920"
  },
  {
    "text": "interactive and then in this case i'm going to start from the beginning again",
    "start": "2107920",
    "end": "2113200"
  },
  {
    "text": "and what you do this is called the to do file by the way because you're telling it okay what should happen for each one of those",
    "start": "2113200",
    "end": "2119680"
  },
  {
    "text": "commits you take this one over here and you literally",
    "start": "2119680",
    "end": "2124960"
  },
  {
    "text": "move it up to be below the commit that you want to squash it",
    "start": "2124960",
    "end": "2131680"
  },
  {
    "text": "into then you say fix up now what does fix up",
    "start": "2131680",
    "end": "2136880"
  },
  {
    "text": "mean it says it right over here it squashes the commit but discards the log commit methods",
    "start": "2136880",
    "end": "2144400"
  },
  {
    "text": "because of course if you're gonna make this commit part of the previous one we're not really interested",
    "start": "2144400",
    "end": "2150400"
  },
  {
    "text": "in keeping this commit message around so once you've done that you can save",
    "start": "2150400",
    "end": "2156960"
  },
  {
    "text": "and by the way you can do this interactively based also through to get guise",
    "start": "2156960",
    "end": "2163920"
  },
  {
    "text": "and that was really quick so let's look at our history again and now you see that that commit is no",
    "start": "2164000",
    "end": "2170960"
  },
  {
    "text": "longer here it got squashed into this one so let's look at",
    "start": "2170960",
    "end": "2176400"
  },
  {
    "text": "this commit let's look at its patch",
    "start": "2176400",
    "end": "2181440"
  },
  {
    "text": "and you see that it still adds the line but now it's adding the correct line and",
    "start": "2182800",
    "end": "2188400"
  },
  {
    "text": "not the wrong one the last one in this sec first section",
    "start": "2188400",
    "end": "2194720"
  },
  {
    "start": "2191000",
    "end": "2328000"
  },
  {
    "text": "is the d and that's that's for documented what does it mean pretty self-explanatory it means that",
    "start": "2194720",
    "end": "2202800"
  },
  {
    "text": "we know that every commit should make one logical change isolated from the other they should be",
    "start": "2202800",
    "end": "2208400"
  },
  {
    "text": "correct but they should also state in with as much detail as possible what it is that",
    "start": "2208400",
    "end": "2214560"
  },
  {
    "text": "they are changing now it turns out that you do that of course in the commit message",
    "start": "2214560",
    "end": "2220160"
  },
  {
    "text": "turns out that there is a format to how you should um yeah format your commit message",
    "start": "2220160",
    "end": "2227680"
  },
  {
    "text": "and what format is that well first you should have one sentence which is nice and short and",
    "start": "2227680",
    "end": "2235599"
  },
  {
    "text": "this just describes at the um at the highest level what this change is",
    "start": "2235599",
    "end": "2241280"
  },
  {
    "text": "about and that's called the summary and the summary should be at the most 50 characters",
    "start": "2241280",
    "end": "2247920"
  },
  {
    "text": "after that you keep an er you set an empty line and then you have the",
    "start": "2247920",
    "end": "2254160"
  },
  {
    "text": "so-called body and the body can contain any amount of detail that's necessary to understand",
    "start": "2254160",
    "end": "2260880"
  },
  {
    "text": "the change you can also ref if you have us of course if you're working in a team you're going to have an",
    "start": "2260880",
    "end": "2266240"
  },
  {
    "text": "issue tracker you can also mention the issue tracker number in the body",
    "start": "2266240",
    "end": "2272320"
  },
  {
    "text": "and some something that i've seen some teams do is that if you are doing pair",
    "start": "2272320",
    "end": "2277680"
  },
  {
    "text": "programming you know git by default just records one author for every commit",
    "start": "2277680",
    "end": "2283200"
  },
  {
    "text": "but if if there were two of you working on that change maybe you want to record both of the",
    "start": "2283200",
    "end": "2289040"
  },
  {
    "text": "authors well the way you do that is in the body you can add a field",
    "start": "2289040",
    "end": "2296078"
  },
  {
    "text": "which is one or more co-authors and then you basically follow the same git format for",
    "start": "2296720",
    "end": "2303440"
  },
  {
    "text": "uh for the author with the name last name and email address and this way you can specify other",
    "start": "2303440",
    "end": "2310720"
  },
  {
    "text": "authors that were involved in that commit pretty useful because if the original",
    "start": "2310720",
    "end": "2316880"
  },
  {
    "text": "author maybe is no longer with the company you have one or more other person people",
    "start": "2316880",
    "end": "2322480"
  },
  {
    "text": "you can ask about the background information of the change",
    "start": "2322480",
    "end": "2328240"
  },
  {
    "start": "2328000",
    "end": "2547000"
  },
  {
    "text": "the third and final category for the personal workflows is automation now git has a",
    "start": "2328960",
    "end": "2336960"
  },
  {
    "text": "a lot of automation built in and you should really take advantage of it to",
    "start": "2336960",
    "end": "2342320"
  },
  {
    "text": "automate the workflow both that you decide to work with on your own as well as your team",
    "start": "2342320",
    "end": "2349040"
  },
  {
    "text": "workflows now the first one in this this means of",
    "start": "2349040",
    "end": "2354800"
  },
  {
    "text": "course letting uh get to the work for you the first one is alias functions",
    "start": "2354800",
    "end": "2359920"
  },
  {
    "text": "now you may have heard and this only applies to the command line you may",
    "start": "2359920",
    "end": "2365760"
  },
  {
    "text": "have heard about guitarists so for example if you don't",
    "start": "2365760",
    "end": "2370960"
  },
  {
    "text": "want to type check out every time you can define an alias",
    "start": "2370960",
    "end": "2376400"
  },
  {
    "text": "called for example co and now you can say git co feature to switch to another",
    "start": "2376400",
    "end": "2383359"
  },
  {
    "text": "branch now these are simple analysis what you may not know is that you can assign a shell",
    "start": "2383359",
    "end": "2390320"
  },
  {
    "text": "function to an alias and in that shell function you can have",
    "start": "2390320",
    "end": "2396000"
  },
  {
    "text": "entire scripts that run associated to a simple alias now one that i came up with a few",
    "start": "2396000",
    "end": "2403440"
  },
  {
    "text": "years ago that i'm still using daily and i share with everyone is get undo",
    "start": "2403440",
    "end": "2411200"
  },
  {
    "text": "now this is a shell function let me show you how how it looks like",
    "start": "2411200",
    "end": "2416240"
  },
  {
    "text": "first i start my alias with an exclamation mark which is telling it that it should",
    "start": "2416240",
    "end": "2422160"
  },
  {
    "text": "interpret whatever comes afterward it should run it as a shell command it should just pass",
    "start": "2422160",
    "end": "2428079"
  },
  {
    "text": "the string to the shell in this case bash then i define a shell function",
    "start": "2428079",
    "end": "2434560"
  },
  {
    "text": "which can be called anything i just call it f and in the body i'm just doing a reset hard",
    "start": "2434560",
    "end": "2441760"
  },
  {
    "text": "however this syntax over here is a parameter because if you're",
    "start": "2441760",
    "end": "2447760"
  },
  {
    "text": "defining a shell function shell functions can accept parameters so that means you can pass parameters",
    "start": "2447760",
    "end": "2454000"
  },
  {
    "text": "to your alias and include that in the function and at the end of the function i just",
    "start": "2454000",
    "end": "2460319"
  },
  {
    "text": "simply invoke it now what does this do let me show you let's say that",
    "start": "2460319",
    "end": "2466480"
  },
  {
    "text": "um i make a commit in this case i just don't i don't want to make any change so i'm saying allow empty",
    "start": "2466480",
    "end": "2473440"
  },
  {
    "text": "and i make a commit that says i'm about to regret this",
    "start": "2473440",
    "end": "2481200"
  },
  {
    "text": "and now i make another commit also allow empty and then i'm going to say",
    "start": "2481200",
    "end": "2488480"
  },
  {
    "text": "and and and these two so now if i look at the history",
    "start": "2488480",
    "end": "2497040"
  },
  {
    "text": "i have two commits that i want to get rid of",
    "start": "2498240",
    "end": "2503440"
  },
  {
    "text": "now there is an any number of way i can do that but if with my undo alias i can say git undo and it's like",
    "start": "2503440",
    "end": "2511040"
  },
  {
    "text": "having the back button in your browser how many times do you want to press the",
    "start": "2511040",
    "end": "2516560"
  },
  {
    "text": "back button or how many times do you want to press ctrl z well in this case i wanted to",
    "start": "2516560",
    "end": "2522000"
  },
  {
    "text": "undo the last two actions that i did so i say git undo too",
    "start": "2522000",
    "end": "2528640"
  },
  {
    "text": "now if i look at the history again you see that those two are gone so i've",
    "start": "2528640",
    "end": "2535839"
  },
  {
    "text": "and i've undone my latest two commits and this is just one example of the many",
    "start": "2535839",
    "end": "2541839"
  },
  {
    "text": "things you can automate by using alias functions",
    "start": "2541839",
    "end": "2546720"
  },
  {
    "text": "so moving on this is my favorite reuse recorder resolutions now let me",
    "start": "2546880",
    "end": "2554000"
  },
  {
    "start": "2547000",
    "end": "2859000"
  },
  {
    "text": "first change to a different one now when you work on a feature branch",
    "start": "2554000",
    "end": "2560240"
  },
  {
    "text": "and you keep that branch around for a long time and we are gonna talk about it in just a few minutes uh you are",
    "start": "2560240",
    "end": "2568319"
  },
  {
    "text": "probably going to be rebasing it a bunch of times and if there are any conflicts between",
    "start": "2568319",
    "end": "2574079"
  },
  {
    "text": "your feature branch and whatever is in your stable branch you will be resolving the same conflicts",
    "start": "2574079",
    "end": "2580319"
  },
  {
    "text": "over and over because every base is about applying each of your commits on top of",
    "start": "2580319",
    "end": "2587359"
  },
  {
    "text": "the the one you're basing on one at a time so if you replace multiple times you're",
    "start": "2587359",
    "end": "2593200"
  },
  {
    "text": "going to be resolving the same merge conflicts now git has an automation feature built",
    "start": "2593200",
    "end": "2599040"
  },
  {
    "text": "in which is called rere isn't it an awesome name which stands",
    "start": "2599040",
    "end": "2606000"
  },
  {
    "text": "for reuse recorder resolution now this is something you need to enable",
    "start": "2606000",
    "end": "2611440"
  },
  {
    "text": "so let's go ahead and do that so you say ray rere enabled",
    "start": "2611440",
    "end": "2617359"
  },
  {
    "text": "through and now it's enabled forever by the way remember that this",
    "start": "2617359",
    "end": "2622720"
  },
  {
    "text": "just applies to your own repository so everybody on your team has to do this",
    "start": "2622720",
    "end": "2628480"
  },
  {
    "text": "and now so we are on this same project where we are on the feature branch",
    "start": "2628880",
    "end": "2634720"
  },
  {
    "text": "and we know from before that there is a conflict between master and feature",
    "start": "2634720",
    "end": "2640000"
  },
  {
    "text": "now when you're working on a feature branch for a long time one technique that you can use to make",
    "start": "2640000",
    "end": "2646640"
  },
  {
    "text": "sure that you are up to date with whatever is happening on the main branch",
    "start": "2646640",
    "end": "2652240"
  },
  {
    "text": "is to to do a so-called test merge so let me show you how this works and of",
    "start": "2652240",
    "end": "2657839"
  },
  {
    "text": "course you have this enabled so i'm going to say i'm going to merge master",
    "start": "2657839",
    "end": "2663520"
  },
  {
    "text": "into my feature branch by doing a regular merge so no rebase just to show you now you see that right",
    "start": "2663520",
    "end": "2670319"
  },
  {
    "text": "now of course we are running into the same merge conflict however this time you see there is an",
    "start": "2670319",
    "end": "2677520"
  },
  {
    "text": "extra line in the output that says recorded pre-image for that file now the way rarer works",
    "start": "2677520",
    "end": "2686000"
  },
  {
    "text": "is that every time there is a merge conflict git records both sides of the conflict so",
    "start": "2686000",
    "end": "2693599"
  },
  {
    "text": "it records how the line looks like on either side of the merge conflict and",
    "start": "2693599",
    "end": "2699680"
  },
  {
    "text": "what happens then then when you resolve the conflict it is going to remember or record what the final line",
    "start": "2699680",
    "end": "2706960"
  },
  {
    "text": "looked like so when it encounters the exact same conflict it's going to automatically",
    "start": "2706960",
    "end": "2712560"
  },
  {
    "text": "reapply your previous resolution so let me show you how it works so now we have a merge conflict",
    "start": "2712560",
    "end": "2720000"
  },
  {
    "text": "and let's resolve it again so in this case you see one side is",
    "start": "2720000",
    "end": "2726000"
  },
  {
    "text": "removing the exclamation mark over here and the other the other side",
    "start": "2726000",
    "end": "2732800"
  },
  {
    "text": "is adding a comma so this is the common parent so let's decide",
    "start": "2732800",
    "end": "2739920"
  },
  {
    "text": "that the final line is going to have the comma but it's not",
    "start": "2739920",
    "end": "2747440"
  },
  {
    "text": "going to have the exclamation mark so this is how i want my final line to",
    "start": "2747440",
    "end": "2754319"
  },
  {
    "text": "look like so i save the modified file looks like this now all i have to do of",
    "start": "2754319",
    "end": "2762319"
  },
  {
    "text": "course is to add it to the index and now i continue my merge",
    "start": "2762319",
    "end": "2770800"
  },
  {
    "text": "let's just save this and you see what git says now it says recorder resolution",
    "start": "2771440",
    "end": "2777200"
  },
  {
    "text": "for this now yes i've recorded a resolution but if i look at the",
    "start": "2777200",
    "end": "2784480"
  },
  {
    "text": "um at the history i now also have a merge conflict and as you're",
    "start": "2784480",
    "end": "2789839"
  },
  {
    "text": "going to see in a few minutes this is not something that you want on a feature branch because that complicates history how",
    "start": "2789839",
    "end": "2796480"
  },
  {
    "text": "history looks like we're going to talk about in just a few minutes so",
    "start": "2796480",
    "end": "2801760"
  },
  {
    "text": "you i don't want to keep this merged merge commit around so what am i am i going to do i'm going",
    "start": "2801760",
    "end": "2808079"
  },
  {
    "text": "to undo it with my undo alias and now",
    "start": "2808079",
    "end": "2813760"
  },
  {
    "text": "i'm back to however it was before without the the merge merge commit",
    "start": "2813760",
    "end": "2821200"
  },
  {
    "text": "however git has recorded my resolution so what happens if i merge master again",
    "start": "2821200",
    "end": "2830960"
  },
  {
    "text": "now this time git is telling me hey i resolve i i had a conflict but i have resolved",
    "start": "2830960",
    "end": "2837200"
  },
  {
    "text": "it using the previous resolution so let me look let's let's take a look at how it looks",
    "start": "2837200",
    "end": "2842400"
  },
  {
    "text": "like yeah it is showing me exactly how the lines looked like before",
    "start": "2842400",
    "end": "2847440"
  },
  {
    "text": "and how they are looking like how the line is looking like now so it has reapplied",
    "start": "2847440",
    "end": "2852960"
  },
  {
    "text": "my previous resolution so at this point i can just of course add this to the index and continue on",
    "start": "2852960",
    "end": "2861040"
  },
  {
    "text": "now the thing that's useful is that remember when i a rebase operation is also a form",
    "start": "2861040",
    "end": "2868000"
  },
  {
    "text": "of merge however you're just merging one commit at a time instead of merging",
    "start": "2868000",
    "end": "2874000"
  },
  {
    "text": "two branches in one go so this means that if i now were to",
    "start": "2874000",
    "end": "2879359"
  },
  {
    "text": "rebase my feature branch on top of master",
    "start": "2879359",
    "end": "2884960"
  },
  {
    "text": "it is going to reuse the same resolution even during",
    "start": "2885200",
    "end": "2892160"
  },
  {
    "text": "a rebase so of course it's going to stop because it encountered an emerge conflict however",
    "start": "2892160",
    "end": "2899200"
  },
  {
    "text": "if i look at the state of my working directory you see that the conflict has already been resolved",
    "start": "2899200",
    "end": "2904960"
  },
  {
    "text": "so i can i can simply say git rebate of course i need to add it to the index",
    "start": "2904960",
    "end": "2910880"
  },
  {
    "text": "and then i can simply say git rebase continue and i'm done with my rebase",
    "start": "2910880",
    "end": "2917119"
  },
  {
    "text": "incredibly useful stuff the last one i want to share with you is client side hooks now",
    "start": "2917119",
    "end": "2922960"
  },
  {
    "text": "every time you do something on your local repository and even on the server like you're pushing commits",
    "start": "2922960",
    "end": "2928559"
  },
  {
    "text": "or you are creating a commit locally there are events that happen and that git git is raising events for",
    "start": "2928559",
    "end": "2935599"
  },
  {
    "text": "everything that happens inside the repository now you can associate shell scripts that run",
    "start": "2935599",
    "end": "2943040"
  },
  {
    "text": "as a response to those events and why would you want to do that again",
    "start": "2943040",
    "end": "2948880"
  },
  {
    "text": "if you have agreed upon a convention in your team and you want to make sure that everybody",
    "start": "2948880",
    "end": "2954640"
  },
  {
    "text": "is following that convention without adding more burden on their workflow you can automate it for them",
    "start": "2954640",
    "end": "2962880"
  },
  {
    "text": "so you can distribute a bunch of client-side hooks that your teammates will have to",
    "start": "2962880",
    "end": "2968960"
  },
  {
    "text": "download into the repositories because sadly client-side hooks cannot be shared from this",
    "start": "2968960",
    "end": "2974559"
  },
  {
    "text": "from a central repository and then they will automate stuff for them so for",
    "start": "2974559",
    "end": "2979599"
  },
  {
    "text": "example remember the the white space checking",
    "start": "2979599",
    "end": "2984800"
  },
  {
    "text": "there is a merge there is a clan side hook called pre-commit that happens just before the commit is",
    "start": "2984800",
    "end": "2991839"
  },
  {
    "text": "created and the argument um of that hook is the changes that you are",
    "start": "2991839",
    "end": "2999440"
  },
  {
    "text": "about to apply so that's a perfect um occasion to run a white space check just right before",
    "start": "2999440",
    "end": "3007200"
  },
  {
    "text": "the commit is done so it's gonna stop if you are about to introduce any white space errors",
    "start": "3007200",
    "end": "3014079"
  },
  {
    "text": "the other one is another event that's happening when the committee is about to be created however this time",
    "start": "3014079",
    "end": "3020720"
  },
  {
    "text": "the argument of the event is the commit message",
    "start": "3020720",
    "end": "3026079"
  },
  {
    "text": "and this is a perfect case to validate that your commit message is conforming to the rules that you have agreed upon",
    "start": "3026079",
    "end": "3033280"
  },
  {
    "text": "so for example i have a um by the way these commit hooks they live inside a the git directory",
    "start": "3033280",
    "end": "3041839"
  },
  {
    "text": "called hooks there is a bunch of them you have a bunch of sample scripts that are already made",
    "start": "3041839",
    "end": "3048720"
  },
  {
    "text": "so the way you activate it is you remove the sample extension and you write the code in the for the",
    "start": "3048720",
    "end": "3056880"
  },
  {
    "text": "for the shell that you're using so in this case i have one called commit",
    "start": "3056880",
    "end": "3062640"
  },
  {
    "text": "a message that checks the format of the commit message so let me show you how it works let's say that i want to make a commit",
    "start": "3062640",
    "end": "3070800"
  },
  {
    "text": "now empty and now i'm breaking the rule of making the first line be 50 characters",
    "start": "3070800",
    "end": "3076559"
  },
  {
    "text": "so this summary is way longer than",
    "start": "3076559",
    "end": "3082079"
  },
  {
    "text": "the 50 characters that it should be and now the commit hook",
    "start": "3082079",
    "end": "3089040"
  },
  {
    "text": "has been activated and it's printing me hey the first line should be 50 characters",
    "start": "3089040",
    "end": "3094400"
  },
  {
    "text": "but yours was 70. what do you want to do do you want to modify it in an editor",
    "start": "3094400",
    "end": "3099839"
  },
  {
    "text": "or just commit it and of course i'm going to say why yes and you see that even the editor is",
    "start": "3099839",
    "end": "3106319"
  },
  {
    "text": "showing me that whatever is white and many git guys do this for you",
    "start": "3106319",
    "end": "3111680"
  },
  {
    "text": "they're gonna highlight when you're past the fifth character in the summary showing me that",
    "start": "3111680",
    "end": "3118079"
  },
  {
    "text": "everything after that is a is longer so this summary is way longer than 50. let's",
    "start": "3118079",
    "end": "3125280"
  },
  {
    "text": "remove that and now my commit message is conformant",
    "start": "3125280",
    "end": "3131839"
  },
  {
    "text": "to the to the rules and with that we are done with the",
    "start": "3131839",
    "end": "3137359"
  },
  {
    "text": "personal workflows now let's go back and take a look at",
    "start": "3137359",
    "end": "3143280"
  },
  {
    "start": "3141000",
    "end": "3599000"
  },
  {
    "text": "the team workflows and these are of course also divided",
    "start": "3143280",
    "end": "3148640"
  },
  {
    "text": "into three categories the first one of these three categories",
    "start": "3148640",
    "end": "3154960"
  },
  {
    "text": "is branching now um i'm sure you're familiar with all the different kinds of flows",
    "start": "3154960",
    "end": "3162480"
  },
  {
    "text": "that exist out there there is git flow this is github flow and is whatever flow",
    "start": "3162480",
    "end": "3169520"
  },
  {
    "text": "which one should you use for your project now the answer you should be asking",
    "start": "3169520",
    "end": "3176559"
  },
  {
    "text": "that your team should be asking is not which flow you should use but rather what do we",
    "start": "3176559",
    "end": "3183440"
  },
  {
    "text": "need if you've been looking at the original blog post for git flow the original author has",
    "start": "3183440",
    "end": "3191119"
  },
  {
    "text": "published an update just this year in april or march where he said that yes this blog post is",
    "start": "3191119",
    "end": "3197119"
  },
  {
    "text": "10 years old now and basically saying what everybody um",
    "start": "3197119",
    "end": "3202720"
  },
  {
    "text": "already knew is that git flow was designed and it came out of a specific situation",
    "start": "3202720",
    "end": "3210559"
  },
  {
    "text": "it was designed to conform a certain team constellation and a certain kind of software project",
    "start": "3210559",
    "end": "3216880"
  },
  {
    "text": "that's where it worked it unfortunately it became some kind of",
    "start": "3216880",
    "end": "3223119"
  },
  {
    "text": "some standard that everybody and every team on earth was applying this same workflow",
    "start": "3223119",
    "end": "3228640"
  },
  {
    "text": "regardless of whether their project and team match the preconditions",
    "start": "3228640",
    "end": "3234240"
  },
  {
    "text": "upon which git flow was designed so this is all to say that",
    "start": "3234240",
    "end": "3242000"
  },
  {
    "text": "instead of focusing on taking a ready-made flow and apply it as is to your project",
    "start": "3242000",
    "end": "3248720"
  },
  {
    "text": "instead you should consider what it is what kind of software you are building",
    "start": "3248720",
    "end": "3254559"
  },
  {
    "text": "and whether you are have to maintain for example multiple versions uh in production at the same time or you",
    "start": "3254559",
    "end": "3261119"
  },
  {
    "text": "have just one version at any time like in a web application and of course how many members on your",
    "start": "3261119",
    "end": "3266960"
  },
  {
    "text": "team and what their experience level is using it those are all factors that have they have to influence your",
    "start": "3266960",
    "end": "3274400"
  },
  {
    "text": "choice of flow and the right answer is usually that there is no flow that you can use",
    "start": "3274400",
    "end": "3281119"
  },
  {
    "text": "as is you can be inspired by one or more of the different flows and adapt it to your specific needs",
    "start": "3281119",
    "end": "3288880"
  },
  {
    "text": "now when it comes to adapting a flow what should you think about them well one way to guide you in this choice",
    "start": "3288880",
    "end": "3297359"
  },
  {
    "text": "is to think about what kind of branches do you use in a project",
    "start": "3297359",
    "end": "3303920"
  },
  {
    "text": "so be aware that there are a finite finite uh set of branches",
    "start": "3303920",
    "end": "3311440"
  },
  {
    "text": "what are they well the first two kinds of branches are long-running branches which are the",
    "start": "3311440",
    "end": "3318079"
  },
  {
    "text": "branches that exist for as long as the project runs for master is the canonical",
    "start": "3318079",
    "end": "3324480"
  },
  {
    "text": "long-running branch and then there are topic branches topic branches are branches",
    "start": "3324480",
    "end": "3330640"
  },
  {
    "text": "that are focused on solving a particular problem or task so they are short-lived",
    "start": "3330640",
    "end": "3337920"
  },
  {
    "text": "so for example let's say that this is the history of a project this is the master branch the",
    "start": "3338480",
    "end": "3344559"
  },
  {
    "text": "long-running branch that is shared among everyone and then there is you from the master",
    "start": "3344559",
    "end": "3352000"
  },
  {
    "text": "branch you will be creating one or more possibly more topic branches that are focused on uh",
    "start": "3352000",
    "end": "3359440"
  },
  {
    "text": "working on different features for example so these are the topic branches",
    "start": "3359440",
    "end": "3364880"
  },
  {
    "text": "now the way you merge the work done in a topic branch into the long running one",
    "start": "3365200",
    "end": "3370559"
  },
  {
    "text": "is by doing a merge commit after that the original topic branch is deleted so",
    "start": "3370559",
    "end": "3376319"
  },
  {
    "text": "there is no record of what the branch was called however you still have the merge commit to tell you that that work was done",
    "start": "3376319",
    "end": "3383680"
  },
  {
    "text": "in parallel the other kind of branches that you can",
    "start": "3383680",
    "end": "3390640"
  },
  {
    "text": "create are public branches and private branches now remember git is a",
    "start": "3390640",
    "end": "3397280"
  },
  {
    "text": "distributed source control system so what does this mean it means that",
    "start": "3397280",
    "end": "3402480"
  },
  {
    "text": "you will be having a shared repository now in git all repositories are created equal there",
    "start": "3402480",
    "end": "3408319"
  },
  {
    "text": "is in no implicit primary or central repository like there was in a centralized source",
    "start": "3408319",
    "end": "3414319"
  },
  {
    "text": "control system where there was the server every repository is equal to all the others",
    "start": "3414319",
    "end": "3419599"
  },
  {
    "text": "now you just so happen to agree on that one copy one repository is deemed the canonical",
    "start": "3419599",
    "end": "3426079"
  },
  {
    "text": "one and you put it on a central server like for example github or azure devops or whatever you're using",
    "start": "3426079",
    "end": "3434160"
  },
  {
    "text": "now everybody on the team is also going to have a local copy of the repository a local",
    "start": "3434799",
    "end": "3440079"
  },
  {
    "text": "repository which is exactly the same as the shared one so and that will exist on their own",
    "start": "3440079",
    "end": "3445119"
  },
  {
    "text": "computer now a branch that exists",
    "start": "3445119",
    "end": "3450240"
  },
  {
    "text": "on the shared repository the one that everybody has access to that is called a public branch",
    "start": "3450240",
    "end": "3458400"
  },
  {
    "text": "and any branch that you create on your own computer before you push it push it anywhere",
    "start": "3458400",
    "end": "3464960"
  },
  {
    "text": "there is a private branch private to you now this is an important distinction to",
    "start": "3464960",
    "end": "3471040"
  },
  {
    "text": "make because long-running branches those are usually public because a",
    "start": "3471040",
    "end": "3477280"
  },
  {
    "text": "long-running branch is usually shared so multiple people are going to merge",
    "start": "3477280",
    "end": "3482319"
  },
  {
    "text": "their changes into the long-running branch a topic branch on the other hand that",
    "start": "3482319",
    "end": "3487680"
  },
  {
    "text": "you create to implement a feature or fix a bug those are usually private",
    "start": "3487680",
    "end": "3492960"
  },
  {
    "text": "so remember this association long-running branches are public topic branches are private",
    "start": "3492960",
    "end": "3500240"
  },
  {
    "text": "now this doesn't always have to be the case you could have a private branch that you keep around for a long time",
    "start": "3500240",
    "end": "3507359"
  },
  {
    "text": "and as you have seen there are there are things you can do to minimize the work you have to do to",
    "start": "3507359",
    "end": "3512960"
  },
  {
    "text": "keep resolving the same merge conflicts for example by using rare ram so",
    "start": "3512960",
    "end": "3520319"
  },
  {
    "text": "you can of course keep around a private branch for a long time that turns it into a private long-running branch",
    "start": "3520319",
    "end": "3526319"
  },
  {
    "text": "by the same token you could have multiple people in your team be collaborating on solving the same",
    "start": "3526319",
    "end": "3534960"
  },
  {
    "text": "topic so for example if you decide to create a branch for every user story that if you're",
    "start": "3534960",
    "end": "3541119"
  },
  {
    "text": "using some kind of agile process and so you're creating a topic branch",
    "start": "3541119",
    "end": "3546960"
  },
  {
    "text": "for its user story then it's very likely that more than one developer is going to work on that user",
    "start": "3546960",
    "end": "3552960"
  },
  {
    "text": "story and that means that you're going to be sharing the topic brands on",
    "start": "3552960",
    "end": "3558000"
  },
  {
    "text": "the central repository the shared one and that turns it into a public one",
    "start": "3558000",
    "end": "3563040"
  },
  {
    "text": "so there can absolutely be topic branches that are public",
    "start": "3563040",
    "end": "3568400"
  },
  {
    "text": "however these combinations are not the same so long-running public branches",
    "start": "3568400",
    "end": "3574400"
  },
  {
    "text": "absolutely that's okay and private topic grounds is that's also okay",
    "start": "3574400",
    "end": "3580079"
  },
  {
    "text": "however long-running private branches those are problematic for the reasons",
    "start": "3580079",
    "end": "3585359"
  },
  {
    "text": "that we have been looking at you're gonna be you're gonna the longer you keep a",
    "start": "3585359",
    "end": "3590480"
  },
  {
    "text": "branch private the more you're gonna stray away from the the shared one and even if you",
    "start": "3590480",
    "end": "3598319"
  },
  {
    "text": "have features like rarer you'll still be you will you will be encountering",
    "start": "3598319",
    "end": "3603359"
  },
  {
    "text": "more and more immersed conflicts to merge like new ones but the same token sharing a feature",
    "start": "3603359",
    "end": "3611040"
  },
  {
    "text": "branch between multiple people is also a problem why is that",
    "start": "3611040",
    "end": "3616240"
  },
  {
    "text": "because a topic branch remember the i in acid incremental you will often",
    "start": "3616240",
    "end": "3623280"
  },
  {
    "text": "be reordering commits and squashing commit into it into other ones so you will be",
    "start": "3623280",
    "end": "3628640"
  },
  {
    "text": "rewriting history a lot in a topic branch because that's what it's designed for to solve a",
    "start": "3628640",
    "end": "3634720"
  },
  {
    "text": "particular problem now if you have multiple people working on a topic branch and you do a rebase and you squash",
    "start": "3634720",
    "end": "3641440"
  },
  {
    "text": "commits and you change the order that's gonna mess things up for the other ones because you know that every",
    "start": "3641440",
    "end": "3647280"
  },
  {
    "text": "time you rewrite history every commit gets a new id and if the other people working on the same feature",
    "start": "3647280",
    "end": "3653359"
  },
  {
    "text": "branch have created new commits on top of the old ones and then you publish your own",
    "start": "3653359",
    "end": "3659280"
  },
  {
    "text": "rewritten commits that's going to create a mess so be aware of those combinations",
    "start": "3659280",
    "end": "3667040"
  },
  {
    "text": "so long-running public branches yes you should have them but you should be limiting the number",
    "start": "3667200",
    "end": "3674400"
  },
  {
    "text": "of branches that you keep around that are both long-running and also that are public so branches in",
    "start": "3674400",
    "end": "3680240"
  },
  {
    "text": "those categories be conservative with them because they are a pain to handle on the other hand",
    "start": "3680240",
    "end": "3689359"
  },
  {
    "text": "topic branches that are pra and private branches that's what kit is for creating a branch",
    "start": "3689359",
    "end": "3695760"
  },
  {
    "text": "is a cheap operation so you should be doing it like there is no tomorrow so be liberal with that those kind of",
    "start": "3695760",
    "end": "3702880"
  },
  {
    "text": "branches take advantage of git branching model to um to your to to be more effective",
    "start": "3702880",
    "end": "3710240"
  },
  {
    "text": "with your work so keep as many topic branches that are private as as you want",
    "start": "3710240",
    "end": "3716880"
  },
  {
    "text": "now the now that we talked about different kind of branches we should also talk about different ways",
    "start": "3717119",
    "end": "3722400"
  },
  {
    "text": "of merging now the kinds of branches that you have decide the merge strategy so there are of",
    "start": "3722400",
    "end": "3729359"
  },
  {
    "text": "course two kinds of mergers there are the true merges and then there are the uh rebases so",
    "start": "3729359",
    "end": "3736400"
  },
  {
    "text": "what how should you merge this kind of branches well the public branch",
    "start": "3736400",
    "end": "3741520"
  },
  {
    "text": "let's say you have a public branch that you want to merge into another public branch in that case you want to have a visible",
    "start": "3741520",
    "end": "3748400"
  },
  {
    "text": "merge commit between them if you're merging a public branch into a private one",
    "start": "3748400",
    "end": "3753680"
  },
  {
    "text": "then you want to have a rebase so for example if you have a pull request being merged into master",
    "start": "3753680",
    "end": "3759039"
  },
  {
    "text": "you want to make it visible with a merge commit and if you are merging master into your own working progress branch",
    "start": "3759039",
    "end": "3764720"
  },
  {
    "text": "then you want to do a rebase and why is that well if you have a public branch like this",
    "start": "3764720",
    "end": "3770720"
  },
  {
    "text": "and you have a pull request you're also public and you merge them",
    "start": "3770720",
    "end": "3775760"
  },
  {
    "text": "well let's say that uh then something turns up that the the pull request introduce a",
    "start": "3775760",
    "end": "3782000"
  },
  {
    "text": "problem of some kind of bug well if you have a merge commit it's easy because you can revert that merge commit and it automatically reverts",
    "start": "3782000",
    "end": "3789200"
  },
  {
    "text": "everything that came in with that merge commit if instead you had rebased your pull requests and done this kind of",
    "start": "3789200",
    "end": "3797520"
  },
  {
    "text": "fast forward merge and there is a problem with any of those commits then you have to track them down",
    "start": "3797520",
    "end": "3802640"
  },
  {
    "text": "and revert them manually and the longer uh the more commits to be been built upon",
    "start": "3802640",
    "end": "3808079"
  },
  {
    "text": "afterwards the harder it's going to be so what you want to do instead is to um",
    "start": "3808079",
    "end": "3815280"
  },
  {
    "text": "oh by the way why do you want to re speaking of rebates why do you want to rebase",
    "start": "3815280",
    "end": "3820400"
  },
  {
    "text": "your topic brands and not merge well let's say that you are merging like we did before master into",
    "start": "3820400",
    "end": "3826960"
  },
  {
    "text": "feature and then at some point later if you keep that merge commit around",
    "start": "3826960",
    "end": "3832640"
  },
  {
    "text": "you're gonna merge this back into master now you see that history is going to look a lot more complicated than it",
    "start": "3832640",
    "end": "3838319"
  },
  {
    "text": "has to be and if you do this enough your history is going to look like this which is another way of calling it is",
    "start": "3838319",
    "end": "3845359"
  },
  {
    "text": "guitar hero history why because if you squint it looks like this",
    "start": "3845359",
    "end": "3851520"
  },
  {
    "text": "you definitely don't want that instead what you want is you want to rebase your private",
    "start": "3851520",
    "end": "3857520"
  },
  {
    "text": "branch on top of the public one and then do a fast forward merge for a nice linear history",
    "start": "3857520",
    "end": "3865038"
  },
  {
    "text": "third one is releasing this is a quick one now that you have multiple branches different kinds of branches different",
    "start": "3865200",
    "end": "3870960"
  },
  {
    "text": "ways of merging you should be aware of where the code that is in those branches is going to",
    "start": "3870960",
    "end": "3876319"
  },
  {
    "text": "which means every branch that is shared should be mapped to an environment so that means",
    "start": "3876319",
    "end": "3884079"
  },
  {
    "text": "that if you have a master branch and then you have a another long-running branch called develop",
    "start": "3884079",
    "end": "3889839"
  },
  {
    "text": "develop could be the place where you put work towards the next version of your software",
    "start": "3889839",
    "end": "3896000"
  },
  {
    "text": "so that in that case every commit is going to a test environment where it's going to be qa",
    "start": "3896000",
    "end": "3902319"
  },
  {
    "text": "the master branch instead contains the stable version of the software that's currently in production so when",
    "start": "3902319",
    "end": "3909280"
  },
  {
    "text": "you merge the work that you've done in develop that has been verified in the test environment you want to push it out to production so",
    "start": "3909280",
    "end": "3915839"
  },
  {
    "text": "that your customers can use it now the way you deploy from these branches is also different",
    "start": "3915839",
    "end": "3922640"
  },
  {
    "text": "maybe in the developed rounds you want to automatically deploy every single commit so that it can be",
    "start": "3922640",
    "end": "3927760"
  },
  {
    "text": "tested in that case you are doing continuous deployment the master branch you maybe want to be",
    "start": "3927760",
    "end": "3933520"
  },
  {
    "text": "more conservative you can be doing continuous deployment there as well however it's more likely that you want",
    "start": "3933520",
    "end": "3940079"
  },
  {
    "text": "to do you want to be able to commit at any time however the actual commit trigger should",
    "start": "3940079",
    "end": "3945839"
  },
  {
    "text": "not be automatic but should be an explicit action that you do",
    "start": "3945839",
    "end": "3951839"
  },
  {
    "text": "and with that i'm a few minutes over so i hope you guys stayed around for a for the last part i",
    "start": "3952079",
    "end": "3959200"
  },
  {
    "text": "want just to summarize we have talked about personal workflows",
    "start": "3959200",
    "end": "3964559"
  },
  {
    "text": "and among personal workflows uh is to get comfortable configure git to to be a more pleasant",
    "start": "3964559",
    "end": "3970240"
  },
  {
    "text": "tool to work with make sure to craft your history so that it follows the rule of acid",
    "start": "3970240",
    "end": "3976319"
  },
  {
    "text": "and it's nice and readable and deploy as many automation features that",
    "start": "3976319",
    "end": "3982240"
  },
  {
    "text": "that you can to automate the workflow that your team agrees upon so that you don't have to think about it",
    "start": "3982240",
    "end": "3989440"
  },
  {
    "text": "then we also talked about team workflows and team workflows they all are around",
    "start": "3989440",
    "end": "3995839"
  },
  {
    "text": "the concepts of the different kinds of branches that you will be managing so i was very intentional not to give",
    "start": "3995839",
    "end": "4002000"
  },
  {
    "text": "you advice on which flow to use but instead giving you guidance on how to evaluate a different kind of",
    "start": "4002000",
    "end": "4007839"
  },
  {
    "text": "workflows based on the kinds of branching branches and of course once you have different",
    "start": "4007839",
    "end": "4013680"
  },
  {
    "text": "kinds of branches you also have different merge strategies so being aware of how to handle those two",
    "start": "4013680",
    "end": "4020000"
  },
  {
    "text": "and the last one is being aware of how you want to release software from your branches which environment are",
    "start": "4020000",
    "end": "4026559"
  },
  {
    "text": "going to and how often are you going to deploy to those environments with that let's just give you a pointer",
    "start": "4026559",
    "end": "4034559"
  },
  {
    "text": "to everything that i've shown you and more is available on a pre-asset course that i have out which is called advanced tips",
    "start": "4034559",
    "end": "4041520"
  },
  {
    "text": "and tricks this uh this course includes a lot of what we've been seeing here and and more so so here is a link",
    "start": "4041520",
    "end": "4049760"
  },
  {
    "text": "to that and with that i want to say thank you for watching and if you have",
    "start": "4049760",
    "end": "4055520"
  },
  {
    "text": "any question you can reach me at either one of those addresses or on the slack i'll be",
    "start": "4055520",
    "end": "4061520"
  },
  {
    "text": "monitoring for the rest of the day as i said thank you and enjoy the rest of the conference",
    "start": "4061520",
    "end": "4069838"
  }
]