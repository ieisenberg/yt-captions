[
  {
    "text": "hello wow nice packed room this is awesome I thought with the competition in the other rooms that I would have",
    "start": "5399",
    "end": "11240"
  },
  {
    "text": "only two people in the front row but apparently it's it's much better than that welcome um talk today is bringing",
    "start": "11240",
    "end": "16920"
  },
  {
    "text": "CP nullability nullability into your existing code base um now before I start",
    "start": "16920",
    "end": "22160"
  },
  {
    "text": "there's a couple of questions that I would like to learn from you uh and the first one is who is here",
    "start": "22160",
    "end": "27679"
  },
  {
    "text": "to actually migrate their existing code base two notable reference types okay that's good who is using them today",
    "start": "27679",
    "end": "34879"
  },
  {
    "text": "already in their new projects okay most that is good um then",
    "start": "34879",
    "end": "40160"
  },
  {
    "text": "I guess we can start it I do have a little bit of an introduction on how they work what they are Etc uh but once",
    "start": "40160",
    "end": "45480"
  },
  {
    "text": "we're true we will look at migrating your code Etc so the agenda for today first talk a little bit about nullable",
    "start": "45480",
    "end": "51800"
  },
  {
    "text": "reference types in C we're also going to look a little bit at the internals not",
    "start": "51800",
    "end": "57520"
  },
  {
    "text": "really because I want to show you Intermediate Language code and everything uh that is there but just because there's a couple of attributes",
    "start": "57520",
    "end": "64080"
  },
  {
    "text": "that are shown in Intermediate Language that may make sense if you're using reflection and everything in your code base uh so that might be useful we're",
    "start": "64080",
    "end": "71320"
  },
  {
    "text": "going to look at annotating your C code look at all of the different annotations that are there and how they can actually",
    "start": "71320",
    "end": "76640"
  },
  {
    "text": "improve theability analysis in uh C and then we're going to go Full Speed Ahead and look at some techniques and tools",
    "start": "76640",
    "end": "83240"
  },
  {
    "text": "that can help you to migrate your stuff so with that let's go for it um if think about reference types",
    "start": "83240",
    "end": "91159"
  },
  {
    "text": "value types and null um there's a really good and simple example to show you what could happen in a pre C8 code base that",
    "start": "91159",
    "end": "99040"
  },
  {
    "text": "doesn't have null ability in there so um what would be the output of this snip",
    "start": "99040",
    "end": "104960"
  },
  {
    "text": "piece of code if we would run this and you can you can yell that's fine anyone want to take a",
    "start": "104960",
    "end": "113040"
  },
  {
    "text": "guess it's not a compiler error but it is going to throw when you run it so uh at compile time at editing time this",
    "start": "113040",
    "end": "119439"
  },
  {
    "text": "will work perfectly when you run it it will throw a null reference exception the reason for that is of course because",
    "start": "119439",
    "end": "125880"
  },
  {
    "text": "we have this method called get value which is returning null and we are dereferencing the length property of",
    "start": "125880",
    "end": "131800"
  },
  {
    "text": "that string in the console. right line there and that's going to throw because s is null at that point in",
    "start": "131800",
    "end": "138040"
  },
  {
    "text": "time so how to overcome that well you typically would add a null check so you do something like this where you say",
    "start": "138040",
    "end": "144239"
  },
  {
    "text": "Okay if that string is not null we're going to print the length of the string in the other case we are just just going",
    "start": "144239",
    "end": "150080"
  },
  {
    "text": "to go with uh printing something like string is null or taking a different branch in the code base uh to overcome",
    "start": "150080",
    "end": "156000"
  },
  {
    "text": "what is going on there now how do you know that you need a check for reference types I don't find",
    "start": "156000",
    "end": "163480"
  },
  {
    "text": "it particularly clear in this example it's not very clear if you look at this like do we actually need that null check",
    "start": "163480",
    "end": "168920"
  },
  {
    "text": "is that string going to be null of course in this very simple code example it is easy because you see get value is",
    "start": "168920",
    "end": "174720"
  },
  {
    "text": "returning null but if you if you would see this in a code base and you have method calls and Method change uh Chang",
    "start": "174720",
    "end": "180640"
  },
  {
    "text": "into other method calls it's close to impossible to figure out that something can be null and ideally you should be",
    "start": "180640",
    "end": "188000"
  },
  {
    "text": "doing null checks at every point in time because you have no idea what's going to be in that variable if that's going to be null or not for Value types it is",
    "start": "188000",
    "end": "195840"
  },
  {
    "text": "easier uh you have integers you have Bulls Longs decimals and you just add that question mark and the question mark",
    "start": "195840",
    "end": "202080"
  },
  {
    "text": "mentions that this can be nullable uh value types aren't really nullable what's going to happen is if you add",
    "start": "202080",
    "end": "208400"
  },
  {
    "text": "this question mark is the compiler is going to do a couple of things and wrap this thing in a generic nullable object",
    "start": "208400",
    "end": "214360"
  },
  {
    "text": "um but still it will give you a couple of options to check whether that thing is null or not uh and it will hint you",
    "start": "214360",
    "end": "220439"
  },
  {
    "text": "at writing codes that does the null check if it's needed so if you look at the previous example versus an example",
    "start": "220439",
    "end": "226439"
  },
  {
    "text": "with value types in this case daytime if you add that question mark there it's very easy to spot for you that okay that",
    "start": "226439",
    "end": "233360"
  },
  {
    "text": "question mark is there so this can be null I should check if this thing has a value but also if you type S dots to",
    "start": "233360",
    "end": "239319"
  },
  {
    "text": "complete in your ID will automatically say look you have the value but also this has value so it's really clear uh",
    "start": "239319",
    "end": "246159"
  },
  {
    "text": "that you should be doing a null check there and that this thing can be null in addition to having its actual value",
    "start": "246159",
    "end": "251560"
  },
  {
    "text": "there so um I think this demonstrates quite well uh why reference types should",
    "start": "251560",
    "end": "258479"
  },
  {
    "text": "have this question mark at some point as well right to make it easier to find out whether you should do that null check so",
    "start": "258479",
    "end": "265160"
  },
  {
    "text": "um what are those nullable reference types if you think about it nullable ref reference types have always been in C",
    "start": "265160",
    "end": "272080"
  },
  {
    "text": "every reference type has been nullable since the beginning of times there's there's no really there's nothing saying",
    "start": "272080",
    "end": "278080"
  },
  {
    "text": "you cannot put null in a reference type with C 8 an enabling nullable reference type that gets flipped around a little",
    "start": "278080",
    "end": "284240"
  },
  {
    "text": "bit where you say okay if there's no question mark behind a string or an object or whatever it's going to be",
    "start": "284240",
    "end": "289919"
  },
  {
    "text": "non-nullable by default but if you add that question mark there's some syntax",
    "start": "289919",
    "end": "294960"
  },
  {
    "text": "there the question mark to say that this nullable reference type is going to be nullable and you can use that to figure",
    "start": "294960",
    "end": "300360"
  },
  {
    "text": "out if something is going to be null or if a return value is going to be null Etc so um if we change our simple code",
    "start": "300360",
    "end": "307800"
  },
  {
    "text": "example from the start there and we do something like this where we say okay we have string question mark get value",
    "start": "307800",
    "end": "314000"
  },
  {
    "text": "still returns null but that's now allowed because we add that question mark what will happen if we run this",
    "start": "314000",
    "end": "321080"
  },
  {
    "text": "code compiler error um depends on whether you enable warnings as errors but yes the compiler is going to tell",
    "start": "321080",
    "end": "327360"
  },
  {
    "text": "you that something is off here the cool thing is it is only a warning so you can run this and when you run this it is",
    "start": "327360",
    "end": "334280"
  },
  {
    "text": "still going to throw that null reference exception so um there is no runtime safety with nullable reference types but",
    "start": "334280",
    "end": "340919"
  },
  {
    "text": "there is some ID inspections some compiler inspections that will help you uh determine whether something can be",
    "start": "340919",
    "end": "346400"
  },
  {
    "text": "null or not and ideally if you make those errors for example you will not be able to compile your project and you",
    "start": "346400",
    "end": "352080"
  },
  {
    "text": "will know okay I need a null check there and I need to make sure that the compiler is happy in figuring out how all of this flows",
    "start": "352080",
    "end": "358479"
  },
  {
    "text": "together um so as you mentioned correctly the above code is going to show some",
    "start": "358479",
    "end": "363520"
  },
  {
    "text": "compiler warnings actually a couple uh first one is going to be on that string s equals get value there that's going to",
    "start": "363520",
    "end": "370240"
  },
  {
    "text": "be um a message saying you look you are taking a potential null value and putting it into a non-annotated string",
    "start": "370240",
    "end": "376639"
  },
  {
    "text": "there that's fishy you shouldn't be doing that and then the next one is going to be on that s. link uh the",
    "start": "376639",
    "end": "383000"
  },
  {
    "text": "compiler is actually going to say look this is potentially null you should fix this and do a null check uh your IDE",
    "start": "383000",
    "end": "389039"
  },
  {
    "text": "will also show those things so visual studio or rer or res sharper they will all pop up something saying look this",
    "start": "389039",
    "end": "394120"
  },
  {
    "text": "can potentially be null you should fix this you should look into this um a nice thing there is that the",
    "start": "394120",
    "end": "401680"
  },
  {
    "text": "compiler and the ID will both help you write better codes uh in terms of null safety the compiler and the ID will give",
    "start": "401680",
    "end": "408720"
  },
  {
    "text": "you those warnings or errors but also all of them have smarts on board um that will help you make your code better so",
    "start": "408720",
    "end": "415360"
  },
  {
    "text": "there's a couple of options to get out of this thing where we have a potential null value in a non-nullable variable",
    "start": "415360",
    "end": "420879"
  },
  {
    "text": "there uh one is that the ID will suggest to make this a string question mark So a nullable string the other one is that we",
    "start": "420879",
    "end": "428080"
  },
  {
    "text": "add a fallback value so it will be get value question mark question mark and a default string that's another option to",
    "start": "428080",
    "end": "433800"
  },
  {
    "text": "make this uh work and compile uh the other thing is to actually add a check for null and just throw that's perfectly",
    "start": "433800",
    "end": "440560"
  },
  {
    "text": "valid but at least you covered the fact that this can be null or and this one is important you can also suppress your",
    "start": "440560",
    "end": "446520"
  },
  {
    "text": "nullable warnings so you can tell the compiler look I know what I'm doing most",
    "start": "446520",
    "end": "452000"
  },
  {
    "text": "often you don't but let's let's that let that be a side note uh but most often",
    "start": "452000",
    "end": "457080"
  },
  {
    "text": "when something happens uh and and you add the exclamation mark at the end so you do get value exclamation mark it's",
    "start": "457080",
    "end": "464039"
  },
  {
    "text": "going to be perfectly fine compiler is going to be happy the ID is going to be happy and at runtime things may still",
    "start": "464039",
    "end": "469520"
  },
  {
    "text": "blow up but at least you you handled the null situation there um the exclamation mark by the way",
    "start": "469520",
    "end": "476840"
  },
  {
    "text": "um if you use that who is using them in their codes okay a couple of people um I would say it's a big anti- pattern it's",
    "start": "476840",
    "end": "483680"
  },
  {
    "text": "super helpful while you are migrating your code base but it is a bit of an anti pattern because you are actually",
    "start": "483680",
    "end": "489360"
  },
  {
    "text": "telling the compiler a lie and um the runtime May punish you for that so be",
    "start": "489360",
    "end": "494680"
  },
  {
    "text": "careful with them cool let's talk a little bit about flow analysis how does the compiler make",
    "start": "494680",
    "end": "500599"
  },
  {
    "text": "this all work how does it surface and and how does this really go and instead of staying on slides let's maybe dive",
    "start": "500599",
    "end": "507120"
  },
  {
    "text": "into code a little bit and see how things work so I have that code example that I had on my slides earlier and you",
    "start": "507120",
    "end": "513760"
  },
  {
    "text": "will see that those errors that I had are showing up here so if I hover this get value you will she uh you will see",
    "start": "513760",
    "end": "519760"
  },
  {
    "text": "that I'm potentially converting a null value into a non-nullable string so that's not a good thing I can Al enter",
    "start": "519760",
    "end": "525839"
  },
  {
    "text": "on that and fix this thing and for example make it non-nullable what's interesting though",
    "start": "525839",
    "end": "531800"
  },
  {
    "text": "is that um all of the flow analysis you will get in the IDE and in the compiler",
    "start": "531800",
    "end": "537000"
  },
  {
    "text": "is actually looking at the codes and how you hand handling null checks so maybe again this is not super valid code and",
    "start": "537000",
    "end": "543519"
  },
  {
    "text": "it's something that you probably should not be doing but if you do something like if s is not equal null you will see",
    "start": "543519",
    "end": "550279"
  },
  {
    "text": "that this s. length warning that we just had is disappearing so the compiler and the ID immediately pick up that you are",
    "start": "550279",
    "end": "556320"
  },
  {
    "text": "actually doing a null check and that you are handling the case of this being potentially null so if I undo this code",
    "start": "556320",
    "end": "562320"
  },
  {
    "text": "change you will see that the S all of a sudden gets a squeal with that error and uh back and forth same thing with just",
    "start": "562320",
    "end": "569600"
  },
  {
    "text": "uh changing this so if I um change this this warning will disappear but now I get a warning here saying look you say",
    "start": "569600",
    "end": "576320"
  },
  {
    "text": "that you're returning an actual string but you're returning null in this case uh and then to make the example complete",
    "start": "576320",
    "end": "582360"
  },
  {
    "text": "I can also add the exclamation mark and you will see all of the errors are gone wow not something you should be doing",
    "start": "582360",
    "end": "588640"
  },
  {
    "text": "but just to demonstrate that it's quite smart um and it's quite helpful to get all of those hints in your code base and",
    "start": "588640",
    "end": "595320"
  },
  {
    "text": "adding those annotations really makes it easy for you to determine whether you you should be doing a null check",
    "start": "595320",
    "end": "600360"
  },
  {
    "text": "somewhere or handle a null case or not uh I have another example here with",
    "start": "600360",
    "end": "606079"
  },
  {
    "text": "VAR uh VAR is an interesting thing because the compiler will always treat VAR as being nullable so this is a",
    "start": "606079",
    "end": "612720"
  },
  {
    "text": "string if he would show the type here or change the actual type this is going to be the actual type that the compiler",
    "start": "612720",
    "end": "618240"
  },
  {
    "text": "sees here it's always going to treat this as uh nullable the reason for that",
    "start": "618240",
    "end": "623560"
  },
  {
    "text": "is that strings and and objects and so on in C are mutable so we can always change them so that means if you have a",
    "start": "623560",
    "end": "630440"
  },
  {
    "text": "VAR the compiler in this case will figure out that s. link is accessible because you have an empty string in",
    "start": "630440",
    "end": "636680"
  },
  {
    "text": "there but because at any point in code if you load a database uh record using",
    "start": "636680",
    "end": "641720"
  },
  {
    "text": "Entity framework or something this can happen and there can be a no value in there and um this is why the compiler is",
    "start": "641720",
    "end": "647920"
  },
  {
    "text": "always going to treat VAR as nullable and then the flow analysis is going to figure out whether something is a",
    "start": "647920",
    "end": "653680"
  },
  {
    "text": "warning or not but uh it's very subtle if in your code all of a sudden you add",
    "start": "653680",
    "end": "659519"
  },
  {
    "text": "this line of codes a lot of warnings are going to light up so if you really want to be sure about the fact that something",
    "start": "659519",
    "end": "665440"
  },
  {
    "text": "is non-nullable you should be doing something like this where you say okay this is a string and then you get a",
    "start": "665440",
    "end": "670920"
  },
  {
    "text": "warning saying okay look this assignment of null is not something you want to do here because you said that this is never",
    "start": "670920",
    "end": "676320"
  },
  {
    "text": "going to be null so that's a really important distinction and VAR even though I love VAR um for long time it is",
    "start": "676320",
    "end": "684880"
  },
  {
    "text": "kind of uh tricky if you assign a null value at some point because there's going to be a lot of warnings but it's",
    "start": "684880",
    "end": "690440"
  },
  {
    "text": "it's allowed to do that all right so flow analysis the IDE",
    "start": "690440",
    "end": "696360"
  },
  {
    "text": "and the compiler are going to go over all of the codes that you have and based on the codepad based on null checks that",
    "start": "696360",
    "end": "702440"
  },
  {
    "text": "are happening and so on it will show or hide some of the warnings that are there and determine whether in a particular",
    "start": "702440",
    "end": "707959"
  },
  {
    "text": "case something can be null or not um using VAR again is always",
    "start": "707959",
    "end": "713079"
  },
  {
    "text": "considered nullable if there's an if that checks for something that is not null for example with that far it's",
    "start": "713079",
    "end": "719120"
  },
  {
    "text": "going to be fine but remember since things are immutable objects and strings",
    "start": "719120",
    "end": "724279"
  },
  {
    "text": "uh are mutable sorry uh you can actually always assign a null value there and that means that all of a sudden your",
    "start": "724279",
    "end": "730360"
  },
  {
    "text": "code will light up as a Christmas tree and you will see that that yeah you're essentially missing up things um this",
    "start": "730360",
    "end": "737240"
  },
  {
    "text": "null forgiving operator or the damit operator as it used to be called long ago hence the title of the talk uh",
    "start": "737240",
    "end": "743320"
  },
  {
    "text": "suppresses the warnings so you can do that if you're migrating and you want to hide some warnings temporarily",
    "start": "743320",
    "end": "748959"
  },
  {
    "text": "absolutely go for it it's quite useful to filter out all of the warnings that may be there in your code base but again",
    "start": "748959",
    "end": "754959"
  },
  {
    "text": "remember it is a bit of an antipattern because you're essentially disabling your nullability analysis for both the",
    "start": "754959",
    "end": "761120"
  },
  {
    "text": "compiler and the ID and it's really easy to shoot yourself in the foot at runtime with that and you won't get a warning",
    "start": "761120",
    "end": "767120"
  },
  {
    "text": "while designing your codes so in summary Noble reference types don't give you runtime safety they",
    "start": "767120",
    "end": "774160"
  },
  {
    "text": "give you safety well at least a feeling of safety while um designing your your code and compiling your code so in the",
    "start": "774160",
    "end": "780839"
  },
  {
    "text": "ID and the compiler you will get some warnings and errors depending on how you can configure it um but what you will",
    "start": "780839",
    "end": "787399"
  },
  {
    "text": "get is a lot better static flow analysis on your code you will actually see um what is going on where you should be",
    "start": "787399",
    "end": "793839"
  },
  {
    "text": "applying null checks Etc so it's really useful there n forgiving operator again",
    "start": "793839",
    "end": "799399"
  },
  {
    "text": "use it when you need it but be careful with it and ideally use it as few times as possible in your code",
    "start": "799399",
    "end": "806279"
  },
  {
    "text": "base cool now let's Let's uh switch gears we've now seen what nullable reference types are and what they mean",
    "start": "806279",
    "end": "812760"
  },
  {
    "text": "and don't mean um let's maybe look at how they are implemented in CP um",
    "start": "812760",
    "end": "818800"
  },
  {
    "text": "probably a safety warning here I'm going to show some Intermediate Language codes to see how it's going on under the hoods",
    "start": "818800",
    "end": "824800"
  },
  {
    "text": "the ilil really doesn't matter what does matter is the attributes that are being added I'll show them in a second um and",
    "start": "824800",
    "end": "831320"
  },
  {
    "text": "you can use them if you use reflection for example um because it might be that at runtime you are constructing objects",
    "start": "831320",
    "end": "837600"
  },
  {
    "text": "it's still useful at that points to make sure that you never put a null value in into something that you didn't expect a",
    "start": "837600",
    "end": "843440"
  },
  {
    "text": "null value so again looking at reference types and value types you will see that",
    "start": "843440",
    "end": "849480"
  },
  {
    "text": "value types are surrounded with this magic nullable um generic class so it's",
    "start": "849480",
    "end": "854720"
  },
  {
    "text": "really easy if you use reflection or something to figure out if a value type is nullable because you automatically",
    "start": "854720",
    "end": "860120"
  },
  {
    "text": "get that type information and you can see okay this integer is wrapped in a nullable so this can be null in some",
    "start": "860120",
    "end": "865680"
  },
  {
    "text": "cases reference types though historically have always been nullable and nothing changes in that aspect if",
    "start": "865680",
    "end": "872480"
  },
  {
    "text": "you use reflection for example uh everything is nullable so even if you have a non-nullable string for example",
    "start": "872480",
    "end": "878600"
  },
  {
    "text": "you can still use reflection and just put a null in there it's absolutely fine and again you will not get a warning",
    "start": "878600",
    "end": "883880"
  },
  {
    "text": "about that um so with that information how does the compiler and the ID",
    "start": "883880",
    "end": "889120"
  },
  {
    "text": "actually know about um nullability and whether you're actually telling it that something can be null or not null pre C",
    "start": "889120",
    "end": "897079"
  },
  {
    "text": "8 um something like like this would yield um some Intermediate Language so you would write a method saying string",
    "start": "897079",
    "end": "903839"
  },
  {
    "text": "get string one uh and that is returning an empty string you would get some Intermediate Language with exactly the",
    "start": "903839",
    "end": "909920"
  },
  {
    "text": "same characteristics you are returning a string that is nullable always because it's C and this is how it's always been",
    "start": "909920",
    "end": "917600"
  },
  {
    "text": "and it's quite easy the mapping of the types is easy right um if you look at",
    "start": "917600",
    "end": "922839"
  },
  {
    "text": "the I it's very readable that this is returning a string it's different when you start",
    "start": "922839",
    "end": "928399"
  },
  {
    "text": "adding annotations um if we say look get string 2 is nullable even though we",
    "start": "928399",
    "end": "933880"
  },
  {
    "text": "always return an empty string but we say it is nullable potentially with the question mark there you will still see",
    "start": "933880",
    "end": "939319"
  },
  {
    "text": "in the Intermediate Language codes that the return value is going to be string",
    "start": "939319",
    "end": "944639"
  },
  {
    "text": "so there's no information there about nullability in the return type of the Intermediate Language which means if",
    "start": "944639",
    "end": "950880"
  },
  {
    "text": "you're using vb.net or F sharp to consume this get string 2 methods they will not know about nullability",
    "start": "950880",
    "end": "957600"
  },
  {
    "text": "there the nullability is a custom attribute that only C really looks at",
    "start": "957600",
    "end": "962720"
  },
  {
    "text": "and the custom attribute is this nullable context attribute um that is used by the compiler and by uh by the",
    "start": "962720",
    "end": "970160"
  },
  {
    "text": "IDE to determine whether um the return value there can be null or not null um",
    "start": "970160",
    "end": "976000"
  },
  {
    "text": "nothing really interesting about this one it's the nullable context attribute so again if you want to use reflection there's some helper methods in net",
    "start": "976000",
    "end": "982600"
  },
  {
    "text": "luckily but if you want to use pure reflection to look at nullability this is the attributes to look for the",
    "start": "982600",
    "end": "988839"
  },
  {
    "text": "attribute is given a value in this case the value is going to be two and that value two gives the compiler the",
    "start": "988839",
    "end": "995040"
  },
  {
    "text": "information that it needs to determine what is going on there um the value two",
    "start": "995040",
    "end": "1000399"
  },
  {
    "text": "and these are the potential values the value two means that every reference type in a piece of codes is implicitly",
    "start": "1000399",
    "end": "1006959"
  },
  {
    "text": "annotated with a question mark So in the previous example we had get string two returning a nullable string by setting",
    "start": "1006959",
    "end": "1014279"
  },
  {
    "text": "this value to two in the nullable context attribute there the compiler and the ID know that something is nullable",
    "start": "1014279",
    "end": "1020279"
  },
  {
    "text": "the value can also be one meaning it's not annotated and should be treated as non-nullable by default I know not",
    "start": "1020279",
    "end": "1027720"
  },
  {
    "text": "annotated means non-nullable um and there's also the oblivious Behavior where you can",
    "start": "1027720",
    "end": "1032798"
  },
  {
    "text": "actually say look um add the attribute but just read it like before c 8 where",
    "start": "1032799",
    "end": "1038079"
  },
  {
    "text": "everything could be null there's more attributes uh let's make our method a little bit more",
    "start": "1038079",
    "end": "1044199"
  },
  {
    "text": "interesting we now have get string Tre uh which returns a non-nullable string takes a nullable non-nullable and uh",
    "start": "1044199",
    "end": "1050760"
  },
  {
    "text": "nullable string as the arguments so much nullable in my uh in my words there uh",
    "start": "1050760",
    "end": "1056440"
  },
  {
    "text": "if you look at the Intermediate Language you will see that we still get that nullable context attribute but in this",
    "start": "1056440",
    "end": "1062039"
  },
  {
    "text": "case the value is set to one so the Intermediate Language is telling the ID and the compiler that everything in this",
    "start": "1062039",
    "end": "1068919"
  },
  {
    "text": "get string three method should be treated as non-nullable however we have that string",
    "start": "1068919",
    "end": "1075159"
  },
  {
    "text": "uh a and string C that are nullable and those are added by adding those nullable attributes so there's the default for",
    "start": "1075159",
    "end": "1081960"
  },
  {
    "text": "this entire bit of codes but then additional attributes are being added in um in Intermediate Language to say look",
    "start": "1081960",
    "end": "1089240"
  },
  {
    "text": "parameter number uh one and parameter number three are nullable and they have",
    "start": "1089240",
    "end": "1094400"
  },
  {
    "text": "the value two which means that they are annotated with the question mark there so again if you want to look into",
    "start": "1094400",
    "end": "1099559"
  },
  {
    "text": "reflection you have to look at this nullable context attribute but also the nullable attribute if you want to learn",
    "start": "1099559",
    "end": "1104760"
  },
  {
    "text": "about parameters and things like that I don't expect you to remember this but",
    "start": "1104760",
    "end": "1110919"
  },
  {
    "text": "just in case you want to look at uh reflection and so on that is quite useful um so the default for the method",
    "start": "1110919",
    "end": "1116720"
  },
  {
    "text": "is that nullable context attribute and per parameter you will see that there's a nullable attribute as",
    "start": "1116720",
    "end": "1122039"
  },
  {
    "text": "well right um the compiler tries to emit as few of those attributes as possible",
    "start": "1122039",
    "end": "1128640"
  },
  {
    "text": "so uh if you're using reflection for example and you want to call into a method with all of these annotations and you want to check those things you",
    "start": "1128640",
    "end": "1135240"
  },
  {
    "text": "really have to check all of the different cases because the compiler may change whatever is in there based on",
    "start": "1135240",
    "end": "1140919"
  },
  {
    "text": "whether you add or remove a parameter so it tries to emit as few attributes as possible the reason for that is it's all",
    "start": "1140919",
    "end": "1147880"
  },
  {
    "text": "additional metadata that the compiler and the ID have to parse so um the compiler really tries to keep it as low",
    "start": "1147880",
    "end": "1154039"
  },
  {
    "text": "as possible to make sure that um there's no not too many of them question",
    "start": "1154039",
    "end": "1160039"
  },
  {
    "text": "yes this is a good question so for the people watching the stream the question was does this contradict the previous",
    "start": "1167240",
    "end": "1173400"
  },
  {
    "text": "example because there's a default uh saying one thing and then everything else is uh is a different one yes and no",
    "start": "1173400",
    "end": "1180320"
  },
  {
    "text": "so if we look at the codes the default here is uh one which means everything is non-nullable by default and that is",
    "start": "1180320",
    "end": "1187320"
  },
  {
    "text": "valid for our parameter zero which is our return value the string um in the",
    "start": "1187320",
    "end": "1192400"
  },
  {
    "text": "public string and also for string B so that's essentially two of those cases",
    "start": "1192400",
    "end": "1197600"
  },
  {
    "text": "two of the other case and in this case the compiler just says okay let's let's do it this way if you would have uh an",
    "start": "1197600",
    "end": "1203919"
  },
  {
    "text": "additional nullable parameter for example there's a big chance that this would be value two and would actually say that this is nullable by default",
    "start": "1203919",
    "end": "1211679"
  },
  {
    "text": "hope that answers the question cool um there's there's another notable",
    "start": "1211679",
    "end": "1217840"
  },
  {
    "text": "context that you can uh look at in your code base and so on and that is probably the one that you will work with most",
    "start": "1217840",
    "end": "1223440"
  },
  {
    "text": "again previous examples were mostly about reflection uh if you want to surface notable refence types there's a",
    "start": "1223440",
    "end": "1229039"
  },
  {
    "text": "couple of options that you can configure in The nullable annotation context in your projects so in your codes you can",
    "start": "1229039",
    "end": "1235880"
  },
  {
    "text": "always add this hash nullable and then a specific value to configure what the nullability analysis should be doing for",
    "start": "1235880",
    "end": "1242679"
  },
  {
    "text": "a piece of code uh you can also add this in your project value and can configure the the project wide setting for how you",
    "start": "1242679",
    "end": "1249400"
  },
  {
    "text": "want the surface nullability possible values for that are disable essentially",
    "start": "1249400",
    "end": "1254880"
  },
  {
    "text": "say look I don't care about nullability just give me like a good C 6 days um I",
    "start": "1254880",
    "end": "1260600"
  },
  {
    "text": "don't want to mess with this there's enable which gives you all of the bells and whistles and will give you potentially a lot of warnings if you",
    "start": "1260600",
    "end": "1267120"
  },
  {
    "text": "have an existing code base right um there's also warnings that gives you all",
    "start": "1267120",
    "end": "1272440"
  },
  {
    "text": "of the analysis but will not really um go as deep as the enable um feature",
    "start": "1272440",
    "end": "1277880"
  },
  {
    "text": "there might be useful during migration might not be useful there's also the annotations uh option that you can give",
    "start": "1277880",
    "end": "1283799"
  },
  {
    "text": "there which is kind of weird to me um because that essentially tells the compiler look you don't have to analyze",
    "start": "1283799",
    "end": "1290080"
  },
  {
    "text": "anything in there but when you compile this stuff I want you to add that nullable context attribute and all of that might be useful if you know what",
    "start": "1290080",
    "end": "1297120"
  },
  {
    "text": "you're doing but it it's it's yeah I don't think it makes a lot of sense in most codes ideally we all go to just",
    "start": "1297120",
    "end": "1303480"
  },
  {
    "text": "enable and sets uh treat warnings as errors which context do you use in your",
    "start": "1303480",
    "end": "1309279"
  },
  {
    "text": "existing projects well for new projects and I'm happy that this is the default in new projects in c 7 or in net 6 7 and",
    "start": "1309279",
    "end": "1317679"
  },
  {
    "text": "8 uh it's always enabled if you are migrating existing code from a previous",
    "start": "1317679",
    "end": "1323880"
  },
  {
    "text": "era or something uh as usual in it it depends um so that means there's a",
    "start": "1323880",
    "end": "1329520"
  },
  {
    "text": "couple of options on how you can apply nullability and can configure your projects um there's a lot of people I've",
    "start": "1329520",
    "end": "1335200"
  },
  {
    "text": "seen that are disabling nullability as a default and then enabling things file by",
    "start": "1335200",
    "end": "1340360"
  },
  {
    "text": "file until they are true the entire code base to make sure that everything is set up that's possible and probably on",
    "start": "1340360",
    "end": "1346840"
  },
  {
    "text": "bigger projects this is is the the best way to go because otherwise you will drown in the warnings that are",
    "start": "1346840",
    "end": "1352320"
  },
  {
    "text": "there uh there's also the the group that says enable as the default that's a really cool thing but if you have a big",
    "start": "1352320",
    "end": "1358720"
  },
  {
    "text": "project you're going to have so many warnings and errors that you will probably start crying it is a way to do",
    "start": "1358720",
    "end": "1364559"
  },
  {
    "text": "it um but I wouldn't really recommend it on big projects warnings as a default is also an interesting one you will still",
    "start": "1364559",
    "end": "1370840"
  },
  {
    "text": "see the warnings but you don't get uh the compiler errors for example so again it depends and those an",
    "start": "1370840",
    "end": "1378039"
  },
  {
    "text": "ations as a default I would not go with that one because it doesn't really give you a big benefits so in summary of this",
    "start": "1378039",
    "end": "1384919"
  },
  {
    "text": "section uh you have the nullable context which is what the compiler and the ID will consume and what if you're using",
    "start": "1384919",
    "end": "1390840"
  },
  {
    "text": "reflection for example you can also look at there's also The nullable annotation context which is what you will probably",
    "start": "1390840",
    "end": "1396720"
  },
  {
    "text": "be doing as you are developing where you can essentially trimming everything down enable everything project wide disable",
    "start": "1396720",
    "end": "1403480"
  },
  {
    "text": "everything project wide and gradually maybe enable it file by file or even portions of codes um one by",
    "start": "1403480",
    "end": "1411240"
  },
  {
    "text": "one cool now let's look at annotating your C code let's finally add some",
    "start": "1411240",
    "end": "1416400"
  },
  {
    "text": "annotations because we've seen the theory we've seen what it is let's finally bring it into our C codes a",
    "start": "1416400",
    "end": "1423000"
  },
  {
    "text": "question for all of you is that question mark enough to give you an idea of what the code is doing and what it is",
    "start": "1423000",
    "end": "1429120"
  },
  {
    "text": "returning if you would look at this method for example what it will do is it will create a so-called slug so uh",
    "start": "1429120",
    "end": "1436159"
  },
  {
    "text": "typically when you have a blog post or a news article somewhere that has Capital capitalization that has spaces and all",
    "start": "1436159",
    "end": "1442679"
  },
  {
    "text": "of that uh creating a slug is typically converting everything to lowercase maybe shortening out the shorter words there",
    "start": "1442679",
    "end": "1449320"
  },
  {
    "text": "and replacing the spaces with a dash so that it can be used as a URL in uh in the browser for example this method is",
    "start": "1449320",
    "end": "1456559"
  },
  {
    "text": "taking a uh nullable string value we do a null check there if the value is null",
    "start": "1456559",
    "end": "1461760"
  },
  {
    "text": "we are actually returning null as well uh if it's not null we do whatever the code should be doing there and return",
    "start": "1461760",
    "end": "1468440"
  },
  {
    "text": "the values that we want there is the question mark here enough some will say",
    "start": "1468440",
    "end": "1473679"
  },
  {
    "text": "yes some will say no I'm in the no Camp reason for that is when you write code",
    "start": "1473679",
    "end": "1478919"
  },
  {
    "text": "like this where you have a slug and you say okay I want you to slugify the string this is fine you will still get",
    "start": "1478919",
    "end": "1485080"
  },
  {
    "text": "the warning saying that the slug is potentially null there reason for that is we are returning a potentially null",
    "start": "1485080",
    "end": "1491840"
  },
  {
    "text": "string there right so I would say this is not enough and I would like to see this more uh",
    "start": "1491840",
    "end": "1498279"
  },
  {
    "text": "yeah more fine grade make it better so um you can actually do that you can add",
    "start": "1498279",
    "end": "1505279"
  },
  {
    "text": "more attributes on top of the ones that the compiler will emit to make this more fine grained and give the compiler and",
    "start": "1505279",
    "end": "1510880"
  },
  {
    "text": "the ID more information about how things should work um and the attributes are",
    "start": "1510880",
    "end": "1516279"
  },
  {
    "text": "bit ridiculous in naming sometimes uh but they are actually quite useful because in this case you actually saying",
    "start": "1516279",
    "end": "1522039"
  },
  {
    "text": "look the return value that string that is nullable there is going to be non- null if some parameter is also non-null",
    "start": "1522039",
    "end": "1529120"
  },
  {
    "text": "and in this case that is going to be value so here we are telling the compiler look if we get a non-nullable",
    "start": "1529120",
    "end": "1535000"
  },
  {
    "text": "string in value the return value is also going to be nonnull if we get null as the value parameter it is also going to",
    "start": "1535000",
    "end": "1542039"
  },
  {
    "text": "be null and that gives you the nice effect of this where in the first case if you pass in null you actually get the",
    "start": "1542039",
    "end": "1548320"
  },
  {
    "text": "warning there with that first Slug and it's going to say look this is potentially null and this is going to blow up at runtime uh but in the second",
    "start": "1548320",
    "end": "1555120"
  },
  {
    "text": "case we are passing an actual string and you will see that this is fine because it is going to be n",
    "start": "1555120",
    "end": "1560559"
  },
  {
    "text": "null Yeah",
    "start": "1560559",
    "end": "1563799"
  },
  {
    "text": "question okay so question here was uh is it better to use that damage operator there at the exclamation mark instead of",
    "start": "1571679",
    "end": "1579279"
  },
  {
    "text": "this uh this non null there um I would say no because it's still an empty pattern you",
    "start": "1579279",
    "end": "1585640"
  },
  {
    "text": "know that at this point it's going to be n and it's cool but that does mean that in every single case in your code base",
    "start": "1585640",
    "end": "1592120"
  },
  {
    "text": "where you are consuming this codes you will have to add that exclamation mark telling there the compiler H look this",
    "start": "1592120",
    "end": "1598159"
  },
  {
    "text": "is going to be non null so this is essentially doing the work just one time helping the flow analyzer to make it",
    "start": "1598159",
    "end": "1604240"
  },
  {
    "text": "better for everyone um also Imagine you have uh these annotations in your codes",
    "start": "1604240",
    "end": "1609760"
  },
  {
    "text": "but another team in the company is consuming this codes thanks to these attributes they will also know that this",
    "start": "1609760",
    "end": "1615159"
  },
  {
    "text": "cannot be null because maybe they have no idea what the implementation of this method is right so if they at the",
    "start": "1615159",
    "end": "1620760"
  },
  {
    "text": "exclamation mark they are in dangerous territory they have no idea what's potentially going to happen but in this",
    "start": "1620760",
    "end": "1626640"
  },
  {
    "text": "case it you get the information for uh for the compiler and the ID does that make",
    "start": "1626640",
    "end": "1634919"
  },
  {
    "text": "sense uh yeah you could create an overload that just accepts uh non-nullable for example and then use",
    "start": "1646520",
    "end": "1652559"
  },
  {
    "text": "that that's also an option indeed yeah cool uh so yeah in this case this",
    "start": "1652559",
    "end": "1658640"
  },
  {
    "text": "is quite nice because you only have one method and you're actually telling the compiler and the ID that there is only one way of doing things uh and then it's",
    "start": "1658640",
    "end": "1665799"
  },
  {
    "text": "just to look at what value we are passing in and then based on that the return value is going to change as well",
    "start": "1665799",
    "end": "1671600"
  },
  {
    "text": "uh there's a couple of others uh so if you look at string. is null or empty for example in The NET Framework you will",
    "start": "1671600",
    "end": "1677240"
  },
  {
    "text": "find that there's this not null when attribute there um I'm not really a big",
    "start": "1677240",
    "end": "1682440"
  },
  {
    "text": "fan of how this works because it's kind of inverse uh but what's Happening Here is essentially when is null or empty",
    "start": "1682440",
    "end": "1690240"
  },
  {
    "text": "returns false the compiler will know that the value past or the the the",
    "start": "1690240",
    "end": "1695559"
  },
  {
    "text": "parameter that is value here is going to be non null it's it's very backwards to",
    "start": "1695559",
    "end": "1700640"
  },
  {
    "text": "think about it like that but for the comparator this is quite useful because all of a sudden if you do a null check like this it knows the value is not",
    "start": "1700640",
    "end": "1707080"
  },
  {
    "text": "going to be null and is able to change the flow analysis there there's a couple more there that are really head Twisters",
    "start": "1707080",
    "end": "1713960"
  },
  {
    "text": "I find it a bit backwards and counterintuitive but uh yeah this is how it works I would have loved to see the",
    "start": "1713960",
    "end": "1719640"
  },
  {
    "text": "attribute on the method saying look when the value is not null then it's going to",
    "start": "1719640",
    "end": "1724919"
  },
  {
    "text": "return true or false but this is what we got cool um this does mean that you get",
    "start": "1724919",
    "end": "1731200"
  },
  {
    "text": "that null check there um you could do an explicit null check so if string is not equals null for example but by doing",
    "start": "1731200",
    "end": "1738120"
  },
  {
    "text": "string do is null or empty we're actually telling the compiler that that string do is null or empty is also a",
    "start": "1738120",
    "end": "1743360"
  },
  {
    "text": "null check uh so you will see before doing that null check the S has the squiggle saying look this is potentially",
    "start": "1743360",
    "end": "1749360"
  },
  {
    "text": "null not safe to do uh but after doing that null check there and returning from the methods the compiler and the ID will",
    "start": "1749360",
    "end": "1755960"
  },
  {
    "text": "know that s is never going to be null in that case cool uh there's more fine grained",
    "start": "1755960",
    "end": "1762919"
  },
  {
    "text": "annotations there's uh quite a bit um there's a link on the slides I'll share the slides out afterwards you will see",
    "start": "1762919",
    "end": "1768600"
  },
  {
    "text": "there's preconditions post conditions conditional post conditions and failure conditions I know there's a lot of text",
    "start": "1768600",
    "end": "1774840"
  },
  {
    "text": "on this slid so instead of just going over that I'll just give you a quick demo of what they mean and what they can",
    "start": "1774840",
    "end": "1780840"
  },
  {
    "text": "do so back to codes if we look at annotating our codes I have a couple of",
    "start": "1780840",
    "end": "1786240"
  },
  {
    "text": "examples there preconditions for example uh can to make this all a little bit smaller there we go so I have a",
    "start": "1786240",
    "end": "1793399"
  },
  {
    "text": "class person with a property username and that property is using a backing field called username and the backing",
    "start": "1793399",
    "end": "1800919"
  },
  {
    "text": "field has a default value if you don't set a username it's going to be a good",
    "start": "1800919",
    "end": "1806360"
  },
  {
    "text": "it I also want people consuming this codes to be able to set the username to",
    "start": "1806360",
    "end": "1811679"
  },
  {
    "text": "null and if they do that I want to just reassign a new Goods to the property just to make sure that there's always",
    "start": "1811679",
    "end": "1817880"
  },
  {
    "text": "going to be a value what that essentially means is that um I want to tell the compiler look you can write a",
    "start": "1817880",
    "end": "1825519"
  },
  {
    "text": "null value into this property but you can never read a null value because there's always going to be a value so",
    "start": "1825519",
    "end": "1831080"
  },
  {
    "text": "what you can do there is add the allow null attribute and this is going to essentially make sure that the compiler",
    "start": "1831080",
    "end": "1837519"
  },
  {
    "text": "knows that that is the case so if you look at the grade out code when I don't have the attributes you will see that",
    "start": "1837519",
    "end": "1843640"
  },
  {
    "text": "the IDE in the compiler at this point know that value is always going to be non-nullable so this null check and then",
    "start": "1843640",
    "end": "1850279"
  },
  {
    "text": "returning AIT is not something that will ever be run because we expect this to always be non-nullable right if you if",
    "start": "1850279",
    "end": "1857279"
  },
  {
    "text": "you add this allow null you will see it light up because now we have the case where someone can pass in a null value",
    "start": "1857279",
    "end": "1863679"
  },
  {
    "text": "um but where reading the value is always going to be non null if I look at the usages there um if I use that person",
    "start": "1863679",
    "end": "1870320"
  },
  {
    "text": "class you will see that I can set username to null right now if I comment out my allow null again you will see",
    "start": "1870320",
    "end": "1877080"
  },
  {
    "text": "that we get a warning saying look you cannot really set this thing to null because you told me that this is always",
    "start": "1877080",
    "end": "1883360"
  },
  {
    "text": "non-nullable uh can be useful to do something like this you can also do the in verse where you say look this allow",
    "start": "1883360",
    "end": "1888919"
  },
  {
    "text": "null uh where you can add a nullable um a nullability annotation there on the on",
    "start": "1888919",
    "end": "1894639"
  },
  {
    "text": "the return value of the username and you can still say look um I don't want you to be able to set this to null but I",
    "start": "1894639",
    "end": "1900799"
  },
  {
    "text": "know that you want to make maybe read a null value from this one so that's a precondition",
    "start": "1900799",
    "end": "1908639"
  },
  {
    "text": "yes yeah so question is is something you would recommend using um depends on the code design I would say um I would",
    "start": "1915360",
    "end": "1922440"
  },
  {
    "text": "personally not always go for this but maybe you have those cases where you have a default being uh put in place in",
    "start": "1922440",
    "end": "1928320"
  },
  {
    "text": "a in a property somewhere and maybe this is something you want to tell the compiler look we have this code we are",
    "start": "1928320",
    "end": "1933639"
  },
  {
    "text": "catching this situation and uh this attribute is something to do that so",
    "start": "1933639",
    "end": "1938840"
  },
  {
    "text": "depends on your preference I would say uh there's also post conditions kind of similar um in this case we can do the",
    "start": "1938840",
    "end": "1946320"
  },
  {
    "text": "opposite side of the things again that person class we now have a middle name if we add this uh middle name property",
    "start": "1946320",
    "end": "1952919"
  },
  {
    "text": "we can say look reading it can be null but setting it will always be non-nullable so not everyone has a",
    "start": "1952919",
    "end": "1959080"
  },
  {
    "text": "middle name so what you can do is say okay this thing is going to be maybe null and we're now telling the compiler",
    "start": "1959080",
    "end": "1964799"
  },
  {
    "text": "that look you can get back a null value for the middle name property if you read it but if someone is writing into it",
    "start": "1964799",
    "end": "1972279"
  },
  {
    "text": "it's always going to be non-null also ofct because",
    "start": "1972279",
    "end": "1979039"
  },
  {
    "text": "well this is exactly the intent of the attribute there so the question was is this not contradictory because you are",
    "start": "1992120",
    "end": "1997559"
  },
  {
    "text": "saying this is non-nullable the backing field is nullable and you are lying to the compiler by just returning null in",
    "start": "1997559",
    "end": "2003559"
  },
  {
    "text": "this case well by adding this maybe null attribute you are telling the compiler giving the extra information that um you",
    "start": "2003559",
    "end": "2010760"
  },
  {
    "text": "cannot set it to null but reading it is always going to be fine for example yeah",
    "start": "2010760",
    "end": "2016080"
  },
  {
    "text": "oh sorry where where reading it is potentially going to be null but writing it uh is",
    "start": "2016080",
    "end": "2022120"
  },
  {
    "text": "fine so you can essentially give more information there yeah so reading the",
    "start": "2022120",
    "end": "2027600"
  },
  {
    "text": "middle name here you're actually telling the compiler this can potentially be null and you actually see it in the in",
    "start": "2027600",
    "end": "2032960"
  },
  {
    "text": "the hint there that this is potentially null but writing it is not allowed you actually always expect a value when you",
    "start": "2032960",
    "end": "2039200"
  },
  {
    "text": "write into this property so again giving the compiler more information should you use it depends on your codebase I would",
    "start": "2039200",
    "end": "2045840"
  },
  {
    "text": "say but it is quite nice that you can actually tell the compiler about all of those specific cases um and make it",
    "start": "2045840",
    "end": "2051800"
  },
  {
    "text": "better for all developers in your in your team there's the conditionals we already saw this kind of um where you",
    "start": "2051800",
    "end": "2058760"
  },
  {
    "text": "can say look the read of or this parameter value is not going to be null when the return value of this method is",
    "start": "2058760",
    "end": "2065398"
  },
  {
    "text": "true so if if we add this attribute we actually have this situation where we have a string that we set to null if we",
    "start": "2065399",
    "end": "2073240"
  },
  {
    "text": "call that is valid username methods the compiler will know that this is also performing a null check by adding the",
    "start": "2073240",
    "end": "2079358"
  },
  {
    "text": "attribute and it's going to be perfectly fine with calling into the length property there but if we're in the",
    "start": "2079359",
    "end": "2084800"
  },
  {
    "text": "different branch there where it is returning false the compiler also knows that the username is still potentially",
    "start": "2084800",
    "end": "2091200"
  },
  {
    "text": "null and it will give you that warning so again more fine grade annotations to make it easier for the compiler to",
    "start": "2091200",
    "end": "2098079"
  },
  {
    "text": "determine what is going on there uh there's a couple of helpers as well these I find quite interesting I",
    "start": "2098079",
    "end": "2104839"
  },
  {
    "text": "will say um because they add an attribute on something completely",
    "start": "2104839",
    "end": "2109960"
  },
  {
    "text": "different from the stuff that you are consuming so in this case we have a person the person has a nullable string",
    "start": "2109960",
    "end": "2116800"
  },
  {
    "text": "location and we have a Boolean that is has location and if this one returns",
    "start": "2116800",
    "end": "2123079"
  },
  {
    "text": "true if the return value of this thing is true then the member location is going to be non",
    "start": "2123079",
    "end": "2129839"
  },
  {
    "text": "null adding this attribute means if you use this you can use this person. has",
    "start": "2129839",
    "end": "2135119"
  },
  {
    "text": "location for example and that is now going to be a valid null check for making sure that the location actually",
    "start": "2135119",
    "end": "2140359"
  },
  {
    "text": "has a value so it's a condition essentially saying look if this returns true it's",
    "start": "2140359",
    "end": "2145760"
  },
  {
    "text": "not going to be null in the other case it is going to be null and again you will see that there's a warning",
    "start": "2145760",
    "end": "2152000"
  },
  {
    "text": "there there's a couple more of those uh there's for example a couple where you can apply something to the Constructor",
    "start": "2152000",
    "end": "2157680"
  },
  {
    "text": "saying look if this specific Constructor is called this thing that you marked as nullable is going to be non-nullable so",
    "start": "2157680",
    "end": "2163119"
  },
  {
    "text": "there there's a couple more I would say look at the at the Microsoft website there's a couple of really interesting ones uh there's also failure conditions",
    "start": "2163119",
    "end": "2170880"
  },
  {
    "text": "most IDs do not really do anything with it but the compiler does something with it uh you have this does not return",
    "start": "2170880",
    "end": "2177520"
  },
  {
    "text": "annotation which is essentially going to tell the compiler look if you call into this method it's never going to return",
    "start": "2177520",
    "end": "2183800"
  },
  {
    "text": "so everything after that it doesn't matter if you're doing null check or not it's just not going to be",
    "start": "2183800",
    "end": "2189200"
  },
  {
    "text": "executed so it's not really telling anything about it's it can be null or non null but it's kind of useful to tell",
    "start": "2189200",
    "end": "2195440"
  },
  {
    "text": "the comparator look if this thing is called then nothing is going to happen because you're safe",
    "start": "2195440",
    "end": "2202200"
  },
  {
    "text": "there cool back to the slides all right there's a Microsoft annotations in C um for those of you who",
    "start": "2202200",
    "end": "2210119"
  },
  {
    "text": "have been using resharper writer for years I you also be familiar potentially with the jet brains",
    "start": "2210119",
    "end": "2215560"
  },
  {
    "text": "annotations uh um anyone using those in their code base okay a couple of people",
    "start": "2215560",
    "end": "2220640"
  },
  {
    "text": "that's nice uh it is quite interesting that uh Entity framework core for example is shipping with those",
    "start": "2220640",
    "end": "2226400"
  },
  {
    "text": "annotations as well because we allow a little bit more fine grained information even so it's kind of cool that Entity",
    "start": "2226400",
    "end": "2232400"
  },
  {
    "text": "framework is doing that because you get better nullability analysis there uh what is cool is if you're using jet",
    "start": "2232400",
    "end": "2238240"
  },
  {
    "text": "brains annotations you will also have the option if you're using resharper for example to convert those into C",
    "start": "2238240",
    "end": "2244960"
  },
  {
    "text": "annotations so the talk is about migrating for those people who raised their hand and said that they are using",
    "start": "2244960",
    "end": "2250400"
  },
  {
    "text": "the jet brains ones you can essentially Alt Enter on one of them and just say update everything to make use of the C",
    "start": "2250400",
    "end": "2256680"
  },
  {
    "text": "ones which is quite useful um nullability and generics I I",
    "start": "2256680",
    "end": "2264160"
  },
  {
    "text": "love this really small codes example there um there's a couple of cases there",
    "start": "2264160",
    "end": "2269240"
  },
  {
    "text": "right you have generics which is always going to be a type containing another type and potentially even more types so",
    "start": "2269240",
    "end": "2274760"
  },
  {
    "text": "you can have a list that is not non nullable of strings that are non-nullable you can have a non-nullable",
    "start": "2274760",
    "end": "2280280"
  },
  {
    "text": "list of strings that are nullable and you can have a nullable list of strings that are nullable so uh just add an",
    "start": "2280280",
    "end": "2286079"
  },
  {
    "text": "question mark wherever you need it it's quite easy to express what is going on with those types but just in case I want",
    "start": "2286079",
    "end": "2292560"
  },
  {
    "text": "to show you this that you have all of the options that you uh may want to use in your codes with methods and return",
    "start": "2292560",
    "end": "2298800"
  },
  {
    "text": "values for example there's a couple of things that you will have to do so in this case with that find methods there's",
    "start": "2298800",
    "end": "2304119"
  },
  {
    "text": "no real way to return a t question mark in this case so you will have to say that the return value has a maybe null",
    "start": "2304119",
    "end": "2311000"
  },
  {
    "text": "attribute in this case so you will have to do that if you want to do this uh",
    "start": "2311000",
    "end": "2316040"
  },
  {
    "text": "there is a n not null constraint that you can use as well so if you have a right to console method there for",
    "start": "2316040",
    "end": "2321359"
  },
  {
    "text": "example you can say look the item that I'm passing in there can never be null you can do that by adding a constraint",
    "start": "2321359",
    "end": "2327000"
  },
  {
    "text": "there so in generics it's it's kind of a a little bit different from the rest of your code but it's still very doable to",
    "start": "2327000",
    "end": "2333000"
  },
  {
    "text": "express and tell the compiler uh how things should be working",
    "start": "2333000",
    "end": "2338520"
  },
  {
    "text": "yeah uh where you do the where T is not null uh you can you cannot return a a t",
    "start": "2341720",
    "end": "2347960"
  },
  {
    "text": "question mark no because you are saying look the t is going to be n null in this case so it's always going to",
    "start": "2347960",
    "end": "2355160"
  },
  {
    "text": "beow um in the previous example yes so with the maybe null that is in indeed going to be the case with the where not",
    "start": "2356359",
    "end": "2362599"
  },
  {
    "text": "null constraint it's not going to be the case yeah",
    "start": "2362599",
    "end": "2368440"
  },
  {
    "text": "uh if you don't add the constraint of uh T is a class for example it will not let you at the question mark in that",
    "start": "2372160",
    "end": "2378560"
  },
  {
    "text": "case yeah the the reason for that is the difference between value types and reference types and because the compiler",
    "start": "2378560",
    "end": "2384920"
  },
  {
    "text": "treats them differently um you will have different results there based on what you want to do so yeah the class constraint also is quite helpful to say",
    "start": "2384920",
    "end": "2391680"
  },
  {
    "text": "look compiler this accepts only a reference type in this case cool uh referenced codes libraries",
    "start": "2391680",
    "end": "2399079"
  },
  {
    "text": "and Frameworks let's talk a little bit about those if you have dependencies",
    "start": "2399079",
    "end": "2404400"
  },
  {
    "text": "that all are annotated and that come with all of those annotations it's actually quite easy to start working with nullable reference types because",
    "start": "2404400",
    "end": "2411319"
  },
  {
    "text": "you will get all of those checks in your code as well and you will learn all about it so if you use string. this n or",
    "start": "2411319",
    "end": "2416440"
  },
  {
    "text": "empty for example you will see that uh you get that flow analysis and that you will get null checks there and the",
    "start": "2416440",
    "end": "2422560"
  },
  {
    "text": "compiler is going to be completely happy with those uh nullable reference types were introduced in C 8 I think it was.",
    "start": "2422560",
    "end": "2429040"
  },
  {
    "text": "nit 5 only where most of the Base Class library was annotated so it took a while for micers have to apply this to all of",
    "start": "2429040",
    "end": "2435680"
  },
  {
    "text": "their libraries but right now pretty much everything is annotated so that's quite helpful many open source libraries",
    "start": "2435680",
    "end": "2442040"
  },
  {
    "text": "are also annotated so that's quite nice um so you can use them in your code and and learn about nullability there um and",
    "start": "2442040",
    "end": "2449160"
  },
  {
    "text": "I would say if you are in a team where you are shipping code for other teams in your company it's super helpful to anot",
    "start": "2449160",
    "end": "2455960"
  },
  {
    "text": "annotate cre your own codes and uh ship your code like that to the other teams in your company because they also will",
    "start": "2455960",
    "end": "2461880"
  },
  {
    "text": "get the benefit of having all of those nullable uh reference types and all of the hints that are in",
    "start": "2461880",
    "end": "2467160"
  },
  {
    "text": "there do remember nullable reference types are not null safety so if you are",
    "start": "2467160",
    "end": "2472480"
  },
  {
    "text": "shipping open source or commercial projects and whatever uh and you are",
    "start": "2472480",
    "end": "2477520"
  },
  {
    "text": "annotating everything you are only giving partial information to the to the consumer of it they will get all of the",
    "start": "2477520",
    "end": "2483440"
  },
  {
    "text": "information at design time and compile time but if you really want to make sure that your code is going to behave as",
    "start": "2483440",
    "end": "2489319"
  },
  {
    "text": "expected it will still have to do null checks if you are shipping that code to third parties so um we saw the example",
    "start": "2489319",
    "end": "2497040"
  },
  {
    "text": "with all of the attributes that were there if someone in another team is using f for example they have no idea",
    "start": "2497040",
    "end": "2503200"
  },
  {
    "text": "what the nullability is going to be and your C codes that they are referencing for example will still have to um have",
    "start": "2503200",
    "end": "2509200"
  },
  {
    "text": "null checks so don't stop using them unless you are in your own world uh your",
    "start": "2509200",
    "end": "2514240"
  },
  {
    "text": "own codebase then it's it's may be fine so in summary of this section there's",
    "start": "2514240",
    "end": "2519599"
  },
  {
    "text": "more annotations than just that question mark um you want to use that question mark as well as attributes to uh",
    "start": "2519599",
    "end": "2526079"
  },
  {
    "text": "communicate the intent with the compiler and the IDE so they know what is going on you have compiler annotations if",
    "start": "2526079",
    "end": "2532200"
  },
  {
    "text": "you're using the jet brains ones it's quite easy to mix and match and uh if you are shipping codes to third parties",
    "start": "2532200",
    "end": "2538240"
  },
  {
    "text": "even if it's within your company for example you probably still want to do null checks to make sure that things are",
    "start": "2538240",
    "end": "2544640"
  },
  {
    "text": "safe cool one more question",
    "start": "2544640",
    "end": "2549640"
  },
  {
    "text": "yeah uh so the question is about the required keyword I'm going to cover that in a little bit so um hold your horses",
    "start": "2559640",
    "end": "2566000"
  },
  {
    "text": "for now all right uh some techniques and tools that can help you update your C",
    "start": "2566000",
    "end": "2572280"
  },
  {
    "text": "projects um again I talked about this already a little bit the default nullable annotation context in your",
    "start": "2572280",
    "end": "2578079"
  },
  {
    "text": "projects I would say enable it for new projects if you have existing projects and they're small enough just enable it",
    "start": "2578079",
    "end": "2584079"
  },
  {
    "text": "and spend the day going through all of The nullable annotation warnings you get if it's a big project go file by file",
    "start": "2584079",
    "end": "2591040"
  },
  {
    "text": "maybe even snippet by snippet or just annotate some properties that are there and just work through it um file by file",
    "start": "2591040",
    "end": "2597240"
  },
  {
    "text": "or or snippet by snippet this one um I learned migrating",
    "start": "2597240",
    "end": "2602880"
  },
  {
    "text": "a couple of projects is that it's always interesting to start at the center of your application code so very often",
    "start": "2602880",
    "end": "2609359"
  },
  {
    "text": "classes that have few or zero dependencies to other classes but are being used by by many other classes so",
    "start": "2609359",
    "end": "2616359"
  },
  {
    "text": "typically your dto or pocos whatever you want to call them in your codes are really good candidates to start with",
    "start": "2616359",
    "end": "2622640"
  },
  {
    "text": "because just like with asyn A8 um if you annotate your dto all of a sudden all of",
    "start": "2622640",
    "end": "2628680"
  },
  {
    "text": "the places where that dto is going to be used have nullability information so that's that's quite helpful everything",
    "start": "2628680",
    "end": "2634359"
  },
  {
    "text": "flows through your entire code base typically a small change but you get a lot of information for it how do you",
    "start": "2634359",
    "end": "2640839"
  },
  {
    "text": "find those classes there's the resharper type hierarchy diagram there's tools like independ Visual Studio has",
    "start": "2640839",
    "end": "2646079"
  },
  {
    "text": "architecture tools where you can get nice diagrams like this the interesting thing is not what is on the slide in",
    "start": "2646079",
    "end": "2651680"
  },
  {
    "text": "terms of of of text the arrows are interesting so if you go into this diagram you will see that there's one",
    "start": "2651680",
    "end": "2657319"
  },
  {
    "text": "box that has all incoming arrows that is the one you want to start with because that is one that has few dependencies on",
    "start": "2657319",
    "end": "2663359"
  },
  {
    "text": "others but is dependent on by many other names spes in the projects if you would look at the details of that one in this",
    "start": "2663359",
    "end": "2670160"
  },
  {
    "text": "case it has a couple of classes there also for the classes where do you want to start well in this case the diagram",
    "start": "2670160",
    "end": "2675880"
  },
  {
    "text": "is a little bit of a mess but I found two that are really interesting person and course most of those have incoming",
    "start": "2675880",
    "end": "2682040"
  },
  {
    "text": "dependencies only I think course has one outgoing dependency those are perfect candidates to start with um adding",
    "start": "2682040",
    "end": "2688520"
  },
  {
    "text": "nullable annotations because anything you do there will flow through a lot of places in your code",
    "start": "2688520",
    "end": "2694520"
  },
  {
    "text": "base per class CL um if you disable annotations by default in your project",
    "start": "2694520",
    "end": "2699760"
  },
  {
    "text": "you can enable this thing and then go through every property every parameter every Constructor parameter look at the",
    "start": "2699760",
    "end": "2706160"
  },
  {
    "text": "right usages if they are potentially set to null somewhere you can annotate them with a question mark and say these are",
    "start": "2706160",
    "end": "2712240"
  },
  {
    "text": "non-nullable if not you can just keep them as is and say look these are U or you can add the question mark and and",
    "start": "2712240",
    "end": "2718599"
  },
  {
    "text": "say look this is non-nullable or this is nullable so I'll give you a quick example of how that could work um back",
    "start": "2718599",
    "end": "2726119"
  },
  {
    "text": "to codes I have my location info yes there we go so this is a class it it is really",
    "start": "2726119",
    "end": "2733520"
  },
  {
    "text": "a little bit of a contrived example but it it comes partially from a real project that I came across um we have a",
    "start": "2733520",
    "end": "2739599"
  },
  {
    "text": "location info class there and location info has a country and location and this thing is used to make sure that um that",
    "start": "2739599",
    "end": "2748160"
  },
  {
    "text": "other applications uh can use IP geolocation for example and based on that determine the country and the",
    "start": "2748160",
    "end": "2754319"
  },
  {
    "text": "location so using this um there's a couple of things you can do so ideally",
    "start": "2754319",
    "end": "2759480"
  },
  {
    "text": "we can start with making this uh nullable so we can say nullable enable all of a sudden if we would compile this",
    "start": "2759480",
    "end": "2766040"
  },
  {
    "text": "we would get some warnings and errors uh but now we want to make sure that all of the properties here are actually set to",
    "start": "2766040",
    "end": "2772160"
  },
  {
    "text": "a non-nullable value because we just changed the nullability this is still a this has now become a non-nullable",
    "start": "2772160",
    "end": "2778800"
  },
  {
    "text": "string is that really the case so you could look at usages uh most I will give",
    "start": "2778800",
    "end": "2783960"
  },
  {
    "text": "you a write and read icon where you you can easily see is this being written to or not um in my case there's only a",
    "start": "2783960",
    "end": "2790680"
  },
  {
    "text": "couple of places where the country is being set so what I could do instead instead of find usages is do something",
    "start": "2790680",
    "end": "2797119"
  },
  {
    "text": "like uh Visual Studio has this as well by the way the analyze menu my menu is",
    "start": "2797119",
    "end": "2802480"
  },
  {
    "text": "too big inspect yes I can show the value origin and I can see where this country",
    "start": "2802480",
    "end": "2808440"
  },
  {
    "text": "info can come from so you will see that my Constructor is one of the places where I'm writing into this one but also",
    "start": "2808440",
    "end": "2814200"
  },
  {
    "text": "in this new unknown place um and maybe a couple of more places so I can see the back trace of where the value can come",
    "start": "2814200",
    "end": "2821000"
  },
  {
    "text": "from and you will see that in some cases we are actually setting this stuff so it",
    "start": "2821000",
    "end": "2826319"
  },
  {
    "text": "looks like um this is quite okay for the country let's maybe look at our location",
    "start": "2826319",
    "end": "2834079"
  },
  {
    "text": "how that goes so let's find the right usages there that is in my Constructor okay let's maybe find the right usages",
    "start": "2834079",
    "end": "2840359"
  },
  {
    "text": "of my location there as well so what I can do is I find usages",
    "start": "2840359",
    "end": "2846400"
  },
  {
    "text": "come on yeah anyway uh if that would I should stop using Early Access previews",
    "start": "2846400",
    "end": "2851960"
  },
  {
    "text": "when I do this uh if that would work I would have discovered this location um where I am actually potentially setting",
    "start": "2851960",
    "end": "2858599"
  },
  {
    "text": "a null value to this thing so this is the case that I wanted to discover using those value origin and so on um this is",
    "start": "2858599",
    "end": "2866960"
  },
  {
    "text": "a case where this thing can be null so there's a quick fix there that the ID will suggest and that is okay change the",
    "start": "2866960",
    "end": "2872760"
  },
  {
    "text": "parameter country to nullable string I can do that for all of the related symbols and boom doing that my location",
    "start": "2872760",
    "end": "2879680"
  },
  {
    "text": "info now has a nullable country and a nullable country property was this a",
    "start": "2879680",
    "end": "2886240"
  },
  {
    "text": "good approach maybe in your code base but I would say maybe there's a better approach because now all of a sudden we",
    "start": "2886240",
    "end": "2892240"
  },
  {
    "text": "would have to do null checks on Country everywhere in the codebase the country is being used because we just said this",
    "start": "2892240",
    "end": "2898079"
  },
  {
    "text": "can be null so maybe we want to undo that change and instead of just uh",
    "start": "2898079",
    "end": "2903359"
  },
  {
    "text": "checking whether the result from my database I got is not null maybe I want to add another check where I say okay",
    "start": "2903359",
    "end": "2910319"
  },
  {
    "text": "result uh. country. name is not null and maybe I want to add",
    "start": "2910319",
    "end": "2917599"
  },
  {
    "text": "the same check for my I think it's city that is in there as well location City",
    "start": "2917599",
    "end": "2923040"
  },
  {
    "text": "yep uh add more null checks so that this is always going to new up a new location info with non-nullable values and now",
    "start": "2923040",
    "end": "2930680"
  },
  {
    "text": "all of a sudden I made my code better with a small design chain uh small design change but now nowhere in my code",
    "start": "2930680",
    "end": "2938200"
  },
  {
    "text": "I should add more null checks for this one so what do you do in the case that this is null and there's no data",
    "start": "2938200",
    "end": "2944000"
  },
  {
    "text": "returned from the database good question um you can actually work with the null object pattern where you say look I have",
    "start": "2944000",
    "end": "2950480"
  },
  {
    "text": "a new location info. unknown that has some defaults and I work with that still",
    "start": "2950480",
    "end": "2955680"
  },
  {
    "text": "means you should be doing potential null or checks for that unknown location maybe in your code and in the logic but",
    "start": "2955680",
    "end": "2962079"
  },
  {
    "text": "you will no longer get that null reference exception because there's always going to be a value ideally again",
    "start": "2962079",
    "end": "2967720"
  },
  {
    "text": "design time and compile time make sense cool all right so uh annotate",
    "start": "2967720",
    "end": "2976440"
  },
  {
    "text": "whatever you can annotate but also redesign whenever um there's opportunity to redesign and actually make your code",
    "start": "2976440",
    "end": "2982319"
  },
  {
    "text": "better and more n safe um I talked about suppressions you can use them and by all means they are",
    "start": "2982319",
    "end": "2989240"
  },
  {
    "text": "useful when you are migrating things but they are also um an anti pattern so",
    "start": "2989240",
    "end": "2994400"
  },
  {
    "text": "remove them when you no longer longer need them also don't be afraid of null if there's anything I want you to",
    "start": "2994400",
    "end": "3000200"
  },
  {
    "text": "remember from this talk is null is not evil it is perfectly fine but all of the",
    "start": "3000200",
    "end": "3005240"
  },
  {
    "text": "nullable reference types all of the annotations are there for you to gain more confidence in your codes and to",
    "start": "3005240",
    "end": "3010680"
  },
  {
    "text": "give the compiler and the ID hints on how your code operates so that you can have that confidence uh the goal is not",
    "start": "3010680",
    "end": "3016920"
  },
  {
    "text": "to completely get rid of null in your code so just um try to gain more confidence and build a safety net for",
    "start": "3016920",
    "end": "3023640"
  },
  {
    "text": "whatever you have in your codebase there and reduce the chances of null reference",
    "start": "3023640",
    "end": "3029119"
  },
  {
    "text": "exceptions so in terms of techniques start in a center uh always enable if",
    "start": "3029119",
    "end": "3034160"
  },
  {
    "text": "you have new projects uh start in the center work outwards start with your dto and so on annotate maybe redesign",
    "start": "3034160",
    "end": "3040720"
  },
  {
    "text": "wherever needed suppressions are temporary and don't be afraid of null",
    "start": "3040720",
    "end": "3046040"
  },
  {
    "text": "and that Applause means that I have few times and I still have one sections to go through so let's do that there's",
    "start": "3046040",
    "end": "3051319"
  },
  {
    "text": "tools that can help you uh one is that value tracking Visual Studio Studio has this ryer has this this is really useful",
    "start": "3051319",
    "end": "3058160"
  },
  {
    "text": "to find out where a value is coming from I showed you it failed because of my preview version but the idea is that you",
    "start": "3058160",
    "end": "3064200"
  },
  {
    "text": "can easily get an idea of where a value is coming from and you can update your code more easily by finding all of the",
    "start": "3064200",
    "end": "3070319"
  },
  {
    "text": "usages where you are setting a value to something for example with the entire call",
    "start": "3070319",
    "end": "3075520"
  },
  {
    "text": "chain um there's also the option for automatic migrations resharpen writer",
    "start": "3075520",
    "end": "3081200"
  },
  {
    "text": "feature where um if you Alt Enter at the first character of your uh of your file",
    "start": "3081200",
    "end": "3087400"
  },
  {
    "text": "you can just say Alt Enter and say migrate to nullable enable and what that is going to do is it's going to use the",
    "start": "3087400",
    "end": "3093400"
  },
  {
    "text": "present information from base classes and so on to add annotations to that file it's not going to be foolproof not",
    "start": "3093400",
    "end": "3099880"
  },
  {
    "text": "everything is going to be annotated properly because there's still going to be some edge cases but it is a great help to get started um with introducing",
    "start": "3099880",
    "end": "3107079"
  },
  {
    "text": "nullability in your code base your code also has hints about nullability so uh if you have an",
    "start": "3107079",
    "end": "3114079"
  },
  {
    "text": "existing method like this read column for example where you have this string column name property there are hints in",
    "start": "3114079",
    "end": "3120839"
  },
  {
    "text": "the codes that maybe uh you should do you should make this nullable so quick",
    "start": "3120839",
    "end": "3126079"
  },
  {
    "text": "quiz should we annotate that string column name in this case should we add a question mark there who says",
    "start": "3126079",
    "end": "3132640"
  },
  {
    "text": "yes okay who says no it's fine like this who has no",
    "start": "3132640",
    "end": "3138319"
  },
  {
    "text": "idea okay yeah it depends indeed we are doing a null check there on the first line so we check if column name is not",
    "start": "3138319",
    "end": "3145400"
  },
  {
    "text": "null so just looking at that statement means that we should annotate with null because we have a null check in there so",
    "start": "3145400",
    "end": "3151920"
  },
  {
    "text": "that means we expect that the parameter can be null and we should add The annotation however looking at the rest",
    "start": "3151920",
    "end": "3158520"
  },
  {
    "text": "of the codes you can see that we are trying to get the value and and all of that and always returning a default",
    "start": "3158520",
    "end": "3164520"
  },
  {
    "text": "value when something is not being found and so on so in this case we could keep it like this and maybe just remove that",
    "start": "3164520",
    "end": "3170359"
  },
  {
    "text": "null check there because we don't really expect this thing to ever be null so so again it depends indeed based on the if",
    "start": "3170359",
    "end": "3177640"
  },
  {
    "text": "statement I would say add the question mark but looking at the rest of the code maybe not again up to you to decide but",
    "start": "3177640",
    "end": "3183640"
  },
  {
    "text": "there are hints in your code whether you should be adding it or not third party libraries I told you net",
    "start": "3183640",
    "end": "3190559"
  },
  {
    "text": "BCL is annotated that's awesome uh some libraries are using annotations or jet",
    "start": "3190559",
    "end": "3195680"
  },
  {
    "text": "brains annotations that's also awesome if you go on to net there's a lot of projects that are unfortunately not",
    "start": "3195680",
    "end": "3202400"
  },
  {
    "text": "annotated that means if you bring them into your annot ated code base you should be doing uh a lot of null cheing",
    "start": "3202400",
    "end": "3209680"
  },
  {
    "text": "if you have no idea where to do those null checks uh there's actually a trick that you can use in resharp and writer and that is to turn on pessimistic",
    "start": "3209680",
    "end": "3216280"
  },
  {
    "text": "analysis where you can say look everything that doesn't have a null check anywhere treat it as nullable and",
    "start": "3216280",
    "end": "3222359"
  },
  {
    "text": "then everything will light up again with a lot of warnings and errors something you don't want to enable continuously",
    "start": "3222359",
    "end": "3228119"
  },
  {
    "text": "you will go insane but it's kind of useful if you want to do that migration and look at where potential null cases",
    "start": "3228119",
    "end": "3233640"
  },
  {
    "text": "are available all right the required property is coming just a quick hint how would you",
    "start": "3233640",
    "end": "3240319"
  },
  {
    "text": "go about this warning I have a class that is doing some Json and I want to serialize deserialize this thing and I",
    "start": "3240319",
    "end": "3246839"
  },
  {
    "text": "have a string property called name and I have a Json property called name but I get a warning that name is not being set",
    "start": "3246839",
    "end": "3254040"
  },
  {
    "text": "to a value so it's potentially null and this is not good how do you fix this",
    "start": "3254040",
    "end": "3259960"
  },
  {
    "text": "warning there's a couple of fixes that you can apply um one fix is to just add",
    "start": "3261559",
    "end": "3267119"
  },
  {
    "text": "a noble annotation which is great but you lose some of the information if you're absolutely certain that this name",
    "start": "3267119",
    "end": "3273839"
  },
  {
    "text": "property is never going to be null fixing it like this by just annotating it loses some information for you you",
    "start": "3273839",
    "end": "3279960"
  },
  {
    "text": "will still have to do null checks so I would not go this route second option is lying to the compiler and just saying",
    "start": "3279960",
    "end": "3287200"
  },
  {
    "text": "the property is default exclamation mark So press the warning and say look compiler you're happy now I'm setting a",
    "start": "3287200",
    "end": "3293559"
  },
  {
    "text": "value but it's still n so you're lying to the compiler I would not do this anti pattern again I should",
    "start": "3293559",
    "end": "3299960"
  },
  {
    "text": "have a more evil font on the slide I think um another option is instead of",
    "start": "3299960",
    "end": "3305359"
  },
  {
    "text": "setting that null value you can set an unnown string for example this is something that could work seems fine I",
    "start": "3305359",
    "end": "3311760"
  },
  {
    "text": "think that's a good alternative you can also go The annotation route which is essentially doing the same as the",
    "start": "3311760",
    "end": "3317400"
  },
  {
    "text": "previous one where you add that allow null uh allow null annotation where you have this mix of being able to allow",
    "start": "3317400",
    "end": "3324319"
  },
  {
    "text": "null when setting the value but reading is always going to be non null good alternative but I find this one quite",
    "start": "3324319",
    "end": "3332200"
  },
  {
    "text": "cumbersome the proper option is to do it like this and set required uh this is a",
    "start": "3332200",
    "end": "3337400"
  },
  {
    "text": "new keyword in C 11 I think uh where you can say look compiler whoever is going",
    "start": "3337400",
    "end": "3343119"
  },
  {
    "text": "to new up a class of this instance this property is always going to be set to a",
    "start": "3343119",
    "end": "3348200"
  },
  {
    "text": "value that's the required keyword there um so you don't have to annotate anything and if you say name is",
    "start": "3348200",
    "end": "3353640"
  },
  {
    "text": "non-nullable the requ required uh keyword there is going to say look name is always going to be non-nullable this would be my personal",
    "start": "3353640",
    "end": "3360760"
  },
  {
    "text": "recommendation you see that there is an EST and that is that your adjacent data the source that you are reading may",
    "start": "3360760",
    "end": "3367240"
  },
  {
    "text": "still be null so if that is something that you suspect maybe adding a nullable attribute there is still something that",
    "start": "3367240",
    "end": "3373839"
  },
  {
    "text": "you want to do another option that you can do with system. text. Json for example is subscribe to this I Json on",
    "start": "3373839",
    "end": "3380400"
  },
  {
    "text": "De serialized event and essentially after d serialization check if all of",
    "start": "3380400",
    "end": "3385680"
  },
  {
    "text": "the conditions are met maybe throw maybe log something or or whatever so again",
    "start": "3385680",
    "end": "3391039"
  },
  {
    "text": "personal recommendation but still not fullprof at runtime but this is going to work great at design",
    "start": "3391039",
    "end": "3397119"
  },
  {
    "text": "time uh One Last Thing Before I let you all go be careful with Entity framework core if you have an Entity framework",
    "start": "3397119",
    "end": "3404400"
  },
  {
    "text": "core project and you enable nullable reference types all of a sudden there is a big warning in the documentation and",
    "start": "3404400",
    "end": "3410480"
  },
  {
    "text": "you will actually see this if you do this and you script a new database migration for examp example there is a",
    "start": "3410480",
    "end": "3416039"
  },
  {
    "text": "chance that your database semantics are going to change as well so be careful if you have Entity framework don't just go",
    "start": "3416039",
    "end": "3422559"
  },
  {
    "text": "nullable annotate everything because Entity framework is making use of the annotations to determine whether a",
    "start": "3422559",
    "end": "3428280"
  },
  {
    "text": "database column for example can hold a null value or not so you might be surprised by just enabling things that",
    "start": "3428280",
    "end": "3434200"
  },
  {
    "text": "your database schema is going to change probably not something you want so again be careful uh with existing Entity",
    "start": "3434200",
    "end": "3439960"
  },
  {
    "text": "framework core projects so in summary some tools that we've seen there's value tracking to",
    "start": "3439960",
    "end": "3445880"
  },
  {
    "text": "find out where value is coming from can help you there's a conversion from jet brains annotations to C annotations",
    "start": "3445880",
    "end": "3452920"
  },
  {
    "text": "there's an automatic migration you can use uh you can just look at the code see if you're doing null checks and based on",
    "start": "3452920",
    "end": "3458200"
  },
  {
    "text": "that add the annotations third party libraries Json is a little bit yeah you have to look at your Source data and how",
    "start": "3458200",
    "end": "3464480"
  },
  {
    "text": "much you trust it before you can actually decide am I going to annotate or not and be careful with Entity",
    "start": "3464480",
    "end": "3470680"
  },
  {
    "text": "framework with that the final summary and I think I'm going to end on time this is good um nullable reference times",
    "start": "3470680",
    "end": "3477520"
  },
  {
    "text": "types in C give you design time safety not runtime safety always keep that in mind if you shipping your code to third",
    "start": "3477520",
    "end": "3484280"
  },
  {
    "text": "parties for example add null checks because null is still an option it's just going to help you at design time at",
    "start": "3484280",
    "end": "3490319"
  },
  {
    "text": "runtime things may still blow up there's The annotation context that you can configure to determine how much help you",
    "start": "3490319",
    "end": "3496720"
  },
  {
    "text": "want from the compiler and the IDE there are more fine grained annotations to communicate the intent to the compiler",
    "start": "3496720",
    "end": "3503680"
  },
  {
    "text": "so you can do that and instead of just adding The annotation with the question mark you can do things like writing and",
    "start": "3503680",
    "end": "3509319"
  },
  {
    "text": "reading is is a different type of null ability use the null forgiving operator when you when it makes sense but do",
    "start": "3509319",
    "end": "3515920"
  },
  {
    "text": "remember it is an anti pattern you're lying to the compiler and you lose a lot of the help and this is just what we",
    "start": "3515920",
    "end": "3521480"
  },
  {
    "text": "want from all of this there are tools and techniques to migrate so use them if you want and uh I would say remember one",
    "start": "3521480",
    "end": "3529880"
  },
  {
    "text": "thing nrts are a safety net so there's no need to get rid of all of the things",
    "start": "3529880",
    "end": "3535319"
  },
  {
    "text": "that you may have in your codes but do annotate things because your code will very often get less cluttered with null",
    "start": "3535319",
    "end": "3541520"
  },
  {
    "text": "checks if they are not really needed and you will actually help your fellow developers on the team with that thank",
    "start": "3541520",
    "end": "3547760"
  },
  {
    "text": "you and enjoy the rest of the",
    "start": "3547760",
    "end": "3551319"
  },
  {
    "text": "conference",
    "start": "3553280",
    "end": "3556280"
  }
]