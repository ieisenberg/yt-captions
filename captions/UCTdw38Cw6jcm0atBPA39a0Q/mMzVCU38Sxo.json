[
  {
    "start": "0",
    "end": "57000"
  },
  {
    "text": "okay can you hear me okay so hello on my",
    "start": "9630",
    "end": "17650"
  },
  {
    "text": "talk I hope you get your coffee and today we will be talking about living in",
    "start": "17650",
    "end": "22869"
  },
  {
    "text": "eventually consistent reality and maybe a little note for I start stock is that",
    "start": "22869",
    "end": "30599"
  },
  {
    "text": "first part might be a little bitter article we get to the more practical examples in the second part of the story",
    "start": "30599",
    "end": "37210"
  },
  {
    "text": "and since there is a lot of material I've got on those slides we my my run",
    "start": "37210",
    "end": "42640"
  },
  {
    "text": "out of time before I will present them all so just in the case the stock will",
    "start": "42640",
    "end": "48520"
  },
  {
    "text": "be published online and all of the code is prepared in the way that you can use it as a tutorial and play by yourself so",
    "start": "48520",
    "end": "57840"
  },
  {
    "start": "57000",
    "end": "140000"
  },
  {
    "text": "I am about to stupid Kowski and here are you know all of the contact information",
    "start": "57840",
    "end": "64750"
  },
  {
    "text": "if you want to reach me afterwards what we will be talking about and we'll be talking about how do you synchronize and",
    "start": "64750",
    "end": "73240"
  },
  {
    "text": "replicate data over the web in context various databases and libraries that allow us to do it in a way that it's",
    "start": "73240",
    "end": "81130"
  },
  {
    "text": "resistant to network failures network delays using data data structures known",
    "start": "81130",
    "end": "88240"
  },
  {
    "text": "as C oddities we will see what existing databases could use in this context and",
    "start": "88240",
    "end": "94289"
  },
  {
    "text": "how they look inside I mean we are going to do a deep dive in a way that will",
    "start": "94289",
    "end": "101289"
  },
  {
    "text": "allow us to build some of those things by ourselves simply because it's not exactly possible to fix all of those",
    "start": "101289",
    "end": "109590"
  },
  {
    "text": "issues that we might have on the production using only existing code you know like gluing the code of the API so",
    "start": "109590",
    "end": "118270"
  },
  {
    "text": "existing libraries and frameworks sometimes we need to be able to build something by our own which is also very",
    "start": "118270",
    "end": "125200"
  },
  {
    "text": "nice and we also if time will suffice we'll",
    "start": "125200",
    "end": "131070"
  },
  {
    "text": "talk about different notions of time and how can we represent time in different ways than using a standard wall clock",
    "start": "131070",
    "end": "138600"
  },
  {
    "text": "times so let's say we have somewhat",
    "start": "138600",
    "end": "145140"
  },
  {
    "start": "140000",
    "end": "430000"
  },
  {
    "text": "practical example we will try to build a YouTube 2.0 will face two features that",
    "start": "145140",
    "end": "153930"
  },
  {
    "text": "we would like to have one of them is what we could do for YouTube video streaming so let's say that we have",
    "start": "153930",
    "end": "160710"
  },
  {
    "text": "Alice she lives here in Oslo she wants to publish some kind of video she",
    "start": "160710",
    "end": "165900"
  },
  {
    "text": "polishes it the closest server in this case probably some somewhere in Ireland",
    "start": "165900",
    "end": "171030"
  },
  {
    "text": "or something like that and her video was very popular so popular that was reached",
    "start": "171030",
    "end": "178050"
  },
  {
    "text": "by people all over the world if this video would be always served",
    "start": "178050",
    "end": "183960"
  },
  {
    "text": "from only one single data center it could probably cause some issues simply",
    "start": "183960",
    "end": "190680"
  },
  {
    "text": "because of the amount of users that we would like to have because you know when",
    "start": "190680",
    "end": "196350"
  },
  {
    "text": "the server fire fails we might have a problem because users don't get the",
    "start": "196350",
    "end": "202350"
  },
  {
    "text": "video when they want to so the simple the simplest solution for that is to",
    "start": "202350",
    "end": "208440"
  },
  {
    "text": "replicate that video over several different data centers probably living",
    "start": "208440",
    "end": "214500"
  },
  {
    "text": "on different continents to reduce latencies to make our session more resilient and this is simple for",
    "start": "214500",
    "end": "221489"
  },
  {
    "text": "something like video about because it allows us to it is based on the concept",
    "start": "221489",
    "end": "228150"
  },
  {
    "text": "of single writer in this case Alice and multiple readers we know how do those",
    "start": "228150",
    "end": "234239"
  },
  {
    "text": "things we can even build something on top of that like replication protocols",
    "start": "234239",
    "end": "239370"
  },
  {
    "text": "like raft boxes and so on however let's say that we would like to have another",
    "start": "239370",
    "end": "246030"
  },
  {
    "text": "feature something like Lydia Kanter it's also very popular one however the thing",
    "start": "246030",
    "end": "253530"
  },
  {
    "text": "is changing here a little bit we have shift from single writer to multiple writers",
    "start": "253530",
    "end": "258799"
  },
  {
    "text": "because every single person that seen that video is basically trying to update",
    "start": "258799",
    "end": "265759"
  },
  {
    "text": "this single counter and this is in theory you can think of it as a single value that would like to increment now",
    "start": "265759",
    "end": "272840"
  },
  {
    "text": "if we would like to coordinate and synchronize the value of the counter as",
    "start": "272840",
    "end": "277879"
  },
  {
    "text": "a single number it could be a little bit difficult to do it without you know",
    "start": "277879",
    "end": "283249"
  },
  {
    "text": "introducing any kind of latencies conflicts we would like to be able to do that on the multi-master replication",
    "start": "283249",
    "end": "290349"
  },
  {
    "text": "system something where we have no single writers but multiple ones and this",
    "start": "290349",
    "end": "297259"
  },
  {
    "text": "creates a question can you synchronize data safely without the need for consensus because in this case when we",
    "start": "297259",
    "end": "304219"
  },
  {
    "text": "want to increment for example to counter value the synchronization cost might be",
    "start": "304219",
    "end": "309580"
  },
  {
    "text": "so high with such a large volume of updates that we want to process that we",
    "start": "309580",
    "end": "317300"
  },
  {
    "text": "would eventually reach into some kind of hard limits when we would like when we would end up with only single writer in",
    "start": "317300",
    "end": "324469"
  },
  {
    "text": "that case and this is also when the series comes to comes to work we'll",
    "start": "324469",
    "end": "330919"
  },
  {
    "text": "describe exactly how to implement counter like that and we could extend this solution for something like for",
    "start": "330919",
    "end": "337520"
  },
  {
    "text": "example Asia or customs dB so there is theoretical map of how this",
    "start": "337520",
    "end": "345649"
  },
  {
    "text": "year duties are built because there are many kinds of them and we'll cover",
    "start": "345649",
    "end": "351199"
  },
  {
    "text": "mostly the state-based version but in just if you are interested you should",
    "start": "351199",
    "end": "356899"
  },
  {
    "text": "know that there are also operation based which works slightly differently the major shift here is that the more",
    "start": "356899",
    "end": "363680"
  },
  {
    "text": "state base is our our data structure the more complex it is but at the same time",
    "start": "363680",
    "end": "370399"
  },
  {
    "text": "the simple and the protocol it is using for the replication process it uses in",
    "start": "370399",
    "end": "375800"
  },
  {
    "text": "case if we are going through operation based replication in this case the",
    "start": "375800",
    "end": "382939"
  },
  {
    "text": "replication protocol is more complex the advantage of having a lot simple",
    "start": "382939",
    "end": "388860"
  },
  {
    "text": "data structures and if if it's so and then why I am talking about state based",
    "start": "388860",
    "end": "395010"
  },
  {
    "text": "replication because building network protocols is hello it up it's hard to",
    "start": "395010",
    "end": "402180"
  },
  {
    "text": "the back hard to implement there is a lot of edge cases and even complicated data structures are still much simpler",
    "start": "402180",
    "end": "408750"
  },
  {
    "text": "than building a complicated replication protocol and we can build them by ourselves and reuse the existing",
    "start": "408750",
    "end": "415950"
  },
  {
    "text": "connection some of those things I will be talking about who'd even work over the UDP so we could just you know send",
    "start": "415950",
    "end": "422940"
  },
  {
    "text": "messages and don't even care about if we get the response back or not so what",
    "start": "422940",
    "end": "432120"
  },
  {
    "start": "430000",
    "end": "809000"
  },
  {
    "text": "other use cases could be you could have for this kind of data structures any",
    "start": "432120",
    "end": "440220"
  },
  {
    "text": "kind of replication where we can reach Sibley long latencies if we maybe not if",
    "start": "440220",
    "end": "450510"
  },
  {
    "text": "we if some of you well in the future built a distributed system that is not",
    "start": "450510",
    "end": "456150"
  },
  {
    "text": "only your replicated but sonic like solar replicated over multiple planets then you will need reach latencies in",
    "start": "456150",
    "end": "463680"
  },
  {
    "text": "minutes or hours and in this case these are also data structures that will help",
    "start": "463680",
    "end": "469020"
  },
  {
    "text": "you so you know it's very long long for routine and way of thinking also any",
    "start": "469020",
    "end": "477180"
  },
  {
    "text": "kind of synchronization that must tolerate periodical and connected",
    "start": "477180",
    "end": "483000"
  },
  {
    "text": "devices so this is also related to the first point because if we have network",
    "start": "483000",
    "end": "489810"
  },
  {
    "text": "delay in case of like for example two minutes we don't really know if the",
    "start": "489810",
    "end": "495780"
  },
  {
    "text": "device we are connected to is just you know lagging in response or it's simply disconnected and this is the case of",
    "start": "495780",
    "end": "502890"
  },
  {
    "text": "distributed systems another thing is navigation and this is actual practical",
    "start": "502890",
    "end": "508770"
  },
  {
    "text": "example from the company called enough cloud if I'm right because they built there and navigation system on top of",
    "start": "508770",
    "end": "516180"
  },
  {
    "text": "series chart applications so and if and a kind of application that have",
    "start": "516180",
    "end": "522960"
  },
  {
    "text": "multiple simultaneous writers collaborative text editing which is to",
    "start": "522960",
    "end": "529320"
  },
  {
    "text": "be honest interesting topic on his own but two most common ways to solve",
    "start": "529320",
    "end": "535350"
  },
  {
    "text": "collaborative text editors are operational transformations like Google",
    "start": "535350",
    "end": "541050"
  },
  {
    "text": "Docs and also series can be used in this context for peer-to-peer connections",
    "start": "541050",
    "end": "546590"
  },
  {
    "text": "mobile advertising and maybe you know company called raffia the producers of",
    "start": "546590",
    "end": "553830"
  },
  {
    "text": "Angry Birds and they've implemented a seed counter for their advertiser",
    "start": "553830",
    "end": "560000"
  },
  {
    "text": "advertisement platform when they are using them to count the number of impressions the advertisers made on",
    "start": "560000",
    "end": "566840"
  },
  {
    "text": "users even if they are often and any kind of edge computing so any kind of",
    "start": "566840",
    "end": "572550"
  },
  {
    "text": "not client-server even in distributed mode but just peer to peer connections when for example people are connected",
    "start": "572550",
    "end": "579600"
  },
  {
    "text": "you know you can Bluetooth devices all of these are greatest cases for CDs and",
    "start": "579600",
    "end": "586520"
  },
  {
    "text": "we have some existing solutions in that area are already most common and most",
    "start": "586520",
    "end": "593280"
  },
  {
    "text": "known I think is react have anyone here used react in the past ok react is a key",
    "start": "593280",
    "end": "601650"
  },
  {
    "text": "value database and for example it's used in British NHS I think they are the",
    "start": "601650",
    "end": "608280"
  },
  {
    "text": "biggest users of that another very big user is Riot Games and outers of League",
    "start": "608280",
    "end": "616890"
  },
  {
    "text": "of Legends and for example their chat service is implemented in react another",
    "start": "616890",
    "end": "623180"
  },
  {
    "text": "popular database maybe not so popular it's actually pretty fresh it's anti WB",
    "start": "623180",
    "end": "629070"
  },
  {
    "text": "which is also implemented just like react it's implemented in Erlang and",
    "start": "629070",
    "end": "634820"
  },
  {
    "text": "what it allows you to do is to build a distributed transactions that are scaling almost in a linear fashion to",
    "start": "634820",
    "end": "641640"
  },
  {
    "text": "the number of servers that you are adding to your system which is actually a great teacher to have this way you can",
    "start": "641640",
    "end": "648090"
  },
  {
    "text": "have like half a million transactions per second if you want",
    "start": "648090",
    "end": "653500"
  },
  {
    "text": "just adding enough servers to handle the case using LEDs and very common case is",
    "start": "653500",
    "end": "658680"
  },
  {
    "text": "Amazon DynamoDB so if you have yours in kws you have also this key value store",
    "start": "658680",
    "end": "664810"
  },
  {
    "text": "in your reach lately they also added support for transactions multi key transactions for that if your customers",
    "start": "664810",
    "end": "672070"
  },
  {
    "text": "DB is not using sir it is by itself but it has something that is called multi",
    "start": "672070",
    "end": "677230"
  },
  {
    "text": "master replication and when you configure customers to be such case you",
    "start": "677230",
    "end": "683260"
  },
  {
    "text": "can write something that is called a stored procedure is it's using Java",
    "start": "683260",
    "end": "690370"
  },
  {
    "text": "Script as a language of their choice where you can build your own conflict resolution logic and for example this I",
    "start": "690370",
    "end": "698020"
  },
  {
    "text": "think I will be talking here out is implemented in JavaScript mostly because most developers already know JavaScript",
    "start": "698020",
    "end": "704860"
  },
  {
    "text": "and because you can use this piece of code as it is directly on the customers",
    "start": "704860",
    "end": "711820"
  },
  {
    "text": "DB if you want so while it's not exactly while customs DB is not exactly",
    "start": "711820",
    "end": "718720"
  },
  {
    "text": "implementing this by itself you can use it to implement one for your needs Ready's Enterprise Edition also provided",
    "start": "718720",
    "end": "725650"
  },
  {
    "text": "something that they called series which is basically a CD on top try this last",
    "start": "725650",
    "end": "731740"
  },
  {
    "text": "piece popular ever link library that is pushing our knowledge forward direction",
    "start": "731740",
    "end": "738060"
  },
  {
    "text": "akka distributed data is a library or distributed actor framework built on JVM",
    "start": "738060",
    "end": "745000"
  },
  {
    "text": "and dotnet that you can use if you don't have don't want to use a separate piece",
    "start": "745000",
    "end": "750550"
  },
  {
    "text": "of infrastructure for database to you know solve only subsets of problems but",
    "start": "750550",
    "end": "756940"
  },
  {
    "text": "instead you can use library for that event wait a vent shoe it is another",
    "start": "756940",
    "end": "763270"
  },
  {
    "text": "library also built on top of vodka but only on JVM so far that is using operation base variant facilities Roshi",
    "start": "763270",
    "end": "770470"
  },
  {
    "text": "is the library right written go on top",
    "start": "770470",
    "end": "775810"
  },
  {
    "text": "of readies that was used by SoundCloud to handle their future of following and",
    "start": "775810",
    "end": "781450"
  },
  {
    "text": "on following and subscribing to other others and music creators and out emerge",
    "start": "781450",
    "end": "789250"
  },
  {
    "text": "is a JavaScript library that you can use for your for example JavaScript",
    "start": "789250",
    "end": "794740"
  },
  {
    "text": "applications running on mobile phones on desktops and so on to coordinate States with each other using something document",
    "start": "794740",
    "end": "802480"
  },
  {
    "text": "model that is very similar to Jason sorry so I quickly intro to why and how",
    "start": "802480",
    "end": "813610"
  },
  {
    "start": "809000",
    "end": "943000"
  },
  {
    "text": "this works mmm for example using the previous case of single master multiple read and multi",
    "start": "813610",
    "end": "822130"
  },
  {
    "text": "follower replication we have a cluster of database and cluster on several nodes",
    "start": "822130",
    "end": "828400"
  },
  {
    "text": "and they are organized in the leader follower way so usually there is one for one leader and multiple for waves when",
    "start": "828400",
    "end": "836230"
  },
  {
    "text": "you want to read some data you can read it from basically any node you want however you want to write it those",
    "start": "836230",
    "end": "843220"
  },
  {
    "text": "followers needs to Fierce communicate with the leader and establish some consensus on what the correct order of",
    "start": "843220",
    "end": "849940"
  },
  {
    "text": "operations should be presented by the user so side this is a kind of",
    "start": "849940",
    "end": "857200"
  },
  {
    "text": "contention point because we all depend on the leader and given the network",
    "start": "857200",
    "end": "864580"
  },
  {
    "text": "latencies in girls distributed systems and this can be a problem because for example sending a message from for",
    "start": "864580",
    "end": "874750"
  },
  {
    "text": "example Dublin to Tokyo it takes almost 300 minutes second this means that for this single entry we would like we would",
    "start": "874750",
    "end": "882460"
  },
  {
    "text": "have at most three operations per second right if we will feed our message and",
    "start": "882460",
    "end": "888820"
  },
  {
    "text": "our conflict resolution protocol in one roundtrip which is not always the case and this is",
    "start": "888820",
    "end": "895210"
  },
  {
    "text": "based on the variant on the assumption that we are modeling our protocols based",
    "start": "895210",
    "end": "902140"
  },
  {
    "text": "on the world we know as humans so we have leaders we have consensus algorithm",
    "start": "902140",
    "end": "907839"
  },
  {
    "text": "we are trying to establish some kind of quorum because everyone have their different point of view they different",
    "start": "907839",
    "end": "914470"
  },
  {
    "text": "way of seeing the world however in masterless a replica",
    "start": "914470",
    "end": "919650"
  },
  {
    "text": "and there is no leaders or followers everyone are equal hey it's Alice",
    "start": "919650",
    "end": "927410"
  },
  {
    "text": "so everyone can write to anyone out and everyone can read sorry everyone can",
    "start": "927410",
    "end": "933150"
  },
  {
    "text": "read from any node and everyone can write a note and notes can just send the",
    "start": "933150",
    "end": "939089"
  },
  {
    "text": "updates from themselves and this is possible because we don't need to establish consensus if every replica can",
    "start": "939089",
    "end": "946770"
  },
  {
    "start": "943000",
    "end": "1123000"
  },
  {
    "text": "individually on itself built conclusion this in the same conclusion as every",
    "start": "946770",
    "end": "952740"
  },
  {
    "text": "other replica this is a kind of Star Trek Borg collective way of thinking great way to build this stuff and",
    "start": "952740",
    "end": "959520"
  },
  {
    "text": "society but it turns out that it works very well in distributed systems so in",
    "start": "959520",
    "end": "966750"
  },
  {
    "text": "order to reach that kind of convergence what how it's possible so let's imagine",
    "start": "966750",
    "end": "973350"
  },
  {
    "text": "that we have a local replica as a server we are receiving requests for updating",
    "start": "973350",
    "end": "978810"
  },
  {
    "text": "that replica into a different state so we are updating it sterilizing it's",
    "start": "978810",
    "end": "984209"
  },
  {
    "text": "pushing over the network to another another note that other node receives an",
    "start": "984209",
    "end": "989670"
  },
  {
    "text": "updated state and it's some kind needs to compare two of those states the one",
    "start": "989670",
    "end": "996450"
  },
  {
    "text": "that it received from remote replicas and one it has locally on its own and",
    "start": "996450",
    "end": "1001990"
  },
  {
    "text": "resolve any kind of conflicts that could possibly happen in this situation and",
    "start": "1001990",
    "end": "1007100"
  },
  {
    "text": "this is done insert this by something that is called merge function just like margin get but unlike get it doesn't",
    "start": "1007100",
    "end": "1015320"
  },
  {
    "text": "need human interaction to you know solve the conflicting lives and in other order",
    "start": "1015320",
    "end": "1023120"
  },
  {
    "text": "to do so it means to achieve several properties one of them is coming to tivity so the order in which we are",
    "start": "1023120",
    "end": "1030050"
  },
  {
    "text": "receiving those operations shouldn't even matter as associativity is",
    "start": "1030050",
    "end": "1035079"
  },
  {
    "text": "basically for the same reason and idempotency is great if we want build a",
    "start": "1035079",
    "end": "1043040"
  },
  {
    "text": "distributed systems in general because for example we could send and those replication updates just in the loop for",
    "start": "1043040",
    "end": "1050870"
  },
  {
    "text": "every one minutes it's not the very front way of building applications but we could do that we could also push",
    "start": "1050870",
    "end": "1058000"
  },
  {
    "text": "updated States through message queue or something like that and don't bother if we receive that message one or more",
    "start": "1058000",
    "end": "1065480"
  },
  {
    "text": "times if we will receive it we'll be able to handle it and it turns",
    "start": "1065480",
    "end": "1071870"
  },
  {
    "text": "out that we can use maths to solve those problems because the simplest math",
    "start": "1071870",
    "end": "1077870"
  },
  {
    "text": "operations can actually become posts to solve real production problems using",
    "start": "1077870",
    "end": "1084230"
  },
  {
    "text": "those properties but what mathematical operations have those properties those",
    "start": "1084230",
    "end": "1091039"
  },
  {
    "text": "number additions satisfy all three no because maybe it's commutative and",
    "start": "1091039",
    "end": "1096529"
  },
  {
    "text": "associative but it's not idempotent if you add one to one we don't have one in the result we had two however it turns",
    "start": "1096529",
    "end": "1104809"
  },
  {
    "text": "out that there are two operations that we could use for that one of them very",
    "start": "1104809",
    "end": "1110000"
  },
  {
    "text": "known is mathematical and maximum of two numbers and another one is union of two",
    "start": "1110000",
    "end": "1117350"
  },
  {
    "text": "sets and we can compose those together to achieve some results so coming back",
    "start": "1117350",
    "end": "1124399"
  },
  {
    "start": "1123000",
    "end": "1266000"
  },
  {
    "text": "to our distributed counter and simulate view counter this is solved by something",
    "start": "1124399",
    "end": "1130190"
  },
  {
    "text": "that's called G counter please do not focus on this JavaScript seriously you",
    "start": "1130190",
    "end": "1135200"
  },
  {
    "text": "can read it later on what we can see",
    "start": "1135200",
    "end": "1140240"
  },
  {
    "text": "it's here is that this is something that's called growing only counter it means that this value can only and grow",
    "start": "1140240",
    "end": "1147230"
  },
  {
    "text": "upwards and how it's implemented it's basically a simple key value map one key is the unique identifier of our replicas",
    "start": "1147230",
    "end": "1154520"
  },
  {
    "text": "it can be for example service instance ID in AWS or if you have device it can",
    "start": "1154520",
    "end": "1162770"
  },
  {
    "text": "be unique identifier of that device and what we are basically doing is instead",
    "start": "1162770",
    "end": "1170029"
  },
  {
    "text": "of having one global value that is describing our counter we have multiple partial values and describing increments",
    "start": "1170029",
    "end": "1176990"
  },
  {
    "text": "done by each of the replicas and each replicas can only increment its log on local country not counters of other",
    "start": "1176990",
    "end": "1184490"
  },
  {
    "text": "replicas so it looks like this when you want to get the value on the total value of our",
    "start": "1184490",
    "end": "1190820"
  },
  {
    "text": "counter we just sum the values of our entries to get the total volume and this",
    "start": "1190820",
    "end": "1197720"
  },
  {
    "text": "presented here in this value function however now if we would like to merge",
    "start": "1197720",
    "end": "1204170"
  },
  {
    "text": "those two counters how can we do that it turns out that all of you all we need to",
    "start": "1204170",
    "end": "1211190"
  },
  {
    "text": "do is to just squish-squash the corresponding entries and if the value",
    "start": "1211190",
    "end": "1218050"
  },
  {
    "text": "components of those entries are differ and differing from each other we just make and take a max of those do why",
    "start": "1218050",
    "end": "1225710"
  },
  {
    "text": "because this country can only grow up which means that the value that is higher is always more up-to-date than",
    "start": "1225710",
    "end": "1232640"
  },
  {
    "text": "the one that we have on the place so by taking the max of those do we have the",
    "start": "1232640",
    "end": "1240080"
  },
  {
    "text": "most up-to-date version of the counter and this works in every direction and it's very easy to achieve so you can see",
    "start": "1240080",
    "end": "1247460"
  },
  {
    "text": "that here we have I think it's less than 20 and 20 lines of code and you could",
    "start": "1247460",
    "end": "1255620"
  },
  {
    "text": "use this already for example in cosmos to be using those multi-master",
    "start": "1255620",
    "end": "1260660"
  },
  {
    "text": "configuration as a stored procedure to resolving conflicts another use case so",
    "start": "1260660",
    "end": "1267340"
  },
  {
    "start": "1266000",
    "end": "1344000"
  },
  {
    "text": "this country can't grow up but let's say that we want to implement something like",
    "start": "1267340",
    "end": "1272990"
  },
  {
    "text": "a like counter or subscription counter we would like to be able not only to like or subscribe but also to unlike and",
    "start": "1272990",
    "end": "1280490"
  },
  {
    "text": "unsubscribe for this we need to be able to decrease the counter value however we",
    "start": "1280490",
    "end": "1287090"
  },
  {
    "text": "couldn't couldn't do that using G counters for simple reason because if we would lower the value of our counter it",
    "start": "1287090",
    "end": "1294440"
  },
  {
    "text": "wouldn't be there would be no way to decide if it's most up-to-date or not because we are always taking the max 15",
    "start": "1294440",
    "end": "1301490"
  },
  {
    "text": "but we could compose two counters together and this is something that is",
    "start": "1301490",
    "end": "1306590"
  },
  {
    "text": "called positive negative counter which is built of two counters one which is counting increments and one which is",
    "start": "1306590",
    "end": "1313429"
  },
  {
    "text": "counting decrements so if you want to increment the counter value we are incrementing the incremented counter",
    "start": "1313429",
    "end": "1319790"
  },
  {
    "text": "if you want to decrement the value we take the decrement of the counter and increment it as well if you wants to get",
    "start": "1319790",
    "end": "1327140"
  },
  {
    "text": "the total value that we have we get the counter value for increments counter",
    "start": "1327140",
    "end": "1333410"
  },
  {
    "text": "value for decrements and just subtract them and this way you can implement something",
    "start": "1333410",
    "end": "1339710"
  },
  {
    "text": "that is able to both grow up side and dancing another thing let's say that we",
    "start": "1339710",
    "end": "1346760"
  },
  {
    "start": "1344000",
    "end": "1452000"
  },
  {
    "text": "have voting system but it's also for example a list of active subscribers so we would like to see if a person who",
    "start": "1346760",
    "end": "1354910"
  },
  {
    "text": "voted for some kind of survey for example is able to vote for it again",
    "start": "1354910",
    "end": "1361490"
  },
  {
    "text": "because we would like we would like to save ourselves from doing you know",
    "start": "1361490",
    "end": "1366620"
  },
  {
    "text": "voting on double hands right we shouldn't probably be able to unload the",
    "start": "1366620",
    "end": "1373520"
  },
  {
    "text": "vote that we made previously because this would mean that the system that is handling this on vote optioned and",
    "start": "1373520",
    "end": "1380300"
  },
  {
    "text": "unload feature knows what what was our vote and this probably would cause some",
    "start": "1380300",
    "end": "1387080"
  },
  {
    "text": "trust issues in our system right so we can say that there is no one vote option",
    "start": "1387080",
    "end": "1393710"
  },
  {
    "text": "but we can therefore we can figure out",
    "start": "1393710",
    "end": "1400670"
  },
  {
    "text": "that the set of users who have participated in that vote voting can",
    "start": "1400670",
    "end": "1408800"
  },
  {
    "text": "only grow up just like our country but this time it's only a set so just like",
    "start": "1408800",
    "end": "1414590"
  },
  {
    "text": "we have the counter right now we have G set which is growing only set it just ordinary set that is limited only to add",
    "start": "1414590",
    "end": "1422630"
  },
  {
    "text": "operation and to match and merge in this case is simply union of the sets I've",
    "start": "1422630",
    "end": "1427790"
  },
  {
    "text": "implemented this set also as JavaScript plain JavaScript objects which can be",
    "start": "1427790",
    "end": "1434480"
  },
  {
    "text": "you know serialize and deserialize and with that case that special case that",
    "start": "1434480",
    "end": "1439850"
  },
  {
    "text": "here we are only interested in key component of the key value power entry not in the value itself later on we will",
    "start": "1439850",
    "end": "1448010"
  },
  {
    "text": "use this value to other kind of stuff so next thing",
    "start": "1448010",
    "end": "1453560"
  },
  {
    "start": "1452000",
    "end": "1681000"
  },
  {
    "text": "it's distributed shopping cart and this is something that was one of the I think",
    "start": "1453560",
    "end": "1458810"
  },
  {
    "text": "first production seer disease that was published by Amazon in the shopping cart",
    "start": "1458810",
    "end": "1465680"
  },
  {
    "text": "option so let's think that we would like to have built a shopping list so we are",
    "start": "1465680",
    "end": "1471140"
  },
  {
    "text": "sitting in the kitchen which our laptop we are adding some you know some things",
    "start": "1471140",
    "end": "1477410"
  },
  {
    "text": "that we want to buy like one banana two bananas one kilogram of strawberries or",
    "start": "1477410",
    "end": "1484010"
  },
  {
    "text": "something like that but later on we would like to check out what we have in",
    "start": "1484010",
    "end": "1489050"
  },
  {
    "text": "our garage or in our basement so we are taking our mobile phone we are going back to basement and we lost the",
    "start": "1489050",
    "end": "1497360"
  },
  {
    "text": "connection with the internet but we still would like to be able to you know work over this shopping list",
    "start": "1497360",
    "end": "1503960"
  },
  {
    "text": "while for example our wife is still using our laptop on the first floor and",
    "start": "1503960",
    "end": "1511450"
  },
  {
    "text": "you know also adding or removing elements from it and when we are back from the basement",
    "start": "1511450",
    "end": "1519980"
  },
  {
    "text": "we would like to our application to synchronize those two different shopping carts together into one that is that has",
    "start": "1519980",
    "end": "1527420"
  },
  {
    "text": "some some sense I would say and not cause any kind of problems for them and",
    "start": "1527420",
    "end": "1534040"
  },
  {
    "text": "again this is something that just like we have a grown Colin said this is grown call him up it works in the same way",
    "start": "1534040",
    "end": "1542030"
  },
  {
    "text": "that our growing colony set works but in this case the value component that we",
    "start": "1542030",
    "end": "1547850"
  },
  {
    "text": "ignored notice that it's now a pee pee encounter itself positive negative counter so we can add more values to our",
    "start": "1547850",
    "end": "1556280"
  },
  {
    "text": "basket or shopping list or remove them if you want and this is also motivation",
    "start": "1556280",
    "end": "1563570"
  },
  {
    "text": "if you are not yet decided why it's worth to learning something like that because there's a very little",
    "start": "1563570",
    "end": "1571610"
  },
  {
    "text": "probability that if you would have case like that that you will have a framework that will handle it for you this way",
    "start": "1571610",
    "end": "1578290"
  },
  {
    "text": "usually it doesn't happen this way usually most of the frameworks give you",
    "start": "1578290",
    "end": "1583850"
  },
  {
    "text": "only very primitive values value types and he needs to be able to compose them",
    "start": "1583850",
    "end": "1589400"
  },
  {
    "text": "together or introduce some technical depth because you didn't know how to solve it that way so we solve it you",
    "start": "1589400",
    "end": "1596300"
  },
  {
    "text": "know some way around but if you understand F have this kind of intuition",
    "start": "1596300",
    "end": "1601940"
  },
  {
    "text": "how to build those structures then you can build something like this by yourselves and this is probably",
    "start": "1601940",
    "end": "1608060"
  },
  {
    "text": "something like sixty lines of codes including the P encouter implementation",
    "start": "1608060",
    "end": "1614410"
  },
  {
    "text": "so we simply can add more elements by",
    "start": "1614410",
    "end": "1619550"
  },
  {
    "text": "using the entry as okay as a key for example our banana would be a item so",
    "start": "1619550",
    "end": "1626090"
  },
  {
    "text": "the key of our key value map and the value is P encounter itself which is incremented or the connected as we want",
    "start": "1626090",
    "end": "1634450"
  },
  {
    "text": "here the value when we are producing the value so for example the result would be banana free strawberry five and so on",
    "start": "1634450",
    "end": "1642770"
  },
  {
    "text": "and so on we will we could also implement removing elements from it",
    "start": "1642770",
    "end": "1648160"
  },
  {
    "text": "simply by you know not including zero entries in our result set it is very",
    "start": "1648160",
    "end": "1655940"
  },
  {
    "text": "simple and the merge operation works very simple as well and basically we are",
    "start": "1655940",
    "end": "1661370"
  },
  {
    "text": "again squashing all the entries and if there were there were different P",
    "start": "1661370",
    "end": "1667160"
  },
  {
    "text": "encounters on both sides we merge them because we know how to merge PN counters so if there are conflicts we use this",
    "start": "1667160",
    "end": "1673940"
  },
  {
    "text": "merge operation to resolve those contexts and this is a power of composition in when using C abilities",
    "start": "1673940",
    "end": "1681340"
  },
  {
    "start": "1681000",
    "end": "1721000"
  },
  {
    "text": "another case and let's say that we are in an even implementing kind of Twitter",
    "start": "1681340",
    "end": "1686720"
  },
  {
    "text": "and would like to have a list of followers so we would like to you know follow some user and follow it follow it",
    "start": "1686720",
    "end": "1693140"
  },
  {
    "text": "again looks like that so could we do that using G set no",
    "start": "1693140",
    "end": "1700070"
  },
  {
    "text": "because G set has only semantic for adding elements not removing them and",
    "start": "1700070",
    "end": "1705980"
  },
  {
    "text": "there is we couldn't safely remove the values because if we then try to merge",
    "start": "1705980",
    "end": "1711110"
  },
  {
    "text": "with another replicas that didn't notice that this value was removed it would reappear magically after resolving the",
    "start": "1711110",
    "end": "1719180"
  },
  {
    "text": "context so if we composed two G counters together to build a counter that can",
    "start": "1719180",
    "end": "1725749"
  },
  {
    "start": "1721000",
    "end": "1856000"
  },
  {
    "text": "grow and decrease its value could we do the same with two to grow new sets mmm",
    "start": "1725749",
    "end": "1733909"
  },
  {
    "text": "yeah in theory we could this was already done it's called still face set so we",
    "start": "1733909",
    "end": "1740600"
  },
  {
    "text": "basically have two kind of sets one set accounting elements added to that set",
    "start": "1740600",
    "end": "1747259"
  },
  {
    "text": "and once that accounting Kellerman's removed from the set and our result is basically a except operation from those",
    "start": "1747259",
    "end": "1755539"
  },
  {
    "text": "two so elements existing in add set that doesn't exist in the remove set and we",
    "start": "1755539",
    "end": "1762499"
  },
  {
    "text": "can do match operations were simply just by merging the feels having those two G",
    "start": "1762499",
    "end": "1769279"
  },
  {
    "text": "sets however it is introduced a kind of problem because once we insert and",
    "start": "1769279",
    "end": "1777499"
  },
  {
    "text": "remove element we cannot insert again because if we added elements we added to",
    "start": "1777499",
    "end": "1784879"
  },
  {
    "text": "add set we removed elements we added it to remove set then we add it again add",
    "start": "1784879",
    "end": "1790369"
  },
  {
    "text": "adding it to add set when we want to get the final value the algorithm was take",
    "start": "1790369",
    "end": "1797749"
  },
  {
    "text": "all elements from add sets that doesn't exist in the remove set but we have no",
    "start": "1797749",
    "end": "1803239"
  },
  {
    "text": "options to remove to add again once removed operate element from that and",
    "start": "1803239",
    "end": "1809629"
  },
  {
    "text": "also it requires the tombstones so remove set is also called stone stones",
    "start": "1809629",
    "end": "1816289"
  },
  {
    "text": "from time to time sorry for that so when",
    "start": "1816289",
    "end": "1822139"
  },
  {
    "text": "we have those tombstones we need to keep them alive forever and this is a problem",
    "start": "1822139",
    "end": "1827480"
  },
  {
    "text": "and if I'm right SoundCloud have implementation of that and and the issue",
    "start": "1827480",
    "end": "1834499"
  },
  {
    "text": "in their case was that for example the list of followers the active sets that",
    "start": "1834499",
    "end": "1840559"
  },
  {
    "text": "was presented to the user was a JSON of five kilobytes in size while tombstones",
    "start": "1840559",
    "end": "1846529"
  },
  {
    "text": "could reach even to Meg so it's it's pretty a lot P to be big bloat",
    "start": "1846529",
    "end": "1853940"
  },
  {
    "text": "for something that simple and this of course have been solved so we are again",
    "start": "1853940",
    "end": "1862160"
  },
  {
    "text": "having those two G sets and hence to have the value the keys are elements but",
    "start": "1862160",
    "end": "1869720"
  },
  {
    "text": "the value our time stamps here and the time stamp is T 1 for value a and T 2",
    "start": "1869720",
    "end": "1877940"
  },
  {
    "text": "for value B now imagine that we have operations where we want to insert next",
    "start": "1877940",
    "end": "1885500"
  },
  {
    "text": "Ln C in time T 3 we simply add it to our",
    "start": "1885500",
    "end": "1890740"
  },
  {
    "text": "ad set if you want to remove it at a later time we add it to remove set we",
    "start": "1890740",
    "end": "1898790"
  },
  {
    "text": "can actually move it to the remove set because it's not important if that value is in ad set or remove that it just",
    "start": "1898790",
    "end": "1904880"
  },
  {
    "text": "needs to be in the composition of those two so we don't forget about it and we",
    "start": "1904880",
    "end": "1910040"
  },
  {
    "text": "update the time stamp in which it was added the remove set so when it was",
    "start": "1910040",
    "end": "1915140"
  },
  {
    "text": "removed if we want to insert this again we again can move it from remove set to",
    "start": "1915140",
    "end": "1920300"
  },
  {
    "text": "add set updating the time stamp and this is something that is called right wins",
    "start": "1920300",
    "end": "1925340"
  },
  {
    "text": "set and this is something that was implemented actually in SoundCloud to",
    "start": "1925340",
    "end": "1930890"
  },
  {
    "text": "build their followers list they were using time stamps in form of simple",
    "start": "1930890",
    "end": "1936320"
  },
  {
    "text": "date/time so this was very easy for them",
    "start": "1936320",
    "end": "1942020"
  },
  {
    "text": "to do and the final value they we are interested in in this case is Oliver all",
    "start": "1942020",
    "end": "1947330"
  },
  {
    "text": "of the valves from ad set with the time stamps that are equal or greater than",
    "start": "1947330",
    "end": "1954680"
  },
  {
    "text": "time stamps from the remove set so and the items that we are have added after",
    "start": "1954680",
    "end": "1959930"
  },
  {
    "text": "we have removed them or if they were never removed just we take them as they",
    "start": "1959930",
    "end": "1965060"
  },
  {
    "text": "are and merging since we know how to merge numbers using the Mad Max",
    "start": "1965060",
    "end": "1972770"
  },
  {
    "text": "operation we also can use the same operation on time stamps as well now",
    "start": "1972770",
    "end": "1981380"
  },
  {
    "text": "this is a great solutions for the great oceans for insertion for them",
    "start": "1981380",
    "end": "1987140"
  },
  {
    "text": "and because usually we don't cut and remove the same follower very often but",
    "start": "1987140",
    "end": "1994640"
  },
  {
    "text": "sometimes we might reach into cases when and there is an all set",
    "start": "1994640",
    "end": "1999800"
  },
  {
    "text": "so observe human set in which a single entry is added and removed multiple times by multiple users on different",
    "start": "1999800",
    "end": "2006370"
  },
  {
    "text": "continents and this is a problem when we are using wall clock time stamps simply",
    "start": "2006370",
    "end": "2014560"
  },
  {
    "text": "because clock seems to be in sync and this is something that is not really",
    "start": "2014560",
    "end": "2019600"
  },
  {
    "text": "easy to achieve Google Cloud created the entire infrastructure to build something",
    "start": "2019600",
    "end": "2026650"
  },
  {
    "text": "they are calling true time to implement a very very precise notion of absolute",
    "start": "2026650",
    "end": "2032560"
  },
  {
    "text": "time that is spanning the entire planet they are using this using with atomic",
    "start": "2032560",
    "end": "2038620"
  },
  {
    "text": "clocks and GPS and they still don't have a precision notion of time true time is",
    "start": "2038620",
    "end": "2045340"
  },
  {
    "text": "not a single point in time it's a range from two which is representing real time",
    "start": "2045340",
    "end": "2052500"
  },
  {
    "text": "so it's not very easy to keep your clocks in sync and another thing that we",
    "start": "2052500",
    "end": "2057520"
  },
  {
    "text": "don't know about is whenever two updates that resulted in a conflict knew about",
    "start": "2057520",
    "end": "2064658"
  },
  {
    "text": "each other so sometimes we would like to know if two updates were conflicting in order to",
    "start": "2064659",
    "end": "2070960"
  },
  {
    "text": "make some resolution are good for that like merge operation if our values are",
    "start": "2070960",
    "end": "2076629"
  },
  {
    "text": "sure it is by themselves and this is something that is solvable using vector",
    "start": "2076630",
    "end": "2082629"
  },
  {
    "start": "2081000",
    "end": "2447000"
  },
  {
    "text": "clocks who are familiar with vector clocks okay so vector clocks are",
    "start": "2082630",
    "end": "2089470"
  },
  {
    "text": "basically a different way of thinking about time we don't think about time in terms of physical wall clock time",
    "start": "2089470",
    "end": "2097390"
  },
  {
    "text": "instead we are using a logical a notion of time in and how do they look",
    "start": "2097390",
    "end": "2103750"
  },
  {
    "text": "they are simply key value key value maps with keeping replica ID value being just",
    "start": "2103750",
    "end": "2111550"
  },
  {
    "text": "a number just like the counter we interest instantly however when we want to compare the",
    "start": "2111550",
    "end": "2117370"
  },
  {
    "text": "order of them we don't using vector clocks for operations like and get me all of the entries that",
    "start": "2117370",
    "end": "2124290"
  },
  {
    "text": "happened after 10th of July right we use them to establish the relationships of",
    "start": "2124290",
    "end": "2129660"
  },
  {
    "text": "happened before and between each other and the they introduce something that is",
    "start": "2129660",
    "end": "2136350"
  },
  {
    "text": "called partial ordering so in standard or drink when we compare two things we",
    "start": "2136350",
    "end": "2141359"
  },
  {
    "text": "have three states right less equal or greater than here we will have four and",
    "start": "2141359",
    "end": "2147090"
  },
  {
    "text": "I will cover them in short so two vector clocks are equal when all of their",
    "start": "2147090",
    "end": "2152160"
  },
  {
    "text": "corresponding entries have equal values if at least one of the values on the",
    "start": "2152160",
    "end": "2157410"
  },
  {
    "text": "left is greater than the corresponding value of the right on the right then we",
    "start": "2157410",
    "end": "2162960"
  },
  {
    "text": "consider that vector code to be greater than the reverse case also applies for",
    "start": "2162960",
    "end": "2168240"
  },
  {
    "text": "less than and when we have mixed case of greater and lesser done values we call",
    "start": "2168240",
    "end": "2174859"
  },
  {
    "text": "this concurrent concurrent in case of partial ordering for vector cross and",
    "start": "2174859",
    "end": "2181020"
  },
  {
    "text": "this means that for example in this case replica a updated a value and replica be",
    "start": "2181020",
    "end": "2186900"
  },
  {
    "text": "updated the value but they didn't know about each other updates so we know that",
    "start": "2186900",
    "end": "2192290"
  },
  {
    "text": "they updated the value in maybe not in exactly the same time but before they",
    "start": "2192290",
    "end": "2197340"
  },
  {
    "text": "got the updated replica from the other side and in this case we could you know",
    "start": "2197340",
    "end": "2203580"
  },
  {
    "text": "provide some kind of arbitrary decision how to solve this problem this is just a",
    "start": "2203580",
    "end": "2210060"
  },
  {
    "text": "piece of code I will not explain what it does because I did just a second before",
    "start": "2210060",
    "end": "2216890"
  },
  {
    "text": "I'm presenting it here for you in case if you would like to later on go back to",
    "start": "2216890",
    "end": "2223320"
  },
  {
    "text": "this presentation and use it as a tutorial because all of this code is self-contained so if you will write it down on your table you know on your",
    "start": "2223320",
    "end": "2229950"
  },
  {
    "text": "editor and run it should run okay so you can implement it straight from",
    "start": "2229950",
    "end": "2235290"
  },
  {
    "text": "those slides and this is a lot of code do not focus Elaine we will focus on",
    "start": "2235290",
    "end": "2241530"
  },
  {
    "text": "particular parts and when we are adding and removing elements from our set we",
    "start": "2241530",
    "end": "2248850"
  },
  {
    "text": "are basically incrementing the corresponding value of the clock for each of the sides just like we were",
    "start": "2248850",
    "end": "2256589"
  },
  {
    "text": "using new dates and date or in Dalton today it's time to get the timestamp",
    "start": "2256589",
    "end": "2261599"
  },
  {
    "text": "here we don't get the time stamp based on the system clock we are incrementing",
    "start": "2261599",
    "end": "2267359"
  },
  {
    "text": "the one that is already there or we are using the empty one and incrementing instead when we want to provide our",
    "start": "2267359",
    "end": "2276029"
  },
  {
    "text": "users the result we are comparing all of the entries from the or of the time",
    "start": "2276029",
    "end": "2282630"
  },
  {
    "text": "stamps and just like we did with dates time stamps but in this case we want to",
    "start": "2282630",
    "end": "2290029"
  },
  {
    "text": "cover all four states so in case if our add that insert timestamp was greater",
    "start": "2290029",
    "end": "2296999"
  },
  {
    "text": "than or concurrent to remove time stamp then we want to keep that value in the",
    "start": "2296999",
    "end": "2303930"
  },
  {
    "text": "result set if it was lesser than then we don't want to keep it and this is the case here and",
    "start": "2303930",
    "end": "2310470"
  },
  {
    "text": "if they are equal then we should throw them an error because we shouldn't be",
    "start": "2310470",
    "end": "2315660"
  },
  {
    "text": "able to add and remove the same value using the same time stamp but I didn't",
    "start": "2315660",
    "end": "2321359"
  },
  {
    "text": "cover it here and just to keep the code inside safe sorry so merging just like we use this map map",
    "start": "2321359",
    "end": "2330299"
  },
  {
    "text": "max for merging time stamps based on wall clock here we are using vector clock merge which is the same as the",
    "start": "2330299",
    "end": "2337710"
  },
  {
    "text": "counter merge oh and this is called add winds observe remove set it's a long",
    "start": "2337710",
    "end": "2344069"
  },
  {
    "text": "name because we are favored izing adds",
    "start": "2344069",
    "end": "2349730"
  },
  {
    "text": "instead of remove so in case of conflicting conflicting vector clocks when we have concurrent updates we want",
    "start": "2349730",
    "end": "2356279"
  },
  {
    "text": "to keep the value that was added not removed and this causes a problem how",
    "start": "2356279",
    "end": "2362640"
  },
  {
    "text": "much time do I have okay how whoa",
    "start": "2362640",
    "end": "2369920"
  },
  {
    "text": "don't worry I just don't want you know",
    "start": "2369920",
    "end": "2375420"
  },
  {
    "text": "go through this too quickly because it's not an easy topic and I'm afraid that",
    "start": "2375420",
    "end": "2381710"
  },
  {
    "text": "some of you might get lost already and there are harder topics ahead of us",
    "start": "2381710",
    "end": "2386790"
  },
  {
    "text": "so the problem with well cleric vector",
    "start": "2386790",
    "end": "2393300"
  },
  {
    "text": "clerks and CEO duties in general is the space complexity so the amount of memory",
    "start": "2393300",
    "end": "2398310"
  },
  {
    "text": "or payload they are using because of the all of that metadata that we want to keep around in order to resolve context",
    "start": "2398310",
    "end": "2405020"
  },
  {
    "text": "so when we are using Qualcomm timestamps usually they can be represented using",
    "start": "2405020",
    "end": "2410100"
  },
  {
    "text": "clones so 8 bytes per each entry when we are using vector clocks they don't have",
    "start": "2410100",
    "end": "2415920"
  },
  {
    "text": "fixed size the size depends mostly on the number of nodes so number of",
    "start": "2415920",
    "end": "2421230"
  },
  {
    "text": "replicas doing that we have also on the kisailus of our replicas and here's the",
    "start": "2421230",
    "end": "2427980"
  },
  {
    "text": "simple calculations that shows you how much more expensive in memory size or",
    "start": "2427980",
    "end": "2433320"
  },
  {
    "text": "disk size is to have a vector clock and this is of course the very optimistic",
    "start": "2433320",
    "end": "2439020"
  },
  {
    "text": "calculation because it doesn't count the data structure only the payload and that",
    "start": "2439020",
    "end": "2444180"
  },
  {
    "text": "is keeping this vector clock we'll come back to it later I hope because we have",
    "start": "2444180",
    "end": "2451020"
  },
  {
    "start": "2447000",
    "end": "2686000"
  },
  {
    "text": "20 more minutes but yeah something that could be used to make your own series",
    "start": "2451020",
    "end": "2458940"
  },
  {
    "text": "this much better is using Delta's why for example imagine that we have built",
    "start": "2458940",
    "end": "2466050"
  },
  {
    "text": "this follower list based on the observed few move set now we have somebody like",
    "start": "2466050",
    "end": "2473550"
  },
  {
    "text": "in Ilham asked he has probably 11 maybe more millions of followers we wants to",
    "start": "2473550",
    "end": "2479820"
  },
  {
    "text": "follow as well so we click the follow link we updated the old counter or set",
    "start": "2479820",
    "end": "2486690"
  },
  {
    "text": "sorry for the Allen mask on the local replicas and now we want to propagate",
    "start": "2486690",
    "end": "2491910"
  },
  {
    "text": "these updates to other replicas as well so we are now in phase of sterilizing",
    "start": "2491910",
    "end": "2499080"
  },
  {
    "text": "the 11 million of entries for every single follow click this is",
    "start": "2499080",
    "end": "2507839"
  },
  {
    "text": "kind of painting yes but we can optimize it using something that is called",
    "start": "2507839",
    "end": "2513660"
  },
  {
    "text": "Zelda's just like when you are using git for example when we are pushing our",
    "start": "2513660",
    "end": "2519210"
  },
  {
    "text": "changes to the origin to the mob remote branch we are not sending the whole",
    "start": "2519210",
    "end": "2526050"
  },
  {
    "text": "files that have changed we instead are using disks or only change sets of those",
    "start": "2526050",
    "end": "2532530"
  },
  {
    "text": "files and publishing only those changes instead so we are doing the same here",
    "start": "2532530",
    "end": "2537650"
  },
  {
    "text": "when we are for example incrementing the states of our G counter for replicas B",
    "start": "2537650",
    "end": "2543890"
  },
  {
    "text": "we first create a new state with updated value but at the same time we can create",
    "start": "2543890",
    "end": "2550680"
  },
  {
    "text": "another G counter that is with red treat as a delta which is only a subset of the",
    "start": "2550680",
    "end": "2555930"
  },
  {
    "text": "entire counter that is consisting only of the entry that we have changed and",
    "start": "2555930",
    "end": "2561599"
  },
  {
    "text": "this way we don't need to publish the entire and the entire state all we need",
    "start": "2561599",
    "end": "2567119"
  },
  {
    "text": "to do is to publish the change set itself and this is just like that most",
    "start": "2567119",
    "end": "2576240"
  },
  {
    "text": "of the deltas can be implemented using the same tools that the original series",
    "start": "2576240",
    "end": "2582450"
  },
  {
    "text": "were using and can be melt as well using the same operations that we are using on",
    "start": "2582450",
    "end": "2588420"
  },
  {
    "text": "the full States and they have only one small downsize just as you remember on",
    "start": "2588420",
    "end": "2595680"
  },
  {
    "text": "the time on the line and timeline I've maybe not the timeline on the diagram",
    "start": "2595680",
    "end": "2601740"
  },
  {
    "text": "I've presented initially and the more we are moving through operation States because this is a kind of operation like",
    "start": "2601740",
    "end": "2608490"
  },
  {
    "text": "you know we are sending updates instead of full size we can treat them as operations we need to enrich our",
    "start": "2608490",
    "end": "2616880"
  },
  {
    "text": "replication protocol because now we need",
    "start": "2616880",
    "end": "2622890"
  },
  {
    "text": "to be sure that those updates were received on the other side if we won't",
    "start": "2622890",
    "end": "2628520"
  },
  {
    "text": "do that then we will probably miss some of the entries that were lost during the",
    "start": "2628520",
    "end": "2635300"
  },
  {
    "text": "synchronization process if for example a machine remote motion that we wanted to replicate our Delta 2",
    "start": "2635300",
    "end": "2641580"
  },
  {
    "text": "has died or something like that and so no you cannot use UDP anymore using this",
    "start": "2641580",
    "end": "2647820"
  },
  {
    "text": "notion but probably none of us is doing that anyway so it shouldn't be really a",
    "start": "2647820",
    "end": "2653430"
  },
  {
    "text": "problem the simple solution for that is that we send Delta replicates data to",
    "start": "2653430",
    "end": "2662700"
  },
  {
    "text": "other replicas during the standard update process and from time to time for",
    "start": "2662700",
    "end": "2669360"
  },
  {
    "text": "example like every minute every hour we are sending the full States to synchronize and correct the missing you",
    "start": "2669360",
    "end": "2675030"
  },
  {
    "text": "know values because we are living in eventually consistent reality remember",
    "start": "2675030",
    "end": "2681380"
  },
  {
    "text": "in the topic of this tag so yeah one we",
    "start": "2681380",
    "end": "2687960"
  },
  {
    "start": "2686000",
    "end": "2826000"
  },
  {
    "text": "are in the appendix session section so things that I hope I will have enough",
    "start": "2687960",
    "end": "2694950"
  },
  {
    "text": "time to talk about but I wasn't sure first is how to enforce consistency because in theory we have eventually",
    "start": "2694950",
    "end": "2703680"
  },
  {
    "text": "consistent system so this means that we have the writer can store updates on one",
    "start": "2703680",
    "end": "2711780"
  },
  {
    "text": "node for example on one machine while the reader is reading the same value from another machine and he can get out",
    "start": "2711780",
    "end": "2718590"
  },
  {
    "text": "of date values right so there is a way how to fix that one one of those ways is",
    "start": "2718590",
    "end": "2725850"
  },
  {
    "text": "to do something that is called replicated right and replicated treat so",
    "start": "2725850",
    "end": "2732270"
  },
  {
    "text": "when for example Alice is updating the state from X 1 to X 2 she doesn't have",
    "start": "2732270",
    "end": "2738690"
  },
  {
    "text": "an acknowledgment a response from our system right away only after we have",
    "start": "2738690",
    "end": "2744270"
  },
  {
    "text": "confirmed that the replication that the replica was sense to majority of nodes",
    "start": "2744270",
    "end": "2750780"
  },
  {
    "text": "in our system so and n divided by 2 plus",
    "start": "2750780",
    "end": "2756660"
  },
  {
    "text": "1 and only then and only then we are sending the acknowledgment for it later",
    "start": "2756660",
    "end": "2763530"
  },
  {
    "text": "on when for example Bob is trying to read the value of that the same under",
    "start": "2763530",
    "end": "2769200"
  },
  {
    "text": "same value he is doing a replicated treat so he also doesn't reach only from one replica",
    "start": "2769200",
    "end": "2774750"
  },
  {
    "text": "is that he is choosing randomly majority of the replicas and getting back the",
    "start": "2774750",
    "end": "2780000"
  },
  {
    "text": "states from them later before later on before we send the states to the Bob we",
    "start": "2780000",
    "end": "2785700"
  },
  {
    "text": "are merging them together and updating the local state as well and this way we can replicate as well and this way we",
    "start": "2785700",
    "end": "2794130"
  },
  {
    "text": "have this coverage that at least one of the notes in our system will have the most up-to-date value of course this is",
    "start": "2794130",
    "end": "2800220"
  },
  {
    "text": "an issue because we are no longer able to simply work in the full offline mode",
    "start": "2800220",
    "end": "2807660"
  },
  {
    "text": "because we need to reach at least my majority of the active replicas but it's",
    "start": "2807660",
    "end": "2816450"
  },
  {
    "text": "still a little bit better than using a leader follower replication because we don't still don't need to waste time for",
    "start": "2816450",
    "end": "2823020"
  },
  {
    "text": "the consensus and coming back together",
    "start": "2823020",
    "end": "2828510"
  },
  {
    "start": "2826000",
    "end": "2925000"
  },
  {
    "text": "again to optimizing our offset to remove Tom stones and to reduce the size of",
    "start": "2828510",
    "end": "2835530"
  },
  {
    "text": "those vector clocks this is something that is called dotted version vectors it's a great name by the way the name",
    "start": "2835530",
    "end": "2845190"
  },
  {
    "text": "and that is related to C or D T's quite often is called joint semi-lattice",
    "start": "2845190",
    "end": "2850460"
  },
  {
    "text": "my mind just kernel panicked when I heard about this first time and I think",
    "start": "2850460",
    "end": "2857070"
  },
  {
    "text": "that using means as well as such makes this whole topic a lot harder to learn",
    "start": "2857070",
    "end": "2863280"
  },
  {
    "text": "that it's really is because as you have seen all of those implementations fit",
    "start": "2863280",
    "end": "2868920"
  },
  {
    "text": "into a single site sometimes I'm using font number eight in size but still they",
    "start": "2868920",
    "end": "2874710"
  },
  {
    "text": "are fitting in so yeah going back to doctored version version vectors here we",
    "start": "2874710",
    "end": "2885270"
  },
  {
    "text": "won't be using a vector clocks per se because what we have seen that when we",
    "start": "2885270",
    "end": "2892440"
  },
  {
    "text": "are updating the value we don't update the entire vector clock we usually are updating the single entry just like with",
    "start": "2892440",
    "end": "2899310"
  },
  {
    "text": "deltas we can take the single entry we are calling it usually dot that",
    "start": "2899310",
    "end": "2904849"
  },
  {
    "text": "marking the point in time but not point in time in terms of physical time but",
    "start": "2904849",
    "end": "2912089"
  },
  {
    "text": "point in time in case of our regular clock and it marks timestamps this single event like insertion or removal",
    "start": "2912089",
    "end": "2919880"
  },
  {
    "text": "to a specific point in time in our logical time later on we can join",
    "start": "2919880",
    "end": "2927150"
  },
  {
    "start": "2925000",
    "end": "3020000"
  },
  {
    "text": "together all of those dots to build something that is called dotted version vector and we can imagine it's it looks",
    "start": "2927150",
    "end": "2935730"
  },
  {
    "text": "something like that so since we are updating sending those",
    "start": "2935730",
    "end": "2942660"
  },
  {
    "text": "updates sometimes out of order we can have disjoint dots dots on the right",
    "start": "2942660",
    "end": "2949109"
  },
  {
    "text": "side but usually we are trying to catch all of the dots that happened in the past and join it to our sin version of",
    "start": "2949109",
    "end": "2956970"
  },
  {
    "text": "state so this clock this blue mass that you can see on the left will be",
    "start": "2956970",
    "end": "2962730"
  },
  {
    "text": "progressing from left right over the time and eventually and merging all of",
    "start": "2962730",
    "end": "2968400"
  },
  {
    "text": "those disjoint dots all together over the course of time and we can represent",
    "start": "2968400",
    "end": "2973710"
  },
  {
    "text": "it very easily using two data structures one is the vector clock that is",
    "start": "2973710",
    "end": "2978839"
  },
  {
    "text": "describing this blue mass on the left and it's describing it only by the edges",
    "start": "2978839",
    "end": "2985770"
  },
  {
    "text": "of that mass so for example d4 means that we have catched all of the events",
    "start": "2985770",
    "end": "2992000"
  },
  {
    "text": "from point 0 up to d4 for this value D and for all of the other corresponding",
    "start": "2992000",
    "end": "2997890"
  },
  {
    "text": "crepitus it's like building watermarks when we are visiting systems based on",
    "start": "2997890",
    "end": "3004940"
  },
  {
    "text": "the time stamps and we also have something that is called dot cloud which is simply a set of dots that is having",
    "start": "3004940",
    "end": "3011450"
  },
  {
    "text": "all of the disjoint dots on the right side usually this dot cloud is very small so this is how our",
    "start": "3011450",
    "end": "3022450"
  },
  {
    "text": "set looks previously so we have two two",
    "start": "3022450",
    "end": "3027589"
  },
  {
    "text": "compound sets one for others and removed elements we had some entries inside and",
    "start": "3027589",
    "end": "3034910"
  },
  {
    "text": "each of those entries were time stamping using vector clocks and this means that",
    "start": "3034910",
    "end": "3042620"
  },
  {
    "text": "sometimes in some situations sorry our vector clocks our metadata can be way",
    "start": "3042620",
    "end": "3049190"
  },
  {
    "text": "more way heavier than the actual active set active result said that we are",
    "start": "3049190",
    "end": "3054740"
  },
  {
    "text": "interested in right now with this approach we can represent it using something like that so we can active set",
    "start": "3054740",
    "end": "3061690"
  },
  {
    "text": "where we have our entries timestamp it only with the dots themselves that are",
    "start": "3061690",
    "end": "3067070"
  },
  {
    "text": "representing the time in logical play analogical time timeline when they",
    "start": "3067070",
    "end": "3072890"
  },
  {
    "text": "happened ora or sorry and something our that is",
    "start": "3072890",
    "end": "3079580"
  },
  {
    "text": "called a third dot context or dotted version vector on the right consisting",
    "start": "3079580",
    "end": "3084980"
  },
  {
    "text": "of two data structures that is describing the whole history that we have observed up to this moment in which",
    "start": "3084980",
    "end": "3091550"
  },
  {
    "text": "the state is in and as you can see here is there is no longer removes that there",
    "start": "3091550",
    "end": "3098210"
  },
  {
    "text": "is no longer Tom stones simply because",
    "start": "3098210",
    "end": "3103280"
  },
  {
    "text": "using dots we are able to see when something has been removed or not for",
    "start": "3103280",
    "end": "3110390"
  },
  {
    "text": "example we can see that there is there was a dot some event of removal of",
    "start": "3110390",
    "end": "3116360"
  },
  {
    "text": "removal marked with value C 3 we can see",
    "start": "3116360",
    "end": "3121370"
  },
  {
    "text": "it in our dot cloud but we don't see it in our active set and that means that it",
    "start": "3121370",
    "end": "3129110"
  },
  {
    "text": "must have been removed because simply when we are adding elements to this kind",
    "start": "3129110",
    "end": "3134330"
  },
  {
    "text": "of set we are adding hits to the active set marking it as a dot putting that dot into our doctored version vector and",
    "start": "3134330",
    "end": "3141020"
  },
  {
    "text": "that's all when we are removing it we'll simply remove it from our active set and",
    "start": "3141020",
    "end": "3146600"
  },
  {
    "text": "that's all it has been already marked in our dotted version vector so we already",
    "start": "3146600",
    "end": "3152060"
  },
  {
    "text": "noted that it has been done it has been there we we observed that removal and we",
    "start": "3152060",
    "end": "3159170"
  },
  {
    "text": "went when we were merging those two well we know how to make vector clocks since",
    "start": "3159170",
    "end": "3165350"
  },
  {
    "text": "dot Cloud is basically a set we know how to merge sets using human and now when",
    "start": "3165350",
    "end": "3171440"
  },
  {
    "text": "we want too much active sets we imagine them just like the set but in the process we",
    "start": "3171440",
    "end": "3177509"
  },
  {
    "text": "are removing all of the values that have dots that we already seen in the vector",
    "start": "3177509",
    "end": "3184890"
  },
  {
    "text": "clocks on the other side but we haven't seen the corresponding value in their active set and that's all so what's next",
    "start": "3184890",
    "end": "3193980"
  },
  {
    "text": "it turns out that this approach is not only limited to sir duties representing",
    "start": "3193980",
    "end": "3201029"
  },
  {
    "text": "simple operations for example you can of course have things like sets countries",
    "start": "3201029",
    "end": "3208170"
  },
  {
    "text": "and so on and for example if you are using Redis this enterprise version of Redis which series is leveraging the",
    "start": "3208170",
    "end": "3216240"
  },
  {
    "text": "fact that their type system type system of Raley's is actually using those",
    "start": "3216240",
    "end": "3222809"
  },
  {
    "text": "simple types but we can use it for building some entire documents that have",
    "start": "3222809",
    "end": "3228450"
  },
  {
    "text": "Jason like properties and for example this ultimate library I was talking about which you can use at any point in",
    "start": "3228450",
    "end": "3235109"
  },
  {
    "text": "time you want is basically a document store that you can update concurrently",
    "start": "3235109",
    "end": "3241349"
  },
  {
    "text": "from multiple replicas and those entire documents will be composed together into a single conflict-free",
    "start": "3241349",
    "end": "3248430"
  },
  {
    "text": "document without any need for manual conflict resolutions another thing that",
    "start": "3248430",
    "end": "3254819"
  },
  {
    "text": "you might be interested in are distributed transactions they are one is",
    "start": "3254819",
    "end": "3260039"
  },
  {
    "text": "called Brown which is real atomic multiple partition or song that which is",
    "start": "3260039",
    "end": "3267539"
  },
  {
    "text": "used I think it is used in Amazon DynamoDB because to be honest I haven't",
    "start": "3267539",
    "end": "3273269"
  },
  {
    "text": "found any informations from them what algorithm do they use but when reading the docs it",
    "start": "3273269",
    "end": "3279839"
  },
  {
    "text": "looked a little bit like the ramp transactions I haven't talked about them here and because we will not have enough",
    "start": "3279839",
    "end": "3287130"
  },
  {
    "text": "time and another one is cure which is used on this antidote DB think where you can do a CD transactions I I know I",
    "start": "3287130",
    "end": "3296400"
  },
  {
    "text": "might speak not clearly but there is a one letter missing in that because of ceará disease there is no isolation",
    "start": "3296400",
    "end": "3302910"
  },
  {
    "text": "between transactions because we don't need me to isolated them because they will always",
    "start": "3302910",
    "end": "3308190"
  },
  {
    "text": "converge to a single consistent state and yeah this is the summary so in case",
    "start": "3308190",
    "end": "3317010"
  },
  {
    "start": "3313000",
    "end": "3407000"
  },
  {
    "text": "if you are interested in going further there are different talks many different talks on this topic if you are",
    "start": "3317010",
    "end": "3323400"
  },
  {
    "text": "interested in building something by your own I've created a series of blog posts sorry I'm using an F sharp as a language",
    "start": "3323400",
    "end": "3331650"
  },
  {
    "text": "of choice there because this is my language of choice and examples for",
    "start": "3331650",
    "end": "3336870"
  },
  {
    "text": "those blog posts are also on my github if you are interested in building your own applications using the for example",
    "start": "3336870",
    "end": "3344190"
  },
  {
    "text": "cosmos DB and there is a special link for the dogs to building custom",
    "start": "3344190",
    "end": "3351750"
  },
  {
    "text": "configure social logic and there is also a tutorial for using credits Enterprise",
    "start": "3351750",
    "end": "3356970"
  },
  {
    "text": "series if you are eager to use them and they the nice thing with red eared abyss",
    "start": "3356970",
    "end": "3364170"
  },
  {
    "text": "is that they are not adding any extra you know overhead any extra keywords or",
    "start": "3364170",
    "end": "3371600"
  },
  {
    "text": "instructions you can use if you know Redis you can use those sear the beasts",
    "start": "3371600",
    "end": "3377190"
  },
  {
    "text": "in the same way that you were using Redis just read about you know this",
    "start": "3377190",
    "end": "3383040"
  },
  {
    "text": "conflict resolutions algorithm so you will not reach into you know some different states we when you are adding",
    "start": "3383040",
    "end": "3388920"
  },
  {
    "text": "and removing for example concurrently in the same value from the sets from the two different replicas and then the",
    "start": "3388920",
    "end": "3395100"
  },
  {
    "text": "result was not what you have expected so that's all and thank you very much",
    "start": "3395100",
    "end": "3401130"
  },
  {
    "text": "[Applause]",
    "start": "3401130",
    "end": "3409339"
  }
]