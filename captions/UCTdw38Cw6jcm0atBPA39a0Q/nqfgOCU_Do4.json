[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "okay so my name is Jason Turner I've got a few things going on there are some of them I've got a podcast or at like 215",
    "start": "4530",
    "end": "13349"
  },
  {
    "text": "episodes now Rob everything and I do this and C++ weekly my youtube channel and MVP Victor and BPI sorry just have",
    "start": "13349",
    "end": "21840"
  },
  {
    "text": "to keep pointing it out because it's awesome since 2015 I'm independent",
    "start": "21840",
    "end": "28740"
  },
  {
    "text": "available for contracting this is kind of my sales pitch right but this is kind of what my training looks like this is",
    "start": "28740",
    "end": "35610"
  },
  {
    "text": "the kind of level of interaction that I want with people so please interrupt me and ask questions and we'll see how this",
    "start": "35610",
    "end": "43469"
  },
  {
    "text": "goes but I can't really ask you to move to the front there's an empty seat right",
    "start": "43469",
    "end": "50340"
  },
  {
    "text": "here and one right there thank you very much okay if anyone is who's going to",
    "start": "50340",
    "end": "58320"
  },
  {
    "text": "see the pecan okay like two people I'm",
    "start": "58320",
    "end": "63539"
  },
  {
    "text": "giving a class they're coming up as well no unapplied const exper okay so this",
    "start": "63539",
    "end": "71280"
  },
  {
    "text": "talk is about code smells let's take a moment and talk about best practices and",
    "start": "71280",
    "end": "77070"
  },
  {
    "text": "if you were just here and Peter's talk a few moments ago he mentioned the core",
    "start": "77070",
    "end": "83340"
  },
  {
    "text": "guidelines and coding standards books so similarly I went and counted some of",
    "start": "83340",
    "end": "89130"
  },
  {
    "start": "85000",
    "end": "85000"
  },
  {
    "text": "these this is based on a grep of the core guidelines and it looks like we've",
    "start": "89130",
    "end": "96689"
  },
  {
    "text": "got about 496 of them currently scott Meyers effective modern c++ is at 42",
    "start": "96689",
    "end": "105450"
  },
  {
    "text": "that doesn't count Scott's effective C++ or more effective C++ or effective STL",
    "start": "105450",
    "end": "111780"
  },
  {
    "text": "books I've been working on my own best practices website that's EPB best practices com it's just a portable thing",
    "start": "111780",
    "end": "118799"
  },
  {
    "text": "on github there's about 109 things up there so far C lossless coding standards",
    "start": "118799",
    "end": "124409"
  },
  {
    "text": "from herb Sutter and Audra Alex and rescue 101 the best practices and that's",
    "start": "124409",
    "end": "131760"
  },
  {
    "text": "a fairly out-of-date book at this point but I still like it so I total",
    "start": "131760",
    "end": "138300"
  },
  {
    "text": "748 best practice items in just these like four short things here there's a",
    "start": "138300",
    "end": "146700"
  },
  {
    "text": "lot of questions we have to ask how many of them are unique does anyone have any",
    "start": "146700",
    "end": "152790"
  },
  {
    "text": "idea how many of those are actually unique best practices now I just for the",
    "start": "152790",
    "end": "158790"
  },
  {
    "text": "record I I don't either I didn't count them or anything how many of them are like important how many of them are",
    "start": "158790",
    "end": "163800"
  },
  {
    "text": "critical to us writing good code how many of them are stylistic concerns how many of them you know really matter how",
    "start": "163800",
    "end": "171930"
  },
  {
    "text": "many of them can our tools tell us about we'll discuss that more in a moment herbs made this comment it's VB con 2018",
    "start": "171930",
    "end": "180660"
  },
  {
    "text": "during his keynote he says we don't have to teach the things all compilers warn on I agree with them if we convince our",
    "start": "180660",
    "end": "190080"
  },
  {
    "text": "programmers to use warnings do you have warnings enabled in your code",
    "start": "190080",
    "end": "197120"
  },
  {
    "text": "who has w all enabled and thinks that means you have all of the warnings",
    "start": "197120",
    "end": "202200"
  },
  {
    "text": "enabled okay just for the record w all is well unless you're talking a visual",
    "start": "202200",
    "end": "208800"
  },
  {
    "text": "studio ru Visual Studio developers yeah yeah actually that's fun who all is a",
    "start": "208800",
    "end": "214530"
  },
  {
    "text": "Visual Studio developer in the room okay and Visual Studio W all does mean all of",
    "start": "214530",
    "end": "220260"
  },
  {
    "text": "the warnings and clang in GCC it's a tiny subset of the warnings actually okay so I wanted to flip this around and",
    "start": "220260",
    "end": "228630"
  },
  {
    "text": "see what happens if we just kind of look for code smells like that do the smells help us reduce",
    "start": "228630",
    "end": "237900"
  },
  {
    "text": "the set of best practices to something that we can actually stop and think about instead of hundreds and hundreds",
    "start": "237900",
    "end": "243630"
  },
  {
    "text": "of things that we're trying to keep in our mind all the time I asked Twitter for their favorite C++ code smells and",
    "start": "243630",
    "end": "251910"
  },
  {
    "text": "which a lot of people think this is kind of an ironic question how can you have a favorite smell code smell",
    "start": "251910",
    "end": "258209"
  },
  {
    "text": "we don't think of code smells as good things right they're not strawberries and cream or something fright okay so",
    "start": "258209",
    "end": "268080"
  },
  {
    "start": "268000",
    "end": "268000"
  },
  {
    "text": "Ben Dean said constructions separate from a so code like this string and then we're",
    "start": "268080",
    "end": "278520"
  },
  {
    "text": "assigning it the string hello world and I don't know because I've never given this talk before how much I get to slow",
    "start": "278520",
    "end": "285690"
  },
  {
    "text": "down and like actually step into what the codes doing so we're gonna see what happens",
    "start": "285690",
    "end": "291889"
  },
  {
    "text": "I mean I've practiced the talk but so this is with a very very latest version",
    "start": "292380",
    "end": "297420"
  },
  {
    "text": "of GCC with all optimizations enabled this becomes a single return statement",
    "start": "297420",
    "end": "302940"
  },
  {
    "text": "that is actually really really impressive this did not happen before",
    "start": "302940",
    "end": "310140"
  },
  {
    "text": "like a couple months ago or the previous version of GCC let's flip over to claim",
    "start": "310140",
    "end": "315750"
  },
  {
    "text": "this isn't saying anything about optimizers between different compilers or anything what we are doing here",
    "start": "315750",
    "end": "324350"
  },
  {
    "text": "do we want to step through every line of this no okay",
    "start": "324350",
    "end": "332490"
  },
  {
    "text": "like I said GCC did this like a month ago right like this it's an arms race and our compiler optimizers these days",
    "start": "332490",
    "end": "338640"
  },
  {
    "text": "so we are default constructing a string",
    "start": "338640",
    "end": "343740"
  },
  {
    "text": "on line 5 and then we are assigning a value on line southern generally",
    "start": "343740",
    "end": "349050"
  },
  {
    "text": "speaking the compiler I'm actually very surprised that GCC is optimizing this it",
    "start": "349050",
    "end": "354090"
  },
  {
    "text": "is two separate operations we have asked it a default construct something then we have asked it to call the assignment",
    "start": "354090",
    "end": "360390"
  },
  {
    "text": "operator on it so this is one of the things that then complained about here",
    "start": "360390",
    "end": "367200"
  },
  {
    "text": "instruction versus assignment so better is this construction and assignment if",
    "start": "367200",
    "end": "374370"
  },
  {
    "text": "you will in the same operation and now",
    "start": "374370",
    "end": "379550"
  },
  {
    "text": "GCC or clang it shouldn't matter this particular build of clang that I have",
    "start": "379550",
    "end": "386220"
  },
  {
    "text": "installed at the moment has actually I'm",
    "start": "386220",
    "end": "393150"
  },
  {
    "text": "going to do it this way",
    "start": "393150",
    "end": "395870"
  },
  {
    "text": "this bit is it's a little bit of a regression in the compiler currently",
    "start": "399430",
    "end": "405980"
  },
  {
    "text": "it's just not optimising out a couple of stack operations don't worry about that a whole lot but it's basically a no op",
    "start": "405980",
    "end": "413560"
  },
  {
    "text": "it's one reason I have GCC as my default compiler at the moment for today all",
    "start": "415510",
    "end": "422030"
  },
  {
    "text": "right any comments on this it's really simple straightforward stuff at the start here Oliver he is our very active",
    "start": "422030",
    "end": "435560"
  },
  {
    "text": "on Twitter said out parameters this is a typical out parameter we are defining",
    "start": "435560",
    "end": "443030"
  },
  {
    "text": "the value and then we are assigning the value using a get value function you",
    "start": "443030",
    "end": "448940"
  },
  {
    "text": "write code like this used to okay so",
    "start": "448940",
    "end": "455110"
  },
  {
    "text": "same kind of deal we have to default construct to the value and then we have",
    "start": "455110",
    "end": "460250"
  },
  {
    "text": "to pass it into this function to I fill in its value this GCC we're setting up",
    "start": "460250",
    "end": "473660"
  },
  {
    "text": "the string we're default constructing it or passing it by reference to the function the the disassembly on line 10",
    "start": "473660",
    "end": "479720"
  },
  {
    "text": "is where we're actually calling the function and then after that stack cleanup and the possibility of dealing",
    "start": "479720",
    "end": "485060"
  },
  {
    "text": "with memory that had to be destroyed or whatever we see two different deletes in here the plan is not to step through",
    "start": "485060",
    "end": "491780"
  },
  {
    "text": "every line of assembly right but we can oops I fast forwarded compared to this",
    "start": "491780",
    "end": "505190"
  },
  {
    "text": "version right here so again we are getting the return value we're assigning",
    "start": "505190",
    "end": "511460"
  },
  {
    "text": "it we're doing this in one operation anyone can tell me what this code actually has to do here do we have any",
    "start": "511460",
    "end": "518440"
  },
  {
    "text": "copying of data happening no do we have",
    "start": "518440",
    "end": "525170"
  },
  {
    "text": "an assignment operation happening no if I were to remove that constant of Al u",
    "start": "525170",
    "end": "532220"
  },
  {
    "text": "equals would it change the nature of this code at all",
    "start": "532220",
    "end": "538180"
  },
  {
    "text": "I'm waiting for the person who answered the last to would it I don't think it",
    "start": "542810",
    "end": "550259"
  },
  {
    "text": "would because either way it's going to have to deal with the return value from",
    "start": "550259",
    "end": "555839"
  },
  {
    "text": "this function so if I return that yeah",
    "start": "555839",
    "end": "560880"
  },
  {
    "text": "code the optimized code stayed exactly the same all right so I'm gonna give you",
    "start": "560880",
    "end": "572339"
  },
  {
    "text": "a little piece of swag okay how many",
    "start": "572339",
    "end": "579839"
  },
  {
    "text": "parameters does this function take one",
    "start": "579839",
    "end": "586130"
  },
  {
    "text": "what is the 1 the address of the return value who's that it depends yeah so it",
    "start": "586130",
    "end": "599040"
  },
  {
    "text": "basically has to because a string well it's a little bit complicated but because the strings not like trivially",
    "start": "599040",
    "end": "605069"
  },
  {
    "text": "copyable and the size of a register and all that kind of thing yeah it basically is one we're gonna have to push the",
    "start": "605069",
    "end": "610949"
  },
  {
    "text": "return value of this function the the the return memory location that is into",
    "start": "610949",
    "end": "617610"
  },
  {
    "text": "this function this is a function that takes one parameter looks like a function that takes zero it's a function that takes one so this comes up Shawn",
    "start": "617610",
    "end": "626880"
  },
  {
    "text": "parents wrote an article on this stop using out arguments construction verse assignment kind of article that Sean",
    "start": "626880",
    "end": "633510"
  },
  {
    "text": "wrote a little while ago if you don't know who Sean Perrin is you should watch his videos read his articles good stuff",
    "start": "633510",
    "end": "641839"
  },
  {
    "text": "Sean is also a fan of saying there should be no raw loops in our code he",
    "start": "642170",
    "end": "647790"
  },
  {
    "text": "did not respond on Twitter unfortunately though I like to pace when I'm speaking",
    "start": "647790",
    "end": "653250"
  },
  {
    "start": "650000",
    "end": "650000"
  },
  {
    "text": "the camera at this point is not pointing at me at all that's okay",
    "start": "653250",
    "end": "661040"
  },
  {
    "text": "raw loops don't express intent what does this code do",
    "start": "661040",
    "end": "666199"
  },
  {
    "text": "I'm meeting using arranged for a loop I could have made this harder to read if I'd wanted to sex if if all the values",
    "start": "668980",
    "end": "690310"
  },
  {
    "text": "are within the range of 5 to 100 right exclusive 5 200 I guess right and if it",
    "start": "690310",
    "end": "697090"
  },
  {
    "text": "is then we do some further processing on the data let's flip this around and not",
    "start": "697090",
    "end": "703690"
  },
  {
    "text": "use arranged for loop let's use an algorithm the more I look at code like",
    "start": "703690",
    "end": "710530"
  },
  {
    "text": "this the more I like it line 12 I can read this like a sentence",
    "start": "710530",
    "end": "718380"
  },
  {
    "text": "if all of the values from the beginning to the end are in range then process",
    "start": "718380",
    "end": "724960"
  },
  {
    "text": "more I don't even need actually the all in range value at all if I don't want at this point do you prefer this version or",
    "start": "724960",
    "end": "734590"
  },
  {
    "text": "this version who prefers option a who",
    "start": "734590",
    "end": "742330"
  },
  {
    "text": "prefers option B ok it's interesting I",
    "start": "742330",
    "end": "747850"
  },
  {
    "text": "still usually have a few holdouts from people that are like no I don't like functional algorithm things okay anyone",
    "start": "747850",
    "end": "757180"
  },
  {
    "text": "have any questions or any problem with the lambda that I defined on line 7 it's a lambda function I'm saying this is an",
    "start": "757180",
    "end": "764470"
  },
  {
    "text": "operation in range you could I could have made it a free function doesn't really matter for this case questions",
    "start": "764470",
    "end": "774660"
  },
  {
    "text": "all right Bjorn father's Bjorn in the",
    "start": "776710",
    "end": "782170"
  },
  {
    "text": "room Barnes not in the room okay twenty veneered Peter Peter also left the room",
    "start": "782170",
    "end": "789180"
  },
  {
    "text": "they all said things like multi-step functions I'm gonna leave this one up",
    "start": "789180",
    "end": "795190"
  },
  {
    "start": "792000",
    "end": "792000"
  },
  {
    "text": "for a moment for you to ponder this code when I get a drink of water and you tell",
    "start": "795190",
    "end": "801130"
  },
  {
    "text": "me some things that you don't like about it",
    "start": "801130",
    "end": "805440"
  },
  {
    "text": "this is actually derived from some physics code that I was looking at recently there's at least two bugs that",
    "start": "813720",
    "end": "826480"
  },
  {
    "text": "you should see and it probably compiles without warning",
    "start": "826480",
    "end": "832290"
  },
  {
    "text": "yeah so on step two you're saying I should have used toes here and I'm comparing with pipes yes or I'm",
    "start": "838879",
    "end": "846290"
  },
  {
    "text": "multiplying by pipes all right what else",
    "start": "846290",
    "end": "851480"
  },
  {
    "text": "very similar code we don't like that we're using intz yes which is doing what",
    "start": "853009",
    "end": "858839"
  },
  {
    "text": "probably in my code which which intz are you referring to the control variables",
    "start": "858839",
    "end": "867420"
  },
  {
    "text": "so these ents are limited to 2 billion hoses and pipes each approximately",
    "start": "867420",
    "end": "875929"
  },
  {
    "text": "because on every modern platform and into signed 32-bit integer does anyone",
    "start": "875929",
    "end": "883980"
  },
  {
    "text": "work with datasets that are more than 2 billion items at once no one oh and it",
    "start": "883980",
    "end": "891299"
  },
  {
    "text": "does I didn't see your hand back there kind of data set sizes do you work with are you loud to say you cannot say ok",
    "start": "891299",
    "end": "899809"
  },
  {
    "text": "sometimes I do training at companies that do things like database development this comes up right you're like 2",
    "start": "899809",
    "end": "906419"
  },
  {
    "text": "billion items in a data proof that's nothing right and then half of you are like I do embedded programming 5",
    "start": "906419",
    "end": "912869"
  },
  {
    "text": "elements is a lot right that's the power of C++ right it's everywhere ok",
    "start": "912869",
    "end": "922668"
  },
  {
    "text": "which one the values intent yeah okay so I've got value as an int and I'm",
    "start": "924670",
    "end": "930130"
  },
  {
    "text": "returning a double which makes us question the nature of this code altogether right okay lots of things to",
    "start": "930130",
    "end": "937900"
  },
  {
    "text": "think about and reason about now Tony and Bjorn and Peter all said things like",
    "start": "937900",
    "end": "944500"
  },
  {
    "text": "if they're reading a function and they see the words step1 step2 then it makes them want to",
    "start": "944500",
    "end": "951070"
  },
  {
    "text": "cry basically so they all went through and grep all of their code bases and it caused a little short thing in this",
    "start": "951070",
    "end": "957130"
  },
  {
    "text": "Twitter thread organs I call I'm so glad I didn't find step anywhere in my code base yeah that's the bug there so we can",
    "start": "957130",
    "end": "969400"
  },
  {
    "text": "flip this around I don't care if you want to make this functions or lambdas or whatever but now I can read this code",
    "start": "969400",
    "end": "977170"
  },
  {
    "text": "again as returned the total area of the pipes with the total area of the hoses plus whatever else thing needs to happen",
    "start": "977170",
    "end": "983590"
  },
  {
    "text": "in here this doesn't have to have multiple steps in it one operation each",
    "start": "983590",
    "end": "991200"
  },
  {
    "text": "comment it's still two steps you're",
    "start": "991200",
    "end": "998560"
  },
  {
    "text": "saying here in here I don't technically",
    "start": "998560",
    "end": "1007680"
  },
  {
    "text": "disagree with you but how would we flip it around to like like can we literally make this less than what's that yeah I",
    "start": "1007680",
    "end": "1019740"
  },
  {
    "text": "do believe you'd like a map or like right okay this well you know what now",
    "start": "1019740",
    "end": "1026819"
  },
  {
    "text": "you're making me seriously question the nature of this example because you pointed that out are we better off here",
    "start": "1026820",
    "end": "1034620"
  },
  {
    "text": "than we were here",
    "start": "1034620",
    "end": "1037880"
  },
  {
    "text": "and it's kind of still two steps yeah this is part yeah part of the problem of",
    "start": "1050740",
    "end": "1056630"
  },
  {
    "text": "trying to get it all to fit on one slide to like I even struggled with okay how big do I make each of these loops so",
    "start": "1056630",
    "end": "1063200"
  },
  {
    "text": "that it fits on a slide but I still have a multi step function so that we can argue about it all right",
    "start": "1063200",
    "end": "1070240"
  },
  {
    "text": "well we'll leave it out is because well I'm not gonna live it at the slide at the moment I asked though at this point",
    "start": "1070240",
    "end": "1079490"
  },
  {
    "text": "our comments necessary in this code",
    "start": "1079490",
    "end": "1083679"
  },
  {
    "text": "you're free to say yes just for the record",
    "start": "1084940",
    "end": "1090070"
  },
  {
    "text": "yeah it is a specific area",
    "start": "1093900",
    "end": "1100860"
  },
  {
    "text": "implementation that is true yeah in this accumulate area by the way is looking",
    "start": "1100860",
    "end": "1106930"
  },
  {
    "text": "for something that would be appropriate for passing the to the accumulate algorithm because it needs to take the",
    "start": "1106930",
    "end": "1113380"
  },
  {
    "text": "current area to this point and then calculate the area of the next thing and the operation so it might want to",
    "start": "1113380",
    "end": "1120520"
  },
  {
    "text": "comment that something like calculating the area of a radius or something like",
    "start": "1120520",
    "end": "1129100"
  },
  {
    "text": "that okay this is something I ran into",
    "start": "1129100",
    "end": "1139960"
  },
  {
    "text": "this isn't from my my Twitter's non canonical canonical operators this is an",
    "start": "1139960",
    "end": "1146620"
  },
  {
    "start": "1143000",
    "end": "1143000"
  },
  {
    "text": "operator overload for the comparison operator of course for anyone who wants to win this out and C++ 20 we will",
    "start": "1146620",
    "end": "1152950"
  },
  {
    "text": "actually get the spaceship operator",
    "start": "1152950",
    "end": "1158250"
  },
  {
    "text": "things that can do these for us but I saw code that looked just like this",
    "start": "1158250",
    "end": "1165280"
  },
  {
    "text": "which is why it ended up on a slide like literally just like this a couple months ago and real live code so what are the",
    "start": "1165280",
    "end": "1172600"
  },
  {
    "text": "problems with it data should be const",
    "start": "1172600",
    "end": "1179830"
  },
  {
    "text": "and and the operator itself should be const yes at least two constants missing",
    "start": "1179830",
    "end": "1189690"
  },
  {
    "text": "well like exactly two constant icing",
    "start": "1189690",
    "end": "1195480"
  },
  {
    "text": "code with conversions implicit explicit cast like many many people commented on",
    "start": "1196470",
    "end": "1203590"
  },
  {
    "text": "this implicit conversions really get on my nerves with this one which int is",
    "start": "1203590",
    "end": "1212410"
  },
  {
    "text": "which say comment from arnhem merits and a follow-up from that he says this is",
    "start": "1212410",
    "end": "1220900"
  },
  {
    "text": "also known as the which int is which interface with a credit to Edwin Brady",
    "start": "1220900",
    "end": "1226060"
  },
  {
    "text": "who I don't to know you're familiar with interfaces like this how often do you get the",
    "start": "1226060",
    "end": "1234850"
  },
  {
    "text": "parameter order incorrect do you have",
    "start": "1234850",
    "end": "1240160"
  },
  {
    "text": "any way of checking to see if the parameter order is correct except for tests so this was already pointed out",
    "start": "1240160",
    "end": "1252310"
  },
  {
    "text": "that we were doing implicit conversion here although I must say I had the slide up for a while before any of you said",
    "start": "1252310",
    "end": "1258940"
  },
  {
    "text": "hey wait a minute the value is an int",
    "start": "1258940",
    "end": "1264120"
  },
  {
    "text": "depending on your compiler settings you may not get a warning from this you probably will get a loss of precision",
    "start": "1264720",
    "end": "1270370"
  },
  {
    "text": "warning but we don't know actually if the we presume probably that the hose",
    "start": "1270370",
    "end": "1277510"
  },
  {
    "text": "and pipe radii are floating-point values not integral values because otherwise",
    "start": "1277510",
    "end": "1282910"
  },
  {
    "text": "multiplying by PI would be kind of a waste ending questions all right so we",
    "start": "1282910",
    "end": "1296080"
  },
  {
    "text": "had conversions in at least one place probably three loss of data in that code",
    "start": "1296080",
    "end": "1303000"
  },
  {
    "start": "1301000",
    "end": "1301000"
  },
  {
    "text": "this is one of my favorite examples I I have written this code I have seen this",
    "start": "1303000",
    "end": "1310060"
  },
  {
    "text": "code have you written this code what are",
    "start": "1310060",
    "end": "1315820"
  },
  {
    "text": "we doing when we step through it here we're getting a string on line nine and then we're getting the C string of that",
    "start": "1315820",
    "end": "1322180"
  },
  {
    "text": "string on line ten and passing that to a function expecting a string how many strings did I just make this is easy to",
    "start": "1322180",
    "end": "1332140"
  },
  {
    "text": "do it's easy to get wrong it's easy to the point that there's actually a",
    "start": "1332140",
    "end": "1337630"
  },
  {
    "text": "special check and Kling tidy just for this specific mistake in your",
    "start": "1337630",
    "end": "1343000"
  },
  {
    "text": "code which Victor is well familiar with you know you fixed a bunch of them yes",
    "start": "1343000",
    "end": "1350410"
  },
  {
    "text": "what happened by the way is you you have this you string function that expects a",
    "start": "1350410",
    "end": "1357700"
  },
  {
    "text": "Const character pointer and then at some point you know cuz he wrote the code in like 2005 you go through and you're like well",
    "start": "1357700",
    "end": "1365920"
  },
  {
    "text": "you know what this should actually take like a string because this is pre C++ 17 and then this line of code never got",
    "start": "1365920",
    "end": "1374440"
  },
  {
    "text": "refactored that's what happens by this implicit conversion from a Const character pointer to a string at all",
    "start": "1374440",
    "end": "1381370"
  },
  {
    "text": "can't I continues to compile a silently with no no problem I am willing to bet",
    "start": "1381370",
    "end": "1388630"
  },
  {
    "text": "that this always exists in code that has been around for a long time it is",
    "start": "1388630",
    "end": "1393640"
  },
  {
    "text": "somewhere in your code base all right what is move at least one of my students",
    "start": "1393640",
    "end": "1401140"
  },
  {
    "text": "is in this class yeah what does move it's a cast here take one of these test",
    "start": "1401140",
    "end": "1410049"
  },
  {
    "text": "that back I could have thrown it at you but I'm afraid I would have actually hit someone in the eye and that would have",
    "start": "1410049",
    "end": "1416049"
  },
  {
    "text": "been really bad move is a cast that is",
    "start": "1416049",
    "end": "1421150"
  },
  {
    "text": "all that it is it is an unconditional cast to an r-value reference of the given type so this is an unconditional",
    "start": "1421150",
    "end": "1429400"
  },
  {
    "text": "cast to an r-value reference of a string",
    "start": "1429400",
    "end": "1434309"
  },
  {
    "text": "thoughts yeah go for reader inhibits rvo",
    "start": "1435270",
    "end": "1446169"
  },
  {
    "text": "this forces a move instead of allowing the compiler to optimize it this is the",
    "start": "1446169",
    "end": "1453070"
  },
  {
    "text": "pesum izing return by move prevents move allusion this is a type of conversion",
    "start": "1453070",
    "end": "1459669"
  },
  {
    "text": "that is a code smell in our code standard move itself is a code smell all",
    "start": "1459669",
    "end": "1467650"
  },
  {
    "text": "right what is returned from main",
    "start": "1467650",
    "end": "1471990"
  },
  {
    "text": "what's that whatever this is this is undefined behavior you're not allowed to",
    "start": "1477940",
    "end": "1484820"
  },
  {
    "text": "modify an object that's been Const defined constant during its lifetime",
    "start": "1484820",
    "end": "1489880"
  },
  {
    "text": "it's always a fun one to actually step into because every compiler does the exact same thing and an optimized build",
    "start": "1489880",
    "end": "1496430"
  },
  {
    "text": "completely ignores the constand an unwise dilled and this is what makes it",
    "start": "1496430",
    "end": "1502220"
  },
  {
    "text": "really fun if you've never actually looked at this is it sets up the object on the stack it assigns the value four",
    "start": "1502220",
    "end": "1509150"
  },
  {
    "text": "on line four and then two lines later let's see on line six it assigns the",
    "start": "1509150",
    "end": "1514340"
  },
  {
    "text": "value thirteen it has dutifully done exactly what we asked it to do then on line seven it returns four from main it",
    "start": "1514340",
    "end": "1520550"
  },
  {
    "text": "still completely ignores us modifying",
    "start": "1520550",
    "end": "1531380"
  },
  {
    "start": "1529000",
    "end": "1529000"
  },
  {
    "text": "constic during its lifetime is undefined behavior Const cast is definitely a code smell yes",
    "start": "1531380",
    "end": "1539240"
  },
  {
    "text": "does anyone have Const cast in their code today yeah wipe your hand up for",
    "start": "1539240",
    "end": "1544850"
  },
  {
    "text": "everything is there anyone over here who's using Const cast knowing you are correctly probably not i've i've only",
    "start": "1544850",
    "end": "1558860"
  },
  {
    "text": "seen like to correct uses of it are using it to talk to an old capi yeah",
    "start": "1558860",
    "end": "1565730"
  },
  {
    "text": "then you're hopefully doing it correctly although I'm still leaning towards just",
    "start": "1565730",
    "end": "1571190"
  },
  {
    "text": "not making the object constant all when passing it to a CA API so there's no question because we have no way of",
    "start": "1571190",
    "end": "1577790"
  },
  {
    "text": "guaranteeing that that thing isn't trying to mutate the data somewhere and whatever library that you got from Hume",
    "start": "1577790",
    "end": "1583280"
  },
  {
    "text": "ever that's my conclusion at this point all right",
    "start": "1583280",
    "end": "1588620"
  },
  {
    "text": "Bjorn said and Dimitar meet Jeff do you",
    "start": "1588620",
    "end": "1593750"
  },
  {
    "text": "midterm ensure it's that close does anyone know okay he says they say code",
    "start": "1593750",
    "end": "1601100"
  },
  {
    "text": "with warnings I'm pulling this one back up again can our compilers warn on this",
    "start": "1601100",
    "end": "1607390"
  },
  {
    "text": "yes they can we can turn on our floating-point conversions our loss",
    "start": "1607390",
    "end": "1613010"
  },
  {
    "text": "of precision warnings we can get warnings on this so yay that's good",
    "start": "1613010",
    "end": "1619780"
  },
  {
    "text": "can our compilers warn on this yes they can now we have a pessimism move and",
    "start": "1619780",
    "end": "1628720"
  },
  {
    "text": "clang customising move finally from our compiler that's good this one is one",
    "start": "1628720",
    "end": "1635360"
  },
  {
    "text": "that I ran into several times recently and I just want to there's some question about const global data in the last",
    "start": "1635360",
    "end": "1641570"
  },
  {
    "text": "session what are the implications of using the static variable does anyone",
    "start": "1641570",
    "end": "1649280"
  },
  {
    "text": "know internal linkage yeah that's all I'm going for what happens when line 8",
    "start": "1649280",
    "end": "1661220"
  },
  {
    "text": "of this function is executed right here",
    "start": "1661220",
    "end": "1667360"
  },
  {
    "text": "string is constructed the first time what happens the second time it skips",
    "start": "1667360",
    "end": "1675080"
  },
  {
    "text": "how does it skip it it has a hidden boolean variable we love being able to",
    "start": "1675080",
    "end": "1682970"
  },
  {
    "text": "click on examples and read what they're doing let's just do this if you're not familiar with compiler Explorer by the",
    "start": "1682970",
    "end": "1689299"
  },
  {
    "text": "way we can do this right click and choose reveal linked code if we're so inclined every single time this function",
    "start": "1689299",
    "end": "1696440"
  },
  {
    "text": "is entered it has to check a guard variable to see if the string has been initialized yet if it hasn't been",
    "start": "1696440",
    "end": "1702500"
  },
  {
    "text": "initialized it has to acquire a lock guard and then has to initialize the variable and free the lock it has to do",
    "start": "1702500",
    "end": "1709490"
  },
  {
    "text": "that check every single time we call this function it's not an insignificant",
    "start": "1709490",
    "end": "1716059"
  },
  {
    "text": "amount of code that it has to generate all compilers do this they're required",
    "start": "1716059",
    "end": "1721340"
  },
  {
    "text": "to do this this is thread safe initialization of statics it is a requirement of C++ 11 it's been",
    "start": "1721340",
    "end": "1727909"
  },
  {
    "text": "implemented in GCC and clang since forever and Visual Studio in 2015 not",
    "start": "1727909",
    "end": "1735500"
  },
  {
    "text": "free",
    "start": "1735500",
    "end": "1737830"
  },
  {
    "start": "1736000",
    "end": "1736000"
  },
  {
    "text": "compared to this now I've cheated a little bit because I also made these",
    "start": "1743600",
    "end": "1749070"
  },
  {
    "text": "string views but that's because I can because you know what the name of this",
    "start": "1749070",
    "end": "1754230"
  },
  {
    "text": "function do things this is not changing at runtime if it is you have other",
    "start": "1754230",
    "end": "1761130"
  },
  {
    "text": "problems in your code right so I made this a string view and the advantage one",
    "start": "1761130",
    "end": "1766350"
  },
  {
    "text": "advantage making a string view is I can make Const exper now and see this was 20 I could have made the string constants",
    "start": "1766350",
    "end": "1772140"
  },
  {
    "text": "for who gets to program and see what was 20 today yeah all right",
    "start": "1772140",
    "end": "1778260"
  },
  {
    "text": "who gets the program and Cee Lo's was 17 today yeah string view you have string view you have context first support here",
    "start": "1778260",
    "end": "1785309"
  },
  {
    "text": "what does this code look like do I do I now have to do a mutex check an atomic",
    "start": "1785309",
    "end": "1794160"
  },
  {
    "text": "check to see if this variables been initialized nope that's all gone I get",
    "start": "1794160",
    "end": "1800160"
  },
  {
    "text": "to at compile time initialize the string view object and pass it around",
    "start": "1800160",
    "end": "1806780"
  },
  {
    "text": "so static Const is a code smell that should probably be context per and I say",
    "start": "1807650",
    "end": "1816240"
  },
  {
    "text": "that strongly actually I say probably I should perhaps say likely it is it is",
    "start": "1816240",
    "end": "1823620"
  },
  {
    "text": "the only times that we have static constat we can't make context whereas things that we're doing dynamic",
    "start": "1823620",
    "end": "1829230"
  },
  {
    "text": "allocations on which at the moment we can't do Const exper and maybe we don't",
    "start": "1829230",
    "end": "1835860"
  },
  {
    "text": "need those dynamic allocations in the first place because it's probably something that we know at compile time",
    "start": "1835860",
    "end": "1842480"
  },
  {
    "text": "and y-yes in 20 but oh you thought you",
    "start": "1845310",
    "end": "1852690"
  },
  {
    "text": "oh oh it's not allowed to leave the context for context you're only allowed to use it in the context or function at",
    "start": "1852690",
    "end": "1858120"
  },
  {
    "text": "compile time right yes so use string view this is the right answer even and see this was 20 Thank You Hannah",
    "start": "1858120",
    "end": "1864980"
  },
  {
    "text": "okay yes I do need to have it kind of in",
    "start": "1864980",
    "end": "1877640"
  },
  {
    "text": "this case sorry all right let's let's do",
    "start": "1877640",
    "end": "1884430"
  },
  {
    "text": "this actually let's see what we have because at the moment I'm not entirely",
    "start": "1884430",
    "end": "1889620"
  },
  {
    "text": "sure I mean well I'll tell you what I'm not sure about in a moment but let's",
    "start": "1889620",
    "end": "1894840"
  },
  {
    "text": "just leave this code and then I'm just going to remove static and see if it changes the generated code at all that",
    "start": "1894840",
    "end": "1900870"
  },
  {
    "text": "it did by one instruction that's not helpful okay contacts were static logically is",
    "start": "1900870",
    "end": "1908100"
  },
  {
    "text": "correct right we're saying do this at compile time and it's a global value from all the functions all the instances",
    "start": "1908100",
    "end": "1914820"
  },
  {
    "text": "of the or whatever all the calls to this function older versions of GCC had a",
    "start": "1914820",
    "end": "1920190"
  },
  {
    "text": "regression where if I did not put context for static it may actually generate this object each time at",
    "start": "1920190",
    "end": "1927000"
  },
  {
    "text": "runtime even though it was constant Spur it's allowed to do that actually because",
    "start": "1927000",
    "end": "1932250"
  },
  {
    "text": "the rest of this function is in a context per function none of this is being required to be done at compile",
    "start": "1932250",
    "end": "1937920"
  },
  {
    "text": "time so is allowed to context for static works well it is definitely going to do",
    "start": "1937920",
    "end": "1943290"
  },
  {
    "text": "it at compile time on all well definitely going to do it at compile time and all compilers okay that's sorry",
    "start": "1943290",
    "end": "1954720"
  },
  {
    "text": "for the air quotes oh and I was over here so I don't know if the camera got them just do Mike Alice times okay but I",
    "start": "1954720",
    "end": "1963660"
  },
  {
    "text": "think it's also logically there I think who asked that question okay I think",
    "start": "1963660",
    "end": "1969150"
  },
  {
    "text": "it's it's it's logically the correct thing anyhow right because we say this is a global thing right it's it's static",
    "start": "1969150",
    "end": "1976740"
  },
  {
    "text": "for the lifetime of the pro we want it done at compile time static",
    "start": "1976740",
    "end": "1984350"
  },
  {
    "text": "consoles a code smell should be constant exper extern Const I saw this for the",
    "start": "1984350",
    "end": "1990740"
  },
  {
    "text": "first time ever just a few weeks ago when I was preparing for this code that",
    "start": "1990740",
    "end": "1997370"
  },
  {
    "text": "looked like this X turn int Const and then in a CBP file int Const value",
    "start": "1997370",
    "end": "2004870"
  },
  {
    "text": "equals 5 and then somewhere else actually using this X turn int Const",
    "start": "2004870",
    "end": "2012420"
  },
  {
    "text": "what is this doing I'm gonna simplify it it's approximately like this by the time we've done the includes what does this",
    "start": "2012420",
    "end": "2019120"
  },
  {
    "text": "get value have to do so no no it's kind",
    "start": "2019120",
    "end": "2027550"
  },
  {
    "text": "of like we're telling the compiler I have some really important information to you for you that's known at compile",
    "start": "2027550",
    "end": "2033850"
  },
  {
    "text": "time but I'm not gonna tell you it's really what it is if I do this every",
    "start": "2033850",
    "end": "2041110"
  },
  {
    "text": "single time this function is executed it has to go somewhere to some memory location and say what's the value of",
    "start": "2041110",
    "end": "2047800"
  },
  {
    "text": "that constant data that you should already know that's just out of",
    "start": "2047800",
    "end": "2057790"
  },
  {
    "start": "2056000",
    "end": "2056000"
  },
  {
    "text": "curiosity raise your hand if you have seen or written X turn Const what is the",
    "start": "2057790",
    "end": "2065139"
  },
  {
    "text": "logical reason for it how did it end up in your code your hand is the highest",
    "start": "2065140",
    "end": "2070530"
  },
  {
    "text": "Oh is there okay so you yearn it you know you're claiming no responsibility",
    "start": "2072350",
    "end": "2078800"
  },
  {
    "text": "for it yes misra or something no really",
    "start": "2078800",
    "end": "2104890"
  },
  {
    "text": "okay okay so for the sake of the rest of you all he said it was already in the",
    "start": "2104890",
    "end": "2110060"
  },
  {
    "text": "code when he got there and then he needed to add his own constants and he",
    "start": "2110060",
    "end": "2115130"
  },
  {
    "text": "didn't want to break the existing style so he maintained the existing style of adding more extern costs that fair and",
    "start": "2115130",
    "end": "2122060"
  },
  {
    "text": "the code is under restrictions could not be modified too much can anyone tell me like a good reason to do this because I",
    "start": "2122060",
    "end": "2127850"
  },
  {
    "text": "honestly truly don't know if one and I just want to know if I'm missing something okay you have a good reason",
    "start": "2127850",
    "end": "2137349"
  },
  {
    "text": "okay so you're saying you're you know perhaps someone like but was this was originally wrapped in a class or",
    "start": "2146170",
    "end": "2151820"
  },
  {
    "text": "something and they couldn't initialize it in place and they or they're they're used to that line of thinking which",
    "start": "2151820",
    "end": "2157010"
  },
  {
    "text": "fortunately we can do in C++ seventeen inline initialization of static Kant's",
    "start": "2157010",
    "end": "2162410"
  },
  {
    "text": "data and in and can make inline variables yes",
    "start": "2162410",
    "end": "2168010"
  },
  {
    "text": "using the linker to get different applications is that a good application",
    "start": "2168700",
    "end": "2179200"
  },
  {
    "text": "maybe not okay all right so what's our alternative though I mean besides just",
    "start": "2179560",
    "end": "2190040"
  },
  {
    "text": "initializing it in place right Const exper this is C++ 11 right this is what",
    "start": "2190040",
    "end": "2197480"
  },
  {
    "text": "we want to do for the most part we want to say Const X for int this is the value this is or put an enumeration perhaps",
    "start": "2197480",
    "end": "2204980"
  },
  {
    "text": "depending on the application we're all new and delete right that's bad right",
    "start": "2204980",
    "end": "2216340"
  },
  {
    "start": "2211000",
    "end": "2211000"
  },
  {
    "text": "you almost all raised your hands saying C++ 17 or better or whatever so make",
    "start": "2216340",
    "end": "2222650"
  },
  {
    "text": "unique this is of course wasteful and the heap should be avoided if possible this is just an example we don't want to",
    "start": "2222650",
    "end": "2230810"
  },
  {
    "text": "use raw pointers if we can right so the code smells that we have covered so far",
    "start": "2230810",
    "end": "2236240"
  },
  {
    "start": "2233000",
    "end": "2233000"
  },
  {
    "text": "our construction separate from assignment output variables raw loops",
    "start": "2236240",
    "end": "2242440"
  },
  {
    "text": "multi-step functions non-canonical operators code with conversions casting away Kant's code",
    "start": "2242440",
    "end": "2249410"
  },
  {
    "text": "with warning static context turn Const and ronu and delete have I done anything yet to reduce the set of things that",
    "start": "2249410",
    "end": "2257630"
  },
  {
    "text": "we're looking for in our code because I really just kind of touched on a bunch of stuff are we better off yet I don't",
    "start": "2257630",
    "end": "2265580"
  },
  {
    "text": "think so those are the yeah there's Lysa lots of pictures taking it'll get better just so",
    "start": "2265580",
    "end": "2272900"
  },
  {
    "text": "you know all right this comes from ACEF in the room no okay",
    "start": "2272900",
    "end": "2280520"
  },
  {
    "text": "this comes from a magazine that I bought when I was at C++ on C and it has been a",
    "start": "2280520",
    "end": "2288290"
  },
  {
    "text": "magazine that has met me with very many opportunities for code examples as a",
    "start": "2288290",
    "end": "2295910"
  },
  {
    "text": "magazine on learning how to program and C++ this is one of the examples it makes",
    "start": "2295910",
    "end": "2301010"
  },
  {
    "text": "me so happy okay all right let's do it what now let's say for the sake of this",
    "start": "2301010",
    "end": "2308270"
  },
  {
    "text": "example we do want to keep three separate variables here because this is a teaching example about like",
    "start": "2308270",
    "end": "2313910"
  },
  {
    "text": "concatenating strings and stuff go ahead talk to me what should I change first",
    "start": "2313910",
    "end": "2319660"
  },
  {
    "text": "line two all right you want to get rid of using namespace that's fine all right let me",
    "start": "2319660",
    "end": "2327470"
  },
  {
    "text": "get it compiling first okay know what oh wait someone said line one wait what",
    "start": "2327470",
    "end": "2334450"
  },
  {
    "text": "line one I don't even need line one I'm not printing this thing out okay what was the next one and did your length as",
    "start": "2334450",
    "end": "2341300"
  },
  {
    "text": "opposed to what do you want me to do with it you want me to do sighs T okay I'll start with that all right now what",
    "start": "2341300",
    "end": "2349420"
  },
  {
    "text": "okay move the Declaration down here yay",
    "start": "2349750",
    "end": "2357170"
  },
  {
    "text": "life programming oh you want it Auto now",
    "start": "2357170",
    "end": "2362540"
  },
  {
    "text": "okay all right Oh Stu we see we have a problem still write the codes not",
    "start": "2362540",
    "end": "2367699"
  },
  {
    "text": "compiling hold on all right what's that Oh which one do you want Const we'll",
    "start": "2367699",
    "end": "2381799"
  },
  {
    "text": "worry about that in a minute okay fine",
    "start": "2381799",
    "end": "2387640"
  },
  {
    "text": "one more one more on length is that what you're saying okay now what else",
    "start": "2387640",
    "end": "2394849"
  },
  {
    "text": "anything else would like to change yeah well I'm not actually doing anything",
    "start": "2394849",
    "end": "2400339"
  },
  {
    "text": "although technically C++ doesn't require a return statement for mein that's default zero this is not undefined",
    "start": "2400339",
    "end": "2407179"
  },
  {
    "text": "behavior for mein because it's special but we may as well do something with the value that we calculated I am honestly",
    "start": "2407179",
    "end": "2416769"
  },
  {
    "text": "super impressed with the latest set of optimizations that GCC has managed to do around string objects that's crazy good",
    "start": "2416769",
    "end": "2424989"
  },
  {
    "text": "that's crazy good we defined two strings we concatenated them and calculated the",
    "start": "2424989",
    "end": "2430369"
  },
  {
    "text": "value and it threw it all away if you're not impressed you really should be",
    "start": "2430369",
    "end": "2436869"
  },
  {
    "text": "that's I think new and GCC nine that that's doing these things all right",
    "start": "2436869",
    "end": "2442489"
  },
  {
    "text": "would you change anything else I mean assuming I don't know if you move I",
    "start": "2442489",
    "end": "2448130"
  },
  {
    "text": "think you walked in a second too late Peter I was saying this is a teaching example we're leaving the fact that we've got three strings on here for the",
    "start": "2448130",
    "end": "2453979"
  },
  {
    "text": "sake of a teaching example well I would change one more thing just because I",
    "start": "2453979",
    "end": "2461109"
  },
  {
    "text": "would do that because I don't really care what the",
    "start": "2461109",
    "end": "2466160"
  },
  {
    "text": "result type of this thing is okay look good",
    "start": "2466160",
    "end": "2470498"
  },
  {
    "text": "if I did the the S at the end then I have to do using namespace literals",
    "start": "2475940",
    "end": "2481700"
  },
  {
    "text": "whatever I just I find it so tiring I just prefer running stream most of the",
    "start": "2481700",
    "end": "2487789"
  },
  {
    "text": "time honestly but yes we could rearrange it so that we're using the string literals suffix okay I am now officially",
    "start": "2487789",
    "end": "2497089"
  },
  {
    "text": "moving slower than I meant to be so we will go faster all right that was fun",
    "start": "2497089",
    "end": "2503269"
  },
  {
    "start": "2499000",
    "end": "2499000"
  },
  {
    "text": "now we ended up with mm maybe something like that I didn't get rid of the using namespace STD up there this one",
    "start": "2503269",
    "end": "2513789"
  },
  {
    "text": "factorial instead of live editing this maybe take a few looks at this and tell",
    "start": "2513880",
    "end": "2521089"
  },
  {
    "text": "me like this reads input from the user and then calculates the factorial just",
    "start": "2521089",
    "end": "2534019"
  },
  {
    "text": "yell out a couple things I should be",
    "start": "2534019",
    "end": "2540740"
  },
  {
    "text": "down and should be initialized factorial arguably should be down to there's an",
    "start": "2540740",
    "end": "2549049"
  },
  {
    "text": "end line at the end of line 14 which I just personally despise but then it's a different topic entirely ok so",
    "start": "2549049",
    "end": "2556940"
  },
  {
    "text": "rearranging these values so that we can initialize them what's our ultimate way",
    "start": "2556940",
    "end": "2561950"
  },
  {
    "text": "that we could actually initialize all these variables and not have to define",
    "start": "2561950",
    "end": "2568670"
  },
  {
    "text": "something then assign a value to it",
    "start": "2568670",
    "end": "2572170"
  },
  {
    "text": "now I'm talking about like well okay how about if we create functions that's what",
    "start": "2578420",
    "end": "2584880"
  },
  {
    "text": "I'm going for so this is a complete compilable version of this I've got my read input function it's a template",
    "start": "2584880",
    "end": "2590069"
  },
  {
    "text": "whatever because I'm just reading something from CN but then I get down here to main and I can say read the",
    "start": "2590069",
    "end": "2595469"
  },
  {
    "text": "input calculate the factorial of it and print the values and by the way in this",
    "start": "2595469",
    "end": "2601380"
  },
  {
    "text": "case I am returning exit success from main to keep things nice and kosher here too",
    "start": "2601380",
    "end": "2607578"
  },
  {
    "text": "all right the conclusions that I ran into working on this is that one thing",
    "start": "2608150",
    "end": "2614729"
  },
  {
    "text": "kept coming up over and over again that had not explicitly been mentioned anyone",
    "start": "2614729",
    "end": "2621479"
  },
  {
    "text": "catched what it was I mean it came up in the code reviews it came up in the",
    "start": "2621479",
    "end": "2626789"
  },
  {
    "text": "examples repeatedly whoever gets the",
    "start": "2626789",
    "end": "2634259"
  },
  {
    "text": "answer gets a car anyone anyone",
    "start": "2634259",
    "end": "2643609"
  },
  {
    "text": "here we run threat construction separate",
    "start": "2646180",
    "end": "2653349"
  },
  {
    "text": "from assignment what do we see Const output variables what do we see Const",
    "start": "2653349",
    "end": "2662430"
  },
  {
    "text": "raw loops what do we see Const I'm",
    "start": "2662430",
    "end": "2669970"
  },
  {
    "text": "getting I'm trying to get everyone talking together Const okay what kept",
    "start": "2669970",
    "end": "2676029"
  },
  {
    "text": "coming up Const kept coming up it's not like this is the first time constants",
    "start": "2676029",
    "end": "2682029"
  },
  {
    "text": "ever mentioned at a conference just for the record I'm not gonna claim any like well I claim some responsibility for",
    "start": "2682029",
    "end": "2687760"
  },
  {
    "text": "this this is Kate Gregory marking everything costs that you possibly can",
    "start": "2687760",
    "end": "2694260"
  },
  {
    "text": "not like oh I have to and then getting away with whatever you don't have to but",
    "start": "2694260",
    "end": "2700450"
  },
  {
    "text": "turning it around and saying market cost unless I absolutely can't because then",
    "start": "2700450",
    "end": "2706569"
  },
  {
    "text": "remember the compiler is your friend and so anywhere that you have any kind of errors of thought they'll be caught for",
    "start": "2706569",
    "end": "2712210"
  },
  {
    "text": "you know this is me anyone have any ideas for how we might be able to get this to use less overhead did I hear",
    "start": "2712210",
    "end": "2722319"
  },
  {
    "text": "context per I'm gonna pause right there just for the record context was a little",
    "start": "2722319",
    "end": "2729010"
  },
  {
    "text": "bit of a joke at this point in 2016 today I'm like some cons decks for all",
    "start": "2729010",
    "end": "2734799"
  },
  {
    "text": "the things can anyone think of a simpler",
    "start": "2734799",
    "end": "2740109"
  },
  {
    "text": "way to get this to have less overhead what's that pre compute a table yeah",
    "start": "2740109",
    "end": "2747789"
  },
  {
    "text": "that could work but constructs word kind of get us there I think anyhow so is",
    "start": "2747789",
    "end": "2755799"
  },
  {
    "text": "there some best practice about using Const anywhere possible does anyone ever",
    "start": "2755799",
    "end": "2761529"
  },
  {
    "text": "heard that so what happens if we make our static or array here of color data",
    "start": "2761529",
    "end": "2768270"
  },
  {
    "text": "Const",
    "start": "2768270",
    "end": "2771270"
  },
  {
    "text": "okay so what actually happened there by the way like I mean I have like three years to reflect on this we made this",
    "start": "2776900",
    "end": "2784500"
  },
  {
    "text": "Const the compiler moved it into the read-only section of the binary",
    "start": "2784500",
    "end": "2791089"
  },
  {
    "text": "therefore the compiler saw more optimization opportunities and it ran all of our standard algorithms and",
    "start": "2791089",
    "end": "2797460"
  },
  {
    "text": "everything at compile time simply because it could I didn't even have to use context for yet at this point yeah",
    "start": "2797460",
    "end": "2804690"
  },
  {
    "text": "so Const we want to use Const everywhere that we can any lack of Const as a code",
    "start": "2804690",
    "end": "2810990"
  },
  {
    "text": "smell cons forces us into morganisa code prevents common errors and encourages the use of more algorithms now we have a",
    "start": "2810990",
    "end": "2819030"
  },
  {
    "start": "2816000",
    "end": "2816000"
  },
  {
    "text": "bunch of questions do we constitute I have Const count in this code this game",
    "start": "2819030",
    "end": "2826109"
  },
  {
    "text": "who came to the meetup on Tuesday night yeah this came up a lot right do i Const",
    "start": "2826109",
    "end": "2832530"
  },
  {
    "text": "this count why because I have a bug in",
    "start": "2832530",
    "end": "2841710"
  },
  {
    "text": "my code yes thank you Peter it does change this code Oh",
    "start": "2841710",
    "end": "2847410"
  },
  {
    "text": "sorry because it doesn't change but it does change the code did you see the bug because I don't want it to change just",
    "start": "2847410",
    "end": "2854130"
  },
  {
    "text": "for the record I actually wrote this code and then realized oh wait a minute",
    "start": "2854130",
    "end": "2860099"
  },
  {
    "text": "if Const had been on there would have prevented this bug all right so I'm incrementing count instead of",
    "start": "2860099",
    "end": "2865800"
  },
  {
    "text": "incrementing my index or whatever you want to call it my counter all right real err I've actually made this now",
    "start": "2865800",
    "end": "2872910"
  },
  {
    "text": "fails to compile it's intentional do you Const temporary values what is what are",
    "start": "2872910",
    "end": "2880830"
  },
  {
    "start": "2875000",
    "end": "2875000"
  },
  {
    "text": "we doing here on line 8 we already discovered this what does move it's a",
    "start": "2880830",
    "end": "2887310"
  },
  {
    "text": "cast to an r-value reference can I move a Const object no this is a copy",
    "start": "2887310",
    "end": "2893700"
  },
  {
    "text": "oops I made it not Const oh no now it's not constat face how do I resolve this",
    "start": "2893700",
    "end": "2900900"
  },
  {
    "text": "problem don't have a temporary no reason to have",
    "start": "2900900",
    "end": "2907460"
  },
  {
    "text": "that value void the temporary altogether or write a function functions are",
    "start": "2907460",
    "end": "2915260"
  },
  {
    "text": "amazing they've been around since when who knows when functions were invented Peter yeah I mean you were just kind of",
    "start": "2915260",
    "end": "2921170"
  },
  {
    "text": "talking about some of this I don't even know what 1940s or something yet fun",
    "start": "2921170",
    "end": "2928099"
  },
  {
    "text": "aside our hardware is designed to make function calls fast like since the 70s",
    "start": "2928099",
    "end": "2937119"
  },
  {
    "text": "are a late 70s early 80s Intel when they were working on the 8086 said we want to",
    "start": "2937119",
    "end": "2942859"
  },
  {
    "text": "make we want to make algal like languages fast on our cpu languages with",
    "start": "2942859",
    "end": "2950359"
  },
  {
    "text": "function calls ok is this ok",
    "start": "2950359",
    "end": "2957160"
  },
  {
    "text": "I see one head waving no why not as a",
    "start": "2961590",
    "end": "2970650"
  },
  {
    "text": "contact and we're trying to return it so we don't want to do the standard move thing here right because we already know",
    "start": "2970650",
    "end": "2976290"
  },
  {
    "text": "that that's going to revert to to a move when it could be RV owed I will say this",
    "start": "2976290",
    "end": "2981480"
  },
  {
    "text": "actually is okay this does work with return value optimization you always",
    "start": "2981480",
    "end": "2991620"
  },
  {
    "text": "have this it is the nature of calling a function in C++ I you you will not be",
    "start": "2991620",
    "end": "2998910"
  },
  {
    "text": "able to show me a compiler to any optimization level that does not use return value optimization here going",
    "start": "2998910",
    "end": "3005780"
  },
  {
    "text": "back to 1997 at least because it's the",
    "start": "3005780",
    "end": "3011900"
  },
  {
    "text": "nature of how we call remember in the version when I said how many parameters does getstring take and we agreed one",
    "start": "3011900",
    "end": "3018230"
  },
  {
    "text": "it's because it's the location where that value needs to look what about this though am I am I am I getting returned",
    "start": "3018230",
    "end": "3029930"
  },
  {
    "text": "by optimization am i getting a copy or am I getting a move here you say I'm",
    "start": "3029930",
    "end": "3037010"
  },
  {
    "text": "getting a copy it it is a copy yes and since we're running out of time only a",
    "start": "3037010",
    "end": "3042290"
  },
  {
    "text": "little bit faster return value optimizations not going to apply here at worst case though is we actually have to",
    "start": "3042290",
    "end": "3047990"
  },
  {
    "text": "initialize value and value too and then decide which one of them technically we want to move out as of C++ 11 it's",
    "start": "3047990",
    "end": "3055460"
  },
  {
    "text": "equivalent to doing this but we can't move a constant object they become",
    "start": "3055460",
    "end": "3061130"
  },
  {
    "text": "copies this however does fall back into the case of return value optimization",
    "start": "3061130",
    "end": "3068500"
  },
  {
    "text": "interestingly because the scope is limited to the return statement I don't",
    "start": "3068500",
    "end": "3073640"
  },
  {
    "text": "know if I can promise you that it will on all platforms in this example but I think it will of course we can avoid",
    "start": "3073640",
    "end": "3080420"
  },
  {
    "text": "this question altogether by avoiding the temporary",
    "start": "3080420",
    "end": "3086440"
  },
  {
    "text": "I saw this code over and over and over again in LLVM I started to compile a",
    "start": "3088170",
    "end": "3093539"
  },
  {
    "text": "Leeson version of clang just for this talk and I saw these warnings pop past so I saw this what is the warning that I",
    "start": "3093539",
    "end": "3101880"
  },
  {
    "text": "am getting from Ella from clang while compiling clang on this line of code on",
    "start": "3101880",
    "end": "3107460"
  },
  {
    "text": "line 5 does anyone know oh okay what is",
    "start": "3107460",
    "end": "3118979"
  },
  {
    "text": "the value that I'd be getting from playing here it is redundant move",
    "start": "3118979",
    "end": "3125759"
  },
  {
    "text": "because this is implicitly a move here on line 5 as of C++ 11 does generate a",
    "start": "3125759",
    "end": "3133950"
  },
  {
    "text": "warning redundant redundant move and return statement do week on Street earn value types do I Const the string no why",
    "start": "3133950",
    "end": "3145578"
  },
  {
    "start": "3138000",
    "end": "3138000"
  },
  {
    "text": "what's that it's evil ok it breaks move semantics yes it",
    "start": "3145910",
    "end": "3152779"
  },
  {
    "text": "apparently it used to be a thing to do because this would fail to compile with",
    "start": "3152779",
    "end": "3159479"
  },
  {
    "text": "that work Const I never saw anyone construe turned values before so I was actually surprised to learn in like 2015",
    "start": "3159479",
    "end": "3166289"
  },
  {
    "text": "that this used to be a thing when I started programming in 20 2002 or so professionally it's an interesting side",
    "start": "3166289",
    "end": "3174749"
  },
  {
    "text": "effect of trying to make it behave more like built-in types this is not this is not compilable we can't do this in C++",
    "start": "3174749",
    "end": "3183049"
  },
  {
    "text": "so if we do this we get move assignment on line 10 now of course how do we avoid",
    "start": "3183049",
    "end": "3190170"
  },
  {
    "text": "this question altogether initialize it all in the same line like this so we",
    "start": "3190170",
    "end": "3199109"
  },
  {
    "text": "don't want to constantly return types breaks move operations so my conclusion",
    "start": "3199109",
    "end": "3205319"
  },
  {
    "text": "ultimately as I found three smells just for the record I really really wanted it to be only one smell but I had to end up",
    "start": "3205319",
    "end": "3211979"
  },
  {
    "text": "with three missing and ignored compiler warnings special checks for many of these things",
    "start": "3211979",
    "end": "3217559"
  },
  {
    "start": "3213000",
    "end": "3213000"
  },
  {
    "text": "CVP check helps us reduce variable scope variable can be Const tools can tell us",
    "start": "3217559",
    "end": "3224369"
  },
  {
    "text": "this the core guidelines checkers help us reduce raw pointers and memory usage Pesa maizing move warnings Const return",
    "start": "3224369",
    "end": "3231809"
  },
  {
    "text": "values in clang tidy so that's smell one missing and ignored compiler warnings number two missing",
    "start": "3231809",
    "end": "3240329"
  },
  {
    "start": "3239000",
    "end": "3239000"
  },
  {
    "text": "Const context / misplaced Const why isn't that value con storm or member",
    "start": "3240329",
    "end": "3246000"
  },
  {
    "text": "function Const if it's known at compile time it should be constant fur or an enum this forces us into more efficient",
    "start": "3246000",
    "end": "3252720"
  },
  {
    "text": "more organized code where we utilize array algorithms and numerix this is my",
    "start": "3252720",
    "end": "3258180"
  },
  {
    "text": "quote I am quoting myself here I don't care if you use east const or west cons just const your variables and i'm not a",
    "start": "3258180",
    "end": "3268650"
  },
  {
    "text": "triple a that's the almost always otto i'm not a triple a fan but it does push us in the same direction as const so if",
    "start": "3268650",
    "end": "3275069"
  },
  {
    "text": "we are using auto then we have to initialize these values weak types and",
    "start": "3275069",
    "end": "3281369"
  },
  {
    "start": "3280000",
    "end": "3280000"
  },
  {
    "text": "casting this is unfortunate because string file system path const character",
    "start": "3281369",
    "end": "3286859"
  },
  {
    "text": "pointers string views optional variant shared pointer these all have these",
    "start": "3286859",
    "end": "3291930"
  },
  {
    "text": "implicit casts that exist in them unique pointer does as well and this",
    "start": "3291930",
    "end": "3298039"
  },
  {
    "text": "contributes to many of these issues for us unfortunately but we can try to use",
    "start": "3298039",
    "end": "3304049"
  },
  {
    "text": "strong or typing where we can we can use options our numbers one and two here to",
    "start": "3304049",
    "end": "3309630"
  },
  {
    "text": "try to catch the rest of these issues generally speaking we just have to read our code try to use auto because Otto",
    "start": "3309630",
    "end": "3316769"
  },
  {
    "text": "doesn't coerce types so that will prevent implicit conversions you use correct types to",
    "start": "3316769",
    "end": "3323430"
  },
  {
    "text": "avoid casting and avoid naming temporaries when we can so that we avoid",
    "start": "3323430",
    "end": "3328440"
  },
  {
    "text": "the standard move smell and I am out of time to hit this bit well I have like",
    "start": "3328440",
    "end": "3335880"
  },
  {
    "start": "3331000",
    "end": "3331000"
  },
  {
    "text": "one minute left but just for the record",
    "start": "3335880",
    "end": "3342109"
  },
  {
    "text": "we can apply constant all the standard algorithms all this doesn't have Const",
    "start": "3342109",
    "end": "3347420"
  },
  {
    "text": "we apply standard algorithm we get Const and we make our own algorithm so that's where I leave off",
    "start": "3347420",
    "end": "3354480"
  },
  {
    "text": "but with like two minutes left are there any questions or anything you'd like me to go back to right cool thanks Aaron",
    "start": "3354480",
    "end": "3365359"
  },
  {
    "text": "you",
    "start": "3369019",
    "end": "3371079"
  }
]