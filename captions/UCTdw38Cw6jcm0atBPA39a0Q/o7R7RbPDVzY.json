[
  {
    "text": "all right we ready to get started yeah",
    "start": "10469",
    "end": "16350"
  },
  {
    "text": "so welcome to a primer on functional programming my name is Sarah with E you're welcome to tweet along if you",
    "start": "16350",
    "end": "22470"
  },
  {
    "text": "like if you're into that kind of thing but first I kind of want to know who's heard of functional programming",
    "start": "22470",
    "end": "28730"
  },
  {
    "text": "hopefully most of you yeah otherwise you probably wouldn't know what you're really getting into I guess um who's",
    "start": "28730",
    "end": "35220"
  },
  {
    "text": "done some form of functional programming that you know of a few people all right",
    "start": "35220",
    "end": "40739"
  },
  {
    "text": "that's kind of what are we expecting would any of you say you are a functional programmer one of you all",
    "start": "40739",
    "end": "46530"
  },
  {
    "text": "right and here's one to learn about functional programming but never had the time never really had the resources or",
    "start": "46530",
    "end": "54329"
  },
  {
    "text": "things like that okay good you might need my kind of crowd so that's kind of what I was hoping for when I went to",
    "start": "54329",
    "end": "62340"
  },
  {
    "text": "college in the US I ended up taking a programming languages course and did a",
    "start": "62340",
    "end": "67710"
  },
  {
    "text": "whole program in Pascal and then by the end still didn't really know what functional programming was even though",
    "start": "67710",
    "end": "73050"
  },
  {
    "text": "that was like a thing we were supposed to learn in the course and then just kept hearing it pop up and realized I never really understood what it meant to",
    "start": "73050",
    "end": "80340"
  },
  {
    "text": "program functionally so that's sort of the spawn of this talk was sort of that research and kind of learning from that",
    "start": "80340",
    "end": "88080"
  },
  {
    "text": "and hoping to be able to share those things um so you in the back that said you are a functional programmer I don't",
    "start": "88080",
    "end": "93929"
  },
  {
    "text": "know if you'll get as much out of this but hopefully if you leave I won't be offended um",
    "start": "93929",
    "end": "100340"
  },
  {
    "text": "so kind of quickly I'm gonna go over some of the functional programming concepts and then kind of talk about why",
    "start": "100340",
    "end": "106440"
  },
  {
    "text": "we might want to use functional programming and then kind of take a super brief glance at like differences",
    "start": "106440",
    "end": "113700"
  },
  {
    "text": "between functional programming languages and not functional languages and that might be a little different than what",
    "start": "113700",
    "end": "119429"
  },
  {
    "text": "you might think so hello good morning like I said I'm Sarah Whitney I'm a",
    "start": "119429",
    "end": "125700"
  },
  {
    "text": "software engineer I've worked in a variety of different languages over the years and kind of a whole different wide",
    "start": "125700",
    "end": "132060"
  },
  {
    "text": "variety of fields as well I'm from Pittsburgh Pennsylvania which is kind of the eastern end of the country and I'm",
    "start": "132060",
    "end": "139200"
  },
  {
    "text": "geeky girl Sarah on pretty much all the things and Twitter as well Alice Lobby tweeting throughout the conference - all",
    "start": "139200",
    "end": "147120"
  },
  {
    "text": "right so you can dive into the base concepts of functional programming and",
    "start": "147120",
    "end": "153849"
  },
  {
    "text": "the first thing I want to point out is it's really not new I think it's kind of one of the big buzzwords that's floating around all our conferences in",
    "start": "153849",
    "end": "160629"
  },
  {
    "text": "programming worlds lately but it's really been around most of these ideas have been around since the 50s so it's",
    "start": "160629",
    "end": "166810"
  },
  {
    "text": "been you know a pretty solid idea for a really long time it's built on the ideas",
    "start": "166810",
    "end": "172629"
  },
  {
    "text": "of lambda calculus which was invented in the 1930s and I won't go over that don't worry it's it's really dense and kind of",
    "start": "172629",
    "end": "181180"
  },
  {
    "text": "ugly but uh that's where a lot of these basic ideas stems from and if you get",
    "start": "181180",
    "end": "186519"
  },
  {
    "text": "nothing else out of this whole session besides this one main point it's called",
    "start": "186519",
    "end": "191620"
  },
  {
    "text": "pure functions so pure function is a function that when you give it a certain input will always give you the exact",
    "start": "191620",
    "end": "198609"
  },
  {
    "text": "same output which also means that pure functions don't have side effects so you",
    "start": "198609",
    "end": "204909"
  },
  {
    "text": "know when you run this function it works the same way nothing around in other areas of your code or your system or",
    "start": "204909",
    "end": "211269"
  },
  {
    "text": "getting modified through it so you know it's also like really accurate my side",
    "start": "211269",
    "end": "216970"
  },
  {
    "text": "effects I mean different things like checking on the time which changes obviously every second or millisecond",
    "start": "216970",
    "end": "224069"
  },
  {
    "text": "anything dealing with file access because you don't always know what files are there or not database access you don't know if",
    "start": "224069",
    "end": "230949"
  },
  {
    "text": "records have changed or maybe your database could even just disappear you",
    "start": "230949",
    "end": "236290"
  },
  {
    "text": "don't know things like that I'm saying for network access you don't always know if your drives are there they're",
    "start": "236290",
    "end": "242799"
  },
  {
    "text": "accessible and same for previous function calls if one function relies on another",
    "start": "242799",
    "end": "248079"
  },
  {
    "text": "function working and it doesn't get called in that order then you can't really guarantee you're getting the same",
    "start": "248079",
    "end": "254019"
  },
  {
    "text": "output it so it's not a pure function and user input is never pure duh how",
    "start": "254019",
    "end": "262719"
  },
  {
    "text": "many of you can reliably accurately know that your users are using the program correctly no hands yeah exactly",
    "start": "262719",
    "end": "269530"
  },
  {
    "text": "um you you can't rely on user input being the same and so and also",
    "start": "269530",
    "end": "275490"
  },
  {
    "text": "call-by-reference is never pure because unless you absolutely know the stuff you're",
    "start": "275490",
    "end": "282070"
  },
  {
    "text": "bringing in it's the same but you're also usually changing the state when you do call-by-reference you're changing those variables that are passed",
    "start": "282070",
    "end": "288250"
  },
  {
    "text": "in so that's not a pure function and at this point you might be thinking like",
    "start": "288250",
    "end": "293710"
  },
  {
    "text": "wait a minute this sounds like nearly impossible to really write a functional program and you're right you pretty much cannot do it in a 100%",
    "start": "293710",
    "end": "300940"
  },
  {
    "text": "scale but we'll talk about it in a bit how we can kind of work with a",
    "start": "300940",
    "end": "306039"
  },
  {
    "text": "predominantly functional thing and deal with those weird side effects in a little while so some examples could",
    "start": "306039",
    "end": "313180"
  },
  {
    "text": "include a lot of math functions so things like taking the absolute value or like the sine of a number or the square",
    "start": "313180",
    "end": "319569"
  },
  {
    "text": "root these always return the same values for every input you give so we know",
    "start": "319569",
    "end": "325630"
  },
  {
    "text": "they're definitely pure functions and we can do the same for a lot of like",
    "start": "325630",
    "end": "331949"
  },
  {
    "text": "functions based on data types as well so the length of a string is always going to be the same if your string is the",
    "start": "331949",
    "end": "337930"
  },
  {
    "text": "same the same if it's empty the same if you're concatenated two strings as long",
    "start": "337930",
    "end": "342970"
  },
  {
    "text": "as the strings are the same you'll always get the same result same forget account number from database",
    "start": "342970",
    "end": "349479"
  },
  {
    "text": "okay I'm kidding obviously so that's not pure so so many things are",
    "start": "349479",
    "end": "354909"
  },
  {
    "text": "wrong with this one so obviously that's not sure so the kind of recap you know",
    "start": "354909",
    "end": "361990"
  },
  {
    "text": "given a certain input you'll always get the same output no side effects anything",
    "start": "361990",
    "end": "367449"
  },
  {
    "text": "your users do is definitely not pure call-by-reference is also not pure and it's pretty much impossible but like I",
    "start": "367449",
    "end": "373690"
  },
  {
    "text": "said well talk about that a bit so referential transparency is kind of a",
    "start": "373690",
    "end": "381819"
  },
  {
    "text": "complicated term for what we say any expression can replace a function with",
    "start": "381819",
    "end": "387460"
  },
  {
    "text": "its return value with no behavioral changes so if it's a pure function you can take out the function and put in a",
    "start": "387460",
    "end": "393639"
  },
  {
    "text": "value and everything would be the same that way so an example of this would be",
    "start": "393639",
    "end": "399639"
  },
  {
    "text": "if some function you know always returns the value of 3 then you can basically take out that function put in 3 and it",
    "start": "399639",
    "end": "407319"
  },
  {
    "text": "would still work the same I don't think anybody would ever do this but it's an example that makes sense kind of run a",
    "start": "407319",
    "end": "413409"
  },
  {
    "text": "nut shell so if we want to get a little bit more complex if we want to do like a few more",
    "start": "413409",
    "end": "419990"
  },
  {
    "text": "math things if X was 30 and then the sine of 30 would be 0.5 and the cosine",
    "start": "419990",
    "end": "427010"
  },
  {
    "text": "of 60 or like 30 times 2 would be also 0.5 and so that would be 1 but we can",
    "start": "427010",
    "end": "433730"
  },
  {
    "text": "also take out those functions and replace them with the values and still get the same thing pure functions are",
    "start": "433730",
    "end": "441350"
  },
  {
    "text": "always referent or always have referential transparency so you always",
    "start": "441350",
    "end": "446450"
  },
  {
    "text": "know that the values and the functions can do the same thing as we kind of",
    "start": "446450",
    "end": "452180"
  },
  {
    "text": "alluded to you in mathematics all functions are transparent but in programming this is not true and you can",
    "start": "452180",
    "end": "457700"
  },
  {
    "text": "probably start to think of a few examples of where this might be but one important one I kind of want to cover is",
    "start": "457700",
    "end": "463520"
  },
  {
    "text": "that assignments are not transparent it's not really immediately obvious at",
    "start": "463520",
    "end": "468770"
  },
  {
    "text": "first but when you're done with this equation so X has changed when you're",
    "start": "468770",
    "end": "474500"
  },
  {
    "text": "done X is not the same as what it started with so you're outside state has changed so",
    "start": "474500",
    "end": "479840"
  },
  {
    "text": "this is not really a pure function but we can kind of rewrite that as sort of an add one function so given a number it",
    "start": "479840",
    "end": "487340"
  },
  {
    "text": "will return you know the modified change so that's sort of the functional way to",
    "start": "487340",
    "end": "492560"
  },
  {
    "text": "do it and the same thing if you wanted to like double a number rather than times two you would just write a",
    "start": "492560",
    "end": "498350"
  },
  {
    "text": "function that would do this for you functionally and because of that",
    "start": "498350",
    "end": "503660"
  },
  {
    "text": "functional languages usually have immutable variables so you can't change them once you store a value on them they",
    "start": "503660",
    "end": "509990"
  },
  {
    "text": "don't change and some languages let you kind of play with that but this is kind of a concept of use and it's for a",
    "start": "509990",
    "end": "516620"
  },
  {
    "text": "safety reason so it's to make sure you know you're outside state doesn't change",
    "start": "516620",
    "end": "521659"
  },
  {
    "text": "so you hopefully once you set it you know it's always going to be the same throughout your whole program and if you",
    "start": "521660",
    "end": "527900"
  },
  {
    "text": "want it to change you have to deal with it yourself this also usually means that some",
    "start": "527900",
    "end": "534560"
  },
  {
    "text": "functional languages have type inferences so you know if x equals one it can defer that X is always going to",
    "start": "534560",
    "end": "542030"
  },
  {
    "text": "be a number or an integer or however your language can it picks up on that and the pro of that is that at come",
    "start": "542030",
    "end": "548819"
  },
  {
    "text": "I'll time you can also detect some errors too so if you set X to be a",
    "start": "548819",
    "end": "553919"
  },
  {
    "text": "string and you're trying to multiply it by two you know at compile time that that's not going to work you would end",
    "start": "553919",
    "end": "560489"
  },
  {
    "text": "up erroring out when you try to run it so it can catch things like that at runtime okay has any Bakr Dov lambda",
    "start": "560489",
    "end": "568199"
  },
  {
    "text": "functions or not MS functions yeah I probably must have and possibly some of",
    "start": "568199",
    "end": "573299"
  },
  {
    "text": "you have eaten with even written these and their functions without a name I do",
    "start": "573299",
    "end": "578879"
  },
  {
    "text": "want to point out that lambdas can't be recursive because you usually call a",
    "start": "578879",
    "end": "584249"
  },
  {
    "text": "function with the same name over again but otherwise I found there is like a",
    "start": "584249",
    "end": "590429"
  },
  {
    "text": "weird quirky example of a way to make a recursive lambda function and you can",
    "start": "590429",
    "end": "595619"
  },
  {
    "text": "ask me about that later if you want but the basic idea is you can't use them to do recursion but in functional",
    "start": "595619",
    "end": "602939"
  },
  {
    "text": "programming you would do recursion normally so why might you use lambdas they can assist in higher level",
    "start": "602939",
    "end": "609600"
  },
  {
    "text": "functions sometimes it's just easier to make like a simple function like if you were doubling a number you can just you",
    "start": "609600",
    "end": "615720"
  },
  {
    "text": "don't even need to almost give it a name you can kind of pass that on to another function if you needed you can pass",
    "start": "615720",
    "end": "621569"
  },
  {
    "text": "arguments to another function so instead of like calculating a value and then",
    "start": "621569",
    "end": "627119"
  },
  {
    "text": "taking that value and passing it you can just kind of you know do it all in the same step and usually you only do this",
    "start": "627119",
    "end": "633179"
  },
  {
    "text": "if you call this function like once or twice so it's just simpler to do that an",
    "start": "633179",
    "end": "639299"
  },
  {
    "text": "example of a lambda might be this one here so if you have a lambda that takes in an X and then multiplies it by itself",
    "start": "639299",
    "end": "645929"
  },
  {
    "text": "so basically you're squaring it and then you can print out just F so f is kind of",
    "start": "645929",
    "end": "652859"
  },
  {
    "text": "treated like a variable but it's really stored as a function and then so when you pass in five you would get 25 for",
    "start": "652859",
    "end": "660659"
  },
  {
    "text": "the output of F I'm and doing things like this also kind of means yeah",
    "start": "660659",
    "end": "666269"
  },
  {
    "text": "so X would be the argument I've also seen some languages just say function",
    "start": "666269",
    "end": "671309"
  },
  {
    "text": "and then you just write it so you don't end up having a name either so depending on what language you work in I forget",
    "start": "671309",
    "end": "680279"
  },
  {
    "text": "about all this so functions are now values if we think about this so if we just have a I",
    "start": "680279",
    "end": "686830"
  },
  {
    "text": "usually have taught programming where I refer to variables as like boxes that hold some value but now we can think of",
    "start": "686830",
    "end": "693790"
  },
  {
    "text": "like a box that now holds a function and because we sort of have this self-contained box now we can pass this",
    "start": "693790",
    "end": "700900"
  },
  {
    "text": "to other functions as well almost as if it's a barometer and one example of this",
    "start": "700900",
    "end": "707620"
  },
  {
    "text": "might be so if we had a divide function that takes two numbers and then just returns one divided by the other and",
    "start": "707620",
    "end": "715660"
  },
  {
    "text": "then we made another function that's just a divisor and so it would just be a lambda function that returns a number",
    "start": "715660",
    "end": "722440"
  },
  {
    "text": "passed in and then calls a divided function and then you can store a",
    "start": "722440",
    "end": "728080"
  },
  {
    "text": "variable called half that would just take you know the half of something so it would be the divisor of two so now",
    "start": "728080",
    "end": "734680"
  },
  {
    "text": "half is the sort of lambda function I can just take whatever's passed in and divide it by two so then if you were to",
    "start": "734680",
    "end": "741250"
  },
  {
    "text": "print out half you would get 16 if you passed in 32 so we all good so far yeah it's really",
    "start": "741250",
    "end": "750790"
  },
  {
    "text": "quiet room so trouble don't know how you're all doing okay and you may have",
    "start": "750790",
    "end": "755980"
  },
  {
    "text": "seen some of these examples so who's heard of Map Reduce filter those kinds",
    "start": "755980",
    "end": "761080"
  },
  {
    "text": "of functions and whose possibly even used these two a few yeah so the basic",
    "start": "761080",
    "end": "767380"
  },
  {
    "text": "idea is you have some sort of list of items you can pass a function into it and then it applies it to every item in",
    "start": "767380",
    "end": "773800"
  },
  {
    "text": "the list so just to make sure everybody's heard of these um map is a function that's in most languages",
    "start": "773800",
    "end": "779890"
  },
  {
    "text": "nowadays so it takes some sort of function and just applies it to every",
    "start": "779890",
    "end": "785200"
  },
  {
    "text": "item in the list so it's usually of some form of map function comma list or list",
    "start": "785200",
    "end": "790600"
  },
  {
    "text": "comma function an example would be if we have like an array of items so in this",
    "start": "790600",
    "end": "796000"
  },
  {
    "text": "case one through five and we were to square it so squared is now the",
    "start": "796000",
    "end": "802150"
  },
  {
    "text": "resulting list of the Shlaim of the function so we're passing in the lambda that says take every item multiply it by",
    "start": "802150",
    "end": "808420"
  },
  {
    "text": "2 and then items would be that list we're passing in it would just apply it",
    "start": "808420",
    "end": "814210"
  },
  {
    "text": "to everything and then return squared as a new list and this is basically the same thing if you were to",
    "start": "814210",
    "end": "819730"
  },
  {
    "text": "do it as a for-loop so for every item in squared you would just append another",
    "start": "819730",
    "end": "826319"
  },
  {
    "text": "squared item onto a filter similar so it",
    "start": "826319",
    "end": "832870"
  },
  {
    "text": "creates a second list that has seen or you pass in a function and then if the",
    "start": "832870",
    "end": "838689"
  },
  {
    "text": "item you know passes through that function then it will return in the second list this kind of the same thing",
    "start": "838689",
    "end": "844389"
  },
  {
    "text": "takes a function in the list so in this case if we wanted to take a list of",
    "start": "844389",
    "end": "849910"
  },
  {
    "text": "items and find out if anything was under five you can just pass in a lambda as X",
    "start": "849910",
    "end": "856899"
  },
  {
    "text": "less than five so if it's true it will go into the new list which is sort of",
    "start": "856899",
    "end": "862810"
  },
  {
    "text": "again the same thing as another for loop so if it's under five you just append it",
    "start": "862810",
    "end": "867850"
  },
  {
    "text": "to that list so reduce is also a handy",
    "start": "867850",
    "end": "875050"
  },
  {
    "text": "function so instead of kind of applying a function to the whole list it sort of applies the function to everything and",
    "start": "875050",
    "end": "881980"
  },
  {
    "text": "returns one value so it's usually some sort of computation like if you wanted to add everything in the list for",
    "start": "881980",
    "end": "887889"
  },
  {
    "text": "example so if we had another array of items you could reduce that list by",
    "start": "887889",
    "end": "895360"
  },
  {
    "text": "multiplying each thing together so x and y would be one would be kind of the recurring result so far and then the",
    "start": "895360",
    "end": "903279"
  },
  {
    "text": "next one would be the item getting you know computed into it and this will kind",
    "start": "903279",
    "end": "909670"
  },
  {
    "text": "of depend on language which ones which it's kind of the same thing as if we",
    "start": "909670",
    "end": "915160"
  },
  {
    "text": "were to take the product and just multiply it by each item in the list so these two are really similar and it kind",
    "start": "915160",
    "end": "922660"
  },
  {
    "text": "of depends also which language you're using so some reduce each item to the left and some reduce each item to the",
    "start": "922660",
    "end": "928689"
  },
  {
    "text": "right and some even have like separate functions to do this and some it's just called reduce and you kind of have to",
    "start": "928689",
    "end": "934449"
  },
  {
    "text": "figure out which one it is I saw this tweet once which has a pretty good example of how to do this so if you were",
    "start": "934449",
    "end": "942189"
  },
  {
    "text": "to take a list of corn cow and chicken and apply the cook function to them then",
    "start": "942189",
    "end": "947350"
  },
  {
    "text": "you get popcorn hamburger egg and then if you were to filter on is",
    "start": "947350",
    "end": "952809"
  },
  {
    "text": "vegetarian then you would get back the popcorn and the egg and then if you were to reduce them by the eat function then",
    "start": "952809",
    "end": "959649"
  },
  {
    "text": "you would just get the poop emoji that's a pretty good example of how it works so",
    "start": "959649",
    "end": "968110"
  },
  {
    "text": "if you have any sort of operation that you need to do on an entire list then doing it functionally usually makes",
    "start": "968110",
    "end": "974889"
  },
  {
    "text": "sense often with the map function but you can also write your own functions to kind of apply some sort of operation all",
    "start": "974889",
    "end": "981699"
  },
  {
    "text": "the way across so are we good on concepts ever you get in the feel for",
    "start": "981699",
    "end": "987220"
  },
  {
    "text": "functional programming all right so why would we want to use functional",
    "start": "987220",
    "end": "992980"
  },
  {
    "text": "programming and the first one is hopefully you're starting to see that a",
    "start": "992980",
    "end": "998589"
  },
  {
    "text": "lot of these pure functions are a lot simpler to write and of course that means they're faster to write and as we",
    "start": "998589",
    "end": "1005670"
  },
  {
    "text": "talked about earlier pure functions will always work correctly because you know the inputs and the outputs will be",
    "start": "1005670",
    "end": "1011699"
  },
  {
    "text": "accurate every time have any of you done like debugging in Java or some other",
    "start": "1011699",
    "end": "1019739"
  },
  {
    "text": "language that gives you this obnoxiously huge stack trace of problems and the",
    "start": "1019739",
    "end": "1025529"
  },
  {
    "text": "problem might be at the top but it might be somewhere in the middle of the stack trace - it's generally a really big pain",
    "start": "1025529",
    "end": "1032899"
  },
  {
    "text": "but if you can do things functionally and you know which functions are really accurate and written correctly it",
    "start": "1032899",
    "end": "1040470"
  },
  {
    "text": "usually makes actress's a lot easier because you can kind of look down and see like well this is the one where the",
    "start": "1040470",
    "end": "1045688"
  },
  {
    "text": "database access happens maybe that would be the problem or different things like that so it usually helps with debugging",
    "start": "1045689",
    "end": "1052049"
  },
  {
    "text": "as well and type inferences can reduce these errors before they happen at",
    "start": "1052049",
    "end": "1058769"
  },
  {
    "text": "runtime by finding them at compile time and I think it's Elam that has these like beautiful error messages let's say",
    "start": "1058769",
    "end": "1066240"
  },
  {
    "text": "this is your line this is the exact problem in that line or the error is and usually also even refers like an example",
    "start": "1066240",
    "end": "1073799"
  },
  {
    "text": "of how to fix it like it's that precise because it's just that well-designed so",
    "start": "1073799",
    "end": "1080309"
  },
  {
    "text": "if it's a functional language it's usually built to be really accurately and hopefully unit",
    "start": "1080309",
    "end": "1088320"
  },
  {
    "text": "testing is functional programming because you sort of set up an environment you run a function and then",
    "start": "1088320",
    "end": "1093690"
  },
  {
    "text": "you sort of destroy your environment since you're building that environment the same every time your unit tests",
    "start": "1093690",
    "end": "1099840"
  },
  {
    "text": "should be accurate every single time so no side effects should theory happen if",
    "start": "1099840",
    "end": "1104910"
  },
  {
    "text": "you're doing your unit tests correctly it's entirely possible to not do this correctly but in theory they're the sign",
    "start": "1104910",
    "end": "1111990"
  },
  {
    "text": "to be accurate that way and of course your global state of your program isn't",
    "start": "1111990",
    "end": "1118320"
  },
  {
    "text": "affected by these pure functions so you would want to do this just because you",
    "start": "1118320",
    "end": "1123660"
  },
  {
    "text": "know like weird things aren't happening off on the side your variables aren't getting changed in other areas of your",
    "start": "1123660",
    "end": "1128790"
  },
  {
    "text": "program stuff like that and this also",
    "start": "1128790",
    "end": "1133860"
  },
  {
    "text": "means that your functions become paralyzing because they can kind of run on their own they're not modifying other things",
    "start": "1133860",
    "end": "1140280"
  },
  {
    "text": "you can run them more than once at the same time I mean you can run them in any order to so you don't even have to call",
    "start": "1140280",
    "end": "1147000"
  },
  {
    "text": "one then two then three you can just run two and then one and then three or whatever order really works so it kind",
    "start": "1147000",
    "end": "1153180"
  },
  {
    "text": "of makes sort of larger operations work a lot nicer and as your code grows",
    "start": "1153180",
    "end": "1160110"
  },
  {
    "text": "larger it also becomes more reliable overall so these really better smaller",
    "start": "1160110",
    "end": "1165120"
  },
  {
    "text": "modules make up a lot better larger modules okay so I've thrown a lot",
    "start": "1165120",
    "end": "1172980"
  },
  {
    "text": "at you in the last 20 minutes who's ready for a fun activity I heard one yay",
    "start": "1172980",
    "end": "1178830"
  },
  {
    "text": "good ok it's still early right yeah okay so activity one is here in a moment I'm",
    "start": "1178830",
    "end": "1186360"
  },
  {
    "text": "gonna have everybody stand up if you're able to so in the beginning so far we",
    "start": "1186360",
    "end": "1193710"
  },
  {
    "text": "would have counted zero people so we're going to start at zero and then the each person will go and increase that number",
    "start": "1193710",
    "end": "1201060"
  },
  {
    "text": "by one so if I'm starting with person zero and you're the first one you would be one and then two and then so on um",
    "start": "1201060",
    "end": "1209340"
  },
  {
    "text": "say that number out loud and then sit down and then the next person will say",
    "start": "1209340",
    "end": "1215220"
  },
  {
    "text": "the number and sit down and so whoever is the last person in the room will report the total hopefully",
    "start": "1215220",
    "end": "1222119"
  },
  {
    "text": "this is a pretty easy activity that I think you all can do really well so who's up for it whoo okay",
    "start": "1222119",
    "end": "1229320"
  },
  {
    "text": "all right let's stand up um I guess I'll just go by rows so I guess I'll start",
    "start": "1229320",
    "end": "1236009"
  },
  {
    "text": "with you in the front row and set them in skip the round there you go",
    "start": "1236009",
    "end": "1262099"
  },
  {
    "text": "[Laughter]",
    "start": "1289470",
    "end": "1292970"
  },
  {
    "text": "cool there's 70 people in there cool um that would be one for if anybody asked",
    "start": "1310340",
    "end": "1315440"
  },
  {
    "text": "me later how many people so I know um but now there's a point to this activity really okay um who's ready for activity",
    "start": "1315440",
    "end": "1322130"
  },
  {
    "text": "- Oh y'all are awake now cool all right",
    "start": "1322130",
    "end": "1327530"
  },
  {
    "text": "so in a moment everybody's gonna stand up again um so you are one person on",
    "start": "1327530",
    "end": "1333470"
  },
  {
    "text": "your own so your internal total is going to be one you're going to find a",
    "start": "1333470",
    "end": "1339440"
  },
  {
    "text": "neighbor and then you're going to add up your two numbers so whatever your number",
    "start": "1339440",
    "end": "1345050"
  },
  {
    "text": "is plus their number one of you will sit down I'll let you decide who wants to do",
    "start": "1345050",
    "end": "1350960"
  },
  {
    "text": "that and then we're going to repeat so you're going to whoever stay standing up",
    "start": "1350960",
    "end": "1356240"
  },
  {
    "text": "it's going to find another neighbor and add your two numbers together and then one of you will sit down so then in the",
    "start": "1356240",
    "end": "1363890"
  },
  {
    "text": "end I said an extra volunteer will just have whoever's left over should be able to tell me what that total is at the end",
    "start": "1363890",
    "end": "1370910"
  },
  {
    "text": "so one person will be standing up at the end so this make sense maybe a lot more",
    "start": "1370910",
    "end": "1378980"
  },
  {
    "text": "skeptical right okay okay stand up all right so everybody remember",
    "start": "1378980",
    "end": "1385310"
  },
  {
    "text": "what number you started with good okay go find a neighbor",
    "start": "1385310",
    "end": "1390940"
  },
  {
    "text": "[Laughter]",
    "start": "1435770",
    "end": "1443240"
  },
  {
    "text": "all right Oh Oh I'll work on this all right three",
    "start": "1456559",
    "end": "1473009"
  },
  {
    "text": "people left I feel sorry for you you're just gonna like on your own eighty-three",
    "start": "1473009",
    "end": "1481919"
  },
  {
    "text": "and fold is your number sorry oh holy cow all right you can sit down",
    "start": "1481919",
    "end": "1495109"
  },
  {
    "text": "or 30 people snuck in the room the middle of this activity right yeah 40",
    "start": "1495109",
    "end": "1501330"
  },
  {
    "text": "people 43 people anyway okay so um this was kind of a really really silly way to",
    "start": "1501330",
    "end": "1507840"
  },
  {
    "text": "do this but the point was the try and show that activity one was really kind",
    "start": "1507840",
    "end": "1515099"
  },
  {
    "text": "of a four while loop so each time you just added one to the number and it took",
    "start": "1515099",
    "end": "1520229"
  },
  {
    "text": "a really long time and very activity to a sort of a recursive and concurrent way",
    "start": "1520229",
    "end": "1526019"
  },
  {
    "text": "to do it since multiple groups work out at the same time it should have been a little faster and in theory this would",
    "start": "1526019",
    "end": "1534620"
  },
  {
    "text": "have been kind of like reduced function across all the numbers in the room that didn't quite work right but that's kind",
    "start": "1534620",
    "end": "1542330"
  },
  {
    "text": "of the basic idea yeah people are not pure you make a good point I think we",
    "start": "1542330",
    "end": "1549559"
  },
  {
    "text": "explained that in the beginning user inputs never pure all right um but",
    "start": "1549559",
    "end": "1554600"
  },
  {
    "text": "hopefully made kind of a point so my friend Jessica Kerr had a functional",
    "start": "1554600",
    "end": "1560419"
  },
  {
    "text": "programming talk and she had this example which he lets me use but so if you're managing sort of a business that",
    "start": "1560419",
    "end": "1567200"
  },
  {
    "text": "took in like like a non profit kind of charity business that took in like",
    "start": "1567200",
    "end": "1572539"
  },
  {
    "text": "financial donations as well as like you know item donations you could kind of go",
    "start": "1572539",
    "end": "1578179"
  },
  {
    "text": "through and see you know if there was a unused deposit amount and then kind of",
    "start": "1578179",
    "end": "1585799"
  },
  {
    "text": "in the next step get any of those unused donations sort of add them to the",
    "start": "1585799",
    "end": "1590899"
  },
  {
    "text": "deposit and each time you're creating like a link record in a database and",
    "start": "1590899",
    "end": "1595909"
  },
  {
    "text": "then check that yes we've marked their donation as donated by that person and",
    "start": "1595909",
    "end": "1602059"
  },
  {
    "text": "kind of in the end you have this like full deposit that you can go send off to the bank and then you kind of repeat this process and this might be how we",
    "start": "1602059",
    "end": "1608419"
  },
  {
    "text": "would do it in sort of a procedural or object-oriented kind of way but we can",
    "start": "1608419",
    "end": "1614179"
  },
  {
    "text": "kind of restructure it a little bit differently and say okay so we have all these deposits and we have all these",
    "start": "1614179",
    "end": "1620119"
  },
  {
    "text": "donations we can kind of filter by which one of those have been unused or not tracked yet and then they're put them in",
    "start": "1620119",
    "end": "1627830"
  },
  {
    "text": "together with a matching function which would be so the unused in the matching",
    "start": "1627830",
    "end": "1633529"
  },
  {
    "text": "both could be pure functions because they would work the same every time and then from there you could match",
    "start": "1633529",
    "end": "1639499"
  },
  {
    "text": "these things up and then store them in a database and then mark them in a another",
    "start": "1639499",
    "end": "1644990"
  },
  {
    "text": "database perhaps so we kind of taken those sort of side effect routes where",
    "start": "1644990",
    "end": "1650450"
  },
  {
    "text": "we don't know exactly where the that is coming from don't know you know the accuracy of it and started",
    "start": "1650450",
    "end": "1656179"
  },
  {
    "text": "pushing them out to the edge cases and so we do all of our functional work in the middle so we know it's a little bit",
    "start": "1656179",
    "end": "1661850"
  },
  {
    "text": "more accurate wait so writing these functional",
    "start": "1661850",
    "end": "1667070"
  },
  {
    "text": "programs takes a little bit of a mindset change there's not really a direct conversion from I do procedural or",
    "start": "1667070",
    "end": "1674030"
  },
  {
    "text": "object-oriented to you know this is functional it takes a little bit of a",
    "start": "1674030",
    "end": "1679100"
  },
  {
    "text": "thinking difference but hopefully you can start to see you can do some functional style things in",
    "start": "1679100",
    "end": "1684980"
  },
  {
    "text": "object-oriented programming but you can also have functional stuff that uses objects in it as well so they're not",
    "start": "1684980",
    "end": "1691910"
  },
  {
    "text": "like a war where they're fighting against each other on which one's really better you can actually have both at the",
    "start": "1691910",
    "end": "1697460"
  },
  {
    "text": "same time so kind of briefly I want to wrap this up a bit by looking at",
    "start": "1697460",
    "end": "1704020"
  },
  {
    "text": "different types of programming languages and kind of looking at which ones are actually purely function and so this is",
    "start": "1704020",
    "end": "1711560"
  },
  {
    "text": "the most pure functional languages I could actually find so the language is built from the ground up being entirely",
    "start": "1711560",
    "end": "1718670"
  },
  {
    "text": "functional so has anybody heard of any of these languages yeah there's a few in",
    "start": "1718670",
    "end": "1726440"
  },
  {
    "text": "there um the list was actually smaller than I thought it would be because I like I said I did a project in Haskell",
    "start": "1726440",
    "end": "1733100"
  },
  {
    "text": "once but mostly has other ones I hadn't really heard of I think pure script I had heard of and then um like I",
    "start": "1733100",
    "end": "1739520"
  },
  {
    "text": "mentioned earlier but there was a lot fewer than I thought and then these are the impure functional languages so these",
    "start": "1739520",
    "end": "1746300"
  },
  {
    "text": "are languages that are not built from the ground up but have functional concepts kind of built into them like",
    "start": "1746300",
    "end": "1751610"
  },
  {
    "text": "passing functions as arguments and things like that so hopefully there's at least one language in here everybody's",
    "start": "1751610",
    "end": "1757400"
  },
  {
    "text": "heard of and probably the majority of you actually work in some language that's on this list um and yeah so most",
    "start": "1757400",
    "end": "1767090"
  },
  {
    "text": "of these have it's probably in different time variances like C++ didn't have them",
    "start": "1767090",
    "end": "1772370"
  },
  {
    "text": "in the beginning but they had them after I'm C++ 11 for instance um well the ones that surprised me with spreadsheets I'd",
    "start": "1772370",
    "end": "1779000"
  },
  {
    "text": "never really thought about it but spreadsheets are functional because each cells kind of does its own thing and you",
    "start": "1779000",
    "end": "1785150"
  },
  {
    "text": "can pass in inputs from other cells sure that was kind of cool um I'd never really thought about it before so",
    "start": "1785150",
    "end": "1791650"
  },
  {
    "text": "hopefully this is kind of encouraging that you can maybe take some of these ideas and take them into where you work right now okay so kind of wrap",
    "start": "1791650",
    "end": "1800730"
  },
  {
    "text": "up everything functional programming it's getting more popular a lot more",
    "start": "1800730",
    "end": "1806370"
  },
  {
    "text": "buzzwords but it's really been kind of a solid concept that's been around for quite a while doing functional",
    "start": "1806370",
    "end": "1813870"
  },
  {
    "text": "programming will make your code simpler smaller and usually a lot more reliable as well and these can work in nearly any",
    "start": "1813870",
    "end": "1820440"
  },
  {
    "text": "language at the point so pretty much every common language uses these and you",
    "start": "1820440",
    "end": "1825690"
  },
  {
    "text": "can start using them today so anybody gonna run out and start using one like",
    "start": "1825690",
    "end": "1830760"
  },
  {
    "text": "after the break one person cool no okay you can do when",
    "start": "1830760",
    "end": "1835800"
  },
  {
    "text": "you get back to work obviously um hi thanks for coming hopefully you've learned a few new things from this you",
    "start": "1835800",
    "end": "1842580"
  },
  {
    "text": "can always find me online you can email me at hello Sarah with you comm or you",
    "start": "1842580",
    "end": "1847710"
  },
  {
    "text": "can find me on Twitter at geeky girl Sarah and I'll be around for the rest of the week and all my slides are up at",
    "start": "1847710",
    "end": "1853470"
  },
  {
    "text": "geeky girl Center comm slash primer FPD so thank you for coming if you have any",
    "start": "1853470",
    "end": "1865380"
  },
  {
    "text": "questions you can come up",
    "start": "1865380",
    "end": "1868670"
  }
]