[
  {
    "text": "hello I'm on sorry I was getting my clock ready so don't go over hello everybody Welcome",
    "start": "6299",
    "end": "12960"
  },
  {
    "text": "uh this is what's new in C sharp 11. uh the title of this talk that I submitted",
    "start": "12960",
    "end": "19619"
  },
  {
    "text": "and the abstract that I submitted uh was mainly jokes about",
    "start": "19619",
    "end": "24720"
  },
  {
    "text": "the parameter null checking feature of C sharp 11 because there was all this drama about it and lots of people saw it",
    "start": "24720",
    "end": "31679"
  },
  {
    "text": "as the downfall of the language um and I was gonna talk about that",
    "start": "31679",
    "end": "36840"
  },
  {
    "text": "um probably make fun of it a bit but uh as you may have heard that's been canned uh as yeah well see I actually like this",
    "start": "36840",
    "end": "45719"
  },
  {
    "text": "feature but I'm not going to get into it um it is interesting though to still just talk very briefly about",
    "start": "45719",
    "end": "52260"
  },
  {
    "text": "well my position is it wasn't the sign of the downfall of the language now it",
    "start": "52260",
    "end": "57420"
  },
  {
    "text": "definitely isn't since it's not in but actually the fact that it's been removed is almost like proof because the team",
    "start": "57420",
    "end": "64140"
  },
  {
    "text": "actually did listen to all of the feedback and said yeah right fair enough but there is still some or one in",
    "start": "64140",
    "end": "69479"
  },
  {
    "text": "particular feature that you might think is maybe a sign of the Apocalypse",
    "start": "69479",
    "end": "74640"
  },
  {
    "text": "um but it is a good reminder to everybody that if you have strong opinions one way the other about any of",
    "start": "74640",
    "end": "80460"
  },
  {
    "text": "the features that I'm showing or that I've planned uh C sharp is open source you can provide feedback if you don't",
    "start": "80460",
    "end": "87780"
  },
  {
    "text": "want to do it on GitHub Twitter Works arguably better than GitHub but so what",
    "start": "87780",
    "end": "93420"
  },
  {
    "text": "we're actually going to do today is I'm just going to run through a bunch of the C sharp 11 features I'm going to focus",
    "start": "93420",
    "end": "98759"
  },
  {
    "text": "on the ones that you can use right now if you get Visual Studio 2022 preview",
    "start": "98759",
    "end": "103820"
  },
  {
    "text": "that's all I'm using for demos everything's going to work but there's like heaps of features so",
    "start": "103820",
    "end": "110399"
  },
  {
    "text": "I'm happy for this to be like as interactive as you like if you have questions yell out if I'm waffling on if",
    "start": "110399",
    "end": "116820"
  },
  {
    "text": "you want to get on to the next feature yell that out too uh we can somehow form a democracy I don't know uh we'll work",
    "start": "116820",
    "end": "123360"
  },
  {
    "text": "it out so the first uh feature we're going to talk about is raw string literals",
    "start": "123360",
    "end": "128700"
  },
  {
    "text": "um and so I have one slide per feature and then I'm just going to visual studio it up basically rostering literals so the",
    "start": "128700",
    "end": "136379"
  },
  {
    "text": "first two uh strings on the screen there is the I guess old way of doing things",
    "start": "136379",
    "end": "142020"
  },
  {
    "text": "um that you're all used to and essentially you can see that we have to escape quotes strings are delimited by",
    "start": "142020",
    "end": "147599"
  },
  {
    "text": "quotes therefore if you want to quote in your string you have to tell the compiler this is not the end of a string great",
    "start": "147599",
    "end": "153599"
  },
  {
    "text": "so the rostering literal is on the bottom and a rostering literal has one sort of headline feature you will never",
    "start": "153599",
    "end": "161700"
  },
  {
    "text": "have to escape any character that's the that's the broad thing so",
    "start": "161700",
    "end": "167040"
  },
  {
    "text": "let's talk about it a bit um actually let's go over to here",
    "start": "167040",
    "end": "174180"
  },
  {
    "text": "oops do here okay so raw string literals uh this uh this little tool here uh you",
    "start": "174180",
    "end": "182340"
  },
  {
    "text": "put in some code and then you put in two different alternate versions of the code and it shows you a diff of what they look like once they're decompiled",
    "start": "182340",
    "end": "188940"
  },
  {
    "text": "uh so if I scroll down here and we can see this is just to prove that it works the only difference here is the",
    "start": "188940",
    "end": "194519"
  },
  {
    "text": "exclamation mark So raw string literals having this string over two lines is",
    "start": "194519",
    "end": "199739"
  },
  {
    "text": "exactly the same as having this string over two lines it's exactly the strain is having this string with a new line in the middle there's nothing special about",
    "start": "199739",
    "end": "205980"
  },
  {
    "text": "how they output the whole idea is you just don't have to escape anything so if I come over to visual studio so a",
    "start": "205980",
    "end": "213000"
  },
  {
    "text": "rostering literally is three talking marks which is a lot I agree um",
    "start": "213000",
    "end": "219120"
  },
  {
    "text": "actually you know what it doesn't actually it can just be on one line that's totally fine if I want to go you",
    "start": "219120",
    "end": "225060"
  },
  {
    "text": "know hello like that um that looks a bit weird because it's",
    "start": "225060",
    "end": "230700"
  },
  {
    "text": "four now there we go um and so the idea is I can just put in my quotes as you can see there",
    "start": "230700",
    "end": "236220"
  },
  {
    "text": "um I can put in new lines if I make it a multi-line raw string literal which means the first line has to start on the",
    "start": "236220",
    "end": "243299"
  },
  {
    "text": "next line which is a bit weird but hopefully it'll all make sense in a second um I can put in tab characters I can put",
    "start": "243299",
    "end": "249420"
  },
  {
    "text": "in all the normal stuff that you would have to escape I don't have to escape this is the you know the feature",
    "start": "249420",
    "end": "256620"
  },
  {
    "text": "um the thing that's interesting about them is you'll notice that everything on this line if I just go you know make",
    "start": "256620",
    "end": "265259"
  },
  {
    "text": "some more lines everything on these subsequent lines here is indented by four spaces",
    "start": "265259",
    "end": "271020"
  },
  {
    "text": "one of the other features of rostering literals is it allows you to make your code look a bit nicer right if this was",
    "start": "271020",
    "end": "277320"
  },
  {
    "text": "a of a Verbatim string I would have to go um like this I can go hello",
    "start": "277320",
    "end": "285660"
  },
  {
    "text": "I have to expect my talking marks and I have to start putting the rest of this",
    "start": "285660",
    "end": "290880"
  },
  {
    "text": "string at character Zero right and so I mean that's not a big deal but",
    "start": "290880",
    "end": "297720"
  },
  {
    "text": "if you've got code that's indented already because of braces and whatever it kind of looks a bit funny",
    "start": "297720",
    "end": "303360"
  },
  {
    "text": "um I find this all the time in unit tests where I'm testing a bunch of data and I'm over here in my test and as soon",
    "start": "303360",
    "end": "310020"
  },
  {
    "text": "as I want a multi-line string I'm now back over here it's weird so raw spring literals sort of fix that and actually if you look zoom in see that vertical",
    "start": "310020",
    "end": "316620"
  },
  {
    "text": "line there in Visual Studio what that is doing that's showing you where the sort of",
    "start": "316620",
    "end": "324240"
  },
  {
    "text": "logical start of each line is not the actual start and if I just move this",
    "start": "324240",
    "end": "329699"
  },
  {
    "text": "sorry magnifier if I move this end quotes backwards and forwards you can see that line move right so that's the",
    "start": "329699",
    "end": "337440"
  },
  {
    "text": "end quotes Define where this this string logically starts everything before that is is ignored and so again that's that's",
    "start": "337440",
    "end": "344160"
  },
  {
    "text": "really cool as well for like unit testing the other cool thing about this for unit testing is let's say for",
    "start": "344160",
    "end": "351060"
  },
  {
    "text": "example you were testing a web service and you might want to have some Json so the really cool thing about this",
    "start": "351060",
    "end": "357419"
  },
  {
    "text": "I love is I can put in my test data",
    "start": "357419",
    "end": "363120"
  },
  {
    "text": "which is absolutely not valid um and the best thing about this is I can copy this test data and I can paste",
    "start": "363120",
    "end": "369300"
  },
  {
    "text": "it into Postman and I can see if my thing works or I can get a result from Postman and paste it into my code as an expected output and I don't do any more",
    "start": "369300",
    "end": "375840"
  },
  {
    "text": "work which is like saves you hours per day so that's really cool and you can see I don't have to escape my Escape my",
    "start": "375840",
    "end": "382440"
  },
  {
    "text": "quotes which is great the question then becomes well how do I make this like often what I want to do",
    "start": "382440",
    "end": "389100"
  },
  {
    "text": "here I don't want to hard code this name I want this to be uh some interpolation so how do I do",
    "start": "389100",
    "end": "395880"
  },
  {
    "text": "that and so the way I do that is I use a dollar sign to get an interpolated raw string right makes sense",
    "start": "395880",
    "end": "402840"
  },
  {
    "text": "but remember I said you don't have to escape anything right see my code has errors here because these braces are now",
    "start": "402840",
    "end": "409020"
  },
  {
    "text": "confusing in normal interpolated strings we escape them with double braces",
    "start": "409020",
    "end": "414840"
  },
  {
    "text": "with raw strings you don't have to escape anything so this is where we get a little bit crazy if we put two dollar",
    "start": "414840",
    "end": "422039"
  },
  {
    "text": "signs we're now telling the compiler that in interpolation use is two braces",
    "start": "422039",
    "end": "429900"
  },
  {
    "text": "so now I have a valid thing other than I haven't find name but I'm I trust you can understand that I haven't escaped",
    "start": "429900",
    "end": "436919"
  },
  {
    "text": "any characters from my data you can kind of say maybe I've escaped my my interpolation holes but you know that's",
    "start": "436919",
    "end": "443520"
  },
  {
    "text": "you can argue everyone so the reason this gets a bit crazy is how do we deal with quotes say I want",
    "start": "443520",
    "end": "450300"
  },
  {
    "text": "three quotes in my string right I want this to be this even though it's not",
    "start": "450300",
    "end": "456120"
  },
  {
    "text": "validation oh no I have a mistake how do we fix this well you make four",
    "start": "456120",
    "end": "462139"
  },
  {
    "text": "which actually hang on oh hang on see this is the editor has uh has helped me",
    "start": "462139",
    "end": "468120"
  },
  {
    "text": "here bye there we go so now my inter my raw string has four double quotes which",
    "start": "468120",
    "end": "474780"
  },
  {
    "text": "means I can use one two or three double quotes in my string without it and yes you can just keep going and eventually",
    "start": "474780",
    "end": "481919"
  },
  {
    "text": "the editor gives up trying to help you but um whoops oh hang on",
    "start": "481919",
    "end": "489380"
  },
  {
    "text": "yay this is valency sharp um and in fact so is this and I can just",
    "start": "490699",
    "end": "496740"
  },
  {
    "text": "keep going and I can just do this for an hour and that's part of the talk so you know hopefully you won't do this I'm",
    "start": "496740",
    "end": "503819"
  },
  {
    "text": "kind of surprised there isn't more feedback online about oh no this is the downfall of language because it can get silly but you know I suspect that most",
    "start": "503819",
    "end": "510300"
  },
  {
    "text": "people there'll be one dollar sign maybe two there'll be three quotes you know we'll all live happily ever after",
    "start": "510300",
    "end": "516779"
  },
  {
    "text": "um and that's basically roasting literals there's not much to them and in fact as far as uh like you can see here as far as the",
    "start": "516779",
    "end": "523320"
  },
  {
    "text": "decompilation goes like it's just a string there's nothing really special the one thing you can't do with them is",
    "start": "523320",
    "end": "531600"
  },
  {
    "text": "so there's no such thing as a Verbatim raw string because they are already raw right they're already",
    "start": "531600",
    "end": "537420"
  },
  {
    "text": "verbatim so the at sign is not valid but apart from that they're just strings um so yeah they're kind of cool the the",
    "start": "537420",
    "end": "543839"
  },
  {
    "text": "only in fact the biggest downside to royal spring literals and why maybe you don't want to adopt them everywhere is",
    "start": "543839",
    "end": "549120"
  },
  {
    "text": "that uh like github's code highlighting doesn't know about them yet so",
    "start": "549120",
    "end": "554160"
  },
  {
    "text": "um cool list patterns okay who likes patterns does anyone like patterns I love",
    "start": "554160",
    "end": "559500"
  },
  {
    "text": "patterns who's neutral doesn't want to raise their hand cool so list patterns are cool list patterns sorry I should talk",
    "start": "559500",
    "end": "565860"
  },
  {
    "text": "about this uh list patterns are like all other patterns um mainly a way to simplify code checks",
    "start": "565860",
    "end": "572820"
  },
  {
    "text": "so if we Imagine X in this case is an intera I guess",
    "start": "572820",
    "end": "579480"
  },
  {
    "text": "I can check you know is there at least three items in the list does it start with one does it end with ten I can do",
    "start": "579480",
    "end": "586019"
  },
  {
    "text": "that in that first line of code or I can do that in that second line of code and if you've never seen a pattern before or",
    "start": "586019",
    "end": "591120"
  },
  {
    "text": "if you've never seen a list pattern before yes it looks weird don't worry I will explain so the way this works",
    "start": "591120",
    "end": "598140"
  },
  {
    "text": "is let me get rid of all this let me pretend we get it into a",
    "start": "598140",
    "end": "606120"
  },
  {
    "text": "so the way this works is essentially what we're doing is we're saying",
    "start": "606120",
    "end": "611220"
  },
  {
    "text": "if my array looks like this so if my array X has three elements",
    "start": "611220",
    "end": "618720"
  },
  {
    "text": "first one's one say one's two that one's three that syntax is hopefully not too crazy right we can understand it that's",
    "start": "618720",
    "end": "624959"
  },
  {
    "text": "awkward and that's essentially a list pattern right that's not the simplest list pattern because I",
    "start": "624959",
    "end": "630240"
  },
  {
    "text": "guess the simplest would be if there's one element but that's what that's what this is doing where things get maybe a bit more",
    "start": "630240",
    "end": "635880"
  },
  {
    "text": "confusing though is each one of these things in my list pattern is itself or can be another pattern so I can say this",
    "start": "635880",
    "end": "644279"
  },
  {
    "text": "should be not null now it doesn't make sense for rinse but we'll ignore that right so now this is",
    "start": "644279",
    "end": "649740"
  },
  {
    "text": "saying hey here's an array of I guess I can make this we can shut the compiler up",
    "start": "649740",
    "end": "656700"
  },
  {
    "text": "um is my array three elements long first one's two second one first one's one second one's two third one I don't care",
    "start": "656700",
    "end": "662579"
  },
  {
    "text": "what it is as long as it's not null that might be useful um if I make this let's make this a",
    "start": "662579",
    "end": "669240"
  },
  {
    "text": "string array so I can do something like a",
    "start": "669240",
    "end": "674579"
  },
  {
    "text": "that's it but what if I want any why didn't that work oh because",
    "start": "674579",
    "end": "679980"
  },
  {
    "text": "there's a string around Char right right sorry um so that's cool",
    "start": "679980",
    "end": "686040"
  },
  {
    "text": "what if I don't know how long I want my rate to be well that's where I can use dot dot which is the range syntax if you",
    "start": "686040",
    "end": "692160"
  },
  {
    "text": "haven't seen it before from C sharp ten nine something and what this says is",
    "start": "692160",
    "end": "697740"
  },
  {
    "text": "there at least two elements in my array the first one being a the last one being Z could be any number in the middle they",
    "start": "697740",
    "end": "704640"
  },
  {
    "text": "could be anything um and in fact what I can do I can say",
    "start": "704640",
    "end": "710279"
  },
  {
    "text": "is there any number of elements in the middle of the A and the Z also give me",
    "start": "710279",
    "end": "715740"
  },
  {
    "text": "them into this variable called subarray and you can see that's a Char array so I can pull out bits of my array and",
    "start": "715740",
    "end": "722399"
  },
  {
    "text": "work with them as well as checking boundaries one thing that I quite like",
    "start": "722399",
    "end": "727620"
  },
  {
    "text": "with this because it kind of gets a bit funny to talk about this in the abstract sense",
    "start": "727620",
    "end": "733200"
  },
  {
    "text": "let me just write a little sample here I've actually used this in anger and I think it's quite effective",
    "start": "733200",
    "end": "739500"
  },
  {
    "text": "so if I split this path into elements right",
    "start": "739500",
    "end": "746100"
  },
  {
    "text": "list patterns is a really cool way to sort of analyze the path and maybe uh",
    "start": "746100",
    "end": "752820"
  },
  {
    "text": "pull stuff out of it so for example I don't care where my software is installed so I'm going to start with the",
    "start": "752820",
    "end": "757980"
  },
  {
    "text": "dot dot but it has to be installed in a you know a directory called when",
    "start": "757980",
    "end": "763139"
  },
  {
    "text": "yourself and then from there I want to pull out the components and",
    "start": "763139",
    "end": "770100"
  },
  {
    "text": "I don't know let's do that right what this is saying is hey is the path",
    "start": "770100",
    "end": "776220"
  },
  {
    "text": "given to me is it a path I recognize but I don't care how it starts with which is kind of nice",
    "start": "776220",
    "end": "782040"
  },
  {
    "text": "and then am I in the component subfolder and then have I been given the path to a",
    "start": "782040",
    "end": "787200"
  },
  {
    "text": "component and if so what is the name of that component and this VAR actually is probably",
    "start": "787200",
    "end": "792480"
  },
  {
    "text": "probably what you want to do is do something like this to say it shouldn't be null just in case although I know you",
    "start": "792480",
    "end": "797820"
  },
  {
    "text": "know string split's not going to put in any nulls but my way so you can sort of do some like parsing as well as your",
    "start": "797820",
    "end": "804300"
  },
  {
    "text": "checks which is interesting and then now I can just you know party on name it's just a string I can do what I want",
    "start": "804300",
    "end": "810360"
  },
  {
    "text": "um so it gets kind of cool if we go into sharp lab",
    "start": "810360",
    "end": "816320"
  },
  {
    "text": "um can have a look at how this works uh let's go with a string",
    "start": "816360",
    "end": "822800"
  },
  {
    "text": "so with a string which you can sort of treat as a Char array so I can do my a dot dot Z",
    "start": "823260",
    "end": "833639"
  },
  {
    "text": "as we can see on the right what the compiler is actually doing so the first thing is doing is a length check right we've specified two elements so we know",
    "start": "833639",
    "end": "840240"
  },
  {
    "text": "it has to be at least two notice it's greater than or equal to two not three so the dot dot could be empty",
    "start": "840240",
    "end": "847980"
  },
  {
    "text": "right and then we're checking if it starts with Asus if we wanted to make it so that hey it has to have at least one",
    "start": "847980",
    "end": "853380"
  },
  {
    "text": "thing between the A and Z a and the Z we can do that by adding another pattern in this case the discard pattern because I don't want",
    "start": "853380",
    "end": "859680"
  },
  {
    "text": "to actually capture that value I just want to make sure there's at least one thing so now our length check is for three",
    "start": "859680",
    "end": "866100"
  },
  {
    "text": "and then you know I can do all sorts of things if I make this a",
    "start": "866100",
    "end": "871860"
  },
  {
    "text": "a list of strings then make these into Strings",
    "start": "871860",
    "end": "879300"
  },
  {
    "text": "oops no thank you",
    "start": "879300",
    "end": "885660"
  },
  {
    "text": "there we go um so I can I can do things like well this is a",
    "start": "885660",
    "end": "891540"
  },
  {
    "text": "string so I want to make sure the length is greater than zero so this is a property pattern inside a",
    "start": "891540",
    "end": "897180"
  },
  {
    "text": "list pattern and you can see down here so now whoops the compiler check the account properties have length property",
    "start": "897180",
    "end": "903180"
  },
  {
    "text": "so it knows what's going on it's pulling out the bits of the string it's checking them for length like it you know this is saving you that code",
    "start": "903180",
    "end": "910500"
  },
  {
    "text": "essentially so it can be a bit confusing at first but once you get used to patterns",
    "start": "910500",
    "end": "916139"
  },
  {
    "text": "um they can be really powerful they can also be really confusing and it's definitely a use sparingly type thing",
    "start": "916139",
    "end": "923959"
  },
  {
    "text": "um so the scope of the VAR is interesting um if I do",
    "start": "926279",
    "end": "933120"
  },
  {
    "text": "so we should be able to see it here uh no I probably need to use it hang on",
    "start": "933120",
    "end": "939720"
  },
  {
    "text": "compilers being too smart so",
    "start": "939720",
    "end": "944760"
  },
  {
    "text": "one of the reasons this has go-to's in it which obviously you would never write because you'd be you know it'll be used",
    "start": "944760",
    "end": "950880"
  },
  {
    "text": "on Twitter um one of the reasons for this is to capture that variable so we can see here",
    "start": "950880",
    "end": "956459"
  },
  {
    "text": "this this text too is essentially my X that I defined there and it's defined at the very top so I can",
    "start": "956459",
    "end": "962880"
  },
  {
    "text": "uh I think I can use it out here as well or my inside if no okay so it's on the",
    "start": "962880",
    "end": "968699"
  },
  {
    "text": "inside the f okay that's interesting so for out statements that's",
    "start": "968699",
    "end": "975180"
  },
  {
    "text": "not how that works which is interesting um but yeah so in inside here is",
    "start": "975180",
    "end": "981240"
  },
  {
    "text": "normally where you'd use it which actually that does make sense because then you can do it without conflicting names",
    "start": "981240",
    "end": "987060"
  },
  {
    "text": "um but yeah all of that stuff you know like uh for example like if I change this to",
    "start": "987060",
    "end": "992279"
  },
  {
    "text": "objects I can make this string uh yeah length doesn't work now",
    "start": "992279",
    "end": "998579"
  },
  {
    "text": "all of the different types of patterns all work within there so type patterns and property patterns and whatever",
    "start": "998579",
    "end": "1004040"
  },
  {
    "text": "um yeah cool definitely spends any",
    "start": "1004040",
    "end": "1009560"
  },
  {
    "text": "cool okay uh UT effects ringless rules I'm probably not going to bother demoing",
    "start": "1009560",
    "end": "1015860"
  },
  {
    "text": "this unless someone wants me to because this is relatively niche but you can do",
    "start": "1015860",
    "end": "1020899"
  },
  {
    "text": "it now because it it's in the yes um what this is this used to be a little",
    "start": "1020899",
    "end": "1026720"
  },
  {
    "text": "bit more um like common a scenario but then there was a compiler change a language change",
    "start": "1026720",
    "end": "1032480"
  },
  {
    "text": "a couple of weeks ago so what this is is a way of specifying binary data but it",
    "start": "1032480",
    "end": "1038480"
  },
  {
    "text": "looks nicer it's called utf-8 string literals but my recommendation is not to think of it as",
    "start": "1038480",
    "end": "1044959"
  },
  {
    "text": "a string literal because it's not and actually I will I will demo that because it's kind of interesting so the way you",
    "start": "1044959",
    "end": "1052820"
  },
  {
    "text": "do this is you just use the u8 suffix on a string",
    "start": "1052820",
    "end": "1058539"
  },
  {
    "text": "and that s variable there is binary data",
    "start": "1058700",
    "end": "1063919"
  },
  {
    "text": "that represents the utf-8 encoding of that string which is you know 65 66 67",
    "start": "1063919",
    "end": "1069919"
  },
  {
    "text": "if anyone knows asking the interesting thing about this is that if I Mouse over VAR and if you can read the relatively",
    "start": "1069919",
    "end": "1075500"
  },
  {
    "text": "small text it's not a string um don't think of this as a string you can't use string operations on it it's a",
    "start": "1075500",
    "end": "1082039"
  },
  {
    "text": "read-only span the reason it's a read-only span is performance it used to be in the first",
    "start": "1082039",
    "end": "1088100"
  },
  {
    "text": "versions of this feature that would have been a byte array and that's maybe a bit more common that you might",
    "start": "1088100",
    "end": "1094700"
  },
  {
    "text": "have a byte array in your code and then it might be nicer to replace it with a utf-8 string",
    "start": "1094700",
    "end": "1100220"
  },
  {
    "text": "this is a this is sort of a language request that comes from asp.net because",
    "start": "1100220",
    "end": "1106600"
  },
  {
    "text": "all of their headers like you know HTTP headers when they're passing them Etc they check you know does this start with",
    "start": "1106600",
    "end": "1113539"
  },
  {
    "text": "HTTP one or two or whatever it is all of that is utf-8 data and for performance they don't treat it as strings they",
    "start": "1113539",
    "end": "1119840"
  },
  {
    "text": "treat it as byte arrays as binary data so they do lots of comparisons for is this a known essentially is this a known",
    "start": "1119840",
    "end": "1126020"
  },
  {
    "text": "string but it's actually is this a known byte array and so then the code doesn't look very nice because it's got lots of",
    "start": "1126020",
    "end": "1132140"
  },
  {
    "text": "magic numbers that you know with a comment that says trust me this is the word you know whatever so this is just a way of encoding binary",
    "start": "1132140",
    "end": "1139280"
  },
  {
    "text": "data it is not a string um you can get back to a byte array by",
    "start": "1139280",
    "end": "1144860"
  },
  {
    "text": "calling two array on the read-only span the way this works is actually really interesting uh if we jump into sharp lab",
    "start": "1144860",
    "end": "1153980"
  },
  {
    "text": "well it's interesting if you like that sort of thing um so the way your string actually gets",
    "start": "1153980",
    "end": "1160220"
  },
  {
    "text": "encoded directly into the dll this private static read on the int blah",
    "start": "1160220",
    "end": "1166340"
  },
  {
    "text": "blah blah blah that is then not supported it is a read-only span over the memory from your actual dll so when",
    "start": "1166340",
    "end": "1173299"
  },
  {
    "text": "when we say this is for Perth like this is there is no allocations here at all this is reading an array of memory that",
    "start": "1173299",
    "end": "1178940"
  },
  {
    "text": "is directly coming from your assembly which is kind of cool just not in everybody's domain of what their program",
    "start": "1178940",
    "end": "1186620"
  },
  {
    "text": "has to do well I don't know what happened there okay",
    "start": "1186620",
    "end": "1191720"
  },
  {
    "text": "um so yeah that's UTF right roasting little uh I'm sorry there is also utf-8c utf-8 raw string literals",
    "start": "1191720",
    "end": "1199160"
  },
  {
    "text": "um there's not much with them if you if you need them they're good if you don't you'll probably never see them",
    "start": "1199160",
    "end": "1205640"
  },
  {
    "text": "all right required members this is probably the one that I would imagine most of you will use and maybe will be",
    "start": "1205640",
    "end": "1212840"
  },
  {
    "text": "good uh so I'll probably talk about this a bit more than the rest I think 20 minutes in those that's right",
    "start": "1212840",
    "end": "1219740"
  },
  {
    "text": "required numbers Okay so required members is you can now Mark a",
    "start": "1219740",
    "end": "1224780"
  },
  {
    "text": "member as required essentially so in the old days if we wanted to",
    "start": "1224780",
    "end": "1231020"
  },
  {
    "text": "define a class called person with a first name and we had to require people to provide a first name we'd have to use",
    "start": "1231020",
    "end": "1237679"
  },
  {
    "text": "a Constructor it's not a huge price to pay but you have to",
    "start": "1237679",
    "end": "1243620"
  },
  {
    "text": "um if we let me just create that class so Constructors you know they're not they're not a bad thing but over the",
    "start": "1243620",
    "end": "1250460"
  },
  {
    "text": "years C sharp has sort of been moving away well not away from Constructors but providing other ways to do these things",
    "start": "1250460",
    "end": "1256880"
  },
  {
    "text": "so for example we have in it only properties now so I can say this this first name",
    "start": "1256880",
    "end": "1264760"
  },
  {
    "text": "it can only be set when you're creating this object it can't be set afterwards right it's immutable we also have",
    "start": "1265160",
    "end": "1270380"
  },
  {
    "text": "nullable so I can say that this middle name is essentially optional",
    "start": "1270380",
    "end": "1276380"
  },
  {
    "text": "you can leave it unset and string last name and if you've ever done this",
    "start": "1276380",
    "end": "1283460"
  },
  {
    "text": "you're probably familiar with These Warnings I've got here which is nullable analysis saying hey you said first name",
    "start": "1283460",
    "end": "1289760"
  },
  {
    "text": "couldn't be null but you haven't provided a value for it you've got to fix that right because",
    "start": "1289760",
    "end": "1295400"
  },
  {
    "text": "otherwise someone can go new person oh yeah appear",
    "start": "1295400",
    "end": "1301640"
  },
  {
    "text": "and if I go P DOT first name dot two string I'm going to get a null reference exception",
    "start": "1301640",
    "end": "1307460"
  },
  {
    "text": "if I did that on middle name well I still get no reference exception",
    "start": "1307460",
    "end": "1312740"
  },
  {
    "text": "but the compiler is at least warning me hey this could be null with first name I've said it's not null",
    "start": "1312740",
    "end": "1318140"
  },
  {
    "text": "but I haven't done anything about actually making that no so in the old days what we used to do is we'd probably do that maybe to say yeah yeah just shut",
    "start": "1318140",
    "end": "1325880"
  },
  {
    "text": "up compiler that's what I do and that's cool like if you've got this",
    "start": "1325880",
    "end": "1331100"
  },
  {
    "text": "data coming from you know Json serialization and you know that that first name is definitely always going to",
    "start": "1331100",
    "end": "1336200"
  },
  {
    "text": "be there then you know go for it it's your code compiler is only suggesting um but it's a bit annoying so what the",
    "start": "1336200",
    "end": "1342500"
  },
  {
    "text": "required property does the way I like to think about it is it shifts the blame you'll notice the",
    "start": "1342500",
    "end": "1348679"
  },
  {
    "text": "squiggle has gone from first name in my class but it's now on person in my",
    "start": "1348679",
    "end": "1354380"
  },
  {
    "text": "construction of the person because rather than the class author having to supply a first name the required keyword",
    "start": "1354380",
    "end": "1361640"
  },
  {
    "text": "is said whoever creates this person they have to provide a first name and so if I",
    "start": "1361640",
    "end": "1367159"
  },
  {
    "text": "do that in whoops if I do that here",
    "start": "1367159",
    "end": "1373880"
  },
  {
    "text": "Maya's go away I'm now creating a well most of them I'm now creating a person I'm providing the",
    "start": "1373880",
    "end": "1380600"
  },
  {
    "text": "first name so the compiler is happy with my Constructor use the property has required which means the compiler knows",
    "start": "1380600",
    "end": "1386659"
  },
  {
    "text": "that whoever creates this will have to supply first name we're all good uh last name I can do the same thing",
    "start": "1386659",
    "end": "1393380"
  },
  {
    "text": "it's now back to errors we have an error specific to last name because it knows I'm not setting last name",
    "start": "1393380",
    "end": "1399080"
  },
  {
    "text": "so this to me kind of rounds out that",
    "start": "1399080",
    "end": "1405200"
  },
  {
    "text": "nullable I mean not the nullable feature but you know that that way that you define",
    "start": "1405200",
    "end": "1410240"
  },
  {
    "text": "classes with I want to use null ability I want to use object initializers or records or whatever you know the newer",
    "start": "1410240",
    "end": "1416299"
  },
  {
    "text": "style of C sharp maybe um but I don't have to fight the compiler",
    "start": "1416299",
    "end": "1421820"
  },
  {
    "text": "and still use a Constructor of course so if I create a Constructor that takes",
    "start": "1421820",
    "end": "1427039"
  },
  {
    "text": "in these two names for example first name equals first",
    "start": "1427039",
    "end": "1434620"
  },
  {
    "text": "at last so I can still create a Constructor and that looks cool but something interesting uh well sorry",
    "start": "1435860",
    "end": "1443240"
  },
  {
    "text": "that's just saying there's no Constructor so I need a I need another Constructor there we go",
    "start": "1443240",
    "end": "1448340"
  },
  {
    "text": "so this is all cool and there's no errors but something interesting happens here if we try to use this Constructor so if I create another person",
    "start": "1448340",
    "end": "1456039"
  },
  {
    "text": "whoops we get an error and this is a bit weird this is the the",
    "start": "1456500",
    "end": "1462799"
  },
  {
    "text": "gotcha with required properties and what this says is you haven't provided a value for first name and last name and that's a bit weird the reason is",
    "start": "1462799",
    "end": "1470659"
  },
  {
    "text": "essentially as with nullable analysis and most things in general the compiler doesn't do deep introspection of your",
    "start": "1470659",
    "end": "1477500"
  },
  {
    "text": "code so if you like you know draw a horizontal line in your mind here at line 11.",
    "start": "1477500",
    "end": "1482840"
  },
  {
    "text": "the compiler is not going to look into that Constructor I'm calling and see what it does because that could be",
    "start": "1482840",
    "end": "1488299"
  },
  {
    "text": "disastrous right that could call another method it could use reflection it could do whatever it does it could hit a database the compiler can't do that so",
    "start": "1488299",
    "end": "1496280"
  },
  {
    "text": "this is basically the honor System the way this works or the way we can make this work is I can add an attribute to",
    "start": "1496280",
    "end": "1502700"
  },
  {
    "text": "this to this Constructor called sets required members which just tells the",
    "start": "1502700",
    "end": "1507740"
  },
  {
    "text": "compiler if anyone calls this Constructor don't error it doesn't do any checks right if I",
    "start": "1507740",
    "end": "1514100"
  },
  {
    "text": "remove this still no errors everyone's happy except for oh actually maybe not",
    "start": "1514100",
    "end": "1519740"
  },
  {
    "text": "oh there you go oh right so now I'm back to my nullable warning yeah okay well so if we didn't have a nullable right the",
    "start": "1519740",
    "end": "1526640"
  },
  {
    "text": "required members part of the compiler would not complain about that which is a bit weird",
    "start": "1526640",
    "end": "1531799"
  },
  {
    "text": "um there was a question I saw on somewhere a Discord last night uh about",
    "start": "1531799",
    "end": "1537980"
  },
  {
    "text": "this which is why do we need this if we have nullable right I'm said here that middle name is not is not required I've",
    "start": "1537980",
    "end": "1545000"
  },
  {
    "text": "said that first name is required by virtue of making them uh not null if I create the Constructor you know why do",
    "start": "1545000",
    "end": "1551779"
  },
  {
    "text": "we need this essentially the answer or my answer I don't know about any official answers is",
    "start": "1551779",
    "end": "1557000"
  },
  {
    "text": "a you might not like to use Constructors they sometimes get annoying you know you can have lots and lots of properties",
    "start": "1557000",
    "end": "1563059"
  },
  {
    "text": "sometimes that's a pain um but B you have to think about this feature",
    "start": "1563059",
    "end": "1568460"
  },
  {
    "text": "completely separately from null ability so to me it closes a gap with nullability but there is absolutely",
    "start": "1568460",
    "end": "1574700"
  },
  {
    "text": "nothing wrong with me saying that this middle name is required just because it's not nullable doesn't",
    "start": "1574700",
    "end": "1581240"
  },
  {
    "text": "mean I can't make it required and I can totally just go here and I can say yeah it's not that's fine if null is a valid",
    "start": "1581240",
    "end": "1586880"
  },
  {
    "text": "value that's one thing and if someone has to specify a value for middle name that's a completely separate thing that",
    "start": "1586880",
    "end": "1593659"
  },
  {
    "text": "value I specify could be null so again maybe for your code",
    "start": "1593659",
    "end": "1599779"
  },
  {
    "text": "that's not relevant and if you trust where your data is coming from you don't need to worry but",
    "start": "1599779",
    "end": "1605260"
  },
  {
    "text": "the whole story any questions yes yes spins so you don't need no ability enabled for the required",
    "start": "1605299",
    "end": "1612520"
  },
  {
    "text": "so the completely completely separate features so if I",
    "start": "1612520",
    "end": "1617659"
  },
  {
    "text": "um remove this so so if I remove this and make middle name non-null right this is now giving",
    "start": "1617659",
    "end": "1624980"
  },
  {
    "text": "me null ability squigglies if I disable",
    "start": "1624980",
    "end": "1630620"
  },
  {
    "text": "nullability they go away but all my required checks would still be in place",
    "start": "1630620",
    "end": "1636500"
  },
  {
    "text": "so this is still complaining about first name so they're completely separate separate features and this is generally there's a",
    "start": "1636500",
    "end": "1644600"
  },
  {
    "text": "few features of c-sharp where this sort of comes out where if you look at these three features together",
    "start": "1644600",
    "end": "1650720"
  },
  {
    "text": "it's one of them is not required but essentially you can't look at them together right the compiler team has to",
    "start": "1650720",
    "end": "1657320"
  },
  {
    "text": "make each Feature A A constrained thing um",
    "start": "1657320",
    "end": "1662539"
  },
  {
    "text": "is there any more questions yes throwing some Jason and",
    "start": "1662539",
    "end": "1670480"
  },
  {
    "text": "good question yeah oops I just copied and celebrated yes so this is so much like null ability",
    "start": "1671000",
    "end": "1678320"
  },
  {
    "text": "this is just a compile time feature um I",
    "start": "1678320",
    "end": "1685419"
  },
  {
    "text": "oh okay I have to fake sharp lab is on.net6 and this requires dotnet7 so I",
    "start": "1685640",
    "end": "1691940"
  },
  {
    "text": "just have to fake some.net seven types won't be a second um",
    "start": "1691940",
    "end": "1697419"
  },
  {
    "text": "yeah to answer your question um yeah so this is just compile time so",
    "start": "1697419",
    "end": "1702440"
  },
  {
    "text": "Json deserialization reflection any of those things they'll happily work but then that's true of nullable as well",
    "start": "1702440",
    "end": "1708440"
  },
  {
    "text": "right you can have a nullable property set it null via reflection no worries um",
    "start": "1708440",
    "end": "1713900"
  },
  {
    "text": "what am I doing creating an attribute so it is it is compile time only",
    "start": "1713900",
    "end": "1719480"
  },
  {
    "text": "which is something to sort of be aware of you do need to know where your data is coming from",
    "start": "1719480",
    "end": "1725840"
  },
  {
    "text": "um the only thing that well the the thing the only other thing",
    "start": "1725840",
    "end": "1731900"
  },
  {
    "text": "that's interesting there is the if you've got a generic method and use the new constraint",
    "start": "1731900",
    "end": "1737480"
  },
  {
    "text": "um that one because like that's not runtime that's compile time so the compiler enforces that in in the",
    "start": "1737480",
    "end": "1743960"
  },
  {
    "text": "sense that if you have any required properties then your class can't conform",
    "start": "1743960",
    "end": "1749480"
  },
  {
    "text": "to that new constraint so depending on how you're doing reflection or whatever it could be okay",
    "start": "1749480",
    "end": "1756740"
  },
  {
    "text": "right if you've got a generic method that uses activated or create instance you probably can't call that generic",
    "start": "1756740",
    "end": "1761899"
  },
  {
    "text": "method anymore but you can call activator.create instance if you try hard enough let me just create this one more",
    "start": "1761899",
    "end": "1768440"
  },
  {
    "text": "attribute and I can show you how this works",
    "start": "1768440",
    "end": "1772539"
  },
  {
    "text": "and this one needs a Constructor",
    "start": "1774080",
    "end": "1778480"
  },
  {
    "text": "oh thank you we have.net 7 everybody",
    "start": "1783140",
    "end": "1788299"
  },
  {
    "text": "um you thought making a framework was hard so what can we see here so there's a couple of things",
    "start": "1788299",
    "end": "1793700"
  },
  {
    "text": "you know since we're talking about reflection anyway any class that has any required members will have this required member attribute uh any required member",
    "start": "1793700",
    "end": "1800899"
  },
  {
    "text": "obviously we'll have this required member attribute um the",
    "start": "1800899",
    "end": "1806320"
  },
  {
    "text": "Constructor gets this compiler features required and an obsolete attribute this",
    "start": "1806320",
    "end": "1812539"
  },
  {
    "text": "is a bit weird and in the weeds of compilers which maybe you don't care about but here we go this is essentially",
    "start": "1812539",
    "end": "1817640"
  },
  {
    "text": "so old compilers will not create not let you create an instance of this",
    "start": "1817640",
    "end": "1822860"
  },
  {
    "text": "class so the obsolete attribute causes an old compiler to error because it's got a property on the end here that says",
    "start": "1822860",
    "end": "1829580"
  },
  {
    "text": "error true so if you use this from a old project you try to call a library that",
    "start": "1829580",
    "end": "1834860"
  },
  {
    "text": "has required members your compiler will error and say hey I don't know what this means something could go wrong",
    "start": "1834860",
    "end": "1841460"
  },
  {
    "text": "the compiler features required is then the formalization of doing that instead of using the obsolete method the",
    "start": "1841460",
    "end": "1847940"
  },
  {
    "text": "compiler is going to move to this new attribute but the compiler is only going to move to that so all of the old compilers",
    "start": "1847940",
    "end": "1854179"
  },
  {
    "text": "don't support it yet so now we we're in this transition phase where we do both um but essentially that's that's all",
    "start": "1854179",
    "end": "1859580"
  },
  {
    "text": "there is to it really you get this little attribute and that's all there is so if you're referencing a nougat",
    "start": "1859580",
    "end": "1864679"
  },
  {
    "text": "package and they have required members the compiler will look at these attributes and all the same things will work this is It's compiler only not",
    "start": "1864679",
    "end": "1871700"
  },
  {
    "text": "runtime but that doesn't mean it's limited just to source code if that makes sense",
    "start": "1871700",
    "end": "1877120"
  },
  {
    "text": "foreign",
    "start": "1877820",
    "end": "1880000"
  },
  {
    "text": "static abstract interface members this one's interesting",
    "start": "1883960",
    "end": "1889760"
  },
  {
    "text": "um because this one is a c-sharp language feature that is somewhat",
    "start": "1889760",
    "end": "1895159"
  },
  {
    "text": "I don't know whether it's relevant but it's come somewhat small but there's a whole runtime element to this as well so",
    "start": "1895159",
    "end": "1901600"
  },
  {
    "text": "what this is is basically what it says on the tin which is interfaces can now have static abstract methods",
    "start": "1901600",
    "end": "1908779"
  },
  {
    "text": "um previously you know interfaces well the abstract is kind of redundant but unfortunately because of previous",
    "start": "1908779",
    "end": "1914779"
  },
  {
    "text": "c-sharp language versions you have to have it because you could always have static members on interfaces um",
    "start": "1914779",
    "end": "1920480"
  },
  {
    "text": "but essentially I have an interface here called I animal it says anyone who implements eye animal",
    "start": "1920480",
    "end": "1926179"
  },
  {
    "text": "eye animal has to have a property called can walk that's not exciting but",
    "start": "1926179",
    "end": "1931340"
  },
  {
    "text": "in this case the property is static cool the way this were or the where you",
    "start": "1931340",
    "end": "1938600"
  },
  {
    "text": "want to use this the way this makes sense is in generic types so my method",
    "start": "1938600",
    "end": "1943940"
  },
  {
    "text": "at the bottom there is a generic type takes in a t we don't know what T is but",
    "start": "1943940",
    "end": "1949399"
  },
  {
    "text": "we say that t has to be at the very least it has to be an i animal and so once we know that we can now call this",
    "start": "1949399",
    "end": "1956240"
  },
  {
    "text": "can walk property on T whatever T is Right might be a dog might be a cat whatever we can call it on T so normally",
    "start": "1956240",
    "end": "1963020"
  },
  {
    "text": "you would need to do dog dot can walk cat dot can work obviously in order to type out the word dog you need to know",
    "start": "1963020",
    "end": "1968539"
  },
  {
    "text": "what type it is if you have a generic method you don't know what type it is so that's the feature and that may or",
    "start": "1968539",
    "end": "1975500"
  },
  {
    "text": "may not be useful to you um there's lots of advantages to this uh it's pretty common in interfaces to have",
    "start": "1975500",
    "end": "1982220"
  },
  {
    "text": "properties that sort of represent data about the type like this can walk for",
    "start": "1982220",
    "end": "1987799"
  },
  {
    "text": "example but because it's not an interface you end up having to Define it as an instance property so then your",
    "start": "1987799",
    "end": "1993080"
  },
  {
    "text": "generic method has to create an instance of it or get given one so that it can call these things so if you can do that statically then you know that's a little",
    "start": "1993080",
    "end": "1999380"
  },
  {
    "text": "bit of a perf gain you might not create so many objects and things but where this is going to have the",
    "start": "1999380",
    "end": "2005320"
  },
  {
    "text": "biggest impact on everybody is that the runtime.net7 has adopted this and this",
    "start": "2005320",
    "end": "2012940"
  },
  {
    "text": "is the foundation of the new generic math feature that you might have heard about which I'm not going to talk about even though it's not a c-sharp feature I",
    "start": "2012940",
    "end": "2020260"
  },
  {
    "text": "don't care and basically what what are we going to do let's add let's write an ad method",
    "start": "2020260",
    "end": "2025659"
  },
  {
    "text": "so we're going to add two numbers together we've got to return a plus b great",
    "start": "2025659",
    "end": "2032580"
  },
  {
    "text": "I don't even know what that is oh it's not called yeah well I'm fixing that",
    "start": "2032580",
    "end": "2038860"
  },
  {
    "text": "um there we go we're adding two numbers together great wonderful um this is cool we can all write this code but",
    "start": "2038860",
    "end": "2045399"
  },
  {
    "text": "it's not very flexible because I can't add 2 to 3.2 and so I can go in here and I can make these all decimals",
    "start": "2045399",
    "end": "2052480"
  },
  {
    "text": "and now this code compiles oh actually probably doesn't because I probably need to tell it it's a decimal so that's annoying I guess if I made them floats",
    "start": "2052480",
    "end": "2059980"
  },
  {
    "text": "then that would be okay maybe still need to put an F okay open F",
    "start": "2059980",
    "end": "2066158"
  },
  {
    "text": "anyway um this would then presumably the answer would be 5.20001",
    "start": "2066159",
    "end": "2072638"
  },
  {
    "text": "um but so this is you know it's a bit annoying right I'm sort of limited what I really want to do is run add method I",
    "start": "2072639",
    "end": "2079118"
  },
  {
    "text": "don't actually care about data types um you might have your own custom integer type maybe maybe you're fancy",
    "start": "2079119",
    "end": "2085780"
  },
  {
    "text": "so what we can do is we can make this generic this is why generics were invented oh",
    "start": "2085780",
    "end": "2091540"
  },
  {
    "text": "keyboard use is hard so I can make this generic this all",
    "start": "2091540",
    "end": "2096820"
  },
  {
    "text": "works except this call doesn't work anymore because how do we add two random types together",
    "start": "2096820",
    "end": "2103119"
  },
  {
    "text": "don't know fortunately it turns out that plus in C sharp is not really a plus it's actually",
    "start": "2103119",
    "end": "2109180"
  },
  {
    "text": "a method call and it's a method call called op underscore Edition and it turns out it's static",
    "start": "2109180",
    "end": "2115540"
  },
  {
    "text": "the main reason this whole language feature exists is because",
    "start": "2115540",
    "end": "2120700"
  },
  {
    "text": "um well a man named Tanner wanted wanted to be able to call static methods so if I",
    "start": "2120700",
    "end": "2127240"
  },
  {
    "text": "say hey T has to be a number my addition operator now works now I have a generic ad method it's that",
    "start": "2127240",
    "end": "2134140"
  },
  {
    "text": "easy folks um this is all because this eye number defines a an operator which happens to",
    "start": "2134140",
    "end": "2140859"
  },
  {
    "text": "be a static method that adds two numbers together the interesting thing is when we go to",
    "start": "2140859",
    "end": "2146560"
  },
  {
    "text": "the look at I number um so our number defines a bunch of stuff which is cool",
    "start": "2146560",
    "end": "2153040"
  },
  {
    "text": "but most importantly it implements a bunch of interfaces it actually implements like a whole lot of",
    "start": "2153040",
    "end": "2159700"
  },
  {
    "text": "interfaces like a really a lot and this is cool there's a little Quirk here with",
    "start": "2159700",
    "end": "2165220"
  },
  {
    "text": "all of these ones the runtime defines which is all of the t's have to be an",
    "start": "2165220",
    "end": "2170560"
  },
  {
    "text": "implementation of itself with itself as the like generic it gets a bit funny but the compiler works it out so who cares",
    "start": "2170560",
    "end": "2176680"
  },
  {
    "text": "that's the only thing your symptoms is like what the anyway um but this is cool and if you have some time you know in your free time looking",
    "start": "2176680",
    "end": "2183579"
  },
  {
    "text": "through this is is interesting there's some interesting little things here so in particular if we go to",
    "start": "2183579",
    "end": "2191200"
  },
  {
    "text": "addition I believe yeah so I number implements I Edition operators and guess",
    "start": "2191200",
    "end": "2197980"
  },
  {
    "text": "what here's our static abstract method right this is the plus operator that I'm calling from my generic method the",
    "start": "2197980",
    "end": "2203140"
  },
  {
    "text": "reason this works is I'm essentially you know it doesn't look like this in C sharp but I'm kind of",
    "start": "2203140",
    "end": "2209260"
  },
  {
    "text": "doing this um yeah",
    "start": "2209260",
    "end": "2214599"
  },
  {
    "text": "well as I say it doesn't work in C sharp but that's what I'm doing right this is just a static method call this little thing here",
    "start": "2214599",
    "end": "2220780"
  },
  {
    "text": "um so there's a bunch of these interfaces now in the runtime that enable all this",
    "start": "2220780",
    "end": "2227140"
  },
  {
    "text": "support and that's cool we can do things like um hands up in the room if you've ever",
    "start": "2227140",
    "end": "2232420"
  },
  {
    "text": "re-implemented math hello Aaron um so we can do things like you know",
    "start": "2232420",
    "end": "2238240"
  },
  {
    "text": "uh T dot identity no infinite zero",
    "start": "2238240",
    "end": "2243400"
  },
  {
    "text": "this is what zero is right and I mean I can even you know I can create a class",
    "start": "2243400",
    "end": "2248500"
  },
  {
    "text": "here and I can say yeah I Implement I number and and I can go uh public static goo",
    "start": "2248500",
    "end": "2255640"
  },
  {
    "text": "zero equals I don't know there you go there's zero like you can you can",
    "start": "2255640",
    "end": "2261280"
  },
  {
    "text": "Implement these things as well if you want there's a there's a lot to implement obviously in this um",
    "start": "2261280",
    "end": "2266800"
  },
  {
    "text": "but so it does get interesting this does actually get useful to like obviously",
    "start": "2266800",
    "end": "2272200"
  },
  {
    "text": "math itself is useful um as much as I hate it but there's more here that's actually so",
    "start": "2272200",
    "end": "2278140"
  },
  {
    "text": "one one I quite like is I parsable I parsable of t means I can now call on",
    "start": "2278140",
    "end": "2285579"
  },
  {
    "text": "either of these A or B methods I can call parse or try sorry sorry not on T I",
    "start": "2285579",
    "end": "2292300"
  },
  {
    "text": "can call pars or tripath now this to me is really useful right this is saying I don't care what type you've given me",
    "start": "2292300",
    "end": "2299320"
  },
  {
    "text": "I'm going to call tripars and convert from a string to whatever you are I",
    "start": "2299320",
    "end": "2305260"
  },
  {
    "text": "could see like lots of ways that could be useful in fact I probably would have in the past created my own sort of form",
    "start": "2305260",
    "end": "2311260"
  },
  {
    "text": "of this where I had an instance method that did this work and it was just this wasted you know why do I need an object",
    "start": "2311260",
    "end": "2316900"
  },
  {
    "text": "to do this so there's a bunch of there's a bunch of goodness in.net now",
    "start": "2316900",
    "end": "2322660"
  },
  {
    "text": "um if I can get back to I number probably to type it in um so yeah there's a bunch of goodness",
    "start": "2322660",
    "end": "2328000"
  },
  {
    "text": "in.net that now uses this um so formattable you can form oh no",
    "start": "2328000",
    "end": "2334000"
  },
  {
    "text": "sorry formattables there's uh span formatable span pausable or cool so if",
    "start": "2334000",
    "end": "2339339"
  },
  {
    "text": "you've got um spans you want to save some memory you can now use them generically addition multiplication comparison all",
    "start": "2339339",
    "end": "2347140"
  },
  {
    "text": "these things um all of this stuff is enabled by Static abstract members but",
    "start": "2347140",
    "end": "2353980"
  },
  {
    "text": "obviously is part of dotnet7 but you can then use you know any part",
    "start": "2353980",
    "end": "2359020"
  },
  {
    "text": "of this to maybe light up some new things in your code the other thing this is really useful",
    "start": "2359020",
    "end": "2365140"
  },
  {
    "text": "for and I don't know if there's a an existing um if there's an existing interface for",
    "start": "2365140",
    "end": "2371619"
  },
  {
    "text": "this but one thing I quite like is I can go interface I async factory",
    "start": "2371619",
    "end": "2379119"
  },
  {
    "text": "and I can go um static abstract",
    "start": "2379119",
    "end": "2384700"
  },
  {
    "text": "uh what was it sorry it's going to be a t and I got to do where T is an eye",
    "start": "2384700",
    "end": "2390099"
  },
  {
    "text": "async Factory of T I think I'm Gonna Leave it off and maybe the compiler will tell me so create a sink I",
    "start": "2390099",
    "end": "2397720"
  },
  {
    "text": "guess this is a task",
    "start": "2397720",
    "end": "2400619"
  },
  {
    "text": "um that's a really useful interface because we don't have async Constructors in C sharp but now we can call await",
    "start": "2403180",
    "end": "2410380"
  },
  {
    "text": "create on any old type that you just tag with this iacing Factory and away we go",
    "start": "2410380",
    "end": "2416200"
  },
  {
    "text": "that's really cool and possibly might even mean that we'll never get async Constructors because we kind of don't",
    "start": "2416200",
    "end": "2422380"
  },
  {
    "text": "need them um as I say I don't think there's anything inbuilt in this in.net but I could totally see if dotnet eight or",
    "start": "2422380",
    "end": "2429040"
  },
  {
    "text": "nine or whatever gets some I async whatever Factory that becomes popular",
    "start": "2429040",
    "end": "2434800"
  },
  {
    "text": "that you know that might be how we do all these things so this one's the feature that I could",
    "start": "2434800",
    "end": "2442780"
  },
  {
    "text": "see everyone using the most but it's going to be probably highly specific how you use it right based on",
    "start": "2442780",
    "end": "2449920"
  },
  {
    "text": "your domain and what you do um there's a bunch of potentially memory savings you could get if you've got this",
    "start": "2449920",
    "end": "2455980"
  },
  {
    "text": "pattern where you use instance members for what really should be static because you couldn't do static and then there's",
    "start": "2455980",
    "end": "2461920"
  },
  {
    "text": "a bunch of other stuff like factories and whatever you can get from that any other questions I think that's my",
    "start": "2461920",
    "end": "2468339"
  },
  {
    "text": "last like yeah so that was the last feature that works right now and if you want to play",
    "start": "2468339",
    "end": "2473560"
  },
  {
    "text": "with any of that go get vs2022 preview go nuts uh the only thing you need to do",
    "start": "2473560",
    "end": "2479079"
  },
  {
    "text": "is we bring out the project file so Target",
    "start": "2479079",
    "end": "2485079"
  },
  {
    "text": "framework seven for required properties for static Etc static abstract or not",
    "start": "2485079",
    "end": "2490900"
  },
  {
    "text": "for static abstracts but for math although possibly static objects as well and then Lang version preview",
    "start": "2490900",
    "end": "2498160"
  },
  {
    "text": "and then uh I think there's another",
    "start": "2498160",
    "end": "2503980"
  },
  {
    "text": "no maybe it's just language I think there's another I think you have to opt into another preview thing for static",
    "start": "2503980",
    "end": "2509260"
  },
  {
    "text": "math but that might have been removed that sorry no that was only for.net6 a lot of this stuff actually came out and",
    "start": "2509260",
    "end": "2514599"
  },
  {
    "text": "previewed on that six and to get feedback so that it can come out properly done seven so yeah Don is 75.",
    "start": "2514599",
    "end": "2520420"
  },
  {
    "text": "um but yeah so you can go play with any of that these things are all new features of C sharp 11 that I can't demo easily",
    "start": "2520420",
    "end": "2528220"
  },
  {
    "text": "um but I'm happy to talk about them or any one of them or any of the other stuff I've talked about so we're about 40 minutes does anyone have any",
    "start": "2528220",
    "end": "2534880"
  },
  {
    "text": "questions or I'm just gonna I mean I can do this all day literally I just nope okay cool",
    "start": "2534880",
    "end": "2542260"
  },
  {
    "text": "um and some of these are really like tiny um new lines in interpolation dolls actually I think that one is in vs now",
    "start": "2542260",
    "end": "2549040"
  },
  {
    "text": "um this this one is really like so I can go hello name",
    "start": "2549040",
    "end": "2556060"
  },
  {
    "text": "uh I guess I better need a name uh I can now do this",
    "start": "2556060",
    "end": "2561820"
  },
  {
    "text": "there you go that's a new line in interpolation hold so some of these are tiny um this is just like one of those",
    "start": "2561820",
    "end": "2567520"
  },
  {
    "text": "things I think this was the guy who was implementing rostering literals was like surprised you couldn't do this and it",
    "start": "2567520",
    "end": "2572560"
  },
  {
    "text": "was like does anyone mind if I comment out this little you know thing um",
    "start": "2572560",
    "end": "2578319"
  },
  {
    "text": "so that's called top level statement attributes uh actually I don't think I don't know if that's going ahead the",
    "start": "2578319",
    "end": "2585040"
  },
  {
    "text": "idea here is uh let me bring up sharp lab so if I top level statements which",
    "start": "2585040",
    "end": "2592480"
  },
  {
    "text": "you may or may not be familiar with is the whole you know I don't need a class I don't need a thing I do need a using",
    "start": "2592480",
    "end": "2598180"
  },
  {
    "text": "statement um they synthesize a main method so there is still a main method there is still a",
    "start": "2598180",
    "end": "2603819"
  },
  {
    "text": "program class you just didn't have to write it and so you couldn't ever write attributes on",
    "start": "2603819",
    "end": "2609700"
  },
  {
    "text": "that main method what this feature is that you can go basically uh main you",
    "start": "2609700",
    "end": "2616180"
  },
  {
    "text": "know whatever and it will output an attribute as I say this isn't implemented yet I think this one",
    "start": "2616180",
    "end": "2621220"
  },
  {
    "text": "actually might not make it because I think it got into some really tricky compiler specific things",
    "start": "2621220",
    "end": "2628000"
  },
  {
    "text": "um that's pretty much just for like winforms web form WPF type stuff where you need to say I want to be a single",
    "start": "2628000",
    "end": "2634060"
  },
  {
    "text": "threaded apartment you can't use new stuff um delegation for static methods that",
    "start": "2634060",
    "end": "2639160"
  },
  {
    "text": "one's a good one so now I need to remember how to demo this we go void M and we take an action",
    "start": "2639160",
    "end": "2647680"
  },
  {
    "text": "yep and then we have another method here",
    "start": "2647680",
    "end": "2652720"
  },
  {
    "text": "and then we call M and we pass a Lambda that",
    "start": "2652720",
    "end": "2658780"
  },
  {
    "text": "calls n and whoops or we just do that",
    "start": "2658780",
    "end": "2664599"
  },
  {
    "text": "I think that's right yeah yeah nope it's not right okay well",
    "start": "2664599",
    "end": "2670000"
  },
  {
    "text": "actually so this is actually this is the old code I need to make these methods static uh and uh maybe that means I",
    "start": "2670000",
    "end": "2676480"
  },
  {
    "text": "can't use top level anyway see these two lines here right this is my call of M",
    "start": "2676480",
    "end": "2681640"
  },
  {
    "text": "with the Lambda at the top and not with the lamp to the bottom this looks like a complete mess because",
    "start": "2681640",
    "end": "2687700"
  },
  {
    "text": "these type names are fake and you can't type them but what this is doing is saying hey use this field",
    "start": "2687700",
    "end": "2693460"
  },
  {
    "text": "which is this field or if it's null initialize the field and then use it and so this is a form of",
    "start": "2693460",
    "end": "2699940"
  },
  {
    "text": "caching that happens with lambdas and it happens everywhere and it's for performance it doesn't happen if you",
    "start": "2699940",
    "end": "2705099"
  },
  {
    "text": "just use the method name directly and so that means it's got worse performance but it looks a lot nicer and",
    "start": "2705099",
    "end": "2711339"
  },
  {
    "text": "so a lot of people do it and a lot of people come and go I can improve your performance well it needed a spec change",
    "start": "2711339",
    "end": "2716980"
  },
  {
    "text": "to allow this but essentially the compiler now makes these two lines the same so if you want the neat format of",
    "start": "2716980",
    "end": "2723040"
  },
  {
    "text": "passing methods as though they're lambdas you now can um it is actually quite nice uh generic",
    "start": "2723040",
    "end": "2730480"
  },
  {
    "text": "attributes relatively straightforward so if you've got an attribute where you have to pass in type of blah you don't need to do",
    "start": "2730480",
    "end": "2737500"
  },
  {
    "text": "type of anymore you can make it generic that's all as far as I know there aren't any attributes in.net that use this yet",
    "start": "2737500",
    "end": "2743200"
  },
  {
    "text": "but one day they will be um name of parameter so you couldn't previously do",
    "start": "2743200",
    "end": "2751300"
  },
  {
    "text": "this name of a",
    "start": "2751300",
    "end": "2758859"
  },
  {
    "text": "you couldn't previously do this uh because it would say I don't know what a",
    "start": "2758859",
    "end": "2765040"
  },
  {
    "text": "is because it's outside the method and a is inside the method you now can I told you these aren't very exciting",
    "start": "2765040",
    "end": "2771339"
  },
  {
    "text": "um pattern matching on read-only span this is one of those ones where again if you have read on these bands of chars",
    "start": "2771339",
    "end": "2777099"
  },
  {
    "text": "you will love this because you don't have to convert the strings anymore um in fact I'm not even going to demo if",
    "start": "2777099",
    "end": "2782619"
  },
  {
    "text": "you don't have read on the spans of char don't worry about it um relax ordering of ref and partial I",
    "start": "2782619",
    "end": "2789160"
  },
  {
    "text": "couldn't tell you what the order of reference partial was but I now know that it's relaxed",
    "start": "2789160",
    "end": "2794500"
  },
  {
    "text": "um I think he used to do partial ref but for some reason people like saying ref partial I don't know why",
    "start": "2794500",
    "end": "2801119"
  },
  {
    "text": "semi-auto properties is is an interesting one actually that one's worth um that one's worth thinking too and",
    "start": "2801220",
    "end": "2807940"
  },
  {
    "text": "I would have done this as part of required properties but it doesn't work yet right um there's rumors that this might not",
    "start": "2807940",
    "end": "2814660"
  },
  {
    "text": "make it in as well because I think even yeah there's a branch here but I don't know how up today it is what semi-auto",
    "start": "2814660",
    "end": "2821920"
  },
  {
    "text": "properties are so I've got my class person right and I can make my required string name",
    "start": "2821920",
    "end": "2829900"
  },
  {
    "text": "which actually probably won't work because this Branch doesn't have the required stuff in it or sharp Labs just died",
    "start": "2829900",
    "end": "2836440"
  },
  {
    "text": "we're just going to go back to me so uh okay it's required okay we have",
    "start": "2836440",
    "end": "2841960"
  },
  {
    "text": "our property we're going to pretend is required great so we've said it's not null we've said you have to set it but",
    "start": "2841960",
    "end": "2848079"
  },
  {
    "text": "we can't say anything else about it right we can't validate the property what we want to do is we want to validate it and I can do that by",
    "start": "2848079",
    "end": "2855160"
  },
  {
    "text": "putting in a a body for this get what the why did that price go over there I can put anybody over here and I can say",
    "start": "2855160",
    "end": "2861400"
  },
  {
    "text": "if value uh you know dot length is less than three and I can throw an exception",
    "start": "2861400",
    "end": "2867460"
  },
  {
    "text": "or something",
    "start": "2867460",
    "end": "2870060"
  },
  {
    "text": "and I can go well now what do I do now I need somewhere to store this name",
    "start": "2873420",
    "end": "2880839"
  },
  {
    "text": "so now I need a field and so now I need to provide a get as",
    "start": "2880839",
    "end": "2886000"
  },
  {
    "text": "well so adding this little bit of validation has caused me to have to write and expand all my properties out",
    "start": "2886000",
    "end": "2891040"
  },
  {
    "text": "which is kind of annoying so what semi-auto properties means is well I mean does is I now have this",
    "start": "2891040",
    "end": "2898359"
  },
  {
    "text": "magic keyword called field and so what this says is the compiler is going to do everything it does for",
    "start": "2898359",
    "end": "2904060"
  },
  {
    "text": "normal Auto properties um in fact I'm just gonna",
    "start": "2904060",
    "end": "2909760"
  },
  {
    "text": "hopefully you can remember what that looked like no what uh",
    "start": "2909760",
    "end": "2916319"
  },
  {
    "text": "so many brackets okay so the compiler for a normal Auto",
    "start": "2917200",
    "end": "2922359"
  },
  {
    "text": "property generates a backing field right a getter and a setup great so all this",
    "start": "2922359",
    "end": "2927700"
  },
  {
    "text": "does is semi semi-auto properties means you can provide one of the two accesses",
    "start": "2927700",
    "end": "2932740"
  },
  {
    "text": "well actually you can provide both as well still saves you defining a field and instead of the field name just use the field keyword and that if you like",
    "start": "2932740",
    "end": "2939880"
  },
  {
    "text": "is replaced with name k backing Fields blah blah blah so you can do validation",
    "start": "2939880",
    "end": "2945160"
  },
  {
    "text": "you know you could put it in the getter and do two upper or something on it so it doesn't matter how it's set but everyone will read it as to Upper it",
    "start": "2945160",
    "end": "2952480"
  },
  {
    "text": "saves you a bit of code but it actually I think is really good I think that two-upper example is a good reason for",
    "start": "2952480",
    "end": "2958359"
  },
  {
    "text": "why this is right if you to normally say I want to expose this property as uppercase but I won't allow anyone to set it well you'd have to define a field",
    "start": "2958359",
    "end": "2964900"
  },
  {
    "text": "so then you go well I've if if I do the two upper on the set",
    "start": "2964900",
    "end": "2970420"
  },
  {
    "text": "great every time I read it it'll be uppercase and if someone reads the field fine but what if someone sets the fields",
    "start": "2970420",
    "end": "2975819"
  },
  {
    "text": "or if you do the two upper on the get that's fine except Nothing Stops someone reading the field so I kind of like that",
    "start": "2975819",
    "end": "2981940"
  },
  {
    "text": "this just for constraining things to say you have to use this property but you can still provide logic",
    "start": "2981940",
    "end": "2988900"
  },
  {
    "text": "um dim for static members like it's just so weird so does anyone use default",
    "start": "2988900",
    "end": "2994599"
  },
  {
    "text": "Implement default interface members yeah I didn't think so um it's pretty Niche and so then now we",
    "start": "2994599",
    "end": "3001140"
  },
  {
    "text": "have static abstract interface members and so now we also therefore have default implementation members for",
    "start": "3001140",
    "end": "3008040"
  },
  {
    "text": "static abstract members which is that you can provide static abstract member but you can provide a default",
    "start": "3008040",
    "end": "3013800"
  },
  {
    "text": "implementation if the other class doesn't I have no idea why you want to do this but you might it's kind of super Niche but there you go",
    "start": "3013800",
    "end": "3020839"
  },
  {
    "text": "param span of T that's a good one for performance if you're into performance so previously you could do you know",
    "start": "3020839",
    "end": "3028140"
  },
  {
    "text": "params int whatever um but that's all you can now do",
    "start": "3028140",
    "end": "3035940"
  },
  {
    "text": "span events so again it doesn't work don't know why I'm sharp lad um",
    "start": "3035940",
    "end": "3042240"
  },
  {
    "text": "this is you know a parameter well it's not an array a parameter list",
    "start": "3042240",
    "end": "3047700"
  },
  {
    "text": "but directly on the memory of whatever it comes from which means a",
    "start": "3047700",
    "end": "3053220"
  },
  {
    "text": "is less memory but also it means it's a little bit more flexible right doesn't have to be an array it could be a something else",
    "start": "3053220",
    "end": "3059160"
  },
  {
    "text": "um so that's good for Perth uh I don't know I've got refills there but",
    "start": "3059160",
    "end": "3064380"
  },
  {
    "text": "I do but maybe the reference aren't you anyway uh file types file types are",
    "start": "3064380",
    "end": "3070140"
  },
  {
    "text": "funny so I'm just gonna go fish this year looks better file types if we have a",
    "start": "3070140",
    "end": "3076140"
  },
  {
    "text": "class uh person I can make this",
    "start": "3076140",
    "end": "3081480"
  },
  {
    "text": "internal which means only for this assembly or I can make it public which means for every other assembly",
    "start": "3081480",
    "end": "3088079"
  },
  {
    "text": "but what if I want to help a class to deal with people or persons but I don't want it to be seen by anyone else so I",
    "start": "3088079",
    "end": "3095640"
  },
  {
    "text": "can do file class you know person helper that class is only visible in this file",
    "start": "3095640",
    "end": "3103260"
  },
  {
    "text": "literally this file which is kind of cool it I mean you could do this before with nested glasses was pretty common",
    "start": "3103260",
    "end": "3108480"
  },
  {
    "text": "but even nested classes like they then appear in intellisense sometimes we don't want them or you can have name",
    "start": "3108480",
    "end": "3113760"
  },
  {
    "text": "conflicts the name complex one is especially annoying right if you have this if you have a class helper in here",
    "start": "3113760",
    "end": "3120540"
  },
  {
    "text": "then its visibility is good but you can't have any Properties or methods or anything called helper anymore in this",
    "start": "3120540",
    "end": "3126660"
  },
  {
    "text": "class because you've now got a conflict so file scope classes whoops is is an interesting one",
    "start": "3126660",
    "end": "3133500"
  },
  {
    "text": "um there's also some math stuff and as previously stated",
    "start": "3133500",
    "end": "3140280"
  },
  {
    "text": "I don't like math so I'm not going to talk about these but just to complete the list um unsigned right shift",
    "start": "3140280",
    "end": "3147300"
  },
  {
    "text": "yay um checked operators is is actually like",
    "start": "3147300",
    "end": "3154500"
  },
  {
    "text": "we might need to know about this we maybe can't escape this um I don't know whether anyone has anyone used checked and unchecked like",
    "start": "3154500",
    "end": "3161220"
  },
  {
    "text": "mode in the compiler no it's again it's pretty Niche but essentially you know",
    "start": "3161220",
    "end": "3167160"
  },
  {
    "text": "one mode you will get exceptions if you do the wrong thing and the other mode numbers will just loop around back to",
    "start": "3167160",
    "end": "3173220"
  },
  {
    "text": "zero uh you know more like C behavior um so and you this was always it's",
    "start": "3173220",
    "end": "3178260"
  },
  {
    "text": "always been into sharp but you couldn't Define different operator behaviors under these conditions which was a bit weird so now you can",
    "start": "3178260",
    "end": "3184619"
  },
  {
    "text": "um all of the math stuff uses checked operators but I don't know if it'll leak out",
    "start": "3184619",
    "end": "3189660"
  },
  {
    "text": "um the relaxed shift operator I love they use the word relaxed um what this means is that shift",
    "start": "3189660",
    "end": "3196079"
  },
  {
    "text": "operators so left shift and right shift previously they could only be used on ins and now they can be used on any type",
    "start": "3196079",
    "end": "3202980"
  },
  {
    "text": "you like you can just Define it shift operator which does mean you can now write C out less than less than string",
    "start": "3202980",
    "end": "3209460"
  },
  {
    "text": "like we all used to do in C if you write the type the right you know operator in class I'm sure someone will",
    "start": "3209460",
    "end": "3217260"
  },
  {
    "text": "um it's probably Aaron uh numeric in pointer is this one's arguably",
    "start": "3217260",
    "end": "3222480"
  },
  {
    "text": "interesting again if you're like compile a nerd or a math nerd or a.net nerd so",
    "start": "3222480",
    "end": "3228180"
  },
  {
    "text": "in pointer so okay there's new types in C sharp 10",
    "start": "3228180",
    "end": "3233700"
  },
  {
    "text": "for Native int and Native unsigned int which is fun because the the only reason",
    "start": "3233700",
    "end": "3240720"
  },
  {
    "text": "they're cool is because you get to say nint and then you say nuint which you",
    "start": "3240720",
    "end": "3246000"
  },
  {
    "text": "always end up writing as wrong you get there anyway um these these types are mapped to in",
    "start": "3246000",
    "end": "3254700"
  },
  {
    "text": "pointer and unsigned in pointer in previous versions versions of C sharp",
    "start": "3254700",
    "end": "3260160"
  },
  {
    "text": "but in dot Net 7 and C sharp 11 they're now",
    "start": "3260160",
    "end": "3266000"
  },
  {
    "text": "their own sort of like they're a direct representation of those types they're",
    "start": "3266000",
    "end": "3271800"
  },
  {
    "text": "not mapped to them which just sounds weird and fruity and don't worry it doesn't have any effect but what it does mean is this feature essentially unlocks",
    "start": "3271800",
    "end": "3278339"
  },
  {
    "text": "the ability for the runtime team to create new data types",
    "start": "3278339",
    "end": "3283380"
  },
  {
    "text": "that have no compromises without needing c-sharp keywords so for example",
    "start": "3283380",
    "end": "3288660"
  },
  {
    "text": "you know int is in 32 long is in 64. the runtime team can now create an INT 128",
    "start": "3288660",
    "end": "3295940"
  },
  {
    "text": "and everyone can use it and there won't be a neat keyword for it like long long or whatever they would have called it",
    "start": "3295940",
    "end": "3302040"
  },
  {
    "text": "but everything will just work so and a lot of this is building up on this static interface you know idea obviously",
    "start": "3302040",
    "end": "3307500"
  },
  {
    "text": "because now we can do math on it that's the thing so this numeric uh pointer stuff is the like piece of that puzzle",
    "start": "3307500",
    "end": "3314040"
  },
  {
    "text": "um it's over exciting there is actually one more thing that I just realized I don't have on the list here",
    "start": "3314040",
    "end": "3319280"
  },
  {
    "text": "and I maybe can show you does anyone use structs",
    "start": "3319280",
    "end": "3326599"
  },
  {
    "text": "it's like two people yeah I don't ever I try to avoid them um I don't know how they work so is this",
    "start": "3326640",
    "end": "3334140"
  },
  {
    "text": "gonna work yeah uh previously this code is invalid you couldn't Define a parameter a parameter struct parameter a",
    "start": "3334140",
    "end": "3341339"
  },
  {
    "text": "Constructor um the compiler synthesized one for you because that's how Fields work",
    "start": "3341339",
    "end": "3347119"
  },
  {
    "text": "instruct so if I go uh you know hint x equals one",
    "start": "3347119",
    "end": "3352140"
  },
  {
    "text": "you can see that x equals one goes into the Constructor right the compiler had to synthesize this now you can actually Define your own the only if you don't",
    "start": "3352140",
    "end": "3360300"
  },
  {
    "text": "use drugs again you don't care if you do use drugs that's cool you can do normal things with them",
    "start": "3360300",
    "end": "3366059"
  },
  {
    "text": "um the only thing the reason it's worth mentioning is you might see um errors so if I go s x equals mu s",
    "start": "3366059",
    "end": "3376220"
  },
  {
    "text": "and I think if I comment that out anyway",
    "start": "3376380",
    "end": "3381839"
  },
  {
    "text": "um there is coming if there isn't already a warning that will be on this",
    "start": "3381839",
    "end": "3388079"
  },
  {
    "text": "um oh no wait where is the other way around defaults",
    "start": "3388079",
    "end": "3393559"
  },
  {
    "text": "there is a warning coming well that oh here we go I think I got it",
    "start": "3396660",
    "end": "3403500"
  },
  {
    "text": "nope um there's a warning coming if you do this so what it means is there is now",
    "start": "3403500",
    "end": "3410240"
  },
  {
    "text": "potentially a difference between what new s with no parameters used to do and",
    "start": "3410240",
    "end": "3417540"
  },
  {
    "text": "what it will do now because it used to be that new s a new struct was exactly the same as defaults right created a new",
    "start": "3417540",
    "end": "3424200"
  },
  {
    "text": "empty instance because the developer of that struct can now provide a Constructor that",
    "start": "3424200",
    "end": "3430619"
  },
  {
    "text": "equivalency isn't true anymore the code's not going to do anything weird it still does what the developer intended",
    "start": "3430619",
    "end": "3436140"
  },
  {
    "text": "but it could arguably change meaning so I think the compiler team if they haven't already they were talking about",
    "start": "3436140",
    "end": "3442200"
  },
  {
    "text": "a warning so if you do have code that says uses the new keyword to create an",
    "start": "3442200",
    "end": "3447660"
  },
  {
    "text": "empty struct you might get a warning that says hey this could change Behavior just so you know that's what it's about",
    "start": "3447660",
    "end": "3452880"
  },
  {
    "text": "and you can either change it to default and keep your same behavior or you can leave it because you're doing what the",
    "start": "3452880",
    "end": "3458460"
  },
  {
    "text": "compiler what the the struct author intended um that's it that's C sharp 11. I think",
    "start": "3458460",
    "end": "3465660"
  },
  {
    "text": "that's all of it hopefully they all get in otherwise I mean not uh what is it June we got to November should be fine",
    "start": "3465660",
    "end": "3473900"
  },
  {
    "text": "uh any questions if three minutes or you can go get a coffee or lunch",
    "start": "3473940",
    "end": "3480859"
  },
  {
    "text": "[Applause]",
    "start": "3486920",
    "end": "3491479"
  }
]