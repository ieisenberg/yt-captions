[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "I kept my name's I'm Steven ha and welcome to my talk data security hope it's not a strategy",
    "start": "6550",
    "end": "12929"
  },
  {
    "text": "so it's little bits about me so most of my time you spent these days doing work for polar sites so I've produced 12",
    "start": "12929",
    "end": "19990"
  },
  {
    "text": "courses that are published now and I've got 13 throughout soon and we also do a lot traveling around doing training",
    "start": "19990",
    "end": "25599"
  },
  {
    "text": "around took cryptography training in.net is one of the courses I'm running it in a minute and I've also run a workshop for the last two days here doing that",
    "start": "25599",
    "end": "31929"
  },
  {
    "text": "subject and I've also been doing some work with a payments company in the UK",
    "start": "31929",
    "end": "37330"
  },
  {
    "text": "called ladder pain I'm also one offer so I write a lot of books I've got free out",
    "start": "37330",
    "end": "42430"
  },
  {
    "text": "at the moment on various different software development subjects and I've got loads more coming out so that's the hard sale done so we're going to cover",
    "start": "42430",
    "end": "50110"
  },
  {
    "start": "48000",
    "end": "48000"
  },
  {
    "text": "quite a lot of ground quite quickly today when we talk about cryptography and nets so I want to show you some other resources that you can refer to",
    "start": "50110",
    "end": "56109"
  },
  {
    "text": "afterwards if it's a subject that interests you so I've got a course on Pluralsight called craps practical cryptography not nets which kind of",
    "start": "56109",
    "end": "63129"
  },
  {
    "text": "talks about what we're going through today but it goes through a lot slower and works for a lot more examples",
    "start": "63129",
    "end": "68580"
  },
  {
    "text": "another course it people may find interesting is one of them here with Lars quince which is all about how to",
    "start": "68580",
    "end": "74259"
  },
  {
    "text": "use Azure key vault in Microsoft Azure which you might find interesting also the github address there and I've",
    "start": "74259",
    "end": "82240"
  },
  {
    "text": "got all the source code for that course so even if you're not a promise top subscriber I've open sourced all the code so feel free to go in and take it",
    "start": "82240",
    "end": "90360"
  },
  {
    "text": "because it kind of follows what we're talking about today and also have a copy of these slides available on github as",
    "start": "90360",
    "end": "97180"
  },
  {
    "text": "well if you want to grab them okay so",
    "start": "97180",
    "end": "102850"
  },
  {
    "text": "why are we here so I go around doing this talk because I believe that everyone as developers has a",
    "start": "102850",
    "end": "108100"
  },
  {
    "text": "responsibility to their company to help protect their data Sue's everyone the developer in this room hey my choice for",
    "start": "108100",
    "end": "114490"
  },
  {
    "text": "you you all don't have developers whew that's good typically a lot of companies take a very",
    "start": "114490",
    "end": "121659"
  },
  {
    "text": "blase approach to security and data security and you know they keep their fingers crossed and hope it's not gonna",
    "start": "121659",
    "end": "126939"
  },
  {
    "text": "happen to them and they literally do think that hope is not a strategy I've worked with lots of companies are taking",
    "start": "126939",
    "end": "132160"
  },
  {
    "text": "this approach and it is wrong some to projector ok",
    "start": "132160",
    "end": "139040"
  },
  {
    "text": "protectors gonna play nicely today is it so yes Oh a lot of them going the idea",
    "start": "139040",
    "end": "145140"
  },
  {
    "text": "that hope is not a strategy and certainly in my experience when I've worked on a lot of projects this is generally what seems to happen a lot of",
    "start": "145140",
    "end": "152220"
  },
  {
    "text": "the call security stuff that we want to put in to protect data normally gets pushed in the back of the project because people only care about features",
    "start": "152220",
    "end": "158370"
  },
  {
    "text": "and don't necessarily think of security as a feature so what this talk isn't so",
    "start": "158370",
    "end": "164579"
  },
  {
    "start": "163000",
    "end": "163000"
  },
  {
    "text": "we're not going to go deep down into the underlying algorithms like AES and DES we're not going to look at how they work",
    "start": "164579",
    "end": "170459"
  },
  {
    "text": "internally because an hour wouldn't be long enough to do that and we're not going to talk about cryptanalysis you",
    "start": "170459",
    "end": "176459"
  },
  {
    "text": "know the art and science of breaking codes that's not what this talks about so what this talk is about these people like me and you who sit there every day",
    "start": "176459",
    "end": "183180"
  },
  {
    "text": "for our organizations writing code and delivering code into production so what",
    "start": "183180",
    "end": "189450"
  },
  {
    "text": "if I started delivering this talk it was very much centered around the what we now classes the traditional dotnet",
    "start": "189450",
    "end": "194849"
  },
  {
    "text": "framework I mean dotnet core first came along all",
    "start": "194849",
    "end": "200310"
  },
  {
    "text": "the way up to doc net core 1.1 and doc nest and at one point six most of the crypto libraries in the framework went",
    "start": "200310",
    "end": "206639"
  },
  {
    "text": "available to us so we couldn't really use dotnet core which is a bit the problem but last August Microsoft very",
    "start": "206639",
    "end": "211980"
  },
  {
    "text": "kindly released dotnet Core 2 and don't know standard - which now includes the majority of the api's that we want to",
    "start": "211980",
    "end": "217829"
  },
  {
    "text": "talk about today which also in the.net framework so you can now have some cross-platform ability with our code so",
    "start": "217829",
    "end": "226200"
  },
  {
    "text": "whilst today we're going to be mostly looking at the Microsoft api's and how they work at sort of higher level the actual broad concepts of what we discuss",
    "start": "226200",
    "end": "232739"
  },
  {
    "text": "in the Kearney Universal so if you're a ruby program or a Java programmer the actual concept of what we're talking about is transferable chess we're",
    "start": "232739",
    "end": "239250"
  },
  {
    "text": "looking at one particular set of api's the actual idea of what we're talking about is kind of universal so this is",
    "start": "239250",
    "end": "246900"
  },
  {
    "start": "246000",
    "end": "246000"
  },
  {
    "text": "what we're going to cover so we gonna start off by looking at random numbers because it's not kind of the core principle of our cryptography so have",
    "start": "246900",
    "end": "252540"
  },
  {
    "text": "good random numbers we're then going to take a quick look at hashing and hash message authentication codes we're then",
    "start": "252540",
    "end": "258479"
  },
  {
    "text": "going to talk a bit about secure password storage then we're going to talk about symmetric encryption is in",
    "start": "258479",
    "end": "264389"
  },
  {
    "text": "particular and we're going to talk about asymmetric encryption and RSA in particular and then we're going to talk",
    "start": "264389",
    "end": "270330"
  },
  {
    "text": "a bit about digital signatures once we've done that we're gonna combine some of these things together to do",
    "start": "270330",
    "end": "275490"
  },
  {
    "text": "what's called hybrid encryption so what",
    "start": "275490",
    "end": "281099"
  },
  {
    "start": "279000",
    "end": "279000"
  },
  {
    "text": "is cryptography is probably silly question to ask you a security event but cryptography is generally regarded about",
    "start": "281099",
    "end": "287069"
  },
  {
    "text": "protecting information and we do that by encryption and to do encryption we have to use encryption keys with a be",
    "start": "287069",
    "end": "293460"
  },
  {
    "text": "asymmetric or symmetric keys and the result of the encryption process is commonly referred to as ciphertext and",
    "start": "293460",
    "end": "299490"
  },
  {
    "text": "the arts have breaking the ciphertext to recover the plaintext is known as crypt analysis but it's kind of more to",
    "start": "299490",
    "end": "306059"
  },
  {
    "text": "cryptography than just encryption so cryptography kind of splits down into four main pillars so we have",
    "start": "306059",
    "end": "311249"
  },
  {
    "text": "confidentiality and this is what we traditionally think of when it comes to cryptography we have integrity which is",
    "start": "311249",
    "end": "317189"
  },
  {
    "text": "about making sure that something hasn't changed or broken when it's in transit we have authentication which is about",
    "start": "317189",
    "end": "323339"
  },
  {
    "text": "proven whether someone's actually allowed to do an operation or not and then we have non repudiation which is",
    "start": "323339",
    "end": "328499"
  },
  {
    "text": "proven that you were the person that sent the message it's a bit like having some one witness signing a contract it's a good way of thinking about it we're",
    "start": "328499",
    "end": "335189"
  },
  {
    "text": "gonna cover all four of those in this talk so cryptography is used everywhere",
    "start": "335189",
    "end": "340559"
  },
  {
    "start": "337000",
    "end": "337000"
  },
  {
    "text": "sure everyone in this room knows that we were NDC security I mean you cannot literally you cannot wake up in the morning without some kind of",
    "start": "340559",
    "end": "346469"
  },
  {
    "text": "cryptography happening as soon as you turn your phone on your TV your computer you do online shopping you know take",
    "start": "346469",
    "end": "352559"
  },
  {
    "text": "your money out of a cash machine there's a cryptographic handshake between the ATM and the bank the newer crypto",
    "start": "352559",
    "end": "357779"
  },
  {
    "text": "currencies which are very popular at the moment and even modern voting machines and some of the new block chain based",
    "start": "357779",
    "end": "363029"
  },
  {
    "text": "voting machines are all based around cryptography okay so it starts off by",
    "start": "363029",
    "end": "368159"
  },
  {
    "text": "looking at random numbers so random",
    "start": "368159",
    "end": "373469"
  },
  {
    "start": "372000",
    "end": "372000"
  },
  {
    "text": "numbers are absolutely pivotal to everything we do when it comes to cryptography you know whether we're using dotnet Ruby Java a good set of",
    "start": "373469",
    "end": "381180"
  },
  {
    "text": "random numbers he's very important for it to be a generate so the one thing you don't want to use is systems at random",
    "start": "381180",
    "end": "387889"
  },
  {
    "text": "so systems at random is great for doing you know simulated the ice roads or generating lottery numbers but it's",
    "start": "387889",
    "end": "393749"
  },
  {
    "text": "deterministic so if you pass the same seed into the random function you'll get the same numbers out so for cryptography",
    "start": "393749",
    "end": "399389"
  },
  {
    "text": "it's completely useless and it's also not typesafe so one we should be using",
    "start": "399389",
    "end": "405380"
  },
  {
    "text": "there's a lot better to use is the RNG crypto service provider class which lives in system dot security lock",
    "start": "405380",
    "end": "410510"
  },
  {
    "text": "cryptography and factory it's very easy to use everything can probably",
    "start": "410510",
    "end": "416570"
  },
  {
    "text": "everything can donate it's very easy to use which is great so we have a method here generate random number and we pass",
    "start": "416570",
    "end": "422690"
  },
  {
    "text": "in a length which is a length in bytes we initialize your ng crypto service",
    "start": "422690",
    "end": "427820"
  },
  {
    "text": "provider we create a new byte array our desired length we call get bites on the",
    "start": "427820",
    "end": "432920"
  },
  {
    "text": "mundum number generator objects and we return the result so what we get back is a byte array your random data so the",
    "start": "432920",
    "end": "442790"
  },
  {
    "text": "next thing I'll quickly look up then is hashing so hashing can most commonly be",
    "start": "442790",
    "end": "447800"
  },
  {
    "text": "for self as being like a digital fingerprint for a piece of data so you pass some data in you hash it and you",
    "start": "447800",
    "end": "453500"
  },
  {
    "text": "get this kind of unique ID fingerprint or piece of data out the other side",
    "start": "453500",
    "end": "459070"
  },
  {
    "text": "mihashi should have four core principles behind it or four core tenants so one it",
    "start": "459070",
    "end": "465260"
  },
  {
    "text": "should be easy to compute so if I've got a file of string you know a piece of data in a database it should be easy to",
    "start": "465260",
    "end": "470480"
  },
  {
    "text": "compute the hash it should also be infeasible to generate a specific hash you shouldn't be able to start off with",
    "start": "470480",
    "end": "476030"
  },
  {
    "text": "a hash and say what data do I need to generate that hash you shouldn't be able to go in that what go in that direction",
    "start": "476030",
    "end": "481240"
  },
  {
    "text": "if you're being feasible to modify a message without changing the hash so if you have a big long string that you're",
    "start": "481240",
    "end": "487010"
  },
  {
    "text": "to create a hash of and you then go and change one character you'd expect the entire hash message to be completely different not just a little bit and it",
    "start": "487010",
    "end": "494450"
  },
  {
    "text": "sure technically being feasible to find two identical hashes uses what's referred to as a hash collision so one of the principles of a good hashing",
    "start": "494450",
    "end": "500750"
  },
  {
    "text": "functions you don't want to have hash collisions now hashing is a one-way operation and",
    "start": "500750",
    "end": "506840"
  },
  {
    "text": "I've compared it to encryption on there which is a two-way operation so with encryption you use a key to encrypt and",
    "start": "506840",
    "end": "512030"
  },
  {
    "text": "decrypt your data so you go both ways but in hashing you only go one way we should only be able to go one way so",
    "start": "512030",
    "end": "520039"
  },
  {
    "text": "there's various different hashing algorithms available to us in the top net framework so one of them is md5 and",
    "start": "520039",
    "end": "525770"
  },
  {
    "text": "this produces a 16 byte hash value and it was designed by ron rivest in 1991",
    "start": "525770",
    "end": "530990"
  },
  {
    "text": "but there's a problem found with it initially in 1996 where they found hash collision resistant vulnerability",
    "start": "530990",
    "end": "538400"
  },
  {
    "text": "so if you're creating new software you don't really want to be using md5 but I included in the talk because if you're",
    "start": "538400",
    "end": "543740"
  },
  {
    "text": "working with lots of legacy systems i po used to work for a bank when we had is 400 mainframes running our core banking",
    "start": "543740",
    "end": "549860"
  },
  {
    "text": "platform is quite often we'd have to do md5 integrity checks against data coming back from that because that's what that",
    "start": "549860",
    "end": "555529"
  },
  {
    "text": "platform used so he's still useful to know about it for legacy purposes next",
    "start": "555529",
    "end": "564110"
  },
  {
    "text": "up we have the secure hash family so the first one is sha-1 and that produces a",
    "start": "564110",
    "end": "569510"
  },
  {
    "text": "160 bits hash value then we have char two which commonly returns 256 bits and",
    "start": "569510",
    "end": "576050"
  },
  {
    "text": "512 bit hashes and then there's a new one called char free which currently isn't in the.net framework I'm not sure",
    "start": "576050",
    "end": "582320"
  },
  {
    "text": "when it's come in but this was designed specifically to be a hashing function which didn't have any involvement by the",
    "start": "582320",
    "end": "588680"
  },
  {
    "text": "National Security Agency in the US whereas all the other ones had involvement at the NSA so in this day and age that makes people a bit nervous",
    "start": "588680",
    "end": "594940"
  },
  {
    "text": "so a new variety was was found for a",
    "start": "594940",
    "end": "600650"
  },
  {
    "text": "competition so if we look at how to use sha-256 they've all got very similar",
    "start": "600650",
    "end": "607880"
  },
  {
    "text": "interfaces so once you know how to use one you know how to use them all but it's very easy to use so we use a method",
    "start": "607880",
    "end": "613730"
  },
  {
    "text": "here called compute hash sha-256 we pass in a byte array which is an array of the data that we want to hash",
    "start": "613730",
    "end": "619430"
  },
  {
    "text": "so if it's a string you'll need to encode that into a byte array first we",
    "start": "619430",
    "end": "624740"
  },
  {
    "text": "call the static method create on the char 256 object then we call compute hash by passing in our data and then we",
    "start": "624740",
    "end": "631370"
  },
  {
    "text": "return we receive the hash data back out as a byte array there sure",
    "start": "631370",
    "end": "638110"
  },
  {
    "text": "so the next one want to look at is authenticated hashing which kind of builds on the concept of hashing and the",
    "start": "638110",
    "end": "648020"
  },
  {
    "start": "646000",
    "end": "646000"
  },
  {
    "text": "key difference with an authenticated hash is as well as passing in a message we also pass in an encryption key or a",
    "start": "648020",
    "end": "653990"
  },
  {
    "text": "key so in this case we could use a 32 bytes key that we pass in and what this",
    "start": "653990",
    "end": "659209"
  },
  {
    "text": "means is if anyone on a receiving end of a system wants to recalculate the same hash they have to be in possession of",
    "start": "659209",
    "end": "664880"
  },
  {
    "text": "that key to recalculate the hash if they have a different key then they'll get a completely different hash off the back",
    "start": "664880",
    "end": "670010"
  },
  {
    "text": "of it it's a good way of now it's authenticate or prove who it was that a sense of hash so not only",
    "start": "670010",
    "end": "678690"
  },
  {
    "text": "does it give you integrity checking like you do with normal hashing functions it gives you authenticating as well now H",
    "start": "678690",
    "end": "685110"
  },
  {
    "text": "max in.net could be based on md5 and the char family the examples making a lookout will be based on sha-256 and the",
    "start": "685110",
    "end": "691860"
  },
  {
    "text": "strength of the hashing is a dependant on the lemon for the key so photo to you by its 256 bits is probably a good",
    "start": "691860",
    "end": "698519"
  },
  {
    "text": "minimum to use these days the most common attack against this type of hashing is a brute-force attack which",
    "start": "698519",
    "end": "705240"
  },
  {
    "text": "we'll look at in a moment so again very easy to use so we have a little sample",
    "start": "705240",
    "end": "711570"
  },
  {
    "text": "method here we pass in a byte array of the data that we want to hash and we pass in a byte array which represents our key that could be 32 bytes we then",
    "start": "711570",
    "end": "719730"
  },
  {
    "text": "construct the H Mac char 256 objects whilst passing in the key and then we simply call compute hash passing in the",
    "start": "719730",
    "end": "726180"
  },
  {
    "text": "data we want hash and then we receive a byte array back out the other side okay",
    "start": "726180",
    "end": "733230"
  },
  {
    "text": "so now I want to talk a bit about secure password storage so if we like it or not passwords are still one of the most",
    "start": "733230",
    "end": "739050"
  },
  {
    "start": "735000",
    "end": "735000"
  },
  {
    "text": "common ways which people have lost 8 themselves on systems because they are generally easy for her for our users to",
    "start": "739050",
    "end": "745380"
  },
  {
    "text": "remember and hashing is one of the most common ways of doing that's",
    "start": "745380",
    "end": "750660"
  },
  {
    "text": "traditionally so has anyone works on a system way you've just created and stored a hash of a password sha-256 hash",
    "start": "750660",
    "end": "757220"
  },
  {
    "text": "it's ok to admit it I've done it as well there's two common attacks you can do",
    "start": "757220",
    "end": "764100"
  },
  {
    "text": "against here so you can do a brute force attack you just keep on trying lots of combinations and to manage to crack the password or you can use a dictionary",
    "start": "764100",
    "end": "769860"
  },
  {
    "text": "attack and these dictionaries typically are gigabytes in size and used towards",
    "start": "769860",
    "end": "775260"
  },
  {
    "text": "our hash Katz to automate the password in the workshop the other day we did a hash cap demone and all of us running it",
    "start": "775260",
    "end": "782160"
  },
  {
    "text": "managed to warm the room up quite nicely as our machines nearly melted so there's",
    "start": "782160",
    "end": "788550"
  },
  {
    "text": "a good example of how to break them here so this is a website called crack station dotnet and it just makes for a",
    "start": "788550",
    "end": "795779"
  },
  {
    "text": "good example so you pass in sha-256 hash up there type in the CAPTCHA hit crack hashes it's worked out there it's a",
    "start": "795779",
    "end": "802770"
  },
  {
    "text": "sha-256 hash and the power to secret 69 that's just so kind of a trivial example that shows you how easy",
    "start": "802770",
    "end": "808730"
  },
  {
    "text": "it is so story in hashes on their own is probably not a great way of storing",
    "start": "808730",
    "end": "813949"
  },
  {
    "text": "passwords so the next best thing so that is storing what's called a salted password and what this is is your",
    "start": "813949",
    "end": "823129"
  },
  {
    "text": "pence and data onto the end of the password before you hash it so again that could be a 32 byte random number",
    "start": "823129",
    "end": "829009"
  },
  {
    "text": "that we generated with our ng crypto service provider and once you've concatenate two those two together you",
    "start": "829009",
    "end": "834889"
  },
  {
    "text": "just hash it as normal so is anyone do this in their current systems it's a few",
    "start": "834889",
    "end": "841699"
  },
  {
    "text": "more people you know I've done that as well and no Jeremy that's pretty good if",
    "start": "841699",
    "end": "846740"
  },
  {
    "text": "you've got a 32 by a 256 bits a piece of entropy on the end of the password that's going to be quite difficult to",
    "start": "846740",
    "end": "851899"
  },
  {
    "text": "break but who knows what's gonna happen in you know 2 3 4 or 5 years or more it's always like hash queues GPUs for",
    "start": "851899",
    "end": "859459"
  },
  {
    "text": "breaking passwords and they're only getting faster every year so what might be secure today might not be secure in a",
    "start": "859459",
    "end": "865550"
  },
  {
    "text": "few years time so what I want to do is you want to stop Moore's Law and the",
    "start": "865550",
    "end": "871639"
  },
  {
    "text": "evolution of graphics cards and towards our hash cap being a problem so the next best thing we can use is what's called",
    "start": "871639",
    "end": "877399"
  },
  {
    "text": "password-based key derivation function or pbkdf2 for its fun name I think it's",
    "start": "877399",
    "end": "884120"
  },
  {
    "text": "actually this is very similar to what we've just done so have our password we want to hash we have a salt that we pass in so again that could be fair to two",
    "start": "884120",
    "end": "890329"
  },
  {
    "text": "bytes of entropy that we generated but then we have this number of iterations and what this is it's a number of times",
    "start": "890329",
    "end": "896629"
  },
  {
    "text": "which that hashing function is going to get run internally to generate our password and the reason we do this is we",
    "start": "896629",
    "end": "902809"
  },
  {
    "text": "want to algorithmically slow down the hashing process so instead of hash cap being able to do you know billions of",
    "start": "902809",
    "end": "909439"
  },
  {
    "text": "combinations per second you might be able to reduce it down to say 10 combinations per second so in.net",
    "start": "909439",
    "end": "917959"
  },
  {
    "text": "again this is very easy to do you have a very nice method in the framework called RFC - 898 derive bias does what it says",
    "start": "917959",
    "end": "926300"
  },
  {
    "text": "on the tin so we have our hash password method that we've written we have a byte",
    "start": "926300",
    "end": "931910"
  },
  {
    "text": "array of the data we want to hash we have a byte array of our salt and then",
    "start": "931910",
    "end": "936980"
  },
  {
    "text": "we pass in a number of iteration and then we just pass those into RFC two eight nine eight derive bias call get by",
    "start": "936980",
    "end": "942800"
  },
  {
    "text": "its twenty because it uses sha-1 in town meeting any returns twenty bytes let me return the result as a by two",
    "start": "942800",
    "end": "949220"
  },
  {
    "text": "right I did some time in tests on this so on the Left column we have the number",
    "start": "949220",
    "end": "955580"
  },
  {
    "text": "of iterations and then we have a time in milliseconds on the right and then I've correlated that on to a graph as you can",
    "start": "955580",
    "end": "961220"
  },
  {
    "text": "see there's a linear correlation between time and the number of seconds so for a",
    "start": "961220",
    "end": "967550"
  },
  {
    "text": "hundred iterations he took two milliseconds all the way up to five hundred thousand iterations which took around seven seconds",
    "start": "967550",
    "end": "973360"
  },
  {
    "text": "so the reason I show this is if you're going to incorporate something like this into your systems you need to think",
    "start": "973360",
    "end": "978410"
  },
  {
    "text": "about the trade-off in performance so what is an acceptable level of time to wait for a password to be hashed so if",
    "start": "978410",
    "end": "985250"
  },
  {
    "text": "you're having assist a person authenticate onto a system is having them wait two seconds once you've topped their password acceptable it might be to",
    "start": "985250",
    "end": "992209"
  },
  {
    "text": "your company or it might not so you have to think about the trade-offs in time as everyone familiar",
    "start": "992209",
    "end": "1002940"
  },
  {
    "text": "before if this company here so they bash themselves as a dating agency aimed at",
    "start": "1002940",
    "end": "1010690"
  },
  {
    "text": "people that want to have affairs so they had a massive data breach a few years ago is it for the joy one in here's how",
    "start": "1010690",
    "end": "1016180"
  },
  {
    "text": "to get haven't they it was a it was quite a big deal so they had lots of",
    "start": "1016180",
    "end": "1022240"
  },
  {
    "text": "their data stolen and their source code stolen and I know the hackers wanted to go over after the passwords so they",
    "start": "1022240",
    "end": "1028240"
  },
  {
    "text": "looked at how the passwords are being stored and there would be these insane called bcrypt which is very similar to our password-based key derivation function",
    "start": "1028240",
    "end": "1034920"
  },
  {
    "text": "so actually what they were doing was quite good they're doing iterated hashing to slow down the hashing process that's quite cool but then what they",
    "start": "1034920",
    "end": "1041800"
  },
  {
    "text": "also found when they did the when they went through the source code is that some unwitting software engineer heard",
    "start": "1041800",
    "end": "1047260"
  },
  {
    "text": "of C try to optimize the logon performance of their system so once you successfully logged on it was story in",
    "start": "1047260",
    "end": "1052900"
  },
  {
    "text": "md5 tokens locally of the password to speed up the process then once they",
    "start": "1052900",
    "end": "1060220"
  },
  {
    "text": "found this out by looking at the source code obviously they then managed to go off and recover a vast majority the",
    "start": "1060220",
    "end": "1065290"
  },
  {
    "text": "password file so there's a really good article on Ars Technica about it at that link there it makes further fascinating",
    "start": "1065290",
    "end": "1071710"
  },
  {
    "text": "reading okay let's move on to encryption",
    "start": "1071710",
    "end": "1080020"
  },
  {
    "text": "so we'll start off with a symmetric encryption so what this involves then is",
    "start": "1080020",
    "end": "1085929"
  },
  {
    "text": "you have a piece of data you encrypt it with an encryption key and then you decrypt it using the same key that's why",
    "start": "1085929",
    "end": "1091809"
  },
  {
    "text": "it's symmetric there's a problem with symmetric encryption and that is that sharing keys is hard so if I generate a",
    "start": "1091809",
    "end": "1098380"
  },
  {
    "text": "photo to buy encryption key and I want to send one of you some data how do I get that key to you you know do I email",
    "start": "1098380",
    "end": "1105159"
  },
  {
    "text": "it probably not a good idea stick it on text file on the server somewhere again not a good idea probably",
    "start": "1105159",
    "end": "1110169"
  },
  {
    "text": "don't wanna stick it in a database so unless you're actually physically in the room of me and I hand you a key with it",
    "start": "1110169",
    "end": "1115210"
  },
  {
    "text": "on its papi not gonna be very good so again just to illustrate the point it",
    "start": "1115210",
    "end": "1122529"
  },
  {
    "text": "was saying before so hashing is a one-way process an encryption is a two-way process so we using that same key to recover our information so",
    "start": "1122529",
    "end": "1133179"
  },
  {
    "text": "symmetric encryption works by splitting and your data down into blocks and then they put it in crypts are several blocks",
    "start": "1133179",
    "end": "1140529"
  },
  {
    "text": "at the time does lots of swapping operations internally so on computers things are KS actually very efficient to",
    "start": "1140529",
    "end": "1147130"
  },
  {
    "text": "run and in net we have free options which are quite common to you so we have",
    "start": "1147130",
    "end": "1153429"
  },
  {
    "text": "DES which is the original data encryption standard we have Triple DES and then we have the AES crypto service",
    "start": "1153429",
    "end": "1159220"
  },
  {
    "text": "provider and they all inherit from a common base class which is symmetric algorithm so once you know how to use",
    "start": "1159220",
    "end": "1165549"
  },
  {
    "text": "one the interfaces between all three are actually pretty much the same again I",
    "start": "1165549",
    "end": "1172360"
  },
  {
    "text": "mentioned des and Triple DES on here not because you'd want to use them for a brand new system but if you are integrating with old legacy systems and",
    "start": "1172360",
    "end": "1178510"
  },
  {
    "text": "the chances are you might have to decrypt something that has been encrypted with DES or triple dose so AES",
    "start": "1178510",
    "end": "1187090"
  },
  {
    "start": "1184000",
    "end": "1184000"
  },
  {
    "text": "stands for the advanced encryption standard and it became a standard by the National Institutes of Standards and",
    "start": "1187090",
    "end": "1192640"
  },
  {
    "text": "Technology back in 2001 and as you vented by our two mathematicians Jane Damon and Vincent Ryman and it was based",
    "start": "1192640",
    "end": "1199690"
  },
  {
    "text": "on their original cipher which is called Orion dollar cipher and that Ryan Dell cipher was what one the",
    "start": "1199690",
    "end": "1205020"
  },
  {
    "text": "competition and became the standard so we have a choice of free keys we can use",
    "start": "1205020",
    "end": "1211440"
  },
  {
    "text": "with AES we have 128 bits 192 and 256 bits whenever I use it other ways just",
    "start": "1211440",
    "end": "1217860"
  },
  {
    "text": "gone straight to 256 bits as well as passing in the key we have what's called",
    "start": "1217860",
    "end": "1224070"
  },
  {
    "text": "an initialization vector so for some of the encryption modes in AES you have to pass in an additional 16 bytes which it",
    "start": "1224070",
    "end": "1230880"
  },
  {
    "text": "uses to encrypt the first block the initialization vector doesn't have to be kept secret you can send it along with",
    "start": "1230880",
    "end": "1236670"
  },
  {
    "text": "the encrypted message and we also pass in the plaintext that's the data that we",
    "start": "1236670",
    "end": "1242280"
  },
  {
    "text": "want to encrypt so it could be you know a string a byte array of file that's been serialized they run that for us",
    "start": "1242280",
    "end": "1248490"
  },
  {
    "text": "with a key and then we get our cipher text back out the other side now in dotnet we have a choice of two versions",
    "start": "1248490",
    "end": "1255480"
  },
  {
    "text": "of this that we can use so we have aes managed and aes crypto service provider but fundamentally they're both doing the",
    "start": "1255480",
    "end": "1261450"
  },
  {
    "text": "same thing but IES managed is a native dotnet implementation where as a crypto",
    "start": "1261450",
    "end": "1267270"
  },
  {
    "text": "service provider uses the underlying windows crypto platform now even though",
    "start": "1267270",
    "end": "1278040"
  },
  {
    "text": "IES manages a native implementation it's not certified by Phipps it hasn't got the FIPS 1 million - 2 certification",
    "start": "1278040",
    "end": "1285560"
  },
  {
    "text": "whereas aes crypto service provider has and what that means is if it's certified",
    "start": "1285560",
    "end": "1291630"
  },
  {
    "text": "if i golden crypts on in canet and then pass that data off to a system that's written in java for example if there is",
    "start": "1291630",
    "end": "1298310"
  },
  {
    "text": "implementation is also fit certified i'm going to have a good level of compatibility between the two that",
    "start": "1298310",
    "end": "1304260"
  },
  {
    "text": "doesn't mean that i es managed doesn't work it just it just means it isn't paddlin certified it's an example of",
    "start": "1304260",
    "end": "1312960"
  },
  {
    "text": "using AES so if we want to encrypt some data we have our encrypt method and we pass in a byte array of the data we want",
    "start": "1312960",
    "end": "1319230"
  },
  {
    "text": "to encrypt a byte array of our key so 32 bytes in this case and our",
    "start": "1319230",
    "end": "1325170"
  },
  {
    "text": "initialization vector which again is 16 bytes so we create the AES crypto",
    "start": "1325170",
    "end": "1331230"
  },
  {
    "text": "service provider objects we assign the key in the initialization vector and then we create a memory stream and",
    "start": "1331230",
    "end": "1337530"
  },
  {
    "text": "equipped toaster because IES is stream-based internet and over here we have something called a es",
    "start": "1337530",
    "end": "1344430"
  },
  {
    "text": "crate encryptor which we set so you write the data into the stream you flush it convert it back to an array and then",
    "start": "1344430",
    "end": "1350790"
  },
  {
    "text": "you have your data encrypted let's go they have weights very similar they",
    "start": "1350790",
    "end": "1356370"
  },
  {
    "text": "looks almost the same except the only difference is instead of crate encryptor we pass in create decrypter into the",
    "start": "1356370",
    "end": "1362820"
  },
  {
    "text": "crypto stream you know we pass our key and our initialization vector as we did",
    "start": "1362820",
    "end": "1369210"
  },
  {
    "text": "before passing the encrypted data and then that stream will decrypt our data",
    "start": "1369210",
    "end": "1375990"
  },
  {
    "text": "for us so that's symmetric encryption want to look at now quickly is a",
    "start": "1375990",
    "end": "1382080"
  },
  {
    "text": "symmetric encryption so all most common",
    "start": "1382080",
    "end": "1388590"
  },
  {
    "start": "1386000",
    "end": "1386000"
  },
  {
    "text": "ones which you can use is RSA which is what we're going to look at today in our example and this uses a concept of",
    "start": "1388590",
    "end": "1394470"
  },
  {
    "text": "public and private keys so instead of having it's just a single key for encrypting and decrypting our data like",
    "start": "1394470",
    "end": "1399720"
  },
  {
    "text": "we did prevail yes with asymmetric encryption we have two keys and those keys on a map contact those two keys are",
    "start": "1399720",
    "end": "1406680"
  },
  {
    "text": "mathematically linked and I'll show you an example of what that means in a moment so RSA was developed by RSA data",
    "start": "1406680",
    "end": "1415680"
  },
  {
    "text": "security incorporated in the States by free guys Rivest Shamir and Adleman so RSA is an acronym of their names and the",
    "start": "1415680",
    "end": "1424410"
  },
  {
    "text": "way that RSA works is there's no efficient way to factor very large prime numbers so if you have a huge prime",
    "start": "1424410",
    "end": "1430320"
  },
  {
    "text": "number it's very hard to work out what the two primes are that you multiply together to make that results in prime",
    "start": "1430320",
    "end": "1436110"
  },
  {
    "text": "and that's kind of how the what the security is based on with RSA so these prime numbers are huge are thousands of",
    "start": "1436110",
    "end": "1442170"
  },
  {
    "text": "digits long so 2048 bit cases the current recommended minimum length but",
    "start": "1442170",
    "end": "1448740"
  },
  {
    "text": "you can go up to 4096 bit Keys as well and there's a thousand and 24 bits but",
    "start": "1448740",
    "end": "1456690"
  },
  {
    "text": "you really don't use that anymore",
    "start": "1456690",
    "end": "1459500"
  },
  {
    "text": "okay so if we look at what makes up the key so I was talking about multiplications of primes so if I say to",
    "start": "1465020",
    "end": "1472080"
  },
  {
    "text": "you you know what is 23 times 17 those are two prime numbers then the answer is",
    "start": "1472080",
    "end": "1477270"
  },
  {
    "text": "391 you can work that out very easily either in your head or on a calculator but if I was to say what prime numbers",
    "start": "1477270",
    "end": "1484530"
  },
  {
    "text": "do you need to multiply together to make five thousand nine hundred and sixty-three does anyone know he wasn't",
    "start": "1484530",
    "end": "1490440"
  },
  {
    "text": "in my workshop so it's harder to do",
    "start": "1490440",
    "end": "1495450"
  },
  {
    "text": "isn't it so now if you imagine instead of four digits that's like hundreds of thousands of digits long that's a very",
    "start": "1495450",
    "end": "1501690"
  },
  {
    "text": "tough problem for a computer to solve and that's where the security of RSA comes in to detrol answer is 67 times 89",
    "start": "1501690",
    "end": "1510440"
  },
  {
    "text": "so if you think about this in terms of keys so our public key is the result in",
    "start": "1510440",
    "end": "1516270"
  },
  {
    "text": "prime so the five thousand nine hundred and sixty-three and our private key is 67 times eighty nine order two number 67",
    "start": "1516270",
    "end": "1523110"
  },
  {
    "text": "and 89 and it's more stuff that goes into the keys than that but the basic premise is around these prime numbers so",
    "start": "1523110",
    "end": "1532470"
  },
  {
    "text": "the way RSA works is if I want to send some data to one of you now you have your own key pair you have your own",
    "start": "1532470",
    "end": "1538620"
  },
  {
    "text": "public and private key the private key is private you keep that safe you don't know anyone else know it but your public",
    "start": "1538620",
    "end": "1544980"
  },
  {
    "text": "key you can let anyone else know it's you can put it on your website you can email it to people you can hand it to someone so if I want to send you some",
    "start": "1544980",
    "end": "1551970"
  },
  {
    "text": "data I encrypt the data using your public key and then you decrypt it using your private key because only you know",
    "start": "1551970",
    "end": "1558240"
  },
  {
    "text": "that then if you wanted to send something back to me you get my public key encrypts it with that public key",
    "start": "1558240",
    "end": "1563820"
  },
  {
    "text": "send me the data then I decrypt it with my private key so if we look in net",
    "start": "1563820",
    "end": "1572190"
  },
  {
    "text": "about how you can generate the keys so we have a class called RSA crypto service provider",
    "start": "1572190",
    "end": "1579409"
  },
  {
    "text": "and we pass in the key length into the constructor and then we can just call export parameters with false to give us",
    "start": "1580310",
    "end": "1586970"
  },
  {
    "text": "our public key and export parameters true to give us our private key so in this example here I'm just storing them",
    "start": "1586970",
    "end": "1593690"
  },
  {
    "text": "as two local memory variables but in the RSA implementation you can export those",
    "start": "1593690",
    "end": "1598730"
  },
  {
    "text": "to an XML file if you so want it to or you can store it in the windows crypto service container okay so to encryption",
    "start": "1598730",
    "end": "1609320"
  },
  {
    "text": "data move our encrypt method and we pass in our data again as a byte array and",
    "start": "1609320",
    "end": "1614900"
  },
  {
    "text": "then we constructs the crypto service provider objects again passing in the length of the key we want we import our",
    "start": "1614900",
    "end": "1621650"
  },
  {
    "text": "public key and then we just call RSA dot encrypt passing in that data and then",
    "start": "1621650",
    "end": "1628070"
  },
  {
    "text": "again we get a bite away back out the other side to decrypt is fairly similar",
    "start": "1628070",
    "end": "1633980"
  },
  {
    "text": "so we pass in our data as a byte array construct the object import the private",
    "start": "1633980",
    "end": "1640010"
  },
  {
    "text": "key this time because we're decrypting the information then call RSA decrypt and then we get the original plaintext",
    "start": "1640010",
    "end": "1646040"
  },
  {
    "text": "back out the other side though there is a limitation pravara say so you can encrypt more than the size of the key",
    "start": "1646040",
    "end": "1652130"
  },
  {
    "text": "length so if you've got 2048 bit key you can't encrypt more data than that key",
    "start": "1652130",
    "end": "1657170"
  },
  {
    "text": "which is among the limitations because it's based on what closer reference but modulus arithmetic so one thing you",
    "start": "1657170",
    "end": "1663830"
  },
  {
    "text": "might be thinking is well if I've got a very large piece of data I could chop it up into chunks and then crypt those",
    "start": "1663830",
    "end": "1668990"
  },
  {
    "text": "individually which you can do there's nothing stopping you from doing that but it's very inefficient and very slow so",
    "start": "1668990",
    "end": "1674030"
  },
  {
    "text": "we'll look at some techniques for what wants to do instead in a moment or a bit later okay so the last primitive that we",
    "start": "1674030",
    "end": "1683360"
  },
  {
    "text": "had on our list is digital signatures so",
    "start": "1683360",
    "end": "1689440"
  },
  {
    "start": "1688000",
    "end": "1688000"
  },
  {
    "text": "digital signatures are used for being able to sign some data so that you can",
    "start": "1689440",
    "end": "1695090"
  },
  {
    "text": "prove your fantasy of that data our digital signature has free components to it so we have key",
    "start": "1695090",
    "end": "1701090"
  },
  {
    "text": "generation we have a signing algorithm and then we have a signature verification method and the way it works",
    "start": "1701090",
    "end": "1709490"
  },
  {
    "text": "is if you have a large piece of data say other than our file you generate a hash or a hash mark of that data and then you",
    "start": "1709490",
    "end": "1716330"
  },
  {
    "text": "create a digital signature of that hash it's entirely in.net our digital signature is based on RSI so we have the",
    "start": "1716330",
    "end": "1722540"
  },
  {
    "text": "same kilo inflammations so we don't create the signature of the data itself we create a signature of a hash of that",
    "start": "1722540",
    "end": "1729470"
  },
  {
    "text": "data does anyone used websites at DocuSign or anything similar before it's one person",
    "start": "1729470",
    "end": "1737480"
  },
  {
    "text": "okay so it's a good analogy of what digital signature is about so DocuSign is a service where you can upload an",
    "start": "1737480",
    "end": "1743930"
  },
  {
    "text": "actual contract so like a job contract for example you write your name and various bits on the contract and then it",
    "start": "1743930",
    "end": "1750050"
  },
  {
    "text": "will create a hash of that data and digitally sign that contract it's kind of like an equivalent to having someone",
    "start": "1750050",
    "end": "1755720"
  },
  {
    "text": "witness you signing that document so if later on you ever in court and you wanted to you're trying to deny that you",
    "start": "1755720",
    "end": "1761900"
  },
  {
    "text": "have a signed that contract or you wants to deny that you put certain data in that contract you can't deny it because",
    "start": "1761900",
    "end": "1767930"
  },
  {
    "text": "it's been signed with your keys so if we look at my amazing piece of artwork to",
    "start": "1767930",
    "end": "1774800"
  },
  {
    "text": "try to describe this so we have Bob he wants to send a digital signature so",
    "start": "1774800",
    "end": "1780800"
  },
  {
    "text": "what he does is use his private key to sign his hash so remember back to RSI",
    "start": "1780800",
    "end": "1786440"
  },
  {
    "text": "when we encrypt abusing our puppies our public key but in this case the sender is using his private key to sign the",
    "start": "1786440",
    "end": "1793130"
  },
  {
    "text": "message because only he can sign it with his key so he sends out over the Internet",
    "start": "1793130",
    "end": "1798440"
  },
  {
    "text": "down to Alice at the bottom there and she uses Bob's public key to verify the signature so that means that she's",
    "start": "1798440",
    "end": "1805930"
  },
  {
    "text": "she'll get a response back saying where if it was indeed Bob's private key which signed that piece of data so again very",
    "start": "1805930",
    "end": "1816890"
  },
  {
    "text": "straightforward to use so to generate our key pair for a digital signature it's exactly the same as what we did for",
    "start": "1816890",
    "end": "1822830"
  },
  {
    "text": "RSA so we construct the RSA crypto service provider class telling that what",
    "start": "1822830",
    "end": "1830060"
  },
  {
    "text": "key lone free wants and then we just exports our public and private key so in this example game restoring it there's",
    "start": "1830060",
    "end": "1835880"
  },
  {
    "text": "just two member variables to sign some data we have to use this really nicely",
    "start": "1835880",
    "end": "1844300"
  },
  {
    "text": "worded class down here called the RSA pkcs signature formatter just rolls off the",
    "start": "1844300",
    "end": "1850250"
  },
  {
    "text": "tongue doesn't it so we have our sign data method and we pass in a byte array of our hash of the",
    "start": "1850250",
    "end": "1857510"
  },
  {
    "text": "data that we want to sign again remember we can't sign the entire document we're signing the hash of it we import our",
    "start": "1857510",
    "end": "1864860"
  },
  {
    "text": "private key because to sign the data we have to use our private key we construct the RSA pkcs1 signature formatter",
    "start": "1864860",
    "end": "1872390"
  },
  {
    "text": "we tell it what hashing algorithm we're using so in our case sha-256 and then we",
    "start": "1872390",
    "end": "1877700"
  },
  {
    "text": "call create signature and then that returns us a byte array of that digital signature so then to verify of what we",
    "start": "1877700",
    "end": "1885890"
  },
  {
    "text": "have or to verify that digital signature we pass in the hash of the data that",
    "start": "1885890",
    "end": "1891590"
  },
  {
    "text": "we've that we want to sign the original hash we pass in the bytes way of the",
    "start": "1891590",
    "end": "1896900"
  },
  {
    "text": "digital signature that was created construct the RSA objects import the",
    "start": "1896900",
    "end": "1902030"
  },
  {
    "text": "public key this time because remember we need to use a public key to verify the signature and this time we create the",
    "start": "1902030",
    "end": "1907580"
  },
  {
    "text": "RSA pkcs1 signature D formatter obviously and then we set the hash",
    "start": "1907580",
    "end": "1914810"
  },
  {
    "text": "algorithm to char 256 and then we just call verify signature passing in the hash of the data and the original",
    "start": "1914810",
    "end": "1922280"
  },
  {
    "text": "signature that was generated if it's valid you get a fault you get true returned if it's invalid you get false",
    "start": "1922280",
    "end": "1928730"
  },
  {
    "text": "returned so if it's false and you don't trust the hash of that data or the signature okay so we've gone very",
    "start": "1928730",
    "end": "1938030"
  },
  {
    "text": "quickly through some of the primitives that we've got in dotnet so if we do a quick recap so we talked about the idea",
    "start": "1938030",
    "end": "1944000"
  },
  {
    "start": "1940000",
    "end": "1940000"
  },
  {
    "text": "of confidentiality and to do that we use AES and RSA because there are encryption",
    "start": "1944000",
    "end": "1951140"
  },
  {
    "text": "protocols or encryption primitives for integrity that the ability for us to",
    "start": "1951140",
    "end": "1956240"
  },
  {
    "text": "detect if something's changed over time or not we looked at various different hashing algorithms but we've been using",
    "start": "1956240",
    "end": "1962720"
  },
  {
    "text": "mostly char 256 for fence occasion that's where we want to be able to prove",
    "start": "1962720",
    "end": "1968270"
  },
  {
    "text": "that it was someone that she generated that hash by using a key we used a hash",
    "start": "1968270",
    "end": "1973940"
  },
  {
    "text": "Mac and we use - are 256 variants in our example and therefore non-repudiation",
    "start": "1973940",
    "end": "1979790"
  },
  {
    "text": "which is where I want people to be out to deny having science and data or signed a contract we've just looked at",
    "start": "1979790",
    "end": "1986150"
  },
  {
    "text": "digital signatures those are some of our base primitives that are available to us in dotnet so what I want to look at now",
    "start": "1986150",
    "end": "1992809"
  },
  {
    "text": "is how we can combine some of those together to do what's called hybrid encryption okay so we mentioned before",
    "start": "1992809",
    "end": "2006730"
  },
  {
    "text": "that RSA has some limits on the amount of data that you can encrypt in one go",
    "start": "2006730",
    "end": "2012070"
  },
  {
    "text": "and we also want the flexibility in the speed and efficiency of AES but the",
    "start": "2012070",
    "end": "2018940"
  },
  {
    "text": "problem we have with that is the exchanging a key between two people it's very hard so what we're gonna look at",
    "start": "2018940",
    "end": "2024130"
  },
  {
    "text": "first of all is how you could combine RSA and AES together so that we can get the benefits of both so in our example",
    "start": "2024130",
    "end": "2033610"
  },
  {
    "text": "here we have an aes session key that we generated that's a 32 byte key we",
    "start": "2033610",
    "end": "2041620"
  },
  {
    "text": "generate our initialization vector which is 16 bytes and then we encrypt our data",
    "start": "2041620",
    "end": "2046870"
  },
  {
    "text": "using that session key an initialization vector just exactly what we've looked at earlier but then what we do is we use",
    "start": "2046870",
    "end": "2053169"
  },
  {
    "text": "our recipients public key and we encrypt that session key so we're encrypting that IES key we",
    "start": "2053169",
    "end": "2061480"
  },
  {
    "text": "sends that encrypted data and the encrypted key over to our recipients first of all they have to recover that",
    "start": "2061480",
    "end": "2067060"
  },
  {
    "text": "AES key so they decrypt it with RSA using their private key and once you've",
    "start": "2067060",
    "end": "2072850"
  },
  {
    "text": "recovered that encryption key they can then use a es to decrypt the data so for",
    "start": "2072850",
    "end": "2078940"
  },
  {
    "text": "is thinking of it as stuff that we store in a database or a packet of data this is what it like so we have our RSA",
    "start": "2078940",
    "end": "2084730"
  },
  {
    "text": "encrypted session key we have our AES initialization vector it doesn't have to be encrypted it can go in the crew and",
    "start": "2084730",
    "end": "2090990"
  },
  {
    "text": "we have the AES encrypted data so as fun",
    "start": "2090990",
    "end": "2097600"
  },
  {
    "text": "through that there's another example so who got Alice again generates her key she generates her initialization vector",
    "start": "2097600",
    "end": "2104230"
  },
  {
    "text": "16 bytes she encrypts her data with AES then she uses Bob's public key an RSA to",
    "start": "2104230",
    "end": "2112870"
  },
  {
    "text": "encrypt that AES key and then she sends out all over to Bob so he can read it so when he receives",
    "start": "2112870",
    "end": "2120460"
  },
  {
    "text": "that data he uses his private key to decrypt that AES key so he's recovered the key and",
    "start": "2120460",
    "end": "2127650"
  },
  {
    "text": "then using that recovered key and initialization vector which he's just been sent he uses AES to decrypt the message so he",
    "start": "2127650",
    "end": "2135040"
  },
  {
    "text": "gets a message meet me at noon blow the clock tower where a red rose in your button grace no he wants to send a",
    "start": "2135040",
    "end": "2141100"
  },
  {
    "text": "message back to Alice so he generates a new key because you never reuse keys you",
    "start": "2141100",
    "end": "2146710"
  },
  {
    "text": "always generate brand new ones so he generates a new session key first two bytes he generates a new initialization",
    "start": "2146710",
    "end": "2153430"
  },
  {
    "text": "vector which is 16 bytes then he's an aes encrypted message and then using",
    "start": "2153430",
    "end": "2159670"
  },
  {
    "text": "Alice's public key he encrypts that AES key saved that key is now encrypted and",
    "start": "2159670",
    "end": "2166360"
  },
  {
    "text": "then he sends a message back over to Alice so then she uses her private key",
    "start": "2166360",
    "end": "2173380"
  },
  {
    "text": "this time to recover that session key they move that session key and her",
    "start": "2173380",
    "end": "2178390"
  },
  {
    "text": "initialization vector she uses a a es to decrypt the message and she says I will",
    "start": "2178390",
    "end": "2183910"
  },
  {
    "text": "meet you I'll be wearing a blue blue hats and red boots she's very fashionable so if you think",
    "start": "2183910",
    "end": "2190600"
  },
  {
    "text": "about what we've done there then so we said we had a problem with AES where it's very difficult to send or share",
    "start": "2190600",
    "end": "2195910"
  },
  {
    "text": "keys between people but is he's quite a fast and efficient because it's very algorithmic in how it works but then",
    "start": "2195910",
    "end": "2202930"
  },
  {
    "text": "we've got a es which has keys that are split so makes it very easy for us to then use RSA to encrypt our other key",
    "start": "2202930",
    "end": "2211810"
  },
  {
    "text": "which is hard to send so we're actually getting the benefit of both those protocols together so let's build on",
    "start": "2211810",
    "end": "2218110"
  },
  {
    "text": "that a bit more and add integrity to it so this diagram virtually identical to",
    "start": "2218110",
    "end": "2224710"
  },
  {
    "start": "2221000",
    "end": "2221000"
  },
  {
    "text": "what we had before so you know we have our session key we encrypt our data with that session key I mean quit the session",
    "start": "2224710",
    "end": "2232420"
  },
  {
    "text": "key of the recipients public key and then I take a hash Mac of the ciphertext",
    "start": "2232420",
    "end": "2238180"
  },
  {
    "text": "and the initialization vector combined and because I'm doing a hash Mac I need to give it a key so I use the session",
    "start": "2238180",
    "end": "2244390"
  },
  {
    "text": "key which I still have an unencrypted copy of so that gets sent over to the recipient",
    "start": "2244390",
    "end": "2249759"
  },
  {
    "text": "they use RSA to recover the private key using that so they use RSA to recover",
    "start": "2249759",
    "end": "2256189"
  },
  {
    "text": "their AES key using their private key once they've recovered that key they",
    "start": "2256189",
    "end": "2261409"
  },
  {
    "text": "regenerate the hash mark of the ciphertext an initialization vector because they've now got the key to",
    "start": "2261409",
    "end": "2266749"
  },
  {
    "text": "passing to the hash Mac if the hash is matched and they can trust that the data has made it to them without being",
    "start": "2266749",
    "end": "2271880"
  },
  {
    "text": "changed so they can then go and decrypt the data using AES and they get the",
    "start": "2271880",
    "end": "2278269"
  },
  {
    "text": "message back if that hash mark is different so on that sensor then they'd just disregard the message because",
    "start": "2278269",
    "end": "2283309"
  },
  {
    "text": "something's changed so you don't trust it so if you think about the data that's",
    "start": "2283309",
    "end": "2290029"
  },
  {
    "text": "been sent again so we have the RSA encrypted session key the initialization vector the encrypted data and we also",
    "start": "2290029",
    "end": "2296959"
  },
  {
    "text": "sends the hash mark of the encrypted data this is four bits that we are sending so let's extend that a bit",
    "start": "2296959",
    "end": "2304489"
  },
  {
    "text": "further so we've added integrity and authentication because to calculate the hash they need to use the key but they",
    "start": "2304489",
    "end": "2310999"
  },
  {
    "text": "need to go to recover that key so that gives us offense equation as well as integrity so that's now as normal PDA",
    "start": "2310999",
    "end": "2318979"
  },
  {
    "start": "2316000",
    "end": "2316000"
  },
  {
    "text": "ssin so again very similar to what we had before we generate our session key",
    "start": "2318979",
    "end": "2326059"
  },
  {
    "text": "we generate the initialization vector encrypts our data for that session key and then we encrypt that session key",
    "start": "2326059",
    "end": "2333109"
  },
  {
    "text": "with the recipients public key that's exactly the same then again we calculate",
    "start": "2333109",
    "end": "2338209"
  },
  {
    "text": "the hash mark of the ciphertext an initialization vector using that session key that we generated that's exactly the",
    "start": "2338209",
    "end": "2344869"
  },
  {
    "text": "same as what we've just looked at a minute ago but then the extra step is we create a digital signature of that hash",
    "start": "2344869",
    "end": "2351799"
  },
  {
    "text": "Mac using our private key so we've encrypted the key using the recipients",
    "start": "2351799",
    "end": "2358789"
  },
  {
    "text": "public key because that's the encryption process of RSA but to create the digital signature I've used my private key so",
    "start": "2358789",
    "end": "2368059"
  },
  {
    "text": "that means n on the other side when the when they receive that data they first",
    "start": "2368059",
    "end": "2373609"
  },
  {
    "text": "have to recover that AES key using their private key in our RSA they then",
    "start": "2373609",
    "end": "2379969"
  },
  {
    "text": "recalculates the hash man because they've now recovered that case they can we calculate the hash if the",
    "start": "2379969",
    "end": "2385910"
  },
  {
    "text": "hashes match great we trust the data that's been sent if it doesn't match we",
    "start": "2385910",
    "end": "2391100"
  },
  {
    "text": "disregard the message because it's been tampered with or changed in transit but now because we have that hash we can",
    "start": "2391100",
    "end": "2397820"
  },
  {
    "text": "then use the original sender's public key to verify the digital signature so",
    "start": "2397820",
    "end": "2403370"
  },
  {
    "text": "if that comes back is true we know it was actually Alice that sent the message and not some other person so again if we",
    "start": "2403370",
    "end": "2413900"
  },
  {
    "text": "look at the amount of data that we're sending there so we have the RSA encrypted session key every initialization vector the",
    "start": "2413900",
    "end": "2420200"
  },
  {
    "text": "encrypted data with AES with our H Mac with the encrypted data and if our",
    "start": "2420200",
    "end": "2425270"
  },
  {
    "text": "digital signature now if you're writing a system that does this I mean you could either you know you'd be transferring",
    "start": "2425270",
    "end": "2430910"
  },
  {
    "text": "that around in the database you could see realize a lot that stuff to JSON or XML when you're actually sending it between different people because all the",
    "start": "2430910",
    "end": "2437780"
  },
  {
    "text": "data in there is encrypted okay",
    "start": "2437780",
    "end": "2444440"
  },
  {
    "start": "2443000",
    "end": "2443000"
  },
  {
    "text": "so let's recap what we've done because we've covered a lot of stuff very quickly there so we started off by",
    "start": "2444440",
    "end": "2450830"
  },
  {
    "text": "looking at random numbers because they're absolutely pivotal to everything we want to do you need good quality random numbers for symmetric encryption",
    "start": "2450830",
    "end": "2456920"
  },
  {
    "text": "keys and for our hash message authentication codes we've looked at",
    "start": "2456920",
    "end": "2463040"
  },
  {
    "text": "various Tiff's in hashing o H Mike algorithms but the one we focused on which are 256 for the purpose of our",
    "start": "2463040",
    "end": "2468440"
  },
  {
    "text": "example we took a look at password storage so we looked at various different methods of doing that one we",
    "start": "2468440",
    "end": "2476180"
  },
  {
    "text": "didn't cover his obviously storing passwords in the clear but there wasn't really any point including that one in the slides because we all know that's",
    "start": "2476180",
    "end": "2481880"
  },
  {
    "text": "bad but then we looked at hashing hashing of passwords so again that's",
    "start": "2481880",
    "end": "2486980"
  },
  {
    "text": "been quite a common technique that's been used for many years but they're very easy to break by brute force or",
    "start": "2486980",
    "end": "2493580"
  },
  {
    "text": "dictionary attacks using tools that hash count so to make that slightly better we",
    "start": "2493580",
    "end": "2499400"
  },
  {
    "text": "then looked at doing salted hashes where you add additional entropy onto the password before you hash the password so",
    "start": "2499400",
    "end": "2505520"
  },
  {
    "text": "that could be a 32 byte random number that we generated a random number generator again this is better I mean",
    "start": "2505520",
    "end": "2511760"
  },
  {
    "text": "probably vast majority of systems out there these days probably still use so passwords but the problem is tolls our",
    "start": "2511760",
    "end": "2519030"
  },
  {
    "text": "hash count on very part of very fast pcs with high-end graphics cards in there can test billions of combinations a",
    "start": "2519030",
    "end": "2524790"
  },
  {
    "text": "second so whilst they might be secure now they might not be secure in say 2 or 5 years so then we looked at how we can",
    "start": "2524790",
    "end": "2532380"
  },
  {
    "text": "algorithmically slow down the hashing process for passwords and for that we looked at password based Kido",
    "start": "2532380",
    "end": "2538099"
  },
  {
    "text": "password-based key derivation functions and we use an object called RFC 9 8 - 8",
    "start": "2538099",
    "end": "2544859"
  },
  {
    "text": "derive bytes which is a very easy one to miss in a dotnet framework because it doesn't really make much sense unless",
    "start": "2544859",
    "end": "2550440"
  },
  {
    "text": "you know what it is beforehand so from then we took a look at symmetric",
    "start": "2550440",
    "end": "2556290"
  },
  {
    "text": "encryption so we discussed briefly about des Triple DES and AES but the one we wanted to focus on for new code is AES",
    "start": "2556290",
    "end": "2563640"
  },
  {
    "text": "and AES is what's called a block cipher and it's a symmetric block cipher so use",
    "start": "2563640",
    "end": "2568950"
  },
  {
    "text": "the same key to encrypt and decrypt but then we discussed at the actual problem of AES is that actually transferring",
    "start": "2568950",
    "end": "2576390"
  },
  {
    "text": "those keys between people is very difficult to do securely so then we",
    "start": "2576390",
    "end": "2581640"
  },
  {
    "text": "looked at asymmetric encryption and we looked at RSA in our example so RSA has",
    "start": "2581640",
    "end": "2587250"
  },
  {
    "text": "pros and it has cons so it is a very secure encryption algorithm but it is",
    "start": "2587250",
    "end": "2592950"
  },
  {
    "text": "quite slow because it's more mathematical in how it works it's all based around modulus arithmetic as opposed to something more algorithmic",
    "start": "2592950",
    "end": "2599839"
  },
  {
    "text": "like a yes but there are limits with RSA so you can't encrypt data is longer than",
    "start": "2599839",
    "end": "2605940"
  },
  {
    "text": "yet real key size so that's a particular downside and it's quite a slope so after",
    "start": "2605940",
    "end": "2611880"
  },
  {
    "text": "that we took a very quick look at digital signatures and we looked at classes like the RSA pkcs1 signature for",
    "start": "2611880",
    "end": "2619109"
  },
  {
    "text": "matter and D for matter classes which are brilliantly named objects and what",
    "start": "2619109",
    "end": "2625430"
  },
  {
    "text": "digital signatures give us is the ability to do non repudiation of data so if someone digitally signed something",
    "start": "2625430",
    "end": "2630869"
  },
  {
    "text": "with their private key they can't then go and deny having to sign that data down the line and digital signatures are",
    "start": "2630869",
    "end": "2637260"
  },
  {
    "text": "actually valid in courts well they certainly are in the UK so if there's a contract dispute and you've used",
    "start": "2637260",
    "end": "2643589"
  },
  {
    "text": "something like DocuSign you can actually use the fact that that document has been digitally signed as evidence in court has ever disputes so once we looked at",
    "start": "2643589",
    "end": "2652290"
  },
  {
    "text": "our primitives we then looked at combining some of those together to do what's called hybrid encryption so what",
    "start": "2652290",
    "end": "2657570"
  },
  {
    "text": "we ended up with was a mechanism where we can use RSA to encrypt our symmetric",
    "start": "2657570",
    "end": "2662880"
  },
  {
    "text": "in a symmetric encryption keys so that gets us past the problem of securely moving those keys around and then we",
    "start": "2662880",
    "end": "2669990"
  },
  {
    "text": "built on that by adding some additional integrity using hash Mac sha-256 hash mark which also uses that encryption",
    "start": "2669990",
    "end": "2677250"
  },
  {
    "text": "keys that we generated so that gave us some integrity and authentication when we send that message between two people",
    "start": "2677250",
    "end": "2683900"
  },
  {
    "text": "and then to finish that off we use digital signatures to digitally sign the",
    "start": "2683900",
    "end": "2689100"
  },
  {
    "text": "data that we're sending so that the receiver knows that it definitely came from a specific sender there's quite a",
    "start": "2689100",
    "end": "2696930"
  },
  {
    "text": "lot in one go after lunch hope everyone's managed to follow through so",
    "start": "2696930",
    "end": "2701940"
  },
  {
    "text": "what next so if it is something that interests you then I have got a plural site course on this it's nearly 4 hours",
    "start": "2701940",
    "end": "2708240"
  },
  {
    "start": "2703000",
    "end": "2703000"
  },
  {
    "text": "long which goes through a lot slower and has lots of worked examples so treat this talkers you know the art of the",
    "start": "2708240",
    "end": "2714090"
  },
  {
    "text": "possible if it's something that you're interested in then that course will probably useful for you does everyone",
    "start": "2714090",
    "end": "2720000"
  },
  {
    "text": "here use plural sites Oh brilliant fair few of you so that's on there so you can",
    "start": "2720000",
    "end": "2725100"
  },
  {
    "text": "just go and watch it if you want to take things a bit further I mean we did this",
    "start": "2725100",
    "end": "2730320"
  },
  {
    "text": "in the workshop the other day where we used the azure key volt which is a way of securely storing encryption keys in",
    "start": "2730320",
    "end": "2736140"
  },
  {
    "text": "Asia it uses hardware security modules behind the scenes to store those keys so this course walks you through how to do",
    "start": "2736140",
    "end": "2743070"
  },
  {
    "text": "that so instead of locally storing RSA keys in certificates or whatnot you can just store them in a vertex e2 key vault",
    "start": "2743070",
    "end": "2751880"
  },
  {
    "text": "if you want to play around vault a source code for everything we've talked about today I've got worked examples of a whole lot",
    "start": "2753380",
    "end": "2759270"
  },
  {
    "text": "there it's all under the MIT license so you can just take it and do what you want with it if it breaks it's not my",
    "start": "2759270",
    "end": "2764640"
  },
  {
    "text": "fault but examples go through each of the",
    "start": "2764640",
    "end": "2770460"
  },
  {
    "text": "primitives how they work with different tests and then it works through the",
    "start": "2770460",
    "end": "2775740"
  },
  {
    "text": "hybrid encryption example so you can just use the code that's there for doing the - encryption so you don't have to",
    "start": "2775740",
    "end": "2780990"
  },
  {
    "text": "think about it too much you can just use important thing is understanding how it works these slides won't get hub on my",
    "start": "2780990",
    "end": "2790259"
  },
  {
    "text": "repository in the conference talks repo so if you want to grab the slides at all there's a version of them there and",
    "start": "2790259",
    "end": "2799579"
  },
  {
    "text": "there's some books here which are very useful so these are all books I've",
    "start": "2801079",
    "end": "2806130"
  },
  {
    "text": "personally enjoyed reading if cryptography saying you are interested in then I recommend these the code book",
    "start": "2806130",
    "end": "2811319"
  },
  {
    "text": "by Simon Singh is kind of a standard novel sized book it talks about the history of cryptography from sort of",
    "start": "2811319",
    "end": "2818009"
  },
  {
    "text": "ancient times where it's all done on paper right away through to modern digital encryption techniques the book",
    "start": "2818009",
    "end": "2824939"
  },
  {
    "text": "in the middle every day cryptography there's actually a new edition out of it now it's got a white cover it was released toward the end of last year",
    "start": "2824939",
    "end": "2830609"
  },
  {
    "text": "which often but not ready yet the new one but the first half of the book talks about how a lot of these algorithms work",
    "start": "2830609",
    "end": "2836369"
  },
  {
    "text": "internally so because it's quite a lot of detail but it's not overly mathematical it's quite easy to follow through and then the second half of the",
    "start": "2836369",
    "end": "2843359"
  },
  {
    "text": "book talks about some different practical applications so like how TLS works like the handshake on TLS however",
    "start": "2843359",
    "end": "2848849"
  },
  {
    "text": "cash machines do they I'm handshake between you know the ATM in the bank because it goes through lots of",
    "start": "2848849",
    "end": "2854279"
  },
  {
    "text": "practical real-world examples and then",
    "start": "2854279",
    "end": "2859380"
  },
  {
    "text": "the book we have at the end there is applied cryptography and this is the book where back in the nineties the NSA",
    "start": "2859380",
    "end": "2865319"
  },
  {
    "text": "tried to ban it because back then cryptography was classed more as like ammunition or a weapon so there's very",
    "start": "2865319",
    "end": "2871829"
  },
  {
    "text": "strict export regulations on cryptography but this book goes into a lot of detail about how a lot of the",
    "start": "2871829",
    "end": "2877679"
  },
  {
    "text": "older algorithms are built it doesn't include AES kitten before that but if you want a really good mathematical",
    "start": "2877679",
    "end": "2883499"
  },
  {
    "text": "explanation of how a lot of these different algorithms work then that book is ideal to look at so that's it thank",
    "start": "2883499",
    "end": "2891749"
  },
  {
    "text": "you very much you got 10 minutes or so back in your diary to go get some coffee so thank you",
    "start": "2891749",
    "end": "2897179"
  },
  {
    "text": "very much [Applause]",
    "start": "2897179",
    "end": "2904919"
  }
]