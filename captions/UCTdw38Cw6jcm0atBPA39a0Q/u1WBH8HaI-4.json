[
  {
    "start": "0",
    "end": "18000"
  },
  {
    "text": "hi everyone and welcome to nfc 2020 um today we're talking about building a rock-solid serverless applications",
    "start": "10160",
    "end": "17039"
  },
  {
    "text": "my name is william liebenberg i'm a solution architect at ssw you can find me on twitter i've got a",
    "start": "17039",
    "end": "23519"
  },
  {
    "start": "18000",
    "end": "18000"
  },
  {
    "text": "website called azuregems.io so you can find some cool tips about azure you can find me on linkedin so if you",
    "start": "23519",
    "end": "29279"
  },
  {
    "text": "want to engage a bit more formally um and just a bit of my background i started programming was about five years",
    "start": "29279",
    "end": "35760"
  },
  {
    "text": "old i wrote my first program on a spectrum video three two eight it's a big clunky beige",
    "start": "35760",
    "end": "42480"
  },
  {
    "text": "looking thing like this and it had whole 8k of memory everything else after that had to be loaded from",
    "start": "42480",
    "end": "48320"
  },
  {
    "text": "cassette tapes they hardly ever exist anymore so long before the internet and cd-roms and all that kind of stuff",
    "start": "48320",
    "end": "54399"
  },
  {
    "text": "so everything was pretty basic back then um and then uh you know years later i",
    "start": "54399",
    "end": "61680"
  },
  {
    "text": "started developing professionally in 2004 but this was when ide is pretty much low raised",
    "start": "61680",
    "end": "68400"
  },
  {
    "text": "compared to these days but still we felt like we could rule the world with source code eventually i moved over to dot net",
    "start": "68400",
    "end": "75200"
  },
  {
    "text": "version two skip version one because i thought what's this crazy new technology it's not gonna last but hey",
    "start": "75200",
    "end": "81040"
  },
  {
    "text": "happy to say it was wrong we've got net five these days uh it's been with us for so so long and",
    "start": "81040",
    "end": "86880"
  },
  {
    "text": "it is fantastic i spent many years in the 3d",
    "start": "86880",
    "end": "92159"
  },
  {
    "text": "industrial training uh industry virtual reality and i'm lucky enough to get one of the very first oculus dev",
    "start": "92159",
    "end": "97840"
  },
  {
    "text": "oculus rift dev kits in australia to help train people in their jobs to work safely so they don't hurt anyone else",
    "start": "97840",
    "end": "103840"
  },
  {
    "text": "or themselves then i fell in love with azure in about 2014. so about six years ago uh",
    "start": "103840",
    "end": "110880"
  },
  {
    "text": "not a day goes by that i don't use azure it's definitely it's so big there's something for everyone and today we're going to have a look at",
    "start": "110880",
    "end": "116719"
  },
  {
    "text": "a small slice of azure so we start off by looking at what is",
    "start": "116719",
    "end": "122719"
  },
  {
    "text": "clean code and the solid principles then how do we apply that to building",
    "start": "122719",
    "end": "129440"
  },
  {
    "text": "and architecting our serverless applications then i want to sort of go and see what can we do to harden our applications",
    "start": "129440",
    "end": "136080"
  },
  {
    "text": "and add some resiliency and make sure then they can perform you know scale efficiently and yeah",
    "start": "136080",
    "end": "142319"
  },
  {
    "text": "let's get started with clean code so why bother with clean code well i'm",
    "start": "142319",
    "end": "148879"
  },
  {
    "text": "sure we've all been in this scenario the you know we do aspirate reviews or code reviews",
    "start": "148879",
    "end": "154800"
  },
  {
    "text": "and you know we measure the quality of code as a standard measure the wtfs per minute so uh",
    "start": "154800",
    "end": "161760"
  },
  {
    "text": "you know solid principles help us sort of to either you know make sure we have this very low",
    "start": "161760",
    "end": "166800"
  },
  {
    "text": "rate of wtfs per minute now one end you'll have the devs that sort of come in there the duct tape coders they just",
    "start": "166800",
    "end": "173519"
  },
  {
    "text": "quickly fix it up and say yeah it works uh you know whatever tech that we've created we'll take care of it later ship",
    "start": "173519",
    "end": "179120"
  },
  {
    "text": "it right now on the other end we can have the architectural asthma astronauts",
    "start": "179120",
    "end": "186319"
  },
  {
    "text": "and they can talk about architecture all day long you know and never actually ever write",
    "start": "186319",
    "end": "191519"
  },
  {
    "text": "any code never get anything out the door and they're very expensive these guys so",
    "start": "191519",
    "end": "196720"
  },
  {
    "text": "um you know is it worth it so i think for us we should go and find a middle ground so",
    "start": "196720",
    "end": "203040"
  },
  {
    "text": "that we can write you know nice code and simple you don't spend too much time on it and they're gonna have good",
    "start": "203040",
    "end": "208879"
  },
  {
    "text": "architectures that are easy to reason about and you know get our product out the door and uh you know",
    "start": "208879",
    "end": "215599"
  },
  {
    "text": "have something of value out there so with clean code there's two main areas we want our code",
    "start": "215840",
    "end": "222640"
  },
  {
    "text": "easy to be honest to understand and it should also be easy to change so",
    "start": "222640",
    "end": "228480"
  },
  {
    "text": "looking at the execution flow should be easy to understand you read the code it just makes sense everything that the",
    "start": "228480",
    "end": "234879"
  },
  {
    "text": "classes do or the way they interact to be nice and simple and you know you don't have to spend a",
    "start": "234879",
    "end": "240080"
  },
  {
    "text": "lot of time trying to figure it out then when we need to change our code uh",
    "start": "240080",
    "end": "248480"
  },
  {
    "text": "you know things should only have one reason to change so that single responsibility is very important and again just looking at your class",
    "start": "248480",
    "end": "254239"
  },
  {
    "text": "interface should be simple easy to understand and it should do really what it says on the box",
    "start": "254239",
    "end": "261040"
  },
  {
    "text": "you don't want to say create new customer and inside it actually goes and deletes a",
    "start": "261040",
    "end": "266400"
  },
  {
    "text": "customer that's just not nice so all these things put together it's nice it's very important",
    "start": "266400",
    "end": "272639"
  },
  {
    "text": "and there's sort of been summed up in five principles that formerly solid principles and they were",
    "start": "272639",
    "end": "279680"
  },
  {
    "text": "popularized by uncle bob or rob martin in his book clean code so if you're not familiar",
    "start": "279680",
    "end": "287199"
  },
  {
    "text": "with these principles yet that's fine we're going to go through them um and but if you are just maybe put your",
    "start": "287199",
    "end": "293520"
  },
  {
    "text": "hand up in the chat there and let me know what you think about it one side effect",
    "start": "293520",
    "end": "299199"
  },
  {
    "text": "of writing clinton code is that you actually end up with a lot of code and a lot of files",
    "start": "299199",
    "end": "305919"
  },
  {
    "text": "so you need a way to organize this and this is where clean architecture comes in",
    "start": "305919",
    "end": "311039"
  },
  {
    "text": "so clear architecture sort of gives you the ability to write the core of the application it's independent of any other frameworks",
    "start": "311039",
    "end": "319199"
  },
  {
    "text": "it's all testable highly testable you can take the ui let's say it was originally written with",
    "start": "319199",
    "end": "325360"
  },
  {
    "text": "react you can swap that out and use blazer latest and greatest or you can swap from",
    "start": "325360",
    "end": "330400"
  },
  {
    "text": "sql server to cosmos db no problem see the core of your application shouldn't need to change",
    "start": "330400",
    "end": "335440"
  },
  {
    "text": "for any reason it doesn't depend on anything external so for instance if you're",
    "start": "335440",
    "end": "341759"
  },
  {
    "text": "you're upgrading a dependency the core of the application shouldn't need to change",
    "start": "341759",
    "end": "346800"
  },
  {
    "text": "um and this is all possible because the dependencies all point inwards you can see the arrows there nothing's",
    "start": "346800",
    "end": "352320"
  },
  {
    "text": "pointing outwards so any changes that you're made on outside don't change the code in the middle",
    "start": "352320",
    "end": "359520"
  },
  {
    "text": "really nice so if you want a template for getting a clean architecture project up and running in seconds you can check",
    "start": "359520",
    "end": "365759"
  },
  {
    "start": "362000",
    "end": "362000"
  },
  {
    "text": "out jason taylor's uh clean architecture solution on github and just a few more rules about you know",
    "start": "365759",
    "end": "372720"
  },
  {
    "text": "clean architecture and a lot more coded examples you can check out the rules of clean architectural",
    "start": "372720",
    "end": "378240"
  },
  {
    "text": "link at ssw okay so now we know what clean code is",
    "start": "378240",
    "end": "383600"
  },
  {
    "text": "about what solid principles there are and how are we now going to apply that to servers",
    "start": "383600",
    "end": "391600"
  },
  {
    "text": "okay i'm going to take a simple application and call this our classic example",
    "start": "392840",
    "end": "399759"
  },
  {
    "start": "393000",
    "end": "393000"
  },
  {
    "text": "uh it's just a simple app there's a server there's a database and a static site these days in azure",
    "start": "399759",
    "end": "406000"
  },
  {
    "text": "we'll say it's a static web application so the icon's slightly out of date already but",
    "start": "406000",
    "end": "411199"
  },
  {
    "text": "it's very much the same thing all right and we've got our readers that go to the site and with authors that go and add new content",
    "start": "411199",
    "end": "418800"
  },
  {
    "text": "but people like to imagine uh the world's case scenarios so uh when",
    "start": "418800",
    "end": "425680"
  },
  {
    "text": "things go wrong and go really wrong your server ram or hard drive space",
    "start": "425680",
    "end": "433919"
  },
  {
    "text": "yeah things just stopped working we don't have connectivity to an application we can't update our site we can't even",
    "start": "433919",
    "end": "441280"
  },
  {
    "text": "get to the database you know so we're starting to panic and you know we don't",
    "start": "441280",
    "end": "447680"
  },
  {
    "text": "really know what our user experience is going to be right now because well even the static site can't access",
    "start": "447680",
    "end": "452800"
  },
  {
    "text": "the api for any sort of dynamic information okay so we go away and try and figure out what",
    "start": "452800",
    "end": "459280"
  },
  {
    "text": "can we do to make this better and you'll definitely run into serverless but why would you want to go",
    "start": "459280",
    "end": "465759"
  },
  {
    "start": "463000",
    "end": "463000"
  },
  {
    "text": "down the serverless path well when a server goes down you don't know about it you know the the",
    "start": "465759",
    "end": "473039"
  },
  {
    "text": "serverless providers azure aws gcp they'll just take care of that for you",
    "start": "473039",
    "end": "478080"
  },
  {
    "text": "you generally tend to spend less money with serverless because the way that it",
    "start": "478080",
    "end": "483280"
  },
  {
    "text": "scales sort of on demand for you you get rid of that over provisioning",
    "start": "483280",
    "end": "488879"
  },
  {
    "text": "problem or under provisioning given so by digging a bit deeper",
    "start": "488879",
    "end": "494639"
  },
  {
    "text": "you know why you want to use serverless well they remove or abstract all that",
    "start": "494639",
    "end": "500240"
  },
  {
    "text": "hardware issues away for you and you just focus on your codes it's a very simplified programming model",
    "start": "500240",
    "end": "505360"
  },
  {
    "text": "it even helps to simplify your devops because applications are smaller they have less dependencies you know",
    "start": "505360",
    "end": "512240"
  },
  {
    "text": "they might just have one database rather than some applications can have access to multiple databases and dependent services so yeah",
    "start": "512240",
    "end": "519919"
  },
  {
    "text": "it supplies their box like i said it helps you with the",
    "start": "519919",
    "end": "525200"
  },
  {
    "text": "problem of over or under provisioning your infrastructure your resources",
    "start": "525200",
    "end": "530880"
  },
  {
    "text": "so you don't have a gigantic server that is only being utilized in five percent of it or you're always running at 100 and you",
    "start": "530880",
    "end": "537839"
  },
  {
    "text": "can never fulfill all the requests so this consumption based building you basically only pay for what you use",
    "start": "537839",
    "end": "544080"
  },
  {
    "text": "uh and no more which is really cool and event driven scaling so that's really important because uh our",
    "start": "544080",
    "end": "551440"
  },
  {
    "text": "application can do um things that look at blob storages you know react of when a file is uploaded",
    "start": "551440",
    "end": "557120"
  },
  {
    "text": "somewhere or um someone sends you a message not just a http message but from a message bus or signalr for",
    "start": "557120",
    "end": "563839"
  },
  {
    "text": "instance so whenever those messages come in and we start getting a spike our application can quickly scale out",
    "start": "563839",
    "end": "570320"
  },
  {
    "text": "and take care of just running smoothly for us now because the applications are smaller",
    "start": "570320",
    "end": "575839"
  },
  {
    "text": "they have less dependencies and you know they sort of start having less coupling",
    "start": "575839",
    "end": "580880"
  },
  {
    "text": "so we don't have a gigantic service that or a monolithic service that needs to",
    "start": "580880",
    "end": "586160"
  },
  {
    "text": "know about five or six or more dependencies down the track so everything's just loosely coupled",
    "start": "586160",
    "end": "592320"
  },
  {
    "text": "and it's easier to test and you can just have much better confidence once you do release your application",
    "start": "592320",
    "end": "600000"
  },
  {
    "start": "599000",
    "end": "599000"
  },
  {
    "text": "so looking at the serverless services available in azure",
    "start": "600000",
    "end": "605279"
  },
  {
    "text": "um you know for compute we have azure functions uh logic apps we can even run everything",
    "start": "605279",
    "end": "611200"
  },
  {
    "text": "inside of kubernetes as serverless container instances it's pretty cool when it comes to data",
    "start": "611200",
    "end": "618560"
  },
  {
    "text": "there's cosmos db even solar sql is now a thing which is really cool and storage so you know we basically can",
    "start": "618560",
    "end": "626160"
  },
  {
    "text": "just uh be concerned about data we don't have to worry about the unlike hardware at all you just put that record",
    "start": "626160",
    "end": "632720"
  },
  {
    "text": "there put that file there done and it works for us um another set of services i want to",
    "start": "632720",
    "end": "639040"
  },
  {
    "text": "look at is messaging services so we have actually quite a lot of them available so",
    "start": "639040",
    "end": "644880"
  },
  {
    "text": "um azure service bus event hub event grid uh even signal r service uh it's they're",
    "start": "644880",
    "end": "651360"
  },
  {
    "text": "all available and they're serverless and they just scale to whatever demand we need i'm going to pick these three i'm going",
    "start": "651360",
    "end": "658240"
  },
  {
    "text": "to start with azure functions because they scale elastically you know i want my application to",
    "start": "658240",
    "end": "665120"
  },
  {
    "start": "659000",
    "end": "659000"
  },
  {
    "text": "quickly just spin up uh more instances when my application gets used heavily and when things die down scale back down",
    "start": "665120",
    "end": "672720"
  },
  {
    "text": "to zero and then i don't pay anything it's really nice",
    "start": "672720",
    "end": "677839"
  },
  {
    "text": "the benefit is also that we can run azure function apps anyway so not just in azure as functions",
    "start": "677839",
    "end": "684000"
  },
  {
    "text": "as a service while we run them in containers you can even run them on a prank so anyone can run there's no more vendor",
    "start": "684000",
    "end": "691360"
  },
  {
    "text": "locking that people be concerned about",
    "start": "691360",
    "end": "695920"
  },
  {
    "text": "it provides a no simple sort of model but it's actually not only sql so there's a few other",
    "start": "698800",
    "end": "704000"
  },
  {
    "text": "varieties that we can use from customers db like graph databases column wide databases",
    "start": "704000",
    "end": "709200"
  },
  {
    "text": "with cassandra and even mongodb so a lot of models are supported really",
    "start": "709200",
    "end": "714480"
  },
  {
    "text": "nice and it can elastically scale so in my application can ask cosmos to be hey",
    "start": "714480",
    "end": "719920"
  },
  {
    "text": "quickly scale up we've got a heavy operation coming in and when you're done scale back down and it happens very fast",
    "start": "719920",
    "end": "725920"
  },
  {
    "text": "very nice a really cool feature that we have as well is change notification um so what this is once you write a",
    "start": "725920",
    "end": "733600"
  },
  {
    "text": "record or an item or a document everything's got more than one name when you write a document to",
    "start": "733600",
    "end": "739279"
  },
  {
    "text": "cosmos db you can actually trigger some custom azure function code to run um",
    "start": "739279",
    "end": "744399"
  },
  {
    "text": "you know which is like the side concern it's not maybe part of your main application but you still want to react to that event",
    "start": "744399",
    "end": "750079"
  },
  {
    "text": "maybe you want to pre-cache some data or generate a separate report and you don't want to then have to go",
    "start": "750079",
    "end": "756160"
  },
  {
    "text": "and bake that into your main application this is really nice so you can take care of some other cross-cutting concerns",
    "start": "756160",
    "end": "762240"
  },
  {
    "text": "using the change feed and finally with service bus when it comes to",
    "start": "762240",
    "end": "768560"
  },
  {
    "text": "sending messages they guarantee the delivery of that message so once it goes into the bus it'll",
    "start": "768560",
    "end": "773760"
  },
  {
    "text": "always be able to be read at the other end and we can do that with different things",
    "start": "773760",
    "end": "780320"
  },
  {
    "text": "we can use just plain cues or we can use topics with subscriptions and filters and we'll look",
    "start": "780320",
    "end": "786240"
  },
  {
    "text": "at them a little bit later very very cool so we take that classic application we",
    "start": "786240",
    "end": "792720"
  },
  {
    "text": "saw earlier and you know after a bit of playing around you know these are the resources we chose and broke the application up",
    "start": "792720",
    "end": "798800"
  },
  {
    "text": "into a few smaller pieces so we're going to use azure service bus to send messages and have",
    "start": "798800",
    "end": "806800"
  },
  {
    "text": "our functions listen to a topic and whenever a message arrives it will trigger that function",
    "start": "806800",
    "end": "813040"
  },
  {
    "text": "application to run and produce some sort of output",
    "start": "813040",
    "end": "818000"
  },
  {
    "text": "and then for our database like i mentioned earlier you can use the change feed",
    "start": "820560",
    "end": "825920"
  },
  {
    "text": "it's very handy when a record is written to the database we can raise an event or trigger an event and run some custom code to",
    "start": "825920",
    "end": "833199"
  },
  {
    "text": "take care of something uh that's not built into the main application or even that's not part of the",
    "start": "833199",
    "end": "838800"
  },
  {
    "text": "main domain of the application at all",
    "start": "838800",
    "end": "843839"
  },
  {
    "text": "is the single responsibility single responsibility principle",
    "start": "855279",
    "end": "861600"
  },
  {
    "text": "it means that the only one code have one reason change this principle actually goes hand",
    "start": "861600",
    "end": "868240"
  },
  {
    "text": "in hand with one further down the line the interface segregation principle but i'm going to cover them separately",
    "start": "868240",
    "end": "875920"
  },
  {
    "text": "so an example of uh srp with our application is the resize images application",
    "start": "875920",
    "end": "884880"
  },
  {
    "text": "um so if i need to change this application uh it's only because i need to do something about images",
    "start": "884880",
    "end": "891040"
  },
  {
    "text": "it has absolutely no concern about the markdown that we process in another",
    "start": "891040",
    "end": "897360"
  },
  {
    "text": "application so you know i don't make a change here and down the line something else wiggles around",
    "start": "897360",
    "end": "902639"
  },
  {
    "text": "and you know it is basically just focusing changes on one small bit of",
    "start": "902639",
    "end": "908079"
  },
  {
    "text": "functionality one application as it is in our case",
    "start": "908079",
    "end": "913519"
  },
  {
    "text": "um so yeah with a random map down like mentioned if i change it i don't want anything to change in the render images application",
    "start": "913519",
    "end": "919519"
  },
  {
    "text": "at all the next two principles you can sort of combine them together",
    "start": "919519",
    "end": "926720"
  },
  {
    "start": "922000",
    "end": "922000"
  },
  {
    "text": "and build something really nice so the open close principle it means open for extension but closed",
    "start": "926720",
    "end": "932880"
  },
  {
    "text": "for modification so imagine we have just version one of an",
    "start": "932880",
    "end": "939279"
  },
  {
    "text": "application out and uh you know we want to improve on that uh you know we don't wanna go and just",
    "start": "939279",
    "end": "945839"
  },
  {
    "text": "rip out the application from production and slot the new one in you can do that in a really nice way with azure functions um an",
    "start": "945839",
    "end": "953600"
  },
  {
    "text": "lsp or the list off substitution principle is that we can take an implementation",
    "start": "953600",
    "end": "958959"
  },
  {
    "text": "and swap it out for something that it does the same thing so like i mentioned in our example",
    "start": "958959",
    "end": "964560"
  },
  {
    "text": "this is just a smaller slice of that application with the resize images again uh",
    "start": "964560",
    "end": "971759"
  },
  {
    "text": "let's say now i want to go right version two it does the resizing quicker it probably",
    "start": "971759",
    "end": "977360"
  },
  {
    "text": "has a bit higher quality but you know i don't wanna have to you know swap the",
    "start": "977360",
    "end": "982560"
  },
  {
    "text": "version one in uh swap out version one straight away while i'm developing",
    "start": "982560",
    "end": "987759"
  },
  {
    "text": "version two so i can actually deploy version two straight away i can react to the same messages that",
    "start": "987759",
    "end": "994240"
  },
  {
    "text": "version one gets i can test that output can write it to a different site uh or you know anywhere else just to",
    "start": "994240",
    "end": "1001040"
  },
  {
    "text": "have some way of monitoring the output from that and once i'm happy cool i hook that up i'll put its output back to production",
    "start": "1001040",
    "end": "1007680"
  },
  {
    "text": "i can turn off the messaging for version one now it's gone version two is running and yeah it's all",
    "start": "1007680",
    "end": "1013600"
  },
  {
    "text": "happening very quick and easy cool",
    "start": "1013600",
    "end": "1018639"
  },
  {
    "text": "now this is the interface segregation principle and this one for me is very",
    "start": "1018639",
    "end": "1024160"
  },
  {
    "text": "important people tend to try and write massive",
    "start": "1024160",
    "end": "1029280"
  },
  {
    "text": "great apis and then we end up with even monolithic serverless applications",
    "start": "1029280",
    "end": "1035678"
  },
  {
    "text": "so when you have an application try and limit the number of endpoints or the number of",
    "start": "1036079",
    "end": "1042000"
  },
  {
    "text": "features that you're trying to build into that application there's a few basic benefits that you get so you have less dependencies",
    "start": "1042000",
    "end": "1048640"
  },
  {
    "text": "potentially so your application binaries are going to be smaller and that also",
    "start": "1048640",
    "end": "1055120"
  },
  {
    "text": "helps to not improve just the cold start times which is a serverless feature um",
    "start": "1055120",
    "end": "1062000"
  },
  {
    "text": "but it also helps your applications scale out quicker so when when that event driven demand",
    "start": "1062000",
    "end": "1067600"
  },
  {
    "text": "comes in and your application has to scale in the background of course your application sorry the",
    "start": "1067600",
    "end": "1075360"
  },
  {
    "text": "azure will have to provision some more vms copy the code from a storage account onto the vm spin it",
    "start": "1075360",
    "end": "1081600"
  },
  {
    "text": "all up and if your application's smaller starts quicker you can react quickly",
    "start": "1081600",
    "end": "1086960"
  },
  {
    "text": "it was just a huge application four seconds to boot up connect",
    "start": "1087200",
    "end": "1095039"
  },
  {
    "text": "functionality or again in this case resizing images it can scale up really",
    "start": "1103280",
    "end": "1108799"
  },
  {
    "text": "quickly and scale up quite widely kind of many instances are running to do a lot of the work very quickly and",
    "start": "1108799",
    "end": "1115039"
  },
  {
    "text": "efficiently so we can only scale out one small bit of functionality for our application",
    "start": "1115039",
    "end": "1120480"
  },
  {
    "text": "unlike the classic version where we have to scale up the entire application",
    "start": "1120480",
    "end": "1125520"
  },
  {
    "text": "so we don't need huge amounts of horsepower to turn markdown code into html for instance",
    "start": "1125520",
    "end": "1131120"
  },
  {
    "text": "but images for sure they take a lot more processing power so this is very ideal very nice",
    "start": "1131120",
    "end": "1137840"
  },
  {
    "text": "the last principle is the dependency inversion principle and as it says code towards the",
    "start": "1139039",
    "end": "1145679"
  },
  {
    "text": "interface and for a long time i was trying to figure out hey",
    "start": "1145679",
    "end": "1151280"
  },
  {
    "text": "how am i going to take this principle and apply this to a serverless architecture",
    "start": "1151280",
    "end": "1158320"
  },
  {
    "text": "and the keyword here is code so that's what we do with our applications",
    "start": "1158320",
    "end": "1164880"
  },
  {
    "text": "not what the applications can do to each other so there's no easy way for me to apply this to an architecture",
    "start": "1164880",
    "end": "1171120"
  },
  {
    "text": "other than being able to actually now do it in our service applications",
    "start": "1171120",
    "end": "1176240"
  },
  {
    "text": "so for a long time our serverless applications didn't have a way of doing dependency injection",
    "start": "1176240",
    "end": "1182640"
  },
  {
    "text": "which is important for clean code coding towards the interface that we can then go and",
    "start": "1182640",
    "end": "1189039"
  },
  {
    "text": "swap out an implementation but now we can it's really good and actually helps us write a really clean application so i'm still going to",
    "start": "1189039",
    "end": "1195520"
  },
  {
    "text": "take that one as a win here's an example uh here is one of the",
    "start": "1195520",
    "end": "1201200"
  },
  {
    "text": "service bus triggers so it receives a message from a particular topic on a particular",
    "start": "1201200",
    "end": "1207559"
  },
  {
    "text": "service and what they're doing is uh just sterilizing that message",
    "start": "1207559",
    "end": "1213600"
  },
  {
    "text": "into one that we can understand and a lot of times",
    "start": "1213600",
    "end": "1218240"
  },
  {
    "text": "um",
    "start": "1218840",
    "end": "1221840"
  },
  {
    "text": "endpoints uh that are really thick they're very skinny very simple to understand um and",
    "start": "1233360",
    "end": "1240400"
  },
  {
    "text": "just like with classic web apis we have a very thin controller and a very small action so we've",
    "start": "1240400",
    "end": "1248400"
  },
  {
    "text": "injected the dependencies via the constructor for our serverless application and it's very easy it all fits on one screen essentially",
    "start": "1248400",
    "end": "1255360"
  },
  {
    "text": "and then you know that that request that came in sends it through mediator and then it gets",
    "start": "1255360",
    "end": "1260640"
  },
  {
    "text": "handled here as a uh asynchronous request handler and we have again dependency injection",
    "start": "1260640",
    "end": "1267440"
  },
  {
    "text": "through the constructor and then in the handling method we have the incoming request object",
    "start": "1267440",
    "end": "1273679"
  },
  {
    "text": "and we can in this case go and download the original image resize it and return the output",
    "start": "1273679",
    "end": "1280640"
  },
  {
    "text": "cool so looking back serverless and solid principles we can",
    "start": "1280640",
    "end": "1287120"
  },
  {
    "text": "pretty much tick each and every one of these say hey cool now we have at least five good principles that we can use to",
    "start": "1287120",
    "end": "1294080"
  },
  {
    "text": "reason about how to build or architect our service applications uh you know we're not sort of stabbing",
    "start": "1294080",
    "end": "1300080"
  },
  {
    "text": "in the dark these are things that have been uh tried and tested over 30 years",
    "start": "1300080",
    "end": "1305520"
  },
  {
    "text": "or so some of them have a long long history um and it makes life easier it lets us not just write simple code",
    "start": "1305520",
    "end": "1312880"
  },
  {
    "text": "but build simple architectures that are easy to understand and then make sense everything does exactly what it says on",
    "start": "1312880",
    "end": "1319679"
  },
  {
    "text": "the box cool so okay now we know we can write",
    "start": "1319679",
    "end": "1326320"
  },
  {
    "text": "some cool solid applications everything easy to understand how do we harden our applications",
    "start": "1326320",
    "end": "1334320"
  },
  {
    "text": "once we send it out into the wild all sorts of things can happen um so this is where my applications",
    "start": "1334320",
    "end": "1343360"
  },
  {
    "text": "and what",
    "start": "1344720",
    "end": "1347039"
  },
  {
    "text": "that message that goes into the system if something happens you know server runs on memory restarts or",
    "start": "1354880",
    "end": "1360640"
  },
  {
    "text": "whatever uh we don't want to lose that operation you know that's potential revenue that we're basically missing out",
    "start": "1360640",
    "end": "1367039"
  },
  {
    "text": "on so want to make sure that we don't lose those operations we want to keep them even though something goes wrong",
    "start": "1367039",
    "end": "1373039"
  },
  {
    "text": "in the middle but we want to assume the operation as soon as possible once things come back online we just",
    "start": "1373039",
    "end": "1379200"
  },
  {
    "text": "want to keep going and not be too concerned and yeah this is because we do",
    "start": "1379200",
    "end": "1384720"
  },
  {
    "text": "want to provide a highly available service so when do we start panicking well we",
    "start": "1384720",
    "end": "1391039"
  },
  {
    "text": "always imagine natural disasters and people joke the data center is on fire but that almost never happens anyways",
    "start": "1391039",
    "end": "1398240"
  },
  {
    "text": "lightning strikes very it almost just never happens um but what happens often",
    "start": "1398240",
    "end": "1403919"
  },
  {
    "text": "is when someone accidentally restarts a service uh i'm sure we've all been there uh or",
    "start": "1403919",
    "end": "1410000"
  },
  {
    "text": "just part of your normal cicd pipeline or a devops cycle when you",
    "start": "1410000",
    "end": "1415679"
  },
  {
    "text": "deploy your application you have to take it offline and you have to swap in the new version",
    "start": "1415679",
    "end": "1420960"
  },
  {
    "text": "that just has to happen and in that window customers can still access your application and it may not work",
    "start": "1420960",
    "end": "1428880"
  },
  {
    "text": "and then just trans and errors you know these things happen for instance when um that uh classic application i showed",
    "start": "1428880",
    "end": "1435919"
  },
  {
    "text": "earlier uh suddenly i want to convert 50 images um and my storage just can't handle it",
    "start": "1435919",
    "end": "1442000"
  },
  {
    "text": "or i need to store a whole lot of documents in the database and i'm just running out of connections",
    "start": "1442000",
    "end": "1447360"
  },
  {
    "text": "though so those sort of transit errors they do happen or even just when you make a configuration change to your",
    "start": "1447360",
    "end": "1453600"
  },
  {
    "text": "application um often they just have to restart to be able to have that setting tape effect",
    "start": "1453600",
    "end": "1459840"
  },
  {
    "text": "so all of these can actually make you panic and we want to be able to deal with that and not actually losing valuable options",
    "start": "1459840",
    "end": "1466720"
  },
  {
    "text": "in our application so just looking at the setup for our",
    "start": "1466720",
    "end": "1472080"
  },
  {
    "start": "1468000",
    "end": "1468000"
  },
  {
    "text": "basic application again when things go wrong we lose all connectivity",
    "start": "1472080",
    "end": "1477440"
  },
  {
    "text": "we really start painting we don't know how the users are experiencing the application really you know",
    "start": "1477440",
    "end": "1482480"
  },
  {
    "text": "they may or may not come back at all so how do we how do we uh solve this how do we get",
    "start": "1482480",
    "end": "1487840"
  },
  {
    "text": "rid of uh the sort of brittleness and have our applications nice and resilient well one way that we can",
    "start": "1487840",
    "end": "1494880"
  },
  {
    "text": "do or achieve that is to use asynchronous messaging so this is where the azure service bus type services",
    "start": "1494880",
    "end": "1501600"
  },
  {
    "text": "come in it's not the only one but it's one i've chosen for today um it's just because http requests",
    "start": "1501600",
    "end": "1508159"
  },
  {
    "text": "they suck they have timeouts and you know uh you can't recover from that timeout",
    "start": "1508159",
    "end": "1513760"
  },
  {
    "text": "really once it's that operation is lost if the user doesn't want to come back to",
    "start": "1513760",
    "end": "1519200"
  },
  {
    "text": "your website to submit that order or you click that buy button well you've missed out it's not going to",
    "start": "1519200",
    "end": "1524320"
  },
  {
    "text": "happen the nice thing about messages in these sort of services is that they have persisted over outage",
    "start": "1524320",
    "end": "1532159"
  },
  {
    "text": "periods so as soon as you've received that message uh it's yours and you can um keep it for a",
    "start": "1532159",
    "end": "1539039"
  },
  {
    "text": "long time and make sure that you process it at some point and then at least make sure",
    "start": "1539039",
    "end": "1546159"
  },
  {
    "text": "that that buy or that cell operation goes through and you actually still have a happy customer and also reduce coupling",
    "start": "1546159",
    "end": "1553760"
  },
  {
    "text": "between the applications so when we think about clean code even um",
    "start": "1553760",
    "end": "1559360"
  },
  {
    "text": "you know there's the term new is glue so if we couple our classes together um they're",
    "start": "1559360",
    "end": "1566000"
  },
  {
    "text": "very hard to refactor how to change and how to swap out behaviors right so when we use this sort of asynchronous",
    "start": "1566000",
    "end": "1572640"
  },
  {
    "text": "messaging through a bus then we don't need to couple services together we literally say hey",
    "start": "1572640",
    "end": "1578480"
  },
  {
    "text": "i'm raising an event i'm throwing a message into the bus saying order created and any service",
    "start": "1578480",
    "end": "1585679"
  },
  {
    "text": "that's listening to that bus uh can pick it up and react to it we don't know who it is so basically we",
    "start": "1585679",
    "end": "1592000"
  },
  {
    "text": "can fire and forget the messages because uh you've done your bit this one service has done its bit",
    "start": "1592000",
    "end": "1597200"
  },
  {
    "text": "and it just sort of throws into the bus and the next servers can pick it up and continue its",
    "start": "1597200",
    "end": "1602960"
  },
  {
    "text": "process so it's really nice but again even though such a nice service we have",
    "start": "1602960",
    "end": "1608880"
  },
  {
    "text": "to look at which patterns to use to make them highly",
    "start": "1608880",
    "end": "1613919"
  },
  {
    "text": "available we can even actually use some highly available services already um so let's say for instance",
    "start": "1613919",
    "end": "1619679"
  },
  {
    "text": "cosmos db makes it really simple you can spin up a cosmos instance",
    "start": "1619679",
    "end": "1625279"
  },
  {
    "text": "and say i want to run this in not just in melbourne but around in sydney new york and la",
    "start": "1625279",
    "end": "1632159"
  },
  {
    "text": "you know this that's my customer base and i can literally do that with four clicks it's nice and simple and you can turn on a nice feature",
    "start": "1632159",
    "end": "1638399"
  },
  {
    "text": "that's uh going to make it even better so it's called multi-master right to",
    "start": "1638399",
    "end": "1645200"
  },
  {
    "text": "compare what that means with sql server is of course sql server can run across the globe in multiple regions but",
    "start": "1645200",
    "end": "1652159"
  },
  {
    "text": "you can only write back to the single master node uh so if i have",
    "start": "1652159",
    "end": "1657919"
  },
  {
    "text": "a a customer from new york wanting to write something to the database they have to come",
    "start": "1657919",
    "end": "1664159"
  },
  {
    "text": "that request has to go all the way down to here in melbourne if that's where my master mode is that's a long time to need a lot of",
    "start": "1664159",
    "end": "1671679"
  },
  {
    "text": "latency for that operation to complete by turning on multi-master rights in cosmos",
    "start": "1671679",
    "end": "1678480"
  },
  {
    "text": "that customer in new york can write to the new york instance straight away and reads you know whatever uh",
    "start": "1678480",
    "end": "1684720"
  },
  {
    "text": "information from that database straight away as well it's highly available it's uh",
    "start": "1684720",
    "end": "1689760"
  },
  {
    "text": "and cosmos actually takes care of that replication all the way back to australia for us all the masternodes",
    "start": "1689760",
    "end": "1695200"
  },
  {
    "text": "in each region has the same information and then yeah so it means if anything",
    "start": "1695200",
    "end": "1700240"
  },
  {
    "text": "happens to our sydney or melbourne nodes the ones in america they're all still",
    "start": "1700240",
    "end": "1705679"
  },
  {
    "text": "functioning fine nothing wrong with application it's all good um then for",
    "start": "1705679",
    "end": "1712159"
  },
  {
    "text": "our applications um there's sort of the outbox pattern um",
    "start": "1712159",
    "end": "1718640"
  },
  {
    "text": "instead of directly sending messages right away when we need to we can actually sort of have like a um a",
    "start": "1718640",
    "end": "1724480"
  },
  {
    "text": "persistent store in the application just to make sure that hey i know these are the messages i need to send and i'm going to work my hardest to",
    "start": "1724480",
    "end": "1731840"
  },
  {
    "text": "send them as quickly as possible so even if the application did go down halfway through sending in a message uh",
    "start": "1731840",
    "end": "1738320"
  },
  {
    "text": "when it starts back up it'll go oh i didn't finish that message i can actually resume and send it out so it's really",
    "start": "1738320",
    "end": "1744159"
  },
  {
    "text": "um you know valuable pat and it's not actually very hard to implement uh in your applications and just retry",
    "start": "1744159",
    "end": "1750640"
  },
  {
    "text": "patents so these are in the instances where let's say i'm trying to",
    "start": "1750640",
    "end": "1755919"
  },
  {
    "text": "do a select from the database and it fails i've run out of connections for some reason that's like a transient error",
    "start": "1755919",
    "end": "1763120"
  },
  {
    "text": "so instead of reusing that very same connection we can retry with new connection",
    "start": "1763120",
    "end": "1768559"
  },
  {
    "text": "until we do it like a hard fail um so these are simple you can use poly it's a very",
    "start": "1768559",
    "end": "1773919"
  },
  {
    "text": "popular library that we can use for net and yeah it's definitely worth",
    "start": "1773919",
    "end": "1779600"
  },
  {
    "text": "implementing these patterns to make sure your app is resilient and",
    "start": "1779600",
    "end": "1786240"
  },
  {
    "text": "before you do hard fails at least you try your best to recover so",
    "start": "1786240",
    "end": "1792399"
  },
  {
    "text": "when we look at our um our serverless application uh when",
    "start": "1793760",
    "end": "1800000"
  },
  {
    "text": "things go wrong and they do because you know nothing's perfect even though it's serverless things do go",
    "start": "1800000",
    "end": "1806799"
  },
  {
    "text": "wrong but when they you know when do we start panicking well as soon as the applications start",
    "start": "1806799",
    "end": "1814480"
  },
  {
    "text": "coming back online uh you know they don't all come back at the same time it might take a little while for them all to come back",
    "start": "1814480",
    "end": "1820880"
  },
  {
    "text": "but let's say the first one comes online that's okay because the messages",
    "start": "1820880",
    "end": "1826320"
  },
  {
    "text": "are persisted in the bus and they're not removed from the bus until it's processed successfully excuse me",
    "start": "1826320",
    "end": "1834399"
  },
  {
    "text": "so that's that's really really nice and yeah same with the other functions uh even for uh cosmos db",
    "start": "1834399",
    "end": "1842080"
  },
  {
    "text": "when they come back online they go oh you know there's been a number of changes since i last",
    "start": "1842080",
    "end": "1848159"
  },
  {
    "text": "read the the database so you know we'll just resume from that checkpoint and keep on",
    "start": "1848159",
    "end": "1853760"
  },
  {
    "text": "processing we've literally not lost anything um again just sort of messages now we've",
    "start": "1853760",
    "end": "1859120"
  },
  {
    "text": "got documents coming down the wire and we can process them as soon and as quick as",
    "start": "1859120",
    "end": "1864240"
  },
  {
    "text": "possible and yeah that's just nice because eventually everything's back online",
    "start": "1864240",
    "end": "1871039"
  },
  {
    "text": "we've missed no operations and we can stop panicking nice and",
    "start": "1871039",
    "end": "1876840"
  },
  {
    "text": "simple so looking at service bus itself",
    "start": "1876840",
    "end": "1882799"
  },
  {
    "start": "1879000",
    "end": "1879000"
  },
  {
    "text": "uh we need to make this highly available um you know you're spinning up normally",
    "start": "1882799",
    "end": "1889679"
  },
  {
    "text": "just one instance but you know it's in one region and it does something in a region can fail you",
    "start": "1889679",
    "end": "1895279"
  },
  {
    "text": "always have to have something available elsewhere in the world where there's no disaster and you always fail over to that",
    "start": "1895279",
    "end": "1900960"
  },
  {
    "text": "hopefully that it's not too far away so even though it is um just a little bit",
    "start": "1900960",
    "end": "1907679"
  },
  {
    "text": "distance away it's not too far away so you don't want to have too much uh latency in your application",
    "start": "1907679",
    "end": "1913120"
  },
  {
    "text": "so what we do we take our service bus instance we deploy it into two or more",
    "start": "1913120",
    "end": "1919440"
  },
  {
    "text": "regions and then we look at say an active active",
    "start": "1919440",
    "end": "1924720"
  },
  {
    "text": "replication pattern and what that means is our sending application",
    "start": "1924720",
    "end": "1931039"
  },
  {
    "text": "it sends the same message to both service buses but on the receiver end you know we're",
    "start": "1931039",
    "end": "1938880"
  },
  {
    "text": "not going to receive the same message twice so this is where we have to make",
    "start": "1938880",
    "end": "1944000"
  },
  {
    "text": "sure that either if we want to process the same message twice",
    "start": "1944000",
    "end": "1949039"
  },
  {
    "text": "the second one doesn't have a negative impact or no side effects to to that operation uh so",
    "start": "1949039",
    "end": "1955919"
  },
  {
    "text": "the term which is one of the harder words in english to say is uh independent idempotent however you say it everyone's",
    "start": "1955919",
    "end": "1962399"
  },
  {
    "text": "got their version of saying it but yeah so all we have to then find a way to de-duplicate the messages at the",
    "start": "1962399",
    "end": "1969600"
  },
  {
    "text": "receiver's end so we only process that message once um now um not everyone i've talked to has",
    "start": "1969600",
    "end": "1977600"
  },
  {
    "text": "actually been able to achieve this it's actually quite hard sounds simple but um it's a fair effort to make this",
    "start": "1977600",
    "end": "1983200"
  },
  {
    "text": "work you have to have a store available at each application that receives a message to",
    "start": "1983200",
    "end": "1989600"
  },
  {
    "text": "look up correlation ids and all that sort of stuff but then for how long do you keep all that information there's a lot",
    "start": "1989600",
    "end": "1995039"
  },
  {
    "text": "of complexity involved in this pattern it works obviously but it's very hard to",
    "start": "1995039",
    "end": "2000240"
  },
  {
    "text": "do with a better approach would be the active passive replication this is actually the",
    "start": "2000240",
    "end": "2005519"
  },
  {
    "text": "recommended pattern from microsoft as well uh for service bus because we don't have to",
    "start": "2005519",
    "end": "2012399"
  },
  {
    "text": "deal with that deduplication of our messages um and it's quite simple we still have two",
    "start": "2012399",
    "end": "2018880"
  },
  {
    "text": "buses uh one's an active and one's a passive bus uh they're both in different regions so we",
    "start": "2018880",
    "end": "2025039"
  },
  {
    "text": "first always send messages to the active bus and only when that send operation",
    "start": "2025039",
    "end": "2030159"
  },
  {
    "text": "fails we'll fail over to the passive one but our receiving application listens to",
    "start": "2030159",
    "end": "2035840"
  },
  {
    "text": "both as well just like with active active we're listening to both active and passive busts at the same time",
    "start": "2035840",
    "end": "2043919"
  },
  {
    "text": "so what that looks like looks like this we have our sending application uh on the one end and it sends the same",
    "start": "2043919",
    "end": "2050878"
  },
  {
    "start": "2044000",
    "end": "2044000"
  },
  {
    "text": "message to both of the buses our listening application receives it but then we have to go through and uh",
    "start": "2050879",
    "end": "2058158"
  },
  {
    "text": "you know deduplicate that message before we can actually handle it or process it through our application that looks",
    "start": "2058159",
    "end": "2063679"
  },
  {
    "text": "simple but that one step is sometimes very hard to implement properly the",
    "start": "2063679",
    "end": "2069040"
  },
  {
    "start": "2069000",
    "end": "2069000"
  },
  {
    "text": "active passive replication uh looks like this so",
    "start": "2069040",
    "end": "2074158"
  },
  {
    "text": "you start with the the sender application sends message one it goes through the",
    "start": "2074159",
    "end": "2079200"
  },
  {
    "text": "bus uh the listening application uh can receive it process it not a problem",
    "start": "2079200",
    "end": "2086158"
  },
  {
    "text": "message two fails the same through the active bus and you know so we can actually retry",
    "start": "2086159",
    "end": "2092480"
  },
  {
    "text": "that if we wanted to try the retry patterns uh but uh when that fails we then send through",
    "start": "2092480",
    "end": "2098400"
  },
  {
    "text": "that the very same message message number two to the passive bus and the listener can pick that up and just process it",
    "start": "2098400",
    "end": "2104720"
  },
  {
    "text": "so you'll receive only one message from either of the service buses you're not going to receive the same message twice",
    "start": "2104720",
    "end": "2111920"
  },
  {
    "text": "so nice and simple and this works really really well but then how do we make our azure",
    "start": "2111920",
    "end": "2118480"
  },
  {
    "start": "2117000",
    "end": "2117000"
  },
  {
    "text": "functions highly available well again we start by deploying them",
    "start": "2118480",
    "end": "2124240"
  },
  {
    "text": "into multiple uh regions there are multiple instances of that application are now running in",
    "start": "2124240",
    "end": "2129280"
  },
  {
    "text": "azure um but going the other way if you look at the active passive pattern from",
    "start": "2129280",
    "end": "2135119"
  },
  {
    "text": "before um each application will have to know that there is",
    "start": "2135119",
    "end": "2142000"
  },
  {
    "text": "two receiving applications in two regions so we actually have to build a lot of logic into our",
    "start": "2142000",
    "end": "2147839"
  },
  {
    "text": "applications when you want to send a request between the services and you know",
    "start": "2147839",
    "end": "2153280"
  },
  {
    "text": "try and file over manually which is quite a bit of annoying work that we need to",
    "start": "2153280",
    "end": "2158480"
  },
  {
    "text": "do so if you look at the active active pattern which actually is the recommended",
    "start": "2158480",
    "end": "2163680"
  },
  {
    "text": "pattern for serverless applications or at least something that goes over https",
    "start": "2163680",
    "end": "2170720"
  },
  {
    "text": "but you think the problem is with active active is that i'm going to receive the same request",
    "start": "2170720",
    "end": "2176160"
  },
  {
    "text": "twice more than once uh and that makes me sad because as we saw we have to de-duplicate and",
    "start": "2176160",
    "end": "2182400"
  },
  {
    "text": "make sure that if we run the same operation the second time there's no weird side effect but",
    "start": "2182400",
    "end": "2188160"
  },
  {
    "text": "there's actually very cool service that we can use to solve this problem for us uh azure front door um and what that looks",
    "start": "2188160",
    "end": "2195839"
  },
  {
    "text": "like is once we spin up azure front door we get a new uh public endpoint for",
    "start": "2195839",
    "end": "2201359"
  },
  {
    "start": "2198000",
    "end": "2198000"
  },
  {
    "text": "our application and we register all our apis for different regions in front door we can even set up some",
    "start": "2201359",
    "end": "2207680"
  },
  {
    "text": "awesome routing policies if we need to um and front door will actually do like",
    "start": "2207680",
    "end": "2214400"
  },
  {
    "text": "a near instant failover between the regions for any request that comes in and in fact it will actually",
    "start": "2214400",
    "end": "2220240"
  },
  {
    "text": "find that the closest or fastest region to route to for any request that comes",
    "start": "2220240",
    "end": "2226839"
  },
  {
    "text": "in um so you can see here we've got two sets of apis in australia southeast",
    "start": "2226839",
    "end": "2232160"
  },
  {
    "text": "and australia east and front door just takes care of sending the request through the right one now",
    "start": "2232160",
    "end": "2237599"
  },
  {
    "text": "traditionally if we did use sql server as a database",
    "start": "2237599",
    "end": "2242960"
  },
  {
    "text": "we'd actually have to set up a sql server in both regions and then set up replication between",
    "start": "2242960",
    "end": "2249280"
  },
  {
    "text": "those regions but with cosmos db we don't have to worry about that because we can just tick a couple of features",
    "start": "2249280",
    "end": "2255040"
  },
  {
    "text": "and they take care of it for us so this little the scenario actually builds really simple nice and easy and you don't really need",
    "start": "2255040",
    "end": "2262400"
  },
  {
    "text": "a dba or a database engineer that can set up that replication",
    "start": "2262400",
    "end": "2267599"
  },
  {
    "text": "for us but now if we go and we take",
    "start": "2267599",
    "end": "2273920"
  },
  {
    "text": "the uh the two patterns that we looked at for high availability and we combine",
    "start": "2273920",
    "end": "2279200"
  },
  {
    "text": "them into the whole setup here so we have our front door running our applications across",
    "start": "2279200",
    "end": "2285119"
  },
  {
    "start": "2280000",
    "end": "2280000"
  },
  {
    "text": "regions and we have a highly available service bus set up here and we want to follow that",
    "start": "2285119",
    "end": "2292480"
  },
  {
    "text": "active passive pattern for service bus this is what it looks like yeah at first",
    "start": "2292480",
    "end": "2298800"
  },
  {
    "text": "it might be like oh what's all the arrows and a bit of mind-boggling but it actually works really nicely",
    "start": "2298800",
    "end": "2305040"
  },
  {
    "text": "um so for each region it will have its primary and passive a",
    "start": "2305040",
    "end": "2312640"
  },
  {
    "text": "primary secretary or active passive bus and they will actually just ping pong or switch depending on which region it is and uh",
    "start": "2312640",
    "end": "2318160"
  },
  {
    "text": "it actually you know at first i thought hey this is going to be hard to build it might not work built it and it works really nicely and",
    "start": "2318160",
    "end": "2324480"
  },
  {
    "text": "it's a far easier than i thought so definitely give this a try so",
    "start": "2324480",
    "end": "2330240"
  },
  {
    "start": "2329000",
    "end": "2329000"
  },
  {
    "text": "just looking at you know service bus messaging you're sending messages just a couple tips is to",
    "start": "2330240",
    "end": "2338160"
  },
  {
    "text": "in your base message that you send is to include all in basic information as you",
    "start": "2338160",
    "end": "2344160"
  },
  {
    "text": "can so what message type it is you know uh correlation ids are important so you can",
    "start": "2344160",
    "end": "2350960"
  },
  {
    "text": "track that across multiple services and or multiple um operations",
    "start": "2350960",
    "end": "2358079"
  },
  {
    "text": "um and even you know where it came from and whatever anything that is is valuable so have that available in your base message",
    "start": "2358880",
    "end": "2366320"
  },
  {
    "text": "so anyway everyone can sort of have a common way to handle this message so in the azure",
    "start": "2366320",
    "end": "2374000"
  },
  {
    "text": "functions we use the service bus trigger to listen for incoming messages on a particular topic or queue",
    "start": "2374000",
    "end": "2380560"
  },
  {
    "text": "even if you want to use that um and to send messages we can use the",
    "start": "2380560",
    "end": "2385839"
  },
  {
    "text": "topic client now you can also use a um the service bus output binding but if",
    "start": "2385839",
    "end": "2392640"
  },
  {
    "text": "i'm using the topic client deeper inside of the application usually a bit more convenient",
    "start": "2392640",
    "end": "2398079"
  },
  {
    "text": "if you want some code i have a fairly big project there that you can look at for a sort of modern enterprise service bus",
    "start": "2398079",
    "end": "2404480"
  },
  {
    "text": "workshop that we did a few months ago for ndc melbourne",
    "start": "2404480",
    "end": "2409680"
  },
  {
    "text": "brendan richards and i did this you can have there just grab all the code it's all all there it does pretty",
    "start": "2409680",
    "end": "2415119"
  },
  {
    "text": "much everything that we talked about up until now but just",
    "start": "2415119",
    "end": "2420640"
  },
  {
    "text": "to give you a bit of a taste of what's in there here is a way of sending messages now to fit this on one",
    "start": "2420640",
    "end": "2427839"
  },
  {
    "text": "screen it's not the version where it does the failover to the passive one",
    "start": "2427839",
    "end": "2432960"
  },
  {
    "text": "but you know it will be pretty easy to implement so we start off by making sure that any base message that",
    "start": "2432960",
    "end": "2439440"
  },
  {
    "text": "comes into our message sender we encode that to",
    "start": "2439440",
    "end": "2444480"
  },
  {
    "text": "youtube aid we serialize it as json and we make sure to include the the data type um",
    "start": "2444480",
    "end": "2452960"
  },
  {
    "text": "as the label for that message so uh at the receiving end we can actually",
    "start": "2452960",
    "end": "2458000"
  },
  {
    "text": "deserialize that into a concrete object um so yeah here's just",
    "start": "2458000",
    "end": "2463200"
  },
  {
    "text": "the message reader that we would have on the receiving application this is how we then dig into that",
    "start": "2463200",
    "end": "2470400"
  },
  {
    "text": "json payload that comes back and we find the message type and return then the net type which we can then use for",
    "start": "2470400",
    "end": "2477520"
  },
  {
    "text": "some jsmd serialization get the concrete object and",
    "start": "2477520",
    "end": "2482560"
  },
  {
    "text": "just like earlier here's a service bus trigger for a request that comes in we read that message and",
    "start": "2482560",
    "end": "2490079"
  },
  {
    "text": "if it's a in our case my base messages i always um have them as mediator",
    "start": "2490079",
    "end": "2497200"
  },
  {
    "text": "requests so i can actually use mediator to then send that through the pipeline and eventually in the application handle",
    "start": "2497200",
    "end": "2504560"
  },
  {
    "text": "that message and you know here we go so here's a message that comes in gets handled",
    "start": "2504560",
    "end": "2509599"
  },
  {
    "text": "and uh we have the original request and you know just take care of it in mediator so",
    "start": "2509599",
    "end": "2515760"
  },
  {
    "text": "very nice and simple so cool now we know you know clean code",
    "start": "2515760",
    "end": "2523040"
  },
  {
    "text": "and solid principles they do apply uh to serverless and we know at least you know how to make our",
    "start": "2523040",
    "end": "2529119"
  },
  {
    "text": "applications resilient with asynchronous messaging and high availability patents but what",
    "start": "2529119",
    "end": "2534880"
  },
  {
    "text": "about scalability well okay first i say is make sure that you",
    "start": "2534880",
    "end": "2541200"
  },
  {
    "start": "2539000",
    "end": "2539000"
  },
  {
    "text": "know how big you want to scale your application uh in azure you've got different ways of",
    "start": "2541200",
    "end": "2546800"
  },
  {
    "text": "running your serverless application uh your azure function application so you can run it as a consumption",
    "start": "2546800",
    "end": "2552720"
  },
  {
    "text": "plan which limits you to 200 instances which is quite a lot the premium plan",
    "start": "2552720",
    "end": "2558960"
  },
  {
    "text": "even though you've got more powerful cpus you know multiple cores all that uh you're limited to 100",
    "start": "2558960",
    "end": "2564560"
  },
  {
    "text": "instances um and if that's not enough then you have to think about having",
    "start": "2564560",
    "end": "2570400"
  },
  {
    "text": "multiple plans or you know maybe even using the consumption plan as an",
    "start": "2570400",
    "end": "2576839"
  },
  {
    "text": "alternative definitely when you're looking at the dedicated app service plans you can run an azure functions",
    "start": "2576839",
    "end": "2582560"
  },
  {
    "text": "application on an app service plan but you're limited severely into the",
    "start": "2582560",
    "end": "2588720"
  },
  {
    "text": "number of instances that you can scout out to uh but then if you're running kubernetes well then it totally",
    "start": "2588720",
    "end": "2594240"
  },
  {
    "text": "depends on a lot of things how much hardware have you got available and whether or not you want to use the",
    "start": "2594240",
    "end": "2600160"
  },
  {
    "text": "virtual cubelets to you know run all those uh um serverless containers you know",
    "start": "2600160",
    "end": "2605280"
  },
  {
    "text": "to orchetta you know keita uh to sort of scale out automatically for you",
    "start": "2605280",
    "end": "2610319"
  },
  {
    "text": "and scale back down to zero so kubernetes it really depends on what you have um",
    "start": "2610319",
    "end": "2616319"
  },
  {
    "text": "okay then uh like i said earlier it's very important keep your applications",
    "start": "2616319",
    "end": "2621359"
  },
  {
    "text": "small you can definitely notice it in the startup times and the scaling types when they have a lot of binaries to load",
    "start": "2621359",
    "end": "2627760"
  },
  {
    "text": "a lot of things to connect on startup then it's not great then also",
    "start": "2627760",
    "end": "2633440"
  },
  {
    "text": "um when your requests come into your application try and make the as quick as possible",
    "start": "2633440",
    "end": "2640400"
  },
  {
    "text": "you know don't try and block on an incoming request for a long time um you know as soon as you can return a",
    "start": "2640400",
    "end": "2648319"
  },
  {
    "text": "message back to the user you should um and a good tip just for running your",
    "start": "2648319",
    "end": "2654000"
  },
  {
    "text": "uh azure function applications is that um it needs a storage account to for all",
    "start": "2654000",
    "end": "2660319"
  },
  {
    "text": "the bindings and triggers to store information and you know even invocation logs all that uh you know to maintain the",
    "start": "2660319",
    "end": "2666560"
  },
  {
    "text": "application state um so if your app your you need to write some uh results to",
    "start": "2666560",
    "end": "2673680"
  },
  {
    "text": "storage you know if it's images or files pdfs anything use a separate storage account",
    "start": "2673680",
    "end": "2678800"
  },
  {
    "text": "you don't want to negatively impact the storage that your application as a function is using or the runtime is",
    "start": "2678800",
    "end": "2684880"
  },
  {
    "text": "using to make the application tick over so storage is cheap so",
    "start": "2684880",
    "end": "2690319"
  },
  {
    "text": "why not you can definitely have two storage accounts for one application you get a little extra oomph out of your",
    "start": "2690319",
    "end": "2697119"
  },
  {
    "text": "your application azure durable functions are awesome uh in particular i'm just going to call out",
    "start": "2697119",
    "end": "2702160"
  },
  {
    "text": "the fan out found in pattern so if you have a request that comes in and",
    "start": "2702160",
    "end": "2707440"
  },
  {
    "text": "it's of the sort that you can actually split it up into multiple workloads you can use an",
    "start": "2707440",
    "end": "2713680"
  },
  {
    "text": "orchestrator and fan out all those operations to individual azure function uh activities uh",
    "start": "2713680",
    "end": "2722079"
  },
  {
    "text": "that's awesome because you can very easily just scale out to a couple of hundred instances and uh let let it all run for you and",
    "start": "2722079",
    "end": "2729280"
  },
  {
    "text": "it'll then collect or fan in those results for you",
    "start": "2729280",
    "end": "2734319"
  },
  {
    "text": "or another name for this pattern this was a map reduce pattern so it's nice and simple to give",
    "start": "2734319",
    "end": "2739520"
  },
  {
    "text": "that a go then very importantly with",
    "start": "2739520",
    "end": "2746000"
  },
  {
    "text": "your messages that come your http request that comes into your application um turn them into service bus messages",
    "start": "2746000",
    "end": "2752960"
  },
  {
    "text": "as soon as you can right so like i said earlier don't try and block for too long this if this means though your",
    "start": "2752960",
    "end": "2758960"
  },
  {
    "text": "application you sort of have to design for eventual consistency",
    "start": "2758960",
    "end": "2764000"
  },
  {
    "text": "um because you know if you're not going to be blocking a request on a request and waiting for the result",
    "start": "2764000",
    "end": "2769760"
  },
  {
    "text": "to come back and send that back to the caller instead you send back like a 202",
    "start": "2769760",
    "end": "2775200"
  },
  {
    "text": "accepted message and give them a way to query for the result uh that will be processed and made",
    "start": "2775200",
    "end": "2783040"
  },
  {
    "text": "available uh eventually so um you can use something like signal life",
    "start": "2783040",
    "end": "2788720"
  },
  {
    "text": "service for instance to then uh do push notification back to the recording after say hey",
    "start": "2788720",
    "end": "2793920"
  },
  {
    "text": "that job you requested it's ready here's the result um so and then when you use service bus",
    "start": "2793920",
    "end": "2802400"
  },
  {
    "text": "try and use topics because if you use cues a cue lets you is limited to just one",
    "start": "2802400",
    "end": "2808960"
  },
  {
    "text": "consumer one listener if you use topics then you can actually each topic gets a",
    "start": "2808960",
    "end": "2815359"
  },
  {
    "text": "separate queue and you have filters on them uh then that lets people subscribe to so you can",
    "start": "2815359",
    "end": "2821119"
  },
  {
    "text": "actually have multiple listeners to one queue it's really awesome and that lets you run a whole lot of stuff",
    "start": "2821119",
    "end": "2826640"
  },
  {
    "text": "in in parallel so you can trigger multiple applications running off that one topic uh and this one",
    "start": "2826640",
    "end": "2834319"
  },
  {
    "text": "also i'm very surprised at this so following the sort of best practices you with your access policies in service",
    "start": "2834319",
    "end": "2842240"
  },
  {
    "text": "bus you want to give the application the minimum capability possible to you know reduce any sort of surface",
    "start": "2842240",
    "end": "2848559"
  },
  {
    "text": "area for things going wrong uh you know if an application is only",
    "start": "2848559",
    "end": "2853839"
  },
  {
    "text": "going to ever be listening from a service bus it only needs to listen right or if it's only a sender",
    "start": "2853839",
    "end": "2859280"
  },
  {
    "text": "it needs a sending right uh the manager right to sort of give that just to a an admin type",
    "start": "2859280",
    "end": "2865200"
  },
  {
    "text": "application but the problem is with the uh the serverless the service bus trigger",
    "start": "2865200",
    "end": "2871040"
  },
  {
    "text": "if it doesn't have the manage capability or manage rights sorry it can't peek into the service bus queue",
    "start": "2871040",
    "end": "2876640"
  },
  {
    "text": "to see how long the queue is and then it can't proactively scale out for you i tried this on an app",
    "start": "2876640",
    "end": "2882880"
  },
  {
    "text": "recently it's like oh it actually just scales a lot quicker i get more instances spun up and it just",
    "start": "2882880",
    "end": "2888960"
  },
  {
    "text": "gets the job done a lot faster so it's much more efficient uh surprising uh some of the the security conscious",
    "start": "2888960",
    "end": "2895200"
  },
  {
    "text": "people might say don't do that but i'm sure you can convince them with the end performance results are much",
    "start": "2895200",
    "end": "2900800"
  },
  {
    "text": "much nicer so here's what the topic would look like in service bus uh you",
    "start": "2900800",
    "end": "2907200"
  },
  {
    "text": "can have multiple filters you can actually say hey the messages that come into this topic i only want to filter on some of",
    "start": "2907200",
    "end": "2912400"
  },
  {
    "text": "them you know you can actually do write like sql filters to say uh only um you know messages of a particular",
    "start": "2912400",
    "end": "2920960"
  },
  {
    "text": "data type or from a particular person or service i want to have and then you make that",
    "start": "2920960",
    "end": "2926720"
  },
  {
    "text": "available as a subscription so you can have one or more apps subscribe to that and",
    "start": "2926720",
    "end": "2931920"
  },
  {
    "text": "trigger on it when the message does arrive and also now because we scale out really",
    "start": "2931920",
    "end": "2938640"
  },
  {
    "text": "widely and produce a huge amount of results when you want to store your data it makes",
    "start": "2938640",
    "end": "2943760"
  },
  {
    "text": "absolute sense to make sure that you choose the right storage uh service so you know to match that",
    "start": "2943760",
    "end": "2950000"
  },
  {
    "text": "high throughput so cosmos db is awesome you can provision a huge amount of throughput it",
    "start": "2950000",
    "end": "2955200"
  },
  {
    "text": "does cost a bit of money but the cool thing is you've got auto scaling as well so it makes that job nice and easy so no",
    "start": "2955200",
    "end": "2962000"
  },
  {
    "text": "point trying to store huge amounts of results into something that's really slow you're actually just going to slow down your application and hurt your scalability quite a lot so",
    "start": "2962000",
    "end": "2968720"
  },
  {
    "text": "you've got a few options your cosmos db event hub premium storage and even sql server itself",
    "start": "2968720",
    "end": "2974319"
  },
  {
    "text": "obviously has huge performance capabilities so yeah just choose the right one for your",
    "start": "2974319",
    "end": "2980400"
  },
  {
    "text": "application and this will go sort of best practice when you deal with connections to services",
    "start": "2980400",
    "end": "2986720"
  },
  {
    "text": "try and reuse the connection clients uh don't manually try and spin up a",
    "start": "2986720",
    "end": "2992319"
  },
  {
    "text": "connection for each azure functions application because very soon your",
    "start": "2992319",
    "end": "2997440"
  },
  {
    "text": "cosmos or sql server for instance they'll run out of connections um and you know you're gonna have a lot",
    "start": "2997440",
    "end": "3004559"
  },
  {
    "text": "more transient errors and it'll just slow you down so yeah go for",
    "start": "3004559",
    "end": "3009839"
  },
  {
    "text": "the the clients that use connection pooling and manages that whole thing for you",
    "start": "3009839",
    "end": "3015920"
  },
  {
    "text": "all right so wrapping it up in summary uh go and use serverless over the",
    "start": "3015920",
    "end": "3022240"
  },
  {
    "text": "traditional approach it definitely makes your applications very easy to understand they're easy to",
    "start": "3022240",
    "end": "3028800"
  },
  {
    "text": "maintain and extend they're definitely testable you know smaller bits of functionality is very easy to test so",
    "start": "3028800",
    "end": "3036079"
  },
  {
    "text": "you can have a lot of confidence once you ship your application and definitely solid it gives you a way",
    "start": "3036079",
    "end": "3043760"
  },
  {
    "text": "to reason about your service architectures yeah you can keep things very clean very simple and everyone can come",
    "start": "3043760",
    "end": "3049760"
  },
  {
    "text": "in and understand it asynchronous messaging over http",
    "start": "3049760",
    "end": "3054880"
  },
  {
    "text": "uh requests it definitely has a lot of benefit so you can have better resiliency uh your",
    "start": "3054880",
    "end": "3060000"
  },
  {
    "text": "scalability uh increases and and your coupling between your services",
    "start": "3060000",
    "end": "3065440"
  },
  {
    "text": "actually decreases so it has an awesome devops um benefit there so it's very easy to",
    "start": "3065440",
    "end": "3072559"
  },
  {
    "text": "just deploy the smaller bits of functionality and that whole coordination around devops is a lot a lot simpler and",
    "start": "3072559",
    "end": "3079839"
  },
  {
    "text": "high availability for serverless is actually quite easy uh surprisingly i thought oh no it's gonna",
    "start": "3079839",
    "end": "3084880"
  },
  {
    "text": "be a lot of work but it's super simple so everyone should be able to give that a go and finally now you can go",
    "start": "3084880",
    "end": "3090800"
  },
  {
    "text": "and build some awesome rock solid service servers applications",
    "start": "3090800",
    "end": "3096000"
  },
  {
    "start": "3096000",
    "end": "3096000"
  },
  {
    "text": "and from azure if you want to learn azure for free uh they make that nice and easy there's a link azure.com free if you want to learn more",
    "start": "3096000",
    "end": "3102880"
  },
  {
    "text": "about azure uh microsoft learn's got a massive massive amount of uh tutorials and things for you to go",
    "start": "3102880",
    "end": "3108640"
  },
  {
    "text": "through and help you with uh training for your azure search as well so it's very useful uh if you join the",
    "start": "3108640",
    "end": "3114000"
  },
  {
    "text": "newsletter then you can go to that azure developer swag link and if you're very quick",
    "start": "3114000",
    "end": "3119599"
  },
  {
    "text": "you can use that code to grab some free swag only the four people from this talk will",
    "start": "3119599",
    "end": "3125200"
  },
  {
    "text": "get a pack so if you click on the fingers go for it",
    "start": "3125200",
    "end": "3130319"
  },
  {
    "text": "thank you very much",
    "start": "3130319",
    "end": "3139839"
  },
  {
    "text": "oh cool uh definitely open for questions everybody got some questions",
    "start": "3148000",
    "end": "3154720"
  },
  {
    "text": "oh audio coming through",
    "start": "3154720",
    "end": "3157680"
  },
  {
    "text": "uh if there's no questions thank you very much everybody for turning up i hope you really enjoy the rest of nbc",
    "start": "3163119",
    "end": "3170559"
  },
  {
    "text": "it's been fun so far even though it's online it's actually really really really fun",
    "start": "3170559",
    "end": "3177119"
  },
  {
    "text": "thanks tien what do",
    "start": "3178720",
    "end": "3193920"
  }
]