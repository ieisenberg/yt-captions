[
  {
    "text": "how many people here worse with corsola so I see a few on the desktop sealer",
    "start": "30",
    "end": "7940"
  },
  {
    "text": "okay on other languages python I don't see anyone",
    "start": "7940",
    "end": "13440"
  },
  {
    "text": "C++ okay good think we're studying how",
    "start": "13440",
    "end": "26820"
  },
  {
    "text": "you're having are you having good final and they see you like it good",
    "start": "26820",
    "end": "31949"
  },
  {
    "text": "I'm here to disappoint you okay",
    "start": "31949",
    "end": "38399"
  },
  {
    "text": "for those that do not know me I have been working on performance for more than 10 years like I have used like",
    "start": "38399",
    "end": "45780"
  },
  {
    "text": "every single CPU kind of stuff that you can think about from very very low power",
    "start": "45780",
    "end": "51149"
  },
  {
    "text": "stuff to high powers GPU so if you have",
    "start": "51149",
    "end": "56940"
  },
  {
    "text": "any question outside from what I'm going to talk about today which is in a sense",
    "start": "56940",
    "end": "62160"
  },
  {
    "text": "c-sharp only but most of the these techniques work on other languages that's why I'm asking this kind of this",
    "start": "62160",
    "end": "70140"
  },
  {
    "text": "kind of stuff it's pretty interesting for me so just get me around in around",
    "start": "70140",
    "end": "75330"
  },
  {
    "text": "the corner and and just ask me whatever you want today what we are going to talk about is how you deal with the cases",
    "start": "75330",
    "end": "82770"
  },
  {
    "text": "when you actually need to go on high-performance because let's face it most of the time we just don't care as",
    "start": "82770",
    "end": "90390"
  },
  {
    "text": "long as it works as long as it's in it's in budget we're fine so let's say that",
    "start": "90390",
    "end": "98549"
  },
  {
    "text": "on Monday your boss comes and says hey you know we have to nuke this new client",
    "start": "98549",
    "end": "105509"
  },
  {
    "text": "and we actually have to be able to deal with 20 billion operations per day I'm",
    "start": "105509",
    "end": "112890"
  },
  {
    "text": "gonna wait a little bit so you actually sink on that but not number which looks",
    "start": "112890",
    "end": "118409"
  },
  {
    "text": "like this how many of you have had the",
    "start": "118409",
    "end": "123450"
  },
  {
    "text": "luck to actually deal with this kind of stuff okay we have a few so big honor",
    "start": "123450",
    "end": "129209"
  },
  {
    "text": "probably on the three or five companies that actually have to deal with such amount of of requests so let's say",
    "start": "129209",
    "end": "138450"
  },
  {
    "text": "this is a big number this is something that it's for most uses and purposes intractable to your mind so let's let's",
    "start": "138450",
    "end": "146489"
  },
  {
    "text": "start to work around this a little bit so we're talking about twenty billion",
    "start": "146489",
    "end": "152040"
  },
  {
    "text": "operations so if we look at like okay let's assume that this is uniformly",
    "start": "152040",
    "end": "157110"
  },
  {
    "text": "distributed which usually is not but let's assume for a probit that's Ram 800",
    "start": "157110",
    "end": "165030"
  },
  {
    "text": "million yeah more or less give or take but you know what this is",
    "start": "165030",
    "end": "170370"
  },
  {
    "text": "going so we are going to try to narrow this down as much as possible so on sixty and sixty minutes how much we have",
    "start": "170370",
    "end": "177900"
  },
  {
    "text": "to deal with thirty million it doesn't look that bad at least not that's bad that there's",
    "start": "177900",
    "end": "184410"
  },
  {
    "text": "twenty billion when you started when we want when we go to a minute this is",
    "start": "184410",
    "end": "192959"
  },
  {
    "text": "actually a tractable number this is a number that you can get your ran at your mind around and you can think of it so",
    "start": "192959",
    "end": "202400"
  },
  {
    "text": "what would you typically do you are if you have to deal with this you will just",
    "start": "202400",
    "end": "207900"
  },
  {
    "text": "go and spin up a plasterer typical stuff you go you build your kubernetes your",
    "start": "207900",
    "end": "213870"
  },
  {
    "text": "you deploy and you're done because this is roughly five k6k operations per node",
    "start": "213870",
    "end": "222799"
  },
  {
    "text": "which is with today tools totally doable the thing is that for",
    "start": "222799",
    "end": "230790"
  },
  {
    "text": "most state of death of the software today even though there had been a lot",
    "start": "230790",
    "end": "236190"
  },
  {
    "text": "of strides that I that's why I asked first if anyone have been using concealer because their system talks of actually",
    "start": "236190",
    "end": "242400"
  },
  {
    "text": "serving request on corsola and the new asp.net has really go down but real hard",
    "start": "242400",
    "end": "250290"
  },
  {
    "text": "at some point like five years ago in your with your highest end server this",
    "start": "250290",
    "end": "258060"
  },
  {
    "text": "actually was the task of M busy you are you are not going to go even higher than",
    "start": "258060",
    "end": "264120"
  },
  {
    "text": "this because that was about it just to serve a static stuff so",
    "start": "264120",
    "end": "271910"
  },
  {
    "text": "typically this is how we usually solve it with within in the usual industry",
    "start": "271910",
    "end": "277979"
  },
  {
    "text": "like we just keep spinning stuff like because this is a number that is simple",
    "start": "277979",
    "end": "284460"
  },
  {
    "text": "if you have a 550 operations per node it",
    "start": "284460",
    "end": "289830"
  },
  {
    "text": "looks fine I know many many many enterprise applications there are even in numbers",
    "start": "289830",
    "end": "295710"
  },
  {
    "text": "lower than 10 and they are supposed to be high performance so just to give you",
    "start": "295710",
    "end": "303509"
  },
  {
    "text": "a sense of what the very first number that we look like 55k operations per no",
    "start": "303509",
    "end": "310409"
  },
  {
    "text": "means is roughly around 5 milliseconds preparation per second per node game",
    "start": "310409",
    "end": "318389"
  },
  {
    "text": "developers have been working with even worse budgets to actually make games so",
    "start": "318389",
    "end": "325880"
  },
  {
    "text": "this is actually quite high everything that we are everything that we are doing",
    "start": "325880",
    "end": "332340"
  },
  {
    "text": "today has been solving in one case and another had to be solved to actually",
    "start": "332340",
    "end": "337349"
  },
  {
    "text": "make games so if we are not able to solve this kind this kind of problem with like our bare hands we're screwed",
    "start": "337349",
    "end": "344430"
  },
  {
    "text": "really so when optimizing it's like you can",
    "start": "344430",
    "end": "350520"
  },
  {
    "text": "have like these three levels in one level you have like okay this is piece",
    "start": "350520",
    "end": "355919"
  },
  {
    "text": "of cake this is this something that that a junior developer can knock out in in a",
    "start": "355919",
    "end": "362580"
  },
  {
    "text": "weekend if you're not able to achieve 600 requests per second per node in a",
    "start": "362580",
    "end": "367680"
  },
  {
    "text": "weekend you are doing it wrong but then the typical enterprise software and most",
    "start": "367680",
    "end": "374759"
  },
  {
    "text": "most like 90% or a if you will use Pareto the 80% software it's around this",
    "start": "374759",
    "end": "383639"
  },
  {
    "text": "kind of this level you have operations there are times seeing that I really really time-sensitive but most of them",
    "start": "383639",
    "end": "390840"
  },
  {
    "text": "are not so if you deal with those and you are able to achieve a sustained six",
    "start": "390840",
    "end": "396180"
  },
  {
    "text": "thousand requests per second per node you are like in a very very good place because you are not burning money which is good",
    "start": "396180",
    "end": "403440"
  },
  {
    "text": "and you're also able to serve with a less than five millisecond latency if",
    "start": "403440",
    "end": "409440"
  },
  {
    "text": "you are like right to their to the server but I particularly work on a",
    "start": "409440",
    "end": "417900"
  },
  {
    "text": "particular field which is database engine design if you have to serve this",
    "start": "417900",
    "end": "425880"
  },
  {
    "text": "number I have to live in this number",
    "start": "425880",
    "end": "431570"
  },
  {
    "text": "because you're not going to like ask me for that record you're probably going to",
    "start": "431570",
    "end": "437820"
  },
  {
    "text": "ask me for like oh yes this is the user and this is the other thing and now give me the profile and now so probably I",
    "start": "437820",
    "end": "444750"
  },
  {
    "text": "have to serve around four to seven requests before you can actually finish your operation so this is the kind of",
    "start": "444750",
    "end": "452730"
  },
  {
    "text": "level that is baseline for anyone working in the database industry and you",
    "start": "452730",
    "end": "459210"
  },
  {
    "text": "actually have to work higher than this but you can think of and you can think",
    "start": "459210",
    "end": "464310"
  },
  {
    "text": "about this from your own perspective noting the database protect the perspective but for your own system",
    "start": "464310",
    "end": "469830"
  },
  {
    "text": "perspective and you can think of it like there's metrics that we know it's like",
    "start": "469830",
    "end": "475350"
  },
  {
    "text": "that if you are in the if your target is one second of latency we are not talking",
    "start": "475350",
    "end": "483120"
  },
  {
    "text": "about throughput here we are talking about latency you're in one second you can you can knock any anything in our",
    "start": "483120",
    "end": "489270"
  },
  {
    "text": "weekend that can do stuff in soup second okay but when you go when you go lower",
    "start": "489270",
    "end": "497070"
  },
  {
    "text": "that you have to keep a budget of $110",
    "start": "497070",
    "end": "506130"
  },
  {
    "text": "pretty fast so today's talk this is one of the important things that about",
    "start": "506130",
    "end": "512610"
  },
  {
    "text": "today's talk we are not going to talk about how to make performance is a big",
    "start": "512610",
    "end": "519419"
  },
  {
    "text": "field okay there are life things that you can actually go to the books and it's there if you if you go around",
    "start": "519419",
    "end": "528230"
  },
  {
    "text": "interrupts cause you know that allocations are the major source of",
    "start": "528230",
    "end": "533460"
  },
  {
    "text": "performance like mayor if if you have a software that is misbehaving the very first thing",
    "start": "533460",
    "end": "539690"
  },
  {
    "text": "that you are going to look at is allocations period this is like the",
    "start": "539690",
    "end": "544760"
  },
  {
    "text": "sanity check this list is like the sanity checks but I want you to watch a two in particular which is allocations",
    "start": "544760",
    "end": "551870"
  },
  {
    "text": "are major source of performance issues which is something that we know already but also a tidbit that is probably not",
    "start": "551870",
    "end": "558950"
  },
  {
    "text": "so known in in the community which is value types are subject to a special",
    "start": "558950",
    "end": "565010"
  },
  {
    "text": "sets of optimizations but the shyest is not compiler this is important this is this is what the",
    "start": "565010",
    "end": "572000"
  },
  {
    "text": "entire talk is going to be around at the VN like the introduction stuff so",
    "start": "572000",
    "end": "578360"
  },
  {
    "text": "there's other interesting things like that happen happen at the moment of a meeting code that the just-in-time",
    "start": "578360",
    "end": "584750"
  },
  {
    "text": "compiler does and one of the most important for this is that it's able to",
    "start": "584750",
    "end": "590180"
  },
  {
    "text": "constant propagate stuff so if you have a constant and it just this time say a this is a constant now now it can",
    "start": "590180",
    "end": "598220"
  },
  {
    "text": "propagate it up over the stack as long as there is no a method call there's no a mythical and the other side it can",
    "start": "598220",
    "end": "604910"
  },
  {
    "text": "eliminate code if you're an if the condition is false and you're not going",
    "start": "604910",
    "end": "609980"
  },
  {
    "text": "to enter it because you left it there for like the bug purposes it's not gonna",
    "start": "609980",
    "end": "615650"
  },
  {
    "text": "end in release code because it's going to be eliminated so if you're serious",
    "start": "615650",
    "end": "622970"
  },
  {
    "text": "about performance my recommendation is get these two books you don't know you don't need anything more than that the",
    "start": "622970",
    "end": "630710"
  },
  {
    "text": "first one is a real real real good book",
    "start": "630710",
    "end": "635900"
  },
  {
    "text": "about the specifics of how to actually do benchmarking because if you're",
    "start": "635900",
    "end": "641690"
  },
  {
    "text": "measuring wrong you are taking the wrong decisions period this one product net",
    "start": "641690",
    "end": "647840"
  },
  {
    "text": "benchmarking from Andrea Kingston is going to be available in September I know it's good because I read the draft the other one is about dealing",
    "start": "647840",
    "end": "656330"
  },
  {
    "text": "with memory like understanding the memory model of dotnet and actually work",
    "start": "656330",
    "end": "662420"
  },
  {
    "text": "around from it so that that one is already am i available",
    "start": "662420",
    "end": "667990"
  },
  {
    "text": "so when you start working with performance it's pretty easy to just go",
    "start": "667990",
    "end": "675130"
  },
  {
    "text": "for the for the very small things and not figure out that pain there's",
    "start": "675130",
    "end": "680350"
  },
  {
    "text": "actually a good in here so let's not go for the tree let's go for the big thing",
    "start": "680350",
    "end": "686050"
  },
  {
    "text": "so we devised a way to actually characterize internally how what what",
    "start": "686050",
    "end": "693430"
  },
  {
    "text": "kind of problem we are dealing about think about the potato you can take the",
    "start": "693430",
    "end": "699040"
  },
  {
    "text": "product distribution 8020 which is like the typical how you think about the Pareto distribution so let's say that",
    "start": "699040",
    "end": "706150"
  },
  {
    "text": "you have the 80/20 now square it this means that if you think about it if 80%",
    "start": "706150",
    "end": "713230"
  },
  {
    "text": "in the at the first level 80 percent of the resources consumed 20 percent of the of the code is caused by 20 percent of",
    "start": "713230",
    "end": "721300"
  },
  {
    "text": "the code now if you square it essentially what you have is like that 4",
    "start": "721300",
    "end": "727120"
  },
  {
    "text": "percent of the code actually is responsible for 60% of the resources and if you do it again you go you go cubic",
    "start": "727120",
    "end": "734290"
  },
  {
    "text": "now eight point zero point eight percent of the code consumes have the resources",
    "start": "734290",
    "end": "742680"
  },
  {
    "text": "and this is not a rule this is something that we found in practice I deal with",
    "start": "742680",
    "end": "749890"
  },
  {
    "text": "the zero point eight usually because it's too costly to actually go to the",
    "start": "749890",
    "end": "756070"
  },
  {
    "text": "four zero to the 4 and to the 20 and I'm going to show you why but the idea here",
    "start": "756070",
    "end": "762610"
  },
  {
    "text": "is that if you say I'm you say I'm this is a potato problem I know that we are",
    "start": "762610",
    "end": "769900"
  },
  {
    "text": "talking about next mayor version period if I know if this is operator square",
    "start": "769900",
    "end": "779340"
  },
  {
    "text": "then I'm talking something that probably it's a high-risk task it's something",
    "start": "779340",
    "end": "785170"
  },
  {
    "text": "that you will not do like in a weakened but if I talk about these operators who",
    "start": "785170",
    "end": "791770"
  },
  {
    "text": "a operator cubic thing then okay this makes sense I probably can do this and",
    "start": "791770",
    "end": "797110"
  },
  {
    "text": "can figure out how to make it work in a few weeks but this is because we have been in the",
    "start": "797110",
    "end": "803940"
  },
  {
    "text": "process of optimizing for years so essentially I'm looking for the 1% like",
    "start": "803940",
    "end": "810000"
  },
  {
    "text": "having today having a Micro preemies ation level which is but I talk about it",
    "start": "810000",
    "end": "816540"
  },
  {
    "text": "to cure sorry cubic is essentially I'm looking for 1%",
    "start": "816540",
    "end": "823470"
  },
  {
    "text": "2% if I get that 10% it's like mere so that they are here if",
    "start": "823470",
    "end": "830730"
  },
  {
    "text": "when you go up in the scale what you are looking actually is typically the",
    "start": "830730",
    "end": "836390"
  },
  {
    "text": "network i/o architecture algorithmic big algorithm a stuff like if you are using",
    "start": "836390",
    "end": "843450"
  },
  {
    "text": "a and forth into the fourth algorithm",
    "start": "843450",
    "end": "848640"
  },
  {
    "text": "instead you could do that with linear or sub linear like big stuff like if you",
    "start": "848640",
    "end": "854670"
  },
  {
    "text": "change this you are looking for more than 20 X performance improvement if not",
    "start": "854670",
    "end": "862740"
  },
  {
    "text": "you are not going to do it unless obviously you are just starting with with the process in which case it's",
    "start": "862740",
    "end": "869640"
  },
  {
    "text": "always easier to get on top because it's where the actual payoff will be it's not",
    "start": "869640",
    "end": "875790"
  },
  {
    "text": "uncommon if you if you go to a new software that has been optimized before if you go I where I go hunting in a",
    "start": "875790",
    "end": "882990"
  },
  {
    "text": "new--it's a new clients come in where I go hunting I go hunt in there why because probably",
    "start": "882990",
    "end": "890010"
  },
  {
    "text": "it's highly probable that I can find stuff that I can still fix on this level that is not high cost and it have an",
    "start": "890010",
    "end": "898350"
  },
  {
    "text": "insane performance improvement we are talking that a fixed there can get you 6",
    "start": "898350",
    "end": "904350"
  },
  {
    "text": "TX 78109 is that kind of improvement if",
    "start": "904350",
    "end": "911670"
  },
  {
    "text": "you're selling for instance by course it actually gonna kill your business model so the second level is where you are",
    "start": "911670",
    "end": "919590"
  },
  {
    "text": "dealing with like small variations and and and the algorithmic time so probably",
    "start": "919590",
    "end": "924840"
  },
  {
    "text": "you are not moving from the from you probably are going to get like you have",
    "start": "924840",
    "end": "931650"
  },
  {
    "text": "an N and you go sub linear or even between the sub Lanier's not also Blin ears are created equal so this",
    "start": "931650",
    "end": "938850"
  },
  {
    "text": "is this is what they kinda kind of stuff that we learn in complexity at the University like oh yes I have this big",
    "start": "938850",
    "end": "945269"
  },
  {
    "text": "huge at this beautiful algorithm that can do like sub linear stuff but hey my",
    "start": "945269",
    "end": "951389"
  },
  {
    "text": "size my world is so small that even the linear one is going to be faster and",
    "start": "951389",
    "end": "959360"
  },
  {
    "text": "then it's the world and the world of my optimization that's where the boudu",
    "start": "959360",
    "end": "965550"
  },
  {
    "text": "happens this is what this talk is about so the very first thing that you have to",
    "start": "965550",
    "end": "973769"
  },
  {
    "text": "know from the start is if you have to microbe demise make sure there's no option because it's a one-way road when",
    "start": "973769",
    "end": "982439"
  },
  {
    "text": "you start in the Micro preemies station your code is gonna start to looking way",
    "start": "982439",
    "end": "988740"
  },
  {
    "text": "differently to what it looked before and it also means that you have to be very",
    "start": "988740",
    "end": "995160"
  },
  {
    "text": "careful how you change it a long time so the people that is allowed to talk to",
    "start": "995160",
    "end": "1001220"
  },
  {
    "text": "touch that code it's going to get reduced it pretty fast to real it to real to the to the real senior staff so",
    "start": "1001220",
    "end": "1010339"
  },
  {
    "text": "this is like last resort is like I don't have any other way so I go this route",
    "start": "1010339",
    "end": "1017829"
  },
  {
    "text": "but because you're here to see something that you can find in books let's talk about this so this is true story",
    "start": "1017829",
    "end": "1024890"
  },
  {
    "text": "everything that I'm going to tell you from now on is based on a particular of the word that we did for a particular",
    "start": "1024890",
    "end": "1030500"
  },
  {
    "text": "product so everything is is time I'm going to start introduction where we",
    "start": "1030500",
    "end": "1036500"
  },
  {
    "text": "were and where we needed to go so obviously what I would do from the from",
    "start": "1036500",
    "end": "1042470"
  },
  {
    "text": "the get-go is let's go hand for the bed and for the bottlenecks so we started with raping the B bottlenecks at the two",
    "start": "1042470",
    "end": "1049130"
  },
  {
    "text": "at the version mayor version two so we figure out a you know after some",
    "start": "1049130",
    "end": "1054620"
  },
  {
    "text": "optimizing I'm figuring out we actually figure out okay the single right lock and the lack of batching operations",
    "start": "1054620",
    "end": "1060710"
  },
  {
    "text": "which is architectural stuff this is something that you are not able to change like from even even in a",
    "start": "1060710",
    "end": "1067760"
  },
  {
    "text": "this is this is mayor stuff this is stuff that if you have to do with it you have to create an entire new mayor",
    "start": "1067760",
    "end": "1073460"
  },
  {
    "text": "version for you also the interrupts cast there was like this amount of decisions",
    "start": "1073460",
    "end": "1080660"
  },
  {
    "text": "that were made on the initial on the des planning style on the planning moment of",
    "start": "1080660",
    "end": "1086330"
  },
  {
    "text": "the product you end up there so this is not something any any of these problems",
    "start": "1086330",
    "end": "1091400"
  },
  {
    "text": "is something that you can fix on to zero so you have to start thinking okay how do I deal with all this so essentially",
    "start": "1091400",
    "end": "1099860"
  },
  {
    "text": "this is what we did we figured out hey you know we don't have operate batching",
    "start": "1099860",
    "end": "1105470"
  },
  {
    "text": "operations okay we build like an entire engine that is able to batch operations",
    "start": "1105470",
    "end": "1110530"
  },
  {
    "text": "we have to deal with the interrupts cost we build an an entire database storage build on c-sharp just to avoid danger up",
    "start": "1110530",
    "end": "1120640"
  },
  {
    "text": "the hashing we implemented like a we have a huge form of very specific hashing functions specifically for each",
    "start": "1120640",
    "end": "1128090"
  },
  {
    "text": "use and all of them instead of going to the optimized C C++ code we they're just",
    "start": "1128090",
    "end": "1133940"
  },
  {
    "text": "built entirely in c-sharp to avoid all the interrupts so we end up in three",
    "start": "1133940",
    "end": "1140150"
  },
  {
    "text": "zero and in three zero hey use newsflash new bottlenecks so it's not like okay",
    "start": "1140150",
    "end": "1148130"
  },
  {
    "text": "yes I get rid of these ones but now those ones become like huge so just to",
    "start": "1148130",
    "end": "1156620"
  },
  {
    "text": "give an idea just dealing with those kind we we just get rid of 10x which",
    "start": "1156620",
    "end": "1163460"
  },
  {
    "text": "means that when you needed four computers now you can do the same with half so when we start at four zero now",
    "start": "1163460",
    "end": "1172370"
  },
  {
    "text": "another my aversion to actually deal with all the other stuff we did a lot of stuff just to get just to get rid of",
    "start": "1172370",
    "end": "1179270"
  },
  {
    "text": "those bottlenecks and the most interesting thing here is that we actually had to go unmanaged",
    "start": "1179270",
    "end": "1185450"
  },
  {
    "text": "we have to actually have to deal with the with the memory itself and when you",
    "start": "1185450",
    "end": "1190820"
  },
  {
    "text": "start on that road is when I say it's a way it's an only way so if you go there",
    "start": "1190820",
    "end": "1196280"
  },
  {
    "text": "you are not coming back period so we went we went by the book it is this",
    "start": "1196280",
    "end": "1204050"
  },
  {
    "text": "is a kind of thing that you if you're optimizing you will do period so we",
    "start": "1204050",
    "end": "1209960"
  },
  {
    "text": "decided to tackle these three just d3 that then time Mayor version was about",
    "start": "1209960",
    "end": "1216740"
  },
  {
    "text": "tackling this we ended up doing some some work on the others but this is boss",
    "start": "1216740",
    "end": "1223160"
  },
  {
    "text": "about this three this this is the mayor thing that you were you are going to do okay we took two years it's not like",
    "start": "1223160",
    "end": "1229790"
  },
  {
    "text": "something that you can do we are looking forward two years to actually build a mayor and marry a Persian so we started",
    "start": "1229790",
    "end": "1238790"
  },
  {
    "text": "with a very simple assumption is with we said request hey what application doesn't do that it's",
    "start": "1238790",
    "end": "1245929"
  },
  {
    "text": "typical so it is typical so the interesting thing about requisites is they start in the end there's stateless",
    "start": "1245929",
    "end": "1252280"
  },
  {
    "text": "kind of so the interesting thing is when you start to look into these requests so",
    "start": "1252280",
    "end": "1259250"
  },
  {
    "text": "you figure out hey you know string allocations to nominate and dominate big like we're talking about gigabytes per",
    "start": "1259250",
    "end": "1268480"
  },
  {
    "text": "minute so when you look at and you start",
    "start": "1268480",
    "end": "1274790"
  },
  {
    "text": "disagree eight in all this you figure out okay collections like Arabic a huge a huge issue you look at generation",
    "start": "1274790",
    "end": "1281980"
  },
  {
    "text": "general reclaim able so you build a subject and you return it that's cost",
    "start": "1281980",
    "end": "1289510"
  },
  {
    "text": "don't don't don't get me started with a sink I think it's cool yeah it's cool it's",
    "start": "1290110",
    "end": "1296710"
  },
  {
    "text": "performance is real real bad if you're an insensitive goal getting out from the",
    "start": "1296710",
    "end": "1304490"
  },
  {
    "text": "sink machinery it's like the best thing that you can do it's like you are going to get a boost children also you have to",
    "start": "1304490",
    "end": "1313970"
  },
  {
    "text": "be very very careful with the lambda capture context we have lambdas everywhere because lambdas are cool yeah",
    "start": "1313970",
    "end": "1320030"
  },
  {
    "text": "but the contest when you have to capture the context you're allocating and if you're allocating like in a loop a",
    "start": "1320030",
    "end": "1327340"
  },
  {
    "text": "million operations in a minute that adapts pretty fast",
    "start": "1327340",
    "end": "1332539"
  },
  {
    "text": "so we decided okay we are going to get rid of allocations we are going to get",
    "start": "1332539",
    "end": "1338599"
  },
  {
    "text": "rid with we are going to create our own string and okay a string representation",
    "start": "1338599",
    "end": "1345469"
  },
  {
    "text": "because we were already dealing with and manage stuff so we couldn't fake it now",
    "start": "1345469",
    "end": "1353299"
  },
  {
    "text": "you have a spun still if you are dealing with and manage that stuff span is not",
    "start": "1353299",
    "end": "1358789"
  },
  {
    "text": "that good so the thing is we went all",
    "start": "1358789",
    "end": "1364219"
  },
  {
    "text": "this road back in 2015 with expand didn't exist anymore but what I'm going",
    "start": "1364219",
    "end": "1369259"
  },
  {
    "text": "to show you is how you can build spans like spun like abstractions in raw C",
    "start": "1369259",
    "end": "1375769"
  },
  {
    "text": "sharp without needing the just-in-time optimizations specifically so let's",
    "start": "1375769",
    "end": "1382999"
  },
  {
    "text": "think about what we what we created at the time it was the byte string if you",
    "start": "1382999",
    "end": "1389479"
  },
  {
    "text": "if you look at the at the wrong implementation of our new span it looks more on an ax string it more or less",
    "start": "1389479",
    "end": "1395239"
  },
  {
    "text": "look like this you have some flags in our case because we needed we needed to",
    "start": "1395239",
    "end": "1400779"
  },
  {
    "text": "write down some stuff about that particular string you have the length you have your pointer and you have the",
    "start": "1400779",
    "end": "1407809"
  },
  {
    "text": "actual size okay so the length of the string and the size of the memory that",
    "start": "1407809",
    "end": "1413659"
  },
  {
    "text": "is bucking it up this is this is very specific to our use case which is we",
    "start": "1413659",
    "end": "1420199"
  },
  {
    "text": "reserved an amount of memory and if it's rings we don't we don't go creating and",
    "start": "1420199",
    "end": "1427519"
  },
  {
    "text": "get it getting you memory for it so obviously this sounds familiar because",
    "start": "1427519",
    "end": "1433729"
  },
  {
    "text": "if you look at it this is a span which",
    "start": "1433729",
    "end": "1439249"
  },
  {
    "text": "is essentially a pointer and its length but the problem is that you cannot do",
    "start": "1439249",
    "end": "1444799"
  },
  {
    "text": "this at least not legally this is not",
    "start": "1444799",
    "end": "1450019"
  },
  {
    "text": "legal C sharp so the problem with this",
    "start": "1450019",
    "end": "1455989"
  },
  {
    "text": "is you can see you can see the the moshav are in there which is a struct",
    "start": "1455989",
    "end": "1461679"
  },
  {
    "text": "that's thirty six bytes if on every method code",
    "start": "1461679",
    "end": "1467570"
  },
  {
    "text": "that I do I have to copy 36 bytes that's",
    "start": "1467570",
    "end": "1473840"
  },
  {
    "text": "huge right it erupts pretty fast let's do the math a million of those 35 35",
    "start": "1473840",
    "end": "1481040"
  },
  {
    "text": "bytes that means 35 megabytes per million calls which is big and that's",
    "start": "1481040",
    "end": "1487520"
  },
  {
    "text": "assuming a single parameter but you know",
    "start": "1487520",
    "end": "1494350"
  },
  {
    "text": "anyone anyone that comes from the C++ or C or C background knows how to fix this",
    "start": "1494350",
    "end": "1500870"
  },
  {
    "text": "actually we are we are told how to fix this in university which is there's no",
    "start": "1500870",
    "end": "1507080"
  },
  {
    "text": "problem in computer science that can be so if we if we don't add another level of indirection the problem is the what",
    "start": "1507080",
    "end": "1513350"
  },
  {
    "text": "kind of interaction that you are adding okay some of them are intractable so",
    "start": "1513350",
    "end": "1519350"
  },
  {
    "text": "essentially what we did was this okay we have a back in storage we have like this huge array of memory and this is a",
    "start": "1519350",
    "end": "1526160"
  },
  {
    "text": "pointer to that particular case so the question is how much do you think this cost anyone to amble how much I do it do",
    "start": "1526160",
    "end": "1544640"
  },
  {
    "text": "I get that 16 bytes here no no 16 do I get a grenade yes it bites so this",
    "start": "1544640",
    "end": "1557120"
  },
  {
    "text": "pointer is the size of an integral and",
    "start": "1557120",
    "end": "1562210"
  },
  {
    "text": "because this pointer is the size of an interior we can do a very simple exercise which is a how much does",
    "start": "1562210",
    "end": "1570920"
  },
  {
    "text": "passing a by string as a parameter cost so we essentially did this sorry an",
    "start": "1570920",
    "end": "1579200"
  },
  {
    "text": "eternal along so we are doing something like this we are comparing it with long",
    "start": "1579200",
    "end": "1584510"
  },
  {
    "text": "which is essentially has the same size we wanted to know if that is the same",
    "start": "1584510",
    "end": "1590450"
  },
  {
    "text": "thing so essentially we took the path at the very root of the byte stream",
    "start": "1590450",
    "end": "1596430"
  },
  {
    "text": "which is essentially the backing store which is a pointer angry execute this",
    "start": "1596430",
    "end": "1605130"
  },
  {
    "text": "let's start with the long this is how a long call looks like",
    "start": "1605130",
    "end": "1611150"
  },
  {
    "text": "so essentially you move the stock you move that to the RCA you move the",
    "start": "1611150",
    "end": "1617010"
  },
  {
    "text": "location to the RCX you call the using long you move the results back to the",
    "start": "1617010",
    "end": "1624990"
  },
  {
    "text": "RCX you execute a right line data knob I",
    "start": "1624990",
    "end": "1630960"
  },
  {
    "text": "don't know where it comes from you now work again with with the stack and then",
    "start": "1630960",
    "end": "1636179"
  },
  {
    "text": "you return this is your method call let's do the same thing for our pointer",
    "start": "1636179",
    "end": "1644000"
  },
  {
    "text": "let's do the same thing for our buy stream now we got the move we got the",
    "start": "1644000",
    "end": "1650160"
  },
  {
    "text": "call we got the copy to to the parameter",
    "start": "1650160",
    "end": "1655170"
  },
  {
    "text": "list again we got our call and we've got our result we're coming back so anyone",
    "start": "1655170",
    "end": "1663720"
  },
  {
    "text": "can guess which one is the byte string I",
    "start": "1663720",
    "end": "1667309"
  },
  {
    "text": "don't know you but I know that I can't why because of this this is the only",
    "start": "1669800",
    "end": "1679380"
  },
  {
    "text": "difference so",
    "start": "1679380",
    "end": "1687500"
  },
  {
    "text": "I think at this moment that now you're standing to endure sound and to know",
    "start": "1688110",
    "end": "1693870"
  },
  {
    "text": "where this is going but wait wait for it",
    "start": "1693870",
    "end": "1701450"
  },
  {
    "text": "let's talk about that different and entirely different concept that comes from other languages not C sharp which",
    "start": "1701630",
    "end": "1710010"
  },
  {
    "text": "is meta programming for those that come from the C++ behavior sorry I'm a C++",
    "start": "1710010",
    "end": "1718200"
  },
  {
    "text": "background you have seen this kind of stuff before those are marker interfaces you're",
    "start": "1718200",
    "end": "1726840"
  },
  {
    "text": "saying okay this is a trait you're going to interface and you'll be less struct",
    "start": "1726840",
    "end": "1732960"
  },
  {
    "text": "out of that interface so let's let's think about it if we have a marker a we",
    "start": "1732960",
    "end": "1738810"
  },
  {
    "text": "know that we can call anything that is defined already in the interface and we",
    "start": "1738810",
    "end": "1744030"
  },
  {
    "text": "if we got a marker J we also can do the same thing in this case this also is an",
    "start": "1744030",
    "end": "1749070"
  },
  {
    "text": "empty interface but the interesting",
    "start": "1749070",
    "end": "1754230"
  },
  {
    "text": "thing is that we can write something like this where our method is going to",
    "start": "1754230",
    "end": "1759420"
  },
  {
    "text": "take a type which is actually an interface but because the implementation",
    "start": "1759420",
    "end": "1769020"
  },
  {
    "text": "of these guys is a struct and I don't know if you remember from the very first",
    "start": "1769020",
    "end": "1774660"
  },
  {
    "text": "slides what happened with starts with value types they are subject to special",
    "start": "1774660",
    "end": "1781200"
  },
  {
    "text": "optimizations because this what it happens if if we call this method which",
    "start": "1781200",
    "end": "1788550"
  },
  {
    "text": "is generic method marker a1 0 what we",
    "start": "1788550",
    "end": "1794610"
  },
  {
    "text": "actually get is something like this and because you know you remember from the",
    "start": "1794610",
    "end": "1801420"
  },
  {
    "text": "second slide which says code elimination it just happened that if you are",
    "start": "1801420",
    "end": "1808320"
  },
  {
    "text": "equaling one thing that is equal to the other thing it goes out because it's",
    "start": "1808320",
    "end": "1814260"
  },
  {
    "text": "true so this is the only code that gets a minute what happens if we do the other",
    "start": "1814260",
    "end": "1821370"
  },
  {
    "text": "way around if we say ok this is marker J we have a type which is also we know",
    "start": "1821370",
    "end": "1829410"
  },
  {
    "text": "it's different so now it happens like",
    "start": "1829410",
    "end": "1834990"
  },
  {
    "text": "this so this is the code a minute but you know why metaprogramming is good",
    "start": "1834990",
    "end": "1845280"
  },
  {
    "text": "because we have been using it successfully for years so it's not something that you say ok now this is",
    "start": "1845280",
    "end": "1852060"
  },
  {
    "text": "this is new stuff no no this has been here for 20 years it just that we didn't",
    "start": "1852060",
    "end": "1857910"
  },
  {
    "text": "have the facilities to actually use it so why we would use these kind of",
    "start": "1857910",
    "end": "1865050"
  },
  {
    "text": "facilities because we can get rid of beautiful codes which are absolutely expensive because we can tailor our",
    "start": "1865050",
    "end": "1873390"
  },
  {
    "text": "algorithms just for the case they were built they were being called for so if I",
    "start": "1873390",
    "end": "1878880"
  },
  {
    "text": "know this algorithm this location is going to be used in this way I can instruct the run time this is how I want",
    "start": "1878880",
    "end": "1888600"
  },
  {
    "text": "this algorithm to run to it to work how good you would solve this today you just go and write 2 methods and what happened",
    "start": "1888600",
    "end": "1898080"
  },
  {
    "text": "when you have to do that for like 10 different use cases yeah you know it's a it's maintenance nightmare if you care",
    "start": "1898080",
    "end": "1904890"
  },
  {
    "text": "if there's an error you had to actually go to all the places to figure it out",
    "start": "1904890",
    "end": "1911090"
  },
  {
    "text": "so also if you can exploit the knowledge of things that you know are constants",
    "start": "1911090",
    "end": "1916710"
  },
  {
    "text": "now it they may not be constant normally but let's say ok page or page size for",
    "start": "1916710",
    "end": "1924960"
  },
  {
    "text": "us our page size is like this is a constant but it can be a constant on",
    "start": "1924960",
    "end": "1932580"
  },
  {
    "text": "certain conditions and not on others so we can actually play with this and still",
    "start": "1932580",
    "end": "1938280"
  },
  {
    "text": "use the same code and also it allows us",
    "start": "1938280",
    "end": "1944430"
  },
  {
    "text": "to avoid in variant conditionals which which also are very good at the CPI",
    "start": "1944430",
    "end": "1949789"
  },
  {
    "text": "level that your run your real runtime where the real meat happens so there's",
    "start": "1949789",
    "end": "1958729"
  },
  {
    "text": "and this is important there's not no better branch predictor that do not having to predict it doesn't it doesn't",
    "start": "1958729",
    "end": "1965960"
  },
  {
    "text": "matter how good you are to actually figuring out a yeah you know in this loop we are going always through these",
    "start": "1965960",
    "end": "1972429"
  },
  {
    "text": "particular disciplines to this particular you still have to check and you still have to go there in this way",
    "start": "1972429",
    "end": "1980749"
  },
  {
    "text": "you don't it just you're emitted the actual code that you are need to execute linearly so let's talk about this this",
    "start": "1980749",
    "end": "1988759"
  },
  {
    "text": "is what we are going to talk about is the building blocks to actually measure",
    "start": "1988759",
    "end": "1994070"
  },
  {
    "text": "programming on c-sharp this is the building blocks then you have to design on top of it you have to build your",
    "start": "1994070",
    "end": "2002049"
  },
  {
    "text": "library of thinking that you're going to use and use them in this way that's why that's why I said when you go the road",
    "start": "2002049",
    "end": "2009519"
  },
  {
    "text": "of my grouped musician there's no coming back",
    "start": "2009519",
    "end": "2015059"
  },
  {
    "text": "so let's let's think about it anyone that has an you soon use the object pool",
    "start": "2015450",
    "end": "2021070"
  },
  {
    "text": "before anyone everybody used the object pool then okay so essentially an object",
    "start": "2021070",
    "end": "2028239"
  },
  {
    "text": "pool is a allocations are a big problem so we put all these allocations and",
    "start": "2028239",
    "end": "2033519"
  },
  {
    "text": "whatever whenever an object gets created instead of like throwing it away for the",
    "start": "2033519",
    "end": "2038649"
  },
  {
    "text": "garbage collector to reclaim I just put it someone else so if someone needs them they just can't go and get and try to",
    "start": "2038649",
    "end": "2045190"
  },
  {
    "text": "get it from there first so let's say that this is your object pool there are",
    "start": "2045190",
    "end": "2052299"
  },
  {
    "text": "the typical type of the out of the object that you're going to store there is T what the hell are the other two",
    "start": "2052299",
    "end": "2060270"
  },
  {
    "text": "saying hey what's the lifetime this is a policy the typical policy that you will find on addiction algorithms for",
    "start": "2062090",
    "end": "2068090"
  },
  {
    "text": "instance is this a policy what's the lifetime look like for this object or hey this is going to be run enough",
    "start": "2068090",
    "end": "2075470"
  },
  {
    "text": "thread aware on threaded coded or it is going to be run away on single threaded",
    "start": "2075470",
    "end": "2081020"
  },
  {
    "text": "stuff this is the kind of markers that we run in there so you're gonna have",
    "start": "2081020",
    "end": "2088010"
  },
  {
    "text": "actually have a single object pool where you can actually say oh no no this is gonna run on a thread on a",
    "start": "2088010",
    "end": "2095510"
  },
  {
    "text": "multi-threaded space so okay let's pay for the cost oh no this is not going to",
    "start": "2095510",
    "end": "2102710"
  },
  {
    "text": "be run this is going to be single threaded okay why I'm going to pay for all the synchronization that can happen",
    "start": "2102710",
    "end": "2108520"
  },
  {
    "text": "we don't care so let's think about this",
    "start": "2108520",
    "end": "2113750"
  },
  {
    "text": "this is this is our pool this is our pool we have an option pool T and we also have like this default",
    "start": "2113750",
    "end": "2121640"
  },
  {
    "text": "implementation which is like okay this is an alligator and in this is a lambda is specifically and we have a non",
    "start": "2121640",
    "end": "2129500"
  },
  {
    "text": "threaded where behavior because okay we are running this on single thread you",
    "start": "2129500",
    "end": "2136130"
  },
  {
    "text": "see there are defunct of P factory this is the factory this is what we use to actually create the object because if",
    "start": "2136130",
    "end": "2142550"
  },
  {
    "text": "you go in reflection I can tell you now it's going to be bad so the interesting",
    "start": "2142550",
    "end": "2151370"
  },
  {
    "text": "thing about this is this this is an object that doesn't exist this is an",
    "start": "2151370",
    "end": "2157220"
  },
  {
    "text": "object we decided that it has to exist so as you see that object actually is",
    "start": "2157220",
    "end": "2165650"
  },
  {
    "text": "implemented I object life lifecycle what it does hey it doesn't you nothing else",
    "start": "2165650",
    "end": "2175000"
  },
  {
    "text": "but there's something interesting here hey this is not a class this is a struct",
    "start": "2175000",
    "end": "2180130"
  },
  {
    "text": "this is different this is treated different by the just-in-time compiler",
    "start": "2180130",
    "end": "2186700"
  },
  {
    "text": "so let's see what's the difference in here say okay we are going to run the",
    "start": "2186700",
    "end": "2192740"
  },
  {
    "text": "factory which is our usual we are going to send over to",
    "start": "2192740",
    "end": "2199190"
  },
  {
    "text": "send out very alarmed expression and we are going to use the one with the",
    "start": "2199190",
    "end": "2204710"
  },
  {
    "text": "function a locator you can see the numbers we are talking half the cost if",
    "start": "2204710",
    "end": "2212180"
  },
  {
    "text": "you are allocating ten objects doesn't matter but if you are allocating a",
    "start": "2212180",
    "end": "2218900"
  },
  {
    "text": "billion in a minute that's half the time",
    "start": "2218900",
    "end": "2224230"
  },
  {
    "text": "so in this case the difference the actual difference is twenty seven in",
    "start": "2224920",
    "end": "2231049"
  },
  {
    "text": "assembly instructions and with 27 assembly instructions you actually got half the time because",
    "start": "2231049",
    "end": "2240410"
  },
  {
    "text": "those instructions are the exact instructions and no more that you need for this specific task so let's talk up",
    "start": "2240410",
    "end": "2249230"
  },
  {
    "text": "about another use case this is anyone anyone have been used in dictionary before right it's like if you are not",
    "start": "2249230",
    "end": "2256640"
  },
  {
    "text": "using the dictionary you haven't code in c-sharp what dictionary are particularly bad",
    "start": "2256640",
    "end": "2263210"
  },
  {
    "text": "when you live when you have to define objects which are user-defined why",
    "start": "2263210",
    "end": "2269089"
  },
  {
    "text": "because of compilers so we build our first dictionary that actually has other",
    "start": "2269089",
    "end": "2275029"
  },
  {
    "text": "improvements but let's let's focus on this particular thing which is you know",
    "start": "2275029",
    "end": "2280579"
  },
  {
    "text": "we are going to bake in the types the",
    "start": "2280579",
    "end": "2285920"
  },
  {
    "text": "policy for the compiler so just give me",
    "start": "2285920",
    "end": "2291829"
  },
  {
    "text": "a instruct here that implements I equality compiler to actually call at",
    "start": "2291829",
    "end": "2297680"
  },
  {
    "text": "the moment that I need to compare stuff the usual dictionary is high quality",
    "start": "2297680",
    "end": "2306140"
  },
  {
    "text": "compiler cheeky it's like I'm using the interface instead of our particular our",
    "start": "2306140",
    "end": "2313970"
  },
  {
    "text": "particular implementation so how many quality compared good look like let's",
    "start": "2313970",
    "end": "2319730"
  },
  {
    "text": "say that we have an equality compare for long equals and get high",
    "start": "2319730",
    "end": "2326310"
  },
  {
    "text": "code a asking asking the hashcode from the lung which is not returning the same",
    "start": "2326310",
    "end": "2331770"
  },
  {
    "text": "lung important you are going to kill your dictionary if uses over so who can",
    "start": "2331770",
    "end": "2342210"
  },
  {
    "text": "guess which is the slowest anyone I get a 1 anyone wants to get the 2 how about",
    "start": "2342210",
    "end": "2350760"
  },
  {
    "text": "the 3 yeah yeah I any one of you have seen this stuff before so yes we are",
    "start": "2350760",
    "end": "2361080"
  },
  {
    "text": "talking here about 19 microseconds against the base implementation with you",
    "start": "2361080",
    "end": "2368040"
  },
  {
    "text": "see using so you can see that our dictionary faster because of different design choices but still when you go is",
    "start": "2368040",
    "end": "2375480"
  },
  {
    "text": "specific you can still have half the time which means that if any of you",
    "start": "2375480",
    "end": "2381630"
  },
  {
    "text": "implemented dictionary as it is I'm baking the sec the third type which is",
    "start": "2381630",
    "end": "2390750"
  },
  {
    "text": "the compiler you are probably going to get half the time it doesn't much it",
    "start": "2390750",
    "end": "2397260"
  },
  {
    "text": "doesn't matter how much the Microsoft implement a the Microsoft implemented",
    "start": "2397260",
    "end": "2403050"
  },
  {
    "text": "improves you can still improve more because the cost of actually doing the computation for a dictionary is high so",
    "start": "2403050",
    "end": "2410820"
  },
  {
    "text": "if you can omit exact code for that for that comparison it's always gonna be better period just to give you an idea",
    "start": "2410820",
    "end": "2421380"
  },
  {
    "text": "and because numbers you can actually mess it this is this is an idea of how",
    "start": "2421380",
    "end": "2427800"
  },
  {
    "text": "different it is graphically we are talking huge so just to give you an idea",
    "start": "2427800",
    "end": "2435150"
  },
  {
    "text": "these are actual numbers this is from an actual workload you can you can actually",
    "start": "2435150",
    "end": "2442740"
  },
  {
    "text": "look that try get value and the gas hot code and they are equal from the",
    "start": "2442740",
    "end": "2448320"
  },
  {
    "text": "dictionary are like absurd and in this case this is a worst case scenario because I actually had to call",
    "start": "2448320",
    "end": "2455760"
  },
  {
    "text": "compare in line which is a huge thing because the in time compiler didn't want such a big",
    "start": "2455760",
    "end": "2462110"
  },
  {
    "text": "method so it actually forces me to actually call that method it decent it did an honor their aggressive in line",
    "start": "2462110",
    "end": "2471730"
  },
  {
    "text": "which is also very important because I mentioned in in very very deep in those",
    "start": "2471970",
    "end": "2477500"
  },
  {
    "text": "in those slides compiler directives are hints they are not requirements so the",
    "start": "2477500",
    "end": "2486650"
  },
  {
    "text": "just-in-time I say no so this is on the",
    "start": "2486650",
    "end": "2492560"
  },
  {
    "text": "wild stuff this is like I got three percent 3x improvement just doing this",
    "start": "2492560",
    "end": "2498250"
  },
  {
    "text": "if you are in the Sultan that means none you are able to be three thousand your",
    "start": "2498250",
    "end": "2506090"
  },
  {
    "text": "throughput has just tripled if this is your problem but let's go back to the",
    "start": "2506090",
    "end": "2516650"
  },
  {
    "text": "actual primitives let's go back to what this talk is about this how do i craft",
    "start": "2516650",
    "end": "2522140"
  },
  {
    "text": "code that uses this kind of techniques how do i know that the code that I am",
    "start": "2522140",
    "end": "2529220"
  },
  {
    "text": "actually writing is accessing this kind of optimizations let's say that we have",
    "start": "2529220",
    "end": "2536180"
  },
  {
    "text": "this policy which is a simple one it's a biksham you have seen it from any cache server so it's in this case I decided to",
    "start": "2536180",
    "end": "2543650"
  },
  {
    "text": "just go very very very very simple I said okay what you can never a big from",
    "start": "2543650",
    "end": "2548780"
  },
  {
    "text": "here or you can actually always a big from here so this is a this is a",
    "start": "2548780",
    "end": "2554660"
  },
  {
    "text": "demonstration so let's say that we have our cache and we are going to clear the",
    "start": "2554660",
    "end": "2559880"
  },
  {
    "text": "cache what will happen if I cannot a big",
    "start": "2559880",
    "end": "2566079"
  },
  {
    "text": "essentially what it will happen here is let's look first at the code we are",
    "start": "2567700",
    "end": "2573230"
  },
  {
    "text": "going to ask hey can we a bit from here no ok we are not the big thing",
    "start": "2573230",
    "end": "2578830"
  },
  {
    "text": "can we a big yes is this type this possible then we are going to actually",
    "start": "2578830",
    "end": "2585500"
  },
  {
    "text": "dispose the object if not we don't care we just clear",
    "start": "2585500",
    "end": "2592830"
  },
  {
    "text": "so in this simplification in this simplified algorithm we can actually go and look what happens when we call it",
    "start": "2592830",
    "end": "2600430"
  },
  {
    "text": "with different in different ways so let's look at this so we have an int",
    "start": "2600430",
    "end": "2606390"
  },
  {
    "text": "that we're never going to be to evict we have an object that we are always going",
    "start": "2606390",
    "end": "2613570"
  },
  {
    "text": "to be baked we have a disposable struct that we are always known a big we have",
    "start": "2613570",
    "end": "2620680"
  },
  {
    "text": "an on disposable struct because structure can also be this possible we are that we are going to evict we also",
    "start": "2620680",
    "end": "2627910"
  },
  {
    "text": "have a class that we can show that we are always gonna bake and there's always",
    "start": "2627910",
    "end": "2632980"
  },
  {
    "text": "an on disposable class that we are going to did I miss anyone I think I think",
    "start": "2632980",
    "end": "2640390"
  },
  {
    "text": "this is the good matrix a if let me know if I if I miss anyone okay so now let's",
    "start": "2640390",
    "end": "2645430"
  },
  {
    "text": "look at the interesting part which is you actually go to the assembler code after the release build and look at it",
    "start": "2645430",
    "end": "2651930"
  },
  {
    "text": "this is what we get can anyone see any pattern I will make",
    "start": "2651930",
    "end": "2658780"
  },
  {
    "text": "it easy so we have a combination of",
    "start": "2658780",
    "end": "2664720"
  },
  {
    "text": "different of different types but it just happened that hey you know there's",
    "start": "2664720",
    "end": "2672010"
  },
  {
    "text": "reader of they are equal what do they have in common they are not structs they",
    "start": "2672010",
    "end": "2682330"
  },
  {
    "text": "are not value types because the runtime is not able at least for now and I do",
    "start": "2682330",
    "end": "2690220"
  },
  {
    "text": "not say it to be hard to be happening for at least a few years from now is not able to be able to figure out that these",
    "start": "2690220",
    "end": "2697510"
  },
  {
    "text": "are different types of classes everything gets collapsed to the same",
    "start": "2697510",
    "end": "2703450"
  },
  {
    "text": "code but hey on the other side we",
    "start": "2703450",
    "end": "2708460"
  },
  {
    "text": "actually see different course so last let's inspect how those codes",
    "start": "2708460",
    "end": "2716440"
  },
  {
    "text": "look how that code looks like so we started from this this is the end and",
    "start": "2716440",
    "end": "2721660"
  },
  {
    "text": "this is the never evict so interesting thing about never big is that it always returned false you",
    "start": "2721660",
    "end": "2728819"
  },
  {
    "text": "remember what happened with constants they get propagated and you remember",
    "start": "2728819",
    "end": "2734849"
  },
  {
    "text": "what happened when something is false or true so it's a constant the code gets",
    "start": "2734849",
    "end": "2740910"
  },
  {
    "text": "eliminated so this one this this is what",
    "start": "2740910",
    "end": "2746759"
  },
  {
    "text": "is important to us but it gets and it ended up like looking like this it would",
    "start": "2746759",
    "end": "2754979"
  },
  {
    "text": "if we go if it don't trust me go to the assembler and you will see this this is",
    "start": "2754979",
    "end": "2764249"
  },
  {
    "text": "our 138 version let's look to our disposable stuff and we don't always",
    "start": "2764249",
    "end": "2770699"
  },
  {
    "text": "depict so we know we know for sure it doesn't matter what we put on the first one if we always use never bag we are",
    "start": "2770699",
    "end": "2777930"
  },
  {
    "text": "going to end up with the second the same code period but in this case this this",
    "start": "2777930",
    "end": "2785249"
  },
  {
    "text": "case is interesting because we know we are going from the top and then we are",
    "start": "2785249",
    "end": "2791819"
  },
  {
    "text": "going to end up in type of I disposable it sustainable from type of T which I",
    "start": "2791819",
    "end": "2798209"
  },
  {
    "text": "used the which I didn't use the shirt the shorthand version which is is type of T I disposable that's that's a sure",
    "start": "2798209",
    "end": "2809190"
  },
  {
    "text": "had a shirt on - so the interesting thing about here is okay well yeah we",
    "start": "2809190",
    "end": "2815759"
  },
  {
    "text": "have our our constant that we propagate on top and we also have disposable type",
    "start": "2815759",
    "end": "2825630"
  },
  {
    "text": "of T where T is a struct okay this is",
    "start": "2825630",
    "end": "2834299"
  },
  {
    "text": "how we propagate this is the encode",
    "start": "2834299",
    "end": "2841940"
  },
  {
    "text": "anyone sees something fishy",
    "start": "2843049",
    "end": "2847190"
  },
  {
    "text": "what about the elves didn't go out we",
    "start": "2850320",
    "end": "2859840"
  },
  {
    "text": "cannot get rid of this branch so easily because for some reason the just-in-time",
    "start": "2859840",
    "end": "2864850"
  },
  {
    "text": "compiler doesn't figure out that those upper things is a constant that's why",
    "start": "2864850",
    "end": "2872200"
  },
  {
    "text": "going to the assembler is actually very important when you are writing this kind of code because you can end up in these",
    "start": "2872200",
    "end": "2877900"
  },
  {
    "text": "kind of situations so we are not going",
    "start": "2877900",
    "end": "2882940"
  },
  {
    "text": "we are going to say not today to this one there's a way to get rid of this but it's very convoluted but if we look at",
    "start": "2882940",
    "end": "2893500"
  },
  {
    "text": "this this is this this interesting look at this so we're essentially if we write the",
    "start": "2893500",
    "end": "2899770"
  },
  {
    "text": "other one that we are going to tell take the other we are going to end on the same code right but when we look at the",
    "start": "2899770",
    "end": "2909340"
  },
  {
    "text": "core it says hey it's actually different",
    "start": "2909340",
    "end": "2914380"
  },
  {
    "text": "and you know why because the struts are",
    "start": "2914380",
    "end": "2920140"
  },
  {
    "text": "different okay so while this is is",
    "start": "2920140",
    "end": "2930610"
  },
  {
    "text": "interesting in its own selves it means that hey the the just-in-time compiler is actually building it it's actually",
    "start": "2930610",
    "end": "2939040"
  },
  {
    "text": "building for the different strands the different code for each one of those so",
    "start": "2939040",
    "end": "2945250"
  },
  {
    "text": "if I look at this and I see the type of I disposable T is assignable from type",
    "start": "2945250",
    "end": "2952210"
  },
  {
    "text": "of T and it's not getting rid of it I don't know in your country where I'm come from where I come from this is the",
    "start": "2952210",
    "end": "2961060"
  },
  {
    "text": "pod so yes it's a very report I already",
    "start": "2961060",
    "end": "2966340"
  },
  {
    "text": "reported it so you can actually go to github and actually vote for it so this",
    "start": "2966340",
    "end": "2973750"
  },
  {
    "text": "is at our first example this is how you are actually doing coda specialization",
    "start": "2973750",
    "end": "2979770"
  },
  {
    "text": "this is an example of actual code this is this is code that is running live today if you are running Raven TV",
    "start": "2979770",
    "end": "2987200"
  },
  {
    "text": "what it does is says okay we have this LC 4 compression algorithm which is",
    "start": "2987200",
    "end": "2992340"
  },
  {
    "text": "running entirely on c-sharp why because if you go for for a person in C++ or",
    "start": "2992340",
    "end": "2999330"
  },
  {
    "text": "something which is faster it's not because of interrupt this is actually as",
    "start": "2999330",
    "end": "3005390"
  },
  {
    "text": "fast as the c-sharp C++ version and I can actually show that it's that it's",
    "start": "3005390",
    "end": "3010790"
  },
  {
    "text": "possible to actually write in C sharp so fast code that you can actually rival",
    "start": "3010790",
    "end": "3017630"
  },
  {
    "text": "the assembly the hand-coded assembly web version so in this case essentially what",
    "start": "3017630",
    "end": "3024140"
  },
  {
    "text": "we are saying is okay yes we have these these markers that are going to optimize in different ways and to do in different",
    "start": "3024140",
    "end": "3030260"
  },
  {
    "text": "ways with the with the data that comes from there from the actual string of data stream so if you are dealing with",
    "start": "3030260",
    "end": "3036710"
  },
  {
    "text": "like a 16 to a 16 in version we are going to execute that code if we are",
    "start": "3036710",
    "end": "3043190"
  },
  {
    "text": "going if you gave me the 32 version we are going to go to that code and if none of those we are going to throw an",
    "start": "3043190",
    "end": "3049640"
  },
  {
    "text": "exception so you will know that you're messing up with this and only the very",
    "start": "3049640",
    "end": "3056630"
  },
  {
    "text": "first part of this is going to be is going to be put in the actual assembly it's going to be emitted the other one",
    "start": "3056630",
    "end": "3063200"
  },
  {
    "text": "is going to get discarded now let's go to a different building block this is",
    "start": "3063200",
    "end": "3070340"
  },
  {
    "text": "this is an entirely different it's more or less it's more or less the same thing but you are actually doing it",
    "start": "3070340",
    "end": "3077060"
  },
  {
    "text": "differently what you are saying is okay yes I have this I managed write buffer",
    "start": "3077060",
    "end": "3083710"
  },
  {
    "text": "interface that has all these bunch of methods so I create a nice truck for",
    "start": "3083710",
    "end": "3092480"
  },
  {
    "text": "each so I have an unmanaged stream buffer and I have a manage write buffer",
    "start": "3092480",
    "end": "3099230"
  },
  {
    "text": "which aren't entirely different one is I have the entire memory at hand and the",
    "start": "3099230",
    "end": "3104450"
  },
  {
    "text": "other one is I have a streaming version of the of the memory at hand you can",
    "start": "3104450",
    "end": "3110630"
  },
  {
    "text": "actually say yes I can go manage to yes I can build a managed version too if I",
    "start": "3110630",
    "end": "3116290"
  },
  {
    "text": "but interesting thing about this is that this gets embedded into another sealed",
    "start": "3116290",
    "end": "3122480"
  },
  {
    "text": "class and because it gets embedded and it because it is instruct whenever you",
    "start": "3122480",
    "end": "3129590"
  },
  {
    "text": "tell me a you know I want a blue double writer that it's able to write to a",
    "start": "3129590",
    "end": "3135470"
  },
  {
    "text": "specific type of I - write buffer I'm gonna meet a new little writer for its",
    "start": "3135470",
    "end": "3143990"
  },
  {
    "text": "particular type that you get mean so whenever I call any method on this",
    "start": "3143990",
    "end": "3150980"
  },
  {
    "text": "particular on this particular little writer I'm going to be guaranteed that",
    "start": "3150980",
    "end": "3157580"
  },
  {
    "text": "the code generation exonerated for that class is going to be tailored for the",
    "start": "3157580",
    "end": "3163490"
  },
  {
    "text": "specific construct stop her the this",
    "start": "3163490",
    "end": "3172250"
  },
  {
    "text": "important think about it for a minute we",
    "start": "3172250",
    "end": "3178130"
  },
  {
    "text": "are saying hey we have classes and classes by the run but the runtime they don't get like did they get or put in",
    "start": "3178130",
    "end": "3185870"
  },
  {
    "text": "the same place right but in here we are saying we are omitting even for a class",
    "start": "3185870",
    "end": "3194590"
  },
  {
    "text": "different versions of it tailored for each use that we want you this is not a",
    "start": "3194710",
    "end": "3201560"
  },
  {
    "text": "method this is a class so I can go and say okay I have this 4d object",
    "start": "3201560",
    "end": "3208010"
  },
  {
    "text": "pool and the way that I deal with the object pool inside it just not no longer",
    "start": "3208010",
    "end": "3214730"
  },
  {
    "text": "a question of the how do I write I have to write all the code for the different",
    "start": "3214730",
    "end": "3219800"
  },
  {
    "text": "behaviors no I write a fake ID which is object pool and I implement how each one",
    "start": "3219800",
    "end": "3229940"
  },
  {
    "text": "of the operations is going to behave on the strip himself so now every time that",
    "start": "3229940",
    "end": "3239570"
  },
  {
    "text": "I have a reference for this kind of class",
    "start": "3239570",
    "end": "3245450"
  },
  {
    "text": "what I have is a natural reference to an actual implementation that is implemented this abotu spec this is an",
    "start": "3245450",
    "end": "3257450"
  },
  {
    "text": "this is an example we use right number right number is different for each one of the implementations and it's a very",
    "start": "3257450",
    "end": "3264320"
  },
  {
    "text": "very highly costly operation if you call it now because we are using aggressive inlining and all that the just-in-time",
    "start": "3264320",
    "end": "3271609"
  },
  {
    "text": "actually get like a huge method when I when I do the writes and optimize the",
    "start": "3271609",
    "end": "3279349"
  },
  {
    "text": "layout of the code based on that so this",
    "start": "3279349",
    "end": "3287000"
  },
  {
    "text": "is another block this is a this is an entirely different way of looking at the same thing this is think about this",
    "start": "3287000",
    "end": "3295960"
  },
  {
    "text": "what's what's a page in a database a page is like a chunk of memory of a",
    "start": "3295960",
    "end": "3301609"
  },
  {
    "text": "known time of unknown size that it also has unknown header and all the different",
    "start": "3301609",
    "end": "3308060"
  },
  {
    "text": "things that you wanted a page to have okay and we allocate pages like crazy",
    "start": "3308060",
    "end": "3314810"
  },
  {
    "text": "because hey I get pages like I can have pages like a 4k so picture if you ax",
    "start": "3314810",
    "end": "3323000"
  },
  {
    "text": "asked me for something that is like a megabyte but interesting thing here is",
    "start": "3323000",
    "end": "3328640"
  },
  {
    "text": "that you can actually hide that complexity away because you can say okay",
    "start": "3328640",
    "end": "3333829"
  },
  {
    "text": "this is a page this is the Apple pointer which is an index to somewhere and all",
    "start": "3333829",
    "end": "3340700"
  },
  {
    "text": "the methods actually get calls from the backing store but this doesn't had to be",
    "start": "3340700",
    "end": "3347450"
  },
  {
    "text": "within managed memory you can have an array of objects and instead of passing",
    "start": "3347450",
    "end": "3354319"
  },
  {
    "text": "integers you can actually pass something that is able to deal with all the complexity that you are dealing with which becomes",
    "start": "3354319",
    "end": "3360530"
  },
  {
    "text": "an index so you can have an opaque reference to any internal structure that",
    "start": "3360530",
    "end": "3371359"
  },
  {
    "text": "cost absolutely nothing the actual runtime cast of this",
    "start": "3371359",
    "end": "3378270"
  },
  {
    "text": "thing is passing along over the stack so",
    "start": "3378270",
    "end": "3388950"
  },
  {
    "text": "the question that you may be asking right now is this is worth the trouble because if you I said if you are going",
    "start": "3388950",
    "end": "3397190"
  },
  {
    "text": "this road there's no going back right this is optimizing the JSON parser",
    "start": "3397190",
    "end": "3406829"
  },
  {
    "text": "because hey we needed to optimize a JSON parser and the problem was okay yes we",
    "start": "3406829",
    "end": "3413280"
  },
  {
    "text": "applied to something that is pretty optimized but we are not able now to",
    "start": "3413280",
    "end": "3418290"
  },
  {
    "text": "deal with the bottlenecks like changing how parsing is done or at the at the",
    "start": "3418290",
    "end": "3423869"
  },
  {
    "text": "next level which is okay we are dealing with this we can change the actual",
    "start": "3423869",
    "end": "3429900"
  },
  {
    "text": "algorithm behind the person because in the end parts in a symbol is an it's an",
    "start": "3429900",
    "end": "3435780"
  },
  {
    "text": "estate machine so in this case we started this is when I took all these",
    "start": "3435780",
    "end": "3443280"
  },
  {
    "text": "it's almost three weeks ago it was actually three weeks ago this is what it from the internal Channel there hey we",
    "start": "3443280",
    "end": "3450750"
  },
  {
    "text": "are we were here now we're here so in two weeks of applying these kind of",
    "start": "3450750",
    "end": "3458970"
  },
  {
    "text": "optimizations the beautiful writer was one of those we went from that's around",
    "start": "3458970",
    "end": "3468589"
  },
  {
    "text": "500 seconds let's 6 minutes or something even a little bit more to under three",
    "start": "3468589",
    "end": "3477000"
  },
  {
    "text": "minutes for a better base that's huge I",
    "start": "3477000",
    "end": "3484400"
  },
  {
    "text": "in just Jason",
    "start": "3484400",
    "end": "3488599"
  },
  {
    "text": "but then one week afterwards we were",
    "start": "3490599",
    "end": "3496579"
  },
  {
    "text": "already in almost su two minutes I mean interesting thing is we were",
    "start": "3496579",
    "end": "3504170"
  },
  {
    "text": "trying because you remember that part of the pareto is like 0.8 percent of the code because I well I work in the 0.8 a",
    "start": "3504170",
    "end": "3515420"
  },
  {
    "text": "part of the code I wanted to I was optimizing something else and this",
    "start": "3515420",
    "end": "3521000"
  },
  {
    "text": "happened because in the end I had to optimize some little routine that",
    "start": "3521000",
    "end": "3526309"
  },
  {
    "text": "actually was used by the partial the",
    "start": "3526309",
    "end": "3531680"
  },
  {
    "text": "general offenders are always the same when you are at that level of performance and when you when you already fix the stuff at the first level",
    "start": "3531680",
    "end": "3538700"
  },
  {
    "text": "and you already fix the stuff at the second level the general offenders are always the same",
    "start": "3538700",
    "end": "3543799"
  },
  {
    "text": "is it very same I can tell you like the 10 files that takes 80% of my time in a",
    "start": "3543799",
    "end": "3552380"
  },
  {
    "text": "year and I work always around those 10",
    "start": "3552380",
    "end": "3558349"
  },
  {
    "text": "files and it's friends in a half-a-million software project so as",
    "start": "3558349",
    "end": "3566210"
  },
  {
    "text": "half a million lized software plus you get idea ten fights",
    "start": "3566210",
    "end": "3573640"
  },
  {
    "text": "that only whiles means that I got a 6.6 X improvement in between the release and",
    "start": "3574240",
    "end": "3583910"
  },
  {
    "text": "a few weeks later in a patch release so",
    "start": "3583910",
    "end": "3590680"
  },
  {
    "text": "let's put all these together because I think that this all this may look like",
    "start": "3590680",
    "end": "3596329"
  },
  {
    "text": "separated like this is this technique and that technique actually that the second level of this talk is actually",
    "start": "3596329",
    "end": "3603069"
  },
  {
    "text": "what are these the design tenants to actually design libraries based on meta",
    "start": "3603069",
    "end": "3608299"
  },
  {
    "text": "programming concepts so in this case what we're going to put it together to",
    "start": "3608299",
    "end": "3614809"
  },
  {
    "text": "try to try it we allow the specialized generate code for specific conditions the STL of c++ is exactly about that",
    "start": "3614809",
    "end": "3625859"
  },
  {
    "text": "it's about tailoring your code emission specifically for the problem that you",
    "start": "3625859",
    "end": "3631630"
  },
  {
    "text": "have to solve also it allows us to",
    "start": "3631630",
    "end": "3636760"
  },
  {
    "text": "create for kids four types that we know we cannot fix the fire we kind of fix the problem at",
    "start": "3636760",
    "end": "3642579"
  },
  {
    "text": "this level because okay yes I'm going to because everything depended on this thing but what we can do is say okay we",
    "start": "3642579",
    "end": "3654099"
  },
  {
    "text": "are building a co cosmic aid on top of this and every color is gonna tell me so",
    "start": "3654099",
    "end": "3659440"
  },
  {
    "text": "I the only thing that I have to do is go to the caller and see okay how do you",
    "start": "3659440",
    "end": "3664599"
  },
  {
    "text": "want to use this oh you want this to use this in this way in this way use this parameter you go to the other color and",
    "start": "3664599",
    "end": "3671170"
  },
  {
    "text": "say okay and you want to use it so every single one is going to get what he asked",
    "start": "3671170",
    "end": "3676210"
  },
  {
    "text": "for the general layout of the code didn't change but the underlying emitted",
    "start": "3676210",
    "end": "3682299"
  },
  {
    "text": "assembly did change and it's way faster because now it doesn't have to check hey",
    "start": "3682299",
    "end": "3688420"
  },
  {
    "text": "I needed to do this or I needed to do that know that that question is never there anymore you just go and you just",
    "start": "3688420",
    "end": "3695559"
  },
  {
    "text": "have only one path to go which is doing the job that you were asked to do so for",
    "start": "3695559",
    "end": "3703329"
  },
  {
    "text": "anyone that comes from rust this is essentially a constant the concept of trade I trade or Co Co abstractions the",
    "start": "3703329",
    "end": "3711970"
  },
  {
    "text": "same if you come from C++ it's a templates templates what the important thing about templates if you think about",
    "start": "3711970",
    "end": "3718180"
  },
  {
    "text": "it is they are Turing complete this is not the case at least not yet but there",
    "start": "3718180",
    "end": "3724569"
  },
  {
    "text": "is an interesting thing in this institution there's an interesting proposal at the language level which is called shapes",
    "start": "3724569",
    "end": "3731500"
  },
  {
    "text": "and extensions if they ever implemented Java and shapes and extensions they",
    "start": "3731500",
    "end": "3737470"
  },
  {
    "text": "could make the thing awesome because you this is essentially the underlying",
    "start": "3737470",
    "end": "3744099"
  },
  {
    "text": "mechanics that we are doing by hand now that will implement and give you the",
    "start": "3744099",
    "end": "3750130"
  },
  {
    "text": "ability to do this kind of stuff it also these kind of techniques can be used to",
    "start": "3750130",
    "end": "3758290"
  },
  {
    "text": "the beautiful eyes while corsola the new car CLR version from to 0 & 4 has the",
    "start": "3758290",
    "end": "3765490"
  },
  {
    "text": "ability to divert relies in some specific cases for the difficult cases",
    "start": "3765490",
    "end": "3770980"
  },
  {
    "text": "that that just-in-time compiler is not able to work with you can still use these kind of techniques so if your",
    "start": "3770980",
    "end": "3778480"
  },
  {
    "text": "problem is how do I deal with verticals that it can happen on highly efficient code is you you go this route also",
    "start": "3778480",
    "end": "3790210"
  },
  {
    "text": "hiding pointers and references this is big you can actually treat a pointer",
    "start": "3790210",
    "end": "3796290"
  },
  {
    "text": "what a manners reference that's the same thing you don't need to know how it was",
    "start": "3796290",
    "end": "3804670"
  },
  {
    "text": "implemented this is like in the old books say this I have an opaque",
    "start": "3804670",
    "end": "3810520"
  },
  {
    "text": "reference this is like the starting of",
    "start": "3810520",
    "end": "3817030"
  },
  {
    "text": "the type system theory is I have an opaque reference I don't care what its inside because I have the tools to",
    "start": "3817030",
    "end": "3824290"
  },
  {
    "text": "actually go and modify the state of that reference without knowing what it's bucking it you can actually also build",
    "start": "3824290",
    "end": "3832180"
  },
  {
    "text": "indexers and the cost of that abstraction is a long an actual log on",
    "start": "3832180",
    "end": "3841089"
  },
  {
    "text": "the stack so it also allows you to avoid",
    "start": "3841089",
    "end": "3848520"
  },
  {
    "text": "lambda lambda context capture because if",
    "start": "3848520",
    "end": "3854079"
  },
  {
    "text": "you if you haba if you have an indexer and that you can put on top you just",
    "start": "3854079",
    "end": "3859270"
  },
  {
    "text": "pass the index you just make sure that you make that that information available",
    "start": "3859270",
    "end": "3865750"
  },
  {
    "text": "in some marking store which is the thing that you are passing around through your",
    "start": "3865750",
    "end": "3871930"
  },
  {
    "text": "chain of methods your context and because you are passing this interface",
    "start": "3871930",
    "end": "3879190"
  },
  {
    "text": "that behaves like like a long but actually from the point of view of your",
    "start": "3879190",
    "end": "3885550"
  },
  {
    "text": "code is very meaty is a no pack reference now the",
    "start": "3885550",
    "end": "3891160"
  },
  {
    "text": "of lambdas is essentially zero this kind",
    "start": "3891160",
    "end": "3897610"
  },
  {
    "text": "of things can actually cut down on your allocations very hard and one final",
    "start": "3897610",
    "end": "3906070"
  },
  {
    "text": "thought this is this is general this is not C sharp this is this is general if you are working on code and you're",
    "start": "3906070",
    "end": "3913990"
  },
  {
    "text": "optimizing and you have people that is optimizing your code one thing that I'd",
    "start": "3913990",
    "end": "3920740"
  },
  {
    "text": "like to like to say about optimizing code if you are not doing you are essentially burning money like old-style",
    "start": "3920740",
    "end": "3928000"
  },
  {
    "text": "burning money but whenever you start",
    "start": "3928000",
    "end": "3933850"
  },
  {
    "text": "your studies if if you are someone that is new to the performance you're going",
    "start": "3933850",
    "end": "3939490"
  },
  {
    "text": "to go follow the route go off with the bottlenecks if management says no to higher risk no we had to reveal this",
    "start": "3939490",
    "end": "3946390"
  },
  {
    "text": "make sense okay let's go to the next level if if the cost is still too high",
    "start": "3946390",
    "end": "3951700"
  },
  {
    "text": "or the risk is still too high then figure out what are the worst places and let's go and fix the let's figure out",
    "start": "3951700",
    "end": "3957970"
  },
  {
    "text": "where the 0.88 is but the problem is",
    "start": "3957970",
    "end": "3963790"
  },
  {
    "text": "that when you are done you are not done and this is what I wanted to convey your",
    "start": "3963790",
    "end": "3972520"
  },
  {
    "text": "bottlenecks never ever go away they just",
    "start": "3972520",
    "end": "3979330"
  },
  {
    "text": "become more insidious because now what you used to be a bottleneck and you fix",
    "start": "3979330",
    "end": "3985120"
  },
  {
    "text": "it like and in two months and you were like hey this is great now your next",
    "start": "3985120",
    "end": "3991600"
  },
  {
    "text": "bottleneck is going to be an order of magnitude complex so instead of two months is really going to cost you six",
    "start": "3991600",
    "end": "3997480"
  },
  {
    "text": "or a year so what I mean here is when",
    "start": "3997480",
    "end": "4003900"
  },
  {
    "text": "you are arriving to the point that this your software is actually efficient you",
    "start": "4003900",
    "end": "4010260"
  },
  {
    "text": "are going to end up dealing with stuff like the memory model how this executed",
    "start": "4010260",
    "end": "4016740"
  },
  {
    "text": "on the CPU and that kind of stuff which for some people like me is fun but for",
    "start": "4016740",
    "end": "4022590"
  },
  {
    "text": "most people is like where do I want to quit but anyway so just to",
    "start": "4022590",
    "end": "4030290"
  },
  {
    "text": "give you an idea we are in the four zero version and we already know that we have to get get rid of our JSON parser which",
    "start": "4030290",
    "end": "4037339"
  },
  {
    "text": "is a state-based and about the bad news is that the new course LR parser which",
    "start": "4037339",
    "end": "4043099"
  },
  {
    "text": "is going to be very fast it's not going to cut it for us because it's still a",
    "start": "4043099",
    "end": "4048609"
  },
  {
    "text": "state machine we need to go to streaming so we have to build it ourselves again",
    "start": "4048609",
    "end": "4055460"
  },
  {
    "text": "and the other one is our indexing engine that we have been known for a fact that it was a problem back in 3-0 by the way",
    "start": "4055460",
    "end": "4062630"
  },
  {
    "text": "from all the problems that we had it was like okay yes I we have this building rebuilding this will take us another two",
    "start": "4062630",
    "end": "4068869"
  },
  {
    "text": "years we are not going to delay so we went for first for one and now we are",
    "start": "4068869",
    "end": "4073880"
  },
  {
    "text": "going for the other one but just to give you an idea the entire data base allocation budget for almost anything is",
    "start": "4073880",
    "end": "4083390"
  },
  {
    "text": "below 500 megabytes a single index in",
    "start": "4083390",
    "end": "4089359"
  },
  {
    "text": "run of Lezyne cost me 10 gigabytes so if",
    "start": "4089359",
    "end": "4094369"
  },
  {
    "text": "I if I if I take a like 10 minutes 10 minute for print of all the memory allocations is like losing losing losing",
    "start": "4094369",
    "end": "4100758"
  },
  {
    "text": "losing losing losing losing Jason unlike the tenth and if we are talking about",
    "start": "4100759",
    "end": "4107690"
  },
  {
    "text": "gigabyte gigabyte by 8 megabyte hey a hundred just to give you",
    "start": "4107690",
    "end": "4114140"
  },
  {
    "text": "an idea of how complex this thing become a becomes thank you all for coming and",
    "start": "4114140",
    "end": "4122180"
  },
  {
    "text": "if we have some time we can have some questions",
    "start": "4122180",
    "end": "4127390"
  },
  {
    "text": "[Applause]",
    "start": "4127640",
    "end": "4135979"
  }
]