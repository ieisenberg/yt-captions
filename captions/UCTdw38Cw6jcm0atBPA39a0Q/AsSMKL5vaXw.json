[
  {
    "start": "0",
    "end": "44000"
  },
  {
    "text": "okay so good morning everyone now that I can't see anyone that's much better",
    "start": "9090",
    "end": "14610"
  },
  {
    "text": "with these lights so welcome to my talk about kernel development with modern C++",
    "start": "14610",
    "end": "20460"
  },
  {
    "text": "I didn't make any thorough check but I think there was never a kernel socket NDC anywhere anytime so that's a record",
    "start": "20460",
    "end": "28890"
  },
  {
    "text": "actually was very surprised that the talk was accepted and so kind of weird",
    "start": "28890",
    "end": "34830"
  },
  {
    "text": "being here talking about kernel but I see a few people so we see how many we",
    "start": "34830",
    "end": "40290"
  },
  {
    "text": "will we will be left at the end of the talk okay so my name is Pavel I'm a",
    "start": "40290",
    "end": "45600"
  },
  {
    "start": "44000",
    "end": "89000"
  },
  {
    "text": "developer I'm a trainer I'm an author and apparently a speaker and so I've written a few books the latest one is",
    "start": "45600",
    "end": "52260"
  },
  {
    "text": "about Windows kernel development and so some of the stuff I'll describe today is",
    "start": "52260",
    "end": "57629"
  },
  {
    "text": "actually some things I've done as part of my current development I like to like to write in kernel mode I like using",
    "start": "57629",
    "end": "65369"
  },
  {
    "text": "mode as well using what this is perfectly fine but kernel has kind of it's a special thing special power and",
    "start": "65369",
    "end": "73290"
  },
  {
    "text": "maybe special aura maybe and so I've written some other books so again as",
    "start": "73290",
    "end": "78930"
  },
  {
    "text": "always go ahead and buy them that's very good for me so go ahead and do that I have several open source tools on",
    "start": "78930",
    "end": "85560"
  },
  {
    "text": "github and a few blogs you might want to read so what what what is it about what",
    "start": "85560",
    "end": "93240"
  },
  {
    "start": "89000",
    "end": "305000"
  },
  {
    "text": "I'm going to talk about in this session so the idea is that in kernel classic",
    "start": "93240",
    "end": "98760"
  },
  {
    "text": "development drivers or kernel drivers were always written in C and so this is",
    "start": "98760",
    "end": "105180"
  },
  {
    "text": "kind of the hard core this is how low-level code should look like C is the",
    "start": "105180",
    "end": "110850"
  },
  {
    "text": "real language everything else is just those layers of abstractions that",
    "start": "110850",
    "end": "116100"
  },
  {
    "text": "probably hurt performance and more memory allocations and who knows what so",
    "start": "116100",
    "end": "121200"
  },
  {
    "text": "you should always use seen if you're really one of those brave souls assembly language is really the best but as a",
    "start": "121200",
    "end": "128009"
  },
  {
    "text": "compromise you can use C and I'm talking from experiencing the Windows and",
    "start": "128009",
    "end": "134790"
  },
  {
    "text": "Microsoft space and so if you look at the samples for drivers that Microsoft",
    "start": "134790",
    "end": "140489"
  },
  {
    "text": "provides on github they're all written in C even today but in fact you can use",
    "start": "140489",
    "end": "146069"
  },
  {
    "text": "C++ and it actually can help create drivers that are more robust",
    "start": "146069",
    "end": "151709"
  },
  {
    "text": "because as I'll describe shortly in kernel-mode you're less likely to be",
    "start": "151709",
    "end": "157319"
  },
  {
    "text": "forgiven for mistakes one of the fatal mistakes that everybody knows about in Windows is that blue screen of death",
    "start": "157319",
    "end": "163590"
  },
  {
    "text": "that everybody likes and so this blue screen happens when there is an",
    "start": "163590",
    "end": "168720"
  },
  {
    "text": "exception in kernel mode that is unhandled in user mode well the process crashes you can continue moving on in",
    "start": "168720",
    "end": "176370"
  },
  {
    "text": "kernel mode everything crashes and so you have to be extra careful in the kernel and so using C++ this as I try to",
    "start": "176370",
    "end": "184950"
  },
  {
    "text": "demonstrate can actually make your code more robust less likely to crash and",
    "start": "184950",
    "end": "190200"
  },
  {
    "text": "less likely to leak resources and so I'm going to show you some examples of course this is not a crash course in",
    "start": "190200",
    "end": "198150"
  },
  {
    "text": "writing kernel drivers if you are expecting to write kernel drivers after this talk you'll be disappointed for",
    "start": "198150",
    "end": "203819"
  },
  {
    "text": "sure but just to give you some ideas of what you can do and how to think about",
    "start": "203819",
    "end": "209370"
  },
  {
    "text": "these things to create more robust code which of course is good for other",
    "start": "209370",
    "end": "214859"
  },
  {
    "text": "low-level code maybe embedded code not necessarily something running in the",
    "start": "214859",
    "end": "220079"
  },
  {
    "text": "kernel and so classically Microsoft didn't support C++ at all for kernel",
    "start": "220079",
    "end": "225900"
  },
  {
    "text": "development officially until 2012 up until then you had to use C if you",
    "start": "225900",
    "end": "232290"
  },
  {
    "text": "wanted to get any support from Microsoft so people actually did use light lightweight C++ like the ability to",
    "start": "232290",
    "end": "240329"
  },
  {
    "text": "declare variable anywhere not just the beginning of scopes so this was actually fixed in c99 the Microsoft compiler",
    "start": "240329",
    "end": "247829"
  },
  {
    "text": "didn't support that so you actually had to declare everything upfront but it was",
    "start": "247829",
    "end": "253250"
  },
  {
    "text": "unsupported so you couldn't get official support from Microsoft if you have any issues for whatever reason unrelated to",
    "start": "253250",
    "end": "260370"
  },
  {
    "text": "C++ but starting with 2012 Microsoft actually decided they're going to",
    "start": "260370",
    "end": "265889"
  },
  {
    "text": "support developing with C++ and the compiler compiling your code is the same",
    "start": "265889",
    "end": "271919"
  },
  {
    "text": "compiler that is bundled today with Visual Studio and again that wasn't the case previously you had a different",
    "start": "271919",
    "end": "278849"
  },
  {
    "text": "compiler for drivers and different compiler for using which was kind of silly they're all C++",
    "start": "278849",
    "end": "284449"
  },
  {
    "text": "compilers why should they actually be different but now thankfully it's supported officially but still as I",
    "start": "284449",
    "end": "292039"
  },
  {
    "text": "mentioned the samples that Microsoft provides some of these samples are actually the actual code of some drivers",
    "start": "292039",
    "end": "298580"
  },
  {
    "text": "that are in Windows are still written in pure C which i think is a shame the",
    "start": "298580",
    "end": "304340"
  },
  {
    "text": "kernel by the way in Windows is written mostly in C but there is actually one",
    "start": "304340",
    "end": "310129"
  },
  {
    "start": "305000",
    "end": "452000"
  },
  {
    "text": "piece which uses C++ it only owns or it's always makes me kind of laugh a",
    "start": "310129",
    "end": "317090"
  },
  {
    "text": "little bit because there is one process that you will not see in task manager it's called memory compression memory",
    "start": "317090",
    "end": "324710"
  },
  {
    "text": "compression is a process that's available starting with Windows 10 the rs1 version version 6007 the anniversary",
    "start": "324710",
    "end": "332509"
  },
  {
    "text": "update where Windows actually can compress physical memory to conserve",
    "start": "332509",
    "end": "337669"
  },
  {
    "text": "space now task manager if you open that and look for memory compression it's not there because there's a specific calling",
    "start": "337669",
    "end": "344509"
  },
  {
    "text": "task manager that says if it's that memory compression let's just continue not show it why because people may see",
    "start": "344509",
    "end": "350630"
  },
  {
    "text": "the memory compression process consuming lots of memory they'll say what's that junk I mean who is consuming dot memory",
    "start": "350630",
    "end": "356599"
  },
  {
    "text": "but in fact this is compress memory so it's actually saving memory but people don't realize that with casual looks so",
    "start": "356599",
    "end": "365029"
  },
  {
    "text": "if you go ahead and either look at the memory tab for instance you can see that currently on my machine does 10.8",
    "start": "365029",
    "end": "371360"
  },
  {
    "text": "gigabytes of RAM used but I have 595 megabytes which is compressed memory",
    "start": "371360",
    "end": "377029"
  },
  {
    "text": "which means that I'm saving them or maybe they're the uncompressed memory is 1 gigabyte and I'm only consuming far",
    "start": "377029",
    "end": "383539"
  },
  {
    "text": "have 595 megabytes so it's a good thing however if you look at different tools such as process Explorer process",
    "start": "383539",
    "end": "390319"
  },
  {
    "text": "Explorer does not hide anything and here you can find the memory compression process it does exist you can see that",
    "start": "390319",
    "end": "397669"
  },
  {
    "text": "it's consumption is actually the same as the number of megabytes we've seen",
    "start": "397669",
    "end": "403009"
  },
  {
    "text": "earlier if you go ahead and double click that and look at the threads tab you'll see a code here that is part of pointy",
    "start": "403009",
    "end": "410690"
  },
  {
    "text": "or scanner which is the Windows kernel you can see it's C++ not C++ but it uses templates I actually saw",
    "start": "410690",
    "end": "419000"
  },
  {
    "text": "this source code in person when I was working for Microsoft for a brief period and I was actually amazed that the store",
    "start": "419000",
    "end": "426680"
  },
  {
    "text": "manager which is the component that's managing the memory compression infrastructure is actually written in",
    "start": "426680",
    "end": "433190"
  },
  {
    "text": "C++ and uses templates the rest of the kernel uses pure C know C++ at all and",
    "start": "433190",
    "end": "440539"
  },
  {
    "text": "certainly not templates so someone there and actually know who did that so kind",
    "start": "440539",
    "end": "447139"
  },
  {
    "text": "of impressive but their own drivers are still using pure C okay so what's",
    "start": "447139",
    "end": "453919"
  },
  {
    "start": "452000",
    "end": "692000"
  },
  {
    "text": "different about user mode versus Karamel development what's really different I mean why should we do anything different",
    "start": "453919",
    "end": "461600"
  },
  {
    "text": "in kernel mode than we're doing in user mode and so first there was the thing I mentioned earlier about unhindered",
    "start": "461600",
    "end": "468169"
  },
  {
    "text": "exceptions if you have an exception it's not handled in user mode then that particular process crashes so it's",
    "start": "468169",
    "end": "475400"
  },
  {
    "text": "probably not very pretty but it's not too bad either your system is intact you",
    "start": "475400",
    "end": "480740"
  },
  {
    "text": "can just go about your business maybe you had some bug you can correct that everything is good",
    "start": "480740",
    "end": "487160"
  },
  {
    "text": "however in kernel mode only bug is causing the system to crash with that blue screen by the way the blue screen",
    "start": "487160",
    "end": "493490"
  },
  {
    "text": "is not Microsoft's punishment on developers it's not that it's really a",
    "start": "493490",
    "end": "498860"
  },
  {
    "text": "mechanism to protect the system because kernel code is trusted or supposed to be",
    "start": "498860",
    "end": "504080"
  },
  {
    "text": "trusted because it's all-powerful you can do anything you can actually make",
    "start": "504080",
    "end": "509120"
  },
  {
    "text": "some damage that will prevent Windows from restarting and so the purpose of",
    "start": "509120",
    "end": "515180"
  },
  {
    "text": "the blue screen is to stop right now so that any further code will not be able",
    "start": "515180",
    "end": "521120"
  },
  {
    "text": "to cause any potential damage and so you have to code very carefully in kernel",
    "start": "521120",
    "end": "527000"
  },
  {
    "text": "mode much more than in user mode another thing that is different is that in user mode when a process terminates for",
    "start": "527000",
    "end": "533900"
  },
  {
    "text": "whatever reason maybe normally maybe because it was terminated forcefully maybe because an unhandled exception",
    "start": "533900",
    "end": "540050"
  },
  {
    "text": "happened doesn't matter the operating system cleans up everything so all the private memory is freed all the handlers",
    "start": "540050",
    "end": "547520"
  },
  {
    "text": "are closed Natha thing is left that is guaranteed in user mode however if you have a driver and",
    "start": "547520",
    "end": "555290"
  },
  {
    "text": "you allocated some memory for instance and when a driver unload you forgot for",
    "start": "555290",
    "end": "560510"
  },
  {
    "text": "whatever reason to deallocate that memory no one will do that for you",
    "start": "560510",
    "end": "565970"
  },
  {
    "text": "and so you lick memory until the next restart so you may wonder why is the",
    "start": "565970",
    "end": "571790"
  },
  {
    "text": "kernel not kind of tracking all these memory locations and just freeing them",
    "start": "571790",
    "end": "576950"
  },
  {
    "text": "when the appropriate driver unloads and so the reason is that it's simply too",
    "start": "576950",
    "end": "582950"
  },
  {
    "text": "dangerous because it may be the case that the driver left that memory on purpose because it's talking to another",
    "start": "582950",
    "end": "590570"
  },
  {
    "text": "driver that is going to use that memory to do something else and so if the kernel would release that memory the",
    "start": "590570",
    "end": "597290"
  },
  {
    "text": "other driver will access memory that is not there and we're going to crash the system so the kernel can't really take",
    "start": "597290",
    "end": "604070"
  },
  {
    "text": "any chances and that's why it's not tracking any memory locations and it will not free any memory automatically",
    "start": "604070",
    "end": "611029"
  },
  {
    "text": "and remember that in kernel space all the drivers are in one address space this is different than in user mode",
    "start": "611029",
    "end": "616760"
  },
  {
    "text": "where each process has its own address space and there don't they don't mix so it's very easy theoretically to",
    "start": "616760",
    "end": "623810"
  },
  {
    "text": "communicate between two drivers because they are running in the same space so again you need to be careful not to lick",
    "start": "623810",
    "end": "630920"
  },
  {
    "text": "anything because otherwise this leak will only be resolved in the next boot now what about the return values from",
    "start": "630920",
    "end": "638089"
  },
  {
    "text": "functions so if you're calling Windows API is in user mode they return some value telling you whether you succeed or",
    "start": "638089",
    "end": "644180"
  },
  {
    "text": "not and some developers say well I'm calling this function it's a very low probability that we would ever fail",
    "start": "644180",
    "end": "650630"
  },
  {
    "text": "they're not checking return values for every function checking for return",
    "start": "650630",
    "end": "655910"
  },
  {
    "text": "values for functions that seem to have maybe the chance at least days it to",
    "start": "655910",
    "end": "661519"
  },
  {
    "text": "fail but in kernel mode is very very important to always check for errors you cannot really miss anything because",
    "start": "661519",
    "end": "668149"
  },
  {
    "text": "anything can can happen even if you're trying to allocate let's say 10 bytes which seems like a very small amount of",
    "start": "668149",
    "end": "675410"
  },
  {
    "text": "memory you can't really take the chance because this could fail maybe the system is now very long on resources the driver",
    "start": "675410",
    "end": "682850"
  },
  {
    "text": "is in a system that it doesn't control so anything can happen you should always check for return values from functions",
    "start": "682850",
    "end": "689930"
  },
  {
    "text": "or various api's there's something called an interrupt request level which",
    "start": "689930",
    "end": "695150"
  },
  {
    "start": "692000",
    "end": "998000"
  },
  {
    "text": "we don't have time to talk in detail this is a term that if you if you have",
    "start": "695150",
    "end": "700190"
  },
  {
    "text": "been doing any user mo development you've never heard of that's completely fine because in user mode the value of",
    "start": "700190",
    "end": "707450"
  },
  {
    "text": "AI RQL is always zero for all processors and so there's no point in introducing a",
    "start": "707450",
    "end": "713450"
  },
  {
    "text": "new term when it's never changing and it doesn't affect you but in kernel mode the RQL can be higher and when article",
    "start": "713450",
    "end": "721640"
  },
  {
    "text": "goes to the value of 2 or higher this puts some constraints on the way on the",
    "start": "721640",
    "end": "728360"
  },
  {
    "text": "things that you can do in the kernel so in our ql2 you actually get to a use",
    "start": "728360",
    "end": "735020"
  },
  {
    "text": "memory which must be resident in RAM if the memory is paged out for whatever",
    "start": "735020",
    "end": "740210"
  },
  {
    "text": "reason you're going to blue screen the system you cannot wait for kernel objects there's no way to wait because",
    "start": "740210",
    "end": "746030"
  },
  {
    "text": "the scheduler is asleep and cannot wake on that particular processor so there's some very strict limitations on this",
    "start": "746030",
    "end": "753430"
  },
  {
    "text": "type of code and so you again have to be extra careful so generally if you have",
    "start": "753430",
    "end": "760430"
  },
  {
    "text": "some bad coding for for from whatever",
    "start": "760430",
    "end": "765520"
  },
  {
    "text": "reason they're more likely to be affecting the entire system when you",
    "start": "765520",
    "end": "770660"
  },
  {
    "text": "have a driver because the driver typically services many processes and if the driver dead locks or something like",
    "start": "770660",
    "end": "777290"
  },
  {
    "text": "that it could deadlock many processes and so again you have to be extra careful when you're testing or debugging",
    "start": "777290",
    "end": "784880"
  },
  {
    "text": "using what applications you just a chat attach your debugger to a process and then just debug it very simple on your",
    "start": "784880",
    "end": "791840"
  },
  {
    "text": "developer machine everything is nice and cozy in kernel mode you can't really do",
    "start": "791840",
    "end": "797090"
  },
  {
    "text": "that if you want to debug a driver you have to debug a different machine it could be a virtual machine but it must",
    "start": "797090",
    "end": "803180"
  },
  {
    "text": "be a different machine and so when you set a breakpoint you actually freeze the entire machine there's no way to debug a",
    "start": "803180",
    "end": "810740"
  },
  {
    "text": "particular process on the other machine you debug a machine and so the debugging is is more calm",
    "start": "810740",
    "end": "816440"
  },
  {
    "text": "flex and more time-consuming and that's why you probably don't want that many bugs in your driver because it just",
    "start": "816440",
    "end": "823430"
  },
  {
    "text": "makes everything take longer so what about the various libraries that you",
    "start": "823430",
    "end": "829310"
  },
  {
    "text": "know and perhaps love so in user mode you can use any C++ or C library under",
    "start": "829310",
    "end": "835550"
  },
  {
    "text": "the Sun that you can find in car mode you can't use them you can't use most of",
    "start": "835550",
    "end": "841010"
  },
  {
    "text": "them if not all and I'll show you why in in the next few slides exceptions so in",
    "start": "841010",
    "end": "849350"
  },
  {
    "text": "C++ in classical C++ you can use throws statements to throw exceptions you can",
    "start": "849350",
    "end": "855350"
  },
  {
    "text": "catch them with try catchin and all these things but you can do any of that in the kernel because in the current",
    "start": "855350",
    "end": "862280"
  },
  {
    "text": "there is no C++ runtime there is no C++ runtime and that has several",
    "start": "862280",
    "end": "868270"
  },
  {
    "text": "implications one of them that you cannot use the classic exception handlers and",
    "start": "868270",
    "end": "873890"
  },
  {
    "text": "so Microsoft provides its own mechanism for exception handling this is part of",
    "start": "873890",
    "end": "879440"
  },
  {
    "text": "the kernel called structured exception handling which is also available in user mode by the way and so if you want to",
    "start": "879440",
    "end": "885830"
  },
  {
    "text": "take advantage of exception handling you actually have to use some extensions to",
    "start": "885830",
    "end": "891020"
  },
  {
    "text": "the C language to provide to get yourself those proper keywords to be",
    "start": "891020",
    "end": "896870"
  },
  {
    "text": "able to catch exceptions but of course these are not high-level exceptions these are not objects that are being",
    "start": "896870",
    "end": "902570"
  },
  {
    "text": "thrown these are just numerical values with some parameters so if you want to handle exceptions in kernel mode seh is",
    "start": "902570",
    "end": "910430"
  },
  {
    "text": "your only option there is nothing else and so the bottom line is you don't have",
    "start": "910430",
    "end": "915440"
  },
  {
    "text": "a runtime so what does that mean so for example let's say you have global",
    "start": "915440",
    "end": "921350"
  },
  {
    "text": "variables and so global variables may have constructors and so if you're",
    "start": "921350",
    "end": "926690"
  },
  {
    "text": "walking in user mode when your main function starts to execute all those",
    "start": "926690",
    "end": "932900"
  },
  {
    "text": "global variables were already initialized so someone had to call all",
    "start": "932900",
    "end": "939170"
  },
  {
    "text": "the Constructors and this is in fact done by the C runtime so the C runtime is actually the first thing relatively",
    "start": "939170",
    "end": "946730"
  },
  {
    "text": "that user-mode code that is running and it's the one calling your constructors",
    "start": "946730",
    "end": "952310"
  },
  {
    "text": "and then calling your main function so there's something there but in caramel",
    "start": "952310",
    "end": "957890"
  },
  {
    "text": "you don't have that there is no C++ runtime so no one is there to call your",
    "start": "957890",
    "end": "964100"
  },
  {
    "text": "global object constructors which really means you can't use them so you can't",
    "start": "964100",
    "end": "969620"
  },
  {
    "text": "use global objects that have constructors maybe you can just define a pointer and then allocate them",
    "start": "969620",
    "end": "976430"
  },
  {
    "text": "dynamically this is something you can do and I will show you how to do that but you still have to do some work because",
    "start": "976430",
    "end": "983030"
  },
  {
    "text": "the new operator isn't supported as well because again this is part of the C++",
    "start": "983030",
    "end": "989540"
  },
  {
    "text": "runtime and you doesn't have any implementation in the kernel but because",
    "start": "989540",
    "end": "994910"
  },
  {
    "text": "you can overload that you can fix that okay so this is kind of some of the",
    "start": "994910",
    "end": "1001270"
  },
  {
    "start": "998000",
    "end": "1049000"
  },
  {
    "text": "constraints that we have in the color so there's no runtime and that means I have to take care of some things that will",
    "start": "1001270",
    "end": "1007750"
  },
  {
    "text": "not be taken care of otherwise however most of the C++ features that you know",
    "start": "1007750",
    "end": "1012870"
  },
  {
    "text": "actually work just fine in the kernel because they're just compiler mechanisms",
    "start": "1012870",
    "end": "1018490"
  },
  {
    "text": "so stuff like Auto and lambda functions rate based force templates work just",
    "start": "1018490",
    "end": "1025060"
  },
  {
    "text": "fine as we've seen the kernel itself is using template so they must be working you can have move semantics you can",
    "start": "1025060",
    "end": "1032079"
  },
  {
    "text": "overload operators so everything normally available to the supastarz",
    "start": "1032080",
    "end": "1037689"
  },
  {
    "text": "developer from the language itself is available so anything that is not",
    "start": "1037690",
    "end": "1042850"
  },
  {
    "text": "dependent on the runtime works just fine it just can simply use it so just to",
    "start": "1042850",
    "end": "1050440"
  },
  {
    "start": "1049000",
    "end": "1102000"
  },
  {
    "text": "kind of make this more concrete we're working in that yellow box at the top",
    "start": "1050440",
    "end": "1056520"
  },
  {
    "text": "that's the kernel space on 64-bit systems that's an address space of 128 terabytes",
    "start": "1056520",
    "end": "1063640"
  },
  {
    "text": "so of course the current doesn't consume on that memory otherwise it will not exist but this is just a range of",
    "start": "1063640",
    "end": "1070000"
  },
  {
    "text": "addresses that the kernel can use and drivers that are there can use so they are kind of running together in that one",
    "start": "1070000",
    "end": "1077260"
  },
  {
    "text": "big community called kernel space where as processors each one has its own",
    "start": "1077260",
    "end": "1083400"
  },
  {
    "text": "potential 128 terabytes of memories so communication between processes is more",
    "start": "1083400",
    "end": "1088840"
  },
  {
    "text": "difficult because they have their own address spaces but communication between drivers for instance is relatively",
    "start": "1088840",
    "end": "1094210"
  },
  {
    "text": "simple because these addresses at the top are absolute they look the same form",
    "start": "1094210",
    "end": "1099610"
  },
  {
    "text": "whatever process you're looking at okay so I want to start showing some code",
    "start": "1099610",
    "end": "1106240"
  },
  {
    "start": "1102000",
    "end": "1282000"
  },
  {
    "text": "examples of how we can leverage CPC passes in the kernel to make our code",
    "start": "1106240",
    "end": "1112570"
  },
  {
    "text": "more robust and less likely to leak or crash and so the first thing is",
    "start": "1112570",
    "end": "1118780"
  },
  {
    "text": "something that is definitely not new something known as the Rye idiom in C++",
    "start": "1118780",
    "end": "1124330"
  },
  {
    "text": "or resource acquisition is initialization which is a very bad name but it is the name so people typically",
    "start": "1124330",
    "end": "1130180"
  },
  {
    "text": "use it so this is the classic C++ cleanup mechanism where you want to take",
    "start": "1130180",
    "end": "1135460"
  },
  {
    "text": "something and then you want to make sure that something is released and so in the",
    "start": "1135460",
    "end": "1140710"
  },
  {
    "text": "kernel I think it's even more important than in user mode because if you leak something in user mode when that process",
    "start": "1140710",
    "end": "1147070"
  },
  {
    "text": "terminates eventually everything is cleaned up but in the kernel that simply doesn't happen until the next restart so",
    "start": "1147070",
    "end": "1154060"
  },
  {
    "text": "it's very important to make sure you don't leak anything and of course some types of leaks can actually and lead you",
    "start": "1154060",
    "end": "1160930"
  },
  {
    "text": "to a deadlock so let's see a one example so let's say I'm using locks so I want",
    "start": "1160930",
    "end": "1168250"
  },
  {
    "text": "to use something like a mutex because I need to protect some data structure from concurrent access and so the classic",
    "start": "1168250",
    "end": "1175330"
  },
  {
    "text": "pattern here says I need to lock some kind of mutex or acquired that mutex so",
    "start": "1175330",
    "end": "1182410"
  },
  {
    "text": "only one thread can acquire that mutex and then continue execution and accessing that shared data all other",
    "start": "1182410",
    "end": "1190000"
  },
  {
    "text": "threads trying to acquire the same mutex at the same time will wait will go into a wait state without spending CPU cycles",
    "start": "1190000",
    "end": "1198820"
  },
  {
    "text": "and team that first thread finishes walking with the data to release the mutex and one other thread just one can",
    "start": "1198820",
    "end": "1206380"
  },
  {
    "text": "acquire the mutex and go ahead and do its own work with the shared data so",
    "start": "1206380",
    "end": "1211750"
  },
  {
    "text": "this is a general idea and we can generalize this further by using templates so",
    "start": "1211750",
    "end": "1216970"
  },
  {
    "text": "we have a class called auto-lock this is very similar to the lock guard class in",
    "start": "1216970",
    "end": "1223419"
  },
  {
    "text": "standard C++ so actually I'm taking a lot of lots of ideas from the standard",
    "start": "1223419",
    "end": "1228970"
  },
  {
    "text": "library that I know exists in user mode which I can't use and just reimplemented",
    "start": "1228970",
    "end": "1234880"
  },
  {
    "text": "them maybe with some semantic changes to fit my needs on my style but I'm trying",
    "start": "1234880",
    "end": "1242590"
  },
  {
    "text": "to get to something which is very similar so you can see here I can I have this auto lock and it's templatized on",
    "start": "1242590",
    "end": "1248710"
  },
  {
    "text": "whatever lock I want to use because there are several types of locks that are available in the kernel and I don't",
    "start": "1248710",
    "end": "1255490"
  },
  {
    "text": "want to create separate classes for different types of locks and so I'm accepting this T lock template parameter",
    "start": "1255490",
    "end": "1263230"
  },
  {
    "text": "and using that and storing reference to the lock and and we can see here that what I expect from that T log structure",
    "start": "1263230",
    "end": "1270039"
  },
  {
    "text": "is to have two functions lock and unlock so don't care what that is and I'm using that duck typing feature in C++",
    "start": "1270039",
    "end": "1278140"
  },
  {
    "text": "templates just bind to the proper functions and so here's one example of a",
    "start": "1278140",
    "end": "1285130"
  },
  {
    "start": "1282000",
    "end": "1323000"
  },
  {
    "text": "mutex so in fact the classic mutex that you know from a user mode is also",
    "start": "1285130",
    "end": "1290350"
  },
  {
    "text": "available in kernel mode but in car mode there's another special mutex that is",
    "start": "1290350",
    "end": "1295390"
  },
  {
    "text": "not exported to user mode called the fast mutex and it is a little bit faster",
    "start": "1295390",
    "end": "1300520"
  },
  {
    "text": "so one sense in which it's faster is because it doesn't have ownership and so",
    "start": "1300520",
    "end": "1307960"
  },
  {
    "text": "it doesn't know which thread acquired it which means you can't acquire that recursively which you can do it with a",
    "start": "1307960",
    "end": "1313870"
  },
  {
    "text": "classic win32 API mutex and so here's my mutex and has the lock and unlock",
    "start": "1313870",
    "end": "1320559"
  },
  {
    "text": "functions and that's good enough so here's an implementation of that mutex",
    "start": "1320559",
    "end": "1325630"
  },
  {
    "start": "1323000",
    "end": "1382000"
  },
  {
    "text": "I'm using kernel api's to initialize the mutex just once and then lock is going",
    "start": "1325630",
    "end": "1330820"
  },
  {
    "text": "to call the X acquire fast mutex function this is the function in the kernel that does the acquisition and",
    "start": "1330820",
    "end": "1336429"
  },
  {
    "text": "then release that same mutex in the unlock function and now if I want to use",
    "start": "1336429",
    "end": "1341830"
  },
  {
    "text": "it it's very simple whenever I need to acquire the mutex I can open even an",
    "start": "1341830",
    "end": "1347020"
  },
  {
    "text": "artificial scope if I wanted to to just limit the mutex handling just to the smallest scope I",
    "start": "1347020",
    "end": "1353800"
  },
  {
    "text": "can handle I'm just acquiring that and then doing whatever needs to be done if",
    "start": "1353800",
    "end": "1359230"
  },
  {
    "text": "using C++ 17 which is fully supported by the way you can remove that class name",
    "start": "1359230",
    "end": "1364720"
  },
  {
    "text": "because theta star 17 allows you to kind of infer the type of template parameter",
    "start": "1364720",
    "end": "1371560"
  },
  {
    "text": "based on the parameter to the constructor that my mutex thing so this was added in C++ 17 and so this is the",
    "start": "1371560",
    "end": "1380320"
  },
  {
    "text": "one example and there are many other examples and everything I'm trying to do",
    "start": "1380320",
    "end": "1385630"
  },
  {
    "text": "in the kernel that has this acquire and release semantics maybe it's about",
    "start": "1385630",
    "end": "1391210"
  },
  {
    "text": "threading maybe it's about clocks maybe it's about memory doesn't matter in trying to create this wrapper classes so",
    "start": "1391210",
    "end": "1398650"
  },
  {
    "text": "here's another example about handles so handles is something which is very",
    "start": "1398650",
    "end": "1404950"
  },
  {
    "text": "common in user mode and in kernel mode in fact I used a very similar class in",
    "start": "1404950",
    "end": "1410320"
  },
  {
    "text": "my user mode development as well because once you get a handle to whatever kernel",
    "start": "1410320",
    "end": "1415690"
  },
  {
    "text": "object you working with maybe handle to a file handle to a mutex handle to a semaphore to a process whatever you need",
    "start": "1415690",
    "end": "1422830"
  },
  {
    "text": "to close that handle as soon as you don't need it and again if you don't close the handle you'll lick the handle",
    "start": "1422830",
    "end": "1429010"
  },
  {
    "text": "and this is again eventually it manifests itself is just using more",
    "start": "1429010",
    "end": "1434470"
  },
  {
    "text": "memory and in user mode so worst thing when the process terminates then that",
    "start": "1434470",
    "end": "1440950"
  },
  {
    "text": "handle will be closed but in kernel mode it will not and so I can create a class called the generic handle which accepts",
    "start": "1440950",
    "end": "1447550"
  },
  {
    "text": "a handle for with whatever type of handle I'm using there may be several types of handles around and there is a",
    "start": "1447550",
    "end": "1454810"
  },
  {
    "text": "trait class this is one of the ways to implement this idea and that traits",
    "start": "1454810",
    "end": "1460210"
  },
  {
    "text": "class is really holding a set of static functions that do some specific things",
    "start": "1460210",
    "end": "1466030"
  },
  {
    "text": "such as giving me back what an invalid handle means for for this particular",
    "start": "1466030",
    "end": "1472330"
  },
  {
    "text": "type of handle and I need to close the handle I'm going to call a function called closed on that traits object so",
    "start": "1472330",
    "end": "1480730"
  },
  {
    "text": "if I have a handle of one type maybe it has one type of function that closes that maybe",
    "start": "1480730",
    "end": "1486310"
  },
  {
    "text": "for a different type of handle there is a different closing function and so I can kind of encapsulate that by it",
    "start": "1486310",
    "end": "1493210"
  },
  {
    "text": "trades a trade class which is provided here as as an argument and then I can",
    "start": "1493210",
    "end": "1498940"
  },
  {
    "text": "create some concrete trades and handle classes so for example for classic",
    "start": "1498940",
    "end": "1505240"
  },
  {
    "text": "Colonel handles this is going to be the trades the handle type is handle and so I have this clause is valid and invalid",
    "start": "1505240",
    "end": "1511990"
  },
  {
    "text": "handle a functions that can plug in for any handle that I need and so I can even",
    "start": "1511990",
    "end": "1517060"
  },
  {
    "text": "use using here and say kernel handle is really generic handle with a type of",
    "start": "1517060",
    "end": "1522310"
  },
  {
    "text": "handle and these types of trades and I have other other types of handles in a",
    "start": "1522310",
    "end": "1528250"
  },
  {
    "text": "similar fashion related to in this case to file system mini filters but again the idea here is that I don't have to",
    "start": "1528250",
    "end": "1535600"
  },
  {
    "text": "worry about releasing something when it goes out of scope it will simply be done",
    "start": "1535600",
    "end": "1541720"
  },
  {
    "text": "so destructors are called normally no problem there so rye is a classical",
    "start": "1541720",
    "end": "1548380"
  },
  {
    "start": "1546000",
    "end": "1875000"
  },
  {
    "text": "example and of course you should use it in user mode just as in kernel mode balcony mode is kind of little bit more",
    "start": "1548380",
    "end": "1555120"
  },
  {
    "text": "important so let's move on to memory allocations and so in classic C++ using",
    "start": "1555120",
    "end": "1561970"
  },
  {
    "text": "the new and delete operators and as I mentioned since we don't have any C++ runtime in a kernel this simply will not",
    "start": "1561970",
    "end": "1569500"
  },
  {
    "text": "compile and so what can we do about it and of course the the classical answer",
    "start": "1569500",
    "end": "1574900"
  },
  {
    "text": "is let's override a new in delete and provide our own implementation and so in",
    "start": "1574900",
    "end": "1580240"
  },
  {
    "text": "the kernel the way you work with i with memory the at least one of the most",
    "start": "1580240",
    "end": "1585550"
  },
  {
    "text": "common ways to work with that is using the kernel pools and so the kernel pools",
    "start": "1585550",
    "end": "1591010"
  },
  {
    "text": "can be used to allocate memory using this main function X allocate pool with",
    "start": "1591010",
    "end": "1596560"
  },
  {
    "text": "tag which is very similar in concept to something like malloc it says how many",
    "start": "1596560",
    "end": "1601870"
  },
  {
    "text": "bytes do you want to allocate I will allocate that for you but there are two other parameters here one of them is the",
    "start": "1601870",
    "end": "1608920"
  },
  {
    "text": "pool type so in kernel mode there are actually two main pool types one of them is called non page pool and the other is",
    "start": "1608920",
    "end": "1616060"
  },
  {
    "text": "called page pool so non page is a very special pool in the sense that",
    "start": "1616060",
    "end": "1621790"
  },
  {
    "text": "everything you allocate there is actually going to be in RAM and will never be paged out you don't have that",
    "start": "1621790",
    "end": "1628360"
  },
  {
    "text": "power unusable but in kernel mode you have and so if you need your data structure to be available for example to",
    "start": "1628360",
    "end": "1635440"
  },
  {
    "text": "being able to access that in Oracle 2 or higher which I briefly mentioned earlier you want to allocate that from non page",
    "start": "1635440",
    "end": "1642010"
  },
  {
    "text": "pool in fact if you open task manager again you'll see here that we see here",
    "start": "1642010",
    "end": "1647890"
  },
  {
    "text": "something says page pool and non page pool actually shows you how much memory",
    "start": "1647890",
    "end": "1653170"
  },
  {
    "text": "is consumed right now in the two types of pools so the page pull is sort of",
    "start": "1653170",
    "end": "1658840"
  },
  {
    "text": "normal memory so some of that memory is currently in RAM some that memories paged out however the non page pool",
    "start": "1658840",
    "end": "1665800"
  },
  {
    "text": "means that 200 so in nine hundred and something megabytes memory is currently",
    "start": "1665800",
    "end": "1671050"
  },
  {
    "text": "allocated from RAM and it's gone not going anywhere so it's not not going to",
    "start": "1671050",
    "end": "1676690"
  },
  {
    "text": "be paged out and any time until the driver that's responsible or the kernel",
    "start": "1676690",
    "end": "1682030"
  },
  {
    "text": "itself transport for that those allocations will start freeing allocations and so as opposed to malloc",
    "start": "1682030",
    "end": "1688270"
  },
  {
    "text": "I need to provide some information on to which pool I want to make that",
    "start": "1688270",
    "end": "1694120"
  },
  {
    "text": "allocation from and then the last parameter here was actually somewhat optional is called the tag and the idea",
    "start": "1694120",
    "end": "1701320"
  },
  {
    "text": "of the tank is to mark my allocations and so I mentioned that if I allocate",
    "start": "1701320",
    "end": "1707230"
  },
  {
    "text": "memory and I forget to free that when the driver unloads nobody's going to free that so how can I know if my driver",
    "start": "1707230",
    "end": "1715300"
  },
  {
    "text": "leaks memory or not so one classic way of doing that it's not actually another",
    "start": "1715300",
    "end": "1720670"
  },
  {
    "text": "better way to do that today but the classic way is to tag my allocations",
    "start": "1720670",
    "end": "1725890"
  },
  {
    "text": "with a four byte value comprised of ASCII characters and then open some tool",
    "start": "1725890",
    "end": "1732550"
  },
  {
    "text": "to show me whether these characters appear in the in the list of Pula",
    "start": "1732550",
    "end": "1738309"
  },
  {
    "text": "locations after my driver unloads so if I don't find my tags I know I'm fine",
    "start": "1738309",
    "end": "1744340"
  },
  {
    "text": "I've released all memory if I find my tag then obviously I haven't released all the memory and so there are several",
    "start": "1744340",
    "end": "1751390"
  },
  {
    "text": "tools the the classic tool is Pullman which is a console based tool I hate it and so I",
    "start": "1751390",
    "end": "1757510"
  },
  {
    "text": "write my own version of of kernel pool monitor so I actually wrote two versions",
    "start": "1757510",
    "end": "1762910"
  },
  {
    "text": "I'm going through the the second one and this actually lists all the tags that",
    "start": "1762910",
    "end": "1768400"
  },
  {
    "text": "are currently used by the pool and each one of these tags we can see information",
    "start": "1768400",
    "end": "1774100"
  },
  {
    "text": "about how many allocation has been done what's the current consumption of page",
    "start": "1774100",
    "end": "1779980"
  },
  {
    "text": "or non page pool and this is updated dynamically all the time we can also see",
    "start": "1779980",
    "end": "1785410"
  },
  {
    "text": "some information here in the source and sauce description to understand from which component this actually comes from",
    "start": "1785410",
    "end": "1791560"
  },
  {
    "text": "and so we can see many of these allocations are coming from windows itself so you can see her nti all for",
    "start": "1791560",
    "end": "1797950"
  },
  {
    "text": "instance this means this is the i/o system of the i/o manager as part of the",
    "start": "1797950",
    "end": "1803110"
  },
  {
    "text": "kernel and so what the DRI typical driver does attacks its allocation with",
    "start": "1803110",
    "end": "1809170"
  },
  {
    "text": "these up to fork ASCII characters to distinguish himself from all other",
    "start": "1809170",
    "end": "1814420"
  },
  {
    "text": "drivers and kernel components and then you can also look while the driver is",
    "start": "1814420",
    "end": "1819550"
  },
  {
    "text": "running what's going on with the locations that the driver has been using how much memory is he consuming how many",
    "start": "1819550",
    "end": "1825850"
  },
  {
    "text": "locations how many fries so this is all tracked and we can use such a tool to",
    "start": "1825850",
    "end": "1830890"
  },
  {
    "text": "look at that and of course this is available also when you walk in with a kernel debugger and so what I want to do",
    "start": "1830890",
    "end": "1837520"
  },
  {
    "text": "is make sure that I call X allocate pool and then I call X free pool whenever",
    "start": "1837520",
    "end": "1844480"
  },
  {
    "text": "that's needed and I don't forget that so I need something that allows me to kind",
    "start": "1844480",
    "end": "1850420"
  },
  {
    "text": "of do that properly so one thing is maybe creating some rye wrapper but",
    "start": "1850420",
    "end": "1855670"
  },
  {
    "text": "first I don't really want to call these functions because maybe I want to allocate memory for my own structure",
    "start": "1855670",
    "end": "1862900"
  },
  {
    "text": "that has a constructor and if it has a constructor if I just call X allocate",
    "start": "1862900",
    "end": "1867910"
  },
  {
    "text": "pool with tag with the size of my structure the constructor will not be called and so I want to do something to",
    "start": "1867910",
    "end": "1874120"
  },
  {
    "text": "make it work and so the first option is simply to override over all the new and",
    "start": "1874120",
    "end": "1881710"
  },
  {
    "start": "1875000",
    "end": "2015000"
  },
  {
    "text": "delete operators so we know that the new operator can be of overloaded and the first parameter must",
    "start": "1881710",
    "end": "1888370"
  },
  {
    "text": "be a size T but I can actually add more parameters as many as I want this is not a new feature this has been",
    "start": "1888370",
    "end": "1895030"
  },
  {
    "text": "available in C++ even in C++ 98 standard and so because I need the pool type and",
    "start": "1895030",
    "end": "1901690"
  },
  {
    "text": "I need the tag I want to provide this as part of my definition of the new",
    "start": "1901690",
    "end": "1907870"
  },
  {
    "text": "operator and I can of course define and delete in similar manners there is an example implementation so what i'm doing",
    "start": "1907870",
    "end": "1915010"
  },
  {
    "text": "here I'm calling X allocate pool if I don't have any specific tag because then the kernel provides a default tag or X",
    "start": "1915010",
    "end": "1921820"
  },
  {
    "text": "allocate pool with tag if the tag is not 0 and if I fail for whatever reason I'm",
    "start": "1921820",
    "end": "1927040"
  },
  {
    "text": "just issuing an output to the to the debugger if it's attached and returning",
    "start": "1927040",
    "end": "1934270"
  },
  {
    "text": "that pointer so this is all I really have to do because it's part of operational calling the constructor is",
    "start": "1934270",
    "end": "1941290"
  },
  {
    "text": "part of the code the compiler will inject automatically so I just need to provide the compiler with the way to",
    "start": "1941290",
    "end": "1947890"
  },
  {
    "text": "actually allocate the memory the calling to the constructor is going to be done automatically by code injected by the",
    "start": "1947890",
    "end": "1955420"
  },
  {
    "text": "compiler so that simply works and then all I need to do now is simply create my",
    "start": "1955420",
    "end": "1962920"
  },
  {
    "text": "own data structure whatever that may be so here's my data data structure that",
    "start": "1962920",
    "end": "1968290"
  },
  {
    "text": "may contain sub objects they're made themselves have constructors which is definitely possible and I'm showing a",
    "start": "1968290",
    "end": "1975670"
  },
  {
    "text": "vector here which I'll discuss in a moment and just doing a new operator that looks like this so this is again",
    "start": "1975670",
    "end": "1982060"
  },
  {
    "text": "this syntax is not in new it it always was available in C++ so new something",
    "start": "1982060",
    "end": "1989830"
  },
  {
    "text": "that something is my data but all the extra parameters except for the size I have to provide with parentheses before",
    "start": "1989830",
    "end": "1997360"
  },
  {
    "text": "the actual type so in this case I'm saying I want to allocate my data object from non page full and have some define",
    "start": "1997360",
    "end": "2005820"
  },
  {
    "text": "for driver target I provided earlier in the code that would be one way of",
    "start": "2005820",
    "end": "2012240"
  },
  {
    "text": "working with that another way I can use memory locations in this case is using",
    "start": "2012240",
    "end": "2019260"
  },
  {
    "start": "2015000",
    "end": "2185000"
  },
  {
    "text": "something which again is not new called placement new placement new is the idea that says the memory is already",
    "start": "2019260",
    "end": "2026910"
  },
  {
    "text": "allocated some entity allocated and chunk of memory for my object but that",
    "start": "2026910",
    "end": "2033720"
  },
  {
    "text": "entity has no idea what's the purpose of that block so it's just a set of bytes so what I want to tell to the operator",
    "start": "2033720",
    "end": "2041820"
  },
  {
    "text": "new just call the constructor please this is all I want the memory is already there so this is exactly the point of",
    "start": "2041820",
    "end": "2048929"
  },
  {
    "text": "placement new so placement new looks like this and the implementation is trivial because I'm accepting to the",
    "start": "2048929",
    "end": "2056158"
  },
  {
    "text": "placement new the existing pointer where the memory has already been allocated all I need to do is just say okay that's",
    "start": "2056159",
    "end": "2062310"
  },
  {
    "text": "actually here and and again the the benefit here is the compiler will add a",
    "start": "2062310",
    "end": "2067800"
  },
  {
    "text": "constructor call so I'm going to do a new which actually allocates nothing because the memory is already allocated",
    "start": "2067800",
    "end": "2073378"
  },
  {
    "text": "but the constructor will be called right now and so how do I call the destructor",
    "start": "2073379",
    "end": "2079770"
  },
  {
    "text": "in this case but here's the call to the new operator and so let's in this case",
    "start": "2079770",
    "end": "2086550"
  },
  {
    "text": "I'm calling X allocate pool with tag explicitly but let's suppose I get a pointer from some windows API some kind",
    "start": "2086550",
    "end": "2092878"
  },
  {
    "text": "of API that already allocated some memory for me or maybe some other component I have no idea how it a located the memory perhaps but it is",
    "start": "2092879",
    "end": "2100380"
  },
  {
    "text": "allocated Ned nonetheless and so now I just want to call the constructor to",
    "start": "2100380",
    "end": "2105510"
  },
  {
    "text": "initialize my object properly so I'm doing new with the pointer and my data",
    "start": "2105510",
    "end": "2110670"
  },
  {
    "text": "notice I'm not even bothering capturing the result because the result of that",
    "start": "2110670",
    "end": "2116010"
  },
  {
    "text": "new will be data itself so writing data equals new data my data is really",
    "start": "2116010",
    "end": "2121410"
  },
  {
    "text": "useless I'm just using new data because the pointer will not change this is exactly what placement me returns the",
    "start": "2121410",
    "end": "2127770"
  },
  {
    "text": "existing pointer and so from the perspective of releasing the memory I",
    "start": "2127770",
    "end": "2135030"
  },
  {
    "text": "need to call the destructor now explicitly and so the only way I can do that is by invoking the destructor",
    "start": "2135030",
    "end": "2141450"
  },
  {
    "text": "explicitly using the pointer itself this is again this syntax is supported in C++",
    "start": "2141450",
    "end": "2148080"
  },
  {
    "text": "because there is no other way to do that because I cannot call delete here because it was not allocated by new",
    "start": "2148080",
    "end": "2155520"
  },
  {
    "text": "to us allocated by something else and so I have to call the destructor and then D",
    "start": "2155520",
    "end": "2160620"
  },
  {
    "text": "allocate the memory explicitly using the same function that the allocated memory maybe some library function that I'm",
    "start": "2160620",
    "end": "2167190"
  },
  {
    "text": "calling now but this is the way I have to work in order to actually invoke the",
    "start": "2167190",
    "end": "2173240"
  },
  {
    "text": "destructor so once I have these kind of code in place I can go ahead and use new",
    "start": "2173240",
    "end": "2179820"
  },
  {
    "text": "delete one or this kind of code if I have to so what else",
    "start": "2179820",
    "end": "2186090"
  },
  {
    "start": "2185000",
    "end": "2335000"
  },
  {
    "text": "what about strings strings are always the fun no matter what library you using",
    "start": "2186090",
    "end": "2191820"
  },
  {
    "text": "use them other Kermode these libraries tend to always invent new string types",
    "start": "2191820",
    "end": "2197160"
  },
  {
    "text": "have you noticed that that every library you're using there's a new string type every once I know all the other strings",
    "start": "2197160",
    "end": "2203400"
  },
  {
    "text": "are garbage I want to write my own string type it's going to be better and that's kind of always boggles the mind",
    "start": "2203400",
    "end": "2210660"
  },
  {
    "text": "there are so many strings out there in user mode and so the kernel of course has to have its own string type and the",
    "start": "2210660",
    "end": "2217950"
  },
  {
    "text": "way strings work in the Windows kernel most of them is using a structure called unicode string which has members too one",
    "start": "2217950",
    "end": "2228450"
  },
  {
    "text": "member is just pointing to an array of characters and there are two members saying what's the length of that string",
    "start": "2228450",
    "end": "2234000"
  },
  {
    "text": "and to make things a little bit harder the length is in bytes not in characters",
    "start": "2234000",
    "end": "2239100"
  },
  {
    "text": "because unicode here really means utf-16 so we have two bytes per character so",
    "start": "2239100",
    "end": "2244680"
  },
  {
    "text": "the length is actually in bytes not in characters which actually kind of confuses some people and there's a",
    "start": "2244680",
    "end": "2251580"
  },
  {
    "text": "maximum length that indicates how much that string can grow without doing any special reallocation and of course this",
    "start": "2251580",
    "end": "2258480"
  },
  {
    "text": "is just a structure this is a sea structure it has no special management if you try to attend to that string",
    "start": "2258480",
    "end": "2266130"
  },
  {
    "text": "something that causes this the length to be to more than a maximum length you're screwed so you're going to probably blue",
    "start": "2266130",
    "end": "2272910"
  },
  {
    "text": "screen the system so you have to relocate everything yourself and so the",
    "start": "2272910",
    "end": "2279090"
  },
  {
    "text": "first intuition in this case is saying well maybe I should create a class that would wrap unicode string",
    "start": "2279090",
    "end": "2286650"
  },
  {
    "text": "and that looks like a good idea but in practice it doesn't really work that",
    "start": "2286650",
    "end": "2292350"
  },
  {
    "text": "well because this Unicode string the the buffer itself the point of the buffer is",
    "start": "2292350",
    "end": "2298110"
  },
  {
    "text": "not necessarily owned by that string maybe that pointer came from someone else and that string just describes that",
    "start": "2298110",
    "end": "2304980"
  },
  {
    "text": "Bufferin so creating a class I tried that actually that Rob's unicode string",
    "start": "2304980",
    "end": "2310260"
  },
  {
    "text": "made that class on what use almost useless so it was I couldn't use it in any good scenarios at least not without",
    "start": "2310260",
    "end": "2316740"
  },
  {
    "text": "getting confused when it's owning the pointer and doesn't own the pointer kind",
    "start": "2316740",
    "end": "2321990"
  },
  {
    "text": "of looked bad so I decided to go another way and do what everybody else does",
    "start": "2321990",
    "end": "2328700"
  },
  {
    "text": "create my own string type everybody's doing it I can do it as well and so I",
    "start": "2328700",
    "end": "2334140"
  },
  {
    "text": "can create a string type so this is always fun I mean you kind of going back",
    "start": "2334140",
    "end": "2340140"
  },
  {
    "start": "2335000",
    "end": "2473000"
  },
  {
    "text": "to your C++ basics where you create a string type with a pointer to something",
    "start": "2340140",
    "end": "2346080"
  },
  {
    "text": "and maybe a length and then you create all those operators and and kind of it's",
    "start": "2346080",
    "end": "2351900"
  },
  {
    "text": "I think it's fun sometimes to go back to the basics and and and now you can do",
    "start": "2351900",
    "end": "2357360"
  },
  {
    "text": "whatever you want because you're not constrained by any library don't have to create your string to be exactly like",
    "start": "2357360",
    "end": "2363690"
  },
  {
    "text": "STD string in in user mode that's the W string you can do anything you can do whatever pleases you and you can provide",
    "start": "2363690",
    "end": "2372090"
  },
  {
    "text": "the API that you think is more intuitive for whatever you're doing because this is essentially just for you so just for",
    "start": "2372090",
    "end": "2378900"
  },
  {
    "text": "fun I created here a class called K string and this class accepts a tag and",
    "start": "2378900",
    "end": "2385200"
  },
  {
    "text": "a pool type again because I'm going to allocate dynamically a set of characters and so I need to select the appropriate",
    "start": "2385200",
    "end": "2391980"
  },
  {
    "text": "pool so we can provide these parameters as part of a template or maybe part of a",
    "start": "2391980",
    "end": "2397230"
  },
  {
    "text": "constructor so again this is a trade of this is a design decision that you you can do and then you can have various",
    "start": "2397230",
    "end": "2404430"
  },
  {
    "text": "constructors and operators and copy constructors and move constructors and whatever you need and to make it easier",
    "start": "2404430",
    "end": "2411240"
  },
  {
    "text": "to work with unicode strings i have a function here that allows me to expose",
    "start": "2411240",
    "end": "2417690"
  },
  {
    "text": "that case string as a Unicode string you these get unicode string function and so",
    "start": "2417690",
    "end": "2423420"
  },
  {
    "text": "if I have this function I'm accepting Unicode string pointer form wherever I'm simply filling in this is one way of",
    "start": "2423420",
    "end": "2431579"
  },
  {
    "text": "doing that initializing the members in that unicode string to point to my internal string that I'm managing and so",
    "start": "2431579",
    "end": "2439320"
  },
  {
    "text": "that unicode string is not going to be the owner of the string I'm continuing to own that string but any API that",
    "start": "2439320",
    "end": "2446790"
  },
  {
    "text": "needs unicode string I can provide that and so this really made my life easier",
    "start": "2446790",
    "end": "2453119"
  },
  {
    "text": "when working with strings because I have a simple string class it supports operators and and all the other things",
    "start": "2453119",
    "end": "2460230"
  },
  {
    "text": "that strings typically support and anytime I need to call an API in the kernel that wants unicode string does",
    "start": "2460230",
    "end": "2466140"
  },
  {
    "text": "it's very easy to get one without getting in into trouble related to ownership things and of",
    "start": "2466140",
    "end": "2474480"
  },
  {
    "start": "2473000",
    "end": "2524000"
  },
  {
    "text": "course you can go ahead and do these things for other types such as a vector so a vector is again a very very popular",
    "start": "2474480",
    "end": "2480930"
  },
  {
    "text": "type in in user mode STD vector but is using that and for good reason because",
    "start": "2480930",
    "end": "2485970"
  },
  {
    "text": "it's continuous in memory it's very fast and so maybe I need these things in",
    "start": "2485970",
    "end": "2491310"
  },
  {
    "text": "kernel mode as well so I did that I created a class called K vector again templatized with with the pool type and",
    "start": "2491310",
    "end": "2498720"
  },
  {
    "text": "tag and so on and provided my own operators for adding items to the vector",
    "start": "2498720",
    "end": "2503849"
  },
  {
    "text": "removing and so on so you have kind of the the chance here to reinvent it's a",
    "start": "2503849",
    "end": "2511470"
  },
  {
    "text": "minimum standard library for your work because there's nothing you can use that is available you can try to get ideas",
    "start": "2511470",
    "end": "2518730"
  },
  {
    "text": "from existing libraries of course but of course you don't have to you can do whatever you want so let's look at",
    "start": "2518730",
    "end": "2525420"
  },
  {
    "text": "another example where we can do something to ease our work in the kernel",
    "start": "2525420",
    "end": "2531210"
  },
  {
    "text": "and so the kernel uses a one very common data structure to manage least at have",
    "start": "2531210",
    "end": "2539160"
  },
  {
    "text": "that can grow it to any size using a linked list mechanism and so there is a",
    "start": "2539160",
    "end": "2544560"
  },
  {
    "text": "type called list entry which is just a simple structure that has a pointer forward in the pointer backwards so it",
    "start": "2544560",
    "end": "2551730"
  },
  {
    "text": "sort of the link in linked list and so these points to another object that has these pointers",
    "start": "2551730",
    "end": "2559020"
  },
  {
    "text": "and these points or another object and so on and as you can see in the diagram at the bottom we have some head to the",
    "start": "2559020",
    "end": "2566400"
  },
  {
    "text": "list which is taught in some management structure and then we simply provide these linked lists to elements and the",
    "start": "2566400",
    "end": "2574800"
  },
  {
    "text": "actual list entries the member inside that data so this is one way of working with linked lists and this is the way",
    "start": "2574800",
    "end": "2581250"
  },
  {
    "text": "the kernel works with its own linked list and that API is completely documented and so you driver writers can",
    "start": "2581250",
    "end": "2588600"
  },
  {
    "text": "use the same API and so if you have a pointer to a list entry object how do",
    "start": "2588600",
    "end": "2594420"
  },
  {
    "text": "you get to the actual pointer to the real structure that you care about and",
    "start": "2594420",
    "end": "2599910"
  },
  {
    "text": "so you need to do some pointer arithmetic with the size and and the offset of your entry inside that big",
    "start": "2599910",
    "end": "2607680"
  },
  {
    "text": "structure and so the kernel provides a macro called containing record that",
    "start": "2607680",
    "end": "2612960"
  },
  {
    "text": "allows you to kind of take your pointer your internal pointer to the actual list entry and then get back the real pointer",
    "start": "2612960",
    "end": "2620400"
  },
  {
    "text": "with proper casting to your data structure that you care about and so this infrastructure already exists but",
    "start": "2620400",
    "end": "2627560"
  },
  {
    "text": "of course these items adding items moving back items and so on you have to",
    "start": "2627560",
    "end": "2632850"
  },
  {
    "text": "use the API so you can create a class to rub these things in in a nice way so here's one example of how we can do",
    "start": "2632850",
    "end": "2639990"
  },
  {
    "text": "that so I can create a linked list data structure and since in many cases the",
    "start": "2639990",
    "end": "2645990"
  },
  {
    "text": "driver accepts request for multiple processes at the same time so it has to",
    "start": "2645990",
    "end": "2651240"
  },
  {
    "text": "access these kinds of lists in a safe way which means it has to use some lock",
    "start": "2651240",
    "end": "2656370"
  },
  {
    "text": "and so again what I'm doing here is accepting a potential lock as a template",
    "start": "2656370",
    "end": "2662520"
  },
  {
    "text": "parameter to the linked list so I am defaulting that to fast music because this is in tracked is the most common",
    "start": "2662520",
    "end": "2668790"
  },
  {
    "text": "type that is used but you can use some other types that are available such as a spin lock and the normal mutex and and",
    "start": "2668790",
    "end": "2675840"
  },
  {
    "text": "some others and so I want to have that lock as part of my structure and then",
    "start": "2675840",
    "end": "2681840"
  },
  {
    "text": "whenever I'm going to do any operation that changes the list to acquire that lock whatever that may",
    "start": "2681840",
    "end": "2689990"
  },
  {
    "text": "be using the same auto lock structure have shown previously in the right example so here's a few examples of how",
    "start": "2689990",
    "end": "2698750"
  },
  {
    "start": "2696000",
    "end": "2844000"
  },
  {
    "text": "to implement this various function so here's my pushback function accepting an",
    "start": "2698750",
    "end": "2704270"
  },
  {
    "text": "item of type T so that type T can be anything but it must have at least entry",
    "start": "2704270",
    "end": "2710050"
  },
  {
    "text": "filled with the name entry this is something I I require for this code to",
    "start": "2710050",
    "end": "2715610"
  },
  {
    "text": "compile otherwise the duck typing of C++ templates will not work and I'm calling",
    "start": "2715610",
    "end": "2720680"
  },
  {
    "text": "here initialized sorry insert a list function which is a document kernel",
    "start": "2720680",
    "end": "2725960"
  },
  {
    "text": "function just utilizing that in an easier manner so the client code would",
    "start": "2725960",
    "end": "2731240"
  },
  {
    "text": "just say pushback here's my my data pointer and just just do it same goes",
    "start": "2731240",
    "end": "2736280"
  },
  {
    "text": "for push front and some other operations I can have it's very easy if I need to get to an to an item I can use the",
    "start": "2736280",
    "end": "2743600"
  },
  {
    "text": "containing record macro here to do for me the offset calculations to get from the internal structure to the top-level",
    "start": "2743600",
    "end": "2750380"
  },
  {
    "text": "structure which I care about so here's an example it's supposed to be an",
    "start": "2750380",
    "end": "2756890"
  },
  {
    "text": "example so the example creates a data structure machine besides that maybe",
    "start": "2756890",
    "end": "2764930"
  },
  {
    "text": "freezing it's better in this time and so I have my own data structure let's call",
    "start": "2764930",
    "end": "2770720"
  },
  {
    "text": "it my data it can have anything but one thing it must have is this list entry",
    "start": "2770720",
    "end": "2776359"
  },
  {
    "text": "structure that must be named entry because my code relies on that and so",
    "start": "2776359",
    "end": "2782090"
  },
  {
    "text": "this would be the location with the forward link and backwards name are going to be stored and once I have that",
    "start": "2782090",
    "end": "2788180"
  },
  {
    "text": "I can declare a linked list of type my data call it whatever and then just go",
    "start": "2788180",
    "end": "2794270"
  },
  {
    "text": "ahead and create an instance of that my data I have to initialize my list and",
    "start": "2794270",
    "end": "2800630"
  },
  {
    "text": "then just call pushback for instance and so it's very easy to work with that very similar to something like STD linked",
    "start": "2800630",
    "end": "2808730"
  },
  {
    "text": "list or sorry to the list and so again I have an opportunity here to create my",
    "start": "2808730",
    "end": "2815270"
  },
  {
    "text": "own standard library that suits my needs I don't not creating something",
    "start": "2815270",
    "end": "2820380"
  },
  {
    "text": "the entire world necessarily but I'm creating something that I'm eventually going to pack in some library and then",
    "start": "2820380",
    "end": "2827519"
  },
  {
    "text": "I'll be able to use that in multiple projects multiple drivers so just as we",
    "start": "2827519",
    "end": "2834000"
  },
  {
    "text": "have standard libraries in C++ in user mode I'm creating my own standard library and helpers in kernel mode for",
    "start": "2834000",
    "end": "2840869"
  },
  {
    "text": "my own driver projects okay so the last",
    "start": "2840869",
    "end": "2846029"
  },
  {
    "start": "2844000",
    "end": "3050000"
  },
  {
    "text": "example I want to show you is using some more interesting features from C++ 11",
    "start": "2846029",
    "end": "2851970"
  },
  {
    "text": "and beyond specifically templates or variadic",
    "start": "2851970",
    "end": "2857160"
  },
  {
    "text": "templates so Braddock templates I think in one of the coolest features in C++ you could do really interesting stuff",
    "start": "2857160",
    "end": "2863730"
  },
  {
    "text": "with variadic templates and so I'm talking here about something called",
    "start": "2863730",
    "end": "2868769"
  },
  {
    "text": "components what are actually components and in this context so component is the",
    "start": "2868769",
    "end": "2873900"
  },
  {
    "text": "class that implements very various types of functionality it supports several",
    "start": "2873900",
    "end": "2879180"
  },
  {
    "text": "interfaces perhaps and when I get an interface pointer I can work with the object without particular functionality",
    "start": "2879180",
    "end": "2885569"
  },
  {
    "text": "I can also ask the object do you support a different type of functionality and then if so I'm going to get a different",
    "start": "2885569",
    "end": "2892349"
  },
  {
    "text": "interface pointer to that particular functionality and work with that functionality so if you have been doing",
    "start": "2892349",
    "end": "2898619"
  },
  {
    "text": "any Windows development in user mode you may have heard of something called the component object model or com how many",
    "start": "2898619",
    "end": "2906000"
  },
  {
    "text": "Peter people have heard come just raise of hands how many many people like comm you can really you can okay two people",
    "start": "2906000",
    "end": "2913230"
  },
  {
    "text": "that's good usually okay call my wishy that was dead already",
    "start": "2913230",
    "end": "2919680"
  },
  {
    "text": "but calm didn't die and actually made a camp come back in Windows 8 because the Windows runtime in Windows is based on",
    "start": "2919680",
    "end": "2926400"
  },
  {
    "text": "enhanced version of comp SOCOM is not going to going away anytime soon so don't worry about it however calm may",
    "start": "2926400",
    "end": "2933720"
  },
  {
    "text": "sound complex or may allude complex because it has some complex politics especially around threading models and",
    "start": "2933720",
    "end": "2941279"
  },
  {
    "text": "apartments when people hear that they typically just want to jump out of the window but the fundamentals of comma",
    "start": "2941279",
    "end": "2946890"
  },
  {
    "text": "very very simple it's about interface based programming that's the first the",
    "start": "2946890",
    "end": "2952680"
  },
  {
    "text": "first prints Ofcom and the second one is about location transparency so I have no idea",
    "start": "2952680",
    "end": "2958590"
  },
  {
    "text": "where the component is just get me this object with this class ID this is what",
    "start": "2958590",
    "end": "2964740"
  },
  {
    "text": "come actually has an and from from this perspective come is a very good model",
    "start": "2964740",
    "end": "2970410"
  },
  {
    "text": "and so what if I want something like this in my kernel code I want to create",
    "start": "2970410",
    "end": "2975900"
  },
  {
    "text": "kernel components and each one can support different types of functionality and I want reference counting to be",
    "start": "2975900",
    "end": "2982980"
  },
  {
    "text": "available because I don't want to track each reference and maybe maybe handing",
    "start": "2982980",
    "end": "2988350"
  },
  {
    "text": "out these references or these pointers to multiple threads and so I need reference counting to be available and",
    "start": "2988350",
    "end": "2994140"
  },
  {
    "text": "so if I think about the standard C++ library I may think maybe I should create something like shared pointer",
    "start": "2994140",
    "end": "3000890"
  },
  {
    "text": "however sure pointer does track reference counting but it doesn't provide any support for this squaring of",
    "start": "3000890",
    "end": "3008540"
  },
  {
    "text": "functionality and I certainly don't want to use something like dynamic cast and rtt I mean that's that's terrible I want",
    "start": "3008540",
    "end": "3015770"
  },
  {
    "text": "something that would be completely in compile time and so again if you're",
    "start": "3015770",
    "end": "3021080"
  },
  {
    "text": "familiar with chrome Microsoft provides several ways of implementing or creating calm components using libraries such as",
    "start": "3021080",
    "end": "3027560"
  },
  {
    "text": "the active template library in the Windows runtime library but however I can't use them I can't use them in any",
    "start": "3027560",
    "end": "3034040"
  },
  {
    "text": "case I probably don't want to use them because they're ugly at least ATL is very ugly because it was created many years ago and Radek",
    "start": "3034040",
    "end": "3040520"
  },
  {
    "text": "templates didn't exist and so the solution let's create our own components",
    "start": "3040520",
    "end": "3047240"
  },
  {
    "text": "we can do it ourselves so let me show you an example of how to do that so I",
    "start": "3047240",
    "end": "3052550"
  },
  {
    "start": "3050000",
    "end": "3600000"
  },
  {
    "text": "have this component the basic interface for components I'm going to call that I",
    "start": "3052550",
    "end": "3058250"
  },
  {
    "text": "component this is very similar to the iron known classic interface from",
    "start": "3058250",
    "end": "3063440"
  },
  {
    "text": "classic comm which provides to two functionalities really the first one is",
    "start": "3063440",
    "end": "3069080"
  },
  {
    "text": "squaring for another interface for a different kind of functionality based on something called the interface ID now in",
    "start": "3069080",
    "end": "3075650"
  },
  {
    "text": "classic comm this is good but really because I'm not writing something for the entire world I'm going to use IDs",
    "start": "3075650",
    "end": "3082220"
  },
  {
    "text": "which has just simple numbers I don't need to use real good although I can",
    "start": "3082220",
    "end": "3088290"
  },
  {
    "text": "and the other thing is managing a reference count using this edge ref and",
    "start": "3088290",
    "end": "3093840"
  },
  {
    "text": "release functions so each rep should increment the reference count and release should document reference count",
    "start": "3093840",
    "end": "3099570"
  },
  {
    "text": "and if the reference count is zero the objects should sort of terminate itself so this is the base interface these are",
    "start": "3099570",
    "end": "3107640"
  },
  {
    "text": "all pure virtual functions and by the way these annotations like the in here and out PTR here these are called a",
    "start": "3107640",
    "end": "3114930"
  },
  {
    "text": "syntax annotation language or style annotations and this is just a way for providing metadata over parameters and",
    "start": "3114930",
    "end": "3123030"
  },
  {
    "text": "it can be used by so first as a human user I can stand that this is in",
    "start": "3123030",
    "end": "3128250"
  },
  {
    "text": "parameter this is out and in some other stuff that is available in sull but also",
    "start": "3128250",
    "end": "3133620"
  },
  {
    "text": "static analysis tools can go over my code and see if I'm using properly variables as the sanitation's indicate",
    "start": "3133620",
    "end": "3141690"
  },
  {
    "text": "so just to give you a brief idea of what that is so this is I component this is just an interface and so what I want to",
    "start": "3141690",
    "end": "3149100"
  },
  {
    "text": "be able to do is support reference counting and support Crangle interfaces",
    "start": "3149100",
    "end": "3154320"
  },
  {
    "text": "so here's what I'm doing I'm creating a class called component base which is inheriting from multiple interfaces",
    "start": "3154320",
    "end": "3162470"
  },
  {
    "text": "provided as variadic templates and so I can have as many interfaces as I want",
    "start": "3162470",
    "end": "3168630"
  },
  {
    "text": "and this public interfaces dot dot dot actually inherits from all the",
    "start": "3168630",
    "end": "3173940"
  },
  {
    "text": "interfaces provided as part of this component base and so what I want to",
    "start": "3173940",
    "end": "3179700"
  },
  {
    "text": "make sure that is that there is at least one interface otherwise the class is really useless and so I'm using static",
    "start": "3179700",
    "end": "3186840"
  },
  {
    "text": "assert here to make sure that the size of the interfaces this is size of dot",
    "start": "3186840",
    "end": "3192030"
  },
  {
    "text": "dot dot which is the special size of that works on parameter pack parameter",
    "start": "3192030",
    "end": "3197250"
  },
  {
    "text": "pack is the term useful the braddock template parameters and so it must be",
    "start": "3197250",
    "end": "3202410"
  },
  {
    "text": "greater than zero otherwise I'm going to get a compile time error so static assert is very useful and you should use",
    "start": "3202410",
    "end": "3209520"
  },
  {
    "text": "it because it's all in compile time if you can and so what I have in my class",
    "start": "3209520",
    "end": "3214620"
  },
  {
    "text": "here the basic thing is I have just a reference count so I need to manage that reference count I need to manage that",
    "start": "3214620",
    "end": "3220890"
  },
  {
    "text": "reference count in a thread Safeway so here's EDF and so if you've been if you try to implement",
    "start": "3220890",
    "end": "3227809"
  },
  {
    "text": "something released in C++ and use them all you'll probably use something like STD atomic of int or something like that",
    "start": "3227809",
    "end": "3234140"
  },
  {
    "text": "and do a plus plus and that's it however we don't have atomic in the",
    "start": "3234140",
    "end": "3239240"
  },
  {
    "text": "kernel that again the stands lab is not available so I'm calling the real function or the real intrinsic behind",
    "start": "3239240",
    "end": "3246050"
  },
  {
    "text": "the covers called in windows in chalk increment that allows us to do a a thread-safe",
    "start": "3246050",
    "end": "3252170"
  },
  {
    "text": "plus plus on whatever variable that we want same idea goes for release I'm",
    "start": "3252170",
    "end": "3257750"
  },
  {
    "text": "calling interlock decrement and then looking at the new reference count and",
    "start": "3257750",
    "end": "3263270"
  },
  {
    "text": "if it's zero I'm going to just delete the specific object of course that will only work if I have proper override for",
    "start": "3263270",
    "end": "3270319"
  },
  {
    "text": "the delete operator and of course I'm assuming here that the object will be created by the appropriate new operator",
    "start": "3270319",
    "end": "3276440"
  },
  {
    "text": "that complements this little prattle of course I have to provide all that later on but EDF and release are fairly simple",
    "start": "3276440",
    "end": "3284359"
  },
  {
    "text": "so the most interesting function is actually query interface so query interface says hey mr. component here is",
    "start": "3284359",
    "end": "3291260"
  },
  {
    "text": "an interface ID are you supporting that if so please give me back a pointer to that interface if not just tell me that",
    "start": "3291260",
    "end": "3299480"
  },
  {
    "text": "you don't and so this is something we need to do using variadic templates now",
    "start": "3299480",
    "end": "3306049"
  },
  {
    "text": "the trick in variadic templates like all the ideas in compile time programming is",
    "start": "3306049",
    "end": "3312819"
  },
  {
    "text": "recursion we're going to use recursion and so we're saying we have a list of",
    "start": "3312819",
    "end": "3317869"
  },
  {
    "text": "interfaces let's take the first one and see if it's supported if not let's remove that let's take the second one",
    "start": "3317869",
    "end": "3324079"
  },
  {
    "text": "and so on until we're out of interfaces so this is a kind of the classic",
    "start": "3324079",
    "end": "3329450"
  },
  {
    "text": "template metaprogramming approach which is required here and so this is my query",
    "start": "3329450",
    "end": "3335599"
  },
  {
    "text": "interface function that is provided by the I component interface and need to implement that so I'm going to use a",
    "start": "3335599",
    "end": "3342200"
  },
  {
    "text": "helper function called query interface which is going to get this parameter",
    "start": "3342200",
    "end": "3347599"
  },
  {
    "text": "pack of types and so this query interface which is shown here is",
    "start": "3347599",
    "end": "3353569"
  },
  {
    "text": "separating the interfaces to the first and the rest so again this is the the pod the recursive part and so",
    "start": "3353569",
    "end": "3361490"
  },
  {
    "text": "in this case what I'm doing I'm checking that particular interface ID if it's the ID requested by the client then that's",
    "start": "3361490",
    "end": "3368510"
  },
  {
    "text": "great I'm just returning static a so that interface pointer to this and providing the interface pointing back to",
    "start": "3368510",
    "end": "3375200"
  },
  {
    "text": "the crane interface function if not I'm calling myself recursively with the rest",
    "start": "3375200",
    "end": "3381620"
  },
  {
    "text": "of the interfaces so again the now interface is going to be the next interface and so on and so like any good",
    "start": "3381620",
    "end": "3389680"
  },
  {
    "text": "recursion you have to stop it at some point otherwise the compiler will go into a crazy loop and burn your machine",
    "start": "3389680",
    "end": "3396470"
  },
  {
    "text": "and so you have to provide some stop stopping mechanism and the trick here is doing something like this saying",
    "start": "3396470",
    "end": "3403550"
  },
  {
    "text": "template and I can't really use an empty brackets here that will not compile",
    "start": "3403550",
    "end": "3409540"
  },
  {
    "text": "properly because that would that actually means the compiler Stan specialization which is is not the case",
    "start": "3409540",
    "end": "3415910"
  },
  {
    "text": "so this actually works properly and this would be called when there's zero interfaces and so if I have no more",
    "start": "3415910",
    "end": "3423350"
  },
  {
    "text": "interfaces clearly I don't support it so this would be my kind of stopping",
    "start": "3423350",
    "end": "3429370"
  },
  {
    "text": "mechanism for for the recursion and then when we get back here from this query",
    "start": "3429370",
    "end": "3434690"
  },
  {
    "text": "interface we're going to get this result if it's not null I'm going to increment the reference count and return that",
    "start": "3434690",
    "end": "3440810"
  },
  {
    "text": "pointer to the client will start to success otherwise I just return status not found and so this is the trick here",
    "start": "3440810",
    "end": "3447740"
  },
  {
    "text": "and remember this recursion is only happening at compile time so it's not",
    "start": "3447740",
    "end": "3452990"
  },
  {
    "text": "it's not a problem it may take the compiler a few more milliseconds to actually do this thing",
    "start": "3452990",
    "end": "3459020"
  },
  {
    "text": "but I don't care this code is generated at compile time depending on the actual",
    "start": "3459020",
    "end": "3464090"
  },
  {
    "text": "interfaces I'm requesting or using so here's an example here's a an example of",
    "start": "3464090",
    "end": "3470420"
  },
  {
    "text": "two interfaces I created I filter an i process notify mean whatever they mean",
    "start": "3470420",
    "end": "3476060"
  },
  {
    "text": "they all inherit from I component my sort of iron on interfacing adding their",
    "start": "3476060",
    "end": "3482690"
  },
  {
    "text": "own special special functions and then when I want to create my component",
    "start": "3482690",
    "end": "3489650"
  },
  {
    "text": "implements these interfaces this is what it's going to look like I'm going to create my class it's called my filter",
    "start": "3489650",
    "end": "3495890"
  },
  {
    "text": "here and I'm going to inherit component base and in the list of all the interfaces that I actually support so",
    "start": "3495890",
    "end": "3502609"
  },
  {
    "text": "the list can be as long or as short as I please but I do have to have at least one interface otherwise that static",
    "start": "3502609",
    "end": "3509720"
  },
  {
    "text": "assert call will fail compilation and then I can just implement this interface in this case I'm just having a shortcut",
    "start": "3509720",
    "end": "3517160"
  },
  {
    "text": "here to create an instance of that a class from outside using a static",
    "start": "3517160",
    "end": "3522260"
  },
  {
    "text": "function but typically they would it will happen from an in another function or another class which is typically",
    "start": "3522260",
    "end": "3527960"
  },
  {
    "text": "known as the class Factory as as its implemented in classic comm but I've kind of made some shortcut here just for",
    "start": "3527960",
    "end": "3535390"
  },
  {
    "text": "demonstration purposes and so now I can create an instance and if I want to check for a different functionality I",
    "start": "3535390",
    "end": "3542059"
  },
  {
    "text": "can use query interface I want the ID I filter here and if it returns as not",
    "start": "3542059",
    "end": "3547789"
  },
  {
    "text": "null then this exists I can use it and of course I have to make sure I call",
    "start": "3547789",
    "end": "3553190"
  },
  {
    "text": "release at the end and so naturally I'm going to create a wry wrapper which would be a smart pointer around",
    "start": "3553190",
    "end": "3559220"
  },
  {
    "text": "interface pointers which is very similar to what you have in user mode in class such as cecum PTR PTR that you have in",
    "start": "3559220",
    "end": "3566270"
  },
  {
    "text": "in the active template library for instance so again you can do whatever you want all all work with templates",
    "start": "3566270",
    "end": "3573230"
  },
  {
    "text": "such as these very attic templates and meta programming with templates everything works as expected because",
    "start": "3573230",
    "end": "3580039"
  },
  {
    "text": "these are just compiled time mechanisms and so the fact that eventually this",
    "start": "3580039",
    "end": "3585200"
  },
  {
    "text": "code is going to be running in the kernel has no real consequence I mean it's just just code and the compiler",
    "start": "3585200",
    "end": "3591349"
  },
  {
    "text": "does the right thing and so with these ideas I can actually create my own",
    "start": "3591349",
    "end": "3597799"
  },
  {
    "text": "robust framework for working with the current don't have to continue working",
    "start": "3597799",
    "end": "3602930"
  },
  {
    "text": "will see my code is more robust because I don't click anything and I have higher",
    "start": "3602930",
    "end": "3608059"
  },
  {
    "text": "abstraction mechanisms to do the things that I want to do so once I have my string class and my vector class and my",
    "start": "3608059",
    "end": "3615140"
  },
  {
    "text": "auto lock and all these things I'm actually streamlining my work and don't",
    "start": "3615140",
    "end": "3620750"
  },
  {
    "text": "really have to worry about these things and need to worry about the actual functionality I want to provide to my",
    "start": "3620750",
    "end": "3627130"
  },
  {
    "text": "driver don't want to worry about that infrastructure which is a bit head a big headache when working with the canner",
    "start": "3627130",
    "end": "3633819"
  },
  {
    "text": "you have to be careful but now don't have to be very careful it tested that it works for me in one driver then to",
    "start": "3633819",
    "end": "3640480"
  },
  {
    "text": "probably work for the next driver as well and so if you are planning to work",
    "start": "3640480",
    "end": "3646540"
  },
  {
    "text": "in the kernel you think well I have to go back to my sea roots and just work we",
    "start": "3646540",
    "end": "3651819"
  },
  {
    "text": "see and all the time then hopefully you see that there is another way but you can take from this also other ideas that",
    "start": "3651819",
    "end": "3659920"
  },
  {
    "text": "you can also implement in user mode of course all these things that I've shown you are mostly available in user mode as",
    "start": "3659920",
    "end": "3666040"
  },
  {
    "text": "well you don't have to perhaps overload neon delete most of the time but of",
    "start": "3666040",
    "end": "3671079"
  },
  {
    "text": "course you can do that you can have special type of requirement for memory and allocations so I'll be available",
    "start": "3671079",
    "end": "3679390"
  },
  {
    "text": "later if you want to ask any questions because we are currently out of time so thank you for your attention",
    "start": "3679390",
    "end": "3686170"
  },
  {
    "text": "[Applause]",
    "start": "3686170",
    "end": "3692659"
  }
]