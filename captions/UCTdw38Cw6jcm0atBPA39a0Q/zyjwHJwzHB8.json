[
  {
    "text": "yeah so uh this is uh Entity framework core Unchained uh my name is Dan Malott",
    "start": "5720",
    "end": "12540"
  },
  {
    "text": "um I'll be here speaker for the next hour um",
    "start": "12540",
    "end": "18440"
  },
  {
    "text": "so uh what are we what are we going to talk about um",
    "start": "19380",
    "end": "24680"
  },
  {
    "text": "first up we're going to talk about configuration um so this is the the behavior of Entity framework core that you can control",
    "start": "24779",
    "end": "31920"
  },
  {
    "text": "um either all the time or per statement um there are a number of really nice defaults and there are some defaults",
    "start": "31920",
    "end": "39660"
  },
  {
    "text": "that are not so good uh we'll talk about access patterns",
    "start": "39660",
    "end": "45420"
  },
  {
    "text": "um not all your crud is going to be created equally here uh foot guns my favorite uh favorite",
    "start": "45420",
    "end": "54059"
  },
  {
    "text": "subject um my second favorite subject and something",
    "start": "54059",
    "end": "59160"
  },
  {
    "text": "I work into every talk that I give if I can database design and how you screwed it up 20 years ago I mean how you can",
    "start": "59160",
    "end": "65700"
  },
  {
    "text": "only do it right once uh and then things that Entity framework",
    "start": "65700",
    "end": "71040"
  },
  {
    "text": "core just isn't good at and uh that we shouldn't try to do uh use it with",
    "start": "71040",
    "end": "76320"
  },
  {
    "text": "um I have a great story about how I didn't take my own advice there so we'll get there when it comes and lastly uh there",
    "start": "76320",
    "end": "84119"
  },
  {
    "text": "should be some time for questions at the end right uh who am I",
    "start": "84119",
    "end": "89640"
  },
  {
    "text": "aside from clearly an American right as I mentioned uh my name is Dan Malott Twitter GitHub LinkedIn I am a",
    "start": "89640",
    "end": "97860"
  },
  {
    "text": "senior principal for West Monroe uh we are a business and technology consulting firm based primarily in the United",
    "start": "97860",
    "end": "103920"
  },
  {
    "text": "States but recently decided that going outside the United States would be good as well so we have offices in Costa Rica",
    "start": "103920",
    "end": "110040"
  },
  {
    "text": "and London um if you're interested in what we do or",
    "start": "110040",
    "end": "116700"
  },
  {
    "text": "doing what we do with us come talk to me afterwards I've been developing software since",
    "start": "116700",
    "end": "122340"
  },
  {
    "text": "2011. I had more hair than uh",
    "start": "122340",
    "end": "127920"
  },
  {
    "text": "I did start out my life as a DBA before I became a developer and actually I did still have hair when",
    "start": "127920",
    "end": "135720"
  },
  {
    "text": "I switched over so I've lost all my hair as a developer not as a DBA",
    "start": "135720",
    "end": "140879"
  },
  {
    "text": "um primary experience with Microsoft Technologies .net SQL Server",
    "start": "140879",
    "end": "147780"
  },
  {
    "text": "Cosmos TV Azure or Azure apologies and I",
    "start": "147780",
    "end": "153660"
  },
  {
    "text": "am a in my spare time uh an ice hockey referee uh the ice is in parentheses",
    "start": "153660",
    "end": "159599"
  },
  {
    "text": "because depending on where you go people either see here see hockey and think it's that thing you play on a",
    "start": "159599",
    "end": "165720"
  },
  {
    "text": "field with wooden sticks and balls or you know what I know it as which is we",
    "start": "165720",
    "end": "170819"
  },
  {
    "text": "play out on ice with skates and carrying deadly weapons",
    "start": "170819",
    "end": "175920"
  },
  {
    "text": "um yeah so that's what I do in my spare time the fine folks in Illinois um so I based out of Chicago in the",
    "start": "175920",
    "end": "182160"
  },
  {
    "text": "United States to find folks in Illinois seem to think I do a pretty good job with it so I get to do interesting games",
    "start": "182160",
    "end": "188160"
  },
  {
    "text": "again if you're interested come talk to me um unlike when I spoke in Sydney a",
    "start": "188160",
    "end": "193260"
  },
  {
    "text": "couple years ago like there are actually ice rinks in Melbourne so that's kind of cool",
    "start": "193260",
    "end": "199319"
  },
  {
    "text": "um how many people in here are Developers",
    "start": "199319",
    "end": "204440"
  },
  {
    "text": "yeah anybody also a DBA or a DBA instead no okay",
    "start": "204840",
    "end": "211080"
  },
  {
    "text": "how many people work with.net as your primary weapon of choice yeah okay so",
    "start": "211080",
    "end": "216360"
  },
  {
    "text": "this next slide is going to be kind of redundant but I'll talk through it quickly anyway",
    "start": "216360",
    "end": "221760"
  },
  {
    "text": "um so we're talking about any framework core uh so what is that uh two things",
    "start": "221760",
    "end": "227280"
  },
  {
    "text": "one it's an object relational mapper so in that role it takes the results of a query Maps them into objects that you",
    "start": "227280",
    "end": "234120"
  },
  {
    "text": "can then access in your code um the true power for Entity framework",
    "start": "234120",
    "end": "239940"
  },
  {
    "text": "and what the reason why it's so widely adopted is the second piece of what's up on the screen which is that is also a",
    "start": "239940",
    "end": "247500"
  },
  {
    "text": "very powerful query generator so it can generate uh primarily data manipulation",
    "start": "247500",
    "end": "253260"
  },
  {
    "text": "language so the actual queries that get executed if you use code first which I will talk",
    "start": "253260",
    "end": "258840"
  },
  {
    "text": "about later um it can also generate um the data definition language for your",
    "start": "258840",
    "end": "265680"
  },
  {
    "text": "database right so let's talk about configuration so",
    "start": "265680",
    "end": "271979"
  },
  {
    "text": "how many people are familiar with Microsoft documentation okay you're all.net devs right",
    "start": "271979",
    "end": "280100"
  },
  {
    "text": "docs.microsoft.com yeah okay um right so how many people are familiar",
    "start": "281000",
    "end": "286440"
  },
  {
    "text": "with how great Microsoft documentation is at giving you the bare minimum",
    "start": "286440",
    "end": "292860"
  },
  {
    "text": "yeah right so uh if you do this which is the bare minimum uh not quite",
    "start": "292860",
    "end": "299820"
  },
  {
    "text": "the bare minimum because I actually you know uh put my",
    "start": "299820",
    "end": "305940"
  },
  {
    "text": "well this just isn't gonna work for me today that's fun um because I actually put my connection",
    "start": "305940",
    "end": "311160"
  },
  {
    "text": "string in a in a configuration right so this is if you go to",
    "start": "311160",
    "end": "316820"
  },
  {
    "text": "docs.microsoft.com look up Entity framework core say how do I add this to an application this is what you get",
    "start": "316820",
    "end": "323580"
  },
  {
    "text": "um and this works really well right it works we put it in a database in theory",
    "start": "323580",
    "end": "328740"
  },
  {
    "text": "we have a context to find somewhere maybe you generated it maybe you wrote it yourself hopefully you generated it",
    "start": "328740",
    "end": "335580"
  },
  {
    "text": "um but there are there are some things that this does and doesn't do for us that we",
    "start": "335580",
    "end": "341580"
  },
  {
    "text": "ought to be aware of please come in sit down",
    "start": "341580",
    "end": "346280"
  },
  {
    "text": "um so the first thing is uh query retry is not enabled um so if your query for some reason",
    "start": "346620",
    "end": "353460"
  },
  {
    "text": "fails how many of you develop with your database living in the cloud",
    "start": "353460",
    "end": "359780"
  },
  {
    "text": "okay another data center not not in your building yeah",
    "start": "360180",
    "end": "365759"
  },
  {
    "text": "maybe like it's in on another continent potentially as well right yeah okay",
    "start": "365759",
    "end": "371759"
  },
  {
    "text": "stuff happens um so by default no query retry is enabled which means if",
    "start": "371759",
    "end": "379139"
  },
  {
    "text": "try number one fails you get a giant exception uh number two",
    "start": "379139",
    "end": "385440"
  },
  {
    "text": "all of your queries are tracked I will talk more about what that means but",
    "start": "385440",
    "end": "391020"
  },
  {
    "text": "there is overhead associated with that third",
    "start": "391020",
    "end": "396240"
  },
  {
    "text": "any related entities that you want to access you have to explicitly load",
    "start": "396240",
    "end": "401520"
  },
  {
    "text": "um again I'll talk a little bit more about this but that essentially means using that include keyword in link",
    "start": "401520",
    "end": "408840"
  },
  {
    "text": "so that we get the results of the related table back with our main entity",
    "start": "408840",
    "end": "414900"
  },
  {
    "text": "uh and then lastly we don't really get a lot of vlogging um we get you know our favorite one",
    "start": "414900",
    "end": "421500"
  },
  {
    "text": "which is is this of an object or object not set to instance of an object",
    "start": "421500",
    "end": "426960"
  },
  {
    "text": "um that that tracks closely with that third one there um but really we don't get a whole lot",
    "start": "426960",
    "end": "432960"
  },
  {
    "text": "else right uh now this isn't all bad",
    "start": "432960",
    "end": "439380"
  },
  {
    "text": "um in fact there's one thing here that we we always almost always want to keep um so a couple of things uh one uh",
    "start": "439380",
    "end": "448440"
  },
  {
    "text": "we want to implement a retry policy so many of the database providers including",
    "start": "448440",
    "end": "454860"
  },
  {
    "text": "since you all are net folks and presumably work with some sort of version of SQL Server the SQL Server",
    "start": "454860",
    "end": "461099"
  },
  {
    "text": "provider allow us to Define our own retry policy um",
    "start": "461099",
    "end": "466620"
  },
  {
    "text": "and we should do that we should use the proper tracking Behavior",
    "start": "466620",
    "end": "472919"
  },
  {
    "text": "excuse me we will get more into that",
    "start": "472919",
    "end": "477860"
  },
  {
    "text": "in our development environment we should make sure we're logging errors and warnings and you know potentially",
    "start": "480139",
    "end": "486720"
  },
  {
    "text": "some additional good information which I'll talk about here in a second and",
    "start": "486720",
    "end": "492060"
  },
  {
    "text": "then lastly and thankfully with ef6 EF core six apologies this one's",
    "start": "492060",
    "end": "499620"
  },
  {
    "text": "really hard to do we should not enable laser Eagle ear loading proxies",
    "start": "499620",
    "end": "505259"
  },
  {
    "text": "um lazy and eager loading does that resonate with everyone",
    "start": "505259",
    "end": "510840"
  },
  {
    "text": "should I yes okay should I should I explain what those are",
    "start": "510840",
    "end": "517339"
  },
  {
    "text": "yeah so uh just sort of in brief eager loading you're going to end up loading every related entity for your entity",
    "start": "523080",
    "end": "529080"
  },
  {
    "text": "which means that if you have a nice properly normalized database you're going to end up loading the whole bloody thing uh and lazy loading is you're",
    "start": "529080",
    "end": "537360"
  },
  {
    "text": "going to have far more queries than you actually need to get your like one person with four addresses",
    "start": "537360",
    "end": "543959"
  },
  {
    "text": "so um suggested configuration",
    "start": "543959",
    "end": "549260"
  },
  {
    "text": "and I have a bigger version so for everybody who is trying to take a",
    "start": "549260",
    "end": "555420"
  },
  {
    "text": "picture of the small one have a bigger one um",
    "start": "555420",
    "end": "560580"
  },
  {
    "text": "right so this is the configuration that I generally start with it's a good place",
    "start": "560580",
    "end": "566339"
  },
  {
    "text": "to start and let's kind of talk through from the top uh so first of all enable retry on",
    "start": "566339",
    "end": "573360"
  },
  {
    "text": "failure um this is particularly important because um I tend to use a lot of uh serverless",
    "start": "573360",
    "end": "581519"
  },
  {
    "text": "versions of azure SQL database uh what's the great thing about the",
    "start": "581519",
    "end": "586980"
  },
  {
    "text": "serverless version of azure SQL database it goes to sleep and saves you money",
    "start": "586980",
    "end": "592560"
  },
  {
    "text": "but then it goes to sleep and you have to wake it up and if you don't wake it up your query fails right so uh for me I just do retry",
    "start": "592560",
    "end": "601980"
  },
  {
    "text": "count for time span from seconds one so one second between each you can Define",
    "start": "601980",
    "end": "608700"
  },
  {
    "text": "this in sort of any way that you like so if you have a situation where you need to do some sort of like",
    "start": "608700",
    "end": "615779"
  },
  {
    "text": "staggered back off with Fibonacci Sequence something like that you can configure it that way",
    "start": "615779",
    "end": "621839"
  },
  {
    "text": "generally just like wait a second and try it again it's going to work lastly on the uh far right there for you",
    "start": "621839",
    "end": "629820"
  },
  {
    "text": "folks the error numbers to add so uh",
    "start": "629820",
    "end": "636600"
  },
  {
    "text": "the provider handles a certain number like certain ones by default so if it's a deadlock if",
    "start": "636600",
    "end": "643680"
  },
  {
    "text": "it's uh a timeout query timeout uh an 18 456 you",
    "start": "643680",
    "end": "650220"
  },
  {
    "text": "didn't give the right password um kind of things but then you can add",
    "start": "650220",
    "end": "655440"
  },
  {
    "text": "some other error numbers those correspond with for the SQL Server provider the SQL Server errors that you",
    "start": "655440",
    "end": "661079"
  },
  {
    "text": "would be reading right uh query tracking Behavior I like",
    "start": "661079",
    "end": "669839"
  },
  {
    "text": "to use no tracking by default again we're going to talk much more about that in a bit in",
    "start": "669839",
    "end": "675959"
  },
  {
    "text": "like four slides five slides um",
    "start": "675959",
    "end": "681240"
  },
  {
    "text": "and then in the development environment we're going to log additional things so",
    "start": "681240",
    "end": "686820"
  },
  {
    "text": "first and let me repeat in the development environment don't do this in prod don't",
    "start": "686820",
    "end": "692459"
  },
  {
    "text": "do this in prod don't do this in prod I said it three times don't do this in prod",
    "start": "692459",
    "end": "699140"
  },
  {
    "text": "detailed errors so we get field leveler error details right so instead of your",
    "start": "699140",
    "end": "704519"
  },
  {
    "text": "query just going well that didn't work when you tried to stuff 20 characters into a 15 character field you'll get hey",
    "start": "704519",
    "end": "711060"
  },
  {
    "text": "you tried to stuff 20 characters into this 15 character field",
    "start": "711060",
    "end": "716480"
  },
  {
    "text": "useful uh secondly sensitive data logging so",
    "start": "716940",
    "end": "723480"
  },
  {
    "text": "this logs all of the parameters that are passed from Entity framework to SQL Server",
    "start": "723480",
    "end": "729899"
  },
  {
    "text": "don't do this in production in fact don't do this anywhere that",
    "start": "729899",
    "end": "734940"
  },
  {
    "text": "you're shipping the logs like off your computer maybe um because sensitive things get logged in",
    "start": "734940",
    "end": "741540"
  },
  {
    "text": "there so like I'm an American so Social Security numbers are kind of an important thing",
    "start": "741540",
    "end": "746760"
  },
  {
    "text": "they govern our entire lives because you know people in 1935 got that right",
    "start": "746760",
    "end": "754079"
  },
  {
    "text": "um right so sensitive data logging would log that into my log console you",
    "start": "754079",
    "end": "759720"
  },
  {
    "text": "probably don't want to you probably don't want to ship that up to azure you know I assume there's something",
    "start": "759720",
    "end": "765440"
  },
  {
    "text": "similar here in Australia yeah um",
    "start": "765440",
    "end": "770880"
  },
  {
    "text": "or if you're dealing with any sort of gdpr thing yeah that that's a thing too",
    "start": "770880",
    "end": "776220"
  },
  {
    "text": "um and then I can configure some additional warnings to be popped into my log",
    "start": "776220",
    "end": "781800"
  },
  {
    "text": "um and in fact you can do this in production too um but these are more for my purposes",
    "start": "781800",
    "end": "788279"
  },
  {
    "text": "and my developers purposes so um",
    "start": "788279",
    "end": "793380"
  },
  {
    "text": "there are two types of there are two types of events that can be logged um what we see here are two core events",
    "start": "793380",
    "end": "800940"
  },
  {
    "text": "um so and these are sort of General non-provider specific things mistakes",
    "start": "800940",
    "end": "806519"
  },
  {
    "text": "that you might have made um so the first one uh first without order by and filter warning",
    "start": "806519",
    "end": "812940"
  },
  {
    "text": "I'm not going to address the first versus single kind of holy war",
    "start": "812940",
    "end": "818160"
  },
  {
    "text": "um you guys who make that decision for yourself but if you're using either of them you ought to be order by you ought",
    "start": "818160",
    "end": "823800"
  },
  {
    "text": "to be using order by right because uh the order of queries out of relational databases is generally",
    "start": "823800",
    "end": "830519"
  },
  {
    "text": "non-deterministic likewise with the second one row limiting operation without order by",
    "start": "830519",
    "end": "836459"
  },
  {
    "text": "warning um yeah same idea",
    "start": "836459",
    "end": "842180"
  },
  {
    "text": "row order isn't deterministic the in you know in the results that are returned uh and so if we're paging data",
    "start": "842399",
    "end": "850740"
  },
  {
    "text": "for example we want to make sure that we get different pages of 100 records we don't want to end up with the same or a",
    "start": "850740",
    "end": "856940"
  },
  {
    "text": "cross-section or weird stuff can happen um there are also uh what are called",
    "start": "856940",
    "end": "863519"
  },
  {
    "text": "relational event IDs which are you know kind of informational about how",
    "start": "863519",
    "end": "869519"
  },
  {
    "text": "Entity framework is uh handling your model they're interesting I don't ever use",
    "start": "869519",
    "end": "876899"
  },
  {
    "text": "them myself but if you want to see like hey it is using an index or things like that",
    "start": "876899",
    "end": "884220"
  },
  {
    "text": "that can be useful any questions so far",
    "start": "884220",
    "end": "890779"
  },
  {
    "text": "foreign some of those warnings come up by default what are the defaults around",
    "start": "893519",
    "end": "900180"
  },
  {
    "text": "them um",
    "start": "900180",
    "end": "904819"
  },
  {
    "text": "I don't remember uh there are some that come up from by default um",
    "start": "907440",
    "end": "912720"
  },
  {
    "text": "in fact the the some of these things have changed from five to six",
    "start": "912720",
    "end": "918000"
  },
  {
    "text": "um so I that first one might now be a default um",
    "start": "918000",
    "end": "923820"
  },
  {
    "text": "did yeah yeah",
    "start": "923820",
    "end": "928880"
  },
  {
    "text": "um I think you'll get some like parameter mismatch warnings by default as well like if you shove in an integer and it",
    "start": "929339",
    "end": "936660"
  },
  {
    "text": "should be a string that sort of thing all right",
    "start": "936660",
    "end": "941899"
  },
  {
    "text": "[Music]",
    "start": "952970",
    "end": "956149"
  },
  {
    "text": "sure yeah so the question is wouldn't you want to maybe not rely on your environment variable yeah so this is",
    "start": "966779",
    "end": "973500"
  },
  {
    "text": "this how this is how it works in in our environments generally but",
    "start": "973500",
    "end": "978720"
  },
  {
    "text": "for you make sure that you're doing this in a way that makes sense for you so whether that's using the compiler",
    "start": "978720",
    "end": "985500"
  },
  {
    "text": "directives or the environment variables or whatever it is yeah",
    "start": "985500",
    "end": "993720"
  },
  {
    "text": "commenting the code out I mean",
    "start": "993720",
    "end": "999000"
  },
  {
    "text": "look this is reality that happens",
    "start": "999000",
    "end": "1005360"
  },
  {
    "text": "all right let's talk about crud because this is where we're really going to find",
    "start": "1005360",
    "end": "1012800"
  },
  {
    "text": "ourselves uh either gaining or losing performance or having options to tweak how at any",
    "start": "1012800",
    "end": "1019339"
  },
  {
    "text": "framework is is getting data this is how it gets the data uh so we're going to start we're going",
    "start": "1019339",
    "end": "1024860"
  },
  {
    "text": "to go in order so we'll start uh inserting some records right so top screenshot I inserted one",
    "start": "1024860",
    "end": "1033140"
  },
  {
    "text": "record and I got an insert statement this is expected",
    "start": "1033140",
    "end": "1038480"
  },
  {
    "text": "uh the second one I inserted three records and I got a",
    "start": "1038480",
    "end": "1044058"
  },
  {
    "text": "um this really is just isn't going to work for me that's unfortunate I got a merge",
    "start": "1044059",
    "end": "1050720"
  },
  {
    "text": "statement which is weird",
    "start": "1050720",
    "end": "1057140"
  },
  {
    "text": "you would think that it would just be an insert statement with three rows instead of right",
    "start": "1057140",
    "end": "1064100"
  },
  {
    "text": "um so the question is how did this happen right so",
    "start": "1064100",
    "end": "1070000"
  },
  {
    "text": "the top two lines are what generated that insert statement so I have three users in my collection",
    "start": "1070100",
    "end": "1075380"
  },
  {
    "text": "I add them I save changes and uh I got this",
    "start": "1075380",
    "end": "1082520"
  },
  {
    "text": "which is a merge statement and this is different how many people used Entity",
    "start": "1082520",
    "end": "1087799"
  },
  {
    "text": "framework in the.net framework days yeah this this wasn't how it did it",
    "start": "1087799",
    "end": "1095660"
  },
  {
    "text": "right you got ins just single insert statements and it was awful",
    "start": "1095660",
    "end": "1102080"
  },
  {
    "text": "um so so here's the here's the deal right now it's so now it's a merge statement that was added in or the",
    "start": "1102080",
    "end": "1108200"
  },
  {
    "text": "behavior was changed in any firmware core one one um so",
    "start": "1108200",
    "end": "1113419"
  },
  {
    "text": "single insert statements are slow true ish as with everything database it",
    "start": "1113419",
    "end": "1120500"
  },
  {
    "text": "depends um inserting records is more efficient that's almost always true",
    "start": "1120500",
    "end": "1127580"
  },
  {
    "text": "um so if we're going to insert multiple records let's use a merge statement to protect ourselves from some strange",
    "start": "1127580",
    "end": "1134299"
  },
  {
    "text": "SQL generation issues um and the reason for this is sort of esoteric",
    "start": "1134299",
    "end": "1142039"
  },
  {
    "text": "in that um because we're using a merge",
    "start": "1142039",
    "end": "1147679"
  },
  {
    "text": "it essentially is generating c t SQL that",
    "start": "1147679",
    "end": "1153200"
  },
  {
    "text": "is more guaranteed to work even if you have some strange values in",
    "start": "1153200",
    "end": "1158600"
  },
  {
    "text": "that you're putting in um so it's not not necessarily a bad",
    "start": "1158600",
    "end": "1163820"
  },
  {
    "text": "choice um and in fact this this is reasonably performing up to around 500 records",
    "start": "1163820",
    "end": "1170900"
  },
  {
    "text": "um and it is definitely more efficient than running single insert statements",
    "start": "1170900",
    "end": "1176660"
  },
  {
    "text": "um that being said in your environment You may wish to change this Behavior",
    "start": "1176660",
    "end": "1183260"
  },
  {
    "text": "and so if you wish to change this Behavior Uh we have What's called the max batch size",
    "start": "1183260",
    "end": "1190660"
  },
  {
    "text": "um and if we set that to one then we'll get a single insert statement no matter what",
    "start": "1191000",
    "end": "1196340"
  },
  {
    "text": "there's a downside which I'll talk about in a bit um but just be aware that the break point",
    "start": "1196340",
    "end": "1202220"
  },
  {
    "text": "is three records so one or two records you're going to get single inserts no matter what three or more records you're going to",
    "start": "1202220",
    "end": "1208460"
  },
  {
    "text": "get a merge it's reasonably performant but if you need to change it",
    "start": "1208460",
    "end": "1215240"
  },
  {
    "text": "this is the way okay",
    "start": "1215240",
    "end": "1222580"
  },
  {
    "text": "I promise we were talking about track query tracking right so um any framework core",
    "start": "1223580",
    "end": "1230120"
  },
  {
    "text": "and like Entity framework before it holds a lot of information about the state of the entities that it has",
    "start": "1230120",
    "end": "1236299"
  },
  {
    "text": "retrieved and it does this in order to allow you",
    "start": "1236299",
    "end": "1241640"
  },
  {
    "text": "to pull an entity make changes and save it without having to do any of that state management or change tracking",
    "start": "1241640",
    "end": "1248299"
  },
  {
    "text": "yourself um which is great hugely powerful hugely convenient cuts",
    "start": "1248299",
    "end": "1256820"
  },
  {
    "text": "down on the amount of code that you have to write and in theory the smart folks at Microsoft have gotten it right more",
    "start": "1256820",
    "end": "1262220"
  },
  {
    "text": "right than we would have",
    "start": "1262220",
    "end": "1265120"
  },
  {
    "text": "but there's a cost there and that cost is overhead overhead in in query execution overhead",
    "start": "1268100",
    "end": "1274460"
  },
  {
    "text": "and memory in your application question if you are simply getting data from a",
    "start": "1274460",
    "end": "1281480"
  },
  {
    "text": "database and returning it through an API do you need to track that data",
    "start": "1281480",
    "end": "1288280"
  },
  {
    "text": "okay good I'm seeing heads go this way which is which is good yeah um probably not",
    "start": "1288980",
    "end": "1295460"
  },
  {
    "text": "um so if you are going to Simply return the data that you're getting or you're",
    "start": "1295460",
    "end": "1300799"
  },
  {
    "text": "not making any modifications to it that would need to be saved back to the database",
    "start": "1300799",
    "end": "1306679"
  },
  {
    "text": "or you're using not the objects itself because I'm sure we've all run into this",
    "start": "1306679",
    "end": "1312320"
  },
  {
    "text": "one but the data within the objects to hydrate a different object um yeah",
    "start": "1312320",
    "end": "1318559"
  },
  {
    "text": "choosing no tracking is going to save you about 30 percent overhead",
    "start": "1318559",
    "end": "1324799"
  },
  {
    "text": "and so that's query execution time and memory um it is actually like significantly",
    "start": "1324799",
    "end": "1333500"
  },
  {
    "text": "faster this one weird trick um likewise on the other side of this if",
    "start": "1333500",
    "end": "1339799"
  },
  {
    "text": "you're modifying the original entities or you need to like pull an entity and attach it to another one or you're doing",
    "start": "1339799",
    "end": "1347840"
  },
  {
    "text": "some delete operation or something like that um as tracking now the reason that I",
    "start": "1347840",
    "end": "1356179"
  },
  {
    "text": "present it this way with the function is so if you remember back when we were talking about our",
    "start": "1356179",
    "end": "1362419"
  },
  {
    "text": "um our configuration I said the default query tracking Behavior was no tracking",
    "start": "1362419",
    "end": "1370340"
  },
  {
    "text": "so by default we track everything in my configuration I said don't track",
    "start": "1370340",
    "end": "1375740"
  },
  {
    "text": "anything but on any of your link statements you can add one of these",
    "start": "1375740",
    "end": "1382039"
  },
  {
    "text": "and it will do that thing so if you've decided yes I'm going to track everything but I don't need this one",
    "start": "1382039",
    "end": "1388640"
  },
  {
    "text": "tracked as no tracking if you said don't track anything but you need this",
    "start": "1388640",
    "end": "1394880"
  },
  {
    "text": "one tracked as tracking right so this this is this can be a decision made at the query level in",
    "start": "1394880",
    "end": "1401840"
  },
  {
    "text": "addition to at the configuration level",
    "start": "1401840",
    "end": "1405340"
  },
  {
    "text": "s yeah so that's what a so gentle in the back cities",
    "start": "1414440",
    "end": "1420620"
  },
  {
    "text": "found that it was up to 50 less memory um I say 30 on purpose because it it's",
    "start": "1420620",
    "end": "1429320"
  },
  {
    "text": "that's when the memory usage is really dependent on the situation that you're using it so",
    "start": "1429320",
    "end": "1435860"
  },
  {
    "text": "I like being conservative I'm a consultant I don't want to over prophesy under the liver",
    "start": "1435860",
    "end": "1442240"
  },
  {
    "text": "hold that thought short answer yes but hold that thought",
    "start": "1451460",
    "end": "1456940"
  },
  {
    "text": "all right yeah so I I use a lot of no tracking because a lot",
    "start": "1458000",
    "end": "1463520"
  },
  {
    "text": "of what I build are just apis so makes sense all right",
    "start": "1463520",
    "end": "1469640"
  },
  {
    "text": "um unfortunately for everyone in this room updates and deletes you don't really have any control over",
    "start": "1469640",
    "end": "1476240"
  },
  {
    "text": "uh except you'll notice a substantial difference between the top one and the bottom one so the top one we're doing an",
    "start": "1476240",
    "end": "1481820"
  },
  {
    "text": "update the bottom one we're doing a delete on the bottom on the top one I had not",
    "start": "1481820",
    "end": "1487220"
  },
  {
    "text": "set what my Max batch size should be on the bottom one I had",
    "start": "1487220",
    "end": "1493940"
  },
  {
    "text": "so this is the drawback that I mentioned with Max batch size so I set max back size yeah Max batch size to one",
    "start": "1493940",
    "end": "1504200"
  },
  {
    "text": "and I got a single connection with every statement",
    "start": "1504200",
    "end": "1509480"
  },
  {
    "text": "which was a sort of unhappy discovery um because this is definitely less",
    "start": "1509480",
    "end": "1516919"
  },
  {
    "text": "efficient uh so just be aware of that you're going to",
    "start": "1516919",
    "end": "1522320"
  },
  {
    "text": "get a single update or delete statement No matter what you do but it's way better to have that top one where at",
    "start": "1522320",
    "end": "1527600"
  },
  {
    "text": "least they're only issued in one command instead of like for",
    "start": "1527600",
    "end": "1533000"
  },
  {
    "text": "is it four yeah four different open connections to your database which are",
    "start": "1533000",
    "end": "1538580"
  },
  {
    "text": "issued sequentially not at the same time so you don't even get like more benefit",
    "start": "1538580",
    "end": "1545000"
  },
  {
    "text": "from doing things async",
    "start": "1545000",
    "end": "1548200"
  },
  {
    "text": "okay how are we doing half an hour all right foot guns",
    "start": "1554840",
    "end": "1562820"
  },
  {
    "text": "um easy ways to shoot yourself in the foot",
    "start": "1562820",
    "end": "1568100"
  },
  {
    "text": "okay so we already saw some uh bulk manipulation of data right this is this",
    "start": "1568100",
    "end": "1573740"
  },
  {
    "text": "is something that any framework's really kind of never been good at um the situation improved in core but",
    "start": "1573740",
    "end": "1578960"
  },
  {
    "text": "didn't get substantially better uh lazy loading entities uh",
    "start": "1578960",
    "end": "1585500"
  },
  {
    "text": "tracking for readers only scenarios retry policy",
    "start": "1585500",
    "end": "1590900"
  },
  {
    "text": "um let's talk about some other ways we can kill our performance um",
    "start": "1590900",
    "end": "1597380"
  },
  {
    "text": "so my friends uh point with projections uh yeah using the auto-generated",
    "start": "1597380",
    "end": "1602779"
  },
  {
    "text": "entities so because we we all like shortcuts right that's why we're Developers so we're lazy in in like a not bad way",
    "start": "1602779",
    "end": "1610460"
  },
  {
    "text": "right um so DB context scaffold and then you get a you get something that nicely",
    "start": "1610460",
    "end": "1616460"
  },
  {
    "text": "matches your database uh and pulls back way more data than you need right so we're going to talk about",
    "start": "1616460",
    "end": "1621980"
  },
  {
    "text": "using projections um loading too many related tables",
    "start": "1621980",
    "end": "1629179"
  },
  {
    "text": "um or too few too few you get a nice exception everybody loves that one uh too many",
    "start": "1629179",
    "end": "1636020"
  },
  {
    "text": "you're just pulling back too much data too much data more memory more query",
    "start": "1636020",
    "end": "1642020"
  },
  {
    "text": "execution time right what's the fastest query you can run",
    "start": "1642020",
    "end": "1649059"
  },
  {
    "text": "it's not a trick question no query at all",
    "start": "1652340",
    "end": "1659080"
  },
  {
    "text": "yeah um everyone in here is fortunate to be",
    "start": "1659360",
    "end": "1668059"
  },
  {
    "text": "using a version of.net framework or dot net core that has async async await yeah",
    "start": "1668059",
    "end": "1674960"
  },
  {
    "text": "okay it's a legitimate question I worked on a product for two years that we had to",
    "start": "1674960",
    "end": "1680600"
  },
  {
    "text": "compile to.net framework three five because we had to be able to run it on Windows 7 machines that weren't patched",
    "start": "1680600",
    "end": "1688658"
  },
  {
    "text": "that's all I'll say about that um but yeah so async query methods",
    "start": "1690440",
    "end": "1696679"
  },
  {
    "text": "are going to give you a better performance generally and then lastly",
    "start": "1696679",
    "end": "1702679"
  },
  {
    "text": "um and we'll we'll talk a lot we'll talk much more about this defeating the indexes on the database by not",
    "start": "1702679",
    "end": "1708200"
  },
  {
    "text": "understanding how they're used okay so let's start with our projection",
    "start": "1708200",
    "end": "1714559"
  },
  {
    "text": "we're using select so uh SEC overflow database we're all familiar",
    "start": "1714559",
    "end": "1720620"
  },
  {
    "text": "with stack Overflow right so as you can imagine the post object has a lot of columns",
    "start": "1720620",
    "end": "1727640"
  },
  {
    "text": "but really if we're just displaying the body of the post I don't need all that I just need the",
    "start": "1727640",
    "end": "1733580"
  },
  {
    "text": "body right so what I can do is Define a custom class dto whatever you want to",
    "start": "1733580",
    "end": "1740360"
  },
  {
    "text": "call it Poco um",
    "start": "1740360",
    "end": "1744820"
  },
  {
    "text": "run the selection inside of my query and then",
    "start": "1745580",
    "end": "1752419"
  },
  {
    "text": "the generated SQL is only pulling back the data that I want need for the projection all the data I want and not",
    "start": "1752419",
    "end": "1759440"
  },
  {
    "text": "the rest of the um the rest of the object now a couple of things here uh",
    "start": "1759440",
    "end": "1766760"
  },
  {
    "text": "there is going to be functionally no difference at a scale like this where it's a single query",
    "start": "1766760",
    "end": "1773799"
  },
  {
    "text": "two Fields versus ten uh but if you start talking about",
    "start": "1773840",
    "end": "1779720"
  },
  {
    "text": "a lot of users or large objects or you know some sort of something where",
    "start": "1779720",
    "end": "1785240"
  },
  {
    "text": "you're where you're doing a lot of issuing a lot of queries over and over again this starts to get starts to be",
    "start": "1785240",
    "end": "1791779"
  },
  {
    "text": "have some real performance gains um",
    "start": "1791779",
    "end": "1797380"
  },
  {
    "text": "now to your question this is a great way to not track anything",
    "start": "1798620",
    "end": "1804320"
  },
  {
    "text": "because Entity framework doesn't know",
    "start": "1804320",
    "end": "1809480"
  },
  {
    "text": "what that class up there is it doesn't know that it should be mapped to a table it doesn't know what the columns are it",
    "start": "1809480",
    "end": "1814760"
  },
  {
    "text": "just knows it as a class that I'm projecting the results of my query into so that isn't going to be tracked",
    "start": "1814760",
    "end": "1822020"
  },
  {
    "text": "um now this can be good right saves you overhead saves you",
    "start": "1822020",
    "end": "1828080"
  },
  {
    "text": "memory but just be aware that that that data as soon as it projects it",
    "start": "1828080",
    "end": "1834620"
  },
  {
    "text": "in there it forgets about it completely all right",
    "start": "1834620",
    "end": "1841059"
  },
  {
    "text": "okay async uh sorry question",
    "start": "1843860",
    "end": "1848140"
  },
  {
    "text": "why ah yeah so the reason it is top two and not top one is so you'll notice I've used single",
    "start": "1849140",
    "end": "1856640"
  },
  {
    "text": "or default and so",
    "start": "1856640",
    "end": "1861460"
  },
  {
    "text": "for both single and first the SQL that's generated will use the",
    "start": "1862100",
    "end": "1868100"
  },
  {
    "text": "top two for first it's because it needs to grab just one of them",
    "start": "1868100",
    "end": "1873140"
  },
  {
    "text": "and for single it's because it needs to throw an exception if it got two results",
    "start": "1873140",
    "end": "1878360"
  },
  {
    "text": "because by using single you're saying I expect there to be one and only one of these",
    "start": "1878360",
    "end": "1883640"
  },
  {
    "text": "right and any framework is in its Infinite Wisdom says well I want to I want to be able to throw an exception if you've got",
    "start": "1883640",
    "end": "1889760"
  },
  {
    "text": "more than one um likewise if I just use single instead of",
    "start": "1889760",
    "end": "1895520"
  },
  {
    "text": "singular default it would throw an exception if I got zero of them",
    "start": "1895520",
    "end": "1901059"
  },
  {
    "text": "but it would still ask for top two so yeah good catch",
    "start": "1902779",
    "end": "1911260"
  },
  {
    "text": "all right asynchronous um everybody uses async in their code right",
    "start": "1911559",
    "end": "1918700"
  },
  {
    "text": "yeah no Maybe uh right so",
    "start": "1919340",
    "end": "1925640"
  },
  {
    "text": "a couple years ago I went to a talk by um",
    "start": "1925640",
    "end": "1930520"
  },
  {
    "text": "and he's gonna Escape me now anyway gentleman who said that having",
    "start": "1933620",
    "end": "1939620"
  },
  {
    "text": "async and a weight everywhere in our code was actually a code smell that you had to push that",
    "start": "1939620",
    "end": "1945440"
  },
  {
    "text": "like either up or down as far as you could anyway",
    "start": "1945440",
    "end": "1950899"
  },
  {
    "text": "all else being equal the top one's going to be faster than the second one",
    "start": "1950899",
    "end": "1956000"
  },
  {
    "text": "um now again this is a question of scale if your app has 10 users and a 10",
    "start": "1956000",
    "end": "1962720"
  },
  {
    "text": "gigabyte database the difference is going to be within the",
    "start": "1962720",
    "end": "1968600"
  },
  {
    "text": "margin of of error you would you know you might it might appear faster and then the second one",
    "start": "1968600",
    "end": "1974179"
  },
  {
    "text": "might appear faster than the yeah um when you start getting into large",
    "start": "1974179",
    "end": "1979220"
  },
  {
    "text": "workloads millions of users terabytes of data",
    "start": "1979220",
    "end": "1986600"
  },
  {
    "text": "um the the top one is going to perform better under load um",
    "start": "1986600",
    "end": "1992059"
  },
  {
    "text": "Microsoft has invested a lot in the runtime being able to handle multiple threads in asynchronous execution and",
    "start": "1992059",
    "end": "1999260"
  },
  {
    "text": "um yeah so just use async however you want to like abstract that",
    "start": "1999260",
    "end": "2004299"
  },
  {
    "text": "away so you don't have like a weight all over your code is is fine but I suggest doing it",
    "start": "2004299",
    "end": "2012279"
  },
  {
    "text": "also just denote the the asynchronous uh enumerable I async",
    "start": "2012279",
    "end": "2020260"
  },
  {
    "text": "enumerable syntax is really tragic in my opinion hopefully that gets fixed up soon",
    "start": "2020260",
    "end": "2026380"
  },
  {
    "text": "uh right SQL Server indexing",
    "start": "2026380",
    "end": "2033279"
  },
  {
    "text": "um so this is kind of specific to SQL Server um anybody using postgres out here",
    "start": "2033279",
    "end": "2040600"
  },
  {
    "text": "one okay two yeah a couple um the similar similar issues with",
    "start": "2040600",
    "end": "2047200"
  },
  {
    "text": "postgres um so indexes are really really good",
    "start": "2047200",
    "end": "2052658"
  },
  {
    "text": "they help return the data faster right right makes sense if you have a book",
    "start": "2052659",
    "end": "2058480"
  },
  {
    "text": "rather than flipping through the entire book you can go to the index in the back and go I want to get any from her core",
    "start": "2058480",
    "end": "2065260"
  },
  {
    "text": "and go right to the page um there's a downside with databases",
    "start": "2065260",
    "end": "2070898"
  },
  {
    "text": "though because it's going to make our inserts updates and delete slower obviously you have to update the index",
    "start": "2070899",
    "end": "2079599"
  },
  {
    "text": "um so that's generally fine just means we don't want to have too many indexes",
    "start": "2079599",
    "end": "2084940"
  },
  {
    "text": "hopefully you have a DBA in your shop that can help you with this um so where we start to run into trouble",
    "start": "2084940",
    "end": "2091179"
  },
  {
    "text": "though is string indexes so that would be varcar and varcar",
    "start": "2091179",
    "end": "2096878"
  },
  {
    "text": "um string type in in C sharp",
    "start": "2096879",
    "end": "2103320"
  },
  {
    "text": "they can only get used in SQL Server when it's in a quality operation or when",
    "start": "2103780",
    "end": "2109599"
  },
  {
    "text": "we're saying starts with so there's like a trailing wild card so",
    "start": "2109599",
    "end": "2116500"
  },
  {
    "text": "uh like d a percent right",
    "start": "2116500",
    "end": "2122820"
  },
  {
    "text": "um if you start it with a wild card it's like so you say like ends with right the",
    "start": "2123099",
    "end": "2128380"
  },
  {
    "text": "index will not be used on a large table that could be bad",
    "start": "2128380",
    "end": "2133839"
  },
  {
    "text": "so just kind of be aware of that um and then the other place where indexes",
    "start": "2133839",
    "end": "2139540"
  },
  {
    "text": "generally don't get used is when you're doing an operation on the column so for example",
    "start": "2139540",
    "end": "2144820"
  },
  {
    "text": "we have our stack Overflow database each post has an answer count on it",
    "start": "2144820",
    "end": "2150220"
  },
  {
    "text": "now why this isn't just calculated from the number of answers associated",
    "start": "2150220",
    "end": "2156339"
  },
  {
    "text": "but makes sense to somebody and these guys generally know what they're doing",
    "start": "2156339",
    "end": "2161740"
  },
  {
    "text": "but if I say if I want to get like answer count divided by 2 for some reason um I should really make sure I don't",
    "start": "2161740",
    "end": "2168099"
  },
  {
    "text": "drew that in my query because that that will also defeat indexes",
    "start": "2168099",
    "end": "2173859"
  },
  {
    "text": "um performing some sort of function on the data uh if you have a DBA team talk to them",
    "start": "2173859",
    "end": "2181660"
  },
  {
    "text": "they want to help I promise they only seem grumpy",
    "start": "2181660",
    "end": "2188460"
  },
  {
    "text": "yeah they're probably grumpy they'll get less grumpy if you ask them for help",
    "start": "2188619",
    "end": "2194578"
  },
  {
    "text": "all right yeah my favorite topic database design unfortunately you only get one shot to",
    "start": "2199420",
    "end": "2205480"
  },
  {
    "text": "do this right who all has the ultimate pleasure and uh",
    "start": "2205480",
    "end": "2213480"
  },
  {
    "text": "and like we'll call it the the best of all worlds of working on a brand new app",
    "start": "2213480",
    "end": "2219220"
  },
  {
    "text": "brand new database every time you start a new project",
    "start": "2219220",
    "end": "2224040"
  },
  {
    "text": "we've got one okay so the rest of us are stuck with databases that were designed",
    "start": "2224740",
    "end": "2230619"
  },
  {
    "text": "we'll call it charitably 10 years ago but in reality it might be 20 30 working",
    "start": "2230619",
    "end": "2237160"
  },
  {
    "text": "with a client right now that uh they have not one but three working as400s",
    "start": "2237160",
    "end": "2245800"
  },
  {
    "text": "with attached I series db2 databases",
    "start": "2245800",
    "end": "2250500"
  },
  {
    "text": "yeah it's a really curious decisions in there",
    "start": "2251140",
    "end": "2256599"
  },
  {
    "text": "not to mention a whole lot of table names that are like 10 characters c-u-s-i-n-f-a-u",
    "start": "2256599",
    "end": "2264160"
  },
  {
    "text": "all right so General guidance yet okay so the obvious one is do it right the first time",
    "start": "2267339",
    "end": "2274780"
  },
  {
    "text": "um you only get to design your database right once once you've made that decision and there's data in it it's not",
    "start": "2274780",
    "end": "2282520"
  },
  {
    "text": "impossible but much harder to change um so we want to make sure we do it",
    "start": "2282520",
    "end": "2287740"
  },
  {
    "text": "right the first time this means um for one",
    "start": "2287740",
    "end": "2292960"
  },
  {
    "text": "thinking about how to do this relationally if you're working with a relational database if you're working with Cosmos or something like that it's",
    "start": "2292960",
    "end": "2299500"
  },
  {
    "text": "a little bit you know it's a different different way of thinking about database design",
    "start": "2299500",
    "end": "2305460"
  },
  {
    "text": "because poor design is going to be poor performance nothing that I've talked",
    "start": "2305460",
    "end": "2310540"
  },
  {
    "text": "about in this session nothing that any like how to get better performance out of",
    "start": "2310540",
    "end": "2316960"
  },
  {
    "text": "your database nothing is going to solve a bad design short of throwing more Hardware at it",
    "start": "2316960",
    "end": "2324220"
  },
  {
    "text": "and Hardware is expensive even today",
    "start": "2324220",
    "end": "2329099"
  },
  {
    "text": "um right so mentioned Cosmos design for your access patterns",
    "start": "2329500",
    "end": "2336400"
  },
  {
    "text": "um so back in my day uh we wanted everything to be this",
    "start": "2336400",
    "end": "2341800"
  },
  {
    "text": "perfect third normal form or bcnf and um you know you just wrote",
    "start": "2341800",
    "end": "2348400"
  },
  {
    "text": "bunches and bunches of joins and it was fine um and then came along this idea of the",
    "start": "2348400",
    "end": "2355839"
  },
  {
    "text": "nosql not only SQL database and we started to think about like well",
    "start": "2355839",
    "end": "2361720"
  },
  {
    "text": "maybe duplication of data is okay maybe we can design a little bit more",
    "start": "2361720",
    "end": "2366760"
  },
  {
    "text": "for our access patterns right and and then like everybody sort of started being honest with themselves and",
    "start": "2366760",
    "end": "2371980"
  },
  {
    "text": "realized that we've been doing this anyway um how many of you store",
    "start": "2371980",
    "end": "2378880"
  },
  {
    "text": "so if you have a user user has an address",
    "start": "2378880",
    "end": "2384280"
  },
  {
    "text": "address has a state how many of you store that state in a in a related table",
    "start": "2384280",
    "end": "2391319"
  },
  {
    "text": "three three people okay how many of you actually refer to that related table or just put the three letter state code on",
    "start": "2393280",
    "end": "2400480"
  },
  {
    "text": "on the uh on the address itself",
    "start": "2400480",
    "end": "2404820"
  },
  {
    "text": "okay all right so there are a couple right which and and there is nothing wrong with that it's perfectly proper",
    "start": "2405579",
    "end": "2411880"
  },
  {
    "text": "relational design you're also making the database engine",
    "start": "2411880",
    "end": "2417040"
  },
  {
    "text": "work harder yeah so it's a choice right we can",
    "start": "2417040",
    "end": "2422440"
  },
  {
    "text": "design in a way that makes more sense we might not",
    "start": "2422440",
    "end": "2427660"
  },
  {
    "text": "for reasons but we can all right",
    "start": "2427660",
    "end": "2432940"
  },
  {
    "text": "avoid table for type right so DB context scaffold or sorry EF contact EF yeah",
    "start": "2432940",
    "end": "2440380"
  },
  {
    "text": "you have context scaffold gets us a table per type or a type per table for",
    "start": "2440380",
    "end": "2445420"
  },
  {
    "text": "you know depending on which way we're going um",
    "start": "2445420",
    "end": "2450660"
  },
  {
    "text": "you're kind of ignoring the reason for an orm which is to handle that the fact",
    "start": "2450660",
    "end": "2456460"
  },
  {
    "text": "that your database and your object model ought to look different",
    "start": "2456460",
    "end": "2461940"
  },
  {
    "text": "um is a much larger topic but you don't have to do one-to-one and probably shouldn't so like if you",
    "start": "2462160",
    "end": "2469300"
  },
  {
    "text": "have a lookup table you can do an enum um",
    "start": "2469300",
    "end": "2475180"
  },
  {
    "text": "using your databases tools um so that's things like views computed",
    "start": "2475180",
    "end": "2480880"
  },
  {
    "text": "columns uh the like this can help reduce processing help",
    "start": "2480880",
    "end": "2487180"
  },
  {
    "text": "things be more performant help smooth around some of the the rougher edges in a framework core this has gotten this is",
    "start": "2487180",
    "end": "2494079"
  },
  {
    "text": "one of those things that's gotten much much better you know I used to be like if you tried to push in a function in an",
    "start": "2494079",
    "end": "2500859"
  },
  {
    "text": "old school Entity framework and just go like I don't know how to turn that into SQL it's getting much better at that but",
    "start": "2500859",
    "end": "2508420"
  },
  {
    "text": "still want to be careful uh and then yeah code first tools I'll talk a little bit more about this in a",
    "start": "2508420",
    "end": "2514720"
  },
  {
    "text": "bit if you have a large project code first is probably not your friend",
    "start": "2514720",
    "end": "2522220"
  },
  {
    "text": "but I'll talk a little bit more about that okay",
    "start": "2522220",
    "end": "2526380"
  },
  {
    "text": "right so the first thing I want to talk about here is uh if you're using a lot",
    "start": "2528040",
    "end": "2533079"
  },
  {
    "text": "of includes and so this can take the form of we just need a whole bunch of",
    "start": "2533079",
    "end": "2538119"
  },
  {
    "text": "related data to do processing with or um the first place that I used this we had",
    "start": "2538119",
    "end": "2544780"
  },
  {
    "text": "I was building a system where we had to search across a bunch of insurance",
    "start": "2544780",
    "end": "2551460"
  },
  {
    "text": "policies and because we were forced into this very",
    "start": "2551460",
    "end": "2557320"
  },
  {
    "text": "nice relational schema in the database there were 16 tables involved",
    "start": "2557320",
    "end": "2564240"
  },
  {
    "text": "um and so rather than you know do that every time we just wrote ourselves a view and said okay",
    "start": "2564280",
    "end": "2569619"
  },
  {
    "text": "we'll just search on The View but we could index The View and it was very nice",
    "start": "2569619",
    "end": "2574960"
  },
  {
    "text": "um right so",
    "start": "2574960",
    "end": "2579660"
  },
  {
    "text": "post with post type so this is a great example right out of stack Overflow um",
    "start": "2580839",
    "end": "2586240"
  },
  {
    "text": "each post has a post type um and you probably want to return the text",
    "start": "2586240",
    "end": "2592300"
  },
  {
    "text": "post type right so we can define a view and uh Define a custom object and in our",
    "start": "2592300",
    "end": "2602020"
  },
  {
    "text": "model just call it this is our view",
    "start": "2602020",
    "end": "2607720"
  },
  {
    "text": "and then this the SQL against this just gets executed like it would against any normal table you can filter against it",
    "start": "2607720",
    "end": "2614760"
  },
  {
    "text": "depending on how you've constructed it you can insert and delete and update",
    "start": "2614760",
    "end": "2619780"
  },
  {
    "text": "um you probably shouldn't questions about this pretty",
    "start": "2619780",
    "end": "2625780"
  },
  {
    "text": "straightforward all right my second favorite topic from",
    "start": "2625780",
    "end": "2631420"
  },
  {
    "text": "database design is why you shouldn't use code first Okay so",
    "start": "2631420",
    "end": "2637780"
  },
  {
    "text": "I'll start this out by saying I'm not saying don't use it um code first is really good if you are",
    "start": "2637780",
    "end": "2644500"
  },
  {
    "text": "starting with a small project if you need to start very quickly if you don't",
    "start": "2644500",
    "end": "2649839"
  },
  {
    "text": "have access to somebody who's really really handy with SQL at the Top If",
    "start": "2649839",
    "end": "2655720"
  },
  {
    "text": "You're rapidly evolving your schema but you haven't hit production with your data yet all really good at those things",
    "start": "2655720",
    "end": "2663720"
  },
  {
    "text": "uh things that it's not good at data types",
    "start": "2664119",
    "end": "2670440"
  },
  {
    "text": "if you define an object in C sharp with string with a string",
    "start": "2670780",
    "end": "2677500"
  },
  {
    "text": "and you create a database table based on that object what's the type of that string in your database",
    "start": "2677500",
    "end": "2684540"
  },
  {
    "text": "yes got half and half envarkar Max",
    "start": "2687119",
    "end": "2693119"
  },
  {
    "text": "and people everywhere are cringing yeah so you just have to be careful right you",
    "start": "2693880",
    "end": "2699460"
  },
  {
    "text": "have to make sure that you're being deliberate about all your shoes and VAR there's nothing wrong with Unicode right",
    "start": "2699460",
    "end": "2706060"
  },
  {
    "text": "um this is a part of the world where Unicode probably makes sense on a fairly frequent basis",
    "start": "2706060",
    "end": "2712599"
  },
  {
    "text": "um where I live it doesn't um",
    "start": "2712599",
    "end": "2717300"
  },
  {
    "text": "most people speak American um",
    "start": "2717940",
    "end": "2724060"
  },
  {
    "text": "right um indexes again so your primary key is going to get an",
    "start": "2724060",
    "end": "2729520"
  },
  {
    "text": "index in SQL Server because that's what it does but you're not going to get any other any other indexes and you have to",
    "start": "2729520",
    "end": "2735579"
  },
  {
    "text": "make sure you define those yourself if you're using Code first",
    "start": "2735579",
    "end": "2741660"
  },
  {
    "text": "um and then the last two I should probably just combine on this slide basically if you're using anything other",
    "start": "2742300",
    "end": "2748300"
  },
  {
    "text": "than a table you have to write it yourself which",
    "start": "2748300",
    "end": "2754420"
  },
  {
    "text": "can be fine but if you're using Code first because you don't have anybody handy with SQL or because you're trying to get going",
    "start": "2754420",
    "end": "2760240"
  },
  {
    "text": "fast or you know something like that then you know that can kind of run you into a problem so if like if you need a",
    "start": "2760240",
    "end": "2765339"
  },
  {
    "text": "story procedure for something you need a function for something um",
    "start": "2765339",
    "end": "2770500"
  },
  {
    "text": "table partitioning um usually defined types",
    "start": "2770500",
    "end": "2775839"
  },
  {
    "text": "uh you have to write it yourself other than that use code first",
    "start": "2775839",
    "end": "2782980"
  },
  {
    "text": "or don't all right",
    "start": "2782980",
    "end": "2790380"
  },
  {
    "text": "so there are some things that Entity framework core and let's be honest most orms that generate their own SQL are",
    "start": "2790660",
    "end": "2797619"
  },
  {
    "text": "really bad at lots of joins uh",
    "start": "2797619",
    "end": "2803560"
  },
  {
    "text": "again EF core has gotten much much better than old school Entity Framework",
    "start": "2803560",
    "end": "2808740"
  },
  {
    "text": "uh but if you have a lot of joins it the generated SQL at the very least gets it",
    "start": "2808740",
    "end": "2814540"
  },
  {
    "text": "starts to look really ugly um even if it still performs okay",
    "start": "2814540",
    "end": "2820540"
  },
  {
    "text": "uh ETL yeah so I I said that I had a fun story so",
    "start": "2820540",
    "end": "2826359"
  },
  {
    "text": "you shouldn't use any framework to do ETL work in fact I would argue that you shouldn't",
    "start": "2826359",
    "end": "2831579"
  },
  {
    "text": "be using c-sharp at all um how many people in here like uh building",
    "start": "2831579",
    "end": "2838119"
  },
  {
    "text": "Legos really",
    "start": "2838119",
    "end": "2843359"
  },
  {
    "text": "all right well anyway rebrickable.com provides a data set of",
    "start": "2844079",
    "end": "2850240"
  },
  {
    "text": "all of the sets Parts Minifigures Etc um in individual CSV files",
    "start": "2850240",
    "end": "2857020"
  },
  {
    "text": "um and I got tired of using stack Overflow for my let me play around with things database and I was like I like us",
    "start": "2857020",
    "end": "2863560"
  },
  {
    "text": "I like Legos um and I was like oh individual csvs well",
    "start": "2863560",
    "end": "2868960"
  },
  {
    "text": "this is kind of a pain I need to get these into a relational database I bet I can do this pretty quickly with",
    "start": "2868960",
    "end": "2874780"
  },
  {
    "text": "uh little.net console app any framework yeah it'll be fine",
    "start": "2874780",
    "end": "2880000"
  },
  {
    "text": "wrote some read some generic statements so I didn't have to like copy and paste code everywhere set it to run",
    "start": "2880000",
    "end": "2887319"
  },
  {
    "text": "first six files which are all like a thousand lines long great fine easy fast",
    "start": "2887319",
    "end": "2893859"
  },
  {
    "text": "the million line file never finished",
    "start": "2893859",
    "end": "2899460"
  },
  {
    "text": "it kept timing out because like I would I'd be like oh it's running I'll go get a coffee",
    "start": "2899920",
    "end": "2905980"
  },
  {
    "text": "and I'd come back upstairs my computer had gone to sleep the connection with the database had broken and",
    "start": "2905980",
    "end": "2912040"
  },
  {
    "text": "yeah so um don't do ETL within any framework uh",
    "start": "2912040",
    "end": "2920200"
  },
  {
    "text": "it's just not worth it um I can talk about how I solved that problem well you can go see it in my",
    "start": "2920200",
    "end": "2926079"
  },
  {
    "text": "GitHub yeah anyway yeah ETL bad uh lastly",
    "start": "2926079",
    "end": "2931300"
  },
  {
    "text": "parameter issues if you've run into this you know it um so the parameter issue would be for",
    "start": "2931300",
    "end": "2937119"
  },
  {
    "text": "example uh any or sorry SQL Server tries to decide",
    "start": "2937119",
    "end": "2943359"
  },
  {
    "text": "what type your parameter is if you haven't specified it sometimes it guesses wrong",
    "start": "2943359",
    "end": "2950040"
  },
  {
    "text": "and if a guess is wrong guess what it's not going to use an index uh right so sometimes you have to write",
    "start": "2950319",
    "end": "2956740"
  },
  {
    "text": "some specific sequel to fix the problem you'll know that one if you run into it",
    "start": "2956740",
    "end": "2963040"
  },
  {
    "text": "um and lastly the thing that Entity framework core although the fine folks at Microsoft",
    "start": "2963040",
    "end": "2968319"
  },
  {
    "text": "have been doing a great job addressing this over the years it's never going to give you the best performance",
    "start": "2968319",
    "end": "2974800"
  },
  {
    "text": "if performance is that important you are going to be better off using either writing it yourself or using",
    "start": "2974800",
    "end": "2981760"
  },
  {
    "text": "dapper or something like that um basically if you if you need the best",
    "start": "2981760",
    "end": "2987880"
  },
  {
    "text": "performance you should write it yourself you lose performance with the convenience of Entity framework core",
    "start": "2987880",
    "end": "2995260"
  },
  {
    "text": "um yeah so its primary goal is reliable execution uh not necessarily fast",
    "start": "2995260",
    "end": "3003780"
  },
  {
    "text": "um SQL SQL it generates isn't necessarily going to be the most performant I did put a note that you",
    "start": "3003780",
    "end": "3011160"
  },
  {
    "text": "really need to be careful with Cosmos because of the consumption-based pricing model",
    "start": "3011160",
    "end": "3017480"
  },
  {
    "text": "um and then you know the overhead associated with change tracking um",
    "start": "3017640",
    "end": "3024480"
  },
  {
    "text": "so most of the time it's a benefit for us like we were willing to give up the",
    "start": "3024480",
    "end": "3031200"
  },
  {
    "text": "performance for the convenience uh but if you need the performance",
    "start": "3031200",
    "end": "3036240"
  },
  {
    "text": "you have to give out the convenience all right",
    "start": "3036240",
    "end": "3041660"
  },
  {
    "text": "so some guiding words um understand how the F core works and",
    "start": "3042180",
    "end": "3048960"
  },
  {
    "text": "doesn't work measure your performance so there are performance counters available beyond",
    "start": "3048960",
    "end": "3055079"
  },
  {
    "text": "what we've seen here with just the this is how long it took to execute the query and if you've done one and two then",
    "start": "3055079",
    "end": "3061500"
  },
  {
    "text": "number three has solved itself which is that you have a plan to fix it when it goes bump which it will because",
    "start": "3061500",
    "end": "3067740"
  },
  {
    "text": "it always does questions",
    "start": "3067740",
    "end": "3073338"
  },
  {
    "text": "I have three no okay one question yeah someone who is going first yeah",
    "start": "3075900",
    "end": "3083700"
  },
  {
    "text": "I'm now reaching scale are there any good resources",
    "start": "3083700",
    "end": "3088800"
  },
  {
    "text": "that they're going to fully Advanced me just for through no idea any good resources for",
    "start": "3088800",
    "end": "3094500"
  },
  {
    "text": "like taking that next step out of the scale yeah so well there's a couple things the",
    "start": "3094500",
    "end": "3102240"
  },
  {
    "text": "first would be a question of like have you had to rebase line yet had to rebase line with your migrations",
    "start": "3102240",
    "end": "3109079"
  },
  {
    "text": "yet re-baseline no okay",
    "start": "3109079",
    "end": "3114558"
  },
  {
    "text": "okay so you're not so far down that it's it's starting to become like a true management pain",
    "start": "3114599",
    "end": "3120119"
  },
  {
    "text": "okay so um",
    "start": "3120119",
    "end": "3124940"
  },
  {
    "text": "obviously the Microsoft docs are really good I assume you're going against SQL Server so Microsoft docs are really good",
    "start": "3125640",
    "end": "3132900"
  },
  {
    "text": "um if you're looking to educate yourself on like more specifically with t-sql and some of",
    "start": "3132900",
    "end": "3140400"
  },
  {
    "text": "the advanced features there um SQL Server Central has a Stairway series",
    "start": "3140400",
    "end": "3146460"
  },
  {
    "text": "um both for basic and advanced they kind of show like how you can solve certain",
    "start": "3146460",
    "end": "3151559"
  },
  {
    "text": "problems just using t-sql it can be more performant than than what you're getting",
    "start": "3151559",
    "end": "3158160"
  },
  {
    "text": "um and then the next step would be lifting your",
    "start": "3158160",
    "end": "3163740"
  },
  {
    "text": "database model out of your code and into something like Flyway or liquid base a",
    "start": "3163740",
    "end": "3169440"
  },
  {
    "text": "flyweather liquid base probably okay",
    "start": "3169440",
    "end": "3174680"
  },
  {
    "text": "foreign yes but not through in any framework",
    "start": "3182220",
    "end": "3188420"
  },
  {
    "text": "uh so you have to do that at the",
    "start": "3188640",
    "end": "3194280"
  },
  {
    "text": "at your logger setup if you're if you're in.net core yeah",
    "start": "3194280",
    "end": "3201140"
  },
  {
    "text": "yeah what version of VF are you on inflation",
    "start": "3210300",
    "end": "3215660"
  },
  {
    "text": "if you include something previously in the in the Army load it it goes",
    "start": "3215700",
    "end": "3223400"
  },
  {
    "text": "yeah turn on no tracking yeah um so that that's one where so the",
    "start": "3227880",
    "end": "3234420"
  },
  {
    "text": "question I gave a very glib answer I apologize so the question was",
    "start": "3234420",
    "end": "3239579"
  },
  {
    "text": "if I have included something previously then the next time I go to get the",
    "start": "3239579",
    "end": "3245700"
  },
  {
    "text": "parent entity any framework helpfully includes it again um and then this is kind of what we're",
    "start": "3245700",
    "end": "3252359"
  },
  {
    "text": "talking about convenience right it's assuming that it knows what you need um and sometimes it's going to be",
    "start": "3252359",
    "end": "3259020"
  },
  {
    "text": "helpful um and so in that case like if you do no tracking then that will solve that",
    "start": "3259020",
    "end": "3264059"
  },
  {
    "text": "problem um the other yeah that's pretty much it",
    "start": "3264059",
    "end": "3271440"
  },
  {
    "text": "um it's I'm gonna have to play around with that one a little bit I've not seen that",
    "start": "3271440",
    "end": "3276780"
  },
  {
    "text": "behavior myself so uh to play around with that in the back",
    "start": "3276780",
    "end": "3284000"
  },
  {
    "text": "and back then I was struggling with performance issues navigation properties",
    "start": "3294119",
    "end": "3301380"
  },
  {
    "text": "that improved in the last five to seven years yeah so uh",
    "start": "3301380",
    "end": "3308040"
  },
  {
    "text": "question was struggling performance in with navigation properties in any framework",
    "start": "3308040",
    "end": "3314160"
  },
  {
    "text": "we'll call it OG Entity framework has it improved so uh yes",
    "start": "3314160",
    "end": "3320099"
  },
  {
    "text": "um and sort of so Microsoft has done a couple of things",
    "start": "3320099",
    "end": "3325140"
  },
  {
    "text": "there one um the SQL that gets generated is far less bad looking and bad performance",
    "start": "3325140",
    "end": "3332880"
  },
  {
    "text": "than it was back then um but then the other change that was made for EF core five and six or what",
    "start": "3332880",
    "end": "3339599"
  },
  {
    "text": "was made in five and it's been carried through and six is that um",
    "start": "3339599",
    "end": "3344780"
  },
  {
    "text": "you no longer have either eager loading or lazy loading available in the core",
    "start": "3344780",
    "end": "3352220"
  },
  {
    "text": "package those are separate packages entirely and so the default behavior in",
    "start": "3352220",
    "end": "3358200"
  },
  {
    "text": "fact the only Behavior you have unless you pull in one of those proxy packages is the the dot include syntax and so",
    "start": "3358200",
    "end": "3365760"
  },
  {
    "text": "you'd be very explicit about what your rule what you're loading navigation wise and it won't although I",
    "start": "3365760",
    "end": "3373140"
  },
  {
    "text": "gentlemen here I'm gonna I'm gonna say won't but I have to do some investigation it won't load anything but",
    "start": "3373140",
    "end": "3379260"
  },
  {
    "text": "you haven't specified performance",
    "start": "3379260",
    "end": "3386579"
  },
  {
    "text": "and it got like a",
    "start": "3390780",
    "end": "3395300"
  },
  {
    "text": "trade manual map and I still wasn't able to get it",
    "start": "3398280",
    "end": "3403680"
  },
  {
    "text": "running as fast as Solomon we're going into doing video expenses",
    "start": "3403680",
    "end": "3412400"
  },
  {
    "text": "uh",
    "start": "3413579",
    "end": "3416540"
  },
  {
    "text": "so the question was um gemma's been doing some experiments with",
    "start": "3418980",
    "end": "3424079"
  },
  {
    "text": "performance both um like with manual mapping and doing",
    "start": "3424079",
    "end": "3429540"
  },
  {
    "text": "things manual execution and hasn't been able to match the performance that he sees through management studio",
    "start": "3429540",
    "end": "3436500"
  },
  {
    "text": "um so it's kind of apples to oranges",
    "start": "3436500",
    "end": "3443940"
  },
  {
    "text": "um in in a way because management Studios really just",
    "start": "3443940",
    "end": "3452220"
  },
  {
    "text": "like it's it's tuned very finely and and we're not um it's not doing any object creation uh",
    "start": "3452220",
    "end": "3459359"
  },
  {
    "text": "under the surface right so you're not incurring like no matter how no matter what if you're in C sharp and you're",
    "start": "3459359",
    "end": "3466260"
  },
  {
    "text": "mapping the results of a query into an object you you are going to incur overhead with creating objects",
    "start": "3466260",
    "end": "3473640"
  },
  {
    "text": "right and in fact you have some like you you have your DB",
    "start": "3473640",
    "end": "3480059"
  },
  {
    "text": "reader you have you know all these things that you're creating as part of the execution and management Studio goes",
    "start": "3480059",
    "end": "3485520"
  },
  {
    "text": "about it a different way um and so you're probably not gonna get",
    "start": "3485520",
    "end": "3492859"
  },
  {
    "text": "and so you're probably not going to be able to match the performance that you get through management Studio",
    "start": "3493619",
    "end": "3499559"
  },
  {
    "text": "but you also probably don't want to",
    "start": "3499559",
    "end": "3502819"
  },
  {
    "text": "um so a little bit it depends on your use case um my suggestion is that if performance",
    "start": "3514020",
    "end": "3520920"
  },
  {
    "text": "is the most important thing I would encapsulate the SQL in a stored procedure",
    "start": "3520920",
    "end": "3526700"
  },
  {
    "text": "because for a couple reasons one you're gonna be able to guarantee how",
    "start": "3527240",
    "end": "3533160"
  },
  {
    "text": "that SQL looks um and you're going to save a bit on uh",
    "start": "3533160",
    "end": "3539940"
  },
  {
    "text": "statement preparation after the first time it executes if you put it in a view every time you",
    "start": "3539940",
    "end": "3546359"
  },
  {
    "text": "query The View more or less SQL Server treats it as a new query whereas every time you hit the stored",
    "start": "3546359",
    "end": "3553680"
  },
  {
    "text": "procedure it's the same query and if you parameterize it Etc",
    "start": "3553680",
    "end": "3560040"
  },
  {
    "text": "obviously there's a there's a there's a solid it depends there but it in general",
    "start": "3560040",
    "end": "3567079"
  },
  {
    "text": "sure yeah so I um I really like Flyway so we have a we have a product that we",
    "start": "3574980",
    "end": "3581099"
  },
  {
    "text": "use that we build internally um that we sell to power companies to help",
    "start": "3581099",
    "end": "3587400"
  },
  {
    "text": "manage people getting solar panels on the roofs um and it started out using Code first",
    "start": "3587400",
    "end": "3594240"
  },
  {
    "text": "and about two Baseline two rebase Lightnings a year later we're finally moving it into",
    "start": "3594240",
    "end": "3601440"
  },
  {
    "text": "um final movie into Flyway um it's a Flyway liquid base kind of",
    "start": "3601440",
    "end": "3607020"
  },
  {
    "text": "work the same way so I would suggest one of those oh",
    "start": "3607020",
    "end": "3613160"
  },
  {
    "text": "yeah we are out of time uh I'm happy to take any more questions up here in the front",
    "start": "3613500",
    "end": "3619559"
  },
  {
    "text": "um if you think I did a great job a green if you think I did an okay job a green",
    "start": "3619559",
    "end": "3625640"
  },
  {
    "text": "all right thank you all very much I'm happy to answer any more questions up here",
    "start": "3627119",
    "end": "3632359"
  }
]