[
  {
    "start": "0",
    "end": "290000"
  },
  {
    "text": "so uh I think uh it's just about time to get started uh welcome uh thank you for",
    "start": "2600",
    "end": "9480"
  },
  {
    "text": "coming to this talk on Lambda calculus um from the slides I think maybe you get",
    "start": "9480",
    "end": "15360"
  },
  {
    "text": "the impression that this is about object orientation but we're in the sort of functional track room so this is going to be about functional programming and",
    "start": "15360",
    "end": "22519"
  },
  {
    "text": "there will be some um sort of uh real world functional FP and elixir talks",
    "start": "22519",
    "end": "29720"
  },
  {
    "text": "later dra on today that you should totally go and see uh this is less of a",
    "start": "29720",
    "end": "35000"
  },
  {
    "text": "real world thing uh it will be practical in that we will do a lot of uh live",
    "start": "35000",
    "end": "40920"
  },
  {
    "text": "coding uh but the subject matter is sort of less so",
    "start": "40920",
    "end": "47039"
  },
  {
    "text": "um yeah so what is this is this a talk this this is a talk uh just to clarify",
    "start": "47039",
    "end": "52680"
  },
  {
    "text": "uh uh this is the talk uh it's going to be me uh andard working at nrk the",
    "start": "52680",
    "end": "59480"
  },
  {
    "text": "public Pro Cas in Norway and yunas yeah I'm yunas from compas and we will be",
    "start": "59480",
    "end": "66119"
  },
  {
    "text": "talking we will be having sort of a dialogue it's not going to be the usual monologue that you get from uh a",
    "start": "66119",
    "end": "72600"
  },
  {
    "text": "conference talk usually and yeah is that enough for a disclaimer I think so so I I tried to",
    "start": "72600",
    "end": "79880"
  },
  {
    "text": "warn people uh on Twitter that this is going to be sort of an unusual talk",
    "start": "79880",
    "end": "85439"
  },
  {
    "text": "about an unusual topic um but seeing as you're here uh you must be the kind of",
    "start": "85439",
    "end": "93000"
  },
  {
    "text": "people who like unusual talks about unusual topics so that's good um we will be talking about the Lambda calculus and",
    "start": "93000",
    "end": "99280"
  },
  {
    "text": "the Lambda calculus is a theoretical model for computation that was uh I",
    "start": "99280",
    "end": "105360"
  },
  {
    "text": "think you can say discovered by Alonso Church in the 30s yeah so it's it's quite old",
    "start": "105360",
    "end": "112280"
  },
  {
    "text": "um and it is what is it it is a touring complete formal system um yeah and it",
    "start": "112280",
    "end": "118719"
  },
  {
    "text": "has uh function abstraction and function application right and it kind of",
    "start": "118719",
    "end": "124280"
  },
  {
    "text": "executes by having variables and substituting things so this is this is",
    "start": "124280",
    "end": "129920"
  },
  {
    "text": "at at this point quite abstract um but we will I think the main thing to",
    "start": "129920",
    "end": "135680"
  },
  {
    "text": "take a way is that we have functions yeah we have functions and and not so much else uh it's sort of so I think the",
    "start": "135680",
    "end": "141519"
  },
  {
    "text": "model of this talk is everything is a function uh I mean it really everything is a function all you have is function",
    "start": "141519",
    "end": "147080"
  },
  {
    "text": "it's all functions yeah yeah so in some of the kind of batteries included languages you have things like numbers",
    "start": "147080",
    "end": "154239"
  },
  {
    "text": "yeah yeah and this this is kind of a thing that you hear all the time about functional programming that it is so much math in functional programming uh",
    "start": "154239",
    "end": "161239"
  },
  {
    "text": "we don't even have numbers okay so if if you don't like math you don't make math",
    "start": "161239",
    "end": "166440"
  },
  {
    "text": "in in Lambda calculus and there is no math yeah so if you're afraid it's going to be math heavy it's a good idea to",
    "start": "166440",
    "end": "172640"
  },
  {
    "text": "like not Implement numbers then we can't do that much math yeah uh so so we sort",
    "start": "172640",
    "end": "178480"
  },
  {
    "text": "of if we want to if if we were um sort of math Geeks and wanted to invent",
    "start": "178480",
    "end": "183920"
  },
  {
    "text": "numbers um we would sort of have to use conventions for that right yeah so if",
    "start": "183920",
    "end": "191200"
  },
  {
    "text": "you were at Andrea's talk yesterday uh she mentioned the Y",
    "start": "191200",
    "end": "197200"
  },
  {
    "text": "functional programming matters paper uh there's a talk that John use and marish",
    "start": "197200",
    "end": "204599"
  },
  {
    "text": "shiran uh gives that that has the same name based on the paper yeah uh we stole",
    "start": "204599",
    "end": "210319"
  },
  {
    "text": "like one slide from that talk uh and this is kind of how you do numbers in",
    "start": "210319",
    "end": "216080"
  },
  {
    "text": "Lambda calculus this is like hll code I guess yeah because they're hll people right uh",
    "start": "216080",
    "end": "223680"
  },
  {
    "text": "so the idea is that a number is sort of in programming you use a number to do",
    "start": "223680",
    "end": "229360"
  },
  {
    "text": "something several times yeah so if you have a number in like Java what you want to use it for is like 4 I equals z until",
    "start": "229360",
    "end": "238720"
  },
  {
    "text": "under the i++ list right so there's really no distinction between say like",
    "start": "238720",
    "end": "244000"
  },
  {
    "text": "the number five and the concept of doing something five times yeah they're like mostly for looping yeah exactly yes uh",
    "start": "244000",
    "end": "252040"
  },
  {
    "text": "so the way and we're going to get back to this when we when we have some Lambda calculus to work with uh but the way",
    "start": "252040",
    "end": "259199"
  },
  {
    "text": "we're going to do numbers later is uh the number one is a function that does",
    "start": "259199",
    "end": "264400"
  },
  {
    "text": "something one time the number two is a function that does something two times and it's very convenient because if you wonder how large a number is uh you can",
    "start": "264400",
    "end": "271520"
  },
  {
    "text": "just count the fs and then you sort of then you know which number it is right yeah so which number is larger is easy",
    "start": "271520",
    "end": "278080"
  },
  {
    "text": "to tell because it's like the largest yeah so so the many of the number is built right in so you can just by",
    "start": "278080",
    "end": "284240"
  },
  {
    "text": "glancing at it you could tell which number is bigger than the other right yeah it's very intuitive um and uh in",
    "start": "284240",
    "end": "292960"
  },
  {
    "start": "290000",
    "end": "740000"
  },
  {
    "text": "some sets it's an abstractions that uh is very concrete because it's it is what",
    "start": "292960",
    "end": "298160"
  },
  {
    "text": "it is not nothing else really uh so introducing the language uh",
    "start": "298160",
    "end": "307440"
  },
  {
    "text": "this the language uh syntax yes yeah it has three things uh so not a bunch uh we",
    "start": "307440",
    "end": "315000"
  },
  {
    "text": "have variables we have function abstraction and we have function application so variables are just things",
    "start": "315000",
    "end": "321120"
  },
  {
    "text": "like f and x and y and right stuff like that but you use those to you bind them",
    "start": "321120",
    "end": "327280"
  },
  {
    "text": "to functions right yeah so they're usually bound by some parameter right yes and we have function obstructions",
    "start": "327280",
    "end": "335800"
  },
  {
    "text": "this is like in F you write fun x and then some expression yeah so we you",
    "start": "335800",
    "end": "341120"
  },
  {
    "text": "introduce a function we use a DOT instead of an iow and things like that uh and application is like in F or H or",
    "start": "341120",
    "end": "348160"
  },
  {
    "text": "whatever uh you just put a white space between the function and the argument right and and and the with the function",
    "start": "348160",
    "end": "355080"
  },
  {
    "text": "abstraction so the x is sort of the the one parameter for the function so all functions have one parameter and and the",
    "start": "355080",
    "end": "361720"
  },
  {
    "text": "U is the function body right yeah so typically get the same things to with",
    "start": "361720",
    "end": "366759"
  },
  {
    "text": "like CED functions in order to take several arguments yeah MH yeah so not",
    "start": "366759",
    "end": "373720"
  },
  {
    "text": "going to spend a lot of time on the trees but um yeah we well sort of to to",
    "start": "373720",
    "end": "380000"
  },
  {
    "text": "to have a working evaluator for Lambda calculus we will be using a tree representation like yeah so every u in",
    "start": "380000",
    "end": "386319"
  },
  {
    "text": "this syntax can be like an expression so it's a cury data structure so we can draw it like a tree yeah so this is a",
    "start": "386319",
    "end": "392880"
  },
  {
    "text": "small tree this is a somewhat larger tree uh so this expression corresponds",
    "start": "392880",
    "end": "398240"
  },
  {
    "text": "to this tree yeah uh and then you have an uh sort of big tree yeah uh so like",
    "start": "398240",
    "end": "405599"
  },
  {
    "text": "this larger expression becomes this larger tree yeah and then we have the same expression uh but we",
    "start": "405599",
    "end": "414319"
  },
  {
    "text": "write um so it's different notation we write the full Lambda expression on each",
    "start": "414319",
    "end": "420879"
  },
  {
    "text": "node instead of those abstract things which is mostly to get it large enough enough so that too can live there",
    "start": "420879",
    "end": "428400"
  },
  {
    "text": "yeah um okay so now we seen pretty much all the language because we' seen the syntax but we have yes so we have enough",
    "start": "428639",
    "end": "435800"
  },
  {
    "text": "to like build an expression yeah uh but we I guess we're wondering like how does",
    "start": "435800",
    "end": "442680"
  },
  {
    "text": "it run yeah so this is this is sort of the semantics I think yeah so this is like how a program execut",
    "start": "442680",
    "end": "450080"
  },
  {
    "text": "yeah uh if you have something like this uh then this",
    "start": "450080",
    "end": "456720"
  },
  {
    "text": "happens which is which is quite intuitive uh so here's a",
    "start": "456800",
    "end": "462360"
  },
  {
    "text": "Lambda uh and some expression so it's a function application where the function is a Lambda and the argument is whatever",
    "start": "462360",
    "end": "470319"
  },
  {
    "text": "yeah uh and what to do this notation means that you substitute this other",
    "start": "470319",
    "end": "476199"
  },
  {
    "text": "expression for X in U1 right so if there is are any x's in U1 you're going to",
    "start": "476199",
    "end": "481520"
  },
  {
    "text": "replace those with U2 right yeah M uh yeah so you say that down there I",
    "start": "481520",
    "end": "489759"
  },
  {
    "text": "think yeah so we kind of uh remove this part replace this x uh and this is the",
    "start": "489759",
    "end": "496440"
  },
  {
    "text": "argument so this goes where the X was we end up with this okay uh so we're not if",
    "start": "496440",
    "end": "503759"
  },
  {
    "text": "you have implemented the toy language yourself you might have used something like a scope or environment and then you",
    "start": "503759",
    "end": "509680"
  },
  {
    "text": "look up so when you call a function you kind of add the binding and that says",
    "start": "509680",
    "end": "514839"
  },
  {
    "text": "that X is two within this function and then when you get an X you look it up in an environment uh we're not doing this",
    "start": "514839",
    "end": "520919"
  },
  {
    "text": "because we want to do it more like you would do it by hand for some reason yeah uh so when you get the function",
    "start": "520919",
    "end": "527600"
  },
  {
    "text": "application you do the substitution then and you get like a new expression back yeah so so in the case the the X just",
    "start": "527600",
    "end": "534560"
  },
  {
    "text": "disappears it's not going you're not going to use the X to you don't keep track an environment so that's kind of",
    "start": "534560",
    "end": "539760"
  },
  {
    "text": "different than how you probably would do it if you made your own lisp or something like that uh and it's not completely un like",
    "start": "539760",
    "end": "548279"
  },
  {
    "text": "how we learned that functions were in like school so if FX equals plus X Plus",
    "start": "548279",
    "end": "556360"
  },
  {
    "text": "X then F of 2 equals 2 + 2 yeah because you just replace the X's with with a",
    "start": "556360",
    "end": "561680"
  },
  {
    "text": "number two right yeah so I think that's the like the essence of Lambda calculus",
    "start": "561680",
    "end": "567279"
  },
  {
    "text": "so now now you know you need all you need to in some sense yeah and then you get like then you do that over and",
    "start": "567279",
    "end": "574560"
  },
  {
    "text": "over again until you don't find anything you can reduce further right so this is sort of simulating doing it by hand in",
    "start": "574560",
    "end": "580880"
  },
  {
    "text": "some sense yeah which is all we're going to automate anyway but so you look look",
    "start": "580880",
    "end": "586720"
  },
  {
    "text": "for Lambda here uh with an argument and then you do the substitution and you",
    "start": "586720",
    "end": "592200"
  },
  {
    "text": "look for Lambda with an argument in the result and then they do the substitution and so on uh if we",
    "start": "592200",
    "end": "601000"
  },
  {
    "text": "just like print the results like every intermediate result we get something like this right uh and we're going to",
    "start": "601000",
    "end": "608920"
  },
  {
    "text": "yeah so if you live coded uh a Lambda calculus evaluator and and had it had it",
    "start": "608920",
    "end": "615000"
  },
  {
    "text": "running it might do something like this yeah so we want to get something like this back from a running program yeah uh",
    "start": "615000",
    "end": "621519"
  },
  {
    "text": "so we're about try to build the program so we've done program design which is kind of rare in the industry",
    "start": "621519",
    "end": "629720"
  },
  {
    "text": "uh so we want to start with a string parse it into something like this uh and",
    "start": "629880",
    "end": "636160"
  },
  {
    "text": "then reduce it uh and reduce it again and we want to",
    "start": "636160",
    "end": "641240"
  },
  {
    "text": "print the output right uh which we have to kind of unpar uh in order to get yeah",
    "start": "641240",
    "end": "647079"
  },
  {
    "text": "which is going from the tree back to string representation right Y and we're going to do this I think um using two",
    "start": "647079",
    "end": "655320"
  },
  {
    "text": "teams of developers uh the one team uh is going to be me I'm going to do parsing and Yas will be doing the UNP",
    "start": "655320",
    "end": "661839"
  },
  {
    "text": "parsing and the reduction yeah uh so",
    "start": "661839",
    "end": "667000"
  },
  {
    "text": "yeah first thing to do is to make a type yeah should I do this or yeah you can make a",
    "start": "667000",
    "end": "673120"
  },
  {
    "text": "type I don't know how to use max can you see this is this large enough mhm",
    "start": "673120",
    "end": "680240"
  },
  {
    "text": "good uh it's Alt Enter to do stuff yeah",
    "start": "680240",
    "end": "688600"
  },
  {
    "text": "yeah so we want to have a type for",
    "start": "689720",
    "end": "695360"
  },
  {
    "text": "expressions and like we said it could be a variable and variable is like a string I",
    "start": "695360",
    "end": "703880"
  },
  {
    "text": "still don't know how to do the bar thing on the Mac uh it can be an",
    "start": "703880",
    "end": "711360"
  },
  {
    "text": "application uh which has a function and an argument",
    "start": "711519",
    "end": "720519"
  },
  {
    "text": "or it can be a Lambda which has a parameter is the thing yeah and",
    "start": "720920",
    "end": "730680"
  },
  {
    "text": "some expression right that's going to be the the body of the Lambda expression",
    "start": "730680",
    "end": "737040"
  },
  {
    "text": "yeah right so now we have this recursive data type yep",
    "start": "737040",
    "end": "743720"
  },
  {
    "start": "740000",
    "end": "845000"
  },
  {
    "text": "and let's see if you want to do the parsing bit yeah I can do the parsing bit uh so we're going to have to uh uh",
    "start": "743720",
    "end": "752120"
  },
  {
    "text": "do sort of a recursive parsing then uh of the that correspond to each of these",
    "start": "752120",
    "end": "759519"
  },
  {
    "text": "things right yeah um and variables are going to be quite",
    "start": "759519",
    "end": "766279"
  },
  {
    "text": "easy because well it's going to be some sort of identifier uh we can uh can have",
    "start": "766279",
    "end": "772920"
  },
  {
    "text": "some arbitrary rules for what a legal identifier is we probably don't want Whit space in it since that means function application otherwise we so we",
    "start": "772920",
    "end": "779839"
  },
  {
    "text": "we can we'll work with that um and then we need some way of parsing the lambdas",
    "start": "779839",
    "end": "785160"
  },
  {
    "text": "or the function abstractions uh those are going to look like uh Lambda symbol",
    "start": "785160",
    "end": "790920"
  },
  {
    "text": "and then uh some identifier and then a DOT and then some arbitrary Lambda",
    "start": "790920",
    "end": "797639"
  },
  {
    "text": "expression uh we're going to need to be able to put things in between parentheses and this is because if you",
    "start": "797639",
    "end": "803959"
  },
  {
    "text": "have sort of sequence of Lambda Expressions uh you might want to control uh sort of the application order right",
    "start": "803959",
    "end": "812519"
  },
  {
    "text": "yeah so if you look at the three at the bottom if you don't use parenthesis then the first application will be like the",
    "start": "812519",
    "end": "818399"
  },
  {
    "text": "two leftmost uh expression the second will be the result of that application",
    "start": "818399",
    "end": "823959"
  },
  {
    "text": "and the yeah because it's going to be similar to sort of part partial application of a cured function right so",
    "start": "823959",
    "end": "830920"
  },
  {
    "text": "so it's going to apply this if you would like like the second expression to be",
    "start": "830920",
    "end": "835959"
  },
  {
    "text": "applied to the third expression you would have to use parenthesis around you would include parenthesis around here",
    "start": "835959",
    "end": "844240"
  },
  {
    "text": "right and yeah that's it just scroll down I can scroll down it's a secret",
    "start": "844240",
    "end": "850639"
  },
  {
    "start": "845000",
    "end": "1023000"
  },
  {
    "text": "slide yeah so so to help us do this uh we will be using uh useful uh Library",
    "start": "850639",
    "end": "856680"
  },
  {
    "text": "called f parsec which is a parser combinator Library uh yeah and it really",
    "start": "856680",
    "end": "862320"
  },
  {
    "text": "does most most of the work so uh it's going to be mostly on liners for us which is good",
    "start": "862320",
    "end": "869399"
  },
  {
    "text": "uh right but I'm going to start uh by creating a small helper function it's",
    "start": "869399",
    "end": "875399"
  },
  {
    "text": "going to call it a parse and it's going to take some f Parc parser and a string",
    "start": "875399",
    "end": "880759"
  },
  {
    "text": "and apply the parser to the string and um the reason why I'm doing this is um",
    "start": "880759",
    "end": "888040"
  },
  {
    "text": "you have uh you have a built-in uh function that comes from F Parc called run uh that's going to return either a",
    "start": "888040",
    "end": "896399"
  },
  {
    "text": "success result uh or failure",
    "start": "896399",
    "end": "904600"
  },
  {
    "text": "result so that's a good thing but you want a bad thing instead right yeah I I want uh because we're doing live coding",
    "start": "905279",
    "end": "911759"
  },
  {
    "text": "I want the bad thing instead yeah uh so so you want some exception instead of I'm just going if if I have a failure",
    "start": "911759",
    "end": "917560"
  },
  {
    "text": "I'm just going to throw an exception also I don't care about how far I got uh in parsing the string and stuff like",
    "start": "917560",
    "end": "923320"
  },
  {
    "text": "that so I'm just going to throw those things away I just want the successful or the failure things blowing up",
    "start": "923320",
    "end": "930959"
  },
  {
    "text": "so did you yeah I think now we have this helper function uh which means we can",
    "start": "931199",
    "end": "937639"
  },
  {
    "text": "actually start uh doing things using F parsec so I can do things like uh F Parc",
    "start": "937639",
    "end": "945240"
  },
  {
    "text": "comes with a bunch of built-in things uh built-in sort of primitive uh parsers",
    "start": "945240",
    "end": "950800"
  },
  {
    "text": "that you can combine to create more powerful pares and that's what we're going to do in this talk so one of those",
    "start": "950800",
    "end": "957440"
  },
  {
    "text": "uh is going is called lower and what lower does is it parses exactly one",
    "start": "957440",
    "end": "962560"
  },
  {
    "text": "lower case character so if I give it an string like I don't know I don't know",
    "start": "962560",
    "end": "969519"
  },
  {
    "text": "ndz uh it's going to successfully parse the character n out of that string now",
    "start": "969519",
    "end": "974639"
  },
  {
    "text": "of course if I give it an uppercase n it's going to complain because it wasn't the lowercase thing right yeah um I can",
    "start": "974639",
    "end": "983480"
  },
  {
    "text": "easily combine uh or compose parsers um",
    "start": "983480",
    "end": "989560"
  },
  {
    "text": "in F parsec so this is an F parsec uh operator that let me uh try either a",
    "start": "989560",
    "end": "994880"
  },
  {
    "text": "lowercase thing or an uppercase thing so now hopefully this is going to be",
    "start": "994880",
    "end": "1000120"
  },
  {
    "text": "successful and I can sort of iteratively uh create more powerful",
    "start": "1000120",
    "end": "1006759"
  },
  {
    "text": "part want like a bunch of those letters yeah so now I I want at least one of those and now I get a a list of",
    "start": "1006759",
    "end": "1014040"
  },
  {
    "text": "characters back of course if I do something like this uh it's not going to parse the exclamation marks right",
    "start": "1014040",
    "end": "1021519"
  },
  {
    "text": "yeah and now I'm practically done with my uh variable Parts here but uh let's",
    "start": "1021519",
    "end": "1026880"
  },
  {
    "start": "1023000",
    "end": "1527000"
  },
  {
    "text": "see um yeah I'm going to need a recursive pars for expression and this is um this is sort of a little bit of",
    "start": "1026880",
    "end": "1033798"
  },
  {
    "text": "mechanics uh the thing is I'm going to need to re refer to a parser before it's",
    "start": "1033799",
    "end": "1039120"
  },
  {
    "text": "completely built so I'm going to uh use something called uh create partial",
    "start": "1039120",
    "end": "1045199"
  },
  {
    "text": "forwarded to ref yeah so this is kind of Machinery we need because we're dealing with a recurs language yeah and we also",
    "start": "1045199",
    "end": "1052600"
  },
  {
    "text": "want to kind of build up the partial as we go so the X partial will be kind of more future complete the further long we",
    "start": "1052600",
    "end": "1059640"
  },
  {
    "text": "get yeah so we will be continuously uh sort of overwriting uh what's in the ref",
    "start": "1059640",
    "end": "1065520"
  },
  {
    "text": "cell uh for expression partial ref uh and that's going to sort of let us yeah",
    "start": "1065520",
    "end": "1072360"
  },
  {
    "text": "expand so to begin with it will'll like par variables and then later on we we par an expression right now so how now I",
    "start": "1072360",
    "end": "1079080"
  },
  {
    "text": "have sort of here's my unit test um uh what I want to accomplish is I want to",
    "start": "1079080",
    "end": "1084600"
  },
  {
    "text": "be able to apply the expression parser to the string Fu and get oh this must be a variable Fu uh so I'm going",
    "start": "1084600",
    "end": "1093280"
  },
  {
    "text": "to first uh I'm going to create a little helper function uh which is really",
    "start": "1093280",
    "end": "1100480"
  },
  {
    "text": "parsing just the string itself and then I'm going to wrap it in this V thing afterwards um let's see I I almost had",
    "start": "1100480",
    "end": "1109320"
  },
  {
    "text": "it actually I think I can yeah you have a list of characters I have a list of character string it's good yeah",
    "start": "1109320",
    "end": "1117760"
  },
  {
    "text": "um so I need to apply some function to transform it uh from the list of",
    "start": "1117760",
    "end": "1123080"
  },
  {
    "text": "characters into a string so I'm I'm going to uh use another F Parc operator",
    "start": "1123080",
    "end": "1129360"
  },
  {
    "text": "that allows me to sort of transform uh one kind of parser uh into another kind of parer um yeah so this doesn't consume",
    "start": "1129360",
    "end": "1136840"
  },
  {
    "text": "any more input it just does something with result yeah so I'm well actually I",
    "start": "1136840",
    "end": "1141919"
  },
  {
    "text": "can just I think what I'm going to need to do is I'm going to create an array this a little bit cumbersome actually to",
    "start": "1141919",
    "end": "1148039"
  },
  {
    "text": "create a string from a list of characters uh so I'm going to create an array and then I'm going to pass that to",
    "start": "1148039",
    "end": "1153320"
  },
  {
    "text": "the string Constructor and then I'm sort of done need the sorry right I had one",
    "start": "1153320",
    "end": "1159720"
  },
  {
    "text": "too many here I think well you know something like this",
    "start": "1159720",
    "end": "1167400"
  },
  {
    "text": "um and now now I'm sort of ready to create my VAR Parts here so now you just need to turn a",
    "start": "1167400",
    "end": "1174280"
  },
  {
    "text": "string into like a VAR and basically I'm just going to do the same thing once more uh",
    "start": "1174280",
    "end": "1180880"
  },
  {
    "text": "which is this right I'm just going to pass it into the war um and now I can I think do",
    "start": "1180880",
    "end": "1189320"
  },
  {
    "text": "expart",
    "start": "1189320",
    "end": "1192320"
  },
  {
    "text": "ref uh but it's going to be this one",
    "start": "1195280",
    "end": "1201640"
  },
  {
    "text": "right okay so now I have my first iteration of the expression parser which just handles these uh VAR",
    "start": "1202159",
    "end": "1209120"
  },
  {
    "text": "things and as you can see uh the expected output is this um and I'm just",
    "start": "1209120",
    "end": "1217360"
  },
  {
    "text": "sending it uh to be evaluated and I get bull back true so this must have worked",
    "start": "1217360",
    "end": "1222919"
  },
  {
    "text": "right cool uh right so a little bit more complicated uh but not much is paring",
    "start": "1222919",
    "end": "1229840"
  },
  {
    "text": "Lambda Expressions the function U abstractions okay so with this part",
    "start": "1229840",
    "end": "1235400"
  },
  {
    "text": "parti begins to get like recursive because the Lambda expression holds an expression as its body yeah so the body",
    "start": "1235400",
    "end": "1241400"
  },
  {
    "text": "could be an arbitrary expression again so now now it's getting more interesting and so this is when it start to need",
    "start": "1241400",
    "end": "1247679"
  },
  {
    "text": "kind of the expar ref machinery and those things yeah exactly um so I'm",
    "start": "1247679",
    "end": "1252720"
  },
  {
    "text": "going to actually split it in two parts um because I'm I'm going to parse oh",
    "start": "1252720",
    "end": "1260240"
  },
  {
    "text": "uh I'm going to parse this thing first the Lambda and the identifier and then I'm going to parse the dot and the",
    "start": "1260240",
    "end": "1266960"
  },
  {
    "text": "expression body so I'm going to create a helper parser if you will um using another one of um f Parx",
    "start": "1266960",
    "end": "1275679"
  },
  {
    "text": "built-in uh parsers it takes the character that you want to parse uh and",
    "start": "1275679",
    "end": "1280840"
  },
  {
    "text": "then it creates a parser that parses looks for that character right so uh this parser is going to accept exactly",
    "start": "1280840",
    "end": "1288600"
  },
  {
    "text": "the Lambda character and nothing else yeah in cuz in this expression we need like the Lambda and the",
    "start": "1288600",
    "end": "1294520"
  },
  {
    "text": "dot yeah it's nice to have uh and I'm going",
    "start": "1294520",
    "end": "1300080"
  },
  {
    "text": "to use another one of of Park's uh means of combination uh",
    "start": "1300080",
    "end": "1306039"
  },
  {
    "text": "which in this case well now this VAR name parser uh is useful again because I",
    "start": "1306039",
    "end": "1312120"
  },
  {
    "text": "want to parse another string right and this what this thing does is",
    "start": "1312120",
    "end": "1317520"
  },
  {
    "text": "strange thing with the DOT is it combines the two parsers but you only keep the result from applying the latter",
    "start": "1317520",
    "end": "1323520"
  },
  {
    "text": "one right the one right so because the dot is on the right side you keep the right yes so if I put it over here I",
    "start": "1323520",
    "end": "1330960"
  },
  {
    "text": "would have kept uh the Lambda right but I want to keep the variable name",
    "start": "1330960",
    "end": "1337559"
  },
  {
    "text": "instead and similarly uh I want to parse the",
    "start": "1337559",
    "end": "1343520"
  },
  {
    "text": "dot and now it get more interesting because here's the sort of the recursive thing right I want to parse an arbitrary",
    "start": "1343520",
    "end": "1350880"
  },
  {
    "text": "expression and now I want to combine these in a way that um gives me both the",
    "start": "1350880",
    "end": "1356559"
  },
  {
    "text": "results not just one to the right or one to the left and I can use a function called pipe two takes two par series",
    "start": "1356559",
    "end": "1363120"
  },
  {
    "text": "applies them and then gives me uh yes I know you're doing a function",
    "start": "1363120",
    "end": "1368640"
  },
  {
    "text": "that takes two arguments yeah a function that takes two arguments one from the sort of the output of applying this",
    "start": "1368640",
    "end": "1374360"
  },
  {
    "text": "parser and the output of applying that part both of those succeed yeah so if",
    "start": "1374360",
    "end": "1379520"
  },
  {
    "text": "both of those succeed I'm going to get a name and a body and I can",
    "start": "1379520",
    "end": "1385200"
  },
  {
    "text": "create a Lambda right and that's pretty much it now I",
    "start": "1385320",
    "end": "1391000"
  },
  {
    "text": "can update my expression parser and says okay it's going to be now either uh a Lambda",
    "start": "1391000",
    "end": "1399720"
  },
  {
    "text": "expression or a variable expression right yeah so",
    "start": "1399720",
    "end": "1404960"
  },
  {
    "text": "if I do something like this I have a more powerful parser that is",
    "start": "1404960",
    "end": "1411240"
  },
  {
    "text": "capable of parsing this also and and this one hopefully the tests are green good yes so we have two green",
    "start": "1411240",
    "end": "1418600"
  },
  {
    "text": "tests uh yeah so a little bit this is this with the parenthesis is really",
    "start": "1418600",
    "end": "1424679"
  },
  {
    "text": "preparation for the application uh but well I'm going to do it sort of bottom up with the parenes first yeah sure uh",
    "start": "1424679",
    "end": "1432240"
  },
  {
    "text": "so I'm going to need a parenthesis parer uh and again again if parseek helps me I",
    "start": "1432240",
    "end": "1440120"
  },
  {
    "text": "think you I I think I can just write the code and you'll understand what it does so I'm I'm going to try",
    "start": "1440120",
    "end": "1446159"
  },
  {
    "text": "that so let's",
    "start": "1446159",
    "end": "1451799"
  },
  {
    "text": "see now what does this do so between is uh another F Parc function and it says",
    "start": "1452039",
    "end": "1459120"
  },
  {
    "text": "I'm going to apply this parser in between these two other parsers and I'm going to keep the result from the thing",
    "start": "1459120",
    "end": "1465080"
  },
  {
    "text": "that's in between so I don't care about uh sort of the output of parsing the open parenthesis yeah you only need the",
    "start": "1465080",
    "end": "1471600"
  },
  {
    "text": "parsing to succeed and carry on right and this is well this is now parenthesis par here uh getting a little bit",
    "start": "1471600",
    "end": "1478919"
  },
  {
    "text": "cumbersome to write this let's see I think I'm now I'm sort of done with",
    "start": "1478919",
    "end": "1484799"
  },
  {
    "text": "everything except the application so I'm going to combine",
    "start": "1484799",
    "end": "1491880"
  },
  {
    "text": "those uh let's see into a single par which is everything but the application",
    "start": "1493399",
    "end": "1499840"
  },
  {
    "text": "and I can update my expression parser to be this new parts",
    "start": "1499840",
    "end": "1508760"
  },
  {
    "text": "here and well now I can parse things",
    "start": "1509799",
    "end": "1514919"
  },
  {
    "text": "that has uh parenthesis around them and like I mean I can I can have a lot of parenthesis and it's still going to sort",
    "start": "1514919",
    "end": "1521360"
  },
  {
    "text": "of work nicely so doesn't care about the parenthesis",
    "start": "1521360",
    "end": "1526559"
  },
  {
    "text": "nice uh right right uh so uh now now",
    "start": "1526559",
    "end": "1533279"
  },
  {
    "start": "1527000",
    "end": "2212000"
  },
  {
    "text": "sort of the tricky part which it turns out not to be so tricky if we have uh if we have like f yeah exactly uh and if we",
    "start": "1533279",
    "end": "1542000"
  },
  {
    "text": "realize that uh well we sort of need to think uh about if you like command tap",
    "start": "1542000",
    "end": "1550279"
  },
  {
    "text": "back to the slides yeah we have like a plan for this yeah we have a we have a",
    "start": "1550279",
    "end": "1555679"
  },
  {
    "text": "cunning plan for this for doing this correctly so we're going to need to do it sort of left associatively um and you",
    "start": "1555679",
    "end": "1562559"
  },
  {
    "text": "know parseek knows that sometimes you need to do things left",
    "start": "1562559",
    "end": "1568640"
  },
  {
    "text": "associatively so see there is par like the entire thing so that we end up with",
    "start": "1568640",
    "end": "1574600"
  },
  {
    "text": "a list of expressions and then we want to combine them into a tree of applications yeah so we have a sequence",
    "start": "1574600",
    "end": "1582399"
  },
  {
    "text": "of Expressions one to n expressions and uh if it is more than one then you're",
    "start": "1582399",
    "end": "1588960"
  },
  {
    "text": "sort of going to need to combine them uh and if it's just one well it's just going to be the result of yeah doing",
    "start": "1588960",
    "end": "1594279"
  },
  {
    "text": "exactly so if there's a function that just does that first uh that would be nice yeah so we have this something",
    "start": "1594279",
    "end": "1600320"
  },
  {
    "text": "that's not an application and I'm going to combine that um this is going to be the sort of",
    "start": "1600320",
    "end": "1606919"
  },
  {
    "text": "the most opaque I think code in the presentation so it's don't worry if it's",
    "start": "1606919",
    "end": "1612559"
  },
  {
    "text": "a little bit what's really going on here um but what is is going to do if it sees",
    "start": "1612559",
    "end": "1620000"
  },
  {
    "text": "and successfully pares two not applications uh separated by whitespace",
    "start": "1620000",
    "end": "1625559"
  },
  {
    "text": "then it's going to combine it right yeah so this par here with a p car yeah uh",
    "start": "1625559",
    "end": "1632960"
  },
  {
    "text": "you're going to transform the result into some the function that is going to combine two applications yes now two",
    "start": "1632960",
    "end": "1641159"
  },
  {
    "text": "expressions into an application yeah uh so I'm going to skip I think this is uh the whites space thing uh I don't care",
    "start": "1641159",
    "end": "1648480"
  },
  {
    "text": "about the the whes space and get like a wh space as yeah so that that's not terribly useful uh we're not going to",
    "start": "1648480",
    "end": "1654240"
  },
  {
    "text": "use the wh space for anything but we will use um the not application that is",
    "start": "1654240",
    "end": "1660480"
  },
  {
    "text": "meant to be applied yeah so there's an expression to the left and an expression to the right of the white space and",
    "start": "1660480",
    "end": "1666440"
  },
  {
    "text": "those are passed in as FNA yeah and you can make an application of them yes and",
    "start": "1666440",
    "end": "1672360"
  },
  {
    "text": "I need another parenthesis and now I have my finished app Parts here uh and you have your finished part",
    "start": "1672360",
    "end": "1680480"
  },
  {
    "text": "pretty much I guess I I think pretty much uh because um I can just well if",
    "start": "1680480",
    "end": "1686600"
  },
  {
    "text": "there is if the sequence just has one element uh it's just going to be then it's not going to be an application",
    "start": "1686600",
    "end": "1692320"
  },
  {
    "text": "obviously uh so it's just going to be the same as applying the not application Parts here so I can just say that my",
    "start": "1692320",
    "end": "1699600"
  },
  {
    "text": "whole expression Parts is going to be this app the app parer includes the not",
    "start": "1699600",
    "end": "1705080"
  },
  {
    "text": "app par in a way yeah yeah um um okay so this I",
    "start": "1705080",
    "end": "1713080"
  },
  {
    "text": "think sort of completes oh let's see if I can",
    "start": "1713080",
    "end": "1719000"
  },
  {
    "text": "actually uh just for fun well you",
    "start": "1719000",
    "end": "1726799"
  },
  {
    "text": "know if I can do something like this also yeah and now you can obviously see",
    "start": "1726799",
    "end": "1734279"
  },
  {
    "text": "that uh this now applies well this is the application of uh yeah so it's",
    "start": "1734279",
    "end": "1740880"
  },
  {
    "text": "obvious to see that three is tilting the other way from from that string yeah this is",
    "start": "1740880",
    "end": "1749039"
  },
  {
    "text": "obvious um now for a more complicated example",
    "start": "1749039",
    "end": "1754320"
  },
  {
    "text": "um we're going to see if this also evaluates true now it must be correct",
    "start": "1754320",
    "end": "1759519"
  },
  {
    "text": "this was like the large tree expression where we showed in the slides and this is the to yeah this is the three where",
    "start": "1759519",
    "end": "1765919"
  },
  {
    "text": "tot lives and you can see that it's like lines so even in this notation it's yeah",
    "start": "1765919",
    "end": "1772080"
  },
  {
    "text": "possibly large enough okay so this completes the parer",
    "start": "1772080",
    "end": "1777200"
  },
  {
    "text": "uh so now we have some other things to do so we have like another slide um so",
    "start": "1777200",
    "end": "1785519"
  },
  {
    "text": "we do parsing we want to turn it back to a string uh which I think is called on parsing uh and we have like a plan for",
    "start": "1785519",
    "end": "1791880"
  },
  {
    "text": "doing that it's like doing Parts but the opposite so it's undoing all the hard work that we just did yeah or or or the",
    "start": "1791880",
    "end": "1798679"
  },
  {
    "text": "hard work that F par just did I think yeah pretty much so oh we've cheated apparently uh oh we",
    "start": "1798679",
    "end": "1808519"
  },
  {
    "text": "have the yeah so this this air wasn't supposed to be in there uh I was",
    "start": "1808519",
    "end": "1814559"
  },
  {
    "text": "supposed to write it now so we have a parenthesis function uh that adds",
    "start": "1814559",
    "end": "1819760"
  },
  {
    "text": "parenthesis around something yes and we can test it and we should get like two",
    "start": "1819760",
    "end": "1825640"
  },
  {
    "text": "smilees back uh which is nice um we're going to need that in",
    "start": "1825640",
    "end": "1832279"
  },
  {
    "text": "order to end par so basically we have all the cheats",
    "start": "1832279",
    "end": "1837600"
  },
  {
    "text": "yeah someone hasn't like cleaned up all the this could be me you know it's probably you since you did all",
    "start": "1837600",
    "end": "1845200"
  },
  {
    "text": "this uh so we're going to make recursive functions that work on this uh yeah",
    "start": "1845200",
    "end": "1852200"
  },
  {
    "text": "because we have typ uh so on parts",
    "start": "1852200",
    "end": "1858440"
  },
  {
    "text": "and pars and I don't actually write F merch",
    "start": "1858440",
    "end": "1863880"
  },
  {
    "text": "so I don't know the same part of the language as so I like to do things like",
    "start": "1863880",
    "end": "1869399"
  },
  {
    "text": "this uh so unar is a function",
    "start": "1869399",
    "end": "1874679"
  },
  {
    "text": "uh and we will do like pattern matching on the expression we get",
    "start": "1874679",
    "end": "1881039"
  },
  {
    "text": "in so if it is a variable we will return the name of the",
    "start": "1881039",
    "end": "1887279"
  },
  {
    "text": "variable so this should be like an expression to a string and you can see by the magic of ionide uh that it",
    "start": "1887279",
    "end": "1894600"
  },
  {
    "text": "actually does that oh yes which is nice",
    "start": "1894600",
    "end": "1900159"
  },
  {
    "text": "and there's the lambdas yeah which has a parameter and",
    "start": "1900159",
    "end": "1906679"
  },
  {
    "text": "some expression right and then we just turn it back into let's see it's",
    "start": "1906679",
    "end": "1914240"
  },
  {
    "text": "like this to get the Lambda yes uh and the parameter is already a string we",
    "start": "1914240",
    "end": "1921320"
  },
  {
    "text": "want a dot yeah and then you need well some arbitrary thing yeah so the x is like an",
    "start": "1921320",
    "end": "1928799"
  },
  {
    "text": "expression so we call unpar recurs on that it's going to unpar all the rest of",
    "start": "1928799",
    "end": "1934880"
  },
  {
    "text": "it and then we have applications it says unpar XML",
    "start": "1934880",
    "end": "1941120"
  },
  {
    "text": "uh which is strange I like out to",
    "start": "1941120",
    "end": "1950440"
  },
  {
    "text": "complete it helps me out uh and when we come to application we have",
    "start": "1950919",
    "end": "1957559"
  },
  {
    "text": "to like do some stuff in order to get the parenthesis right right uh we want",
    "start": "1957559",
    "end": "1962760"
  },
  {
    "text": "parenthesis around the Lambda if there's a Lambda as the function argument uh so",
    "start": "1962760",
    "end": "1967840"
  },
  {
    "text": "we have like right yes one match yes so it's going to be two cases for application now yeah so we have one",
    "start": "1967840",
    "end": "1974399"
  },
  {
    "text": "that matches if the function bit is Lambda right and it has an AR is",
    "start": "1974399",
    "end": "1981880"
  },
  {
    "text": "whatever and we have to use our pattern function and unart",
    "start": "1981880",
    "end": "1988960"
  },
  {
    "text": "the Lambda stuff Lambda [Music]",
    "start": "1988960",
    "end": "1994740"
  },
  {
    "text": "BX ah like this you really write F kind of differently from me",
    "start": "1996799",
    "end": "2003519"
  },
  {
    "text": "yeah uh and we this this is very realistic with uh respect to working in",
    "start": "2003519",
    "end": "2008639"
  },
  {
    "text": "the industry right so already we have the tension in the code base I'm going to change his code he's going to change",
    "start": "2008639",
    "end": "2014120"
  },
  {
    "text": "my code yeah um and we need to like consider whether or not to add parenthesis on the",
    "start": "2014120",
    "end": "2021120"
  },
  {
    "text": "argument as well so we did you say what ARG string is no okay it will show up",
    "start": "2021120",
    "end": "2026840"
  },
  {
    "text": "later right uh but we just want to add parentheses around it unless it's just a",
    "start": "2026840",
    "end": "2032559"
  },
  {
    "text": "single variable right so AR string is George's problem and and you're George",
    "start": "2032559",
    "end": "2037799"
  },
  {
    "text": "I'm George in like 2 minutes uh for everything else we just",
    "start": "2037799",
    "end": "2045600"
  },
  {
    "text": "unpar the function",
    "start": "2045600",
    "end": "2050679"
  },
  {
    "text": "and I don't think you mean that I not yes at",
    "start": "2050679",
    "end": "2057398"
  },
  {
    "text": "all and that's the reason why we have like an aring function because we're going to do it twice yeah",
    "start": "2058520",
    "end": "2064679"
  },
  {
    "text": "right and and Arc",
    "start": "2064679",
    "end": "2070398"
  },
  {
    "text": "string is also a function and that's also a recursive",
    "start": "2070399",
    "end": "2075679"
  },
  {
    "text": "function yeah I didn't think you had to to do that do you have to write recre",
    "start": "2075679",
    "end": "2082800"
  },
  {
    "text": "when it's like in hand oh no no you don't have to write the rec I'm sorry",
    "start": "2082800",
    "end": "2087919"
  },
  {
    "text": "uh uh I'm just wondering why you didn't put the AR string in front of the well never mind yeah yeah AR string is going",
    "start": "2087919",
    "end": "2095679"
  },
  {
    "text": "to uh call unar right yes yeah so it's going to mut going to be mutually",
    "start": "2095679",
    "end": "2100880"
  },
  {
    "text": "recursive right so variables are still easy to deal with uh for anything else",
    "start": "2100880",
    "end": "2108839"
  },
  {
    "text": "we want to X instead and we want to put",
    "start": "2108839",
    "end": "2114839"
  },
  {
    "text": "parenthesis around the unpar",
    "start": "2114839",
    "end": "2119920"
  },
  {
    "text": "X I don't know if any of this works though right uh it could be",
    "start": "2122119",
    "end": "2129599"
  },
  {
    "text": "that see what happens I think it's probably I think it's yeah it's",
    "start": "2129599",
    "end": "2137440"
  },
  {
    "text": "indentation do I have to do like this I think I don't have to do like",
    "start": "2137960",
    "end": "2143838"
  },
  {
    "text": "this I thought I had to do like this and then I try the other way and it seemed to work yeah it could be that you have a",
    "start": "2144160",
    "end": "2150160"
  },
  {
    "text": "a sort of could be that I wrote everything wrong I don't think so let's see",
    "start": "2150160",
    "end": "2156280"
  },
  {
    "text": "no not quite not sure Waits I'm going to blame ir's computer for everything that goes wrong by",
    "start": "2156280",
    "end": "2164880"
  },
  {
    "text": "yeah oh it's is it here yeah oh yeah yeah so it shouldn't",
    "start": "2165000",
    "end": "2171240"
  },
  {
    "text": "be necessarily with the tabs but they can stay",
    "start": "2171240",
    "end": "2177960"
  },
  {
    "text": "uh yeah so we can unpass one those Str",
    "start": "2183079",
    "end": "2188880"
  },
  {
    "text": "expressions from earlier and we can do one of the unit tests and I guess",
    "start": "2188880",
    "end": "2194359"
  },
  {
    "text": "we're not going to spend a lot lot more time on on parsing uh we hope this works",
    "start": "2194359",
    "end": "2199920"
  },
  {
    "text": "yeah uh and I guess there are like a bunch of sheets down there as well yeah",
    "start": "2199920",
    "end": "2206200"
  },
  {
    "text": "I'll just let this let them stay and right there instead yeah so so this is this completes the",
    "start": "2206200",
    "end": "2214440"
  },
  {
    "start": "2212000",
    "end": "2452000"
  },
  {
    "text": "UNP parsing right yeah so now all we have left is the evaluation yes so we",
    "start": "2214440",
    "end": "2219920"
  },
  {
    "text": "want to do like the reduction evaluation thing and then kind of glue the things",
    "start": "2219920",
    "end": "2225319"
  },
  {
    "text": "together so we get like a running program yes uh so reduction kind of",
    "start": "2225319",
    "end": "2231480"
  },
  {
    "text": "consists of looking for something like this uh which is an application where the function bit is a",
    "start": "2231480",
    "end": "2238359"
  },
  {
    "text": "Lambda uh and then do substitution on it so we kind of remove this and this and",
    "start": "2238359",
    "end": "2244640"
  },
  {
    "text": "keep this body but every a in the body is replaced with f",
    "start": "2244640",
    "end": "2249960"
  },
  {
    "text": "right so we want the substitution function and a reduce",
    "start": "2249960",
    "end": "2255880"
  },
  {
    "text": "function so let I'm going to call it",
    "start": "2255880",
    "end": "2263200"
  },
  {
    "text": "subst I'm going to guess that does substitution yeah and it's a",
    "start": "2263200",
    "end": "2268839"
  },
  {
    "text": "function and I'm pretty sure I'm allowed to do this without the tabs yeah we just",
    "start": "2268839",
    "end": "2274359"
  },
  {
    "text": "keep if we have the right amount of parentheses should be good",
    "start": "2274359",
    "end": "2279920"
  },
  {
    "text": "so Subs is going to take some argument like f the mhm thing we are substituting",
    "start": "2280960",
    "end": "2289200"
  },
  {
    "text": "it and some string we're looking for the",
    "start": "2289200",
    "end": "2294760"
  },
  {
    "text": "parameter name mhm and then there's the expression we're looking at so if it's a variable V",
    "start": "2294760",
    "end": "2303640"
  },
  {
    "text": "then if V is the string we return the argument we substitute it for the argument are you sure you want the",
    "start": "2303640",
    "end": "2310599"
  },
  {
    "text": "commas yeah okay good uh yeah we're going to pass that to over right",
    "start": "2310599",
    "end": "2317720"
  },
  {
    "text": "yes and then AR else we return the",
    "start": "2317720",
    "end": "2324960"
  },
  {
    "text": "expression unchanged mhm and if it",
    "start": "2324960",
    "end": "2331800"
  },
  {
    "text": "is well if it's application should be simple uh has a function bit and an",
    "start": "2331800",
    "end": "2337000"
  },
  {
    "text": "argument bit bit we just want to call subst recursively on each bit mhm so we",
    "start": "2337000",
    "end": "2344560"
  },
  {
    "text": "do subst uh ARS",
    "start": "2344560",
    "end": "2350400"
  },
  {
    "text": "F and subst yeah so you're sort of calling recursively down the tree yeah",
    "start": "2350400",
    "end": "2356200"
  },
  {
    "text": "yeah and rebuilding an application",
    "start": "2356200",
    "end": "2363319"
  },
  {
    "text": "yes should I be worried about the lines Red Line not yet probably",
    "start": "2364000",
    "end": "2370920"
  },
  {
    "text": "not we'll worry later and the last case is if it's a",
    "start": "2370920",
    "end": "2377200"
  },
  {
    "text": "Lambda then if the parameter that is bone by",
    "start": "2378240",
    "end": "2383359"
  },
  {
    "text": "this Lambda the p is equal to the thing we're looking for yeah then if that",
    "start": "2383359",
    "end": "2388920"
  },
  {
    "text": "variable occurs within the Lambda expression it's born by that P instead of referring to the thing we replacing",
    "start": "2388920",
    "end": "2395000"
  },
  {
    "text": "mhm uh so we can leave it is yeah because you're you're sort of shadowing",
    "start": "2395000",
    "end": "2401480"
  },
  {
    "text": "what you're looking for is that it yeah yeah oh right I need to have like all the arguments on each line yeah you",
    "start": "2401480",
    "end": "2409240"
  },
  {
    "text": "should have worried",
    "start": "2409240",
    "end": "2415880"
  },
  {
    "text": "then we don't do anything with it we just return the same Lambda and writing random symbols here",
    "start": "2415880",
    "end": "2424400"
  },
  {
    "text": "uh and otherwise we need to do do like the same thing as we did in up we just recurse down yeah and look for variables",
    "start": "2424400",
    "end": "2431920"
  },
  {
    "text": "right so we make a new Lambda in the same",
    "start": "2431920",
    "end": "2436839"
  },
  {
    "text": "parameter and we do subst",
    "start": "2437079",
    "end": "2442520"
  },
  {
    "text": "RS X and I think that's it yeah so the only",
    "start": "2442520",
    "end": "2448800"
  },
  {
    "text": "place where you're really doing any substitution is in the first line right yeah so the whole thing is we're looking",
    "start": "2448800",
    "end": "2454800"
  },
  {
    "start": "2452000",
    "end": "2762000"
  },
  {
    "text": "for a variable that has the same name yeah uh and the rest is Machinery in order to",
    "start": "2454800",
    "end": "2461520"
  },
  {
    "text": "get to the variables yeah right uh so we have a substitution",
    "start": "2461520",
    "end": "2467440"
  },
  {
    "text": "function uh we're going to use it in our reduce function uh and we want like a result",
    "start": "2467440",
    "end": "2474359"
  },
  {
    "text": "type for reduction so we're going to call reduce and look",
    "start": "2474359",
    "end": "2480960"
  },
  {
    "text": "for something to do like the substitution on if you don't find anything the expression is on normal",
    "start": "2480960",
    "end": "2487640"
  },
  {
    "text": "form right because then you can't really reduce it any further nothing more to be done with it so we have kind of finished",
    "start": "2487640",
    "end": "2493119"
  },
  {
    "text": "evaluation MH uh if we do find something we will",
    "start": "2493119",
    "end": "2498880"
  },
  {
    "text": "return sort of the next expression that we can do more work do the substitution",
    "start": "2498880",
    "end": "2504359"
  },
  {
    "text": "and return to the result right yes so hopefully",
    "start": "2504359",
    "end": "2511000"
  },
  {
    "text": "uh uh you'll reach normal form but we'll we'll see yeah if you never reach normal",
    "start": "2511000",
    "end": "2517240"
  },
  {
    "text": "form we don't terminate yes uh and if we don't terminate we're like probably T in",
    "start": "2517240",
    "end": "2522800"
  },
  {
    "text": "complete so that's that's that's a big win uh so yeah reduces function it takes",
    "start": "2522800",
    "end": "2530280"
  },
  {
    "text": "an expression the thing we're looking for is an application where there's a Lambda with",
    "start": "2530280",
    "end": "2537920"
  },
  {
    "text": "a parameter and a body and there's some",
    "start": "2537920",
    "end": "2544319"
  },
  {
    "text": "argument I'm done need",
    "start": "2545079",
    "end": "2550720"
  },
  {
    "text": "this and then we return",
    "start": "2550839",
    "end": "2556880"
  },
  {
    "text": "our next thing right and we substitute the body of the Lambda with",
    "start": "2556880",
    "end": "2564599"
  },
  {
    "text": "the argument and I might be regretting that I",
    "start": "2564599",
    "end": "2569839"
  },
  {
    "text": "did Let's see we substitute a for p in X so we substitute a for the parameter of",
    "start": "2569839",
    "end": "2577599"
  },
  {
    "text": "the Lambda in the body of the Lambda yeah exactly so you want inside the X you want all the PS to turn into a is",
    "start": "2577599",
    "end": "2584200"
  },
  {
    "text": "that right yeah mhm uh the other well easy case at least yeah is uh variable V",
    "start": "2584200",
    "end": "2593280"
  },
  {
    "text": "uh it is necessarily a normal for me yeah you you can't really do much with ey no and it doesn't like contain a new",
    "start": "2593280",
    "end": "2599720"
  },
  {
    "text": "expression that we can look into right uh the rest of this is just going to be like going down the tree and look for",
    "start": "2599720",
    "end": "2606599"
  },
  {
    "text": "stuff so if it's a Lambda we have to yeah we going to call",
    "start": "2606599",
    "end": "2613040"
  },
  {
    "text": "Red look for something reducible in X and then we have to rebuild the Lambda if we get yes so reconstructed yes yeah",
    "start": "2613040",
    "end": "2620400"
  },
  {
    "text": "so we're going to do like match reduce x",
    "start": "2620400",
    "end": "2627920"
  },
  {
    "text": "with and if it's a normal form the whole thing is a normal form",
    "start": "2629119",
    "end": "2635319"
  },
  {
    "text": "yep if it is not nor for form then we have some then you have some some",
    "start": "2635319",
    "end": "2640559"
  },
  {
    "text": "reduced expression some next step of computation yeah and that's going to replace the body of the Lambda expression is that right yeah so we do",
    "start": "2640559",
    "end": "2646559"
  },
  {
    "text": "Lambda p and the next expression yeah right but it's going to be next off",
    "start": "2646559",
    "end": "2654119"
  },
  {
    "text": "right so it's it's not just so we want to carry on this next as well",
    "start": "2654119",
    "end": "2660440"
  },
  {
    "text": "yes and they kind of most comers some bit Yeah because we because we need to",
    "start": "2660440",
    "end": "2666880"
  },
  {
    "text": "look um in the function part yes and then in the argument part",
    "start": "2666880",
    "end": "2673920"
  },
  {
    "text": "right so we look at the function try to reduce",
    "start": "2673920",
    "end": "2680359"
  },
  {
    "text": "that and if you cannot we'll do the other part first I",
    "start": "2680359",
    "end": "2687520"
  },
  {
    "text": "guess so if we get a next so a next function because then you're sort of done yeah right we stop looking for more",
    "start": "2687520",
    "end": "2694800"
  },
  {
    "text": "stuff to ruce we only do like one big bit of reduction each step MH uh then we have an application with",
    "start": "2694800",
    "end": "2702640"
  },
  {
    "text": "the next function and the touch the argument and again I need to do like",
    "start": "2702640",
    "end": "2707760"
  },
  {
    "text": "next right if it is on normal",
    "start": "2707760",
    "end": "2714000"
  },
  {
    "text": "form and then then we have to look at the argument bit right yes so we do",
    "start": "2714000",
    "end": "2720160"
  },
  {
    "text": "match reduce a with and then it's going to be kind of similar yeah so next the",
    "start": "2720160",
    "end": "2727520"
  },
  {
    "text": "next argument and we get the next",
    "start": "2727520",
    "end": "2732800"
  },
  {
    "text": "pack the function and the new",
    "start": "2735359",
    "end": "2740078"
  },
  {
    "text": "argument and if that is a normal form as well then we know that everything's a normal form right because you have",
    "start": "2740760",
    "end": "2747280"
  },
  {
    "text": "nowhere yeah that means we just to look right looked all the way down to the variables which are can the leaf nodes Y",
    "start": "2747280",
    "end": "2755240"
  },
  {
    "text": "and we didn't find anything to okay good so now we have the reduce",
    "start": "2755240",
    "end": "2761440"
  },
  {
    "text": "function yeah so it means we're almost done I think yeah so hopeful this",
    "start": "2761440",
    "end": "2770240"
  },
  {
    "start": "2762000",
    "end": "3061000"
  },
  {
    "text": "works uh we're going to test it after we do like a tiny bit of assembly uh yeah",
    "start": "2770240",
    "end": "2776920"
  },
  {
    "text": "so we're going to put everything together in one thing we going to put most of it together so we can try do",
    "start": "2776920",
    "end": "2783400"
  },
  {
    "text": "like a test run and then do the reple beta I guess yes uh so what we're going to do is we want",
    "start": "2783400",
    "end": "2789680"
  },
  {
    "text": "to read some stuff uh pars the stuff and then evaluate the parsed stuff and write",
    "start": "2789680",
    "end": "2794960"
  },
  {
    "text": "all the UN parts to results so on every every step of having done for each next",
    "start": "2794960",
    "end": "2800359"
  },
  {
    "text": "right so you're going to do an un parts so we can see what's going on yep so",
    "start": "2800359",
    "end": "2806000"
  },
  {
    "text": "we'll start with uh this is a function that might run forever uh",
    "start": "2806000",
    "end": "2813520"
  },
  {
    "text": "yeah so just call it run the B with some expression X so this is an",
    "start": "2813520",
    "end": "2819880"
  },
  {
    "text": "already parted expression and so this is the tree representation yeah uh and we're going",
    "start": "2819880",
    "end": "2828359"
  },
  {
    "text": "to like reduce the",
    "start": "2828359",
    "end": "2834000"
  },
  {
    "text": "X and if it is on normal form then we're done we're done we return like a unit",
    "start": "2834000",
    "end": "2841520"
  },
  {
    "text": "value yes and if it has some next",
    "start": "2841520",
    "end": "2848680"
  },
  {
    "text": "expression and then you're going to have to write whatever that is so we do like is it system I think you can do",
    "start": "2848680",
    "end": "2856359"
  },
  {
    "text": "print that's probably well yeah this is very entprise",
    "start": "2856359",
    "end": "2861680"
  },
  {
    "text": "yeah we're doing like the this is net interrupt yeah and we're doing like the side effect the ugly bits anyway so we",
    "start": "2861680",
    "end": "2868000"
  },
  {
    "text": "can use right L uh so we want to unpar",
    "start": "2868000",
    "end": "2875119"
  },
  {
    "text": "the result we got yep and write that and",
    "start": "2875119",
    "end": "2880680"
  },
  {
    "text": "then call the runal recursively",
    "start": "2880680",
    "end": "2887440"
  },
  {
    "text": "yeah [Music] so so what was the test expression",
    "start": "2887920",
    "end": "2894480"
  },
  {
    "text": "called is it like appex yeah that's the expression yes yeah so we can do like a test run on",
    "start": "2894480",
    "end": "2900319"
  },
  {
    "text": "appex yeah uh yeah so we get yeah so you can see",
    "start": "2900319",
    "end": "2906200"
  },
  {
    "text": "down there this is hopefully the same thing that was on the slide right it's it's possible uh we can like go",
    "start": "2906200",
    "end": "2915680"
  },
  {
    "text": "back so if you can just memorize what's lamb lamb b l a a and so it looks",
    "start": "2915680",
    "end": "2923000"
  },
  {
    "text": "kind of similar yeah it has more or less the same shape so it must be correct",
    "start": "2923000",
    "end": "2928599"
  },
  {
    "text": "yeah uh uh okay so we want to make like a repple I think that takes input from",
    "start": "2929359",
    "end": "2936559"
  },
  {
    "text": "uh uh like standard in and then pares it mhm uh which is also going to be",
    "start": "2936559",
    "end": "2944160"
  },
  {
    "text": "recursive because it might run forever yeah and we'll do call it the reppel I",
    "start": "2944160",
    "end": "2950480"
  },
  {
    "text": "guess yeah and now we do",
    "start": "2950480",
    "end": "2958760"
  },
  {
    "text": "like uh pars and then it's X parser",
    "start": "2959200",
    "end": "2966240"
  },
  {
    "text": "yeah system console read line",
    "start": "2968799",
    "end": "2974599"
  },
  {
    "text": "yeah is it like this I think so yeah",
    "start": "2976480",
    "end": "2983559"
  },
  {
    "text": "and well we can just do runal on the result yeah since we did",
    "start": "2984200",
    "end": "2990079"
  },
  {
    "text": "the kind of throw exceptions instead of doing result types uh it's just going to blow up if we right do something wrong",
    "start": "2990079",
    "end": "2996799"
  },
  {
    "text": "yeah so that's good yeah and then we call I guess we can do",
    "start": "2996799",
    "end": "3004480"
  },
  {
    "text": "like thiss a unit thing y yeah",
    "start": "3007280",
    "end": "3013920"
  },
  {
    "text": "so if everything works now we can start a apple",
    "start": "3013920",
    "end": "3020640"
  },
  {
    "text": "and I don't know the Lambda thing doesn't work here no there it it's there",
    "start": "3020640",
    "end": "3027240"
  },
  {
    "text": "so you can sort of yeah so there's a awkward bit where we type expressions in this window still and then copy paste",
    "start": "3027240",
    "end": "3032839"
  },
  {
    "text": "them into there yeah the Ripple but we should be able to do things like Lambda",
    "start": "3032839",
    "end": "3039839"
  },
  {
    "text": "X Lambda y why",
    "start": "3039839",
    "end": "3047440"
  },
  {
    "text": "uh this like this so what would be the expected output from that uh bar I guess",
    "start": "3047760",
    "end": "3053920"
  },
  {
    "text": "yeah because the fu is bound the X to X but there is no X so yeah it's going to",
    "start": "3053920",
    "end": "3059119"
  },
  {
    "text": "get lost so clearly we have a working uh Lambda calculus evaluator yes",
    "start": "3059119",
    "end": "3066920"
  },
  {
    "start": "3061000",
    "end": "3141000"
  },
  {
    "text": "uh so uh yeah um so it's a very useful language uh it's not clear what it does",
    "start": "3066920",
    "end": "3072760"
  },
  {
    "text": "other than like doing reductions right so and and and we were thinking a little bit about this about t in completeness",
    "start": "3072760",
    "end": "3079480"
  },
  {
    "text": "um and in in some sense uh I think we arrived that t in completeness is about",
    "start": "3079480",
    "end": "3084920"
  },
  {
    "text": "giving you a bunch of r and the ability to form a loop and hang yourself in it and and then suddenly",
    "start": "3084920",
    "end": "3090720"
  },
  {
    "text": "your program can hang yeah which is nice this is this is uh as",
    "start": "3090720",
    "end": "3096160"
  },
  {
    "text": "much power as you can hope for in in any programing language really it implies that things might run forever and ever",
    "start": "3096160",
    "end": "3102760"
  },
  {
    "text": "stop yeah and other than that it is like a definition of what is effectively",
    "start": "3102760",
    "end": "3108880"
  },
  {
    "text": "computable so every algorithm should it should be possible to implement any",
    "start": "3108880",
    "end": "3114480"
  },
  {
    "text": "algorithm in a t complete language right so the kind of formal definition is that if you can do useful things like Edition",
    "start": "3114480",
    "end": "3120960"
  },
  {
    "text": "and also you can screw things up and run forever then it's probably to complete",
    "start": "3120960",
    "end": "3126119"
  },
  {
    "text": "yeah uh and um I think maybe to illustrate that uh",
    "start": "3126119",
    "end": "3132640"
  },
  {
    "text": "sometimes you hear people talk about uh well it's tour incomplete um and uh",
    "start": "3132640",
    "end": "3137839"
  },
  {
    "text": "things like well what can f do that c cannot uh do and stuff like that uh and",
    "start": "3137839",
    "end": "3143119"
  },
  {
    "text": "to sort of illustrate that this is this is sort of a stupid question to ask uh we're going to try to make a little bit",
    "start": "3143119",
    "end": "3150040"
  },
  {
    "text": "of math uh to show the distinction between what we call the T in completeness and the touring convenience",
    "start": "3150040",
    "end": "3156520"
  },
  {
    "text": "because some languages are more practical for doing some things than than other languages even though they're",
    "start": "3156520",
    "end": "3163200"
  },
  {
    "text": "all sort of like T complete or church complete or whatever you want to call it I'm just create while you're talking I'm",
    "start": "3163200",
    "end": "3168319"
  },
  {
    "text": "creating creating some numbers we might need uh those are amongst the more useful ones I think yeah uh so like I",
    "start": "3168319",
    "end": "3176000"
  },
  {
    "text": "mentioned uh we're going to prend that a number is a function that does something as many",
    "start": "3176000",
    "end": "3182839"
  },
  {
    "text": "times as the number you don't think one is a useful number not not for our purposes so you",
    "start": "3182839",
    "end": "3189200"
  },
  {
    "text": "just create as much maap as you need yeah you don't need like we could try to create all the numbers but there's a lot",
    "start": "3189200",
    "end": "3194720"
  },
  {
    "text": "of them yeah so we're skipping some yes this this is a very pragmatic",
    "start": "3194720",
    "end": "3200480"
  },
  {
    "text": "approach so I decided that having only two is like bad because it's hard to tell if",
    "start": "3200480",
    "end": "3206920"
  },
  {
    "text": "you're doing addition or multiplication yeah so it's nice to have like two and three uh right so just to be clear what",
    "start": "3206920",
    "end": "3214400"
  },
  {
    "text": "we're trying to accomplish here is yeah so in order to prove that it's a useful language we're going to decide that",
    "start": "3214400",
    "end": "3221040"
  },
  {
    "text": "these things are numbers and see if we can do addition on them so we want some function that can take this as an",
    "start": "3221040",
    "end": "3226680"
  },
  {
    "text": "argument and this as the other argument and return uh something that we're like",
    "start": "3226680",
    "end": "3232559"
  },
  {
    "text": "able to pretend is the number five so it should be Lambda F Lambda X five fs and an X yeah so it should produce the same",
    "start": "3232559",
    "end": "3240040"
  },
  {
    "text": "result as if we just wrote five using this convention yeah right so it should",
    "start": "3240040",
    "end": "3245280"
  },
  {
    "text": "take like two arguments uh right already we have quite",
    "start": "3245280",
    "end": "3251880"
  },
  {
    "text": "a few lambas uh so the first the A and the B those are going to be the numbers is that correct yeah and then we're",
    "start": "3251880",
    "end": "3258079"
  },
  {
    "text": "going to need to create a new number sort of we do the Lambda F Lambda X thing yeah because all numbers start",
    "start": "3258079",
    "end": "3264240"
  },
  {
    "text": "with Lambda F Lambda X right and now we have an F that we want to apply the right amount of times yeah but",
    "start": "3264240",
    "end": "3270480"
  },
  {
    "text": "that's all numbers do right it does something a number of times a f then a",
    "start": "3270480",
    "end": "3276240"
  },
  {
    "text": "the number a will apply f a a number of times to something right so you sort of",
    "start": "3276240",
    "end": "3281839"
  },
  {
    "text": "have the looping built into to the number and and if you do like so what we're trying to do is apply",
    "start": "3281839",
    "end": "3290359"
  },
  {
    "text": "the f b * to X and then apply the F A * to the result",
    "start": "3290359",
    "end": "3297240"
  },
  {
    "text": "yep that's that's perfectly clear uh so this is we claim uh the the function",
    "start": "3297240",
    "end": "3305079"
  },
  {
    "text": "that does addition on these numbers right yeah so so if you can now copy all",
    "start": "3305079",
    "end": "3312359"
  },
  {
    "text": "of these things together so we want like the two number and we need to add some",
    "start": "3312359",
    "end": "3318440"
  },
  {
    "text": "extra parentheses right and the three number",
    "start": "3318440",
    "end": "3325038"
  },
  {
    "text": "and now there's going to be uh a bit of calculation in down there uh the sort of",
    "start": "3327280",
    "end": "3333440"
  },
  {
    "text": "the proof will be the final line right if we can count the fs and we have five FS then then we have um indication that",
    "start": "3333440",
    "end": "3342480"
  },
  {
    "text": "this is sound approach it doesn't work like great at the moment",
    "start": "3342480",
    "end": "3349480"
  },
  {
    "text": "oh did I mess up with some so uh do you have like unmatched",
    "start": "3351160",
    "end": "3357760"
  },
  {
    "text": "parenthesis or do I have something that is",
    "start": "3357760",
    "end": "3366680"
  },
  {
    "text": "not oh no",
    "start": "3367039",
    "end": "3372240"
  },
  {
    "text": "uh let's see we need to start the up again",
    "start": "3373559",
    "end": "3379440"
  },
  {
    "text": "because everything blew up",
    "start": "3379440",
    "end": "3383240"
  },
  {
    "text": "it kind of runs forever at least yeah is that like close [Laughter]",
    "start": "3391000",
    "end": "3399099"
  },
  {
    "text": "enough oh this is awkward yeah so this is kind of the great payoff at the end where just run",
    "start": "3403880",
    "end": "3410839"
  },
  {
    "text": "smoothly and everyone understands that uh Lambda calculus is a useful language",
    "start": "3410839",
    "end": "3415920"
  },
  {
    "text": "yeah uh should we try to get sort of um can I",
    "start": "3415920",
    "end": "3423559"
  },
  {
    "text": "do like should we cheat we should probably cheat uh let's see if we can cheat are you",
    "start": "3423559",
    "end": "3430680"
  },
  {
    "text": "better than me at cheating I'm not I'm not sure let's see um should we take one of these other",
    "start": "3430680",
    "end": "3440480"
  },
  {
    "text": "things and just sort of apply all of it yeah remove that one well do the garbage",
    "start": "3440480",
    "end": "3448000"
  },
  {
    "text": "canting and andun everything in this file",
    "start": "3448000",
    "end": "3452880"
  },
  {
    "text": "right so we going to try again now or yeah we'll see if you have time to do another try",
    "start": "3455440",
    "end": "3463480"
  },
  {
    "text": "uh we can see if the oh no it's this",
    "start": "3464359",
    "end": "3470880"
  },
  {
    "text": "slide do you have your where did all my numbers go I think it's probably it's either higher up or",
    "start": "3470880",
    "end": "3477240"
  },
  {
    "text": "further down I guess all right we're at the end of the file and yeah so here are",
    "start": "3477240",
    "end": "3482319"
  },
  {
    "text": "all the be all my sheets yes uh so where there's comments we're",
    "start": "3482319",
    "end": "3488440"
  },
  {
    "text": "still in so so let's see if if each number",
    "start": "3488440",
    "end": "3495640"
  },
  {
    "text": "Works uh",
    "start": "3495640",
    "end": "3499640"
  },
  {
    "text": "so nothing works oh",
    "start": "3507680",
    "end": "3512400"
  },
  {
    "text": "great I think that kind of sums up the talk then",
    "start": "3513640",
    "end": "3520079"
  },
  {
    "text": "yeah I'm not sure and do we have like a plan C I'm not sure if we have a plan",
    "start": "3523200",
    "end": "3530000"
  },
  {
    "text": "C so now we have a repple uh we can start it",
    "start": "3530000",
    "end": "3538000"
  },
  {
    "text": "repple don't those there I think we're pretty much out of time but perhaps we",
    "start": "3538000",
    "end": "3543480"
  },
  {
    "text": "can get it running the good thing is that uh you",
    "start": "3543480",
    "end": "3548760"
  },
  {
    "text": "can do Lambda calculus by hand so you can kind of tell that this prints the right result right and and one thing you could do uh if you're if you're all",
    "start": "3548760",
    "end": "3556760"
  },
  {
    "text": "writing this down uh you could go to uh",
    "start": "3556760",
    "end": "3563720"
  },
  {
    "text": "well maybe I can actually show it if I'm online it probably shouldn't go online",
    "start": "3566200",
    "end": "3574920"
  },
  {
    "text": "see that's probably sleeping as well well uh this is a hyper media driven Lambda calculous evaluator running in",
    "start": "3584520",
    "end": "3591559"
  },
  {
    "text": "Asher uh it's written in Suave um you can",
    "start": "3591559",
    "end": "3596720"
  },
  {
    "text": "put things in there oh right we so we have a plan C so if you can just copy",
    "start": "3596720",
    "end": "3602440"
  },
  {
    "text": "everything in there we should be able to see it running that's incredibly useful to have",
    "start": "3602440",
    "end": "3610000"
  },
  {
    "text": "like running in the cloud yeah so now you can sort of it it gives you next links whenever it can sort of continue",
    "start": "3610000",
    "end": "3618480"
  },
  {
    "text": "working and now we have I five FS yeah and we already have like the name five for it so everything works",
    "start": "3618480",
    "end": "3627960"
  },
  {
    "text": "perfect yeah we are AO time uh these things runs",
    "start": "3631280",
    "end": "3636760"
  },
  {
    "text": "forever yeah uh so this is so it's clearly T complete uh thanks",
    "start": "3636760",
    "end": "3644558"
  }
]