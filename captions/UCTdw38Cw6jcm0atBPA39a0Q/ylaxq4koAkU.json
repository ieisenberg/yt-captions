[
  {
    "start": "0",
    "end": "152000"
  },
  {
    "text": "[Music] hello Portugal hello how are youall",
    "start": "0",
    "end": "6319"
  },
  {
    "text": "doing excellent having a good afternoon staying awake after lunch well after kind of lunch all day I know it's kind",
    "start": "6319",
    "end": "13240"
  },
  {
    "text": "of difficult all right how many people did their first time to NDC poro every hand should go",
    "start": "13240",
    "end": "18840"
  },
  {
    "text": "up my name is Spencer schneidenbach and I'm here to talk to you today about um expression trees and c not only what",
    "start": "18840",
    "end": "25359"
  },
  {
    "text": "they are a little bit but how they're used today and how you could use them give you some ideas jog your memory jog",
    "start": "25359",
    "end": "31400"
  },
  {
    "text": "your brain a little bit to give you some ideas how you might be able to use them uh in your day-to-day first things first",
    "start": "31400",
    "end": "37399"
  },
  {
    "text": "this is my Twitter it's schneiden boox and you can find all the slides plus more Schneids Donnet or if you just",
    "start": "37399",
    "end": "43320"
  },
  {
    "text": "follow me on Twitter I'll be doing this a few times throughout the presentation where I click on this handy little",
    "start": "43320",
    "end": "48520"
  },
  {
    "text": "link and then I tweet out exactly what I'm talking about so there you go first",
    "start": "48520",
    "end": "54239"
  },
  {
    "text": "things first tweet out a link to the slide I have a few code examples in here that use uh net fiddle so you're able to",
    "start": "54239",
    "end": "60440"
  },
  {
    "text": "hit play in the browser and follow right along and or do it after the uh after the talk is over so um let's Dive Right",
    "start": "60440",
    "end": "68600"
  },
  {
    "text": "In and get started how many people have ever queried a database with a link expression something like this where",
    "start": "68600",
    "end": "74240"
  },
  {
    "text": "you're doing a from where select and then you get grab a handful of properties all right Entity framework",
    "start": "74240",
    "end": "79840"
  },
  {
    "text": "hands up Entity framework folks very good how many people still still use Link to SQL maintaining some kind of",
    "start": "79840",
    "end": "85920"
  },
  {
    "text": "okay there's a few hands very good very good or en hibernate even all right so if you've done if you've done something",
    "start": "85920",
    "end": "92079"
  },
  {
    "text": "like this then that means that you've probably used expression have you ever",
    "start": "92079",
    "end": "97399"
  },
  {
    "text": "been asked to rent do something like this where you're asked are how many razor developers anybody using aspnet",
    "start": "97399",
    "end": "103640"
  },
  {
    "text": "web MVC very good or ASP net core where you're able to do where you're able to go into your razor View and you do at",
    "start": "103640",
    "end": "110040"
  },
  {
    "text": "and then you do html. editor4 and you've created some kind of strongly typed model and you say well I need to be able",
    "start": "110040",
    "end": "115640"
  },
  {
    "text": "to type a first name in for this employee or whatever how many people have done something like this very good and how many people have in",
    "start": "115640",
    "end": "123320"
  },
  {
    "text": "some arbitrary way for some library at any point have ever been asked to select a member a specific member from a an",
    "start": "123320",
    "end": "130759"
  },
  {
    "text": "object you give it a t you give it something you uh you have a it has a type it knows that you're looking for",
    "start": "130759",
    "end": "136000"
  },
  {
    "text": "the employee and you give it a lamb to something like this where you're trying to select just the name how many people have done something like this very good",
    "start": "136000",
    "end": "142640"
  },
  {
    "text": "all right well if you've done something like this you've used expression trees at some point in your C life even even",
    "start": "142640",
    "end": "150120"
  },
  {
    "text": "if you had no idea so first thing I'm going to talk about I'm going to talk briefly about",
    "start": "150120",
    "end": "155879"
  },
  {
    "start": "152000",
    "end": "500000"
  },
  {
    "text": "what expression trees are first before we can talk about those we've got to talk about Lambda Expressions right or",
    "start": "155879",
    "end": "162800"
  },
  {
    "text": "lambdas whatever you want to call them something like this so if you're able to you could use a local function you can",
    "start": "162800",
    "end": "168519"
  },
  {
    "text": "declare it inside of a variable if you do something like Funk of string string which is just saying I am a function I",
    "start": "168519",
    "end": "175080"
  },
  {
    "text": "take in a string and I return a string and then you set it to some arbitrary variable called two upper and then",
    "start": "175080",
    "end": "181120"
  },
  {
    "text": "you're able to actually set it to something like this where you go string goes into string. two upper and what",
    "start": "181120",
    "end": "186920"
  },
  {
    "text": "you've done is you've literally just created a method in line inside of a variable most of us have done stuff like this this is not news to this is",
    "start": "186920",
    "end": "193599"
  },
  {
    "text": "probably not news to many of you oh then you're able to capture that and able to go and capture call that method right",
    "start": "193599",
    "end": "199440"
  },
  {
    "text": "there because it's a valid method at that point and you're able to pass in an argument in this case pass in my name",
    "start": "199440",
    "end": "205840"
  },
  {
    "text": "and what happens when you pass that into that you get that you get my name back it's just capital letters right calling",
    "start": "205840",
    "end": "212000"
  },
  {
    "text": "two upper very good all right straightforward so far so then we declare it again in a",
    "start": "212000",
    "end": "218840"
  },
  {
    "text": "different set of code and this time we don't declare it as fun of string string we declare it as expression of funk of",
    "start": "218840",
    "end": "226040"
  },
  {
    "text": "string string do the same thing the syntax is all all together pretty much the same",
    "start": "226040",
    "end": "233239"
  },
  {
    "text": "and this time we try to call our two upper method on our on our Spencer character and then what happens nothing",
    "start": "233239",
    "end": "239360"
  },
  {
    "text": "happens because it doesn't compile it doesn't compile because this is by definition this isn't a function this",
    "start": "239360",
    "end": "245159"
  },
  {
    "text": "isn't a a function in the purest sense of the word at least not yet so what the heck do we have because",
    "start": "245159",
    "end": "251480"
  },
  {
    "text": "what we have here is something that are two things that are syntactically similar they're pretty no statically the",
    "start": "251480",
    "end": "257239"
  },
  {
    "text": "same the only difference is the way that we've declared them and the key difference to understand if you're",
    "start": "257239",
    "end": "263280"
  },
  {
    "text": "trying to understand what a Lambda is versus an an expression is that a Lambda does the thing it actually takes the",
    "start": "263280",
    "end": "269320"
  },
  {
    "text": "variable you put it you call the two upper method on it and it actually does that thing",
    "start": "269320",
    "end": "274560"
  },
  {
    "text": "Expressions describe how the Lambda does the thing it describes exactly what that does so",
    "start": "274560",
    "end": "280919"
  },
  {
    "text": "let's break that down a little bit so again we have two things syntactically the same which is awesome",
    "start": "280919",
    "end": "288440"
  },
  {
    "text": "this is a property known as homo ionicity and it essentially says that the syntax that we use to not only",
    "start": "288440",
    "end": "295320"
  },
  {
    "text": "declare our methods can be used pretty much almost the exact same syntax can be used to describe methods so that's a",
    "start": "295320",
    "end": "302639"
  },
  {
    "text": "really powerful characteristic for this language to have and is one of the most important parts of when they introduce link and um expressions in general was",
    "start": "302639",
    "end": "310560"
  },
  {
    "text": "one of the most important things they did because it makes the development experience natural if you're using the same syntax to declare inline functions",
    "start": "310560",
    "end": "318800"
  },
  {
    "text": "like this that you're able to use to describe the way that inline functions the way they are in an expression that's",
    "start": "318800",
    "end": "324680"
  },
  {
    "text": "a really powerful concept because it becomes natural to the developers it's really powerful abstraction",
    "start": "324680",
    "end": "330800"
  },
  {
    "text": "okay so let's talk about the different things that we can do with an expression we know that an expression describes a",
    "start": "330800",
    "end": "336360"
  },
  {
    "text": "function it describes a function and a function does something okay so there's three main uses for them we can read",
    "start": "336360",
    "end": "342880"
  },
  {
    "text": "them we can create them and we can use them right so we'll start by talking about what we can do when we read",
    "start": "342880",
    "end": "350000"
  },
  {
    "text": "it so let's take our two upper friend you're going to see this guy a lot he's going to come back because this is a",
    "start": "350440",
    "end": "355919"
  },
  {
    "text": "this is a pretty rote example right you're going to see him a lot our two upper friend we have our two upper",
    "start": "355919",
    "end": "361520"
  },
  {
    "text": "friend so this thing can actually be decomposed right when you've compiled a method you can't go back and you can get",
    "start": "361520",
    "end": "368120"
  },
  {
    "text": "some information about that about that method you can get its number of arguments you can get its return type",
    "start": "368120",
    "end": "373440"
  },
  {
    "text": "and you can't really do anything else right so what we can do is break this",
    "start": "373440",
    "end": "378520"
  },
  {
    "text": "down into its component pieces so let's take our there's two major sides to an expression right there's the left side",
    "start": "378520",
    "end": "384360"
  },
  {
    "text": "which has the parameters zero to as many as the CLR will support parameters uh and then the right side which is known",
    "start": "384360",
    "end": "390319"
  },
  {
    "text": "as the body of the expression so first thing what we have here on the left side is we have an a property called Str Str",
    "start": "390319",
    "end": "397360"
  },
  {
    "text": "we know based on the way we declared it previously it's a string we know that the parameter is a string so it is a parameter expression and it has two",
    "start": "397360",
    "end": "403960"
  },
  {
    "text": "important properties it has the type of the parameter expression which is the string and it also has the name of the",
    "start": "403960",
    "end": "409560"
  },
  {
    "text": "parameter expression which is Str Str so when you declare that variable when you declare that expression in line the name",
    "start": "409560",
    "end": "416280"
  },
  {
    "text": "of that variable is captured right there all right very good so then we have the right side of our expression we have our",
    "start": "416280",
    "end": "422240"
  },
  {
    "text": "body we have the body of the expression and this is what's called a method call expression so this is an actually a",
    "start": "422240",
    "end": "428599"
  },
  {
    "text": "reference to the string. two upper method but of course string. two uper upper requires an instance of something",
    "start": "428599",
    "end": "435879"
  },
  {
    "text": "so of course it's the parameter it's just the parameter that we passed in okay so that's that's that's pretty much",
    "start": "435879",
    "end": "443759"
  },
  {
    "text": "what an expression is you're able to look and take this information at runtime and do things with it we'll talk",
    "start": "443759",
    "end": "449599"
  },
  {
    "text": "about what some of those things are if I were to replace that Str STR on the right side if I called just if I put it",
    "start": "449599",
    "end": "455319"
  },
  {
    "text": "in a if I put Spencer in quotes and just called to Upper this parameter expression wouldn't be used anymore it would still be there it could still be",
    "start": "455319",
    "end": "461840"
  },
  {
    "text": "inspected but it wouldn't be used anymore it'd be replaced with a Conant expression",
    "start": "461840",
    "end": "467120"
  },
  {
    "text": "instead so not only can we read them more on that later we can also create them so we can do this like we've done",
    "start": "467520",
    "end": "474360"
  },
  {
    "text": "in line nothing different and this is really useful this is really useful because it allows us to",
    "start": "474360",
    "end": "479680"
  },
  {
    "text": "use it with our favorite libraries like Entity framework or automap or and hibernate whatever your whatever the things that you use that use Expressions",
    "start": "479680",
    "end": "486039"
  },
  {
    "text": "we can use them we can declare them in line because often times we know those types ahead of time but there are plenty",
    "start": "486039",
    "end": "492039"
  },
  {
    "text": "of times where there's a handful of times where it's really useful to create them at runtime you can not only can declare",
    "start": "492039",
    "end": "499039"
  },
  {
    "text": "them in line and you know all the types and all the information the body of the expression ahead of time you can also create them at runtime so this is what",
    "start": "499039",
    "end": "505520"
  },
  {
    "start": "500000",
    "end": "788000"
  },
  {
    "text": "that looks like this is called the expression API it's really awesome but talk it let's talk through it just a",
    "start": "505520",
    "end": "511199"
  },
  {
    "text": "little bit with a nice example so we already know that our function is composed our expression is composed of",
    "start": "511199",
    "end": "517320"
  },
  {
    "text": "prameters or arguments and a body right and that's true for all",
    "start": "517320",
    "end": "522919"
  },
  {
    "text": "Expressions so a parameter expression is the kind of parameter is a kind of expression that represents the",
    "start": "522919",
    "end": "528040"
  },
  {
    "text": "parameters into that Lambda right or into that expression and this is how you declare it right so there's no new",
    "start": "528040",
    "end": "534959"
  },
  {
    "text": "expression you don't you know new expression to create a new expression they use the factory p so everything is",
    "start": "534959",
    "end": "541079"
  },
  {
    "text": "expression. parameter or method call just in this case call so in this case",
    "start": "541079",
    "end": "546440"
  },
  {
    "text": "it's just expression. parameter and then it creates a new expression and we pass it Min bare minimum argument is that it",
    "start": "546440",
    "end": "552839"
  },
  {
    "text": "needs a type we need to know the type of that expression when we're building so we pass in a type optionally we can also",
    "start": "552839",
    "end": "559640"
  },
  {
    "text": "provide a meaningful name to That Type in this or to that parameter in this case my Str Str we can just send it in",
    "start": "559640",
    "end": "566160"
  },
  {
    "text": "with a name and if you don't send it in with a name as the parameter buil it's usually pick something like R zero or",
    "start": "566160",
    "end": "571240"
  },
  {
    "text": "something like that something with less meaning constant expression is another",
    "start": "571240",
    "end": "578240"
  },
  {
    "text": "kind of expression like I described to you earlier it takes a constant it wraps around a constant something that's either hardcoded or just read one time a",
    "start": "578240",
    "end": "585480"
  },
  {
    "text": "value that's just stored alongside the expression so if you do expression. constant it takes a an object in as its",
    "start": "585480",
    "end": "591920"
  },
  {
    "text": "um as its argument and then it just becomes a constant right you don't it's not anything it's just something that can be read it's something that can be",
    "start": "591920",
    "end": "598279"
  },
  {
    "text": "read straight from memory it doesn't have to be interpreted necessarily and then of course we have",
    "start": "598279",
    "end": "603920"
  },
  {
    "text": "method call expression which is very important and if method call expression represents a call to a method so what",
    "start": "603920",
    "end": "610040"
  },
  {
    "text": "we've done here is we've taken our expression. parameter and this is basically building r two upper and we'll break through this in a little bit this",
    "start": "610040",
    "end": "616079"
  },
  {
    "text": "is building our two upper things but the important thing is this expression. call where we give it something to operate on",
    "start": "616079",
    "end": "621760"
  },
  {
    "text": "in this case it's the parameter and then we give it a reference to the method using reflection and there's a couple of",
    "start": "621760",
    "end": "627440"
  },
  {
    "text": "different if you as you explore the expression API you'll see all the different ways you can find a um find a",
    "start": "627440",
    "end": "634120"
  },
  {
    "text": "method inside of a type but in this case we just use we just use reflection we get call expression. call we give it the",
    "start": "634120",
    "end": "640760"
  },
  {
    "text": "instance and then we give it the method that we want to call okay let's build our string. two upper",
    "start": "640760",
    "end": "648680"
  },
  {
    "text": "very simple we start with expression. parameter so we've got type of string and then we want to call it Str Str",
    "start": "648680",
    "end": "653880"
  },
  {
    "text": "because we're actually building it exactly as we want it up we want to make exactly that expression",
    "start": "653880",
    "end": "660800"
  },
  {
    "text": "all right then we C get our reference to our two upper method because we know that we've call two upper on something",
    "start": "660800",
    "end": "665880"
  },
  {
    "text": "at this point we know we need to capture we need so we need to capture that we need to use we use reflection in this case to just",
    "start": "665880",
    "end": "671279"
  },
  {
    "text": "capture and then we do our expression. call as we as I already showed you in the last slide and then you do this",
    "start": "671279",
    "end": "678320"
  },
  {
    "text": "expression. Lambda so this is the part where you say you have a body of the",
    "start": "678320",
    "end": "683760"
  },
  {
    "text": "expression you have the parameters let's let's glue them together and create our lamp and that's what this does",
    "start": "683760",
    "end": "691240"
  },
  {
    "text": "and that's it that's all the lines of code that we need to write to get this two upper expression we get to why that's useful in just a little bit but",
    "start": "691480",
    "end": "698320"
  },
  {
    "text": "it doesn't really require a lot of it doesn't really require a lot of code it's really natural you can really",
    "start": "698320",
    "end": "703440"
  },
  {
    "text": "reason about so then not only can you not only can you create them and read them but you can also use them",
    "start": "703440",
    "end": "710680"
  },
  {
    "text": "so Expressions can be compiled right in memory and then run just like another",
    "start": "710680",
    "end": "715959"
  },
  {
    "text": "method so after you've called expression. Lambda you've got a reference to a Lambda what's called a",
    "start": "715959",
    "end": "721440"
  },
  {
    "text": "Lambda expression and that Lambda expression contains information about it contains the body and the parameter so",
    "start": "721440",
    "end": "726720"
  },
  {
    "text": "once you call once you get to the point where expression. Lambda works because if it doesn't work it'll throw an exception it'll tell you it's invalid",
    "start": "726720",
    "end": "733000"
  },
  {
    "text": "for some reason you can call compil on and then you can do Dynamic invoke in this case uh Dynamic invoke it does not",
    "start": "733000",
    "end": "739959"
  },
  {
    "text": "have any typ protections it just takes a parameter of our argument so as long as those parameter of argum those that set",
    "start": "739959",
    "end": "746079"
  },
  {
    "text": "of parameters matches the the signature of the method that you created with your expression this will work but it's not",
    "start": "746079",
    "end": "753360"
  },
  {
    "text": "strongly typed but you can also use them like this where you can actually call expression. Lambda and give it a type",
    "start": "753360",
    "end": "759199"
  },
  {
    "text": "argument in this case it's Funk of string and string and then what you get back is a once you could do call.",
    "start": "759199",
    "end": "766360"
  },
  {
    "text": "compile you get a Lambda expression of type Funk of string string and then you",
    "start": "766360",
    "end": "771959"
  },
  {
    "text": "can call compile and then invoke it and it is actually strongly tyed so that's pretty cool",
    "start": "771959",
    "end": "779720"
  },
  {
    "text": "read them use them create them these are all the different ways that we can do with expression all right um any",
    "start": "779720",
    "end": "785600"
  },
  {
    "text": "questions that's that's the end no that'd be terrible because this is a real world talk I mean you came here to",
    "start": "785600",
    "end": "792000"
  },
  {
    "start": "788000",
    "end": "814000"
  },
  {
    "text": "see some real world this is this is about the real world you came here to see some action right you didn't want to just see like how to use the Expression",
    "start": "792000",
    "end": "797600"
  },
  {
    "text": "that's boring so let's talk about the real world we're going to ease into that by talking about some of the things that your favorite libraries do to use",
    "start": "797600",
    "end": "804079"
  },
  {
    "text": "expression so we'll just to two simple examples we'll do entity framework and",
    "start": "804079",
    "end": "810519"
  },
  {
    "text": "we'll do auto those are two my favorite libr person so enti framework thing is",
    "start": "810519",
    "end": "816279"
  },
  {
    "start": "814000",
    "end": "938000"
  },
  {
    "text": "that it translate those link Expressions into sequel right and does a pretty good job at that sometimes a lot of times but",
    "start": "816279",
    "end": "824079"
  },
  {
    "text": "that is core thing right if you're talking to SQL Server which I use SQL server with Entity framework it's going to translate your link Expressions it's",
    "start": "824079",
    "end": "830480"
  },
  {
    "text": "going to translate into SQ so this is a kind of this is a sample of what you might call to get that SQL",
    "start": "830480",
    "end": "837120"
  },
  {
    "text": "right so we've got db. products which is just representing which is a DB if you've not used Entity framework it's a",
    "start": "837120",
    "end": "842720"
  },
  {
    "text": "DB set or just an object that represents essentially a tape right but it's a table in in memory or it's a",
    "start": "842720",
    "end": "848800"
  },
  {
    "text": "representation of that table so then we call we and then we just want the",
    "start": "848800",
    "end": "853959"
  },
  {
    "text": "product where the name is egg we just want egg we just want to see eggs and then we do an order bu where we just order bu price in a descending room so",
    "start": "853959",
    "end": "861120"
  },
  {
    "text": "we want to see the most expensive eggs first okay pretty normal stuff there's really nothing special here and this is",
    "start": "861120",
    "end": "867519"
  },
  {
    "text": "roughly what it's going to for you now you've actually seen Ed Frameworks query",
    "start": "867519",
    "end": "872920"
  },
  {
    "text": "you know that it doesn't emit anything that looks anything like this it looks way Weir right and that's because you",
    "start": "872920",
    "end": "878199"
  },
  {
    "text": "know it's putting it in Brackets and it's making sure that it can run and it's making it pretty Forint but roughly",
    "start": "878199",
    "end": "884160"
  },
  {
    "text": "this is what comes out of the other end so you look at this and you say okay well that's great we have our link",
    "start": "884160",
    "end": "889920"
  },
  {
    "text": "expression then it translates to SQL magically we get things but what's the Magic in the middle and it literally",
    "start": "889920",
    "end": "896160"
  },
  {
    "text": "just is Magic that's all it is or at least it can feel that way because",
    "start": "896160",
    "end": "903560"
  },
  {
    "text": "a lot of the times when we how many people have had an Entity framework Entity framework query that they just",
    "start": "903560",
    "end": "909320"
  },
  {
    "text": "hated that they just hated that they they actually infected the SQL and they looked at the other end and they saw or",
    "start": "909320",
    "end": "914399"
  },
  {
    "text": "you got a nasty call from a DBA that's even better than the DBA L for the queries Entity framework right it",
    "start": "914399",
    "end": "920600"
  },
  {
    "text": "happens it happens so understanding what's happening under the hood can actually",
    "start": "920600",
    "end": "926079"
  },
  {
    "text": "kind of help you avoid those mistakes and one of them important things that you need to understand is that db.",
    "start": "926079",
    "end": "931839"
  },
  {
    "text": "products is an i what's called an i queriable it's a special type of ion numerable that can operate on",
    "start": "931839",
    "end": "937519"
  },
  {
    "text": "Expressions so they're very similar but I queriable has a ton of power behind",
    "start": "937519",
    "end": "942959"
  },
  {
    "start": "938000",
    "end": "983000"
  },
  {
    "text": "let me show you so this is the Tye this is the signature kind of for the most part it's the signature ofwar right you",
    "start": "942959",
    "end": "949800"
  },
  {
    "text": "give it a numerable of T and given an a numerable of T you call where it takes in a function a function that or it",
    "start": "949800",
    "end": "955639"
  },
  {
    "text": "takes in a function that's called a predicate and the predicate takes in the object of type T and returns fool and it",
    "start": "955639",
    "end": "961319"
  },
  {
    "text": "basically says should this object be returned in this set or not the queriable so the innumerable is",
    "start": "961319",
    "end": "968040"
  },
  {
    "text": "a static class inside of the link Library queriable also a static class",
    "start": "968040",
    "end": "973199"
  },
  {
    "text": "but instead of operating with a function it operates with an expression so it",
    "start": "973199",
    "end": "979079"
  },
  {
    "text": "takes in an expression of funk of T and that's really important because",
    "start": "979079",
    "end": "984800"
  },
  {
    "text": "this one can be interpreted by a library at runtime and that's exactly what it framework does it takes this link Theory",
    "start": "984800",
    "end": "991880"
  },
  {
    "text": "it takes all the stuff in behind it and it actually interprets it at runtime right this isn't compiled this is none",
    "start": "991880",
    "end": "998399"
  },
  {
    "text": "of this like the thing that I one of the things that I struggle with when I talk about Entity framework or the things",
    "start": "998399",
    "end": "1003839"
  },
  {
    "text": "that Junior developers often struggle struggle with is the concept that this function is never actually called in",
    "start": "1003839",
    "end": "1009519"
  },
  {
    "text": "most normal circumstances right because you're not calling two list you're not loading them into memory first and then operating on them most of the time most",
    "start": "1009519",
    "end": "1016639"
  },
  {
    "text": "of the time this is actually just being interpreted runtime Junior developers have a really strange time with that so",
    "start": "1016639",
    "end": "1022480"
  },
  {
    "text": "I have to go in and explain like what this is doing right you have to and I'm sure some of us have had to do",
    "start": "1022480",
    "end": "1027918"
  },
  {
    "text": "that so expression visitor is the Magic in between it is the thing in between it's used to read and it's used to read",
    "start": "1027919",
    "end": "1035280"
  },
  {
    "start": "1028000",
    "end": "1065000"
  },
  {
    "text": "expressions and operate on them and sometimes modify them let me show you so given our sample query our sample link",
    "start": "1035280",
    "end": "1041880"
  },
  {
    "text": "query that we have here this we Clause roughly becomes this we Clause inside of",
    "start": "1041880",
    "end": "1047558"
  },
  {
    "text": "our link expression rough becomes this Sequel and that's where the expression visitor comes in so this expression is",
    "start": "1047559",
    "end": "1055559"
  },
  {
    "text": "known as a binary expression the part the body of this expression is known as a as as a binary expression so a binary",
    "start": "1055559",
    "end": "1062960"
  },
  {
    "text": "expression has three simple Parts it has a left side it has a right side and has an operator right so left is an",
    "start": "1062960",
    "end": "1071760"
  },
  {
    "start": "1065000",
    "end": "1087000"
  },
  {
    "text": "expression the left side of that things is an expression the right side of that thing also an expression and the thing in the middle called a node type or",
    "start": "1071760",
    "end": "1079200"
  },
  {
    "text": "whatever you want to call it it is equal or not equal or greater than or greater than equal to so on and so",
    "start": "1079200",
    "end": "1086280"
  },
  {
    "text": "forth so expression visitor reads each piece of these each piece of that",
    "start": "1086280",
    "end": "1091320"
  },
  {
    "start": "1087000",
    "end": "1408000"
  },
  {
    "text": "expression and operates on it in a different way right its goal is to translate in this case its goal is to",
    "start": "1091320",
    "end": "1096559"
  },
  {
    "text": "translate that link query to C so first thing it does is it reads the left side it says p. name well I know based on",
    "start": "1096559",
    "end": "1105039"
  },
  {
    "text": "based on the uh the expression that I'm able to break down that this is a property expression name is the property",
    "start": "1105039",
    "end": "1110600"
  },
  {
    "text": "expression it's the property of the parameter that was passed in which is a product so it knows it's product. name",
    "start": "1110600",
    "end": "1116039"
  },
  {
    "text": "so it knows that it's operating on the product I queriable or at least that that base thing and then it looks at",
    "start": "1116039",
    "end": "1122799"
  },
  {
    "text": "that double equals in the middle and it says oh I know what that is that's saying it's equal it's a binary expression so I know that in SQL that's",
    "start": "1122799",
    "end": "1130120"
  },
  {
    "text": "actually just an equal sign right and then of course you've got your hardcoded eggs which is in quotes but SQL doesn't",
    "start": "1130120",
    "end": "1136280"
  },
  {
    "text": "do double quotes it does single quotes so your expression visitor implementation is actually taking this",
    "start": "1136280",
    "end": "1142880"
  },
  {
    "text": "and taking it and breaking it down bit by bit and saying this is the column name of this from this table this is the",
    "start": "1142880",
    "end": "1149480"
  },
  {
    "text": "roughly what equals means in SQL and I say roughly because try to compare equal",
    "start": "1149480",
    "end": "1154760"
  },
  {
    "text": "null inside a SQL doesn't work and then of course eggs is not in double quot it's sing like job all the jopt",
    "start": "1154760",
    "end": "1163000"
  },
  {
    "text": "but so that's the thing in the middle that's the Magic in the middle now you could fill an entire day talking about",
    "start": "1163000",
    "end": "1170760"
  },
  {
    "text": "expression visitor what its power is and how to do it so we're going to go through just a couple of quick examples",
    "start": "1170760",
    "end": "1176400"
  },
  {
    "text": "just to give you a little taste give you something to kind of chew on a little bit and it's important to understand",
    "start": "1176400",
    "end": "1182960"
  },
  {
    "text": "that because this is this is just uh it took me a little while to find this actually took me surprising amount of",
    "start": "1182960",
    "end": "1188280"
  },
  {
    "text": "time to find this on stack over it's an example of a query that was translated from a link expression right this is",
    "start": "1188280",
    "end": "1194720"
  },
  {
    "text": "what it looks like how many people can read this we can all read it how many people want to read it none of",
    "start": "1194720",
    "end": "1201559"
  },
  {
    "text": "us so that understanding what expression visitor does under the hood because C is",
    "start": "1201559",
    "end": "1206720"
  },
  {
    "text": "not the same as seel it's just not so understanding a little bit just even a little bit of how it translate queries",
    "start": "1206720",
    "end": "1212039"
  },
  {
    "text": "can be really powerful and that also funny enough to fill a",
    "start": "1212039",
    "end": "1217280"
  },
  {
    "text": "day so expression visitors can ED be used to read and operate on expressions or modify them kind of because",
    "start": "1217280",
    "end": "1223960"
  },
  {
    "text": "Expressions that expression API that I showed you expression. parameter expression. call all of those things are",
    "start": "1223960",
    "end": "1229080"
  },
  {
    "text": "immutable all the objects that you get out of that are immutable which is a good thing but an expression visitor can be used to modify that behavior at",
    "start": "1229080",
    "end": "1235799"
  },
  {
    "text": "runtime if you want it to let me show you this one so this is an example of an expression visitor and given this",
    "start": "1235799",
    "end": "1242559"
  },
  {
    "text": "expression visitor when I call visit this is the this is a method that you can override if you if you implement",
    "start": "1242559",
    "end": "1249000"
  },
  {
    "text": "expression visitor it has no required implementation you can Implement all the things that you just need to implement",
    "start": "1249000",
    "end": "1255159"
  },
  {
    "text": "in this case I just want to say if I visit any expression of any type I just want to make sure that anything",
    "start": "1255159",
    "end": "1261400"
  },
  {
    "text": "that I call I want to just type it in all caps um so I have this little protection here if node type is node",
    "start": "1261400",
    "end": "1267919"
  },
  {
    "text": "expression type parameter well you can't call to Upper on a parameter in this particular case and then every case so",
    "start": "1267919",
    "end": "1273799"
  },
  {
    "text": "that doesn't exactly work so you have to just return the base thing but after you get past that point if your type of your",
    "start": "1273799",
    "end": "1279520"
  },
  {
    "text": "expression is string because all Expressions have a type associated with them we're going to call the get meth the get upper method so you can",
    "start": "1279520",
    "end": "1287520"
  },
  {
    "text": "implement this class to modify your behavior imagine if you had something where you said I want to change all the",
    "start": "1287520",
    "end": "1292720"
  },
  {
    "text": "binary Expressions you wanted to mess with your coword so you wanted to translate all the binary Expressions if",
    "start": "1292720",
    "end": "1298080"
  },
  {
    "text": "they're ands just translat them to ores and then run it in production and then",
    "start": "1298080",
    "end": "1303679"
  },
  {
    "text": "look for a job so you can actually follow along Oh",
    "start": "1303679",
    "end": "1311080"
  },
  {
    "text": "no I got my little example here let's walk through this very quickly so we've got our two upper visitor we're just",
    "start": "1311080",
    "end": "1317440"
  },
  {
    "text": "instantiating it and we have our expression up here so what we're going to do is call this two upper visitor. visit and convert all it does is take",
    "start": "1317440",
    "end": "1323720"
  },
  {
    "text": "that expression and just return to the expression at the same time and then we're going to console. right line",
    "start": "1323720",
    "end": "1330039"
  },
  {
    "text": "express. compile then call a dynamic invoke uh and then the output of that if",
    "start": "1330039",
    "end": "1335840"
  },
  {
    "text": "you do that is the cheese belong to it's capitalized this part and it's capitalized this",
    "start": "1335840",
    "end": "1341640"
  },
  {
    "text": "part pretty cool you can actually look at that this two upper example is this is a l so go",
    "start": "1341640",
    "end": "1349240"
  },
  {
    "text": "ahead and click it I'll wait or you can just check my Twitter afterwards this is one of those things",
    "start": "1349240",
    "end": "1355760"
  },
  {
    "text": "this is using net fiddle get that out there's that that's happy and what",
    "start": "1355760",
    "end": "1361640"
  },
  {
    "text": "that is if you can go to this two upper visitor you've got a little bit of code here and then you can run it and you can",
    "start": "1361640",
    "end": "1367760"
  },
  {
    "text": "see that I'm not lying to you it's just basically copied and pasted from that slide that I showed you the two upper",
    "start": "1367760",
    "end": "1373400"
  },
  {
    "text": "visitor same stuff here and then if you zoomed in here it says the cheese belong to Spencer me go and zoom in on that for",
    "start": "1373400",
    "end": "1380360"
  },
  {
    "text": "maximum like absorption all right there you",
    "start": "1380360",
    "end": "1386000"
  },
  {
    "text": "go so that's expression visitor again I could talk about expression visitor all day you could do a workshop on it like I",
    "start": "1386000",
    "end": "1391760"
  },
  {
    "text": "said we're not going to talk about it anymore the important thing to know is that you have it available it's a tool inside your toolbx my boss loves to say",
    "start": "1391760",
    "end": "1398080"
  },
  {
    "text": "well let's play with the Legos that we have this is a really awesome Lego this is actually like a box of Legos inside",
    "start": "1398080",
    "end": "1403840"
  },
  {
    "text": "your Lego box so at least you know it's there all right automapper so automapper",
    "start": "1403840",
    "end": "1410159"
  },
  {
    "start": "1408000",
    "end": "1477000"
  },
  {
    "text": "has a really simple use case for um expressions and this is some Auto how many people use",
    "start": "1410159",
    "end": "1416200"
  },
  {
    "text": "automapper all right very good so automapper is like one of my favorite libraries to use because it allows you",
    "start": "1416200",
    "end": "1421760"
  },
  {
    "text": "to do some really cool things it has a lot of conveniences built in to make our lives as developers easy so one of its",
    "start": "1421760",
    "end": "1428919"
  },
  {
    "text": "main use cases is just selecting right so if given a map between an employee and an employee model let's say the par",
    "start": "1428919",
    "end": "1435640"
  },
  {
    "text": "the property names don't match up exactly so we could say say for the member the source member the target",
    "start": "1435640",
    "end": "1441120"
  },
  {
    "text": "member first name we want to get it from the my first name um property on our",
    "start": "1441120",
    "end": "1447640"
  },
  {
    "text": "source op okay so we're not going to go through exactly what this is doing the important thing to know is that the SE",
    "start": "1447640",
    "end": "1453960"
  },
  {
    "text": "to C goes into c. first name and the g. my first name those are expressions if you look at them the map from uses",
    "start": "1453960",
    "end": "1461240"
  },
  {
    "text": "Expressions they all use Expressions on the and this becomes really powerful when you do something like project to",
    "start": "1461240",
    "end": "1468399"
  },
  {
    "text": "how many people use automapper with project to this is like Oh I like that there was a lot less hands that time",
    "start": "1468399",
    "end": "1474880"
  },
  {
    "text": "this is Magic let's let me let me let me show you so consider this you've got a DBA that already hates you because you",
    "start": "1474880",
    "end": "1481080"
  },
  {
    "start": "1477000",
    "end": "1547000"
  },
  {
    "text": "use entity FR so now you want to say that okay we've got this item detail and let's say it just has like 102",
    "start": "1481080",
    "end": "1487360"
  },
  {
    "text": "properties on the so it has an ID primary key a name and then literally 100 other properties",
    "start": "1487360",
    "end": "1492679"
  },
  {
    "text": "right and then you have basically a view inside of the UI that just needs I and",
    "start": "1492679",
    "end": "1498880"
  },
  {
    "text": "name it doesn't need any of those other properties it's just a list of it's just a list of the products that you want",
    "start": "1498880",
    "end": "1505080"
  },
  {
    "text": "right so you do something like this how many people do stuff like this where you just map it you just call a mapper do",
    "start": "1505080",
    "end": "1510960"
  },
  {
    "text": "map you just say I just want the item detail model and you just hand it a set of data you've done this before many",
    "start": "1510960",
    "end": "1517159"
  },
  {
    "text": "many people if you use automa you've done something like this but here's be the dragons because what this is going to do is a select star and the reason",
    "start": "1517159",
    "end": "1524159"
  },
  {
    "text": "it's going to do a select star is it's going to take db. item details and say oh they want the enti ire set afterwards",
    "start": "1524159",
    "end": "1529600"
  },
  {
    "text": "I will evaluate that and then convert it into item detail model so what you've done is a select Star right you've",
    "start": "1529600",
    "end": "1535960"
  },
  {
    "text": "selected all 102 properties and your DBA is screaming at you and knocking down your door because you're returning way",
    "start": "1535960",
    "end": "1541480"
  },
  {
    "text": "too many columns or doing these expensive queries and there's no need to do it that's where project 2 comes in",
    "start": "1541480",
    "end": "1549360"
  },
  {
    "start": "1547000",
    "end": "1597000"
  },
  {
    "text": "Project two is one of my favorite parts of entity frame of automap because what you can do is as",
    "start": "1549360",
    "end": "1555159"
  },
  {
    "text": "long as you have a map defined you can call project and you can give it just the type of the item detail model and what and",
    "start": "1555159",
    "end": "1562399"
  },
  {
    "text": "automapper does under the foot is it takes those expressions that I showed you takes those expressions that I showed you and then does magic it just",
    "start": "1562399",
    "end": "1570159"
  },
  {
    "text": "projects it literally projects that item detail to the item detail model and it just says oh they just want the ID and",
    "start": "1570159",
    "end": "1577559"
  },
  {
    "text": "name property and the magic is so good because it all does this under the hood and it works with just about every and",
    "start": "1577559",
    "end": "1583440"
  },
  {
    "text": "automapper will do this with just about every om that uses link it will say select ID and name from item details",
    "start": "1583440",
    "end": "1590799"
  },
  {
    "text": "instead of all 102 properties on that object super cool and all you have to do is just instantiate your",
    "start": "1590799",
    "end": "1597559"
  },
  {
    "start": "1597000",
    "end": "1644000"
  },
  {
    "text": "M so let's talk about so we've seen Entity framework we know the stuff that",
    "start": "1597559",
    "end": "1603159"
  },
  {
    "text": "magic that happens in between and we know automapper and all that magic and we know that we've used libraries like",
    "start": "1603159",
    "end": "1608320"
  },
  {
    "text": "ASP net MVC and razor that have done all these things so those are great so let's talk about my real world experience so a",
    "start": "1608320",
    "end": "1616080"
  },
  {
    "text": "little bit of background on me usually people start to talk that that's not really that interesting so this is relevant so I'll tell you so I am I am a",
    "start": "1616080",
    "end": "1622960"
  },
  {
    "text": "software architect for a startup in St Louis Missouri you look at the United States it's literally right in the middle it's pretty boring place to go",
    "start": "1622960",
    "end": "1629760"
  },
  {
    "text": "you probably many of you probably never heard of and it's called St Louis Missouri and I work for a small startup",
    "start": "1629760",
    "end": "1635080"
  },
  {
    "text": "called rivet and rivet makes integration software so they integrate uh accounting",
    "start": "1635080",
    "end": "1640559"
  },
  {
    "text": "systems with project management systems stuff like that and we had a need as an architect",
    "start": "1640559",
    "end": "1647880"
  },
  {
    "start": "1644000",
    "end": "1715000"
  },
  {
    "text": "we had had I I I Ober actually a senior developer thrust into the architect role",
    "start": "1647880",
    "end": "1653480"
  },
  {
    "text": "um unbeknownst to me at the time but we needed to be able to create some kind of model mapper because what developers",
    "start": "1653480",
    "end": "1660960"
  },
  {
    "text": "were doing to transfer the data and this was this was a system that I inherited as many of you have uh and then built on",
    "start": "1660960",
    "end": "1667559"
  },
  {
    "text": "top of as many of you have right it was basically just an ETL tool it a really",
    "start": "1667559",
    "end": "1672720"
  },
  {
    "text": "fancy ETL tool that did some magical foot and essentially when we have something like",
    "start": "1672720",
    "end": "1678919"
  },
  {
    "text": "a Salesforce customer and a QuickBooks customer we want to map those things together we want to take a customer from Salesforce and map it to one in",
    "start": "1678919",
    "end": "1685039"
  },
  {
    "text": "QuickBooks in order to do our integration magic and then send that customer all the way up to C so we'd end up with models that kind of look like",
    "start": "1685039",
    "end": "1691760"
  },
  {
    "text": "this right Salesforce customer and it has like property names that are kind of the same like create date and open date",
    "start": "1691760",
    "end": "1699600"
  },
  {
    "text": "which kind of mean the same thing but that's the meaningful thing that's the meaningful mapping that we wanted to generate and then of course the",
    "start": "1699600",
    "end": "1705440"
  },
  {
    "text": "Salesforce customer has a customer name for some reason and and then quot books it doesn't really matter I didn't really",
    "start": "1705440",
    "end": "1710760"
  },
  {
    "text": "care right I just knew that they were different and this was this happened all the time so we would write stored procs",
    "start": "1710760",
    "end": "1717640"
  },
  {
    "start": "1715000",
    "end": "1784000"
  },
  {
    "text": "or at least my predecessors would write stored procs to move this from one table into a staging room essentially they do",
    "start": "1717640",
    "end": "1723519"
  },
  {
    "text": "an insert statement on the QuickBooks Customer because that's where we wanted to send the Salesforce customer and we'd say insert the name and the open date",
    "start": "1723519",
    "end": "1730840"
  },
  {
    "text": "select customer name create date from Salesforce customer and we' do some checking to make sure that we didn't duplicate date so this is the we write",
    "start": "1730840",
    "end": "1737480"
  },
  {
    "text": "these stor now do that for hundreds of objects and thousands of properties and don't ever",
    "start": "1737480",
    "end": "1743279"
  },
  {
    "text": "make a mistake because then you Corr upt data okay how many people write store",
    "start": "1743279",
    "end": "1748799"
  },
  {
    "text": "procedures as a regular part of their job how many people are good at writing store procedures I'm putting my hand",
    "start": "1748799",
    "end": "1754320"
  },
  {
    "text": "down because nobody's good at writing stor procedures especially stored procedures with me messy things like this what we found was that was that our",
    "start": "1754320",
    "end": "1761320"
  },
  {
    "text": "developers we having a really hard time getting these store procedures written in a really consistent good way so we",
    "start": "1761320",
    "end": "1768480"
  },
  {
    "text": "had something that was just it it didn't scale very well because we'd find mistakes and we'd often find them when",
    "start": "1768480",
    "end": "1774799"
  },
  {
    "text": "it was too late when it was Downstream and we've already overwrote some customers data not good customers do not",
    "start": "1774799",
    "end": "1780480"
  },
  {
    "text": "like that so I knew and I heard about this",
    "start": "1780480",
    "end": "1786880"
  },
  {
    "text": "thing I had just fresh off another job and I turned to my boss and I said there's a way we can do this better",
    "start": "1786880",
    "end": "1793200"
  },
  {
    "text": "since we're already talking about entities we already kind of modeled them in Entity framework um for both sides we",
    "start": "1793200",
    "end": "1799559"
  },
  {
    "text": "already have the type information that we need so we can use I think we can use these things called Expressions now keep",
    "start": "1799559",
    "end": "1805159"
  },
  {
    "text": "in mind at the time I knew what an expression was I probably came like if I had came out of this talk if I had",
    "start": "1805159",
    "end": "1811120"
  },
  {
    "text": "attended this talk I would have came out with the same knowledge probably a little more but I just knew conceptually",
    "start": "1811120",
    "end": "1816320"
  },
  {
    "text": "what they were and what they could do and I said I think we can do this better I think we could create strongly type B",
    "start": "1816320",
    "end": "1823159"
  },
  {
    "text": "bindings in a way that we can just bind two entities together and just make it generate the secret",
    "start": "1823159",
    "end": "1828480"
  },
  {
    "text": "and he said you have one hour to do approv concept okay not to brag but I had",
    "start": "1828480",
    "end": "1834880"
  },
  {
    "text": "something in 40 minutes which was pretty good and he said man if you worked this if you worked this well all the time we'd have everything done like way",
    "start": "1834880",
    "end": "1840919"
  },
  {
    "text": "sooner and I'd like yeah but then I'd be really tired and that's not anyway so essentially what I built was a way for",
    "start": "1840919",
    "end": "1848519"
  },
  {
    "start": "1844000",
    "end": "1931000"
  },
  {
    "text": "us to take let's say we have SF customer to QB customer and what we'd have is what we I we' called them a SQL",
    "start": "1848519",
    "end": "1854320"
  },
  {
    "text": "generator instead of stor procedures we had SQL generators what it would do is we'd give it two types so we'd have this",
    "start": "1854320",
    "end": "1860720"
  },
  {
    "text": "is argument this this example is missing it but we'd have two type arguments we'd say the source object the Salesforce",
    "start": "1860720",
    "end": "1866519"
  },
  {
    "text": "customer Target object with QuickBooks customer and we create these really strong bindings and we do stuff like",
    "start": "1866519",
    "end": "1871919"
  },
  {
    "text": "this where we take Source field customer name is equal to or we would just say like the Des the the Target Field comes",
    "start": "1871919",
    "end": "1878960"
  },
  {
    "text": "from this static data or this column right it didn't really matter so we could say customer name and it goes to",
    "start": "1878960",
    "end": "1886080"
  },
  {
    "text": "name and then it goes into the name column inside of the or sorry that comes",
    "start": "1886080",
    "end": "1891639"
  },
  {
    "text": "from the name from The Source object but we want to trim it because a lot of we work with a lot of Legacy systems and",
    "start": "1891639",
    "end": "1897919"
  },
  {
    "text": "for some reason they love having leaving leading and trailing spaces we've all worked on systems that do this right so",
    "start": "1897919",
    "end": "1903600"
  },
  {
    "text": "we just wanted to make sure that it was true and then we wanted to create a create we wanted to have a create date",
    "start": "1903600",
    "end": "1909000"
  },
  {
    "text": "now maybe in the Target system that create date um is or that open date is a",
    "start": "1909000",
    "end": "1914480"
  },
  {
    "text": "required field so we needed to be able to overwrite it right so we do create date and if it wasn't there we just do open date and then we do our cols",
    "start": "1914480",
    "end": "1920960"
  },
  {
    "text": "operator and just say datetime.now that'll be close enough when we're developers we're just trying to get it",
    "start": "1920960",
    "end": "1926000"
  },
  {
    "text": "done we're trying to deliver an integration product if they hate it down the road we can always change right so our task was to write something",
    "start": "1926000",
    "end": "1933559"
  },
  {
    "start": "1931000",
    "end": "2011000"
  },
  {
    "text": "akin to an expression visitor now at the time I didn't know that expression visitor existed so I ended up rolling my",
    "start": "1933559",
    "end": "1939080"
  },
  {
    "text": "own which was kind of which you know you don't know what you don't know but in retrospect I feel kind of dumb but I",
    "start": "1939080",
    "end": "1944799"
  },
  {
    "text": "pretty much reimplemented an expression visit and then I needed to be able to handle any typee of expression that we",
    "start": "1944799",
    "end": "1950679"
  },
  {
    "text": "wanted to translate now if you do like a DOT starts with a string starts with an EDI framework what's going to do is",
    "start": "1950679",
    "end": "1956480"
  },
  {
    "text": "translate that into a like statement so we needed to do roughly that same thing we needed to be able to say okay if we",
    "start": "1956480",
    "end": "1961960"
  },
  {
    "text": "trim our source data we trim the name from our source data then we want to call L trim R trim inside of SQL because",
    "start": "1961960",
    "end": "1968639"
  },
  {
    "text": "all this all this magic was happening in SQL right it was just cooking the SQL",
    "start": "1968639",
    "end": "1973760"
  },
  {
    "text": "for or if we want to do something like this we that's that's obviously an isnull right that's roughly that's pretty much",
    "start": "1973760",
    "end": "1980799"
  },
  {
    "text": "the same thing inside a SQL so we take that um that that expression right there",
    "start": "1980799",
    "end": "1986480"
  },
  {
    "text": "that coals operator expression and we would call is null instead and we'd say create date and then we'd even go so far",
    "start": "1986480",
    "end": "1992799"
  },
  {
    "text": "as to be able to say date time. now is actually get date inside a SQL Server which generally you should have your",
    "start": "1992799",
    "end": "1998760"
  },
  {
    "text": "target system your your running system tell the SQL Server the date not the other way around that's another story",
    "start": "1998760",
    "end": "2004200"
  },
  {
    "text": "you get the idea right date time. now gets interpreted and we can trans that if we wanted to ins into get date so",
    "start": "2004200",
    "end": "2011679"
  },
  {
    "start": "2011000",
    "end": "2102000"
  },
  {
    "text": "what it did what we ended up with is what we end we ended up with something that could emit Nic looking sequels it",
    "start": "2011679",
    "end": "2018000"
  },
  {
    "text": "didn't Emmit like too crazy a sequel and it did and it supported a l a large range of operations it supported joins",
    "start": "2018000",
    "end": "2024559"
  },
  {
    "text": "and we could support we could basically just join kind of like we do it in Entity framework but we could do it",
    "start": "2024559",
    "end": "2029639"
  },
  {
    "text": "actually we made it even more convenient for developers um we could do joins with if when we needed data from other",
    "start": "2029639",
    "end": "2035440"
  },
  {
    "text": "entities right and we could send that in it admitted ni looking seet it was predictable because we had a set of",
    "start": "2035440",
    "end": "2041320"
  },
  {
    "text": "tests behind we wrote all we wrote a bunch of tests to cover it and it saved",
    "start": "2041320",
    "end": "2046600"
  },
  {
    "text": "developers thousands of hours over a two or threee period now that is that is",
    "start": "2046600",
    "end": "2053240"
  },
  {
    "text": "Money in the Bank that is not only money in the bank that's delivery that is being able to like when somebody would",
    "start": "2053240",
    "end": "2058800"
  },
  {
    "text": "say oh we need we need a SQL generator and we'd say oh that's that's no problem",
    "start": "2058800",
    "end": "2063960"
  },
  {
    "text": "well we can crank those out pretty quickly right because we don't have to worry about store procedures and the best thing was is that we could attach",
    "start": "2063960",
    "end": "2070158"
  },
  {
    "text": "all this sorts of logic under the hood to say like well we actually need to do these other Transformations right we need to make the platform aware of those",
    "start": "2070159",
    "end": "2078040"
  },
  {
    "text": "relationships and we could do that because we would just run a bunch of extra SQL under the hood as part of this",
    "start": "2078040",
    "end": "2083280"
  },
  {
    "text": "thing it would all be wrapped in a transaction now down the road we found problems with this we've actually moved",
    "start": "2083280",
    "end": "2089158"
  },
  {
    "text": "on from this but at the time it was super powerful and it saved a lot it allowed us to deliver software really",
    "start": "2089159",
    "end": "2095118"
  },
  {
    "text": "quickly and it saved us a lot of money and it saved where best part developers didn't hate their jobs because they weren't writing store",
    "start": "2095119",
    "end": "2102119"
  },
  {
    "start": "2102000",
    "end": "2174000"
  },
  {
    "text": "procedures so that's my real world example let's talk about some let's talk some maybe some closer ones maybe if",
    "start": "2102119",
    "end": "2108880"
  },
  {
    "text": "you're an asp net API provider or something like you're an API provider writing an asp net so let's say we want",
    "start": "2108880",
    "end": "2114560"
  },
  {
    "text": "to order by string not not a string property but literally give it a",
    "start": "2114560",
    "end": "2119640"
  },
  {
    "text": "property name as a string as opposed to giving it like an expression right at runtime so we maybe want to do something",
    "start": "2119640",
    "end": "2125760"
  },
  {
    "text": "like this where we call a where we provide an endpoint where we want to say oh if you want to order by the data that",
    "start": "2125760",
    "end": "2131839"
  },
  {
    "text": "you want to get back maybe you can just provide this parameter order by equals name now if you like o data you could",
    "start": "2131839",
    "end": "2138640"
  },
  {
    "text": "always install o data and you kind of get this for free but if you don't want to do that or you want something more custom you could do something like this",
    "start": "2138640",
    "end": "2145359"
  },
  {
    "text": "right because this is the goal this is the goal but it's not like you're going to have a case statement where you say",
    "start": "2145359",
    "end": "2151280"
  },
  {
    "text": "oh if it's name then uh order by c c into name right I mean you might if you",
    "start": "2151280",
    "end": "2157280"
  },
  {
    "text": "didn't know you had Expressions you might actually do that I've done stuff like that and it works but you could save yourself",
    "start": "2157280",
    "end": "2164040"
  },
  {
    "text": "keystrokes let me show you we could do something like this we could roll our own this thing right and",
    "start": "2164040",
    "end": "2170720"
  },
  {
    "text": "it could be it's really useful so our solution is to cook an expression so our goal is to get to this this link here",
    "start": "2170720",
    "end": "2178520"
  },
  {
    "start": "2174000",
    "end": "2289000"
  },
  {
    "text": "right where we say order by and we want to go c. name but we want don't want to do that case statement because maybe there's a thousand properties we don't",
    "start": "2178520",
    "end": "2184800"
  },
  {
    "text": "want to write a case a switch statement with a thousand things so this is roughly what it might look",
    "start": "2184800",
    "end": "2190200"
  },
  {
    "text": "like so we've got our it takes our I queriable so quer it takes our queriable expression and then it takes the",
    "start": "2190200",
    "end": "2195760"
  },
  {
    "text": "property name or field name if you use field and then you can give it a b to say if you want it to be ascending or",
    "start": "2195760",
    "end": "2201800"
  },
  {
    "text": "descending right you could also do it where you have order by property or field descending right you could have",
    "start": "2201800",
    "end": "2207160"
  },
  {
    "text": "that implementation we'll stick with this one so our our goal is to cook our expression and then apply it to our I",
    "start": "2207160",
    "end": "2212599"
  },
  {
    "text": "queriable chain so we're going to take our C to c. we're going to we're going to this is",
    "start": "2212599",
    "end": "2218440"
  },
  {
    "text": "the this is the goal this is what we need to bring out of this so when our method we need to capture the type of T",
    "start": "2218440",
    "end": "2225040"
  },
  {
    "text": "right we don't know what type T is we just want to know that we want to order by something on type T so we capture that element type and then we say",
    "start": "2225040",
    "end": "2231240"
  },
  {
    "text": "expression. parameter and we capture that type that represents the parameter to the expression that we're cooking",
    "start": "2231240",
    "end": "2236839"
  },
  {
    "text": "right that represents the sole parameter to the order by to the order by claw and then we can do this expression.",
    "start": "2236839",
    "end": "2244560"
  },
  {
    "text": "property or field there's also expression. property uh property or field is pretty useful though um where",
    "start": "2244560",
    "end": "2250000"
  },
  {
    "text": "you give it a thing an expression to say this is the instance we want to find the property for and here's the name of that",
    "start": "2250000",
    "end": "2256079"
  },
  {
    "text": "property now the cool thing here is if that if that line doesn't find a property with that name it throws an",
    "start": "2256079",
    "end": "2262200"
  },
  {
    "text": "exception so you can always handle that and say like invalid order by or just ignore the exception and let the query",
    "start": "2262200",
    "end": "2267520"
  },
  {
    "text": "go through right you have that choice and then you cook up expression. Lambda you give it your property that's the",
    "start": "2267520",
    "end": "2273800"
  },
  {
    "text": "thing that's the body of the expression and then you give it your uh type of t or the parameter that you've wrapped in",
    "start": "2273800",
    "end": "2280280"
  },
  {
    "text": "your type of T that's the parameter and then you've created C goes into C.N name it's the same thing up there pretty",
    "start": "2280280",
    "end": "2288119"
  },
  {
    "text": "awesome so remember this is our goal so we need to do just a few more things",
    "start": "2288119",
    "end": "2293200"
  },
  {
    "text": "because our goal is to call this method we need to call the order by Method on the queriable static class so in order",
    "start": "2293200",
    "end": "2299520"
  },
  {
    "text": "to do that we need to use a little reflection this is where it gets a tiny bit hairy so this is what it looks like so",
    "start": "2299520",
    "end": "2306599"
  },
  {
    "text": "we need a method name so we have order by order by descending since we've just said in our we just have a parameter",
    "start": "2306599",
    "end": "2312400"
  },
  {
    "text": "inside of that thing buol ascending we say if ascending is true then just do order by Otherwise do order by descend",
    "start": "2312400",
    "end": "2318599"
  },
  {
    "text": "and then this is the expression. call this is where the part where I tell you that this is like you need to kind of",
    "start": "2318599",
    "end": "2325079"
  },
  {
    "text": "look at the expression API we've never used it before and experiment with it because this is kind of nasty to look at right like this is I could describe to",
    "start": "2325079",
    "end": "2331720"
  },
  {
    "text": "you in great detail what this is it's just a type signature for a multitude of methods that are available to represent",
    "start": "2331720",
    "end": "2337440"
  },
  {
    "text": "present your expression but going through it quickly we need to capture the order by or order by descending",
    "start": "2337440",
    "end": "2343040"
  },
  {
    "text": "method on our queriable object so we say here's the type since it's a static class we need to give it we need to get",
    "start": "2343040",
    "end": "2348760"
  },
  {
    "text": "the type of it so we can just look for that method we need the method name we need the type signature of that method",
    "start": "2348760",
    "end": "2354960"
  },
  {
    "text": "because we're cooking it custom we need the expression that we're querying for and then we need our selector the",
    "start": "2354960",
    "end": "2360920"
  },
  {
    "text": "selector being the method that we cooked up right here in this",
    "start": "2360920",
    "end": "2368720"
  },
  {
    "text": "all right so yeah not going to go through that because what I'm going to do",
    "start": "2368720",
    "end": "2373839"
  },
  {
    "start": "2372000",
    "end": "2450000"
  },
  {
    "text": "instead is show you in net fiddle I'm not going to show you but I'm going to show you that it exists so order Pride property example I have a net fiddle",
    "start": "2373839",
    "end": "2380680"
  },
  {
    "text": "that does exactly that uh let's",
    "start": "2380680",
    "end": "2386040"
  },
  {
    "text": "Twitter order by name look that and I and if you look at",
    "start": "2387440",
    "end": "2396720"
  },
  {
    "text": "that on on y that here so just a net fiddle zoom in",
    "start": "2396720",
    "end": "2404240"
  },
  {
    "text": "a little bit and what I have here is just giving it order by property ref field name and",
    "start": "2404240",
    "end": "2410240"
  },
  {
    "text": "what it'll do is write the set of employees in order you can see we have Gary Spencer Michael and Amy so when we",
    "start": "2410240",
    "end": "2416640"
  },
  {
    "text": "run this since we called order by property field name we get Amy Gary Michael Spencer in in order that's",
    "start": "2416640",
    "end": "2424839"
  },
  {
    "text": "pretty cool and uh this is attached there's a link to this that attached to",
    "start": "2424839",
    "end": "2430160"
  },
  {
    "text": "a paging example I did in aspet so you can actually see it end to end you can actually download look at this example",
    "start": "2430160",
    "end": "2436119"
  },
  {
    "text": "and uh see the whole thing it's a few years old so it will probably compile uh but you'll get the idea right because",
    "start": "2436119",
    "end": "2443000"
  },
  {
    "text": "you'll see you'll see the whole thing you'll see it from ASP net all the way down to when you cook the expression so",
    "start": "2443000",
    "end": "2448480"
  },
  {
    "text": "pretty handy all right more real world stuff how about your own rules engine or search filter system or whatever right",
    "start": "2448480",
    "end": "2455599"
  },
  {
    "start": "2450000",
    "end": "2602000"
  },
  {
    "text": "you could easily you could see how easily would be able to take that thing that I just showed you and just copy paste it into a we right and create some",
    "start": "2455599",
    "end": "2463720"
  },
  {
    "text": "kind of rules engine so let's do that let's do that right here so let's define something called a rule and this example",
    "start": "2463720",
    "end": "2470200"
  },
  {
    "text": "is a little bit rote so what we basically want to do is represent a binary expression but we want to",
    "start": "2470200",
    "end": "2475680"
  },
  {
    "text": "represent this in a data structure of some kind because we want to store this or we want to be able to take from some",
    "start": "2475680",
    "end": "2481040"
  },
  {
    "text": "Json and uh deserialize it into something that's meaningful to C and",
    "start": "2481040",
    "end": "2486079"
  },
  {
    "text": "then cook an expression with it well you can do that very easily with Expressions so we have our rule it says given this",
    "start": "2486079",
    "end": "2491839"
  },
  {
    "text": "name of this property and this operation or operator uh and this value we want to say oh name is equal to Gary or higher",
    "start": "2491839",
    "end": "2499960"
  },
  {
    "text": "date is greater than 1126 stuff like that so we do that we",
    "start": "2499960",
    "end": "2505920"
  },
  {
    "text": "Define our data we either serialize it from Jason or we just hardcode it for this example we have our name operation.",
    "start": "2505920",
    "end": "2512400"
  },
  {
    "text": "equal name equal to VAR higher date equal to daytime right",
    "start": "2512400",
    "end": "2517760"
  },
  {
    "text": "so then what we can do is cook what we can cook a binary expression and just to break this down very quickly what we",
    "start": "2517760",
    "end": "2525160"
  },
  {
    "text": "need to do is take these rules essentially and translate them into an expression for each of these things so",
    "start": "2525160",
    "end": "2530240"
  },
  {
    "text": "we say we're going to capture the property of that parameter we know the parameter coming in is going to be in a type employee we're going to capture",
    "start": "2530240",
    "end": "2536839"
  },
  {
    "text": "that Pro that property we're going to grab the property name we're going to take the constant value the right side",
    "start": "2536839",
    "end": "2542640"
  },
  {
    "text": "of our binary expression we have our left which is our property we have our right which is our constant and then we know that our rule our operation rule is",
    "start": "2542640",
    "end": "2550119"
  },
  {
    "text": "either equal or greater to greater or greater than or equal to or greater than we capture that and we call this called",
    "start": "2550119",
    "end": "2556920"
  },
  {
    "text": "make binary and what it will do is we'll make that binary expression for you and then we just set it to the binary",
    "start": "2556920",
    "end": "2562920"
  },
  {
    "text": "expression that we declared up here we just set it to null or and we if it's set to null we just set it to that or",
    "start": "2562920",
    "end": "2571240"
  },
  {
    "text": "we create a new binary expression where we essentially pass in and also so we create a chain of binary Expressions",
    "start": "2571240",
    "end": "2577880"
  },
  {
    "text": "depending on the rules if you look at the code under the hood if you looked at this expression under the hood if you",
    "start": "2577880",
    "end": "2584119"
  },
  {
    "text": "declared it like this you would see that this is just a series of binary Expressions that are all operating on",
    "start": "2584119",
    "end": "2589280"
  },
  {
    "text": "each other and so this is what this becomes you got your e you've translated",
    "start": "2589280",
    "end": "2594720"
  },
  {
    "text": "your rule up here you've got name equal to Gary and higher date equal or greater than 2 uh",
    "start": "2594720",
    "end": "2601800"
  },
  {
    "text": "1126 pretty cool and I have an example here too I will tweet that out",
    "start": "2601800",
    "end": "2607760"
  },
  {
    "start": "2602000",
    "end": "2697000"
  },
  {
    "text": "click tools engine example sweet that out pretty sweet awesome and then if I I",
    "start": "2607760",
    "end": "2614880"
  },
  {
    "text": "will show you real quick if I run it here so we've got our same set of employees and we have our rules right",
    "start": "2614880",
    "end": "2620960"
  },
  {
    "text": "here so we're looking for name Gary High date 11 2016 so we've taken these rules",
    "start": "2620960",
    "end": "2626520"
  },
  {
    "text": "that we've declared as in as code AS or sorry as data and then created an",
    "start": "2626520",
    "end": "2631680"
  },
  {
    "text": "expression down here to actually cook that up and then use it and we have Gary",
    "start": "2631680",
    "end": "2638599"
  },
  {
    "text": "1127 if we Chang that to Amy reran it I don't remember what",
    "start": "2638599",
    "end": "2645200"
  },
  {
    "text": "higher date was higher date is not bad apparently we run that and oh do we have",
    "start": "2645200",
    "end": "2650839"
  },
  {
    "text": "an Amy record oh we don't have an AM record there we go now when we run it",
    "start": "2650839",
    "end": "2657400"
  },
  {
    "text": "now we get Amy so what you've done is you've just declared some kind of way to represent",
    "start": "2657400",
    "end": "2663720"
  },
  {
    "text": "an expression inside of data and then you knew how to use expressions you went to this awesome talk and you were able",
    "start": "2663720",
    "end": "2669240"
  },
  {
    "text": "to translate that and make your own rules now there's a bunch of rules implementations out there right so",
    "start": "2669240",
    "end": "2674640"
  },
  {
    "text": "that's nothing new but now you can kind of understand under the hood what's happening and you can tweak it if you want we actually use for years ago we",
    "start": "2674640",
    "end": "2681319"
  },
  {
    "text": "had a rules in and I said this is not sufficient so we're going to make it we're going to make some changes to it make it better because I knew at that",
    "start": "2681319",
    "end": "2687000"
  },
  {
    "text": "point enough to to know how to make it make it better is I new expression or I",
    "start": "2687000",
    "end": "2692520"
  },
  {
    "text": "practiced with them long enough to know there's like",
    "start": "2692520",
    "end": "2697680"
  },
  {
    "start": "2697000",
    "end": "2787000"
  },
  {
    "text": "a multitude of things that you can do so let's talk a little bit about expression versus reflection how many people are",
    "start": "2697680",
    "end": "2704760"
  },
  {
    "text": "moderate to heavy users of reflection okay me too I love reflection it is one of the greatest parts of the",
    "start": "2704760",
    "end": "2710880"
  },
  {
    "text": "language and parts of the CLR I love reflection so reflection expressions are",
    "start": "2710880",
    "end": "2717040"
  },
  {
    "text": "you can think of them as as a nice abstraction over reflection but reflection is theor in theory it's more",
    "start": "2717040",
    "end": "2722240"
  },
  {
    "text": "powerful right you can use it you can actually emit the I to actually like run create these methods Expressions make it",
    "start": "2722240",
    "end": "2729119"
  },
  {
    "text": "really convenient to do that so you don't have to do that reflection is also can be considered if you're just reflecting on you know get Val if you're",
    "start": "2729119",
    "end": "2736200"
  },
  {
    "text": "calling get value on some object you pass in a property name and it gets the value that's really slow or at least",
    "start": "2736200",
    "end": "2741520"
  },
  {
    "text": "that's what developer say Expressions can kind of speed that up because what you can do is you can take that reflection cach a delegate that from",
    "start": "2741520",
    "end": "2749400"
  },
  {
    "text": "using Expressions you can cach a delegate you can compile one in memory and then reuse it and expressions once",
    "start": "2749400",
    "end": "2754920"
  },
  {
    "text": "they're compiled they are just as f as they practically they virtually as fast as a method that you would declare in",
    "start": "2754920",
    "end": "2761760"
  },
  {
    "text": "line so Expressions can be really fast reflection used to solve very similar",
    "start": "2761760",
    "end": "2766960"
  },
  {
    "text": "problems can solve them a little slower uh but I use them in tandem right I use Expressions mainly to create libraries",
    "start": "2766960",
    "end": "2773640"
  },
  {
    "text": "for developers to use that are really convenient and then reflection under the hood to do all the really magic stuff",
    "start": "2773640",
    "end": "2779079"
  },
  {
    "text": "right so really just depends on your use case when when you would use one or both",
    "start": "2779079",
    "end": "2784440"
  },
  {
    "text": "right or neither in that in that case there are some dragons here be the",
    "start": "2784440",
    "end": "2790280"
  },
  {
    "start": "2787000",
    "end": "3056000"
  },
  {
    "text": "dragons right so expressions are not perfect they are not a perfect abstraction and one thing about abstractions they're great but they leak",
    "start": "2790280",
    "end": "2797359"
  },
  {
    "text": "exra expressions are not perfect for example uh how many people love the question mark dot operator that was",
    "start": "2797359",
    "end": "2802880"
  },
  {
    "text": "introduced you know the last C version thing is awesome right that thing is great you can't use it in expression",
    "start": "2802880",
    "end": "2808280"
  },
  {
    "text": "because Expressions came before that feature was available so if you actually tried to declare an expression with the",
    "start": "2808280",
    "end": "2813800"
  },
  {
    "text": "question mark it says you can't do it and it won't compile and the reason can't do it um I mean it's a good thing",
    "start": "2813800",
    "end": "2819760"
  },
  {
    "text": "imagine if Entity framework 6 had to go back and refactor all their code just to be able to use that question it sucks a",
    "start": "2819760",
    "end": "2826160"
  },
  {
    "text": "little bit but it's actually a good thing it doesn't but it and it also you got to understand that the C compiler",
    "start": "2826160",
    "end": "2833200"
  },
  {
    "text": "does magic it does a lot of magic for you so let's take these Expressions finally something a little different",
    "start": "2833200",
    "end": "2838599"
  },
  {
    "text": "than the two upper examples so we've got combined strings it's just a reimplementation of string. concat right",
    "start": "2838599",
    "end": "2844880"
  },
  {
    "text": "where we where we give it a function where we have two strings and then we return on the other end those strings",
    "start": "2844880",
    "end": "2849960"
  },
  {
    "text": "concatenate right so if we do the top one or the bottom one doesn't matter",
    "start": "2849960",
    "end": "2855640"
  },
  {
    "text": "they don't exactly look like this when you look at them as an expression let me",
    "start": "2855640",
    "end": "2860920"
  },
  {
    "text": "show you if you try to do this expression parameter string one string two and then you did this make binary",
    "start": "2860920",
    "end": "2867640"
  },
  {
    "text": "and you said well that's an additive expression Right expression. add string one parameter this will throw and it",
    "start": "2867640",
    "end": "2874960"
  },
  {
    "text": "will say the binary operator add is not not defined for the type system string is system string you're like well what",
    "start": "2874960",
    "end": "2880000"
  },
  {
    "text": "what I just did that what is what's this what's this that I just did I literally just used it because under the hood C is",
    "start": "2880000",
    "end": "2886280"
  },
  {
    "text": "doing magic for you the compiler is doing magic for you this uses string. concat if you inspected this expression",
    "start": "2886280",
    "end": "2893119"
  },
  {
    "text": "under the hood it's not a binary expression it's a call to string doin cat right um so it's not always the the",
    "start": "2893119",
    "end": "2901240"
  },
  {
    "text": "case where you can take and this is just a very narrow set but you have to be aware of it it's not always the thing",
    "start": "2901240",
    "end": "2906559"
  },
  {
    "text": "where you can just take this look at it and say that's a binary expression doesn't always work like that for the",
    "start": "2906559",
    "end": "2911839"
  },
  {
    "text": "most part it does but C does magic for you conversions have to be handled explicitly this is uh this is kind of",
    "start": "2911839",
    "end": "2918760"
  },
  {
    "text": "annoying really but like if you if you have an expression that takes a function",
    "start": "2918760",
    "end": "2924520"
  },
  {
    "text": "or that has a parameter that takes a a parameter of a specific type let's say actually if it just takes object and you",
    "start": "2924520",
    "end": "2930760"
  },
  {
    "text": "try to pass in in an employee object expression into that it will throw an error you actually have to convert it to",
    "start": "2930760",
    "end": "2937559"
  },
  {
    "text": "object because when you when you do that what is happening is under the hood C is actually like casting it's doing a cast",
    "start": "2937559",
    "end": "2944160"
  },
  {
    "text": "you cast it to object right you're just just not aware of that because you don't have to do but casting and conversion",
    "start": "2944160",
    "end": "2950960"
  },
  {
    "text": "for the most part have to be handled explicitly when you're cooking custom expression so you'll find you will find",
    "start": "2950960",
    "end": "2956079"
  },
  {
    "text": "that out as you're messing with Expressions you will find out the limitations pretty quickly pretty fun so",
    "start": "2956079",
    "end": "2961440"
  },
  {
    "text": "how to start what do you do well I start by experimenting and my favorite tools to experiment are link pad or Google I",
    "start": "2961440",
    "end": "2967599"
  },
  {
    "text": "use Google to look up expression stuff to this day when I need to don't ever memorize Albert Einstein said don't ever",
    "start": "2967599",
    "end": "2973520"
  },
  {
    "text": "like memorize anything you can just look up right I don't not have every expression dot like typ signature for",
    "start": "2973520",
    "end": "2980280"
  },
  {
    "text": "all those methods I do not have them all memorized that just would not be practiced so I usually experiment I will",
    "start": "2980280",
    "end": "2985520"
  },
  {
    "text": "use Link pad or I'll even use that net fiddle which is a good tool for things like this that make it really easy for",
    "start": "2985520",
    "end": "2990960"
  },
  {
    "text": "you all to run it um and for experimenting with the expression API use Link pad or evening visual code",
    "start": "2990960",
    "end": "2997240"
  },
  {
    "text": "something like that and just do what we do best use intellisense right no shame",
    "start": "2997240",
    "end": "3002280"
  },
  {
    "text": "in my game I'll tell you I use intell intellisense to discover stuff about Expressions when I use them every time I",
    "start": "3002280",
    "end": "3008040"
  },
  {
    "text": "use right use your tooling your tooling there to help you and most importantly did I mention experiment you should",
    "start": "3008040",
    "end": "3013960"
  },
  {
    "text": "experiment right that's just the bottom line like take those examples that I've had through my previous time I gave this talk I didn't have those examples and I",
    "start": "3013960",
    "end": "3019920"
  },
  {
    "text": "was like that would be super helpful that's super cool now you can click and you know run Expressions all day really",
    "start": "3019920",
    "end": "3026119"
  },
  {
    "text": "awesome is in my opinion so that's the end of my talk if you have any questions please see me afterwards and this is not",
    "start": "3026119",
    "end": "3032640"
  },
  {
    "text": "the end of our conversation if I I'm going to fly home to tomorrow actually uh and if you have a question just reach",
    "start": "3032640",
    "end": "3038480"
  },
  {
    "text": "out to me at schneidenbach is the best way to reach out to me so it is a pleasure it has been a pleasure to be at NDC Porto I have had it so much fun and",
    "start": "3038480",
    "end": "3045359"
  },
  {
    "text": "you've all been very gracious so thank you very much have a great rest of the conference",
    "start": "3045359",
    "end": "3050840"
  },
  {
    "text": "[Applause]",
    "start": "3050840",
    "end": "3053999"
  }
]