[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "hello everybody I don't like this code",
    "start": "5040",
    "end": "13710"
  },
  {
    "text": "it's not it's not problematic it's it's",
    "start": "14580",
    "end": "20769"
  },
  {
    "text": "not really bad either but it's I find it annoying there are a few chairs here in",
    "start": "20769",
    "end": "29910"
  },
  {
    "text": "the front I find it annoying and the reason I find it annoying is this",
    "start": "29910",
    "end": "38680"
  },
  {
    "start": "36000",
    "end": "125000"
  },
  {
    "text": "repetition and it's not a problematic repetition when we talk about software",
    "start": "38680",
    "end": "46210"
  },
  {
    "text": "design and we talk about the dry principles of dryers and don't repeat yourself this is not it when we talk",
    "start": "46210",
    "end": "53320"
  },
  {
    "text": "about dry principles and don't repeat yourself we talk about things that are problematic when you have the same code",
    "start": "53320",
    "end": "59590"
  },
  {
    "text": "structure in duplicated in several places because then you get trouble when you refactor or add new features because",
    "start": "59590",
    "end": "66940"
  },
  {
    "text": "you're going to forget to update one of those places is not it this is not a problem it's just no easy because we have a lot",
    "start": "66940",
    "end": "75910"
  },
  {
    "text": "of text that doesn't add any information and that annoys me I have this weird",
    "start": "75910",
    "end": "85660"
  },
  {
    "text": "thing that I this is really difficult in C++ because it's a weird language but I",
    "start": "85660",
    "end": "91780"
  },
  {
    "text": "really like it when I can read code like a read prose it it reads like human",
    "start": "91780",
    "end": "99730"
  },
  {
    "text": "communication and no one speaks like this at least no one over age 3",
    "start": "99730",
    "end": "106950"
  },
  {
    "text": "so if you talk to a colleague about this assertion and said state equal equal",
    "start": "107270",
    "end": "112890"
  },
  {
    "text": "idol or state equally or disconnecting etcetera you don't think that something's wrong",
    "start": "112890",
    "end": "119899"
  },
  {
    "text": "so yeah I'm annoyed with that this is the session modern techniques for",
    "start": "121189",
    "end": "128369"
  },
  {
    "start": "125000",
    "end": "223000"
  },
  {
    "text": "keeping your code dry I am your own father I am professionally and I've occasionally annoyed with code all code",
    "start": "128369",
    "end": "136500"
  },
  {
    "text": "including my own brief background I work",
    "start": "136500",
    "end": "141780"
  },
  {
    "text": "for net insight in Stockholm we make networking equipment curiously the TV",
    "start": "141780",
    "end": "150390"
  },
  {
    "text": "radio infrastructure in Norway is run on equipment that I have helped write",
    "start": "150390",
    "end": "155459"
  },
  {
    "text": "software for we do mechanics electronics FPGA design low-level software that",
    "start": "155459",
    "end": "164099"
  },
  {
    "text": "controls the FPGA I networking protocols network management systems Network resource scheduling a lot we're also",
    "start": "164099",
    "end": "172709"
  },
  {
    "text": "looking for talent yes you know yes you know this talk is about techniques it's",
    "start": "172709",
    "end": "184500"
  },
  {
    "text": "not so much about this example I'm going to use that example to drive the",
    "start": "184500",
    "end": "190109"
  },
  {
    "text": "presentation to show the techniques and I'm going to do it in quite absurd ways bear with me the reason I'm doing that",
    "start": "190109",
    "end": "196829"
  },
  {
    "text": "is because it's a small example that it's easy to to follow and understand",
    "start": "196829",
    "end": "203060"
  },
  {
    "text": "and it gets me to show techniques without presenting a huge amount of code",
    "start": "203269",
    "end": "212090"
  },
  {
    "text": "so if we go to this we have this state type and this assertion and as I said",
    "start": "212450",
    "end": "219870"
  },
  {
    "text": "I'm node with this so what can we do to",
    "start": "219870",
    "end": "225739"
  },
  {
    "start": "223000",
    "end": "368000"
  },
  {
    "text": "get rid of this annoying repetition so we can try a very attic function",
    "start": "225739",
    "end": "231660"
  },
  {
    "text": "templates sort of like this so a function template is any of that takes a state type and takes the alternatives",
    "start": "231660",
    "end": "238829"
  },
  {
    "text": "that were checking for we test these with a folder person who",
    "start": "238829",
    "end": "246040"
  },
  {
    "text": "is familiar with the fold expressions okay a quarter of you I would briefly go",
    "start": "246040",
    "end": "253030"
  },
  {
    "text": "through it so the default expression is this expression here at the return of",
    "start": "253030",
    "end": "260320"
  },
  {
    "text": "its parenthesized always and it repeats",
    "start": "260320",
    "end": "265950"
  },
  {
    "text": "very attic template parameters so in this case we have this sub expression as",
    "start": "266250",
    "end": "272080"
  },
  {
    "text": "equal equal T's that is repeated with",
    "start": "272080",
    "end": "277300"
  },
  {
    "text": "this logical or for every value of T's no matter how many parameters are already fold expressions are a huge",
    "start": "277300",
    "end": "285160"
  },
  {
    "text": "saver of trouble when you huge savor of repetition when you're working with very",
    "start": "285160",
    "end": "290920"
  },
  {
    "text": "attic templates the alternative is pretty much to either do horrendously",
    "start": "290920",
    "end": "299860"
  },
  {
    "text": "ugly tricks with the initializer list or",
    "start": "299860",
    "end": "305110"
  },
  {
    "text": "whatever or use recursion and it's not",
    "start": "305110",
    "end": "310540"
  },
  {
    "text": "good so follow expressions remember those but then we can write like this so",
    "start": "310540",
    "end": "319240"
  },
  {
    "text": "it's any other state idle disconnecting disconnected and this is really bad code",
    "start": "319240",
    "end": "327870"
  },
  {
    "text": "this is really really really bad culture and complete little repetition great",
    "start": "327870",
    "end": "332940"
  },
  {
    "text": "only problem is that no one can understand what this means not without looking at the function body",
    "start": "332940",
    "end": "339220"
  },
  {
    "text": "to see what it says so it's a it's",
    "start": "339220",
    "end": "345760"
  },
  {
    "text": "important I think that you in in code try to convey meaning to the reader of",
    "start": "345760",
    "end": "351400"
  },
  {
    "text": "the code and this doesn't do that it it doesn't say anything you cannot know",
    "start": "351400",
    "end": "358110"
  },
  {
    "text": "that the first parameter relates with the logical or to each or the others so",
    "start": "358110",
    "end": "365470"
  },
  {
    "text": "let's not go there it was it was bad let's try you have a very attic non-type",
    "start": "365470",
    "end": "372470"
  },
  {
    "start": "368000",
    "end": "505000"
  },
  {
    "text": "template parameter function template that's great ah that's sir that's poetry",
    "start": "372470",
    "end": "381099"
  },
  {
    "text": "so we can write like this is any of that takes a state type and we have as",
    "start": "382150",
    "end": "388310"
  },
  {
    "text": "template parameters several state type values and the fold expression that you",
    "start": "388310",
    "end": "395360"
  },
  {
    "text": "have seen before so state type can be",
    "start": "395360",
    "end": "403009"
  },
  {
    "text": "used as a normal type template parameter because it's an it's an enum enum very",
    "start": "403009",
    "end": "409880"
  },
  {
    "text": "easy to handle in this way and then we can write the code like this it's any of idle disconnecting is connected state we",
    "start": "409880",
    "end": "421039"
  },
  {
    "text": "can generalize this a little bit more especially if we're in simpler seventeen",
    "start": "421039",
    "end": "426979"
  },
  {
    "text": "we can use Auto for a normal type template parameters and then we can use",
    "start": "426979",
    "end": "433009"
  },
  {
    "text": "a t4 for the value in check then we can use this for many types I",
    "start": "433009",
    "end": "440750"
  },
  {
    "text": "won't say any types because that is not true but we can use it for other",
    "start": "440750",
    "end": "447099"
  },
  {
    "text": "enumerations the downside is that not all types can be used in murmuration",
    "start": "447099",
    "end": "455770"
  },
  {
    "text": "contexts for integer values I cannot have a variable there because it's a runtime value it cannot be checked and",
    "start": "455770",
    "end": "464530"
  },
  {
    "text": "the problem with the solution some argues that this really is not a problem",
    "start": "464530",
    "end": "469789"
  },
  {
    "text": "and I guess they are right but they're not as annoyed with code as I am so and",
    "start": "469789",
    "end": "475820"
  },
  {
    "text": "that is that this is the oldest but if you're familiar with Star Wars how Yoda speaks in backwards grammar and I said",
    "start": "475820",
    "end": "482090"
  },
  {
    "text": "that I'd like code to to read like human language and this is not this is Yoda",
    "start": "482090",
    "end": "489409"
  },
  {
    "text": "language so it's it's not a problem it's it's fairly readable but it's also quite",
    "start": "489409",
    "end": "496490"
  },
  {
    "text": "limited it's a lot not super happy with it but",
    "start": "496490",
    "end": "502039"
  },
  {
    "text": "it's it's not that problematic and then",
    "start": "502039",
    "end": "507110"
  },
  {
    "start": "505000",
    "end": "655000"
  },
  {
    "text": "we can try something else can construct an object and then do tests so it's sort of turning it a little bit inside out so",
    "start": "507110",
    "end": "514399"
  },
  {
    "text": "there was sort of an informal competition on Twitter a few years ago about who could write the smallest check",
    "start": "514399",
    "end": "521300"
  },
  {
    "text": "for if a value is in a set of values and I think this example one I'm not sure I",
    "start": "521300",
    "end": "527660"
  },
  {
    "text": "haven't I haven't found any that was smaller this was when Twitter had a",
    "start": "527660",
    "end": "533570"
  },
  {
    "text": "limit of 140 characters with the god both link let's try this in a slightly",
    "start": "533570",
    "end": "543290"
  },
  {
    "text": "more readable form so have a function template is in that takes a value and we",
    "start": "543290",
    "end": "551270"
  },
  {
    "text": "use from superber 17 and later we can use an auto return type of a function so",
    "start": "551270",
    "end": "556370"
  },
  {
    "text": "we return a lambda that has captured this value T and the lambda is cobble",
    "start": "556370",
    "end": "562490"
  },
  {
    "text": "with a number of values and we return the full expression that you have seen",
    "start": "562490",
    "end": "567709"
  },
  {
    "text": "several times you understand how this works anyone having trouble Peter we all get",
    "start": "567709",
    "end": "579800"
  },
  {
    "text": "there don't rush it don't rush it we'll get there for the for those who didn't hear",
    "start": "579800",
    "end": "588380"
  },
  {
    "text": "Peter commented that a Const exper is missing that it that is true but I'm",
    "start": "588380",
    "end": "593510"
  },
  {
    "text": "ignoring it for now I'm actually ignoring a lot of things to begin with B just to set the stage so now we can",
    "start": "593510",
    "end": "603110"
  },
  {
    "text": "write like this it's in state and the alternative so we'll call is in state it",
    "start": "603110",
    "end": "614000"
  },
  {
    "text": "returns this this lambda and then we call the lambda with the values idle disconnecting disconnected sure great",
    "start": "614000",
    "end": "625089"
  },
  {
    "text": "so the good good thing is that this this now works with all types provided that the equality and",
    "start": "625270",
    "end": "632140"
  },
  {
    "text": "or operations works but it looks absolutely horrendous you don't want to",
    "start": "632140",
    "end": "640120"
  },
  {
    "text": "write code like this I don't especially I don't want to read code like this it's",
    "start": "640120",
    "end": "645850"
  },
  {
    "text": "it's it's Tudor so there's information missing so let's try to refine it a",
    "start": "645850",
    "end": "655090"
  },
  {
    "start": "655000",
    "end": "864000"
  },
  {
    "text": "little bit more we can we can explicitly construct a type where where we have a",
    "start": "655090",
    "end": "661330"
  },
  {
    "text": "member function that has a name instead of just the the coal operator like this",
    "start": "661330",
    "end": "667870"
  },
  {
    "text": "so we have this template and we we",
    "start": "667870",
    "end": "676270"
  },
  {
    "text": "captured the the T than a member variable and we haven't any of function",
    "start": "676270",
    "end": "681850"
  },
  {
    "text": "that we can call so this is logically exactly the same then we add another see",
    "start": "681850",
    "end": "688030"
  },
  {
    "text": "prove not 17 thing because why not so if you're not familiar with this is a",
    "start": "688030",
    "end": "694260"
  },
  {
    "text": "deduction guide a deduction guide is in in C + 17 there is this thing called",
    "start": "694260",
    "end": "703330"
  },
  {
    "text": "constructor template argument deduction it's often referred to as CT ID where",
    "start": "703330",
    "end": "709350"
  },
  {
    "text": "where you can it's sort of a generalization of how template",
    "start": "709350",
    "end": "715870"
  },
  {
    "text": "parameters are inferred from function template code but in this case it's for",
    "start": "715870",
    "end": "721380"
  },
  {
    "text": "constructors so we can say that if I'm calling is with 3 the compilers is 3 is",
    "start": "721380",
    "end": "729880"
  },
  {
    "text": "an int therefore I assume that you want to construct an is of int and the deduction guide is here too to help it",
    "start": "729880",
    "end": "737200"
  },
  {
    "text": "there are situations where the compiler can figure this out itself but this syntax here template patentee is",
    "start": "737200",
    "end": "744990"
  },
  {
    "text": "function call T arrow is angle brackets T is a deduction guide that helps the",
    "start": "744990",
    "end": "752800"
  },
  {
    "text": "compiler to say that if you see an is instance a it ability assume that it is an is of T that we want to get more",
    "start": "752800",
    "end": "761500"
  },
  {
    "text": "information about this I really recommend that you watch Steve love avoids talk from VidCon last year",
    "start": "761500",
    "end": "767970"
  },
  {
    "text": "almost exactly to the day and when you have what's that and think everything is",
    "start": "767970",
    "end": "774070"
  },
  {
    "text": "absolutely awesome then you look at timid owners talk where you see that it's a trial both are really good what",
    "start": "774070",
    "end": "782050"
  },
  {
    "text": "some so with this we can now ride East curly-braces state any orb and this",
    "start": "782050",
    "end": "791140"
  },
  {
    "text": "works this communicate in communicate",
    "start": "791140",
    "end": "796839"
  },
  {
    "text": "intent it's explicit it's still Yoda speak which annoys me but not everybody",
    "start": "796839",
    "end": "805080"
  },
  {
    "text": "so yeah I think I think this is fairly beautiful or at least usable Alan time",
    "start": "805740",
    "end": "816220"
  },
  {
    "text": "post sorry Peter do you mean do I need",
    "start": "816220",
    "end": "825610"
  },
  {
    "text": "the deduction guide I think so I tried",
    "start": "825610",
    "end": "831490"
  },
  {
    "text": "this example without because I thought we wouldn't need to bother it didn't compile Peter yes so the Peters guess is",
    "start": "831490",
    "end": "849220"
  },
  {
    "text": "that if I had had a public constructor that takes a T then then the compiler",
    "start": "849220",
    "end": "854950"
  },
  {
    "text": "would be able to deduce it but since it's just destructor with a data member it's not able to I think that is the",
    "start": "854950",
    "end": "862060"
  },
  {
    "text": "case so after this time post this is not",
    "start": "862060",
    "end": "867820"
  },
  {
    "start": "864000",
    "end": "1152000"
  },
  {
    "text": "an important problem I'm not I'm not spending huge amounts of time so time on",
    "start": "867820",
    "end": "873970"
  },
  {
    "text": "on this so the body I am sort of mildly annoyed",
    "start": "873970",
    "end": "881610"
  },
  {
    "text": "and then one day two years later it is too cute so have a class any of the",
    "start": "882050",
    "end": "893720"
  },
  {
    "text": "inherits from a tuple of tees and we have an a templated operator equal equal",
    "start": "893720",
    "end": "900429"
  },
  {
    "text": "and we can then write code this is any of one three five the same as acts and",
    "start": "900429",
    "end": "906860"
  },
  {
    "text": "we can have obviously a commutative operator equally equal to make it less",
    "start": "906860",
    "end": "913970"
  },
  {
    "text": "Yogesh as Peter commented on the next week but it's not on the screen and yeah",
    "start": "913970",
    "end": "922850"
  },
  {
    "text": "I would I'll talk you through this with slightly",
    "start": "922850",
    "end": "928610"
  },
  {
    "text": "more readable code I think your code formatting in Twitter is a little bit bad so we have we have a template if any",
    "start": "928610",
    "end": "943999"
  },
  {
    "text": "of that a template lead on type empties",
    "start": "943999",
    "end": "949269"
  },
  {
    "text": "I'm super lazy so I'm using private inheritance and the only reason for that",
    "start": "950290",
    "end": "956869"
  },
  {
    "text": "I mean what you really should do is have the tuple as a member but tuple has 18",
    "start": "956869",
    "end": "965059"
  },
  {
    "text": "constructors and by just saying use the constructors from tuple you're done okay",
    "start": "965059",
    "end": "971679"
  },
  {
    "text": "shoot me I'm lazy it works",
    "start": "971679",
    "end": "975910"
  },
  {
    "text": "private inheritance is I don't know I guess it's sort of",
    "start": "978290",
    "end": "984519"
  },
  {
    "text": "frowned upon but it's sometimes useful especially I think I've seen too many",
    "start": "984519",
    "end": "989829"
  },
  {
    "text": "cases of public inheritance where you're actually not trying to express them",
    "start": "989829",
    "end": "995649"
  },
  {
    "text": "inheritance hierarchy you just inheriting implementation and doing public inheritance there is really wrong",
    "start": "995649",
    "end": "1001649"
  },
  {
    "text": "so don't do that anyway I digress",
    "start": "1001649",
    "end": "1007610"
  },
  {
    "text": "operator equal legal uses still apply still apply is amazing still apply takes",
    "start": "1008899",
    "end": "1017790"
  },
  {
    "text": "as the first parameter is something that is in vocable a function of an object",
    "start": "1017790",
    "end": "1023850"
  },
  {
    "text": "with a function call operator what have you and then it takes a tuple and then",
    "start": "1023850",
    "end": "1030058"
  },
  {
    "text": "it calls that function in vocable thing with each of the tuples members as the",
    "start": "1030059",
    "end": "1037380"
  },
  {
    "text": "the parameters and that is that is so good so amazingly good unfortunately in",
    "start": "1037380",
    "end": "1047069"
  },
  {
    "text": "this case my laziness causes me trouble because since I have the private",
    "start": "1047069",
    "end": "1056220"
  },
  {
    "text": "inheritance from tuple I need this ugly static cost because the reply takes us",
    "start": "1056220",
    "end": "1063210"
  },
  {
    "text": "the second parameter so it's a T and when the T then is an instance of an e",
    "start": "1063210",
    "end": "1070260"
  },
  {
    "text": "off and it has private inheritance from tuple so the implementation of the",
    "start": "1070260",
    "end": "1075630"
  },
  {
    "text": "deploy cannot see the tuple so I have to do this ugliest that it cost to make",
    "start": "1075630",
    "end": "1081660"
  },
  {
    "text": "apply it work but it does work and then I have the deduction guide again saying",
    "start": "1081660",
    "end": "1088950"
  },
  {
    "text": "that if you see any of with these T's then please try to instantiate on any of",
    "start": "1088950",
    "end": "1095419"
  },
  {
    "text": "with the type T's now the symmetric the commutative",
    "start": "1095419",
    "end": "1105170"
  },
  {
    "text": "operator equal equal because that makes the code easier to read it just makes",
    "start": "1105170",
    "end": "1112880"
  },
  {
    "text": "sense if you would say that you can express a equal a Corby than you really should be able to express be equally way",
    "start": "1112880",
    "end": "1118880"
  },
  {
    "text": "otherwise your code is horrible and then I can write like this assertive state is",
    "start": "1118880",
    "end": "1125510"
  },
  {
    "text": "any of idle disconnecting in disconnect again I'm ridiculously happy about this code it's yeah it's exaggerated cuteness",
    "start": "1125510",
    "end": "1137390"
  },
  {
    "text": "but it just sparkles joy I think so I",
    "start": "1137390",
    "end": "1146270"
  },
  {
    "text": "felt really happy when I discovered that I could write this let's have a look is",
    "start": "1146270",
    "end": "1152960"
  },
  {
    "start": "1152000",
    "end": "1499000"
  },
  {
    "text": "this good or bad and I guess that's a look so we have the state type we have",
    "start": "1152960",
    "end": "1166610"
  },
  {
    "text": "any of it's exactly the same the deduction guide I have a Class C here",
    "start": "1166610",
    "end": "1172700"
  },
  {
    "text": "that happens to have a state and a function and now I have tried to say",
    "start": "1172700",
    "end": "1178820"
  },
  {
    "text": "they have the using an if def here just to to show 2x on two codes in parallel",
    "start": "1178820",
    "end": "1185600"
  },
  {
    "text": "so in this case where the plain marker is defined I'm using the the traditional",
    "start": "1185600",
    "end": "1194090"
  },
  {
    "text": "way of writing is a state equal to collide or stayed equally etc and if plane is not defined we have this state",
    "start": "1194090",
    "end": "1201710"
  },
  {
    "text": "equal equal any of now if we look at the compiler pains we see that the right one",
    "start": "1201710",
    "end": "1207080"
  },
  {
    "text": "has that D plane so it it defines this macro can anyone see any substantial",
    "start": "1207080",
    "end": "1215720"
  },
  {
    "text": "differences in the generated assembly here",
    "start": "1215720",
    "end": "1220060"
  },
  {
    "text": "complainers are cool sorry I didn't yeah",
    "start": "1221930",
    "end": "1235240"
  },
  {
    "text": "the strings are different in the circle that is what differs so we can conclude",
    "start": "1235240",
    "end": "1245150"
  },
  {
    "text": "that doing this regardless of your opinion on writing code like this we can conclude that it",
    "start": "1245150",
    "end": "1251720"
  },
  {
    "text": "does not make the generated code and it works it's identical so that is cool but",
    "start": "1251720",
    "end": "1264470"
  },
  {
    "text": "when we have done this we might as well add some relational operators to for a",
    "start": "1264470",
    "end": "1272420"
  },
  {
    "text": "less than greater than etc so I can write add a less than here to say that",
    "start": "1272420",
    "end": "1278420"
  },
  {
    "text": "if if any of any of ABC is less than zero as below and do note these dot dots",
    "start": "1278420",
    "end": "1289100"
  },
  {
    "text": "here there are number of more operators so I just don't have enough screen space for them sorry so it's a lot more code",
    "start": "1289100",
    "end": "1297200"
  },
  {
    "text": "here than it looked like but this allows me to write code like this and this makes my nerd heart pound really this is",
    "start": "1297200",
    "end": "1303830"
  },
  {
    "text": "this is this is so great there's absolutely amazing so then actually",
    "start": "1303830",
    "end": "1311300"
  },
  {
    "text": "let's look at this so have pretty much",
    "start": "1311300",
    "end": "1320330"
  },
  {
    "text": "the same thing I've added operator less than and I have a loop where I'm calling",
    "start": "1320330",
    "end": "1326180"
  },
  {
    "text": "this update function on the references while any of ABC is less than 0 then",
    "start": "1326180",
    "end": "1333980"
  },
  {
    "text": "keep looping and again the compiler generates absolutely identical code",
    "start": "1333980",
    "end": "1342190"
  },
  {
    "text": "that's pretty neat I really like this but we have a problem",
    "start": "1342190",
    "end": "1355820"
  },
  {
    "text": "so we have two functions here that are identical safe for a few characters and",
    "start": "1358250",
    "end": "1368270"
  },
  {
    "text": "it's not just two functions like I mentioned we have less equal greater",
    "start": "1368270",
    "end": "1373860"
  },
  {
    "text": "than greater equal also and so this looks really bad and it's worse several",
    "start": "1373860",
    "end": "1380370"
  },
  {
    "text": "times worse and what more I ended up here because I wanted to solve something",
    "start": "1380370",
    "end": "1386160"
  },
  {
    "text": "that it can best be described as an aesthetical problem it's not really a problem and now I have caused a real",
    "start": "1386160",
    "end": "1392130"
  },
  {
    "text": "problem this is the kind of repetition that the dry principles talk about this is repeating structure in a way that",
    "start": "1392130",
    "end": "1400280"
  },
  {
    "text": "invites to making mistakes when you make modifications to the code so this is bad",
    "start": "1400280",
    "end": "1407390"
  },
  {
    "text": "so that was a this was maybe not the",
    "start": "1407390",
    "end": "1414780"
  },
  {
    "text": "step in the right direction I thought it was I mean sure you can argue that yeah",
    "start": "1414780",
    "end": "1420930"
  },
  {
    "text": "we have this ugly repetition that it has a problem what we have sort of squirreled it away in in a library so",
    "start": "1420930",
    "end": "1428490"
  },
  {
    "text": "users don't see it about is a correct observation but like I said I'm annoyed",
    "start": "1428490",
    "end": "1435060"
  },
  {
    "text": "with code and this annoys me a lot even",
    "start": "1435060",
    "end": "1440940"
  },
  {
    "text": "more than the problem with it set hut to solve so this is about it but ok I'm",
    "start": "1440940",
    "end": "1455270"
  },
  {
    "text": "adding a helper function of a function template something that takes something in vocable and the set of tuples or a",
    "start": "1455270",
    "end": "1462330"
  },
  {
    "text": "tuple of the set of values and you still apply to to call that function of each T",
    "start": "1462330",
    "end": "1469590"
  },
  {
    "text": "and/or the results this is a nice help we you're familiar with this fold expression now",
    "start": "1469590",
    "end": "1475650"
  },
  {
    "text": "and I can rewrite the code to say that yeah I'm calling or elements of this",
    "start": "1475650",
    "end": "1481250"
  },
  {
    "text": "simpler check is a value equal where it's the value less than or etcetera etc",
    "start": "1481250",
    "end": "1487040"
  },
  {
    "text": "there a fair amount of repetition but a lot less so okay we're beginning to",
    "start": "1487040",
    "end": "1494040"
  },
  {
    "text": "maybe go in the right direction again let's have a look",
    "start": "1494040",
    "end": "1500580"
  },
  {
    "start": "1499000",
    "end": "1688000"
  },
  {
    "text": "it's an indirection what does the what's the cost of an extra indirection",
    "start": "1500580",
    "end": "1507620"
  },
  {
    "text": "so we have our elements and I'm using or elements the rest is the same",
    "start": "1510050",
    "end": "1515720"
  },
  {
    "text": "including the generated code did I say that compilers are awesome so yeah so we",
    "start": "1515720",
    "end": "1526290"
  },
  {
    "text": "don't have to fear writing code like this at least not from a performance point of view so say I want to add more",
    "start": "1526290",
    "end": "1535800"
  },
  {
    "text": "than I have this any of its useful but maybe I want an each of that that it",
    "start": "1535800",
    "end": "1542520"
  },
  {
    "text": "does a logical end instead of logical or do I repeat everything again that",
    "start": "1542520",
    "end": "1552840"
  },
  {
    "text": "doesn't sound like the right way to go but if I change my or elements from",
    "start": "1552840",
    "end": "1558690"
  },
  {
    "text": "being a free-standing function template into being instead a type that has a member",
    "start": "1558690",
    "end": "1566820"
  },
  {
    "text": "function template a static one then I can do another indirection and I",
    "start": "1566820",
    "end": "1574050"
  },
  {
    "text": "apologize for this appalling name or p'tee my imagination failed me there",
    "start": "1574050",
    "end": "1581270"
  },
  {
    "text": "opti takes an operation and the rest is like it's like you've seen but the the",
    "start": "1581270",
    "end": "1589860"
  },
  {
    "text": "call to apply is changed to this OP Colin Colin apply there so now we get if",
    "start": "1589860",
    "end": "1599220"
  },
  {
    "text": "we have an opt-in where up is or elements that we have exactly the same code as we used to have just a few",
    "start": "1599220",
    "end": "1605250"
  },
  {
    "text": "slides ago and then the any of is something that",
    "start": "1605250",
    "end": "1610620"
  },
  {
    "text": "inherits from opti of our elements and teas and use all the Constructors I'll",
    "start": "1610620",
    "end": "1621420"
  },
  {
    "text": "be get there soon very soon very soon so now I can",
    "start": "1621420",
    "end": "1628560"
  },
  {
    "text": "make and elements instead and each of and the only difference really is not",
    "start": "1628560",
    "end": "1637410"
  },
  {
    "text": "very many changes at all so I have some some power here in the reuse from the",
    "start": "1637410",
    "end": "1643950"
  },
  {
    "text": "templates so that is nice but now for your observation about using an alias",
    "start": "1643950",
    "end": "1655010"
  },
  {
    "text": "the the problem with the using the alias is that we cannot write a deduction",
    "start": "1655010",
    "end": "1660990"
  },
  {
    "text": "guide for an alias yet yeah I'm sure",
    "start": "1660990",
    "end": "1666440"
  },
  {
    "text": "yeah unfortunately my time machine is slightly broken so I'm so I don't have",
    "start": "1667550",
    "end": "1674910"
  },
  {
    "text": "it I know that causality is civic causality is severely overrated but",
    "start": "1674910",
    "end": "1681210"
  },
  {
    "text": "still I'm not able to write right deduction guides for the alias yet so",
    "start": "1681210",
    "end": "1688350"
  },
  {
    "text": "therefore we we have to have this construction and you probably already",
    "start": "1688350",
    "end": "1695160"
  },
  {
    "text": "guessed what I'm going to show you so",
    "start": "1695160",
    "end": "1701430"
  },
  {
    "text": "now I'm having this each of with and elements and it's not working well",
    "start": "1701430",
    "end": "1713539"
  },
  {
    "text": "and elements has this logical and instead of course and numbed looping as",
    "start": "1713840",
    "end": "1723900"
  },
  {
    "text": "long as every single one of a B and C is less than zero and the generated code is",
    "start": "1723900",
    "end": "1730320"
  },
  {
    "text": "identical this by the way may surprise you but I've checked this this is clang",
    "start": "1730320",
    "end": "1737130"
  },
  {
    "text": "now I'll check this with GCC I'll check this with MS BC and even I must VC does it right so this is not a clang thing",
    "start": "1737130",
    "end": "1745310"
  },
  {
    "text": "this is this is for real I guess well you guys get comments about",
    "start": "1745310",
    "end": "1755010"
  },
  {
    "text": "bashing em is amazing so originally I",
    "start": "1755010",
    "end": "1762180"
  },
  {
    "text": "intended to be finished here no because I think what I've shown so",
    "start": "1762180",
    "end": "1767760"
  },
  {
    "text": "far is pretty cool but I think lambdas are kind of cool we want more lambdas",
    "start": "1767760",
    "end": "1775040"
  },
  {
    "text": "more lambdas so I have to add some slides about them just like half the",
    "start": "1775040",
    "end": "1781350"
  },
  {
    "text": "presentation more about lambdas so I have a tuple here to place a lambda that",
    "start": "1781350",
    "end": "1789000"
  },
  {
    "text": "takes a number of parameters and returns a lambda can you see how I can claim",
    "start": "1789000",
    "end": "1794250"
  },
  {
    "text": "that this is a cheaper it's not very",
    "start": "1794250",
    "end": "1799740"
  },
  {
    "text": "good tuple it's definitely not stood tuple but it is a kind of tuple so when",
    "start": "1799740",
    "end": "1805110"
  },
  {
    "text": "I call tuple with some values it returns a lambda that has captured those values",
    "start": "1805110",
    "end": "1810840"
  },
  {
    "text": "that is sort of two polish and this lambda can be called with a function",
    "start": "1810840",
    "end": "1817440"
  },
  {
    "text": "this function could be for example give me the first element give me the lowest",
    "start": "1817440",
    "end": "1822630"
  },
  {
    "text": "element give me the number of elements so it's a tuple it's a weird you though but it's a tuple and it works it works",
    "start": "1822630",
    "end": "1829890"
  },
  {
    "text": "for for what I wanted to do right now so when I'm calling here tuple ABC then I",
    "start": "1829890",
    "end": "1840090"
  },
  {
    "text": "get the this lambda that has captured ABC and then I'm calling that lambda with",
    "start": "1840090",
    "end": "1846630"
  },
  {
    "text": "the function that does this a greater than and the logical and you fold",
    "start": "1846630",
    "end": "1852750"
  },
  {
    "text": "expression so this these together means in other words expands to a greater than",
    "start": "1852750",
    "end": "1860909"
  },
  {
    "text": "0 and B greater than 0 and to C greater than 0 and then we can of course use the",
    "start": "1860909",
    "end": "1871370"
  },
  {
    "text": "techniques I showed earlier about this and elements but I'm using again with just more lambdas so and element is",
    "start": "1871370",
    "end": "1878250"
  },
  {
    "text": "something that takes a function returns a lambda that when called with a number",
    "start": "1878250",
    "end": "1883980"
  },
  {
    "text": "of elements applies this function to these elements so when I'm using this is",
    "start": "1883980",
    "end": "1891299"
  },
  {
    "text": "like I'm calling and element with something that just doesn't a greater than 0 comparison and and elements of",
    "start": "1891299",
    "end": "1903149"
  },
  {
    "text": "this greater than 0 it's the function that we call to the two parts so again this expands to a greater than 0 and B",
    "start": "1903149",
    "end": "1909330"
  },
  {
    "text": "greater than 0 and C greater than 0 or you with me all this or is this a little",
    "start": "1909330",
    "end": "1917159"
  },
  {
    "text": "bit sort of painful for the synopsis if",
    "start": "1917159",
    "end": "1924330"
  },
  {
    "text": "you haven't done any functional programming at all I assume that this looks really weird then we can go a",
    "start": "1924330",
    "end": "1932880"
  },
  {
    "text": "little bit further to get more things the simpleness 20 library will get a",
    "start": "1932880",
    "end": "1939510"
  },
  {
    "text": "function bind front that you can call with something that is callable and a",
    "start": "1939510",
    "end": "1945210"
  },
  {
    "text": "number of values and it returns something that calls this function with",
    "start": "1945210",
    "end": "1951210"
  },
  {
    "text": "the bound values and any other parameters that you add but there is no bind back and for the purpose of this",
    "start": "1951210",
    "end": "1959760"
  },
  {
    "text": "presentation i didn't want to spend too much time on explaining how to do this",
    "start": "1959760",
    "end": "1966600"
  },
  {
    "text": "super general so I have a bind bind right hand that's what our H means so",
    "start": "1966600",
    "end": "1972600"
  },
  {
    "text": "the right hand takes a function and a value and we energy return to lambda that is",
    "start": "1972600",
    "end": "1981279"
  },
  {
    "text": "callable it assumes by the way that the function takes 2 arguments exactly two",
    "start": "1981279",
    "end": "1986559"
  },
  {
    "text": "arguments otherwise this will not work at all when we call this return lambda we recall the function with with the",
    "start": "1986559",
    "end": "1993519"
  },
  {
    "text": "parameter of the function call and the captured value and this is useful",
    "start": "1993519",
    "end": "1999090"
  },
  {
    "text": "because now we can define our greater than in this case that takes a value and",
    "start": "1999090",
    "end": "2006149"
  },
  {
    "text": "returns the bound bound right-hand value",
    "start": "2006149",
    "end": "2011820"
  },
  {
    "text": "to two stood greater which means that we can write code like this and elements",
    "start": "2011820",
    "end": "2018269"
  },
  {
    "text": "greater than zero on the last line so now no greater than zero is calling them",
    "start": "2018269",
    "end": "2027529"
  },
  {
    "text": "bind-off stood greater than greater than and zero and we get the and elements",
    "start": "2027529",
    "end": "2033659"
  },
  {
    "text": "that is called web values and it compares is this value greater than zero",
    "start": "2033659",
    "end": "2038779"
  },
  {
    "text": "and we're getting that as the function to to to the to the tuple so again we",
    "start": "2038779",
    "end": "2047909"
  },
  {
    "text": "get exactly the same a greater than zero and be greater than 0 and C greater than zero so now we can start building these",
    "start": "2047909",
    "end": "2058230"
  },
  {
    "text": "each of an any of again so we have the tuple and elements equal to greater than",
    "start": "2058230",
    "end": "2064260"
  },
  {
    "text": "etc a number of others and this horrible named opt and when I call now each of",
    "start": "2064260",
    "end": "2074608"
  },
  {
    "text": "ABC it calls this each of function that returns an octave and elements and a",
    "start": "2074609",
    "end": "2081569"
  },
  {
    "text": "tuple of ABC an opt YZ constructor takes",
    "start": "2081569",
    "end": "2087329"
  },
  {
    "text": "a function and the tuple and the function then is and elements that we store as a member funk and the tuple",
    "start": "2087329",
    "end": "2093868"
  },
  {
    "text": "that we call store as a member member tube and then we do a greater than zero",
    "start": "2093869",
    "end": "2100760"
  },
  {
    "text": "comparison rate call supply greater than T which makes kind of sense for a greater than and apply calls",
    "start": "2100760",
    "end": "2109550"
  },
  {
    "text": "the tuple with the function that is greater than and elements and greater",
    "start": "2109550",
    "end": "2116600"
  },
  {
    "text": "than four F who a trick they can use or",
    "start": "2116600",
    "end": "2124700"
  },
  {
    "text": "not a trick if you have super was twenty you can use no unique address it can save you a little bit of memory in this",
    "start": "2124700",
    "end": "2134270"
  },
  {
    "text": "case function doesn't have any members it hasn't captured anything so it doesn't take any space by saying you",
    "start": "2134270",
    "end": "2142940"
  },
  {
    "text": "know unique address you you say that it's not important for me to to be able",
    "start": "2142940",
    "end": "2150230"
  },
  {
    "text": "to address exactly where in memory funk is normally the the rules say that",
    "start": "2150230",
    "end": "2156850"
  },
  {
    "text": "objects of different unrelated types must have unique addresses therefore in effect an empty type does take one bite",
    "start": "2156850",
    "end": "2165400"
  },
  {
    "text": "but by saying no unique address we say that never mind I don't care",
    "start": "2165400",
    "end": "2172190"
  },
  {
    "text": "pre c plus twenty you can use private inheritance who you have since forever",
    "start": "2172190",
    "end": "2179240"
  },
  {
    "text": "pretty much had the ability and the compiler to say that if you inherit from something that doesn't have a size then",
    "start": "2179240",
    "end": "2186500"
  },
  {
    "text": "it doesn't add to the size of the object so this in effect creates the same thing",
    "start": "2186500",
    "end": "2192590"
  },
  {
    "text": "but with less horrendous syntax and this",
    "start": "2192590",
    "end": "2200000"
  },
  {
    "text": "is weirdly beautiful I think and I have",
    "start": "2200000",
    "end": "2210230"
  },
  {
    "text": "to show you and I've changed the example a little bit here by the way if you feel",
    "start": "2210230",
    "end": "2217490"
  },
  {
    "text": "uncomfortable with these examples from the compiler cateura go to understand",
    "start": "2217490",
    "end": "2223460"
  },
  {
    "text": "Alton's talk tomorrow about a enough assembly language too for compiler explorer okay so we have two PO I forgot",
    "start": "2223460",
    "end": "2233690"
  },
  {
    "text": "to rename this one or members we have bind right hand equal to less than our",
    "start": "2233690",
    "end": "2241160"
  },
  {
    "text": "opti and we're having any of that called the",
    "start": "2241160",
    "end": "2247970"
  },
  {
    "text": "or now I have a function that I take a string view and I'm searching for the",
    "start": "2247970",
    "end": "2253790"
  },
  {
    "text": "first whitespace character I'm using the standard libraries that find if in the",
    "start": "2253790",
    "end": "2260960"
  },
  {
    "text": "range of characters for anything that is equal to any of tab line feed care to",
    "start": "2260960",
    "end": "2266960"
  },
  {
    "text": "return or space note that equal to was something I wrote just as a helper to",
    "start": "2266960",
    "end": "2273890"
  },
  {
    "text": "implement the equals equals operator but it's a higher-order function that is",
    "start": "2273890",
    "end": "2279619"
  },
  {
    "text": "applicable to any types that make sense so why not use it here and I really like this code because it this reads like a",
    "start": "2279619",
    "end": "2286790"
  },
  {
    "text": "human communication you search for anything that is equal to any of tab",
    "start": "2286790",
    "end": "2292760"
  },
  {
    "text": "line feed caliphs return space it's cute",
    "start": "2292760",
    "end": "2298270"
  },
  {
    "text": "so let's see what the compiler has done we get the size of the string view if",
    "start": "2298270",
    "end": "2304850"
  },
  {
    "text": "the size is 0 we're done we get a really really big value into our ate and it",
    "start": "2304850",
    "end": "2313970"
  },
  {
    "text": "guess what that is sorry no it's not impose good guess what is wrong if you",
    "start": "2313970",
    "end": "2322010"
  },
  {
    "text": "look at evening hex does this does this help one zero zero zero two six zero",
    "start": "2322010",
    "end": "2329030"
  },
  {
    "text": "zero this is a big number that has four",
    "start": "2329030",
    "end": "2341150"
  },
  {
    "text": "bits set more precisely it has bit 9 10 13 and 32 set how well do you know your",
    "start": "2341150",
    "end": "2348380"
  },
  {
    "text": "ASCII table so yeah tab is tab is 9 so 9",
    "start": "2348380",
    "end": "2358550"
  },
  {
    "text": "is set minefield is 10 bit Lannister keratin is 13 so bit 13 a set and space",
    "start": "2358550",
    "end": "2366560"
  },
  {
    "text": "is 32 so 32 is set so it's a it's a bit",
    "start": "2366560",
    "end": "2371840"
  },
  {
    "text": "mosque with these values so what we do is we get a value compare",
    "start": "2371840",
    "end": "2377670"
  },
  {
    "text": "if it's greater than 32 it's obviously not in white space otherwise we check if",
    "start": "2377670",
    "end": "2385140"
  },
  {
    "text": "the bit is set if it is we have a hit we're done compilers are pretty awesome",
    "start": "2385140",
    "end": "2395120"
  },
  {
    "text": "and this from writing this this code",
    "start": "2395120",
    "end": "2400410"
  },
  {
    "text": "this is not low-level code this is not bit feeling but it but the compiler generates really awesome code in here I",
    "start": "2400410",
    "end": "2407610"
  },
  {
    "text": "think I was super happy when I discovered this but happiness does not",
    "start": "2407610",
    "end": "2418950"
  },
  {
    "text": "last I'm sorry it doesn't it just doesn't maybe some things do improve context poor Peter finally and it takes",
    "start": "2418950",
    "end": "2428160"
  },
  {
    "text": "so little to add context particular see we have we have context portunities member functions tuples or context per",
    "start": "2428160",
    "end": "2436140"
  },
  {
    "text": "by default if they can be from simple or 17 or later so we don't have to do anything with those it's just done cool",
    "start": "2436140",
    "end": "2442580"
  },
  {
    "text": "so now we can actually use these in static a source for example it's it's",
    "start": "2442580",
    "end": "2448650"
  },
  {
    "text": "already there that's cool perfect for rolling everything I've",
    "start": "2448650",
    "end": "2455040"
  },
  {
    "text": "written copies everything everywhere now that can have performance in",
    "start": "2455040",
    "end": "2460160"
  },
  {
    "text": "implications and conditional no except",
    "start": "2460160",
    "end": "2466970"
  },
  {
    "text": "there are some cases where you when you write a generic algorithm where you can",
    "start": "2466970",
    "end": "2474810"
  },
  {
    "text": "make more performant choices if you know that the code you're calling can not",
    "start": "2474810",
    "end": "2480030"
  },
  {
    "text": "throw so you can have if Const expert",
    "start": "2480030",
    "end": "2485340"
  },
  {
    "text": "checks to see can I use the efficient path where where I know that nothing is",
    "start": "2485340",
    "end": "2492000"
  },
  {
    "text": "thrown or or not unfortunately I have to tell the compiler if if my expressions",
    "start": "2492000",
    "end": "2498330"
  },
  {
    "text": "are no accept or not and this is sort of in factors change with I'll show that",
    "start": "2498330",
    "end": "2505110"
  },
  {
    "text": "soon an explicit return type this maybe less important but there are two",
    "start": "2505110",
    "end": "2511380"
  },
  {
    "text": "reasons in my opinion why you want to state the return type explicitly and for",
    "start": "2511380",
    "end": "2517110"
  },
  {
    "text": "some really odd reason the return type itself does not have much to do with it",
    "start": "2517110",
    "end": "2523100"
  },
  {
    "text": "it's to do with the first for me anyway",
    "start": "2523100",
    "end": "2528330"
  },
  {
    "text": "is that it has to do with what is called",
    "start": "2528330",
    "end": "2533700"
  },
  {
    "text": "spin I we're really good at making abbreviations for things substitution",
    "start": "2533700",
    "end": "2538980"
  },
  {
    "text": "failure is not an error and if we can say that a call for operators that does",
    "start": "2538980",
    "end": "2546120"
  },
  {
    "text": "not match cannot generally generate valid code and we can do that already",
    "start": "2546120",
    "end": "2552450"
  },
  {
    "text": "when trying to figure out what the return type is that means that that function is discarded from the overload",
    "start": "2552450",
    "end": "2558480"
  },
  {
    "text": "set which means you get two benefits one",
    "start": "2558480",
    "end": "2563580"
  },
  {
    "text": "is that you get better shorter more to",
    "start": "2563580",
    "end": "2568770"
  },
  {
    "text": "the point compilation error messages people always forget that because what you get is an error message saying there",
    "start": "2568770",
    "end": "2576150"
  },
  {
    "text": "is no matching call for this for this function with these parameters and then it lists saying yeah this could have",
    "start": "2576150",
    "end": "2583530"
  },
  {
    "text": "been an alternative but you've was discarded because of if you don't have this you get this avalanche of terrible",
    "start": "2583530",
    "end": "2591270"
  },
  {
    "text": "things where you see that something is wrong in the implementation of stood grater and you're not very happy about",
    "start": "2591270",
    "end": "2598320"
  },
  {
    "text": "that I presume the other is that this is",
    "start": "2598320",
    "end": "2605130"
  },
  {
    "text": "more trickery for advanced library programs where you sometimes may want to",
    "start": "2605130",
    "end": "2612630"
  },
  {
    "text": "prune the possible overload sets and do different things depending on what is what is possible I'm not going there but",
    "start": "2612630",
    "end": "2621260"
  },
  {
    "text": "that exists so let's have a look at perfect forwarding and elements we can",
    "start": "2621260",
    "end": "2631080"
  },
  {
    "start": "2624000",
    "end": "2892000"
  },
  {
    "text": "capture by perfect forwarding so simply by saying yeah funk is stood forward of",
    "start": "2631080",
    "end": "2636660"
  },
  {
    "text": "the type of funk whatever that is this Deco type here sort of makes me sad",
    "start": "2636660",
    "end": "2644050"
  },
  {
    "text": "it's it's ugly but it worked C+ 20 gives us the possibility to be",
    "start": "2644050",
    "end": "2650349"
  },
  {
    "text": "explicit about what the what the types our template types meaning that we can",
    "start": "2650349",
    "end": "2656140"
  },
  {
    "text": "write the ugliest no up ever by saying square brackets angle brackets parenthesis and curly braces and then",
    "start": "2656140",
    "end": "2664210"
  },
  {
    "text": "call that and we have done absolutely nothing at all but having access to to the template",
    "start": "2664210",
    "end": "2671740"
  },
  {
    "text": "type is sometimes useful I think it makes the code a little bit easier to read or like having sprinkled Deco types",
    "start": "2671740",
    "end": "2679599"
  },
  {
    "text": "in in my code if I can avoid it this one is more tricky because there is",
    "start": "2679599",
    "end": "2685750"
  },
  {
    "text": "no way in super verse 14 or 17 to do perfect forwarding on on a parameter",
    "start": "2685750",
    "end": "2691540"
  },
  {
    "text": "pack so either I capture everything by reference or everything by value and by",
    "start": "2691540",
    "end": "2698200"
  },
  {
    "text": "value I mean by copy say plus 20 gives us this strange syntax for capturing the",
    "start": "2698200",
    "end": "2707710"
  },
  {
    "text": "the parameter pack now note the dots at the beginning it's not pretty but it",
    "start": "2707710",
    "end": "2714940"
  },
  {
    "text": "works and again we can it be explicit about what the template types are and",
    "start": "2714940",
    "end": "2721780"
  },
  {
    "text": "then we use some and it works it the code is becoming a bit cluttered I think",
    "start": "2721780",
    "end": "2728859"
  },
  {
    "text": "but it has the potential to perform better but then we get to your",
    "start": "2728859",
    "end": "2736839"
  },
  {
    "text": "conditional no exception now I know I'm getting sad because what we need to do",
    "start": "2736839",
    "end": "2742630"
  },
  {
    "text": "here is to say that something is no except if whatever it does is no",
    "start": "2742630",
    "end": "2748990"
  },
  {
    "text": "exception if we look at the first one the tuple the the first no accept takes",
    "start": "2748990",
    "end": "2754809"
  },
  {
    "text": "a Boland true or false is its this no accept and the second no accept the inner one is a compile-time predicate",
    "start": "2754809",
    "end": "2763210"
  },
  {
    "text": "that just reports is calling func we tease is that no except",
    "start": "2763210",
    "end": "2769530"
  },
  {
    "text": "and then we have the same thing for for and elements so this means that yes this",
    "start": "2769790",
    "end": "2778100"
  },
  {
    "text": "lambda calling this lambda is guaranteed to not throw an exception if calling Funke of elements logical ANDed is",
    "start": "2778100",
    "end": "2786320"
  },
  {
    "text": "guaranteed to not throw and yes you do need the double parentheses because the",
    "start": "2786320",
    "end": "2792050"
  },
  {
    "text": "inner accept takes a parenthesized expression and the full expression must be parenthesized so yeah and this",
    "start": "2792050",
    "end": "2800030"
  },
  {
    "text": "repetition is not nice I know only one",
    "start": "2800030",
    "end": "2805820"
  },
  {
    "text": "way to get rid of that and that is to use a macro and I hardly dare to say that when Peter saw my dad is sitting on",
    "start": "2805820",
    "end": "2812120"
  },
  {
    "text": "the front row there were attempts to get",
    "start": "2812120",
    "end": "2820010"
  },
  {
    "text": "no except oh yeah I hope we get a solution to something like this because",
    "start": "2820010",
    "end": "2825050"
  },
  {
    "text": "it gets even worse when we this is just the same more ugly repetition it gets",
    "start": "2825050",
    "end": "2830540"
  },
  {
    "text": "even worse worse we'll get to the expression return type because what we do then is again we say that yeah if we",
    "start": "2830540",
    "end": "2836660"
  },
  {
    "text": "return type from calling tuple with funk is the deka type of funk of tease and",
    "start": "2836660",
    "end": "2845480"
  },
  {
    "text": "this is this is quite silly and again",
    "start": "2845480",
    "end": "2853160"
  },
  {
    "text": "there currently there is no solution to this other than writing in horrible macros you can watch Victoria Romeo's",
    "start": "2853160",
    "end": "2859940"
  },
  {
    "text": "presentation you must type it three times and I think the question there is the obvious question why can't the",
    "start": "2859940",
    "end": "2866990"
  },
  {
    "text": "compiler do this for us it should but it",
    "start": "2866990",
    "end": "2873440"
  },
  {
    "text": "can't currently sorry so here are some repetitions that are I'm afraid I don't",
    "start": "2873440",
    "end": "2880370"
  },
  {
    "text": "have any solutions for the the last two conditional nor accept an explicit return type fortunately often don't need",
    "start": "2880370",
    "end": "2885920"
  },
  {
    "text": "them so you but but it but if you do need them though there is no way around this sorry",
    "start": "2885920",
    "end": "2892900"
  },
  {
    "text": "so yes",
    "start": "2892900",
    "end": "2896950"
  },
  {
    "text": "what's wrong with saying that operator equal equals returns bull it's perfectly sane but there are insane people who",
    "start": "2900510",
    "end": "2907830"
  },
  {
    "text": "over overload logical or to return something not and if you want to be very generic if people are building",
    "start": "2907830",
    "end": "2918000"
  },
  {
    "text": "expression templates are is an example yes so it depends on how generic you",
    "start": "2918000",
    "end": "2924570"
  },
  {
    "text": "want to be but I let's say that you had written this and the return bool and I",
    "start": "2924570",
    "end": "2931650"
  },
  {
    "text": "was reviewing your code I would probably not be it beat you for it",
    "start": "2931650",
    "end": "2937070"
  },
  {
    "text": "I could I could maybe mentioned that you know it could be there could be more",
    "start": "2937070",
    "end": "2942510"
  },
  {
    "text": "general situations yeah yeah so to",
    "start": "2942510",
    "end": "2979170"
  },
  {
    "text": "paraphrase expression templates sorry Peter yes thank you Peter I must say",
    "start": "2979170",
    "end": "2993510"
  },
  {
    "text": "what what what Nick you used to say in this when the standard isn't what do you like it to be then it's your fault",
    "start": "2993510",
    "end": "2999330"
  },
  {
    "text": "because you haven't tried to change the sound them it's okay if you have tried and failed then but then you have a right to be upset but if you haven't",
    "start": "2999330",
    "end": "3006590"
  },
  {
    "text": "dear if you haven't even tried it's your fault so okay so you know Peters common",
    "start": "3006590",
    "end": "3018200"
  },
  {
    "text": "deploy again what's attitude to get the proposal to be accepted it really really",
    "start": "3018200",
    "end": "3025280"
  },
  {
    "text": "really helps if you have a working implementation to show so that loss",
    "start": "3025280",
    "end": "3030840"
  },
  {
    "text": "modern techniques for keeping your code right I'm bein father remember that formal expressions are awesome",
    "start": "3030840",
    "end": "3037620"
  },
  {
    "text": "and tuple and apply or awesome and higher-order functions are awesome and",
    "start": "3037620",
    "end": "3044130"
  },
  {
    "text": "lambdas are awesome and c plus 20 lambdas are awesome are and compilers",
    "start": "3044130",
    "end": "3051990"
  },
  {
    "text": "are awesome and spin I am no except is so full I think actually the",
    "start": "3051990",
    "end": "3059550"
  },
  {
    "text": "functionality is awesome but the way you have to write your code is awful and sweating the small stuff makes you",
    "start": "3059550",
    "end": "3066510"
  },
  {
    "text": "annoyed but it can lead to neat code",
    "start": "3066510",
    "end": "3071660"
  },
  {
    "text": "keep your code dry thank you very much questions",
    "start": "3071660",
    "end": "3086270"
  }
]