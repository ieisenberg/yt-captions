[
  {
    "text": "hi awesome to see you great to see a packed room my apologies for people in the front you're gonna have like neck",
    "start": "4759",
    "end": "10320"
  },
  {
    "text": "pain at the end of this talk from watching up and the people at the back well I'm not sure about Heights but it",
    "start": "10320",
    "end": "15719"
  },
  {
    "text": "seems pretty crazy to be up there all right we're gonna talk about well a lot 2.0 or 2.1 I'm gonna start by",
    "start": "15719",
    "end": "22680"
  },
  {
    "text": "asking you a question if I stand back here by the way I can see you without the lights in my eyes so uh who ears using or 2.0",
    "start": "22680",
    "end": "29220"
  },
  {
    "text": "show hands like almost everybody kind of makes sense if you're here who's using OA 2.1",
    "start": "29220",
    "end": "35399"
  },
  {
    "text": "like nobody's like what the hell are you talking about what's oh at 2.1 well",
    "start": "35399",
    "end": "41040"
  },
  {
    "text": "that's why you're here I'm kind of guessing and I'm gonna talk about um oi 2.0 today but before you try start",
    "start": "41040",
    "end": "47520"
  },
  {
    "text": "throwing things at me hear me out I'm not gonna mess up your time I'm gonna be speaking about oauth 2.0 security best",
    "start": "47520",
    "end": "55199"
  },
  {
    "text": "practices or best practices in general and the story goes as follows this is from 2012 the original oad specification",
    "start": "55199",
    "end": "61280"
  },
  {
    "text": "built in a completely different time 2012 is 10 years ago that's actually October 2012 so it's almost",
    "start": "61280",
    "end": "68340"
  },
  {
    "text": "um on the dot like a couple of days missing but this is literally from a decade ago and you can imagine a decade ago web applications looked quite",
    "start": "68340",
    "end": "75240"
  },
  {
    "text": "different and today web applications have evolved and we've learned a lot about how attackers",
    "start": "75240",
    "end": "80759"
  },
  {
    "text": "operate and what may have not been the best choices back in 2012 or that they haven't preserved their benefits today",
    "start": "80759",
    "end": "87900"
  },
  {
    "text": "and things have changed over time and over time we've gotten all these additions to the oad specification there",
    "start": "87900",
    "end": "93540"
  },
  {
    "text": "have been addendums and security best practices and oh yeah mobile apps probably do something special as well",
    "start": "93540",
    "end": "99240"
  },
  {
    "text": "and for front-end web apps we kind of have separate rules and all of them all of a sudden we have this whole Suite of",
    "start": "99240",
    "end": "105420"
  },
  {
    "text": "specifications and if you are a new developer if you're trying to get into oauth today it's a mess basically you",
    "start": "105420",
    "end": "111780"
  },
  {
    "text": "start with a spec from 2012 and you read it and you're like okay I probably did not really get that but",
    "start": "111780",
    "end": "117180"
  },
  {
    "text": "sure let's let's continue and you're gonna dive into the other specs and it's like oh but this spec says that that is no longer valid from the original spec",
    "start": "117180",
    "end": "123420"
  },
  {
    "text": "and in essence you have this whole messy ecosystem and you need to read about five six specifications to get a current",
    "start": "123420",
    "end": "130560"
  },
  {
    "text": "idea of what you're supposed to do today and even then it's not that clear and that's something that a lot of people",
    "start": "130560",
    "end": "136920"
  },
  {
    "text": "struggle with so what happened is that the working group decided like yeah this is probably not the best way of",
    "start": "136920",
    "end": "143400"
  },
  {
    "text": "doing things and the old spec is kind of not great anymore so let's build a new one well not a new one but let's",
    "start": "143400",
    "end": "149520"
  },
  {
    "text": "consolidate current best practices in oau 2.1 so let's just take the original spec remove everything that is",
    "start": "149520",
    "end": "155640"
  },
  {
    "text": "deprecated they shouldn't be doing anymore add in everything that we learned in the meantime like yeah this is something you should be doing and",
    "start": "155640",
    "end": "161760"
  },
  {
    "text": "start adding it on top of that and that became all out 2.1 and or 2.1 does not exist yet so this",
    "start": "161760",
    "end": "168540"
  },
  {
    "text": "stock I'm going to keep having having to update this over time because this is a draft document as in this active ongoing",
    "start": "168540",
    "end": "175200"
  },
  {
    "text": "work and the direction of where it's going is fairly clear fairly straightforward which is why I am talking about it but in the end the",
    "start": "175200",
    "end": "181800"
  },
  {
    "text": "draft is not finished yet there might be some changes along the way but I'll keep updating this session as I give it uh in",
    "start": "181800",
    "end": "188700"
  },
  {
    "text": "other occasions so that's essentially the setup for today what am I going to talk about I'm going to talk about oat",
    "start": "188700",
    "end": "194340"
  },
  {
    "text": "best practices I'm going to talk about some things that do change in 2.1 and by the end of this session you'll have a",
    "start": "194340",
    "end": "200819"
  },
  {
    "text": "definitely a good idea of what you're supposed to be doing today which are oi 2.0 best practices and if you're doing",
    "start": "200819",
    "end": "206700"
  },
  {
    "text": "that you'll be ready for oauth 2.1 when it comes out now there's a side note here it also",
    "start": "206700",
    "end": "213300"
  },
  {
    "text": "means that new features that have been added that are really really great aren't really backboarded To Oi 2.1",
    "start": "213300",
    "end": "220319"
  },
  {
    "text": "because the the people behind the spec want to preserve some form of backwards compatibility as in they don't want to",
    "start": "220319",
    "end": "226019"
  },
  {
    "text": "start forcing you if you're doing current best practices today that you also have to do this and this and this and this even though",
    "start": "226019",
    "end": "232319"
  },
  {
    "text": "um you probably want to uh they're not going to enforce that so oau 2.1 will live together with additional expansions",
    "start": "232319",
    "end": "239099"
  },
  {
    "text": "that further improve the security of oat flows if you prefer to all right that's",
    "start": "239099",
    "end": "245159"
  },
  {
    "text": "a short introduction so what are we not going to talk about we're not going to talk about open ID connect so open ID",
    "start": "245159",
    "end": "251580"
  },
  {
    "text": "connect is about user authentication so whenever you end up on the website I'm going to use zoom as an example because",
    "start": "251580",
    "end": "256620"
  },
  {
    "text": "well since about two years everybody in the world knows and uses Zoom whether you like it or not so why not so when",
    "start": "256620",
    "end": "263340"
  },
  {
    "text": "you arrive at Zoom you're going to have the authentication dialog which is oidc you have like Federation at the bottom",
    "start": "263340",
    "end": "268740"
  },
  {
    "text": "social login Enterprise login all of that stuff is open ID connect it's built on top of ovad it uses the same Concepts",
    "start": "268740",
    "end": "275160"
  },
  {
    "text": "as oad but I'm not gonna dive into the details of that so if you want to represent this schematically what we",
    "start": "275160",
    "end": "281400"
  },
  {
    "text": "have here is we have a bunch of clients asking for user authentication that's open ID connect and that is out of scope",
    "start": "281400",
    "end": "287400"
  },
  {
    "text": "so forget about open ID connect we mentioned it um and we don't have to do it for the rest of this session",
    "start": "287400",
    "end": "293880"
  },
  {
    "text": "what are we going to talk about we are going to talk about oauth comes into play when again Zoom if you schedule a",
    "start": "293880",
    "end": "300419"
  },
  {
    "text": "meeting on Zoom you can say like add this to my Google Calendar account and zoom is going to take the user to Google ask well Google is going to ask like are",
    "start": "300419",
    "end": "307860"
  },
  {
    "text": "you sure you want that do you want to give Zoom permission to your calendar yes or no and I talked about this in a",
    "start": "307860",
    "end": "312960"
  },
  {
    "text": "workshop before and a lot of people were like uh no I don't and they would click the cancel dialect but that's a lot",
    "start": "312960",
    "end": "318120"
  },
  {
    "text": "essentially main use case of oat asking access on behalf of user Zoom asking",
    "start": "318120",
    "end": "323820"
  },
  {
    "text": "Google I would like to access the calendar API on behalf of who the user is Philip in this case which Zoom",
    "start": "323820",
    "end": "329220"
  },
  {
    "text": "doesn't have to know and that's all out can I access the API the question to the authorization server that's a client",
    "start": "329220",
    "end": "334560"
  },
  {
    "text": "asking access using an access token to contact apis to make API calls and then",
    "start": "334560",
    "end": "340259"
  },
  {
    "text": "we have the apis making decisions used on based on these access tokens with very implicit relationships or explicit",
    "start": "340259",
    "end": "346259"
  },
  {
    "text": "relationships with the authorization server that's a lot and that's essentially going to be the",
    "start": "346259",
    "end": "352139"
  },
  {
    "text": "focus for this session here today we're going to talk about best practices that",
    "start": "352139",
    "end": "357180"
  },
  {
    "text": "you should be doing some limitations also in the old specs and some guidance on how to improve that further",
    "start": "357180",
    "end": "363780"
  },
  {
    "text": "all right with that out of the way let me quickly introduce myself I'm Philip Drake I'm from Belgium and I've been at",
    "start": "363780",
    "end": "370320"
  },
  {
    "text": "NDC of the various NDC conferences for a couple of years now and it's absolutely awesome and it's great to see so many of",
    "start": "370320",
    "end": "376199"
  },
  {
    "text": "you back here today my main thing is I run my own company called pragmatic web security and I help developers build",
    "start": "376199",
    "end": "382139"
  },
  {
    "text": "more secure software only mainly through training and Conference workshops like in Hunt in-house training conference",
    "start": "382139",
    "end": "387780"
  },
  {
    "text": "workshops and security API security Frontline Security oidc topics like that and also through like highly specialized",
    "start": "387780",
    "end": "394800"
  },
  {
    "text": "Consulting on difficult security topics I'm a Google developer expert and an",
    "start": "394800",
    "end": "400020"
  },
  {
    "text": "alzero ambassador which are kind of Outreach recognitions from these companies so I don't work for Google or at xero they just",
    "start": "400020",
    "end": "405900"
  },
  {
    "text": "um like what I'm doing and they want to send me free t-shirts every now and then if I mention that I'm a Google developer",
    "start": "405900",
    "end": "411539"
  },
  {
    "text": "expert or an outdoor Ambassador so that's that's a relationship there and I also organized something in Belgium",
    "start": "411539",
    "end": "416699"
  },
  {
    "text": "called Sega death a week-long course on security if you're interested in that check it out um online",
    "start": "416699",
    "end": "422520"
  },
  {
    "text": "but enough about me let's talk about oauth so what's there in or 2.0 or 2.1",
    "start": "422520",
    "end": "429660"
  },
  {
    "text": "well let's start with the flow that makes things fairly easy let's start with a client credentials flow so what",
    "start": "429660",
    "end": "435900"
  },
  {
    "text": "are we doing here we're basically trying to access an API I'm going to use a restaurant review app as my training",
    "start": "435900",
    "end": "441120"
  },
  {
    "text": "application called restograde why because I like food I like good restaurants and well this kind of mixes",
    "start": "441120",
    "end": "447060"
  },
  {
    "text": "security with my my hobby which is nice food so um that kind of makes sense",
    "start": "447060",
    "end": "452340"
  },
  {
    "text": "restaurant review app everybody knows how that works easy conceptually and in this case we have a client application",
    "start": "452340",
    "end": "458400"
  },
  {
    "text": "trying to access some information on that restaurant review API directly that",
    "start": "458400",
    "end": "463680"
  },
  {
    "text": "client application wants to get a list of or statistics from the application like how many reviews have been created",
    "start": "463680",
    "end": "469560"
  },
  {
    "text": "yesterday across how many restaurants so that the client can use that for God knows what reason this is essentially",
    "start": "469560",
    "end": "474840"
  },
  {
    "text": "direct access to an API as a client application it's not really on behalf of a user it's just like hey give me",
    "start": "474840",
    "end": "480660"
  },
  {
    "text": "something from a non-public API from Point as we need some authorization in place to access that endpoint",
    "start": "480660",
    "end": "486960"
  },
  {
    "text": "all right this service here that we have at the bottom that is your oauth client application and to get started you have",
    "start": "486960",
    "end": "493319"
  },
  {
    "text": "to register that client that's kind of a requirement in oauth well actually the specs as you can also do it in different",
    "start": "493319",
    "end": "499379"
  },
  {
    "text": "ways but we're not going to talk about that literally in the spec like that's your problem not ours but in this case the client will be registered meaning",
    "start": "499379",
    "end": "505620"
  },
  {
    "text": "the client has an identifier in the oauth ecosystem and probably also has credentials or some Secrets can be key",
    "start": "505620",
    "end": "513240"
  },
  {
    "text": "based authentication can be client ID client secret much like a password doesn't matter much what you're using or",
    "start": "513240",
    "end": "520020"
  },
  {
    "text": "2.1 supports various mechanisms all right apis are also typically",
    "start": "520020",
    "end": "525120"
  },
  {
    "text": "defined at the authorization server so there's some notion of what an API is how that exactly works very much depends",
    "start": "525120",
    "end": "531300"
  },
  {
    "text": "on your implementation so for example alt zero is going to use like very specific identifiers for apis other",
    "start": "531300",
    "end": "536700"
  },
  {
    "text": "systems are much more implicit about that use a mechanism like Scopes to differentiate between apis but that",
    "start": "536700",
    "end": "542940"
  },
  {
    "text": "doesn't matter too much for what we're going to talk about here all right so once we have our client we have an API we can ask for an access",
    "start": "542940",
    "end": "550200"
  },
  {
    "text": "token so how does that work well the client goes to the authorization server using client credentials and says like",
    "start": "550200",
    "end": "555839"
  },
  {
    "text": "hey I'm this client here's my client ID and secret or here's something I signed to show you that I'm the real client can",
    "start": "555839",
    "end": "561360"
  },
  {
    "text": "I get an access token for the API please authorization server verifies that comes back to yeah here's an access token and",
    "start": "561360",
    "end": "567899"
  },
  {
    "text": "the client can now access that API with the access token this is the client",
    "start": "567899",
    "end": "573240"
  },
  {
    "text": "credential slow as we've always known it and that's still a current best practice that is a flow that has survived from",
    "start": "573240",
    "end": "580380"
  },
  {
    "text": "that original 2012 spec up to today and it's used quite often for machine to machine access API to API communication",
    "start": "580380",
    "end": "587399"
  },
  {
    "text": "and so on so this is a quite common pattern and an integral part of the oauth spec",
    "start": "587399",
    "end": "592800"
  },
  {
    "text": "all right I know most of you are Developers so if you look at pretty PowerPoint",
    "start": "592800",
    "end": "598980"
  },
  {
    "text": "slides you get kind of angry you want to see monospace funds so here you go a requests like this would look as follows",
    "start": "598980",
    "end": "605100"
  },
  {
    "text": "we have a call to the Token endpoint um on the authorization server we have a grand type client credentials just as",
    "start": "605100",
    "end": "611640"
  },
  {
    "text": "before we have the client exchanging um a client ID here we have the client",
    "start": "611640",
    "end": "617420"
  },
  {
    "text": "authentication properties the client secret and we have in this case an audience that's an r0 specific thing",
    "start": "617420",
    "end": "624240"
  },
  {
    "text": "because this is a request from My Demo scenario without zero I use that for my trainings",
    "start": "624240",
    "end": "629399"
  },
  {
    "text": "best practice client credentials Grant from machine to machine access that's one of the first takeaways for this",
    "start": "629399",
    "end": "634920"
  },
  {
    "text": "session that one is still today a current best practice that's something that you definitely want to use in your",
    "start": "634920",
    "end": "640800"
  },
  {
    "text": "oauth architecture all right still present in the oauth 2.1 spec as well",
    "start": "640800",
    "end": "647700"
  },
  {
    "text": "good step number one what else do we have well most use cases rely on some",
    "start": "647700",
    "end": "653640"
  },
  {
    "text": "user-based access a client accessing a resource on behalf of a user for that",
    "start": "653640",
    "end": "659339"
  },
  {
    "text": "use case we still have our restaurant review application on the right and we now have a client that allows you to",
    "start": "659339",
    "end": "665700"
  },
  {
    "text": "schedule reviews I'm going to use somebody from the audience as an example like you here up front you seem like you",
    "start": "665700",
    "end": "671700"
  },
  {
    "text": "enjoy good restaurants right and you kind of look like an influencer so you might want to be like I want to post my",
    "start": "671700",
    "end": "677399"
  },
  {
    "text": "reviews at the best optimal time not at 9am in the morning because nobody cares about going to a restaurant at 9am",
    "start": "677399",
    "end": "682500"
  },
  {
    "text": "they're still dealing with the alcohol from the night before when you went out so but about 5 p.m in the evening that's",
    "start": "682500",
    "end": "688140"
  },
  {
    "text": "that's a perfect time so you want to use a tool like this to schedule your review so they come out at 5 PM perfect time",
    "start": "688140",
    "end": "694620"
  },
  {
    "text": "everybody starts looking like where are we going to eat tonight like oh that's a great place and that's how you optimize",
    "start": "694620",
    "end": "700200"
  },
  {
    "text": "your influence basically I do the same for scheduling tweets about slides and",
    "start": "700200",
    "end": "705839"
  },
  {
    "text": "conference talks so I don't live to eat that often in this case it's an application trying to act on behalf of a",
    "start": "705839",
    "end": "712079"
  },
  {
    "text": "user it's an application that will go to the API at some point in time and say like hey I want to post this review in",
    "start": "712079",
    "end": "718140"
  },
  {
    "text": "the name of this particular user user based access how do we set that up well again you",
    "start": "718140",
    "end": "725100"
  },
  {
    "text": "register that client application it's a backend web app in this case a backend web app you register that with your",
    "start": "725100",
    "end": "730740"
  },
  {
    "text": "authorization server and when you do that you'll have to enter a couple of interesting values such as a redirect",
    "start": "730740",
    "end": "736140"
  },
  {
    "text": "URI the Callback you have to specify when my interaction which I'll show you in a",
    "start": "736140",
    "end": "742140"
  },
  {
    "text": "second my interaction is done I expect a callback at this particular endpoint meaning that you'll get a requested at",
    "start": "742140",
    "end": "747899"
  },
  {
    "text": "endpoint you get some information and authorization code which we'll talk about in a second at that end point you",
    "start": "747899",
    "end": "753000"
  },
  {
    "text": "can use that to continue the flow with specific steps and you have to register that value up front for security",
    "start": "753000",
    "end": "758640"
  },
  {
    "text": "purposes otherwise an attacker could come in and be like when you're done just send it to evil.com and uh you're",
    "start": "758640",
    "end": "764399"
  },
  {
    "text": "you're good with that and that's not possible because of this registration step now this is where",
    "start": "764399",
    "end": "771600"
  },
  {
    "text": "or 2.1 kicks in as in all out 2.0 was like yeah you have to register this",
    "start": "771600",
    "end": "777420"
  },
  {
    "text": "um redirect your eye it's important but you're you're kind of free to do that however you want and a lot of people",
    "start": "777420",
    "end": "782579"
  },
  {
    "text": "started using wild cards or partial matching and stuff like that which resulted in potential security",
    "start": "782579",
    "end": "788459"
  },
  {
    "text": "bypasses and that's essentially why they said in or 2.1 and in oauth 2.0 security",
    "start": "788459",
    "end": "794339"
  },
  {
    "text": "best practices like yeah let's not do that anymore we use exact URI matching for the Callback like if you want",
    "start": "794339",
    "end": "801060"
  },
  {
    "text": "multiple you can have multiple you can provide a list of callbacks but it has to be an exact match not a partial match not a wild card these things should not",
    "start": "801060",
    "end": "809279"
  },
  {
    "text": "be used anymore these days all right that's the setup once our client is",
    "start": "809279",
    "end": "814800"
  },
  {
    "text": "configured how do we progress well we run a flow and that's where things get",
    "start": "814800",
    "end": "820200"
  },
  {
    "text": "what's the word um more difficult because the user is involved but the the correct term would be interesting that's",
    "start": "820200",
    "end": "826019"
  },
  {
    "text": "where things get interesting because now we involve a browser of the user right so the user starts some interaction with",
    "start": "826019",
    "end": "833579"
  },
  {
    "text": "that application connects to my restaurant review application connect to that account so you have option the",
    "start": "833579",
    "end": "839339"
  },
  {
    "text": "option to post a review in my name and the uh the the flow starts so the",
    "start": "839339",
    "end": "844440"
  },
  {
    "text": "backend application initiates a flow which will basically redirect the browser of the user to the authorization",
    "start": "844440",
    "end": "850860"
  },
  {
    "text": "server and that's where a lot of messy Parts come in and the URL to do that looks exactly like the one you see here",
    "start": "850860",
    "end": "857220"
  },
  {
    "text": "or that's one example of what it looks like it's a redirect including all the information about how the flow should be",
    "start": "857220",
    "end": "863940"
  },
  {
    "text": "run for example online line number two you get a response side what do we expect as a response a code an",
    "start": "863940",
    "end": "870000"
  },
  {
    "text": "authorization code and who are we we are this particular client the the scheduler client that is trying to get a token and",
    "start": "870000",
    "end": "876779"
  },
  {
    "text": "when you're done you should send that authorization code as a response to this URL the Callback that's the URL that has",
    "start": "876779",
    "end": "883199"
  },
  {
    "text": "been registered up front and it has to be an exact match when this is executed",
    "start": "883199",
    "end": "889139"
  },
  {
    "text": "that's step number two the browser is very obedient the browse is like oh redirect I'm gonna follow that and the",
    "start": "889139",
    "end": "894180"
  },
  {
    "text": "browser will go to that authorization server now if the browser has an active session this is where the browser would send a",
    "start": "894180",
    "end": "901079"
  },
  {
    "text": "cookie along with that request and the authorization server would know who you are it's like oh yeah this is Philip from 10 minutes ago fine and you don't",
    "start": "901079",
    "end": "907500"
  },
  {
    "text": "have to authenticate if there's no active session then there will be authentication on that step the",
    "start": "907500",
    "end": "913199"
  },
  {
    "text": "authorization server will be like who who are you and what are you trying to do and that's an authorization step",
    "start": "913199",
    "end": "918959"
  },
  {
    "text": "there's optional consent as well like are you sure you want to give this application access to that API on your behalf like Zoom asked or Google asked",
    "start": "918959",
    "end": "926459"
  },
  {
    "text": "for Zoom something like that that's essentially what happens in that user interaction if you've been using oauth you're",
    "start": "926459",
    "end": "932519"
  },
  {
    "text": "probably familiar with that step as well when that is done we get the authorization code as a response which is returned to that callback URI back",
    "start": "932519",
    "end": "939600"
  },
  {
    "text": "with a redirect through the browser and it ends up on that backend application which now gets an invocation a get",
    "start": "939600",
    "end": "945120"
  },
  {
    "text": "request it can retrieve that authorization code from the URL that one is listed right here you see how that",
    "start": "945120",
    "end": "950880"
  },
  {
    "text": "works the Callback is called the listed callback from before with that authorization code that can be extracted",
    "start": "950880",
    "end": "956399"
  },
  {
    "text": "from the URL and now ends up on the backend application so what I'll do next",
    "start": "956399",
    "end": "962220"
  },
  {
    "text": "let me do a code exchange we have to exchange that authorization code for tokens with the authorization server so",
    "start": "962220",
    "end": "968399"
  },
  {
    "text": "our application our scheduling app goes back to the authorization server server to server communication and it's like yeah I would like to exchange this code",
    "start": "968399",
    "end": "975240"
  },
  {
    "text": "for tokens so I can actually do something useful on behalf of the user that step requires Authentication it's a",
    "start": "975240",
    "end": "981720"
  },
  {
    "text": "backend app that step is protected with authentication to avoid abuse in case somebody intercepts that authorization",
    "start": "981720",
    "end": "987120"
  },
  {
    "text": "code one way or another very important a security property here in this flow request looks like this it's again to",
    "start": "987120",
    "end": "993779"
  },
  {
    "text": "the Token endpoint we are exchanging an authorization code we are this particular client he we receive the code",
    "start": "993779",
    "end": "1000139"
  },
  {
    "text": "on this particular URL and here's that code that we received fairly straightforward standard a lot",
    "start": "1000139",
    "end": "1006560"
  },
  {
    "text": "stuff and if everything checks out the authorization server will give you that response here's the response with an",
    "start": "1006560",
    "end": "1013100"
  },
  {
    "text": "access token and a refresh token and now that scheduling client can access the API on your behalf both that review that",
    "start": "1013100",
    "end": "1020000"
  },
  {
    "text": "you wanted to post and take it there that's essentially how the authorization code flow works",
    "start": "1020000",
    "end": "1027319"
  },
  {
    "text": "the authorization code flow from 2012. the authorization got flow from 2012",
    "start": "1027319",
    "end": "1033319"
  },
  {
    "text": "that is no longer valid today in that form as in or 2.1 says like every",
    "start": "1033319",
    "end": "1039380"
  },
  {
    "text": "authorization code flow today requires the use of pixie which brings us to the question what is",
    "start": "1039380",
    "end": "1046220"
  },
  {
    "text": "Pixie or something more explicit that I'm not going to say out loud here but what is",
    "start": "1046220",
    "end": "1051320"
  },
  {
    "text": "pixie pixie means proof key for code exchange which of course prompts the response",
    "start": "1051320",
    "end": "1057679"
  },
  {
    "text": "like ah what that's a very complicated name for what pixie actually is and the goal of",
    "start": "1057679",
    "end": "1064880"
  },
  {
    "text": "Pixie I'm going to explain that next because it is a best practice today the goal of Pixie is to tie the start of a",
    "start": "1064880",
    "end": "1070760"
  },
  {
    "text": "flow the initialization of a flow to the exchange of the code to avoid",
    "start": "1070760",
    "end": "1075860"
  },
  {
    "text": "somebody messing with the Integrity of those steps to ensure that these steps happen in the correct context and that",
    "start": "1075860",
    "end": "1081799"
  },
  {
    "text": "they are associated together and we're going to do that using a hash function and here's how that works so the steps",
    "start": "1081799",
    "end": "1088760"
  },
  {
    "text": "I'm going to highlight what changes in greens for the steps the user still does what they want to do connect my account",
    "start": "1088760",
    "end": "1094460"
  },
  {
    "text": "and then the client application is going to calculate a long random value like really long at least 43 random",
    "start": "1094460",
    "end": "1101720"
  },
  {
    "text": "characters like really long and it's going to keep that value secret it's going to be like ah I'm going to store that value associated with this user so",
    "start": "1101720",
    "end": "1108559"
  },
  {
    "text": "I know who the user is I'm going to store this value for now and then it's going to calculate the hash value",
    "start": "1108559",
    "end": "1114919"
  },
  {
    "text": "of that random string like a hash you feed it through a hash and you get like a unique value associated with the input",
    "start": "1114919",
    "end": "1121880"
  },
  {
    "text": "but you can't reverse a hash that's a property of hashes you can't reverse them so if I tell you a long hash value",
    "start": "1121880",
    "end": "1128299"
  },
  {
    "text": "you can't tell me what the input was you can try to guess but you'll you'll have to literally try a recalculate the hash",
    "start": "1128299",
    "end": "1135080"
  },
  {
    "text": "to see if it matches there's no way to go back and we call the secret value we call that a code verifier and the hash",
    "start": "1135080",
    "end": "1140780"
  },
  {
    "text": "of that we call that a code challenge and we're going to send that hash to the authorization server in the flow in Step",
    "start": "1140780",
    "end": "1147200"
  },
  {
    "text": "4 and 5 here so we're basically telling the authorization server in the start we know something",
    "start": "1147200",
    "end": "1153679"
  },
  {
    "text": "and we're going to give you proof that we know it because we calculated something on this value but we're not telling you what the secret value is",
    "start": "1153679",
    "end": "1159200"
  },
  {
    "text": "we're just giving you the proof and the authorization server will keep track of that value alongside with the",
    "start": "1159200",
    "end": "1165140"
  },
  {
    "text": "authorization code that was created so the authorization server now has an authorization code and that hash like",
    "start": "1165140",
    "end": "1171320"
  },
  {
    "text": "somebody had a secret I don't know what it was but we'll see we'll see any client receives that authorization code",
    "start": "1171320",
    "end": "1176780"
  },
  {
    "text": "just like before and exchanges that authorization code for tokens with credentials and at that moment in step",
    "start": "1176780",
    "end": "1183320"
  },
  {
    "text": "then here we include our code verifier our secrets the client says like you",
    "start": "1183320",
    "end": "1188840"
  },
  {
    "text": "know in the beginning I told you I had a secret for this specific interaction well here's that secret",
    "start": "1188840",
    "end": "1195500"
  },
  {
    "text": "here's proof that I'm really the one that started this in the beginning here's proof that nobody else is messing",
    "start": "1195500",
    "end": "1201320"
  },
  {
    "text": "with this that the Integrity is preserved because otherwise I wouldn't have been able to tell you this very long random string right now in Step 10",
    "start": "1201320",
    "end": "1207620"
  },
  {
    "text": "and that's essentially what happens and the authorization server will be like we'll see about that and it rehashes that value and compares the hash to the",
    "start": "1207620",
    "end": "1214280"
  },
  {
    "text": "stored hash and if everything matches then awesome this is valid and you get your tokens and you are a happy client",
    "start": "1214280",
    "end": "1220220"
  },
  {
    "text": "because you can access the API and that is essentially a best practice today for every authorization code flow the use of",
    "start": "1220220",
    "end": "1226940"
  },
  {
    "text": "Pixie proof key for code exchange all right the whole purpose was to initiate through associate the initialization in",
    "start": "1226940",
    "end": "1233720"
  },
  {
    "text": "step four here with the finalization of the flow in Step 10 with the code exchange that's the goal of Pixie and",
    "start": "1233720",
    "end": "1240559"
  },
  {
    "text": "that is a current best practice in all our security best practices and a lot 2.1 as well",
    "start": "1240559",
    "end": "1247280"
  },
  {
    "text": "all right awesome what about",
    "start": "1247280",
    "end": "1252799"
  },
  {
    "text": "front-end web applications well",
    "start": "1252799",
    "end": "1258440"
  },
  {
    "text": "if you ever read the original spec in 2012.",
    "start": "1258440",
    "end": "1263780"
  },
  {
    "text": "you will have read that front-end web applications use the implicit Grant and then",
    "start": "1263780",
    "end": "1269539"
  },
  {
    "text": "things changed web applications developed we got more advanced in how we built them more",
    "start": "1269539",
    "end": "1275419"
  },
  {
    "text": "capabilities in the browser we were easy to easily make API calls across Origins and so on and today the best practice",
    "start": "1275419",
    "end": "1281240"
  },
  {
    "text": "for front-end web applications is to use the authorization code flow that is something that changed in March",
    "start": "1281240",
    "end": "1287240"
  },
  {
    "text": "2020 if I'm not mistaken and that kind of caused some Shock waves to the community because all of a sudden your",
    "start": "1287240",
    "end": "1293179"
  },
  {
    "text": "implicit flow is deprecated and you use the authorization code flow for front ends with Pixie by the way how does that",
    "start": "1293179",
    "end": "1299480"
  },
  {
    "text": "change well if you had the original back end flow we had at step 10 which required client credentials well guess",
    "start": "1299480",
    "end": "1305780"
  },
  {
    "text": "what you can't put client credentials in a front-end Javascript app because evil hackers will just open your JavaScript",
    "start": "1305780",
    "end": "1311960"
  },
  {
    "text": "files and be like oh that's your secret or this or that and they just extract it and abuse it and that's not very good so",
    "start": "1311960",
    "end": "1317960"
  },
  {
    "text": "that step it does not require client credentials it cannot require client credentials a front-end web app is what",
    "start": "1317960",
    "end": "1323240"
  },
  {
    "text": "we call a public client meaning it has no Authentication which may result in some issues down the",
    "start": "1323240",
    "end": "1330260"
  },
  {
    "text": "line but we'll talk about that in a bit so this step is not authenticated and all of the security relies on that",
    "start": "1330260",
    "end": "1337280"
  },
  {
    "text": "redirect URI that URI that you register up front like when you're done you send the authorization code to this endpoint",
    "start": "1337280",
    "end": "1342980"
  },
  {
    "text": "in step 9. this endpoint is now a front-end web page that is being loaded",
    "start": "1342980",
    "end": "1348559"
  },
  {
    "text": "and the security relies on the attacker not being able to intercept that because if you want to change that to evil.com",
    "start": "1348559",
    "end": "1354380"
  },
  {
    "text": "the authorization server is like no you're not allowed to do that I'm only sending it back to app.restergrade.com",
    "start": "1354380",
    "end": "1359900"
  },
  {
    "text": "something something well first thing of Page Apps index.html is something something and JavaScript",
    "start": "1359900",
    "end": "1366140"
  },
  {
    "text": "was boot up or load will re retrieve or read that value from the URL exchange it",
    "start": "1366140",
    "end": "1371720"
  },
  {
    "text": "for tokens um with that authorization server and hopefully everything works out that's essentially how front ends",
    "start": "1371720",
    "end": "1377240"
  },
  {
    "text": "work current best practice today awesome awesome why because when I talk about",
    "start": "1377240",
    "end": "1382400"
  },
  {
    "text": "oau these days I don't have to talk about a whole bunch of flows it's like yeah authorization code flow with Pixie",
    "start": "1382400",
    "end": "1387860"
  },
  {
    "text": "done you're probably thinking that's all",
    "start": "1387860",
    "end": "1392960"
  },
  {
    "text": "great but I'm a mobile developer like I don't care about web apps well first of all if you're a mobile developer your life is probably a lot easier than if",
    "start": "1392960",
    "end": "1399620"
  },
  {
    "text": "you're a front-end web developer but that aside how does this work in mobile apps well",
    "start": "1399620",
    "end": "1405440"
  },
  {
    "text": "here's a scenario for front-end web apps I'm going to highlight the changes for mobile apps pay close attention",
    "start": "1405440",
    "end": "1412220"
  },
  {
    "text": "that's it is the authorization code flow with Pixie so seriously my life building",
    "start": "1412220",
    "end": "1417620"
  },
  {
    "text": "slides is hard it's like copy the slide right click the image change picture with bam New Image and we're done that's",
    "start": "1417620",
    "end": "1423980"
  },
  {
    "text": "it I don't even have to draw these because my wife does that for me so that's awesome awesome as well",
    "start": "1423980",
    "end": "1429919"
  },
  {
    "text": "she has no idea what it means though but I'm just saying like I need this icon it's like okay I'll make it happen and that's pretty cool seriously mobile",
    "start": "1429919",
    "end": "1436039"
  },
  {
    "text": "applications use the authorization code flow with Pixie have been for a while by the way I think I don't know the exact",
    "start": "1436039",
    "end": "1441620"
  },
  {
    "text": "date but it's like six six years that they are supposed to do that and pixie was originally invented for this flow",
    "start": "1441620",
    "end": "1448159"
  },
  {
    "text": "with mobile apps because of a potential app-based interceptions like a malicious",
    "start": "1448159",
    "end": "1453500"
  },
  {
    "text": "app could intercept the authorization code in Step 9 and because of that exchange it and with Pixie that's no",
    "start": "1453500",
    "end": "1458600"
  },
  {
    "text": "longer possible and then they sell like hey this pixie thing is actually pretty awesome and it protects against a couple of weird attacks like code injections",
    "start": "1458600",
    "end": "1465559"
  },
  {
    "text": "and that's why they require that for every flow as well now a side note for mobile apps in",
    "start": "1465559",
    "end": "1472460"
  },
  {
    "text": "mobile apps there's some interaction with a browser and this may seem weird you are supposed to do this in a browser",
    "start": "1472460",
    "end": "1479480"
  },
  {
    "text": "in mobile apps so the oauth specs actually say that you're supposed to use a system rust or another webview because",
    "start": "1479480",
    "end": "1485360"
  },
  {
    "text": "webviews are insecure as in if you're a mobile app and you embed a webview in your app you can actually reach into the",
    "start": "1485360",
    "end": "1491659"
  },
  {
    "text": "webview lower keystrokes and execute additional code to whatever you want basically so that's not a best practice",
    "start": "1491659",
    "end": "1498380"
  },
  {
    "text": "what you're supposed to do is use the system browser which is on iOS and SF Safari review controller if I'm not",
    "start": "1498380",
    "end": "1504620"
  },
  {
    "text": "mistaken and on Android a chrome custom tabs and there you can integrate the system browser style it a bit so you can",
    "start": "1504620",
    "end": "1511400"
  },
  {
    "text": "style whatever is around that but you can't access the internals of the page and that is the recommended best",
    "start": "1511400",
    "end": "1516740"
  },
  {
    "text": "practice gives you benefits as well because that system browser has access to existing sessions it's basically just",
    "start": "1516740",
    "end": "1523280"
  },
  {
    "text": "your normal os's browser but just in an embedded format if you have an active session",
    "start": "1523280",
    "end": "1529039"
  },
  {
    "text": "with Google for example you will be able to reuse that session for single sign-on across mobile apps things like that",
    "start": "1529039",
    "end": "1534980"
  },
  {
    "text": "absolutely highly recommended to do that and that is the best practice for mobile",
    "start": "1534980",
    "end": "1540520"
  },
  {
    "text": "applications we use the embedded system browser to run an oauth authorization code flow with Pixie",
    "start": "1540520",
    "end": "1549519"
  },
  {
    "text": "I also know that some of you are building mobile apps you're like yeah this browser-based",
    "start": "1549980",
    "end": "1555679"
  },
  {
    "text": "thing usually it's like marketing doesn't like it because it disrupts the user experience and they want this",
    "start": "1555679",
    "end": "1561440"
  },
  {
    "text": "native login form and we just capture credentials and we do some weird stuff with credentials and by sending them directly to the authorization server",
    "start": "1561440",
    "end": "1567860"
  },
  {
    "text": "that is never or nowhere recommended by oat that's a violation of the oad specs",
    "start": "1567860",
    "end": "1572960"
  },
  {
    "text": "yes a lot of people are doing it yes a lot of vendors support it for exactly those reasons but no it's not legitimate",
    "start": "1572960",
    "end": "1579799"
  },
  {
    "text": "oad and it's not recommended one of the downsides of doing that is that you're teaching users to just enter credentials",
    "start": "1579799",
    "end": "1586220"
  },
  {
    "text": "whenever an app asks it so whenever a mobile app is like yeah just give me your Google credentials it's like what no of course not",
    "start": "1586220",
    "end": "1592760"
  },
  {
    "text": "so that's a bit of a problem there are cases where this does make sense but it's not just no it's not recommended or",
    "start": "1592760",
    "end": "1598159"
  },
  {
    "text": "what and please don't call it oauth because it really really isn't all right",
    "start": "1598159",
    "end": "1604778"
  },
  {
    "text": "that brings us to an overview of oat flows",
    "start": "1604820",
    "end": "1609820"
  },
  {
    "text": "in the original spec you found the authorization code grand there are called flows they're called grants I",
    "start": "1611360",
    "end": "1616760"
  },
  {
    "text": "don't know why you have the implicit Grand you have the resource owner password credentials Grant and you have",
    "start": "1616760",
    "end": "1621860"
  },
  {
    "text": "the client credentials Grant that's what the oath spec in 2012 proposed and each of these had a very specific use case in",
    "start": "1621860",
    "end": "1628279"
  },
  {
    "text": "mind and here's how it translates into modern current best practices or 2.1 basically if you want to call it that",
    "start": "1628279",
    "end": "1634400"
  },
  {
    "text": "the authorization code Grant is still there every user-facing application is supposed to use it but you have to",
    "start": "1634400",
    "end": "1640760"
  },
  {
    "text": "augment it with Pixie that is how it changed you have to use pixie when you want to be compliant with current best",
    "start": "1640760",
    "end": "1646880"
  },
  {
    "text": "practices all right implicit Grand is deprecated out no longer valid don't use it if you're",
    "start": "1646880",
    "end": "1654020"
  },
  {
    "text": "using it my advice is it's not really more broken than it was two three years ago and it's just there's a better",
    "start": "1654020",
    "end": "1661340"
  },
  {
    "text": "option authorization code flow so my advice is start phasing it out as in put it on a roadmap like yeah we probably",
    "start": "1661340",
    "end": "1666679"
  },
  {
    "text": "want to replace this with the authorization code flow it's going to work in a very similar way and libraries all have support for that so it",
    "start": "1666679",
    "end": "1672980"
  },
  {
    "text": "shouldn't be that difficult all right it's not something that means",
    "start": "1672980",
    "end": "1678020"
  },
  {
    "text": "you have to stand up now and run out to fix your applications and change the implicit Grant but it's something you should think about doing in the next",
    "start": "1678020",
    "end": "1684860"
  },
  {
    "text": "let's say a couple of months which I say every time I give the stock so I you have some leeway there so",
    "start": "1684860",
    "end": "1690440"
  },
  {
    "text": "whatever then the resource owner password credentials grant that was kind of an abomination in the spec with good",
    "start": "1690440",
    "end": "1696260"
  },
  {
    "text": "intentions and then people are like yeah let's abuse that thing so that one got deprecated like really fast",
    "start": "1696260",
    "end": "1701539"
  },
  {
    "text": "um like a year or a couple of years after the original spec so you shouldn't be using that one and then the client",
    "start": "1701539",
    "end": "1706880"
  },
  {
    "text": "credentials Grant that's actually preserved in 2.1 that's the only flow that made it through the Whole Decade",
    "start": "1706880",
    "end": "1714200"
  },
  {
    "text": "without needing modifications it's also the only flow that just like send a request get a response done",
    "start": "1714200",
    "end": "1719360"
  },
  {
    "text": "kind of plays a role here I guess but that's how things work in practice",
    "start": "1719360",
    "end": "1724940"
  },
  {
    "text": "awesome don't run away yet there's more to come because there's like a side flow a",
    "start": "1724940",
    "end": "1731120"
  },
  {
    "text": "supporting flow the refresh token flow because you can get refresh tokens and refresh tokens allow you to get a new",
    "start": "1731120",
    "end": "1737480"
  },
  {
    "text": "access token from the authorization server in case you need one and the refresh token flow",
    "start": "1737480",
    "end": "1744080"
  },
  {
    "text": "originally was only available for backend web applications that could authenticate as a client and things were",
    "start": "1744080",
    "end": "1749840"
  },
  {
    "text": "fairly straightforward and no complications and everybody was happy and awesome and then",
    "start": "1749840",
    "end": "1754940"
  },
  {
    "text": "things change because now front-end web applications can also run a refresh token flow because they run an",
    "start": "1754940",
    "end": "1761059"
  },
  {
    "text": "authorization code flow with Pixie they can get a refresh token and they can run a refresh token flow and that one requires some changes and that brings us",
    "start": "1761059",
    "end": "1768980"
  },
  {
    "text": "to this part of the presentation what's the problem here well with a",
    "start": "1768980",
    "end": "1774020"
  },
  {
    "text": "back-end application you had authentication on the request to exchange the refresh token for a new access token good",
    "start": "1774020",
    "end": "1780860"
  },
  {
    "text": "front-end web apps no secret meaning no Authentication",
    "start": "1780860",
    "end": "1786260"
  },
  {
    "text": "meaning refresh tokens in front-end web apps have become Bearer tokens",
    "start": "1786260",
    "end": "1791899"
  },
  {
    "text": "and the properties of a bear token are if you are the holder of the token you have the authority to use it meaning if",
    "start": "1791899",
    "end": "1798919"
  },
  {
    "text": "you can steal a refresh token from a front-end web app well guess what you now have it so you now have the authority to use it evil or",
    "start": "1798919",
    "end": "1805640"
  },
  {
    "text": "not that's what the bear token means and that's exactly what the problem is here in this flow so you use a refresh token",
    "start": "1805640",
    "end": "1811700"
  },
  {
    "text": "to get a new access token so you can access the API skipping through a couple of steps here and oauth 2.1 or the oads",
    "start": "1811700",
    "end": "1819140"
  },
  {
    "text": "best practices for browser-based apps say like yeah these refresh tokens is bear tokens they're not ideal so we have",
    "start": "1819140",
    "end": "1825380"
  },
  {
    "text": "to use a concept called refresh token rotation so refresh tokens enable short-lived access tokens good",
    "start": "1825380",
    "end": "1831919"
  },
  {
    "text": "but these are bare tokens and bear tokens means they're really vulnerable and because of that the specs say you",
    "start": "1831919",
    "end": "1838760"
  },
  {
    "text": "need to use refresh token rotation which means you can see this in the image right here let's see if I can highlight",
    "start": "1838760",
    "end": "1844279"
  },
  {
    "text": "that um and see here we use a refresh token and we get a new refresh token when we",
    "start": "1844279",
    "end": "1850580"
  },
  {
    "text": "get a response and that refresh token a new refresh token that's something you have to use the next time and the next",
    "start": "1850580",
    "end": "1856399"
  },
  {
    "text": "time and that's what refresh token rotation is all right how does that what does that look like on a timeline here's",
    "start": "1856399",
    "end": "1862940"
  },
  {
    "text": "a timeline from left to right like old to new you kind of get how this works right and the application obtains tokens",
    "start": "1862940",
    "end": "1869059"
  },
  {
    "text": "access token 1 and refresh token 1. and let's say that access token 1 is valid for 10 minutes which is a good practice",
    "start": "1869059",
    "end": "1875179"
  },
  {
    "text": "by the way if you can do that awesome that means that after 10 minutes access token 1 is going to expire and the app",
    "start": "1875179",
    "end": "1880640"
  },
  {
    "text": "will no longer have access to the API but we have a refresh token and that means that after nine minutes we can go",
    "start": "1880640",
    "end": "1886880"
  },
  {
    "text": "to the to the authorization server and be like hey we have a refresh token we would like a",
    "start": "1886880",
    "end": "1892340"
  },
  {
    "text": "new access token and the authorization server will verify everything like oh yeah that makes sense here's a new",
    "start": "1892340",
    "end": "1897620"
  },
  {
    "text": "access token 82 and by the way here's a new refresh token rt2 for next time you come around and again the access token",
    "start": "1897620",
    "end": "1904880"
  },
  {
    "text": "to solve for 10 minutes so we do the dance again and in nine minutes we use rt2 to get access token 3 and refresh",
    "start": "1904880",
    "end": "1910580"
  },
  {
    "text": "token 3 and then we do it for four and so on and so on and you you kind of see how this works in practice right",
    "start": "1910580",
    "end": "1916460"
  },
  {
    "text": "that's refresh token rotation that's mandatory",
    "start": "1916460",
    "end": "1922100"
  },
  {
    "text": "for better refresh tokens all right now how does this make things better",
    "start": "1922100",
    "end": "1928640"
  },
  {
    "text": "well it's because there's a second step in this whole process and that second step comes into play when a refresh",
    "start": "1928640",
    "end": "1934399"
  },
  {
    "text": "token is reused because you're not supposed to use a refresh token twice you're always supposed to use the new",
    "start": "1934399",
    "end": "1939620"
  },
  {
    "text": "one and the scenario looks as follow so the app has legitimate refresh tokens until at",
    "start": "1939620",
    "end": "1946460"
  },
  {
    "text": "some point the attacker compromises the front-end app I'm going to use an attacker here so I'm",
    "start": "1946460",
    "end": "1953360"
  },
  {
    "text": "Anders he's a up front here Anders is essentially",
    "start": "1953360",
    "end": "1959179"
  },
  {
    "text": "our attacker he breaks into an application he threw cross a scripting for example he steals a refresh token",
    "start": "1959179",
    "end": "1965120"
  },
  {
    "text": "from the app and ships it off to a server somewhere and he can now abuse that token he can use that token to",
    "start": "1965120",
    "end": "1971240"
  },
  {
    "text": "essentially obtain fresh access tokens from the SDS that's a malicious behavior",
    "start": "1971240",
    "end": "1976640"
  },
  {
    "text": "here and the attacker is doing that in practice meaning that the attacker",
    "start": "1976640",
    "end": "1982700"
  },
  {
    "text": "has access tokens in name of the user allowing him to access apis on behalf of the user and",
    "start": "1982700",
    "end": "1989120"
  },
  {
    "text": "what's worse the attacker also received a refresh token so the attacker can now use that refresh token with long-term",
    "start": "1989120",
    "end": "1995120"
  },
  {
    "text": "access however the front end doesn't know that this happened the front end is fully unaware of these attacks so the",
    "start": "1995120",
    "end": "2000700"
  },
  {
    "text": "front end is basically going to use that refresh token at some point in time and when that happens the",
    "start": "2000700",
    "end": "2006760"
  },
  {
    "text": "authorization server will detect that authorization server will be like hold on I saw this refresh token before why",
    "start": "2006760",
    "end": "2012340"
  },
  {
    "text": "are you using it a second time that makes zero sense and the security the authorization",
    "start": "2012340",
    "end": "2017980"
  },
  {
    "text": "server will see that as a violation and it will revoke the entire refresh",
    "start": "2017980",
    "end": "2023620"
  },
  {
    "text": "token chain so it will rev it will not issue a new token it will revoke",
    "start": "2023620",
    "end": "2028720"
  },
  {
    "text": "the refresh token tree that was issued to the attacker to ensure that the attacker no longer has access to that",
    "start": "2028720",
    "end": "2035260"
  },
  {
    "text": "token chain and to the API on behalf of the user and that's refresh token rotation that's essentially how that",
    "start": "2035260",
    "end": "2041679"
  },
  {
    "text": "works and that is mandatory according to oauth's 2.0 best practices in OA 2.1 for their refresh",
    "start": "2041679",
    "end": "2048940"
  },
  {
    "text": "tokens you can also have Center constraint refresh tokens which are basically refresh tokens that require",
    "start": "2048940",
    "end": "2054240"
  },
  {
    "text": "permissions to execute certain required permissions require authentication to",
    "start": "2054240",
    "end": "2059560"
  },
  {
    "text": "exchange them for tokens which is used by back-end web applications",
    "start": "2059560",
    "end": "2064800"
  },
  {
    "text": "all right awesome uh question time in a room like this is like shouting really hard and hoping I hear that",
    "start": "2073119",
    "end": "2079179"
  },
  {
    "text": "um it kind of worked out I kind of understood the questions the question was do refresh tokens have the same lifetime of access tokens or different",
    "start": "2079179",
    "end": "2084700"
  },
  {
    "text": "lifetimes they whatever you want basically as in they can have different lifetimes usually a refresh token is",
    "start": "2084700",
    "end": "2090940"
  },
  {
    "text": "alive for longer so in a front-end web app what would typically happen is you would have an access token with like",
    "start": "2090940",
    "end": "2096700"
  },
  {
    "text": "five to ten minutes Lifetime and a refresh token with something like 8 to 12 hours which kind of mimics a session",
    "start": "2096700",
    "end": "2102760"
  },
  {
    "text": "of the user that is something that is not uncommon but you're fully in control you can decide how that works in",
    "start": "2102760",
    "end": "2109180"
  },
  {
    "text": "practice all right if you have other questions it's probably easier to grab me after the",
    "start": "2109180",
    "end": "2115060"
  },
  {
    "text": "talk to discuss that um or run up front and Whisper it in my ear that's also a good option",
    "start": "2115060",
    "end": "2121060"
  },
  {
    "text": "shouting is maybe successful I don't know we can try it again but I'm not sure if it's going to succeed another time",
    "start": "2121060",
    "end": "2128700"
  },
  {
    "text": "refresh Docker rotation this is where things get",
    "start": "2133000",
    "end": "2138180"
  },
  {
    "text": "challenging because the idea behind refresh or the road token rotation is that the attacker breaks into the app",
    "start": "2138280",
    "end": "2144240"
  },
  {
    "text": "executes malicious JavaScript steals a refresh token and exit and basically uses that refresh token to obtain tokens",
    "start": "2144240",
    "end": "2152380"
  },
  {
    "text": "and that perception of JavaScript that perception of malicious JavaScript of a Crosshair scripting attack in the front",
    "start": "2152380",
    "end": "2157599"
  },
  {
    "text": "end is somewhat mistaken because it's it relies on the fact that",
    "start": "2157599",
    "end": "2163180"
  },
  {
    "text": "the attacker is basically a script Kitty that doesn't really know what they're doing it's like",
    "start": "2163180",
    "end": "2168460"
  },
  {
    "text": "able to access tokens mostly likely in local storage I'm extracting those tokens and abusing them immediately and",
    "start": "2168460",
    "end": "2173920"
  },
  {
    "text": "that is a simplistic not so realistic attack so how does that work",
    "start": "2173920",
    "end": "2178960"
  },
  {
    "text": "well you execute that attack meaning you as the attacker for example you write a review and you add a snippet of",
    "start": "2178960",
    "end": "2184480"
  },
  {
    "text": "JavaScript code and if you visit that application with that review that code executes in your browser so if it's my",
    "start": "2184480",
    "end": "2190540"
  },
  {
    "text": "code if I'm the attacker I can now execute that code in your browser I can steal your refresh token send it to a",
    "start": "2190540",
    "end": "2196119"
  },
  {
    "text": "server that I control that's me at the bottom and once I get that refresh token",
    "start": "2196119",
    "end": "2201460"
  },
  {
    "text": "I can use it and now I have tokens in your name so I can access the API that is the scenario that refresh token",
    "start": "2201460",
    "end": "2208060"
  },
  {
    "text": "rotation tries to protect against also works with access tokens by the way I can still access tokens and refresh tokens and abuse both of them how would",
    "start": "2208060",
    "end": "2215380"
  },
  {
    "text": "you do that an attack like this is super straightforward it looks like this you load an image in that image you drop all",
    "start": "2215380",
    "end": "2221859"
  },
  {
    "text": "the data in the URL all the data from local storage and you load it from an evil server malicious food that's my",
    "start": "2221859",
    "end": "2227079"
  },
  {
    "text": "evil server I like food sorry about that and we send it off to there and we can abuse it",
    "start": "2227079",
    "end": "2232599"
  },
  {
    "text": "this is the attack scenario that refresh token rotation addresses and in essence that's why we have",
    "start": "2232599",
    "end": "2237940"
  },
  {
    "text": "short-lived access tokens because if you steal an access token you can only abuse it for five to ten minutes good and if",
    "start": "2237940",
    "end": "2244000"
  },
  {
    "text": "you seal a refresh token and you use that well refresh token rotation the authorization server will detect that",
    "start": "2244000",
    "end": "2249460"
  },
  {
    "text": "and will revoke tokens so the attack is stopped and that's the whole idea behind",
    "start": "2249460",
    "end": "2255640"
  },
  {
    "text": "the security mechanisms and that ID is completely flawed it doesn't work because this is a very simplistic silly",
    "start": "2255640",
    "end": "2262780"
  },
  {
    "text": "attack it's not what a real attacker would do script kiddies are not your threat model yes it's good to keep them",
    "start": "2262780",
    "end": "2268660"
  },
  {
    "text": "out and to protect your applications against script kitties but the real attackers will not be stopped by these",
    "start": "2268660",
    "end": "2273700"
  },
  {
    "text": "security mechanisms two scenarios where this doesn't work very well one is",
    "start": "2273700",
    "end": "2279119"
  },
  {
    "text": "slightly more sophisticated attack instead of just stealing a token and using it what if we only use it",
    "start": "2279119",
    "end": "2286119"
  },
  {
    "text": "at a convenient time and it works like this so we execute our attack as in I",
    "start": "2286119",
    "end": "2292180"
  },
  {
    "text": "create a review with the malicious JavaScript it loads in your browser and I the first thing I do in malicious code",
    "start": "2292180",
    "end": "2297760"
  },
  {
    "text": "is instead of just stealing the data I send I set up a heartbeat like every 10 seconds I'm gonna call my own server",
    "start": "2297760",
    "end": "2304180"
  },
  {
    "text": "like hey these browser is still online hey this browser is online every 10 seconds like",
    "start": "2304180",
    "end": "2309280"
  },
  {
    "text": "here I am here I am here I am alright step one step two is I'm gonna steal your refresh tokens every time you get a",
    "start": "2309280",
    "end": "2315579"
  },
  {
    "text": "new refresh token I'm gonna stake it and ship it off to my server just collecting it like here is that latest refresh",
    "start": "2315579",
    "end": "2322300"
  },
  {
    "text": "token RT one two three four all the way up to 17 or whatever until the heartbeat",
    "start": "2322300",
    "end": "2328480"
  },
  {
    "text": "dies until the heartbeat is no longer there well I'm gonna wait and if it's not",
    "start": "2328480",
    "end": "2334720"
  },
  {
    "text": "there 10 seconds later and 10 seconds later guess what you are now offline you have closed the tab in your browser you",
    "start": "2334720",
    "end": "2340960"
  },
  {
    "text": "have shut down your laptop you have lost Wi-Fi connectivity I don't care what you did but the app is no longer online",
    "start": "2340960",
    "end": "2347260"
  },
  {
    "text": "that's essentially step five we detected the heartbeat has died and guess what your app is not gonna do when it's",
    "start": "2347260",
    "end": "2352720"
  },
  {
    "text": "offline well you don't have to guess because I can't hear you anyway there's a lot of",
    "start": "2352720",
    "end": "2359500"
  },
  {
    "text": "noise back here from downstairs as well but guess what the app is not going to do use the latest refresh token because",
    "start": "2359500",
    "end": "2364960"
  },
  {
    "text": "it's not a fine anymore so the attacker is now excellent all right the latest one was rt17 perfect I'm going to use",
    "start": "2364960",
    "end": "2371079"
  },
  {
    "text": "rt17 with the authorization server I will get access token 18 and refresh token 18 and I can now pretend to be",
    "start": "2371079",
    "end": "2377800"
  },
  {
    "text": "well pretend to be you I can pretend to be you for the next amount of time which",
    "start": "2377800",
    "end": "2383380"
  },
  {
    "text": "can often be hours until the refresh token chain finally expires that's essentially a very nasty attack factor",
    "start": "2383380",
    "end": "2390220"
  },
  {
    "text": "that fully takes advantage of what refresh token",
    "start": "2390220",
    "end": "2395740"
  },
  {
    "text": "rotation has to offer it basically sidesteps refresh token rotation and it can't protect against attacks like this",
    "start": "2395740",
    "end": "2402280"
  },
  {
    "text": "that is a big problem and the whole problem with cross-site scripting and malicious JavaScript is",
    "start": "2402280",
    "end": "2407920"
  },
  {
    "text": "that the attacker controls the front-end application they can do anything that you as a front-end developer would be",
    "start": "2407920",
    "end": "2413980"
  },
  {
    "text": "able to do and there's one worst thing the attacker can do and this next scenario is",
    "start": "2413980",
    "end": "2420760"
  },
  {
    "text": "basically not good it's even worse than sidestepping refresh token rotation and",
    "start": "2420760",
    "end": "2426040"
  },
  {
    "text": "the next scenario is just getting a new set of tokens we have the application app.resquery.com doing its thing and you",
    "start": "2426040",
    "end": "2433420"
  },
  {
    "text": "know what front-end applications do when you load them the first time they don't have any state",
    "start": "2433420",
    "end": "2438460"
  },
  {
    "text": "because modern API modern sdks for frontlands they don't store stuff in local storage they hide tokens as good",
    "start": "2438460",
    "end": "2444520"
  },
  {
    "text": "as they can to prevent them from being stolen by a malicious attacker by an attacker running JavaScript so they hide tokens",
    "start": "2444520",
    "end": "2450880"
  },
  {
    "text": "and God knows what places like web workers good example of that worker we hired a refresh token in the web worker",
    "start": "2450880",
    "end": "2456040"
  },
  {
    "text": "and you can't access that and that's true there's no straightforward way or there's no way to access the data in the",
    "start": "2456040",
    "end": "2461619"
  },
  {
    "text": "web worker awesome good but the attacker here is smart and what does",
    "start": "2461619",
    "end": "2468400"
  },
  {
    "text": "the app do when your first bootstrap it that doesn't have a worker it doesn't have state so it's going to run a hidden iframe based flow like it's going to",
    "start": "2468400",
    "end": "2475240"
  },
  {
    "text": "load an iframe hide that frame in the browser run a silent flow which will use your existing session with the",
    "start": "2475240",
    "end": "2481240"
  },
  {
    "text": "authorization server if you have one that's why you load the app and it's unauthenticated in like a second later",
    "start": "2481240",
    "end": "2486400"
  },
  {
    "text": "flip it's like welcome Philip that means the app has run that flow in the background it's like oh there's a cookie",
    "start": "2486400",
    "end": "2492280"
  },
  {
    "text": "oh yeah the authorization server knows that it's Philip from 10 minutes ago awesome it's gonna automatically issue a",
    "start": "2492280",
    "end": "2497680"
  },
  {
    "text": "code which is exchanged for tokens and fluke you are now authenticated single sign-on at work and a lot of sdks do",
    "start": "2497680",
    "end": "2504820"
  },
  {
    "text": "this by default by the way the art zero SDK if you just included for angular or reactor view the first thing it does is",
    "start": "2504820",
    "end": "2510220"
  },
  {
    "text": "like let's see if there's a session and token spam bam done awesome good the app does what it does we don't",
    "start": "2510220",
    "end": "2516339"
  },
  {
    "text": "care about that we're the attacker now what do we as the attacker do well",
    "start": "2516339",
    "end": "2521440"
  },
  {
    "text": "we're gonna abuse the fact that there's no authentication in this flow the entire security of this flow relies",
    "start": "2521440",
    "end": "2528339"
  },
  {
    "text": "on that redirect URI like we only send the code to app.prestroke.com and nowhere else but guess what we as the",
    "start": "2528339",
    "end": "2534820"
  },
  {
    "text": "attacker control if I have that malicious JavaScript in your browser icontrolapp.restuate.com my code runs in",
    "start": "2534820",
    "end": "2541540"
  },
  {
    "text": "that specific origin and I can do whatever I want within app.resterway.com in your browser",
    "start": "2541540",
    "end": "2548500"
  },
  {
    "text": "so what am I going to do I'm going to run that same pattern I'm going to load a hidden iframe in an iframe I'm going",
    "start": "2548500",
    "end": "2553780"
  },
  {
    "text": "to bootstrap a hidden Asylum authorization code flow which will send a request to that authorization server",
    "start": "2553780",
    "end": "2559359"
  },
  {
    "text": "from your browser and it will include your cookie either your cookie was still there from",
    "start": "2559359",
    "end": "2565060"
  },
  {
    "text": "before or it's there because you authenticated to the app your browser has a cookie for the authorization",
    "start": "2565060",
    "end": "2570280"
  },
  {
    "text": "server and the authorization server will know who you are it's like oh you want a new set of tokens like sure it doesn't",
    "start": "2570280",
    "end": "2575500"
  },
  {
    "text": "know that this is malicious JavaScript code for all it knows that you open a new tab and went to restaurant.com again",
    "start": "2575500",
    "end": "2580900"
  },
  {
    "text": "and it's just a new instantiation of the app there's no difference once we get the authorization code we",
    "start": "2580900",
    "end": "2587560"
  },
  {
    "text": "can send it to the attacker's controlled resource we can exchange that code for tokens and that's a fresh set of tokens",
    "start": "2587560",
    "end": "2593200"
  },
  {
    "text": "now it's a set of tokens that is unrelated to the legitimate applications tokens and it's completely new",
    "start": "2593200",
    "end": "2600339"
  },
  {
    "text": "and fully in control of the attacker now and that's not good because the attacker can now exchange that code for tokens",
    "start": "2600339",
    "end": "2605380"
  },
  {
    "text": "access token refresh token valid for 8 to 12 hours and we now have access in name of the user for 8 to 12 hours and",
    "start": "2605380",
    "end": "2612040"
  },
  {
    "text": "that is a massive problem and every front-end security scenario",
    "start": "2612040",
    "end": "2617680"
  },
  {
    "text": "that relies on trying to hide tokens from the attacker is vulnerable to attacks like this there's no good way to",
    "start": "2617680",
    "end": "2624460"
  },
  {
    "text": "protect against this because this is inherent to the security model of front-end web applications the moment",
    "start": "2624460",
    "end": "2630040"
  },
  {
    "text": "you control that you control it all and you can do whatever you want",
    "start": "2630040",
    "end": "2635040"
  },
  {
    "text": "so I have a question if you're a friend or developers or are you screwed well the answer is kind of yes",
    "start": "2635380",
    "end": "2641140"
  },
  {
    "text": "in case you're wondering like absolutely yes",
    "start": "2641140",
    "end": "2647339"
  },
  {
    "text": "all right if I would and I end here this would be kind of depressing it's like ah this is all messed up in all kinds of",
    "start": "2650200",
    "end": "2657040"
  },
  {
    "text": "ways good luck with that bye bye now there is a solution and the solution is actually what a lot",
    "start": "2657040",
    "end": "2663280"
  },
  {
    "text": "of high highly sensitive applications are doing and the solution is don't build front-end web applications which",
    "start": "2663280",
    "end": "2668980"
  },
  {
    "text": "is not very helpful right so the solution is not don't build and the solution is build them but move the",
    "start": "2668980",
    "end": "2675220"
  },
  {
    "text": "oauth components to a back end for front-end pattern that's what you're supposed to do and that's a back end for",
    "start": "2675220",
    "end": "2681040"
  },
  {
    "text": "front button here's the conceptual idea so instead of the front end here which is Direct in directly interacting with",
    "start": "2681040",
    "end": "2687099"
  },
  {
    "text": "the authorization server with the API we're going to put a back-end component a BFF in front of that and your",
    "start": "2687099",
    "end": "2693280"
  },
  {
    "text": "front-end and your BFF together that's your application that's essentially the front end",
    "start": "2693280",
    "end": "2698920"
  },
  {
    "text": "and for the rest nothing changes so all you do is basically you add that BFF",
    "start": "2698920",
    "end": "2704200"
  },
  {
    "text": "becomes the oauth client application so you move the O out features from the front end into the BFF and you keep",
    "start": "2704200",
    "end": "2710680"
  },
  {
    "text": "track of that with a cookie that's it just like that and what what does that mean it means that the BFF becomes the",
    "start": "2710680",
    "end": "2717099"
  },
  {
    "text": "oath client which is interacting with the authorization server and guess what it backends web application does when it",
    "start": "2717099",
    "end": "2723099"
  },
  {
    "text": "interacts with the authorization server it authenticates client credentials",
    "start": "2723099",
    "end": "2728500"
  },
  {
    "text": "whether it's secret based or key based doesn't matter it authenticates whenever it uses tokens and how does a front-end",
    "start": "2728500",
    "end": "2735160"
  },
  {
    "text": "column API well it just calls an endpoint on the BFF BFF slash reviews",
    "start": "2735160",
    "end": "2740920"
  },
  {
    "text": "and the BFF will see that request and it's like oh you want to call an API endpoint awesome I'm going to take your",
    "start": "2740920",
    "end": "2746740"
  },
  {
    "text": "cookie I'm going to retrieve your tokens as a user so if you make that request to me as the BFF I'm going to take your",
    "start": "2746740",
    "end": "2752440"
  },
  {
    "text": "cookie retrieve your access token slap your access token on the request and send it to the actual API",
    "start": "2752440",
    "end": "2757660"
  },
  {
    "text": "and the API hasn't changed the API is still your API from before it gets the request with an access token it uses the",
    "start": "2757660",
    "end": "2763780"
  },
  {
    "text": "access token to make authorization decisions and gives you a response and the response goes back to the front end",
    "start": "2763780",
    "end": "2768880"
  },
  {
    "text": "that's the concept of a BFF and the BFF here is nothing more than a glorified proxy",
    "start": "2768880",
    "end": "2775480"
  },
  {
    "text": "it's very disrespectful to BFFs but it's the truth it's a glorified proxy that just four skulls it has no business",
    "start": "2775480",
    "end": "2781780"
  },
  {
    "text": "logic no authorization information no API specific information it just knows",
    "start": "2781780",
    "end": "2788020"
  },
  {
    "text": "here's a cookie I can use that cookie to get to tokens slap tokens on the request and forward them and send a response",
    "start": "2788020",
    "end": "2794680"
  },
  {
    "text": "back that's what a BFF really does in practice you can build that BFF",
    "start": "2794680",
    "end": "2800140"
  },
  {
    "text": "in a stateful way or stateless way whatever you want you can put tokens in a cookie encrypt",
    "start": "2800140",
    "end": "2806859"
  },
  {
    "text": "that cookie and send it to the browser that would be a secure way of implementing that in practice",
    "start": "2806859",
    "end": "2812380"
  },
  {
    "text": "what's the benefit here well the benefit is even if the attacker compromises this it can't the attacker can't or exchange",
    "start": "2812380",
    "end": "2819339"
  },
  {
    "text": "code here for tokens there's no silent flows to execute because all of the flows that",
    "start": "2819339",
    "end": "2826240"
  },
  {
    "text": "you would execute require client authentication on the code exchange client on delegation on a refresh token",
    "start": "2826240",
    "end": "2831520"
  },
  {
    "text": "exchange making the whole security approach a lot better",
    "start": "2831520",
    "end": "2836680"
  },
  {
    "text": "so the BFF allows you to follow best practices for back-end web applications makes it easier to use things like",
    "start": "2836680",
    "end": "2842800"
  },
  {
    "text": "sender constrained tokens backed by mtls would be easy to implement on a BFF would be a nightmare in front lens or",
    "start": "2842800",
    "end": "2849160"
  },
  {
    "text": "virtually impossible in web-based front-ends and I can hear you thinking like yeah but",
    "start": "2849160",
    "end": "2854980"
  },
  {
    "text": "does that really solve cross-site scripting no it doesn't but it solves the consequences of",
    "start": "2854980",
    "end": "2860859"
  },
  {
    "text": "Crosshair scripting well not really it it reduces the impact of the attack let's call it that because CrossFit",
    "start": "2860859",
    "end": "2866740"
  },
  {
    "text": "scripting is always possible and my first advice when we talk about this is fix your damn cross-et scripting problems because that's a real major",
    "start": "2866740",
    "end": "2873640"
  },
  {
    "text": "issue in a web app get that right on my website I have a lot of advice on doing",
    "start": "2873640",
    "end": "2879400"
  },
  {
    "text": "that for a reactant angular by the way so look at that but the benefit here is the BFF never exposes tokens to",
    "start": "2879400",
    "end": "2886420"
  },
  {
    "text": "an attacker there's no way for a detector to obtain tokens from the front-end alone and the only thing the",
    "start": "2886420",
    "end": "2892180"
  },
  {
    "text": "attacker can do is asked BFF to send a request meaning that the BFF can choose",
    "start": "2892180",
    "end": "2897280"
  },
  {
    "text": "which endpoints to expose it's not full raw API access it's limited through what the BFF exposes to the front end and",
    "start": "2897280",
    "end": "2904839"
  },
  {
    "text": "second your BFF could implement some normal sensible rules on what",
    "start": "2904839",
    "end": "2912400"
  },
  {
    "text": "you're supposed to do as a front-end if your front end requests like sense request 10 requests per minute in",
    "start": "2912400",
    "end": "2918760"
  },
  {
    "text": "normal cases well guess what if it sends 10 000 in a minute you might want to be at the BFF level like me you've had",
    "start": "2918760",
    "end": "2924579"
  },
  {
    "text": "enough for now what the hell is wrong with you that can definitely work as well so this gives you the power to",
    "start": "2924579",
    "end": "2930339"
  },
  {
    "text": "control and this actually makes the whole scenario a hell of a lot better so that's actually how things are improving",
    "start": "2930339",
    "end": "2937300"
  },
  {
    "text": "so BFS relying core building blocks they're nothing special what they basically do is they have the use of",
    "start": "2937300",
    "end": "2943960"
  },
  {
    "text": "cookies they use a back end over at client library and that's it again a glorified proxy if you're",
    "start": "2943960",
    "end": "2949900"
  },
  {
    "text": "familiar with do any identity server they have a library a BFF library that implements that whole BFF concept for",
    "start": "2949900",
    "end": "2955540"
  },
  {
    "text": "you and if you're not familiar there's also a package from manfred's tire that has an a reverse proxy that does",
    "start": "2955540",
    "end": "2962020"
  },
  {
    "text": "something very similar so you'll find existing implementations of BFFs and building that yourself is not going to",
    "start": "2962020",
    "end": "2968020"
  },
  {
    "text": "be a month worth of work it's going to be a day two days and that's it and you have a fully tested fully configurable",
    "start": "2968020",
    "end": "2974140"
  },
  {
    "text": "BFF you can use across all your applications awesome and they can be stateful stateless depending on what you",
    "start": "2974140",
    "end": "2980319"
  },
  {
    "text": "prefer as an implementation pattern good what's the takeaway here the",
    "start": "2980319",
    "end": "2985480"
  },
  {
    "text": "takeaway is that oh outs 2.x because it's it's an ongoing problem underestimates the power of malicious",
    "start": "2985480",
    "end": "2991599"
  },
  {
    "text": "JavaScript as in the security measures in oauth will not protect you against full",
    "start": "2991599",
    "end": "2997960"
  },
  {
    "text": "compromise if you have a cross-eyed scripting vulnerability be aware of that because that is a very big limitation of",
    "start": "2997960",
    "end": "3003300"
  },
  {
    "text": "these specs in the industry a best practice for security sensitive applications",
    "start": "3003300",
    "end": "3010319"
  },
  {
    "text": "is to use BFFs instead of plain front ends that have their own client ID the",
    "start": "3010319",
    "end": "3015839"
  },
  {
    "text": "BFF is the ORD client and this for example very relevant here is used in your Norwegian Healthcare System like I",
    "start": "3015839",
    "end": "3021839"
  },
  {
    "text": "know that people uh responsible for building that from udelts they they were at the conference as well they probably still are and they know about these",
    "start": "3021839",
    "end": "3029579"
  },
  {
    "text": "problems and they feel like yeah screw front ends no freaking way that we can have a front end as a legitimate client",
    "start": "3029579",
    "end": "3034680"
  },
  {
    "text": "we only allow back-end clients or mobile apps if I'm not mistaken I'm not exactly",
    "start": "3034680",
    "end": "3039839"
  },
  {
    "text": "sure and we enforce the use of a BFF for front ends all right",
    "start": "3039839",
    "end": "3047000"
  },
  {
    "text": "yes light again awesome the dark slides hide you and then a light slide you're like oh my eyes but uh",
    "start": "3049500",
    "end": "3055859"
  },
  {
    "text": "sorry about that usually it's not that dark in the audience so what else is",
    "start": "3055859",
    "end": "3060900"
  },
  {
    "text": "there Beyond oi 2.1 like what else um is there to look at like I said in the beginning oh 2.1 can't incorporate",
    "start": "3060900",
    "end": "3068040"
  },
  {
    "text": "everything that they would have wanted because otherwise it's going to be a nightmare to get to supporting or 2.1 if",
    "start": "3068040",
    "end": "3073800"
  },
  {
    "text": "you're like yeah you're all that stuff two one zero plus these five additional things are gonna be like yeah screw it I",
    "start": "3073800",
    "end": "3079319"
  },
  {
    "text": "will stay on OA 2.0 for a while Twitter's still a lot a lot one uh for example so yeah that happens in practice",
    "start": "3079319",
    "end": "3085800"
  },
  {
    "text": "so they said like oh 2.1 is simple straightforward if you're doing over 2.0 right you are doing or 2.1 get there",
    "start": "3085800",
    "end": "3093000"
  },
  {
    "text": "today that's something I can highly recommend get this thing these things sorted out make sure you do that",
    "start": "3093000",
    "end": "3098220"
  },
  {
    "text": "correctly and then if you want more there's more security conscious configurations of all art where you have",
    "start": "3098220",
    "end": "3104700"
  },
  {
    "text": "things like jar where you have the authorization initialization URI with all the parameters that's now a Json web",
    "start": "3104700",
    "end": "3110099"
  },
  {
    "text": "token you can push that to the authorization server before sending it that's bar pushed authorization requests",
    "start": "3110099",
    "end": "3115619"
  },
  {
    "text": "you have RAR for Rich authorization requests where you can ask like fine-grained consent from the user for",
    "start": "3115619",
    "end": "3122460"
  },
  {
    "text": "for example for financial transactions you can ask consent for a single transaction with all the parameters that's RAR and then fappy2",
    "start": "3122460",
    "end": "3129420"
  },
  {
    "text": "is for the Fortified apis highly security sensitive configurations on",
    "start": "3129420",
    "end": "3134579"
  },
  {
    "text": "what to do right for example for financial apis or Healthcare apis just a couple of references you can dig",
    "start": "3134579",
    "end": "3140520"
  },
  {
    "text": "into these yourself if you're interested in going beyond the current best practices and improving the security of",
    "start": "3140520",
    "end": "3147720"
  },
  {
    "text": "your deployment all right brings us to three important key takeaways number one",
    "start": "3147720",
    "end": "3153480"
  },
  {
    "text": "you should probably be able to say this together with me but number one if you use or 2.0 the right way which you",
    "start": "3153480",
    "end": "3160920"
  },
  {
    "text": "should you're already doing or 2.1 that should be a relief it's like oh awesome",
    "start": "3160920",
    "end": "3166200"
  },
  {
    "text": "if you're not look into improving that because these things are really really important",
    "start": "3166200",
    "end": "3171420"
  },
  {
    "text": "things like pixie are important so make sure you start using that as soon as you can",
    "start": "3171420",
    "end": "3177780"
  },
  {
    "text": "use your applications instead of having all of these different flows it's like the optimization code flow at pixie and",
    "start": "3177780",
    "end": "3182819"
  },
  {
    "text": "that's it frontland web app mobile web app backend web app all the same flow makes my life as a teacher a lot easier",
    "start": "3182819",
    "end": "3188880"
  },
  {
    "text": "because I don't have to explain all of these different flows with different trade-offs and so on and a lot of these things translate into oidc as well maybe",
    "start": "3188880",
    "end": "3195660"
  },
  {
    "text": "not officially but in practice and IDC flow will support something like pixie if the authorization server does that",
    "start": "3195660",
    "end": "3201420"
  },
  {
    "text": "awesome and then third security sends the front-end web apps they can't stand on",
    "start": "3201420",
    "end": "3207240"
  },
  {
    "text": "their own in an oath ecosystem you really really have to look into that BFF pattern it's the only proper way to make",
    "start": "3207240",
    "end": "3213720"
  },
  {
    "text": "sure you can protect your applications in the front end and those are the three most important takeaways",
    "start": "3213720",
    "end": "3220559"
  },
  {
    "text": "if some of these things are like Chinese or I don't know if you're in Norwegian Dutch to you whatever a language you",
    "start": "3220559",
    "end": "3226920"
  },
  {
    "text": "don't really understand which for me is a lot of languages starts with French which Belgian people don't like if you don't speak French but sure um I have a",
    "start": "3226920",
    "end": "3233520"
  },
  {
    "text": "course a lot it's about oau 2.0 but I cover a lot of best practices so you can scratch it out and write 2.1 it's going",
    "start": "3233520",
    "end": "3239880"
  },
  {
    "text": "to be sort of similar so check it out if you want to thank you very much for being here um I'm gonna stick around",
    "start": "3239880",
    "end": "3245520"
  },
  {
    "text": "after the session so you can ask me questions if you have any um we're not going to do it live because it's going to be a nightmare with the",
    "start": "3245520",
    "end": "3251400"
  },
  {
    "text": "the height and the shouting and the noise and stuff like that so ask me afterwards and connect with me on social",
    "start": "3251400",
    "end": "3256859"
  },
  {
    "text": "media if you want to stay in touch and stay up to date on security thank you very much",
    "start": "3256859",
    "end": "3263119"
  }
]