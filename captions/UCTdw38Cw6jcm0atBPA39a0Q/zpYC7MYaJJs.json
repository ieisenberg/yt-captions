[
  {
    "text": "good morning everyone I'm happy to see that so many of you made it all the way here did you",
    "start": "3560",
    "end": "10280"
  },
  {
    "text": "swim across from the uh hotels yeah I think we should start off",
    "start": "10280",
    "end": "15480"
  },
  {
    "text": "by giving ourselves a round of applause for being so good swimming over here",
    "start": "15480",
    "end": "22000"
  },
  {
    "text": "whoa right that's going to make everyone wake up and also confuse everyone else that just started their sessions so",
    "start": "22000",
    "end": "28400"
  },
  {
    "text": "we're going to be talking about what's coming in net 8 and C 12 it can be a little bit difficult to keep up with",
    "start": "28400",
    "end": "35280"
  },
  {
    "text": "what's happening with net and c and it's interesting because up until now most of",
    "start": "35280",
    "end": "41000"
  },
  {
    "text": "what I've talked about at conferences is what's been happening with C over the past few years but since the new",
    "start": "41000",
    "end": "47360"
  },
  {
    "text": "versions of net and C are just around the corner it's going to be released in a couple of weeks after this conference",
    "start": "47360",
    "end": "53399"
  },
  {
    "text": "in November I think it's safe to talk about some of the things that are coming in the new versions before we get into",
    "start": "53399",
    "end": "59519"
  },
  {
    "text": "that my name is Philip eberg it's my third time coming to Porto I always love coming here and having good",
    "start": "59519",
    "end": "64760"
  },
  {
    "text": "conversations in the hallways and I always say send me an email if you have any questions after the talk you can",
    "start": "64760",
    "end": "71799"
  },
  {
    "text": "send me an email during the talk as well if you would like to it's funny because I never receive any emails and I",
    "start": "71799",
    "end": "77960"
  },
  {
    "text": "realized a few months ago that I forgot to put my email on the slide which is why people never",
    "start": "77960",
    "end": "84159"
  },
  {
    "text": "contacted me and when I did that it people do send me emails so I love that I love having conversations about what's",
    "start": "84159",
    "end": "89200"
  },
  {
    "text": "happening in SE andet and and everything around programming in in net and C all",
    "start": "89200",
    "end": "94640"
  },
  {
    "text": "right so we're going to be discussing quite a lot of the language features of c and what's coming in net while this",
    "start": "94640",
    "end": "100600"
  },
  {
    "text": "here shows a tag cloud of what's happened to C the past decade we're not going to spend much time going into each",
    "start": "100600",
    "end": "107640"
  },
  {
    "text": "of these different features but it illustrates that the language keeps evolving which also means that the",
    "start": "107640",
    "end": "114759"
  },
  {
    "text": "framework or net as a as a as a tool also has to evolve the runtime time",
    "start": "114759",
    "end": "120079"
  },
  {
    "text": "keeps evolving to adapt to these new features and also we get things that are more in line with what we expect such as",
    "start": "120079",
    "end": "127560"
  },
  {
    "text": "support for mobile development better applications for the web with Blazer and everything that's new in asp.net core",
    "start": "127560",
    "end": "134519"
  },
  {
    "text": "and that's some of the things that we're going to be covering here today so we'll start off by talking a little bit about",
    "start": "134519",
    "end": "139640"
  },
  {
    "text": "what's new in net and looking at the features that have been added and what's coming and and what you can expect out",
    "start": "139640",
    "end": "144959"
  },
  {
    "text": "of that I'll also talk a little bit about what's happened in Net 7 when we come to those interesting features it's",
    "start": "144959",
    "end": "151680"
  },
  {
    "text": "interesting because there's a massive amount of information online if you search for what's new.net 8 or what's",
    "start": "151680",
    "end": "157840"
  },
  {
    "text": "new in asp.net core8 there's going to be like 14 different blog posts each of",
    "start": "157840",
    "end": "163599"
  },
  {
    "text": "them are 5,000 uh words plus so it takes like a week to read through them all so",
    "start": "163599",
    "end": "169280"
  },
  {
    "text": "it can be a little bit of a a work to get all of this uh knowledge into your head so I've picked out some of the best",
    "start": "169280",
    "end": "174959"
  },
  {
    "text": "things that I think are coming in net 8 we're going to be talking about time Prov providers and system. text just",
    "start": "174959",
    "end": "181840"
  },
  {
    "text": "Json and and so forth before we get into this how many of you are using the new thing called net from Net 5 and",
    "start": "181840",
    "end": "189400"
  },
  {
    "text": "onwards all of you net 6 and onwards seven and onwards oh I see some hands",
    "start": "189400",
    "end": "195760"
  },
  {
    "text": "going down eight nine and oops no one they've actually",
    "start": "195760",
    "end": "201400"
  },
  {
    "text": "started the work on net 9 as well and C 13 so we'll we'll discuss that as well",
    "start": "201400",
    "end": "206920"
  },
  {
    "text": "and what you could expect out of that so it's interesting to see that so many of you are already on the new versions of",
    "start": "206920",
    "end": "212280"
  },
  {
    "text": "net Mo most of the people I I tend to visit at at bigger corporations they are",
    "start": "212280",
    "end": "217439"
  },
  {
    "text": "still stock on NET Framework they have to find ways to get on",
    "start": "217439",
    "end": "223159"
  },
  {
    "text": "toet and maybe they've been investing in net core and want to now upgrade to net",
    "start": "223159",
    "end": "228720"
  },
  {
    "text": "6 7 and 8 and onwards and net 8 is the latest iteration or the new version",
    "start": "228720",
    "end": "234200"
  },
  {
    "text": "that's has an LTS support their support for the different versions is a little",
    "start": "234200",
    "end": "239439"
  },
  {
    "text": "bit different than what you might have seen in other things like Java and so forth with net every second year they",
    "start": "239439",
    "end": "245239"
  },
  {
    "text": "release an an LTS version means that it's going to be supported for a very long time longtime support is a really",
    "start": "245239",
    "end": "253040"
  },
  {
    "text": "important thing for really big companies so that's why if you didn't jump on net",
    "start": "253040",
    "end": "258160"
  },
  {
    "text": "6 maybe net 8 is going to be the next really big release so for Microsoft I imagine this release being quite",
    "start": "258160",
    "end": "265520"
  },
  {
    "text": "important every second release of net for example net Net 5 and Net 7 and net 9 that's where",
    "start": "265520",
    "end": "273880"
  },
  {
    "text": "they in introduce new and kind of experimental features I don't want to say experimental because it's still a",
    "start": "273880",
    "end": "279600"
  },
  {
    "text": "thing that they support and will let you use in production or or suggest that you use in",
    "start": "279600",
    "end": "284919"
  },
  {
    "text": "production so we're going to be talking a little bit about some of the things that they've also improved upon across",
    "start": "284919",
    "end": "290320"
  },
  {
    "text": "all of these different releases but one thing that all of these have in common",
    "start": "290320",
    "end": "295840"
  },
  {
    "text": "everything from Net 5 and onwards so what happened with NET Framework work and net core was that it was all just",
    "start": "295840",
    "end": "301800"
  },
  {
    "text": "incorporated into this this one thing now called net and I still want to call it a framework but that makes it so",
    "start": "301800",
    "end": "308280"
  },
  {
    "text": "confusing so I'm not going to refer to it as a framework we'll just call it the thing going",
    "start": "308280",
    "end": "314240"
  },
  {
    "text": "onwards without that being said they have one thing in common and it's build for anything or build anything that",
    "start": "314240",
    "end": "319560"
  },
  {
    "text": "you'd like to so be it a web application be It Mobile be an iot device Asher",
    "start": "319560",
    "end": "325759"
  },
  {
    "text": "whatever whatever you want to build has anyone heard this before yes everyone has heard this before this",
    "start": "325759",
    "end": "332280"
  },
  {
    "text": "has been the the idea of of net ever since the first iteration of NET Framework they've always wanted you to",
    "start": "332280",
    "end": "339160"
  },
  {
    "text": "be able to build anything with net and I would say that up until recently that",
    "start": "339160",
    "end": "344280"
  },
  {
    "text": "wasn't necessarily possible but now with net and net core being incorporated into this making it truly crossplatform we",
    "start": "344280",
    "end": "351960"
  },
  {
    "text": "are very close to to building anything so we'll get back to mobility",
    "start": "351960",
    "end": "358560"
  },
  {
    "text": "in a little bit but that's one of the the final pillars of net for build anything that was missing in the latest",
    "start": "358560",
    "end": "365120"
  },
  {
    "text": "LTS version of net so we'll be covering quite a few things when it comes to net before we",
    "start": "365120",
    "end": "371440"
  },
  {
    "text": "get into that I I'm very happy that I found a net bot there's a DOT net bot generator that I could tweak myself I",
    "start": "371440",
    "end": "378319"
  },
  {
    "text": "made one in scuba gear and the reason I did that is because at one conference I had myself in scuba gear like full Tech",
    "start": "378319",
    "end": "384880"
  },
  {
    "text": "scuba and someone gave me negative feedback because they didn't want to see me in scuba gear so now the net Body In",
    "start": "384880",
    "end": "390280"
  },
  {
    "text": "Scuba gear anyways we're here to talk about net it's all about",
    "start": "390280",
    "end": "396240"
  },
  {
    "text": "performance and I'm not going to jump around like Steve Balmer screaming performance performance performance you",
    "start": "396240",
    "end": "401960"
  },
  {
    "text": "could imagine that yourself so since net 6 they've made a",
    "start": "401960",
    "end": "407280"
  },
  {
    "text": "huge investment into making performance one of the main goals of going forward",
    "start": "407280",
    "end": "412440"
  },
  {
    "text": "it's supposed to be the fastest thing around you can compare it to C++ because that's a totally different thing but",
    "start": "412440",
    "end": "418720"
  },
  {
    "text": "it's still going to be be the most performance thing on the market for what it can support you to do like web",
    "start": "418720",
    "end": "424879"
  },
  {
    "text": "development startup times mobile applications that should be running natively and feeling like a native",
    "start": "424879",
    "end": "430520"
  },
  {
    "text": "application anything like that it should be highly efficient and what's interesting when",
    "start": "430520",
    "end": "436759"
  },
  {
    "text": "they've done these work for performance in the core apis which is the core part",
    "start": "436759",
    "end": "441800"
  },
  {
    "text": "of net they all are shared across Blazer asp.net core Blazer net Maui console",
    "start": "441800",
    "end": "448879"
  },
  {
    "text": "applications if you s like to we'll also be going to talk about time",
    "start": "448879",
    "end": "454479"
  },
  {
    "text": "abstractions if you write tests how many of you writing tests all of you",
    "start": "454479",
    "end": "461840"
  },
  {
    "text": "right right I also write tests all the time I'm just kidding so we're going to",
    "start": "461840",
    "end": "468159"
  },
  {
    "text": "be talking about time abstractions which is a way for us to improve testability of our code which is highly important",
    "start": "468159",
    "end": "473639"
  },
  {
    "text": "and since most of you write test I think this is going to be a nice addition to to net we're going to be talking about",
    "start": "473639",
    "end": "478960"
  },
  {
    "text": "some changes in system. text. Json we're going to be talking about asp.net core",
    "start": "478960",
    "end": "484440"
  },
  {
    "text": "net Maui and a few more things I'm I'll mention a couple of things in terms of Blazer as well but that's a whole topic",
    "start": "484440",
    "end": "491240"
  },
  {
    "text": "on its own so we'll focus on on these things when it comes to net now it can be a little bit confusing",
    "start": "491240",
    "end": "497960"
  },
  {
    "text": "like we we're going to be talking about net 8 which is coming in in mid November and if you want to use one of these",
    "start": "497960",
    "end": "503560"
  },
  {
    "text": "versions it can be a little bit tricky especially when we talk about the language features and how that's supported by the frame work or the",
    "start": "503560",
    "end": "510960"
  },
  {
    "text": "runtime over the years C has in the beginning of net with NET Framework C",
    "start": "510960",
    "end": "516880"
  },
  {
    "text": "was couple with the release of NET Framework then they decoupled that so you could for example they released a c",
    "start": "516880",
    "end": "524159"
  },
  {
    "text": "version that wasn't coupled to net core 3 net core 3.0 2.0 sorry um but now",
    "start": "524159",
    "end": "533440"
  },
  {
    "text": "we're back to being coupled with the runtime releases and the reses of visual studio and so forth what that means is",
    "start": "533440",
    "end": "539440"
  },
  {
    "text": "that we can expect that when the language gets an update for example there's a Target type new expression in",
    "start": "539440",
    "end": "545720"
  },
  {
    "text": "in C 9 that had to have an update in the runtime for that to work you can have",
    "start": "545720",
    "end": "553279"
  },
  {
    "text": "method implementations on interfaces which wasn't possible before c 8 but with that feature being added that also",
    "start": "553279",
    "end": "559880"
  },
  {
    "text": "had to have an update by the runtime and the the framework components so that's why you will see",
    "start": "559880",
    "end": "566560"
  },
  {
    "text": "that if you want to use C 12 you'll have to use Dot net 8 but most of what's happening with a",
    "start": "566560",
    "end": "572839"
  },
  {
    "text": "compiler is synthetic sugar and compiler magic so I'm going to say this while it's unsupported you can still use C2",
    "start": "572839",
    "end": "579959"
  },
  {
    "text": "with NET Framework 2.0 for the features that just compiled down to the the supported",
    "start": "579959",
    "end": "586640"
  },
  {
    "text": "IL now I mentioned that one of the biggest things that have improved upon is",
    "start": "586640",
    "end": "592440"
  },
  {
    "text": "performance and while I'm not going to say that those of you that are on NET Framework are Rusty Developers this is a",
    "start": "592440",
    "end": "600160"
  },
  {
    "text": "very good illustration of what the work has been into making this better they",
    "start": "600160",
    "end": "605720"
  },
  {
    "text": "made some really good things that worked for a very long time but it was time to",
    "start": "605720",
    "end": "611040"
  },
  {
    "text": "improve upon that in C or in net 6 going forward so a lot of work went into",
    "start": "611040",
    "end": "617440"
  },
  {
    "text": "making this look very shiny make it much more performant than what it used to be",
    "start": "617440",
    "end": "622880"
  },
  {
    "text": "this was all done by allowing them to use some language features and portions of net they used spans and ranges which",
    "start": "622880",
    "end": "630880"
  },
  {
    "text": "is a concept that allows you to very efficiently work with memory now spans and ranges have been",
    "start": "630880",
    "end": "637360"
  },
  {
    "text": "around in C since I believe C 7.0 7.1 23",
    "start": "637360",
    "end": "643200"
  },
  {
    "text": "they made some point releases with c 7 that introduced a couple of more features so it's been around for quite",
    "start": "643200",
    "end": "649519"
  },
  {
    "text": "some time but it's just up until recently that they've heavily used this and refactor portions of net and asp.net",
    "start": "649519",
    "end": "656839"
  },
  {
    "text": "core and net Maui and and going forward with the other uh portions as well",
    "start": "656839",
    "end": "662160"
  },
  {
    "text": "that's where they use this and these together introduces a a much more performant solution so what is this if",
    "start": "662160",
    "end": "668639"
  },
  {
    "text": "you want to just get up to speed what this is a range is a way for us to provide a Syntax for accessing one or",
    "start": "668639",
    "end": "675480"
  },
  {
    "text": "multiple elements defining a range of elements python developers have probably seen this before I could say skip the",
    "start": "675480",
    "end": "682399"
  },
  {
    "text": "first two elements and give me the rest of that sequence I could say give me everything up until one off the end of",
    "start": "682399",
    "end": "688279"
  },
  {
    "text": "an array or a sequence of elements I could say give me two from the end and the rest of the",
    "start": "688279",
    "end": "694600"
  },
  {
    "text": "list now this alone isn't performant enough it has to be coupled with something called a span a span is a way",
    "start": "694600",
    "end": "701519"
  },
  {
    "text": "for you to point to the start and the end of an array and why is that important well if",
    "start": "701519",
    "end": "708440"
  },
  {
    "text": "you're a C++ developers you know that pointers are very efficient it's a very efficient way to use one collection for",
    "start": "708440",
    "end": "714800"
  },
  {
    "text": "example and then slice off portions of that without allocating more memory M",
    "start": "714800",
    "end": "719920"
  },
  {
    "text": "we're doing very heavy computations so an example of a zero allocation code piece could be this here",
    "start": "719920",
    "end": "726240"
  },
  {
    "text": "I have this payload just a couple of bytes could be text could be whatever this payload is now a bite array I then",
    "start": "726240",
    "end": "734760"
  },
  {
    "text": "simply cast it by doing an implicit cast to say that I'm going to look at this as a span of",
    "start": "734760",
    "end": "740160"
  },
  {
    "text": "bytes of course this here is going to allocate one reference on my on my stack",
    "start": "740160",
    "end": "745399"
  },
  {
    "text": "but that's a very effective allocation so it's almost zero",
    "start": "745399",
    "end": "751560"
  },
  {
    "text": "allocations and then at the end here what I'm saying I want a subset of this this array I can say give me the two",
    "start": "751560",
    "end": "758720"
  },
  {
    "text": "last bytes in this array and this will then create a pointer to those two last",
    "start": "758720",
    "end": "763920"
  },
  {
    "text": "elements now this looks very complex I have another example where I I get a",
    "start": "763920",
    "end": "769480"
  },
  {
    "text": "readon span of bytes which is a utf8 string now C and net have traditionally",
    "start": "769480",
    "end": "776480"
  },
  {
    "text": "only been working with utf16 everything in CP and net has always been utf16 because they need a",
    "start": "776480",
    "end": "783120"
  },
  {
    "text": "wider character set to support all the different languages and every culture out there but if you're working with web",
    "start": "783120",
    "end": "789480"
  },
  {
    "text": "development most of the content on the web is UTF utf8 doing the conversion",
    "start": "789480",
    "end": "794880"
  },
  {
    "text": "between utf8 and utf16 it's a little bit timec consuming so now we have support",
    "start": "794880",
    "end": "800560"
  },
  {
    "text": "for utf8 string literal so I have a constant here with my name I simply say I want to look at this as a span of",
    "start": "800560",
    "end": "807760"
  },
  {
    "text": "bytes I can find the space in the middle I can slice off the first name and the last name and this here is in fact not",
    "start": "807760",
    "end": "815160"
  },
  {
    "text": "performing any additional allocations in terms of what's on the Heap in terms of",
    "start": "815160",
    "end": "820320"
  },
  {
    "text": "copying an array over this here is someone is going to tell me yes you're allocating a couple of references on",
    "start": "820320",
    "end": "826320"
  },
  {
    "text": "your stack sure but in accept that there's zero allocations so this here is truly truly",
    "start": "826320",
    "end": "834160"
  },
  {
    "text": "handy I use this quite a lot to slice off if I have a uh payload coming in from reading Hardware I I use this all",
    "start": "834160",
    "end": "840360"
  },
  {
    "text": "the time and then you can pass around the references internally in your applications without having to do any",
    "start": "840360",
    "end": "845800"
  },
  {
    "text": "further copying of that memory and they're doing this internally in asp.net core inet in net Maui in Blazer and all",
    "start": "845800",
    "end": "852880"
  },
  {
    "text": "of those different components and that is what's really building this super",
    "start": "852880",
    "end": "857959"
  },
  {
    "text": "performant um apis they also heavily invest in",
    "start": "857959",
    "end": "863600"
  },
  {
    "text": "something called native aot Native aot is a is a process of natively comp",
    "start": "863600",
    "end": "868720"
  },
  {
    "text": "compile your application ahead of time so ahead of time compilation I could take a CP and net application compile it",
    "start": "868720",
    "end": "876199"
  },
  {
    "text": "for a very particular platform like my Mac here and say I want this to run natively on my Mac it doesn't have to",
    "start": "876199",
    "end": "882639"
  },
  {
    "text": "rely on net being installed at all so what the compiler will then do it will take the parts of net and the net",
    "start": "882639",
    "end": "889920"
  },
  {
    "text": "runtime that you use it will natively compile that into the platform you're targeting and you can then pass that on",
    "start": "889920",
    "end": "896120"
  },
  {
    "text": "to someone that doesn't even have net installed and that is extremely",
    "start": "896120",
    "end": "901199"
  },
  {
    "text": "performant now for things like asp.net Json sterilization and other types of",
    "start": "901199",
    "end": "907079"
  },
  {
    "text": "processes like that this has always been a little bit tricky but with the addition of something known as Source",
    "start": "907079",
    "end": "912920"
  },
  {
    "text": "generators they've been able to make this even better so if you're using Json",
    "start": "912920",
    "end": "918040"
  },
  {
    "text": "in your applications you can decorate a class to say that I want you to produce some source for this to make it possible",
    "start": "918040",
    "end": "924399"
  },
  {
    "text": "to generate something during compile time that will build this for a native platform and again for very specific purposes",
    "start": "924399",
    "end": "932759"
  },
  {
    "text": "this is really important when it comes to mobile development or running things or running applications that need to",
    "start": "932759",
    "end": "938680"
  },
  {
    "text": "start up really quickly so going forward you'll see this um quite often",
    "start": "938680",
    "end": "944000"
  },
  {
    "text": "especially if you're doing net Maui or previously samarin they've also again I'm going to",
    "start": "944000",
    "end": "949720"
  },
  {
    "text": "talk a lot about performance and how that's been improved in net because it's one of the pillars there's four pillars",
    "start": "949720",
    "end": "954800"
  },
  {
    "text": "of net there's performance asp.net core Blazer and crossplatform",
    "start": "954800",
    "end": "960000"
  },
  {
    "text": "UI with that being said U performance is always going to be a really um heavy",
    "start": "960000",
    "end": "965480"
  },
  {
    "text": "investment for Microsoft and with this they also introduce a performance focused type called uh Frozen or Frozen",
    "start": "965480",
    "end": "973120"
  },
  {
    "text": "dictionaries I was planning to sing a song from a Disney from a Disney movie",
    "start": "973120",
    "end": "978319"
  },
  {
    "text": "when uh introducing this here but the video would probably be copyright stried so that's probably not a good idea but",
    "start": "978319",
    "end": "984319"
  },
  {
    "text": "they've introduced system. collections. Frozen which allows you to point to a source dictionary so it's then converted",
    "start": "984319",
    "end": "992000"
  },
  {
    "text": "into a frozen dictionary and why would that be important because when you freeze the dictionary or a set or",
    "start": "992000",
    "end": "999519"
  },
  {
    "text": "another type of collection this works with more types than just dictionaries they've introduced an implementation",
    "start": "999519",
    "end": "1004920"
  },
  {
    "text": "that's very optimized for reading and accessing elements so once you once you've produced Your Dictionary if you",
    "start": "1004920",
    "end": "1011319"
  },
  {
    "text": "know that you're only going to access elements it's better to convert it into something that you cannot change after",
    "start": "1011319",
    "end": "1017959"
  },
  {
    "text": "afterwards that means it's going to be very very very much",
    "start": "1017959",
    "end": "1023160"
  },
  {
    "text": "faster so that's the performance parts of this now I'd like to spend some time talking about calization calization is",
    "start": "1023160",
    "end": "1030520"
  },
  {
    "text": "something they've improved upon going all the way from net core is anyone still using json.net",
    "start": "1030520",
    "end": "1038160"
  },
  {
    "text": "system or system do json.net yeah Newton soft. Json a couple maybe 10 of you are",
    "start": "1038160",
    "end": "1044199"
  },
  {
    "text": "using that how many is using the new system. text. Json the rest that's",
    "start": "1044199",
    "end": "1050360"
  },
  {
    "text": "awesome so it's interesting because the difference between json.net and system. text tojson guess what it is it's the",
    "start": "1050360",
    "end": "1058240"
  },
  {
    "text": "focus on performance the important thing with system. text. Json is that it's much",
    "start": "1058240",
    "end": "1064640"
  },
  {
    "text": "faster than json.net and the reason is because it's not as feature heavy as json.net if you have a Json document",
    "start": "1064640",
    "end": "1072120"
  },
  {
    "text": "paste posted into your application json.net will be very forgiving in what you P you you post into that that",
    "start": "1072120",
    "end": "1078520"
  },
  {
    "text": "endpoint like it will very much deserialize anything it will figure out the most things for you that also means",
    "start": "1078520",
    "end": "1085520"
  },
  {
    "text": "that it's going to take a little bit more time to deserialize your types or your documents so with system. text.",
    "start": "1085520",
    "end": "1091640"
  },
  {
    "text": "Json the idea is that if you own both ends of the the text or the the endpoints why not use the fastest appro",
    "start": "1091640",
    "end": "1099120"
  },
  {
    "text": "fastest approach possible on both ends if you own both of those things or if you just tell whoever is posting data",
    "start": "1099120",
    "end": "1105120"
  },
  {
    "text": "into your endpoint or your application that you should follow the the Json standard then it will be all be very",
    "start": "1105120",
    "end": "1111679"
  },
  {
    "text": "good so I'll mention a few things that have been improved upon in in system. text Json I'll show you this in in",
    "start": "1111679",
    "end": "1118320"
  },
  {
    "text": "Visual Studio there are a couple of things in in net 8 they're going to",
    "start": "1118320",
    "end": "1123440"
  },
  {
    "text": "introduce extensions for system. net. HTTP so we'll look at that",
    "start": "1123440",
    "end": "1129480"
  },
  {
    "text": "first there's I have an HTTP client here that I've declared it's simply using using declaration creating this new",
    "start": "1129480",
    "end": "1136520"
  },
  {
    "text": "client now the best approach would be to set this up using dependency injection but it's for the purpose of this",
    "start": "1136520",
    "end": "1142080"
  },
  {
    "text": "demonstration I'm going to create a new instance and then on the client they've introduced an extension method called get Json as async",
    "start": "1142080",
    "end": "1149400"
  },
  {
    "text": "innumerable this is interesting because now I can use a what they call a streaming API to say that I want to",
    "start": "1149400",
    "end": "1155679"
  },
  {
    "text": "stream data but what happens here is that what what it actually does is that it queries",
    "start": "1155679",
    "end": "1162039"
  },
  {
    "text": "my API it it it gets whatever this thing returns it then deserializes that into",
    "start": "1162039",
    "end": "1169039"
  },
  {
    "text": "an I inumerable that I can can consume as a stream of elements so I know that",
    "start": "1169039",
    "end": "1175200"
  },
  {
    "text": "this returns an an array of stocks in this case here stock identifiers just sample data I can then say for each",
    "start": "1175200",
    "end": "1181520"
  },
  {
    "text": "element that I'm going to asynchron asynchronously retrieve I can process that in my um reach so this here is the",
    "start": "1181520",
    "end": "1188919"
  },
  {
    "text": "new streaming API or the extensions for the streaming apis it's not going to",
    "start": "1188919",
    "end": "1194039"
  },
  {
    "text": "introduce any paging so if this here was paged so let's say that you get 100 elements each time you call it it's not",
    "start": "1194039",
    "end": "1200400"
  },
  {
    "text": "going to do any magic like that what it is going to do though if this endpoint",
    "start": "1200400",
    "end": "1205880"
  },
  {
    "text": "returns a lot of data it's going to have internal buffers to asynchronously read",
    "start": "1205880",
    "end": "1211360"
  },
  {
    "text": "that so it re it will read one buffer at a time it will deserialize that using the system. text. Json and using the uh",
    "start": "1211360",
    "end": "1219000"
  },
  {
    "text": "the stream for that as well which means that you could potentially read a portion of that document and then stop",
    "start": "1219000",
    "end": "1226159"
  },
  {
    "text": "when you found what you're looking for so this again it's something that's",
    "start": "1226159",
    "end": "1231720"
  },
  {
    "text": "going to be highly performant and we could of course have queried this API on our own using um just using the normal",
    "start": "1231720",
    "end": "1239400"
  },
  {
    "text": "get async and then dilize the entire document if we so like to it's quite",
    "start": "1239400",
    "end": "1244720"
  },
  {
    "text": "just a handy feature and then what they've introduced is is Json polymorphic or polymorphic",
    "start": "1244720",
    "end": "1251760"
  },
  {
    "text": "serialization this was worked upon in Net 7 and was actually the first release",
    "start": "1251760",
    "end": "1258240"
  },
  {
    "text": "of how this worked was in inet 6 in D net 6 you were able to say I have an",
    "start": "1258240",
    "end": "1264360"
  },
  {
    "text": "inherited type I want you to serialize that into adjacent document and you would get a very nice representation of",
    "start": "1264360",
    "end": "1271000"
  },
  {
    "text": "that that inheritance but there was no way to deserialize that back into your application the built-in system. text.",
    "start": "1271000",
    "end": "1277799"
  },
  {
    "text": "Json didn't have support for it so with Net 7 they introduced support for",
    "start": "1277799",
    "end": "1283120"
  },
  {
    "text": "polymorphic deserialization super difficult word to say so what you do is that you can say I",
    "start": "1283120",
    "end": "1289240"
  },
  {
    "text": "have a record here which simply uh is the base record I have a inheritor type",
    "start": "1289240",
    "end": "1294799"
  },
  {
    "text": "that inherits from this user and I can then on the base type say that this here has a type discriminator",
    "start": "1294799",
    "end": "1301279"
  },
  {
    "text": "it's going to be ajacent dve type so whenever you you find the properties of those derived types we can support",
    "start": "1301279",
    "end": "1307760"
  },
  {
    "text": "this there are some security concerns with allowing anything to be deserialized into anything imagine that",
    "start": "1307760",
    "end": "1314279"
  },
  {
    "text": "I was also having like a super user or an admin here like if you passing an admin into your application then you",
    "start": "1314279",
    "end": "1320760"
  },
  {
    "text": "could say that oh I just deserialized this data into something that it shouldn't be so you have to be careful",
    "start": "1320760",
    "end": "1326360"
  },
  {
    "text": "when doing this as well but this here was added in in Net 7 and in net 8 they they extended this so",
    "start": "1326360",
    "end": "1333520"
  },
  {
    "text": "they also now support properties that are coming from inherited interfaces which makes it even more complex I",
    "start": "1333520",
    "end": "1340600"
  },
  {
    "text": "honestly couldn't come up with a good example of that so I just skipped it and we were talking about normal uh",
    "start": "1340600",
    "end": "1346000"
  },
  {
    "text": "polymorphism instead what they've also talked about adding is",
    "start": "1346000",
    "end": "1351120"
  },
  {
    "text": "the support for populating readon Fields so on this record run this user I have a",
    "start": "1351120",
    "end": "1357880"
  },
  {
    "text": "list of phone numbers if you were to run this code or have this in in Net 7 it wouldn't do",
    "start": "1357880",
    "end": "1364480"
  },
  {
    "text": "anything it would skip anything that's read only but with net 8 it will create the instance of these",
    "start": "1364480",
    "end": "1371400"
  },
  {
    "text": "phone numbers because we have the target type new expression here and if it finds phone numbers inside my Json document it",
    "start": "1371400",
    "end": "1378880"
  },
  {
    "text": "will add it to this list which is amazing except when I built this",
    "start": "1378880",
    "end": "1384240"
  },
  {
    "text": "demonstration I found a bug in net 8 which is going to be fixed in net 9 so I",
    "start": "1384240",
    "end": "1390400"
  },
  {
    "text": "know what's coming the next version all right so what the bug is is that if you have a primary",
    "start": "1390400",
    "end": "1397200"
  },
  {
    "text": "Constructor then it doesn't work it just skips everything that's read only so um they're going to have the",
    "start": "1397200",
    "end": "1405720"
  },
  {
    "text": "support for this but there also going to be dick at it as it's only going to work if you don't have a Constructor or a",
    "start": "1405720",
    "end": "1411240"
  },
  {
    "text": "primary Constructor on your types so if you're like me spending a full day's work trying to figure out why",
    "start": "1411240",
    "end": "1417039"
  },
  {
    "text": "this isn't working just remove the primary Constructor and that uh Json creation handling works and it would",
    "start": "1417039",
    "end": "1422640"
  },
  {
    "text": "populate this with phone numbers if it was a available in that document so what's interesting here not",
    "start": "1422640",
    "end": "1429279"
  },
  {
    "text": "only that I found the bug but the the way that you can communicate with the net team now using GitHub it's all open",
    "start": "1429279",
    "end": "1435440"
  },
  {
    "text": "source so I try to look up what happen happens internally and we had a discussion and I had a discussion with a",
    "start": "1435440",
    "end": "1441279"
  },
  {
    "text": "team and like how do I get around this there's a bug in the in the documentation saying that this works but",
    "start": "1441279",
    "end": "1446400"
  },
  {
    "text": "it doesn't work um which we then found out it's actually a bug in the dilzer and you know it's four three",
    "start": "1446400",
    "end": "1453320"
  },
  {
    "text": "three-ish weeks until they're going to release net would it be a good idea to refactor the whole system. tex. Json",
    "start": "1453320",
    "end": "1459320"
  },
  {
    "text": "well I said yes but someone didn't agree with me so we're going to wait so again um deserializing into inh",
    "start": "1459320",
    "end": "1468080"
  },
  {
    "text": "type is probably the biggest thing for Json system. tex. Json and the streaming apis the support for that is really",
    "start": "1468080",
    "end": "1474240"
  },
  {
    "text": "important now in addition to that they're also going to introduce something called time",
    "start": "1474240",
    "end": "1480640"
  },
  {
    "text": "abstractions I have a little bit of a code sample here you're all writing tests so how would you test this the",
    "start": "1480640",
    "end": "1487080"
  },
  {
    "text": "problem here isn't that I have a class called order service it's not that I have an a method that takes an order I",
    "start": "1487080",
    "end": "1493120"
  },
  {
    "text": "don't really using this method here I wouldn't know that it it calls daytime offset UTC now now if you've seen my",
    "start": "1493120",
    "end": "1500640"
  },
  {
    "text": "course on plural side talking about how to efficiently work with dates and times and how to do that properly you know",
    "start": "1500640",
    "end": "1506360"
  },
  {
    "text": "that you should always use daytime offset so that's not really the problem here the issue is that what happens if",
    "start": "1506360",
    "end": "1513760"
  },
  {
    "text": "I'd like to test this against for example when the time jumps over to winter time let's say we're building a",
    "start": "1513760",
    "end": "1519640"
  },
  {
    "text": "ticketing system I want to write a test that ensures that I can buy a ticket just a minute before it turns over to",
    "start": "1519640",
    "end": "1526559"
  },
  {
    "text": "Summertime and then what happens with the validity the minute after when it's swapped over is the ticket still valid",
    "start": "1526559",
    "end": "1533000"
  },
  {
    "text": "producing a test like that with this method would be impossible and I know that there are",
    "start": "1533000",
    "end": "1538279"
  },
  {
    "text": "probably some of you in here that already have like 10 different solutions to this I have the same code snippet",
    "start": "1538279",
    "end": "1544120"
  },
  {
    "text": "here in Visual Studio I mean I could take this UTC now and I I guess I could",
    "start": "1544120",
    "end": "1549960"
  },
  {
    "text": "inject it into to the method but I don't like that",
    "start": "1549960",
    "end": "1555200"
  },
  {
    "text": "I would have to then change the usage of this entire class or this method all over the place it's not necessarily a",
    "start": "1555200",
    "end": "1561279"
  },
  {
    "text": "good idea either to change the Constructor to say that well I could say that I'm going to introduce a",
    "start": "1561279",
    "end": "1567240"
  },
  {
    "text": "Constructor that takes a daytime offset but that would mean that all of",
    "start": "1567240",
    "end": "1573440"
  },
  {
    "text": "my instances of the order service would have now I know someone's much smarter than me in here now is now going to say",
    "start": "1573440",
    "end": "1579200"
  },
  {
    "text": "well just wrap it in an action sure we can do this but still I don't really",
    "start": "1579200",
    "end": "1586520"
  },
  {
    "text": "particularly like this because it's not very uh it's not very extensible instead Microsoft introduced",
    "start": "1586520",
    "end": "1594000"
  },
  {
    "text": "finally introduced something called a Time provider a Time provider is an abstract class that implements working",
    "start": "1594000",
    "end": "1599960"
  },
  {
    "text": "with dates and times we could of course also have used NOA time which I know probably a few of you in here are using",
    "start": "1599960",
    "end": "1606000"
  },
  {
    "text": "it's a great addition makes it much easier to work with time zone differences and and transitioning",
    "start": "1606000",
    "end": "1611760"
  },
  {
    "text": "between times but having something built into net is is probably a good idea so the time provider I'm going to store",
    "start": "1611760",
    "end": "1617880"
  },
  {
    "text": "this as a private field in my class and now instead sure I can now inject this using",
    "start": "1617880",
    "end": "1624919"
  },
  {
    "text": "using dependenc injection and what this allows me to do is that I can do get UTC now which is basically the same thing as",
    "start": "1624919",
    "end": "1632039"
  },
  {
    "text": "the action that I introduced except this has a lot of built-in functionality into it the time",
    "start": "1632039",
    "end": "1638399"
  },
  {
    "text": "provider if we check the implementation or the the definition of the class that's a reference to the",
    "start": "1638399",
    "end": "1645559"
  },
  {
    "text": "system time they have a default implementation of what the system's time would be there's also a lot of of",
    "start": "1645559",
    "end": "1651679"
  },
  {
    "text": "virtual properties that we could use so I could override how to get UTC now now",
    "start": "1651679",
    "end": "1659279"
  },
  {
    "text": "I could do this myself or I could go ahead and use something called a fake time provider",
    "start": "1659279",
    "end": "1665399"
  },
  {
    "text": "the fake time provider in this case here allows me to say that I want to automatically Advance the time each time",
    "start": "1665399",
    "end": "1671559"
  },
  {
    "text": "you call get UTC now so an example again if I take my ticketing example I could",
    "start": "1671559",
    "end": "1677200"
  },
  {
    "text": "say that that I'm going to purchase a ticket it's going to get the UTC now out of my fake time provider and then when I",
    "start": "1677200",
    "end": "1683440"
  },
  {
    "text": "call get UTC now again it's going to automatically Advance with 24 hours I",
    "start": "1683440",
    "end": "1689159"
  },
  {
    "text": "could have done this with the action myself but this here provides a much better experience it would be now easier",
    "start": "1689159",
    "end": "1695679"
  },
  {
    "text": "for me to to use this provider and P paste that into into that uh into that",
    "start": "1695679",
    "end": "1702840"
  },
  {
    "text": "Constructor so this is a great addition like making it a little bit more testable using dependency injection and",
    "start": "1702840",
    "end": "1709159"
  },
  {
    "text": "inversion of control and and just applying that principle is is quite great so I really enjoy this and like",
    "start": "1709159",
    "end": "1715919"
  },
  {
    "text": "this approach which also means that I could override this myself I have an custom implementation here at the bottom",
    "start": "1715919",
    "end": "1721399"
  },
  {
    "text": "you probably shouldn't do this but I can also inherit from this class to say that I have my time provider it's called a",
    "start": "1721399",
    "end": "1727200"
  },
  {
    "text": "custom time provider and every time you call get UTC now I'm going to return UTC now but I could do whatever I could",
    "start": "1727200",
    "end": "1733519"
  },
  {
    "text": "return a particular date from this this class",
    "start": "1733519",
    "end": "1738600"
  },
  {
    "text": "it's a good addition to Net in my opinion now there's also been some improvements",
    "start": "1738600",
    "end": "1744760"
  },
  {
    "text": "to how to work with random numbers some cryptographic improvements you probably shouldn't Implement all the",
    "start": "1744760",
    "end": "1750760"
  },
  {
    "text": "cryptographic stuff yourself unless you're a security expert I'm not so I'm not even going to show any samples of how to implement new Shaw stuff but this",
    "start": "1750760",
    "end": "1759120"
  },
  {
    "text": "is a good addition as well if you're working with Randomness instead of having to set up a new random yourself",
    "start": "1759120",
    "end": "1765519"
  },
  {
    "text": "and providing a proper seed you can now use the shared instance and this here actually allows you to do more",
    "start": "1765519",
    "end": "1773159"
  },
  {
    "text": "things than just getting that um let me show you random. shared this shared",
    "start": "1773159",
    "end": "1780279"
  },
  {
    "text": "instance allows you to get like the next number that would be available uh you could say that you want to have a max",
    "start": "1780279",
    "end": "1786279"
  },
  {
    "text": "value like any any instance of random right but in this case they've set up set it up properly it's more random than",
    "start": "1786279",
    "end": "1793159"
  },
  {
    "text": "when you're setting up your random yourself you could also say which is pretty pretty cool you could say that",
    "start": "1793159",
    "end": "1798519"
  },
  {
    "text": "you want to shuffle a span of values you could say that you want to get an array of elements out of of an existing array",
    "start": "1798519",
    "end": "1806600"
  },
  {
    "text": "saying Hey I want three random numbers or three random elements in this array and it just works out of the box so it",
    "start": "1806600",
    "end": "1812240"
  },
  {
    "text": "gives you a thread safe implementation or a thread safe version of random that has um some good seating to it all right",
    "start": "1812240",
    "end": "1820519"
  },
  {
    "text": "so that's the core API changes there are a lot more added to net and c and we're going to try and and spend some time",
    "start": "1820519",
    "end": "1827000"
  },
  {
    "text": "looking look at that asp.net core has again also been improved in in terms of",
    "start": "1827000",
    "end": "1832840"
  },
  {
    "text": "performance all of these changes in the core apis and all the usages of the ranges and spans all of that also",
    "start": "1832840",
    "end": "1839720"
  },
  {
    "text": "transitions over to asp.net core but they've also introduced support for HTTP",
    "start": "1839720",
    "end": "1845039"
  },
  {
    "text": "3 there's a lot of Blazer improvements there's metrics better debugging there's",
    "start": "1845039",
    "end": "1851200"
  },
  {
    "text": "a new identity endpoint you can very easily set up identity um now in asp.net",
    "start": "1851200",
    "end": "1856480"
  },
  {
    "text": "instead of getting all that UI that you would get from the normal asp.net core identity you can now say I want an",
    "start": "1856480",
    "end": "1863559"
  },
  {
    "text": "endpoint that supports Json and that would just work out of the box so how about we jump over to visual studio",
    "start": "1863559",
    "end": "1869360"
  },
  {
    "text": "again and look at some of these changes so I've I've got an asp.net core",
    "start": "1869360",
    "end": "1874480"
  },
  {
    "text": "application set up here and I've got a few things I want to show you now one of the first things they've added support",
    "start": "1874480",
    "end": "1879760"
  },
  {
    "text": "for anti-forgery tokens in minimal apis this is the new process of building an asp.net core application everything is",
    "start": "1879760",
    "end": "1886919"
  },
  {
    "text": "set up in the in the program.cs file and this minimal API allows me to set up",
    "start": "1886919",
    "end": "1892000"
  },
  {
    "text": "endpoints and their implementations I could even use it to build a fully-fledged MVC application if I want",
    "start": "1892000",
    "end": "1897240"
  },
  {
    "text": "to but this is the first edition adding anti-forgery tokens and how to validate that has been added in in Minal",
    "start": "1897240",
    "end": "1904720"
  },
  {
    "text": "apis they've also added a concept called keyed Services now keyed Services imagine that",
    "start": "1904720",
    "end": "1911519"
  },
  {
    "text": "I have an iach I'll show you this interface First Imagine That that I have",
    "start": "1911519",
    "end": "1917360"
  },
  {
    "text": "an I cache like this here and some in some places in my application I simply want to say I will work with a cache and",
    "start": "1917360",
    "end": "1924880"
  },
  {
    "text": "in and I really only have a distributed cache or an inmemory cache maybe I want",
    "start": "1924880",
    "end": "1930559"
  },
  {
    "text": "to allow anyone to inject whichever implementation they'd like to but when I build the method I'd like to have a",
    "start": "1930559",
    "end": "1937080"
  },
  {
    "text": "preference maybe I want to say that I prefer the distributed cash if I'm running this through asp.net but if",
    "start": "1937080",
    "end": "1944279"
  },
  {
    "text": "you're building a test you can pass whatever implementation you want traditionally you'd have to then Implement another interface because you",
    "start": "1944279",
    "end": "1951679"
  },
  {
    "text": "can't have the same interface added twice to the dependency injector now with key Services I can say that I'm",
    "start": "1951679",
    "end": "1959399"
  },
  {
    "text": "going to add a transient that is going to be the default if you simply request an I cache you'll always get the",
    "start": "1959399",
    "end": "1965720"
  },
  {
    "text": "in-memory cache but if you've said that you want to have a distributed cache I'm",
    "start": "1965720",
    "end": "1970960"
  },
  {
    "text": "going to try and give you this if it's not available you'll get the default one so the method that expects an an",
    "start": "1970960",
    "end": "1977120"
  },
  {
    "text": "implementation to be passed into it can be a little bit more specific about what it um what it expects so this can be",
    "start": "1977120",
    "end": "1985120"
  },
  {
    "text": "very easily used I'm going to scroll down here and what I'm saying here is that I",
    "start": "1985120",
    "end": "1990360"
  },
  {
    "text": "have a map G which simply Maps the root of the application to to this uh",
    "start": "1990360",
    "end": "1995600"
  },
  {
    "text": "Anonymous method it gets the HTTP context passed to it I'm going to get a service the iach the iach is now going",
    "start": "1995600",
    "end": "2003519"
  },
  {
    "text": "to be injected into this here and I'd like to get the key service so it's going to try and find the memory key",
    "start": "2003519",
    "end": "2010320"
  },
  {
    "text": "service but anyone that's using this method could could pass in an I cache or anything that that implements that",
    "start": "2010320",
    "end": "2018000"
  },
  {
    "text": "interface and being able to use attributes like this in lambdas was introducing C 11 I believe it was C 11",
    "start": "2018000",
    "end": "2026799"
  },
  {
    "text": "um so now you can really write powerful minimal apis there's no constraint in how to define your",
    "start": "2026799",
    "end": "2033440"
  },
  {
    "text": "endpoints so that's the key Services I think it's a good addition to the dependency injection the next thing they've added",
    "start": "2033440",
    "end": "2040399"
  },
  {
    "text": "is the support for exception handlers you've always been able to inject an exception Handler in the middleware",
    "start": "2040399",
    "end": "2045799"
  },
  {
    "text": "pipeline in asp.net core everything runs through a process of of middlewares but adding multiple exception handlers",
    "start": "2045799",
    "end": "2054000"
  },
  {
    "text": "before was a little bit more tedious than it is today so now you can say that I want to add an exception Handler it",
    "start": "2054000",
    "end": "2060240"
  },
  {
    "text": "will be register to the middleware processing or all the middleware um execution and this here is simply an ey",
    "start": "2060240",
    "end": "2067679"
  },
  {
    "text": "exception Handler that will try and execute or try to handle that exception",
    "start": "2067679",
    "end": "2072800"
  },
  {
    "text": "the implementation isn't really important other than I can access the HTTP context like I'm doing here to",
    "start": "2072800",
    "end": "2079200"
  },
  {
    "text": "Output some data to that um to that response so previously this was a little",
    "start": "2079200",
    "end": "2086919"
  },
  {
    "text": "bit there was a little bit more code to do the same thing but you've pretty much always been able to add exception handlers to asp.net",
    "start": "2086919",
    "end": "2094960"
  },
  {
    "text": "so there's uh you might see this as well require rate limiting this is added in",
    "start": "2095440",
    "end": "2101200"
  },
  {
    "text": "Net 7 so Net 7 introduced output caching as well as rate limiting which is built",
    "start": "2101200",
    "end": "2106480"
  },
  {
    "text": "into um to net as well now so I could set up a rate limiter that would uh would be able to",
    "start": "2106480",
    "end": "2113839"
  },
  {
    "text": "be configured to say I have a fixed window limiter so I can say that within 10 seconds you're only allowed to do one",
    "start": "2113839",
    "end": "2120560"
  },
  {
    "text": "call and you can have one more call uh in the queue one in the queue is probably not",
    "start": "2120560",
    "end": "2126920"
  },
  {
    "text": "enough this is from the same type with the same and or same same requester so",
    "start": "2126920",
    "end": "2132119"
  },
  {
    "text": "the same machine requesting the same endpoint multiple times it's great to have this built into asp.net core but",
    "start": "2132119",
    "end": "2138320"
  },
  {
    "text": "remember that this is for this particular instance if you have a scaled approach like or scaled application this",
    "start": "2138320",
    "end": "2144880"
  },
  {
    "text": "would be per instance all right so um let's take a look at another cool thing that they've",
    "start": "2144880",
    "end": "2151599"
  },
  {
    "text": "introduced the concept of short circuiting endpoints so I could say that I'm going to map slsh shortcircuit",
    "start": "2151599",
    "end": "2159680"
  },
  {
    "text": "to this um to run this Anonymous method so whenever you call this I'm going to run this Cod snippet here and when you",
    "start": "2159680",
    "end": "2166599"
  },
  {
    "text": "do dot short circuit what it's going to do it's going to register this a little bit differently than you do with",
    "start": "2166599",
    "end": "2173119"
  },
  {
    "text": "mapg as soon as asp.net core has performed its URL matching to figure out",
    "start": "2173119",
    "end": "2178920"
  },
  {
    "text": "if you want to execute this endpoint it will skip all the other middlewares if you have short circuit it's going to",
    "start": "2178920",
    "end": "2186000"
  },
  {
    "text": "execute immediately medely so that means it's going to skip authorization it's going to skip course it's going to skip",
    "start": "2186000",
    "end": "2191680"
  },
  {
    "text": "whatever middlewares you have defined in your pipeline so why would you want to do this for example robots.txt you don't",
    "start": "2191680",
    "end": "2199040"
  },
  {
    "text": "really care about course or rate limiting or whatever other middlewares you might have",
    "start": "2199040",
    "end": "2204200"
  },
  {
    "text": "registered good addition to asp.net core to be able to shortcut circuit you can also say app um let's see here map short",
    "start": "2204200",
    "end": "2211200"
  },
  {
    "text": "circuit and that would essentially do the same thing all right all right the final",
    "start": "2211200",
    "end": "2218599"
  },
  {
    "text": "thing that they've added in asp.net core that I'm going to show you is the complex binding in minimal apis so",
    "start": "2218599",
    "end": "2225079"
  },
  {
    "text": "you've always been able to do very complex binding when it comes to fully-fledged asp.net core applications",
    "start": "2225079",
    "end": "2230599"
  },
  {
    "text": "MVC for example or web API but now I could say that I have an iform file",
    "start": "2230599",
    "end": "2236240"
  },
  {
    "text": "being passed into my endpoint this here is is mapping a a post request to this",
    "start": "2236240",
    "end": "2241560"
  },
  {
    "text": "endpoint so whenever you do a post into this endpoint it's going to execute this I'm going to expect you to pass a file",
    "start": "2241560",
    "end": "2247359"
  },
  {
    "text": "into it but I'm also going to expect an i antiforgery token or I antiforgery",
    "start": "2247359",
    "end": "2254119"
  },
  {
    "text": "traditionally you you've seen the validate antiforgery token attribute on",
    "start": "2254119",
    "end": "2259520"
  },
  {
    "text": "actions doesn't really work like that in in minimal apis so you have to expect this interface to be passed into it and",
    "start": "2259520",
    "end": "2266960"
  },
  {
    "text": "when you do you have to ensure that you validate the antiforgery for that request if you forget this well you're",
    "start": "2266960",
    "end": "2274640"
  },
  {
    "text": "you have a a security issue so probably don't do that now if I put a breakpoint here and",
    "start": "2274640",
    "end": "2280960"
  },
  {
    "text": "I can run the application I have a map get I'm going to show you that first actually before",
    "start": "2280960",
    "end": "2286800"
  },
  {
    "text": "we go into whatever browser I have default that's running um now look at",
    "start": "2286800",
    "end": "2292480"
  },
  {
    "text": "that it's Edge that's fine so before we go to the upload page I want to show you another cool thing here so the same",
    "start": "2292480",
    "end": "2299440"
  },
  {
    "text": "thing here uh when I do a get request to slash upload when I call slash upload",
    "start": "2299440",
    "end": "2307040"
  },
  {
    "text": "it's going to generate some HTML or output some HTML this also has to do that anti forry token so actually let's",
    "start": "2307040",
    "end": "2313839"
  },
  {
    "text": "do view page Source there's a request verification token here so how do I",
    "start": "2313839",
    "end": "2319160"
  },
  {
    "text": "generate this like I mentioned that I I don't really have the same capabilities in a minimal API so the way you do this",
    "start": "2319160",
    "end": "2325880"
  },
  {
    "text": "is that you have to also ask for the antiforgery implementation to be passed into the minimal API you have to get a",
    "start": "2325880",
    "end": "2334520"
  },
  {
    "text": "token that you then have to add to to your HTML I'm going to return a Content",
    "start": "2334520",
    "end": "2340359"
  },
  {
    "text": "result of type text HTML and here is a way for us to do um a",
    "start": "2340359",
    "end": "2345560"
  },
  {
    "text": "raw uh string literal this was added in C 11 I'm not saying that you should",
    "start": "2345560",
    "end": "2351079"
  },
  {
    "text": "write your HTML in line like this here but for a very small sample it shows you that you can you can very easily write",
    "start": "2351079",
    "end": "2357960"
  },
  {
    "text": "content like this here I do this for Json for example you even get syntax highlighting if you if do this with",
    "start": "2357960",
    "end": "2363079"
  },
  {
    "text": "adjacent document and do it in in C I can even use string interpolation with this uh RW string literal that means I",
    "start": "2363079",
    "end": "2369960"
  },
  {
    "text": "can access the uh the name which would be that underscore request for three",
    "start": "2369960",
    "end": "2375040"
  },
  {
    "text": "request verification token and then I also add that as a value and simply say that this is a",
    "start": "2375040",
    "end": "2381960"
  },
  {
    "text": "multi-part form and I could then paste data into this here let's do choose file",
    "start": "2381960",
    "end": "2387280"
  },
  {
    "text": "hello NDC open submit and I'm then passed into this this um minimal API",
    "start": "2387280",
    "end": "2394760"
  },
  {
    "text": "endpoint now I can I can access this file here that I have which is we can see the uh the the name of the text file",
    "start": "2394760",
    "end": "2402160"
  },
  {
    "text": "the content type I could even request all the the data out of this here so this is the part of the complex binding",
    "start": "2402160",
    "end": "2407599"
  },
  {
    "text": "that was introduced in asp.net core8 but they've also done a lot of work with is improving the debugger",
    "start": "2407599",
    "end": "2414880"
  },
  {
    "text": "experience if I hover the HTTP context we can see here that we can get",
    "start": "2414880",
    "end": "2421000"
  },
  {
    "text": "a little bit of a information about what this is doing previously this wouldn't show you valid information at all let me",
    "start": "2421000",
    "end": "2428280"
  },
  {
    "text": "just zoom in here if I can do that I'm going to hover context it's a post request to this",
    "start": "2428280",
    "end": "2433960"
  },
  {
    "text": "endpoint using http2 if we were streaming data maybe we would use the new HTTP 3 features in in hp. net core I",
    "start": "2433960",
    "end": "2442000"
  },
  {
    "text": "can now let's see if I can do this with the zoom in here I I get a lot more details on all",
    "start": "2442000",
    "end": "2447960"
  },
  {
    "text": "of these different properties I don't have to drill down into each of them so this is the Improvement to the debugger",
    "start": "2447960",
    "end": "2453640"
  },
  {
    "text": "experience compare this to what it used to be in older versions of visual studio and in in in um it's actually not a part",
    "start": "2453640",
    "end": "2460760"
  },
  {
    "text": "of Visual Studio it's a part of of the changes in in hp. net core they've simply overwritten two string on each of",
    "start": "2460760",
    "end": "2466400"
  },
  {
    "text": "these different types which is a good addition right so that's it for the changes in",
    "start": "2466400",
    "end": "2473240"
  },
  {
    "text": "asp.net core so we talked about the complex binding the uh the rate limiting and",
    "start": "2473240",
    "end": "2479520"
  },
  {
    "text": "output caching they they also introduce metrics but one of the the most",
    "start": "2479520",
    "end": "2484560"
  },
  {
    "text": "important things is probably being able to Short Circuit probably been able to do this with other Frameworks in the past but",
    "start": "2484560",
    "end": "2491000"
  },
  {
    "text": "short circuiting um endpoints and and what comes in from that is is powerful",
    "start": "2491000",
    "end": "2496240"
  },
  {
    "text": "and the key Services here I can simply say that I register these two Services as key services with independency",
    "start": "2496240",
    "end": "2502440"
  },
  {
    "text": "injector and then say that I request that particular one it doesn't have to be the memory uh key service but if",
    "start": "2502440",
    "end": "2508880"
  },
  {
    "text": "that's available that's that's totally fine and then we have the complex uh",
    "start": "2508880",
    "end": "2514400"
  },
  {
    "text": "bindings in minimal apis as well so it might seem like they're small things but internally it's it's quite",
    "start": "2514400",
    "end": "2520920"
  },
  {
    "text": "big improvements to both net as well as hp. net core which make it a little bit",
    "start": "2520920",
    "end": "2525960"
  },
  {
    "text": "more fully fledged like if you've run into these issues or have had applications you'd have to then",
    "start": "2525960",
    "end": "2531760"
  },
  {
    "text": "transition into something much more complex but now it's a little bit more simple so I did mention that I didn't",
    "start": "2531760",
    "end": "2537440"
  },
  {
    "text": "want to spend too much time talking about blazer because that's like an hour on its own and is anyone here using",
    "start": "2537440",
    "end": "2545160"
  },
  {
    "text": "Blazer yeah a couple of hands you handful so it's a really great technology and with net 8 it's now",
    "start": "2545160",
    "end": "2553680"
  },
  {
    "text": "what's the full stack web it's the suggested full stack web UI going forward so if you want a technology that",
    "start": "2553680",
    "end": "2560319"
  },
  {
    "text": "is built for both the server as well as what's in the browser you're going to use Blazer you can even use Blazer to",
    "start": "2560319",
    "end": "2566680"
  },
  {
    "text": "build mobile applications with net Maui hybrid applications or use this to build power web applications that you could",
    "start": "2566680",
    "end": "2573040"
  },
  {
    "text": "also install on your devices so going forward forward we're going to see a lot more of of improvements to Blazer and",
    "start": "2573040",
    "end": "2579839"
  },
  {
    "text": "it's now easier to build something that's full stack so if you've had if you haven't",
    "start": "2579839",
    "end": "2584960"
  },
  {
    "text": "looked at Blazer yet I think with net 8 it's going to be a good good thing to uh at least take a look",
    "start": "2584960",
    "end": "2591160"
  },
  {
    "text": "at now we're going to spend some time talking about net Maui not too much but",
    "start": "2591160",
    "end": "2596520"
  },
  {
    "text": "I do I do think it's important because the work they've done to net Maui is um",
    "start": "2596520",
    "end": "2601839"
  },
  {
    "text": "there's a lot of work that has gone into this product net Maui used to be samurai is anyone here using net Maui who's",
    "start": "2601839",
    "end": "2609119"
  },
  {
    "text": "still on samarin a couple yeah so there's a couple of you still on samon and you're",
    "start": "2609119",
    "end": "2614640"
  },
  {
    "text": "going to be facing the the work of updating that to net Maui if you're already on Maui that's great You've",
    "start": "2614640",
    "end": "2621160"
  },
  {
    "text": "Already Taken part of the improvements to net net Mau is also getting all of those additions to Net in terms of",
    "start": "2621160",
    "end": "2628800"
  },
  {
    "text": "performance fixes the ahead of time compilation so if you're building applications for iOS Android Windows",
    "start": "2628800",
    "end": "2635480"
  },
  {
    "text": "you're going to all of these changes as well now a little bit of history with doet",
    "start": "2635480",
    "end": "2640520"
  },
  {
    "text": "Maui they kind of missed the release of doet 6 because it wasn't really",
    "start": "2640520",
    "end": "2646040"
  },
  {
    "text": "completed the The Experience developing with doet Maui and the refactoring please don't share this image Microsoft",
    "start": "2646040",
    "end": "2652920"
  },
  {
    "text": "is going to kill me I'm just kidding uh so what they did was they they they",
    "start": "2652920",
    "end": "2659319"
  },
  {
    "text": "wanted to improve samarin there was a couple of things with samarin that didn't work as expected so they wanted",
    "start": "2659319",
    "end": "2664920"
  },
  {
    "text": "to do a lot of good work with net Mau and make it much better what everyone expected but they didn't fully get there",
    "start": "2664920",
    "end": "2671240"
  },
  {
    "text": "like they had the foundation built with net 6 but they just didn't get past that delivery deadline so it was first",
    "start": "2671240",
    "end": "2677559"
  },
  {
    "text": "released with Net 7 with that um standard support term release which means that they it wasn't really meant",
    "start": "2677559",
    "end": "2685720"
  },
  {
    "text": "for for well they they did a a global availability so it still worked but they still had a few things that were not",
    "start": "2685720",
    "end": "2691520"
  },
  {
    "text": "really finished so with do net8 the idea is that it's now perfect it's now going to to be the thing you want to use for",
    "start": "2691520",
    "end": "2697280"
  },
  {
    "text": "building mobile applications and I've had a look at all the quality improvements and the important things",
    "start": "2697280",
    "end": "2703000"
  },
  {
    "text": "that have gone into it so a more fair comparison would probably be something like this here on the left hand side we",
    "start": "2703000",
    "end": "2709160"
  },
  {
    "text": "have a painting in Net 7 that kind of set the outline for this entire way of",
    "start": "2709160",
    "end": "2714599"
  },
  {
    "text": "building something and they've all they've just colored in all the pieces with net 8 it's now a little bit more of",
    "start": "2714599",
    "end": "2720599"
  },
  {
    "text": "a complete picture it now allows us to more effectively build these applications",
    "start": "2720599",
    "end": "2727400"
  },
  {
    "text": "it still Builds on top of the same Foundation that that samon did there's a lot of improvements internally a lot of",
    "start": "2727400",
    "end": "2733160"
  },
  {
    "text": "quality improvements but it's still the idea is that you build something in net and it's going to work on iOS Android",
    "start": "2733160",
    "end": "2738880"
  },
  {
    "text": "Mac OS and windows so you still have your your shared app code you have net Mau in the",
    "start": "2738880",
    "end": "2743920"
  },
  {
    "text": "middle that translates into specifics for net uh for Android net for iOS net",
    "start": "2743920",
    "end": "2749079"
  },
  {
    "text": "for Mac when UI and so forth and if you've never seen a net Maui project it's a little bit different",
    "start": "2749079",
    "end": "2755880"
  },
  {
    "text": "different than what it used to be there's a single project file we're not going to spend much time in here but",
    "start": "2755880",
    "end": "2761559"
  },
  {
    "text": "it's a single project file you have the different platforms you could write code for the particular platforms if you want",
    "start": "2761559",
    "end": "2767000"
  },
  {
    "text": "to but you want to have the most code shared between the different projects you could even use a file based",
    "start": "2767000",
    "end": "2772960"
  },
  {
    "text": "convention to say that my class. android. Cs and that file would then only be compiled for Android so it's a",
    "start": "2772960",
    "end": "2779760"
  },
  {
    "text": "little bit better of an experience compared to um what you might have been used to if you did mobile development",
    "start": "2779760",
    "end": "2785599"
  },
  {
    "text": "before with that being said we're going to spend the the rest of this talk talking about the features of",
    "start": "2785599",
    "end": "2791680"
  },
  {
    "text": "C there's been a lot added to C over the past decade I've had developers come up",
    "start": "2791680",
    "end": "2798520"
  },
  {
    "text": "to me that have done C since the the the first version of CP and they're telling me like I've been able to do most of",
    "start": "2798520",
    "end": "2804720"
  },
  {
    "text": "this in my way forever all of these new features are just very confusing but to",
    "start": "2804720",
    "end": "2810319"
  },
  {
    "text": "new developers that are maybe coming from python Swift Java PHP or other programming language which is they're",
    "start": "2810319",
    "end": "2817000"
  },
  {
    "text": "very used to this much shorter syntax and not being as verbos and that's an important part of",
    "start": "2817000",
    "end": "2823119"
  },
  {
    "text": "the compiler introducing language features that architecturally change how we build our applications how to better",
    "start": "2823119",
    "end": "2829880"
  },
  {
    "text": "express ourselves to build the same things like with async and A8 but without having to worry about the in too",
    "start": "2829880",
    "end": "2836200"
  },
  {
    "text": "much about internals or writing too much code and C 12 is not going to be any",
    "start": "2836200",
    "end": "2842760"
  },
  {
    "text": "different with C 12 we're going to get a handful of features some of them are",
    "start": "2842760",
    "end": "2849040"
  },
  {
    "text": "more important than others like with any release of of the compilers I am going to say though that because we're still a",
    "start": "2849040",
    "end": "2856440"
  },
  {
    "text": "couple of weeks away from release there might be more features added there might be some of them might not come at all we",
    "start": "2856440",
    "end": "2862680"
  },
  {
    "text": "never know until they actually do um net conf but the idea though is with with C",
    "start": "2862680",
    "end": "2868119"
  },
  {
    "text": "12 we're going to get something called primary Constructors in this in this um case it's going to be primary",
    "start": "2868119",
    "end": "2874160"
  },
  {
    "text": "Constructors with classes you've seen the primary Constructors with record types but they're going to work a little",
    "start": "2874160",
    "end": "2879920"
  },
  {
    "text": "bit differently there's something called an collection expression and a spread",
    "start": "2879920",
    "end": "2885839"
  },
  {
    "text": "operator there's something called interceptors optional parameters in lambdas and then Alias any type as well",
    "start": "2885839",
    "end": "2893480"
  },
  {
    "text": "as inlining arrays for a little bit more complex code so let's jump into Visual",
    "start": "2893480",
    "end": "2899200"
  },
  {
    "text": "Studio again and I've got a couple of these uh samples set up so first let's take a",
    "start": "2899200",
    "end": "2906280"
  },
  {
    "text": "look at the collection Expressions I have this this list of bytes here this",
    "start": "2906280",
    "end": "2911520"
  },
  {
    "text": "is the traditional way of declaring this but we can see here that Visual Studio is already hinting that I can probably",
    "start": "2911520",
    "end": "2918319"
  },
  {
    "text": "write this a little bit better I could it suggest two things I could use the target type new expression which was",
    "start": "2918319",
    "end": "2923960"
  },
  {
    "text": "added in C 9 or I can use the new collection",
    "start": "2923960",
    "end": "2929359"
  },
  {
    "text": "literals or collection initializers which is a very handy way of saying I",
    "start": "2929359",
    "end": "2934480"
  },
  {
    "text": "don't want so much code code this here will then we know that this is a list of",
    "start": "2934480",
    "end": "2939720"
  },
  {
    "text": "bytes but I could change this to a BTE",
    "start": "2939720",
    "end": "2945000"
  },
  {
    "text": "array if I can figure out how to type on this Mac keyboard and we just figure out which type to create so not only does it",
    "start": "2945520",
    "end": "2952839"
  },
  {
    "text": "allow you to more efficiently Define what you want to create but it also figures out what type you're actually",
    "start": "2952839",
    "end": "2960200"
  },
  {
    "text": "expecting so once I've got this list of bytes created which is a temp temporary",
    "start": "2960200",
    "end": "2966040"
  },
  {
    "text": "list here or it's a in in memory list um then I have the payload I have the same",
    "start": "2966040",
    "end": "2971920"
  },
  {
    "text": "thing for a check sum and I want to combine these two into one new thing what you've done in the past I bet most",
    "start": "2971920",
    "end": "2978720"
  },
  {
    "text": "of you have used link to do this you want to have two lists and combine them to one super simple to do that with link",
    "start": "2978720",
    "end": "2984640"
  },
  {
    "text": "but it's a little bit more code and it's you never really know what's happening under the hoods and all the performance",
    "start": "2984640",
    "end": "2990280"
  },
  {
    "text": "implications that could have how about we we ask the um we ask the language to solve this for us so I could now say I'm",
    "start": "2990280",
    "end": "2996960"
  },
  {
    "text": "going to create a new collection I'm going to take all the elements from this",
    "start": "2996960",
    "end": "3002520"
  },
  {
    "text": "first collection and then I'm going to add the other section at the end so this",
    "start": "3002520",
    "end": "3008599"
  },
  {
    "text": "here the dot dot that's the same idea that we have in the ranges but this here is known as the spread operator so we're",
    "start": "3008599",
    "end": "3015720"
  },
  {
    "text": "just spreading out the elements one after each other so this here will then create a new list with these um with",
    "start": "3015720",
    "end": "3022400"
  },
  {
    "text": "these values they will all be sequentially after each other so it's not doing a a two-dimensional array but",
    "start": "3022400",
    "end": "3028440"
  },
  {
    "text": "they're all just stored after each other so that's the collection expressions in the spread operator and I know a lot of",
    "start": "3028440",
    "end": "3035079"
  },
  {
    "text": "us are probably sitting up arrays in memory like this here doing stack allocations and so forth but this here",
    "start": "3035079",
    "end": "3040960"
  },
  {
    "text": "is just a very much nicer way of doing it now the next one we'll get back to",
    "start": "3040960",
    "end": "3047599"
  },
  {
    "text": "interceptors I have primary Constructors at the bottom because in in minimal apis and in the new top level statements you",
    "start": "3047599",
    "end": "3053680"
  },
  {
    "text": "can't declare classes Anywhere But at the bottom of the files and for some reason I wanted to have it all in one",
    "start": "3053680",
    "end": "3060160"
  },
  {
    "text": "file anyways so with a class let's say a user here if I have a user and I have a",
    "start": "3060160",
    "end": "3068040"
  },
  {
    "text": "primary Constructor this is a class right and I have added a primary Constructor which you've seen with a",
    "start": "3068040",
    "end": "3073400"
  },
  {
    "text": "record type the difference here is what's generated behind the hoods when I",
    "start": "3073400",
    "end": "3078520"
  },
  {
    "text": "do a record it's going to generate the backing Fields it's going to generate publicly exposed properties it's going",
    "start": "3078520",
    "end": "3085040"
  },
  {
    "text": "to value based equality it's going to generate um overrides for two string to",
    "start": "3085040",
    "end": "3090640"
  },
  {
    "text": "make it easier to print this out if I change it to a class all that's being generated is one",
    "start": "3090640",
    "end": "3097960"
  },
  {
    "text": "backing field so that's a big difference so for a class or a data type or a record like a user it would make sense",
    "start": "3097960",
    "end": "3105480"
  },
  {
    "text": "to keep this as a record because I would still expose this I would expect that the user name is somehow exposed",
    "start": "3105480",
    "end": "3112559"
  },
  {
    "text": "externally now let's just change this back I can access this private field",
    "start": "3112559",
    "end": "3118160"
  },
  {
    "text": "inside anywhere inside my class for a user this doesn't make any sense like for a data class it doesn't make a lot",
    "start": "3118160",
    "end": "3124640"
  },
  {
    "text": "of sense to do it for a class where it does make sense is for something like a controller I could say that this",
    "start": "3124640",
    "end": "3131160"
  },
  {
    "text": "controller expects an interface of an i user repository I can then use that inside my methods and it would be",
    "start": "3131160",
    "end": "3137680"
  },
  {
    "text": "probably be a little bit more or less confusing if I didn't use a a um let's",
    "start": "3137680",
    "end": "3143559"
  },
  {
    "text": "see here let's see return and I can then use the repository to calculate this here and that would then",
    "start": "3143559",
    "end": "3150079"
  },
  {
    "text": "be stored in a private field inside my class I wouldn't expose that anywhere externally right how many of you would",
    "start": "3150079",
    "end": "3156319"
  },
  {
    "text": "expect the repository to be publicly exposed as a public property so anyone can use it no one exactly was kind of a",
    "start": "3156319",
    "end": "3163720"
  },
  {
    "text": "leading question so um this here is a very good addition",
    "start": "3163720",
    "end": "3170040"
  },
  {
    "text": "because now I could just add this to my for example my MVC applications I could remove remove the default Constructors",
    "start": "3170040",
    "end": "3177000"
  },
  {
    "text": "that I always add when I expect something to be passed into that controller I could then just add the",
    "start": "3177000",
    "end": "3182280"
  },
  {
    "text": "primary Constructor instead and save a little bit of characters now of course going back and refactoring means I have",
    "start": "3182280",
    "end": "3187760"
  },
  {
    "text": "to write more code but if I did this from the start I would write less code and it would be a little bit more uh",
    "start": "3187760",
    "end": "3193319"
  },
  {
    "text": "easy on the eyes now the final thing we're going to look at in C 12 in Visual Studio is",
    "start": "3193319",
    "end": "3199440"
  },
  {
    "text": "something called interceptors so now imagine that I have this this class here called a logger I'm",
    "start": "3199440",
    "end": "3205280"
  },
  {
    "text": "going to go into the instance this class has a method called log it calls its own internal method",
    "start": "3205280",
    "end": "3212480"
  },
  {
    "text": "which is private which simply throws an exception it's using the um um yeah",
    "start": "3212480",
    "end": "3219200"
  },
  {
    "text": "we're just calling throw exception so if I'm going to run this we're going to run this with the debugger",
    "start": "3219200",
    "end": "3225200"
  },
  {
    "text": "attached actually I'm going to put a break point up here at the top let's run it I'm going to step over",
    "start": "3225200",
    "end": "3232599"
  },
  {
    "text": "to this line and I'm going to try and step into the method and nothing happened so it didn't step into the",
    "start": "3232599",
    "end": "3239040"
  },
  {
    "text": "method and if you run it without the debugger attached it's going to say hello world I promise I'm running the",
    "start": "3239040",
    "end": "3244680"
  },
  {
    "text": "same application and I'm running this piece of code here so how come it didn't run this method it's because I've",
    "start": "3244680",
    "end": "3252520"
  },
  {
    "text": "introduced an extension method in my application so there's a method called debug log which does exactly this so",
    "start": "3252520",
    "end": "3259280"
  },
  {
    "text": "it's it could do hello world like this here but what's actually happening is that the method call",
    "start": "3259280",
    "end": "3266760"
  },
  {
    "text": "internally this call is being intercepted or actually replaced during compile",
    "start": "3266760",
    "end": "3272960"
  },
  {
    "text": "time and all that you have to do is to declare um an extension method that",
    "start": "3272960",
    "end": "3280400"
  },
  {
    "text": "matches the signature of the method you want to intercept and you add the intercepts location",
    "start": "3280400",
    "end": "3286319"
  },
  {
    "text": "attribute you then have to point to that particular code file which seems a little bit tedious but if I put a",
    "start": "3286319",
    "end": "3292680"
  },
  {
    "text": "breakpoint in here you'll see that it actually intercepts this H for some reason I could still not",
    "start": "3292680",
    "end": "3298680"
  },
  {
    "text": "step into this method how come because I also had a debuger",
    "start": "3298680",
    "end": "3303760"
  },
  {
    "text": "hidden so this is a funny prank to pull on your",
    "start": "3303760",
    "end": "3308480"
  },
  {
    "text": "co-workers don't do it don't do it or just do it it would be very funny so why",
    "start": "3309319",
    "end": "3316280"
  },
  {
    "text": "is this important and why would this be something that you'd use you probably wouldn't want to point to the exact",
    "start": "3316280",
    "end": "3321920"
  },
  {
    "text": "location on your machine you have to have access to the file this has to happen during compile time but what it",
    "start": "3321920",
    "end": "3327359"
  },
  {
    "text": "actually does is that it it very much replaces the method call so instead of it doing log internal it will actually",
    "start": "3327359",
    "end": "3334720"
  },
  {
    "text": "do it will actually do uh this do debug log message so it will actually replace",
    "start": "3334720",
    "end": "3342319"
  },
  {
    "text": "that call with this line of code here just because I added this attribute you have to point to the exact",
    "start": "3342319",
    "end": "3349280"
  },
  {
    "text": "location I'm actually going to remove that because it didn't like that I changed my code so you have you have to point to",
    "start": "3349280",
    "end": "3355520"
  },
  {
    "text": "the exact row and the exact column in that file and you're probably thinking like how would I know that well you",
    "start": "3355520",
    "end": "3361599"
  },
  {
    "text": "wouldn't but a source generator would so if you pull in a nug package that has a",
    "start": "3361599",
    "end": "3366839"
  },
  {
    "text": "source generator it could generate an Interceptor that intercepts different calls in your applications it could find",
    "start": "3366839",
    "end": "3373000"
  },
  {
    "text": "an attribute on your classes and then in using that Source generator you could",
    "start": "3373000",
    "end": "3378039"
  },
  {
    "text": "inspect your code or the the syntax tree and then replace all of this for you it's very powerful you probably wouldn't",
    "start": "3378039",
    "end": "3384319"
  },
  {
    "text": "write a lot of yourself but you have to be careful probably someone in here thinking well this is a security issue",
    "start": "3384319",
    "end": "3391920"
  },
  {
    "text": "well of course Microsoft thought of this you have to explicitly declare which",
    "start": "3391920",
    "end": "3397520"
  },
  {
    "text": "Interceptor interfaces you allow so you so you don't pull in any random package",
    "start": "3397520",
    "end": "3402760"
  },
  {
    "text": "from nugat and that just suddenly replaces code in your application now so why would this be",
    "start": "3402760",
    "end": "3409760"
  },
  {
    "text": "important let me show you an example of this just in just a second we're running out of time here but I do want to just",
    "start": "3409760",
    "end": "3416400"
  },
  {
    "text": "reiterate that we we looked at the collection Expressions which introduces the spread operator and this new little",
    "start": "3416400",
    "end": "3422960"
  },
  {
    "text": "bit nicer Syntax for for producing collections we also got the primary",
    "start": "3422960",
    "end": "3428680"
  },
  {
    "text": "Constructors another example of just looking at this here I'm going to jump over to to to vs code I have a user that",
    "start": "3428680",
    "end": "3435559"
  },
  {
    "text": "takes a string and a date to time offset if I look at the decompiled code we can see that it actually just has two",
    "start": "3435559",
    "end": "3441359"
  },
  {
    "text": "backing Fields a primary or a a default Construction and then an override of two",
    "start": "3441359",
    "end": "3447119"
  },
  {
    "text": "string what they also then introduce is this optional parameters in lambdas while I can do this for any Lambda in my",
    "start": "3447119",
    "end": "3453440"
  },
  {
    "text": "application this is again built for minimal apis so I could say that a minimal API expects something to be to",
    "start": "3453440",
    "end": "3460599"
  },
  {
    "text": "be default so I did this you might have seen this in the asp.net core sample if",
    "start": "3460599",
    "end": "3466359"
  },
  {
    "text": "I jump over here again uh in the program and we have a method here that",
    "start": "3466359",
    "end": "3472839"
  },
  {
    "text": "has an input of anonymous which simply throws an exception if that uh is is is",
    "start": "3472839",
    "end": "3478440"
  },
  {
    "text": "not Anonymous so the default value for input is always going to be anonymous so if I run",
    "start": "3478440",
    "end": "3486079"
  },
  {
    "text": "this and I do input is equal to philli this here is",
    "start": "3486079",
    "end": "3492680"
  },
  {
    "text": "going to hopefully throw an exception there we go through an",
    "start": "3492680",
    "end": "3498200"
  },
  {
    "text": "exception and this also then uh invoked that exception Handler that I added earlier to generate this Json so this is",
    "start": "3498200",
    "end": "3505480"
  },
  {
    "text": "a very good addition to it as well that you can use default values in in the um in the minimal apis so again you it",
    "start": "3505480",
    "end": "3512960"
  },
  {
    "text": "would then use that default value you can also Alias any type for example at",
    "start": "3512960",
    "end": "3518000"
  },
  {
    "text": "the top of my class I could say I want to whenever I refer to a point that's going to be a tupple or a tuple",
    "start": "3518000",
    "end": "3524640"
  },
  {
    "text": "depending on how you like to pronounce that uh of with two fields and then I can Echo that out to the console and",
    "start": "3524640",
    "end": "3530559"
  },
  {
    "text": "access those properly so finally we looked at the interceptors which is is a very nice way to say that I want to",
    "start": "3530559",
    "end": "3537039"
  },
  {
    "text": "intercept this location I want to replace this portion of the code and why would we want this again",
    "start": "3537039",
    "end": "3543079"
  },
  {
    "text": "Source generators why would we want Source generators to build performance",
    "start": "3543079",
    "end": "3548359"
  },
  {
    "text": "performance um driven code interceptors in asp.net core here's a snippet from",
    "start": "3548359",
    "end": "3553640"
  },
  {
    "text": "from um the documentations they've used this with a request delegate generator",
    "start": "3553640",
    "end": "3558839"
  },
  {
    "text": "to allow you to to write some really powerful code or it generates powerful",
    "start": "3558839",
    "end": "3563880"
  },
  {
    "text": "code when uses uh publish aot so it's primarily built for ahead of time",
    "start": "3563880",
    "end": "3569559"
  },
  {
    "text": "compilation it's primarily used for something that Source generators will use internally so with 20 seconds left let's",
    "start": "3569559",
    "end": "3577119"
  },
  {
    "text": "talk about all the features in C 13 I'm just kidding there's um there's lots of",
    "start": "3577119",
    "end": "3583440"
  },
  {
    "text": "things happening with c and net hopefully this G gave you an inspiration as to what's coming in net and that the",
    "start": "3583440",
    "end": "3589720"
  },
  {
    "text": "fact that they're working on performance is um is is really important and it's going to benefit all of us so you can go",
    "start": "3589720",
    "end": "3597079"
  },
  {
    "text": "and read off the language featur stages page if You' so like to and if you like listening to me I have 20 plus courses",
    "start": "3597079",
    "end": "3602599"
  },
  {
    "text": "on plural site that you you can check out or just put them on repeat like I don't it's it's",
    "start": "3602599",
    "end": "3608400"
  },
  {
    "text": "fine with that being said we've talked about a lot of the features in net and C",
    "start": "3608400",
    "end": "3613599"
  },
  {
    "text": "if you have any questions after this I'm available on email you can always send me questions ping me on Twitter talk to",
    "start": "3613599",
    "end": "3619000"
  },
  {
    "text": "me in the hallway I know that we've covered kind of a lot of things it's been a little bit of a roller coaster going through all the featur of net and",
    "start": "3619000",
    "end": "3625400"
  },
  {
    "text": "c and everything what's going to happen with with CP and going forward it's a lot to take in just imagine reading",
    "start": "3625400",
    "end": "3632119"
  },
  {
    "text": "through all the documentations to get a grasp of the important features there's quite a lot but I'm here to help if you",
    "start": "3632119",
    "end": "3638000"
  },
  {
    "text": "have any questions I'm available and on your way out please put a green thing in the Box the Reds there's a bin over",
    "start": "3638000",
    "end": "3644440"
  },
  {
    "text": "here I'm just kidding if you didn't like this send me an email and let me know why all right thank you so much for",
    "start": "3644440",
    "end": "3649920"
  },
  {
    "text": "listening to me",
    "start": "3649920",
    "end": "3656520"
  }
]