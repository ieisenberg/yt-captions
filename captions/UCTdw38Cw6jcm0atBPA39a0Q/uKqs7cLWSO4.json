[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "hello how's everyone doing how's your",
    "start": "30",
    "end": "5970"
  },
  {
    "text": "conference been so hopefully are on the right spot angular unit testing from the trenches",
    "start": "5970",
    "end": "12290"
  },
  {
    "text": "I'm gonna cover all kinds of tips and tricks of things that have tripped me up probably have tripped you up as well",
    "start": "12290",
    "end": "19500"
  },
  {
    "text": "we'll get into starting points all kinds of tips to fix those issues that you're",
    "start": "19500",
    "end": "25560"
  },
  {
    "text": "having all kinds of things you may not even know we're there so first and foremost what are unit tests it's",
    "start": "25560",
    "end": "32578"
  },
  {
    "text": "nothing more than proof that my code does what I actually think it does it",
    "start": "32579",
    "end": "39000"
  },
  {
    "text": "allows me to release faster gives me higher confidence if I have a whole test",
    "start": "39000",
    "end": "45329"
  },
  {
    "text": "suite I run that then I do my deploys if it passes all my tests I know that my",
    "start": "45329",
    "end": "50610"
  },
  {
    "text": "code works exactly as I intended so I don't have to stick around and hope that and also don't get a bunch of user",
    "start": "50610",
    "end": "57000"
  },
  {
    "text": "errors I know I'm not going to I can also refactor with ease I've",
    "start": "57000",
    "end": "63180"
  },
  {
    "text": "already got unit tests in place if I refactor in all my functionality breaks I know my refactoring didn't succeed if",
    "start": "63180",
    "end": "69900"
  },
  {
    "text": "I get all my tests passing my refactor was successful the big disclaimer though with unit",
    "start": "69900",
    "end": "76719"
  },
  {
    "text": "testing when we get all the advantages we're gonna talk about when you get comfortable writing good unit test write",
    "start": "76719",
    "end": "84880"
  },
  {
    "text": "good unit test there's a few tenants first and foremost have to be automated can't count the number of times I've",
    "start": "84880",
    "end": "91600"
  },
  {
    "text": "seen teams go we do testing and then they pull out a testing document that walks me step by step but where I'm supposed to click you're never going to",
    "start": "91600",
    "end": "98649"
  },
  {
    "text": "get developers that actually truly run through those I also want to test a single unit I want to test a single",
    "start": "98649",
    "end": "106630"
  },
  {
    "text": "component a single service my goal is not to go from the UI all the way through the API to the database those",
    "start": "106630",
    "end": "112989"
  },
  {
    "text": "aren't unit tests those are end-to-end test integration tests I want to try to",
    "start": "112989",
    "end": "118659"
  },
  {
    "text": "do as much of a single assumption as I can inside of my test let's grant it I",
    "start": "118659",
    "end": "123939"
  },
  {
    "text": "violate this one a little bit myself when I do testing but I want to keep my assumptions to exactly what's relevant",
    "start": "123939",
    "end": "131079"
  },
  {
    "text": "to the test I don't want to go say let me go login in my test and make sure I got logged in and then test log out in",
    "start": "131079",
    "end": "136690"
  },
  {
    "text": "the same exact test I want to do log out as a whole separate test you want to keep that whole single unit single",
    "start": "136690",
    "end": "142150"
  },
  {
    "text": "assumption thing going on the proof side we're gonna prove our functionality",
    "start": "142150",
    "end": "148180"
  },
  {
    "text": "works we can also test for regressions if I've already fixed a bug once and I've written the unit test I'm going to",
    "start": "148180",
    "end": "154930"
  },
  {
    "text": "know if I happen to accidentally reput the bug in there my unit test is going to start failing",
    "start": "154930",
    "end": "161080"
  },
  {
    "text": "should pinpoint a right to bugs as well I've seen tests at times where my errors",
    "start": "161080",
    "end": "167440"
  },
  {
    "text": "just point me to a big stack traced in the testing framework that's not helpful I needed to point what line of code",
    "start": "167440",
    "end": "174010"
  },
  {
    "text": "actually failed what assertion failed give me that whole stack trace so I can go back through it figure out where were",
    "start": "174010",
    "end": "180400"
  },
  {
    "text": "you at in the code what lines actually ended up failing also allows me to prove",
    "start": "180400",
    "end": "187330"
  },
  {
    "text": "my intent you can easily read unit tests and figure out what was the codes supposed to actually do it's a great way",
    "start": "187330",
    "end": "194710"
  },
  {
    "text": "to onboard developers great way not to write a ton of documentation can't count",
    "start": "194710",
    "end": "200110"
  },
  {
    "text": "the number of times I open code bases that didn't do unit test did documentation instead and all the docs are super out of date because no",
    "start": "200110",
    "end": "206440"
  },
  {
    "text": "developer keeps the docs up to date which will keep your unit tests up to date on a quality standpoint they have",
    "start": "206440",
    "end": "215920"
  },
  {
    "text": "to be maintainable you wanted to be dependable no matter how many times I run them they're going to give me the",
    "start": "215920",
    "end": "222790"
  },
  {
    "text": "same response we're going to run the same way you have to keep them in a",
    "start": "222790",
    "end": "228190"
  },
  {
    "text": "runnable state if you have unit tests and then you decide to write a bunch of code and not update the unit test and",
    "start": "228190",
    "end": "233920"
  },
  {
    "text": "all you're doing is turning off your unit tests in your CI you have violated the quality principle there's no point",
    "start": "233920",
    "end": "239890"
  },
  {
    "text": "in unit testing if you're just going to turn them off every time they break and get back to them at some point you always want them in a runnable state",
    "start": "239890",
    "end": "247769"
  },
  {
    "text": "another main team being inside we don't want a brittle unit test I see this a",
    "start": "247950",
    "end": "254590"
  },
  {
    "text": "lot when I look at you I test so I want to say I want div number 10 on the page well if I happen to put a div somewhere",
    "start": "254590",
    "end": "261880"
  },
  {
    "text": "in 1 through 10 all of a sudden 10 now becomes 11 in my test no longers testing",
    "start": "261880",
    "end": "267340"
  },
  {
    "text": "the same thing those are brutal test cases you want to make sure when I make changes my test",
    "start": "267340",
    "end": "273340"
  },
  {
    "text": "case isn't going to break just because I made a change it should break because I changed the functionality buddy and I",
    "start": "273340",
    "end": "279280"
  },
  {
    "text": "need to either refactor the unit test because that functionality went away or I need to fix my code because it truly",
    "start": "279280",
    "end": "285160"
  },
  {
    "text": "broke they have to be easy to read if you",
    "start": "285160",
    "end": "290520"
  },
  {
    "text": "can't read and understand them one you won't maintain them - no one's going to want to ever run them because you don't",
    "start": "290520",
    "end": "296040"
  },
  {
    "text": "have a clue when it breaks what it's going to do same thing with easy to write so angular",
    "start": "296040",
    "end": "302460"
  },
  {
    "text": "thankfully makes it really easy to write the unit test easier they are to write the more chances your team is going to",
    "start": "302460",
    "end": "308250"
  },
  {
    "text": "actually write unit tests and keep them up to date and you want them to be well named they",
    "start": "308250",
    "end": "315180"
  },
  {
    "text": "should say what they do if I look at a log in testers who say should log the user in I know exactly",
    "start": "315180",
    "end": "322530"
  },
  {
    "text": "what that test is going to do try to say log in test you have no clue",
    "start": "322530",
    "end": "327780"
  },
  {
    "text": "are you logging in are you testing failures what piece are you testing what if I say should be logged in you know",
    "start": "327780",
    "end": "334830"
  },
  {
    "text": "immediately what to expect from that test on the dependable front consistent",
    "start": "334830",
    "end": "342750"
  },
  {
    "text": "results same input should gave you the same output every single time you also",
    "start": "342750",
    "end": "350280"
  },
  {
    "text": "have to have them isolated if I'm testing a component I don't want to go and test any logic in my service I'm",
    "start": "350280",
    "end": "356910"
  },
  {
    "text": "testing the service I don't want to test going to the actual database or wherever I'm getting data out of my my service I",
    "start": "356910",
    "end": "363150"
  },
  {
    "text": "want to test just the ones bit of code but or piece of angular that I'm",
    "start": "363150",
    "end": "369870"
  },
  {
    "text": "intending to test not the whole structure they have to also continue to",
    "start": "369870",
    "end": "375479"
  },
  {
    "text": "be relevant if you refactor code chances are you going to refactor some tests you remove functionality you're gonna",
    "start": "375479",
    "end": "381960"
  },
  {
    "text": "probably remove some test cases don't just go comment them out because they're no longer relevant delete them out of",
    "start": "381960",
    "end": "388169"
  },
  {
    "text": "the codebase keep them up-to-date you want to test the right things and we",
    "start": "388169",
    "end": "395880"
  },
  {
    "text": "could test all kinds of functionality in the angular space but our goal is not to test angular our goal is to test our code and",
    "start": "395880",
    "end": "402449"
  },
  {
    "text": "to test code that may break and you'll see some places where I point out if you do not doing a lot of business logic and",
    "start": "402449",
    "end": "408539"
  },
  {
    "text": "all you're doing is making an angular call there's not a point in testing that piece of code you're just retesting angler at that",
    "start": "408539",
    "end": "414449"
  },
  {
    "text": "point on the run both side you wanted to be fast if it",
    "start": "414449",
    "end": "422050"
  },
  {
    "text": "takes me ten seconds to run my test suite I'll burn them all the time I'll even leave them running constantly takes",
    "start": "422050",
    "end": "427210"
  },
  {
    "text": "me an hour to run it you're lucky if I actually run it before I do a commit I may not even run him before I commit I",
    "start": "427210",
    "end": "432430"
  },
  {
    "text": "may just let my CI server run him and fail my build because I don't want to waste an hour just watching the test run",
    "start": "432430",
    "end": "440750"
  },
  {
    "text": "now someone will be able to run them in a single click click or a single command I don't have to have this crazy long",
    "start": "440750",
    "end": "447920"
  },
  {
    "text": "command that I have to try to memorize or have to put somewhere in a script or have to go in some funky UI",
    "start": "447920",
    "end": "452990"
  },
  {
    "text": "why don't we release it a run I also wanted to be repeatable I should",
    "start": "452990",
    "end": "459840"
  },
  {
    "text": "be able to run them as many times as I want to run them I should be able to run them every time I make a code update and",
    "start": "459840",
    "end": "465440"
  },
  {
    "text": "I should get the same consistent results we talked a bit about our failures point",
    "start": "465440",
    "end": "471490"
  },
  {
    "text": "to that are actual problems you and I recently saw this testing Pearman",
    "start": "471490",
    "end": "477950"
  },
  {
    "text": "I thought was really cool talks about unit tests about 70% of the cost or 70%",
    "start": "477950",
    "end": "485000"
  },
  {
    "text": "of what you should test because it's the lowest level of cost actually as you start going up the chain you start getting integration tests and then you",
    "start": "485000",
    "end": "492650"
  },
  {
    "text": "start getting the end-to-end tests where you're going all the way up to the browser and down through those get really really expensive by the time",
    "start": "492650",
    "end": "499400"
  },
  {
    "text": "you're up there running into end tests you're talking in these several minutes to several hours potentially to go",
    "start": "499400",
    "end": "506270"
  },
  {
    "text": "through from the browser all the way through my API to my data layer processing that coming back so you want",
    "start": "506270",
    "end": "513200"
  },
  {
    "text": "to spend the majority of your time down in this unit testing area it's the cheapest area to catch bugs cheapest",
    "start": "513200",
    "end": "519320"
  },
  {
    "text": "area to run tests and the quickest one",
    "start": "519320",
    "end": "524720"
  },
  {
    "start": "523000",
    "end": "815000"
  },
  {
    "text": "thing unit tests will never do is fix your bad coding practices if you don't follow the angular style guides and the",
    "start": "524720",
    "end": "530960"
  },
  {
    "text": "angular best practices no matter how much you unit tests you're not going to be able to overcome some of those",
    "start": "530960",
    "end": "536690"
  },
  {
    "text": "practices just if you follow the style guide which is really easy to follow and",
    "start": "536690",
    "end": "541760"
  },
  {
    "text": "there are best practices that they've published tons of them on the angular Doc's that are really easy to follow",
    "start": "541760",
    "end": "547690"
  },
  {
    "text": "unit testing will give you all your benefits we do need a good grasp of some angular",
    "start": "547690",
    "end": "554420"
  },
  {
    "text": "patterns so you need to understand modules components our services our",
    "start": "554420",
    "end": "560389"
  },
  {
    "text": "routes or pipes our guards need to know what each of these ones does you don't need to drill down into how do they work",
    "start": "560389",
    "end": "566839"
  },
  {
    "text": "under the covers and you end up at least need to have a cursory knowledge no modules the overall arching thing that",
    "start": "566839",
    "end": "573110"
  },
  {
    "text": "everything falls into components is typically around views services or where",
    "start": "573110",
    "end": "578990"
  },
  {
    "text": "you typically get data routes or how you get to places pipes or ways to affect",
    "start": "578990",
    "end": "584750"
  },
  {
    "text": "data like I can take in a date and transform it to some other format and guard your about authorization",
    "start": "584750",
    "end": "591170"
  },
  {
    "text": "authentication kinds of things to keep me out of routes if I shouldn't be in there from a setup standpoint angular",
    "start": "591170",
    "end": "599269"
  },
  {
    "text": "CII is amazing if you're not using it you should be it needs node 8 now so angular 6 just",
    "start": "599269",
    "end": "607220"
  },
  {
    "text": "got released last week and they now require node 8 install the angular CLI",
    "start": "607220",
    "end": "613639"
  },
  {
    "text": "from NPM create a new app I always like to pass in the - - style a CSS and - -",
    "start": "613639",
    "end": "621949"
  },
  {
    "text": "routing so I get a routing file and I get sass as my style sheet then unit",
    "start": "621949",
    "end": "627649"
  },
  {
    "text": "testing is baked in it used to be that you ran NPM tests with 6 they currently",
    "start": "627649",
    "end": "633050"
  },
  {
    "text": "have a bug in the CLI that it does a single run when you run NPM test and just exit your test so you don't get to",
    "start": "633050",
    "end": "639290"
  },
  {
    "text": "see the nice stack trace in the browser you have to put - - watch so they'll continue to watch that it'll leave you",
    "start": "639290",
    "end": "645500"
  },
  {
    "text": "the browser actually up and running with karma which brings us to our tools so",
    "start": "645500",
    "end": "651230"
  },
  {
    "text": "our test Runner is karma it's baked into the project angular CLI creates then we",
    "start": "651230",
    "end": "657319"
  },
  {
    "text": "have jasmin that's the actual testing frame rate that's where you going to put your assertions your expect statements",
    "start": "657319",
    "end": "663450"
  },
  {
    "text": "and then last 12 angry provides a bunch of testing utilities ways to test routes without actually hooking up all your",
    "start": "663450",
    "end": "669570"
  },
  {
    "text": "routes ways to touch HTTP services these are calls without actually making the",
    "start": "669570",
    "end": "674700"
  },
  {
    "text": "real calls and being able to mock them out they already provide all that stuff so you don't have to figure out how to do it when you run NPM tests you get a",
    "start": "674700",
    "end": "685170"
  },
  {
    "text": "command line window that looks very similar to this it compiles doesn't build your whole angular app and then",
    "start": "685170",
    "end": "690600"
  },
  {
    "text": "starts running the test it also pops up a chrome window for you or with it that",
    "start": "690600",
    "end": "697080"
  },
  {
    "text": "chrome window I believe is what it always runs at least in my environment and out of the box they have it set this karma chrome you can tell always tell it",
    "start": "697080",
    "end": "704280"
  },
  {
    "text": "to run different browsers if you wanted to and then it shows you every one of the specs that it's running which is",
    "start": "704280",
    "end": "709860"
  },
  {
    "text": "their test cases if there's any errors you'll see stack traces in there you could click the debug window and open",
    "start": "709860",
    "end": "715860"
  },
  {
    "text": "the chrome dev tools put breakpoints in there like you normally would this is a great window to be able to see what",
    "start": "715860",
    "end": "722400"
  },
  {
    "text": "tests actually run from a testing standpoint I think we're going to jump",
    "start": "722400",
    "end": "728250"
  },
  {
    "text": "into a whole slew of code but now and go through how do we set up tests what it tests look like how do we configure your",
    "start": "728250",
    "end": "735000"
  },
  {
    "text": "everything how do we test components and routes and services so first off we need",
    "start": "735000",
    "end": "740760"
  },
  {
    "text": "to know what does a test look like grab the bat everything's in a describe it's",
    "start": "740760",
    "end": "746790"
  },
  {
    "text": "basically a group you can have multiple tests within a describe you give it a name and then you just give it a",
    "start": "746790",
    "end": "752850"
  },
  {
    "text": "function to run every test is called an it so sometimes in the angular world",
    "start": "752850",
    "end": "758400"
  },
  {
    "text": "you'll see some of the it was a first time do or length it takes to get to it how long does it take me to get to it",
    "start": "758400",
    "end": "764970"
  },
  {
    "text": "and they're referring to unit tests if you're in a TDD kind of environment you",
    "start": "764970",
    "end": "771090"
  },
  {
    "text": "want to write your unit tests first and all of them start with the it just like the describe you give it a name and then",
    "start": "771090",
    "end": "777540"
  },
  {
    "text": "you have a function then you have all your logic in this case we're expecting true to be true these it will succeed",
    "start": "777540",
    "end": "785700"
  },
  {
    "text": "like this because true is true however I change that expect statement to say expect false to be truth II you know",
    "start": "785700",
    "end": "791970"
  },
  {
    "text": "false doesn't equal true so now we can see this whole stack trace that we get in here we",
    "start": "791970",
    "end": "797040"
  },
  {
    "text": "the error message that says expected false to be true the-- so pinpoint just",
    "start": "797040",
    "end": "803070"
  },
  {
    "text": "right to the problem the stack trace is a little difficult to read I will we'll give you that one as you get more",
    "start": "803070",
    "end": "809240"
  },
  {
    "text": "uncontrived to test you get more sack traces right into your code from a test",
    "start": "809240",
    "end": "816930"
  },
  {
    "start": "815000",
    "end": "845000"
  },
  {
    "text": "setup standpoint and we have things we can run before each and after each so",
    "start": "816930",
    "end": "823620"
  },
  {
    "text": "this is before each test after each test any kind of set up any kind of cleanup I need to do then you have also before all",
    "start": "823620",
    "end": "830910"
  },
  {
    "text": "and after all oh so before any test runs and then after all of them are successful most testing frameworks have",
    "start": "830910",
    "end": "839280"
  },
  {
    "text": "this kind of concept and we'll see a ton of before each in one spot for after",
    "start": "839280",
    "end": "844620"
  },
  {
    "text": "each so to set up your tests we set them up on what's called a testbed it allows",
    "start": "844620",
    "end": "852390"
  },
  {
    "start": "845000",
    "end": "934000"
  },
  {
    "text": "us to configure a test module so everything in anger starts at the module standpoint and I can import all of my",
    "start": "852390",
    "end": "860010"
  },
  {
    "text": "components and my declar my declarations all my other modules my providers there's get references to any of those",
    "start": "860010",
    "end": "866730"
  },
  {
    "text": "things that are injected I can trigger my change detection right from the the test bed I can get access to all the Dom",
    "start": "866730",
    "end": "874740"
  },
  {
    "text": "elements a lot of times you need a test you don't necessarily want to go to the Dom elements but there are times were",
    "start": "874740",
    "end": "880710"
  },
  {
    "text": "sure like data binding I like to test sometimes that did my data bind the way I wanted it to do I have extra spaces do",
    "start": "880710",
    "end": "887490"
  },
  {
    "text": "I have extra characters I have funky things did not data bind at all so you need access to the dominant actually to get those pieces and from a",
    "start": "887490",
    "end": "895320"
  },
  {
    "text": "configuration standpoint you import testbed from the angular core testing module then you get your standard things",
    "start": "895320",
    "end": "902850"
  },
  {
    "text": "you expect in a module imports declarations providers and you give this one odd one called schemas because",
    "start": "902850",
    "end": "911010"
  },
  {
    "text": "schemas is totally optional with the knows our schema allows us to do is to",
    "start": "911010",
    "end": "916140"
  },
  {
    "text": "say ignore things that you don't necessarily know about so there's times where you don't want to import everything under the Sun that it may",
    "start": "916140",
    "end": "922020"
  },
  {
    "text": "need because you're not going to be testing that no errors is our way to try to get around that then use it with",
    "start": "922020",
    "end": "927960"
  },
  {
    "text": "caution though because it can sometimes actually hide errors that we need to actually be able to see let's",
    "start": "927960",
    "end": "935790"
  },
  {
    "start": "934000",
    "end": "960000"
  },
  {
    "text": "look at some real tests so first test just a straight component no dependencies it's a really simple",
    "start": "935790",
    "end": "942509"
  },
  {
    "text": "component two things to look out for here out of the box angular does everything with an external template no",
    "start": "942509",
    "end": "949680"
  },
  {
    "text": "inline templates I like that model so I follow that for all of my coding then we just have a",
    "start": "949680",
    "end": "955470"
  },
  {
    "text": "variable set to subject world really simple component from a testing",
    "start": "955470",
    "end": "961319"
  },
  {
    "text": "standpoint first thing we have to do is configure our module so I need to pull",
    "start": "961319",
    "end": "966870"
  },
  {
    "text": "in a sink is loading mop or loading a template is an asynchronous operation so",
    "start": "966870",
    "end": "973889"
  },
  {
    "text": "I need to use the async testing utility I need access to my component which is",
    "start": "973889",
    "end": "979079"
  },
  {
    "text": "what component fixture will give me and then I need the testbed which is our testing module then I have to import my",
    "start": "979079",
    "end": "985319"
  },
  {
    "text": "component every test starts in a describe group",
    "start": "985319",
    "end": "992139"
  },
  {
    "text": "for a setup before each test I want to do my setup it needs to be a sink like I mentioned and now I have to declare I",
    "start": "992350",
    "end": "999880"
  },
  {
    "text": "have a simple component which is my component name and I need to compile my",
    "start": "999880",
    "end": "1005640"
  },
  {
    "text": "component so at this point it does all my compositions I'm ready to start interacting with it that's where I have",
    "start": "1005640",
    "end": "1014250"
  },
  {
    "start": "1013000",
    "end": "1049000"
  },
  {
    "text": "to create my actual fixture so at this point I just set everything up the fixture allows me to do stuff like",
    "start": "1014250",
    "end": "1020310"
  },
  {
    "text": "actually create the component so this is what our test looks like at this point and I need to create a fixture so I can",
    "start": "1020310",
    "end": "1026970"
  },
  {
    "text": "get access to the component and then outside of my before each async I have",
    "start": "1026970",
    "end": "1032189"
  },
  {
    "text": "another before each luckily with the way that Jasmine works it'll run the async",
    "start": "1032190",
    "end": "1037800"
  },
  {
    "text": "one once that one's done then it'll go and run the next before each and here's",
    "start": "1037800",
    "end": "1043079"
  },
  {
    "text": "where I actually create my component so now I have an instance in memory of that component",
    "start": "1043080",
    "end": "1049460"
  },
  {
    "text": "but access to it yet I just created it so basically nuded up without access",
    "start": "1050419",
    "end": "1057270"
  },
  {
    "text": "so you get access to it create a comparable for the component and then I",
    "start": "1057270",
    "end": "1062520"
  },
  {
    "text": "want to say fix your dot component instance so this component instance gives me direct access right into the",
    "start": "1062520",
    "end": "1068419"
  },
  {
    "text": "component and now I can start interacting with it so now I can run the",
    "start": "1068419",
    "end": "1073890"
  },
  {
    "text": "most simple test and this is the test that comes out of the box every time you generate a component you get an it says",
    "start": "1073890",
    "end": "1079500"
  },
  {
    "text": "it should be created and you expect the component to be truthy that just means I was able to do up the component",
    "start": "1079500",
    "end": "1085710"
  },
  {
    "text": "successfully most basic tests that you can get for the component as you start",
    "start": "1085710",
    "end": "1092490"
  },
  {
    "text": "adding in more dependencies you have to keep updating the testbed to add in those dependencies else this test starts",
    "start": "1092490",
    "end": "1098039"
  },
  {
    "text": "to fail because it doesn't know like what your services are it doesn't know any other components you may depend on",
    "start": "1098039",
    "end": "1103610"
  },
  {
    "text": "it's a great tester to make sure you least have everything set up correctly in your tests sometimes you'll get",
    "start": "1103610",
    "end": "1110880"
  },
  {
    "text": "errors and other tests and you'll wonder if my tests fail or did my setup fail this will tell you did your setup fail",
    "start": "1110880",
    "end": "1119570"
  },
  {
    "text": "but this point all we've done is create the instance we haven't done anything with it how does it run in G on an it or",
    "start": "1120110",
    "end": "1125549"
  },
  {
    "text": "anything else so we need to trigger a change detection that once we trigger",
    "start": "1125549",
    "end": "1130590"
  },
  {
    "text": "this change detection then ng on an it will actually run in our component and it's as simple as saying fixture dot",
    "start": "1130590",
    "end": "1137669"
  },
  {
    "text": "detect changes and so now I'm actually ready to start doing some testing I can",
    "start": "1137669",
    "end": "1144270"
  },
  {
    "start": "1140000",
    "end": "1223000"
  },
  {
    "text": "test my actual Dom so far this is what our test does look like we want to",
    "start": "1144270",
    "end": "1152730"
  },
  {
    "text": "import a couple other things out of the angular platform browser I want to import by so this will allow",
    "start": "1152730",
    "end": "1158850"
  },
  {
    "text": "me to do some queries that we'll see in a moment and then debug element will actually allow me to get to the actual",
    "start": "1158850",
    "end": "1165330"
  },
  {
    "text": "elements so as simple as create a variable for our debug element say",
    "start": "1165330",
    "end": "1171270"
  },
  {
    "text": "fixture debug element and now I'm ready to actually write some tests so in this simple component this is what the HTML",
    "start": "1171270",
    "end": "1178409"
  },
  {
    "text": "looks like I've a hello and I'm binding the subject here",
    "start": "1178409",
    "end": "1183409"
  },
  {
    "text": "from a test standpoint the standard it with our name and our function now I can",
    "start": "1183510",
    "end": "1190170"
  },
  {
    "text": "say for that element go ahead and query by CSS for my h1 tag if you have",
    "start": "1190170",
    "end": "1198480"
  },
  {
    "text": "multiple h1 tags which you should not from an accessibility standpoint it will fail but for stuff like this",
    "start": "1198480",
    "end": "1204000"
  },
  {
    "text": "I CSS is fantastic I should know I should only have one h1 tag anyway screen readers don't like when you have",
    "start": "1204000",
    "end": "1210330"
  },
  {
    "text": "multiples and once I have access to my h1 now I can say give me the native",
    "start": "1210330",
    "end": "1215370"
  },
  {
    "text": "element and look at the HTML properties like inner text and I expected to say hello world so in a recap so our test",
    "start": "1215370",
    "end": "1227550"
  },
  {
    "start": "1223000",
    "end": "1280000"
  },
  {
    "text": "bed all about configuring our module whether we're doing components we're doing services this we always have that",
    "start": "1227550",
    "end": "1235020"
  },
  {
    "text": "test module there sometimes you have to import a component sometimes you import a service just it allows us to create",
    "start": "1235020",
    "end": "1243450"
  },
  {
    "text": "our components it allows us to access Dom you can also get injector references",
    "start": "1243450",
    "end": "1249750"
  },
  {
    "text": "from the test bed using test bed get so anything I happen to inject like services it's a great way to be able to",
    "start": "1249750",
    "end": "1256440"
  },
  {
    "text": "mock out your servers and get access to the methods within your service that for component depends on it",
    "start": "1256440",
    "end": "1263720"
  },
  {
    "text": "and then one key thing to remember is change detection is not triggered by the created component guarantee that will",
    "start": "1264059",
    "end": "1269759"
  },
  {
    "text": "trip you up at least once because you'll be wondering why stuff you expected to run an ng on in it didn't run when you",
    "start": "1269759",
    "end": "1274979"
  },
  {
    "text": "created the component trick make sure to trigger your change detection",
    "start": "1274979",
    "end": "1280669"
  },
  {
    "start": "1280000",
    "end": "1311000"
  },
  {
    "text": "more advanced let's look at components with an actual service dependency so",
    "start": "1283170",
    "end": "1288570"
  },
  {
    "text": "simple service we're just taken and creating a greeting service and we're moving our hard-coded the subject into",
    "start": "1288570",
    "end": "1295080"
  },
  {
    "text": "the service [Music] from a component standpoint now we're",
    "start": "1295080",
    "end": "1301309"
  },
  {
    "text": "just going to import the service and put it on our constructor and then we'll just change our subject to say get the",
    "start": "1301309",
    "end": "1307549"
  },
  {
    "text": "subject from the actual service however",
    "start": "1307549",
    "end": "1312679"
  },
  {
    "start": "1311000",
    "end": "1417000"
  },
  {
    "text": "you don't want to use real services in your test because that violates this",
    "start": "1312679",
    "end": "1318169"
  },
  {
    "text": "single unit principle now I would be testing component and service just want",
    "start": "1318169",
    "end": "1323870"
  },
  {
    "text": "to test the component so to get around that two options you can use a stub which basically says I'm gonna create",
    "start": "1323870",
    "end": "1330080"
  },
  {
    "text": "all the same methods that my service has and I'm gonna call those and they're gonna return some bit of hard-coded data",
    "start": "1330080",
    "end": "1335750"
  },
  {
    "text": "versus calling the API you can also use Jasmine spies say when you run this",
    "start": "1335750",
    "end": "1342230"
  },
  {
    "text": "piece return this hard bit bit of data and we'll look at both of these so if",
    "start": "1342230",
    "end": "1348900"
  },
  {
    "text": "service time it looks exactly like your service in this case I have a subject and I said it's a test world one big",
    "start": "1348900",
    "end": "1357540"
  },
  {
    "text": "thing on this one you want to set your stubs if you have hard coded data in",
    "start": "1357540",
    "end": "1362670"
  },
  {
    "text": "your real service you want to set your stubs hard coded data does something different that way you can truly validate did I actually stub it out",
    "start": "1362670",
    "end": "1369570"
  },
  {
    "text": "correctly if it's all the same data you don't really know unless you turn off your network did I happen to",
    "start": "1369570",
    "end": "1376230"
  },
  {
    "text": "accidentally call the API and go all the way through so always make a different data but from a testing standpoint and",
    "start": "1376230",
    "end": "1385470"
  },
  {
    "text": "just what our test looked like before now we need to put on a provider's on our module same way we do normally so in",
    "start": "1385470",
    "end": "1392040"
  },
  {
    "text": "this case I have this funky object that says provide greeting service use class greeting service stub so this tells the",
    "start": "1392040",
    "end": "1399450"
  },
  {
    "text": "testing module any place that I need to use greeting service I'm gonna inject instead the my stub it's a quick way to",
    "start": "1399450",
    "end": "1407310"
  },
  {
    "text": "mock it out my test is pretty similar one gene that changes is my to be now is",
    "start": "1407310",
    "end": "1413730"
  },
  {
    "text": "gonna look for hello test world instead of hello world from a service spying",
    "start": "1413730",
    "end": "1420870"
  },
  {
    "start": "1417000",
    "end": "1562000"
  },
  {
    "text": "standpoint speiser are a little bit different so we're gonna change our service up a little bit",
    "start": "1420870",
    "end": "1426690"
  },
  {
    "text": "ring though the observable route so we're going to now change our greeting subject and punctuation into observable",
    "start": "1426690",
    "end": "1435860"
  },
  {
    "text": "in our component we're gonna change it up so that we have variables for all of",
    "start": "1435920",
    "end": "1441960"
  },
  {
    "text": "them and then in our ng on in it we're gonna call our actual observables and get all of our data a little contrived",
    "start": "1441960",
    "end": "1449460"
  },
  {
    "text": "example but the point around this a lot of times in ng on in it you're doing multiple things",
    "start": "1449460",
    "end": "1456200"
  },
  {
    "text": "so from a testing standpoint we create our variable to get our access to our",
    "start": "1456640",
    "end": "1462720"
  },
  {
    "text": "service what our provider goes back to exactly what we're used to seeing and",
    "start": "1462720",
    "end": "1469590"
  },
  {
    "text": "then we need to get access into our actual injected service so we can do that there's two ways I could create a",
    "start": "1469590",
    "end": "1475980"
  },
  {
    "text": "constant variable for our testbed and access it that way or I can say off of",
    "start": "1475980",
    "end": "1481230"
  },
  {
    "text": "the debug element I'm an injector property get me the greeting service both of them",
    "start": "1481230",
    "end": "1486870"
  },
  {
    "text": "work but not my test has changed a bit",
    "start": "1486870",
    "end": "1492440"
  },
  {
    "text": "now I have this acing property on my test because I'm now dealing with",
    "start": "1492650",
    "end": "1497750"
  },
  {
    "text": "observables which is asynchronous operations and I say spy on my greeting service",
    "start": "1497750",
    "end": "1504750"
  },
  {
    "text": "anytime I call get greeting I'm going to return the value of observable of hello I need to do my detect changes",
    "start": "1504750",
    "end": "1515120"
  },
  {
    "text": "then I need to say fixture winds table then so that it waits then I get to do",
    "start": "1515650",
    "end": "1520960"
  },
  {
    "text": "my fixture detect changes in it do you might expect statements the one bad",
    "start": "1520960",
    "end": "1527050"
  },
  {
    "text": "thing with spies this technically doesn't stop me from going directly to my service for the",
    "start": "1527050",
    "end": "1533970"
  },
  {
    "text": "other two observables that are in my ng on in it so I have to remember anything",
    "start": "1533970",
    "end": "1539670"
  },
  {
    "text": "that happens in the ng on in it I have to spy on that and return data else it's going to go all the way to my service",
    "start": "1539670",
    "end": "1545910"
  },
  {
    "text": "it's going to go all the way through to my database and it's going to bring back data so that's the downside of spies",
    "start": "1545910",
    "end": "1552360"
  },
  {
    "text": "versus service or stubs personally I prefer stubs because then I'm ensured that I actually over wrote",
    "start": "1552360",
    "end": "1559350"
  },
  {
    "text": "everything I needed to overwrite but",
    "start": "1559350",
    "end": "1564570"
  },
  {
    "text": "this code looks like we really don't want this kind of then kind of syntax it",
    "start": "1564570",
    "end": "1570090"
  },
  {
    "text": "really doesn't look that great it's hard to follow I'm probably going when does Wednesday will actually come back I",
    "start": "1570090",
    "end": "1577380"
  },
  {
    "text": "don't actually even know myself when it comes back because I like my test to look a little bit more synchronous and",
    "start": "1577380",
    "end": "1584160"
  },
  {
    "start": "1578000",
    "end": "1647000"
  },
  {
    "text": "we can do that with something called tic and fake async both testing utilities",
    "start": "1584160",
    "end": "1589200"
  },
  {
    "text": "angular provides its untick basically forwards the virtual time so it doesn't",
    "start": "1589200",
    "end": "1594750"
  },
  {
    "text": "wait for like the observables to come back it just makes them then come back that's why you spy on the stuff and it",
    "start": "1594750",
    "end": "1601770"
  },
  {
    "text": "all runs within the fake async because it's not true V async so I can do my",
    "start": "1601770",
    "end": "1607710"
  },
  {
    "text": "same spy that we look at but now I say fixture that detect changes I say tick and so it's gonna move move it forward",
    "start": "1607710",
    "end": "1615510"
  },
  {
    "text": "virtually and I detect my changes again and now I can do my expect statement this is much easier to follow I know",
    "start": "1615510",
    "end": "1622320"
  },
  {
    "text": "it's gonna run spy on then it's going to run my fixture detect changes then my tick they then keep going I don't have",
    "start": "1622320",
    "end": "1628500"
  },
  {
    "text": "to wonder well when does when stable come back and you can also with tick tell it how far forward you want it to",
    "start": "1628500",
    "end": "1634470"
  },
  {
    "text": "go so if you wanted to forward say a second five seconds maybe you have a",
    "start": "1634470",
    "end": "1640500"
  },
  {
    "text": "pause in your code or you're running a timer where you can tell it to forward as far as that needs to go",
    "start": "1640500",
    "end": "1647280"
  },
  {
    "start": "1647000",
    "end": "1701000"
  },
  {
    "text": "you don't want to connect to our actual service that's where the stubs",
    "start": "1647280",
    "end": "1653770"
  },
  {
    "text": "or the spies come in definitely prefer the stubs if you do go down the spiral",
    "start": "1653770",
    "end": "1660220"
  },
  {
    "text": "make sure you spy on everything in that ng on a net that will definitely trip",
    "start": "1660220",
    "end": "1665590"
  },
  {
    "text": "you up and you'll be wondering why is my test running so slow over something that should be so simple and it's because you",
    "start": "1665590",
    "end": "1672010"
  },
  {
    "text": "didn't spy on everything and it is truly going more integration tester out then",
    "start": "1672010",
    "end": "1678760"
  },
  {
    "text": "use the fake async in the tick instead of using the wince table just it's easier to follow it's way less confusing",
    "start": "1678760",
    "end": "1685500"
  },
  {
    "text": "no developer in the angular world is going to go what does one stable do watch all of them are gonna go what does",
    "start": "1685500",
    "end": "1691330"
  },
  {
    "text": "one stable do I'm not really sure but all of them know pretty quickly",
    "start": "1691330",
    "end": "1696490"
  },
  {
    "text": "what tick does what what detect changes do they know when they're going to run",
    "start": "1696490",
    "end": "1701910"
  },
  {
    "start": "1701000",
    "end": "1963000"
  },
  {
    "text": "any questions on components where we jump into reactive forms",
    "start": "1701910",
    "end": "1708330"
  },
  {
    "text": "from a form standpoint were only talking reactive forms because template forms you can't actually test if you want to",
    "start": "1710620",
    "end": "1716680"
  },
  {
    "text": "test anything in template forms you're strictly testing the HTML side of it you can't test anything in the component",
    "start": "1716680",
    "end": "1722110"
  },
  {
    "text": "because none of its defined in the component where reactive forms everything is defined in the component so you can test it run tests like",
    "start": "1722110",
    "end": "1729340"
  },
  {
    "text": "validation errors is my fields valid for what I type in is my forms valid by",
    "start": "1729340",
    "end": "1736450"
  },
  {
    "text": "getting the right error messages when I do reactive forms I'm actually subscribing and watching the changes and",
    "start": "1736450",
    "end": "1742059"
  },
  {
    "text": "I have a generic validator routine that I run if I want to check did my error messages come out correctly if I have",
    "start": "1742059",
    "end": "1748570"
  },
  {
    "text": "multiple ones did they append correctly with the right amount of spacing I don't want to end",
    "start": "1748570",
    "end": "1754030"
  },
  {
    "text": "one error message and have it without a space on the other error message you can test all of that you can test did it",
    "start": "1754030",
    "end": "1760540"
  },
  {
    "text": "display right on the UI you",
    "start": "1760540",
    "end": "1765730"
  },
  {
    "text": "just like any reactive form pulling the form group the form builder the validators because I'm doing the",
    "start": "1765730",
    "end": "1772090"
  },
  {
    "text": "generics validation routines and I'm subscribing to Jesus I like to do debounce",
    "start": "1772090",
    "end": "1777600"
  },
  {
    "text": "so that it actually Waits in this case it's gonna wait at least a second for",
    "start": "1777600",
    "end": "1783070"
  },
  {
    "text": "them to stop typing before it runs the validation routine there's nothing like from a user experience the minute they",
    "start": "1783070",
    "end": "1788890"
  },
  {
    "text": "click on a field like saying you need to work this fields require it or this is an email it's like yes I just clicked on",
    "start": "1788890",
    "end": "1794260"
  },
  {
    "text": "that I haven't even typed so debounce will allow you to wait that second before it for them to stop typing before",
    "start": "1794260",
    "end": "1799810"
  },
  {
    "text": "you show any kind of validation messages and from a form standpoint for all these tests I only have one form item called",
    "start": "1799810",
    "end": "1807220"
  },
  {
    "text": "item default values blank and it's got two validators as required in min length",
    "start": "1807220",
    "end": "1813700"
  },
  {
    "text": "of three you'll see in a moment why I picked these two from a test standing",
    "start": "1813700",
    "end": "1820330"
  },
  {
    "text": "hand point get an import I reactive forms module I like to import the abstract control versus the actual",
    "start": "1820330",
    "end": "1826510"
  },
  {
    "text": "control all of the fields inherit from abstract control so standard import",
    "start": "1826510",
    "end": "1834040"
  },
  {
    "text": "statement for the module because I only have one form field there's no sense in",
    "start": "1834040",
    "end": "1839890"
  },
  {
    "text": "writing this one line of code in every single one of the tests it made sense to say before each test just give me access",
    "start": "1839890",
    "end": "1845830"
  },
  {
    "text": "to the one field if I have a more complex form with lots of tests on it I'm gonna look at putting this one line",
    "start": "1845830",
    "end": "1852790"
  },
  {
    "text": "into each test and looking for the exact form field that I need so the tests are",
    "start": "1852790",
    "end": "1859480"
  },
  {
    "text": "kind of odd I didn't I actually found some stuff I didn't even realize or was unexpected when I ran this first test so",
    "start": "1859480",
    "end": "1867640"
  },
  {
    "text": "standard test I said set my value to nothing I thought okay I got required and I got a min",
    "start": "1867640",
    "end": "1873350"
  },
  {
    "text": "length of three off its blank it's not required and it's not three I'm thinking both of those validators are gonna fire",
    "start": "1873350",
    "end": "1880780"
  },
  {
    "text": "I'm sure you probably thought the same thing and you would be wrong just like I was",
    "start": "1880780",
    "end": "1886440"
  },
  {
    "text": "only required actually fires when the form fields blank and you can check",
    "start": "1886440",
    "end": "1891940"
  },
  {
    "text": "these by looking at the errors for the form fields say if they're defined it means that validator fired if it's not",
    "start": "1891940",
    "end": "1899080"
  },
  {
    "text": "defined it means it wasn't fired so that I can check the errors fired did my",
    "start": "1899080",
    "end": "1906490"
  },
  {
    "text": "valid flag actually get triggered for which it should have and is my form",
    "start": "1906490",
    "end": "1911590"
  },
  {
    "text": "valid or not so that allows me to know did I set up all of my validation correctly or not and I can do the",
    "start": "1911590",
    "end": "1919120"
  },
  {
    "text": "inverse for sure if I set it to a one character I've met the required but I",
    "start": "1919120",
    "end": "1925180"
  },
  {
    "text": "haven't met the men link I should see the opposites men links defined and requires undefined so you can keep going",
    "start": "1925180",
    "end": "1932350"
  },
  {
    "text": "through all of your different validate daters here and checking everything and",
    "start": "1932350",
    "end": "1938290"
  },
  {
    "text": "it'll probably turn up some other things as you go through they go oh I thought these were gonna work this way it's like nope who would have guessed required him",
    "start": "1938290",
    "end": "1945580"
  },
  {
    "text": "in like didn't fire when the field was blank and it felt obvious that both would fire until I ran the test case",
    "start": "1945580",
    "end": "1950860"
  },
  {
    "text": "because I was kind of wondering why is my UI not showing both the first time I wrote a reactive form and I thought",
    "start": "1950860",
    "end": "1957040"
  },
  {
    "text": "maybe I did something wrong and then this test proved no I did not",
    "start": "1957040",
    "end": "1963150"
  },
  {
    "start": "1963000",
    "end": "2033000"
  },
  {
    "text": "but there's some gotchas technically in the test I showed none of that validation actually would run because",
    "start": "1963150",
    "end": "1970690"
  },
  {
    "text": "when you say set value it doesn't set your dirty flag on the field and all of",
    "start": "1970690",
    "end": "1977020"
  },
  {
    "text": "my generic validation looks to see that somebody typed in the field there's action this is intentional there's a",
    "start": "1977020",
    "end": "1984310"
  },
  {
    "text": "comment in the angular source code that says we think you know what you're doing when you call set value programmatically",
    "start": "1984310",
    "end": "1989410"
  },
  {
    "text": "so we're not going to set the dirty flag automatically for you you need to handle that thankfully they expose there's",
    "start": "1989410",
    "end": "1997420"
  },
  {
    "text": "something and we can call it in our before each to say I know field dot mark is dirty because I want testing is my",
    "start": "1997420",
    "end": "2004470"
  },
  {
    "text": "validation the fields always going to be dirty so I can just safely say just make the field dirty right off the bat and",
    "start": "2004470",
    "end": "2010530"
  },
  {
    "text": "trigger the change detection and then the set value will work exactly as I expected that was very unexpected the",
    "start": "2010530",
    "end": "2018270"
  },
  {
    "text": "first time I ran through all these Testaments I didn't know my validators fire and literally clicked on set value and just",
    "start": "2018270",
    "end": "2024660"
  },
  {
    "text": "happen to run across that code comment it is not well documented in their Docs",
    "start": "2024660",
    "end": "2029670"
  },
  {
    "text": "it is very well documented though in their source code dealing with debounce",
    "start": "2029670",
    "end": "2035550"
  },
  {
    "text": "time also causes these test cases not to run if you run it by default like I ran",
    "start": "2035550",
    "end": "2042900"
  },
  {
    "text": "it before what you're going to get is some error message that says you still have something in the queue which means",
    "start": "2042900",
    "end": "2048570"
  },
  {
    "text": "I have an async operation that didn't actually complete he so we were supposed to wait a second before that validation",
    "start": "2048570",
    "end": "2055139"
  },
  {
    "text": "fired this is the way it used to work before angular 6 maybe even 5 debounce",
    "start": "2055140",
    "end": "2062669"
  },
  {
    "text": "just failed so I had to overwrite debouch to say automatically return luckily they fixed that so now to use",
    "start": "2062670",
    "end": "2071520"
  },
  {
    "text": "fake async and I say tick and I pass in the 1000 so it will automatically",
    "start": "2071520",
    "end": "2077010"
  },
  {
    "text": "forward the time so that the debounce will actually run for me and then I can do all my tests like I normally would",
    "start": "2077010",
    "end": "2083070"
  },
  {
    "text": "run my detect changes check my value",
    "start": "2083070",
    "end": "2087740"
  },
  {
    "text": "to form recap love to test validation of my error messages especially because I",
    "start": "2089810",
    "end": "2095389"
  },
  {
    "text": "had that generic routine where I manually set in the messages in my component to go out to my UI got to",
    "start": "2095390",
    "end": "2102680"
  },
  {
    "text": "realize that the dirty flag is not set when calling set value",
    "start": "2102680",
    "end": "2107700"
  },
  {
    "text": "you have to be using debounce you have to run tick and give it the number of milliseconds that's equal to your actual",
    "start": "2107700",
    "end": "2114900"
  },
  {
    "text": "D bounce if you give it less than it it will still air out because it hasn't waited long enough for D bounce to run",
    "start": "2114900",
    "end": "2122180"
  },
  {
    "start": "2121000",
    "end": "2382000"
  },
  {
    "text": "so moving on to HTTP services so first",
    "start": "2122780",
    "end": "2127890"
  },
  {
    "text": "thing with a sticky stuff you don't want to call your actual back-end your goal is not to test that my service can call",
    "start": "2127890",
    "end": "2133859"
  },
  {
    "text": "my database or this or whatever API actually be an API to a database that's",
    "start": "2133859",
    "end": "2139170"
  },
  {
    "text": "not our goal or our goal is to test whatever business logic I have in the service works when I return a bit of",
    "start": "2139170",
    "end": "2146220"
  },
  {
    "text": "mocked up data and luckily angular gives us two fantastic utilities for it HTTP",
    "start": "2146220",
    "end": "2152849"
  },
  {
    "text": "client testing module an HTTP testing controller so both of these allow us to",
    "start": "2152849",
    "end": "2157859"
  },
  {
    "text": "mock out all of our HTTP calls you",
    "start": "2157859",
    "end": "2163000"
  },
  {
    "text": "so in our standard test import both of those from the angular common h HTTP testing module we got our standard",
    "start": "2163000",
    "end": "2171130"
  },
  {
    "text": "describe need access to my service and I also need access to the HTTP testing",
    "start": "2171130",
    "end": "2176560"
  },
  {
    "text": "controller there might be four each and you'll notice because it's not a component based one of the compiled",
    "start": "2176560",
    "end": "2182980"
  },
  {
    "text": "components I don't have to run a sync on this and then here I want to set testbed",
    "start": "2182980",
    "end": "2190089"
  },
  {
    "text": "configure module to a constant and import in HP testing module and my",
    "start": "2190089",
    "end": "2196089"
  },
  {
    "text": "service provider so this first line that's highlighted gives us a the second",
    "start": "2196089",
    "end": "2203410"
  },
  {
    "text": "way that we can actually get references to our injector so earlier we ran element down injector get now I can just say for testbed but",
    "start": "2203410",
    "end": "2211450"
  },
  {
    "text": "get and give me my to do service that I injected in my providers and same thing for our testing controller and from a",
    "start": "2211450",
    "end": "2220180"
  },
  {
    "text": "testing standpoint everything's async still the thing that",
    "start": "2220180",
    "end": "2225250"
  },
  {
    "text": "totally trips me up still mentally is the first thing I'm setting up what I'm saying service get also I'm gonna call",
    "start": "2225250",
    "end": "2231550"
  },
  {
    "text": "on my service to get all method subscribe to it and then I'm going to check my results to this mock data that",
    "start": "2231550",
    "end": "2237849"
  },
  {
    "text": "I've it's not in the slides but somewhere I've defined mock data and what I actually want this service to",
    "start": "2237849",
    "end": "2243520"
  },
  {
    "text": "hard-coded returned and I'm checking the length for it so mentally I'm thinking",
    "start": "2243520",
    "end": "2249010"
  },
  {
    "text": "oh it's an observer I just subscribe to it it's going to run I haven't mocked anything yet but with that testing",
    "start": "2249010",
    "end": "2254470"
  },
  {
    "text": "module so for the ACP client it doesn't actually execute your HTTP calls yet",
    "start": "2254470",
    "end": "2259599"
  },
  {
    "text": "just queues them so I need to set up a way to get to the request so here I say",
    "start": "2259599",
    "end": "2265000"
  },
  {
    "text": "I expect one and I give it the URL so I can get access to that request cuz that could be making multiple HTTP calls both",
    "start": "2265000",
    "end": "2273390"
  },
  {
    "text": "in the slides I just abbreviated the URL but you would need you whatever that full URL that you're",
    "start": "2273390",
    "end": "2278430"
  },
  {
    "text": "passing into your service normally to get your API put that in there and now I've access to the request and the next",
    "start": "2278430",
    "end": "2285210"
  },
  {
    "text": "thing I want to do to actually run my HTP I need to flush what everything is caching and tell it what data do I",
    "start": "2285210",
    "end": "2291869"
  },
  {
    "text": "actually want you to return back from that HTTP call and then the last piece I",
    "start": "2291869",
    "end": "2298559"
  },
  {
    "text": "that's good to run you're not forced to run it but a speed controller dot verify will double-check that I actually",
    "start": "2298559",
    "end": "2305190"
  },
  {
    "text": "flushed everything that I had queued since I can queue multiple HP calls if I",
    "start": "2305190",
    "end": "2311009"
  },
  {
    "text": "only flush one of them and not all of them then it's going to actually fail my test and it will fare on the verify step",
    "start": "2311009",
    "end": "2316710"
  },
  {
    "text": "versus just saying hey you still have something in queue it's really easy to mock out my HTP I didn't have to do any",
    "start": "2316710",
    "end": "2323549"
  },
  {
    "text": "kind of funky dependency injection I didn't have to do any really odd maken",
    "start": "2323549",
    "end": "2329009"
  },
  {
    "text": "previously they're mock back in just a whole slew of code you had to throw in there that never quite made sense and",
    "start": "2329009",
    "end": "2336150"
  },
  {
    "text": "you were magically creating all of these HTTP responses before that by the time",
    "start": "2336150",
    "end": "2341339"
  },
  {
    "text": "you got done you it I have absolutely no clue what this code does I'm just thankfully it works now looking at this",
    "start": "2341339",
    "end": "2346349"
  },
  {
    "text": "you know exactly what was doing you know I'm gonna get access to my request I'm",
    "start": "2346349",
    "end": "2352200"
  },
  {
    "text": "gonna pass back some fake data and I'm gonna make sure they all ran so this came out in the 5.0 kind of time frame",
    "start": "2352200",
    "end": "2359130"
  },
  {
    "text": "they're very well documented in their Docs the other piece you can do if you're",
    "start": "2359130",
    "end": "2365770"
  },
  {
    "text": "gonna run more than one HTTP test in there I would actually move the verify call into an after each so that I can",
    "start": "2365770",
    "end": "2372310"
  },
  {
    "text": "always ensure that might verify runs and I don't have to remember to throw it into every test so take advantage of",
    "start": "2372310",
    "end": "2378520"
  },
  {
    "text": "those test setup and test teardown kind of methods so as you see it was a really",
    "start": "2378520",
    "end": "2385360"
  },
  {
    "start": "2382000",
    "end": "2531000"
  },
  {
    "text": "quick jump through HTTP services there's not a whole lot in the HTTP services",
    "start": "2385360",
    "end": "2390370"
  },
  {
    "text": "from a testing standpoint they made it really easy so we don't want to call our",
    "start": "2390370",
    "end": "2395560"
  },
  {
    "text": "back-end we want to use those testing model testing controller got to make sure you call that verify then one",
    "start": "2395560",
    "end": "2403420"
  },
  {
    "text": "caveat I have for HTTP testing is if all you're doing is saying HTTP GET or dot",
    "start": "2403420",
    "end": "2408520"
  },
  {
    "text": "post and you're just calling your api and returning it back you're not doing any business logic you're not doing any",
    "start": "2408520",
    "end": "2414220"
  },
  {
    "text": "error trapping not doing anything besides that the angular column returning it it doesn't make sense to me",
    "start": "2414220",
    "end": "2420250"
  },
  {
    "text": "to test it that's where tests the right things if there's no business logic all I'm testing is that angular can actually",
    "start": "2420250",
    "end": "2426070"
  },
  {
    "text": "make an HTTP call for me that's not value-added but typically you're gonna",
    "start": "2426070",
    "end": "2432400"
  },
  {
    "text": "have some kind of business logic in the minute you put an error trap in there you need to start testing it to make",
    "start": "2432400",
    "end": "2438640"
  },
  {
    "text": "sure your error handler actually ran questions on or reactive forms or HTTP",
    "start": "2438640",
    "end": "2446760"
  },
  {
    "text": "testing",
    "start": "2446760",
    "end": "2449760"
  },
  {
    "text": "why does because you can reason you have",
    "start": "2452869",
    "end": "2459030"
  },
  {
    "text": "to pass the URL to the test harness just because you can have multiple HTTP calls queued up so it needs to know which one",
    "start": "2459030",
    "end": "2466020"
  },
  {
    "text": "do you actually want to take effect on right now and what what's requests do you want to get access to it yes it has",
    "start": "2466020",
    "end": "2473790"
  },
  {
    "text": "to be your actual URL that so in your service somewhere if you say get the first thing you're passing is the URL to",
    "start": "2473790",
    "end": "2480150"
  },
  {
    "text": "go to your actual API so that string you pass it in to that request object back",
    "start": "2480150",
    "end": "2485520"
  },
  {
    "text": "here has to match whatever is in your actual service just so you have it with",
    "start": "2485520",
    "end": "2492359"
  },
  {
    "text": "the expect one it just says I expected one call to that URL and so get access",
    "start": "2492359",
    "end": "2497550"
  },
  {
    "text": "to that that specific request and I'd have to do that for each request that I am making that in this service in this",
    "start": "2497550",
    "end": "2504270"
  },
  {
    "text": "case I'm only making one call but it's just a way to get access to the request unfortunately there's no what you need",
    "start": "2504270",
    "end": "2509730"
  },
  {
    "text": "in order to actually flush the request you can do testing so the minute I call this flush request that's when this",
    "start": "2509730",
    "end": "2515670"
  },
  {
    "text": "subscribe actually gets executed and that's what it throws me mentally they still cuz normally you read this top to",
    "start": "2515670",
    "end": "2521880"
  },
  {
    "text": "bottom and go subscribe runs immediately they that's not the case it whilst your crowd technically runs but it just",
    "start": "2521880",
    "end": "2527910"
  },
  {
    "text": "queues up the HTTP call any other questions under routing",
    "start": "2527910",
    "end": "2538490"
  },
  {
    "start": "2531000",
    "end": "2956000"
  },
  {
    "text": "goal not to tip is to test navigation not to test the angular router you got",
    "start": "2538890",
    "end": "2544440"
  },
  {
    "text": "to have enough faith in the frameworks that you're using that they've fully tested and I don't need to retest it so",
    "start": "2544440",
    "end": "2550170"
  },
  {
    "text": "I just want to test my navigation if I take some action and I expect it to route somewhere did it actually route some water so a great example this is",
    "start": "2550170",
    "end": "2558089"
  },
  {
    "text": "authentication if I'm logged in successfully I'm going to go to the home page or go to an admin page did it",
    "start": "2558089",
    "end": "2564329"
  },
  {
    "text": "actually route successfully thankfully we can abstract all of that complexity",
    "start": "2564329",
    "end": "2570240"
  },
  {
    "text": "away they give us a router testing module we import that from the angular",
    "start": "2570240",
    "end": "2576240"
  },
  {
    "text": "router testing still in async and get in this case because I'm doing a component",
    "start": "2576240",
    "end": "2582119"
  },
  {
    "text": "test the one piece I don't like in this configure test module if you're actually",
    "start": "2582119",
    "end": "2588119"
  },
  {
    "text": "testing Rover apps you've got to provide the routes and you'll notice look",
    "start": "2588119",
    "end": "2593130"
  },
  {
    "text": "carefully every one of these components is the exact same component this is a little bit of a hack that I do when I'm testing",
    "start": "2593130",
    "end": "2599549"
  },
  {
    "text": "router stuff I know my login page isn't giving me my header component that I'm writing the tests in not gonna be my",
    "start": "2599549",
    "end": "2604950"
  },
  {
    "text": "signup component but I don't wanna have to import all of those and I don't have to setup every single component that it",
    "start": "2604950",
    "end": "2611460"
  },
  {
    "text": "may need in order for the real route to go through I'm just testing if I click a button does it go to the login page or",
    "start": "2611460",
    "end": "2618630"
  },
  {
    "text": "in my case are my login page I have a button that says take me over to the signup page and vice versa I don't care",
    "start": "2618630",
    "end": "2624269"
  },
  {
    "text": "what the component is but I have to provide it in my route in order for it to be successful so just a little hack",
    "start": "2624269",
    "end": "2631319"
  },
  {
    "text": "to get around importing lots of things I don't care about",
    "start": "2631319",
    "end": "2635269"
  },
  {
    "text": "standpoint few things I need to import I want to spy on my location you shouldn't",
    "start": "2636849",
    "end": "2642249"
  },
  {
    "text": "ask need to get access to the location so that would be the browser URL and I want to get access to all of my router",
    "start": "2642249",
    "end": "2647650"
  },
  {
    "text": "links thankfully they provide utilities for all of these like normal I'm going",
    "start": "2647650",
    "end": "2654729"
  },
  {
    "text": "to create my component get my debug element get my component instance detect all of my changes but I need to also get",
    "start": "2654729",
    "end": "2662859"
  },
  {
    "text": "access to my location since I need a location spy I need to get it out of the injector so I'm gonna say either testbed",
    "start": "2662859",
    "end": "2670329"
  },
  {
    "text": "get or element but injector get my location and convert it into a spy",
    "start": "2670329",
    "end": "2676180"
  },
  {
    "text": "location then I can do stuff like query",
    "start": "2676180",
    "end": "2681819"
  },
  {
    "text": "all and give me every directive on the page that's a router link or every element that has the router link",
    "start": "2681819",
    "end": "2687430"
  },
  {
    "text": "directive on it and so in this case I'm testing a header component so basically my menu your item a lot of times I won't",
    "start": "2687430",
    "end": "2695109"
  },
  {
    "text": "test the menu but for purposes of slides it makes a great scenario here first",
    "start": "2695109",
    "end": "2701589"
  },
  {
    "text": "aiders I have a bunch of test utilities that will cover it in a bit for advancing forward weird with like tick",
    "start": "2701589",
    "end": "2708519"
  },
  {
    "text": "and detect changes a helper to test what my path actually is so I have to keep writing the same lines of code over and",
    "start": "2708519",
    "end": "2714309"
  },
  {
    "text": "over or a helper for how do I actually click on a button first thing I want to",
    "start": "2714309",
    "end": "2720789"
  },
  {
    "text": "get access to a little bit brittle brittle test wanting access to the fourth link in my",
    "start": "2720789",
    "end": "2726650"
  },
  {
    "text": "menu I haven't routed anywhere yet so I expect my location to be my home page is",
    "start": "2726650",
    "end": "2733130"
  },
  {
    "text": "there's no authentication or guards or anything to send me somewhere else let's I should be right on the home page if I",
    "start": "2733130",
    "end": "2739280"
  },
  {
    "text": "click on that link to route somewhere forward my time and do my detect changes now I just happen to know that item",
    "start": "2739280",
    "end": "2747020"
  },
  {
    "text": "number 4 isn't should go to my signup page I can just did it actually work for",
    "start": "2747020",
    "end": "2752089"
  },
  {
    "text": "me normally I would not test just my menu you items lose but depending on how",
    "start": "2752089",
    "end": "2760160"
  },
  {
    "text": "complex your menu is this example I've only got four items in my menu anyway ok so it's a really small menu but I got a",
    "start": "2760160",
    "end": "2766849"
  },
  {
    "text": "really big menu that's either a hierarchical menu or lots of items on",
    "start": "2766849",
    "end": "2771859"
  },
  {
    "text": "there chances are you probably want to test that to make sure you didn't screw the menu up somewhere you didn't change",
    "start": "2771859",
    "end": "2777380"
  },
  {
    "text": "some link and to go somewhere else unintentionally I've definitely seen that happen in my bigger apps especially",
    "start": "2777380",
    "end": "2784520"
  },
  {
    "text": "if you're data-driven and you get a lot of your menu out of a database I've seen people go in the database and accidentally change the wrong menu item",
    "start": "2784520",
    "end": "2791329"
  },
  {
    "text": "and then we catch it when a user plus hey why does this page go to the other page instead of where it should go I",
    "start": "2791329",
    "end": "2798020"
  },
  {
    "text": "don't want my users to catch that so these are simple tests to write from a",
    "start": "2798020",
    "end": "2803750"
  },
  {
    "text": "hopper standpoint for my click event I need to know what button am I actually clicking on my doing a left button am i",
    "start": "2803750",
    "end": "2810109"
  },
  {
    "text": "doing a right button and I'm assuming the middle button is one one because",
    "start": "2810109",
    "end": "2815599"
  },
  {
    "text": "left is zero and two is right and then for my helper it can either be a debug",
    "start": "2815599",
    "end": "2822140"
  },
  {
    "text": "element or an HTML element then I can pass in the event by default edge so it's give me a left mouse click now I",
    "start": "2822140",
    "end": "2830510"
  },
  {
    "text": "can just it's an HTML element I can just call the click event on the HTML element if not for my debug element I need to",
    "start": "2830510",
    "end": "2838190"
  },
  {
    "text": "call trigger event handler and tell it to run the click event so I have this little helper stops me from having to",
    "start": "2838190",
    "end": "2844640"
  },
  {
    "text": "remember do I need to run click or do I need to run trigger event handler now I",
    "start": "2844640",
    "end": "2850460"
  },
  {
    "text": "just call click and let it do it and this example is straight out of all of the examples on the angular testing",
    "start": "2850460",
    "end": "2857069"
  },
  {
    "text": "documentation they don't generate this though as part of the angular CLI project anymore at one point in time in",
    "start": "2857069",
    "end": "2863609"
  },
  {
    "text": "the two and four space this used to come with the project and then they removed it so I still put them back in all of my",
    "start": "2863609",
    "end": "2871380"
  },
  {
    "text": "projects it's really handy same thing for advanced I actually got this out of",
    "start": "2871380",
    "end": "2876900"
  },
  {
    "text": "their documentation examples I can either take in a number or not taking a number and then I just called tick and",
    "start": "2876900",
    "end": "2884219"
  },
  {
    "text": "do my detect changes so now I just get to say advance and so I having to write these two lines of code all over the",
    "start": "2884219",
    "end": "2890429"
  },
  {
    "text": "place just write one same thing for the expect path to be taking my location",
    "start": "2890429",
    "end": "2897859"
  },
  {
    "text": "that I want it to be taking the actual path that it's currently at and then I",
    "start": "2897859",
    "end": "2903419"
  },
  {
    "text": "can do my check and I can either output my path or I can output the expected",
    "start": "2903419",
    "end": "2910589"
  },
  {
    "text": "failure it's a great way to be able to put messages in here so we want to make",
    "start": "2910589",
    "end": "2919439"
  },
  {
    "text": "sure we don't test our router we want to test our navigation pieces let the angular guys test the router we want to",
    "start": "2919439",
    "end": "2927029"
  },
  {
    "text": "use our router testing module you will still see that their documentation is all around their old router two stubs",
    "start": "2927029",
    "end": "2933779"
  },
  {
    "text": "and their router stub directives and funnily enough they actually have a comment in their Docs that say at a",
    "start": "2933779",
    "end": "2940469"
  },
  {
    "text": "future guide we will use the router testing module so it is their way to do it all of their samples and now use it",
    "start": "2940469",
    "end": "2946380"
  },
  {
    "text": "behind the scenes but their Doc's still have the old way to do it I like to set",
    "start": "2946380",
    "end": "2952650"
  },
  {
    "text": "the route the same component so that makes testing setup easy moving on to some Jasmine",
    "start": "2952650",
    "end": "2959400"
  },
  {
    "start": "2956000",
    "end": "3093000"
  },
  {
    "text": "goodies so we've covered all the real angular pieces but the good stuff and jasmine and some not-so-great stuff",
    "start": "2959400",
    "end": "2966080"
  },
  {
    "text": "first off what if I only run a run a single test or a single described which",
    "start": "2966080",
    "end": "2971400"
  },
  {
    "text": "happens all the time you're trying to troubleshoot one test you don't want to run your whole test suite so you can",
    "start": "2971400",
    "end": "2977670"
  },
  {
    "text": "just put an F in front of you that describe or the it and it will only run those tests in the inverse what if I",
    "start": "2977670",
    "end": "2984060"
  },
  {
    "text": "don't want to run the test in front of it and an X in front of the",
    "start": "2984060",
    "end": "2989570"
  },
  {
    "text": "it or describe the downside is and I guarantee at least one of you will check",
    "start": "2989570",
    "end": "2996320"
  },
  {
    "text": "it in to source code and then wonder why our test suite all the sudden only is running so quick or our code coverage",
    "start": "2996320",
    "end": "3002110"
  },
  {
    "text": "dropped if you're doing CI you should be looking at code coverage or and if it drops more than 2 or 3% you should be",
    "start": "3002110",
    "end": "3009700"
  },
  {
    "text": "flagging a failed build and you'll go why are we down to like 1% all of a sudden because somebody checked in and",
    "start": "3009700",
    "end": "3015370"
  },
  {
    "text": "either exclude all the tests or only run one test see it all the time but those",
    "start": "3015370",
    "end": "3021880"
  },
  {
    "text": "are handy things to actually run through you can also group tests together just",
    "start": "3021880",
    "end": "3028480"
  },
  {
    "text": "say you have something that's expensive just to setup you don't want to have to set up all of that set up for every",
    "start": "3028480",
    "end": "3034180"
  },
  {
    "text": "single test instead you can group them so I like to run a global describe or",
    "start": "3034180",
    "end": "3039970"
  },
  {
    "text": "set up so at every level you get a before each you get all and after each",
    "start": "3039970",
    "end": "3045670"
  },
  {
    "text": "and all the other test fixture setup methods then I can do other describes so in the case of its what if I want to do",
    "start": "3045670",
    "end": "3052510"
  },
  {
    "text": "a navigation test automatically I can run my before each I can run all of my tests that are in there a great way to",
    "start": "3052510",
    "end": "3057730"
  },
  {
    "text": "segregate off functionality test like know immediately ok I'm gonna test navigation then I'm gonna do some create",
    "start": "3057730",
    "end": "3064780"
  },
  {
    "text": "test then I'm gonna do some toggle menu tests so is my responsive menu actually working and funnily enough that we put",
    "start": "3064780",
    "end": "3072190"
  },
  {
    "text": "that test in there because for a while are responsive menu actually didn't work in our app and nobody actually knew it we thought oh we generated it off an",
    "start": "3072190",
    "end": "3079420"
  },
  {
    "text": "internal project generation tool that had the menu it should work well they had a bug they didn't know about so we wrote the test to make sure",
    "start": "3079420",
    "end": "3086020"
  },
  {
    "text": "it doesn't come back but every level I can do that segregation some great things we can do to make it easier one",
    "start": "3086020",
    "end": "3095230"
  },
  {
    "start": "3093000",
    "end": "3149000"
  },
  {
    "text": "piece that totally throws me and this is not consistent across Jasmine to equal doesn't always it always takes the",
    "start": "3095230",
    "end": "3102280"
  },
  {
    "text": "additional message but it doesn't always spit it out so in this example by taking",
    "start": "3102280",
    "end": "3107650"
  },
  {
    "text": "an object called data expected to equal expected data if not I'm going to say some message",
    "start": "3107650",
    "end": "3113710"
  },
  {
    "text": "when it fails I get this instead I don't get some message but if you noticed",
    "start": "3113710",
    "end": "3119349"
  },
  {
    "text": "earlier when you did our routing test it had the additional message it works in that scenario because I'm testing",
    "start": "3119349",
    "end": "3124720"
  },
  {
    "text": "strings so it's not consistent across the Jasmine framework and it's not meant to be consistent they said it's just",
    "start": "3124720",
    "end": "3130930"
  },
  {
    "text": "luck that it runs it all with the additional message that was not their intent and they don't plan on supporting",
    "start": "3130930",
    "end": "3135970"
  },
  {
    "text": "it but nothing stops you from passing it in and it totally three I spend a lot of",
    "start": "3135970",
    "end": "3141069"
  },
  {
    "text": "time trying to look up and troubleshoot why is my message is not coming out did I screw something up and it's like nope",
    "start": "3141069",
    "end": "3146920"
  },
  {
    "text": "that's just Jasmine so F in front of",
    "start": "3146920",
    "end": "3152530"
  },
  {
    "start": "3149000",
    "end": "3175000"
  },
  {
    "text": "everything only run this X means don't run it I'm gonna make sure not to check",
    "start": "3152530",
    "end": "3157720"
  },
  {
    "text": "those in the source control group like tests or tests that have expensive setup",
    "start": "3157720",
    "end": "3163059"
  },
  {
    "text": "cost and those additional messages like I mentioned don't always work so wrap up",
    "start": "3163059",
    "end": "3170890"
  },
  {
    "text": "your unit test or proof that my code truly does what I think it does I can",
    "start": "3170890",
    "end": "3176410"
  },
  {
    "start": "3175000",
    "end": "3183000"
  },
  {
    "text": "release faster I have higher confidence I can refactor with ease",
    "start": "3176410",
    "end": "3184079"
  },
  {
    "start": "3183000",
    "end": "3197000"
  },
  {
    "text": "my functionality works exactly the way that I expect it to work",
    "start": "3184530",
    "end": "3189289"
  },
  {
    "text": "make sure no bugs that I already fixed come back I can pinpoint any new bugs right where",
    "start": "3189800",
    "end": "3195799"
  },
  {
    "text": "it's out in the code it's a great way to document functionality first thing that",
    "start": "3195799",
    "end": "3201680"
  },
  {
    "start": "3197000",
    "end": "3215000"
  },
  {
    "text": "you typically do when you come on a project is you're looking through the codebase if I have test cases I can look",
    "start": "3201680",
    "end": "3206869"
  },
  {
    "text": "through the test and I understand immediately what does the code intended to actually do greatly speeds up your",
    "start": "3206869",
    "end": "3213079"
  },
  {
    "text": "time to understanding code bases we want to keep them fast the faster the better",
    "start": "3213079",
    "end": "3218089"
  },
  {
    "start": "3215000",
    "end": "3227000"
  },
  {
    "text": "you will run them at ten seconds versus an hour you'll never run them keep them",
    "start": "3218089",
    "end": "3224690"
  },
  {
    "text": "simple as well and no trickiness to them and keep them consistent I shouldn't",
    "start": "3224690",
    "end": "3229970"
  },
  {
    "start": "3227000",
    "end": "3235000"
  },
  {
    "text": "cross my fingers when my test cases run and hope that my results come out to be the same as last time I ran them and I",
    "start": "3229970",
    "end": "3237289"
  },
  {
    "start": "3235000",
    "end": "3264000"
  },
  {
    "text": "love this quote by Martin Fowler don't let the fear that testing can't catch all the bugs stop you from writing tests",
    "start": "3237289",
    "end": "3243470"
  },
  {
    "text": "that will catch most of the bugs I see so many teams ago well I'm never gonna",
    "start": "3243470",
    "end": "3249770"
  },
  {
    "text": "catch everything so I'm never gonna write unit tests like if you can catch 80% of the bugs but then you only have",
    "start": "3249770",
    "end": "3256010"
  },
  {
    "text": "to focus on those twenty in those twenty are probably the hard ones that you were never getting to before that we're being masked by that 80% you already tracked",
    "start": "3256010",
    "end": "3262579"
  },
  {
    "text": "down a bunch of resources to give you there's two unit testing guides in the",
    "start": "3262579",
    "end": "3269390"
  },
  {
    "start": "3264000",
    "end": "3374000"
  },
  {
    "text": "angular space the first link is their main testing guide covers everything except HTP testing for whatever reason",
    "start": "3269390",
    "end": "3277670"
  },
  {
    "text": "when they came out with the HTTP client module they moved all of the testing out of the testing guide and into the HTTP",
    "start": "3277670",
    "end": "3283819"
  },
  {
    "text": "guide there's still great Docs you just have to know to go to two places jasmine",
    "start": "3283819",
    "end": "3290480"
  },
  {
    "text": "has fantastic guides we only covered a couple expect statements they have a whole slew of expect statements in there",
    "start": "3290480",
    "end": "3296900"
  },
  {
    "text": "they're in different assertions all of these slides already online at slides",
    "start": "3296900",
    "end": "3302990"
  },
  {
    "text": "net all of the code plus more is",
    "start": "3302990",
    "end": "3308180"
  },
  {
    "text": "actually available in my github repository and it's on a branch if you",
    "start": "3308180",
    "end": "3314000"
  },
  {
    "text": "know get it also it's got the tree there this is actually part of a whole angular workshop that I run the workshop is",
    "start": "3314000",
    "end": "3320510"
  },
  {
    "text": "actually available on my website at digital drummer Jamie everything's there from a lab perspective except unit tests",
    "start": "3320510",
    "end": "3327740"
  },
  {
    "text": "test only house code but it walks you start to finish from creating an angular app all the way through through",
    "start": "3327740",
    "end": "3334910"
  },
  {
    "text": "finishing it deploying it so if you have anybody that needs to get ramped up on",
    "start": "3334910",
    "end": "3340940"
  },
  {
    "text": "that it's a great little tutorial you can also find me on Twitter YouTube",
    "start": "3340940",
    "end": "3346690"
  },
  {
    "text": "occasionally I'm on twitch and streaming you know leave this up or for anyone that you should take pictures of it and",
    "start": "3346690",
    "end": "3353840"
  },
  {
    "text": "we've got just a couple minutes left if there's any questions that folks have",
    "start": "3353840",
    "end": "3359680"
  },
  {
    "text": "not thank you very much",
    "start": "3360100",
    "end": "3363850"
  },
  {
    "text": "[Music]",
    "start": "3371490",
    "end": "3374650"
  }
]