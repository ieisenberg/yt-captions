[
  {
    "start": "0",
    "end": "190000"
  },
  {
    "text": "okay so running atomic transactions across multiple data models",
    "start": "2000",
    "end": "7040"
  },
  {
    "text": "um and a few marks uh and even an exclamation mark so",
    "start": "7040",
    "end": "14920"
  },
  {
    "text": "um this even possible well uh my name is laura scroll i'm a",
    "start": "14920",
    "end": "20160"
  },
  {
    "text": "viewer information uh but now i work as a developer advocate at redis labs",
    "start": "20160",
    "end": "26080"
  },
  {
    "text": "um you can find me on twitter at croloris i also blog at christoph.it i all i'm also the host",
    "start": "26080",
    "end": "32880"
  },
  {
    "text": "of a show on twitch uh called zig show which is a show for a for the community",
    "start": "32880",
    "end": "40719"
  },
  {
    "text": "of a programming language called zig it's a new upcoming language it's pretty interesting um",
    "start": "40719",
    "end": "46399"
  },
  {
    "text": "but let's move forward with our talk so a couple of lies about uh my company",
    "start": "46399",
    "end": "52640"
  },
  {
    "text": "so i work for redis labs as you can imagine redis labs is the company behind",
    "start": "52640",
    "end": "57760"
  },
  {
    "text": "and redis is an open source in memory uh database i.e it's famous for being fast",
    "start": "57760",
    "end": "64080"
  },
  {
    "text": "it's used for caching uh historically has been used for caching a lot but also",
    "start": "64080",
    "end": "69280"
  },
  {
    "text": "a few new use casings are starting to pop up and that's the reason of of uh my presentation here um i assume",
    "start": "69280",
    "end": "76560"
  },
  {
    "text": "that you probably if you are here you probably know all about radius a little bit uh but it's fine even if you just know",
    "start": "76560",
    "end": "83360"
  },
  {
    "text": "the name and you only used it for caching so i'll give you a a little bit of a introduction to it",
    "start": "83360",
    "end": "91119"
  },
  {
    "text": "during the presentation so um ah another interesting thing is that um",
    "start": "91119",
    "end": "97439"
  },
  {
    "text": "the company redis labs the open source development already but we also have uh so how how do we make money uh we",
    "start": "97439",
    "end": "104960"
  },
  {
    "text": "celebrate this enterprise which is a it's open source radius plus um some",
    "start": "104960",
    "end": "110720"
  },
  {
    "text": "extensions on top that uh help enterprises make the most of redis",
    "start": "110720",
    "end": "115759"
  },
  {
    "text": "and um we recently announced a partnership with microsoft and asia so now if you",
    "start": "115759",
    "end": "123680"
  },
  {
    "text": "um you soon you will have the possibility of having reddish enterprise uh managed for",
    "start": "123680",
    "end": "129520"
  },
  {
    "text": "you by redis labs through uh asia so unified billing and everything else and",
    "start": "129520",
    "end": "135440"
  },
  {
    "text": "it will show up as one of the high tiers of azure cash for redis so that's pretty exciting",
    "start": "135440",
    "end": "142560"
  },
  {
    "text": "stuff um also if you are not an azure user but uh if you uh use uh google cloud",
    "start": "142560",
    "end": "150720"
  },
  {
    "text": "we are also partnered with google uh on the sidebar of your google cloud",
    "start": "150720",
    "end": "157440"
  },
  {
    "text": "console you will find at the bottom among other partners so there's also already some apps so you will",
    "start": "157440",
    "end": "162720"
  },
  {
    "text": "be able to also there spin up uh redis enterprise instances managed by redis labs and unified billing and",
    "start": "162720",
    "end": "169680"
  },
  {
    "text": "everything else also you can see on the right side that there's a qr code i will show throughout",
    "start": "169680",
    "end": "175519"
  },
  {
    "text": "the talk a few um a few links that may be of interest",
    "start": "175519",
    "end": "180720"
  },
  {
    "text": "to you so um if you think it might be useful keep your phone out in case uh you want to",
    "start": "180720",
    "end": "187120"
  },
  {
    "text": "take a picture of the of the qr code um so yeah where was i what were you talking about",
    "start": "187120",
    "end": "194560"
  },
  {
    "start": "190000",
    "end": "317000"
  },
  {
    "text": "atomic transactions across multiple data models which kind of sounds like a fairy tale right you",
    "start": "194560",
    "end": "200720"
  },
  {
    "text": "are used to thinking of different data models as different databases different services different",
    "start": "200720",
    "end": "206799"
  },
  {
    "text": "universes almost and running out of interactions across all this stuff doesn't seem really to be possible but",
    "start": "206799",
    "end": "213760"
  },
  {
    "text": "uh i'm here to say that uh no it's true all of it uh you can do it uh otherwise uh this",
    "start": "213760",
    "end": "220879"
  },
  {
    "text": "will be a very boring presentation but um let's dive into into the story",
    "start": "220879",
    "end": "226319"
  },
  {
    "text": "then so uh in 2009 in sicily um radius was created",
    "start": "226319",
    "end": "234159"
  },
  {
    "text": "yeah this is the one animation i have on the whole presentation so don't worry we got past that um",
    "start": "234159",
    "end": "241200"
  },
  {
    "text": "this is an interview by matt from aws uh who interviewed uh salvatore sanfilippo also",
    "start": "241200",
    "end": "247280"
  },
  {
    "text": "known as anti-rats and the creator of freddies and it's a it's not too long of an interview i",
    "start": "247280",
    "end": "253040"
  },
  {
    "text": "think it's very nice because it's it's this short and it gives you a good overview of where redis comes from so the idea is",
    "start": "253040",
    "end": "259359"
  },
  {
    "text": "that salvatore wasn't a database guy at the time he wasn't somebody that worked for oracle so that's why",
    "start": "259359",
    "end": "266880"
  },
  {
    "text": "when he created radice he broke away from many of the assumptions that uh were present in",
    "start": "266880",
    "end": "273680"
  },
  {
    "text": "in the database uh scene at the time nowadays it sounds less radical because now we have no sequel and we",
    "start": "273680",
    "end": "281360"
  },
  {
    "text": "have a uh now non-sql databases have become",
    "start": "281360",
    "end": "286720"
  },
  {
    "text": "a thing uh another time that was very much anti as anti-database establishment as",
    "start": "286720",
    "end": "292880"
  },
  {
    "text": "you could get i guess uh but that said even though solato wasn't a database guy",
    "start": "292880",
    "end": "298080"
  },
  {
    "text": "um it's not like he was just one uh random entrepreneur kid or something",
    "start": "298080",
    "end": "303840"
  },
  {
    "text": "um he already had a bit of a track record uh in networking and hacking and",
    "start": "303840",
    "end": "309199"
  },
  {
    "text": "security but this is all stuff covered by the article i do recommend you check it out i think it's a pretty",
    "start": "309199",
    "end": "315199"
  },
  {
    "text": "interesting read um so i mentioned that i will give you an introduction to redis",
    "start": "315199",
    "end": "320720"
  },
  {
    "start": "317000",
    "end": "550000"
  },
  {
    "text": "so let's do it i'm again i won't be able to cover everything of course uh in this",
    "start": "320720",
    "end": "327039"
  },
  {
    "text": "presentation but it's just to give you an understanding if you always use thread is only as a cache through a library and never",
    "start": "327039",
    "end": "333520"
  },
  {
    "text": "had the opportunity of like uh playing with it so uh if you open ready cli which is the program that i",
    "start": "333520",
    "end": "339840"
  },
  {
    "text": "have open here i'm going to open it again",
    "start": "339840",
    "end": "344000"
  },
  {
    "text": "cli i have a running uh variety server inside docker so i can",
    "start": "345600",
    "end": "351600"
  },
  {
    "text": "do ping and i get a reply phone back this is just a way to know that we are actually connected to a uh",
    "start": "351600",
    "end": "358319"
  },
  {
    "text": "running server and so how what's the data model in red is well how do you interface with redis",
    "start": "358319",
    "end": "363840"
  },
  {
    "text": "well that is you the base building block of the language",
    "start": "363840",
    "end": "369280"
  },
  {
    "text": "that you use to speak with reddish are commands so commands usually start with something",
    "start": "369280",
    "end": "374560"
  },
  {
    "text": "that you want to do for example set and then you have a key for example that could be i don't know",
    "start": "374560",
    "end": "380240"
  },
  {
    "text": "my key and then you set it to a value hello so now uh i set",
    "start": "380240",
    "end": "386960"
  },
  {
    "text": "uh i set the value to my key and i get okay back if i can also get the key back",
    "start": "386960",
    "end": "393680"
  },
  {
    "text": "and i get hello back now that's easy um and also kind of boring i mean uh simple swing keys are kind of",
    "start": "393680",
    "end": "399520"
  },
  {
    "text": "boring but this is the nice thing about red is already it's usually presented as a key value store but whenever you talk about",
    "start": "399520",
    "end": "406080"
  },
  {
    "text": "keyboard stores except of radis key value stores usually have keys that are strings",
    "start": "406080",
    "end": "411520"
  },
  {
    "text": "use a string to specify the name and then the value is always a string but we read this that's not the case we we have those",
    "start": "411520",
    "end": "417120"
  },
  {
    "text": "but there's also you can also have a uh a different type of key for example a",
    "start": "417120",
    "end": "424319"
  },
  {
    "text": "set and you can use set add to create a key my set that contains uh",
    "start": "424319",
    "end": "431199"
  },
  {
    "text": "sorry that contains uh i don't know abcd a b d c well uh and then you can do",
    "start": "431199",
    "end": "439280"
  },
  {
    "text": "s is member my set uh b did we so this is another command",
    "start": "439280",
    "end": "445360"
  },
  {
    "text": "that is able to ask a set key if uh one element is part of it and the answer is",
    "start": "445360",
    "end": "450479"
  },
  {
    "text": "one what if i try to ask if x is part of the set i get zero which is false um so you can see that this is not a",
    "start": "450479",
    "end": "457840"
  },
  {
    "text": "string anymore this is a set data type and the interesting thing is that this is not just syntax sugar",
    "start": "457840",
    "end": "463199"
  },
  {
    "text": "this is a like the key behind the scenes is implemented as a hashmap while this is just a byte array this is",
    "start": "463199",
    "end": "470080"
  },
  {
    "text": "a full-fledged hashmap there's also sort of sets um there's lists",
    "start": "470080",
    "end": "475520"
  },
  {
    "text": "and lists are doubly linked lists and um and a few other data types so",
    "start": "475520",
    "end": "481759"
  },
  {
    "text": "uh and for each of these data type you have a set of commands that can manipulate it so if you go to redis.io for example",
    "start": "481759",
    "end": "488000"
  },
  {
    "text": "you can see in the command list that there's all the different things that you can do with reddish so you say oh i'm interested in",
    "start": "488000",
    "end": "494560"
  },
  {
    "text": "um let's take a look at sorted sets or actually um yeah let's take a look at sort of sets so sources are like sets except that",
    "start": "494560",
    "end": "501199"
  },
  {
    "text": "they keep ordering and you can give a number to each element that a score",
    "start": "501199",
    "end": "506319"
  },
  {
    "text": "that corresponds to that ordering and these are used for uh uh video game leaderboards and stuff",
    "start": "506319",
    "end": "512080"
  },
  {
    "text": "uh then there's uh let's go back to sets so as ad that's the command that we use allows to add a member or more",
    "start": "512080",
    "end": "518399"
  },
  {
    "text": "reset then you could do set difference uh intersection get all the members of a",
    "start": "518399",
    "end": "525279"
  },
  {
    "text": "given set uh move a member from one set to another and it's nice because that's an atomic",
    "start": "525279",
    "end": "531680"
  },
  {
    "text": "operation that allows you to move a member from one side to another and so there are all these commands that do",
    "start": "531680",
    "end": "538399"
  },
  {
    "text": "very specific things and um and that's how you interface with redis generally speaking",
    "start": "538399",
    "end": "546480"
  },
  {
    "text": "um so what i showed you is the command interface you've seen that the",
    "start": "546839",
    "end": "553360"
  },
  {
    "start": "550000",
    "end": "738000"
  },
  {
    "text": "general structure is you have a command you have a key you can specify more than key for example uh",
    "start": "553360",
    "end": "558399"
  },
  {
    "text": "s move uh takes two keys as input source this set and destination set but",
    "start": "558399",
    "end": "564080"
  },
  {
    "text": "um in the simple case it's just let's say just one key and then a bunch of arguments so",
    "start": "564080",
    "end": "569120"
  },
  {
    "text": "i'm going to show you now a few other commands and um i what i want to show you",
    "start": "569120",
    "end": "575279"
  },
  {
    "text": "is how this base syntax this base way of interfacing with redis can also",
    "start": "575279",
    "end": "583760"
  },
  {
    "text": "properly implement and express very wildly different ways of",
    "start": "583760",
    "end": "590080"
  },
  {
    "text": "interacting with the database which is why i'm then which is the",
    "start": "590080",
    "end": "596080"
  },
  {
    "text": "one of the starting points from which then redis is able to allow to um implement a real multi-modal",
    "start": "596080",
    "end": "603279"
  },
  {
    "text": "database but we'll get there so uh this is one command uh ts.range and ts stands for time series",
    "start": "603279",
    "end": "610959"
  },
  {
    "text": "and this would be a command that allows you given a the the text in red is the key name",
    "start": "610959",
    "end": "618320"
  },
  {
    "text": "this command allows you to get a range from a time series key and plus and",
    "start": "618320",
    "end": "624720"
  },
  {
    "text": "minus are start and end so this means basically everything that's inside the key but this could be",
    "start": "624720",
    "end": "630320"
  },
  {
    "text": "but you could replace minus and plus with like timestamps and then you would be able to restrict a little bit uh the query and",
    "start": "630320",
    "end": "637279"
  },
  {
    "text": "then on that you uh we want to run an aggregation uh we want to run an average aggregation",
    "start": "637279",
    "end": "643760"
  },
  {
    "text": "using 500 millisecond big windows um and here we have express in a",
    "start": "643760",
    "end": "652640"
  },
  {
    "text": "i think a reasonably clear way what we want to do on a time series",
    "start": "652640",
    "end": "658320"
  },
  {
    "text": "key of course this doesn't have a time series type radius set sort of sets a few others but there",
    "start": "658320",
    "end": "663760"
  },
  {
    "text": "is no time series type now let's take a look at this other um query",
    "start": "663760",
    "end": "669040"
  },
  {
    "text": "um graph the query then you have a key that should contain your uh your graph and on",
    "start": "669040",
    "end": "675839"
  },
  {
    "text": "top of that we run if what you're seeing between the quotes that's a full-fledged um cipher query and",
    "start": "675839",
    "end": "683760"
  },
  {
    "text": "that's the same query that you would run on neo4j or another graph database um",
    "start": "683760",
    "end": "690480"
  },
  {
    "text": "and it works because the whole q even though that's a language nested inside the query language already",
    "start": "690480",
    "end": "695920"
  },
  {
    "text": "the query language of reddit is not particularly complex so all we have to do is bundle everything as a single string",
    "start": "695920",
    "end": "702320"
  },
  {
    "text": "but then we are able to run graph graph queries on a key if we had a key",
    "start": "702320",
    "end": "708959"
  },
  {
    "text": "of type graph full text search this",
    "start": "708959",
    "end": "715040"
  },
  {
    "text": "is a way of running a full text uh search query on top of uh of um full text index",
    "start": "715040",
    "end": "723040"
  },
  {
    "text": "um we can see the syntax is not the same as the one from elasticsearch but again uh it does kind of make sense",
    "start": "723040",
    "end": "730399"
  },
  {
    "text": "right it seems fairly clear that you and at least the level of the syntax uh of the of the command syntax all this",
    "start": "730399",
    "end": "737600"
  },
  {
    "text": "stuff is doable now um when you think about uh sql or even",
    "start": "737600",
    "end": "745680"
  },
  {
    "start": "738000",
    "end": "898000"
  },
  {
    "text": "mongodb you're not usually just running simple commands you're not just doing",
    "start": "745680",
    "end": "751600"
  },
  {
    "text": "one thing with your command usually what you're doing is stringing a bunch of operations together",
    "start": "751600",
    "end": "756639"
  },
  {
    "text": "uh you start by select then you apply some changes then you do a join then you at the end",
    "start": "756639",
    "end": "762320"
  },
  {
    "text": "apply a filtering where um constraint and you do all this kind of stuff so how do you do that in redis",
    "start": "762320",
    "end": "769040"
  },
  {
    "text": "and and what i just described this sequel but you also kind of do the same in mongodb in mongodb it's less",
    "start": "769040",
    "end": "775200"
  },
  {
    "text": "it's more unstructured what you do given the fact that uh objects have uh nested properties you",
    "start": "775200",
    "end": "781200"
  },
  {
    "text": "have lease arrays and stuff like that so how do you do this something like this the answer is that in redis you don't",
    "start": "781200",
    "end": "788399"
  },
  {
    "text": "really do that this is super weird for people that are not used to this for people that",
    "start": "788399",
    "end": "794399"
  },
  {
    "text": "have come from more traditional backgrounds uh but i assure you i i understand your pain on one end but",
    "start": "794399",
    "end": "801040"
  },
  {
    "text": "on the other um you don't really need to do that the idea behind",
    "start": "801040",
    "end": "807360"
  },
  {
    "text": "reddit is that you do not store everything as a normalized set of tables",
    "start": "807360",
    "end": "813360"
  },
  {
    "text": "and every single time that you want to have a response to a request you compute from scratch the response by",
    "start": "813360",
    "end": "819920"
  },
  {
    "text": "grabbing stuff from different places potentially making the computation",
    "start": "819920",
    "end": "826000"
  },
  {
    "text": "faster more efficient with indices no with redis your data is sort of denormalized in reddits",
    "start": "826000",
    "end": "833600"
  },
  {
    "text": "and uh it's not only denormalized because you heard the story of the normalized data also from mongodb but",
    "start": "833600",
    "end": "838800"
  },
  {
    "text": "from but also mongodb you still want to do this stuff the difference is that mostly it's only giving you one data type the",
    "start": "838800",
    "end": "845040"
  },
  {
    "text": "document data type and yes you have properties you can have numbers you can have dates you can have",
    "start": "845040",
    "end": "850639"
  },
  {
    "text": "arrays which is nice and nest an object and aced in arrays sure but that gives you a little bit",
    "start": "850639",
    "end": "856880"
  },
  {
    "text": "more freedom in terms of structuring your data but this is not the this is like a few",
    "start": "856880",
    "end": "863040"
  },
  {
    "text": "steps below what you get with redis because we read this you get sets that are hash maps you get um lists that are linked lists there are",
    "start": "863040",
    "end": "870880"
  },
  {
    "text": "social sets are implemented as trees etc etc so the data types are much more specialized in redis",
    "start": "870880",
    "end": "876800"
  },
  {
    "text": "and um and you have many more and each of these data types gives you a lot of commands so long story short is that in general",
    "start": "876800",
    "end": "883920"
  },
  {
    "text": "in redis you should you end up always only running one or two commands and then maybe",
    "start": "883920",
    "end": "890160"
  },
  {
    "text": "applying some changes on the client side you don't really do a lot of work inside reddish",
    "start": "890160",
    "end": "895680"
  },
  {
    "text": "this is a general idea so most of the time there are enough commands so that you",
    "start": "895680",
    "end": "901040"
  },
  {
    "start": "898000",
    "end": "995000"
  },
  {
    "text": "can make do with one command but but this doesn't cover 100 percent of the cases for the few cases where you",
    "start": "901040",
    "end": "906720"
  },
  {
    "text": "really need to do something more complex inside right is you can use lua and lua is a programming language it's a",
    "start": "906720",
    "end": "912639"
  },
  {
    "text": "full-fledged programming language so you send a javascript redis and redis then runs the law script and the law",
    "start": "912639",
    "end": "917920"
  },
  {
    "text": "script is able to run the same commands that you will be able to run from the client but then it's also able to you know write the reply do branching",
    "start": "917920",
    "end": "925199"
  },
  {
    "text": "while loops it's a full-fledged programming language so in writing you have let's say two levels the the normal level which are single",
    "start": "925199",
    "end": "931360"
  },
  {
    "text": "commands then we skip the intermediate um compose a query and run it every time",
    "start": "931360",
    "end": "939279"
  },
  {
    "text": "level and then we jump directly into full-fledged programmability with lua",
    "start": "939279",
    "end": "945040"
  },
  {
    "text": "that said some commands if some commands require some degree of like for example i showed you the",
    "start": "945040",
    "end": "951360"
  },
  {
    "text": "example of a full text search query but for full text it makes sense to run some uh optionally some aggregations for",
    "start": "951360",
    "end": "958320"
  },
  {
    "text": "faceted search for example that's all fine because that's supported by the command itself",
    "start": "958320",
    "end": "963360"
  },
  {
    "text": "it's the full text search command that gives you the option has support for arguments that",
    "start": "963360",
    "end": "969040"
  },
  {
    "text": "specify an optional faceted aggregation for example um it's not something that is global within",
    "start": "969040",
    "end": "976639"
  },
  {
    "text": "radius now the forced simplicity of com of the commands interface is very",
    "start": "976639",
    "end": "984480"
  },
  {
    "text": "nice because allows you to then implement some kinds of extensions in redis that you would",
    "start": "984480",
    "end": "990160"
  },
  {
    "text": "not be able to uh have otherwise and those are radius models so um the things that the commands that",
    "start": "990160",
    "end": "997040"
  },
  {
    "text": "i showed you before yes they are not data types present in radius but they are things that you can",
    "start": "997040",
    "end": "1002160"
  },
  {
    "text": "do already by loading a custom redis module so the way this works is that redis has an",
    "start": "1002160",
    "end": "1008000"
  },
  {
    "text": "internal c api that allows you to load dynamically modules written in c",
    "start": "1008000",
    "end": "1014160"
  },
  {
    "text": "so these are basically c sharp shared libraries and your module has a way of registering",
    "start": "1014160",
    "end": "1020800"
  },
  {
    "text": "new commands inside redis and also registering new data types and reducing new data types is very very",
    "start": "1020800",
    "end": "1027520"
  },
  {
    "text": "important because because again if you are implementing a",
    "start": "1027520",
    "end": "1033438"
  },
  {
    "text": "search module of course your search model has to be efficient as i would say generally speaking but also",
    "start": "1033439",
    "end": "1040000"
  },
  {
    "text": "especially since you are writing a search model for radish and in red is the expectation is for stuff to be fast generally speaking",
    "start": "1040000",
    "end": "1046798"
  },
  {
    "text": "so um for example the full text search module is called ready search and",
    "start": "1046799",
    "end": "1053280"
  },
  {
    "text": "that that module implements a an inverted index data type there's also",
    "start": "1053280",
    "end": "1058480"
  },
  {
    "text": "radius graph which is the graph module that allows you to create graph query graph keys and um",
    "start": "1058480",
    "end": "1066160"
  },
  {
    "text": "and the the data type implemented by redis graph are sparse matrices and it then graph is",
    "start": "1066160",
    "end": "1074320"
  },
  {
    "text": "able to use a library called graph plus to run uh matrix operations on compressed",
    "start": "1074320",
    "end": "1082000"
  },
  {
    "text": "sparse matrices and that's pretty cool because parts matrices are way way faster than uh the other",
    "start": "1082000",
    "end": "1089520"
  },
  {
    "text": "representation of for graphs adjacency lists and that's something that many",
    "start": "1089520",
    "end": "1095679"
  },
  {
    "text": "graph databases do and so modules they are not really just an excuse to add more stuff on top of",
    "start": "1095679",
    "end": "1101760"
  },
  {
    "text": "radius but they are really they really make sense in in the ecosystem because uh you are able to bring in your data",
    "start": "1101760",
    "end": "1108240"
  },
  {
    "text": "type and and to be fully precise bringing in your data types means really",
    "start": "1108240",
    "end": "1114799"
  },
  {
    "text": "that you can bring in your own c structs you can use pointers uh there are other databases that give you",
    "start": "1114799",
    "end": "1121200"
  },
  {
    "text": "a form of multimodal interface i'm thinking for example of foundation db which is a great project i",
    "start": "1121200",
    "end": "1128080"
  },
  {
    "text": "i love that project for many reasons but uh one gigantic difference is that",
    "start": "1128080",
    "end": "1134320"
  },
  {
    "text": "foundation db has what they call layers and they have a layer that gives you a mongodb interface another layer that",
    "start": "1134320",
    "end": "1140160"
  },
  {
    "text": "gives you a graph database interface et cetera et cetera but at the end of the day everything in",
    "start": "1140160",
    "end": "1145360"
  },
  {
    "text": "foundation db is implemented on top of simple byte arrays so",
    "start": "1145360",
    "end": "1150640"
  },
  {
    "text": "um you won't be able to have the performance you will have the interface the the",
    "start": "1150640",
    "end": "1156240"
  },
  {
    "text": "syntax sugar level i guess of a graph database maybe but you won't be able to have the performance",
    "start": "1156240",
    "end": "1161840"
  },
  {
    "text": "characteristics of a very optimized graph database while here with red is",
    "start": "1161840",
    "end": "1167440"
  },
  {
    "text": "you that's part of the main philosophy already is you never get only the interface you get the interface but also",
    "start": "1167440",
    "end": "1174640"
  },
  {
    "text": "the performance and asymptotic complexity characteristics of a given data type um so let me quickly run through all the",
    "start": "1174640",
    "end": "1181120"
  },
  {
    "text": "different data types so there's also probabilistic which is the redis bloom module which implements",
    "start": "1181120",
    "end": "1186480"
  },
  {
    "text": "bloom filters and cocoa filters and a few more types document allows you to store json data",
    "start": "1186480",
    "end": "1192640"
  },
  {
    "text": "in radis not as a string but as a tree of nodes with pointers which makes",
    "start": "1192640",
    "end": "1199760"
  },
  {
    "text": "updating and manipulating the data more efficiently will be if you were just to toss a serialized json file",
    "start": "1199760",
    "end": "1207520"
  },
  {
    "text": "object inside the string key there's a module that allows you to run tensorflow models and",
    "start": "1207520",
    "end": "1213360"
  },
  {
    "text": "also onyx um there's another module called time series um well already same series",
    "start": "1213360",
    "end": "1218640"
  },
  {
    "text": "that um that we saw an example command earlier allows you to store time series in redis and uh they're very compact",
    "start": "1218640",
    "end": "1226159"
  },
  {
    "text": "and they and they give you the aggregate uh uh the opportunity of aggregating data",
    "start": "1226159",
    "end": "1231600"
  },
  {
    "text": "down sampling etc etc so each of these is interesting in its own right that's what i'm trying to say if you go",
    "start": "1231600",
    "end": "1237039"
  },
  {
    "text": "to latest apps dot com slash modules you will find the ones that are uh maintained by uh radius labs",
    "start": "1237039",
    "end": "1243280"
  },
  {
    "text": "so the ones that you can get also you know commercial support for while if you go to radius.ioslash",
    "start": "1243280",
    "end": "1248960"
  },
  {
    "text": "modules you will find uh also the ones written by the community uh there's also one written for me there from me there um",
    "start": "1248960",
    "end": "1257360"
  },
  {
    "text": "so i showed you actually before we go into transactions and lua let me show",
    "start": "1257360",
    "end": "1262880"
  },
  {
    "start": "1258000",
    "end": "1381000"
  },
  {
    "text": "you um uh one example running for real i mean i showed you the slides but uh i think",
    "start": "1262880",
    "end": "1269039"
  },
  {
    "text": "it's interesting to so to see this stuff actually run so let's go to redis graph",
    "start": "1269039",
    "end": "1274159"
  },
  {
    "text": "dot io um here you will find you know instruction",
    "start": "1274159",
    "end": "1279679"
  },
  {
    "text": "on how to uh download the module how to make it run there's a few examples so i'm copying",
    "start": "1279679",
    "end": "1285919"
  },
  {
    "text": "one example copy and i'm running it in uh in my console and",
    "start": "1285919",
    "end": "1293840"
  },
  {
    "text": "the command succeeds and we get labels added node is added properties set um bunch of information cool um",
    "start": "1293840",
    "end": "1301200"
  },
  {
    "text": "now there's a program called uh red is inside which uh i think it's localized 881",
    "start": "1301200",
    "end": "1308960"
  },
  {
    "text": "right i closed it up by a mistake so if you open this inside that's a graphical tool to",
    "start": "1308960",
    "end": "1317280"
  },
  {
    "text": "take a look at what's in your database and etc there's my set uh my key these are the two keys",
    "start": "1317280",
    "end": "1323039"
  },
  {
    "text": "that i created earlier right and then also the moto g key but the model gp key is of different types so",
    "start": "1323039",
    "end": "1328640"
  },
  {
    "text": "we can go to the redis graph interface take a look at it and if i do match this box takes a cipher query so",
    "start": "1328640",
    "end": "1336240"
  },
  {
    "text": "if i do match x return x",
    "start": "1336240",
    "end": "1341840"
  },
  {
    "text": "then i can see all the all the stuff that i added",
    "start": "1343440",
    "end": "1348480"
  },
  {
    "text": "uh with my last command here i added valentino rossi for yamaha danny pedrosa android wizioso",
    "start": "1348480",
    "end": "1356080"
  },
  {
    "text": "and you can see that it works there you have it so um and this is really fast because",
    "start": "1356080",
    "end": "1363520"
  },
  {
    "text": "it's based on on sparse matrices so uh this stuff is real that's why that's what i'm trying to say so let's",
    "start": "1363520",
    "end": "1369600"
  },
  {
    "text": "talk about transactions i i i mentioned uh not only multi models but atomic transactions across different models",
    "start": "1369600",
    "end": "1375679"
  },
  {
    "text": "right so we are finally getting to the core the meat of this presentation",
    "start": "1375679",
    "end": "1380720"
  },
  {
    "text": "so uh all right first of all um transactions in lua are not super",
    "start": "1380720",
    "end": "1388640"
  },
  {
    "start": "1381000",
    "end": "1423000"
  },
  {
    "text": "trivial to really know how to use them you won't get out of this presentation knowing how",
    "start": "1388640",
    "end": "1394320"
  },
  {
    "text": "to use them in detail i will give you a very high level overview but if you want to learn more so if",
    "start": "1394320",
    "end": "1400240"
  },
  {
    "text": "you're intrigued and want to learn more you can go to radiusconf.com uh we had we held an online version over",
    "start": "1400240",
    "end": "1406240"
  },
  {
    "text": "this conf a couple of weeks ago and there's still training up there um i specifically run the training for",
    "start": "1406240",
    "end": "1413840"
  },
  {
    "text": "transactions in lua so you will go there and you will be able to learn a bit more about this stuff so",
    "start": "1413840",
    "end": "1418960"
  },
  {
    "text": "it's going to be up there i think for a couple more weeks um if you're interested so what you're",
    "start": "1418960",
    "end": "1424799"
  },
  {
    "start": "1423000",
    "end": "1634000"
  },
  {
    "text": "seeing now so up until now we saw individual commands and commands get always sent",
    "start": "1424799",
    "end": "1430240"
  },
  {
    "text": "one by one but um here what i'm showing you is two particular commands multi",
    "start": "1430240",
    "end": "1435760"
  },
  {
    "text": "and exec or multi i don't know i usually pronounce it multi but uh multi is the command that starts a",
    "start": "1435760",
    "end": "1441600"
  },
  {
    "text": "transaction exact is a command that commits the transaction so here what we are doing is basically say",
    "start": "1441600",
    "end": "1447919"
  },
  {
    "text": "start a transaction then run these three commands and then and then commit it uh and these three",
    "start": "1447919",
    "end": "1453840"
  },
  {
    "text": "commands as you can see they from the point of view of radius they are just commands",
    "start": "1453840",
    "end": "1459520"
  },
  {
    "text": "it already is at a high level to make this work transaction doesn't really care about what the",
    "start": "1459520",
    "end": "1465120"
  },
  {
    "text": "commands do so the first command is adding a value to a set the second command is incrementing",
    "start": "1465120",
    "end": "1470480"
  },
  {
    "text": "atomically a key well it would be an atomic increment even if you weren't wrapped in a transaction but um",
    "start": "1470480",
    "end": "1477279"
  },
  {
    "text": "um but it's also in this case so then and then the third command",
    "start": "1477279",
    "end": "1483039"
  },
  {
    "text": "is uh just running a query on a graph and i just left dot dot instead of",
    "start": "1483039",
    "end": "1488320"
  },
  {
    "text": "writing any cipher query but you could see how this would be three updates that basically",
    "start": "1488320",
    "end": "1493440"
  },
  {
    "text": "you want to say uh okay marquez won a championship so we are adding points",
    "start": "1493440",
    "end": "1498880"
  },
  {
    "text": "to him setting him as adding him to the set that contains all the champions",
    "start": "1498880",
    "end": "1504640"
  },
  {
    "text": "and um and then i'm going to update my motogp knowledge graph and this",
    "start": "1504640",
    "end": "1512000"
  },
  {
    "text": "being wrapped in a transaction has all-or-nothing semantics so other concurrent clients won't be",
    "start": "1512000",
    "end": "1517200"
  },
  {
    "text": "able to see intermediate states you know everything that you would expect for transactions you get it um and here you can see how this can at",
    "start": "1517200",
    "end": "1525679"
  },
  {
    "text": "the query language level you can see how well command language level you can see how these can very",
    "start": "1525679",
    "end": "1532880"
  },
  {
    "text": "easily interoperate with custom types custom behavior custom models the same also is",
    "start": "1532880",
    "end": "1539120"
  },
  {
    "text": "with lua so with lua you can do even a little bit more what you're seeing here",
    "start": "1539120",
    "end": "1544640"
  },
  {
    "text": "is more or less an equivalent lua script that does the same thing that we saw in the previous slide so we are calling",
    "start": "1544640",
    "end": "1550960"
  },
  {
    "text": "so the first two lines is just me assigning uh arguments that we are given as input",
    "start": "1550960",
    "end": "1556880"
  },
  {
    "text": "to the lua script uh to local variables so that the script becomes a little bit more",
    "start": "1556880",
    "end": "1562080"
  },
  {
    "text": "readable uh but then i'm calling as add and then i'm doing the increment of well",
    "start": "1562080",
    "end": "1567679"
  },
  {
    "text": "i'm incrementing the points but here just to show you that you can also use if and",
    "start": "1567679",
    "end": "1573120"
  },
  {
    "text": "and other control flow stuff from lua i'm showing you that if the points that",
    "start": "1573120",
    "end": "1578640"
  },
  {
    "text": "we give as argument to the script to increment are equal to zero then we run the incur",
    "start": "1578640",
    "end": "1586159"
  },
  {
    "text": "by command otherwise we don't run the integer by command but we just get the current value",
    "start": "1586159",
    "end": "1591919"
  },
  {
    "text": "so that we can store in a local variable total points uh how many points we have and then we",
    "start": "1591919",
    "end": "1598320"
  },
  {
    "text": "call the graph query and then we return total points because one thing that blue scripts can do is not just apply side",
    "start": "1598320",
    "end": "1604159"
  },
  {
    "text": "effects to radis but they can also return compute and return values to you so there are situations where you might",
    "start": "1604159",
    "end": "1612000"
  },
  {
    "text": "prefer a dual script other situations where you might prefer uh a radius transaction there are",
    "start": "1612000",
    "end": "1617200"
  },
  {
    "text": "differences between the two but at a high level both give you the all or nothing semantics",
    "start": "1617200",
    "end": "1622480"
  },
  {
    "text": "and these are run a in a full serializable installation isolation level every time",
    "start": "1622480",
    "end": "1629120"
  },
  {
    "text": "and um yeah and they're really nice to use um now the next question that i usually",
    "start": "1629120",
    "end": "1636240"
  },
  {
    "start": "1634000",
    "end": "1919000"
  },
  {
    "text": "get is well okay so you can run transactions that's nice but radius is in memory so it's not",
    "start": "1636240",
    "end": "1641279"
  },
  {
    "text": "persisted um so why you i can't really do anything with",
    "start": "1641279",
    "end": "1646320"
  },
  {
    "text": "this stuff at the end of the day um well the answer is no there is persistence in radis",
    "start": "1646320",
    "end": "1652640"
  },
  {
    "text": "and uh and you can enable it very easily and it works like it works in any other",
    "start": "1652640",
    "end": "1657679"
  },
  {
    "text": "database just like um every flower is a rose by another",
    "start": "1657679",
    "end": "1663279"
  },
  {
    "text": "name every persistence model is f sync by another name um so the way it works in redis is that",
    "start": "1663279",
    "end": "1669520"
  },
  {
    "text": "you have rdb files there are full database snapshots that get they can um at a frequency that",
    "start": "1669520",
    "end": "1675760"
  },
  {
    "text": "you can configure so i don't know every minute every 30 seconds you can configure it",
    "start": "1675760",
    "end": "1681520"
  },
  {
    "text": "but so what about between one snapshot and the next because snapshots are a little bit more",
    "start": "1681520",
    "end": "1688080"
  },
  {
    "text": "expensive a little bit expensive to create so you can't create a new rdb snapshot every time",
    "start": "1688080",
    "end": "1695520"
  },
  {
    "text": "you have to run one command and this is where the aof file comes into play af stands for append only file and",
    "start": "1695520",
    "end": "1701600"
  },
  {
    "text": "that's the commit log of radius so whenever you run a command it gets immediately appended to the append only file",
    "start": "1701600",
    "end": "1707919"
  },
  {
    "text": "uh when you sh when you shut down radius radius will and put it back up during the boot sequence",
    "start": "1707919",
    "end": "1713760"
  },
  {
    "text": "radius will reload everything that's inside the rdb file and then reapply in sequence",
    "start": "1713760",
    "end": "1719760"
  },
  {
    "text": "all the commands stored in the iof file so this basically brings everything to the most current state",
    "start": "1719760",
    "end": "1725520"
  },
  {
    "text": "and the if file gets streamed every time you take a new snapshot because some of the stuff",
    "start": "1725520",
    "end": "1730640"
  },
  {
    "text": "uh stored in your file becomes not useful anymore right because the changes were already reflected in in the more recent snapshot so that this",
    "start": "1730640",
    "end": "1738080"
  },
  {
    "text": "is how everything works and this is more or less what you get from other databases it's uh it's the same type of tweaks that you can do for",
    "start": "1738080",
    "end": "1744000"
  },
  {
    "text": "example with postgres um one interesting thing about persistence and",
    "start": "1744000",
    "end": "1750240"
  },
  {
    "text": "transactions is that transactions store in the other file also start and end of a transaction which",
    "start": "1750240",
    "end": "1757600"
  },
  {
    "text": "means that if for some unfortunate reason somebody pulls the plug",
    "start": "1757600",
    "end": "1762640"
  },
  {
    "text": "from your machine running radius at the wrong time and only part of the transaction gets",
    "start": "1762640",
    "end": "1768960"
  },
  {
    "text": "flashed to disk radius will see that there is a transaction that is opened but never",
    "start": "1768960",
    "end": "1774960"
  },
  {
    "text": "closed and the arrow file ends before the transaction is closed and at that point right you will notice",
    "start": "1774960",
    "end": "1781279"
  },
  {
    "text": "this and simply discard the entire transaction so it will not apply a partial transaction it's annoying because you",
    "start": "1781279",
    "end": "1788080"
  },
  {
    "text": "are losing a little bit of state but that's inevitable i mean when stuff like this happens you",
    "start": "1788080",
    "end": "1794480"
  },
  {
    "text": "you always lose something regardless of which technology you're using because uh some commands were still in the",
    "start": "1794480",
    "end": "1800559"
  },
  {
    "text": "client buffer some other commands were halfway through the network and so",
    "start": "1800559",
    "end": "1806399"
  },
  {
    "text": "the important thing is that you don't restart with a completely inconsistent state and that's",
    "start": "1806399",
    "end": "1812880"
  },
  {
    "text": "why you really want to drop partial transactions instead of applying them partially",
    "start": "1812880",
    "end": "1818799"
  },
  {
    "text": "um the same mechanism also works with replication so replicas when are",
    "start": "1818799",
    "end": "1825360"
  },
  {
    "text": "when they are seeing applying changes from reading changes from a master they also will not apply partial",
    "start": "1825360",
    "end": "1832720"
  },
  {
    "text": "transactions in the case uh that they are replicating the master but master dies uh halfway through uh but that said",
    "start": "1832720",
    "end": "1840000"
  },
  {
    "text": "uh radius is a high availability system so replicas uh synchronize a single well",
    "start": "1840000",
    "end": "1846559"
  },
  {
    "text": "replicate asynchronously from the master so you could have that um if uh you have a lot of rights to the",
    "start": "1846559",
    "end": "1854320"
  },
  {
    "text": "master and then the master dies and a replica gets promoted to master the replica might not be up to date to the latest",
    "start": "1854320",
    "end": "1861039"
  },
  {
    "text": "state in the master but that said the replica will never apply",
    "start": "1861039",
    "end": "1866960"
  },
  {
    "text": "partial transactions so it's a long story short it's a reasonable uh",
    "start": "1866960",
    "end": "1873279"
  },
  {
    "text": "aha system not acp one uh there is a",
    "start": "1873279",
    "end": "1878640"
  },
  {
    "text": "there's a module or a modem for it is called radius raft which is uh which was announced as rediscov which",
    "start": "1878640",
    "end": "1884960"
  },
  {
    "text": "is a module that uses all the blast cluster bus",
    "start": "1884960",
    "end": "1890159"
  },
  {
    "text": "communication mechanisms uh to implement raft on the operators and if you use uh uh radius raft uh well in the future",
    "start": "1890159",
    "end": "1897760"
  },
  {
    "text": "once it gets published and and uh gets out of alfa state um then um you will be able to have uh",
    "start": "1897760",
    "end": "1905760"
  },
  {
    "text": "better guarantees like of course at the expense of performance so this i think it's a full overview of",
    "start": "1905760",
    "end": "1913600"
  },
  {
    "text": "uh of what you can do almost full overview of what you can do with transactions there's one less important detail",
    "start": "1913600",
    "end": "1919039"
  },
  {
    "start": "1919000",
    "end": "2122000"
  },
  {
    "text": "which you cover in this article um transactions in redis do not support",
    "start": "1919039",
    "end": "1924159"
  },
  {
    "text": "rollbacks uh and if you've always used sql this might be surprising scary maybe",
    "start": "1924159",
    "end": "1931840"
  },
  {
    "text": "disappointing but i guarantee you you don't need rollbacks with redis",
    "start": "1931840",
    "end": "1937840"
  },
  {
    "text": "that's what i try to argue in this article so to give you a very extremely compressed",
    "start": "1937840",
    "end": "1945600"
  },
  {
    "text": "um overview and summary of what i wrote in the article um drawbacks are great idea they're very",
    "start": "1945600",
    "end": "1952720"
  },
  {
    "text": "useful they are very nice in a sql ecosystem not necessarily only sql but in",
    "start": "1952720",
    "end": "1958720"
  },
  {
    "text": "ecosystems that that work with similar assumptions to the ones behind sql databases so big",
    "start": "1958720",
    "end": "1966240"
  },
  {
    "text": "projects everything is multi-threaded but rollbacks are not free rollbacks take memory",
    "start": "1966240",
    "end": "1973440"
  },
  {
    "text": "right to be able to roll back you need to have to keep the old copy of stuff and the new copy and then",
    "start": "1973440",
    "end": "1979840"
  },
  {
    "text": "you only merge the two once you commit there's no other way of doing that and radius is much more performance",
    "start": "1979840",
    "end": "1987039"
  },
  {
    "text": "conscious than other databases and also radice is used very often under",
    "start": "1987039",
    "end": "1992159"
  },
  {
    "text": "levels of pressure that other databases just cannot sustain so redis does not implement a rollback",
    "start": "1992159",
    "end": "1998480"
  },
  {
    "text": "mechanism um and if you've always programmed using a sql for example then you might feel a",
    "start": "1998480",
    "end": "2005679"
  },
  {
    "text": "little bit lost because you're used to the idea of i open a transaction i lock a few rows i get some others think about it on the",
    "start": "2005679",
    "end": "2013039"
  },
  {
    "text": "client so i do apply some changes then maybe i try to do something that violates a constraint and the database rolls back",
    "start": "2013039",
    "end": "2019760"
  },
  {
    "text": "the transaction for me or i decided to roll back because of application level constraints",
    "start": "2019760",
    "end": "2025600"
  },
  {
    "text": "um yeah fine that makes total sense uh in ids you would not write a transaction that",
    "start": "2025600",
    "end": "2031279"
  },
  {
    "text": "way the the full story the like the long story short is that with reddish you have to use a different",
    "start": "2031279",
    "end": "2036320"
  },
  {
    "text": "transaction style and um in part is also because redis is not a",
    "start": "2036320",
    "end": "2041840"
  },
  {
    "text": "sql database uh i said that already before but uh your gigantic store procedure that runs",
    "start": "2041840",
    "end": "2049040"
  },
  {
    "text": "across i don't know tens of data tables and um",
    "start": "2049040",
    "end": "2055358"
  },
  {
    "text": "does a lot of very complex stuff uh you wouldn't do it the same way in redis",
    "start": "2055359",
    "end": "2060878"
  },
  {
    "text": "radius is they normalize everything tends to be like the data models and to be simplified by design before you put them",
    "start": "2060879",
    "end": "2068960"
  },
  {
    "text": "into freddy's um so long story short not having rollbacks doesn't uh doesn't uh preclude",
    "start": "2068960",
    "end": "2076800"
  },
  {
    "text": "expressivity so you know the radius transaction are as expressive as sql ones",
    "start": "2076800",
    "end": "2082079"
  },
  {
    "text": "uh yes sometimes having rollbacks would be nice but they are not free and uh every sequel every reasonable",
    "start": "2082079",
    "end": "2088158"
  },
  {
    "text": "sequence transaction can be translated to a an equivalent function equivalent already transaction",
    "start": "2088159",
    "end": "2095040"
  },
  {
    "text": "if your query is super complicated there are a lot of steps then it might not be practical to do so which is fine but the",
    "start": "2095040",
    "end": "2102400"
  },
  {
    "text": "idea is that the general design principles behind writing so if you're using red is the correct way you you should not be trying to do that",
    "start": "2102400",
    "end": "2108480"
  },
  {
    "text": "anyway and um yeah that's so that's a very",
    "start": "2108480",
    "end": "2113599"
  },
  {
    "text": "important characteristic of multi-exact transactions and also dual scripts so i encourage you",
    "start": "2113599",
    "end": "2119200"
  },
  {
    "text": "to read this article uh if you want to learn more uh now",
    "start": "2119200",
    "end": "2124240"
  },
  {
    "text": "one data model that i that is part of red is that they didn't cover for up until now already streams um",
    "start": "2124240",
    "end": "2132560"
  },
  {
    "text": "let me see how i'm doing with time so um yeah we are",
    "start": "2132560",
    "end": "2140320"
  },
  {
    "text": "almost sorry",
    "start": "2140320",
    "end": "2145520"
  },
  {
    "text": "okay i'm going fine with time um so i won't be able to introduce all these things in full but again there is training for these",
    "start": "2145520",
    "end": "2152800"
  },
  {
    "text": "streams at redisconf uh there's also documentation on redis radius.io and actually i",
    "start": "2152800",
    "end": "2159359"
  },
  {
    "text": "i will show you a little bit about release streams so there's uh there's support for ready",
    "start": "2159359",
    "end": "2165280"
  },
  {
    "text": "streams in redis inside and you can think of like streams as a",
    "start": "2165280",
    "end": "2172320"
  },
  {
    "text": "data type actually let me just bring up the definition from the slides so already streams are an event log data structure",
    "start": "2172320",
    "end": "2177680"
  },
  {
    "text": "in redis and they support pub sub fanout and consumer groups you can think of them as a lightweight",
    "start": "2177680",
    "end": "2183359"
  },
  {
    "text": "kafka basically instead of radius if you go to redis dot io",
    "start": "2183359",
    "end": "2190160"
  },
  {
    "text": "and commands you will find there's also streams and here you can see all the commands that you can use and um yeah they they give you",
    "start": "2190160",
    "end": "2198560"
  },
  {
    "text": "basically what you get also from kafka um but more lightweight no zookeeper no",
    "start": "2198560",
    "end": "2204960"
  },
  {
    "text": "java no garbage collection stuff like that um and if you go to the documentation you",
    "start": "2204960",
    "end": "2210000"
  },
  {
    "text": "can also find [Music] introduction to streams where is it",
    "start": "2210000",
    "end": "2217440"
  },
  {
    "text": "[Music] introduction to ready streams here it is",
    "start": "2217460",
    "end": "2222960"
  },
  {
    "text": "so you can find any intro to streams that explains to you how to use streams the basic commands",
    "start": "2222960",
    "end": "2229920"
  },
  {
    "text": "the way id works ideas work uh how to get data and how to use consumer",
    "start": "2229920",
    "end": "2235280"
  },
  {
    "text": "groups to parallelize uh computation across multiple consumers that's another very important feature if you",
    "start": "2235280",
    "end": "2242640"
  },
  {
    "text": "want a super quick and dirty so if you've used the redis pub sub in the past and you",
    "start": "2242640",
    "end": "2248079"
  },
  {
    "text": "always said oh man i wish i didn't lose messages whenever i disconnected from pubsub",
    "start": "2248079",
    "end": "2254000"
  },
  {
    "text": "then ready streams are an answer to also to that question um and what's what's interesting about",
    "start": "2254000",
    "end": "2261760"
  },
  {
    "text": "ready streams is that by being a commit log basically uh data type well that can be",
    "start": "2261760",
    "end": "2268800"
  },
  {
    "text": "used as a commit log of data type inside radius if you pair streams with",
    "start": "2268800",
    "end": "2274480"
  },
  {
    "text": "any other data types what you get is basically um a very nice way of implementing",
    "start": "2274480",
    "end": "2281760"
  },
  {
    "text": "sagas of implementing many uh distribute transaction transaction ish",
    "start": "2281760",
    "end": "2287920"
  },
  {
    "text": "patterns uh that are end up very really um annoying to implement otherwise so not",
    "start": "2287920",
    "end": "2294079"
  },
  {
    "text": "only you can have like real atomic consistency",
    "start": "2294079",
    "end": "2299760"
  },
  {
    "text": "like atomic transactions using multi-exec but you can also",
    "start": "2299760",
    "end": "2304720"
  },
  {
    "text": "implement on top of radius a different way of transactions that are",
    "start": "2305200",
    "end": "2311200"
  },
  {
    "text": "implemented as multi-step operations like what basically sagas are and the way you do this",
    "start": "2311200",
    "end": "2316640"
  },
  {
    "text": "is for example you can see here an example where i'm saying well if i if somebody put inside the stream a",
    "start": "2316640",
    "end": "2323760"
  },
  {
    "text": "an event and to process that event i need to write something inside a graph",
    "start": "2323760",
    "end": "2330880"
  },
  {
    "text": "database and maybe you also need to do something else all changes that you need to apply to process and",
    "start": "2330880",
    "end": "2337119"
  },
  {
    "text": "an element of a ready stream uh you wrap everything inside the transaction inside the multi-transaction run the",
    "start": "2337119",
    "end": "2344000"
  },
  {
    "text": "three four five whatever commands you need to run to apply the changes which in my case maybe",
    "start": "2344000",
    "end": "2349119"
  },
  {
    "text": "i have a moto gp event that uh asks me to do some change in my knowledge graph and something else",
    "start": "2349119",
    "end": "2355040"
  },
  {
    "text": "and then atomically i also uh mark the entry as completed using x",
    "start": "2355040",
    "end": "2363680"
  },
  {
    "text": "exactly is a command used by consumer groups to say uh to notify to the stream uh system",
    "start": "2363680",
    "end": "2370800"
  },
  {
    "text": "uh that a task was completed that a an entry inside the stream was properly processed and",
    "start": "2370800",
    "end": "2377200"
  },
  {
    "text": "and that way you can build very very advanced architecture and it's very simple to",
    "start": "2377200",
    "end": "2383040"
  },
  {
    "text": "deploy redis it's very simple to debug you have a lot it's easy to inspect what's the state doing this stuff",
    "start": "2383040",
    "end": "2388800"
  },
  {
    "text": "with other systems i mentioned kafka but i i'll stop there but kafka is not it's",
    "start": "2388800",
    "end": "2394240"
  },
  {
    "text": "not the only one system that is not always the easiest to operate and and have introspection inside",
    "start": "2394240",
    "end": "2400480"
  },
  {
    "text": "uh which is all this stuff is very easy and all these models they also make use of",
    "start": "2400480",
    "end": "2406079"
  },
  {
    "text": "all the um all the tools that the iris ecosystem gives you uh i mentioned",
    "start": "2406079",
    "end": "2411839"
  },
  {
    "text": "transactions but they also work with clustering and replication and and more so um it's very",
    "start": "2411839",
    "end": "2418720"
  },
  {
    "text": "nice i think once you get a little bit of understanding of the ecosystem and it's uh to be able to have this much",
    "start": "2418720",
    "end": "2424960"
  },
  {
    "text": "power at your fingertips um i think i just want to say one last thing uh so",
    "start": "2424960",
    "end": "2431839"
  },
  {
    "text": "let's say that you are intrigued by what they presented to you a little bit and you say well how do i",
    "start": "2431839",
    "end": "2438240"
  },
  {
    "text": "convince other people to try this crazy thing how do i convince them to use redis as something",
    "start": "2438240",
    "end": "2443440"
  },
  {
    "text": "other than a cash um because of course it's understandable that maybe managers",
    "start": "2443440",
    "end": "2449760"
  },
  {
    "text": "and other stakeholders don't want to jump into a",
    "start": "2449760",
    "end": "2455119"
  },
  {
    "text": "new technology well the answer is that um i think if your company understands",
    "start": "2455119",
    "end": "2462880"
  },
  {
    "start": "2457000",
    "end": "2610000"
  },
  {
    "text": "uh what sqrs does try to position redis as a good store",
    "start": "2462880",
    "end": "2469280"
  },
  {
    "text": "for storing sequence views for everybody else so who doesn't know what security is uh",
    "start": "2469280",
    "end": "2476240"
  },
  {
    "text": "sql instance for command query responsibility segregation but um the",
    "start": "2476240",
    "end": "2481599"
  },
  {
    "text": "idea behind sqrs is basically that uh instead of whenever there is a view",
    "start": "2481599",
    "end": "2487119"
  },
  {
    "text": "that uh that like if you have a sql database and you have a view that requires you to",
    "start": "2487119",
    "end": "2492240"
  },
  {
    "text": "show a summary of your data you would maybe uh write a complex sql query that",
    "start": "2492240",
    "end": "2497839"
  },
  {
    "text": "aggregates everything and produces in sql the summary of the data and then you run this every time and returning to the",
    "start": "2497839",
    "end": "2504000"
  },
  {
    "text": "client in when you are playing secures you think about it the other way you think about the",
    "start": "2504000",
    "end": "2509839"
  },
  {
    "text": "queries that you have that want to see a particular view of your data and you prepare those",
    "start": "2509839",
    "end": "2515680"
  },
  {
    "text": "and you update them every time you make a change to your main data so that summary view would basically go",
    "start": "2515680",
    "end": "2522720"
  },
  {
    "text": "inside uh or another database and just fetch the already prepared answer that gets",
    "start": "2522720",
    "end": "2529680"
  },
  {
    "text": "updated uh every time your your source of truth gets updated and um so that data is",
    "start": "2529680",
    "end": "2537280"
  },
  {
    "text": "basically that you can lose you don't if you lose your sqrs views you can just rebuild them from the",
    "start": "2537280",
    "end": "2542960"
  },
  {
    "text": "original data and there are many good properties uh there are a few things that you gain",
    "start": "2542960",
    "end": "2549599"
  },
  {
    "text": "by doing things this way so a sqrs is just a way of giving a name to this practice",
    "start": "2549599",
    "end": "2556160"
  },
  {
    "text": "in a particular way of of developing applications um so uh and that's why i read this",
    "start": "2556160",
    "end": "2563119"
  },
  {
    "text": "and that's what redis is the best at because the idea is that your data should be already be mostly in the shape that you're going to",
    "start": "2563119",
    "end": "2570160"
  },
  {
    "text": "need it uh and um so i think that if you read about it uh read a little bit about",
    "start": "2570160",
    "end": "2576800"
  },
  {
    "text": "secrets you will you will see you will be given a good understanding not only of uh or from a computer",
    "start": "2576800",
    "end": "2583839"
  },
  {
    "text": "science point of view of uh how things could work in an efficient way but also you will get",
    "start": "2583839",
    "end": "2589200"
  },
  {
    "text": "an understanding of how you can position this in your company and how it can make sense",
    "start": "2589200",
    "end": "2594319"
  },
  {
    "text": "in your development process basically um that's i think the end",
    "start": "2594319",
    "end": "2602480"
  },
  {
    "text": "of my story so i guess if anybody has questions i'm happy to answer them",
    "start": "2602480",
    "end": "2612000"
  }
]