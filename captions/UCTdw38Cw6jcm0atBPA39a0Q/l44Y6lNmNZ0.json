[
  {
    "text": "I got a very um a very unmissable thumbs up from the tech folks I think it's",
    "start": "5080",
    "end": "11440"
  },
  {
    "text": "time um is it time you ready are you ready yeah good who who here is",
    "start": "11440",
    "end": "21000"
  },
  {
    "text": "Sleepy okay everyone who's sleepy you got to come to the front row",
    "start": "21000",
    "end": "26920"
  },
  {
    "text": "um let's talk a bit about C if you don't know me uh Matt Tuson and I",
    "start": "26920",
    "end": "34360"
  },
  {
    "text": "am the lead designer of this programming language called C I've been for a while not all the time though",
    "start": "34360",
    "end": "41160"
  },
  {
    "text": "um and um and I got myself a problem because um we released a new version of",
    "start": "41160",
    "end": "48600"
  },
  {
    "text": "C in November and usually what happens it sort of got into a little bit of a routine is that whenever the build",
    "start": "48600",
    "end": "56120"
  },
  {
    "text": "conference rolls around that's when I start giving talks about what will be the next version of C because we will",
    "start": "56120",
    "end": "63000"
  },
  {
    "text": "have bits that I can show and you know it's like just a good time and then we ship it in November and I'm like I don't",
    "start": "63000",
    "end": "70560"
  },
  {
    "text": "want to talk about something that we shipped you know that's old hat but here I am in February and I",
    "start": "70560",
    "end": "78759"
  },
  {
    "text": "hadn't thought about that like so what do you talk about between when you actually have something to show and um or between when you've Shi something and",
    "start": "78759",
    "end": "85640"
  },
  {
    "text": "you have something new to show so I have nothing new to show but I also don't want to just do slides all the time time so I'll just write code anyway I hope",
    "start": "85640",
    "end": "91560"
  },
  {
    "text": "that's okay um it also means that this is the first time that I'll be presenting on this um what's going into",
    "start": "91560",
    "end": "99119"
  },
  {
    "text": "what we're thinking about for C 13 and Beyond um so I'll just be experimenting with how to how to present the ideas and",
    "start": "99119",
    "end": "106840"
  },
  {
    "text": "so on and some it'll some of it will work and some of it won't um and I'd",
    "start": "106840",
    "end": "112399"
  },
  {
    "text": "actually love for you to tell me after if something was too confusing or it didn't work um because then I can do",
    "start": "112399",
    "end": "118680"
  },
  {
    "text": "better next time um if you have questions um ask them",
    "start": "118680",
    "end": "124880"
  },
  {
    "text": "along the way and I'll try to notice or otherwise shout because there'll be so",
    "start": "124880",
    "end": "130039"
  },
  {
    "text": "many different topics that we'll go into and you know code that will exist only temporarily like you know those those",
    "start": "130039",
    "end": "137120"
  },
  {
    "text": "quasi particles that burst into uh existence all over the universe all the time um and by the time you ask a",
    "start": "137120",
    "end": "144200"
  },
  {
    "text": "question we can't go back and look at it or try things out so um I may run out of time uh so then I'm I'm gonna stop",
    "start": "144200",
    "end": "152360"
  },
  {
    "text": "taking questions or something but we we'll see right so um actually you don't",
    "start": "152360",
    "end": "157879"
  },
  {
    "text": "want to look at this web page here but um I don't have anything better to show",
    "start": "157879",
    "end": "163360"
  },
  {
    "text": "you so you'll have to look at it a little longer um actually we can um let's start let's look at a different",
    "start": "163360",
    "end": "168760"
  },
  {
    "text": "web page so I I want to kind of I I when I wrote the abstract it kind of I kind",
    "start": "168760",
    "end": "175159"
  },
  {
    "text": "of got carried away a little and I was like let's talk about C's place in the universe forever and",
    "start": "175159",
    "end": "181760"
  },
  {
    "text": "um um so let me do that for a bit um and",
    "start": "181760",
    "end": "188400"
  },
  {
    "text": "um part of uh you know part of the story is C's",
    "start": "188400",
    "end": "193680"
  },
  {
    "text": "been around for a long time and if you really care a lot about that long time and how it changed over the years come",
    "start": "193680",
    "end": "199680"
  },
  {
    "text": "to my talk tomorrow we'll look back and we'll look at all the all the ways that we stole and plundered from the functional programming Paradigm and um",
    "start": "199680",
    "end": "206599"
  },
  {
    "text": "took things into C and pasted uh that should be fun but there'll be nothing new",
    "start": "206599",
    "end": "212519"
  },
  {
    "text": "um how we think about C though um has remained in a sense pretty constant",
    "start": "212519",
    "end": "219000"
  },
  {
    "text": "there are some things that have definitely changed we started out being all about Windows you know we were the windows alternative or response to other",
    "start": "219000",
    "end": "227439"
  },
  {
    "text": "things that that didn't didn't land so well on Windows or uh Microsoft couldn't",
    "start": "227439",
    "end": "234319"
  },
  {
    "text": "control them as much as we wanted to or whatever um and and since then of course um",
    "start": "234319",
    "end": "240920"
  },
  {
    "text": "hopefully most of you know um TSH is crossplatform it's open source and um",
    "start": "240920",
    "end": "247720"
  },
  {
    "text": "it's like most other programming languages now in that sense right you can just use it wherever you want for",
    "start": "247720",
    "end": "253959"
  },
  {
    "text": "whatever you want and we think of ourselves as aggressively um",
    "start": "253959",
    "end": "259320"
  },
  {
    "text": "multi-purpose it's a language that gets used for many many things we hadn't even imagined like so many games are written",
    "start": "259320",
    "end": "265560"
  },
  {
    "text": "in C for instance and that's all because someone else made a c implementation many many years ago and people copied",
    "start": "265560",
    "end": "272639"
  },
  {
    "text": "that and modified it and so on and so C went to places that we hadn't even imagined and so as language designers we",
    "start": "272639",
    "end": "278759"
  },
  {
    "text": "feel a responsibility to to remain true to all of that very varied usage um and",
    "start": "278759",
    "end": "287240"
  },
  {
    "text": "um and part of it also uh something that so this grew pretty quickly or over time",
    "start": "287240",
    "end": "294520"
  },
  {
    "text": "uh from C being very very specific to certain scenarios um one of the things",
    "start": "294520",
    "end": "300080"
  },
  {
    "text": "we did from the very beginning though was compared to many of the other programming languages that we look like",
    "start": "300080",
    "end": "306759"
  },
  {
    "text": "or started out looking like um C if you think about levels of abstraction like",
    "start": "306759",
    "end": "313479"
  },
  {
    "text": "very high level languages very sort of declarative or um you know very far from",
    "start": "313479",
    "end": "318880"
  },
  {
    "text": "the metal to very close to the metal you know different languages kind of occupy different spans on that and it's it's a",
    "start": "318880",
    "end": "326240"
  },
  {
    "text": "simplification of course right but one of the things that c did from the beginning was to try to occupy a pretty",
    "start": "326240",
    "end": "332759"
  },
  {
    "text": "broad span of abstraction levels right so you can you can be as abstract as any",
    "start": "332759",
    "end": "338319"
  },
  {
    "text": "other object or programming language or or you know many cases now functional programming language and and at the same",
    "start": "338319",
    "end": "344440"
  },
  {
    "text": "time if I do this can you see my belly I'm get a little worried here",
    "start": "344440",
    "end": "349639"
  },
  {
    "text": "um um and at the same time from the very beginning it was important that c",
    "start": "349639",
    "end": "356319"
  },
  {
    "text": "reached quite far down and was able to like do c interrupt up and stuff like that and and was pretty efficent had you",
    "start": "356319",
    "end": "363039"
  },
  {
    "text": "know things built in from the beginning that you could write pretty efficient code so um those was unsafe code from",
    "start": "363039",
    "end": "368759"
  },
  {
    "text": "the beginning you could do pointer arithmetic and all that kind of stuff we tried to move away from that now but by",
    "start": "368759",
    "end": "374520"
  },
  {
    "text": "replacing it with something that's as safe but also as lowlevel and as sufficient um and",
    "start": "374520",
    "end": "382360"
  },
  {
    "text": "um uh you know we had value types as well as object types so you know all",
    "start": "382360",
    "end": "387919"
  },
  {
    "text": "these things where we thought about the low level and and efficiency right from the start we try to keep that as well",
    "start": "387919",
    "end": "393479"
  },
  {
    "text": "keep that broad uh level of abstraction view of the language not everyone will",
    "start": "393479",
    "end": "398599"
  },
  {
    "text": "be uh occupying that full range in you in the way you code most people will",
    "start": "398599",
    "end": "403639"
  },
  {
    "text": "probably be in the in the top half or something of the language but because the bottom half exists you have much",
    "start": "403639",
    "end": "410599"
  },
  {
    "text": "more efficient Frameworks and um and you have games and you have other things that rely on that lower half while",
    "start": "410599",
    "end": "417000"
  },
  {
    "text": "staying within the same language so that's kind of like that's kind of where we part of how we",
    "start": "417000",
    "end": "424120"
  },
  {
    "text": "think of ourselves in the universe and then there's just sort of like the philosophy around what's the",
    "start": "424120",
    "end": "431039"
  },
  {
    "text": "language for like what are we up to with C what is the purpose here",
    "start": "431039",
    "end": "437319"
  },
  {
    "text": "and um that's kind of hard to to quantify or",
    "start": "437319",
    "end": "442720"
  },
  {
    "text": "put put words to but I think we've always been we we've always leaned into",
    "start": "442720",
    "end": "448000"
  },
  {
    "text": "C should be delightful right you shouldn't have",
    "start": "448000",
    "end": "454599"
  },
  {
    "text": "negative emotions when you use C it's bad for you it's you unhealthy we",
    "start": "454599",
    "end": "460160"
  },
  {
    "text": "should for for health reasons health and safety CP should be delightful whatever",
    "start": "460160",
    "end": "465240"
  },
  {
    "text": "that means and that so there's a range of negative emotions you shouldn't have you shouldn't um you shouldn't be",
    "start": "465240",
    "end": "470479"
  },
  {
    "text": "annoyed you shouldn't be frustrated um if you keep stubbing your toe on something then you come and tell",
    "start": "470479",
    "end": "476520"
  },
  {
    "text": "us and we fix it in the next release right that's that's sort of like um how we think of it you should you",
    "start": "476520",
    "end": "483280"
  },
  {
    "text": "should if you're surprised you should mostly be pleasantly surprised you shouldn't be confused it shouldn't be",
    "start": "483280",
    "end": "488319"
  },
  {
    "text": "hard to do things or hard to find out how to do things um you shouldn't be envious right you shouldn't wish you",
    "start": "488319",
    "end": "494199"
  },
  {
    "text": "were in that other language essentially in in a nutshell we we want to keep as",
    "start": "494199",
    "end": "499879"
  },
  {
    "text": "as long as we can we want to keep c a good choice for your next",
    "start": "499879",
    "end": "506159"
  },
  {
    "text": "project so that's why we keep designing C",
    "start": "506159",
    "end": "511680"
  },
  {
    "text": "because of course that's a moving Target it's compared to what happens in in the",
    "start": "511680",
    "end": "517240"
  },
  {
    "text": "industry at large like what are the other programming languages doing that is really cool and we can steal it and do it too what is uh what new domains or",
    "start": "517240",
    "end": "525000"
  },
  {
    "text": "new scenarios are happening what are the big the big turns um that we need to",
    "start": "525000",
    "end": "531839"
  },
  {
    "text": "have a language level kind of reaction to and try to try to keep up with that all the time we have a little this is a",
    "start": "531839",
    "end": "538839"
  },
  {
    "text": "just the C dark side it's great for figuring out all kinds of things including what's new in C when there's",
    "start": "538839",
    "end": "544240"
  },
  {
    "text": "something new there's nothing in here yet um about the next C it also has like",
    "start": "544240",
    "end": "550120"
  },
  {
    "text": "this is a little it's stodgy and weird maybe but there the C language strategy and that's sort of our attempt to have",
    "start": "550120",
    "end": "556120"
  },
  {
    "text": "just one paragraph a big paragraph of like what is our what is our mission",
    "start": "556120",
    "end": "562000"
  },
  {
    "text": "statement or what is our approach to C how do we make choices about C that's",
    "start": "562000",
    "end": "567399"
  },
  {
    "text": "written in a way that's intended to be kind of to be something we can stick to for decades although we do we do Tinker with",
    "start": "567399",
    "end": "574480"
  },
  {
    "text": "it here and there right so we we want to evolve you know we will innovate eally so we we you know given the choice we",
    "start": "574480",
    "end": "581760"
  },
  {
    "text": "will we will try to do something rather than than um back away from it um but",
    "start": "581760",
    "end": "587920"
  },
  {
    "text": "try to stay within the spirit of the language try to make it not kind of flake apart um try to make improvements",
    "start": "587920",
    "end": "595399"
  },
  {
    "text": "that benefit most all of most developers either directly indirectly right um um",
    "start": "595399",
    "end": "602240"
  },
  {
    "text": "High commitment to backwards compatibility as well so we don't break your code all the time we'll come back to that later",
    "start": "602240",
    "end": "608760"
  },
  {
    "text": "um um and also um and this is you know something that's happened gradually and",
    "start": "608760",
    "end": "614800"
  },
  {
    "text": "more recently um leaning into empowering the broader Community to play a role",
    "start": "614800",
    "end": "619839"
  },
  {
    "text": "right so um we are now open source the the implementation of C the rosling",
    "start": "619839",
    "end": "627079"
  },
  {
    "text": "compiler is an open source project and lots of people that don't work for Microsoft contribute to it big and small",
    "start": "627079",
    "end": "634320"
  },
  {
    "text": "to the implementation of c um and the the language design itself has its own",
    "start": "634320",
    "end": "639560"
  },
  {
    "text": "repo here that is also um being contributed to and this is this is where we work like the design process takes",
    "start": "639560",
    "end": "646360"
  },
  {
    "text": "place in this repo so um so we can get day-to-day interaction and feedback with",
    "start": "646360",
    "end": "653480"
  },
  {
    "text": "people who use it and other people have great ideas who happen to not work for us and so on um so that's something that",
    "start": "653480",
    "end": "660560"
  },
  {
    "text": "we really leaned into and continue to grow another way of course is for me to be here today and so anything any",
    "start": "660560",
    "end": "666800"
  },
  {
    "text": "thoughts you have you know if you the way I get paid for a talk like this is the feedback that I get that I can take",
    "start": "666800",
    "end": "673800"
  },
  {
    "text": "take back home so stop me in the hallway and uh and tell me what you think about",
    "start": "673800",
    "end": "679680"
  },
  {
    "text": "anything you all right I think that's enough for the the kind of General overview stuff",
    "start": "679680",
    "end": "687160"
  },
  {
    "text": "unless you have questions in this in this regard happy to answer",
    "start": "687160",
    "end": "692360"
  },
  {
    "text": "no it's extremely calming that you are knitting in the front row and",
    "start": "692360",
    "end": "697880"
  },
  {
    "text": "like yeah it it helps me Focus too that you're doing it which is good because I",
    "start": "697880",
    "end": "703320"
  },
  {
    "text": "I I can't knit to save my lives all right um let's let's go and um let's go",
    "start": "703320",
    "end": "709360"
  },
  {
    "text": "and talk about sort of more the immediate future then so what I'm going to do now is to say okay so this is sort",
    "start": "709360",
    "end": "714519"
  },
  {
    "text": "of the general landscape we want to Delight you okay how will we Delight you next time and um let's go and I I've got",
    "start": "714519",
    "end": "721560"
  },
  {
    "text": "several visual Studios open here um let's do that one um and we can sort of",
    "start": "721560",
    "end": "726680"
  },
  {
    "text": "reach back I'm I'm extremely happy that I didn't decide to do a c 12 talk because I don't know how many of you",
    "start": "726680",
    "end": "733000"
  },
  {
    "text": "were in in um in Damian and fowers talk yesterday they kind of rent through half of C 12 all the good stuff so I was like",
    "start": "733000",
    "end": "740440"
  },
  {
    "text": "dutched a bullet there um what would have been a hard act to follow but so let's take but some of the things that",
    "start": "740440",
    "end": "746399"
  },
  {
    "text": "we started on are we we we niggle with and and 12 aren't done yet and so we can",
    "start": "746399",
    "end": "751480"
  },
  {
    "text": "start like quickly reviewing collection Expressions is where I'm going to start um and kind of see where are uh where",
    "start": "751480",
    "end": "758040"
  },
  {
    "text": "are the next places we could go from there okay so we'll start with collection expressions and we'll look at other things that are less there yet and",
    "start": "758040",
    "end": "765720"
  },
  {
    "text": "and go crazy towards the end if we if we have time so",
    "start": "765720",
    "end": "772639"
  },
  {
    "text": "um collection Expressions how many okay let's do Let's Get You activated you",
    "start": "772639",
    "end": "778120"
  },
  {
    "text": "probably had coffee and cake and they're kind of Waring in your belly right now the Cake's trying to put you to sleep",
    "start": "778120",
    "end": "783480"
  },
  {
    "text": "the coffee is losing the battle keeping you awake so I want to I want to help um I want to be on coffee's side right now",
    "start": "783480",
    "end": "790360"
  },
  {
    "text": "um how many people in here feel reasonably familiar with C in some way shape or form how many",
    "start": "790360",
    "end": "798959"
  },
  {
    "text": "don't okay well I guess I have a I I",
    "start": "798959",
    "end": "804040"
  },
  {
    "text": "hope a friendly audience here um so",
    "start": "804040",
    "end": "809839"
  },
  {
    "text": "how many people have used C 12 yet okay C 11 or higher you can keep",
    "start": "810279",
    "end": "818399"
  },
  {
    "text": "your hands up if you're 12 10 or higher don't know all these numbers it confuses",
    "start": "818399",
    "end": "824320"
  },
  {
    "text": "me every year there's probably a lot of those as well it happens to me like I used to be able to I I can't remember",
    "start": "824320",
    "end": "829440"
  },
  {
    "text": "when we put what in and frequently can't remember which version we're shipping right",
    "start": "829440",
    "end": "835040"
  },
  {
    "text": "now um collection Expressions there like The Runaway hit of C2 a few other",
    "start": "835040",
    "end": "843160"
  },
  {
    "text": "reasonably big things that I'm proud of but collection Expressions man that's that's a cool one right so",
    "start": "843160",
    "end": "849800"
  },
  {
    "text": "problem one of those things one of those things you stub your toe on and that's kind of a nuisance maybe you don't even",
    "start": "849800",
    "end": "855440"
  },
  {
    "text": "realize it it's just a drag on you in C until recently is you know okay I'm I'm",
    "start": "855440",
    "end": "861440"
  },
  {
    "text": "I'm using arrays there's a certain way of creating an array from some elements it's decently nice syntax oh and",
    "start": "861440",
    "end": "868079"
  },
  {
    "text": "somebody clever told me that I I should probably instead of creating an empt array I should reuse the one that that",
    "start": "868079",
    "end": "874120"
  },
  {
    "text": "is available to me and then I don't get less allocation great okay but actually",
    "start": "874120",
    "end": "879480"
  },
  {
    "text": "I didn't I now I want to I want to use a list of list of grade here instead well",
    "start": "879480",
    "end": "885199"
  },
  {
    "text": "of course those ways of creating don't work for lists but despair not there's another way of doing",
    "start": "885199",
    "end": "892320"
  },
  {
    "text": "that uh you can just you can just um create a new list object and use",
    "start": "892320",
    "end": "898600"
  },
  {
    "text": "collection initializes instead and here you there's not really anything to do just make a new one and okay I'm good",
    "start": "898600",
    "end": "904360"
  },
  {
    "text": "again but now okay I've heard about these like span things they're really cool oh but I can't create them like",
    "start": "904360",
    "end": "912000"
  },
  {
    "text": "that I have to go and figure it out for each one of them go to documentation and look at examples so collection",
    "start": "912000",
    "end": "919240"
  },
  {
    "text": "expressions are a Syntax for that was weird what I I have",
    "start": "919240",
    "end": "925839"
  },
  {
    "text": "the latest I just upgraded to as you never should to the internal build and things things work subtly different so",
    "start": "925839",
    "end": "932560"
  },
  {
    "text": "you'll see me do this weird thing again and again see look it ah never mind okay um it's actually a",
    "start": "932560",
    "end": "941279"
  },
  {
    "text": "cool feature I just need to do it to to type differently now so now I have this unified syntax we're creating any",
    "start": "941279",
    "end": "947360"
  },
  {
    "text": "collection in the world how do I know that it's any collection in the I don't",
    "start": "947360",
    "end": "952959"
  },
  {
    "text": "I don't actually know there'll be collections that that I can't but there won't be very many of them because we have like the compiler Goes to Town it",
    "start": "952959",
    "end": "961120"
  },
  {
    "text": "sees this it's like okay what's the target type okay it's span well let me look at my list of different strategies",
    "start": "961120",
    "end": "967839"
  },
  {
    "text": "for creating collections there's a bunch of types I know about specifically span and readon span are on that list so I",
    "start": "967839",
    "end": "973839"
  },
  {
    "text": "just know how to create one most efficiently um uh if I um if I don't",
    "start": "973839",
    "end": "981120"
  },
  {
    "text": "have it on my on that short list then let me go and look if the if they have",
    "start": "981120",
    "end": "986560"
  },
  {
    "text": "this new attribute that tells me that they can can be created and that attribute points to a method that will",
    "start": "986560",
    "end": "991880"
  },
  {
    "text": "be the most efficient way of creating them and then I'll call that right so anyone can plug into that using this new",
    "start": "991880",
    "end": "997079"
  },
  {
    "text": "attribute and then they can they can tell me what's the most efficient way of creating it and the compiler would use that or you know uh failing everything",
    "start": "997079",
    "end": "1005800"
  },
  {
    "text": "else fall back to what collection initializes did before and just create it and call add with every",
    "start": "1005800",
    "end": "1012319"
  },
  {
    "text": "element and it'll know about there there's a bunch of like copy from and",
    "start": "1012319",
    "end": "1019000"
  },
  {
    "text": "capacity and it it knows about a bunch of things that a bunch of collections has that it can try to use to make",
    "start": "1019000",
    "end": "1024240"
  },
  {
    "text": "things to do things more efficiently and avoid allocation and do things in bulk and all so it'll just like do its best",
    "start": "1024240",
    "end": "1031280"
  },
  {
    "text": "to write the most efficient way that you create this collection so that you will never sit there with the nice",
    "start": "1031280",
    "end": "1037678"
  },
  {
    "text": "syntax and wish it was faster because now you have now this is in in your tight Loop and you have to go and",
    "start": "1037679",
    "end": "1043760"
  },
  {
    "text": "replace it with something stupid and ugly and unmaintainable so we really lean into making this the right choice",
    "start": "1043760",
    "end": "1050240"
  },
  {
    "text": "also for efficiency reasons unlike maybe some features we did in the distant past okay so that's great um what isn't so",
    "start": "1050240",
    "end": "1058840"
  },
  {
    "text": "great is that oh and I should mention one more thing of course you can um you can",
    "start": "1058840",
    "end": "1064880"
  },
  {
    "text": "spread things in here so if I'm not happy about my own grades you know I can go and uh Michael is on the second row",
    "start": "1064880",
    "end": "1071840"
  },
  {
    "text": "there I know he's I I went to his talk I know he's super smart so I'm just going to steal his grades as well and spread",
    "start": "1071840",
    "end": "1076880"
  },
  {
    "text": "them in and even though you know know it's a different collection typee that's um that's not a problem right I can just",
    "start": "1076880",
    "end": "1083440"
  },
  {
    "text": "it'll spread it in in whichever most efficient way but there are some things we didn't do um um one one thing you",
    "start": "1083440",
    "end": "1092400"
  },
  {
    "text": "might ask yourself is if I've got one of these um what's its like I I can clearly",
    "start": "1092400",
    "end": "1098240"
  },
  {
    "text": "convert it to all these different collection type what's its own type like let's say that I grab it from here um",
    "start": "1098240",
    "end": "1104120"
  },
  {
    "text": "put it into a temporary variable and pass that instead you know um for l",
    "start": "1104120",
    "end": "1109280"
  },
  {
    "text": "equals that what's what kind of thing is that and there's no answer to that we're like we",
    "start": "1109280",
    "end": "1115840"
  },
  {
    "text": "we haven't decided what's the natural type of a collection expression it's like lambdas they didn't have a natural type for like a decade and a half and",
    "start": "1115840",
    "end": "1122600"
  },
  {
    "text": "then one day we're like oh oh this is what it should be and then we added it to the language um hopefully it doesn't",
    "start": "1122600",
    "end": "1128240"
  },
  {
    "text": "take that long for this one but but there there's like it's a genuinely hard question what should be the natural type",
    "start": "1128240",
    "end": "1135039"
  },
  {
    "text": "of collection expression because if it's it could be sort of the min it could be like read only span or something super",
    "start": "1135039",
    "end": "1141320"
  },
  {
    "text": "low level and then we could make every use of it super efficient but then if you wanted to add something to the end",
    "start": "1141320",
    "end": "1147440"
  },
  {
    "text": "of it well you can't right or it could be on the other end it could be list and that might be that that'll be super General but then it won't be as",
    "start": "1147440",
    "end": "1153440"
  },
  {
    "text": "efficient and people will fall into a pit of failure with their performance so what's the right thing to do and it's",
    "start": "1153440",
    "end": "1159000"
  },
  {
    "text": "not just like the VAR situation there it's what if I want to let's say I want to for each it for each our item",
    "start": "1159000",
    "end": "1167280"
  },
  {
    "text": "in that same you know that'd be super cool to be able to do that'd be a great syntax um and we could just do that",
    "start": "1167280",
    "end": "1174039"
  },
  {
    "text": "without even deciding on the on the on what type it is but um it might be",
    "start": "1174039",
    "end": "1179280"
  },
  {
    "text": "better if we do decide and and it's sort of consistent another thing um might be I wanted to you know",
    "start": "1179280",
    "end": "1187919"
  },
  {
    "text": "good oldfashioned link query from um gr G",
    "start": "1187919",
    "end": "1193760"
  },
  {
    "text": "in that whole thing you know where something so",
    "start": "1193760",
    "end": "1199880"
  },
  {
    "text": "what should we do here what is the unifying theory of the type these we haven't decided yet if you have thoughts",
    "start": "1199880",
    "end": "1206880"
  },
  {
    "text": "anyone have",
    "start": "1206880",
    "end": "1209440"
  },
  {
    "text": "thoughts make it a",
    "start": "1213679",
    "end": "1217480"
  },
  {
    "text": "so right okay so you mean like um like uh um interpolated strings um just",
    "start": "1221080",
    "end": "1229320"
  },
  {
    "text": "magical right but yeah so the question is which magic like in a case like this you can observe what the type is like",
    "start": "1229320",
    "end": "1235799"
  },
  {
    "text": "what so we could possibly just do these other ones and just do whatever's best for those",
    "start": "1235799",
    "end": "1242240"
  },
  {
    "text": "contexts yeah we could yeah we could we could analyze the whole context and see",
    "start": "1242760",
    "end": "1248360"
  },
  {
    "text": "this is how it's used so like they're adding things so let's make it list yeah that's also possible so it's a non-trial",
    "start": "1248360",
    "end": "1254960"
  },
  {
    "text": "question and um we were like we can't figure this out this quick so let's just not allow it and that's what we",
    "start": "1254960",
    "end": "1261960"
  },
  {
    "text": "did um so let me go back from that a little bit to something that compiles",
    "start": "1261960",
    "end": "1267280"
  },
  {
    "text": "it's always good to get back to um a base um where the red squiggles",
    "start": "1267280",
    "end": "1272760"
  },
  {
    "text": "disappear so we can introduce some new ones um another thing that now now that we have this whole theory of how do we",
    "start": "1272760",
    "end": "1279120"
  },
  {
    "text": "create new collections of all kinds of types in C we can start using that in other places for instance Rams",
    "start": "1279120",
    "end": "1288840"
  },
  {
    "text": "perhams span that would be really cool right because um spans don't if you don't know then I'm telling you spans",
    "start": "1288840",
    "end": "1295720"
  },
  {
    "text": "don't necessarily that can be allocated on the stack and so pams would not have",
    "start": "1295720",
    "end": "1302960"
  },
  {
    "text": "to if you do pams or span instead of prams array we not have to allocate an array for all your things they can just",
    "start": "1302960",
    "end": "1308880"
  },
  {
    "text": "be passed on the on the stack just like they would if they were real this individual um parameters and so um with",
    "start": "1308880",
    "end": "1318559"
  },
  {
    "text": "you could just allow prams for any any old collection really and that means whatever overload gets picked that has",
    "start": "1318559",
    "end": "1325600"
  },
  {
    "text": "pams you know um we would just take all those arguments and we would create whatever collection type was there the",
    "start": "1325600",
    "end": "1331880"
  },
  {
    "text": "same way we we' create it for collection expression it's almost as if we can just you can just take away the brackets and",
    "start": "1331880",
    "end": "1337279"
  },
  {
    "text": "the same thing happens when you have params that's pretty cool so we're working on that one and that's that's",
    "start": "1337279",
    "end": "1342679"
  },
  {
    "text": "heading for C 13 that's like a a low hanging fruit once you've done the other thing and it's going to be really really",
    "start": "1342679",
    "end": "1348640"
  },
  {
    "text": "useful like how many places in the in the current core libraries have like an",
    "start": "1348640",
    "end": "1354279"
  },
  {
    "text": "overload with one argument an overload with two arguments and other way with three arguments just because then for",
    "start": "1354279",
    "end": "1359559"
  },
  {
    "text": "those cases you wouldn't have to allocate that Bloody array you know so just get away from that now with with",
    "start": "1359559",
    "end": "1365000"
  },
  {
    "text": "Bram span or if you if you want another type you want Brams list you know just go ahead be you know whatever you want",
    "start": "1365000",
    "end": "1372159"
  },
  {
    "text": "except it doesn't work yet um so uh that's another thing and then uh the",
    "start": "1372159",
    "end": "1377919"
  },
  {
    "text": "last thing I want to mention that's that could be next here is what if uh what about dictionaries they're sort of like",
    "start": "1377919",
    "end": "1384679"
  },
  {
    "text": "the uh the young the smaller cousin or and bigger depending on how measure of uh the younger cousin or the I don't",
    "start": "1384679",
    "end": "1391200"
  },
  {
    "text": "know some kind of family member uh to collections um and with a little bit of",
    "start": "1391200",
    "end": "1397720"
  },
  {
    "text": "ugliness you can use collection initializers for dictionaries for instance and make that work so it' be",
    "start": "1397720",
    "end": "1403640"
  },
  {
    "text": "kind of cool if we just kind of generalized that whole thing as well and I think we're going to there some design",
    "start": "1403640",
    "end": "1408960"
  },
  {
    "text": "decisions but basically the syntax would be something first of all you need two you need key and let's say string to",
    "start": "1408960",
    "end": "1415279"
  },
  {
    "text": "grade you can you can say what the grade is in um say something like um you know",
    "start": "1415279",
    "end": "1424400"
  },
  {
    "text": "geometry um you know um not sure about this",
    "start": "1424679",
    "end": "1430240"
  },
  {
    "text": "syntax but that's it's a key candidate uh spelling um you know",
    "start": "1430240",
    "end": "1438120"
  },
  {
    "text": "whatever um so that should be an easy an easy fix",
    "start": "1438120",
    "end": "1443919"
  },
  {
    "text": "and you know the empty one happens to already work um that just that somehow that falls out from our collection",
    "start": "1443919",
    "end": "1449520"
  },
  {
    "text": "initializers du um so we just need the one with elements in it so that's kind of cool too I think I think that'll be",
    "start": "1449520",
    "end": "1455760"
  },
  {
    "text": "useful next turn on the crank here all right so that's what I had to that's what I had to say about the next phase",
    "start": "1455760",
    "end": "1462919"
  },
  {
    "text": "of collection Expressions um let's get back to something that compiles",
    "start": "1462919",
    "end": "1469159"
  },
  {
    "text": "so I can screw things up again any questions comments here",
    "start": "1469159",
    "end": "1475720"
  },
  {
    "text": "no ah the cake is winning the cake is winning oh this was the one down",
    "start": "1475720",
    "end": "1480880"
  },
  {
    "text": "there shout it out and I I'll repeat",
    "start": "1480880",
    "end": "1485279"
  },
  {
    "text": "it will there be abstractions for",
    "start": "1489480",
    "end": "1493720"
  },
  {
    "text": "numbers so you don't have to to decide what type of number it is um so we do have generics over numbers now I don't",
    "start": "1496760",
    "end": "1503600"
  },
  {
    "text": "know if you you know about the i i number interfaces and all of",
    "start": "1503600",
    "end": "1509000"
  },
  {
    "text": "that what's that um we have the new generic type but would that work with",
    "start": "1509000",
    "end": "1516039"
  },
  {
    "text": "that as well that you all detect everything automatically um so um if",
    "start": "1516039",
    "end": "1523520"
  },
  {
    "text": "what you mean is could we sort of um could we do type in generic type inference through these list things to",
    "start": "1523520",
    "end": "1529840"
  },
  {
    "text": "get the the number types or something I think so I don't I want um I want to",
    "start": "1529840",
    "end": "1535279"
  },
  {
    "text": "refrain from creating an ex an example on the Fly here but I think um that generally works out pretty well like we",
    "start": "1535279",
    "end": "1542039"
  },
  {
    "text": "can infer um we tend to be able to INF infer the element type from um from the",
    "start": "1542039",
    "end": "1550480"
  },
  {
    "text": "I think we can infer the element type of collections from this ah you make me want to try oh I can't because this is a Constructor I'm not going to do it it's",
    "start": "1550480",
    "end": "1556640"
  },
  {
    "text": "going to take too long but let's play with it after if you come up and remind me",
    "start": "1556640",
    "end": "1561760"
  },
  {
    "text": "okay um generally speaking um someone hand up there hand",
    "start": "1561760",
    "end": "1568360"
  },
  {
    "text": "here uh um while be while he gets the microphone to you generally speaking type inference is one of the things that",
    "start": "1568360",
    "end": "1575399"
  },
  {
    "text": "we are considering whether we can make that better without making it so good that it that results become very",
    "start": "1575399",
    "end": "1581440"
  },
  {
    "text": "complicated and confusing so um but I don't have anything to show on that yeah so what do you think because like I",
    "start": "1581440",
    "end": "1587600"
  },
  {
    "text": "think we already have something similar before and in JavaScript like hash table it has the same colic and structures",
    "start": "1587600",
    "end": "1595039"
  },
  {
    "text": "when you initialize them in Python also the same why not we thinking about square bracket why square brackets oh",
    "start": "1595039",
    "end": "1602880"
  },
  {
    "text": "that was such a big discussion um and I was like the original proposal for this",
    "start": "1602880",
    "end": "1608799"
  },
  {
    "text": "at square brackets are like hell no you know colle collection initializers use",
    "start": "1608799",
    "end": "1614679"
  },
  {
    "text": "curly braces the other languages use curly braces what are we doing here let's figure it out let's make it work",
    "start": "1614679",
    "end": "1620720"
  },
  {
    "text": "with curly braces and we triy it and we tried it and we triy and there so many",
    "start": "1620720",
    "end": "1626200"
  },
  {
    "text": "ambiguities and things this is one of those cases where you can really feel that the language is old and full of",
    "start": "1626200",
    "end": "1632559"
  },
  {
    "text": "existing stuff um I can't remember all the details but it just it became increasingly painful this is oh this is",
    "start": "1632559",
    "end": "1639840"
  },
  {
    "text": "way back actually before we even talked about collection Expressions this was back when we were doing the the list",
    "start": "1639840",
    "end": "1645399"
  },
  {
    "text": "patterns here um and so yeah we had we just had problems making that work and",
    "start": "1645399",
    "end": "1651080"
  },
  {
    "text": "we were looking ahead to doing collection expressions and want to make sure that worked well and we was just like the square brackets just they just",
    "start": "1651080",
    "end": "1656919"
  },
  {
    "text": "work nicely and they you know they they they remind me of arrays and that sort of collection here right do you don't",
    "start": "1656919",
    "end": "1663200"
  },
  {
    "text": "don't they remind you of arrays um so curly braces that's mostly like objects",
    "start": "1663200",
    "end": "1668519"
  },
  {
    "text": "and square brackets that's mostly like collections that's kind of what we're lean into and then once we had done the the list patterns um you know a few",
    "start": "1668519",
    "end": "1676399"
  },
  {
    "text": "releases ago it was the obvious thing to have like the same delimeters for both",
    "start": "1676399",
    "end": "1681720"
  },
  {
    "text": "when you're creating and when you're deconstructing uh collection so that's how we ended there and I know other",
    "start": "1681720",
    "end": "1688159"
  },
  {
    "text": "languages do other things but you know we don't have to copy them every time we",
    "start": "1688159",
    "end": "1693919"
  },
  {
    "text": "can be original so all right um I'll I'll move",
    "start": "1693919",
    "end": "1699480"
  },
  {
    "text": "on I can't see any more hands but apparently I can't see Hands today so that but um come and ask me more questions after we're like almost",
    "start": "1699480",
    "end": "1706919"
  },
  {
    "text": "halfway into talk so I'll get a move on so um let me see um",
    "start": "1706919",
    "end": "1712960"
  },
  {
    "text": "oh yeah um let's let's talk about breaking things um let's uh ease into it first there's this tiny little useful",
    "start": "1712960",
    "end": "1719880"
  },
  {
    "text": "feature that we've been wanting to do for a couple of releases and we're now going to do it in C 13 I hope I'm going",
    "start": "1719880",
    "end": "1727600"
  },
  {
    "text": "to knock on some wood adjacent material here um so this this notion this technical",
    "start": "1727600",
    "end": "1734919"
  },
  {
    "text": "notion of a cliff right there a cliff in the language you're doing something it's super elegant simple nice and then you",
    "start": "1734919",
    "end": "1741240"
  },
  {
    "text": "want to do just one little tweak and you fall off the cliff and you have to write like five lines of code",
    "start": "1741240",
    "end": "1748279"
  },
  {
    "text": "instead and we every now and then we try to eliminate some of those Cliffs or",
    "start": "1748279",
    "end": "1754600"
  },
  {
    "text": "reduce them because that's one of those negative emotions we don't want you to feel right we want you to to be happy slightly you know um",
    "start": "1754600",
    "end": "1764039"
  },
  {
    "text": "chill maybe even and so um so one of those things is okay I have an auto",
    "start": "1764039",
    "end": "1769720"
  },
  {
    "text": "property here Auto property is really cool because you know they generate their own Setters and Getters and back",
    "start": "1769720",
    "end": "1775159"
  },
  {
    "text": "and backing field and uh you don't have to do a thing and we did we did add a",
    "start": "1775159",
    "end": "1780320"
  },
  {
    "text": "few things to them over the years like they can be getter only they can have an Knitter they can have initializers it's",
    "start": "1780320",
    "end": "1786000"
  },
  {
    "text": "cool but hey this name coming in it's a string I just want to I just want to trim the spaces off ofit before I assign",
    "start": "1786000",
    "end": "1792200"
  },
  {
    "text": "it into the backing field that's all I want to do and and now you know to today",
    "start": "1792200",
    "end": "1797480"
  },
  {
    "text": "I would have to like explode this into a full implementation of a property with with a declared backing field and",
    "start": "1797480",
    "end": "1804159"
  },
  {
    "text": "everything but what I really just want to do is I want to just give the setter",
    "start": "1804159",
    "end": "1809320"
  },
  {
    "text": "I just want to write the body of the setter in a way where I can access the backing field that gets generated for me",
    "start": "1809320",
    "end": "1814799"
  },
  {
    "text": "and I just want to call that field okay so just ass sign instead of the default",
    "start": "1814799",
    "end": "1820880"
  },
  {
    "text": "implementation does uh does this and I just want to say do trim right that's",
    "start": "1820880",
    "end": "1827120"
  },
  {
    "text": "that's all I want to do so we want this to work and that means field becomes a new sort of like",
    "start": "1827120",
    "end": "1832760"
  },
  {
    "text": "contextual keyword or implicit parameter like value is today inside our properties and it just says hey",
    "start": "1832760",
    "end": "1841320"
  },
  {
    "text": "um that that's a backing field it's you know it just references the backing field it's not actually called field",
    "start": "1841320",
    "end": "1847760"
  },
  {
    "text": "it's no field called field it's called something else but this is the way I can reference it inside of my",
    "start": "1847760",
    "end": "1852840"
  },
  {
    "text": "accessors and if I do um if I do rely on the of a backing",
    "start": "1852840",
    "end": "1858720"
  },
  {
    "text": "field either implicitly if by mentioning it well then it's an auto property and if not it's not okay so now you can have",
    "start": "1858720",
    "end": "1865720"
  },
  {
    "text": "Auto properties and non-auto properties that are syntactically similar but if you say field then it's",
    "start": "1865720",
    "end": "1872919"
  },
  {
    "text": "an auto property that's cool um gets me off the",
    "start": "1872919",
    "end": "1878159"
  },
  {
    "text": "cliff but it's also breaking change unless we do um contortions and",
    "start": "1878159",
    "end": "1884840"
  },
  {
    "text": "so let me talk about breaking changes and contortion I'm not going to do live contortions on the state on the stage",
    "start": "1884840",
    "end": "1891519"
  },
  {
    "text": "I'm just going to talk about them um I could do one or two if you're really sleepy but um it would get talked about",
    "start": "1891519",
    "end": "1899559"
  },
  {
    "text": "so um why is it a breaking change you know breaking change means code means",
    "start": "1899559",
    "end": "1904600"
  },
  {
    "text": "something today and it means something else tomorrow like bad generally speaking should try to avoid that um",
    "start": "1904600",
    "end": "1911519"
  },
  {
    "text": "because your code get is busted negative emotions don't go there but",
    "start": "1911519",
    "end": "1918960"
  },
  {
    "text": "the Alternatives aren't great sometimes um and I'm going to talk about a few cases where the Alternatives weren't",
    "start": "1918960",
    "end": "1924360"
  },
  {
    "text": "great and um and how we might like approach a",
    "start": "1924360",
    "end": "1931519"
  },
  {
    "text": "slightly more permissive um uh policy around breaking changes so so here's",
    "start": "1931519",
    "end": "1937120"
  },
  {
    "text": "something that's completely legal today like I have a researcher for instance he has a field of",
    "start": "1937120",
    "end": "1942760"
  },
  {
    "text": "research that's property called field and it has a or here it has a backing field called field that he is some",
    "start": "1942760",
    "end": "1950600"
  },
  {
    "text": "reason you know he doesn't use underscores or she doesn't use underscores um um which I I kind of",
    "start": "1950600",
    "end": "1957559"
  },
  {
    "text": "forget sometimes as well and so these so I have I'm referencing it in",
    "start": "1957559",
    "end": "1962880"
  },
  {
    "text": "here if that turns into if if if this turns into like some sort of keyword and",
    "start": "1962880",
    "end": "1968200"
  },
  {
    "text": "or it starts referencing something else well now it's a breaking change it's semantically different maybe very subtly",
    "start": "1968200",
    "end": "1974159"
  },
  {
    "text": "so because this works exactly the same except no one uses this field well okay",
    "start": "1974159",
    "end": "1979720"
  },
  {
    "text": "that's okay but then some other method thinks that it's sharing this backing",
    "start": "1979720",
    "end": "1984799"
  },
  {
    "text": "field with the prob and they read and write from that but we were actually now reading and writing from the generated",
    "start": "1984799",
    "end": "1990039"
  },
  {
    "text": "one and and things turn weird but we could also say something",
    "start": "1990039",
    "end": "1996519"
  },
  {
    "text": "like well this means the the generated backing field unless there's something in scope somewhere that already means",
    "start": "1996519",
    "end": "2002799"
  },
  {
    "text": "field and then it just means that instead and that's not breaking and that's kind of the approach we've taken in in the past when you've been in this",
    "start": "2002799",
    "end": "2008679"
  },
  {
    "text": "kind of situation and it's okay but it kind of just over time it really sucks",
    "start": "2008679",
    "end": "2015399"
  },
  {
    "text": "because it it gives you this spooky action at a distance vulnerability where something gets declared somewhere",
    "start": "2015399",
    "end": "2022200"
  },
  {
    "text": "nowhere near your code just in scope somewhere and all of a sudden your code means something different the classical",
    "start": "2022200",
    "end": "2029080"
  },
  {
    "text": "example of that like the first time you really did that was VAR so VAR nice keyword means infer my",
    "start": "2029080",
    "end": "2036000"
  },
  {
    "text": "type here except ooo somebody might have a type cold bar",
    "start": "2036000",
    "end": "2042120"
  },
  {
    "text": "and that would be breaking if if referencing that didn't work anymore so if I have a class here called VAR now",
    "start": "2042120",
    "end": "2048760"
  },
  {
    "text": "these turn into errors because they don't these Expressions can't convert to the type bar so the fact that I put that class",
    "start": "2048760",
    "end": "2055638"
  },
  {
    "text": "somewhere just just changed the meaning of my code very locally that's bad in",
    "start": "2055639",
    "end": "2061040"
  },
  {
    "text": "the for the long term right so breaking change is ripping off the Band-Aid and you're in a new world that's beautiful",
    "start": "2061040",
    "end": "2066679"
  },
  {
    "text": "and nice these solutions to avoid breaking changes they just sit there and poison",
    "start": "2066679",
    "end": "2073638"
  },
  {
    "text": "the language one by one just a little bit but you know enough that it just",
    "start": "2073639",
    "end": "2078800"
  },
  {
    "text": "accumulates over the years and it never goes away so time to look at fixing some",
    "start": "2078800",
    "end": "2084320"
  },
  {
    "text": "of that and so we're going to treat the field access feature there as kind of",
    "start": "2084320",
    "end": "2089720"
  },
  {
    "text": "like a canaran the coal mine for trying out a new break and change strategy and if it works well then we can use it",
    "start": "2089720",
    "end": "2096440"
  },
  {
    "text": "again on new features or we can maybe even go back to some of the existing features that we did the sort of the",
    "start": "2096440",
    "end": "2103119"
  },
  {
    "text": "easy but wrong thing with and revisit them and maybe change and maybe break them now um VAR isn't the worst one the",
    "start": "2103119",
    "end": "2110359"
  },
  {
    "text": "worst one is discards I'm not going to go into details but underscore is a discard since c 7 except when it",
    "start": "2110359",
    "end": "2118320"
  },
  {
    "text": "isn't you know this underscore here is a discard unless and and this and if I",
    "start": "2118320",
    "end": "2125640"
  },
  {
    "text": "declare a local variable in certain was using certain syntaxes that's called underscore that's also a discard but if",
    "start": "2125640",
    "end": "2132440"
  },
  {
    "text": "I use the old existing style from before c 7 of declaring a local variable then",
    "start": "2132440",
    "end": "2138079"
  },
  {
    "text": "for for you know breaking change reasons that's actually a variable called underscore and it's a real variable and",
    "start": "2138079",
    "end": "2144079"
  },
  {
    "text": "so now everything else that uses that VAR that underscore is now broken and no longer a discard because that thing is",
    "start": "2144079",
    "end": "2150880"
  },
  {
    "text": "in scope and so this is mentioned before it was declared and and if I moved it it",
    "start": "2150880",
    "end": "2156319"
  },
  {
    "text": "would have the wrong type Maybe or if not then and this would be a second declaration with a different type and",
    "start": "2156319",
    "end": "2161520"
  },
  {
    "text": "you know everything turns to  and nobody I'm that's wrong many",
    "start": "2161520",
    "end": "2166680"
  },
  {
    "text": "people use discards but they're frustrated because all of a sudden it doesn't work the way you expect it's super confusing so we want we want to",
    "start": "2166680",
    "end": "2174119"
  },
  {
    "text": "ideally fix that as well if this goes well we'll come and look at discards again fix them up and make them just",
    "start": "2174119",
    "end": "2179560"
  },
  {
    "text": "properly discards always and if you had variables called underscore will help you fix them and that leads into how we",
    "start": "2179560",
    "end": "2185000"
  },
  {
    "text": "going to deal with these breaking changes okay we we're not going to do a lot of them and we're going to try to",
    "start": "2185000",
    "end": "2191240"
  },
  {
    "text": "we're trying to home in on a set of criteria for when we think it's okay to do a breaking change let me get that question",
    "start": "2191240",
    "end": "2198119"
  },
  {
    "text": "first yeah is there a reason why it couldn't be implicit there are all kinds of proposals for you could just have a",
    "start": "2209760",
    "end": "2215359"
  },
  {
    "text": "different design of the language feature and we looked at a lot of them and at",
    "start": "2215359",
    "end": "2220599"
  },
  {
    "text": "the end of the day um we felt like this was just the best design and let's not",
    "start": "2220599",
    "end": "2226720"
  },
  {
    "text": "have this like slight chance of a breaking change ruin the design for everyone so that so yes there are many",
    "start": "2226720",
    "end": "2233200"
  },
  {
    "text": "many other ways that this could work they're just not as pretty as this one unless this one that we hadn't thought of so but we had thought of that one so",
    "start": "2233200",
    "end": "2242400"
  },
  {
    "text": "um so what we think okay one more question",
    "start": "2242400",
    "end": "2247640"
  },
  {
    "text": "what's bad about breaking changes because it's a compile time error and you can fix it well it's not always a",
    "start": "2250480",
    "end": "2255680"
  },
  {
    "text": "compile time error the good breaking changes like the friendly ones are the ones that just hit you on the head you",
    "start": "2255680",
    "end": "2261040"
  },
  {
    "text": "know they whack you on the head and you can't get any further they slam the door in your face because it's now an error",
    "start": "2261040",
    "end": "2266400"
  },
  {
    "text": "great I fix it the sneaky ones are the ones like this one here where it doesn't",
    "start": "2266400",
    "end": "2271760"
  },
  {
    "text": "give you an error it just changes the meaning of your code and then sometime later in production during tax season",
    "start": "2271760",
    "end": "2278440"
  },
  {
    "text": "you you know you'll have a really nasty thing um so we got a so those are the",
    "start": "2278440",
    "end": "2286480"
  },
  {
    "text": "those are the ones that are really and essentially sort of what I'm about to describe is turning those sneaky ones",
    "start": "2286480",
    "end": "2293560"
  },
  {
    "text": "into the other kind in a way and so what we propos to do is that as soon as you",
    "start": "2293560",
    "end": "2299640"
  },
  {
    "text": "get usually you know there's a bit of time between when you get the new compiler",
    "start": "2299640",
    "end": "2306280"
  },
  {
    "text": "for a new version of C and when you actually start using a new version in in the vast majority of cases the compiler",
    "start": "2306280",
    "end": "2312560"
  },
  {
    "text": "gets given a language version it's often inferred from your target framework or something like that but the compiler",
    "start": "2312560",
    "end": "2318040"
  },
  {
    "text": "gets told compile this with C 12 and it keeps getting told that for a while",
    "start": "2318040",
    "end": "2323480"
  },
  {
    "text": "hopefully after you get the compiler that's able to do c 13 until you choose",
    "start": "2323480",
    "end": "2328640"
  },
  {
    "text": "to get a new Target frame to upgrade the target framework or explicitly say go to C 13 so in the meantime the new compiler",
    "start": "2328640",
    "end": "2335960"
  },
  {
    "text": "is going to break your existing C 12 code by saying hang on this is going to",
    "start": "2335960",
    "end": "2342400"
  },
  {
    "text": "change its semantics in C 13 do you want to fix it now to something that will be",
    "start": "2342400",
    "end": "2348520"
  },
  {
    "text": "robust against that change and then we will offer a fully automate automatable fix local and fully",
    "start": "2348520",
    "end": "2355520"
  },
  {
    "text": "automatable that you can apply here or everywhere or you can choose to fix it some other way until those warnings go",
    "start": "2355520",
    "end": "2361200"
  },
  {
    "text": "away and then you know you're safe for language upgrade so we're going to get you before you upgrade and probably will also Implement",
    "start": "2361200",
    "end": "2369359"
  },
  {
    "text": "a warning that you can turn on after you upgrade it when you realize you hadn't you know you you you did it anyway",
    "start": "2369359",
    "end": "2375839"
  },
  {
    "text": "somehow and now you have problems you need to fix them we can help you find them but this is the main and and if you",
    "start": "2375839",
    "end": "2380920"
  },
  {
    "text": "use an upgrader then it'll just do the automatable fixes automatically everywhere to keep your semantics and so",
    "start": "2380920",
    "end": "2388200"
  },
  {
    "text": "that kind of leads to what are the criteria for um for when we think it's",
    "start": "2388200",
    "end": "2394319"
  },
  {
    "text": "okay to do a breaking change question",
    "start": "2394319",
    "end": "2398960"
  },
  {
    "text": "that assumes that people jump from one version to the next it actually it doesn't really um",
    "start": "2400599",
    "end": "2408200"
  },
  {
    "text": "because if you're in C seven now and then you get a compiler that's",
    "start": "2408200",
    "end": "2414440"
  },
  {
    "text": "capable of C 13 you'll still get those warnings it'll warn all the way back to c",
    "start": "2414440",
    "end": "2422560"
  },
  {
    "text": "one if that code if the breaking code was legal back then so it so it",
    "start": "2422560",
    "end": "2427800"
  },
  {
    "text": "retroactively makes it a warning for all existing language versions to do the code that now changes its meaning so it",
    "start": "2427800",
    "end": "2435280"
  },
  {
    "text": "actually avoids that problem it has other problems but it avoids that one and so we think okay um breaking",
    "start": "2435280",
    "end": "2443880"
  },
  {
    "text": "changes not a thing we should do all the time but we should just be a little less afraid of them we're pretty courageous",
    "start": "2443880",
    "end": "2449359"
  },
  {
    "text": "in many ways we should have a little more courage here too um if they're clear user benefits if it's a clear best",
    "start": "2449359",
    "end": "2455160"
  },
  {
    "text": "design if we avoid some of those spook action at a distance kind of slow bleeding to death",
    "start": "2455160",
    "end": "2460720"
  },
  {
    "text": "things a candidate for breaking change they should still be the kind of breaks that even when they do occur they don't",
    "start": "2460720",
    "end": "2467720"
  },
  {
    "text": "like splatter all of your code right so yes you will have a few Fields called field if you're very unlucky like",
    "start": "2467720",
    "end": "2473960"
  },
  {
    "text": "there'll be three classes or something in a whole like big thing that okay I have a field Co field it'll be broken",
    "start": "2473960",
    "end": "2480800"
  },
  {
    "text": "but it but they won't be like we won't do things that are like okay now all of your code just turns to so we'll",
    "start": "2480800",
    "end": "2487920"
  },
  {
    "text": "try to assess that ahead of time as best we can it should be easy to say that is where the break is and this is what's",
    "start": "2487920",
    "end": "2494760"
  },
  {
    "text": "going to break about it so it should be like diagnosable by an ID or by the",
    "start": "2494760",
    "end": "2500480"
  },
  {
    "text": "compiler and that's that's it not some kind of like ephemeral thing um and",
    "start": "2500480",
    "end": "2506680"
  },
  {
    "text": "finally they should we should identify a specific default fix that always works",
    "start": "2506680",
    "end": "2511960"
  },
  {
    "text": "and that requires no user interaction to apply so that you can so that we can can",
    "start": "2511960",
    "end": "2517400"
  },
  {
    "text": "always say fix them all for me in one F swoop and it'll do something that's non",
    "start": "2517400",
    "end": "2524040"
  },
  {
    "text": "obnoxious and local like for field for instance it could be depending on the design we end up with it could be that",
    "start": "2524040",
    "end": "2531560"
  },
  {
    "text": "we turn this into this. field or if field is just an Ord or",
    "start": "2531560",
    "end": "2537040"
  },
  {
    "text": "value is just an ordinary identifier in C even though we color it blue so so if",
    "start": "2537040",
    "end": "2542400"
  },
  {
    "text": "it was like value using the at to make it an identifier wouldn't work because it's already an identifier but we could",
    "start": "2542400",
    "end": "2548920"
  },
  {
    "text": "choose to make field like more like a contextual keyword and then putting at in front of it would also be a good fix",
    "start": "2548920",
    "end": "2554760"
  },
  {
    "text": "so whichever one we settle on that'll be the one the default fix you can do other things but that'll be the one that we",
    "start": "2554760",
    "end": "2560280"
  },
  {
    "text": "will do automatically if you ask us to",
    "start": "2560280",
    "end": "2564720"
  },
  {
    "text": "question can we have breaking changes um oh so so settle on the 2-year",
    "start": "2566880",
    "end": "2573520"
  },
  {
    "text": "cycle of LTS um it's a two-year cycle unless who changed it since I left for",
    "start": "2573520",
    "end": "2579119"
  },
  {
    "text": "Australia I think it's still two years um perhaps um we don't really LTS",
    "start": "2579119",
    "end": "2585599"
  },
  {
    "text": "doesn't mean that much to us we were thinking we'll we'll have just once a year where the whole this ties into a",
    "start": "2585599",
    "end": "2593800"
  },
  {
    "text": "bigger story with the um with the CLI the command line interface in the net SDK",
    "start": "2593800",
    "end": "2600599"
  },
  {
    "text": "where there are other breaking changes that they want to do on existing",
    "start": "2600599",
    "end": "2605720"
  },
  {
    "text": "projects uh else elsewhere it's nothing to do with the language for instance like block HTTP that kind of thing and",
    "start": "2605720",
    "end": "2613960"
  },
  {
    "text": "so try to roll all of that into one experience that you can turn off if you're like this is just my CI build I",
    "start": "2613960",
    "end": "2619240"
  },
  {
    "text": "don't want to get the um but so there's sort of like we'll have a Cadence of every year there can be a few new",
    "start": "2619240",
    "end": "2625680"
  },
  {
    "text": "Breaking changes across your whole project and the language ones are one of those they just plug into that",
    "start": "2625680",
    "end": "2631720"
  },
  {
    "text": "infrastructure that's a bigger picture that I wasn't painting but I don't think we will limit it to just LTS",
    "start": "2631720",
    "end": "2638200"
  },
  {
    "text": "yes um people who only upgrade every two years only use the LTS cycle for upgrade",
    "start": "2638200",
    "end": "2645280"
  },
  {
    "text": "they will get the same number of breaking changes anyhow some of them will just have been out longer",
    "start": "2645280",
    "end": "2650559"
  },
  {
    "text": "so um okay so that's breaking changes uh we'll try it unless somebody",
    "start": "2650559",
    "end": "2657400"
  },
  {
    "text": "stops us before we ship and this the field features the canary and the co mine we can use it to refine the",
    "start": "2657400",
    "end": "2663160"
  },
  {
    "text": "experience and tweak things or if it's like a disaster we can say never do that",
    "start": "2663160",
    "end": "2668400"
  },
  {
    "text": "again and then this forget about this whole part of the talk um but um but that's kind of that's some of that",
    "start": "2668400",
    "end": "2675319"
  },
  {
    "text": "thinking that's not just about specific language features but about how can we change our approach to the language a little bit to make it to make the future",
    "start": "2675319",
    "end": "2682960"
  },
  {
    "text": "better for everyone okay got 16 minutes left I have two big features to talk",
    "start": "2682960",
    "end": "2689440"
  },
  {
    "text": "about U because I I'm having a good time and and time is slipping for me so uh",
    "start": "2689440",
    "end": "2695520"
  },
  {
    "text": "let me try to let me try to see we can get there okay um let's go back here for",
    "start": "2695520",
    "end": "2700800"
  },
  {
    "text": "a second um let's again get get rid of the squiggles let's talk about aliases",
    "start": "2700800",
    "end": "2707359"
  },
  {
    "text": "okay type type defs whatever you want to call them we have using aliases in C they're not very cool we made them a",
    "start": "2707359",
    "end": "2714599"
  },
  {
    "text": "little better in C 12 now you can say instead of saying system. decimal you can just use the keyword now but you",
    "start": "2714599",
    "end": "2721400"
  },
  {
    "text": "still can't say decimal right because usings can't see other usings it's just there okay you can um and you can like",
    "start": "2721400",
    "end": "2729640"
  },
  {
    "text": "now you can use oh did I go into insert mode that was terrify no now I",
    "start": "2729640",
    "end": "2735680"
  },
  {
    "text": "did I I rarely type in my day job you know let's say that we want to use a",
    "start": "2735680",
    "end": "2741200"
  },
  {
    "text": "tual instead string comma decimal okay so now I can use tual",
    "start": "2741200",
    "end": "2747880"
  },
  {
    "text": "Expressions I can even call give them Nam string uh you know topic decimal",
    "start": "2747880",
    "end": "2754680"
  },
  {
    "text": "value um so great um however I can't for instance make it",
    "start": "2754680",
    "end": "2761160"
  },
  {
    "text": "generic and say Hey you know it's a string and something else where T",
    "start": "2761160",
    "end": "2768800"
  },
  {
    "text": "implements I number of T I can't do that because they're not types they just AES",
    "start": "2768800",
    "end": "2774119"
  },
  {
    "text": "so that so in terms of what you can so they're Limited in what they can express also they're Limited in how",
    "start": "2774119",
    "end": "2780720"
  },
  {
    "text": "broadly they can apply if we get back to let's get back to Safe ground again we now have Global using have had for a",
    "start": "2780720",
    "end": "2785760"
  },
  {
    "text": "couple releases so you can reuse the using across your project but you can't export it because it's still not a type",
    "start": "2785760",
    "end": "2791760"
  },
  {
    "text": "it's not there's no metadata um so I can't say like public using it's just",
    "start": "2791760",
    "end": "2797559"
  },
  {
    "text": "not a thing so you quickly if you want to use special names for special instantiations",
    "start": "2797559",
    "end": "2804920"
  },
  {
    "text": "or you know you just run up against the wall very quickly so I want to start from that angle and talk about and the",
    "start": "2804920",
    "end": "2812040"
  },
  {
    "text": "weird the name's going to sound weird to begin with explicit extensions",
    "start": "2812040",
    "end": "2817599"
  },
  {
    "text": "and then we'll get to implicit extensions and why they're both kinds so let's this I'm going to do this in slides because the squiggles are just",
    "start": "2817599",
    "end": "2823680"
  },
  {
    "text": "going to kill us um so um so here's another example um of an alias that can",
    "start": "2823680",
    "end": "2831400"
  },
  {
    "text": "do all the things that you can't currently do and we use a slightly different syntax we say explicit extension then the name and you type",
    "start": "2831400",
    "end": "2838000"
  },
  {
    "text": "parameters for so it's more like a type declaration there's some things in here that can't be in an alias today um there",
    "start": "2838000",
    "end": "2844599"
  },
  {
    "text": "an accessibility um can be public it's generics um you can talk about other",
    "start": "2844599",
    "end": "2852040"
  },
  {
    "text": "types without having say having to say the full goddamn name of them um and also it can have a",
    "start": "2852040",
    "end": "2858359"
  },
  {
    "text": "body whatever that means let's go and explore what that what that could mean okay so it's a type declaration but it's",
    "start": "2858359",
    "end": "2864559"
  },
  {
    "text": "also like an alias for another type um and let's just call them extensions because explicit should",
    "start": "2864559",
    "end": "2870319"
  },
  {
    "text": "probably be implicit and then if you want them to be implicit that should be explicit um not confusing at all",
    "start": "2870319",
    "end": "2877599"
  },
  {
    "text": "um so I have a method here I'm I have some",
    "start": "2877599",
    "end": "2883839"
  },
  {
    "text": "I have a string hopefully it's valid Jason inside and if it is then I'm going to display it this one I think I believe",
    "start": "2883839",
    "end": "2889880"
  },
  {
    "text": "is valid Jason um but I could have an elas an extension for called Json string that",
    "start": "2889880",
    "end": "2897599"
  },
  {
    "text": "signals the intent that this string should be one that contains Json and then I could use that Alias instead okay",
    "start": "2897599",
    "end": "2904440"
  },
  {
    "text": "and that is public so the consumer of the method somewhere else will also see the Json string type name it's not my",
    "start": "2904440",
    "end": "2911040"
  },
  {
    "text": "it's not my little secret over in my library it's a it's a way that I can communicate with the world is it's adjacent string but hey when it's",
    "start": "2911040",
    "end": "2917680"
  },
  {
    "text": "adjacent string wouldn't it be nice if it had some extra function members uh like maybe I can parse",
    "start": "2917680",
    "end": "2923520"
  },
  {
    "text": "it um and get something back like let's call it a data object something like dictionary thing",
    "start": "2923520",
    "end": "2929319"
  },
  {
    "text": "represents and and since um it has that parse method then I can call it in here",
    "start": "2929319",
    "end": "2935480"
  },
  {
    "text": "when I use the Json string name for Strings then I get that extra method on them that I can C so I'm communicating",
    "start": "2935480",
    "end": "2943480"
  },
  {
    "text": "extra things about but it's the same type underneath but I'm just giving you extra stuff under you know under I'm",
    "start": "2943480",
    "end": "2950680"
  },
  {
    "text": "giving you a context to understand it within and and you could have multiple different um uh extensions for string",
    "start": "2950680",
    "end": "2958599"
  },
  {
    "text": "that uh represent different semantics for string like an XML string it's not",
    "start": "2958599",
    "end": "2964040"
  },
  {
    "text": "very you could also Imagine like that data yeah you have a dictionary thing you could imagine putting a strongly typed face on like weekly typed data",
    "start": "2964040",
    "end": "2971160"
  },
  {
    "text": "with this so I'm so it's really all just data objects I think Jason object or something like that like some dictionary",
    "start": "2971160",
    "end": "2976559"
  },
  {
    "text": "structure representing semi-structured data but I'm I'm giving it a face that",
    "start": "2976559",
    "end": "2981599"
  },
  {
    "text": "is this one is probably a customer so why don't I give it some some public uh",
    "start": "2981599",
    "end": "2990319"
  },
  {
    "text": "strongly type properties and methods to access it as if it was a customer and sure it'll blow up it's like typescript",
    "start": "2990319",
    "end": "2996440"
  },
  {
    "text": "type it'll blow up if I was wrong but if I'm not then um I get intellisense and",
    "start": "2996440",
    "end": "3002520"
  },
  {
    "text": "some type checking of my code and so on and so as long as my as long as the assumptions I have about the shape of",
    "start": "3002520",
    "end": "3007839"
  },
  {
    "text": "the data right then uh everyone's having an easier time",
    "start": "3007839",
    "end": "3013240"
  },
  {
    "text": "and um and you know the blowup would have happened anyway but in the meantime",
    "start": "3013240",
    "end": "3018440"
  },
  {
    "text": "I wrote um nicely structured and compiled time check code and you could have multiple of those but they're all",
    "start": "3018440",
    "end": "3024359"
  },
  {
    "text": "the same kind thing underneath quick question",
    "start": "3024359",
    "end": "3028640"
  },
  {
    "text": "so the name property is there and it has Type string the body of it is going to",
    "start": "3032680",
    "end": "3038040"
  },
  {
    "text": "look up in the internal dictionary and it's going to blow up somehow so uh so that's why it's going to be so whatever",
    "start": "3038040",
    "end": "3044200"
  },
  {
    "text": "the data whatever data object gives you whatever error it gives you that's the error you get right you're just",
    "start": "3044200",
    "end": "3050200"
  },
  {
    "text": "delegating to it and saying hey this just means look that thing up and if it says I can't look that up you know",
    "start": "3050200",
    "end": "3056359"
  },
  {
    "text": "except ception then that's exception you get um",
    "start": "3056359",
    "end": "3062599"
  },
  {
    "text": "now um let's talk about implicit extensions so this is this is a trick",
    "start": "3062599",
    "end": "3067720"
  },
  {
    "text": "I'm I'm I'm doing a little trick here so these are just like these thin rapper types and they're just interchangeable",
    "start": "3067720",
    "end": "3074319"
  },
  {
    "text": "with the underlying types but they give you an additional view on top of it well",
    "start": "3074319",
    "end": "3079960"
  },
  {
    "text": "if you declare them to be implicit we could make it so that they",
    "start": "3079960",
    "end": "3085280"
  },
  {
    "text": "automatically apply to their underlying type in scope of this declaration whenever this is imported so if I make",
    "start": "3085280",
    "end": "3091839"
  },
  {
    "text": "the Json object extension here implicit that means the members here it's as if they were really just",
    "start": "3091839",
    "end": "3100280"
  },
  {
    "text": "declared on data object they're extension methods and so through this sneaky kind",
    "start": "3100280",
    "end": "3106960"
  },
  {
    "text": "of back door we've just made extension everything right because now I can",
    "start": "3106960",
    "end": "3112480"
  },
  {
    "text": "declare a thing that wraps any other thing with random fun as long as there no new state right random can even they",
    "start": "3112480",
    "end": "3119839"
  },
  {
    "text": "can be static state but random function members static instance indexers operators maybe Constructors",
    "start": "3119839",
    "end": "3126520"
  },
  {
    "text": "whatever additional stuff and I can just make it implicit and then everything of type data object",
    "start": "3126520",
    "end": "3133400"
  },
  {
    "text": "has that so I'm saying right around here in this in this body of code where I've imported or declared this typ this",
    "start": "3133400",
    "end": "3140480"
  },
  {
    "text": "extension data objects have a two Json and a fromjson the two Json is an instance it's like an instance method so",
    "start": "3140480",
    "end": "3146760"
  },
  {
    "text": "it's like extension methods today but the other one's a static one right um so I can say I can go to my data object and",
    "start": "3146760",
    "end": "3153200"
  },
  {
    "text": "scope of this declaration say hey um or to my I can say data object dot um and",
    "start": "3153200",
    "end": "3159480"
  },
  {
    "text": "then um call from Json and get a data object",
    "start": "3159480",
    "end": "3165040"
  },
  {
    "text": "back so extension everything um maybe in",
    "start": "3165040",
    "end": "3170119"
  },
  {
    "text": "the distant future even they can even Implement interfaces on behalf of the underlying types but uh that for that's",
    "start": "3170119",
    "end": "3176880"
  },
  {
    "text": "for another day so uh I'll take one quick question",
    "start": "3176880",
    "end": "3182119"
  },
  {
    "text": "if there is one yeah there sorry H you had your hand up as well um we might get",
    "start": "3182119",
    "end": "3187319"
  },
  {
    "text": "both so I guess um what would be the advantage of using these particularly explicit ones I've just like a class",
    "start": "3187319",
    "end": "3193359"
  },
  {
    "text": "extension class definition extends what would be the advantage of using these extensions over say like just use a",
    "start": "3193359",
    "end": "3198960"
  },
  {
    "text": "class that extends the other object um well if you use a class you mean like in",
    "start": "3198960",
    "end": "3204680"
  },
  {
    "text": "in an inheritance sense because this applies to existing object of that other type right if you if you inherit it be",
    "start": "3204680",
    "end": "3211960"
  },
  {
    "text": "it'll feel like inheritance in that sense right you look you look names up on it you'll look in that one first and then you'll look up the chain but you",
    "start": "3211960",
    "end": "3219079"
  },
  {
    "text": "don't have to inherit that other class that you don't own and somehow make sure",
    "start": "3219079",
    "end": "3225319"
  },
  {
    "text": "that all objects get instantiated as your thing instead of that other thing like all existing objects that get created elsewhere in your system this is",
    "start": "3225319",
    "end": "3232079"
  },
  {
    "text": "a way to just like existing objects of existing types you can put on your special glasses and you can you can see",
    "start": "3232079",
    "end": "3238359"
  },
  {
    "text": "extra things it's sort of um it's like yeah like duck duck typing",
    "start": "3238359",
    "end": "3245720"
  },
  {
    "text": "but not quite hey quick question there",
    "start": "3245720",
    "end": "3250119"
  },
  {
    "text": "yeah it's so it's the point is it's a it's a weird mix between inheritance and",
    "start": "3270280",
    "end": "3275680"
  },
  {
    "text": "extension methods and there was one more thing and an aliasing right and it is",
    "start": "3275680",
    "end": "3281880"
  },
  {
    "text": "but it's sort of like we've been cooking on this for a long time and sort of like a unifying theory of how you can look at",
    "start": "3281880",
    "end": "3290799"
  },
  {
    "text": "things you don't own but give them your own kind of slant",
    "start": "3290799",
    "end": "3296960"
  },
  {
    "text": "and sometimes you want to do that explicitly say for only some of those objects of the type you don't own so per",
    "start": "3296960",
    "end": "3302280"
  },
  {
    "text": "instance per value and sometimes you want to do it generally say I just know more about these things I just know that",
    "start": "3302280",
    "end": "3308599"
  },
  {
    "text": "these diction that dictionaries can be converted to Jason the the guys wrote the dictionar didn't know that it was",
    "start": "3308599",
    "end": "3313920"
  },
  {
    "text": "written before Jason was invented or something right you know just didn't care about Jason but I can add that",
    "start": "3313920",
    "end": "3319240"
  },
  {
    "text": "enhanced View and that way I can do layering and compos software composition and so on in new ways uh that give me",
    "start": "3319240",
    "end": "3326160"
  },
  {
    "text": "more more freedom um and the the BCL are linning up to have various new",
    "start": "3326160",
    "end": "3331240"
  },
  {
    "text": "Frameworks kind of use this for layering as well like you you can put things on some core type where they're",
    "start": "3331240",
    "end": "3337720"
  },
  {
    "text": "discoverable but they only show up when when the domain that they're about",
    "start": "3337720",
    "end": "3343880"
  },
  {
    "text": "is imported as well or they only show up on certain generic instantiations of",
    "start": "3343880",
    "end": "3349079"
  },
  {
    "text": "those types or when certain constraints are met or something like that and we can express all of that so I think",
    "start": "3349079",
    "end": "3354880"
  },
  {
    "text": "that's pretty cool but it would work with steel classes because",
    "start": "3354880",
    "end": "3360200"
  },
  {
    "text": "you're not inheriting and you don't get like special access either protector or anything you won't get at that like you're looking that the um extension is",
    "start": "3360200",
    "end": "3367200"
  },
  {
    "text": "looking at it from the outside just like anyone else that it doesn't get special privileges it's all just like a magic trick to make it you know make it show",
    "start": "3367200",
    "end": "3374599"
  },
  {
    "text": "up and be nice but I I want to get to one more thing and we're like three minutes out so let's talk about unions",
    "start": "3374599",
    "end": "3382599"
  },
  {
    "text": "okay um they're not going to be in C 133 for sure this thing might but they are",
    "start": "3382599",
    "end": "3388799"
  },
  {
    "text": "not going to be but we've moved from a passive stance of oo that is very",
    "start": "3388799",
    "end": "3395200"
  },
  {
    "text": "confusing and there are many difficult questions let's not talk about them like you know classic strinberg family style",
    "start": "3395200",
    "end": "3402559"
  },
  {
    "text": "um to actively talking about the challenges of Union types okay",
    "start": "3402559",
    "end": "3409200"
  },
  {
    "text": "now a lot of people say I want unions in C and some people come from a functional background and they just love",
    "start": "3409200",
    "end": "3414880"
  },
  {
    "text": "discriminated unions in functional languages like f or whatever and wouldn't it be cool if you had those in C because they can do some things for",
    "start": "3414880",
    "end": "3421359"
  },
  {
    "text": "you that you know are nice and some people come from like a typescript like background they no no no no we want type",
    "start": "3421359",
    "end": "3427520"
  },
  {
    "text": "unions we want these Anonymous things where you can just say int or string and um and you can say that anywhere and",
    "start": "3427520",
    "end": "3433240"
  },
  {
    "text": "that just means it's either an end or string no declaration needed you know it's just kind of like a",
    "start": "3433240",
    "end": "3439480"
  },
  {
    "text": "a so those are seemingly very different and why would you even actually want any",
    "start": "3439480",
    "end": "3445039"
  },
  {
    "text": "of them and so on so so but people keep asking for it so we're like okay what what do you want what what what are you",
    "start": "3445039",
    "end": "3450240"
  },
  {
    "text": "expecting from this and so on we've been kind of um following that down that rabbit hole and and um just to quickly",
    "start": "3450240",
    "end": "3457680"
  },
  {
    "text": "and really have drawn no solid conclusions yet but um you know the to",
    "start": "3457680",
    "end": "3463319"
  },
  {
    "text": "start at sort of like the functional style discriminated Union that is when you look at a functional language that",
    "start": "3463319",
    "end": "3469359"
  },
  {
    "text": "is what they have instead of classes okay that and hierarchies it's their core abstraction mechanism for when they",
    "start": "3469359",
    "end": "3475480"
  },
  {
    "text": "want to describe a family of related types that have different shapes so they have it it's not like a a yes and thing",
    "start": "3475480",
    "end": "3482119"
  },
  {
    "text": "it is their core abstraction mechanism we already have classes okay so it's a big ass thing that you know it's a core",
    "start": "3482119",
    "end": "3488400"
  },
  {
    "text": "thing it's it's okay for it to be a big language feature um so you know I I declare",
    "start": "3488400",
    "end": "3493480"
  },
  {
    "text": "something like this just made up some syntax it's a union you know it has some cases and when you have a case well you",
    "start": "3493480",
    "end": "3499039"
  },
  {
    "text": "can you can create a person to be of the case student that means to have a shape",
    "start": "3499039",
    "end": "3504160"
  },
  {
    "text": "of a student and then you know I can do pattern matching we already stole pattern matching so we're good here so I",
    "start": "3504160",
    "end": "3509680"
  },
  {
    "text": "can um so I can say you know person switch um and then if it's a um if it's",
    "start": "3509680",
    "end": "3518599"
  },
  {
    "text": "a teacher I can do one thing but you know because teacher is not a type it's",
    "start": "3518599",
    "end": "3524359"
  },
  {
    "text": "a case it's just a tag I have to immediately deconstruct it into the things it's made of so I have to say",
    "start": "3524359",
    "end": "3529440"
  },
  {
    "text": "teacher of VAR name comma VAR topic and then I can then I can",
    "start": "3529440",
    "end": "3536960"
  },
  {
    "text": "return something like whatever string we can con coct of that and I'm sure I'm short of time on time so I'm not going",
    "start": "3536960",
    "end": "3542480"
  },
  {
    "text": "to I'm going to Fumble instead um and you know and I could say student and do",
    "start": "3542480",
    "end": "3548319"
  },
  {
    "text": "the same thing and and notice that I'm not saying person. student because typically these things come with like",
    "start": "3548319",
    "end": "3554920"
  },
  {
    "text": "magic bringing the tags into the big scope for when you're pattern matching maybe even for when you're creating so",
    "start": "3554920",
    "end": "3561119"
  },
  {
    "text": "you could just say say this and you see this is all working because we I implemented this in C yesterday",
    "start": "3561119",
    "end": "3567799"
  },
  {
    "text": "um and you know I could do the same thing for for student there string name again okay that's a little bit of a",
    "start": "3567799",
    "end": "3574480"
  },
  {
    "text": "redundancy there but that's that's fine and ID maybe I don't care about the other one that discards do work here so",
    "start": "3574480",
    "end": "3580760"
  },
  {
    "text": "you know whatever um so and now if this was actually real because there's a Clos",
    "start": "3580760",
    "end": "3587119"
  },
  {
    "text": "set of cases this warning saying hey you haven't covered all the cases would go away and say because the big thing that",
    "start": "3587119",
    "end": "3594760"
  },
  {
    "text": "you get with this is exhaustive like you can have an exhaustive pattern match and you know you've dealt with all",
    "start": "3594760",
    "end": "3599960"
  },
  {
    "text": "the cases you don't have need the or else thing at the bottom that you know what should you do there really um so um",
    "start": "3599960",
    "end": "3608319"
  },
  {
    "text": "so it' be really cool if this worked but obviously it doesn't the reason it works here is because I actually just declared",
    "start": "3608319",
    "end": "3614520"
  },
  {
    "text": "some classes you know you can see my backing you know the thing running behind the scenes here is just that it's record classes right so they get",
    "start": "3614520",
    "end": "3620760"
  },
  {
    "text": "deconstruction automatically and they nested so and I and I have a using static so that",
    "start": "3620760",
    "end": "3626480"
  },
  {
    "text": "uh these things are yeah I'm just mucking this up to show you the experience but when you think about it",
    "start": "3626480",
    "end": "3631920"
  },
  {
    "text": "I'm mucking it up with classes but but isn't it like actually if we're trying to merge this into an optic programming",
    "start": "3631920",
    "end": "3637680"
  },
  {
    "text": "language shouldn't they actually be shouldn't these guys actually just be types why do I need to have a new thing called tax and they can also be",
    "start": "3637680",
    "end": "3643559"
  },
  {
    "text": "deconstructed just like classes already can and so and actually when you think about it",
    "start": "3643559",
    "end": "3649960"
  },
  {
    "text": "if we have classes declared for these couldn't we just like couldn't we just do them as type unions more like",
    "start": "3649960",
    "end": "3655960"
  },
  {
    "text": "typescript style couldn't I just say you know um student or teacher something like",
    "start": "3655960",
    "end": "3661640"
  },
  {
    "text": "student um or teacher and maybe you know that's a little bit too ambiguous and",
    "start": "3661640",
    "end": "3667680"
  },
  {
    "text": "and you have to put friends or something could I have a syntax it just says hey this a student or a teacher and then",
    "start": "3667680",
    "end": "3673359"
  },
  {
    "text": "somebody chose to wrap to have a teacher and a student",
    "start": "3673359",
    "end": "3678440"
  },
  {
    "text": "class and to wrap the data in those and they become the name types they become like tags and that way you can sort of",
    "start": "3678440",
    "end": "3684520"
  },
  {
    "text": "see like tag unions and type units really are sort of the same thing I don't need to specifically declare",
    "start": "3684520",
    "end": "3691640"
  },
  {
    "text": "student and teacher in in as part of one specific family I could just have them as generalized types and I could um let",
    "start": "3691640",
    "end": "3699039"
  },
  {
    "text": "actually you know have a um have a mock type for them instead so we don't get so many squiggles I could add student or",
    "start": "3699039",
    "end": "3705640"
  },
  {
    "text": "teacher or int right and they can be and now it would the green thing would show up again here and I would um and um I",
    "start": "3705640",
    "end": "3715440"
  },
  {
    "text": "don't know why get a red squiggle but out of times oh the parents yeah the parents we go and so I would just say so",
    "start": "3715440",
    "end": "3723039"
  },
  {
    "text": "now we would say hey you're missing int so I could say okay if it's five do this if it's any other int I don't care which",
    "start": "3723039",
    "end": "3730359"
  },
  {
    "text": "you know do something else and now again it would be exhausted exhaustive and and it wouldn't bother me anymore so really",
    "start": "3730359",
    "end": "3737039"
  },
  {
    "text": "these two are are kind of related and maybe instead of picking one and kind of",
    "start": "3737039",
    "end": "3742359"
  },
  {
    "text": "closing the door on the other we can find a way to embrace them both a unified thing where cases are really",
    "start": "3742359",
    "end": "3748520"
  },
  {
    "text": "types and tag unions are really type unions with name",
    "start": "3748520",
    "end": "3754760"
  },
  {
    "text": "types and I'll leave you there because we're a little over time um but that's kind of for further out in the future",
    "start": "3754760",
    "end": "3761760"
  },
  {
    "text": "but just to let you know we're working on this and we're think trying to think big thoughts and unifying thoughts to make this Pleasant and not overwhelming",
    "start": "3761760",
    "end": "3769359"
  },
  {
    "text": "in C to make it like a nice little add-on rather than oh this whole new functional programming thing that you",
    "start": "3769359",
    "end": "3774680"
  },
  {
    "text": "have to choose up front I'm am I am I going object right am I going functional I'm doomed forever to stay where I I",
    "start": "3774680",
    "end": "3780079"
  },
  {
    "text": "pick so that's kind of that's the latest okay thank you",
    "start": "3780079",
    "end": "3788000"
  }
]