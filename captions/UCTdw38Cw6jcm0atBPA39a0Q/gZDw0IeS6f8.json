[
  {
    "text": "hi everyone and welcome to NDC Sydney 2024 I hope you had really good time so",
    "start": "5720",
    "end": "11480"
  },
  {
    "text": "far and today I'm going to talk about harmonious dance of EF core and SQL",
    "start": "11480",
    "end": "18439"
  },
  {
    "text": "server and what I wanted to achieve here is to give you some of the knowledge",
    "start": "18439",
    "end": "24640"
  },
  {
    "text": "that quite a few people already know but they're not quite aware of how does that",
    "start": "24640",
    "end": "32480"
  },
  {
    "text": "impact uh the application or EF core or what actually is happening behind the",
    "start": "32480",
    "end": "38280"
  },
  {
    "text": "scenes and I'm going to open up a little bit about that and I'm also going to",
    "start": "38280",
    "end": "43800"
  },
  {
    "text": "show you a few things uh that I really love which is",
    "start": "43800",
    "end": "49520"
  },
  {
    "text": "logging and I'm going to show you some indexing and few more other",
    "start": "49520",
    "end": "55520"
  },
  {
    "text": "things uh I am Y kka and I know this is very easy to anounce but you can call me",
    "start": "55520",
    "end": "61879"
  },
  {
    "text": "JK as well you can follow me in all of those socials um I am a host at Global",
    "start": "61879",
    "end": "69400"
  },
  {
    "text": "AI the podcast funnny enough we actually have a panel happening in I believe two",
    "start": "69400",
    "end": "76400"
  },
  {
    "text": "hours uh we're going to talk about our podcast and I'm predominantly AET and",
    "start": "76400",
    "end": "84159"
  },
  {
    "text": "efcore developer um so I work with efcore uh every day",
    "start": "84159",
    "end": "90520"
  },
  {
    "text": "and sadly also with ef6 and that NET Framework um you might also have seen",
    "start": "90520",
    "end": "97880"
  },
  {
    "text": "I'm a Microsoft AI MVP and I like to be like the AI generalist that tries to",
    "start": "97880",
    "end": "104680"
  },
  {
    "text": "look at problems and find ways of solving them not with specific",
    "start": "104680",
    "end": "109759"
  },
  {
    "text": "Technologies but trying to think about what would be a good solution and then try to find the right",
    "start": "109759",
    "end": "117200"
  },
  {
    "text": "technology all right so if you're interested in rewards you can download",
    "start": "117200",
    "end": "122880"
  },
  {
    "text": "uh this app and at the end I'm going to show you another QR code where you can get the points uh if you want to redown",
    "start": "122880",
    "end": "130720"
  },
  {
    "text": "the app uh later I can show you the QR code later and this uh talk",
    "start": "130720",
    "end": "138239"
  },
  {
    "text": "is kind of not kind of successor it's uh but works really well with my previous",
    "start": "138239",
    "end": "145760"
  },
  {
    "text": "talk uh common mistakes in EF core where I talk about about specifically for EF",
    "start": "145760",
    "end": "152000"
  },
  {
    "text": "core what the mistakes that I have seen uh in production uh in other people Source",
    "start": "152000",
    "end": "158720"
  },
  {
    "text": "codes and sometimes also the mistakes I done myself uh but th those are mostly",
    "start": "158720",
    "end": "166080"
  },
  {
    "text": "focused on EF core today we're going to focus on how EF core works with SQL",
    "start": "166080",
    "end": "173400"
  },
  {
    "text": "server and why specifically SQL Server SQL Server is the most commonly used uh",
    "start": "173400",
    "end": "180000"
  },
  {
    "text": "database with ef core all right so first off we're going",
    "start": "180000",
    "end": "186200"
  },
  {
    "text": "to start off with the logs I'm going to show you some uh how to set up Telemetry uh and then we're going to",
    "start": "186200",
    "end": "193720"
  },
  {
    "text": "switch to the magic of SQL I'm going to show you a little bit how SQL is",
    "start": "193720",
    "end": "199519"
  },
  {
    "text": "generated behind the scenes and how a few little changes uh ends up with quite",
    "start": "199519",
    "end": "206480"
  },
  {
    "text": "a few with select statements have anyone investigated the generated EF",
    "start": "206480",
    "end": "213799"
  },
  {
    "text": "queries we have a few hands have any of you looked at them and say why is it",
    "start": "213799",
    "end": "220640"
  },
  {
    "text": "having so many select statements and PRS and uh braces and stuff like",
    "start": "220640",
    "end": "226439"
  },
  {
    "text": "that well hopefully I'll be able to demystify that a little bit today and at",
    "start": "226439",
    "end": "232200"
  },
  {
    "text": "the end I'm going to show you how you can use indexing uh with ef because this",
    "start": "232200",
    "end": "239200"
  },
  {
    "text": "is one of the most underutilized features that we need to use as efco",
    "start": "239200",
    "end": "246159"
  },
  {
    "text": "developers efco will not magically solve our database um problems but we don't",
    "start": "246159",
    "end": "253560"
  },
  {
    "text": "need to write Ro SQL to solve them all right so who thinks logging is",
    "start": "253560",
    "end": "262759"
  },
  {
    "text": "important almost everyone that's good so I'll just uh go real quick through so",
    "start": "262759",
    "end": "270120"
  },
  {
    "text": "why logging is important at least for me well first thing I want to know what happened like for instance a web request",
    "start": "270120",
    "end": "277840"
  },
  {
    "text": "crashed then I want to understand why it happened in for instance imagine that",
    "start": "277840",
    "end": "284039"
  },
  {
    "text": "something got locked up uh in the SQL database so that's interesting right now",
    "start": "284039",
    "end": "290520"
  },
  {
    "text": "I understand what happened and why but then I want to know when now the reason",
    "start": "290520",
    "end": "298080"
  },
  {
    "text": "why I want to know when is because did it happen at the peak time",
    "start": "298080",
    "end": "304919"
  },
  {
    "text": "or did it happen sometimes in the midnight when nobody is even supposed to be using the application right you look",
    "start": "304919",
    "end": "311759"
  },
  {
    "text": "at the problem differently so if it happens in a peak time you might",
    "start": "311759",
    "end": "317520"
  },
  {
    "text": "actually get different uh errors because there's so many operations going on and",
    "start": "317520",
    "end": "322720"
  },
  {
    "text": "this might be only a symptom of the real problem so this is why it's important to know",
    "start": "322720",
    "end": "328440"
  },
  {
    "text": "when and lastly you also want to know where it happened usually in your",
    "start": "328440",
    "end": "335199"
  },
  {
    "text": "code uh so in this case it was just invoice service and update locked invoice so I know uh I need to know this",
    "start": "335199",
    "end": "343639"
  },
  {
    "text": "is the place where I need to fix the problem now here I have an example of a",
    "start": "343639",
    "end": "350479"
  },
  {
    "text": "Telemetry Trace uh and you know don't look at every anything else but what is",
    "start": "350479",
    "end": "356600"
  },
  {
    "text": "important here is this is the what is the except ction right that's what happened it",
    "start": "356600",
    "end": "362440"
  },
  {
    "text": "crashed it happened on this time uh this is why it",
    "start": "362440",
    "end": "368639"
  },
  {
    "text": "happened and this is roughly the location where it happened and this is",
    "start": "368639",
    "end": "373880"
  },
  {
    "text": "very important to know now the issues sometimes that we have is that we don't",
    "start": "373880",
    "end": "379759"
  },
  {
    "text": "get all of that when we're dealing with SQL and when we're dealing with ef and",
    "start": "379759",
    "end": "385360"
  },
  {
    "text": "that's this is where I'm going to show you how you can do that so first off what we want to do is",
    "start": "385360",
    "end": "391919"
  },
  {
    "text": "we want to do uh solve this problem in stages so first we want to have",
    "start": "391919",
    "end": "397880"
  },
  {
    "text": "Telemetry uh we usually go for application insights but open Telemetry",
    "start": "397880",
    "end": "403680"
  },
  {
    "text": "is becoming very very good because it also supports application insights but",
    "start": "403680",
    "end": "409000"
  },
  {
    "text": "you can decide to use whatever else you want to use behind the scenes you don't have to limit yourself to application",
    "start": "409000",
    "end": "415160"
  },
  {
    "text": "Insight you can even uh do a on Prem solution if you like to",
    "start": "415160",
    "end": "421039"
  },
  {
    "text": "and the reason why you want to tackle Telemetry is because this is what you",
    "start": "421039",
    "end": "426240"
  },
  {
    "text": "get by default uh this is a Telemetry for SQL",
    "start": "426240",
    "end": "431440"
  },
  {
    "text": "and what we get is it happened now if you have like uh a 100",
    "start": "431440",
    "end": "438000"
  },
  {
    "text": "SQL happening uh SQL statements happening in one um one",
    "start": "438000",
    "end": "443840"
  },
  {
    "text": "request you could potentially count how many of them uh happened and then try to",
    "start": "443840",
    "end": "449960"
  },
  {
    "text": "reverse engineer to figure out where in the code that query might be uh but that",
    "start": "449960",
    "end": "455319"
  },
  {
    "text": "can take very long time and if it's in deterministic you might not be able to find uh what this query is and this is",
    "start": "455319",
    "end": "463120"
  },
  {
    "text": "the query that happened right before the crash so it's quite important to know",
    "start": "463120",
    "end": "468240"
  },
  {
    "text": "what that query is so how do we solve this well we can go to the open",
    "start": "468240",
    "end": "476639"
  },
  {
    "text": "Telemetry uh we can install the open Telemetry there's a lot of instructions",
    "start": "476639",
    "end": "481919"
  },
  {
    "text": "on how to do it uh this one specifically uh for application insights if you",
    "start": "481919",
    "end": "487599"
  },
  {
    "text": "haven't tried open Telemetry I strongly encourage you to have a look into it",
    "start": "487599",
    "end": "493800"
  },
  {
    "text": "because especially if you combine it with Spire you get really really awesome",
    "start": "493800",
    "end": "499199"
  },
  {
    "text": "dashboards uh locally when you develop and it's really",
    "start": "499199",
    "end": "504680"
  },
  {
    "text": "awesome so what happens is once you config open telemetry you get this we",
    "start": "504680",
    "end": "511879"
  },
  {
    "text": "got the SQL over here so now you get a bit of an idea okay we inserted",
    "start": "511879",
    "end": "517800"
  },
  {
    "text": "something that's that's something right but it doesn't tell us um you know",
    "start": "517800",
    "end": "525000"
  },
  {
    "text": "a lot like um we might need a little bit more information what if that query is",
    "start": "525000",
    "end": "530560"
  },
  {
    "text": "not a problem what is the queries before it so what is the flow uh of that what",
    "start": "530560",
    "end": "537600"
  },
  {
    "text": "data are we trying to uh fch logically we're not interested in the exact data",
    "start": "537600",
    "end": "544160"
  },
  {
    "text": "well we are interested in queries in a logical",
    "start": "544160",
    "end": "549760"
  },
  {
    "text": "sense and what we can do first off is we can enable logging in EF core what this",
    "start": "549760",
    "end": "558320"
  },
  {
    "text": "allows us to do is to be able to get uh queries inside your logger so that",
    "start": "558320",
    "end": "567040"
  },
  {
    "text": "allows you to have um SQL queries you see what's happening on your local",
    "start": "567040",
    "end": "572920"
  },
  {
    "text": "machine you don't have to deploy it to production or set up an entire Spire um",
    "start": "572920",
    "end": "579560"
  },
  {
    "text": "um setup and you'll able to get the SQL uh statements what you can even do is",
    "start": "579560",
    "end": "585720"
  },
  {
    "text": "you can have this enabled only for local development and then disable it for production if you worry about uh having",
    "start": "585720",
    "end": "592560"
  },
  {
    "text": "too much information in your locks uh and here is also we have rules",
    "start": "592560",
    "end": "598680"
  },
  {
    "text": "for uh tracing if you're interested in that and what is also interesting is uh",
    "start": "598680",
    "end": "607480"
  },
  {
    "text": "open Telemetry actually is going to give us an extension where we can add uh EF",
    "start": "607480",
    "end": "615040"
  },
  {
    "text": "core tracing uh directly in open Telemetry and they're also adding",
    "start": "615040",
    "end": "620600"
  },
  {
    "text": "console extension uh which means that we no no longer need to manually configure",
    "start": "620600",
    "end": "626320"
  },
  {
    "text": "all of the stuff so in the future this is currently preview in the future we",
    "start": "626320",
    "end": "632240"
  },
  {
    "text": "might only need two steps one is to configure the Telemetry and the next",
    "start": "632240",
    "end": "639680"
  },
  {
    "text": "step adding additional context in in the code for your secet queries for the EF",
    "start": "639680",
    "end": "646320"
  },
  {
    "text": "core queries now what I mean that by that is when we're trying to execute an",
    "start": "646320",
    "end": "653040"
  },
  {
    "text": "EF query we can add tag WID and what that tag WID does it adds that uh label",
    "start": "653040",
    "end": "662519"
  },
  {
    "text": "over there into your SQL uh statement so this is something you can observe in",
    "start": "662519",
    "end": "668800"
  },
  {
    "text": "your SQL profiler this is something your locks will have in this is something",
    "start": "668800",
    "end": "674320"
  },
  {
    "text": "when you analyze your SQL uh queries you will have",
    "start": "674320",
    "end": "680600"
  },
  {
    "text": "that now if you make a a unique label for every single SLE query you'll be",
    "start": "680600",
    "end": "688320"
  },
  {
    "text": "able to go go to SQL Server make top 10 requests that are the",
    "start": "688320",
    "end": "693560"
  },
  {
    "text": "slow the slowest to top 10 cares that are the slowest take this first line",
    "start": "693560",
    "end": "699720"
  },
  {
    "text": "copy control shift F in Visual Studio vs or RAR and find the exact query that is",
    "start": "699720",
    "end": "707839"
  },
  {
    "text": "the worst offender it may take you 5 Seconds to find it now if you have a very comp uh",
    "start": "707839",
    "end": "715160"
  },
  {
    "text": "how many of you have spent a lot of time trying to look at the SQL query and try",
    "start": "715160",
    "end": "721040"
  },
  {
    "text": "to figure out where that encode is we have a few hands I have one case where",
    "start": "721040",
    "end": "728040"
  },
  {
    "text": "we spended more than a day because we had a few queries that were very similar",
    "start": "728040",
    "end": "734040"
  },
  {
    "text": "and they were different in just a few uh few minor ways and we just couldn't",
    "start": "734040",
    "end": "740399"
  },
  {
    "text": "figure out which one of them is with this it took us 5 Seconds it just",
    "start": "740399",
    "end": "745800"
  },
  {
    "text": "simplifies a lot of debugging and when things really mad this can save your",
    "start": "745800",
    "end": "753399"
  },
  {
    "text": "weakend like most of the issues that happen happened when uh a product",
    "start": "753399",
    "end": "758680"
  },
  {
    "text": "success uh uh succeeds and all of the sudden your application is under much",
    "start": "758680",
    "end": "764279"
  },
  {
    "text": "higher load than usual and then you have curves that misbehave and the issue that",
    "start": "764279",
    "end": "770959"
  },
  {
    "text": "I uh find a lot of times is everyone is panicking because they can see there's a",
    "start": "770959",
    "end": "777360"
  },
  {
    "text": "query that is causing the problem but there's too many parts of the code where",
    "start": "777360",
    "end": "782959"
  },
  {
    "text": "has runs the similar query and they don't know which one is it uh that's one",
    "start": "782959",
    "end": "788160"
  },
  {
    "text": "of the problem is they don't uh know exactly how that particular link is generated into SQL but the other one is",
    "start": "788160",
    "end": "795600"
  },
  {
    "text": "if you have massive queries because usually that happens with a pretty big queries it's not trivial to uh compare",
    "start": "795600",
    "end": "804440"
  },
  {
    "text": "SQL with link all right but you know what we can",
    "start": "804440",
    "end": "809680"
  },
  {
    "text": "do better why would you want to write everything by hand we have tag withd",
    "start": "809680",
    "end": "815519"
  },
  {
    "text": "side uh call site this was added in ef6 and what this allows you to do is it",
    "start": "815519",
    "end": "822320"
  },
  {
    "text": "just adds you a file path and uh the line number of that query uh one thing",
    "start": "822320",
    "end": "829600"
  },
  {
    "text": "to keep in mind uh this here is generated uh based on when uh this",
    "start": "829600",
    "end": "835639"
  },
  {
    "text": "method was called not when the qu was EX that this something to uh keep in mind",
    "start": "835639",
    "end": "842839"
  },
  {
    "text": "but personally I don't like this and there's two reasons for it one if this",
    "start": "842839",
    "end": "848720"
  },
  {
    "text": "is actively developed application my uh the queries might be uh moving around",
    "start": "848720",
    "end": "853839"
  },
  {
    "text": "all the time like you know we are refactoring the class making things simpler so the line number might change",
    "start": "853839",
    "end": "860680"
  },
  {
    "text": "all the time and the other problem is this part here the part file PA that's",
    "start": "860680",
    "end": "866880"
  },
  {
    "text": "going to change constantly as well so now I need if I want to automate this part I need to have a passer that tells",
    "start": "866880",
    "end": "873759"
  },
  {
    "text": "me uh the one thing that I'm interested it in it's the way way it executed the",
    "start": "873759",
    "end": "880720"
  },
  {
    "text": "class us in a lot of cases we have quite unique names of the classes so if you",
    "start": "880720",
    "end": "886639"
  },
  {
    "text": "have the class name you roughly know where the uh this uh SQL query uh",
    "start": "886639",
    "end": "892399"
  },
  {
    "text": "exists so what I did uh instead of course I did my own thing now",
    "start": "892399",
    "end": "899560"
  },
  {
    "text": "actually this is a bit of a lie because I did this in efq 2.2 way before we had",
    "start": "899560",
    "end": "906320"
  },
  {
    "text": "uh the uh tag withd call uh what was it",
    "start": "906320",
    "end": "911600"
  },
  {
    "text": "tag withd call site it's hard to remember instead I created tag with",
    "start": "911600",
    "end": "918759"
  },
  {
    "text": "context which I think it's much easier to remember because we tagging with",
    "start": "918759",
    "end": "924040"
  },
  {
    "text": "context with trying to add some additional information to the queries",
    "start": "924040",
    "end": "929600"
  },
  {
    "text": "and what I did here is here I have a label you can optionally say I put",
    "start": "929600",
    "end": "935440"
  },
  {
    "text": "nothing in it and what it does it automatically generates for you",
    "start": "935440",
    "end": "942079"
  },
  {
    "text": "the class name the method name and whatever label you're at now you have a very unique uh query",
    "start": "942079",
    "end": "950480"
  },
  {
    "text": "and the reason why you want the label is imagine that you have more than one",
    "start": "950480",
    "end": "955959"
  },
  {
    "text": "query in your method now if if you have like four uh queries that have the same",
    "start": "955959",
    "end": "962120"
  },
  {
    "text": "name uh you might be able to figure out which one it is but if you just write a",
    "start": "962120",
    "end": "967720"
  },
  {
    "text": "simple text over here you know exactly which one it is and there's also a hidden benefit to this this is not quite",
    "start": "967720",
    "end": "975240"
  },
  {
    "text": "a comment but it can almost function like one so this tells other developers",
    "start": "975240",
    "end": "981680"
  },
  {
    "text": "what were your intentions so here it was counting cells so if somebody changes",
    "start": "981680",
    "end": "987680"
  },
  {
    "text": "and this is no longer count and somebody looks at it it says counting sales but",
    "start": "987680",
    "end": "992759"
  },
  {
    "text": "it does it fetches some invoices what's going on you can then look at the",
    "start": "992759",
    "end": "998240"
  },
  {
    "text": "history and see what's going on and then you might realize hey we've done all of",
    "start": "998240",
    "end": "1004000"
  },
  {
    "text": "these changes but we haven't really updated our TX we haven't really updated",
    "start": "1004000",
    "end": "1009680"
  },
  {
    "text": "the intentions behind our code so we might want to refactor this part to be",
    "start": "1009680",
    "end": "1015440"
  },
  {
    "text": "still true with our original intentions or update it to our current",
    "start": "1015440",
    "end": "1020800"
  },
  {
    "text": "intentions so if you're interested in the extensions uh there's going to be uh",
    "start": "1020800",
    "end": "1026079"
  },
  {
    "text": "this link down below for ssw rules tag WID um and there's going to be linked to",
    "start": "1026079",
    "end": "1032798"
  },
  {
    "text": "have this it's a pretty uh simple uh thing the the interesting part here is",
    "start": "1032799",
    "end": "1039558"
  },
  {
    "text": "this is supported in NET Framework still so it might not be the most net 8 optimized code but it is highly",
    "start": "1039559",
    "end": "1046720"
  },
  {
    "text": "compatible and yeah so now we have done these three",
    "start": "1046720",
    "end": "1053080"
  },
  {
    "text": "stages of logging uh now you could also say Telemetry because open Telemetry is",
    "start": "1053080",
    "end": "1059120"
  },
  {
    "text": "going to replace all of that uh very soon so what happens once you manage to",
    "start": "1059120",
    "end": "1066600"
  },
  {
    "text": "do all of that what is the impact well I can go to application inside and I can just go to a um a",
    "start": "1066600",
    "end": "1075559"
  },
  {
    "text": "request an HTTP request and I can just say ah yeah we have this uh SQL over",
    "start": "1075559",
    "end": "1081159"
  },
  {
    "text": "here and ah yeah it tries to get EMP any",
    "start": "1081159",
    "end": "1086200"
  },
  {
    "text": "yeah we roughly know what's going on here and it's like here oh okay it seems",
    "start": "1086200",
    "end": "1092039"
  },
  {
    "text": "like we're fetching a client yeah we're fetching a client that's cool uh and over here we're getting a billable type",
    "start": "1092039",
    "end": "1099360"
  },
  {
    "text": "so now I can I don't have to have this code on the right and I don't even have",
    "start": "1099360",
    "end": "1105520"
  },
  {
    "text": "to read the sequel to understand what's going going on I can hide the SQL and",
    "start": "1105520",
    "end": "1111799"
  },
  {
    "text": "still understand what this is supposed to do and the biggest power of this is",
    "start": "1111799",
    "end": "1119200"
  },
  {
    "text": "this is going to be in your SQL server and your SQL profiler everywhere there's",
    "start": "1119200",
    "end": "1124320"
  },
  {
    "text": "a little caveat some of the uh SQL tools will actually crop out the information I",
    "start": "1124320",
    "end": "1130960"
  },
  {
    "text": "believe that if you're trying to do uh execution plan and uh other things it",
    "start": "1130960",
    "end": "1137000"
  },
  {
    "text": "may crop out the comments so keep that in mind but in most of the places it will preserve the",
    "start": "1137000",
    "end": "1143679"
  },
  {
    "text": "comments all right now how many of you found this",
    "start": "1143679",
    "end": "1148799"
  },
  {
    "text": "very useful almost uh 3/4s of the room that's",
    "start": "1148799",
    "end": "1155039"
  },
  {
    "text": "really good now we're going to go to more interesting",
    "start": "1155039",
    "end": "1160840"
  },
  {
    "text": "part the first one was very useful but now it's going to be very",
    "start": "1160840",
    "end": "1166280"
  },
  {
    "text": "interesting you know how does ef generates uh prompts oh sorry not",
    "start": "1166280",
    "end": "1171720"
  },
  {
    "text": "prompts SQL too many a talks um but what I'm going to show you",
    "start": "1171720",
    "end": "1178159"
  },
  {
    "text": "is I'm going to show you a few things on the SQL end and I'm going to show you uh",
    "start": "1178159",
    "end": "1184280"
  },
  {
    "text": "similar uh link um statements and then how it changes",
    "start": "1184280",
    "end": "1190240"
  },
  {
    "text": "through time and specifically I picked up joining uh because joining",
    "start": "1190240",
    "end": "1196480"
  },
  {
    "text": "um joining actually div creates from how we would write it uh the most the quer",
    "start": "1196480",
    "end": "1203760"
  },
  {
    "text": "and then in the end I'm also going to add grouping because I understand that grouping when I ask people what is the",
    "start": "1203760",
    "end": "1211440"
  },
  {
    "text": "thing that you think that doesn't that isn't supported in EF core uh grouping",
    "start": "1211440",
    "end": "1217200"
  },
  {
    "text": "is one of the thing that comes up uh quite frequently they said the goodby",
    "start": "1217200",
    "end": "1222280"
  },
  {
    "text": "doesn't work and I'm going to show you why a lot of people think that",
    "start": "1222280",
    "end": "1229159"
  },
  {
    "text": "all right so first I'm going to start with uh SQL data",
    "start": "1229159",
    "end": "1234400"
  },
  {
    "text": "representation so how many of you are confident to say you know exactly what",
    "start": "1234400",
    "end": "1239559"
  },
  {
    "text": "you're going to see not much confidence you know how",
    "start": "1239559",
    "end": "1245400"
  },
  {
    "text": "many of you are confident what is going to what we going to see here",
    "start": "1245400",
    "end": "1250840"
  },
  {
    "text": "now about half of room well we get getting a very simple table we're just",
    "start": "1250840",
    "end": "1256840"
  },
  {
    "text": "having ID name cont uh and it's a simple one row simple",
    "start": "1256840",
    "end": "1262320"
  },
  {
    "text": "representation right but for eore it's kind of similar but very",
    "start": "1262320",
    "end": "1268960"
  },
  {
    "text": "different here we have a similar uh query over here we are filtering by the",
    "start": "1268960",
    "end": "1275440"
  },
  {
    "text": "uh ala and we're getting one out um we could do two lists to make it",
    "start": "1275440",
    "end": "1281000"
  },
  {
    "text": "uh even more similar um so the only difference here is that here we have top",
    "start": "1281000",
    "end": "1286880"
  },
  {
    "text": "one uh because we we are already expecting to have only one result they cannot be unless you uh",
    "start": "1286880",
    "end": "1296200"
  },
  {
    "text": "unless you configure the database incorrectly there cannot be two uh off offers with id1 so there's no point to",
    "start": "1296200",
    "end": "1303880"
  },
  {
    "text": "do two list but SQL Server doesn't support uh first of default right that's",
    "start": "1303880",
    "end": "1309320"
  },
  {
    "text": "the first difference so this is why here we have top one right the SQL Server d",
    "start": "1309320",
    "end": "1316679"
  },
  {
    "text": "uh actually doesn't support just fetching one thing you just get one",
    "start": "1316679",
    "end": "1322080"
  },
  {
    "text": "row um now the other thing that is uh different here is we have a parameter",
    "start": "1322080",
    "end": "1328440"
  },
  {
    "text": "but this is mostly because this one is written manually we can do this in SQL",
    "start": "1328440",
    "end": "1334080"
  },
  {
    "text": "but because we've written this manually we just chose not to do so but this is",
    "start": "1334080",
    "end": "1339279"
  },
  {
    "text": "the difference right but the data is represented very differently the data in EF in net is",
    "start": "1339279",
    "end": "1348520"
  },
  {
    "text": "represented as an object not as a flat table and this is going to show a big",
    "start": "1348520",
    "end": "1354600"
  },
  {
    "text": "difference once we're going to come to joining tables and what and especially",
    "start": "1354600",
    "end": "1360159"
  },
  {
    "text": "when we look at the grouping now when we joining",
    "start": "1360159",
    "end": "1365760"
  },
  {
    "text": "tables in a SQL ah sorry what we do is",
    "start": "1365760",
    "end": "1371120"
  },
  {
    "text": "very simple left join and we join it with posts and here we have two two additional posts now what's some may see",
    "start": "1371120",
    "end": "1379640"
  },
  {
    "text": "interesting is that the offer is duplicated how many of you think this is",
    "start": "1379640",
    "end": "1386080"
  },
  {
    "text": "normal we have a few hands yeah this is a normal consequence of one too many uh",
    "start": "1386080",
    "end": "1392440"
  },
  {
    "text": "relationships so when you join this is normal now the thing is what if we join",
    "start": "1392440",
    "end": "1399640"
  },
  {
    "text": "more stuff to it here I have a joined with tax of post",
    "start": "1399640",
    "end": "1405840"
  },
  {
    "text": "and that that tax is actually a many to many table so uh multiple posts can have",
    "start": "1405840",
    "end": "1413039"
  },
  {
    "text": "multiple different tags now what is interesting here is",
    "start": "1413039",
    "end": "1418279"
  },
  {
    "text": "this is fairly simple right uh pretty straightforward um we have some",
    "start": "1418279",
    "end": "1424320"
  },
  {
    "text": "duplicates but in most of the cases uh the speed of our SQL service and the",
    "start": "1424320",
    "end": "1430279"
  },
  {
    "text": "connection between the net application and SQL Server is fast enough and SQL",
    "start": "1430279",
    "end": "1436279"
  },
  {
    "text": "Server can stream the data fast enough that this isn't a problem most of the",
    "start": "1436279",
    "end": "1441480"
  },
  {
    "text": "time there are some cases where that is a problem but the more joints you add",
    "start": "1441480",
    "end": "1447039"
  },
  {
    "text": "the more one to many relationships you have the bigger the problem you might",
    "start": "1447039",
    "end": "1452400"
  },
  {
    "text": "have on this end the consequences of that is that once even if secq Server",
    "start": "1452400",
    "end": "1458600"
  },
  {
    "text": "doesn't need to do a lot of work eore might need to do a lot of work to actually go through all of that",
    "start": "1458600",
    "end": "1466120"
  },
  {
    "text": "data but now let's go to so how efco deals with all of that so",
    "start": "1466120",
    "end": "1472200"
  },
  {
    "text": "here we have SIMPLE just I added offer selected similar quer as before nothing",
    "start": "1472200",
    "end": "1479520"
  },
  {
    "text": "too special right and now what I have done",
    "start": "1479520",
    "end": "1484640"
  },
  {
    "text": "is I have added over here posts so I have selected so I'm only fetching the",
    "start": "1484640",
    "end": "1491279"
  },
  {
    "text": "data from the database that I want and over here I said I also want to have",
    "start": "1491279",
    "end": "1496520"
  },
  {
    "text": "posts now what happen here is uh EF core when you set up navigation properties",
    "start": "1496520",
    "end": "1503320"
  },
  {
    "text": "will understand ah okay you want data from that table so it's going to Joint",
    "start": "1503320",
    "end": "1508480"
  },
  {
    "text": "that table for you it's called implicit include and for anyone wondering I'll",
    "start": "1508480",
    "end": "1514080"
  },
  {
    "text": "show explicit include at the end as well um but what might you might be looking",
    "start": "1514080",
    "end": "1520039"
  },
  {
    "text": "at you might probably not look at the lower part the one that I'm currently focusing at you might actually be",
    "start": "1520039",
    "end": "1526399"
  },
  {
    "text": "looking at this part and say what is going on here it's like wouldn't",
    "start": "1526399",
    "end": "1532720"
  },
  {
    "text": "here be just from offer right that would make sense but what's happening is I I",
    "start": "1532720",
    "end": "1539559"
  },
  {
    "text": "actually thought this is a problem this is why is this happening and it took me a while to figure out and a little bit",
    "start": "1539559",
    "end": "1546559"
  },
  {
    "text": "of chiping to realize that what's happening over here is it tries to prefilter this",
    "start": "1546559",
    "end": "1553320"
  },
  {
    "text": "table so what he tries to do is reduce the number of columns that uh the table",
    "start": "1553320",
    "end": "1559880"
  },
  {
    "text": "has the number of rows that the uh table it has before it joins with the t uh",
    "start": "1559880",
    "end": "1567200"
  },
  {
    "text": "with the other table because if we look back to uh to this original squel",
    "start": "1567200",
    "end": "1576000"
  },
  {
    "text": "uh the filtering happens here it doesn't happen uh over here now SQL Server might",
    "start": "1576000",
    "end": "1585120"
  },
  {
    "text": "optimize it so that it doesn't join more uh more data than it needs to but this",
    "start": "1585120",
    "end": "1592120"
  },
  {
    "text": "if you run it without optimization joins everything right and it filters at the",
    "start": "1592120",
    "end": "1597399"
  },
  {
    "text": "very end whereas what's happening over here it filters ahead of time so if you",
    "start": "1597399",
    "end": "1604120"
  },
  {
    "text": "have a lot of data or a lot of columns this actually might be more optimized",
    "start": "1604120",
    "end": "1610679"
  },
  {
    "text": "than the uh the one that we have written manually so this is the context of why",
    "start": "1610679",
    "end": "1617600"
  },
  {
    "text": "we have these weird queries over there because all of that is generated we don't need to write",
    "start": "1617600",
    "end": "1623520"
  },
  {
    "text": "them by hand so now we can do more complex query that do optimization",
    "start": "1623520",
    "end": "1629440"
  },
  {
    "text": "behind the scenes now what happens when we add uh",
    "start": "1629440",
    "end": "1634919"
  },
  {
    "text": "tax to the mix now really cool thing about uh EF core is we don't have to",
    "start": "1634919",
    "end": "1641200"
  },
  {
    "text": "know that it's many too many relationships we we just say hey I just want to have tax name and it it handles",
    "start": "1641200",
    "end": "1649120"
  },
  {
    "text": "everything for us which is really cool but we end up with this now what we have",
    "start": "1649120",
    "end": "1656159"
  },
  {
    "text": "here is if you look at very uh closely you can see here it uses the same",
    "start": "1656159",
    "end": "1661600"
  },
  {
    "text": "strategy inside of here uh and it joins and then it creates another select",
    "start": "1661600",
    "end": "1667000"
  },
  {
    "text": "statement over here to you know reduce the size of the uh table before joining",
    "start": "1667000",
    "end": "1673039"
  },
  {
    "text": "uh and then finally it joins at the end but now when you look at uh at these",
    "start": "1673039",
    "end": "1678519"
  },
  {
    "text": "generated queries I hope you have now a little bit better understanding why uh",
    "start": "1678519",
    "end": "1685000"
  },
  {
    "text": "efco queries are so large and this might actually be in some cases more optimal",
    "start": "1685000",
    "end": "1692200"
  },
  {
    "text": "than the uh more simpler written SQL queries and the reason why they do this",
    "start": "1692200",
    "end": "1697720"
  },
  {
    "text": "is because most of the time nobody will read this as long as you're getting the",
    "start": "1697720",
    "end": "1702960"
  },
  {
    "text": "right results very few are going to look at the SQL query and say ah okay okay",
    "start": "1702960",
    "end": "1708440"
  },
  {
    "text": "this is really horrible unreadable and stuff like that um and this is where you can use Chad GPT to then help you",
    "start": "1708440",
    "end": "1716080"
  },
  {
    "text": "decipher what's going on ah here I just said that um this is a",
    "start": "1716080",
    "end": "1721760"
  },
  {
    "text": "link table all right so what happens if we're doing uh",
    "start": "1721760",
    "end": "1727600"
  },
  {
    "text": "the external sorry not explicit includes",
    "start": "1727600",
    "end": "1733000"
  },
  {
    "text": "it's been a long day uh so what happens here with",
    "start": "1733000",
    "end": "1738480"
  },
  {
    "text": "implicit includes over here so we didn't say we want uh to join those tables but",
    "start": "1738480",
    "end": "1744960"
  },
  {
    "text": "what we can say here is please include those tables explicitly and what uh that",
    "start": "1744960",
    "end": "1751559"
  },
  {
    "text": "results is no change there's absolutely no",
    "start": "1751559",
    "end": "1756760"
  },
  {
    "text": "change now there is one difference though if I remove this part over here",
    "start": "1756760",
    "end": "1764880"
  },
  {
    "text": "tax but I keep this then include it will still do the uh the join so if",
    "start": "1764880",
    "end": "1772120"
  },
  {
    "text": "you do explicit includes it is your responsibility to keep it up to date if",
    "start": "1772120",
    "end": "1779000"
  },
  {
    "text": "you do implicit includes it's EF course responsibility to keep up to date and",
    "start": "1779000",
    "end": "1785919"
  },
  {
    "text": "there's a good chances that efco is going to do a better job than you",
    "start": "1785919",
    "end": "1793720"
  },
  {
    "text": "yes so the question is if there a good scenario to explicitly include uh yes if",
    "start": "1795760",
    "end": "1802600"
  },
  {
    "text": "you want to do safe changes on a complex uh data structure uh first off if you do",
    "start": "1802600",
    "end": "1809519"
  },
  {
    "text": "select you lose tracking and second off even if you manage to do some somehow",
    "start": "1809519",
    "end": "1816399"
  },
  {
    "text": "tracking and all of that stuff you might end up uh writing you know a",
    "start": "1816399",
    "end": "1822720"
  },
  {
    "text": "really really big mapping code so include May save your time time if you",
    "start": "1822720",
    "end": "1829279"
  },
  {
    "text": "really need everything all right",
    "start": "1829279",
    "end": "1835440"
  },
  {
    "text": "so now we are here uh joining tables in EF core and let's look at the data that",
    "start": "1835440",
    "end": "1842200"
  },
  {
    "text": "we're getting so here apologies for a little bit smaller uh picture but here",
    "start": "1842200",
    "end": "1847840"
  },
  {
    "text": "we have the original result results from SQL and you can see we have all of",
    "start": "1847840",
    "end": "1854279"
  },
  {
    "text": "duplicates and stuff like that now how many of you think that the offer in EF",
    "start": "1854279",
    "end": "1860000"
  },
  {
    "text": "core in memory is going to appear five times no hands that's good because it",
    "start": "1860000",
    "end": "1867399"
  },
  {
    "text": "doesn't happen so what happens is if core uh ignores all of those duplicates",
    "start": "1867399",
    "end": "1873720"
  },
  {
    "text": "because it knows these uh IDs and pro tip if you remove all of the IDS in the",
    "start": "1873720",
    "end": "1881320"
  },
  {
    "text": "query Eco is going to add them back it just won't tell you that it's patching",
    "start": "1881320",
    "end": "1887600"
  },
  {
    "text": "those IDs because what it does it actually looks up those IDs so that it",
    "start": "1887600",
    "end": "1893360"
  },
  {
    "text": "understands which um uh which entities were already passed and this is also why",
    "start": "1893360",
    "end": "1900480"
  },
  {
    "text": "uh Entity framework uh wasn't uh didn't supports tables without",
    "start": "1900480",
    "end": "1906360"
  },
  {
    "text": "IDs because it wouldn't be able to uh properly map and the other very",
    "start": "1906360",
    "end": "1912480"
  },
  {
    "text": "important difference is this is like a list of entities where each is like a uh",
    "start": "1912480",
    "end": "1920679"
  },
  {
    "text": "complex data structure and has like a graph uh graph structure so it's a very",
    "start": "1920679",
    "end": "1927240"
  },
  {
    "text": "different data representation than SQL and that's very important when you start",
    "start": "1927240",
    "end": "1932799"
  },
  {
    "text": "doing grouping and other things but first off you know that uh",
    "start": "1932799",
    "end": "1938760"
  },
  {
    "text": "thing that I mentioned a few times data duplication and hey this might actually",
    "start": "1938760",
    "end": "1944080"
  },
  {
    "text": "be a problem sometimes well let's look at this and let's say what if the",
    "start": "1944080",
    "end": "1949360"
  },
  {
    "text": "content individual post is one megabyte uh big that could be a problem right",
    "start": "1949360",
    "end": "1956240"
  },
  {
    "text": "because we have three of them so now instead of downloading one megabyte of",
    "start": "1956240",
    "end": "1961760"
  },
  {
    "text": "content we're downloading three now imagine that this one is I don't know 5 megabyte for whatever",
    "start": "1961760",
    "end": "1969039"
  },
  {
    "text": "reason the client might decide that it's going to have pictures in it as well but we're not downloading just five we're",
    "start": "1969039",
    "end": "1975880"
  },
  {
    "text": "now downloading 10 megabytes and now this is becoming a",
    "start": "1975880",
    "end": "1981080"
  },
  {
    "text": "problem and how we solve this in SQL is we can just split it up into multiple",
    "start": "1981080",
    "end": "1986120"
  },
  {
    "text": "queries simple right well how many of you think that it's going to be easy to",
    "start": "1986120",
    "end": "1992399"
  },
  {
    "text": "write uh write a mapping manually in EF in net and not spend an hour just you",
    "start": "1992399",
    "end": "1998840"
  },
  {
    "text": "know writing C code we have one hand well what happens",
    "start": "1998840",
    "end": "2005480"
  },
  {
    "text": "if this query uh doesn't actually give you the performance improvements that you fought it",
    "start": "2005480",
    "end": "2011320"
  },
  {
    "text": "will well this is another problem with it you can easily write these quaries",
    "start": "2011320",
    "end": "2017519"
  },
  {
    "text": "and you won't get data redundancy if you read them right but writing manually the mappings imagine that you have seven",
    "start": "2017519",
    "end": "2024639"
  },
  {
    "text": "joints in it you write the code you write the mapping and all of that stuff and then you realize oh",
    "start": "2024639",
    "end": "2031760"
  },
  {
    "text": "wait this actually runs worse than the single query what do you do now now you",
    "start": "2031760",
    "end": "2038039"
  },
  {
    "text": "need to revert all of the work or rethink the whole thing you you're now in a position where in a worse position",
    "start": "2038039",
    "end": "2044639"
  },
  {
    "text": "than before because before you thought that this could be the solution but now he like okay what do I",
    "start": "2044639",
    "end": "2051878"
  },
  {
    "text": "do well in inore you can just do a split",
    "start": "2051879",
    "end": "2057079"
  },
  {
    "text": "query which G which automatically generates for you all of the queres and",
    "start": "2057079",
    "end": "2063679"
  },
  {
    "text": "does the mapping for you uh behind the scenes and if it does happen that you",
    "start": "2063679",
    "end": "2069560"
  },
  {
    "text": "feel uh that this query is becoming slower than the original single query uh",
    "start": "2069560",
    "end": "2075839"
  },
  {
    "text": "you can just simply remove that uh line and you're back uh to where you were before so it literally takes you 5",
    "start": "2075839",
    "end": "2082280"
  },
  {
    "text": "Seconds to add that line and 5 Seconds to remove that line now some of eagle",
    "start": "2082280",
    "end": "2087358"
  },
  {
    "text": "eyes might notice this statement over here and say hey this is a bit redundant",
    "start": "2087359",
    "end": "2092960"
  },
  {
    "text": "we don't need it true but also doesn't have big imp performance impact and",
    "start": "2092960",
    "end": "2099560"
  },
  {
    "text": "there's a good chance that SQL Server might also realize that this is actually redundant and that do the optimization",
    "start": "2099560",
    "end": "2107040"
  },
  {
    "text": "for you so so in the end it might not even matter all right so we have one line",
    "start": "2107040",
    "end": "2113880"
  },
  {
    "text": "change uh of code this can drastically improve performance we had a",
    "start": "2113880",
    "end": "2120079"
  },
  {
    "text": "leaderboard where we were fetching information from various points and what",
    "start": "2120079",
    "end": "2125520"
  },
  {
    "text": "happened was we needed to get roles for each user and then within those roles we",
    "start": "2125520",
    "end": "2132079"
  },
  {
    "text": "had to get some additional information now we were fetching data for 100 people",
    "start": "2132079",
    "end": "2138680"
  },
  {
    "text": "but that query ballooned into I think it was 20,000 uh queries and ,000 rows because",
    "start": "2138680",
    "end": "2148520"
  },
  {
    "text": "we had a lot of rols and you know one too many relationships all of the roles get uh",
    "start": "2148520",
    "end": "2155560"
  },
  {
    "text": "duplicated because we have uh a lot of unique values on uh after the very last",
    "start": "2155560",
    "end": "2162200"
  },
  {
    "text": "join and that caused a lot of performance issues um and this worked",
    "start": "2162200",
    "end": "2169960"
  },
  {
    "text": "incredibly like we had problems that it was actually time Ting uh 30 seconds",
    "start": "2169960",
    "end": "2175960"
  },
  {
    "text": "plus this put it down to 500 milliseconds so we got from 30 seconds",
    "start": "2175960",
    "end": "2183160"
  },
  {
    "text": "to 500 milliseconds that's how massive of per performance Improvement uh you can get",
    "start": "2183160",
    "end": "2190280"
  },
  {
    "text": "now the thing is in most of the cases this is going to run you 20% slower give",
    "start": "2190280",
    "end": "2197640"
  },
  {
    "text": "or take because it actually takes more time to to download the results to send",
    "start": "2197640",
    "end": "2204920"
  },
  {
    "text": "the results to SQL Server than to actually deal with that overhead so this",
    "start": "2204920",
    "end": "2210200"
  },
  {
    "text": "is why you don't want to write all of these optimizations by hand uh because",
    "start": "2210200",
    "end": "2215839"
  },
  {
    "text": "they actually may not give you the benefits that you think that they might it heavily depends on the relationships",
    "start": "2215839",
    "end": "2224000"
  },
  {
    "text": "you have in your data the scale of the data uh as well as very specific",
    "start": "2224000",
    "end": "2230319"
  },
  {
    "text": "scenarios like we didn't had that issue until we reach 200",
    "start": "2230319",
    "end": "2236960"
  },
  {
    "text": "people yeah most cases is a bit worse um so now let's look at another thing SQL",
    "start": "2237280",
    "end": "2244319"
  },
  {
    "text": "group buy versus uh efo group bu so how many of you think they are",
    "start": "2244319",
    "end": "2251720"
  },
  {
    "text": "identical no hands I might have Prime new too much so what happens with the SQL group",
    "start": "2251720",
    "end": "2259720"
  },
  {
    "text": "m is SQL group M uh SQL is a flat table",
    "start": "2259720",
    "end": "2265000"
  },
  {
    "text": "and because it's a flat table um the way SQL works is it wants you to summarize",
    "start": "2265000",
    "end": "2272520"
  },
  {
    "text": "every single uh group so here we have for instance an alha that is is Group by",
    "start": "2272520",
    "end": "2278520"
  },
  {
    "text": "country uh we cannot just have a list of office here we need to summarize it now",
    "start": "2278520",
    "end": "2284319"
  },
  {
    "text": "the simple summarization here would be count on the other hand and here we have",
    "start": "2284319",
    "end": "2290319"
  },
  {
    "text": "uh the table but on the other hand EF core and net specifically net because EF",
    "start": "2290319",
    "end": "2297079"
  },
  {
    "text": "core is just using a uh a net feature which uh is the group",
    "start": "2297079",
    "end": "2303640"
  },
  {
    "text": "bu in net we have complex structures and it returns back uh list uh groups that",
    "start": "2303640",
    "end": "2311319"
  },
  {
    "text": "have list of uh data in it so the difference here is I can just say group",
    "start": "2311319",
    "end": "2317760"
  },
  {
    "text": "me uh group office by Country and this is going to result in a",
    "start": "2317760",
    "end": "2324480"
  },
  {
    "text": "very different quy it's going to result by um simple select statement uh from",
    "start": "2324480",
    "end": "2330680"
  },
  {
    "text": "office and it's going to order by country it's not going to goodbye the",
    "start": "2330680",
    "end": "2336599"
  },
  {
    "text": "reason for that is the the results I'm getting I can now go for every single country uh and for",
    "start": "2336599",
    "end": "2344599"
  },
  {
    "text": "every single offer and then print them out on the screen that's very different",
    "start": "2344599",
    "end": "2350280"
  },
  {
    "text": "data the SQL group bu is not uh similar",
    "start": "2350280",
    "end": "2355680"
  },
  {
    "text": "to EF core rby they're very very different oh yeah",
    "start": "2355680",
    "end": "2363400"
  },
  {
    "text": "the but we can make a SQL like group by in in uh EF Coe and it's very simple we",
    "start": "2363400",
    "end": "2370920"
  },
  {
    "text": "just have to add the select statement we need to summarize the group so as long",
    "start": "2370920",
    "end": "2376800"
  },
  {
    "text": "as we don't have any lists here that we are mapping into a flat uh flat row",
    "start": "2376800",
    "end": "2385119"
  },
  {
    "text": "we're going to get group buy so how many of you thought that this",
    "start": "2385119",
    "end": "2391720"
  },
  {
    "text": "wasn't possible before any near of core ah we don't have any hands how many",
    "start": "2391720",
    "end": "2397960"
  },
  {
    "text": "of you have learned something new maybe better question okay almost the whole",
    "start": "2397960",
    "end": "2403319"
  },
  {
    "text": "room that's good all right so I have shown you some",
    "start": "2403319",
    "end": "2408560"
  },
  {
    "text": "carrying some joining some grouping um now I want to show you one of the things",
    "start": "2408560",
    "end": "2414560"
  },
  {
    "text": "that we need to focus the most as efq developers and that's indexing because",
    "start": "2414560",
    "end": "2420040"
  },
  {
    "text": "this is something that is underutilized so with queries it's quite un",
    "start": "2420040",
    "end": "2425599"
  },
  {
    "text": "misunderstood but with index I think how many of you know that",
    "start": "2425599",
    "end": "2430839"
  },
  {
    "text": "indexing is important whole room how many of you actually use them oh actually how many",
    "start": "2430839",
    "end": "2438720"
  },
  {
    "text": "of you are using it in EF core okay that's okay so everyone knows",
    "start": "2438720",
    "end": "2444880"
  },
  {
    "text": "uh they're important everyone seems to be using them but not in EF core all right so hopefully that's going",
    "start": "2444880",
    "end": "2452359"
  },
  {
    "text": "to change today now I'm going to only show you how to use uh the index in uh",
    "start": "2452359",
    "end": "2458119"
  },
  {
    "text": "and how you can check if it's if it is using indexes uh but if you want to have",
    "start": "2458119",
    "end": "2464800"
  },
  {
    "text": "more information about how everything works behind the scenes uh Brighton did",
    "start": "2464800",
    "end": "2470240"
  },
  {
    "text": "a really good talk about that and performance in general like he actually showed you the the reasons why you have",
    "start": "2470240",
    "end": "2477760"
  },
  {
    "text": "to be careful with choosing indexes so why do we want to have",
    "start": "2477760",
    "end": "2483200"
  },
  {
    "text": "indexes performance we want our application to run fast and there is a point where you no longer",
    "start": "2483200",
    "end": "2491440"
  },
  {
    "text": "can uh optimize your carriers uh no matter how much uh caching you add no",
    "start": "2491440",
    "end": "2497760"
  },
  {
    "text": "matter how much um SQL engineering you do you just bottleneck you need to",
    "start": "2497760",
    "end": "2504560"
  },
  {
    "text": "change the schema you need to add uh indexes and this is why indexes are so",
    "start": "2504560",
    "end": "2510520"
  },
  {
    "text": "important uh it basically allows it to keep the same data structure uh while",
    "start": "2510520",
    "end": "2516160"
  },
  {
    "text": "also improving the performance and the way it's improving the performance if we",
    "start": "2516160",
    "end": "2521359"
  },
  {
    "text": "look at the unclustered indexes uh you can only have one usually",
    "start": "2521359",
    "end": "2527400"
  },
  {
    "text": "it's um sorted and it's a it's the it",
    "start": "2527400",
    "end": "2532480"
  },
  {
    "text": "defines how it's physically stored on the disk so it's very important how you",
    "start": "2532480",
    "end": "2538359"
  },
  {
    "text": "choose uh the clust index by default",
    "start": "2538359",
    "end": "2543680"
  },
  {
    "text": "efco uses the primary key and usually that uh that's good enough but in some cases",
    "start": "2543680",
    "end": "2550319"
  },
  {
    "text": "you might want to choose to change that we're not going to look into cluster index today but I want you to at least",
    "start": "2550319",
    "end": "2557160"
  },
  {
    "text": "be aware of them that if you have a problem with the the the way the data is",
    "start": "2557160",
    "end": "2563160"
  },
  {
    "text": "stor in the actual physical hard drive is the performance bottleneck this is",
    "start": "2563160",
    "end": "2568520"
  },
  {
    "text": "the index you want to look into now the next one is unclustered index now the",
    "start": "2568520",
    "end": "2574319"
  },
  {
    "text": "great part of unclustered index is you can have multiple of them per",
    "start": "2574319",
    "end": "2580200"
  },
  {
    "text": "table uh and what is also interested how many of you knew that when you add a new",
    "start": "2580200",
    "end": "2587359"
  },
  {
    "text": "unclassed index you're basically getting a copy of the table based on how you",
    "start": "2587359",
    "end": "2592520"
  },
  {
    "text": "define the index we have like 5% hands yeah very",
    "start": "2592520",
    "end": "2599119"
  },
  {
    "text": "few people know it and when I learned that my mind exploded because now I'm like oh wait so",
    "start": "2599119",
    "end": "2607119"
  },
  {
    "text": "so what that means is when I'm creating an unclustered index I'm essentially",
    "start": "2607119",
    "end": "2612720"
  },
  {
    "text": "making a copy of the table that is way smaller than the original so if when I",
    "start": "2612720",
    "end": "2618920"
  },
  {
    "text": "don't need all of the other stuff from the original table I can just carry that",
    "start": "2618920",
    "end": "2625079"
  },
  {
    "text": "that index which is really awesome and if you want to uh see uh",
    "start": "2625079",
    "end": "2632880"
  },
  {
    "text": "what which index you're actually querying when you do uh when you are doing a SQL",
    "start": "2632880",
    "end": "2638760"
  },
  {
    "text": "query uh here is the aure data studio and you enable here the uh enable actual",
    "start": "2638760",
    "end": "2645760"
  },
  {
    "text": "plan how many of you know uh about actual plans",
    "start": "2645760",
    "end": "2651319"
  },
  {
    "text": "uh about half the room so some of you might know so what we have here is over",
    "start": "2651319",
    "end": "2659480"
  },
  {
    "text": "here when we are doing the query we getting the query plan and we are",
    "start": "2659480",
    "end": "2664720"
  },
  {
    "text": "getting uh the information from where that data is coming from by default it's",
    "start": "2664720",
    "end": "2671440"
  },
  {
    "text": "going to be the clustered index which is the our table H and this is where you",
    "start": "2671440",
    "end": "2677800"
  },
  {
    "text": "know that no additional indexes were used uh to get the",
    "start": "2677800",
    "end": "2683800"
  },
  {
    "text": "data now how do we actually add indexes in EF core well the simplest thing here",
    "start": "2683800",
    "end": "2690480"
  },
  {
    "text": "is uh when we do on model creating we can just say for the entity do has index",
    "start": "2690480",
    "end": "2697079"
  },
  {
    "text": "and you add the country and when we do select country from offer what you can",
    "start": "2697079",
    "end": "2703359"
  },
  {
    "text": "see over here now we have IX offer Country Now what that means is it no",
    "start": "2703359",
    "end": "2710880"
  },
  {
    "text": "longer now cares the original table now it cares directly just the",
    "start": "2710880",
    "end": "2716440"
  },
  {
    "text": "index and if you worry about what if index goes out of date and stuff like that don't worry about it SQL Server",
    "start": "2716440",
    "end": "2723160"
  },
  {
    "text": "takes care of all of that but if you have too many indexes you might start to get performance issues when you insert",
    "start": "2723160",
    "end": "2729680"
  },
  {
    "text": "and update data so don't overdo it uh now if we uh want to query say uh",
    "start": "2729680",
    "end": "2739119"
  },
  {
    "text": "name so we do name and Country what happens is well we are now",
    "start": "2739119",
    "end": "2745880"
  },
  {
    "text": "quering the the original the the actual table right why that happens because",
    "start": "2745880",
    "end": "2753359"
  },
  {
    "text": "that table has that data if we wanted to use the index uh that we created for",
    "start": "2753359",
    "end": "2760319"
  },
  {
    "text": "country and we wanted to return name and we wanted to bypass this optimization we",
    "start": "2760319",
    "end": "2766520"
  },
  {
    "text": "would need to join the index with the original table but the original table already has",
    "start": "2766520",
    "end": "2773599"
  },
  {
    "text": "the country uh data right why would you do that you would then need to do the",
    "start": "2773599",
    "end": "2778680"
  },
  {
    "text": "same filtering everything on the original table as well it's inefficient it's",
    "start": "2778680",
    "end": "2785160"
  },
  {
    "text": "nonsensical but it would makes sense that you could do that as an index so how do you do that well if you just want",
    "start": "2785160",
    "end": "2792920"
  },
  {
    "text": "to include that data you don't want to index you can use include properties so",
    "start": "2792920",
    "end": "2799240"
  },
  {
    "text": "what that means is that name is not indexed but it is included in the",
    "start": "2799240",
    "end": "2805319"
  },
  {
    "text": "index so when I do select name country from offer it now selects uh the uh ex",
    "start": "2805319",
    "end": "2814200"
  },
  {
    "text": "off a country but but what if you want to have it like an composite key well you can",
    "start": "2814200",
    "end": "2822040"
  },
  {
    "text": "use uh has index and you create new and you uh you add the uh country and name",
    "start": "2822040",
    "end": "2829119"
  },
  {
    "text": "uh you both add both of them and now for the same query we have select name",
    "start": "2829119",
    "end": "2835640"
  },
  {
    "text": "country from offer but what you see here it now says offer country name because",
    "start": "2835640",
    "end": "2842480"
  },
  {
    "text": "now index also includes name and how how would you decide um how to",
    "start": "2842480",
    "end": "2850240"
  },
  {
    "text": "do uh the best indexes now if you uh learn about databases you get um you",
    "start": "2850240",
    "end": "2857680"
  },
  {
    "text": "have a lot of content on how to decide that but if you're someone who uh heard",
    "start": "2857680",
    "end": "2865119"
  },
  {
    "text": "indexes um but never understood how to use them when to use",
    "start": "2865119",
    "end": "2870599"
  },
  {
    "text": "them this is a um on Azure SQL you can go to Performance recommendation and you",
    "start": "2870599",
    "end": "2877240"
  },
  {
    "text": "can look at the recommendations try not to use them right away because um if I",
    "start": "2877240",
    "end": "2883960"
  },
  {
    "text": "say that you just use them I will have a database engineer uh chasing me in the",
    "start": "2883960",
    "end": "2889359"
  },
  {
    "text": "night and I may not appear tomorrow so don't use them right away maybe use chpt",
    "start": "2889359",
    "end": "2896520"
  },
  {
    "text": "or ask you know tap someone who knows a little bit more about database and say",
    "start": "2896520",
    "end": "2901839"
  },
  {
    "text": "hey is that index does that index for this schema make sense because",
    "start": "2901839",
    "end": "2907480"
  },
  {
    "text": "this might actually give you over optimize things for just a given time",
    "start": "2907480",
    "end": "2913240"
  },
  {
    "text": "but then anything after that that index actually make cause performance",
    "start": "2913240",
    "end": "2919800"
  },
  {
    "text": "issues and if you're not on Azure there's actually a query that you can run uh that gives you a similar results",
    "start": "2919800",
    "end": "2927839"
  },
  {
    "text": "I still have time uh and you can get uh the query from the our rules we actually",
    "start": "2927839",
    "end": "2935119"
  },
  {
    "text": "have a lot more rules on what to do if you have memory CPU uh pressures lots of",
    "start": "2935119",
    "end": "2942559"
  },
  {
    "text": "performance um uh analyses and what they can do about them here I'm talking about",
    "start": "2942559",
    "end": "2949480"
  },
  {
    "text": "how can EF developers start tapping into that knowledge of the uh SQL uh",
    "start": "2949480",
    "end": "2956520"
  },
  {
    "text": "Engineers uh and DB uh dbas but there's also another thing uh",
    "start": "2956520",
    "end": "2963880"
  },
  {
    "text": "coming along there is this little thing called try copilot with your SQL",
    "start": "2963880",
    "end": "2972319"
  },
  {
    "text": "databases now this is something that I haven't managed to play too",
    "start": "2972319",
    "end": "2977680"
  },
  {
    "text": "much uh with but there is a lot of rumors that this actually might be able",
    "start": "2977680",
    "end": "2983720"
  },
  {
    "text": "to help you generate some indexes and optimize your databases uh that it will",
    "start": "2983720",
    "end": "2988839"
  },
  {
    "text": "allow you to ask questions about your database and then actually do um",
    "start": "2988839",
    "end": "2995079"
  },
  {
    "text": "performance improvements or or you know give you suggestions on how to uh update",
    "start": "2995079",
    "end": "3001599"
  },
  {
    "text": "your schema to be more efficient at fetching the data and with that we looked at how we",
    "start": "3001599",
    "end": "3010040"
  },
  {
    "text": "do the uh logging how we can integrate to get more useful Telemetry in your",
    "start": "3010040",
    "end": "3015280"
  },
  {
    "text": "application we looked at how SQL gets generated in EF core differently when",
    "start": "3015280",
    "end": "3021960"
  },
  {
    "text": "we're adding more and more Jo joints and also why grouping is not the same in SQL",
    "start": "3021960",
    "end": "3029040"
  },
  {
    "text": "and EF core and I also given you a short introduction into",
    "start": "3029040",
    "end": "3034240"
  },
  {
    "text": "indexes but the last thing that I want to give you is something that I actually got today at around 3:00 a.m. something",
    "start": "3034240",
    "end": "3042359"
  },
  {
    "text": "like that and I managed to squeeze in today um what what if queres are fast in ssms",
    "start": "3042359",
    "end": "3052359"
  },
  {
    "text": "but they are slow in production now this is something that",
    "start": "3052359",
    "end": "3057720"
  },
  {
    "text": "did actually happen to me and I just couldn't figure it out and I just",
    "start": "3057720",
    "end": "3063119"
  },
  {
    "text": "thought okay this maybe there I wasn't able to fully diagnose",
    "start": "3063119",
    "end": "3068559"
  },
  {
    "text": "because what was really weird about it was the SQL was running slower in",
    "start": "3068559",
    "end": "3077119"
  },
  {
    "text": "production the actual SQL qu but if I copied that SQL query into",
    "start": "3077119",
    "end": "3083920"
  },
  {
    "text": "ssms or aure data story it ran faster than the actual Telemetry and",
    "start": "3083920",
    "end": "3090839"
  },
  {
    "text": "that didn't make sense because you know there's no EF cor",
    "start": "3090839",
    "end": "3096079"
  },
  {
    "text": "involved like why right now there was one uh Canadian that uh sent me uh",
    "start": "3096079",
    "end": "3104480"
  },
  {
    "text": "saying hey hope you enjoy your NC uh conference it's like you know there",
    "start": "3104480",
    "end": "3110319"
  },
  {
    "text": "something happened with uh efco 802 you might want to know uh they added EF",
    "start": "3110319",
    "end": "3117559"
  },
  {
    "text": "constant you definitely want to have a look at it and I was like uh at 3:00",
    "start": "3117559",
    "end": "3122799"
  },
  {
    "text": "a.m. I was like okay fine let's have a look and then I was just like wait a",
    "start": "3122799",
    "end": "3130319"
  },
  {
    "text": "minute that's that's the problem like we're running this query over here uh",
    "start": "3130319",
    "end": "3136839"
  },
  {
    "text": "and uh it's fast but then for instance over here this query is slow and the",
    "start": "3136839",
    "end": "3144160"
  },
  {
    "text": "thing is we get ident identical um ques for these two there's not not much",
    "start": "3144160",
    "end": "3151079"
  },
  {
    "text": "difference not something that you know you could change and make it faster but",
    "start": "3151079",
    "end": "3156480"
  },
  {
    "text": "what they found is that the way they put that number thousand in the query didn't",
    "start": "3156480",
    "end": "3164400"
  },
  {
    "text": "allow s server to do a very specific optimization and as a result it actually",
    "start": "3164400",
    "end": "3170799"
  },
  {
    "text": "took it as a parameter and it thought that that thing can constantly change so",
    "start": "3170799",
    "end": "3176799"
  },
  {
    "text": "it didn't optimize it as if that will never change and what we're having here",
    "start": "3176799",
    "end": "3182960"
  },
  {
    "text": "is almost like a runtime constant right we're only switching between two",
    "start": "3182960",
    "end": "3188079"
  },
  {
    "text": "different numbers uh so we don't actually need that Dynamic uh way of looking at how",
    "start": "3188079",
    "end": "3196640"
  },
  {
    "text": "many numbers we want to uh how many rows we want to return and what happened is",
    "start": "3196640",
    "end": "3202799"
  },
  {
    "text": "this is something that literally happened I think a week ago or something that um now we can do EF constants and",
    "start": "3202799",
    "end": "3210880"
  },
  {
    "text": "now we can tell s server to say hey this doesn't",
    "start": "3210880",
    "end": "3216240"
  },
  {
    "text": "change this will be fixed and this can have massive uh performance differences",
    "start": "3216240",
    "end": "3223559"
  },
  {
    "text": "so if you go into your Telemetry you get the uh you look at it and it's like this",
    "start": "3223559",
    "end": "3229880"
  },
  {
    "text": "takes 5 Seconds SQL Server uh SQL carry I copy it and put it in s M and it it's",
    "start": "3229880",
    "end": "3238720"
  },
  {
    "text": "like 500 milliseconds what gifts what what it's the same thing how it can be",
    "start": "3238720",
    "end": "3244200"
  },
  {
    "text": "different right this might be the reason and I bashed my head for",
    "start": "3244200",
    "end": "3251319"
  },
  {
    "text": "years and now we know anyways here are the resources I",
    "start": "3251319",
    "end": "3257920"
  },
  {
    "text": "hope you enjoyed the talk uh uh we're going to have uh if you",
    "start": "3257920",
    "end": "3263640"
  },
  {
    "text": "want to have uh rewards uh for 100 points you can come to our um uh our",
    "start": "3263640",
    "end": "3270680"
  },
  {
    "text": "booth and for that thank",
    "start": "3270680",
    "end": "3274960"
  },
  {
    "text": "you we have five minutes for",
    "start": "3278480",
    "end": "3283000"
  },
  {
    "text": "questions yeah so with any framework logging um",
    "start": "3285520",
    "end": "3291920"
  },
  {
    "text": "we're found with like if you have a unique constraint on your index so those edge cases where the race conditions of expecting two",
    "start": "3291920",
    "end": "3298359"
  },
  {
    "text": "records to try and be inserted at once so SQL throws the unique constraint error is there any work around to not",
    "start": "3298359",
    "end": "3303880"
  },
  {
    "text": "get any framework to log that as an exception so say it's a you you want to handle it in your code um and the enti",
    "start": "3303880",
    "end": "3310960"
  },
  {
    "text": "framework by default will just log that as a critical exception even though it's in a try catch so I had a similar",
    "start": "3310960",
    "end": "3316440"
  },
  {
    "text": "question for a different talk two two weeks ago I haven't really specifically",
    "start": "3316440",
    "end": "3322599"
  },
  {
    "text": "looked at I it's on my Todo list um but I remember that um when EFC 3.1 came out",
    "start": "3322599",
    "end": "3332160"
  },
  {
    "text": "uh even 3.0 um they were Global configurations for EF core uh for that",
    "start": "3332160",
    "end": "3339599"
  },
  {
    "text": "DB context and one of those is um enabling and disabling",
    "start": "3339599",
    "end": "3345200"
  },
  {
    "text": "warnings um I tried to look up really quickly uh for the answer and I wasn't",
    "start": "3345200",
    "end": "3350559"
  },
  {
    "text": "able to quite find it but I know that these settings are still there uh just",
    "start": "3350559",
    "end": "3356400"
  },
  {
    "text": "Microsoft doesn't really want you to use them unless you really need it uh so long story short it probably exists but",
    "start": "3356400",
    "end": "3365400"
  },
  {
    "text": "needs to be looked up okay thanks any other questions uh we have one uh",
    "start": "3365400",
    "end": "3373030"
  },
  {
    "text": "[Music] front so you mentioned that there is um",
    "start": "3373030",
    "end": "3378240"
  },
  {
    "text": "co-pilot for databases uh yes like just to like scan maybe some index missing do",
    "start": "3378240",
    "end": "3384200"
  },
  {
    "text": "have you tried copilot in Visual Studio to see if it can from your Cod see",
    "start": "3384200",
    "end": "3389400"
  },
  {
    "text": "because like if you do in C code first you don't want to throw any indexes like",
    "start": "3389400",
    "end": "3394799"
  },
  {
    "text": "through your SQL want it all in in your C uh can um GitHub copilot in Visual",
    "start": "3394799",
    "end": "3403160"
  },
  {
    "text": "Studio identify if you're missing some indexes and just add them automatically",
    "start": "3403160",
    "end": "3408200"
  },
  {
    "text": "in your model so I use CH GPT 4 uh with the prompt where I say you're an expert",
    "start": "3408200",
    "end": "3415760"
  },
  {
    "text": "in net efcore and SQL Server where I uh was able to put in link statements and",
    "start": "3415760",
    "end": "3422160"
  },
  {
    "text": "SQL statements and I could translate from one another have explanations how",
    "start": "3422160",
    "end": "3427920"
  },
  {
    "text": "one got into another and I even got to point where I was able to take a raw SQL",
    "start": "3427920",
    "end": "3435280"
  },
  {
    "text": "and get me a EF query out of it um",
    "start": "3435280",
    "end": "3440640"
  },
  {
    "text": "there's quite a few cases where it didn't generate it uh correctly but then I tried like three times five times and",
    "start": "3440640",
    "end": "3447640"
  },
  {
    "text": "the fifth time actually generated it correctly because he sometimes tries to use features that don't exist and I was",
    "start": "3447640",
    "end": "3455599"
  },
  {
    "text": "successful um with GitHub co-pilot I didn't have that much success I just",
    "start": "3455599",
    "end": "3461640"
  },
  {
    "text": "usually use chpt uh for most of the stuff that I do when I'm dealing with",
    "start": "3461640",
    "end": "3468280"
  },
  {
    "text": "SQL and",
    "start": "3468280",
    "end": "3470920"
  },
  {
    "text": "Link like my question is to do this has index function like in E like do we have to",
    "start": "3473640",
    "end": "3480960"
  },
  {
    "text": "create this index manually or does efco creat it uh that's great for you so if",
    "start": "3480960",
    "end": "3486720"
  },
  {
    "text": "we go a little uh if we go um this one for instance uh",
    "start": "3486720",
    "end": "3493640"
  },
  {
    "text": "that index is created for for you so you just if you have migration enabl just",
    "start": "3493640",
    "end": "3499880"
  },
  {
    "text": "create a new magnation if you don't have you just do and show created and you'll have that uh you don't have to worry",
    "start": "3499880",
    "end": "3507039"
  },
  {
    "text": "about it okay thank you yeah and my original Talk actually",
    "start": "3507039",
    "end": "3513400"
  },
  {
    "text": "had so much content that um it took 10 uh basically when I did one part of it",
    "start": "3513400",
    "end": "3522000"
  },
  {
    "text": "uh it took me two hours and then I was just like I'm not even fifth uh cross",
    "start": "3522000",
    "end": "3527599"
  },
  {
    "text": "and then I realized that half of the people didn't understand half of the things that I showed today and then I",
    "start": "3527599",
    "end": "3534280"
  },
  {
    "text": "realized hey these are the things that most people know but they actually never",
    "start": "3534280",
    "end": "3540079"
  },
  {
    "text": "think about so how many how many of you people here uh knew the things that I",
    "start": "3540079",
    "end": "3545839"
  },
  {
    "text": "showed you but you never thought of uh what what would be the consequence of",
    "start": "3545839",
    "end": "3551480"
  },
  {
    "text": "that or you know how it actually impacts things so we have about half of the room",
    "start": "3551480",
    "end": "3558760"
  },
  {
    "text": "yeah and then that's the purpose of this talk is basically take a step step back",
    "start": "3558760",
    "end": "3564400"
  },
  {
    "text": "before we go into Advance stuff in uh in SQL and efq and say hey do you",
    "start": "3564400",
    "end": "3572359"
  },
  {
    "text": "actually I know that you know all of this stuff but do you actually know you",
    "start": "3572359",
    "end": "3578440"
  },
  {
    "text": "know do do you know how that impacts H and hopefully with that I'm going to",
    "start": "3578440",
    "end": "3584079"
  },
  {
    "text": "then build up a new talk that will start to talk about more advanced stuff",
    "start": "3584079",
    "end": "3589359"
  },
  {
    "text": "because I literally try to go through all of the link statements all of them",
    "start": "3589359",
    "end": "3594799"
  },
  {
    "text": "and try to figure out which one are working in efco and which are not",
    "start": "3594799",
    "end": "3599920"
  },
  {
    "text": "because the documentation doesn't tell you and I have found things like group",
    "start": "3599920",
    "end": "3605599"
  },
  {
    "text": "join which I was just like what is group join and I found some things that I was",
    "start": "3605599",
    "end": "3613960"
  },
  {
    "text": "just like I first off I didn't know that it existent and second of why and third of that's actually",
    "start": "3613960",
    "end": "3620760"
  },
  {
    "text": "awesome so hopefully that's going to be my next talk and with that uh we have any",
    "start": "3620760",
    "end": "3629078"
  },
  {
    "text": "questions uh sorry sorry um like if there is already",
    "start": "3629480",
    "end": "3635599"
  },
  {
    "text": "an index which like has a country and name will it duplicate or uh so if you",
    "start": "3635599",
    "end": "3642079"
  },
  {
    "text": "define it in EF core uh it's datab so if it's in the database",
    "start": "3642079",
    "end": "3649960"
  },
  {
    "text": "because there's the thing if you scaffold um the database then that index",
    "start": "3649960",
    "end": "3656880"
  },
  {
    "text": "will already be in the AF course schema it will be aware of it right but if you",
    "start": "3656880",
    "end": "3663160"
  },
  {
    "text": "somehow have that index without a database scaffolding of things like that",
    "start": "3663160",
    "end": "3668200"
  },
  {
    "text": "it may actually generate a migration that will fail because it might name the",
    "start": "3668200",
    "end": "3673680"
  },
  {
    "text": "index the same uh or it you might have two the same indexes with different",
    "start": "3673680",
    "end": "3681240"
  },
  {
    "text": "names all right um let's have some break and enjoy the conference thanks",
    "start": "3684119",
    "end": "3692280"
  },
  {
    "text": "[Applause]",
    "start": "3692280",
    "end": "3695399"
  }
]