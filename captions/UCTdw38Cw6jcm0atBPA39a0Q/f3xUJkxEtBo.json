[
  {
    "text": "so on my laptop it's now 20 p 4 welcome to the last let's say uh regular talk",
    "start": "5120",
    "end": "13519"
  },
  {
    "text": "this uh talk slot this St today um I'm Peter somad I've spoken here before just",
    "start": "13519",
    "end": "22240"
  },
  {
    "text": "a quick uh check who has never seen a talk by me raise your hand okay",
    "start": "22240",
    "end": "30640"
  },
  {
    "text": "then let's tell a little bit I used to be a professor and then quit",
    "start": "30640",
    "end": "36559"
  },
  {
    "text": "my job just before the lockdown I today I work as a C++ trainer and consultant",
    "start": "36559",
    "end": "42760"
  },
  {
    "text": "and uh do a lot of hobby stuff like uh and every hobby you do you do with love",
    "start": "42760",
    "end": "49239"
  },
  {
    "text": "and my let's say personal lifetime goal is rid the world of bad software and that's a goal that will take me to uh uh",
    "start": "49239",
    "end": "57039"
  },
  {
    "text": "forward to my grave summer which is Hope hopefully far in the future I'm a",
    "start": "57039",
    "end": "62800"
  },
  {
    "text": "leukemia Survivor so I know how easy it can be that you actually face The end",
    "start": "62800",
    "end": "68720"
  },
  {
    "text": "quickly uh but I survived so I'm I'm I'm good now and therefore I fight",
    "start": "68720",
    "end": "76159"
  },
  {
    "text": "the after fighting for my health I fight for better software in the world and one",
    "start": "76159",
    "end": "82079"
  },
  {
    "text": "of the areas I fight for better software is the um safety guidelines uh some",
    "start": "82079",
    "end": "88799"
  },
  {
    "text": "another question uh who has used misra C or C+ plus safety guidelines in their",
    "start": "88799",
    "end": "95159"
  },
  {
    "text": "work setting okay a few of you uh some of you",
    "start": "95159",
    "end": "101119"
  },
  {
    "text": "might have heard of them and if you look at the misra C plusus guidelines of 2008",
    "start": "101119",
    "end": "106799"
  },
  {
    "text": "when I first looked at them that's my personal opinion not official misra it looked like for me to uh to me like oh",
    "start": "106799",
    "end": "114960"
  },
  {
    "text": "that's not how I would program in C++ what these rules actually imply there were several misunderstandings by me but",
    "start": "114960",
    "end": "121960"
  },
  {
    "text": "also the style I perceived the rules they were written for C programmers",
    "start": "121960",
    "end": "127399"
  },
  {
    "text": "trying to program in C++ and the rules were created by Ada programmers which is not completely",
    "start": "127399",
    "end": "135239"
  },
  {
    "text": "wrong but also not very fair that was when I first came across MRA C+ was 2008",
    "start": "135239",
    "end": "142959"
  },
  {
    "text": "and the only thing to improve something is not about complaining but doing it better and that's why I joined first",
    "start": "142959",
    "end": "150480"
  },
  {
    "text": "autosar and then the misra working group on C++ guidelines completely for free so",
    "start": "150480",
    "end": "157400"
  },
  {
    "text": "I didn't make any money out of that I hope that I can sell some training and Consulting afterwards but that's not not",
    "start": "157400",
    "end": "164519"
  },
  {
    "text": "the main reason main reason is better software another thing that I like to",
    "start": "164519",
    "end": "170720"
  },
  {
    "text": "share quite often is less code is more software and that's also why I'm a big",
    "start": "170720",
    "end": "176080"
  },
  {
    "text": "fan of C++ because C++ giv me a lot of ability AB ities to abstract things and",
    "start": "176080",
    "end": "182080"
  },
  {
    "text": "write less code and achieve more results from the same amount of code as for example I would have to do in C I have",
    "start": "182080",
    "end": "189560"
  },
  {
    "text": "been a c trainer in the 1980s while still a university student",
    "start": "189560",
    "end": "195319"
  },
  {
    "text": "so I wrote a modular 2 compiler in C as my diploma thesis so I did significant",
    "start": "195319",
    "end": "203120"
  },
  {
    "text": "things in C at the time before let's say C++ compilers were usable and available",
    "start": "203120",
    "end": "210280"
  },
  {
    "text": "and one thing I'd like to share as well about C and C++ C was written by Ken or",
    "start": "210280",
    "end": "217159"
  },
  {
    "text": "created by the world best programmers at the time for",
    "start": "217159",
    "end": "223560"
  },
  {
    "text": "themselves and those of you who have been to this morning's keynote or's uh",
    "start": "223560",
    "end": "228760"
  },
  {
    "text": "talk about C it's trust a programmer the problem is there are too many programs",
    "start": "228760",
    "end": "235000"
  },
  {
    "text": "including myself I wouldn't trust and if you look at the history of",
    "start": "235000",
    "end": "241480"
  },
  {
    "text": "C++ who more or less came from the same uh uh group of people um it was written",
    "start": "241480",
    "end": "248079"
  },
  {
    "text": "by bana for others to use not for himself and that makes a big",
    "start": "248079",
    "end": "255040"
  },
  {
    "text": "difference in the philosophy of the language and the abstraction ability",
    "start": "255040",
    "end": "260120"
  },
  {
    "text": "therefore I'm even though I know that c has its corner I still think if you",
    "start": "260120",
    "end": "265400"
  },
  {
    "text": "start something new you C++ now where do you require safe",
    "start": "265400",
    "end": "273479"
  },
  {
    "text": "C++ uh everywhere safety critical",
    "start": "273479",
    "end": "278680"
  },
  {
    "text": "software or systems happen everywhere where let say people might come to harm",
    "start": "278680",
    "end": "284240"
  },
  {
    "text": "and if you consider okay I also uh need security because all those systems today",
    "start": "284240",
    "end": "289960"
  },
  {
    "text": "are interconnected so security is kind of a subset of safety and now the question is what",
    "start": "289960",
    "end": "297520"
  },
  {
    "text": "makes code actually unsafe and I should should use my clicker which is a bit more convenient one big thing is that you",
    "start": "297520",
    "end": "305320"
  },
  {
    "text": "might have world all of you is undefined behavior and there are many reasons for undefined Behavior some are let's say",
    "start": "305320",
    "end": "312479"
  },
  {
    "text": "honorable some are less honorable but nevertheless today we have actually",
    "start": "312479",
    "end": "317560"
  },
  {
    "text": "compilers and that make and optimizers that make use of undefined behavior and",
    "start": "317560",
    "end": "323120"
  },
  {
    "text": "optimize a way code that they can prove will have undefined Behavior which is",
    "start": "323120",
    "end": "329960"
  },
  {
    "text": "kind of interesting but also breaking a lot of",
    "start": "329960",
    "end": "335120"
  },
  {
    "text": "code that tries to not have undefined behavior and we've seen examples here today in other talks there are other",
    "start": "335120",
    "end": "341800"
  },
  {
    "text": "areas if you write safety critical code a CO it typically tends to live a long",
    "start": "341800",
    "end": "347520"
  },
  {
    "text": "time and that means you have to uh think about implementation defined Behavior",
    "start": "347520",
    "end": "354400"
  },
  {
    "text": "because your compiler might actually change or the underlying platform might change I've consulted projects that",
    "start": "354400",
    "end": "360960"
  },
  {
    "text": "switched from a 8bit processor to 16bit processor in their control systems and",
    "start": "360960",
    "end": "367080"
  },
  {
    "text": "that more or less caused them to have to rewrite everything they did other changes to the surrounding Hardware but",
    "start": "367080",
    "end": "374039"
  },
  {
    "text": "more or less they had to rewrite everything from scratch because all those assumptions that that they made",
    "start": "374039",
    "end": "380080"
  },
  {
    "text": "based on the processor word size and so on uh were no longer true and then there's also unspecified",
    "start": "380080",
    "end": "387919"
  },
  {
    "text": "Behavior it's where okay okay the C+ standard would give you a",
    "start": "387919",
    "end": "393160"
  },
  {
    "text": "reasonable uh uh range of potential behaviors that all more or less have the",
    "start": "393160",
    "end": "398720"
  },
  {
    "text": "same outcome but there might be observables uh behavior from these",
    "start": "398720",
    "end": "404360"
  },
  {
    "text": "unspecified areas where you don't know which one is actually happening and also",
    "start": "404360",
    "end": "409680"
  },
  {
    "text": "that might lead to portability issues now what makes code unsafe the",
    "start": "409680",
    "end": "415080"
  },
  {
    "text": "biggest challenge with C++ about unsafe code is actually Mis understandings you",
    "start": "415080",
    "end": "420800"
  },
  {
    "text": "have 2,000 plus pages in The Standard where even those people who work on on",
    "start": "420800",
    "end": "425960"
  },
  {
    "text": "almost daily basis with these 2,000 Pages have a hard time to get their head around about Corner cases or",
    "start": "425960",
    "end": "433199"
  },
  {
    "text": "interdependencies where page let's say 355 says something that is relevant on",
    "start": "433199",
    "end": "438680"
  },
  {
    "text": "page 1,322 and they are kind of interconnected and together actually",
    "start": "438680",
    "end": "444080"
  },
  {
    "text": "specify a specific Corner case or specific feature that is really hard so",
    "start": "444080",
    "end": "450080"
  },
  {
    "text": "I would claim there is no one single person in the world who has full grasp of what actually is",
    "start": "450080",
    "end": "457440"
  },
  {
    "text": "C++ therefore we cannot trust those peoples we have to help them and if you",
    "start": "457840",
    "end": "463120"
  },
  {
    "text": "write any kind of code safety CTIC or not safety critical a big thing is have",
    "start": "463120",
    "end": "469159"
  },
  {
    "text": "guts and I don't mind don't mean the things that you have in your belly uh",
    "start": "469159",
    "end": "474840"
  },
  {
    "text": "beyond the cake and whatever you you got here but actually good unit test and a",
    "start": "474840",
    "end": "481400"
  },
  {
    "text": "quick poll again who is actually writing unit tests for their",
    "start": "481400",
    "end": "487520"
  },
  {
    "text": "code I'm I'm happy now and those who didn't raise their hands go home and",
    "start": "488199",
    "end": "494440"
  },
  {
    "text": "learn how to write good unit tests I'm not saying that every unit test is great",
    "start": "494440",
    "end": "499879"
  },
  {
    "text": "uh it takes some kind of of learning but actually having good unit test is something I'm fighting for more than 25",
    "start": "499879",
    "end": "506720"
  },
  {
    "text": "years now I've been using C++ unit testing since 1997 in for production code I have not",
    "start": "506720",
    "end": "514560"
  },
  {
    "text": "always been a professor or a trainer and this is not part of misra but if you",
    "start": "514560",
    "end": "520599"
  },
  {
    "text": "look at other safety gu standards like the 61508 or for automotive it's 26 262 they",
    "start": "520599",
    "end": "528839"
  },
  {
    "text": "actually claim you should use current soft engineering techniques and",
    "start": "528839",
    "end": "535000"
  },
  {
    "text": "processes and not having unit testing and test automation is not current and that is something you",
    "start": "535000",
    "end": "543839"
  },
  {
    "text": "have to take home and you have a manager that tells you you don't have to write unit test we have manual tests that's",
    "start": "543839",
    "end": "550120"
  },
  {
    "text": "not professional that's not even hobby is that's bad",
    "start": "550120",
    "end": "556279"
  },
  {
    "text": "practice now if you look for unsafe or vulnerable C++ there are several things where we",
    "start": "556279",
    "end": "563279"
  },
  {
    "text": "can actually figure out what's happening the good things are immediate undefined",
    "start": "563279",
    "end": "569160"
  },
  {
    "text": "or wrong behavior that is something I might find either by the compiler with warnings with the static analysis tool",
    "start": "569160",
    "end": "576839"
  },
  {
    "text": "like doing misra checks or other checks or by having sanitizers in my test",
    "start": "576839",
    "end": "583320"
  },
  {
    "text": "environment or even maybe in product maybe not production but in my test environment where I figure out okay",
    "start": "583320",
    "end": "589160"
  },
  {
    "text": "there's something wrong and the wrong behavior is better something that you figure out with your test automation to figure to to see that you get the right",
    "start": "589160",
    "end": "596320"
  },
  {
    "text": "behavior of your system but there are other things things where stuff is lurking kind of oh if I",
    "start": "596320",
    "end": "603560"
  },
  {
    "text": "input that number then my program crashes that's not good especially or",
    "start": "603560",
    "end": "609160"
  },
  {
    "text": "let's say if the D if you especially in kind of control systems you might have a sensor that is broken and you get a get",
    "start": "609160",
    "end": "617120"
  },
  {
    "text": "get a sensor reading that is way out of bounds but it's just maybe because the the the plug was has corrosion and that",
    "start": "617120",
    "end": "624279"
  },
  {
    "text": "is something you have to work with and uh so there might be things that shouldn't happen that will actually",
    "start": "624279",
    "end": "630600"
  },
  {
    "text": "happen so there's data dependent undefined and wrong behavior and again",
    "start": "630600",
    "end": "636160"
  },
  {
    "text": "there is this Evolution style software isn't developed and then",
    "start": "636160",
    "end": "641440"
  },
  {
    "text": "ready today cars have update functions which might or might not work well I did",
    "start": "641440",
    "end": "647519"
  },
  {
    "text": "an update to my wife car and I'm not happy with the update uh",
    "start": "647519",
    "end": "653600"
  },
  {
    "text": "but security more or less implies that you have to be able to update and that",
    "start": "653600",
    "end": "658720"
  },
  {
    "text": "means you change and change the software and that might actually add to the problematic problematic behavior of of",
    "start": "658720",
    "end": "665800"
  },
  {
    "text": "your system and then there's the portability you have new processors uh you have uh the implementation be be",
    "start": "665800",
    "end": "673320"
  },
  {
    "text": "defined behavior that we all already talked about now if we look at misra",
    "start": "673320",
    "end": "679639"
  },
  {
    "text": "only few of you have used misra another question I have who is using a static analysis tool beyond the compiler",
    "start": "679639",
    "end": "686320"
  },
  {
    "text": "warnings in their code in their build tool system okay there are plenty of",
    "start": "686320",
    "end": "691600"
  },
  {
    "text": "those now what is actually misra misra comes from the automotive industry I",
    "start": "691600",
    "end": "697240"
  },
  {
    "text": "think in the uh 25 something plus years uh in the '90s uh people figured okay we",
    "start": "697240",
    "end": "705240"
  },
  {
    "text": "have more and more software in our cars and safety Norms ask for okay we need",
    "start": "705240",
    "end": "710600"
  },
  {
    "text": "some uh let's say process and better those for call for setting analysis and",
    "start": "710600",
    "end": "717399"
  },
  {
    "text": "maybe limit the language to a subset that is kind of safer than the plain",
    "start": "717399",
    "end": "722519"
  },
  {
    "text": "language especially when the language has a standard that says this behavior is undefined but the compiler is free to",
    "start": "722519",
    "end": "728720"
  },
  {
    "text": "accept it so it's not forbidden to have undefined Behavior by the compiler now this started out with M RC in 1998 and",
    "start": "728720",
    "end": "736560"
  },
  {
    "text": "there have been successive uh U incarnation of that rule set and the most recent one was just released for uh",
    "start": "736560",
    "end": "744320"
  },
  {
    "text": "Mis c223 which is not addressing c23 but I think c17 or maybe even C90 I'm not not",
    "start": "744320",
    "end": "752839"
  },
  {
    "text": "c c 9 99 I'm I'm not sure uh I think they they have C c17 or C11 uh behind",
    "start": "752839",
    "end": "762240"
  },
  {
    "text": "that Mis C++ came out in 2008 for C++ 03 and we",
    "start": "762240",
    "end": "769720"
  },
  {
    "text": "have since had a lot of new standards and now we are releasing about release",
    "start": "769720",
    "end": "775079"
  },
  {
    "text": "as I said next on Friday we have the last let's say technical uh changes or",
    "start": "775079",
    "end": "780360"
  },
  {
    "text": "let's say technical fixel of problems introduced by editorial work um on mrcpl",
    "start": "780360",
    "end": "786959"
  },
  {
    "text": "was 2023 so it should be released within and I say within this year I don't want",
    "start": "786959",
    "end": "795440"
  },
  {
    "text": "to promise a date because even though it's not not a big process uh a lot of",
    "start": "795440",
    "end": "800720"
  },
  {
    "text": "work is is voluntar voluntary work and there might be some uh let's say final",
    "start": "800720",
    "end": "806560"
  },
  {
    "text": "edits and getting the official PDF produc used might have uh require some signatures by someone that might take uh",
    "start": "806560",
    "end": "813440"
  },
  {
    "text": "some time and if you look at that we are addressing C++ 17 why is that the case",
    "start": "813440",
    "end": "819880"
  },
  {
    "text": "first of all to know that something is bad behavior very often requires someone who",
    "start": "819880",
    "end": "826399"
  },
  {
    "text": "actually made that bad behavior to figure out okay this wasn't a good idea and that's one of the things second",
    "start": "826399",
    "end": "832880"
  },
  {
    "text": "there is no yet not yet a single C++ 20 compliant compiler that is fully C++ 20",
    "start": "832880",
    "end": "838320"
  },
  {
    "text": "compliant and if you want to learn about one feature go to Dan's talk on modules where C++ compilers struggle getting the",
    "start": "838320",
    "end": "846199"
  },
  {
    "text": "modules featured on and uh uh Co routines was another feature that wasn't",
    "start": "846199",
    "end": "851320"
  },
  {
    "text": "ready yet and we are learning about Co routines here as well and we're getting",
    "start": "851320",
    "end": "857120"
  },
  {
    "text": "there I'm reluctant to would use modules and co- routines at the moment for",
    "start": "857120",
    "end": "862399"
  },
  {
    "text": "safety critical system now what are typical",
    "start": "862399",
    "end": "867680"
  },
  {
    "text": "misconceptions these are things I might have said in the past and I've heard other people",
    "start": "867680",
    "end": "874680"
  },
  {
    "text": "complain about like misra forbids me to write required code that's not true some guidelines are",
    "start": "874680",
    "end": "882839"
  },
  {
    "text": "deliberately written in a way that you have to violate them because we want to make you think",
    "start": "882839",
    "end": "890759"
  },
  {
    "text": "about that such a violation and have a good reason to do so and document that reason there is something called a",
    "start": "890759",
    "end": "897839"
  },
  {
    "text": "deviation Pro process and you there are rules where we say okay you need to do",
    "start": "897839",
    "end": "903880"
  },
  {
    "text": "that to write code but when you do it encapsulate it have a single place where",
    "start": "903880",
    "end": "908959"
  },
  {
    "text": "you use it that way and then document that you violated this Rule and uh make",
    "start": "908959",
    "end": "914680"
  },
  {
    "text": "sure that you get there also what we not addressing is",
    "start": "914680",
    "end": "920240"
  },
  {
    "text": "this implementing the standard Library requires you to violate a lot of misra guidelines like don't do Point",
    "start": "920240",
    "end": "926880"
  },
  {
    "text": "arithmetic well whoever implements Vector is using pointer arithmetic but that's not actually a",
    "start": "926880",
    "end": "934440"
  },
  {
    "text": "problem because you can actually certify that the standard library conforms to a specification which is actually the",
    "start": "934440",
    "end": "941279"
  },
  {
    "text": "standard and that means you can use it there's another Mis rule is that says",
    "start": "941279",
    "end": "947160"
  },
  {
    "text": "don't violate a functions precondition that you call that is where you're responsible to to actually not violate",
    "start": "947160",
    "end": "954120"
  },
  {
    "text": "that Mis rule unfortunately it's one of those that you cannot check yet we don't have have contract so we might not know",
    "start": "954120",
    "end": "960959"
  },
  {
    "text": "the preconditions of a function from a let's say a checking tool but at least",
    "start": "960959",
    "end": "966120"
  },
  {
    "text": "we can point the finger to the programmer calling the function like a vector with the wrong index uh indexing",
    "start": "966120",
    "end": "971720"
  },
  {
    "text": "Vector with the wrong value and the last on on that line is kind of misra rules are redundant and",
    "start": "971720",
    "end": "978920"
  },
  {
    "text": "conforming and and confusing that is also deliberate I give a few examples",
    "start": "978920",
    "end": "984480"
  },
  {
    "text": "later but since you can deviate from a rule there's often a second line of",
    "start": "984480",
    "end": "990279"
  },
  {
    "text": "defense that will actually give you a more let's say a more string and rule or",
    "start": "990279",
    "end": "996639"
  },
  {
    "text": "a more specific rule okay if you deviate from that rule because you have reasons",
    "start": "996639",
    "end": "1001720"
  },
  {
    "text": "this is where you don't no longer have a reason to to to violate or if you violate this also you have to have even",
    "start": "1001720",
    "end": "1008680"
  },
  {
    "text": "a more stringent reason to violate that rule kind of okay you might take a uh",
    "start": "1008680",
    "end": "1015199"
  },
  {
    "text": "cut a corner but not too sharp then your way out in the in the in the",
    "start": "1015199",
    "end": "1021440"
  },
  {
    "text": "abyss okay and also even if your Checker says your code is compliant doesn't mean that your code is actually doing what",
    "start": "1021440",
    "end": "1027678"
  },
  {
    "text": "you do what what it's intend uh supposed to be doing and I talked a lot about misra",
    "start": "1027679",
    "end": "1033520"
  },
  {
    "text": "compliance gave the example and explained we have um so compliance",
    "start": "1033520",
    "end": "1038880"
  },
  {
    "text": "doesn't mean you have to have 100% rule adherence which is actually in my opinion unachievable in a real world",
    "start": "1038880",
    "end": "1044798"
  },
  {
    "text": "system but there's a document explaining the process and if you want to go there",
    "start": "1044799",
    "end": "1050559"
  },
  {
    "text": "uh this is a link to that document and you find the link also in the handout that I provided uh in the beginning and",
    "start": "1050559",
    "end": "1057720"
  },
  {
    "text": "I put on social media for you to download the handout will contain more",
    "start": "1057720",
    "end": "1063080"
  },
  {
    "text": "than just the slides also the um some text explaining what I'm trying to say",
    "start": "1063080",
    "end": "1069200"
  },
  {
    "text": "uh we have rules that are those things that can be tool check most of the time even though the tool check might not be",
    "start": "1069200",
    "end": "1076039"
  },
  {
    "text": "complete because you easily end up with with things that in theory are undecidable even though you can figure",
    "start": "1076039",
    "end": "1082640"
  },
  {
    "text": "out a lot of uh uh situations in practice where uh a rule is violated but",
    "start": "1082640",
    "end": "1088039"
  },
  {
    "text": "not having a rule violation cannot guarantee that you're not from by the tool might not guarantee that you're not",
    "start": "1088039",
    "end": "1094120"
  },
  {
    "text": "violated the rule in your source code the directives are more kind of",
    "start": "1094120",
    "end": "1099200"
  },
  {
    "text": "things okay yeah we would like you to do that but there's no means to actually",
    "start": "1099200",
    "end": "1106039"
  },
  {
    "text": "check that with with a tool at least not in in a way where it's sensible uh there are other things there",
    "start": "1106039",
    "end": "1113480"
  },
  {
    "text": "tool comes in different levels of kind of mandatory tools those are the ones that you cannot deviate and we have very",
    "start": "1113480",
    "end": "1120320"
  },
  {
    "text": "few mandatory rules there are required rules that you better not deviate but in a special case you can actually deviate",
    "start": "1120320",
    "end": "1127320"
  },
  {
    "text": "and there are advisory rules that you can actually upgrade to a required rule but you might also choose a specific",
    "start": "1127320",
    "end": "1134679"
  },
  {
    "text": "advisor rule to actually uh not be relevant for your project this should",
    "start": "1134679",
    "end": "1141480"
  },
  {
    "text": "come with reason but you don't have to actually uh put a reason for every deviation like an example would be oh",
    "start": "1141480",
    "end": "1148679"
  },
  {
    "text": "you shouldn't use the names of the builtin integer types because you don't know how many bits those are so you",
    "start": "1148679",
    "end": "1154919"
  },
  {
    "text": "never know the range that's a portabil portability thing if you say okay we are",
    "start": "1154919",
    "end": "1160559"
  },
  {
    "text": "working with 32 or more bits processors we don't care if in this 32 or 64 bits",
    "start": "1160559",
    "end": "1167640"
  },
  {
    "text": "in the future uh we don't want to use in 32t everywhere we just use int that's fine",
    "start": "1167640",
    "end": "1174520"
  },
  {
    "text": "for a project with in reason you can actually go there but if you look at the those people who had those 16 bit",
    "start": "1174520",
    "end": "1181480"
  },
  {
    "text": "processes if they now go to arm with 32-bit then they might actually uh have",
    "start": "1181480",
    "end": "1187240"
  },
  {
    "text": "uh data structures where they talk to outside Hardware that that is no longer",
    "start": "1187240",
    "end": "1192919"
  },
  {
    "text": "the same size and and things are are better uh also rules are categorized if",
    "start": "1192919",
    "end": "1200120"
  },
  {
    "text": "being decidable or best effort there are things by Theory those of you have studied computer science will know about",
    "start": "1200120",
    "end": "1207000"
  },
  {
    "text": "uh undecidability and there are easily uh situations where in general it cannot",
    "start": "1207000",
    "end": "1213400"
  },
  {
    "text": "be proven that something went wrong now you could ask why does mis C++",
    "start": "1213400",
    "end": "1223000"
  },
  {
    "text": "exist when we have a a sequence of Myra C that already is there and there are",
    "start": "1223000",
    "end": "1229280"
  },
  {
    "text": "even people trying to use misc Checkers against C++ code and if they fail to",
    "start": "1229280",
    "end": "1234360"
  },
  {
    "text": "check and um there is it's true that c and c+s share a lot of",
    "start": "1234360",
    "end": "1240799"
  },
  {
    "text": "vulnerabilities like Point arithmetic whatever but in C++ often the",
    "start": "1240799",
    "end": "1246400"
  },
  {
    "text": "mitigations are much better in C++ for example we can have",
    "start": "1246400",
    "end": "1251559"
  },
  {
    "text": "unique pointers to keep track of our Heap allocated memory without forgetting to release it so no resource leaks which",
    "start": "1251559",
    "end": "1259520"
  },
  {
    "text": "is kind of a pain in the back to actually get dried in a c",
    "start": "1259520",
    "end": "1267080"
  },
  {
    "text": "program even if you don't use a static analysis tool you have resilience",
    "start": "1267080",
    "end": "1272520"
  },
  {
    "text": "mechanisms program against the standard and take standard violations as errors",
    "start": "1272520",
    "end": "1278080"
  },
  {
    "text": "turn on warnings and maybe even some more and take warnings as errors so",
    "start": "1278080",
    "end": "1283880"
  },
  {
    "text": "don't accept code that produces a warning and if you have a specific uh",
    "start": "1283880",
    "end": "1290400"
  },
  {
    "text": "situation where you have to deviate a warning or turn of a warning there are mechanisms to actually tell the compiler",
    "start": "1290400",
    "end": "1295840"
  },
  {
    "text": "oh yes I know you would issue a warning here but please be silent in this specific situation instead of not",
    "start": "1295840",
    "end": "1301400"
  },
  {
    "text": "turning on the warnings because that will actually be present in the source code and will show that there's a reason",
    "start": "1301400",
    "end": "1308760"
  },
  {
    "text": "to actually deactivate the warning and the biggest feature I would say is",
    "start": "1308760",
    "end": "1314159"
  },
  {
    "text": "actually let me try that closing par uh brace that's the",
    "start": "1314159",
    "end": "1322559"
  },
  {
    "text": "killer feature of C plas where things get cleaned up that is something to actually get there and also use",
    "start": "1322559",
    "end": "1329600"
  },
  {
    "text": "sanitizers and static analysis that you would do now let's look at misera rules",
    "start": "1329600",
    "end": "1336080"
  },
  {
    "text": "and i' like to give you a brief introduction if you look closely you see that these have kind of three numbers in",
    "start": "1336080",
    "end": "1343480"
  },
  {
    "text": "front and the numbering is non-consecutive and the first two numbers actually are section numbers",
    "start": "1343480",
    "end": "1350480"
  },
  {
    "text": "from the C++ standard and if there's a zero it means there is no corresponding",
    "start": "1350480",
    "end": "1356320"
  },
  {
    "text": "section in the standard or if the second digit is zero there is it's overall for",
    "start": "1356320",
    "end": "1361760"
  },
  {
    "text": "the uh full chapter of the of the first digit and the last digit is just a a",
    "start": "1361760",
    "end": "1368039"
  },
  {
    "text": "sequence number where we put the rules in some kind of arbitrary sequence uh there we",
    "start": "1368039",
    "end": "1375559"
  },
  {
    "text": "thought about having a better naming scheme but that is something we just inherited from M C+ was 2008 but all the",
    "start": "1375559",
    "end": "1382799"
  },
  {
    "text": "rule numbers are different today because the standard changed its numbering scheme except maybe for those in the",
    "start": "1382799",
    "end": "1389640"
  },
  {
    "text": "category zero but even there the rules have been kind of slightly modernized and and",
    "start": "1389640",
    "end": "1395600"
  },
  {
    "text": "adapted and I also highlighted the keywords shell should so shell is",
    "start": "1395600",
    "end": "1401840"
  },
  {
    "text": "actually um again a required rule so a function shall not contain unreachable",
    "start": "1401840",
    "end": "1408559"
  },
  {
    "text": "statements and this is something you might actually deviate from by putting somewhere unreachable in there or",
    "start": "1408559",
    "end": "1416320"
  },
  {
    "text": "built-in unreachable to actually be able to tell okay yeah please the program",
    "start": "1416320",
    "end": "1421720"
  },
  {
    "text": "crash if I'm getting here then my logic is broken which shouldn't happen but in",
    "start": "1421720",
    "end": "1426960"
  },
  {
    "text": "a sometimes a fail stop is is a safe way to actually exit a system and have the",
    "start": "1426960",
    "end": "1433240"
  },
  {
    "text": "surrounding Hardware or a surrounding software actually keeping the system in a safe state in that",
    "start": "1433240",
    "end": "1440520"
  },
  {
    "text": "case um okay the some of the rules like the",
    "start": "1440520",
    "end": "1448080"
  },
  {
    "text": "last one in that list maybe let's have a look there it's pointer arithmetic shall not form an invalid pointer so even",
    "start": "1448080",
    "end": "1455840"
  },
  {
    "text": "though the D referencing is actually the case causing undefined Behavior but uh",
    "start": "1455840",
    "end": "1462200"
  },
  {
    "text": "you wouldn't want to have actually a pointer that goes be uh uh into an area",
    "start": "1462200",
    "end": "1467240"
  },
  {
    "text": "that that is completely uh out of bounds now an example or two examples",
    "start": "1467240",
    "end": "1475159"
  },
  {
    "text": "actually for these redundant rules uh like an object shall not be accessed outside of its lifetime which is kind of",
    "start": "1475159",
    "end": "1483120"
  },
  {
    "text": "uh undefined behavior in C++ but you except for let's say special Corner",
    "start": "1483120",
    "end": "1488600"
  },
  {
    "text": "cases that's one of the things where oh I have a writing an operating system and I I know there is something there that I",
    "start": "1488600",
    "end": "1496200"
  },
  {
    "text": "actually need to uh set some bits there manually uh in the memory and to to get",
    "start": "1496200",
    "end": "1501320"
  },
  {
    "text": "something done but on the other hand uh what might lead to such a situation is",
    "start": "1501320",
    "end": "1507320"
  },
  {
    "text": "returning a reference to a local variable which is kind of that is forboden no way to do that you don't",
    "start": "1507320",
    "end": "1514039"
  },
  {
    "text": "want to return a reference to local variable fortunately most compilers will actually tell you okay that's something",
    "start": "1514039",
    "end": "1520039"
  },
  {
    "text": "you don't want to do please treat it as an error now there are C++ specific examp",
    "start": "1520039",
    "end": "1528080"
  },
  {
    "text": "and I would like to highlight one because that is actually fixed by the reason for the existence of that rule is",
    "start": "1528080",
    "end": "1534279"
  },
  {
    "text": "actually fixed by C++ 23 it's the the issue with uh automatic lifetime",
    "start": "1534279",
    "end": "1540559"
  },
  {
    "text": "extension of an expression in the Range four statement so for example we have",
    "start": "1540559",
    "end": "1546159"
  },
  {
    "text": "here Range four statement that calls a make function that returns a string and then we use a vector of strings and then",
    "start": "1546159",
    "end": "1553919"
  },
  {
    "text": "with the the first element we take these first string and iterate over the characters in that string and this aror",
    "start": "1553919",
    "end": "1561520"
  },
  {
    "text": "prone uh actually immediate dangling if uh because the lifetime of the actual",
    "start": "1561520",
    "end": "1567559"
  },
  {
    "text": "Vector is not extended so whenever you iterate over the string the actual string object is already destroyed",
    "start": "1567559",
    "end": "1573640"
  },
  {
    "text": "because the vector is destroyed which is uh uh thanks to Nikos is something we we",
    "start": "1573640",
    "end": "1579919"
  },
  {
    "text": "have fixed in C+ of 23 but because misra addresses C++ 20 and the actual trick to",
    "start": "1579919",
    "end": "1587039"
  },
  {
    "text": "get around those things is actually by we figured okay if we limit the amount of",
    "start": "1587039",
    "end": "1594559"
  },
  {
    "text": "function calls that you can actually make right of this colon in the Range four to one",
    "start": "1594559",
    "end": "1601520"
  },
  {
    "text": "function then there cannot be an issue with the temporary created because if that function returns a temporary object",
    "start": "1601520",
    "end": "1608640"
  },
  {
    "text": "that will automatically be lifetime expended and that is that is the trick",
    "start": "1608640",
    "end": "1613960"
  },
  {
    "text": "to get around that and the details of rule tell what what is actually uh uh uh",
    "start": "1613960",
    "end": "1619039"
  },
  {
    "text": "counted as a function call and I forgot to say if you have a question interrupt me there should be a",
    "start": "1619039",
    "end": "1626039"
  },
  {
    "text": "microphone somewhere around another example were",
    "start": "1626039",
    "end": "1632200"
  },
  {
    "text": "actually is enams we learned from today that okay uh",
    "start": "1632200",
    "end": "1639440"
  },
  {
    "text": "C enams NV C+ plus 11 enams because we can say in C++ what is the underlying",
    "start": "1639440",
    "end": "1645760"
  },
  {
    "text": "type or for scoped enums actually the underlying type even if you don't spell",
    "start": "1645760",
    "end": "1651000"
  },
  {
    "text": "it is well defined so you know what the underlying type would be and uh There",
    "start": "1651000",
    "end": "1656960"
  },
  {
    "text": "are rules that say okay don't use an enum without an underlying type because that would be an implementation defined",
    "start": "1656960",
    "end": "1662640"
  },
  {
    "text": "type and uh C++ would have the same issues as C with that respect and um we",
    "start": "1662640",
    "end": "1669240"
  },
  {
    "text": "even say that unscoped enumerations should not be declared so you actually see I deviated from that rule by this",
    "start": "1669240",
    "end": "1677039"
  },
  {
    "text": "unscop scoping so I ignored that I'm not doing unscoped enumerations and",
    "start": "1677039",
    "end": "1683919"
  },
  {
    "text": "um there are other things about uh enumerations that we actually",
    "start": "1683919",
    "end": "1690919"
  },
  {
    "text": "address and very often the headline doesn't tell you the details it's just to get a Guist of of what the rule is",
    "start": "1690919",
    "end": "1697640"
  },
  {
    "text": "about and a good tool vendor will actually license the the rule text to show to you what you get and if this and",
    "start": "1697640",
    "end": "1705399"
  },
  {
    "text": "once the the misra C+ was 20 23 is is um published it's behind the pay wall but",
    "start": "1705399",
    "end": "1712360"
  },
  {
    "text": "the price for the PDF is kind of in in a couple of beers in",
    "start": "1712360",
    "end": "1717799"
  },
  {
    "text": "Norway it's not not really a lot of",
    "start": "1717799",
    "end": "1722278"
  },
  {
    "text": "money now one thing where C++ is distinct from",
    "start": "1722960",
    "end": "1729399"
  },
  {
    "text": "C is its type system and the only let's say the major bad things about C++ type",
    "start": "1729399",
    "end": "1736320"
  },
  {
    "text": "system are those that have have been inherited from C and cannot be removed because of backward compatibility and",
    "start": "1736320",
    "end": "1742559"
  },
  {
    "text": "what is the type systems role that is something when you start beginning a beginning programmer the type system",
    "start": "1742559",
    "end": "1749760"
  },
  {
    "text": "usually gets in your way you write four and multiply it with",
    "start": "1749760",
    "end": "1755480"
  },
  {
    "text": "pi and then you if you have the right language this will not compile because",
    "start": "1755480",
    "end": "1760720"
  },
  {
    "text": "the language tells you you cannot multiply two numbers of a different domain one is a a a real number and the",
    "start": "1760720",
    "end": "1766799"
  },
  {
    "text": "other one an integer they don't come together you have to convert either one to actually compute the value this is a",
    "start": "1766799",
    "end": "1774320"
  },
  {
    "text": "level where the type system tells you to get rid of ridiculous code if you",
    "start": "1774320",
    "end": "1779840"
  },
  {
    "text": "program in Assembly Language you don't get that that support whatever you",
    "start": "1779840",
    "end": "1785440"
  },
  {
    "text": "interpret what's in the register or in memory location it's up to you how you interpret",
    "start": "1785440",
    "end": "1792000"
  },
  {
    "text": "that modern assemblies and processes give you some limitations but us usually",
    "start": "1792000",
    "end": "1797720"
  },
  {
    "text": "your it's completely your choice the the precursor of C the language B actually",
    "start": "1797720",
    "end": "1803440"
  },
  {
    "text": "had a better syntax than assembly but more or less its only data structure or only data type was kind of a word which",
    "start": "1803440",
    "end": "1811080"
  },
  {
    "text": "could be an integer or a pointer then came C which actually gave the world a",
    "start": "1811080",
    "end": "1816200"
  },
  {
    "text": "type system for these kind of low-level programmers uh with a lot of freedom so",
    "start": "1816200",
    "end": "1822120"
  },
  {
    "text": "you have cast almost everywhere and you cast back and forward and as long as it's not completely",
    "start": "1822120",
    "end": "1828519"
  },
  {
    "text": "uh ridiculous either you get an implicit conversion or just a reinterpretation of the data we still have that in C++ but",
    "start": "1828519",
    "end": "1835799"
  },
  {
    "text": "the Mis guidelines will tell you not to do that but the biggest difference is even in C you can Define your own data",
    "start": "1835799",
    "end": "1842559"
  },
  {
    "text": "types you can create structs and the biggest thing we had",
    "start": "1842559",
    "end": "1848039"
  },
  {
    "text": "learned 90s that was O was the biggest thing it wasn't inheritance that was the",
    "start": "1848039",
    "end": "1853960"
  },
  {
    "text": "benefit it was the first kind of languages where you had the ability to create your own types that were kind of",
    "start": "1853960",
    "end": "1861840"
  },
  {
    "text": "first class citizens and C++ is the language where creating your own",
    "start": "1861840",
    "end": "1867600"
  },
  {
    "text": "type being a first class citizen is the most important it's that is one of the",
    "start": "1867600",
    "end": "1872919"
  },
  {
    "text": "the most important features it allows you to create abstractions that don't have a performance hit but and work more",
    "start": "1872919",
    "end": "1880279"
  },
  {
    "text": "or less like the built-in types from efficiency and also from the usage but are distinct so they wouldn't actually",
    "start": "1880279",
    "end": "1888840"
  },
  {
    "text": "um mix arbitrarily like if you have an",
    "start": "1888840",
    "end": "1894519"
  },
  {
    "text": "integer for let's say counting the U refs of your engine and then you have",
    "start": "1894519",
    "end": "1900960"
  },
  {
    "text": "another integer that let's say counts the uh times the open and close the door",
    "start": "1900960",
    "end": "1906679"
  },
  {
    "text": "to tell you when the hinge must be replaced and then you somehow compare those integers um they might that might",
    "start": "1906679",
    "end": "1914360"
  },
  {
    "text": "not make sense or even multiply them which might not make sense sense but the compiler would happily accept that",
    "start": "1914360",
    "end": "1920120"
  },
  {
    "text": "unless you use uh so-called strong types to actually implement it the strong",
    "start": "1920120",
    "end": "1926480"
  },
  {
    "text": "types is something that the misra guidelines cannot enforce but the Preamble text actually tells you to use",
    "start": "1926480",
    "end": "1933200"
  },
  {
    "text": "strong types for your domain values and not just ins or or doubles or Floats or",
    "start": "1933200",
    "end": "1939519"
  },
  {
    "text": "whatever now one little quiz which I'm not sure I got my answers absolutely",
    "start": "1939519",
    "end": "1946240"
  },
  {
    "text": "correct but if you have two int values X and Y what is the probability of you being",
    "start": "1946240",
    "end": "1954440"
  },
  {
    "text": "percent let's say if if it's uh undefined Behavior it's 100% if it's",
    "start": "1954440",
    "end": "1960799"
  },
  {
    "text": "kind of um 50% or 25% or",
    "start": "1960799",
    "end": "1967799"
  },
  {
    "text": "99.999% just get some numbers and Shout in or raise your hand and shou and I",
    "start": "1967799",
    "end": "1973000"
  },
  {
    "text": "will repeat and we'll tell you what I came up with the calculation now let's look at that x ided",
    "start": "1973000",
    "end": "1980960"
  },
  {
    "text": "0 how many percent 100% that's the easy part that's always good to have a",
    "start": "1980960",
    "end": "1987799"
  },
  {
    "text": "question when when you have an make an exam for your students the first question must be easy just to give them okay relax now",
    "start": "1987799",
    "end": "1997080"
  },
  {
    "text": "you can answer now the next question is a little bit more tricky x divided by Y",
    "start": "1997080",
    "end": "2003360"
  },
  {
    "text": "what is the probability assuming let's say 32-bit integers",
    "start": "2003360",
    "end": "2008960"
  },
  {
    "text": "H it's nearly zero how often do you write to check oh I don't have division",
    "start": "2011159",
    "end": "2016600"
  },
  {
    "text": "by zero those who write don't divide by",
    "start": "2016600",
    "end": "2021760"
  },
  {
    "text": "zero do you also check for U Min in div uh divided by minus",
    "start": "2021760",
    "end": "2028480"
  },
  {
    "text": "one so it's about two cases out of uh 2232 so it's a very very low number uh I",
    "start": "2028720",
    "end": "2037240"
  },
  {
    "text": "I think it's about SE uh I'm I'm not sure my computation is correct but you",
    "start": "2037240",
    "end": "2042279"
  },
  {
    "text": "can write a program to actually uh check for that for example now it becomes more interesting what if you write x +",
    "start": "2042279",
    "end": "2051398"
  },
  {
    "text": "y h 50% was my first assumption as well",
    "start": "2054720",
    "end": "2061280"
  },
  {
    "text": "not exactly correct if it would be just positive numbers 50% is is a good good choice but",
    "start": "2061280",
    "end": "2069040"
  },
  {
    "text": "we have negative numbers as well and uh so actually it turns out it's",
    "start": "2069040",
    "end": "2075839"
  },
  {
    "text": "25% so probability of having integer overflow with arbitrary integers X Plus",
    "start": "2075919",
    "end": "2081760"
  },
  {
    "text": "Y and if you write in the system where you might have bit flips or sensor data that comes in that's wrong that is",
    "start": "2081760",
    "end": "2087760"
  },
  {
    "text": "something you have to care about but the even more interesting thing is x *",
    "start": "2087760",
    "end": "2095520"
  },
  {
    "text": "y rough guess say it",
    "start": "2095879",
    "end": "2102160"
  },
  {
    "text": "again 90% too",
    "start": "2102160",
    "end": "2106720"
  },
  {
    "text": "low if if if you would have something where you say okay if it's that",
    "start": "2107440",
    "end": "2113119"
  },
  {
    "text": "probable and it would be a good thing you would bet on it don't care put a",
    "start": "2113119",
    "end": "2118880"
  },
  {
    "text": "million there I will get it back it's at least seven",
    "start": "2118880",
    "end": "2125800"
  },
  {
    "text": "nines probable to have undefined behavior of multiplying to arbitrary",
    "start": "2125800",
    "end": "2132560"
  },
  {
    "text": "integers it's only the small numbers that work well so that's",
    "start": "2132560",
    "end": "2139839"
  },
  {
    "text": "actually I I think for 16bit integers it's uh about uh five nines and with or",
    "start": "2139839",
    "end": "2148400"
  },
  {
    "text": "or or four nines I I I wrote a program where I can elaborated all the values and for the U 32-bit uh you cannot do",
    "start": "2148400",
    "end": "2156280"
  },
  {
    "text": "that at least not in a reasonable amount of time that you w willing to wait but I wrote a Monto Carlo system where where I",
    "start": "2156280",
    "end": "2162319"
  },
  {
    "text": "checked that and it's uh I came up with at least seven nines Shan parin did this",
    "start": "2162319",
    "end": "2168800"
  },
  {
    "text": "computation and he he aired on the wrong side and I'm not sure if his con second",
    "start": "2168800",
    "end": "2174359"
  },
  {
    "text": "guess is more correct than my mon Carlo simulation I might have need more more",
    "start": "2174359",
    "end": "2179520"
  },
  {
    "text": "runs to actually get there but it's really really a sure thing that multipli",
    "start": "2179520",
    "end": "2184599"
  },
  {
    "text": "multiplying to arbitrary integers get you undefined Behavior so if you write",
    "start": "2184599",
    "end": "2189680"
  },
  {
    "text": "an Optimizer in a compiler you might actually just is all multiplication with no code and because it's undefined",
    "start": "2189680",
    "end": "2195760"
  },
  {
    "text": "Behavior anyway which is not actually true but uh that is something to look out for and that's easy to get",
    "start": "2195760",
    "end": "2203200"
  },
  {
    "text": "wrong so built-in types are evil signed integer overflows undefined",
    "start": "2203200",
    "end": "2209359"
  },
  {
    "text": "Behavior unsigned integer overflow is kind of some the electrical engineers say say",
    "start": "2209359",
    "end": "2216880"
  },
  {
    "text": "oh that's how this Hardware works I know what it what to do other programmers",
    "start": "2216880",
    "end": "2222440"
  },
  {
    "text": "might not be as familiar with the wrapping around thing and might find it no it's not really what we need and we",
    "start": "2222440",
    "end": "2229800"
  },
  {
    "text": "still have that division by over zero and with the signed inte we have also that um Min end divided by minus one",
    "start": "2229800",
    "end": "2237440"
  },
  {
    "text": "which is a kind of a problem and the biggest problem let's say in embedded systems especially with the electrical",
    "start": "2237440",
    "end": "2243240"
  },
  {
    "text": "engineers they know okay unsigned I've wrap around that's good and then they use un",
    "start": "2243240",
    "end": "2248560"
  },
  {
    "text": "16ts on a 32-bit machine and we get integral promotion changing the",
    "start": "2248560",
    "end": "2253760"
  },
  {
    "text": "sness which is kind of a horror scenario especially if you multiply to 16 bit integers you think that's okay because I",
    "start": "2253760",
    "end": "2261400"
  },
  {
    "text": "wrap around no you get signed integer multiplication and easily you end up",
    "start": "2261400",
    "end": "2267000"
  },
  {
    "text": "with undefined Behavior now what can we do about that I",
    "start": "2267000",
    "end": "2272839"
  },
  {
    "text": "thought long and people write class types to get that with all the overheads that some compilers provided with class",
    "start": "2272839",
    "end": "2279280"
  },
  {
    "text": "types there's one way to get around well we have iners where you can say what's the underline type is and we have",
    "start": "2279280",
    "end": "2286960"
  },
  {
    "text": "because they form a distinct type we have kind of operator overloading and we have Concepts to do",
    "start": "2286960",
    "end": "2293560"
  },
  {
    "text": "so and uh there's a talk by me at C++ now I think 2021 was the talk remote uh",
    "start": "2293560",
    "end": "2301200"
  },
  {
    "text": "where I explain my simple safe integers that first don't promote",
    "start": "2301200",
    "end": "2307359"
  },
  {
    "text": "and second attempt to be safe with respect to uh arithmetic by doing all",
    "start": "2307359",
    "end": "2313319"
  },
  {
    "text": "arithmetic and unsigned domain and then um Computing the tw's complement if",
    "start": "2313319",
    "end": "2319319"
  },
  {
    "text": "necessary so they wrap around which is I'm still have to work",
    "start": "2319319",
    "end": "2325200"
  },
  {
    "text": "on a version that actually detects and maybe does some other things and in C 23",
    "start": "2325200",
    "end": "2331079"
  },
  {
    "text": "we actually have standardized the underlying mechanics to detect overflow for integer arithmetic uh um and uh I",
    "start": "2331079",
    "end": "2338240"
  },
  {
    "text": "might implement it using the buildin for clang and GCC to actually go there I think there's a version for visual",
    "start": "2338240",
    "end": "2344480"
  },
  {
    "text": "studio as well in the library detecting signed integer or in general integer",
    "start": "2344480",
    "end": "2350040"
  },
  {
    "text": "overflow an my Approach is uh unfortunately we don't see the colors that nice that nicely so we have ui8 for",
    "start": "2350040",
    "end": "2357960"
  },
  {
    "text": "unsigned integer with eight bits and so on for the others plus corresponding operator overloading and that library is",
    "start": "2357960",
    "end": "2365119"
  },
  {
    "text": "available for free it has unit test and Define box please submit a unit test to my library if you really need a",
    "start": "2365119",
    "end": "2372040"
  },
  {
    "text": "commercial version since I'm the sole author I'm happy to provide you with the",
    "start": "2372040",
    "end": "2377240"
  },
  {
    "text": "license whatever you pay for it um just an example user defined",
    "start": "2377240",
    "end": "2383319"
  },
  {
    "text": "literals in C++ 20 we can use conal so we actually make sure that we don't have any runtime overhead from that but we",
    "start": "2383319",
    "end": "2390079"
  },
  {
    "text": "have the compile time detection that the literal actually fits the target type that we want to go there and uh just to",
    "start": "2390079",
    "end": "2398800"
  },
  {
    "text": "play around if you if you want to to check with that that's an example so there are two lines that are commented",
    "start": "2398800",
    "end": "2404880"
  },
  {
    "text": "out that will actually cause compile errors if if you try that uh and um I",
    "start": "2404880",
    "end": "2410839"
  },
  {
    "text": "was too lazy to actually uh Implement uh some uh let's say having",
    "start": "2410839",
    "end": "2417359"
  },
  {
    "text": "a surrounding infrastructure to detect compile errors from that now okay integers is one thing",
    "start": "2417359",
    "end": "2425319"
  },
  {
    "text": "floating point is other which I don't go to because a lot of embedded systems",
    "start": "2425319",
    "end": "2430560"
  },
  {
    "text": "don't do floating points well next problem types okay there are a",
    "start": "2430560",
    "end": "2440440"
  },
  {
    "text": "lot of misra rules we see these three digit rule things about",
    "start": "2440440",
    "end": "2446400"
  },
  {
    "text": "okay don't use the buildin types directly you have to use them to",
    "start": "2446400",
    "end": "2452800"
  },
  {
    "text": "implement other stuff but nevertheless try to be very conservative about implicit conversions and one implicit",
    "start": "2452800",
    "end": "2459400"
  },
  {
    "text": "conversion that's forbidden in in both directions is uh to and from Bool pool",
    "start": "2459400",
    "end": "2465599"
  },
  {
    "text": "has a disadvantage or some people say it's Advantage that it's considered an",
    "start": "2465599",
    "end": "2470640"
  },
  {
    "text": "integer so whenever you have a Boolean value you can use it to compute",
    "start": "2470640",
    "end": "2475800"
  },
  {
    "text": "something with it some people use it for let's say interesting multiplications and multiplying by zero",
    "start": "2475800",
    "end": "2482800"
  },
  {
    "text": "or one is actually okay that wouldn't overflow um but it's not really uh let's say",
    "start": "2482800",
    "end": "2491200"
  },
  {
    "text": "convenient to understand code that is written like that and the compiler will actually",
    "start": "2491200",
    "end": "2497599"
  },
  {
    "text": "optimize your ifs to be decent enough to actually not having to do these tricks",
    "start": "2497599",
    "end": "2502640"
  },
  {
    "text": "in your code um also character types should only",
    "start": "2502640",
    "end": "2508000"
  },
  {
    "text": "be used for text that is also philosophy in misra uh",
    "start": "2508000",
    "end": "2514520"
  },
  {
    "text": "we have these dedicated integer types for eight bits or whatever 16 bits and",
    "start": "2514520",
    "end": "2519880"
  },
  {
    "text": "you might have a wi character type that where you don't even know how many bits it it's on your target",
    "start": "2519880",
    "end": "2525760"
  },
  {
    "text": "system and there's another thing the last line if you look at there assignment B numbers shall be",
    "start": "2525760",
    "end": "2532000"
  },
  {
    "text": "appropriate this assignment is capitalized and italicized you might not see that on the font on my slide which",
    "start": "2532000",
    "end": "2538599"
  },
  {
    "text": "means it's more than just the equal assignment operator it's all all all",
    "start": "2538599",
    "end": "2544160"
  },
  {
    "text": "places where you have a targetp type that is either fixed or deduced and you initialize it from another type like",
    "start": "2544160",
    "end": "2551040"
  },
  {
    "text": "passing an argument to a function where the function parameter tells you what type you get and then you pass in a",
    "start": "2551040",
    "end": "2558000"
  },
  {
    "text": "value if that's would uh require implicit conversion then that's kind of",
    "start": "2558000",
    "end": "2563520"
  },
  {
    "text": "something where the misra Checker should actually trigger a warning or actually an",
    "start": "2563520",
    "end": "2569400"
  },
  {
    "text": "error now there's a lot about cast so you want to have strong types and you",
    "start": "2569400",
    "end": "2575839"
  },
  {
    "text": "don't to have costs who is using type cost in your",
    "start": "2575839",
    "end": "2583760"
  },
  {
    "text": "code go home treat each cast that you have to do as a design",
    "start": "2585240",
    "end": "2593880"
  },
  {
    "text": "error if you have employed the type system properly you don't do",
    "start": "2594680",
    "end": "2599880"
  },
  {
    "text": "casts you might construct one value from another that's the corner case where I",
    "start": "2599880",
    "end": "2605240"
  },
  {
    "text": "allow it but most other situations where you cast is broken design there's even",
    "start": "2605240",
    "end": "2612559"
  },
  {
    "text": "broken code like oh casting away const or",
    "start": "2612559",
    "end": "2617640"
  },
  {
    "text": "volatile uh there's reinterpret cast where you do pointer interesting things I know",
    "start": "2617640",
    "end": "2624359"
  },
  {
    "text": "sometimes you need to do that but consider each cast that you have to write in a code a potential design",
    "start": "2624359",
    "end": "2630760"
  },
  {
    "text": "problem and if you would be my student which you no longer are uh I would ask",
    "start": "2630760",
    "end": "2635800"
  },
  {
    "text": "you to write at least half a page rationale while this class is is actually",
    "start": "2635800",
    "end": "2642000"
  },
  {
    "text": "okay and then you might think of changing your design now for strong types there are",
    "start": "2642000",
    "end": "2647960"
  },
  {
    "text": "plenty of libraries also one by me uh it's called so if someone tells you I have",
    "start": "2647960",
    "end": "2654520"
  },
  {
    "text": "something for you that's my strong Ty Library um it's slightly different from",
    "start": "2654520",
    "end": "2661040"
  },
  {
    "text": "other strong Ty libraries that you might have heard I'm not sure uh we have uh",
    "start": "2661040",
    "end": "2666520"
  },
  {
    "text": "Jonathan Miller here who has a strong type Library we have banfer here who has",
    "start": "2666520",
    "end": "2671880"
  },
  {
    "text": "another strong type library and you have M so you have options to choose and to",
    "start": "2671880",
    "end": "2676920"
  },
  {
    "text": "see a little bit how things work we have that kind of oops can can we see that",
    "start": "2676920",
    "end": "2682000"
  },
  {
    "text": "there I'm I'm always pointing to things that you cannot actually see so you use",
    "start": "2682000",
    "end": "2687319"
  },
  {
    "text": "inheritance uh from actually kind of crtp pattern you say what is the actual",
    "start": "2687319",
    "end": "2693319"
  },
  {
    "text": "rep type that you rep and then you can add add in with kind of uh mixin classes",
    "start": "2693319",
    "end": "2699800"
  },
  {
    "text": "additional operators like the output operator uh relational operators and",
    "start": "2699800",
    "end": "2704839"
  },
  {
    "text": "here we have additive operators so you can add and subtract and and that's it not multiply leaders and the other",
    "start": "2704839",
    "end": "2712640"
  },
  {
    "text": "version is if you actually want to have more control you can actually have a member variable and then only mix in The",
    "start": "2712640",
    "end": "2718720"
  },
  {
    "text": "Operators but that would actually uh get slightly uh more code to actually write",
    "start": "2718720",
    "end": "2725160"
  },
  {
    "text": "so it's really not very intrusive and not much code to write to get a distinct type and it's a",
    "start": "2725160",
    "end": "2730960"
  },
  {
    "text": "little bit more than a type def but it gives you much more safety because you only get these operators that you",
    "start": "2730960",
    "end": "2738079"
  },
  {
    "text": "actually specify to get and if you need U mixing uh different",
    "start": "2738079",
    "end": "2745960"
  },
  {
    "text": "um strong types in in an expression you might have to write those uh combining",
    "start": "2745960",
    "end": "2751119"
  },
  {
    "text": "operators yourself but at least you are sure that you're not getting r ridiculous",
    "start": "2751119",
    "end": "2756960"
  },
  {
    "text": "operations that is the important thing if you just use a type t or a type Alias",
    "start": "2756960",
    "end": "2762480"
  },
  {
    "text": "you end up with having all the integer or floating Point operators at your fingertips and there's no distinction by",
    "start": "2762480",
    "end": "2768200"
  },
  {
    "text": "the compiler if if it's your leader gas type or just uh Pi that you get from",
    "start": "2768200",
    "end": "2775160"
  },
  {
    "text": "somewhere um there's more on that uh uh library and if you insist you can",
    "start": "2775160",
    "end": "2781760"
  },
  {
    "text": "actually try it there's one kave yet because it uses inheritance with aggre",
    "start": "2781760",
    "end": "2787480"
  },
  {
    "text": "don't put your Types on the Heap and then use still lead to a base pointer of one of these mixing classes which you",
    "start": "2787480",
    "end": "2793520"
  },
  {
    "text": "inherit from that is that is a corner case but if you turn that off you lose the ability to to make them Aggregates",
    "start": "2793520",
    "end": "2799440"
  },
  {
    "text": "which gives you all kind of bad properties on some compilers who have uh who no longer will compile your code AS",
    "start": "2799440",
    "end": "2806880"
  },
  {
    "text": "efficient as as otherwise especially in uh on on the AI",
    "start": "2806880",
    "end": "2812760"
  },
  {
    "text": "level so if you consider all all these built-in types that you need to build your good stuff but not your domain",
    "start": "2813680",
    "end": "2820800"
  },
  {
    "text": "abstractions use strong types detect or prevent implicit",
    "start": "2820800",
    "end": "2827319"
  },
  {
    "text": "conversions um prevent s integer overflow maybe use a safe numerics",
    "start": "2827319",
    "end": "2832960"
  },
  {
    "text": "library that actually raises exception like boost safe numerics and uh oh I",
    "start": "2832960",
    "end": "2838640"
  },
  {
    "text": "forgot one thing that we come uh don't use C++ bit fields for mapping Hardware",
    "start": "2838640",
    "end": "2844000"
  },
  {
    "text": "because that's non able it's not guaranteed any kind of layout unless you",
    "start": "2844000",
    "end": "2849920"
  },
  {
    "text": "compiler tells you so and it's implementation defined so it might change with compiler settings or the",
    "start": "2849920",
    "end": "2855680"
  },
  {
    "text": "next version of the compiler and don't use bit Fields now that's part of class design",
    "start": "2855680",
    "end": "2864760"
  },
  {
    "text": "and I have more slides on class design one thing is bit fields and unions and uh more or less we misra says don't use",
    "start": "2864760",
    "end": "2872319"
  },
  {
    "text": "bit fields and don't use unions and it's not as strong about bit Fields",
    "start": "2872319",
    "end": "2879800"
  },
  {
    "text": "as about unions um but at least it tells you a lot about if you have bit Fields yeah",
    "start": "2879800",
    "end": "2885680"
  },
  {
    "text": "better not have assigned integer of size one because you don't know what actually",
    "start": "2885680",
    "end": "2890920"
  },
  {
    "text": "the true if it's a bit one or zero if that's minus one or one or what what it",
    "start": "2890920",
    "end": "2896040"
  },
  {
    "text": "actually means it doesn't make sense for a single bit bit field to have assigned",
    "start": "2896040",
    "end": "2902359"
  },
  {
    "text": "type and for unions use standard variant",
    "start": "2902359",
    "end": "2908000"
  },
  {
    "text": "unless you actually want to have Tai punning and bit Fields where Tai punning more or less",
    "start": "2908000",
    "end": "2914319"
  },
  {
    "text": "doesn't work in C++ as it works in C even if your compiler tends to tell to",
    "start": "2914319",
    "end": "2920200"
  },
  {
    "text": "tell yeah I I I'm doing that it's undefined Behavior even though it works there are few Corner cases where",
    "start": "2920200",
    "end": "2928319"
  },
  {
    "text": "um doing tie punning with Union are allowed in",
    "start": "2928319",
    "end": "2933480"
  },
  {
    "text": "C++ and I make use of that to actually Implement a bit FEI field uh helper that",
    "start": "2933480",
    "end": "2939400"
  },
  {
    "text": "allows you to specify bit Fields with the starting point position and the width and this allows you to actually",
    "start": "2939400",
    "end": "2945720"
  },
  {
    "text": "get there to use a union to map your register to individual pseudo bit field",
    "start": "2945720",
    "end": "2953319"
  },
  {
    "text": "me union members where you can actually access them and uh the um the library",
    "start": "2953319",
    "end": "2959880"
  },
  {
    "text": "behind that will actually do all the um let's say the the masking that is kind",
    "start": "2959880",
    "end": "2965079"
  },
  {
    "text": "of the eous thing to do by hand for you and and behind that and I Implement that",
    "start": "2965079",
    "end": "2970359"
  },
  {
    "text": "deliberately because I've seen client code that used a union and also kind of",
    "start": "2970359",
    "end": "2975480"
  },
  {
    "text": "these things but did it wrongly they weren't using the mechanism that is not",
    "start": "2975480",
    "end": "2982680"
  },
  {
    "text": "undefined behavior for the underlying punning uh uh that that is is required",
    "start": "2982680",
    "end": "2987799"
  },
  {
    "text": "there so all these BF things are actually struct with the same member and",
    "start": "2987799",
    "end": "2994359"
  },
  {
    "text": "between those you can actually individually have different union members act uh only one is active and",
    "start": "2994359",
    "end": "3000599"
  },
  {
    "text": "you can access nevertheless the non-active member without having undefined Behavior that's one of the",
    "start": "3000599",
    "end": "3006160"
  },
  {
    "text": "corner cases where the standard allows it and I don't have a talk about that",
    "start": "3006160",
    "end": "3011319"
  },
  {
    "text": "bit field type and how it's done but you the code is not that",
    "start": "3011319",
    "end": "3016359"
  },
  {
    "text": "complicated now about class data members there have been schools of thought",
    "start": "3016359",
    "end": "3021400"
  },
  {
    "text": "telling you oh make every data member in the class private",
    "start": "3021400",
    "end": "3026440"
  },
  {
    "text": "I think that's wrong because people tend to make",
    "start": "3026440",
    "end": "3032079"
  },
  {
    "text": "everything private and then have get and set functions for each of the data members which is kind of",
    "start": "3032079",
    "end": "3039160"
  },
  {
    "text": "ridiculous why not make it public so misra and also C++ defines",
    "start": "3039160",
    "end": "3046839"
  },
  {
    "text": "Aggregates as having some interesting properties and it even allows today",
    "start": "3046839",
    "end": "3052280"
  },
  {
    "text": "inheritance with Aggregates even though between I think 7 19 20 and 23 some some kind of corner case wiggling has been",
    "start": "3052280",
    "end": "3059240"
  },
  {
    "text": "done to actually make things uh safer where the sended was wrong but nevertheless encapsulation is one thing",
    "start": "3059240",
    "end": "3066760"
  },
  {
    "text": "if you want to change something it's good to have it encapsulated and not proliferate throughout your code on the",
    "start": "3066760",
    "end": "3073920"
  },
  {
    "text": "other hand sometimes it's overrated if it gets in your way of using",
    "start": "3073920",
    "end": "3079559"
  },
  {
    "text": "something even though a struct might have just a public data memory it gives you a distinct type that is different",
    "start": "3079559",
    "end": "3086400"
  },
  {
    "text": "from the member data member type and that's a big distinction because it again gives you strong typing if you use",
    "start": "3086400",
    "end": "3093520"
  },
  {
    "text": "that type as a function parameter you not easily get get wrong type uh or",
    "start": "3093520",
    "end": "3099319"
  },
  {
    "text": "let's say a slightly different type uh be passed down there now my biggest contribution and I",
    "start": "3099319",
    "end": "3106760"
  },
  {
    "text": "need to hurry up a little bit is about special member functions and one thing is if a member",
    "start": "3106760",
    "end": "3113839"
  },
  {
    "text": "function returns some kind of inner parts of an object you actually should ref qualify that who has ever ref",
    "start": "3113839",
    "end": "3120480"
  },
  {
    "text": "qualified a member function Beyond example code oh that's a feature introduced in",
    "start": "3120480",
    "end": "3126880"
  },
  {
    "text": "C+ was 11 who has written a function returning a reference to a member a",
    "start": "3126880",
    "end": "3132359"
  },
  {
    "text": "member function those must be ref qualified otherwise you can call them on a",
    "start": "3132359",
    "end": "3137880"
  },
  {
    "text": "temporary object and that would lead to dangling immediate dangling unfortunately the standard",
    "start": "3137880",
    "end": "3144440"
  },
  {
    "text": "doesn't follow that that even this Li language standard doesn't follow that and if you go home and analyze that code",
    "start": "3144440",
    "end": "3151920"
  },
  {
    "text": "you will see where it fails and actually ref qualifying an assignment operator would actually help you with that not",
    "start": "3151920",
    "end": "3158680"
  },
  {
    "text": "having a dangling reference returned from an assignment there's more about special",
    "start": "3158680",
    "end": "3164359"
  },
  {
    "text": "member functions and they use that interesting word whenever misra guideline gets if you would spell out",
    "start": "3164359",
    "end": "3170680"
  },
  {
    "text": "what it does is very lengthy there's a trick we use the word appropriate ately",
    "start": "3170680",
    "end": "3176119"
  },
  {
    "text": "and then the text defines what appropriately means which is kind of",
    "start": "3176119",
    "end": "3181280"
  },
  {
    "text": "okay we can get the output limit the output of of a tool Checker that say so you violated 1501 and then it will allow",
    "start": "3181280",
    "end": "3189559"
  },
  {
    "text": "you to actually get there and one thing we limit the freedom of copy and move",
    "start": "3189559",
    "end": "3197079"
  },
  {
    "text": "member functions so you wouldn't have a non-const reference",
    "start": "3197079",
    "end": "3202960"
  },
  {
    "text": "parameter for a copy Constructor or copy assignment remember Auto pointer for",
    "start": "3202960",
    "end": "3210040"
  },
  {
    "text": "those of you old enough also we will tell you that if you",
    "start": "3210040",
    "end": "3215160"
  },
  {
    "text": "have a move member function it must be no accept otherwise it doesn't make sense to have a move operation at all at",
    "start": "3215160",
    "end": "3222520"
  },
  {
    "text": "least for the reason where you want to have move so these are the signatures for the",
    "start": "3222520",
    "end": "3229200"
  },
  {
    "text": "copy and move operations and that's more or less the only thing that's allowed for them",
    "start": "3229200",
    "end": "3235680"
  },
  {
    "text": "and again notify we have these uh oops ref qualification there and",
    "start": "3235680",
    "end": "3244440"
  },
  {
    "text": "there on the assignment operators which you don't unfortunately",
    "start": "3244440",
    "end": "3250599"
  },
  {
    "text": "don't get from the standard uh defaults but you will get if",
    "start": "3250599",
    "end": "3255799"
  },
  {
    "text": "you define your own or will have to do if you define your own and you should do that actually regardless if it's misra",
    "start": "3255799",
    "end": "3261599"
  },
  {
    "text": "or not now let's look a little bit at that appropriately one thing that's",
    "start": "3261599",
    "end": "3268240"
  },
  {
    "text": "inappropriate having a Destructor with an empty body who has a Destructor with an empty body ever written one I have",
    "start": "3268240",
    "end": "3275040"
  },
  {
    "text": "many of those go home when you go home Friday delete",
    "start": "3275040",
    "end": "3282200"
  },
  {
    "text": "those they don't add anything if it's a virtual instructor in",
    "start": "3282200",
    "end": "3287400"
  },
  {
    "text": "a base class make it equals default that's the only change that I'm allowing you to keep it otherwise throw them away",
    "start": "3287400",
    "end": "3295680"
  },
  {
    "text": "they make your code worse if you look at the um code base of",
    "start": "3295680",
    "end": "3302599"
  },
  {
    "text": "the masss U helicopter thing there on Mars they have plenty of those and I",
    "start": "3302599",
    "end": "3309200"
  },
  {
    "text": "said oh my God they didn't know C++ now there's a consistent definition",
    "start": "3309200",
    "end": "3316720"
  },
  {
    "text": "for copy and move operations we have the unmovable objects which are used for",
    "start": "3316720",
    "end": "3322000"
  },
  {
    "text": "scope uh scope based Resource Management we have move only objects like unique",
    "start": "3322000",
    "end": "3327160"
  },
  {
    "text": "manager and we have copy enabled object and uh we have some other things that",
    "start": "3327160",
    "end": "3333240"
  },
  {
    "text": "are unmovable base classes with virtual member",
    "start": "3333240",
    "end": "3339480"
  },
  {
    "text": "functions and if you have copy and move enablement where you do your own copy",
    "start": "3339480",
    "end": "3344559"
  },
  {
    "text": "and move operation definitions this is only allowed if you have a customized the structure so one that's not equals",
    "start": "3344559",
    "end": "3351200"
  },
  {
    "text": "default and one that is actually not not defined so compiler",
    "start": "3351200",
    "end": "3360599"
  },
  {
    "text": "provided now unmovable objects have a public virtual instructor and so on and if you",
    "start": "3361079",
    "end": "3367680"
  },
  {
    "text": "want to learn much more about those how those special member functions look at my uh watch my talk",
    "start": "3367680",
    "end": "3374559"
  },
  {
    "text": "on what classes we design and how which would be another 90 minutes talk and I",
    "start": "3374559",
    "end": "3381520"
  },
  {
    "text": "have some slides here for you to for self study I distinguish different kinds of types in in that you would design",
    "start": "3381520",
    "end": "3389000"
  },
  {
    "text": "value types those just work relation types that are Point Al likee where you",
    "start": "3389000",
    "end": "3394480"
  },
  {
    "text": "need another object to actually be uh valid and when the other object",
    "start": "3394480",
    "end": "3400079"
  },
  {
    "text": "goes away or change a state that relation type might actually become invalid and using it means dangling and",
    "start": "3400079",
    "end": "3406079"
  },
  {
    "text": "dangling is undefined Behavior we have these class hierarchies which I think",
    "start": "3406079",
    "end": "3411160"
  },
  {
    "text": "are much overused in modern C++ and no longer have that relevance that we",
    "start": "3411160",
    "end": "3417359"
  },
  {
    "text": "thought they have in the '90s because we were so intrigued by the keyword class that we are able to our Define our own",
    "start": "3417359",
    "end": "3424200"
  },
  {
    "text": "types and then came the strange things inheritance that nobody actually understood before we had design patterns",
    "start": "3424200",
    "end": "3430240"
  },
  {
    "text": "and everybody was using it for everything it's like when you teach students tool X the first thing that",
    "start": "3430240",
    "end": "3435920"
  },
  {
    "text": "they do the next time is oh we had so such a hard time learning X we use x everywhere regardless of what that X is",
    "start": "3435920",
    "end": "3443559"
  },
  {
    "text": "it used to be linked lists or trees uh everybody was implementing link list in the first job they they had after",
    "start": "3443559",
    "end": "3449839"
  },
  {
    "text": "University and then we have those manager types I would actually like to rename them janitorial types because",
    "start": "3449839",
    "end": "3456920"
  },
  {
    "text": "those are the one who actually clean up after you're done that's not a manager job a manager",
    "start": "3456920",
    "end": "3464240"
  },
  {
    "text": "says I don't care actually manager makes you not to care uh and actually this",
    "start": "3464240",
    "end": "3470039"
  },
  {
    "text": "janitorial types and let me skip over all these different things how you create those managers and and general",
    "start": "3470039",
    "end": "3476720"
  },
  {
    "text": "managers and my guideline is takeway use",
    "start": "3476720",
    "end": "3482119"
  },
  {
    "text": "value types pass by value return by value compilers are very good in optimizing and there's even uh",
    "start": "3482119",
    "end": "3488960"
  },
  {
    "text": "obligatory uh um copy elision that you don't even when you return something you",
    "start": "3488960",
    "end": "3495200"
  },
  {
    "text": "don't even have to have a supporting copy Constructor reduce the need for relation",
    "start": "3495200",
    "end": "3500520"
  },
  {
    "text": "types so everything that's pointer likee having a plain pointer in my opinion has",
    "start": "3500520",
    "end": "3507359"
  },
  {
    "text": "no uh standing in any kind of Safety crial Code unless it's really tightly",
    "start": "3507359",
    "end": "3513359"
  },
  {
    "text": "encapsulated in a manager class and you never use the plane pointer anywhere",
    "start": "3513359",
    "end": "3520599"
  },
  {
    "text": "else uh unfortunately we don't have optional references unless you use a non-stented",
    "start": "3520599",
    "end": "3526480"
  },
  {
    "text": "optional which I recommend at the moment um I'm trying to fight the the um the uh",
    "start": "3526480",
    "end": "3532799"
  },
  {
    "text": "how do you say that um the the the dony hot thing uh to get optional references",
    "start": "3532799",
    "end": "3538559"
  },
  {
    "text": "I'm I'm trying to to to to to um make a uh how do you call that in in English",
    "start": "3538559",
    "end": "3545520"
  },
  {
    "text": "uh is it a lance no or Jou thing so kind I I I want to kind of find the windmills",
    "start": "3545520",
    "end": "3551160"
  },
  {
    "text": "to to actually get optional reference in the standard I'm not sure I succeed but that's one of those gorial tasks I like",
    "start": "3551160",
    "end": "3556960"
  },
  {
    "text": "to work to clean up things and uh use strong types and uh I didn't uh expand",
    "start": "3556960",
    "end": "3563079"
  },
  {
    "text": "on error handling in this talk because now it's just too much to actually tell you and get rid of this have guts and",
    "start": "3563079",
    "end": "3569839"
  },
  {
    "text": "get rid of the uh actual uh bad things that you might",
    "start": "3569839",
    "end": "3576000"
  },
  {
    "text": "use misra stay tuned for its release it's about to be there I even can use",
    "start": "3576000",
    "end": "3582079"
  },
  {
    "text": "the the rule numbers uh that are the official ones those those won't change anymore uh nevertheless even if you",
    "start": "3582079",
    "end": "3589359"
  },
  {
    "text": "don't have a static analysis tool that does misra 2023 um use your warnings as errors have",
    "start": "3589359",
    "end": "3597760"
  },
  {
    "text": "sanitizers and more or less if you need more training call",
    "start": "3597760",
    "end": "3605680"
  },
  {
    "text": "[Applause] me oh and don't forget to check for",
    "start": "3610290",
    "end": "3616200"
  },
  {
    "text": "multiplication overflows there's a",
    "start": "3616200",
    "end": "3620039"
  },
  {
    "text": "question I'm curious what is happening after Mr C++ 23 is released will you",
    "start": "3622200",
    "end": "3628640"
  },
  {
    "text": "continue because the last time it took 15 years uh we already have a um a",
    "start": "3628640",
    "end": "3634160"
  },
  {
    "text": "tracker for issues to actually resolve and uh we will address C+ was 20 maybe",
    "start": "3634160",
    "end": "3639520"
  },
  {
    "text": "23 I'm not sure because the compilers won't be ready and we might want to have an update before 23 compilers are",
    "start": "3639520",
    "end": "3645440"
  },
  {
    "text": "actually available in the field because many companies in automotive industry in Germany on the medical domain still uh",
    "start": "3645440",
    "end": "3652440"
  },
  {
    "text": "already use C++ 20 it's it's already an issue uh I would say the current misra",
    "start": "3652440",
    "end": "3658400"
  },
  {
    "text": "rules are let's say that's one of the things where you have a directive use standard C++",
    "start": "3658400",
    "end": "3664920"
  },
  {
    "text": "2017 where you can deviate oh we are using C++ 20 and I think we are good enough to",
    "start": "3664920",
    "end": "3673880"
  },
  {
    "text": "actually have phrased most of the rules because we know what C+ 20 is about in a",
    "start": "3673880",
    "end": "3680160"
  },
  {
    "text": "way that are compatible with C plus was 20 but for example the Range four thing we have had to put in because we",
    "start": "3680160",
    "end": "3686319"
  },
  {
    "text": "couldn't wait for C+ 3 to be become standard okay",
    "start": "3686319",
    "end": "3691720"
  },
  {
    "text": "thanks and again it doesn't stop at misra guidelines if your project has more gu rules you're and your actually",
    "start": "3692720",
    "end": "3701079"
  },
  {
    "text": "need to care about safety critical systems ISO 26262 or",
    "start": "3701079",
    "end": "3706880"
  },
  {
    "text": "61508 then you must do that it's not an accus MRA doesn't have that",
    "start": "3706880",
    "end": "3712319"
  },
  {
    "text": "rule to create un defin behavior that was a question another one take the",
    "start": "3712319",
    "end": "3717920"
  },
  {
    "text": "microphone please because I might not be able to hear so you mentioned about bit fields and interfacing with Hardware um",
    "start": "3717920",
    "end": "3725319"
  },
  {
    "text": "if you have a sort of you know a memory location and a content is coming like from other Hardware like it's the memory",
    "start": "3725319",
    "end": "3732400"
  },
  {
    "text": "transfer from another system you have some data memory and you want to map it to to own structure would that be",
    "start": "3732400",
    "end": "3738039"
  },
  {
    "text": "different from the hardware or is it t differently or small as the same the the code let's say C++ bitfield types you",
    "start": "3738039",
    "end": "3747799"
  },
  {
    "text": "cannot guarantee it might work with the current compiler and you're setting that the bit field actually Maps like you",
    "start": "3747799",
    "end": "3754160"
  },
  {
    "text": "intended to map but there's no guarantee you might switch a different compiler it might have a different layout and it",
    "start": "3754160",
    "end": "3760400"
  },
  {
    "text": "just doesn't work with my let's say if you DIY the bit filling or masking or use my my",
    "start": "3760400",
    "end": "3767640"
  },
  {
    "text": "library you can actually it's standard C++ it guaranteed to work and it creates",
    "start": "3767640",
    "end": "3774720"
  },
  {
    "text": "exactly the same code as your compiler would do with bit Fields because optimizers are good",
    "start": "3774720",
    "end": "3781559"
  },
  {
    "text": "enough um did that answer a question and let's say to have that memory address",
    "start": "3781680",
    "end": "3787520"
  },
  {
    "text": "4711 where your Hardware register is that is where you write a deviation so",
    "start": "3787520",
    "end": "3792799"
  },
  {
    "text": "you parameterize your wrapper class that does the operations like a blink on or LED on LED off let's say the simple",
    "start": "3792799",
    "end": "3799920"
  },
  {
    "text": "example then you would actually deviate to have in your program the hard mapping",
    "start": "3799920",
    "end": "3806279"
  },
  {
    "text": "to having that reinterpret cast or that address to a a pointer to that type uh",
    "start": "3806279",
    "end": "3812319"
  },
  {
    "text": "which actually would require to to document okay my Hardware has 4711",
    "start": "3812319",
    "end": "3817760"
  },
  {
    "text": "that's address of that register and you have documented that this reinterpreted cast is okay it was not really part of",
    "start": "3817760",
    "end": "3825079"
  },
  {
    "text": "register but like it's a if it's an um protocol packet of a communication protocol it's in memory and you have a",
    "start": "3825079",
    "end": "3832440"
  },
  {
    "text": "specification saying like this first means this one the next again I recommend to use something like that",
    "start": "3832440",
    "end": "3838200"
  },
  {
    "text": "bitfield library and not the bit fields of the of the language because they are not guaranteed to have the correct",
    "start": "3838200",
    "end": "3844160"
  },
  {
    "text": "layout second question systems is this likely to work better in normal C or is it uh the same in C and",
    "start": "3844160",
    "end": "3850680"
  },
  {
    "text": "C++ uh it's the same in C and in C++ okay thank",
    "start": "3850680",
    "end": "3857920"
  },
  {
    "text": "you more questions I think we are over time",
    "start": "3859319",
    "end": "3865599"
  },
  {
    "text": "and uh fun and break is",
    "start": "3865599",
    "end": "3871000"
  },
  {
    "text": "[Applause]",
    "start": "3871450",
    "end": "3877079"
  },
  {
    "text": "waiting",
    "start": "3877079",
    "end": "3880079"
  }
]