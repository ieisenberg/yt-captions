[
  {
    "text": "[Music] all right good afternoon everyone and thank",
    "start": "4980",
    "end": "11880"
  },
  {
    "text": "you for being here um my name is Johnny hyber uh and today I wanted to talk to",
    "start": "11880",
    "end": "17840"
  },
  {
    "text": "you about my personal experiences with um Azure container apps specifically um",
    "start": "17840",
    "end": "23840"
  },
  {
    "text": "just to be honest I don't have any professional experience with Azure kubernetes service I only have some",
    "start": "23840",
    "end": "30119"
  },
  {
    "text": "personal experience with it which means I've used it in the past for some of my um personal projects to learn how it",
    "start": "30119",
    "end": "37040"
  },
  {
    "text": "works and what it can do um but no professional experience and then basically when Azure container apps",
    "start": "37040",
    "end": "43559"
  },
  {
    "text": "became a new thing I was I started looking into that migrating my personal projects into Azure container apps and",
    "start": "43559",
    "end": "49559"
  },
  {
    "text": "it made me so happy that I'm today also using it uh for production uh and professional uh purposes and this is the",
    "start": "49559",
    "end": "56719"
  },
  {
    "text": "experience that I wanted to share with you that's the reason why I call it goodbye Azure kubernetes service and",
    "start": "56719",
    "end": "62120"
  },
  {
    "text": "hello Azure container apps because for me personally it was a goodbye for uh",
    "start": "62120",
    "end": "67439"
  },
  {
    "text": "kubernetes um this talk is not an anti kubernetes kubernetes is is a very good",
    "start": "67439",
    "end": "72799"
  },
  {
    "text": "thing it's it's I'm very happy it still exists but for my personal experience um I I said uh goodbye um very quickly uh",
    "start": "72799",
    "end": "82479"
  },
  {
    "text": "who am I my name is Johnny as I said I'm from Belgium so not very far away from here um took the train very happy um and",
    "start": "82479",
    "end": "91400"
  },
  {
    "text": "I am a software engineer I am a consultant and our focus with the company is on the Microsoft stack so we",
    "start": "91400",
    "end": "98079"
  },
  {
    "text": "do net development backend front end and we also do Azure Cloud uh very",
    "start": "98079",
    "end": "103520"
  },
  {
    "text": "specifically uh Azure um I'm a Microsoft MVP and basically everything that I'm",
    "start": "103520",
    "end": "109200"
  },
  {
    "text": "telling you today is already available on my GitHub page so I have a GitHub page with my nickname Johnny um there's",
    "start": "109200",
    "end": "116240"
  },
  {
    "text": "a QR code and there's a link in the bottom of every slide where you can direct IR ly navigate to my GitHub page",
    "start": "116240",
    "end": "122039"
  },
  {
    "text": "so yeah the slides are up up there all the examples are up there so basically you can already walk outside you have",
    "start": "122039",
    "end": "128039"
  },
  {
    "text": "everything uh that you need but again very happy that you uh decided to come here uh to listen to me so um before",
    "start": "128039",
    "end": "137040"
  },
  {
    "text": "diving into uh container apps I'm just going to very quickly talk to you about",
    "start": "137040",
    "end": "142599"
  },
  {
    "text": "why we need containers and why we are using uh containers today well basically the idea for containers comes from the",
    "start": "142599",
    "end": "149280"
  },
  {
    "text": "shipping containers obviously if we go back like 100 year or even a little bit more um shipping things was quite hard",
    "start": "149280",
    "end": "157920"
  },
  {
    "text": "because things come in different sizes we have boxes we have bags we have barrels we have all kinds of stuff that",
    "start": "157920",
    "end": "165200"
  },
  {
    "text": "we put in containers and those containers were different sizes uh which means we needed a lot of manpower to",
    "start": "165200",
    "end": "172480"
  },
  {
    "text": "basically put all of those things on ships it didn't fit uh the correct way it was hard to put uh to transport uh",
    "start": "172480",
    "end": "179720"
  },
  {
    "text": "and and and basically we revolutionized the way we ship things um by putting",
    "start": "179720",
    "end": "185879"
  },
  {
    "text": "them in containers because if you put them in a container and a container has a very specific size and it can actually",
    "start": "185879",
    "end": "193000"
  },
  {
    "text": "be um be moved around a lot easier in this example we know containers they",
    "start": "193000",
    "end": "199120"
  },
  {
    "text": "they look like this they go on ships they go on trains they go on lores um they have a standard size and the people",
    "start": "199120",
    "end": "206840"
  },
  {
    "text": "who are moving these containers they don't care what's inside of the containers of course the police cares",
    "start": "206840",
    "end": "212159"
  },
  {
    "text": "what's inside of it if it's cocaine but you shouldn't really care about what is inside of the container uh in order to",
    "start": "212159",
    "end": "218879"
  },
  {
    "text": "move it and that's the exact same way of thinking we are going to um do in",
    "start": "218879",
    "end": "224519"
  },
  {
    "text": "software development because you as a developer you create an application but the guy from operations that needs to",
    "start": "224519",
    "end": "230080"
  },
  {
    "text": "install the software somewhere he doesn't really need to know about the software he just needs to know how to deploy it and how to deploy it if we",
    "start": "230080",
    "end": "237000"
  },
  {
    "text": "work with containers can be standardized in a stand standardized way so you can deploy it in the cloud or on premise",
    "start": "237000",
    "end": "242599"
  },
  {
    "text": "doesn't matter just like when you put a container on a ship or or a lorry you don't really care um it should just work",
    "start": "242599",
    "end": "250680"
  },
  {
    "text": "so inside of the container is basically your software but also your configuration and your dependencies all",
    "start": "250680",
    "end": "257120"
  },
  {
    "text": "of that combined makes sure that your application when it's deployed somewhere will just work and this is of course a",
    "start": "257120",
    "end": "264360"
  },
  {
    "text": "very great idea and that is why today even in Cloud environments we are using containers uh so many times all right so",
    "start": "264360",
    "end": "273080"
  },
  {
    "text": "now that we know what containers are um yeah by the way this is mostly",
    "start": "273080",
    "end": "279160"
  },
  {
    "text": "how I do my containers when I'm doing personal projects instead of this like Enterprise grade stuff um so I just",
    "start": "279160",
    "end": "285960"
  },
  {
    "text": "wanted to uh let you know also the examples that I will show you today will look a little bit more like this um but",
    "start": "285960",
    "end": "291400"
  },
  {
    "text": "of course that's because I only have one hour of time all right if we look at Azure specifically the Azure Cloud",
    "start": "291400",
    "end": "297960"
  },
  {
    "text": "there's a lot of services we can already used today that have support for containers in one way or another from",
    "start": "297960",
    "end": "304080"
  },
  {
    "text": "the left hand side to the right hand side on the left hand side we have the web application just your service app or",
    "start": "304080",
    "end": "309320"
  },
  {
    "text": "your web app you can deploy that uh but you can also deploy that as a container so you can containerize your application",
    "start": "309320",
    "end": "316560"
  },
  {
    "text": "and that can run in whatever technology doesn't need to be to net or can be whatever you want basically that's the",
    "start": "316560",
    "end": "322560"
  },
  {
    "text": "concept of a container and you can deploy that to your uh web app and that will also work but that's just running",
    "start": "322560",
    "end": "328840"
  },
  {
    "text": "one container in one web app that has uh a web UI for example or or a web API",
    "start": "328840",
    "end": "336440"
  },
  {
    "text": "next we have the function app uh the serverless offering uh for function apps in in Azure this also has support for",
    "start": "336440",
    "end": "343560"
  },
  {
    "text": "containers you can put your function app inside of a container and deploy the container to a function app in Azure so",
    "start": "343560",
    "end": "350360"
  },
  {
    "text": "again the the services we all know and we all use they already have support for",
    "start": "350360",
    "end": "356520"
  },
  {
    "text": "containers then of course when using containers you want want to do some orchestration you want to have multiple",
    "start": "356520",
    "end": "361880"
  },
  {
    "text": "containers working together you maybe have a distributed application or a microservices application that uh",
    "start": "361880",
    "end": "367160"
  },
  {
    "text": "consists out of multiple of these containers and they need to work together well the first step Microsoft",
    "start": "367160",
    "end": "372880"
  },
  {
    "text": "did was doing the container instance which is still only running one container in one uh container instance",
    "start": "372880",
    "end": "378520"
  },
  {
    "text": "service but then um we also now have container apps and container apps is a",
    "start": "378520",
    "end": "384160"
  },
  {
    "text": "little bit like container instance but you have multiple containers that can run within a single container app and",
    "start": "384160",
    "end": "390360"
  },
  {
    "text": "you can have multiple container apps working together to build your distributed application and then of",
    "start": "390360",
    "end": "396080"
  },
  {
    "text": "course on the on the right hand side we have Azure kubernetes service where kubernetes is your orchestrator it will",
    "start": "396080",
    "end": "401720"
  },
  {
    "text": "orchestrate all of your containers they uh will work together uh and this is also available um in Azure and actually",
    "start": "401720",
    "end": "408880"
  },
  {
    "text": "Azure container uh Services was first Microsoft implemented a managed version",
    "start": "408880",
    "end": "414680"
  },
  {
    "text": "of azure uh uh of of kubernetes I'm sorry um with the azure kubernetes uh",
    "start": "414680",
    "end": "420840"
  },
  {
    "text": "service but then they they they basically saw that developers don't want",
    "start": "420840",
    "end": "426120"
  },
  {
    "text": "to care about all of the infrastru that is um that is needed to work with uh",
    "start": "426120",
    "end": "431240"
  },
  {
    "text": "kubernetes so they basically built an abstraction layer on top of kubernetes and that is called Azure container apps",
    "start": "431240",
    "end": "438199"
  },
  {
    "text": "to make it easier for us developers to work with the complexities of um container orchestration so again this",
    "start": "438199",
    "end": "445599"
  },
  {
    "text": "talk is not like an an kubernetes versus container apps uh this is just like container apps is an option it works in",
    "start": "445599",
    "end": "452960"
  },
  {
    "text": "a very similar way to Azure uh kubernetes service um unfortunately the",
    "start": "452960",
    "end": "458440"
  },
  {
    "text": "namings are a little bit different sometimes so I will explain the differences um but kubernetes can still",
    "start": "458440",
    "end": "464039"
  },
  {
    "text": "be a very valid option for you if you really want to have the full flexibility on how you do your uh container",
    "start": "464039",
    "end": "471360"
  },
  {
    "text": "landscape and which open source tools you want to use in combination with that so again kubernetes is still a viable",
    "start": "471360",
    "end": "477039"
  },
  {
    "text": "options but also um container apps so what is container apps of course it is",
    "start": "477039",
    "end": "483000"
  },
  {
    "text": "there for you to deploy your distributed or microservices application so if your",
    "start": "483000",
    "end": "488159"
  },
  {
    "text": "application exists out of multiple components that need to work together container apps can really be a solution",
    "start": "488159",
    "end": "495080"
  },
  {
    "text": "for you um it is serverless if needed which means that for example in in",
    "start": "495080",
    "end": "501199"
  },
  {
    "text": "kubernetes you need to specify the virtual machine nodes that are available",
    "start": "501199",
    "end": "506240"
  },
  {
    "text": "for you to run your containers on that is not lless because you need to",
    "start": "506240",
    "end": "511599"
  },
  {
    "text": "specify before you run any containers what your nodes are and what the size of",
    "start": "511599",
    "end": "517159"
  },
  {
    "text": "your nodes is and how many nodes you have in container apps you can go full fully server serverless which means that",
    "start": "517159",
    "end": "523719"
  },
  {
    "text": "Microsoft Azure will do that for you it will basically scale your applications for you and you don't need to worry",
    "start": "523719",
    "end": "529839"
  },
  {
    "text": "about how many um how many nodes you need to actually make that work um and",
    "start": "529839",
    "end": "536080"
  },
  {
    "text": "it says if needed and I will show you uh in the demo later um you can still",
    "start": "536080",
    "end": "542519"
  },
  {
    "text": "specify the notes if you really need to in Azure container apps but by default you don't have to so you have both",
    "start": "542519",
    "end": "549000"
  },
  {
    "text": "options um of course it it's it's um it's a very good uh service to run your",
    "start": "549000",
    "end": "554200"
  },
  {
    "text": "Cloud native apps because you put them in containers and they will just work um and it's also built on top of Open",
    "start": "554200",
    "end": "560880"
  },
  {
    "text": "Source software components so all of the software that lives inside of that abstraction layer that is azure",
    "start": "560880",
    "end": "566640"
  },
  {
    "text": "container apps is built on open uh softare uh open source software components and I have listed a couple of",
    "start": "566640",
    "end": "572760"
  },
  {
    "text": "them in the bottom for example it is built on top of kubernetes so Azure container apps is just kubernetes it's",
    "start": "572760",
    "end": "579480"
  },
  {
    "text": "just that layer of abstraction on top of kubernetes it uses Keta K which is an",
    "start": "579480",
    "end": "584800"
  },
  {
    "text": "open source Tool uh K stands for kubernetes um event driven autoscaling",
    "start": "584800",
    "end": "590880"
  },
  {
    "text": "so it it uh gives you the opportunity to autoscale your application based on the",
    "start": "590880",
    "end": "596279"
  },
  {
    "text": "Keta open- Source software tool that helps you with that it also has support by default for Dapper Dapper is the um",
    "start": "596279",
    "end": "604440"
  },
  {
    "text": "distributed application runtime and I will talk about that uh in the end of my presentation which can basically help",
    "start": "604440",
    "end": "610720"
  },
  {
    "text": "you to more easily make your applications talk to each other or your application components talk to each",
    "start": "610720",
    "end": "615920"
  },
  {
    "text": "other uh and then finally using using Envoy for your service Discovery Ingress",
    "start": "615920",
    "end": "621360"
  },
  {
    "text": "uh and stuff like that so these components in in kubernetes you can basically choose them in kubernetes if",
    "start": "621360",
    "end": "626440"
  },
  {
    "text": "you want to use something different you can in uh container apps you're basically stuck with these because they",
    "start": "626440",
    "end": "632800"
  },
  {
    "text": "are used by the Microsoft teams to build aure container app as that layer of abstraction so you're stuck with them",
    "start": "632800",
    "end": "638839"
  },
  {
    "text": "but they are open source so uh with that you can actually uh find a lot of documentation find a lot of help and",
    "start": "638839",
    "end": "645279"
  },
  {
    "text": "find a lot of uh components with that um that will make your applications uh work",
    "start": "645279",
    "end": "651480"
  },
  {
    "text": "as I already told you it scales dynamically and it can even scale to zero so if you're going completely",
    "start": "651480",
    "end": "657160"
  },
  {
    "text": "serverless and you don't specify your nodes you can scale your application to zero if needed which means that if",
    "start": "657160",
    "end": "663920"
  },
  {
    "text": "there's no usage if there's no HTTP requests for example you can completely scale down to zero and you don't pay",
    "start": "663920",
    "end": "669279"
  },
  {
    "text": "anything uh which is nice if you of course in kubernetes select an amount of nodes you pay for the virtual machines",
    "start": "669279",
    "end": "676200"
  },
  {
    "text": "that run your noes uh and you will pay for them always even if you don't have any uh resource usage uh for Azure",
    "start": "676200",
    "end": "683480"
  },
  {
    "text": "container apps this is different which is cool um so what can you build on",
    "start": "683480",
    "end": "688839"
  },
  {
    "text": "azure container apps make sense you're distributed the microservices application as I told you you have",
    "start": "688839",
    "end": "694000"
  },
  {
    "text": "multiple containers working together they can talk HTTP to each other um but also just web applications because um",
    "start": "694000",
    "end": "701399"
  },
  {
    "text": "Azure container apps has Ingress um availability by default so you can just enable it and now you can reach your",
    "start": "701399",
    "end": "707600"
  },
  {
    "text": "application from the outside world so you can create a web application for your users you can also do event driven",
    "start": "707600",
    "end": "712920"
  },
  {
    "text": "processing applications you can make your container apps work together with other Azure services like uh uh like uh",
    "start": "712920",
    "end": "720120"
  },
  {
    "text": "service bus for example you can do message messaging processing from service bus um works perfectly fine and",
    "start": "720120",
    "end": "726600"
  },
  {
    "text": "of course background processing applications will also work um I'm not",
    "start": "726600",
    "end": "731800"
  },
  {
    "text": "going to explain what kubernetes looks like this is just a diagram of what a",
    "start": "731800",
    "end": "737480"
  },
  {
    "text": "kubernetes cluster can look like and the reason I'm showing you here is because I want to talk to you about the",
    "start": "737480",
    "end": "742720"
  },
  {
    "text": "differences between kubernetes and um Azure container apps so if I look at it",
    "start": "742720",
    "end": "749399"
  },
  {
    "text": "very high level a kubernetes cluster exists out of multiple nodes so a node",
    "start": "749399",
    "end": "755399"
  },
  {
    "text": "is a virtual machine a virtual machine that can run your applications that is",
    "start": "755399",
    "end": "760600"
  },
  {
    "text": "your kubernetes cluster existing out of multiple nodes these nodes are called worker nodes um and these worker nodes",
    "start": "760600",
    "end": "768639"
  },
  {
    "text": "they contain your containers but not directly your containers they contain pods it's what they call it a pod and",
    "start": "768639",
    "end": "775560"
  },
  {
    "text": "inside of your pod lives your application within a container um you can scale your application by creating",
    "start": "775560",
    "end": "782199"
  },
  {
    "text": "multiple replicas of this pod within a specific node or spread among multiple",
    "start": "782199",
    "end": "788760"
  },
  {
    "text": "um of these nodes so you have kubernetes cluster you have nodes you have um your",
    "start": "788760",
    "end": "795440"
  },
  {
    "text": "uh pods which can be replicated which can be dynamically scaled running your",
    "start": "795440",
    "end": "800839"
  },
  {
    "text": "uh containers now in the container app we have kind of the same",
    "start": "800839",
    "end": "807199"
  },
  {
    "text": "architecture on the outside here in green um is the container app",
    "start": "807199",
    "end": "812279"
  },
  {
    "text": "environment so your environment in container apps is actually a little bit like your kubernetes name space um so",
    "start": "812279",
    "end": "819560"
  },
  {
    "text": "your kubernetes cluster can have multiple name spaces to basically um make sure that one application cannot",
    "start": "819560",
    "end": "825519"
  },
  {
    "text": "touch the other application so you can have multiple applications within the same um uh kubernetes cluster you can do",
    "start": "825519",
    "end": "832519"
  },
  {
    "text": "the same thing in container apps by creating a container app environment and your container app environment is basically virtual Network and everything",
    "start": "832519",
    "end": "839320"
  },
  {
    "text": "that you put inside of your container app environment can talk to each other on the on the private virtual network",
    "start": "839320",
    "end": "845560"
  },
  {
    "text": "but they can't um they can't communicate or the outside world cannot communicate with them inside of your environment you",
    "start": "845560",
    "end": "853079"
  },
  {
    "text": "can create one or more container apps one or multiple container apps um again",
    "start": "853079",
    "end": "859600"
  },
  {
    "text": "when you deploy multiple of these container apps within the same environment those container apps live in",
    "start": "859600",
    "end": "865079"
  },
  {
    "text": "the same virtual Network and they can talk to each other which is nice which is of of course what you want for a distributed application or a",
    "start": "865079",
    "end": "871240"
  },
  {
    "text": "microservices application then inside of your container app you can build multiple revisions this is something",
    "start": "871240",
    "end": "877240"
  },
  {
    "text": "that I don't really know um if that exists in kubernetes but I will show you in a demo and it becomes very clear what",
    "start": "877240",
    "end": "883000"
  },
  {
    "text": "a revision is basically when you deploy a first version that is your first revision and if you want to deploy a",
    "start": "883000",
    "end": "888759"
  },
  {
    "text": "newer version it creates a new revision for you and it keeps all the older revisions deactivated for you so if you",
    "start": "888759",
    "end": "896079"
  },
  {
    "text": "make an oopsie and you deploy something that doesn't really work work you can very quickly and easily go back to a",
    "start": "896079",
    "end": "901720"
  },
  {
    "text": "previous revision that is still available in Azure so you can basically uh fix that um so it will keep your",
    "start": "901720",
    "end": "908639"
  },
  {
    "text": "older revisions and then within your revisions we have the replicas we know from uh kubernetes so you can scale your",
    "start": "908639",
    "end": "915000"
  },
  {
    "text": "application horizontally by having multiple replicas of the same um the same container image um and these will",
    "start": "915000",
    "end": "922440"
  },
  {
    "text": "also live in that revision so this is the architecture for um container apps",
    "start": "922440",
    "end": "928120"
  },
  {
    "text": "so let's stop boring you with some slides and just show you some Azure stuff um if you want to create a new",
    "start": "928120",
    "end": "936160"
  },
  {
    "text": "container app is this readable for everyone in the",
    "start": "936160",
    "end": "942600"
  },
  {
    "text": "back yes and and maybe let me try to make it a little bit",
    "start": "943120",
    "end": "948839"
  },
  {
    "text": "bigger just to make to be",
    "start": "948839",
    "end": "952720"
  },
  {
    "text": "sure maybe that's going to be a little bit too big we'll",
    "start": "956720",
    "end": "961399"
  },
  {
    "text": "see so when you create a container app you search in the marketplace for",
    "start": "965519",
    "end": "972000"
  },
  {
    "text": "container app",
    "start": "972000",
    "end": "974680"
  },
  {
    "text": "obviously so if this is your first container app within your subscription",
    "start": "980560",
    "end": "985959"
  },
  {
    "text": "um you're also going to need to create the environment the uh container app environment I already have an",
    "start": "985959",
    "end": "991040"
  },
  {
    "text": "environment so I'm just going to reuse that one but again just remember that this is one container app and you can",
    "start": "991040",
    "end": "997839"
  },
  {
    "text": "create multiple of these container app services within the same environment for those to be able to talk to each other",
    "start": "997839",
    "end": "1004399"
  },
  {
    "text": "but if you want to have a completely separate application from this one you can create a second or a third and so on",
    "start": "1004399",
    "end": "1010120"
  },
  {
    "text": "uh environment and then they will be completely separate of course you give your container app a name for example",
    "start": "1010120",
    "end": "1016079"
  },
  {
    "text": "example 01 uh API let's say this is an API and you put that in a region and",
    "start": "1016079",
    "end": "1022800"
  },
  {
    "text": "within that region you will find the list of all your already created container app environments so I have a",
    "start": "1022800",
    "end": "1028438"
  },
  {
    "text": "CAE which stands for container app environment for NDC London in The Next",
    "start": "1028439",
    "end": "1034480"
  },
  {
    "text": "Step you uh specify your container so your containers will come from a",
    "start": "1034480",
    "end": "1040079"
  },
  {
    "text": "container registry that can be a public registry or a private registry in my case I've pushed my container images on",
    "start": "1040079",
    "end": "1047000"
  },
  {
    "text": "a private container regist from Azure itself so an Azure container registry",
    "start": "1047000",
    "end": "1052039"
  },
  {
    "text": "with the name NDC london. aure cr. and this one has all of my examples",
    "start": "1052039",
    "end": "1057600"
  },
  {
    "text": "so I'm going to use the example one API container image the latest version and",
    "start": "1057600",
    "end": "1064520"
  },
  {
    "text": "here you can select a workload profile as I told you before um you have",
    "start": "1064520",
    "end": "1071160"
  },
  {
    "text": "the option to do serverless or dedicated uh workload profiles and this is",
    "start": "1071160",
    "end": "1076360"
  },
  {
    "text": "actually the the the the the nodes that I was talking about in kubernetes so I'm",
    "start": "1076360",
    "end": "1081400"
  },
  {
    "text": "going to use consumption which is the serverless offering which means I don't really care how many nodes that I have",
    "start": "1081400",
    "end": "1086919"
  },
  {
    "text": "I'm just going to put this uh container app in the consumption which means that I can use for one single container app",
    "start": "1086919",
    "end": "1094480"
  },
  {
    "text": "up to four virtual CPUs and 8 GB of memory um and you can specify in",
    "start": "1094480",
    "end": "1100840"
  },
  {
    "text": "different steps how much resources this specific container app uh can use so I'm",
    "start": "1100840",
    "end": "1106559"
  },
  {
    "text": "just going to use the minimum one so a quarter of CPU and half a gigabyte of memory um in my container app this is an",
    "start": "1106559",
    "end": "1114440"
  },
  {
    "text": "API it's an API that just returns a message to me uh and this message has",
    "start": "1114440",
    "end": "1120120"
  },
  {
    "text": "what I call a version and that version is configurable configurable by using",
    "start": "1120120",
    "end": "1125159"
  },
  {
    "text": "environment variables so the environment variable version can for example be",
    "start": "1125159",
    "end": "1131600"
  },
  {
    "text": "NDC um in the next step you can enable or disable Ingress Ingress means can I",
    "start": "1133000",
    "end": "1139080"
  },
  {
    "text": "talk via HTTP to this container yes or no and when you enable this if it's a",
    "start": "1139080",
    "end": "1145200"
  },
  {
    "text": "web application for example you still have two options or three options even you can limit it you can limit it to The",
    "start": "1145200",
    "end": "1151960"
  },
  {
    "text": "Container app environment which means that all the other containers within the same environment can talk to this container app or you can open it up to",
    "start": "1151960",
    "end": "1159039"
  },
  {
    "text": "traffic from everywhere if you want to have a public facing website um this will create that um reverse proxy for",
    "start": "1159039",
    "end": "1166159"
  },
  {
    "text": "you of course you can do HTTP or TC CP I'm just going to ignore everything and",
    "start": "1166159",
    "end": "1171520"
  },
  {
    "text": "I'm going to put the Target Port so my application my container application is",
    "start": "1171520",
    "end": "1177120"
  },
  {
    "text": "listening on port 8080 by the way if you don't know since",
    "start": "1177120",
    "end": "1182280"
  },
  {
    "text": "net version 8 by default your container Port is 8080 before version 8 of net the",
    "start": "1182280",
    "end": "1188640"
  },
  {
    "text": "default was Port 80 um so this is something that uh actually took me a while to figure",
    "start": "1188640",
    "end": "1196320"
  },
  {
    "text": "out um and I I think that's all we",
    "start": "1197159",
    "end": "1201360"
  },
  {
    "text": "need this shouldn't take too long and if it takes longer than 30 seconds I will",
    "start": "1204880",
    "end": "1210000"
  },
  {
    "text": "just show you the one that I already created beforehand",
    "start": "1210000",
    "end": "1215120"
  },
  {
    "text": "let's go so I have this one also so if it's",
    "start": "1229120",
    "end": "1235320"
  },
  {
    "text": "created um you basically see your container app service um and here are three",
    "start": "1235320",
    "end": "1242039"
  },
  {
    "text": "interesting things revisions containers and scale and replicas um let's first go",
    "start": "1242039",
    "end": "1248760"
  },
  {
    "text": "to scale and replicas this is a web application that I've just deployed so um Azure container",
    "start": "1248760",
    "end": "1255919"
  },
  {
    "text": "apps will see that I've deployed uh a web app application with an Ingress um configured so it will automatically put",
    "start": "1255919",
    "end": "1262640"
  },
  {
    "text": "my scale rule setting to 0 to 10 which means a minimum of zero a maximum of 10",
    "start": "1262640",
    "end": "1268440"
  },
  {
    "text": "uh replicas so horizontally scaling my um application and by default it's using",
    "start": "1268440",
    "end": "1273480"
  },
  {
    "text": "the HTTP scaler and the HTTP scaler is part of that K open source uh tool that",
    "start": "1273480",
    "end": "1280440"
  },
  {
    "text": "kubernetes event driven um autoscaler uh platform and you can actually scale on",
    "start": "1280440",
    "end": "1286360"
  },
  {
    "text": "different things by default it's going to do HTTP which means if there are more than 10 concurrent requests at a certain",
    "start": "1286360",
    "end": "1293360"
  },
  {
    "text": "amount at a certain given time it will actually scale up automatically it will add in a new replica um and then if it",
    "start": "1293360",
    "end": "1300039"
  },
  {
    "text": "it has 10 concurrent requests for all the replicas it will go to a third replica and so on until it reaches the",
    "start": "1300039",
    "end": "1306080"
  },
  {
    "text": "maximum that I said to be 10 if there is no request for some time it will scale",
    "start": "1306080",
    "end": "1311679"
  },
  {
    "text": "down to zero it will basically kill your running application until the first request comes in it hits your reverse",
    "start": "1311679",
    "end": "1317960"
  },
  {
    "text": "proxy your reverse proxy will basically wake up the autoscaler the autoscaler will add one more uh will add the First",
    "start": "1317960",
    "end": "1324120"
  },
  {
    "text": "new replica and then it will handle your um request there's also scalers for CPU",
    "start": "1324120",
    "end": "1331360"
  },
  {
    "text": "memory um there's scalers for all the things we know in Azure for you can do for example scaling based on messages on",
    "start": "1331360",
    "end": "1338279"
  },
  {
    "text": "a queue so if there's a lot of messages on your queue you can automatically scale up to basically process all of",
    "start": "1338279",
    "end": "1343880"
  },
  {
    "text": "those messages in parallel and you can create your own custom scalers so you can have your own custom scaler added as",
    "start": "1343880",
    "end": "1350760"
  },
  {
    "text": "a component in K and you can then use that here um as your scale rule if you",
    "start": "1350760",
    "end": "1356679"
  },
  {
    "text": "want to change your scaling you basically need to create a new revision um so you can do edit and deploy and you",
    "start": "1356679",
    "end": "1365720"
  },
  {
    "text": "can change a couple of things you can change the the container itself with all of the uh values that we've seen before",
    "start": "1365720",
    "end": "1371559"
  },
  {
    "text": "where does the container come from what is the version of your container image um what is the CPU cores and memory that",
    "start": "1371559",
    "end": "1377120"
  },
  {
    "text": "you want to use for this specific uh container app and what are the environment variables you can also",
    "start": "1377120",
    "end": "1382960"
  },
  {
    "text": "change the scaling rules of course uh here so it's just dragging these around",
    "start": "1382960",
    "end": "1388799"
  },
  {
    "text": "and by the way I'm showing you all of this in the portal of course you're not going to do this in the portal when you're doing professional development",
    "start": "1388799",
    "end": "1394640"
  },
  {
    "text": "you're going to use the um the uh the the tools like uh arm templates or bicep",
    "start": "1394640",
    "end": "1401000"
  },
  {
    "text": "to basically do this a automated in your cicd pipelines um but I just wanted to show you in the portal to give you a",
    "start": "1401000",
    "end": "1407520"
  },
  {
    "text": "little bit more context you basically drag these sliders around uh and you can say I have a minimum of",
    "start": "1407520",
    "end": "1413279"
  },
  {
    "text": "zero and a maximum of 300 replicas you can never go above 300 here um and if",
    "start": "1413279",
    "end": "1419720"
  },
  {
    "text": "you do create um it will actually create a new revision for",
    "start": "1419720",
    "end": "1426200"
  },
  {
    "text": "you so if I go to um",
    "start": "1426200",
    "end": "1431880"
  },
  {
    "text": "revisions you can now see that I have my um old revision still running and I have",
    "start": "1431919",
    "end": "1437559"
  },
  {
    "text": "my new revision that I've just created that has um here the total number of replicas currently um activated and this",
    "start": "1437559",
    "end": "1445320"
  },
  {
    "text": "one is still activating um so your application will not go down it will basically spin up your new replica and",
    "start": "1445320",
    "end": "1451559"
  },
  {
    "text": "then when your new replica is ready to receive um traffic it will um shut down",
    "start": "1451559",
    "end": "1457679"
  },
  {
    "text": "the old um revision so if I refresh this they should now be switched so you can see that now my new",
    "start": "1457679",
    "end": "1464320"
  },
  {
    "text": "revision is running and my old revision is de-provisioning so it's basically getting put to the side you can also see",
    "start": "1464320",
    "end": "1470720"
  },
  {
    "text": "that the traffic is 100 here per here and 0% here so this is your um your uh",
    "start": "1470720",
    "end": "1476960"
  },
  {
    "text": "your scaling this is basically your uh reverse proxy that says all that traffic needs to be forwarded to that specific",
    "start": "1476960",
    "end": "1484080"
  },
  {
    "text": "um revision when your application is scaling you can see the total replicas",
    "start": "1484080",
    "end": "1490320"
  },
  {
    "text": "going up here so if you create an application that gets a lot of um HTTP requests you will see this number going",
    "start": "1490320",
    "end": "1496760"
  },
  {
    "text": "up of course following rules that you specified in my case from 0 to",
    "start": "1496760",
    "end": "1502840"
  },
  {
    "text": "300 now if I want to um show you how multiple of these um container apps are",
    "start": "1502840",
    "end": "1510640"
  },
  {
    "text": "working together I'm just very quickly going to show you some code just to show you or give you an idea of of what",
    "start": "1510640",
    "end": "1517000"
  },
  {
    "text": "simple example that I'm that I'm actually using here so I've created the API which is the one that I've deployed",
    "start": "1517000",
    "end": "1523520"
  },
  {
    "text": "um just now and this only has one endpoint called status so this just says",
    "start": "1523520",
    "end": "1528600"
  },
  {
    "text": "hello from uh version on an environment. machine name in a specific time so this",
    "start": "1528600",
    "end": "1534399"
  },
  {
    "text": "is a very simple API and I didn't actually show you but if I go to my newly deployed application",
    "start": "1534399",
    "end": "1541799"
  },
  {
    "text": "01 which is not here refresh here it",
    "start": "1541799",
    "end": "1547880"
  },
  {
    "text": "is because I enabled Ingress and I enabled it to be available from the outside world I have an application URL",
    "start": "1547880",
    "end": "1555880"
  },
  {
    "text": "and if you click that application URL and you have some patience it",
    "start": "1555880",
    "end": "1563679"
  },
  {
    "text": "seems a lot of",
    "start": "1564520",
    "end": "1567960"
  },
  {
    "text": "patience all right then I have a status",
    "start": "1572880",
    "end": "1578279"
  },
  {
    "text": "endpoint and this will give me hello from version NDC which is the environment variable that I've set on",
    "start": "1579559",
    "end": "1585200"
  },
  {
    "text": "example 01- api-- random number numbers so the random numbers are basically um",
    "start": "1585200",
    "end": "1592120"
  },
  {
    "text": "identifying your um revision and identifying your specific replica um so",
    "start": "1592120",
    "end": "1597279"
  },
  {
    "text": "I only have one replica available because I'm not scaling or at least it's not necessary to scale um so I'll always",
    "start": "1597279",
    "end": "1603440"
  },
  {
    "text": "get the same the same one back um so that that is the what the API does now",
    "start": "1603440",
    "end": "1608640"
  },
  {
    "text": "if I go back to my code I also have a worker application so a worker service which is a background service um which",
    "start": "1608640",
    "end": "1615080"
  },
  {
    "text": "has a worker background worker class this runs continuously and actually",
    "start": "1615080",
    "end": "1620159"
  },
  {
    "text": "calls my calls the using the HTTP client my um API and the cool thing with um",
    "start": "1620159",
    "end": "1629360"
  },
  {
    "text": "Envoy is that you have automatic um service Discovery so in order to talk",
    "start": "1629360",
    "end": "1636120"
  },
  {
    "text": "via HTTP to your other container apps the only thing you need is the name of the container app so if I deploy this",
    "start": "1636120",
    "end": "1642799"
  },
  {
    "text": "application and I'm not going to do it I'm just going to um just going to take",
    "start": "1642799",
    "end": "1648720"
  },
  {
    "text": "the existing one this worker if you click on your",
    "start": "1648720",
    "end": "1657840"
  },
  {
    "text": "containers and then your environment variables here the status endpoint",
    "start": "1658640",
    "end": "1664279"
  },
  {
    "text": "environment variable is the one that I'm using to do my HTTP call so this is my my address that I'm actually calling and",
    "start": "1664279",
    "end": "1670559"
  },
  {
    "text": "the value for this address is HTTP D- um SL example one- API status so the DNS",
    "start": "1670559",
    "end": "1678279"
  },
  {
    "text": "name just like your services in kubernetes is just the name of the service in this case the name of the um",
    "start": "1678279",
    "end": "1684880"
  },
  {
    "text": "of the uh container app but this also works for scaling so if I have multiple",
    "start": "1684880",
    "end": "1691519"
  },
  {
    "text": "replicas running for example one- API it will actually hit my scaler and it will",
    "start": "1691519",
    "end": "1698519"
  },
  {
    "text": "get assigned one of the replicas automatically I don't need to worry about that it will just work out of the box but of course you need to do that",
    "start": "1698519",
    "end": "1705000"
  },
  {
    "text": "configuration you need to know in your code what the name of your your micros service or whatever is in order to be",
    "start": "1705000",
    "end": "1710960"
  },
  {
    "text": "able um to call it now if you look at uh the Lo Stream So the lock stream is a",
    "start": "1710960",
    "end": "1716840"
  },
  {
    "text": "live stream of your console log for your application you can actually see that",
    "start": "1716840",
    "end": "1722159"
  },
  {
    "text": "every second it is actually getting hello from version Alpha this is the one that I deployed earlier so this is not",
    "start": "1722159",
    "end": "1728840"
  },
  {
    "text": "the NDC one um message every second uh within that worker so it's actually",
    "start": "1728840",
    "end": "1736279"
  },
  {
    "text": "working now if you start to scale your",
    "start": "1736279",
    "end": "1742279"
  },
  {
    "text": "application um you can actually do that manually or",
    "start": "1742600",
    "end": "1748000"
  },
  {
    "text": "again with the tools that you know from code or from infrastructure as",
    "start": "1748000",
    "end": "1754000"
  },
  {
    "text": "code so let's go to the uh API you can of course just fix your",
    "start": "1754000",
    "end": "1762320"
  },
  {
    "text": "number of replicas if you do edit and then scale you can put these sliders",
    "start": "1762320",
    "end": "1767559"
  },
  {
    "text": "wherever you want so I can go 12 minimum 12 maximum which means always 12 never",
    "start": "1767559",
    "end": "1773799"
  },
  {
    "text": "less never more this is a bit fiddly the UI um so let's say it's",
    "start": "1773799",
    "end": "1779279"
  },
  {
    "text": "1212 now if you do this with the same running application which is the one that I've prepared beforehand example",
    "start": "1779279",
    "end": "1787440"
  },
  {
    "text": "two and you look at the worker so example two uses two different um",
    "start": "1787440",
    "end": "1794840"
  },
  {
    "text": "replicas you will see",
    "start": "1794840",
    "end": "1799200"
  },
  {
    "text": "two different uh replicas so if you look very carefully you can actually see here the name of the replica X5 5 W so these",
    "start": "1800480",
    "end": "1809799"
  },
  {
    "text": "are my two replicas and it's going to switch randomly between those two um",
    "start": "1809799",
    "end": "1814960"
  },
  {
    "text": "it's not a round robbing mechanism it's just a random mechanism which makes sure that if you have two replicas 50% of",
    "start": "1814960",
    "end": "1821039"
  },
  {
    "text": "your traffic will hit the first 50% of your traffic will hit uh the second so that's the that's the idea and again",
    "start": "1821039",
    "end": "1827120"
  },
  {
    "text": "just works out of the box um the only thing you need to do is change your uh scaling settings and you don't really",
    "start": "1827120",
    "end": "1833200"
  },
  {
    "text": "need to worry about URLs your um service Discovery will just work um out of the",
    "start": "1833200",
    "end": "1839399"
  },
  {
    "text": "box and Things become interesting when you look at replicas um uh I'm sorry",
    "start": "1839399",
    "end": "1847279"
  },
  {
    "text": "revisions so with revisions um I told you um if you create a new revision all",
    "start": "1847279",
    "end": "1853519"
  },
  {
    "text": "the old revisions they will be kept for when you do a mistake you can easily go back to a previous um revision but you",
    "start": "1853519",
    "end": "1860639"
  },
  {
    "text": "can also change your revision mode into multiple revision mode and if you do that you basically change your um",
    "start": "1860639",
    "end": "1869000"
  },
  {
    "text": "container app to be able to run multiple revisions at the same time and this is very nice if you want to do ab testing",
    "start": "1869000",
    "end": "1875399"
  },
  {
    "text": "for example you can deploy the new version of your application under a new",
    "start": "1875399",
    "end": "1880720"
  },
  {
    "text": "revision but keep the old revision active and just split your traffic so if",
    "start": "1880720",
    "end": "1886039"
  },
  {
    "text": "you do this um um and you basically create a new revision based on an older",
    "start": "1886039",
    "end": "1893919"
  },
  {
    "text": "revision let's let's do",
    "start": "1893960",
    "end": "1897760"
  },
  {
    "text": "that and if you wait a little bit of time you will get two of these active revisions running simultaneously and you",
    "start": "1900880",
    "end": "1908240"
  },
  {
    "text": "can change these traffic uh numbers so you can actually change it for example to 80% of the traffic needs to go to my",
    "start": "1908240",
    "end": "1915120"
  },
  {
    "text": "old version and 20% needs to go to my newer version um and if something goes",
    "start": "1915120",
    "end": "1921120"
  },
  {
    "text": "wrong only 20% of your request gets uh hit by that problem and hopefully not",
    "start": "1921120",
    "end": "1927519"
  },
  {
    "text": "too many of your users will notice and then you can fix your problems beforehand and then you can try again",
    "start": "1927519",
    "end": "1932799"
  },
  {
    "text": "and if everything looks to be working you can increase 20 to 30 to 40 to 50%",
    "start": "1932799",
    "end": "1938200"
  },
  {
    "text": "and if everything seems fine you can just switch over 100% the new revision 0% um the old",
    "start": "1938200",
    "end": "1945799"
  },
  {
    "text": "revision again I'm I'm doing doing this all in the um in the UI right now you",
    "start": "1945799",
    "end": "1952840"
  },
  {
    "text": "can do this from your pipelines automatically obviously um with all of the tools you",
    "start": "1952840",
    "end": "1958639"
  },
  {
    "text": "know so in this case I can't change it I'm not sure why um so I'm going to go",
    "start": "1958639",
    "end": "1964000"
  },
  {
    "text": "to my third example because this one should",
    "start": "1964000",
    "end": "1968440"
  },
  {
    "text": "work this one has 20% for one and 80% for the other so you can just change",
    "start": "1970159",
    "end": "1975639"
  },
  {
    "text": "those numbers to whatever you want of course between zero and 100 um but that's the idea you can have three four",
    "start": "1975639",
    "end": "1982679"
  },
  {
    "text": "five six revisions running at the same time whatever you want again to me this",
    "start": "1982679",
    "end": "1988559"
  },
  {
    "text": "looks like a more managed way of of of doing these kinds of applications of doing these kinds of things in",
    "start": "1988559",
    "end": "1994360"
  },
  {
    "text": "kubernetes um these things will look uh will also work but you need to do a lot of manual work uh to make that actually",
    "start": "1994360",
    "end": "2001799"
  },
  {
    "text": "work here it works out of the box thanks to the the concepts of revisions and",
    "start": "2001799",
    "end": "2008440"
  },
  {
    "text": "um replicas all right back to the",
    "start": "2008440",
    "end": "2016960"
  },
  {
    "text": "slides if I can find them I close",
    "start": "2017559",
    "end": "2025760"
  },
  {
    "text": "them how do you present F5 thank",
    "start": "2029840",
    "end": "2034960"
  },
  {
    "text": "you perfect all right so um before I go a little bit",
    "start": "2034960",
    "end": "2041799"
  },
  {
    "text": "deeper into uh what else you can do with container apps I'm going to talk about two things that's net Aspire uh which is",
    "start": "2041799",
    "end": "2048358"
  },
  {
    "text": "quite new since November last year I'm very quickly going to discuss what it is and how you can use that in conjunction",
    "start": "2048359",
    "end": "2054599"
  },
  {
    "text": "with container apps and I'm also going to talk about Dapper because Dapper is a an integral part of container apps I",
    "start": "2054599",
    "end": "2060919"
  },
  {
    "text": "will show you a couple of examples on why you can use depper but you don't have to use depper um it's the same for",
    "start": "2060919",
    "end": "2067240"
  },
  {
    "text": "aspire so Aspire is a new tool from Microsoft that looks a little bit like Dapper and it's basically your",
    "start": "2067240",
    "end": "2072560"
  },
  {
    "text": "distributed application orchestrator um so you have multiple running services",
    "start": "2072560",
    "end": "2078878"
  },
  {
    "text": "that need to work together in your distributed application or microservice application and you're going to compose",
    "start": "2078879",
    "end": "2084040"
  },
  {
    "text": "your entire application out of these components so it's for your app composition basically um you also have",
    "start": "2084040",
    "end": "2089599"
  },
  {
    "text": "the service Discovery where I was talking about um and you have support",
    "start": "2089599",
    "end": "2095320"
  },
  {
    "text": "for components for commonly used services so the idea of aspire is that you as a developer don't need to worry",
    "start": "2095320",
    "end": "2102119"
  },
  {
    "text": "about the whole landscape for your distributed application you have your own services that need to talk to each",
    "start": "2102119",
    "end": "2107400"
  },
  {
    "text": "other but you don't want to care about how do they need to talk to each other how what is the U how do I need to",
    "start": "2107400",
    "end": "2113400"
  },
  {
    "text": "secure that URI um but also when you talk to external components you don't want to manage those external components",
    "start": "2113400",
    "end": "2120160"
  },
  {
    "text": "when you're developing locally um you just want that to work out of the box um so Microsoft tries to make that whole",
    "start": "2120160",
    "end": "2126839"
  },
  {
    "text": "development work workflow easier for you the developer um by using these tools uh",
    "start": "2126839",
    "end": "2132400"
  },
  {
    "text": "for example D net as Aspire um so what happens with net",
    "start": "2132400",
    "end": "2138320"
  },
  {
    "text": "Aspire if you do file new project in visual studio um you can actually find the Aspire template and that will create",
    "start": "2138320",
    "end": "2145880"
  },
  {
    "text": "a demo application for you to show you what the power of aspire is and what it",
    "start": "2145880",
    "end": "2151160"
  },
  {
    "text": "creates is something similar than the example that I did it creates an API service in the top and a webite",
    "start": "2151160",
    "end": "2158200"
  },
  {
    "text": "a web application in the bottom and the web application will call the API service the API service is very simple",
    "start": "2158200",
    "end": "2164599"
  },
  {
    "text": "and it's the um the the example that you probably all all know about um it's the",
    "start": "2164599",
    "end": "2170040"
  },
  {
    "text": "one with the weather forecast so it's an API which gets a bunch of random weather",
    "start": "2170040",
    "end": "2175119"
  },
  {
    "text": "forecasts very simple and then because Microsoft is trying to push Blazer of course a Blazer application um where",
    "start": "2175119",
    "end": "2184520"
  },
  {
    "text": "your uh weather page will basically call this API weather API and get the weather",
    "start": "2184520",
    "end": "2192040"
  },
  {
    "text": "uh asynchronously now with Aspire it creates an additional project called the",
    "start": "2192040",
    "end": "2198440"
  },
  {
    "text": "application host and it puts this project as a startup application and this is for people who are hardcore C",
    "start": "2198440",
    "end": "2205319"
  },
  {
    "text": "developers and don't care about infrastructure don't care about Cloud they just want to do cpy stuff um",
    "start": "2205319",
    "end": "2212400"
  },
  {
    "text": "because the apphost will basically tie all of these things together if you look at the program CS um class it tells you",
    "start": "2212400",
    "end": "2220880"
  },
  {
    "text": "I'm going to build a distributed application with the distributed application Builder uh maybe I need to",
    "start": "2220880",
    "end": "2226960"
  },
  {
    "text": "use this so distributed application. create Builder we know about the web application Builder and the host",
    "start": "2226960",
    "end": "2232280"
  },
  {
    "text": "application Builder now we have also the distributed application Builder now with this Builder I can build the whole",
    "start": "2232280",
    "end": "2238599"
  },
  {
    "text": "landscape of my distributed application for example I am going to need a redis cache I'm going to do some caching and",
    "start": "2238599",
    "end": "2245520"
  },
  {
    "text": "I'm going to use redis for this cache um and the only thing I need to do is put",
    "start": "2245520",
    "end": "2250760"
  },
  {
    "text": "the extension method at redis container with the name cache and basically Aspire",
    "start": "2250760",
    "end": "2255880"
  },
  {
    "text": "will download a redis container image to your system locally and it will also run",
    "start": "2255880",
    "end": "2261520"
  },
  {
    "text": "it in your local Docker environment uh so that you can actually use it from your application without the Need For",
    "start": "2261520",
    "end": "2267480"
  },
  {
    "text": "You installing it manually um then you're going to Define your own services",
    "start": "2267480",
    "end": "2272560"
  },
  {
    "text": "for your uh the ones that you are basically writing yourself so we have the API service which comes from your",
    "start": "2272560",
    "end": "2278040"
  },
  {
    "text": "projects because it's in your uh solution Explorer with this name and then you're going to add a second",
    "start": "2278040",
    "end": "2283319"
  },
  {
    "text": "project which is the web application which is called web frontend and it's going to have a reference to the cache",
    "start": "2283319",
    "end": "2288800"
  },
  {
    "text": "because it's going to use the cache and it's also having a reference to the API service because it's using the API service so with this little file you",
    "start": "2288800",
    "end": "2297560"
  },
  {
    "text": "basically wrote in C what your landscape looks like I have three services my web",
    "start": "2297560",
    "end": "2302720"
  },
  {
    "text": "API my web application and my red cach the web API and the web application I wrote myself they are part of this um",
    "start": "2302720",
    "end": "2310440"
  },
  {
    "text": "solution and then the redis is an external uh dependency basically that",
    "start": "2310440",
    "end": "2315680"
  },
  {
    "text": "I'm going to use and if I just play press play and I open my uh",
    "start": "2315680",
    "end": "2321800"
  },
  {
    "text": "Docker you can actually see in my running containers automatically getting me the",
    "start": "2321800",
    "end": "2328880"
  },
  {
    "text": "reddest latest image um so this image is now a running container on my local system and it will just work and if I",
    "start": "2328880",
    "end": "2336400"
  },
  {
    "text": "look what happen when I when I started my host application I now have an Aspire",
    "start": "2336400",
    "end": "2342240"
  },
  {
    "text": "dashboard so I have a dashboard that shows me my whole application landscape which runs my API service with a link to",
    "start": "2342240",
    "end": "2349960"
  },
  {
    "text": "that endpoint this is my weather forecast if I refresh I get the random",
    "start": "2349960",
    "end": "2355119"
  },
  {
    "text": "weather forecasts it's a little bit like the weather in Belgium and probably here also um and then I have my second link",
    "start": "2355119",
    "end": "2361920"
  },
  {
    "text": "to my web frontend which is my blazer application that gets the same weather but if I refresh this this page I get",
    "start": "2361920",
    "end": "2368319"
  },
  {
    "text": "the same weather all over again instead of the random weather because there is the redish scache in between and the red",
    "start": "2368319",
    "end": "2375359"
  },
  {
    "text": "cach is not one of my projects it's actually a running container which is this one and the cool thing about the",
    "start": "2375359",
    "end": "2381960"
  },
  {
    "text": "Aspire dashboard is that you can also look at your logs from this one single dashboard I can click project I can see",
    "start": "2381960",
    "end": "2389040"
  },
  {
    "text": "my console logs for my API service I can see my console locks for my web front end and I can see my console locks for",
    "start": "2389040",
    "end": "2395560"
  },
  {
    "text": "my containers that are that are also running as part of my application again this will help you as a developer to run",
    "start": "2395560",
    "end": "2402839"
  },
  {
    "text": "your distributed or microservices application locally with all of those dependencies that you have by just",
    "start": "2402839",
    "end": "2408359"
  },
  {
    "text": "pressing play in visual studio and it should work I don't work for Microsoft it should",
    "start": "2408359",
    "end": "2414240"
  },
  {
    "text": "work um now if you want to deploy this to um",
    "start": "2414240",
    "end": "2420560"
  },
  {
    "text": "to Azure container apps they made it very simple so you have a command line tool called a the a Azure developer CLI",
    "start": "2420560",
    "end": "2429480"
  },
  {
    "text": "not the Azure CLI but the Azure developer CLI and it has a couple of things you can use for example if you",
    "start": "2429480",
    "end": "2435960"
  },
  {
    "text": "create your aspire application just in the way that I did you can do azd in it",
    "start": "2435960",
    "end": "2441400"
  },
  {
    "text": "to initialize your application to be able to be deployed to Azure um and if",
    "start": "2441400",
    "end": "2446800"
  },
  {
    "text": "you do azd in it it will ask you some questions it will look at your code and it will tell you oh this looks like an",
    "start": "2446800",
    "end": "2452920"
  },
  {
    "text": "Aspire application uh which projects do you want to include in is deployment and",
    "start": "2452920",
    "end": "2458200"
  },
  {
    "text": "now you can specify okay I want my API service I want my web front end um you just check them it will ask you a couple",
    "start": "2458200",
    "end": "2464640"
  },
  {
    "text": "of more questions like what you want your resource Group in Azure to be named it will create all of the bicep uh files",
    "start": "2464640",
    "end": "2470960"
  },
  {
    "text": "for you and then when you do ASD up or ASD deploy um it will basically deploy",
    "start": "2470960",
    "end": "2477280"
  },
  {
    "text": "all of that to your subscription so it will then ask you to authenticate towards your um Azure subscription and",
    "start": "2477280",
    "end": "2482920"
  },
  {
    "text": "then it will start running all of those bicep uh scripts to actually deploy that application and that's exactly what I",
    "start": "2482920",
    "end": "2489480"
  },
  {
    "text": "did so if you look at um it actually it created a separate",
    "start": "2489480",
    "end": "2496640"
  },
  {
    "text": "um uh Resource Group this",
    "start": "2496640",
    "end": "2501119"
  },
  {
    "text": "one there we go it actually deployed a container environment and within that",
    "start": "2502560",
    "end": "2508359"
  },
  {
    "text": "container environment the API service in the bottom the web front end and then the cache also so the cache is not the",
    "start": "2508359",
    "end": "2515200"
  },
  {
    "text": "application that I wrote It's just getting the reddis image uh container image from the public repository and",
    "start": "2515200",
    "end": "2521599"
  },
  {
    "text": "just also putting that into my uh whole container app environment so now my application also runs in the cloud just",
    "start": "2521599",
    "end": "2527960"
  },
  {
    "text": "like it runs locally and I didn't really need to do any uh any work for that um",
    "start": "2527960",
    "end": "2533480"
  },
  {
    "text": "everything happens automatically for me so I think this is cool for your smaller applications uh and for your developer",
    "start": "2533480",
    "end": "2539880"
  },
  {
    "text": "experience you can of course combine that with writing your own pipelines and doing like the the the the the",
    "start": "2539880",
    "end": "2546040"
  },
  {
    "text": "deployment to the cloud thing you can fully customize but still use aspire to run things locally very easily without",
    "start": "2546040",
    "end": "2552559"
  },
  {
    "text": "the need to link to exist existing environments for example just run everything um locally which I think is",
    "start": "2552559",
    "end": "2560040"
  },
  {
    "text": "is is pretty cool uh this is still in preview of course the the the team at Microsoft is still working on this uh",
    "start": "2560040",
    "end": "2565319"
  },
  {
    "text": "it's going to be it's going to get better and better over time and additional components will be added to",
    "start": "2565319",
    "end": "2570760"
  },
  {
    "text": "it so right now I'm using redis there's also support for SQL Server there's support for postgress um and other tools",
    "start": "2570760",
    "end": "2578680"
  },
  {
    "text": "um and this this list of this Market or this Marketplace of components that you can use together with Aspire will of",
    "start": "2578680",
    "end": "2584720"
  },
  {
    "text": "course grow uh over time and I hope that maybe some of you uh will also work with",
    "start": "2584720",
    "end": "2590599"
  },
  {
    "text": "that and will create new components for the community um to",
    "start": "2590599",
    "end": "2596440"
  },
  {
    "text": "use now back to my slides next to uh Aspire something very",
    "start": "2596440",
    "end": "2603720"
  },
  {
    "text": "similar is called Dapper um who has who has never heard about depper everyone",
    "start": "2603720",
    "end": "2609440"
  },
  {
    "text": "has heard about deer okay um so deer is is a part of uh container apps you don't",
    "start": "2609440",
    "end": "2616040"
  },
  {
    "text": "have to use it but you can use it um it is available for you um so basically",
    "start": "2616040",
    "end": "2621680"
  },
  {
    "text": "daer is the distributed application runtime and again you can use that for your microservices or distributed",
    "start": "2621680",
    "end": "2627200"
  },
  {
    "text": "applications um the cool thing about deer is it allows you to create a",
    "start": "2627200",
    "end": "2632280"
  },
  {
    "text": "distributed application where every component or every service is written in their own technology or language or",
    "start": "2632280",
    "end": "2638760"
  },
  {
    "text": "whatever that's of course something that always works with containers but sometimes when you want",
    "start": "2638760",
    "end": "2644920"
  },
  {
    "text": "one technology to talk to another technology um you can of course use HTTP because that is supported everywhere but",
    "start": "2644920",
    "end": "2651760"
  },
  {
    "text": "if you if you use something very specific things become harder how how is service a going to talk to service B if",
    "start": "2651760",
    "end": "2658240"
  },
  {
    "text": "they don't know the same protocol well depper can help you with that because deer is going to try and Abstract away",
    "start": "2658240",
    "end": "2665839"
  },
  {
    "text": "the cloud infrastructure so how do I talk from one service to the other and also the configuration where is my other",
    "start": "2665839",
    "end": "2672319"
  },
  {
    "text": "service located what is the connection string what is the secret whatever that I need to be able to talk to another",
    "start": "2672319",
    "end": "2678200"
  },
  {
    "text": "service so that you as a developer can focus on your application code and not so much on configuration um and of",
    "start": "2678200",
    "end": "2686800"
  },
  {
    "text": "course this also enables application portability because if you have one component and you want to switch it out for another component which is the uh",
    "start": "2686800",
    "end": "2694119"
  },
  {
    "text": "old saying like if you're a developer you need to make abstra ractions everywhere because someday you want to",
    "start": "2694119",
    "end": "2699240"
  },
  {
    "text": "switch out your database for something else um that's also the thing that that deer um tries to do uh and how it does",
    "start": "2699240",
    "end": "2706839"
  },
  {
    "text": "that is very cool so when you run a container within a kubernetes pod or",
    "start": "2706839",
    "end": "2713280"
  },
  {
    "text": "within an Azure container app you can actually put containers next to it within the same container app or within",
    "start": "2713280",
    "end": "2719920"
  },
  {
    "text": "the same pod and these containers are called SAR containers so it's like a helper container to your application",
    "start": "2719920",
    "end": "2727160"
  },
  {
    "text": "container and this is exactly what Dapper does so Dapper will deploy for you a side car and when you do service",
    "start": "2727160",
    "end": "2735119"
  },
  {
    "text": "to service communication between your services you're not going to directly talk from your service to the other",
    "start": "2735119",
    "end": "2740839"
  },
  {
    "text": "service you're going to ask Dapper Dapper could you please call my other service and then deer will call from its",
    "start": "2740839",
    "end": "2748359"
  },
  {
    "text": "side car to your other applications side car they will communicate to each other",
    "start": "2748359",
    "end": "2753440"
  },
  {
    "text": "with resiliency and I will show you an example in just a moment and then that side car will talk to your service and",
    "start": "2753440",
    "end": "2759440"
  },
  {
    "text": "this is what I was talking about when you have let's say the service a on the left hand side is in written in Java",
    "start": "2759440",
    "end": "2765440"
  },
  {
    "text": "with some very obscure protocol and then service B on the right hand side is written in net with another obscure",
    "start": "2765440",
    "end": "2770880"
  },
  {
    "text": "protocol they can't talk to each other but they can talk to the side car the side cars can talk to each other and",
    "start": "2770880",
    "end": "2776720"
  },
  {
    "text": "this way your applications can talk to each other you don't need to worry about configuration because you have the",
    "start": "2776720",
    "end": "2782480"
  },
  {
    "text": "concept of components in Dapper Dapper has a whole list of whole Marketplace of components and depper can talk to an",
    "start": "2782480",
    "end": "2789319"
  },
  {
    "text": "HTTP service a grpc service WCF service it can talk to external services like a",
    "start": "2789319",
    "end": "2795480"
  },
  {
    "text": "redis cache or a SQL database stuff like that so as you can see you can also",
    "start": "2795480",
    "end": "2800599"
  },
  {
    "text": "communicate with those external services or components by following that Arrow",
    "start": "2800599",
    "end": "2805839"
  },
  {
    "text": "straight up now what kind of dapper components are out there well you have the input",
    "start": "2805839",
    "end": "2812280"
  },
  {
    "text": "output bindings which is basically communication inside into your service",
    "start": "2812280",
    "end": "2817680"
  },
  {
    "text": "or out your service like HTTP communication grpc communication there are multiple of these bindings available",
    "start": "2817680",
    "end": "2823920"
  },
  {
    "text": "there is uh support for State stores where do you want to store your state in a SQL database in a document database in",
    "start": "2823920",
    "end": "2830480"
  },
  {
    "text": "a in a cache a redish cache for example these are your state stores your secret stores Dapper has support for Azure key",
    "start": "2830480",
    "end": "2838079"
  },
  {
    "text": "Vol for example to store your secret so you don't need to worry about the connection strings from your application",
    "start": "2838079",
    "end": "2843240"
  },
  {
    "text": "you just ask depper I want this secret and depper will fetch you for you depending on which components you",
    "start": "2843240",
    "end": "2849319"
  },
  {
    "text": "activated configuration stores to get your configuration pops up to do your uh service bus messaging or whatever uh",
    "start": "2849319",
    "end": "2856240"
  },
  {
    "text": "middlewares if you want if you want to uh uh work with your uh request pipeline",
    "start": "2856240",
    "end": "2861520"
  },
  {
    "text": "for example you want to uh work with the requests that come in you want to to make some changes there there's also",
    "start": "2861520",
    "end": "2867839"
  },
  {
    "text": "support for that um let's show you a little demo so I've created an",
    "start": "2867839",
    "end": "2874839"
  },
  {
    "text": "application the Dapper example so the only thing you need to do as a",
    "start": "2874880",
    "end": "2880319"
  },
  {
    "text": "developer um instead of calling from your service to another service um or",
    "start": "2880319",
    "end": "2885880"
  },
  {
    "text": "talking to an external service if you if you're using Dapper you just need to um",
    "start": "2885880",
    "end": "2891680"
  },
  {
    "text": "install the depper client and with the deer client you can do some fun things",
    "start": "2891680",
    "end": "2897480"
  },
  {
    "text": "so if you look at the worker um the one that is calling my API and you look at",
    "start": "2897480",
    "end": "2903680"
  },
  {
    "text": "the configuration you need to add um this is the wrong one",
    "start": "2903680",
    "end": "2912200"
  },
  {
    "text": "sorry this one you need to add the depper client to your dependency injection um so services. add deer",
    "start": "2913760",
    "end": "2920760"
  },
  {
    "text": "client will basically allow you to inject the depper client into your uh",
    "start": "2920760",
    "end": "2925839"
  },
  {
    "text": "classes where you need them and the depper client can do everything for you so if you want to talk to your state store the deer client can do that for",
    "start": "2925839",
    "end": "2932599"
  },
  {
    "text": "you if you want to talk to another service the deer client can do that for you so everything becomes depper client so that will be your abstraction in code",
    "start": "2932599",
    "end": "2939680"
  },
  {
    "text": "and in your code you don't need to worry about configuration or uh Technologies",
    "start": "2939680",
    "end": "2945760"
  },
  {
    "text": "or communication protocols you just use Dapper uh and inside of your worker",
    "start": "2945760",
    "end": "2951559"
  },
  {
    "text": "instead of using the HTTP client you're going to use the Dapper clients the one that you just configured inde dependency",
    "start": "2951559",
    "end": "2957720"
  },
  {
    "text": "injection and there's different kinds of methods that you can call to talk to States or State Stores or to talk to",
    "start": "2957720",
    "end": "2964960"
  },
  {
    "text": "configuration or secret stores or to um invoke a method over an HTTP connection",
    "start": "2964960",
    "end": "2970839"
  },
  {
    "text": "so in this case I'm doing invoke method which is going to be an a get method and",
    "start": "2970839",
    "end": "2976079"
  },
  {
    "text": "you just specify the name of your or the ID of your application so when you have",
    "start": "2976079",
    "end": "2981599"
  },
  {
    "text": "multiple containers running in a container environment um you can enable depper on those containers and you need",
    "start": "2981599",
    "end": "2987799"
  },
  {
    "text": "to specify an app ID for all of your container apps and this app ID is the only thing you need to be able to talk",
    "start": "2987799",
    "end": "2994359"
  },
  {
    "text": "to these services so this for example example 6- API is the depper application",
    "start": "2994359",
    "end": "3000240"
  },
  {
    "text": "ID for my API and I'm going to call the status endpoint and this call will do",
    "start": "3000240",
    "end": "3005920"
  },
  {
    "text": "the HTTP call for me the cool thing about this is that this also has resiliency built in so if this call",
    "start": "3005920",
    "end": "3012960"
  },
  {
    "text": "fails for some reason you can configure okay if it fails with a 500 exception just try again try again try again try",
    "start": "3012960",
    "end": "3019440"
  },
  {
    "text": "again for a maximum of 100 times do an incremental back off all of that thing can be configured within Dapper and not",
    "start": "3019440",
    "end": "3026040"
  },
  {
    "text": "within your code so the side cars will take care of all of that hard stuff you as a developer focus on your uh code and",
    "start": "3026040",
    "end": "3033760"
  },
  {
    "text": "not the technology to talk to another service by the way my um my API that",
    "start": "3033760",
    "end": "3040040"
  },
  {
    "text": "I've deployed also uses the deer client um and it actually uses the deer client",
    "start": "3040040",
    "end": "3045240"
  },
  {
    "text": "to use a redish cache so I've uh created a redish cache on Azure so whenever I",
    "start": "3045240",
    "end": "3051240"
  },
  {
    "text": "call the API instead of generating a new message it's first going to check on the deer client if there is a state",
    "start": "3051240",
    "end": "3058119"
  },
  {
    "text": "available in a component in uh Dapper called redis with the key message and if",
    "start": "3058119",
    "end": "3064079"
  },
  {
    "text": "it's available it would return this if it's not available it will create a new message and store it in that state store",
    "start": "3064079",
    "end": "3071880"
  },
  {
    "text": "how do you deploy this um in the same way as you uh if as it in",
    "start": "3071880",
    "end": "3081640"
  },
  {
    "text": "the same way you deployed the other uh applications so let's go back to my NDC launch",
    "start": "3081640",
    "end": "3087079"
  },
  {
    "text": "Resource Group then it should be example six and the only thing you need to do",
    "start": "3087079",
    "end": "3093880"
  },
  {
    "text": "extra is click on the Dapper and enable depper for this um container app so you",
    "start": "3093880",
    "end": "3100559"
  },
  {
    "text": "deploy your container image to this container app and when you enable depper it will install the depper side car next",
    "start": "3100559",
    "end": "3107760"
  },
  {
    "text": "to your container automatically so again you don't need to do that um you need to specify your app ID which is example 6-",
    "start": "3107760",
    "end": "3113880"
  },
  {
    "text": "API so this will also be your ser Discovery um when you want to do a call",
    "start": "3113880",
    "end": "3120000"
  },
  {
    "text": "you need to specify your application Port so for my application I am listening to 8080 so my depper side car",
    "start": "3120000",
    "end": "3126440"
  },
  {
    "text": "now knows that if it needs to communicate with my application port 8080 is the one to call um you can",
    "start": "3126440",
    "end": "3132839"
  },
  {
    "text": "specify the protocol HTTP or grpc um and you can add some API logging so the",
    "start": "3132839",
    "end": "3138520"
  },
  {
    "text": "sitecore will also show you what is actually happening and if you look at um the Lo",
    "start": "3138520",
    "end": "3144400"
  },
  {
    "text": "stream for example you have your container that is running and",
    "start": "3144400",
    "end": "3149680"
  },
  {
    "text": "listening but you also have the Dapper sidecar container",
    "start": "3149680",
    "end": "3155640"
  },
  {
    "text": "listening if you want to work with these uh Dapper components so if you click",
    "start": "3157280",
    "end": "3162480"
  },
  {
    "text": "depper in the bottom you can actually see a list of all the components in",
    "start": "3162480",
    "end": "3167520"
  },
  {
    "text": "Dapper that you are using so this API is using the redis component um so if you",
    "start": "3167520",
    "end": "3173839"
  },
  {
    "text": "want to manage that you can actually go to your your container environment and you can add Dapper",
    "start": "3173839",
    "end": "3180920"
  },
  {
    "text": "components and you can do Azure components or generic components um so Azure components are very specific to",
    "start": "3180920",
    "end": "3186640"
  },
  {
    "text": "Azure so Azure has a couple of these components created for you do you want to communicate with Azure reddis that's",
    "start": "3186640",
    "end": "3192280"
  },
  {
    "text": "what I did you want to communicate with Azure Secrets uh Azure key fold you can add it here and now your depper depper",
    "start": "3192280",
    "end": "3198720"
  },
  {
    "text": "is available to talk to your uh key Vol so again you basically shift these",
    "start": "3198720",
    "end": "3204200"
  },
  {
    "text": "things out from your code of course you need to do them somewhere so in this case you need to configure it here again",
    "start": "3204200",
    "end": "3210160"
  },
  {
    "text": "you can configure it in the portal but you can also configure it in your pipelines as part as your infrastructure",
    "start": "3210160",
    "end": "3215359"
  },
  {
    "text": "as code and that will also work uh perfectly fine um I have five minutes left so",
    "start": "3215359",
    "end": "3222520"
  },
  {
    "text": "there's one more thing that I want to show you in example seven which is your um resiliency it's",
    "start": "3222520",
    "end": "3230160"
  },
  {
    "text": "also a part of dapper so in this case you don't really",
    "start": "3230160",
    "end": "3235240"
  },
  {
    "text": "need to use the Dapper client you can just um if if you look at my depper",
    "start": "3235240",
    "end": "3241440"
  },
  {
    "text": "second depper example my worker does the exact same thing um it's using the HTTP",
    "start": "3241440",
    "end": "3247799"
  },
  {
    "text": "client to talk to my um API so it's not using depper I'm not using the deer",
    "start": "3247799",
    "end": "3253680"
  },
  {
    "text": "client and I made one little change to my API I basically in 50% of the time",
    "start": "3253680",
    "end": "3261880"
  },
  {
    "text": "I'm just going to throw an exception so my API call Will Fail uh 50% of the",
    "start": "3261880",
    "end": "3267280"
  },
  {
    "text": "time now if you deploy this to Azure container apps and you",
    "start": "3267280",
    "end": "3272839"
  },
  {
    "text": "enable resiliency you can enable resiliency in",
    "start": "3272839",
    "end": "3279119"
  },
  {
    "text": "this case for example for HTTP retries which means if you get a 500 something",
    "start": "3279119",
    "end": "3285240"
  },
  {
    "text": "you can retry for a maximum of 100 times with an initial delay of 100 milliseconds it it will do an",
    "start": "3285240",
    "end": "3292400"
  },
  {
    "text": "incremental back off but no no more than one second and if you save this again out of the",
    "start": "3292400",
    "end": "3299319"
  },
  {
    "text": "box this will just work if you go to your um to your URL and you call your",
    "start": "3299319",
    "end": "3304720"
  },
  {
    "text": "status",
    "start": "3304720",
    "end": "3307078"
  },
  {
    "text": "endpoint it will always work you can keep refreshing this you will never see the exception because the Dapper side",
    "start": "3312760",
    "end": "3319440"
  },
  {
    "text": "car that calls the API will basically retry that for you uh if that fails for",
    "start": "3319440",
    "end": "3324799"
  },
  {
    "text": "a maximum of 100 times of course if you play around with these uh with these numbers like if if I put instead",
    "start": "3324799",
    "end": "3330920"
  },
  {
    "text": "of 100 milliseconds like 5 Seconds you can actually see that happening because when you refresh and it immediately",
    "start": "3330920",
    "end": "3336599"
  },
  {
    "text": "refreshes you know that it worked if it if it waits for 5 seconds you know that it failed it's waiting for 5 seconds to",
    "start": "3336599",
    "end": "3342799"
  },
  {
    "text": "retry um so again this works out of the box you don't need to add anything to your code um this is part of um Azure",
    "start": "3342799",
    "end": "3350720"
  },
  {
    "text": "container apps and then finally um because this",
    "start": "3350720",
    "end": "3356039"
  },
  {
    "text": "was basically all that I wanted to talk about um many many years ago it's it's almost 10 years ago I've I've created an",
    "start": "3356039",
    "end": "3363440"
  },
  {
    "text": "application while I was still teaching um people to to write uh programs in C",
    "start": "3363440",
    "end": "3369440"
  },
  {
    "text": "it was a very basic C uh course and I was bored of always writing",
    "start": "3369440",
    "end": "3376359"
  },
  {
    "text": "console applications with my students so I created a little game and this game",
    "start": "3376359",
    "end": "3381760"
  },
  {
    "text": "um the students could use to learn to write C code and the C code would actually make a robot do some fighting",
    "start": "3381760",
    "end": "3389039"
  },
  {
    "text": "like a visualized uh battle and this is the thing that I actually deployed into",
    "start": "3389039",
    "end": "3396359"
  },
  {
    "text": "kubernetes at first which worked perfectly fine but then in uh container apps and the cool thing about container",
    "start": "3396359",
    "end": "3402440"
  },
  {
    "text": "apps was I I uh deployed it it just worked I didn't really have to do",
    "start": "3402440",
    "end": "3407720"
  },
  {
    "text": "anything so this is called C Wars this is actually Four container",
    "start": "3407720",
    "end": "3413480"
  },
  {
    "text": "apps within the same con uh container envir environment and maybe I I'll need to show it first so if I go to um web. c",
    "start": "3413480",
    "end": "3423920"
  },
  {
    "text": "wars.com",
    "start": "3423920",
    "end": "3426400"
  },
  {
    "text": "um you can actually play this by uh creating a new robot a virtual robot",
    "start": "3432760",
    "end": "3439440"
  },
  {
    "text": "giving it some health and stamina and then writing some C to to do something so these are templates that you can",
    "start": "3439440",
    "end": "3445720"
  },
  {
    "text": "choose uh from a dropdown to make it uh very easily to show you but my students should write this code themselves um so",
    "start": "3445720",
    "end": "3453079"
  },
  {
    "text": "this is how to learn how an if Works how you declare variables and when they run this they can actually immediately see a",
    "start": "3453079",
    "end": "3459359"
  },
  {
    "text": "result instead of a boring uh console application so that that was the idea please go",
    "start": "3459359",
    "end": "3466319"
  },
  {
    "text": "away um so if you view the battle arena it will show you a 3D",
    "start": "3466319",
    "end": "3472720"
  },
  {
    "text": "representation of all these robots fighting fighting um on here so this is",
    "start": "3472720",
    "end": "3477760"
  },
  {
    "text": "publicly available you can play around if you want um every once in a while I just remove all the robots because for",
    "start": "3477760",
    "end": "3484480"
  },
  {
    "text": "some reason people always use profanity in their namings um but what but",
    "start": "3484480",
    "end": "3489839"
  },
  {
    "text": "whatever but I deployed this to Azure container apps um because I'm I create I",
    "start": "3489839",
    "end": "3495000"
  },
  {
    "text": "made it into an Orleans cluster I don't know if you know orans orans is the Microsoft thing for creating actor based",
    "start": "3495000",
    "end": "3501200"
  },
  {
    "text": "applications So based on the actor model and this is pretty cool because basically everything that happens all",
    "start": "3501200",
    "end": "3506839"
  },
  {
    "text": "the logic in the back end like for the robots for what the robots do for the arena everything is an actor and all",
    "start": "3506839",
    "end": "3513319"
  },
  {
    "text": "these actors work together and the cool thing about actors is they can be easily scaled because each little thing in your",
    "start": "3513319",
    "end": "3519160"
  },
  {
    "text": "application is a single actor and a single actor can be and your all of your actors can be um sharded over multiple",
    "start": "3519160",
    "end": "3526359"
  },
  {
    "text": "nodes and this is exactly what you have with container apps so if you look at um",
    "start": "3526359",
    "end": "3531480"
  },
  {
    "text": "these four container apps you basically have the web API which is just the web API that Unity users to call it's a",
    "start": "3531480",
    "end": "3537920"
  },
  {
    "text": "website the website that you just uh saw and then two Orleans um host",
    "start": "3537920",
    "end": "3543280"
  },
  {
    "text": "applications The Orleans host application hosts your actors and Orleans has a dashboard um so I can do",
    "start": "3543280",
    "end": "3551760"
  },
  {
    "text": "orleans. CWS uh.com which basically shows you all of your different actors",
    "start": "3551760",
    "end": "3557839"
  },
  {
    "text": "so I have 14 actors running somewhere they're they're processing now 15 they're processing something I think",
    "start": "3557839",
    "end": "3564160"
  },
  {
    "text": "some people are actually deploying robots now um but if you click silos",
    "start": "3564160",
    "end": "3569280"
  },
  {
    "text": "which is a concept of Orleans each Silo that can host um uh actors is actually a",
    "start": "3569280",
    "end": "3576160"
  },
  {
    "text": "running replica in an Azure container app so I showed you I have two Orleans apps which is actually a host and a v",
    "start": "3576160",
    "end": "3583440"
  },
  {
    "text": "host the V host is does purely validation the regular host does all the processing and I can easily scale this I",
    "start": "3583440",
    "end": "3589680"
  },
  {
    "text": "can scale this to how many I need in order to make my application run stable",
    "start": "3589680",
    "end": "3594960"
  },
  {
    "text": "and orans just supported out of the box because Orleans also does service Discovery it sees all of the replicas um",
    "start": "3594960",
    "end": "3601480"
  },
  {
    "text": "and it knows where to activate all of the actors um so yeah in kubernetes I needed to do a lot of configuration to",
    "start": "3601480",
    "end": "3607920"
  },
  {
    "text": "make this work but in Azure container apps I deployed and it just worked uh which I thought was was pretty amazing",
    "start": "3607920",
    "end": "3613799"
  },
  {
    "text": "um and with that I'm out of time so if there's any questions I will remain here for some time otherwise thank you so",
    "start": "3613799",
    "end": "3619760"
  },
  {
    "text": "much and enjoy the rest of your day [Applause]",
    "start": "3619760",
    "end": "3629269"
  },
  {
    "text": "first",
    "start": "3633960",
    "end": "3636960"
  }
]