[
  {
    "text": "hello for coming to my talk so I'll start so",
    "start": "10790",
    "end": "21349"
  },
  {
    "text": "if you're a software developer like me you probably spend a bit of your work",
    "start": "21349",
    "end": "27110"
  },
  {
    "text": "day looking at things on haka news and often you you would think that you know",
    "start": "27110",
    "end": "34760"
  },
  {
    "text": "rust and probably go like the only programming languages because you see a",
    "start": "34760",
    "end": "42050"
  },
  {
    "text": "lot of activity and talk about these new languages and some time is kind of hard",
    "start": "42050",
    "end": "51350"
  },
  {
    "text": "to separate the hype from the real benefit that you get from this so my job",
    "start": "51350",
    "end": "58729"
  },
  {
    "text": "today is simply to give a very unbiased",
    "start": "58729",
    "end": "64040"
  },
  {
    "text": "view about rust so try to essentially answer five or so questions about it so",
    "start": "64040",
    "end": "74420"
  },
  {
    "text": "one I will talk about the question of",
    "start": "74420",
    "end": "79700"
  },
  {
    "text": "when this being in regard to time so how did Russ start how has it evolved over",
    "start": "79700",
    "end": "87950"
  },
  {
    "text": "time and how was the development been like who are the key people in the",
    "start": "87950",
    "end": "93140"
  },
  {
    "text": "project to is the why question why is",
    "start": "93140",
    "end": "99350"
  },
  {
    "text": "rust actually existing you know what what was the reason of having a new",
    "start": "99350",
    "end": "104510"
  },
  {
    "text": "language you already have I don't know probably over 100 languages they are and it's you could argue that we already",
    "start": "104510",
    "end": "111650"
  },
  {
    "text": "have a language to solve the problem you have and so I would try and highlight",
    "start": "111650",
    "end": "116950"
  },
  {
    "text": "some key problems problems that we have moso relating to systems programming and",
    "start": "116950",
    "end": "123650"
  },
  {
    "text": "how rust tries to solve them then I'll move on to describe the watch and how of",
    "start": "123650",
    "end": "129500"
  },
  {
    "text": "rust so in terms of the semantics the code and how the problems that are",
    "start": "129500",
    "end": "135980"
  },
  {
    "text": "rustlings to solve have been solved in the language and then at the end of my talk I will talk a bit about people who",
    "start": "135980",
    "end": "144170"
  },
  {
    "text": "are using rust you know companies in production and also the community so how I got into",
    "start": "144170",
    "end": "152040"
  },
  {
    "text": "Rus was mainly through the community so it's a really nice or coming community and this wouldn't be a Russ talk without",
    "start": "152040",
    "end": "158310"
  },
  {
    "text": "at least saying a few words about the community okay so before we dive in I",
    "start": "158310",
    "end": "165660"
  },
  {
    "text": "would like to just introduce myself so we can I get an idea who I am",
    "start": "165660",
    "end": "172790"
  },
  {
    "text": "so my name is Matt I work at a company called snips it's a French company and we build a",
    "start": "172790",
    "end": "179970"
  },
  {
    "text": "voice recognition algorithms for IOT devices or embedded environments and we",
    "start": "179970",
    "end": "187800"
  },
  {
    "text": "happen to use rust so our code on device is all written in rust I also happen to",
    "start": "187800",
    "end": "195770"
  },
  {
    "text": "do a bit of community work in the res community I'm a member of the community",
    "start": "195770",
    "end": "201750"
  },
  {
    "text": "events team so I volunteer a bit of my time in growing the res community I also",
    "start": "201750",
    "end": "212600"
  },
  {
    "text": "was an organizer I still awesome involved a bit in the rust Nairobi",
    "start": "212600",
    "end": "219030"
  },
  {
    "text": "Meetup so before I moved to France I started a meetup group in a Robbie to talk about trust I give talks and",
    "start": "219030",
    "end": "226320"
  },
  {
    "text": "workshop talk to new graduates and like introduce them to the language yeah so",
    "start": "226320",
    "end": "236120"
  },
  {
    "text": "yesterday I had people are not willing to ask questions so I would encourage",
    "start": "236120",
    "end": "243030"
  },
  {
    "text": "you there is a at the bottom of my slide some of my slides will have my Twitter",
    "start": "243030",
    "end": "248100"
  },
  {
    "text": "handle if you have a question during this session feel free to tweet at me and at the end of this session I'll try",
    "start": "248100",
    "end": "253739"
  },
  {
    "text": "and look at some tweets and answer the questions okay so we're gonna begin with",
    "start": "253739",
    "end": "264900"
  },
  {
    "text": "when write the Rastas an idea has been",
    "start": "264900",
    "end": "271440"
  },
  {
    "text": "there for quite a while so it started as a personal project you have this",
    "start": "271440",
    "end": "280729"
  },
  {
    "text": "engineer who's working at Mozilla who was trying to build something that would",
    "start": "280729",
    "end": "288450"
  },
  {
    "text": "kind of fix some of his frustration that he had seen inviting a C and C++ and so",
    "start": "288450",
    "end": "297240"
  },
  {
    "text": "his name is a great one I hear someone asking him how long the name has been many kinda mentions more or less 204 205",
    "start": "297240",
    "end": "306630"
  },
  {
    "text": "and he did a presentation in 2010 and by",
    "start": "306630",
    "end": "314940"
  },
  {
    "text": "this time he had already built sort of like the initial version of the language",
    "start": "314940",
    "end": "320669"
  },
  {
    "text": "and so this was more or less the the",
    "start": "320669",
    "end": "325770"
  },
  {
    "text": "alion goes that the language had so concurrency safety and it's supposed to",
    "start": "325770",
    "end": "334650"
  },
  {
    "text": "fit in in the same niche as C and C++ source systems programming and one of",
    "start": "334650",
    "end": "341400"
  },
  {
    "text": "the key things that were also there this time in the language is that there was a",
    "start": "341400",
    "end": "347130"
  },
  {
    "text": "type system it had which ability control so rust is by default immutable so when",
    "start": "347130",
    "end": "356039"
  },
  {
    "text": "you declare a variable by default the immutable and you have to use a keyword to actually for you to be able to",
    "start": "356039",
    "end": "363450"
  },
  {
    "text": "imitate them also it had a side effect control so it began sort of from",
    "start": "363450",
    "end": "372750"
  },
  {
    "text": "functional programming roots so when I say the side effects I mean it was a pure it had fewer functions right now",
    "start": "372750",
    "end": "379470"
  },
  {
    "text": "it's changed but that's not the case and around this time also the compile itself was written in a camel which is a",
    "start": "379470",
    "end": "386930"
  },
  {
    "text": "functional programming language so this is a snippet of some of the code",
    "start": "386930",
    "end": "396500"
  },
  {
    "text": "from back then if you're familiar with rust you can see that a bit of each has",
    "start": "396500",
    "end": "402740"
  },
  {
    "text": "changed but it gets you consist some of the things that have been carried on",
    "start": "402740",
    "end": "408350"
  },
  {
    "text": "such as the the FN key word and also how",
    "start": "408350",
    "end": "414260"
  },
  {
    "text": "we do there he fells so I have this",
    "start": "414260",
    "end": "422560"
  },
  {
    "text": "simple graph that tries to talk about rust over time and shows some",
    "start": "422560",
    "end": "431350"
  },
  {
    "text": "interesting dates and timelines so I",
    "start": "431350",
    "end": "438680"
  },
  {
    "text": "mentioned the project started as a as a personal project for by grade 1 in",
    "start": "438680",
    "end": "445280"
  },
  {
    "text": "around 206 and then in 2 & 9 Mozilla started sponsoring the project",
    "start": "445280",
    "end": "451610"
  },
  {
    "text": "so there was like a small team at Mozilla full-time working on the",
    "start": "451610",
    "end": "457370"
  },
  {
    "text": "language and between 2 or 9 and 2015 a",
    "start": "457370",
    "end": "463250"
  },
  {
    "text": "lot of things changed so 2015 is important May of 2015 is when Russ",
    "start": "463250",
    "end": "468650"
  },
  {
    "text": "released the 1.0 release so this was a stable release guaranteeing backward",
    "start": "468650",
    "end": "475580"
  },
  {
    "text": "compatibility in the language so here one of the things that changed is the",
    "start": "475580",
    "end": "482420"
  },
  {
    "text": "compiler got rewritten from a camel to actually using rust a lot of the",
    "start": "482420",
    "end": "490480"
  },
  {
    "text": "improvements in the type system the ownership module if you're familiar I'm gonna talk about it later",
    "start": "490480",
    "end": "496730"
  },
  {
    "text": "essentially how rust is with memory came during this time also there is the the",
    "start": "496730",
    "end": "503390"
  },
  {
    "text": "RFC process so all the the features that come into the language are sort of are",
    "start": "503390",
    "end": "509600"
  },
  {
    "text": "done in sort of consensus so you have to write",
    "start": "509600",
    "end": "514789"
  },
  {
    "text": "an RFC and that goes through some stages where people discuss and try to get a",
    "start": "514790",
    "end": "520159"
  },
  {
    "text": "merit of it and once the RFC is approved then the feature can be implemented so",
    "start": "520160",
    "end": "526190"
  },
  {
    "text": "this came up during this period and then so the line in blue is just a trend on",
    "start": "526190",
    "end": "534860"
  },
  {
    "text": "google just showing how much people have been interested in rust over time and the green line is showing the growth of",
    "start": "534860",
    "end": "544450"
  },
  {
    "text": "develop past contributors who have contributed to the rust compiler so it's",
    "start": "544450",
    "end": "550010"
  },
  {
    "text": "important to note that rust development has been open so it's this you can go and get up and actually find the whole",
    "start": "550010",
    "end": "557150"
  },
  {
    "text": "history and a lot of the people contributing to the compiler are not",
    "start": "557150",
    "end": "563090"
  },
  {
    "text": "actually people employed by Mozilla these are folks on github seeing an issue and doing a PR and so that's how",
    "start": "563090",
    "end": "570470"
  },
  {
    "text": "the graph has grown right now it's you almost have I think when I checked it",
    "start": "570470",
    "end": "576800"
  },
  {
    "text": "was almost 2700 almost 700 contributors who have contributed something to the",
    "start": "576800",
    "end": "583870"
  },
  {
    "text": "compiler and so right now this is sort of what you have current a snippet of",
    "start": "583870",
    "end": "592580"
  },
  {
    "text": "rust code I have not part of the code with these cute crabs so essentially to",
    "start": "592580",
    "end": "601940"
  },
  {
    "text": "highlight some of the features so like at the top you can see there's this a",
    "start": "601940",
    "end": "609880"
  },
  {
    "text": "hash in and then these I derive and these these debug thing and this is a a",
    "start": "609880",
    "end": "619450"
  },
  {
    "text": "macro so we have two types of macros in rust so these one at the top and one at",
    "start": "619450",
    "end": "625670"
  },
  {
    "text": "the bottom here with the println so these are essentially help you to do a",
    "start": "625670",
    "end": "631730"
  },
  {
    "text": "bit of meta programming and if you if",
    "start": "631730",
    "end": "637130"
  },
  {
    "text": "you're familiar with [Music] Haskell Haskell has something similar",
    "start": "637130",
    "end": "642490"
  },
  {
    "text": "where you can do like a derive show for a certain struct and the idea here is",
    "start": "642490",
    "end": "651490"
  },
  {
    "text": "that in this case this debug macro will",
    "start": "651490",
    "end": "657329"
  },
  {
    "text": "provide us a way of printing out this strut so and when you print it out you",
    "start": "657329",
    "end": "664720"
  },
  {
    "text": "call it with this interesting syntax here so you essentially saying that the",
    "start": "664720",
    "end": "671259"
  },
  {
    "text": "thing that comes you should be formatted using this debug mode and then you just",
    "start": "671259",
    "end": "676720"
  },
  {
    "text": "pass in our rectangle here and then so we have a struct pretty similar to what",
    "start": "676720",
    "end": "683529"
  },
  {
    "text": "you have in C and C++ and then the a is an implementation block so this is where",
    "start": "683529",
    "end": "690490"
  },
  {
    "text": "we define behavior to our objects so you",
    "start": "690490",
    "end": "696399"
  },
  {
    "text": "have an Associated function so this is a constructor the a new word is not a",
    "start": "696399",
    "end": "702910"
  },
  {
    "text": "keyword it's just a convention that we use when building an instance of a struct and you can see it as an",
    "start": "702910",
    "end": "710680"
  },
  {
    "text": "associate function since we don't have a self and this is an associate function and it kind of almost looks like what",
    "start": "710680",
    "end": "718870"
  },
  {
    "text": "you'd have in an Opie language",
    "start": "718870",
    "end": "722220"
  },
  {
    "text": "so that is that was a bit of the history",
    "start": "725950",
    "end": "731950"
  },
  {
    "text": "of rust how it has moved from being a personal project to an open-source",
    "start": "731950",
    "end": "737500"
  },
  {
    "text": "project and the features and how it's changed in terms of syntax and all that but you might have the question of why",
    "start": "737500",
    "end": "747970"
  },
  {
    "text": "does rust actually exists and what is he trying to solve so a rust is primarily",
    "start": "747970",
    "end": "754750"
  },
  {
    "text": "designed to solve our two problems so during this period between you know",
    "start": "754750",
    "end": "761560"
  },
  {
    "text": "more or less from our two or nine when it was adopted by Mozilla they were",
    "start": "761560",
    "end": "767709"
  },
  {
    "text": "doing a lot of experimentation on the browser so they have a browser engine",
    "start": "767709",
    "end": "775420"
  },
  {
    "text": "written in C++ gecko and Mozilla research had another experimental engine",
    "start": "775420",
    "end": "781630"
  },
  {
    "text": "called Tsavo and this engine was written in rust and they would develop the",
    "start": "781630",
    "end": "789459"
  },
  {
    "text": "engine and do sort of feedback that influenced in how their brass was",
    "start": "789459",
    "end": "797050"
  },
  {
    "text": "developing features or like show pinpoints that they had so the two main",
    "start": "797050",
    "end": "804040"
  },
  {
    "text": "things that trust tries to solve one is",
    "start": "804040",
    "end": "809310"
  },
  {
    "text": "concurrency so it's simply how can we make concurrency less painful so if you",
    "start": "809490",
    "end": "817750"
  },
  {
    "text": "think of concurrency it's simply where you have multiple things running on the",
    "start": "817750",
    "end": "824949"
  },
  {
    "text": "same time and it's actually good for performance cause one we get to exploit",
    "start": "824949",
    "end": "830980"
  },
  {
    "text": "the resources we have on on our machines so over time more slow has more or less",
    "start": "830980",
    "end": "838329"
  },
  {
    "text": "are slowed because physically we can't fit as many transistors on a silicon",
    "start": "838329",
    "end": "843490"
  },
  {
    "text": "chip anymore and now ideally how you scale up is you have a chip with",
    "start": "843490",
    "end": "849760"
  },
  {
    "text": "multiple cores on it and here concurrency comes into play cause if you're able to",
    "start": "849760",
    "end": "855750"
  },
  {
    "text": "run new program on all the codes available to you then it means you will",
    "start": "855750",
    "end": "862520"
  },
  {
    "text": "have better performance but then this sort of programming comes with a bit of",
    "start": "862520",
    "end": "869670"
  },
  {
    "text": "complexity so one of the issues you have is a risk condition so if you the",
    "start": "869670",
    "end": "875370"
  },
  {
    "text": "classic example if you have two threads that are updating a value so they read",
    "start": "875370",
    "end": "882810"
  },
  {
    "text": "at the same time let's say this value is 1 and they want to increment it by 1 the reader at the same time each one has the",
    "start": "882810",
    "end": "889800"
  },
  {
    "text": "value 1 they increment it to 2 and then write back and you kinda have one of the",
    "start": "889800",
    "end": "895130"
  },
  {
    "text": "rights being lost another issue with concurrency is a deadlocks so you have",
    "start": "895130",
    "end": "903410"
  },
  {
    "text": "two threads that are waiting on each other to release the resources because",
    "start": "903410",
    "end": "909750"
  },
  {
    "text": "both of them need the resources from each other and so you have this situation where you're doing nothing",
    "start": "909750",
    "end": "915300"
  },
  {
    "text": "because you're modest halting waiting indefinitely for for the other thread",
    "start": "915300",
    "end": "921150"
  },
  {
    "text": "and the same thing because the other thread is waiting for you and another big issue with concurrency is that and I",
    "start": "921150",
    "end": "929490"
  },
  {
    "text": "think this is what this comic tries to illustrate is sometimes you would have",
    "start": "929490",
    "end": "934950"
  },
  {
    "text": "you can have bugs that okar since you buy by virtue of doing concurrency there",
    "start": "934950",
    "end": "941760"
  },
  {
    "text": "is no inherent guarantee in the order in which a code is executed so if you get a bug then it's very hard for you to",
    "start": "941760",
    "end": "948780"
  },
  {
    "text": "actually reproduce it or even actually debug it so rust",
    "start": "948780",
    "end": "956480"
  },
  {
    "text": "ideally tries to get off with these get rid of these problems that come with",
    "start": "956480",
    "end": "963710"
  },
  {
    "text": "concurrency then the second thing is",
    "start": "963710",
    "end": "969930"
  },
  {
    "text": "about it so who in the room remembers this logo alright so this happened a few",
    "start": "969930",
    "end": "978570"
  },
  {
    "text": "years back where there was a a bug in OpenSSL essentially there was",
    "start": "978570",
    "end": "987860"
  },
  {
    "text": "no bound checking on an array and you could essentially read beyond the array",
    "start": "987860",
    "end": "994670"
  },
  {
    "text": "in memory and get very interesting things such as you know people's password and messages from web servers",
    "start": "994670",
    "end": "1003220"
  },
  {
    "text": "and this affected a lot of our web",
    "start": "1003220",
    "end": "1009610"
  },
  {
    "text": "servers on the Internet and the issue though we have this kind of bugs is",
    "start": "1009610",
    "end": "1017800"
  },
  {
    "text": "because the languages that we use to write web servers so this low-level",
    "start": "1017800",
    "end": "1023860"
  },
  {
    "text": "languages C and C++ are inherently unsafe so they don't stop you as a good",
    "start": "1023860",
    "end": "1031630"
  },
  {
    "text": "programmer yes we should no you should not read beyond the end of an array but these themselves the language if you do",
    "start": "1031630",
    "end": "1038020"
  },
  {
    "text": "that they don't stop you they assume you know you you know what you're doing and it leads to my problems like this but it",
    "start": "1038020",
    "end": "1046180"
  },
  {
    "text": "also important to note that yes there are some languages that have fix these issues so if you using a higher-level",
    "start": "1046180",
    "end": "1051640"
  },
  {
    "text": "language Java Python go they make sure that you can't do something like this if",
    "start": "1051640",
    "end": "1058120"
  },
  {
    "text": "you if you have a container you cannot access the the index passed at the end",
    "start": "1058120",
    "end": "1064390"
  },
  {
    "text": "of the container but then the issue with these higher languages is that for this",
    "start": "1064390",
    "end": "1071080"
  },
  {
    "text": "safety that you get you get a performance penalty so if you using a",
    "start": "1071080",
    "end": "1079300"
  },
  {
    "text": "Ruby or Python you have a runtime so essentially a garbage collector runtime",
    "start": "1079300",
    "end": "1084460"
  },
  {
    "text": "though will influence essentially how performance your code is so it's not",
    "start": "1084460",
    "end": "1090580"
  },
  {
    "text": "going to be as fast if you had written it in C or C++ and also it takes away",
    "start": "1090580",
    "end": "1097090"
  },
  {
    "text": "that control you have when you're writing a C and C++ because you yourself can decide when to allocate and",
    "start": "1097090",
    "end": "1104140"
  },
  {
    "text": "deallocate memory but if you're working on a higher language all that is done by the garbage collector and you have no",
    "start": "1104140",
    "end": "1110200"
  },
  {
    "text": "way of actually wincing that so the idea here is that",
    "start": "1110200",
    "end": "1117009"
  },
  {
    "text": "rust will try to fix a few issues so it will handle a lava flow avoid you having",
    "start": "1117009",
    "end": "1125740"
  },
  {
    "text": "a dangling pointers or like using memory update has been freed and I think this",
    "start": "1125740",
    "end": "1135190"
  },
  {
    "text": "quote kinda exemplifies that we should",
    "start": "1135190",
    "end": "1141639"
  },
  {
    "text": "actually be careful in the languages we use because such a bad you know if",
    "start": "1141639",
    "end": "1149110"
  },
  {
    "text": "imagine for ever reason in the future you have this bug that affects all the",
    "start": "1149110",
    "end": "1154119"
  },
  {
    "text": "computers in the world then we would have a serious issue in our hand and",
    "start": "1154119",
    "end": "1159990"
  },
  {
    "text": "making sure that we actually build sort of strong foundations for our",
    "start": "1159990",
    "end": "1165850"
  },
  {
    "text": "computation is actually something good so this is a quote from Tony Hawk if you",
    "start": "1165850",
    "end": "1172090"
  },
  {
    "text": "not familiar with him he's a British computer scientist if you know quicksort",
    "start": "1172090",
    "end": "1177909"
  },
  {
    "text": "he came up with quicksort he also did a bit of work in creating logic for",
    "start": "1177909",
    "end": "1185409"
  },
  {
    "text": "verifying program correctness so there's the whole logic and he done a bit of",
    "start": "1185409",
    "end": "1192100"
  },
  {
    "text": "some work in distributed computing so",
    "start": "1192100",
    "end": "1197759"
  },
  {
    "text": "essentially he came up with a CSP communicating sequential processes all",
    "start": "1197759",
    "end": "1206230"
  },
  {
    "text": "right so now let's look at what Russ actually",
    "start": "1206230",
    "end": "1216110"
  },
  {
    "text": "is we know why it exists so for the",
    "start": "1216110",
    "end": "1221179"
  },
  {
    "text": "longest time if you went to the Russ",
    "start": "1221179",
    "end": "1226519"
  },
  {
    "text": "website this is the description you get it's our systems language it runs fast",
    "start": "1226519",
    "end": "1232429"
  },
  {
    "text": "it prevents seg fault and it guarantees some sort of thread",
    "start": "1232429",
    "end": "1238129"
  },
  {
    "text": "safety but if you someone like me because I come from a Python world or if",
    "start": "1238129",
    "end": "1243889"
  },
  {
    "text": "you do JavaScript and you read this you'll be like what blazing-fast yes I",
    "start": "1243889",
    "end": "1251720"
  },
  {
    "text": "understand it of it's good to be fast but we don't talk about seg faults in in",
    "start": "1251720",
    "end": "1257990"
  },
  {
    "text": "JavaScript in the Python world we rarely talk about memory safety so there is",
    "start": "1257990",
    "end": "1264070"
  },
  {
    "text": "this a bit of discontinuity in terms of like introducing rusts to people who are",
    "start": "1264070",
    "end": "1270950"
  },
  {
    "text": "not actually systems programmers so eventually the description has evolved",
    "start": "1270950",
    "end": "1279409"
  },
  {
    "text": "over time and I actually like this quote from Ashley Williams she's a member of",
    "start": "1279409",
    "end": "1286639"
  },
  {
    "text": "the Rask core team and she also does a bit of community work and essentially",
    "start": "1286639",
    "end": "1292659"
  },
  {
    "text": "the idea is that rust is simply supposed",
    "start": "1292659",
    "end": "1298369"
  },
  {
    "text": "to empower you the developer to write code that is fast and also safe and I",
    "start": "1298369",
    "end": "1305299"
  },
  {
    "text": "will touch on what we mean by actually saying empowering so talk about the productivity that Trust gives you as a",
    "start": "1305299",
    "end": "1312470"
  },
  {
    "text": "developer anything to me that is more or less a good introduction or a",
    "start": "1312470",
    "end": "1319970"
  },
  {
    "text": "description to rust so another way I personally like to to look at rust is",
    "start": "1319970",
    "end": "1328600"
  },
  {
    "text": "based on the three main goals that it tries to solve as a systems programming",
    "start": "1328600",
    "end": "1334940"
  },
  {
    "text": "language so someone told me every talk must have a Venn diagram so",
    "start": "1334940",
    "end": "1340080"
  },
  {
    "text": "here is mine so the three things we've kind of touched on two of them",
    "start": "1340080",
    "end": "1346530"
  },
  {
    "text": "so concurrency and safety and they'd speed so essentially rust is supposed to",
    "start": "1346530",
    "end": "1355560"
  },
  {
    "text": "be correct compare ibly fast as C and C++ because the the idea was to use it",
    "start": "1355560",
    "end": "1362910"
  },
  {
    "text": "as either together with them or a replacement so speed is one of the the",
    "start": "1362910",
    "end": "1369210"
  },
  {
    "text": "key things that rust aims to do and then we've touched about the safety aspects",
    "start": "1369210",
    "end": "1377610"
  },
  {
    "text": "of being memory safe and making sure we we can't have these bugs that are very easy to do in C and C++ and the other",
    "start": "1377610",
    "end": "1385680"
  },
  {
    "text": "big thing is that we should support a way to do concurrency and make it really",
    "start": "1385680",
    "end": "1391530"
  },
  {
    "text": "easy for a programmer to do that and I think rust sits in that the intersection",
    "start": "1391530",
    "end": "1397170"
  },
  {
    "text": "of these three main goals so we're gonna",
    "start": "1397170",
    "end": "1403950"
  },
  {
    "text": "look at how rust achieves that we things",
    "start": "1403950",
    "end": "1409800"
  },
  {
    "text": "so so fast are we gonna look at speed so",
    "start": "1409800",
    "end": "1415170"
  },
  {
    "text": "there are several things the rust does to be fast and if you go there are a lot",
    "start": "1415170",
    "end": "1421140"
  },
  {
    "text": "of benchmark that shows you know comparing rust and C or C++ and I'm not",
    "start": "1421140",
    "end": "1428400"
  },
  {
    "text": "going to show any benchmarks here but you can find a lot of them online so one",
    "start": "1428400",
    "end": "1434250"
  },
  {
    "text": "of the big reason for rust being fast is that it doesn't have a runtime so",
    "start": "1434250",
    "end": "1441470"
  },
  {
    "text": "there's no global penalty that you get like when you have garbage collection in",
    "start": "1441470",
    "end": "1447990"
  },
  {
    "text": "a garbage collector language because the way a rust manages memory is all done at",
    "start": "1447990",
    "end": "1453750"
  },
  {
    "text": "compile time so there's no runtime when you when your code is running and this makes it fast and also another thing",
    "start": "1453750",
    "end": "1464760"
  },
  {
    "text": "that comes from this is that rust can run a sort of anywhere C can run because",
    "start": "1464760",
    "end": "1470550"
  },
  {
    "text": "you don't have a runtime then you can use rust for example in embedded environments where you're kind of constrained in the",
    "start": "1470550",
    "end": "1477110"
  },
  {
    "text": "resources that you have another thing is the LLVM so LLVM is a collection of",
    "start": "1477110",
    "end": "1486020"
  },
  {
    "text": "compiler tools and techniques that help you to build compiler backends and",
    "start": "1486020",
    "end": "1491420"
  },
  {
    "text": "front-end and it's been there I think it came out of Apple the LLVM doesn't mean",
    "start": "1491420",
    "end": "1501530"
  },
  {
    "text": "anything but some people say a low-level virtual machine but it doesn't have",
    "start": "1501530",
    "end": "1507950"
  },
  {
    "text": "quite a name but so the the Russ compiler is simply a front-end to LLVM",
    "start": "1507950",
    "end": "1516170"
  },
  {
    "text": "so part of and I'll show a slide that can explain this when you when you're",
    "start": "1516170",
    "end": "1521870"
  },
  {
    "text": "asked code gets compiled it will be compiled to an intermediate representation that is then passed to",
    "start": "1521870",
    "end": "1528500"
  },
  {
    "text": "LLVM and then LVM will do add optimizations and omit the machine code",
    "start": "1528500",
    "end": "1534830"
  },
  {
    "text": "and then to other things so we have",
    "start": "1534830",
    "end": "1540760"
  },
  {
    "text": "these two last points zero cost obstructions and generics and these are",
    "start": "1540760",
    "end": "1548450"
  },
  {
    "text": "kind of closely related so with zero cost abstractions the idea is that rust",
    "start": "1548450",
    "end": "1555800"
  },
  {
    "text": "as a language will give you high level features for you to write your code in",
    "start": "1555800",
    "end": "1562010"
  },
  {
    "text": "an expressive way but when this code gets compiled it's gonna be compiled to very low level primitives and the idea",
    "start": "1562010",
    "end": "1569090"
  },
  {
    "text": "is that even if you're using these high level abstractions you don't get penalized in terms of performance or",
    "start": "1569090",
    "end": "1574940"
  },
  {
    "text": "memory usage or stuff like that and also",
    "start": "1574940",
    "end": "1580040"
  },
  {
    "text": "it's considered related to these generics generics monetization which is",
    "start": "1580040",
    "end": "1585950"
  },
  {
    "text": "simply called specialization so for example if you have a generic function that maybe takes a an argument based on",
    "start": "1585950",
    "end": "1596060"
  },
  {
    "text": "a certain interface then at compile time the compiler will look at all the types",
    "start": "1596060",
    "end": "1601520"
  },
  {
    "text": "that implement this interface and generate appropriate for the type so that when you when you",
    "start": "1601520",
    "end": "1608010"
  },
  {
    "text": "code is running you kind of guaranteed that it would be code that is specific",
    "start": "1608010",
    "end": "1615090"
  },
  {
    "text": "to the type of 2d to the type at runtime and this idea of having a zero course",
    "start": "1615090",
    "end": "1623430"
  },
  {
    "text": "abstraction is actually not something new in rust it's something that has been borrowed from C++ so there is this zero",
    "start": "1623430",
    "end": "1632610"
  },
  {
    "text": "overhead principle that C++ have so if you don't use something that you don't",
    "start": "1632610",
    "end": "1639180"
  },
  {
    "text": "pay for it and if you use it you cannot you couldn't have written it any better",
    "start": "1639180",
    "end": "1644970"
  },
  {
    "text": "and this is sort of the the mantra that rust tries to also implement so I'd",
    "start": "1644970",
    "end": "1653490"
  },
  {
    "text": "mentioned about this slide so this is simply showing the stages that rust code",
    "start": "1653490",
    "end": "1660900"
  },
  {
    "text": "goes through when it's in compiled and it's important to know like this three",
    "start": "1660900",
    "end": "1667770"
  },
  {
    "text": "fast sections they happen in the in the rust compiler so it has internally some",
    "start": "1667770",
    "end": "1675780"
  },
  {
    "text": "intermediate representation so this is the high-level intermediate representation the mid level and then",
    "start": "1675780",
    "end": "1681960"
  },
  {
    "text": "after that is gonna produce this intermediate representation that's actually defined by the LLVM",
    "start": "1681960",
    "end": "1689400"
  },
  {
    "text": "and pass it to LLVM and then this part is now done in the LLVM back-end and",
    "start": "1689400",
    "end": "1697050"
  },
  {
    "text": "this way we are able to sort of get the optimizations for free that LLVM does",
    "start": "1697050",
    "end": "1706549"
  },
  {
    "text": "then the next thing in the Venn diagram",
    "start": "1707600",
    "end": "1713190"
  },
  {
    "text": "was about safety so there are several ways that rust does this but I think the",
    "start": "1713190",
    "end": "1720930"
  },
  {
    "text": "most important thing is this thing called ownership and the idea here is",
    "start": "1720930",
    "end": "1727130"
  },
  {
    "text": "very simple there are two things when you when you start looking at the the memory issues",
    "start": "1727130",
    "end": "1734370"
  },
  {
    "text": "that C and C++ have is that you normally get these bugs when you have mutation and aliasing happening at",
    "start": "1734370",
    "end": "1741840"
  },
  {
    "text": "the same time with mutation I mean you have a value in memory and it's getting",
    "start": "1741840",
    "end": "1748020"
  },
  {
    "text": "changed and aliasing is when you have two or more references to the same",
    "start": "1748020",
    "end": "1754070"
  },
  {
    "text": "memory address and if you have these two things happening mutation and aliasing",
    "start": "1754070",
    "end": "1759780"
  },
  {
    "text": "then bugs are bound to occur so a good example is imagine you have a a variable",
    "start": "1759780",
    "end": "1766770"
  },
  {
    "text": "that and its value is a vector so let's say a vector of size 2 and then you have",
    "start": "1766770",
    "end": "1773520"
  },
  {
    "text": "another variable that's a referencing inside this vector so let's say 2 the first index and then you reach other",
    "start": "1773520",
    "end": "1781530"
  },
  {
    "text": "vector so let's say you double its size and normally based on the how these",
    "start": "1781530",
    "end": "1786870"
  },
  {
    "text": "factors are implemented implemented you might it might be just be an array in memory and when it goes beyond the",
    "start": "1786870",
    "end": "1793170"
  },
  {
    "text": "allocated size you have to allocate another memory block and copy things",
    "start": "1793170",
    "end": "1798450"
  },
  {
    "text": "over to the new location and so if you have these two references that don't know about each other the second one that was pointing inside",
    "start": "1798450",
    "end": "1806160"
  },
  {
    "text": "the vector once the vector moves to another region of memory will essentially be a dangling pointer and",
    "start": "1806160",
    "end": "1812370"
  },
  {
    "text": "the idea of the ownership system is to actually avoid such scenarios and from",
    "start": "1812370",
    "end": "1820680"
  },
  {
    "text": "the ownership system you get concepts that are sort of built on top of this so",
    "start": "1820680",
    "end": "1827070"
  },
  {
    "text": "you have borrowing and lefthand we look at them but the idea here is to for you",
    "start": "1827070",
    "end": "1833460"
  },
  {
    "text": "to actually do something you need to share data or mutate data and then you gonna have some sort of semantics and",
    "start": "1833460",
    "end": "1839640"
  },
  {
    "text": "rules to use when you're doing that and the last thing is gonna be a smart",
    "start": "1839640",
    "end": "1846360"
  },
  {
    "text": "pointers that are kinda nice but you sometimes you have situations where you",
    "start": "1846360",
    "end": "1853410"
  },
  {
    "text": "cannot actually describe ownership well and these are smart pointers are fitting",
    "start": "1853410",
    "end": "1859920"
  },
  {
    "text": "in that so they help you to describe some other cases and I'm gonna give an example okay so the ownership method is",
    "start": "1859920",
    "end": "1868440"
  },
  {
    "text": "simply a set of rules so there are three rules so one each value has an owner so a",
    "start": "1868440",
    "end": "1876700"
  },
  {
    "text": "variable will only the ballot has there",
    "start": "1876700",
    "end": "1882190"
  },
  {
    "text": "can only be one owner at a time so you cannot have two mutable references to",
    "start": "1882190",
    "end": "1890800"
  },
  {
    "text": "the same value and the end if you want our value to be owned by someone else",
    "start": "1890800",
    "end": "1896800"
  },
  {
    "text": "you have to like pass it to them so you move ownership and then the last one is",
    "start": "1896800",
    "end": "1902470"
  },
  {
    "text": "when the owner goes out of scope then",
    "start": "1902470",
    "end": "1907660"
  },
  {
    "text": "the value is also reclaimed so the idea here is a classic example if you open a",
    "start": "1907660",
    "end": "1912670"
  },
  {
    "text": "file in rust then the variable owns the file and at the end of the scope the",
    "start": "1912670",
    "end": "1918880"
  },
  {
    "text": "file itself will be closed when the value gets dropped okay so those are the",
    "start": "1918880",
    "end": "1927670"
  },
  {
    "text": "three ownership rules then we have",
    "start": "1927670",
    "end": "1933120"
  },
  {
    "text": "borrowing and lifetimes so the idea here",
    "start": "1933120",
    "end": "1940060"
  },
  {
    "text": "is very simple for you to share data you have some rules one is if you're gonna",
    "start": "1940060",
    "end": "1948760"
  },
  {
    "text": "share data that's gonna change there's only gonna be one reference multiple reference to this piece of data and if",
    "start": "1948760",
    "end": "1957670"
  },
  {
    "text": "you wanna share data that's not changing so immutable reference those ones you can have as many as you want and the",
    "start": "1957670",
    "end": "1963910"
  },
  {
    "text": "idea is that if one person is changing the certain memory then you don't have",
    "start": "1963910",
    "end": "1969310"
  },
  {
    "text": "risk of having dangling pointers or stuff like that so here's some code just",
    "start": "1969310",
    "end": "1978610"
  },
  {
    "text": "to try and illustrate how ownership and",
    "start": "1978610",
    "end": "1983650"
  },
  {
    "text": "boring works in rust so this is a piece of code in rust",
    "start": "1983650",
    "end": "1989820"
  },
  {
    "text": "so essentially sorry",
    "start": "1989820",
    "end": "1995159"
  },
  {
    "text": "yeah so you have a function that is",
    "start": "1995230",
    "end": "2000400"
  },
  {
    "text": "formatting an integer into a string and then here instead of returning the value",
    "start": "2000400",
    "end": "2006520"
  },
  {
    "text": "we are returning a reference so basically a pointer to the memory",
    "start": "2006520",
    "end": "2012790"
  },
  {
    "text": "location where the string is but this won't compile the reason being because since this is a reference to s so s if",
    "start": "2012790",
    "end": "2021760"
  },
  {
    "text": "you think about s S is the owner and one of the constraints with referencing or",
    "start": "2021760",
    "end": "2028360"
  },
  {
    "text": "borrowing is that this baroque cannot outlive its parent so at this point",
    "start": "2028360",
    "end": "2034960"
  },
  {
    "text": "won't get out of the function we are going out of scope so this is gonna be freed and this essentially will be a",
    "start": "2034960",
    "end": "2041530"
  },
  {
    "text": "dangling pointer and maybe I can try see",
    "start": "2041530",
    "end": "2046840"
  },
  {
    "text": "if we can actually see this so sorry",
    "start": "2046840",
    "end": "2054270"
  },
  {
    "text": "all right so so this is the code in a",
    "start": "2062619",
    "end": "2067898"
  },
  {
    "text": "rust playground so I'm gonna run it and see what the compiler says so yeah so",
    "start": "2067899",
    "end": "2080190"
  },
  {
    "text": "so you can see that we get a an error that says the board value does not live",
    "start": "2082670",
    "end": "2090710"
  },
  {
    "text": "long enough and it will actually show you the scope in which s is valid which",
    "start": "2090710",
    "end": "2098150"
  },
  {
    "text": "is until line 14",
    "start": "2098150",
    "end": "2102400"
  },
  {
    "text": "so essentially also you get then so here",
    "start": "2108200",
    "end": "2113300"
  },
  {
    "text": "this is an illustration where we have data that's a mutable that can change",
    "start": "2113300",
    "end": "2119300"
  },
  {
    "text": "and we also have an immutable reference to the data so this is how you opt in to",
    "start": "2119300",
    "end": "2127520"
  },
  {
    "text": "mutability in rust so we are saying here that this vector might change then here",
    "start": "2127520",
    "end": "2133610"
  },
  {
    "text": "we do a reference to the first element but this reference is immutable and then",
    "start": "2133610",
    "end": "2142570"
  },
  {
    "text": "at this point we try to reach it the vector and essentially there come the",
    "start": "2142570",
    "end": "2149270"
  },
  {
    "text": "compiler is gonna complain and tell you you cannot have much ability and mutability at the same time so",
    "start": "2149270",
    "end": "2157330"
  },
  {
    "text": "essentially you get this error that says you are doing boring multiply and also",
    "start": "2157330",
    "end": "2166580"
  },
  {
    "text": "boring image ugly and we do not allow that and it's actually give you a like a",
    "start": "2166580",
    "end": "2171590"
  },
  {
    "text": "really nice error message showing you where you're doing it wrong and some",
    "start": "2171590",
    "end": "2180410"
  },
  {
    "text": "people have actually thought that the compiler gives you great messages and",
    "start": "2180410",
    "end": "2185570"
  },
  {
    "text": "say like it sort of does pair programming with you okay then I",
    "start": "2185570",
    "end": "2194420"
  },
  {
    "text": "mentioned about smart pointers so this",
    "start": "2194420",
    "end": "2201320"
  },
  {
    "text": "is an example the idea is you have some",
    "start": "2201320",
    "end": "2206390"
  },
  {
    "text": "memory that you want to share but you you're not sure of the ownership so if",
    "start": "2206390",
    "end": "2213290"
  },
  {
    "text": "you think of this think of which like the TV in a family living room so you have a family the first person into the",
    "start": "2213290",
    "end": "2219830"
  },
  {
    "text": "room is gonna turn on the TV and they're gonna watch and people are gonna come and we're gonna continue to watch and",
    "start": "2219830",
    "end": "2226070"
  },
  {
    "text": "then people might leave and go as they want but the last person in",
    "start": "2226070",
    "end": "2231090"
  },
  {
    "text": "living room is on who's gonna turn the TV off and there's no guarantee that this last person is gonna be the first",
    "start": "2231090",
    "end": "2236820"
  },
  {
    "text": "guy who turned the TV on so you have some value that's being shared across",
    "start": "2236820",
    "end": "2243420"
  },
  {
    "text": "several variables but we don't have a clear owner so the idea here is actually",
    "start": "2243420",
    "end": "2249630"
  },
  {
    "text": "this is just reference coating so our team stands for a reference counter and we initialize our variable behind it so",
    "start": "2249630",
    "end": "2259340"
  },
  {
    "text": "here you have a reference to the reference counter when we do this clone",
    "start": "2259340",
    "end": "2264630"
  },
  {
    "text": "this copy we are just copying the reference and here we are essentially",
    "start": "2264630",
    "end": "2272630"
  },
  {
    "text": "freeing the variable a so at this point we are gonna just reduce the the",
    "start": "2272630",
    "end": "2281670"
  },
  {
    "text": "reference count and even if this value has gone away we still have this data because it's being allocated on the hip",
    "start": "2281670",
    "end": "2288240"
  },
  {
    "text": "and this will happily compile in rust so this is one of the ways to handle the",
    "start": "2288240",
    "end": "2295140"
  },
  {
    "text": "issue where you don't have a clear ownership and there's a counter part so these are our sorry so there is Bay's RC",
    "start": "2295140",
    "end": "2303390"
  },
  {
    "text": "and there's also up so a RC which stands for atomic reference counting and this",
    "start": "2303390",
    "end": "2310320"
  },
  {
    "text": "is important when you're sharing data across threads and you want to ensure that you have thread safety yes this",
    "start": "2310320",
    "end": "2318540"
  },
  {
    "text": "will compile yes yes it's essentially the the data",
    "start": "2318540",
    "end": "2326600"
  },
  {
    "text": "here is on the hip and what you get is just a reference to the data and the so",
    "start": "2326600",
    "end": "2332630"
  },
  {
    "text": "the idea if you want to think about ownership the owner of the data is not a but it's the reference country so okay",
    "start": "2332630",
    "end": "2342920"
  },
  {
    "text": "so so having made it so far in my talk",
    "start": "2342920",
    "end": "2347930"
  },
  {
    "text": "I'm gonna reward you with the crop so this is various it's a there was",
    "start": "2347930",
    "end": "2353330"
  },
  {
    "text": "unofficial mascot alright so moving on",
    "start": "2353330",
    "end": "2361630"
  },
  {
    "text": "so this is the the last big idea in the",
    "start": "2361630",
    "end": "2366910"
  },
  {
    "text": "three things that Russ tries to cover so it's concurrency and Russell puts",
    "start": "2366910",
    "end": "2373000"
  },
  {
    "text": "concurrency in several ways so you have",
    "start": "2373000",
    "end": "2379190"
  },
  {
    "text": "various ways you can do concurrency Rusty's message-passing threads the",
    "start": "2379190",
    "end": "2385010"
  },
  {
    "text": "classic shared state and a bit of async",
    "start": "2385010",
    "end": "2390080"
  },
  {
    "text": "so we're gonna go through protists so with message passing so the the idea",
    "start": "2390080",
    "end": "2399170"
  },
  {
    "text": "here is very simple you have threads or arches that will communicate by sending",
    "start": "2399170",
    "end": "2406750"
  },
  {
    "text": "messages to each other so if you and this is basically based on the after",
    "start": "2406750",
    "end": "2413570"
  },
  {
    "text": "model if you're familiar with Elango or I think it's akka in scala so you kind",
    "start": "2413570",
    "end": "2424160"
  },
  {
    "text": "of have this concurrency model and the way it's implemented in rust is you have",
    "start": "2424160",
    "end": "2432010"
  },
  {
    "text": "essentially a communication channel it has a transmitting side and a receiving",
    "start": "2432010",
    "end": "2438860"
  },
  {
    "text": "side so these two pairs here and then in",
    "start": "2438860",
    "end": "2444890"
  },
  {
    "text": "this case we're just spawning a child thread giving it the transmitter side of this channel it's gonna do some work and",
    "start": "2444890",
    "end": "2452120"
  },
  {
    "text": "it's gonna send back the result and in the main thread we",
    "start": "2452120",
    "end": "2457700"
  },
  {
    "text": "just wait for this result and print this out and so this is a nice way where you",
    "start": "2457700",
    "end": "2463430"
  },
  {
    "text": "can do concurrency without actually having to share memory between the",
    "start": "2463430",
    "end": "2468620"
  },
  {
    "text": "different threads so this thing in",
    "start": "2468620",
    "end": "2474950"
  },
  {
    "text": "astana library is simply a multi multiple producer single consumer",
    "start": "2474950",
    "end": "2480770"
  },
  {
    "text": "Channel what it means is you can have multiple of the transmitters but only",
    "start": "2480770",
    "end": "2487520"
  },
  {
    "text": "one of the receivers so you can spawn as many threads here you want and just clone this guy and pass it to them and",
    "start": "2487520",
    "end": "2494390"
  },
  {
    "text": "then you can get the results as they come but also these are third-party",
    "start": "2494390",
    "end": "2501500"
  },
  {
    "text": "library that actually implements where you can have multiple producers and multiple consumers okay so the next",
    "start": "2501500",
    "end": "2511760"
  },
  {
    "text": "thing is thread so threading in in rust is a pretty similar to C and C++ so you",
    "start": "2511760",
    "end": "2521240"
  },
  {
    "text": "have OS thread so it's a one-to-one mapping there is no green threading or",
    "start": "2521240",
    "end": "2529820"
  },
  {
    "text": "light reading in in rust so here we are simply spawning at thread and then we",
    "start": "2529820",
    "end": "2538400"
  },
  {
    "text": "are passing in a closure so the double pipe thing is to just pass him a closure",
    "start": "2538400",
    "end": "2545000"
  },
  {
    "text": "to the to the thread and the closure will contain the actual computation to be done on the thread and then we just",
    "start": "2545000",
    "end": "2552910"
  },
  {
    "text": "here in the parent thread we wait for the child try to finish",
    "start": "2552910",
    "end": "2559330"
  },
  {
    "text": "then there's the shared state so here is where ideally Sh",
    "start": "2561019",
    "end": "2568759"
  },
  {
    "text": "sharing state is not a good way of drinkin currency because you have a risk of having a data corruption but it's",
    "start": "2568759",
    "end": "2577460"
  },
  {
    "text": "something that we actually use in watching programs or rust supports this but what it does is that it forces you",
    "start": "2577460",
    "end": "2583309"
  },
  {
    "text": "to have a locking discipline so you cannot change data unless you have the",
    "start": "2583309",
    "end": "2589039"
  },
  {
    "text": "lock and to illustrate this so remember I mentioned ACK the thing for doing",
    "start": "2589039",
    "end": "2596049"
  },
  {
    "text": "threads simply sharing data across threads and then you have a mutex o",
    "start": "2596049",
    "end": "2601789"
  },
  {
    "text": "which is simply gonna lock the variable",
    "start": "2601789",
    "end": "2607009"
  },
  {
    "text": "so in this case you have this is our initial value the mutex owns it and then",
    "start": "2607009",
    "end": "2612739"
  },
  {
    "text": "this music since it's gonna be shared across threads we wrap it around an atomic reference code and so here we we",
    "start": "2612739",
    "end": "2623869"
  },
  {
    "text": "have a clone of the reference counting so essentially in incrementing the ref",
    "start": "2623869",
    "end": "2629960"
  },
  {
    "text": "count we create a new thread and then we give it a closure here so there's this",
    "start": "2629960",
    "end": "2637599"
  },
  {
    "text": "keyword essentially moves in a move semantics so ideally it means that this",
    "start": "2637599",
    "end": "2643789"
  },
  {
    "text": "closure is gonna capture its environment so here the counter is gonna be moved",
    "start": "2643789",
    "end": "2648799"
  },
  {
    "text": "into into the thread and we have to do this for us to change the value we have",
    "start": "2648799",
    "end": "2654559"
  },
  {
    "text": "to actually lock so and this lock is where the mutex come so for you to access the value you need to first",
    "start": "2654559",
    "end": "2661819"
  },
  {
    "text": "acquire this lock and then now we can mutate the value inside the matrix and",
    "start": "2661819",
    "end": "2668630"
  },
  {
    "text": "this way to ensure that at any given one at any given time there is only one thread that can actually have access to",
    "start": "2668630",
    "end": "2676519"
  },
  {
    "text": "the to the shared data and then this is just similar to what we had seen earlier",
    "start": "2676519",
    "end": "2684910"
  },
  {
    "text": "okay so these I think in Rus is a relatively",
    "start": "2686170",
    "end": "2696380"
  },
  {
    "text": "new it's not yet stabilized is a lot of work on going to get this stabilized so",
    "start": "2696380",
    "end": "2707200"
  },
  {
    "text": "recently the communities are told on the actual syntax for this feature and it's",
    "start": "2707200",
    "end": "2715759"
  },
  {
    "text": "now being implemented in the in the language so this is actually one of the",
    "start": "2715759",
    "end": "2721880"
  },
  {
    "text": "places if you're interested in Rus and you wanted to do a bit of asynchronous stuff so at the moment it's still in the",
    "start": "2721880",
    "end": "2729559"
  },
  {
    "text": "works it might not be actually something that you can be able to do interest at least in stable roster at the moment",
    "start": "2729559",
    "end": "2736039"
  },
  {
    "text": "yeah and so yeah another Club for you",
    "start": "2736039",
    "end": "2741999"
  },
  {
    "text": "okay so we have covered more or less these",
    "start": "2741999",
    "end": "2747739"
  },
  {
    "text": "three goals that rust tries to solve but then I had talked about rusty empowering",
    "start": "2747739",
    "end": "2754819"
  },
  {
    "text": "us as developers and I would want to give example of how what makes you good",
    "start": "2754819",
    "end": "2763759"
  },
  {
    "text": "as a soft change in here so the first",
    "start": "2763759",
    "end": "2769819"
  },
  {
    "text": "thing is meta programming and this is kinda given if you work in higher-level",
    "start": "2769819",
    "end": "2778249"
  },
  {
    "text": "languages some of these languages have ways to express this but it's important note to note that Rus provides this",
    "start": "2778249",
    "end": "2784910"
  },
  {
    "text": "macro that hygienic macros so it's something that's not new again Rusty's likes boring from other languages this",
    "start": "2784910",
    "end": "2792079"
  },
  {
    "text": "is borrowed from racket and the idea is that you can write code like this so so",
    "start": "2792079",
    "end": "2802539"
  },
  {
    "text": "here we have this struct and",
    "start": "2802539",
    "end": "2807630"
  },
  {
    "text": "by simply annotating these traits over",
    "start": "2807630",
    "end": "2812789"
  },
  {
    "text": "here so simply saying they should have this behavior we are able to define our way to have civilization and its",
    "start": "2812789",
    "end": "2821940"
  },
  {
    "text": "relation into JSON so essentially you have this is a library that provides",
    "start": "2821940",
    "end": "2827089"
  },
  {
    "text": "these two implementations behaviors and you can as long as you have a struct you",
    "start": "2827089",
    "end": "2834900"
  },
  {
    "text": "can mark it as being serializable de serializable and from that you",
    "start": "2834900",
    "end": "2841009"
  },
  {
    "text": "essentially get you know a free way to do this realization it into JSON XML or",
    "start": "2841009",
    "end": "2849359"
  },
  {
    "text": "whatever and the key thing here is that this the way this has been implemented",
    "start": "2849359",
    "end": "2854729"
  },
  {
    "text": "is very generic so it works for any sort of struct and and the idea is that if",
    "start": "2854729",
    "end": "2863009"
  },
  {
    "text": "you have a behavior that is common to multiple things then you can just write",
    "start": "2863009",
    "end": "2868859"
  },
  {
    "text": "a debug macro and use it to generate code for all the specific types that you",
    "start": "2868859",
    "end": "2876989"
  },
  {
    "text": "have and essentially this means you don't have to duplicate stuff you don't have to write it same thing over and",
    "start": "2876989",
    "end": "2884099"
  },
  {
    "text": "over again it's the same it's also",
    "start": "2884099",
    "end": "2889140"
  },
  {
    "text": "similar to this macro here so this is just hiding all the stuff that needs to",
    "start": "2889140",
    "end": "2894839"
  },
  {
    "text": "be done for example getting STD out to actually be able to display this",
    "start": "2894839",
    "end": "2900229"
  },
  {
    "text": "standard out or if you're printing error or something then there's also really",
    "start": "2900229",
    "end": "2909119"
  },
  {
    "text": "good support for generics using traits so traits in rust is simply a way for",
    "start": "2909119",
    "end": "2918749"
  },
  {
    "text": "you to define behavior so and it's independent of a type so like in this",
    "start": "2918749",
    "end": "2926339"
  },
  {
    "text": "case we are saying that any type that implements this behavior should have",
    "start": "2926339",
    "end": "2934570"
  },
  {
    "text": "these methods and you can actually also be able to even define what are called",
    "start": "2934570",
    "end": "2940990"
  },
  {
    "text": "the default implementation so when you mark your type to be implementing this",
    "start": "2940990",
    "end": "2948520"
  },
  {
    "text": "you can have a different implementation and you don't have to like change it and if you want to change it you can sort of",
    "start": "2948520",
    "end": "2953950"
  },
  {
    "text": "override it and you can think this as being a way to actually do a bit of",
    "start": "2953950",
    "end": "2959400"
  },
  {
    "text": "object orientation where you have sort of basic traits that defines the default",
    "start": "2959400",
    "end": "2966940"
  },
  {
    "text": "and then if you want to specialize it on a certain type you can override it so",
    "start": "2966940",
    "end": "2975550"
  },
  {
    "text": "this is a a trait then here you this is",
    "start": "2975550",
    "end": "2981580"
  },
  {
    "text": "an idea of how you implement it so you simply say we're implementing this",
    "start": "2981580",
    "end": "2986620"
  },
  {
    "text": "straight for this is a strut somewhere and then you can just override one of",
    "start": "2986620",
    "end": "2992980"
  },
  {
    "text": "the method the main thing is that we just maintain the signature so like in",
    "start": "2992980",
    "end": "2998980"
  },
  {
    "text": "this case this is a code from a file",
    "start": "2998980",
    "end": "3005730"
  },
  {
    "text": "downloader so in when we get the headers we create a a progress bar based on the content",
    "start": "3005730",
    "end": "3013320"
  },
  {
    "text": "length and then if you now have something that's doing the actual work",
    "start": "3013320",
    "end": "3021300"
  },
  {
    "text": "and wants to say I have this interface that I can take anything as long as it does has this trait then it's very easy",
    "start": "3021300",
    "end": "3028890"
  },
  {
    "text": "to express that so you have this",
    "start": "3028890",
    "end": "3034910"
  },
  {
    "text": "structure here I will break it down so we simply have a vector of things that",
    "start": "3034910",
    "end": "3043980"
  },
  {
    "text": "implement this behavior and the ref cell here is to enable us to change them so",
    "start": "3043980",
    "end": "3049890"
  },
  {
    "text": "you have some each ability here and then it essentially means that as long as there is a type that can have this",
    "start": "3049890",
    "end": "3056310"
  },
  {
    "text": "behavior we can accept it into this struct and the idea here being",
    "start": "3056310",
    "end": "3062440"
  },
  {
    "text": "that so in this case we want to give events when we are doing a download and",
    "start": "3062440",
    "end": "3070360"
  },
  {
    "text": "how we do that is you would have so this is where we are using now our hooks",
    "start": "3070360",
    "end": "3079000"
  },
  {
    "text": "which was this vector and then we just",
    "start": "3079000",
    "end": "3084300"
  },
  {
    "text": "called the head and then we on headers and we pass in the data that we we got",
    "start": "3084300",
    "end": "3090850"
  },
  {
    "text": "from doing the read request and this allows me to write data in generic ways",
    "start": "3090850",
    "end": "3099460"
  },
  {
    "text": "so I can have a new type implement a trade and it will still work for this",
    "start": "3099460",
    "end": "3105340"
  },
  {
    "text": "and just to illustrate this father so",
    "start": "3105340",
    "end": "3113430"
  },
  {
    "text": "this is a simple example we have two",
    "start": "3113430",
    "end": "3119770"
  },
  {
    "text": "vectors of cities in Oslo and the population of them and we can do this",
    "start": "3119770",
    "end": "3128680"
  },
  {
    "text": "using so they the rust vector has a behavior of a char beta so we get this",
    "start": "3128680",
    "end": "3136120"
  },
  {
    "text": "for free and we can do things like this so make this Annihilator",
    "start": "3136120",
    "end": "3142690"
  },
  {
    "text": "zip it with the population and try to print out something so who can guess",
    "start": "3142690",
    "end": "3147840"
  },
  {
    "text": "what we get from this",
    "start": "3147840",
    "end": "3151560"
  },
  {
    "text": "so we have two vectors here we make one",
    "start": "3153800",
    "end": "3159150"
  },
  {
    "text": "on a fast on an iterator and we combine it with the second one and then we have",
    "start": "3159150",
    "end": "3164910"
  },
  {
    "text": "this last thing and we're gonna do for essentially for city population in this",
    "start": "3164910",
    "end": "3172050"
  },
  {
    "text": "matrix we cannot print out the population so any idea of what you get",
    "start": "3172050",
    "end": "3179070"
  },
  {
    "text": "when you do this",
    "start": "3179070",
    "end": "3182330"
  },
  {
    "text": "now so so this is gonna compute and essentially what do we get what do we",
    "start": "3186440",
    "end": "3191809"
  },
  {
    "text": "print out yeah mm-hmm someone else",
    "start": "3191809",
    "end": "3200619"
  },
  {
    "text": "yeah so population of Trondheim because here we combined and then we just get",
    "start": "3201140",
    "end": "3207050"
  },
  {
    "text": "the last the last thing yeah and it's important because this is stuff",
    "start": "3207050",
    "end": "3212360"
  },
  {
    "text": "that's you get interest and if you were to think about it just imagine you're writing C or C++ and you have to do a",
    "start": "3212360",
    "end": "3220700"
  },
  {
    "text": "similar thing so again you you gain these high level features for free and",
    "start": "3220700",
    "end": "3226610"
  },
  {
    "text": "you don't get penalized for them okay so",
    "start": "3226610",
    "end": "3232900"
  },
  {
    "text": "we also have some dev tooling that is",
    "start": "3232900",
    "end": "3237970"
  },
  {
    "text": "really good in rust so I'm going to just touch on a few so there is one called",
    "start": "3237970",
    "end": "3245380"
  },
  {
    "text": "rust Clippy so the idea is that it's gonna catch like common mistakes and try",
    "start": "3245380",
    "end": "3253340"
  },
  {
    "text": "to guide you to write better code so you can and it's very easy to integrate you",
    "start": "3253340",
    "end": "3260570"
  },
  {
    "text": "know with IDs I normally use vim and this works really well with vim and a",
    "start": "3260570",
    "end": "3266450"
  },
  {
    "text": "lot of other ideas that support rust and the idea here like you can get something",
    "start": "3266450",
    "end": "3274910"
  },
  {
    "text": "that tells you you're passing this argument by reference maybe you should pass it by value and this code will",
    "start": "3274910",
    "end": "3280790"
  },
  {
    "text": "compile it to not complain but it's sort of like telling you this is a better efficient way of doing things you have",
    "start": "3280790",
    "end": "3292060"
  },
  {
    "text": "to call Russ fix so and the idea here is",
    "start": "3292060",
    "end": "3297230"
  },
  {
    "text": "that it will help you migrate your code so recently there was the rust 20 18",
    "start": "3297230",
    "end": "3303140"
  },
  {
    "text": "edition so rust there was a stable release in 2015 and they made a breaking",
    "start": "3303140",
    "end": "3308300"
  },
  {
    "text": "change in 2018 so you have a newer edition of rust that is not really compatible with the old one and part of",
    "start": "3308300",
    "end": "3314720"
  },
  {
    "text": "the the thing they did is they provided tooling that you can just use to actually migrate your code over to the",
    "start": "3314720",
    "end": "3322250"
  },
  {
    "text": "new edition so an example here is this",
    "start": "3322250",
    "end": "3327380"
  },
  {
    "text": "is an anonymous field that was valid in the previous edition and then we can",
    "start": "3327380",
    "end": "3334160"
  },
  {
    "text": "just call this so cargo is the rust build tool and it'll automatically update your code to",
    "start": "3334160",
    "end": "3341400"
  },
  {
    "text": "look like this and this will work in the current edition and so this is kind of",
    "start": "3341400",
    "end": "3346710"
  },
  {
    "text": "nice if you have a really code a really huge code base and you want to do refactoring and you don't want to manually go and find all the various",
    "start": "3346710",
    "end": "3354450"
  },
  {
    "text": "places that you need to change so you have to link to help you with that and the last one is we have Russ format is",
    "start": "3354450",
    "end": "3364410"
  },
  {
    "text": "essentially again this is not new we copied it from God this go for much now",
    "start": "3364410",
    "end": "3371250"
  },
  {
    "text": "you have res forma to help you format your code make it easier to to do CI and",
    "start": "3371250",
    "end": "3377280"
  },
  {
    "text": "stuff like that and so that is just",
    "start": "3377280",
    "end": "3384230"
  },
  {
    "text": "auditioning some code formatting ok so I",
    "start": "3384230",
    "end": "3392690"
  },
  {
    "text": "really like this quote it's about what software engineering is and it's a quote",
    "start": "3392690",
    "end": "3400619"
  },
  {
    "text": "by Russ Cox is one of the main go developers and the the idea was that",
    "start": "3400619",
    "end": "3409520"
  },
  {
    "text": "programming is what happens when you know time creeps in and more people are startin tributing to to your project and",
    "start": "3409520",
    "end": "3417000"
  },
  {
    "text": "he talked about several things to paint",
    "start": "3417000",
    "end": "3422910"
  },
  {
    "text": "this picture so if you think about it if you have virtual control software so like get it",
    "start": "3422910",
    "end": "3430950"
  },
  {
    "text": "enables you to go back in time so today we we made a change it broke production",
    "start": "3430950",
    "end": "3437280"
  },
  {
    "text": "we can rewatch to yesterday and everything is okay you have cia's so continuous integration ensuring that any",
    "start": "3437280",
    "end": "3443550"
  },
  {
    "text": "future that you add in to your system does not break the system you have unit",
    "start": "3443550",
    "end": "3449160"
  },
  {
    "text": "testing that makes sure that our feature when it's implemented is not gonna be",
    "start": "3449160",
    "end": "3455160"
  },
  {
    "text": "broken sometime in the future right you have refactoring so what I was just",
    "start": "3455160",
    "end": "3462330"
  },
  {
    "text": "talking about you have an old way of doing things you have a new way so you're essentially moving you know from",
    "start": "3462330",
    "end": "3468990"
  },
  {
    "text": "the past to the present to the future you have design patterns so in the idea",
    "start": "3468990",
    "end": "3478109"
  },
  {
    "text": "of design pattern is that you want it to be easier for it for the future for the future you to like change things or like",
    "start": "3478109",
    "end": "3484080"
  },
  {
    "text": "adapt things or good I was killed the the code base and I think these are",
    "start": "3484080",
    "end": "3490500"
  },
  {
    "text": "important ideas and I wanted to just showcase how rust makes it a bit easier",
    "start": "3490500",
    "end": "3498330"
  },
  {
    "text": "for you to do I already talked about refactoring we have essentially if you",
    "start": "3498330",
    "end": "3504900"
  },
  {
    "text": "want to write a test in rust it is as simple as just annotating a function",
    "start": "3504900",
    "end": "3514190"
  },
  {
    "text": "being a test and it will the the builder will run this other test so this is",
    "start": "3514190",
    "end": "3522359"
  },
  {
    "text": "someone talking about refactoring I'm",
    "start": "3522359",
    "end": "3527550"
  },
  {
    "text": "not nitpicking here but so he says it made it easier for him to do",
    "start": "3527550",
    "end": "3534000"
  },
  {
    "text": "multi-threading in a way that he couldn't have done using C and C++",
    "start": "3534000",
    "end": "3539930"
  },
  {
    "text": "then I'd talked about you know having",
    "start": "3542760",
    "end": "3550710"
  },
  {
    "text": "being able to refactor your code so this is the last 2015 you have Rus 2018 and",
    "start": "3551700",
    "end": "3559110"
  },
  {
    "text": "we are able to like you know migrate your code to the to the new edition and",
    "start": "3559110",
    "end": "3565840"
  },
  {
    "text": "also something called that Russ does is for example if I'm writing Russ now I'm",
    "start": "3565840",
    "end": "3571240"
  },
  {
    "text": "writing in the newest addition but I can have a dependency that was written around four five years ago it's table he",
    "start": "3571240",
    "end": "3577090"
  },
  {
    "text": "doesn't change so it means it's essentially in this old edition and Russ",
    "start": "3577090",
    "end": "3583000"
  },
  {
    "text": "will actually compile my code so it will use the old Edition to compile this",
    "start": "3583000",
    "end": "3590230"
  },
  {
    "text": "library that I value I own and use the new edition to compile my code and so it guarantees that even as rust grows if",
    "start": "3590230",
    "end": "3598570"
  },
  {
    "text": "you have dependencies that you know you don't like to control them then they",
    "start": "3598570",
    "end": "3603580"
  },
  {
    "text": "will not break because the language changed and you know if you if you do",
    "start": "3603580",
    "end": "3610450"
  },
  {
    "text": "Python like me you understand sometimes you have this where your dependencies",
    "start": "3610450",
    "end": "3616150"
  },
  {
    "text": "are like all over the place and it's really nice to harbor two that tries to",
    "start": "3616150",
    "end": "3623230"
  },
  {
    "text": "solve this in rust and essentially the user assembler so you have semantic versioning to so make sure that things",
    "start": "3623230",
    "end": "3630880"
  },
  {
    "text": "don't break and if they break you've actually done it using this the matching",
    "start": "3630880",
    "end": "3636340"
  },
  {
    "text": "question by changing a major you know moving up to a major version yeah then",
    "start": "3636340",
    "end": "3646440"
  },
  {
    "text": "we also have a community repository so",
    "start": "3646440",
    "end": "3652720"
  },
  {
    "text": "essentially if you have a library and you want to share you can simply upload",
    "start": "3652720",
    "end": "3660820"
  },
  {
    "text": "it to create i/o and then everyone has it and also it's a nice way for people to like discover what has been built it can",
    "start": "3660820",
    "end": "3668320"
  },
  {
    "text": "show you you know how how a crate has been downloaded who is using it and that",
    "start": "3668320",
    "end": "3674290"
  },
  {
    "text": "way if you're looking something it's easy to know if it's",
    "start": "3674290",
    "end": "3679510"
  },
  {
    "text": "people using it what is the state and and also you have only one place you can come in like I'll find whatever you want",
    "start": "3679510",
    "end": "3686230"
  },
  {
    "text": "in the rust ecosystem so yeah so another",
    "start": "3686230",
    "end": "3691810"
  },
  {
    "text": "crock for you so I realize I'm a bit out",
    "start": "3691810",
    "end": "3697870"
  },
  {
    "text": "of time but I'll try cover a bit more so you forgive me for being a bit first but",
    "start": "3697870",
    "end": "3705190"
  },
  {
    "text": "if you're interested in using rust for trying out a project or integrating it",
    "start": "3705190",
    "end": "3712900"
  },
  {
    "text": "with what you have there is a list of companies that are actually are using",
    "start": "3712900",
    "end": "3718720"
  },
  {
    "text": "rust in production so and you have people building storage engines databases web servers and stuff like",
    "start": "3718720",
    "end": "3726940"
  },
  {
    "text": "this a lot of things being done and this is a place where you can go and actually see the companies that I using rust and",
    "start": "3726940",
    "end": "3733750"
  },
  {
    "text": "what they are actually using it for yeah so I work for snips and what we do is",
    "start": "3733750",
    "end": "3743490"
  },
  {
    "text": "essentially have rust for embedded development and it has worked really",
    "start": "3743490",
    "end": "3750820"
  },
  {
    "text": "great for us I'd mentioned about last",
    "start": "3750820",
    "end": "3756550"
  },
  {
    "text": "thing I wanted to talk about was community so Russ is kinda all over the",
    "start": "3756550",
    "end": "3764530"
  },
  {
    "text": "place this is a map of people who have talked about to our rust on Twitter there are a lot of if you look around",
    "start": "3764530",
    "end": "3772480"
  },
  {
    "text": "you kind of find probably I'm a meet-up that's close to you and I find it it's easier if you're trying to get into rust",
    "start": "3772480",
    "end": "3778330"
  },
  {
    "text": "to actually join a meetup group people are friendly and they can like help you",
    "start": "3778330",
    "end": "3783340"
  },
  {
    "text": "and you also have a sense of community and there's there are also like conferences coming up people doing",
    "start": "3783340",
    "end": "3790000"
  },
  {
    "text": "conferences or I think here in Europe in the States and also in Asia and then so lastly if you want",
    "start": "3790000",
    "end": "3800970"
  },
  {
    "text": "to you don't know where to start that is the the home page of rust it has",
    "start": "3800970",
    "end": "3809100"
  },
  {
    "text": "a lot of the documentation how to start learning and also you know the people",
    "start": "3809100",
    "end": "3816330"
  },
  {
    "text": "who are using rust and all that good stuff so and thank you",
    "start": "3816330",
    "end": "3822660"
  },
  {
    "text": "[Applause]",
    "start": "3822660",
    "end": "3830589"
  }
]