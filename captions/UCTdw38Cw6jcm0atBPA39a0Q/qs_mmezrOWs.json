[
  {
    "text": "all righty it's a time to start I think so um this talk is called building",
    "start": "299",
    "end": "7620"
  },
  {
    "text": "confidence in concurrent code using a model Checker AKA TLA Plus for",
    "start": "7620",
    "end": "12719"
  },
  {
    "text": "programmers it's a bit of a mouthful hopefully by the end of the talk um you will see what I'm talking about",
    "start": "12719",
    "end": "18720"
  },
  {
    "text": "now um I'm Scott volocian you probably know me from my functional programming talks and also from my domain modeling",
    "start": "18720",
    "end": "25260"
  },
  {
    "text": "talks this is nothing to do with that this is all about having confidence how you test",
    "start": "25260",
    "end": "31140"
  },
  {
    "text": "your codes it's not testing code but how do you have confidence in your designs",
    "start": "31140",
    "end": "36540"
  },
  {
    "text": "so I actually I'm going to ask you in a minute about confidence I'm going to be testing your ability to look at code and",
    "start": "36540",
    "end": "42899"
  },
  {
    "text": "see whether it's right or not so there is a poll I'll show this link later on but hopefully you had a chance to look",
    "start": "42899",
    "end": "48719"
  },
  {
    "text": "at it but I will show a big version in in a few minutes it's bitly slash TLA",
    "start": "48719",
    "end": "53760"
  },
  {
    "text": "poll 2023. right okay so why am I focusing on",
    "start": "53760",
    "end": "59879"
  },
  {
    "text": "concurrent code in particular that's because there's two groups of people there's people who write",
    "start": "59879",
    "end": "65040"
  },
  {
    "text": "concurrent covered and people have had painful bugs and can count code and of course this is actually a perfect circle",
    "start": "65040",
    "end": "70140"
  },
  {
    "text": "because concurrent code is horrible anyone's actually done anything with the comica it's like it's really nasty stuff",
    "start": "70140",
    "end": "77100"
  },
  {
    "text": "so um this talk is really about confidence right how do you increase your",
    "start": "77100",
    "end": "82680"
  },
  {
    "text": "confidence in your code and what tools can you use to increase your confidence",
    "start": "82680",
    "end": "87900"
  },
  {
    "text": "right so there's a toolbox of tools that we use I mean a classic one is to do code review or code inspection right I",
    "start": "87900",
    "end": "93900"
  },
  {
    "text": "look at your code it's nice to get another pair of eyeballs on your code make sure it's looking good I really like static typing that eliminates a lot",
    "start": "93900",
    "end": "100500"
  },
  {
    "text": "of stuff at compile time it's kind of like compile time unit tests really nice I'm also a big fan of property based",
    "start": "100500",
    "end": "107400"
  },
  {
    "text": "testing that's a great way to increase your confidence in the code things like tdd all the classic techniques you know",
    "start": "107400",
    "end": "113040"
  },
  {
    "text": "it's all about increasing the confidence in your code and this talk is about this thing called",
    "start": "113040",
    "end": "118259"
  },
  {
    "text": "Model checking which is probably for most of you a brand new concept so that's what this talk is about a whole new tool to add to",
    "start": "118259",
    "end": "125520"
  },
  {
    "text": "your toolbox now what I mean by model checking well what's a model so a model is a tool for",
    "start": "125520",
    "end": "132180"
  },
  {
    "text": "thinking so before I spend a lot of money building a building for example I make make a model of the building and I",
    "start": "132180",
    "end": "138900"
  },
  {
    "text": "can use the model to make sure I'm happy with it the way it looks and I haven't kind of forgotten anything I can show it other people and get feedback",
    "start": "138900",
    "end": "144840"
  },
  {
    "text": "so models are a way to make sure that you're doing the right thing before you spend a lot of money building the massive building right",
    "start": "144840",
    "end": "152160"
  },
  {
    "text": "so it's just a way of making sure stuff makes sense before you do more something which is much more expensive",
    "start": "152160",
    "end": "158280"
  },
  {
    "text": "so model checking that I'm talking about is again you create a model of your code you don't actually write the code you",
    "start": "158280",
    "end": "164280"
  },
  {
    "text": "create a model of the code before you do it and then you check the model and the kinds of things you check are all the",
    "start": "164280",
    "end": "170459"
  },
  {
    "text": "constraints met you know does anything weird happen when you check the model especially if you're doing concurrent",
    "start": "170459",
    "end": "176340"
  },
  {
    "text": "code you know does it deadlock does it ever finish does it reach a state that you expect to reach all that kind of",
    "start": "176340",
    "end": "181920"
  },
  {
    "text": "stuff so we're checking the model before we even write the real code so this is part of formal methods",
    "start": "181920",
    "end": "188040"
  },
  {
    "text": "four methods it's kind of mathematical approach to to code quality this is",
    "start": "188040",
    "end": "193440"
  },
  {
    "text": "actually the very easy one this is like the simplest intro to all this stuff so there's a couple of model Checkers you",
    "start": "193440",
    "end": "198720"
  },
  {
    "text": "can use there's actually a whole bunch of them but the two most popular ones is something called TLA plus which is actually a whole",
    "start": "198720",
    "end": "204180"
  },
  {
    "text": "system and TLC is the actual model Checker within and I'm not even going to get",
    "start": "204180",
    "end": "209580"
  },
  {
    "text": "into all the other stuff in Taylor plus I'm just going to focus this in one thing and it focuses really on temporal property something to do with time okay",
    "start": "209580",
    "end": "215940"
  },
  {
    "text": "so it's great for doing concurrent systems now there's another one which is quite public called alloy and that's",
    "start": "215940",
    "end": "221819"
  },
  {
    "text": "much better on kind of relational logic and and relationship between structures and so on so that's also very good but",
    "start": "221819",
    "end": "227819"
  },
  {
    "text": "in this talk I'm going to be focusing on TLA because of the the benefit it has in",
    "start": "227819",
    "end": "233580"
  },
  {
    "text": "modeling concurrent systems okay so at the end of this talk he'll know something about TLA Plus",
    "start": "233580",
    "end": "240720"
  },
  {
    "text": "so this is what TLA Plus Code looks like and you know it looks weird right I mean",
    "start": "240720",
    "end": "247799"
  },
  {
    "text": "this is the weirdest looking programmer language that you know I've ever seen when I first saw this this is a strange",
    "start": "247799",
    "end": "252840"
  },
  {
    "text": "program language well the reason it's a strange programming is because it's not a programming language right it's not a",
    "start": "252840",
    "end": "258419"
  },
  {
    "text": "program it's a modeling language it's a DSL for modeling States and time",
    "start": "258419",
    "end": "264660"
  },
  {
    "text": "so you might look at this and think this is kind of weird but hopefully by the end of this talk you'll be able to look",
    "start": "264660",
    "end": "269820"
  },
  {
    "text": "at this and not think it's weird so that's the goal of this talk now obviously in one talk you can't really",
    "start": "269820",
    "end": "276240"
  },
  {
    "text": "become an expert just like in any programming language you can't you know learn it in a few in an hour but if the",
    "start": "276240",
    "end": "281759"
  },
  {
    "text": "point of this talk is demystify this to just take some of the uh the the fear",
    "start": "281759",
    "end": "286919"
  },
  {
    "text": "around using a tool like this and so it's actually not that hard to use and it's worth spending a bit of time",
    "start": "286919",
    "end": "292560"
  },
  {
    "text": "learning so let's do some first live poll here is the live poll I'm going to use and let",
    "start": "292560",
    "end": "298440"
  },
  {
    "text": "me get this started right",
    "start": "298440",
    "end": "305720"
  },
  {
    "text": "so the first hopefully everyone has got this up now it's bitly TLA poll 2023 or",
    "start": "305820",
    "end": "313080"
  },
  {
    "text": "there's the big QR code here business and I will show this again later on if you didn't quite get it but",
    "start": "313080",
    "end": "320160"
  },
  {
    "text": "let's just see what the results are 100 of people can see this poll excellent nobody said no that was very",
    "start": "320160",
    "end": "326820"
  },
  {
    "text": "nice okay so this poll seems to be working pretty well okay good oh some people say no",
    "start": "326820",
    "end": "335160"
  },
  {
    "text": "some people are just mean okay or they don't know how to use the internet right okay so some people are",
    "start": "335160",
    "end": "343080"
  },
  {
    "text": "not going to be very good here okay so okay that's the poll right so I'm going to be asking you",
    "start": "343080",
    "end": "348840"
  },
  {
    "text": "later on some more serious questions so the talk this talk is basically going to start about I'm going to have some stuff",
    "start": "348840",
    "end": "354479"
  },
  {
    "text": "about confidence and then I'm going to introduce TLA plus I'm going to show you all that syntax and and show you there's",
    "start": "354479",
    "end": "359520"
  },
  {
    "text": "not as weird as it looks and then I'm going to want through three examples first of all I'm going to do a really really simple model which is counting to",
    "start": "359520",
    "end": "366419"
  },
  {
    "text": "three hopefully that will be pretty simple then I'll actually do a very classic",
    "start": "366419",
    "end": "371639"
  },
  {
    "text": "producer consumer model where they talk to each other through a queue and then I'll actually do something which is kind",
    "start": "371639",
    "end": "377880"
  },
  {
    "text": "of relevant to what we actually do which is maybe a zero downtime deployment so we're in charge of deploying some servers",
    "start": "377880",
    "end": "384060"
  },
  {
    "text": "and you want to make sure you have a zero downtime what algorithm should you use to do that and if you mess it up",
    "start": "384060",
    "end": "389819"
  },
  {
    "text": "you're going to have down time so it's kind of important okay so let's start with confidence",
    "start": "389819",
    "end": "395580"
  },
  {
    "text": "so I'm going to show you a non-concurrent algorithm this is just a regular old sort algorithm to sort a",
    "start": "395580",
    "end": "401100"
  },
  {
    "text": "list this is the algorithm that we're going to use if the list is empty or has one element it's sorted we're done",
    "start": "401100",
    "end": "406979"
  },
  {
    "text": "otherwise we take the first element which I'm calling the pivot and I'm dividing the rest of the list into two",
    "start": "406979",
    "end": "412080"
  },
  {
    "text": "piles one smaller than the pivot one is bigger than the pivot and then I take these two piles and I sort them using",
    "start": "412080",
    "end": "418199"
  },
  {
    "text": "the same algorithm and then I combine the whole thing and I put the sorted smaller list and then I have my Pivot",
    "start": "418199",
    "end": "423600"
  },
  {
    "text": "and then I have the bigger sorted list okay so that's how I'm going to sort a list okay",
    "start": "423600",
    "end": "429240"
  },
  {
    "text": "so do you have confidence that this algorithm is correct not not in implementation",
    "start": "429240",
    "end": "435479"
  },
  {
    "text": "but this algorithm is this is this a correct if I if I then write this code am I going to is it going to work okay",
    "start": "435479",
    "end": "441360"
  },
  {
    "text": "that's my my check for you so that's my first poll question",
    "start": "441360",
    "end": "447599"
  },
  {
    "text": "what is the confidence in the design of this algorithm it's basically a quick",
    "start": "447599",
    "end": "453599"
  },
  {
    "text": "sort kind of Outlet it's not really a quick saw but it's you know a cursive sorting algorithm hopefully you've seen this kind of thing",
    "start": "453599",
    "end": "459900"
  },
  {
    "text": "before now you should have 100 confidence one way or the other whether it works",
    "start": "459900",
    "end": "466020"
  },
  {
    "text": "because the code's right in front of you and it's only you know 10 lines of code",
    "start": "466020",
    "end": "471479"
  },
  {
    "text": "so if you don't all have 100 confidence I'm going to be very upset and we have a mixture between people who",
    "start": "471479",
    "end": "479340"
  },
  {
    "text": "are confident people who are not confident and people aren't confident either way and uh this is very interesting so",
    "start": "479340",
    "end": "486960"
  },
  {
    "text": "the people who are not who are not confident either way what could I do to make you more",
    "start": "486960",
    "end": "493500"
  },
  {
    "text": "confident right what kinds of things could I do and if you thought it wasn't confidence",
    "start": "493500",
    "end": "499080"
  },
  {
    "text": "if you if you thought it wasn't correct what could I do to prove that it was correct or if it was correct what could",
    "start": "499080",
    "end": "504360"
  },
  {
    "text": "I do to prove that it wasn't correct okay so the fact that it's not 100 in this room you know it's typical it's typical",
    "start": "504360",
    "end": "510539"
  },
  {
    "text": "people are not very confident about their code so actually that's actually that's Azure",
    "start": "510539",
    "end": "516779"
  },
  {
    "text": "bug so all of the people who said this was right you're not right there's a bug here",
    "start": "516779",
    "end": "522000"
  },
  {
    "text": "and the bug is actually should be I had strictly less than strictly greater than they should be greater or equal less",
    "start": "522000",
    "end": "528839"
  },
  {
    "text": "than equal because I'm throwing away duplicate pivots so there's a little bug which you didn't catch so how would you",
    "start": "528839",
    "end": "536339"
  },
  {
    "text": "catch the bug like that well one thing is code of view I mean I could go in and say so you forgot to do the you know",
    "start": "536339",
    "end": "542160"
  },
  {
    "text": "the less than uh you made it too strict another way is to do an implementation I you know I write this code in python or",
    "start": "542160",
    "end": "548040"
  },
  {
    "text": "JavaScript or something I test it I'm a big fan of using property based tests because that would catch it pretty",
    "start": "548040",
    "end": "553320"
  },
  {
    "text": "straight away I'm pretty sure rather than just unit tests you might not catch it because you might forget to put duplicates in but a property-based test",
    "start": "553320",
    "end": "559019"
  },
  {
    "text": "will pull it capture straight away or you could actually prove it using a mathematical proof resistant which nobody no programmer would ever do that",
    "start": "559019",
    "end": "565980"
  },
  {
    "text": "as far as I know so personally I'd use a combination of both I'd have somebody else eyeball it",
    "start": "565980",
    "end": "572459"
  },
  {
    "text": "make sure they're happy and they're not pulling right some probably based tests and if you want to know what probably based tests are I have a whole talk",
    "start": "572459",
    "end": "578700"
  },
  {
    "text": "about that if you go to F sharp 100 profit PBT and I'll have that link up later on as well",
    "start": "578700",
    "end": "584940"
  },
  {
    "text": "now that was that was a a non-concurrent algorithm and we still had a big",
    "start": "584940",
    "end": "590820"
  },
  {
    "text": "difference now let's talk about the currency how confident are you when concurrency is involved",
    "start": "590820",
    "end": "597060"
  },
  {
    "text": "all right so I'm going to give you a concurrent thing so this is a very simple producer consumer system we have",
    "start": "597060",
    "end": "603060"
  },
  {
    "text": "a queue and we have a producer that writes the queue and the producer logic is I'm going to see if the queue is not",
    "start": "603060",
    "end": "609480"
  },
  {
    "text": "full and if it's not full then I can write to it but if it's full I don't want to you know it's a bounded queue",
    "start": "609480",
    "end": "616500"
  },
  {
    "text": "and then we have a consumer that's reading from the queue and they're going to say well if the queue is not empty then I can read from it but if it is",
    "start": "616500",
    "end": "622800"
  },
  {
    "text": "empty I'm just going to wait and they could just kind of loop around the producers and consumers are going to be looping around okay so that's the system",
    "start": "622800",
    "end": "630120"
  },
  {
    "text": "okay so here's the complete spec we have a bounded queue we have a producer and a consumer and it's really",
    "start": "630120",
    "end": "636779"
  },
  {
    "text": "important that we never read from an empty queue or write to a full code we don't underflow our overflow and let's",
    "start": "636779",
    "end": "642000"
  },
  {
    "text": "say the whole system is going to crash and bring down Azure for example so here's the spec and here is the",
    "start": "642000",
    "end": "649680"
  },
  {
    "text": "consumer specs so again the algorithm is really simple I mean it's actually simpler than the sort algorithm",
    "start": "649680",
    "end": "655380"
  },
  {
    "text": "who thinks this is a correct design foreign",
    "start": "655380",
    "end": "660899"
  },
  {
    "text": "there's one purchaser and one consumer yeah and it's a trap it's a trick question",
    "start": "660899",
    "end": "666420"
  },
  {
    "text": "it's always a trick question when it's concurrency right so try that poll and",
    "start": "666420",
    "end": "671579"
  },
  {
    "text": "tell me if you think this is a correct yeah so for one producer one consumer and later",
    "start": "671579",
    "end": "676680"
  },
  {
    "text": "on we'll talk about more than one and more than two but for one producer one consumer is this the correct algorithm",
    "start": "676680",
    "end": "682680"
  },
  {
    "text": "to use let's see what people say here oh okay",
    "start": "682680",
    "end": "690959"
  },
  {
    "text": "we have a big difference of opinion here and what's interesting is that most",
    "start": "690959",
    "end": "696480"
  },
  {
    "text": "people are not confident now how this is really simple I mean how much simpler could you get",
    "start": "696480",
    "end": "702420"
  },
  {
    "text": "you just got you know there's like two lines of two or three lines of code for the producer two three lines of code for the consumer they're both running at the",
    "start": "702420",
    "end": "708720"
  },
  {
    "text": "same time and nobody's confident that this code works like a whole bunch of people know",
    "start": "708720",
    "end": "714779"
  },
  {
    "text": "and the people who you know there's a big split between the correct people and the incorrect people",
    "start": "714779",
    "end": "719880"
  },
  {
    "text": "so who's right and who's wrong and there are people who are not confident how could I persuade you you know I mean",
    "start": "719880",
    "end": "727140"
  },
  {
    "text": "I'd say let's say I say this is absolutely right I'm really confident this is why how would I persuade you that I was you know that I was right",
    "start": "727140",
    "end": "733079"
  },
  {
    "text": "I mean you don't want to run it in production because you might not show up in production",
    "start": "733079",
    "end": "738120"
  },
  {
    "text": "so we're gonna revisit this one in a minute and um",
    "start": "738120",
    "end": "743279"
  },
  {
    "text": "will actually model it in TLA and we'll actually get an answer so like I say if you vote I'm not sure",
    "start": "743279",
    "end": "748560"
  },
  {
    "text": "how would I persuade you now let's change it up and have two",
    "start": "748560",
    "end": "753720"
  },
  {
    "text": "producers and two consumers so with one producer and one consumer and we'll go to the next poll question now",
    "start": "753720",
    "end": "761839"
  },
  {
    "text": "um with with one producer one consumer it was 50 50 splits between correct and",
    "start": "762240",
    "end": "767880"
  },
  {
    "text": "Incorrect and there's a whole bunch of people who weren't sure and now we've changed it to two so it",
    "start": "767880",
    "end": "772920"
  },
  {
    "text": "has people's opinion changed let's see",
    "start": "772920",
    "end": "778880"
  },
  {
    "text": "ah a lot of people are confident that it's not correct okay so anytime there's more",
    "start": "779220",
    "end": "784980"
  },
  {
    "text": "than one thing you know that's not gonna work okay and there are a lot of there are quite a few people who are not confident either way but people it's",
    "start": "784980",
    "end": "792240"
  },
  {
    "text": "it's people are very suspicious like I don't think this is going to work because it's somehow it's multi-user and there's concurrency and it's like I just",
    "start": "792240",
    "end": "798360"
  },
  {
    "text": "know it's not going to work right so people are scared people are scared of concurrent systems",
    "start": "798360",
    "end": "804899"
  },
  {
    "text": "especially when there's a lot of stuff going on Okay so",
    "start": "804899",
    "end": "811560"
  },
  {
    "text": "um people who are not sure how could I persuade you that it didn't work or did",
    "start": "811560",
    "end": "816839"
  },
  {
    "text": "work now the people who thought it didn't work this is the big thing so I say I'll have a fix for it",
    "start": "816839",
    "end": "822360"
  },
  {
    "text": "I'm going to use automatic Atomic operations I'm going to use semaphores I'm going to use a lock I'm going to use whatever right",
    "start": "822360",
    "end": "829260"
  },
  {
    "text": "and I present to you my fix for this problem how how would I persuade you that my fix",
    "start": "829260",
    "end": "835320"
  },
  {
    "text": "was correct would you just say I never trust it you know I'm just like never going to believe it's going to work what",
    "start": "835320",
    "end": "840660"
  },
  {
    "text": "can I do to give you confidence and say yeah actually you're fixed I'm pretty sure that I'm really confident that your fix is going to work and we can deploy",
    "start": "840660",
    "end": "846300"
  },
  {
    "text": "this to production what would I have to tell you okay so it's hard being being confident",
    "start": "846300",
    "end": "852839"
  },
  {
    "text": "in consistency is a really hard problem now the tools that we normally use don't",
    "start": "852839",
    "end": "857880"
  },
  {
    "text": "work so if I do code review and inspection I mean you're looking at the code we have a whole bunch of people looking at the code",
    "start": "857880",
    "end": "864180"
  },
  {
    "text": "I don't think our human brains are very good and currency our intuition is just rubbish so that's not going to work if I",
    "start": "864180",
    "end": "871260"
  },
  {
    "text": "create an implementation and then test it that's not very good either because a lot of subtle concurrency errors don't",
    "start": "871260",
    "end": "876480"
  },
  {
    "text": "show up in testing and they don't show up in development they show up in production when you have millions of",
    "start": "876480",
    "end": "881579"
  },
  {
    "text": "things and there's a very high load and it always happens on the worst day of the year you know so just running it is",
    "start": "881579",
    "end": "887160"
  },
  {
    "text": "not a very good way of doing either so the answer is to use a mathematical proof assistant tool but that's too much",
    "start": "887160",
    "end": "893899"
  },
  {
    "text": "mathematics we're going to use a model Checker that's what we're going to do so I'm going to revisit this problem",
    "start": "893899",
    "end": "900060"
  },
  {
    "text": "again with the model Checker and we'll see for ourselves whether it works so time to talk about TLA plus this is the",
    "start": "900060",
    "end": "906300"
  },
  {
    "text": "tool we're going to use to model this and um again I'm going to whiz through",
    "start": "906300",
    "end": "911459"
  },
  {
    "text": "this very quickly it's a very short I mean it's a you know it's a quick talk but hopefully it's going to just demystify it you don't have to worry",
    "start": "911459",
    "end": "917699"
  },
  {
    "text": "about the syntax too much and stand back because I'm actually going to use mathematics so be careful",
    "start": "917699",
    "end": "923279"
  },
  {
    "text": "and that's because it's not a programming language it's mathematical based model",
    "start": "923279",
    "end": "929220"
  },
  {
    "text": "so TLA plus was designed by Leslie Lambert who you might have heard of he had a famous time and clocks paper in",
    "start": "929220",
    "end": "934920"
  },
  {
    "text": "distributive programming he invented the practice alcohol he's a touring Award winner and relevant to this he is the",
    "start": "934920",
    "end": "942120"
  },
  {
    "text": "initial developer of latex here he is a picture and the reason why that's important is because TLA plus is",
    "start": "942120",
    "end": "949680"
  },
  {
    "text": "uses latex kind of syntax it's designed to be formatted by latex into papers",
    "start": "949680",
    "end": "955260"
  },
  {
    "text": "computer science papers it's not designed to be a program language which is why it kind of looks weird so if you know latex the syntax will be fine but",
    "start": "955260",
    "end": "961740"
  },
  {
    "text": "if you don't know latex it won't so what does TLA plus stand for it stands",
    "start": "961740",
    "end": "966779"
  },
  {
    "text": "for temporal logic of actions Plus all right what does that mean",
    "start": "966779",
    "end": "972480"
  },
  {
    "text": "logic so logic is something to do with booleans hopefully you know how to use booleans so that's good temporal has something to",
    "start": "972480",
    "end": "979199"
  },
  {
    "text": "do with time and actions in this thing is going to be transitions in a state machine",
    "start": "979199",
    "end": "985380"
  },
  {
    "text": "so as you move from one state to another that is an action or a transition so TLA actually stands for Boolean logic of",
    "start": "985380",
    "end": "991680"
  },
  {
    "text": "State transitions over time now that's that's a little bit less scary and we're going to kind of dive into that in a",
    "start": "991680",
    "end": "996779"
  },
  {
    "text": "minute and then there's some other stuff which we'll talk about later on so let's look at the logic of the in TLA",
    "start": "996779",
    "end": "1005060"
  },
  {
    "text": "so Boolean logic is what it is and um it's and or not hopefully you all know how that works",
    "start": "1005060",
    "end": "1011180"
  },
  {
    "text": "the big thing about TLA is the way that they do booleans is the mathematical way so in in maths",
    "start": "1011180",
    "end": "1018259"
  },
  {
    "text": "you have a kind of kind of uppercase a there's an and and a kind of upside down a is a is an or and that's what TLA plus",
    "start": "1018259",
    "end": "1024620"
  },
  {
    "text": "it uses forward slash and backslash so if you look at the code you'll see these forward slashes and backslashes everywhere",
    "start": "1024620",
    "end": "1029660"
  },
  {
    "text": "and all that is is and and or programming we use like ampersands and vertical bars and stuff TLA plus does",
    "start": "1029660",
    "end": "1036918"
  },
  {
    "text": "not use that but it's the same exactly the same concept so hopefully you already know how to do that",
    "start": "1036919",
    "end": "1041959"
  },
  {
    "text": "and then another big concept is something called a predicate so predicate is just a expression and",
    "start": "1041959",
    "end": "1048020"
  },
  {
    "text": "returns a Boolean as always right so in the programming language I might say here's a function with a b and c and",
    "start": "1048020",
    "end": "1054080"
  },
  {
    "text": "it's a and b or a and not C right so the whole thing returns a Boolean and you",
    "start": "1054080",
    "end": "1059480"
  },
  {
    "text": "just run it and each time you get a different result but it's a Boolean that's a predicate okay so TLA I'd write",
    "start": "1059480",
    "end": "1065480"
  },
  {
    "text": "the same thing in TLA like this I'd say A and B that's the kind of a the letter A or which is the upside down a and then",
    "start": "1065480",
    "end": "1074419"
  },
  {
    "text": "um a and not C so that's how you'd write the same kind of piece of code in TLA so",
    "start": "1074419",
    "end": "1079880"
  },
  {
    "text": "there you go that's hopefully it's instantly a little less scary just knowing what those all those forward slashes and backslashes mean",
    "start": "1079880",
    "end": "1087320"
  },
  {
    "text": "Now actions so State transitions so you're probably familiar with State",
    "start": "1087320",
    "end": "1092600"
  },
  {
    "text": "machines but basically you have a bunch of states and you have a bunch of Transitions and that's how you model",
    "start": "1092600",
    "end": "1097760"
  },
  {
    "text": "um things it's a really nice tool it's nothing I mean I use it for domain modeling as well so here we can go from A to B we can go from B to a we can go",
    "start": "1097760",
    "end": "1104480"
  },
  {
    "text": "from B to C but we can't go back from C to B and this model kind of captures",
    "start": "1104480",
    "end": "1110120"
  },
  {
    "text": "that information very nice so you know if you're modeling a chess game you can model all this stuff people take turns",
    "start": "1110120",
    "end": "1116240"
  },
  {
    "text": "but what's nice you can see straight away from this diagram that when when somebody goes to the game over State you",
    "start": "1116240",
    "end": "1122240"
  },
  {
    "text": "can't go back to playing the game I mean it's immediately obvious that transition is not available right",
    "start": "1122240",
    "end": "1128419"
  },
  {
    "text": "here's something for like a delivery of FedEx or something again you can see that once it's delivered",
    "start": "1128419",
    "end": "1134000"
  },
  {
    "text": "you can't undeliver it you can go back and forth in various other ways but you know",
    "start": "1134000",
    "end": "1139460"
  },
  {
    "text": "um that is this design does not cover that situation so let's look at the transition in TLA so in TLA there's",
    "start": "1139460",
    "end": "1146840"
  },
  {
    "text": "always a before State and an after state right so in this case the state before is hello and the state after is goodbye",
    "start": "1146840",
    "end": "1153860"
  },
  {
    "text": "so until a we would say State equals hello and then State tick",
    "start": "1153860",
    "end": "1159919"
  },
  {
    "text": "equals goodbye now every time you see the tick or the prime of mathematical jargon that means it's the after State",
    "start": "1159919",
    "end": "1166400"
  },
  {
    "text": "there's always a before and in every single transition there's a poor one after and so if it doesn't have a ticket",
    "start": "1166400",
    "end": "1171559"
  },
  {
    "text": "to the before and if it does have a tick it's the after so that's what those little ticks mean",
    "start": "1171559",
    "end": "1176780"
  },
  {
    "text": "everywhere and this whole thing is an action so I can give this a name like this is",
    "start": "1176780",
    "end": "1182360"
  },
  {
    "text": "the next action that you can do the next transition you can do so in TLA plus I would work like this I say next Double",
    "start": "1182360",
    "end": "1188600"
  },
  {
    "text": "equals that's the double equals it's not assignment it's like you know",
    "start": "1188600",
    "end": "1194660"
  },
  {
    "text": "defining definition um so the next operation is",
    "start": "1194660",
    "end": "1200179"
  },
  {
    "text": "at the beginning statements hello and which that's the slashes and afterwards",
    "start": "1200179",
    "end": "1206419"
  },
  {
    "text": "the state is goodbye right so in English we'd say you know before the state it's low and after the state is goodbye and",
    "start": "1206419",
    "end": "1212419"
  },
  {
    "text": "that's the kind of formal way of writing this down so this equal sign is not an assignment",
    "start": "1212419",
    "end": "1218419"
  },
  {
    "text": "if you don't think about programming variables think about the state before and the state after this whole thing is",
    "start": "1218419",
    "end": "1223460"
  },
  {
    "text": "actually a predicate this is true if the state is before or not you know like that this is true and if the state",
    "start": "1223460",
    "end": "1229580"
  },
  {
    "text": "before and after is not like that it's false so this thing is actually a predicate it's an expression which turns",
    "start": "1229580",
    "end": "1234919"
  },
  {
    "text": "a Boolean and you can you can tell it's a Boolean expression because you can stop the order of the things",
    "start": "1234919",
    "end": "1240080"
  },
  {
    "text": "and it's the same answer so it's not assignment it's it's more like pattern matching it's like is this thing true or",
    "start": "1240080",
    "end": "1246140"
  },
  {
    "text": "not and that's how the model Checker works so here we have our little transition and in the first case this transition is",
    "start": "1246140",
    "end": "1254120"
  },
  {
    "text": "true in the second case the the the after state is not right so",
    "start": "1254120",
    "end": "1259940"
  },
  {
    "text": "that does not match that's false in the other one the the before state it",
    "start": "1259940",
    "end": "1265160"
  },
  {
    "text": "doesn't match and that's false two so there's you know it's true and then false and then false like I say it's a predicate it was an expression",
    "start": "1265160",
    "end": "1272780"
  },
  {
    "text": "okay now let's look at time so TLA the transitions go on forever right it's",
    "start": "1272780",
    "end": "1279620"
  },
  {
    "text": "basically an infinite set of transitions you start at something and think of it like a clock tickings like it goes from",
    "start": "1279620",
    "end": "1284660"
  },
  {
    "text": "here to here and then here to here and every time the clock ticks you have to make another transition",
    "start": "1284660",
    "end": "1289700"
  },
  {
    "text": "okay now because it's a infinitely set a lot infinitely a long series of",
    "start": "1289700",
    "end": "1295039"
  },
  {
    "text": "transitions you can ask questions you can say is something always true if something ever true does it ever",
    "start": "1295039",
    "end": "1300860"
  },
  {
    "text": "happen to be true you know if something happens must something happen afterwards",
    "start": "1300860",
    "end": "1305900"
  },
  {
    "text": "can it you know is it does it require that something happens afterwards so that's the time thing so that is",
    "start": "1305900",
    "end": "1311299"
  },
  {
    "text": "everything about a TLA right so it's got is Boolean logic of straight transitions over time",
    "start": "1311299",
    "end": "1318520"
  },
  {
    "text": "and we'll talk about the plus later on so that's the Syntax for TLA",
    "start": "1318620",
    "end": "1324440"
  },
  {
    "text": "now let's actually use it to do a very simple model and we're going to count to three okay how hard is",
    "start": "1324440",
    "end": "1331159"
  },
  {
    "text": "that so here is our series of State transitions right we go from one to two",
    "start": "1331159",
    "end": "1336200"
  },
  {
    "text": "to three there's two three states and two transitions so we're going to model",
    "start": "1336200",
    "end": "1341240"
  },
  {
    "text": "that entirely now in a programming language you would say x equals one and then x equals two",
    "start": "1341240",
    "end": "1346580"
  },
  {
    "text": "and then x equals three right that's how you do it in the program language we're not making we're not going to do that in telia plus it's going to be more",
    "start": "1346580",
    "end": "1352700"
  },
  {
    "text": "complicated than that so the first thing we need to do is say what is the initial state in the initial State X is one",
    "start": "1352700",
    "end": "1359179"
  },
  {
    "text": "and then what are the available transitions that we can do well the first transition we can do is",
    "start": "1359179",
    "end": "1365240"
  },
  {
    "text": "true if we can do this transition if x is 1 and then afterwards X is 2 so",
    "start": "1365240",
    "end": "1371179"
  },
  {
    "text": "that's a valid transition or we can also do a transition if before X",
    "start": "1371179",
    "end": "1376640"
  },
  {
    "text": "is 2 and after X is 3 right so the initial state is one",
    "start": "1376640",
    "end": "1381919"
  },
  {
    "text": "and then the first transition is the before and after state of one and two the second transition is the before and",
    "start": "1381919",
    "end": "1388520"
  },
  {
    "text": "after state of two and three and then the overall all the possible transitions we can do",
    "start": "1388520",
    "end": "1393740"
  },
  {
    "text": "is the first recession the first transition or the second transition right so the entire set of things you",
    "start": "1393740",
    "end": "1400220"
  },
  {
    "text": "can do is is the choice between those two things all right so that's how you get into three",
    "start": "1400220",
    "end": "1405740"
  },
  {
    "text": "okay it's very very exciting now let's just do a quick refactor you can take little chunks of code and give",
    "start": "1405740",
    "end": "1412340"
  },
  {
    "text": "them names which is nice so here I've taken out these two Transitions and I've given them a name step one and step two",
    "start": "1412340",
    "end": "1419059"
  },
  {
    "text": "and now the the overall thing is step one or",
    "start": "1419059",
    "end": "1424220"
  },
  {
    "text": "step two which is a little easier to read so these things are called operators in TLA it's not like they're not little",
    "start": "1424220",
    "end": "1430640"
  },
  {
    "text": "functions they're actually more like kind of macros they're kind of copy you know search and replace type macros",
    "start": "1430640",
    "end": "1436280"
  },
  {
    "text": "so there's step one or step two so hopefully the the forward slashes and the backslashes are quite not quite so",
    "start": "1436280",
    "end": "1442039"
  },
  {
    "text": "scary after all this now let's look at the uh the the tool that we can run this piece of code or",
    "start": "1442039",
    "end": "1448640"
  },
  {
    "text": "this model so there's something there's lots of different tools the one I'm going to use is called the TLA plus",
    "start": "1448640",
    "end": "1453860"
  },
  {
    "text": "toolbox which is kind of an IDE and this is what it looks like it's actually written in Java and it's about it's over",
    "start": "1453860",
    "end": "1459679"
  },
  {
    "text": "10 years old so it looks kind of ancient it looks very unmodern however it does work",
    "start": "1459679",
    "end": "1466400"
  },
  {
    "text": "and it works fine so I recommend you use this if you're doing it so here we have",
    "start": "1466400",
    "end": "1471500"
  },
  {
    "text": "my screen and I basically paste my code in there I'll type my code in there and the first thing you do is just make sure",
    "start": "1471500",
    "end": "1477620"
  },
  {
    "text": "there's no syntax errors and then what you do is you create a model for this piece of code",
    "start": "1477620",
    "end": "1484580"
  },
  {
    "text": "and in the model you say what is the initial State and what are the various transitions you can do and that's what",
    "start": "1484580",
    "end": "1491059"
  },
  {
    "text": "I've done here you can just like tell the tell the the model what those things are and then what you do is you run the",
    "start": "1491059",
    "end": "1497780"
  },
  {
    "text": "model checker so let me actually run the model checker here we go here is my my code here",
    "start": "1497780",
    "end": "1505940"
  },
  {
    "text": "and here is my model and I'm going to go run",
    "start": "1505940",
    "end": "1511159"
  },
  {
    "text": "and here it is running run run run and it looks like I've got some sort of error",
    "start": "1511159",
    "end": "1517340"
  },
  {
    "text": "it actually says deadlock reached and if you look down here it says it starts off at one and it",
    "start": "1517340",
    "end": "1524120"
  },
  {
    "text": "goes to two and it goes to three and then it had some sort of error",
    "start": "1524120",
    "end": "1529279"
  },
  {
    "text": "all right so what's what's going on here right um there are three states which is one",
    "start": "1529279",
    "end": "1535940"
  },
  {
    "text": "two three but we get this deadlock so deadlock sounds bad what does deadlock mean",
    "start": "1535940",
    "end": "1542059"
  },
  {
    "text": "um what deadlock means is that and by the way these traces are really useful",
    "start": "1542059",
    "end": "1547340"
  },
  {
    "text": "and we'll we'll see these later on it basically tells you what it's trying to do and so you can actually figure out this is the way you kind of debug this",
    "start": "1547340",
    "end": "1553700"
  },
  {
    "text": "thing you can look at the states and see where they are so what happened is it got to three",
    "start": "1553700",
    "end": "1559100"
  },
  {
    "text": "and then there was nothing it could do after three now remember I said these things are supposed to be kind of an infinite",
    "start": "1559100",
    "end": "1564200"
  },
  {
    "text": "series of trans transitions so it hit three and there was nothing it could do and it's that's what a deadlock",
    "start": "1564200",
    "end": "1569600"
  },
  {
    "text": "is a deadlock is when you cannot make any forward progress like two two people are trying to write to this file neither",
    "start": "1569600",
    "end": "1575360"
  },
  {
    "text": "can write to the file neither of them do anything that's a deadlock right so deadlock just means nobody can do",
    "start": "1575360",
    "end": "1580640"
  },
  {
    "text": "anything and this state you in this case you hit three and then there's nothing you can do so that's the deadlock",
    "start": "1580640",
    "end": "1586940"
  },
  {
    "text": "so uh this this little model Deadlocks when it hits three that's no good so how can how",
    "start": "1586940",
    "end": "1592760"
  },
  {
    "text": "can we fix it right we're going to have to always think of these things as infinite series well the answer is we",
    "start": "1592760",
    "end": "1598100"
  },
  {
    "text": "just transition to three every single time when we hit three the valid transition is transitioning to three",
    "start": "1598100",
    "end": "1603140"
  },
  {
    "text": "again and then transitioning to three again and then transition to three again right so at that point we can now have an infinite series of these threes",
    "start": "1603140",
    "end": "1610159"
  },
  {
    "text": "and these are all valid transitions so if we add these as transitions it can make forward progress right it hasn't",
    "start": "1610159",
    "end": "1616760"
  },
  {
    "text": "it's not changing the state very much but it is at least you know moving forward along the the series of transitions so we're going to add that",
    "start": "1616760",
    "end": "1622880"
  },
  {
    "text": "to the model so basically we're literally adding a Becky little loop on that when when it hits three you can just keep looping",
    "start": "1622880",
    "end": "1628880"
  },
  {
    "text": "around and hitting three over and over again and there's a keyword in TLA saying",
    "start": "1628880",
    "end": "1633980"
  },
  {
    "text": "unchanged so this last one I've added a new one called done right",
    "start": "1633980",
    "end": "1639200"
  },
  {
    "text": "and the done step is when X is before X is three and afterwards X is unchanged",
    "start": "1639200",
    "end": "1646640"
  },
  {
    "text": "right so it's basically X is still three so when we add this to our model and we",
    "start": "1646640",
    "end": "1651860"
  },
  {
    "text": "run the model it works really well okay so we won this we don't get any more Deadlocks which is very good so TLA",
    "start": "1651860",
    "end": "1658880"
  },
  {
    "text": "is happy okay now let's move on to the next thing which is doing nothing is actually always an",
    "start": "1658880",
    "end": "1666080"
  },
  {
    "text": "option when you're modeling a state machine because let's say that I'm ticking every second I go you know I go from one to",
    "start": "1666080",
    "end": "1672559"
  },
  {
    "text": "two and then I go from two to three and I'm just ticking along now let's say that I'm at one and then a millisecond",
    "start": "1672559",
    "end": "1678320"
  },
  {
    "text": "later I go to I stay on one I transition to one okay and then the clock ticks I go to two and then a millisecond later I go to",
    "start": "1678320",
    "end": "1684620"
  },
  {
    "text": "two and then clock ticks I go three in the millisecond line I go this is exactly the same system the fact that it didn't",
    "start": "1684620",
    "end": "1690620"
  },
  {
    "text": "do anything you know for a millisecond this you know for a logical point of view it's exactly the same system you",
    "start": "1690620",
    "end": "1697159"
  },
  {
    "text": "can't tell them apart right so being able to do nothing is always almost always about adoption",
    "start": "1697159",
    "end": "1703760"
  },
  {
    "text": "right so here I'm just transitioning back to the same number again so staying in the same in the same state",
    "start": "1703760",
    "end": "1709760"
  },
  {
    "text": "there's almost always about sometimes it's not sometimes you don't want to do that but in a lot of cases it's really",
    "start": "1709760",
    "end": "1714980"
  },
  {
    "text": "common that you want to do that because you know things might just not you know they can just do nothing for a while",
    "start": "1714980",
    "end": "1720020"
  },
  {
    "text": "it's not a problem so the word for that the jargon word for that is stuttering I mean it just kind of stays around just",
    "start": "1720020",
    "end": "1726380"
  },
  {
    "text": "goes around a little Loop so if you were stuttering that's what they're talking about nothing nothing's changing",
    "start": "1726380",
    "end": "1731600"
  },
  {
    "text": "so now let's add stuttering to our little model here so instead of being able to transition",
    "start": "1731600",
    "end": "1738200"
  },
  {
    "text": "to two we'll say well it can stay at one that's all right and then instead of transition to three you can stay at two",
    "start": "1738200",
    "end": "1744260"
  },
  {
    "text": "for a little bit that's right that didn't do any harm right so we've added a new uh thing to our model saying it",
    "start": "1744260",
    "end": "1750260"
  },
  {
    "text": "can either do step one or it can do step two or it can be in the done state or nothing happens",
    "start": "1750260",
    "end": "1756200"
  },
  {
    "text": "when that's all good so that's our model updated with stuttering which like I say most models",
    "start": "1756200",
    "end": "1761840"
  },
  {
    "text": "should have stuttering because that's the real world all right now let's do some properties",
    "start": "1761840",
    "end": "1767899"
  },
  {
    "text": "so this is where we are not no longer you think that's a lot of work to counter three I could do it in frogging",
    "start": "1767899",
    "end": "1773179"
  },
  {
    "text": "language in three lines of code but what you can't do is the kinds of things that TLA can do which is temporal properties",
    "start": "1773179",
    "end": "1780919"
  },
  {
    "text": "so let's look at these so a property is something that applies to the entire system over time not just to like",
    "start": "1780919",
    "end": "1786679"
  },
  {
    "text": "individual states with entire system because we're going to make assumptions or predicates about the entire system",
    "start": "1786679",
    "end": "1793520"
  },
  {
    "text": "and these properties again like does it deadlock does it ever get to the end we are really bad at doing this kind of",
    "start": "1793520",
    "end": "1799460"
  },
  {
    "text": "thing and programming languages don't do this either and that's why you need something like TLA TLA is excellent at",
    "start": "1799460",
    "end": "1804620"
  },
  {
    "text": "doing this kind of thing so let's look at some properties we can check in our system a nice property is something is",
    "start": "1804620",
    "end": "1809659"
  },
  {
    "text": "something always true right is the queue always within bounds um",
    "start": "1809659",
    "end": "1814700"
  },
  {
    "text": "you know is the is the file system always active is the server's always online in this model we could say is it",
    "start": "1814700",
    "end": "1820399"
  },
  {
    "text": "always true that X is greater than zero it's really simple okay so hopefully it's true",
    "start": "1820399",
    "end": "1826760"
  },
  {
    "text": "now eventually true is a nice one that means it's not true right now but hopefully at some point we'd expect it",
    "start": "1826760",
    "end": "1833120"
  },
  {
    "text": "become true hopefully if we got a bunch of servers and we would hope that at least one of them would serve a file at",
    "start": "1833120",
    "end": "1838399"
  },
  {
    "text": "some point eventually always means that it gets eventually something happens and when it",
    "start": "1838399",
    "end": "1843919"
  },
  {
    "text": "gets to that thing it's done and it stays there forever right so if you're doing like if you're",
    "start": "1843919",
    "end": "1849559"
  },
  {
    "text": "doing a server upgrade you eventually get to the upgrade thing and at some point the upgrade's done and it's and it's done right or in this stream press",
    "start": "1849559",
    "end": "1856100"
  },
  {
    "text": "we count to three when we reach three we're done we're not that's you know So eventually always it should be three and",
    "start": "1856100",
    "end": "1863000"
  },
  {
    "text": "then the last one is you know the implication if you hit two does that imply there's going to become three at",
    "start": "1863000",
    "end": "1868880"
  },
  {
    "text": "some point later so all of these things look like they should be true for our system right so how do we how do we do this in TLA",
    "start": "1868880",
    "end": "1876140"
  },
  {
    "text": "so again in English I'd say x is always greater than two oh sorry as a bug you should be always greater than zero there",
    "start": "1876140",
    "end": "1882980"
  },
  {
    "text": "so in mathematical terms we have to turn it into predicate we have to say it's always true that this this predicate this predicate",
    "start": "1882980",
    "end": "1889279"
  },
  {
    "text": "is always true and the predicate here is X is greater than zero and they always operate in TLA plus is",
    "start": "1889279",
    "end": "1895340"
  },
  {
    "text": "this square brackets uh the eventually so instead of saying at some point x is two we see it's",
    "start": "1895340",
    "end": "1901940"
  },
  {
    "text": "eventually this predicate eventually becomes true So eventually the predicate x equals two is true and in TLA plus we",
    "start": "1901940",
    "end": "1909799"
  },
  {
    "text": "use angle brackets for that X eventually becomes three and then stays there so mathematically would say",
    "start": "1909799",
    "end": "1916640"
  },
  {
    "text": "it's eventually true that it's always true that x equals three",
    "start": "1916640",
    "end": "1921860"
  },
  {
    "text": "right and we use angle brackets for the base square brackets and then if x ever does become two then",
    "start": "1921860",
    "end": "1929120"
  },
  {
    "text": "it should become three and so we say if the predicate x equals two is true that implies that at some point the predicate",
    "start": "1929120",
    "end": "1935539"
  },
  {
    "text": "x equals three is true and so we have the kind of curly wavy Arrow okay so",
    "start": "1935539",
    "end": "1941720"
  },
  {
    "text": "let's write this as code so actually I'm rather than saying greater than so I'm going to say it's always within bounds so always within",
    "start": "1941720",
    "end": "1947960"
  },
  {
    "text": "bounds means it's always greater than equal to one and less than equal to three right so you can see I've got the the greater",
    "start": "1947960",
    "end": "1954380"
  },
  {
    "text": "than one I've got the uh the and sorry the or the upside down a so it's either",
    "start": "1954380",
    "end": "1959899"
  },
  {
    "text": "great or equal one actually no so it's and so it's not it's great equal to one and it's less than equal to three and",
    "start": "1959899",
    "end": "1965779"
  },
  {
    "text": "the whole thing is with the square bracket so it's always true eventually eventually two is that x",
    "start": "1965779",
    "end": "1973159"
  },
  {
    "text": "equals 2 eventually that's going to happen so this little angle brackets there eventually always x equals three so when",
    "start": "1973159",
    "end": "1981020"
  },
  {
    "text": "it does hit three it's always going to be three after that and then again if x equals two then it",
    "start": "1981020",
    "end": "1986600"
  },
  {
    "text": "implies that x equals three later on so here's our three and we just like write this in the code we just add this to our",
    "start": "1986600",
    "end": "1992419"
  },
  {
    "text": "file and this is something you can't do in a program language right we're added to file and then what we do is we tell the model Checker check these properties",
    "start": "1992419",
    "end": "1999740"
  },
  {
    "text": "are these properties always true and let's run the model Checker",
    "start": "1999740",
    "end": "2005919"
  },
  {
    "text": "um well let's see what do you think what's going to happen if we want the model checker let's go let me just go over here and uh",
    "start": "2005919",
    "end": "2013240"
  },
  {
    "text": "go to the next poll here if I win the model Checker how many",
    "start": "2013240",
    "end": "2019059"
  },
  {
    "text": "properties will be true all of them three of them two of them or just one of them okay",
    "start": "2019059",
    "end": "2024700"
  },
  {
    "text": "there are there are properties there",
    "start": "2024700",
    "end": "2028500"
  },
  {
    "text": "see what people think most people think that all of them will be true it looks like okay okay yes some",
    "start": "2030940",
    "end": "2037059"
  },
  {
    "text": "of them three of them two of them it looks like most people think all of them are going to be true",
    "start": "2037059",
    "end": "2042460"
  },
  {
    "text": "right if we actually run the model Checker what does it say it actually gives an error so it's not true",
    "start": "2042460",
    "end": "2049358"
  },
  {
    "text": "turns out that only one of them are true okay because if you look at the the trace it says it goes to one",
    "start": "2049359",
    "end": "2056560"
  },
  {
    "text": "and then does stuttering which means it stays on one right so people forgot about stuttering",
    "start": "2056560",
    "end": "2062138"
  },
  {
    "text": "I told you all about it and then you forgot about it so what it means it starts at one and then it just Loops",
    "start": "2062139",
    "end": "2067419"
  },
  {
    "text": "back to One Forever so that's never going to get to two and it's never going to get to three",
    "start": "2067419",
    "end": "2073240"
  },
  {
    "text": "and even if it did get two it gets they could just loop around on two forever it's never going to get to three",
    "start": "2073240",
    "end": "2079240"
  },
  {
    "text": "so both of these things these states you can just go around forever and never go anywhere so we've just ruined our model",
    "start": "2079240",
    "end": "2085960"
  },
  {
    "text": "yes is true in almost narrative yes yeah",
    "start": "2085960",
    "end": "2093460"
  },
  {
    "text": "yeah and it's just going to go around one and you know it's just going to start at one and just stay on one forever so by adding stuttering we've",
    "start": "2093460",
    "end": "2099880"
  },
  {
    "text": "actually ruined our model we had a nice model at work and now we've broken it okay now and I said but we should we",
    "start": "2099880",
    "end": "2106900"
  },
  {
    "text": "should have stuttering so we've got a kind of conflict we should have stuttering but on the hand as soon as we add stuttering it breaks everything",
    "start": "2106900",
    "end": "2112660"
  },
  {
    "text": "so in this case the the only one that is always true is the always within band so even though it stays on white it's",
    "start": "2112660",
    "end": "2118000"
  },
  {
    "text": "always true that it's between one and three even though we've broken the rest of it so let's fix that",
    "start": "2118000",
    "end": "2125079"
  },
  {
    "text": "what we really want to do is say okay you can go around a few times but you should try some of the other ones",
    "start": "2125079",
    "end": "2130540"
  },
  {
    "text": "sometimes right don't just stay in an infinite Loop like if you can go some other place if you can transition to two",
    "start": "2130540",
    "end": "2135820"
  },
  {
    "text": "you know every so often give it a go don't always always do the same thing go",
    "start": "2135820",
    "end": "2140859"
  },
  {
    "text": "in a stain for Loop right so don't stay in envelope try different things that's called fairness",
    "start": "2140859",
    "end": "2147280"
  },
  {
    "text": "right be fair like give each of the Tran possible if you've got two transitions you can choose from",
    "start": "2147280",
    "end": "2153339"
  },
  {
    "text": "use both of them every so often I don't always pick one and never use the other one that's not fair right use both of",
    "start": "2153339",
    "end": "2159280"
  },
  {
    "text": "them so that's called fairness right and then of course TLA recognizes",
    "start": "2159280",
    "end": "2164980"
  },
  {
    "text": "this is a really important thing and it has a concept where you can model this in TLA Plus",
    "start": "2164980",
    "end": "2170260"
  },
  {
    "text": "so how do we model it in tlf first of all I'm going to have to refactor the code a little bit and the syntax",
    "start": "2170260",
    "end": "2175359"
  },
  {
    "text": "unfortunately is a little bit ugly now we're getting into this all the ugly syntax so first of all I'm going to take the spec that we had and we're going to",
    "start": "2175359",
    "end": "2181720"
  },
  {
    "text": "merge the initial State and the next thing into one single",
    "start": "2181720",
    "end": "2187240"
  },
  {
    "text": "uh thing which I'm calling spec so this this is the specification for",
    "start": "2187240",
    "end": "2192400"
  },
  {
    "text": "the entire systems it starts off as the initial and then the next one is just always",
    "start": "2192400",
    "end": "2200079"
  },
  {
    "text": "um the next thing or unchanged all right so it's always either to always do with the next step or leave it",
    "start": "2200079",
    "end": "2207280"
  },
  {
    "text": "X on change so that's our refactoring now it turns out there's a nice bit of syntax sugar for this so instead of",
    "start": "2207280",
    "end": "2214240"
  },
  {
    "text": "saying next or unchanged there's actually a little bit of syntax you could say with square",
    "start": "2214240",
    "end": "2219460"
  },
  {
    "text": "brackets around underscore X now it looks really ugly um that's because it's not been",
    "start": "2219460",
    "end": "2225220"
  },
  {
    "text": "formatted by latex yet once it has been formatted you have a nice little subscript X would be a little subscript but this kind of looks ugly because this",
    "start": "2225220",
    "end": "2231820"
  },
  {
    "text": "is designed to be you know this is designed to be formatted code it's not it's time to be like programming language",
    "start": "2231820",
    "end": "2237820"
  },
  {
    "text": "so that's the Syntax for try to do next or don't do anything",
    "start": "2237820",
    "end": "2244780"
  },
  {
    "text": "now now that we've got this syntax we can actually add another piece which is this fairness WF underscore X next and what that means",
    "start": "2244780",
    "end": "2252040"
  },
  {
    "text": "is you can stutter a few times but make sure you try doing the next you know don't don't always pick the same thing",
    "start": "2252040",
    "end": "2258220"
  },
  {
    "text": "try both of them okay and that's called weak fairness there's another one called strong fairness which I'm not going to",
    "start": "2258220",
    "end": "2263980"
  },
  {
    "text": "talk about but weak fairness just means try things when you when you come to a branch in the road try both of them",
    "start": "2263980",
    "end": "2269079"
  },
  {
    "text": "don't always pick the same one okay so that's what that means now if you add that",
    "start": "2269079",
    "end": "2274900"
  },
  {
    "text": "so and we here we add our weak fairness to our design and we have our bound our properties like we had before with the",
    "start": "2274900",
    "end": "2281859"
  },
  {
    "text": "weak fairness if we run it it does work so we can we can have the stuttering and",
    "start": "2281859",
    "end": "2287740"
  },
  {
    "text": "still prove that the various properties happen if we have weak fairness",
    "start": "2287740",
    "end": "2293820"
  },
  {
    "text": "so that's good so I was obviously thinking it's going to ruin everything but no it doesn't actually ruin everything weak fairness you need to use",
    "start": "2295180",
    "end": "2300880"
  },
  {
    "text": "this quite a lot sometimes okay and this these four properties this is where TLA plus is not a programming language you",
    "start": "2300880",
    "end": "2306820"
  },
  {
    "text": "could not do this in python or JavaScript you couldn't say are you sure that it will eventually become free are you sure",
    "start": "2306820",
    "end": "2312700"
  },
  {
    "text": "that it will never go out of bounds parking languages can't do that but TLA plus can",
    "start": "2312700",
    "end": "2318820"
  },
  {
    "text": "right now let's move the next one Let's uh go back and model those producer consumer ones okay and let's see if we",
    "start": "2318820",
    "end": "2324400"
  },
  {
    "text": "can get some more confidence in that code so here here again we have our producer and it's again it's checking whether",
    "start": "2324400",
    "end": "2330640"
  },
  {
    "text": "it's writable and if so it can write and the consumer checks whether it's readable and if so it reads okay so each",
    "start": "2330640",
    "end": "2336760"
  },
  {
    "text": "one has two steps so how do we model this as a state machine well there's two steps this there's two",
    "start": "2336760",
    "end": "2343359"
  },
  {
    "text": "states and two transitions so the first state is it's ready to start the whole process it's idle as it were the first",
    "start": "2343359",
    "end": "2349900"
  },
  {
    "text": "thing it does is check is the queue writable is the queue not full and if it is ready then I kind of",
    "start": "2349900",
    "end": "2355839"
  },
  {
    "text": "transition into a state where okay I'm just about to write I'm ready to write my thing and we're not doing this like I",
    "start": "2355839",
    "end": "2360940"
  },
  {
    "text": "said we're not doing this as an atomic operation because that would be too easy right in the real and in the real world you can't",
    "start": "2360940",
    "end": "2366220"
  },
  {
    "text": "always do it as an atomic operation so am I the first thing is am I ready to write and then if I am in that ready to write State then I can actually write",
    "start": "2366220",
    "end": "2372640"
  },
  {
    "text": "something to queue and then I go back to being idle okay so two State Transitions and two",
    "start": "2372640",
    "end": "2378700"
  },
  {
    "text": "transitions so in a programming language I would write the code like this you know if the producer state is in the",
    "start": "2378700",
    "end": "2384760"
  },
  {
    "text": "ready and the queue is ready you know is less than the maximum then I can assign the",
    "start": "2384760",
    "end": "2390760"
  },
  {
    "text": "producer state to the next state and then the second transition I would say well if the producer is in the ready",
    "start": "2390760",
    "end": "2397900"
  },
  {
    "text": "to write state then change it back to the ready State and then also increment the queue size",
    "start": "2397900",
    "end": "2403300"
  },
  {
    "text": "now I actually don't care about the queue I don't care what the contents of the queue are I don't care about how the queue is implemented all I care about is",
    "start": "2403300",
    "end": "2410140"
  },
  {
    "text": "is the is the queue going to get too full is it going to overflow or underflow that's all I care about so I'm",
    "start": "2410140",
    "end": "2415300"
  },
  {
    "text": "just going to model the queue is this a model it's not the real code right so I'm just going to model the queue as an integer and every time I write to the",
    "start": "2415300",
    "end": "2422020"
  },
  {
    "text": "queue I'm just going to increment the integer every time I read from the queue I'm just going to decrement the integer that's all I need to do so that's that's",
    "start": "2422020",
    "end": "2428260"
  },
  {
    "text": "the modeling I'm doing into this queue I don't really care how the queue actually works foreign",
    "start": "2428260",
    "end": "2433300"
  },
  {
    "text": "so that's the programming version let's look at the TLA plus version so again before the transition",
    "start": "2433300",
    "end": "2440740"
  },
  {
    "text": "the producer state is ready and the queue size is less than the max afterwards now just produce a state with",
    "start": "2440740",
    "end": "2447040"
  },
  {
    "text": "a little tick next to it afterwards the producer state is now in the can weight and the queue size is unchanged you have",
    "start": "2447040",
    "end": "2454180"
  },
  {
    "text": "to say for every single thing you have to say what happens to it and in this case for this one nothing happens to the",
    "start": "2454180",
    "end": "2459820"
  },
  {
    "text": "queue size that's very important now what about the what the right",
    "start": "2459820",
    "end": "2465099"
  },
  {
    "text": "transition so the right transition is assuming that before the producer state is ready to write",
    "start": "2465099",
    "end": "2470980"
  },
  {
    "text": "and afterwards the producer State goes back to being kind of idle and now afterwards the cue size is queue size",
    "start": "2470980",
    "end": "2478599"
  },
  {
    "text": "plus one so I just think of it so this is how you would write this stuff in TLA",
    "start": "2478599",
    "end": "2484960"
  },
  {
    "text": "so it's not quite the same as the programming thing it's all notice this is a giant predicate everything is an",
    "start": "2484960",
    "end": "2491740"
  },
  {
    "text": "and an or right I'm not really doing any kind of calculations so this these transitions",
    "start": "2491740",
    "end": "2498280"
  },
  {
    "text": "are only available so for example if the queue is full and a producer is in the ready",
    "start": "2498280",
    "end": "2505480"
  },
  {
    "text": "State the first transition is not available so the model Checker can't choose that transition because it's not",
    "start": "2505480",
    "end": "2511359"
  },
  {
    "text": "available to choose because it doesn't meet the requirements right so these are think of these things as predicates",
    "start": "2511359",
    "end": "2516940"
  },
  {
    "text": "right they always return true or false it's not assignments it's if if if the if the preconditions",
    "start": "2516940",
    "end": "2523540"
  },
  {
    "text": "are true then it can use this transition if the preconditions aren't true it can't use the transition so if there was",
    "start": "2523540",
    "end": "2529180"
  },
  {
    "text": "if you know if the queue Max Q size was Zero that would be a deadlock right the the",
    "start": "2529180",
    "end": "2535060"
  },
  {
    "text": "the producer could never transition between states and the consumer could never transition between states and the whole",
    "start": "2535060",
    "end": "2541540"
  },
  {
    "text": "thing would just be a massive deadlock so you know if you have an empty if you have a zero length queue then you've got a deadlock so",
    "start": "2541540",
    "end": "2548619"
  },
  {
    "text": "now the producer action overall is a choice between trying to do the first thing try to do the second thing so",
    "start": "2548619",
    "end": "2554980"
  },
  {
    "text": "that's we've modeled the producer action as a choice something or something again it's the upside down",
    "start": "2554980",
    "end": "2560920"
  },
  {
    "text": "uh triangle now we do exactly the same thing in the consumer",
    "start": "2560920",
    "end": "2566740"
  },
  {
    "text": "this time it's reading from the queue there's two different states there's two different transitions so we check the",
    "start": "2566740",
    "end": "2571900"
  },
  {
    "text": "first thing we do is check whether it's readable or not and the other transition is we can check we try to write sorry try to read and",
    "start": "2571900",
    "end": "2578800"
  },
  {
    "text": "when we read we're just decrementing that you can see queue size cue size equals is minus one so we're",
    "start": "2578800",
    "end": "2585400"
  },
  {
    "text": "just popping from the keyword and again the all the possible consumer actions is we either do the first",
    "start": "2585400",
    "end": "2590560"
  },
  {
    "text": "transition or we try and do the second transition right so that's the consumer side done",
    "start": "2590560",
    "end": "2596800"
  },
  {
    "text": "now let's put it together into an entire system let's actually I'm just going to put the entire piece of code on the screen here",
    "start": "2596800",
    "end": "2602980"
  },
  {
    "text": "so that's the this now is all the producer side of things here um this is all the consumer side of",
    "start": "2602980",
    "end": "2608980"
  },
  {
    "text": "things here and finally the overall all the possible transitions we can do",
    "start": "2608980",
    "end": "2614619"
  },
  {
    "text": "is either we can try doing a position thing or we can try doing a consumer thing that is everything we can do right",
    "start": "2614619",
    "end": "2621339"
  },
  {
    "text": "so what's nice is we get non-determinism for free like if I was trying to model it in code I'd have to have threads or",
    "start": "2621339",
    "end": "2628420"
  },
  {
    "text": "I'd have to have actors or something right it'd be kind of tricky to model this but in TLA plus it's just a choice it's",
    "start": "2628420",
    "end": "2635319"
  },
  {
    "text": "like in when your model sometimes do the producer thing if you can sometimes do a consumer thing if you can and you can",
    "start": "2635319",
    "end": "2641440"
  },
  {
    "text": "alternate between them you know the model Checker will try all the possible combinations of doing these things so",
    "start": "2641440",
    "end": "2646780"
  },
  {
    "text": "it's just do one or the other and now we've got non-determinism because it will automatically every time you have a",
    "start": "2646780",
    "end": "2652060"
  },
  {
    "text": "choice it will try them both you know now do we add stuttering right should we",
    "start": "2652060",
    "end": "2658119"
  },
  {
    "text": "add some stuttering where nothing happens um maybe it may be not in this case maybe this is a case where you don't",
    "start": "2658119",
    "end": "2663280"
  },
  {
    "text": "want to have it but if you did have it you could that would be an example where the consumer just stops working so if the consumer stops working it doesn't do",
    "start": "2663280",
    "end": "2669280"
  },
  {
    "text": "anything does the producer keep adding things to the queue and overflowing the queue does your code check for that you",
    "start": "2669280",
    "end": "2674800"
  },
  {
    "text": "know so maybe the producers just the consumer is just not working just taking time off a couple of minutes and having a coffee",
    "start": "2674800",
    "end": "2680859"
  },
  {
    "text": "break you know right now what are the the temporal properties so the first the most",
    "start": "2680859",
    "end": "2686740"
  },
  {
    "text": "important one the most important one is is it always within bounce right so is the queue size",
    "start": "2686740",
    "end": "2692920"
  },
  {
    "text": "um non-empty well sorry greater than or equal zero and is the queue size less than the max",
    "start": "2692920",
    "end": "2698619"
  },
  {
    "text": "all right so it's either that one or so it ends you see at the end and all",
    "start": "2698619",
    "end": "2703780"
  },
  {
    "text": "stuff it's either it must be greater than equal to zero and it must be less than equal to the Max and then we have",
    "start": "2703780",
    "end": "2709839"
  },
  {
    "text": "the the angle brackets I'm sorry the square bracket which means it's always true so this predicate with both of",
    "start": "2709839",
    "end": "2715780"
  },
  {
    "text": "these things are always true now if we won this script we don't get any errors",
    "start": "2715780",
    "end": "2722680"
  },
  {
    "text": "so that means with one producer and one consumer this design works all right we",
    "start": "2722680",
    "end": "2727720"
  },
  {
    "text": "have confidence in this design now I think that when I did this the first poll",
    "start": "2727720",
    "end": "2733480"
  },
  {
    "text": "it was 50 50. some people thought it wouldn't work some people thought it would work",
    "start": "2733480",
    "end": "2739060"
  },
  {
    "text": "um so with a single producer and a single consumer yes this actually does design does work we don't need to guess we're",
    "start": "2739060",
    "end": "2745060"
  },
  {
    "text": "actually doing the model checking so if I revisit this screen that I had before and I go to the next poll",
    "start": "2745060",
    "end": "2752460"
  },
  {
    "text": "um there we go so now how many people are confident that the single producer single consumer",
    "start": "2754599",
    "end": "2760780"
  },
  {
    "text": "one uh oh everyone's confident okay very good yeah so it was 50 50 before",
    "start": "2760780",
    "end": "2766900"
  },
  {
    "text": "and I think the confidence level is much higher because I've run this little tool and it's checked everything and I'm",
    "start": "2766900",
    "end": "2773680"
  },
  {
    "text": "pretty sure that it's not it's not broken some people are still not confident that's correct",
    "start": "2773680",
    "end": "2780099"
  },
  {
    "text": "so I don't know how would I persuade you I would just take you through this in more detail and and go through the model",
    "start": "2780099",
    "end": "2785260"
  },
  {
    "text": "checking in more detail but the answer is this actually is correct so",
    "start": "2785260",
    "end": "2790960"
  },
  {
    "text": "right let's keep going um now now let's do the multiversion one",
    "start": "2790960",
    "end": "2796119"
  },
  {
    "text": "with two consumers and two producers or more than one and this is where we need the Plus in TLA Plus",
    "start": "2796119",
    "end": "2802119"
  },
  {
    "text": "so the plus is mostly set theory and um again TLA plus uses a mathematical type",
    "start": "2802119",
    "end": "2808900"
  },
  {
    "text": "of set theory so for example in programming if I were to say given a set find all the elements that have this",
    "start": "2808900",
    "end": "2815140"
  },
  {
    "text": "certain property we would say something like set.filter right something like that in mathematical terms we'd say the",
    "start": "2815140",
    "end": "2822579"
  },
  {
    "text": "elements in the set such that this predicate is true so we'd write it in a mathematical way",
    "start": "2822579",
    "end": "2827619"
  },
  {
    "text": "and in TLA plus we write it that way we say curly braces e slash in so just",
    "start": "2827619",
    "end": "2833500"
  },
  {
    "text": "again latex is going to format that as a little um uh you know Greek e",
    "start": "2833500",
    "end": "2839920"
  },
  {
    "text": "such that there's predicate is true so it basically TLA turns this into like nice mathematical notation",
    "start": "2839920",
    "end": "2846579"
  },
  {
    "text": "and again if I'm saying is there any element in the set which has this property in programming we would say",
    "start": "2846579",
    "end": "2852160"
  },
  {
    "text": "something like set.ne probably you know I don't know but in TLA plus we'd say does there exist an element in the set",
    "start": "2852160",
    "end": "2859000"
  },
  {
    "text": "such that the predicate is true so that's how you'd write it in TLA plus and it gets converted into the",
    "start": "2859000",
    "end": "2865180"
  },
  {
    "text": "mathematical formatting like when you run it through latex it formats it the other way",
    "start": "2865180",
    "end": "2872260"
  },
  {
    "text": "so there you go okay so when you see that stuff that's what's going all these slashes that's the latex formatting okay so we",
    "start": "2872260",
    "end": "2878980"
  },
  {
    "text": "need since we're doing two producers two consumers we have a set no one no longer just one no longer",
    "start": "2878980",
    "end": "2885880"
  },
  {
    "text": "um just one consumer so now we're going to need the set part of TLA plus so here's a set of producers we have two",
    "start": "2885880",
    "end": "2891700"
  },
  {
    "text": "probably good enough P1 and P2 and we have two consumers C1 C2",
    "start": "2891700",
    "end": "2897940"
  },
  {
    "text": "right now how do we we need to change our spec to work with multiple producers so um first of all we need to initialize",
    "start": "2897940",
    "end": "2904720"
  },
  {
    "text": "everything so we're going to initialize the producer States",
    "start": "2904720",
    "end": "2909760"
  },
  {
    "text": "to be every single producer is in the first state in the ready state now you can think of these this set is",
    "start": "2909760",
    "end": "2917200"
  },
  {
    "text": "actually like a dictionary in python or something it's a map especially a bunch of key value pairs so in Python I could",
    "start": "2917200",
    "end": "2924040"
  },
  {
    "text": "have written P1 colon ready P2 column ready it means they're both ready in um TLA plus you don't use that syntax you",
    "start": "2924040",
    "end": "2930579"
  },
  {
    "text": "say for the set in all every p in the set producers you assign it to ready okay and same thing with consumers so",
    "start": "2930579",
    "end": "2937660"
  },
  {
    "text": "these states are like I say think of them as dictionaries or or",
    "start": "2937660",
    "end": "2942720"
  },
  {
    "text": "Maps they are not just the sets of key value pairs",
    "start": "2942720",
    "end": "2948040"
  },
  {
    "text": "now let's do the writable side now this time we're parameterizing by a",
    "start": "2948040",
    "end": "2953579"
  },
  {
    "text": "particular producer so this particular producer for this transition to happen this particular",
    "start": "2953579",
    "end": "2959740"
  },
  {
    "text": "producer has to be in the ready State and the queue has to be less than the right size and now afterwards we're updating the",
    "start": "2959740",
    "end": "2967780"
  },
  {
    "text": "state now this dictionary every single thing is the same except for this particular producer is now",
    "start": "2967780",
    "end": "2973599"
  },
  {
    "text": "changed so the syntax is kind of weird you say the the producer state is exactly the same except that this",
    "start": "2973599",
    "end": "2978880"
  },
  {
    "text": "particular producer is now in the next state but all the other ones are unchanged",
    "start": "2978880",
    "end": "2984400"
  },
  {
    "text": "so that's why you see this kind of accept syntax um and let's look at the again I'm",
    "start": "2984400",
    "end": "2990579"
  },
  {
    "text": "parameterized by producer we check the state for this particular so this is a Dictionary lookup for this particular",
    "start": "2990579",
    "end": "2996099"
  },
  {
    "text": "producer and this is like updating the dictionary this is the TLA way of updating a dictionary rather than just",
    "start": "2996099",
    "end": "3002339"
  },
  {
    "text": "assigning to the key and now we're going to do the right in",
    "start": "3002339",
    "end": "3007859"
  },
  {
    "text": "the same way again it's the it's got this thing where you update the dictionary for this producer now we've",
    "start": "3007859",
    "end": "3013500"
  },
  {
    "text": "got a whole bunch of producers we can't just say do one or the other what we're going to say is find any producer where we can do either",
    "start": "3013500",
    "end": "3020520"
  },
  {
    "text": "of these actions like some producers might be in the middle of reading some writing somebody some of them might be",
    "start": "3020520",
    "end": "3025859"
  },
  {
    "text": "idle we're just going to pick one at random try and find one that we can do a transition on and again we'll we'll take",
    "start": "3025859",
    "end": "3031740"
  },
  {
    "text": "turns because it's fair we'll try each of them right so that's how we do that same thing with",
    "start": "3031740",
    "end": "3038579"
  },
  {
    "text": "the consumers exactly the same kind of thing I'm going to start whizzing through this light and say don't worry too much about understanding every",
    "start": "3038579",
    "end": "3044339"
  },
  {
    "text": "single line of code I'm just trying to show you the overall concepts of how TLA plus would model this kind of thing but",
    "start": "3044339",
    "end": "3050700"
  },
  {
    "text": "again we have a kind of a dictionary for the consumers and if this particular consumer is ready we update the",
    "start": "3050700",
    "end": "3057059"
  },
  {
    "text": "dictionary and assign this particular Sumer to ready to read and the second transition is the same",
    "start": "3057059",
    "end": "3062760"
  },
  {
    "text": "way and then the consumer action in general is does there exist a consumer that we can",
    "start": "3062760",
    "end": "3068700"
  },
  {
    "text": "either read or you know or or or check the readability for so try and find a consumer that has a",
    "start": "3068700",
    "end": "3074940"
  },
  {
    "text": "valid action that we can do now if we run the script with two producers and two consumers and that",
    "start": "3074940",
    "end": "3080700"
  },
  {
    "text": "same always and Bounds property what do you think happens first of all the possibilities of one is reading and",
    "start": "3080700",
    "end": "3087660"
  },
  {
    "text": "the other one's writing and this one then a two reading at the same time and there's one all those possibilities the 38 combinations just with two producers",
    "start": "3087660",
    "end": "3094200"
  },
  {
    "text": "and two consumers way way too much there's no way we can do a code inspection for that",
    "start": "3094200",
    "end": "3100140"
  },
  {
    "text": "now of course this does not work okay this we are very confident that this",
    "start": "3100140",
    "end": "3105300"
  },
  {
    "text": "design does not work so when I've told you before I think some people thought it might work it's",
    "start": "3105300",
    "end": "3111180"
  },
  {
    "text": "like no this is this does not work definitely doesn't and some people weren't confident like I am 100 confident it does not work",
    "start": "3111180",
    "end": "3118680"
  },
  {
    "text": "so we're not guessing so how do we fix the error well TLA plus does not tell you how to fix it right you have to",
    "start": "3118680",
    "end": "3124800"
  },
  {
    "text": "think you have to find out what is the right way to model a producer consumer",
    "start": "3124800",
    "end": "3130920"
  },
  {
    "text": "however what it is good is testing the fix so let's say I'm going to use a semaphore or I'm going to use a mutex",
    "start": "3130920",
    "end": "3137040"
  },
  {
    "text": "I'm going to use whatever it is that I think would fix this problem I'm going to add the semaphore logic into my model I'm going to rerun the model and see if",
    "start": "3137040",
    "end": "3144780"
  },
  {
    "text": "it works right so if the model if I rewind the model with semaphores and it works I'm pretty confident that I could then",
    "start": "3144780",
    "end": "3151380"
  },
  {
    "text": "go and code this with semaphores and I've got my semaphore logic right which is always kind of tricky too so you've got a lot more confidence that the fix",
    "start": "3151380",
    "end": "3157559"
  },
  {
    "text": "will work or not maybe maybe I got my semaphore logic wrong and it doesn't work so either way I've got some confidence there so this is 50 lines of",
    "start": "3157559",
    "end": "3164579"
  },
  {
    "text": "code and we have a lot of confidence either way on the on the design so it's definitely worth doing I think",
    "start": "3164579",
    "end": "3171540"
  },
  {
    "text": "now okay last bit which is TLA modeling um uh how are we doing a Time",
    "start": "3171540",
    "end": "3178619"
  },
  {
    "text": "using TLA plus the model zero downtime deployment so this is a real world example of if you're doing devops and",
    "start": "3178619",
    "end": "3185099"
  },
  {
    "text": "you need to you know do a zero downtime deployment so I'm going to go even faster here so",
    "start": "3185099",
    "end": "3190380"
  },
  {
    "text": "again don't worry too much about the details but I just want to kind of show you that TLA plus is a great tool to improve your",
    "start": "3190380",
    "end": "3197760"
  },
  {
    "text": "design because what we're going to do is sketch the design I want to like let's think let's try it this way we're going to check it with the model Checker and",
    "start": "3197760",
    "end": "3204420"
  },
  {
    "text": "the model Checker is probably going to say no you got it wrong we're going to fix it I'm going to try again and the model check will say no you still got it",
    "start": "3204420",
    "end": "3210420"
  },
  {
    "text": "wrong fix it try again and when the model Checker says I got it right then it's like yeah and now I'm pretty confident that my code is good okay",
    "start": "3210420",
    "end": "3218460"
  },
  {
    "text": "so I'm going to steal this from Hillel Wayne who is a TLA expert and I'm going",
    "start": "3218460",
    "end": "3223740"
  },
  {
    "text": "to talk about him later on at the end of The Talk so how are we going to let's come up with our model okay we have a bunch of",
    "start": "3223740",
    "end": "3229319"
  },
  {
    "text": "servers and each server is going to be upgraded from version one to version two",
    "start": "3229319",
    "end": "3235200"
  },
  {
    "text": "but here's the problem each server goes offline during the upgrade right and we really want to make sure",
    "start": "3235200",
    "end": "3241260"
  },
  {
    "text": "that there's always a server that's online right that's really critical and here's another thing all the servers",
    "start": "3241260",
    "end": "3248520"
  },
  {
    "text": "must be upgraded because a really easy way to implement this is never upgrade a server then they're always online so we",
    "start": "3248520",
    "end": "3254700"
  },
  {
    "text": "have to have two conditions I mean you have to be very careful having them always be online is easy if they if you've never actually bother to upgrade",
    "start": "3254700",
    "end": "3260640"
  },
  {
    "text": "them so you want to make sure that at the end of this process every single server is at version two right so that's the estragal uh kicker",
    "start": "3260640",
    "end": "3267960"
  },
  {
    "text": "there so how do we model this as a series of State transitions well we're going to have three states and two",
    "start": "3267960",
    "end": "3273359"
  },
  {
    "text": "transitions right it starts off it's online and it's in version one and then we start the upgrade and it goes offline",
    "start": "3273359",
    "end": "3279000"
  },
  {
    "text": "then we finish the upgrade and it goes back online and it's now at version two okay that's our entire model",
    "start": "3279000",
    "end": "3286740"
  },
  {
    "text": "and then went to version two it can keep looping forever right we've got that little thing where it's done and we can",
    "start": "3286740",
    "end": "3292260"
  },
  {
    "text": "just keep going so we have to add that to stop it having a deadlock right so again we're going to have a",
    "start": "3292260",
    "end": "3298819"
  },
  {
    "text": "dictionary of key value Pairs and the server state in this case the server state for each server is going to be one",
    "start": "3298819",
    "end": "3305160"
  },
  {
    "text": "of these three things online V1 offline or online V2 so initially every single",
    "start": "3305160",
    "end": "3310260"
  },
  {
    "text": "server is version one that's the initial State now the start transition is we",
    "start": "3310260",
    "end": "3316859"
  },
  {
    "text": "pick a server which is in V1 and then we upgrade to be offline that",
    "start": "3316859",
    "end": "3323940"
  },
  {
    "text": "particular one and then to finish the upgrade we pick a server that's offline and we update it to be online with",
    "start": "3323940",
    "end": "3331140"
  },
  {
    "text": "version two so that's our start transition and that's our finished transition all right and then the doing any",
    "start": "3331140",
    "end": "3339359"
  },
  {
    "text": "upgraders we try and find does there exist a server that we can upgrade so we try and upgrade a server which",
    "start": "3339359",
    "end": "3345660"
  },
  {
    "text": "means um trying to do either the start transition or the finished transition and there's also another one which is",
    "start": "3345660",
    "end": "3352200"
  },
  {
    "text": "done right all the servers are in version two so slash a means for all servers instead",
    "start": "3352200",
    "end": "3358740"
  },
  {
    "text": "of servers the server State is online and at that point we can leave the server State unchanged that's that",
    "start": "3358740",
    "end": "3364619"
  },
  {
    "text": "little backwards Loop so we have an upgrade step and we have the done step so the overall thing is either try doing an upgrade and",
    "start": "3364619",
    "end": "3371880"
  },
  {
    "text": "if we can't do an upgrade try doing the done now so let's run our script",
    "start": "3371880",
    "end": "3378180"
  },
  {
    "text": "there are three states now with one server there's three possible States with two servers there's nine possible",
    "start": "3378180",
    "end": "3384300"
  },
  {
    "text": "states with three servers there's 27 possible States so for example I could upgrade number one and upgrade number",
    "start": "3384300",
    "end": "3389880"
  },
  {
    "text": "two and start number three or I could do number one and go through all things and then leave these alone or I could do",
    "start": "3389880",
    "end": "3396300"
  },
  {
    "text": "this two steps forward and this one one step forward and leave this you know this is complicated there's all sorts of",
    "start": "3396300",
    "end": "3401700"
  },
  {
    "text": "things all sorts of combinations of things that you could do and you you wouldn't really be some weird combination might happen that you didn't",
    "start": "3401700",
    "end": "3406980"
  },
  {
    "text": "think about so it's again it's too hard to eyeball so now what the temporal properties so",
    "start": "3406980",
    "end": "3413460"
  },
  {
    "text": "first of all zero down time so what does that mean not all servers should be offline at once okay and then the",
    "start": "3413460",
    "end": "3419520"
  },
  {
    "text": "upgrade should complete that means that at some point it eventually always",
    "start": "3419520",
    "end": "3424800"
  },
  {
    "text": "all the servers should be version two okay so let's write that as a TLA code",
    "start": "3424800",
    "end": "3430680"
  },
  {
    "text": "here so zero downtime means it's always true that there is a server which is not",
    "start": "3430680",
    "end": "3436980"
  },
  {
    "text": "offline right it's always true that there exists a server such that the server state is",
    "start": "3436980",
    "end": "3443520"
  },
  {
    "text": "not Offline that slash equals is not equal it's instead of using bang you call it uses slash equal okay so it's",
    "start": "3443520",
    "end": "3449880"
  },
  {
    "text": "always true there's a server which isn't offline okay it's ever done time now this eventually upgraded okay so",
    "start": "3449880",
    "end": "3456839"
  },
  {
    "text": "it's eventually all the servers in the set of servers will have a server state which is",
    "start": "3456839",
    "end": "3463200"
  },
  {
    "text": "version two right so we've modeled that in TLA Plus now if we run this script with two",
    "start": "3463200",
    "end": "3468480"
  },
  {
    "text": "servers we get this invariant zero downtime is VAR and it's violated right I thought I thought we had a perfect",
    "start": "3468480",
    "end": "3474240"
  },
  {
    "text": "algorithm here so we look at the trace for the model Checker and it says at the beginning S1",
    "start": "3474240",
    "end": "3480359"
  },
  {
    "text": "and S2 are both online at V1 we take S1 offline and then we take S2 offline",
    "start": "3480359",
    "end": "3486900"
  },
  {
    "text": "well boom now we're both offline we've looked we've broken our constraint well that was stupid so how can we fix",
    "start": "3486900",
    "end": "3494099"
  },
  {
    "text": "that how can we fix that well we'll add another step okay we're going to add a fix but are we",
    "start": "3494099",
    "end": "3499859"
  },
  {
    "text": "confident that our fix will work let's see so what I'm going to do is add another con a trend uh for the start upgrade I'm",
    "start": "3499859",
    "end": "3508380"
  },
  {
    "text": "going to say you can only start upgrading if nobody else is offline okay so there's my start Trend my start",
    "start": "3508380",
    "end": "3515040"
  },
  {
    "text": "upgrade I'm going to add a new step is does there exist another server where",
    "start": "3515040",
    "end": "3521040"
  },
  {
    "text": "the other server state is offline and if that's true don't don't start an upgrade okay so if",
    "start": "3521040",
    "end": "3527640"
  },
  {
    "text": "somebody else is offline you're not allowed to upgrade so that's my fix for this problem and",
    "start": "3527640",
    "end": "3533460"
  },
  {
    "text": "now if I run the script this time with two servers zero downtime actually works we guarantee there's no downtime because",
    "start": "3533460",
    "end": "3539520"
  },
  {
    "text": "there's you know if you can't start an upgrade if someone else is offline so you can never have two people offline at the same time that's great",
    "start": "3539520",
    "end": "3546299"
  },
  {
    "text": "rather eventually upgrade fails why does it fail because of the stuttering",
    "start": "3546299",
    "end": "3553380"
  },
  {
    "text": "we haven't said we can just say stay in version one forever don't do it don't do the upgrade how can",
    "start": "3553380",
    "end": "3559619"
  },
  {
    "text": "we force the upgrade to happen we need to add this fairness thing like if you can upgrade at some point you must",
    "start": "3559619",
    "end": "3565380"
  },
  {
    "text": "upgrade you at least try upgrading don't just stay in an info Loop and never upgrade like if you can't if there's at some point in the system where you know",
    "start": "3565380",
    "end": "3571980"
  },
  {
    "text": "everywhere else is upgraded and you're the last one you at least have to try it okay so adding fairness then makes it",
    "start": "3571980",
    "end": "3578220"
  },
  {
    "text": "all work so that's good now let's add another condition so you know this is good we're sketching our",
    "start": "3578220",
    "end": "3584460"
  },
  {
    "text": "model we're playing around we're getting confidence now let's add a more strict condition which is that all the online",
    "start": "3584460",
    "end": "3589859"
  },
  {
    "text": "servers have to be running the same version they all have to be running V1 or V2 but you can't have a mix because",
    "start": "3589859",
    "end": "3596520"
  },
  {
    "text": "if we have a mix of V1 and V2 it's going to mess up our clients so how do we model that well first of",
    "start": "3596520",
    "end": "3603299"
  },
  {
    "text": "all we Define a set of servers which are online so we say online servers are the",
    "start": "3603299",
    "end": "3608460"
  },
  {
    "text": "set of servers where they are not offline okay that's easy enough and now we want something which is always true it's",
    "start": "3608460",
    "end": "3614099"
  },
  {
    "text": "always true that for the set of servers which are online",
    "start": "3614099",
    "end": "3619200"
  },
  {
    "text": "if you pick any two of them they will have the same server state they're both bv1 or both vv2",
    "start": "3619200",
    "end": "3625500"
  },
  {
    "text": "but they will not they won't be different so that is our same version requirement that's our constraint for",
    "start": "3625500",
    "end": "3630960"
  },
  {
    "text": "same version so he run the script with a new property boom we get an error",
    "start": "3630960",
    "end": "3637740"
  },
  {
    "text": "and then if we look at this trace of what's happening it says well first of all they were both V1",
    "start": "3637740",
    "end": "3643319"
  },
  {
    "text": "and then S1 went offline and S2 is still V1 and then S2 S1 got upgraded to V2 and",
    "start": "3643319",
    "end": "3650160"
  },
  {
    "text": "S2 hasn't even started upgrade so now they're both the different versions the first one is V2 and second",
    "start": "3650160",
    "end": "3655740"
  },
  {
    "text": "three one and we we meet our requirement so we have confidence that that fix did",
    "start": "3655740",
    "end": "3661200"
  },
  {
    "text": "not actually work okay now how can we fix this I'm going to suggest we use a",
    "start": "3661200",
    "end": "3666299"
  },
  {
    "text": "load balancer so the load balancer is going to only point to V1 servers or only point to V2",
    "start": "3666299",
    "end": "3671819"
  },
  {
    "text": "servers and you're not going to mix them in so from a client's point of view I'm only going to see the same version",
    "start": "3671819",
    "end": "3677339"
  },
  {
    "text": "so let's how do we Implement a load balancer to see so the initial of state is now we're going to have a new thing",
    "start": "3677339",
    "end": "3682740"
  },
  {
    "text": "called a load balancer and again from the model point of view I don't actually need to implement a load band so all I need to do is say is it version one or",
    "start": "3682740",
    "end": "3688319"
  },
  {
    "text": "version two so it's just going to say am I pointing to version One servers or version two servers how's it actually happens in the",
    "start": "3688319",
    "end": "3695220"
  },
  {
    "text": "real thing I don't care because this is a model I'm just doing the very Basics right so the online servers are now slightly",
    "start": "3695220",
    "end": "3702420"
  },
  {
    "text": "different if the load balance is V1 the online servers are all the ones which are V1 and if the load balancer is",
    "start": "3702420",
    "end": "3709020"
  },
  {
    "text": "a V2 the online servers are all the ones which are V2 so that's our that's how we would model",
    "start": "3709020",
    "end": "3715380"
  },
  {
    "text": "our load balancer now obviously the real thing is a lot more complicated but from a model this is you know this we're trying to keep it simple here",
    "start": "3715380",
    "end": "3723000"
  },
  {
    "text": "now when can the load balancer switch from pointer to V1 service to poignant to V2 servers well it can switch when",
    "start": "3723000",
    "end": "3728819"
  },
  {
    "text": "one server has been successfully upgraded or you've you know you could see maybe two servers but you know for this case any if any server upgrades to",
    "start": "3728819",
    "end": "3735420"
  },
  {
    "text": "V2 I can switch the load balancer to point to it okay so we now have a new step in our in our",
    "start": "3735420",
    "end": "3741960"
  },
  {
    "text": "finishing upgrade which is if if an upgrade is essentially finished the load balancer can now be version two",
    "start": "3741960",
    "end": "3748859"
  },
  {
    "text": "so now if we run the script with the load balancer the zero downtime works you never have any downtime everything",
    "start": "3748859",
    "end": "3754920"
  },
  {
    "text": "is eventually upgraded and the same version works so if I just run the code I'd prove it",
    "start": "3754920",
    "end": "3761700"
  },
  {
    "text": "to you go back here",
    "start": "3761700",
    "end": "3764960"
  },
  {
    "text": "zero down time open up the model",
    "start": "3771299",
    "end": "3777299"
  },
  {
    "text": "and you can see here is The Code by the way so you know it's like 50 lines of code",
    "start": "3777299",
    "end": "3782760"
  },
  {
    "text": "it's not that much here are all our properties zero downtime eventually upgraded same version right",
    "start": "3782760",
    "end": "3788940"
  },
  {
    "text": "right we take this model we run it and it runs it and it's checking all the",
    "start": "3788940",
    "end": "3795599"
  },
  {
    "text": "possible States and uh no errors",
    "start": "3795599",
    "end": "3800640"
  },
  {
    "text": "now if you said I want the load balance to always have at least two servers",
    "start": "3800640",
    "end": "3805799"
  },
  {
    "text": "um you know which you might want to do then you'd have to have I've only got two servers in here so it's never going",
    "start": "3805799",
    "end": "3811920"
  },
  {
    "text": "to work but if you had like model it with five servers and you could say at least two have to be up at all times or",
    "start": "3811920",
    "end": "3817020"
  },
  {
    "text": "something you can just you can see you could extend the model to do that kind of thing really easily yay",
    "start": "3817020",
    "end": "3823079"
  },
  {
    "text": "so who thinks this algorithm is now right I just ran the model Checker and it",
    "start": "3823079",
    "end": "3828359"
  },
  {
    "text": "didn't give me any errors do you think this algorithm is right the algorithm I just showed you",
    "start": "3828359",
    "end": "3835099"
  },
  {
    "text": "what is your confidence in the design of this zero downtime deployment process like the first one didn't work",
    "start": "3835619",
    "end": "3841799"
  },
  {
    "text": "and then I added various fixes and I've run it through the model checker and this is good so it looks like people",
    "start": "3841799",
    "end": "3849480"
  },
  {
    "text": "now there's a few people who are not 100 confident um yeah some people are not confident",
    "start": "3849480",
    "end": "3854700"
  },
  {
    "text": "either way but it's a lot more than it was at the beginning when people were 100 people are not common at all",
    "start": "3854700",
    "end": "3860940"
  },
  {
    "text": "so the people who are not confident either way or the people who don't think it's correct",
    "start": "3860940",
    "end": "3866099"
  },
  {
    "text": "um you know obviously we have to go into more detail this but I think I could prove I think I could if I spent a couple hours with you",
    "start": "3866099",
    "end": "3872640"
  },
  {
    "text": "I think I could convince you that this actually was a correct algorithm Maybe not maybe I'm wrong maybe I missed",
    "start": "3872640",
    "end": "3878040"
  },
  {
    "text": "something okay so that's our sketch complete and",
    "start": "3878040",
    "end": "3884099"
  },
  {
    "text": "again we just only spent 10 minutes on it so you can actually think of it as sort of agile modeling",
    "start": "3884099",
    "end": "3889260"
  },
  {
    "text": "right for concurrent systems so we're doing some sketch we're playing with some things we're finding out certain",
    "start": "3889260",
    "end": "3894480"
  },
  {
    "text": "things don't work certain things do work it's all about getting confidence so the most common question and I'm just",
    "start": "3894480",
    "end": "3900240"
  },
  {
    "text": "I'm sorry a bit of a few minutes over I'm just finishing up now the most common question people say how do you convert this to code right the answer is",
    "start": "3900240",
    "end": "3907440"
  },
  {
    "text": "it doesn't convert to code it's not a code generator it's a model just like if I have a wooden model of a building it",
    "start": "3907440",
    "end": "3914160"
  },
  {
    "text": "doesn't magically Sprout and turn into a giant skyscraper right it's a model it's a way for thinking about the building",
    "start": "3914160",
    "end": "3919500"
  },
  {
    "text": "but it's not the actual construction process so it's again it's all about having confidence in the design before you",
    "start": "3919500",
    "end": "3925079"
  },
  {
    "text": "start writing code so that's model checking for you okay so",
    "start": "3925079",
    "end": "3930359"
  },
  {
    "text": "hopefully you can see that TLA plus it's not actually that scary the syntax looks a bit weird but the whole thing of model",
    "start": "3930359",
    "end": "3935700"
  },
  {
    "text": "checking is it's just a nice thing to have it's not that scary um it's really nice for sketching things",
    "start": "3935700",
    "end": "3940859"
  },
  {
    "text": "in a few hours you can actually play with it and get some confidence in your design I would say if you're doing anything with concurrency it's really",
    "start": "3940859",
    "end": "3947400"
  },
  {
    "text": "really important I actually would say it's essential and it's just another tool in your toolbox you know you know how to do unit tests you know how to do",
    "start": "3947400",
    "end": "3954540"
  },
  {
    "text": "um type driven design or whatever tdd or whatever it's like you know these are just tools you have it's another tool in",
    "start": "3954540",
    "end": "3960660"
  },
  {
    "text": "your toolbox that I think is a professional developer you should at least have some knowledge about now TLA plus is really big system it can",
    "start": "3960660",
    "end": "3966660"
  },
  {
    "text": "do way more than I just showed you I'm just doing a tiny tiny piece of what it can do but you're not even going to get into",
    "start": "3966660",
    "end": "3972420"
  },
  {
    "text": "that so if you want more information on TLA plus there's a pay as a home page there's a videos there's books there's",
    "start": "3972420",
    "end": "3978599"
  },
  {
    "text": "papers there's a long book by Leslie Lampert um it's a bit mathematical but it's not actually that hard but if you want a",
    "start": "3978599",
    "end": "3986339"
  },
  {
    "text": "more programmer friendly thing check out stuff by Hillel Wayne he has a book called learn TLA he has a website called",
    "start": "3986339",
    "end": "3992579"
  },
  {
    "text": "learn to lay and he does trainings for pro programmer-centric trainings so if",
    "start": "3992579",
    "end": "3998339"
  },
  {
    "text": "you are involved in concurrency and you want to learn more you know obviously a more deep in-depth thing check him out",
    "start": "3998339",
    "end": "4005299"
  },
  {
    "text": "and and he'll do a training for your team so I'm going to put the slides and video",
    "start": "4005299",
    "end": "4010880"
  },
  {
    "text": "up here on my website the F sharp final profit TLA plus um if you want more about property-based",
    "start": "4010880",
    "end": "4017660"
  },
  {
    "text": "testing I also have stuff about that I have my book which people seem to like and you can contact me on Twitter and",
    "start": "4017660",
    "end": "4025220"
  },
  {
    "text": "thank you very much I'll be here I don't have time for questions but I will I'll stick around here if you've got questions for me so thank you very much",
    "start": "4025220",
    "end": "4030619"
  },
  {
    "text": "for coming [Applause]",
    "start": "4030619",
    "end": "4036419"
  }
]