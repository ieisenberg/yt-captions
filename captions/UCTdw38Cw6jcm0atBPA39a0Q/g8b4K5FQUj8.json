[
  {
    "start": "0",
    "end": "25000"
  },
  {
    "text": "good afternoon or good morning uh thank you for coming to my talk my name is ignot and we'll talk about TPMS and the",
    "start": "7040",
    "end": "14559"
  },
  {
    "text": "Linux Kel today um I work for claer who here knows",
    "start": "14559",
    "end": "20119"
  },
  {
    "text": "claer okay I'll not explain what we do then uh yeah but build myself I do Linux",
    "start": "20119",
    "end": "28400"
  },
  {
    "start": "25000",
    "end": "63000"
  },
  {
    "text": "at claer uh I'm actually a Die Hard Linux fan that's why I'm presenting from",
    "start": "28400",
    "end": "34120"
  },
  {
    "text": "a Mac because I know you can't trust Linux do two things power management and",
    "start": "34120",
    "end": "41120"
  },
  {
    "text": "connecting to projectors right uh yeah I'm passionate about",
    "start": "41120",
    "end": "46320"
  },
  {
    "text": "system security and performance and I enjoy lowlevel programming uh Linux kernel drivers bootloaders and other",
    "start": "46320",
    "end": "53480"
  },
  {
    "text": "stuff reading and unsafe programming languages so I'm really disappointed having rust in the kernel actually it's",
    "start": "53480",
    "end": "59239"
  },
  {
    "text": "not fun uh yeah but today we're going to talk about uh",
    "start": "59239",
    "end": "65360"
  },
  {
    "start": "63000",
    "end": "144000"
  },
  {
    "text": "TPMS uh who here knows what a TPM is yeah many folks a small recap so a",
    "start": "65360",
    "end": "74119"
  },
  {
    "text": "TPM is a small chip security chip uh",
    "start": "74119",
    "end": "79280"
  },
  {
    "text": "present in mod laptops and servers alike uh most of the time it is a",
    "start": "79280",
    "end": "86600"
  },
  {
    "text": "discrete security chip um I I know like some more CPUs have like an ftpm which",
    "start": "86600",
    "end": "92799"
  },
  {
    "text": "is kind of like on so version of TPM it's usually passive non-intrusive uh so",
    "start": "92799",
    "end": "100960"
  },
  {
    "text": "it doesn't like hook into your memory or uh you know like messes with your CPU it",
    "start": "100960",
    "end": "106759"
  },
  {
    "text": "only responds to Common so if you ask it to do something it will do it for you but if you don't it will do nothing so",
    "start": "106759",
    "end": "113119"
  },
  {
    "text": "it's kind of like it's not an invasive NSA device which spies on you but even though it's a passive and",
    "start": "113119",
    "end": "121360"
  },
  {
    "text": "non intrusive it's a building blocker and foundation for platform Integrity",
    "start": "121360",
    "end": "126680"
  },
  {
    "text": "authentication and remote attestation and as the the primary",
    "start": "126680",
    "end": "132400"
  },
  {
    "text": "function of a security chip what it should do it should handle cryptographic keys and can do some crypto right so",
    "start": "132400",
    "end": "137840"
  },
  {
    "text": "this is what TPMS are doing it can handle cryptographic Keys um if you ever read or went to a",
    "start": "137840",
    "end": "146599"
  },
  {
    "start": "144000",
    "end": "251000"
  },
  {
    "text": "talk about the TPM most of the time when we talk about TPMS we talk about a thing",
    "start": "146599",
    "end": "152160"
  },
  {
    "text": "called remote attestation right so like where the TPM is a basic foundational block of it so and it allows you the",
    "start": "152160",
    "end": "159480"
  },
  {
    "text": "remote attester to actually remotely validate the Integrity uh of software and firmware",
    "start": "159480",
    "end": "167280"
  },
  {
    "text": "running on your system so this is what the TPMS are most useful about but this talk is not about it so I don't want to",
    "start": "167280",
    "end": "173640"
  },
  {
    "text": "repeat that this is a talk about using the TPM from a application perspective",
    "start": "173640",
    "end": "179159"
  },
  {
    "text": "like let's say an application developer TPM you know like if TPM is present",
    "start": "179159",
    "end": "184720"
  },
  {
    "text": "everywhere why can't I use it and like get Hardware security support for my",
    "start": "184720",
    "end": "190200"
  },
  {
    "text": "application and uh yeah and can I store my keys in the TPM and use them without",
    "start": "190200",
    "end": "197480"
  },
  {
    "text": "exposing the key material to the main memory uh basically who who just been",
    "start": "197480",
    "end": "204920"
  },
  {
    "text": "downstairs to the uh memory address space talks yeah so",
    "start": "204920",
    "end": "210840"
  },
  {
    "text": "you kind of understand now why it's important right because if the keys are exposed to the main memory it's in your",
    "start": "210840",
    "end": "216799"
  },
  {
    "text": "process address space right and if something goes wrong uh your application",
    "start": "216799",
    "end": "222159"
  },
  {
    "text": "is compromised the attacker can get those keys from memory if they're not in the memory it's much harder to actually",
    "start": "222159",
    "end": "227560"
  },
  {
    "text": "do harm so yeah TPMS are present everywhere in every uh standard",
    "start": "227560",
    "end": "233840"
  },
  {
    "text": "Computing device but there is almost no actually application support for storing",
    "start": "233840",
    "end": "239439"
  },
  {
    "text": "keys in the TPM like SSH doesn't do it uh I don't know gpg doesn't do it like",
    "start": "239439",
    "end": "245400"
  },
  {
    "text": "many things don't do it like almost no no one is using it so why right and to",
    "start": "245400",
    "end": "251760"
  },
  {
    "start": "251000",
    "end": "565000"
  },
  {
    "text": "understand that like there is some complexity of interacting with cpms and mod operating system so as an",
    "start": "251760",
    "end": "257880"
  },
  {
    "text": "application developer this is my mental model right so I write code I want to",
    "start": "257880",
    "end": "263240"
  },
  {
    "text": "use TPM right simple and easy uh this is where I want to start right but when I",
    "start": "263240",
    "end": "270000"
  },
  {
    "text": "start digging into turn outs it's not that simple of course uh my application",
    "start": "270000",
    "end": "275440"
  },
  {
    "text": "is running on an operating system so uh I cannot interface with Hardware directly in the operating system so I",
    "start": "275440",
    "end": "282160"
  },
  {
    "text": "have to use through a hardware uh operating system level instruction and on Linux I have to interface with a a",
    "start": "282160",
    "end": "290000"
  },
  {
    "text": "special device created by the operating system right okay but this is not",
    "start": "290000",
    "end": "295840"
  },
  {
    "text": "it so apparently what I also need is a thing called the resource manager so",
    "start": "295840",
    "end": "302520"
  },
  {
    "text": "TPMS uh are useful because they're very cheap that's why it's everyone's putting them everywhere but on the other hand",
    "start": "302520",
    "end": "309639"
  },
  {
    "text": "they are very uh low powered devices so they cannot handle uh like on morning",
    "start": "309639",
    "end": "315000"
  },
  {
    "text": "operating system you have many applications so it's a multitasking system right but TPMS cannot handle",
    "start": "315000",
    "end": "320400"
  },
  {
    "text": "concurrent requests or they can have only limited amount of concurrent request so the way how people solve that",
    "start": "320400",
    "end": "327240"
  },
  {
    "text": "is like you have some kind of proxy which called the resource manager which kind of like serializes access from",
    "start": "327240",
    "end": "333120"
  },
  {
    "text": "multiple entities to the TPM so TPM can process the data properly right so I",
    "start": "333120",
    "end": "339600"
  },
  {
    "text": "need that and but again this is not only that uh I also need a TPM library right",
    "start": "339600",
    "end": "346600"
  },
  {
    "text": "so uh because to communicate with the resource manager there is some kind of an API and to abstract it properly I",
    "start": "346600",
    "end": "354120"
  },
  {
    "text": "need a high level uh library and like the blue thing is a hardware right the yellow thing is provided by the",
    "start": "354120",
    "end": "360080"
  },
  {
    "text": "operating system and the purple thing the green thing is what I write myself and the purple thing is my third party",
    "start": "360080",
    "end": "367120"
  },
  {
    "text": "dependencies right so let's actually zoom into resource manager and it's",
    "start": "367120",
    "end": "372960"
  },
  {
    "text": "actually uh a little bit complicated there as well so the first iteration of the resource manager was a user space",
    "start": "372960",
    "end": "380919"
  },
  {
    "text": "demon uh which is was very confusing for application developers so now just to",
    "start": "380919",
    "end": "386240"
  },
  {
    "text": "talk to a hardware device you need a user space service assistant the service to mediate that access like what if that",
    "start": "386240",
    "end": "393400"
  },
  {
    "text": "ser and that service is usually written and see like what if it crashes right so like well you can't talk to a TPM if",
    "start": "393400",
    "end": "400240"
  },
  {
    "text": "some service is not running which is really confusing for the application developers um later like the kernel",
    "start": "400240",
    "end": "407400"
  },
  {
    "text": "Community actually recognized that problem so they created an in kernel",
    "start": "407400",
    "end": "412479"
  },
  {
    "text": "resource manager so now on Modern Linux instead of interacting with Dev TPM you",
    "start": "412479",
    "end": "417720"
  },
  {
    "text": "interact with a Dev TPM rm0 which RM stands for the resource manager it's",
    "start": "417720",
    "end": "423680"
  },
  {
    "text": "inside the kernel so it will do most of the resource manager work and it's always there like as long as your kernel",
    "start": "423680",
    "end": "430680"
  },
  {
    "text": "doesn't crash of course right but if it does you have bigger problems so yeah uh",
    "start": "430680",
    "end": "436879"
  },
  {
    "text": "these days you can kind of get away with the inernal resource",
    "start": "436879",
    "end": "442440"
  },
  {
    "text": "man but if it goes now let's zoom into the TPM library and this like the ecosystem is not great as well so we",
    "start": "442440",
    "end": "449599"
  },
  {
    "text": "have two major competing implementation which is like Intel TSS trusted software",
    "start": "449599",
    "end": "455680"
  },
  {
    "text": "stack and we have the IBM TSS uh trusted software stack and the problem with",
    "start": "455680",
    "end": "462199"
  },
  {
    "text": "these they have complet completely incompatible apis so like if you want",
    "start": "462199",
    "end": "467840"
  },
  {
    "text": "use one you cannot switch to the other and this is where if I'm writing like you know an application for Linux like I",
    "start": "467840",
    "end": "474680"
  },
  {
    "text": "need to select it beforehand or write a complicated obstruction layer",
    "start": "474680",
    "end": "480080"
  },
  {
    "text": "uh yeah but if I just pick one like maybe my software will not work on every distribution because some distributions",
    "start": "480080",
    "end": "486120"
  },
  {
    "text": "might either package one or the other but not both right also there are some languages",
    "start": "486120",
    "end": "492840"
  },
  {
    "text": "which are more you know opinionated and they say like we don't even like the external dependencies we will write our",
    "start": "492840",
    "end": "499639"
  },
  {
    "text": "own stuff so it's like like Google for example they wrote The Go TPM a pure go library to interface with the TPM for go",
    "start": "499639",
    "end": "507520"
  },
  {
    "text": "and I imagine I haven't researched it but I imagine something is similar happening to rust rust probably also",
    "start": "507520",
    "end": "513560"
  },
  {
    "text": "have there are crates out there that interface with the TPM so yeah now you have all this complexity of like you",
    "start": "513560",
    "end": "520320"
  },
  {
    "text": "need to think about resource managers the TPM library and yeah uh so for example this",
    "start": "520320",
    "end": "527959"
  },
  {
    "text": "is a snapshot from tpm2 software stack from their official GitHub page showing",
    "start": "527959",
    "end": "533600"
  },
  {
    "text": "all the components of this TPM ecosystem which you as an application developer somehow need to understand so you can",
    "start": "533600",
    "end": "540440"
  },
  {
    "text": "interface with different thing on different layers and you have to actually pick the proper one for your",
    "start": "540440",
    "end": "546760"
  },
  {
    "text": "use case which which is really really confusing like it's like only a small amount of",
    "start": "546760",
    "end": "553560"
  },
  {
    "text": "people in the world actually understand all of that right uh but okay you will",
    "start": "553560",
    "end": "559640"
  },
  {
    "text": "do your research you will do everything everything is ready you code is ready the problem is if you try to run your",
    "start": "559640",
    "end": "566120"
  },
  {
    "start": "565000",
    "end": "660000"
  },
  {
    "text": "code you'll still not be able to do anything because if you try interface with a a TPM or resource manager on",
    "start": "566120",
    "end": "572959"
  },
  {
    "text": "Linux by default you'll not be allowed to do so right so uh and the reason is",
    "start": "572959",
    "end": "578040"
  },
  {
    "text": "because well this is my like a very standard B barebones Debian installation so by",
    "start": "578040",
    "end": "584399"
  },
  {
    "text": "default both the TPM and the resource manager only allow root to access it",
    "start": "584399",
    "end": "591399"
  },
  {
    "text": "right so confusingly confusingly if you do install a TPM IBM TPM software stack on",
    "start": "591399",
    "end": "599839"
  },
  {
    "text": "Debian at least well it will do something uh but turns out well that",
    "start": "599839",
    "end": "606839"
  },
  {
    "text": "your TPM devices now uh can be read and written to by a special new user called",
    "start": "606839",
    "end": "613000"
  },
  {
    "text": "TSS and the resource manager uh can be also be accessed via TSS group so well",
    "start": "613000",
    "end": "620040"
  },
  {
    "text": "it's better right so your application can be in the TSS group to access the",
    "start": "620040",
    "end": "625800"
  },
  {
    "text": "TPM but then you have to under like properly package it for particular distribution and for example if your",
    "start": "625800",
    "end": "632320"
  },
  {
    "text": "application is in go and using go TPM do you like make a dependency to the",
    "start": "632320",
    "end": "638600"
  },
  {
    "text": "tpm2 tools which are C just to get the TSS user create group created so you can join the group yeah so",
    "start": "638600",
    "end": "645839"
  },
  {
    "text": "it's so yeah the interface is a mess right so it's very hard to get to the",
    "start": "645839",
    "end": "651240"
  },
  {
    "text": "TPM from a regular application",
    "start": "651240",
    "end": "655760"
  },
  {
    "text": "code what if there is another way right so and this brings us to Linux kernel",
    "start": "656760",
    "end": "661920"
  },
  {
    "start": "660000",
    "end": "755000"
  },
  {
    "text": "key retention Service uh who've been here last year uh yeah uh last year I actually did",
    "start": "661920",
    "end": "668839"
  },
  {
    "text": "a very comprehensive talk of on the Linux I call it the Linux key",
    "start": "668839",
    "end": "673959"
  },
  {
    "text": "store uh all the bits and pieces I will repeat some of that here but basically",
    "start": "673959",
    "end": "680240"
  },
  {
    "text": "it's a service inside the Linux kernel which allows you to store and manage cryptography keys and",
    "start": "680240",
    "end": "686160"
  },
  {
    "text": "secrets uh so the way how it works is like of course you have multiple application you have your",
    "start": "686160",
    "end": "692320"
  },
  {
    "text": "kernel uh yeah and and it provides you basically three system calls like at Key",
    "start": "692320",
    "end": "697480"
  },
  {
    "text": "kctl and request key and for example applications can use these set of system",
    "start": "697480",
    "end": "703399"
  },
  {
    "text": "calls to put keys or Secrets inside the kernel like inside the kernel uh address",
    "start": "703399",
    "end": "709959"
  },
  {
    "text": "memory space and the nice thing about it uh yeah and was originally developed for",
    "start": "709959",
    "end": "716639"
  },
  {
    "text": "uh inernal crypto services for example dis encryption so the dis encryption in",
    "start": "716639",
    "end": "721920"
  },
  {
    "text": "decryption of data happens inside the kernel but the application needs to provide the key to the kernel so it uses",
    "start": "721920",
    "end": "727639"
  },
  {
    "text": "this set of system calls to do like dis encryption or file system level encryption but later it was extended so",
    "start": "727639",
    "end": "735079"
  },
  {
    "text": "the applications themselves can use a system call to manage these keys and provide the cryptographic operations and",
    "start": "735079",
    "end": "742199"
  },
  {
    "text": "the nice thing about when you put key inside the kernel it becomes a full-fledged kernel object right so it has Associated permissions",
    "start": "742199",
    "end": "750600"
  },
  {
    "text": "and other like stuff you get from kernel kernel entities right so internally uh",
    "start": "750600",
    "end": "757279"
  },
  {
    "start": "755000",
    "end": "832000"
  },
  {
    "text": "the keys are uh key objects are categorized into key rings so key rings",
    "start": "757279",
    "end": "763120"
  },
  {
    "text": "are like a collection of other key Rings or keys so uh yeah a key is like a file",
    "start": "763120",
    "end": "769519"
  },
  {
    "text": "on a file system but a key ring like is is like a directory but the difference is that for example a single key can be",
    "start": "769519",
    "end": "776440"
  },
  {
    "text": "present simultaneously multiple key rings and key Rings actually defile the",
    "start": "776440",
    "end": "781680"
  },
  {
    "text": "lifetime of the key so for example if the key is not present in any of the key ring so you detach it from the like last",
    "start": "781680",
    "end": "788160"
  },
  {
    "text": "key ring the kernel securely destroys that key so it's not only like freeze the memory associated with the key it",
    "start": "788160",
    "end": "794760"
  },
  {
    "text": "also like zeros the memory properly so and this is also very useful for if your",
    "start": "794760",
    "end": "801279"
  },
  {
    "text": "uh software is written in you know like high level language with a garbage collector like Java because zeroing out",
    "start": "801279",
    "end": "808600"
  },
  {
    "text": "keys in Java cover and even go is not a solved problem and if you just store your keys inside the kernel the kernel",
    "start": "808600",
    "end": "814199"
  },
  {
    "text": "will automatically do it for you and you don't have to deal with that and you don't have to fight you know like the",
    "start": "814199",
    "end": "820000"
  },
  {
    "text": "whatever that garbage collector pipeline is work doing yeah and and if they're",
    "start": "820000",
    "end": "826399"
  },
  {
    "text": "also securely destroyed even if your application crashes uh one simple example to get you",
    "start": "826399",
    "end": "833320"
  },
  {
    "start": "832000",
    "end": "936000"
  },
  {
    "text": "a taste of what a like a Linux key store looks like so imagine we have a a Linux",
    "start": "833320",
    "end": "838759"
  },
  {
    "text": "system with two users Alex and Bob and as you can see they don't share any shared credentials so they not part of a",
    "start": "838759",
    "end": "846399"
  },
  {
    "text": "shared group nothing like two different new users and so what Alice can do for",
    "start": "846399",
    "end": "851639"
  },
  {
    "text": "example let's say Alice wants to share a secret with Bob so Alice can create a",
    "start": "851639",
    "end": "856839"
  },
  {
    "text": "secret like this is her secret Hunter to and she can put it into the Kel key store and all the key store objects are",
    "start": "856839",
    "end": "864320"
  },
  {
    "text": "represented by unique serial number so you get the serial number back",
    "start": "864320",
    "end": "870079"
  },
  {
    "text": "uh so what Bob can do Bob can actually if Bob is expecting a secret from Alice",
    "start": "870079",
    "end": "875480"
  },
  {
    "text": "what Bob can do Bob can create a new key ring uh and he will also get a serial",
    "start": "875480",
    "end": "881399"
  },
  {
    "text": "number and what Bob can do Bob can set permissions on that keying uh which",
    "start": "881399",
    "end": "886680"
  },
  {
    "text": "basically allows any user on the system to write to that key ring and writing to a key ring means putting keys into the",
    "start": "886680",
    "end": "892480"
  },
  {
    "text": "key ring right but not reading even from that so then Bob can communicate he's",
    "start": "892480",
    "end": "898320"
  },
  {
    "text": "King a serial number to Alice and Alice can move her secret to Bob's keing",
    "start": "898320",
    "end": "904000"
  },
  {
    "text": "easily right and then we can Bob suddenly can either access the secret information so Bob can access the secret",
    "start": "904000",
    "end": "911600"
  },
  {
    "text": "because Bob now possesses the secret uh created early in in Bob's kearing",
    "start": "911600",
    "end": "918199"
  },
  {
    "text": "whereas because we moved it Alice cannot read the secret anymore because Alice does not own the secret so this is how",
    "start": "918199",
    "end": "925360"
  },
  {
    "text": "useful the kernel key object you can like you know like play with permissions to get like really fine grain access",
    "start": "925360",
    "end": "931759"
  },
  {
    "text": "control to your secrets inside the kernel with respect to keys keys are",
    "start": "931759",
    "end": "937920"
  },
  {
    "start": "936000",
    "end": "1078000"
  },
  {
    "text": "categorized with several types and they have different properties so the simplest form which we just saw in the",
    "start": "937920",
    "end": "944319"
  },
  {
    "text": "example is we call the user key so the user Keys imagine there is a process it",
    "start": "944319",
    "end": "950040"
  },
  {
    "text": "has some kind of secret or a key basically yeah we call it a plain text cryptographic material what the process",
    "start": "950040",
    "end": "957959"
  },
  {
    "text": "can do can the process can put it inside the kernel and another process if it has",
    "start": "957959",
    "end": "964519"
  },
  {
    "text": "permissions to do so can read that secret back so this is what Bob did right or the same process can read it",
    "start": "964519",
    "end": "972560"
  },
  {
    "text": "back there is a another key type called log on key so log on key is kind of",
    "start": "972759",
    "end": "978120"
  },
  {
    "text": "starts the same way so a process has a secret the process puts it inside the kernel but the difference from the user",
    "start": "978120",
    "end": "984839"
  },
  {
    "text": "key is once inside the kernel and nobody can read it back at all",
    "start": "984839",
    "end": "990120"
  },
  {
    "text": "uh so it yeah if you don't even if you have access you can never read this",
    "start": "990120",
    "end": "995399"
  },
  {
    "text": "plain text material back from the kernel and why it's useful so yeah it's actually useful to share secrets with",
    "start": "995399",
    "end": "1002040"
  },
  {
    "text": "the kernel itself or in kernel uh cryptographic operations like dis encryption so for example if you run a",
    "start": "1002040",
    "end": "1008079"
  },
  {
    "text": "modern Linux distribution and you use full dis encryption you would see that",
    "start": "1008079",
    "end": "1013240"
  },
  {
    "text": "uh when you unlock the dis your password is actually shared with the kernel uh",
    "start": "1013240",
    "end": "1018600"
  },
  {
    "text": "while log on key there is also an asymmetric key type",
    "start": "1018600",
    "end": "1023839"
  },
  {
    "text": "so imagine unfortunately the kernel only supports RSA keys at the moment so uh you have an",
    "start": "1023839",
    "end": "1031360"
  },
  {
    "text": "RSA key uh one process can't put it inside the kernel and either the same",
    "start": "1031360",
    "end": "1037280"
  },
  {
    "text": "process or another process which have appropriate permission they don't need to uh that process do not have to read",
    "start": "1037280",
    "end": "1044558"
  },
  {
    "text": "the key back but they can use that handle of the key and perform cryptographic oper ation like decryption",
    "start": "1044559",
    "end": "1050440"
  },
  {
    "text": "with the private key part like decryption or signing right so it kind of like imagine like the kernel becomes",
    "start": "1050440",
    "end": "1056440"
  },
  {
    "text": "this like simple software HSM for for the stuff right yeah and the nice thing",
    "start": "1056440",
    "end": "1063280"
  },
  {
    "text": "about it like these are just simp system calls available to any process on the",
    "start": "1063280",
    "end": "1068840"
  },
  {
    "text": "system with no extra permission unless the want set by the processes themselves for their key objects right but anyone",
    "start": "1068840",
    "end": "1075000"
  },
  {
    "text": "can accept these system calls so the question is like would it",
    "start": "1075000",
    "end": "1080080"
  },
  {
    "start": "1078000",
    "end": "1197000"
  },
  {
    "text": "be cool to combine this stuff which is like a software based HSM and the TPM inside your platform into one single",
    "start": "1080080",
    "end": "1086400"
  },
  {
    "text": "entity to get like something closer to a hardware HSM and Linux already kind of did that",
    "start": "1086400",
    "end": "1094840"
  },
  {
    "text": "partially so there is another key type uh called a trusted key so the problem",
    "start": "1094840",
    "end": "1100840"
  },
  {
    "text": "with all the previous uh key types that there is a still a moment in time where",
    "start": "1100840",
    "end": "1109000"
  },
  {
    "text": "a plain text cryptographic key is present in some process user address space right so like how can we ensure",
    "start": "1109000",
    "end": "1116880"
  },
  {
    "text": "that the keys are only in play Tex available in the kernel address space but never available to user space",
    "start": "1116880",
    "end": "1122880"
  },
  {
    "text": "address space which is because most processes uh most code is being compromised is a user space process",
    "start": "1122880",
    "end": "1128880"
  },
  {
    "text": "right so we have a rra key so imagine you have some plain text cryptographic material you can share with the kernel",
    "start": "1128880",
    "end": "1135799"
  },
  {
    "text": "so you can out of band encrypt it to your particular machine's TPM and create",
    "start": "1135799",
    "end": "1141799"
  },
  {
    "text": "an encrypted blob and if you provision it as a trusted key so when you put it",
    "start": "1141799",
    "end": "1147280"
  },
  {
    "text": "inside the kernel the kernel will automatically use the TPM and unwrap the",
    "start": "1147280",
    "end": "1153400"
  },
  {
    "text": "uh the key inside the the kernel address space so inside the kernel uh address space it will be the plain text",
    "start": "1153400",
    "end": "1158880"
  },
  {
    "text": "cryptographic material and here it's encrypted blob and when you basically try to read it back the kernel will",
    "start": "1158880",
    "end": "1165240"
  },
  {
    "text": "automatically wrap it again so like you cannot have a plain text cryptographic material in user space right which is",
    "start": "1165240",
    "end": "1173320"
  },
  {
    "text": "very handy but originally when it was introduced it wasn't very useful right",
    "start": "1173320",
    "end": "1179679"
  },
  {
    "text": "so like if you have a key and it's only in plain text in in that the kernal it's",
    "start": "1179679",
    "end": "1186159"
  },
  {
    "text": "only useful for this one particular use case of sharing the key with uh for dis",
    "start": "1186159",
    "end": "1191760"
  },
  {
    "text": "encryption that's it right so turns out actually Linux has a",
    "start": "1191760",
    "end": "1199440"
  },
  {
    "start": "1197000",
    "end": "1416000"
  },
  {
    "text": "like the key store is one subsystem and Linux has a Linux crypto API with the which is a different subsystem they're",
    "start": "1199440",
    "end": "1206320"
  },
  {
    "text": "kind of like working together but that they're not part of the same subsystem they have different maintainers and the",
    "start": "1206320",
    "end": "1212760"
  },
  {
    "text": "Lin crypto API is actually interesting in a sense that you can use your Linux kernel as a crypto library right so like",
    "start": "1212760",
    "end": "1219720"
  },
  {
    "text": "if you want to just encrypt some data and you like let's say you're running on a very low-end device with where you",
    "start": "1219720",
    "end": "1225960"
  },
  {
    "text": "only have Linux and your application and you cannot even afford to link open SSL so you can use ask the colonel to do",
    "start": "1225960",
    "end": "1232520"
  },
  {
    "text": "encryption for you without having any crypto code in your application so what you can do is the process can create a",
    "start": "1232520",
    "end": "1238760"
  },
  {
    "text": "special socket type but it's not a network socket it's called a crypto socket and it the socket is basically a",
    "start": "1238760",
    "end": "1244520"
  },
  {
    "text": "communication Channel between your process and the kernel and the kernel",
    "start": "1244520",
    "end": "1249760"
  },
  {
    "text": "internally will create a crypto algorithm instance inside",
    "start": "1249760",
    "end": "1255600"
  },
  {
    "text": "uh inside the colonal address space and uh then what the process does the",
    "start": "1255600",
    "end": "1261080"
  },
  {
    "text": "process provides the encryption key to the kernel and the kernel will put it",
    "start": "1261080",
    "end": "1266280"
  },
  {
    "text": "there right and then when you want to encrypt or decrypt some data you kind of like like similar as a network",
    "start": "1266280",
    "end": "1272400"
  },
  {
    "text": "communication you send some data to the socket like plain Text data and you can read the encrypted data",
    "start": "1272400",
    "end": "1279760"
  },
  {
    "text": "back the problem with all this as I mentioned it's not part of the crypto",
    "start": "1279760",
    "end": "1285640"
  },
  {
    "text": "Linux crypto key store subsystem so this key not like a kernel key store key it's",
    "start": "1285640",
    "end": "1290799"
  },
  {
    "text": "just a buffer with plain text bite so",
    "start": "1290799",
    "end": "1296960"
  },
  {
    "text": "um so basically we we try to close that Gap and uh what we did we submitted a",
    "start": "1296960",
    "end": "1303880"
  },
  {
    "text": "patch to the kernel that allow combines the Linux crypto API with the Linux key",
    "start": "1303880",
    "end": "1310360"
  },
  {
    "text": "store so they can work together so for example uh you have the rupt key but",
    "start": "1310360",
    "end": "1315480"
  },
  {
    "text": "let's say another process G is given access to use that key but never but",
    "start": "1315480",
    "end": "1320760"
  },
  {
    "text": "they the process can never read the key back so what the process can do it can create a crypto socket right the kernel",
    "start": "1320760",
    "end": "1327880"
  },
  {
    "text": "will do the same thing but instead of uh providing the key material directly in a",
    "start": "1327880",
    "end": "1333240"
  },
  {
    "text": "buffer uh the process can just reference an existing kernel key store by its",
    "start": "1333240",
    "end": "1338360"
  },
  {
    "text": "serial number so if this process instantiated the key that process if it has permission can say hey instantiate",
    "start": "1338360",
    "end": "1346440"
  },
  {
    "text": "uh this crypto socket with the key from from the serial number and then because",
    "start": "1346440",
    "end": "1352440"
  },
  {
    "text": "inside the kernel space the kernel has access to the key because it's in plain text it can basically do that",
    "start": "1352440",
    "end": "1358400"
  },
  {
    "text": "and yeah and then this process can actually encrypt or decrypt data with",
    "start": "1358400",
    "end": "1363600"
  },
  {
    "text": "that key without having access to the cryptographic material itself yeah and but it's available from",
    "start": "1363600",
    "end": "1371320"
  },
  {
    "text": "Linux 6.2 so if you're using an older version you're screwed",
    "start": "1371320",
    "end": "1376600"
  },
  {
    "text": "[Laughter] uh yeah one downside uh one downside of",
    "start": "1376600",
    "end": "1384159"
  },
  {
    "text": "this approach is uh that basically rup keys are bite blobs encrypted to a TPM",
    "start": "1384159",
    "end": "1391320"
  },
  {
    "text": "so they can only technically be considered as symmetric keys so you cannot actually do signing or like",
    "start": "1391320",
    "end": "1399200"
  },
  {
    "text": "private key operation so you cannot literally wrap an RSA key and then use the same thing to uh use that key inside",
    "start": "1399200",
    "end": "1407120"
  },
  {
    "text": "the kernel uh an asymmetric key um I actually wanted to submit a patch",
    "start": "1407120",
    "end": "1414720"
  },
  {
    "text": "uh for that but turns out there is already work going on to do it and",
    "start": "1414720",
    "end": "1419880"
  },
  {
    "text": "well it kind of does same but not the same so this patch Set uh which supposed",
    "start": "1419880",
    "end": "1427120"
  },
  {
    "text": "to be have been merged to 6.11 Kernel which is about to be released but as I",
    "start": "1427120",
    "end": "1432600"
  },
  {
    "text": "looked it wasn't so I guess it wasn't ready so we have to wait more but what it wanted to do is like well you",
    "start": "1432600",
    "end": "1440240"
  },
  {
    "text": "basically take the asymmetric TPM uh the asymmetric key model and like transition",
    "start": "1440240",
    "end": "1446159"
  },
  {
    "text": "it to the TPM instead of like the software key what it will the way how it will work right you have an RSA R key",
    "start": "1446159",
    "end": "1453480"
  },
  {
    "text": "you put it in the TPM and the the kernel will not unrra the key but it will instantiate it inside the TPM so like",
    "start": "1453480",
    "end": "1460679"
  },
  {
    "text": "when another process wants to do like signing on decryption it will go to the",
    "start": "1460679",
    "end": "1465720"
  },
  {
    "text": "kernel and the kernel will forward that request to the TPM still better because now again to access the TPM",
    "start": "1465720",
    "end": "1472720"
  },
  {
    "text": "functionality you technically don't need any you know like being a in a TSS group you're again you're using like the",
    "start": "1472720",
    "end": "1479640"
  },
  {
    "text": "standard uh key store CIS ctls but your private Keys is backed by the",
    "start": "1479640",
    "end": "1485120"
  },
  {
    "text": "TPM by Hardware security but both with symmetric R keys and asymmetric R keys",
    "start": "1485120",
    "end": "1492000"
  },
  {
    "text": "there is one problem which uh needs to be well not needs to be but sometimes",
    "start": "1492000",
    "end": "1497760"
  },
  {
    "text": "it's not very convenient and the problem is the state so generally if you zoom",
    "start": "1497760",
    "end": "1504320"
  },
  {
    "start": "1500000",
    "end": "1723000"
  },
  {
    "text": "out and see how WRA Keys work so the way how you create them you use a random",
    "start": "1504320",
    "end": "1509559"
  },
  {
    "text": "number generator right to create a new key so you generate a key and then you",
    "start": "1509559",
    "end": "1514760"
  },
  {
    "text": "wrap it for a particular TPM so you create an encrypted",
    "start": "1514760",
    "end": "1521000"
  },
  {
    "text": "block uh but this is where and yeah you can put it that blob inside the kernel",
    "start": "1521720",
    "end": "1527480"
  },
  {
    "text": "it will be unwrapped uh but the problem is the key store",
    "start": "1527480",
    "end": "1532799"
  },
  {
    "text": "subsystem is kind of it's in memory right it's FM it doesn't have any persistent storage bag so you still are",
    "start": "1532799",
    "end": "1540320"
  },
  {
    "text": "responsible for the key management itself so like you need to have that wrapped key available so like if you",
    "start": "1540320",
    "end": "1546880"
  },
  {
    "text": "generated a key for your application you have to hold on to the encrypted block before because if you lose it there is",
    "start": "1546880",
    "end": "1552760"
  },
  {
    "text": "will be nothing to put inside the kernel to unra it and like after every reboot you have to reinstantiate the key",
    "start": "1552760",
    "end": "1558799"
  },
  {
    "text": "because the kernel doesn't keep the keys on disk or whatever so you have the",
    "start": "1558799",
    "end": "1563960"
  },
  {
    "text": "problem of Key Management and mostly like key storage you have to store it somewhere and and this kind of makes the",
    "start": "1563960",
    "end": "1570159"
  },
  {
    "text": "whole concept not very useful for uh like disl system what about disl system",
    "start": "1570159",
    "end": "1576080"
  },
  {
    "text": "what about if you store all your keys and you have a broken disc so you now have to think about data backup and like",
    "start": "1576080",
    "end": "1584279"
  },
  {
    "text": "keys back up like what if you like in cler we consider our servers what we",
    "start": "1584279",
    "end": "1589720"
  },
  {
    "text": "call fmrl so I can take any server wipe it and it will start in clean stench so",
    "start": "1589720",
    "end": "1595440"
  },
  {
    "text": "like what if I wipe and wipe some keys right so accidental wipe is a problem",
    "start": "1595440",
    "end": "1601840"
  },
  {
    "text": "uh and and the pro and there is also the scalability problem so okay uh we're",
    "start": "1601840",
    "end": "1607679"
  },
  {
    "text": "talking about applications right and like there are many applications running on Linux so yeah like each application",
    "start": "1607679",
    "end": "1614240"
  },
  {
    "text": "needs to do this so like you have like uh one key for one application like you",
    "start": "1614240",
    "end": "1619279"
  },
  {
    "text": "have five you have five Keys you have blah blah blah like gazillion of keys like if you have many many services",
    "start": "1619279",
    "end": "1624919"
  },
  {
    "text": "running on the system so you have this extra well considerably large and like",
    "start": "1624919",
    "end": "1630799"
  },
  {
    "text": "very critical State because these are your cryptography Keys which give you access to your data that you have to",
    "start": "1630799",
    "end": "1638039"
  },
  {
    "text": "manage so what if we just change the whole thing and try to do it differently",
    "start": "1638240",
    "end": "1644200"
  },
  {
    "text": "what if we instead of wrapping the keys what if we like create them a little bit different what if we derive them so",
    "start": "1644200",
    "end": "1650640"
  },
  {
    "text": "let's say we take the TPM which we already have right and every TPM if you",
    "start": "1650640",
    "end": "1656159"
  },
  {
    "text": "read this pack they have a seed well technically they have four seeds but for the purposes of this uh talk like it's",
    "start": "1656159",
    "end": "1664279"
  },
  {
    "text": "enough to say that it has like a secure strong seed for every key it uses uh",
    "start": "1664279",
    "end": "1672440"
  },
  {
    "text": "which is unique to that TPM and you can never get access to that seat there is there is no TPM",
    "start": "1672440",
    "end": "1678720"
  },
  {
    "text": "commands which allow you to read that seed so it's only inside the se but the way how you use a seed the TPM has also",
    "start": "1678720",
    "end": "1686200"
  },
  {
    "text": "a key derivation function so you can use the SE to derive keys from the TPM uh yeah and it's it's kind of",
    "start": "1686200",
    "end": "1694159"
  },
  {
    "text": "available in every TPM so that whole thing is a part of TPM stack if you have a TPM you expect it to have that and",
    "start": "1694159",
    "end": "1700720"
  },
  {
    "text": "like the algorithms are well known and you can actually predict that so what we can do is we can take like an appli",
    "start": "1700720",
    "end": "1708120"
  },
  {
    "text": "application specific Ino which doesn't have to be secret it's some application metadata it just has to be unique to a",
    "start": "1708120",
    "end": "1714200"
  },
  {
    "text": "particular application and we can actually feed it to that kdf and get an application specific key right and the",
    "start": "1714200",
    "end": "1722679"
  },
  {
    "text": "nice thing about it this thing is like perfectly scalable because well as long",
    "start": "1722679",
    "end": "1728120"
  },
  {
    "text": "as you find a metadata which is unique to ARA application you can like create many many many unique keys and these",
    "start": "1728120",
    "end": "1734399"
  },
  {
    "text": "keys will be unique for a application and then I think about that approach",
    "start": "1734399",
    "end": "1739760"
  },
  {
    "text": "this state is totally disposable because the whole process is reproducible right",
    "start": "1739760",
    "end": "1745000"
  },
  {
    "text": "so as long as you have access to the TPM and it seed and like your application",
    "start": "1745000",
    "end": "1750480"
  },
  {
    "text": "metadata which can be just some static thing about your application you can",
    "start": "1750480",
    "end": "1755840"
  },
  {
    "text": "always recreate all your keys right so for example imagine if you use this approach let's say you have a",
    "start": "1755840",
    "end": "1762640"
  },
  {
    "text": "very small uh router right so which well",
    "start": "1762640",
    "end": "1767720"
  },
  {
    "text": "doesn't have any storage right but you still want when you SSH into it you want to have like H uh you don't have to",
    "start": "1767720",
    "end": "1774840"
  },
  {
    "text": "reaccept the SSH publicy of your right because after every boot it changes because it doesn't have anywhere to",
    "start": "1774840",
    "end": "1781080"
  },
  {
    "text": "store it but if you use that model you will can have a router static SSH key and you can kind of like as a router",
    "start": "1781080",
    "end": "1787960"
  },
  {
    "text": "identity and can easily use it so how do we use this so one thing I",
    "start": "1787960",
    "end": "1795080"
  },
  {
    "start": "1793000",
    "end": "1964000"
  },
  {
    "text": "mentioned at the start there are actually two system calls to instantiate curls and keys in the Linux Kel key",
    "start": "1795080",
    "end": "1801200"
  },
  {
    "text": "store it's called ad key and request key we so far we have seen like at Key examples but the overall cemented",
    "start": "1801200",
    "end": "1808480"
  },
  {
    "text": "difference is the following with at key uh you you the process or the",
    "start": "1808480",
    "end": "1814039"
  },
  {
    "text": "application is responsible to provide the cryptographic material to the kernel",
    "start": "1814039",
    "end": "1819279"
  },
  {
    "text": "so yeah uh the process calls at key and the kernel instan shate the key if it's a user key this is a plain text",
    "start": "1819279",
    "end": "1825720"
  },
  {
    "text": "cryptographic material it's if a trusted key it's rupt encrypted cryptographic material but still the the process",
    "start": "1825720",
    "end": "1831440"
  },
  {
    "text": "itself is should provide some bites to the kernel right and with request key is",
    "start": "1831440",
    "end": "1837320"
  },
  {
    "text": "different the request key process basically says like hey I don't know",
    "start": "1837320",
    "end": "1843159"
  },
  {
    "text": "what my key should be I just I know it has a like a m attribute of like some",
    "start": "1843159",
    "end": "1850039"
  },
  {
    "text": "name right let's say it it can be an arbitary string actually you can say like SSH right I give me a key is an",
    "start": "1850039",
    "end": "1858480"
  },
  {
    "text": "identifier of as so it says like this is why it's called request key it's requesting the key from the kernel right",
    "start": "1858480",
    "end": "1865639"
  },
  {
    "text": "so and the kernel is supposed to like get these key bites somewhere well",
    "start": "1865639",
    "end": "1872200"
  },
  {
    "text": "obviously the kernel like every one setup is different right so obviously the your specific kernel doesn't know",
    "start": "1872200",
    "end": "1878440"
  },
  {
    "text": "where to get your keys from so this is why the kernel needs a user space helper",
    "start": "1878440",
    "end": "1884000"
  },
  {
    "text": "to do that so the way how it works like when the process called request key the kernel creat Crees like an empty",
    "start": "1884000",
    "end": "1889039"
  },
  {
    "text": "placeholder in the key store but then because it doesn't know how to get the key bites it calls a different userspace",
    "start": "1889039",
    "end": "1896279"
  },
  {
    "text": "process specifically located as been request key passes this key ID and this",
    "start": "1896279",
    "end": "1902000"
  },
  {
    "text": "user space process is responsible to to find that key from somewhere and again",
    "start": "1902000",
    "end": "1907320"
  },
  {
    "text": "everyone's setup is different so technically you as a system administrator can write plugins to that",
    "start": "1907320",
    "end": "1913000"
  },
  {
    "text": "process which kind of resolve Keys depending on your architecture and infrastructure structure set up and like",
    "start": "1913000",
    "end": "1920000"
  },
  {
    "text": "one of the plugins which I try to write is basically why don't I write a plugin which gets the keys in the way I",
    "start": "1920000",
    "end": "1926960"
  },
  {
    "text": "describe from the TPM right so like uh you can forward that to the TPM the TPM",
    "start": "1926960",
    "end": "1933120"
  },
  {
    "text": "can generate an application specific key then basically it returns to the plugin",
    "start": "1933120",
    "end": "1938760"
  },
  {
    "text": "then the plugin notifies uh so yeah we have an application specific key and that user space process returns it to",
    "start": "1938760",
    "end": "1945639"
  },
  {
    "text": "the kernel so the kernel actually instantiated the key key store object and notifies the application that the",
    "start": "1945639",
    "end": "1951600"
  },
  {
    "text": "key is successful uh so this is very useful to actually",
    "start": "1951600",
    "end": "1957519"
  },
  {
    "text": "integrate this whole schema which I proposed into the into the kernel and the key store um yeah I'll share the",
    "start": "1957519",
    "end": "1965080"
  },
  {
    "start": "1964000",
    "end": "2393000"
  },
  {
    "text": "links later as well if you want but I wrote this plugin it's a proof of concept so I'm sorry it's written in",
    "start": "1965080",
    "end": "1972320"
  },
  {
    "text": "Python uh but it kind of works uh uh yeah and it it generates applications",
    "start": "1972320",
    "end": "1978000"
  },
  {
    "text": "specific key based on some metadata uh if you want to try it out you can go to this link from a GitHub",
    "start": "1978000",
    "end": "1984440"
  },
  {
    "text": "download it and the way how you would and you need to configure it you basically need to configure it as a",
    "start": "1984440",
    "end": "1989639"
  },
  {
    "text": "plugin to the request key uh user mode helper this is how you do it don't",
    "start": "1989639",
    "end": "1996639"
  },
  {
    "text": "really bother with all these things you can read it on the documentation later but the it's important how it works",
    "start": "1996639",
    "end": "2002279"
  },
  {
    "text": "right so like once you configure it any process can request application specific keys from the PPM so for example I will",
    "start": "2002279",
    "end": "2009519"
  },
  {
    "text": "use just a kctl utility which is a wrapper uh for for scripts around the",
    "start": "2009519",
    "end": "2015440"
  },
  {
    "text": "kernel key store API so here I'm actually requesting a user key with a",
    "start": "2015440",
    "end": "2020919"
  },
  {
    "text": "string ID tpm2 derived right and I give like uh the key name will be test and",
    "start": "2020919",
    "end": "2029360"
  },
  {
    "text": "the 32 path thing it means it's the way how I structured my uh plug-in so 32",
    "start": "2029360",
    "end": "2036679"
  },
  {
    "text": "means I want to like 32 bite key uh for example for is 256 encryption and this",
    "start": "2036679",
    "end": "2043039"
  },
  {
    "text": "is where I say like which application metadata my plugin should configure should consider as like unique",
    "start": "2043039",
    "end": "2049320"
  },
  {
    "text": "application and for and here I say path right so like in my setup I say like",
    "start": "2049320",
    "end": "2055720"
  },
  {
    "text": "regardless of your code like each executable a different path will have a different unique key right and then you",
    "start": "2055720",
    "end": "2063079"
  },
  {
    "text": "can it kind of works nicely because you can protect that by file system permissions to to ensure the keys cannot",
    "start": "2063079",
    "end": "2068878"
  },
  {
    "text": "be laked right so for example we instantiate that key we get some key material because it's a user key we can",
    "start": "2068879",
    "end": "2076000"
  },
  {
    "text": "actually read the uh the generated key back so like we'll see that we have some",
    "start": "2076000",
    "end": "2081560"
  },
  {
    "text": "bytes uh from my TPM now we I'm actually going to delete this key you see like I'm deleting this serial so it was",
    "start": "2081560",
    "end": "2088240"
  },
  {
    "text": "securely destroyed by the kernel and then I repeat basically the same request",
    "start": "2088240",
    "end": "2093560"
  },
  {
    "text": "so and you can see I'm actually getting from a kernel perspective I'm getting a different key because the serial number",
    "start": "2093560",
    "end": "2098760"
  },
  {
    "text": "is different now but if I read it back I'm actually getting the same bytes so",
    "start": "2098760",
    "end": "2103920"
  },
  {
    "text": "because the whole process is reproducible I'm deriving the same key for the same application which is",
    "start": "2103920",
    "end": "2109680"
  },
  {
    "text": "present and user bin kctl right so let's delete this again and let's actually uh make sure my my",
    "start": "2109680",
    "end": "2118000"
  },
  {
    "text": "stuff works so like let's move my exceptable from user bin to my home directory for example so it now has a",
    "start": "2118000",
    "end": "2124400"
  },
  {
    "text": "different pass again I repeat the same request with all the same parameters",
    "start": "2124400",
    "end": "2129800"
  },
  {
    "text": "getting a different key but now when I print the device I totally have a different key here",
    "start": "2129800",
    "end": "2136560"
  },
  {
    "text": "right um and and and also like I thought about",
    "start": "2136560",
    "end": "2142040"
  },
  {
    "text": "it like what if I do it from like you can protect the executables by pass but",
    "start": "2142040",
    "end": "2147800"
  },
  {
    "text": "technically usually it's 755 so every user can execute any executable so I don't want to like let's say SSH demon",
    "start": "2147800",
    "end": "2155920"
  },
  {
    "text": "is running as root usually but you as a user can call the sshd binary and probably get the key generated somehow",
    "start": "2155920",
    "end": "2162920"
  },
  {
    "text": "so I as an application metadata I'm unconditionally considering the user ID as well so if I rerun basically the same",
    "start": "2162920",
    "end": "2170440"
  },
  {
    "text": "common but from a different user I I will get a a unique uh a different",
    "start": "2170440",
    "end": "2175520"
  },
  {
    "text": "unique key so like keys are also separated by uh requesting",
    "start": "2175520",
    "end": "2181359"
  },
  {
    "text": "users uh there is a second mode which I implemented which I think also might be useful is uh uh basically instead of the",
    "start": "2181520",
    "end": "2189079"
  },
  {
    "text": "pass what I want to ask the applic uh the colonel key store to consider is the",
    "start": "2189079",
    "end": "2194319"
  },
  {
    "text": "application check sum so instead of the application specific metadata which will be actually the code that requested the",
    "start": "2194319",
    "end": "2201720"
  },
  {
    "text": "key the text right which is really interesting so we can generate the key",
    "start": "2201720",
    "end": "2206839"
  },
  {
    "text": "and we can read it back we get some bytes right and in this case again I can",
    "start": "2206839",
    "end": "2211880"
  },
  {
    "text": "delete the key and in this case I'm again I'm moving my key CT utility from One path",
    "start": "2211880",
    "end": "2219040"
  },
  {
    "text": "to another right and I'm repeating this request but now I'm getting the same key",
    "start": "2219040",
    "end": "2225040"
  },
  {
    "text": "back just because uh the uniqueness of the key depends on like the the the hash",
    "start": "2225040",
    "end": "2230440"
  },
  {
    "text": "of the code which requested it which is cool so like technically you can bind a unique key to your particular code",
    "start": "2230440",
    "end": "2236480"
  },
  {
    "text": "regardless of where in file system it resides yeah uh and to show that it",
    "start": "2236480",
    "end": "2242359"
  },
  {
    "text": "works actually I did some research and the kctl utility has a bad message",
    "start": "2242359",
    "end": "2247520"
  },
  {
    "text": "message string which is basically some error code so what I'm trying to do I'm patching my uh my executable and",
    "start": "2247520",
    "end": "2254760"
  },
  {
    "text": "replacing bad message with bad massage I patched one bite right uh but",
    "start": "2254760",
    "end": "2260800"
  },
  {
    "text": "I the application will still work it's just an error string so if I rerun the application with the same parameters I",
    "start": "2260800",
    "end": "2266960"
  },
  {
    "text": "you see that the key is different completely because now we the code is different right so you cannot kind of",
    "start": "2266960",
    "end": "2274079"
  },
  {
    "text": "steal the key from another application this way",
    "start": "2274079",
    "end": "2279359"
  },
  {
    "text": "um yeah technically you can do the same way with asymmetric Keys as well so like instead of user key you can request an",
    "start": "2279359",
    "end": "2285800"
  },
  {
    "text": "asymmetric key you cannot read the asymmetric keys back you can only do stuff with them so what we can do here",
    "start": "2285800",
    "end": "2292960"
  },
  {
    "text": "is uh we can generate some random hash and actually use that asymmetric key to",
    "start": "2292960",
    "end": "2298319"
  },
  {
    "text": "create a signature uh right so we can now remove that key uh we can recreate",
    "start": "2298319",
    "end": "2303800"
  },
  {
    "text": "it again so the serial is different and we can again resign that and because",
    "start": "2303800",
    "end": "2310040"
  },
  {
    "text": "internally by default the kernel uses rsap pkcs1 signature the signatures are",
    "start": "2310040",
    "end": "2316000"
  },
  {
    "text": "static so therefore you see uh you get the same signatures for different Keys",
    "start": "2316000",
    "end": "2321359"
  },
  {
    "text": "therefore the key the private keys are the same so like again totally reproducible and",
    "start": "2321359",
    "end": "2328079"
  },
  {
    "text": "easy um yeah so the only downside here in this architecture is still that with",
    "start": "2328800",
    "end": "2337599"
  },
  {
    "text": "this user mode helper still there is a point in time where the key is exposed to user space right it's it's much",
    "start": "2337599",
    "end": "2345000"
  },
  {
    "text": "better now because like it's not exposed to my main process address space it's",
    "start": "2345000",
    "end": "2350440"
  },
  {
    "text": "it's exposed to some other process address space and asbin request key is usually like self-contained and not",
    "start": "2350440",
    "end": "2356800"
  },
  {
    "text": "network facting but like what if we can do better uh yeah what if we can remove",
    "start": "2356800",
    "end": "2363000"
  },
  {
    "text": "that plain Tex key from user space at all so instead um",
    "start": "2363000",
    "end": "2369000"
  },
  {
    "text": "uh why can't we just implement the same thing inside the kernel right so like instead of going through user remote",
    "start": "2369000",
    "end": "2375280"
  },
  {
    "text": "Helper and we can just directly ask the TPM to uh generate this key or derive",
    "start": "2375280",
    "end": "2381920"
  },
  {
    "text": "that key in like deterministic fashion and it basically the plain text will always be only in the kernel space and",
    "start": "2381920",
    "end": "2388040"
  },
  {
    "text": "never accessible to user space and um some time ago I sent a V1 patch set",
    "start": "2388040",
    "end": "2395560"
  },
  {
    "text": "implementing this uh uh well I really try hard to explain",
    "start": "2395560",
    "end": "2400880"
  },
  {
    "text": "this use case but one of the respon is like I don't honestly believe that this will ever be a solution for any possible",
    "start": "2400880",
    "end": "2407880"
  },
  {
    "text": "problem that this exist on the planet uh I'm thinking of submitting we",
    "start": "2407880",
    "end": "2413400"
  },
  {
    "text": "to but this is partly why I'm presenting it here because I know here is people mostly work with iot devices a stateless",
    "start": "2413400",
    "end": "2420480"
  },
  {
    "text": "system like would that approach be useful and I I want to get some feedback and maybe some you know like some that",
    "start": "2420480",
    "end": "2427640"
  },
  {
    "text": "points that it's actually useful and yeah so conclusions uh",
    "start": "2427640",
    "end": "2433240"
  },
  {
    "start": "2430000",
    "end": "2518000"
  },
  {
    "text": "interfacing with TPMS is hard and this is why applications and Co developers",
    "start": "2433240",
    "end": "2438560"
  },
  {
    "text": "avoid them altoe uh I think Linux kernal key retention service can be a good layer to",
    "start": "2438560",
    "end": "2444319"
  },
  {
    "text": "obstruct away the TPM interaction complexity for applications but as you just SE some additional development is",
    "start": "2444319",
    "end": "2451800"
  },
  {
    "text": "needed and probably inside the kernel I strongly think that TPM derived",
    "start": "2451800",
    "end": "2456920"
  },
  {
    "text": "Keys is a good alternative to TPM R Keys uh providing like similar Hardware",
    "start": "2456920",
    "end": "2462040"
  },
  {
    "text": "backend security but with potentially easier Key Management uh so they and",
    "start": "2462040",
    "end": "2467640"
  },
  {
    "text": "basically if you want that now it can be implemented via request key plugin for the current kernels but if you want a",
    "start": "2467640",
    "end": "2473880"
  },
  {
    "text": "fully inernal version you probably need to wait if I I manage to push my patches through somehow yeah and exposing TPM",
    "start": "2473880",
    "end": "2481920"
  },
  {
    "text": "through Linux konal key store can provide applications with like a really straightforward path to adopting",
    "start": "2481920",
    "end": "2488400"
  },
  {
    "text": "Hardware security without not much exposure to TPM inter internal so kernel will handle all of that and it's kind of",
    "start": "2488400",
    "end": "2495880"
  },
  {
    "text": "probably for any other security chips I know some devices or phones have other things yeah and I think like every if",
    "start": "2495880",
    "end": "2503119"
  },
  {
    "text": "you trying to put some security chip in your Hardware like consider exposing its functionality through Linux k key store",
    "start": "2503119",
    "end": "2509480"
  },
  {
    "text": "it can be it gives you like this generic API that applications can depend on and",
    "start": "2509480",
    "end": "2514599"
  },
  {
    "text": "and then like they can easily utilize your Hardware yeah so these are links for stuff I",
    "start": "2514599",
    "end": "2521040"
  },
  {
    "start": "2518000",
    "end": "2561000"
  },
  {
    "text": "mentioned in the stock so the first two ones are linked to uh documentation",
    "start": "2521040",
    "end": "2526880"
  },
  {
    "text": "kernel documentation about the key store and different key types and the third one is linked to the patch set which",
    "start": "2526880",
    "end": "2533319"
  },
  {
    "text": "should implement the RSA key inside the key store backed by the TPM follow that",
    "start": "2533319",
    "end": "2539240"
  },
  {
    "text": "development if you want to know when it's actually being merged uh the first link is uh unwrapped link to my request",
    "start": "2539240",
    "end": "2546640"
  },
  {
    "text": "key plugin in Python which implements TPM deriv keys and the fifth link is to my patch set which actually T implements",
    "start": "2546640",
    "end": "2554000"
  },
  {
    "text": "TPM derived key inside the kernel yeah follow that if you want if you like this",
    "start": "2554000",
    "end": "2560280"
  },
  {
    "text": "work thank you very much and I'm happy to get some",
    "start": "2560280",
    "end": "2566640"
  },
  {
    "start": "2561000",
    "end": "2825000"
  },
  {
    "text": "questions",
    "start": "2570359",
    "end": "2573359"
  },
  {
    "text": "yes yes",
    "start": "2575920",
    "end": "2579119"
  },
  {
    "text": "uh this is a good question",
    "start": "2584160",
    "end": "2588599"
  },
  {
    "text": "uh yes so uh yes correct so like let's say for the user space version right if",
    "start": "2590160",
    "end": "2598119"
  },
  {
    "text": "I have access to the TPM let say I'm root I can of course fake the comments",
    "start": "2598119",
    "end": "2603559"
  },
  {
    "text": "of what the plug-in does and say like hey generate me a key for that",
    "start": "2603559",
    "end": "2608800"
  },
  {
    "text": "application at that pass you can like create recreate that so like but it's kind of reserved for privileged",
    "start": "2608800",
    "end": "2614720"
  },
  {
    "text": "application you have to have direct access to the TPM to do",
    "start": "2614720",
    "end": "2620240"
  },
  {
    "text": "so no no no no like if I want to steal a key from other application I have to be",
    "start": "2622640",
    "end": "2628680"
  },
  {
    "text": "privileged but if I just want to generate the key for myself I don't have to be privileged",
    "start": "2628680",
    "end": "2635960"
  },
  {
    "text": "if they have the same metadata they will have the same keys but this is like the way how you set it up you have to ensure",
    "start": "2640800",
    "end": "2647240"
  },
  {
    "text": "they have different metadata and for example if they're two binaries and they have different code they have different",
    "start": "2647240",
    "end": "2654440"
  },
  {
    "text": "keys or for example like the path thing I was considered for SSH server right",
    "start": "2654440",
    "end": "2660640"
  },
  {
    "text": "like anything that is present at like user asbin sshd will have access to the",
    "start": "2660640",
    "end": "2666359"
  },
  {
    "text": "key uh but this is a privilege pass you can you cannot put any executable there",
    "start": "2666359",
    "end": "2671720"
  },
  {
    "text": "but you can for example as an administrator you can replace op SSH with drop bear and they will have the",
    "start": "2671720",
    "end": "2677359"
  },
  {
    "text": "same like key",
    "start": "2677359",
    "end": "2680838"
  },
  {
    "text": "right yes yes exactly exactly yes yes",
    "start": "2685359",
    "end": "2692440"
  },
  {
    "text": "yes yes",
    "start": "2692440",
    "end": "2696440"
  },
  {
    "text": "uh in my example it happens inside the kernel so the TPM is only responsible for unwrapping the key so you have a",
    "start": "2706200",
    "end": "2713800"
  },
  {
    "text": "software PL text is key inside the kernel and then the kernel does the encryption itself so it should be",
    "start": "2713800",
    "end": "2719720"
  },
  {
    "text": "relatively fast bearing the user space kernel communication yeah",
    "start": "2719720",
    "end": "2727800"
  },
  {
    "text": "anym yes",
    "start": "2729640",
    "end": "2737119"
  },
  {
    "text": "MH so yeah it's a good question that thing is also like it depends on the",
    "start": "2745800",
    "end": "2751640"
  },
  {
    "text": "algorithm right so like uh for uh stream ciphers for for example you can once you",
    "start": "2751640",
    "end": "2758640"
  },
  {
    "text": "instantiate the socket because it's a stream Cipher you can actually encrypt in in chunks right so you can like send",
    "start": "2758640",
    "end": "2765520"
  },
  {
    "text": "some small amount of data get the decrypted bed then send another one then send thing for unfortunately for",
    "start": "2765520",
    "end": "2772800"
  },
  {
    "text": "authenticated encryption we found a drawback which we want to improve that",
    "start": "2772800",
    "end": "2778280"
  },
  {
    "text": "uh because uh basically you want to calculate the authentication tag you",
    "start": "2778280",
    "end": "2783480"
  },
  {
    "text": "have to send all the data first before you can get the Inc encrypted and the and because the memory is limited it",
    "start": "2783480",
    "end": "2789960"
  },
  {
    "text": "kind of the kernel limits you to encrypting like 64 kiloby I think something like that yeah but with simple",
    "start": "2789960",
    "end": "2798480"
  },
  {
    "text": "stream ciphers is kind of like it does the kernel doesn't keep the data so you send uh a small buffer you read it back",
    "start": "2798480",
    "end": "2805079"
  },
  {
    "text": "then you send a small buffer again and kind of Advance through the stream",
    "start": "2805079",
    "end": "2810400"
  },
  {
    "text": "yeah anymore going once is everyone wants lunch right",
    "start": "2811880",
    "end": "2818119"
  },
  {
    "text": "thank you very much",
    "start": "2818119",
    "end": "2821720"
  }
]