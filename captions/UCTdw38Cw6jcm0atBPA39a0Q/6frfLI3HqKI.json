[
  {
    "text": "sorry we're going to move fast because when I dry run this talk it goes about an hour 20 but I still want to get you",
    "start": "2399",
    "end": "7440"
  },
  {
    "text": "guys out an hour so uh like I said welcome everybody my name is Brad Minnick in this session today we're",
    "start": "7440",
    "end": "12880"
  },
  {
    "text": "talking about correcting common async await mistakes innet now we are moving",
    "start": "12880",
    "end": "18160"
  },
  {
    "text": "fast but don't worry about taking notes don't worry about memorizing anything today cuz I've already done that for you",
    "start": "18160",
    "end": "23680"
  },
  {
    "text": "you just have to go to this QR code or specifically to this link here will take you to a web page where you can find all",
    "start": "23680",
    "end": "29199"
  },
  {
    "text": "the materials from today so this is where you can find a recording yeah you can go take a nap whatever you want uh",
    "start": "29199",
    "end": "35520"
  },
  {
    "text": "this is where you can find the open source samples this is where you can find a actual 4-hour course I recently",
    "start": "35520",
    "end": "41040"
  },
  {
    "text": "published where we go even deeper into this stuff so hopefully you get excited about what we learned today and you want",
    "start": "41040",
    "end": "46719"
  },
  {
    "text": "to learn more you can find it all there and if you have any friends or co-workers who couldn't make it today you can also forward that on to them as",
    "start": "46719",
    "end": "52800"
  },
  {
    "text": "well uh and like I said we probably won't have time for Q&A at the end but you can find me online this is my blue sky handle codraor.io i'll also be",
    "start": "52800",
    "end": "59920"
  },
  {
    "text": "around all day today and all day tomorrow if you want to hang out and chat but let's get rolling so let's",
    "start": "59920",
    "end": "65920"
  },
  {
    "text": "start by looking at this method called get libraries this is a async task method and it's a fairly common use case",
    "start": "65920",
    "end": "72000"
  },
  {
    "text": "for using HTTP client to call get async to return a uh return information from",
    "start": "72000",
    "end": "78320"
  },
  {
    "text": "an API uh but what's really going on here under the hood with multi-threading and async8 andnet well to simplify the",
    "start": "78320",
    "end": "86720"
  },
  {
    "text": "example a little bit let's assume thread one kicks off this method so thread one calls get libraries and so what happens",
    "start": "86720",
    "end": "92720"
  },
  {
    "text": "is thread one enters this method and initializes this variable called response but then as soon as thread one",
    "start": "92720",
    "end": "98799"
  },
  {
    "text": "hits that await keyword thread one returns and now thread two or any",
    "start": "98799",
    "end": "104079"
  },
  {
    "text": "background thread is now running get async and this is this is really really good because we don't want thread one to",
    "start": "104079",
    "end": "111119"
  },
  {
    "text": "be making any API calls cuz thread one's a very very special thread innet it's",
    "start": "111119",
    "end": "116240"
  },
  {
    "text": "also known as the main thread it's also known as the UI thread thread one is the only thread that can interact with the",
    "start": "116240",
    "end": "122399"
  },
  {
    "text": "user and it's also the only thread that can draw the UI on the screen so if we",
    "start": "122399",
    "end": "127680"
  },
  {
    "text": "were not using async aait for some reason and thread one was calling get async well if get async takes 5 10",
    "start": "127680",
    "end": "134000"
  },
  {
    "text": "seconds well in those 5 10 seconds if thread 1's busy doing that if the user's scrolling the screen tapping buttons",
    "start": "134000",
    "end": "140239"
  },
  {
    "text": "nothing's going to happen because only thread 1 could respond to those button taps and so with async aait we don't",
    "start": "140239",
    "end": "147120"
  },
  {
    "text": "have to worry about that because now thread one is free it's back interacting with the user so while get async is running in the background thread one or",
    "start": "147120",
    "end": "154000"
  },
  {
    "text": "the user can swipe and tap buttons and do whatever they want and our app's still nice and responsive now what",
    "start": "154000",
    "end": "159360"
  },
  {
    "text": "happens when get async is done we return back to the calling thread for the next",
    "start": "159360",
    "end": "164560"
  },
  {
    "text": "line of code so thread one jumps back in here and make sure that we have a successful response code and then",
    "start": "164560",
    "end": "170560"
  },
  {
    "text": "initializes this variable stream and then just like last time it hits this await keyword thread one returns and we",
    "start": "170560",
    "end": "176959"
  },
  {
    "text": "run this on a background thread again we'll call this thread five again this can be any thread from the thread pool",
    "start": "176959",
    "end": "183120"
  },
  {
    "text": "it doesn't have to be thread five and it won't be thread five every time certainly when it's done again we return",
    "start": "183120",
    "end": "189200"
  },
  {
    "text": "back to the calling thread thread one jumps back in initializes this variable libraries hits the await keyword again",
    "start": "189200",
    "end": "195200"
  },
  {
    "text": "deserialize async runs on a background thread we come back again to thread one to return the value or to throw an uh",
    "start": "195200",
    "end": "202000"
  },
  {
    "text": "invalid operation exception just in case something went wrong now to really understand what's going on here and how",
    "start": "202000",
    "end": "208239"
  },
  {
    "text": "this works we actually need to look at the compiler generated code so what I've",
    "start": "208239",
    "end": "213360"
  },
  {
    "text": "done is I've gone to sharplab.io io which is a awesome awesome website if",
    "start": "213360",
    "end": "219200"
  },
  {
    "text": "you've never heard of it because we can put in our code here on the left so this is the same code that we're just looking",
    "start": "219200",
    "end": "224959"
  },
  {
    "text": "at in nice beautiful C and on the right this is the compiler generated code and",
    "start": "224959",
    "end": "232000"
  },
  {
    "text": "you know the first thing you'll notice there's a lot more code on this side than I wrote on my side and it's got",
    "start": "232000",
    "end": "238159"
  },
  {
    "text": "like weird variable names like in compiler generated code you'll see these weird angle brackets and underscores and",
    "start": "238159",
    "end": "243920"
  },
  {
    "text": "these are actually illegal variable names in C# but the compiler does this on purpose when it generates our code or",
    "start": "243920",
    "end": "249200"
  },
  {
    "text": "generates code for us so that we don't have any accidentally accidental naming collisions but if you squint your eyes",
    "start": "249200",
    "end": "255200"
  },
  {
    "text": "and look close enough this this really is our code like here's here's get async and if we scroll down a little bit we",
    "start": "255200",
    "end": "261120"
  },
  {
    "text": "can see the JSON serializer in here but the big big thing we'll notice first is",
    "start": "261120",
    "end": "266639"
  },
  {
    "text": "we now have this private strruct that inherits from I async state machine and",
    "start": "266639",
    "end": "272639"
  },
  {
    "text": "just a fun fact in release configuration it's a strruct if we switch this to debug mode this is actually a class and",
    "start": "272639",
    "end": "278880"
  },
  {
    "text": "you can see the code even gets gets even bigger um and this is just because when we debug our code uh the the debugger",
    "start": "278880",
    "end": "286800"
  },
  {
    "text": "has to remember what the compiler or what the variable names are whereas when we're running in release config then the",
    "start": "286800",
    "end": "293520"
  },
  {
    "text": "net uh runtime can optimize this a little bit more for us but before we look at this IA async state machine",
    "start": "293520",
    "end": "300720"
  },
  {
    "text": "let's scroll down because we still do have a method called a public async task",
    "start": "300720",
    "end": "306400"
  },
  {
    "text": "method called get libraries it's down here but you'll notice this method looks",
    "start": "306400",
    "end": "311520"
  },
  {
    "text": "completely different uh in fact none of the code I wrote is in my method get libraries anymore um and that's because",
    "start": "311520",
    "end": "318479"
  },
  {
    "text": "what's happening isnet is building a state machine for us under the hood and",
    "start": "318479",
    "end": "324320"
  },
  {
    "text": "before we get too deep into this I do want to say this is this is really cool stuff because C.NET this was all",
    "start": "324320",
    "end": "329759"
  },
  {
    "text": "invented before asynchronous multi-threading was a thing you know back when it first came out CPUs were",
    "start": "329759",
    "end": "335520"
  },
  {
    "text": "simple just single core processors they did one thing um but the really smart",
    "start": "335520",
    "end": "340639"
  },
  {
    "text": "folks at Microsoft figure out a way that we could write nice elegant readable code here on the left and then they",
    "start": "340639",
    "end": "346240"
  },
  {
    "text": "handle all the mess for us underneath the hood by creating this giant state machine so what happens now inside of",
    "start": "346240",
    "end": "352639"
  },
  {
    "text": "the compiler generated git libraries method is we create um our new state",
    "start": "352639",
    "end": "358000"
  },
  {
    "text": "machine and inside of it we have a async task builder created where we set the",
    "start": "358000",
    "end": "364240"
  },
  {
    "text": "current state to be negative one and then we kick off our code here we tell",
    "start": "364240",
    "end": "369360"
  },
  {
    "text": "the builder to go ahead and start and what we're actually returning now is the state machines task so this task is",
    "start": "369360",
    "end": "375919"
  },
  {
    "text": "actually what we're awaiting here when we say await libraries now if I scroll",
    "start": "375919",
    "end": "381199"
  },
  {
    "text": "all the way back up this is where that I sync state machine is created and the",
    "start": "381199",
    "end": "389560"
  },
  {
    "text": "big big part of the async state machine is this move next method this is what is",
    "start": "389560",
    "end": "394639"
  },
  {
    "text": "going to iterate over our code and you'll see in a second how this thread switching gets enabled under under the",
    "start": "394639",
    "end": "401199"
  },
  {
    "text": "hood here because when move next starts the first thing it does is it it grabs a",
    "start": "401199",
    "end": "406639"
  },
  {
    "text": "state which remember this was this is always initialized to negative 1 and then we enter this giant switch where we",
    "start": "406639",
    "end": "413440"
  },
  {
    "text": "have multiple cases so we have our default case but then we have case zero case one case two and for us that's it",
    "start": "413440",
    "end": "420319"
  },
  {
    "text": "because we only use the await keyword three times so we have case zero one",
    "start": "420319",
    "end": "426479"
  },
  {
    "text": "case well case zero case one case two so three cases uh because we use the await keyword three times if we use the await",
    "start": "426479",
    "end": "432800"
  },
  {
    "text": "keyword a fourth time we'd have a we'd have case four um but again we start with case negative one which is our",
    "start": "432800",
    "end": "440240"
  },
  {
    "text": "default here and this is where we start by calling our code finally where we say",
    "start": "440240",
    "end": "445520"
  },
  {
    "text": "get async and so now we've kicked off this task it's running on a background thread but the first thing that the uh",
    "start": "445520",
    "end": "453360"
  },
  {
    "text": "the net runtime does is actually look to see is that task completed because we're going to be doing a lot of thread",
    "start": "453360",
    "end": "459120"
  },
  {
    "text": "switching here and thread switching is expensive and we want to avoid switching threads if we can because our code will",
    "start": "459120",
    "end": "465199"
  },
  {
    "text": "run faster so here in this release config it's highly optimized for us fantastic and so the first thing it does",
    "start": "465199",
    "end": "471680"
  },
  {
    "text": "is see is that already completed because if it is then it'll use this go-to statement and it'll jump down to this",
    "start": "471680",
    "end": "480440"
  },
  {
    "text": "il_00007e tag so 007 is down here where so if that task is already completed",
    "start": "480440",
    "end": "485840"
  },
  {
    "text": "it'll just get the result and then it'll run the next line of code where it ensures that we had a successful status",
    "start": "485840",
    "end": "491680"
  },
  {
    "text": "code but we know this is calling get async this has to go out to an API on the internet so this will never be",
    "start": "491680",
    "end": "496879"
  },
  {
    "text": "completed so what really happens is we're going to enter this if statement where now we're going to update the",
    "start": "496879",
    "end": "502720"
  },
  {
    "text": "state to zero because when we come back we're going to jump back in to state zero to pick up where we left off but",
    "start": "502720",
    "end": "508720"
  },
  {
    "text": "before we do we have to save some values here where we have a couple fields up",
    "start": "508720",
    "end": "514000"
  },
  {
    "text": "above like this u_1 u where we're going to store the http response task a waiter uh until it",
    "start": "514000",
    "end": "521200"
  },
  {
    "text": "comes back and then we're going to let net know that we are waiting on the",
    "start": "521200",
    "end": "526240"
  },
  {
    "text": "result or waiting on that task to be completed and then finally we return so this is how the calling thread in this",
    "start": "526240",
    "end": "532800"
  },
  {
    "text": "case thread one is able to escape while everything's running on a background thread for get async and then when it's",
    "start": "532800",
    "end": "538200"
  },
  {
    "text": "completed we now know we're on state zero so we jump back into move next and",
    "start": "538200",
    "end": "544080"
  },
  {
    "text": "we do it all over again but this time we come straight into case zero where we grab that value that we saved in the",
    "start": "544080",
    "end": "550320"
  },
  {
    "text": "private field up above and then we reset that field to again performance memory",
    "start": "550320",
    "end": "556480"
  },
  {
    "text": "optimization here help the garbage collector out a little bit and they'll set the state back to negative one just in case something bad happens if this",
    "start": "556480",
    "end": "563279"
  },
  {
    "text": "task throws an exception or the app crashes then we want to return back to",
    "start": "563279",
    "end": "569440"
  },
  {
    "text": "uh or we don't want to continue this task uh if something happens like that and now we can finally go to",
    "start": "569440",
    "end": "576279"
  },
  {
    "text": "IL007E where just like we looked at earlier we essentially pick up where our code left off now I won't run through",
    "start": "576279",
    "end": "582080"
  },
  {
    "text": "all of this um but eventually we'll end up down here where we finally get our",
    "start": "582080",
    "end": "588080"
  },
  {
    "text": "list of library models we check to see if it's null if it is we'll throw an invalid operation exception just like we",
    "start": "588080",
    "end": "594000"
  },
  {
    "text": "said we would do in our code and then we will save that result to result three",
    "start": "594000",
    "end": "599440"
  },
  {
    "text": "where finally finally finally down here we call builder set result and pass in the list of library models so this",
    "start": "599440",
    "end": "606480"
  },
  {
    "text": "builder set result remember this is the actual task that we're really awaiting under the hood and that's how we get our",
    "start": "606480",
    "end": "613040"
  },
  {
    "text": "list of library models up here now there's one really really big gotcha",
    "start": "613040",
    "end": "619120"
  },
  {
    "text": "that if you've never looked at the compiler generated code for an async method before you probably didn't know",
    "start": "619120",
    "end": "624720"
  },
  {
    "text": "this existed and that's this giant try catch block right here so all of our code all of the get async the read a",
    "start": "624720",
    "end": "631600"
  },
  {
    "text": "stream async des serialize async all the code that we wrote gets put inside of",
    "start": "631600",
    "end": "636800"
  },
  {
    "text": "this giant try catch block inside a move next and so what this means is let's say",
    "start": "636800",
    "end": "642160"
  },
  {
    "text": "we didn't get a successful status code back it throws an HTTP response exception so that exception will be",
    "start": "642160",
    "end": "647920"
  },
  {
    "text": "caught here in this try catch block and normally that's fine because as long as when we call get libraries we await it",
    "start": "647920",
    "end": "654720"
  },
  {
    "text": "as long as we say await get libraries that exception gets rethrown but this is",
    "start": "654720",
    "end": "660959"
  },
  {
    "text": "where async await becomes dangerous because if you don't await that task that exception will never be propagated",
    "start": "660959",
    "end": "667440"
  },
  {
    "text": "back to us the developers and it'll just be swallowed up here in this try catch block and essentially gone forever and",
    "start": "667440",
    "end": "675120"
  },
  {
    "text": "this is what I didn't know when I first started writing C# code over a decade ago uh I published my first apps to the",
    "start": "675120",
    "end": "681760"
  },
  {
    "text": "app store back in 2016 it was in Zamron back then now I've ported them since tot",
    "start": "681760",
    "end": "686959"
  },
  {
    "text": "Net Maui and I would occasionally like weird things would happen because I thought I knew what I was doing with",
    "start": "686959",
    "end": "692000"
  },
  {
    "text": "Async right like I would I was like \"Oh I want this to run in the background i don't care when it finishes.\" So I'd say",
    "start": "692000",
    "end": "697240"
  },
  {
    "text": "task.run i'd put a bunch of code inside of task i was like \"Who cares when it finishes it'll just finish so I'm not",
    "start": "697240",
    "end": "704000"
  },
  {
    "text": "going to await it.\" But what was really happening was sometimes my code was thrown an exception but I didn't know",
    "start": "704000",
    "end": "710320"
  },
  {
    "text": "that as the developer and now you might be thinking to yourself \"This is great i hate exceptions they crash my app this",
    "start": "710320",
    "end": "716800"
  },
  {
    "text": "is fantastic i wish we could do this for all the code.\" But but that's not the right way to think about exceptions",
    "start": "716800",
    "end": "722480"
  },
  {
    "text": "exceptions are a good thing it's the only way can tell us that something exceptional something unexpected",
    "start": "722480",
    "end": "728240"
  },
  {
    "text": "happened that .NET doesn't know what to do and as advanced C# developers we",
    "start": "728240",
    "end": "733680"
  },
  {
    "text": "should be catching those exceptions we should be catching that HTTP response exception we we be we should be catching that invalid operation exception so that",
    "start": "733680",
    "end": "740720"
  },
  {
    "text": "we can handle it and because I wasn't awaiting those tasks in in the first",
    "start": "740720",
    "end": "746320"
  },
  {
    "text": "apps that I was writing in C I didn't know these exceptions even existed so my",
    "start": "746320",
    "end": "751360"
  },
  {
    "text": "app would get these weird states where like some buttons would be enabled some would have the activity indicator still running and that was because some code",
    "start": "751360",
    "end": "758480"
  },
  {
    "text": "thought it was successful but in reality it had failed so again the good news is as long as we",
    "start": "758480",
    "end": "765920"
  },
  {
    "text": "await tasks that exception gets rethrown to us we can catch it and then we can handle it appropriately",
    "start": "765920",
    "end": "773560"
  },
  {
    "text": "so quick review the async keyword adds about 80",
    "start": "773560",
    "end": "779440"
  },
  {
    "text": "bytes uh this was this is just because of all that compiler generated code now this is 80 bytes this is really not a",
    "start": "779440",
    "end": "785920"
  },
  {
    "text": "big deal i'm not talking 80 megabytes i'm not talking 80 gigabytes this is just 80 bytes so for most of us like",
    "start": "785920",
    "end": "791920"
  },
  {
    "text": "even me doing mobile which is less horsepower than making websites that run on a server I don't care about 80 bytes",
    "start": "791920",
    "end": "798880"
  },
  {
    "text": "use the async keyword as much as you want um but more of a fun fact that it turns our async methods into a strct",
    "start": "798880",
    "end": "804880"
  },
  {
    "text": "specifically in that release configuration and we want to await every",
    "start": "804880",
    "end": "810079"
  },
  {
    "text": "task because non-awwaited tasks hide exceptions and that's the most painful",
    "start": "810079",
    "end": "815440"
  },
  {
    "text": "thing you can do as a as a developer is try and hunt down these bugs because somebody forgot to await a task uh in",
    "start": "815440",
    "end": "822120"
  },
  {
    "text": "fact anytime I review a pull request and I see a task that's not not awaited immediately fail that pull request uh",
    "start": "822120",
    "end": "829279"
  },
  {
    "text": "the worst thing I've seen and actually I was just joking that I saw it in Steve's keynote this morning is where that",
    "start": "829279",
    "end": "835839"
  },
  {
    "text": "pattern where people say underscore equals task.run so not only are you not awaiting the task but you're discarding",
    "start": "835839",
    "end": "841680"
  },
  {
    "text": "it when it's done so again any exception that gets caught in there is gone forever so don't ever do that if you",
    "start": "841680",
    "end": "847199"
  },
  {
    "text": "ever see those in pull requests you should always fail that pull request because we need to await every task to",
    "start": "847199",
    "end": "853279"
  },
  {
    "text": "get those exceptions okay but enough talking about it let's actually jump into some code",
    "start": "853279",
    "end": "858920"
  },
  {
    "text": "here and I have with us today a net Maui",
    "start": "858920",
    "end": "864320"
  },
  {
    "text": "app that I've created that uh pulls down the top stories from hacker news so if you've never heard of Hacker News it's",
    "start": "864320",
    "end": "870560"
  },
  {
    "text": "essentially a forum where post uh folks can post all the latest tech stories of the day other users can upvote and",
    "start": "870560",
    "end": "876720"
  },
  {
    "text": "downvote them so that's why you see there's points here and so this app just goes and gets the top stories from the",
    "start": "876720",
    "end": "882079"
  },
  {
    "text": "Hacker News API and then I can click on any of the stories here and then read them in my app so pretty simple onepage",
    "start": "882079",
    "end": "888560"
  },
  {
    "text": "app and what we're going to play around with today is inside of the net Maui app",
    "start": "888560",
    "end": "895040"
  },
  {
    "text": "specifically inside the view model layer I have a class called news view model",
    "start": "895040",
    "end": "900399"
  },
  {
    "text": "bad async best practices this is where this is what we're going to fix today together um but there's also good async",
    "start": "900399",
    "end": "906880"
  },
  {
    "text": "best practices so again don't worry about memorizing anything because you can always just look at these two side by side when we're done and so let's",
    "start": "906880",
    "end": "913199"
  },
  {
    "text": "jump into it so scrolling all the way up here we have a bunch of todos we're going to fix together now the first one",
    "start": "913199",
    "end": "920079"
  },
  {
    "text": "here we're inside of the constructor for our news view model and I'm trying to",
    "start": "920079",
    "end": "925839"
  },
  {
    "text": "call the refresh method like this is the method that is called when the user does a pull to refresh so this is what goes",
    "start": "925839",
    "end": "932160"
  },
  {
    "text": "and gets the latest top stories and displays them on the page and I'm calling it here in the constructor",
    "start": "932160",
    "end": "937279"
  },
  {
    "text": "because I don't want the user to load a blank app and have to pull to refresh just to see the data they want to see by",
    "start": "937279",
    "end": "944000"
  },
  {
    "text": "launching the app now we're just saying we need to await every task so I mean",
    "start": "944000",
    "end": "950160"
  },
  {
    "text": "seems pretty obvious right we would say async here we would say await here but",
    "start": "950160",
    "end": "955440"
  },
  {
    "text": "no we're we're in the constructor we can't use async await in the constructor",
    "start": "955440",
    "end": "960880"
  },
  {
    "text": "because constructors aren't meant for that constructors are literally just designed to initialize an object and",
    "start": "960880",
    "end": "967040"
  },
  {
    "text": "assign maybe assign a couple variables and really what's going on under the hood is uh net's assigning a location in",
    "start": "967040",
    "end": "973360"
  },
  {
    "text": "memory for this newly initialized object so there's a so there's no async await in the constructor so we can't await it",
    "start": "973360",
    "end": "979839"
  },
  {
    "text": "here but one thing I could do is I could create another refresh method down here",
    "start": "979839",
    "end": "986240"
  },
  {
    "text": "where we'll call await refresh here and",
    "start": "986240",
    "end": "993720"
  },
  {
    "text": "then we'll just call this new refresh method here and happy days we don't get those yellow squiggles anymore we're not",
    "start": "993720",
    "end": "1000399"
  },
  {
    "text": "getting yelled at we're still awaiting that task and everything's great right well yeah i I can see some people",
    "start": "1000399",
    "end": "1006880"
  },
  {
    "text": "shaking their heads i can feel the tension building because what did I do i just created an async void method and",
    "start": "1006880",
    "end": "1013759"
  },
  {
    "text": "what are we taught when we're taught to be C developers they say \"Don't ever use async void it's bad it's only meant for",
    "start": "1013759",
    "end": "1021040"
  },
  {
    "text": "event handlers.\" And that's not bad advice because actually this is a valid",
    "start": "1021040",
    "end": "1026160"
  },
  {
    "text": "use case for async void but the problem I have with telling people just don't use it is nobody goes another step",
    "start": "1026160",
    "end": "1032480"
  },
  {
    "text": "further and says why so why why is this dangerous well let's look let's look at",
    "start": "1032480",
    "end": "1038000"
  },
  {
    "text": "a couple scenarios here what if I added some code here where um I'm going to clear that top story collection and I'm",
    "start": "1038000",
    "end": "1044400"
  },
  {
    "text": "going to do some initialization here we'll just add some dummy code here uh and if we remember what we were just",
    "start": "1044400",
    "end": "1050960"
  },
  {
    "text": "talking about well let's say thread one initializes the constructor so thread one enters the constructor thread one",
    "start": "1050960",
    "end": "1056799"
  },
  {
    "text": "hits the refresh method enters the refresh method down here hits the await keyword so thread one returns but",
    "start": "1056799",
    "end": "1063520"
  },
  {
    "text": "because nothing's awaiting refresh thread one continues",
    "start": "1063520",
    "end": "1069559"
  },
  {
    "text": "running here while",
    "start": "1069559",
    "end": "1076559"
  },
  {
    "text": "refresh runs in the background hopefully most of that spelled right um so",
    "start": "1077080",
    "end": "1082960"
  },
  {
    "text": "essentially what we've done is we've just created a fun little race condition where this refresh methods running in",
    "start": "1082960",
    "end": "1088720"
  },
  {
    "text": "the background and it's editing the top story collection but thread one is still running in the constructor in the at the",
    "start": "1088720",
    "end": "1094880"
  },
  {
    "text": "same time and it's modifying the top story collection and if you've ever had to debug and solve a race condition",
    "start": "1094880",
    "end": "1101600"
  },
  {
    "text": "those are the worst the hardest problems to solve because they're so hard to reproduce they only happen occasionally",
    "start": "1101600",
    "end": "1107600"
  },
  {
    "text": "some people think you're going crazy like I swear one time I saw it happen and I was like nah that'll never happen but that's a race condition where we",
    "start": "1107600",
    "end": "1114160"
  },
  {
    "text": "have two threads doing um conflicting things that interfere with each other so this is one reason why async void's",
    "start": "1114160",
    "end": "1120320"
  },
  {
    "text": "dangerous uh another reason async void's dangerous is what happens if refresh throws an exception right like this is",
    "start": "1120320",
    "end": "1126960"
  },
  {
    "text": "going out to the internet it's getting uh it's getting an HTTP response and maybe maybe the user's on a bus and the",
    "start": "1126960",
    "end": "1134400"
  },
  {
    "text": "mobile app can't connect to the internet or or maybe we just do this to ensure that an exception we now know we're",
    "start": "1134400",
    "end": "1141520"
  },
  {
    "text": "guaranteed to throw an exception and refresh so okay no problem right i'll just I'll just wrap in a try catch block",
    "start": "1141520",
    "end": "1147039"
  },
  {
    "text": "that's what these are there for so we'll say try we'll say catch we'll handle that exception but again remember what's",
    "start": "1147039",
    "end": "1155200"
  },
  {
    "text": "going on here is that thread one is going to come in here hit refresh thread one's going to enter the refresh method",
    "start": "1155200",
    "end": "1161200"
  },
  {
    "text": "hit the away keyword return and then thread one keeps going and so now thread",
    "start": "1161200",
    "end": "1166480"
  },
  {
    "text": "one's down here meanwhile this method is still running so when this exception is",
    "start": "1166480",
    "end": "1172280"
  },
  {
    "text": "thrown we can't catch it and this is this is really really big problem",
    "start": "1172280",
    "end": "1178080"
  },
  {
    "text": "because that's going to crash our app and probably the worst part to bring this all together around async void is",
    "start": "1178080",
    "end": "1186400"
  },
  {
    "text": "if we look at IntelliSense what does IntelliSense tell us about this method i need more patience come on",
    "start": "1186400",
    "end": "1193360"
  },
  {
    "text": "there we go it just tells us this is a private void method and as advanced C#",
    "start": "1193360",
    "end": "1199520"
  },
  {
    "text": "developers it's completely valid for us to assume that this refresh method will",
    "start": "1199520",
    "end": "1204960"
  },
  {
    "text": "finish running will run to completion before the next line of code so it's",
    "start": "1204960",
    "end": "1210400"
  },
  {
    "text": "totally valid to assume refresh has completed here but it doesn't tell us",
    "start": "1210400",
    "end": "1216960"
  },
  {
    "text": "that it's async void so you know right here in this this silly little sample like the async void's in our face we can",
    "start": "1216960",
    "end": "1223600"
  },
  {
    "text": "see it right here it's tough to miss but maybe it's not maybe it's in a different class maybe it's in somebody else's",
    "start": "1223600",
    "end": "1229760"
  },
  {
    "text": "library so we don't even have the source code for it and all we know is that this is this method returns void and again",
    "start": "1229760",
    "end": "1236240"
  },
  {
    "text": "it's completely valid for us to assume that the method completes before the next line of code runs but as we see now",
    "start": "1236240",
    "end": "1243360"
  },
  {
    "text": "with async void that's just not the case so this is this is all bad we don't want",
    "start": "1243360",
    "end": "1248880"
  },
  {
    "text": "we don't want any of this uh you want to avoid async void for all of these reasons especially because eventually",
    "start": "1248880",
    "end": "1255200"
  },
  {
    "text": "somebody new is going to join your team and if you have a new junior developer who doesn't understand all this and",
    "start": "1255200",
    "end": "1260799"
  },
  {
    "text": "they're going to start copy pasting your code or they're going to be reusing your code and they're going to run into all these same problems we just talked about",
    "start": "1260799",
    "end": "1266880"
  },
  {
    "text": "so so let's avoid async void here and what's something else we can do because",
    "start": "1266880",
    "end": "1272320"
  },
  {
    "text": "I don't want to do any of this i don't want to risk future bugs future more you know more future work for me that sounds",
    "start": "1272320",
    "end": "1278799"
  },
  {
    "text": "terrible well what I've done is I've actually created a extension method",
    "start": "1278799",
    "end": "1284080"
  },
  {
    "text": "called safe fire and forget now this is available in a nougat package that I named asyncate best practices and if we",
    "start": "1284080",
    "end": "1291679"
  },
  {
    "text": "dive into the implementation here under the hood this is literally just an async",
    "start": "1291679",
    "end": "1298559"
  },
  {
    "text": "void method but this has all the guardrails in place to follow all the",
    "start": "1298559",
    "end": "1303679"
  },
  {
    "text": "best practices where if we do use async void this is what we got to do so for example one of the things if you do use",
    "start": "1303679",
    "end": "1310240"
  },
  {
    "text": "an async void method you have to wrap everything inside of a try catch block because again anything uh any method",
    "start": "1310240",
    "end": "1317840"
  },
  {
    "text": "calling your async void method will almost never be able to catch an exception so uh so",
    "start": "1317840",
    "end": "1323960"
  },
  {
    "text": "here there we go so here we're we're going to still await the task if it",
    "start": "1323960",
    "end": "1329120"
  },
  {
    "text": "throws an exception we can actually catch it and with say fine and forget we can even do whatever we want so maybe we",
    "start": "1329120",
    "end": "1335760"
  },
  {
    "text": "just say trace right line as a simple example here handle that exception and the best part is by having it as an",
    "start": "1335760",
    "end": "1343120"
  },
  {
    "text": "extension method it's very explicit in your face that says hey I know this task",
    "start": "1343120",
    "end": "1348400"
  },
  {
    "text": "is going to run in the background that's what I want like it's very much a signal",
    "start": "1348400",
    "end": "1354400"
  },
  {
    "text": "to the other developers on your team is I want this to run in the background and that's okay and hey let's handle the",
    "start": "1354400",
    "end": "1359760"
  },
  {
    "text": "exceptions if we need it so uh I know I'm a little biased because I created the Nougat package but it is available",
    "start": "1359760",
    "end": "1366320"
  },
  {
    "text": "on Nougat and it does have over 3 million downloads so hopefully I'm doing something right uh last I checked",
    "start": "1366320",
    "end": "1371919"
  },
  {
    "text": "there's some crazy companies like I think I saw Mozilla's using it now which is wild this is actually just a new",
    "start": "1371919",
    "end": "1378080"
  },
  {
    "text": "package I made for a talk back in 2018 and here we are still talking about it",
    "start": "1378080",
    "end": "1383360"
  },
  {
    "text": "so all right so that to-do is done let's scroll down what else do we have here all right so now we're in our our async",
    "start": "1383360",
    "end": "1390080"
  },
  {
    "text": "task method called refresh again this is what gets called when the user does a pull to refresh now the first thing I",
    "start": "1390080",
    "end": "1395600"
  },
  {
    "text": "want to mention is this method is a async task method and you'll see the",
    "start": "1395600",
    "end": "1400880"
  },
  {
    "text": "parameter cancellation token as good C developers anytime we have an",
    "start": "1400880",
    "end": "1406960"
  },
  {
    "text": "asynchronous method so anything that returns task body task async innumerable we'll touch on those in just a minute",
    "start": "1406960",
    "end": "1413120"
  },
  {
    "text": "you always want to allow the user or the other developer consuming this to pass in a cancellation token",
    "start": "1413120",
    "end": "1419159"
  },
  {
    "text": "because we don't know how long this task is going to run or rather if you wrote this code I don't know how long your",
    "start": "1419159",
    "end": "1424799"
  },
  {
    "text": "task is going to run and specifically for like my mobile app mobile apps or mobile devices are notorious for having",
    "start": "1424799",
    "end": "1431840"
  },
  {
    "text": "bad internet connectivity so if one of my users is on a bus and there's phones switching between towers going through",
    "start": "1431840",
    "end": "1437840"
  },
  {
    "text": "tunnels and it's going to take 2 minutes to load all these stories I don't want my user sitting there watching uh this",
    "start": "1437840",
    "end": "1445039"
  },
  {
    "text": "task just spin for 2 minutes like I'm just going to cancel the task and let the user know hey sorry looks like you",
    "start": "1445039",
    "end": "1450559"
  },
  {
    "text": "got a poor internet connection try again later because otherwise what's going to happen is the user blames me and gives",
    "start": "1450559",
    "end": "1456000"
  },
  {
    "text": "me a onestar review because I couldn't cancel your task so as a good C# developer we're always going to allow or",
    "start": "1456000",
    "end": "1461679"
  },
  {
    "text": "we're always going to have cancellation token as a parameter here and in fact that's what we're getting yelled at for",
    "start": "1461679",
    "end": "1467360"
  },
  {
    "text": "here and fortunately IntelliSense says \"Hey don't worry the smart folks at",
    "start": "1467360",
    "end": "1472559"
  },
  {
    "text": "Microsoft and Task delay also allow you to pass in your token.\" But let's pretend they didn't right like let's",
    "start": "1472559",
    "end": "1478960"
  },
  {
    "text": "pretend we're using somebody else's library we have no control over this and they don't allow us to pass in a cancellation token what do we do well",
    "start": "1478960",
    "end": "1486960"
  },
  {
    "text": "there's a cool extension method called wait async where we can pass in the cancellation token here and essentially",
    "start": "1486960",
    "end": "1493919"
  },
  {
    "text": "what this does it bolts on that cancellation token to this task so even",
    "start": "1493919",
    "end": "1499200"
  },
  {
    "text": "if there's a task where we can't pass in a token we can still make sure to cancel",
    "start": "1499200",
    "end": "1504240"
  },
  {
    "text": "it by using weight async but there is a catch here and this is this is a really",
    "start": "1504240",
    "end": "1510000"
  },
  {
    "text": "subtle thing and that is if the task is already completed so I'm not going to keep this code but I just want to",
    "start": "1510000",
    "end": "1516159"
  },
  {
    "text": "explicitly show this as a completed task um so if you're running a task and it",
    "start": "1516159",
    "end": "1521440"
  },
  {
    "text": "has already completed or you know sometimes async task methods return task completed sometimes that's valid uh if",
    "start": "1521440",
    "end": "1528640"
  },
  {
    "text": "the task is already completed wait async will never run so this actually won't",
    "start": "1528640",
    "end": "1533679"
  },
  {
    "text": "cancel um the task because well it's already completed so sometimes if you",
    "start": "1533679",
    "end": "1538720"
  },
  {
    "text": "know that the task might already be complete you can bolt on weight async but it might also be a good idea to just",
    "start": "1538720",
    "end": "1546480"
  },
  {
    "text": "you know check to see if that token's canceled anyways afterwards just so you don't keep running code although you",
    "start": "1546480",
    "end": "1551919"
  },
  {
    "text": "know down here I'm passing the token so the next line of code will cancel it anyways but um but for this app in this",
    "start": "1551919",
    "end": "1558720"
  },
  {
    "text": "example let's put it all back because we don't need to worry about any of that because we can just pass in our token",
    "start": "1558720",
    "end": "1564159"
  },
  {
    "text": "happy days okay so the next to-do um you know we're awaiting top stories so we're",
    "start": "1564159",
    "end": "1570000"
  },
  {
    "text": "getting the top stories from the Hacker News API we're clearing the collection and then we're adding in the stories",
    "start": "1570000",
    "end": "1575279"
  },
  {
    "text": "into uh into a sorted collection here this looks pretty good right we're awaiting the task like how could this be",
    "start": "1575279",
    "end": "1582240"
  },
  {
    "text": "any better well let's again think about what's going on here um so let's say",
    "start": "1582240",
    "end": "1587679"
  },
  {
    "text": "thread one calls refresh thread one comes all the way into here eventually hits this await keyword returns let's",
    "start": "1587679",
    "end": "1593279"
  },
  {
    "text": "say get top stories is running on a background thread and then when it's done it goes back to the calling thread",
    "start": "1593279",
    "end": "1598400"
  },
  {
    "text": "and thread one jumps back in here to pick up where it left off and but then thread one's going to enter this for",
    "start": "1598400",
    "end": "1604320"
  },
  {
    "text": "each loop and what if there's a thousand stories in this top story list what there's a million stories in this top",
    "start": "1604320",
    "end": "1610080"
  },
  {
    "text": "story list well now thread one has to iterate over all of them and in the meantime what that means is thread one's",
    "start": "1610080",
    "end": "1617240"
  },
  {
    "text": "busy our app is frozen so again our user is just going to be sitting staring at an app trying to tap buttons trying to",
    "start": "1617240",
    "end": "1622640"
  },
  {
    "text": "swipe nothing's going to happen and again we get a one-star review and they force quit the app never to come back",
    "start": "1622640",
    "end": "1628720"
  },
  {
    "text": "again so what we can do to improve this code right here is tack on configure",
    "start": "1628720",
    "end": "1634640"
  },
  {
    "text": "await false so configure false is an extension method on task where we can",
    "start": "1634640",
    "end": "1639799"
  },
  {
    "text": "tell.net hey I don't care about returning to the calling thread now it'll still there will still be a thread",
    "start": "1639799",
    "end": "1646880"
  },
  {
    "text": "switch when it's done but now if thread one kicks off this task kicks off this",
    "start": "1646880",
    "end": "1652240"
  },
  {
    "text": "method I should say comes in here and hits the await keyword thread one will return get top stories runs in the",
    "start": "1652240",
    "end": "1657600"
  },
  {
    "text": "background thread and then when it's done git top stories or rathernet will",
    "start": "1657600",
    "end": "1663360"
  },
  {
    "text": "say okay great thanks Git top stories what what thread uh what thread called you what what was the calling thread",
    "start": "1663360",
    "end": "1668799"
  },
  {
    "text": "that I should return to well configurate false says don't even worry about it just go to the thread pool and grab",
    "start": "1668799",
    "end": "1675440"
  },
  {
    "text": "whatever thread's available and then continue running the code down here so now instead of returning back to thread",
    "start": "1675440",
    "end": "1681279"
  },
  {
    "text": "one and maybe forcing thread one to do a thousand iterations in this for each loop a background thread will pick up",
    "start": "1681279",
    "end": "1687360"
  },
  {
    "text": "where we left off and this is also nice because what if thread one's busy right",
    "start": "1687360",
    "end": "1693039"
  },
  {
    "text": "like maybe maybe the user is scrolling vigorously and we need to return back to",
    "start": "1693039",
    "end": "1698799"
  },
  {
    "text": "the calling thread well if thread one's busy well we also have to wait for it to free up so with configure weight false",
    "start": "1698799",
    "end": "1704720"
  },
  {
    "text": "we get the benefit of not overworking the calling thread or rather not overworking the main thread but also we",
    "start": "1704720",
    "end": "1712000"
  },
  {
    "text": "don't have to wait for that calling thread to be finished to be free because it's just going to kick uh it's going to",
    "start": "1712000",
    "end": "1718799"
  },
  {
    "text": "uh pick up if any available thread from the thread pool so highly recommend configurate false um in specifically in",
    "start": "1718799",
    "end": "1726159"
  },
  {
    "text": "my world in the net maui world in the mobile world we do everything in MVVM architecture so model view view view",
    "start": "1726159",
    "end": "1731600"
  },
  {
    "text": "model if that means nothing to you that's fine as long as you remember the view is where all your UI code lives and",
    "start": "1731600",
    "end": "1737520"
  },
  {
    "text": "here where we are in the view model this is all business logic so none of this code touches the UI so my rule of thumb",
    "start": "1737520",
    "end": "1743360"
  },
  {
    "text": "is in the view model layer I configure false everything in my services layer I configurate false everything um and it",
    "start": "1743360",
    "end": "1750880"
  },
  {
    "text": "it does suck a little bit because you're going to start using configurate false probably 90 95% of the time in your app",
    "start": "1750880",
    "end": "1757760"
  },
  {
    "text": "and there's no way to change the default um because configurate true is just the default so if you do nothing that's",
    "start": "1757760",
    "end": "1763840"
  },
  {
    "text": "configure way true um so if you don't need to return to the calling thread and in fact if you want to avoid overworking",
    "start": "1763840",
    "end": "1770480"
  },
  {
    "text": "the UI thread configure weight false is is your best friend now something really",
    "start": "1770480",
    "end": "1775919"
  },
  {
    "text": "cool that was recently added in uh 8 are these configurate options so we have",
    "start": "1775919",
    "end": "1783840"
  },
  {
    "text": "four edums here now that we can also play with so uh this first one configurate",
    "start": "1783840",
    "end": "1790080"
  },
  {
    "text": "options.none i should have just copy pasted that there we go so configurate options.none this is the same thing as",
    "start": "1792200",
    "end": "1797919"
  },
  {
    "text": "configure await false uh it's a little unintuitive the naming naming it none probably not",
    "start": "1797919",
    "end": "1805520"
  },
  {
    "text": "the best naming choice but I've been on the other side of the naming battle it's hard I get it but is if you look at it",
    "start": "1805520",
    "end": "1811360"
  },
  {
    "text": "you'll also see continue on captured context and that one is the same as configure await true and you might start",
    "start": "1811360",
    "end": "1819120"
  },
  {
    "text": "to be thinking well okay I mean that's cool but you know why are we just renaming things for no reason well the",
    "start": "1819120",
    "end": "1824320"
  },
  {
    "text": "cool thing is here there's well there's two more that we haven't talked about yet but also these are enums so we can chain these together so I can also say",
    "start": "1824320",
    "end": "1831679"
  },
  {
    "text": "configurate options continue on captured context and force yielding so remember when we",
    "start": "1831679",
    "end": "1837600"
  },
  {
    "text": "looked at the compiled code earlier we saidnet first looks to see is that task already completed because if it is no",
    "start": "1837600",
    "end": "1844799"
  },
  {
    "text": "thread switch great optimization we're going to keep rolling but maybe we still want to force a thread switch and this",
    "start": "1844799",
    "end": "1852159"
  },
  {
    "text": "might seem a little bit weird but I promise I've I've used this before or if you've ever used a uh await task.yield",
    "start": "1852159",
    "end": "1858240"
  },
  {
    "text": "yield basically the same idea because sometimes you need to update the UI you want to yield the UI thread so that can",
    "start": "1858240",
    "end": "1865520"
  },
  {
    "text": "update something based on the result of the task whether it had already completed or not so we also get",
    "start": "1865520",
    "end": "1871520"
  },
  {
    "text": "configurate optionsforce yielding which is essentially taskyield but in line which",
    "start": "1871520",
    "end": "1877760"
  },
  {
    "text": "is kind of cool and then the other one which scares the pants off me",
    "start": "1877760",
    "end": "1883320"
  },
  {
    "text": "is configurate options suppress throwing which what did we talk about we always",
    "start": "1883320",
    "end": "1888880"
  },
  {
    "text": "want to await every task so we'll rethrow the exception so that we can handle it we want to do that as good C#",
    "start": "1888880",
    "end": "1894080"
  },
  {
    "text": "developers well now you can tell it no I don't care don't don't rethrow any exception um but I first before I go on",
    "start": "1894080",
    "end": "1902960"
  },
  {
    "text": "a rant about this um I am getting yelled at here and I want to show you why and it's because suppressed throwing only",
    "start": "1902960",
    "end": "1909519"
  },
  {
    "text": "works in some scenarios there we go so suppressed throwing is not supported or rather is only supported with",
    "start": "1909519",
    "end": "1916000"
  },
  {
    "text": "non-generic tasks so top stories returns a task of type what list of story models",
    "start": "1916000",
    "end": "1922320"
  },
  {
    "text": "um so we can't actually use it here but for something like task.delay it would actually be valid because this is just",
    "start": "1922320",
    "end": "1928880"
  },
  {
    "text": "returning a task so you know with suppressed throwing uh actually speaking of task delay like this is one of the",
    "start": "1928880",
    "end": "1935519"
  },
  {
    "text": "places where I've used it in in production code where I've said suppressed throwing because you know if",
    "start": "1935519",
    "end": "1941840"
  },
  {
    "text": "this token is canceled do I really wanted to throw an exception here maybe maybe not um but the the only other",
    "start": "1941840",
    "end": "1949840"
  },
  {
    "text": "place where I've seen this as we'll say a quasi valid use case is let's say you",
    "start": "1949840",
    "end": "1955120"
  },
  {
    "text": "have a bunch of tasks you're kicking off all at the same time and then you're just going to say await task.all so",
    "start": "1955120",
    "end": "1960880"
  },
  {
    "text": "you're going to say I've got five tasks i want to wait them all at the same time so wait task win all but if one of those",
    "start": "1960880",
    "end": "1967279"
  },
  {
    "text": "tasks throws an exception that kicks out of your task win all and doesn't allow the other tasks to complete so if you",
    "start": "1967279",
    "end": "1974640"
  },
  {
    "text": "want all the tasks to complete you could use suppress throwing but then remember to be a good C# developer check each one",
    "start": "1974640",
    "end": "1980720"
  },
  {
    "text": "of those tasks to see if it did fault um just in case so you can handle that exception okay so all that said I'm just",
    "start": "1980720",
    "end": "1988399"
  },
  {
    "text": "going to erase all this and go back to configurate false that's all I really want to do i just want a little bit of that performance improvement here um",
    "start": "1988399",
    "end": "1996519"
  },
  {
    "text": "and that is good oh and I forgot to mention we'll return back to this",
    "start": "1996519",
    "end": "2002480"
  },
  {
    "text": "minimum refresh time task but if any of you are wondering why I'm doing this um I'm doing it it's it's kind of a little",
    "start": "2002480",
    "end": "2008480"
  },
  {
    "text": "hack we do as mobile developers where um sometimes when you do a pull to refresh these values might get cached on an edge",
    "start": "2008480",
    "end": "2014960"
  },
  {
    "text": "server and they might come back within a couple hundred milliseconds and you know what 300 milliseconds is how fast it",
    "start": "2014960",
    "end": "2020640"
  },
  {
    "text": "takes to blink your eye so literally the user might not see that little spinning indicator or any of the animations",
    "start": "2020640",
    "end": "2025840"
  },
  {
    "text": "happen and if that happens then they're just going to keep pull refresh and force our app to go out and uh make API",
    "start": "2025840",
    "end": "2032159"
  },
  {
    "text": "calls a bunch of times so what I do is actually I purposely slow down your app",
    "start": "2032159",
    "end": "2037440"
  },
  {
    "text": "a little bit in this case by two seconds just to just to make sure you see that spinning indicator for a couple seconds",
    "start": "2037440",
    "end": "2042640"
  },
  {
    "text": "so you don't start hammering uh my my backend APIs okay moving on to the next",
    "start": "2042640",
    "end": "2048800"
  },
  {
    "text": "to-do all right so finally down here right so speaking of that minimum refresh time task um so one thing we're",
    "start": "2048800",
    "end": "2055919"
  },
  {
    "text": "getting yelled at which is kind of cool is we want to put the token in great but we're using",
    "start": "2055919",
    "end": "2063158"
  },
  {
    "text": "here's terrible don't ever use it i I kind of wish it didn't exist although it kind of has to um wait is what we call a",
    "start": "2063159",
    "end": "2072320"
  },
  {
    "text": "it's it's a blocking call um so the the obvious solution here is we just we just",
    "start": "2072320",
    "end": "2078158"
  },
  {
    "text": "need to await that task so this is there we go so you know fun fact yes",
    "start": "2078159",
    "end": "2085440"
  },
  {
    "text": "you can use await async await in the try catch and finally block um but the",
    "start": "2085440",
    "end": "2090800"
  },
  {
    "text": "reasone is bad is instead of the await keyword which releases the calling",
    "start": "2090800",
    "end": "2096480"
  },
  {
    "text": "thread if the task hasn't yet completed says uhuh calling thread you stay right here you're not going",
    "start": "2096480",
    "end": "2102560"
  },
  {
    "text": "anywhere but I'm still running this code on a background thread and so if you think about it like if that's thread one",
    "start": "2102560",
    "end": "2109599"
  },
  {
    "text": "that we're holding hostage with well again we're just freezing our app again but maybe you're thinking okay whatever",
    "start": "2109599",
    "end": "2116480"
  },
  {
    "text": "like I don't write mobile apps i just do backend APIs i never have to worry about a UI who cares about thread one i don't",
    "start": "2116480",
    "end": "2123240"
  },
  {
    "text": "well still bad because now you're using two threads every time you should only be using one and so your backend API is",
    "start": "2123240",
    "end": "2131359"
  },
  {
    "text": "going to reach what we call thread pool exhaustion even faster because you're essentially doubling the amount of",
    "start": "2131359",
    "end": "2136640"
  },
  {
    "text": "threads that you should be using so weight's bad for everybody don't use it uh avoid it if you",
    "start": "2136640",
    "end": "2142119"
  },
  {
    "text": "can just instead await the task okay so the next refactor get top",
    "start": "2142119",
    "end": "2149599"
  },
  {
    "text": "stories here this one this one looks a little weird and it kind of is a little weird and it's kind",
    "start": "2149599",
    "end": "2155359"
  },
  {
    "text": "of how the hacker API news hacker news API works is that I have to first get the top story ids and then once I have",
    "start": "2155359",
    "end": "2163200"
  },
  {
    "text": "those top story ids I can make iterative API calls to get the information about the stories i I wish they would just let",
    "start": "2163200",
    "end": "2169920"
  },
  {
    "text": "me get the stories in one API call i don't understand why I have to make so many API calls to HackerNews just for",
    "start": "2169920",
    "end": "2175440"
  },
  {
    "text": "this very simple app but that's the design they gave me so what we're doing here is we're getting the top story ids",
    "start": "2175440",
    "end": "2181200"
  },
  {
    "text": "and then one by one we're going out and getting each story and this isn't great",
    "start": "2181200",
    "end": "2186400"
  },
  {
    "text": "because we're doing everything one by one you know what we should be doing is getting all of the IDs at the or getting",
    "start": "2186400",
    "end": "2192720"
  },
  {
    "text": "all the top stories at the same time so what I'm going to do is I'm going to jump over here and I'm going to copy",
    "start": "2192720",
    "end": "2199040"
  },
  {
    "text": "paste some code from our good async practices view model",
    "start": "2199040",
    "end": "2205720"
  },
  {
    "text": "and this code uses I async innumerable and this",
    "start": "2205720",
    "end": "2211760"
  },
  {
    "text": "is really cool maybe you've never created an isync innumerable method before but I'll bet you've used it",
    "start": "2211760",
    "end": "2217520"
  },
  {
    "text": "because with sync innumerable it unlocks the await for each loop so now we can",
    "start": "2217520",
    "end": "2223200"
  },
  {
    "text": "say wait for each var top story",
    "start": "2223200",
    "end": "2229160"
  },
  {
    "text": "in get top stories there",
    "start": "2229160",
    "end": "2235560"
  },
  {
    "text": "we there we go and then this code",
    "start": "2235560",
    "end": "2241079"
  },
  {
    "text": "here where we add in that story to the list we'll bump it up there and we",
    "start": "2241079",
    "end": "2247440"
  },
  {
    "text": "should clear clear the list before we iterate and then delete all this code we don't need anymore so sending the whole",
    "start": "2247440",
    "end": "2254160"
  },
  {
    "text": "loop into into a thread into a single thread sorry you're sending the whole",
    "start": "2254160",
    "end": "2259440"
  },
  {
    "text": "loop into a single thread let's hang on on questions i'm sorry i I truly don't know what you're asking um",
    "start": "2259440",
    "end": "2266480"
  },
  {
    "text": "but um so what we're doing here is now in",
    "start": "2266480",
    "end": "2271839"
  },
  {
    "text": "get top stories we still have to get all the top story ids but then what I do is",
    "start": "2271839",
    "end": "2278560"
  },
  {
    "text": "I create a list of tasks and then I kick off a get story API call for",
    "start": "2278560",
    "end": "2286000"
  },
  {
    "text": "every top story ID that I have so eventually essentially I'm firing off um all these all these tasks at the same",
    "start": "2286000",
    "end": "2292480"
  },
  {
    "text": "time and then down here we're calling task.win each so this",
    "start": "2292480",
    "end": "2297760"
  },
  {
    "text": "is a cool new API introduced in net 9 task.win each so it just takes in our",
    "start": "2297760",
    "end": "2303680"
  },
  {
    "text": "our list of tasks and anytime or as soon as one of these tasks has completed then",
    "start": "2303680",
    "end": "2310560"
  },
  {
    "text": "we can enter this await for each loop where uh let's rewrite this code just a",
    "start": "2310560",
    "end": "2315920"
  },
  {
    "text": "little bit we'll say top store equals",
    "start": "2315920",
    "end": "2321000"
  },
  {
    "text": "There we go that's a little easier to look at so basically as soon as any of those are done it'll yield return the",
    "start": "2323920",
    "end": "2331200"
  },
  {
    "text": "result now this yield return maybe you've never used it before or maybe you've used it in I innumerable yield",
    "start": "2331200",
    "end": "2336560"
  },
  {
    "text": "return doesn't mean we're exiting this method it doesn't mean we're returning out of this method completely it just",
    "start": "2336560",
    "end": "2341839"
  },
  {
    "text": "essentially means we're temporarily yielding to whoever's calling this method to give this value so really",
    "start": "2341839",
    "end": "2347680"
  },
  {
    "text": "what's going on here is as soon as one of these stories is finished uh downloading from the API we yield return",
    "start": "2347680",
    "end": "2354800"
  },
  {
    "text": "which means net comes into here and then enters this await for each loop where it",
    "start": "2354800",
    "end": "2359920"
  },
  {
    "text": "adds that top story to our list so as the results come in I'm able to show that on the screen whereas before the",
    "start": "2359920",
    "end": "2367119"
  },
  {
    "text": "user is just sitting there for like 20 seconds looking at a spinning indicator seeing nothing change whereas now we can",
    "start": "2367119",
    "end": "2373920"
  },
  {
    "text": "feed them and stream them the data as it comes in so even if it takes the same amount of time to get the data it feels",
    "start": "2373920",
    "end": "2380800"
  },
  {
    "text": "like it takes less time and users can see those articles coming in and they can tap on them as as they complete so",
    "start": "2380800",
    "end": "2388480"
  },
  {
    "text": "some really really cool stuff with Isync innumerable but there's a couple things in here I want to call out the first",
    "start": "2388480",
    "end": "2394480"
  },
  {
    "text": "thing being this enumerator cancellation attribute so uh if if we didn't have it",
    "start": "2394480",
    "end": "2399760"
  },
  {
    "text": "we do get yelled at which is good um but what it does is it takes this",
    "start": "2399760",
    "end": "2405599"
  },
  {
    "text": "cancellation token and it actually passes it in down into the low-level",
    "start": "2405599",
    "end": "2410720"
  },
  {
    "text": "framework iterator so what does that mean well more specifically what that",
    "start": "2410720",
    "end": "2415760"
  },
  {
    "text": "means is every time this for each loop iterates,net will automatically check",
    "start": "2415760",
    "end": "2421119"
  },
  {
    "text": "this token for me so I never have to uh see if this token's been cancelled because every time this loop iterates",
    "start": "2421119",
    "end": "2427599"
  },
  {
    "text": "thanks to that enumerator cancellation attribute net's going to check it for me if we didn't have it here then we would",
    "start": "2427599",
    "end": "2434560"
  },
  {
    "text": "have to do we would want to do something like like this down in our code checking",
    "start": "2434560",
    "end": "2441520"
  },
  {
    "text": "that token all the time but we don't have to because we're using enumerator cancellation uh the other cool thing or",
    "start": "2441520",
    "end": "2448960"
  },
  {
    "text": "the other not the other thing I want to highlight here for you is um inside of this uh task when each so again this is",
    "start": "2448960",
    "end": "2456240"
  },
  {
    "text": "a new API that just came to us in net 9 and you might think just based on every",
    "start": "2456240",
    "end": "2461760"
  },
  {
    "text": "other method we've looked at today is that we would pass in the token here but as you can see you can't and that's",
    "start": "2461760",
    "end": "2469200"
  },
  {
    "text": "because the way you bolt on cancellation tokens to task win each is with this extension method and yes you can also",
    "start": "2469200",
    "end": "2475920"
  },
  {
    "text": "say configure weight fall so things things start getting a little long here but um but it's really really cool it",
    "start": "2475920",
    "end": "2481440"
  },
  {
    "text": "makes for a really nice user experience so they can see the data coming in in real time and they don't have to just",
    "start": "2481440",
    "end": "2486880"
  },
  {
    "text": "stare at a blank app okay so now let's refactor this get",
    "start": "2486880",
    "end": "2492720"
  },
  {
    "text": "story method so this is this is the method that calls the hacker news API pulls down that story that we're looking for and you know we're using async await",
    "start": "2492720",
    "end": "2500000"
  },
  {
    "text": "you know we could probably do a configure await false here um but this looks pretty good you know what what",
    "start": "2500000",
    "end": "2505440"
  },
  {
    "text": "could we do to improve this well again let's think about what's happening here so the calling thread enters this method",
    "start": "2505440",
    "end": "2511440"
  },
  {
    "text": "so let's say thread five enters get story thread five hits the await keyword so it returns this is going to run on a",
    "start": "2511440",
    "end": "2518880"
  },
  {
    "text": "background thread and then when it's done we're going to switch back to uh we're going to do another thread switch",
    "start": "2518880",
    "end": "2524880"
  },
  {
    "text": "and we've just had multiple thread switches inside of this method which isn't isn't terrible but if we look a",
    "start": "2524880",
    "end": "2531839"
  },
  {
    "text": "little closer we can see that get story returns a type task of type story model",
    "start": "2531839",
    "end": "2539240"
  },
  {
    "text": "whoops there we go a task of type story model and this method called get story",
    "start": "2539240",
    "end": "2545440"
  },
  {
    "text": "is also returning a task of type story model so what we can do because we're only using the await keyword here in the",
    "start": "2545440",
    "end": "2551839"
  },
  {
    "text": "return statement we can actually get rid of a wait and we can get rid of async and just return the task so that saves",
    "start": "2551839",
    "end": "2558160"
  },
  {
    "text": "us a thread switch makes our code uh performance improve just a little bit more and it essentially defers that",
    "start": "2558160",
    "end": "2565200"
  },
  {
    "text": "thread switching to now whoever is calling this method get story okay so one more refactor down",
    "start": "2565200",
    "end": "2571800"
  },
  {
    "text": "here we have the get top story IDs we'll talk afterwards man we're running out of",
    "start": "2571800",
    "end": "2577680"
  },
  {
    "text": "time already uh so get top story IDs it kind of looks the same right the",
    "start": "2577680",
    "end": "2583839"
  },
  {
    "text": "only place where we're using the the await keyword is in the return statement so it looks like get top story ids has",
    "start": "2583839",
    "end": "2589839"
  },
  {
    "text": "the same method signature and so yeah why not just uh get rid of async get rid of a wait you know we got to do task",
    "start": "2589839",
    "end": "2596880"
  },
  {
    "text": "from result here but that's not too bad and huzah performance improvement right",
    "start": "2596880",
    "end": "2602160"
  },
  {
    "text": "well this is actually a trick question because this is actually inside of a try",
    "start": "2602160",
    "end": "2607760"
  },
  {
    "text": "catch block and so if we were to return the task we would exit this method we would we would leave this method we",
    "start": "2607760",
    "end": "2613680"
  },
  {
    "text": "would leave the try catch block meaning if this did throw an exception we would never catch it here so this is actually",
    "start": "2613680",
    "end": "2620240"
  },
  {
    "text": "a bit of a trick question we do want to keep return await in these scenarios where we are wrapping our code inside of",
    "start": "2620240",
    "end": "2626800"
  },
  {
    "text": "a try catch block if we're disposing of anything um but what we can do here is instead of using task we could use value",
    "start": "2626800",
    "end": "2635119"
  },
  {
    "text": "task now value task is very similar to task but task is a reference type and",
    "start": "2635119",
    "end": "2640480"
  },
  {
    "text": "value task is a value type so value task lives on the stack whereas reference types live on the heap and if we look",
    "start": "2640480",
    "end": "2646880"
  },
  {
    "text": "closely at this method here the first thing it does it looks to see if is the data recent so if we've already pulled",
    "start": "2646880",
    "end": "2654000"
  },
  {
    "text": "the top story IDs within the past hour we don't need to make another API call right we can just grab the ones we",
    "start": "2654000",
    "end": "2659599"
  },
  {
    "text": "already got it's fine but the first time this method runs it's not going to have any data so the first time it runs we're",
    "start": "2659599",
    "end": "2666319"
  },
  {
    "text": "going to call that await keyword and go get the top stories but the second time it runs we're not going to use the await",
    "start": "2666319",
    "end": "2671599"
  },
  {
    "text": "keyword and the third time it runs we're not going to use the await keyword and the fourth time it runs so another way of saying that is this is the hot path",
    "start": "2671599",
    "end": "2678079"
  },
  {
    "text": "of our method and our hot path does not use the await keyword so if you have any code where uh the hot path does not use",
    "start": "2678079",
    "end": "2686079"
  },
  {
    "text": "the await keyword you can get a little bit of a performance boost by using value task because you don't have to do",
    "start": "2686079",
    "end": "2692480"
  },
  {
    "text": "all the initialization of building up a task and putting on the heap because that's more expensive whereas pushing",
    "start": "2692480",
    "end": "2697680"
  },
  {
    "text": "onto the top of a stack just O of one so we get a little performance improvement here now they're not exactly the same uh",
    "start": "2697680",
    "end": "2704000"
  },
  {
    "text": "there's a couple limitations of value task like you can't pass around a value task uh you can't reuse a value task",
    "start": "2704000",
    "end": "2710319"
  },
  {
    "text": "whereas you can do both of those things with task but if you just remember that",
    "start": "2710319",
    "end": "2716480"
  },
  {
    "text": "having a hot hot path of a method that doesn't use the await keyword and just return returns a value task instead you",
    "start": "2716480",
    "end": "2723119"
  },
  {
    "text": "can just await it happy days get a nice little performance improvement here all",
    "start": "2723119",
    "end": "2729920"
  },
  {
    "text": "right so I know I threw a lot of stuff at you um let's let's sum it up let's",
    "start": "2732119",
    "end": "2737680"
  },
  {
    "text": "talk about these async best practices so uh never use never use result they're",
    "start": "2737680",
    "end": "2743119"
  },
  {
    "text": "both bad they're both blocking like we talked about earlier if you useweight or result it blocks the calling thread from",
    "start": "2743119",
    "end": "2749680"
  },
  {
    "text": "returning well meanwhile meanwhile running all that code still on a background thread so you're using two",
    "start": "2749680",
    "end": "2756079"
  },
  {
    "text": "threads when we only need one and you risk locking up the UI thread uh so we should always just use async aait but to",
    "start": "2756079",
    "end": "2762480"
  },
  {
    "text": "be fair there are still some scenarios even in 2025 where we can't use async aait like uh for me usually I see those",
    "start": "2762480",
    "end": "2769839"
  },
  {
    "text": "when I have to implement an interface that has a method that just returns a bool you know I can't not a task of bool",
    "start": "2769839",
    "end": "2775280"
  },
  {
    "text": "I can't await it um so my recommendation there is you can actually replace bothwe",
    "start": "2775280",
    "end": "2780720"
  },
  {
    "text": "and result with these two methods string together get a waiter get result they",
    "start": "2780720",
    "end": "2785920"
  },
  {
    "text": "actually do the exact same thing get a waiter get result is still just as bad it's blocking we shouldn't use it if we",
    "start": "2785920",
    "end": "2790960"
  },
  {
    "text": "can just await it but the reason geter get results a little bit better is if an exception gets thrown in that task get",
    "start": "2790960",
    "end": "2798240"
  },
  {
    "text": "results throws our exception so uh whereas if I use the waiter.result",
    "start": "2798240",
    "end": "2804560"
  },
  {
    "text": "result keyword and exceptions thrown it throws a system.agregate exception which is an exception that holds exceptions",
    "start": "2804560",
    "end": "2811119"
  },
  {
    "text": "inside of it and so if you've ever had to debug those you have to know you have to go one level deeper into your call",
    "start": "2811119",
    "end": "2816880"
  },
  {
    "text": "stack they're a little tough especially for junior developers to figure out so don't use don't use result but if you",
    "start": "2816880",
    "end": "2823359"
  },
  {
    "text": "have to get a wait or get result at least give you a better exception although you're still blocking you're still using u too many too many threads",
    "start": "2823359",
    "end": "2830880"
  },
  {
    "text": "when you shouldn't be uh fire and forget tasks again I know I'm biased but you can use safe fire and forget it's",
    "start": "2830880",
    "end": "2836800"
  },
  {
    "text": "available on Nougat as asyncate best practices uh it's also an open source MIT license library if you just want to",
    "start": "2836800",
    "end": "2843359"
  },
  {
    "text": "copy that little extension method you're more than welcome to but again avoid async void it",
    "start": "2843359",
    "end": "2850000"
  },
  {
    "text": "is dangerous i think we all know why now um but what's nice with safe and forget is you have this explicit in-your-face",
    "start": "2850000",
    "end": "2857680"
  },
  {
    "text": "call that says I know this is going to run in the background and I know my code's going to continue um so you can",
    "start": "2857680",
    "end": "2864560"
  },
  {
    "text": "avoid implementing async void um we can avoid return await so if you only if the",
    "start": "2864560",
    "end": "2870960"
  },
  {
    "text": "only place in your method where you're using the await keyword is in the return statement you can just instead return",
    "start": "2870960",
    "end": "2876400"
  },
  {
    "text": "the task but remember if you're inside of a try catch block you definitely still want to await that task so you can",
    "start": "2876400",
    "end": "2882079"
  },
  {
    "text": "catch the exception or if you're inside of a using like a disposable block you definitely still want to return a weight",
    "start": "2882079",
    "end": "2887599"
  },
  {
    "text": "because you don't want to dispose of an object that you're using inside of that method so we can a avoid return a wait",
    "start": "2887599",
    "end": "2894640"
  },
  {
    "text": "except in those special cases utilize configure weight false uh so if you don't need to return to the calling",
    "start": "2894640",
    "end": "2900720"
  },
  {
    "text": "thread which for me this is anytime I don't need to return to the UI thread I configurate false everywhere now there's",
    "start": "2900720",
    "end": "2906960"
  },
  {
    "text": "a giant caveat here and that has to do with something called the synchronization context now I like I",
    "start": "2906960",
    "end": "2914400"
  },
  {
    "text": "said I I just published a 4-hour course where I literally spend a whole hour talking about synchronization context",
    "start": "2914400",
    "end": "2919680"
  },
  {
    "text": "and and we don't got time for that right now but long story short synchronization context is whatnet uses to return to the",
    "start": "2919680",
    "end": "2926400"
  },
  {
    "text": "UI thread return to the calling thread and in ASP.NET Core it doesn't have a",
    "start": "2926400",
    "end": "2931680"
  },
  {
    "text": "synchronization context so uh technically in ASP.NET Core configure weight false is the same as configure",
    "start": "2931680",
    "end": "2937040"
  },
  {
    "text": "weight true um but on any other platform where we have a synchronization context",
    "start": "2937040",
    "end": "2942079"
  },
  {
    "text": "configurate false is always best to use if you don't need to return to the calling",
    "start": "2942079",
    "end": "2947160"
  },
  {
    "text": "thread and then also we have configurate options so uh these are kind of the new",
    "start": "2947160",
    "end": "2952240"
  },
  {
    "text": "hotness that came out in net 8 uh so if you want to be a little bit more explicit instead of saying configurate",
    "start": "2952240",
    "end": "2958400"
  },
  {
    "text": "true you could say configurate options continue on captured context or if you want to do crazy stuff like suppress",
    "start": "2958400",
    "end": "2964160"
  },
  {
    "text": "throwing which you better have a real good reason i'm gonna I'm gonna ask some questions when I see that in a PR um you",
    "start": "2964160",
    "end": "2970559"
  },
  {
    "text": "can chain these together because they're all enum so you can you can force yield you can suppress throwing and you can",
    "start": "2970559",
    "end": "2976319"
  },
  {
    "text": "not return to the calling thread all at the same time utilize value task so like I",
    "start": "2976319",
    "end": "2982400"
  },
  {
    "text": "mentioned it's basically an optimized version of task it lives in the stack instead of on the heap but it does have",
    "start": "2982400",
    "end": "2988559"
  },
  {
    "text": "some restrictions around it so don't go crazy don't create new value tasks in your code don't go passing around value",
    "start": "2988559",
    "end": "2994160"
  },
  {
    "text": "tasks don't reuse value tasks that's not what they're there for it if but you're totally safe if you just use it for your",
    "start": "2994160",
    "end": "3000160"
  },
  {
    "text": "methods return value and just think of it as async await but again this is when",
    "start": "3000160",
    "end": "3005520"
  },
  {
    "text": "your hot path doesn't need the await keyword innumerable so if you want to",
    "start": "3005520",
    "end": "3011520"
  },
  {
    "text": "stream data if you want to give users updates in real time so they're not just looking at some spinning indicator async",
    "start": "3011520",
    "end": "3017599"
  },
  {
    "text": "innumerable is really really cool um it allows us to show that data as it arrives it's better user experience but",
    "start": "3017599",
    "end": "3024319"
  },
  {
    "text": "keep in mind you want to use that enumerator cancellation attribute on your cancellation token because again",
    "start": "3024319",
    "end": "3029520"
  },
  {
    "text": "we're good C# developers every time we create an asynchronous method we're going to have a cancellation token parameter but in this case slap on that",
    "start": "3029520",
    "end": "3036400"
  },
  {
    "text": "attribute and then we get a little performance bump from net checking if our co tokens expired or",
    "start": "3036400",
    "end": "3042520"
  },
  {
    "text": "not wait async so again if if we're using somebody else's code and they're not good developers and they don't allow",
    "start": "3042520",
    "end": "3048480"
  },
  {
    "text": "us to pass in a cancellation token we can always bolt one on by using weight async uh just keep in mind if the task",
    "start": "3048480",
    "end": "3055440"
  },
  {
    "text": "is already completed that wait async cancellation token will uh never throw that uh operation canceled exception so",
    "start": "3055440",
    "end": "3062559"
  },
  {
    "text": "slight nuance there but for more or less you can just bolt that on to cancel your tasks okay um I sync disposable so this",
    "start": "3062559",
    "end": "3071839"
  },
  {
    "text": "is one I didn't have an example in the code to show you but wanted to go over it here cuz this the syntax is a little",
    "start": "3071839",
    "end": "3078720"
  },
  {
    "text": "wonky right like if we look at this we have the await keyword here but the",
    "start": "3078720",
    "end": "3085359"
  },
  {
    "text": "await is happening in the disposing um but speaking of disposing I should explain what INC disposable is uh if you",
    "start": "3085359",
    "end": "3092480"
  },
  {
    "text": "know what I disposable is this is just an asynchronous version of it so I disposable is where we can put a little",
    "start": "3092480",
    "end": "3098480"
  },
  {
    "text": "extra code that needs to maybe free up some resources when our CL we're done using a class isync disposable allows us",
    "start": "3098480",
    "end": "3104800"
  },
  {
    "text": "to do the same thing but with async await so for IO heavy things like file stream this is great because maybe you",
    "start": "3104800",
    "end": "3110800"
  },
  {
    "text": "just read in a 30 megabyte file and you got to dispose of it well if you just did that with I disposable then you",
    "start": "3110800",
    "end": "3117680"
  },
  {
    "text": "might block your UI thread but with I async disposable it'll uh it'll do that using async aait which is great but look",
    "start": "3117680",
    "end": "3125359"
  },
  {
    "text": "at the syntax it's it it makes sense but at the same time it kind of doesn't um",
    "start": "3125359",
    "end": "3130480"
  },
  {
    "text": "but that's just because the await keyword goes here but the await doesn't actually execute until the disposing",
    "start": "3130480",
    "end": "3137200"
  },
  {
    "text": "starts so when we exit the using block that's when the async await action is",
    "start": "3137200",
    "end": "3142319"
  },
  {
    "text": "going to happen so yes we can we can await we can add configure weight false but all of that is going to execute a",
    "start": "3142319",
    "end": "3149280"
  },
  {
    "text": "little later um with the IA async disposable but still really great stuff highly recommend it if you can take",
    "start": "3149280",
    "end": "3155680"
  },
  {
    "text": "advantage of it okay so if you want to go even deeper",
    "start": "3155680",
    "end": "3161040"
  },
  {
    "text": "uh you can find a link to the course I've recently published on domera uh so it's available at uh dotrain.com like I",
    "start": "3161040",
    "end": "3168000"
  },
  {
    "text": "said this is a 4-hour course that I just published a couple months ago really really proud of this because this is all",
    "start": "3168000",
    "end": "3174319"
  },
  {
    "text": "the stuff that I wish I would have known when I started working with C# it would have saved me gosh months of my life",
    "start": "3174319",
    "end": "3180960"
  },
  {
    "text": "debugging things uh so this is where we go over some of the topics we talked about today but we go even deeper so",
    "start": "3180960",
    "end": "3187200"
  },
  {
    "text": "like what is synchronization context what is execution context what is like how how does async aait even work like",
    "start": "3187200",
    "end": "3193599"
  },
  {
    "text": "how does the Roslin compiler even know where to use it and all these things called duct typing it's it's all there",
    "start": "3193599",
    "end": "3198640"
  },
  {
    "text": "for you uh it is a paid course i don't control the platform i just made the content but it is something I'm really",
    "start": "3198640",
    "end": "3204160"
  },
  {
    "text": "proud of and highly recommend it and if you want to spend four more hours with me please do check it",
    "start": "3204160",
    "end": "3209480"
  },
  {
    "text": "out okay uh so now's the time if you haven't had a chance to take a uh picture of this slide you can take out",
    "start": "3209480",
    "end": "3216240"
  },
  {
    "text": "your phones grab this QR code it takes you to this URL and again this is where you can find everything we covered today",
    "start": "3216240",
    "end": "3222000"
  },
  {
    "text": "so this is where you can see um the slides this is where you can find a recording of this talk this is where you",
    "start": "3222000",
    "end": "3227040"
  },
  {
    "text": "can find all of the source code you can find the links to the Async best practices nougat packages I've made",
    "start": "3227040",
    "end": "3232160"
  },
  {
    "text": "links to the dome train course and then I've also put a bunch of articles in here that were helpful for me when I was",
    "start": "3232160",
    "end": "3238319"
  },
  {
    "text": "first learning how to use async in C# and I know they'll be helpful for you too thank",
    "start": "3238319",
    "end": "3245839"
  },
  {
    "text": "you all right we got five minutes yes sir",
    "start": "3250359",
    "end": "3257640"
  },
  {
    "text": "so um you had a whole bunch of bad practices there do the uh the analyzer",
    "start": "3257920",
    "end": "3263119"
  },
  {
    "text": "defaults warn you for all of these or do we have to turn things Oh man so analyzers yeah um there's a",
    "start": "3263119",
    "end": "3271680"
  },
  {
    "text": "couple good ones that um you know if you're using Jet Brains",
    "start": "3271680",
    "end": "3276720"
  },
  {
    "text": "Jet Brains is really really good about warning you about stuff um but I I do",
    "start": "3276720",
    "end": "3281839"
  },
  {
    "text": "want to go on a quick rant if if you allow me and that's the warning we get",
    "start": "3281839",
    "end": "3287920"
  },
  {
    "text": "remember back here we weren't awaiting this call and by the way there's better ways to kick off async task methods than",
    "start": "3287920",
    "end": "3293599"
  },
  {
    "text": "doing it in your constructor you shouldn't do this in general this is more for the demo but uh if you look at the the warning it just says this call",
    "start": "3293599",
    "end": "3300240"
  },
  {
    "text": "is not awaited the execution of this method continues before the call is completed and when I was a new developer",
    "start": "3300240",
    "end": "3306960"
  },
  {
    "text": "I said \"Yeah no that's why I didn't await it like why is this even a warning?\" And I worked at Microsoft for",
    "start": "3306960",
    "end": "3313040"
  },
  {
    "text": "seven years and I tried to get the runtime team to add in more just to say",
    "start": "3313040",
    "end": "3318480"
  },
  {
    "text": "and if an exception is thrown inside this task you'll never see it like because to me that's the big reason like",
    "start": "3318480",
    "end": "3323920"
  },
  {
    "text": "that's why we should be awaiting it so yeah things like these um there's there's good analyzers like these that",
    "start": "3323920",
    "end": "3330960"
  },
  {
    "text": "um I turn on warnings as errors for and that also saves you the headache of you",
    "start": "3330960",
    "end": "3336200"
  },
  {
    "text": "know like looking through PR reviews with a fine tooth comb like did you miss a task is there one hiding in there we",
    "start": "3336200",
    "end": "3342880"
  },
  {
    "text": "didn't await um so yeah there's analyzers we can turn on for all of these um and other good ones",
    "start": "3342880",
    "end": "3348680"
  },
  {
    "text": "are like this one here where it says \"Hey this has an overloaded method where you're not passing in your cancellation",
    "start": "3348680",
    "end": "3354799"
  },
  {
    "text": "token.\" So yeah I turn on all of these uh in my apps and it's it's really",
    "start": "3354799",
    "end": "3360319"
  },
  {
    "text": "really helpful it kind of forces you into best practices and if you turn them",
    "start": "3360319",
    "end": "3366000"
  },
  {
    "text": "off or you know if you do like a a suppress or if you suppress those warnings like you you better have a good",
    "start": "3366000",
    "end": "3372160"
  },
  {
    "text": "reason but yeah definitely there's some really good analyzers out there that you can make sure that any new pull request",
    "start": "3372160",
    "end": "3378160"
  },
  {
    "text": "that comes in will will still be good good question yes bit more of a",
    "start": "3378160",
    "end": "3384559"
  },
  {
    "text": "comment than a question just a one of your ones you did an optimization of",
    "start": "3384559",
    "end": "3390160"
  },
  {
    "text": "moving from an async method awaiting when it was just one line yep and made",
    "start": "3390160",
    "end": "3396880"
  },
  {
    "text": "it a straight public uh task yeah just returning the task if the if if the",
    "start": "3396880",
    "end": "3406240"
  },
  {
    "text": "called method throws an exception you're not in the stack trace if you aren't as away yeah so this",
    "start": "3406240",
    "end": "3415599"
  },
  {
    "text": "you're right this this does modify the stack trace and that's always the argument I hear against doing this and",
    "start": "3415599",
    "end": "3423040"
  },
  {
    "text": "uh it's he's not the best person to pick a battle with but David Fowler also advocates against doing this",
    "start": "3423040",
    "end": "3429640"
  },
  {
    "text": "but I can tell you this has never been a problem um so uh I've had bugs be thrown",
    "start": "3429640",
    "end": "3438319"
  },
  {
    "text": "and you can still find them and solve them u yeah like your stack trace might look a little different um but it's",
    "start": "3438319",
    "end": "3445119"
  },
  {
    "text": "never been a problem in my experience so yes it it does change the stack trace a little bit but it it has been a problem",
    "start": "3445119",
    "end": "3451920"
  },
  {
    "text": "in my experience oh interesting not not knowing which method called the throwing",
    "start": "3451920",
    "end": "3457760"
  },
  {
    "text": "method so like um the method that was",
    "start": "3457760",
    "end": "3462799"
  },
  {
    "text": "actually thrown was called from multiple paths um that were called from the same place",
    "start": "3462799",
    "end": "3469040"
  },
  {
    "text": "um so we didn't actually know which which one was thrown gotcha fair enough",
    "start": "3469040",
    "end": "3475200"
  },
  {
    "text": "okay yeah so maybe maybe still await it no problem yes sir you mentioned",
    "start": "3475200",
    "end": "3483359"
  },
  {
    "text": "configure false isn't needed for ASP.NET core uh I run all ASP.NET core at the",
    "start": "3483359",
    "end": "3489680"
  },
  {
    "text": "moment i haven't been using cancellation token really at all is that needed in ASP.NET core yeah because again um you",
    "start": "3489680",
    "end": "3498640"
  },
  {
    "text": "don't know how long that task is going to run so when you call a a method that returns a task that could run for 20",
    "start": "3498640",
    "end": "3504480"
  },
  {
    "text": "minutes who knows um so yeah you still want to give that control and allow",
    "start": "3504480",
    "end": "3509839"
  },
  {
    "text": "somebody else to cancel that method um and I mean we do have two minutes so",
    "start": "3509839",
    "end": "3514960"
  },
  {
    "text": "yeah synchronization context um what's what's kind of interesting is really what's happening under the hood when we",
    "start": "3514960",
    "end": "3521599"
  },
  {
    "text": "say configurate false what we're actually doing is setting the synchronization context to null so in",
    "start": "3521599",
    "end": "3527200"
  },
  {
    "text": "ASP.NET Core there there is no synchronization context so it's always null so that's that's kind of why",
    "start": "3527200",
    "end": "3532880"
  },
  {
    "text": "configurate false and true do the same thing but uh yeah definitely cancellation token super important um",
    "start": "3532880",
    "end": "3539760"
  },
  {
    "text": "you know if you control all the code you can go in and fix it but if you're ever going to publish APIs or libraries like",
    "start": "3539760",
    "end": "3545359"
  },
  {
    "text": "you got to have those in there for us",
    "start": "3545359",
    "end": "3549440"
  },
  {
    "text": "otherwise uh yeah I think I saw yep what's your opinion on like calling the",
    "start": "3551079",
    "end": "3556319"
  },
  {
    "text": "method in one line and wait for it later oh totally cool i mean that's what we're",
    "start": "3556319",
    "end": "3563440"
  },
  {
    "text": "doing down here in that try catch finally block is as long as you await it um and so that's that's a tough part you",
    "start": "3563440",
    "end": "3570079"
  },
  {
    "text": "know sometimes I've had to await it later you know um if you can avoid it",
    "start": "3570079",
    "end": "3576640"
  },
  {
    "text": "avoid it but I've had to like save it as a field and circle back to await it later but yeah you don't always have to",
    "start": "3576640",
    "end": "3582160"
  },
  {
    "text": "await it in line just don't lose track of it that's that's the only reason why it can be dangerous good question yes",
    "start": "3582160",
    "end": "3591440"
  },
  {
    "text": "when I started with with this I thought okay I have a cancellation token can I",
    "start": "3591440",
    "end": "3596799"
  },
  {
    "text": "just cancel things but you're really you're not sure",
    "start": "3596799",
    "end": "3603400"
  },
  {
    "text": "that you're not stopping um Yeah i mean because the database",
    "start": "3603400",
    "end": "3612040"
  },
  {
    "text": "yeah I mean there's there's always a level of trust somewhere and really what",
    "start": "3612720",
    "end": "3618880"
  },
  {
    "text": "we're assuming is that when I call you have to do this sometimes right yeah or",
    "start": "3618880",
    "end": "3627040"
  },
  {
    "text": "yeah or passing it in you know like that and taking advantage of the existing net APIs but yeah so when you do add in this",
    "start": "3627040",
    "end": "3634079"
  },
  {
    "text": "cancellation token that's that's actually a really good point so not only Do we have to have a cancellation token as a parameter but before we continue on",
    "start": "3634079",
    "end": "3642640"
  },
  {
    "text": "with any logic we should check to see if it's canceled and if there's not something that we can pass the token",
    "start": "3642640",
    "end": "3648400"
  },
  {
    "text": "into and check it for us then yeah token.throw if cancellation requested is is what I always use and what I",
    "start": "3648400",
    "end": "3654240"
  },
  {
    "text": "recommend but make make sure you do that in your code and then the rest of us yeah we just kind of have to trust that",
    "start": "3654240",
    "end": "3660559"
  },
  {
    "text": "everybody else did it in their code that's Yeah that's a really good point thank you uh do I see one more in the",
    "start": "3660559",
    "end": "3668240"
  },
  {
    "text": "back all right well thanks so much guys we'll see you around",
    "start": "3668839",
    "end": "3674680"
  }
]