[
  {
    "text": "all right good morning welcome to the get reactive with rxjs my name is Venkat",
    "start": "7950",
    "end": "13170"
  },
  {
    "text": "Subramanyam I'm going to talk about just a little bit about reactive programming in the beginning and then I'll talk a",
    "start": "13170",
    "end": "18449"
  },
  {
    "text": "little X J is does and how we can make use of some of the things it provides best time to ask questions or make",
    "start": "18449",
    "end": "25259"
  },
  {
    "text": "comments is when you have it so please don't hesitate anytime is a great time so let's get started",
    "start": "25259",
    "end": "30750"
  },
  {
    "text": "well reactive programming has been gaining quite a bit of interest and popularity in the recent times so we",
    "start": "30750",
    "end": "37590"
  },
  {
    "text": "begin to wonder you know why another yet another new programming model well one",
    "start": "37590",
    "end": "42870"
  },
  {
    "text": "of the things I've learned over the past few decades is we work in a field where we give a new name for what we already",
    "start": "42870",
    "end": "48870"
  },
  {
    "text": "do and get really excited about it one more time well this time the things that we are getting excited about are things",
    "start": "48870",
    "end": "55440"
  },
  {
    "text": "like microservices reactive programming and things like that it turns out they're not entirely actually new at all in fact reactive",
    "start": "55440",
    "end": "62399"
  },
  {
    "text": "programming is something that the concepts have been around for quite a long time so in a way if you really",
    "start": "62399",
    "end": "67860"
  },
  {
    "text": "think about it it's more of a REM Phasis of things we have already done we can probably relate this to what extreme",
    "start": "67860",
    "end": "74579"
  },
  {
    "text": "programming did for example well what did XP do XP had really nothing new and except that probably the",
    "start": "74579",
    "end": "80430"
  },
  {
    "text": "only thing new and XP was REM service on 12 different practices in a similar way reactive programming emphasizes certain",
    "start": "80430",
    "end": "87150"
  },
  {
    "text": "technical things that we should think about programming and emphasizing and how we develop applications so the",
    "start": "87150",
    "end": "93659"
  },
  {
    "text": "question really is you know is it really new and and the answer is no except for they do emphasis but what is it really",
    "start": "93659",
    "end": "100350"
  },
  {
    "text": "well if you really think about it things have changed quite a bit in the past you know maybe 10 years give or take I",
    "start": "100350",
    "end": "107369"
  },
  {
    "text": "almost am fearful when I think of those nostalgic days when I used to wake up in the morning and as my coffee part is",
    "start": "107369",
    "end": "113880"
  },
  {
    "text": "brewing coffee I would turn on the modem and it would dial and redial and I can hear the whoosh noise in my ears well",
    "start": "113880",
    "end": "120450"
  },
  {
    "text": "those days are long gone now we carry with on ourselves multiple devices that",
    "start": "120450",
    "end": "126330"
  },
  {
    "text": "are internet enabled it's unbelievable how much we are communicating with applications today and in fact that's",
    "start": "126330",
    "end": "133110"
  },
  {
    "text": "one thing I would say has completely changed in the last maybe 10 to 15 years it used to be that companies made",
    "start": "133110",
    "end": "139620"
  },
  {
    "text": "applications for their employees and the employees using the applications would then",
    "start": "139620",
    "end": "144640"
  },
  {
    "text": "interact with the customers well when employees are predominantly using applications those those are called",
    "start": "144640",
    "end": "149980"
  },
  {
    "text": "captive users when when users are captive they don't have control over what the applications do they pretty",
    "start": "149980",
    "end": "156100"
  },
  {
    "text": "much have to use what's given to them well clearly what's happened in the past about 10 years is companies have started",
    "start": "156100",
    "end": "162490"
  },
  {
    "text": "you know providing applications for end-users rather than their employees to use well end-users of course are not",
    "start": "162490",
    "end": "169360"
  },
  {
    "text": "going to be that kind and captive as employees do and even if it doesn't matter what the size of a company is we",
    "start": "169360",
    "end": "175540"
  },
  {
    "text": "can argue that you're probably going to have a lot more customers than employees so which means it's an explosion in",
    "start": "175540",
    "end": "181480"
  },
  {
    "text": "terms of how many people end up using applications the other thing that's happening is the type of applications",
    "start": "181480",
    "end": "187720"
  },
  {
    "text": "and the interactions these applications are having with the data and with the applications themselves the biggest gig",
    "start": "187720",
    "end": "194980"
  },
  {
    "text": "that I personally know I would say is my son the other day I patted him and several devices fell of him I don't even",
    "start": "194980",
    "end": "200739"
  },
  {
    "text": "know how many he is carrying around well we are talking about people using multiple devices every one of us is",
    "start": "200739",
    "end": "207010"
  },
  {
    "text": "carrying multiple devices you know people are talking about internet enabled devices but forget about you",
    "start": "207010",
    "end": "212860"
  },
  {
    "text": "know watches if you will we are talking about earrings and nose rings and tongue rings all internet enabled and",
    "start": "212860",
    "end": "219519"
  },
  {
    "text": "constantly communicating with applications well that really means that we need a greater demand we have a greater demand",
    "start": "219519",
    "end": "226299"
  },
  {
    "text": "on applications and how these applications interact so how do we go about managing and building these",
    "start": "226299",
    "end": "232930"
  },
  {
    "text": "applications well we can apply some of the learnings from the last few years to a maybe a decade and one of them that so",
    "start": "232930",
    "end": "240670"
  },
  {
    "text": "reactive programming really brings together four different practices into a single mold and the very first thing it",
    "start": "240670",
    "end": "247510"
  },
  {
    "text": "says is we should really consider using elastic services to scale well that's",
    "start": "247510",
    "end": "253780"
  },
  {
    "text": "kind of what we have done over the past several years is we have gone into cloud computing it doesn't really make sense",
    "start": "253780",
    "end": "260019"
  },
  {
    "text": "for majority of the organizations moving forward to manage their own IT",
    "start": "260019",
    "end": "265570"
  },
  {
    "text": "infrastructure in terms of systems if you will it just is unbelievably not only",
    "start": "265570",
    "end": "270610"
  },
  {
    "text": "expensive but really hard to manage these systems well today we have learned that we could easily spin off servers",
    "start": "270610",
    "end": "277600"
  },
  {
    "text": "on the on the cloud very easily without much effort at all and of course these",
    "start": "277600",
    "end": "283630"
  },
  {
    "text": "servers can be brought down very quickly can be more service can be brought up based on the demand the demand could be",
    "start": "283630",
    "end": "289510"
  },
  {
    "text": "you know based on the time the demand could be based on the load actually and so one of the things that reactive",
    "start": "289510",
    "end": "295180"
  },
  {
    "text": "programming says is we should really make use of elastic services as much as we want to to really provide scale well",
    "start": "295180",
    "end": "301900"
  },
  {
    "text": "the second thing it really emphasizes is that we should really focus on message driven systems well I'm going to say",
    "start": "301900",
    "end": "309610"
  },
  {
    "text": "that having a distributed the database or even having a centralized database",
    "start": "309610",
    "end": "315760"
  },
  {
    "text": "and having distributed transactions is so 20th century it really makes no sense",
    "start": "315760",
    "end": "320920"
  },
  {
    "text": "to be moving in that direction we should really think about you know disparate systems communicating with each other",
    "start": "320920",
    "end": "326230"
  },
  {
    "text": "using messages that's another thing that it's heavily emphasizing is more of a message driven systems for communication",
    "start": "326230",
    "end": "332890"
  },
  {
    "text": "well then of course we want responsiveness why is responsiveness so important well",
    "start": "332890",
    "end": "338530"
  },
  {
    "text": "in the day we live in we are really living in a world of instant gratification the days of where you use",
    "start": "338530",
    "end": "346150"
  },
  {
    "text": "an application you know patiently wait for it to respond is gone well people go to applications of the application don't",
    "start": "346150",
    "end": "352120"
  },
  {
    "text": "respond for a few seconds they just simply leave they go on to use other applications responsiveness is probably",
    "start": "352120",
    "end": "358480"
  },
  {
    "text": "one of the most important things for example let's say it's a you know kind of a quiet Sunday morning you decide to",
    "start": "358480",
    "end": "364480"
  },
  {
    "text": "walk into a store and as soon as you walk in you realize that the clerk is busy helping another customer so what do",
    "start": "364480",
    "end": "370720"
  },
  {
    "text": "you do you probably wait for a few minutes we look on the shelves look on the floor look on the ceiling and then you quietly leave why because there was",
    "start": "370720",
    "end": "377830"
  },
  {
    "text": "no response on the other hand let's say you walk into the store and as soon as you do the clerk who is busy takes a",
    "start": "377830",
    "end": "383860"
  },
  {
    "text": "pause looks at you makes an eye contact and says I'll be with you shortly and goes back to work with the client they",
    "start": "383860",
    "end": "389410"
  },
  {
    "text": "have what do you probably did because of that you probably waited for you know several more minutes and why is that",
    "start": "389410",
    "end": "396310"
  },
  {
    "text": "because you felt you are important even though you know you're not so the point really is that when there is",
    "start": "396310",
    "end": "401620"
  },
  {
    "text": "responsiveness you normally hang around when a system is not responsive you pretty much leave well this is what we",
    "start": "401620",
    "end": "408010"
  },
  {
    "text": "have learned for example with infinite scroll depending different remember the day that you got exposed to",
    "start": "408010",
    "end": "413150"
  },
  {
    "text": "infinite scroll this application has been around sluggish and it'll slow slow responded like a snap you're like wow",
    "start": "413150",
    "end": "420500"
  },
  {
    "text": "that was really fast what happened and you scroll down only to realize there's nothing in the bottom and then before",
    "start": "420500",
    "end": "426949"
  },
  {
    "text": "you could immediately realize that something filled up in the bottom well that's pretty nice how responsive this",
    "start": "426949",
    "end": "432110"
  },
  {
    "text": "application is so responsiveness is extremely critical and reactive programming says the goal is not to give",
    "start": "432110",
    "end": "439219"
  },
  {
    "text": "all the results to the customers or the users the goal is to give them enough for them to process while they are doing",
    "start": "439219",
    "end": "445940"
  },
  {
    "text": "it go back and pull more information and be responsive well the fourth aspect",
    "start": "445940",
    "end": "451310"
  },
  {
    "text": "that reactive programming greatly emphasizes is that applications have to be really resilient",
    "start": "451310",
    "end": "457190"
  },
  {
    "text": "now why is resilience so important well if application is not responsive application is really also very poor in",
    "start": "457190",
    "end": "465349"
  },
  {
    "text": "terms of how it fails in an ungraceful manner you're not going to really be hanging around with applications so",
    "start": "465349",
    "end": "471650"
  },
  {
    "text": "resilience of applications is extremely important in other words it says that we should treat failure as first-class",
    "start": "471650",
    "end": "476930"
  },
  {
    "text": "citizen and program for these failures as well in a very graceful manner well",
    "start": "476930",
    "end": "482120"
  },
  {
    "text": "that's pretty much what we acted programming is emphasizing is all these four things but what does it really mean",
    "start": "482120",
    "end": "487759"
  },
  {
    "text": "to develop applications in a reactive model I want you to step back and think about what we've been doing for oh maybe",
    "start": "487759",
    "end": "494449"
  },
  {
    "text": "about twenty years now and we could argue most of what we've been doing so",
    "start": "494449",
    "end": "500089"
  },
  {
    "text": "you know pretty squarely falls into crud applications and at some point you begin",
    "start": "500089",
    "end": "506000"
  },
  {
    "text": "to ask the question does everything simply become crud application after all",
    "start": "506000",
    "end": "511099"
  },
  {
    "text": "and it turns out maybe we're gone a little overboard with it maybe not everything is crud applications where we",
    "start": "511099",
    "end": "518209"
  },
  {
    "text": "create data read data update data what if we can think of applications where maybe we are the middle agents all we",
    "start": "518209",
    "end": "525589"
  },
  {
    "text": "care about is some data that's flowing through and we want to process some data and then send the data along the way",
    "start": "525589",
    "end": "532579"
  },
  {
    "text": "we're not in the business of accessing data from a data base in the traditional way maybe was the intermediary just",
    "start": "532579",
    "end": "539300"
  },
  {
    "text": "interested in processing data as it flows through as it turns out there's a lot of",
    "start": "539300",
    "end": "544880"
  },
  {
    "text": "occasions that fit into that kind of model for example let's say you are interested in processing star beta well",
    "start": "544880",
    "end": "551390"
  },
  {
    "text": "you're not really interested in reading the data from the database maybe there is a flow of tickers and prices and you",
    "start": "551390",
    "end": "558590"
  },
  {
    "text": "want to really make decisions along the way maybe there is a particular ticker you are interested in maybe a price",
    "start": "558590",
    "end": "563780"
  },
  {
    "text": "range you are interested in and maybe you want to take an action if it falls in the range of price you are interested",
    "start": "563780",
    "end": "568970"
  },
  {
    "text": "in otherwise simply let it go through well that could be a way to think about how you are being reactive to data that",
    "start": "568970",
    "end": "575450"
  },
  {
    "text": "comes towards you or flows towards you so I want you to think about a little bit about data flow computing rather",
    "start": "575450",
    "end": "583040"
  },
  {
    "text": "than thinking about crowd operations well the concept of data flow has been around for a very long time this is not",
    "start": "583040",
    "end": "590540"
  },
  {
    "text": "new at all you couldn't possibly have gone through the 80s without hearing about data flow computing for example",
    "start": "590540",
    "end": "596450"
  },
  {
    "text": "well the beauty of data flow computing is when there is available for something",
    "start": "596450",
    "end": "602210"
  },
  {
    "text": "to execute its ready to come execute your computation so through parallelism actually existing data flow computing so",
    "start": "602210",
    "end": "609680"
  },
  {
    "text": "you can actually do quite a bit of computing and data flow that's one of the concurrent computing and data flow",
    "start": "609680",
    "end": "615920"
  },
  {
    "text": "that's one of the exciting things about it there's a lot of other things that fit into this for example what if you",
    "start": "615920",
    "end": "621020"
  },
  {
    "text": "are interested in monitoring tweeds or other messages and you want to respond",
    "start": "621020",
    "end": "626090"
  },
  {
    "text": "to some of the messages if they are relevant to maybe your business or line of work or whatever keywords that you",
    "start": "626090",
    "end": "632030"
  },
  {
    "text": "are looking for or what if I'm interested in processing weather data well I could be in a situation where the",
    "start": "632030",
    "end": "638000"
  },
  {
    "text": "weather changes very drastically and I want to respond to it very quickly there are applications that are being developed where you're responding to",
    "start": "638000",
    "end": "645020"
  },
  {
    "text": "weather changes and you want to be able to respond to it with a very high throughput well this brings up this idea",
    "start": "645020",
    "end": "650750"
  },
  {
    "text": "of streams of data so in other words rather than looking at data as this",
    "start": "650750",
    "end": "656840"
  },
  {
    "text": "piece of information you fetch and then do some work and then update what if data becomes a stream that flows towards",
    "start": "656840",
    "end": "664070"
  },
  {
    "text": "you and you want to be able to process the stream of data and take actions and maybe pass it along as in the stream for",
    "start": "664070",
    "end": "671750"
  },
  {
    "text": "the downstream CIM entities and computations to take note of it and do processing that's basically what we are",
    "start": "671750",
    "end": "678410"
  },
  {
    "text": "looking at in terms of how we going to compute it so this brings up the details about a programming model well at the",
    "start": "678410",
    "end": "685579"
  },
  {
    "text": "very essence of reactive programming is this idea of observable well once again",
    "start": "685579",
    "end": "691250"
  },
  {
    "text": "you may notice that observable is not nothing new at all it's been around for a very long time well then how is",
    "start": "691250",
    "end": "697089"
  },
  {
    "text": "reactive programming observable different from the observable model that we are you know so very familiar and",
    "start": "697089",
    "end": "703490"
  },
  {
    "text": "used to that is probably one while maybe three clear distinctions between the",
    "start": "703490",
    "end": "708829"
  },
  {
    "text": "traditional observable and what the reactive programming observable model provides for us well the very first",
    "start": "708829",
    "end": "714740"
  },
  {
    "text": "thing about the traditional observable is you have an observable which is the source of the data and you have of",
    "start": "714740",
    "end": "720980"
  },
  {
    "text": "course the observables which are the receivers of the data and of course the source could be sending the data the",
    "start": "720980",
    "end": "726680"
  },
  {
    "text": "receivers could be receiving the data well the observable model in reactive programming clearly sets apart two",
    "start": "726680",
    "end": "732980"
  },
  {
    "text": "different channels think about this as a data channel and an error channel the",
    "start": "732980",
    "end": "738139"
  },
  {
    "text": "data channel would of course have the data and the error channel would contains of course the error well this",
    "start": "738139",
    "end": "744470"
  },
  {
    "text": "is one thing we have suffered with for a very long time how do we really separate",
    "start": "744470",
    "end": "749600"
  },
  {
    "text": "and deal with data compared to error or exceptions in the in the in the",
    "start": "749600",
    "end": "755060"
  },
  {
    "text": "programming models well we're back in time what we did is we returned data or",
    "start": "755060",
    "end": "760279"
  },
  {
    "text": "the result when you call the function well if something went wrong how do you tell that something went wrong well we",
    "start": "760279",
    "end": "766519"
  },
  {
    "text": "said we could return a negative result to say that something is wrong and then we quickly realize maybe that's not a",
    "start": "766519",
    "end": "772459"
  },
  {
    "text": "good idea because some data could be negative numbers as well and some data may not be after all numbers it could be",
    "start": "772459",
    "end": "779540"
  },
  {
    "text": "something else gosh how do we deal with it and then we said well here's a brilliant idea we'll return an error as a response to",
    "start": "779540",
    "end": "786709"
  },
  {
    "text": "functions so if there's nothing wrong you will give you a zero and if something is wrong maybe we'll give you",
    "start": "786709",
    "end": "792380"
  },
  {
    "text": "a number to say there's an error and not what about the data itself well we'll pass in an object to the",
    "start": "792380",
    "end": "798110"
  },
  {
    "text": "function which can populate the object with the result and send it back to us very quickly that became really unwieldy",
    "start": "798110",
    "end": "805430"
  },
  {
    "text": "to deal with and then we said well here's a great idea we'll return a result when you call functions but",
    "start": "805430",
    "end": "811480"
  },
  {
    "text": "something went wrong we'll throw an exception at you that was a terrible idea in itself because exceptions",
    "start": "811480",
    "end": "817720"
  },
  {
    "text": "started disrupting the call stack and then of course that became a little bit more expensive hard to really handle",
    "start": "817720",
    "end": "824079"
  },
  {
    "text": "also and then of course it requires a lot more extra programming effort so we've been struggling with errors and",
    "start": "824079",
    "end": "830110"
  },
  {
    "text": "how to deal with for a very long time well the active programming says what if we have a clearly two different channels",
    "start": "830110",
    "end": "836680"
  },
  {
    "text": "of communication one channel is the data coming through and the other channel is",
    "start": "836680",
    "end": "842170"
  },
  {
    "text": "for errors so clearly you know what you're receiving an error or a data that",
    "start": "842170",
    "end": "847630"
  },
  {
    "text": "comes through the second problem is this idea of exception handling is a terrible idea",
    "start": "847630",
    "end": "853089"
  },
  {
    "text": "from the point of view of functional programming for example well it turns our Ft programming is a nice logical",
    "start": "853089",
    "end": "859630"
  },
  {
    "text": "step from functional programming well in functional programming we talked about you know using a function pipeline and",
    "start": "859630",
    "end": "866860"
  },
  {
    "text": "then we talked about lazy evaluation well reactive programming kind of starts right there and says what if we take",
    "start": "866860",
    "end": "872260"
  },
  {
    "text": "this pipeline of data coming towards us and we want to process it well in an",
    "start": "872260",
    "end": "877360"
  },
  {
    "text": "infinitive style of programming you make function calls if something goes wrong you blow up the call stack and you",
    "start": "877360",
    "end": "882880"
  },
  {
    "text": "retract well that doesn't quite make sense in the concept of reactive",
    "start": "882880",
    "end": "887980"
  },
  {
    "text": "functional programming because you don't disturb the call stack that way you're a down stream and you want to keep flowing",
    "start": "887980",
    "end": "893920"
  },
  {
    "text": "down and what do you do when there's an error well you don't go back you continue to deal with the error like",
    "start": "893920",
    "end": "899500"
  },
  {
    "text": "it's a data and that's exactly what reactive programming says let's deal with data and let's deal with errors",
    "start": "899500",
    "end": "905819"
  },
  {
    "text": "like it's data as well and just keep handling pushing it downstream and handle it well that's a very first clear",
    "start": "905819",
    "end": "912819"
  },
  {
    "text": "distinction you got a data channel and you have an error channel well the second distinction is in when you have",
    "start": "912819",
    "end": "919209"
  },
  {
    "text": "data coming through a data channel the minute something goes wrong you would get an error through the error channel",
    "start": "919209",
    "end": "925779"
  },
  {
    "text": "and immediately the data channel would terminate there will be no more data coming through the data channel so in",
    "start": "925779",
    "end": "931690"
  },
  {
    "text": "other words it's kind of like a circuit breaker already built into the observable if everything is going well",
    "start": "931690",
    "end": "938709"
  },
  {
    "text": "you get a stream of data coming through if something were to go wrong an error gets emitted and there",
    "start": "938709",
    "end": "945070"
  },
  {
    "text": "no more data coming through the data channel and lastly you also have a third channel which is called a completed",
    "start": "945070",
    "end": "951850"
  },
  {
    "text": "channel this is a clear way for you to tell your receivers you don't have any",
    "start": "951850",
    "end": "956950"
  },
  {
    "text": "more data and you're not going to send anything more so they can do the clean-up operations and know that they",
    "start": "956950",
    "end": "962080"
  },
  {
    "text": "have reached a end point in the data let's take a look at these examples with rxjs rxjs well so the concept of",
    "start": "962080",
    "end": "971050"
  },
  {
    "text": "reactive programming has been around for a while it was actually introduced by Eric Meyer as part of a solution in a rx",
    "start": "971050",
    "end": "977590"
  },
  {
    "text": "darknet well it's been around in rx darknet for quite a while",
    "start": "977590",
    "end": "982660"
  },
  {
    "text": "in the in the darkness community well you know generally one of the things I've observed is I work on you know",
    "start": "982660",
    "end": "989140"
  },
  {
    "text": "multiple technologies I got my hands and C C sharp and related technologies have got my hands in Java and JavaScript as",
    "start": "989140",
    "end": "995800"
  },
  {
    "text": "well but I kind of look at these different platforms and I noticed one thing very clearly different across this",
    "start": "995800",
    "end": "1002070"
  },
  {
    "text": "the darkness community is kind of special in that they'll quietly sit down",
    "start": "1002070",
    "end": "1007140"
  },
  {
    "text": "and take solutions given and they would get their work done the Java and JavaScript communities are very",
    "start": "1007140",
    "end": "1013920"
  },
  {
    "text": "different the minute you show them a solution they wouldn't sit there and use it they would",
    "start": "1013920",
    "end": "1019350"
  },
  {
    "text": "turn around and develop 20,000 same works around it and celebrate the you know frameworks they develop well that's",
    "start": "1019350",
    "end": "1026010"
  },
  {
    "text": "exactly what happened the quiet rx implementations was around for a while until the Java folks and the",
    "start": "1026010",
    "end": "1033120"
  },
  {
    "text": "JavaScript folks discovered this and they went on to create hundreds of frameworks and libraries around it if",
    "start": "1033120",
    "end": "1039750"
  },
  {
    "text": "you look at Java it's so there are so many solutions available for by providing reactive solutions in Java",
    "start": "1039750",
    "end": "1045300"
  },
  {
    "text": "likewise there are a few in JavaScript as well one of them is rxjs I'm seeing",
    "start": "1045300",
    "end": "1050790"
  },
  {
    "text": "rxjs becoming gaining popularity a lot of other tools and libraries and",
    "start": "1050790",
    "end": "1055800"
  },
  {
    "text": "frameworks are beginning to use rxjs also for example just one example is if",
    "start": "1055800",
    "end": "1062070"
  },
  {
    "text": "you're using for example angular 2 well in angular 2 when you make a request to the server the HTTP module internally",
    "start": "1062070",
    "end": "1069840"
  },
  {
    "text": "uses rxjs to pull the data that is using the Ajax calls that's not a requirement that you",
    "start": "1069840",
    "end": "1076080"
  },
  {
    "text": "have to use it but that's a default implementation get an angular for example so you're going to see this in quite a few places",
    "start": "1076080",
    "end": "1082920"
  },
  {
    "text": "so you will run into reactive solutions in one of two different ways very quickly one is you decide to create a",
    "start": "1082920",
    "end": "1089730"
  },
  {
    "text": "reactive applications all by yourself in which case you're getting dragged into reactive programming quite easily",
    "start": "1089730",
    "end": "1095870"
  },
  {
    "text": "ultimately you may not care about using reactive solutions directly but the libraries and the tools and the",
    "start": "1095870",
    "end": "1102030"
  },
  {
    "text": "frameworks you are using for building your applications internally begin to use reactive solutions and you would get",
    "start": "1102030",
    "end": "1108540"
  },
  {
    "text": "dragged into it fairly quickly as well so let's take a look at an example of how we would create an observable in our",
    "start": "1108540",
    "end": "1115320"
  },
  {
    "text": "X years and how we would use it so what I have here with me is a little page",
    "start": "1115320",
    "end": "1120720"
  },
  {
    "text": "which is called the indexed rjs don't have a whole lot here but I'm referring to the rxjs that's pretty much the first",
    "start": "1120720",
    "end": "1128520"
  },
  {
    "text": "thing you see here is I brought in a reference to our X J's from the CDN that's all I have",
    "start": "1128520",
    "end": "1134100"
  },
  {
    "text": "well of course I had a little page here I'm going to simply say hi and I hit the save and I'm going to simply refresh",
    "start": "1134100",
    "end": "1140940"
  },
  {
    "text": "that here and display it as you would see is that display is going to simply show that hi so I'm going to make some",
    "start": "1140940",
    "end": "1147330"
  },
  {
    "text": "changes to the application see it's response over there I'm going to build a few little examples and play with it",
    "start": "1147330",
    "end": "1152400"
  },
  {
    "text": "well what are we going to do here well I want to clearly see an example of building a little reactiveness here so",
    "start": "1152400",
    "end": "1158970"
  },
  {
    "text": "I'm going to start with a little function call that yeast prime function well simply put YZ Prime simply tells",
    "start": "1158970",
    "end": "1164580"
  },
  {
    "text": "you whether a given number is a prime number or not using the fairly simple solution it just iterates through T",
    "start": "1164580",
    "end": "1170400"
  },
  {
    "text": "number see if it's divisible by any number other than itself and one and then if it is it says that it's a you",
    "start": "1170400",
    "end": "1176970"
  },
  {
    "text": "know if it's not a prime number otherwise it returns a true to say it's prime but I want to really start generating prime numbers as a sequence",
    "start": "1176970",
    "end": "1184230"
  },
  {
    "text": "so what am I going to do to create it well I'm going to say a primes equals and I'm going to go to our X and I'm",
    "start": "1184230",
    "end": "1191520"
  },
  {
    "text": "going to create an observable but I'm going to call a create function right there to create the observable well it",
    "start": "1191520",
    "end": "1198480"
  },
  {
    "text": "follows the model in a off rather than using a constructor to use a static",
    "start": "1198480",
    "end": "1203970"
  },
  {
    "text": "method to really create the object so in this case the create function is going to really create an observable inverter",
    "start": "1203970",
    "end": "1210390"
  },
  {
    "text": "and give us the you know handle to this particular object well of course I want to use this observable in just a",
    "start": "1210390",
    "end": "1216750"
  },
  {
    "text": "few minutes but what am I going to do here with them this observable well I'm going to receive a subscriber as a",
    "start": "1216750",
    "end": "1223200"
  },
  {
    "text": "parameter to this particular observable so in other words these create method",
    "start": "1223200",
    "end": "1228480"
  },
  {
    "text": "receives a callback and this callback says when you call me well you're going",
    "start": "1228480",
    "end": "1234299"
  },
  {
    "text": "to provide me a subscriber and I'm going to start emitting data to the subscriber that's the key word to think about",
    "start": "1234299",
    "end": "1241049"
  },
  {
    "text": "either Emmett so you're going to emit data as and when you are really interested in emitting data you're going",
    "start": "1241049",
    "end": "1246870"
  },
  {
    "text": "to emit data so what am I going to do here to make that work well first of all I need a function right here to work",
    "start": "1246870",
    "end": "1253020"
  },
  {
    "text": "with so I'm going to create that little function to to work with so what I'm going to do in this function is I'm",
    "start": "1253020",
    "end": "1258780"
  },
  {
    "text": "going to say count is equal to zero or let's go ahead and say index is equal to zero",
    "start": "1258780",
    "end": "1264179"
  },
  {
    "text": "and and let's start with the one actually and then I'm going to say over here while index is less than let's say",
    "start": "1264179",
    "end": "1270809"
  },
  {
    "text": "about 10,000 well what am I going to do here well in this case what I'll do is",
    "start": "1270809",
    "end": "1276390"
  },
  {
    "text": "I'll first of all say if index is a prime so is prime of index well if it's",
    "start": "1276390",
    "end": "1282570"
  },
  {
    "text": "a if it's a prime number then I will emit the data so I'll go to subscriber",
    "start": "1282570",
    "end": "1287820"
  },
  {
    "text": "and say next and then I will say send the index over and then of course I will",
    "start": "1287820",
    "end": "1294059"
  },
  {
    "text": "go ahead and increment the index right after that and then I'll continue the loop after that well so what are we",
    "start": "1294059",
    "end": "1300360"
  },
  {
    "text": "doing here well notice the call to the next method so the next actually is a",
    "start": "1300360",
    "end": "1305429"
  },
  {
    "text": "way for you to push data through the data stream that I talked about so this",
    "start": "1305429",
    "end": "1311370"
  },
  {
    "text": "is where you get the subscriber and as an observable you can start emitting data by calling this next method and",
    "start": "1311370",
    "end": "1318780"
  },
  {
    "text": "that opens of the data channel and you send the data through this data channel how do we receive this data on the other",
    "start": "1318780",
    "end": "1325620"
  },
  {
    "text": "side the receiving side well here's an example of that so I'm going to define a function call subscribe and this",
    "start": "1325620",
    "end": "1333660"
  },
  {
    "text": "function subscribe or what this is going to do is simply say go to the primes and",
    "start": "1333660",
    "end": "1339210"
  },
  {
    "text": "I'm going to say subscribe to that particular primes observable and an send",
    "start": "1339210",
    "end": "1345390"
  },
  {
    "text": "a subscribe well the minute I subscribe he is going to send me data through the data Channel",
    "start": "1345390",
    "end": "1351390"
  },
  {
    "text": "well how do I get the data to the data Channel well that's my very first argument that",
    "start": "1351390",
    "end": "1357030"
  },
  {
    "text": "I provide to the SUBSCRIBE function is yet another function so I'm going to say prime over here and as soon as I receive",
    "start": "1357030",
    "end": "1364890"
  },
  {
    "text": "a prime all I'm going to do is simply display the prime here on the console so",
    "start": "1364890",
    "end": "1370380"
  },
  {
    "text": "we can actually see the prime that we are receiving from this function repeatedly so let's just go ahead and",
    "start": "1370380",
    "end": "1376350"
  },
  {
    "text": "try this out here on the console so I'm going to call the SUBSCRIBE method as you can see right here and and have it",
    "start": "1376350",
    "end": "1383190"
  },
  {
    "text": "really execute things for us well it's helpful to save this function obviously go ahead please this one here line 15",
    "start": "1383190",
    "end": "1392940"
  },
  {
    "text": "okay so this is going to be indexing thank you for the catch absolutely so so so we are incrementing that and we are",
    "start": "1392940",
    "end": "1400410"
  },
  {
    "text": "so I make mistakes some integer and some not but that helped me to know if anybody is still awake here so that's",
    "start": "1400410",
    "end": "1406110"
  },
  {
    "text": "good so that's a good feedback so right there is the index plus plus and of course that's going to keep incrementing",
    "start": "1406110",
    "end": "1411480"
  },
  {
    "text": "and sending it if it's a index it's going to omit it otherwise just increment the index and keep going all",
    "start": "1411480",
    "end": "1416640"
  },
  {
    "text": "right let's go ahead and try this out so what am I going to do call the SUBSCRIBE method and of course I'm going to say",
    "start": "1416640",
    "end": "1422160"
  },
  {
    "text": "subscribe oh it's not defined it says of course it helps to save this function so I'm going to go ahead and save that and",
    "start": "1422160",
    "end": "1427650"
  },
  {
    "text": "of course call the SUBSCRIBE function it still says it's not defined so let's subscribe so let make sure that I",
    "start": "1427650",
    "end": "1433440"
  },
  {
    "text": "defined it properly that's a SUBSCRIBE method and of course it would be helpful to you know invoke this function as well",
    "start": "1433440",
    "end": "1439380"
  },
  {
    "text": "so let's go ahead and bring it so scrap and I'm going to say source is equal to the function J s that I want to bring in",
    "start": "1439380",
    "end": "1446730"
  },
  {
    "text": "so let's go ahead and make sure that's tied in to this particular function all right so now I'm going to go ahead and",
    "start": "1446730",
    "end": "1452220"
  },
  {
    "text": "call this particular function and have it really evaluate it and and then of course we'll see what it does well",
    "start": "1452220",
    "end": "1457860"
  },
  {
    "text": "there's a little bit of a syntax error that I need to work with so let's see what the problem here is so it's",
    "start": "1457860",
    "end": "1463500"
  },
  {
    "text": "complaining that get is well it's having a function with the function J s so it's",
    "start": "1463500",
    "end": "1468600"
  },
  {
    "text": "complaining couldn't find the function J s let's see why that's complaining it functions oh did I call it functions you",
    "start": "1468600",
    "end": "1474990"
  },
  {
    "text": "are right good good eyes there we go awesome so now that I've got that squared out let's go ahead and call",
    "start": "1474990",
    "end": "1480250"
  },
  {
    "text": "all the SUBSCRIBE method and right there you can see that it emitted a little silly little example but nevertheless",
    "start": "1480250",
    "end": "1486220"
  },
  {
    "text": "shows us the point how this actually works together so what did we just do in this case we called upon this to give us",
    "start": "1486220",
    "end": "1493660"
  },
  {
    "text": "all the prime values as being implemented correctly but don't worry about it the factor is that it's",
    "start": "1493660",
    "end": "1498820"
  },
  {
    "text": "actually pulling in the data and displaying the values so when I call the Prime I went to the observable and I",
    "start": "1498820",
    "end": "1506920"
  },
  {
    "text": "said hey observable start emitting data I want to subscribe to you and start emitting data when you get a data send",
    "start": "1506920",
    "end": "1514180"
  },
  {
    "text": "it to me and I'll decide what to do about it well the observable itself said hey subscriber thanks for subscribing I'm",
    "start": "1514180",
    "end": "1521320"
  },
  {
    "text": "going to start emitting prime numbers towards view and it's sending it of course this could be across systems if",
    "start": "1521320",
    "end": "1527110"
  },
  {
    "text": "you have two and and you can communicate through this particular observable as and when where it may make sense so that",
    "start": "1527110",
    "end": "1534010"
  },
  {
    "text": "gives you an idea about how to really subscribe and start receiving data but",
    "start": "1534010",
    "end": "1539230"
  },
  {
    "text": "but I mentioned that there are a couple of different channels to work with well one of them is the so called completed",
    "start": "1539230",
    "end": "1545260"
  },
  {
    "text": "channel so let's take a look at what completed really means well notice in this case when I'm done with their data",
    "start": "1545260",
    "end": "1551740"
  },
  {
    "text": "I want to tell the receiver I don't have any more data coming towards you so you",
    "start": "1551740",
    "end": "1556780"
  },
  {
    "text": "can say subscriber dot complete and you can send a clear signal saying that I'm",
    "start": "1556780",
    "end": "1562660"
  },
  {
    "text": "done I'm not going to give you any more data well just to prove the point here because I emitted a complete signal the",
    "start": "1562660",
    "end": "1570790"
  },
  {
    "text": "way the observable is built already is though the data being emitted to the data channel but the minute something",
    "start": "1570790",
    "end": "1577810"
  },
  {
    "text": "comes out of your error channel or the completed channel the data channel will",
    "start": "1577810",
    "end": "1583120"
  },
  {
    "text": "close up and there will be no more data coming through the data channel not that you want to keep emitting data after the",
    "start": "1583120",
    "end": "1589270"
  },
  {
    "text": "fact but just to prove the fact if I say subscribe and I'm going to send a minus one here just to prove the point now",
    "start": "1589270",
    "end": "1596530"
  },
  {
    "text": "clearly in this case I'll comment out the complete and you can see that I don't have the complete right now but if",
    "start": "1596530",
    "end": "1603370"
  },
  {
    "text": "I call the SUBSCRIBE in the very end of this you will notice that it is going to come in and display that particular data",
    "start": "1603370",
    "end": "1610960"
  },
  {
    "text": "well did I go to a loop actually in this case sorry this should be not subscribe but subscribe doc next isn't it there we go",
    "start": "1610960",
    "end": "1617230"
  },
  {
    "text": "I'm slipping at the wheel here so subscriber dot NYX not subscribed are next there we go so I'm going to send that a next command",
    "start": "1617230",
    "end": "1624550"
  },
  {
    "text": "here to say that I don't have any more data to send you basically this is going",
    "start": "1624550",
    "end": "1630010"
  },
  {
    "text": "to be the completed request to say that I am done with this let's actually restart this to bring this back end so",
    "start": "1630010",
    "end": "1636910"
  },
  {
    "text": "pardon me here that's kind of stuck in there so let's go ahead and kill that now let's actually forcefully kill it",
    "start": "1636910",
    "end": "1643330"
  },
  {
    "text": "there we go so in this case of course I'm going to let's restart it there we",
    "start": "1643330",
    "end": "1649330"
  },
  {
    "text": "go so um alright so I want to restart this little thing and ask it to run through",
    "start": "1649330",
    "end": "1655240"
  },
  {
    "text": "the SUBSCRIBE let's just fire this up again so what am I going to do here well clearly in this case I want to call the",
    "start": "1655240",
    "end": "1661750"
  },
  {
    "text": "SUBSCRIBE method so there we go and what does the scribe do well in the very end of animating all this data we're sending",
    "start": "1661750",
    "end": "1669040"
  },
  {
    "text": "the subscriber next to minus one to signal that I have a little you know next to pass the data on the subscriber",
    "start": "1669040",
    "end": "1675430"
  },
  {
    "text": "so so in this case let me get this correct there we go so what I can do",
    "start": "1675430",
    "end": "1681970"
  },
  {
    "text": "though is I can send a completed so let's go ahead and say subscriber dart",
    "start": "1681970",
    "end": "1687160"
  },
  {
    "text": "complete what does that do well it's going to send a completed signal and as",
    "start": "1687160",
    "end": "1692350"
  },
  {
    "text": "a result we're not going to get the last minus one being sent because the data channel has been closed like I said but",
    "start": "1692350",
    "end": "1698800"
  },
  {
    "text": "of course on your site what you could do is it can also receive that to handle that so let me just put an error right",
    "start": "1698800",
    "end": "1705490"
  },
  {
    "text": "here we'll come back to the error in just a few minutes but I'm going to say in here well how about simply saying",
    "start": "1705490",
    "end": "1711360"
  },
  {
    "text": "done over here to signal that I don't have any more data coming through so if",
    "start": "1711360",
    "end": "1717700"
  },
  {
    "text": "I were to go back and call the SUBSCRIBE now you can see done being displayed right here well that's because when the",
    "start": "1717700",
    "end": "1724990"
  },
  {
    "text": "observable emits a complete signal you get that signal through your complete",
    "start": "1724990",
    "end": "1731260"
  },
  {
    "text": "channel and the data channel shuts up at that point well so we are seeing the",
    "start": "1731260",
    "end": "1736360"
  },
  {
    "text": "three channels here right in front of us on the receiving end the first line 25",
    "start": "1736360",
    "end": "1741700"
  },
  {
    "text": "is the data channel the second line 26 is the error channel and the last line",
    "start": "1741700",
    "end": "1746970"
  },
  {
    "text": "course is the complete channel and like I mentioned the data channel will only receive data as long as nothing has come",
    "start": "1746970",
    "end": "1753960"
  },
  {
    "text": "out of the error channel or the complete channel that's really big then into observable that also shows you how",
    "start": "1753960",
    "end": "1760770"
  },
  {
    "text": "observable in in reactive programming is different from the traditional observable that we are used to well but",
    "start": "1760770",
    "end": "1766620"
  },
  {
    "text": "on the other hand there's also times when as a receiver you want to",
    "start": "1766620",
    "end": "1772560"
  },
  {
    "text": "communicate that you don't care about some data anymore for example let's say",
    "start": "1772560",
    "end": "1778020"
  },
  {
    "text": "you go to a particular resource and you are asking you to emit data let's say a",
    "start": "1778020",
    "end": "1783090"
  },
  {
    "text": "stock price you are interested let's say and buying Google stock but you want the price to be over 700 before you buy it",
    "start": "1783090",
    "end": "1790170"
  },
  {
    "text": "so you put a little request to say keep telling me what the price of Google stock is well then you suddenly see the",
    "start": "1790170",
    "end": "1797070"
  },
  {
    "text": "price just hit a little bit about 700 and you really really want to buy this right now well now you're saying wait",
    "start": "1797070",
    "end": "1804510"
  },
  {
    "text": "I'm going to go do the trading but I don't want the silly service to be sending the data anymore I am done with",
    "start": "1804510",
    "end": "1811560"
  },
  {
    "text": "it I'm going to switch over to doing some other work so in other words you want to unsubscribe from as a subscriber",
    "start": "1811560",
    "end": "1818010"
  },
  {
    "text": "you want to say don't keep anything any more data I don't need this anymore so there's got to be a way to communicate",
    "start": "1818010",
    "end": "1823920"
  },
  {
    "text": "you are intent and why is that because that can result in better use of resources both on your side and on the",
    "start": "1823920",
    "end": "1832140"
  },
  {
    "text": "server service side as well so it gives you this two-way communication to go back and forth so what am I going to do",
    "start": "1832140",
    "end": "1838380"
  },
  {
    "text": "here what I'll do here in this case is I'm going to rewrite this little example to provide that behavior so first thing",
    "start": "1838380",
    "end": "1845760"
  },
  {
    "text": "I'll do here is I'll create a subscriber right here on the site and the",
    "start": "1845760",
    "end": "1851640"
  },
  {
    "text": "subscriber I'm going to say this subscriber is going to be saying I'm a",
    "start": "1851640",
    "end": "1857400"
  },
  {
    "text": "little function well if you're programming in C sharp are your programming in Java",
    "start": "1857400",
    "end": "1862430"
  },
  {
    "text": "typically you implement interfaces well JavaScript doesn't have the concept",
    "start": "1862430",
    "end": "1867960"
  },
  {
    "text": "of interfaces JavaScript is dynamically typed it's extremely flexible so you",
    "start": "1867960",
    "end": "1873030"
  },
  {
    "text": "pretty much can create a JSON object which has a certain you know objects and",
    "start": "1873030",
    "end": "1878310"
  },
  {
    "text": "properties in it and you are good to go with it so in this case I create a JSON object with a function called the next",
    "start": "1878310",
    "end": "1885390"
  },
  {
    "text": "in it and this function says I'm going to receive a prime and all I'm going to",
    "start": "1885390",
    "end": "1890940"
  },
  {
    "text": "do is simply print the prime but in addition to doing so what I'm going to do here is I'm going to say well yes the",
    "start": "1890940",
    "end": "1899970"
  },
  {
    "text": "prime number that I received is greater than 5,000 I'm gonna say subscriber dart",
    "start": "1899970",
    "end": "1907340"
  },
  {
    "text": "unsubscribe and I can then say I don't want this data anymore and I can switch",
    "start": "1907340",
    "end": "1913799"
  },
  {
    "text": "off getting the data from this point onwards well clearly in this case let's",
    "start": "1913799",
    "end": "1918990"
  },
  {
    "text": "comment that out again for a few minutes we'll come back to that so now that I've created a subscriber I can say prime dot",
    "start": "1918990",
    "end": "1925530"
  },
  {
    "text": "subscribe and I'm going to send the subscriber to that as a parameter an",
    "start": "1925530",
    "end": "1931770"
  },
  {
    "text": "argument and say here's a subscriber want to use so rather than providing the function in place I just gave it a JSON",
    "start": "1931770",
    "end": "1938429"
  },
  {
    "text": "object which has the next method clearly you could also provide a JSON object with the next complete and ever for the",
    "start": "1938429",
    "end": "1945510"
  },
  {
    "text": "three channels we talked about well let's go ahead and try this out call the SUBSCRIBE and in this case of course I'm",
    "start": "1945510",
    "end": "1951600"
  },
  {
    "text": "going to call the SUBSCRIBE method let's make sure that I call this correctly so the SUBSCRIBE method is going to",
    "start": "1951600",
    "end": "1957179"
  },
  {
    "text": "subscribe with a prime and say I'm going to subscribe with it and pass a subscriber to it well but what in the",
    "start": "1957179",
    "end": "1963809"
  },
  {
    "text": "world is this prime prime is not a function it's complaining does anybody see the error that I did here its Prime's not prime",
    "start": "1963809",
    "end": "1969840"
  },
  {
    "text": "there we go that's why so let's go ahead and call this again so in this case of course I'm going to call the SUBSCRIBE",
    "start": "1969840",
    "end": "1974909"
  },
  {
    "text": "method and it went through and gave you all the numbers until it reached 10,000 but notice in this case the minute I",
    "start": "1974909",
    "end": "1982320"
  },
  {
    "text": "reached 5,000 I want to tell it I don't want the data anymore and I want to",
    "start": "1982320",
    "end": "1987960"
  },
  {
    "text": "unsubscribe from it so I can certainly do that as well and say don't send me",
    "start": "1987960",
    "end": "1993090"
  },
  {
    "text": "data once it reaches 5,000 I want to unsubscribe from it well in this case of course you can see",
    "start": "1993090",
    "end": "1998610"
  },
  {
    "text": "it went to 5,000 three and it's no longer going to send me data anymore because we did unsubscribe that gives a",
    "start": "1998610",
    "end": "2005270"
  },
  {
    "text": "way for your subscribers to dictate what's being sent versus what's not",
    "start": "2005270",
    "end": "2011059"
  },
  {
    "text": "being sent well brings up the next question you got observables and you got the observer and",
    "start": "2011059",
    "end": "2017909"
  },
  {
    "text": "the observer is going to keep emitting data the observables can see the data but what about having multiple observers",
    "start": "2017909",
    "end": "2025730"
  },
  {
    "text": "well sure you can have multiple observers to the same data source well if you have multiple observers to the",
    "start": "2025730",
    "end": "2032070"
  },
  {
    "text": "same data source what's the behavior of the observable versus the multiple",
    "start": "2032070",
    "end": "2037470"
  },
  {
    "text": "subscribers are observables how does that really work well let's think of a",
    "start": "2037470",
    "end": "2042720"
  },
  {
    "text": "couple of different examples you have a data source that's emitting data and you have subscribers subscribing to it but",
    "start": "2042720",
    "end": "2049530"
  },
  {
    "text": "what are these subscribers actually see well if you are watching a public event for example well the public event is",
    "start": "2049530",
    "end": "2056790"
  },
  {
    "text": "going to be what you are seeing and if somebody comes along they're going to see at the particular time the event",
    "start": "2056790",
    "end": "2064050"
  },
  {
    "text": "that is actually happening so for example if somebody opens the door and walks into this room they're going to",
    "start": "2064050",
    "end": "2069929"
  },
  {
    "text": "see the talk in the middle of what it's happening I'm not going to stop what I'm talking about because one person walked",
    "start": "2069929",
    "end": "2075750"
  },
  {
    "text": "in and say folks sorry I got to start over from the beginning that's not going to happen well in other words in this",
    "start": "2075750",
    "end": "2082108"
  },
  {
    "text": "case of course you are watching what everybody else is watching and all the subscribers are watching the same exact",
    "start": "2082109",
    "end": "2090060"
  },
  {
    "text": "role of events that is happening that is called an hot observable on the other",
    "start": "2090060",
    "end": "2095940"
  },
  {
    "text": "hand if you're watching the recording of this talk and if somebody you know calls",
    "start": "2095940",
    "end": "2101400"
  },
  {
    "text": "you and says what are you doing well I'm seeing this talk on YouTube well if they go to YouTube",
    "start": "2101400",
    "end": "2107339"
  },
  {
    "text": "chances are they going to start from the beginning of the talk and watch you could be in the 15th minute of the talk",
    "start": "2107339",
    "end": "2113160"
  },
  {
    "text": "but they would be starting at the first minute and of course by the time you are done they would be still in the middle",
    "start": "2113160",
    "end": "2119790"
  },
  {
    "text": "of the talk they are watching unless they quit in the middle well that's called a cold observable so a cold",
    "start": "2119790",
    "end": "2125640"
  },
  {
    "text": "observable is going to be having multiple different sessions for its",
    "start": "2125640",
    "end": "2130859"
  },
  {
    "text": "subscribers hot observable manages those sessions together let's take a look at",
    "start": "2130859",
    "end": "2136589"
  },
  {
    "text": "an example to see how this actually works in here well for that purpose what I'm going to do here is I'm going to",
    "start": "2136589",
    "end": "2144030"
  },
  {
    "text": "create a slightly different index file work with so let's take a look at this a",
    "start": "2144030",
    "end": "2149590"
  },
  {
    "text": "little change I made in this index file so what I've done in this index file right now is I've created a two-button",
    "start": "2149590",
    "end": "2157330"
  },
  {
    "text": "subscriber one and a subscriber to and of course I only have one method called",
    "start": "2157330",
    "end": "2162940"
  },
  {
    "text": "subscribe that I'm going to call but the SUBSCRIBE method is registering two different you know elements on the",
    "start": "2162940",
    "end": "2172810"
  },
  {
    "text": "HTML page what I'm going to display the stuff let's just get this rolling and then we'll come back and talk more about",
    "start": "2172810",
    "end": "2178840"
  },
  {
    "text": "it so I need a function called the SUBSCRIBE so let's keep everything up",
    "start": "2178840",
    "end": "2184570"
  },
  {
    "text": "here until now but I'm going to create a subscribe function well this function takes a display as you would see but",
    "start": "2184570",
    "end": "2191890"
  },
  {
    "text": "what is this display going to do well I'm going to say Brian start subscribe which I don't have yet but we'll come",
    "start": "2191890",
    "end": "2198580"
  },
  {
    "text": "back to it and if you give me a prime I'm going to simply say display dark inner HTML equals and I'm going to",
    "start": "2198580",
    "end": "2206650"
  },
  {
    "text": "simply display the prime onto it so if you give me a prime number I'm going to display it on that particular display",
    "start": "2206650",
    "end": "2213310"
  },
  {
    "text": "and and show it that's all I'm going to do but that begs the question what is primes well Prime's is equal to our X dot our",
    "start": "2213310",
    "end": "2221490"
  },
  {
    "text": "observable alike with it before but dot create well in this case of course I'm",
    "start": "2221490",
    "end": "2228340"
  },
  {
    "text": "going to take a subscriber and what I'll do here is I'll say let next prime is",
    "start": "2228340",
    "end": "2235870"
  },
  {
    "text": "equal to a function and I will also start in this case with a index value in",
    "start": "2235870",
    "end": "2242920"
  },
  {
    "text": "the beginning so let's say let index is equal to 1 but then what I'll do here is",
    "start": "2242920",
    "end": "2248740"
  },
  {
    "text": "call the next prime right off the back what are they going to do within the next prime function I'm going to say if",
    "start": "2248740",
    "end": "2256600"
  },
  {
    "text": "is prime of index well if it were a prime number then I would say well",
    "start": "2256600",
    "end": "2263130"
  },
  {
    "text": "subscriber dot next I'm going to omit that particular index value just like we",
    "start": "2263130",
    "end": "2269170"
  },
  {
    "text": "did before but then what I'm going to do is I'm going to take a little break and then repeat this so index plus plus and",
    "start": "2269170",
    "end": "2276490"
  },
  {
    "text": "then I'll say set time out and in this case I'll call the next draw time but after a slight delay of 100",
    "start": "2276490",
    "end": "2283120"
  },
  {
    "text": "milliseconds so in other words what I'm doing here is when you come in I'm going",
    "start": "2283120",
    "end": "2289240"
  },
  {
    "text": "to first of all a call this next prime function the next prime function checks",
    "start": "2289240",
    "end": "2295060"
  },
  {
    "text": "it for given index is prime it's so it emits it and then it increases the index",
    "start": "2295060",
    "end": "2300970"
  },
  {
    "text": "and this time I remember to put it outside the F and then of course in this case it takes a break and and repeat",
    "start": "2300970",
    "end": "2306940"
  },
  {
    "text": "after a little time up well that's a good start let's see how this is going to work so I go back here to the",
    "start": "2306940",
    "end": "2312700"
  },
  {
    "text": "SUBSCRIBE and call this method to subscribe and of course you can see that it's it's counting the primes and",
    "start": "2312700",
    "end": "2320020"
  },
  {
    "text": "displaying it along the way but the question is what's going to happen if I",
    "start": "2320020",
    "end": "2325570"
  },
  {
    "text": "click on the subscribe on the second one right now well before we click on it let's quickly take a look at what the",
    "start": "2325570",
    "end": "2331840"
  },
  {
    "text": "code is actually doing when you call subscribe the right one it's going to call with the display two as the element",
    "start": "2331840",
    "end": "2340240"
  },
  {
    "text": "to display into and what is this guy going to do well this says I'm going to call subscribe on the observable well",
    "start": "2340240",
    "end": "2348160"
  },
  {
    "text": "clearly that's only one observable in this code because primes is the object",
    "start": "2348160",
    "end": "2353500"
  },
  {
    "text": "we clearly on line number nine so that's one single observable but we already",
    "start": "2353500",
    "end": "2358570"
  },
  {
    "text": "have a subscriber now we have a new subscriber coming in after all these",
    "start": "2358570",
    "end": "2364030"
  },
  {
    "text": "time units in this case so what's going to happen well I click on the subscribe and you",
    "start": "2364030",
    "end": "2369610"
  },
  {
    "text": "can see that it started from the beginning well why so the reason is",
    "start": "2369610",
    "end": "2374980"
  },
  {
    "text": "there is a session being maintained by this particular observable and the",
    "start": "2374980",
    "end": "2381250"
  },
  {
    "text": "session is right here in this function after all remember this is a callback function so when you go to the exact",
    "start": "2381250",
    "end": "2388240"
  },
  {
    "text": "same observable and say hey can I subscribe please it says you're welcome",
    "start": "2388240",
    "end": "2393280"
  },
  {
    "text": "on board and starts a new session for you right here and as a result of course",
    "start": "2393280",
    "end": "2399100"
  },
  {
    "text": "the index start with 1 for your session so there are two sessions being managed",
    "start": "2399100",
    "end": "2404230"
  },
  {
    "text": "in this code and that's why you see them in different times so let's refresh and try it again so you can see that I'm",
    "start": "2404230",
    "end": "2410980"
  },
  {
    "text": "already down to 13 and 23 but Condors you can see the lag of the",
    "start": "2410980",
    "end": "2416020"
  },
  {
    "text": "second one this is a cold observable it's a cold observable because it",
    "start": "2416020",
    "end": "2421300"
  },
  {
    "text": "maintains multiple sessions for each one of its subscribers there is no concept",
    "start": "2421300",
    "end": "2427540"
  },
  {
    "text": "of anything being shared between these two but there are times when you don't want that there are times when you want",
    "start": "2427540",
    "end": "2433560"
  },
  {
    "text": "multiple observables to really share the same session maybe you're in pursuit of",
    "start": "2433560",
    "end": "2439450"
  },
  {
    "text": "the same data for example if you are observing the streets and maybe there's",
    "start": "2439450",
    "end": "2444700"
  },
  {
    "text": "a car that's driving through the Tollbooth and you trigger a little event maybe this person did not pay for it and",
    "start": "2444700",
    "end": "2451930"
  },
  {
    "text": "trying to escape through and you want to start monitoring this car well clearly you are interested in the same data at",
    "start": "2451930",
    "end": "2459490"
  },
  {
    "text": "the same time you don't want a different set of data at that point so how do you deal with but before we talk about how",
    "start": "2459490",
    "end": "2465970"
  },
  {
    "text": "to deal with it I want to talk about one thing that's pretty darn cool and that is you have an observable on this end",
    "start": "2465970",
    "end": "2472900"
  },
  {
    "text": "you got a subscriber here but the beauty is you can have an intermediate",
    "start": "2472900",
    "end": "2478620"
  },
  {
    "text": "subscriber who can be subscribing to an observable but that subscriber can also",
    "start": "2478620",
    "end": "2484870"
  },
  {
    "text": "become unobservable to watch in downstream this is called a subject so",
    "start": "2484870",
    "end": "2491380"
  },
  {
    "text": "what is a subject well for example let's say the gentleman on the second row let's say is an observable so he is",
    "start": "2491380",
    "end": "2497830"
  },
  {
    "text": "emitting data and I might be interested in the data I can subscribe to him",
    "start": "2497830",
    "end": "2502840"
  },
  {
    "text": "directly or maybe I'm just having a little hard time hearing and he here on",
    "start": "2502840",
    "end": "2508420"
  },
  {
    "text": "the first row could become the subject right in the middle he could be hearing what are you saying and then he could",
    "start": "2508420",
    "end": "2514870"
  },
  {
    "text": "amplify that and say it to me or it could be a translator for example the",
    "start": "2514870",
    "end": "2520330"
  },
  {
    "text": "other person could be speaking at language that I'm not familiar with but a person here could be translating and",
    "start": "2520330",
    "end": "2525610"
  },
  {
    "text": "giving me the information so what is the person in the middle become he becomes a subject a subject as then here is Ana",
    "start": "2525610",
    "end": "2533590"
  },
  {
    "text": "subscriber to the original observable but becomes an observable to me the",
    "start": "2533590",
    "end": "2539830"
  },
  {
    "text": "subscriber but here comes the charm how does this actually work well remember one of the things we",
    "start": "2539830",
    "end": "2546250"
  },
  {
    "text": "talked about when you have observable and observable can send me a completed signal at times but there is",
    "start": "2546250",
    "end": "2553269"
  },
  {
    "text": "something else that's going on to me as a subscriber can unsubscribe from",
    "start": "2553269",
    "end": "2558839"
  },
  {
    "text": "observable well guess what the subject is going to do now if here's the subject",
    "start": "2558839",
    "end": "2564670"
  },
  {
    "text": "he is going to subscribe to the observable but he's going to image the data to me at some point if he decides",
    "start": "2564670",
    "end": "2572410"
  },
  {
    "text": "not to emit data anymore what is he going to do he is going to send an unsubscribe to the observable",
    "start": "2572410",
    "end": "2579910"
  },
  {
    "text": "that is upstream and sent me a completed signal to tell me I won't get any more",
    "start": "2579910",
    "end": "2586390"
  },
  {
    "text": "data and to tell the original source not to send any more data so subjects have",
    "start": "2586390",
    "end": "2591970"
  },
  {
    "text": "some additional responsibilities subjects not only can transform data that flows through them subjects can",
    "start": "2591970",
    "end": "2598930"
  },
  {
    "text": "also wire up this behavior of saying completed downstream and saying",
    "start": "2598930",
    "end": "2604299"
  },
  {
    "text": "unsubscribe upstream as well and they can manage this interaction very nicely well so the point I'm making is I don't",
    "start": "2604299",
    "end": "2612789"
  },
  {
    "text": "have to make any change to this particular code to get an our heart",
    "start": "2612789",
    "end": "2618430"
  },
  {
    "text": "observable out of it so what I can do instead is I can go to the very end of",
    "start": "2618430",
    "end": "2624489"
  },
  {
    "text": "it and I can create a subject and the subject I'm going to create by calling",
    "start": "2624489",
    "end": "2630009"
  },
  {
    "text": "sher right here so all I'm going to do is I'm going to just ask you to create",
    "start": "2630009",
    "end": "2636609"
  },
  {
    "text": "an intermediary which will subscribe to the original observable up in the the",
    "start": "2636609",
    "end": "2642999"
  },
  {
    "text": "call stack and then tell downstream that I'm going to really give you a shared",
    "start": "2642999",
    "end": "2648099"
  },
  {
    "text": "session that you can deal with very nicely so what does this really provide for us well in this case of course all",
    "start": "2648099",
    "end": "2655630"
  },
  {
    "text": "I've done is I call the share and if I click on it you can see the count right now well past 20 but I click on the",
    "start": "2655630",
    "end": "2663489"
  },
  {
    "text": "subscribe another time and you can see that they both are in sync with each other I didn't have to modify the",
    "start": "2663489",
    "end": "2670180"
  },
  {
    "text": "original code all I did was I put an intermediary to say I want this to be a",
    "start": "2670180",
    "end": "2675999"
  },
  {
    "text": "shared session so the original observable still is exactly what it",
    "start": "2675999",
    "end": "2681470"
  },
  {
    "text": "was but right now it has only one subscriber which is the one that we call",
    "start": "2681470",
    "end": "2687830"
  },
  {
    "text": "that share the share itself in turn became an observable and and entertains",
    "start": "2687830",
    "end": "2693290"
  },
  {
    "text": "to subscribers but those two subscribers are given a shared session that is",
    "start": "2693290",
    "end": "2698720"
  },
  {
    "text": "managed by this in familiarity that's one very powerful concept and reactive programming is that you have this chain",
    "start": "2698720",
    "end": "2705260"
  },
  {
    "text": "of responsibilities and you can't have intermediaries that are very powerful to carry on this behavior very nicely so we",
    "start": "2705260",
    "end": "2713480"
  },
  {
    "text": "saw the heart versus the cold observable and we can use it but I did allude to errors quite a bit how is this going to",
    "start": "2713480",
    "end": "2720950"
  },
  {
    "text": "work with errors and how do we deal with errors typically well to understand that",
    "start": "2720950",
    "end": "2726050"
  },
  {
    "text": "let's take yet another example here and we will work with it so let's get rid of",
    "start": "2726050",
    "end": "2731330"
  },
  {
    "text": "this function for a minute let's get back here to yet another example but this time I have a little text box in",
    "start": "2731330",
    "end": "2738440"
  },
  {
    "text": "here and you can see that text box is sitting there below that I have a subscribe but I'm going to really start",
    "start": "2738440",
    "end": "2744500"
  },
  {
    "text": "doing some work with this particular text box but to take this to the next level let's understand what we're going",
    "start": "2744500",
    "end": "2750349"
  },
  {
    "text": "to do with the SUBSCRIBE method well notice I'm calling the SUBSCRIBE function right here so I'll put the",
    "start": "2750349",
    "end": "2755599"
  },
  {
    "text": "SUBSCRIBE function and the SUBSCRIBE function it's going to need two things it's going to need an input equals",
    "start": "2755599",
    "end": "2762080"
  },
  {
    "text": "document dot get element by ID in this case the element I'm interested in is",
    "start": "2762080",
    "end": "2767810"
  },
  {
    "text": "the input element that is up here but I'm also interested in the display element so I'm going to say let display",
    "start": "2767810",
    "end": "2775040"
  },
  {
    "text": "is equal to and I'm going to say document dot get element by ID but this",
    "start": "2775040",
    "end": "2780619"
  },
  {
    "text": "is going to be displaced while we are here let's say input dot placeholder is equal to type something so that way we",
    "start": "2780619",
    "end": "2788420"
  },
  {
    "text": "know that we clicked on subscribe so that's a good start so let's go back to this little example",
    "start": "2788420",
    "end": "2793940"
  },
  {
    "text": "and I'm going to click on subscribe' right here and it says type something so we are ready to try some little example",
    "start": "2793940",
    "end": "2800900"
  },
  {
    "text": "but let's take this to the next level we talked about being reactive and we",
    "start": "2800900",
    "end": "2806089"
  },
  {
    "text": "talked about talked about data stream but what can be data stream I gave a",
    "start": "2806089",
    "end": "2811190"
  },
  {
    "text": "little exactly examples I mentioned that star data could be a data stream and so you",
    "start": "2811190",
    "end": "2816710"
  },
  {
    "text": "register to tickers and symbols and you got stock data that's changing and you're monitoring a financial exchange",
    "start": "2816710",
    "end": "2823100"
  },
  {
    "text": "great Twitter could be a data stream a Twitter is an awesome example because",
    "start": "2823100",
    "end": "2828230"
  },
  {
    "text": "you can sign up to Twitter and you can waste the rest of the day monitoring what everybody else in the world is",
    "start": "2828230",
    "end": "2833270"
  },
  {
    "text": "saying not do any useful work that could be a nice little stream you can subscribe to weather could be another",
    "start": "2833270",
    "end": "2839090"
  },
  {
    "text": "data stream but once we get a hang of stream you then begin to ask",
    "start": "2839090",
    "end": "2845150"
  },
  {
    "text": "excuse me waters can be a data stream whilst raelia program radio programs or data stream somebody talking could be a",
    "start": "2845150",
    "end": "2851240"
  },
  {
    "text": "data stream time itself is a stream after all time is endless it keeps on",
    "start": "2851240",
    "end": "2857150"
  },
  {
    "text": "ticking and so if you want a timer why can't I use a timer as a data stream",
    "start": "2857150",
    "end": "2862700"
  },
  {
    "text": "well then you think about this there's a beautiful language called elm and one of",
    "start": "2862700",
    "end": "2868130"
  },
  {
    "text": "the things L excuse me Elm is actually Haskell syntax for most part and a",
    "start": "2868130",
    "end": "2874610"
  },
  {
    "text": "little bit of F sharp syntax but L compiles down to JavaScript and elm is",
    "start": "2874610",
    "end": "2880010"
  },
  {
    "text": "touted as a reactive you I you know programming language and one thing al",
    "start": "2880010",
    "end": "2885470"
  },
  {
    "text": "does is in elm all the things like Mouse movement and keystrokes are all three",
    "start": "2885470",
    "end": "2892220"
  },
  {
    "text": "active streams and you can imagine if you want to monitor somebody's mouth movement you could subscribe it as a",
    "start": "2892220",
    "end": "2898580"
  },
  {
    "text": "stream so whenever they move the mouse then you get a notification as a subscriber and depending on how fast",
    "start": "2898580",
    "end": "2905480"
  },
  {
    "text": "they move the mouse and depending on how much coffee they have had they move the mouse in a very different pace so the",
    "start": "2905480",
    "end": "2911090"
  },
  {
    "text": "point really is you can start mesh you know monitoring these events as streams",
    "start": "2911090",
    "end": "2916310"
  },
  {
    "text": "and that kind of bends the way you think about it which is exactly what I'm going to do here but in this case using rxjs",
    "start": "2916310",
    "end": "2923690"
  },
  {
    "text": "so what can I do in rxjs for that so I'm going to say get keyboard let's say",
    "start": "2923690",
    "end": "2931780"
  },
  {
    "text": "observable and I'm going to call a function called get keyboard observable",
    "start": "2931780",
    "end": "2937520"
  },
  {
    "text": "well I'm going to start looking at a keyboard and and as I type stuff on the keyboard I want to listen to them as an",
    "start": "2937520",
    "end": "2944900"
  },
  {
    "text": "event as a stream rather than a traditional event so for that I'm going to go to say",
    "start": "2944900",
    "end": "2951140"
  },
  {
    "text": "let get keyboard observable and you know very well what this function is going to do it's going to return an observable so",
    "start": "2951140",
    "end": "2958880"
  },
  {
    "text": "return our X dart observable but wait a minute a few minutes ago I call the",
    "start": "2958880",
    "end": "2965180"
  },
  {
    "text": "create method why did I call a create method because I was the datasource",
    "start": "2965180",
    "end": "2970400"
  },
  {
    "text": "so I call the create method but now I'm no longer there is a source the data source is the operating system it's",
    "start": "2970400",
    "end": "2977000"
  },
  {
    "text": "going to start emitting keystrokes as I start typing I want to be the middleman to take those keystrokes and emit it as",
    "start": "2977000",
    "end": "2984290"
  },
  {
    "text": "an observable so how do we do that well that's the beauty of this I can call a function called from event really",
    "start": "2984290",
    "end": "2992120"
  },
  {
    "text": "really nicely so I'm going to call from event from the e input so I'm going to",
    "start": "2992120",
    "end": "2997520"
  },
  {
    "text": "pass that input as the source over here and that becomes the import so I'll",
    "start": "2997520",
    "end": "3002710"
  },
  {
    "text": "change it to source right here and then of course what event are you interested in well I'm interested in the key up",
    "start": "3002710",
    "end": "3008860"
  },
  {
    "text": "event that I'm going to be generating from that I'm going to receive that well that's great I'm going to have this",
    "start": "3008860",
    "end": "3015400"
  },
  {
    "text": "observable given to me but a key event is a key event but what are they",
    "start": "3015400",
    "end": "3020440"
  },
  {
    "text": "interest rate from this particular event I'm interested in every single keystroke so I'm going to call a map function",
    "start": "3020440",
    "end": "3027040"
  },
  {
    "text": "right there and I'm going to say get key as a function that I want to call right",
    "start": "3027040",
    "end": "3032590"
  },
  {
    "text": "now well that begs the question what in the world is this get key well get key is a function and this function takes an",
    "start": "3032590",
    "end": "3040480"
  },
  {
    "text": "event and it simply returns event key and returns the key from that particular",
    "start": "3040480",
    "end": "3046750"
  },
  {
    "text": "event so now we converted a keystroke into a stream after all an observable",
    "start": "3046750",
    "end": "3052720"
  },
  {
    "text": "and I'm going to start monitoring that well what do I do when this happens well you know very well what I should do now",
    "start": "3052720",
    "end": "3058870"
  },
  {
    "text": "I've got an observable with me so the obvious function call is a subscribed function so I call the subscribe and at",
    "start": "3058870",
    "end": "3067300"
  },
  {
    "text": "this point I'm going to say given a key what do we want to do display dot inner HTML and in this case inner HTML plus",
    "start": "3067300",
    "end": "3077410"
  },
  {
    "text": "equal to and I'm going to update the key into it so we turned this into a little observable and",
    "start": "3077410",
    "end": "3084710"
  },
  {
    "text": "we subscribe to this observable and we can start displaying that piece of data well let's see if that works",
    "start": "3084710",
    "end": "3090830"
  },
  {
    "text": "actually so let's get back here and do click on the subscribe function and of course it says type something and I say",
    "start": "3090830",
    "end": "3097550"
  },
  {
    "text": "ABC and you can see that whatever I type here it is displaying right there so",
    "start": "3097550",
    "end": "3103369"
  },
  {
    "text": "here's the SUBSCRIBE ABCD and you can see that being displayed right there so",
    "start": "3103369",
    "end": "3108440"
  },
  {
    "text": "we turn that into a little event through the observable but my goal was to show",
    "start": "3108440",
    "end": "3113810"
  },
  {
    "text": "you about error handling how do we handle the error well to understand how we can handle the error let's get back",
    "start": "3113810",
    "end": "3120770"
  },
  {
    "text": "to this little example and play with it again so I go back over here and I say well if the first of all I have a key on",
    "start": "3120770",
    "end": "3129230"
  },
  {
    "text": "my hand so let's say left key equals event dot let's say key and then I'm",
    "start": "3129230",
    "end": "3135320"
  },
  {
    "text": "going to return the key given to me so no difference just a little refactoring up the code right there just a little change to it",
    "start": "3135320",
    "end": "3142040"
  },
  {
    "text": "so ABC again you can see that it works but I'm going to then say F the in this",
    "start": "3142040",
    "end": "3147980"
  },
  {
    "text": "case key is equal to the letter F or the key is equal to the letter F uppercase",
    "start": "3147980",
    "end": "3155450"
  },
  {
    "text": "then I'm going to fit throw new error in this case I'm going to say well let us",
    "start": "3155450",
    "end": "3162440"
  },
  {
    "text": "not go there right that's a bit little error message the minute it sees the F it says add don't do that so in this",
    "start": "3162440",
    "end": "3169339"
  },
  {
    "text": "case of course I'm going to go back and click on the subscribe and I'm going to say ABCD F well notice now it doesn't",
    "start": "3169339",
    "end": "3179810"
  },
  {
    "text": "have anything more coming through because the minute that is an error being emitted that data channel shuts up",
    "start": "3179810",
    "end": "3186800"
  },
  {
    "text": "so that is why in this example notice I subscribe ABCDEF and sorry no more data",
    "start": "3186800",
    "end": "3195740"
  },
  {
    "text": "for you so that basically terminated the data channel but of course I have an error channel through which I can",
    "start": "3195740",
    "end": "3202400"
  },
  {
    "text": "receive the error so notice I got error I'm going to say display dot innerhtml",
    "start": "3202400",
    "end": "3207830"
  },
  {
    "text": "equals error dark message and I can display the message that get back from it so I go ahead and click",
    "start": "3207830",
    "end": "3215100"
  },
  {
    "text": "on subscribe' ABCDEF well let's not go",
    "start": "3215100",
    "end": "3220140"
  },
  {
    "text": "there and it doesn't matter what I you know click anymore or type anymore it's",
    "start": "3220140",
    "end": "3225420"
  },
  {
    "text": "not going to respond at this point because error came through the error channel that data channel shuts up",
    "start": "3225420",
    "end": "3231300"
  },
  {
    "text": "there's nothing coming through after that so that is an example of how we can deal with errors as well very nicely but",
    "start": "3231300",
    "end": "3238710"
  },
  {
    "text": "I did mention that a beautiful transformation in shoes from here so a",
    "start": "3238710",
    "end": "3243750"
  },
  {
    "text": "little circuit breaker concept you saw but I want to talk about the filter and the map functions very nicely this is",
    "start": "3243750",
    "end": "3250500"
  },
  {
    "text": "one of the beautiful characters up here I'm going to remove that error handling for a minute let's come back to this",
    "start": "3250500",
    "end": "3256230"
  },
  {
    "text": "code but the beauty is I can do a dark filter and I can say given a key tell me",
    "start": "3256230",
    "end": "3262890"
  },
  {
    "text": "that the key is not equal to the letter Z and the key is not equal to the under",
    "start": "3262890",
    "end": "3272160"
  },
  {
    "text": "the letter uppercase Z so no sleeping allowed here and so I filtered those out",
    "start": "3272160",
    "end": "3278340"
  },
  {
    "text": "as you can see right here so if I were to do this then I'm going to say dark",
    "start": "3278340",
    "end": "3283440"
  },
  {
    "text": "map given a key I want to return key dark to uppercase so I can convert it to",
    "start": "3283440",
    "end": "3290280"
  },
  {
    "text": "a uppercase as well so once again let's go back and try this out click on subscribe ABC and you can see type Z are",
    "start": "3290280",
    "end": "3300080"
  },
  {
    "text": "uppercase Z you can see that nothing happens right there and then I can type other characters after that so that",
    "start": "3300080",
    "end": "3307500"
  },
  {
    "text": "essentially is converting to uppercase but it also filters out the Z so we",
    "start": "3307500",
    "end": "3314070"
  },
  {
    "text": "don't see that anymore so you can see how we can do filtering that's another beauty here is I didn't affect the",
    "start": "3314070",
    "end": "3320850"
  },
  {
    "text": "source I am the intermediary and in this case I said I want to start filtering the data",
    "start": "3320850",
    "end": "3327060"
  },
  {
    "text": "along the way and I'm also going to start really doing processing along the way where I can transform the data and",
    "start": "3327060",
    "end": "3334050"
  },
  {
    "text": "we can do some really wonderful things with it that again comes into a very powerful scenario well the last thing I",
    "start": "3334050",
    "end": "3340410"
  },
  {
    "text": "want to talk about here is one other concern which is back pressure well the reality is",
    "start": "3340410",
    "end": "3346380"
  },
  {
    "text": "that you are going to have emitter that's emitting the data the observable you have observers that are processing",
    "start": "3346380",
    "end": "3352680"
  },
  {
    "text": "it but the reality though is there are times when you are maybe not as fast in",
    "start": "3352680",
    "end": "3359040"
  },
  {
    "text": "processing as the data is being emitted well what do you do in that case well",
    "start": "3359040",
    "end": "3364260"
  },
  {
    "text": "you cannot obviously be forced to work any faster than you can well that's where the concert of back pressure comes",
    "start": "3364260",
    "end": "3371280"
  },
  {
    "text": "in so back pressure the key thing to keep in mind about back pressure is there's no one right way to do it so you",
    "start": "3371280",
    "end": "3377850"
  },
  {
    "text": "need to handle it based on the realities of your project and application there are a back pressure on back pressure",
    "start": "3377850",
    "end": "3384000"
  },
  {
    "text": "drop which will just drop the data if you're too busy or back pressure buffer it will keep buffering the data when",
    "start": "3384000",
    "end": "3391140"
  },
  {
    "text": "you're busy and then when you have less load to process you can process and empty the buffer well on buffer of",
    "start": "3391140",
    "end": "3396720"
  },
  {
    "text": "course only makes sense when you have times of peak load and slow load and you can vary your processing there are other",
    "start": "3396720",
    "end": "3403230"
  },
  {
    "text": "solutions like for example the bounds and throttle which will allow you to decide how many requests and responses",
    "start": "3403230",
    "end": "3410370"
  },
  {
    "text": "you want to process and the bound says I don't want to send any more than a",
    "start": "3410370",
    "end": "3415380"
  },
  {
    "text": "certain request in a given amount of time and if there's a response that's happening right now and I'll let the",
    "start": "3415380",
    "end": "3421740"
  },
  {
    "text": "time pass and so I send the next request throttle on the other hand says within a given time you can only do this much",
    "start": "3421740",
    "end": "3427380"
  },
  {
    "text": "amount of work and if you've done more than that then wait until the time elapses to do the next piece of work you",
    "start": "3427380",
    "end": "3433080"
  },
  {
    "text": "can decide based on what you're trying to do what you are interested in handling so to give you an example of",
    "start": "3433080",
    "end": "3438810"
  },
  {
    "text": "that if I go back here let's say back in this example let's go ahead and refresh",
    "start": "3438810",
    "end": "3444630"
  },
  {
    "text": "this and in this case let's say I'm going to subscribe but let's say I start",
    "start": "3444630",
    "end": "3449820"
  },
  {
    "text": "typing really quickly well if you have noticed me type so far I'm really really",
    "start": "3449820",
    "end": "3455040"
  },
  {
    "text": "good at typing badly so I'll type and hit the backspace and type and hit the backspace and you're like cars all these",
    "start": "3455040",
    "end": "3462000"
  },
  {
    "text": "back spaces and typing and hitting backspace that's a waste can we just not wait until this guy gets stable at",
    "start": "3462000",
    "end": "3468060"
  },
  {
    "text": "piping well that's exactly what I can use to balance our product so in this",
    "start": "3468060",
    "end": "3473070"
  },
  {
    "text": "case I can say the balance time for example 500 and notice I just threw it",
    "start": "3473070",
    "end": "3478320"
  },
  {
    "text": "as an intermediary now what does this do well and then I'm going to do one more change here I'm",
    "start": "3478320",
    "end": "3484050"
  },
  {
    "text": "going to remove this filter for a minute I'm going to go back to this code and return in this case rather than",
    "start": "3484050",
    "end": "3490290"
  },
  {
    "text": "returning a key for this event what I would like to return is the event target value entirely so I'm going to return",
    "start": "3490290",
    "end": "3498510"
  },
  {
    "text": "the word itself and then of course I'm going to turn into uppercase and then display it well in this case of course",
    "start": "3498510",
    "end": "3505560"
  },
  {
    "text": "because I put it the pounds here so notice if I go back here and say ABC as",
    "start": "3505560",
    "end": "3511440"
  },
  {
    "text": "a word you can see that in this case I am typing ABC and it of course displays",
    "start": "3511440",
    "end": "3517320"
  },
  {
    "text": "ABC as a word that comes in through really nicely so right again ABC well",
    "start": "3517320",
    "end": "3522960"
  },
  {
    "text": "but notice it waited for me so I make some mistakes I remove those mistakes I type again remove this and then enter D",
    "start": "3522960",
    "end": "3529770"
  },
  {
    "text": "and all that mistakes I made were not visible because I said just only frantic",
    "start": "3529770",
    "end": "3535589"
  },
  {
    "text": "let things settle down a little bit before you send it so you can control the back pressure and to the point I",
    "start": "3535589",
    "end": "3541530"
  },
  {
    "text": "made this is just one example there are several other ways to control back pressure depending on your need for your",
    "start": "3541530",
    "end": "3548220"
  },
  {
    "text": "applications you can decide and pick whichever solution that might be applicable depending on what you're",
    "start": "3548220",
    "end": "3554310"
  },
  {
    "text": "trying to do like for example buffering maybe a solution under certain contexts and that's what you want to do if that makes",
    "start": "3554310",
    "end": "3561000"
  },
  {
    "text": "sense do what you're trying to do so what we learned so far well what we learned here is that it's a rebirth of",
    "start": "3561000",
    "end": "3568079"
  },
  {
    "text": "the traditional observer pattern but there are differences as well in terms of having a data channel error channel",
    "start": "3568079",
    "end": "3574680"
  },
  {
    "text": "and of course the completed Channel and you have this beautiful chain of responsibility pattern you got",
    "start": "3574680",
    "end": "3580650"
  },
  {
    "text": "intermediaries or subjects that can themselves be the so a recipient of the",
    "start": "3580650",
    "end": "3586920"
  },
  {
    "text": "data from another observable but turn around and become observable to downstream and so you have nice way to",
    "start": "3586920",
    "end": "3592200"
  },
  {
    "text": "chain things so you can have an observable design in one way and you can control the behavior downstream based on",
    "start": "3592200",
    "end": "3599339"
  },
  {
    "text": "what you're trying to do like I mentioned this is something we are going to see quite a bit moving forward almost",
    "start": "3599339",
    "end": "3605940"
  },
  {
    "text": "this is something we cannot escape in a way if you really ask me I feel like",
    "start": "3605940",
    "end": "3611069"
  },
  {
    "text": "there is a rebirth the paradigm so I kind of remember way",
    "start": "3611069",
    "end": "3616430"
  },
  {
    "text": "back in time I was watching the emergence of obtruded programming people",
    "start": "3616430",
    "end": "3621770"
  },
  {
    "text": "were pretty much programming in structured programs and procedural style and they were trying to wrap their heads",
    "start": "3621770",
    "end": "3627830"
  },
  {
    "text": "around object to the programming and of course you can see that there were people making mistakes we were talking",
    "start": "3627830",
    "end": "3633590"
  },
  {
    "text": "about it arguing about it and then there was a quietness that ensured after that and then eventually we started building",
    "start": "3633590",
    "end": "3638930"
  },
  {
    "text": "crowd applications with it I feel there is this another time opportunity now for",
    "start": "3638930",
    "end": "3644240"
  },
  {
    "text": "yet another paradigm shift I'm not going to say that we're not going to do card applications anymore would continue do",
    "start": "3644240",
    "end": "3650810"
  },
  {
    "text": "card applications but I'm going to challenge if everything we do becomes a crowd and I doubt it actually is and I",
    "start": "3650810",
    "end": "3657500"
  },
  {
    "text": "think reactive programming is the next paradigm shift that we are seeing and I think we're going to start building",
    "start": "3657500",
    "end": "3663290"
  },
  {
    "text": "applications very differently in the next about you know five to ten years and we are just wrapping overhead around",
    "start": "3663290",
    "end": "3669770"
  },
  {
    "text": "these kinds of ideas and concepts if you ask me this is definitely a great time to be in this area so I hope you'll be",
    "start": "3669770",
    "end": "3676700"
  },
  {
    "text": "very proactive in looking at this concept of reactive programming hope that was useful thank you",
    "start": "3676700",
    "end": "3682580"
  },
  {
    "text": "[Applause]",
    "start": "3682580",
    "end": "3686380"
  }
]