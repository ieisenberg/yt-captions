[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "so welcome today on presentation about react from reactive extensions to reactive",
    "start": "4930",
    "end": "11310"
  },
  {
    "text": "streams and my name is Bart Petrovsky Who am I I am one of the a",
    "start": "11310",
    "end": "18320"
  },
  {
    "text": "cadet net project contributors for like four years right now and for those of",
    "start": "18320",
    "end": "25580"
  },
  {
    "text": "you who don't know what a cadet is it's essentially a port from the Scala version of akka framework its framework",
    "start": "25580",
    "end": "33110"
  },
  {
    "text": "for distributed actor model programming and what we will talk about today is",
    "start": "33110",
    "end": "41170"
  },
  {
    "start": "38000",
    "end": "65000"
  },
  {
    "text": "that first starts from warring because some of the ideas here might seem to be",
    "start": "41170",
    "end": "46850"
  },
  {
    "text": "a little bit controversial and what I mean here is that we will try to challenge some of the ideas that may or",
    "start": "46850",
    "end": "55460"
  },
  {
    "text": "may not be considered as absolute truths in dotnet framework as well and what",
    "start": "55460",
    "end": "64820"
  },
  {
    "text": "we'll talk about specifically is streaming paradigm from for building you",
    "start": "64820",
    "end": "72200"
  },
  {
    "start": "65000",
    "end": "121000"
  },
  {
    "text": "know data flow based applications so we'll talk first about the theoretical",
    "start": "72200",
    "end": "81619"
  },
  {
    "text": "background for that we will see different approaches to it and what how",
    "start": "81619",
    "end": "90020"
  },
  {
    "text": "did they evolve essentially to react to streams and later on we'll take a look about some more practical aspects on",
    "start": "90020",
    "end": "97039"
  },
  {
    "text": "that built on top of a key dozen streams which is a plug-in library for a cadet net and what perspective I would like",
    "start": "97039",
    "end": "106459"
  },
  {
    "text": "you to pick here is that you would need to think about SP eyes for the first",
    "start": "106459",
    "end": "113299"
  },
  {
    "text": "part and ap eyes for the second part and what they are and how they differ we'll",
    "start": "113299",
    "end": "119450"
  },
  {
    "text": "talk about in a second so API is vs. SP is what the API Isis is an acronym for",
    "start": "119450",
    "end": "127579"
  },
  {
    "start": "121000",
    "end": "150000"
  },
  {
    "text": "application programming interface and what it essentially is it's a contract",
    "start": "127579",
    "end": "133220"
  },
  {
    "text": "between library creators and library users so us as programmers for using",
    "start": "133220",
    "end": "140450"
  },
  {
    "text": "this that library basically and discounts with some of the",
    "start": "140450",
    "end": "146920"
  },
  {
    "text": "assumptions some of the design decisions so for example first part this is API",
    "start": "146920",
    "end": "155430"
  },
  {
    "start": "150000",
    "end": "242000"
  },
  {
    "text": "and this API is used on daily basis it's just often another it's usually is",
    "start": "155430",
    "end": "163380"
  },
  {
    "text": "associated with some concrete solution for the problem because you know if we",
    "start": "163380",
    "end": "168790"
  },
  {
    "text": "want to use the library it should solve some kind of a problem another one is that for every problem every solution",
    "start": "168790",
    "end": "176980"
  },
  {
    "text": "must have some trade-offs involved there are no silver bullets here we usually",
    "start": "176980",
    "end": "183010"
  },
  {
    "text": "have to make some decisions in order to achieve the problem and therefore there",
    "start": "183010",
    "end": "188290"
  },
  {
    "text": "is a reason why there are different libraries solving the same you know having the same area essentially because",
    "start": "188290",
    "end": "194650"
  },
  {
    "text": "they are picking different trade-offs that depends on actual use cases and",
    "start": "194650",
    "end": "200440"
  },
  {
    "text": "what comes with that is that they might be more like Microsoft libraries or less",
    "start": "200440",
    "end": "205840"
  },
  {
    "text": "opinionated and I've added a quiz mark here because this is not always true and",
    "start": "205840",
    "end": "211870"
  },
  {
    "text": "this is not necessarily an issue because you know usually we like my like",
    "start": "211870",
    "end": "218019"
  },
  {
    "text": "opinionated libraries for the fact that they have picking up the burden of",
    "start": "218019",
    "end": "223090"
  },
  {
    "text": "making decision for us as long as those decisions are in line with what we are",
    "start": "223090",
    "end": "228459"
  },
  {
    "text": "and what we are actually work doing once you know once the those decisions are no",
    "start": "228459",
    "end": "235239"
  },
  {
    "text": "longer applicable in our case this you know opinionated frameworks can be",
    "start": "235239",
    "end": "240459"
  },
  {
    "text": "problematic for us but what is most painful about designing libraries to be",
    "start": "240459",
    "end": "248470"
  },
  {
    "start": "242000",
    "end": "311000"
  },
  {
    "text": "API based usually when we create projects we use more than one library",
    "start": "248470",
    "end": "254860"
  },
  {
    "text": "more than one framework in our system and often we need some kind you know to",
    "start": "254860",
    "end": "260739"
  },
  {
    "text": "connect them so what do we do we typed nugget and later on we are checking for",
    "start": "260739",
    "end": "268780"
  },
  {
    "text": "adapters between stone and the problem here is that now we are in the vast area",
    "start": "268780",
    "end": "276430"
  },
  {
    "text": "of potential adaptors because we basically have each to each map in between library",
    "start": "276430",
    "end": "283900"
  },
  {
    "text": "in one library and another in order to be competitive and to make them compatible with each other also what",
    "start": "283900",
    "end": "291639"
  },
  {
    "text": "comes with that is the fact that api's are changing so you know our adapters",
    "start": "291639",
    "end": "297400"
  },
  {
    "text": "and our libraries can get you know essentially unused over time and tweet",
    "start": "297400",
    "end": "305740"
  },
  {
    "text": "you know to update them and fix the dependency conflicts and so and so on and this is where SPI is come to place",
    "start": "305740",
    "end": "313810"
  },
  {
    "start": "311000",
    "end": "333000"
  },
  {
    "text": "SPI means service provider interface and what they are designed to do is",
    "start": "313810",
    "end": "319810"
  },
  {
    "text": "essentially to provide the contract between different sets of libraries that",
    "start": "319810",
    "end": "327490"
  },
  {
    "text": "they can agree upon in order to operate with each other and this comes with a",
    "start": "327490",
    "end": "334479"
  },
  {
    "start": "333000",
    "end": "486000"
  },
  {
    "text": "different design decisions in mind first of all they are not used so often",
    "start": "334479",
    "end": "340120"
  },
  {
    "text": "because they are used mostly by the library creators and mostly they are",
    "start": "340120",
    "end": "345310"
  },
  {
    "text": "designed for another libraries being consumed what it also means that they",
    "start": "345310",
    "end": "351039"
  },
  {
    "text": "are they usually don't change that much in that that much as normally is another",
    "start": "351039",
    "end": "358180"
  },
  {
    "text": "way another thing is that they focus on providing abstraction so they don't need",
    "start": "358180",
    "end": "365259"
  },
  {
    "text": "to provide a specific solution for the problem or rather a set of interfaces that we would like to use as our",
    "start": "365259",
    "end": "372820"
  },
  {
    "text": "contract another thing is that they have meme or no dependencies because",
    "start": "372820",
    "end": "378490"
  },
  {
    "text": "essentially what it's important for us as you know library users is that once",
    "start": "378490",
    "end": "385479"
  },
  {
    "text": "we have dependence in some library we also need to you know care about the",
    "start": "385479",
    "end": "392259"
  },
  {
    "text": "transitive dependencies here and for this we probably don't want to you know",
    "start": "392259",
    "end": "398830"
  },
  {
    "text": "have to download 100 megabytes of dependencies just to implement a single",
    "start": "398830",
    "end": "405639"
  },
  {
    "text": "interface this is not what they are meant to there are single purpose and we can see",
    "start": "405639",
    "end": "412100"
  },
  {
    "text": "that those kind of libraries are already existing in dotnet space for example all",
    "start": "412100",
    "end": "419600"
  },
  {
    "text": "of the Microsoft dot extensions dot something something dot abstractions libraries are basically SP eyes for our",
    "start": "419600",
    "end": "427820"
  },
  {
    "text": "current state of endorsement ecosystem they are solving particular problems",
    "start": "427820",
    "end": "434390"
  },
  {
    "text": "like clogging dependency injection configuration so on and so on and they",
    "start": "434390",
    "end": "440360"
  },
  {
    "text": "die ideally they should be elastic and agnostic for the programming paradigm",
    "start": "440360",
    "end": "445670"
  },
  {
    "text": "because we don't know who will be working with them but we want to be",
    "start": "445670",
    "end": "451520"
  },
  {
    "text": "elastic enough so that they could be implemented by either object-oriented",
    "start": "451520",
    "end": "456860"
  },
  {
    "text": "programs or functional programmers depending on what we would like to use and the contract needs to be",
    "start": "456860",
    "end": "463610"
  },
  {
    "text": "well-defined and ideally it should be it should have some kind of specification because you know not everything that can",
    "start": "463610",
    "end": "470960"
  },
  {
    "text": "be explained using only the type system some of the constraints related to using",
    "start": "470960",
    "end": "478580"
  },
  {
    "text": "those interfaces are not cannot be",
    "start": "478580",
    "end": "483680"
  },
  {
    "text": "expressed using type system so today we",
    "start": "483680",
    "end": "489050"
  },
  {
    "start": "486000",
    "end": "676000"
  },
  {
    "text": "will talk about those free and different libraries or approaches as potential a",
    "start": "489050",
    "end": "498140"
  },
  {
    "text": "waste of abuse as SP is will start from reactive extensions than async",
    "start": "498140",
    "end": "504080"
  },
  {
    "text": "enumerables which I know don't I know that this is not a library because it's",
    "start": "504080",
    "end": "510050"
  },
  {
    "text": "there are different sets of libraries that essentially implement the same interface in dotnet space and the last",
    "start": "510050",
    "end": "517940"
  },
  {
    "text": "one are active streams as essentially the final I would say proposal on what",
    "start": "517940",
    "end": "526340"
  },
  {
    "text": "on how the streaming could look like from the SPI perspective so keep that in",
    "start": "526340",
    "end": "531890"
  },
  {
    "text": "mind so starting from reactive extensions it's essentially sets of",
    "start": "531890",
    "end": "538190"
  },
  {
    "text": "interfaces to to be honest that allow us to create basic applications food based means that",
    "start": "538190",
    "end": "545420"
  },
  {
    "text": "the pace of the processing is dictated by the producer of the message so here's here is the basic set of",
    "start": "545420",
    "end": "554720"
  },
  {
    "text": "interfaces that are necessary to establish this contract and what you can",
    "start": "554720",
    "end": "559910"
  },
  {
    "text": "see here for example I disposable and it's actually also a part of the",
    "start": "559910",
    "end": "565280"
  },
  {
    "text": "contract but it's implicit because it's part of the you know dotnet standard",
    "start": "565280",
    "end": "571100"
  },
  {
    "text": "library but what we can also see here in the SUBSCRIBE method is that unsubscribe",
    "start": "571100",
    "end": "577910"
  },
  {
    "text": "and during subscription we are returning this I disposable object which means that essentially this method is expected",
    "start": "577910",
    "end": "585020"
  },
  {
    "text": "to be executed synchronously for example which is quite a limiting in some situations because we need to await for",
    "start": "585020",
    "end": "592700"
  },
  {
    "text": "the subscription which could otherwise happen you know a synchronously for example but what it's more important",
    "start": "592700",
    "end": "600770"
  },
  {
    "text": "here is the problem that this library produces for example what we and what",
    "start": "600770",
    "end": "606080"
  },
  {
    "text": "will happen if you have one producer and that is able to process 100 messages per",
    "start": "606080",
    "end": "611420"
  },
  {
    "text": "second and consumer that it's a lot slower now we are a landing in the",
    "start": "611420",
    "end": "618790"
  },
  {
    "text": "situation when the customer is no longer able to you know stop the producer from producing leads messages simply because",
    "start": "618790",
    "end": "626120"
  },
  {
    "text": "there is no way in this SPI in this interface to inform about that so what",
    "start": "626120",
    "end": "634460"
  },
  {
    "text": "we like here is a lack of back pressure and usually it's not a problem in client",
    "start": "634460",
    "end": "639980"
  },
  {
    "text": "based applications that's why for example I think that's why reactive extensions are so popular on the client",
    "start": "639980",
    "end": "646250"
  },
  {
    "text": "side because when building client applications the pace of the work done",
    "start": "646250",
    "end": "652670"
  },
  {
    "text": "by the producer is strictly related to the you know number of actions that a",
    "start": "652670",
    "end": "657830"
  },
  {
    "text": "single person can essentially trigger",
    "start": "657830",
    "end": "663310"
  },
  {
    "text": "but for the server-side applications when we can have thousands hundreds of",
    "start": "663310",
    "end": "668450"
  },
  {
    "text": "thousands of clients being producers of messages this could quickly",
    "start": "668450",
    "end": "673970"
  },
  {
    "text": "to overflow our servers so there is a well-known alternative approach which is",
    "start": "673970",
    "end": "681140"
  },
  {
    "start": "676000",
    "end": "692000"
  },
  {
    "text": "called async enumerable and it's a different kind of string model it's pulled by strings model when the pace is",
    "start": "681140",
    "end": "687829"
  },
  {
    "text": "dictated by the prod and a consumer of the message rather than the processor and this is a variation I would say of",
    "start": "687829",
    "end": "695930"
  },
  {
    "start": "692000",
    "end": "748000"
  },
  {
    "text": "the iterator pattern which this distinction that our move next method",
    "start": "695930",
    "end": "702550"
  },
  {
    "text": "doesn't have to return immediately instead it can return an asynchronous",
    "start": "702550",
    "end": "708470"
  },
  {
    "text": "continuation that can be completed by the producer whenever they have a new",
    "start": "708470",
    "end": "713660"
  },
  {
    "text": "message to actually actually pushed the",
    "start": "713660",
    "end": "719300"
  },
  {
    "text": "consumer so this interface is really a really clean I to be honest I really",
    "start": "719300",
    "end": "725959"
  },
  {
    "text": "love it and it's essentially a single method if we look at it from the right",
    "start": "725959",
    "end": "733670"
  },
  {
    "text": "perspective and it's very self-explanatory and it's so great that it's and I think Universal that it's",
    "start": "733670",
    "end": "740990"
  },
  {
    "text": "actually used in the movie use as first class citizen in c-sharp soon however",
    "start": "740990",
    "end": "747949"
  },
  {
    "text": "let's start okay so yeah how does it look like so first",
    "start": "747949",
    "end": "753620"
  },
  {
    "start": "748000",
    "end": "778000"
  },
  {
    "text": "when we are talking about publish subscriber model because all of those are essentially representations of",
    "start": "753620",
    "end": "761019"
  },
  {
    "text": "publish/subscribe model so the subscriber first needs to pull records",
    "start": "761019",
    "end": "767209"
  },
  {
    "text": "the next message from the publisher and then the publisher can you know complete",
    "start": "767209",
    "end": "773360"
  },
  {
    "text": "that request and this allows us to you know produce the backpressure however let's do some nitpicking here because",
    "start": "773360",
    "end": "781750"
  },
  {
    "start": "778000",
    "end": "796000"
  },
  {
    "text": "while this set of interfaces also us to",
    "start": "781750",
    "end": "787370"
  },
  {
    "text": "go for the great length it has also some of the limitations and here I will focus",
    "start": "787370",
    "end": "792620"
  },
  {
    "text": "on two of them one of them is a low / low overhead high performance NARS so",
    "start": "792620",
    "end": "800390"
  },
  {
    "start": "796000",
    "end": "855000"
  },
  {
    "text": "for example if you look this piece of code we can simply assume",
    "start": "800390",
    "end": "808610"
  },
  {
    "text": "how many async objects will create it",
    "start": "808610",
    "end": "813739"
  },
  {
    "text": "would be free per invocation times million so an around 3 million of",
    "start": "813739",
    "end": "820189"
  },
  {
    "text": "asynchronous computations will be created just you know increment the arab",
    "start": "820189",
    "end": "825709"
  },
  {
    "text": "83 and you could say this is stupid because nobody would write code like",
    "start": "825709",
    "end": "831769"
  },
  {
    "text": "that however it turns out that you can write a very similar code that has very",
    "start": "831769",
    "end": "838790"
  },
  {
    "text": "similar characteristic it just you know it's a little bit more confusing so you",
    "start": "838790",
    "end": "846529"
  },
  {
    "text": "won't see this pattern here but it will exist still in our application and why",
    "start": "846529",
    "end": "852589"
  },
  {
    "text": "does this number of allocation matters because let's talk about tasks I will",
    "start": "852589",
    "end": "858980"
  },
  {
    "start": "855000",
    "end": "1015000"
  },
  {
    "text": "pick tasks here not F sharp icings because the tasks are more well-known",
    "start": "858980",
    "end": "866089"
  },
  {
    "text": "area for me but from what I know and the characteristic of async in F sharp is",
    "start": "866089",
    "end": "871850"
  },
  {
    "text": "worse than tasks so it's it's matters even more so first thing is that tasks",
    "start": "871850",
    "end": "877639"
  },
  {
    "text": "are allocated on managed heap essentially from what I've heard they",
    "start": "877639",
    "end": "883189"
  },
  {
    "text": "have around 88 bytes of memory and when",
    "start": "883189",
    "end": "888379"
  },
  {
    "text": "you are actually scheduling them on the thread pool this number goes up to like 300 and you could say well it's not that",
    "start": "888379",
    "end": "898009"
  },
  {
    "text": "wrong because we can simply garbage collect them but there is another case and it asks are disposable objects and I",
    "start": "898009",
    "end": "905689"
  },
  {
    "text": "know that probably none of you have ever disposed your tasks I know I didn't",
    "start": "905689",
    "end": "911559"
  },
  {
    "text": "and essentially why because we don't care about that because tasks have",
    "start": "911559",
    "end": "916790"
  },
  {
    "text": "custom finalized errs that you know do that clean for us however and where's",
    "start": "916790",
    "end": "921980"
  },
  {
    "text": "the problem from what I've had and what I've read when garbage collector is trying to for",
    "start": "921980",
    "end": "929269"
  },
  {
    "text": "example collect and the final object custom finalizer its first promoting it to Jen",
    "start": "929269",
    "end": "936380"
  },
  {
    "text": "before actually you know God was collecting it which is me and which means that this guy which is no longer",
    "start": "936380",
    "end": "942920"
  },
  {
    "text": "that free as we think about it so one",
    "start": "942920",
    "end": "948050"
  },
  {
    "text": "thing is that they are pretty actually and they are not that heavy in most of the snares but in some of them are and",
    "start": "948050",
    "end": "954610"
  },
  {
    "text": "the last thing is that tasks and icings are solid implementations so if you want",
    "start": "954610",
    "end": "961370"
  },
  {
    "text": "to create your own tasks or you have idea for example how to bring a better",
    "start": "961370",
    "end": "968510"
  },
  {
    "text": "implementation of tasks API or some competitive library to TPL you are stuck",
    "start": "968510",
    "end": "975350"
  },
  {
    "text": "because you know right now the whole API is using tasks so you still have to you",
    "start": "975350",
    "end": "980720"
  },
  {
    "text": "know move to this baseline even though you may be your replantation is better",
    "start": "980720",
    "end": "985780"
  },
  {
    "text": "Eric Meyer was proposing async sequence",
    "start": "985780",
    "end": "990860"
  },
  {
    "text": "as async return being a state machine with essentially three different states",
    "start": "990860",
    "end": "998330"
  },
  {
    "text": "pending completed or failed and this would work great in case if this would",
    "start": "998330",
    "end": "1005950"
  },
  {
    "text": "be actually this kind of an abstraction that we can specialise over that weekend not in Dartmouth not in the current",
    "start": "1005950",
    "end": "1013240"
  },
  {
    "text": "state of the art and another kind of problem is when we have a slow",
    "start": "1013240",
    "end": "1020470"
  },
  {
    "start": "1015000",
    "end": "1051000"
  },
  {
    "text": "continuation so for example an conveyor and conveyor on over the network or over",
    "start": "1020470",
    "end": "1027520"
  },
  {
    "text": "the disk space because imagine we are now picking elements one by one from",
    "start": "1027520",
    "end": "1034990"
  },
  {
    "text": "over the network let's say that processing that item will take one",
    "start": "1034990",
    "end": "1041350"
  },
  {
    "text": "millisecond picking it up from the network takes five milliseconds you can",
    "start": "1041350",
    "end": "1046600"
  },
  {
    "text": "see what the overhead we have here and there is a simple solution for that it's",
    "start": "1046600",
    "end": "1051970"
  },
  {
    "start": "1051000",
    "end": "1134000"
  },
  {
    "text": "called batching so instead of using picking elements one by one we can't",
    "start": "1051970",
    "end": "1057310"
  },
  {
    "text": "pick them in batches however there is another problem that so let's say we",
    "start": "1057310",
    "end": "1062950"
  },
  {
    "text": "have requested for the next batch of elements we are picking ten of them",
    "start": "1062950",
    "end": "1069750"
  },
  {
    "text": "we are requesting the next one sometime later but in that time and the spike has",
    "start": "1069750",
    "end": "1075090"
  },
  {
    "text": "happened happened on the producer side somewhere in the upstream so in the result we received 10 millions of them",
    "start": "1075090",
    "end": "1082759"
  },
  {
    "text": "we don't even know if you have enough memory to actually work with them this",
    "start": "1082759",
    "end": "1088049"
  },
  {
    "text": "way and essentially we come back to the problem of unsafe operations on the",
    "start": "1088049",
    "end": "1093929"
  },
  {
    "text": "server side so of course this is easy itself we can set maximum bound for the",
    "start": "1093929",
    "end": "1102629"
  },
  {
    "text": "batch to happen but there is a problem this is something that is very specific to our implementation and our consumers",
    "start": "1102629",
    "end": "1110370"
  },
  {
    "text": "do not know anything about it so it would be nice if we would be able for",
    "start": "1110370",
    "end": "1119000"
  },
  {
    "text": "the consumers and producers of messages to be able to tell not only that they",
    "start": "1119000",
    "end": "1124409"
  },
  {
    "text": "are requesting and they are able to process the next message but also how many of them can I can they get before",
    "start": "1124409",
    "end": "1131940"
  },
  {
    "text": "getting homework overwhelmed so let's say we have a sideline when a customer",
    "start": "1131940",
    "end": "1139019"
  },
  {
    "start": "1134000",
    "end": "1198000"
  },
  {
    "text": "can send information to the producer like give me three more messages because",
    "start": "1139019",
    "end": "1144179"
  },
  {
    "text": "I know I can batch three of them in my memory because before I will run out of",
    "start": "1144179",
    "end": "1149250"
  },
  {
    "text": "it so now it's up to the producer to remember how many of the messages and",
    "start": "1149250",
    "end": "1155549"
  },
  {
    "text": "has it sense to the consumer so let's say that producer has only two of them",
    "start": "1155549",
    "end": "1161669"
  },
  {
    "text": "he is sending the to his reducing the counter for that subscriber so he know her and that he can push one more",
    "start": "1161669",
    "end": "1168690"
  },
  {
    "text": "message before you know waiting for the next request in the meantime consumer",
    "start": "1168690",
    "end": "1176490"
  },
  {
    "text": "asked for two more because we let's say we have a fast consumer and the three",
    "start": "1176490",
    "end": "1183120"
  },
  {
    "text": "different and the next three messages have arrived in the meantime on the producer side so it's pushing them back",
    "start": "1183120",
    "end": "1189389"
  },
  {
    "text": "to the consumer in one batch because it knows how many of those can push and",
    "start": "1189389",
    "end": "1197629"
  },
  {
    "text": "yeah welcoming the rack to students because this is basically the idea behind the rack",
    "start": "1197629",
    "end": "1203620"
  },
  {
    "start": "1198000",
    "end": "1322000"
  },
  {
    "text": "it's known as a dynamic push-pull best streaming probably there is some",
    "start": "1203620",
    "end": "1210430"
  },
  {
    "text": "asynchronous or other kind of different you know hi Pat world around there and I",
    "start": "1210430",
    "end": "1219500"
  },
  {
    "text": "know that a lot of people are calling this and that this is actualize the beast because reactive and interactive",
    "start": "1219500",
    "end": "1227390"
  },
  {
    "text": "how the async animals are called are well-defined concepts and this is just",
    "start": "1227390",
    "end": "1233510"
  },
  {
    "text": "buzz word and yeah you are right basically what we have here is a pool",
    "start": "1233510",
    "end": "1239360"
  },
  {
    "text": "bass trimming but with support for implicit badging and what do we have",
    "start": "1239360",
    "end": "1247250"
  },
  {
    "text": "here I will come about I will come to the post base part later on so this is the",
    "start": "1247250",
    "end": "1254450"
  },
  {
    "text": "entire contract here so we don't have observables and observers we have just",
    "start": "1254450",
    "end": "1261410"
  },
  {
    "text": "publishers and subscribers we have also the processor which I think that in reactive extensions for dotnet is called",
    "start": "1261410",
    "end": "1268700"
  },
  {
    "text": "subject so it can be subscriber on one side and publish on the other side what",
    "start": "1268700",
    "end": "1274970"
  },
  {
    "text": "we also have here is subscription which replaced the disposable object as its it",
    "start": "1274970",
    "end": "1280910"
  },
  {
    "text": "can cancel the stream in cancel the subscription but it also can be used to",
    "start": "1280910",
    "end": "1286730"
  },
  {
    "text": "you know send requests to our producers in the afternoon and what is important",
    "start": "1286730",
    "end": "1292340"
  },
  {
    "text": "here as you can see all of those methods are not returning can can value and why",
    "start": "1292340",
    "end": "1298430"
  },
  {
    "text": "is this is it important because this way it doesn't matter if they are working",
    "start": "1298430",
    "end": "1303440"
  },
  {
    "text": "synchronously or asynchronously we can start a synchronous job inside of them",
    "start": "1303440",
    "end": "1309350"
  },
  {
    "text": "and use other methods inside those interfaces to tell basically and all the",
    "start": "1309350",
    "end": "1318050"
  },
  {
    "text": "other side when someone specific action has happened and the importance of the",
    "start": "1318050",
    "end": "1326000"
  },
  {
    "start": "1322000",
    "end": "1392000"
  },
  {
    "text": "request method is that it allows us to send the demand the ability to consume",
    "start": "1326000",
    "end": "1331310"
  },
  {
    "text": "from the consumer to the producer so for example demand is just",
    "start": "1331310",
    "end": "1336559"
  },
  {
    "text": "and what can we do with it let's say that D has sent a request for the next",
    "start": "1336559",
    "end": "1342169"
  },
  {
    "text": "five months to see how versus a bit slower so it sent three elements to b",
    "start": "1342169",
    "end": "1347240"
  },
  {
    "text": "and b it doesn't really matter what the performance it has because it decided to",
    "start": "1347240",
    "end": "1353139"
  },
  {
    "text": "keep up to the slowest consumer in each down stream and sent three messages to a",
    "start": "1353139",
    "end": "1359330"
  },
  {
    "text": "and this way we are able to adjust our i just our processing capabilities to the",
    "start": "1359330",
    "end": "1366860"
  },
  {
    "text": "slowest consumer so we don't overwhelm our application here because demand is",
    "start": "1366860",
    "end": "1373789"
  },
  {
    "text": "number it can be also splits and aggregated depending on our needs and it can be increased or decreased depending",
    "start": "1373789",
    "end": "1379399"
  },
  {
    "text": "on if we are dynamically adding or removing subscribers and this was a",
    "start": "1379399",
    "end": "1384470"
  },
  {
    "text": "great way of dealing with you know splitting the diamond across the",
    "start": "1384470",
    "end": "1390320"
  },
  {
    "text": "different stages and it turns out that this interface is easy enough and that",
    "start": "1390320",
    "end": "1397760"
  },
  {
    "text": "it can be used to represent the same processing logic that all of the",
    "start": "1397760",
    "end": "1403429"
  },
  {
    "text": "previous models have proposed so for example here's how to create an",
    "start": "1403429",
    "end": "1409669"
  },
  {
    "text": "observable in terms of reactive stream interfaces the magic happens in the",
    "start": "1409669",
    "end": "1415429"
  },
  {
    "text": "request long max value method and what it does mean it's essentially a part of",
    "start": "1415429",
    "end": "1420740"
  },
  {
    "text": "specifications which means i can as a consumer I'm not in fact my producer",
    "start": "1420740",
    "end": "1427940"
  },
  {
    "start": "1422000",
    "end": "1446000"
  },
  {
    "text": "that I don't care how many messages will it send to me because I'm sure that I",
    "start": "1427940",
    "end": "1432980"
  },
  {
    "text": "can process everyone every single one of them so I'm no longer as a producer I'm",
    "start": "1432980",
    "end": "1439070"
  },
  {
    "text": "no longer trying to count them I can just you know pull them on the full trust to the consumer other side we can",
    "start": "1439070",
    "end": "1448820"
  },
  {
    "start": "1446000",
    "end": "1483000"
  },
  {
    "text": "also create a syncing variables around reactive corrective streams because here",
    "start": "1448820",
    "end": "1454220"
  },
  {
    "text": "we basically can represent move and move",
    "start": "1454220",
    "end": "1459950"
  },
  {
    "text": "async and completeness async basically a request one and on next combination so",
    "start": "1459950",
    "end": "1467649"
  },
  {
    "text": "essentially it's grown innumerable is just like reactive stream that always requests a single element on",
    "start": "1467649",
    "end": "1474060"
  },
  {
    "text": "every single call and now we can ask can we do more actually and it turns we can",
    "start": "1474060",
    "end": "1482130"
  },
  {
    "text": "what about representing tasks themselves other active strings because task is",
    "start": "1482130",
    "end": "1487320"
  },
  {
    "start": "1483000",
    "end": "1547000"
  },
  {
    "text": "essentially a specialized version of reactive stream of iterator pattern it's",
    "start": "1487320",
    "end": "1494700"
  },
  {
    "text": "basically a stream that has only a single element so we can represent it that way and I'm not telling that you",
    "start": "1494700",
    "end": "1501750"
  },
  {
    "text": "have to that's to be clear however to be honest it already has been done in",
    "start": "1501750",
    "end": "1508710"
  },
  {
    "text": "dotnet in project reactor if I'm right there is something called mono which is a single element stream optimized for",
    "start": "1508710",
    "end": "1516450"
  },
  {
    "text": "this kind of competition and on Java it essentially on Java and the whole record",
    "start": "1516450",
    "end": "1522390"
  },
  {
    "text": "streams is now part of the standard library and if they are used for most of",
    "start": "1522390",
    "end": "1528870"
  },
  {
    "text": "the in synchronous computations there and most of the streaming libraries because they have many of them are",
    "start": "1528870",
    "end": "1535440"
  },
  {
    "text": "implementing wreckless streams as you know a common denominator to talk with each other as it's meant so if you have",
    "start": "1535440",
    "end": "1544620"
  },
  {
    "text": "some ideas I would encourage you to use it there is also think called our socket",
    "start": "1544620",
    "end": "1550920"
  },
  {
    "start": "1547000",
    "end": "1589000"
  },
  {
    "text": "which essentially takes this notion of demo in demand also things like",
    "start": "1550920",
    "end": "1556890"
  },
  {
    "text": "multiplexing and request response patterns and so on it put its all over the network on top of other protocols",
    "start": "1556890",
    "end": "1564930"
  },
  {
    "text": "like TCP WebSockets or Aaron if you know if you ever heard about this it was",
    "start": "1564930",
    "end": "1572400"
  },
  {
    "text": "called a few reactive socket in the first place however they decides to",
    "start": "1572400",
    "end": "1577980"
  },
  {
    "text": "change it to the air socket because reactive became so cool that word that they lost its original meaning",
    "start": "1577980",
    "end": "1583890"
  },
  {
    "text": "essentially so the it's now called air socket and if you will ever want to you",
    "start": "1583890",
    "end": "1590640"
  },
  {
    "start": "1589000",
    "end": "1641000"
  },
  {
    "text": "know create your own string library or just use reactive streams you can check their compatibility by using something",
    "start": "1590640",
    "end": "1597750"
  },
  {
    "text": "in dotnet it's called reactive streams TCK for the test compatibility kit and it's essentially a",
    "start": "1597750",
    "end": "1605440"
  },
  {
    "text": "nugget with a set of libraries you can inherit from and inject your own",
    "start": "1605440",
    "end": "1610479"
  },
  {
    "text": "implementation of your publisher our subscriber in order to test if it's",
    "start": "1610479",
    "end": "1615759"
  },
  {
    "text": "compatible with RAC the student specification because this specification has like I think 100 of points to",
    "start": "1615759",
    "end": "1622869"
  },
  {
    "text": "fulfill like things that you should not ever push messages when you have not",
    "start": "1622869",
    "end": "1628869"
  },
  {
    "text": "demanded for them on the other side and so on and so on but if you want you don't need to write this specification",
    "start": "1628869",
    "end": "1636089"
  },
  {
    "text": "compatibility test for yourself you can just pull this library and why lies ready and this was the part when we",
    "start": "1636089",
    "end": "1644289"
  },
  {
    "start": "1641000",
    "end": "1689000"
  },
  {
    "text": "talked about service provider interface here we will take another part which is",
    "start": "1644289",
    "end": "1649839"
  },
  {
    "text": "more practical examples where we will talk about academia streams which are",
    "start": "1649839",
    "end": "1656190"
  },
  {
    "text": "implementation of that pattern of the reactive streams over the actor model",
    "start": "1656190",
    "end": "1661419"
  },
  {
    "text": "and if you are not familiar with actor model it it's really nothing bad because",
    "start": "1661419",
    "end": "1667450"
  },
  {
    "text": "we will not talk about actors almost at all so as a specific implementations",
    "start": "1667450",
    "end": "1676869"
  },
  {
    "text": "there were some design decision in mind I just figure it out then so you know",
    "start": "1676869",
    "end": "1683469"
  },
  {
    "text": "it's not written and they are not always true because the those constraints can be relaxed one thing I would say that",
    "start": "1683469",
    "end": "1691209"
  },
  {
    "start": "1689000",
    "end": "1874000"
  },
  {
    "text": "this is the server side first library mostly because some of the operators",
    "start": "1691209",
    "end": "1696459"
  },
  {
    "text": "that are for example and represented in practice extensions are not here like",
    "start": "1696459",
    "end": "1702039"
  },
  {
    "text": "distinct because distinct would not work well on the server side when because you",
    "start": "1702039",
    "end": "1707169"
  },
  {
    "text": "will basically need to bash every single element that you ever saved in your stream and this is this doesn't sound",
    "start": "1707169",
    "end": "1715139"
  },
  {
    "text": "well in the situation when you have can have billions of those processes over",
    "start": "1715139",
    "end": "1721749"
  },
  {
    "text": "the day for example so out figure that this is the case another thing that this",
    "start": "1721749",
    "end": "1728889"
  },
  {
    "text": "is also created for long-running streams I mean like streams ranked at least four",
    "start": "1728889",
    "end": "1734229"
  },
  {
    "text": "seconds this is also not completely true because there is a way to tune it from code and",
    "start": "1734229",
    "end": "1744160"
  },
  {
    "text": "from configuration to actually and make it applicable also on the short living",
    "start": "1744160",
    "end": "1749740"
  },
  {
    "text": "streams it's built with predictability in mind so for example when you are",
    "start": "1749740",
    "end": "1756490"
  },
  {
    "text": "creating a server-side application and let's say your client has send you a",
    "start": "1756490",
    "end": "1762840"
  },
  {
    "text": "file file that contains some lines and you want to read those lines you know",
    "start": "1762840",
    "end": "1769930"
  },
  {
    "text": "read this file line by line have you ever checked how big buffer have you",
    "start": "1769930",
    "end": "1775750"
  },
  {
    "text": "allocated for the line that you are reading at the moment what if you have",
    "start": "1775750",
    "end": "1781420"
  },
  {
    "text": "thousands of clients that send you for example gigabyte sized file when there is only a",
    "start": "1781420",
    "end": "1788140"
  },
  {
    "text": "single line and needs to buffer it before reading it but for its entire entire message in the memory",
    "start": "1788140",
    "end": "1794830"
  },
  {
    "text": "you could also overflow your network so here for example a lot of the settings we are using require you to specify that",
    "start": "1794830",
    "end": "1803380"
  },
  {
    "text": "value explicitly before you will actually use it so it's a little reminder for you and",
    "start": "1803380",
    "end": "1810520"
  },
  {
    "text": "that those things exist and those things matters and also I started because here",
    "start": "1810520",
    "end": "1818580"
  },
  {
    "text": "we are representing publishers and subscribers as stages with connections",
    "start": "1818580",
    "end": "1824620"
  },
  {
    "text": "and there is always a limited number of connections so there is always a limited",
    "start": "1824620",
    "end": "1830020"
  },
  {
    "text": "number of subscribers that can be subscribed to a single publisher and so",
    "start": "1830020",
    "end": "1835810"
  },
  {
    "text": "on and so on and this number needs to be known ahead of time when you are creating your stream workflow and this",
    "start": "1835810",
    "end": "1844570"
  },
  {
    "text": "is also not entirely true because there is a thing called hubs which are",
    "start": "1844570",
    "end": "1850170"
  },
  {
    "text": "specialized version of stages that essentially they give you a point in",
    "start": "1850170",
    "end": "1857050"
  },
  {
    "text": "which you can dynamically add or remove subscribers but those are specific points in your entire workflow and you",
    "start": "1857050",
    "end": "1863380"
  },
  {
    "text": "cannot just add or remove subscribers at during the runtime execution and we will",
    "start": "1863380",
    "end": "1871400"
  },
  {
    "text": "come why in a second so just like we have this publisher process or",
    "start": "1871400",
    "end": "1877970"
  },
  {
    "start": "1874000",
    "end": "1914000"
  },
  {
    "text": "subscriber idea for reactive streams and akka streams they are called source flow",
    "start": "1877970",
    "end": "1883580"
  },
  {
    "text": "and sync with this distinction that as I've said they have a connection so",
    "start": "1883580",
    "end": "1889279"
  },
  {
    "text": "source can for example have many multiple in multiple outputs it's only producing messages flow essentially its",
    "start": "1889279",
    "end": "1897799"
  },
  {
    "text": "message transformer it can have more than one input and more than one output of it and think it's basically a final",
    "start": "1897799",
    "end": "1907070"
  },
  {
    "text": "message consumer so it only can consume messages from multiple inputs",
    "start": "1907070",
    "end": "1912350"
  },
  {
    "text": "potentially ok so now let's come to demo",
    "start": "1912350",
    "end": "1917870"
  },
  {
    "start": "1914000",
    "end": "2077000"
  },
  {
    "text": "I hope I haven't bored you to death",
    "start": "1917870",
    "end": "1922658"
  },
  {
    "text": "so here I'm using a link which is f",
    "start": "1928090",
    "end": "1933860"
  },
  {
    "text": "sharp wrapper library over akka so this",
    "start": "1933860",
    "end": "1939049"
  },
  {
    "text": "code will be in F sharp can you see it I",
    "start": "1939049",
    "end": "1943570"
  },
  {
    "text": "hope you can ok so the quick explanation",
    "start": "1944860",
    "end": "1950350"
  },
  {
    "text": "for I could happen we feels needs to create an actor system which is system",
    "start": "1950350",
    "end": "1955549"
  },
  {
    "text": "not creating a kink and this establishes a container for your actors because",
    "start": "1955549",
    "end": "1963460"
  },
  {
    "text": "whenever even if you are working with extremes they are materialized on the",
    "start": "1963460",
    "end": "1969740"
  },
  {
    "text": "actors underneath and then we are creating materializer I will talk about",
    "start": "1969740",
    "end": "1974990"
  },
  {
    "text": "it in a minute and then we when we are using a clean DSL to define our stream",
    "start": "1974990",
    "end": "1981590"
  },
  {
    "text": "essentially and here it's a very simple stream so we are taking finished number of elements map it three times",
    "start": "1981590",
    "end": "1988549"
  },
  {
    "text": "incrementing with each time then map it to the string and then printing in run",
    "start": "1988549",
    "end": "1994010"
  },
  {
    "text": "for each and the last thing is that we calling asynchronous synchronously",
    "start": "1994010",
    "end": "2000300"
  },
  {
    "text": "because essentially the whole API is designed to run over situation when we",
    "start": "2000300",
    "end": "2008200"
  },
  {
    "text": "have non Phoenix and number of elements so we don't know when you know this",
    "start": "2008200",
    "end": "2013690"
  },
  {
    "text": "source on the stream will complete and we don't want to block our current",
    "start": "2013690",
    "end": "2020020"
  },
  {
    "text": "threat for that to happen so you know",
    "start": "2020020",
    "end": "2029860"
  },
  {
    "text": "there are a lot of dependencies inside but yeah it works hopefully so as you",
    "start": "2029860",
    "end": "2037570"
  },
  {
    "text": "can see we just get numbers from 1 to 10 incremented them three times by one it's",
    "start": "2037570",
    "end": "2043870"
  },
  {
    "text": "not the same as incrementing them by three and then we printed them so this",
    "start": "2043870",
    "end": "2049090"
  },
  {
    "text": "is something like hello world in AK and",
    "start": "2049090",
    "end": "2055419"
  },
  {
    "text": "we will use it for future talk when we go to more advanced concepts you can't",
    "start": "2055419",
    "end": "2066220"
  },
  {
    "text": "sneak those okay so when you have a",
    "start": "2066220",
    "end": "2073179"
  },
  {
    "text": "glimpse of the code we'll take more advanced concepts in the minute we",
    "start": "2073179",
    "end": "2078190"
  },
  {
    "start": "2077000",
    "end": "2178000"
  },
  {
    "text": "should talk about a little bit how this 3 materialization process works because",
    "start": "2078190",
    "end": "2083770"
  },
  {
    "text": "I'm talking about it from the quite while and you haven't probably heard of",
    "start": "2083770",
    "end": "2089200"
  },
  {
    "text": "it before so essentially and the whole stream execution can be modeled as a",
    "start": "2089200",
    "end": "2095470"
  },
  {
    "text": "combination of two things one is the shape shape is what we are creating",
    "start": "2095470",
    "end": "2101140"
  },
  {
    "text": "using this DSL in this link like DSL because in a sharp it would look like a",
    "start": "2101140",
    "end": "2106660"
  },
  {
    "text": "cone essentially and what is important is that this shape doesn't actually",
    "start": "2106660",
    "end": "2113940"
  },
  {
    "text": "execute anything it's only a blueprint mental as a mental model on how our",
    "start": "2113940",
    "end": "2122230"
  },
  {
    "text": "streams should be executed once we it will be executing and this is why I was",
    "start": "2122230",
    "end": "2127450"
  },
  {
    "text": "talking that this configuration of your stream needs to be static because in order to",
    "start": "2127450",
    "end": "2133940"
  },
  {
    "text": "execute it we want to have a complete picture of how our stream will look like",
    "start": "2133940",
    "end": "2139090"
  },
  {
    "text": "and when I'm talking stream I actually mean graphs because I classrooms is all",
    "start": "2139090",
    "end": "2144920"
  },
  {
    "text": "about graphs but dreams our flaws are essentially very simplified version of",
    "start": "2144920",
    "end": "2151580"
  },
  {
    "text": "graphs and once we have or you know inputs and outputs connected we are",
    "start": "2151580",
    "end": "2156890"
  },
  {
    "text": "ready for the mark materialization process to occur and for that we need a materializer which is essentially a",
    "start": "2156890",
    "end": "2164680"
  },
  {
    "text": "component that is taking this blueprint and executing it on the actual machine",
    "start": "2164680",
    "end": "2169700"
  },
  {
    "text": "and what is what is quite nice here is that this patterns well-known in",
    "start": "2169700",
    "end": "2177050"
  },
  {
    "text": "functional programming it's known as free Minaj yay there is a manat word in",
    "start": "2177050",
    "end": "2183530"
  },
  {
    "start": "2178000",
    "end": "2264000"
  },
  {
    "text": "this talk depending on if you are functional or object oriented person you",
    "start": "2183530",
    "end": "2189290"
  },
  {
    "text": "might be at excited or terrified so don't worry because there is a very",
    "start": "2189290",
    "end": "2195620"
  },
  {
    "text": "similar pattern in gunk of four books and it's called interpreter pattern and",
    "start": "2195620",
    "end": "2201050"
  },
  {
    "text": "if this still doesn't give you eye relief you probably if you are social",
    "start": "2201050",
    "end": "2206870"
  },
  {
    "text": "developer you probably have used iqueryable for quite a while and this is an essentially very similar pattern to",
    "start": "2206870",
    "end": "2213110"
  },
  {
    "text": "that however in iqueryable your query abel is essentially a monad and it has some",
    "start": "2213110",
    "end": "2220970"
  },
  {
    "text": "implicit embedded fields and containing the interpreter which is known there as",
    "start": "2220970",
    "end": "2226310"
  },
  {
    "text": "a query provider here we are calling it materializer and we are putting them out",
    "start": "2226310",
    "end": "2234890"
  },
  {
    "text": "of the shape itself outside and we need to provide them explicitly in order to",
    "start": "2234890",
    "end": "2240650"
  },
  {
    "text": "avoid accidental materialization which can happen and is happening actually in",
    "start": "2240650",
    "end": "2246050"
  },
  {
    "text": "day to day code when you are executing variables because it's no nothing either",
    "start": "2246050",
    "end": "2251330"
  },
  {
    "text": "that queered the entire table and called to this before making a paging over that",
    "start": "2251330",
    "end": "2256700"
  },
  {
    "text": "list you know so we don't do that here and it's not possible even to compile",
    "start": "2256700",
    "end": "2263800"
  },
  {
    "start": "2264000",
    "end": "2438000"
  },
  {
    "text": "okay so another thing why materialization is important is that we",
    "start": "2264100",
    "end": "2270500"
  },
  {
    "text": "can provide a virus way of interpreting our blueprint into real life essentially",
    "start": "2270500",
    "end": "2276200"
  },
  {
    "text": "and for example in a female version of vodka there are three materialized errs the default one the phasing materializer",
    "start": "2276200",
    "end": "2282620"
  },
  {
    "text": "which essentially is designed to work with short living streams and it's",
    "start": "2282620",
    "end": "2288050"
  },
  {
    "text": "focused more on making materialization processes faster because it can take a",
    "start": "2288050",
    "end": "2293900"
  },
  {
    "text": "while because of those optimizations and you have a gear pump materializer which essentially essentially takes your",
    "start": "2293900",
    "end": "2300740"
  },
  {
    "text": "blueprint and pic picks the points in which you can for example spread your",
    "start": "2300740",
    "end": "2305810"
  },
  {
    "text": "graph execution graph on the entire cluster of machines and all of them",
    "start": "2305810",
    "end": "2312050"
  },
  {
    "text": "works over the same basically in the same blueprint but they are doing very",
    "start": "2312050",
    "end": "2317810"
  },
  {
    "text": "different things here and what is what else is important here is that given the",
    "start": "2317810",
    "end": "2324410"
  },
  {
    "text": "entire shape giving basically at the materialization moment in the mount when",
    "start": "2324410",
    "end": "2332000"
  },
  {
    "text": "we are materializing it we can take a look at it and do some optimization the simplest one are for example picking cab",
    "start": "2332000",
    "end": "2340370"
  },
  {
    "text": "identity operation so operation that doesn't do anything essentially it takes",
    "start": "2340370",
    "end": "2345380"
  },
  {
    "text": "a lemon from the input and puts it on the output you can erase those another thing is related to acing wonderous and",
    "start": "2345380",
    "end": "2352190"
  },
  {
    "text": "this is very specific for akka so far because we have different kind of stages",
    "start": "2352190",
    "end": "2359810"
  },
  {
    "text": "the simplest one like where select or in case of f-sharp filter map can be as",
    "start": "2359810",
    "end": "2366380"
  },
  {
    "text": "well executed synchronously and in the past every single stage in akka was",
    "start": "2366380",
    "end": "2374090"
  },
  {
    "text": "executed on its own separate actor but this was quite an expensive process because even if communication between",
    "start": "2374090",
    "end": "2380900"
  },
  {
    "text": "actresses fast it's not enough fast it's not as fast actually as you know",
    "start": "2380900",
    "end": "2386840"
  },
  {
    "text": "basically taking input output from the one stage and putting it on the input on the another stage right away so what we",
    "start": "2386840",
    "end": "2395370"
  },
  {
    "text": "we can take a look and pick the stages that could potentially be executed in a",
    "start": "2395370",
    "end": "2402090"
  },
  {
    "text": "synchronous fashions potentially are multiple threats map async which takes",
    "start": "2402090",
    "end": "2407220"
  },
  {
    "text": "an input and returns async of output is one of them another one would be for",
    "start": "2407220",
    "end": "2412680"
  },
  {
    "text": "example group by because if we are spreading the operation on the you know some space of sub streams we could as",
    "start": "2412680",
    "end": "2420510"
  },
  {
    "text": "well make it multi-threaded by and by default by nature and we put a Singh",
    "start": "2420510",
    "end": "2427620"
  },
  {
    "text": "wonderous on those places so what we are left with are bunches of operations that",
    "start": "2427620",
    "end": "2434310"
  },
  {
    "text": "can be executed synchronously and what's is coming then it's a phasing fusing",
    "start": "2434310",
    "end": "2439410"
  },
  {
    "text": "sorry so instead of executing every stage on its own we can merge them",
    "start": "2439410",
    "end": "2445500"
  },
  {
    "text": "together and then execute and I'm on the single actors so this way those operations are becoming way way easier",
    "start": "2445500",
    "end": "2454380"
  },
  {
    "text": "to execute and they are way light we're way more lightweight because essentially",
    "start": "2454380",
    "end": "2460040"
  },
  {
    "text": "right now the overhead is minimal it's almost like you are ranked for loop in",
    "start": "2460040",
    "end": "2465960"
  },
  {
    "text": "this case so what what can we do with it",
    "start": "2465960",
    "end": "2475370"
  },
  {
    "start": "2469000",
    "end": "2535000"
  },
  {
    "text": "essentially like a DSL provides around",
    "start": "2475370",
    "end": "2480470"
  },
  {
    "text": "140 or maybe to false 200 different",
    "start": "2480470",
    "end": "2485670"
  },
  {
    "text": "stages right now for making different kinds of operations and what it's nice here is that we can reuse them in",
    "start": "2485670",
    "end": "2492210"
  },
  {
    "text": "different contexts one of the context is aging streams IO which is basically",
    "start": "2492210",
    "end": "2499860"
  },
  {
    "text": "building a circuit server TCP or TCP socket server over the actors and what",
    "start": "2499860",
    "end": "2507390"
  },
  {
    "text": "it does for us is that it handles all of the duty parts which are related with",
    "start": "2507390",
    "end": "2513900"
  },
  {
    "text": "working with sockets if you want to work with them by yourself so it's it's",
    "start": "2513900",
    "end": "2520560"
  },
  {
    "text": "handling things like multi-threading buffer pool management and any anything",
    "start": "2520560",
    "end": "2525840"
  },
  {
    "text": "like that for you it's quite similar to what Microsoft done lately with system IR",
    "start": "2525840",
    "end": "2531660"
  },
  {
    "text": "pipelines and I think that we can demo it right here because it's a little bit",
    "start": "2531660",
    "end": "2539310"
  },
  {
    "text": "exciting for me okay so let's go to the",
    "start": "2539310",
    "end": "2547530"
  },
  {
    "text": "where's the mouse okay so close that one and let's see how",
    "start": "2547530",
    "end": "2557520"
  },
  {
    "text": "for example a TCP server looks like we'll start from the bottom essentially",
    "start": "2557520",
    "end": "2564090"
  },
  {
    "text": "we are creating a TCP stream we are binding keys to a specific port and",
    "start": "2564090",
    "end": "2569450"
  },
  {
    "text": "endpoint and what we have in the result is the source that is producing a new",
    "start": "2569450",
    "end": "2575970"
  },
  {
    "text": "connection new connection event for every single client that that is",
    "start": "2575970",
    "end": "2581280"
  },
  {
    "text": "connecting to our and to our server and what you can do here is essentially",
    "start": "2581280",
    "end": "2586410"
  },
  {
    "text": "running a forage it's synchronous for each because in the connection itself",
    "start": "2586410",
    "end": "2591960"
  },
  {
    "text": "there is also a flow so we have a flow of flows essentially flow in the",
    "start": "2591960",
    "end": "2597180"
  },
  {
    "text": "connection is representing the circuit itself because if you think about socket it's essentially a flow which basically",
    "start": "2597180",
    "end": "2604320"
  },
  {
    "text": "takes some inputs and set it into another machine over the connection over the disconnection and for every incoming",
    "start": "2604320",
    "end": "2611820"
  },
  {
    "text": "message from the in the from the TCP connection it is sending it as some bytes chunk in the output and this is",
    "start": "2611820",
    "end": "2619020"
  },
  {
    "text": "what we have here essentially so graph",
    "start": "2619020",
    "end": "2625560"
  },
  {
    "text": "Ron Matz is essentially running a graph over the motor over some given",
    "start": "2625560",
    "end": "2630600"
  },
  {
    "text": "materializer and this is this explicit phase Y graph because every as I said",
    "start": "2630600",
    "end": "2636030"
  },
  {
    "text": "everything here is graph and what flow join is it basically takes two flows and",
    "start": "2636030",
    "end": "2641280"
  },
  {
    "text": "combines them so we have a closed circuit here complete graph with no you",
    "start": "2641280",
    "end": "2646710"
  },
  {
    "text": "know lose endpoints and what we eat here",
    "start": "2646710",
    "end": "2651930"
  },
  {
    "text": "is essentially what we are left with is essentially a handler what is the handler",
    "start": "2651930",
    "end": "2659180"
  },
  {
    "text": "the simplest handler version is essentially that slow empty or flow ID",
    "start": "2660599",
    "end": "2666640"
  },
  {
    "text": "and it would work as an eco server because it's takes an input and puts it",
    "start": "2666640",
    "end": "2672910"
  },
  {
    "text": "on the out but here we want to make something for what I want to do here is",
    "start": "2672910",
    "end": "2678789"
  },
  {
    "text": "essentially take a line of input from user as you know log it add some suffix",
    "start": "2678789",
    "end": "2687520"
  },
  {
    "text": "in those three bank operators on the end of it and put it back to the server so",
    "start": "2687520",
    "end": "2692859"
  },
  {
    "text": "it's eco it's extra parts and for this we need a frame delimiter because as you",
    "start": "2692859",
    "end": "2698740"
  },
  {
    "text": "may know the and the socket and TCP in specific are not working over the",
    "start": "2698740",
    "end": "2704770"
  },
  {
    "text": "messages there is no notion of message in TCP you have data frames those data frames can be the same length as your",
    "start": "2704770",
    "end": "2712240"
  },
  {
    "text": "messages but they can be you know shorter or longer so what the frame",
    "start": "2712240",
    "end": "2718119"
  },
  {
    "text": "delimiter is and what it does it's essentially a flow it's essentially a flow which picks byte strings from the",
    "start": "2718119",
    "end": "2727059"
  },
  {
    "text": "input tab and buffers them as long as it is trying to find the delimiter here",
    "start": "2727059",
    "end": "2733960"
  },
  {
    "text": "it's a newline symbol so when it found that it's splitting those byte strings",
    "start": "2733960",
    "end": "2741250"
  },
  {
    "text": "and it's concatenating you know the first part together as a single new",
    "start": "2741250",
    "end": "2746589"
  },
  {
    "text": "single byte string and it's pushing it along in the way so let's execute it",
    "start": "2746589",
    "end": "2752880"
  },
  {
    "text": "and I will send some message states I will use tell it here and the port was",
    "start": "2760760",
    "end": "2776030"
  },
  {
    "text": "five thousand five incorrect okay yay I",
    "start": "2776030",
    "end": "2785920"
  },
  {
    "text": "don't know if you can see it I wrote hell and the sea and I've got hell on the sea with free banks and also I vlog",
    "start": "2785920",
    "end": "2793430"
  },
  {
    "text": "it's here and I've got information that the client has been accepted I used the",
    "start": "2793430",
    "end": "2799190"
  },
  {
    "text": "wrong end point sorry because with connection you have two of them actually",
    "start": "2799190",
    "end": "2804470"
  },
  {
    "text": "one is the remote endpoint and one is the local one and I think I've used the",
    "start": "2804470",
    "end": "2810230"
  },
  {
    "text": "wrong one yeah local address I should use the remote others here sorry and",
    "start": "2810230",
    "end": "2815350"
  },
  {
    "text": "okay so this was the example for the server side the client side is also",
    "start": "2815350",
    "end": "2821720"
  },
  {
    "text": "quite simple because I think that this is actually quite simple because once you will realize how to build things in",
    "start": "2821720",
    "end": "2829520"
  },
  {
    "text": "terms of streams you can apply this knowledge basically everywhere because",
    "start": "2829520",
    "end": "2834620"
  },
  {
    "text": "streams are comfortable and they are composing very well in very different scenarios so the client is essentially a",
    "start": "2834620",
    "end": "2841700"
  },
  {
    "text": "source that is sending a single message hello and see also what we are receiving we are essentially printing on the",
    "start": "2841700",
    "end": "2850370"
  },
  {
    "text": "client side this map what Matt value would not happen in c-sharp because and",
    "start": "2850370",
    "end": "2856730"
  },
  {
    "text": "this is related in the West how we decided to you know use there is a",
    "start": "2856730",
    "end": "2862550"
  },
  {
    "text": "thinking akka that it's called not used type and it's essentially the type that",
    "start": "2862550",
    "end": "2869270"
  },
  {
    "text": "doesn't do anything and in F sharp we are using heat so this is where to map",
    "start": "2869270",
    "end": "2874610"
  },
  {
    "text": "one to another what now we are considering the flow",
    "start": "2874610",
    "end": "2881940"
  },
  {
    "text": "from it because we can give it a sink and source we can combine them and create the flow this way and then on we",
    "start": "2881940",
    "end": "2889140"
  },
  {
    "text": "are creating outgoing connection we are combining it with our flow and we are",
    "start": "2889140",
    "end": "2896100"
  },
  {
    "text": "writing it and I think that I've killed the server so I will run quite okay yeah",
    "start": "2896100",
    "end": "2912150"
  },
  {
    "text": "and here is the client I will run it and",
    "start": "2912150",
    "end": "2921390"
  },
  {
    "text": "yes there is a hello and see also and",
    "start": "2921390",
    "end": "2926480"
  },
  {
    "text": "also we got it here so yeah this phone is working fine so right now come back",
    "start": "2926480",
    "end": "2936480"
  },
  {
    "text": "to our presentation sorry for that I",
    "start": "2936480",
    "end": "2947150"
  },
  {
    "text": "think we won't need it anymore okay so I was referring to this notion of",
    "start": "2947150",
    "end": "2954540"
  },
  {
    "start": "2950000",
    "end": "3042000"
  },
  {
    "text": "byte strings and the case here is that what the bard string actually are and",
    "start": "2954540",
    "end": "2960540"
  },
  {
    "text": "what they are is the abstraction we put on the monitor buffer pools because",
    "start": "2960540",
    "end": "2965640"
  },
  {
    "text": "essentially what we would like to work with is thinking about them as single",
    "start": "2965640",
    "end": "2971880"
  },
  {
    "text": "continuous you know space in the memory however this is not applicable in the",
    "start": "2971880",
    "end": "2977970"
  },
  {
    "text": "real life because we will need to copy different chunks of strings if we want",
    "start": "2977970",
    "end": "2983160"
  },
  {
    "text": "to combine them and so on so bytes drink is essentially from the outer point of view it's a single",
    "start": "2983160",
    "end": "2992010"
  },
  {
    "text": "continuous remember that is immutable and what we can do with it we can slice",
    "start": "2992010",
    "end": "2998730"
  },
  {
    "text": "it we can combine them and give and take another bite seems however underneath is",
    "start": "2998730",
    "end": "3004990"
  },
  {
    "text": "actually represented as something like read a a read-only list of read-only",
    "start": "3004990",
    "end": "3010830"
  },
  {
    "text": "pants I would say so we have lists pointing on some frames of memory and",
    "start": "3010830",
    "end": "3018090"
  },
  {
    "text": "when we are actually slicing and combining our streams we are just moving",
    "start": "3018090",
    "end": "3024090"
  },
  {
    "text": "those pointers along without actually copying any memory buffers this way this",
    "start": "3024090",
    "end": "3030510"
  },
  {
    "text": "way we can be quite fast and doesn't in don't allocate too much because we are",
    "start": "3030510",
    "end": "3037020"
  },
  {
    "text": "just you know moving the pointers all along the way so the next thing is",
    "start": "3037020",
    "end": "3043170"
  },
  {
    "start": "3042000",
    "end": "3133000"
  },
  {
    "text": "called beautiful me to flow is essentially a flow that have two inputs",
    "start": "3043170",
    "end": "3049170"
  },
  {
    "text": "and two outputs pointing in the reverse directions and while it's so great",
    "start": "3049170",
    "end": "3055020"
  },
  {
    "text": "because this is the way that we can combine something like web parts from suave HPP hundreds from giraffe because",
    "start": "3055020",
    "end": "3064500"
  },
  {
    "text": "BT flow can be combined for example with another flow and create a flow in the results to be D flows can be combined",
    "start": "3064500",
    "end": "3070860"
  },
  {
    "text": "together beautiful and what we can do with that if we have if you are able to",
    "start": "3070860",
    "end": "3076770"
  },
  {
    "text": "represent TCP so and socket connection as a flow we could use for example BD float and to represent TLS over that",
    "start": "3076770",
    "end": "3084420"
  },
  {
    "text": "then we can use another component which would which would be a BD flow and apply",
    "start": "3084420",
    "end": "3090270"
  },
  {
    "text": "for example HTTP layer over that then takes some authorization layer over that",
    "start": "3090270",
    "end": "3095940"
  },
  {
    "text": "and we could combine those layers together in forms of BD flaws but this",
    "start": "3095940",
    "end": "3101610"
  },
  {
    "text": "is not in the only applicable solutions for example we could create a beautiful oh that is working as connection as",
    "start": "3101610",
    "end": "3110450"
  },
  {
    "text": "adaptation layer from our even source stream that is basically mapping events",
    "start": "3110450",
    "end": "3118770"
  },
  {
    "text": "from the older versions to the newer versions that we are actually using the applicable solutions are many and this",
    "start": "3118770",
    "end": "3126630"
  },
  {
    "text": "is basically the power of composability itself in the peers for marketing so I",
    "start": "3126630",
    "end": "3134490"
  },
  {
    "text": "was talking about the graphs and another applicable case is building the entire",
    "start": "3134490",
    "end": "3140130"
  },
  {
    "text": "graph and that it's not you know see a single flow solution but it can also",
    "start": "3140130",
    "end": "3146850"
  },
  {
    "text": "have you know multiple consumers multiple producers and what it's more",
    "start": "3146850",
    "end": "3152760"
  },
  {
    "text": "important here a cadet net has it's one of the very few solutions that allow you to build and",
    "start": "3152760",
    "end": "3158880"
  },
  {
    "text": "include cyclic graphs in your solution so we can build a feedback loops here",
    "start": "3158880",
    "end": "3164480"
  },
  {
    "text": "and because we have not enough time I will present a very simple example of",
    "start": "3164480",
    "end": "3173940"
  },
  {
    "start": "3165000",
    "end": "3315000"
  },
  {
    "text": "how graph DSL works okay so how does it",
    "start": "3173940",
    "end": "3186240"
  },
  {
    "text": "look like here we are creating a graph",
    "start": "3186240",
    "end": "3191480"
  },
  {
    "text": "this is essentially this part of code it's very specific for a link because",
    "start": "3191480",
    "end": "3196680"
  },
  {
    "text": "you know you cannot build a custom interfaces since custom operators in C shop and what we are creating here is",
    "start": "3196680",
    "end": "3202920"
  },
  {
    "text": "basically graph wood which starts from a single source and has a single sink on",
    "start": "3202920",
    "end": "3210240"
  },
  {
    "text": "the other end and in between it basically is mapping and the values and",
    "start": "3210240",
    "end": "3216119"
  },
  {
    "text": "printing them and then putting the same value to the to the feedback loop back",
    "start": "3216119",
    "end": "3221220"
  },
  {
    "text": "to the before the flow actually executed and this can be represented this way so",
    "start": "3221220",
    "end": "3228080"
  },
  {
    "text": "from source we connect to merge flow mouth stage which then connects to the",
    "start": "3228080",
    "end": "3233609"
  },
  {
    "text": "flow which then connects to broadcast what our merge and broadcast merge is",
    "start": "3233609",
    "end": "3239010"
  },
  {
    "text": "essentially a stage that is speaking in one input and two input sorry and",
    "start": "3239010",
    "end": "3245570"
  },
  {
    "text": "combining them into one output and broadcast on the other way around so one input two outputs and here we are",
    "start": "3245570",
    "end": "3254480"
  },
  {
    "text": "combining for example broadcast match preferred means that before we will take",
    "start": "3254480",
    "end": "3260250"
  },
  {
    "text": "a look at any other you know input from our match we always pick preferred as a",
    "start": "3260250",
    "end": "3265680"
  },
  {
    "text": "first and what we will create this way we only send a single message from the",
    "start": "3265680",
    "end": "3272550"
  },
  {
    "text": "source inside and you will see what will happen we basically have infinite loop because",
    "start": "3272550",
    "end": "3281799"
  },
  {
    "text": "we never pick this message from from this feedback loop and we always are",
    "start": "3281799",
    "end": "3289099"
  },
  {
    "text": "putting kids back again so even though we send only a single even inside we",
    "start": "3289099",
    "end": "3295099"
  },
  {
    "text": "have you know basically infinite circle here and this is also why it's important",
    "start": "3295099",
    "end": "3301249"
  },
  {
    "text": "to actually remember that this is a very risky case for you and it should be",
    "start": "3301249",
    "end": "3308059"
  },
  {
    "text": "tested thoroughly but it's possible it's possible to work this way",
    "start": "3308059",
    "end": "3313869"
  },
  {
    "text": "so since okay the next thing I want to",
    "start": "3314470",
    "end": "3320720"
  },
  {
    "start": "3315000",
    "end": "3370000"
  },
  {
    "text": "present you is how to use the same semantics the same string semantics for acha persistence query and for those of",
    "start": "3320720",
    "end": "3327799"
  },
  {
    "text": "you who don't know acha persistence itself is a plugin that allows you to create persistent actors and that are",
    "start": "3327799",
    "end": "3335749"
  },
  {
    "text": "storing their state through sequence of state changes so Evan's Evan's and what",
    "start": "3335749",
    "end": "3342979"
  },
  {
    "text": "we have here is basically a native support for even sourcing so every single state change over the actor is",
    "start": "3342979",
    "end": "3350660"
  },
  {
    "text": "stored as an event in some kind of two gable database and what a capper system",
    "start": "3350660",
    "end": "3356359"
  },
  {
    "text": "square is it allows us to read those events as a streams of data so another",
    "start": "3356359",
    "end": "3364400"
  },
  {
    "text": "example",
    "start": "3364400",
    "end": "3366548"
  },
  {
    "text": "so here we are creating a simple actor oh sorry",
    "start": "3369869",
    "end": "3377040"
  },
  {
    "start": "3370000",
    "end": "3485000"
  },
  {
    "text": "okay so here we are creating a simple actor it can take one type of comment",
    "start": "3377040",
    "end": "3385180"
  },
  {
    "text": "and one type of event comment is order item which in turn will persist our item",
    "start": "3385180",
    "end": "3390970"
  },
  {
    "text": "orders event in the persistent storage and item ordered is essentially an even",
    "start": "3390970",
    "end": "3398590"
  },
  {
    "text": "that we want to reply from then we are creating a source because I don't want",
    "start": "3398590",
    "end": "3404380"
  },
  {
    "text": "to put those values put those comments manually so I'm creating a source in",
    "start": "3404380",
    "end": "3412150"
  },
  {
    "text": "which I will trigger every single second this actor to store the new event site",
    "start": "3412150",
    "end": "3417460"
  },
  {
    "text": "and then I am creating a source from this event stream and what is nice here",
    "start": "3417460",
    "end": "3425859"
  },
  {
    "text": "is that this stream is essentially implication of the live query and what",
    "start": "3425859",
    "end": "3433210"
  },
  {
    "text": "I'm using kids here as a persistent storage is a sequel server so wait a",
    "start": "3433210",
    "end": "3438460"
  },
  {
    "text": "second what do we have here is a stream",
    "start": "3438460",
    "end": "3443530"
  },
  {
    "text": "that is reading events as they will come here back to us I'm we started from 44",
    "start": "3443530",
    "end": "3451390"
  },
  {
    "text": "simply because I haven't clean up the table in the database when I was during",
    "start": "3451390",
    "end": "3456700"
  },
  {
    "text": "those events before this demo so yeah we are sending those values back again and",
    "start": "3456700",
    "end": "3463210"
  },
  {
    "text": "we are reading them as they come up as they are stored by our our class our",
    "start": "3463210",
    "end": "3469660"
  },
  {
    "text": "actor essentially so yeah we can build",
    "start": "3469660",
    "end": "3475869"
  },
  {
    "text": "live streams over the databases that don't support this out of the box",
    "start": "3475869",
    "end": "3484140"
  },
  {
    "start": "3485000",
    "end": "3600000"
  },
  {
    "text": "another case and we are close to the end there is the one last thing I wanted to",
    "start": "3485340",
    "end": "3492730"
  },
  {
    "text": "show you which is stream reps and this is something that doesn't exist yet in",
    "start": "3492730",
    "end": "3499210"
  },
  {
    "text": "AK as you can download it from Naga it's something that will be part of one",
    "start": "3499210",
    "end": "3504990"
  },
  {
    "text": "point for release and three minutes are essentially the same thing that actor",
    "start": "3504990",
    "end": "3511890"
  },
  {
    "text": "reps are four normal actors so they are handlers or references to the stream that can be sterilized and the seller",
    "start": "3511890",
    "end": "3519000"
  },
  {
    "text": "lies over the network materialized on the other side in different actors",
    "start": "3519000",
    "end": "3524130"
  },
  {
    "text": "system and they will still connect to old basically old one old actor system",
    "start": "3524130",
    "end": "3530250"
  },
  {
    "text": "and stream that lives there they are safely typed and they have back performing on expecting so in order to",
    "start": "3530250",
    "end": "3538560"
  },
  {
    "text": "present that I will unfortunately need to turn to visual studio and shoe shop",
    "start": "3538560",
    "end": "3545580"
  },
  {
    "text": "and what we are doing here sorry I hope",
    "start": "3545580",
    "end": "3558180"
  },
  {
    "text": "you can see it here is our producer where have a simple actor that for when",
    "start": "3558180",
    "end": "3565860"
  },
  {
    "text": "we request it will return a source ref so-called source right back to the back",
    "start": "3565860",
    "end": "3571950"
  },
  {
    "text": "to its original sender and in the source ref it will also make a tick every single second and what we have on the",
    "start": "3571950",
    "end": "3579690"
  },
  {
    "text": "other side in the another actor system is that we essentially ask for that act",
    "start": "3579690",
    "end": "3589380"
  },
  {
    "text": "and ask that actor to get a sole source from it and we materialize it on the",
    "start": "3589380",
    "end": "3595109"
  },
  {
    "text": "other hand on the other end of the application on the another process essentially so let's run it",
    "start": "3595109",
    "end": "3603290"
  },
  {
    "text": "does it work oh sorry it works but you",
    "start": "3605980",
    "end": "3611410"
  },
  {
    "text": "can see it mm-hmm this is the processor and this is the",
    "start": "3611410",
    "end": "3619660"
  },
  {
    "text": "consumer so yeah we have two different processes when stream is spanned over",
    "start": "3619660",
    "end": "3626560"
  },
  {
    "text": "the network between different different processes different systems and probably different motions so yeah this was the",
    "start": "3626560",
    "end": "3635080"
  },
  {
    "text": "example and the last thing thank you and",
    "start": "3635080",
    "end": "3641950"
  },
  {
    "text": "I wanted to thank every single one of the contributors because a.net is a community driven project and",
    "start": "3641950",
    "end": "3650080"
  },
  {
    "text": "without contributors without your help we couldn't make it we also I also wanted to help every",
    "start": "3650080",
    "end": "3655750"
  },
  {
    "text": "person who make a back issue on the github and help us to make this frame of",
    "start": "3655750",
    "end": "3661990"
  },
  {
    "text": "matter and actually usable on the production so thank you very much [Applause]",
    "start": "3661990",
    "end": "3672249"
  }
]