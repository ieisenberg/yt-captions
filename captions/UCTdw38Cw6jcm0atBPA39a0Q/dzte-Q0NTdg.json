[
  {
    "text": "uh welcome everyone session after lunch on a Friday",
    "start": "900",
    "end": "7640"
  },
  {
    "text": "uh my name is Nuri um I'm a I was a Microsoft data platform MVP I'm",
    "start": "7680",
    "end": "16198"
  },
  {
    "text": "also a mongodb champion uh and this talk is about uh mql the query language",
    "start": "16199",
    "end": "23000"
  },
  {
    "text": "but taking it from maybe a different kind of angle of looking at it from a",
    "start": "23000",
    "end": "29760"
  },
  {
    "text": "kind of shape perspective trying to get kind of an intuitive access to what the",
    "start": "29760",
    "end": "35340"
  },
  {
    "text": "aggregation pipeline is doing uh to help kind of get into thinking of pipelines",
    "start": "35340",
    "end": "42360"
  },
  {
    "text": "not in terms of just the syntax and what do I type but in terms of what is actually happening under the scenes and",
    "start": "42360",
    "end": "48660"
  },
  {
    "text": "what is the kind of transform that occurs from the beginning uh where you",
    "start": "48660",
    "end": "53700"
  },
  {
    "text": "know you run your career in documents are a certain way to your results which is what you are interested in getting",
    "start": "53700",
    "end": "59219"
  },
  {
    "text": "out of so this is uh kind of how this talk is structured uh so we're",
    "start": "59219",
    "end": "65400"
  },
  {
    "text": "going to talk a little bit just to get into this um uh just talk about the humans and",
    "start": "65400",
    "end": "72659"
  },
  {
    "text": "patterns and stuff like that and we're going to talk about the major pipeline operators",
    "start": "72659",
    "end": "78540"
  },
  {
    "text": "um what are the key syntax elements that help you perform the queries and instead",
    "start": "78540",
    "end": "85799"
  },
  {
    "text": "of Hands-On practice by your own uh there will be a URL and you can follow",
    "start": "85799",
    "end": "91439"
  },
  {
    "text": "along or after the conference you can go and look at my GitHub and there's like",
    "start": "91439",
    "end": "97500"
  },
  {
    "text": "these exercises I will go through them for you on your behalf or with your help but you can do them afterwards uh this",
    "start": "97500",
    "end": "106560"
  },
  {
    "text": "is more for kind of Workshop style so you can really learn by doing",
    "start": "106560",
    "end": "113040"
  },
  {
    "text": "and we'll talk about performance considerations also about um what what to do to optimize your",
    "start": "113040",
    "end": "120840"
  },
  {
    "text": "query so that they will run more efficiently less resources",
    "start": "120840",
    "end": "126119"
  },
  {
    "text": "so why patterns why not just go into syntax so patterns um are kind of useful because we're",
    "start": "126119",
    "end": "133680"
  },
  {
    "text": "human and psychologically we have this kind of behavior chain model that we operate",
    "start": "133680",
    "end": "140640"
  },
  {
    "text": "under um it's a theory right it doesn't mean we work this way but it does mean that you",
    "start": "140640",
    "end": "147300"
  },
  {
    "text": "know people in the science of psychology decided that this is a good representation of what is happening when",
    "start": "147300",
    "end": "153720"
  },
  {
    "text": "you have a thought process we have a trigger something that occurs it could be an internal or external trigger and",
    "start": "153720",
    "end": "160140"
  },
  {
    "text": "then we have a thought that comes into our head because of the trigger and then we can act",
    "start": "160140",
    "end": "166739"
  },
  {
    "text": "and for example if we have something like this in front of us and that will be",
    "start": "166739",
    "end": "173340"
  },
  {
    "text": "your trigger what's going to happen next anybody",
    "start": "173340",
    "end": "179580"
  },
  {
    "text": "show hands we kind of recognize this right this was here somewhere",
    "start": "179580",
    "end": "185459"
  },
  {
    "text": "and the next move is maybe this winning tic-tac-toe or you saw it on other X",
    "start": "185459",
    "end": "190620"
  },
  {
    "text": "which also could be but same thing the thing is our brain recognize the pattern and automatically new to focus on that",
    "start": "190620",
    "end": "198540"
  },
  {
    "text": "bottom right how much thinking was involved in that not at all right",
    "start": "198540",
    "end": "205379"
  },
  {
    "text": "you recognize it so well the trigger just goes the thought in your head is automatically",
    "start": "205379",
    "end": "211319"
  },
  {
    "text": "doing this and then the action is put a symbol in there that's the winning move",
    "start": "211319",
    "end": "219200"
  },
  {
    "text": "so what if we took this kind of pattern matching that is built into us and try to use",
    "start": "221159",
    "end": "229260"
  },
  {
    "text": "that leverage it in order to learn the syntax of the aggregation framework we",
    "start": "229260",
    "end": "234900"
  },
  {
    "text": "can just observe and then react automatically not having to do so much thinking train ourselves to do this and",
    "start": "234900",
    "end": "242459"
  },
  {
    "text": "we'll be just efficient at it so what will we observe we observe what",
    "start": "242459",
    "end": "248640"
  },
  {
    "text": "we have we can observe our document structure",
    "start": "248640",
    "end": "253680"
  },
  {
    "text": "and we can the action would be to fit a pipeline uh to it to figure out what the",
    "start": "253680",
    "end": "261479"
  },
  {
    "text": "query pipeline would be based on what we just saw so if we can learn to recognize",
    "start": "261479",
    "end": "266580"
  },
  {
    "text": "what's going on we can learn to compose these pipelines really easily",
    "start": "266580",
    "end": "273180"
  },
  {
    "text": "so observing what we have",
    "start": "273180",
    "end": "277520"
  },
  {
    "text": "um document structures  stores documents so when we say",
    "start": "278460",
    "end": "284840"
  },
  {
    "text": "db.mycollection dot find one or whatever your Paradigm is then we will get a",
    "start": "284840",
    "end": "290759"
  },
  {
    "text": "document back probably render it like Json we can see that it has Fields with",
    "start": "290759",
    "end": "296220"
  },
  {
    "text": "properties and this is the main observable thing so it's the document",
    "start": "296220",
    "end": "302699"
  },
  {
    "text": "structure that we're looking at so the first pattern we recognize",
    "start": "302699",
    "end": "310440"
  },
  {
    "text": "is a document structure that I call the flat and the flat is characterized by having",
    "start": "310440",
    "end": "317520"
  },
  {
    "text": "top level fields with values and those values are essentially",
    "start": "317520",
    "end": "323820"
  },
  {
    "text": "non-complicated so if you squint at it close your eyes a",
    "start": "323820",
    "end": "330240"
  },
  {
    "text": "bit and look like this and don't care about what's written in the field it looks like this",
    "start": "330240",
    "end": "336660"
  },
  {
    "text": "there's the blue stuff like the key that the key names and the values here in pink kinda and that's",
    "start": "336660",
    "end": "345539"
  },
  {
    "text": "what the flat looks like just a series of colons if I aligned all the columns together going up and down key value key",
    "start": "345539",
    "end": "352919"
  },
  {
    "text": "value key value the flat this is not a modeling class but I would",
    "start": "352919",
    "end": "359039"
  },
  {
    "text": "say that the flat is antithetical to what wants to be",
    "start": "359039",
    "end": "364919"
  },
  {
    "text": "which is a document database typically I see this document structure when people just migrated a relational",
    "start": "364919",
    "end": "371520"
  },
  {
    "text": "database into it's not the way you want to do things in but today we're querying",
    "start": "371520",
    "end": "377820"
  },
  {
    "text": "and we will encounter this so when we encounter this we can match the right Behavior to it",
    "start": "377820",
    "end": "384979"
  },
  {
    "text": "the next one is the set the set document structure is a little",
    "start": "385979",
    "end": "391860"
  },
  {
    "text": "more complicated but not by much we can see ID and name is still very",
    "start": "391860",
    "end": "398220"
  },
  {
    "text": "flat likes has a set of values it's represented in an array and",
    "start": "398220",
    "end": "404639"
  },
  {
    "text": "does have the possibility of treating those array elements positionally namely that it's a sequence not actually a set",
    "start": "404639",
    "end": "412160"
  },
  {
    "text": "but there are many operations especially match and we'll see that later that",
    "start": "412160",
    "end": "417660"
  },
  {
    "text": "treat the values inside the field likes just as a set of elements",
    "start": "417660",
    "end": "426500"
  },
  {
    "text": "so if we squint at this what we see is that at least one of the fields",
    "start": "427319",
    "end": "432720"
  },
  {
    "text": "in this document has this shape characteristic",
    "start": "432720",
    "end": "438060"
  },
  {
    "text": "which is a key with a square bracket with a bunch of stuff",
    "start": "438060",
    "end": "443340"
  },
  {
    "text": "in a closing square bracket so we're what five minutes in",
    "start": "443340",
    "end": "451259"
  },
  {
    "text": "and you already know two different patterns and you already know that you don't need to read the whole document",
    "start": "451259",
    "end": "457440"
  },
  {
    "text": "you don't even need to care about what the value is in it you already recognize the structure of what's going on here",
    "start": "457440",
    "end": "465780"
  },
  {
    "text": "and finally the nest The Nest document structure is",
    "start": "465780",
    "end": "471539"
  },
  {
    "text": "characterized by more complexity more embedded complexity we can see we have",
    "start": "471539",
    "end": "477000"
  },
  {
    "text": "the ID and the name or title or whatever but look at props there",
    "start": "477000",
    "end": "482220"
  },
  {
    "text": "props is an array and in the array there are elements",
    "start": "482220",
    "end": "487500"
  },
  {
    "text": "and each element in itself is a sub-document it's a little more complicated",
    "start": "487500",
    "end": "493080"
  },
  {
    "text": "has some values that are in themselves but certainly it's not a set necessarily",
    "start": "493080",
    "end": "498539"
  },
  {
    "text": "because these elements might be of different structure and if you see the characters there",
    "start": "498539",
    "end": "504120"
  },
  {
    "text": "has chapters and chapters is in itself in Array",
    "start": "504120",
    "end": "509340"
  },
  {
    "text": "so the first element in props is not",
    "start": "509340",
    "end": "514560"
  },
  {
    "text": "even the same as the second element structurally so this is nested stuff it's more",
    "start": "514560",
    "end": "520320"
  },
  {
    "text": "complicated and when we squint at that what we come up with is that",
    "start": "520320",
    "end": "527459"
  },
  {
    "text": "the main field that tells us this is the nest is that the top level field has",
    "start": "527459",
    "end": "533399"
  },
  {
    "text": "interleaving square and braces opening at least twice",
    "start": "533399",
    "end": "539040"
  },
  {
    "text": "in order to make it more complicated okay that's fine so we have these three",
    "start": "539040",
    "end": "545580"
  },
  {
    "text": "major ideas these are just ideas these are just Clues but it will help you",
    "start": "545580",
    "end": "550860"
  },
  {
    "text": "automatically know what your pipeline stage is going to be based on this",
    "start": "550860",
    "end": "557160"
  },
  {
    "text": "speaking of Pipelines when we are talking about the aggregation framework we build query",
    "start": "557160",
    "end": "563580"
  },
  {
    "text": "pipelines the query pipeline is represented by an array of major pipeline operators and each one has its",
    "start": "563580",
    "end": "569820"
  },
  {
    "text": "own nuances of what parameters you give it but essentially it's passing documents from one stage to the other",
    "start": "569820",
    "end": "576600"
  },
  {
    "text": "and each one does its own little job even in pipeline sequences we can find",
    "start": "576600",
    "end": "583620"
  },
  {
    "text": "patterns and the ones I look at from a 20 000 foot view is we",
    "start": "583620",
    "end": "591959"
  },
  {
    "text": "have this gather so the beginning of the pipeline is",
    "start": "591959",
    "end": "597120"
  },
  {
    "text": "where I get to collect all the inputs I need the middle",
    "start": "597120",
    "end": "602160"
  },
  {
    "text": "which is the main course which is where I do all of the Kung Fu to shape things",
    "start": "602160",
    "end": "607980"
  },
  {
    "text": "to sift them to to do all other not sift them to reshape them and do the",
    "start": "607980",
    "end": "614279"
  },
  {
    "text": "operation I want to do really in processing and then a final stage to present it so",
    "start": "614279",
    "end": "620700"
  },
  {
    "text": "after I did things and I had my middle pipeline stages do whatever they needed",
    "start": "620700",
    "end": "627000"
  },
  {
    "text": "to do I might come up with fields that or a document structure that I don't",
    "start": "627000",
    "end": "632339"
  },
  {
    "text": "want as a result I want a different document structure as a result so the rest is window dressing",
    "start": "632339",
    "end": "638279"
  },
  {
    "text": "the rest is really about preparing it for consumption the major work is already behind us",
    "start": "638279",
    "end": "644579"
  },
  {
    "text": "so that's kind of the UI portion of the pipeline",
    "start": "644579",
    "end": "650100"
  },
  {
    "text": "is it mandatory that we have all three logical pieces of a pipeline always",
    "start": "650100",
    "end": "659300"
  },
  {
    "text": "no I can have something to say I want to run a pipeline that just filters",
    "start": "660120",
    "end": "665700"
  },
  {
    "text": "documents that would be gathering the documents I want and I don't want to do anything with",
    "start": "665700",
    "end": "671459"
  },
  {
    "text": "them and they're fit for consumption it's fine",
    "start": "671459",
    "end": "676560"
  },
  {
    "text": "I can have something and say okay I want those documents but I want just a few",
    "start": "676560",
    "end": "682200"
  },
  {
    "text": "fields from them I want to kind of maybe reshape this thing I don't have a middle part that's fine",
    "start": "682200",
    "end": "688380"
  },
  {
    "text": "I can have something wouldn't recommend it I can have something where instead of gathering just the documents I want or",
    "start": "688380",
    "end": "695700"
  },
  {
    "text": "just the materials I need for assembling I immediately jump into assembly",
    "start": "695700",
    "end": "701339"
  },
  {
    "text": "that happens when I do like geoqueries or when I do want to want to do an aggregation on the whole input",
    "start": "701339",
    "end": "707339"
  },
  {
    "text": "collection and not just on select documents hopefully that's rare",
    "start": "707339",
    "end": "715040"
  },
  {
    "text": "so The Gather stage is characterized by um operators that are focused on getting",
    "start": "718079",
    "end": "725399"
  },
  {
    "text": "the materials we need rejecting the materials we don't need",
    "start": "725399",
    "end": "730680"
  },
  {
    "text": "so what do we have in there we have finding documents which includes",
    "start": "730680",
    "end": "736500"
  },
  {
    "text": "filtering putting them in a specific order if order matters",
    "start": "736500",
    "end": "741920"
  },
  {
    "text": "typically operates on a single collection I know mongodb has dollar lookup",
    "start": "741920",
    "end": "748380"
  },
  {
    "text": "please use it mostly never",
    "start": "748380",
    "end": "753480"
  },
  {
    "text": "use it with an absolutely necessary but consider remodeling your document structure so you don't need it much",
    "start": "753480",
    "end": "760740"
  },
  {
    "text": "um so typically one collection and sometimes multiple collection but",
    "start": "760740",
    "end": "766380"
  },
  {
    "text": "hopefully that's rare uh to get the information necessary to process the",
    "start": "766380",
    "end": "771600"
  },
  {
    "text": "rest of the query and its main function is to liberate data",
    "start": "771600",
    "end": "777060"
  },
  {
    "text": "basically the data was stuck on disk you bring it in and you pluck the things that you need so you might also at this",
    "start": "777060",
    "end": "783660"
  },
  {
    "text": "point reshape slightly decompose complicated Fields recompose things that",
    "start": "783660",
    "end": "788880"
  },
  {
    "text": "were separate and want to be together maybe you had a a price and a quantity and you wanted to",
    "start": "788880",
    "end": "794820"
  },
  {
    "text": "multiply them in order for the rest of the stages not to have to do it but you do it one document at a time so it's",
    "start": "794820",
    "end": "800760"
  },
  {
    "text": "still Gathering and finally Plastering over or fixing",
    "start": "800760",
    "end": "807360"
  },
  {
    "text": "document structure where your underlying Fields were not how you like to see them",
    "start": "807360",
    "end": "812459"
  },
  {
    "text": "so you might need to do this in your Gathering stage to convert dates that were strings into proper dates or to do",
    "start": "812459",
    "end": "820380"
  },
  {
    "text": "things of that nature where things were null and you need to give it some kind of symbolic name so that it won't throw",
    "start": "820380",
    "end": "827339"
  },
  {
    "text": "exceptions later in your pipeline the assemble stage",
    "start": "827339",
    "end": "833660"
  },
  {
    "text": "looks to do the actual work and it boils down typically to group by",
    "start": "833660",
    "end": "840120"
  },
  {
    "text": "because the only reason I'm using mql and not just using a straight find or a straight sort on the whole",
    "start": "840120",
    "end": "846420"
  },
  {
    "text": "collection is because I want to do something that crosses document binary boundary",
    "start": "846420",
    "end": "853440"
  },
  {
    "text": "I can do a fine I can load items and process him in the application but that would be inefficient",
    "start": "853440",
    "end": "859980"
  },
  {
    "text": "but if I want to do some sales by month I need a group I and typically",
    "start": "859980",
    "end": "865680"
  },
  {
    "text": "reports have a group by if you don't have a group by there's very little pipelining you'll do",
    "start": "865680",
    "end": "871200"
  },
  {
    "text": "except for geo restrictions or things like that where it's really just a find",
    "start": "871200",
    "end": "878300"
  },
  {
    "text": "and finally the fit and finish making it useful for consumption for",
    "start": "880860",
    "end": "886680"
  },
  {
    "text": "your application um will be to get rid of fields you don't need to rename Fields so that",
    "start": "886680",
    "end": "893579"
  },
  {
    "text": "they're readable how you want them to limit the result uh maybe you don't want",
    "start": "893579",
    "end": "899399"
  },
  {
    "text": "all million documents you just want the first 10 the first hundred skip a few",
    "start": "899399",
    "end": "904860"
  },
  {
    "text": "and take the next batch paging through things all of those those are kind of fit and finish they do not typically do",
    "start": "904860",
    "end": "912240"
  },
  {
    "text": "anything that not typically they do not do any modification cross document they",
    "start": "912240",
    "end": "917339"
  },
  {
    "text": "just kind of shape the results shape the final result and there's also the variant where you can use mql and as",
    "start": "917339",
    "end": "924839"
  },
  {
    "text": "your final stage say dollar merge and put the results into a collection instead of returning it to the client",
    "start": "924839",
    "end": "931320"
  },
  {
    "text": "that is also in my definition fit and finish",
    "start": "931320",
    "end": "936680"
  },
  {
    "text": "so what are the major operators um I there's of some 30 operators these",
    "start": "939420",
    "end": "946620"
  },
  {
    "text": "days with pipelines they added a lot there's uh the most recent ones with",
    "start": "946620",
    "end": "952260"
  },
  {
    "text": "version uh five and six are the time windowing stuff for reporting mostly",
    "start": "952260",
    "end": "958139"
  },
  {
    "text": "analytics but there's you know no operators with every release",
    "start": "958139",
    "end": "964320"
  },
  {
    "text": "um these are kind of the major ones I see very commonly used so I listed them",
    "start": "964320",
    "end": "969660"
  },
  {
    "text": "uh dollar match is a filter dollar match does which document do I want bring it the ones I",
    "start": "969660",
    "end": "977220"
  },
  {
    "text": "don't want don't let them through uh group is the group by as I said usually the the bread and butter or the",
    "start": "977220",
    "end": "985139"
  },
  {
    "text": "meat and potatoes the main part of the course of uh of processing in the middle there",
    "start": "985139",
    "end": "991199"
  },
  {
    "text": "uh sort for fit and finish typically but could be for teeing up things puts",
    "start": "991199",
    "end": "997320"
  },
  {
    "text": "things in order project picking a few Fields out of the document changing their name doing light calculation of",
    "start": "997320",
    "end": "1004519"
  },
  {
    "text": "two Fields within the same document project works on one document at a time so that's how it works unwind",
    "start": "1004519",
    "end": "1010839"
  },
  {
    "text": "exclusively used for array unwinding and we'll see that in a demo look up in",
    "start": "1010839",
    "end": "1017779"
  },
  {
    "text": "graph lookup used too much to my taste graph lookup is useful if you want to use mongodb as",
    "start": "1017779",
    "end": "1024558"
  },
  {
    "text": "a graph database or to represent a graph structure um but I don't know that you would do a",
    "start": "1024559",
    "end": "1033020"
  },
  {
    "text": "full algorithm for like dijkstra you know kind of minimal paths",
    "start": "1033020",
    "end": "1039918"
  },
  {
    "text": "and all of those math kind of things you'll use it for light hierarchy like who's the boss who's the worker who's",
    "start": "1039919",
    "end": "1046220"
  },
  {
    "text": "the boss's worker whatever things like that",
    "start": "1046220",
    "end": "1051380"
  },
  {
    "text": "um so graph lookup it's much more less efficient to do this",
    "start": "1051380",
    "end": "1056900"
  },
  {
    "text": "client-side but still I would say model your documents such that you don't need to use too much",
    "start": "1056900",
    "end": "1063740"
  },
  {
    "text": "of draft lookup or lookup dollar out and merge are out was a",
    "start": "1063740",
    "end": "1070220"
  },
  {
    "text": "predecessor to merge merges the preferred one these days it allows you much more flexibility to store the",
    "start": "1070220",
    "end": "1075679"
  },
  {
    "text": "results into itself into a collection and then add Fields is a kind of",
    "start": "1075679",
    "end": "1082400"
  },
  {
    "text": "syntactic sugar helping you to think do things that project could so those are pretty common",
    "start": "1082400",
    "end": "1088640"
  },
  {
    "text": "uh also I would say facet is becoming a little more common these days",
    "start": "1088640",
    "end": "1095200"
  },
  {
    "text": "um then other stages still good to know here facets here uh bucket Auto bucket",
    "start": "1095419",
    "end": "1100580"
  },
  {
    "text": "things like when you do searches and you know you want your products by size by",
    "start": "1100580",
    "end": "1105740"
  },
  {
    "text": "prices things like that so bucketing the results kind of similar to what group",
    "start": "1105740",
    "end": "1110840"
  },
  {
    "text": "would be using it's syntactic sugar that helps you do this more efficiently uh",
    "start": "1110840",
    "end": "1116179"
  },
  {
    "text": "dollar count limit and Skip are the ones used for paging when you have large",
    "start": "1116179",
    "end": "1123140"
  },
  {
    "text": "result sets you don't want to return them all at once um redact I haven't seen really in the wild",
    "start": "1123140",
    "end": "1131200"
  },
  {
    "text": "uh it's been around for a while but it allows you to pass along to the next stage uh just",
    "start": "1131200",
    "end": "1138380"
  },
  {
    "text": "feels that are certain nestedness inside so if you have uh you know some public",
    "start": "1138380",
    "end": "1143960"
  },
  {
    "text": "information and in its um field that has more private information and more you can redact things and say I only want",
    "start": "1143960",
    "end": "1150380"
  },
  {
    "text": "level one fields or level two up to level two fields or up to level three Fields uh I suppose if you're running a",
    "start": "1150380",
    "end": "1157100"
  },
  {
    "text": "circular secret organization that's helpful replace route to some mechanics",
    "start": "1157100",
    "end": "1162919"
  },
  {
    "text": "that have to do with how you process the document",
    "start": "1162919",
    "end": "1168200"
  },
  {
    "text": "within a stage sample is very useful for ML for machine",
    "start": "1168200",
    "end": "1173600"
  },
  {
    "text": "learning sample is um allows you to do efficient selection of",
    "start": "1173600",
    "end": "1179000"
  },
  {
    "text": "data from a large collection in a stable way so that it is statistically significant according to the density you",
    "start": "1179000",
    "end": "1185179"
  },
  {
    "text": "give it anyway this is a general intro and what I'm going to do now is switch",
    "start": "1185179",
    "end": "1191660"
  },
  {
    "text": "the demoing and we'll go through some katas up to five katas",
    "start": "1191660",
    "end": "1198080"
  },
  {
    "text": "um let me also give this link so you can do it at home or follow along with me or",
    "start": "1198080",
    "end": "1204620"
  },
  {
    "text": "um whatever works for you",
    "start": "1204620",
    "end": "1211240"
  },
  {
    "text": "um I I put in the room one slack I put the",
    "start": "1211520",
    "end": "1218960"
  },
  {
    "text": "link also so if you want to grab it on your own device later or the QR code",
    "start": "1218960",
    "end": "1226760"
  },
  {
    "text": "so in the next um time we have left and also open to",
    "start": "1226760",
    "end": "1232039"
  },
  {
    "text": "questions we'll just go through a few of the exercises looking at source",
    "start": "1232039",
    "end": "1237140"
  },
  {
    "text": "documents determining the pattern of their structure matching them to a major operator and like trying to use it",
    "start": "1237140",
    "end": "1247000"
  },
  {
    "text": "so the first one is the Kata is called pass or not",
    "start": "1247640",
    "end": "1255020"
  },
  {
    "text": "it looks to use matching basically using a dollar match",
    "start": "1255020",
    "end": "1260960"
  },
  {
    "text": "to filter documents limit sort and Skip which together are a pattern of paging",
    "start": "1260960",
    "end": "1268340"
  },
  {
    "text": "that you always seem together remember always to use sort when you're doing",
    "start": "1268340",
    "end": "1274760"
  },
  {
    "text": "um were you doing paging because if you come back for the next batch and things",
    "start": "1274760",
    "end": "1279980"
  },
  {
    "text": "change you want a stable basis for your sorting so if somebody added another",
    "start": "1279980",
    "end": "1285260"
  },
  {
    "text": "item uh you know you don't want to miss it or a previous item you don't want to",
    "start": "1285260",
    "end": "1290780"
  },
  {
    "text": "show it again so those are important combinations let's look a little at the",
    "start": "1290780",
    "end": "1296480"
  },
  {
    "text": "syntax of it the syntax of match on the first line here",
    "start": "1296480",
    "end": "1303200"
  },
  {
    "text": "um match takes a field name and a value",
    "start": "1303200",
    "end": "1308620"
  },
  {
    "text": "so at our simplest form a match would take a field named City here",
    "start": "1308620",
    "end": "1314539"
  },
  {
    "text": "and say all documents that have a city field with a value of Kent exactly",
    "start": "1314539",
    "end": "1320840"
  },
  {
    "text": "verbatim capital K ENT I want them back if a document doesn't have that it won't if a",
    "start": "1320840",
    "end": "1329120"
  },
  {
    "text": "document doesn't have City Field at all it won't come back",
    "start": "1329120",
    "end": "1334159"
  },
  {
    "text": "so this is uh fairly straightforward because matches sometimes do ranges so",
    "start": "1334159",
    "end": "1339740"
  },
  {
    "text": "you can do dollar GTE or dollar LT there's variations that you you can do",
    "start": "1339740",
    "end": "1345500"
  },
  {
    "text": "range matching and logical operators but this is kind of the the simplest form",
    "start": "1345500",
    "end": "1353960"
  },
  {
    "text": "sort takes a field in our case it's sorting on the underscore ID field and",
    "start": "1353960",
    "end": "1360080"
  },
  {
    "text": "gives it a direction the direction is determined by a number you can say negative one that's descending highest",
    "start": "1360080",
    "end": "1367820"
  },
  {
    "text": "first lowest later and uh a direction of one without the negative",
    "start": "1367820",
    "end": "1374240"
  },
  {
    "text": "sign would be ascending smallest first largest list what is smallest",
    "start": "1374240",
    "end": "1381500"
  },
  {
    "text": "if it's a number or numeric it would be compared numerically if it's a string it",
    "start": "1381500",
    "end": "1387380"
  },
  {
    "text": "would be lexicographic meaning a followed B following a c",
    "start": "1387380",
    "end": "1392720"
  },
  {
    "text": "following B and so forth and if it's a number that's quoted in string",
    "start": "1392720",
    "end": "1398240"
  },
  {
    "text": "it will be lexicographic unless you can do in you can give it a",
    "start": "1398240",
    "end": "1404059"
  },
  {
    "text": "correlation and you can set a collation order that coerces strings to be numbers",
    "start": "1404059",
    "end": "1410240"
  },
  {
    "text": "and interpreted as their numeric value otherwise quoted strings are just",
    "start": "1410240",
    "end": "1416659"
  },
  {
    "text": "compared like psychographically skip just takes a number says how many",
    "start": "1416659",
    "end": "1422240"
  },
  {
    "text": "to skip so if you say Skip One the second document coming through and on would be",
    "start": "1422240",
    "end": "1429640"
  },
  {
    "text": "allowed the first one would be ignored dropped to the floor never come out of",
    "start": "1429640",
    "end": "1434659"
  },
  {
    "text": "the pipeline stage and aggregate takes a limit as sorry and limit takes a number and both these",
    "start": "1434659",
    "end": "1442760"
  },
  {
    "text": "numbers for Skip and limit are just what they are so don't think array",
    "start": "1442760",
    "end": "1447860"
  },
  {
    "text": "offsets think just the number so limit to two means two will come out",
    "start": "1447860",
    "end": "1453980"
  },
  {
    "text": "Skip One means the first one that comes in ignore it",
    "start": "1453980",
    "end": "1460220"
  },
  {
    "text": "okay so with that let me see if I can um",
    "start": "1460220",
    "end": "1466220"
  },
  {
    "text": "switch screens here can I share this",
    "start": "1466220",
    "end": "1474220"
  },
  {
    "text": "um",
    "start": "1474440",
    "end": "1476620"
  },
  {
    "text": "so this is the first Kata and I will go to this playground in a second it says",
    "start": "1483980",
    "end": "1490159"
  },
  {
    "text": "basically inspect the data set to look at the document and try to figure out",
    "start": "1490159",
    "end": "1495260"
  },
  {
    "text": "what kind of document it is the flat the set the nest",
    "start": "1495260",
    "end": "1500659"
  },
  {
    "text": "and then create a pipeline to return everything for people who live in",
    "start": "1500659",
    "end": "1505700"
  },
  {
    "text": "Jackson we'll look at the set in a second and then return all documents in order by",
    "start": "1505700",
    "end": "1512419"
  },
  {
    "text": "city name ascending then by person name descending and from this list return the",
    "start": "1512419",
    "end": "1517700"
  },
  {
    "text": "second person only so we'll keep this in mind not try to memorize it I'll jump here to",
    "start": "1517700",
    "end": "1523640"
  },
  {
    "text": "the playground and we have a collection here let's look at it each document is here",
    "start": "1523640",
    "end": "1531020"
  },
  {
    "text": "there's a underscore ID of the document is the name of the person",
    "start": "1531020",
    "end": "1536960"
  },
  {
    "text": "and the city has the city name so what kind of document is this",
    "start": "1536960",
    "end": "1543100"
  },
  {
    "text": "flat Nest set",
    "start": "1545539",
    "end": "1549700"
  },
  {
    "text": "flat that's correct it's flat because it just has top level field with a simple",
    "start": "1550580",
    "end": "1556120"
  },
  {
    "text": "scalar value Nothing Fancy no set of things nothing embedded certainly no",
    "start": "1556120",
    "end": "1562520"
  },
  {
    "text": "interleaving of braces in square brackets it's just flat okay so with flat things we can directly",
    "start": "1562520",
    "end": "1569600"
  },
  {
    "text": "access them with dollar match the first thing I want to do is I want to say",
    "start": "1569600",
    "end": "1575360"
  },
  {
    "text": "let me get the people whose City is Jackson",
    "start": "1575360",
    "end": "1582880"
  },
  {
    "text": "um uh in order to do filtering I need to do",
    "start": "1588260",
    "end": "1595460"
  },
  {
    "text": "a filter expression so this is a dollar match",
    "start": "1595460",
    "end": "1601778"
  },
  {
    "text": "and here we go so",
    "start": "1602299",
    "end": "1608240"
  },
  {
    "text": "the first element I have a flat document I just put the name of the field put a",
    "start": "1608240",
    "end": "1613640"
  },
  {
    "text": "match operator that's a way to sift through to reduce and of my pipeline",
    "start": "1613640",
    "end": "1619760"
  },
  {
    "text": "stages this is The Gather stage just gathering information gathering",
    "start": "1619760",
    "end": "1624860"
  },
  {
    "text": "means take the stuff you want drop the thumb things you don't",
    "start": "1624860",
    "end": "1630100"
  },
  {
    "text": "second item in Nakata tells me okay well",
    "start": "1631340",
    "end": "1636278"
  },
  {
    "text": "um I returned everything all the fields right I didn't try to manipulate the documents I just decided return or not",
    "start": "1636559",
    "end": "1642679"
  },
  {
    "text": "as is verbatim uh so now bring him an order by city name first and then by",
    "start": "1642679",
    "end": "1649580"
  },
  {
    "text": "person name so this is not Jackson anymore I want all documents right all documents oops",
    "start": "1649580",
    "end": "1658480"
  },
  {
    "text": "first by city name and then by person name descending okay",
    "start": "1658700",
    "end": "1663980"
  },
  {
    "text": "I'll go here I will remove this match because I'm no longer Gathering",
    "start": "1663980",
    "end": "1671000"
  },
  {
    "text": "I'm actually doing just one thing I'm doing fit and finish I want to prepare all documents for human consumption",
    "start": "1671000",
    "end": "1677000"
  },
  {
    "text": "without any grouping or anything fancy so what stage pipeline stage I need",
    "start": "1677000",
    "end": "1683360"
  },
  {
    "text": "first",
    "start": "1683360",
    "end": "1685600"
  },
  {
    "text": "I need to put them in order so that would be sort",
    "start": "1689179",
    "end": "1693580"
  },
  {
    "text": "and for the sort specification I want them by City first",
    "start": "1694460",
    "end": "1701539"
  },
  {
    "text": "and I wanted the sending or descending ascending City descending name so",
    "start": "1701539",
    "end": "1708799"
  },
  {
    "text": "ascending city is one for ascending and then descending name",
    "start": "1708799",
    "end": "1714740"
  },
  {
    "text": "the name happens to be in the ID field and I'll do descending",
    "start": "1714740",
    "end": "1721360"
  },
  {
    "text": "and I can see that it's Bolder with a B J Jackson and then",
    "start": "1721520",
    "end": "1728480"
  },
  {
    "text": "Kent JK so this is in alphabetical order but within Jackson",
    "start": "1728480",
    "end": "1734240"
  },
  {
    "text": "I get uh Bob sorry Dan and Jan Jan is J bigger",
    "start": "1734240",
    "end": "1741799"
  },
  {
    "text": "than D for Dan now some of you may come from",
    "start": "1741799",
    "end": "1748580"
  },
  {
    "text": "programming language where key keys in a hash or in a dictionary are not",
    "start": "1748580",
    "end": "1753799"
  },
  {
    "text": "guaranteed order in our case here in  has this notion of the key",
    "start": "1753799",
    "end": "1759500"
  },
  {
    "text": "order so yes it does matter that I said first by City then by ID if I flip the order of",
    "start": "1759500",
    "end": "1767059"
  },
  {
    "text": "these um",
    "start": "1767059",
    "end": "1773059"
  },
  {
    "text": "it matters well in this case it",
    "start": "1773059",
    "end": "1778340"
  },
  {
    "text": "would it in this case no it's still that but the order is",
    "start": "1778340",
    "end": "1783740"
  },
  {
    "text": "preserved is the point uh in in the pipeline operation expression okay so this is pretty simple",
    "start": "1783740",
    "end": "1791419"
  },
  {
    "text": "I did a gather just by using match I did a fit and finish by using sort ascending",
    "start": "1791419",
    "end": "1797179"
  },
  {
    "text": "descending pretty easy syntax nothing to um difficult but then the last thing is I",
    "start": "1797179",
    "end": "1804500"
  },
  {
    "text": "want to get only the second person so if I want only the second person what",
    "start": "1804500",
    "end": "1812419"
  },
  {
    "text": "do I need to add here what pipeline stages",
    "start": "1812419",
    "end": "1817480"
  },
  {
    "text": "Skip and limit so the first thing for the second one I need to skip the first one right",
    "start": "1818120",
    "end": "1826480"
  },
  {
    "text": "so I will put a dollar skip",
    "start": "1826720",
    "end": "1831640"
  },
  {
    "text": "value Skip One exactly and then I only want the second one so after I skipped one",
    "start": "1833240",
    "end": "1839539"
  },
  {
    "text": "I'll limit my result set to one",
    "start": "1839539",
    "end": "1843940"
  },
  {
    "text": "and lo and behold I sorted them I took uh I can do this",
    "start": "1851240",
    "end": "1859480"
  },
  {
    "text": "to convince ourselves that it's correct",
    "start": "1861080",
    "end": "1866140"
  },
  {
    "text": "I skipped Kim and I took Jen and that's that so that was correct",
    "start": "1867020",
    "end": "1874340"
  },
  {
    "text": "right so five minutes match skip limit sort",
    "start": "1874340",
    "end": "1882380"
  },
  {
    "text": "and when you see a flat document you can just put the field name in I think we have in the next Kata where even we can",
    "start": "1882380",
    "end": "1890720"
  },
  {
    "text": "reach into embedded documents so if you have a thought on that just hold on one sec we'll get to it",
    "start": "1890720",
    "end": "1898299"
  },
  {
    "text": "so before we move to katatu let's take a look at the main main idea here",
    "start": "1898460",
    "end": "1906140"
  },
  {
    "text": "um main idea with katatu is to use grouping to batch up",
    "start": "1906140",
    "end": "1914240"
  },
  {
    "text": "stuff and we'll talk about the group it's dollar group is the major main Workhorse",
    "start": "1914240",
    "end": "1921440"
  },
  {
    "text": "of the aggregation pipeline um you know most of the aggregations you'll write will contain a group",
    "start": "1921440",
    "end": "1927200"
  },
  {
    "text": "otherwise you could just use find so the way group syntax works is",
    "start": "1927200",
    "end": "1934760"
  },
  {
    "text": "group there's the name of the operator dollar group and then you have to give",
    "start": "1934760",
    "end": "1940039"
  },
  {
    "text": "it an ID because group just like SQL group buy you have to say Group by what and that",
    "start": "1940039",
    "end": "1946880"
  },
  {
    "text": "what is the underscore ID it's a fixed name just like every document has an ID",
    "start": "1946880",
    "end": "1952340"
  },
  {
    "text": "every group expression has to have an ID and the ID is what things are grouped by",
    "start": "1952340",
    "end": "1958340"
  },
  {
    "text": "what things are batched by and somebody's thinking wait but what if",
    "start": "1958340",
    "end": "1963440"
  },
  {
    "text": "I have to group by two Fields year and month okay well the value you're grouping by could be two Fields it could",
    "start": "1963440",
    "end": "1970279"
  },
  {
    "text": "be complicate complex but it's still going to be named ID",
    "start": "1970279",
    "end": "1976000"
  },
  {
    "text": "so at the top we have a group by expression that has dollar all yeah it's the word all but it doesn't",
    "start": "1977480",
    "end": "1985039"
  },
  {
    "text": "mean anything it doesn't mean Alice it's just a constant you could Group by any",
    "start": "1985039",
    "end": "1990080"
  },
  {
    "text": "constant a number a string doesn't matter if you do that you're essentially",
    "start": "1990080",
    "end": "1995299"
  },
  {
    "text": "saying create me one group because this value all is just one group",
    "start": "1995299",
    "end": "2000640"
  },
  {
    "text": "so then any aggregation I will do whether I count I add by using sum I do",
    "start": "2000640",
    "end": "2005919"
  },
  {
    "text": "averages I do whatever all of that will be just one group produced",
    "start": "2005919",
    "end": "2011380"
  },
  {
    "text": "if I want to group by one of the fields I use the value of uh type syntax",
    "start": "2011380",
    "end": "2019419"
  },
  {
    "text": "and we see it here",
    "start": "2019419",
    "end": "2022679"
  },
  {
    "text": "and what this does is instead of having just the name of the field the field",
    "start": "2026919",
    "end": "2033220"
  },
  {
    "text": "name like for first name or something like right so instead of grouping by the",
    "start": "2033220",
    "end": "2038740"
  },
  {
    "text": "constant name I'm grouping by the value of the field name at which point some of us are saying",
    "start": "2038740",
    "end": "2045580"
  },
  {
    "text": "wait headache I have a dollar sign it means value of field",
    "start": "2045580",
    "end": "2051940"
  },
  {
    "text": "but also interprets dollar sign to be the name of the stage or the name of the operator right dollar",
    "start": "2051940",
    "end": "2058540"
  },
  {
    "text": "group so why is in dollar group the name of the field Group",
    "start": "2058540",
    "end": "2064658"
  },
  {
    "text": "ah well dollar to the right of a colon means value of in dollar to the left of a",
    "start": "2064659",
    "end": "2071858"
  },
  {
    "text": "colon will mean an operator so dollar group is to the left of the colon that",
    "start": "2071859",
    "end": "2078040"
  },
  {
    "text": "means it's the name of a pipeline operator dollar count or dollar AVG on line three",
    "start": "2078040",
    "end": "2084580"
  },
  {
    "text": "here from the on last line in the slide here dollar AVG is to the left which means it's the average",
    "start": "2084580",
    "end": "2091780"
  },
  {
    "text": "um operator and dollar score is to the right which means it's value of field",
    "start": "2091780",
    "end": "2097420"
  },
  {
    "text": "and we put quotes around anything to the right so that JavaScript doesn't get utterly confused so that's what that is",
    "start": "2097420",
    "end": "2107200"
  },
  {
    "text": "all right so Group by we're given an ID and then we give it a group by operator",
    "start": "2107200",
    "end": "2112480"
  },
  {
    "text": "what to do and in our case uh online uh three from the top n colon dollar count",
    "start": "2112480",
    "end": "2119700"
  },
  {
    "text": "of everything basically empty squiggly braces count the stuff it says I'm going",
    "start": "2119700",
    "end": "2126579"
  },
  {
    "text": "to count items within the group which group the group of all documents okay so it's just",
    "start": "2126579",
    "end": "2132820"
  },
  {
    "text": "going to create one group an account of how many documents in the collection second expression says oh I'm gonna",
    "start": "2132820",
    "end": "2139000"
  },
  {
    "text": "Group by the value of the name so for each name there's going to be a group",
    "start": "2139000",
    "end": "2144040"
  },
  {
    "text": "and what do I want to do I want to average the scores by name I want the",
    "start": "2144040",
    "end": "2149920"
  },
  {
    "text": "dollar average AVG of the value of score",
    "start": "2149920",
    "end": "2155440"
  },
  {
    "text": "all right so let's see it in a Kata in action uh dollar count lets",
    "start": "2155440",
    "end": "2163540"
  },
  {
    "text": "you count stuff uh dollar sum lets you add things up and AVG lets you do the",
    "start": "2163540",
    "end": "2170800"
  },
  {
    "text": "average there's other things St Dev PE and standard deviation and stuff like",
    "start": "2170800",
    "end": "2176680"
  },
  {
    "text": "that you can do other aggregation uh we're not going to cover all of them today",
    "start": "2176680",
    "end": "2182338"
  },
  {
    "text": "um let's see here I'm going to switch to",
    "start": "2185680",
    "end": "2192960"
  },
  {
    "text": "I'm going to switch to Kata 2 here so I'm going to open up this document here",
    "start": "2199540",
    "end": "2206619"
  },
  {
    "text": "this uh area and we can look at the documents the documents are the score",
    "start": "2206619",
    "end": "2212020"
  },
  {
    "text": "document uh this syntax here of DT is a dollar",
    "start": "2212020",
    "end": "2218800"
  },
  {
    "text": "date of this this is extended Json just to tell that this is an actual date not a string",
    "start": "2218800",
    "end": "2225760"
  },
  {
    "text": "um so it's just a way to represent it in Json so that we don't have to look at Epoch",
    "start": "2225760",
    "end": "2231520"
  },
  {
    "text": "numbers and things like that but otherwise this document is flat",
    "start": "2231520",
    "end": "2237040"
  },
  {
    "text": "right just fields so there's a ID of the score it's a",
    "start": "2237040",
    "end": "2244300"
  },
  {
    "text": "numeric ID meaningless there's a name for who who scored there's a subject",
    "start": "2244300",
    "end": "2250180"
  },
  {
    "text": "which is uh what class they took and there's the date of the exam and the",
    "start": "2250180",
    "end": "2256180"
  },
  {
    "text": "score they received so let's look at the Kata here so we",
    "start": "2256180",
    "end": "2262180"
  },
  {
    "text": "looked at the stuff um and then create a mql pipeline to return",
    "start": "2262180",
    "end": "2267460"
  },
  {
    "text": "the average score across all students and all subjects so in our gather stage",
    "start": "2267460",
    "end": "2275200"
  },
  {
    "text": "are we putting any matches no we're jumping right into group",
    "start": "2275200",
    "end": "2281920"
  },
  {
    "text": "because we want everything from the collection and we want the average",
    "start": "2281920",
    "end": "2287680"
  },
  {
    "text": "okay so the first thing we do is being that we want across everyone dollar group",
    "start": "2287680",
    "end": "2296980"
  },
  {
    "text": "and the ID is anything really",
    "start": "2296980",
    "end": "2302020"
  },
  {
    "text": "so I'll put NDC 2023",
    "start": "2302020",
    "end": "2307180"
  },
  {
    "text": "and then the field I'll what did we say we want the average I'll",
    "start": "2307180",
    "end": "2312880"
  },
  {
    "text": "call it a aviraj stuff doesn't matter whether I",
    "start": "2312880",
    "end": "2320760"
  },
  {
    "text": "call it dollar AVG is the operator average",
    "start": "2320760",
    "end": "2325780"
  },
  {
    "text": "and what do I wanna average I want to average the value of dollar",
    "start": "2325780",
    "end": "2332800"
  },
  {
    "text": "score field and here we go",
    "start": "2332800",
    "end": "2337839"
  },
  {
    "text": "because I gave group an ID that is a constant",
    "start": "2337839",
    "end": "2344380"
  },
  {
    "text": "it's aggregated across all documents and the operator is average so it did an",
    "start": "2344380",
    "end": "2350200"
  },
  {
    "text": "average of all values in the score fields fair enough",
    "start": "2350200",
    "end": "2356160"
  },
  {
    "text": "and then return the maximum score by subject",
    "start": "2359020",
    "end": "2366220"
  },
  {
    "text": "ah so now I want to bucket my subjects so instead of a constant here I'll have",
    "start": "2366220",
    "end": "2372400"
  },
  {
    "text": "this be the subject value of the subject",
    "start": "2372400",
    "end": "2377920"
  },
  {
    "text": "and the operator I want for the name of stuff let's say maximum",
    "start": "2377920",
    "end": "2385420"
  },
  {
    "text": "is my field name I can name it whatever I want here maximum dot dot dot it's",
    "start": "2385420",
    "end": "2391180"
  },
  {
    "text": "just a string doesn't care and I want to use the max operator",
    "start": "2391180",
    "end": "2396940"
  },
  {
    "text": "which is one of the aggregation Pipeline and that will be the maximum score",
    "start": "2396940",
    "end": "2403500"
  },
  {
    "text": "ah any field except for thoughts because that would be dotted notation so let's",
    "start": "2404980",
    "end": "2411460"
  },
  {
    "text": "not be too cheeky so now I got back the result saying",
    "start": "2411460",
    "end": "2416859"
  },
  {
    "text": "here's a maximum field by value by uh sorry by um",
    "start": "2416859",
    "end": "2423940"
  },
  {
    "text": "subject and this is the ID uh uh because I extracted",
    "start": "2423940",
    "end": "2431220"
  },
  {
    "text": "the grouping goes into ID it says ideas art Ideas Math that's not fit and finish",
    "start": "2431220",
    "end": "2436960"
  },
  {
    "text": "I can add a stage to rename that if I want all right uh let's see we got",
    "start": "2436960",
    "end": "2443619"
  },
  {
    "text": "um another 15 minutes yeah we can go through a couple more and then we'll maybe talk about",
    "start": "2443619",
    "end": "2449140"
  },
  {
    "text": "performance and open the questions I can push through I just want to be respectful over time here",
    "start": "2449140",
    "end": "2456480"
  },
  {
    "text": "any questions on group",
    "start": "2459880",
    "end": "2463140"
  },
  {
    "text": "as I said group is the main Workhorse of aggregations and Reporting in you",
    "start": "2465460",
    "end": "2470500"
  },
  {
    "text": "will be using it a lot get comfortable with it",
    "start": "2470500",
    "end": "2474960"
  },
  {
    "text": "so the next thing is uh unwind because ",
    "start": "2478060",
    "end": "2483460"
  },
  {
    "text": "is a document model and because we will be doing things like multiple things",
    "start": "2483460",
    "end": "2488680"
  },
  {
    "text": "within a document like I haven't uh um maybe I have a",
    "start": "2488680",
    "end": "2494020"
  },
  {
    "text": "an invoice and I have the customer once and I have the total price ones but then",
    "start": "2494020",
    "end": "2501280"
  },
  {
    "text": "I have as many items and they put in the cart with their quantities and individual price so it would be a",
    "start": "2501280",
    "end": "2507579"
  },
  {
    "text": "complicated document right there's going to be a set of items attached to this invoice so this is where unwind comes in because",
    "start": "2507579",
    "end": "2515320"
  },
  {
    "text": "the way pipelines work pipeline operators work is they see each document",
    "start": "2515320",
    "end": "2521619"
  },
  {
    "text": "coming in and process it once well if I process it once but I have",
    "start": "2521619",
    "end": "2528099"
  },
  {
    "text": "many things in it I don't have a way to Loop through them",
    "start": "2528099",
    "end": "2532920"
  },
  {
    "text": "but if I put a stage before that that unwinds these arrays of items and feeds",
    "start": "2533140",
    "end": "2539920"
  },
  {
    "text": "them as a single document and in the next stage then I can do something with them and this is when",
    "start": "2539920",
    "end": "2546280"
  },
  {
    "text": "unwind comes through unwind invariably you give it a name of an",
    "start": "2546280",
    "end": "2552880"
  },
  {
    "text": "array within the input document and we're interested in the value in the",
    "start": "2552880",
    "end": "2560200"
  },
  {
    "text": "array so it's a dollar value of dollar colors is colors is a field in the",
    "start": "2560200",
    "end": "2566440"
  },
  {
    "text": "document that enters there so the operator is unwind",
    "start": "2566440",
    "end": "2573280"
  },
  {
    "text": "you give it the field name and what it does is for each element in",
    "start": "2573280",
    "end": "2578859"
  },
  {
    "text": "the array of the input document it outputs the whole document with only a single element",
    "start": "2578859",
    "end": "2584680"
  },
  {
    "text": "so I have a document with colors red green in an array",
    "start": "2584680",
    "end": "2590619"
  },
  {
    "text": "and I unwind the colors and it would come out as the document with red",
    "start": "2590619",
    "end": "2596200"
  },
  {
    "text": "another document with just green so now instead of having an array I have",
    "start": "2596200",
    "end": "2601300"
  },
  {
    "text": "a single element in that field and now I can process them there's nuances to unwind you can um",
    "start": "2601300",
    "end": "2609240"
  },
  {
    "text": "tell it to also emit the sequence number of the element in the array so that's an",
    "start": "2609240",
    "end": "2615819"
  },
  {
    "text": "option it's optional you don't always use it include array index and give it the name of the field you want the array",
    "start": "2615819",
    "end": "2623619"
  },
  {
    "text": "indexing and you can also say if there are null",
    "start": "2623619",
    "end": "2628660"
  },
  {
    "text": "or empty arrays should I output the document at all in which case it would have a null or no",
    "start": "2628660",
    "end": "2635020"
  },
  {
    "text": "value in that field or should I suppress it because documents are flexible and",
    "start": "2635020",
    "end": "2641200"
  },
  {
    "text": "sometimes you don't even have that field at all what should the operator do so these are nuances and options you",
    "start": "2641200",
    "end": "2649119"
  },
  {
    "text": "might need let's take a look at an example here",
    "start": "2649119",
    "end": "2656800"
  },
  {
    "text": "for this um let's see",
    "start": "2656800",
    "end": "2664000"
  },
  {
    "text": "let's go to our trustee repo cata3",
    "start": "2664000",
    "end": "2671700"
  },
  {
    "text": "here's our document Brands each brand document is like this",
    "start": "2672640",
    "end": "2682420"
  },
  {
    "text": "what kind of pattern do we see immediately",
    "start": "2682420",
    "end": "2686338"
  },
  {
    "text": "I hear set anybody else yeah so this is a set we have an array",
    "start": "2688660",
    "end": "2694780"
  },
  {
    "text": "here we don't have more interleaving the elements in it are considered a set",
    "start": "2694780",
    "end": "2700660"
  },
  {
    "text": "colors is a set so with a set",
    "start": "2700660",
    "end": "2707079"
  },
  {
    "text": "we want to create a pipeline that Returns the document ID in a single color from colors",
    "start": "2707079",
    "end": "2713079"
  },
  {
    "text": "so my requirement is simply to take this stuff and for every document just",
    "start": "2713079",
    "end": "2719680"
  },
  {
    "text": "return the ID and a single color",
    "start": "2719680",
    "end": "2724619"
  },
  {
    "text": "well that's pretty much what I unwind does",
    "start": "2725560",
    "end": "2730200"
  },
  {
    "text": "so I want to unwind the field value of uh colors",
    "start": "2737680",
    "end": "2745318"
  },
  {
    "text": "and when I do this from this brand a you will see that there are three sorry",
    "start": "2746680",
    "end": "2754119"
  },
  {
    "text": "yeah uh brand a emits three documents one with green one with blue one with",
    "start": "2754119",
    "end": "2760420"
  },
  {
    "text": "gray green blue Gray",
    "start": "2760420",
    "end": "2765940"
  },
  {
    "text": "brand B has only two elements so I will get two brand B documents a purple and a",
    "start": "2765940",
    "end": "2772060"
  },
  {
    "text": "blue Fair",
    "start": "2772060",
    "end": "2777480"
  },
  {
    "text": "and similar to this I can add an index by using the you know add index and give",
    "start": "2781619",
    "end": "2787540"
  },
  {
    "text": "it a name um this is just a exercise you can take",
    "start": "2787540",
    "end": "2795339"
  },
  {
    "text": "home it's extra options but the main thing to remember about unwind is it parrots it echoes all the original",
    "start": "2795339",
    "end": "2802240"
  },
  {
    "text": "Fields plus exactly one element you'll also notice that before",
    "start": "2802240",
    "end": "2808900"
  },
  {
    "text": "this shape was an array and now this shape is a scalar",
    "start": "2808900",
    "end": "2815319"
  },
  {
    "text": "now if that value had like a complex object it would be that complex object but it's no longer an array of things",
    "start": "2815319",
    "end": "2821800"
  },
  {
    "text": "it's not an array with a single element it's just this one element",
    "start": "2821800",
    "end": "2827400"
  },
  {
    "text": "so that's that let's see we're kind of gonna run against time so let me get back to",
    "start": "2830079",
    "end": "2838540"
  },
  {
    "text": "a little syntax and then we'll talk about efficiency",
    "start": "2838540",
    "end": "2843240"
  },
  {
    "text": "when we talk about isolation taking Fields out of where",
    "start": "2848579",
    "end": "2854380"
  },
  {
    "text": "they were we're really talking about the um The Gather stage where we want to",
    "start": "2854380",
    "end": "2860200"
  },
  {
    "text": "take elements but something was bigger or not exactly what we want in the",
    "start": "2860200",
    "end": "2865480"
  },
  {
    "text": "operator um why am I here",
    "start": "2865480",
    "end": "2871859"
  },
  {
    "text": "sorry that will come next so uh this one is about",
    "start": "2872500",
    "end": "2877960"
  },
  {
    "text": "um isolation of uh individual items by",
    "start": "2877960",
    "end": "2883720"
  },
  {
    "text": "digging in to complex items like let's say I have an address and address has a",
    "start": "2883720",
    "end": "2889119"
  },
  {
    "text": "City Line one line two country blah blah blah this is still considered flat",
    "start": "2889119",
    "end": "2894520"
  },
  {
    "text": "why because it's not complex and it's not a set City and country are two",
    "start": "2894520",
    "end": "2899859"
  },
  {
    "text": "different fields yeah structurally in Json they look like they're embedded but effectively it's just a path to a single",
    "start": "2899859",
    "end": "2906339"
  },
  {
    "text": "scalar there's no order to it there's no multitude of it so the way to do it with is just",
    "start": "2906339",
    "end": "2913540"
  },
  {
    "text": "to use the dot notation so I can match just like I did before but instead of matching the whole address just match",
    "start": "2913540",
    "end": "2919960"
  },
  {
    "text": "one of the fields within address in our case City",
    "start": "2919960",
    "end": "2925060"
  },
  {
    "text": "and this can be used in a match it could be used in a sort that could be used in",
    "start": "2925060",
    "end": "2930160"
  },
  {
    "text": "an aggregate the field itself dot notation lets me dig into a sub document",
    "start": "2930160",
    "end": "2935859"
  },
  {
    "text": "and I just put the period there which is why when I did something silly before and I",
    "start": "2935859",
    "end": "2942040"
  },
  {
    "text": "put dot dot dot in the name it's like whoa that means something special it's that notation don't do that",
    "start": "2942040",
    "end": "2949660"
  },
  {
    "text": "so that's that I don't think this requires a big demo",
    "start": "2949660",
    "end": "2956140"
  },
  {
    "text": "but you can practice it at home uh the next thing is project and now I",
    "start": "2956140",
    "end": "2961240"
  },
  {
    "text": "don't want to just look at the sort stuff project can be used to tee up things for the",
    "start": "2961240",
    "end": "2966400"
  },
  {
    "text": "processing could be used for beautifying um as my last fit and finish",
    "start": "2966400",
    "end": "2973660"
  },
  {
    "text": "so the way project works is it's a field selector right when you say select field one",
    "start": "2973660",
    "end": "2979720"
  },
  {
    "text": "field two field three from blah blah blind SQL project is kind of similar to that it",
    "start": "2979720",
    "end": "2986619"
  },
  {
    "text": "says well let me look at certain Fields within the document and only pass them",
    "start": "2986619",
    "end": "2992140"
  },
  {
    "text": "along now project is actually three operators",
    "start": "2992140",
    "end": "2997900"
  },
  {
    "text": "in a trench coat pretending to be one first it has a blacklist",
    "start": "2997900",
    "end": "3004619"
  },
  {
    "text": "whitelist Behavior which is to say project can say field name",
    "start": "3004619",
    "end": "3011819"
  },
  {
    "text": "um field name one or field name zero field name one means whitelist you can say I",
    "start": "3011819",
    "end": "3018359"
  },
  {
    "text": "want just field one two three four whatever sorry I just want field one and",
    "start": "3018359",
    "end": "3023940"
  },
  {
    "text": "field two and stuff like that and if you do that then the rest of the field you haven't mentioned won't come",
    "start": "3023940",
    "end": "3029640"
  },
  {
    "text": "back so it's kind of like a nightclub bouncer everybody who has a little pass they can",
    "start": "3029640",
    "end": "3036540"
  },
  {
    "text": "come they have a little one if you don't have the pass you're not going to be emitted on the other side",
    "start": "3036540",
    "end": "3043160"
  },
  {
    "text": "it also has the behavior of a blacklist which is",
    "start": "3043859",
    "end": "3049079"
  },
  {
    "text": "field name and a zero and in that case if the field is mentioned it will be",
    "start": "3049079",
    "end": "3055859"
  },
  {
    "text": "suppressed and all Fields you want to suppress you have to put anything that hasn't been suppressed will passed",
    "start": "3055859",
    "end": "3062700"
  },
  {
    "text": "will be passed along and then the third one is to say well",
    "start": "3062700",
    "end": "3067859"
  },
  {
    "text": "I don't want to do Blacklist whitelist what I want to do is create a new field altogether the way I want it and assign",
    "start": "3067859",
    "end": "3074339"
  },
  {
    "text": "it to values either by doing light math or just taking the original value",
    "start": "3074339",
    "end": "3080339"
  },
  {
    "text": "it's confusing but what it says is like I had a field ID coming in to project I",
    "start": "3080339",
    "end": "3086099"
  },
  {
    "text": "don't want the field ID I want it to be called first name okay then project can just say project a",
    "start": "3086099",
    "end": "3092339"
  },
  {
    "text": "quote unquote first name colon dollar value of underscore ID",
    "start": "3092339",
    "end": "3097440"
  },
  {
    "text": "and that way it will rename essentially a field and you can create structured",
    "start": "3097440",
    "end": "3102839"
  },
  {
    "text": "values or whatever so at the top what we see is a project that suppresses the ID says don't give",
    "start": "3102839",
    "end": "3109920"
  },
  {
    "text": "me back the ID and do give me the date the DT field and the bottom expression says",
    "start": "3109920",
    "end": "3117359"
  },
  {
    "text": "I want to calculate a new field I call Boost call it NDC doesn't matter so I want a",
    "start": "3117359",
    "end": "3124619"
  },
  {
    "text": "new Field named Boost you see it doesn't have a dollar in front of it so it's not an operator",
    "start": "3124619",
    "end": "3130559"
  },
  {
    "text": "and then I want the value of boost to be the result of multiplying",
    "start": "3130559",
    "end": "3137280"
  },
  {
    "text": "the value of the field score quote dollar value of field comma",
    "start": "3137280",
    "end": "3142859"
  },
  {
    "text": "by 1.1 so multiply is one of these operators",
    "start": "3142859",
    "end": "3148200"
  },
  {
    "text": "that's commutative transitive you can give it as many elements as you want",
    "start": "3148200",
    "end": "3153780"
  },
  {
    "text": "divide is not as tolerant you have to have numerator denominator add you can",
    "start": "3153780",
    "end": "3159540"
  },
  {
    "text": "have an dollar ad with many items so you can do light math assign it and project",
    "start": "3159540",
    "end": "3164940"
  },
  {
    "text": "will do it all of the changes projects does it does to one document at a time so if you pass a million documents it",
    "start": "3164940",
    "end": "3171900"
  },
  {
    "text": "won't image just one document with everything that's group project will just slice Fields out",
    "start": "3171900",
    "end": "3178319"
  },
  {
    "text": "produce new fields and pass it along",
    "start": "3178319",
    "end": "3182480"
  },
  {
    "text": "and finally we put bigger pipelines together I spoke about pipelines but I only",
    "start": "3185099",
    "end": "3191700"
  },
  {
    "text": "showed you essentially one at a time with the exception of skip match sort",
    "start": "3191700",
    "end": "3197339"
  },
  {
    "text": "they're made to be composed and that also means that our big pipeline thing of like gather process finish",
    "start": "3197339",
    "end": "3205200"
  },
  {
    "text": "that can be repeating and it could be recursive that within a finish I still",
    "start": "3205200",
    "end": "3210900"
  },
  {
    "text": "want to gather some stuff and I still want to do things it's a pipeline you can stuff it with however many",
    "start": "3210900",
    "end": "3216599"
  },
  {
    "text": "operations you need to so here we may match on the color blue",
    "start": "3216599",
    "end": "3222059"
  },
  {
    "text": "so the items had an array and in it there was blue so if the array had blue then it will pass match doesn't matter",
    "start": "3222059",
    "end": "3228540"
  },
  {
    "text": "where blue was in that because it's the set it says hey does the colors the set of",
    "start": "3228540",
    "end": "3235800"
  },
  {
    "text": "colors have blue in it if it does it will be matched unwind the colors okay",
    "start": "3235800",
    "end": "3241800"
  },
  {
    "text": "take that array that had blue and unwind it and now I'll have each color on its own",
    "start": "3241800",
    "end": "3247500"
  },
  {
    "text": "that means that I have blue colors but also red colors if they were in the original array I didn't really filter",
    "start": "3247500",
    "end": "3253920"
  },
  {
    "text": "red out I just said hey does the document have blue at all",
    "start": "3253920",
    "end": "3259800"
  },
  {
    "text": "so I Unwound them I then grouped by color and counted them sum of one is the",
    "start": "3259800",
    "end": "3265619"
  },
  {
    "text": "same as Counting and then I sorted it and then I only",
    "start": "3265619",
    "end": "3271380"
  },
  {
    "text": "took the top color across all documents so effectively the match of color just",
    "start": "3271380",
    "end": "3278700"
  },
  {
    "text": "said do this but only to documents that originally had blue that's what it is",
    "start": "3278700",
    "end": "3284700"
  },
  {
    "text": "so it takes a little more time to get used to this but with this thinking of what's the pattern okay it's a set let",
    "start": "3284700",
    "end": "3290819"
  },
  {
    "text": "me unwind it I want to process it let me use group I want to limit which ones I look at use",
    "start": "3290819",
    "end": "3296819"
  },
  {
    "text": "you know match skip sort and finally fit and finish output it in",
    "start": "3296819",
    "end": "3303540"
  },
  {
    "text": "the way you want maybe project the fields you want things like that",
    "start": "3303540",
    "end": "3308780"
  },
  {
    "text": "so where do we optimize things in The Gather stage because gather is going to look at the",
    "start": "3311460",
    "end": "3317280"
  },
  {
    "text": "original collection we want it to be index assisted and if it's index assisted",
    "start": "3317280",
    "end": "3322440"
  },
  {
    "text": "we really want to make sure that the fields I'm matching on are",
    "start": "3322440",
    "end": "3328380"
  },
  {
    "text": "indexed simple enough not only that omitting The Gather",
    "start": "3328380",
    "end": "3333960"
  },
  {
    "text": "altogether and skipping into a symbol means I process the whole collection that is a full collection scan same as",
    "start": "3333960",
    "end": "3342599"
  },
  {
    "text": "Full Table scan in relational databases a lot of i o in Cloud parlance it's a lot of scanning",
    "start": "3342599",
    "end": "3349380"
  },
  {
    "text": "it's a lot of cost so don't do that always do a gather always do a subset of",
    "start": "3349380",
    "end": "3355200"
  },
  {
    "text": "all your documents because indexes can help performance and without it your",
    "start": "3355200",
    "end": "3360599"
  },
  {
    "text": "performance will suffer if you're doing a full collection scan in even if things are in memory",
    "start": "3360599",
    "end": "3366240"
  },
  {
    "text": "it's not going to be too fast you always want to be index assisted in the assemble stage",
    "start": "3366240",
    "end": "3373440"
  },
  {
    "text": "there's not too much to optimize in a symbol stage is where what our",
    "start": "3373440",
    "end": "3378720"
  },
  {
    "text": "optimization will really be about reducing the amount of fields we work with so you might use some projects in",
    "start": "3378720",
    "end": "3385920"
  },
  {
    "text": "order to reduce the size of document you might make your pipeline go through",
    "start": "3385920",
    "end": "3391680"
  },
  {
    "text": "less data in any kind where doing secondary matches or unwinding and then",
    "start": "3391680",
    "end": "3397859"
  },
  {
    "text": "filtering the colors you didn't want again things like that to just reduce the size of things group",
    "start": "3397859",
    "end": "3406200"
  },
  {
    "text": "and sort our two pipeline operators that need to see all documents coming in before they can omit the first one how",
    "start": "3406200",
    "end": "3412980"
  },
  {
    "text": "can I tell you which is the biggest if I didn't see all of them yet how can I tell you how many sales in",
    "start": "3412980",
    "end": "3420119"
  },
  {
    "text": "January before I saw all sales for the whole year and determine if they're January",
    "start": "3420119",
    "end": "3425280"
  },
  {
    "text": "I can't because of those that those are greedy operators and",
    "start": "3425280",
    "end": "3431040"
  },
  {
    "text": "um they will ramp up memory and if sees that they use more than 100 Megs it",
    "start": "3431040",
    "end": "3436559"
  },
  {
    "text": "will shut down the pipeline and produce an error now you can tell hey it's okay to do swap to disk and it won't",
    "start": "3436559",
    "end": "3443220"
  },
  {
    "text": "shut you down but it will slow you down so that's a good reason to use gather and reduce the size of the documents",
    "start": "3443220",
    "end": "3451619"
  },
  {
    "text": "getting into group potentially by trimming away fields that group isn't operating on and that will reduce the",
    "start": "3451619",
    "end": "3457680"
  },
  {
    "text": "memory footprint of the group",
    "start": "3457680",
    "end": "3461960"
  },
  {
    "text": "and finally in present not a lot of optimization opportunities",
    "start": "3462960",
    "end": "3468420"
  },
  {
    "text": "there is merge which changes how you build pipelines because merge is smart enough to say if",
    "start": "3468420",
    "end": "3475200"
  },
  {
    "text": "I want cumulative sales over the month I can calculate them nightly and just add them to the current month",
    "start": "3475200",
    "end": "3481980"
  },
  {
    "text": "rather than calculate all sales from the beginning of time and replace everything in a collection you can do cumulative",
    "start": "3481980",
    "end": "3487800"
  },
  {
    "text": "stuff so this is where in present you you kind of think okay if I really need to do",
    "start": "3487800",
    "end": "3494700"
  },
  {
    "text": "things a little more efficiently I can do maybe incremental stuff sorting is expensive if you need sorting",
    "start": "3494700",
    "end": "3501660"
  },
  {
    "text": "do it if you don't need mango to sort for you or if you're going to sort on",
    "start": "3501660",
    "end": "3507000"
  },
  {
    "text": "the UI anyway don't sort here and the other thing is in present is if",
    "start": "3507000",
    "end": "3513599"
  },
  {
    "text": "you don't want to return everything to the client if they only need 10 to show on the page you Skip and limit and that",
    "start": "3513599",
    "end": "3519960"
  },
  {
    "text": "would make things more efficient because  can be done with a job after shipping 10 instead of shipping all",
    "start": "3519960",
    "end": "3525540"
  },
  {
    "text": "million documents from the disk so this is the optimizations around",
    "start": "3525540",
    "end": "3531660"
  },
  {
    "text": "present and with that I think we are one minute",
    "start": "3531660",
    "end": "3536940"
  },
  {
    "text": "over but I'm open to questions if anybody wants them",
    "start": "3536940",
    "end": "3542839"
  },
  {
    "text": "any questions everything good all right thank you very much",
    "start": "3544920",
    "end": "3553039"
  }
]