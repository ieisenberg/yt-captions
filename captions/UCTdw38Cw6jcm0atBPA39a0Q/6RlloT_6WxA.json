[
  {
    "start": "0",
    "end": "57000"
  },
  {
    "text": "good afternoon I gave up on waiting for the next five 1500 people to come",
    "start": "5839",
    "end": "11840"
  },
  {
    "text": "apparently they're late they miss the room in the wrong place yes this is fast where the best course",
    "start": "11840",
    "end": "18090"
  },
  {
    "text": "at this hour right now friends thank you for being here I'm very excited about",
    "start": "18090",
    "end": "25980"
  },
  {
    "text": "this presentation it's actually um rather new material and there's a lot of",
    "start": "25980",
    "end": "30990"
  },
  {
    "text": "its own I was kind of very anxious to start as early as possible so we can so we can",
    "start": "30990",
    "end": "36059"
  },
  {
    "text": "talk I'm going to talk a bit about the art of benchmarking I noticed there's a",
    "start": "36059",
    "end": "41820"
  },
  {
    "text": "lot of there's a lot of mistakes people do when benchmarking code and I just",
    "start": "41820",
    "end": "48299"
  },
  {
    "text": "wanted to make a few quick points this is not really like the meat of the of this of this talk here but I think it's",
    "start": "48299",
    "end": "54510"
  },
  {
    "text": "important as an introduction so I'm sure many of us have heard of our mouths law",
    "start": "54510",
    "end": "61070"
  },
  {
    "start": "57000",
    "end": "57000"
  },
  {
    "text": "it's used it's used usually in parallel computing who can shout handles law",
    "start": "61070",
    "end": "68000"
  },
  {
    "text": "there's a guy in the litter in the last row I assume he would say something like",
    "start": "68000",
    "end": "74030"
  },
  {
    "text": "if you have two components in a system and one is 80% contributing to the time",
    "start": "74030",
    "end": "79740"
  },
  {
    "text": "spent in running the system and there is 20% even though you improved the second",
    "start": "79740",
    "end": "85500"
  },
  {
    "text": "subsystem by 100% that's you know your",
    "start": "85500",
    "end": "91350"
  },
  {
    "text": "your gains are limited theoretically to 20% I would say it's the arm does I",
    "start": "91350",
    "end": "97370"
  },
  {
    "text": "would call this a different way I would call it Captain Obvious as law right",
    "start": "97370",
    "end": "103050"
  },
  {
    "text": "it's an obvious law but it's amazing how often people lose track of it and gonna",
    "start": "103050",
    "end": "108840"
  },
  {
    "text": "free simply forget the simple reality that if you have a number you have a number of processes that contribute to",
    "start": "108840",
    "end": "116570"
  },
  {
    "text": "to a computation definitely that so the",
    "start": "116570",
    "end": "121650"
  },
  {
    "text": "critical path is going to be where you want to spend your time on optimizing I've seen a lot of people dedicating",
    "start": "121650",
    "end": "128459"
  },
  {
    "text": "inordinate amounts of time speeding up and I'm not kidding command line",
    "start": "128459",
    "end": "134010"
  },
  {
    "text": "processing this is not a joke and there's been a discussion actually can",
    "start": "134010",
    "end": "140430"
  },
  {
    "text": "finally there's records of it online what people are like oh this command line processing I can make it faster",
    "start": "140430",
    "end": "147390"
  },
  {
    "text": "and it will take instead of two microseconds it would be one microsecond",
    "start": "147390",
    "end": "154140"
  },
  {
    "text": "which is by the way it's a hundred percent improvement right it's an amazing percentage wise improvement but",
    "start": "154140",
    "end": "161610"
  },
  {
    "text": "of course it doesn't matter in the grand scale of things so I don't think I need to insist on the law of FanDuel so",
    "start": "161610",
    "end": "167430"
  },
  {
    "text": "whenever you want to optimize pretty much anything it even in life if you wish you must measure right so you can you",
    "start": "167430",
    "end": "175290"
  },
  {
    "text": "know the classic dictum goes you can't improve what you can't measure and that's definitely the case with",
    "start": "175290",
    "end": "181620"
  },
  {
    "text": "performance I've seen a lot of people spending time on improving things without having a clear idea or where",
    "start": "181620",
    "end": "188940"
  },
  {
    "text": "they started from and or what was the purpose of going the you know to a faster code etc so I'm sure I don't need",
    "start": "188940",
    "end": "195810"
  },
  {
    "text": "to because those are bad people they are not in this room present company is awesome right we're doing great thank",
    "start": "195810",
    "end": "203250"
  },
  {
    "text": "you so juice hot sauce from the whole application there is our complementary",
    "start": "203250",
    "end": "209370"
  },
  {
    "text": "law lot mass law and a lot minds not an",
    "start": "209370",
    "end": "216150"
  },
  {
    "text": "Indian researcher is just under spell deity the other way around just a reverse right STD reverse right so this",
    "start": "216150",
    "end": "225690"
  },
  {
    "text": "is a less obvious law and it goes well you gotta optimize hot as hot spots",
    "start": "225690",
    "end": "230820"
  },
  {
    "text": "outside the application and then plug it back and measure again which is not",
    "start": "230820",
    "end": "236730"
  },
  {
    "text": "intuitive who can give us an perception of why that would be why would I advise people to do that",
    "start": "236730",
    "end": "242730"
  },
  {
    "text": "ideas thoughts so I want to make it",
    "start": "242730",
    "end": "248370"
  },
  {
    "text": "clear let's say I determine that a particular algorithm is critical to the",
    "start": "248370",
    "end": "253739"
  },
  {
    "text": "runtime application I need to spend time improving it so I say don't improve it",
    "start": "253739",
    "end": "258780"
  },
  {
    "text": "inside the application take it out into a smaller benchmark improve it and then",
    "start": "258780",
    "end": "265770"
  },
  {
    "text": "plug it back measure again make sure the improvements carried which is there's kind of there's a story to that we're",
    "start": "265770",
    "end": "271919"
  },
  {
    "text": "gonna get to that and then be happy right so why would I advise people to do",
    "start": "271919",
    "end": "277020"
  },
  {
    "text": "that well yes please",
    "start": "277020",
    "end": "282830"
  },
  {
    "text": "my benchmark stimulus would need to so that's a challenge more than my benchmark input would need to simulate",
    "start": "284450",
    "end": "290610"
  },
  {
    "text": "what the application would do correct but that would be a requirement for the this whole process of yes Patricia you",
    "start": "290610",
    "end": "298800"
  },
  {
    "text": "want to remove noise exactly so a central thing that happens in modern",
    "start": "298800",
    "end": "304440"
  },
  {
    "text": "computing is that there's a lot of noise going on about and it's very often that",
    "start": "304440",
    "end": "309990"
  },
  {
    "text": "you have this 120 percent speed-up he doesn't come as like you have an idea",
    "start": "309990",
    "end": "317010"
  },
  {
    "text": "and it improves the thing by 1/5 it comes at 9 2% improvements why 9 and not",
    "start": "317010",
    "end": "324420"
  },
  {
    "text": "10 the math is not right is there is it",
    "start": "324420",
    "end": "329900"
  },
  {
    "text": "compounding thank you very much so they compound so it's actually 2 to the power of 1 point something a little and you",
    "start": "330230",
    "end": "336990"
  },
  {
    "text": "get to 20% by only 9 iterations in a 2 percent improvement cycle so very often",
    "start": "336990",
    "end": "344910"
  },
  {
    "text": "you want to take the algorithm from the noisy environment in which it resides and be able be able to crank 1% and be",
    "start": "344910",
    "end": "352950"
  },
  {
    "text": "able to measure that and be able to be confident that that particular 1%",
    "start": "352950",
    "end": "358230"
  },
  {
    "text": "improvement is going to count and be carried into the final application so",
    "start": "358230",
    "end": "364530"
  },
  {
    "text": "also there's a number of practicalities associated with this the edit and",
    "start": "364530",
    "end": "370350"
  },
  {
    "text": "benchmark cycle is Sloane the whole application so definitely you want to have a quick iteration in measuring",
    "start": "370350",
    "end": "378210"
  },
  {
    "text": "performance so you don't need to so you can you know have you can try many ideas fast it's amazing how much friction that",
    "start": "378210",
    "end": "386810"
  },
  {
    "text": "how much how much friction can can impede your way of thinking every all of us know like slow compile times come on",
    "start": "386810",
    "end": "393510"
  },
  {
    "text": "right the slower compiler is the more you your mental flow gets gets more",
    "start": "393510",
    "end": "398550"
  },
  {
    "text": "disturbed right but so this will be the counter the counter effect here do not",
    "start": "398550",
    "end": "405300"
  },
  {
    "text": "forget that optimizations have global effects there's cash effects these",
    "start": "405300",
    "end": "410640"
  },
  {
    "text": "memory allocations and deallocations there will be branch predictor hogging the billikin tension etc etc etc",
    "start": "410640",
    "end": "417270"
  },
  {
    "text": "so that's why after improve your thing by 20% you gotta carry back in the",
    "start": "417270",
    "end": "422430"
  },
  {
    "text": "application and see what happened to those two 20% right true story when work",
    "start": "422430",
    "end": "429719"
  },
  {
    "text": "at Facebook on the HHV M compiler which compiles PHP code into a JIT and we",
    "start": "429719",
    "end": "438150"
  },
  {
    "text": "can't do that that is not possible to do because the application is so hide it's",
    "start": "438150",
    "end": "443879"
  },
  {
    "text": "dominated by the global effects and the main thing that the team had to fight",
    "start": "443879",
    "end": "450810"
  },
  {
    "text": "against was cache misses on the instruction cache it turns out large code was the main number one by a large",
    "start": "450810",
    "end": "457710"
  },
  {
    "text": "margin issue so if think of this if your main problem is I have to be code is the first step",
    "start": "457710",
    "end": "465690"
  },
  {
    "text": "you want to take all let's take the big portion of the big code and make it smaller measure that it's nonsensical",
    "start": "465690",
    "end": "471750"
  },
  {
    "text": "right doesn't make sense so therefore we had to measure on the whole application there's an entire team",
    "start": "471750",
    "end": "477000"
  },
  {
    "text": "I'm not kidding and tighten with scientists and statisticians and stuff dedicated to not optimizing that was a",
    "start": "477000",
    "end": "482940"
  },
  {
    "text": "different team I wasn't that there's another different team dedicated with being able to measure minut differences",
    "start": "482940",
    "end": "491219"
  },
  {
    "text": "in performance and the way it goes you send like five hundred thousand pages",
    "start": "491219",
    "end": "497400"
  },
  {
    "text": "with the baseline the existing code you send half a million pages with the new",
    "start": "497400",
    "end": "504620"
  },
  {
    "text": "supposedly improved code and you're trying to find that deltas and you're",
    "start": "504620",
    "end": "510599"
  },
  {
    "text": "looking at you know looking at really real all and the best we could get to was one percent so if it was less than",
    "start": "510599",
    "end": "516419"
  },
  {
    "text": "one percent we will throw it away because it was not demonstrably better",
    "start": "516419",
    "end": "521630"
  },
  {
    "text": "so huh those are the days so anyway so",
    "start": "521630",
    "end": "528449"
  },
  {
    "text": "I'm just saying that most of the time you don't have that kind of problem but sometimes you do right so a slide that",
    "start": "528449",
    "end": "536070"
  },
  {
    "text": "is not here because it's I shouldn't mention this and you you're not play",
    "start": "536070",
    "end": "544649"
  },
  {
    "text": "victim of this right York or some not even your co-workers your former co-workers are",
    "start": "544649",
    "end": "551750"
  },
  {
    "text": "the bad people right I've seen time and again you know it bears mentioning",
    "start": "551750",
    "end": "557080"
  },
  {
    "text": "people still measure the speed of debug bills you have no business measuring the speed",
    "start": "557080",
    "end": "563780"
  },
  {
    "text": "of a debug built it's like I spent once one week because a co-worker kind of",
    "start": "563780",
    "end": "570950"
  },
  {
    "text": "said oh actually this thing is really slow much slower than the baseline it's why did we make that change",
    "start": "570950",
    "end": "576410"
  },
  {
    "text": "oh so we gotta look into this and find out wait a second I was measuring the debug build the debug builds that was",
    "start": "576410",
    "end": "583520"
  },
  {
    "text": "supposed to be fast so it's not there's no purpose in in it being fast right so",
    "start": "583520",
    "end": "590210"
  },
  {
    "text": "you want to measure that there's a lot of difference said you know people who do different setups for baseline and",
    "start": "590210",
    "end": "596900"
  },
  {
    "text": "measured we buy me by which I mean the following for example consider this you have your",
    "start": "596900",
    "end": "604220"
  },
  {
    "text": "baseline which is the sort of the existing algorithm an existing code then you start the timer you do it and you",
    "start": "604220",
    "end": "609770"
  },
  {
    "text": "stop the timer right so we have that and then right after that you start again",
    "start": "609770",
    "end": "616790"
  },
  {
    "text": "the timer and and that's your code and stop the timer compare that to what's",
    "start": "616790",
    "end": "622190"
  },
  {
    "text": "the fellow mistake what is the fellow mistake poor the heap thank you yes yeah",
    "start": "622190",
    "end": "631310"
  },
  {
    "text": "the ones you say the key words I mean I know you I know I know what you up to so the moment you said the key word I knew",
    "start": "631310",
    "end": "636710"
  },
  {
    "text": "you have the answer so essentially consider this consider that the baseline",
    "start": "636710",
    "end": "641750"
  },
  {
    "text": "is going to allocate memory hello Camela look new whatnot right allocates memory and then it he allocates it so it looks",
    "start": "641750",
    "end": "649280"
  },
  {
    "text": "like everything went back to normal but no it didn't go back to normal the heap",
    "start": "649280",
    "end": "655010"
  },
  {
    "text": "right now is in a completely different state because much of what a good memory allocator does is collect you know hold",
    "start": "655010",
    "end": "663680"
  },
  {
    "text": "onto memory that was allocated and then be allocated and put it in neat data structures that are ready for the next",
    "start": "663680",
    "end": "669560"
  },
  {
    "text": "fight right so they have that free lists they have you know the all of that you're not to mention the cache is warm",
    "start": "669560",
    "end": "676070"
  },
  {
    "text": "not to mention a variety of other effects right so we don't you know we you don't want",
    "start": "676070",
    "end": "683570"
  },
  {
    "text": "your former co-workers to do that kind of stuff agreed yes thank you",
    "start": "683570",
    "end": "689440"
  },
  {
    "text": "not to mention things like worth of cash files databases DNS and all that stuff",
    "start": "689440",
    "end": "695870"
  },
  {
    "text": "if you do a lookup in in the base line then it's going to be much faster the second time you should not that",
    "start": "695870",
    "end": "701900"
  },
  {
    "text": "techniques on every operating system and file system to essentially cool the file",
    "start": "701900",
    "end": "709880"
  },
  {
    "text": "cache how would you do it on Windows",
    "start": "709880",
    "end": "715450"
  },
  {
    "text": "restart the machine yeah that's gonna work and that you know I absolutely try",
    "start": "716860",
    "end": "724430"
  },
  {
    "text": "would do that yes there is a technique that somebody got don't use Windows but I know there's a possibility to dismount",
    "start": "724430",
    "end": "731210"
  },
  {
    "text": "and remount drives in in Windows right is there Paul",
    "start": "731210",
    "end": "736450"
  },
  {
    "text": "okay so my here here's the thing my hope was that there's gonna be a person in this room is gonna be yeah of course you",
    "start": "736450",
    "end": "742340"
  },
  {
    "text": "do XY and Z and that like you do what that fine person said and now I'm kind",
    "start": "742340",
    "end": "747860"
  },
  {
    "text": "of lost because I don't I dunno how to do it in Linux you mount and unmount the filesystem you can what you can read",
    "start": "747860",
    "end": "756590"
  },
  {
    "text": "lots of other files where they'll be slow right yeah actually that's that's very - then you know absent any other",
    "start": "756590",
    "end": "761690"
  },
  {
    "text": "but in principle Linux uses all of the i-news Ram as file buffers caches so and",
    "start": "761690",
    "end": "768950"
  },
  {
    "text": "a way to get rid of that is your mounted drive so you're on mount jiri mount and then it starts cold that's great okay",
    "start": "768950",
    "end": "775400"
  },
  {
    "text": "but still that's not the topic of today which will get in don't worry we're",
    "start": "775400",
    "end": "781280"
  },
  {
    "text": "getting there another pitfall that I saw your former",
    "start": "781280",
    "end": "786380"
  },
  {
    "text": "co-workers doing is they include ancillary work in measurement probably",
    "start": "786380",
    "end": "792980"
  },
  {
    "text": "like statistically a bunch of measurements measure like the speed of printf right you know and all that kind",
    "start": "792980",
    "end": "800000"
  },
  {
    "text": "of stuff so you know of course this is not something that any of us would ever do I've seen also a procedural mistake",
    "start": "800000",
    "end": "807890"
  },
  {
    "text": "when I say procedurally not innocent a procedural programming procedure by means of like human procedure like way",
    "start": "807890",
    "end": "813200"
  },
  {
    "text": "of do things a procedural mistake and what I think is really distinguishing between",
    "start": "813200",
    "end": "818209"
  },
  {
    "text": "scientists and engineers the scientists would be like you know like Sheldon in that show right",
    "start": "818209",
    "end": "823519"
  },
  {
    "text": "so very very obsessively changing one",
    "start": "823519",
    "end": "830089"
  },
  {
    "text": "parameter at a time and measuring again I've seen Pyrrha I change like 10 I had",
    "start": "830089",
    "end": "835490"
  },
  {
    "text": "10 ideas so I'm planning them all and let me measure again and then we have no",
    "start": "835490",
    "end": "840529"
  },
  {
    "text": "idea which actually helped and which not and maybe there's even two that cancel each other right so you don't want that",
    "start": "840529",
    "end": "847819"
  },
  {
    "text": "to happen so you change one thing at a time very rigorously and you proceed like that not to mention optimize rare",
    "start": "847819",
    "end": "855589"
  },
  {
    "text": "cases and pesum eyes others the frequent cases happy credit to Stack Overflow",
    "start": "855589",
    "end": "864259"
  },
  {
    "text": "which feature the following very interesting discussion there's a",
    "start": "864259",
    "end": "869499"
  },
  {
    "text": "programmer saying why is sort slower than is sorted on sorted arrays so the",
    "start": "869499",
    "end": "879470"
  },
  {
    "text": "experiment would be I sort an array I run is sorted which checks whether it",
    "start": "879470",
    "end": "884720"
  },
  {
    "text": "returns a bool right and also I sort the array and by some reasoning it would go",
    "start": "884720",
    "end": "893029"
  },
  {
    "text": "well sort should do absolutely nothing if the result is already sorted so it",
    "start": "893029",
    "end": "898699"
  },
  {
    "text": "should have the exact speed of is sorted and the solution envisioned by that fine programmer was the first running sort",
    "start": "898699",
    "end": "905750"
  },
  {
    "text": "should be if is sorted returned I'm sure",
    "start": "905750",
    "end": "911600"
  },
  {
    "text": "she'd ironic right because that's gonna work exactly once in a lifetime for it",
    "start": "911600",
    "end": "918019"
  },
  {
    "text": "just so happen I pass like an idiot and already sorted array to sort and yes that was fast",
    "start": "918019",
    "end": "923360"
  },
  {
    "text": "ladies and gentleman thank you very much but actually it Pesa mised everybody else because it makes an extra pass to",
    "start": "923360",
    "end": "929059"
  },
  {
    "text": "the array without actually doing anything of interest all right",
    "start": "929059",
    "end": "935529"
  },
  {
    "text": "that's the example I meant to I'd the guide should collect that graph which is very nice of him so sort is slower than",
    "start": "935529",
    "end": "943639"
  },
  {
    "start": "936000",
    "end": "936000"
  },
  {
    "text": "is sorted yes that's true and is expected so today we're facing impossible odds in",
    "start": "943639",
    "end": "951560"
  },
  {
    "start": "947000",
    "end": "947000"
  },
  {
    "text": "optimizing our code today's computers are very too complicated for our poor",
    "start": "951560",
    "end": "956870"
  },
  {
    "text": "minds I'm not kidding this is like really a table a table point in history to be out you know what I want to be I",
    "start": "956870",
    "end": "963110"
  },
  {
    "text": "want to be in like the 70s the days of zilog z80 the 80s sorry the eighties",
    "start": "963110",
    "end": "971060"
  },
  {
    "text": "great music too so I want to be in the 80s and the the good days of the",
    "start": "971060",
    "end": "976370"
  },
  {
    "text": "eighties are at the zilog z80 the the one of the first micro processors of any success and back then it was there's no",
    "start": "976370",
    "end": "982880"
  },
  {
    "text": "pipelining you knew exactly how many cycles hitting each instruction took you",
    "start": "982880",
    "end": "988130"
  },
  {
    "text": "had zero weight memory access friends amazing you could get all the way to",
    "start": "988130",
    "end": "995360"
  },
  {
    "text": "memory and back fetch the data it all happened in one cycle no cash no no no",
    "start": "995360",
    "end": "1003760"
  },
  {
    "text": "all of that nonsense did not exist no speculative execution of branch prediction what's with all that crap man",
    "start": "1003760",
    "end": "1010630"
  },
  {
    "text": "you know none of that you could actually quite literally read the program and see oh this is gonna take 253 cycles to",
    "start": "1010630",
    "end": "1018490"
  },
  {
    "text": "execute you knew exactly what we're getting right so well fast forward to",
    "start": "1018490",
    "end": "1024850"
  },
  {
    "text": "nowadays Wow they got to a point where amazingly we have like in trouble you can't",
    "start": "1024850",
    "end": "1031270"
  },
  {
    "text": "measure what you know it's impossible to obtain the same measurement twice when you measure speed right so you even have",
    "start": "1031270",
    "end": "1039400"
  },
  {
    "text": "things like dynamic frequency control who knows about so yeah thank you so",
    "start": "1039400",
    "end": "1044890"
  },
  {
    "text": "whatever it measure you know whenever you use the CPU runs it figures it's idling so then it slows down which you",
    "start": "1044890",
    "end": "1054220"
  },
  {
    "text": "know as an aside is very very human thing to do let's take a nap rights take",
    "start": "1054220",
    "end": "1059260"
  },
  {
    "text": "a little break so it ran some slow speed and then when you kind of start again and detects there's work to be done like",
    "start": "1059260",
    "end": "1065890"
  },
  {
    "text": "a loop that does things well let me accelerate and all that stuff so it's",
    "start": "1065890",
    "end": "1071080"
  },
  {
    "text": "virtually impossible nowadays to get identical timings for the same experiment and by the way this was very",
    "start": "1071080",
    "end": "1080530"
  },
  {
    "text": "it's a marketing thing there's a consistent trend since the 80s to trade",
    "start": "1080530",
    "end": "1088690"
  },
  {
    "text": "reproducible performance for average speed and not everybody did so so this",
    "start": "1088690",
    "end": "1095860"
  },
  {
    "text": "was this was a marketing source essentially it was like that people use desktop applications there is Excel and",
    "start": "1095860",
    "end": "1102910"
  },
  {
    "text": "we want people to essentially perceive that on average the computer is fast however there are some applications in",
    "start": "1102910",
    "end": "1109780"
  },
  {
    "text": "which you do one reproducible performance and create a supercomputer company they did have such a clientele",
    "start": "1109780",
    "end": "1116770"
  },
  {
    "text": "and Cray had no cash for many years I'm not sure if like given today they gave",
    "start": "1116770",
    "end": "1123100"
  },
  {
    "text": "up but they had no cash they had like all it was all deterministic right so",
    "start": "1123100",
    "end": "1129580"
  },
  {
    "text": "craze not is not the sort of a Titan of computing nowadays so in a way average",
    "start": "1129580",
    "end": "1135130"
  },
  {
    "text": "performance one so one great thing that",
    "start": "1135130",
    "end": "1142510"
  },
  {
    "text": "should not help you is intuition silicon",
    "start": "1142510",
    "end": "1153820"
  },
  {
    "text": "is not intuitive it's it's very difficult for a human being to travel",
    "start": "1153820",
    "end": "1160480"
  },
  {
    "text": "develop a good intuition of how a CPA is gonna he's gonna run so we make almost",
    "start": "1160480",
    "end": "1166450"
  },
  {
    "text": "without without mistake we make narrow obsolete wrong assumptions for example a",
    "start": "1166450",
    "end": "1172060"
  },
  {
    "text": "common dictum is for your instruction means faster code is that room who's",
    "start": "1172060",
    "end": "1178420"
  },
  {
    "text": "with me fewer instructions are faster code yes",
    "start": "1178420",
    "end": "1185520"
  },
  {
    "text": "one instruction what if that instruction is fetching from memory sorry",
    "start": "1186570",
    "end": "1195690"
  },
  {
    "text": "you get to pick the instruction how that's cheating okay you win okay so",
    "start": "1195690",
    "end": "1201840"
  },
  {
    "text": "definitely that's something that's more subtle than that but that's actually definitely not always fair few",
    "start": "1201840",
    "end": "1207269"
  },
  {
    "text": "instruction means faster code but there's also a proxy phenomenon by on",
    "start": "1207269",
    "end": "1212549"
  },
  {
    "text": "average if you get to reduce the number of instructions you're gonna there's only this much you can you can go",
    "start": "1212549",
    "end": "1217710"
  },
  {
    "text": "without actually accelerating the code so it's a good proxy to look at but it's not definitely an immutable truth so",
    "start": "1217710",
    "end": "1224850"
  },
  {
    "text": "that doesn't go how about that is faster than computation caching memorization the nice things right of course I don't",
    "start": "1224850",
    "end": "1234210"
  },
  {
    "text": "need to pause and ask people and stop because you know very well that sometimes the data actually it's too much just too much of it and this cache",
    "start": "1234210",
    "end": "1240600"
  },
  {
    "text": "effect so data is not faster than computation some computation but not all",
    "start": "1240600",
    "end": "1246000"
  },
  {
    "text": "is faster than data barato right so you gotta find the right",
    "start": "1246000",
    "end": "1252389"
  },
  {
    "text": "balance and there's one good intuition you can have which is I should sit down",
    "start": "1252389",
    "end": "1258539"
  },
  {
    "text": "and time this stuff that's the best that's not one intuition you can use",
    "start": "1258539",
    "end": "1266658"
  },
  {
    "text": "it's been many very many times I I do this for a living it's been very very",
    "start": "1267409",
    "end": "1272429"
  },
  {
    "text": "many times I've I've been like ah let me measure this crazy stupid idea that I'm",
    "start": "1272429",
    "end": "1278490"
  },
  {
    "text": "sure is gonna be terrible and it went well advise of most of the time it was vice-versa let me try this awesome idea",
    "start": "1278490",
    "end": "1285179"
  },
  {
    "text": "which I have and it just works and it's amazing and it's fast and it was just",
    "start": "1285179",
    "end": "1290399"
  },
  {
    "text": "four times slower it's a it's actually it just keeps on happening it's like my",
    "start": "1290399",
    "end": "1297809"
  },
  {
    "text": "Donuts karma maybe I've done something really bad in a previous life so measuring is gonna give up on leg leg up",
    "start": "1297809",
    "end": "1305460"
  },
  {
    "text": "on experts who are too smart to measure that's a classic code so that said there",
    "start": "1305460",
    "end": "1315419"
  },
  {
    "start": "1312000",
    "end": "1312000"
  },
  {
    "text": "are a number of heuristics you can rely on and when I say heuristics I mean things",
    "start": "1315419",
    "end": "1321450"
  },
  {
    "text": "to look at without blindly following them or believing them they are proxies",
    "start": "1321450",
    "end": "1327450"
  },
  {
    "text": "they're heuristics they're for example math is your most important airline optimization we are past the day",
    "start": "1327450",
    "end": "1334860"
  },
  {
    "text": "when we would do things like self-modifying code that would you know write a bit here and a bit there an",
    "start": "1334860",
    "end": "1340410"
  },
  {
    "text": "assembler and machine code I think we'll pass that age I think we're in in the age of math think you the virtue like",
    "start": "1340410",
    "end": "1349110"
  },
  {
    "text": "all optimizations of interest nowadays are motivated by mathematics and by",
    "start": "1349110",
    "end": "1354510"
  },
  {
    "text": "mathematics I mean the following you don't transformation the code that you know is going to make the code faster and use math to prove to yourself and",
    "start": "1354510",
    "end": "1361140"
  },
  {
    "text": "others that the transformation preserves the semantics of the code right also you",
    "start": "1361140",
    "end": "1368040"
  },
  {
    "text": "can use things like mathematical identities yes because math doesn't care",
    "start": "1368040",
    "end": "1374940"
  },
  {
    "text": "about expenses math is like yeah you know I'm gonna do a super factorial no",
    "start": "1374940",
    "end": "1379950"
  },
  {
    "text": "problem I can prove things about it and math doesn't care about how much is spent computing things things as long as",
    "start": "1379950",
    "end": "1385710"
  },
  {
    "text": "it gets the proof right so math doesn't say what's interesting and what's not and what's cheap and what's not mad that",
    "start": "1385710",
    "end": "1391590"
  },
  {
    "text": "does tell you only what's there and what's not what's true and what's not so that's how you use it I think we're also",
    "start": "1391590",
    "end": "1399360"
  },
  {
    "text": "kind of moving a bit away from a variety of mini tricks that people is an",
    "start": "1399360",
    "end": "1404850"
  },
  {
    "text": "optimization we're moving again to towards the more principled approach I'm talking about the last maybe five maybe",
    "start": "1404850",
    "end": "1412140"
  },
  {
    "text": "ten years there's been a sort of a trend another heuristic that we can use is",
    "start": "1412140",
    "end": "1418890"
  },
  {
    "text": "that computers like boring and they don't like surprises",
    "start": "1418890",
    "end": "1424100"
  },
  {
    "text": "computers like boring the best funk the best thing to optimize for a compiler is",
    "start": "1424100",
    "end": "1430680"
  },
  {
    "text": "a main function that's a million lines and it has no branching no if and oils and no nothing that don't write code",
    "start": "1430680",
    "end": "1437460"
  },
  {
    "text": "like that but you know this is like this would be like ideal because just straight line code it just goes and goes and goes and all the compiles to do is",
    "start": "1437460",
    "end": "1444810"
  },
  {
    "text": "fetch the next instruction execute it and retire it and the the the CP is very",
    "start": "1444810",
    "end": "1451170"
  },
  {
    "text": "good at that kind of stuff so they hate surprises which come into a form of",
    "start": "1451170",
    "end": "1457440"
  },
  {
    "text": "branching you don't know where you're gonna go right Dependencies I have I need to do this",
    "start": "1457440",
    "end": "1464550"
  },
  {
    "text": "first and the second and by the time you know it I can't do anything here without finishing this right so in a way this",
    "start": "1464550",
    "end": "1472530"
  },
  {
    "text": "guy is surprised by the result of this operation right indirect calls are the",
    "start": "1472530",
    "end": "1478380"
  },
  {
    "text": "worst we've been talking with a couple of colleagues like no matter what no matter how good cpu is get a pointer to",
    "start": "1478380",
    "end": "1486030"
  },
  {
    "text": "a function is gonna ruin their day you have a pointer to a function you're",
    "start": "1486030",
    "end": "1492150"
  },
  {
    "text": "having a good time there and as soon as the pointer of function comes into place like oh my goodness this is so slow like",
    "start": "1492150",
    "end": "1498660"
  },
  {
    "text": "they can't they I'm not sure why they can't figure out a way to make that like a hundred times faster because it is",
    "start": "1498660",
    "end": "1504240"
  },
  {
    "text": "real slow right I was kidding it's a hard problem right so the thing is again it's a surprise",
    "start": "1504240",
    "end": "1510780"
  },
  {
    "text": "because you don't know what function you're calling you know this kind of stuff algorithm I'm gonna for myself",
    "start": "1510780",
    "end": "1516930"
  },
  {
    "text": "we're a bit in a hurry because there's there's so much material but I'm gonna afford myself a minute to tell you a",
    "start": "1516930",
    "end": "1522240"
  },
  {
    "text": "story that I think it has it has meaning I was so I had a paper on median finding",
    "start": "1522240",
    "end": "1529230"
  },
  {
    "text": "and I was talking to a researcher about an improved sort algorithm and part of",
    "start": "1529230",
    "end": "1534930"
  },
  {
    "text": "that improves old algorithm would be the insertion sort part which is the endgame of quicksort right quicksort is not very",
    "start": "1534930",
    "end": "1542460"
  },
  {
    "text": "good for small inputs like you're like 50 items or 30 items or 20 items",
    "start": "1542460",
    "end": "1547500"
  },
  {
    "text": "definitely don't want to use quicksort anymore you want to switch to a to an algorithm that is bankrupt B go in a",
    "start": "1547500",
    "end": "1558060"
  },
  {
    "text": "bigger way however when the numbers are small is you know 20 times 19 is not too",
    "start": "1558060",
    "end": "1563820"
  },
  {
    "text": "bad right meaning like 20 squared right so the end game for quicksort would be",
    "start": "1563820",
    "end": "1569730"
  },
  {
    "text": "insertion sort which goes the following way it goes you start from the from the left so again imagine like 20 numbers so",
    "start": "1569730",
    "end": "1577560"
  },
  {
    "text": "it start from the left and you're going to build a sorted array by inserting from the you know the unsorted portion",
    "start": "1577560",
    "end": "1583500"
  },
  {
    "text": "into the sorted array and that's your insertion sort and it takes its quadratic and every time you're going to",
    "start": "1583500",
    "end": "1589530"
  },
  {
    "text": "do the next insertion you're going to have to search the value to insert into",
    "start": "1589530",
    "end": "1594909"
  },
  {
    "text": "they're already sorted array make sense and they're gonna move you're gonna move",
    "start": "1594909",
    "end": "1600369"
  },
  {
    "text": "the rest right insert a and move the rest right understood this algorithm is",
    "start": "1600369",
    "end": "1605909"
  },
  {
    "text": "pretty well known even though you didn't write it in awhile of course I didn't write it either in years but you know I",
    "start": "1605909",
    "end": "1613119"
  },
  {
    "text": "remember from the drunken days of college I do remember you know I kind of I'm fluent with it right and we will we",
    "start": "1613119",
    "end": "1619749"
  },
  {
    "text": "are so now insertion sort so this which researcher implements an",
    "start": "1619749",
    "end": "1625149"
  },
  {
    "text": "insertion sort that does the following whenever it needs to insert the next value it starts from the end of the",
    "start": "1625149",
    "end": "1630159"
  },
  {
    "text": "already sorted array in searches for linearly and then finds the insertion point inserts move moves on right but",
    "start": "1630159",
    "end": "1637749"
  },
  {
    "text": "then so clever I said you mister are not getting it",
    "start": "1637749",
    "end": "1643509"
  },
  {
    "text": "you do need to the binary search binary search is gonna go in the middle of the",
    "start": "1643509",
    "end": "1649659"
  },
  {
    "text": "already sorted portion and it's going to do dramatically fewer comparisons because it binary search log and instead",
    "start": "1649659",
    "end": "1656830"
  },
  {
    "text": "of linear right yes which algorithm was four times",
    "start": "1656830",
    "end": "1662259"
  },
  {
    "text": "smaller slower yes mine the binary",
    "start": "1662259",
    "end": "1667269"
  },
  {
    "text": "search was not only a bit so slower not only depending on things slower it was",
    "start": "1667269",
    "end": "1674099"
  },
  {
    "text": "unambiguously unequivocally way slower than the naive I'm gonna do a linear",
    "start": "1674099",
    "end": "1680559"
  },
  {
    "text": "search from the back of the inserted array my question to you in the challenge he took us days to figure out",
    "start": "1680559",
    "end": "1686409"
  },
  {
    "text": "why so I'm gonna give you 30 seconds why do you think that yes you don't get any",
    "start": "1686409",
    "end": "1695320"
  },
  {
    "text": "prefetching no they were talking small arrays it was really there's no cash issues branching what about branching",
    "start": "1695320",
    "end": "1705659"
  },
  {
    "text": "excellent thank you so the answer was it's the brand it's the is the surprise",
    "start": "1713429",
    "end": "1718600"
  },
  {
    "text": "that comes with branching consider this when you do a loop that goes from the end from the end of the sorted portion",
    "start": "1718600",
    "end": "1724149"
  },
  {
    "text": "and does a linear search how many times do you fail to predict you may fail at",
    "start": "1724149",
    "end": "1734739"
  },
  {
    "text": "the beginning the first comparison you may fail to predict it because you have no idea what state you're in so in the",
    "start": "1734739",
    "end": "1739809"
  },
  {
    "text": "worst case you're gonna fail once and then you go and you're gonna go you succeed at predicting that it's gonna keep going",
    "start": "1739809",
    "end": "1745389"
  },
  {
    "text": "you succeed at predicting because the predictor works whenever you succeed to do something you assuming it's gonna go",
    "start": "1745389",
    "end": "1751869"
  },
  {
    "text": "again just as fine so it assumes it goes well so the loop is gonna go with good prediction until the found portion which",
    "start": "1751869",
    "end": "1759460"
  },
  {
    "text": "is the second fail of predicting there's two failures to predict however when you",
    "start": "1759460",
    "end": "1768009"
  },
  {
    "text": "do binary search every search is interested every every test is",
    "start": "1768009",
    "end": "1774609"
  },
  {
    "text": "interesting and surprising because depending on a t-girl left or you go right so it's not like it's not boring so you may fail and you",
    "start": "1774609",
    "end": "1782619"
  },
  {
    "text": "are gonna fail by you can prove very clearly that you're gonna fail multiple",
    "start": "1782619",
    "end": "1787720"
  },
  {
    "text": "times to predict the next comparison because it goes all over the place right so that's kind of an interesting lesson",
    "start": "1787720",
    "end": "1795159"
  },
  {
    "text": "whereby not only I used an algorithm that was theoretically faster it",
    "start": "1795159",
    "end": "1801729"
  },
  {
    "text": "provably did I measure Dom of comparisons it was dramatically smaller",
    "start": "1801729",
    "end": "1806879"
  },
  {
    "text": "however the realities of hardware settled in and changed the outcome was",
    "start": "1806879",
    "end": "1815019"
  },
  {
    "text": "it's an interesting process is to spend time on I think it's gonna instructive kind of thing you notes okay so",
    "start": "1815019",
    "end": "1822869"
  },
  {
    "text": "computers like boring they don't like surprises that was the top point",
    "start": "1824429",
    "end": "1830849"
  },
  {
    "text": "indirect rights are slow strengths hurts when I say strengths I mean difficult",
    "start": "1830849",
    "end": "1835869"
  },
  {
    "text": "operations right division hurts more than multiplication multiplication has",
    "start": "1835869",
    "end": "1842109"
  },
  {
    "text": "more than addition etc smallest beautiful small cow small Dara is beautiful though that may change",
    "start": "1842109",
    "end": "1849140"
  },
  {
    "text": "there's been I've read a few articles about this already so there is the",
    "start": "1849140",
    "end": "1854680"
  },
  {
    "text": "advent of some new kind of memory types which are so fast that you need four",
    "start": "1854680",
    "end": "1860150"
  },
  {
    "text": "CPUs to drive them and they are used currently in very specialized applications but if those become",
    "start": "1860150",
    "end": "1867800"
  },
  {
    "text": "mainstream we may not have a memory hierarchy issue anymore so that may",
    "start": "1867800",
    "end": "1873500"
  },
  {
    "text": "change in the future gonna have memory that's so fast you actually can saturate it so that was the that's the sort of",
    "start": "1873500",
    "end": "1879680"
  },
  {
    "text": "the most recent development I know about cool but before that don't forget",
    "start": "1879680",
    "end": "1890000"
  },
  {
    "start": "1885000",
    "end": "1885000"
  },
  {
    "text": "whenever a benchmark keep the following in mind the goal is to estimate the",
    "start": "1890000",
    "end": "1895130"
  },
  {
    "text": "speed of some algorithm and the usual procedure is choose experimental conditions run experiment multiple times",
    "start": "1895130",
    "end": "1902150"
  },
  {
    "text": "and then take the average and by the time I am done reading the slide I have",
    "start": "1902150",
    "end": "1907430"
  },
  {
    "text": "made a fatal mistake which you will tell me about leave you a victor sorry you",
    "start": "1907430",
    "end": "1917840"
  },
  {
    "text": "need a baseline I assume we have a baseline you're not allowed to questions",
    "start": "1917840",
    "end": "1925340"
  },
  {
    "text": "I'm I'm like from here so okay go ahead Victor the average is wrong why is it",
    "start": "1925340",
    "end": "1931340"
  },
  {
    "text": "wrong outliers are going to affect it he just",
    "start": "1931340",
    "end": "1937460"
  },
  {
    "text": "turns out that noise in computers is weird in several ways but one is first",
    "start": "1937460",
    "end": "1942590"
  },
  {
    "text": "of all it's always additive so there's no noise in a computer that makes things run faster than they click could if you",
    "start": "1942590",
    "end": "1950180"
  },
  {
    "text": "know away you're a billionaire right you could make money off of that it's like ah there's like this crazy network",
    "start": "1950180",
    "end": "1956780"
  },
  {
    "text": "activity in my computer and then that faster it's amazing what's called try pattern this right so all noise is",
    "start": "1956780",
    "end": "1964310"
  },
  {
    "text": "additive so it doesn't look like a Gaussian like most people like model noises or it must be a Gaussian all of them no it's actually half a Gaussian",
    "start": "1964310",
    "end": "1970510"
  },
  {
    "text": "it's actually a kind of a different distribution possum but you know essentially it's like it's it's a half a",
    "start": "1970510",
    "end": "1976160"
  },
  {
    "text": "curve and the second thing when noise comes it's humongous",
    "start": "1976160",
    "end": "1983410"
  },
  {
    "text": "like we're talking here's the thing imagine I stop talking right now I go get a burrito eat a burrito have some",
    "start": "1983410",
    "end": "1991010"
  },
  {
    "text": "coffee as well and come back and tell my talk that's us sorry for the interruption",
    "start": "1991010",
    "end": "1996700"
  },
  {
    "text": "right so it's this long that actually whenever I have for example a time I",
    "start": "1996700",
    "end": "2001720"
  },
  {
    "text": "interrupt that's going to you know do a system call to advance the clock and the time zone nonsense all that stuff that's",
    "start": "2001720",
    "end": "2008230"
  },
  {
    "text": "happening on your computer on a regular basis and if it just so happens it",
    "start": "2008230",
    "end": "2013570"
  },
  {
    "text": "interrupts your test that wants to figure out how fast is an addition of two floating point numbers you see what",
    "start": "2013570",
    "end": "2020320"
  },
  {
    "text": "I'm saying on average when Bill Gates hopes hops on a bus in Seattle everybody",
    "start": "2020320",
    "end": "2025480"
  },
  {
    "text": "on the bus is going to be a super billionaire right on average so the",
    "start": "2025480",
    "end": "2032320"
  },
  {
    "text": "outline outliers are so punishing we're talking many orders of magnitude in",
    "start": "2032320",
    "end": "2037930"
  },
  {
    "text": "considering them is going to profoundly alter measurements so I'm not gonna insist on this but please averages I've",
    "start": "2037930",
    "end": "2045070"
  },
  {
    "text": "taken the averages about the last that the worst thing you can do in when",
    "start": "2045070",
    "end": "2050620"
  },
  {
    "text": "measuring speed what do you want to take them mean other thoughts ideas here's a",
    "start": "2050620",
    "end": "2062530"
  },
  {
    "text": "piece of thought how about you take whatever you measure the most samples the most density so the more you know",
    "start": "2062530",
    "end": "2069280"
  },
  {
    "text": "you have experiments and some numbers appear more often than others so maybe you take that it's called a mode of the",
    "start": "2069280",
    "end": "2076000"
  },
  {
    "text": "distribution the mode is great what are the ideas median mean median right",
    "start": "2076000",
    "end": "2084750"
  },
  {
    "text": "minimum minimum is actually an interesting idea most of my experiments take the minimum",
    "start": "2084750",
    "end": "2091360"
  },
  {
    "text": "because the mail means the least noisy result you ever get and if you optimize for the minimum definitely gonna get a",
    "start": "2091360",
    "end": "2098050"
  },
  {
    "text": "better average right so anyway all right",
    "start": "2098050",
    "end": "2104790"
  },
  {
    "text": "now we discussed this we discussed that we discussed that right so if not",
    "start": "2104790",
    "end": "2111280"
  },
  {
    "text": "average we discussed more we discussed actually I did some measurements myself and it turns out",
    "start": "2111280",
    "end": "2116740"
  },
  {
    "text": "that whenever I take the mode if you measure many times the mode tends to go",
    "start": "2116740",
    "end": "2123490"
  },
  {
    "text": "to the minimum right so slowly the mode that the maximum density of samples goes",
    "start": "2123490",
    "end": "2129100"
  },
  {
    "text": "to the minimum because if you measure very many times the noise is gonna get cancelled because it's all over the",
    "start": "2129100",
    "end": "2134590"
  },
  {
    "text": "place so you're gonna get a mode that's very close to the minimum however there's a class of algorithm that",
    "start": "2134590",
    "end": "2140890"
  },
  {
    "text": "doesn't work with the minimum at all randomized algorithms who can give us an",
    "start": "2140890",
    "end": "2152200"
  },
  {
    "text": "example of a randomized algorithms example of a randomized algorithm yes",
    "start": "2152200",
    "end": "2159790"
  },
  {
    "text": "please Monte Carlo simulation in which you randomly change the yes thank you great",
    "start": "2159790",
    "end": "2167740"
  },
  {
    "text": "something more like humane no more than a humane sorry more more more like you",
    "start": "2167740",
    "end": "2174700"
  },
  {
    "text": "know because not everybody is gonna run Monte Carlo simulations but there is one like sort thank you",
    "start": "2174700",
    "end": "2180340"
  },
  {
    "text": "sort it primarily t-test so randomly I didn't know that but yeah some sounds",
    "start": "2180340",
    "end": "2187180"
  },
  {
    "text": "completely now there's algorithms for for example the travelling salesman because airlines need to do that and the",
    "start": "2187180",
    "end": "2193870"
  },
  {
    "text": "travelling salesman is np-complete so you can't really sit down and do it but there is a randomized algorithm that is",
    "start": "2193870",
    "end": "2200200"
  },
  {
    "text": "guaranteed to give you in the worst case twice the optimal solution tries the",
    "start": "2200200",
    "end": "2206650"
  },
  {
    "text": "cost of optimal so it's pretty a good result a pretty good result but sort is like a very simple example of of",
    "start": "2206650",
    "end": "2213340"
  },
  {
    "text": "randomized algorithm there's like a lot of networking protocols use randomization they use exponential",
    "start": "2213340",
    "end": "2218380"
  },
  {
    "text": "back-off and whatnot so there's there's a lot of random elements in in",
    "start": "2218380",
    "end": "2223450"
  },
  {
    "text": "networking and you don't want to take for those that minimum because consider sorting when it's sort of quicksort and",
    "start": "2223450",
    "end": "2230500"
  },
  {
    "text": "you take the pivot and you take it at random which is a good technique actually some lab libraries do that you",
    "start": "2230500",
    "end": "2237640"
  },
  {
    "text": "sort many times and are you do you want to pick up the lottery winner right it's",
    "start": "2237640",
    "end": "2243310"
  },
  {
    "text": "not a good idea to pick out like the the most lucky case he just got the people to straight down the middle like five times in a row right so",
    "start": "2243310",
    "end": "2250640"
  },
  {
    "text": "that's like a very rare case in fact I don't want to pick up that case as you represent a representative run time of",
    "start": "2250640",
    "end": "2257840"
  },
  {
    "text": "the sort algorithm right so for those you gotta go with things like I want to",
    "start": "2257840",
    "end": "2264380"
  },
  {
    "text": "throw away the largest 5% times and actually if you plot the histogram of",
    "start": "2264380",
    "end": "2271099"
  },
  {
    "text": "times and frequencies you're going to see that there's gonna be a few outliers and it's gonna be very visible where the",
    "start": "2271099",
    "end": "2276980"
  },
  {
    "text": "the weird noise is and just cut that away it's gonna be in the few percent",
    "start": "2276980",
    "end": "2282170"
  },
  {
    "text": "the top few percent average over the last or trace thresholds a lot P 95 so",
    "start": "2282170",
    "end": "2287810"
  },
  {
    "text": "in networking in particular is very interesting to take things like 95",
    "start": "2287810",
    "end": "2292820"
  },
  {
    "text": "percent of our you know our measurements were below this time right that's P 95",
    "start": "2292820",
    "end": "2298670"
  },
  {
    "text": "and that's very nice for networking when you want to make sure that your site works properly across a number of",
    "start": "2298670",
    "end": "2303770"
  },
  {
    "text": "countries for example rate okay with",
    "start": "2303770",
    "end": "2310670"
  },
  {
    "text": "this the talk starts we're staying right now so by the way you're in the fast",
    "start": "2310670",
    "end": "2317420"
  },
  {
    "text": "word talk this is it I'm sure okay nobody's leaving great so",
    "start": "2317420",
    "end": "2322760"
  },
  {
    "text": "the first tip I'm going to give which is concrete gonna have code so so far which is just vague but we're gonna have code",
    "start": "2322760",
    "end": "2330020"
  },
  {
    "text": "so tip number one replace branches with arithmetic and the idea is instead of a",
    "start": "2330020",
    "end": "2336619"
  },
  {
    "start": "2334000",
    "end": "2334000"
  },
  {
    "text": "branch you want to integrate the result of the branch as a zero or one value so",
    "start": "2336619",
    "end": "2342320"
  },
  {
    "text": "that means essentially you you do the test and you initialize an int with the",
    "start": "2342320",
    "end": "2348800"
  },
  {
    "text": "result of the test instead of doing if on it you initialize an int with it and then you use the in teen computation and",
    "start": "2348800",
    "end": "2355580"
  },
  {
    "text": "that int is going to be zero one right so that means there's less pressure on",
    "start": "2355580",
    "end": "2362810"
  },
  {
    "text": "the branch predictor there's no branching so there's no need to to the branch prediction does let's",
    "start": "2362810",
    "end": "2368060"
  },
  {
    "text": "fail speculation there's no there's just straight line code in those few stalls so let's do a statistical task here as",
    "start": "2368060",
    "end": "2375320"
  },
  {
    "text": "an example sort the minimums of four to the first quartile of an array",
    "start": "2375320",
    "end": "2380550"
  },
  {
    "text": "so we want we have an array and the first 25% of the array should contain",
    "start": "2380550",
    "end": "2386110"
  },
  {
    "text": "each element should be the minimum four elements of the entire array that's an",
    "start": "2386110",
    "end": "2391150"
  },
  {
    "text": "important step in in doing things like approximate median median and stuff so",
    "start": "2391150",
    "end": "2397090"
  },
  {
    "text": "what I have here is to the to the jury of some of your programs for c-sharp",
    "start": "2397090",
    "end": "2403540"
  },
  {
    "text": "programs I chose to use C sharp eyes as an example C pluses people are going to",
    "start": "2403540",
    "end": "2409930"
  },
  {
    "text": "definitely figure out the code but since this is a mainly official count how many",
    "start": "2409930",
    "end": "2415030"
  },
  {
    "text": "of you actually see char programmers okay separate my predictor was right how",
    "start": "2415030",
    "end": "2421660"
  },
  {
    "text": "many you have no idea about C sharpen hate myself for doing this okay",
    "start": "2421660",
    "end": "2426850"
  },
  {
    "text": "no-nobody I put an end in there so that's difficult to answer okay so using",
    "start": "2426850",
    "end": "2434890"
  },
  {
    "text": "C sharp as a back end language I'm going to take the minimum for given an array",
    "start": "2434890",
    "end": "2440200"
  },
  {
    "text": "of doubles I'm going to fetch the length and then use for induction variables",
    "start": "2440200",
    "end": "2445390"
  },
  {
    "text": "which are going to go from 0 and by 4 and by 2 and 3 and by 4 ijkl and then",
    "start": "2445390",
    "end": "2453370"
  },
  {
    "text": "I'm going to do a loop that's going to simply deposit the minimum in the leftmost position and how many branches",
    "start": "2453370",
    "end": "2462550"
  },
  {
    "text": "do we have inside the loop let's take a look we have an F here and we have an if",
    "start": "2462550",
    "end": "2468220"
  },
  {
    "text": "here so that would be two branches out 3 1 2 3 right great so that you know it",
    "start": "2468220",
    "end": "2475720"
  },
  {
    "text": "takes 3 it takes 3 tests to figure out the meaning of four numbers and now a",
    "start": "2475720",
    "end": "2482470"
  },
  {
    "text": "word about how you test the speed of such an algorithm you must test on some",
    "start": "2482470",
    "end": "2488770"
  },
  {
    "text": "you know because actually at this point was was made in the beginning which was your test data must be representative of",
    "start": "2488770",
    "end": "2495670"
  },
  {
    "text": "the actually input and what I did was to test on the following five inputs organ",
    "start": "2495670",
    "end": "2503920"
  },
  {
    "text": "pipe is a data set that goes up and then down it's an artificial data set that does",
    "start": "2503920",
    "end": "2510640"
  },
  {
    "text": "this just to make sure I'm not optimizing for like already sort of the race or something the second is simply random",
    "start": "2510640",
    "end": "2517840"
  },
  {
    "text": "data uniformly distributed the third test is more interesting it's random",
    "start": "2517840",
    "end": "2523450"
  },
  {
    "text": "zero one data it's random it's random zeros and ones so that you know even",
    "start": "2523450",
    "end": "2528670"
  },
  {
    "text": "though they're floating point numbers is just zeros or ones the idea here been behind a random zero one is that I want",
    "start": "2528670",
    "end": "2536980"
  },
  {
    "text": "to test data with a lot of duplicates but at the same time it's unpredictable",
    "start": "2536980",
    "end": "2543480"
  },
  {
    "text": "right there's plenty of duplicates because half are gonna be zeros half of gonna be one but I have no idea what",
    "start": "2543480",
    "end": "2549010"
  },
  {
    "text": "they are so this is a great test for the branch predict migrate amines branch predict are happy then random Geron is",
    "start": "2549010",
    "end": "2555910"
  },
  {
    "text": "gonna miss mess it up right is going to destroy it I'm also cause I'm measuring sorted data",
    "start": "2555910",
    "end": "2562030"
  },
  {
    "text": "and I'm also finally going to test on against real data and what I measure",
    "start": "2562030",
    "end": "2567160"
  },
  {
    "text": "here was word frequencies in the English language as per Google there's a dataset",
    "start": "2567160",
    "end": "2573820"
  },
  {
    "text": "from Google so I just collected you know essentially like billions of pages and I got the word frequencies in English and",
    "start": "2573820",
    "end": "2579580"
  },
  {
    "text": "that's a real you know that's a real data set that has data base some some",
    "start": "2579580",
    "end": "2585700"
  },
  {
    "text": "natural statistics and I test it on that so you want a test on everything there is right and this is a good don't forget",
    "start": "2585700",
    "end": "2593530"
  },
  {
    "text": "if you don't you see what I'm saying is that if you for example if you test on",
    "start": "2593530",
    "end": "2599140"
  },
  {
    "text": "your two of these you get the information you got a test on everything so okay part one I'm gonna make a few",
    "start": "2599140",
    "end": "2607090"
  },
  {
    "start": "2604000",
    "end": "2604000"
  },
  {
    "text": "passes and kind of mimicking my my mind as was doing this so first of like let's do some Sense and Sensibility one thing",
    "start": "2607090",
    "end": "2614770"
  },
  {
    "text": "would be I want to they're gone one would be I'm going to store this P dot",
    "start": "2614770",
    "end": "2620410"
  },
  {
    "text": "length in by foreigner variable so I don't compute multiple times I'm doing some manual common sub-expression",
    "start": "2620410",
    "end": "2627160"
  },
  {
    "text": "elimination if you wish so I'm going to go for int I equals zero J gets and by",
    "start": "2627160",
    "end": "2633460"
  },
  {
    "text": "four and by two three and by four and I'm going to say for I less than Q so",
    "start": "2633460",
    "end": "2639430"
  },
  {
    "text": "the Q limit is pre computed and then I increment everything and I do the rest it turns out the speed is the same but",
    "start": "2639430",
    "end": "2646270"
  },
  {
    "text": "indeed I convinced the pilot to use less space it's good by the way these results are reproducing on the",
    "start": "2646270",
    "end": "2652549"
  },
  {
    "text": "c-plus was back end as well so everything I say about any comment I make about the speed and speed",
    "start": "2652549",
    "end": "2658099"
  },
  {
    "text": "improvement applies to the C++ back-end it's not only c-sharp so small same",
    "start": "2658099",
    "end": "2665450"
  },
  {
    "text": "speed smaller space awesome so it's a good step just apply Sense and Sensibility don't complete the same thing many times don't do redundant work",
    "start": "2665450",
    "end": "2672079"
  },
  {
    "text": "that kind of stuff right motherhood and apple pie pass to reduce dependencies so",
    "start": "2672079",
    "end": "2679760"
  },
  {
    "start": "2677000",
    "end": "2677000"
  },
  {
    "text": "I need to take the minimum of four items so how about this I'm going to you to",
    "start": "2679760",
    "end": "2685160"
  },
  {
    "text": "first compute P of V versus P of J and in a different branch P of K with P of L",
    "start": "2685160",
    "end": "2692829"
  },
  {
    "text": "so I'm going to compute the index here and then I'm going to do the final test here the idea being that the two",
    "start": "2692829",
    "end": "2700700"
  },
  {
    "text": "comparisons are not depending on each other they're like two different four distinct numbers and compare them two by",
    "start": "2700700",
    "end": "2706400"
  },
  {
    "text": "two and these comparisons are not dependent on you upon each other so they run in parallel or so I wished they",
    "start": "2706400",
    "end": "2713240"
  },
  {
    "text": "didn't so it turns out I got the same speed this is one of those things you got a measure because you don't know",
    "start": "2713240",
    "end": "2719030"
  },
  {
    "text": "exactly what's gonna happen so you get a same speed fine pass number three I'm going to try",
    "start": "2719030",
    "end": "2729530"
  },
  {
    "start": "2726000",
    "end": "2726000"
  },
  {
    "text": "to reduce the induction variables so there's too many eyes Jay's case and",
    "start": "2729530",
    "end": "2735500"
  },
  {
    "text": "else being incremented there so let me just use I and look at my for loop it",
    "start": "2735500",
    "end": "2741470"
  },
  {
    "text": "got dramatically simpler so I have y equals four I less than Q which is a",
    "start": "2741470",
    "end": "2746750"
  },
  {
    "text": "quarter of the array and I just increment I and inside the loop by trade computation for Dara by means of for",
    "start": "2746750",
    "end": "2753740"
  },
  {
    "text": "example I compute here I plus three times Q which would be you know the you know one third of the array away from",
    "start": "2753740",
    "end": "2760819"
  },
  {
    "text": "here right so instead of having four in four variables going in lockstep like",
    "start": "2760819",
    "end": "2766040"
  },
  {
    "text": "that I'm going to have one and compute the rest every time in the envelope so it looks like a reasonable thing to do",
    "start": "2766040",
    "end": "2772490"
  },
  {
    "text": "it didn't improve any speed right so again I'm showing you this to show you",
    "start": "2772490",
    "end": "2779720"
  },
  {
    "text": "just how many ordeals I through this was an important topic by this I'd really had to do that fast so",
    "start": "2779720",
    "end": "2786930"
  },
  {
    "text": "let's take a look at the next attempt pass number four this is actually simple",
    "start": "2786930",
    "end": "2794700"
  },
  {
    "text": "get rid of the multiplication by 3 because it's unnatural let me go back one slide so here we have a",
    "start": "2794700",
    "end": "2800400"
  },
  {
    "text": "multiplication by 3 and it turns out multiplying something by 3 is more",
    "start": "2800400",
    "end": "2805410"
  },
  {
    "text": "expensive than multiplying by 2 or not multiplying at all right so let me eliminate that multiplication so I pre",
    "start": "2805410",
    "end": "2811770"
  },
  {
    "start": "2811000",
    "end": "2811000"
  },
  {
    "text": "computed here QQ trees Q plus Q and then I replace the multiplication by 3 with",
    "start": "2811770",
    "end": "2817710"
  },
  {
    "text": "the addition in Kuta Q 2 plus Q so that actually made finally it moved the",
    "start": "2817710",
    "end": "2823110"
  },
  {
    "text": "needle so I got a 3% improvement and that night I slept very happily but yes",
    "start": "2823110",
    "end": "2834320"
  },
  {
    "text": "with the compiler move the common sub-expression times it",
    "start": "2836150",
    "end": "2843000"
  },
  {
    "text": "does sometimes it doesn't so that that's that's a problem you know so the compiler has only this much resources to",
    "start": "2843000",
    "end": "2848820"
  },
  {
    "text": "keep track on try different things and stuff so it doesn't really try everything it should I agree",
    "start": "2848820",
    "end": "2855930"
  },
  {
    "text": "but actually that the meat is something 3% is nothing and for this algorithm we",
    "start": "2855930",
    "end": "2861390"
  },
  {
    "text": "got we've got a look like a fifth at least right so let's try something more radical how about this if only there",
    "start": "2861390",
    "end": "2871140"
  },
  {
    "start": "2866000",
    "end": "2866000"
  },
  {
    "text": "were a way to optionally add a value so",
    "start": "2871140",
    "end": "2876870"
  },
  {
    "text": "here let me define this function optional that takes a flag and the value",
    "start": "2876870",
    "end": "2882900"
  },
  {
    "text": "and here's how it works the flag is 0 then optional returns 0 if flag is not 1",
    "start": "2882900",
    "end": "2891930"
  },
  {
    "text": "then it returns that value it's quite",
    "start": "2891930",
    "end": "2897060"
  },
  {
    "text": "literally an optional value C++ programs please replace mentally discomfort during 32 it's a cast",
    "start": "2897060",
    "end": "2903060"
  },
  {
    "text": "it's actually an implicit conversion to in just put in here it's a minus int of",
    "start": "2903060",
    "end": "2908070"
  },
  {
    "text": "flag and value",
    "start": "2908070",
    "end": "2912710"
  },
  {
    "text": "this function quite literally took me a lifetime to write because it's the sort",
    "start": "2914059",
    "end": "2920579"
  },
  {
    "text": "of it's a it's an integral of a number of meaning in size that I had over years and it's like actually I could I could",
    "start": "2920579",
    "end": "2927329"
  },
  {
    "text": "do this simple arithmetic that's gonna work here's how it works if flag is zero minus zero is zero and",
    "start": "2927329",
    "end": "2935609"
  },
  {
    "text": "zero and anything is zero so I'm done it right returns zero so far so good",
    "start": "2935609",
    "end": "2942029"
  },
  {
    "text": "if flag is one then taking it to an int is the integer one but taking minus of",
    "start": "2942029",
    "end": "2949559"
  },
  {
    "text": "that is what yes sorry right",
    "start": "2949559",
    "end": "2960140"
  },
  {
    "text": "it's a remarkable number it's all ones in binary and it's going to become a",
    "start": "2960140",
    "end": "2968220"
  },
  {
    "text": "mass that when you add that thing with anything is gonna you're gonna get that thing right so I got a magic device and",
    "start": "2968220",
    "end": "2976380"
  },
  {
    "text": "you know about pretty confident I'm gonna I'm gonna give this talk until some compiler writer is gonna is gonna",
    "start": "2976380",
    "end": "2981479"
  },
  {
    "text": "be in it and at that point that guy is gonna be out we got to do this in the compiler right nobody does it right now",
    "start": "2981479",
    "end": "2987920"
  },
  {
    "text": "so I got this little function yes please",
    "start": "2987920",
    "end": "2992808"
  },
  {
    "text": "what if the flag is not zero neither zero nor one I I don't handle that yeah",
    "start": "2998479",
    "end": "3010819"
  },
  {
    "text": "it I didn't know it's not guaranteed in C in C I knew the C sharp has a there's a discussion but in C++ is there such a",
    "start": "3010819",
    "end": "3017599"
  },
  {
    "text": "case yeah but actually int int of boolean",
    "start": "3017599",
    "end": "3025369"
  },
  {
    "text": "true is one when when it again replace this with end of flag and that's true",
    "start": "3025369",
    "end": "3034009"
  },
  {
    "text": "that's one that's the integer one so I'm fairly confident that this this is correct even in the most obscene",
    "start": "3034009",
    "end": "3041359"
  },
  {
    "text": "implementations of C++ today's implementation really at one bit so okay great so yes",
    "start": "3041359",
    "end": "3051940"
  },
  {
    "text": "sorry the I didn't work with the digital",
    "start": "3052480",
    "end": "3061250"
  },
  {
    "text": "multi-process compiler oh yeah that you know D compiler has like the GCC and LD",
    "start": "3061250",
    "end": "3067280"
  },
  {
    "text": "see back and them both they both work well with this so yeah so it doesn't matter which source languages to some",
    "start": "3067280",
    "end": "3073820"
  },
  {
    "text": "extent but essentially was as soon as it gets the logic the logic down efficiently it's just gonna work so now",
    "start": "3073820",
    "end": "3080420"
  },
  {
    "text": "we have this a mini function which is kind of a static in line in C++ function",
    "start": "3080420",
    "end": "3085580"
  },
  {
    "text": "and you could make it work with unsigned and whatever so the idea is the same so then we have how about this so we're",
    "start": "3085580",
    "end": "3092000"
  },
  {
    "text": "gonna go let's use it we're gonna go M 0 equals I minus optional of this guy right depending on",
    "start": "3092000",
    "end": "3098900"
  },
  {
    "text": "the condition so this is not a branch any longer and again this is not a branch any longer so I only have one",
    "start": "3098900",
    "end": "3105680"
  },
  {
    "text": "branch left so let's measure this guy and here's where it gets really",
    "start": "3105680",
    "end": "3111230"
  },
  {
    "text": "interesting you get a 16% loss on organ",
    "start": "3111230",
    "end": "3119180"
  },
  {
    "text": "pipe you get an 18% loss on sorted so",
    "start": "3119180",
    "end": "3126589"
  },
  {
    "text": "friends if that were the only data it tested on you'd move on right you see my",
    "start": "3126589",
    "end": "3134450"
  },
  {
    "text": "point you want to measure on different data shapes however is 23 percent faster",
    "start": "3134450",
    "end": "3144050"
  },
  {
    "text": "random 0 1 and by that one I was like ah there's something interesting here and",
    "start": "3144050",
    "end": "3150170"
  },
  {
    "text": "it's over two times faster than random and no real data which is the most",
    "start": "3150170",
    "end": "3155210"
  },
  {
    "text": "interesting stuff where we want to work on so this is a huge win and my question",
    "start": "3155210",
    "end": "3161089"
  },
  {
    "text": "to you is why did I get a loss in performance on an organ pipe why did I",
    "start": "3161089",
    "end": "3167930"
  },
  {
    "text": "get a loss on sorted why did I get a huge win on random there are no real",
    "start": "3167930",
    "end": "3172940"
  },
  {
    "text": "data yes please",
    "start": "3172940",
    "end": "3177400"
  },
  {
    "text": "there's no there's no difference in in lining optional gets in lined yeah",
    "start": "3180290",
    "end": "3187790"
  },
  {
    "text": "yes huh when it's sorted the branch",
    "start": "3187790",
    "end": "3195990"
  },
  {
    "text": "predictor is gonna have a good day and with organ pipe it's gonna have a good",
    "start": "3195990",
    "end": "3201090"
  },
  {
    "text": "day except for one hiccup in the middle it's gonna have like one bad prediction at the beginning one bed in the middle",
    "start": "3201090",
    "end": "3207120"
  },
  {
    "text": "one bed at the end that's three for the huge array so awesome so for the cases",
    "start": "3207120",
    "end": "3213540"
  },
  {
    "text": "where the branch predictor is having an easy unsurprised job it's just gonna do",
    "start": "3213540",
    "end": "3219780"
  },
  {
    "text": "faster than optional because action is extra logic it does extra logical operations and extra little things and",
    "start": "3219780",
    "end": "3225570"
  },
  {
    "text": "masks and whatnot however whenever he moved to surprising data such as random",
    "start": "3225570",
    "end": "3231750"
  },
  {
    "text": "zero one random and real data then the branch predictor is going to be swamped is not going to be able to predict",
    "start": "3231750",
    "end": "3238770"
  },
  {
    "text": "things correctly and is going to lose to our approach but wait there's more we",
    "start": "3238770",
    "end": "3249240"
  },
  {
    "text": "could actually use optional again so I have just a few a little more original",
    "start": "3249240",
    "end": "3254580"
  },
  {
    "text": "take here nothing complicated I don't expect you to like dropped all the details of the code but if you see down",
    "start": "3254580",
    "end": "3259950"
  },
  {
    "text": "on it you can it can eliminate the last branch to so you use optional everywhere and there's no more branching zero",
    "start": "3259950",
    "end": "3265710"
  },
  {
    "text": "branch inside the loop however I noticed it's still good but it's not as good as",
    "start": "3265710",
    "end": "3273000"
  },
  {
    "text": "the previous version and guess why so at this point when you have two pieces of code that are you know stamping you you",
    "start": "3273000",
    "end": "3281940"
  },
  {
    "text": "guys have to look at the generated code you go to God bolt you does this",
    "start": "3281940",
    "end": "3287010"
  },
  {
    "text": "assemblies for AB for C sharp you can you know essentially go and look at the source look right and guess what I saw",
    "start": "3287010",
    "end": "3296400"
  },
  {
    "text": "in the disassembly I saw that the compiler was smart enough to eliminate",
    "start": "3296400",
    "end": "3302340"
  },
  {
    "start": "3301000",
    "end": "3301000"
  },
  {
    "text": "this branch itself so the compiler transform this into a conditional move",
    "start": "3302340",
    "end": "3309760"
  },
  {
    "text": "so it was already doing the last step he said you know Andre you've done all this",
    "start": "3309760",
    "end": "3315609"
  },
  {
    "text": "work I'll help you here alright so yes that's what happened so essentially it's good to actually",
    "start": "3315609",
    "end": "3321880"
  },
  {
    "text": "look at the the end result of your of your compilation process to figure out exactly what happens and what was",
    "start": "3321880",
    "end": "3328060"
  },
  {
    "text": "happening was indeed the compiler was doing a part of the work it was lifting",
    "start": "3328060",
    "end": "3333250"
  },
  {
    "text": "part of the way for me great there is",
    "start": "3333250",
    "end": "3339190"
  },
  {
    "text": "actually another thing I tried which was not very successful but I think it will",
    "start": "3339190",
    "end": "3344830"
  },
  {
    "text": "be successful in other cases you can write a little function that's also in line which is if-else and you have a",
    "start": "3344830",
    "end": "3352420"
  },
  {
    "text": "boolean flag and you have an integer which will be returning the flag is true",
    "start": "3352420",
    "end": "3357760"
  },
  {
    "text": "and you have another integer v2 which you return if the flag is false and let's see how it works we look at the",
    "start": "3357760",
    "end": "3366760"
  },
  {
    "text": "first line here is the same right yes",
    "start": "3366760",
    "end": "3372480"
  },
  {
    "text": "let's look at the second line and converting the flag to an int which is like really into flag and I'm taking",
    "start": "3372480",
    "end": "3379420"
  },
  {
    "text": "ain't of flag minus 1 and v2 so let's see how this works if flag is 0 the",
    "start": "3379420",
    "end": "3387940"
  },
  {
    "text": "first line here is going to take 0 minus 0 the first this whole thing average to",
    "start": "3387940",
    "end": "3393520"
  },
  {
    "text": "0 right but the second thing goes from in to 0 0 minus 1 is write minus 1 dot",
    "start": "3393520",
    "end": "3403810"
  },
  {
    "text": "and at with which is gonna give you V 2 so you get the second value if the flag is 1 the the first line works just like",
    "start": "3403810",
    "end": "3411010"
  },
  {
    "text": "before and the second line is going to be 1 minus 1 0 and you're done right and it didn't work well on this",
    "start": "3411010",
    "end": "3420880"
  },
  {
    "text": "particular algorithm but I'm pretty sure that if you paste this in your code if the C files and you try it you're gonna",
    "start": "3420880",
    "end": "3426460"
  },
  {
    "text": "find situations in which it it does save the day awesome so I've been trying this and if",
    "start": "3426460",
    "end": "3434380"
  },
  {
    "text": "else didn't help here and again it's because the compiler was already at work replacing that test with the conditional",
    "start": "3434380",
    "end": "3440980"
  },
  {
    "text": "move cool since we we have we are in we have just",
    "start": "3440980",
    "end": "3448180"
  },
  {
    "text": "two minutes left I'm going to stop here and I'm going to this is I'm not sure",
    "start": "3448180",
    "end": "3461319"
  },
  {
    "text": "why this okay so we're gonna stop here and I'm going to take a few questions if you have yes",
    "start": "3461319",
    "end": "3471130"
  },
  {
    "text": "please a framework that captures the",
    "start": "3471130",
    "end": "3481509"
  },
  {
    "text": "real data yeah so but it's more like you know opportunistically you just you know",
    "start": "3481509",
    "end": "3486849"
  },
  {
    "text": "you have your files you have your data have your inputs so there's nothing formalized about about the the",
    "start": "3486849",
    "end": "3493210"
  },
  {
    "text": "pre-processing part yes questions yes please oh yeah so profiles",
    "start": "3493210",
    "end": "3501130"
  },
  {
    "text": "are a big part of optimization so you know as we discussed in the opening you gotta know what you think you know you",
    "start": "3501130",
    "end": "3508390"
  },
  {
    "text": "get a get a measure as the first step and profilers are a huge tool especially",
    "start": "3508390",
    "end": "3513519"
  },
  {
    "text": "for subtle things such as cash spills and you know all of that the my dad has too big or my code is too",
    "start": "3513519",
    "end": "3519970"
  },
  {
    "text": "big and these things are very easy to understand without a profiler so definitely I would recommend actually",
    "start": "3519970",
    "end": "3525519"
  },
  {
    "text": "Intel was very nice they called me and they gave me a free cap your vtune so I should kind of pay them some lip service",
    "start": "3525519",
    "end": "3531460"
  },
  {
    "text": "here Wheaton is a great product right sorry it is yeah so you know I'm feeling",
    "start": "3531460",
    "end": "3539289"
  },
  {
    "text": "good and I'm not really holding myself here you know yes cash simulation that",
    "start": "3539289",
    "end": "3549910"
  },
  {
    "text": "is very slow actually so what I've what I've done way in the in the days on my grad school it was you could do that",
    "start": "3549910",
    "end": "3556720"
  },
  {
    "text": "kind of stuff on a much less powerful machine right so you can do like I have",
    "start": "3556720",
    "end": "3561849"
  },
  {
    "text": "a very very weak machine and I'm doing simulation on it to figure out cache effects and stuff but you know profiles",
    "start": "3561849",
    "end": "3568809"
  },
  {
    "text": "are gonna show you these cache effects quite nicely alright yes please",
    "start": "3568809",
    "end": "3577559"
  },
  {
    "text": "strength reduction so let me kind of explain to everybody strength reduction",
    "start": "3586440",
    "end": "3592359"
  },
  {
    "text": "is a compiler optimization if you google for it you're gonna find actually a few pages written by compiler writers and",
    "start": "3592359",
    "end": "3598900"
  },
  {
    "text": "strength deduction is you take an expression and you try to express the same expression with cheaper operators",
    "start": "3598900",
    "end": "3605920"
  },
  {
    "text": "like you replace division with multiplication and you replace multiplication with addition and you",
    "start": "3605920",
    "end": "3611829"
  },
  {
    "text": "replace with shifts and you know for example there is a there is a well-known",
    "start": "3611829",
    "end": "3617380"
  },
  {
    "text": "paper that allows you to replace division by constant with a",
    "start": "3617380",
    "end": "3622960"
  },
  {
    "text": "multiplication by another constant and a shift and everybody does that now and that would be an example strength",
    "start": "3622960",
    "end": "3629770"
  },
  {
    "text": "reduction but that's it there is strength reduction that how should I put",
    "start": "3629770",
    "end": "3635049"
  },
  {
    "text": "it that you can use creatively in ways that compiles can't figure it out figure out to rewrite algorithms with less",
    "start": "3635049",
    "end": "3642849"
  },
  {
    "text": "strong operations and I have a talk about that if you google for my name a faster you're going to find a talk of",
    "start": "3642849",
    "end": "3648369"
  },
  {
    "text": "mine last year which discusses the exactly strength reduction all right I'm hearing that the other people are done",
    "start": "3648369",
    "end": "3654430"
  },
  {
    "text": "so go get some food and coffee thank you very much for being here you're being great awesome thank you",
    "start": "3654430",
    "end": "3663390"
  }
]