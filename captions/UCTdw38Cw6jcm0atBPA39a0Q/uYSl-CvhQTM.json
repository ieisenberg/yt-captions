[
  {
    "start": "0",
    "end": "73000"
  },
  {
    "text": "I claim it's two o'clock so I shall",
    "start": "0",
    "end": "6390"
  },
  {
    "text": "start without further ado my name is Jason McGinnis as you may have already",
    "start": "6390",
    "end": "14099"
  },
  {
    "text": "heard there's a few points of order here I welcome questions throughout the talk but I do reserve the right if they get",
    "start": "14099",
    "end": "21300"
  },
  {
    "text": "too interesting to request that we continue it later perhaps at the bar I'm",
    "start": "21300",
    "end": "30330"
  },
  {
    "text": "a contractor I work in the city of London I have done for many years I work in the finance sector it breeds a",
    "start": "30330",
    "end": "39149"
  },
  {
    "text": "certain style of character so for example I will occasionally use technical terms a technical term is",
    "start": "39149",
    "end": "46680"
  },
  {
    "text": "euphemism for vulgar language that's life counsellor as my company email",
    "start": "46680",
    "end": "56160"
  },
  {
    "text": "address the talk is in two parts the first part will be mainly software",
    "start": "56160",
    "end": "61260"
  },
  {
    "text": "orientated optimizing Flags tweaking blahdy blahdy blah the second part will",
    "start": "61260",
    "end": "67110"
  },
  {
    "text": "be looking a bit more generally and holistically holistically a bit more generally about the systems involved so",
    "start": "67110",
    "end": "73950"
  },
  {
    "start": "73000",
    "end": "572000"
  },
  {
    "text": "here we go by the way my slides tend to be full of text I like them to stand by themselves so that you don't need to",
    "start": "73950",
    "end": "79680"
  },
  {
    "text": "actually go to the talk or spend an hour and a half of your life watching a film of me walk around background obviously",
    "start": "79680",
    "end": "93360"
  },
  {
    "text": "we're about software and hardware hft high frequency trading and low latency",
    "start": "93360",
    "end": "98549"
  },
  {
    "text": "trading there are issues surrounding it mainly get the order as fast as possible to the market don't crash there's a",
    "start": "98549",
    "end": "105060"
  },
  {
    "text": "famous company called Knight capital that in about 90 seconds managed to lose",
    "start": "105060",
    "end": "111689"
  },
  {
    "text": "of the order of 450 million pounds in America it went bust and was bought out",
    "start": "111689",
    "end": "118340"
  },
  {
    "text": "so making sure that you don't have bugs and don't introduce bugs is really",
    "start": "118340",
    "end": "125219"
  },
  {
    "text": "important because you're not going to have time to stop it and in the UK at least you could",
    "start": "125219",
    "end": "132120"
  },
  {
    "text": "potentially be found personally liable for any bugs that you introduce",
    "start": "132120",
    "end": "137370"
  },
  {
    "text": "and any serious issues that occur and personal liability extends as far as losing your house if you assign the",
    "start": "137370",
    "end": "145050"
  },
  {
    "text": "house to your wife's nape because you want to try and avoid that they'll take it anyway because they've seen that as",
    "start": "145050",
    "end": "150660"
  },
  {
    "text": "an avoidance technique the FCA is horrible in that respect of course we've been to",
    "start": "150660",
    "end": "159360"
  },
  {
    "text": "many talks heard beyond is interesting keynotes and last night about how fast",
    "start": "159360",
    "end": "165120"
  },
  {
    "text": "C++ can be and how good it can be and how low-level and close to the hardware so clearly it's the answer everyone uses",
    "start": "165120",
    "end": "173310"
  },
  {
    "text": "C++ for high-speed programming because it's good it's a received wisdom I'm",
    "start": "173310",
    "end": "181230"
  },
  {
    "text": "going to look at optimization case studies because I'm in a high-frequency trader what we do is we squeeze it until",
    "start": "181230",
    "end": "187200"
  },
  {
    "text": "the pips squeak and therefore I'm going",
    "start": "187200",
    "end": "194490"
  },
  {
    "text": "to presume that you've done the sensible thing recall and Al and his law that ten",
    "start": "194490",
    "end": "201900"
  },
  {
    "text": "percent of your code runs 90 percent of your tart the time run valgrind run your",
    "start": "201900",
    "end": "209010"
  },
  {
    "text": "favorite profiler use that run it again and run it again once you've got bored",
    "start": "209010",
    "end": "215790"
  },
  {
    "text": "of doing that after about a year then maybe look at these the other title for",
    "start": "215790",
    "end": "223140"
  },
  {
    "text": "this took the talk is north and i'll i spurn thee why because of course",
    "start": "223140",
    "end": "229709"
  },
  {
    "text": "premature optimization is the root of all evil and what i'm talking about here if used unwisely are premature",
    "start": "229709",
    "end": "237000"
  },
  {
    "text": "optimization premature optimizations so okay i'm going to have a look at various",
    "start": "237000",
    "end": "242220"
  },
  {
    "text": "details those warnings out the way health warnings shall we say what about",
    "start": "242220",
    "end": "247440"
  },
  {
    "text": "the impact of the compiler the operating system the hardware we're going to have",
    "start": "247440",
    "end": "255480"
  },
  {
    "text": "a look at some performance quirks and compiler versions static branch prediction the use and abuse why am i",
    "start": "255480",
    "end": "262560"
  },
  {
    "text": "interest in static branch prediction what happens as a trade arrives from some kind of computer we don't deal",
    "start": "262560",
    "end": "269700"
  },
  {
    "text": "with meat sacks in this they're far too slow so some computer generates the trade what happens is the trade is sent",
    "start": "269700",
    "end": "275580"
  },
  {
    "text": "to the exchange the London Stock Exchange Oslo Stock Exchange and then",
    "start": "275580",
    "end": "280950"
  },
  {
    "text": "what happens is normally you get about 10,000 cancel modifies and then once you",
    "start": "280950",
    "end": "290820"
  },
  {
    "text": "get a fill and with luck that fill makes you money so static branch prediction is",
    "start": "290820",
    "end": "298830"
  },
  {
    "text": "really useful to us because what we want to do is tell the compiler tell the processor know ignore the fact",
    "start": "298830",
    "end": "304740"
  },
  {
    "text": "it's orders and motive cancels and modifies that are going through all the time we're really interested in the",
    "start": "304740",
    "end": "312080"
  },
  {
    "text": "unlikely path of the film hence abuse",
    "start": "312080",
    "end": "317600"
  },
  {
    "text": "switch statements can they be moderate can they be optimized what happens with switch statements of course this is a",
    "start": "317600",
    "end": "324780"
  },
  {
    "text": "C++ conference and I do template metaprogramming and according to Kevin",
    "start": "324780",
    "end": "329790"
  },
  {
    "text": "Henny Devlin prick a template metaprogramming is a core akin to hardcore porn in C++",
    "start": "329790",
    "end": "336570"
  },
  {
    "text": "so clearly we want to have a bit of fun some extreme optimization now then what",
    "start": "336570",
    "end": "341580"
  },
  {
    "text": "I going to do is I'm going to put it all together and see how do these micro optimizations all fit and do they actually make any effect in this thing",
    "start": "341580",
    "end": "348090"
  },
  {
    "text": "called a fix to MIT slash bits translator if you work in the city these acronyms will make sense to you if you",
    "start": "348090",
    "end": "354960"
  },
  {
    "text": "don't I'll explain briefly fix this a terrible protocol it's a name value pair all in ASCII separated by Soh s so your",
    "start": "354960",
    "end": "364320"
  },
  {
    "text": "Tech converting from text to binary and back again all the time it's appalling protocol MIT is a type of binary",
    "start": "364320",
    "end": "371700"
  },
  {
    "text": "protocol static structs bi T boss italia is the flavor why did I choose boss",
    "start": "371700",
    "end": "378900"
  },
  {
    "text": "italia rather than Oslo OS cell that's",
    "start": "378900",
    "end": "385290"
  },
  {
    "text": "because it cut becomes before oh that's why so when I come into the apps in the file became first a little break",
    "start": "385290",
    "end": "395719"
  },
  {
    "text": "planners from clang he if you find that",
    "start": "395719",
    "end": "402019"
  },
  {
    "text": "I have it in for clang during this talk you might be right and then we're going",
    "start": "402019",
    "end": "408289"
  },
  {
    "text": "to have a look at the impact of the operators system and hardware so this will be sort of the first bit before we",
    "start": "408289",
    "end": "413449"
  },
  {
    "text": "have the break and then we'll go for coffee we'll come back for this right operating system and hardware choices",
    "start": "413449",
    "end": "419599"
  },
  {
    "text": "what impact do they have and how do they",
    "start": "419599",
    "end": "424849"
  },
  {
    "text": "effects the good old fix to MIT bit translator so what issues hft low",
    "start": "424849",
    "end": "434659"
  },
  {
    "text": "latency trading you may not be in the city apologies if you know it well what are the issues it's performance critical",
    "start": "434659",
    "end": "440449"
  },
  {
    "text": "very very performance critical goldman's",
    "start": "440449",
    "end": "446149"
  },
  {
    "text": "in 2012 had approximately 20 billion",
    "start": "446149",
    "end": "452050"
  },
  {
    "text": "dollars a day turnover on the LSE the London Stock Exchange all of that 90%",
    "start": "452050",
    "end": "458979"
  },
  {
    "text": "was automated trading this stuff and they were the biggest certainly as I",
    "start": "458979",
    "end": "466789"
  },
  {
    "text": "said account of a 70% of the turnover on the LSE today it's even bigger so it's a",
    "start": "466789",
    "end": "471889"
  },
  {
    "text": "lot of money you know within months you were talking about the gross national product of Britain member of the g7",
    "start": "471889",
    "end": "477469"
  },
  {
    "text": "right so this is a lot of money it's not",
    "start": "477469",
    "end": "483169"
  },
  {
    "text": "rocket science it's not safety-critical",
    "start": "483169",
    "end": "489249"
  },
  {
    "text": "yes some Deutsche traders might get a little bit miserable and jump that jump out of a window and kill themselves much",
    "start": "489249",
    "end": "495379"
  },
  {
    "text": "the inconvenience of the rest of us at nice bars because you can't get onto the roof terrace because these idiots jumped",
    "start": "495379",
    "end": "501079"
  },
  {
    "text": "off but it's not safety critical people's lives do not matter you might hose their pension véra pension fund but",
    "start": "501079",
    "end": "510469"
  },
  {
    "text": "people aren't actually going to die",
    "start": "510469",
    "end": "513669"
  },
  {
    "text": "grok this well to be truly fast is to do nothing nothing is faster than no exit",
    "start": "516020",
    "end": "525320"
  },
  {
    "text": "code by definition just don't do it",
    "start": "525320",
    "end": "530680"
  },
  {
    "text": "intraday update of IBM wants the",
    "start": "530680",
    "end": "535730"
  },
  {
    "text": "corporate action once the stock splits or Apple wants to do a stock combination recombine so that's a market event they",
    "start": "535730",
    "end": "543530"
  },
  {
    "text": "get a new icing code and you code for the stock because they're removing two stocks replacing with one it does not",
    "start": "543530",
    "end": "551450"
  },
  {
    "text": "happen you're not told that morning that afternoon ring ring apples going to do this will do a better update in five",
    "start": "551450",
    "end": "558110"
  },
  {
    "text": "minutes time let's send an update no you know about it months in advance so what",
    "start": "558110",
    "end": "565130"
  },
  {
    "text": "happens when something goes wrong you're at the market intraday restart forget it",
    "start": "565130",
    "end": "572020"
  },
  {
    "start": "572000",
    "end": "681000"
  },
  {
    "text": "when I said it's not clever it really isn't clever all I'm doing is copying data from my input socket to my",
    "start": "572020",
    "end": "580370"
  },
  {
    "text": "output socket and I do a bit of transformation in the middle as little as possible it's not clever it's a long",
    "start": "580370",
    "end": "588500"
  },
  {
    "text": "mend copy is what it is hence you'll see the reason why the motivating examples",
    "start": "588500",
    "end": "594680"
  },
  {
    "text": "I've got we might have some validation risk checks as little as possible as",
    "start": "594680",
    "end": "600590"
  },
  {
    "text": "long as the way we can get around the FCA we will if it implies employing lawyers and pay them lots of money to",
    "start": "600590",
    "end": "606260"
  },
  {
    "text": "get round it we'll do it it's not a cheap market to get into bar cap when",
    "start": "606260",
    "end": "615290"
  },
  {
    "text": "Neiman's went down in 2007-2008 bought the first one of the fastest and biggest",
    "start": "615290",
    "end": "621680"
  },
  {
    "text": "trading systems in the world it cost them a billion dollars that's the entry",
    "start": "621680",
    "end": "626900"
  },
  {
    "text": "pot cost if you want one of the biggest in the world it's a billion so it ain't cheap low-level control you really",
    "start": "626900",
    "end": "638390"
  },
  {
    "text": "really really are very very interested in what happens in your hardware where",
    "start": "638390",
    "end": "644180"
  },
  {
    "text": "your computers are these are collocated next to the exchange in the same room preferably in Iraq",
    "start": "644180",
    "end": "649790"
  },
  {
    "text": "it's next to the matching engine for the exchange preferably in the middle of the rack because the cable lengths is",
    "start": "649790",
    "end": "656690"
  },
  {
    "text": "shorter because they commonly route the cables via the middle of the rack rather than the top or bottom because it can",
    "start": "656690",
    "end": "662870"
  },
  {
    "text": "make it faster remember cable length is important in these matters because if we're talking about micro seconds then cable length",
    "start": "662870",
    "end": "670070"
  },
  {
    "text": "can be consumed in time to send a watt a message on a cable can be the order of tens of nanoseconds you may know some of",
    "start": "670070",
    "end": "682040"
  },
  {
    "start": "681000",
    "end": "787000"
  },
  {
    "text": "this already okay it can be very low level so we can intimately manipulate",
    "start": "682040",
    "end": "690080"
  },
  {
    "text": "what's happening in the hardware with my program source code I can look at the",
    "start": "690080",
    "end": "697610"
  },
  {
    "text": "assembly output and tune it directly from C++ statements but of course it's",
    "start": "697610",
    "end": "703160"
  },
  {
    "text": "nice it's as be honest said it's allows high-level abstractions and these high",
    "start": "703160",
    "end": "708410"
  },
  {
    "text": "level abstractions of course can make it it can make it more easy to model what's",
    "start": "708410",
    "end": "714620"
  },
  {
    "text": "going on we've got increasingly capable libraries boost of course has been",
    "start": "714620",
    "end": "720290"
  },
  {
    "text": "around for donkey's years but now boost of course has got atomic libraries in there which is very nice there's",
    "start": "720290",
    "end": "726530"
  },
  {
    "text": "something called frozen which isn't particularly pleasant because it's a Const extra unordered map a compile-time",
    "start": "726530",
    "end": "735350"
  },
  {
    "text": "unordered map what does that mean no",
    "start": "735350",
    "end": "740690"
  },
  {
    "text": "code is generated remember doing nothing is fast of course C++ 14 and 17 are very good",
    "start": "740690",
    "end": "748400"
  },
  {
    "text": "because of course in 14 context bruh was improved and you could use it in many more places eleven was basically it was",
    "start": "748400",
    "end": "756350"
  },
  {
    "text": "the version one just move past it goes straight to fourteen better still seventeen as we've heard already from",
    "start": "756350",
    "end": "761810"
  },
  {
    "text": "perhaps Peters talks from perhaps if you went to Nico's workshop people will talk",
    "start": "761810",
    "end": "772220"
  },
  {
    "text": "about D functional Java Haskell garbage collection kills performance just not",
    "start": "772220",
    "end": "777980"
  },
  {
    "text": "low enough the reality of course is that it's very very easy to write something slow in C++",
    "start": "777980",
    "end": "787570"
  },
  {
    "start": "787000",
    "end": "950000"
  },
  {
    "text": "ridiculously easy but of course there's more to it than just C++ we've got some",
    "start": "787810",
    "end": "792920"
  },
  {
    "text": "of our hardware do we have multiple processors one for the operating system and one for our gateway so we'll do ice",
    "start": "792920",
    "end": "800270"
  },
  {
    "text": "or CPU well tune the operating system how many buses per processor how many",
    "start": "800270",
    "end": "806540"
  },
  {
    "text": "memory buses you want to have a memory bus per processor so that then what I",
    "start": "806540",
    "end": "811550"
  },
  {
    "text": "can do is I can make sure that my memory fetch is - via the core that is",
    "start": "811550",
    "end": "817130"
  },
  {
    "text": "dedicated the processor that's dedicated to the Gateway isn't confounded by the fact that the main CPU somebody logged",
    "start": "817130",
    "end": "824390"
  },
  {
    "text": "on via SSH because they want to monitor it networking infrastructure as I",
    "start": "824390",
    "end": "830120"
  },
  {
    "text": "mentioned colocation is very important and of course any bugs that may exist in Hardware you saw the title spectrum",
    "start": "830120",
    "end": "838520"
  },
  {
    "text": "meltdown let's see what that does to us",
    "start": "838520",
    "end": "843730"
  },
  {
    "text": "of course there are a lot of details",
    "start": "843730",
    "end": "850360"
  },
  {
    "text": "which operating system will talk about the performance later not all",
    "start": "850360",
    "end": "856460"
  },
  {
    "text": "distributions are created equal tool set support for rapid development so well",
    "start": "856460",
    "end": "863330"
  },
  {
    "text": "and good having a really fast system but what happens if you want to support a new exchange turquoise you want to",
    "start": "863330",
    "end": "871070"
  },
  {
    "text": "assert support you want to be able to get that code written fast and into production to start making money because",
    "start": "871070",
    "end": "876680"
  },
  {
    "text": "it's all a race who gets there first and trust me there are very bright people",
    "start": "876680",
    "end": "883100"
  },
  {
    "text": "out there who are going to get there very quickly configuration C groups I",
    "start": "883100",
    "end": "891860"
  },
  {
    "text": "saw CPU performance tuning BIOS settings",
    "start": "891860",
    "end": "897080"
  },
  {
    "text": "do you enable us and disable C States what kind of cooling is available",
    "start": "897080",
    "end": "902990"
  },
  {
    "text": "what's the thermal dissipation all those sorts of things",
    "start": "902990",
    "end": "908800"
  },
  {
    "text": "oh dear not all compilers or even",
    "start": "908800",
    "end": "915190"
  },
  {
    "text": "versions are created equal speeds s clang gcci CC which is pasta I'm going",
    "start": "915190",
    "end": "923380"
  },
  {
    "text": "to focus on GCC because it's free and I've got it C++ 14 and 17 because that's my code",
    "start": "923380",
    "end": "929920"
  },
  {
    "text": "base basically but also a bit of clang will come in and I'll look at some ICC",
    "start": "929920",
    "end": "936490"
  },
  {
    "text": "basically it's a pain in the bum to get all these compilers running and they don't have enough time in the world to",
    "start": "936490",
    "end": "941680"
  },
  {
    "text": "because this is all done in my spare time so this is all IP unencumbered what",
    "start": "941680",
    "end": "947320"
  },
  {
    "text": "I'm telling you okay hardware this is an old AMD bulldozer",
    "start": "947320",
    "end": "961500"
  },
  {
    "start": "950000",
    "end": "1082000"
  },
  {
    "text": "it's what I've got it's very very interesting because we can get to see",
    "start": "961500",
    "end": "968440"
  },
  {
    "text": "plenty of detail modern processor diagrams like this you don't get that kind of detail because it's all very IP",
    "start": "968440",
    "end": "976320"
  },
  {
    "text": "what is important to me here apart from everything I don't care about the FPU",
    "start": "977250",
    "end": "983370"
  },
  {
    "text": "that can go to hell I do care about this",
    "start": "983370",
    "end": "991180"
  },
  {
    "text": "thing up here the branch predictor I do care very much about that obviously the",
    "start": "991180",
    "end": "1001320"
  },
  {
    "text": "l1 data cache is obviously I care about I care about this I'll write the rights",
    "start": "1001320",
    "end": "1012449"
  },
  {
    "text": "coalescing cache in order to make sure that the rights to the l2 data cache are consistent I'm also very interested in",
    "start": "1012449",
    "end": "1020339"
  },
  {
    "text": "the load store unit normally it's a FIFO in these processors to again maintain",
    "start": "1020339",
    "end": "1025980"
  },
  {
    "text": "memory consistency for SMP architectures the number of pipelines I have in my",
    "start": "1025980",
    "end": "1033390"
  },
  {
    "text": "processor is very important do I have notice these little arrows I can write",
    "start": "1033390",
    "end": "1039449"
  },
  {
    "text": "from an ALU an arithmetic logic unit which adder or a shifter I can write directly",
    "start": "1039449",
    "end": "1045370"
  },
  {
    "text": "into the internal registers and pass it to an address generation unit without",
    "start": "1045370",
    "end": "1051010"
  },
  {
    "text": "having to write it to my l1 data cache this is much faster this is nice this is",
    "start": "1051010",
    "end": "1059830"
  },
  {
    "text": "about 20 clock cycles from up there to down here about will be coming back",
    "start": "1059830",
    "end": "1068530"
  },
  {
    "text": "we'll think about this diagram a bit more later on particularly with regards",
    "start": "1068530",
    "end": "1074620"
  },
  {
    "text": "to specter and meltdown and that the branch predictor are caches so okay very",
    "start": "1074620",
    "end": "1085600"
  },
  {
    "start": "1082000",
    "end": "1110000"
  },
  {
    "text": "quickly briefly because of time meltdown Spector I won't bother to read this out",
    "start": "1085600",
    "end": "1090610"
  },
  {
    "text": "but basically meltdown it looks at out of order execution and it affects the",
    "start": "1090610",
    "end": "1097870"
  },
  {
    "text": "branch predictor it's fiddling with the branch predictor Spector fiddles with the cash billions of devices are",
    "start": "1097870",
    "end": "1104050"
  },
  {
    "text": "affected don't be fooled AMD is also affected as well okay we're going to",
    "start": "1104050",
    "end": "1113470"
  },
  {
    "text": "choose C++ so you plus last conference I've already mentioned we're going to go",
    "start": "1113470",
    "end": "1120040"
  },
  {
    "text": "through these will warm up with performance quirks in compiler versions here is my example code I'm interested",
    "start": "1120040",
    "end": "1129160"
  },
  {
    "start": "1123000",
    "end": "1150000"
  },
  {
    "text": "in mem copy de dumped in dimension mem copy so let's see what happens here this is clearly static internal linkage",
    "start": "1129160",
    "end": "1137910"
  },
  {
    "text": "destination I put the sizes in here so this in principle the compiler should",
    "start": "1137910",
    "end": "1144430"
  },
  {
    "text": "just write that into there in my doc tech centric section so let's see what compilers do we know the results what do",
    "start": "1144430",
    "end": "1151840"
  },
  {
    "start": "1150000",
    "end": "1248000"
  },
  {
    "text": "they do oh they're generating code well that's sad destination set to zero because it",
    "start": "1151840",
    "end": "1158530"
  },
  {
    "text": "was a global static service it's zeroed so that's bad already but it didn't just",
    "start": "1158530",
    "end": "1166060"
  },
  {
    "text": "write the output into there but GCC 447 really old one doesn't support C++ 11",
    "start": "1166060",
    "end": "1173970"
  },
  {
    "text": "immediate these are in mind struck in cash no data cache instruction caches",
    "start": "1173970",
    "end": "1180070"
  },
  {
    "text": "are much faster because there's no write lines so that's good I like that despite",
    "start": "1180070",
    "end": "1185289"
  },
  {
    "text": "the fact it wasn't written into here I like that for 7/3 in GCC it's using the stack",
    "start": "1185289",
    "end": "1194980"
  },
  {
    "text": "see notice rip source I'm having just load it from here",
    "start": "1194980",
    "end": "1201159"
  },
  {
    "text": "this means the data cache has got to be used data cache 10 clock cycle delay already got a fetch from main memory 100",
    "start": "1201159",
    "end": "1207880"
  },
  {
    "text": "400 clock cycle delay already desperately slow at least if we look at",
    "start": "1207880",
    "end": "1215380"
  },
  {
    "text": "this we've got the to move lab sinks next to each other remember the number of pipelines I've got in my processor",
    "start": "1215380",
    "end": "1221890"
  },
  {
    "text": "the problem is if I've only got one SSE unit it's going to stall on this app",
    "start": "1221890",
    "end": "1227980"
  },
  {
    "text": "seek so this one will have to wait until that absecon is completed move queues",
    "start": "1227980",
    "end": "1237399"
  },
  {
    "text": "we've probably got more keep move queues more store units in our processor still",
    "start": "1237399",
    "end": "1245770"
  },
  {
    "text": "suboptimal though okay newer versions of GCC surely they would do better",
    "start": "1245770",
    "end": "1252360"
  },
  {
    "start": "1248000",
    "end": "1314000"
  },
  {
    "text": "well GCC for 8 to 6 3 look it's moved the move app seek here to here so now these move owls that are",
    "start": "1252360",
    "end": "1261700"
  },
  {
    "text": "occurring can occur at the same time as this move up seek I'm using my pipelines",
    "start": "1261700",
    "end": "1267460"
  },
  {
    "text": "more effectively this will be faster by mark one eyeball counting instructions",
    "start": "1267460",
    "end": "1275429"
  },
  {
    "text": "what's nice here GCC 7-series we're beginning to use vex",
    "start": "1275429",
    "end": "1281409"
  },
  {
    "text": "instructions from the ATX unit that should be faster and also scheduled fewer instructions still using the stack",
    "start": "1281409",
    "end": "1291659"
  },
  {
    "text": "so that's got better that's bad GCC 8",
    "start": "1291659",
    "end": "1299700"
  },
  {
    "text": "extra stack accesses but what is the real point of this it's very unstable",
    "start": "1300540",
    "end": "1306210"
  },
  {
    "text": "what's happening in the optimizer for my compiler I can't guarantee what I'm getting let's",
    "start": "1306210",
    "end": "1315330"
  },
  {
    "start": "1314000",
    "end": "1354000"
  },
  {
    "text": "look at ICC intel's compiler surely that should do the right stuff yeah because",
    "start": "1315330",
    "end": "1320640"
  },
  {
    "text": "intel's got billions they pay lots of bright people to do this yeah well",
    "start": "1320640",
    "end": "1328380"
  },
  {
    "text": "that's not very well scheduled newer",
    "start": "1328380",
    "end": "1334260"
  },
  {
    "text": "version Oh at least the schedule a bit better but it's still using the stack crying at least it's got a stable output",
    "start": "1334260",
    "end": "1342110"
  },
  {
    "text": "poorly scheduled these are two tour together that should be overlaps they're still using the stack but at least it's",
    "start": "1342110",
    "end": "1348780"
  },
  {
    "text": "stable the output does it matter you'll",
    "start": "1348780",
    "end": "1356100"
  },
  {
    "start": "1354000",
    "end": "1501000"
  },
  {
    "text": "see lots of these graphs log scale here",
    "start": "1356100",
    "end": "1362400"
  },
  {
    "text": "we have compiler versions why that was offset there I have no idea something",
    "start": "1362400",
    "end": "1367980"
  },
  {
    "text": "between gue new plot licks and the PDF generator you'll see I've got this thing",
    "start": "1367980",
    "end": "1375060"
  },
  {
    "text": "called small string I created my own small string optimized string for",
    "start": "1375060",
    "end": "1380130"
  },
  {
    "text": "various perverse reasons and it's basically got mem copy inside it and",
    "start": "1380130",
    "end": "1386240"
  },
  {
    "text": "I'll look at how fast this mem copy is running with these different compilers we would have thought it should all be",
    "start": "1386240",
    "end": "1392820"
  },
  {
    "text": "roughly some other yes/no something as simple as this you get massive",
    "start": "1392820",
    "end": "1398790"
  },
  {
    "text": "difference in performance hang on a moment how can I get of the order of 10",
    "start": "1398790",
    "end": "1404310"
  },
  {
    "text": "to the 15 operations per second on a 2.6 gigahertz chip easy conscience extra",
    "start": "1404310",
    "end": "1412560"
  },
  {
    "text": "what happened is the compiler optimized it out I like that that's why those",
    "start": "1412560",
    "end": "1418530"
  },
  {
    "text": "numbers are there I like that the compiler did nothing it realizes it was pointless and got rid of it that's what I want this I don't want we can see that",
    "start": "1418530",
    "end": "1429570"
  },
  {
    "text": "GCC 5 woefully poor performance",
    "start": "1429570",
    "end": "1435320"
  },
  {
    "text": "consistently poor performance we can see that it's not reliable on the potestas",
    "start": "1435390",
    "end": "1443220"
  },
  {
    "text": "which has better performance clang beats the world here clang five clang six sank but we can't",
    "start": "1443220",
    "end": "1454120"
  },
  {
    "text": "rely on the fact that clang six may be poor because oh no look clang six managed with small string assignments so",
    "start": "1454120",
    "end": "1462400"
  },
  {
    "text": "all I'm doing is assigning one small string up to my string to another small string up to my string what's that initialized with a c string",
    "start": "1462400",
    "end": "1473190"
  },
  {
    "text": "why is it how it managed to do very well here and yet here performance very poor",
    "start": "1473490",
    "end": "1480670"
  },
  {
    "text": "remember this is a log scale so although these look close together in fact there's a dramatic difference in performance I use a log scale because",
    "start": "1480670",
    "end": "1487330"
  },
  {
    "text": "otherwise this would all be a straight line and those would be very high you",
    "start": "1487330",
    "end": "1495040"
  },
  {
    "text": "cannot expect reliable performance from different compiler versions even for similar tests okay static branch",
    "start": "1495040",
    "end": "1504190"
  },
  {
    "start": "1501000",
    "end": "1615000"
  },
  {
    "text": "predictor I mentioned the abuse and abuse which comes first in if bar or",
    "start": "1504190",
    "end": "1511690"
  },
  {
    "text": "then else bar - well I had a look through the documentation for Intel arm",
    "start": "1511690",
    "end": "1518080"
  },
  {
    "text": "and AMD and older architectures and I had a chat with a few people that I know who are chip designers there is one rule",
    "start": "1518080",
    "end": "1529450"
  },
  {
    "text": "to rule them all BT f NT backwards taken those are for",
    "start": "1529450",
    "end": "1535690"
  },
  {
    "text": "loops or loops are mapped to a backwards jump you've got a unconditional jump",
    "start": "1535690",
    "end": "1541960"
  },
  {
    "text": "forward let no one tell you that those are slow they are not slow at all they'd",
    "start": "1541960",
    "end": "1548320"
  },
  {
    "text": "cost zero clock cycles the instruction fetch unit and the instruction cache",
    "start": "1548320",
    "end": "1553990"
  },
  {
    "text": "have that built in to know that you're not that your IP is not IP plus one but",
    "start": "1553990",
    "end": "1559900"
  },
  {
    "text": "IP plus at a constant offset it's an otter problem they've got built-in adders for it this has been around for",
    "start": "1559900",
    "end": "1566530"
  },
  {
    "text": "decades but forward not-taken",
    "start": "1566530",
    "end": "1572270"
  },
  {
    "text": "if-then-else if it's bar one not else when you write your if statements the",
    "start": "1572270",
    "end": "1579780"
  },
  {
    "text": "fall through is bar one not else this is how all chip designers do it now you may",
    "start": "1579780",
    "end": "1587250"
  },
  {
    "text": "have heard of these operand prefixes that intel added they're ignored",
    "start": "1587250",
    "end": "1592980"
  },
  {
    "text": "they're not even generated anymore by compilers and they're ignored but when a",
    "start": "1592980",
    "end": "1602460"
  },
  {
    "text": "branch predictor sees a branch is not seen before what it will do is it will say weakly taken or weakly not taken",
    "start": "1602460",
    "end": "1608640"
  },
  {
    "text": "depending on whether it's a forward branch or a backwards branch the forward branch is an if statement why are we",
    "start": "1608640",
    "end": "1616020"
  },
  {
    "start": "1615000",
    "end": "1689000"
  },
  {
    "text": "interested the misprediction penalty because what happens is the superscalar",
    "start": "1616020",
    "end": "1621240"
  },
  {
    "text": "processor because it's superscalar will predict that this forward taken if it's",
    "start": "1621240",
    "end": "1626310"
  },
  {
    "text": "an if statement and it will carry on processing the bar and then when the condition is eventually evaluated hopefully it's true and if it isn't then",
    "start": "1626310",
    "end": "1634610"
  },
  {
    "text": "it'll have to roll back the results of bar bar one so that means that you've",
    "start": "1634610",
    "end": "1642750"
  },
  {
    "text": "taken a stall on the stall can be as much as 20 clock cycles this is important there is also another feature",
    "start": "1642750",
    "end": "1649920"
  },
  {
    "text": "as well the branch target cache the branch target cache usually only has about 32 slots",
    "start": "1649920",
    "end": "1655830"
  },
  {
    "text": "16 to 32 slots it's very hard to find out because these are this is very proprietary information from these chip",
    "start": "1655830",
    "end": "1662700"
  },
  {
    "text": "designers they don't like telling you agonal fog is a useful resource and he",
    "start": "1662700",
    "end": "1668940"
  },
  {
    "text": "has to basically experiment so many years ago ----builtin expect was",
    "start": "1668940",
    "end": "1675720"
  },
  {
    "text": "produced for GCC and an equivalent for Microsoft compilers it emitted the prefixes but now they just guide the",
    "start": "1675720",
    "end": "1682530"
  },
  {
    "text": "compiler do they",
    "start": "1682530",
    "end": "1689570"
  },
  {
    "start": "1689000",
    "end": "1694000"
  },
  {
    "text": "let's have a look god bless God built",
    "start": "1689710",
    "end": "1697130"
  },
  {
    "start": "1694000",
    "end": "1820000"
  },
  {
    "text": "Matt God bolt all hail let's have a look and see what GCC does",
    "start": "1697130",
    "end": "1705520"
  },
  {
    "text": "it's obviously complicated look these versions and of that what happens at",
    "start": "1705520",
    "end": "1712040"
  },
  {
    "text": "minus o 0 and o 1 bar 1 bar 2 bar 1 is",
    "start": "1712040",
    "end": "1720260"
  },
  {
    "text": "the full through good what we would expect",
    "start": "1720260",
    "end": "1725650"
  },
  {
    "text": "what about 6.1 73 to say ok what happens",
    "start": "1725650",
    "end": "1735500"
  },
  {
    "text": "if we crank up the optimization levels what happened",
    "start": "1735500",
    "end": "1741590"
  },
  {
    "text": "just because this got negated is irrelevant it's a forward jump so therefore bar 1 & 2 in now is the",
    "start": "1741590",
    "end": "1748669"
  },
  {
    "text": "full through hang on it just flipped 8.1",
    "start": "1748669",
    "end": "1754400"
  },
  {
    "text": "it's stable so what does it oh so what",
    "start": "1754400",
    "end": "1761510"
  },
  {
    "text": "does this mean it means if I compile code - oh 3 and I ecstatically optimize",
    "start": "1761510",
    "end": "1770120"
  },
  {
    "text": "it for GCC obviously I'm going to statically up as I optimize it for the wrong way because they got it wrong",
    "start": "1770120",
    "end": "1778600"
  },
  {
    "text": "there's a bug report about this by the way you can read about the bug report it's what makes interesting reading",
    "start": "1778600",
    "end": "1783679"
  },
  {
    "text": "about what happened old Fred put in minus 1 in 1 - in there there's the probability of outputting bar 2 and bar",
    "start": "1783679",
    "end": "1790820"
  },
  {
    "text": "1 and it's 60 percent versus 40 percent and what happened is when you flipped go - OH - no three about 1 - gets put in",
    "start": "1790820",
    "end": "1796820"
  },
  {
    "text": "there nobody knows why old Fred left that's why that happened so what happens",
    "start": "1796820",
    "end": "1807049"
  },
  {
    "text": "is I've now optimized my code spent years optimizing it for these these versions of GCC that way now statically",
    "start": "1807049",
    "end": "1813950"
  },
  {
    "text": "I've got it wrong I've got to change it all it also means",
    "start": "1813950",
    "end": "1820029"
  },
  {
    "start": "1820000",
    "end": "1847000"
  },
  {
    "text": "wait for it what happens with ICC and clang they got it right this means that",
    "start": "1820029",
    "end": "1830349"
  },
  {
    "text": "in most versions of GCC if I have code optimized for GCC statically optimized for throughs",
    "start": "1830349",
    "end": "1835799"
  },
  {
    "text": "they'll be wrong for clang and ICC okay",
    "start": "1835799",
    "end": "1844649"
  },
  {
    "text": "we have a solution for this don't we ----builtin expect that'll fix it well",
    "start": "1844649",
    "end": "1856229"
  },
  {
    "start": "1847000",
    "end": "2024000"
  },
  {
    "text": "would be nice let's look at 485 with",
    "start": "1856229",
    "end": "1863109"
  },
  {
    "text": "them without built-in expect pretty similar here quite different which is",
    "start": "1863109",
    "end": "1871299"
  },
  {
    "text": "faster with or without builted expect",
    "start": "1871299",
    "end": "1876268"
  },
  {
    "text": "magenta built-in it no built-in expect faster significantly materially faster",
    "start": "1876359",
    "end": "1884859"
  },
  {
    "text": "the error bars are for 4% mean average deviation I use mean average deviation",
    "start": "1884859",
    "end": "1889899"
  },
  {
    "text": "why because these are Layton sees therefore it's a Poisson distribution",
    "start": "1889899",
    "end": "1896159"
  },
  {
    "text": "it's not symmetrical it's not a Gaussian distribution I can't have negative latencies because I can't break the",
    "start": "1896159",
    "end": "1902830"
  },
  {
    "text": "speed of light sadly therefore the standard deviation is not an accurate",
    "start": "1902830",
    "end": "1908589"
  },
  {
    "text": "measure mean average deviation is a better statistical measure for it now",
    "start": "1908589",
    "end": "1915190"
  },
  {
    "text": "okay fine let's look at the newer compiler do we expect the same behavior",
    "start": "1915190",
    "end": "1921940"
  },
  {
    "text": "will we get the same behavior so I've got I can say okay well it might have messed it up but at least I can cope",
    "start": "1921940",
    "end": "1927460"
  },
  {
    "text": "with that and make the wrong choices to make it faster with that compiler soar change my compiler what happens oh dear",
    "start": "1927460",
    "end": "1938489"
  },
  {
    "text": "bizarre things happen I actually had a go in Gen 2 you could run it with 2.avi",
    "start": "1940110",
    "end": "1948100"
  },
  {
    "text": "so you could a run it with ABI 11 and with ABI o 9 an ABI 11 flatlined",
    "start": "1948100",
    "end": "1956309"
  },
  {
    "text": "generated a terrible code why I don't know I didn't look at the assembler we",
    "start": "1956400",
    "end": "1964750"
  },
  {
    "text": "could see here that our behavior looks roughly similar to before but here the",
    "start": "1964750",
    "end": "1970750"
  },
  {
    "text": "behavior has changed and it's flipped around to the way we would hope it be it would be that expect should make it",
    "start": "1970750",
    "end": "1977620"
  },
  {
    "text": "faster the problem is is it didn't i know specifically where this affected",
    "start": "1977620",
    "end": "1983800"
  },
  {
    "text": "the code it was in the destructor for my small string up to my string in which i put it is unlikely that the string will",
    "start": "1983800",
    "end": "1991360"
  },
  {
    "text": "be bigger than the small size cuz that's the point of a small string ops my string isn't it and therefore in the",
    "start": "1991360",
    "end": "1997720"
  },
  {
    "text": "destructor to say always I've got to check to see whether the size is bigger than my small size therefore I need to",
    "start": "1997720",
    "end": "2003390"
  },
  {
    "text": "delete the block I've allocated on the heap is unlikely I can ignore that",
    "start": "2003390",
    "end": "2010910"
  },
  {
    "text": "failed for this version of GCC here it",
    "start": "2011360",
    "end": "2016860"
  },
  {
    "text": "succeeded again we see a lack of stability in the optimizer output I want",
    "start": "2016860",
    "end": "2024810"
  },
  {
    "text": "to see stability so that when I change my compiler when I tweak my coded reliable things happen predictable",
    "start": "2024810",
    "end": "2030780"
  },
  {
    "text": "things happen okay let's look at newer versions of GCC they were all pretty old",
    "start": "2030780",
    "end": "2036090"
  },
  {
    "text": "maybe you know surely the GCC lads you know whoops dropped a clang are there mr. ball we'll",
    "start": "2036090",
    "end": "2043230"
  },
  {
    "text": "fix it completely changed again here 10",
    "start": "2043230",
    "end": "2053790"
  },
  {
    "text": "to the 15 we can ignore that it optimized it out here statistically important in this case 6 3",
    "start": "2053790",
    "end": "2064500"
  },
  {
    "text": "I decided to stick these on a log scale because I wanted to see what happened",
    "start": "2064500",
    "end": "2069870"
  },
  {
    "text": "round here that area there small string replace we",
    "start": "2069870",
    "end": "2075419"
  },
  {
    "text": "can see that we can still see that built in small for a small string replace built and expect still pesum eyes the",
    "start": "2075419",
    "end": "2082980"
  },
  {
    "text": "code so don't expect that you're likely",
    "start": "2082980",
    "end": "2088648"
  },
  {
    "text": "and unlikely hash defines are going to help you okay what about seven point",
    "start": "2088649",
    "end": "2095519"
  },
  {
    "start": "2093000",
    "end": "2191000"
  },
  {
    "text": "three six point three is a bit old really surely won't come on GC eight plus point one eight point two is out",
    "start": "2095519",
    "end": "2100829"
  },
  {
    "text": "what do they do again with these top figures we can ignore them because a lot tens of the fifteen operations on a two",
    "start": "2100829",
    "end": "2108869"
  },
  {
    "text": "point six gigahertz processor it optimized it out I don't care this is what I'm interested in here made no",
    "start": "2108869",
    "end": "2116099"
  },
  {
    "text": "difference I thank the Lord I'd rather have no difference than making it worse",
    "start": "2116099",
    "end": "2122869"
  },
  {
    "text": "okay what about eight point one oh my oh",
    "start": "2124940",
    "end": "2134690"
  },
  {
    "text": "dear oh dear oh dear oh dear oh dear without built-in expect GCC 8.1",
    "start": "2135619",
    "end": "2142319"
  },
  {
    "text": "optimized it's out with built-in expect it didn't the really really worst-case scenario I could ever imagine because",
    "start": "2142319",
    "end": "2149400"
  },
  {
    "text": "here the sweet spot was reached it nothing was done that's what I want to do I want to do nothing I want it to",
    "start": "2149400",
    "end": "2156089"
  },
  {
    "text": "remove the code in tirely here again on",
    "start": "2156089",
    "end": "2161730"
  },
  {
    "text": "a log scale so he can see a bit better what's happening around here still very",
    "start": "2161730",
    "end": "2166769"
  },
  {
    "text": "bad performance okay what about clang",
    "start": "2166769",
    "end": "2175700"
  },
  {
    "text": "let's see what clatter clang goes optimizing things out jolly good here no",
    "start": "2175700",
    "end": "2183089"
  },
  {
    "text": "effect again there's perhaps slightly better than GCC just being frankly a",
    "start": "2183089",
    "end": "2189720"
  },
  {
    "text": "dog's dinner so flushed with that",
    "start": "2189720",
    "end": "2194910"
  },
  {
    "start": "2191000",
    "end": "2374000"
  },
  {
    "text": "success and looking at if statements what about switch statements which same",
    "start": "2194910",
    "end": "2200099"
  },
  {
    "text": "as computed go tunes basically maybe it's a computer go to maybe it",
    "start": "2200099",
    "end": "2205380"
  },
  {
    "text": "isn't I wonder how they generated so I've followed down a rabbit hole there's",
    "start": "2205380",
    "end": "2211980"
  },
  {
    "text": "a very interesting algorithm that GCC uses for generating and most compilers appear to use for generating their",
    "start": "2211980",
    "end": "2218520"
  },
  {
    "text": "switch statements which is essentially a binary search it doesn't use a jump",
    "start": "2218520",
    "end": "2224190"
  },
  {
    "text": "table unless they're very contiguous monotonically increasing by a fixed stride so fine if a jump tables really",
    "start": "2224190",
    "end": "2234060"
  },
  {
    "text": "quick let's ignore that and let's put in different oh yes and there's no static",
    "start": "2234060",
    "end": "2241110"
  },
  {
    "text": "prediction for switch statements sorry",
    "start": "2241110",
    "end": "2247010"
  },
  {
    "text": "there is no they were the law that the first label is more likely or default is",
    "start": "2247010",
    "end": "2254400"
  },
  {
    "text": "more likely is wrong that received wisdom is flat wrong forgive me I dispel",
    "start": "2254400",
    "end": "2262710"
  },
  {
    "text": "myths so here we have an extremely complicated switch statement you can see from my examples of course these are",
    "start": "2262710",
    "end": "2269070"
  },
  {
    "text": "trivial examples to fit on a slide tralala lala exposition only these were",
    "start": "2269070",
    "end": "2275610"
  },
  {
    "text": "chosen by me typing on a keyboard so they're not truly random they're human random okay what was generated if you",
    "start": "2275610",
    "end": "2285750"
  },
  {
    "text": "squint and have a look at it what you can do is when I say it's a it's a binary search we look at this we jump to",
    "start": "2285750",
    "end": "2293340"
  },
  {
    "text": "3 L 3 where's L 3 it's there or we jump",
    "start": "2293340",
    "end": "2299340"
  },
  {
    "text": "to L 4 which is squint here which does a comparison does a check l 7 so L 7 so",
    "start": "2299340",
    "end": "2307350"
  },
  {
    "text": "you can see hand waving there's a kind of it's not as similar if it's not just a simple if chain there's a bit of",
    "start": "2307350",
    "end": "2313920"
  },
  {
    "text": "jumping around going on but do you see",
    "start": "2313920",
    "end": "2320520"
  },
  {
    "text": "these versions o 3 generated code no effect GC 8.1 ICC unmodified no",
    "start": "2320520",
    "end": "2327600"
  },
  {
    "text": "----builtin expect remember the built-in expect can take an int into it so you'd have thought what you could do with your",
    "start": "2327600",
    "end": "2332700"
  },
  {
    "text": "switch statement here is say built-in expect year thirty and you'd hope it would",
    "start": "2332700",
    "end": "2341010"
  },
  {
    "text": "hoist 30 somehow out of it this case label out of that and put it as the statically predicted one no no effect at",
    "start": "2341010",
    "end": "2348480"
  },
  {
    "text": "all but crying is affected by built-in expect in the way you would expect so if",
    "start": "2348480",
    "end": "2356310"
  },
  {
    "text": "I put in here ----builtin expect I comma",
    "start": "2356310",
    "end": "2361770"
  },
  {
    "text": "thirty this would have been hoisted out into a condition at the beginning and if",
    "start": "2361770",
    "end": "2367260"
  },
  {
    "text": "statements at the beginning with the else being the switch statement that's",
    "start": "2367260",
    "end": "2372690"
  },
  {
    "text": "nice the problem is GCC and ICC are unaffected so the problem is I don't",
    "start": "2372690",
    "end": "2379470"
  },
  {
    "start": "2374000",
    "end": "2425000"
  },
  {
    "text": "have a stable optimization across different compilers yes I haven't asked",
    "start": "2379470",
    "end": "2390210"
  },
  {
    "text": "it's a very very good question it's quite clear I would suggest they have none I mean all you do is generate the",
    "start": "2390210",
    "end": "2397830"
  },
  {
    "text": "code and do a a you know and do a regex against the two and is it the same or not yeah and if it's different then test",
    "start": "2397830",
    "end": "2403920"
  },
  {
    "text": "failed it's not rocket science I mean I've just dreamt up a test case now that could be done for this clearly",
    "start": "2403920",
    "end": "2411240"
  },
  {
    "text": "they don't otherwise it would be well maybe maybe clanged us maybe G C and ICC",
    "start": "2411240",
    "end": "2419369"
  },
  {
    "text": "do and they've got it the wrong way around don't know I haven't asked so",
    "start": "2419369",
    "end": "2427500"
  },
  {
    "start": "2425000",
    "end": "2457000"
  },
  {
    "text": "okay well hoist are statically predicted label out and do it manually yeah but",
    "start": "2427500",
    "end": "2434640"
  },
  {
    "text": "remember the older the slides I showed a little while back about if-else statements GCC getting it the wrong way",
    "start": "2434640",
    "end": "2441300"
  },
  {
    "text": "round and the built-in expects being potentially a pessimist",
    "start": "2441300",
    "end": "2447050"
  },
  {
    "text": "removing Const extra stopping the compiler optimizing it out doesn't work",
    "start": "2447090",
    "end": "2452970"
  },
  {
    "text": "unfortunately so",
    "start": "2452970",
    "end": "2459290"
  },
  {
    "start": "2457000",
    "end": "2640000"
  },
  {
    "text": "oh when does our break occur I was yapping on its a few minutes isn't it",
    "start": "2459850",
    "end": "2467610"
  },
  {
    "text": "five minutes we can get through this in five minutes come on it's not bailing any templating there okay what I did is",
    "start": "2467610",
    "end": "2476230"
  },
  {
    "text": "I thought I'm going to make mem copy really fast I'm going to make my own",
    "start": "2476230",
    "end": "2481500"
  },
  {
    "text": "customized mem copy that will generate",
    "start": "2481500",
    "end": "2487140"
  },
  {
    "text": "512 bit moves 256 bit moves 128 bit moves 64 bit moves 32 16 8 with some",
    "start": "2487410",
    "end": "2496780"
  },
  {
    "text": "template metaprogramming aligned on roller by the way this lie this file is about 2,000 lines long so for the sake",
    "start": "2496780",
    "end": "2505120"
  },
  {
    "text": "of sanity I have emitted it all this code is available open source under a",
    "start": "2505120",
    "end": "2510850"
  },
  {
    "text": "very permissive license it's LGPL before you all go in horror most people don't",
    "start": "2510850",
    "end": "2516760"
  },
  {
    "text": "understand LGPL it is not the GPL LGPL is even more permissive than the boost",
    "start": "2516760",
    "end": "2522190"
  },
  {
    "text": "license it is perfectly free and available for its use without let or",
    "start": "2522190",
    "end": "2528070"
  },
  {
    "text": "hindrance and IP unencumbered and non-viral so anyway we've got this",
    "start": "2528070",
    "end": "2535270"
  },
  {
    "text": "aligned on roller and the basic point of the align done roller is you see stride",
    "start": "2535270",
    "end": "2540600"
  },
  {
    "text": "and basically what I'm doing is I'm looking at saying can I computer that",
    "start": "2540600",
    "end": "2545950"
  },
  {
    "text": "whole strides here and I'm going to generate separate blocks of code and",
    "start": "2545950",
    "end": "2551590"
  },
  {
    "text": "then we're going to mix and match assembly with lambdas because we can and",
    "start": "2551590",
    "end": "2560320"
  },
  {
    "text": "this see that reinterpret cast here trust me that generates the appropriate",
    "start": "2560320",
    "end": "2568480"
  },
  {
    "text": "SSE for move the appropriate our move AB",
    "start": "2568480",
    "end": "2574570"
  },
  {
    "text": "seek for the SSE for chip so the I am actually generating assembly using",
    "start": "2574570",
    "end": "2581440"
  },
  {
    "text": "template metaprogramming and lambdas",
    "start": "2581440",
    "end": "2585780"
  },
  {
    "text": "snip okay what do I generate if you try",
    "start": "2588390",
    "end": "2594880"
  },
  {
    "text": "to try and cut and paste it into God bolt I have a separate file that I have to do that's about three thousand lines long so you really are abusing miss",
    "start": "2594880",
    "end": "2602170"
  },
  {
    "text": "mattes good efforts here and that's what I get it's it's not bad well apart from",
    "start": "2602170",
    "end": "2615430"
  },
  {
    "text": "the stack being used yeah what happened here we've got a mixture of the stack",
    "start": "2615430",
    "end": "2621580"
  },
  {
    "text": "and an immediate bazaar oh oh dear",
    "start": "2621580",
    "end": "2630360"
  },
  {
    "text": "GC 8.1 fails to compile the code so you",
    "start": "2630360",
    "end": "2637300"
  },
  {
    "text": "can break compilers with this okay what",
    "start": "2637300",
    "end": "2642550"
  },
  {
    "text": "how did clanging do again a mixture of",
    "start": "2642550",
    "end": "2648820"
  },
  {
    "text": "immediate and the stack but you see",
    "start": "2648820",
    "end": "2653890"
  },
  {
    "text": "we've got my nice assembly instructions appearing and there you can see that's 512 that's a 256",
    "start": "2653890",
    "end": "2660910"
  },
  {
    "text": "that's a 63 a 32-bit and so on so and then it decided to throw it in the media",
    "start": "2660910",
    "end": "2667270"
  },
  {
    "text": "there for a laugh I mean white can do immediate Swift a lot I have no idea we",
    "start": "2667270",
    "end": "2676660"
  },
  {
    "text": "can see potentially a performance optimization okay what about ICC just use the stack",
    "start": "2676660",
    "end": "2685000"
  },
  {
    "start": "2679000",
    "end": "2752000"
  },
  {
    "text": "all the time interestingly it managed to schedule my code a bit better despite",
    "start": "2685000",
    "end": "2690520"
  },
  {
    "text": "the fact I generated a fixed sequence of assembly it actually rescheduled it and",
    "start": "2690520",
    "end": "2695530"
  },
  {
    "text": "move them move the move queue up here",
    "start": "2695530",
    "end": "2699810"
  },
  {
    "text": "yeah correct correct standard mmmm copies not too bad the problem is this occasionally",
    "start": "2702680",
    "end": "2712230"
  },
  {
    "text": "you see mattes and mm copy being called as a function remember I'm worried about",
    "start": "2712230",
    "end": "2718530"
  },
  {
    "text": "clock cycles here so a function call overhead the callin return is bad to me",
    "start": "2718530",
    "end": "2723810"
  },
  {
    "text": "the pushing the stack the popping the stack here but really the big killers because that's basically 20 clock cycles",
    "start": "2723810",
    "end": "2729540"
  },
  {
    "text": "I've just flushed down the drain for the cost of maybe this 10 clock cycles I",
    "start": "2729540",
    "end": "2738860"
  },
  {
    "text": "don't know exactly how long these things take but I do know that on the older bulldozer chip that I've got it's",
    "start": "2738860",
    "end": "2744990"
  },
  {
    "text": "unusually slow so this is actually a pessimist on bulldozers I see see some",
    "start": "2744990",
    "end": "2756210"
  },
  {
    "start": "2752000",
    "end": "2775000"
  },
  {
    "text": "more 17 and 18 it's very unstable what happened here my function is called mem",
    "start": "2756210",
    "end": "2763410"
  },
  {
    "text": "copy ox by the way just so I don't accidentally use it I only use it judiciously it created a function call",
    "start": "2763410",
    "end": "2773030"
  },
  {
    "start": "2775000",
    "end": "2880000"
  },
  {
    "text": "does it matter well it varies comparison",
    "start": "2775790",
    "end": "2784980"
  },
  {
    "text": "I ran my string and I replaced the mem copy in it with my optimized mem copy",
    "start": "2784980",
    "end": "2790670"
  },
  {
    "text": "here real pessimism in performance again",
    "start": "2790670",
    "end": "2798570"
  },
  {
    "text": "as I mentioned bulldozers are unusually slow with their SSE units so therefore the they can't generate avx2 because",
    "start": "2798570",
    "end": "2805440"
  },
  {
    "text": "they don't have it they've got a V X so about 5 to 256 are best and it's slow",
    "start": "2805440",
    "end": "2812100"
  },
  {
    "text": "okay what about clang interestingly not much difference my",
    "start": "2812100",
    "end": "2823710"
  },
  {
    "text": "standard my mouth my copy is only a bit slower this is interesting the compare",
    "start": "2823710",
    "end": "2828930"
  },
  {
    "text": "this would imply that my micro optimization although it might look faster from the instruction",
    "start": "2828930",
    "end": "2834900"
  },
  {
    "text": "when you put it into a bit of code makes it worse so that means that sometimes",
    "start": "2834900",
    "end": "2843960"
  },
  {
    "text": "when you think I'm gonna handcraft hand massage some code and go to a great deal of sweat to try and make it faster it",
    "start": "2843960",
    "end": "2852960"
  },
  {
    "text": "may look faster in your micro benchmark and you're adding the instructions together in the instruction count and",
    "start": "2852960",
    "end": "2858420"
  },
  {
    "text": "looking at the number of pipelines you've got in your processor but the problem is is when you throw it in the main code it just generates bad code and",
    "start": "2858420",
    "end": "2866099"
  },
  {
    "text": "that's what we see here what I suggest",
    "start": "2866099",
    "end": "2871109"
  },
  {
    "text": "we do break for coffee and then we can go through this cuz it's 45 minutes in",
    "start": "2871109",
    "end": "2876539"
  },
  {
    "text": "another 45 minutes",
    "start": "2876539",
    "end": "2879170"
  }
]