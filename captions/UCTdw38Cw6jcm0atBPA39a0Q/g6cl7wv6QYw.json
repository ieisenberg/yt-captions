[
  {
    "text": "uh if anything i'm saying doesn't make sense which is often especially if you ask my wife but uh then feel free just to stick",
    "start": "3600",
    "end": "10240"
  },
  {
    "text": "your hand up and say something okay i've worked for a whole load of places i've done government retail manufacturing",
    "start": "10240",
    "end": "16400"
  },
  {
    "text": "i've been in this business for really far too long now honestly and briefly i was one of those contractors",
    "start": "16400",
    "end": "22800"
  },
  {
    "text": "your mum used to warn you about these days i work for muller dairies who um",
    "start": "22800",
    "end": "28000"
  },
  {
    "text": "they're awfully nice and they occasionally provide free yogurt i like that that's good stuff that is",
    "start": "28000",
    "end": "33520"
  },
  {
    "text": "uh right but anyway i'm a film fan so i don't have an agenda so much as a program of",
    "start": "33520",
    "end": "39600"
  },
  {
    "text": "events i'm going with who what where when why how the slightly inaccurately named 6ws",
    "start": "39600",
    "end": "46960"
  },
  {
    "text": "okay first off who is functional programming so i'll show you three gentlemen from",
    "start": "46960",
    "end": "52079"
  },
  {
    "text": "history who were significant to the development of functional programming one of these guys is a software",
    "start": "52079",
    "end": "57600"
  },
  {
    "text": "developer see if you can guess which one this gentleman here is alonzo church he invented a whole load of stuff that",
    "start": "57600",
    "end": "63760"
  },
  {
    "text": "i'm not clever enough to understand but the important bits down the bottom here",
    "start": "63760",
    "end": "68799"
  },
  {
    "text": "this is a way of shorthanding a function into a little thing with an arrow one which we do in c sharp and particularly",
    "start": "68799",
    "end": "75759"
  },
  {
    "text": "of note is this guy here this is the greek letter lambda used to indicate a parameter which is where we get lambda",
    "start": "75759",
    "end": "82000"
  },
  {
    "text": "expressions from this guy this is um uh haskell curry after whom",
    "start": "82000",
    "end": "88479"
  },
  {
    "text": "no fewer than three programming languages are named amongst other things he invented currying which i'll kind of",
    "start": "88479",
    "end": "94240"
  },
  {
    "text": "get into in a bit later he invented an awful lot of the ideas which are then later incorporated into functional",
    "start": "94240",
    "end": "99360"
  },
  {
    "text": "programming could this guy be a software developer he is this is john mccarthy he arguably",
    "start": "99360",
    "end": "106560"
  },
  {
    "text": "invented the very first functional programming language in the 1960s",
    "start": "106560",
    "end": "111600"
  },
  {
    "text": "that's it on the side lisp something like list processing language or something of that sort i'm told it",
    "start": "111600",
    "end": "117600"
  },
  {
    "text": "still has its fans to this day personally never used it apparently it's pretty wild and you can do some extraordinary things with it",
    "start": "117600",
    "end": "124079"
  },
  {
    "text": "fine but so what is functional programming not",
    "start": "124079",
    "end": "129520"
  },
  {
    "text": "for a start the whole point of the last few slides was to show that functional programming is not new it's",
    "start": "129520",
    "end": "136720"
  },
  {
    "text": "really quite old in fact the very beginnings of functional programming go back to the",
    "start": "136720",
    "end": "142560"
  },
  {
    "text": "late 1800s sure it wasn't computed in those days it was maths it was my i once",
    "start": "142560",
    "end": "148640"
  },
  {
    "text": "wasted most of a sunday tracking down those old matte papers and realizing that i'm not clever enough to read any",
    "start": "148640",
    "end": "154560"
  },
  {
    "text": "of them but they do exist and all of this stuff carried on in the",
    "start": "154560",
    "end": "159760"
  },
  {
    "text": "uh all the way through the 50s and then finally in the 60s where it breaks into the computing world",
    "start": "159760",
    "end": "165040"
  },
  {
    "text": "but my point is it's not like the latest trendy javascript framework it is not a thing that is here today and so much",
    "start": "165040",
    "end": "171120"
  },
  {
    "text": "fish and chip paper tomorrow as i say in the uk it's it has been around for a long time it will be around for a long",
    "start": "171120",
    "end": "178800"
  },
  {
    "text": "time it is not a language it's a paradigm so what's paradigm",
    "start": "178800",
    "end": "185440"
  },
  {
    "text": "if you want a metaphor if a programming language is a guitar then a paradigm is the style of music i play i could play",
    "start": "185440",
    "end": "192319"
  },
  {
    "text": "rock music i could play jazz i could play country if i have no soul whatever you get the idea there are different",
    "start": "192319",
    "end": "198560"
  },
  {
    "text": "styles of programming and functional is one of them it is not imperative now that's the other dominant paradigm by",
    "start": "198560",
    "end": "204640"
  },
  {
    "text": "with the other i mean it is the dominant paradigm object orientated as a form of imperative",
    "start": "204640",
    "end": "210720"
  },
  {
    "text": "the one of the big things that defines imperative is that you are very",
    "start": "210720",
    "end": "215920"
  },
  {
    "text": "concerned with how things are done and modifying state",
    "start": "215920",
    "end": "221040"
  },
  {
    "text": "piece by piece building things up and being very particular about the order of",
    "start": "221040",
    "end": "226319"
  },
  {
    "text": "operations how things are done when etc as i'll get to in a minute and",
    "start": "226319",
    "end": "231360"
  },
  {
    "text": "functional we're less concerned with this it's not the solution to all of your problems it will not heat the coffee in",
    "start": "231360",
    "end": "236959"
  },
  {
    "text": "the morning but it'll do a lot of other fun things and it's not difficult this is a common myth about functional",
    "start": "236959",
    "end": "244319"
  },
  {
    "text": "that it's difficult it's not in fact there are fewer things to learn than there are for object-orientated",
    "start": "244319",
    "end": "249840"
  },
  {
    "text": "programming a lot of the folks that i know that have been the most enthusiastic about taking it up are often university students who learned it",
    "start": "249840",
    "end": "256320"
  },
  {
    "text": "first before object orientated the folks i know that tend to resist it the most are the ones who've been dude object",
    "start": "256320",
    "end": "262560"
  },
  {
    "text": "orientated for a very long time and i don't really want to take on a new uh a new way of thinking which is fine",
    "start": "262560",
    "end": "270240"
  },
  {
    "text": "so what is it what actually is it okay it's declarative",
    "start": "270240",
    "end": "276720"
  },
  {
    "text": "now this is the alternative to imperative what is declarative we've probably done bits and pieces of it",
    "start": "276720",
    "end": "281919"
  },
  {
    "text": "before tsql is declarative this is where you were less concerned with",
    "start": "281919",
    "end": "287520"
  },
  {
    "text": "the precise details of how you build up your object piece by piece when you are",
    "start": "287520",
    "end": "292880"
  },
  {
    "text": "writing tsql you write a select aware um an order by a grouping etc do you care",
    "start": "292880",
    "end": "300400"
  },
  {
    "text": "which order they execute in i do not it's not the order it's written in",
    "start": "300400",
    "end": "305440"
  },
  {
    "text": "if anyone's ever really dug into tsql it's not the selector's last bit pretty much maybe-ish sorta but",
    "start": "305440",
    "end": "312720"
  },
  {
    "text": "honestly who cares and that's one of the defining features of a declarative programming language",
    "start": "312720",
    "end": "317919"
  },
  {
    "text": "you don't really care about the order of execution you don't care about the detail of how this is built up you",
    "start": "317919",
    "end": "323919"
  },
  {
    "text": "declare what you want and then let it get on with it immutable so",
    "start": "323919",
    "end": "329280"
  },
  {
    "text": "immutable means once a variable has been set you can't change it again not ever",
    "start": "329280",
    "end": "335120"
  },
  {
    "text": "can we do this in c sharp i'll get to that in a bit sort of meh we'll get to that",
    "start": "335120",
    "end": "340479"
  },
  {
    "text": "higher order functions funky scary name for a simple idea that most of us been doing for years functions passed around as variables",
    "start": "340479",
    "end": "346800"
  },
  {
    "text": "done there we go why do people love to come up with scary names for this stuff i do not know but there you go functions passed around to",
    "start": "346800",
    "end": "352560"
  },
  {
    "text": "variables we've been doing it since what c sharp three uh function lot statement so what's a",
    "start": "352560",
    "end": "357840"
  },
  {
    "text": "statement a statement something that changes the order of the flow if",
    "start": "357840",
    "end": "362880"
  },
  {
    "text": "where for all that stuff those are statements generally speaking don't use them in",
    "start": "362880",
    "end": "368800"
  },
  {
    "text": "functional so try and imagine a program without those statements and you're somewhere close",
    "start": "368800",
    "end": "374080"
  },
  {
    "text": "but probably confused if you don't know what we're going to do we'll get to it we'll get to it bear in mind and referential transparency once",
    "start": "374080",
    "end": "381520"
  },
  {
    "text": "again slightly scary name for something quite simple also known as pure functions so these",
    "start": "381520",
    "end": "387199"
  },
  {
    "text": "are functions that are not allowed to rely on anything except their own parameters",
    "start": "387199",
    "end": "392880"
  },
  {
    "text": "okay the reason for that being amongst other things it makes them more stable but also incredibly incredibly testable the",
    "start": "392880",
    "end": "399280"
  },
  {
    "text": "whole point is that given the same parameters in you will always get the same answer out",
    "start": "399280",
    "end": "406080"
  },
  {
    "text": "no matter what no matter the state of anything in the system no matter the",
    "start": "406080",
    "end": "411120"
  },
  {
    "text": "whole life of the universe no matter what same variables in same answer out that's why it's called referential transparency you can kind of swap the",
    "start": "411120",
    "end": "417759"
  },
  {
    "text": "reference but yeah anyway it's what it's called um",
    "start": "417759",
    "end": "422880"
  },
  {
    "text": "right recursion are we all good with recursion i'm guessing we're all good with recursion yeah yeah going to be tough you meant more to a",
    "start": "422880",
    "end": "429039"
  },
  {
    "text": "bit later if it's not pattern matching there was a time when i actually needed to go into a great deal of detail about",
    "start": "429039",
    "end": "435039"
  },
  {
    "text": "this but we're now doing it in c-sharp like full-on since uh about c-sharp eight uh it's",
    "start": "435039",
    "end": "440800"
  },
  {
    "text": "basically switched statements with knobs on yeah i've actually taken a load of slides out because of the way things are moved these days",
    "start": "440800",
    "end": "446880"
  },
  {
    "text": "stateless there is no state in a proper functional language there's other systems if anyone's used react you",
    "start": "446880",
    "end": "452080"
  },
  {
    "text": "probably have an idea of how we're going to go about doing that and monads monads that's the one that",
    "start": "452080",
    "end": "458880"
  },
  {
    "text": "everyone gets all a bit concerned about when you start talking about well i won't saw a talk by douglas crockford",
    "start": "458880",
    "end": "464879"
  },
  {
    "text": "which was actually about javascript but he said that the curse of the moan ad is that once you gain the ability to",
    "start": "464879",
    "end": "470160"
  },
  {
    "text": "understand it you lose the ability to explain it so i shan't",
    "start": "470160",
    "end": "476400"
  },
  {
    "text": "and it's not difficult i hope in about 40 minutes or so you'll agree with me but who knows",
    "start": "476400",
    "end": "482080"
  },
  {
    "text": "so where is it my throat is getting dry so where is it well there's the",
    "start": "482080",
    "end": "487280"
  },
  {
    "text": "functional languages there are pure functional languages out there there's a whole load of them haskell erlang see i",
    "start": "487280",
    "end": "493599"
  },
  {
    "text": "told you haskell there he is as if there's one he does have them named after him they exist i know they have their their",
    "start": "493599",
    "end": "500479"
  },
  {
    "text": "fans i've heard haskell gets used a lot in banking um elm erlang i've heard of uses of them",
    "start": "500479",
    "end": "506800"
  },
  {
    "text": "if anyone's ever used rabbit mq that's that's written in a pure functional language so they are they exist they're out there i've never used them",
    "start": "506800",
    "end": "512719"
  },
  {
    "text": "personally but fair play to those guys that do hybrid languages java i think java as",
    "start": "512719",
    "end": "518159"
  },
  {
    "text": "often as the case was the first to uh to jump onto this particular boat uh java c sharp they said it's python these days",
    "start": "518159",
    "end": "524800"
  },
  {
    "text": "you can do it in c plus plus as well you name it pretty much an awful lot of languages support both paradigms",
    "start": "524800",
    "end": "530320"
  },
  {
    "text": "uh i should probably mention f sharp at this point yes there is a net language which is pure um it's not purely",
    "start": "530320",
    "end": "537200"
  },
  {
    "text": "functional but it's way more over to the functional side than c sharp is way more and it's it's",
    "start": "537200",
    "end": "543279"
  },
  {
    "text": "cool i've never worked in it personally if anyone wants to go ahead and do it go",
    "start": "543279",
    "end": "548320"
  },
  {
    "text": "for it do it it compiles to the same net runtime behind the scenes so it is",
    "start": "548320",
    "end": "554000"
  },
  {
    "text": "entirely cross-compatible with c-sharp with db.net now at some point in one of these talks",
    "start": "554000",
    "end": "560640"
  },
  {
    "text": "somebody usually asks me why don't we just use f sharp okay here's my answer hands up if you know c",
    "start": "560640",
    "end": "567279"
  },
  {
    "text": "sharp hands up if you know f sharp",
    "start": "567279",
    "end": "573040"
  },
  {
    "text": "there is my answer that's a little facetious but uh my point being not that f sharp's",
    "start": "573040",
    "end": "580480"
  },
  {
    "text": "not well cool it is well cool it is not that f sharp cannot do everything it can do everything",
    "start": "580480",
    "end": "586240"
  },
  {
    "text": "it's more that in a professional environment where you've got a team you've got to keep",
    "start": "586240",
    "end": "591519"
  },
  {
    "text": "your team full of people and so on it is a much bigger and more complicated investment to decide we're going to",
    "start": "591519",
    "end": "596880"
  },
  {
    "text": "commit to f sharp than to c sharp because c sharp developers up to a penny",
    "start": "596880",
    "end": "602240"
  },
  {
    "text": "and f sharp is a much rarer skill but to be honest if my boss said tomorrow we've heard about f sharp we",
    "start": "602240",
    "end": "608720"
  },
  {
    "text": "want to go for it i'd be on board i'd be there for it i would do it the little bit of tinker i've done with that sharp made it look awesome but i don't",
    "start": "608720",
    "end": "614800"
  },
  {
    "text": "personally know how to do it so anyway that's why this is functional c sharp a javascript yes javascript javascript",
    "start": "614800",
    "end": "621920"
  },
  {
    "text": "the wild west of programming javascript supports everything and nothing because everything is everything else but also",
    "start": "621920",
    "end": "628560"
  },
  {
    "text": "nothing but also a function but also an empty array but also text possibly except when it isn't",
    "start": "628560",
    "end": "636079"
  },
  {
    "text": "because javascript so yeah okay when is it when is it good",
    "start": "636079",
    "end": "641519"
  },
  {
    "text": "okay it is good anything you can do anything with it but when i say when what i mean is these are the things where it's happiest it is a paradigm",
    "start": "641519",
    "end": "648079"
  },
  {
    "text": "based around predictability on the same things resulting from the same inputs so",
    "start": "648079",
    "end": "653519"
  },
  {
    "text": "these are the places where you tend to get your best results data processing chunk this data to this data great at",
    "start": "653519",
    "end": "659440"
  },
  {
    "text": "that concurrent systems higher yeah because there is no state there is no state",
    "start": "659440",
    "end": "664800"
  },
  {
    "text": "therefore it much better supports the idea of having a whole load of parallel processes going off there's no shared",
    "start": "664800",
    "end": "671200"
  },
  {
    "text": "state because there is no state so i'm not saying that you don't get race conditions because i'm sure it's always",
    "start": "671200",
    "end": "677120"
  },
  {
    "text": "possible in any complex system but you don't tend to get the problems of resource contention you might get in other languages",
    "start": "677120",
    "end": "683279"
  },
  {
    "text": "and criticality functional programs are more robust than object orientated",
    "start": "683279",
    "end": "689360"
  },
  {
    "text": "you tend to get some applications that will go up and generally never come down there are programming there are pure",
    "start": "689360",
    "end": "695200"
  },
  {
    "text": "functional languages out there which say and i've got no reason to doubt them but once these things actually stand up you can't kill them shorter pressing the",
    "start": "695200",
    "end": "701519"
  },
  {
    "text": "power button on the server and that is probably true now c-sharp can't probably ever quite claim that",
    "start": "701519",
    "end": "707519"
  },
  {
    "text": "file but they are more robust so if you need this thing to go up and stay up this may be the talk for you and",
    "start": "707519",
    "end": "714000"
  },
  {
    "text": "serverless again parallel processing uh stateless if you're interested in going to the serverless route this will",
    "start": "714000",
    "end": "719760"
  },
  {
    "text": "support it strongly so when is it not again not that it can't do these things but",
    "start": "719760",
    "end": "724800"
  },
  {
    "text": "this is where it's less good and this is things where you've got impurity co-sneaking in and particularly things",
    "start": "724800",
    "end": "730800"
  },
  {
    "text": "like external interactions ui there is nothing more impure than a human being",
    "start": "730800",
    "end": "737040"
  },
  {
    "text": "this is where compromises have to be made now i like to think of the metaphor of a shadow a shadow has well broadly",
    "start": "737120",
    "end": "743839"
  },
  {
    "text": "speaking two parts yes i know there's about 14 if you look it up but there's broadly two there's the umbra the big",
    "start": "743839",
    "end": "750639"
  },
  {
    "text": "dark bit in the middle and then the pen umbra the sort of gray fuzzy bit around the outside so if you want to my goal",
    "start": "750639",
    "end": "757120"
  },
  {
    "text": "when i am writing functional c sharp is to maximize the purely functional bit that is the umbra the dark bit and",
    "start": "757120",
    "end": "763200"
  },
  {
    "text": "minimize the sort of fringy bits around the outside where we've actually got to accept that there is a real world that we need to",
    "start": "763200",
    "end": "768720"
  },
  {
    "text": "interact with so that's that's kind of like a caveat so why i touched on some of these it is",
    "start": "768720",
    "end": "775839"
  },
  {
    "text": "concise that's not a small thing how much of our lives do we spend looking at code and wondering what does",
    "start": "775839",
    "end": "782000"
  },
  {
    "text": "this do you know i i i support code bases that are upwards of 20 years old",
    "start": "782000",
    "end": "788880"
  },
  {
    "text": "i've seen one or two that aren't even that old and really how did they get into that state i will never know but it happens functional tends to be more",
    "start": "788880",
    "end": "795519"
  },
  {
    "text": "concise tends to be easier to write and the patterns that we follow in functional tend to be such that it",
    "start": "795519",
    "end": "802160"
  },
  {
    "text": "discourages some of the poor coding that i've seen in some of those code bases i've worked on",
    "start": "802160",
    "end": "807519"
  },
  {
    "text": "it is readable it is testable and this for some people is the one this is one of the features for a lot of people it",
    "start": "807519",
    "end": "813120"
  },
  {
    "text": "is it is incredibly testable and predictable and that's a great thing",
    "start": "813120",
    "end": "818480"
  },
  {
    "text": "it was concurrently touching that robust touch that is fine i think it's fun i think it's fun if no other reason i'm",
    "start": "818480",
    "end": "823680"
  },
  {
    "text": "incredibly lazy and what i really love is not spending an awful lot of time doing code that i don't need to write",
    "start": "823680",
    "end": "830320"
  },
  {
    "text": "and this bypasses a whole load of boilerplate that i can't be bothered to write so let's get on with it bit of",
    "start": "830320",
    "end": "836000"
  },
  {
    "text": "functional code how do we do it this is not functional code this is a bit of good old-fashioned object-orientated",
    "start": "836000",
    "end": "842160"
  },
  {
    "text": "this is the same sort of thing i have to stare at every day sort of thing that probably a few of us could guess what it does in a few moments but do you need",
    "start": "842160",
    "end": "848079"
  },
  {
    "text": "developers like to stare at it for a while it's uh it's like looping splitting it's it's adding things to a",
    "start": "848079",
    "end": "853440"
  },
  {
    "text": "list and how would this look functionally well you get a hint there because you can see resharper's already trying to tell me look like that",
    "start": "853440",
    "end": "861040"
  },
  {
    "text": "so if anyone's about to say that looks like a whole big pile of link that's a whole big pile of link",
    "start": "861040",
    "end": "866880"
  },
  {
    "text": "and not everyone realizes this but link is functional link is entirely based in the functional",
    "start": "866880",
    "end": "872880"
  },
  {
    "text": "paradigm when you write a link expression you are passing in an arrow function which is of",
    "start": "872880",
    "end": "879279"
  },
  {
    "text": "course is a function it's a function passed around as a parameter that's a higher order function",
    "start": "879279",
    "end": "884480"
  },
  {
    "text": "when you perform a select on an array it's not modifying the original array",
    "start": "884480",
    "end": "890160"
  },
  {
    "text": "it is creating a copy of it based on the old one so the old array is immutable",
    "start": "890160",
    "end": "895360"
  },
  {
    "text": "it's functional and it's been around since what c sharp four granted there was a little bit of gap",
    "start": "895360",
    "end": "900959"
  },
  {
    "text": "before we got many more functional features after that but link was the start link is the beginning of c sharp supporting both paradigms so",
    "start": "900959",
    "end": "908320"
  },
  {
    "text": "my goal in a way is to turn the whole of c sharp into something that looks rather like link so if like me you think that",
    "start": "908320",
    "end": "913839"
  },
  {
    "text": "link's one of the best features of c-sharp which i honestly think it is then hopefully gonna enjoy the rest of",
    "start": "913839",
    "end": "919120"
  },
  {
    "text": "the talk but uh there we go that's simple and the nice thing is easy to read there's a",
    "start": "919120",
    "end": "924480"
  },
  {
    "text": "logical order of operations it's easy to throw something in take something out it's simpler to know what it's doing",
    "start": "924480",
    "end": "932000"
  },
  {
    "text": "and um it's it's not yeah i like it i think it's more elegant and try adding a whole",
    "start": "932000",
    "end": "937920"
  },
  {
    "text": "bunch of extra ridiculous logic into that you can't it's a it's a link thing see",
    "start": "937920",
    "end": "943199"
  },
  {
    "text": "right anyway moving on this is something that when i used to work for the tax people in the uk i had",
    "start": "943199",
    "end": "948639"
  },
  {
    "text": "to look for an awful lot this is a validation for a nino anyone know what a nino is it's less",
    "start": "948639",
    "end": "954959"
  },
  {
    "text": "likely to be something people know over here it's a national insurance number uh it's like a code that you have to give in when you're paying your tax it has a",
    "start": "954959",
    "end": "961519"
  },
  {
    "text": "whole load of ridiculous validation logic and what i've got here is a great big long function there's a whole load",
    "start": "961519",
    "end": "968639"
  },
  {
    "text": "of early returns i don't know if anyone can see that here we go checking each rule if the rule's not followed return",
    "start": "968639",
    "end": "973839"
  },
  {
    "text": "false early and then finally at the bottom which oh it's missing for some reason there's a return troop just trust me it's there",
    "start": "973839",
    "end": "980639"
  },
  {
    "text": "so how would i turn this into something that looks vaguely functional like this actually",
    "start": "980639",
    "end": "985839"
  },
  {
    "text": "so this is putting funks into an array which you can totally do and once you start doing things like",
    "start": "985839",
    "end": "992000"
  },
  {
    "text": "that you can do some interesting stuff um can anyone see my code by the way not used to such a big room right",
    "start": "992000",
    "end": "999120"
  },
  {
    "text": "so i'll try and describe what we've got here we've got a series of functions up here i've just i've described them separately there just for the sake of",
    "start": "999120",
    "end": "1005199"
  },
  {
    "text": "readability for my code base i've got one that says must have a length of nine which is x going to x dot length is nine",
    "start": "1005199",
    "end": "1011759"
  },
  {
    "text": "this is must start with an alphanumeric and i've got a regex the rest of areas are the red x's it's not really that",
    "start": "1011759",
    "end": "1016959"
  },
  {
    "text": "important what these are but here i'm sticking them all literally just into an array and then here",
    "start": "1016959",
    "end": "1022720"
  },
  {
    "text": "i'm calling dot all now that's a link expression so we haven't really done a very great deal to",
    "start": "1022720",
    "end": "1028079"
  },
  {
    "text": "c sharp at the moment but that is dot all so and inside the dot all what i'm saying is take the original nino that is",
    "start": "1028079",
    "end": "1035280"
  },
  {
    "text": "national insurance number and then feed it into whatever x is now x in this case now is a function all of",
    "start": "1035280",
    "end": "1042558"
  },
  {
    "text": "these functions are strings to bools each one's about so what does this mean what this means is it's going to go",
    "start": "1042559",
    "end": "1048640"
  },
  {
    "text": "through each one of these in turn execute and all means that every single one must return true",
    "start": "1048640",
    "end": "1055280"
  },
  {
    "text": "if a single one returns false the entire all statement fails out",
    "start": "1055280",
    "end": "1061120"
  },
  {
    "text": "so all of that ridiculous boilerplate on the previous slide is now captured in",
    "start": "1061120",
    "end": "1067200"
  },
  {
    "text": "the structure of this all and that's so much easier",
    "start": "1067200",
    "end": "1073919"
  },
  {
    "text": "you could also do it like this you could write an extension method i am actually quite a fan of extension methods they get a big rap a bad rap i don't think",
    "start": "1073919",
    "end": "1081440"
  },
  {
    "text": "that's entirely fair just don't put any business logic in them that's the way of doom but other than that extension",
    "start": "1081440",
    "end": "1086480"
  },
  {
    "text": "methods are awesome and so i've created myself a little extension method which takes everything and takes the list of predicates that being things that turn",
    "start": "1086480",
    "end": "1093360"
  },
  {
    "text": "whatever into a bull and then runs them all so that means i've now got a validate function hanging off almost",
    "start": "1093360",
    "end": "1098400"
  },
  {
    "text": "everything and i could just call validate and then list all my validate rules wow",
    "start": "1098400",
    "end": "1103919"
  },
  {
    "text": "imagine writing that long hand take it ages this is another kind of example of how",
    "start": "1103919",
    "end": "1110240"
  },
  {
    "text": "you use higher order functions this isn't we call this alto you could call this i've seen this called a few things",
    "start": "1110240",
    "end": "1115280"
  },
  {
    "text": "but alt is as good as any so in this case i've got two funks they wouldn't really be funks in the",
    "start": "1115280",
    "end": "1120799"
  },
  {
    "text": "real world imagine their database operations or text based file lookups whatever i don't really mind but the",
    "start": "1120799",
    "end": "1127520"
  },
  {
    "text": "point is that this one here number one works uh you're given a string and it will give you back uh this works plus",
    "start": "1127520",
    "end": "1134000"
  },
  {
    "text": "whatever you just said the second one here is this doesn't work and it's returning a null so the point is i've got two ways of",
    "start": "1134000",
    "end": "1140559"
  },
  {
    "text": "looking up a bit of data as i say this could represent maybe a web api and maybe a file based alternative",
    "start": "1140559",
    "end": "1146880"
  },
  {
    "text": "and one of them works and one of them fails okay and in an alt scenario what",
    "start": "1146880",
    "end": "1152480"
  },
  {
    "text": "you do is input which is my name as it happens called alt and then pass it the two",
    "start": "1152480",
    "end": "1157840"
  },
  {
    "text": "different methods and what it will do is try the first one then try the other one",
    "start": "1157840",
    "end": "1163039"
  },
  {
    "text": "and this will actually work so i'm passing in both operations the first one that doesn't work first and it doesn't",
    "start": "1163039",
    "end": "1168640"
  },
  {
    "text": "fail it will not break it will not return null that's how you do it",
    "start": "1168640",
    "end": "1176400"
  },
  {
    "text": "so first off my alt which is uh an alter of input t input to t output attaching to t input",
    "start": "1176720",
    "end": "1184559"
  },
  {
    "text": "which means it attaches to everything and taking two function one and your two which turn input to output",
    "start": "1184559",
    "end": "1191039"
  },
  {
    "text": "and i've created another extension called if default do which just says attach to everything again check whether",
    "start": "1191039",
    "end": "1196320"
  },
  {
    "text": "it's null and if it's null do the other thing do the other thing i'm passing in which is the other",
    "start": "1196320",
    "end": "1202080"
  },
  {
    "text": "function now this here is the long slightly scary way of actually checking null",
    "start": "1202080",
    "end": "1207840"
  },
  {
    "text": "when you're dealing with generics because not everything defaults to no integers don't booleans don't you know",
    "start": "1207840",
    "end": "1214000"
  },
  {
    "text": "the song okay and last one of these this is a fork",
    "start": "1214000",
    "end": "1220480"
  },
  {
    "text": "so a fork is based on the idea that you have a single input then you have many prongs of your fork each of which do a",
    "start": "1220480",
    "end": "1227039"
  },
  {
    "text": "separate operation and then you have something at the end which sticks all the prongs back together again",
    "start": "1227039",
    "end": "1232400"
  },
  {
    "text": "so this is a ridiculous example and why would you ever do this but i'm just demonstrating",
    "start": "1232400",
    "end": "1237440"
  },
  {
    "text": "uh so i've got this great big long string it's actually based on one of the um exercises from the the advent of",
    "start": "1237440",
    "end": "1242960"
  },
  {
    "text": "codes and i'll do that i love the advent of code that is my december burnout that i go through every year at about the",
    "start": "1242960",
    "end": "1248880"
  },
  {
    "text": "13th of december that's usually about as far as i get at which point i'd either collapse in a nervous wreck on the floor",
    "start": "1248880",
    "end": "1254320"
  },
  {
    "text": "because of how much i'm working or stop doing the advent of code now but anyway um",
    "start": "1254320",
    "end": "1259919"
  },
  {
    "text": "so what i'm saying is here this is positive fascinating function which is going to stick everything together which is a sum in my case and then each fork",
    "start": "1259919",
    "end": "1266799"
  },
  {
    "text": "is going to each prong is going to count a different item and a's b's and c's and again why would i ever do this in the",
    "start": "1266799",
    "end": "1273200"
  },
  {
    "text": "real world but my point is you can get one input many calculations then stick them together again again it's a sort of",
    "start": "1273200",
    "end": "1280400"
  },
  {
    "text": "we're separating out the structure of the code from what you actually the specifics of what you're passing into it",
    "start": "1280400",
    "end": "1287679"
  },
  {
    "text": "and that's how you do it it's just same sort of thing again we've got our funks we are",
    "start": "1287679",
    "end": "1293200"
  },
  {
    "text": "this is map which is one of those great tools you never really noticed you needed it's just a simple simple",
    "start": "1293200",
    "end": "1298480"
  },
  {
    "text": "extension method which attaches to everything and takes a funk that turns old thing to a new thing what it means is you can kind of like do a select",
    "start": "1298480",
    "end": "1305360"
  },
  {
    "text": "except it selects the whole object at one time instead of selecting each element of an array it's the whole",
    "start": "1305360",
    "end": "1310400"
  },
  {
    "text": "object so i find it very useful and then the fork is just",
    "start": "1310400",
    "end": "1316080"
  },
  {
    "text": "take the the join and then a params so you can stick as many prongs as you like each of which is a funk",
    "start": "1316080",
    "end": "1322000"
  },
  {
    "text": "so these are the sorts of fun things you can do when you start playing around with the idea of higher order functions",
    "start": "1322000",
    "end": "1327200"
  },
  {
    "text": "that is functions passed around as parameters so moving on to a different area this is",
    "start": "1327200",
    "end": "1334880"
  },
  {
    "text": "this is one of those um examples that you get in an awful lot of object-orientated books this is bank",
    "start": "1334880",
    "end": "1340320"
  },
  {
    "text": "accounts so i'm going to imagine that there's a standard bank account which has got a balance and an interest we'll inherit on",
    "start": "1340320",
    "end": "1347200"
  },
  {
    "text": "that with the super duper one which has got a bonus interest and then after that the dodgy one which has got a brown",
    "start": "1347200",
    "end": "1354320"
  },
  {
    "text": "paper bag of money presumably passed in a car park now insert the name of a politician you don't care for at this",
    "start": "1354320",
    "end": "1360080"
  },
  {
    "text": "point i'm not going to name a name i know i'm thinking oh man but you feel free knock yourself out",
    "start": "1360080",
    "end": "1366159"
  },
  {
    "text": "so i'll have different rules for each of these bank accounts now this was one of the bits that when i started doing this talk was quite",
    "start": "1366159",
    "end": "1371679"
  },
  {
    "text": "revolutionary but these days becoming a little more normal so there we go switch statement in",
    "start": "1371679",
    "end": "1376799"
  },
  {
    "text": "rel not the very latest c sharp but there's the the early version which is still really well cool",
    "start": "1376799",
    "end": "1381919"
  },
  {
    "text": "and this is switching on types if anyone hasn't seen this go play with it you're switching here on the type",
    "start": "1381919",
    "end": "1388480"
  },
  {
    "text": "not on the um not on the values within it so i'm passing in a base bank account i can switch on",
    "start": "1388480",
    "end": "1395440"
  },
  {
    "text": "whether it's actually a dodgy bank account and then wrap it into a local variable here so that means that if it",
    "start": "1395440",
    "end": "1401280"
  },
  {
    "text": "really is one of those subtypes it will hit this case and then it will be",
    "start": "1401280",
    "end": "1406640"
  },
  {
    "text": "wrapped into this local object so i could bypass all of that tedious checking with if type double equals and",
    "start": "1406640",
    "end": "1414000"
  },
  {
    "text": "then doing um doing some uh some switching of types and all that sort of thing does it all",
    "start": "1414000",
    "end": "1419919"
  },
  {
    "text": "for us there's a lot of boilerplate now we just don't need to write anymore and you could also stick in a when to be",
    "start": "1419919",
    "end": "1425360"
  },
  {
    "text": "specific about the properties of the of the class now as of the very more recent",
    "start": "1425360",
    "end": "1431440"
  },
  {
    "text": "versions of c sharp it looks actually more like this which is even cooler",
    "start": "1431440",
    "end": "1436880"
  },
  {
    "text": "and one of my favorite features since the most recent cool features and",
    "start": "1436880",
    "end": "1442559"
  },
  {
    "text": "it's a much nicer syntax we're we're bordering on something that looks a lot like json now and this is also",
    "start": "1442559",
    "end": "1448559"
  },
  {
    "text": "incredibly cool this is a default over here the underscore now as of c 11 which isn't out yet it",
    "start": "1448559",
    "end": "1456000"
  },
  {
    "text": "looks like they're planning to enhance this sort of feature even further so there's talk of pattern matchings",
    "start": "1456000",
    "end": "1462480"
  },
  {
    "text": "which match on the elements of arrays which sounds brilliant so things like",
    "start": "1462480",
    "end": "1468320"
  },
  {
    "text": "switch on this l array is empty or switch on this array starts with this",
    "start": "1468320",
    "end": "1473360"
  },
  {
    "text": "element and then ends in this element that sort of stuff sounds well cool and i can imagine that might be useful",
    "start": "1473360",
    "end": "1479600"
  },
  {
    "text": "for dealing with things like serialized data files and stuff like that but as far as i'm aware it's not all",
    "start": "1479600",
    "end": "1486080"
  },
  {
    "text": "finalized and i don't and c-sharp 11 comes at the end of the year i think so watch this space for for an update to",
    "start": "1486080",
    "end": "1491760"
  },
  {
    "text": "these slides again at some point mutability so we talked about immutability can you do immutability in",
    "start": "1491760",
    "end": "1498320"
  },
  {
    "text": "c sharp like i said the answer the short answer is the long answer is this",
    "start": "1498320",
    "end": "1503679"
  },
  {
    "text": "so this is immutable it is these are an int and a string",
    "start": "1503679",
    "end": "1509760"
  },
  {
    "text": "i have got a getter i have no setter i am setting them within the",
    "start": "1509760",
    "end": "1515840"
  },
  {
    "text": "within the constructor so sure this is immutable no worries",
    "start": "1515840",
    "end": "1521679"
  },
  {
    "text": "is this a mutable so i have now added an i list here type",
    "start": "1521840",
    "end": "1527279"
  },
  {
    "text": "c now it's still got no setter is it immutable no no it's not",
    "start": "1527279",
    "end": "1533360"
  },
  {
    "text": "because i can still call the dot add so it's not",
    "start": "1533360",
    "end": "1538880"
  },
  {
    "text": "i could change it like this there we go mutable array there we go sorted it's immutable now that's fine you can pass",
    "start": "1538880",
    "end": "1545520"
  },
  {
    "text": "in as many lists as you like you can't change it so we're good how about this",
    "start": "1545520",
    "end": "1550880"
  },
  {
    "text": "i've now got a subclass i don't know what subclass is i've called it subclass because i don't care is this immutable well actually i don't",
    "start": "1550880",
    "end": "1557440"
  },
  {
    "text": "know i don't know does subclass actually implement immutability i don't know",
    "start": "1557440",
    "end": "1563600"
  },
  {
    "text": "and this gets even more complicated when you start dealing with things like third party libraries",
    "start": "1563600",
    "end": "1569360"
  },
  {
    "text": "uh stuff that is well outside of your control so frankly it's a little bit of a pipe",
    "start": "1569360",
    "end": "1574640"
  },
  {
    "text": "dream immutability in c-sharp i mean yes we have this feature which is you",
    "start": "1574640",
    "end": "1581120"
  },
  {
    "text": "can stick nullable at the tag at the top of your file and it won't actually make things immutable it'll just put a",
    "start": "1581120",
    "end": "1587039"
  },
  {
    "text": "compiler warning here if you try to make things null so does that i suppose your",
    "start": "1587039",
    "end": "1592559"
  },
  {
    "text": "stuff like that and it'll it might look like this it might give you warnings if you if you try to put null in into",
    "start": "1592559",
    "end": "1598080"
  },
  {
    "text": "statements like this it'll it'll give you a compiler warning and warning you're about to make something null that's good it's not terrible it's not",
    "start": "1598080",
    "end": "1604400"
  },
  {
    "text": "immutability though yeah you can also put in um where is it either ago you put exclamation mark in there as a i'm which",
    "start": "1604400",
    "end": "1610799"
  },
  {
    "text": "is a flag to say i'm a grown-up no i really do want to make it null because i don't know why you'd want to do that but you do",
    "start": "1610799",
    "end": "1617360"
  },
  {
    "text": "you could set it globally like this which again is mostly dealing with the problems of null ability",
    "start": "1617360",
    "end": "1622400"
  },
  {
    "text": "not the same as immutability so this is a good feature there you go um this is probably about a one of the",
    "start": "1622400",
    "end": "1629200"
  },
  {
    "text": "closer ways we can get to it that is using init properties yes it's still not really immutable",
    "start": "1629200",
    "end": "1636320"
  },
  {
    "text": "because i just don't think we can do it not really basically my approach",
    "start": "1636320",
    "end": "1642320"
  },
  {
    "text": "is to pretend just basically pretend that immutability",
    "start": "1642320",
    "end": "1647679"
  },
  {
    "text": "exists and acts like it does but it doesn't",
    "start": "1647679",
    "end": "1653360"
  },
  {
    "text": "i mean fundamentally c sharp is not a pure functional language it never will be that is not on the cards and for",
    "start": "1653360",
    "end": "1660559"
  },
  {
    "text": "backwards compatibility reasons i don't think they're ever going to implement true immutability it's just not going to",
    "start": "1660559",
    "end": "1666720"
  },
  {
    "text": "happen if it means a lot to shift to f sharp that will solve your problems f sharp short it's a mutable there but um c",
    "start": "1666720",
    "end": "1674320"
  },
  {
    "text": "sharp i don't think it's ever going to be but you could still behave like it is nothing stopping you",
    "start": "1674320",
    "end": "1681120"
  },
  {
    "text": "so this is another feature which has come in c-sharp just recently and this is my most favorite feature since the",
    "start": "1681200",
    "end": "1687840"
  },
  {
    "text": "other features this is a record type has anybody played",
    "start": "1687840",
    "end": "1693520"
  },
  {
    "text": "with record types they are pure awesome on toast aren't they i love them",
    "start": "1693520",
    "end": "1699600"
  },
  {
    "text": "the whole the whole idea of a record type is that um",
    "start": "1699600",
    "end": "1704640"
  },
  {
    "text": "amongst other things you can create a new record so record when i say records in class they're",
    "start": "1704640",
    "end": "1710640"
  },
  {
    "text": "pretty much the same thing as classes ish except they have one amazing feature and that is i can create a new one",
    "start": "1710640",
    "end": "1717600"
  },
  {
    "text": "from the old one with one change that's well cool",
    "start": "1717600",
    "end": "1722880"
  },
  {
    "text": "it makes it an awful lot easier to pretend really hard that immutability actually exists because i could do stuff",
    "start": "1722880",
    "end": "1728159"
  },
  {
    "text": "like this so i'm doing a switch statement on this is a totally made-up example where i've got a person class",
    "start": "1728159",
    "end": "1735120"
  },
  {
    "text": "and i'm saying that there is an update operation enum which is telling me the different kinds of updates i could do",
    "start": "1735120",
    "end": "1740799"
  },
  {
    "text": "this is totally made up but it's just to demonstrate and i'm saying if it's a first name then here we go p with first name equals",
    "start": "1740799",
    "end": "1748240"
  },
  {
    "text": "whatever so my param here which is a string could equal any of the fields to be updated",
    "start": "1748240",
    "end": "1753600"
  },
  {
    "text": "but the with statement is the thing that says take a copy of the old person",
    "start": "1753600",
    "end": "1759120"
  },
  {
    "text": "return a new person which is identical except with the changes i just",
    "start": "1759120",
    "end": "1764840"
  },
  {
    "text": "said that is one of the most boilerplate saving changes that have been in c-sharp for absolutely ages and it makes it very",
    "start": "1764840",
    "end": "1772559"
  },
  {
    "text": "very easy to implement something close to proper immutability because that's generally the way i do it",
    "start": "1772559",
    "end": "1779279"
  },
  {
    "text": "when instead of going for this sort of object-orientated method of passing my class by reference change it inside",
    "start": "1779279",
    "end": "1786240"
  },
  {
    "text": "which i do not like it makes me feel squeamish instead i tend to make a replica of the old one and then return the new one and",
    "start": "1786240",
    "end": "1793520"
  },
  {
    "text": "this makes it incredibly simple to do that so record types check them out if you haven't already they are smashing",
    "start": "1793520",
    "end": "1801919"
  },
  {
    "text": "so i did talk about carrying here we go so what is carrying",
    "start": "1801919",
    "end": "1807760"
  },
  {
    "text": "we're about to find out if anyone in the audience knows this is a hypothetical ad function",
    "start": "1807760",
    "end": "1813840"
  },
  {
    "text": "a plus b there we go nothing controversial there if this was a hype an actual curried",
    "start": "1813840",
    "end": "1819600"
  },
  {
    "text": "function so well if it was non-carried function i could give it 10 and 20 and i'd get 30. no worries there",
    "start": "1819600",
    "end": "1825440"
  },
  {
    "text": "what if i were only to give it 10 and it was a curried function can anyone take a guess at what the heck",
    "start": "1825440",
    "end": "1831360"
  },
  {
    "text": "i get back out of that it get yeah a function you'd get back a",
    "start": "1831360",
    "end": "1837919"
  },
  {
    "text": "function now there's a rule of thumb in functional programming if there is a question the answer's functions",
    "start": "1837919",
    "end": "1845120"
  },
  {
    "text": "it's mostly true it's always more functions that's way by the way it's called functional",
    "start": "1845120",
    "end": "1850880"
  },
  {
    "text": "programming it's not because the other stuff doesn't work which arguably but it's not",
    "start": "1850880",
    "end": "1857200"
  },
  {
    "text": "it's because it's all based on functions like lego bricks or sort of piled on top of each other so yeah if you passed in a",
    "start": "1857200",
    "end": "1864159"
  },
  {
    "text": "10 to a curried add function with two parameters what you get back is an add",
    "start": "1864159",
    "end": "1869919"
  },
  {
    "text": "10 function so a function where the one parameter has been filled in so can we do that in",
    "start": "1869919",
    "end": "1875200"
  },
  {
    "text": "c sharp",
    "start": "1875200",
    "end": "1878440"
  },
  {
    "text": "you can do it like this this is one method so i do do this sometimes um even if it's quite clear but we've got two",
    "start": "1882720",
    "end": "1890080"
  },
  {
    "text": "arrows arrow one arrow two and what this is this is an add a",
    "start": "1890080",
    "end": "1895919"
  },
  {
    "text": "subtract to multiply divide so these are your basic mathematical operations what i've got basically is like a",
    "start": "1895919",
    "end": "1903200"
  },
  {
    "text": "factory which produces more functions that's kind of close to carrying in",
    "start": "1903200",
    "end": "1909440"
  },
  {
    "text": "principle but it means you literally have to apply the parameters in order one at a time",
    "start": "1909440",
    "end": "1915279"
  },
  {
    "text": "you know it's it's not perfect but so what it means is if you call this thing this add you give it 10 here what",
    "start": "1915279",
    "end": "1922240"
  },
  {
    "text": "you're actually getting back is this x plus y where the x has already been",
    "start": "1922240",
    "end": "1929039"
  },
  {
    "text": "filled in you can you can do that and sometimes i do it for the sake of if nothing else",
    "start": "1929039",
    "end": "1935120"
  },
  {
    "text": "occasionally it looks a little bit more descriptive than sticking in long arrow expressions there are other ways",
    "start": "1935120",
    "end": "1941039"
  },
  {
    "text": "so this is what's called an example of how you might do a partial application it's called which is where you fill in",
    "start": "1941039",
    "end": "1947120"
  },
  {
    "text": "say two or more parameters at the same time you can do it like this so this is",
    "start": "1947120",
    "end": "1952559"
  },
  {
    "text": "a list of doctor who stories now doc i don't know if doctor who's well known over here in",
    "start": "1952559",
    "end": "1957760"
  },
  {
    "text": "portugal but it is um the best tv series in the entire world it actually is if",
    "start": "1957760",
    "end": "1962799"
  },
  {
    "text": "you look in the dictionary you'll find it right there with a big picture of the tardis and everything",
    "start": "1962799",
    "end": "1967919"
  },
  {
    "text": "i'll fight you if you say otherwise i'll meet you so this is um a list of the first very",
    "start": "1967919",
    "end": "1974720"
  },
  {
    "text": "very very first series episode from 1963 starring the boss william hartnell",
    "start": "1974720",
    "end": "1980000"
  },
  {
    "text": "and we've got it in csv format i've got the code the serial number of the episode it's",
    "start": "1980000",
    "end": "1985360"
  },
  {
    "text": "the um the title of the episode and how many episodes it was comprised of okay",
    "start": "1985360",
    "end": "1990880"
  },
  {
    "text": "and here i've got a great big long parser and it's got four parameters i've got",
    "start": "1990880",
    "end": "1996960"
  },
  {
    "text": "the take the thing the actual string the whole string is one parameter what do i split the lines by which is newline in",
    "start": "1996960",
    "end": "2003679"
  },
  {
    "text": "my case what do i split the fields by which is commas in my case and so on so",
    "start": "2003679",
    "end": "2009279"
  },
  {
    "text": "you fill all four of those parameters out and what you get back and then finally which bit of data of this array i'm actually interested in",
    "start": "2009279",
    "end": "2015679"
  },
  {
    "text": "you fill all those in and basically you like get an extra list of the episodes or something but wouldn't it be neat if i didn't have",
    "start": "2015679",
    "end": "2022399"
  },
  {
    "text": "to write a different one of these for wanting to do a summary of each different column of data well you can",
    "start": "2022399",
    "end": "2027600"
  },
  {
    "text": "with a partial application which sadly looks absolutely horrendous and i'll show you it in a minute",
    "start": "2027600",
    "end": "2033840"
  },
  {
    "text": "but here is how you might use one so up here we've got our array",
    "start": "2033840",
    "end": "2038880"
  },
  {
    "text": "so then i'll do dot apply which is how i might do my partial application to fill in some of the parameters so what i've",
    "start": "2038880",
    "end": "2044960"
  },
  {
    "text": "applied here is the new line being the uh thing i split the lines by and the comma which is what the fields by so",
    "start": "2044960",
    "end": "2052638"
  },
  {
    "text": "what i've now created is a parser function which feed it any csv it'll split by line in comma and you get back",
    "start": "2052639",
    "end": "2058800"
  },
  {
    "text": "an array of arrays and i can reuse that as many times as i like then i could um apply with an additional",
    "start": "2058800",
    "end": "2066800"
  },
  {
    "text": "parameter to say i'm interested in the zeroth um field out of out of this list of stuff",
    "start": "2066800",
    "end": "2072800"
  },
  {
    "text": "you got so now what i've got is a function which give it a big long csv you get back a list of all the serial",
    "start": "2072800",
    "end": "2078878"
  },
  {
    "text": "codes and here i could call it again and pass in a one to say i'm interested in the first the number one field to get",
    "start": "2078879",
    "end": "2085118"
  },
  {
    "text": "back a list of the episode titles what it means in short is i wrote one",
    "start": "2085119",
    "end": "2091520"
  },
  {
    "text": "parser function by partially applying bits at a time i can create a sort of tree of a whole",
    "start": "2091520",
    "end": "2099280"
  },
  {
    "text": "load of functions all of which do all sorts of things in a sort of inheritance like scenario",
    "start": "2099280",
    "end": "2105280"
  },
  {
    "text": "but i still only write one function it's a way of reusing code to a",
    "start": "2105280",
    "end": "2110880"
  },
  {
    "text": "ridiculous extent it's really cool it can be done but it's hideous",
    "start": "2110880",
    "end": "2117440"
  },
  {
    "text": "like hideous that's what it looks like so it totally can be done and what",
    "start": "2117440",
    "end": "2123920"
  },
  {
    "text": "basically i'm doing is taking a funk as a parameter and returning a different funk filling in what this also means is",
    "start": "2123920",
    "end": "2130960"
  },
  {
    "text": "because we're not all that fluid in c sharp with how many parameters into how many parameters out for every single",
    "start": "2130960",
    "end": "2136720"
  },
  {
    "text": "combination of how many parameters in to how many out i've got to write another one of these",
    "start": "2136720",
    "end": "2143200"
  },
  {
    "text": "so you could basically write a novel length code bear file to make it happen",
    "start": "2143200",
    "end": "2148880"
  },
  {
    "text": "you can all power to you if you want to do it but yeah it looks a bit hideous",
    "start": "2148880",
    "end": "2154800"
  },
  {
    "text": "so a functional flow a sort of standard function of flow we start with one thing split it into many things",
    "start": "2154800",
    "end": "2161680"
  },
  {
    "text": "filter it a bit turn it into something else and then the final bit the final bit is aggregation",
    "start": "2161680",
    "end": "2167920"
  },
  {
    "text": "now there was a time when i thought surely this is not terribly controversial or terribly unknown but it astonishes me",
    "start": "2167920",
    "end": "2174160"
  },
  {
    "text": "how many people don't realize he can do this sort of stuff quite easily in c sharp turning many things into one thing",
    "start": "2174160",
    "end": "2180800"
  },
  {
    "text": "it's actually really ridiculously easy in c sharp there we go this is how i see most",
    "start": "2180800",
    "end": "2186400"
  },
  {
    "text": "people doing this as a string builder which is looping through my doctor who stories and like preparing a list adding",
    "start": "2186400",
    "end": "2191680"
  },
  {
    "text": "a comma we've got an if statement there to make sure that you don't end up with a comma after the very last item because",
    "start": "2191680",
    "end": "2197200"
  },
  {
    "text": "that looks kind of funny and what we should end up with like a list of uh of all the stories with a comma except",
    "start": "2197200",
    "end": "2203119"
  },
  {
    "text": "the last one and a new line in between them i could do a string.giant i mean",
    "start": "2203119",
    "end": "2208320"
  },
  {
    "text": "yeah i love string.join but how come nobody knows about it i don't understand but anyway that's string.join that's a",
    "start": "2208320",
    "end": "2214640"
  },
  {
    "text": "slightly easy example what if i want to do something more it's complicated this is my hypothetical um",
    "start": "2214640",
    "end": "2222160"
  },
  {
    "text": "list of doctor who stories so i've got the serial number i've got the title i've got the rating",
    "start": "2222160",
    "end": "2228880"
  },
  {
    "text": "i've got the number of episodes because in the old days each story was many episodes and how many are missing now",
    "start": "2228880",
    "end": "2234320"
  },
  {
    "text": "sad story there are 97 episodes of doctor who that are missing if any of you happen to have them please please",
    "start": "2234320",
    "end": "2239440"
  },
  {
    "text": "please hand them back because i'd like to see them again please especially if it's fury from the deep that one's cool anyway",
    "start": "2239440",
    "end": "2244960"
  },
  {
    "text": "what if i wanted to create um a report which was a um some sort of percentage-based thing based on the",
    "start": "2244960",
    "end": "2251200"
  },
  {
    "text": "number of episodes existing to not for the stories and you could totally do that in",
    "start": "2251200",
    "end": "2257280"
  },
  {
    "text": "all sorts of ways we can do a sum a sum is just how you get the number of episodes that's again link",
    "start": "2257280",
    "end": "2262880"
  },
  {
    "text": "uh some there but then there's averages if you want to get average ratings that's the easy stuff still fairly",
    "start": "2262880",
    "end": "2268560"
  },
  {
    "text": "standard link there's the more complicated version again i am astonished by how many people don't know about this",
    "start": "2268560",
    "end": "2274160"
  },
  {
    "text": "aggregate this is the grown-ups version of all the rest of that so this is where you're not just going",
    "start": "2274160",
    "end": "2280640"
  },
  {
    "text": "with a simple sum a simple average or whatever you're specifying your own entirely different behavior i use this",
    "start": "2280640",
    "end": "2286079"
  },
  {
    "text": "flipping tons and this is again based in the functional paradigm it's i think it actually uses recursion behind the",
    "start": "2286079",
    "end": "2291520"
  },
  {
    "text": "surface and um what you do is set a c value you see value is what you're starting",
    "start": "2291520",
    "end": "2297280"
  },
  {
    "text": "with now in my case i'm using tuples tuples is how many total are missing to",
    "start": "2297280",
    "end": "2302480"
  },
  {
    "text": "how many total overall of episodes and then inside that you provide another function which says based on the current",
    "start": "2302480",
    "end": "2309680"
  },
  {
    "text": "item that being like your ex in a select and the running total that being what i've processed so far what is the new",
    "start": "2309680",
    "end": "2316000"
  },
  {
    "text": "running total so given this episode the new um number of total missing episodes",
    "start": "2316000",
    "end": "2321200"
  },
  {
    "text": "is equal to whatever the old total was plus the new episode set and again over here and then we end up with",
    "start": "2321200",
    "end": "2327280"
  },
  {
    "text": "what from an array of data about missing doctor who stories we end up with a single value with all of the values",
    "start": "2327280",
    "end": "2334079"
  },
  {
    "text": "summed uh in a nice handy easy form now this is a silly silly simple example but i have put some very complicated logic",
    "start": "2334079",
    "end": "2340560"
  },
  {
    "text": "into some of these in the past for preparing reports and for getting final values out of things i recently put",
    "start": "2340560",
    "end": "2346560"
  },
  {
    "text": "together um an application for work for covid19 data",
    "start": "2346560",
    "end": "2352320"
  },
  {
    "text": "and we used aggregate quite a lot in that because it's it's so much easier simple and quick and",
    "start": "2352320",
    "end": "2358560"
  },
  {
    "text": "faster right compared to the alternatives so one of my last sections i'm going to",
    "start": "2358560",
    "end": "2364560"
  },
  {
    "text": "talk about time not too bad right i used to work for an american company",
    "start": "2364560",
    "end": "2370960"
  },
  {
    "text": "and there is a bit of a cliche about british people and that is that we like to talk about the weather it is true we do we talk about weather all the time",
    "start": "2370960",
    "end": "2378160"
  },
  {
    "text": "partly because we have never a clue what the weather is going to be an hour from now",
    "start": "2378160",
    "end": "2383200"
  },
  {
    "text": "that's roughly how it works in the uk so you there is a saying you can get four seasons in a single day and it's",
    "start": "2383200",
    "end": "2388880"
  },
  {
    "text": "probably true so my american colleagues would say things like i'm not going to do the accent i can't but they would say things",
    "start": "2388880",
    "end": "2395200"
  },
  {
    "text": "like 100 degrees outside and i think 100 degrees that is the boiling point of water how are you still alive",
    "start": "2395200",
    "end": "2401599"
  },
  {
    "text": "no no no no they mean fahrenheit oh fahrenheit that thing i don't understand",
    "start": "2401599",
    "end": "2407520"
  },
  {
    "text": "great how do i convert it well what is the conversion for fahrenheit to celsius it is deduct 32 multiplied by 5 divided",
    "start": "2407520",
    "end": "2413599"
  },
  {
    "text": "by 9 of course it is simple but here i have my little",
    "start": "2413599",
    "end": "2420640"
  },
  {
    "text": "converter function i'll do each of those operations one after the other",
    "start": "2420640",
    "end": "2425760"
  },
  {
    "text": "and i'll do a math.round so i've got a more sensible figure and then finally i'll can put it into a string put degree",
    "start": "2425760",
    "end": "2432000"
  },
  {
    "text": "centigrade it looks pretty good now that's fine nothing wrong with that there are better ways of writing this",
    "start": "2432000",
    "end": "2437040"
  },
  {
    "text": "though there's a more functional way of writing this this is something called an identity it's a thing in a box",
    "start": "2437040",
    "end": "2444000"
  },
  {
    "text": "thing in a box think of a box what's in the box spoiler so what is this so identity of t",
    "start": "2444000",
    "end": "2450480"
  },
  {
    "text": "meaning t is anything it could be whatever like i said finger box and that is how i get it that's how i",
    "start": "2450480",
    "end": "2456160"
  },
  {
    "text": "set it because it's mutable kinda a bit of syntactic sugar just to mean that i can easily pull it out the box",
    "start": "2456160",
    "end": "2461359"
  },
  {
    "text": "without having to bother to call dot value easy peasy and i'll write in an extension method",
    "start": "2461359",
    "end": "2468480"
  },
  {
    "text": "the first one there is to just turn anything into an identity and then the second one here is called",
    "start": "2468480",
    "end": "2474400"
  },
  {
    "text": "bind i've seen this called all manner of things i've heard it called map i've heard it called all",
    "start": "2474400",
    "end": "2481119"
  },
  {
    "text": "sorts i don't really care what it's called but the point is this is like a select it's like a select in link except",
    "start": "2481119",
    "end": "2488240"
  },
  {
    "text": "once again it operates on the whole object okay you could use bind on an integer",
    "start": "2488240",
    "end": "2494720"
  },
  {
    "text": "and then this is saying your arrow statement is saying turn the old integer into something else there are two um",
    "start": "2494720",
    "end": "2502000"
  },
  {
    "text": "generic parameters so old type to new type i can quite happily shift from a string to an intent to a string provided",
    "start": "2502000",
    "end": "2509599"
  },
  {
    "text": "whatever is inside this funk does that transformation i don't care but if you fed it an enumerable you will",
    "start": "2509599",
    "end": "2516240"
  },
  {
    "text": "see the whole innumerable at once because it operates on the whole object and that's all that is",
    "start": "2516240",
    "end": "2522960"
  },
  {
    "text": "and that's what that looks like oh and uh the other thing is it takes the value out of the old identity and then returns",
    "start": "2522960",
    "end": "2528560"
  },
  {
    "text": "a new one with the so basically take it out this box do a thing put it in this box and then",
    "start": "2528560",
    "end": "2535760"
  },
  {
    "text": "send it on its way that's what it does that's what it looks like so i'll take my decimal input",
    "start": "2535760",
    "end": "2542240"
  },
  {
    "text": "convert it into an identity bind subtract 32 c there you go carrying i told you i use it",
    "start": "2542240",
    "end": "2547920"
  },
  {
    "text": "subtract 32 multiply by five divide by nine math.round whoa done",
    "start": "2547920",
    "end": "2553440"
  },
  {
    "text": "and all of those transformations are stored in this there is none of those little there are none of those",
    "start": "2553440",
    "end": "2558640"
  },
  {
    "text": "modifications of state i don't have to create a little local variable i literally use once and chuck away which",
    "start": "2558640",
    "end": "2563920"
  },
  {
    "text": "isn't a small thing because i have seen functions that stretch over thousands of lines of code",
    "start": "2563920",
    "end": "2569359"
  },
  {
    "text": "and things defined at the top still in scope at the bottom so we've got a great big object defined up here still in",
    "start": "2569359",
    "end": "2575680"
  },
  {
    "text": "scope down here if you do it like this when you run that bind and you run this multiply this multiply function the",
    "start": "2575680",
    "end": "2582400"
  },
  {
    "text": "moment that this binds has run out of scope subject for garbage collection so it's quite clean in that regard you are",
    "start": "2582400",
    "end": "2588160"
  },
  {
    "text": "actually getting automatic cleanup of your your uh cluttered stack so it's not a terrible thing this is the simplest",
    "start": "2588160",
    "end": "2594400"
  },
  {
    "text": "example and by the way the name for this structure is monad so if anyone was ever curious that's",
    "start": "2594400",
    "end": "2600319"
  },
  {
    "text": "what they are in a box uh it's kind of like a relay race think",
    "start": "2600319",
    "end": "2605440"
  },
  {
    "text": "of it that way it's a relay race your person is is running around the track doing their thing handing over the",
    "start": "2605440",
    "end": "2611040"
  },
  {
    "text": "torch next person runs around the track they might do a different thing it's a funny relay race in that regard everyone runs a different track but still the",
    "start": "2611040",
    "end": "2617280"
  },
  {
    "text": "principle is sound that in and of itself is not actually terribly useful really",
    "start": "2617280",
    "end": "2622400"
  },
  {
    "text": "but this is where we can add a level of complication which will make it",
    "start": "2622400",
    "end": "2627440"
  },
  {
    "text": "more apparent what this is bringing to you okay this is another example so i'm getting a person id i'm running",
    "start": "2627440",
    "end": "2634160"
  },
  {
    "text": "this hypothetical function which is getting a person and then i'm calling a series of binds so",
    "start": "2634160",
    "end": "2640480"
  },
  {
    "text": "based on my person i'll take their first name and their last name and their age i'll replace a's with fours e's with",
    "start": "2640480",
    "end": "2646560"
  },
  {
    "text": "threes eyes with ones o's with zeros because that is what we call leap speak",
    "start": "2646560",
    "end": "2652079"
  },
  {
    "text": "and that's because i'm cool and that's where i talk because the kids still do leak speed don't they no",
    "start": "2652079",
    "end": "2657599"
  },
  {
    "text": "yeah yeah yeah because we're cool right but here's a problem",
    "start": "2657599",
    "end": "2662720"
  },
  {
    "text": "what if my get person 2 there didn't find anybody what if it returned null what happens inside this bind",
    "start": "2662720",
    "end": "2672000"
  },
  {
    "text": "explosion no reference exception that doesn't happen in functional programming and",
    "start": "2672480",
    "end": "2678319"
  },
  {
    "text": "i'll show you why so this isn't actually an identity like the last monad this is a different one this is called maybe",
    "start": "2678319",
    "end": "2685839"
  },
  {
    "text": "and this is the simplest useful monad that exists pretty much",
    "start": "2685839",
    "end": "2691838"
  },
  {
    "text": "all the time because it's tedious for me",
    "start": "2692079",
    "end": "2699680"
  },
  {
    "text": "okay",
    "start": "2700400",
    "end": "2703400"
  },
  {
    "text": "a maybe there and it's roughly the same as our identity there's an abstract this is an abstract now not a class it's an",
    "start": "2706640",
    "end": "2712319"
  },
  {
    "text": "abstract",
    "start": "2712319",
    "end": "2715319"
  },
  {
    "text": "now a bit about projection plus i'm a big loudmouth mate am i on am i on",
    "start": "2771440",
    "end": "2776800"
  },
  {
    "text": "oh well good right sorry yes scott vlasin scotland very good website by the way it's actually an f sharp website but",
    "start": "2776800",
    "end": "2783839"
  },
  {
    "text": "there's a lot of very good stuff on it for all sorts of stuff like this slightly more philosophical oh",
    "start": "2783839",
    "end": "2789119"
  },
  {
    "text": "yeah there we go can you that is loud isn't it right i was having so much fun i didn't",
    "start": "2789119",
    "end": "2794400"
  },
  {
    "text": "notice right uh but the point is imagine this right he calls it railway orientated architecture so imagine that",
    "start": "2794400",
    "end": "2801200"
  },
  {
    "text": "you've got a railway running along and you've got two tracks you've got the happy track the something track and",
    "start": "2801200",
    "end": "2807599"
  },
  {
    "text": "you've got the nothing track underneath it and every now and then you've got a set of points going along like this",
    "start": "2807599",
    "end": "2813359"
  },
  {
    "text": "and these points are your your bind functions and what it means is at each point",
    "start": "2813359",
    "end": "2819599"
  },
  {
    "text": "the bind runs it transforms the old thing to the new thing but also there's a check involved that says did it work",
    "start": "2819599",
    "end": "2826480"
  },
  {
    "text": "did it explode was there something coming out of this if there was something if we still got something we",
    "start": "2826480",
    "end": "2832000"
  },
  {
    "text": "move along again and then we'll move on and we move on if at any point",
    "start": "2832000",
    "end": "2837760"
  },
  {
    "text": "something failed or nothing came out you switch you switch to the nothing track and if",
    "start": "2837760",
    "end": "2844640"
  },
  {
    "text": "you're on the nothing track you don't do any more work you just glide along to the end",
    "start": "2844640",
    "end": "2852880"
  },
  {
    "text": "that's what that looks like this is my modified bind function looks like this so there's a switch statement in there",
    "start": "2853920",
    "end": "2860319"
  },
  {
    "text": "and i'm checking that whatever came out of this this is always now a maybe which i remember the maybe might be something",
    "start": "2860319",
    "end": "2866319"
  },
  {
    "text": "or nothing so i'm checking was it something was it null",
    "start": "2866319",
    "end": "2871520"
  },
  {
    "text": "and if it was not null or whatever and it was a something that means we've actually got something we can operate on",
    "start": "2871520",
    "end": "2877680"
  },
  {
    "text": "in which case i'll run the function i'll run the function grab the value stick it in another maybe send it on",
    "start": "2877680",
    "end": "2883599"
  },
  {
    "text": "all other circumstances result in a nothing coming out of this or i'll also put a try catch in there",
    "start": "2883599",
    "end": "2891520"
  },
  {
    "text": "so if we go back to our example what this would mean is so let's imagine that null comes out of this",
    "start": "2891520",
    "end": "2897119"
  },
  {
    "text": "so this is a maybe this is something we've got an integer this is a get person2 now this is",
    "start": "2897119",
    "end": "2902480"
  },
  {
    "text": "actually converting it to like a person object but let's imagine that null comes out of it well um my but this year at this",
    "start": "2902480",
    "end": "2909200"
  },
  {
    "text": "point it's still a something this will come out and this is a something at this point but it's something with a null attached",
    "start": "2909200",
    "end": "2915280"
  },
  {
    "text": "this bind will say check this is it something yeah it is but it's got null in it i'm not going to",
    "start": "2915280",
    "end": "2921520"
  },
  {
    "text": "execute this function so i'll just pass it along i'll just pass the empty box on to the next guy",
    "start": "2921520",
    "end": "2927680"
  },
  {
    "text": "this one will do the same empty box pass it on empty box empty box empty box imagine if i didn't do that imagine all",
    "start": "2927680",
    "end": "2934400"
  },
  {
    "text": "the if statements i'd have to write imagine the length of code just to try and defend myself from nulls and no",
    "start": "2934400",
    "end": "2942480"
  },
  {
    "text": "reference exceptions that all of that error checking",
    "start": "2942480",
    "end": "2947520"
  },
  {
    "text": "is now contained in the structure of my code and i don't need to bother to write it ever again",
    "start": "2947520",
    "end": "2954079"
  },
  {
    "text": "and goodness me the amount of code extra i would have written if i didn't have this is phenomenal",
    "start": "2954079",
    "end": "2959680"
  },
  {
    "text": "this is one of the best code saving tools i've ever come across so i'd thoroughly recommend this and then at",
    "start": "2959680",
    "end": "2965520"
  },
  {
    "text": "the end of it i would probably do a switch statement that just says at the end did i have something or nothing and",
    "start": "2965520",
    "end": "2970800"
  },
  {
    "text": "in fact what i often do in my interfaces is when it's a database lookup i will",
    "start": "2970800",
    "end": "2976559"
  },
  {
    "text": "actually return something along the lines of task maybe person data",
    "start": "2976559",
    "end": "2981760"
  },
  {
    "text": "task because it's async maybe because i don't know if it returned something or not and what i'm saying if i put it in the",
    "start": "2981760",
    "end": "2987920"
  },
  {
    "text": "interface is i don't know if this works i'm giving you a container which might or might not",
    "start": "2987920",
    "end": "2993200"
  },
  {
    "text": "contain something your alternative which is what i tend to see people do is you create your own",
    "start": "2993200",
    "end": "2999200"
  },
  {
    "text": "custom return type which has got object and a boolean or something that says it worked",
    "start": "2999200",
    "end": "3004720"
  },
  {
    "text": "or it didn't this is doing all that for you don't need to do it again it's a structure you can use",
    "start": "3004720",
    "end": "3011440"
  },
  {
    "text": "there's an uh what's that one oh yes my baby okay there's a there's another alternative",
    "start": "3011440",
    "end": "3016559"
  },
  {
    "text": "which is more actually close to what i really use in production we call it either we've got a left and a right same",
    "start": "3016559",
    "end": "3021839"
  },
  {
    "text": "principle left is bad right is good because of some sort of old tradition and",
    "start": "3021839",
    "end": "3028319"
  },
  {
    "text": "in the left which is the one where it didn't work i'll also capture an exception so if any point an exception occurred",
    "start": "3028319",
    "end": "3035040"
  },
  {
    "text": "i'll capture it in the monad even though there's a whole load more binds following it i will still capture the",
    "start": "3035040",
    "end": "3040960"
  },
  {
    "text": "last point where it worked i'll capture the exception and the last state of",
    "start": "3040960",
    "end": "3046000"
  },
  {
    "text": "whatever it was that was held there and then i can log that and we can know exactly how to recreate the problem",
    "start": "3046000",
    "end": "3053040"
  },
  {
    "text": "easy peasy and yeah it's another slightly more complicated",
    "start": "3053040",
    "end": "3059200"
  },
  {
    "text": "okay another question i asked a lot but here's an answer are there any frameworks out there that already",
    "start": "3059200",
    "end": "3064800"
  },
  {
    "text": "implement this stuff yes there are this is language x it does most of this stuff that's what language it's a little",
    "start": "3064800",
    "end": "3071040"
  },
  {
    "text": "small i apologize i could put this up everyone's interested it looks very similar to what i just wrote it's not quite the same",
    "start": "3071040",
    "end": "3077040"
  },
  {
    "text": "one difference is that they use map not bind and they force you at the end of",
    "start": "3077040",
    "end": "3082240"
  },
  {
    "text": "the maps to give two different functions which will force it to collapse into something at the end and that's fine",
    "start": "3082240",
    "end": "3088079"
  },
  {
    "text": "that's fine personally i quite like rolling my own as it were because if nothing else it",
    "start": "3088079",
    "end": "3094720"
  },
  {
    "text": "gets me used to the way to do all this i you know it's a nice insight into how how this all works what the system is",
    "start": "3094720",
    "end": "3101920"
  },
  {
    "text": "and it's not a lot of code really usually you write a teeny little bit of funky code and then you can reuse it all",
    "start": "3101920",
    "end": "3107920"
  },
  {
    "text": "over the place and do incredible things so but yeah languagex a lot of people like",
    "start": "3107920",
    "end": "3113040"
  },
  {
    "text": "it i don't use it further reading places you can go",
    "start": "3113040",
    "end": "3118400"
  },
  {
    "text": "the best book on programming i've read in a very long time is called functional programming c-sharp it's by enrico",
    "start": "3118400",
    "end": "3124079"
  },
  {
    "text": "buenano um he has yet to reply to me ever on twitter",
    "start": "3124079",
    "end": "3129200"
  },
  {
    "text": "but it's cool it's published by manning second edition now available there is a book by vizno angoro",
    "start": "3129200",
    "end": "3134480"
  },
  {
    "text": "published by pat it's okay it's not quite as good as the banana book but it's there it's whatever you wanted the",
    "start": "3134480",
    "end": "3140319"
  },
  {
    "text": "actual first time i was ever exposed to functional programming was ndc oshlo it was a taught by kathleen dallard",
    "start": "3140319",
    "end": "3146400"
  },
  {
    "text": "called function c sharp and that was the first time i've introduced the idea of functional and my journey has been continuing ever since",
    "start": "3146400",
    "end": "3152400"
  },
  {
    "text": "there are talks on pluralsight there's scott valashen's website which is absolutely worth checking out even if",
    "start": "3152400",
    "end": "3158240"
  },
  {
    "text": "you're never going to pick up f sharp it is still worth browsing um",
    "start": "3158240",
    "end": "3163440"
  },
  {
    "text": "now small announcement which i think is something of an exclusive uh for you folks i'm writing a book",
    "start": "3163440",
    "end": "3170079"
  },
  {
    "text": "uh that's it that's my book it's not actually the final cover i don't i'm writing this for o'reilly uh it's going",
    "start": "3170079",
    "end": "3175280"
  },
  {
    "text": "to be called functional program with c sharp written by well me um if anybody wants to scan this this is",
    "start": "3175280",
    "end": "3180559"
  },
  {
    "text": "a discount code that'll get you a 30-day trial with o'reilly's learning platform i can stick this back up if you wanna have a look at it again later feel free",
    "start": "3180559",
    "end": "3186640"
  },
  {
    "text": "dig in they gave me this it's all legit uh so this is currently available in",
    "start": "3186640",
    "end": "3193359"
  },
  {
    "text": "pre-release right now on the o'reilly website there are currently two chapters and the prelude",
    "start": "3193359",
    "end": "3198960"
  },
  {
    "text": "made available to the public no spoilers the butler did not do it",
    "start": "3198960",
    "end": "3205119"
  },
  {
    "text": "but roughly the plan is to release about a chapter a month up until around december",
    "start": "3205200",
    "end": "3210559"
  },
  {
    "text": "and then we'll be getting somewhere close to actually releasing this thing in paper so if you want a dead tree copy that'll be next year but anyway i am",
    "start": "3210559",
    "end": "3217200"
  },
  {
    "text": "writing a book but in the absence of that uh there are plenty of other good books but you know i wrote this one",
    "start": "3217200",
    "end": "3225359"
  },
  {
    "text": "any questions any questions at this point that's not my baby by the way",
    "start": "3226079",
    "end": "3231440"
  },
  {
    "text": "sir",
    "start": "3231440",
    "end": "3234440"
  },
  {
    "text": "i'm sorry i'm uh uh my hearing's not very good",
    "start": "3238960",
    "end": "3244480"
  },
  {
    "text": "that's my fault",
    "start": "3244480",
    "end": "3247960"
  },
  {
    "text": "one off one off yes it's kind of um kind of a maybe kind of library uh just",
    "start": "3250640",
    "end": "3256800"
  },
  {
    "text": "kind of the same sort of stuff i was just wondering if you try that out in this kind of context okay no i have",
    "start": "3256800",
    "end": "3262160"
  },
  {
    "text": "never heard of it i'm afraid um i'll certainly have a look at it as i said my tendency is i um the maybe concept is so",
    "start": "3262160",
    "end": "3269440"
  },
  {
    "text": "simple i just made my own and the nice thing there is i can customize it to be whatever i want i tend to hang like",
    "start": "3269440",
    "end": "3275359"
  },
  {
    "text": "little extra um on events hanging off it so i'll write my my long stream of maybe",
    "start": "3275359",
    "end": "3280960"
  },
  {
    "text": "by my mind and i'll do like on error and on success and stuff at the end so i like to write my own",
    "start": "3280960",
    "end": "3286319"
  },
  {
    "text": "functionality so no i haven't i'm sure it's worth checking out but i've never seen it but uh what do you say it was called again uh one of one",
    "start": "3286319",
    "end": "3293520"
  },
  {
    "text": "off i will check it out i think one of the things um about it is also like some",
    "start": "3293520",
    "end": "3298960"
  },
  {
    "text": "code generation underneath i was wondering like kind of a performance in this context that is that",
    "start": "3298960",
    "end": "3307599"
  },
  {
    "text": "thing you yeah okay performance yeah that's a fair question this is probably not the sort of code",
    "start": "3307599",
    "end": "3313839"
  },
  {
    "text": "i've shown you is probably not optimal is that a problem generally no that's",
    "start": "3313839",
    "end": "3320319"
  },
  {
    "text": "reason being it is an awful lot easier for me to write my lovely code that's easy to maintain and then just chuck a",
    "start": "3320319",
    "end": "3326880"
  },
  {
    "text": "whole bucket of cpu and ram at it than it is for me to write optimal code so",
    "start": "3326880",
    "end": "3333359"
  },
  {
    "text": "i've seen i know there are books a high performance c sharp but generally the more optimal you co get the less readable it gets so",
    "start": "3333359",
    "end": "3340480"
  },
  {
    "text": "it is true that you could probably write more optimal code but unless you're working like mobile apps or somewhere",
    "start": "3340480",
    "end": "3346799"
  },
  {
    "text": "where performance is 100 the focus of your business i know places there are there are a place like that then i don't",
    "start": "3346799",
    "end": "3352640"
  },
  {
    "text": "honestly really care like it is the furthest thing my main concern is can i really maintain this quickly and",
    "start": "3352640",
    "end": "3359119"
  },
  {
    "text": "easily and get the business requirement out the door fast and i'd say this supports that but",
    "start": "3359119",
    "end": "3365200"
  },
  {
    "text": "i would say performance wise it's not horrible it's not terrible nothing wrong with it my kobe 19 app that got hit by one of",
    "start": "3365200",
    "end": "3372079"
  },
  {
    "text": "the highest rates of traffic in the whole history of the business not long ago wrote it entirely functionally it was fine",
    "start": "3372079",
    "end": "3378000"
  },
  {
    "text": "it was fine so it's it's okay it's fine not optimal maybe but it's fine if",
    "start": "3378000",
    "end": "3383040"
  },
  {
    "text": "finances you have your question sir yeah it does thanks um does anyone else have any more questions sir",
    "start": "3383040",
    "end": "3391240"
  },
  {
    "text": "that aren't functional okay the question was do i have any tips for implementing functional programming existing toe",
    "start": "3393760",
    "end": "3399280"
  },
  {
    "text": "bases prayer no to be honest i would just do it a bit at",
    "start": "3399280",
    "end": "3405040"
  },
  {
    "text": "a time most of the techniques i've show shown for the most part with the odd exception things like pattern matching",
    "start": "3405040",
    "end": "3411280"
  },
  {
    "text": "those will work on nearly any version of c sharp going back to about c sharp four so i just put in a bit at a time and a",
    "start": "3411280",
    "end": "3416880"
  },
  {
    "text": "bit at a time at a bit at a time the the maybe thing i would stick that in a code file at the back of your code base",
    "start": "3416880",
    "end": "3422240"
  },
  {
    "text": "somewhere somewhere you don't really care about it daddy's like the hypothetical snuff from thundercats action figure that you own don't want to",
    "start": "3422240",
    "end": "3428799"
  },
  {
    "text": "admit to but it's kind of there in a box and then shove that at the back and then just start using it i wouldn't go and",
    "start": "3428799",
    "end": "3434079"
  },
  {
    "text": "plunder the whole code base and mod multiple whole thing i just whenever you make a change you do it this way or if",
    "start": "3434079",
    "end": "3440079"
  },
  {
    "text": "you see a quick win do it this way maybe you've written a new function but make it maybe the return time and start doing",
    "start": "3440079",
    "end": "3446240"
  },
  {
    "text": "it in a monad monadical is that a word i think i just invented that word uh wait",
    "start": "3446240",
    "end": "3451280"
  },
  {
    "text": "if you see what i mean bit by bit by bit by bit if nothing else it gets the rest of your team used to it",
    "start": "3451280",
    "end": "3456319"
  },
  {
    "text": "so rather than bing bang change everything which is probably just gonna annoy everyone uh any further questions",
    "start": "3456319",
    "end": "3463839"
  },
  {
    "text": "no going once going twice i declare this meeting the midnight society in order thank you",
    "start": "3464079",
    "end": "3472838"
  },
  {
    "text": "yeah that's my twitter account by the way feel free if anyone wants it",
    "start": "3477040",
    "end": "3483799"
  },
  {
    "text": "you",
    "start": "3489280",
    "end": "3491359"
  }
]