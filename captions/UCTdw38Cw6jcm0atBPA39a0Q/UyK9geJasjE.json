[
  {
    "start": "0",
    "end": "47000"
  },
  {
    "text": "hi everybody thanks for coming just curious has anybody have you are",
    "start": "4860",
    "end": "10080"
  },
  {
    "text": "been to be on follows talk about typesafe c++ bunch of people surf on the",
    "start": "10080",
    "end": "17760"
  },
  {
    "text": "theme kind of interesting that many actually most of the c++ talks at this conference have been one way or the",
    "start": "17760",
    "end": "24329"
  },
  {
    "text": "other concerned with type safety so apparently there seems to be quite a big deal for us C++ programmers and my talk",
    "start": "24329",
    "end": "31079"
  },
  {
    "text": "is no exception but what you will notice is if you've been to be on foot talk that it approaches the issue from a",
    "start": "31079",
    "end": "37680"
  },
  {
    "text": "different angle so there's quite apparently a lot of different perspectives on this and mine is just",
    "start": "37680",
    "end": "43829"
  },
  {
    "text": "one of them so that's a small disclaimer in the beginning we contribution about",
    "start": "43829",
    "end": "50070"
  },
  {
    "start": "47000",
    "end": "155000"
  },
  {
    "text": "who I am I'm a freelancer working on Berlin Germany working on firmware development",
    "start": "50070",
    "end": "56640"
  },
  {
    "text": "for embedded systems and what I consider to be my mission here is to combine or",
    "start": "56640",
    "end": "65010"
  },
  {
    "text": "to bring type safety to low level development because I always found it",
    "start": "65010",
    "end": "70140"
  },
  {
    "text": "quite baffling that we work very close to the hardware and just write our",
    "start": "70140",
    "end": "75630"
  },
  {
    "text": "programs in a very imperative style without taking a lot of care to make sure that the commands that we sent",
    "start": "75630",
    "end": "81690"
  },
  {
    "text": "directly to hardware we don't don't take a lot of steps to actually make sure that they are correct and type safety",
    "start": "81690",
    "end": "88500"
  },
  {
    "text": "has a lot of potential to making sure that things that we sent to Hardware actually a consistent makes sense and",
    "start": "88500",
    "end": "93750"
  },
  {
    "text": "are ultimately do the correct thing so combining these things is really what I focus on what a kind of research and you",
    "start": "93750",
    "end": "102810"
  },
  {
    "text": "so to speak I have a couple of side projects and these are the topic of my talk which is about game console",
    "start": "102810",
    "end": "109260"
  },
  {
    "text": "emulation if you ever try to play a Sony",
    "start": "109260",
    "end": "115830"
  },
  {
    "text": "PSP in Nintendo GameCube we a Nintendo 3ds game on your computer for instance",
    "start": "115830",
    "end": "120990"
  },
  {
    "text": "you will probably have seen one of those icons and these are projects that I contributed to on a small scale as well",
    "start": "120990",
    "end": "127620"
  },
  {
    "text": "as on the large scale so been doing that for about five to eight years depending on how you count it so it's really a lot",
    "start": "127620",
    "end": "134610"
  },
  {
    "text": "of interesting stuff to learn about that and if you're looking for an interesting side project to learn about peuta architecture for instance definitely recommend checking out the",
    "start": "134610",
    "end": "141209"
  },
  {
    "text": "emulation scene I regularly post on this stuff on Twitter my projects are all",
    "start": "141209",
    "end": "147450"
  },
  {
    "text": "public and I have a website with a blog so if you want to learn more feel free to check those out as well wait what is",
    "start": "147450",
    "end": "157230"
  },
  {
    "start": "155000",
    "end": "297000"
  },
  {
    "text": "this about surprisingly perhaps it's about serialization and emulation it's",
    "start": "157230",
    "end": "163349"
  },
  {
    "text": "actually about type safety but they are linked together as we will see in a minute but serialization turns out to be",
    "start": "163349",
    "end": "169049"
  },
  {
    "text": "quite a significant problem emulate emulation I will show you a couple of examples about where it shows up what",
    "start": "169049",
    "end": "175440"
  },
  {
    "text": "kind of issues we have with their new naive approach and one specific example will be the inter process communication",
    "start": "175440",
    "end": "181340"
  },
  {
    "text": "subsystem of the Nintendo 3ds again we will see what kind of issues arise what",
    "start": "181340",
    "end": "189090"
  },
  {
    "text": "do we actually want to address and how do we air it I said and specifically our tool of choice here well in generative",
    "start": "189090",
    "end": "195930"
  },
  {
    "text": "and declar would refer to approaches I found quite useful in this case and tool of use for this is modern C++ one of the",
    "start": "195930",
    "end": "203100"
  },
  {
    "text": "plus plus will help us reduce a lot of boilerplate in our code we want to mostly automate all of the annoying",
    "start": "203100",
    "end": "209940"
  },
  {
    "text": "things like keeping count of offsets making sure that our types match the actual data that we see you realize and",
    "start": "209940",
    "end": "215970"
  },
  {
    "text": "other things like that and doing all of this automation we do not want to forget that all the inputs that we have need to",
    "start": "215970",
    "end": "222900"
  },
  {
    "text": "be validated properly so inputs that are supposed to be positive should not be negative obviously otherwise it's in",
    "start": "222900",
    "end": "229470"
  },
  {
    "text": "horrible strings that should not be empty it should not be empty obviously we all need to check for that and it's",
    "start": "229470",
    "end": "235139"
  },
  {
    "text": "easy when automating things to just say yeah ok we automate this and well then",
    "start": "235139",
    "end": "241470"
  },
  {
    "text": "we just don't validate our inputs but we want all of it we want to have our cake and eat it and finally we want to",
    "start": "241470",
    "end": "247620"
  },
  {
    "text": "maximize reuse throughout this entire discussion there's bad last third of my",
    "start": "247620",
    "end": "254040"
  },
  {
    "text": "talk and we will see how that can be achieved as a small note about what more",
    "start": "254040",
    "end": "259500"
  },
  {
    "text": "than C++ actually means here and we're talking about C++ 11 with some C++ 17",
    "start": "259500",
    "end": "265260"
  },
  {
    "text": "features that said work it does work that's sad",
    "start": "265260",
    "end": "274820"
  },
  {
    "text": "all of the things I will show you can technically be implemented with older C++ standards like C++ 98 the difference",
    "start": "274820",
    "end": "281210"
  },
  {
    "text": "is the implementation will actually fit on the slides and for those of you who might not have too much C++ experience",
    "start": "281210",
    "end": "287090"
  },
  {
    "text": "you will actually understand what I'm talking about where is a C++ 98 solution you probably",
    "start": "287090",
    "end": "292280"
  },
  {
    "text": "wouldn't understand it because it would you know fill a book or something right",
    "start": "292280",
    "end": "297790"
  },
  {
    "text": "speaking of that small digression in the beginning once you get a little bit of",
    "start": "297790",
    "end": "302900"
  },
  {
    "text": "an idea of where my audience is actually standing at so can everybody raise their hands when they work with C++ or at",
    "start": "302900",
    "end": "309620"
  },
  {
    "text": "least regularly use it and side projects for instance that's quite a few hands and quite a few non hands as well of",
    "start": "309620",
    "end": "316669"
  },
  {
    "text": "those of you who use C++ do you use modern C++ C++ 11 or beyond so that's",
    "start": "316669",
    "end": "323479"
  },
  {
    "text": "almost the same group interesting and finally how many of you do work on",
    "start": "323479",
    "end": "330050"
  },
  {
    "text": "low-level software like compilers kernels frameworks or anything close to the hardware really so that's",
    "start": "330050",
    "end": "336729"
  },
  {
    "text": "significantly fewer has interesting if",
    "start": "336729",
    "end": "341870"
  },
  {
    "text": "you're in one of the groups you never erase their hand at all now don't worry hopefully the code on the slides will be",
    "start": "341870",
    "end": "347720"
  },
  {
    "text": "clear enough that you'll be able to take away at least the core statements and",
    "start": "347720",
    "end": "353030"
  },
  {
    "text": "the core ideas of what I'm talking about if you're in the group led work that",
    "start": "353030",
    "end": "359690"
  },
  {
    "text": "doesn't use C++ 11 don't despair either consider this more of a - of modern C++",
    "start": "359690",
    "end": "365599"
  },
  {
    "text": "features then if you've never worked with low-level software well this is a good opportunity to get to know what",
    "start": "365599",
    "end": "371690"
  },
  {
    "text": "kind of problems were tackling here wait that's that that's all my questions for",
    "start": "371690",
    "end": "378440"
  },
  {
    "text": "you and now it's your turn if at any point you have a question feel free to interrupt me if I'm not seeing you just",
    "start": "378440",
    "end": "383720"
  },
  {
    "text": "shout at me yell at me whatever I'm happy with that and yeah I feel like I",
    "start": "383720",
    "end": "388910"
  },
  {
    "text": "think a question does contribute to the talk so even if you just want to clarify have some super stressed feature clever",
    "start": "388910",
    "end": "395060"
  },
  {
    "text": "fired I do not hesitate to ask right so let's dive right in emulation and",
    "start": "395060",
    "end": "401870"
  },
  {
    "start": "398000",
    "end": "625000"
  },
  {
    "text": "serialization to give you an idea of why that's a big deal I gave you a small overview here",
    "start": "401870",
    "end": "408949"
  },
  {
    "text": "about what the typical high level software piece looks like I left left side here we have two CPU side modules",
    "start": "408949",
    "end": "416330"
  },
  {
    "text": "where it's for instance communicating with some sort of hardware and with an operating system rather abstract how",
    "start": "416330",
    "end": "424279"
  },
  {
    "text": "does it look like in a game for instance we might have a main application thread right here",
    "start": "424279",
    "end": "430009"
  },
  {
    "text": "which is responsible for rendering things or for doing the physics calculations things like that as well as",
    "start": "430009",
    "end": "436639"
  },
  {
    "text": "a scripting engine on the bottom left here and both of these might be interacting with the host GPU and with",
    "start": "436639",
    "end": "443389"
  },
  {
    "text": "an operating system and how does it actually look like when they try to interaction before the main thread it's",
    "start": "443389",
    "end": "450259"
  },
  {
    "text": "trivial right you just have two application threads and how does one interact with the other well they just call a C++ function and passing some",
    "start": "450259",
    "end": "457189"
  },
  {
    "text": "arguments and that gets the job done they want you to do a system call for",
    "start": "457189",
    "end": "462469"
  },
  {
    "text": "instance to read a file you have a similar kind of things you have a C interface and you just call a function",
    "start": "462469",
    "end": "468800"
  },
  {
    "text": "and it's slightly more involved because you need to make sure that your arguments are parsing in the right way",
    "start": "468800",
    "end": "474289"
  },
  {
    "text": "because the kernel expects it to be in some certain order but that also has hidden away from you mostly so it's a",
    "start": "474289",
    "end": "480399"
  },
  {
    "text": "thing of calling conventions and the compiler just decorates system calls",
    "start": "480399",
    "end": "485959"
  },
  {
    "text": "with the right calling convention and just takes care of it for you the only kind of non-trivial thing to do for the",
    "start": "485959",
    "end": "492709"
  },
  {
    "text": "programmer is when they want to interact with the GPU driver for instance and in",
    "start": "492709",
    "end": "497779"
  },
  {
    "text": "that case I kind of just copy memory around they copy some vertex data or command buffer data into a cube you",
    "start": "497779",
    "end": "505729"
  },
  {
    "text": "drive a visible memory cheong again that's all there is to it so it's not a function call but it's a relatively",
    "start": "505729",
    "end": "511129"
  },
  {
    "text": "simple now let's look at it how it looks like from an emulators perspective that emulates a given game so all of the",
    "start": "511129",
    "end": "518599"
  },
  {
    "text": "modules that we had previously now become virtualized so we have a virtualized CPU communicating with a",
    "start": "518599",
    "end": "523969"
  },
  {
    "text": "virtualized GPU so say this one wanted to just kick off some rendering commands",
    "start": "523969",
    "end": "531339"
  },
  {
    "text": "but we don't really know anything about that what we see is just the virtual",
    "start": "531339",
    "end": "536690"
  },
  {
    "text": "CPU writing to this large pool in the middle here which is main memory so just",
    "start": "536690",
    "end": "542810"
  },
  {
    "text": "what since some you know you eight 32-bit writes for instance two main",
    "start": "542810",
    "end": "549230"
  },
  {
    "text": "memory and we don't know anything about that data until it actually triggers some sort of operation so that's why I",
    "start": "549230",
    "end": "555680"
  },
  {
    "text": "like to call this chunk of main memory the untyped C of raw data because it's really just a big bunch of bits and",
    "start": "555680",
    "end": "562220"
  },
  {
    "text": "bytes and we don't know any of their meaning until well they are already being used for something and when that",
    "start": "562220",
    "end": "570709"
  },
  {
    "text": "happens what we need to do on the emulator side is we need to deserialize this data so we need to take the ones",
    "start": "570709",
    "end": "577670"
  },
  {
    "text": "and zeros and somehow reintroduce the type structure on top of it just make",
    "start": "577670",
    "end": "582709"
  },
  {
    "text": "sense of it for instance if we have a vertex buffer we need to turn all of the",
    "start": "582709",
    "end": "588620"
  },
  {
    "text": "raw you of the raw you a data into a floating-point formats for instance so",
    "start": "588620",
    "end": "595189"
  },
  {
    "text": "it's possibly deserialization in a more broader sense but certainly still do serialization and similarly the",
    "start": "595189",
    "end": "602660"
  },
  {
    "text": "operating system when doing system courts needs to turn CPU registers into well-formed arguments because the viewer",
    "start": "602660",
    "end": "609860"
  },
  {
    "text": "justice are just 32-bit values some of them might be just that might be a 32-bit size but some of them might be",
    "start": "609860",
    "end": "617980"
  },
  {
    "text": "might need to be grouped together to form a 64-bit value for instance so that",
    "start": "617980",
    "end": "623120"
  },
  {
    "text": "kind of stuff needs to be taken care of this is really really a quite a big",
    "start": "623120",
    "end": "628759"
  },
  {
    "start": "625000",
    "end": "803000"
  },
  {
    "text": "eaters problem and emulation so there are a couple of a couple of examples are listed here and the common theme is we",
    "start": "628759",
    "end": "634910"
  },
  {
    "text": "want to take this on type data and turn it into some sort of high-level c++ c++",
    "start": "634910",
    "end": "642019"
  },
  {
    "text": "element so to speak and the first example is the system calls where we take Sapir edge' stirrers and forward",
    "start": "642019",
    "end": "648829"
  },
  {
    "text": "them to a C++ function another example might be inter process communication as we will see later which turns main",
    "start": "648829",
    "end": "655279"
  },
  {
    "text": "memory enter a C++ function call or we might have some sort of emulated file IO",
    "start": "655279",
    "end": "660439"
  },
  {
    "text": "where we read something from disk and we want to turn it into well a BMP header",
    "start": "660439",
    "end": "667279"
  },
  {
    "text": "for instance we knows this kind of Astana pro-soviet we file",
    "start": "667279",
    "end": "672320"
  },
  {
    "text": "everything is a standard problem that you see in many cases emulation has the interesting twist that often we need to",
    "start": "672320",
    "end": "678320"
  },
  {
    "text": "do endianness wrapping on our inputs because the emulated platform might be big and eland like for the Nintendo Wii",
    "start": "678320",
    "end": "685250"
  },
  {
    "text": "for instance whereas those tend to be little endian unless you actually",
    "start": "685250",
    "end": "690320"
  },
  {
    "text": "emulate on the Wii which is an interesting problem because yeah right",
    "start": "690320",
    "end": "695960"
  },
  {
    "text": "and finally the GPU commander for example I showed in a previous slide yeah and a question that I want to",
    "start": "695960",
    "end": "702290"
  },
  {
    "text": "address in this talk is given that this is such a ubiquitous problem and we want",
    "start": "702290",
    "end": "707480"
  },
  {
    "text": "to do it reliably and with our boilerplate how can we do this reliably so without boilerplate because",
    "start": "707480",
    "end": "713690"
  },
  {
    "text": "boilerplate causes issues because some point will keep track of offsets we are bound to mess up eventually we want to",
    "start": "713690",
    "end": "721010"
  },
  {
    "text": "validate inputs consistently and we want to again as mentioned before and we would want to detect invalid system",
    "start": "721010",
    "end": "727490"
  },
  {
    "text": "States what I mean with that specifically is if we have a kernel object file handle and that is used for",
    "start": "727490",
    "end": "734660"
  },
  {
    "text": "file reading operation we can't probably be quite certain that it's going to be a file handle just because it's used for",
    "start": "734660",
    "end": "740840"
  },
  {
    "text": "file operations but now if the application uses this file handle two",
    "start": "740840",
    "end": "746090"
  },
  {
    "text": "seconds later for a synchronization operation as a mutex then clearly something must be wrong because file is",
    "start": "746090",
    "end": "751700"
  },
  {
    "text": "not a mutex so there's gonna be multiple things really it could be a severe",
    "start": "751700",
    "end": "757250"
  },
  {
    "text": "emulation bug some arithmetic was returning the wrong result so accidentally the handle wasn't",
    "start": "757250",
    "end": "762320"
  },
  {
    "text": "incremented properly or maybe I don't know some of our emulated kernel was",
    "start": "762320",
    "end": "769190"
  },
  {
    "text": "over writing data and just accidentally whatever and the thing really key thing",
    "start": "769190",
    "end": "774980"
  },
  {
    "text": "here is that an emulation we don't have a lot of debugging devices so we want to detect these kind of states as early as",
    "start": "774980",
    "end": "780970"
  },
  {
    "text": "possible at all because we want really to take all the debugging devices we can possibly have right and today's goal is",
    "start": "780970",
    "end": "789470"
  },
  {
    "text": "we're going to address all of these issues for one specific example and we",
    "start": "789470",
    "end": "795440"
  },
  {
    "text": "want to let the compiler do it because they will have all the information they need and for safe as a lot of development and debugging time",
    "start": "795440",
    "end": "803100"
  },
  {
    "start": "803000",
    "end": "958000"
  },
  {
    "text": "an example of this just to give you a quick concrete example is something I",
    "start": "803100",
    "end": "808690"
  },
  {
    "text": "presented that C++ London back in February and this is the system called example alluded at before on arm 32",
    "start": "808690",
    "end": "816670"
  },
  {
    "text": "specifically which is the architecture used under Nintendo 3ds the way this works is that there are a",
    "start": "816670",
    "end": "823900"
  },
  {
    "text": "couple of system calls about 100 of them and for instance this is a DMA operation",
    "start": "823900",
    "end": "829830"
  },
  {
    "text": "DMA is just a fancy way of copying memory around basically using dedicated hardware but ultimately just copying",
    "start": "829830",
    "end": "836260"
  },
  {
    "text": "memory around and the application will prepare some sort of parameter values",
    "start": "836260",
    "end": "842280"
  },
  {
    "text": "into the virtualized CPU registers and then it will call an SVC instruction SPC",
    "start": "842280",
    "end": "850060"
  },
  {
    "text": "is just the thing that triggers a system call it gets a number in this case 0x55 which determines which operation to do",
    "start": "850060",
    "end": "857350"
  },
  {
    "text": "so a DMA in this case and what we want to do in an emulator is we want to",
    "start": "857350",
    "end": "865230"
  },
  {
    "text": "ultimately call some function called SVC start email which implements all of the DMA operations we somehow need to get",
    "start": "865230",
    "end": "871510"
  },
  {
    "text": "the values from over here into that function call now it sounds like an easy",
    "start": "871510",
    "end": "879910"
  },
  {
    "text": "problem but there two twists to twist on this first one is you don't just blindly copy over the values but for some of",
    "start": "879910",
    "end": "886210"
  },
  {
    "text": "them you need to do special things and specifically when kernel objects are being referenced a lot I'll process hand",
    "start": "886210",
    "end": "892660"
  },
  {
    "text": "words or file handles you need to do some sort of lookup process first so you don't want to copy the voiceover",
    "start": "892660",
    "end": "898750"
  },
  {
    "text": "Bottomly but want to wrap them in a lookup function so first twist that",
    "start": "898750",
    "end": "904150"
  },
  {
    "text": "would be manageable the more important twist is that the parameter order so",
    "start": "904150",
    "end": "909970"
  },
  {
    "text": "yeah yeah the parameter order doesn't actually match the register order so if you look closely you will see that the",
    "start": "909970",
    "end": "916210"
  },
  {
    "text": "first argument here and b5 taken from",
    "start": "916210",
    "end": "921640"
  },
  {
    "text": "register one rather than register 0 then goes on to register 2 which is that we",
    "start": "921640",
    "end": "926830"
  },
  {
    "text": "and then weirdly enough it jumps back to register 0 only to jump back to register",
    "start": "926830",
    "end": "932350"
  },
  {
    "text": "for again so that's big fun and you can imagine that there were a hundred system calls like these and all of them follow a",
    "start": "932350",
    "end": "938970"
  },
  {
    "text": "similar pattern but slightly different register orders it's incredibly easy to mess this kind of order up and that is",
    "start": "938970",
    "end": "945300"
  },
  {
    "text": "why we really want to automate this process as far as possible right and if",
    "start": "945300",
    "end": "951720"
  },
  {
    "text": "you're interested I will put up the sides after the talk and you can click the link and follow it or you just look",
    "start": "951720",
    "end": "956940"
  },
  {
    "text": "it up on the internet whatever but yeah um let's talk as I was saying before we'll be concerned about the",
    "start": "956940",
    "end": "962370"
  },
  {
    "start": "958000",
    "end": "1062000"
  },
  {
    "text": "interpersonal communication subsystem instead and to do that I will first give you a quick overview about the Nintendo",
    "start": "962370",
    "end": "968190"
  },
  {
    "text": "3ds and what it looks like so it's Nintendo's current handheld generation depending on how do you find",
    "start": "968190",
    "end": "975210"
  },
  {
    "text": "handle I suppose because then Nintendo's which has come out since really released back in 2011 so it has had quite the",
    "start": "975210",
    "end": "981630"
  },
  {
    "text": "lifespan for this kind of industry I like to refer to it as a big embedded",
    "start": "981630",
    "end": "986730"
  },
  {
    "text": "system because it's comparable to smartphones at the time of its release boss to CPU cores clocked at about 300",
    "start": "986730",
    "end": "993870"
  },
  {
    "text": "megahertz it has a dedicated GPU which is quite unique I'm not aware of any",
    "start": "993870",
    "end": "1001790"
  },
  {
    "text": "other project products that actually used to peak at around within the Western market anyway and it has",
    "start": "1001790",
    "end": "1007670"
  },
  {
    "text": "relatively large amounts of ROM as well so that was reflected in the software stack it's not running a kind of custom",
    "start": "1007670",
    "end": "1015950"
  },
  {
    "text": "ish Linux kernel like your desktop PC or laptop might be running but neither are the games running on bare metal so there",
    "start": "1015950",
    "end": "1022220"
  },
  {
    "text": "was actually a kernel on the system a micro kernel which provides functionality for synchronization memory",
    "start": "1022220",
    "end": "1028699"
  },
  {
    "text": "management access restriction things like that they are so that's really just",
    "start": "1028700",
    "end": "1035329"
  },
  {
    "text": "the bare minimum of a kernel so to speak and all the interesting functionality like GPU drivers audio playback or file",
    "start": "1035330",
    "end": "1042829"
  },
  {
    "text": "system access that is hidden behind separate processes on UNIX system micro",
    "start": "1042830",
    "end": "1050090"
  },
  {
    "text": "services micro services so to speak so if the game wants to do anything",
    "start": "1050090",
    "end": "1056270"
  },
  {
    "text": "interesting they always communicate with these separate processors and that's how anything interesting is done on the",
    "start": "1056270",
    "end": "1061370"
  },
  {
    "text": "system if you look at this as a kind of stack we see at the very bottom we have",
    "start": "1061370",
    "end": "1067190"
  },
  {
    "text": "our Hardware the arm 11 CPUs and in the emulator what we do for",
    "start": "1067190",
    "end": "1072559"
  },
  {
    "text": "those as we just go through each instruction one by one we have a block",
    "start": "1072559",
    "end": "1077629"
  },
  {
    "text": "of virtual CPU registers and we just call it a C++ function corresponding to",
    "start": "1077629",
    "end": "1082759"
  },
  {
    "text": "the functionality of the current instruction then move on to the next instruction so you wanted to add two registers together we just read them",
    "start": "1082759",
    "end": "1089389"
  },
  {
    "text": "from where a register Bourg add them together store the result again in the register block and move on that's at",
    "start": "1089389",
    "end": "1097070"
  },
  {
    "text": "least the simple idea if you want to be fancy it gets more complicated but this model suffice as for talked have every",
    "start": "1097070",
    "end": "1103220"
  },
  {
    "text": "top you have the game or the browser if you fancy using that on the videos which",
    "start": "1103220",
    "end": "1108679"
  },
  {
    "text": "just runs on the emulated CPU we just law the games binary and through our",
    "start": "1108679",
    "end": "1114769"
  },
  {
    "text": "emulated CPU on it and it just magically does its thing so that's great what's interesting is that every now and",
    "start": "1114769",
    "end": "1120950"
  },
  {
    "text": "then scheme will call some sort of system call so we get a additional layer in the system which is the coronal now",
    "start": "1120950",
    "end": "1127580"
  },
  {
    "text": "we could do a similar thing for like for the game where we just run the kernels image directly on the emulated CPU but",
    "start": "1127580",
    "end": "1134330"
  },
  {
    "text": "the system called interface is actually well-defined enough that we can just high level emulators is what we call it",
    "start": "1134330",
    "end": "1141139"
  },
  {
    "text": "so we just for each system call have a C++ function that we implement that functionality directly and in between we",
    "start": "1141139",
    "end": "1148489"
  },
  {
    "text": "have the services again we could just load their own images and they would be",
    "start": "1148489",
    "end": "1154100"
  },
  {
    "text": "relatively light way to implement to emulate but we can just implement their their interfaces directly as well so",
    "start": "1154100",
    "end": "1161509"
  },
  {
    "text": "that's easy enough as well so the interface between the game and the kernel is what I presented at C++ London",
    "start": "1161509",
    "end": "1168350"
  },
  {
    "text": "and the interface between the game and the services which is actually more interesting this is what I'm presenting",
    "start": "1168350",
    "end": "1173809"
  },
  {
    "text": "today so hopefully that spikes their interest a little weight and it's a",
    "start": "1173809",
    "end": "1180409"
  },
  {
    "start": "1179000",
    "end": "1217000"
  },
  {
    "text": "process communication what does it look like well first of all why is it crucial as I've been mentioning before to do anything interesting on the system you",
    "start": "1180409",
    "end": "1186350"
  },
  {
    "text": "need inter process communication because the interesting functionality is provided in different processes so",
    "start": "1186350",
    "end": "1192049"
  },
  {
    "text": "there's one process dedicated to rendering graphics it's called GSP one for audio there's a different name one",
    "start": "1192049",
    "end": "1199309"
  },
  {
    "text": "for Wi-Fi one for connecting to social media something for accessing file system",
    "start": "1199309",
    "end": "1205670"
  },
  {
    "text": "whether it's for loading assets or for saving a game's progress and overall",
    "start": "1205670",
    "end": "1210980"
  },
  {
    "text": "there are 40 different processes like this on the system each of which are serving different kinds of functionality",
    "start": "1210980",
    "end": "1217690"
  },
  {
    "start": "1217000",
    "end": "1301000"
  },
  {
    "text": "the protocol they use for communicating here is kind of client-server",
    "start": "1217690",
    "end": "1222890"
  },
  {
    "text": "architecture so the game being the client and the services being servers seems reasonable and when they want to",
    "start": "1222890",
    "end": "1231020"
  },
  {
    "text": "communicate they do so using a request response protocol so the game will craft",
    "start": "1231020",
    "end": "1236570"
  },
  {
    "text": "some sort of memory block in which it has a kind of command header and a couple of parameters so a couple of",
    "start": "1236570",
    "end": "1243680"
  },
  {
    "text": "arguments and we send that off to the server to the services which then they with their functionality and once that's",
    "start": "1243680",
    "end": "1250370"
  },
  {
    "text": "done they craft a response block and send that back to the application these",
    "start": "1250370",
    "end": "1256370"
  },
  {
    "text": "communication is not done directly but it's marshaled through the kernel in case any sensitive data needs to be sanitized or have any memory pointers",
    "start": "1256370",
    "end": "1264200"
  },
  {
    "text": "for instance need to be translated across address spaces things like that and yeah there is some sort of hierarchy",
    "start": "1264200",
    "end": "1271970"
  },
  {
    "text": "as well which is kind of side detail so there are two classes of processes of",
    "start": "1271970",
    "end": "1277520"
  },
  {
    "text": "microservices high level ones and low level ones and the game only has access to the high level ones whereas the lower",
    "start": "1277520",
    "end": "1283850"
  },
  {
    "text": "level ones are concerned with things like power management or direct hardware access which you kind of want to isolate",
    "start": "1283850",
    "end": "1289490"
  },
  {
    "text": "from the game for security purposes so it's quite interesting how that how that",
    "start": "1289490",
    "end": "1296810"
  },
  {
    "text": "architecture is not only used for a separation of concerns but also for security and a sense wait so how does it",
    "start": "1296810",
    "end": "1303020"
  },
  {
    "start": "1301000",
    "end": "1474000"
  },
  {
    "text": "look and practice I'm sure you're eager to actually see a computer a particular example this is an example of a read",
    "start": "1303020",
    "end": "1309170"
  },
  {
    "text": "file operation triggered by an application like a game or the browser the common theme here is that at the top",
    "start": "1309170",
    "end": "1316010"
  },
  {
    "text": "so this has eight 32-bit values in here in the command block and has a command",
    "start": "1316010",
    "end": "1322280"
  },
  {
    "text": "header at the top which gives us three pieces of information that are encoded in this 32 bit value the upper 16 bit",
    "start": "1322280",
    "end": "1330740"
  },
  {
    "text": "right here the SATA 2 tells us which kind of operation to execute so",
    "start": "1330740",
    "end": "1335929"
  },
  {
    "text": "the part that tells us hey I want to read a file as opposed to writing a file closing a file or whatever the lower",
    "start": "1335929",
    "end": "1345110"
  },
  {
    "text": "eight bits here tell us how many parameters to expect and specifically",
    "start": "1345110",
    "end": "1350450"
  },
  {
    "text": "how many regular value parameters to expect which are these five ones down",
    "start": "1350450",
    "end": "1355850"
  },
  {
    "text": "here and then the eight bits in the middle tell us how many extra parameters",
    "start": "1355850",
    "end": "1362210"
  },
  {
    "text": "follow that need some sort of special translation process whatever that means so we can see with five normal",
    "start": "1362210",
    "end": "1369409"
  },
  {
    "text": "parameters - translation parameters that matches the number of arguments that actually",
    "start": "1369409",
    "end": "1374840"
  },
  {
    "text": "follow in this block and to see how this translation process looks like prepared",
    "start": "1374840",
    "end": "1380960"
  },
  {
    "text": "a little animation which hope for the works now yeah so we can see this thing",
    "start": "1380960",
    "end": "1386779"
  },
  {
    "text": "is sent off to the kernel and the kernel will then again going through the parameters one by one and copy it to an intermediate stage in boffo animations",
    "start": "1386779",
    "end": "1393619"
  },
  {
    "text": "plane to fast copy to an intermediate staging buffer var Bottomly and for these two it will",
    "start": "1393619",
    "end": "1400039"
  },
  {
    "text": "do some sort of translation process as you see in a minute and once that is done the kernel will hand the operation",
    "start": "1400039",
    "end": "1407659"
  },
  {
    "text": "off to the service which then does some processing indicated by the small G R here and then and then the process kind",
    "start": "1407659",
    "end": "1416210"
  },
  {
    "text": "of begins in Reverse again so the service has done its processing has gathered the results and Warcraft",
    "start": "1416210",
    "end": "1421669"
  },
  {
    "text": "another command block like this that gives the well sends it to the kernel",
    "start": "1421669",
    "end": "1427460"
  },
  {
    "text": "the kernel does the translation process again and then sends it back to the application right and at the bottom here",
    "start": "1427460",
    "end": "1435289"
  },
  {
    "text": "you see that this Susan pointer and there's it could be a buffer address for",
    "start": "1435289",
    "end": "1441980"
  },
  {
    "text": "instance this buffer address is different on the right side here it's in this case if you wanted to map a buffer",
    "start": "1441980",
    "end": "1448460"
  },
  {
    "text": "into the target process the Corona would take care of that for you and this is what a virtual memory address would be a",
    "start": "1448460",
    "end": "1453559"
  },
  {
    "text": "different warm wait um so given this kind of oh yeah and to be",
    "start": "1453559",
    "end": "1461179"
  },
  {
    "text": "clear where our emulator comes into play is this more spinning gear so to speak so the subsystem we talked about today",
    "start": "1461179",
    "end": "1468320"
  },
  {
    "text": "only gets this translate but fur and wants to do something with it so the question is now how do we implement the spinning gear well was",
    "start": "1468320",
    "end": "1475740"
  },
  {
    "start": "1474000",
    "end": "1730000"
  },
  {
    "text": "sown on the next slide there was common dispatch kind of flow so we first look at the the command ID given in the",
    "start": "1475740",
    "end": "1483570"
  },
  {
    "text": "command header and select some high-level C++ function that we want to use to implement this functionality in",
    "start": "1483570",
    "end": "1490409"
  },
  {
    "text": "this case we might have a function called do read file taking something like a 32-bit file descriptor a file",
    "start": "1490409",
    "end": "1499140"
  },
  {
    "text": "offset 64-bit a number of bytes to read from the formal file at that offset and",
    "start": "1499140",
    "end": "1505549"
  },
  {
    "text": "a pointer to emulate a memory so it's not it's not a proper pointer in C++",
    "start": "1505549",
    "end": "1511020"
  },
  {
    "text": "because it's emulated memory so it gets its own type in our case my to its operation and then we turn to results we",
    "start": "1511020",
    "end": "1518549"
  },
  {
    "text": "do this in C++ using what we call a two-pole so it returns a result which is",
    "start": "1518549",
    "end": "1523679"
  },
  {
    "text": "usually 0 to indicate success and au and 32 that would give us for instance the",
    "start": "1523679",
    "end": "1530340"
  },
  {
    "text": "number of bytes never actually read from the file",
    "start": "1530340",
    "end": "1534559"
  },
  {
    "text": "once we select this annular function we haven't actually called it yet we still need to make sure that we can actually",
    "start": "1535399",
    "end": "1541590"
  },
  {
    "text": "call it I need to figure out how so first we do is we verify the command today to make sure that for instance the",
    "start": "1541590",
    "end": "1549390"
  },
  {
    "text": "application isn't sending us this read file command ID but doesn't actually send any parameters because that would",
    "start": "1549390",
    "end": "1555510"
  },
  {
    "text": "be malformed we want to catch these kind of cases in the spirit of input",
    "start": "1555510",
    "end": "1560730"
  },
  {
    "text": "validation so don't worry about this expression to imagine it's just what it",
    "start": "1560730",
    "end": "1566730"
  },
  {
    "text": "is basically very simple arithmetic and once that that seems legitimate we passed the command buffer and go through",
    "start": "1566730",
    "end": "1573899"
  },
  {
    "text": "each of the elements one by one and well do the DC realization process basically",
    "start": "1573899",
    "end": "1579919"
  },
  {
    "text": "the twist here is that for some of these objects so the UN 32 here is just the UN",
    "start": "1579919",
    "end": "1588179"
  },
  {
    "text": "32 in the function that is being called so we just take it but the next parameter that we expect was a UN 64 so",
    "start": "1588179",
    "end": "1594960"
  },
  {
    "text": "we want to pass two values these two and stitch them together to form a 64-bit",
    "start": "1594960",
    "end": "1601380"
  },
  {
    "text": "value from two 32 for use and similarly for the next one and then for the final one we get that",
    "start": "1601380",
    "end": "1608370"
  },
  {
    "text": "get this kind of buffer descriptor so you've seen there two entries before and they also belong together to form a",
    "start": "1608370",
    "end": "1615150"
  },
  {
    "text": "single buffer AdWords don't worry about the buffer descriptor too much just want to highlight that it exists and they",
    "start": "1615150",
    "end": "1620880"
  },
  {
    "text": "kind of need to be considered as a single entity and separately once we do",
    "start": "1620880",
    "end": "1626400"
  },
  {
    "text": "that we can finally invoke our C++ handler function with the properly decoded arguments get the result and",
    "start": "1626400",
    "end": "1633270"
  },
  {
    "text": "then we need to write back the response header to the command block so that's kind of the reverse process again if we",
    "start": "1633270",
    "end": "1641810"
  },
  {
    "text": "so we have a command header again by the different number of response arguments",
    "start": "1641810",
    "end": "1647060"
  },
  {
    "text": "first one would just be our success code zero and the number of bytes worth which",
    "start": "1647060",
    "end": "1652560"
  },
  {
    "text": "would be 0 XD 0 0 half our case that's",
    "start": "1652560",
    "end": "1658500"
  },
  {
    "text": "question over there",
    "start": "1658500",
    "end": "1661190"
  },
  {
    "text": "but could you speak up a little yeah",
    "start": "1665430",
    "end": "1675960"
  },
  {
    "text": "yeah I messed up the slides on that one so the remote from the odd right so the",
    "start": "1676170",
    "end": "1683860"
  },
  {
    "text": "remark has been that we take a 64-bit value for the number of bytes read and return a 32-bit value for the number of",
    "start": "1683860",
    "end": "1691510"
  },
  {
    "text": "bytes right or wrong Ackley so I was responding that it might be a mess up on",
    "start": "1691510",
    "end": "1697300"
  },
  {
    "text": "my slides I'm not actually sure it is it might as well just be an oddity of the system as well because quite frankly",
    "start": "1697300",
    "end": "1703390"
  },
  {
    "text": "none of the files on the system are large enough to around the use of 64-bit",
    "start": "1703390",
    "end": "1708580"
  },
  {
    "text": "integers so I'm not really sure what I would use that alright thanks for the",
    "start": "1708580",
    "end": "1714640"
  },
  {
    "text": "question yeah now the question is this",
    "start": "1714640",
    "end": "1722020"
  },
  {
    "text": "is a relatively easy slide you know all of the logic we need to do Fitz and five points so to speak so you might say hey",
    "start": "1722020",
    "end": "1727990"
  },
  {
    "text": "there's not actually that bad well now consider however there are 40 active",
    "start": "1727990",
    "end": "1733000"
  },
  {
    "start": "1730000",
    "end": "2001000"
  },
  {
    "text": "processes on the system and each of these processes has about a 30 different IPC commands in total so each of these",
    "start": "1733000",
    "end": "1740679"
  },
  {
    "text": "requires different manner glue so this five step process you know these are",
    "start": "1740679",
    "end": "1746020"
  },
  {
    "text": "three lines of code but this blows up to quite a significant amount of code if you actually translated to C++ so do",
    "start": "1746020",
    "end": "1753670"
  },
  {
    "text": "that like about 1200 times and you spend a lot of time doing that so it's a lot",
    "start": "1753670",
    "end": "1759700"
  },
  {
    "text": "of work specifically I would like to highlight the file system servers which",
    "start": "1759700",
    "end": "1766360"
  },
  {
    "text": "isn't just 35 30 commands it's it's a lot so each of the lines in this table",
    "start": "1766360",
    "end": "1771970"
  },
  {
    "text": "is an IPC command and there are a lot of",
    "start": "1771970",
    "end": "1777460"
  },
  {
    "text": "them and I imagined unit needed to implement this kind of five step process for each of those you certainly don't",
    "start": "1777460",
    "end": "1785440"
  },
  {
    "text": "want to do that if you can avoid can Harbert so yeah it's a lot of work or is",
    "start": "1785440",
    "end": "1790900"
  },
  {
    "text": "it so that is where we want to enter a technique I call generative well not only I call it like that it's",
    "start": "1790900",
    "end": "1797249"
  },
  {
    "text": "quite the accepted inium in the community and there are a couple of",
    "start": "1797249",
    "end": "1802349"
  },
  {
    "text": "building blocks to this so ultimately what we want to do with a nice graphic here is we have what we call type lists",
    "start": "1802349",
    "end": "1812820"
  },
  {
    "text": "which are quite a common metaprogramming device and we want to run generators on",
    "start": "1812820",
    "end": "1819269"
  },
  {
    "text": "it which basically allow us to evaluate a particular kind of expression on each of the elements of a type lists for",
    "start": "1819269",
    "end": "1825539"
  },
  {
    "text": "instance the type list could be a list of you know types in a command block and",
    "start": "1825539",
    "end": "1831119"
  },
  {
    "text": "the operation could be to decode the operation the values from a command block which might be precisely what we",
    "start": "1831119",
    "end": "1838289"
  },
  {
    "text": "do in it later so using these generators we can turn type lists which are purely a type system entity and turn them into runtime",
    "start": "1838289",
    "end": "1845369"
  },
  {
    "text": "code to automate things basically now the question is how do you actually get type list well we can generate them",
    "start": "1845369",
    "end": "1852659"
  },
  {
    "text": "directly from our functions using limited reflection capabilities in our language so what that looks like",
    "start": "1852659",
    "end": "1859909"
  },
  {
    "text": "specifically this is so to speak the vision that I want to prevent for the rest of the talk now is we start at this",
    "start": "1859909",
    "end": "1866700"
  },
  {
    "text": "function I will éclairs Li and observe hey this function actually has all the information we need doesn't have the",
    "start": "1866700",
    "end": "1872879"
  },
  {
    "text": "command re but it does tell us it takes a U and 32 au and 64 which needs to you",
    "start": "1872879",
    "end": "1878489"
  },
  {
    "text": "32 values another u 64 so that's another two command block entries and this",
    "start": "1878489",
    "end": "1884940"
  },
  {
    "text": "writable buffer sorry I renamed the type on the slide but it's the same as before you know",
    "start": "1884940",
    "end": "1891090"
  },
  {
    "text": "takes this buffer descriptor and the buffer address so again to command buffer entries and it returns two values",
    "start": "1891090",
    "end": "1897629"
  },
  {
    "text": "and the response command blog so really in terms of the command block we know everything we need to know to to handle",
    "start": "1897629",
    "end": "1905580"
  },
  {
    "text": "the command properly just from the signature itself now the function",
    "start": "1905580",
    "end": "1910590"
  },
  {
    "text": "signature itself is not something we can do anything with we just call functions usually but there's the thing called",
    "start": "1910590",
    "end": "1917039"
  },
  {
    "text": "function traits in C++ it's not a standard library feature or anything but we can implement it reasonably easy and",
    "start": "1917039",
    "end": "1923789"
  },
  {
    "text": "what this will do is it will turn this function signature into to type lists",
    "start": "1923789",
    "end": "1929269"
  },
  {
    "text": "containing basically uh the input parameters so you thirty tu 64 64 and",
    "start": "1929749",
    "end": "1934919"
  },
  {
    "text": "the writable buffer and the response lists and if we get that we can actually",
    "start": "1934919",
    "end": "1940799"
  },
  {
    "text": "do regular template metaprogramming don't worry or fear don't have any experience with that by the way but we",
    "start": "1940799",
    "end": "1946200"
  },
  {
    "text": "can throw well-known techniques on this and write our generators that do this",
    "start": "1946200",
    "end": "1952950"
  },
  {
    "text": "kind of runtime code generation later on for us and once we have done that we can",
    "start": "1952950",
    "end": "1958080"
  },
  {
    "text": "combine it all together and what quite frankly I find I still every time I give",
    "start": "1958080",
    "end": "1963299"
  },
  {
    "text": "this talk I find this quite amazing basically this wasn't yeah this five",
    "start": "1963299",
    "end": "1969269"
  },
  {
    "text": "pros five-step process we all reduce it to the single line of code it's just",
    "start": "1969269",
    "end": "1978450"
  },
  {
    "text": "entirely reusable for all all the command handlers in our system so instead of do read Phi we could put do",
    "start": "1978450",
    "end": "1984330"
  },
  {
    "text": "close file do Open File and all of the all of the thing files together and they",
    "start": "1984330",
    "end": "1989549"
  },
  {
    "text": "are all handled by the single function and it will just use all of the necessary operations to be done from the",
    "start": "1989549",
    "end": "1994649"
  },
  {
    "text": "function signature so in terms of automation this is as good as it gets really",
    "start": "1994649",
    "end": "2000849"
  },
  {
    "text": "so yeah advantages it's all automated there's no room for a possible typos or",
    "start": "2000849",
    "end": "2006789"
  },
  {
    "start": "2001000",
    "end": "2044000"
  },
  {
    "text": "mental arithmetic errors anymore it's typesafe because decoded data matches the subglottis function",
    "start": "2006789",
    "end": "2014599"
  },
  {
    "text": "signature by design there was no way we could decode a UN 32 value for instance",
    "start": "2014599",
    "end": "2020479"
  },
  {
    "text": "and accidentally positive a 64 bit parameter by implicit conversion for instance because it will always take a",
    "start": "2020479",
    "end": "2026690"
  },
  {
    "text": "64-bit value if the parameter was 64 bit and that's by design really which always",
    "start": "2026690",
    "end": "2032629"
  },
  {
    "text": "a good thing to say and a bonus it's easier to read because well there's nothing to read anymore it's just that",
    "start": "2032629",
    "end": "2039409"
  },
  {
    "text": "single line of code so anybody you're looking at that code would have an easy time understanding what it does right so",
    "start": "2039409",
    "end": "2047629"
  },
  {
    "start": "2044000",
    "end": "2168000"
  },
  {
    "text": "the next well the rest of the talk will basically be concerned with how we implement this so function trades if",
    "start": "2047629",
    "end": "2054950"
  },
  {
    "text": "you're not familiar with the term trades it comes from the type trades that we have which",
    "start": "2054950",
    "end": "2060080"
  },
  {
    "text": "give us information about a particular type so we can ask C++ Hays it's this type a pointer is it an integral in",
    "start": "2060080",
    "end": "2068450"
  },
  {
    "text": "Antigua value is it a floating point things like that if you apply this concept functions knows just what a",
    "start": "2068450",
    "end": "2075080"
  },
  {
    "text": "function trade is and specifically what we're interested in is getting the parameter list and the return type so in",
    "start": "2075080",
    "end": "2081530"
  },
  {
    "text": "other words we want a C++ structure template structure taking the function",
    "start": "2081530",
    "end": "2087919"
  },
  {
    "text": "type it has two members these aren't data members and members or anything that they are types of their own so we",
    "start": "2087920",
    "end": "2095510"
  },
  {
    "text": "get one type def arguments which is just a type list of the parameters of the",
    "start": "2095510",
    "end": "2102830"
  },
  {
    "text": "given functions so this might be our u 32 u 64 u 64 write up a buffer list from before and similarly we get a result",
    "start": "2102830",
    "end": "2110300"
  },
  {
    "text": "type def in the function trade that tells us what the return type of the function is so that would be our result",
    "start": "2110300",
    "end": "2116750"
  },
  {
    "text": "and the number of bytes written but not the actual virus but just the types",
    "start": "2116750",
    "end": "2123880"
  },
  {
    "text": "implementing this can be quite quite cumbersome so that's why I recommend using either of the two libraries listed",
    "start": "2124660",
    "end": "2131300"
  },
  {
    "text": "on the slide here at least one of them actually has a standalone version as well if you don't fancy be using boost",
    "start": "2131300",
    "end": "2136610"
  },
  {
    "text": "for any particular reason for our case actually implementing them will be really really easy because we",
    "start": "2136610",
    "end": "2141650"
  },
  {
    "text": "have a very specific kind of functions mainly just free functions and you can just implement it using this code I will",
    "start": "2141650",
    "end": "2148160"
  },
  {
    "text": "not go into detail about how it works but I found it quite interesting to know that such a powerful device actually can",
    "start": "2148160",
    "end": "2154520"
  },
  {
    "text": "be implemented in like what seven lines of code or so as opposed to two hundred",
    "start": "2154520",
    "end": "2159530"
  },
  {
    "text": "lines of code and this actually works perfectly fine for our purpose let's now get us",
    "start": "2159530",
    "end": "2166450"
  },
  {
    "start": "2168000",
    "end": "2235000"
  },
  {
    "text": "now the core idea that we have is we want to take the tablets we get from function trades and want to turn them",
    "start": "2169590",
    "end": "2175230"
  },
  {
    "text": "into run taco well how do we do that they are kind of to legislate proaches to this one being recursion so you take",
    "start": "2175230",
    "end": "2182490"
  },
  {
    "text": "the front of a front type of the first type of the type list execute the",
    "start": "2182490",
    "end": "2187560"
  },
  {
    "text": "operation on it then drop it off the list and recurse mentally the tail of the function so yeah in the tail of the",
    "start": "2187560",
    "end": "2194160"
  },
  {
    "text": "type list the other one might be to use a arm old-style metaprogramming library",
    "start": "2194160",
    "end": "2199470"
  },
  {
    "text": "like boost MPL boost town but the new",
    "start": "2199470",
    "end": "2205200"
  },
  {
    "text": "approach is service big our parameter pack expansions which are based on variadic templates which are a lot of",
    "start": "2205200",
    "end": "2210600"
  },
  {
    "text": "very important words if you've never heard about them we see that it in a minute another one being a fault",
    "start": "2210600",
    "end": "2216630"
  },
  {
    "text": "expressions so these two features allow you to do the same thing as recursion and this for each thing and a very",
    "start": "2216630",
    "end": "2222630"
  },
  {
    "text": "concise and very intuitive manner as well so that's quite a big venon to win in terms of how modern c++ enriches the",
    "start": "2222630",
    "end": "2230490"
  },
  {
    "text": "style of programming that we use right",
    "start": "2230490",
    "end": "2235730"
  },
  {
    "start": "2235000",
    "end": "2456000"
  },
  {
    "text": "so this is what we like to do you know how do we generate this code well to clarify again get this kind of type list",
    "start": "2235730",
    "end": "2243660"
  },
  {
    "text": "which is just the arguments of our function which we got from function traits and we've had this kind of",
    "start": "2243660",
    "end": "2249030"
  },
  {
    "text": "command block that we want to read the bodies from well let's start very small let's suppose we had some sort of",
    "start": "2249030",
    "end": "2255930"
  },
  {
    "text": "primitive a decode entry function that takes a given type and an offset so this",
    "start": "2255930",
    "end": "2264690"
  },
  {
    "text": "would be one two three you know just counting into the command buffer and at",
    "start": "2264690",
    "end": "2269820"
  },
  {
    "text": "that offset in the buffer it will decode a value of the hidden type so in this",
    "start": "2269820",
    "end": "2276360"
  },
  {
    "text": "case it will just get the UN 32 but in this case it would actually pass to var two entries from the command buffer and",
    "start": "2276360",
    "end": "2281580"
  },
  {
    "text": "stitch them together and then once that is done it so this is taken very",
    "start": "2281580",
    "end": "2287220"
  },
  {
    "text": "reference so it will increment the offset automatically for us so we can just call the decode entry function",
    "start": "2287220",
    "end": "2293610"
  },
  {
    "text": "multiple times with different types to step through the command buffer and to get all the results",
    "start": "2293610",
    "end": "2299170"
  },
  {
    "text": "so I will show the implementation of this function in the next slide but assuming we already have it so we were",
    "start": "2299170",
    "end": "2304360"
  },
  {
    "text": "already habit what can we do we can now write a function decode all which is a",
    "start": "2304360",
    "end": "2309790"
  },
  {
    "text": "very attic template function what that means is it takes multiple types which",
    "start": "2309790",
    "end": "2315370"
  },
  {
    "text": "we indicate by these triple darts takes any number of types that you want to pass it to you as a regular function",
    "start": "2315370",
    "end": "2322360"
  },
  {
    "text": "parameter it just takes the command block and the function implementation we keep an offset parameter starting at one",
    "start": "2322360",
    "end": "2328750"
  },
  {
    "text": "which skips the command header so starting at the first actual entry of the e buffer and then we do this so",
    "start": "2328750",
    "end": "2337560"
  },
  {
    "text": "ignoring ignoring all the weird stuff around this what we do is we just call",
    "start": "2337560",
    "end": "2343810"
  },
  {
    "text": "the decode entry function at the at the type at the current type of current",
    "start": "2343810",
    "end": "2350680"
  },
  {
    "text": "offset at the command block now what we do is we put three dots after this expression and this is what we call a",
    "start": "2350680",
    "end": "2356530"
  },
  {
    "text": "parameter pack expansion and what this will do is it will take this expression and duplicate it for each of the",
    "start": "2356530",
    "end": "2363760"
  },
  {
    "text": "parameters that were passed to the function template so if we give this this type list this will expand to",
    "start": "2363760",
    "end": "2370210"
  },
  {
    "text": "something like decode entry u and 32 so and so comma decode entry you in 64 so",
    "start": "2370210",
    "end": "2376720"
  },
  {
    "text": "and so comma and the same for the other 64-bit value and a veritable buffer now",
    "start": "2376720",
    "end": "2384790"
  },
  {
    "text": "that is not quite what we want yet but it's the largest part of it no the only thing we want to do is we will actually",
    "start": "2384790",
    "end": "2390790"
  },
  {
    "text": "want to apply the decoded arguments to a function which is precisely precisely",
    "start": "2390790",
    "end": "2397120"
  },
  {
    "text": "our handler for the for the RPC command it's do read file so do we define just",
    "start": "2397120",
    "end": "2404440"
  },
  {
    "text": "gets the decoded results directly inserted into the function call so that",
    "start": "2404440",
    "end": "2409960"
  },
  {
    "text": "the arguments will just be there the function call will stitch them together and return the result from the handler",
    "start": "2409960",
    "end": "2416020"
  },
  {
    "text": "so this blend is this faded in a lot of stuff but ultimately that's just all I did there I just added the function call",
    "start": "2416020",
    "end": "2421780"
  },
  {
    "text": "and you need a new template argument function argument it's really no big",
    "start": "2421780",
    "end": "2426940"
  },
  {
    "text": "deal wait yep really very templates and parameter",
    "start": "2426940",
    "end": "2433930"
  },
  {
    "text": "packs awesome for this kind of thing because you know I haven't shown you this Dakota NP function yet but naively",
    "start": "2433930",
    "end": "2440260"
  },
  {
    "text": "might have expected that actually iterating over the entire command block might require some sort of for loops and",
    "start": "2440260",
    "end": "2446170"
  },
  {
    "text": "more advanced in necks counting or anything but no really it's all boils down to this parameter pack expansion at",
    "start": "2446170",
    "end": "2452320"
  },
  {
    "text": "the bottom right here so that's really really powerful now if we actually want",
    "start": "2452320",
    "end": "2458740"
  },
  {
    "start": "2456000",
    "end": "2598000"
  },
  {
    "text": "you to see how decode entry is implemented he could start on specializing your function for each of",
    "start": "2458740",
    "end": "2465100"
  },
  {
    "text": "the different types that we might have but there's actually in C++ 17 and easier feature to do so and that's",
    "start": "2465100",
    "end": "2470680"
  },
  {
    "text": "called constant exper if so what context brief does if you come visit confused",
    "start": "2470680",
    "end": "2476770"
  },
  {
    "text": "about it actually you get in all the context prefer now and just pretend this a sniff we have an if check that checks",
    "start": "2476770",
    "end": "2483609"
  },
  {
    "text": "using a type trade is same v whether T is au and 32-bit value if it is then we",
    "start": "2483609",
    "end": "2490900"
  },
  {
    "text": "know okay we just return the value at the current block block offset and post",
    "start": "2490900",
    "end": "2498850"
  },
  {
    "text": "increment the offset I just returned that because the previous value from the function so that's easy that is not the",
    "start": "2498850",
    "end": "2505450"
  },
  {
    "text": "case well would you other stuff now let's say so that is really all we need",
    "start": "2505450",
    "end": "2510790"
  },
  {
    "text": "for 32-bit values say we had a 64-bit value well we won't hit this case but we might",
    "start": "2510790",
    "end": "2516580"
  },
  {
    "text": "have the next case for 64-bit values and again it's really relatively easy we just take the first value and the second",
    "start": "2516580",
    "end": "2523720"
  },
  {
    "text": "of all you increment the offset after reading each and stitch them together and return that again relatively easy",
    "start": "2523720",
    "end": "2531240"
  },
  {
    "text": "suppose we had a different one well if it's a veritable buffer we just read the descriptor we do some sort of more",
    "start": "2531240",
    "end": "2537190"
  },
  {
    "text": "advanced logic here because we need to deep t care what the descriptor first which I will not bore you with but it",
    "start": "2537190",
    "end": "2542859"
  },
  {
    "text": "might return you some sort of size for instance and then you get the address and construct a veritable",
    "start": "2542859",
    "end": "2548170"
  },
  {
    "text": "buffer object from the address and the size in this case we just ignore all the flags right now I told you to ignore",
    "start": "2548170",
    "end": "2556240"
  },
  {
    "text": "context brief for now well what the context production makes sure that there's not a UN 32 it just ignores",
    "start": "2556240",
    "end": "2563260"
  },
  {
    "text": "whatever is and inside of here you need to do that and if you to actually be able to rely on",
    "start": "2563260",
    "end": "2568330"
  },
  {
    "text": "the type being 32-bit so in this case",
    "start": "2568330",
    "end": "2573330"
  },
  {
    "text": "well what why you need to do that is because these three branches have different return types but you always",
    "start": "2573360",
    "end": "2579130"
  },
  {
    "text": "want to actually return the type of your respective branch and that is always determined by the type ass to the",
    "start": "2579130",
    "end": "2585310"
  },
  {
    "text": "function so really this is quite a concise and neat way to specialize a function easily you for different types",
    "start": "2585310",
    "end": "2591180"
  },
  {
    "text": "it's in c++ seventeen so requires relatively modern compiler support but if you can use it it's really really",
    "start": "2591180",
    "end": "2596530"
  },
  {
    "text": "nice what to get back to the full exam bar here now that you've seen this again",
    "start": "2596530",
    "end": "2603130"
  },
  {
    "start": "2598000",
    "end": "2728000"
  },
  {
    "text": "we've already killed all and apply function and just use a parameter pay expansion to step through the entire",
    "start": "2603130",
    "end": "2608500"
  },
  {
    "text": "buffer blue red yellow green one by one and gather results and call a function",
    "start": "2608500",
    "end": "2615670"
  },
  {
    "text": "handler for that now there two caveats with this first one it well first of all",
    "start": "2615670",
    "end": "2622060"
  },
  {
    "text": "there's no water papers is always nice but there two caveats the first one is this is actually not a very early",
    "start": "2622060",
    "end": "2627580"
  },
  {
    "text": "template what we actually need is to pass a single template parameter which",
    "start": "2627580",
    "end": "2633010"
  },
  {
    "text": "is just a tuple with the given type list I won't go into details about how",
    "start": "2633010",
    "end": "2639310"
  },
  {
    "text": "they're how to solve that basically you need to stand a problem really and just a technical one you turn the function",
    "start": "2639310",
    "end": "2645760"
  },
  {
    "text": "into a function object which is a structure that has a function call operator and it gets complicated but",
    "start": "2645760",
    "end": "2651970"
  },
  {
    "text": "really it's a standard technique if you run into this kind of issue and I won't don't want to bore you with that the",
    "start": "2651970",
    "end": "2659230"
  },
  {
    "text": "more interesting caveat however is the handler right here so we have a function",
    "start": "2659230",
    "end": "2665230"
  },
  {
    "text": "call with a given arguments and this is a decode like the steps for the buffer",
    "start": "2665230",
    "end": "2671980"
  },
  {
    "text": "one by one incrementing the offset each time so we really depend on this being executed in sequence what you wouldn't",
    "start": "2671980",
    "end": "2680050"
  },
  {
    "text": "want the compiler to start evaluating the decode entry of the writable buffer",
    "start": "2680050",
    "end": "2685330"
  },
  {
    "text": "thing first because at that point offset is still one I would decode the wrong thing the route so really we want to",
    "start": "2685330",
    "end": "2690970"
  },
  {
    "text": "enforce the compiler to start at you and 32 you but the issue is that in function",
    "start": "2690970",
    "end": "2697330"
  },
  {
    "text": "calls expression or it is not well specified and the C++ standard it's just left to",
    "start": "2697330",
    "end": "2702580"
  },
  {
    "text": "the implementation which auditive are your things in that's something you need to take care of and there are tricks to",
    "start": "2702580",
    "end": "2708550"
  },
  {
    "text": "get around it initialize the list is a common keyword and that aspect I don't want to go into",
    "start": "2708550",
    "end": "2716260"
  },
  {
    "text": "detail about how to resolve that specifically because we're kind of running short of time already but I just",
    "start": "2716260",
    "end": "2722170"
  },
  {
    "text": "wanted to highlight the issue so don't throw between the copy of code please before worrying about that issue right",
    "start": "2722170",
    "end": "2729780"
  },
  {
    "start": "2728000",
    "end": "2923000"
  },
  {
    "text": "time for a quick demo just so you see um how this looks like in practice",
    "start": "2729780",
    "end": "2735910"
  },
  {
    "text": "and so you got to see a little bit more code and maybe we can do weird stuff",
    "start": "2735910",
    "end": "2742630"
  },
  {
    "text": "with our desktop",
    "start": "2742630",
    "end": "2745619"
  },
  {
    "text": "again forgot to adapt the year the color scheme for the presentation",
    "start": "2750270",
    "end": "2755970"
  },
  {
    "text": "unfortunately better hope you can still read it as a font beginner for everybody alright cool so that's not a lot to talk",
    "start": "2755970",
    "end": "2764280"
  },
  {
    "text": "about here really you can see similar structures as we've seen before this is",
    "start": "2764280",
    "end": "2771180"
  },
  {
    "text": "just a dummy kind of environment with a command block that is just a couple of 32-bit values and just by the play code",
    "start": "2771180",
    "end": "2778260"
  },
  {
    "text": "its third etc but here is the actual function we've seen before to kill it all and apply the slightly different",
    "start": "2778260",
    "end": "2783810"
  },
  {
    "text": "names I believe but oh well you can see we're using the if Const extra cascade here to DQ it single entry and then",
    "start": "2783810",
    "end": "2791220"
  },
  {
    "text": "again use a parameter P expansion to",
    "start": "2791220",
    "end": "2798500"
  },
  {
    "text": "decode the entire buffer and one go what I'm using here is this call with",
    "start": "2798500",
    "end": "2803940"
  },
  {
    "text": "sequential evaluation trick which basically constructs an object the sole",
    "start": "2803940",
    "end": "2809250"
  },
  {
    "text": "purpose of which is to call this function f could be do read file in our",
    "start": "2809250",
    "end": "2816150"
  },
  {
    "text": "case with this essentially evaluated arguments given on the right hand side of the expression so that's quite a neat",
    "start": "2816150",
    "end": "2822960"
  },
  {
    "text": "trick I found to actually enforce this order in constraint as you can see we didn't really need to change a lot about",
    "start": "2822960",
    "end": "2828359"
  },
  {
    "text": "our code to make that work anyway now",
    "start": "2828359",
    "end": "2834570"
  },
  {
    "text": "suppose you wanted to call that we don't have the function traits in place here so we need to explicitly specify the",
    "start": "2834570",
    "end": "2839609"
  },
  {
    "text": "type list but we just do that call it on a command block object and pass in a",
    "start": "2839609",
    "end": "2849270"
  },
  {
    "text": "handler which I creatively called teach stuff in this case which just prints hello world and prints the volleys that",
    "start": "2849270",
    "end": "2854880"
  },
  {
    "text": "was given see in this case it's the same as do read for just with a single or",
    "start": "2854880",
    "end": "2860010"
  },
  {
    "text": "64-bit value parameter now if we actually compile this",
    "start": "2860010",
    "end": "2866960"
  },
  {
    "text": "we want you to use C++ 17 and luckily it",
    "start": "2869290",
    "end": "2874330"
  },
  {
    "text": "actually compiles I didn't touch this code since the last presentation but I was still concerned it might not compile for whatever reason and if we run that",
    "start": "2874330",
    "end": "2884170"
  },
  {
    "text": "we see yeah our handler just gets called just fine it decodes these kind of",
    "start": "2884170",
    "end": "2889570"
  },
  {
    "text": "values just from the buffer which is interesting because from looking at the buffer you might have not have guessed",
    "start": "2889570",
    "end": "2894940"
  },
  {
    "text": "exactly how they kind of belong together but our glue just magically takes care of it which is nice right so that was",
    "start": "2894940",
    "end": "2907030"
  },
  {
    "text": "the kind of minigame one that I hadn't had in mind what does my PC you doing",
    "start": "2907030",
    "end": "2915300"
  },
  {
    "text": "don't quite appreciate that right now",
    "start": "2915300",
    "end": "2919440"
  },
  {
    "text": "there we go listy move quite quickly aside there's",
    "start": "2920850",
    "end": "2926440"
  },
  {
    "start": "2923000",
    "end": "3016000"
  },
  {
    "text": "still one thing I owe you which is the encoding process for the response parameter parameter block but ultimatum",
    "start": "2926440",
    "end": "2932740"
  },
  {
    "text": "that's the same kind of thing you have a function called encode entry which for a single type encodes the value to the",
    "start": "2932740",
    "end": "2939190"
  },
  {
    "text": "buffer and you have another function called encode all which iterates over",
    "start": "2939190",
    "end": "2945100"
  },
  {
    "text": "the entire command buffer brother over the intact response type lists and",
    "start": "2945100",
    "end": "2950280"
  },
  {
    "text": "creates a response buffer based on these values now we can't use parameter PAC",
    "start": "2950280",
    "end": "2956050"
  },
  {
    "text": "expansion for that well I think study not easily but we can use fold expressions and these works similarly if",
    "start": "2956050",
    "end": "2963280"
  },
  {
    "text": "you haven't heard about them yet or suggest you look them up because they're really really powerful feature just like",
    "start": "2963280",
    "end": "2968320"
  },
  {
    "text": "parameter pack expansions just ready add a twist that you can actually and combine the values with a operator in",
    "start": "2968320",
    "end": "2975850"
  },
  {
    "text": "this case we use the comma operator in C++ at the purpose of which somewhat",
    "start": "2975850",
    "end": "2981430"
  },
  {
    "text": "unknown but what it does is that it takes the expression on the Left evaluates a then moves off onto the",
    "start": "2981430",
    "end": "2986650"
  },
  {
    "text": "expression on the right in other words it strictly runs the expressions from left to right in sequence which",
    "start": "2986650",
    "end": "2992680"
  },
  {
    "text": "precisely what we want you won't we encode from left to right that's kind of",
    "start": "2992680",
    "end": "2997780"
  },
  {
    "text": "an evil hack but at some point you just get used to it I guess ultimately it gets the job done and it's",
    "start": "2997780",
    "end": "3004960"
  },
  {
    "text": "a well-known pattern for those who have seen it and if you want to use this in production we'll just add a comment",
    "start": "3004960",
    "end": "3010569"
  },
  {
    "text": "about it and say hey fold-over comma and the squiggly C realizes things and that's just fine a small now we want to",
    "start": "3010569",
    "end": "3018160"
  },
  {
    "start": "3016000",
    "end": "3111000"
  },
  {
    "text": "put things together I promised you this very convenient small one-liner you can",
    "start": "3018160",
    "end": "3024130"
  },
  {
    "text": "always see it's not that big we are we basically want the template function that takes the handler function and the",
    "start": "3024130",
    "end": "3029799"
  },
  {
    "text": "client log well at the beginning we do they request error reading to make sure that the the number of given parameters",
    "start": "3029799",
    "end": "3040240"
  },
  {
    "text": "actually match what's expected by the function and then we use our function Thwaites to get a request list and a",
    "start": "3040240",
    "end": "3046960"
  },
  {
    "text": "response list once we get that we can do the verification logic I omitted that in",
    "start": "3046960",
    "end": "3052059"
  },
  {
    "text": "this case but can also just call the decode all and apply function that I've just shown you in the previous slides",
    "start": "3052059",
    "end": "3057990"
  },
  {
    "text": "you can see applying this is really really easy actually the inflammation was kind of verbose at some point but",
    "start": "3057990",
    "end": "3063910"
  },
  {
    "text": "calling is just the one line again and then once we get the results back from",
    "start": "3063910",
    "end": "3069880"
  },
  {
    "text": "the command handler build some sort of response header again this is omitted",
    "start": "3069880",
    "end": "3075309"
  },
  {
    "text": "but it's relatively easy and just boring kind of and then we use the in call encode all function to write the actual",
    "start": "3075309",
    "end": "3082900"
  },
  {
    "text": "results back to the command buffer right so middle for now is the verification",
    "start": "3082900",
    "end": "3088720"
  },
  {
    "text": "and the build response header but this is really the gist of it really all the interesting stuff in one slide and again",
    "start": "3088720",
    "end": "3096130"
  },
  {
    "text": "it can be used for all the IPC commands so we don't just need to call this with D read file and I need to come up with",
    "start": "3096130",
    "end": "3102280"
  },
  {
    "text": "other logic for do open file but actually we can really just do similar one-liners for do open file do read file",
    "start": "3102280",
    "end": "3108040"
  },
  {
    "text": "and do closed file and all the others right",
    "start": "3108040",
    "end": "3113609"
  },
  {
    "text": "so that this closes the chapter about what I call reflective generators because it's kind of combines the",
    "start": "3113609",
    "end": "3120130"
  },
  {
    "text": "concept of reflection with generators and change them together to actually do what we want I found another approach quite",
    "start": "3120130",
    "end": "3127510"
  },
  {
    "text": "interesting and useful which is what I call declarative generators we're kind of running short of time but",
    "start": "3127510",
    "end": "3133000"
  },
  {
    "text": "I'm hoping I can give you but what I mean with that ultimately",
    "start": "3133000",
    "end": "3139569"
  },
  {
    "start": "3136000",
    "end": "3270000"
  },
  {
    "text": "this boils down to a more explicit approach of doing things right a more",
    "start": "3139569",
    "end": "3146480"
  },
  {
    "text": "explicit approach and the point is it substitutes this kind of reflection process in the first place so we get our",
    "start": "3146480",
    "end": "3152299"
  },
  {
    "text": "type list not from reflection anymore but from what I call it a collaborative interface and this is a more explicit",
    "start": "3152299",
    "end": "3157880"
  },
  {
    "text": "approach than what we've seen before where we might have a namespace we've",
    "start": "3157880",
    "end": "3163760"
  },
  {
    "text": "put all of our file system related commands in and we add new types describing each IPC command on our",
    "start": "3163760",
    "end": "3170960"
  },
  {
    "text": "system so we might have one file type called Open File which has this kind of",
    "start": "3170960",
    "end": "3177500"
  },
  {
    "text": "ABC command type but it encodes the command ID right and the type itself but",
    "start": "3177500",
    "end": "3184490"
  },
  {
    "text": "that's not the only thing we care about what we also care about us we care how many regular value type based parameters",
    "start": "3184490",
    "end": "3192230"
  },
  {
    "text": "it takes so in this case it might take some sort of flags file attributes and I",
    "start": "3192230",
    "end": "3199660"
  },
  {
    "text": "believe this is a file size or some a path size or something anyway so it",
    "start": "3199660",
    "end": "3206180"
  },
  {
    "text": "takes a number of value-based types and it takes some sort of a special types in",
    "start": "3206180",
    "end": "3211309"
  },
  {
    "text": "this case a static bathroom whatever that means it's a platform specific thing and my take maid respond with a",
    "start": "3211309",
    "end": "3217940"
  },
  {
    "text": "file descriptor of the opened fire to the application so this is a very different style than what we've seen",
    "start": "3217940",
    "end": "3223520"
  },
  {
    "text": "before but ultimately captures all of the information we wanted again really just on one single entity that can",
    "start": "3223520",
    "end": "3230030"
  },
  {
    "text": "operate on now we might do the same for something I get fire size again we have",
    "start": "3230030",
    "end": "3235280"
  },
  {
    "text": "a different command with a different ID different normal parameters different special an empty special parameter list",
    "start": "3235280",
    "end": "3241309"
  },
  {
    "text": "and a different response list and you can see how this might cascade into lots",
    "start": "3241309",
    "end": "3246619"
  },
  {
    "text": "of large groups of IPC commands worth",
    "start": "3246619",
    "end": "3252109"
  },
  {
    "text": "noting this is kind of similar to the building at build up ladder pattern and ORP were instead of having one big constructor we have member functions",
    "start": "3252109",
    "end": "3259250"
  },
  {
    "text": "that kind of construct initialize each member one by one and you chain the function calls together like that",
    "start": "3259250",
    "end": "3265640"
  },
  {
    "text": "just that this is on the type system level so it's all compile-time so to speak kind of rushing through this right",
    "start": "3265640",
    "end": "3273410"
  },
  {
    "start": "3270000",
    "end": "3358000"
  },
  {
    "text": "now now the idea yeah how you define would define these things as basically",
    "start": "3273410",
    "end": "3278960"
  },
  {
    "text": "you start with this template structure and it gets just one parameter which is",
    "start": "3278960",
    "end": "3284150"
  },
  {
    "text": "the command ID it just encodes that directly as a member so externally it's",
    "start": "3284150",
    "end": "3290029"
  },
  {
    "text": "visible again and then your open fire function becomes this but well then you want to add more well you can do the",
    "start": "3290029",
    "end": "3296510"
  },
  {
    "text": "same for CAD file size now you want to add more information so what you do is you add a nest obstruct don't do this",
    "start": "3296510",
    "end": "3302480"
  },
  {
    "text": "for any particular reason other than for enabling this kind of syntax so this is the member lookout operator so to speak",
    "start": "3302480",
    "end": "3308869"
  },
  {
    "text": "well that's the type lookup operator just for in it for the sake of enabling",
    "start": "3308869",
    "end": "3315049"
  },
  {
    "text": "this kind of syntax we need to use negative structs here so we had more information by having a type list for",
    "start": "3315049",
    "end": "3320900"
  },
  {
    "text": "the normal parameters here and again export them and the deepest scope well",
    "start": "3320900",
    "end": "3327410"
  },
  {
    "text": "if you want to add more information we just nest another scrub and structure and you can see where this is going you",
    "start": "3327410",
    "end": "3332569"
  },
  {
    "text": "basically just tag on more information as you go along the way right and this",
    "start": "3332569",
    "end": "3338990"
  },
  {
    "text": "is a very different approach than reflection we've seen before but oh well you can similarly just oh yeah and the point is basically you have",
    "start": "3338990",
    "end": "3346130"
  },
  {
    "text": "these type deaths and if you want to access any particular property you just take this type open file well and look",
    "start": "3346130",
    "end": "3353599"
  },
  {
    "text": "up the command ID value for instance in it just get what you want you can see",
    "start": "3353599",
    "end": "3359660"
  },
  {
    "start": "3358000",
    "end": "3414000"
  },
  {
    "text": "that this is not too different in terms of the generators though no generators we get a slightly different signature we",
    "start": "3359660",
    "end": "3365779"
  },
  {
    "text": "now need to explicitly specify the IPC request and we obviously don't use any file and function traits anymore but we",
    "start": "3365779",
    "end": "3372710"
  },
  {
    "text": "can actually conveniently come verify the request header because we can just",
    "start": "3372710",
    "end": "3377950"
  },
  {
    "text": "have some sort of request we can basically statically build the request header as part of the structure and then",
    "start": "3377950",
    "end": "3385069"
  },
  {
    "text": "we have a similar decode all and apply function but now it's actually the same decode all in apply function that I've",
    "start": "3385069",
    "end": "3391549"
  },
  {
    "text": "shown you before because you can just again take the request list from this",
    "start": "3391549",
    "end": "3397460"
  },
  {
    "text": "kind of death of the read file thing from before again you just read the response simile",
    "start": "3397460",
    "end": "3404579"
  },
  {
    "text": "etcetera etcetera so ultimately the generator part is not all that different it's just the way we got the type lists",
    "start": "3404579",
    "end": "3410490"
  },
  {
    "text": "originally from and how we build the command header right so at this point",
    "start": "3410490",
    "end": "3419550"
  },
  {
    "start": "3414000",
    "end": "3570000"
  },
  {
    "text": "you will be asking yourself okay what is this actually good for and quickly wrap this up well what is this good for we",
    "start": "3419550",
    "end": "3425880"
  },
  {
    "text": "can take this declarative interface and we can write this glue handler function",
    "start": "3425880",
    "end": "3431520"
  },
  {
    "text": "again I've shown before it's called differently but it's the same thing you can use it like that just like before but I can do entirely",
    "start": "3431520",
    "end": "3438210"
  },
  {
    "text": "different things now with this we're not bound to actually handling things we can actually synthesize IPC commands we can",
    "start": "3438210",
    "end": "3445349"
  },
  {
    "text": "go ahead and say I want to write some testing code which needs to run on my actual Nintendo 3ds so if I want to do",
    "start": "3445349",
    "end": "3452490"
  },
  {
    "text": "that I actually need to start building command requests all of a sudden now and have some sort of convenient reffered at",
    "start": "3452490",
    "end": "3458940"
  },
  {
    "text": "both cisco Mantello called the system call that sense of IPC commands you know",
    "start": "3458940",
    "end": "3463950"
  },
  {
    "text": "you can see there's also quite a lot of work to do and it needs to read the response header and again turn into",
    "start": "3463950",
    "end": "3469170"
  },
  {
    "text": "something that my testing code can actually handle in C++ code rather than in each test having some sort of",
    "start": "3469170",
    "end": "3474750"
  },
  {
    "text": "decoding logic for the response again so the synthesis can just be easily be done",
    "start": "3474750",
    "end": "3479849"
  },
  {
    "text": "we can just write a different generator called craft block a craft block that takes the declarative interface does all",
    "start": "3479849",
    "end": "3486329"
  },
  {
    "text": "of this logic for us and well in this case I returned a command block kids just would actually trigger the system",
    "start": "3486329",
    "end": "3492300"
  },
  {
    "text": "call and return the results similarly you could have a logging bag and that",
    "start": "3492300",
    "end": "3499579"
  },
  {
    "text": "takes the well the logging bag on which person are used for instance of my",
    "start": "3499579",
    "end": "3505109"
  },
  {
    "text": "kernel implementation where when I encounter IPC commands I look at the header and it have this very huge",
    "start": "3505109",
    "end": "3511020"
  },
  {
    "text": "database of declarative interfaces like this go through all of them I find one",
    "start": "3511020",
    "end": "3516690"
  },
  {
    "text": "that actually matches so I can tell just from these bits and bytes which don't actually have this kind of information paisay like only the actual",
    "start": "3516690",
    "end": "3523589"
  },
  {
    "text": "micro-service will know which command it is but because the cone has this database that actually also knows even",
    "start": "3523589",
    "end": "3528990"
  },
  {
    "text": "on the actual system it doesn't point being in the corner can just automatically log all of these commands",
    "start": "3528990",
    "end": "3534570"
  },
  {
    "text": "and their parameter lists rather than just printing out the raw command block and stitching this together manually so",
    "start": "3534570",
    "end": "3541440"
  },
  {
    "text": "those really really powerful and this is really the the the core strength of this declarative interpreter interface",
    "start": "3541440",
    "end": "3547980"
  },
  {
    "text": "approach it's reusable among many many different contexts and you're not bound to one specific purpose especially",
    "start": "3547980",
    "end": "3554250"
  },
  {
    "text": "because you can start gradually you can hand you novel if you code for the handler a lot then once you decide to",
    "start": "3554250",
    "end": "3560670"
  },
  {
    "text": "write a new kind of piece of functionality well all you need to do is write in your background new generator",
    "start": "3560670",
    "end": "3565980"
  },
  {
    "text": "sorry it's just a really nice separation of concerns so to speak and that is",
    "start": "3565980",
    "end": "3571260"
  },
  {
    "start": "3570000",
    "end": "3600000"
  },
  {
    "text": "really the power of this declarative approach and declarative style program in general because of decouples logic",
    "start": "3571260",
    "end": "3578190"
  },
  {
    "text": "from structure or data from control for whatever way you want to look at it decouples things that allows you to",
    "start": "3578190",
    "end": "3583860"
  },
  {
    "text": "centrally define the structure of your IPC commands and handle the actual things you do with them separately yeah",
    "start": "3583860",
    "end": "3591960"
  },
  {
    "text": "you can look at the slide you know there's flexibility consistency separation and stuff like that cut some",
    "start": "3591960",
    "end": "3597060"
  },
  {
    "text": "drawbacks there's a redundancy you still need to write your handler function now",
    "start": "3597060",
    "end": "3602160"
  },
  {
    "text": "so there's an overlap in terms of things you define however I would like to",
    "start": "3602160",
    "end": "3607710"
  },
  {
    "text": "contrast this from from boilerplate I would call it redundant but I wouldn't",
    "start": "3607710",
    "end": "3613380"
  },
  {
    "text": "call it boilerplate for the reason that consistency is ensured so whatever you",
    "start": "3613380",
    "end": "3618870"
  },
  {
    "text": "do there was no room for typos it's more work for you to type things out but who typed them wrong the compiler will",
    "start": "3618870",
    "end": "3625110"
  },
  {
    "text": "complain about you because everything needs to be consistent and it's checked statically at compile time but yeah it's",
    "start": "3625110",
    "end": "3634170"
  },
  {
    "text": "not quite as automated as we would hope it would be another corner is the implementation complexity which is",
    "start": "3634170",
    "end": "3639780"
  },
  {
    "text": "slightly higher than in a reflection thing you have no way to gorgeous right",
    "start": "3639780",
    "end": "3645030"
  },
  {
    "text": "now but if you see the implementation it will be slightly more complex well that's just your price you have to pay",
    "start": "3645030",
    "end": "3650610"
  },
  {
    "text": "for come for the flexibility but yeah common to both approaches is",
    "start": "3650610",
    "end": "3656010"
  },
  {
    "text": "you have no boilerplate and it's type safe and correct by design which is really really nice and ultimately what",
    "start": "3656010",
    "end": "3661320"
  },
  {
    "text": "we were aiming for what I meant to show a small mini duel for this",
    "start": "3661320",
    "end": "3666700"
  },
  {
    "text": "well then quite have time for this but basically in my project I really have",
    "start": "3666700",
    "end": "3671890"
  },
  {
    "text": "these separate header files where have huge databases of these commands each command gets its own declarative",
    "start": "3671890",
    "end": "3677829"
  },
  {
    "text": "interface that's also quite useful for documentation purposes I meant to show this off that I'm running out of time I",
    "start": "3677829",
    "end": "3684480"
  },
  {
    "text": "was meant to do a quick digression on node and performance but the bottom line is it's fast we're just doing compile",
    "start": "3684480",
    "end": "3690730"
  },
  {
    "text": "time operations on type lists so really it's it's as efficient as if you had written all killed by hand because",
    "start": "3690730",
    "end": "3698460"
  },
  {
    "text": "compiler writers would actually have to go out of their way to generate code that is less efficient than what you've",
    "start": "3698460",
    "end": "3704290"
  },
  {
    "text": "written so it's really confirmed of reassuring that you can write these things you can build powerful abstractions and you know even in",
    "start": "3704290",
    "end": "3711940"
  },
  {
    "text": "resource constrained or timing critical environment this will just work because it just compiles to optimal assembling",
    "start": "3711940",
    "end": "3718410"
  },
  {
    "text": "way to conclude we've seen that how untyped data makes civilization center accumulation and various different",
    "start": "3718410",
    "end": "3725260"
  },
  {
    "text": "problems domains but also another process communication specifically we've seen how generators help us to get rid",
    "start": "3725260",
    "end": "3732250"
  },
  {
    "text": "of all of the spoiler curve the code and automatically turn lists of types into the runtime code that we actually want",
    "start": "3732250",
    "end": "3738730"
  },
  {
    "text": "in this case for expressions are quite big for this and parameter vex especially as well to reduce complexity",
    "start": "3738730",
    "end": "3745660"
  },
  {
    "text": "and just write complex expression really concisely and to get typeless we have",
    "start": "3745660",
    "end": "3751359"
  },
  {
    "text": "two approaches the first one being reflection which synthesizes the type lists directly from function signals as",
    "start": "3751359",
    "end": "3757270"
  },
  {
    "text": "in our case I'm really hoping that C++ 20 or 23 will get more extensive",
    "start": "3757270",
    "end": "3763089"
  },
  {
    "text": "reflection capabilities because then we could start you know writing support for structures on reflecting on them and do",
    "start": "3763089",
    "end": "3769089"
  },
  {
    "text": "really all kinds of useful things on these so I'm really looking forward to any progress on that area we've seen the",
    "start": "3769089",
    "end": "3775300"
  },
  {
    "text": "declarative interfaces which are an eternity after that which allow maximizing you reuse because you can",
    "start": "3775300",
    "end": "3781510"
  },
  {
    "text": "write very generic definitions but have different generators for different purposes weight and ultimately the",
    "start": "3781510",
    "end": "3789730"
  },
  {
    "text": "bottom line of all of this is you get a vastly more maintainable and more expressive solution that requires no",
    "start": "3789730",
    "end": "3794829"
  },
  {
    "text": "boiler had and all of that basically zero performance though ever had so hopefully",
    "start": "3794829",
    "end": "3801009"
  },
  {
    "text": "you'll be able to take some lessons away from this that's all I have to say really there any questions feel free to",
    "start": "3801009",
    "end": "3807400"
  },
  {
    "text": "come up to me later after the talk because we I'm afraid we don't have any time anymore so far thanks for your attention",
    "start": "3807400",
    "end": "3814220"
  },
  {
    "text": "[Applause]",
    "start": "3814220",
    "end": "3821450"
  }
]