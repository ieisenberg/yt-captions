[
  {
    "text": "good morning I I can see we have some survivors from yesterday after party all",
    "start": "3679",
    "end": "11690"
  },
  {
    "text": "right I hope you had a good two days of the conference and I hope I'm not gonna ruin the beginning of the third day for",
    "start": "11690",
    "end": "17689"
  },
  {
    "text": "you my name is Miho friends call me wolves of fury and they have good reasons for",
    "start": "17689",
    "end": "24260"
  },
  {
    "text": "that and this picture from International Space Station show both my home right",
    "start": "24260",
    "end": "31160"
  },
  {
    "text": "now I come from another Poland and now I live in a southern Sweden when I worked",
    "start": "31160",
    "end": "36230"
  },
  {
    "text": "for a 2037 we're a consulting company we have offices in four cities in Sweden we",
    "start": "36230",
    "end": "44390"
  },
  {
    "text": "really like to share our knowledge sorry quite active in conferences and we also organize our conference leet-speak and",
    "start": "44390",
    "end": "52600"
  },
  {
    "text": "today we're going to talk about computers and how do they work or actually how things work under what we",
    "start": "52600",
    "end": "61969"
  },
  {
    "text": "used to do in our everyday work so word the idea for the talk come from I was",
    "start": "61969",
    "end": "68659"
  },
  {
    "text": "talking with younger colleagues from my office and realized the people who come",
    "start": "68659",
    "end": "76579"
  },
  {
    "text": "from maybe from a different system education than me don't really go to like university just for example learnt",
    "start": "76579",
    "end": "84170"
  },
  {
    "text": "programming by themselves or go to some two years programming course they never",
    "start": "84170",
    "end": "90229"
  },
  {
    "text": "really are forced to familiarize them what's running on the bottom of our",
    "start": "90229",
    "end": "96740"
  },
  {
    "text": "high-level programming languages and it's maybe not that important you don't",
    "start": "96740",
    "end": "103340"
  },
  {
    "text": "really need it in your everyday life but it's awfully interesting so figure out I'm going to just make this talk",
    "start": "103340",
    "end": "109099"
  },
  {
    "text": "internally I was very well received figure why not do it somewhere externally and quite often when you do",
    "start": "109099",
    "end": "117499"
  },
  {
    "text": "programming these days we either use like NPM or no get we don't really have",
    "start": "117499",
    "end": "123409"
  },
  {
    "text": "to you know know a lot of stuff we can use a lot of packages and there's",
    "start": "123409",
    "end": "128599"
  },
  {
    "text": "nothing wrong about it makes us productive makes must deliver stuff very quickly but something sometimes stuff",
    "start": "128599",
    "end": "135290"
  },
  {
    "text": "like this happens and it makes us doubt what if the way",
    "start": "135290",
    "end": "141329"
  },
  {
    "text": "we're doing is this right and maybe with losing the contact what's happening below the code if you're not familiar",
    "start": "141329",
    "end": "148379"
  },
  {
    "text": "with this situation left but was like seven lines of code pocket manager that",
    "start": "148379",
    "end": "153510"
  },
  {
    "text": "was shifting text and half of the internet was depending on that so on the",
    "start": "153510",
    "end": "159540"
  },
  {
    "text": "outer pulled of the package from the NPM half of the open-source project broke",
    "start": "159540",
    "end": "165870"
  },
  {
    "text": "that day it was a wonderful day and the open source world so these days we like",
    "start": "165870",
    "end": "173849"
  },
  {
    "text": "most of us probably program of like high level programming languages like C syrup Java Python Jas and they don't really",
    "start": "173849",
    "end": "182310"
  },
  {
    "text": "like run their code they're like the on the CPU they're run in the sound form of sandbox virtual machine",
    "start": "182310",
    "end": "188629"
  },
  {
    "text": "CLR you name it so usually the code is",
    "start": "188629",
    "end": "194370"
  },
  {
    "text": "compiled into some intermediate way that's then JIT compiled to native code",
    "start": "194370",
    "end": "201689"
  },
  {
    "text": "and run on the operating system and this is as some benefits so we have automated",
    "start": "201689",
    "end": "207180"
  },
  {
    "text": "memory management you don't have to like allocate memory free it it's relatively",
    "start": "207180",
    "end": "213359"
  },
  {
    "text": "easy to do cross part from software and out because we just need different interpretation of the virtual machine on",
    "start": "213359",
    "end": "220500"
  },
  {
    "text": "different CPUs or architectures and so on but the underlying code can stay",
    "start": "220500",
    "end": "226229"
  },
  {
    "text": "mostly the same if you ever tried this practically you know the word is not so",
    "start": "226229",
    "end": "231299"
  },
  {
    "text": "you know nice and beautiful but it's much easier if you have to develop for every platform directly natively and",
    "start": "231299",
    "end": "239269"
  },
  {
    "text": "your code can't really violate my more you shouldn't really say never so let's",
    "start": "239269",
    "end": "246629"
  },
  {
    "text": "say can easily well as memory but if you've been long enough you know you've seen stuff happening or if you mess with",
    "start": "246629",
    "end": "254639"
  },
  {
    "text": "like people like Troy hunt you know like everything is possible",
    "start": "254639",
    "end": "261120"
  },
  {
    "text": "but um let's Duke so like let's look what's happening a bit closer to the",
    "start": "261120",
    "end": "266970"
  },
  {
    "text": "metal and languages like C and C++ which probably some of you used to program or",
    "start": "266970",
    "end": "273720"
  },
  {
    "text": "did some think it's cool at least and there have some benefits to they gives",
    "start": "273720",
    "end": "282120"
  },
  {
    "text": "you usually a bit better performance if written properly you've also much better control what's happening with memory and",
    "start": "282120",
    "end": "289050"
  },
  {
    "text": "in some situation it's it's needed but also we have to do a lot of additional",
    "start": "289050",
    "end": "295590"
  },
  {
    "text": "work to make stuff happens for example concatenation string in C is quite",
    "start": "295590",
    "end": "301110"
  },
  {
    "text": "annoying job because strings are our eyes of characters or bytes and that",
    "start": "301110",
    "end": "307530"
  },
  {
    "text": "with zero and if you want to allocate those if you want to concatenate strings",
    "start": "307530",
    "end": "313770"
  },
  {
    "text": "you have to calculate how long there are allocate new piece of memory for that",
    "start": "313770",
    "end": "319440"
  },
  {
    "text": "stuff and copy first drink at the beginning and second at some buffered",
    "start": "319440",
    "end": "327139"
  },
  {
    "text": "place you can put it out and then you have to free that memory because if you",
    "start": "327139",
    "end": "332910"
  },
  {
    "text": "don't free it's gonna it's not gonna get freed automatically and you're gonna start leaking memory but there are some",
    "start": "332910",
    "end": "341669"
  },
  {
    "text": "place where it's still very usable and like C and C++ is very like C++ musti's",
    "start": "341669",
    "end": "347610"
  },
  {
    "text": "extensively used in like 3d graphics for games when you do some physics",
    "start": "347610",
    "end": "352770"
  },
  {
    "text": "simulations and models quite often machine learning models we we have like",
    "start": "352770",
    "end": "358199"
  },
  {
    "text": "nice API sin Python or C sharp when use like C NT K or when you use tensorflow",
    "start": "358199",
    "end": "364590"
  },
  {
    "text": "but the older underlying code is written in C++ and all that calculation is done",
    "start": "364590",
    "end": "370410"
  },
  {
    "text": "natively on a machine with C++ high frequency trading is one another example",
    "start": "370410",
    "end": "376169"
  },
  {
    "text": "because for them it's very important to have very low latency and if a garbage",
    "start": "376169",
    "end": "384090"
  },
  {
    "text": "collector turns on in some moment when it's not early the latency lag goes to the roof so they like to control when",
    "start": "384090",
    "end": "390539"
  },
  {
    "text": "the garbage collector one day free memory and and so on and also in an embedded system where you",
    "start": "390539",
    "end": "397260"
  },
  {
    "text": "have quite limited to the memory although it's less and less true because now embedded system can even run",
    "start": "397260",
    "end": "403050"
  },
  {
    "text": "JavaScript so we're live in happy times and also it's not like we stuck in the",
    "start": "403050",
    "end": "409470"
  },
  {
    "text": "old ways we've seen C++ because there's a lot of new developments in area for",
    "start": "409470",
    "end": "415250"
  },
  {
    "text": "languages they're compelled to not the native stuff so language it like new",
    "start": "415250",
    "end": "421080"
  },
  {
    "text": "standards of C++ bring a lot of new features he we get actually garbage",
    "start": "421080",
    "end": "427710"
  },
  {
    "text": "collector we have smart pointers also languages like rust and go have a lot of",
    "start": "427710",
    "end": "432900"
  },
  {
    "text": "very nice features and can be also compiled to native but again that's not the code that's direct your onion your",
    "start": "432900",
    "end": "439560"
  },
  {
    "text": "CPUs so today again I've talked about assembly for ia-32 architecture so the",
    "start": "439560",
    "end": "445800"
  },
  {
    "text": "Intel Architecture and I'm gonna limit myself to the 32-bit architecture",
    "start": "445800",
    "end": "451410"
  },
  {
    "text": "because it's just simple to show as much less register as simple instruction set",
    "start": "451410",
    "end": "459090"
  },
  {
    "text": "but a lot of this stuff apply and worked in today like sixty-four extension to",
    "start": "459090",
    "end": "465120"
  },
  {
    "text": "this architecture because it's been just extended there's a ton of new features and there's a lot of things happening",
    "start": "465120",
    "end": "472650"
  },
  {
    "text": "but the like the basics are very much the same so let's look a simple line of",
    "start": "472650",
    "end": "479180"
  },
  {
    "text": "assembly code that's how it looks usually we have some some instruction",
    "start": "479180",
    "end": "487650"
  },
  {
    "text": "and some arguments to this instruction so this this instruction add number and",
    "start": "487650",
    "end": "495320"
  },
  {
    "text": "1337 to register EAX so what's EAX water registers so I'm",
    "start": "495320",
    "end": "503460"
  },
  {
    "text": "gonna sidetracks right now - couple things that happen around CPU or",
    "start": "503460",
    "end": "508560"
  },
  {
    "text": "directly in the CPU so we have things like registers its registers are small",
    "start": "508560",
    "end": "518690"
  },
  {
    "text": "like cells of memory directing on the CPU or not technically in the CPU but in",
    "start": "518690",
    "end": "524250"
  },
  {
    "text": "the same box or the way you look outside is inside the CPU but it's not particularly part of the",
    "start": "524250",
    "end": "530550"
  },
  {
    "text": "processing units just registers so in 32-bit architectures register have 32 bits so 4 bytes so you can fit integer",
    "start": "530550",
    "end": "539370"
  },
  {
    "text": "into there in extension to the and the 64-bit extension to the architecture",
    "start": "539370",
    "end": "546480"
  },
  {
    "text": "they have 64 bits so you can fit long into there and the other thing that",
    "start": "546480",
    "end": "551730"
  },
  {
    "text": "we're going to talk about today is stuck stuck is a piece of memory that's some",
    "start": "551730",
    "end": "556740"
  },
  {
    "text": "some old issue and the RAM in the random access memory but a special kind of",
    "start": "556740",
    "end": "561950"
  },
  {
    "text": "memory and now you can put you hang you can have like two operation that's like",
    "start": "561950",
    "end": "567480"
  },
  {
    "text": "you can put stuff on and you can pop stuff from the stack so you can layer things up on the bottom the top and you",
    "start": "567480",
    "end": "574380"
  },
  {
    "text": "can take things from the top we're gonna talk about more in a moment there are also things that are like not relevant",
    "start": "574380",
    "end": "580200"
  },
  {
    "text": "to this talks but also happening in our CPU so have generally ROM it's not really in the CPU it's next to it we",
    "start": "580200",
    "end": "588660"
  },
  {
    "text": "it's connected to a bus and it's not like for us like when we see like a disk",
    "start": "588660",
    "end": "596280"
  },
  {
    "text": "is a slow memory you ramp it seems very fast memory but for the CPU Ram is very slow memory so there",
    "start": "596280",
    "end": "602880"
  },
  {
    "text": "also has few levels of cache and basically the first level of cache is",
    "start": "602880",
    "end": "607980"
  },
  {
    "text": "usually very small and very fast and we have up to five levels which the fifth is probably the the biggest and it's",
    "start": "607980",
    "end": "614820"
  },
  {
    "text": "slowest and this is like some sort of extension to the RAM we're CPUs keep the",
    "start": "614820",
    "end": "621990"
  },
  {
    "text": "data that we'll need quite often so if you look at what's the fastest to slower we're looking first registers then cache",
    "start": "621990",
    "end": "629580"
  },
  {
    "text": "then we'll be RAM and the stack is a packet of ram and then we're looking as like slow memory slack disks or external",
    "start": "629580",
    "end": "637740"
  },
  {
    "text": "storage so registers in 32-bit Intel",
    "start": "637740",
    "end": "643860"
  },
  {
    "text": "Architecture we have eight of them for six of them more general-purpose",
    "start": "643860",
    "end": "649920"
  },
  {
    "text": "registers you can technically use them for ever you want there are two registers used for four special things",
    "start": "649920",
    "end": "659700"
  },
  {
    "text": "one is forest so a point where exactly at the stack we are so what's the sorry where's the top",
    "start": "659700",
    "end": "666630"
  },
  {
    "text": "of the stack and base pointer is the is the pointer that shows a base memory for",
    "start": "666630",
    "end": "673440"
  },
  {
    "text": "a function we are so basically where we're in memory starts current function",
    "start": "673440",
    "end": "680130"
  },
  {
    "text": "we're running right now so it's useful also for returning from non traction and",
    "start": "680130",
    "end": "686040"
  },
  {
    "text": "so on as you can see the one also",
    "start": "686040",
    "end": "691230"
  },
  {
    "text": "interesting registers ESI that's usually used as an instruction pointer so is",
    "start": "691230",
    "end": "696830"
  },
  {
    "text": "because instructions are also stored somewhere in the memory and you have to know at which instructions you currently",
    "start": "696830",
    "end": "703200"
  },
  {
    "text": "out when you're like stepping your program and those four registers EAX EBX",
    "start": "703200",
    "end": "710610"
  },
  {
    "text": "ECX edx you can see you can also address the lower 16 bits of that and also the",
    "start": "710610",
    "end": "716910"
  },
  {
    "text": "lower bits this comes as a kind of legacy from the 8 and 16-bit architecture but it's quite sometimes",
    "start": "716910",
    "end": "725070"
  },
  {
    "text": "useful if you really want to optimize your code and don't want to use all four bytes or if the register you can just use lower four bytes or just lower one",
    "start": "725070",
    "end": "733350"
  },
  {
    "text": "byte and populate a more tightly right so let's back to our instruction and",
    "start": "733350",
    "end": "740310"
  },
  {
    "text": "what doesn't mean or actually this is again not something I can computer",
    "start": "740310",
    "end": "745410"
  },
  {
    "text": "really thoroughly understand our computer understand something like that",
    "start": "745410",
    "end": "750740"
  },
  {
    "text": "those are actually they're in a hexadecimal representation how this",
    "start": "750740",
    "end": "757800"
  },
  {
    "text": "instruction would be seen by processor and operated so how do I know that but",
    "start": "757800",
    "end": "764730"
  },
  {
    "text": "when I was at the beginning University one on my first curse of computer architecture the first start we had is",
    "start": "764730",
    "end": "770910"
  },
  {
    "text": "like still quite early era of internet in Poland so we have to go to an Intel",
    "start": "770910",
    "end": "777750"
  },
  {
    "text": "website and order the physical books and they came after four weeks from United storm Intel for free you could order it",
    "start": "777750",
    "end": "785040"
  },
  {
    "text": "from them now we can just download PDF but back then they were sending the the physical books",
    "start": "785040",
    "end": "791270"
  },
  {
    "text": "and when you look at one of the pages there's like basically hundreds of pages",
    "start": "791270",
    "end": "796280"
  },
  {
    "text": "and two first books are just instruction set where you they're all the",
    "start": "796280",
    "end": "801890"
  },
  {
    "text": "instructions available for processor are listed and how to actually use them so",
    "start": "801890",
    "end": "807290"
  },
  {
    "text": "what I want to do is add two EAX register immediate values so just just",
    "start": "807290",
    "end": "813050"
  },
  {
    "text": "integer value and that's the opcode zero",
    "start": "813050",
    "end": "818390"
  },
  {
    "text": "five and then ID is the integer of size a double word so it's four bits you have",
    "start": "818390",
    "end": "826250"
  },
  {
    "text": "you can see other sizes like there is B which is like byte which is one byte",
    "start": "826250",
    "end": "831740"
  },
  {
    "text": "word which is two bytes and double and which is four bytes so you can see as I",
    "start": "831740",
    "end": "838640"
  },
  {
    "text": "told you can address those eight thirty 16 and 32 bits parts of the transistors",
    "start": "838640",
    "end": "844880"
  },
  {
    "text": "also in the image and you can just add this data to just like lower parts of the register fun fact this thing's",
    "start": "844880",
    "end": "852140"
  },
  {
    "text": "probably gonna get optimized to this up",
    "start": "852140",
    "end": "857630"
  },
  {
    "text": "code so it's gonna be add a X and two bytes because we only use our like our",
    "start": "857630",
    "end": "865870"
  },
  {
    "text": "number fits easily into two bytes so probably your compiler actually down",
    "start": "865870",
    "end": "871490"
  },
  {
    "text": "optimize it to use only to those two bytes but just for privacy I'm using this as you can see also one 327 in",
    "start": "871490",
    "end": "878870"
  },
  {
    "text": "hexadecimal is 5 3 9 but those bits are flipped first bits are like the lowest",
    "start": "878870",
    "end": "887620"
  },
  {
    "text": "meaning and then is the highest which is feels a bit weird but that's like there",
    "start": "888010",
    "end": "897290"
  },
  {
    "text": "are two ways of sending bits there's big-endian little-endian and I think that's little endian I don't",
    "start": "897290",
    "end": "906260"
  },
  {
    "text": "exactly remember doesn't matter but basically the way the bits are sent refers it's the least important bits yes",
    "start": "906260",
    "end": "915170"
  },
  {
    "text": "and then the the most important bits so yeah that's the opcode and the like the",
    "start": "915170",
    "end": "921200"
  },
  {
    "text": "number of operation you saw in the book and that's the parameter we was sending in true so",
    "start": "921200",
    "end": "927350"
  },
  {
    "text": "let's look at simple function in",
    "start": "927350",
    "end": "932520"
  },
  {
    "text": "assembly code this function will add two numbers and this is complete code for",
    "start": "932520",
    "end": "939960"
  },
  {
    "text": "adding two numbers is like complete program in assembly code so first we",
    "start": "939960",
    "end": "945630"
  },
  {
    "text": "have some declaration dot 386 notifies instruction sets for like 386 CPU I",
    "start": "945630",
    "end": "955050"
  },
  {
    "text": "picked that because this was the first one processor with like 32-bit",
    "start": "955050",
    "end": "960560"
  },
  {
    "text": "instruction set so it has all the way need for that with later processors he",
    "start": "960560",
    "end": "968430"
  },
  {
    "text": "also had like more extended instruction",
    "start": "968430",
    "end": "974700"
  },
  {
    "text": "sets so you had stuff like MMX and operation to do like operations to act",
    "start": "974700",
    "end": "982860"
  },
  {
    "text": "on the moon on RA data and so on and then we have the code segment so you can",
    "start": "982860",
    "end": "990180"
  },
  {
    "text": "also have a data segment a partial code segment when you declare like sort of like Locker variables you can declare",
    "start": "990180",
    "end": "996810"
  },
  {
    "text": "what's in the memory so you can basically put in data something like constants in their programs we we write",
    "start": "996810",
    "end": "1003650"
  },
  {
    "text": "in a high level programming and code segment says has like opening and ending",
    "start": "1003650",
    "end": "1009490"
  },
  {
    "text": "we declare some things here but not",
    "start": "1009490",
    "end": "1014750"
  },
  {
    "text": "gonna dig into dirt now it's not very important and that's the actual function code we have a start of the function and",
    "start": "1014750",
    "end": "1022190"
  },
  {
    "text": "and and we're gonna dig and debug this function but first let's talk about some",
    "start": "1022190",
    "end": "1028939"
  },
  {
    "text": "other things let's talk about stack again and also already mentioned that there are like 200 page main operation",
    "start": "1028940",
    "end": "1035630"
  },
  {
    "text": "let stack you can push things and at the top of the stacks and you can pop and",
    "start": "1035630",
    "end": "1040910"
  },
  {
    "text": "remove from the top of the stacks and you we have some base address where the",
    "start": "1040910",
    "end": "1046040"
  },
  {
    "text": "stacks starts in the memory and usually because we're operating on 32 bits so we",
    "start": "1046040",
    "end": "1052940"
  },
  {
    "text": "add whole four bytes of data so we increment address by for every",
    "start": "1052940",
    "end": "1058190"
  },
  {
    "text": "we out something so we increment the pointer bar 4 and put the data here you",
    "start": "1058190",
    "end": "1064460"
  },
  {
    "text": "can increment it by 2 or by one or by three if you're crazy because we've we",
    "start": "1064460",
    "end": "1070250"
  },
  {
    "text": "have very good control we can access every bits of memory but usually you just don't want to it you just want to",
    "start": "1070250",
    "end": "1076700"
  },
  {
    "text": "access the whole bits of data but uh yeah you can do other things just the",
    "start": "1076700",
    "end": "1082550"
  },
  {
    "text": "thing is with x86 architecture the stack is some weird anti-gravitational stack",
    "start": "1082550",
    "end": "1088160"
  },
  {
    "text": "and we start from the top and build things on the bottom of it so when you",
    "start": "1088160",
    "end": "1094910"
  },
  {
    "text": "push stuff on the stack let's they push integer number and three on the stack we actually decrease the address because",
    "start": "1094910",
    "end": "1101150"
  },
  {
    "text": "that's how it works in three and if you push another things on the stack we",
    "start": "1101150",
    "end": "1107150"
  },
  {
    "text": "again decrease it by eight oops yeah and if you want something pop you",
    "start": "1107150",
    "end": "1114950"
  },
  {
    "text": "have to pop it to some other place so you can pop two AAA X Register or you can pop in someplace in your run memory",
    "start": "1114950",
    "end": "1121490"
  },
  {
    "text": "and then you have to increment the stack",
    "start": "1121490",
    "end": "1128600"
  },
  {
    "text": "pointer here's the I'm using the like ESP the stack pointer we mentioned",
    "start": "1128600",
    "end": "1133970"
  },
  {
    "text": "previously and this is the EAP which is the instruction pointer we talk seriously and so this number after we",
    "start": "1133970",
    "end": "1143300"
  },
  {
    "text": "pop it is launched long somewhere in the EAX register and that's like the part of",
    "start": "1143300",
    "end": "1149540"
  },
  {
    "text": "stock that's interests us underline of the red line but the memoir is still there the thing is like when you program",
    "start": "1149540",
    "end": "1156020"
  },
  {
    "text": "in a low level you can never expect one this in the place of memory because",
    "start": "1156020",
    "end": "1161060"
  },
  {
    "text": "there can be trust from our previous operations so quite often when you like declare new variables in low-level",
    "start": "1161060",
    "end": "1166400"
  },
  {
    "text": "languages you have to like set it to zero zero because you have never know sure what's there in this memory so",
    "start": "1166400",
    "end": "1174740"
  },
  {
    "text": "that's another funny thing about all all of our programming that we tend to",
    "start": "1174740",
    "end": "1179960"
  },
  {
    "text": "forget and there is something like calling conventions so the way you call",
    "start": "1179960",
    "end": "1185360"
  },
  {
    "text": "functions so the cdecl convention is use in the like",
    "start": "1185360",
    "end": "1191260"
  },
  {
    "text": "windows space systems or like dos but",
    "start": "1191260",
    "end": "1196820"
  },
  {
    "text": "that's what we get from those systems and the way it look works you have if",
    "start": "1196820",
    "end": "1204200"
  },
  {
    "text": "you have like two arguments in the function or three arguments for the function you pass them from the back so",
    "start": "1204200",
    "end": "1210620"
  },
  {
    "text": "if you have three arguments you pass first start and second and first we have to we first press third a second",
    "start": "1210620",
    "end": "1217490"
  },
  {
    "text": "argument and then the first it doesn't really matter if we called function like a sum but it matter if you call function",
    "start": "1217490",
    "end": "1224720"
  },
  {
    "text": "like if you divide something then the order of operations makes like the Oprah of arguments makes sense but that's how",
    "start": "1224720",
    "end": "1231650"
  },
  {
    "text": "your things and then when you call a function you get something like a return",
    "start": "1231650",
    "end": "1239120"
  },
  {
    "text": "address so there's gonna be information for a for function where it should",
    "start": "1239120",
    "end": "1245750"
  },
  {
    "text": "return the stack pointer when it's finished their operation so now we can",
    "start": "1245750",
    "end": "1251900"
  },
  {
    "text": "get back to our functions so we call the",
    "start": "1251900",
    "end": "1257270"
  },
  {
    "text": "function sum so we are deed the return address of the stack now we push push",
    "start": "1257270",
    "end": "1263299"
  },
  {
    "text": "EBP which is like base pointer because we want to save wherever the base",
    "start": "1263299",
    "end": "1269240"
  },
  {
    "text": "pointer for previous function that called our function so we put it we store it on this stack so we don't",
    "start": "1269240",
    "end": "1275660"
  },
  {
    "text": "forget and now we set as a base pointer the stack pointer because that's the start of operation for our current",
    "start": "1275660",
    "end": "1282020"
  },
  {
    "text": "functions that piece of memory that are a function we operate on we don't want it to look at the piece of memories that",
    "start": "1282020",
    "end": "1290030"
  },
  {
    "text": "belongs to other functions because we start violate their memory and then we have to do it all manually and make sure",
    "start": "1290030",
    "end": "1295940"
  },
  {
    "text": "we just keep to our memory and now we I",
    "start": "1295940",
    "end": "1300980"
  },
  {
    "text": "simulated here a processor so we have a register so we can follow it's happening which is basically stepping like in",
    "start": "1300980",
    "end": "1306740"
  },
  {
    "text": "visual studio so now we're moving to a X the second argument from this function",
    "start": "1306740",
    "end": "1313370"
  },
  {
    "text": "which is three and moving to e 6 which is another register",
    "start": "1313370",
    "end": "1320390"
  },
  {
    "text": "first argument and the the way I pick those registers it is a bit like I just",
    "start": "1320390",
    "end": "1329190"
  },
  {
    "text": "picked them because I picked them like that he usually it doesn't matter does they're called general-purpose registers",
    "start": "1329190",
    "end": "1335220"
  },
  {
    "text": "because you can use them for them stuff but sometimes you good to remember that",
    "start": "1335220",
    "end": "1340830"
  },
  {
    "text": "for example all of the operations by default if you don't if they don't have",
    "start": "1340830",
    "end": "1349890"
  },
  {
    "text": "any like output value the default values that they will it return the value to a",
    "start": "1349890",
    "end": "1355230"
  },
  {
    "text": "X a register so you have to keep them in mind and maybe not keep their information that you want to keep for",
    "start": "1355230",
    "end": "1361350"
  },
  {
    "text": "later but here we were doing just openly we're just adding oh we're I think e^x",
    "start": "1361350",
    "end": "1368490"
  },
  {
    "text": "and ECX and it's going to be added to the first register so it's a X so now we",
    "start": "1368490",
    "end": "1373850"
  },
  {
    "text": "have some in our area X okay now we coming to the part of action that we",
    "start": "1373850",
    "end": "1380190"
  },
  {
    "text": "want to actually exit the function so we're getting but EBP so that if the the",
    "start": "1380190",
    "end": "1385590"
  },
  {
    "text": "we return to the next function the function that called this function it's going to get their base pointer back and",
    "start": "1385590",
    "end": "1392250"
  },
  {
    "text": "we're going return which basically jump us to the return address so now I'm",
    "start": "1392250",
    "end": "1399270"
  },
  {
    "text": "gonna run some demos I prepared some",
    "start": "1399270",
    "end": "1409020"
  },
  {
    "text": "actual code written in assembly and other things so it's gonna start with",
    "start": "1409020",
    "end": "1418289"
  },
  {
    "text": "first one I'm gonna do a startup project",
    "start": "1418289",
    "end": "1427220"
  },
  {
    "text": "so I wrote a small enough library and it has has two functions one is damper",
    "start": "1433710",
    "end": "1441820"
  },
  {
    "text": "multiply and second is a smart multiply what's dumb multiplied us it's let's say",
    "start": "1441820",
    "end": "1448629"
  },
  {
    "text": "we want to multiply three by seven so I'm gonna loop three times and out seven",
    "start": "1448629",
    "end": "1454779"
  },
  {
    "text": "to some register so basically we're gonna loop three times and add the",
    "start": "1454779",
    "end": "1460059"
  },
  {
    "text": "number three times which kinda works like multiply but it's like very way very stupid way to do it the reason I'm",
    "start": "1460059",
    "end": "1466149"
  },
  {
    "text": "doing is just show you how loops works in assembly um and this code is this",
    "start": "1466149",
    "end": "1473830"
  },
  {
    "text": "library I called from C code so this C code is like very simple just now it's",
    "start": "1473830",
    "end": "1482200"
  },
  {
    "text": "actually same example 7 by 3 so cool I'm just gonna run the bugger yeah that's",
    "start": "1482200",
    "end": "1496590"
  },
  {
    "text": "sort of expected and now all right I'm",
    "start": "1496590",
    "end": "1501610"
  },
  {
    "text": "gonna now step into and now we're",
    "start": "1501610",
    "end": "1507879"
  },
  {
    "text": "jumping from a sicko to assembly code and now we're doing the same thing so I",
    "start": "1507879",
    "end": "1514179"
  },
  {
    "text": "described so we're popping some things moving it and now if we're moving the",
    "start": "1514179",
    "end": "1521379"
  },
  {
    "text": "arguments to the to the registers so let's do this and also a initializing",
    "start": "1521379",
    "end": "1530379"
  },
  {
    "text": "accumulator so the register will keep their result as as as I told you we just",
    "start": "1530379",
    "end": "1537700"
  },
  {
    "text": "put 0 in there just in case because we have no idea to store in there actually",
    "start": "1537700",
    "end": "1543220"
  },
  {
    "text": "Visual Studio shows that there are some like 1 1 6 4 2 2 4 0 so this is like some trash memory that was used by some",
    "start": "1543220",
    "end": "1550570"
  },
  {
    "text": "previous program or wherever so that's cool and now we have something called",
    "start": "1550570",
    "end": "1556869"
  },
  {
    "text": "start here that's just a label and then we're gonna just jump to this",
    "start": "1556869",
    "end": "1566480"
  },
  {
    "text": "table at the length of this block of code and gnz is the instruction that will jump to the label if value in the",
    "start": "1566480",
    "end": "1576980"
  },
  {
    "text": "EBX register is different than zero so",
    "start": "1576980",
    "end": "1581990"
  },
  {
    "text": "gnz means jump if not zero and there's a lot of like conventions in the assembly",
    "start": "1581990",
    "end": "1587419"
  },
  {
    "text": "so you can just know that that means that the zero cannot be in the EBX register so we're gonna use a B X as the",
    "start": "1587419",
    "end": "1594169"
  },
  {
    "text": "as our yeah mm like iterator like",
    "start": "1594169",
    "end": "1603039"
  },
  {
    "text": "counter of the loop and in every step of the loop I'll add to the our accumulator",
    "start": "1603039",
    "end": "1610640"
  },
  {
    "text": "the second argument and will decrease",
    "start": "1610640",
    "end": "1616039"
  },
  {
    "text": "the first argument which will gonna be our counter and this will do as long as",
    "start": "1616039",
    "end": "1621559"
  },
  {
    "text": "the eb x equals zero so let's step up to its like few times you can see we're",
    "start": "1621559",
    "end": "1626960"
  },
  {
    "text": "going seven times across the loop nothing unexpected and at some point",
    "start": "1626960",
    "end": "1634580"
  },
  {
    "text": "we'll probably get out of it so as you can see go-to is now all n processor act",
    "start": "1634580",
    "end": "1642350"
  },
  {
    "text": "that's like the default except operation it doesn't mean usually right go to because compiler does it so we don't",
    "start": "1642350",
    "end": "1648679"
  },
  {
    "text": "have to cool and now i'm gonna return",
    "start": "1648679",
    "end": "1655010"
  },
  {
    "text": "this edx which were our accumulated volume which is 21 so that's right",
    "start": "1655010",
    "end": "1661429"
  },
  {
    "text": "answer for like multiplying 7 3 by 7 but we have to move it back to e ax because",
    "start": "1661429",
    "end": "1668390"
  },
  {
    "text": "e x is default register for returning stuff so as you can see there's like a threat here come on that ax is quite",
    "start": "1668390",
    "end": "1675950"
  },
  {
    "text": "often used as a default register for things all right so good let's get out of the functions will do a popping and",
    "start": "1675950",
    "end": "1682669"
  },
  {
    "text": "we return inc and we're back in the c code and just about one step more and we",
    "start": "1682669",
    "end": "1693200"
  },
  {
    "text": "can see that dump prod is 21 so that's expected value that's what we wanted to see all right let's step in now in the smart",
    "start": "1693200",
    "end": "1700570"
  },
  {
    "text": "prod which is like another function wrote which is using email operation",
    "start": "1700570",
    "end": "1707020"
  },
  {
    "text": "which is basically integer multiplying",
    "start": "1707020",
    "end": "1711120"
  },
  {
    "text": "so do I have a breakpoint setup here I do we can step in we do again those",
    "start": "1712560",
    "end": "1724720"
  },
  {
    "text": "whole whole things we do at the beginning of the main we're taking arguments and we just do email and have",
    "start": "1724720",
    "end": "1734110"
  },
  {
    "text": "a result in Aix and the return so each",
    "start": "1734110",
    "end": "1741040"
  },
  {
    "text": "line of assembly code is like one cycle of CPU so our in dump prod took the",
    "start": "1741040",
    "end": "1747190"
  },
  {
    "text": "round like four lines state seven times it's probably around twenty eight cycles or something like that and our smart",
    "start": "1747190",
    "end": "1754240"
  },
  {
    "text": "multiply the reserved for one cycle because just like one operation built in the CPU it's it's implemented with some",
    "start": "1754240",
    "end": "1763060"
  },
  {
    "text": "like gates and things like that on the electrical level and it's much more",
    "start": "1763060",
    "end": "1770710"
  },
  {
    "text": "faster than what we're doing in this semi programmatic way all right so we",
    "start": "1770710",
    "end": "1776110"
  },
  {
    "text": "get the resort and yeah doesn't really matter so that's the C code so we can",
    "start": "1776110",
    "end": "1787300"
  },
  {
    "text": "call the assembly from C code and sometimes when you're writing your C",
    "start": "1787300",
    "end": "1792340"
  },
  {
    "text": "code and it's not fast enough you want to more control you can write pieces of your code assembly it's all cool but",
    "start": "1792340",
    "end": "1798310"
  },
  {
    "text": "let's try to go like one layer up I",
    "start": "1798310",
    "end": "1803760"
  },
  {
    "text": "packed it all in the library so this is the same code code just like packed in",
    "start": "1803760",
    "end": "1810160"
  },
  {
    "text": "the library and I have a c-sharp code that gonna try to use this library so",
    "start": "1810160",
    "end": "1816700"
  },
  {
    "text": "what we're gonna do is gonna run c-sharp code that's going to call the C code that's gonna call the assembly code",
    "start": "1816700",
    "end": "1825180"
  },
  {
    "text": "and the way you do it with C sharp is something called platfrom invoke pain",
    "start": "1826100",
    "end": "1832830"
  },
  {
    "text": "VOC so I'm importing the DLL that I build here within this project we using",
    "start": "1832830",
    "end": "1838350"
  },
  {
    "text": "this decl calling convention you have to like declare it how they library what kind of convention in",
    "start": "1838350",
    "end": "1845609"
  },
  {
    "text": "expects and and this is just gonna do",
    "start": "1845609",
    "end": "1852570"
  },
  {
    "text": "something like that we're gonna calculate a times X plus B function so",
    "start": "1852570",
    "end": "1858509"
  },
  {
    "text": "the C code in the native library is basically we use multiply from assembly",
    "start": "1858509",
    "end": "1864359"
  },
  {
    "text": "code and we return this plus B calculated in C code and our daughter",
    "start": "1864359",
    "end": "1873239"
  },
  {
    "text": "library cool let's see how it works so I'll get the program CS I have a",
    "start": "1873239",
    "end": "1883229"
  },
  {
    "text": "breakpoint setup so let's just start it so 3 times 5 plus 7 that's gonna be 15",
    "start": "1883229",
    "end": "1892830"
  },
  {
    "text": "should be 22 so let's see if does expect",
    "start": "1892830",
    "end": "1900840"
  },
  {
    "text": "razor salt is 22 it's probably the window gonna disappear but I can start",
    "start": "1900840",
    "end": "1908580"
  },
  {
    "text": "without debugging and yes we have 22 it's barely visible her so I have to",
    "start": "1908580",
    "end": "1913830"
  },
  {
    "text": "believe it but uh as well yeah but probably quite a lot of Luna or of us",
    "start": "1913830",
    "end": "1921389"
  },
  {
    "text": "right today's JavaScript so let's maybe write some JavaScript that will call",
    "start": "1921389",
    "end": "1926519"
  },
  {
    "text": "c-sharp code that will called seek out that were called assembly I mean that",
    "start": "1926519",
    "end": "1932190"
  },
  {
    "text": "how about that so to do this I made a",
    "start": "1932190",
    "end": "1938249"
  },
  {
    "text": "small web server with with Nancy which",
    "start": "1938249",
    "end": "1944820"
  },
  {
    "text": "is like a small dotnet framework for making web services so that's what I do",
    "start": "1944820",
    "end": "1953700"
  },
  {
    "text": "I basically start service I set up localhost and I have",
    "start": "1953700",
    "end": "1959268"
  },
  {
    "text": "one module which which takes just the",
    "start": "1961630",
    "end": "1967780"
  },
  {
    "text": "index and ystem API and I wrote some JavaScript code that's probably terribly",
    "start": "1967780",
    "end": "1974090"
  },
  {
    "text": "bad jealous crowd because it's not what I do in my everyday basis let's see the",
    "start": "1974090",
    "end": "1979790"
  },
  {
    "text": "code here source show me the source I want to see visual",
    "start": "1979790",
    "end": "1987620"
  },
  {
    "text": "stuff yeah so basically I just Ajax to the API I'm running in the server and",
    "start": "1987620",
    "end": "1994430"
  },
  {
    "text": "this server calls the native library and it's 95 a you know the drill so let's",
    "start": "1994430",
    "end": "2000910"
  },
  {
    "text": "just run it and see it does what we want",
    "start": "2000910",
    "end": "2005400"
  },
  {
    "text": "all right there just refresh it all",
    "start": "2016190",
    "end": "2022220"
  },
  {
    "text": "right so three times four on 12 plus five yes let's try something else so it",
    "start": "2022220",
    "end": "2030530"
  },
  {
    "text": "does work but you may not believe me that we're running this assembly code so",
    "start": "2030530",
    "end": "2035840"
  },
  {
    "text": "let's do something else let's mess with assembly code to show that it's actually the same code we running I'm gonna stop",
    "start": "2035840",
    "end": "2043910"
  },
  {
    "text": "this whole up go to the library that we're running go to the assembly code",
    "start": "2043910",
    "end": "2050090"
  },
  {
    "text": "and we're just gonna add thousand to the result just for the shaitaan' giggles",
    "start": "2050090",
    "end": "2056409"
  },
  {
    "text": "all right we need to rebuild this library because assembling story",
    "start": "2056860",
    "end": "2062919"
  },
  {
    "text": "reassemble let's code like that it's",
    "start": "2062919",
    "end": "2068149"
  },
  {
    "text": "gonna take a minute now we can listen listen to venkat well that's happening",
    "start": "2068150",
    "end": "2074560"
  },
  {
    "text": "okay I think it's succeeded so let's hope for the best",
    "start": "2075370",
    "end": "2080919"
  },
  {
    "text": "and servers running I'm gonna freshet yes so uh yeah this is uh this shows",
    "start": "2087169",
    "end": "2099840"
  },
  {
    "text": "that the stuff we're doing we may be living in a happy JavaScript or C sharp",
    "start": "2099840",
    "end": "2106470"
  },
  {
    "text": "or Java or wherever is your poison a language word but it's all build upon",
    "start": "2106470",
    "end": "2112619"
  },
  {
    "text": "layers and we're kind of standing on the shoulders of giants started like programming computer with",
    "start": "2112619",
    "end": "2118470"
  },
  {
    "text": "Beats and they came up with idea that's you know doing it if stupid that's come with some language that's",
    "start": "2118470",
    "end": "2124200"
  },
  {
    "text": "gonna be super cool for it and it came up with assembling in the next generation people figure out that assembly it's a bit harsh so maybe like",
    "start": "2124200",
    "end": "2130230"
  },
  {
    "text": "to find something that's gonna be better ins over that we're going to and we're in the world of JavaScript so not sure",
    "start": "2130230",
    "end": "2136980"
  },
  {
    "text": "if we didn't do something wrong on the way but I think that's the end of my",
    "start": "2136980",
    "end": "2143940"
  },
  {
    "text": "demo so let's get back to slides I have a couple of more I want to really quick",
    "start": "2143940",
    "end": "2150300"
  },
  {
    "text": "this Mehring so we'll probably have a time for more coffee cool slides it's all good all good",
    "start": "2150300",
    "end": "2160140"
  },
  {
    "text": "so Intel is not the only architecture we talk with just the most common for us",
    "start": "2160140",
    "end": "2166380"
  },
  {
    "text": "there and what's the characteristic for intel architecture has a lot of lot of",
    "start": "2166380",
    "end": "2172440"
  },
  {
    "text": "instructions but just small amount to register like in the thirty boot two bits we have like eight register I think",
    "start": "2172440",
    "end": "2178710"
  },
  {
    "text": "64 extensions has like 128 registers or something less we have like much more",
    "start": "2178710",
    "end": "2183900"
  },
  {
    "text": "available but still it's quite limited amount but numbers of instructions is",
    "start": "2183900",
    "end": "2189960"
  },
  {
    "text": "like it's very very big so it's very like every instructions optimized in",
    "start": "2189960",
    "end": "2196770"
  },
  {
    "text": "that way but they're like architectural like risk which means reduced instruction set computer architecture",
    "start": "2196770",
    "end": "2204390"
  },
  {
    "text": "something like that and they don't have like just a few amount of instructions that are very",
    "start": "2204390",
    "end": "2210960"
  },
  {
    "text": "basic but ever like a lot of registers that do very specific things and it's like very convention base so that's also",
    "start": "2210960",
    "end": "2217770"
  },
  {
    "text": "very interesting and you're gonna have big endian little and young 16 bytes 24 bytes so it's all",
    "start": "2217770",
    "end": "2228690"
  },
  {
    "text": "interesting but like each of those architecture will have their own assembly code and and you just have to",
    "start": "2228690",
    "end": "2237550"
  },
  {
    "text": "do other things so like leaving layer up when we have actually running our code and virtual machines it's quite",
    "start": "2237550",
    "end": "2243700"
  },
  {
    "text": "convenient on everyday basis if you'd like to dig more into this stuff this is",
    "start": "2243700",
    "end": "2249609"
  },
  {
    "text": "fantastic book the Charles Petzl starts with like just flashlight and explaining",
    "start": "2249609",
    "end": "2257200"
  },
  {
    "text": "binary way and goes all the way up to building like AI gates NAND gates and so",
    "start": "2257200",
    "end": "2263680"
  },
  {
    "text": "on up to building the transistors and you know pretty much building operation",
    "start": "2263680",
    "end": "2271359"
  },
  {
    "text": "system from scratch it's a really cool book so I thank you for coming I put",
    "start": "2271359",
    "end": "2278500"
  },
  {
    "text": "some resources on my block on this fix and I'm gonna keep it on the screen so",
    "start": "2278500",
    "end": "2284500"
  },
  {
    "text": "if you have any question I can take them now yes",
    "start": "2284500",
    "end": "2290730"
  },
  {
    "text": "all right I can actually get back to code and show this stop that let's go to",
    "start": "2296280",
    "end": "2310450"
  },
  {
    "text": "the first so so that's the like",
    "start": "2310450",
    "end": "2319950"
  },
  {
    "text": "definition of the function and I've file",
    "start": "2319950",
    "end": "2325090"
  },
  {
    "text": "he'll that's see it calls it but I also have a header file that's seen and it",
    "start": "2325090",
    "end": "2332560"
  },
  {
    "text": "displays those functions and it's kind of shows that like for each file in it",
    "start": "2332560",
    "end": "2342310"
  },
  {
    "text": "Cedar's in the H file that's this kind of function in this is kind of a bit",
    "start": "2342310",
    "end": "2349150"
  },
  {
    "text": "like defining interface in a high level programming and then what linker does",
    "start": "2349150",
    "end": "2355450"
  },
  {
    "text": "which is like a program that connects files during a compiler to you pass to",
    "start": "2355450",
    "end": "2362560"
  },
  {
    "text": "the leaker all the files and the linker gets all the files as an input analyze what's like the name of the functions",
    "start": "2362560",
    "end": "2368890"
  },
  {
    "text": "and everything in those files and then link them to those kind of interfaces that you declare in a header file so",
    "start": "2368890",
    "end": "2375340"
  },
  {
    "text": "that's what gets connected during linking phase of compiling no no linker",
    "start": "2375340",
    "end": "2382540"
  },
  {
    "text": "is kind of like so when you like would compile manually you probably would be",
    "start": "2382540",
    "end": "2389020"
  },
  {
    "text": "like you would like like GCC and pass all the files of the input files and",
    "start": "2389020",
    "end": "2394990"
  },
  {
    "text": "linker is just one of the you know steps of the compiling so just put those",
    "start": "2394990",
    "end": "2400330"
  },
  {
    "text": "things together so I think it's a linking statically here yeah yeah",
    "start": "2400330",
    "end": "2411720"
  },
  {
    "text": "so yeah so that the function are named the same as the assembly found they just",
    "start": "2417040",
    "end": "2423020"
  },
  {
    "text": "use the underscore notation but just the same file so when you know and when",
    "start": "2423020",
    "end": "2428390"
  },
  {
    "text": "you're like do a compiler step you pass as an input value all the files that's important for this thing and this will",
    "start": "2428390",
    "end": "2435410"
  },
  {
    "text": "do like parsing of the files and just find like functions of like connect",
    "start": "2435410",
    "end": "2442040"
  },
  {
    "text": "gametes I guess if I remember correctly there are some problems you have to file the functions name the same in different",
    "start": "2442040",
    "end": "2448490"
  },
  {
    "text": "files then you start running into problems and that's where like namespace",
    "start": "2448490",
    "end": "2455180"
  },
  {
    "text": "come count confined to these languages but back then you have to like make sure",
    "start": "2455180",
    "end": "2460580"
  },
  {
    "text": "you're a naming convention works properly and so on I'm not I don't see",
    "start": "2460580",
    "end": "2468410"
  },
  {
    "text": "the whole stage so it's everybody if you have a question just wave intensively",
    "start": "2468410",
    "end": "2474100"
  },
  {
    "text": "alright yeah yeah",
    "start": "2474100",
    "end": "2480160"
  },
  {
    "text": "mm-hmm",
    "start": "2484000",
    "end": "2487000"
  },
  {
    "text": "yeah so now this is like very specific assembly to like Intel Architecture if",
    "start": "2501400",
    "end": "2506869"
  },
  {
    "text": "you look for example a Commodore 64 the assembly is gonna be different and so on",
    "start": "2506869",
    "end": "2512089"
  },
  {
    "text": "and this is not that much of abstraction is just like kind of nicer way to play",
    "start": "2512089",
    "end": "2518210"
  },
  {
    "text": "it so when we get back to the of those",
    "start": "2518210",
    "end": "2525529"
  },
  {
    "text": "binary numbers so just like for my readability so what happens whew slide back no no",
    "start": "2525529",
    "end": "2536140"
  },
  {
    "text": "so basically this is like directly getting translated and so that's",
    "start": "2536140",
    "end": "2541450"
  },
  {
    "text": "basically what this computer run and this is just for readability and zeros",
    "start": "2541450",
    "end": "2554860"
  },
  {
    "text": "and ones and so on or hex yes so actually if you I'm not sure it's gonna",
    "start": "2554860",
    "end": "2561330"
  },
  {
    "text": "I don't have it prepared but if you like actually take like the object file which",
    "start": "2561330",
    "end": "2566470"
  },
  {
    "text": "is like output of of compilation and you're gonna see the hex view you're",
    "start": "2566470",
    "end": "2572500"
  },
  {
    "text": "gonna see actually a lot of those op codes that you kinda recognize so this means you can what you could technically",
    "start": "2572500",
    "end": "2578590"
  },
  {
    "text": "do you could just write zeros ones or like hex values in notepad save it as an",
    "start": "2578590",
    "end": "2584710"
  },
  {
    "text": "object file it looks like act as a compiled file and you can just reference this directly so this is like directly",
    "start": "2584710",
    "end": "2590320"
  },
  {
    "text": "the code that's being sent to the CPU and run yeah it will be very tedious but",
    "start": "2590320",
    "end": "2598420"
  },
  {
    "text": "definitely possible yeah yes",
    "start": "2598420",
    "end": "2607830"
  },
  {
    "text": "I looked it into bits I think it's a very interesting topic and yeah but I don't have any smart to",
    "start": "2607830",
    "end": "2616650"
  },
  {
    "text": "say about it it's just I started looking into everything yes yes yes you can",
    "start": "2616650",
    "end": "2632160"
  },
  {
    "text": "write into your own bytes of places when you store instructions so you can change",
    "start": "2632160",
    "end": "2638010"
  },
  {
    "text": "the instructions during running the actual instructions yes",
    "start": "2638010",
    "end": "2643310"
  },
  {
    "text": "we're we're sort of in the danger zone but it is possible I've never done that",
    "start": "2643310",
    "end": "2652320"
  },
  {
    "text": "now all right please remember to vote if",
    "start": "2652320",
    "end": "2660750"
  },
  {
    "text": "you have more questions during that they'll be the whole day here and enjoy the rest of the day thank you",
    "start": "2660750",
    "end": "2666360"
  },
  {
    "text": "[Applause]",
    "start": "2666360",
    "end": "2673389"
  }
]