[
  {
    "text": "so I'm hoping I'm gonna try to you know uh keep this easy for everyone but there are a lot of contents in this session",
    "start": "240",
    "end": "7200"
  },
  {
    "text": "each of those topics can be really a one session for itself so",
    "start": "7200",
    "end": "12240"
  },
  {
    "text": "I'm gonna do my best to fit everything in one hour so I guess the best part is I don't have to finish on time because there's nobody",
    "start": "12240",
    "end": "18359"
  },
  {
    "text": "after me so I'm gonna try my best and I have some demos at the end and if you",
    "start": "18359",
    "end": "24779"
  },
  {
    "text": "have any questions I will be more than happy to answer them at the end of the session",
    "start": "24779",
    "end": "30119"
  },
  {
    "text": "and thanks again coming to my session",
    "start": "30119",
    "end": "33920"
  },
  {
    "text": "well I guess I can start the best part of the presentation which I am proud of is those actually the blinks I made them",
    "start": "41399",
    "end": "48780"
  },
  {
    "text": "it took long time believe me those blinks took some time so what I'm going to actually try to I guess uh talk about",
    "start": "48780",
    "end": "55860"
  },
  {
    "text": "is though those exciting new new features in SQL Server Microsoft has",
    "start": "55860",
    "end": "60960"
  },
  {
    "text": "been trying to keep up with all the database other database engines and",
    "start": "60960",
    "end": "66299"
  },
  {
    "text": "adding all kind of features in SQL server and unfortunately right now the database industry is kind of crazy there",
    "start": "66299",
    "end": "72240"
  },
  {
    "text": "is a new database engine comes up every you know year and there's a lot of options out there so Microsoft is trying",
    "start": "72240",
    "end": "78360"
  },
  {
    "text": "to you know like compete with them and they're adding all kind of new features in them so I'm going to try to show you",
    "start": "78360",
    "end": "84540"
  },
  {
    "text": "the most important ones they add from 2017 2019 and 2012. and most of those",
    "start": "84540",
    "end": "92100"
  },
  {
    "text": "are available in Azure SQL if you are using Azure SQL they should be out there already so before I go in this session let me",
    "start": "92100",
    "end": "100200"
  },
  {
    "text": "actually talk about myself my name is Hassan sabran and I am owner of Southern lab Consulting mostly I focus on Cosmos",
    "start": "100200",
    "end": "107460"
  },
  {
    "text": "TV and I have another full-time job I work for a large industry company in the",
    "start": "107460",
    "end": "113399"
  },
  {
    "text": "United States and I'm located in Cleveland Ohio and this is my fourth",
    "start": "113399",
    "end": "119640"
  },
  {
    "text": "year in Microsoft data platform MVP program I'm very happy and honored to be part of it I have my blog you can check",
    "start": "119640",
    "end": "128340"
  },
  {
    "text": "it out I like to write about Cosmos DB SQL Server front-end c-sharp whatever I know I'd like to share out there so you",
    "start": "128340",
    "end": "135000"
  },
  {
    "text": "might find something interesting out there and if you will have any questions later you can just follow me on the",
    "start": "135000",
    "end": "141660"
  },
  {
    "text": "LinkedIn or Twitter I will be more than happy to answer any of your questions from there too",
    "start": "141660",
    "end": "147300"
  },
  {
    "text": "so let's actually start with history of Json in SQL Server",
    "start": "147300",
    "end": "153540"
  },
  {
    "text": "uh Jason well developers were actually saving Json even before the 2016 when it",
    "start": "153540",
    "end": "159480"
  },
  {
    "text": "got introduced to SQL server at the NS string so you can just save it as string",
    "start": "159480",
    "end": "165180"
  },
  {
    "text": "but uh I guess Microsoft see that as an opportunity and they say that okay you know they're already saving the Json in",
    "start": "165180",
    "end": "171840"
  },
  {
    "text": "SQL Server so let's actually not create a new data type for Json so they just",
    "start": "171840",
    "end": "177959"
  },
  {
    "text": "kept they just kept it as one car well and War car mix when they introduce it that's the data",
    "start": "177959",
    "end": "184800"
  },
  {
    "text": "type that actual Microsoft suggested and I believe they still suggest to use this one if you are especially you have some",
    "start": "184800",
    "end": "191099"
  },
  {
    "text": "special characters you can use the Mr CarMax if you don't have any you can use it for CarMax both",
    "start": "191099",
    "end": "197159"
  },
  {
    "text": "of them are gonna work uh in that 2016 when they introduced they actually have had four functions",
    "start": "197159",
    "end": "203879"
  },
  {
    "text": "those are the is Jason Json value Json query and Json modified which I will cover them in all of it",
    "start": "203879",
    "end": "209519"
  },
  {
    "text": "when this game actually came out first time well as you might guess our dbas had some",
    "start": "209519",
    "end": "215819"
  },
  {
    "text": "issues with it and there are some concerns and their concern was developed first of all",
    "start": "215819",
    "end": "221760"
  },
  {
    "text": "Car Max or n-bar marker Max well they cannot be indexed so that was the first",
    "start": "221760",
    "end": "227159"
  },
  {
    "text": "concert second one the data is getting saved in SQL Server by eight kilobyte Pages well",
    "start": "227159",
    "end": "233659"
  },
  {
    "text": "since we don't Define any kind of number here and it's Max it's not really easy",
    "start": "233659",
    "end": "239760"
  },
  {
    "text": "to optimize this workarmax in SQL Server and also updates takes much longer",
    "start": "239760",
    "end": "246180"
  },
  {
    "text": "because of the data type so those were the DBS concerns and they are still the concerns",
    "start": "246180",
    "end": "251700"
  },
  {
    "text": "so from there well in 2017 came up with",
    "start": "251700",
    "end": "257280"
  },
  {
    "text": "some uh actually good additions so in SQL Server you have the memory",
    "start": "257280",
    "end": "263520"
  },
  {
    "text": "optimized tables in 2017 actually Microsoft had the Json functions in",
    "start": "263520",
    "end": "268620"
  },
  {
    "text": "memory optimized tables that kind of opened a lot of new kind of Adventures",
    "start": "268620",
    "end": "273840"
  },
  {
    "text": "for developers because basically Microsoft lets you actually use your own redis environment in SQL",
    "start": "273840",
    "end": "281759"
  },
  {
    "text": "Server by making it available in the memory tables uh from there in 2019 there were no",
    "start": "281759",
    "end": "287820"
  },
  {
    "text": "updates and 2022 just came up last year and we actually see some new functions",
    "start": "287820",
    "end": "294479"
  },
  {
    "text": "and some of the functions got upgraded most of the functions you see in 2022 is",
    "start": "294479",
    "end": "299880"
  },
  {
    "text": "really about creating arrays creating jsons in SQL Server before 2022 yet they",
    "start": "299880",
    "end": "307080"
  },
  {
    "text": "do everything in the if you are using C sharp or you know mvc.in.net then save it to SQL server in 2022 you can",
    "start": "307080",
    "end": "314699"
  },
  {
    "text": "actually change and create new Json documents in SQL Server",
    "start": "314699",
    "end": "319800"
  },
  {
    "text": "before we go into I guess the details what those functions do and how they work first we kind of need to learn kind",
    "start": "319800",
    "end": "326759"
  },
  {
    "text": "of like a language that you kind of need to query those Json documents in SQL Server so uh Microsoft called those Json path",
    "start": "326759",
    "end": "334500"
  },
  {
    "text": "Expressions as you can see it just starts with the dollar sign",
    "start": "334500",
    "end": "340020"
  },
  {
    "text": "here and dollar sign represents the context of the Json so if you are looking at",
    "start": "340020",
    "end": "346320"
  },
  {
    "text": "Json document in a column uh that the whole document is the dollar",
    "start": "346320",
    "end": "351479"
  },
  {
    "text": "sign from there you are going to use the dot operator and that's going to indicate the members so you can actually go and",
    "start": "351479",
    "end": "357240"
  },
  {
    "text": "query the Json schema by then uh you are going to use the key names for example we have here a post ID is",
    "start": "357240",
    "end": "365340"
  },
  {
    "text": "the first member so if you're gonna say dollar sign dot post ID that's the value",
    "start": "365340",
    "end": "370500"
  },
  {
    "text": "you want to get from the Json document if you have any kind of special",
    "start": "370500",
    "end": "375539"
  },
  {
    "text": "characters and the key names is totally valid to kind of start with the Double Quarter as you can see we have a white",
    "start": "375539",
    "end": "380940"
  },
  {
    "text": "space in the middle so that's it works the same way you can have the array elements and",
    "start": "380940",
    "end": "387539"
  },
  {
    "text": "there are two type of path modes in the Json documents in SQL Server one is the Lex which is the default mode the other",
    "start": "387539",
    "end": "394860"
  },
  {
    "text": "one is the strict so you don't really need to Define it but as I say before the Lex is the",
    "start": "394860",
    "end": "401100"
  },
  {
    "text": "default one so what actually happens here for example the last one here you see here order is",
    "start": "401100",
    "end": "407220"
  },
  {
    "text": "well order is does not exist here so intellect mode if you're going to try to get order is SQL Server is going to",
    "start": "407220",
    "end": "413880"
  },
  {
    "text": "return null if you are actually using the strict SQL Server is going to actually throw an error and tell you that this doesn't",
    "start": "413880",
    "end": "420300"
  },
  {
    "text": "exist so you can have some kind of control on the schema even the schema list but you can have some kind of",
    "start": "420300",
    "end": "426780"
  },
  {
    "text": "control in the schema by using the strict option",
    "start": "426780",
    "end": "432479"
  },
  {
    "text": "so by knowing that now we are actually ready to kind of look at those functions",
    "start": "432660",
    "end": "438060"
  },
  {
    "text": "in SQL server for Json Json query function is the first function which actually queries the Json",
    "start": "438060",
    "end": "444900"
  },
  {
    "text": "document and it actually returns you a Json document from that the default value for the optional pet",
    "start": "444900",
    "end": "452039"
  },
  {
    "text": "is the dollar sign that that which means that you are you are getting the whole content so you are not passing any kind",
    "start": "452039",
    "end": "458759"
  },
  {
    "text": "of I guess uh the path if you use the pet then it's going to return an array",
    "start": "458759",
    "end": "465599"
  },
  {
    "text": "or it's going to return an object so those are the two things it can return and the return data type is nycar Max so",
    "start": "465599",
    "end": "474300"
  },
  {
    "text": "if your Json is not that big you can always cast and convert that to make",
    "start": "474300",
    "end": "480060"
  },
  {
    "text": "things a little bit faster if you need to so let's see actually this in action so",
    "start": "480060",
    "end": "485220"
  },
  {
    "text": "in the left side you see our document as a sample Json document and we are going",
    "start": "485220",
    "end": "490919"
  },
  {
    "text": "to try to run Json query as you can see I'm just passing the return delivery data that's the name of my column and",
    "start": "490919",
    "end": "498060"
  },
  {
    "text": "this is the pet that I want to get so events zero which I shall get the first",
    "start": "498060",
    "end": "503520"
  },
  {
    "text": "one here and I'm just calling it as event so when I run that you're gonna see that",
    "start": "503520",
    "end": "510180"
  },
  {
    "text": "actually it Returns the Json document it returns that object here for me",
    "start": "510180",
    "end": "517200"
  },
  {
    "text": "so let's see another example now I am looking at the events zero dot",
    "start": "517200",
    "end": "524099"
  },
  {
    "text": "event and what do you think this is going to actually return in ideas",
    "start": "524099",
    "end": "530540"
  },
  {
    "text": "it is not going to return anything because as I said before yes it exists here but this is a value this is not an",
    "start": "532080",
    "end": "538500"
  },
  {
    "text": "object or this is not an array so Json query is not going to return anything for that so you kind of need to be",
    "start": "538500",
    "end": "543959"
  },
  {
    "text": "careful when you use the Json query uh three things you need to know it returns object or array",
    "start": "543959",
    "end": "550820"
  },
  {
    "text": "and it returns nycar Max and it returns",
    "start": "550820",
    "end": "555899"
  },
  {
    "text": "it as Json document it doesn't return as a scalar value now let's look at this trick we actually",
    "start": "555899",
    "end": "562860"
  },
  {
    "text": "talk about the strict here before and let's say we are looking strict dot event so now I know that this is",
    "start": "562860",
    "end": "569399"
  },
  {
    "text": "actually a returning event because by default this is a Lex so it doesn't care uh if it's there or",
    "start": "569399",
    "end": "576000"
  },
  {
    "text": "not but in this case it's there but at least we are going to able to see the error here because we are doing the",
    "start": "576000",
    "end": "582899"
  },
  {
    "text": "strict here as you can see it says object or a cannot be found",
    "start": "582899",
    "end": "588540"
  },
  {
    "text": "so if we want to get the value then we need to use the Json value function and",
    "start": "588540",
    "end": "593640"
  },
  {
    "text": "Json value function is very close to the Json object but it returns a scalar value it does not return a Json document",
    "start": "593640",
    "end": "600540"
  },
  {
    "text": "anymore and the data type is worker 4000.",
    "start": "600540",
    "end": "606120"
  },
  {
    "text": "if the data you are trying to pull is larger than varcar 4000 you should use the open Json function rather than Json",
    "start": "606120",
    "end": "613560"
  },
  {
    "text": "value I never had this issue with my experience all the values were less than",
    "start": "613560",
    "end": "618779"
  },
  {
    "text": "four thousand so I'm not going to able to you know talk about open Json here but if that's the case that the value is",
    "start": "618779",
    "end": "624839"
  },
  {
    "text": "larger than 4000 you might need to use them so now with the Json object we could not",
    "start": "624839",
    "end": "631260"
  },
  {
    "text": "retrieve the events event here with this one we should be able to do that",
    "start": "631260",
    "end": "636600"
  },
  {
    "text": "so in here as you can see I am using the Json value return delivery data is the name of the column and I have the path",
    "start": "636600",
    "end": "643260"
  },
  {
    "text": "which is the events zero event and that actually gets the string of the",
    "start": "643260",
    "end": "649800"
  },
  {
    "text": "scalar value for the event object next one as you can see I am looking for",
    "start": "649800",
    "end": "656940"
  },
  {
    "text": "driver ID and Driver ID is actually in the second array not the first one so",
    "start": "656940",
    "end": "663720"
  },
  {
    "text": "this one is going to return null because it's Lex mode by default but if I'm",
    "start": "663720",
    "end": "669420"
  },
  {
    "text": "going to actually use a strict for the same one well then I'm going to actually see an",
    "start": "669420",
    "end": "674760"
  },
  {
    "text": "error SQL Server is going to throw the error because I'm using this trick and it needs to exist for it to get returned",
    "start": "674760",
    "end": "682160"
  },
  {
    "text": "next one probably the most popular one is is Json as you might guess it just",
    "start": "682380",
    "end": "688320"
  },
  {
    "text": "returns true or false since there's no Json data type in SQL server in some",
    "start": "688320",
    "end": "693480"
  },
  {
    "text": "cases you might want to check in your where class before you pull the data if this is a Json or not",
    "start": "693480",
    "end": "699600"
  },
  {
    "text": "so in 2022 we actually have some optional Json type parameter is",
    "start": "699600",
    "end": "706620"
  },
  {
    "text": "introduced in the 2022. if you have uh 2016 1719 you don't have that option",
    "start": "706620",
    "end": "713100"
  },
  {
    "text": "so in here rather than you know uh checking if Jason is a valid Json",
    "start": "713100",
    "end": "719339"
  },
  {
    "text": "document you can actually check if it's a value if it's an array object or scalar uh if you like to",
    "start": "719339",
    "end": "725459"
  },
  {
    "text": "so for example let's see an example in here I'm just looking at actually this is my data again in the left side you",
    "start": "725459",
    "end": "731579"
  },
  {
    "text": "see I'm just checking if this is a Json document valid Json document and it returns one",
    "start": "731579",
    "end": "738180"
  },
  {
    "text": "if you want to make it more complex we can put this Json query in Json in this",
    "start": "738180",
    "end": "745019"
  },
  {
    "text": "case I am actually asking if events is an array and it's in my where filter",
    "start": "745019",
    "end": "751500"
  },
  {
    "text": "since it returns it it returns true and it Returns the data",
    "start": "751500",
    "end": "756540"
  },
  {
    "text": "so this is great you know you might need to actually put the sjs in your where Cloud just to be safe but there's another way",
    "start": "756540",
    "end": "763740"
  },
  {
    "text": "to actually deal with this problem and that is adding a constraint on your",
    "start": "763740",
    "end": "768779"
  },
  {
    "text": "table so every time you insert you every time you update your data SQL Server",
    "start": "768779",
    "end": "774000"
  },
  {
    "text": "will actually run this is Json for the entered data and it will accept it or it",
    "start": "774000",
    "end": "779700"
  },
  {
    "text": "won't depending if it's a valid Json or not so that's that's a good kind of I guess tip",
    "start": "779700",
    "end": "786240"
  },
  {
    "text": "next one is Json modify Json modify just modifies the Json document and there are",
    "start": "786240",
    "end": "792480"
  },
  {
    "text": "three items here that you need to know append is only for arrays so if you have",
    "start": "792480",
    "end": "798420"
  },
  {
    "text": "array one two three and if you want to add four to the array you might need to use the append so it won't the form will",
    "start": "798420",
    "end": "804779"
  },
  {
    "text": "not replace the one two three out there and we have the Lex mode and Lex mode",
    "start": "804779",
    "end": "810600"
  },
  {
    "text": "whenever you are updating SQL Server does not care if it's there or not in the strict mode whatever you are trying",
    "start": "810600",
    "end": "817440"
  },
  {
    "text": "to update out there it needs to be there if not the SQL Server will actually return an error",
    "start": "817440",
    "end": "823920"
  },
  {
    "text": "and also in the Lex mode if the value the name value is null then your property will get disappear from the",
    "start": "823920",
    "end": "830880"
  },
  {
    "text": "Json document since uh it's not uh you know suggested to kind of keep the nulls in the Json document because it keeps",
    "start": "830880",
    "end": "837300"
  },
  {
    "text": "them large so as you can see I have one example here I am trying to update my return",
    "start": "837300",
    "end": "843899"
  },
  {
    "text": "delivery data that's my Json document and I am saying update the driver ID to",
    "start": "843899",
    "end": "849000"
  },
  {
    "text": "18 here next one is Json array that's one of the",
    "start": "849000",
    "end": "855839"
  },
  {
    "text": "new ones came up with the 2022 and this one just construct the name Json array in SQL Server itself and there's an",
    "start": "855839",
    "end": "863399"
  },
  {
    "text": "optional uh parameter here which is the middle class which kind of controls if you want to keep the nulls or not in the",
    "start": "863399",
    "end": "869760"
  },
  {
    "text": "Json array so in here if I don't pass anything it just returns empty array and as you can",
    "start": "869760",
    "end": "877800"
  },
  {
    "text": "see I can create arrays by just passing uh strings here so both of them actually",
    "start": "877800",
    "end": "883860"
  },
  {
    "text": "returning the same one as you can see I am using the absent on null which I mean",
    "start": "883860",
    "end": "889740"
  },
  {
    "text": "that I'm taking the null art from here so they are the same I think",
    "start": "889740",
    "end": "894839"
  },
  {
    "text": "if I want to actually save the null then I can use no longer I know there's a lot of nulls out there but as you can see",
    "start": "894839",
    "end": "901260"
  },
  {
    "text": "this returns to null in my colors array so you have some control with the notes with this way",
    "start": "901260",
    "end": "907620"
  },
  {
    "text": "next one is constructing the Json document in SQL server and this one",
    "start": "907620",
    "end": "913500"
  },
  {
    "text": "actually has the same parameter this kind of controls if you want to keep the nose or not in the Json document you create",
    "start": "913500",
    "end": "918839"
  },
  {
    "text": "and this returns N1 Car Max again if hopefully your Json document is not",
    "start": "918839",
    "end": "924600"
  },
  {
    "text": "that large if it's two thousand three thousand you can always convert that to whatever you have in your database",
    "start": "924600",
    "end": "930360"
  },
  {
    "text": "so in here for example we are creating a Json documents name is Assam ages 18 as",
    "start": "930360",
    "end": "936420"
  },
  {
    "text": "you can see it just returns it the Json document here and my address is null here since absent on all address getting",
    "start": "936420",
    "end": "944339"
  },
  {
    "text": "disappeared so that is kind of important you kind of need to know that parameter and use it well if you don't want to",
    "start": "944339",
    "end": "950100"
  },
  {
    "text": "have like any surprises and in here on top of that you can actually create arrays in the Json",
    "start": "950100",
    "end": "956339"
  },
  {
    "text": "document so as you can see it's the same object I am my address null and I'm creating kids array and I'm passing the",
    "start": "956339",
    "end": "963839"
  },
  {
    "text": "names here and I am using null on no so as you can see my address is here now",
    "start": "963839",
    "end": "971420"
  },
  {
    "text": "and you can use it as parameters they work the same way in the Json array or",
    "start": "971420",
    "end": "976500"
  },
  {
    "text": "Json object another one jsonpath exists so in some",
    "start": "976500",
    "end": "983339"
  },
  {
    "text": "cases you might need to filter or check if the property exists before you make any decisions on your application so you",
    "start": "983339",
    "end": "990779"
  },
  {
    "text": "can use the Json pad exist for that one so again I'm just using the same column name and I'm just passing the filter",
    "start": "990779",
    "end": "998279"
  },
  {
    "text": "here and I'm just checking if the driver ID does exist in the zero which is not",
    "start": "998279",
    "end": "1003560"
  },
  {
    "text": "here so it returns false it returns zero next one uh well my driver ID is here so",
    "start": "1003560",
    "end": "1010279"
  },
  {
    "text": "I say well let's try if it's in the second one and as you can see it returns one here because driver ID exists in the",
    "start": "1010279",
    "end": "1016339"
  },
  {
    "text": "Json document now this is another interesting thing that",
    "start": "1016339",
    "end": "1023480"
  },
  {
    "text": "you might be able to use in your application so you can actually return data as Json so you know their SQL",
    "start": "1023480",
    "end": "1029298"
  },
  {
    "text": "Server can return as XML so by just using the four Json at the end you can",
    "start": "1029299",
    "end": "1035000"
  },
  {
    "text": "actually return whatever you are returning in Json document and there are a couple of parameters you",
    "start": "1035000",
    "end": "1040339"
  },
  {
    "text": "can use if you don't use anything it's going to be Auto so all the select the column names is going to be your",
    "start": "1040339",
    "end": "1045860"
  },
  {
    "text": "property names and that's going to be the schema of the Json if you want to actually use the maybe",
    "start": "1045860",
    "end": "1053179"
  },
  {
    "text": "change the names or add like a nested objects you can do that with the path so",
    "start": "1053179",
    "end": "1059360"
  },
  {
    "text": "for example you might have a large document and you might maybe create a nested object let's say customer in the",
    "start": "1059360",
    "end": "1065480"
  },
  {
    "text": "object all you have to do is just change the aliases for example as a customer.h",
    "start": "1065480",
    "end": "1070780"
  },
  {
    "text": "customer.name customer.address that will actually create an asset object in the document for you and you have to use a",
    "start": "1070780",
    "end": "1077960"
  },
  {
    "text": "pet for that one if you like you can change the root option you can change the root Name by",
    "start": "1077960",
    "end": "1083419"
  },
  {
    "text": "the root option by default there's no root name and other two popular ones is include",
    "start": "1083419",
    "end": "1089240"
  },
  {
    "text": "null values if the null values are not there and if you want to see them you can just use include new value so it",
    "start": "1089240",
    "end": "1095780"
  },
  {
    "text": "will be in the return object by default no Wallace will not be there and without array wrapper so whenever",
    "start": "1095780",
    "end": "1102919"
  },
  {
    "text": "you actually use this all objects comes up as an array so if you are looking for only one customer you know there's going",
    "start": "1102919",
    "end": "1109039"
  },
  {
    "text": "to be one document so you can just use this one at the end of it so the data will come up as a one Json document",
    "start": "1109039",
    "end": "1114980"
  },
  {
    "text": "rather than arrays now when uh what we can do with this you can",
    "start": "1114980",
    "end": "1122539"
  },
  {
    "text": "do really kind of interesting things with that because if you really think about the let's say talk about the front",
    "start": "1122539",
    "end": "1127760"
  },
  {
    "text": "end you have a form usually your objects the class names matching with the form",
    "start": "1127760",
    "end": "1134600"
  },
  {
    "text": "uh HTML names MVC knows how to map that so you can actually you don't need to",
    "start": "1134600",
    "end": "1140539"
  },
  {
    "text": "worry about all that mapping because form is actually returning as a",
    "start": "1140539",
    "end": "1146059"
  },
  {
    "text": "Json document so potentially you can do the same thing coming from the Json document so you",
    "start": "1146059",
    "end": "1151520"
  },
  {
    "text": "might not even need an orm which is actually doing that for you as long as the names are matching and it comes as a",
    "start": "1151520",
    "end": "1157280"
  },
  {
    "text": "Json document well the.net should be able to handle that so to do that well",
    "start": "1157280",
    "end": "1163640"
  },
  {
    "text": "this is mostly the you know kind of default and easy way to get the data from SQL Server this is not going to",
    "start": "1163640",
    "end": "1169940"
  },
  {
    "text": "work the main reason this is not going to work is well then SQL Server actually returns to XML or Json it actually",
    "start": "1169940",
    "end": "1177200"
  },
  {
    "text": "splits that in two kilobyte chunks data so because of that if the data is larger",
    "start": "1177200",
    "end": "1183440"
  },
  {
    "text": "than two kilobytes then you might not get all Json document if you are going to go this way",
    "start": "1183440",
    "end": "1188600"
  },
  {
    "text": "so the best way there are two ways to actually fix that uh this applies to",
    "start": "1188600",
    "end": "1194120"
  },
  {
    "text": "Json or XML so what you can do here is you can actually create a you know a new",
    "start": "1194120",
    "end": "1199640"
  },
  {
    "text": "result here and you can say that this is M1 car Max and let's SQL Server to worry about put all of those chunks together",
    "start": "1199640",
    "end": "1206240"
  },
  {
    "text": "in SQL Server so when it comes to you actually this will work for this one now because it's going to come up as a one",
    "start": "1206240",
    "end": "1211280"
  },
  {
    "text": "document that's one way another way is you can use the",
    "start": "1211280",
    "end": "1216559"
  },
  {
    "text": "reader.read so as long as there is something coming up from SQL Server all you are going to do is say I can actually append that to a current",
    "start": "1216559",
    "end": "1224240"
  },
  {
    "text": "document so what will work whichever is easier for you uh you can actually get",
    "start": "1224240",
    "end": "1229880"
  },
  {
    "text": "the Json document like that and from there you can just convert your objects very easily",
    "start": "1229880",
    "end": "1236440"
  },
  {
    "text": "well Json documents well we are still in SQL Server so we kind of need to worry about indexing uh any of those functions",
    "start": "1236840",
    "end": "1244880"
  },
  {
    "text": "if you are going to actually run it I would say 90 to 95 percent maybe 100 they're going to go table skin",
    "start": "1244880",
    "end": "1252080"
  },
  {
    "text": "so when go to table scan well your DBS are not going to be happy and you kind of need to fix the problem because if",
    "start": "1252080",
    "end": "1257539"
  },
  {
    "text": "you are going to have a lot of users trying to hit those store procedures or you know functions then you might be an",
    "start": "1257539",
    "end": "1263000"
  },
  {
    "text": "issue you might be in a problem so to fix that problem SQL Server actually team came up with a",
    "start": "1263000",
    "end": "1269840"
  },
  {
    "text": "different way to actually fix that so we have computed columns in SQL Server so",
    "start": "1269840",
    "end": "1275240"
  },
  {
    "text": "those are really like the prepared almost like frozen meals they are ready to out there to catch a consume so and",
    "start": "1275240",
    "end": "1281780"
  },
  {
    "text": "usually you are calculating things in the same row and just putting it out there so you don't have to do it every",
    "start": "1281780",
    "end": "1287059"
  },
  {
    "text": "time and you are selecting the data so we can use that with the Json value function and actually create a new",
    "start": "1287059",
    "end": "1293960"
  },
  {
    "text": "column so you don't have to actually use the Json value every time uh you try to run this function",
    "start": "1293960",
    "end": "1300200"
  },
  {
    "text": "so in here for example I have this one here and I'm looking for driver id17",
    "start": "1300200",
    "end": "1305840"
  },
  {
    "text": "give me all the documents the driver id17 is in the document",
    "start": "1305840",
    "end": "1311539"
  },
  {
    "text": "depending how many adjacent documents you have that might be a pretty heavy query",
    "start": "1311539",
    "end": "1316760"
  },
  {
    "text": "so to fix that problem what we actually do is first we go and create a completed",
    "start": "1316760",
    "end": "1322220"
  },
  {
    "text": "column for this and on top of that as you can see I am converting the data too so in here is a",
    "start": "1322220",
    "end": "1328460"
  },
  {
    "text": "string but I made it actually integer here and I make it persisted purchase it",
    "start": "1328460",
    "end": "1333679"
  },
  {
    "text": "means that you're actually physically copying this data to the table itself so it doesn't have to calculate every time",
    "start": "1333679",
    "end": "1339140"
  },
  {
    "text": "you record it so that data it becomes like physical on that table from here",
    "start": "1339140",
    "end": "1344659"
  },
  {
    "text": "I can create an index on it because that's a column now and I can create a column on the virtual",
    "start": "1344659",
    "end": "1349700"
  },
  {
    "text": "ID virtual driver ID here as you can see and from here I can rewrite",
    "start": "1349700",
    "end": "1356059"
  },
  {
    "text": "my query as you can see I don't need to worry about Json value function right here virtual driver ID is 17 and I'm",
    "start": "1356059",
    "end": "1362539"
  },
  {
    "text": "using a integer here so this can really help you a lot to",
    "start": "1362539",
    "end": "1368059"
  },
  {
    "text": "make things really fast in SQL server and if you really think about it this is a great addition because you already",
    "start": "1368059",
    "end": "1373880"
  },
  {
    "text": "have the relational data out there and you have this well no schema data you're in the same environment and you can join",
    "start": "1373880",
    "end": "1379940"
  },
  {
    "text": "them together and that can be really uh powerful depending on what we are doing",
    "start": "1379940",
    "end": "1386679"
  },
  {
    "text": "so that was the Json part of the talk the next one is the graph database",
    "start": "1387200",
    "end": "1392419"
  },
  {
    "text": "tables graph database tables are not new and SQL Server actually start a support time in version 2017.",
    "start": "1392419",
    "end": "1400039"
  },
  {
    "text": "so before I go in Technical and try to explain you know what it is let's try to explain actually why we might need it",
    "start": "1400039",
    "end": "1407600"
  },
  {
    "text": "so we live in the you know connected world and when things changes in the world well usually they trigger other",
    "start": "1407600",
    "end": "1414020"
  },
  {
    "text": "changes and that usual trigger business changes your business might see a new uh",
    "start": "1414020",
    "end": "1419720"
  },
  {
    "text": "opportunities and you might as you might be selling X now you are going to start to sell why well when that happens what",
    "start": "1419720",
    "end": "1426260"
  },
  {
    "text": "happens your data changes well when your data changes then you are in trouble because we have to kind of go",
    "start": "1426260",
    "end": "1431900"
  },
  {
    "text": "back and create a new schema for it or if you are lucky you can maybe use the",
    "start": "1431900",
    "end": "1437240"
  },
  {
    "text": "current schema and add new tables or nail relations to actually handle that that will be the best uh if you can",
    "start": "1437240",
    "end": "1443419"
  },
  {
    "text": "actually do that so that really is a problem for some businesses for",
    "start": "1443419",
    "end": "1449840"
  },
  {
    "text": "example I'm not sure if block master was in England or not but it was one of the largest company to rent videos that was",
    "start": "1449840",
    "end": "1457100"
  },
  {
    "text": "the entertainment in older days there was no Netflix so Netflix came from nowhere and believe it or not Netflix",
    "start": "1457100",
    "end": "1462559"
  },
  {
    "text": "used to actually send the DVDs by mail so they didn't really come up as a digital or streaming company",
    "start": "1462559",
    "end": "1469580"
  },
  {
    "text": "and it was great because well you they were sending you the DVD you watch it and you send it whenever you like to",
    "start": "1469580",
    "end": "1475400"
  },
  {
    "text": "send it so they were not charging you any kind of late piece so that's the way that actually they started then actually",
    "start": "1475400",
    "end": "1481039"
  },
  {
    "text": "I go you know we started YouTube then Netflix started to have their own service and Blockbuster unfortunately it",
    "start": "1481039",
    "end": "1487640"
  },
  {
    "text": "was a large company it was like five billion dollar company in those days and they didn't really I guess maybe give",
    "start": "1487640",
    "end": "1494900"
  },
  {
    "text": "them a chance they refused to actually buy Netflix they had a chance to buy them they didn't buy them so wrong decisions and",
    "start": "1494900",
    "end": "1502220"
  },
  {
    "text": "maybe they didn't have the infrastructure because if you really think about it you are talking like DVDs everything is physical how are you gonna",
    "start": "1502220",
    "end": "1507679"
  },
  {
    "text": "actually take that and put in the digital and create this system from scratch that might be one of the you",
    "start": "1507679",
    "end": "1512960"
  },
  {
    "text": "know challenges they had at the end the data change they don't respect that and now they are",
    "start": "1512960",
    "end": "1518419"
  },
  {
    "text": "not here other industry is another one so lately you see all the information uh about the",
    "start": "1518419",
    "end": "1525140"
  },
  {
    "text": "you know cars are driving themselves there's a different way to actually sell the cars now especially in you know",
    "start": "1525140",
    "end": "1531140"
  },
  {
    "text": "United States there's like vending machines for cars so you can actually go and buy them by token so there's a",
    "start": "1531140",
    "end": "1536900"
  },
  {
    "text": "totally different kind of things that are going on in the Auto industry and I am from the insurance business so that's",
    "start": "1536900",
    "end": "1543919"
  },
  {
    "text": "a challenge for insurance business because you know you might have a customer come to you for an accident and they",
    "start": "1543919",
    "end": "1550100"
  },
  {
    "text": "said yeah you know what I had an accident but I wasn't driving the car driver the car was driving itself how do you write a policy for that and",
    "start": "1550100",
    "end": "1556580"
  },
  {
    "text": "how do you actually I guess handle the claims for that so that's totally I guess challenges coming up with the",
    "start": "1556580",
    "end": "1563299"
  },
  {
    "text": "other industry to many businesses police are emerging so that's another one I don't know if you heard but there",
    "start": "1563299",
    "end": "1569299"
  },
  {
    "text": "was a person who was sleeping in the car car was driving itself the cop was trying to stop him well",
    "start": "1569299",
    "end": "1575419"
  },
  {
    "text": "it didn't stop so now if you are the engineer of one of those cars you might",
    "start": "1575419",
    "end": "1580520"
  },
  {
    "text": "rather than looking front maybe you want to look at back too so if something is trying to stop you maybe it will stop the car so data changes business changes",
    "start": "1580520",
    "end": "1588080"
  },
  {
    "text": "and you kind of need to respect that and I guess handle that with some kind of",
    "start": "1588080",
    "end": "1593539"
  },
  {
    "text": "schema so the problem is that so what happens is",
    "start": "1593539",
    "end": "1599240"
  },
  {
    "text": "when the business evolves when the business changes your data needs to be flexible whenever",
    "start": "1599240",
    "end": "1604400"
  },
  {
    "text": "you're actually creating a data model today you almost need to think about the feature what might change so it will be",
    "start": "1604400",
    "end": "1609860"
  },
  {
    "text": "easier to create new domains and new relations in your tables so what are the options options are the",
    "start": "1609860",
    "end": "1617419"
  },
  {
    "text": "first one is the relational which is really not that good option when it comes to changes because you have a",
    "start": "1617419",
    "end": "1623179"
  },
  {
    "text": "schema and it's not easy to change if you have 10 20 30 tables it's never fun",
    "start": "1623179",
    "end": "1628580"
  },
  {
    "text": "to kind of add more tables onto there on that or try to change the relations you might have a primary key foreign key",
    "start": "1628580",
    "end": "1634940"
  },
  {
    "text": "it's a nightmare I'm not gonna lie rather than that we have key value which I guess redis can be an option for that",
    "start": "1634940",
    "end": "1641779"
  },
  {
    "text": "white column databases Cassandra is an option for that and the graph tables are",
    "start": "1641779",
    "end": "1648080"
  },
  {
    "text": "the option that I'm going to cover here so in SQL Server as I said before you",
    "start": "1648080",
    "end": "1653299"
  },
  {
    "text": "need at least 2017 or the Azure SQL to be able to create the graph database tables",
    "start": "1653299",
    "end": "1659260"
  },
  {
    "text": "the best part is you don't need to learn a new language you are still going to use a t-sql you don't need to buy",
    "start": "1659260",
    "end": "1665120"
  },
  {
    "text": "different servers and try to find people to maintain them you have the SQL Server you know it's the same SQL server and",
    "start": "1665120",
    "end": "1672740"
  },
  {
    "text": "you can join other tables so if you have current data models they are not graph database tables you can actually join",
    "start": "1672740",
    "end": "1678980"
  },
  {
    "text": "them to graph database tables and that will be very powerful if you can actually create a flexible model with",
    "start": "1678980",
    "end": "1684620"
  },
  {
    "text": "the graph database tables and join to your current tables and is fully integrated in the SQL",
    "start": "1684620",
    "end": "1689900"
  },
  {
    "text": "Server engine so even ssis and SSRS if you have any it will still work with the graph database tables since this SQL",
    "start": "1689900",
    "end": "1696919"
  },
  {
    "text": "Server itself so if you go a little bit more technical then I guess uh try to explain them what",
    "start": "1696919",
    "end": "1702559"
  },
  {
    "text": "they are is well in graph database tables we have two type of tables the",
    "start": "1702559",
    "end": "1707900"
  },
  {
    "text": "first one is the node tables and that is mostly for the entities other table type is The Edge tables",
    "start": "1707900",
    "end": "1714860"
  },
  {
    "text": "which actually keeps all the relations so the relation really becomes the first class citizen by Edge tables",
    "start": "1714860",
    "end": "1722419"
  },
  {
    "text": "in node tables we have a special column name node ID and that is really the",
    "start": "1722419",
    "end": "1728299"
  },
  {
    "text": "primary key for each entity and that is auto populated you don't have to kind of change anything on it SQL Server just",
    "start": "1728299",
    "end": "1735620"
  },
  {
    "text": "uses that to find the data so you will never need to update it delete it or anything with it but if you write a",
    "start": "1735620",
    "end": "1740659"
  },
  {
    "text": "select all from that table you will see the node ID and well I think that that is a Json document in it if you actually",
    "start": "1740659",
    "end": "1747020"
  },
  {
    "text": "look at the select all and just like in other tables it can have any type of data type if SQL Server",
    "start": "1747020",
    "end": "1754159"
  },
  {
    "text": "supports it you can put in the node tables Edge tables were the actual magic",
    "start": "1754159",
    "end": "1759260"
  },
  {
    "text": "happens so just like the node table we have hid and hid is a primary key for each relation",
    "start": "1759260",
    "end": "1765520"
  },
  {
    "text": "and just like the node IDs Json documenting it and you will have no business with it it will get Auto",
    "start": "1765520",
    "end": "1771080"
  },
  {
    "text": "populated uh at least there just FYI it can have any",
    "start": "1771080",
    "end": "1777260"
  },
  {
    "text": "type of columns that is very interesting if you really think about it we used to put all the columns in one table and",
    "start": "1777260",
    "end": "1783679"
  },
  {
    "text": "your columns can get really uh large your table can get really large because of that in here you can actually put the",
    "start": "1783679",
    "end": "1791240"
  },
  {
    "text": "metadata about the relation in the relation table so they don't have to go and stuck in one table",
    "start": "1791240",
    "end": "1797659"
  },
  {
    "text": "uh we have from ID and two ID and those are the special columns you need to actually create a relation so if I give",
    "start": "1797659",
    "end": "1804679"
  },
  {
    "text": "an example for that let's say we have user stable user stable is an entity table and we have Edge table let's say",
    "start": "1804679",
    "end": "1812059"
  },
  {
    "text": "one user likes other user so we create an edge table name like so we want to create a relation let's",
    "start": "1812059",
    "end": "1819440"
  },
  {
    "text": "say we have a username Alec and Anna we want to say Alex likes Anna to do that",
    "start": "1819440",
    "end": "1825500"
  },
  {
    "text": "we are going to get the node ID of Alec and put in the from ID and we are going to get n as node ID put",
    "start": "1825500",
    "end": "1832399"
  },
  {
    "text": "in the two ID so that's going to create a one column I mean one row in the edge table and that's going to create a",
    "start": "1832399",
    "end": "1839179"
  },
  {
    "text": "relation between two users as you might guess there's a lot of you know you can create dynamically it",
    "start": "1839179",
    "end": "1844760"
  },
  {
    "text": "doesn't have to be users it can be other tables so the relation becomes really flexible by doing this",
    "start": "1844760",
    "end": "1852620"
  },
  {
    "text": "uh relations cannot be updated so if you don't think about it you like somebody or you don't like somebody so you cannot",
    "start": "1852620",
    "end": "1857659"
  },
  {
    "text": "go and actually change the from ID and to ID if you have other columns you can go change them but all you can do here",
    "start": "1857659",
    "end": "1864080"
  },
  {
    "text": "is insert or drop you cannot update from ID or to ID directions are important so as I said",
    "start": "1864080",
    "end": "1871580"
  },
  {
    "text": "before Alec likes Anna it doesn't mean that Anna likes a leg back so the direction is going to be important the",
    "start": "1871580",
    "end": "1877640"
  },
  {
    "text": "way that you are inserting the data and you are querying the data is important for graph database tables",
    "start": "1877640",
    "end": "1882919"
  },
  {
    "text": "as I said before you still need to use the T SQL the one of the main I guess",
    "start": "1882919",
    "end": "1889039"
  },
  {
    "text": "the function you need to learn is the match function match function actually goes in your where class and that's how",
    "start": "1889039",
    "end": "1895340"
  },
  {
    "text": "you are actually searching the graph database tables uh minimum you are going to need two",
    "start": "1895340",
    "end": "1901279"
  },
  {
    "text": "entities and one relation one entity needs to go to our entity by using a one relation table",
    "start": "1901279",
    "end": "1908539"
  },
  {
    "text": "and you're going to use the arrow character to figure out which direction we are going",
    "start": "1908539",
    "end": "1913700"
  },
  {
    "text": "and we are going to use the parenthesis to remark which table is a relation table because it can get confusing",
    "start": "1913700",
    "end": "1919820"
  },
  {
    "text": "sometimes we might have my five tables 10 tables and you might want to guess which table is a relational table so that kind of helps with you to help me",
    "start": "1919820",
    "end": "1926000"
  },
  {
    "text": "do that so here's an example we are still using the select statement and from as you can",
    "start": "1926000",
    "end": "1931580"
  },
  {
    "text": "see we have products users table as you might guess those are my entity tables and which is my relation table",
    "start": "1931580",
    "end": "1939620"
  },
  {
    "text": "so my match is actually going from users table to products table by using the wished relation and I'm looking only for",
    "start": "1939620",
    "end": "1947000"
  },
  {
    "text": "user id1 so this is going to return me user ID once wish list as you might guess",
    "start": "1947000",
    "end": "1954039"
  },
  {
    "text": "in 2017 we actually had some new features",
    "start": "1954080",
    "end": "1959260"
  },
  {
    "text": "included in the actually one it's 2019 2017 is introduced and constant actually",
    "start": "1959260",
    "end": "1966080"
  },
  {
    "text": "introduced on 2019. so if you look at this one for example we have a product and user table as you might Guess My",
    "start": "1966080",
    "end": "1972860"
  },
  {
    "text": "Relations should be going from users to products so my products should not buy a user or product shouldn't like a user so",
    "start": "1972860",
    "end": "1980000"
  },
  {
    "text": "to control that you can actually use the edge constraints as you can see you can add one what I'm",
    "start": "1980000",
    "end": "1987020"
  },
  {
    "text": "saying here is I want to add a constraint and my connection for which should be going from users to product",
    "start": "1987020",
    "end": "1994100"
  },
  {
    "text": "if you want to have multiple for the same one you can actually have you can call a couple of them add here and also",
    "start": "1994100",
    "end": "2001240"
  },
  {
    "text": "you can actually control what is going to happen if somebody is going to go and delete one of those users or product so",
    "start": "2001240",
    "end": "2009880"
  },
  {
    "text": "in this case for example if that happens and let's say my user one is disappeared somebody deleted all the relations will",
    "start": "2009880",
    "end": "2017860"
  },
  {
    "text": "be deleted automatically in SQL Server if you do on delete Cascade",
    "start": "2017860",
    "end": "2023019"
  },
  {
    "text": "or if you don't want anyone to delete anything then you can say on delete no",
    "start": "2023019",
    "end": "2028120"
  },
  {
    "text": "action then that means that they cannot actually delete anything if there's a relation between two entities",
    "start": "2028120",
    "end": "2035080"
  },
  {
    "text": "so that's pretty useful graph database tables still in SQL Server so we still need to worry about",
    "start": "2035080",
    "end": "2041200"
  },
  {
    "text": "indexes and from ID and 2id we are never going to use them in your where class but when",
    "start": "2041200",
    "end": "2047260"
  },
  {
    "text": "you actually kind of you are kind of using them by using the match function SQL Server actually handles it so it is",
    "start": "2047260",
    "end": "2052720"
  },
  {
    "text": "important that you actually create indexes on them so in here for example I am looking",
    "start": "2052720",
    "end": "2059260"
  },
  {
    "text": "just like the Amazon when you go scroll down Amazon shows you all you're looking",
    "start": "2059260",
    "end": "2064480"
  },
  {
    "text": "this product but I have some other products like this so you can do that easily at the graph database tables so",
    "start": "2064480",
    "end": "2069940"
  },
  {
    "text": "as you can see I'm going from my product table to product table by using a like product uh relation so that is going to",
    "start": "2069940",
    "end": "2077200"
  },
  {
    "text": "return all the elect products like product id1 so thanks to my indexes",
    "start": "2077200",
    "end": "2082780"
  },
  {
    "text": "actually you see index seek here without those indexes you are going to see a table scan and well things can get",
    "start": "2082780",
    "end": "2088780"
  },
  {
    "text": "really slow if you don't have indexes on those from ID and 2 ID in the relations relation tables",
    "start": "2088780",
    "end": "2096419"
  },
  {
    "text": "so this was the graph database tables and the third one I'm going to cover here is a memory optimized tables",
    "start": "2096879",
    "end": "2103180"
  },
  {
    "text": "there are two type of tables that you can actually create in memory in SQL server and the first one is drawable",
    "start": "2103180",
    "end": "2110260"
  },
  {
    "text": "tables the data first goes into memory then it goes to your disk so if a disaster",
    "start": "2110260",
    "end": "2117220"
  },
  {
    "text": "happens you still have the data and it will come back from disk to memory when the SQL Server comes back",
    "start": "2117220",
    "end": "2122940"
  },
  {
    "text": "the second option is a non-verbal tables which I have most of the experience with",
    "start": "2122940",
    "end": "2128460"
  },
  {
    "text": "in here the data is only exists in memory it never hits the i o or it never",
    "start": "2128460",
    "end": "2134500"
  },
  {
    "text": "hits a disk so as you might guess this is really fast and this is great if you want to Cache",
    "start": "2134500",
    "end": "2139900"
  },
  {
    "text": "the data this is great for session States you know for ETL data staging if you are doing in the ssis packages and",
    "start": "2139900",
    "end": "2146440"
  },
  {
    "text": "you get a lot of data you can actually do that by using the non-verbal tables",
    "start": "2146440",
    "end": "2151780"
  },
  {
    "text": "so you can really kind of compare that with the Reds in this pump in this moment really uh so indexes there are three type of",
    "start": "2151780",
    "end": "2159160"
  },
  {
    "text": "indexes you can actually create in in memory tables the first one is the hash index so this is like just like the",
    "start": "2159160",
    "end": "2165220"
  },
  {
    "text": "redis if you have the key you get the value so you can actually create a hash index on that and it will make that",
    "start": "2165220",
    "end": "2170859"
  },
  {
    "text": "pretty fast if you are looking which you cannot do in redis if you are actually querying",
    "start": "2170859",
    "end": "2176440"
  },
  {
    "text": "the data in memory you can use the non-cluster indexes and those are great for you know if your kind of inequality",
    "start": "2176440",
    "end": "2182440"
  },
  {
    "text": "order by or in any kind of like range fillers you can do that and column store indexes are available",
    "start": "2182440",
    "end": "2188380"
  },
  {
    "text": "only in the drawable function drawable tables and they kind of make things if",
    "start": "2188380",
    "end": "2194800"
  },
  {
    "text": "you are analyzing the data it will make things much faster",
    "start": "2194800",
    "end": "2199800"
  },
  {
    "text": "next one is the natively compile store procedures so that's so as you can guess",
    "start": "2201520",
    "end": "2207040"
  },
  {
    "text": "you know our data is in the memory already so it's pretty easy to access the data but we still have to kind of",
    "start": "2207040",
    "end": "2212680"
  },
  {
    "text": "worry about how to get the data uh with the you know the optimization uh going on in the middle",
    "start": "2212680",
    "end": "2218560"
  },
  {
    "text": "you can actually create a natively compiled store procedures so when you actually create the store procedure it",
    "start": "2218560",
    "end": "2223780"
  },
  {
    "text": "compiles it first time and it does all the optimization then actually it creates a small application and puts in",
    "start": "2223780",
    "end": "2229720"
  },
  {
    "text": "the memory so now you have the data in the memory you have the application which actually gets the data in the",
    "start": "2229720",
    "end": "2236500"
  },
  {
    "text": "memory so you really it cannot get faster than that I guess so this is great uh if you are you know a",
    "start": "2236500",
    "end": "2242800"
  },
  {
    "text": "performance critical applications you need a lot of things going on in the application you can actually use that if",
    "start": "2242800",
    "end": "2248200"
  },
  {
    "text": "you are doing aggregation that is great for that and if you need a lot of I guess many users",
    "start": "2248200",
    "end": "2254740"
  },
  {
    "text": "healing the same time that's great for them too so that's going to bring us to Json so",
    "start": "2254740",
    "end": "2261940"
  },
  {
    "text": "we've covered Json in the first part now actually you can actually create the Json in the memory tables especially in",
    "start": "2261940",
    "end": "2268359"
  },
  {
    "text": "the uh non-durable tables so you can actually cache and you can create a redis like",
    "start": "2268359",
    "end": "2273700"
  },
  {
    "text": "environment for free in SQL Server so on top of that you can actually",
    "start": "2273700",
    "end": "2279760"
  },
  {
    "text": "create the completed columns and you can actually query the Json documents that you have",
    "start": "2279760",
    "end": "2285640"
  },
  {
    "text": "so for that let's say we have usual that's what we even read this we have key on value you have to know the key to",
    "start": "2285640",
    "end": "2290859"
  },
  {
    "text": "get the value but in SQL Server you can use the Json value function and create",
    "start": "2290859",
    "end": "2296020"
  },
  {
    "text": "computed columns and let's say this is our object so I can easily create",
    "start": "2296020",
    "end": "2301839"
  },
  {
    "text": "different columns and that's going to be actually staying in my memory and I can query all this stuff that I cached in",
    "start": "2301839",
    "end": "2309760"
  },
  {
    "text": "the memory easily by using this now this was the presentation so I can",
    "start": "2309760",
    "end": "2315700"
  },
  {
    "text": "actually jump in and show you some demos",
    "start": "2315700",
    "end": "2319859"
  },
  {
    "text": "so the first demo I'm going to show you is going to be for graph database tables and I'm going to actually try to show",
    "start": "2327280",
    "end": "2332680"
  },
  {
    "text": "you that you know graph database tables actually handles all the other data types that we have in SQL Server so",
    "start": "2332680",
    "end": "2340119"
  },
  {
    "text": "let's actually see what we are doing here so the problem we are trying to fix here is let's say we are a company like",
    "start": "2340119",
    "end": "2348160"
  },
  {
    "text": "Amazon we have a lot of products we have many warehouses we have a lot of users buying stuff and let's say we are",
    "start": "2348160",
    "end": "2354280"
  },
  {
    "text": "sending uh shipping is free so it's pretty important that we are actually sending this products from the",
    "start": "2354280",
    "end": "2360820"
  },
  {
    "text": "closest Warehouse to the user so it will actually cost us the less amount of money so that's what we are trying to",
    "start": "2360820",
    "end": "2366400"
  },
  {
    "text": "fix here so to fix that problem first we need a table",
    "start": "2366400",
    "end": "2371619"
  },
  {
    "text": "for our products as you can see all I had to do to make the graph database",
    "start": "2371619",
    "end": "2376660"
  },
  {
    "text": "tables all I'm doing is I'm still using the create table syntax by just saying as node that makes the table a graph",
    "start": "2376660",
    "end": "2383500"
  },
  {
    "text": "table so it's really that easy to create a graph database table and so I have a product table which is",
    "start": "2383500",
    "end": "2389800"
  },
  {
    "text": "going to have all my products and I have warehouses",
    "start": "2389800",
    "end": "2397000"
  },
  {
    "text": "those are my warehouses so what you actually see here I have a geography data type that is the geospatial data",
    "start": "2397000",
    "end": "2405400"
  },
  {
    "text": "type SQL server has and since I know my warehouses I can easily find my latitude",
    "start": "2405400",
    "end": "2410980"
  },
  {
    "text": "and longitude and put it right there so I can make the decisions on there",
    "start": "2410980",
    "end": "2416040"
  },
  {
    "text": "next one is my users I'm going to list all my users here as you can see again I",
    "start": "2416040",
    "end": "2421420"
  },
  {
    "text": "have the geography here I don't really know exactly where my user is as long as I know where the city is I can get some",
    "start": "2421420",
    "end": "2427960"
  },
  {
    "text": "kind of estimate for it so that's the city geography that's why I have it",
    "start": "2427960",
    "end": "2434020"
  },
  {
    "text": "from here I have some well I need to create some uh relations now warehouses",
    "start": "2434020",
    "end": "2440980"
  },
  {
    "text": "are going to have products and that means I have that in stock relation table and all I'm gonna actually do here",
    "start": "2440980",
    "end": "2448119"
  },
  {
    "text": "is just create the table and put some index on it then",
    "start": "2448119",
    "end": "2453700"
  },
  {
    "text": "I am gonna need users are going to buy products as soon as they pay the money",
    "start": "2453700",
    "end": "2458920"
  },
  {
    "text": "I'm gonna actually create a row in here that's going to be in process it's going to be between the users and products",
    "start": "2458920",
    "end": "2466300"
  },
  {
    "text": "and as you can see I'm actually adding a new column here sold on that is the time that actual transaction happened",
    "start": "2466300",
    "end": "2474059"
  },
  {
    "text": "so from here I'm just gonna use insert statement nothing is different here especially for the node tables I'm just",
    "start": "2474339",
    "end": "2480820"
  },
  {
    "text": "putting some products in it some users in it in my users table as you can see that's how you",
    "start": "2480820",
    "end": "2487359"
  },
  {
    "text": "uh declare geography here this is latitude and longitude and from here this is my warehouses",
    "start": "2487359",
    "end": "2496420"
  },
  {
    "text": "and I'm creating a couple of Instax so those are the products I have in warehouses those are the relations so I",
    "start": "2496420",
    "end": "2503920"
  },
  {
    "text": "guess let's look at this one here so it's the insert statement as you can see this is my node ID",
    "start": "2503920",
    "end": "2509020"
  },
  {
    "text": "from the warehouse and this is my node ID from product so that's the from ID and two ID that's how the relation is",
    "start": "2509020",
    "end": "2515619"
  },
  {
    "text": "getting created there so let's continue here it's going to create a bunch of in stock so those are",
    "start": "2515619",
    "end": "2521859"
  },
  {
    "text": "my products in warehouses and the next one is the in-process",
    "start": "2521859",
    "end": "2527200"
  },
  {
    "text": "so these are the products I sold by those users and I'm",
    "start": "2527200",
    "end": "2533140"
  },
  {
    "text": "petting the get data out there because that's the date that is solder I had that column there so I'm just going to put all this data",
    "start": "2533140",
    "end": "2539800"
  },
  {
    "text": "that's the first part of this demo let's see and let's run it",
    "start": "2539800",
    "end": "2547740"
  },
  {
    "text": "now I have my data in my tables the next I'm going to actually go and look at the",
    "start": "2549280",
    "end": "2556720"
  },
  {
    "text": "data so I had two queries here I'm going to run the inner query first then so you can actually see what I have here what",
    "start": "2556720",
    "end": "2562839"
  },
  {
    "text": "I'm doing here is SD distance is a geospatial function of SQL server and all it does is it finds",
    "start": "2562839",
    "end": "2570760"
  },
  {
    "text": "where the city is and find the distance between City and the warehouse location and I'm just dividing this number that",
    "start": "2570760",
    "end": "2578260"
  },
  {
    "text": "gives me miles my default it gives me meters so that's the first function I'm using",
    "start": "2578260",
    "end": "2584800"
  },
  {
    "text": "and I am using some window functions here and my match is going from users",
    "start": "2584800",
    "end": "2592000"
  },
  {
    "text": "table to the products table by finding what is sold in the same time",
    "start": "2592000",
    "end": "2597940"
  },
  {
    "text": "as you can see my direction is going this way and I can still continue there other direction is going from the",
    "start": "2597940",
    "end": "2603760"
  },
  {
    "text": "warehouse to the products table by using the in stock so that's actually fine all",
    "start": "2603760",
    "end": "2610599"
  },
  {
    "text": "the salt products that I have in warehouses with all the distance that with the SC distance",
    "start": "2610599",
    "end": "2617140"
  },
  {
    "text": "function so if I run this one you're gonna see",
    "start": "2617140",
    "end": "2622420"
  },
  {
    "text": "we have a user named George he lives in Virginia Beach and he bought 27 inch",
    "start": "2622420",
    "end": "2628599"
  },
  {
    "text": "monitor and those are the warehouses I have those 207 inch monitors and by",
    "start": "2628599",
    "end": "2635380"
  },
  {
    "text": "sorting by the miles which comes up from the St distance here I can tell that the is the closest one is in Minnesota so if",
    "start": "2635380",
    "end": "2642220"
  },
  {
    "text": "I actually send this from Minnesota that will be the cheapest way for me to actually send it so all I need to do",
    "start": "2642220",
    "end": "2649180"
  },
  {
    "text": "here is since I'm using the window function I am actually sorting by the",
    "start": "2649180",
    "end": "2654220"
  },
  {
    "text": "priority and the miles here all I have to do is go and get the number one for",
    "start": "2654220",
    "end": "2659260"
  },
  {
    "text": "each so that's going to give me all the items that I sold and where I",
    "start": "2659260",
    "end": "2665740"
  },
  {
    "text": "should actually send them from as you can see",
    "start": "2665740",
    "end": "2671319"
  },
  {
    "text": "those items should go from these warehouses as you can see I didn't use any AI I didn't use any kind",
    "start": "2671319",
    "end": "2678099"
  },
  {
    "text": "of smarting all I use is graph database tables and available data types of SQL server and I'm able to kind of make",
    "start": "2678099",
    "end": "2684280"
  },
  {
    "text": "smart decisions with my business by doing this",
    "start": "2684280",
    "end": "2689500"
  },
  {
    "text": "so that was the first demo the second one is large data so what actually happens",
    "start": "2689500",
    "end": "2696280"
  },
  {
    "text": "usually when I show that to dbas they say that oh listen you're cute you have only 10 rows out there what happens here",
    "start": "2696280",
    "end": "2702220"
  },
  {
    "text": "if you have a million two million three million I was like well that's a good question let's see what's going to happen so I'm not going to run the whole script",
    "start": "2702220",
    "end": "2709420"
  },
  {
    "text": "here because it takes a long time but what I did here is I get the stack overflows database and put in here I",
    "start": "2709420",
    "end": "2716560"
  },
  {
    "text": "create my own kind of graph database a schema for it so let's see how many actually rows we",
    "start": "2716560",
    "end": "2724300"
  },
  {
    "text": "have so those are while you know statements I kind of write so let's see those are the items I",
    "start": "2724300",
    "end": "2731319"
  },
  {
    "text": "created by looking the stack overflow and as you can see now I have",
    "start": "2731319",
    "end": "2737980"
  },
  {
    "text": "almost 1.1 million questions I have 2.6 and 2.6 million answers",
    "start": "2737980",
    "end": "2744119"
  },
  {
    "text": "and all of the questions are answered by the answered queue and I have a good",
    "start": "2744119",
    "end": "2750640"
  },
  {
    "text": "amount of my I guess the good amount of questions here so now if I try to I guess query my data",
    "start": "2750640",
    "end": "2757420"
  },
  {
    "text": "let's see what's going to happen so the first one here is actually going from my users table",
    "start": "2757420",
    "end": "2762700"
  },
  {
    "text": "going to the questions table and by looking the ask relation so that's going to find all the questions asked by user",
    "start": "2762700",
    "end": "2769900"
  },
  {
    "text": "id1 and we have a good amount of data here if I run it still zero seconds so it was",
    "start": "2769900",
    "end": "2778060"
  },
  {
    "text": "almost the same one with the 5 or 10 rows and this is my personal computer to place another server so so far so good",
    "start": "2778060",
    "end": "2786280"
  },
  {
    "text": "if you want we can actually make this event I guess more complex so we are looking all the answers here",
    "start": "2786280",
    "end": "2793240"
  },
  {
    "text": "let's find all the questions asked by the user and I'm continue out there and",
    "start": "2793240",
    "end": "2798339"
  },
  {
    "text": "I'm just saying also give me all the answers for question ID 11 for this user that I'm looking for",
    "start": "2798339",
    "end": "2804040"
  },
  {
    "text": "so this is more kind of complex and if I run that still zero seconds",
    "start": "2804040",
    "end": "2812220"
  },
  {
    "text": "so that is a demo for the large I guess database and the next one which",
    "start": "2812859",
    "end": "2818500"
  },
  {
    "text": "I did not color is another function of SQL Server which is the shortest path so",
    "start": "2818500",
    "end": "2824500"
  },
  {
    "text": "now I think you understand you know we had the graph tables we have entities and there's relations between each",
    "start": "2824500",
    "end": "2830440"
  },
  {
    "text": "entities and there's we call those hubs so if you know if you want to kind of",
    "start": "2830440",
    "end": "2836319"
  },
  {
    "text": "know what is the relation between two entities you can actually use the shortest path and it will give you the the shortest way to actually reach to",
    "start": "2836319",
    "end": "2842560"
  },
  {
    "text": "that data from this data to the other data so that's mostly good for the data science and if you have like any kind of",
    "start": "2842560",
    "end": "2848680"
  },
  {
    "text": "fraud or anything like that this can kind of give you all the relations easily so it's not that easy to demo this one",
    "start": "2848680",
    "end": "2856119"
  },
  {
    "text": "so the best I came up with is let's say we have people that's my node table and",
    "start": "2856119",
    "end": "2862359"
  },
  {
    "text": "I have a relation table friend so we know this person is friend with this person",
    "start": "2862359",
    "end": "2867460"
  },
  {
    "text": "so that's what I am creating here first so let's actually create that so I have a bunch of people and a bunch of people",
    "start": "2867460",
    "end": "2874420"
  },
  {
    "text": "knows each other that's what I'm creating here so let's have the data first",
    "start": "2874420",
    "end": "2881079"
  },
  {
    "text": "then I am going to use this shortest uh pet function this came up with the",
    "start": "2881079",
    "end": "2889720"
  },
  {
    "text": "2019 by the way so I'm gonna run first the",
    "start": "2889720",
    "end": "2895060"
  },
  {
    "text": "inner query so what I'm trying to do here is we have a user named George likes to meet Lisa",
    "start": "2895060",
    "end": "2902500"
  },
  {
    "text": "but we don't know how what is the shortest path for George to actually go and meet Lisa so there are many people",
    "start": "2902500",
    "end": "2908560"
  },
  {
    "text": "in the between so if I am gonna run this one here as you can see",
    "start": "2908560",
    "end": "2913960"
  },
  {
    "text": "this is all the data we have for George so George knows Bob George knows Bob and",
    "start": "2913960",
    "end": "2919359"
  },
  {
    "text": "Bob knows Katie so as you can see this is the last note uh I have So Lisa is here so the shortest path for George to",
    "start": "2919359",
    "end": "2927099"
  },
  {
    "text": "meet Lisa he has to go to Bob Bob needs to introduced him to Katie Academy to introduce him to Mike and Mike needs to",
    "start": "2927099",
    "end": "2933579"
  },
  {
    "text": "introduced him to Lisa so that actually finds the shortest path between the entities",
    "start": "2933579",
    "end": "2939720"
  },
  {
    "text": "uh that's the so if I actually run this one it's just gonna show you the",
    "start": "2939720",
    "end": "2944980"
  },
  {
    "text": "shortest pet it's gonna just take everything out from there now",
    "start": "2944980",
    "end": "2950859"
  },
  {
    "text": "data changes right that was the whole kind of my I guess selling point to you data changes well shortest pad is great",
    "start": "2950859",
    "end": "2957940"
  },
  {
    "text": "with that so if I'm gonna actually introduce more people here",
    "start": "2957940",
    "end": "2963339"
  },
  {
    "text": "and run this again I'll actually run let's run the whole thing so you can see the difference",
    "start": "2963339",
    "end": "2970119"
  },
  {
    "text": "well now I had another person here I think I write the text here so I introduce Bob to Ted",
    "start": "2970119",
    "end": "2978940"
  },
  {
    "text": "and Ted knows listen so now my shortest path actually knows that rather than going this way well if",
    "start": "2978940",
    "end": "2985060"
  },
  {
    "text": "he goes to Bob and Bob plus 10 then he can introduce to Lisa from that way",
    "start": "2985060",
    "end": "2991000"
  },
  {
    "text": "so that's the shortest path it's unfortunately it's not that easy to kind of understand what's going on here because you can see there is all kind of",
    "start": "2991000",
    "end": "2997900"
  },
  {
    "text": "attributes here we have to use this is really like a group pie almost in the graph database environment",
    "start": "2997900",
    "end": "3005400"
  },
  {
    "text": "and we are still using the match here so let's see the next one I am going to",
    "start": "3005400",
    "end": "3012660"
  },
  {
    "text": "share with you is indexing so",
    "start": "3012660",
    "end": "3018240"
  },
  {
    "text": "I talk about the Json and indexing is important for it so there are two type of indexes you can do in the Json so in",
    "start": "3018240",
    "end": "3025200"
  },
  {
    "text": "here for example I'm creating a very uh simple redis like almost uh schema I",
    "start": "3025200",
    "end": "3032760"
  },
  {
    "text": "have an ID and usually you have a summary so in here I'm just putting I",
    "start": "3032760",
    "end": "3038760"
  },
  {
    "text": "need to know the ID to get what uh what the summary is summary is the uh Json",
    "start": "3038760",
    "end": "3045000"
  },
  {
    "text": "and let's say we had a lot of data so I'm going to insert 8 million documents",
    "start": "3045000",
    "end": "3050280"
  },
  {
    "text": "in two tables one of them is going to has a regular index non-clustered index the other one is",
    "start": "3050280",
    "end": "3057839"
  },
  {
    "text": "going to have column store index which is going to actually compress the data and it's going to be much better to",
    "start": "3057839",
    "end": "3063900"
  },
  {
    "text": "actually analyze your Json documents with the CCI column store index",
    "start": "3063900",
    "end": "3069420"
  },
  {
    "text": "now I'm not going to run that because that runs long time so that's what I'm doing here I'm just inserting the 8",
    "start": "3069420",
    "end": "3075660"
  },
  {
    "text": "million documents here so I'm all I'm going to show you here is how much space",
    "start": "3075660",
    "end": "3081599"
  },
  {
    "text": "they actually take the first one has non-clustered index on",
    "start": "3081599",
    "end": "3087480"
  },
  {
    "text": "it and it's I have almost 8 million rows in it 8 million Json documents and",
    "start": "3087480",
    "end": "3094619"
  },
  {
    "text": "really it takes I think 5.7 gig of data",
    "start": "3094619",
    "end": "3100500"
  },
  {
    "text": "if I'm going to put the CCI on it which is a column store index it might look similar but this is",
    "start": "3100500",
    "end": "3107579"
  },
  {
    "text": "Healthcare it's not 5G anymore you are actually saving 10 times compress on",
    "start": "3107579",
    "end": "3114300"
  },
  {
    "text": "this so you are saving a lot of storage and if you are doing any kind of analyzing like finding the minimum",
    "start": "3114300",
    "end": "3120420"
  },
  {
    "text": "maximum other stuff CCI will help you a lot because now it doesn't have to go and find you know read the five gig of",
    "start": "3120420",
    "end": "3126960"
  },
  {
    "text": "data it can actually do it much faster because I O is going to be much I guess less pressure on the SQL Server",
    "start": "3126960",
    "end": "3135559"
  },
  {
    "text": "and we talk about the redis if you want to create a redis like environment in SQL Server it's pretty easy by using",
    "start": "3137099",
    "end": "3144660"
  },
  {
    "text": "the native store procedures so in here as you can see I am creating a memory table here and I have the key this is my",
    "start": "3144660",
    "end": "3154140"
  },
  {
    "text": "value and I have some other uh items here I can use to actually clear my cache if I want to or expire the cash so",
    "start": "3154140",
    "end": "3163980"
  },
  {
    "text": "the first thing I need is a store procedure to load the data so as you can see I am just creating it here all I'm",
    "start": "3163980",
    "end": "3171000"
  },
  {
    "text": "passing my key just like redis and this Returns the data whatever I'm looking for",
    "start": "3171000",
    "end": "3176520"
  },
  {
    "text": "so in here as I say before this is going to actually go in the memory too so this",
    "start": "3176520",
    "end": "3183180"
  },
  {
    "text": "is going to actually compile the application and put in the memory so your data is going to be Memory application is in the memory and it's",
    "start": "3183180",
    "end": "3189240"
  },
  {
    "text": "going to be much easier to get the data and much faster to get the data in this way so that's loading the data to insert the",
    "start": "3189240",
    "end": "3195720"
  },
  {
    "text": "data I'm just creating another store procedure as you can see I'm just passing the key and value this is still",
    "start": "3195720",
    "end": "3201660"
  },
  {
    "text": "in the memory so everything is fast and I need something to actually you know expire expiration and redis has that so",
    "start": "3201660",
    "end": "3208740"
  },
  {
    "text": "to do that I am just creating a trigger here cache expression and this is going",
    "start": "3208740",
    "end": "3214260"
  },
  {
    "text": "to get uh triggered every time I insert and update something so this is going to actually clear the cache so you are",
    "start": "3214260",
    "end": "3222359"
  },
  {
    "text": "really creating like almost like a red dislike in a SQL Server the best part is",
    "start": "3222359",
    "end": "3227700"
  },
  {
    "text": "you can actually query the data in SQL server with the Json value Json query functions",
    "start": "3227700",
    "end": "3234359"
  },
  {
    "text": "but I believe that was the last demo I have for you and I hope everybody learns",
    "start": "3234359",
    "end": "3240480"
  },
  {
    "text": "something new if you have any questions I'll be more than happy to answer them let me actually put my connections here",
    "start": "3240480",
    "end": "3246480"
  },
  {
    "text": "so you can see it but thank you for coming to my session [Applause]",
    "start": "3246480",
    "end": "3259129"
  },
  {
    "text": "yeah the related questions",
    "start": "3260160",
    "end": "3265700"
  },
  {
    "text": "craft tables and we have a good way to use the",
    "start": "3265859",
    "end": "3272760"
  },
  {
    "text": "important draft table unfortunately no I don't know any orms right now are using",
    "start": "3272760",
    "end": "3278040"
  },
  {
    "text": "them mostly because of when you are inserting the relations table because you know you have to actually query two tables to insert one row so I think",
    "start": "3278040",
    "end": "3285119"
  },
  {
    "text": "that's where the problem is but I don't know anywhere I am right now can handle that in SQL Server",
    "start": "3285119",
    "end": "3292460"
  },
  {
    "text": "but it's a good way to use both the relational",
    "start": "3293460",
    "end": "3298400"
  },
  {
    "text": "yep yeah you might need to create a store procedure for that and run that one but",
    "start": "3298980",
    "end": "3304559"
  },
  {
    "text": "without that",
    "start": "3304559",
    "end": "3307760"
  },
  {
    "text": "or you can use a four Json the one that I show you actually if you get rid of the orm and use a four Json the data as",
    "start": "3311160",
    "end": "3318180"
  },
  {
    "text": "comes as Json it can just automatically I guess map it for you",
    "start": "3318180",
    "end": "3323720"
  },
  {
    "text": "all right thank you very much thank you",
    "start": "3330480",
    "end": "3337280"
  }
]