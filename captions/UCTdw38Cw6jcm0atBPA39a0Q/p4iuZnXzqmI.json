[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "okay this is building useful project details with Python my name is Johan",
    "start": "4899",
    "end": "11420"
  },
  {
    "text": "Harlan I work as a software engineer at Cisco in Norway I work on some",
    "start": "11420",
    "end": "16490"
  },
  {
    "text": "application level programming but also do more underlying platform work version",
    "start": "16490",
    "end": "21980"
  },
  {
    "text": "control build systems developer tools all the stuff that makes our main application run successfully on our",
    "start": "21980",
    "end": "29619"
  },
  {
    "text": "software platform for this talk I'm going to assume that you have some basic",
    "start": "29619",
    "end": "36530"
  },
  {
    "start": "32000",
    "end": "32000"
  },
  {
    "text": "familiarity with UNIX shell scripting bash is the typical language used but",
    "start": "36530",
    "end": "42290"
  },
  {
    "text": "they're all very similar and I'm also going to assume that you have some familiarity with Python 3 if your",
    "start": "42290",
    "end": "47479"
  },
  {
    "text": "experience is mostly in Python 2 that also works some of these things are not available in Python 2 you can usually",
    "start": "47479",
    "end": "54110"
  },
  {
    "text": "find alternatives there but python 3 is where the future of python lies anyway so that's what I'm going to concentrate",
    "start": "54110",
    "end": "59960"
  },
  {
    "text": "on so I'm gonna start with some motivation of this talk what shell",
    "start": "59960",
    "end": "65990"
  },
  {
    "text": "scripts are we talking about what are shell scripts good for why is Python all almost always better then I'm going to",
    "start": "65990",
    "end": "73670"
  },
  {
    "text": "go through the conversion from a shell script to Python some tips and",
    "start": "73670",
    "end": "80479"
  },
  {
    "text": "techniques you could use how you organize your code how to write good command-line interfaces in Python how to",
    "start": "80479",
    "end": "87439"
  },
  {
    "text": "run other programs from Python because that's usually what you do from a shell script how to manipulate the file system",
    "start": "87439",
    "end": "92719"
  },
  {
    "text": "from Python another common shell scripting also I'm going to talk a little bit about writing unit tests in",
    "start": "92719",
    "end": "99020"
  },
  {
    "text": "Python and that's typically not something unit testing something you do in shell scripts but that's one of the",
    "start": "99020",
    "end": "105469"
  },
  {
    "text": "big advantages with moving to Python you can start doing this so I have a slightly controversial take on error",
    "start": "105469",
    "end": "110719"
  },
  {
    "text": "handling that I'll talk about and then I'm gonna move into a case study of a real world shell script that I rewrote",
    "start": "110719",
    "end": "116329"
  },
  {
    "text": "into Python and at Cisco and how I first",
    "start": "116329",
    "end": "122990"
  },
  {
    "text": "of all how I needed to do that because I need to add features that would have been impossible in shell but just walking through the process and then",
    "start": "122990",
    "end": "129410"
  },
  {
    "text": "some summary and some room for questions at the end hopefully so",
    "start": "129410",
    "end": "135300"
  },
  {
    "start": "135000",
    "end": "135000"
  },
  {
    "text": "what kind of scripts are we talking about here I sort of informally termed",
    "start": "135300",
    "end": "140790"
  },
  {
    "text": "this the glue that holds your project together if you go into your codebase you'll almost always find bunch of shell",
    "start": "140790",
    "end": "146850"
  },
  {
    "text": "scripts lying around everywhere there might be developer tools so like you",
    "start": "146850",
    "end": "152250"
  },
  {
    "text": "have some complex command that is part of your workflow and instead of remembering the whole command you",
    "start": "152250",
    "end": "157920"
  },
  {
    "text": "basically just put that into a shell script and you just run the shell script instead and so this could be for like running profiling or just helping you",
    "start": "157920",
    "end": "165780"
  },
  {
    "text": "with deploying your changes through the build process onto your embedded product",
    "start": "165780",
    "end": "171270"
  },
  {
    "text": "or whatever you're making shell scripts are often used at Build time as well if you have a very simple project maybe",
    "start": "171270",
    "end": "178230"
  },
  {
    "text": "your whole build system is a shell script but generally you have a more",
    "start": "178230",
    "end": "183720"
  },
  {
    "text": "complex build system and if you say auto generate code or you need some kind of",
    "start": "183720",
    "end": "189510"
  },
  {
    "text": "helper for some part of your build system that might be implemented in the shell scripts people often use shell",
    "start": "189510",
    "end": "196140"
  },
  {
    "text": "scripts for packaging deployment and release publishing your assets to some",
    "start": "196140",
    "end": "201330"
  },
  {
    "text": "server where they're well built your customer signing release images if you're doing that kind of things and at",
    "start": "201330",
    "end": "208950"
  },
  {
    "text": "the end in production and your customer like if you're shipping a product that product itself might have shell scripts",
    "start": "208950",
    "end": "214830"
  },
  {
    "text": "running on it so your shell scripts basically running in at your customer",
    "start": "214830",
    "end": "221160"
  },
  {
    "text": "site as well so shell scripts like we use them all the time so they must be",
    "start": "221160",
    "end": "226680"
  },
  {
    "text": "good for something well they are real good for short and simple stuff if your logic is straightforward and you don't",
    "start": "226680",
    "end": "232830"
  },
  {
    "text": "have any date structures yes shell scripts is a really good solution it helps you to take say a complex command",
    "start": "232830",
    "end": "239400"
  },
  {
    "text": "or a few commands and wrap them into a nice little wrapper and you don't have to remember all this stuff inside",
    "start": "239400",
    "end": "245750"
  },
  {
    "text": "but once shell script starts growing if you add more and more logic to them if",
    "start": "245750",
    "end": "252000"
  },
  {
    "text": "you need some data structures in there if you need some configurability say",
    "start": "252000",
    "end": "257340"
  },
  {
    "text": "from the command line and if you start refactoring things into functions to",
    "start": "257340",
    "end": "262620"
  },
  {
    "text": "make them reusable yeah it supports some of that but it quickly becomes",
    "start": "262620",
    "end": "268070"
  },
  {
    "text": "horrible mess basically if you open the shell script and it's longer than a screen full of text it takes quite a bit",
    "start": "268070",
    "end": "275300"
  },
  {
    "text": "of motivation to actually get into it and understand what it does because it has quite a esoteric syntax something",
    "start": "275300",
    "end": "281060"
  },
  {
    "text": "sometimes and also as your shell scripts grow you'll run into safety problems",
    "start": "281060",
    "end": "286550"
  },
  {
    "text": "pretty soon you have to be very disciplined as a shell script programmer to write this a safe shell script code",
    "start": "286550",
    "end": "292660"
  },
  {
    "text": "I'll look at some some more examples here soon so why is Python any better so",
    "start": "292660",
    "end": "300830"
  },
  {
    "text": "I'm just going to do a quick comparison between shell and Python so for shell you have a fairly easy",
    "start": "300830",
    "end": "307790"
  },
  {
    "start": "304000",
    "end": "304000"
  },
  {
    "text": "syntax it's very similar to what you know from the command line works so if you if you used to working on the",
    "start": "307790",
    "end": "313010"
  },
  {
    "text": "command line those skills are transferable into a shell script because it's basically just commands one command after another one so it's easy to become",
    "start": "313010",
    "end": "320510"
  },
  {
    "text": "product productive but the complexity like once once you write more and more complex shell scripts that basically",
    "start": "320510",
    "end": "326750"
  },
  {
    "text": "become write only scripts it's really really hard to read them you write them once and then if you have to make changes that's how that's hard but shell",
    "start": "326750",
    "end": "336620"
  },
  {
    "text": "has one thing going for it it's it's trivial to run all the programs for shell and that's basically how shell scripts are the whole reason for shell",
    "start": "336620",
    "end": "344210"
  },
  {
    "text": "scripts because shell itself is a very very minimal language you don't have much in in terms of utilities available",
    "start": "344210",
    "end": "351350"
  },
  {
    "text": "in the language itself it's all about running your other system utilities to",
    "start": "351350",
    "end": "357050"
  },
  {
    "text": "get stuff done it's fairly or reasonably easy to learn shell because you can",
    "start": "357050",
    "end": "363590"
  },
  {
    "text": "search online and you can find lots of resources and examples but a lot of the shell scripts you find online are not",
    "start": "363590",
    "end": "369290"
  },
  {
    "text": "always of any good quality and here is my favorite sort of safety feature there",
    "start": "369290",
    "end": "374600"
  },
  {
    "text": "are more safety problems in shell but this is the most common one so we have this file name variable and we set it to this file name and then",
    "start": "374600",
    "end": "381290"
  },
  {
    "text": "we try to touch that file name well what you'll actually end up here is you're going to touch three files you're going",
    "start": "381290",
    "end": "386540"
  },
  {
    "text": "to touch one file called my another file called favorite and a third file called quotations dot txt because this is what",
    "start": "386540",
    "end": "393200"
  },
  {
    "text": "shell does shell don't do types of variables and and string handling very",
    "start": "393200",
    "end": "399380"
  },
  {
    "text": "well especially in once you move out of the scope of eight",
    "start": "399380",
    "end": "405349"
  },
  {
    "text": "character long filenames without spaces and yeah like there are lots of pitfalls in shell scripts on the other hand",
    "start": "405349",
    "end": "413149"
  },
  {
    "text": "Python has a very simple and beginner friendly syntax the the learning curve for Python is is fairly shallow in that",
    "start": "413149",
    "end": "421069"
  },
  {
    "text": "you can get productive quickly with a very small subset of language lots of people consider PI's in one of",
    "start": "421069",
    "end": "427550"
  },
  {
    "text": "the most readable languages it's not as trivial to run other programs from",
    "start": "427550",
    "end": "433189"
  },
  {
    "text": "Python as it is from shell but it's fairly easy and I'm gonna walk through some of those ways",
    "start": "433189",
    "end": "438680"
  },
  {
    "text": "it definitely has fewer pitfalls than shell you don't have to worry about this our strings are treated in this way and",
    "start": "438680",
    "end": "445399"
  },
  {
    "text": "you have to keep that in mind when you write these scripts there's lots of",
    "start": "445399",
    "end": "450439"
  },
  {
    "text": "literature and resources online to learn Python and when you find a Python example like Patton has a fairly good",
    "start": "450439",
    "end": "456369"
  },
  {
    "text": "consistent style to it and the examples you find online are usually in my",
    "start": "456369",
    "end": "463669"
  },
  {
    "text": "opinion at least or in my experience there are a better quality than the example shell scripts you find online",
    "start": "463669",
    "end": "469779"
  },
  {
    "text": "data structures and types so in shell everything is a string Y space as I said",
    "start": "469779",
    "end": "475699"
  },
  {
    "start": "470000",
    "end": "470000"
  },
  {
    "text": "in values of cost problems and you must be very careful when dealing with variables and their values in shell",
    "start": "475699",
    "end": "481269"
  },
  {
    "text": "there is some support for integer arithmetic and some support for IRAs especially if you move into the more",
    "start": "481269",
    "end": "486769"
  },
  {
    "text": "advanced shell scripting languages like bash but if you want to stay to a common subset there are very limited things you",
    "start": "486769",
    "end": "492919"
  },
  {
    "text": "can do and I found this quote from the advanced bash scripting guide which i think is gold",
    "start": "492919",
    "end": "498050"
  },
  {
    "text": "unlike many and especially at a conference like this where there is lots of C++ and also high-level talks about",
    "start": "498050",
    "end": "503659"
  },
  {
    "text": "advanced types and how to basically build good type systems this is this is",
    "start": "503659",
    "end": "508759"
  },
  {
    "text": "so so different unlike many other programming languages bash does not segregate its variables by tight",
    "start": "508759",
    "end": "514180"
  },
  {
    "text": "essentially bash variables are character strings but depending on context bash permits arithmetic operations and",
    "start": "514180",
    "end": "519860"
  },
  {
    "text": "comparisons on variables the determining factor is whether the value of a variable contains only digits so that's",
    "start": "519860",
    "end": "526970"
  },
  {
    "text": "a fairly fresh take on the whole concept of types when you come from something like C++ for example Python on the other",
    "start": "526970",
    "end": "534589"
  },
  {
    "text": "hand a very dynamic dynamically typed in that variable doesn't you don't specify the",
    "start": "534589",
    "end": "540840"
  },
  {
    "text": "type of variable and it has to stay that way you do have type limitations in in",
    "start": "540840",
    "end": "548430"
  },
  {
    "text": "modern Python but I'm not going to cover that here it's dynamically typed but it's also strongly typed when python has",
    "start": "548430",
    "end": "554760"
  },
  {
    "text": "determined the type of variable python is fairly strict about handling that",
    "start": "554760",
    "end": "559950"
  },
  {
    "text": "type it's not like integers to suddenly turn into strings or strings turn into integers or you can concatenate a",
    "start": "559950",
    "end": "566400"
  },
  {
    "text": "floating-point value with a string like you can in JavaScript for example and I",
    "start": "566400",
    "end": "573240"
  },
  {
    "text": "find this a fairly good balance in Python it allows you to do a lot of things very easily but still Python will",
    "start": "573240",
    "end": "580470"
  },
  {
    "text": "prevent you from doing a lot of easy mistakes that you can do when you have a",
    "start": "580470",
    "end": "586440"
  },
  {
    "text": "weakly typed language you have a fair amount of built-in types you have the",
    "start": "586440",
    "end": "592320"
  },
  {
    "text": "usual numerix in floating complex you have sequences you have lists and tuples and ranges you have text and binary data",
    "start": "592320",
    "end": "599730"
  },
  {
    "text": "sets and dict which is the mapping type dictionary and then you have other types",
    "start": "599730",
    "end": "605610"
  },
  {
    "text": "as well basically in in Python everything is an object so even your modules that you've write in Python your",
    "start": "605610",
    "end": "610950"
  },
  {
    "text": "closest close instances functions methods yeah exceptions everything is an object and it's very dynamic you can",
    "start": "610950",
    "end": "616710"
  },
  {
    "text": "introspect through the language and look up say I imported this module can I III can now loop through the various",
    "start": "616710",
    "end": "624360"
  },
  {
    "text": "functions I were available for from that module for example modularity so when",
    "start": "624360",
    "end": "631800"
  },
  {
    "start": "628000",
    "end": "628000"
  },
  {
    "text": "you write the shell you can structure your shell scripts with functions the",
    "start": "631800",
    "end": "639780"
  },
  {
    "text": "scoping behavior of functions decels shell scripts are not always obvious there are some weird rules where",
    "start": "639780",
    "end": "646740"
  },
  {
    "text": "variables are global by default for example so if you run a function and there it modifies variable internally",
    "start": "646740",
    "end": "652980"
  },
  {
    "text": "that might actually modify some global variable and you might not expect that depending on how much experience you",
    "start": "652980",
    "end": "658830"
  },
  {
    "text": "have with shell scripts if you're talking about modularity between files basically putting your code into",
    "start": "658830",
    "end": "665610"
  },
  {
    "text": "different shell scripts and and accessing it you can exit in two ways you can either",
    "start": "665610",
    "end": "670800"
  },
  {
    "text": "from one shell script directly invoke another shell script as a basically as a separate process or you can use the",
    "start": "670800",
    "end": "679080"
  },
  {
    "text": "source statement or in some some dialects basically simply a dot so when",
    "start": "679080",
    "end": "685230"
  },
  {
    "text": "you just call a shell script you basically run it as a separate process but when you use the source you can think of that as a hash included",
    "start": "685230",
    "end": "690899"
  },
  {
    "text": "basically the source of that shell script is run within the context of your shell script so if that's a super",
    "start": "690899",
    "end": "697260"
  },
  {
    "text": "variable you can now access that variable from your script but if you",
    "start": "697260",
    "end": "702930"
  },
  {
    "text": "write a script to be sourced by another script well a script cannot easily",
    "start": "702930",
    "end": "708570"
  },
  {
    "text": "figure out whether it has been sourced by a different script or whether it was just called from the command line or",
    "start": "708570",
    "end": "713580"
  },
  {
    "text": "call from somewhere else so typically when you write the script you either write it as a list of instructions to be",
    "start": "713580",
    "end": "720779"
  },
  {
    "text": "performed and there might be some functions for refactoring your functionality out of there or you write",
    "start": "720779",
    "end": "725820"
  },
  {
    "text": "it simply as a bag of functions that if you run just run it it does nothing except declare those functions and maybe",
    "start": "725820",
    "end": "731430"
  },
  {
    "text": "some variables and it's basically intended just for being sourced by all the shell scripts which which then",
    "start": "731430",
    "end": "737220"
  },
  {
    "text": "contain your your main functionality in Python so within a Python file you can",
    "start": "737220",
    "end": "746040"
  },
  {
    "text": "structure code into functions but you also have classes and you have proper data structures so this allows you to",
    "start": "746040",
    "end": "753150"
  },
  {
    "text": "basically factor your code in into a form that is most suitable for what",
    "start": "753150",
    "end": "759000"
  },
  {
    "text": "you're trying to express between files you can access Python files in in in two",
    "start": "759000",
    "end": "765390"
  },
  {
    "text": "ways I basically put import first here because that's what you're going to do",
    "start": "765390",
    "end": "770850"
  },
  {
    "text": "the most often so import you could think of that as like source in in shell in",
    "start": "770850",
    "end": "776400"
  },
  {
    "text": "that your Python program gets direct access to a different Python file but it",
    "start": "776400",
    "end": "783900"
  },
  {
    "text": "has proper namespaces so if like if I source a shell script here from some",
    "start": "783900",
    "end": "789329"
  },
  {
    "text": "other shell script and it's declares a variable foo that variable foo is now directly in my namespace",
    "start": "789329",
    "end": "795180"
  },
  {
    "text": "there is no concept of separate namespaces but in Python if I import the module then",
    "start": "795180",
    "end": "801760"
  },
  {
    "text": "the stuff in that module is accessible to me by default via that modules name dot something so that's sort of",
    "start": "801760",
    "end": "808180"
  },
  {
    "text": "separated into its own namespace it doesn't pollute my namespace I can also call a another Python script by a",
    "start": "808180",
    "end": "816820"
  },
  {
    "text": "subprocess to basically call it as a regular process that's typically not",
    "start": "816820",
    "end": "822550"
  },
  {
    "text": "what you do between Python programs though and one one small detail I'm",
    "start": "822550",
    "end": "829870"
  },
  {
    "text": "going to cover later here is if you have a main guard and I'm going to show you what that is that allows for a Python",
    "start": "829870",
    "end": "837160"
  },
  {
    "text": "script to detect whether it's run directly or whether it was imported from some other module and this allows a",
    "start": "837160",
    "end": "843990"
  },
  {
    "text": "Python file to be written both as the shells as a script that can be run from",
    "start": "843990",
    "end": "850330"
  },
  {
    "text": "the command line and as a module that can be imported from other Python code and this is quite a useful concept so",
    "start": "850330",
    "end": "860640"
  },
  {
    "text": "here's the shell script food of SH it basically starts out by echoing this to",
    "start": "861000",
    "end": "866800"
  },
  {
    "text": "the screen this is always run and then it declares a function that does another echo so yeah if I just run food of Sh",
    "start": "866800",
    "end": "875770"
  },
  {
    "text": "it's gonna do that and it's going to carry this function but it's not going to run that function I'm not calling this function so this this will not show",
    "start": "875770",
    "end": "882040"
  },
  {
    "text": "up if you just run food authorization and then you have Bartle sh this one sources foo and then it runs that",
    "start": "882040",
    "end": "889450"
  },
  {
    "text": "function so in both cases well when when",
    "start": "889450",
    "end": "894580"
  },
  {
    "text": "I run food this one is gonna be printed but I wanna run bar this one is going to be printed and then I call foo and I'm",
    "start": "894580",
    "end": "900340"
  },
  {
    "text": "gonna print this one so this statement is always run and there's no way no easy",
    "start": "900340",
    "end": "907240"
  },
  {
    "text": "way in shell for food to basically detect that oh I'm being sourced so I don't want to do this or now I'm being",
    "start": "907240",
    "end": "914650"
  },
  {
    "text": "run so now I want to do my main logic whereas in Python so this is pretty",
    "start": "914650",
    "end": "920110"
  },
  {
    "text": "similar code Python basically says okay I want to print this always and then I",
    "start": "920110",
    "end": "925600"
  },
  {
    "text": "declare this function foo right does prints as well and I'm gonna skip that",
    "start": "925600",
    "end": "931240"
  },
  {
    "text": "for now a bar in bar we import food and then we call food or food work this function so now when I run bar",
    "start": "931240",
    "end": "938920"
  },
  {
    "text": "this import statement is actually gonna run this code and it's gonna do the print so this is always run even when",
    "start": "938920",
    "end": "945769"
  },
  {
    "text": "when you run bar this is also printed and then it declares a function it doesn't run it yet and then when it gets",
    "start": "945769",
    "end": "952819"
  },
  {
    "text": "down here it it's gonna say if name equals main which basically means is",
    "start": "952819",
    "end": "958399"
  },
  {
    "text": "through the main script in this Python process and if it's not we're just going",
    "start": "958399",
    "end": "965540"
  },
  {
    "text": "to skip this so from when few is run on its own this is printed and this is",
    "start": "965540",
    "end": "973309"
  },
  {
    "text": "printed but when you run bar we import food this is printed this is skipped and",
    "start": "973309",
    "end": "978949"
  },
  {
    "text": "you can basically you have this facility in Python for free to detect that oh I'm being imported I don't need to run this",
    "start": "978949",
    "end": "984379"
  },
  {
    "text": "and then we do this call down here and it's gonna do the call to food so more",
    "start": "984379",
    "end": "994550"
  },
  {
    "text": "shell versus Python comparison tools in libraries as I said the shell script language itself is very minimal you use",
    "start": "994550",
    "end": "1001749"
  },
  {
    "text": "system binaries from UNIX or from elsewhere on your system to do the heavy lifting",
    "start": "1001749",
    "end": "1007350"
  },
  {
    "text": "yeah in python python is very different here part that's a very very rich",
    "start": "1007350",
    "end": "1013089"
  },
  {
    "text": "standard library you can do most things within the language without having to call out to external processes lots more",
    "start": "1013089",
    "end": "1020079"
  },
  {
    "text": "third-party modules are available on lines so if you want to get even more functionality you can find that there",
    "start": "1020079",
    "end": "1026909"
  },
  {
    "text": "and you can use the sub process module to call out to other binaries on your system so you can still interact with",
    "start": "1026909",
    "end": "1032199"
  },
  {
    "text": "all the binaries just like you depend on from shell scripts it's slightly more fiddly from Python than from shell",
    "start": "1032199",
    "end": "1038288"
  },
  {
    "text": "though so converting a shell script to",
    "start": "1038289",
    "end": "1044709"
  },
  {
    "text": "Python some tips and techniques first",
    "start": "1044709",
    "end": "1052169"
  },
  {
    "start": "1049000",
    "end": "1049000"
  },
  {
    "text": "just how to organize your code as we saw",
    "start": "1052169",
    "end": "1058450"
  },
  {
    "text": "earlier here the Python script you can have statements at the top level if",
    "start": "1058450",
    "end": "1064630"
  },
  {
    "text": "you're used to C and C++ you don't really have this you can't like you need to put something in you you need to put",
    "start": "1064630",
    "end": "1069940"
  },
  {
    "text": "your statements inside a function for them to actually work you can just have printf on the top level but you can in",
    "start": "1069940",
    "end": "1079809"
  },
  {
    "text": "Python and you do in shell so when converting from shell to Python you can",
    "start": "1079809",
    "end": "1084940"
  },
  {
    "text": "simply start by transcribing your shell script into Python once they've mint after another you don't need to change",
    "start": "1084940",
    "end": "1090039"
  },
  {
    "text": "the structure at all everything is run from top to bottom in the same way in both languages and then you can start",
    "start": "1090039",
    "end": "1096280"
  },
  {
    "text": "refactoring your Python script or your very shell like Python script with",
    "start": "1096280",
    "end": "1102880"
  },
  {
    "text": "functions and classes in the instructors and you can sort of incremental e improve the structure of your script and",
    "start": "1102880",
    "end": "1109750"
  },
  {
    "text": "you can add the main guard and this makes it possible for your Python script",
    "start": "1109750",
    "end": "1115750"
  },
  {
    "text": "to be imported from another script because before this so say you have a",
    "start": "1115750",
    "end": "1122500"
  },
  {
    "text": "shell scripts and it doesn't stuff like say it removed some file all right move some files around the file system if you",
    "start": "1122500",
    "end": "1130330"
  },
  {
    "text": "just rewrite that into Python the Python script will do the same when you run it it'll just move so fast around but if",
    "start": "1130330",
    "end": "1137559"
  },
  {
    "text": "you now import it that Python script from a different Python script it would still just go ahead and move those files and you probably don't want to do that",
    "start": "1137559",
    "end": "1144100"
  },
  {
    "text": "when you import it from another script because the reason to import it is to access some reusable functionality",
    "start": "1144100",
    "end": "1149919"
  },
  {
    "text": "within your Python script and that's why you add the main guard because now if you protect the the main execution of",
    "start": "1149919",
    "end": "1157539"
  },
  {
    "text": "the script inside the main guard all the other stuff becomes available without your script going around and doing is",
    "start": "1157539",
    "end": "1164830"
  },
  {
    "text": "the stuff every time it is imported",
    "start": "1164830",
    "end": "1170070"
  },
  {
    "text": "after you've added the main guard typically you'll add a main function as well just to sort of organize the the",
    "start": "1171419",
    "end": "1176770"
  },
  {
    "text": "main execution record into a separate function this is a common convention in Python but it's also",
    "start": "1176770",
    "end": "1183600"
  },
  {
    "text": "another script can now import your script and then run its main to basically execute the script instead of",
    "start": "1184990",
    "end": "1192220"
  },
  {
    "text": "having to use some process run to basically execute it in a separate process and as you move along you can",
    "start": "1192220",
    "end": "1200379"
  },
  {
    "text": "split reusable functionality into separate modules you can start distributing your code over several",
    "start": "1200379",
    "end": "1205480"
  },
  {
    "text": "Python scripts to make sure that each Grif does one thing does it well and has",
    "start": "1205480",
    "end": "1211980"
  },
  {
    "text": "yeah basically make sure that your code is factored in a nice way and at this",
    "start": "1211980",
    "end": "1217899"
  },
  {
    "text": "point you can start adding unit tests to verify the api's of those reusable components so common line interfaces in",
    "start": "1217899",
    "end": "1228639"
  },
  {
    "start": "1224000",
    "end": "1224000"
  },
  {
    "text": "Python so a lot of shell scripts they they're there for you or someone to run",
    "start": "1228639",
    "end": "1233889"
  },
  {
    "text": "from the command line so command line interfaces is something you typically write in shell I'm going to argue that",
    "start": "1233889",
    "end": "1243460"
  },
  {
    "text": "writing a command line interface in Python it's a much better experience than trying to do it properly in shell",
    "start": "1243460",
    "end": "1249840"
  },
  {
    "text": "first of all you're running on UNIX you probably want to follow regular UNIX",
    "start": "1249840",
    "end": "1255580"
  },
  {
    "text": "conventions like if your script exists with zero that means success if it X is non zero that means failure nice thing",
    "start": "1255580",
    "end": "1262960"
  },
  {
    "text": "with Python is that if you just run some states move through pythons and you don't have an explicit exit it just falls off the end of the script it's",
    "start": "1262960",
    "end": "1269440"
  },
  {
    "text": "gonna exit with 0 and if you throw an exception inside Python and it's it escapes and you get a trace back on the",
    "start": "1269440",
    "end": "1275529"
  },
  {
    "text": "on the command line it's also going to make sure the exit code is is nonzero so",
    "start": "1275529",
    "end": "1281049"
  },
  {
    "text": "if just write a Python script you don't worry about exit codes if it completes this gonna exit 0 if it fails with some",
    "start": "1281049",
    "end": "1287049"
  },
  {
    "text": "exceptions it's gonna accept be nonzero that's a nice convention or a nice default at least one one typical thing",
    "start": "1287049",
    "end": "1297820"
  },
  {
    "text": "you do for a UNIX or in the UNIX convention is to use C standard in and sustain route for for default i/o so",
    "start": "1297820",
    "end": "1304869"
  },
  {
    "text": "standard in sign routes are these conventions for getting your default input and where you were to write your",
    "start": "1304869",
    "end": "1311169"
  },
  {
    "text": "default output print in Python the focus is on the route",
    "start": "1311169",
    "end": "1317039"
  },
  {
    "text": "so the defaults in place and are set up to work with us if you use the logging",
    "start": "1317090",
    "end": "1323029"
  },
  {
    "text": "module in Python it's going to default to printing your log messages on standard error which is the UNIX",
    "start": "1323029",
    "end": "1330049"
  },
  {
    "text": "convention for logging errors and warnings and typically when you write",
    "start": "1330049",
    "end": "1336350"
  },
  {
    "text": "your command-line interfaces how most unix commands do this is that mandatory command-line arguments are positional",
    "start": "1336350",
    "end": "1341809"
  },
  {
    "text": "arguments so say when you move a file from A to B you don't have you the command is MV a B so those are",
    "start": "1341809",
    "end": "1349070"
  },
  {
    "text": "processional arguments the first argument the second argument you don't use optional command-line arguments to",
    "start": "1349070",
    "end": "1354080"
  },
  {
    "text": "specify mandatory arguments and I'll",
    "start": "1354080",
    "end": "1359450"
  },
  {
    "text": "show you how basically doing this is in Python is is fairly simple so the key",
    "start": "1359450",
    "end": "1368269"
  },
  {
    "text": "here is the arc parse module this is part of the patent sign library and it's",
    "start": "1368269",
    "end": "1373340"
  },
  {
    "text": "what you want to use to write nice command-line interfaces so here's a fairly simple product program let's just",
    "start": "1373340",
    "end": "1380779"
  },
  {
    "text": "quickly go through what it does so we have a string at the top declaring the intention of the program and we",
    "start": "1380779",
    "end": "1386720"
  },
  {
    "text": "calculate the square of a given number we have a helper function here called calc it takes a number and exponent and",
    "start": "1386720",
    "end": "1393409"
  },
  {
    "text": "it returns the number raised to the exponent this is just an example to show",
    "start": "1393409",
    "end": "1398809"
  },
  {
    "text": "ya all simple nothing nothing magic going on here and then we have a main",
    "start": "1398809",
    "end": "1406429"
  },
  {
    "text": "function we have some command line parsing here I'll go through that and basically we have this main garden here",
    "start": "1406429",
    "end": "1414019"
  },
  {
    "text": "so if the name of this module is dunder main so double underscore main or in",
    "start": "1414019",
    "end": "1420769"
  },
  {
    "text": "Python lingo dunder for double underscore main if if if this script is",
    "start": "1420769",
    "end": "1427309"
  },
  {
    "text": "run from the command line basically then we're going to call the main function so",
    "start": "1427309",
    "end": "1432769"
  },
  {
    "text": "at this point we're going to do the main logic of the program if I wrote a",
    "start": "1432769",
    "end": "1438830"
  },
  {
    "text": "different Python script that imported this one this would not hit we wouldn't",
    "start": "1438830",
    "end": "1444200"
  },
  {
    "text": "execute this this one would still be available to my other script so now I can import this script from a",
    "start": "1444200",
    "end": "1450500"
  },
  {
    "text": "different script and I can access the calc functionality without having to run the whole thing and without having to",
    "start": "1450500",
    "end": "1455929"
  },
  {
    "text": "parse command-line arguments or parse command line arguments to get this one to do the job I want and I want from it",
    "start": "1455929",
    "end": "1462340"
  },
  {
    "text": "but let's assume we're running it from the command line we end up in main here so here we set up a command line for",
    "start": "1462340",
    "end": "1468080"
  },
  {
    "text": "sure so first the the argument parser takes some description of your program I'm",
    "start": "1468080",
    "end": "1474440"
  },
  {
    "text": "basically assigning that from this dog string up here and in Python you can access that through looking at the",
    "start": "1474440",
    "end": "1481909"
  },
  {
    "text": "modules that you have loaded indexed by this name to get this module and then the dunder doc is this doc string up",
    "start": "1481909",
    "end": "1489500"
  },
  {
    "text": "here that's sort of a nice convention like you can you can write a nice comment at the top of your program and",
    "start": "1489500",
    "end": "1495169"
  },
  {
    "text": "that's also going to be part of your usage message in in the command line interface I'm going to show you that",
    "start": "1495169",
    "end": "1500350"
  },
  {
    "text": "then we had an argument we had an argument called num this is a type int",
    "start": "1500350",
    "end": "1506299"
  },
  {
    "text": "which basically means that when Python parses this command an argument is going to run it through the int function which",
    "start": "1506299",
    "end": "1514549"
  },
  {
    "text": "will basically turn the string into an integer so we take basically the number to be squared we take that as our first",
    "start": "1514549",
    "end": "1520700"
  },
  {
    "text": "command-line argument then we add an optional command-line argument - cube or",
    "start": "1520700",
    "end": "1526450"
  },
  {
    "text": "for short - 3 so you can basically have aliases for 4 options here and this",
    "start": "1526450",
    "end": "1534559"
  },
  {
    "text": "you're going to use this command line arguments to calculate the cube instead of the square so basically we have an",
    "start": "1534559",
    "end": "1539960"
  },
  {
    "text": "option to to modify the the behavior of the program this has an action of stores",
    "start": "1539960",
    "end": "1547190"
  },
  {
    "text": "true basically this means that cube is going to be a boolean flag that's going to go into default to false and if you",
    "start": "1547190",
    "end": "1553760"
  },
  {
    "text": "actually specify cube on the command line it's going to sort through there instead and then we're going to have",
    "start": "1553760",
    "end": "1559640"
  },
  {
    "text": "another optional argument file which is basically where we want to write the result and it's going to default to",
    "start": "1559640",
    "end": "1568059"
  },
  {
    "text": "standard route and I say this here the fault equals is Thunder out and this",
    "start": "1568059",
    "end": "1573530"
  },
  {
    "text": "type argument here basically says that when you write a filename and the command line here that file name is going to be parse or",
    "start": "1573530",
    "end": "1580280"
  },
  {
    "text": "passed to this thing which is basically going to open file for writing and give you the file",
    "start": "1580280",
    "end": "1587330"
  },
  {
    "text": "object so it's ready to be written to but if you don't give anything you're going to get cysts on the route which is",
    "start": "1587330",
    "end": "1593750"
  },
  {
    "text": "already a file object ready to be written to so this is basically how I",
    "start": "1593750",
    "end": "1598929"
  },
  {
    "text": "declare the whole command-line interface then we tell the parser to parse our",
    "start": "1598929",
    "end": "1606380"
  },
  {
    "text": "actual command-line arguments and you're going to get those back in args and here we can now call calc with a number from",
    "start": "1606380",
    "end": "1614899"
  },
  {
    "text": "the command line so this number becomes args dot num and then if arcs does cube",
    "start": "1614899",
    "end": "1620690"
  },
  {
    "text": "so this is the boolean which defaults to false but if you actually pass this argument it's going to be true so",
    "start": "1620690",
    "end": "1626360"
  },
  {
    "text": "basically we're gonna call call calc with the number and then we're going to call it with 3 if that cube argument was",
    "start": "1626360",
    "end": "1632960"
  },
  {
    "text": "given else we're going to call it 4-2 so we're going to end up calling Col care with a number and the exponent which is",
    "start": "1632960",
    "end": "1638870"
  },
  {
    "text": "I had 3 or 2 and the result comes back from calc and we're just going to print",
    "start": "1638870",
    "end": "1644539"
  },
  {
    "text": "that to the file the the arc stuff file argument which by default will be our",
    "start": "1644539",
    "end": "1650120"
  },
  {
    "text": "standard output so yeah this is pretty",
    "start": "1650120",
    "end": "1656750"
  },
  {
    "text": "much exactly what I said I think yeah so",
    "start": "1656750",
    "end": "1662960"
  },
  {
    "text": "if you just run the script from the command line no arguments at all it's gonna complain the following arguments are required num",
    "start": "1662960",
    "end": "1668720"
  },
  {
    "text": "so you didn't specify number so this won't work but it's gonna print also a small useless measure saying how to use",
    "start": "1668720",
    "end": "1675470"
  },
  {
    "text": "the script so basically you want to call the script you can given - H - - cube or a - file but you have to give a num now",
    "start": "1675470",
    "end": "1683690"
  },
  {
    "text": "if you run it with - H so this is sort of a magic or an implicit help option that the arc parts module will give you",
    "start": "1683690",
    "end": "1690260"
  },
  {
    "text": "and it'll now give you a nicely formatted help for your command based on the command line interface we just",
    "start": "1690260",
    "end": "1697100"
  },
  {
    "text": "defined so it's going to say let's calculate the square of a given number the positional arguments you need to give is none and that's the number to be",
    "start": "1697100",
    "end": "1703610"
  },
  {
    "text": "squared and you have some optional arguments here you can pass - help - H or better Scheldt to get this message",
    "start": "1703610",
    "end": "1709220"
  },
  {
    "text": "you have the cube option with with help string and the file option with the help screen so now if we call my script with",
    "start": "1709220",
    "end": "1717020"
  },
  {
    "text": "5 we're going to just get back the result 25 because basically this is this was printed to",
    "start": "1717020",
    "end": "1723720"
  },
  {
    "text": "her stand her up but that was the default option if I give it - 3 it's going to cube instead so the Q both of 5",
    "start": "1723720",
    "end": "1730559"
  },
  {
    "text": "is 125 obviously and if I specify an output file it's going to put that put",
    "start": "1730559",
    "end": "1737640"
  },
  {
    "text": "the result into the file called food and then if I cut the file food I'm gonna get the result so that was art bars now",
    "start": "1737640",
    "end": "1748530"
  },
  {
    "start": "1745000",
    "end": "1745000"
  },
  {
    "text": "let's look at how to run other programs from your Python scripts um sir process",
    "start": "1748530",
    "end": "1755400"
  },
  {
    "text": "so basically you import the sir process module you prepare a command line here",
    "start": "1755400",
    "end": "1762690"
  },
  {
    "text": "you want to prepare the command line typically as list of strings Python",
    "start": "1762690",
    "end": "1767700"
  },
  {
    "text": "supports pausing the whole command line as a single string as well but then it needs to run it through the shell to get",
    "start": "1767700",
    "end": "1773850"
  },
  {
    "text": "shell expansion and everything sort of properly decoded so everybody advices or",
    "start": "1773850",
    "end": "1782850"
  },
  {
    "text": "the advice is to basically pass a list of strings this allows you to basically handle command line arguments with",
    "start": "1782850",
    "end": "1790620"
  },
  {
    "text": "spaces in them properly and then you basically call sub process dot run with",
    "start": "1790620",
    "end": "1796980"
  },
  {
    "text": "this list and that will run the sub process and you can get the you can you",
    "start": "1796980",
    "end": "1803100"
  },
  {
    "text": "can use the return code attribute from the call to get the exit code so that's",
    "start": "1803100",
    "end": "1808500"
  },
  {
    "text": "how you run a command and get a zexis code if you want to run a command and and raise an exception if it fails so if",
    "start": "1808500",
    "end": "1814530"
  },
  {
    "text": "it returns a nonzero exit code then you basically just add check equals true to the run call and you'll get an exception",
    "start": "1814530",
    "end": "1821610"
  },
  {
    "text": "if it fails so that's even easier than getting the exit code and then doing an",
    "start": "1821610",
    "end": "1826620"
  },
  {
    "text": "if from the exit code sometimes you want to run a process to actually catch its",
    "start": "1826620",
    "end": "1832620"
  },
  {
    "text": "output and put that into a string variables so here's how you do that typically you can pause check equals",
    "start": "1832620",
    "end": "1839220"
  },
  {
    "text": "true so that you can exception if the program fails and capture output true will basically now give you a result",
    "start": "1839220",
    "end": "1844860"
  },
  {
    "text": "object where you can extract the standard out and the standard error from that process so",
    "start": "1844860",
    "end": "1850830"
  },
  {
    "text": "there is this extra boilerplate of sub-process run and and basically organizing your command into an area of",
    "start": "1850830",
    "end": "1856830"
  },
  {
    "text": "strengths instead of a simple string but otherwise it's not much harder to run an external process in python than it is",
    "start": "1856830",
    "end": "1863279"
  },
  {
    "text": "from a shell script there are lots of more complex cases for running external",
    "start": "1863279",
    "end": "1869309"
  },
  {
    "text": "commands you can set up pipes to the to the external process and pipes the pipe",
    "start": "1869309",
    "end": "1874769"
  },
  {
    "text": "to standard output or get a pipe from standard output and pipe from that process to a different process and stuff like that",
    "start": "1874769",
    "end": "1879960"
  },
  {
    "text": "all that is documented in the main Python documentation and this is one of the nice room Y jewels to read the",
    "start": "1879960",
    "end": "1887639"
  },
  {
    "text": "documentation for it's it's fairly straightforward manipulating the",
    "start": "1887639",
    "end": "1893370"
  },
  {
    "start": "1891000",
    "end": "1891000"
  },
  {
    "text": "filesystem from Python this is another thing that shell scripts often do and you move some fast round you create some",
    "start": "1893370",
    "end": "1898919"
  },
  {
    "text": "directories you do something with the file system from from a shell script so how do you do the same for Python well",
    "start": "1898919",
    "end": "1904440"
  },
  {
    "text": "in Python 3 well yeah around around when Python 3 showed up you also got the path",
    "start": "1904440",
    "end": "1910919"
  },
  {
    "text": "limb what you can get there's this one Python too but it requires a separate download but yeah the pathway module",
    "start": "1910919",
    "end": "1918389"
  },
  {
    "text": "allows you a nice interface for manipulating paths basically so you can",
    "start": "1918389",
    "end": "1924990"
  },
  {
    "text": "create move remove files in directories you can look for specific types of files around the filesystem it has a nice",
    "start": "1924990",
    "end": "1932639"
  },
  {
    "text": "handling of relative versus absolute paths in in large part it replaces or",
    "start": "1932639",
    "end": "1938159"
  },
  {
    "text": "supersedes always dot path functions and other OS parts of Python if you're used",
    "start": "1938159",
    "end": "1943679"
  },
  {
    "text": "to those and it also supersedes F and match for doing path pattern matching",
    "start": "1943679",
    "end": "1952169"
  },
  {
    "text": "like story dot txt kind of matching and also glob which actually goes onto the file system and",
    "start": "1952169",
    "end": "1958730"
  },
  {
    "text": "and and gets files that match a certain pattern proper documentation is there",
    "start": "1958730",
    "end": "1964760"
  },
  {
    "text": "I'm just gonna do a very simple example here OS and OS path are still in Python",
    "start": "1964760",
    "end": "1971669"
  },
  {
    "text": "and there are stuff there that is not in path Lib so you'll still might need to do these",
    "start": "1971669",
    "end": "1976710"
  },
  {
    "text": "there's also SH util which contains more higher-level shell functionality but",
    "start": "1976710",
    "end": "1983549"
  },
  {
    "text": "here's a simple live example so it starts by from path lab import as the there there's some",
    "start": "1983549",
    "end": "1990000"
  },
  {
    "text": "other stuff in path flip but typically the path is the clothes you want and then we can say my directory equals path",
    "start": "1990000",
    "end": "1996570"
  },
  {
    "text": "dot CWD current working directory so that's where your script is the current directory for your script / so basically",
    "start": "1996570",
    "end": "2003980"
  },
  {
    "text": "path live has overloaded the slash operator or the mission operator to basically do path concatenation so here",
    "start": "2003980",
    "end": "2011390"
  },
  {
    "text": "we're basically getting the my dear directory relative to the current directory and then we create that recrea",
    "start": "2011390",
    "end": "2019100"
  },
  {
    "text": "and if it already exists well that's fine we're just going to keep going if you don't pass the exists okay equals",
    "start": "2019100",
    "end": "2025160"
  },
  {
    "text": "true then m'kay dear we'll raise an exception if the directory exists and",
    "start": "2025160",
    "end": "2030860"
  },
  {
    "text": "then we're going to create a full path which is the food or txt file inside that my directory this just creates the",
    "start": "2030860",
    "end": "2037910"
  },
  {
    "text": "path object it doesn't actually create a file and then if you don't exist so if",
    "start": "2037910",
    "end": "2043130"
  },
  {
    "text": "that file exists we're gonna rename it to food dot backup food with suffix backup basically",
    "start": "2043130",
    "end": "2050540"
  },
  {
    "text": "takes the lost suffix of the filename and replaces it with the one you gave it there and then with food or open wsf so",
    "start": "2050540",
    "end": "2058190"
  },
  {
    "text": "basically we're going to open the Foo file in writable mode we're now going to",
    "start": "2058190",
    "end": "2063368"
  },
  {
    "text": "iterate through my directory so basically get all the files or all the",
    "start": "2063369",
    "end": "2068658"
  },
  {
    "text": "paths within my directory and then we're going to print that path relative to my",
    "start": "2068659",
    "end": "2074750"
  },
  {
    "text": "directory into that file so I'm basically just taking a directory listing of my deer and printing it into",
    "start": "2074750",
    "end": "2080810"
  },
  {
    "text": "that food txt file and then finally I'm going to look up all the storage backup",
    "start": "2080810",
    "end": "2087830"
  },
  {
    "text": "files inside my directory and I'm gonna unlink them so I'm not quite sure what this program is meant to be doing but",
    "start": "2087830",
    "end": "2094580"
  },
  {
    "text": "it's a fairly nice example of what you can do with path they pretty much all we're doing here are methods on path",
    "start": "2094580",
    "end": "2100070"
  },
  {
    "text": "objects so a little bit about writing",
    "start": "2100070",
    "end": "2105770"
  },
  {
    "text": "unit tests in Python this yeah this is not the talk on test frameworks or unit",
    "start": "2105770",
    "end": "2112010"
  },
  {
    "text": "testing in general but and typically when your scripts grow you'll typically",
    "start": "2112010",
    "end": "2117290"
  },
  {
    "text": "put your assistance separate files but I'm gonna just going to show you some small tests that you",
    "start": "2117290",
    "end": "2122450"
  },
  {
    "text": "put it in the same file just to get started unit testing you have lots of",
    "start": "2122450",
    "end": "2128900"
  },
  {
    "text": "different test frameworks available the most used is probably unit test but a",
    "start": "2128900",
    "end": "2134300"
  },
  {
    "text": "lot of people don't like it pi test is probably a better one and it's gaining popularity fast but it's not in the",
    "start": "2134300",
    "end": "2141020"
  },
  {
    "text": "central library and there's doc test which is very nifty and I'm I'm gonna actually show you doctors first so",
    "start": "2141020",
    "end": "2147920"
  },
  {
    "text": "remember this drift this is the squaring the numbers everything so I'm now going",
    "start": "2147920",
    "end": "2153020"
  },
  {
    "text": "to basically add some unit tests to the script with each of the three methods so four doc tests so if you just wanted to",
    "start": "2153020",
    "end": "2161540"
  },
  {
    "start": "2157000",
    "end": "2157000"
  },
  {
    "text": "add hoc test this script you can just start the Python interpreter so basically start the Python rifle you can",
    "start": "2161540",
    "end": "2166730"
  },
  {
    "text": "import my script and you can run my script calc 3 2 basically you move the square and number 3 and we get the",
    "start": "2166730",
    "end": "2172910"
  },
  {
    "text": "answer 9 so that's how you can sort of interrogate your script from the command line now let's formalize that just a tiny bit",
    "start": "2172910",
    "end": "2180140"
  },
  {
    "text": "so in calc we add this doc string which basically documents how documents the",
    "start": "2180140",
    "end": "2185810"
  },
  {
    "text": "module and typically in the doc string you add a small message saying how to use this or what it does but then let's",
    "start": "2185810",
    "end": "2191480"
  },
  {
    "text": "just copy some stuff from the Python repple into the doc string so we're just going to pretend there's a Python Python",
    "start": "2191480",
    "end": "2198800"
  },
  {
    "text": "doc string here we're just going to tighten the three chevrons and then we're going to type in some expression and we're going to type in the result we",
    "start": "2198800",
    "end": "2204770"
  },
  {
    "text": "expect from this so here we're basically making a list with three calls to calc we're gonna square 0 we're gonna square",
    "start": "2204770",
    "end": "2212150"
  },
  {
    "text": "one and we're gonna square 2 and we're going to expect that this results in a list that contains the numbers 0 1 4 and",
    "start": "2212150",
    "end": "2218780"
  },
  {
    "text": "then we're going to do the same with cubing and we're gonna expect a list containing the values 0 1 and 8 and",
    "start": "2218780",
    "end": "2225460"
  },
  {
    "text": "we're basically just adding some documentation or or some yeah a string",
    "start": "2225460",
    "end": "2231950"
  },
  {
    "text": "into the calc function itself and that's all the change we're gonna do iterate now from the command line we can run",
    "start": "2231950",
    "end": "2239900"
  },
  {
    "text": "Python - M doc test and then pass it my script of Pi we're just gonna add a dash D to get",
    "start": "2239900",
    "end": "2245120"
  },
  {
    "text": "somewhere boy stuff it as well and this is now actually going to look through the doc string look up the things that",
    "start": "2245120",
    "end": "2250610"
  },
  {
    "text": "look like Python expression from the repple is going to execute them with this module loaded and expect those",
    "start": "2250610",
    "end": "2258049"
  },
  {
    "text": "results that we expected here and it's basically gonna run run calc with those arguments and make sure that we get that",
    "start": "2258049",
    "end": "2264079"
  },
  {
    "text": "answer so this is fairly magic actually but but it's it's really nice to just",
    "start": "2264079",
    "end": "2269599"
  },
  {
    "text": "get started doing some testing you basically right ah this is a couple of use cases for this function and then you",
    "start": "2269599",
    "end": "2275329"
  },
  {
    "text": "just run Python MDOC test and it's actually going to test those use cases you can also run doc test from within",
    "start": "2275329",
    "end": "2281660"
  },
  {
    "text": "the script itself so in your main guard you can just import doc test and then doctors the test mod for test this",
    "start": "2281660",
    "end": "2286730"
  },
  {
    "text": "module and it's going to do the same thing when you run the script from the command line for unit test unit tests",
    "start": "2286730",
    "end": "2294619"
  },
  {
    "start": "2292000",
    "end": "2292000"
  },
  {
    "text": "this is a bit more clunky you basically set up some classes test case classes and they have some test methods that do",
    "start": "2294619",
    "end": "2301609"
  },
  {
    "text": "stuff so you can add this into the same file with along with the rest of the stuff you need to add an import unit",
    "start": "2301609",
    "end": "2308299"
  },
  {
    "text": "test at the top to get access to the unit test test case closest but these",
    "start": "2308299",
    "end": "2313549"
  },
  {
    "text": "are just classes that are declared nothing is going to be run automatically from your script there it's just going to be sort of dead code in your script",
    "start": "2313549",
    "end": "2319609"
  },
  {
    "text": "but you can run these tests from the command line by Python - I'm unit tests on your script and it's going to find",
    "start": "2319609",
    "end": "2326509"
  },
  {
    "text": "these six tests and run them you can also run them run the tests from within the script like if you did not have a",
    "start": "2326509",
    "end": "2331819"
  },
  {
    "text": "command line interface for this you could instead have what when invoked from the command line you're basically called unit tests of",
    "start": "2331819",
    "end": "2337999"
  },
  {
    "text": "main is that my test is a similar story except the PI test tests are often nicer",
    "start": "2337999",
    "end": "2344839"
  },
  {
    "start": "2340000",
    "end": "2340000"
  },
  {
    "text": "and smaller to write so here we just declare a function called test",
    "start": "2344839",
    "end": "2349970"
  },
  {
    "text": "underscore calc and the magic here is in the name starts with test that's what pi is going to recognize we set up some",
    "start": "2349970",
    "end": "2356690"
  },
  {
    "text": "test vectors so basically we're going to take zero and square it and we're going to expect zero we're gonna take one and",
    "start": "2356690",
    "end": "2361789"
  },
  {
    "text": "square it and expect one to N squared and expect four and the same for the cube test cases and then for the number",
    "start": "2361789",
    "end": "2367220"
  },
  {
    "text": "and the exponent and our expected value in in this list we're going to assert that when we call calc with a number and",
    "start": "2367220",
    "end": "2374869"
  },
  {
    "text": "exponent we get what we expect so very simple example based testing in six lines of code you can run this from the",
    "start": "2374869",
    "end": "2383269"
  },
  {
    "text": "command line if you have PI test installed you basically just do run PI test on your script and it's going to find the",
    "start": "2383269",
    "end": "2389940"
  },
  {
    "text": "test and run them and you can also import type I test from your script and run it like that so a slightly",
    "start": "2389940",
    "end": "2396420"
  },
  {
    "text": "controversial take on error handling in Python scripts and now I'm specific to",
    "start": "2396420",
    "end": "2401579"
  },
  {
    "text": "Python scripts for system utility is basically Python scripts that have replaced shell scripts don't often when",
    "start": "2401579",
    "end": "2412109"
  },
  {
    "text": "you write shell scripts or system utilities these are scripts that don't",
    "start": "2412109",
    "end": "2419430"
  },
  {
    "text": "necessarily receive the same care and attention that your main code base does it's not where you do come complete",
    "start": "2419430",
    "end": "2429509"
  },
  {
    "text": "error handling it's not where you care about all the cases and often what you end up doing instead is you try to run",
    "start": "2429509",
    "end": "2435869"
  },
  {
    "text": "some code you catch some exceptions and you basically just print an error message and exit and instead of doing",
    "start": "2435869",
    "end": "2442380"
  },
  {
    "text": "die it's often better to have the Python exception just bubble up to the command line so that you can actually get the",
    "start": "2442380",
    "end": "2448349"
  },
  {
    "text": "trace back in the on the command line part of the reason why I advocate this",
    "start": "2448349",
    "end": "2454739"
  },
  {
    "text": "as well is that these Python scripts built us as system utilities as glue",
    "start": "2454739",
    "end": "2459809"
  },
  {
    "text": "code in your project they are the users of those scripts are often other developers and it's often",
    "start": "2459809",
    "end": "2467609"
  },
  {
    "text": "much quicker to basically get at Python trace back trace back and directly sort",
    "start": "2467609",
    "end": "2472950"
  },
  {
    "text": "of identify ok this is the part of the code that's failing let's start lucky that then actually get an error message",
    "start": "2472950",
    "end": "2479549"
  },
  {
    "text": "and then trying to parse the code figure out or here's the error message it was caused by that and then start tracing in",
    "start": "2479549",
    "end": "2484829"
  },
  {
    "text": "figuring out and often what I find is that in that case I need to remove that error message to get at the actual",
    "start": "2484829",
    "end": "2490680"
  },
  {
    "text": "exception see what actually failed and then I can dig further and debug the script so basically sloppy error handling is",
    "start": "2490680",
    "end": "2499319"
  },
  {
    "text": "worse than no error handling in Python because the Python trace backs are really useful for debugging and just",
    "start": "2499319",
    "end": "2506759"
  },
  {
    "text": "simplify or remove error handling that might otherwise obscure the source of the error and it's basically what I",
    "start": "2506759",
    "end": "2512099"
  },
  {
    "text": "advocate here and yeah a lot of the Patton exceptions to escape and",
    "start": "2512099",
    "end": "2517200"
  },
  {
    "text": "terminate the program and that will also guarantee a nonzero exit code from your script so it behaves",
    "start": "2517200",
    "end": "2522920"
  },
  {
    "text": "like the UNIX convention expects yeah if",
    "start": "2522920",
    "end": "2531470"
  },
  {
    "text": "there are simple usage or user errors in your script say like your pasta wrong number of command-line arguments and",
    "start": "2531470",
    "end": "2537710"
  },
  {
    "text": "stuff like that that is better handled with a simple error message because trying to decode from a traceback that",
    "start": "2537710",
    "end": "2544010"
  },
  {
    "text": "oh i needed to pass three arguments is worse than simply the script simply saying i you need for three arguments",
    "start": "2544010",
    "end": "2549470"
  },
  {
    "text": "but so i showed your art parse gives you this for free when you use our parse it it's going to give you these error",
    "start": "2549470",
    "end": "2554600"
  },
  {
    "text": "messages also if your script is not actually run by all the developers if",
    "start": "2554600",
    "end": "2561800"
  },
  {
    "text": "it's exposed to end users for example then that's a different story then i would argue that your script is actually",
    "start": "2561800",
    "end": "2566900"
  },
  {
    "text": "part of your main code base it's not glue script and this these rules don't really apply anymore",
    "start": "2566900",
    "end": "2572680"
  },
  {
    "text": "so a case study I'm quickly running out of time so I'm gonna have to run through",
    "start": "2572680",
    "end": "2578090"
  },
  {
    "text": "this real quickly we build video conferencing systems we have a build process that build process creates a pkg",
    "start": "2578090",
    "end": "2583970"
  },
  {
    "text": "file you then use this script called bins to take that PKG file and push it on to video conferencing hardware system",
    "start": "2583970",
    "end": "2591440"
  },
  {
    "text": "to actually test your functionality so this is a usual developer workflow this",
    "start": "2591440",
    "end": "2596510"
  },
  {
    "start": "2596000",
    "end": "2596000"
  },
  {
    "text": "is the shell script i started with that's 450 lines of bash it's not very pleasant it has some",
    "start": "2596510",
    "end": "2604100"
  },
  {
    "text": "helper functions but the command line interface alone takes up about half the script there is there's an almost data",
    "start": "2604100",
    "end": "2611450"
  },
  {
    "text": "structure in that script that takes about 30% of the script there is some logic but it ends up pretty much",
    "start": "2611450",
    "end": "2617380"
  },
  {
    "text": "constructing this monster command line in the end so basically we're going to cut a file which is the PKG file and",
    "start": "2617380",
    "end": "2623810"
  },
  {
    "text": "we're going to post that over ssh to the endpoint and we're going to invoke some stuff on the endpoint to make the endpoint actually already the video",
    "start": "2623810",
    "end": "2630860"
  },
  {
    "text": "conferencing system actually install that PKG as I said it's a complex script",
    "start": "2630860",
    "end": "2636910"
  },
  {
    "text": "Vince how bins upgrades the conferencing system is different than how these conference systems are upgraded in the",
    "start": "2636910",
    "end": "2643040"
  },
  {
    "text": "field bins pushes the pkg on through system whereas in the field the system is told where to find a pkg and then it",
    "start": "2643040",
    "end": "2649220"
  },
  {
    "text": "pulls it so and also there's a new requirement on the script we need to support systems that have multiple",
    "start": "2649220",
    "end": "2654650"
  },
  {
    "text": "devices and I'm gonna talk about this here so our conferencing endpoints some",
    "start": "2654650",
    "end": "2659840"
  },
  {
    "start": "2656000",
    "end": "2656000"
  },
  {
    "text": "of them are integrated in that you basically have the whole system in a single unit with an integrated camera",
    "start": "2659840",
    "end": "2665140"
  },
  {
    "text": "but you also have bigger systems like here this is just the camera the main unit is there or in this case the main",
    "start": "2665140",
    "end": "2672890"
  },
  {
    "text": "unit is behind the screen but it has two cameras that are actually separate separate devices from the main unit and",
    "start": "2672890",
    "end": "2679450"
  },
  {
    "text": "recall the the main unit we call it the codec that's more most of the historical name I guess so you have a codec and you",
    "start": "2679450",
    "end": "2686420"
  },
  {
    "text": "have a separate camera whereas here you have the codec in camera in one unit",
    "start": "2686420",
    "end": "2691390"
  },
  {
    "text": "systems with multiple devices so yeah basically when you upgrade these multiple devices systems you need to",
    "start": "2691510",
    "end": "2698330"
  },
  {
    "text": "upgrade both the codec and the peripherals in tandem otherwise their communication link breaks because they're running different versions so we",
    "start": "2698330",
    "end": "2706850"
  },
  {
    "text": "introduced some loads files to basically make sure that when you basically define",
    "start": "2706850",
    "end": "2712550"
  },
  {
    "text": "which pay KJ's are needed for the codec and the cameras for those to work together so that's the simple text format where it basically tells oh if",
    "start": "2712550",
    "end": "2720980"
  },
  {
    "text": "you're this kind of codec you need this pkg if you're like on the camera you need that pkg and so on and now you're",
    "start": "2720980",
    "end": "2727520"
  },
  {
    "text": "gonna run one or more build commands and then run a single bins to update the codec and its peripherals so instead of",
    "start": "2727520",
    "end": "2735410"
  },
  {
    "text": "this former workflow we're gonna run multiple build commands to get multiple packages for all the all the parts of",
    "start": "2735410",
    "end": "2742310"
  },
  {
    "text": "the system so basically the codec and the camera and then we're gonna have a loads file that references those pkgs",
    "start": "2742310",
    "end": "2748100"
  },
  {
    "text": "and there's a signature going along with that loss file and bents is now going to tell the system about this loads file",
    "start": "2748100",
    "end": "2754580"
  },
  {
    "text": "and the system will use that loss file to pull on the pkg it needs so I need to",
    "start": "2754580",
    "end": "2761090"
  },
  {
    "text": "add stuff to bins to basically deal with the load files but first and I also need to serve that loss file to the to the",
    "start": "2761090",
    "end": "2768560"
  },
  {
    "text": "end point using HTTP that's not going to be very easy from a shell script so",
    "start": "2768560",
    "end": "2776240"
  },
  {
    "text": "basically how do we get there I first needed to rewrite bins from bash into Python and then",
    "start": "2776240",
    "end": "2782690"
  },
  {
    "text": "refactor to make it more readable and then I can start adding new features so basically first part is or",
    "start": "2782690",
    "end": "2793339"
  },
  {
    "text": "here are some aspects of the rewrite from from shell into Python so this is what I meant with almost data structure",
    "start": "2793339",
    "end": "2798920"
  },
  {
    "text": "we we have a for loop up here that goes through the target that you might want to push and then we can we basically",
    "start": "2798920",
    "end": "2805640"
  },
  {
    "text": "have a switch case on the different target names so these are basically target names from our build system",
    "start": "2805640",
    "end": "2811450"
  },
  {
    "text": "corresponding to different types of endpoints and this is basically code",
    "start": "2811450",
    "end": "2818480"
  },
  {
    "text": "it's not a strut a data structure in itself it's not reusable as a data structure it's code that's run directly inside the shell script but in Python I",
    "start": "2818480",
    "end": "2825349"
  },
  {
    "text": "can actually create a dictionary and I can have nice named fields and this when",
    "start": "2825349",
    "end": "2830900"
  },
  {
    "text": "I import bins from somewhere else I can actually interrogate this target structure and get the same information of the script without running everything",
    "start": "2830900",
    "end": "2837730"
  },
  {
    "text": "command-line interfaces there are a couple of helper functions in shell and then you have this monstrosity which",
    "start": "2837730",
    "end": "2844160"
  },
  {
    "text": "keeps going for another 100 or so lines which parses the different command-line options the corresponding structure in",
    "start": "2844160",
    "end": "2853670"
  },
  {
    "text": "Python is a fair bit shorter it's a fair bit more verbose maybe than this but it",
    "start": "2853670",
    "end": "2859970"
  },
  {
    "text": "has nice documentation for all the options and everything and it's much",
    "start": "2859970",
    "end": "2866510"
  },
  {
    "text": "nicer to use from the command line than the original so the rewrite basically ended up cutting 19 percent of the lines",
    "start": "2866510",
    "end": "2872599"
  },
  {
    "text": "from the shell script the command line interface no no it takes less than 20% of the file and the data structure takes",
    "start": "2872599",
    "end": "2878839"
  },
  {
    "text": "about a third old file and at this point I can start adding new features to the",
    "start": "2878839",
    "end": "2884270"
  },
  {
    "text": "path script so here basically is a script for creating those loads files I",
    "start": "2884270",
    "end": "2890569"
  },
  {
    "text": "talked about and basically the script itself is children four lines of Python imported by beams but you can also run",
    "start": "2890569",
    "end": "2897020"
  },
  {
    "text": "it standalone to create loads files when you're debugging and ok what if I wanted to make a Lowe's file that's sort of",
    "start": "2897020",
    "end": "2903500"
  },
  {
    "text": "formed like this instead then you can just run the Lowe's file script directly and it has a nice command-line interface all documented with the same techniques",
    "start": "2903500",
    "end": "2910460"
  },
  {
    "text": "that I just showed you we need to sign those Lowe's files so here's a separate script load sign that's about three",
    "start": "2910460",
    "end": "2916640"
  },
  {
    "text": "hundred lines of Python but it base allows you to sign the Loews files both for test deployments and for release",
    "start": "2916640",
    "end": "2924020"
  },
  {
    "text": "deployments here is a Python script that basically allows you to serve a loads",
    "start": "2924020",
    "end": "2930770"
  },
  {
    "text": "file and the pkg from a directory to an endpoint over HTTP and all these are",
    "start": "2930770",
    "end": "2936050"
  },
  {
    "text": "basically imported from bin stand this is the code that I had to add to bins to",
    "start": "2936050",
    "end": "2941060"
  },
  {
    "text": "get that loads behavior added so basically what we do here is to start a",
    "start": "2941060",
    "end": "2946130"
  },
  {
    "text": "load server which we go from loads there and we tell now now we basically log in",
    "start": "2946130",
    "end": "2951350"
  },
  {
    "text": "to the endpoint and we tell it to find the loads file to upgrade from and now the the endpoint will actually pull the",
    "start": "2951350",
    "end": "2958280"
  },
  {
    "text": "upgrade from our server instead of pushing it directly onto the endpoint yeah",
    "start": "2958280",
    "end": "2963470"
  },
  {
    "text": "and that's pretty much all for the case study so in summary you can feel free to",
    "start": "2963470",
    "end": "2970280"
  },
  {
    "start": "2967000",
    "end": "2967000"
  },
  {
    "text": "use shell scripts for the very simplest a toss like three lines of shell script is simpler than seven lines of Python but as soon as things start growing",
    "start": "2970280",
    "end": "2976340"
  },
  {
    "text": "really consider rewriting and I would I would argue we write into Python when",
    "start": "2976340",
    "end": "2982130"
  },
  {
    "text": "you get more complex logic when you get data structures everything is going to be much better in Python write your",
    "start": "2982130",
    "end": "2987170"
  },
  {
    "text": "Python scripts so they can both be imported from other scripts to reuse stuff but also to run them directly from",
    "start": "2987170",
    "end": "2992180"
  },
  {
    "text": "the command line so you can have nice developer tools with nice options refactor mercilessly that goes for any",
    "start": "2992180",
    "end": "2997970"
  },
  {
    "text": "code base that you care about and unit tests gives you the confidence to refactor so that's important when you",
    "start": "2997970",
    "end": "3003070"
  },
  {
    "text": "start growing and these are the three modules I would argue most for using when you build these system utilities",
    "start": "3003070",
    "end": "3010470"
  },
  {
    "text": "and I'm gonna end on this quote the UNIX philosophy write programs that do one",
    "start": "3010470",
    "end": "3015670"
  },
  {
    "text": "thing and do it well write programs to work together write programs to handle text frames because that's the universal",
    "start": "3015670",
    "end": "3021280"
  },
  {
    "text": "interface thanks",
    "start": "3021280",
    "end": "3025050"
  },
  {
    "text": "no time for questions here but you can find me no way",
    "start": "3028590",
    "end": "3033960"
  }
]