[
  {
    "start": "0",
    "end": "69000"
  },
  {
    "text": "you're all in the right room I'm not evil inna Elena's in room one we swapped I'm Hannes I'm gonna talk to you today",
    "start": "5140",
    "end": "13820"
  },
  {
    "text": "about building IOT backends in our code of net what I'd like to cover today so",
    "start": "13820",
    "end": "22430"
  },
  {
    "text": "you know what's coming and give you a brief introduction with all you need to know about net then I'm gonna explain to",
    "start": "22430",
    "end": "30200"
  },
  {
    "text": "you what the problem domain was that we were working in when we we did this and what role I could have not played in",
    "start": "30200",
    "end": "37840"
  },
  {
    "text": "implementing the solution and then I'll dive into some technical implementation",
    "start": "37840",
    "end": "43430"
  },
  {
    "text": "details so you know how to do this yourself if you want to get on board and",
    "start": "43430",
    "end": "49010"
  },
  {
    "text": "then I'm gonna put you on your way with some resources that you can use should you want to play with our current met",
    "start": "49010",
    "end": "55399"
  },
  {
    "text": "yourself and produce interested I have stickers so come see me after talk if",
    "start": "55399",
    "end": "62719"
  },
  {
    "text": "you want and I couldn't net sticker to put on your laptop so what is our",
    "start": "62719",
    "end": "67820"
  },
  {
    "text": "current net in the 70s and when people",
    "start": "67820",
    "end": "72950"
  },
  {
    "start": "69000",
    "end": "69000"
  },
  {
    "text": "were not distracted by smartphones a lot of research got done and a lot of the",
    "start": "72950",
    "end": "78289"
  },
  {
    "text": "stuff that we are using today was invented by back then in theory and it has become possible today to implement",
    "start": "78289",
    "end": "84859"
  },
  {
    "text": "it because we have the processing power and actor models are no different in the",
    "start": "84859",
    "end": "90259"
  },
  {
    "text": "early 70s Carl Hewitt and Peter Bishop they wrote the first research paper that",
    "start": "90259",
    "end": "96049"
  },
  {
    "text": "actually talked about implementing software with a likeness to nature like",
    "start": "96049",
    "end": "103450"
  },
  {
    "text": "things in nature interact with each other and that's what actors do and those papers got refined during the rest",
    "start": "103450",
    "end": "109999"
  },
  {
    "text": "of the 70s and the early 80s a lot of people worked on that and the first",
    "start": "109999",
    "end": "115130"
  },
  {
    "text": "practical implementation was in the 80s and Ericsson we're talking about the",
    "start": "115130",
    "end": "121849"
  },
  {
    "text": "period where tokus were making money by",
    "start": "121849",
    "end": "127340"
  },
  {
    "text": "doing landline connections and if you could not make connections you wouldn't be making money so reliability was a",
    "start": "127340",
    "end": "133730"
  },
  {
    "text": "very very important factor for them but of course nobody had made an implementation so they invented their",
    "start": "133730",
    "end": "140030"
  },
  {
    "text": "own programming language which is Earling and they invented that to build the axd 301 taco system and their focus",
    "start": "140030",
    "end": "148760"
  },
  {
    "text": "was on being very performant very fault tolerant distributed concurrent all",
    "start": "148760",
    "end": "154880"
  },
  {
    "text": "these things that we value now and they managed to get nine nines uptime with",
    "start": "154880",
    "end": "161510"
  },
  {
    "text": "the code base that had about two million lines of code which is impressive it's even more impressive if you put that",
    "start": "161510",
    "end": "167810"
  },
  {
    "text": "like in real time because that means that you will get 31 milliseconds of downtime per year I don't know about",
    "start": "167810",
    "end": "175340"
  },
  {
    "text": "your codes but I don't achieve that so",
    "start": "175340",
    "end": "180650"
  },
  {
    "text": "yeah if this has been around since the 70s in the 80s why did we only get it in hire",
    "start": "180650",
    "end": "187970"
  },
  {
    "text": "programming languages later on because if we look at where our code net comes",
    "start": "187970",
    "end": "193010"
  },
  {
    "text": "from in 2010 there was a implementation of the actor model on the java java",
    "start": "193010",
    "end": "200090"
  },
  {
    "text": "virtual machine which is Scala and they actually implemented akka and only in",
    "start": "200090",
    "end": "207530"
  },
  {
    "text": "2013 two people individually from each other started porting akka to the net",
    "start": "207530",
    "end": "213830"
  },
  {
    "text": "CLR Arin standard and Roger choice and they started working on that separately",
    "start": "213830",
    "end": "219260"
  },
  {
    "text": "from each other and then they found out about each other's efforts so they decided like okay let's take the good",
    "start": "219260",
    "end": "225650"
  },
  {
    "text": "things from your codebase and like takes the good things from mine and combine it and make it into one effort and they",
    "start": "225650",
    "end": "232610"
  },
  {
    "text": "actually got permission to call it a kebab net from the original akka people",
    "start": "232610",
    "end": "239120"
  },
  {
    "text": "on the on the JVM and in 2015 we got the first production release by now the team",
    "start": "239120",
    "end": "245180"
  },
  {
    "text": "is a lot bigger than the two of them and it has become very stable there's very we're very close to getting the 1.4",
    "start": "245180",
    "end": "251840"
  },
  {
    "text": "release which will improve networking performance so yeah it became a very",
    "start": "251840",
    "end": "258019"
  },
  {
    "text": "very stable effort now what happened in 2015 is that on the.net ecosystem we got",
    "start": "258019",
    "end": "265580"
  },
  {
    "start": "260000",
    "end": "260000"
  },
  {
    "text": "three actor model implementations over the course of a few months microsoft",
    "start": "265580",
    "end": "271340"
  },
  {
    "text": "opens source project release which they used to build the back end for Halo 4 and the",
    "start": "271340",
    "end": "279350"
  },
  {
    "text": "thing with games is you get most of your revenue the first couple of weeks after release if your back end cannot keep up",
    "start": "279350",
    "end": "286220"
  },
  {
    "text": "people cannot play if people cannot play you get bad reviews if you get bad reviews you don't get sales so they",
    "start": "286220",
    "end": "293000"
  },
  {
    "text": "needed something that they could very very easily scale and they had all the",
    "start": "293000",
    "end": "298040"
  },
  {
    "text": "processing power because they have a sure and the backends for office 365 they had the servers but they needed",
    "start": "298040",
    "end": "305420"
  },
  {
    "text": "like the programming on model so they built or links but in the meanwhile the azure team was working on the service",
    "start": "305420",
    "end": "312200"
  },
  {
    "text": "fabric and on service fabric you also have the service fabric reliable actors and then guys that I just talked to you",
    "start": "312200",
    "end": "320480"
  },
  {
    "text": "about they also released I could net so why if all of this has been around since",
    "start": "320480",
    "end": "325730"
  },
  {
    "text": "the 70s and the 80s that we only get it in 2015 that's a question you should ask",
    "start": "325730",
    "end": "332270"
  },
  {
    "text": "yourself now the thing is classic scaling around that time went through a",
    "start": "332270",
    "end": "339500"
  },
  {
    "start": "334000",
    "end": "334000"
  },
  {
    "text": "bit of a crisis because the web was booming because of smartphones and IOT",
    "start": "339500",
    "end": "345080"
  },
  {
    "text": "devices and all that sort of stuff and the fact that you could deploy an app into the App Store you couldn't predict",
    "start": "345080",
    "end": "351830"
  },
  {
    "text": "how many users you would get so if you do it like a classic web application you would start building is a cluster of web",
    "start": "351830",
    "end": "359900"
  },
  {
    "text": "servers and if they couldn't keep up anymore then you would like increase the scale if your database cluster and add a",
    "start": "359900",
    "end": "366500"
  },
  {
    "text": "caching cluster and so on and became really complex and it's really hard to",
    "start": "366500",
    "end": "371960"
  },
  {
    "text": "do if you've tried doing this you know that there's there's no free lunch and then the second problem is the evolution",
    "start": "371960",
    "end": "380090"
  },
  {
    "start": "379000",
    "end": "379000"
  },
  {
    "text": "in processors because if you look at this trend this is basically what",
    "start": "380090",
    "end": "386060"
  },
  {
    "text": "happened in terms of transistors and clock speed and single thread performance to the processor landscape",
    "start": "386060",
    "end": "392540"
  },
  {
    "text": "and there is three lines that are really important to notice is that clock speeds",
    "start": "392540",
    "end": "398030"
  },
  {
    "text": "they have stabilized for over a decade like we've had three gigahertz processors for a very very very long",
    "start": "398030",
    "end": "405200"
  },
  {
    "text": "time and I don't think anybody sells anything over five gigahertz commercially anyway",
    "start": "405200",
    "end": "410270"
  },
  {
    "text": "so that has stabilized single thread performance is actually stabilizing as",
    "start": "410270",
    "end": "415580"
  },
  {
    "text": "we speak but there is one line that is increasing a lot and that is the number",
    "start": "415580",
    "end": "421340"
  },
  {
    "text": "of course you probably have more cores in your phone right now then you would used to have in your laptop ten years",
    "start": "421340",
    "end": "427669"
  },
  {
    "text": "ago so that is the number that we want to exploit if we want to build something",
    "start": "427669",
    "end": "434240"
  },
  {
    "text": "scalable right now the thing is if",
    "start": "434240",
    "end": "442940"
  },
  {
    "start": "442000",
    "end": "442000"
  },
  {
    "text": "you've tried paralyzing code that is no easy thing to do",
    "start": "442940",
    "end": "448190"
  },
  {
    "text": "who here has tried to manage a thread pool manually in net or another higher",
    "start": "448190",
    "end": "453310"
  },
  {
    "text": "programming language yeah was that fun no the problem is always shared state",
    "start": "453310",
    "end": "460900"
  },
  {
    "text": "because as soon and you're always going to have to share state between threads I mean otherwise your treads not doing",
    "start": "460900",
    "end": "467509"
  },
  {
    "text": "anything if you have shared state that means that you will have race conditions you will need to implement blocking",
    "start": "467509",
    "end": "473659"
  },
  {
    "text": "there could be that locks all this parts that you're gonna have to do that are",
    "start": "473659",
    "end": "478909"
  },
  {
    "text": "gonna hurt your scalability and if you look at Amdahl's law he thought about this this is a graph that shows you the",
    "start": "478909",
    "end": "487310"
  },
  {
    "start": "483000",
    "end": "483000"
  },
  {
    "text": "theoretical speed-up that you can get by adding more processors in relation to",
    "start": "487310",
    "end": "493490"
  },
  {
    "text": "the amount of code that can be parallelized so if you have only 5% of your code that",
    "start": "493490",
    "end": "500440"
  },
  {
    "text": "needs to run in series and all of the rest of the code can be paralyzed as",
    "start": "500440",
    "end": "506240"
  },
  {
    "text": "much as you want you will never get more than a 20 times increase in speed so",
    "start": "506240",
    "end": "514490"
  },
  {
    "text": "even if you throw 65,000 processors are added you will only be able to handle 20",
    "start": "514490",
    "end": "520820"
  },
  {
    "text": "times the workload so if you want to build something that is really really",
    "start": "520820",
    "end": "526070"
  },
  {
    "text": "really big 90 percent or 95 percent is not going to be good enough so that's",
    "start": "526070",
    "end": "533839"
  },
  {
    "text": "where the actual actor models try to help we're gonna try to achieve",
    "start": "533839",
    "end": "539310"
  },
  {
    "start": "535000",
    "end": "535000"
  },
  {
    "text": "a very very very very high degree of parallelization with stateful systems",
    "start": "539310",
    "end": "546529"
  },
  {
    "text": "because if you have two implants something that's completely stateless that's really easy to do if there's no",
    "start": "546529",
    "end": "554040"
  },
  {
    "text": "state you can just paralyze everything but if you have state it becomes harder and they do this by doing reactive",
    "start": "554040",
    "end": "561210"
  },
  {
    "text": "patterns and to have also fault tolerance built in so that if something",
    "start": "561210",
    "end": "566610"
  },
  {
    "text": "crashes not the whole cluster goes down it's just this one error that occurs and",
    "start": "566610",
    "end": "571710"
  },
  {
    "text": "you keep running and if you know randall munroe grade book recommend rate so I'm",
    "start": "571710",
    "end": "581940"
  },
  {
    "text": "going to explain how that works and then the basic building block of the actor model is of course the actor and an",
    "start": "581940",
    "end": "589890"
  },
  {
    "text": "actor is a very very simple object I'm gonna show you in code in a second how that looks but the actor has an inbox",
    "start": "589890",
    "end": "598080"
  },
  {
    "text": "and it's a first-in first-out messaging inbox and that's the only way you can",
    "start": "598080",
    "end": "605670"
  },
  {
    "text": "talk to an actor you send it messages and then the messages will get scheduled",
    "start": "605670",
    "end": "611040"
  },
  {
    "text": "on the actor to be processed and your actor will have all its states and all",
    "start": "611040",
    "end": "617040"
  },
  {
    "text": "its behavior and all its code internal to the object there is no other way to",
    "start": "617040",
    "end": "622410"
  },
  {
    "text": "communicate with it and when you process all these messages in order you know",
    "start": "622410",
    "end": "627660"
  },
  {
    "text": "that you're on a single track so you don't have to write any code to make sure that it's thread-safe",
    "start": "627660",
    "end": "633750"
  },
  {
    "text": "because every actor will only run on a single threat or will never be two messages processing at the same time and",
    "start": "633750",
    "end": "641400"
  },
  {
    "text": "that makes a lot of things a lot easier so if you look at the most simple actor you can write this is an untyped actor",
    "start": "641400",
    "end": "650100"
  },
  {
    "text": "it's a class you inherits you implement from the echo dot net package and you",
    "start": "650100",
    "end": "657930"
  },
  {
    "text": "will have an unwritten and the Unruh sieve is the method where all your messages come in you can figure",
    "start": "657930",
    "end": "664200"
  },
  {
    "text": "out what type of message you're getting and process it this is like the simplest form of an actor that you can have",
    "start": "664200",
    "end": "671860"
  },
  {
    "text": "right now what is very important about",
    "start": "671860",
    "end": "678460"
  },
  {
    "start": "675000",
    "end": "675000"
  },
  {
    "text": "these messages the messages are simple classes as well you don't even have to",
    "start": "678460",
    "end": "684040"
  },
  {
    "text": "inherit anything or implement any interfaces it's just like a basic class",
    "start": "684040",
    "end": "689100"
  },
  {
    "text": "now the thing that you have to pay attention for is that they have to be",
    "start": "689100",
    "end": "694900"
  },
  {
    "text": "immutable because the academic runtime does not enforce them to be immutable",
    "start": "694900",
    "end": "701190"
  },
  {
    "text": "but it expects them to be so in theory",
    "start": "701190",
    "end": "708670"
  },
  {
    "text": "and as soon as your message crosses a machine boundary you no longer have have that problem because it gets serialized",
    "start": "708670",
    "end": "715300"
  },
  {
    "text": "and deserialize ins and serialize so then you break the reference that you",
    "start": "715300",
    "end": "721450"
  },
  {
    "text": "have to your object but in theory you could send a message to another actor and then keep reference to that object",
    "start": "721450",
    "end": "727060"
  },
  {
    "text": "and as long as you're on the same machine that is still like a CL are objects that you can change don't do",
    "start": "727060",
    "end": "733090"
  },
  {
    "text": "that you're gonna have a bad time so it's very easy to manipulate that but",
    "start": "733090",
    "end": "739870"
  },
  {
    "text": "just don't do it it'll it'll cause all sorts of problems now in true put they",
    "start": "739870",
    "end": "747760"
  },
  {
    "text": "claim that they can process about fifty million messages a second on a single machine I have no reason to doubt that I",
    "start": "747760",
    "end": "754060"
  },
  {
    "text": "can easily get over 1 million messages a second on my laptop so if you have like",
    "start": "754060",
    "end": "760480"
  },
  {
    "text": "a serious server you can probably achieve those numbers so how do you do",
    "start": "760480",
    "end": "766090"
  },
  {
    "text": "that with immutable messages you just make sure that everything only has",
    "start": "766090",
    "end": "771400"
  },
  {
    "text": "getter properties the only tricky part is every type of collection now you have",
    "start": "771400",
    "end": "778300"
  },
  {
    "text": "the immune system that collection stuff immutable namespace where you basically",
    "start": "778300",
    "end": "783490"
  },
  {
    "text": "get collections where you cannot add or remove items anymore so use those in",
    "start": "783490",
    "end": "789400"
  },
  {
    "text": "your messages and you're gonna be fine and then the most important thing is the",
    "start": "789400",
    "end": "796650"
  },
  {
    "start": "794000",
    "end": "794000"
  },
  {
    "text": "actor system itself because you have all these actors but something will need to",
    "start": "796650",
    "end": "801720"
  },
  {
    "text": "manage the lifecycle of your actors it needs to spin them up it needs to dispatch messages to them it needs to",
    "start": "801720",
    "end": "809520"
  },
  {
    "text": "manage all these inboxes because it could be that an actor has a full inbox of messages waiting and it needs to do",
    "start": "809520",
    "end": "815910"
  },
  {
    "text": "all the thread scheduling for you and that's the thing that we're really happy about because we don't want to do that ourselves right there's also a system",
    "start": "815910",
    "end": "823620"
  },
  {
    "text": "eventbus for if you want to do publish subscribe between actors I'm not gonna",
    "start": "823620",
    "end": "830280"
  },
  {
    "text": "dive into that today but know that it's there it's basically your big puppet master right is this is still by far the",
    "start": "830280",
    "end": "837810"
  },
  {
    "text": "best Metallica album ever and if you disagree you're wrong no an actor system",
    "start": "837810",
    "end": "844440"
  },
  {
    "text": "if you have to create that in code it's actually really easy and you go actor system create you give your actor system",
    "start": "844440",
    "end": "851850"
  },
  {
    "text": "a name and that's it now what is important is if you want to deploy",
    "start": "851850",
    "end": "857580"
  },
  {
    "text": "actors to your actor system you will always do so true something called props",
    "start": "857580",
    "end": "863660"
  },
  {
    "text": "what are props and props is basically you could see it as a pointer to the",
    "start": "863660",
    "end": "869910"
  },
  {
    "text": "constructor of your actor you can tell the actor system how it needs to",
    "start": "869910",
    "end": "875010"
  },
  {
    "text": "instantiate your actor and then the actor system will do that for you this",
    "start": "875010",
    "end": "880470"
  },
  {
    "text": "makes sure that you will never have a reference to your actor from the outside",
    "start": "880470",
    "end": "885690"
  },
  {
    "text": "you will have something called an eye actor ref like this my actor variable",
    "start": "885690",
    "end": "891420"
  },
  {
    "text": "here will be an eye actor reference and you can use that to talk to your actor you can send it messages so you just",
    "start": "891420",
    "end": "899250"
  },
  {
    "text": "instantiate an object as a message class and you do your actor ref don't tell is",
    "start": "899250",
    "end": "904910"
  },
  {
    "text": "exactly how you dispatch a message to your actor right and then the actor",
    "start": "904910",
    "end": "910830"
  },
  {
    "text": "system will take care of that for you now actors live in a hierarchy there's",
    "start": "910830",
    "end": "917460"
  },
  {
    "start": "913000",
    "end": "913000"
  },
  {
    "text": "three actors that's always present it's the root actor the user and the system actor these are the top level actors the",
    "start": "917460",
    "end": "925710"
  },
  {
    "text": "these are the system actors below the user 1 that's where you create your actors the top-level actors are the",
    "start": "925710",
    "end": "934520"
  },
  {
    "text": "ones that are directly under the user actor and then below that everything every actor can spawn children as many",
    "start": "934520",
    "end": "942110"
  },
  {
    "text": "as they want now the thing is the only thing that's really important in this to",
    "start": "942110",
    "end": "948560"
  },
  {
    "text": "remember is that your address is your place in this tree so this be tree",
    "start": "948560",
    "end": "954440"
  },
  {
    "text": "fellow at the bottom his address is slash user slash a to slash D tree and",
    "start": "954440",
    "end": "959630"
  },
  {
    "text": "that becomes very important later on that you can address these actors by their address now to make sure that if",
    "start": "959630",
    "end": "971000"
  },
  {
    "start": "967000",
    "end": "967000"
  },
  {
    "text": "an exception occurs in this whole actor hierarchy which are all processing their",
    "start": "971000",
    "end": "977030"
  },
  {
    "text": "messages and to make sure that that exception stays contained we have a concept called supervision how many of",
    "start": "977030",
    "end": "983960"
  },
  {
    "text": "you have children yeah right so take your children to a supermarket who is",
    "start": "983960",
    "end": "991040"
  },
  {
    "text": "responsible you are right if they up you have to clean up the mess right",
    "start": "991040",
    "end": "998390"
  },
  {
    "text": "that's exactly how that works in an actor system if you spawn children you",
    "start": "998390",
    "end": "1003910"
  },
  {
    "text": "are then responsible for supervising all the errors that they caused which is",
    "start": "1003910",
    "end": "1012040"
  },
  {
    "text": "actually a very very flexible concept if an exception occurs in an actor the",
    "start": "1012040",
    "end": "1018160"
  },
  {
    "text": "parent will actually have a strategy on what needs to happen you can choose to",
    "start": "1018160",
    "end": "1023200"
  },
  {
    "text": "resume which is basically okay that's not bad just continue or you can restart",
    "start": "1023200",
    "end": "1028839"
  },
  {
    "text": "the actors like ok we're gonna start over see what happens and then the message the inbox of the actor gets",
    "start": "1028839",
    "end": "1034839"
  },
  {
    "text": "preserved so that's a good thing but the state is discarded and then you have the",
    "start": "1034839",
    "end": "1041980"
  },
  {
    "text": "fact like okay yeah that messes everything up just stop what you're doing we're gonna figure out something else and you can do this for only the",
    "start": "1041980",
    "end": "1049540"
  },
  {
    "text": "failing child or for all the children this is the most important concept in in",
    "start": "1049540",
    "end": "1057100"
  },
  {
    "text": "fault tolerance in actor models right you make sure that if an exception occurs it occurs",
    "start": "1057100",
    "end": "1062260"
  },
  {
    "text": "somewhere in the bottom where it doesn't",
    "start": "1062260",
    "end": "1068260"
  },
  {
    "text": "really affect anything else so if you're going to do something risky you just push it on to an actor and then see what",
    "start": "1068260",
    "end": "1073990"
  },
  {
    "text": "happens now in general if you start programming in this you're gonna need to",
    "start": "1073990",
    "end": "1080860"
  },
  {
    "start": "1075000",
    "end": "1075000"
  },
  {
    "text": "think about your code a little bit differently you're used to doing object oriented a lot of that will transfer to",
    "start": "1080860",
    "end": "1086890"
  },
  {
    "text": "this but the main the main ideas and everything comes down to this again it's",
    "start": "1086890",
    "end": "1093250"
  },
  {
    "text": "like you've got to split your workloads into very very small tasks and you're gonna make separate actors to process",
    "start": "1093250",
    "end": "1099910"
  },
  {
    "text": "all these tasks and then you're gonna send that work to them and you push all the risks to the bottom because if it",
    "start": "1099910",
    "end": "1106870"
  },
  {
    "text": "fails there it's very contained and one thing you need to watch out for is that you don't create any bubble make actors",
    "start": "1106870",
    "end": "1113290"
  },
  {
    "text": "if you there is something like overflowing mailboxes because an actor",
    "start": "1113290",
    "end": "1118690"
  },
  {
    "text": "runs on a single threat so if you give it more messages than it can process on a single trap then you're gonna have an",
    "start": "1118690",
    "end": "1126010"
  },
  {
    "text": "ever-growing inbox but you can avoid that by making sure that your message",
    "start": "1126010",
    "end": "1131080"
  },
  {
    "text": "message flows our models do not have those there's a whole bunch of design",
    "start": "1131080",
    "end": "1136720"
  },
  {
    "text": "patterns that go with this basically the one that I just explained to you is like",
    "start": "1136720",
    "end": "1142570"
  },
  {
    "text": "you split all the work and you divide it over your children which is the fan-out pattern but there's also some proxy",
    "start": "1142570",
    "end": "1149110"
  },
  {
    "text": "patterns that you would need to use to avoid faults when you go over Network",
    "start": "1149110",
    "end": "1154720"
  },
  {
    "text": "boundaries which could happen and then there's a whole bunch there's a whole course I think it's a four hour web",
    "start": "1154720",
    "end": "1161530"
  },
  {
    "text": "course that peda bridge does but a bridge is the company that was erected by Erin standard and Roger Johansen they",
    "start": "1161530",
    "end": "1169300"
  },
  {
    "text": "actually gave production support on akkad on that you can follow that course and you will get into all these things",
    "start": "1169300",
    "end": "1174910"
  },
  {
    "text": "there's just one of them that I didn't want to withhold which is the character actor pattern anybody watches Star Trek",
    "start": "1174910",
    "end": "1181780"
  },
  {
    "start": "1176000",
    "end": "1176000"
  },
  {
    "text": "here okay what happens in Star Trek if you have like a guest actor somebody famous who comes in for like an episode",
    "start": "1181780",
    "end": "1188290"
  },
  {
    "text": "or two they arrive at a new planet and they send that game that guy down first",
    "start": "1188290",
    "end": "1194590"
  },
  {
    "text": "and he dies right well why do they do this they want to keep their main cast",
    "start": "1194590",
    "end": "1201100"
  },
  {
    "text": "alive because the main cast is important to the series you want them to be alive by the end right but some sometimes for",
    "start": "1201100",
    "end": "1208210"
  },
  {
    "text": "the storyline somebody has to die so you get a character actor in they play this one role they die that's okay because",
    "start": "1208210",
    "end": "1214029"
  },
  {
    "text": "the series moves on and that's what you do with actors as well if you know that you're going to do something risky gonna",
    "start": "1214029",
    "end": "1220510"
  },
  {
    "text": "go over a network can I go to the database I don't know you're gonna do something that might fail you push it",
    "start": "1220510",
    "end": "1226090"
  },
  {
    "text": "onto a separate actor you just monitor that for failure and you deal with the failure or success of that actor but if",
    "start": "1226090",
    "end": "1232990"
  },
  {
    "text": "that one fails your state is preserved because your actor did not die this week",
    "start": "1232990",
    "end": "1238870"
  },
  {
    "text": "all the character actor right you see if you do a risky operation you spawn a",
    "start": "1238870",
    "end": "1243909"
  },
  {
    "text": "child you delegate your opera your risky operation to them and you handle it I",
    "start": "1243909",
    "end": "1249990"
  },
  {
    "text": "think that's enough information about actors is that a little bit clearer for you how that pieces together okay let's",
    "start": "1249990",
    "end": "1256419"
  },
  {
    "text": "get into our problem domain then do these look familiar to you that's what",
    "start": "1256419",
    "end": "1261640"
  },
  {
    "text": "my meters look like in Belgium it's like electricity gas water now this was",
    "start": "1261640",
    "end": "1268539"
  },
  {
    "text": "basically what we were working on we were building a metering backend for",
    "start": "1268539",
    "end": "1274539"
  },
  {
    "text": "these and their more modern varieties that did have digital connections but we",
    "start": "1274539",
    "end": "1280299"
  },
  {
    "text": "could actually implement some optical readers on these and still get like these meters to connect to the back end",
    "start": "1280299",
    "end": "1285460"
  },
  {
    "text": "as well so how did that look in our connected situation is you will have a",
    "start": "1285460",
    "end": "1291039"
  },
  {
    "start": "1288000",
    "end": "1288000"
  },
  {
    "text": "meter in your house we would connect an IOT device to that that would get the meter readings from them it would send",
    "start": "1291039",
    "end": "1297789"
  },
  {
    "text": "it over the Internet to our back-end and our back-end was then used to present information on your smartphone it would have a web portal",
    "start": "1297789",
    "end": "1304870"
  },
  {
    "text": "where you could configure alerts all that sort of stuff that was what we were billing the red part is that what we're",
    "start": "1304870",
    "end": "1311169"
  },
  {
    "text": "going to be talking about one important concept to grasp before we dive into",
    "start": "1311169",
    "end": "1316360"
  },
  {
    "text": "this is the reading versus consumption problem these devices I'm going to go",
    "start": "1316360",
    "end": "1323710"
  },
  {
    "text": "back for a second these devices they have numbers on them well the number by itself doesn't really",
    "start": "1323710",
    "end": "1329670"
  },
  {
    "text": "mean anything because you could have bought the house and there would already be a meter reading on there what is",
    "start": "1329670",
    "end": "1336600"
  },
  {
    "text": "important to you is like okay how much did that reading change regarding to the",
    "start": "1336600",
    "end": "1342330"
  },
  {
    "text": "last time that I checked that is your consumption that is the thing that you're gonna get built for that is the",
    "start": "1342330",
    "end": "1348810"
  },
  {
    "text": "thing that you're probably gonna care about not about the number per se so the blue line would be our meter readings",
    "start": "1348810",
    "end": "1355740"
  },
  {
    "text": "but then the difference between that and the previous five minutes mark is basically what we consumed and",
    "start": "1355740",
    "end": "1364020"
  },
  {
    "text": "that's the thing that is interesting to work with so what did we want to do with",
    "start": "1364020",
    "end": "1369840"
  },
  {
    "text": "these readings we want to store all of them for all eternity so that we would have historic usage historic use usage",
    "start": "1369840",
    "end": "1378930"
  },
  {
    "text": "data for analysis so we wanted to store all the normalized",
    "start": "1378930",
    "end": "1384360"
  },
  {
    "text": "values we wanted to be able to plot graphs on top of that we wanted to",
    "start": "1384360",
    "end": "1390210"
  },
  {
    "text": "compare time periods and then we wanted to have alerting on them we did have some machine learning that would detect",
    "start": "1390210",
    "end": "1398390"
  },
  {
    "text": "unusual situations not what we're going to talk about today but we wanted to",
    "start": "1398390",
    "end": "1403620"
  },
  {
    "text": "present some alerts to the user on their phones I hate something is happening in your house that is not correct please go",
    "start": "1403620",
    "end": "1409710"
  },
  {
    "text": "check usually it's when consumption exceeded certain thresholds this is",
    "start": "1409710",
    "end": "1417570"
  },
  {
    "start": "1417000",
    "end": "1417000"
  },
  {
    "text": "really clear if I want my consumption to never exceed the red line then at 10:30",
    "start": "1417570",
    "end": "1424350"
  },
  {
    "text": "I would get an alert on my phone right what becomes a lot harder is if you look",
    "start": "1424350",
    "end": "1430200"
  },
  {
    "start": "1430000",
    "end": "1430000"
  },
  {
    "text": "at a periodic threshold it's like yeah I don't want to go over a certain line for",
    "start": "1430200",
    "end": "1435720"
  },
  {
    "text": "the next 20 minutes and then it becomes a business discussion that you're gonna need to have because that red line it's",
    "start": "1435720",
    "end": "1443160"
  },
  {
    "text": "very clear you've been over that red line for 20 minutes that's very clear you should trigger a trigger an alert",
    "start": "1443160",
    "end": "1449700"
  },
  {
    "text": "now the Green Line is a different story you exceeded it a few times you didn't",
    "start": "1449700",
    "end": "1455370"
  },
  {
    "text": "exceed it every time block but still you exceeded it on average",
    "start": "1455370",
    "end": "1460750"
  },
  {
    "text": "there is no correct answer but that's the kind of discussions that you're gonna have to have with your business when you get into this right so then it",
    "start": "1460750",
    "end": "1468280"
  },
  {
    "text": "behaves as expected so basically that's what the part of the the problem that",
    "start": "1468280",
    "end": "1474400"
  },
  {
    "text": "we're gonna look at today now how does a kebab net fit into this if you're gonna",
    "start": "1474400",
    "end": "1479650"
  },
  {
    "text": "build an IOT stake on the.net ecosystem chances are that you're going to look at Asia and your typical IOT stack will",
    "start": "1479650",
    "end": "1488140"
  },
  {
    "start": "1484000",
    "end": "1484000"
  },
  {
    "text": "have to have a few things and the first thing is the communication to your devices somebody has already solved that",
    "start": "1488140",
    "end": "1495550"
  },
  {
    "text": "problem for you but what you're basically going to want to do is your devices will authenticate against your",
    "start": "1495550",
    "end": "1501400"
  },
  {
    "text": "back end they will send you events so you will need to be able to accept",
    "start": "1501400",
    "end": "1506740"
  },
  {
    "text": "messages from your devices you would have to detect if they are online like",
    "start": "1506740",
    "end": "1512980"
  },
  {
    "text": "presence detection very important thing and then you would want to send control to them turn on the lights set the set",
    "start": "1512980",
    "end": "1520540"
  },
  {
    "text": "point of your thermostat that sort of thing thing right you get all that out of the box in IOT hub don't write it yourself",
    "start": "1520540",
    "end": "1527800"
  },
  {
    "text": "we did because we started before IOT hub existed I would not do it again now next",
    "start": "1527800",
    "end": "1534760"
  },
  {
    "text": "to that that is how you connect to your devices but then you're gonna need to start processing data and store it so",
    "start": "1534760",
    "end": "1541570"
  },
  {
    "text": "you're gonna have to look at all these compute components probably gonna look at at your functions or service fabric",
    "start": "1541570",
    "end": "1548080"
  },
  {
    "text": "you're probably gonna use some cue somewhere you server service bus stream analytics and then you're gonna store it",
    "start": "1548080",
    "end": "1555520"
  },
  {
    "text": "in various ways if you want to store lots of bulk data like time stamps bulk data you could basically dump that into",
    "start": "1555520",
    "end": "1562660"
  },
  {
    "text": "a blob per device that works really well because blobs have indexed search so if",
    "start": "1562660",
    "end": "1567760"
  },
  {
    "text": "you know when the blob started you can point to a certain location in the blob and just read some data there that's the data are gonna need if you need to store",
    "start": "1567760",
    "end": "1575200"
  },
  {
    "text": "lots of sensor data really cheaply that's a way to do it but you can use",
    "start": "1575200",
    "end": "1580720"
  },
  {
    "text": "like cosmos DB or as your sequel whatever you need and then you still",
    "start": "1580720",
    "end": "1586870"
  },
  {
    "text": "haven't created any business value yet then you're gonna need to present that data in portals and apps and",
    "start": "1586870",
    "end": "1593309"
  },
  {
    "text": "analytics on the that and machine learning and all of that so you're gonna use things like app services service",
    "start": "1593309",
    "end": "1599820"
  },
  {
    "text": "fabric you're gonna use notification hub to push your notifications to your",
    "start": "1599820",
    "end": "1605809"
  },
  {
    "text": "devices you could use power bi to build some dashboards now not all of this can",
    "start": "1605809",
    "end": "1610860"
  },
  {
    "text": "be done by accident net I mean basically the compute and analytics part is where it would be",
    "start": "1610860",
    "end": "1617999"
  },
  {
    "text": "useful to use an actor/model because that's what it's really good at i",
    "start": "1617999",
    "end": "1623399"
  },
  {
    "text": "wouldn't build a website using our current net per se it could talk to it in a backhand but there's no added value",
    "start": "1623399",
    "end": "1631220"
  },
  {
    "text": "so what our setup looked like is we had our current net cluster the a cannot net",
    "start": "1631220",
    "end": "1637019"
  },
  {
    "text": "cluster talked to all of the storage components that we had and on top of that we had the web portal that",
    "start": "1637019",
    "end": "1644070"
  },
  {
    "text": "basically talked to the cluster to present the data to the user and then on",
    "start": "1644070",
    "end": "1650279"
  },
  {
    "text": "the device site we had IOT hub talk to the devices and then you had an event",
    "start": "1650279",
    "end": "1656519"
  },
  {
    "text": "stream you familiar with IOT hub or event have a measure it's basically a string of messages and",
    "start": "1656519",
    "end": "1663389"
  },
  {
    "text": "you have a pointer and you can move your own pointer right so you start reading at a certain point and then you get all",
    "start": "1663389",
    "end": "1669960"
  },
  {
    "text": "the messages so we had an app service that had a pointer and that would relay the messages to the Aqua Net cluster so",
    "start": "1669960",
    "end": "1679440"
  },
  {
    "text": "this is a pet peeve of mine don't be a magpie okay you all know about the magpie like a white bird like shiny",
    "start": "1679440",
    "end": "1685470"
  },
  {
    "text": "things don't be that developer don't use a framework because you want to use it use it because it's appropriate for your",
    "start": "1685470",
    "end": "1692220"
  },
  {
    "text": "use case so I could not know this useful if you need to build something that has",
    "start": "1692220",
    "end": "1697470"
  },
  {
    "text": "lots of state and needs lots of true put and you want to have a high degree of parallelization trading systems gaming",
    "start": "1697470",
    "end": "1705149"
  },
  {
    "text": "backends IOT applications I mean everything that you want to highly paralyze that is what it's good for but",
    "start": "1705149",
    "end": "1711570"
  },
  {
    "text": "it's always going to be part of the solution so I'm going to show you a few",
    "start": "1711570",
    "end": "1717389"
  },
  {
    "text": "of the important parts of our actual implementation of this so that you can",
    "start": "1717389",
    "end": "1723029"
  },
  {
    "text": "understand how it all pieces together these are the four things that I'm gonna",
    "start": "1723029",
    "end": "1728450"
  },
  {
    "text": "explain and I'm gonna then I'm gonna let you have your lunch the first tricky thing is if you look",
    "start": "1728450",
    "end": "1737010"
  },
  {
    "text": "back at this graph you see that the Aqua Net cluster runs by itself and if you",
    "start": "1737010",
    "end": "1744120"
  },
  {
    "text": "remember from a few slides ago sending a message to it was done in process right",
    "start": "1744120",
    "end": "1749400"
  },
  {
    "text": "you had the actor system and then you could get an actual reference by creating it with props but we're not",
    "start": "1749400",
    "end": "1755280"
  },
  {
    "text": "gonna do that over the network so we have to run our actor system as a",
    "start": "1755280",
    "end": "1761340"
  },
  {
    "text": "cluster and the way that we do that is to use remoting and the funny thing",
    "start": "1761340",
    "end": "1768690"
  },
  {
    "text": "about this is if you want to talk to an actor system remotely you create your own actor system locally because actor",
    "start": "1768690",
    "end": "1775530"
  },
  {
    "text": "systems can talk to each other and that's what I cut remote does the cool",
    "start": "1775530",
    "end": "1781320"
  },
  {
    "text": "thing is this is like 100 percent transparent so you have an address and",
    "start": "1781320",
    "end": "1787890"
  },
  {
    "text": "you know that you're gonna talk to an actor system that lifts somewhere else you're gonna have your protocol this is",
    "start": "1787890",
    "end": "1794310"
  },
  {
    "text": "like a URL that you could see in any protocol right you have a protocol the",
    "start": "1794310",
    "end": "1799650"
  },
  {
    "text": "name of your actor system the address where it is on the network and then the location of your actor right that is",
    "start": "1799650",
    "end": "1806880"
  },
  {
    "text": "your actor pop now the thing is you can even create that actor remotely so you",
    "start": "1806880",
    "end": "1814290"
  },
  {
    "text": "can basically tell it to create that actor at that location and then the other actor system will create it for",
    "start": "1814290",
    "end": "1819600"
  },
  {
    "text": "you now what the funny thing is I talked to you about these AI actor refs right",
    "start": "1819600",
    "end": "1826530"
  },
  {
    "text": "the one that you got back when you created your actors with your props those objects are completely location",
    "start": "1826530",
    "end": "1833520"
  },
  {
    "text": "transparent that you can pass them around so if you have an actor F to a certain actor you can just pass it over",
    "start": "1833520",
    "end": "1840150"
  },
  {
    "text": "the network as a message and that one will get the eye actor F and it can talk to the actor that it points to even if",
    "start": "1840150",
    "end": "1846660"
  },
  {
    "text": "it lives somewhere else that's what we call location transparency and that's really important in this whole scenario",
    "start": "1846660",
    "end": "1853580"
  },
  {
    "text": "there are more transports than just TCP one of the big upgrades in",
    "start": "1853580",
    "end": "1860070"
  },
  {
    "text": "I cannot net 1.4 that's coming out in a few weeks they released beta 4 yesterday I think is that there's gonna be some",
    "start": "1860070",
    "end": "1868129"
  },
  {
    "text": "performance improvements on the TCP protocol not that it's slow now it's",
    "start": "1868129",
    "end": "1873269"
  },
  {
    "text": "just gonna be lots faster when we're done so what did it look like for us",
    "start": "1873269",
    "end": "1879149"
  },
  {
    "text": "this is the getting you're getting your messages to your actor system on the",
    "start": "1879149",
    "end": "1884759"
  },
  {
    "text": "right you will see the aqua dotnet cluster that's where all the actors for",
    "start": "1884759",
    "end": "1889889"
  },
  {
    "text": "our devices live on the left you will see the app service that reads from the",
    "start": "1889889",
    "end": "1895399"
  },
  {
    "text": "IOT hub event stream and that the ones to dispatch all the messages to the",
    "start": "1895399",
    "end": "1901590"
  },
  {
    "text": "remote actors system and how that works is you create an actor system in your",
    "start": "1901590",
    "end": "1908940"
  },
  {
    "text": "client that's your client actor system and you're gonna have a bunch of actors there so what I will do",
    "start": "1908940",
    "end": "1915149"
  },
  {
    "text": "is I will create a proxy actor for every device identified by its UUID",
    "start": "1915149",
    "end": "1922580"
  },
  {
    "text": "and I will create that proxy actor and",
    "start": "1922580",
    "end": "1927659"
  },
  {
    "text": "that proxy actor on startup will talk to the remote actor system and it will ask",
    "start": "1927659",
    "end": "1933690"
  },
  {
    "text": "the top-level actor there it will send a connect message is like hey I'm device",
    "start": "1933690",
    "end": "1938700"
  },
  {
    "text": "with UUID blah blah blah and that actor will actually figure out if the device",
    "start": "1938700",
    "end": "1945210"
  },
  {
    "text": "already exists if it doesn't it creates it and then it will pass the iecturers",
    "start": "1945210",
    "end": "1951479"
  },
  {
    "text": "back to the device proxy the reason that",
    "start": "1951479",
    "end": "1959279"
  },
  {
    "text": "we do this is if this one has an actor ref in memory everything is a lot faster",
    "start": "1959279",
    "end": "1964470"
  },
  {
    "text": "you can talk to it by address but then you use an actor selection and actor selections are way slower than eye actor",
    "start": "1964470",
    "end": "1970229"
  },
  {
    "text": "references and from Denham basically any message that comes in from the event",
    "start": "1970229",
    "end": "1976289"
  },
  {
    "text": "stream can get relate to that one and that one can talk to the device actor directly this is basically how you run",
    "start": "1976289",
    "end": "1983429"
  },
  {
    "text": "that whole proxy remoting thing and the fun thing is you can extend your proxies",
    "start": "1983429",
    "end": "1988710"
  },
  {
    "text": "to detect if the other side is still present because that will actually get messages in and that you can subscribe to if the",
    "start": "1988710",
    "end": "1995639"
  },
  {
    "text": "message is that it tries to send to the other side if they fail so then you can retry and end that sort of stuff what",
    "start": "1995639",
    "end": "2003229"
  },
  {
    "text": "does that look like in code and this is a very busy slide I'm really sorry but the important things are your actors can",
    "start": "2003229",
    "end": "2011899"
  },
  {
    "text": "have a pre-start minute and that is code that gets executed before it accepts its",
    "start": "2011899",
    "end": "2017899"
  },
  {
    "text": "first message and that is very beneficial because this code here in the",
    "start": "2017899",
    "end": "2024289"
  },
  {
    "text": "pre-start it will make that connection to the other side so what it does is we have",
    "start": "2024289",
    "end": "2030349"
  },
  {
    "text": "that top-level actor and we define that as an address and the remotes actor",
    "start": "2030349",
    "end": "2035359"
  },
  {
    "text": "system is basically the protocol and and the network address of our remote hectare system and we talk to it and we",
    "start": "2035359",
    "end": "2043070"
  },
  {
    "text": "use an actor selection and that doesn't really matter I told you that extra extra actor selections are slower than",
    "start": "2043070",
    "end": "2048679"
  },
  {
    "text": "actor references but this only happens once per device after startup doesn't",
    "start": "2048679",
    "end": "2053898"
  },
  {
    "text": "matter if this is a little bit slower you get an actor selection you can talk",
    "start": "2053899",
    "end": "2061940"
  },
  {
    "text": "to an actor selection as well by just using tell and you send the Kinect device message to the other side and",
    "start": "2061940",
    "end": "2068480"
  },
  {
    "text": "then the other actor will basically reply to its sender which is very useful",
    "start": "2068480",
    "end": "2075069"
  },
  {
    "text": "and that will come here and you will have the handle device connected message",
    "start": "2075069",
    "end": "2080270"
  },
  {
    "text": "will come in and you will basically now have your reference to the other side that you can talk to now you notice that",
    "start": "2080270",
    "end": "2087500"
  },
  {
    "text": "we are not using an untyped any actor anymore but we have a receive actor and a receive extra is a more strongly typed",
    "start": "2087500",
    "end": "2094010"
  },
  {
    "text": "version of the actor and basically what you can do in the constructor you can",
    "start": "2094010",
    "end": "2099049"
  },
  {
    "text": "have these receive methods for various message types it looks a lot cleaner for me as an oo developer this is like it",
    "start": "2099049",
    "end": "2106880"
  },
  {
    "text": "feels like I'm doing the right thing and all my functions are single responsibility so every time this proxy",
    "start": "2106880",
    "end": "2117380"
  },
  {
    "text": "gets a message it can now just forward it to the device actor which lives on the other side and this is a tip that",
    "start": "2117380",
    "end": "2126020"
  },
  {
    "text": "I'm gonna give you what I always do is you remember those",
    "start": "2126020",
    "end": "2131030"
  },
  {
    "text": "props to create actors what I always do on every actor is I make a static method",
    "start": "2131030",
    "end": "2136970"
  },
  {
    "text": "that I call create props that map's all the parameters because you have this",
    "start": "2136970",
    "end": "2142850"
  },
  {
    "text": "props create and you give it all the constructor parameters and you see this constructor parameter maps to that one",
    "start": "2142850",
    "end": "2148780"
  },
  {
    "text": "now that is in no way strongly typed so you can do create props and then you have a programs array and if you",
    "start": "2148780",
    "end": "2156320"
  },
  {
    "text": "refactor your constructor and you add or you remove a parameter your compiler is not gonna break but it does if you do it",
    "start": "2156320",
    "end": "2163730"
  },
  {
    "text": "like this I make sure that I only consume the create props and I make sure",
    "start": "2163730",
    "end": "2168800"
  },
  {
    "text": "that that maps with the constructor at the top and then if I want to refactor my constructor I know exactly where am i",
    "start": "2168800",
    "end": "2174830"
  },
  {
    "text": "code that was used because that will actually break up on compilation did",
    "start": "2174830",
    "end": "2181910"
  },
  {
    "text": "that make sense if I told you that okay good now the top level lights are on the other side the",
    "start": "2181910",
    "end": "2187550"
  },
  {
    "text": "devices actor the one that receives that connect message and has to reply that basically checks if it's dictionary of",
    "start": "2187550",
    "end": "2198110"
  },
  {
    "text": "actor references already contains this UUID if it doesn't it creates it and",
    "start": "2198110",
    "end": "2203990"
  },
  {
    "text": "then it will just reply with a response and you can do sender dot tell because",
    "start": "2203990",
    "end": "2211970"
  },
  {
    "text": "you know your actor is and single-threaded which means before you",
    "start": "2211970",
    "end": "2217400"
  },
  {
    "text": "start processing the message a lot of stuff is set on the execution context of",
    "start": "2217400",
    "end": "2224930"
  },
  {
    "text": "your actor and every actor class has a sender property which is basically a",
    "start": "2224930",
    "end": "2230000"
  },
  {
    "text": "reference to the one who sent you this message and there's a bunch more you have like a context there's a whole",
    "start": "2230000",
    "end": "2236030"
  },
  {
    "text": "bunch of things that you could that you have available to you on that thread that is set before the message is",
    "start": "2236030",
    "end": "2241700"
  },
  {
    "text": "dispatched and because you're the only one processing it will always work at",
    "start": "2241700",
    "end": "2247570"
  },
  {
    "text": "one thing is important though an address needs to be unique in the hierarchy so",
    "start": "2247570",
    "end": "2252590"
  },
  {
    "text": "if you have our setup like it was you will need to include your device ID in the address somehow because otherwise",
    "start": "2252590",
    "end": "2258950"
  },
  {
    "text": "your addresses are not you in the hierarchy so that's one thing",
    "start": "2258950",
    "end": "2264020"
  },
  {
    "text": "that you need to look out for that is",
    "start": "2264020",
    "end": "2269030"
  },
  {
    "text": "how we got our messages to our akka cluster the next thing that we need to",
    "start": "2269030",
    "end": "2274850"
  },
  {
    "text": "think about is how we normalize data because your business logic is really",
    "start": "2274850",
    "end": "2280400"
  },
  {
    "text": "easy to reason about you're talking to a business owners like yeah think about this alerting situation that is really",
    "start": "2280400",
    "end": "2287180"
  },
  {
    "text": "easy to reason about but in the real in real worlds your data will not look like",
    "start": "2287180",
    "end": "2293869"
  },
  {
    "text": "that so you might want to normalize what you do and it becomes a lot easier from",
    "start": "2293869",
    "end": "2301190"
  },
  {
    "start": "2296000",
    "end": "2296000"
  },
  {
    "text": "my experience if you normalize the data stream that comes in and then only use",
    "start": "2301190",
    "end": "2307970"
  },
  {
    "text": "the normalized data downstream it becomes a lot easier when you know that",
    "start": "2307970",
    "end": "2313190"
  },
  {
    "text": "there are no gaps that timestamps are consistent all that sort of stuff these",
    "start": "2313190",
    "end": "2319100"
  },
  {
    "text": "meters and even the ones that do have serial ports they sometimes send",
    "start": "2319100",
    "end": "2324260"
  },
  {
    "text": "gibberish and well if it's like a message that is corrupt you might detect",
    "start": "2324260",
    "end": "2331700"
  },
  {
    "text": "it sometimes it's just like a single number that flips but that might change your meter reading which means you might",
    "start": "2331700",
    "end": "2338210"
  },
  {
    "text": "get a huge peak in your graph for instance it happens these are in no way",
    "start": "2338210",
    "end": "2344140"
  },
  {
    "text": "perfect devices so I want in my codebase I always want to deal with that in one",
    "start": "2344140",
    "end": "2349310"
  },
  {
    "text": "place and if you look at that in a table and if you have a very consistent consumption of 60 kilowatt hours every",
    "start": "2349310",
    "end": "2357560"
  },
  {
    "start": "2350000",
    "end": "2350000"
  },
  {
    "text": "minute then it would look like this but you would maybe get measurements at 25",
    "start": "2357560",
    "end": "2364820"
  },
  {
    "text": "seconds past or this times this timestamp could drift sometimes these are very very very low powered CPUs and",
    "start": "2364820",
    "end": "2372520"
  },
  {
    "text": "you would get a reading every 25 seconds but it would be 25 seconds since the",
    "start": "2372520",
    "end": "2377900"
  },
  {
    "text": "last time it finished processing but because the CPUs are so slow that could take like half a second so over time you",
    "start": "2377900",
    "end": "2384290"
  },
  {
    "text": "would drift and that's okay if you fix that in one place so what we did we",
    "start": "2384290",
    "end": "2391250"
  },
  {
    "text": "wanted to have like a value every five exactly like on the 5-minute mark",
    "start": "2391250",
    "end": "2397520"
  },
  {
    "text": "because that became really easy to reason about and then we would normalize the reading and the consumption and it's",
    "start": "2397520",
    "end": "2403860"
  },
  {
    "text": "simple interpolation that is not really hard to do so you take that data put it",
    "start": "2403860",
    "end": "2409770"
  },
  {
    "text": "into a bucket summarize it and then all the business logic will work on the data on the right but the biggest problem is",
    "start": "2409770",
    "end": "2418800"
  },
  {
    "start": "2416000",
    "end": "2416000"
  },
  {
    "text": "gap filling because these devices they live at your customer and their internet connections are not reliable especially",
    "start": "2418800",
    "end": "2425490"
  },
  {
    "text": "if you're in Australia as we learned yesterday evening now if you miss a",
    "start": "2425490",
    "end": "2431130"
  },
  {
    "text": "couple of buckets what do you want to do with that and that's a business decision",
    "start": "2431130",
    "end": "2436830"
  },
  {
    "text": "it's not your decision as a developer because fixing this is really easy but",
    "start": "2436830",
    "end": "2441840"
  },
  {
    "text": "there is no right answer I thought about it for like five minutes and there's at least six ways to solve this and",
    "start": "2441840",
    "end": "2448050"
  },
  {
    "text": "actually the one that we used was another one than this or there seven and you can choose to choose not fill it and",
    "start": "2448050",
    "end": "2455240"
  },
  {
    "text": "you will have a gap in your graph or you could like do the diff between the last",
    "start": "2455240",
    "end": "2463320"
  },
  {
    "text": "blue dot and the first one and just like put it as one peak value all the",
    "start": "2463320",
    "end": "2468900"
  },
  {
    "text": "consumption in one bucket it's usually not what you want because you will trigger trigger alerts that way yeah you",
    "start": "2468900",
    "end": "2475680"
  },
  {
    "text": "can put that peak in the beginning of your time period or at the end or in the middle you can choose to take that value",
    "start": "2475680",
    "end": "2481950"
  },
  {
    "text": "and split it evenly and in a graph like this one that might make sense but if",
    "start": "2481950",
    "end": "2487860"
  },
  {
    "text": "your device has been offline for three days splitting it evenly it doesn't make",
    "start": "2487860",
    "end": "2493530"
  },
  {
    "text": "sense at all because your power consumption or your water consumption is not linear so you might like plot it out",
    "start": "2493530",
    "end": "2501240"
  },
  {
    "text": "over a trend line that's like we take the value before then the value after anyway we just plot it on the line even",
    "start": "2501240",
    "end": "2507480"
  },
  {
    "text": "that is wrong so what we eventually did is we would look at the same time period",
    "start": "2507480",
    "end": "2513360"
  },
  {
    "text": "last week and see how the graph evolved and then build a similar shape with",
    "start": "2513360",
    "end": "2521400"
  },
  {
    "text": "which amounted to the amount of consumption that we knew that we had in our gap that was like the closest",
    "start": "2521400",
    "end": "2527040"
  },
  {
    "text": "approximation that we could get to being correct it's still wrong",
    "start": "2527040",
    "end": "2532079"
  },
  {
    "text": "but it's for our purposes it was okay so",
    "start": "2532079",
    "end": "2537270"
  },
  {
    "text": "gap-filling is something that you're gonna have to talk to to your business and sometimes you're gonna have to decide to notify your downstream actors",
    "start": "2537270",
    "end": "2545130"
  },
  {
    "text": "like hey this is gap-fill data because you might want to decide to maybe not",
    "start": "2545130",
    "end": "2550290"
  },
  {
    "text": "trigger trigger alerts on capful Dana right now how does that work if you're",
    "start": "2550290",
    "end": "2556740"
  },
  {
    "text": "writing code if you receive these meter readings on your device actor you have a",
    "start": "2556740",
    "end": "2562800"
  },
  {
    "text": "normalization actor as a child that takes in all these readings and you just",
    "start": "2562800",
    "end": "2568950"
  },
  {
    "text": "forwards your incoming meter readings to your normalization actor that one does",
    "start": "2568950",
    "end": "2574770"
  },
  {
    "text": "all the mats that you decided to use to normalize it and then you send normalized meter readings back up to",
    "start": "2574770",
    "end": "2581609"
  },
  {
    "text": "your parent & parent is another one of those properties that is always filled on the threat of your actor and all the",
    "start": "2581609",
    "end": "2589619"
  },
  {
    "text": "downstream actors from there on they will just use the normalize data this is a very easy setup and it makes the rest",
    "start": "2589619",
    "end": "2595619"
  },
  {
    "text": "of your actors a lot simpler now another thing and that we haven't discussed this",
    "start": "2595619",
    "end": "2601740"
  },
  {
    "text": "yet but you realize that until now we've always talked about state being",
    "start": "2601740",
    "end": "2606869"
  },
  {
    "text": "properties on your objects right data internal to your object and what happens",
    "start": "2606869",
    "end": "2613650"
  },
  {
    "text": "if you recycle the process all of that is gone what happens if your actor false and it asks its parents and it gets",
    "start": "2613650",
    "end": "2620069"
  },
  {
    "text": "rebooted because of your supervision strategy the data on that actor is also",
    "start": "2620069",
    "end": "2625349"
  },
  {
    "text": "gone you can preserve the mailbox you cannot preserve the state so how do we",
    "start": "2625349",
    "end": "2631020"
  },
  {
    "text": "deal with that actually there's a library called ICAP persistence and instead of implementing the untyped",
    "start": "2631020",
    "end": "2638400"
  },
  {
    "start": "2633000",
    "end": "2633000"
  },
  {
    "text": "actor or the types actor you can basically use the persistent vector and there's like a persistent type actor as",
    "start": "2638400",
    "end": "2644640"
  },
  {
    "text": "well basically you give the actor that",
    "start": "2644640",
    "end": "2649920"
  },
  {
    "text": "you want to persist state from you give it a persistence ID that needs to be unique because that's gonna be the key",
    "start": "2649920",
    "end": "2655800"
  },
  {
    "text": "in your database and then you can call persists whenever you feel that a state",
    "start": "2655800",
    "end": "2662099"
  },
  {
    "text": "it's persisting and is basically an event source system so you are going to persist events and they will replay a",
    "start": "2662099",
    "end": "2668759"
  },
  {
    "text": "Pommery start right you can persist commands you can save snapshots because you don't want to",
    "start": "2668759",
    "end": "2675960"
  },
  {
    "text": "replay all events for all eternity you want to start from like a fixed point in time and just replay the last bit and",
    "start": "2675960",
    "end": "2682890"
  },
  {
    "text": "when your actor is created and it is a persistent actor it will actually query the database get all the comments that",
    "start": "2682890",
    "end": "2689940"
  },
  {
    "text": "were persistent out it will restore your last snapshot it will restore replay all the commands and you will be in sync",
    "start": "2689940",
    "end": "2696420"
  },
  {
    "text": "again right you're familiar with the event sourcing as a concept cool so how",
    "start": "2696420",
    "end": "2703259"
  },
  {
    "text": "do you do that this is the receive persistent actor and now you have to start thinking about the difference",
    "start": "2703259",
    "end": "2709079"
  },
  {
    "text": "between actual commands and recover messages because they are different",
    "start": "2709079",
    "end": "2714539"
  },
  {
    "text": "things I will see on the next slide what that means for your business logic this",
    "start": "2714539",
    "end": "2721559"
  },
  {
    "text": "persistent ID has to be unique so we put the device ID in there and then we will",
    "start": "2721559",
    "end": "2729029"
  },
  {
    "text": "send every command we'll go to the handle commands message and then every",
    "start": "2729029",
    "end": "2734069"
  },
  {
    "text": "recovery will go to the internal handle message there are some recovery methods",
    "start": "2734069",
    "end": "2741059"
  },
  {
    "text": "for snapshot and you can basically because saving a snapshot isn't a sync method you can get a result from that",
    "start": "2741059",
    "end": "2748380"
  },
  {
    "text": "operation if it's important to you to know if your snapshot succeeded or not",
    "start": "2748380",
    "end": "2754849"
  },
  {
    "text": "it doesn't really matter if you miss a snapshot in most scenarios because you",
    "start": "2754849",
    "end": "2759900"
  },
  {
    "text": "will just recover from the previous snapshot but if it's important to your logic to know if this if the snapshot",
    "start": "2759900",
    "end": "2765329"
  },
  {
    "text": "succeeded you can subscribe to these two the safe success and the safe failure now if you handle your command you're",
    "start": "2765329",
    "end": "2772619"
  },
  {
    "text": "going to call the persist method and the persist method has to two parameters",
    "start": "2772619",
    "end": "2778799"
  },
  {
    "text": "first is the message that you would like to persist and the second is the",
    "start": "2778799",
    "end": "2784710"
  },
  {
    "text": "internal business logic that you would like to call when the persist is successful and it does these two things",
    "start": "2784710",
    "end": "2791249"
  },
  {
    "text": "in sync right so if the persist fails it will not actually and handle the internal message and then",
    "start": "2791249",
    "end": "2800400"
  },
  {
    "text": "your business logic you're gonna write down here because if you're recovering from a previous state you don't want to",
    "start": "2800400",
    "end": "2806970"
  },
  {
    "text": "persist the messages again right you don't want to have a persist in there because then you will have this loop of",
    "start": "2806970",
    "end": "2812510"
  },
  {
    "text": "never-ending persistence and every hundred messages you can maybe decide to",
    "start": "2812510",
    "end": "2817680"
  },
  {
    "text": "just make a snapshot what I usually do is I create a state object for my actor",
    "start": "2817680",
    "end": "2824280"
  },
  {
    "text": "that includes all the state that I want to persist makes it a lot easier because you can just go like save snapshot state",
    "start": "2824280",
    "end": "2830910"
  },
  {
    "text": "and you don't have to think about which fields you still need to fill and your",
    "start": "2830910",
    "end": "2837540"
  },
  {
    "text": "snapshot offer when that restores that is basically if you you reboot a",
    "start": "2837540",
    "end": "2842790"
  },
  {
    "text": "persistent actor that's the first thing that's gonna come in you're gonna get a snapshot offer if you have snapshots then it's gonna replay all the messages",
    "start": "2842790",
    "end": "2849980"
  },
  {
    "text": "from the persisted queue and only then does it start accepting new messages now",
    "start": "2849980",
    "end": "2858030"
  },
  {
    "text": "how does that piece into our device situation remember we want to store all",
    "start": "2858030",
    "end": "2863690"
  },
  {
    "text": "historic values not just the values that were working with right now so what we",
    "start": "2863690",
    "end": "2868890"
  },
  {
    "text": "did is we had a value storage actor which was a persistent vector with the",
    "start": "2868890",
    "end": "2876420"
  },
  {
    "text": "mechanisms that I just explained and that one used to keep a working set of data that was big enough to handle all",
    "start": "2876420",
    "end": "2883950"
  },
  {
    "text": "the runtime data all the alerts that we needed to process all the business logic but not data for all eternity",
    "start": "2883950",
    "end": "2891180"
  },
  {
    "text": "so if data would fall outside of that window it would get relayed one level",
    "start": "2891180",
    "end": "2897240"
  },
  {
    "text": "down to another actor that would you basically save it to permanent storage",
    "start": "2897240",
    "end": "2902960"
  },
  {
    "text": "so that we could later re-query it back but it wouldn't have to get rebuilt",
    "start": "2902960",
    "end": "2908400"
  },
  {
    "text": "every time the actor system rebooted we just want to have the working set it is enough to do our operations we didn't",
    "start": "2908400",
    "end": "2915210"
  },
  {
    "text": "want to get all data for all eternity back up to our value store ejector right because that's important we wanted to",
    "start": "2915210",
    "end": "2922380"
  },
  {
    "text": "have a restart behavior because in the real world you're gonna like build new",
    "start": "2922380",
    "end": "2927660"
  },
  {
    "text": "features and you're gonna need to read which usually means that you need to reboot your acai cluster so you need to",
    "start": "2927660",
    "end": "2935240"
  },
  {
    "text": "get all that state back up and running after you redeploy",
    "start": "2935240",
    "end": "2940640"
  },
  {
    "text": "a new version of your code and get back up and running as quickly as you can so",
    "start": "2940640",
    "end": "2947390"
  },
  {
    "start": "2947000",
    "end": "2947000"
  },
  {
    "text": "recreating your actors is not really that hard you query the database for the actors that are supposed to be Darren",
    "start": "2947390",
    "end": "2953359"
  },
  {
    "text": "you just spawn children and they will all query the persistence database for",
    "start": "2953359",
    "end": "2958700"
  },
  {
    "text": "there snapshots and their events now that works really well because they're",
    "start": "2958700",
    "end": "2964250"
  },
  {
    "text": "all single table selects and they all query by key so it's really snap fast you can restore a million actors in no",
    "start": "2964250",
    "end": "2971180"
  },
  {
    "text": "time the problem is if you make all your actors persistent your database",
    "start": "2971180",
    "end": "2977599"
  },
  {
    "text": "connection is going to become extremely chatty and that will become your bottleneck so our strategy wants to have",
    "start": "2977599",
    "end": "2984619"
  },
  {
    "text": "one actor that basically persisted all the data per device and all the rest of",
    "start": "2984619",
    "end": "2990470"
  },
  {
    "text": "the actors if they need to restore their state they would actually query that actor and if you remember first we get",
    "start": "2990470",
    "end": "2999319"
  },
  {
    "text": "our snapshot then we get our events and only then do we start accepting messages from other actors so if other actors",
    "start": "2999319",
    "end": "3005650"
  },
  {
    "text": "send a message to query the state that they need the persistent actor will have rebuilt and will have that state in",
    "start": "3005650",
    "end": "3012160"
  },
  {
    "text": "memory and it can respond with it to the other actors by minimizing this you can",
    "start": "3012160",
    "end": "3018579"
  },
  {
    "text": "basically improve the scaling of your restart behavior after you deploy so we",
    "start": "3018579",
    "end": "3027160"
  },
  {
    "text": "did that we had a value storage actor and the normalization actor needs data",
    "start": "3027160",
    "end": "3033250"
  },
  {
    "text": "to work with because it needs to know what the previous message was that it got so which will just ask the value storage",
    "start": "3033250",
    "end": "3039369"
  },
  {
    "text": "actor for that up on store start up all the alerts actors will do the same thing",
    "start": "3039369",
    "end": "3044410"
  },
  {
    "text": "and that's how you basically make that work and if you piece all this together",
    "start": "3044410",
    "end": "3049990"
  },
  {
    "text": "in a good way you can basically get up to running really quickly after a restart",
    "start": "3049990",
    "end": "3056970"
  },
  {
    "text": "that's the stuff that I wanted to talk to you about today now if you want to move forward or further from this",
    "start": "3056970",
    "end": "3064910"
  },
  {
    "text": "there's still so much stuff that I did not talk about the first thing is if you",
    "start": "3064910",
    "end": "3070410"
  },
  {
    "text": "are going to run this in production you're gonna need to deal with a CAD configuration you want to gonna need to",
    "start": "3070410",
    "end": "3076680"
  },
  {
    "text": "configure your cluster you're gonna use Holcomb for that the human optimized",
    "start": "3076680",
    "end": "3081980"
  },
  {
    "text": "configuration object notation I think it is you're gonna need to set up your",
    "start": "3081980",
    "end": "3087270"
  },
  {
    "text": "clustering didn't cover that today either you're gonna probably want to use logging and dependency injection at some",
    "start": "3087270",
    "end": "3094020"
  },
  {
    "text": "point and you're gonna want to monitor your production environment data bridge has a product for that it's called",
    "start": "3094020",
    "end": "3099720"
  },
  {
    "text": "Phobos it's really good so those are the things that we didn't cover today but if",
    "start": "3099720",
    "end": "3105089"
  },
  {
    "text": "you want to run at a production you're gonna need all this if you want to start learning about Aqua Net",
    "start": "3105089",
    "end": "3111000"
  },
  {
    "start": "3108000",
    "end": "3108000"
  },
  {
    "text": "there is a bootcamp bipedal bridge which is free you can just go to github you can do it by yourself it's self-paced",
    "start": "3111000",
    "end": "3117450"
  },
  {
    "text": "learning it's really good it gets you acquainted with all the concepts of iconic map and also on",
    "start": "3117450",
    "end": "3124020"
  },
  {
    "text": "Pluralsight you can find some pretty good stuff the peda bridge blog is a goldmine of information every new",
    "start": "3124020",
    "end": "3131310"
  },
  {
    "text": "feature that they built they blog about with code samples and everything so most of the stuff you can find on there and",
    "start": "3131310",
    "end": "3138240"
  },
  {
    "text": "then there's the online trainings that I talked to you about earlier and they are",
    "start": "3138240",
    "end": "3144300"
  },
  {
    "text": "paid they're quite affordable I had most value from that by first trying the",
    "start": "3144300",
    "end": "3151589"
  },
  {
    "text": "above tree things and like building a system until I had real questions that I couldn't solve myself and then it's",
    "start": "3151589",
    "end": "3158190"
  },
  {
    "text": "really worth doing it because they do it in a webcast with a small group and you can ask questions directly to the people",
    "start": "3158190",
    "end": "3164130"
  },
  {
    "text": "who build the framework so you're gonna get real answers as well also for your deployment I covered a little bit how we",
    "start": "3164130",
    "end": "3170819"
  },
  {
    "start": "3168000",
    "end": "3168000"
  },
  {
    "text": "rebuild our data on the other side of the deployment you're also going to need to take care of a few things you're",
    "start": "3170819",
    "end": "3176819"
  },
  {
    "text": "gonna need to stop that app service I pause it so that it doesn't keep sending messages to your cluster you're gonna",
    "start": "3176819",
    "end": "3183480"
  },
  {
    "text": "need to have your cluster finish processing then you can stop here to us or redeploy it and then resume",
    "start": "3183480",
    "end": "3190650"
  },
  {
    "text": "the event stream and if you do this right you will not lose any data you can redeploy your application without any",
    "start": "3190650",
    "end": "3197390"
  },
  {
    "text": "problems so in conclusion first you need to check",
    "start": "3197390",
    "end": "3203819"
  },
  {
    "start": "3200000",
    "end": "3200000"
  },
  {
    "text": "if your problem problem domain is fit for actors if it is you're gonna have to decide which part of it you're gonna use",
    "start": "3203819",
    "end": "3210329"
  },
  {
    "text": "excellent at 4:00 you have to design your actor hierarchies appropriately think about persistence think about",
    "start": "3210329",
    "end": "3217019"
  },
  {
    "text": "bottlenecks think about fault tolerance which risky operations you're gonna do we're normalizing your data will help a",
    "start": "3217019",
    "end": "3224519"
  },
  {
    "text": "lot if you work with IOT devices and you're gonna have to think about the whole deployment and recycle process",
    "start": "3224519",
    "end": "3231630"
  },
  {
    "text": "because that will become a deal this was my talk for today my name is",
    "start": "3231630",
    "end": "3238200"
  },
  {
    "text": "Hannes I work for access in Belgium that's my twitter handle and my ICQ number make ICQ grade again you can find",
    "start": "3238200",
    "end": "3246720"
  },
  {
    "text": "a complete solution with all the stuff that we talked about on github check that out there's a lot more in there",
    "start": "3246720",
    "end": "3252269"
  },
  {
    "text": "than we cover today so feel free to look",
    "start": "3252269",
    "end": "3258119"
  },
  {
    "text": "at that ask me some questions over Twitter whatever tonight we're going to do this fun thing in a pub not too far",
    "start": "3258119",
    "end": "3264779"
  },
  {
    "text": "from here there will be 12 people doing funny talks if you haven't bought your ticket yet I encourage you to do so food",
    "start": "3264779",
    "end": "3271559"
  },
  {
    "text": "and drinks are included with your ticket it's gonna be fun ask me some questions",
    "start": "3271559",
    "end": "3278390"
  },
  {
    "text": "that's that's a good question and the the question is how do you deploy your",
    "start": "3289080",
    "end": "3294700"
  },
  {
    "text": "actors do you deploy that as a monolith your actor system needs to know about",
    "start": "3294700",
    "end": "3299920"
  },
  {
    "text": "the Assemblies that contain your actors because otherwise it cannot instantiate",
    "start": "3299920",
    "end": "3305230"
  },
  {
    "text": "them because you will hand it constructor pointers through props you",
    "start": "3305230",
    "end": "3311140"
  },
  {
    "text": "can spread them over as many assemblies as you want but your actor system needs",
    "start": "3311140",
    "end": "3316210"
  },
  {
    "text": "to have references to all those assemblies in runtime right so whether",
    "start": "3316210",
    "end": "3321760"
  },
  {
    "text": "you do that by just deploying a separate assembly and then when you start your",
    "start": "3321760",
    "end": "3327430"
  },
  {
    "text": "actors system you scan them through reflection that would work just as well",
    "start": "3327430",
    "end": "3333030"
  },
  {
    "text": "but usually it's easier to have indeed one monolithic deployment for your actor",
    "start": "3333030",
    "end": "3338380"
  },
  {
    "text": "system that has all the assemblies for all the actors to all the notes exactly",
    "start": "3338380",
    "end": "3347680"
  },
  {
    "text": "yes I put that into in the question is how",
    "start": "3347680",
    "end": "3362560"
  },
  {
    "text": "do you run that remoting part we deployed that as an app service which",
    "start": "3362560",
    "end": "3369310"
  },
  {
    "text": "also has a reference it has to have a reference to the akka libraries and it",
    "start": "3369310",
    "end": "3377110"
  },
  {
    "text": "has to have a reference to your message classes because it needs to send those it doesn't need to have a reference to",
    "start": "3377110",
    "end": "3383710"
  },
  {
    "text": "all the actors that live on the other side because it will only get actor references from them we did an app",
    "start": "3383710",
    "end": "3389020"
  },
  {
    "text": "service because that's easy on Asscher and we didn't need to manage a server for that we can basically do it in any",
    "start": "3389020",
    "end": "3394570"
  },
  {
    "text": "type of process that you want so if our website would also have a remoting actor",
    "start": "3394570",
    "end": "3401440"
  },
  {
    "text": "system in it so our asp.net application would have a static instance for the",
    "start": "3401440",
    "end": "3406660"
  },
  {
    "text": "remoting actor system to talk to the cluster to get data to present to the user so basically your you'll start",
    "start": "3406660",
    "end": "3414550"
  },
  {
    "text": "building these small remoting actor systems with the stuff that you need to talk to your big cluster and those go",
    "start": "3414550",
    "end": "3422290"
  },
  {
    "text": "inside the net process that that needs to talk to it but it could be anything from a console app to full-blown web",
    "start": "3422290",
    "end": "3428680"
  },
  {
    "text": "application doesn't really matter if it runs on that you can talk to it okay the",
    "start": "3428680",
    "end": "3446320"
  },
  {
    "text": "question is how does the state work in an academic cluster basically if you",
    "start": "3446320",
    "end": "3453670"
  },
  {
    "text": "have a cluster all the notes talk to each other through remoting in the background as well but you don't need to",
    "start": "3453670",
    "end": "3459640"
  },
  {
    "text": "manage that yourselves because inside the cluster addressing is transparent you don't need to know which note the",
    "start": "3459640",
    "end": "3466390"
  },
  {
    "text": "actor lives on you will provide your actor classes with a chart key and the",
    "start": "3466390",
    "end": "3471910"
  },
  {
    "text": "chart key needs to be unique and based on the chart key your your actual actors will be put on a certain node so you",
    "start": "3471910",
    "end": "3480310"
  },
  {
    "text": "have some control over where your actors go through the chart key but you have to remember that your",
    "start": "3480310",
    "end": "3486250"
  },
  {
    "text": "Sharkey needs to say stay the same when you like recycle the actor and create a",
    "start": "3486250",
    "end": "3491320"
  },
  {
    "text": "new instance so don't use the built-in get hash code or anything to create a",
    "start": "3491320",
    "end": "3498160"
  },
  {
    "text": "short key for your actors because you're gonna have a really bad time it needs to be consistent between between",
    "start": "3498160",
    "end": "3504520"
  },
  {
    "text": "instantiations but that's yeah I could go into that and do more depth but it will take us a long time see me",
    "start": "3504520",
    "end": "3510940"
  },
  {
    "text": "afterwards if you have more questions about that y'all ready for lunch now",
    "start": "3510940",
    "end": "3517320"
  },
  {
    "text": "okay [Applause]",
    "start": "3517320",
    "end": "3522460"
  }
]