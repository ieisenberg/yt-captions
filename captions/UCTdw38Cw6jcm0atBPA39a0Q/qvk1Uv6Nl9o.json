[
  {
    "text": "uh welcome everybody to my talk I've decided to call it a bird's eye view of a compiler because we'll be kind of like",
    "start": "7240",
    "end": "13920"
  },
  {
    "text": "a bird my bird of choice is a goose you'll see this uh all throughout the presentation but it's a bird's eye view",
    "start": "13920",
    "end": "20320"
  },
  {
    "text": "because we'll be like flying above it from a distance just looking at the components from like an a high level um",
    "start": "20320",
    "end": "27160"
  },
  {
    "text": "so we're not going to go into any NR details we'll just introduce a lot of Concepts we'll look at a piece of code",
    "start": "27160",
    "end": "34640"
  },
  {
    "text": "that goes into a compiler gets transformed broken down reshuffled and",
    "start": "34640",
    "end": "40320"
  },
  {
    "text": "then output as something else and we'll see what each of those faces actually",
    "start": "40320",
    "end": "45399"
  },
  {
    "text": "does so if you are maybe a bit new to",
    "start": "45399",
    "end": "50920"
  },
  {
    "text": "development and not really thought about what the compiler does this I hope this talk will be perfect for you or if",
    "start": "50920",
    "end": "56600"
  },
  {
    "text": "you're a seasoned veteran who's been developing all kinds of cool stuff for like years but you still haven't thought",
    "start": "56600",
    "end": "64320"
  },
  {
    "text": "much about what's going on inside of a compiler I hope this will also bring uh something valuable to you but the first",
    "start": "64320",
    "end": "70720"
  },
  {
    "text": "thing I want to introduce is is my face my name is Yim Le I stole that joke from aaf I love that guy he's he does some",
    "start": "70720",
    "end": "78080"
  },
  {
    "text": "great presentations um I'm sure you all saw the doom on in space talk yesterday",
    "start": "78080",
    "end": "84200"
  },
  {
    "text": "at the party but uh I am a software engineer at Cisco and I actually",
    "start": "84200",
    "end": "90759"
  },
  {
    "text": "well at Cisco Norway we make these video conferencing devices and uh my role in",
    "start": "90759",
    "end": "96079"
  },
  {
    "text": "that big machinery is uh maintaining our web browser so that means I'm not a",
    "start": "96079",
    "end": "101119"
  },
  {
    "text": "compiler engineer I'm just an Enthusiast I really enjoy this kind of technology and I like reading about it and playing",
    "start": "101119",
    "end": "108119"
  },
  {
    "text": "with it in my spare time and uh doing all kinds of stuff with it",
    "start": "108119",
    "end": "114240"
  },
  {
    "text": "so we only have 1 hour we're going to like the field of compiler Construction",
    "start": "114240",
    "end": "120079"
  },
  {
    "text": "all the programming language theory is it's just a huge topic so we will have to do uh just the basics we will look at",
    "start": "120079",
    "end": "129080"
  },
  {
    "text": "uh all kinds of uh different concepts introduce them illustrate them a little",
    "start": "129080",
    "end": "135080"
  },
  {
    "text": "bit and then move on so we will not be diving into any more advanced topics such as like optimization is is a huge",
    "start": "135080",
    "end": "142920"
  },
  {
    "text": "one so we'll look at some examples maybe but we won't really get into the details",
    "start": "142920",
    "end": "148280"
  },
  {
    "text": "of when can we do this in practice we'll just give you guys some terms and and",
    "start": "148280",
    "end": "154640"
  },
  {
    "text": "things you can follow up on in if you feel like this is interesting so now you have some words and you know how it fits",
    "start": "154640",
    "end": "160720"
  },
  {
    "text": "into the pipeline so you can possibly read about it on your by yourself later so I'm just trying to you know create a",
    "start": "160720",
    "end": "167400"
  },
  {
    "text": "little spark of interest if you guys realize hey might this might be cool to learn more about so that's my intention",
    "start": "167400",
    "end": "174519"
  },
  {
    "text": "and just to keep things simple we assuming that everything is ahead of time compiled which is like the standard procedure for for C and C++ where you uh",
    "start": "174519",
    "end": "182879"
  },
  {
    "text": "insert your source code compile it and then later you do something with uh with",
    "start": "182879",
    "end": "188400"
  },
  {
    "text": "a output in contrast to for example interpreted language where it kind of does everything in one go which is",
    "start": "188400",
    "end": "195000"
  },
  {
    "text": "similar but has some differences and we'll just ignore",
    "start": "195000",
    "end": "199760"
  },
  {
    "text": "those so compilers um my motivation to do this talk was uh after talking to",
    "start": "200120",
    "end": "207319"
  },
  {
    "text": "some friends of mine uh who are always also developing and they they told me",
    "start": "207319",
    "end": "212360"
  },
  {
    "text": "like compilers that that's this black box you don't really know what's going on and it just makes programming work",
    "start": "212360",
    "end": "219120"
  },
  {
    "text": "and that kind of you know agitated me a little bit so they were treating compilers like some sort of deep neural",
    "start": "219120",
    "end": "226280"
  },
  {
    "text": "network which is like with its billions of parameters it's impossible to reason with but unlike some sort of deep neural",
    "start": "226280",
    "end": "233400"
  },
  {
    "text": "network and compiler just a piece of software if you have an open source compiler you can just read the source",
    "start": "233400",
    "end": "239879"
  },
  {
    "text": "code you can reason about it it might be a advanced piece of software but it's",
    "start": "239879",
    "end": "245280"
  },
  {
    "text": "still fully uh possible to reason about it and maybe even change it if you feel",
    "start": "245280",
    "end": "250799"
  },
  {
    "text": "like something is off um but that doesn't really explain",
    "start": "250799",
    "end": "256720"
  },
  {
    "text": "what the compiler does so the core uh challenge is that your computer does not",
    "start": "256720",
    "end": "261919"
  },
  {
    "text": "understand your code if you do I don't know Java or C++ or or C your computer",
    "start": "261919",
    "end": "268360"
  },
  {
    "text": "can't really comprehend that language so you need something to translate your preferred language to",
    "start": "268360",
    "end": "275199"
  },
  {
    "text": "something that the computer can use right so your computer only has some set",
    "start": "275199",
    "end": "281759"
  },
  {
    "text": "instructions a set of instructions sorry and that is not the same as your",
    "start": "281759",
    "end": "286840"
  },
  {
    "text": "preferred programming language so we have this notion of a source language which is for example C++ whatever you",
    "start": "286840",
    "end": "294160"
  },
  {
    "text": "want to write your code in and then some Target that Target can be man things I",
    "start": "294160",
    "end": "300880"
  },
  {
    "text": "just uh spoke of the instruction set which is kind of a lowlevel concept but it's also possible to have a compilation",
    "start": "300880",
    "end": "307680"
  },
  {
    "text": "Target be some high level language so um for example typescript if you're",
    "start": "307680",
    "end": "314840"
  },
  {
    "text": "familiar is a web language or language for web development but it compiles down",
    "start": "314840",
    "end": "321080"
  },
  {
    "text": "to JavaScript which is another high level language and that works because the target language may have its set of",
    "start": "321080",
    "end": "328160"
  },
  {
    "text": "tools that allows the computer to do something useful with it and this is what keeps us from",
    "start": "328160",
    "end": "336000"
  },
  {
    "text": "writing assembly all day long because I kind of dare to say that most of us doesn't really write assem code in our",
    "start": "336000",
    "end": "342600"
  },
  {
    "text": "day-to-day jobs anymore because we are able to build obstructions we can we buil C so we can have structs we can",
    "start": "342600",
    "end": "349000"
  },
  {
    "text": "have functions Loops all kind of good stuff to make us express ourselves um that has been going on giving us C++",
    "start": "349000",
    "end": "355400"
  },
  {
    "text": "giving us Java giving us uh JavaScript all kinds of different abstract languages that allow us to um allow us",
    "start": "355400",
    "end": "363280"
  },
  {
    "text": "to um express ourselves in a very concise and neat manner also uh in our",
    "start": "363280",
    "end": "370360"
  },
  {
    "text": "preferred way because you know we have different preferences and that's",
    "start": "370360",
    "end": "375960"
  },
  {
    "text": "okay but as always since we're doing translation we have to always make it",
    "start": "375960",
    "end": "381919"
  },
  {
    "text": "the make the right thing we can't change anything so we have to always stay correct and that's I think the most most",
    "start": "381919",
    "end": "389840"
  },
  {
    "text": "important property of any compiler because if you write your uh piece of code and you compile it and then it",
    "start": "389840",
    "end": "397240"
  },
  {
    "text": "turns into something else that compiler is not really worth anything right because then it's just random or",
    "start": "397240",
    "end": "404880"
  },
  {
    "text": "undefined and we we know what we think about undefined behavior in C++ so we",
    "start": "404880",
    "end": "410080"
  },
  {
    "text": "wouldn't want every program to be undefined that doesn't seem very productive and of course um it",
    "start": "410080",
    "end": "418560"
  },
  {
    "text": "optimization is a big thing it's kind of a weird thing because if you were to build your own",
    "start": "418560",
    "end": "423800"
  },
  {
    "text": "compiler um this is the only optional step you don't need optimization but is",
    "start": "423800",
    "end": "430280"
  },
  {
    "text": "probably uh the hardest and most actively researched part of a compiler because you can do a lot of things and",
    "start": "430280",
    "end": "437360"
  },
  {
    "text": "nowadays we tend to um assume all of our compilers are correct and we uh rank",
    "start": "437360",
    "end": "443599"
  },
  {
    "text": "them based on their efficiency or quality of code that they produce or some other property like that",
    "start": "443599",
    "end": "450039"
  },
  {
    "text": "so it's an optional but very important step in a real uh production grade",
    "start": "450039",
    "end": "456319"
  },
  {
    "text": "compiler so I've managed or not managed I decided to visualize this black box as",
    "start": "456919",
    "end": "462479"
  },
  {
    "text": "something like this and no worry if you can't read all the text it's just an illustration that shows us that we from",
    "start": "462479",
    "end": "470000"
  },
  {
    "text": "the top left here have our input program we break down the text structure it",
    "start": "470000",
    "end": "475599"
  },
  {
    "text": "somehow transform it and then produce some sort of artifact that artifact can",
    "start": "475599",
    "end": "481680"
  },
  {
    "text": "be many things so I just Illustrated it using uh some representations of",
    "start": "481680",
    "end": "488759"
  },
  {
    "text": "different kinds so the structure of a comp",
    "start": "488759",
    "end": "494240"
  },
  {
    "text": "compiler is mainly at least the general sense of a compiler is generally split",
    "start": "494240",
    "end": "500360"
  },
  {
    "text": "into three parts uh these are connected by uh their outputs and what I mean by",
    "start": "500360",
    "end": "507400"
  },
  {
    "text": "that is um the output of one part is the input of the next part so it's a it's a",
    "start": "507400",
    "end": "513800"
  },
  {
    "text": "pipeline just like a factory right and uh every part of the compiler",
    "start": "513800",
    "end": "519599"
  },
  {
    "text": "has different considerations so if you look at the table down here we can see that the front end of the compiler is",
    "start": "519599",
    "end": "525760"
  },
  {
    "text": "language specific but it does not care about the target platform it's supposed to be running on because it just deals",
    "start": "525760",
    "end": "531640"
  },
  {
    "text": "with the specifics of the high level language you are translating the middle end oh sorry this",
    "start": "531640",
    "end": "538800"
  },
  {
    "text": "is the front end by by the way so the top part here so we go from source code",
    "start": "538800",
    "end": "544079"
  },
  {
    "text": "and we produce some structure data of some sort often times a tree but we'll get back to that the middle end takes",
    "start": "544079",
    "end": "551200"
  },
  {
    "text": "that tree or structure and transforms it to something else this is kind of the",
    "start": "551200",
    "end": "556680"
  },
  {
    "text": "Holy Grail of computer science because you're not really Bound by language anymore because we're just dealing with data structures and we're not ready to",
    "start": "556680",
    "end": "562959"
  },
  {
    "text": "produce any code yet so we're not even uh platform dependent so we we just can",
    "start": "562959",
    "end": "568040"
  },
  {
    "text": "do some pure computer sciencey goodness uh which I find to be really",
    "start": "568040",
    "end": "573880"
  },
  {
    "text": "exciting uh and finally we have the back end which takes the processed structures from the middle end and if applicable",
    "start": "573880",
    "end": "581720"
  },
  {
    "text": "does some platform specific Transformations or optimizations and finally generate our output code and",
    "start": "581720",
    "end": "587640"
  },
  {
    "text": "that obviously is platform specific because it's supposed to be running somewhere um and the neat part is that",
    "start": "587640",
    "end": "594920"
  },
  {
    "text": "each of these uh three parts of a compiler is very distinct",
    "start": "594920",
    "end": "600000"
  },
  {
    "text": "and I have a pretty nice interface in that the output is the next ph's input",
    "start": "600000",
    "end": "605519"
  },
  {
    "text": "so we can reuse our components and that's um the magic of llvm which has",
    "start": "605519",
    "end": "611079"
  },
  {
    "text": "its own like textual format so if if you can um read in your programming language",
    "start": "611079",
    "end": "616920"
  },
  {
    "text": "and reduce it to that format you can just leverage all of LM tools and get I",
    "start": "616920",
    "end": "623160"
  },
  {
    "text": "guess some very Advanced optimization for free you don't really have to know about that GCC kind of does the same",
    "start": "623160",
    "end": "629440"
  },
  {
    "text": "same and by this I mean the g c um compiler collection not the C",
    "start": "629440",
    "end": "634519"
  },
  {
    "text": "compiler which includes several front ends which share the same um I guess",
    "start": "634519",
    "end": "641519"
  },
  {
    "text": "middle end and then has several back ends so you can use the same Machinery to process different languages for",
    "start": "641519",
    "end": "647320"
  },
  {
    "text": "different platforms uh which I think is a really neat property of dividing them up like",
    "start": "647320",
    "end": "655160"
  },
  {
    "text": "this but before we move on um we're supposed to be covering the front end right now I just want to do a bit of",
    "start": "655480",
    "end": "662680"
  },
  {
    "text": "theory first um because I think it is very nice to",
    "start": "662680",
    "end": "669959"
  },
  {
    "text": "express the syntax of a language AKA what you're writing as a grammar so I",
    "start": "669959",
    "end": "675560"
  },
  {
    "text": "just want to freshen up grammars for everyone so a language as in the mathematical sense is just all kinds of",
    "start": "675560",
    "end": "682560"
  },
  {
    "text": "strings you're able to produce with some rules uh and you have just a few symbols",
    "start": "682560",
    "end": "689600"
  },
  {
    "text": "you can use well that means it's just a it's a string rewriting system so the grammar Define rules like you can see on",
    "start": "689600",
    "end": "697279"
  },
  {
    "text": "the right hand side here so for example the start string can be turned into a",
    "start": "697279",
    "end": "704399"
  },
  {
    "text": "parenthesis semicolon just means that's the end of the production rule um in the bottom case here we can",
    "start": "704399",
    "end": "711440"
  },
  {
    "text": "see that a capital A can turn into a lower case a and an uppercase a or just",
    "start": "711440",
    "end": "718600"
  },
  {
    "text": "a lower case a so we have a choice and we have the notion of non-terminals and terminals so I've used",
    "start": "718600",
    "end": "725800"
  },
  {
    "text": "a Convention of uh non-terminals being uppercase and the non- terminals are the",
    "start": "725800",
    "end": "731639"
  },
  {
    "text": "strings that you can't have in your final string you have to keep processing them until you end up with only",
    "start": "731639",
    "end": "737959"
  },
  {
    "text": "terminals which in this case is the lowercase a and the literal parenthesis open and",
    "start": "737959",
    "end": "745160"
  },
  {
    "text": "close um there are many like classes of of languag and grammars and I'm not",
    "start": "745160",
    "end": "750440"
  },
  {
    "text": "going to get into that I'll just say that context free is a very good fit for programming languages but you might have",
    "start": "750440",
    "end": "756560"
  },
  {
    "text": "heard of like regular languages or regular expressions and this also fits into this description but with some",
    "start": "756560",
    "end": "762560"
  },
  {
    "text": "different properties and a context free gramar is a more expressive thing than a",
    "start": "762560",
    "end": "768440"
  },
  {
    "text": "regular expression so that's why I picked the grammar on the what what is",
    "start": "768440",
    "end": "773720"
  },
  {
    "text": "it right hand side for you guys um because you can't recreate this use our",
    "start": "773720",
    "end": "780560"
  },
  {
    "text": "regx uh we'll see that a bit later so you can use this grammar to both generate strings by just starting",
    "start": "780560",
    "end": "786800"
  },
  {
    "text": "somewhere for example a start symbol by convention and just applying rules arbitrarily until you get just",
    "start": "786800",
    "end": "794000"
  },
  {
    "text": "terminals on the flip side you can take a string and apply the rules backwards",
    "start": "794000",
    "end": "799279"
  },
  {
    "text": "and see if it makes sense so I'll just run through a quick example so we have the actions on this",
    "start": "799279",
    "end": "806440"
  },
  {
    "text": "side and the states on the other side so we start with the start symbol I abbreviated parenthesis to just",
    "start": "806440",
    "end": "814079"
  },
  {
    "text": "parent so we can apply this rule which is this one pair which leaves us with",
    "start": "814079",
    "end": "819440"
  },
  {
    "text": "just a parent parenthesis symbol now we choose to apply this rule",
    "start": "819440",
    "end": "825079"
  },
  {
    "text": "up here which is that rule we can see which just wraps it in the literal",
    "start": "825079",
    "end": "830519"
  },
  {
    "text": "parenthesis signs and we can do that twice and now we're just generating so I",
    "start": "830519",
    "end": "836279"
  },
  {
    "text": "can do whatever and if you guys want to do something else that's also allowed this is just up the choice and this is",
    "start": "836279",
    "end": "841360"
  },
  {
    "text": "an arbitrary Choice uh after wrapping it in parenthesis two times I choose to ex",
    "start": "841360",
    "end": "848000"
  },
  {
    "text": "expand the parenthesis into an a because that's the alternative production we can",
    "start": "848000",
    "end": "853480"
  },
  {
    "text": "use so now our state looks like this and now I still have a non-",
    "start": "853480",
    "end": "859399"
  },
  {
    "text": "terminal that's a capital A so I can choose between these two rules and I choose to do first the top post mod that",
    "start": "859399",
    "end": "867519"
  },
  {
    "text": "leaves us with this and then the bottom one which leaves us with this which is a string of only",
    "start": "867519",
    "end": "875040"
  },
  {
    "text": "non-terminals it's a perfectly valid string it is part of the language",
    "start": "875040",
    "end": "880680"
  },
  {
    "text": "because we only follow the rules and a regular expression can't do this because this guarantees a balanced",
    "start": "880680",
    "end": "888680"
  },
  {
    "text": "amount of opening and closing closing parentheses and regular expression can't count that's that's the weakness",
    "start": "888680",
    "end": "895959"
  },
  {
    "text": "so uh this is why uh context languages are good for describing programming",
    "start": "895959",
    "end": "901680"
  },
  {
    "text": "languages because we do have a lot of matching brackets like C is full of them",
    "start": "901680",
    "end": "906920"
  },
  {
    "text": "and just think about lisp but this isn't actually that useful",
    "start": "906920",
    "end": "913399"
  },
  {
    "text": "it's more useful to go the other way around which is parsing uh where we start with some",
    "start": "913399",
    "end": "918800"
  },
  {
    "text": "string and then we apply the rules backwards so we have an lower case a and",
    "start": "918800",
    "end": "925120"
  },
  {
    "text": "we see that we can collapse that into this monter",
    "start": "925120",
    "end": "930959"
  },
  {
    "text": "so we do that now we're left in this state up here and now we see that we have a lowercase a followed by the",
    "start": "931639",
    "end": "938279"
  },
  {
    "text": "uppercase a which looks like this rule up here I mean down there and then we just collapse that several times unless",
    "start": "938279",
    "end": "947240"
  },
  {
    "text": "until we're just left with an a inside of parenthesis and we see that just an a",
    "start": "947240",
    "end": "953639"
  },
  {
    "text": "can be coll collapsed into the parenthesis non- terminal which leaves us with this and finally we see that a",
    "start": "953639",
    "end": "961920"
  },
  {
    "text": "parenthesized parenthesis can be collapsed into the parenthesis symbol",
    "start": "961920",
    "end": "967399"
  },
  {
    "text": "which finally leaves us to the start symbol and that is kind of proof of uh",
    "start": "967399",
    "end": "973759"
  },
  {
    "text": "this string being part of the language because if you end up with a start symbol with no other symbols topair",
    "start": "973759",
    "end": "980040"
  },
  {
    "text": "that's a successful parse um but there's a lot of more",
    "start": "980040",
    "end": "985360"
  },
  {
    "text": "things to say about grammars I will skip those and if there's any clever uh people among you guys who have already",
    "start": "985360",
    "end": "991920"
  },
  {
    "text": "read about grammars you already know what I'm talking about so programming languages they're",
    "start": "991920",
    "end": "998399"
  },
  {
    "text": "kind of just made up right I just write a document a specification and",
    "start": "998399",
    "end": "1004199"
  },
  {
    "text": "then I still don't have a programming language because we need a compiler to implement that specification right",
    "start": "1004199",
    "end": "1011600"
  },
  {
    "text": "consider C++ we have a lot of spe specifications like every 3 years",
    "start": "1011600",
    "end": "1017639"
  },
  {
    "text": "there's a big new one and maybe more if for all I know and these",
    "start": "1017639",
    "end": "1023480"
  },
  {
    "text": "specifications aren't really real languages until they're implemented by compilers and the special case about C++",
    "start": "1023480",
    "end": "1030000"
  },
  {
    "text": "is you know the different compilers are uh implementing the specs at",
    "start": "1030000",
    "end": "1035079"
  },
  {
    "text": "different Paces so we kind of have many different versions of C++ which are more",
    "start": "1035079",
    "end": "1040240"
  },
  {
    "text": "or less compatible or incompatible depends on the future",
    "start": "1040240",
    "end": "1046678"
  },
  {
    "text": "but um in defining the program language the syntax is um it's useful to",
    "start": "1046679",
    "end": "1054760"
  },
  {
    "text": "define the syntax as a grammar either explicitly or just sort of like an appendix because it's a",
    "start": "1054760",
    "end": "1060720"
  },
  {
    "text": "useful tool um where you just use a context free one with some additions if there's",
    "start": "1060720",
    "end": "1067160"
  },
  {
    "text": "any context sensitive parts of the language and this brings us to the front end which is the first part I",
    "start": "1067160",
    "end": "1075000"
  },
  {
    "text": "mentioned so the front end is the only language specific part part this is where you break down the input",
    "start": "1075000",
    "end": "1082640"
  },
  {
    "text": "code um and you want to structure it somehow so you break it down by ex",
    "start": "1082640",
    "end": "1089320"
  },
  {
    "text": "extracting all the important bits we need because there's a lot of syntactical elements to a program",
    "start": "1089320",
    "end": "1095400"
  },
  {
    "text": "language that's not necessarily required it's just a syntax thing right and this",
    "start": "1095400",
    "end": "1101840"
  },
  {
    "text": "is split up in two phases called Lexing and parsing or lexical analysis and syntax analysis if you're a academic I",
    "start": "1101840",
    "end": "1109240"
  },
  {
    "text": "guess uh we will be covering syntax directed translation later and that ends",
    "start": "1109240",
    "end": "1115919"
  },
  {
    "text": "up typically being a an abstract syntax tree which is a tree that represents the",
    "start": "1115919",
    "end": "1121840"
  },
  {
    "text": "code you wrote according to the grammar rules we have there's a very nice connection between the syntax tree and a",
    "start": "1121840",
    "end": "1128240"
  },
  {
    "text": "grammar it's kind of immediate sometimes",
    "start": "1128240",
    "end": "1133440"
  },
  {
    "text": "so moving to the lexical analysis this is where we ask ourselves are the words",
    "start": "1133440",
    "end": "1139840"
  },
  {
    "text": "we wrote in our programs correct so it's kind of like you know",
    "start": "1139840",
    "end": "1144919"
  },
  {
    "text": "looking up in a dictionary uh so we break down the string in this case it's a small C program where we make some",
    "start": "1144919",
    "end": "1152159"
  },
  {
    "text": "assignment and then use print F I'm not sure if you can see that I'm sorry about that but it's not that important we just",
    "start": "1152159",
    "end": "1158120"
  },
  {
    "text": "break it down to the smallest meaningful unit and what that means is that every",
    "start": "1158120",
    "end": "1163559"
  },
  {
    "text": "language has some reserved keywords such as um return or uh int I guess or if and",
    "start": "1163559",
    "end": "1171280"
  },
  {
    "text": "then we have like this recipe for how we can make an identifier I think in C you can't have",
    "start": "1171280",
    "end": "1178159"
  },
  {
    "text": "an identifier that starts with a number for example so you have like these uh rules that Define how you make such an",
    "start": "1178159",
    "end": "1185960"
  },
  {
    "text": "identifier and then we have literals like the number two that just means the number two",
    "start": "1185960",
    "end": "1191520"
  },
  {
    "text": "right so we have like our little system of Dictionary lookups and some rules on",
    "start": "1191520",
    "end": "1196600"
  },
  {
    "text": "how we should um format some things and then we just try to match all the",
    "start": "1196600",
    "end": "1202799"
  },
  {
    "text": "different uh words we have in our program for example in this case where we have like the int main function",
    "start": "1202799",
    "end": "1210200"
  },
  {
    "text": "declaration we see that int is the smallest useful piece of um of text",
    "start": "1210200",
    "end": "1215679"
  },
  {
    "text": "because that's a built-in type so that deserves its own little uh leg theme",
    "start": "1215679",
    "end": "1221840"
  },
  {
    "text": "which is a matched word um but the lexim isn't that useful",
    "start": "1221840",
    "end": "1227600"
  },
  {
    "text": "by itself so you kind of categorize it you say that okay the int is a built-in type or a reserved",
    "start": "1227600",
    "end": "1234159"
  },
  {
    "text": "keyword I'm actually not sure what is Define as in C but you get the idea and",
    "start": "1234159",
    "end": "1239400"
  },
  {
    "text": "that is the token it's like categorized word so by defining these rules and",
    "start": "1239400",
    "end": "1246120"
  },
  {
    "text": "running through your program you get this list of tokens and this is what the parser needs",
    "start": "1246120",
    "end": "1252960"
  },
  {
    "text": "to look at when we are trying to create the pars excuse me the pars",
    "start": "1252960",
    "end": "1259760"
  },
  {
    "text": "scam because then by this point we don't really want to be reading the text anymore we want a generalized",
    "start": "1259760",
    "end": "1265000"
  },
  {
    "text": "representation of the code where an identifier is just an identifier because",
    "start": "1265000",
    "end": "1270480"
  },
  {
    "text": "that makes our grammars work really nicely then we don't have to distinguish",
    "start": "1270480",
    "end": "1276440"
  },
  {
    "text": "int main from type identifier it's more much more generalized so we can match",
    "start": "1276440",
    "end": "1281840"
  },
  {
    "text": "all kinds of function definitions that way um so the question we're asking",
    "start": "1281840",
    "end": "1287320"
  },
  {
    "text": "ourselves is does the sentence we read make any sense which means is the order we seeing",
    "start": "1287320",
    "end": "1293799"
  },
  {
    "text": "these tokens correct uh which pretty much translates to verifying the grammatical rules just",
    "start": "1293799",
    "end": "1300919"
  },
  {
    "text": "like like we did by hand a moment ago and in English this this would look like",
    "start": "1300919",
    "end": "1306640"
  },
  {
    "text": "for example if I said the the word the um sorry the sentence I the can",
    "start": "1306640",
    "end": "1312679"
  },
  {
    "text": "through would really makes sense right but perhaps in German but this is",
    "start": "1312679",
    "end": "1318159"
  },
  {
    "text": "English different grammars right in English we would say I threw the can and",
    "start": "1318159",
    "end": "1323240"
  },
  {
    "text": "that's a perfectly valid sentence but I said that we were going",
    "start": "1323240",
    "end": "1329279"
  },
  {
    "text": "from this list to a tree and verifying rules doesn't really produce anything",
    "start": "1329279",
    "end": "1336760"
  },
  {
    "text": "right so this brings us to the syntax directory translation part it's just a",
    "start": "1336760",
    "end": "1342919"
  },
  {
    "text": "fancy way of saying we have our our grammar uh and we have some parser that",
    "start": "1342919",
    "end": "1349840"
  },
  {
    "text": "uh checks that our grammar is is withheld and syntax directed translation",
    "start": "1349840",
    "end": "1356720"
  },
  {
    "text": "is about associating some kind of attribute some data to each of these production rules and we call the",
    "start": "1356720",
    "end": "1364200"
  },
  {
    "text": "semantic actions so we're connecting our syntax which is what we write to the semantics which is what we want what we",
    "start": "1364200",
    "end": "1371200"
  },
  {
    "text": "mean in in some way I guess and we can use that to create the data structures",
    "start": "1371200",
    "end": "1376360"
  },
  {
    "text": "as we go so for each successful parse we can for example create a node in a graph",
    "start": "1376360",
    "end": "1382960"
  },
  {
    "text": "or a tree and then when we parse the parent of that object we can connect",
    "start": "1382960",
    "end": "1389360"
  },
  {
    "text": "them creating a tree as we go along and we can also move the data up",
    "start": "1389360",
    "end": "1395320"
  },
  {
    "text": "and down the tree so we have it readily available wherever we want to and then we can also prune the tree later so it",
    "start": "1395320",
    "end": "1401240"
  },
  {
    "text": "doesn't get as big um and if you write the parts yourself you can just write your own",
    "start": "1401240",
    "end": "1407279"
  },
  {
    "text": "code but sometimes when I don't want to focus on the syntax I use a par of generator which can use look something",
    "start": "1407279",
    "end": "1413679"
  },
  {
    "text": "like this where we have the um the well-known grammar rules we've seen",
    "start": "1413679",
    "end": "1419360"
  },
  {
    "text": "those before and by the way this is a grammar describing grammars because I",
    "start": "1419360",
    "end": "1424840"
  },
  {
    "text": "was trying to build my own parser generator but I needed a parer grammar so kind of a meta thing but don't worry",
    "start": "1424840",
    "end": "1430640"
  },
  {
    "text": "about that so this is just our Pure Old syntactical construct inside of a",
    "start": "1430640",
    "end": "1435960"
  },
  {
    "text": "grammar but this block right here is actual running C++ code with some",
    "start": "1435960",
    "end": "1441360"
  },
  {
    "text": "additions to it so this is from G bison which has this dollar sign notation",
    "start": "1441360",
    "end": "1446960"
  },
  {
    "text": "which just refers to the different part of the grammar um rule",
    "start": "1446960",
    "end": "1452600"
  },
  {
    "text": "above so I say that when we successfully par this thing I want the double dollar which is",
    "start": "1452600",
    "end": "1459440"
  },
  {
    "text": "the grammar rule to become this C++ class I have created somewhere else you",
    "start": "1459440",
    "end": "1465520"
  },
  {
    "text": "can't see it but trust me it's there and and uh we can also index into the right",
    "start": "1465520",
    "end": "1471039"
  },
  {
    "text": "hand side using the dollars with numbers on them it's one index for some reason",
    "start": "1471039",
    "end": "1476120"
  },
  {
    "text": "so one is the left hand side we skip the column it's just a syntactical thing we don't need to keep it around and finally",
    "start": "1476120",
    "end": "1483600"
  },
  {
    "text": "the dollar three for the right hand side and now we have created a node and maybe",
    "start": "1483600",
    "end": "1488679"
  },
  {
    "text": "in some other grammatical rule I connect this node to the rest of the tree and so",
    "start": "1488679",
    "end": "1494640"
  },
  {
    "text": "we can build up our uh our par tree",
    "start": "1494640",
    "end": "1500240"
  },
  {
    "text": "and a par tree is something we call an intermediate representation and this is",
    "start": "1500240",
    "end": "1506039"
  },
  {
    "text": "where it starts getting very interesting at least to me so syntax is fun but it's",
    "start": "1506039",
    "end": "1511799"
  },
  {
    "text": "nowadays it's almost trivial depending on the syntax it's there are many tools",
    "start": "1511799",
    "end": "1516960"
  },
  {
    "text": "you can use to make it a smooth experience but but IRS is much more up",
    "start": "1516960",
    "end": "1522559"
  },
  {
    "text": "to you to Define to figure out what you want to use and how you want to use them",
    "start": "1522559",
    "end": "1527840"
  },
  {
    "text": "so when I IR is just a representation of your codee just like the ASD we talked",
    "start": "1527840",
    "end": "1532880"
  },
  {
    "text": "about the syntax tree that's just one kind of ir and the point of then IR is",
    "start": "1532880",
    "end": "1538600"
  },
  {
    "text": "looking at your code while highlighting some properties of it so it's kind of I like the glasses",
    "start": "1538600",
    "end": "1546720"
  },
  {
    "text": "analogy so like if you have some glasses that make you uh be near sided you'll",
    "start": "1546720",
    "end": "1553320"
  },
  {
    "text": "have a different view of the code than if you are far sided or if you have blue glasses then you know the colors will be",
    "start": "1553320",
    "end": "1559320"
  },
  {
    "text": "different so you can highlight different properties of your code what this means is that you can use your data structures",
    "start": "1559320",
    "end": "1568840"
  },
  {
    "text": "and some analysis to create another structure that describes for example the",
    "start": "1568840",
    "end": "1574399"
  },
  {
    "text": "control flow of your program which means when it's branching so you can follow just the branches you don't care about",
    "start": "1574399",
    "end": "1581200"
  },
  {
    "text": "the individual statements anymore you just want to look at where are the branches how do they relate to each other and when or if do they",
    "start": "1581200",
    "end": "1589159"
  },
  {
    "text": "merge um and we have some other uh um what do you call it um a kind of a",
    "start": "1589159",
    "end": "1595720"
  },
  {
    "text": "continuation of that which is Dominator uh graph which shows you what has to be",
    "start": "1595720",
    "end": "1601679"
  },
  {
    "text": "done before the current block you're looking at so it's just it's building on on top of each other you can't really",
    "start": "1601679",
    "end": "1607559"
  },
  {
    "text": "have a dominator tree without a control FL graph um you also have something called",
    "start": "1607559",
    "end": "1614559"
  },
  {
    "text": "a three address code or a Tac it's just it's not IR is just kind of a format of",
    "start": "1614559",
    "end": "1621120"
  },
  {
    "text": "defining one it just means that your Expressions I mean statements have to be",
    "start": "1621120",
    "end": "1627880"
  },
  {
    "text": "with only three things in it so you have to break down a big compound uh",
    "start": "1627880",
    "end": "1633240"
  },
  {
    "text": "expression which makes it easier to reason about it because when it's broken down you can see all the sub",
    "start": "1633240",
    "end": "1640840"
  },
  {
    "text": "calculations and possibly do something smart about them and finally I just like putting up",
    "start": "1640840",
    "end": "1648480"
  },
  {
    "text": "SSA or static single assignment form yeah I really enjoy that but we'll look at that later so I won't talk talk too",
    "start": "1648480",
    "end": "1655000"
  },
  {
    "text": "much about it and this is an important prerequisite we need to have the notion",
    "start": "1655000",
    "end": "1660039"
  },
  {
    "text": "of an IR and how we can analyze our data structures to convince ourselves that we",
    "start": "1660039",
    "end": "1668200"
  },
  {
    "text": "can transform it into something else and just keep doing that until we find the data we need but we'll look at that in",
    "start": "1668200",
    "end": "1675399"
  },
  {
    "text": "the Midland which is right now Co incidentially",
    "start": "1675399",
    "end": "1680120"
  },
  {
    "text": "so like I said the middle end is both language and platform agnostic you don't really care about those specifics you're",
    "start": "1680799",
    "end": "1689240"
  },
  {
    "text": "just bothered with your um data structures and you just want to analyze",
    "start": "1689240",
    "end": "1696799"
  },
  {
    "text": "them and transform them so you can learn as much oh sorry learn as much as you",
    "start": "1696799",
    "end": "1703399"
  },
  {
    "text": "can about the code as possible which might enable",
    "start": "1703399",
    "end": "1708880"
  },
  {
    "text": "optimization but it's kind of like an forever goinging thing because some",
    "start": "1708880",
    "end": "1714600"
  },
  {
    "text": "Transformations are you know just there it's easy to do so but others might require some analysis but then if you do",
    "start": "1714600",
    "end": "1722600"
  },
  {
    "text": "a transformation that may un enable more analysis or an optimization which in itself is some",
    "start": "1722600",
    "end": "1728960"
  },
  {
    "text": "sort of transformation so you're always changing which leads you to uh finding",
    "start": "1728960",
    "end": "1735600"
  },
  {
    "text": "out that okay I did one analysis and I did this thing based off that but doing",
    "start": "1735600",
    "end": "1741480"
  },
  {
    "text": "that thing enabled me to do a new analysis so I can do more stuff so it just keeps on building on",
    "start": "1741480",
    "end": "1746840"
  },
  {
    "text": "itself which is really exciting but this is where we have to be",
    "start": "1746840",
    "end": "1752840"
  },
  {
    "text": "careful because remember what I said about always being correct this is where we are",
    "start": "1752840",
    "end": "1761120"
  },
  {
    "text": "really not allowed but we have the opportunity to just change the program",
    "start": "1761120",
    "end": "1766480"
  },
  {
    "text": "and we don't really want to change the program if it changes the results because then it's not the same program",
    "start": "1766480",
    "end": "1772399"
  },
  {
    "text": "anymore and if it's not the same program your developer loses faith and nobody uses your",
    "start": "1772399",
    "end": "1778600"
  },
  {
    "text": "compiler so we can never change the results that's super important and",
    "start": "1778600",
    "end": "1784360"
  },
  {
    "text": "changing something as in an optimization or transformation is always a trade-off",
    "start": "1784360",
    "end": "1789559"
  },
  {
    "text": "there's no such such thing as an universally useful optimization you're",
    "start": "1789559",
    "end": "1794799"
  },
  {
    "text": "always optimizing for something maybe it's execution speed but if you",
    "start": "1794799",
    "end": "1800880"
  },
  {
    "text": "want faster execution speeds you might have to introduce some complexity to your code or maybe the code size",
    "start": "1800880",
    "end": "1807720"
  },
  {
    "text": "increases or in any case compilation is probably just going to take longer so",
    "start": "1807720",
    "end": "1812840"
  },
  {
    "text": "you have to pick and choose what you want to optimize for you have to find the balance you're looking for or maybe",
    "start": "1812840",
    "end": "1818480"
  },
  {
    "text": "allow the user to tweak that using Flags or something like that and like I said optimization May",
    "start": "1818480",
    "end": "1825840"
  },
  {
    "text": "introduce artifacts which leads you to having to do more analysis to maybe",
    "start": "1825840",
    "end": "1831120"
  },
  {
    "text": "optimize away some optimization artifacts so it keeps on building of",
    "start": "1831120",
    "end": "1836399"
  },
  {
    "text": "itself um so yeah we I just want to make sure everyone knows that we can't change",
    "start": "1836399",
    "end": "1842080"
  },
  {
    "text": "the program because that's kind of like introducing nasal demons to every single program ever and as C++ programmers we",
    "start": "1842080",
    "end": "1847880"
  },
  {
    "text": "don't like that so imagine this you write this little C code it's fairly simple I hope",
    "start": "1847880",
    "end": "1855360"
  },
  {
    "text": "you all understand that you're just writing hello world and returning zero so you build that and you run it",
    "start": "1855360",
    "end": "1863440"
  },
  {
    "text": "and I would be so pissed if this happened to me right because it's broken the",
    "start": "1863440",
    "end": "1871679"
  },
  {
    "text": "contract I said I wanted hello world and it didn't give me hello world but maybe",
    "start": "1871679",
    "end": "1876880"
  },
  {
    "text": "the compiler thought okay yeah this guy he wrote wrote some code used the function didn't store the result so he",
    "start": "1876880",
    "end": "1884159"
  },
  {
    "text": "didn't need the function call because the compiler forgot that side effect are you know maybe a useful",
    "start": "1884159",
    "end": "1890159"
  },
  {
    "text": "thing of course this is a bad example and maybe more of a joke but you get the",
    "start": "1890159",
    "end": "1895519"
  },
  {
    "text": "idea you have to be careful uh because we really don't want",
    "start": "1895519",
    "end": "1901279"
  },
  {
    "text": "this so during uh in the Midland when we do our analysis and",
    "start": "1901279",
    "end": "1906440"
  },
  {
    "text": "Transformations uh we just ask questions about the code is this piece of code",
    "start": "1906440",
    "end": "1911679"
  },
  {
    "text": "ever run is is this variable what I think it is have you done this before or",
    "start": "1911679",
    "end": "1917399"
  },
  {
    "text": "maybe do we even need to do this and if you can find answer to these questions then maybe you have like found yourself",
    "start": "1917399",
    "end": "1925240"
  },
  {
    "text": "an opportunity to optimize something for example if you see a piece of code",
    "start": "1925240",
    "end": "1930279"
  },
  {
    "text": "that's never run you can it's you can say it's dead and maybe remove it if it's hard to know what value",
    "start": "1930279",
    "end": "1938519"
  },
  {
    "text": "you're looking at but you figure out a way to uh figure it out wait that was a",
    "start": "1938519",
    "end": "1943880"
  },
  {
    "text": "weird sentence you figure out which value you're looking at then maybe you find a way to simplify some sort of",
    "start": "1943880",
    "end": "1951000"
  },
  {
    "text": "logic um and if you see something we've already done maybe you can cach that",
    "start": "1951000",
    "end": "1956600"
  },
  {
    "text": "result and reuse it saving us some cycles of recomputing that",
    "start": "1956600",
    "end": "1961880"
  },
  {
    "text": "value so this has all been you know very handwavy so I told people I wouldn't use",
    "start": "1961880",
    "end": "1969200"
  },
  {
    "text": "too much code in this presentation but I just want to illustrate some optimizations and I just want to make sure that everyone also understands that",
    "start": "1969200",
    "end": "1977200"
  },
  {
    "text": "these are illust ations optimization is not done on text we're not working with text when we optimize but this is text",
    "start": "1977200",
    "end": "1983639"
  },
  {
    "text": "just to illustrate so the first two are called constant folding and propagation which",
    "start": "1983639",
    "end": "1988880"
  },
  {
    "text": "is something of like a basic optimization pretty much everyone does",
    "start": "1988880",
    "end": "1994399"
  },
  {
    "text": "but it's a good um it's a good example of some optimization which is easy to",
    "start": "1994399",
    "end": "2000480"
  },
  {
    "text": "reason about so we have this program we have a bunch of uh constants that have",
    "start": "2000480",
    "end": "2007279"
  },
  {
    "text": "some value but some of them require some",
    "start": "2007279",
    "end": "2011159"
  },
  {
    "text": "computations but the thing is we don't need to emit code that does these um",
    "start": "2012760",
    "end": "2020519"
  },
  {
    "text": "computations because they are constant and this will never be anything different so we can just do this compile",
    "start": "2020519",
    "end": "2025880"
  },
  {
    "text": "time saving the um output program the work to do so the same go goes for C",
    "start": "2025880",
    "end": "2033120"
  },
  {
    "text": "where a * B is 45 and 90 / 2 is also 45 so we end up something like this on on",
    "start": "2033120",
    "end": "2039760"
  },
  {
    "text": "the left hand side left hand side yeah so now we have um",
    "start": "2039760",
    "end": "2049480"
  },
  {
    "text": "C which is also zero so we know that so we have done constant folding that's the",
    "start": "2049480",
    "end": "2054760"
  },
  {
    "text": "art of computing constant values during compile time but notice that we're also",
    "start": "2054760",
    "end": "2061960"
  },
  {
    "text": "returning zero instead of C that's the propagation part we can rewrite uh",
    "start": "2061960",
    "end": "2068878"
  },
  {
    "text": "some constant with its value saving us a load for example which is you",
    "start": "2068879",
    "end": "2075480"
  },
  {
    "text": "know there's some gain to be had not the greatest one but it's it's a nice optimization to know",
    "start": "2075480",
    "end": "2082040"
  },
  {
    "text": "about um but again we have to make sure we're allowed to do this because",
    "start": "2082040",
    "end": "2087960"
  },
  {
    "text": "otherwise we might break something if these weren't constants for example if they we user input we could never do",
    "start": "2087960",
    "end": "2095359"
  },
  {
    "text": "this um and since we already have this nice piece of code we also see",
    "start": "2096200",
    "end": "2103599"
  },
  {
    "text": "that we don't really need the variables anymore they're constant but they don't",
    "start": "2103599",
    "end": "2109160"
  },
  {
    "text": "they don't change the program result so that was our contract right we will never change the results of any program",
    "start": "2109160",
    "end": "2114839"
  },
  {
    "text": "in any way these constants does not change the result so we can just remove",
    "start": "2114839",
    "end": "2120680"
  },
  {
    "text": "them which looks like this which is some uh sub um what I'm looking for like it's",
    "start": "2120680",
    "end": "2128040"
  },
  {
    "text": "a it's a type of dead code elimination called a dead assignment elimination so you make some value or constant and",
    "start": "2128040",
    "end": "2133320"
  },
  {
    "text": "you're not using it so we can safely remove it um moving",
    "start": "2133320",
    "end": "2139440"
  },
  {
    "text": "on is oh sorry is uh I I hate that name",
    "start": "2139440",
    "end": "2145640"
  },
  {
    "text": "so much it's too long it's too verbose but the thing is you have a loop and you have something that is invariant inside",
    "start": "2145640",
    "end": "2152920"
  },
  {
    "text": "of the loop which means it does not vary it does not change and then you code",
    "start": "2152920",
    "end": "2158440"
  },
  {
    "text": "motion it out you move it out so you have a program like this you always",
    "start": "2158440",
    "end": "2163839"
  },
  {
    "text": "compute the number of total steps inside of the loop body but that computation does not rely on anything that's",
    "start": "2163839",
    "end": "2170000"
  },
  {
    "text": "changing inside of the loop you just have these values up here those are the only",
    "start": "2170000",
    "end": "2175440"
  },
  {
    "text": "dependencies so what you really want to do is just move that out it doesn't",
    "start": "2175440",
    "end": "2180520"
  },
  {
    "text": "really right you see it if you can prove that this is safe this might actually",
    "start": "2180520",
    "end": "2185920"
  },
  {
    "text": "save you a couple of Cycles every single time that Loop is rolling and Some Loops",
    "start": "2185920",
    "end": "2191960"
  },
  {
    "text": "are infinite so that might save you a lot of time in the long run and",
    "start": "2191960",
    "end": "2197680"
  },
  {
    "text": "um so when we have this total steps it's finally computed we know the",
    "start": "2197680",
    "end": "2205240"
  },
  {
    "text": "value and we use it in there so what if I said okay but what if",
    "start": "2205240",
    "end": "2212640"
  },
  {
    "text": "these guys are constant then we're able to do constant folding which I just told you",
    "start": "2212640",
    "end": "2218480"
  },
  {
    "text": "about give us the value of this thing compile time and then we propagate it to",
    "start": "2218480",
    "end": "2224640"
  },
  {
    "text": "this one over here so we don't have the load but then we don't really need the",
    "start": "2224640",
    "end": "2230720"
  },
  {
    "text": "total steps variable at all anymore so we can just remove it so optimization enable more analysis which more which",
    "start": "2230720",
    "end": "2238359"
  },
  {
    "text": "may enable some more transformation right it kind of keeps on going and you have to know when to stop and I don't so",
    "start": "2238359",
    "end": "2246160"
  },
  {
    "text": "I did this um another one which has a really easy",
    "start": "2246160",
    "end": "2251599"
  },
  {
    "text": "base case but is much harder to do in practice is to Loop unrolling so doing a",
    "start": "2251599",
    "end": "2257920"
  },
  {
    "text": "loop actually has some overhead you have to do like the comparison you have to increment the the index that that is a",
    "start": "2257920",
    "end": "2266480"
  },
  {
    "text": "small piece of work but it still work so if you can prove to do somehow that this",
    "start": "2266480",
    "end": "2272960"
  },
  {
    "text": "will always be 10 iterations you can just remove the loop",
    "start": "2272960",
    "end": "2278000"
  },
  {
    "text": "and insert a loop body it 10 times saves us the overhead of the loop",
    "start": "2278000",
    "end": "2283200"
  },
  {
    "text": "but will increase code size by quite a lot so you have to know what you're uh optimizing for again everything's a",
    "start": "2283200",
    "end": "2291000"
  },
  {
    "text": "trade-off and now my favorite thing or not favorite but I I enjoy it the single",
    "start": "2291000",
    "end": "2296800"
  },
  {
    "text": "static assignment no static single assignment form so on the left hand side we have",
    "start": "2296800",
    "end": "2302160"
  },
  {
    "text": "some little dumb program where we give a the value of three B something then we reassign a and",
    "start": "2302160",
    "end": "2310640"
  },
  {
    "text": "print it and if we were trying to do something smart inside of this uh uh function",
    "start": "2310640",
    "end": "2318040"
  },
  {
    "text": "called compile time we would really know uh have to know what value does a have",
    "start": "2318040",
    "end": "2324880"
  },
  {
    "text": "so we have to do some sort of data flow analysis right we have to figure out okay a used to be three at least let's",
    "start": "2324880",
    "end": "2331640"
  },
  {
    "text": "see okay yeah there's a five okay so it's probably five and that's easy for us to see and the textual represent",
    "start": "2331640",
    "end": "2337440"
  },
  {
    "text": "presentation but from a computer a generalized algorithm working with all sorts of",
    "start": "2337440",
    "end": "2342800"
  },
  {
    "text": "programs it might not be as easy on the flip side in SSA",
    "start": "2342800",
    "end": "2348480"
  },
  {
    "text": "form you can only instantiate the variable one place and give it a value",
    "start": "2348480",
    "end": "2356040"
  },
  {
    "text": "oh wait yeah you can only assign to a variable once so if you ever do a",
    "start": "2356040",
    "end": "2361240"
  },
  {
    "text": "reassignment such as this it is in fact a new variable so notice how we have A1",
    "start": "2361240",
    "end": "2366480"
  },
  {
    "text": "and A2 now and when we look at the print F call it's immediate which value we're looking",
    "start": "2366480",
    "end": "2372319"
  },
  {
    "text": "at because this A2 by the contract of being in the in an SSA form has only one",
    "start": "2372319",
    "end": "2379520"
  },
  {
    "text": "place it could have gotten its value so now it's much easier to reason with so this is not an optimization in itself it",
    "start": "2379520",
    "end": "2385440"
  },
  {
    "text": "just helps us analyze to figure out what to do",
    "start": "2385440",
    "end": "2391160"
  },
  {
    "text": "next but I feel like it's kind of interesting to see what happens when you have a branch because uh this is I",
    "start": "2391400",
    "end": "2398680"
  },
  {
    "text": "suppose kind of specific to lvm but I thought it was a neat little trick so we",
    "start": "2398680",
    "end": "2404440"
  },
  {
    "text": "have this condition which changes the value of a",
    "start": "2404440",
    "end": "2410160"
  },
  {
    "text": "um and how do we express that in single static assignment",
    "start": "2410400",
    "end": "2415599"
  },
  {
    "text": "form uh we create our extra variables just like before and we give it some",
    "start": "2415599",
    "end": "2422520"
  },
  {
    "text": "value based on the condition right but when we supposed to return it",
    "start": "2422520",
    "end": "2427560"
  },
  {
    "text": "it we need to know exactly which one to return so we create a fourth a which has",
    "start": "2427560",
    "end": "2434319"
  },
  {
    "text": "something called a f function in it a f function is not a real function it is just a notation that tells us to or",
    "start": "2434319",
    "end": "2442079"
  },
  {
    "text": "tells the compiler rather to insert code that gives us the value of the branch we",
    "start": "2442079",
    "end": "2448440"
  },
  {
    "text": "took so the result of a f function or the note the F notation is the branch we",
    "start": "2448440",
    "end": "2455720"
  },
  {
    "text": "came from yeah to L it's not specific to lvm I've",
    "start": "2455720",
    "end": "2462640"
  },
  {
    "text": "just been working with lvm lately so I I just made an assumption but thank",
    "start": "2462640",
    "end": "2469000"
  },
  {
    "text": "you okay there we go it is uh typically a common thing thank",
    "start": "2469079",
    "end": "2476000"
  },
  {
    "text": "you uh so yeah I just thought it was a neat trick and um yeah because the first time I looked",
    "start": "2476000",
    "end": "2482359"
  },
  {
    "text": "at this and I did a conditional I was like wait how do I know huh you know",
    "start": "2482359",
    "end": "2487800"
  },
  {
    "text": "it's really hard to reason about but this notation uh fixes",
    "start": "2487800",
    "end": "2492839"
  },
  {
    "text": "that so that was a bit of a um uh transformation and optimization crash",
    "start": "2492839",
    "end": "2499040"
  },
  {
    "text": "course I guess we you just Illustrated a couple of things uh so it's time to move on to the back",
    "start": "2499040",
    "end": "2505960"
  },
  {
    "text": "end so in the back end we are doing everything platform specific right",
    "start": "2505960",
    "end": "2514319"
  },
  {
    "text": "so uh if there are any platform from specific optimizations we can do based",
    "start": "2514319",
    "end": "2519560"
  },
  {
    "text": "on whatever platform we're targeting we want to do them here uh if there's no such thing we can",
    "start": "2519560",
    "end": "2525720"
  },
  {
    "text": "just move on to code generation which of course is platform is specific by Nature um so we just take whatever IR we",
    "start": "2525720",
    "end": "2534640"
  },
  {
    "text": "ended up in or many of them or some metad data from the mid middle end and we use that to do some final",
    "start": "2534640",
    "end": "2541240"
  },
  {
    "text": "optimization passes and then code generation finally",
    "start": "2541240",
    "end": "2546599"
  },
  {
    "text": "boy and I had a really hard time speaking generally about platform specific an analysis because it's",
    "start": "2547280",
    "end": "2554880"
  },
  {
    "text": "platform specific you can Target whatever you want to right so you just have to know your platform I it's hard",
    "start": "2554880",
    "end": "2561640"
  },
  {
    "text": "for me to give some specific guidelines in such a general manner at least for me but just keep in mind that the different",
    "start": "2561640",
    "end": "2569200"
  },
  {
    "text": "platforms you can Target may have such different behaviors like like the V8",
    "start": "2569200",
    "end": "2574400"
  },
  {
    "text": "engine of chromium uh the thing that runs JavaScript it will behave completely",
    "start": "2574400",
    "end": "2579839"
  },
  {
    "text": "different from like an embedded Raspberry Pi or an Nvidia graphics card running Cuda yes their strengths and",
    "start": "2579839",
    "end": "2587400"
  },
  {
    "text": "weaknesses are vastly different their mode of operation is just a whole you",
    "start": "2587400",
    "end": "2593280"
  },
  {
    "text": "know it's it's different which what I'm trying to say so you have to know about",
    "start": "2593280",
    "end": "2598599"
  },
  {
    "text": "any well performing patterns uh if you're targeting some lowlevel",
    "start": "2598599",
    "end": "2603680"
  },
  {
    "text": "construction maybe you want to think about cach locality you don't may I don't think you need to",
    "start": "2603680",
    "end": "2610079"
  },
  {
    "text": "do that in the same with the same um",
    "start": "2610079",
    "end": "2615359"
  },
  {
    "text": "amount of effort on something like the web where you're going to be bound by internet latency I mean Network latency",
    "start": "2615359",
    "end": "2622200"
  },
  {
    "text": "but on something like in a Raspberry Pi or a graphics card you really want to hit your cash locality if you have a",
    "start": "2622200",
    "end": "2629040"
  },
  {
    "text": "bunch of cash misses then your program is going to perform bad and your customers will be angry uh same goes for register",
    "start": "2629040",
    "end": "2635720"
  },
  {
    "text": "allocation which just uh which variables do you put in registers and which do you spill out to the",
    "start": "2635720",
    "end": "2641280"
  },
  {
    "text": "stack uh it's just a lot of things to keep in mind and those things you have",
    "start": "2641280",
    "end": "2646920"
  },
  {
    "text": "to keep in mind changes per platform so you have to be the expert here when you're writing a back",
    "start": "2646920",
    "end": "2652119"
  },
  {
    "text": "end which of course is uh great because because of the reusable components we",
    "start": "2652119",
    "end": "2658800"
  },
  {
    "text": "can leverage other people's back end if we did a good good job making for example a middle end or a front end so",
    "start": "2658800",
    "end": "2664680"
  },
  {
    "text": "we can just mix and match as long as they're compatible which is why I I found it to be",
    "start": "2664680",
    "end": "2670599"
  },
  {
    "text": "interesting to learn llvm because I was up and running in almost no code at all uh I just made a front end and the L",
    "start": "2670599",
    "end": "2678319"
  },
  {
    "text": "end project made everything else for me kind of a lazy man's approach but it did",
    "start": "2678319",
    "end": "2683760"
  },
  {
    "text": "work took me five days of not knowing what to do to a final",
    "start": "2683760",
    "end": "2690160"
  },
  {
    "text": "product that was cool um and as",
    "start": "2690160",
    "end": "2695359"
  },
  {
    "text": "always we have to be conc conservative and careful because we can't change any",
    "start": "2695359",
    "end": "2700800"
  },
  {
    "text": "results I'm going to say this a lot of times so you guys will never forget that because you are now all aspiring",
    "start": "2700800",
    "end": "2706960"
  },
  {
    "text": "compiler engineers and some professionals um yeah so we don't want",
    "start": "2706960",
    "end": "2712079"
  },
  {
    "text": "to induce nasal demons in every single compiled program because that's a very unpopular thing to",
    "start": "2712079",
    "end": "2718800"
  },
  {
    "text": "do finally code generation this is the last last step so bear with me now",
    "start": "2718800",
    "end": "2724119"
  },
  {
    "text": "you've been great um we we need to Define some translation scheme because all we have",
    "start": "2724119",
    "end": "2730000"
  },
  {
    "text": "now is some data structures right it's not code it's not text it doesn't look like anything uh so our translation scheme",
    "start": "2730000",
    "end": "2738160"
  },
  {
    "text": "has to be both correct because of nasal demons right",
    "start": "2738160",
    "end": "2745160"
  },
  {
    "text": "and it has to take into the different considerations which we discussed for a platform if it's instruction",
    "start": "2745160",
    "end": "2753520"
  },
  {
    "text": "selection uh which is you know the art of transl one instruction that maybe",
    "start": "2753520",
    "end": "2758839"
  },
  {
    "text": "doesn't exist in the target language so how would you translate that and if you do that in a bad way it's going to have",
    "start": "2758839",
    "end": "2765240"
  },
  {
    "text": "different results right and yeah you just have to really",
    "start": "2765240",
    "end": "2770440"
  },
  {
    "text": "think about what's the feature set of my Target and I can now leverage that in a good way so just think about assembly",
    "start": "2770440",
    "end": "2776960"
  },
  {
    "text": "versus JavaScript or a c compiler versus the typescript compiler uh it's it's a",
    "start": "2776960",
    "end": "2784480"
  },
  {
    "text": "world of difference um um so again we have some",
    "start": "2784480",
    "end": "2790160"
  },
  {
    "text": "code I hope you guys can read that it's just an illustration of like a C++",
    "start": "2790160",
    "end": "2796359"
  },
  {
    "text": "program you have an enumeration of some conference and tendi where someone has the conference pass the workshop pass",
    "start": "2796359",
    "end": "2802319"
  },
  {
    "text": "the all access pass or is a speaker then we have a class of that's called a conference attendee which can be",
    "start": "2802319",
    "end": "2808119"
  },
  {
    "text": "constructed with a name and a type and printed nicely to the terminal somehow",
    "start": "2808119",
    "end": "2814960"
  },
  {
    "text": "and then in the main function we just create one called Yim because I'm very inventive and we print me so we'll just",
    "start": "2814960",
    "end": "2822640"
  },
  {
    "text": "use this to to look at how can we map for example the class construct to",
    "start": "2822640",
    "end": "2828240"
  },
  {
    "text": "different languages and I realized after writing this that C++ classes is kind of",
    "start": "2828240",
    "end": "2834920"
  },
  {
    "text": "a a rabbit hole because there's so much invisible going on so we'll just",
    "start": "2834920",
    "end": "2840160"
  },
  {
    "text": "simplify it so don't don't hate me okay so how would we map the construct",
    "start": "2840160",
    "end": "2845920"
  },
  {
    "text": "of a class to some different Target so I've just done the exercise of uh",
    "start": "2845920",
    "end": "2851640"
  },
  {
    "text": "lowering this code to some other languages in JavaScript classes is is",
    "start": "2851640",
    "end": "2858440"
  },
  {
    "text": "immediate because we have the class keyword we can just use that and then that should be more less the same thing",
    "start": "2858440",
    "end": "2864480"
  },
  {
    "text": "I'm not a JavaScript developer but it was kind of interesting for me to see that enumerations weren't natively",
    "start": "2864480",
    "end": "2870960"
  },
  {
    "text": "supported in JavaScript so you have to actually figure out how to implement something like an enumeration by",
    "start": "2870960",
    "end": "2876200"
  },
  {
    "text": "yourself in your compiler and you have to stick with that um so that was you know an",
    "start": "2876200",
    "end": "2883960"
  },
  {
    "text": "interesting find which kind of made me happy because then someone has thought about that when they made typescript",
    "start": "2883960",
    "end": "2890440"
  },
  {
    "text": "which does uh support native in numerations so this one is kind of given",
    "start": "2890440",
    "end": "2896559"
  },
  {
    "text": "it's more or less the same um but C you need some sort of translation scheme",
    "start": "2896559",
    "end": "2902440"
  },
  {
    "text": "right because we don't have classes and you have structs which is kind of sim ilar it's some way to box together a",
    "start": "2902440",
    "end": "2910280"
  },
  {
    "text": "bunch of values right but you can't associate member functions to it so we",
    "start": "2910280",
    "end": "2916200"
  },
  {
    "text": "can with like some clever name scheming we can emulate that by prefixing",
    "start": "2916200",
    "end": "2921359"
  },
  {
    "text": "conference at before some functions that for example construct a conference andd",
    "start": "2921359",
    "end": "2926760"
  },
  {
    "text": "or PR prints it and this will more or less give us something similar so this",
    "start": "2926760",
    "end": "2932520"
  },
  {
    "text": "is the kind of thing we have to think about and I I'm sure I've made a lot mistakes in this so just take it as an",
    "start": "2932520",
    "end": "2940520"
  },
  {
    "text": "illustration okay nice and I'm just going to do this okay",
    "start": "2940520",
    "end": "2948200"
  },
  {
    "text": "I'm not blue so the next slide will maybe offend some people and I realize that so I",
    "start": "2948200",
    "end": "2956760"
  },
  {
    "text": "apologize because C and JavaScript is one thing but LM and assembly I I didn't",
    "start": "2957319",
    "end": "2965559"
  },
  {
    "text": "want to write out the code come on on because assembly R kind of looks like some sort of assembly except that it has",
    "start": "2965559",
    "end": "2972839"
  },
  {
    "text": "user defined types and function calls and a notion of something we can use as",
    "start": "2972839",
    "end": "2978599"
  },
  {
    "text": "a variable so it kind of looks like something similar to C we would use the",
    "start": "2978599",
    "end": "2984040"
  },
  {
    "text": "same approach but it would look different because it's more assembly like on the assembly uh side however um",
    "start": "2984040",
    "end": "2992319"
  },
  {
    "text": "yeah you you guys know assembly you have to think about how we want to lay out the structure in memory you have to",
    "start": "2992319",
    "end": "2998839"
  },
  {
    "text": "store that somehow so you can recall what what what's what's my name you have to figure out how to get that and uh you",
    "start": "2998839",
    "end": "3006280"
  },
  {
    "text": "have to treat that as a unit and then you can fortunately you have like the",
    "start": "3006280",
    "end": "3012240"
  },
  {
    "text": "call in conventions so you know have to make something that looks like a function but there's a lot more thought",
    "start": "3012240",
    "end": "3017599"
  },
  {
    "text": "that goes into it so the lower extra sorry abstraction level you're trying to",
    "start": "3017599",
    "end": "3023119"
  },
  {
    "text": "Target the more thought you have to put into your translations scheme because otherwise you're going to have a bad",
    "start": "3023119",
    "end": "3029000"
  },
  {
    "text": "time and not and not really be able to represent the code that was your input so yeah let's just not get into",
    "start": "3029000",
    "end": "3036480"
  },
  {
    "text": "inheritance on that because that the code just blows up it's a lot of things that happening behind the",
    "start": "3036480",
    "end": "3042640"
  },
  {
    "text": "scene so with that said I just I I did like um a test run for some friends with",
    "start": "3042640",
    "end": "3049480"
  },
  {
    "text": "this presentation and they were like okay this is cool I learn a bunch of new stuff but why do I need to learn this so",
    "start": "3049480",
    "end": "3058799"
  },
  {
    "text": "I figured I'd just make a slide about that I feel like even if you're never going to touch the compiler source code",
    "start": "3058799",
    "end": "3065760"
  },
  {
    "text": "in any shape or form you're going to learn a couple of skills that you can transfer to a lot of stuff I like",
    "start": "3065760",
    "end": "3072720"
  },
  {
    "text": "developing developer tools or language tools so if you can make a language",
    "start": "3072720",
    "end": "3079440"
  },
  {
    "text": "front end you can make syntax highlighting you can make rules formatters and you know that little red",
    "start": "3079440",
    "end": "3085960"
  },
  {
    "text": "line under code in your editor when you done something stupid that's code analysis that you",
    "start": "3085960",
    "end": "3092319"
  },
  {
    "text": "might have seen in I guess a combination of the front and middle end so you can",
    "start": "3092319",
    "end": "3098640"
  },
  {
    "text": "just use this outside of compilers to make all sorts of tools and I think that's really cool uh skill to have in",
    "start": "3098640",
    "end": "3104799"
  },
  {
    "text": "your skill sets even though you're never going to actually make a compiler so I",
    "start": "3104799",
    "end": "3111200"
  },
  {
    "text": "figured it's worth learning plus I I think I think it's fun I've never been paid to do this I just Do It For Fun",
    "start": "3111200",
    "end": "3117480"
  },
  {
    "text": "pretty much um so yeah thank you so much and I",
    "start": "3117480",
    "end": "3123280"
  },
  {
    "text": "just wanted to shout out that this is my first conference talk ever so thank you for showing up made me really happy so",
    "start": "3123280",
    "end": "3129720"
  },
  {
    "text": "if there's any questions I'm happy to take those or at least try",
    "start": "3129720",
    "end": "3134790"
  },
  {
    "text": "[Applause]",
    "start": "3134790",
    "end": "3142500"
  }
]