[
  {
    "text": "hello and good morning everyone I hope that everybody can hear me with the rain and everything I hear myself getting",
    "start": "6759",
    "end": "12960"
  },
  {
    "text": "louder so I hope it all works still some people",
    "start": "12960",
    "end": "19080"
  },
  {
    "text": "uh dropping in um hello my name is David and today",
    "start": "19080",
    "end": "25439"
  },
  {
    "text": "I'm going to talk to you about virtual threat so I'm going to give you an introduction and tell you all about the",
    "start": "25439",
    "end": "31320"
  },
  {
    "text": "pit files of Java's new concurrency model my name is David I am a software",
    "start": "31320",
    "end": "36399"
  },
  {
    "text": "developer in anell for around eight years now and I work at Team workstar it",
    "start": "36399",
    "end": "41719"
  },
  {
    "text": "and if you have any questions after the presentation you can find me here at the",
    "start": "41719",
    "end": "47079"
  },
  {
    "text": "conference or you can reach out to me at my Twitter or on my website there are some ways to contact",
    "start": "47079",
    "end": "53440"
  },
  {
    "text": "me so let's get started because we have a lot of things to cover so so I will",
    "start": "53440",
    "end": "60480"
  },
  {
    "text": "start with the current situation what are the kind of threats that we have now inside Java how do we use them what are",
    "start": "60480",
    "end": "67040"
  },
  {
    "text": "some of the uh ways we're using them and what are the limitations and then I will",
    "start": "67040",
    "end": "73240"
  },
  {
    "text": "slowly go into virtual threats what are they how do they work what can we do",
    "start": "73240",
    "end": "78680"
  },
  {
    "text": "with them and what are some of the pit files you may",
    "start": "78680",
    "end": "84159"
  },
  {
    "text": "encounter and of course how can we create a lot of them because that's the M most amazing part about them is that",
    "start": "84400",
    "end": "91200"
  },
  {
    "text": "you are going to see that we can create tens of thousands of them and when we",
    "start": "91200",
    "end": "96680"
  },
  {
    "text": "have lots of threats we want to somehow manage the lifetimes and that's what we are going to use structured concurrency",
    "start": "96680",
    "end": "104240"
  },
  {
    "text": "for and I will talk to you a bit more about it",
    "start": "104240",
    "end": "109719"
  },
  {
    "text": "later the rain is really starting to uh get L and at the end there's some time for a",
    "start": "109719",
    "end": "117119"
  },
  {
    "text": "Q&A at the end so uh before I really really start a word",
    "start": "117119",
    "end": "122960"
  },
  {
    "text": "of caution uh some of the things are still in work in in progress which means",
    "start": "122960",
    "end": "128840"
  },
  {
    "text": "that some things might still change the API for the virtual threats that's",
    "start": "128840",
    "end": "134360"
  },
  {
    "text": "totally going to be the same as you're going to see now and in a few days from now but the structured concurrency part",
    "start": "134360",
    "end": "141640"
  },
  {
    "text": "is still very much in development it's still a preview feature and some things",
    "start": "141640",
    "end": "147160"
  },
  {
    "text": "might still change some apis may change some class name may change but the ideas behind them will be the same or at least",
    "start": "147160",
    "end": "155160"
  },
  {
    "text": "I hope so and now it starts raining on the",
    "start": "155160",
    "end": "163280"
  },
  {
    "text": "table that's the kind of improv you have to do as a speaker I guess but uh Java",
    "start": "164400",
    "end": "170840"
  },
  {
    "text": "21 that's when you can start playing with um give me a",
    "start": "170840",
    "end": "178400"
  },
  {
    "text": "moment I'm all safe now so with Java 21 you can",
    "start": "178760",
    "end": "186920"
  },
  {
    "text": "start playing with virtual threads really start using them and secture concurrency is still",
    "start": "186920",
    "end": "193599"
  },
  {
    "text": "going to be a preview feature",
    "start": "193599",
    "end": "200480"
  },
  {
    "text": "so and only 19 days left till Java 21 releases so until that time enable the",
    "start": "200480",
    "end": "207440"
  },
  {
    "text": "preview flag if you want to try them out or you can download the release",
    "start": "207440",
    "end": "214120"
  },
  {
    "text": "candidate so these are the kind of threads we are currently using inside",
    "start": "215439",
    "end": "220799"
  },
  {
    "text": "Java I think this looks familiar to everyone is just creating a thread oh has done something like this",
    "start": "220799",
    "end": "229000"
  },
  {
    "text": "before Ah that's almost everyone that's great so what happens here is that we",
    "start": "229000",
    "end": "234519"
  },
  {
    "text": "are going to create a thread so we're going to to call the Constructor and J",
    "start": "234519",
    "end": "239720"
  },
  {
    "text": "Ava is going to ask operating system can you create a tread for me and the operating system will of course do that",
    "start": "239720",
    "end": "246360"
  },
  {
    "text": "so we have to leave our safe application we're going to the operating system takes some time because we have to leave",
    "start": "246360",
    "end": "252959"
  },
  {
    "text": "our safe environment then the operating system has to allocate some memory for",
    "start": "252959",
    "end": "258560"
  },
  {
    "text": "our thread to operate with and then we get some kind of thread back inside our",
    "start": "258560",
    "end": "264199"
  },
  {
    "text": "application and then we have a thread that we can use so in thread inside Java",
    "start": "264199",
    "end": "269320"
  },
  {
    "text": "it's just a very thin wrapper around a thread that is managed and scheduled by",
    "start": "269320",
    "end": "274400"
  },
  {
    "text": "the operating system so every time we want to create a",
    "start": "274400",
    "end": "281160"
  },
  {
    "text": "new threat we have to go to the operated system and back and every time we create a or",
    "start": "281160",
    "end": "287440"
  },
  {
    "text": "create a thread we allocate depending on the operating system of course around a",
    "start": "287440",
    "end": "292759"
  },
  {
    "text": "megabyte of memory so if you start creating a lot of these kinds of threads",
    "start": "292759",
    "end": "299560"
  },
  {
    "text": "you're going to allocate a lot of memory if you're going to create I think around",
    "start": "299560",
    "end": "304680"
  },
  {
    "text": "2,000 threats you're going to allocate around two megabytes of",
    "start": "304680",
    "end": "309880"
  },
  {
    "text": "memory or something in that range which is quite a lot and as you can see",
    "start": "309880",
    "end": "315720"
  },
  {
    "text": "because it takes a lot of memory we can create a lot of them and we consider them to be a precious resource because",
    "start": "315720",
    "end": "324120"
  },
  {
    "text": "we can't have anlimited amount of them and the start does what you think",
    "start": "324120",
    "end": "329880"
  },
  {
    "text": "it does it starts the threat so how can we create these or how can we use these",
    "start": "329880",
    "end": "336280"
  },
  {
    "text": "kinds of threats or how do we use it now so the easiest way for us developers is",
    "start": "336280",
    "end": "341400"
  },
  {
    "text": "to just create a thread when we have a task so for each task that I have I create a thread the threat will start",
    "start": "341400",
    "end": "347960"
  },
  {
    "text": "running or performing my task and when the task is done I will just discard a",
    "start": "347960",
    "end": "353039"
  },
  {
    "text": "thread and start a new tread when I have a new task and while this is very easy",
    "start": "353039",
    "end": "359240"
  },
  {
    "text": "way of developing your software we aren't making the best",
    "start": "359240",
    "end": "364600"
  },
  {
    "text": "use of the resources that are available this because every time I have to re uh",
    "start": "364600",
    "end": "370360"
  },
  {
    "text": "have to go to the operating system ask for to create a thread go back and only to be discarded when it's done so it's",
    "start": "370360",
    "end": "378319"
  },
  {
    "text": "easy but it's not very nice uh to the",
    "start": "378319",
    "end": "383720"
  },
  {
    "text": "computer so since Java 5 we try to do better we are encouraged to use the",
    "start": "383800",
    "end": "389599"
  },
  {
    "text": "executor services and what the executor service does is that it creates a thread pool for us that we can use we just",
    "start": "389599",
    "end": "397319"
  },
  {
    "text": "submit task to it and when a treat is available it will pick up this task start running it and when it's available",
    "start": "397319",
    "end": "404560"
  },
  {
    "text": "again so the task is done it will put back inside the pool and it will pick up",
    "start": "404560",
    "end": "409759"
  },
  {
    "text": "a new task so this is all very easy and it",
    "start": "409759",
    "end": "416360"
  },
  {
    "text": "makes a lot better use of the resources because now we are just reusing the threats that we have",
    "start": "416360",
    "end": "422400"
  },
  {
    "text": "created but there are also some things you have to look out for for example leaking your tread local",
    "start": "422400",
    "end": "429400"
  },
  {
    "text": "variables if you have a task that sets a thread local variable but you forget to",
    "start": "429400",
    "end": "434919"
  },
  {
    "text": "unset it then this thread will keep that thread Lo variable and a new task will",
    "start": "434919",
    "end": "440919"
  },
  {
    "text": "be able to read a thread local variable of another task and at that point you",
    "start": "440919",
    "end": "446319"
  },
  {
    "text": "are leaking your thread local variables in into other",
    "start": "446319",
    "end": "451840"
  },
  {
    "text": "tasks which isn't considered to be very nice and of course blocking resources if",
    "start": "451840",
    "end": "457759"
  },
  {
    "text": "you have a threat that is waiting for a response from the database then that threat is doing",
    "start": "457759",
    "end": "464400"
  },
  {
    "text": "nothing so I have this very expensive resource doing nothing while it could do better stuff like picking up a new task",
    "start": "464400",
    "end": "472039"
  },
  {
    "text": "in the meantime so the executors they are somewhat nicer for",
    "start": "472039",
    "end": "477840"
  },
  {
    "text": "the resources and for us to developers so it's kind of a win-win but we can do better than that and that's with acing",
    "start": "477840",
    "end": "485560"
  },
  {
    "text": "programming but acing programming while it makes very good use of the",
    "start": "485560",
    "end": "490759"
  },
  {
    "text": "resources in my opinion it is very hard to write and even harder to read",
    "start": "490759",
    "end": "497319"
  },
  {
    "text": "especially the two weeks after you wrote it and it is very hard to debug because",
    "start": "497319",
    "end": "502879"
  },
  {
    "text": "of the profiles and Java being really made around threats so that kinds of makes it a",
    "start": "502879",
    "end": "509919"
  },
  {
    "text": "challenge so it's harder for us developers but it makes really good use of the",
    "start": "509919",
    "end": "515680"
  },
  {
    "text": "resources so how can we improve on this and that's",
    "start": "515680",
    "end": "521680"
  },
  {
    "text": "where the virtual threads come in the virtual threads are a alternative implementation of the thread quas so the",
    "start": "521680",
    "end": "529120"
  },
  {
    "text": "old threats aren't going anywhere they are still there but we just get a new flavor and",
    "start": "529120",
    "end": "536680"
  },
  {
    "text": "they are called viral threads so to be able to tell them apart we uh",
    "start": "536680",
    "end": "544000"
  },
  {
    "text": "call these new threads virtual threads and the old ones we call them platform threats and we call them platform",
    "start": "544000",
    "end": "550519"
  },
  {
    "text": "threats because those are managed by the platform so by the operating system while these virtual threats are managed",
    "start": "550519",
    "end": "557399"
  },
  {
    "text": "and scheduled by the uh gvm so these virtual threats they are",
    "start": "557399",
    "end": "564240"
  },
  {
    "text": "just a concept that list inside the gvm so the operating system doesn't know",
    "start": "564240",
    "end": "569760"
  },
  {
    "text": "anything about them so if I create one I don't have to go to the operating system I don't have to let it create or",
    "start": "569760",
    "end": "576279"
  },
  {
    "text": "allocate some memory that all happens inside our application and the great thing about it",
    "start": "576279",
    "end": "582760"
  },
  {
    "text": "is that now my stack frames of my virtual thread live inside the Heap",
    "start": "582760",
    "end": "589079"
  },
  {
    "text": "which means that if I start creating virtual threads they can start out with just a very tiny amount of memory and",
    "start": "589079",
    "end": "595920"
  },
  {
    "text": "grow as needed so if I if my stack frames get bigger or I get more of them",
    "start": "595920",
    "end": "601120"
  },
  {
    "text": "I can just allocate more memory for it on the Heap and if my stack frames um if",
    "start": "601120",
    "end": "606880"
  },
  {
    "text": "I have less of them then my stack or the memory on the Heap can just shrink",
    "start": "606880",
    "end": "613680"
  },
  {
    "text": "so the great thing about this is that are now resizable so they can start out with a little bit of",
    "start": "613680",
    "end": "620000"
  },
  {
    "text": "memory and this makes them very cheap to create we don't have to leave our application we don't have",
    "start": "620000",
    "end": "627240"
  },
  {
    "text": "to allocate a lot of memory in the beginning just as much as we need to so",
    "start": "627240",
    "end": "633040"
  },
  {
    "text": "we considered these threats to be very cheap they're almost as cheap to create as a m string would",
    "start": "633040",
    "end": "640160"
  },
  {
    "text": "be so I made two applications one that uses the platform thread someone that",
    "start": "640160",
    "end": "645519"
  },
  {
    "text": "uses virtual threads to see how much memory difference there really is so if",
    "start": "645519",
    "end": "651320"
  },
  {
    "text": "you look at the graph from 1 to 100 there isn't really that much of a difference yeah the platform thre start",
    "start": "651320",
    "end": "657440"
  },
  {
    "text": "using a bit more memory at the 100 threads but still it isn't",
    "start": "657440",
    "end": "663720"
  },
  {
    "text": "really it doesn't look like it's worth it to start rewriting your entire application to use Virtual",
    "start": "663720",
    "end": "671920"
  },
  {
    "text": "threads as to why that is we will see later in the presentation but from a",
    "start": "671920",
    "end": "678760"
  },
  {
    "text": "thousand threads and so on you really start seeing those platform threads use up a lot more memory they almost double",
    "start": "678760",
    "end": "685959"
  },
  {
    "text": "and then use almost up to 500 megab of memory which isn't that great and the",
    "start": "685959",
    "end": "694160"
  },
  {
    "text": "plat and the virtual threats well they grow a little and then at 100,000 that",
    "start": "694160",
    "end": "700440"
  },
  {
    "text": "starts to double but at least I have an running application while the platform threats through a out of memory",
    "start": "700440",
    "end": "706519"
  },
  {
    "text": "exception so what this shows you is that you now can create as many threats as you would",
    "start": "706519",
    "end": "713680"
  },
  {
    "text": "like so you don't really have to consider these virtual threats to be expensed",
    "start": "713680",
    "end": "720519"
  },
  {
    "text": "iive or a precious resource so that's enough of the slides",
    "start": "720519",
    "end": "727680"
  },
  {
    "text": "let's go to a demo because that's where the fun starts so I have here a simple",
    "start": "727680",
    "end": "734959"
  },
  {
    "text": "CLA that has two rbl it has a print toask and a sleep TOS is this by the way",
    "start": "734959",
    "end": "740240"
  },
  {
    "text": "visible for everybody great so as I have said the virtual trat",
    "start": "740240",
    "end": "748440"
  },
  {
    "text": "are just a new zoom in just a bit so the virtual threads are just a",
    "start": "748440",
    "end": "756360"
  },
  {
    "text": "new flavor so I can still store them inside a thread so I'm going to create one virtual thread call it",
    "start": "756360",
    "end": "764079"
  },
  {
    "text": "VT and I'm going to call use the thread CLA so instead of using the",
    "start": "764079",
    "end": "770839"
  },
  {
    "text": "Constructor I'm going to use this static Builder method called start virtual thread and S the name does suggest it",
    "start": "770839",
    "end": "778920"
  },
  {
    "text": "will start a virtual thread with a given task so I'm going to give it the print",
    "start": "778920",
    "end": "785680"
  },
  {
    "text": "task and then I only have to call vt. join to give the chance to print",
    "start": "785680",
    "end": "792839"
  },
  {
    "text": "something to the console and when I run",
    "start": "792839",
    "end": "799199"
  },
  {
    "text": "this it says hello everyone so now you are officially graded by a virtual",
    "start": "805560",
    "end": "812760"
  },
  {
    "text": "thread and with Java 21 we not only get this one static Builder method but we",
    "start": "812760",
    "end": "818399"
  },
  {
    "text": "also get a new Builder that you can access using the off",
    "start": "818399",
    "end": "823720"
  },
  {
    "text": "virtual of course the Builder also works for the platform threats but then you have to use the off platform but we will",
    "start": "823720",
    "end": "831399"
  },
  {
    "text": "use the off virtual for now because I think virtual threats are really awesome and using the Builder you can",
    "start": "831399",
    "end": "838320"
  },
  {
    "text": "set some properties like for example the name I'm going to call this VG",
    "start": "838320",
    "end": "844079"
  },
  {
    "text": "threats and then you can give it a unart a task which will just create a virtual",
    "start": "844079",
    "end": "851639"
  },
  {
    "text": "thread that I have to start manually and that's simply done by calling the start and when I run",
    "start": "851639",
    "end": "860800"
  },
  {
    "text": "this it again says hello everyone",
    "start": "865000",
    "end": "870079"
  },
  {
    "text": "so that is all you need to get started with virtual threats but since Java 5 we",
    "start": "870079",
    "end": "875639"
  },
  {
    "text": "are encouraged to use the executor services and",
    "start": "875639",
    "end": "880839"
  },
  {
    "text": "with Java 21 we also get a new",
    "start": "880839",
    "end": "885440"
  },
  {
    "text": "executor and it's called the new virtual thread portas executor well and here",
    "start": "888000",
    "end": "893199"
  },
  {
    "text": "also the name is very clear what it does is that it creates a new virtual thread for each task that we",
    "start": "893199",
    "end": "900680"
  },
  {
    "text": "submit and intellig is making it orange which means that I can improve something",
    "start": "902160",
    "end": "908120"
  },
  {
    "text": "here which is very true so let's do that",
    "start": "908120",
    "end": "913680"
  },
  {
    "text": "now so with Java 21 the executor service now implements the AOC closable",
    "start": "916360",
    "end": "922040"
  },
  {
    "text": "interface which means that I can use it inside a TR RI resource",
    "start": "922040",
    "end": "927360"
  },
  {
    "text": "statement so so let's see how this works if I just submit some more print",
    "start": "927360",
    "end": "934759"
  },
  {
    "text": "tasks then stop",
    "start": "938440",
    "end": "942920"
  },
  {
    "text": "running and there it is and now I have hello everyone printed to the console",
    "start": "944160",
    "end": "949920"
  },
  {
    "text": "three times so I don't have to call join on any of these virtual threads so I",
    "start": "949920",
    "end": "955600"
  },
  {
    "text": "don't have to wait for the executed to close that's now taken care of why the try of resource",
    "start": "955600",
    "end": "962959"
  },
  {
    "text": "statement so to access this try all these virtual threats have to be",
    "start": "963519",
    "end": "969000"
  },
  {
    "text": "finished either because they threw an exception or they finished successfully whichever may happen",
    "start": "969000",
    "end": "976839"
  },
  {
    "text": "first and only then I can exit this try so let's do a little bit more exciting",
    "start": "976839",
    "end": "982720"
  },
  {
    "text": "because I said that we're going to create lots of virtual threads so let's create 10,000 of 10,000",
    "start": "982720",
    "end": "990519"
  },
  {
    "text": "of them and to do that I'm going to let them sleep for just a",
    "start": "990519",
    "end": "996360"
  },
  {
    "text": "second and see what",
    "start": "996360",
    "end": "1000040"
  },
  {
    "text": "happens any application is done took 2 and a half seconds to create 10,000",
    "start": "1002880",
    "end": "1008199"
  },
  {
    "text": "threats let them sleep for a second and then resume",
    "start": "1008199",
    "end": "1014680"
  },
  {
    "text": "so as you can see on this just a laptop I'm able to create 10,000",
    "start": "1014680",
    "end": "1020519"
  },
  {
    "text": "threads with the platform threats I would just get a out of memory exception",
    "start": "1020519",
    "end": "1025558"
  },
  {
    "text": "so let's see how this works because it's just a laptop it doesn't have 10,000 cores so how do these virtual threads",
    "start": "1025559",
    "end": "1033640"
  },
  {
    "text": "run so this is kind of the situation I created a bunch of virtual",
    "start": "1033640",
    "end": "1039959"
  },
  {
    "text": "threads and they run on what is called a carrier thread and a carrier thread is",
    "start": "1039959",
    "end": "1045678"
  },
  {
    "text": "nothing more than just a platform thread that is designed to run virtual threads",
    "start": "1045679",
    "end": "1050880"
  },
  {
    "text": "and a g thread is well just a normal platform thread but it will run your virtual threads",
    "start": "1050880",
    "end": "1057320"
  },
  {
    "text": "so each virtual thread gets its own que of virtual threads it has to go through",
    "start": "1057320",
    "end": "1064039"
  },
  {
    "text": "so in this example I have four carrier threads and each carrier thread gets its own queue and we'll start working",
    "start": "1064039",
    "end": "1071080"
  },
  {
    "text": "through it by default you get as many carrier threads as there are cores available",
    "start": "1071080",
    "end": "1078000"
  },
  {
    "text": "inside your your system but you can tweak this using uh one of the command line",
    "start": "1078000",
    "end": "1084919"
  },
  {
    "text": "options to make it more or less uh whatever you",
    "start": "1084919",
    "end": "1091600"
  },
  {
    "text": "prefer these carrier threats run inside a fork joint pool with a work Ste",
    "start": "1091600",
    "end": "1097679"
  },
  {
    "text": "scheduler which means that if a carrier thread runs out of work it will just still a virtual thread from another que",
    "start": "1097679",
    "end": "1105880"
  },
  {
    "text": "and start running it there so with these virtual threads you can't be sure that",
    "start": "1105880",
    "end": "1111480"
  },
  {
    "text": "your virtual thread will always run on the same carrier",
    "start": "1111480",
    "end": "1116760"
  },
  {
    "text": "thread so that's not a guarantee so how does a virtual Trad now",
    "start": "1116919",
    "end": "1124520"
  },
  {
    "text": "or the carrier thread note when it has to switch from one virtual thread to another and that is done with the",
    "start": "1124520",
    "end": "1130440"
  },
  {
    "text": "mounting and in mounting so here I have a carrier thread that is",
    "start": "1130440",
    "end": "1135480"
  },
  {
    "text": "running a virtual thread and it is just running this virtual thread just running",
    "start": "1135480",
    "end": "1141200"
  },
  {
    "text": "the or executing it until it encounters a blocking method and when a blocking",
    "start": "1141200",
    "end": "1147240"
  },
  {
    "text": "method occurs the virtual thread is being unmounted so it stch frames are",
    "start": "1147240",
    "end": "1152320"
  },
  {
    "text": "copied from the carrier thread into the Heap and a new virtual thread will take",
    "start": "1152320",
    "end": "1158760"
  },
  {
    "text": "its place so this virtual thread will be mounted which means that its stack is",
    "start": "1158760",
    "end": "1163799"
  },
  {
    "text": "being copied from the Heap into the carrier thread",
    "start": "1163799",
    "end": "1169919"
  },
  {
    "text": "and so the switching happens of one viral thread to another and the carrier thread is now always",
    "start": "1169919",
    "end": "1175960"
  },
  {
    "text": "running but it doesn't happen every time there are some points where it doesn't",
    "start": "1175960",
    "end": "1182200"
  },
  {
    "text": "uh happen so the in mounting and mounting doesn't happen and then is what we called uh what we call is that the",
    "start": "1182200",
    "end": "1188520"
  },
  {
    "text": "virtual thread is being pinned to the carrier thread and this might happen during a synchronized block an object of",
    "start": "1188520",
    "end": "1195520"
  },
  {
    "text": "weight when you make a call to Native coach using something like gni or certain file operations I didn't find",
    "start": "1195520",
    "end": "1202440"
  },
  {
    "text": "out which one but the yaava enhancement proposal for Loom or the virtual thread",
    "start": "1202440",
    "end": "1208640"
  },
  {
    "text": "said that certain F operations might pin your virtual",
    "start": "1208640",
    "end": "1213720"
  },
  {
    "text": "thread but to to see if a virtual thread is spin there are also some command line options but I don't know those by",
    "start": "1213720",
    "end": "1221480"
  },
  {
    "text": "heart so that's something you have to watch out for and that brings us to the pitfalls",
    "start": "1221480",
    "end": "1228200"
  },
  {
    "text": "rual threads are not any faster than your normal threads because they are still running",
    "start": "1228200",
    "end": "1235080"
  },
  {
    "text": "on your carrier threads so they aren't magically making your application faster you can just have a lot more of them",
    "start": "1235080",
    "end": "1241080"
  },
  {
    "text": "giving you more possibilities to use trading you don't want to use them for",
    "start": "1241080",
    "end": "1246240"
  },
  {
    "text": "long running calculations because during a long running calculations you're actually doing stuff you're not being",
    "start": "1246240",
    "end": "1251760"
  },
  {
    "text": "blocked so the whole unmounting and unmount the mounting and un mounting doesn't occur and that is is really",
    "start": "1251760",
    "end": "1258440"
  },
  {
    "text": "where the strength of these virtual thread lies is that they are being switched out when one thread",
    "start": "1258440",
    "end": "1264880"
  },
  {
    "text": "is doing nothing with another these virtual threads are really good at waiting and you also don't want to pull",
    "start": "1264880",
    "end": "1272159"
  },
  {
    "text": "virtual threads because they are so cheap you just create them on the",
    "start": "1272159",
    "end": "1278200"
  },
  {
    "text": "spot uh so you don't have to pull your virtual threats anymore you really have to start thinking of virtual jats as",
    "start": "1278200",
    "end": "1284240"
  },
  {
    "text": "tasks tasks that you want to run in parallel at the same time so you don't",
    "start": "1284240",
    "end": "1290840"
  },
  {
    "text": "have to start uh pulling them if you're doing that then there's something wrong with the design and of course old",
    "start": "1290840",
    "end": "1297720"
  },
  {
    "text": "libraries may not have been adapted yet so they could still use these unsupported methods so what I would",
    "start": "1297720",
    "end": "1303480"
  },
  {
    "text": "advise to always test the performance before you're going to switch to Virtual threads and",
    "start": "1303480",
    "end": "1309919"
  },
  {
    "text": "after so now I talked a lot about virtual threats and how you can create 10 thousands of them but then we also",
    "start": "1310480",
    "end": "1316720"
  },
  {
    "text": "have 10,000 live times that we have to manage and that's where structure",
    "start": "1316720",
    "end": "1322880"
  },
  {
    "text": "concurrency can really help and before I dive deep into what structured concurrency is I want to start at the",
    "start": "1322880",
    "end": "1331480"
  },
  {
    "text": "top because it's quite new who has already played with the structured concurrency",
    "start": "1331480",
    "end": "1339080"
  },
  {
    "text": "features no one okay then we start at the top and those slides aren't there for nothing uh so this is just a simple",
    "start": "1339080",
    "end": "1347159"
  },
  {
    "text": "Java method it's called method a and inside method a I make two method calls one to Method B",
    "start": "1347159",
    "end": "1354200"
  },
  {
    "text": "and one to C and then I combine that result and return it to the",
    "start": "1354200",
    "end": "1361159"
  },
  {
    "text": "caller this isn't really something special uh but the great thing about",
    "start": "1361159",
    "end": "1367360"
  },
  {
    "text": "this is the Simplicity is that you can really easily see the flow of the program because we start at the top at a",
    "start": "1367360",
    "end": "1373919"
  },
  {
    "text": "then B happens C and then somehow I get a result that I can return to the collar",
    "start": "1373919",
    "end": "1379600"
  },
  {
    "text": "there is no magic it's all right there and the great thing",
    "start": "1379600",
    "end": "1384720"
  },
  {
    "text": "about this flow is that when a exception happens you know exactly what is going to happen so for example if meod B is a",
    "start": "1384720",
    "end": "1392480"
  },
  {
    "text": "exception I know that my program my function will stop right there I'm not",
    "start": "1392480",
    "end": "1397600"
  },
  {
    "text": "going to try and calm at the C not going to try and create a result I will just throw the error to the parent and let",
    "start": "1397600",
    "end": "1404919"
  },
  {
    "text": "them handle it and the same of course happens for method",
    "start": "1404919",
    "end": "1409960"
  },
  {
    "text": "C I will run my method B so I have part of the result but I know I can stop when",
    "start": "1409960",
    "end": "1415720"
  },
  {
    "text": "methodc is running or FS so I'm not going to try and create a result and the",
    "start": "1415720",
    "end": "1421279"
  },
  {
    "text": "and I'll let the parent method handle",
    "start": "1421279",
    "end": "1426520"
  },
  {
    "text": "it but it gets kind of sticky when I try and introduce some trading so this is",
    "start": "1426720",
    "end": "1434120"
  },
  {
    "text": "the same method but now I have method B and C and they all take both use some kind of threat to get that",
    "start": "1434120",
    "end": "1441799"
  },
  {
    "text": "result and then in the return I will wait for both threads to finish before I",
    "start": "1441799",
    "end": "1447120"
  },
  {
    "text": "again continue so now I'm going to do the same and let one of those methods fill for example let's start with B so",
    "start": "1447120",
    "end": "1455760"
  },
  {
    "text": "what happens now is that I'm going to start my Trad from atod B it will start running and fail somewhere in the future",
    "start": "1455760",
    "end": "1463080"
  },
  {
    "text": "and then my method c will also start and start creating their result when I get to the return statement I first will",
    "start": "1463080",
    "end": "1470039"
  },
  {
    "text": "wait for method B to fill in this example so then it fills and now I have",
    "start": "1470039",
    "end": "1476600"
  },
  {
    "text": "some threat loose inside my system because method C is still started so that threat is doing something but I'm",
    "start": "1476600",
    "end": "1482960"
  },
  {
    "text": "not going to use that result so I have to get out of my own way and kill that",
    "start": "1482960",
    "end": "1489159"
  },
  {
    "text": "threat and the same thing of course for meod C but it's a little bit worse because now my method B is running my",
    "start": "1489159",
    "end": "1496080"
  },
  {
    "text": "method c will also start running at May immediately throw an exception but I",
    "start": "1496080",
    "end": "1501640"
  },
  {
    "text": "will not find out until later so now I'm waiting at this food. get for my method B to finish this Mak take some time that",
    "start": "1501640",
    "end": "1510799"
  },
  {
    "text": "I'm waiting while in the meantime at the csro an exception I can't create the result that I wanted but I'm still stuck",
    "start": "1510799",
    "end": "1518679"
  },
  {
    "text": "waiting on this threat to only if when metod B finishes so I the food get uh I",
    "start": "1518679",
    "end": "1525279"
  },
  {
    "text": "can continue then when I do B get I find out that my metod C has throwing an",
    "start": "1525279",
    "end": "1531120"
  },
  {
    "text": "exception and I can't create a result so I waited for nothing and well the parent",
    "start": "1531120",
    "end": "1536240"
  },
  {
    "text": "thread was pluged also for nothing which isn't really nice but we can make it even a bit more uh worse and that is",
    "start": "1536240",
    "end": "1544120"
  },
  {
    "text": "when the parent threat fails so then I have two threads running loose inside my system that I'm not aware of so I have",
    "start": "1544120",
    "end": "1551240"
  },
  {
    "text": "to use some tooling to fetch them and well kill them which isn't really Pleasant",
    "start": "1551240",
    "end": "1558520"
  },
  {
    "text": "a pleasant experience so this is where structured concurrency is going to help us a",
    "start": "1558520",
    "end": "1564880"
  },
  {
    "text": "lot so let's switch to the",
    "start": "1564880",
    "end": "1569520"
  },
  {
    "text": "demo so there is a lot on screen but I want you to focus first on the tri",
    "start": "1572279",
    "end": "1578279"
  },
  {
    "text": "resource statement because in the tri resource statement I'm going to use or going to implement the structured",
    "start": "1578279",
    "end": "1585840"
  },
  {
    "text": "concurrency part and and structured concurrency in Java is implemented using",
    "start": "1585840",
    "end": "1591000"
  },
  {
    "text": "the structur Tas scope and the structure Tas scope we with Java 21 we get two coins we get the",
    "start": "1591000",
    "end": "1599279"
  },
  {
    "text": "shutdown on success and the shutdown on failure but let's first look on The Showdown on success and The Showdown on",
    "start": "1599279",
    "end": "1606399"
  },
  {
    "text": "success policy states that I'm only interested in the first threat that finishes so I'm going to start a bunch",
    "start": "1606399",
    "end": "1613360"
  },
  {
    "text": "of virtual threads in this example I'm going to start two of them and I'm only in interested in the first one that",
    "start": "1613360",
    "end": "1619279"
  },
  {
    "text": "returns a value and the value is going to be of type",
    "start": "1619279",
    "end": "1624559"
  },
  {
    "text": "string and then I have my scope object that I'm going to use throughout my uh",
    "start": "1624559",
    "end": "1630720"
  },
  {
    "text": "scope and then I have to create the actual uh structure T scope so using the",
    "start": "1630720",
    "end": "1637919"
  },
  {
    "text": "scope I can Fork two new virtual threads so going doing that twice the first",
    "start": "1637919",
    "end": "1644399"
  },
  {
    "text": "virtual threat will return Result One and the second virtual thread will return a result too so when I fork these",
    "start": "1644399",
    "end": "1651559"
  },
  {
    "text": "virtual threads they will immediately start running and then I will block my parent",
    "start": "1651559",
    "end": "1657039"
  },
  {
    "text": "thread and my parent thread will wait at the join so now my virtual threads are running and when I and only after the",
    "start": "1657039",
    "end": "1664720"
  },
  {
    "text": "first one finishes I can continue from this join so when I'm in this print line",
    "start": "1664720",
    "end": "1671200"
  },
  {
    "text": "statement I can use the scope object to fetch the result of my first threat so",
    "start": "1671200",
    "end": "1677039"
  },
  {
    "text": "the scope knows which one of my threats finishes first and because I'm after the join I",
    "start": "1677039",
    "end": "1684080"
  },
  {
    "text": "know that one of them has finished so when I run this example it's probably going to be result",
    "start": "1684080",
    "end": "1691480"
  },
  {
    "text": "one but let's see yeah result one uh was the first thread to",
    "start": "1691480",
    "end": "1697840"
  },
  {
    "text": "finish and either my second thread uh got canceled because it wasn't in time",
    "start": "1697840",
    "end": "1704519"
  },
  {
    "text": "or if it succeeded the result was just discarded so it isn't being",
    "start": "1704519",
    "end": "1711360"
  },
  {
    "text": "used so let's go to the other shutdown",
    "start": "1711360",
    "end": "1716440"
  },
  {
    "text": "policy and that's the shutdown on failure and the shutdown on failure as",
    "start": "1716440",
    "end": "1721919"
  },
  {
    "text": "you can see the example looks the same I'm inside a tri resource statement",
    "start": "1721919",
    "end": "1728720"
  },
  {
    "text": "I'm creating a new scope object using the structured Tas scope uh Showdown on",
    "start": "1728720",
    "end": "1735760"
  },
  {
    "text": "failure and The Showdown down on failure policy states that I'm only interested in in complete results so either all my",
    "start": "1735760",
    "end": "1742640"
  },
  {
    "text": "threats all my virtual threads finish or none of them do and I can just",
    "start": "1742640",
    "end": "1749640"
  },
  {
    "text": "discard the entire results so as you can see I'm still",
    "start": "1749640",
    "end": "1756320"
  },
  {
    "text": "doing the scope. fork but now I get uh two objects subtask a and sub desk",
    "start": "1756320",
    "end": "1763360"
  },
  {
    "text": "B and using those two instances I can later try and get a",
    "start": "1763360",
    "end": "1771080"
  },
  {
    "text": "result so again using the scope to join but now I'm also setting a deadline so",
    "start": "1771080",
    "end": "1778039"
  },
  {
    "text": "to make this example a bit more interesting and this join on uh is so is",
    "start": "1778039",
    "end": "1783600"
  },
  {
    "text": "a deadline and it will wait 10 seconds so I'm going giving these two virtual threads 10 seconds uh to run if they",
    "start": "1783600",
    "end": "1791600"
  },
  {
    "text": "don't finish in time I will just uh the scope will shut them down",
    "start": "1791600",
    "end": "1798600"
  },
  {
    "text": "so after this join my program will continue and then I will check if a",
    "start": "1798600",
    "end": "1804559"
  },
  {
    "text": "exception has happened so the join will wait till both threads either failed or",
    "start": "1804559",
    "end": "1811559"
  },
  {
    "text": "succeeded and then I have to check did one of them throw an error because if one threw an exception I can't create a",
    "start": "1811559",
    "end": "1817880"
  },
  {
    "text": "result and return immediately and the great thing about this is that after the join and after",
    "start": "1817880",
    "end": "1824840"
  },
  {
    "text": "the throw a fi I know that both of my two threads are done they finished successfully so I don't have to check uh",
    "start": "1824840",
    "end": "1832200"
  },
  {
    "text": "for that manually and I can just get the results from them immediately using the get",
    "start": "1832200",
    "end": "1840480"
  },
  {
    "text": "method so when I run this it's going to print Result One and",
    "start": "1840480",
    "end": "1846039"
  },
  {
    "text": "result two to the",
    "start": "1846039",
    "end": "1853600"
  },
  {
    "text": "console looking at the time I do have time for the for demo so these are the",
    "start": "1853600",
    "end": "1860639"
  },
  {
    "text": "two buildin shutdown policies that you get with Java",
    "start": "1860639",
    "end": "1866279"
  },
  {
    "text": "21 but of course you can also create your own and that's R really",
    "start": "1866279",
    "end": "1874760"
  },
  {
    "text": "starts because then you can say uh decide for yourself when your threads",
    "start": "1874760",
    "end": "1880039"
  },
  {
    "text": "have to shut down so the demo I'm going to show you is going to be about",
    "start": "1880039",
    "end": "1886679"
  },
  {
    "text": "application it is a price finder I'm looking for a product with a price less than 50 and if",
    "start": "1886679",
    "end": "1894639"
  },
  {
    "text": "I find a product that's less than 50 I want uh to shut down all the remaining",
    "start": "1894639",
    "end": "1900440"
  },
  {
    "text": "threats that are still searching for a product so I created three products or",
    "start": "1900440",
    "end": "1906600"
  },
  {
    "text": "three tasks to find products the first one will return immediately and get a product that's",
    "start": "1906600",
    "end": "1913679"
  },
  {
    "text": "worth 50 one that is a product of 300 but this task will sleep for 10",
    "start": "1913679",
    "end": "1921519"
  },
  {
    "text": "seconds and I have a product of 200 that will also return",
    "start": "1921519",
    "end": "1927960"
  },
  {
    "text": "immediately so how you implement your own structure Tas scope is by extending it so here I extended the structureal",
    "start": "1928200",
    "end": "1936080"
  },
  {
    "text": "Tas scope and made it return a type of product so the scope that I'm going to",
    "start": "1936080",
    "end": "1943320"
  },
  {
    "text": "create is so the virtual threads inside this scope are always is going to return a",
    "start": "1943320",
    "end": "1950158"
  },
  {
    "text": "product so here I made a temporarily uh store my product that is found but the",
    "start": "1950480",
    "end": "1958080"
  },
  {
    "text": "real magic happens as I is handle complete each virtual thread that uh is",
    "start": "1958080",
    "end": "1963480"
  },
  {
    "text": "created inside my scope is eventually going to call the handle complete method",
    "start": "1963480",
    "end": "1970000"
  },
  {
    "text": "so inside this handle complete I'm going to verify did the TR did the thread succeed so did it finish successfully no",
    "start": "1970000",
    "end": "1977200"
  },
  {
    "text": "errors happened and of little bit too much and of course is",
    "start": "1977200",
    "end": "1983360"
  },
  {
    "text": "my product worth less than 100 so if I find a product that's worth less than",
    "start": "1983360",
    "end": "1989200"
  },
  {
    "text": "100 I want to store it temporarily and shut down my structure task code because",
    "start": "1989200",
    "end": "1994880"
  },
  {
    "text": "I found the product that I'm looking for and the shut down will shut down all the remaining threads that are still running",
    "start": "1994880",
    "end": "2001519"
  },
  {
    "text": "searching for a product and just a simple get method",
    "start": "2001519",
    "end": "2007480"
  },
  {
    "text": "that will return the product that was found so here's the",
    "start": "2007480",
    "end": "2013799"
  },
  {
    "text": "implementation uh again I have a TR resource",
    "start": "2013799",
    "end": "2018559"
  },
  {
    "text": "statement I'm going to create a new criteria scope and I'm going to Fork three new",
    "start": "2019000",
    "end": "2026159"
  },
  {
    "text": "virtual threads that each are going to search for a product so 50 300 and 200",
    "start": "2026159",
    "end": "2033320"
  },
  {
    "text": "and I'm going to call the scope. join and here I will wait till until a product is",
    "start": "2033320",
    "end": "2038799"
  },
  {
    "text": "found and if a product is found or not uh if all the threats are finished or I",
    "start": "2038799",
    "end": "2045279"
  },
  {
    "text": "hopefully one has then I can continue and to show you what happens",
    "start": "2045279",
    "end": "2050560"
  },
  {
    "text": "I'm also going to print the state of these virtual threads so you can see what the state",
    "start": "2050560",
    "end": "2056760"
  },
  {
    "text": "was of the threads that did not finish in time and then to show you it all",
    "start": "2056760",
    "end": "2062040"
  },
  {
    "text": "works it prints the product that was found so have to find to run",
    "start": "2062040",
    "end": "2069878"
  },
  {
    "text": "button so as you can see the two threads finished",
    "start": "2072639",
    "end": "2078000"
  },
  {
    "text": "successfully the product of 50 did that made the scope shut down because it's",
    "start": "2078000",
    "end": "2083520"
  },
  {
    "text": "worth less than 100 product 300 it's unavailable so this thread either did",
    "start": "2083520",
    "end": "2089599"
  },
  {
    "text": "not finish in time or wasn't started yet so it did not",
    "start": "2089599",
    "end": "2094919"
  },
  {
    "text": "faill but it also didn't succeed so it was shut down and product 200 also",
    "start": "2094919",
    "end": "2101440"
  },
  {
    "text": "succeeded but it didn't shut down the uh my star scope because it was worth more",
    "start": "2101440",
    "end": "2108400"
  },
  {
    "text": "than 100 and the product that was found was 50 so to create your own structure Tas",
    "start": "2108400",
    "end": "2118119"
  },
  {
    "text": "scope you only have to extend the product or sorry extend the structure Tas scope and implement the handle on",
    "start": "2118119",
    "end": "2125920"
  },
  {
    "text": "complete method so you can decide when your method has to shut or your scope has to shut",
    "start": "2125920",
    "end": "2133760"
  },
  {
    "text": "down so the pitfall is really not using the structured concurrency part to",
    "start": "2135440",
    "end": "2141200"
  },
  {
    "text": "manage the lifetime of your threats it just makes it very easy and it's code you don't have to maintain yourself and",
    "start": "2141200",
    "end": "2148160"
  },
  {
    "text": "is really a powerful way of managing the lifetime of those virtual",
    "start": "2148160",
    "end": "2154240"
  },
  {
    "text": "threats so in 19 days when Java 21 releases all you need to get started are",
    "start": "2154880",
    "end": "2161839"
  },
  {
    "text": "these two methods the start virtual thread and the new virtual tradas executor that's are you're going to need",
    "start": "2161839",
    "end": "2168319"
  },
  {
    "text": "to start playing with them and trying them out to see if it works for your",
    "start": "2168319",
    "end": "2175440"
  },
  {
    "text": "application and that marks the end of my talk are any",
    "start": "2176720",
    "end": "2183359"
  },
  {
    "text": "questions well if there are no questions then",
    "start": "2185720",
    "end": "2191880"
  },
  {
    "text": "thank you for being here and I wish you a very nice day the",
    "start": "2191880",
    "end": "2197040"
  },
  {
    "text": "oh sorry the rain is making it very",
    "start": "2198800",
    "end": "2203720"
  },
  {
    "text": "hard yeah sorry it's really loud are you familiar with the implementation of",
    "start": "2207800",
    "end": "2213839"
  },
  {
    "text": "these in gold no I'm not familiar with how they work can go",
    "start": "2213839",
    "end": "2220680"
  },
  {
    "text": "sorry I yeah that's I don't know but the the idea behind the co- routines there",
    "start": "2223920",
    "end": "2229319"
  },
  {
    "text": "is a lot of it written on internet but I'm not that well with GH",
    "start": "2229319",
    "end": "2237079"
  },
  {
    "text": "sorry uh any other questions well then thank you and have a",
    "start": "2237240",
    "end": "2245000"
  },
  {
    "text": "nice day of the conference",
    "start": "2245000",
    "end": "2248599"
  }
]