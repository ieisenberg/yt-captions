[
  {
    "text": "all right let's sort of get going here just to help me out a little bit with",
    "start": "5470",
    "end": "10970"
  },
  {
    "text": "the talk today how many folks here have a say hardware engineering background or",
    "start": "10970",
    "end": "16939"
  },
  {
    "text": "have ever programmed in assembler all right how many folks have no idea at all",
    "start": "16939",
    "end": "25220"
  },
  {
    "text": "how a CPU works internal and drooly the same people should put their hands up in",
    "start": "25220",
    "end": "30380"
  },
  {
    "text": "both gate yeah ok good good all right excellent excellent excellent no no",
    "start": "30380",
    "end": "38899"
  },
  {
    "text": "that's that's fine so great so today's",
    "start": "38899",
    "end": "49370"
  },
  {
    "text": "talk I'm not gonna presuppose any pre-existing engineering knowledge of how this stuff works in fact my original",
    "start": "49370",
    "end": "55879"
  },
  {
    "text": "goal with this talk was literally to explain to someone who knew CSS and that",
    "start": "55879",
    "end": "60920"
  },
  {
    "text": "was it how a cpu worked because at the end of the day although throughout our",
    "start": "60920",
    "end": "66800"
  },
  {
    "text": "careers frameworks changes languages change all these things change but the reality of it is that everything you",
    "start": "66800",
    "end": "73220"
  },
  {
    "text": "write ultimately runs on these little bit of silicon these little rocks we have taught to think and the way",
    "start": "73220",
    "end": "80000"
  },
  {
    "text": "those things work has actually not changed appreciably in my career and I",
    "start": "80000",
    "end": "86870"
  },
  {
    "text": "don't expect it to change through the rest of my career and it probably won't change in your career either though there's one thing on the horizon that",
    "start": "86870",
    "end": "92570"
  },
  {
    "text": "might totally rewrite the rules called quantum computing and currently they can't get that to work at all so if they",
    "start": "92570",
    "end": "99590"
  },
  {
    "text": "manage to you know if they manage to come make that happen that will revolutionize things completely and we'll want to be able to predict exactly",
    "start": "99590",
    "end": "105620"
  },
  {
    "text": "how because they can't really get it to work yet but other than that you can pre",
    "start": "105620",
    "end": "111020"
  },
  {
    "text": "will Bank on the things we're gonna walk through today being constant for the rest of your career and it's good to",
    "start": "111020",
    "end": "116600"
  },
  {
    "text": "know because at the end of the day if you want to make your application perform well or run or reliably or",
    "start": "116600",
    "end": "123100"
  },
  {
    "text": "understand why some things are the way they are it all boils down to this",
    "start": "123100",
    "end": "128330"
  },
  {
    "text": "hardware because at the end of the day everything you write has to run on a piece of hardware so whether it's you",
    "start": "128330",
    "end": "135860"
  },
  {
    "text": "know if it's compiled just running directly on the hardware if it's a then a thing that runs on the hardware reads your thing and runs it but either",
    "start": "135860",
    "end": "142250"
  },
  {
    "text": "way somehow for it to do useful things it's got a ultimately get to translate it down to the hardware so let's let's",
    "start": "142250",
    "end": "149120"
  },
  {
    "text": "break this down and if in a favorite technique I like to use to start when you're trying to understand a thing is",
    "start": "149120",
    "end": "154280"
  },
  {
    "text": "pretend the thing does not exist like we didn't have CPUs we'd there was no existing designs we couldn't go down to",
    "start": "154280",
    "end": "160129"
  },
  {
    "text": "the corner shop and just buy one let's do that let's do it from scratch let's figure out all the pieces we would need",
    "start": "160129",
    "end": "165859"
  },
  {
    "text": "to make this work one by one okay so start off with just what is our goal",
    "start": "165859",
    "end": "171650"
  },
  {
    "text": "let's say that as a cpu what I want to do is I want to calculate things I want to be able to do a little bit of basic math maybe say you know a plus B equals",
    "start": "171650",
    "end": "179060"
  },
  {
    "text": "C so I have two things I want to add them together most most trivial thing that we can do",
    "start": "179060",
    "end": "184849"
  },
  {
    "text": "to do that I need something that understands add I need to have an A and",
    "start": "184849",
    "end": "191540"
  },
  {
    "text": "a B and I need to have a seat right so in the most trivial sense I want to take a and B add them together get C I need",
    "start": "191540",
    "end": "199099"
  },
  {
    "text": "to have this stuff a little bit storage for Ain a definition of a definition to be a place to put C and a little bit of",
    "start": "199099",
    "end": "206479"
  },
  {
    "text": "logic to string it together okay it's something but it's nowhere near a CPU because after all I can do is add and",
    "start": "206479",
    "end": "212989"
  },
  {
    "text": "frankly we could do that without the computer and now we have but I'm only adding the same two things together so",
    "start": "212989",
    "end": "218139"
  },
  {
    "text": "let's up the bar a little bit let's up it to the point of that little calculator you get back in the early 80s",
    "start": "218139",
    "end": "223760"
  },
  {
    "text": "the one that looks like an owl you know with the little orange and all it could do is you know the basic math operations",
    "start": "223760",
    "end": "230030"
  },
  {
    "text": "add subtract multiply divide so to do that okay I still just need a B and C",
    "start": "230030",
    "end": "235909"
  },
  {
    "text": "but I need to make my bit in the middle here a little more clever right it's got to be able to know what this operation I",
    "start": "235909",
    "end": "242780"
  },
  {
    "text": "want to do and be able do any of those operations so that means I need something to tell it which one I want",
    "start": "242780",
    "end": "248090"
  },
  {
    "text": "and it needs to be able to actually do that thing and for me to have something a control unit to tell it what to do I",
    "start": "248090",
    "end": "253970"
  },
  {
    "text": "need to have some way of telling that thing which one I meant so the something",
    "start": "253970",
    "end": "260269"
  },
  {
    "text": "like an instruction they would say hey in this case I mean divided or in this case I mean multiply so not much more",
    "start": "260269",
    "end": "267830"
  },
  {
    "text": "complicated a little bit more complicated we've now got an instruction a controlling to tell our logic unit",
    "start": "267830",
    "end": "273020"
  },
  {
    "text": "what operation we want and we have our a/b and I we ever see all right still",
    "start": "273020",
    "end": "278419"
  },
  {
    "text": "pretty simple of course if I want to do anything interesting like taking results and then compounding them I have to",
    "start": "278419",
    "end": "285740"
  },
  {
    "text": "start dealing with memory in some way I need to be able to say maybe I want either",
    "start": "285740",
    "end": "290870"
  },
  {
    "text": "what's an A or something in memory to work on and then take take it and add it",
    "start": "290870",
    "end": "296419"
  },
  {
    "text": "to the other storage and put it out but to get some new yet new result and the minute we touch memory now ok that means",
    "start": "296419",
    "end": "304190"
  },
  {
    "text": "I want to go take my results output put it somewhere in memory so I can you know get back to it later some way of kind of",
    "start": "304190",
    "end": "310159"
  },
  {
    "text": "stuffing it off somewhere and if I do that I also have to be able take that memory and get it back into my little",
    "start": "310159",
    "end": "316639"
  },
  {
    "text": "working area so I can work on it right so maybe able to take a result and put it in memory I may be able to take",
    "start": "316639",
    "end": "322909"
  },
  {
    "text": "something from memory and put it into my little scratch pad area so I can work on it fine enough now I've got the basics",
    "start": "322909",
    "end": "331310"
  },
  {
    "text": "so I can work on memory in and out of course to do that I also have to make my",
    "start": "331310",
    "end": "337159"
  },
  {
    "text": "control unit smarter because something's got to set and decide if we're taking input from memory or if we're not and if",
    "start": "337159",
    "end": "344690"
  },
  {
    "text": "so which one are we putting it into meanwhile it's not that much interesting",
    "start": "344690",
    "end": "350690"
  },
  {
    "text": "if all I could do is fix it of things I really want to be able to do a variable set of things I want to be able to tell it the whole composition of what the",
    "start": "350690",
    "end": "357770"
  },
  {
    "text": "instruction is I want to do so for example I want to be able to tell this thing hey work in a or memory do this",
    "start": "357770",
    "end": "363860"
  },
  {
    "text": "operation with this other thing put the result in memory or keep it in your temporary storage and and to do that",
    "start": "363860",
    "end": "370520"
  },
  {
    "text": "operation after operation I need to have some set of storage I use to actually put instructions into you know way of",
    "start": "370520",
    "end": "377599"
  },
  {
    "text": "actually having a sequence of instructions to that I'm going to execute or in other words a program and",
    "start": "377599",
    "end": "384069"
  },
  {
    "text": "if I have that I need one last little bit of connection I need some way to",
    "start": "384069",
    "end": "389930"
  },
  {
    "text": "sort of communicate as we work okay get me the next instruction so that I can in",
    "start": "389930",
    "end": "395990"
  },
  {
    "text": "fact move forward and go from step one to step two step three step four of actually processing a program",
    "start": "395990",
    "end": "405199"
  },
  {
    "text": "so now I have all the pieces we need to be able to do that basic thing up top source from a register from from a",
    "start": "405199",
    "end": "412470"
  },
  {
    "text": "little storage or memory an operation against another bit of storage and put the result in storage or don't and be",
    "start": "412470",
    "end": "419820"
  },
  {
    "text": "able to have the sequence of these things so I can compound results right so I can have do a little bit of math",
    "start": "419820",
    "end": "425520"
  },
  {
    "text": "and do more math beyond that and you get more math and take the result and have it be meaningful now we take this this",
    "start": "425520",
    "end": "433440"
  },
  {
    "text": "pieces here and we just go whoosh we can actually real able them to the things that they actually are in a",
    "start": "433440",
    "end": "438960"
  },
  {
    "text": "microprocessor now for those that are gonna follow me along really carefully and double-check my my work today we're",
    "start": "438960",
    "end": "446669"
  },
  {
    "text": "gonna use Intel x86 386 assembler so we're pretending it is 1994 because that",
    "start": "446669",
    "end": "453660"
  },
  {
    "text": "still works today and it's simpler than getting into all of the complexities of and the nuance of some of the newer",
    "start": "453660",
    "end": "459270"
  },
  {
    "text": "variations of it but these are all the same pieces we've just changed the labels and we've introduced some terms and the terms are important so let me",
    "start": "459270",
    "end": "465510"
  },
  {
    "text": "hit those real quick so we still have to start data memory and instruction memory like we saw we have you'll notice number",
    "start": "465510",
    "end": "471810"
  },
  {
    "text": "two things called registers in a cpu every CPU has these little scratch pad",
    "start": "471810",
    "end": "476940"
  },
  {
    "text": "areas called registers and ultimately they're the thing the CPU does work on so for example we have a whole set of",
    "start": "476940",
    "end": "484260"
  },
  {
    "text": "registers up here that we can use to have very storage to pull into what we do work on we put the results into a",
    "start": "484260",
    "end": "491190"
  },
  {
    "text": "register on the other side we can then copy from there into memory we have an instruction register where we store the",
    "start": "491190",
    "end": "497310"
  },
  {
    "text": "instruction we are working on the next the part of the program that is running right now and then we have X what",
    "start": "497310",
    "end": "505440"
  },
  {
    "text": "amounts to another register that is our little pointer that tells us where we are in that program you could almost imagine like if I printed out the",
    "start": "505440",
    "end": "511229"
  },
  {
    "text": "program as a sheet and I had one of those little like tabs the little arrow says sign here and it's kind of kept",
    "start": "511229",
    "end": "517589"
  },
  {
    "text": "moving it down the program that's what this instruction pointer is doing now this here is is a classic architecture",
    "start": "517589",
    "end": "525390"
  },
  {
    "text": "not something I invented and it it's basically the way that all modern CPUs",
    "start": "525390",
    "end": "532080"
  },
  {
    "text": "work and I say modern I mean any after basically the roundabout the Apple",
    "start": "532080",
    "end": "540009"
  },
  {
    "text": "to be timeframe through to now and it doesn't matter you're talking about the",
    "start": "540009",
    "end": "545019"
  },
  {
    "text": "processor in your phone or in a server in a data center they all have this and",
    "start": "545019",
    "end": "550899"
  },
  {
    "text": "they play around some of the details you know how many of these are there and some other versions of that but they",
    "start": "550899",
    "end": "556089"
  },
  {
    "text": "work like this one thing I want to call your attention to is you notice I say instruction memory and I show data",
    "start": "556089",
    "end": "562120"
  },
  {
    "text": "memory as if they're two totally separate things and you may thought think to yourself at the moment Kendyl that can't be right",
    "start": "562120",
    "end": "567850"
  },
  {
    "text": "I don't recall buying a laptop with eight gigs of instruction memory Nate gigs of data memory I just bought a cake",
    "start": "567850",
    "end": "573999"
  },
  {
    "text": "so memory and that's true any modern remotely modern operating system or any processor running in",
    "start": "573999",
    "end": "580240"
  },
  {
    "text": "protected mode takes whatever physical memory you have and basically divides it",
    "start": "580240",
    "end": "585459"
  },
  {
    "text": "into these two and and the reason for that is really security that we never",
    "start": "585459",
    "end": "591730"
  },
  {
    "text": "want to let something that is data be treated like a program now back in the old days of early on assembler people",
    "start": "591730",
    "end": "598660"
  },
  {
    "text": "loved to actually pull stunts I make what are called self modifying apps that we literally rewrite their own code as",
    "start": "598660",
    "end": "605110"
  },
  {
    "text": "they went not a good practice it was never a good idea as a matter of fact and now in a modern machine says",
    "start": "605110",
    "end": "611740"
  },
  {
    "text": "absolute you can't do that and it's it's really an essential beginning safety feature to make sure that you can't have",
    "start": "611740",
    "end": "617949"
  },
  {
    "text": "data suddenly inject itself as instructions and so any modern operating system has a hard partition between",
    "start": "617949",
    "end": "624250"
  },
  {
    "text": "these two and and it's interesting because it's one of reasons we had to go to 64-bit because in a 32-bit system",
    "start": "624250",
    "end": "630579"
  },
  {
    "text": "when you say 32 bits what do we mean well that's 32 bits is four bytes that's the size of each of these registers",
    "start": "630579",
    "end": "636970"
  },
  {
    "text": "they're all at that size that's sort of what makes that processor that big it's the width of the data through the",
    "start": "636970",
    "end": "642670"
  },
  {
    "text": "processor but then also meant that when they were dividing memory up just through the sheer way memory addressing",
    "start": "642670",
    "end": "648970"
  },
  {
    "text": "works it limited them to two gigabytes of data and two gigabytes instruction memory because they divided it in half",
    "start": "648970",
    "end": "654569"
  },
  {
    "text": "and well as well the first things we ran into was well that two gigs is just not enough and so we had to go to 64-bit to",
    "start": "654569",
    "end": "660879"
  },
  {
    "text": "be able to go beyond that and then it's to it the number is now inconceivably large number for this and you could see",
    "start": "660879",
    "end": "666429"
  },
  {
    "text": "the large number for that the good news is doubling from 32 to 64 through the power of exponents",
    "start": "666429",
    "end": "672529"
  },
  {
    "text": "gives us numbers that I am confident we will never hit in my lifetime or yours I",
    "start": "672529",
    "end": "677680"
  },
  {
    "text": "say with all the confidence of the guy who's waiting to be quoted when that is it turns out to not be true so all right",
    "start": "677680",
    "end": "685490"
  },
  {
    "text": "if we have defined the hardware and the basic concept of operation so we have",
    "start": "685490",
    "end": "691069"
  },
  {
    "text": "instructions we have ability to have a scratch pad sources put things in a destination have a thing that does the",
    "start": "691069",
    "end": "697730"
  },
  {
    "text": "actual operation what then do have then do we create our programs or program our",
    "start": "697730",
    "end": "705649"
  },
  {
    "text": "CPU so that we can do useful things with it and have those things be repeatable across across hardware and that comes",
    "start": "705649",
    "end": "712759"
  },
  {
    "text": "down to instruction sets so what is an instruction an instruction is the",
    "start": "712759",
    "end": "718910"
  },
  {
    "text": "basically the thing that we is not the smallest thing we as a developer can tell the CPU to do and when I say small",
    "start": "718910",
    "end": "726050"
  },
  {
    "text": "I mean tiny because it turns out that these rocks are actually quite stupid and we they are the opposite of us",
    "start": "726050",
    "end": "733660"
  },
  {
    "text": "computer processors are very stupid but very fast at being stupid people are",
    "start": "733660",
    "end": "739910"
  },
  {
    "text": "actually relatively smart but very slow at being smart and it turns out bowls or paths you can get real results from as",
    "start": "739910",
    "end": "746029"
  },
  {
    "text": "long as you optimize for whichever one you have so what type of instructions do we actually have in the CPU so it really",
    "start": "746029",
    "end": "752029"
  },
  {
    "text": "boils down to just a few basic things we've got basic math which we already saw you know add subtract multiply divide we have binary logic so this is",
    "start": "752029",
    "end": "759800"
  },
  {
    "text": "things like what it called binary ands and ORS and X ORS and they're useful for",
    "start": "759800",
    "end": "764839"
  },
  {
    "text": "really small fiddly operations inside of the CPU to make things work will show a little bit of that we have basic memory",
    "start": "764839",
    "end": "772339"
  },
  {
    "text": "operations it turns out programs spend a lot of time saying copy the data from here to there copy it back again copy not all of it",
    "start": "772339",
    "end": "779990"
  },
  {
    "text": "but just some of it things like that so there's a lot of memory move copy operations and then we have a stack and",
    "start": "779990",
    "end": "787430"
  },
  {
    "text": "this is one of the really the weird thing that sort of stands out is that we have all these super low-level things that are primitives and then you have",
    "start": "787430",
    "end": "794449"
  },
  {
    "text": "this notion of a stack this is just a data structure that's a relatively advanced data structure so",
    "start": "794449",
    "end": "800850"
  },
  {
    "text": "what is a stack I want you to imagine for a minute this table so with the idea",
    "start": "800850",
    "end": "806009"
  },
  {
    "text": "with a stack is the notion of literally stacking sheets of paper on a table so if I have five sheets of paper and I put",
    "start": "806009",
    "end": "812730"
  },
  {
    "text": "one on I push one onto the table it's now pushed onto the stack I put another",
    "start": "812730",
    "end": "818399"
  },
  {
    "text": "one on that's now on the stack and I keep going so if I go 1 2 3 4 5 I've not",
    "start": "818399",
    "end": "824220"
  },
  {
    "text": "got 5 items on my stack when I want to get something off the stack it's called popping off the stack and you get the last thing you put on back so if I if I",
    "start": "824220",
    "end": "833430"
  },
  {
    "text": "were just go push 1 2 3 4 5 and I get pop I go 5 4 3 2 1 because it's like a",
    "start": "833430",
    "end": "838649"
  },
  {
    "text": "pile of papers on your desk for me it's like bills writes his last and Bill's on the top and then I pay that one goes",
    "start": "838649",
    "end": "844709"
  },
  {
    "text": "away and files now I'm faced with the next bill back and then unending as they go down towards the desk it turns out",
    "start": "844709",
    "end": "852019"
  },
  {
    "text": "for many things we do in programming there's just no way around the computer",
    "start": "852019",
    "end": "857759"
  },
  {
    "text": "needing this stack to make other operations work so it's a high level data structure that the CPU actually has",
    "start": "857759",
    "end": "863220"
  },
  {
    "text": "hardware to have to understand other than that then we have really just a couple basic things we have two basic",
    "start": "863220",
    "end": "868980"
  },
  {
    "text": "things left we have the ability to jump to a code location in other words to say like ok I've executed instructions 1 2 3",
    "start": "868980",
    "end": "874800"
  },
  {
    "text": "4 and now I want you to go all the way over to instruction 1000 and skip the",
    "start": "874800",
    "end": "880259"
  },
  {
    "text": "rest of it and I can do what's called a subroutine call and return so instead of me just saying go 1 2 3 4 and jump to",
    "start": "880259",
    "end": "888300"
  },
  {
    "text": "operation a thousand and never come back I might say hey go to 1,000 and then return and hopefully hopefully somewhere",
    "start": "888300",
    "end": "895560"
  },
  {
    "text": "over in a thousand at some point he says and I'm done return back if not my",
    "start": "895560",
    "end": "900839"
  },
  {
    "text": "program is in trouble but this is really basically it this is all the CPU can do",
    "start": "900839",
    "end": "906870"
  },
  {
    "text": "and if you think about all the things you do in modern programming languages your operating way up here and under the",
    "start": "906870",
    "end": "914189"
  },
  {
    "text": "covers a single thing you might ask for might end up under behind the scenes become thousands and thousands of",
    "start": "914189",
    "end": "920670"
  },
  {
    "text": "operations it's a bit like if you have seen like when they build a full-sized",
    "start": "920670",
    "end": "926069"
  },
  {
    "text": "car out of Lego yep it's a full-size car and actually is kind of going down the road but really it's composed of all",
    "start": "926069",
    "end": "932699"
  },
  {
    "text": "these tiny time little things these instructions are the tiny individual Lego and your program",
    "start": "932699",
    "end": "938850"
  },
  {
    "text": "ultimately assembles all that stuff up to being a car and I would be really really difficult if you had to kind of",
    "start": "938850",
    "end": "943860"
  },
  {
    "text": "always build cars out of things the size of Lego and that's why we'd modern programmers we work on two libraries on",
    "start": "943860",
    "end": "950700"
  },
  {
    "text": "top of libraries on top of libraries it's a bit like going out and getting a whole big thing of Lego preassembled and ready to go and dropping it into your",
    "start": "950700",
    "end": "957030"
  },
  {
    "text": "into your construction some make things a lot easier so these are the categories",
    "start": "957030",
    "end": "962340"
  },
  {
    "text": "of instructions that we have let's walk through some actual examples you can see just how this works",
    "start": "962340",
    "end": "967740"
  },
  {
    "text": "let's start with something really simple a memory move one of the simplest things that you can do in code is basically set",
    "start": "967740",
    "end": "973770"
  },
  {
    "text": "one variable to the value of another variable so I want to set a equal to B",
    "start": "973770",
    "end": "981500"
  },
  {
    "text": "now we're gonna show but underneath that is the assembly is the assembler code",
    "start": "981500",
    "end": "986580"
  },
  {
    "text": "that we would tell our Intel instruction for how to do that let's look at this in some detail so whatever you see like e",
    "start": "986580",
    "end": "993840"
  },
  {
    "text": "something something that's a register it's a name of a register in the CPU so think of it as almost like a bunch of",
    "start": "993840",
    "end": "999480"
  },
  {
    "text": "mail slots in an office these are individually named slots I can put things in but you only have one thing in",
    "start": "999480",
    "end": "1005480"
  },
  {
    "text": "at a time so the first thing I do here is I'm actually taking this value moving",
    "start": "1005480",
    "end": "1012650"
  },
  {
    "text": "into that why does assembler work this goes into that because they feel like that's the way they wanted to write it",
    "start": "1012650",
    "end": "1018580"
  },
  {
    "text": "there's just conventions and what are you gonna do now I'm not actually taking the value of e CX and put e'en EI x you",
    "start": "1018580",
    "end": "1026870"
  },
  {
    "text": "notice I got this little plus four here so I've got the value of e CX and I'm adding four to that so I'm getting a",
    "start": "1026870",
    "end": "1031970"
  },
  {
    "text": "little bit of math constant math and going into EAX but there's these pesky",
    "start": "1031970",
    "end": "1037370"
  },
  {
    "text": "square braces around it the pesky square braces or me way of telling the program",
    "start": "1037370",
    "end": "1042589"
  },
  {
    "text": "I don't want you to take the value of this and just copy it I want you to go",
    "start": "1042590",
    "end": "1048290"
  },
  {
    "text": "to that place in memory so ec x + 4 so",
    "start": "1048290",
    "end": "1054740"
  },
  {
    "text": "I've taken the easiest register I've added 4 to it I put square braces around it I'm really saying hey go get 4 bytes of memory",
    "start": "1054740",
    "end": "1060860"
  },
  {
    "text": "starting at the address stored in this but add 4 to that address",
    "start": "1060860",
    "end": "1066670"
  },
  {
    "text": "so we've identified a basically ECX is a number this point often to some place into memory and then I go and get that",
    "start": "1066670",
    "end": "1073430"
  },
  {
    "text": "value and then on the other side I take it from my scratch pad and I move it",
    "start": "1073430",
    "end": "1078860"
  },
  {
    "text": "back into wherever I see X the value it had that spot in memory so if this is my",
    "start": "1078860",
    "end": "1085550"
  },
  {
    "text": "B and this is my a so the way we've actually and all my code examples today are gonna show this you know I use a B",
    "start": "1085550",
    "end": "1092630"
  },
  {
    "text": "and C a lot the address of a is the is stored in this register just for my code",
    "start": "1092630",
    "end": "1097670"
  },
  {
    "text": "convenience and samples it's not a convention or a way it has to be what's the way I've written my sample and when",
    "start": "1097670",
    "end": "1103310"
  },
  {
    "text": "you see the square braces we mean basically treat that as an address and go there now if you're thinking right",
    "start": "1103310",
    "end": "1108500"
  },
  {
    "text": "now two things one is is that it takes two statements to do the world's simplest bit of code yes this is why",
    "start": "1108500",
    "end": "1116000"
  },
  {
    "text": "these are very primitive operations that the CPU can do and to this seems super",
    "start": "1116000",
    "end": "1121490"
  },
  {
    "text": "fragile like how did I know that B starts for after a and the answer is",
    "start": "1121490",
    "end": "1128390"
  },
  {
    "text": "because I do well it's a little bit better than that we're a 32-bit processor 32 bits means that each number",
    "start": "1128390",
    "end": "1137960"
  },
  {
    "text": "is four bytes long and that's why this is four and if I want to make this 64-bit code I'd be probably adding eight",
    "start": "1137960",
    "end": "1144350"
  },
  {
    "text": "right there if those work with those row long and I would have to know that we code all the time in languages to",
    "start": "1144350",
    "end": "1150650"
  },
  {
    "text": "protect us from this level of detail but the details still exists it's just our",
    "start": "1150650",
    "end": "1156320"
  },
  {
    "text": "libraries are handling it for us let me unpack this address of it one last time just so we can kind of get a better grip",
    "start": "1156320",
    "end": "1162740"
  },
  {
    "text": "in our head let's say that in ECX I had that little value up there in hex so",
    "start": "1162740",
    "end": "1168260"
  },
  {
    "text": "it's it's it's you know it's it's an address for me hey well what that point",
    "start": "1168260",
    "end": "1173630"
  },
  {
    "text": "does that means I go to memory at location a and I read four bytes this",
    "start": "1173630",
    "end": "1178790"
  },
  {
    "text": "one this one this one this one to get my actual value that I want so this is what",
    "start": "1178790",
    "end": "1184340"
  },
  {
    "text": "I would have actually put off in my register from from say going to ECX find",
    "start": "1184340",
    "end": "1190280"
  },
  {
    "text": "find that value and read it out and put it in so this is so when you talk about a pointer all the time in assembler",
    "start": "1190280",
    "end": "1197840"
  },
  {
    "text": "we're really saying this is an adder that basically this value points to an address in memory and go there to get",
    "start": "1197840",
    "end": "1203750"
  },
  {
    "text": "what you want and come back and it's essential because basically otherwise we couldn't really work with anything big",
    "start": "1203750",
    "end": "1209000"
  },
  {
    "text": "in memory at all and we couldn't do these kind of kind of operations so at",
    "start": "1209000",
    "end": "1214970"
  },
  {
    "text": "the low level in assembler we're always dealing with these little point of things now in your own code you almost never have to because in fact the",
    "start": "1214970",
    "end": "1220700"
  },
  {
    "text": "libraries are doing is convenient trick for you of basically no when you say a you mean this trick and then and they",
    "start": "1220700",
    "end": "1228290"
  },
  {
    "text": "just handle it under the covers for you all right more moving data round stacks",
    "start": "1228290",
    "end": "1235070"
  },
  {
    "text": "pushing pop so we talked a little bit about what a stack is and here's a",
    "start": "1235070",
    "end": "1240170"
  },
  {
    "text": "simple example of using a stack and again think about a table with sheets of paper so I have a table the first thing",
    "start": "1240170",
    "end": "1245750"
  },
  {
    "text": "I do is I push this register on to it the value of that register so there's a sheet of on the table I go to memory and",
    "start": "1245750",
    "end": "1252290"
  },
  {
    "text": "I a TC X is my variable a I put that up on the on the table now if I pop in the",
    "start": "1252290",
    "end": "1258920"
  },
  {
    "text": "e ax I'm getting the top value off and I'm going putting that back in my register and then I pop the next item",
    "start": "1258920",
    "end": "1265490"
  },
  {
    "text": "and I put it into this memory location so I'm writing back to memory now at that address location what I've really",
    "start": "1265490",
    "end": "1272810"
  },
  {
    "text": "done here because I pushed pushed popped popped is I've in fact reversed these",
    "start": "1272810",
    "end": "1279350"
  },
  {
    "text": "two in a very inefficient way I basically swamped what was in EAX and what was at in memory at ec x swapped",
    "start": "1279350",
    "end": "1286460"
  },
  {
    "text": "their positions in a very inefficient way by using the stack so we use the",
    "start": "1286460",
    "end": "1292400"
  },
  {
    "text": "stack all the time and we're gonna show some examples of where that goes but it's this it's useful because this",
    "start": "1292400",
    "end": "1297650"
  },
  {
    "text": "notion of basically let me stuff off an indeterminate number of things often let me get back to later and be able to pop",
    "start": "1297650",
    "end": "1303800"
  },
  {
    "text": "back through them when we're doing math",
    "start": "1303800",
    "end": "1309140"
  },
  {
    "text": "let's we saw a little bit more math instructions it's really primitive and we'll start at the beginning so let's",
    "start": "1309140",
    "end": "1314690"
  },
  {
    "text": "say I just want to say x equals x plus y and I've deliberately picked X as being on both sides of this well that's",
    "start": "1314690",
    "end": "1321260"
  },
  {
    "text": "actually pretty easy I can just say the equivalent be like add this register and this register so in this e^x is my X",
    "start": "1321260",
    "end": "1329210"
  },
  {
    "text": "this EBX is my Y I say add and it puts the results in the first register so it's an interesting note",
    "start": "1329210",
    "end": "1335180"
  },
  {
    "text": "that when in a sin computer assembler when we actually tell to do operations and we give it two locations it",
    "start": "1335180",
    "end": "1341420"
  },
  {
    "text": "ultimately puts the result back in the first location why is it do that low-level hardware reasons but they all",
    "start": "1341420",
    "end": "1346730"
  },
  {
    "text": "work that way it's been true for 30-some years I can also put a move at a",
    "start": "1346730",
    "end": "1353930"
  },
  {
    "text": "constant value so I could say hey e ax add a constant to yourself and put it back so these are a single lines there",
    "start": "1353930",
    "end": "1360140"
  },
  {
    "text": "one if you think you can do this really just one line of instruction one instruction to the CPU to do it soon if",
    "start": "1360140",
    "end": "1366680"
  },
  {
    "text": "it's more interesting like hey I want to say take my variable C make you equal to a plus B now in this case a B and C are",
    "start": "1366680",
    "end": "1373580"
  },
  {
    "text": "all in memory they're like they're like variables I declared in my program well not yet a problem because you cannot do",
    "start": "1373580",
    "end": "1380150"
  },
  {
    "text": "operations between two memory addresses in any CPU so if a and B are both",
    "start": "1380150",
    "end": "1385460"
  },
  {
    "text": "variables off in memory I can't actually just add the two of them where they are you can't do that I have to take at",
    "start": "1385460",
    "end": "1392390"
  },
  {
    "text": "least one of them and move them into one of my little slots the scratchpad areas in my cpu then i can add it to with that",
    "start": "1392390",
    "end": "1400010"
  },
  {
    "text": "other memory to the to the value in the other memory address so ECX that's my a I move it into a register I add that",
    "start": "1400010",
    "end": "1407510"
  },
  {
    "text": "register to B that's what this guy represents that puts it back here I now",
    "start": "1407510",
    "end": "1413690"
  },
  {
    "text": "want to put it out where C is and that's right here so the literal what we had to",
    "start": "1413690",
    "end": "1420110"
  },
  {
    "text": "do an assembler was basically copy a you know scratch pad add that scratch pad to",
    "start": "1420110",
    "end": "1426140"
  },
  {
    "text": "be take the result and move it to C so it took three instructions to do a",
    "start": "1426140",
    "end": "1432860"
  },
  {
    "text": "equals B plus C or C goes a plus B either way and again we're getting the",
    "start": "1432860",
    "end": "1440030"
  },
  {
    "text": "hint here that cpus are pretty stupid we have to be very explicit about what we tell them to do now I know about you but",
    "start": "1440030",
    "end": "1447560"
  },
  {
    "text": "most of my code is not basic math most of my code is more like this or even more complicated my code is mostly",
    "start": "1447560",
    "end": "1453410"
  },
  {
    "text": "offense and the way CPUs do this is even more entertaining because they don't",
    "start": "1453410",
    "end": "1459530"
  },
  {
    "text": "actually really do if and then directly the way it works is",
    "start": "1459530",
    "end": "1464810"
  },
  {
    "text": "well first off you have to do a compare so you do compare and then we're gonna",
    "start": "1464810",
    "end": "1470000"
  },
  {
    "text": "jump based on the results to compare so our initial compare is gonna be I need",
    "start": "1470000",
    "end": "1475160"
  },
  {
    "text": "to compare a and B and again I can't do operations between two memory addresses so the first thing I have to do is copy",
    "start": "1475160",
    "end": "1480770"
  },
  {
    "text": "a into or scratchpad so I can work with it then I can compare the scratchpad to",
    "start": "1480770",
    "end": "1485780"
  },
  {
    "text": "B and then this little guy JGE exit",
    "start": "1485780",
    "end": "1492310"
  },
  {
    "text": "stands for jump if greater than or equal to exit there is no jump less than why",
    "start": "1492310",
    "end": "1499430"
  },
  {
    "text": "because CPU developers love an economy of language they hate duplication and after all a jump greater than is the",
    "start": "1499430",
    "end": "1507650"
  },
  {
    "text": "same as jump less then if you just swap which side do you do the compare not so gosh darn it they weren't going to",
    "start": "1507650",
    "end": "1513140"
  },
  {
    "text": "implement both of them you just got to make sure that you do this order here in",
    "start": "1513140",
    "end": "1518150"
  },
  {
    "text": "the correct way so that you can use greater than again stuff you never have",
    "start": "1518150",
    "end": "1523640"
  },
  {
    "text": "to worry about in your code because the compilers dealing with this for you so and it's jumping to exit which is just",
    "start": "1523640",
    "end": "1528860"
  },
  {
    "text": "some label I've made for the code in this case what's really going is I'm jumping around this guy so hey if my",
    "start": "1528860",
    "end": "1537260"
  },
  {
    "text": "compared to goes a certain way then skip the next thing I'm going to do otherwise I need X you equals a plus 1 which I've",
    "start": "1537260",
    "end": "1544370"
  },
  {
    "text": "can meet leak induced by incrementing a value equals a plus 1 turns out increment is something they built in as",
    "start": "1544370",
    "end": "1549740"
  },
  {
    "text": "a feature in the assembler and then otherwise I get to my exit label so in",
    "start": "1549740",
    "end": "1555440"
  },
  {
    "text": "essence what I'm doing is I did I am doing my skip a basic doing skip over is",
    "start": "1555440",
    "end": "1561830"
  },
  {
    "text": "the way that the if logic breaks down in an actual CPU this is a pretty simple",
    "start": "1561830",
    "end": "1567680"
  },
  {
    "text": "though if egg was less than B then increment a that's really pretty trivial it's just something a little more entertaining more commonly your own code",
    "start": "1567680",
    "end": "1574400"
  },
  {
    "text": "would be something like hey if I get this comparison result then call this function jump you know I want you to",
    "start": "1574400",
    "end": "1580580"
  },
  {
    "text": "actually this little sub routine without subroutines frankly we could never build applications of any complexity so if a",
    "start": "1580580",
    "end": "1589100"
  },
  {
    "text": "is less than B then you want to do some more math let's what's that look like well it starts the same as it did before I've got to get a into a scratch pad",
    "start": "1589100",
    "end": "1595910"
  },
  {
    "text": "compare it with B junk greater than equal exit that seems suspiciously familiar because it is but",
    "start": "1595910",
    "end": "1602870"
  },
  {
    "text": "the thing I'm skipping over is call when I say hey do more math the actual",
    "start": "1602870",
    "end": "1610340"
  },
  {
    "text": "similar syntax for that is the is the statement call and convention is to use",
    "start": "1610340",
    "end": "1616220"
  },
  {
    "text": "underscores to indicate the address of a subroutine and what literally happens when you say",
    "start": "1616220",
    "end": "1621620"
  },
  {
    "text": "call is you're basically telling the CPU transfer execution from this instruction to this other and address the southern",
    "start": "1621620",
    "end": "1628520"
  },
  {
    "text": "instruction over there and and you're really hoping you got it exactly right because there's no way for the CPU new to know if you if you're off by one",
    "start": "1628520",
    "end": "1636340"
  },
  {
    "text": "because it's all just binary so it looks like it's it's a valid instruction it may be garbage may be utterly",
    "start": "1636340",
    "end": "1643070"
  },
  {
    "text": "meaningless but it it is interpreted as an instruction so it will cheerfully execute it and if you're wrong your app",
    "start": "1643070",
    "end": "1649400"
  },
  {
    "text": "will simply completely fail or if you're feeling worse the entire computer will simply halt so so we could say call do",
    "start": "1649400",
    "end": "1657890"
  },
  {
    "text": "more math and then otherwise we have our exit label whatever's next what's do more math to our little function well I",
    "start": "1657890",
    "end": "1664750"
  },
  {
    "text": "haven't doing something totally trivial here we're adding to one constant value to the memory address of ECX which means",
    "start": "1664750",
    "end": "1671660"
  },
  {
    "text": "the value of a and then we return ret is our magic statement to return",
    "start": "1671660",
    "end": "1677260"
  },
  {
    "text": "interesting fact there's no law that requires a subroutine to return and people people use do all kinds of fun",
    "start": "1677260",
    "end": "1683570"
  },
  {
    "text": "development where they would just have one subroutine roll into the next roll into the next roll into the next by leaving off return because you could and",
    "start": "1683570",
    "end": "1690800"
  },
  {
    "text": "then eventually hit the one return and and roll back and these are tricks that are terrible terrible terrible ideas and",
    "start": "1690800",
    "end": "1696380"
  },
  {
    "text": "your modern compiler will never generate them so a little more complicated but",
    "start": "1696380",
    "end": "1701870"
  },
  {
    "text": "still you might notice do more in math and I've not passed it any variables I've not done anything with with its response I just had to do a side effect",
    "start": "1701870",
    "end": "1709580"
  },
  {
    "text": "I had to add something to location in memory that's not really useful is it cool fine we'll get to it we'll do",
    "start": "1709580",
    "end": "1716450"
  },
  {
    "text": "something a little more complicated but before we do I want to jump into what does it mean when we say call and jump because it turns out those are called",
    "start": "1716450",
    "end": "1723440"
  },
  {
    "text": "macro similar commands they're not actual CPU commands because that would be too easy",
    "start": "1723440",
    "end": "1728980"
  },
  {
    "text": "instead when we call we actually have to do a whole sequence of things the first thing you have to do is we have to save",
    "start": "1728980",
    "end": "1734779"
  },
  {
    "text": "our own state remember we have all those little mail slots I said only one thing can be in one of those slots at a time well if I'm transferring control to a",
    "start": "1734779",
    "end": "1741559"
  },
  {
    "text": "subroutine I have no way of knowing what that subroutine is going to do with those slots it's gonna probably want",
    "start": "1741559",
    "end": "1747679"
  },
  {
    "text": "some slots to work on because it needs to do that to do anything interesting and so I have to protect myself and I",
    "start": "1747679",
    "end": "1753289"
  },
  {
    "text": "basically have to save the state of any slot whose value I care about that's",
    "start": "1753289",
    "end": "1758809"
  },
  {
    "text": "meaningful to me and I do it with the stack I push the values of those little",
    "start": "1758809",
    "end": "1765110"
  },
  {
    "text": "guys onto the stack for any register that that is meaningful to my code then",
    "start": "1765110",
    "end": "1772370"
  },
  {
    "text": "I push VIP that's the register that has the instruction pointer that basically remembers where I was I push the base",
    "start": "1772370",
    "end": "1781669"
  },
  {
    "text": "pointer of the stack we haven't talked about that so remember I said hey at members Majan the stacks of this table",
    "start": "1781669",
    "end": "1787159"
  },
  {
    "text": "and I'm putting sheets of paper on top of it the surface of the table is what's called is the base pointer it's the",
    "start": "1787159",
    "end": "1793640"
  },
  {
    "text": "bottom of the stack you can go no lower what we do and we call a subroutine is we basically take the memory address of",
    "start": "1793640",
    "end": "1800029"
  },
  {
    "text": "our base pointer we save it and the reason we do that is because we now want to take basically where the top of our",
    "start": "1800029",
    "end": "1805850"
  },
  {
    "text": "stack is and make that the new base pointer it's a bit like putting a table over our table we do it because we want",
    "start": "1805850",
    "end": "1811669"
  },
  {
    "text": "to ensure that that subroutine we're calling can not mess with what we have here on our stack there's no way you can",
    "start": "1811669",
    "end": "1818029"
  },
  {
    "text": "harm it so we cheat and pretend like no that's the stacks empty dude I see bare table",
    "start": "1818029",
    "end": "1823990"
  },
  {
    "text": "on top of the other table but you can't see that table you get this table so we",
    "start": "1823990",
    "end": "1829370"
  },
  {
    "text": "put we do this to basically save our state and protect ourselves and then we can finally jump and just transfer",
    "start": "1829370",
    "end": "1836059"
  },
  {
    "text": "control to where that subroutine was if they try to pop off the bottom",
    "start": "1836059",
    "end": "1842210"
  },
  {
    "text": "absolutely that will fault good times because you can't pop below the base",
    "start": "1842210",
    "end": "1847309"
  },
  {
    "text": "pointer that well yeah so you gotta know which",
    "start": "1847309",
    "end": "1853840"
  },
  {
    "text": "ones you you you care about and you save all of them you go push push push",
    "start": "1853840",
    "end": "1858960"
  },
  {
    "text": "it absolutely can oh so it's beautiful do you think",
    "start": "1858960",
    "end": "1865090"
  },
  {
    "text": "there's an idea of private data there's no such concept actually at this level",
    "start": "1865090",
    "end": "1870429"
  },
  {
    "text": "of things that's a concept that exists here we're here there's no such thing as",
    "start": "1870429",
    "end": "1876340"
  },
  {
    "text": "private data here it's all just the wide expanse and frontier of bits sitting out",
    "start": "1876340",
    "end": "1882190"
  },
  {
    "text": "there waiting to be plundered there are some barriers in truth which is that if",
    "start": "1882190",
    "end": "1887830"
  },
  {
    "text": "I in a modern operating system and it's an operating system that we're the opportunist system and they work together we create a fake memory space",
    "start": "1887830",
    "end": "1896889"
  },
  {
    "text": "if I'm a user application and I can see all the remember I want that's in my",
    "start": "1896889",
    "end": "1902409"
  },
  {
    "text": "process I think I'm the only thing running basically but yeah I can Mike my",
    "start": "1902409",
    "end": "1907840"
  },
  {
    "text": "program can go through any of that you do whatever it wanted to and if it even wanted to it can do math on the base",
    "start": "1907840",
    "end": "1914950"
  },
  {
    "text": "pointer and manually read the values of the stack behind the table it just can't",
    "start": "1914950",
    "end": "1921250"
  },
  {
    "text": "move the stack behind the table ah now when we return we have to undo the mess",
    "start": "1921250",
    "end": "1927909"
  },
  {
    "text": "we've made so when we return we actually first thing we do is we take take our",
    "start": "1927909",
    "end": "1936010"
  },
  {
    "text": "stack pointer make it the base pointer we then start popping again to actually start cleaning up what we've done and",
    "start": "1936010",
    "end": "1942100"
  },
  {
    "text": "get back to all the point where we've popped back our a register that we saved",
    "start": "1942100",
    "end": "1947440"
  },
  {
    "text": "before now these guys here we pop in the reverse order we push them so they go back in the right spots so we did we do",
    "start": "1947440",
    "end": "1954820"
  },
  {
    "text": "both these guys symmetrically so that we can actually safely call a subroutine and then return from that subroutine",
    "start": "1954820",
    "end": "1962190"
  },
  {
    "text": "when there's variables involved it gets yet more entertaining so let's say we want to pass our little function do more",
    "start": "1962190",
    "end": "1968950"
  },
  {
    "text": "math and pass it a and B so to do that then we have stuff looking pretty much",
    "start": "1968950",
    "end": "1975760"
  },
  {
    "text": "like it was before just in the call statement side but until you get to right here after we've moved the stack",
    "start": "1975760",
    "end": "1981220"
  },
  {
    "text": "pointer dealt with this stuff we start pushing more things on the stack ha ha ha we push the arguments",
    "start": "1981220",
    "end": "1987720"
  },
  {
    "text": "that we're passing on the stack in reverse order that they are in the function so if we said call a a comma B",
    "start": "1987720",
    "end": "1994350"
  },
  {
    "text": "the first thing we do is push on B then we push on a and then we jump to the",
    "start": "1994350",
    "end": "1999450"
  },
  {
    "text": "subroutine this is how you actually pass variables to a function and the reasons",
    "start": "1999450",
    "end": "2006260"
  },
  {
    "text": "you go last variable first and work back is it support makes it easy to implement optional arguments because they'll",
    "start": "2006260",
    "end": "2013760"
  },
  {
    "text": "simply be missing they'll be missing up here and the program actually does math working back this direction manually",
    "start": "2013760",
    "end": "2021140"
  },
  {
    "text": "reading down the stack and it as soon as the program has logic to know not to re-bond into any optional argument",
    "start": "2021140",
    "end": "2027920"
  },
  {
    "text": "that's not present it basically can read these and know if a valid arguments present and just not go farther than it",
    "start": "2027920",
    "end": "2033410"
  },
  {
    "text": "should so we do exactly that and then on the other side we can act when we return",
    "start": "2033410",
    "end": "2039590"
  },
  {
    "text": "we basically do exactly the same tricks because remember here we'll we basically set the stack pointer and and saved it",
    "start": "2039590",
    "end": "2046250"
  },
  {
    "text": "for ourselves we can pop and move it back again and now we've basically reset",
    "start": "2046250",
    "end": "2053060"
  },
  {
    "text": "and remove that whole upper table off of our stack and in so doing we threw away",
    "start": "2053060",
    "end": "2058780"
  },
  {
    "text": "these extra variables that we put on the stack and anything else that they done so it turns out in your code most the",
    "start": "2058780",
    "end": "2066378"
  },
  {
    "text": "time when you'd omit write something and like make a function and you create variables in line it actually is trading",
    "start": "2066379",
    "end": "2072169"
  },
  {
    "text": "them on the stack down here and that way they automatically get cleaned up and thrown away basically when you return I",
    "start": "2072169",
    "end": "2079398"
  },
  {
    "text": "mean it's all very clean ish and it means that if you have multiple levels",
    "start": "2079399",
    "end": "2084980"
  },
  {
    "text": "of things returning they can clean up each level can you control roll back and deal with it so this is all automated",
    "start": "2084980",
    "end": "2091429"
  },
  {
    "text": "and kind of helped out in age for you we do these two simple commands and assembler because at the end of the day",
    "start": "2091429",
    "end": "2096530"
  },
  {
    "text": "the CPU is a very stupid thing and we have tailed exactly to do this stuff itself this is the notice the C calling",
    "start": "2096530",
    "end": "2103040"
  },
  {
    "text": "convention it turns out for example on Windows they do get more entertaining things every time you call a subroutine",
    "start": "2103040",
    "end": "2109040"
  },
  {
    "text": "and Linux does different but yet entertaining things when it calls subroutines because this isn't just an",
    "start": "2109040",
    "end": "2115250"
  },
  {
    "text": "artifact of the of the processor it's actually artifact of the calling conventions of",
    "start": "2115250",
    "end": "2121220"
  },
  {
    "text": "the operating system as much as anything else to make this stuff work okay",
    "start": "2121220",
    "end": "2126800"
  },
  {
    "text": "so you've seen a bit of the way these instructions go let's talk about how they actually get executed by the by the by the CPU because we've got a notion",
    "start": "2126800",
    "end": "2135320"
  },
  {
    "text": "that we can write a set of instructions to make a program but how does the CPU execute those instructions to carry out",
    "start": "2135320",
    "end": "2141080"
  },
  {
    "text": "our actions and be the faithful servant we want it to be so the basics of",
    "start": "2141080",
    "end": "2147349"
  },
  {
    "text": "execution or what's called the fetch execute cycle with the fetch execute cycle it works like this we start by",
    "start": "2147349",
    "end": "2153020"
  },
  {
    "text": "fetching the next instruction we're gonna run so that's that get it out of the instruction cycle we decode it",
    "start": "2153020",
    "end": "2158840"
  },
  {
    "text": "figure out what it even meant if it refers to any data we have to go get like you know hey it's often this",
    "start": "2158840",
    "end": "2165140"
  },
  {
    "text": "address of memory or something like that we have to go get that data fetch that data then we actually execute the",
    "start": "2165140",
    "end": "2170359"
  },
  {
    "text": "instruction that they wanted to us to and write any results back so we think",
    "start": "2170359",
    "end": "2176420"
  },
  {
    "text": "about our you know a equals a plus B we fetch the instruction we figured out that they meant a equals a plus B we go",
    "start": "2176420",
    "end": "2183170"
  },
  {
    "text": "get the values of a you know out of out of memory we do the actual math and then",
    "start": "2183170",
    "end": "2189050"
  },
  {
    "text": "we write the result back into address of a it's our basic 5-step cycle and if we",
    "start": "2189050",
    "end": "2196070"
  },
  {
    "text": "looked in at the CPU diagram we started with let's lay that out so it starts with here we go here's our instruction",
    "start": "2196070",
    "end": "2202220"
  },
  {
    "text": "memory we need to get the next instruction into our instruction register that we've meant that's our fetch that's the instruction when we do",
    "start": "2202220",
    "end": "2208790"
  },
  {
    "text": "that we move that we merely then move the pointer on to the next instruction so this is always pointing onto the next thing we're going to run so we fetch it",
    "start": "2208790",
    "end": "2215380"
  },
  {
    "text": "we decode it and it means then put the machine into the configuration for it we",
    "start": "2215380",
    "end": "2221690"
  },
  {
    "text": "get anything from memory we have to do so there's our fetch data we actually do",
    "start": "2221690",
    "end": "2226700"
  },
  {
    "text": "the work that they wanted to and then write the result back if necessary so",
    "start": "2226700",
    "end": "2233450"
  },
  {
    "text": "there's our five step cycle now keep that image of that flow in your head as we look at then the next piece because",
    "start": "2233450",
    "end": "2239839"
  },
  {
    "text": "now we know the cycle the question is what's the cadence and the drummer for this particular band is known as the",
    "start": "2239839",
    "end": "2245960"
  },
  {
    "text": "clock the clock cycle is the thing that keeps the beat for the song for the instruction every single time clock is",
    "start": "2245960",
    "end": "2252440"
  },
  {
    "text": "actually looks basically like that if you were tracking on a scope every single time it transitions from low to",
    "start": "2252440",
    "end": "2258050"
  },
  {
    "text": "high that is the start of a new processing cycle for the CPU and that's the",
    "start": "2258050",
    "end": "2264410"
  },
  {
    "text": "lockstep of how it works through what it's doing and the width of this the basically the number of times you can do",
    "start": "2264410",
    "end": "2270380"
  },
  {
    "text": "this per second is our clock rate that we talk about all the time we throw it all out as the thing of what makes the",
    "start": "2270380",
    "end": "2275869"
  },
  {
    "text": "processor fast like this one's much faster it's a 4 gigahertz CPU that one's very slow it's only a 1 gigahertz CPU",
    "start": "2275869",
    "end": "2282070"
  },
  {
    "text": "who here remembers when CPUs had low digit megahertz you know ratings right so back in the good old days that should",
    "start": "2282070",
    "end": "2291470"
  },
  {
    "text": "be in your York Schumann sketch next time kilohertz CPUs so at 3 gigahertz",
    "start": "2291470",
    "end": "2297710"
  },
  {
    "text": "which would be a relatively modern processor it's going from low to high 3 billion times per second and that means",
    "start": "2297710",
    "end": "2303200"
  },
  {
    "text": "that the amount of time in one step of the cycle is 0.33 nanoseconds okay point",
    "start": "2303200",
    "end": "2310280"
  },
  {
    "text": "three three nanoseconds is about that far speed of light goes light goes about",
    "start": "2310280",
    "end": "2316339"
  },
  {
    "text": "that far in that amount of time it's a very very small value so again it's very",
    "start": "2316339",
    "end": "2323900"
  },
  {
    "text": "stupid but it's very fast at being stupid so if we then lay out our fetch",
    "start": "2323900",
    "end": "2329810"
  },
  {
    "text": "execute cycle against this let's see how that marries that we have our instruction fetch then we decode then we",
    "start": "2329810",
    "end": "2335750"
  },
  {
    "text": "do our data fetch then we execute the instruction or I path the results tick tick tick tick tick working through that",
    "start": "2335750",
    "end": "2340880"
  },
  {
    "text": "cycle on the clock and then we start the next one next instruction fetch what's",
    "start": "2340880",
    "end": "2347270"
  },
  {
    "text": "interesting about this is then that means that to do a whole single statement I gave that CPU like just",
    "start": "2347270",
    "end": "2353960"
  },
  {
    "text": "saying hey increment a or something like that it actually takes that long to do",
    "start": "2353960",
    "end": "2359240"
  },
  {
    "text": "it right because I have to do it takes me five steps to do it so it takes five of those transitions to do just one of",
    "start": "2359240",
    "end": "2366920"
  },
  {
    "text": "those instructions I gave it and in and in general in fact there's a average amount of instruction of clock cycles it",
    "start": "2366920",
    "end": "2373339"
  },
  {
    "text": "takes to do any instruction you might give the CPU and they vary all over the place and in a modern CPU but we can",
    "start": "2373339",
    "end": "2380750"
  },
  {
    "text": "here's what we then started getting having some fun with Optima because if you remember the diagram and when I went through the diagram showed",
    "start": "2380750",
    "end": "2386450"
  },
  {
    "text": "you how the hardware is being used you may have noticed that nothing was lit up for more than one of those phases we",
    "start": "2386450",
    "end": "2393829"
  },
  {
    "text": "literally kind of walked around all the different boxes lighting them all up in sequence now engineers don't like things",
    "start": "2393829",
    "end": "2400069"
  },
  {
    "text": "that are just sitting around they want it doing useful work and so the fact that like the ALU is sitting there doing",
    "start": "2400069",
    "end": "2405950"
  },
  {
    "text": "nothing for four out of five steps kind of chase so how can we fix that well we",
    "start": "2405950",
    "end": "2411559"
  },
  {
    "text": "can fix it by doing something called pipelining where what we recognize is is that once we have for example fetched an",
    "start": "2411559",
    "end": "2417799"
  },
  {
    "text": "instruction we can go ahead and while it's being decoded fetch the next instruction and once we've decoded it",
    "start": "2417799",
    "end": "2425809"
  },
  {
    "text": "and we're moving on to execute it we can then actually be decoding the next instruction and on and on and on so we",
    "start": "2425809",
    "end": "2433910"
  },
  {
    "text": "recognize that because we're not using all the pieces of hardware what we can do is have them work ahead of us and in",
    "start": "2433910",
    "end": "2440990"
  },
  {
    "text": "so doing we start doing this trick we actually can really increase the number",
    "start": "2440990",
    "end": "2446089"
  },
  {
    "text": "of things we do per clock cycle because we're not doing them one after another but we're actually kind of doing them",
    "start": "2446089",
    "end": "2452029"
  },
  {
    "text": "bits of work in parallel keeping all of our chip busy the only real cuteness trick we have to do is what happens when",
    "start": "2452029",
    "end": "2457250"
  },
  {
    "text": "you execute and it means the output of this to actually feed into the next",
    "start": "2457250",
    "end": "2463789"
  },
  {
    "text": "execute like maybe for exam this result was referred to by the next instruction and that's easy we can add some",
    "start": "2463789",
    "end": "2469220"
  },
  {
    "text": "shortcuts right so we basically had some shortcut things that let us immediately feed results back into ourselves",
    "start": "2469220",
    "end": "2474400"
  },
  {
    "text": "and use them in the next step and in so doing we can we can cheat death a little",
    "start": "2474400",
    "end": "2480079"
  },
  {
    "text": "bit and it lets us try to get to what's sort of the holy grail of processor design which is you want to by hook or",
    "start": "2480079",
    "end": "2487400"
  },
  {
    "text": "by crook get to the point where you're doing one instruction per clock cycle on average and in fact a modern desktop",
    "start": "2487400",
    "end": "2493880"
  },
  {
    "text": "chip can average about 1.3 per clock cycle a modern server chip can execute about 1.8 per clock cycle by doing all",
    "start": "2493880",
    "end": "2502039"
  },
  {
    "text": "kinds of death tricks like this in how they do the execution cycle which by the",
    "start": "2502039",
    "end": "2507680"
  },
  {
    "text": "way gets us into real trouble but that's a subject for another talk so now let's",
    "start": "2507680",
    "end": "2513680"
  },
  {
    "text": "go and we'll look at just a one a bit of that trouble of how this can get us into it so where we are here",
    "start": "2513680",
    "end": "2519760"
  },
  {
    "text": "going ahead and we're working ahead of ourselves to keep the whole CPU busy but let's say we need to execute this guy",
    "start": "2519760",
    "end": "2525520"
  },
  {
    "text": "right here if a is less than B then a day otherwise I want you to do a",
    "start": "2525520",
    "end": "2530920"
  },
  {
    "text": "different mathematical operation to get a new value of a so we think about the",
    "start": "2530920",
    "end": "2536170"
  },
  {
    "text": "assembler it kind of lays out like this so here's our full assembler for that",
    "start": "2536170",
    "end": "2541180"
  },
  {
    "text": "this all is the same what we did before there's our increment statement which we talked about before and otherwise now",
    "start": "2541180",
    "end": "2546550"
  },
  {
    "text": "I'm jumping over an else clause else we're adding to this and we're moving to that now imagine we're doing our trick",
    "start": "2546550",
    "end": "2553150"
  },
  {
    "text": "where I talked about we execute ahead of ourselves so this is no problem here we do this we've already peaked ahead to",
    "start": "2553150",
    "end": "2558430"
  },
  {
    "text": "start working on the next instruction while we did this we now start picking ahead to the jump based on the a while",
    "start": "2558430",
    "end": "2564700"
  },
  {
    "text": "we're still working to compare we realize we can't do anything here we do not know what the next instruction is",
    "start": "2564700",
    "end": "2570220"
  },
  {
    "text": "after this until that executes now we're in trouble so at this point we have three we have a",
    "start": "2570220",
    "end": "2577360"
  },
  {
    "text": "couple of course of action because we can't we don't know if we're gonna execute this guy or that guy until we do",
    "start": "2577360",
    "end": "2584590"
  },
  {
    "text": "this compare completes so we don't know which instruction even start loading so we can basically do one of three things",
    "start": "2584590",
    "end": "2591600"
  },
  {
    "text": "we can do nothing which in which to be",
    "start": "2591600",
    "end": "2596620"
  },
  {
    "text": "fair it's called a vesicle to pipeline stall it's what initially developed Engineers did because after all if you",
    "start": "2596620",
    "end": "2601960"
  },
  {
    "text": "did nothing well you're still as you're still getting a performance room from pipelining whenever there's enough",
    "start": "2601960",
    "end": "2607690"
  },
  {
    "text": "statements in a row that you don't have to worry about it so we do nothing we could just arbitrarily pick one of them",
    "start": "2607690",
    "end": "2613990"
  },
  {
    "text": "and as long as we know the outcome of this and whether our choice is right",
    "start": "2613990",
    "end": "2620260"
  },
  {
    "text": "before we permanently alter data so we can throw away the result if we picked wrong as long as we do that we can be",
    "start": "2620260",
    "end": "2628300"
  },
  {
    "text": "safe and you know what we have to have a 50/50 shot we'll Willys to keep our performance improvement 50% of the time",
    "start": "2628300",
    "end": "2635220"
  },
  {
    "text": "or if we had enough extra hardware we could execute both and the difference",
    "start": "2635220",
    "end": "2642160"
  },
  {
    "text": "right there by the way his difference between what your phone does and what server does your phone basically looks",
    "start": "2642160",
    "end": "2647620"
  },
  {
    "text": "at this and does yes and picks one of them and relies on the fact that before it can permantly",
    "start": "2647620",
    "end": "2653350"
  },
  {
    "text": "change the change data it'll know whether was on the right branch or the wrong branch modern server chips are",
    "start": "2653350",
    "end": "2660940"
  },
  {
    "text": "designed so that they can execute both sides at the same time because they have enough extra hardware to do that and not",
    "start": "2660940",
    "end": "2666910"
  },
  {
    "text": "only that but they can do that through multiple successive if-then operations as sometimes deep is four meaning that",
    "start": "2666910",
    "end": "2672790"
  },
  {
    "text": "basically they will they will always be executing the path that they should have executed they just throw out the other",
    "start": "2672790",
    "end": "2678190"
  },
  {
    "text": "seven worst case and that's one of things that makes those chips big and makes them expensive is is that ability",
    "start": "2678190",
    "end": "2685420"
  },
  {
    "text": "to do all that kind of thing yes a branch but so branch prediction was the",
    "start": "2685420",
    "end": "2692140"
  },
  {
    "text": "idea of either the compiler telling the code which was the more likely of the",
    "start": "2692140",
    "end": "2697660"
  },
  {
    "text": "two or the CPU itself noticing that for a particular to compare it tended to",
    "start": "2697660",
    "end": "2703150"
  },
  {
    "text": "resolve one way or the other and arm chief CPS do the latter they kind of watch him for a particular thing they",
    "start": "2703150",
    "end": "2709240"
  },
  {
    "text": "sort of remember that they tend to be either taken or not taken for a particular jump and they will then do",
    "start": "2709240",
    "end": "2716590"
  },
  {
    "text": "that by default the next time around the coming there's so there's branch efficient and there's what's called a",
    "start": "2716590",
    "end": "2723150"
  },
  {
    "text": "speculative execution is the other technique so what if the server is doing where you actually both sides",
    "start": "2723150",
    "end": "2728230"
  },
  {
    "text": "speculatively and we'll see you know which one we which one we should have went well Sherman should win and we go",
    "start": "2728230",
    "end": "2734500"
  },
  {
    "text": "ahead with that so so all kinds of tricks the processor built developers do",
    "start": "2734500",
    "end": "2739960"
  },
  {
    "text": "to make keep these things fast to keep them keep them moving now I know we're",
    "start": "2739960",
    "end": "2745480"
  },
  {
    "text": "mostly talk about the CPU but the fact is that you really can't do much with an application if you only are worried",
    "start": "2745480",
    "end": "2751810"
  },
  {
    "text": "about what's literally inside the chip that chip doesn't miss to vacuum exists inside the world and even in even before",
    "start": "2751810",
    "end": "2758140"
  },
  {
    "text": "networks the world have disks and it had you know had storage and and memory and things like that so what does it take",
    "start": "2758140",
    "end": "2767290"
  },
  {
    "text": "for us to actually go outside the CPU and work with these things well really",
    "start": "2767290",
    "end": "2772840"
  },
  {
    "text": "early on we had this example move you know take go get the value of a and put it into this register under the covers",
    "start": "2772840",
    "end": "2779110"
  },
  {
    "text": "what this does is actually stupidly complicated and it starts off with the fact that in a modern operating system it lies to you",
    "start": "2779110",
    "end": "2787370"
  },
  {
    "text": "about what memory looks like if you actually go and look at the way the the low-level ask the machine it will tell",
    "start": "2787370",
    "end": "2794120"
  },
  {
    "text": "you for example a 32-bit system I have four gigs of RAM and in fact you have four gigs for him nobody else is using",
    "start": "2794120",
    "end": "2800090"
  },
  {
    "text": "any memory we know that's patently not true but it does that it says that if you have a 64-bit system it tells you an",
    "start": "2800090",
    "end": "2805280"
  },
  {
    "text": "even much bigger number and it's all yours and the reason it does that is that it's what's called a virtual memory manager",
    "start": "2805280",
    "end": "2811160"
  },
  {
    "text": "which is that to let us segregate programs from each other so that we can do a range of good things we basically",
    "start": "2811160",
    "end": "2818440"
  },
  {
    "text": "the CPU itself keeps track of and fakes out memory addresses back and forth so",
    "start": "2818440",
    "end": "2825050"
  },
  {
    "text": "when we have an address in memory like it say hey I want to go get a I can't just go to that location no no that",
    "start": "2825050",
    "end": "2830810"
  },
  {
    "text": "would be way too simple instead we first after you actually translate that a into",
    "start": "2830810",
    "end": "2836420"
  },
  {
    "text": "a and do that into the actual address that would really be on and it's done",
    "start": "2836420",
    "end": "2841580"
  },
  {
    "text": "it's a two-step process the first thing we have to do is look up what's called a page of it and the reason is that individual bytes are too small to address to make things efficient we glom",
    "start": "2841580",
    "end": "2848660"
  },
  {
    "text": "a whole bunch of them together and call it a page like 8k bytes worth of memory and then we actually figure out which",
    "start": "2848660",
    "end": "2854690"
  },
  {
    "text": "physical page of RAM really that one is because under the covers the CPUs is",
    "start": "2854690",
    "end": "2861410"
  },
  {
    "text": "creating fakery and that's why five different programs can all think that they're writing to the same memory address but in fact not",
    "start": "2861410",
    "end": "2867320"
  },
  {
    "text": "be on top of each other because the CPU itself knows that what you call a is",
    "start": "2867320",
    "end": "2872420"
  },
  {
    "text": "actually this and what you call a is actually that and it keeps them all separated out so we have this thing",
    "start": "2872420",
    "end": "2878840"
  },
  {
    "text": "called the translation lookaside buffer that does this little cheat for us to look it up and keep that value cached so",
    "start": "2878840",
    "end": "2884570"
  },
  {
    "text": "it's very fast to access and then from that it can then look at it look in the the level 1 cache in the processor to",
    "start": "2884570",
    "end": "2893330"
  },
  {
    "text": "find out does it have that page of memory or not and it and you'll notice my numbers here still I got for example",
    "start": "2893330",
    "end": "2898880"
  },
  {
    "text": "if that was the actual page I wanted and it's this physical page it starts with the 3 then in fact that means it can",
    "start": "2898880",
    "end": "2906110"
  },
  {
    "text": "only be in one of the number 3 slots here because it's a big warehouse I have to be able to like know which aisle I'm",
    "start": "2906110",
    "end": "2911960"
  },
  {
    "text": "looking in basically you do it quickly and I go to the aisle and I look at the two values and hopefully one of them is",
    "start": "2911960",
    "end": "2918930"
  },
  {
    "text": "is the one I wanted and if not I miss basically I don't get a hit in my cash I",
    "start": "2918930",
    "end": "2925739"
  },
  {
    "text": "can't get the value right out and the reason that this matter so this is all done kind of for you in the CPU",
    "start": "2925739",
    "end": "2931499"
  },
  {
    "text": "automatically just when you try to go reference something is performance so if",
    "start": "2931499",
    "end": "2936689"
  },
  {
    "text": "I get a value out of level one cache and I'm taking these values here for Intel",
    "start": "2936689",
    "end": "2942150"
  },
  {
    "text": "i7 desktop processor it has typically about 32 K bytes of level 1 cache per",
    "start": "2942150",
    "end": "2949170"
  },
  {
    "text": "core it takes 4 clock cycles to get that value out of the cache and so if I'm at",
    "start": "2949170",
    "end": "2955680"
  },
  {
    "text": "that point by the way again where I'm trying to get that piece of data well we're just waiting you know four clock",
    "start": "2955680",
    "end": "2961949"
  },
  {
    "text": "cycles until I can get that out of that first little cache if it's not there I have to go up to the next cache the",
    "start": "2961949",
    "end": "2967349"
  },
  {
    "text": "level two cache and that one is bigger but slower and this becomes the trend we start seeing now it's 12 clock cycles to",
    "start": "2967349",
    "end": "2974130"
  },
  {
    "text": "get it out of the level 2 cache let's say I get a Miss there - it's neither of these two guys so it's even worse I have",
    "start": "2974130",
    "end": "2979739"
  },
  {
    "text": "to go to the much bigger level 3 cache this by the way when you go look at a CPU spec it talks about cache size",
    "start": "2979739",
    "end": "2984749"
  },
  {
    "text": "they're talking with the level the topmost cache which is the last one that's inside the processor and here",
    "start": "2984749",
    "end": "2991319"
  },
  {
    "text": "it's 36 clock cycles so you can see that we've gone from 4 to 36 that's pretty dramatic but we're still hitting cache",
    "start": "2991319",
    "end": "2997369"
  },
  {
    "text": "let's say that it is not our day and we actually have to go all the way out to main memory and let's say that we are a",
    "start": "2997369",
    "end": "3003739"
  },
  {
    "text": "workstation machine so our main memory is actually quite fast it still takes 200 clock cycles to get a value out of",
    "start": "3003739",
    "end": "3011420"
  },
  {
    "text": "main memory and this becomes the real story and the challenge of what makes",
    "start": "3011420",
    "end": "3017299"
  },
  {
    "text": "Hardware work is that you want to make an application fast it's not about making the instructions themselves fast",
    "start": "3017299",
    "end": "3024489"
  },
  {
    "text": "it's about working with memory correctly because if you can live in the like",
    "start": "3024489",
    "end": "3030559"
  },
  {
    "text": "these caches down here memory accesses are quite fast right that was 12 clock",
    "start": "3030559",
    "end": "3035630"
  },
  {
    "text": "cycles you have to go all the way up to main memory it's 200 clock cycles now that may it may seem pretty fast but",
    "start": "3035630",
    "end": "3041749"
  },
  {
    "text": "let's let's scale our time a bit so we get a real cent better sense of what that means so",
    "start": "3041749",
    "end": "3046770"
  },
  {
    "text": "if in my Hill 3 gigahertz CPU one clock cycles point 3 3 nanoseconds let's just",
    "start": "3046770",
    "end": "3052830"
  },
  {
    "text": "arbitrarily pretend it was 1 second because the seconds of unit of time we can get our head around how long a second is well that's true then to",
    "start": "3052830",
    "end": "3059790"
  },
  {
    "text": "access level 1 cache takes 3 seconds taxes main memory takes 3 point 3 minutes we'll be into questions time",
    "start": "3059790",
    "end": "3065820"
  },
  {
    "text": "almost by the time that we could get a value back to the main memory now if it's not there nice you have to go",
    "start": "3065820",
    "end": "3071190"
  },
  {
    "text": "loaded off disk let's say that at least I have an SSD it will only take me a couple of days we'll all be home by the",
    "start": "3071190",
    "end": "3077790"
  },
  {
    "text": "time that data comes back worse yet if you're still using a machine that has one of those spinning rust hard drives",
    "start": "3077790",
    "end": "3084480"
  },
  {
    "text": "there will be an entirely new set of JavaScript frameworks by the time that data comes back finally if we have to",
    "start": "3084480",
    "end": "3091890"
  },
  {
    "text": "make an internet call from here to San Francisco we literally all there's not a",
    "start": "3091890",
    "end": "3099119"
  },
  {
    "text": "technology we otherwise talked about today there will still be current by the time you would get that data back right",
    "start": "3099119",
    "end": "3104600"
  },
  {
    "text": "so the point here is that if you think",
    "start": "3104600",
    "end": "3109860"
  },
  {
    "text": "about your own source code and you're worried about optimizing your little individual steps up here and then like one of those operations is and call San",
    "start": "3109860",
    "end": "3116790"
  },
  {
    "text": "Francisco which one you think you need to worry about calling San Francisco right because that so Dwarfs everything",
    "start": "3116790",
    "end": "3124230"
  },
  {
    "text": "else going on up here that these bits don't matter and as a developers we tend",
    "start": "3124230",
    "end": "3129270"
  },
  {
    "text": "to make a mistake and think lines of code is directly equal to performance as I see lines of code they you know they",
    "start": "3129270",
    "end": "3134760"
  },
  {
    "text": "each take about the same amount of time it's just simply not the case for the way this stuff goes ok so we've talked a",
    "start": "3134760",
    "end": "3143190"
  },
  {
    "text": "little bit about how things get out of the CPU let me hit one last fun bit so",
    "start": "3143190",
    "end": "3151200"
  },
  {
    "text": "and I particularly this is fun to talk about in the UK because the UK's the home of arm that's right",
    "start": "3151200",
    "end": "3157470"
  },
  {
    "text": "so when I was starting my career there was an assumption this is right around when the Pentium was the thing there was",
    "start": "3157470",
    "end": "3165540"
  },
  {
    "text": "an assumption everybody had including Intel that the way we've been building chips forever was about to die what was what we came",
    "start": "3165540",
    "end": "3171960"
  },
  {
    "text": "known as the sisk processor was about to die and what was gonna wipe them off the face of the earth was RISC processors",
    "start": "3171960",
    "end": "3178950"
  },
  {
    "text": "from companies like MIPS alpha arm really wasn't a thing really yet they formed later and and others and",
    "start": "3178950",
    "end": "3188060"
  },
  {
    "text": "we're so sure about it if I can tell us sure about it they started themselves inventing their own replacement tech two",
    "start": "3188060",
    "end": "3193890"
  },
  {
    "text": "different replacing chips based around this theory how do we get here what and",
    "start": "3193890",
    "end": "3199710"
  },
  {
    "text": "why did this happen well let's go wind clock way back to the first CPUs way back when when these things were first",
    "start": "3199710",
    "end": "3205470"
  },
  {
    "text": "created compilers were super primitive and that meant that they couldn't do much optimization and the physical act",
    "start": "3205470",
    "end": "3212339"
  },
  {
    "text": "of calling the separate you remember all those steps we had to do to call a subroutine there's a whole bunch of lines of thing now imagine that your",
    "start": "3212339",
    "end": "3218010"
  },
  {
    "text": "computer took real measurable time and you each instruction because they were measured in like one megahertz machines",
    "start": "3218010",
    "end": "3223260"
  },
  {
    "text": "back then calling subroutines was very expensive and the compilers weren't very good and that meant at the end of the",
    "start": "3223260",
    "end": "3229500"
  },
  {
    "text": "day if I could bake it into the hardware it would be fast if not it was slow and there's a lot of pressure to pack",
    "start": "3229500",
    "end": "3234810"
  },
  {
    "text": "everything we could into the hardware itself to make machines quick and that Oklahoma culminated in groups like",
    "start": "3234810",
    "end": "3240990"
  },
  {
    "text": "Digital Equipment Corporation with their VAX putting things like polynomial factorization into the actual physical",
    "start": "3240990",
    "end": "3249089"
  },
  {
    "text": "hardware which never worked out and I became the moment pretty much everyone said that doesn't work we can't do that",
    "start": "3249089",
    "end": "3254130"
  },
  {
    "text": "anymore that's crazy but it wasn't the initial piece of pressure we had the",
    "start": "3254130",
    "end": "3259589"
  },
  {
    "text": "other thing that certain influence stuff is that as you is instructions have different lengths so like a simple return statement that's one byte long I",
    "start": "3259589",
    "end": "3266220"
  },
  {
    "text": "found a move a constant your register that's five bytes for that instruction and they can be as long as ten on an",
    "start": "3266220",
    "end": "3271349"
  },
  {
    "text": "Intel x86 assembler and what this means is that you don't know for example how",
    "start": "3271349",
    "end": "3277890"
  },
  {
    "text": "if you've read the whole instruction until you've decoded the instruction which slows down your ability to keep doing things in that fast pipeline",
    "start": "3277890",
    "end": "3284819"
  },
  {
    "text": "fashion one after another worse yet how long it takes for an instruction to run varies dramatically a",
    "start": "3284819",
    "end": "3290790"
  },
  {
    "text": "simple return that has no data that it has to deal with this running from cache takes 24 clock cycles to run to return",
    "start": "3290790",
    "end": "3298410"
  },
  {
    "text": "from a subroutine movie a constant into register it's really fast one clock cycle doing a multiplication with the",
    "start": "3298410",
    "end": "3305040"
  },
  {
    "text": "constant 3 clock cycles interesting up doing a divided of the same same two",
    "start": "3305040",
    "end": "3310410"
  },
  {
    "text": "arguments 79 clock cycles this is still true today divides or",
    "start": "3310410",
    "end": "3315530"
  },
  {
    "text": "super-slow multiplies or fast if you can do it to multiply it's faster in fact some compilers are smart enough to figure out when that's possible and",
    "start": "3315530",
    "end": "3321650"
  },
  {
    "text": "translate divides into multiplies 4y goes into our cannery of how hardware's actually built a discussion I could have",
    "start": "3321650",
    "end": "3327350"
  },
  {
    "text": "we're gonna have you a pub comp tonight what you all should go to so this got us",
    "start": "3327350",
    "end": "3333800"
  },
  {
    "text": "to where a whole team said for instead we can't continue working this way we've got to do better so they came with this",
    "start": "3333800",
    "end": "3339410"
  },
  {
    "text": "idea of risk and the idea was that instead of having variable in constructions we're gonna make them fixed length so four bytes long 32-bit",
    "start": "3339410",
    "end": "3345880"
  },
  {
    "text": "we're going to trying to get them all to execute about the same for Zygo which means that we're gonna take some complicate instructions to break them",
    "start": "3345880",
    "end": "3352100"
  },
  {
    "text": "into multiple instructions to force them to try to execute and roughly the same amount of time so that they can be",
    "start": "3352100",
    "end": "3357110"
  },
  {
    "text": "pipelined more efficiently and one of the reasons one is we're gonna do that different stalls is we're not gonna let",
    "start": "3357110",
    "end": "3362870"
  },
  {
    "text": "you ever actually directly work with memory you always have to pull it in the red chairs to push it back and explicitly so",
    "start": "3362870",
    "end": "3369380"
  },
  {
    "text": "that you the compiler have to optimize those sequences for you and again it gets us in new more consistent execution",
    "start": "3369380",
    "end": "3375350"
  },
  {
    "text": "times and they basically created this set of rules to define these two and in the end it really did work to improve",
    "start": "3375350",
    "end": "3382700"
  },
  {
    "text": "efficiency in a number of ways how to work out well when you have simpler",
    "start": "3382700",
    "end": "3388550"
  },
  {
    "text": "options we have a lot fewer transistors to actually make up the chip fewer transistors mean that your chip itself",
    "start": "3388550",
    "end": "3393590"
  },
  {
    "text": "is physically much smaller and needs less power when you have shorter operation durations you can higher clock speeds with less power required and that",
    "start": "3393590",
    "end": "3401720"
  },
  {
    "text": "constant operation duration gives you that efficient pipeline to run with in the end it means that you have more",
    "start": "3401720",
    "end": "3407690"
  },
  {
    "text": "reliable hardware that's smaller and uses less power if you think interesting thing about it though is that basically",
    "start": "3407690",
    "end": "3413330"
  },
  {
    "text": "arm almost died before any of this mattered in fact MIPS and a bunch these folks died before the stuff mattered",
    "start": "3413330",
    "end": "3418970"
  },
  {
    "text": "because it turns out that as long as I have access to mains power these advantages don't really matter much as",
    "start": "3418970",
    "end": "3426260"
  },
  {
    "text": "long as manufacturing can afford ibly produce the chips where it really",
    "start": "3426260",
    "end": "3431630"
  },
  {
    "text": "matters all of a sudden is mobile phones because per watt of energy an arm CPU",
    "start": "3431630",
    "end": "3439880"
  },
  {
    "text": "which is a pretty much all RISC CPUs in the world now our arm and",
    "start": "3439880",
    "end": "3445549"
  },
  {
    "text": "and everything else is Intel pretty much they do a tremendous amount with that one watt of power but there's an upper",
    "start": "3445549",
    "end": "3451369"
  },
  {
    "text": "bound that they can do so a four gigahertz ARM chip will never be able to compete with a four gigahertz server chip from Intel but it uses one actually",
    "start": "3451369",
    "end": "3460039"
  },
  {
    "text": "one ten thousandth of the power to do it now plugged in the mains with access to",
    "start": "3460039",
    "end": "3466339"
  },
  {
    "text": "plenty of coolant you don't care in your pocket to get all-day battery life you care a lot and ultimately that's why",
    "start": "3466339",
    "end": "3473719"
  },
  {
    "text": "what's in your pocket isn't is a risk chip and what's in your laptop and in your desktop and the server's is a Cisco",
    "start": "3473719",
    "end": "3481059"
  },
  {
    "text": "all right a big reason that they were",
    "start": "3481059",
    "end": "3490009"
  },
  {
    "text": "sure was gonna take over the world was because we were we were reaching the density of manufacturing where we",
    "start": "3490009",
    "end": "3497089"
  },
  {
    "text": "couldn't cram more transistors into a chip without dropping clock speeds and we were reaching the limit was called",
    "start": "3497089",
    "end": "3503209"
  },
  {
    "text": "x-ray lithography they used to make him we were actually reaching the frequency of x-ray and so the thinking was this is",
    "start": "3503209",
    "end": "3508640"
  },
  {
    "text": "it's a physical limit we'll never be able to beat it so we'd have to kind of go laterally to get around it and again",
    "start": "3508640",
    "end": "3514279"
  },
  {
    "text": "like in almost every case of engineering or this has come up never underestimate the value of just repetitive",
    "start": "3514279",
    "end": "3519679"
  },
  {
    "text": "optimization of a process because they came out with the ways to do basically multiple x-ray diffraction you look at",
    "start": "3519679",
    "end": "3525829"
  },
  {
    "text": "the interference patterns and to get down from like 60 nanometer processes down to six and once they've as they've",
    "start": "3525829",
    "end": "3532609"
  },
  {
    "text": "done that it's just blown away any reason for it to matter so",
    "start": "3532609",
    "end": "3537849"
  },
  {
    "text": "so the speed of light fundamentally remember I said like goes this far and in a month at the time a",
    "start": "3542049",
    "end": "3548329"
  },
  {
    "text": "chaff is achill chip has to be small enough that as the clock moves around",
    "start": "3548329",
    "end": "3553849"
  },
  {
    "text": "the whole state of the chip is physically consistent so there's basically a direct correlation between",
    "start": "3553849",
    "end": "3559549"
  },
  {
    "text": "clock speed and the size of the of the core and it's the other reason why we have big multi-core systems instead of",
    "start": "3559549",
    "end": "3566450"
  },
  {
    "text": "gig Gert rising because you can take the same chip and put four cores on it and then you only have to have each",
    "start": "3566450",
    "end": "3572450"
  },
  {
    "text": "individual course stay consistent and they stay within that one centimeter size that lets them work it's a three",
    "start": "3572450",
    "end": "3578510"
  },
  {
    "text": "three gigahertz or more but you'd have to keep making the chip smaller so on a smaller as you Reb those clock speeds to",
    "start": "3578510",
    "end": "3584150"
  },
  {
    "text": "add the whole chip run within the basically be together on the same clock cycle because the speed of light",
    "start": "3584150",
    "end": "3589910"
  },
  {
    "text": "the alternative is come up with a much faster speed of light so okay let's wrap",
    "start": "3589910",
    "end": "3596750"
  },
  {
    "text": "it up CPUs do simple things very fast humans do complicate things very slowly two different ways of getting to results the",
    "start": "3596750",
    "end": "3603920"
  },
  {
    "text": "instruction sets determine compatibility and that Intel instruction set and compatibility is the big reason Intel's",
    "start": "3603920",
    "end": "3609740"
  },
  {
    "text": "still lives on the Sisk world because the ability to today still run a program that was written in vb6 back in the 90s",
    "start": "3609740",
    "end": "3616339"
  },
  {
    "text": "matters to a lot of people with a lot of money even RAM is super slow compared to",
    "start": "3616339",
    "end": "3621440"
  },
  {
    "text": "the cash in the CPU which means that if you want to make your program faster the number one thing you can do is have a",
    "start": "3621440",
    "end": "3626450"
  },
  {
    "text": "run in less RAM overwhelmingly the number one thing you can do is have it run in less RAM we use",
    "start": "3626450",
    "end": "3632329"
  },
  {
    "text": "risk chips where we need some more we value small low-power and also that means two cool chips and we use sis",
    "start": "3632329",
    "end": "3639619"
  },
  {
    "text": "square we need consistent fast performance thank you very much I really appreciate the opportunity to speak at",
    "start": "3639619",
    "end": "3644809"
  },
  {
    "text": "MDC and there's some counting info for me I'm on Twitter all the time otherwise",
    "start": "3644809",
    "end": "3650180"
  },
  {
    "text": "there's my email address and thank you very much for attending [Applause]",
    "start": "3650180",
    "end": "3661710"
  },
  {
    "text": "any other questions what we're sorry",
    "start": "3661710",
    "end": "3668609"
  },
  {
    "text": "right okay so the powerpc was a risk",
    "start": "3671220",
    "end": "3676270"
  },
  {
    "text": "ship it was one of the first risk ships the Amiga ran from a 16 of 36 to 40 which was a sisk chip built by Motorola",
    "start": "3676270",
    "end": "3682710"
  },
  {
    "text": "and property was actually 9vm designed that Motorola helped them with and it was intended in fact Parsi was assumed",
    "start": "3682710",
    "end": "3689260"
  },
  {
    "text": "to take over the world from the 6000 30 60 or 40s because that that transition from sis to risk and so they were you so",
    "start": "3689260",
    "end": "3696910"
  },
  {
    "text": "much higher much higher clock speeds they had a lot more registers but they couldn't do some other things as well",
    "start": "3696910",
    "end": "3702370"
  },
  {
    "text": "but they were but they were very fast and and you actually saw the CCO thirties and fourties last a long time in video ography work like video",
    "start": "3702370",
    "end": "3709300"
  },
  {
    "text": "production work because they were very consistent in their performance more consistent than the power pcs were they",
    "start": "3709300",
    "end": "3714580"
  },
  {
    "text": "were very fast but they could stall and in video we're doing real-time video work stall bad like really bad so you",
    "start": "3714580",
    "end": "3721390"
  },
  {
    "text": "have to be able to absolutely hit those frames of resolution exactly as you go and and the 60 or 30 or 40 or better at",
    "start": "3721390",
    "end": "3727270"
  },
  {
    "text": "that so they were also available in military hardened configurations which does but that didn't matter for video work yes right oh all all eight of them",
    "start": "3727270",
    "end": "3735190"
  },
  {
    "text": "I want all eight of them so that's not cooler it's question over here yep that",
    "start": "3735190",
    "end": "3744520"
  },
  {
    "text": "was an ALP",
    "start": "3744520",
    "end": "3747060"
  },
  {
    "text": "that's that's right infamous so Cindy Instructables so the Billy meant let's do hyper-threading what Intel did",
    "start": "3751340",
    "end": "3757620"
  },
  {
    "text": "actually is they were adding extra hardware to make sure that they could never stall the pipeline they realize they end up with extra hardware that was",
    "start": "3757620",
    "end": "3763050"
  },
  {
    "text": "sitting around when the pipeline was not being stalled and there were some instructions conveniently order themselves such that you didn't have a",
    "start": "3763050",
    "end": "3768960"
  },
  {
    "text": "stall snare and didn't need that extra hardware so they didn't turn around said ok but wait a minute when we put it to use by creating letting a second virtual",
    "start": "3768960",
    "end": "3775140"
  },
  {
    "text": "threat of execution run at the same time in the same core and but we'll just",
    "start": "3775140",
    "end": "3780450"
  },
  {
    "text": "deprioritize it so it will stall first before the main one stalls and then we'll let the main one go and that's why",
    "start": "3780450",
    "end": "3785910"
  },
  {
    "text": "they're identified as primary second yeah well so ok so yeah you have",
    "start": "3785910",
    "end": "3793950"
  },
  {
    "text": "adorable a bunch of multitasking stuff so there it cuz you just don't have time and it talked like this yeah so when",
    "start": "3793950",
    "end": "3799950"
  },
  {
    "text": "you're doing multitasking just in general you have to every time you switch context so you're switching either from user mode to sister mode you",
    "start": "3799950",
    "end": "3806700"
  },
  {
    "text": "pay a penalty of security for it to do stuff and every time it suspends a threat of execution it has to copy and",
    "start": "3806700",
    "end": "3812250"
  },
  {
    "text": "in fact it's a lot much worse than what I showed up here I have a I'll show you my quick slide on that it's astounding",
    "start": "3812250",
    "end": "3818340"
  },
  {
    "text": "actually how bad it is to do a suspend and resume so yeah so if we use our",
    "start": "3818340",
    "end": "3827910"
  },
  {
    "text": "one-second scaling for a 1 second clock cycle to contact switch between two threads of execution on the same",
    "start": "3827910",
    "end": "3833070"
  },
  {
    "text": "physical core takes the equivalent of of 16 minutes yeah on a Windows operating",
    "start": "3833070",
    "end": "3838620"
  },
  {
    "text": "system a little slower on a Linux operating system because Windows NT was actually designed for high number of",
    "start": "3838620",
    "end": "3844170"
  },
  {
    "text": "tracking currency from the get-go Linux be anemic system threading came pretty late to Unix and because you'll just",
    "start": "3844170",
    "end": "3850050"
  },
  {
    "text": "fork more processes so it was optimized for multiple processes over multiple threads",
    "start": "3850050",
    "end": "3856910"
  },
  {
    "text": "right right I almost all but you're stalled and not",
    "start": "3863250",
    "end": "3871030"
  },
  {
    "text": "running yes so absolutely absolutely so physical",
    "start": "3871030",
    "end": "3883420"
  },
  {
    "text": "cores beat that and yeah you over-scheduling how many too many threads is also the fastest way to",
    "start": "3883420",
    "end": "3889060"
  },
  {
    "text": "actually it is the fast way to performs death because not only do you have the taxation of switching threads what's",
    "start": "3889060",
    "end": "3894640"
  },
  {
    "text": "even worse than that is those presently working different parts of memory which means that they're going to tend to cause cache hits to go down and you're",
    "start": "3894640",
    "end": "3901780"
  },
  {
    "text": "going to tend to fall back to main memory and other expensive access reads so absolutely the fastest way to kill a",
    "start": "3901780",
    "end": "3907510"
  },
  {
    "text": "system is with too many threads so I might have to yield to Mike and let go the lectern so but I'll be around if",
    "start": "3907510",
    "end": "3913090"
  },
  {
    "text": "there's any other follow-up questions I really love the discussion thank you",
    "start": "3913090",
    "end": "3918150"
  },
  {
    "text": "well then you undo anything useful work",
    "start": "3919320",
    "end": "3923220"
  }
]