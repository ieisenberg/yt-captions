[
  {
    "text": "you hear me okay yeah apparently if I've seemed nervous it's because I am but",
    "start": "120",
    "end": "6600"
  },
  {
    "text": "that's okay we'll get through that I'm Hamas today we're gonna talk about building flexible software um we're",
    "start": "6600",
    "end": "13980"
  },
  {
    "text": "gonna start start with two disclaimers first one please put down your pitchforks I know that I disrespected",
    "start": "13980",
    "end": "19710"
  },
  {
    "text": "Lego in the title of my talk and I should never do that with developers and because you're all probably like me you",
    "start": "19710",
    "end": "27060"
  },
  {
    "text": "grew up on Lego you're feeding Lego to your kids and you curse that you did that whenever you step on a brick right",
    "start": "27060",
    "end": "32880"
  },
  {
    "text": "and this is a set that I dreamt about as a kid is the control center it was",
    "start": "32880",
    "end": "38610"
  },
  {
    "text": "awesome and but marble tracks are awesome - my kids built them all the",
    "start": "38610",
    "end": "44280"
  },
  {
    "text": "time and I didn't want to hold out this picture of em you guys they built this",
    "start": "44280",
    "end": "49910"
  },
  {
    "text": "actually a week before I first gave this talk and they had used DUPLO which is a",
    "start": "49910",
    "end": "55469"
  },
  {
    "text": "Lego product to build supports for their Marvel Trek I didn't encourage them to",
    "start": "55469",
    "end": "62640"
  },
  {
    "text": "do this in any way but it happened and yeah I felt it belong did a presentation",
    "start": "62640",
    "end": "68030"
  },
  {
    "text": "second um I'm not gonna be talking about any hipster frameworks or fancy",
    "start": "68030",
    "end": "75750"
  },
  {
    "text": "libraries all the this talk is going to be about is about how to structure your code to build a flexible product so if",
    "start": "75750",
    "end": "83549"
  },
  {
    "text": "you came to the wrong talk that's okay you can walk out there's another slide after this that you can use to leave the",
    "start": "83549",
    "end": "90000"
  },
  {
    "text": "room so that's what we're going to do today now I felt that I had to foodism",
    "start": "90000",
    "end": "98420"
  },
  {
    "text": "you shouldn't be saying Legos right Lego is a brand name you use it as an",
    "start": "98420",
    "end": "103860"
  },
  {
    "text": "adjective you say something like lego sets LEGO brick you never say Legos it will trigger Lego",
    "start": "103860",
    "end": "109619"
  },
  {
    "text": "people right and down to the business of",
    "start": "109619",
    "end": "115140"
  },
  {
    "text": "the day and I first have to tell you a little bit what our situation was when",
    "start": "115140",
    "end": "121770"
  },
  {
    "text": "we built the proof-of-concept that led to this talk we were working in a",
    "start": "121770",
    "end": "128729"
  },
  {
    "text": "company that built a huge IOT platform I'm talking about smart metering",
    "start": "128729",
    "end": "134599"
  },
  {
    "text": "thermostats smart plugs that you can put in the outlets of your walls all that",
    "start": "134599",
    "end": "141510"
  },
  {
    "text": "sort of stuff window blinds that you can control basically a whole smart home and what we",
    "start": "141510",
    "end": "147900"
  },
  {
    "text": "did is we had a huge back-end that allowed to collect data from all those devices and to push control to them as",
    "start": "147900",
    "end": "155400"
  },
  {
    "text": "you want to change the set point of your thermostat you send a control message to the IOT device and we had a core that",
    "start": "155400",
    "end": "163349"
  },
  {
    "text": "had all the shared functionality and then we had a lot of implementations because we were supporting new devices",
    "start": "163349",
    "end": "170010"
  },
  {
    "text": "all the time because the company that I worked for was an integrator and they integrated with all these external",
    "start": "170010",
    "end": "176130"
  },
  {
    "text": "suppliers of devices and usually we did the implementation during the contract",
    "start": "176130",
    "end": "181739"
  },
  {
    "text": "negotiation phases so our company was talking to these suppliers and see if we",
    "start": "181739",
    "end": "188340"
  },
  {
    "text": "could work together and then we would basically integrate their device into our core to prove that it works and",
    "start": "188340",
    "end": "194880"
  },
  {
    "text": "sometimes it would make it to a contract and we would start working with them but a lot of times it didn't and now all",
    "start": "194880",
    "end": "202739"
  },
  {
    "text": "these devices they had these extended properties and we would deploy only one",
    "start": "202739",
    "end": "208790"
  },
  {
    "text": "platform right we had this one central platform that we would use for all our customers it was a huge multi tenant",
    "start": "208790",
    "end": "215730"
  },
  {
    "text": "thing now these new implementations as I said they arrived all the time and you",
    "start": "215730",
    "end": "223560"
  },
  {
    "text": "know how it goes with product managers they ask you to do something has to be ready pretty quickly because the deadline is already overdue and so you",
    "start": "223560",
    "end": "231630"
  },
  {
    "text": "do the implementation and they tell you now we'll have time to rewrite it later and then it brought it was worse than",
    "start": "231630",
    "end": "239910"
  },
  {
    "text": "that it didn't get rewritten but the customer never signed and the code couldn't get thrown out because they had",
    "start": "239910",
    "end": "247739"
  },
  {
    "text": "this impression that they had already invested money in this code and they could never part with it sound familiar",
    "start": "247739",
    "end": "254090"
  },
  {
    "text": "yeah right I'm not the only one I think we run into that all the time and so we had this huge maintenance how",
    "start": "254090",
    "end": "262140"
  },
  {
    "text": "because we had a lot of code that was written rather quickly because the deadlines was overdue and we couldn't throw it out",
    "start": "262140",
    "end": "268470"
  },
  {
    "text": "of her codebase and it was all pretty tightly coupled so it wasn't really a good place to be and this is a quote",
    "start": "268470",
    "end": "276360"
  },
  {
    "text": "from Ken Thompson I'm sure a lot of you have heard it before it's like the most",
    "start": "276360",
    "end": "281670"
  },
  {
    "text": "productive day that he had was when he true away a thousand lines of code and that's how I felt at that customer and",
    "start": "281670",
    "end": "289140"
  },
  {
    "text": "my sons they would disagree because my oldest son his favorite color is green",
    "start": "289140",
    "end": "294180"
  },
  {
    "text": "and the second one he has a favorite color yellow and I found these two pretty suitable because they're built",
    "start": "294180",
    "end": "300900"
  },
  {
    "text": "out of Lego but you have to be able to take a wrecking ball to your coat",
    "start": "300900",
    "end": "306020"
  },
  {
    "text": "because everything that you don't use anymore it's just sitting in a way every time",
    "start": "306020",
    "end": "312780"
  },
  {
    "text": "you refactor you're actually touching that code again maintaining it making it",
    "start": "312780",
    "end": "318360"
  },
  {
    "text": "work with the new improvements of your core and you don't want to do that for code that's not delivering any value if",
    "start": "318360",
    "end": "324170"
  },
  {
    "text": "you don't have any of those devices running on your core platform in",
    "start": "324170",
    "end": "329820"
  },
  {
    "text": "production why would you even support that code and keep working on that and keep investing money in it so we wanted",
    "start": "329820",
    "end": "338070"
  },
  {
    "text": "to change that we wanted to improve things for ourselves but our project",
    "start": "338070",
    "end": "343620"
  },
  {
    "text": "management wasn't ready to change they almost flat out told us like yeah",
    "start": "343620",
    "end": "348960"
  },
  {
    "text": "it's gonna be like this forever so the new implementations would keep coming",
    "start": "348960",
    "end": "354840"
  },
  {
    "text": "the new devices would keep streaming in and a lot of them would never actually be used in production but they wanted to",
    "start": "354840",
    "end": "361950"
  },
  {
    "text": "keep the code now we got them to the point where if we could resurrect the",
    "start": "361950",
    "end": "368730"
  },
  {
    "text": "code and take it out of the deployment that was fine for them so that's the",
    "start": "368730",
    "end": "374280"
  },
  {
    "text": "wind that we had so what we wanted as a development team is we wanted to be able",
    "start": "374280",
    "end": "379680"
  },
  {
    "text": "to do these new implementations really quickly because we know that they we",
    "start": "379680",
    "end": "384930"
  },
  {
    "text": "knew that they came all the time and that it was usually under time pressure so we needed a way to actually do that",
    "start": "384930",
    "end": "391650"
  },
  {
    "text": "quickly and then to be able to remove it from the code base really easily because",
    "start": "391650",
    "end": "397350"
  },
  {
    "text": "if we could could remove it from our deployment it wasn't sitting in the way we didn't need to refactor it and so",
    "start": "397350",
    "end": "403349"
  },
  {
    "text": "on but that meant that we needed a lot less dependencies and a lot cleaner",
    "start": "403349",
    "end": "408839"
  },
  {
    "text": "abstractions in the codebase that we already have so I think a lot of you are already thinking how do you solve this",
    "start": "408839",
    "end": "415139"
  },
  {
    "text": "you use micro services right I'm gonna Park that question for a second um because to understand what why we did",
    "start": "415139",
    "end": "423509"
  },
  {
    "text": "what we did you have to a little bit transform yourself into the journey of a junior object-oriented programmer who",
    "start": "423509",
    "end": "431009"
  },
  {
    "text": "goes on his journey through life and we",
    "start": "431009",
    "end": "436559"
  },
  {
    "text": "all learn by doing takes and if I look back at my code from last year I wrote",
    "start": "436559",
    "end": "442019"
  },
  {
    "text": "some pretty pretty terrible stuff and I'm pretty sure that future me will think the same about presently",
    "start": "442019",
    "end": "447360"
  },
  {
    "text": "I hope at least because that means that I will have learned something um but we",
    "start": "447360",
    "end": "454349"
  },
  {
    "text": "all grow I mean I think we can all look back at our code base from from years ago and feel good about ourselves",
    "start": "454349",
    "end": "461129"
  },
  {
    "text": "because we have grown and the code that we write today is a lot better than the code that we wrote years ago the thing",
    "start": "461129",
    "end": "469289"
  },
  {
    "text": "is when I talk to other developers I feel that a lot of people have gone through the same journey and that",
    "start": "469289",
    "end": "476939"
  },
  {
    "text": "journey journey starts with something like this a big ball of mud you start with taking",
    "start": "476939",
    "end": "482159"
  },
  {
    "text": "some demos from blog posts or plural site videos or whatever and you throw it together into something that works and",
    "start": "482159",
    "end": "488339"
  },
  {
    "text": "you start building on top of that and you drag in new stuff and it becomes a huge complex mess right and at the",
    "start": "488339",
    "end": "497129"
  },
  {
    "text": "moment you will run into your own limitations because at at some point you",
    "start": "497129",
    "end": "502199"
  },
  {
    "text": "can no longer support this you can no longer keep growing and hopefully that's the point where you learn that you",
    "start": "502199",
    "end": "508169"
  },
  {
    "text": "cannot continue doing this hopefully this happens in university you don't do this in the customer project but",
    "start": "508169",
    "end": "514159"
  },
  {
    "text": "everybody starts somewhere right and you learn so the first thing you start doing",
    "start": "514159",
    "end": "519388"
  },
  {
    "text": "after that is you start building layers you think about grouping all your code",
    "start": "519389",
    "end": "525180"
  },
  {
    "text": "into logical into logical units you think about your UI being at the top and",
    "start": "525180",
    "end": "530759"
  },
  {
    "text": "your database being at the bottom and in be tween you will have services you will",
    "start": "530759",
    "end": "535839"
  },
  {
    "text": "have business logic and so on optionally you can deploy them separately and treat",
    "start": "535839",
    "end": "542140"
  },
  {
    "text": "them as tears um but the problem with this is the first time you do it it will",
    "start": "542140",
    "end": "547360"
  },
  {
    "text": "still be all very tightly coupled still and you only want your lair to consume",
    "start": "547360",
    "end": "553600"
  },
  {
    "text": "the layer below it that's not what you do with cake because that cake is yummy you will consume it all at once but your",
    "start": "553600",
    "end": "560410"
  },
  {
    "text": "layers just consume the layer below it but you notice that your layers become bigger and you notice that if you want",
    "start": "560410",
    "end": "568750"
  },
  {
    "text": "to change a feature or remove a feature or whatever you still have to touch all the layers because it's vertically",
    "start": "568750",
    "end": "574150"
  },
  {
    "text": "integrated and it's still not really flexible because it's still pretty tightly coupled so you learn and you",
    "start": "574150",
    "end": "583510"
  },
  {
    "text": "learn about solid and you start doing solid and you read about the principles",
    "start": "583510",
    "end": "589300"
  },
  {
    "text": "and you start applying them and it all seems very good because you have these small classes that do only one thing and",
    "start": "589300",
    "end": "595630"
  },
  {
    "text": "it becomes easy to do but what you see is if you have a team with maybe some junior developers that you will",
    "start": "595630",
    "end": "602140"
  },
  {
    "text": "basically apply all these patterns at the same time for every feature so you",
    "start": "602140",
    "end": "608410"
  },
  {
    "text": "basically will build layers in solid and you build abstractions over abstractions",
    "start": "608410",
    "end": "614440"
  },
  {
    "text": "over abstractions and I've seen more than one code base that did this so I'm pretty sure that it happens all over the",
    "start": "614440",
    "end": "620620"
  },
  {
    "text": "place and the thing is if you do this you will end up with a code base that's full of single line calls to the next",
    "start": "620620",
    "end": "628209"
  },
  {
    "text": "abstraction you will still have layers everything will still be coupled and it",
    "start": "628209",
    "end": "633730"
  },
  {
    "text": "doesn't really work for you because although single line calls they don't do anything except add refactor friction",
    "start": "633730",
    "end": "642100"
  },
  {
    "text": "and hopefully that's when you learn at some point it will click for you and for",
    "start": "642100",
    "end": "647380"
  },
  {
    "text": "me it clicked when I made the realization that an interface should be owned by by the consumer and that's the",
    "start": "647380",
    "end": "656110"
  },
  {
    "text": "the point where for me and and I know other people have other experience but that's fine at some point it will click",
    "start": "656110",
    "end": "662410"
  },
  {
    "text": "and you will understand what solid is really about and then you start actually building flexible code and this is the point",
    "start": "662410",
    "end": "668410"
  },
  {
    "text": "where it becomes easy to write unit tests and it becomes easy to even do test-driven design and my preferred way",
    "start": "668410",
    "end": "675430"
  },
  {
    "text": "of doing solid into a dotnet code base is using onion architecture I'll get",
    "start": "675430",
    "end": "682120"
  },
  {
    "text": "back to onion architecture in a way in a minute so that's basically what solid",
    "start": "682120",
    "end": "688690"
  },
  {
    "text": "code should be about it shouldn't be solid at all it shouldn't be anything like a Lego castle it should be more",
    "start": "688690",
    "end": "695620"
  },
  {
    "text": "fluid it should be like a bag of marbles I could get two guys from the audience but I think we all know what's gonna",
    "start": "695620",
    "end": "701410"
  },
  {
    "text": "happen if I ask you to replace the middle tower with the white one and if I replace as somebody else to replace the",
    "start": "701410",
    "end": "709330"
  },
  {
    "text": "blue marbles with the green ones it's gonna be a lot easier to do the marbles",
    "start": "709330",
    "end": "714790"
  },
  {
    "text": "because I constructed that castle in a way I'm an I constructed in a way that if you want to take out the",
    "start": "714790",
    "end": "720190"
  },
  {
    "text": "middle tower you will actually have to deconstruct it to outer ones as well you're and so we're not gonna do that contest",
    "start": "720190",
    "end": "728500"
  },
  {
    "text": "but that's what a lot of our code looks like it looks like that castle it's all very tightly coupled together and it's very hard to remove stuff and basically",
    "start": "728500",
    "end": "735490"
  },
  {
    "text": "what we want is the Marvis um and only after you get all that right I",
    "start": "735490",
    "end": "743580"
  },
  {
    "text": "think that you should be getting him to complex in your life further by doing",
    "start": "743580",
    "end": "748600"
  },
  {
    "text": "different deployment models I think you should learn to do everything right and model it first and then grow into more",
    "start": "748600",
    "end": "754870"
  },
  {
    "text": "complex deployments because if you have more units of deployment it complicates",
    "start": "754870",
    "end": "760840"
  },
  {
    "text": "your life in so many other ways monitoring becomes harder debugging becomes harder and so on and I feel that",
    "start": "760840",
    "end": "766930"
  },
  {
    "text": "at the moment is the fancy thing to do is is to start with micro services right away and a lot of teams they don't",
    "start": "766930",
    "end": "773470"
  },
  {
    "text": "realize they're adding a lot of friction to their development and deployment process where they really shouldn't",
    "start": "773470",
    "end": "778920"
  },
  {
    "text": "because if your website has like 50 concurrent users you can just have like a small instance on Azure and deploy it",
    "start": "778920",
    "end": "785800"
  },
  {
    "text": "to that and you'll be fine and it will be easy to debug and easy to monitor and easy to deploy so I'm gonna paraphrase",
    "start": "785800",
    "end": "793690"
  },
  {
    "text": "Martin Fowler a little bit he said that the first rule of distributed software is don't distribute",
    "start": "793690",
    "end": "799630"
  },
  {
    "text": "and I changed the quote a little bit to fit Fight Club because it's an awesome movie but he is right here",
    "start": "799630",
    "end": "809050"
  },
  {
    "text": "you shouldn't complicate your life until it is time until you really need that there are a couple of reasons",
    "start": "809050",
    "end": "814870"
  },
  {
    "text": "why if if a team or a product grow to a certain point you will always end up",
    "start": "814870",
    "end": "820959"
  },
  {
    "text": "with micro-services and that's fine but you shouldn't start out doing them unless you have a really really really",
    "start": "820959",
    "end": "826449"
  },
  {
    "text": "good reason to so our code base was a",
    "start": "826449",
    "end": "832120"
  },
  {
    "text": "bit around step three I think our code base looked most like this we",
    "start": "832120",
    "end": "837550"
  },
  {
    "text": "had lots of abstractions with single line calls and it was already multiple",
    "start": "837550",
    "end": "843850"
  },
  {
    "text": "units of deployment and we didn't really have a need to further distribute so micro-services wouldn't really help us",
    "start": "843850",
    "end": "850480"
  },
  {
    "text": "because our team was quite junior and so we weren't ready to be honest and a my",
    "start": "850480",
    "end": "858250"
  },
  {
    "text": "take on this is that you should not solve your code problems with deployment problems you should never do that",
    "start": "858250",
    "end": "863370"
  },
  {
    "text": "because we programmers we feel at home when we're writing code if you're",
    "start": "863370",
    "end": "868990"
  },
  {
    "text": "writing codes you know what you're doing you know what the effects of what you're doing will be but if you're setting up deployment",
    "start": "868990",
    "end": "875410"
  },
  {
    "text": "pipelines and production monitoring and and all that kind of stuff you go a",
    "start": "875410",
    "end": "881110"
  },
  {
    "text": "little bit out of your comfort zone I don't know how it is for you guys but I feel more at home in visual studio then",
    "start": "881110",
    "end": "886240"
  },
  {
    "text": "I will do in Azure DevOps so we decided not to do micro services at all and we",
    "start": "886240",
    "end": "893259"
  },
  {
    "text": "decided to aim for plugins now what were the challenges that we were facing in",
    "start": "893259",
    "end": "899050"
  },
  {
    "text": "our product um the front end of our application was actually an API but for",
    "start": "899050",
    "end": "905170"
  },
  {
    "text": "me that's as front-end as it gets I I can only touch JavaScript with a",
    "start": "905170",
    "end": "910329"
  },
  {
    "text": "ten-foot pole but the front end of our application was was an API and we wanted",
    "start": "910329",
    "end": "917470"
  },
  {
    "text": "to be able to extend all our core API calls with the new derived types and",
    "start": "917470",
    "end": "923550"
  },
  {
    "text": "that meant that it's very easy to add as I'll show you in a bit to add extra",
    "start": "923550",
    "end": "931059"
  },
  {
    "text": "controllers to an running asp.net application from other dll's it became a lot easier with court soo but",
    "start": "931059",
    "end": "938830"
  },
  {
    "text": "if you want to extend these central calls it's like get all devices for customer or whatever yeah you would get",
    "start": "938830",
    "end": "944890"
  },
  {
    "text": "those derived types with all the correct properties so you need to extend those central course with outside logic that",
    "start": "944890",
    "end": "951820"
  },
  {
    "text": "was actually the biggest problem we had because we had to go all the way to our",
    "start": "951820",
    "end": "956980"
  },
  {
    "text": "and the framework dbcontext to with the extension we wanted to extend the logic",
    "start": "956980",
    "end": "962020"
  },
  {
    "text": "and we wanted to be able to handle all the migrations for our database which is",
    "start": "962020",
    "end": "969070"
  },
  {
    "text": "always a tricky thing to do as well so one of our developers still told me that",
    "start": "969070",
    "end": "974140"
  },
  {
    "text": "entity framework cannot do this and we will hit a wall and that's impossible and the best way to get me to do anything tell me that it's impossible",
    "start": "974140",
    "end": "980640"
  },
  {
    "text": "because I will find a way I will work through tonight to figure out how I can",
    "start": "980640",
    "end": "986020"
  },
  {
    "text": "prove that guy wrong so we did that and we built a successful proof of concept",
    "start": "986020",
    "end": "992200"
  },
  {
    "text": "at the time it was using entity framework six and we were using asp.net MVC five well Web API two I think and so",
    "start": "992200",
    "end": "1002730"
  },
  {
    "text": "we adopted that model of doing stuff and this is where I'm gonna actually divert",
    "start": "1002730",
    "end": "1009090"
  },
  {
    "text": "a little bit from reality because two things I cannot use the code from that",
    "start": "1009090",
    "end": "1015240"
  },
  {
    "text": "company to show in my presentation second thing is yeah we have that core now which is a lot better and and it",
    "start": "1015240",
    "end": "1023910"
  },
  {
    "text": "makes a lot of this stuff a lot easier so I wondered like how do we do it isn't that core and can I show people how to",
    "start": "1023910",
    "end": "1030000"
  },
  {
    "text": "do it and the first thing that you will need to know to get into our conversation is to is onion architecture",
    "start": "1030000",
    "end": "1038240"
  },
  {
    "text": "onion architecture is a term that was used by jeffrey palermo about ten years ago but it's not a new concept by any",
    "start": "1038240",
    "end": "1045180"
  },
  {
    "text": "means it's basically ports and adapters or hexagons the architecture um you get",
    "start": "1045180",
    "end": "1050880"
  },
  {
    "text": "it's known under all these names now the whole point of this and that's why it",
    "start": "1050880",
    "end": "1056070"
  },
  {
    "text": "matches so well with solid is that you will try to keep your dependencies",
    "start": "1056070",
    "end": "1061350"
  },
  {
    "text": "really clean it has nothing to do with the onion by the way they're not clean at all but they're really",
    "start": "1061350",
    "end": "1066809"
  },
  {
    "text": "funny but you want to shield all your abstractions from your core logic that's",
    "start": "1066809",
    "end": "1073019"
  },
  {
    "text": "the thing that you really want to do and make your product very testable and what it looks like is a bit like this at the",
    "start": "1073019",
    "end": "1081419"
  },
  {
    "text": "center you have your domain model it's all your your classes that are in your domain around that you will write your",
    "start": "1081419",
    "end": "1087389"
  },
  {
    "text": "domain services which is basically your business logic and around that you will",
    "start": "1087389",
    "end": "1092399"
  },
  {
    "text": "write your application services that's basically how your core communicates with the outside world and references",
    "start": "1092399",
    "end": "1100080"
  },
  {
    "text": "can only point it so you can only put references to the inside and not to the",
    "start": "1100080",
    "end": "1105749"
  },
  {
    "text": "outside that means that everything else is an integration even your database and",
    "start": "1105749",
    "end": "1111629"
  },
  {
    "text": "that's where this the first completely from the layers that I showed you earlier because we will not point to our",
    "start": "1111629",
    "end": "1118919"
  },
  {
    "text": "database our database will point to our core and all these integrations make",
    "start": "1118919",
    "end": "1124320"
  },
  {
    "text": "sure that you can basically shield and anything that might pollute your logic",
    "start": "1124320",
    "end": "1130799"
  },
  {
    "text": "from it it means your core will be completely reference free you will not",
    "start": "1130799",
    "end": "1136860"
  },
  {
    "text": "reference entity framework in your core you will not reference all the FAQ or outer mapper or whatever your core well",
    "start": "1136860",
    "end": "1143850"
  },
  {
    "text": "I make one exception there and are there people here we use no that time no yes",
    "start": "1143850",
    "end": "1151259"
  },
  {
    "text": "I'm at least good if you want a better daytime library then the standards on",
    "start": "1151259",
    "end": "1156539"
  },
  {
    "text": "net ones know that time is awesome it gives you concrete types for pretty much everything that you ever need a date for",
    "start": "1156539",
    "end": "1162899"
  },
  {
    "text": "so if you need a local date without the time they have a type for that and it's awesome but that's like all it does it",
    "start": "1162899",
    "end": "1170039"
  },
  {
    "text": "gives you the types to work with so that's something I allow in there because otherwise it would become really",
    "start": "1170039",
    "end": "1176399"
  },
  {
    "text": "hard but all the rest I keep out of the core and everything else is an",
    "start": "1176399",
    "end": "1182940"
  },
  {
    "text": "integration and if you want to talk to a database through any framework what you will do is you will define an interface",
    "start": "1182940",
    "end": "1189240"
  },
  {
    "text": "for what you need from that database and you make the implementation in your infrastructure layer and only derry will",
    "start": "1189240",
    "end": "1195809"
  },
  {
    "text": "know about and the framework and your core stays really clean and so all these things they become",
    "start": "1195809",
    "end": "1202520"
  },
  {
    "text": "dependencies but not really encode they come dependencies true clean",
    "start": "1202520",
    "end": "1208049"
  },
  {
    "text": "abstractions and this will require a DI container to tie everything together I",
    "start": "1208049",
    "end": "1215270"
  },
  {
    "text": "know that there are some people who don't like using di containers but you",
    "start": "1215270",
    "end": "1220320"
  },
  {
    "text": "you won't get away without one for this so the first thing is you don't get",
    "start": "1220320",
    "end": "1226350"
  },
  {
    "text": "leaky dependencies nothing leaks into your core logic and that is really cool because for first time your dependencies",
    "start": "1226350",
    "end": "1233309"
  },
  {
    "text": "become really replaceable if you want to use another di container you just reimplemented interface that you wrote",
    "start": "1233309",
    "end": "1239820"
  },
  {
    "text": "for the DI container and you're done and you don't have to reflect her all over prate a place and replace",
    "start": "1239820",
    "end": "1246240"
  },
  {
    "text": "references and so on you can actually quite easily deeply replace something",
    "start": "1246240",
    "end": "1251809"
  },
  {
    "text": "the other thing that you get is that your core is not polluted with any presentation logic which means that you",
    "start": "1251809",
    "end": "1258510"
  },
  {
    "text": "can throw this core into another UI let's say you build a web application and you want to try to throw it into a",
    "start": "1258510",
    "end": "1264390"
  },
  {
    "text": "desktop application or whatever you can really easily do that without changing anything to the logic and this this",
    "start": "1264390",
    "end": "1271860"
  },
  {
    "text": "design really forces you to do what I told you earlier is like if you consume",
    "start": "1271860",
    "end": "1276900"
  },
  {
    "text": "an interface you're the owner of the interface and here you have no other way but to define the interface first and",
    "start": "1276900",
    "end": "1282659"
  },
  {
    "text": "then implement it on the outside so it forces you in that direction and with",
    "start": "1282659",
    "end": "1289890"
  },
  {
    "text": "test-driven design it becomes really clear where you should write which type of tests your core is really easily unit",
    "start": "1289890",
    "end": "1298140"
  },
  {
    "text": "testing testable because it has almost no dependencies the only dependencies that you have will be other core classes",
    "start": "1298140",
    "end": "1304530"
  },
  {
    "text": "that are injected and you can really easily mock them if you write integration tests you can just write",
    "start": "1304530",
    "end": "1310679"
  },
  {
    "text": "them against your infrastructure layer and that becomes really easy to do because your infrastructure layer",
    "start": "1310679",
    "end": "1316799"
  },
  {
    "text": "doesn't have any dependencies to the core so there's nothing to mock you can just do the integration tests so that",
    "start": "1316799",
    "end": "1324299"
  },
  {
    "text": "makes this whole thing really nice and easy to do now",
    "start": "1324299",
    "end": "1331940"
  },
  {
    "text": "I do it a little bit differently but it's just potato potato kind of stuff I",
    "start": "1331940",
    "end": "1337299"
  },
  {
    "text": "don't like if you if you look at this design remember your domain services",
    "start": "1337299",
    "end": "1342919"
  },
  {
    "text": "will actually contain most of your business logic I don't like outside code referencing",
    "start": "1342919",
    "end": "1348559"
  },
  {
    "text": "classes directly I want them to go through interfaces so when I structure it is basically the same thing but I",
    "start": "1348559",
    "end": "1355369"
  },
  {
    "text": "structure it like this and I only reference the contracts and the models I never a reference to logic but if you",
    "start": "1355369",
    "end": "1361549"
  },
  {
    "text": "look at it like this the models are actually your domain models and the contracts are your application services",
    "start": "1361549",
    "end": "1368089"
  },
  {
    "text": "and your logic are your domain services so I make one more rule than Jeffrey palerma did but if you keep your core",
    "start": "1368089",
    "end": "1377299"
  },
  {
    "text": "clean at all costs and that's the only thing that you really need to guard it",
    "start": "1377299",
    "end": "1383959"
  },
  {
    "text": "will really help you with a lot of implementations let's say that you need",
    "start": "1383959",
    "end": "1390199"
  },
  {
    "text": "some kind of integration for instance our di container now we don't want the",
    "start": "1390199",
    "end": "1395749"
  },
  {
    "text": "DI container to be in the core logic so we're gonna have to define what we want from a DI container because if you look",
    "start": "1395749",
    "end": "1403459"
  },
  {
    "text": "at out of fact I don't know about you guys but that thing has like a million possibilities to use it you're gonna use",
    "start": "1403459",
    "end": "1409039"
  },
  {
    "text": "like five right so you define the few things that you want from your di",
    "start": "1409039",
    "end": "1414649"
  },
  {
    "text": "container what I usually want is I want to be able to register my types at runtime I want to be able to set a scope",
    "start": "1414649",
    "end": "1421609"
  },
  {
    "text": "where they get resolved so that whenever in my HTTP requests I will receive the same DB context that sort of stuff",
    "start": "1421609",
    "end": "1430819"
  },
  {
    "text": "and I want to be able to insert my plugin so we'll see that later",
    "start": "1430819",
    "end": "1436009"
  },
  {
    "text": "so you define what you want and you make a contract for your di container and then you're lazy because you're a",
    "start": "1436009",
    "end": "1442399"
  },
  {
    "text": "developer and you should write as little code as possible so you go looking for a new get package that does what you want",
    "start": "1442399",
    "end": "1450039"
  },
  {
    "text": "and you will find something like out of fact core castle windsor or whatever and",
    "start": "1450039",
    "end": "1455769"
  },
  {
    "text": "then you write the implementation and that one consumes the package and it fulfills the interface because you only",
    "start": "1455769",
    "end": "1461929"
  },
  {
    "text": "define five calls that work should be true if it's not trivial you pick the wrong",
    "start": "1461929",
    "end": "1468710"
  },
  {
    "text": "nougat package that's all there is to say and what happens then is life",
    "start": "1468710",
    "end": "1473840"
  },
  {
    "text": "becomes peachy rainbows unicorns you don't have anything that leaks into your",
    "start": "1473840",
    "end": "1479750"
  },
  {
    "text": "core and all your integrations are easy to write and you become that developer that sits in the woods I don't know how",
    "start": "1479750",
    "end": "1486650"
  },
  {
    "text": "he works after two or three hours when his battery is dead but he sits in the woods it gets the image across of the",
    "start": "1486650",
    "end": "1493340"
  },
  {
    "text": "happy developer but there's so many things wrong with that picture right but",
    "start": "1493340",
    "end": "1498679"
  },
  {
    "text": "now we've talked about the core of a replication we build our core using onion architecture and now we want to",
    "start": "1498679",
    "end": "1504290"
  },
  {
    "text": "tack plugins on top of this remember that we want to do these implementations of all these devices right so what did",
    "start": "1504290",
    "end": "1512120"
  },
  {
    "text": "we want from our plugins they should be easy to develop and they should extend",
    "start": "1512120",
    "end": "1517340"
  },
  {
    "text": "our core logic seamlessly that's what we really wanted and to enable them in a",
    "start": "1517340",
    "end": "1524780"
  },
  {
    "text": "certain deployment because we did have separate environments and we wanted to demo new devices in the acceptance",
    "start": "1524780",
    "end": "1531980"
  },
  {
    "text": "environment for potential customers but then not add them to the production deploy until it was really certain that",
    "start": "1531980",
    "end": "1537290"
  },
  {
    "text": "they would go to production so instead of working with feature flags and and and polluting your code with that kind",
    "start": "1537290",
    "end": "1543920"
  },
  {
    "text": "of stuff we we figured out if we can just deploy the assemblies and the features enable themselves that would be",
    "start": "1543920",
    "end": "1550340"
  },
  {
    "text": "like the best thing and I'm removing them again was just like we removed the assemblies from the deployment and we're",
    "start": "1550340",
    "end": "1556280"
  },
  {
    "text": "done that meant that we could not have any references to our plugins because",
    "start": "1556280",
    "end": "1561740"
  },
  {
    "text": "that would make things really really hard and we needed to make more rules",
    "start": "1561740",
    "end": "1566809"
  },
  {
    "text": "because yeah that was too easy so now the plugins could reference the core and",
    "start": "1566809",
    "end": "1573730"
  },
  {
    "text": "we wanted them to follow some conventions because yeah all the plugins should be alike and it should be easy to",
    "start": "1573730",
    "end": "1580390"
  },
  {
    "text": "first anyone to get into a plug-in that they hadn't written themselves and they",
    "start": "1580390",
    "end": "1585770"
  },
  {
    "text": "should not break anything when we remove them from the deployment and that was not so trivial actually because what",
    "start": "1585770",
    "end": "1592429"
  },
  {
    "text": "happens is you deploy a plugin and a new device type pops up and you connect to",
    "start": "1592429",
    "end": "1597470"
  },
  {
    "text": "device and at that point you will have data in your database that came from a plugin and if",
    "start": "1597470",
    "end": "1602980"
  },
  {
    "text": "you remove the plugin then your code won't understand where that data come from and you will have runtime errors so",
    "start": "1602980",
    "end": "1610270"
  },
  {
    "text": "that's something that we didn't want are you still with me at this point good I'm",
    "start": "1610270",
    "end": "1618820"
  },
  {
    "text": "going to show you the bits of code that are interesting that you need to make this work Internet core and it's really",
    "start": "1618820",
    "end": "1626530"
  },
  {
    "text": "not that much code so hold on for a little minute I couldn't use the code from the IOT platform so what we're",
    "start": "1626530",
    "end": "1634690"
  },
  {
    "text": "gonna be talking about is a toy collector and there will be a plugin for Lego and a plug-in for marbles you can",
    "start": "1634690",
    "end": "1641320"
  },
  {
    "text": "check out the code from a github I'll give you the link at the end if you want to look at it yourself and so that's",
    "start": "1641320",
    "end": "1648039"
  },
  {
    "text": "what we're building and it will be fairly easy now the first thing that we",
    "start": "1648039",
    "end": "1653380"
  },
  {
    "text": "need to do is to get our di container wired up and we cannot just scan all the",
    "start": "1653380",
    "end": "1659799"
  },
  {
    "text": "referenced assemblies because with onion architecture you will always have this point because you're you I'm referee and",
    "start": "1659799",
    "end": "1670960"
  },
  {
    "text": "your UI is usually your starter project right your Web API will be the project that starts up on the server and that",
    "start": "1670960",
    "end": "1676690"
  },
  {
    "text": "references the core but core doesn't reference anything else so if you scan",
    "start": "1676690",
    "end": "1682390"
  },
  {
    "text": "the referenced assemblies you won't get everything back now there's two things you can do but basically the the thing",
    "start": "1682390",
    "end": "1692020"
  },
  {
    "text": "that we always did is you make type registers and it's it's a simple",
    "start": "1692020",
    "end": "1697090"
  },
  {
    "text": "interface that you would implement I'll show you in a second and what we're gonna do is we scan all the assemblies",
    "start": "1697090",
    "end": "1703000"
  },
  {
    "text": "in the deployment folder and we scan them for these type registrar's and we run those that's basically all we do",
    "start": "1703000",
    "end": "1710820"
  },
  {
    "text": "it's not really that hard now the thing is Visual Studio also doesn't build",
    "start": "1710820",
    "end": "1718630"
  },
  {
    "text": "everything if it's not referenced so if you're changing something in your whatever integration that is not",
    "start": "1718630",
    "end": "1726039"
  },
  {
    "text": "referenced by your core and you start up your UI it won't build that project because it feels that it doesn't need to",
    "start": "1726039",
    "end": "1732250"
  },
  {
    "text": "so you have to tweak your visual studio a little bit or you do a manual build",
    "start": "1732250",
    "end": "1740140"
  },
  {
    "text": "step there's also something you can do to copy the assembly studi executing directory what you can also do is you",
    "start": "1740140",
    "end": "1746710"
  },
  {
    "text": "can make in development assembly where you do have the reference it's up to you one requires like the extra click like",
    "start": "1746710",
    "end": "1753400"
  },
  {
    "text": "the manual built and the other one makes your life easier but then you have to make sure that you have two solutions",
    "start": "1753400",
    "end": "1759760"
  },
  {
    "text": "that you maintain one for development and one for your build process now these",
    "start": "1759760",
    "end": "1765760"
  },
  {
    "text": "type registrar's are really not that hard to do what I did there is I have an",
    "start": "1765760",
    "end": "1772860"
  },
  {
    "text": "interface for a type registration container it's basically a wrapper around the service collection of asp.net",
    "start": "1772860",
    "end": "1780940"
  },
  {
    "text": "core and I will just load all the dll's",
    "start": "1780940",
    "end": "1786270"
  },
  {
    "text": "see if there are implementations of the I type registrar in there and then I",
    "start": "1786270",
    "end": "1791679"
  },
  {
    "text": "will instantiate it using reflector with reflection with create instance and I",
    "start": "1791679",
    "end": "1797740"
  },
  {
    "text": "will run that code this is not hard to do but this is your assembly scan at",
    "start": "1797740",
    "end": "1803770"
  },
  {
    "text": "startup from the project's now what is already a little bit trickier is asp.net",
    "start": "1803770",
    "end": "1811240"
  },
  {
    "text": "core um asp.net core makes it a lot easier",
    "start": "1811240",
    "end": "1816520"
  },
  {
    "text": "than it was in MVC 5 if you wanted to add runtime controllers to an",
    "start": "1816520",
    "end": "1822610"
  },
  {
    "text": "application you basically needed to write a custom controller selector and a custom view selector um you can google",
    "start": "1822610",
    "end": "1829840"
  },
  {
    "text": "it it's out there and it will take you about a day probably to get it to work properly the way that you want it but in",
    "start": "1829840",
    "end": "1837340"
  },
  {
    "text": "asp.net core we have this thing called application parts and you can register assemblies in runtime to extend your",
    "start": "1837340",
    "end": "1844480"
  },
  {
    "text": "application so if you need to add new controllers it's your work is already",
    "start": "1844480",
    "end": "1849520"
  },
  {
    "text": "done for you what does this look like",
    "start": "1849520",
    "end": "1855630"
  },
  {
    "text": "you just in the start above your appricate application you call add",
    "start": "1855630",
    "end": "1860860"
  },
  {
    "text": "assembly part and there are different ones for the views",
    "start": "1860860",
    "end": "1865900"
  },
  {
    "text": "and the controllers because when you generate a new razor application you your views get compiled to a new",
    "start": "1865900",
    "end": "1871810"
  },
  {
    "text": "separate view view application now the",
    "start": "1871810",
    "end": "1878470"
  },
  {
    "text": "thing is as I told you we weren't really doing razor views we were doing an API and with XML it's really easy if I want",
    "start": "1878470",
    "end": "1888460"
  },
  {
    "text": "to post a Lego set to a surface that's really going to be easy to do because I",
    "start": "1888460",
    "end": "1894790"
  },
  {
    "text": "start my XML documents with a Lego set target DAC and I use all the Lego set",
    "start": "1894790",
    "end": "1900070"
  },
  {
    "text": "properties and then I will close it with a Lego set tag again and my deserialize",
    "start": "1900070",
    "end": "1906850"
  },
  {
    "text": "err will know what to do because it has loaded that type into memory so it can",
    "start": "1906850",
    "end": "1912160"
  },
  {
    "text": "do what it needs to do with Chasen's that with jason that's a bit harder because jason doesn't have type",
    "start": "1912160",
    "end": "1918550"
  },
  {
    "text": "directives and if you have a controller that accepts a toy it will have no way",
    "start": "1918550",
    "end": "1923980"
  },
  {
    "text": "of knowing whether it's a Lego set or AB or a marble or whatever you throw at it",
    "start": "1923980",
    "end": "1930240"
  },
  {
    "text": "and you have this thing called type name handling and type name handling gives",
    "start": "1930240",
    "end": "1936070"
  },
  {
    "text": "you this feature you can basically add the type of what your JSON document is",
    "start": "1936070",
    "end": "1942550"
  },
  {
    "text": "to your Jason and that's really all fun",
    "start": "1942550",
    "end": "1948370"
  },
  {
    "text": "and games but I have to warn you I only learned this a few days ago and it didn't have time to completely rewrite",
    "start": "1948370",
    "end": "1954490"
  },
  {
    "text": "the code yet there are other ways of doing this you can write a custom implementation where you have a type",
    "start": "1954490",
    "end": "1960220"
  },
  {
    "text": "property that you handle yourself and then you Desir realize to the to the right type and you have to extend your",
    "start": "1960220",
    "end": "1966580"
  },
  {
    "text": "model binder for that but that's okay the thing is this has a security leak in it and that security leak got up on a",
    "start": "1966580",
    "end": "1974020"
  },
  {
    "text": "wasp so before you use this research what the security leak is you can counter it and but don't just use this",
    "start": "1974020",
    "end": "1981550"
  },
  {
    "text": "out of the box please right but this gives you in Jason what you need you can",
    "start": "1981550",
    "end": "1987520"
  },
  {
    "text": "tell your API is what prototypes are that you're working with now one of the",
    "start": "1987520",
    "end": "1993100"
  },
  {
    "text": "other things that we needed to do is to extend logic an extending logic is not really dead heart",
    "start": "1993100",
    "end": "1998850"
  },
  {
    "text": "we can have some interfaces that we define in our court and we implement",
    "start": "1998850",
    "end": "2004789"
  },
  {
    "text": "them in our plugins and we register them in the type register now what we need",
    "start": "2004789",
    "end": "2012289"
  },
  {
    "text": "for this is a scoped service locator the",
    "start": "2012289",
    "end": "2018289"
  },
  {
    "text": "reason that you need a service locator for this is that often times you will know in your central API core in your",
    "start": "2018289",
    "end": "2025519"
  },
  {
    "text": "central API you will only know the type at the moment that you actually get a",
    "start": "2025519",
    "end": "2030980"
  },
  {
    "text": "call and then you have to resolve a generic interface now the problem with",
    "start": "2030980",
    "end": "2037220"
  },
  {
    "text": "that is you you don't only need to have the generic interface the one at the",
    "start": "2037220",
    "end": "2042649"
  },
  {
    "text": "bottom you also need to need a way to call it to construct it and call it so what I usually do is I use the",
    "start": "2042649",
    "end": "2049220"
  },
  {
    "text": "superclass toy in the main interface and I then I will make a generic one that I",
    "start": "2049220",
    "end": "2054710"
  },
  {
    "text": "can implement in my plugins and the reason to do that is that the superclass",
    "start": "2054710",
    "end": "2060710"
  },
  {
    "text": "will just accept a toy and if you can go to your asp.net controller what you're actually getting is a toy right there",
    "start": "2060710",
    "end": "2070179"
  },
  {
    "text": "and if you would have to cast that to the correct time that you will only know",
    "start": "2070750",
    "end": "2076638"
  },
  {
    "text": "at runtime it's so so much harder to do and you can just resolve the interface",
    "start": "2076639",
    "end": "2083300"
  },
  {
    "text": "based on the type because the type will be correct that one will actually give you Lego set or marble so if you do that",
    "start": "2083300",
    "end": "2091579"
  },
  {
    "text": "you use it to resolve the generic interface and then you just call it with a toy and you can unbox it in your",
    "start": "2091579",
    "end": "2098030"
  },
  {
    "text": "implementation it will be a lot easier to do it like this and then the last",
    "start": "2098030",
    "end": "2104450"
  },
  {
    "text": "thing the thing that the other developer said that we couldn't do um was to extend entity framework now all of you",
    "start": "2104450",
    "end": "2111650"
  },
  {
    "text": "of who F works with entity framework will know entity framework needs to know about three things it needs a model of",
    "start": "2111650",
    "end": "2117530"
  },
  {
    "text": "your code your classes it needs a model of your tables in your database and it needs a mapping between",
    "start": "2117530",
    "end": "2122660"
  },
  {
    "text": "those two and for those of you who have been around long enough since entity framework one and entity framework 4",
    "start": "2122660",
    "end": "2128900"
  },
  {
    "text": "they will know that we used to keep that data in a file call the admx file it was a huge XML file",
    "start": "2128900",
    "end": "2136150"
  },
  {
    "text": "that would always cause merge problems there's a reason that we don't have it anymore but at the moment in modern",
    "start": "2136150",
    "end": "2143740"
  },
  {
    "text": "versus of entity frameworks since 4.1 we have this thing called code first and we derive actually the same information but",
    "start": "2143740",
    "end": "2150160"
  },
  {
    "text": "we we derive it from our code we will add mapping code we will add attributes",
    "start": "2150160",
    "end": "2155470"
  },
  {
    "text": "but most of the information that entity framework needs to run come from the",
    "start": "2155470",
    "end": "2160990"
  },
  {
    "text": "code now the fun thing is that NT framework doesn't need this code at",
    "start": "2160990",
    "end": "2166060"
  },
  {
    "text": "compile time you can just feed it all this information at a runtime so if you have a DB context that has a collection",
    "start": "2166060",
    "end": "2173590"
  },
  {
    "text": "of toys you can tell any framework about LEGO sets and about marbles at runtime",
    "start": "2173590",
    "end": "2180850"
  },
  {
    "text": "that's what on model creating is for now entity framework core has a few feet has",
    "start": "2180850",
    "end": "2189490"
  },
  {
    "text": "some features that ef6 had and it also misses some and one of them is the",
    "start": "2189490",
    "end": "2195970"
  },
  {
    "text": "different inheritance malls so entity framework or only supports table per",
    "start": "2195970",
    "end": "2202090"
  },
  {
    "text": "higher he inheritance it means that all your fields go into the same table and you will have some kind of column that",
    "start": "2202090",
    "end": "2208690"
  },
  {
    "text": "you use as a discriminator to tell you what type of record is in there and the",
    "start": "2208690",
    "end": "2215230"
  },
  {
    "text": "problem is that if you remove your plugin again i remove my marbles plug-in",
    "start": "2215230",
    "end": "2222940"
  },
  {
    "text": "from my deployment and there are rows that have a discriminator that says this",
    "start": "2222940",
    "end": "2228580"
  },
  {
    "text": "is a marble yeah you will have runtime errors in ef6",
    "start": "2228580",
    "end": "2233700"
  },
  {
    "text": "the fun thing is that entity framework or automatically adds a where clause for",
    "start": "2233700",
    "end": "2240820"
  },
  {
    "text": "the discriminators so it will only query all the discriminators that it knows",
    "start": "2240820",
    "end": "2246400"
  },
  {
    "text": "about it already assumes that there's gonna be data in the table that it does not want to see and that is a very nice",
    "start": "2246400",
    "end": "2253210"
  },
  {
    "text": "thing now it wasn't really hard to extend ef6 to do the same thing but you",
    "start": "2253210",
    "end": "2259119"
  },
  {
    "text": "get it for free now how do we extend the DB context we basically have an",
    "start": "2259119",
    "end": "2265930"
  },
  {
    "text": "interface that allows you to extend the dbcontext and there you can basically",
    "start": "2265930",
    "end": "2272109"
  },
  {
    "text": "access the model builder the reason that I use object there is the same reason as",
    "start": "2272109",
    "end": "2278950"
  },
  {
    "text": "before I don't want to drag entity framework into my core and to actually",
    "start": "2278950",
    "end": "2284530"
  },
  {
    "text": "name that property DB context would mean that I need a reference to entity framework in my core which I don't want",
    "start": "2284530",
    "end": "2291040"
  },
  {
    "text": "now the only thing that will get passed to this is DB contexts so its model",
    "start": "2291040",
    "end": "2296050"
  },
  {
    "text": "builders so you can actually just cast it it's not really that big of a problem",
    "start": "2296050",
    "end": "2301109"
  },
  {
    "text": "and that's where you apply new configurations and there is this generic",
    "start": "2301109",
    "end": "2307410"
  },
  {
    "text": "set function that you can use on a DB context if you want to have a DB set",
    "start": "2307410",
    "end": "2312520"
  },
  {
    "text": "just for marbles that's okay but just adding the mapping for marbles will actually extend your knowledge and the D",
    "start": "2312520",
    "end": "2319630"
  },
  {
    "text": "framework will know about not just toys but also about toys that are LEGO sets and that are marbles and if you register",
    "start": "2319630",
    "end": "2329200"
  },
  {
    "text": "them like this you can just inject the collection of extensions and if you",
    "start": "2329200",
    "end": "2336819"
  },
  {
    "text": "inject the collection of extensions you can basically run all of them at once and tell in the model creating and",
    "start": "2336819",
    "end": "2344349"
  },
  {
    "text": "you'll be done so that works really well and that means that our API we had all",
    "start": "2344349",
    "end": "2351880"
  },
  {
    "text": "the things that we wanted to do we could actually add new controllers we could add new functionality to existing",
    "start": "2351880",
    "end": "2357430"
  },
  {
    "text": "controls we could add new types to all the codes code that we were already running and we could extend the logic",
    "start": "2357430",
    "end": "2363579"
  },
  {
    "text": "and all the places that we want it the only thing left to do is migrations and",
    "start": "2363579",
    "end": "2369240"
  },
  {
    "text": "there are basically two approaches you can take to migrating a project like this",
    "start": "2369240",
    "end": "2374670"
  },
  {
    "text": "who here has worked with entity framework migrations okay so a fair bit",
    "start": "2374670",
    "end": "2379780"
  },
  {
    "text": "of you know what what we're talking about now you can just use and the D framework migrations for this if you",
    "start": "2379780",
    "end": "2385240"
  },
  {
    "text": "want and that's actually what we ended up doing I like the other approach better so that's what I'm gonna to talk",
    "start": "2385240",
    "end": "2391000"
  },
  {
    "text": "about both now entity framework migrations can be used if you basically",
    "start": "2391000",
    "end": "2399380"
  },
  {
    "text": "I great for all the plugins it means you make a dbcontext you load all the plugins into it and then you base your",
    "start": "2399380",
    "end": "2405680"
  },
  {
    "text": "migrations on that and then you will have a database that basically always has all of the plugins in there all of",
    "start": "2405680",
    "end": "2412849"
  },
  {
    "text": "the tables and the fields maybe they will not contain data but it will work the good thing about this is this is",
    "start": "2412849",
    "end": "2420740"
  },
  {
    "text": "easier to do deploy time migrations because you can just take those",
    "start": "2420740",
    "end": "2427009"
  },
  {
    "text": "migrations and put them into your deployment now there is one problem with",
    "start": "2427009",
    "end": "2434720"
  },
  {
    "text": "this especially in an entity framework six entity framework knows about the",
    "start": "2434720",
    "end": "2441349"
  },
  {
    "text": "version history table that the migration history table sorry version history is in the other approach the migration history table and actually",
    "start": "2441349",
    "end": "2449150"
  },
  {
    "text": "it will write a record tear with your last migration and it also has a field that has the model state of your",
    "start": "2449150",
    "end": "2455180"
  },
  {
    "text": "dbcontext when it was migrated an entity framework will query that table and will",
    "start": "2455180",
    "end": "2461180"
  },
  {
    "text": "check if the model state matches up with its internal idea of what the database",
    "start": "2461180",
    "end": "2467029"
  },
  {
    "text": "should look like and as soon as they don't match and the framework will go like yeah I'm not doing this and that's",
    "start": "2467029",
    "end": "2473990"
  },
  {
    "text": "a real problem so if you migrate for all the plugins and you only deploy a few",
    "start": "2473990",
    "end": "2479089"
  },
  {
    "text": "your two models will not match and everything will break ask me how I know",
    "start": "2479089",
    "end": "2485380"
  },
  {
    "text": "but it's really easy if you do your migrations at deploy time you can add a step where you actually just rename that",
    "start": "2485410",
    "end": "2492680"
  },
  {
    "text": "table after you're done because that then the next deployment you can just",
    "start": "2492680",
    "end": "2498619"
  },
  {
    "text": "rename it back to its original name run your deployments and then rename it again and if entity framework doesn't",
    "start": "2498619",
    "end": "2504980"
  },
  {
    "text": "find that table that's awesome it will just think that the database is in the",
    "start": "2504980",
    "end": "2510140"
  },
  {
    "text": "correct state and it will just continue doing its work whether there are more or",
    "start": "2510140",
    "end": "2515900"
  },
  {
    "text": "less plugins in the database if a field doesn't exist and it tries to query it then it will break now the other",
    "start": "2515900",
    "end": "2522769"
  },
  {
    "text": "approach that you can take is you can keep your my creations separated and I like that idea a lot better because you",
    "start": "2522769",
    "end": "2529279"
  },
  {
    "text": "can basically hold your database migrations in sync with",
    "start": "2529279",
    "end": "2534380"
  },
  {
    "text": "the code that you write it means that you will write migrations that are necessary for a plugin in each plugin",
    "start": "2534380",
    "end": "2539900"
  },
  {
    "text": "and that's really cool but it almost forces you to do runtime migrations",
    "start": "2539900",
    "end": "2547810"
  },
  {
    "text": "because you will have to see which plugins are there and then see if there are missing migrations and run them and",
    "start": "2547810",
    "end": "2554330"
  },
  {
    "text": "not everybody likes this because if you yeah if you have a DBA he will not like",
    "start": "2554330",
    "end": "2559340"
  },
  {
    "text": "the idea of your applications changing the schema at runtime there are some",
    "start": "2559340",
    "end": "2564890"
  },
  {
    "text": "ways around that you can make a migration runner that takes in the set of plugins that you're planning to deploy and then run that that's a that's",
    "start": "2564890",
    "end": "2572420"
  },
  {
    "text": "a possibility now the thing with the decentralized",
    "start": "2572420",
    "end": "2578390"
  },
  {
    "text": "ones and that's the the biggest reason that held us back is that you really have no way of checking if some plugins",
    "start": "2578390",
    "end": "2585380"
  },
  {
    "text": "and actually interfere with each other say that you create the same field name",
    "start": "2585380",
    "end": "2590660"
  },
  {
    "text": "twice but it has a different meaning yeah that would mess up if you deploy the two plugins together so what does it",
    "start": "2590660",
    "end": "2599720"
  },
  {
    "text": "look like yeah the central migrations are actually I didn't put any code on a slide because it just and any framework or takes your",
    "start": "2599720",
    "end": "2608330"
  },
  {
    "text": "startup project in your solution to call the on model creating and then do the",
    "start": "2608330",
    "end": "2613340"
  },
  {
    "text": "migrations so if you have all your plugins in the same solution basically",
    "start": "2613340",
    "end": "2618380"
  },
  {
    "text": "entity framework migrations is going to behave the way that you want so that's",
    "start": "2618380",
    "end": "2626180"
  },
  {
    "text": "all really easy to do I'm pretty sure that you will figure it out but remember",
    "start": "2626180",
    "end": "2633020"
  },
  {
    "text": "that you have to rename the table before and after the deploy now fluid migrator",
    "start": "2633020",
    "end": "2638840"
  },
  {
    "text": "is a third party project it allows you to do migrations that are very similar",
    "start": "2638840",
    "end": "2644600"
  },
  {
    "text": "to entity framework or migrations and but the thing is they don't care about",
    "start": "2644600",
    "end": "2652220"
  },
  {
    "text": "the bubble state as much they just have code for an up and a down step and",
    "start": "2652220",
    "end": "2658210"
  },
  {
    "text": "that's pretty much it and they will look like this now the disadvantage is you will have to",
    "start": "2658210",
    "end": "2664620"
  },
  {
    "text": "write this by hand but it's really not that hard to do I'm pretty sure that as a default developer you will have not",
    "start": "2664620",
    "end": "2672420"
  },
  {
    "text": "more work doing this when when you compare it to opening sequel server management studio and all these",
    "start": "2672420",
    "end": "2679380"
  },
  {
    "text": "migrations they have a number and this migration framework doesn't care if they",
    "start": "2679380",
    "end": "2684960"
  },
  {
    "text": "are all executed in order and if the model state is correct before we start a migration after it and whatever it will",
    "start": "2684960",
    "end": "2691380"
  },
  {
    "text": "just scan the table it also has a table it's called version history it scans the",
    "start": "2691380",
    "end": "2696660"
  },
  {
    "text": "table it sees which ones are there and which ones it knows about and it collects a list of missing migrations",
    "start": "2696660",
    "end": "2703350"
  },
  {
    "text": "and it it just executes those in order but it might be that you redeploy a",
    "start": "2703350",
    "end": "2709350"
  },
  {
    "text": "plug-in after a while and you have like four missing migrations but they are all over the place and there have been migrations with higher numbers no",
    "start": "2709350",
    "end": "2716700"
  },
  {
    "text": "problem whatsoever for affluent migrator which makes it very suitable for the case that we were working on there's",
    "start": "2716700",
    "end": "2723030"
  },
  {
    "text": "only one caveat when you make a migration runner for flowing fluent",
    "start": "2723030",
    "end": "2728310"
  },
  {
    "text": "migrator you have this builder pattern and you can tell it to scan in and then",
    "start": "2728310",
    "end": "2734160"
  },
  {
    "text": "you can pass it a list of assemblies where it should scan for migrations now",
    "start": "2734160",
    "end": "2739250"
  },
  {
    "text": "with a builder you would think that you can call that scan in multiple times to add more assemblies yeah this is not",
    "start": "2739250",
    "end": "2745860"
  },
  {
    "text": "true you can only call that once the last what time that you call it that list is the one that gets used so you",
    "start": "2745860",
    "end": "2751920"
  },
  {
    "text": "have to build up your list of assemblies first and then pass it to it and then it will work as intended and the result of",
    "start": "2751920",
    "end": "2760740"
  },
  {
    "text": "our project is actually very nice we had very clean dependencies we had a core and it only gets referenced from the",
    "start": "2760740",
    "end": "2767310"
  },
  {
    "text": "outside by our plugins by our migration projects by our di and even by our UI",
    "start": "2767310",
    "end": "2772920"
  },
  {
    "text": "and the only link that might seem a little bit out of place is the one going",
    "start": "2772920",
    "end": "2779130"
  },
  {
    "text": "from web to di but you need to wire up your di container at startup right so to",
    "start": "2779130",
    "end": "2787980"
  },
  {
    "text": "conclude a little bit what I'm gonna do is I'm gonna do the conclusion then do",
    "start": "2787980",
    "end": "2794030"
  },
  {
    "text": "the frequently asked we have a little bit of time for questions and then I'll have two more",
    "start": "2794030",
    "end": "2801210"
  },
  {
    "text": "slides at the end so the first thing you should always do is structure your code",
    "start": "2801210",
    "end": "2806700"
  },
  {
    "text": "and make your code as flexible as possible and don't try to introduce new",
    "start": "2806700",
    "end": "2813240"
  },
  {
    "text": "complexities if you don't need them plugins and extending entity framework",
    "start": "2813240",
    "end": "2819680"
  },
  {
    "text": "and asp.net is really not that hard to do it used to be a bit harder two years ago but it",
    "start": "2819680",
    "end": "2826590"
  },
  {
    "text": "really isn't today so it shouldn't really hold you back to try this don't",
    "start": "2826590",
    "end": "2833340"
  },
  {
    "text": "solve your code problems with deployment problems so don't add like a million micro services to solve a problem that",
    "start": "2833340",
    "end": "2840180"
  },
  {
    "text": "you didn't find a way to structure your code properly and if we think about the",
    "start": "2840180",
    "end": "2845490"
  },
  {
    "text": "steps in the beginning don't worry if you're not at any step yet you will run into the same walls that we ran into and",
    "start": "2845490",
    "end": "2851490"
  },
  {
    "text": "you will get there and I don't know if there's a step eight I hope there is I'll tell you when I get there",
    "start": "2851490",
    "end": "2856940"
  },
  {
    "text": "now the questions that I usually have about this like isn't this a lot harder to do and it really isn't um the thing",
    "start": "2856940",
    "end": "2865530"
  },
  {
    "text": "is you you need a bit of setup at the beginning of your project to get everything wired up but every new",
    "start": "2865530",
    "end": "2872130"
  },
  {
    "text": "project that you start you're gonna have a setup phase so it doesn't really hold you back that much now somebody else",
    "start": "2872130",
    "end": "2880620"
  },
  {
    "text": "asked me in another time that I gave this talk like shouldn't the plugins be onions by themselves and yes they should",
    "start": "2880620",
    "end": "2885630"
  },
  {
    "text": "they really should but it would complicate the demo too much but if",
    "start": "2885630",
    "end": "2891450"
  },
  {
    "text": "you're starting to do this on a larger scale you basically will want your features to have an onion structure",
    "start": "2891450",
    "end": "2897180"
  },
  {
    "text": "inside them so do that if you if you",
    "start": "2897180",
    "end": "2902280"
  },
  {
    "text": "ever get into this and start doing it seriously now when should you do this",
    "start": "2902280",
    "end": "2908820"
  },
  {
    "text": "well for onion architecture I don't see a reason why you shouldn't it just gives",
    "start": "2908820",
    "end": "2914880"
  },
  {
    "text": "you a lot cleaner dependencies in your codebase it will work for any any project in any object-oriented language",
    "start": "2914880",
    "end": "2922260"
  },
  {
    "text": "now plugins that's a really different scenario",
    "start": "2922260",
    "end": "2927590"
  },
  {
    "text": "it's very good for when you need modular deployments like we did if you for",
    "start": "2927650",
    "end": "2933020"
  },
  {
    "text": "instance have deployments that are based on a customer's contract whether they get certain features that could be a",
    "start": "2933020",
    "end": "2938660"
  },
  {
    "text": "really good reason to do this and if you want to be able to easily retire and",
    "start": "2938660",
    "end": "2943730"
  },
  {
    "text": "replace code for instance if you do a/b testing that's really nice and one of",
    "start": "2943730",
    "end": "2949100"
  },
  {
    "text": "the big advantages that I didn't really talk about is if you make all your plugins have separates build pipelines",
    "start": "2949100",
    "end": "2956210"
  },
  {
    "text": "it becomes a lot easier on your build servers to build a large solution so",
    "start": "2956210",
    "end": "2961460"
  },
  {
    "text": "that can also be a reason to do this and then there is the 10100 rule and it's I",
    "start": "2961460",
    "end": "2966710"
  },
  {
    "text": "don't know if it's called a 10100 rule I didn't invent it either I think od de Haan once told me about it it's",
    "start": "2966710",
    "end": "2973700"
  },
  {
    "text": "basically if you can get your business to agree to write any feature with 10%",
    "start": "2973700",
    "end": "2979640"
  },
  {
    "text": "of the effort you just would quicken Dury but you set a very hard expiration date on the code and that's why it's",
    "start": "2979640",
    "end": "2986450"
  },
  {
    "text": "very important that your business is on board with this you write it's quick and dirty you deploy it you see how it",
    "start": "2986450",
    "end": "2993140"
  },
  {
    "text": "behaves you see if customers like it you see if you get a response for it and if at the",
    "start": "2993140",
    "end": "2998510"
  },
  {
    "text": "expiration date your business people decide we want to keep this feature they know that they will have to spend a",
    "start": "2998510",
    "end": "3004150"
  },
  {
    "text": "hundred percent of the development time at that point so you will basically",
    "start": "3004150",
    "end": "3009790"
  },
  {
    "text": "invest a hundred and ten percent to write this feature but if you like to try a lot of things you can try ten",
    "start": "3009790",
    "end": "3017260"
  },
  {
    "text": "times the amount of things if you write them all quick and dirty and then throw them away after but if you're not",
    "start": "3017260",
    "end": "3022570"
  },
  {
    "text": "allowed to throw away that crappy code you're gonna hurt yourself really badly so you have to have your business on",
    "start": "3022570",
    "end": "3029710"
  },
  {
    "text": "board for that but if you do that then plugins is a really good model to try that out right ask me some questions",
    "start": "3029710",
    "end": "3039000"
  },
  {
    "text": "do I see any of my partners I've basically done this at three projects",
    "start": "3050710",
    "end": "3055849"
  },
  {
    "text": "already so it's also a very nice way to yeah the I'm gonna repeat a question",
    "start": "3055849",
    "end": "3062240"
  },
  {
    "text": "because that not everybody heard this he asked me if I see any of our partners do the same thing that's the question right",
    "start": "3062240",
    "end": "3071230"
  },
  {
    "text": "right right right right no on the device side you mean right no because they will they were always",
    "start": "3071829",
    "end": "3079010"
  },
  {
    "text": "focused on this one thing they did their device with their features and we",
    "start": "3079010",
    "end": "3084950"
  },
  {
    "text": "basically had to adapt to them that's why all of our devices look differently in our code because we had to work with",
    "start": "3084950",
    "end": "3091549"
  },
  {
    "text": "the manufacturer specs",
    "start": "3091549",
    "end": "3094809"
  },
  {
    "text": "yes we at the moment I'm I'm actually doing something very similar at another",
    "start": "3111729",
    "end": "3117499"
  },
  {
    "text": "project and it allows you to to make any software project really flexible and we",
    "start": "3117499",
    "end": "3124759"
  },
  {
    "text": "can we could use it for external development because we did have different teams in that IOT company and",
    "start": "3124759",
    "end": "3130180"
  },
  {
    "text": "anybody body could write a plug-in and but we didn't allow our customers to",
    "start": "3130180",
    "end": "3135709"
  },
  {
    "text": "make the plugins for us that's basically that was our responsibility but you could it would be a possibility you can",
    "start": "3135709",
    "end": "3141680"
  },
  {
    "text": "make a very clean API of extension points and if you do it like this and",
    "start": "3141680",
    "end": "3147589"
  },
  {
    "text": "then you can basically review the plugins when they come in and deploy them on",
    "start": "3147589",
    "end": "3153729"
  },
  {
    "text": "we just we would make a list of plugins in our deployment pipeline so we have a",
    "start": "3161940",
    "end": "3167280"
  },
  {
    "text": "simple text file that basically decided which plugins should get deployed and it would just pull in all those solutions",
    "start": "3167280",
    "end": "3173400"
  },
  {
    "text": "and deployed the dll's to the deployment folder and that was basically all that's",
    "start": "3173400",
    "end": "3179039"
  },
  {
    "text": "what's necessary well basically it won't",
    "start": "3179039",
    "end": "3185010"
  },
  {
    "text": "get picked up until you restart the application so you can just add the two dll to the folder and then restart that",
    "start": "3185010",
    "end": "3191309"
  },
  {
    "text": "would work the thing is we had like monthly deploy so it wasn't really that big of a deal",
    "start": "3191309",
    "end": "3197270"
  },
  {
    "text": "because we would only change plugins at those times but you can you can be",
    "start": "3197270",
    "end": "3202799"
  },
  {
    "text": "really flexible but you will need to restart that's that's the thing you won't need to do",
    "start": "3202799",
    "end": "3209210"
  },
  {
    "text": "that's okay what happens if the plugins have references to other dll's and your",
    "start": "3223170",
    "end": "3230100"
  },
  {
    "text": "solution for your plugin will basically contain all the dependencies that that plug-in needs so you wouldn't need to",
    "start": "3230100",
    "end": "3236040"
  },
  {
    "text": "take the entire deployment folder of your plug-in and add that to do your deployment so if that one uses external",
    "start": "3236040",
    "end": "3243360"
  },
  {
    "text": "libraries like for instance in an API that your device supplier gave you yeah",
    "start": "3243360",
    "end": "3249180"
  },
  {
    "text": "you have to include that in your plug-in and that would get deployed along with it so that's okay that works I think we're",
    "start": "3249180",
    "end": "3257220"
  },
  {
    "text": "running out of time aren't we no we still have like two more questions yes",
    "start": "3257220",
    "end": "3264980"
  },
  {
    "text": "well I explained that a little bit in the beginning is because microservices",
    "start": "3278239",
    "end": "3283529"
  },
  {
    "text": "would really complicate our deployment and we were using this part of the code",
    "start": "3283529",
    "end": "3291209"
  },
  {
    "text": "this disk or logic in some of the services that we already had because it was already service oriented and we felt",
    "start": "3291209",
    "end": "3298409"
  },
  {
    "text": "that if we were we were already struggling with deploying like the eight",
    "start": "3298409",
    "end": "3303449"
  },
  {
    "text": "or nine services that we had and keeping that all working together we didn't feel",
    "start": "3303449",
    "end": "3309029"
  },
  {
    "text": "that the team was ready to move into full-on micro services because that adds so much more complexity it could be yeah",
    "start": "3309029",
    "end": "3319799"
  },
  {
    "text": "it could be an approach but we were like seven people in the team so it's not like we needed to be able to work",
    "start": "3319799",
    "end": "3325619"
  },
  {
    "text": "independently on different services wasn't really like that and usually when we did when we did a device",
    "start": "3325619",
    "end": "3333809"
  },
  {
    "text": "implementation we would go through a phase where we started the development and then we would finish it we did some",
    "start": "3333809",
    "end": "3341549"
  },
  {
    "text": "bug fixing and then probably we wouldn't touch it for like a few years until that",
    "start": "3341549",
    "end": "3346919"
  },
  {
    "text": "supplier came with new devices so with micro services you're often aiming for",
    "start": "3346919",
    "end": "3353189"
  },
  {
    "text": "the benefit of being able to redeploy everything separately but we didn't really need that as well so that's why",
    "start": "3353189",
    "end": "3360749"
  },
  {
    "text": "right I'm gonna wrap up if you have more",
    "start": "3360749",
    "end": "3365849"
  },
  {
    "text": "questions just come and see me in the hallway I don't bite I'm not scary and I like talking to other developers so",
    "start": "3365849",
    "end": "3372449"
  },
  {
    "text": "please come and find me there's one more thing I want to talk about and it has",
    "start": "3372449",
    "end": "3378509"
  },
  {
    "text": "nothing to do with the rest of the type so if you don't talk so if you don't like it just leave and as an industry we",
    "start": "3378509",
    "end": "3385859"
  },
  {
    "text": "have a problem because if I look around this room I see what I usually see when",
    "start": "3385859",
    "end": "3390959"
  },
  {
    "text": "I'm standing in front of a room like this I see a lot of white guys and that's okay you don't have to apologize",
    "start": "3390959",
    "end": "3396419"
  },
  {
    "text": "for being a white guy but we have blind spots and because we are a very very",
    "start": "3396419",
    "end": "3404299"
  },
  {
    "text": "monotone industry it means that all of our blind spots are most likely going to be the same and you have this thing",
    "start": "3404449",
    "end": "3412140"
  },
  {
    "text": "where if you're going to try and hire someone for your team you're also psychologically going to",
    "start": "3412140",
    "end": "3418350"
  },
  {
    "text": "look for a person that is like you so if you're a team of white guys you will probably ending and ending up why are",
    "start": "3418350",
    "end": "3424770"
  },
  {
    "text": "you hiring another guy that is like you where you should actually be looking for",
    "start": "3424770",
    "end": "3429900"
  },
  {
    "text": "what skills is our team missing and hire for that and you will get a more diverse team and everything will work way better",
    "start": "3429900",
    "end": "3437360"
  },
  {
    "text": "so what I want you all to do when you're hiring your next guy is to think about this and make a conscious choice to hire",
    "start": "3437360",
    "end": "3446310"
  },
  {
    "text": "the person that adds something to your team that you don't already have just",
    "start": "3446310",
    "end": "3451620"
  },
  {
    "text": "respect each other you will be fine don't apologize for being a white guy I am one as well but you have to be aware",
    "start": "3451620",
    "end": "3458220"
  },
  {
    "text": "of this problem my name is Hannes this is my twitter handler handle and at that URL you can",
    "start": "3458220",
    "end": "3465450"
  },
  {
    "text": "find the slides and the code samples come and see me in the hallway if you have more questions and I thank you all",
    "start": "3465450",
    "end": "3471420"
  },
  {
    "text": "for sitting through this hour thank you",
    "start": "3471420",
    "end": "3475910"
  },
  {
    "text": "you",
    "start": "3478820",
    "end": "3480880"
  }
]